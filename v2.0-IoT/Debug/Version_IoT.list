
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df40  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  0800e124  0800e124  0000f124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e308  0800e308  00010f80  2**0
                  CONTENTS
  4 .ARM          00000008  0800e308  0800e308  0000f308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e310  0800e310  00010f80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e310  0800e310  0000f310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e314  0800e314  0000f314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000f80  20000000  0800e318  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000958  20000f80  0800f298  00010f80  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018d8  0800f298  000118d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f80  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184f7  00000000  00000000  00010fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003438  00000000  00000000  000294a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  0002c8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e77  00000000  00000000  0002db90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c232  00000000  00000000  0002ea07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ca57  00000000  00000000  0004ac39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ffa5  00000000  00000000  00067690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107635  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d08  00000000  00000000  00107678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010c380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000f80 	.word	0x20000f80
 8000200:	00000000 	.word	0x00000000
 8000204:	0800e10c 	.word	0x0800e10c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000f84 	.word	0x20000f84
 8000220:	0800e10c 	.word	0x0800e10c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	@ 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9b      	ldr	r3, [pc, #620]	@ (80004b4 <eepromKontrol+0x280>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	@ 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	@ 0xa0
 800024e:	489a      	ldr	r0, [pc, #616]	@ (80004b8 <eepromKontrol+0x284>)
 8000250:	f00b faaa 	bl	800b7a8 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000258:	f00a f922 	bl	800a4a0 <HAL_Delay>

	//Sürekli sıfırlama işlemi yapıyor
	firstSetup();
 800025c:	f000 fa34 	bl	80006c8 <firstSetup>

	setupCompleted = eepromData[0];
 8000260:	4b94      	ldr	r3, [pc, #592]	@ (80004b4 <eepromKontrol+0x280>)
 8000262:	781a      	ldrb	r2, [r3, #0]
 8000264:	4b95      	ldr	r3, [pc, #596]	@ (80004bc <eepromKontrol+0x288>)
 8000266:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000268:	4b92      	ldr	r3, [pc, #584]	@ (80004b4 <eepromKontrol+0x280>)
 800026a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800026e:	4b94      	ldr	r3, [pc, #592]	@ (80004c0 <eepromKontrol+0x28c>)
 8000270:	701a      	strb	r2, [r3, #0]

	kaydedilenDeger = eepromData[3];
 8000272:	4b90      	ldr	r3, [pc, #576]	@ (80004b4 <eepromKontrol+0x280>)
 8000274:	78da      	ldrb	r2, [r3, #3]
 8000276:	4b93      	ldr	r3, [pc, #588]	@ (80004c4 <eepromKontrol+0x290>)
 8000278:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 800027a:	4b8e      	ldr	r3, [pc, #568]	@ (80004b4 <eepromKontrol+0x280>)
 800027c:	785a      	ldrb	r2, [r3, #1]
 800027e:	4b92      	ldr	r3, [pc, #584]	@ (80004c8 <eepromKontrol+0x294>)
 8000280:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8000282:	4b8c      	ldr	r3, [pc, #560]	@ (80004b4 <eepromKontrol+0x280>)
 8000284:	789a      	ldrb	r2, [r3, #2]
 8000286:	4b91      	ldr	r3, [pc, #580]	@ (80004cc <eepromKontrol+0x298>)
 8000288:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 800028a:	4b8a      	ldr	r3, [pc, #552]	@ (80004b4 <eepromKontrol+0x280>)
 800028c:	791a      	ldrb	r2, [r3, #4]
 800028e:	4b90      	ldr	r3, [pc, #576]	@ (80004d0 <eepromKontrol+0x29c>)
 8000290:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8000292:	4b88      	ldr	r3, [pc, #544]	@ (80004b4 <eepromKontrol+0x280>)
 8000294:	795a      	ldrb	r2, [r3, #5]
 8000296:	4b8f      	ldr	r3, [pc, #572]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000298:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 800029a:	4b86      	ldr	r3, [pc, #536]	@ (80004b4 <eepromKontrol+0x280>)
 800029c:	799a      	ldrb	r2, [r3, #6]
 800029e:	4b8e      	ldr	r3, [pc, #568]	@ (80004d8 <eepromKontrol+0x2a4>)
 80002a0:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 80002a2:	4b84      	ldr	r3, [pc, #528]	@ (80004b4 <eepromKontrol+0x280>)
 80002a4:	79da      	ldrb	r2, [r3, #7]
 80002a6:	4b8d      	ldr	r3, [pc, #564]	@ (80004dc <eepromKontrol+0x2a8>)
 80002a8:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 80002aa:	4b82      	ldr	r3, [pc, #520]	@ (80004b4 <eepromKontrol+0x280>)
 80002ac:	7a1a      	ldrb	r2, [r3, #8]
 80002ae:	4b8c      	ldr	r3, [pc, #560]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002b0:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 80002b2:	4b80      	ldr	r3, [pc, #512]	@ (80004b4 <eepromKontrol+0x280>)
 80002b4:	7a5a      	ldrb	r2, [r3, #9]
 80002b6:	4b8b      	ldr	r3, [pc, #556]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002b8:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002ba:	4b7e      	ldr	r3, [pc, #504]	@ (80004b4 <eepromKontrol+0x280>)
 80002bc:	7a9a      	ldrb	r2, [r3, #10]
 80002be:	4b8a      	ldr	r3, [pc, #552]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002c0:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002c2:	4b7c      	ldr	r3, [pc, #496]	@ (80004b4 <eepromKontrol+0x280>)
 80002c4:	7ada      	ldrb	r2, [r3, #11]
 80002c6:	4b89      	ldr	r3, [pc, #548]	@ (80004ec <eepromKontrol+0x2b8>)
 80002c8:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002ca:	4b7a      	ldr	r3, [pc, #488]	@ (80004b4 <eepromKontrol+0x280>)
 80002cc:	7b1a      	ldrb	r2, [r3, #12]
 80002ce:	4b88      	ldr	r3, [pc, #544]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002d0:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002d2:	4b78      	ldr	r3, [pc, #480]	@ (80004b4 <eepromKontrol+0x280>)
 80002d4:	7b5a      	ldrb	r2, [r3, #13]
 80002d6:	4b87      	ldr	r3, [pc, #540]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002d8:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002da:	4b76      	ldr	r3, [pc, #472]	@ (80004b4 <eepromKontrol+0x280>)
 80002dc:	7b9a      	ldrb	r2, [r3, #14]
 80002de:	4b86      	ldr	r3, [pc, #536]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002e0:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002e2:	4b74      	ldr	r3, [pc, #464]	@ (80004b4 <eepromKontrol+0x280>)
 80002e4:	7bda      	ldrb	r2, [r3, #15]
 80002e6:	4b85      	ldr	r3, [pc, #532]	@ (80004fc <eepromKontrol+0x2c8>)
 80002e8:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002ea:	4b72      	ldr	r3, [pc, #456]	@ (80004b4 <eepromKontrol+0x280>)
 80002ec:	7c1a      	ldrb	r2, [r3, #16]
 80002ee:	4b84      	ldr	r3, [pc, #528]	@ (8000500 <eepromKontrol+0x2cc>)
 80002f0:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002f2:	4b70      	ldr	r3, [pc, #448]	@ (80004b4 <eepromKontrol+0x280>)
 80002f4:	7c5a      	ldrb	r2, [r3, #17]
 80002f6:	4b83      	ldr	r3, [pc, #524]	@ (8000504 <eepromKontrol+0x2d0>)
 80002f8:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002fa:	4b6e      	ldr	r3, [pc, #440]	@ (80004b4 <eepromKontrol+0x280>)
 80002fc:	7c9a      	ldrb	r2, [r3, #18]
 80002fe:	4b82      	ldr	r3, [pc, #520]	@ (8000508 <eepromKontrol+0x2d4>)
 8000300:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8000302:	4b6c      	ldr	r3, [pc, #432]	@ (80004b4 <eepromKontrol+0x280>)
 8000304:	7cda      	ldrb	r2, [r3, #19]
 8000306:	4b81      	ldr	r3, [pc, #516]	@ (800050c <eepromKontrol+0x2d8>)
 8000308:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 800030a:	4b6a      	ldr	r3, [pc, #424]	@ (80004b4 <eepromKontrol+0x280>)
 800030c:	7d1a      	ldrb	r2, [r3, #20]
 800030e:	4b80      	ldr	r3, [pc, #512]	@ (8000510 <eepromKontrol+0x2dc>)
 8000310:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8000312:	4b68      	ldr	r3, [pc, #416]	@ (80004b4 <eepromKontrol+0x280>)
 8000314:	7d5a      	ldrb	r2, [r3, #21]
 8000316:	4b7f      	ldr	r3, [pc, #508]	@ (8000514 <eepromKontrol+0x2e0>)
 8000318:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 800031a:	4b66      	ldr	r3, [pc, #408]	@ (80004b4 <eepromKontrol+0x280>)
 800031c:	7d9a      	ldrb	r2, [r3, #22]
 800031e:	4b7e      	ldr	r3, [pc, #504]	@ (8000518 <eepromKontrol+0x2e4>)
 8000320:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8000322:	4b64      	ldr	r3, [pc, #400]	@ (80004b4 <eepromKontrol+0x280>)
 8000324:	7dda      	ldrb	r2, [r3, #23]
 8000326:	4b7d      	ldr	r3, [pc, #500]	@ (800051c <eepromKontrol+0x2e8>)
 8000328:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 800032a:	4b62      	ldr	r3, [pc, #392]	@ (80004b4 <eepromKontrol+0x280>)
 800032c:	7e1a      	ldrb	r2, [r3, #24]
 800032e:	4b7c      	ldr	r3, [pc, #496]	@ (8000520 <eepromKontrol+0x2ec>)
 8000330:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8000332:	4b60      	ldr	r3, [pc, #384]	@ (80004b4 <eepromKontrol+0x280>)
 8000334:	7e5a      	ldrb	r2, [r3, #25]
 8000336:	4b7b      	ldr	r3, [pc, #492]	@ (8000524 <eepromKontrol+0x2f0>)
 8000338:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 800033a:	4b5e      	ldr	r3, [pc, #376]	@ (80004b4 <eepromKontrol+0x280>)
 800033c:	7e9a      	ldrb	r2, [r3, #26]
 800033e:	4b7a      	ldr	r3, [pc, #488]	@ (8000528 <eepromKontrol+0x2f4>)
 8000340:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8000342:	4b5c      	ldr	r3, [pc, #368]	@ (80004b4 <eepromKontrol+0x280>)
 8000344:	7eda      	ldrb	r2, [r3, #27]
 8000346:	4b79      	ldr	r3, [pc, #484]	@ (800052c <eepromKontrol+0x2f8>)
 8000348:	701a      	strb	r2, [r3, #0]
	calismaSayisiDemo = eepromData[28];
 800034a:	4b5a      	ldr	r3, [pc, #360]	@ (80004b4 <eepromKontrol+0x280>)
 800034c:	7f1a      	ldrb	r2, [r3, #28]
 800034e:	4b78      	ldr	r3, [pc, #480]	@ (8000530 <eepromKontrol+0x2fc>)
 8000350:	701a      	strb	r2, [r3, #0]
	calismaCount = eepromData[29];
 8000352:	4b58      	ldr	r3, [pc, #352]	@ (80004b4 <eepromKontrol+0x280>)
 8000354:	7f5a      	ldrb	r2, [r3, #29]
 8000356:	4b77      	ldr	r3, [pc, #476]	@ (8000534 <eepromKontrol+0x300>)
 8000358:	701a      	strb	r2, [r3, #0]
	calismaCountDemo = eepromData[30];
 800035a:	4b56      	ldr	r3, [pc, #344]	@ (80004b4 <eepromKontrol+0x280>)
 800035c:	7f9a      	ldrb	r2, [r3, #30]
 800035e:	4b76      	ldr	r3, [pc, #472]	@ (8000538 <eepromKontrol+0x304>)
 8000360:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8000362:	4b54      	ldr	r3, [pc, #336]	@ (80004b4 <eepromKontrol+0x280>)
 8000364:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8000368:	4b74      	ldr	r3, [pc, #464]	@ (800053c <eepromKontrol+0x308>)
 800036a:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 800036c:	4b51      	ldr	r3, [pc, #324]	@ (80004b4 <eepromKontrol+0x280>)
 800036e:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000372:	4b73      	ldr	r3, [pc, #460]	@ (8000540 <eepromKontrol+0x30c>)
 8000374:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8000376:	4b4f      	ldr	r3, [pc, #316]	@ (80004b4 <eepromKontrol+0x280>)
 8000378:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800037c:	4b71      	ldr	r3, [pc, #452]	@ (8000544 <eepromKontrol+0x310>)
 800037e:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000380:	4b4c      	ldr	r3, [pc, #304]	@ (80004b4 <eepromKontrol+0x280>)
 8000382:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000386:	4b70      	ldr	r3, [pc, #448]	@ (8000548 <eepromKontrol+0x314>)
 8000388:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 800038a:	4b4a      	ldr	r3, [pc, #296]	@ (80004b4 <eepromKontrol+0x280>)
 800038c:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000390:	4b6e      	ldr	r3, [pc, #440]	@ (800054c <eepromKontrol+0x318>)
 8000392:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8000394:	4b47      	ldr	r3, [pc, #284]	@ (80004b4 <eepromKontrol+0x280>)
 8000396:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800039a:	4b6d      	ldr	r3, [pc, #436]	@ (8000550 <eepromKontrol+0x31c>)
 800039c:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 800039e:	4b45      	ldr	r3, [pc, #276]	@ (80004b4 <eepromKontrol+0x280>)
 80003a0:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80003a4:	4b6b      	ldr	r3, [pc, #428]	@ (8000554 <eepromKontrol+0x320>)
 80003a6:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003a8:	4b42      	ldr	r3, [pc, #264]	@ (80004b4 <eepromKontrol+0x280>)
 80003aa:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 80003ae:	4b6a      	ldr	r3, [pc, #424]	@ (8000558 <eepromKontrol+0x324>)
 80003b0:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b2:	4b40      	ldr	r3, [pc, #256]	@ (80004b4 <eepromKontrol+0x280>)
 80003b4:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80003b8:	4b68      	ldr	r3, [pc, #416]	@ (800055c <eepromKontrol+0x328>)
 80003ba:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003bc:	4b3d      	ldr	r3, [pc, #244]	@ (80004b4 <eepromKontrol+0x280>)
 80003be:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003c2:	4b67      	ldr	r3, [pc, #412]	@ (8000560 <eepromKontrol+0x32c>)
 80003c4:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003c6:	4b3b      	ldr	r3, [pc, #236]	@ (80004b4 <eepromKontrol+0x280>)
 80003c8:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003cc:	4b65      	ldr	r3, [pc, #404]	@ (8000564 <eepromKontrol+0x330>)
 80003ce:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d0:	4b38      	ldr	r3, [pc, #224]	@ (80004b4 <eepromKontrol+0x280>)
 80003d2:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003d6:	4b64      	ldr	r3, [pc, #400]	@ (8000568 <eepromKontrol+0x334>)
 80003d8:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003da:	4b36      	ldr	r3, [pc, #216]	@ (80004b4 <eepromKontrol+0x280>)
 80003dc:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003e0:	4b62      	ldr	r3, [pc, #392]	@ (800056c <eepromKontrol+0x338>)
 80003e2:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003e4:	4b33      	ldr	r3, [pc, #204]	@ (80004b4 <eepromKontrol+0x280>)
 80003e6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003ea:	4b61      	ldr	r3, [pc, #388]	@ (8000570 <eepromKontrol+0x33c>)
 80003ec:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80003ee:	4b36      	ldr	r3, [pc, #216]	@ (80004c8 <eepromKontrol+0x294>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d902      	bls.n	80003fc <eepromKontrol+0x1c8>
	    calismaSekli=0;
 80003f6:	4b34      	ldr	r3, [pc, #208]	@ (80004c8 <eepromKontrol+0x294>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80003fc:	4b33      	ldr	r3, [pc, #204]	@ (80004cc <eepromKontrol+0x298>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d902      	bls.n	800040a <eepromKontrol+0x1d6>
	    emniyetCercevesi=1;
 8000404:	4b31      	ldr	r3, [pc, #196]	@ (80004cc <eepromKontrol+0x298>)
 8000406:	2201      	movs	r2, #1
 8000408:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 800040a:	4b31      	ldr	r3, [pc, #196]	@ (80004d0 <eepromKontrol+0x29c>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d902      	bls.n	8000418 <eepromKontrol+0x1e4>
	    yavaslamaLimit=0;
 8000412:	4b2f      	ldr	r3, [pc, #188]	@ (80004d0 <eepromKontrol+0x29c>)
 8000414:	2200      	movs	r2, #0
 8000416:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8000418:	4b2e      	ldr	r3, [pc, #184]	@ (80004d4 <eepromKontrol+0x2a0>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b01      	cmp	r3, #1
 800041e:	d902      	bls.n	8000426 <eepromKontrol+0x1f2>
	    altLimit=1;
 8000420:	4b2c      	ldr	r3, [pc, #176]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000422:	2201      	movs	r2, #1
 8000424:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8000426:	4b2c      	ldr	r3, [pc, #176]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d902      	bls.n	8000434 <eepromKontrol+0x200>
	    basincSalteri=1;
 800042e:	4b2a      	ldr	r3, [pc, #168]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000430:	2201      	movs	r2, #1
 8000432:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8000434:	4b29      	ldr	r3, [pc, #164]	@ (80004dc <eepromKontrol+0x2a8>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b03      	cmp	r3, #3
 800043a:	d902      	bls.n	8000442 <eepromKontrol+0x20e>
	    kapiSecimleri=3;
 800043c:	4b27      	ldr	r3, [pc, #156]	@ (80004dc <eepromKontrol+0x2a8>)
 800043e:	2203      	movs	r2, #3
 8000440:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000442:	4b41      	ldr	r3, [pc, #260]	@ (8000548 <eepromKontrol+0x314>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b01      	cmp	r3, #1
 8000448:	d902      	bls.n	8000450 <eepromKontrol+0x21c>
	    kapiAcTipi=0;
 800044a:	4b3f      	ldr	r3, [pc, #252]	@ (8000548 <eepromKontrol+0x314>)
 800044c:	2200      	movs	r2, #0
 800044e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8000450:	4b23      	ldr	r3, [pc, #140]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b02      	cmp	r3, #2
 8000456:	d902      	bls.n	800045e <eepromKontrol+0x22a>
	    kapi1Tip=1;
 8000458:	4b21      	ldr	r3, [pc, #132]	@ (80004e0 <eepromKontrol+0x2ac>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 800045e:	4b21      	ldr	r3, [pc, #132]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b05      	cmp	r3, #5
 8000464:	d902      	bls.n	800046c <eepromKontrol+0x238>
	    kapi1AcSure=5;
 8000466:	4b1f      	ldr	r3, [pc, #124]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000468:	2205      	movs	r2, #5
 800046a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800046c:	4b1e      	ldr	r3, [pc, #120]	@ (80004e8 <eepromKontrol+0x2b4>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b02      	cmp	r3, #2
 8000472:	d902      	bls.n	800047a <eepromKontrol+0x246>
	    kapi2Tip=1;
 8000474:	4b1c      	ldr	r3, [pc, #112]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000476:	2201      	movs	r2, #1
 8000478:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800047a:	4b1c      	ldr	r3, [pc, #112]	@ (80004ec <eepromKontrol+0x2b8>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b05      	cmp	r3, #5
 8000480:	d902      	bls.n	8000488 <eepromKontrol+0x254>
	    kapi2AcSure=5;
 8000482:	4b1a      	ldr	r3, [pc, #104]	@ (80004ec <eepromKontrol+0x2b8>)
 8000484:	2205      	movs	r2, #5
 8000486:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8000488:	4b19      	ldr	r3, [pc, #100]	@ (80004f0 <eepromKontrol+0x2bc>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b02      	cmp	r3, #2
 800048e:	d902      	bls.n	8000496 <eepromKontrol+0x262>
	    kapitablaTip=1;
 8000490:	4b17      	ldr	r3, [pc, #92]	@ (80004f0 <eepromKontrol+0x2bc>)
 8000492:	2201      	movs	r2, #1
 8000494:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8000496:	4b2a      	ldr	r3, [pc, #168]	@ (8000540 <eepromKontrol+0x30c>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b02      	cmp	r3, #2
 800049c:	d902      	bls.n	80004a4 <eepromKontrol+0x270>
	    kapiTablaAcKonum=2;
 800049e:	4b28      	ldr	r3, [pc, #160]	@ (8000540 <eepromKontrol+0x30c>)
 80004a0:	2202      	movs	r2, #2
 80004a2:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80004a4:	4b13      	ldr	r3, [pc, #76]	@ (80004f4 <eepromKontrol+0x2c0>)
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2b05      	cmp	r3, #5
 80004aa:	d963      	bls.n	8000574 <eepromKontrol+0x340>
	    kapiTablaAcSure=5;
 80004ac:	4b11      	ldr	r3, [pc, #68]	@ (80004f4 <eepromKontrol+0x2c0>)
 80004ae:	2205      	movs	r2, #5
 80004b0:	701a      	strb	r2, [r3, #0]
 80004b2:	e05f      	b.n	8000574 <eepromKontrol+0x340>
 80004b4:	20000f9c 	.word	0x20000f9c
 80004b8:	200017f0 	.word	0x200017f0
 80004bc:	20001040 	.word	0x20001040
 80004c0:	2000108b 	.word	0x2000108b
 80004c4:	20001041 	.word	0x20001041
 80004c8:	2000106d 	.word	0x2000106d
 80004cc:	20001070 	.word	0x20001070
 80004d0:	20001071 	.word	0x20001071
 80004d4:	20001072 	.word	0x20001072
 80004d8:	20001073 	.word	0x20001073
 80004dc:	20001074 	.word	0x20001074
 80004e0:	20001075 	.word	0x20001075
 80004e4:	20001085 	.word	0x20001085
 80004e8:	20001076 	.word	0x20001076
 80004ec:	20001086 	.word	0x20001086
 80004f0:	20001077 	.word	0x20001077
 80004f4:	20001087 	.word	0x20001087
 80004f8:	2000107a 	.word	0x2000107a
 80004fc:	2000107b 	.word	0x2000107b
 8000500:	2000107c 	.word	0x2000107c
 8000504:	2000107d 	.word	0x2000107d
 8000508:	2000107e 	.word	0x2000107e
 800050c:	2000107f 	.word	0x2000107f
 8000510:	20001080 	.word	0x20001080
 8000514:	20001081 	.word	0x20001081
 8000518:	20001082 	.word	0x20001082
 800051c:	20001083 	.word	0x20001083
 8000520:	20001084 	.word	0x20001084
 8000524:	20001088 	.word	0x20001088
 8000528:	2000108a 	.word	0x2000108a
 800052c:	20001064 	.word	0x20001064
 8000530:	20001065 	.word	0x20001065
 8000534:	20001066 	.word	0x20001066
 8000538:	20001067 	.word	0x20001067
 800053c:	2000108d 	.word	0x2000108d
 8000540:	20001079 	.word	0x20001079
 8000544:	2000108c 	.word	0x2000108c
 8000548:	20001078 	.word	0x20001078
 800054c:	2000108e 	.word	0x2000108e
 8000550:	2000108f 	.word	0x2000108f
 8000554:	20001090 	.word	0x20001090
 8000558:	20001091 	.word	0x20001091
 800055c:	20001092 	.word	0x20001092
 8000560:	20001093 	.word	0x20001093
 8000564:	20001094 	.word	0x20001094
 8000568:	20001095 	.word	0x20001095
 800056c:	20001096 	.word	0x20001096
 8000570:	20001097 	.word	0x20001097
	}

	if(yukariYavasLimit>1) {
 8000574:	4b44      	ldr	r3, [pc, #272]	@ (8000688 <eepromKontrol+0x454>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b01      	cmp	r3, #1
 800057a:	d902      	bls.n	8000582 <eepromKontrol+0x34e>
	    yukariYavasLimit=0;
 800057c:	4b42      	ldr	r3, [pc, #264]	@ (8000688 <eepromKontrol+0x454>)
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8000582:	4b42      	ldr	r3, [pc, #264]	@ (800068c <eepromKontrol+0x458>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b02      	cmp	r3, #2
 8000588:	d902      	bls.n	8000590 <eepromKontrol+0x35c>
	    devirmeYuruyusSecim=0;
 800058a:	4b40      	ldr	r3, [pc, #256]	@ (800068c <eepromKontrol+0x458>)
 800058c:	2200      	movs	r2, #0
 800058e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8000590:	4b3f      	ldr	r3, [pc, #252]	@ (8000690 <eepromKontrol+0x45c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b01      	cmp	r3, #1
 8000596:	d902      	bls.n	800059e <eepromKontrol+0x36a>
	    devirmeYukariIleriLimit=1;
 8000598:	4b3d      	ldr	r3, [pc, #244]	@ (8000690 <eepromKontrol+0x45c>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 800059e:	4b3d      	ldr	r3, [pc, #244]	@ (8000694 <eepromKontrol+0x460>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d902      	bls.n	80005ac <eepromKontrol+0x378>
	    devirmeAsagiGeriLimit=1;
 80005a6:	4b3b      	ldr	r3, [pc, #236]	@ (8000694 <eepromKontrol+0x460>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 80005ac:	4b3a      	ldr	r3, [pc, #232]	@ (8000698 <eepromKontrol+0x464>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d902      	bls.n	80005ba <eepromKontrol+0x386>
	    devirmeSilindirTipi=0;
 80005b4:	4b38      	ldr	r3, [pc, #224]	@ (8000698 <eepromKontrol+0x464>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 80005ba:	4b38      	ldr	r3, [pc, #224]	@ (800069c <eepromKontrol+0x468>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d902      	bls.n	80005c8 <eepromKontrol+0x394>
	    platformSilindirTipi=0;
 80005c2:	4b36      	ldr	r3, [pc, #216]	@ (800069c <eepromKontrol+0x468>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80005c8:	4b35      	ldr	r3, [pc, #212]	@ (80006a0 <eepromKontrol+0x46c>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b05      	cmp	r3, #5
 80005ce:	d902      	bls.n	80005d6 <eepromKontrol+0x3a2>
	    yukariValfTmr=0;
 80005d0:	4b33      	ldr	r3, [pc, #204]	@ (80006a0 <eepromKontrol+0x46c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80005d6:	4b33      	ldr	r3, [pc, #204]	@ (80006a4 <eepromKontrol+0x470>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b05      	cmp	r3, #5
 80005dc:	d902      	bls.n	80005e4 <eepromKontrol+0x3b0>
	    asagiValfTmr=0;
 80005de:	4b31      	ldr	r3, [pc, #196]	@ (80006a4 <eepromKontrol+0x470>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80005e4:	4b30      	ldr	r3, [pc, #192]	@ (80006a8 <eepromKontrol+0x474>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b05      	cmp	r3, #5
 80005ea:	d902      	bls.n	80005f2 <eepromKontrol+0x3be>
	    devirmeYukariIleriTmr=0;
 80005ec:	4b2e      	ldr	r3, [pc, #184]	@ (80006a8 <eepromKontrol+0x474>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80005f2:	4b2e      	ldr	r3, [pc, #184]	@ (80006ac <eepromKontrol+0x478>)
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b05      	cmp	r3, #5
 80005f8:	d902      	bls.n	8000600 <eepromKontrol+0x3cc>
	    devirmeAsagiGeriTmr=0;
 80005fa:	4b2c      	ldr	r3, [pc, #176]	@ (80006ac <eepromKontrol+0x478>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000600:	4b2b      	ldr	r3, [pc, #172]	@ (80006b0 <eepromKontrol+0x47c>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2bb4      	cmp	r3, #180	@ 0xb4
 8000606:	d902      	bls.n	800060e <eepromKontrol+0x3da>
	    makineCalismaTmr=60;
 8000608:	4b29      	ldr	r3, [pc, #164]	@ (80006b0 <eepromKontrol+0x47c>)
 800060a:	223c      	movs	r2, #60	@ 0x3c
 800060c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800060e:	4b29      	ldr	r3, [pc, #164]	@ (80006b4 <eepromKontrol+0x480>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d902      	bls.n	800061c <eepromKontrol+0x3e8>
	    buzzer=0;
 8000616:	4b27      	ldr	r3, [pc, #156]	@ (80006b4 <eepromKontrol+0x480>)
 8000618:	2200      	movs	r2, #0
 800061a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800061c:	4b26      	ldr	r3, [pc, #152]	@ (80006b8 <eepromKontrol+0x484>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d902      	bls.n	800062a <eepromKontrol+0x3f6>
	    demoMode=0;
 8000624:	4b24      	ldr	r3, [pc, #144]	@ (80006b8 <eepromKontrol+0x484>)
 8000626:	2200      	movs	r2, #0
 8000628:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800062a:	4b24      	ldr	r3, [pc, #144]	@ (80006bc <eepromKontrol+0x488>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d902      	bls.n	8000638 <eepromKontrol+0x404>
	    calismaSayModu=0;
 8000632:	4b22      	ldr	r3, [pc, #136]	@ (80006bc <eepromKontrol+0x488>)
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000638:	4b21      	ldr	r3, [pc, #132]	@ (80006c0 <eepromKontrol+0x48c>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d902      	bls.n	8000646 <eepromKontrol+0x412>
	    dilSecim=0;
 8000640:	4b1f      	ldr	r3, [pc, #124]	@ (80006c0 <eepromKontrol+0x48c>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8000646:	4b1f      	ldr	r3, [pc, #124]	@ (80006c4 <eepromKontrol+0x490>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d902      	bls.n	8000654 <eepromKontrol+0x420>
		iotMode=0;
 800064e:	4b1d      	ldr	r3, [pc, #116]	@ (80006c4 <eepromKontrol+0x490>)
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 8000654:	2001      	movs	r0, #1
 8000656:	f000 f897 	bl	8000788 <convertArrays>
	HAL_Delay(250);
 800065a:	20fa      	movs	r0, #250	@ 0xfa
 800065c:	f009 ff20 	bl	800a4a0 <HAL_Delay>

	convertArrays(2);
 8000660:	2002      	movs	r0, #2
 8000662:	f000 f891 	bl	8000788 <convertArrays>
	HAL_Delay(250);
 8000666:	20fa      	movs	r0, #250	@ 0xfa
 8000668:	f009 ff1a 	bl	800a4a0 <HAL_Delay>

	convertArrays(3);
 800066c:	2003      	movs	r0, #3
 800066e:	f000 f88b 	bl	8000788 <convertArrays>
	HAL_Delay(250);
 8000672:	20fa      	movs	r0, #250	@ 0xfa
 8000674:	f009 ff14 	bl	800a4a0 <HAL_Delay>

	loadMenuTexts(dilSecim);
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <eepromKontrol+0x48c>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	4618      	mov	r0, r3
 800067e:	f006 fe75 	bl	800736c <loadMenuTexts>
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	2000107a 	.word	0x2000107a
 800068c:	2000107b 	.word	0x2000107b
 8000690:	2000107c 	.word	0x2000107c
 8000694:	2000107d 	.word	0x2000107d
 8000698:	2000107e 	.word	0x2000107e
 800069c:	2000107f 	.word	0x2000107f
 80006a0:	20001080 	.word	0x20001080
 80006a4:	20001081 	.word	0x20001081
 80006a8:	20001082 	.word	0x20001082
 80006ac:	20001083 	.word	0x20001083
 80006b0:	20001084 	.word	0x20001084
 80006b4:	20001088 	.word	0x20001088
 80006b8:	2000108a 	.word	0x2000108a
 80006bc:	2000108c 	.word	0x2000108c
 80006c0:	2000108d 	.word	0x2000108d
 80006c4:	2000108b 	.word	0x2000108b

080006c8 <firstSetup>:

void firstSetup() {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af04      	add	r7, sp, #16
    if (eepromData[0] == 0xFF) {
 80006ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000744 <firstSetup+0x7c>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2bff      	cmp	r3, #255	@ 0xff
 80006d4:	d132      	bne.n	800073c <firstSetup+0x74>
        memset(eepromData, 0, 48);
 80006d6:	2230      	movs	r2, #48	@ 0x30
 80006d8:	2100      	movs	r1, #0
 80006da:	481a      	ldr	r0, [pc, #104]	@ (8000744 <firstSetup+0x7c>)
 80006dc:	f00d fcea 	bl	800e0b4 <memset>

        memset(&eepromData[38], 0, 10);
 80006e0:	220a      	movs	r2, #10
 80006e2:	2100      	movs	r1, #0
 80006e4:	4818      	ldr	r0, [pc, #96]	@ (8000748 <firstSetup+0x80>)
 80006e6:	f00d fce5 	bl	800e0b4 <memset>

        eepromData[9] = 4;
 80006ea:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <firstSetup+0x7c>)
 80006ec:	2204      	movs	r2, #4
 80006ee:	725a      	strb	r2, [r3, #9]
        eepromData[11] = 4;
 80006f0:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <firstSetup+0x7c>)
 80006f2:	2204      	movs	r2, #4
 80006f4:	72da      	strb	r2, [r3, #11]
        eepromData[13] = 4;
 80006f6:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <firstSetup+0x7c>)
 80006f8:	2204      	movs	r2, #4
 80006fa:	735a      	strb	r2, [r3, #13]

        eepromData[20] = 60;
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <firstSetup+0x7c>)
 80006fe:	223c      	movs	r2, #60	@ 0x3c
 8000700:	751a      	strb	r2, [r3, #20]
        eepromData[21] = 60;
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <firstSetup+0x7c>)
 8000704:	223c      	movs	r2, #60	@ 0x3c
 8000706:	755a      	strb	r2, [r3, #21]
        eepromData[22] = 60;
 8000708:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <firstSetup+0x7c>)
 800070a:	223c      	movs	r2, #60	@ 0x3c
 800070c:	759a      	strb	r2, [r3, #22]
        eepromData[23] = 60;
 800070e:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <firstSetup+0x7c>)
 8000710:	223c      	movs	r2, #60	@ 0x3c
 8000712:	75da      	strb	r2, [r3, #23]
        eepromData[24] = 60;
 8000714:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <firstSetup+0x7c>)
 8000716:	223c      	movs	r2, #60	@ 0x3c
 8000718:	761a      	strb	r2, [r3, #24]

        HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800071a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800071e:	9302      	str	r3, [sp, #8]
 8000720:	236e      	movs	r3, #110	@ 0x6e
 8000722:	9301      	str	r3, [sp, #4]
 8000724:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <firstSetup+0x7c>)
 8000726:	9300      	str	r3, [sp, #0]
 8000728:	236e      	movs	r3, #110	@ 0x6e
 800072a:	2200      	movs	r2, #0
 800072c:	21a0      	movs	r1, #160	@ 0xa0
 800072e:	4807      	ldr	r0, [pc, #28]	@ (800074c <firstSetup+0x84>)
 8000730:	f00a ff40 	bl	800b5b4 <HAL_I2C_Mem_Write>
        HAL_Delay(1000);
 8000734:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000738:	f009 feb2 	bl	800a4a0 <HAL_Delay>
    }
}
 800073c:	bf00      	nop
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000f9c 	.word	0x20000f9c
 8000748:	20000fc2 	.word	0x20000fc2
 800074c:	200017f0 	.word	0x200017f0

08000750 <saveEEPROM>:

    HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, sizeof(eepromData), eepromData, sizeof(eepromData), 3000);
    HAL_Delay(1000);
}

void saveEEPROM() {
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000756:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800075a:	9302      	str	r3, [sp, #8]
 800075c:	236e      	movs	r3, #110	@ 0x6e
 800075e:	9301      	str	r3, [sp, #4]
 8000760:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <saveEEPROM+0x30>)
 8000762:	9300      	str	r3, [sp, #0]
 8000764:	236e      	movs	r3, #110	@ 0x6e
 8000766:	2200      	movs	r2, #0
 8000768:	21a0      	movs	r1, #160	@ 0xa0
 800076a:	4806      	ldr	r0, [pc, #24]	@ (8000784 <saveEEPROM+0x34>)
 800076c:	f00a ff22 	bl	800b5b4 <HAL_I2C_Mem_Write>
	HAL_Delay(1500);
 8000770:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000774:	f009 fe94 	bl	800a4a0 <HAL_Delay>
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000f9c 	.word	0x20000f9c
 8000784:	200017f0 	.word	0x200017f0

08000788 <convertArrays>:

void convertArrays(int state) {
 8000788:	b480      	push	{r7}
 800078a:	b08b      	sub	sp, #44	@ 0x2c
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d11d      	bne.n	80007d2 <convertArrays+0x4a>
		int eepromVal = idStartPos;
 8000796:	4b34      	ldr	r3, [pc, #208]	@ (8000868 <convertArrays+0xe0>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 800079c:	2300      	movs	r3, #0
 800079e:	623b      	str	r3, [r7, #32]
 80007a0:	e013      	b.n	80007ca <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 80007a2:	4a32      	ldr	r2, [pc, #200]	@ (800086c <convertArrays+0xe4>)
 80007a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007a6:	4413      	add	r3, r2
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 80007ac:	4a30      	ldr	r2, [pc, #192]	@ (8000870 <convertArrays+0xe8>)
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	4413      	add	r3, r2
 80007b2:	7819      	ldrb	r1, [r3, #0]
 80007b4:	4a2f      	ldr	r2, [pc, #188]	@ (8000874 <convertArrays+0xec>)
 80007b6:	6a3b      	ldr	r3, [r7, #32]
 80007b8:	4413      	add	r3, r2
 80007ba:	460a      	mov	r2, r1
 80007bc:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 80007be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c0:	3301      	adds	r3, #1
 80007c2:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80007c4:	6a3b      	ldr	r3, [r7, #32]
 80007c6:	3301      	adds	r3, #1
 80007c8:	623b      	str	r3, [r7, #32]
 80007ca:	6a3b      	ldr	r3, [r7, #32]
 80007cc:	2b0b      	cmp	r3, #11
 80007ce:	dde8      	ble.n	80007a2 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 80007d0:	e045      	b.n	800085e <convertArrays+0xd6>
	} else if(state == 2) {
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	d121      	bne.n	800081c <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 80007d8:	4b27      	ldr	r3, [pc, #156]	@ (8000878 <convertArrays+0xf0>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
 80007e2:	e017      	b.n	8000814 <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 80007e4:	4a21      	ldr	r2, [pc, #132]	@ (800086c <convertArrays+0xe4>)
 80007e6:	69fb      	ldr	r3, [r7, #28]
 80007e8:	4413      	add	r3, r2
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d00e      	beq.n	800080e <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007f0:	4a1e      	ldr	r2, [pc, #120]	@ (800086c <convertArrays+0xe4>)
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	4413      	add	r3, r2
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b20      	ldr	r3, [pc, #128]	@ (800087c <convertArrays+0xf4>)
 80007fc:	5c99      	ldrb	r1, [r3, r2]
 80007fe:	4a20      	ldr	r2, [pc, #128]	@ (8000880 <convertArrays+0xf8>)
 8000800:	69bb      	ldr	r3, [r7, #24]
 8000802:	4413      	add	r3, r2
 8000804:	460a      	mov	r2, r1
 8000806:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000808:	69fb      	ldr	r3, [r7, #28]
 800080a:	3301      	adds	r3, #1
 800080c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080e:	69bb      	ldr	r3, [r7, #24]
 8000810:	3301      	adds	r3, #1
 8000812:	61bb      	str	r3, [r7, #24]
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	2b0f      	cmp	r3, #15
 8000818:	dde4      	ble.n	80007e4 <convertArrays+0x5c>
}
 800081a:	e020      	b.n	800085e <convertArrays+0xd6>
		int eepromVal = passStartPos;
 800081c:	4b19      	ldr	r3, [pc, #100]	@ (8000884 <convertArrays+0xfc>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	e017      	b.n	8000858 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 8000828:	4a10      	ldr	r2, [pc, #64]	@ (800086c <convertArrays+0xe4>)
 800082a:	697b      	ldr	r3, [r7, #20]
 800082c:	4413      	add	r3, r2
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d00e      	beq.n	8000852 <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 8000834:	4a0d      	ldr	r2, [pc, #52]	@ (800086c <convertArrays+0xe4>)
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	4413      	add	r3, r2
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	461a      	mov	r2, r3
 800083e:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <convertArrays+0xf4>)
 8000840:	5c99      	ldrb	r1, [r3, r2]
 8000842:	4a11      	ldr	r2, [pc, #68]	@ (8000888 <convertArrays+0x100>)
 8000844:	693b      	ldr	r3, [r7, #16]
 8000846:	4413      	add	r3, r2
 8000848:	460a      	mov	r2, r1
 800084a:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	3301      	adds	r3, #1
 8000850:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	3301      	adds	r3, #1
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
 800085a:	2b0f      	cmp	r3, #15
 800085c:	dde4      	ble.n	8000828 <convertArrays+0xa0>
}
 800085e:	bf00      	nop
 8000860:	372c      	adds	r7, #44	@ 0x2c
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr
 8000868:	20000000 	.word	0x20000000
 800086c:	20000f9c 	.word	0x20000f9c
 8000870:	2000000c 	.word	0x2000000c
 8000874:	20001014 	.word	0x20001014
 8000878:	20000004 	.word	0x20000004
 800087c:	20000018 	.word	0x20000018
 8000880:	20001020 	.word	0x20001020
 8000884:	20000008 	.word	0x20000008
 8000888:	20001030 	.word	0x20001030

0800088c <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b089      	sub	sp, #36	@ 0x24
 8000890:	af04      	add	r7, sp, #16
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000896:	4b25      	ldr	r3, [pc, #148]	@ (800092c <hata2EEPROM+0xa0>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	1e5a      	subs	r2, r3, #1
 800089c:	4b24      	ldr	r3, [pc, #144]	@ (8000930 <hata2EEPROM+0xa4>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4413      	add	r3, r2
 80008a2:	4a24      	ldr	r2, [pc, #144]	@ (8000934 <hata2EEPROM+0xa8>)
 80008a4:	5cd3      	ldrb	r3, [r2, r3]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d002      	beq.n	80008b0 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80008aa:	f000 f8d1 	bl	8000a50 <eepromDataFillWithEmpty>
		goto veriEkleme;
 80008ae:	e000      	b.n	80008b2 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80008b0:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	e012      	b.n	80008de <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80008b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000930 <hata2EEPROM+0xa4>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4413      	add	r3, r2
 80008c0:	4a1c      	ldr	r2, [pc, #112]	@ (8000934 <hata2EEPROM+0xa8>)
 80008c2:	5cd3      	ldrb	r3, [r2, r3]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d107      	bne.n	80008d8 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80008c8:	4b19      	ldr	r3, [pc, #100]	@ (8000930 <hata2EEPROM+0xa4>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	4413      	add	r3, r2
 80008d0:	4918      	ldr	r1, [pc, #96]	@ (8000934 <hata2EEPROM+0xa8>)
 80008d2:	79fa      	ldrb	r2, [r7, #7]
 80008d4:	54ca      	strb	r2, [r1, r3]
					break;
 80008d6:	e007      	b.n	80008e8 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	3301      	adds	r3, #1
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b13      	ldr	r3, [pc, #76]	@ (800092c <hata2EEPROM+0xa0>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	dbe7      	blt.n	80008b8 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 80008e8:	4b11      	ldr	r3, [pc, #68]	@ (8000930 <hata2EEPROM+0xa4>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	b299      	uxth	r1, r3
 80008ee:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <hata2EEPROM+0xa0>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	b298      	uxth	r0, r3
 80008f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <hata2EEPROM+0xa4>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000934 <hata2EEPROM+0xa8>)
 80008fa:	4413      	add	r3, r2
 80008fc:	4a0b      	ldr	r2, [pc, #44]	@ (800092c <hata2EEPROM+0xa0>)
 80008fe:	6812      	ldr	r2, [r2, #0]
 8000900:	b292      	uxth	r2, r2
 8000902:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 8000906:	9402      	str	r4, [sp, #8]
 8000908:	9201      	str	r2, [sp, #4]
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	4603      	mov	r3, r0
 800090e:	460a      	mov	r2, r1
 8000910:	21a0      	movs	r1, #160	@ 0xa0
 8000912:	4809      	ldr	r0, [pc, #36]	@ (8000938 <hata2EEPROM+0xac>)
 8000914:	f00a fe4e 	bl	800b5b4 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000918:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800091c:	f009 fdc0 	bl	800a4a0 <HAL_Delay>
	eepromKontrol();
 8000920:	f7ff fc88 	bl	8000234 <eepromKontrol>
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	bd90      	pop	{r4, r7, pc}
 800092c:	20000094 	.word	0x20000094
 8000930:	20000098 	.word	0x20000098
 8000934:	20000f9c 	.word	0x20000f9c
 8000938:	200017f0 	.word	0x200017f0

0800093c <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000946:	79fb      	ldrb	r3, [r7, #7]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d10f      	bne.n	800096c <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 800094c:	4a38      	ldr	r2, [pc, #224]	@ (8000a30 <hataKoduLcdGoster+0xf4>)
 800094e:	2101      	movs	r1, #1
 8000950:	2001      	movs	r0, #1
 8000952:	f009 f883 	bl	8009a5c <lcd_print>
		lcd_print(2, 1, "1");
 8000956:	4a37      	ldr	r2, [pc, #220]	@ (8000a34 <hataKoduLcdGoster+0xf8>)
 8000958:	2101      	movs	r1, #1
 800095a:	2002      	movs	r0, #2
 800095c:	f009 f87e 	bl	8009a5c <lcd_print>
		lcd_print(2, 7, "          ");
 8000960:	4a35      	ldr	r2, [pc, #212]	@ (8000a38 <hataKoduLcdGoster+0xfc>)
 8000962:	2107      	movs	r1, #7
 8000964:	2002      	movs	r0, #2
 8000966:	f009 f879 	bl	8009a5c <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 800096a:	e05d      	b.n	8000a28 <hataKoduLcdGoster+0xec>
	} else if(x==2){
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b02      	cmp	r3, #2
 8000970:	d10f      	bne.n	8000992 <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 8000972:	4a2f      	ldr	r2, [pc, #188]	@ (8000a30 <hataKoduLcdGoster+0xf4>)
 8000974:	2101      	movs	r1, #1
 8000976:	2001      	movs	r0, #1
 8000978:	f009 f870 	bl	8009a5c <lcd_print>
		lcd_print(2, 2, "2");
 800097c:	4a2f      	ldr	r2, [pc, #188]	@ (8000a3c <hataKoduLcdGoster+0x100>)
 800097e:	2102      	movs	r1, #2
 8000980:	2002      	movs	r0, #2
 8000982:	f009 f86b 	bl	8009a5c <lcd_print>
		lcd_print(2, 7, "          ");
 8000986:	4a2c      	ldr	r2, [pc, #176]	@ (8000a38 <hataKoduLcdGoster+0xfc>)
 8000988:	2107      	movs	r1, #7
 800098a:	2002      	movs	r0, #2
 800098c:	f009 f866 	bl	8009a5c <lcd_print>
}
 8000990:	e04a      	b.n	8000a28 <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b03      	cmp	r3, #3
 8000996:	d10f      	bne.n	80009b8 <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000998:	4a25      	ldr	r2, [pc, #148]	@ (8000a30 <hataKoduLcdGoster+0xf4>)
 800099a:	2101      	movs	r1, #1
 800099c:	2001      	movs	r0, #1
 800099e:	f009 f85d 	bl	8009a5c <lcd_print>
		lcd_print(2, 3, "3");
 80009a2:	4a27      	ldr	r2, [pc, #156]	@ (8000a40 <hataKoduLcdGoster+0x104>)
 80009a4:	2103      	movs	r1, #3
 80009a6:	2002      	movs	r0, #2
 80009a8:	f009 f858 	bl	8009a5c <lcd_print>
		lcd_print(2, 7, "          ");
 80009ac:	4a22      	ldr	r2, [pc, #136]	@ (8000a38 <hataKoduLcdGoster+0xfc>)
 80009ae:	2107      	movs	r1, #7
 80009b0:	2002      	movs	r0, #2
 80009b2:	f009 f853 	bl	8009a5c <lcd_print>
}
 80009b6:	e037      	b.n	8000a28 <hataKoduLcdGoster+0xec>
	} else if(x==4){
 80009b8:	79fb      	ldrb	r3, [r7, #7]
 80009ba:	2b04      	cmp	r3, #4
 80009bc:	d10f      	bne.n	80009de <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 80009be:	4a1c      	ldr	r2, [pc, #112]	@ (8000a30 <hataKoduLcdGoster+0xf4>)
 80009c0:	2101      	movs	r1, #1
 80009c2:	2001      	movs	r0, #1
 80009c4:	f009 f84a 	bl	8009a5c <lcd_print>
		lcd_print(2, 4, "4");
 80009c8:	4a1e      	ldr	r2, [pc, #120]	@ (8000a44 <hataKoduLcdGoster+0x108>)
 80009ca:	2104      	movs	r1, #4
 80009cc:	2002      	movs	r0, #2
 80009ce:	f009 f845 	bl	8009a5c <lcd_print>
		lcd_print(2, 7, "          ");
 80009d2:	4a19      	ldr	r2, [pc, #100]	@ (8000a38 <hataKoduLcdGoster+0xfc>)
 80009d4:	2107      	movs	r1, #7
 80009d6:	2002      	movs	r0, #2
 80009d8:	f009 f840 	bl	8009a5c <lcd_print>
}
 80009dc:	e024      	b.n	8000a28 <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	2b05      	cmp	r3, #5
 80009e2:	d10f      	bne.n	8000a04 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 80009e4:	4a12      	ldr	r2, [pc, #72]	@ (8000a30 <hataKoduLcdGoster+0xf4>)
 80009e6:	2101      	movs	r1, #1
 80009e8:	2001      	movs	r0, #1
 80009ea:	f009 f837 	bl	8009a5c <lcd_print>
		lcd_print(2, 5, "5");
 80009ee:	4a16      	ldr	r2, [pc, #88]	@ (8000a48 <hataKoduLcdGoster+0x10c>)
 80009f0:	2105      	movs	r1, #5
 80009f2:	2002      	movs	r0, #2
 80009f4:	f009 f832 	bl	8009a5c <lcd_print>
		lcd_print(2, 7, "          ");
 80009f8:	4a0f      	ldr	r2, [pc, #60]	@ (8000a38 <hataKoduLcdGoster+0xfc>)
 80009fa:	2107      	movs	r1, #7
 80009fc:	2002      	movs	r0, #2
 80009fe:	f009 f82d 	bl	8009a5c <lcd_print>
}
 8000a02:	e011      	b.n	8000a28 <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	2b06      	cmp	r3, #6
 8000a08:	d10e      	bne.n	8000a28 <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 8000a0a:	4a09      	ldr	r2, [pc, #36]	@ (8000a30 <hataKoduLcdGoster+0xf4>)
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f009 f824 	bl	8009a5c <lcd_print>
		lcd_print(2, 6, "6");
 8000a14:	4a0d      	ldr	r2, [pc, #52]	@ (8000a4c <hataKoduLcdGoster+0x110>)
 8000a16:	2106      	movs	r1, #6
 8000a18:	2002      	movs	r0, #2
 8000a1a:	f009 f81f 	bl	8009a5c <lcd_print>
		lcd_print(2, 7, "          ");
 8000a1e:	4a06      	ldr	r2, [pc, #24]	@ (8000a38 <hataKoduLcdGoster+0xfc>)
 8000a20:	2107      	movs	r1, #7
 8000a22:	2002      	movs	r0, #2
 8000a24:	f009 f81a 	bl	8009a5c <lcd_print>
}
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20001764 	.word	0x20001764
 8000a34:	0800e124 	.word	0x0800e124
 8000a38:	0800e128 	.word	0x0800e128
 8000a3c:	0800e134 	.word	0x0800e134
 8000a40:	0800e138 	.word	0x0800e138
 8000a44:	0800e13c 	.word	0x0800e13c
 8000a48:	0800e140 	.word	0x0800e140
 8000a4c:	0800e144 	.word	0x0800e144

08000a50 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	e009      	b.n	8000a70 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a88 <eepromDataFillWithEmpty+0x38>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a64:	4a09      	ldr	r2, [pc, #36]	@ (8000a8c <eepromDataFillWithEmpty+0x3c>)
 8000a66:	2100      	movs	r1, #0
 8000a68:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	4b07      	ldr	r3, [pc, #28]	@ (8000a90 <eepromDataFillWithEmpty+0x40>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	dbf0      	blt.n	8000a5c <eepromDataFillWithEmpty+0xc>
	}
}
 8000a7a:	bf00      	nop
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	2000006c 	.word	0x2000006c
 8000a8c:	20000f9c 	.word	0x20000f9c
 8000a90:	20000094 	.word	0x20000094

08000a94 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b084      	sub	sp, #16
 8000a98:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000aa6:	4b50      	ldr	r3, [pc, #320]	@ (8000be8 <i2cTest+0x154>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b4e      	ldr	r3, [pc, #312]	@ (8000be8 <i2cTest+0x154>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f022 0201 	bic.w	r2, r2, #1
 8000ab4:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000ab6:	484c      	ldr	r0, [pc, #304]	@ (8000be8 <i2cTest+0x154>)
 8000ab8:	f00a fc4e 	bl	800b358 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000abc:	23c0      	movs	r3, #192	@ 0xc0
 8000abe:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000ac0:	2311      	movs	r3, #17
 8000ac2:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000acc:	463b      	mov	r3, r7
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4846      	ldr	r0, [pc, #280]	@ (8000bec <i2cTest+0x158>)
 8000ad2:	f00a f855 	bl	800ab80 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2140      	movs	r1, #64	@ 0x40
 8000ada:	4844      	ldr	r0, [pc, #272]	@ (8000bec <i2cTest+0x158>)
 8000adc:	f00a fac7 	bl	800b06e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	2180      	movs	r1, #128	@ 0x80
 8000ae4:	4841      	ldr	r0, [pc, #260]	@ (8000bec <i2cTest+0x158>)
 8000ae6:	f00a fac2 	bl	800b06e <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000aea:	200a      	movs	r0, #10
 8000aec:	f009 fcd8 	bl	800a4a0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000af0:	bf00      	nop
 8000af2:	2140      	movs	r1, #64	@ 0x40
 8000af4:	483d      	ldr	r0, [pc, #244]	@ (8000bec <i2cTest+0x158>)
 8000af6:	f00a faa3 	bl	800b040 <HAL_GPIO_ReadPin>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d006      	beq.n	8000b0e <i2cTest+0x7a>
 8000b00:	2180      	movs	r1, #128	@ 0x80
 8000b02:	483a      	ldr	r0, [pc, #232]	@ (8000bec <i2cTest+0x158>)
 8000b04:	f00a fa9c 	bl	800b040 <HAL_GPIO_ReadPin>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d1f1      	bne.n	8000af2 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2180      	movs	r1, #128	@ 0x80
 8000b12:	4836      	ldr	r0, [pc, #216]	@ (8000bec <i2cTest+0x158>)
 8000b14:	f00a faab 	bl	800b06e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000b18:	200a      	movs	r0, #10
 8000b1a:	f009 fcc1 	bl	800a4a0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000b1e:	bf00      	nop
 8000b20:	2180      	movs	r1, #128	@ 0x80
 8000b22:	4832      	ldr	r0, [pc, #200]	@ (8000bec <i2cTest+0x158>)
 8000b24:	f00a fa8c 	bl	800b040 <HAL_GPIO_ReadPin>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d0f8      	beq.n	8000b20 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2140      	movs	r1, #64	@ 0x40
 8000b32:	482e      	ldr	r0, [pc, #184]	@ (8000bec <i2cTest+0x158>)
 8000b34:	f00a fa9b 	bl	800b06e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000b38:	200a      	movs	r0, #10
 8000b3a:	f009 fcb1 	bl	800a4a0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000b3e:	bf00      	nop
 8000b40:	2140      	movs	r1, #64	@ 0x40
 8000b42:	482a      	ldr	r0, [pc, #168]	@ (8000bec <i2cTest+0x158>)
 8000b44:	f00a fa7c 	bl	800b040 <HAL_GPIO_ReadPin>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d0f8      	beq.n	8000b40 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2140      	movs	r1, #64	@ 0x40
 8000b52:	4826      	ldr	r0, [pc, #152]	@ (8000bec <i2cTest+0x158>)
 8000b54:	f00a fa8b 	bl	800b06e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000b58:	200a      	movs	r0, #10
 8000b5a:	f009 fca1 	bl	800a4a0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000b5e:	bf00      	nop
 8000b60:	2140      	movs	r1, #64	@ 0x40
 8000b62:	4822      	ldr	r0, [pc, #136]	@ (8000bec <i2cTest+0x158>)
 8000b64:	f00a fa6c 	bl	800b040 <HAL_GPIO_ReadPin>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d1f8      	bne.n	8000b60 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	2180      	movs	r1, #128	@ 0x80
 8000b72:	481e      	ldr	r0, [pc, #120]	@ (8000bec <i2cTest+0x158>)
 8000b74:	f00a fa7b 	bl	800b06e <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000b78:	200a      	movs	r0, #10
 8000b7a:	f009 fc91 	bl	800a4a0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000b7e:	bf00      	nop
 8000b80:	2180      	movs	r1, #128	@ 0x80
 8000b82:	481a      	ldr	r0, [pc, #104]	@ (8000bec <i2cTest+0x158>)
 8000b84:	f00a fa5c 	bl	800b040 <HAL_GPIO_ReadPin>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d1f8      	bne.n	8000b80 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b8e:	23c0      	movs	r3, #192	@ 0xc0
 8000b90:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000b92:	2312      	movs	r3, #18
 8000b94:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4812      	ldr	r0, [pc, #72]	@ (8000bec <i2cTest+0x158>)
 8000ba4:	f009 ffec 	bl	800ab80 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8000be8 <i2cTest+0x154>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <i2cTest+0x154>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000bb6:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <i2cTest+0x154>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000be8 <i2cTest+0x154>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000bc6:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	@ (8000be8 <i2cTest+0x154>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	4b06      	ldr	r3, [pc, #24]	@ (8000be8 <i2cTest+0x154>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f042 0201 	orr.w	r2, r2, #1
 8000bd6:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000bd8:	4803      	ldr	r0, [pc, #12]	@ (8000be8 <i2cTest+0x154>)
 8000bda:	f00a fa79 	bl	800b0d0 <HAL_I2C_Init>
}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	200017f0 	.word	0x200017f0
 8000bec:	40010c00 	.word	0x40010c00

08000bf0 <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000bfa:	20c8      	movs	r0, #200	@ 0xc8
 8000bfc:	f009 fc50 	bl	800a4a0 <HAL_Delay>
	lcd_clear();
 8000c00:	f008 ff58 	bl	8009ab4 <lcd_clear>
	if(type == 1 && page == 0) {
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d13e      	bne.n	8000c88 <printTemplate+0x98>
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d13b      	bne.n	8000c88 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8000c10:	4a9a      	ldr	r2, [pc, #616]	@ (8000e7c <printTemplate+0x28c>)
 8000c12:	2101      	movs	r1, #1
 8000c14:	2001      	movs	r0, #1
 8000c16:	f008 ff21 	bl	8009a5c <lcd_print>
		lcd_print(2, 3, "0");
 8000c1a:	4a99      	ldr	r2, [pc, #612]	@ (8000e80 <printTemplate+0x290>)
 8000c1c:	2103      	movs	r1, #3
 8000c1e:	2002      	movs	r0, #2
 8000c20:	f008 ff1c 	bl	8009a5c <lcd_print>
		lcd_print(2, 4, "1");
 8000c24:	4a97      	ldr	r2, [pc, #604]	@ (8000e84 <printTemplate+0x294>)
 8000c26:	2104      	movs	r1, #4
 8000c28:	2002      	movs	r0, #2
 8000c2a:	f008 ff17 	bl	8009a5c <lcd_print>
		lcd_print(2, 5, "2");
 8000c2e:	4a96      	ldr	r2, [pc, #600]	@ (8000e88 <printTemplate+0x298>)
 8000c30:	2105      	movs	r1, #5
 8000c32:	2002      	movs	r0, #2
 8000c34:	f008 ff12 	bl	8009a5c <lcd_print>
		lcd_print(2, 6, "3");
 8000c38:	4a94      	ldr	r2, [pc, #592]	@ (8000e8c <printTemplate+0x29c>)
 8000c3a:	2106      	movs	r1, #6
 8000c3c:	2002      	movs	r0, #2
 8000c3e:	f008 ff0d 	bl	8009a5c <lcd_print>
		lcd_print(2, 7, "4");
 8000c42:	4a93      	ldr	r2, [pc, #588]	@ (8000e90 <printTemplate+0x2a0>)
 8000c44:	2107      	movs	r1, #7
 8000c46:	2002      	movs	r0, #2
 8000c48:	f008 ff08 	bl	8009a5c <lcd_print>
		lcd_print(2, 10, "5");
 8000c4c:	4a91      	ldr	r2, [pc, #580]	@ (8000e94 <printTemplate+0x2a4>)
 8000c4e:	210a      	movs	r1, #10
 8000c50:	2002      	movs	r0, #2
 8000c52:	f008 ff03 	bl	8009a5c <lcd_print>
		lcd_print(2, 11, "6");
 8000c56:	4a90      	ldr	r2, [pc, #576]	@ (8000e98 <printTemplate+0x2a8>)
 8000c58:	210b      	movs	r1, #11
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	f008 fefe 	bl	8009a5c <lcd_print>
		lcd_print(2, 12, "7");
 8000c60:	4a8e      	ldr	r2, [pc, #568]	@ (8000e9c <printTemplate+0x2ac>)
 8000c62:	210c      	movs	r1, #12
 8000c64:	2002      	movs	r0, #2
 8000c66:	f008 fef9 	bl	8009a5c <lcd_print>
		lcd_print(2, 13, "8");
 8000c6a:	4a8d      	ldr	r2, [pc, #564]	@ (8000ea0 <printTemplate+0x2b0>)
 8000c6c:	210d      	movs	r1, #13
 8000c6e:	2002      	movs	r0, #2
 8000c70:	f008 fef4 	bl	8009a5c <lcd_print>
		lcd_print(2, 14, "9");
 8000c74:	4a8b      	ldr	r2, [pc, #556]	@ (8000ea4 <printTemplate+0x2b4>)
 8000c76:	210e      	movs	r1, #14
 8000c78:	2002      	movs	r0, #2
 8000c7a:	f008 feef 	bl	8009a5c <lcd_print>
		lcd_gotoxy(2, 3);
 8000c7e:	2103      	movs	r1, #3
 8000c80:	2002      	movs	r0, #2
 8000c82:	f008 fecc 	bl	8009a1e <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 8000c86:	e0f5      	b.n	8000e74 <printTemplate+0x284>
	} else if(type == 2) {
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b02      	cmp	r3, #2
 8000c8c:	d178      	bne.n	8000d80 <printTemplate+0x190>
		if(page == 1) {
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d114      	bne.n	8000cbe <printTemplate+0xce>
			lcd_clear();
 8000c94:	f008 ff0e 	bl	8009ab4 <lcd_clear>
			HAL_Delay(100);
 8000c98:	2064      	movs	r0, #100	@ 0x64
 8000c9a:	f009 fc01 	bl	800a4a0 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000c9e:	4a82      	ldr	r2, [pc, #520]	@ (8000ea8 <printTemplate+0x2b8>)
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	2001      	movs	r0, #1
 8000ca4:	f008 feda 	bl	8009a5c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000ca8:	4a80      	ldr	r2, [pc, #512]	@ (8000eac <printTemplate+0x2bc>)
 8000caa:	2107      	movs	r1, #7
 8000cac:	2001      	movs	r0, #1
 8000cae:	f008 fed5 	bl	8009a5c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000cb2:	4a7f      	ldr	r2, [pc, #508]	@ (8000eb0 <printTemplate+0x2c0>)
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f008 fed0 	bl	8009a5c <lcd_print>
}
 8000cbc:	e0da      	b.n	8000e74 <printTemplate+0x284>
		} else if(page == 2) {
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	2b02      	cmp	r3, #2
 8000cc2:	d114      	bne.n	8000cee <printTemplate+0xfe>
			lcd_clear();
 8000cc4:	f008 fef6 	bl	8009ab4 <lcd_clear>
			HAL_Delay(100);
 8000cc8:	2064      	movs	r0, #100	@ 0x64
 8000cca:	f009 fbe9 	bl	800a4a0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000cce:	4a79      	ldr	r2, [pc, #484]	@ (8000eb4 <printTemplate+0x2c4>)
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	f008 fec2 	bl	8009a5c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000cd8:	4a74      	ldr	r2, [pc, #464]	@ (8000eac <printTemplate+0x2bc>)
 8000cda:	2107      	movs	r1, #7
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f008 febd 	bl	8009a5c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000ce2:	4a75      	ldr	r2, [pc, #468]	@ (8000eb8 <printTemplate+0x2c8>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	2002      	movs	r0, #2
 8000ce8:	f008 feb8 	bl	8009a5c <lcd_print>
}
 8000cec:	e0c2      	b.n	8000e74 <printTemplate+0x284>
		} else if(page == 3) {
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	2b03      	cmp	r3, #3
 8000cf2:	d114      	bne.n	8000d1e <printTemplate+0x12e>
			lcd_clear();
 8000cf4:	f008 fede 	bl	8009ab4 <lcd_clear>
			HAL_Delay(100);
 8000cf8:	2064      	movs	r0, #100	@ 0x64
 8000cfa:	f009 fbd1 	bl	800a4a0 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000cfe:	4a6a      	ldr	r2, [pc, #424]	@ (8000ea8 <printTemplate+0x2b8>)
 8000d00:	2101      	movs	r1, #1
 8000d02:	2001      	movs	r0, #1
 8000d04:	f008 feaa 	bl	8009a5c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000d08:	4a68      	ldr	r2, [pc, #416]	@ (8000eac <printTemplate+0x2bc>)
 8000d0a:	2107      	movs	r1, #7
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f008 fea5 	bl	8009a5c <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000d12:	4a6a      	ldr	r2, [pc, #424]	@ (8000ebc <printTemplate+0x2cc>)
 8000d14:	2101      	movs	r1, #1
 8000d16:	2002      	movs	r0, #2
 8000d18:	f008 fea0 	bl	8009a5c <lcd_print>
}
 8000d1c:	e0aa      	b.n	8000e74 <printTemplate+0x284>
		} else if(page == 4) {
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	2b04      	cmp	r3, #4
 8000d22:	d114      	bne.n	8000d4e <printTemplate+0x15e>
			lcd_clear();
 8000d24:	f008 fec6 	bl	8009ab4 <lcd_clear>
			HAL_Delay(100);
 8000d28:	2064      	movs	r0, #100	@ 0x64
 8000d2a:	f009 fbb9 	bl	800a4a0 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000d2e:	4a5e      	ldr	r2, [pc, #376]	@ (8000ea8 <printTemplate+0x2b8>)
 8000d30:	2101      	movs	r1, #1
 8000d32:	2001      	movs	r0, #1
 8000d34:	f008 fe92 	bl	8009a5c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000d38:	4a5c      	ldr	r2, [pc, #368]	@ (8000eac <printTemplate+0x2bc>)
 8000d3a:	2107      	movs	r1, #7
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	f008 fe8d 	bl	8009a5c <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000d42:	4a5f      	ldr	r2, [pc, #380]	@ (8000ec0 <printTemplate+0x2d0>)
 8000d44:	2101      	movs	r1, #1
 8000d46:	2002      	movs	r0, #2
 8000d48:	f008 fe88 	bl	8009a5c <lcd_print>
}
 8000d4c:	e092      	b.n	8000e74 <printTemplate+0x284>
		} else if(page == 5) {
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	2b05      	cmp	r3, #5
 8000d52:	f040 808f 	bne.w	8000e74 <printTemplate+0x284>
			lcd_clear();
 8000d56:	f008 fead 	bl	8009ab4 <lcd_clear>
			HAL_Delay(100);
 8000d5a:	2064      	movs	r0, #100	@ 0x64
 8000d5c:	f009 fba0 	bl	800a4a0 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000d60:	4a51      	ldr	r2, [pc, #324]	@ (8000ea8 <printTemplate+0x2b8>)
 8000d62:	2101      	movs	r1, #1
 8000d64:	2001      	movs	r0, #1
 8000d66:	f008 fe79 	bl	8009a5c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000d6a:	4a50      	ldr	r2, [pc, #320]	@ (8000eac <printTemplate+0x2bc>)
 8000d6c:	2107      	movs	r1, #7
 8000d6e:	2001      	movs	r0, #1
 8000d70:	f008 fe74 	bl	8009a5c <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000d74:	4a53      	ldr	r2, [pc, #332]	@ (8000ec4 <printTemplate+0x2d4>)
 8000d76:	2101      	movs	r1, #1
 8000d78:	2002      	movs	r0, #2
 8000d7a:	f008 fe6f 	bl	8009a5c <lcd_print>
}
 8000d7e:	e079      	b.n	8000e74 <printTemplate+0x284>
	} else if(type == 3) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d176      	bne.n	8000e74 <printTemplate+0x284>
		if(page == 1) {
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d114      	bne.n	8000db6 <printTemplate+0x1c6>
			lcd_clear();
 8000d8c:	f008 fe92 	bl	8009ab4 <lcd_clear>
			HAL_Delay(100);
 8000d90:	2064      	movs	r0, #100	@ 0x64
 8000d92:	f009 fb85 	bl	800a4a0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000d96:	4a4c      	ldr	r2, [pc, #304]	@ (8000ec8 <printTemplate+0x2d8>)
 8000d98:	2101      	movs	r1, #1
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f008 fe5e 	bl	8009a5c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000da0:	4a4a      	ldr	r2, [pc, #296]	@ (8000ecc <printTemplate+0x2dc>)
 8000da2:	2107      	movs	r1, #7
 8000da4:	2001      	movs	r0, #1
 8000da6:	f008 fe59 	bl	8009a5c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000daa:	4a41      	ldr	r2, [pc, #260]	@ (8000eb0 <printTemplate+0x2c0>)
 8000dac:	2101      	movs	r1, #1
 8000dae:	2002      	movs	r0, #2
 8000db0:	f008 fe54 	bl	8009a5c <lcd_print>
}
 8000db4:	e05e      	b.n	8000e74 <printTemplate+0x284>
		} else if(page == 2) {
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d114      	bne.n	8000de6 <printTemplate+0x1f6>
			lcd_clear();
 8000dbc:	f008 fe7a 	bl	8009ab4 <lcd_clear>
			HAL_Delay(100);
 8000dc0:	2064      	movs	r0, #100	@ 0x64
 8000dc2:	f009 fb6d 	bl	800a4a0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000dc6:	4a40      	ldr	r2, [pc, #256]	@ (8000ec8 <printTemplate+0x2d8>)
 8000dc8:	2101      	movs	r1, #1
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f008 fe46 	bl	8009a5c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000dd0:	4a3e      	ldr	r2, [pc, #248]	@ (8000ecc <printTemplate+0x2dc>)
 8000dd2:	2107      	movs	r1, #7
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	f008 fe41 	bl	8009a5c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000dda:	4a37      	ldr	r2, [pc, #220]	@ (8000eb8 <printTemplate+0x2c8>)
 8000ddc:	2101      	movs	r1, #1
 8000dde:	2002      	movs	r0, #2
 8000de0:	f008 fe3c 	bl	8009a5c <lcd_print>
}
 8000de4:	e046      	b.n	8000e74 <printTemplate+0x284>
		} else if(page == 3) {
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d114      	bne.n	8000e16 <printTemplate+0x226>
			lcd_clear();
 8000dec:	f008 fe62 	bl	8009ab4 <lcd_clear>
			HAL_Delay(100);
 8000df0:	2064      	movs	r0, #100	@ 0x64
 8000df2:	f009 fb55 	bl	800a4a0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000df6:	4a34      	ldr	r2, [pc, #208]	@ (8000ec8 <printTemplate+0x2d8>)
 8000df8:	2101      	movs	r1, #1
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	f008 fe2e 	bl	8009a5c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000e00:	4a32      	ldr	r2, [pc, #200]	@ (8000ecc <printTemplate+0x2dc>)
 8000e02:	2107      	movs	r1, #7
 8000e04:	2001      	movs	r0, #1
 8000e06:	f008 fe29 	bl	8009a5c <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000e0a:	4a2c      	ldr	r2, [pc, #176]	@ (8000ebc <printTemplate+0x2cc>)
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f008 fe24 	bl	8009a5c <lcd_print>
}
 8000e14:	e02e      	b.n	8000e74 <printTemplate+0x284>
		} else if(page == 4) {
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	2b04      	cmp	r3, #4
 8000e1a:	d114      	bne.n	8000e46 <printTemplate+0x256>
			lcd_clear();
 8000e1c:	f008 fe4a 	bl	8009ab4 <lcd_clear>
			HAL_Delay(100);
 8000e20:	2064      	movs	r0, #100	@ 0x64
 8000e22:	f009 fb3d 	bl	800a4a0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000e26:	4a28      	ldr	r2, [pc, #160]	@ (8000ec8 <printTemplate+0x2d8>)
 8000e28:	2101      	movs	r1, #1
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f008 fe16 	bl	8009a5c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000e30:	4a26      	ldr	r2, [pc, #152]	@ (8000ecc <printTemplate+0x2dc>)
 8000e32:	2107      	movs	r1, #7
 8000e34:	2001      	movs	r0, #1
 8000e36:	f008 fe11 	bl	8009a5c <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000e3a:	4a21      	ldr	r2, [pc, #132]	@ (8000ec0 <printTemplate+0x2d0>)
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	2002      	movs	r0, #2
 8000e40:	f008 fe0c 	bl	8009a5c <lcd_print>
}
 8000e44:	e016      	b.n	8000e74 <printTemplate+0x284>
		} else if(page == 5) {
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	2b05      	cmp	r3, #5
 8000e4a:	d113      	bne.n	8000e74 <printTemplate+0x284>
			lcd_clear();
 8000e4c:	f008 fe32 	bl	8009ab4 <lcd_clear>
			HAL_Delay(100);
 8000e50:	2064      	movs	r0, #100	@ 0x64
 8000e52:	f009 fb25 	bl	800a4a0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000e56:	4a1c      	ldr	r2, [pc, #112]	@ (8000ec8 <printTemplate+0x2d8>)
 8000e58:	2101      	movs	r1, #1
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f008 fdfe 	bl	8009a5c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000e60:	4a1a      	ldr	r2, [pc, #104]	@ (8000ecc <printTemplate+0x2dc>)
 8000e62:	2107      	movs	r1, #7
 8000e64:	2001      	movs	r0, #1
 8000e66:	f008 fdf9 	bl	8009a5c <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000e6a:	4a16      	ldr	r2, [pc, #88]	@ (8000ec4 <printTemplate+0x2d4>)
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	2002      	movs	r0, #2
 8000e70:	f008 fdf4 	bl	8009a5c <lcd_print>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	0800e148 	.word	0x0800e148
 8000e80:	0800e150 	.word	0x0800e150
 8000e84:	0800e154 	.word	0x0800e154
 8000e88:	0800e158 	.word	0x0800e158
 8000e8c:	0800e15c 	.word	0x0800e15c
 8000e90:	0800e160 	.word	0x0800e160
 8000e94:	0800e164 	.word	0x0800e164
 8000e98:	0800e168 	.word	0x0800e168
 8000e9c:	0800e16c 	.word	0x0800e16c
 8000ea0:	0800e170 	.word	0x0800e170
 8000ea4:	0800e174 	.word	0x0800e174
 8000ea8:	0800e178 	.word	0x0800e178
 8000eac:	20001020 	.word	0x20001020
 8000eb0:	0800e18c 	.word	0x0800e18c
 8000eb4:	0800e1a0 	.word	0x0800e1a0
 8000eb8:	0800e1a8 	.word	0x0800e1a8
 8000ebc:	0800e1bc 	.word	0x0800e1bc
 8000ec0:	0800e1d0 	.word	0x0800e1d0
 8000ec4:	0800e1e4 	.word	0x0800e1e4
 8000ec8:	0800e1f8 	.word	0x0800e1f8
 8000ecc:	20001030 	.word	0x20001030

08000ed0 <printCredentials>:
			}
		}
	}
}

void printCredentials(int type) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d10a      	bne.n	8000ef4 <printCredentials+0x24>
		//machine id yazdır
		lcd_print(2, 1, machineID);
 8000ede:	4a18      	ldr	r2, [pc, #96]	@ (8000f40 <printCredentials+0x70>)
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f008 fdba 	bl	8009a5c <lcd_print>
		lcd_print(2, 13, "    ");
 8000ee8:	4a16      	ldr	r2, [pc, #88]	@ (8000f44 <printCredentials+0x74>)
 8000eea:	210d      	movs	r1, #13
 8000eec:	2002      	movs	r0, #2
 8000eee:	f008 fdb5 	bl	8009a5c <lcd_print>
		lcd_print(1, 1, "WIFI PASS       ");

		lcd_print(2, 1, "                ");
		lcd_print(2, 1, wifiPass);
	}
}
 8000ef2:	e021      	b.n	8000f38 <printCredentials+0x68>
	} else if(type == 2) {
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d10f      	bne.n	8000f1a <printCredentials+0x4a>
		lcd_print(1, 1, "WIFI SSID       ");
 8000efa:	4a13      	ldr	r2, [pc, #76]	@ (8000f48 <printCredentials+0x78>)
 8000efc:	2101      	movs	r1, #1
 8000efe:	2001      	movs	r0, #1
 8000f00:	f008 fdac 	bl	8009a5c <lcd_print>
		lcd_print(2, 1, "                ");
 8000f04:	4a11      	ldr	r2, [pc, #68]	@ (8000f4c <printCredentials+0x7c>)
 8000f06:	2101      	movs	r1, #1
 8000f08:	2002      	movs	r0, #2
 8000f0a:	f008 fda7 	bl	8009a5c <lcd_print>
		lcd_print(2, 1, wifiSSID);
 8000f0e:	4a10      	ldr	r2, [pc, #64]	@ (8000f50 <printCredentials+0x80>)
 8000f10:	2101      	movs	r1, #1
 8000f12:	2002      	movs	r0, #2
 8000f14:	f008 fda2 	bl	8009a5c <lcd_print>
}
 8000f18:	e00e      	b.n	8000f38 <printCredentials+0x68>
		lcd_print(1, 1, "WIFI PASS       ");
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f54 <printCredentials+0x84>)
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f008 fd9c 	bl	8009a5c <lcd_print>
		lcd_print(2, 1, "                ");
 8000f24:	4a09      	ldr	r2, [pc, #36]	@ (8000f4c <printCredentials+0x7c>)
 8000f26:	2101      	movs	r1, #1
 8000f28:	2002      	movs	r0, #2
 8000f2a:	f008 fd97 	bl	8009a5c <lcd_print>
		lcd_print(2, 1, wifiPass);
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <printCredentials+0x88>)
 8000f30:	2101      	movs	r1, #1
 8000f32:	2002      	movs	r0, #2
 8000f34:	f008 fd92 	bl	8009a5c <lcd_print>
}
 8000f38:	bf00      	nop
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20001014 	.word	0x20001014
 8000f44:	0800e20c 	.word	0x0800e20c
 8000f48:	0800e214 	.word	0x0800e214
 8000f4c:	0800e228 	.word	0x0800e228
 8000f50:	20001020 	.word	0x20001020
 8000f54:	0800e23c 	.word	0x0800e23c
 8000f58:	20001030 	.word	0x20001030

08000f5c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000f60:	f3bf 8f4f 	dsb	sy
}
 8000f64:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <__NVIC_SystemReset+0x24>)
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000f6e:	4904      	ldr	r1, [pc, #16]	@ (8000f80 <__NVIC_SystemReset+0x24>)
 8000f70:	4b04      	ldr	r3, [pc, #16]	@ (8000f84 <__NVIC_SystemReset+0x28>)
 8000f72:	4313      	orrs	r3, r2
 8000f74:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f76:	f3bf 8f4f 	dsb	sy
}
 8000f7a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000f7c:	bf00      	nop
 8000f7e:	e7fd      	b.n	8000f7c <__NVIC_SystemReset+0x20>
 8000f80:	e000ed00 	.word	0xe000ed00
 8000f84:	05fa0004 	.word	0x05fa0004

08000f88 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8000f8e:	2101      	movs	r1, #1
 8000f90:	488e      	ldr	r0, [pc, #568]	@ (80011cc <menu+0x244>)
 8000f92:	f00a f855 	bl	800b040 <HAL_GPIO_ReadPin>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	f040 8099 	bne.w	80010d0 <menu+0x148>
 8000f9e:	4b8c      	ldr	r3, [pc, #560]	@ (80011d0 <menu+0x248>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	f083 0301 	eor.w	r3, r3, #1
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	f000 8091 	beq.w	80010d0 <menu+0x148>
		menuSayac = menuSayac+1;
 8000fae:	4b89      	ldr	r3, [pc, #548]	@ (80011d4 <menu+0x24c>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4b87      	ldr	r3, [pc, #540]	@ (80011d4 <menu+0x24c>)
 8000fb8:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8000fba:	4b86      	ldr	r3, [pc, #536]	@ (80011d4 <menu+0x24c>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b24      	cmp	r3, #36	@ 0x24
 8000fc0:	d102      	bne.n	8000fc8 <menu+0x40>
			menuSayac = 1;
 8000fc2:	4b84      	ldr	r3, [pc, #528]	@ (80011d4 <menu+0x24c>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8000fc8:	4b82      	ldr	r3, [pc, #520]	@ (80011d4 <menu+0x24c>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	2b12      	cmp	r3, #18
 8000fce:	d106      	bne.n	8000fde <menu+0x56>
 8000fd0:	4b81      	ldr	r3, [pc, #516]	@ (80011d8 <menu+0x250>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d102      	bne.n	8000fde <menu+0x56>
			menuSayac = 21;
 8000fd8:	4b7e      	ldr	r3, [pc, #504]	@ (80011d4 <menu+0x24c>)
 8000fda:	2215      	movs	r2, #21
 8000fdc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8000fde:	4b7d      	ldr	r3, [pc, #500]	@ (80011d4 <menu+0x24c>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b08      	cmp	r3, #8
 8000fe4:	d106      	bne.n	8000ff4 <menu+0x6c>
 8000fe6:	4b7d      	ldr	r3, [pc, #500]	@ (80011dc <menu+0x254>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d102      	bne.n	8000ff4 <menu+0x6c>
			menuSayac = 16;
 8000fee:	4b79      	ldr	r3, [pc, #484]	@ (80011d4 <menu+0x24c>)
 8000ff0:	2210      	movs	r2, #16
 8000ff2:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8000ff4:	4b77      	ldr	r3, [pc, #476]	@ (80011d4 <menu+0x24c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b0d      	cmp	r3, #13
 8000ffa:	d106      	bne.n	800100a <menu+0x82>
 8000ffc:	4b77      	ldr	r3, [pc, #476]	@ (80011dc <menu+0x254>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d102      	bne.n	800100a <menu+0x82>
			menuSayac = 16;
 8001004:	4b73      	ldr	r3, [pc, #460]	@ (80011d4 <menu+0x24c>)
 8001006:	2210      	movs	r2, #16
 8001008:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800100a:	4b72      	ldr	r3, [pc, #456]	@ (80011d4 <menu+0x24c>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b09      	cmp	r3, #9
 8001010:	d106      	bne.n	8001020 <menu+0x98>
 8001012:	4b72      	ldr	r3, [pc, #456]	@ (80011dc <menu+0x254>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b02      	cmp	r3, #2
 8001018:	d102      	bne.n	8001020 <menu+0x98>
			menuSayac = 13;
 800101a:	4b6e      	ldr	r3, [pc, #440]	@ (80011d4 <menu+0x24c>)
 800101c:	220d      	movs	r2, #13
 800101e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001020:	4b6c      	ldr	r3, [pc, #432]	@ (80011d4 <menu+0x24c>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b0a      	cmp	r3, #10
 8001026:	d10a      	bne.n	800103e <menu+0xb6>
 8001028:	4b6d      	ldr	r3, [pc, #436]	@ (80011e0 <menu+0x258>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d003      	beq.n	8001038 <menu+0xb0>
 8001030:	4b6b      	ldr	r3, [pc, #428]	@ (80011e0 <menu+0x258>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b02      	cmp	r3, #2
 8001036:	d102      	bne.n	800103e <menu+0xb6>
			menuSayac = 11;
 8001038:	4b66      	ldr	r3, [pc, #408]	@ (80011d4 <menu+0x24c>)
 800103a:	220b      	movs	r2, #11
 800103c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800103e:	4b65      	ldr	r3, [pc, #404]	@ (80011d4 <menu+0x24c>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b0c      	cmp	r3, #12
 8001044:	d10e      	bne.n	8001064 <menu+0xdc>
 8001046:	4b67      	ldr	r3, [pc, #412]	@ (80011e4 <menu+0x25c>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b01      	cmp	r3, #1
 800104c:	d003      	beq.n	8001056 <menu+0xce>
 800104e:	4b65      	ldr	r3, [pc, #404]	@ (80011e4 <menu+0x25c>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d106      	bne.n	8001064 <menu+0xdc>
 8001056:	4b61      	ldr	r3, [pc, #388]	@ (80011dc <menu+0x254>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d102      	bne.n	8001064 <menu+0xdc>
			menuSayac = 16;
 800105e:	4b5d      	ldr	r3, [pc, #372]	@ (80011d4 <menu+0x24c>)
 8001060:	2210      	movs	r2, #16
 8001062:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001064:	4b5b      	ldr	r3, [pc, #364]	@ (80011d4 <menu+0x24c>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b0c      	cmp	r3, #12
 800106a:	d10e      	bne.n	800108a <menu+0x102>
 800106c:	4b5d      	ldr	r3, [pc, #372]	@ (80011e4 <menu+0x25c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d003      	beq.n	800107c <menu+0xf4>
 8001074:	4b5b      	ldr	r3, [pc, #364]	@ (80011e4 <menu+0x25c>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b02      	cmp	r3, #2
 800107a:	d106      	bne.n	800108a <menu+0x102>
 800107c:	4b57      	ldr	r3, [pc, #348]	@ (80011dc <menu+0x254>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b03      	cmp	r3, #3
 8001082:	d102      	bne.n	800108a <menu+0x102>
			menuSayac = 13;
 8001084:	4b53      	ldr	r3, [pc, #332]	@ (80011d4 <menu+0x24c>)
 8001086:	220d      	movs	r2, #13
 8001088:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800108a:	4b52      	ldr	r3, [pc, #328]	@ (80011d4 <menu+0x24c>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b0f      	cmp	r3, #15
 8001090:	d106      	bne.n	80010a0 <menu+0x118>
 8001092:	4b55      	ldr	r3, [pc, #340]	@ (80011e8 <menu+0x260>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d102      	bne.n	80010a0 <menu+0x118>
			menuSayac = 16;
 800109a:	4b4e      	ldr	r3, [pc, #312]	@ (80011d4 <menu+0x24c>)
 800109c:	2210      	movs	r2, #16
 800109e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80010a0:	4b4c      	ldr	r3, [pc, #304]	@ (80011d4 <menu+0x24c>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	2b18      	cmp	r3, #24
 80010a6:	d106      	bne.n	80010b6 <menu+0x12e>
 80010a8:	4b4b      	ldr	r3, [pc, #300]	@ (80011d8 <menu+0x250>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d102      	bne.n	80010b6 <menu+0x12e>
			menuSayac = 26;
 80010b0:	4b48      	ldr	r3, [pc, #288]	@ (80011d4 <menu+0x24c>)
 80010b2:	221a      	movs	r2, #26
 80010b4:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 80010b6:	4b47      	ldr	r3, [pc, #284]	@ (80011d4 <menu+0x24c>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b21      	cmp	r3, #33	@ 0x21
 80010bc:	d106      	bne.n	80010cc <menu+0x144>
 80010be:	4b4b      	ldr	r3, [pc, #300]	@ (80011ec <menu+0x264>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d102      	bne.n	80010cc <menu+0x144>
			menuSayac = 35;
 80010c6:	4b43      	ldr	r3, [pc, #268]	@ (80011d4 <menu+0x24c>)
 80010c8:	2223      	movs	r2, #35	@ 0x23
 80010ca:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80010cc:	f002 fca8 	bl	8003a20 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80010d0:	2108      	movs	r1, #8
 80010d2:	4847      	ldr	r0, [pc, #284]	@ (80011f0 <menu+0x268>)
 80010d4:	f009 ffb4 	bl	800b040 <HAL_GPIO_ReadPin>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b01      	cmp	r3, #1
 80010dc:	f040 8097 	bne.w	800120e <menu+0x286>
 80010e0:	4b3b      	ldr	r3, [pc, #236]	@ (80011d0 <menu+0x248>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	f083 0301 	eor.w	r3, r3, #1
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 808f 	beq.w	800120e <menu+0x286>
		if (menuSayac <= 1) {
 80010f0:	4b38      	ldr	r3, [pc, #224]	@ (80011d4 <menu+0x24c>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d802      	bhi.n	80010fe <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80010f8:	4b36      	ldr	r3, [pc, #216]	@ (80011d4 <menu+0x24c>)
 80010fa:	2224      	movs	r2, #36	@ 0x24
 80010fc:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80010fe:	4b35      	ldr	r3, [pc, #212]	@ (80011d4 <menu+0x24c>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	3b01      	subs	r3, #1
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b33      	ldr	r3, [pc, #204]	@ (80011d4 <menu+0x24c>)
 8001108:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800110a:	4b32      	ldr	r3, [pc, #200]	@ (80011d4 <menu+0x24c>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b14      	cmp	r3, #20
 8001110:	d106      	bne.n	8001120 <menu+0x198>
 8001112:	4b31      	ldr	r3, [pc, #196]	@ (80011d8 <menu+0x250>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d102      	bne.n	8001120 <menu+0x198>
			menuSayac = 17;
 800111a:	4b2e      	ldr	r3, [pc, #184]	@ (80011d4 <menu+0x24c>)
 800111c:	2211      	movs	r2, #17
 800111e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001120:	4b2c      	ldr	r3, [pc, #176]	@ (80011d4 <menu+0x24c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b0f      	cmp	r3, #15
 8001126:	d106      	bne.n	8001136 <menu+0x1ae>
 8001128:	4b2c      	ldr	r3, [pc, #176]	@ (80011dc <menu+0x254>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <menu+0x1ae>
			menuSayac = 7;
 8001130:	4b28      	ldr	r3, [pc, #160]	@ (80011d4 <menu+0x24c>)
 8001132:	2207      	movs	r2, #7
 8001134:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001136:	4b27      	ldr	r3, [pc, #156]	@ (80011d4 <menu+0x24c>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b0f      	cmp	r3, #15
 800113c:	d106      	bne.n	800114c <menu+0x1c4>
 800113e:	4b27      	ldr	r3, [pc, #156]	@ (80011dc <menu+0x254>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d102      	bne.n	800114c <menu+0x1c4>
			menuSayac = 12;
 8001146:	4b23      	ldr	r3, [pc, #140]	@ (80011d4 <menu+0x24c>)
 8001148:	220c      	movs	r2, #12
 800114a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 800114c:	4b21      	ldr	r3, [pc, #132]	@ (80011d4 <menu+0x24c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2b0c      	cmp	r3, #12
 8001152:	d106      	bne.n	8001162 <menu+0x1da>
 8001154:	4b21      	ldr	r3, [pc, #132]	@ (80011dc <menu+0x254>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b02      	cmp	r3, #2
 800115a:	d102      	bne.n	8001162 <menu+0x1da>
			menuSayac = 8;
 800115c:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <menu+0x24c>)
 800115e:	2208      	movs	r2, #8
 8001160:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001162:	4b1c      	ldr	r3, [pc, #112]	@ (80011d4 <menu+0x24c>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b0a      	cmp	r3, #10
 8001168:	d10a      	bne.n	8001180 <menu+0x1f8>
 800116a:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <menu+0x258>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d003      	beq.n	800117a <menu+0x1f2>
 8001172:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <menu+0x258>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d102      	bne.n	8001180 <menu+0x1f8>
			menuSayac = 9;
 800117a:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <menu+0x24c>)
 800117c:	2209      	movs	r2, #9
 800117e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001180:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <menu+0x24c>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b0c      	cmp	r3, #12
 8001186:	d10a      	bne.n	800119e <menu+0x216>
 8001188:	4b16      	ldr	r3, [pc, #88]	@ (80011e4 <menu+0x25c>)
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d003      	beq.n	8001198 <menu+0x210>
 8001190:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <menu+0x25c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d102      	bne.n	800119e <menu+0x216>
			menuSayac = 11;
 8001198:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <menu+0x24c>)
 800119a:	220b      	movs	r2, #11
 800119c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800119e:	4b0d      	ldr	r3, [pc, #52]	@ (80011d4 <menu+0x24c>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b0f      	cmp	r3, #15
 80011a4:	d106      	bne.n	80011b4 <menu+0x22c>
 80011a6:	4b10      	ldr	r3, [pc, #64]	@ (80011e8 <menu+0x260>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d102      	bne.n	80011b4 <menu+0x22c>
			menuSayac = 14;
 80011ae:	4b09      	ldr	r3, [pc, #36]	@ (80011d4 <menu+0x24c>)
 80011b0:	220e      	movs	r2, #14
 80011b2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80011b4:	4b07      	ldr	r3, [pc, #28]	@ (80011d4 <menu+0x24c>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b19      	cmp	r3, #25
 80011ba:	d11b      	bne.n	80011f4 <menu+0x26c>
 80011bc:	4b06      	ldr	r3, [pc, #24]	@ (80011d8 <menu+0x250>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d117      	bne.n	80011f4 <menu+0x26c>
			menuSayac = 23;
 80011c4:	4b03      	ldr	r3, [pc, #12]	@ (80011d4 <menu+0x24c>)
 80011c6:	2217      	movs	r2, #23
 80011c8:	701a      	strb	r2, [r3, #0]
 80011ca:	e013      	b.n	80011f4 <menu+0x26c>
 80011cc:	40010800 	.word	0x40010800
 80011d0:	2000109b 	.word	0x2000109b
 80011d4:	2000106c 	.word	0x2000106c
 80011d8:	2000107b 	.word	0x2000107b
 80011dc:	20001074 	.word	0x20001074
 80011e0:	20001075 	.word	0x20001075
 80011e4:	20001076 	.word	0x20001076
 80011e8:	20001077 	.word	0x20001077
 80011ec:	2000108b 	.word	0x2000108b
 80011f0:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 80011f4:	4bb0      	ldr	r3, [pc, #704]	@ (80014b8 <menu+0x530>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b22      	cmp	r3, #34	@ 0x22
 80011fa:	d106      	bne.n	800120a <menu+0x282>
 80011fc:	4baf      	ldr	r3, [pc, #700]	@ (80014bc <menu+0x534>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d102      	bne.n	800120a <menu+0x282>
			menuSayac = 32;
 8001204:	4bac      	ldr	r3, [pc, #688]	@ (80014b8 <menu+0x530>)
 8001206:	2220      	movs	r2, #32
 8001208:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800120a:	f002 fc09 	bl	8003a20 <bekle>
	}

	if (menuSayac == 0) {
 800120e:	4baa      	ldr	r3, [pc, #680]	@ (80014b8 <menu+0x530>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d109      	bne.n	800122a <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 8001216:	4aaa      	ldr	r2, [pc, #680]	@ (80014c0 <menu+0x538>)
 8001218:	2101      	movs	r1, #1
 800121a:	2001      	movs	r0, #1
 800121c:	f008 fc1e 	bl	8009a5c <lcd_print>
		lcd_print(2, 1, ayarlarText);
 8001220:	4aa8      	ldr	r2, [pc, #672]	@ (80014c4 <menu+0x53c>)
 8001222:	2101      	movs	r1, #1
 8001224:	2002      	movs	r0, #2
 8001226:	f008 fc19 	bl	8009a5c <lcd_print>
	}

	if (menuSayac == 1) {
 800122a:	4ba3      	ldr	r3, [pc, #652]	@ (80014b8 <menu+0x530>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	2b01      	cmp	r3, #1
 8001230:	f040 81f4 	bne.w	800161c <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 8001234:	4aa4      	ldr	r2, [pc, #656]	@ (80014c8 <menu+0x540>)
 8001236:	2101      	movs	r1, #1
 8001238:	2001      	movs	r0, #1
 800123a:	f008 fc0f 	bl	8009a5c <lcd_print>

		if(hataGostermeSirasi == 0) {
 800123e:	4ba3      	ldr	r3, [pc, #652]	@ (80014cc <menu+0x544>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d115      	bne.n	8001272 <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 8001246:	4aa2      	ldr	r2, [pc, #648]	@ (80014d0 <menu+0x548>)
 8001248:	2101      	movs	r1, #1
 800124a:	2002      	movs	r0, #2
 800124c:	f008 fc06 	bl	8009a5c <lcd_print>
			lcd_print(2, 15, "   ");
 8001250:	4aa0      	ldr	r2, [pc, #640]	@ (80014d4 <menu+0x54c>)
 8001252:	210f      	movs	r1, #15
 8001254:	2002      	movs	r0, #2
 8001256:	f008 fc01 	bl	8009a5c <lcd_print>
			itoa(hataKayit1, snum, 10);
 800125a:	4b9f      	ldr	r3, [pc, #636]	@ (80014d8 <menu+0x550>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	220a      	movs	r2, #10
 8001260:	499e      	ldr	r1, [pc, #632]	@ (80014dc <menu+0x554>)
 8001262:	4618      	mov	r0, r3
 8001264:	f00c fee2 	bl	800e02c <itoa>
			lcd_print(2, 14, snum);
 8001268:	4a9c      	ldr	r2, [pc, #624]	@ (80014dc <menu+0x554>)
 800126a:	210e      	movs	r1, #14
 800126c:	2002      	movs	r0, #2
 800126e:	f008 fbf5 	bl	8009a5c <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001272:	4b96      	ldr	r3, [pc, #600]	@ (80014cc <menu+0x544>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d115      	bne.n	80012a6 <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 800127a:	4a99      	ldr	r2, [pc, #612]	@ (80014e0 <menu+0x558>)
 800127c:	2101      	movs	r1, #1
 800127e:	2002      	movs	r0, #2
 8001280:	f008 fbec 	bl	8009a5c <lcd_print>
			lcd_print(2, 15, "  ");
 8001284:	4a97      	ldr	r2, [pc, #604]	@ (80014e4 <menu+0x55c>)
 8001286:	210f      	movs	r1, #15
 8001288:	2002      	movs	r0, #2
 800128a:	f008 fbe7 	bl	8009a5c <lcd_print>
			itoa(hataKayit2, snum, 10);
 800128e:	4b96      	ldr	r3, [pc, #600]	@ (80014e8 <menu+0x560>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	220a      	movs	r2, #10
 8001294:	4991      	ldr	r1, [pc, #580]	@ (80014dc <menu+0x554>)
 8001296:	4618      	mov	r0, r3
 8001298:	f00c fec8 	bl	800e02c <itoa>
			lcd_print(2, 14, snum);
 800129c:	4a8f      	ldr	r2, [pc, #572]	@ (80014dc <menu+0x554>)
 800129e:	210e      	movs	r1, #14
 80012a0:	2002      	movs	r0, #2
 80012a2:	f008 fbdb 	bl	8009a5c <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80012a6:	4b89      	ldr	r3, [pc, #548]	@ (80014cc <menu+0x544>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d115      	bne.n	80012da <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 80012ae:	4a8f      	ldr	r2, [pc, #572]	@ (80014ec <menu+0x564>)
 80012b0:	2101      	movs	r1, #1
 80012b2:	2002      	movs	r0, #2
 80012b4:	f008 fbd2 	bl	8009a5c <lcd_print>
			lcd_print(2, 15, "  ");
 80012b8:	4a8a      	ldr	r2, [pc, #552]	@ (80014e4 <menu+0x55c>)
 80012ba:	210f      	movs	r1, #15
 80012bc:	2002      	movs	r0, #2
 80012be:	f008 fbcd 	bl	8009a5c <lcd_print>
			itoa(hataKayit3, snum, 10);
 80012c2:	4b8b      	ldr	r3, [pc, #556]	@ (80014f0 <menu+0x568>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	220a      	movs	r2, #10
 80012c8:	4984      	ldr	r1, [pc, #528]	@ (80014dc <menu+0x554>)
 80012ca:	4618      	mov	r0, r3
 80012cc:	f00c feae 	bl	800e02c <itoa>
			lcd_print(2, 14, snum);
 80012d0:	4a82      	ldr	r2, [pc, #520]	@ (80014dc <menu+0x554>)
 80012d2:	210e      	movs	r1, #14
 80012d4:	2002      	movs	r0, #2
 80012d6:	f008 fbc1 	bl	8009a5c <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80012da:	4b7c      	ldr	r3, [pc, #496]	@ (80014cc <menu+0x544>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d115      	bne.n	800130e <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 80012e2:	4a84      	ldr	r2, [pc, #528]	@ (80014f4 <menu+0x56c>)
 80012e4:	2101      	movs	r1, #1
 80012e6:	2002      	movs	r0, #2
 80012e8:	f008 fbb8 	bl	8009a5c <lcd_print>
			lcd_print(2, 15, "  ");
 80012ec:	4a7d      	ldr	r2, [pc, #500]	@ (80014e4 <menu+0x55c>)
 80012ee:	210f      	movs	r1, #15
 80012f0:	2002      	movs	r0, #2
 80012f2:	f008 fbb3 	bl	8009a5c <lcd_print>
			itoa(hataKayit4, snum, 10);
 80012f6:	4b80      	ldr	r3, [pc, #512]	@ (80014f8 <menu+0x570>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	220a      	movs	r2, #10
 80012fc:	4977      	ldr	r1, [pc, #476]	@ (80014dc <menu+0x554>)
 80012fe:	4618      	mov	r0, r3
 8001300:	f00c fe94 	bl	800e02c <itoa>
			lcd_print(2, 14, snum);
 8001304:	4a75      	ldr	r2, [pc, #468]	@ (80014dc <menu+0x554>)
 8001306:	210e      	movs	r1, #14
 8001308:	2002      	movs	r0, #2
 800130a:	f008 fba7 	bl	8009a5c <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800130e:	4b6f      	ldr	r3, [pc, #444]	@ (80014cc <menu+0x544>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b04      	cmp	r3, #4
 8001314:	d115      	bne.n	8001342 <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 8001316:	4a79      	ldr	r2, [pc, #484]	@ (80014fc <menu+0x574>)
 8001318:	2101      	movs	r1, #1
 800131a:	2002      	movs	r0, #2
 800131c:	f008 fb9e 	bl	8009a5c <lcd_print>
			lcd_print(2, 15, "  ");
 8001320:	4a70      	ldr	r2, [pc, #448]	@ (80014e4 <menu+0x55c>)
 8001322:	210f      	movs	r1, #15
 8001324:	2002      	movs	r0, #2
 8001326:	f008 fb99 	bl	8009a5c <lcd_print>
			itoa(hataKayit5, snum, 10);
 800132a:	4b75      	ldr	r3, [pc, #468]	@ (8001500 <menu+0x578>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	220a      	movs	r2, #10
 8001330:	496a      	ldr	r1, [pc, #424]	@ (80014dc <menu+0x554>)
 8001332:	4618      	mov	r0, r3
 8001334:	f00c fe7a 	bl	800e02c <itoa>
			lcd_print(2, 14, snum);
 8001338:	4a68      	ldr	r2, [pc, #416]	@ (80014dc <menu+0x554>)
 800133a:	210e      	movs	r1, #14
 800133c:	2002      	movs	r0, #2
 800133e:	f008 fb8d 	bl	8009a5c <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001342:	4b62      	ldr	r3, [pc, #392]	@ (80014cc <menu+0x544>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b05      	cmp	r3, #5
 8001348:	d115      	bne.n	8001376 <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 800134a:	4a6e      	ldr	r2, [pc, #440]	@ (8001504 <menu+0x57c>)
 800134c:	2101      	movs	r1, #1
 800134e:	2002      	movs	r0, #2
 8001350:	f008 fb84 	bl	8009a5c <lcd_print>
			lcd_print(2, 15, "  ");
 8001354:	4a63      	ldr	r2, [pc, #396]	@ (80014e4 <menu+0x55c>)
 8001356:	210f      	movs	r1, #15
 8001358:	2002      	movs	r0, #2
 800135a:	f008 fb7f 	bl	8009a5c <lcd_print>
			itoa(hataKayit6, snum, 10);
 800135e:	4b6a      	ldr	r3, [pc, #424]	@ (8001508 <menu+0x580>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	220a      	movs	r2, #10
 8001364:	495d      	ldr	r1, [pc, #372]	@ (80014dc <menu+0x554>)
 8001366:	4618      	mov	r0, r3
 8001368:	f00c fe60 	bl	800e02c <itoa>
			lcd_print(2, 14, snum);
 800136c:	4a5b      	ldr	r2, [pc, #364]	@ (80014dc <menu+0x554>)
 800136e:	210e      	movs	r1, #14
 8001370:	2002      	movs	r0, #2
 8001372:	f008 fb73 	bl	8009a5c <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001376:	4b55      	ldr	r3, [pc, #340]	@ (80014cc <menu+0x544>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b06      	cmp	r3, #6
 800137c:	d115      	bne.n	80013aa <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 800137e:	4a63      	ldr	r2, [pc, #396]	@ (800150c <menu+0x584>)
 8001380:	2101      	movs	r1, #1
 8001382:	2002      	movs	r0, #2
 8001384:	f008 fb6a 	bl	8009a5c <lcd_print>
			lcd_print(2, 15, "  ");
 8001388:	4a56      	ldr	r2, [pc, #344]	@ (80014e4 <menu+0x55c>)
 800138a:	210f      	movs	r1, #15
 800138c:	2002      	movs	r0, #2
 800138e:	f008 fb65 	bl	8009a5c <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001392:	4b5f      	ldr	r3, [pc, #380]	@ (8001510 <menu+0x588>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	220a      	movs	r2, #10
 8001398:	4950      	ldr	r1, [pc, #320]	@ (80014dc <menu+0x554>)
 800139a:	4618      	mov	r0, r3
 800139c:	f00c fe46 	bl	800e02c <itoa>
			lcd_print(2, 14, snum);
 80013a0:	4a4e      	ldr	r2, [pc, #312]	@ (80014dc <menu+0x554>)
 80013a2:	210e      	movs	r1, #14
 80013a4:	2002      	movs	r0, #2
 80013a6:	f008 fb59 	bl	8009a5c <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80013aa:	4b48      	ldr	r3, [pc, #288]	@ (80014cc <menu+0x544>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b07      	cmp	r3, #7
 80013b0:	d115      	bne.n	80013de <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 80013b2:	4a58      	ldr	r2, [pc, #352]	@ (8001514 <menu+0x58c>)
 80013b4:	2101      	movs	r1, #1
 80013b6:	2002      	movs	r0, #2
 80013b8:	f008 fb50 	bl	8009a5c <lcd_print>
			lcd_print(2, 15, "  ");
 80013bc:	4a49      	ldr	r2, [pc, #292]	@ (80014e4 <menu+0x55c>)
 80013be:	210f      	movs	r1, #15
 80013c0:	2002      	movs	r0, #2
 80013c2:	f008 fb4b 	bl	8009a5c <lcd_print>
			itoa(hataKayit8, snum, 10);
 80013c6:	4b54      	ldr	r3, [pc, #336]	@ (8001518 <menu+0x590>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	220a      	movs	r2, #10
 80013cc:	4943      	ldr	r1, [pc, #268]	@ (80014dc <menu+0x554>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f00c fe2c 	bl	800e02c <itoa>
			lcd_print(2, 14, snum);
 80013d4:	4a41      	ldr	r2, [pc, #260]	@ (80014dc <menu+0x554>)
 80013d6:	210e      	movs	r1, #14
 80013d8:	2002      	movs	r0, #2
 80013da:	f008 fb3f 	bl	8009a5c <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80013de:	4b3b      	ldr	r3, [pc, #236]	@ (80014cc <menu+0x544>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d115      	bne.n	8001412 <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 80013e6:	4a4d      	ldr	r2, [pc, #308]	@ (800151c <menu+0x594>)
 80013e8:	2101      	movs	r1, #1
 80013ea:	2002      	movs	r0, #2
 80013ec:	f008 fb36 	bl	8009a5c <lcd_print>
			lcd_print(2, 15, "  ");
 80013f0:	4a3c      	ldr	r2, [pc, #240]	@ (80014e4 <menu+0x55c>)
 80013f2:	210f      	movs	r1, #15
 80013f4:	2002      	movs	r0, #2
 80013f6:	f008 fb31 	bl	8009a5c <lcd_print>
			itoa(hataKayit9, snum, 10);
 80013fa:	4b49      	ldr	r3, [pc, #292]	@ (8001520 <menu+0x598>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	220a      	movs	r2, #10
 8001400:	4936      	ldr	r1, [pc, #216]	@ (80014dc <menu+0x554>)
 8001402:	4618      	mov	r0, r3
 8001404:	f00c fe12 	bl	800e02c <itoa>
			lcd_print(2, 14, snum);
 8001408:	4a34      	ldr	r2, [pc, #208]	@ (80014dc <menu+0x554>)
 800140a:	210e      	movs	r1, #14
 800140c:	2002      	movs	r0, #2
 800140e:	f008 fb25 	bl	8009a5c <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001412:	4b2e      	ldr	r3, [pc, #184]	@ (80014cc <menu+0x544>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b09      	cmp	r3, #9
 8001418:	d115      	bne.n	8001446 <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 800141a:	4a42      	ldr	r2, [pc, #264]	@ (8001524 <menu+0x59c>)
 800141c:	2101      	movs	r1, #1
 800141e:	2002      	movs	r0, #2
 8001420:	f008 fb1c 	bl	8009a5c <lcd_print>
			lcd_print(2, 16, " ");
 8001424:	4a40      	ldr	r2, [pc, #256]	@ (8001528 <menu+0x5a0>)
 8001426:	2110      	movs	r1, #16
 8001428:	2002      	movs	r0, #2
 800142a:	f008 fb17 	bl	8009a5c <lcd_print>
			itoa(hataKayit10, snum, 10);
 800142e:	4b3f      	ldr	r3, [pc, #252]	@ (800152c <menu+0x5a4>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	220a      	movs	r2, #10
 8001434:	4929      	ldr	r1, [pc, #164]	@ (80014dc <menu+0x554>)
 8001436:	4618      	mov	r0, r3
 8001438:	f00c fdf8 	bl	800e02c <itoa>
			lcd_print(2, 15, snum);
 800143c:	4a27      	ldr	r2, [pc, #156]	@ (80014dc <menu+0x554>)
 800143e:	210f      	movs	r1, #15
 8001440:	2002      	movs	r0, #2
 8001442:	f008 fb0b 	bl	8009a5c <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001446:	4b21      	ldr	r3, [pc, #132]	@ (80014cc <menu+0x544>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	2b0a      	cmp	r3, #10
 800144c:	d104      	bne.n	8001458 <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 800144e:	4a38      	ldr	r2, [pc, #224]	@ (8001530 <menu+0x5a8>)
 8001450:	2101      	movs	r1, #1
 8001452:	2002      	movs	r0, #2
 8001454:	f008 fb02 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001458:	2102      	movs	r1, #2
 800145a:	4836      	ldr	r0, [pc, #216]	@ (8001534 <menu+0x5ac>)
 800145c:	f009 fdf0 	bl	800b040 <HAL_GPIO_ReadPin>
 8001460:	4603      	mov	r3, r0
 8001462:	2b01      	cmp	r3, #1
 8001464:	d119      	bne.n	800149a <menu+0x512>
 8001466:	4b34      	ldr	r3, [pc, #208]	@ (8001538 <menu+0x5b0>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	f083 0301 	eor.w	r3, r3, #1
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	d012      	beq.n	800149a <menu+0x512>
 8001474:	4b31      	ldr	r3, [pc, #196]	@ (800153c <menu+0x5b4>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d10e      	bne.n	800149a <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 800147c:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <menu+0x544>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	3301      	adds	r3, #1
 8001482:	b2da      	uxtb	r2, r3
 8001484:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <menu+0x544>)
 8001486:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001488:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <menu+0x544>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b0a      	cmp	r3, #10
 800148e:	d902      	bls.n	8001496 <menu+0x50e>
				hataGostermeSirasi = 0;
 8001490:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <menu+0x544>)
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001496:	f002 fac3 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800149a:	2104      	movs	r1, #4
 800149c:	4825      	ldr	r0, [pc, #148]	@ (8001534 <menu+0x5ac>)
 800149e:	f009 fdcf 	bl	800b040 <HAL_GPIO_ReadPin>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d15e      	bne.n	8001566 <menu+0x5de>
 80014a8:	4b23      	ldr	r3, [pc, #140]	@ (8001538 <menu+0x5b0>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	f083 0301 	eor.w	r3, r3, #1
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d057      	beq.n	8001566 <menu+0x5de>
 80014b6:	e043      	b.n	8001540 <menu+0x5b8>
 80014b8:	2000106c 	.word	0x2000106c
 80014bc:	2000108b 	.word	0x2000108b
 80014c0:	200010d4 	.word	0x200010d4
 80014c4:	200010e8 	.word	0x200010e8
 80014c8:	200010fc 	.word	0x200010fc
 80014cc:	2000106e 	.word	0x2000106e
 80014d0:	20001110 	.word	0x20001110
 80014d4:	0800e250 	.word	0x0800e250
 80014d8:	2000108e 	.word	0x2000108e
 80014dc:	2000100c 	.word	0x2000100c
 80014e0:	20001124 	.word	0x20001124
 80014e4:	0800e254 	.word	0x0800e254
 80014e8:	2000108f 	.word	0x2000108f
 80014ec:	20001138 	.word	0x20001138
 80014f0:	20001090 	.word	0x20001090
 80014f4:	2000114c 	.word	0x2000114c
 80014f8:	20001091 	.word	0x20001091
 80014fc:	20001160 	.word	0x20001160
 8001500:	20001092 	.word	0x20001092
 8001504:	20001174 	.word	0x20001174
 8001508:	20001093 	.word	0x20001093
 800150c:	20001188 	.word	0x20001188
 8001510:	20001094 	.word	0x20001094
 8001514:	2000119c 	.word	0x2000119c
 8001518:	20001095 	.word	0x20001095
 800151c:	200011b0 	.word	0x200011b0
 8001520:	20001096 	.word	0x20001096
 8001524:	200011c4 	.word	0x200011c4
 8001528:	0800e258 	.word	0x0800e258
 800152c:	20001097 	.word	0x20001097
 8001530:	200011d8 	.word	0x200011d8
 8001534:	40010800 	.word	0x40010800
 8001538:	2000109b 	.word	0x2000109b
 800153c:	2000107b 	.word	0x2000107b
 8001540:	4b8a      	ldr	r3, [pc, #552]	@ (800176c <menu+0x7e4>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10e      	bne.n	8001566 <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001548:	4b89      	ldr	r3, [pc, #548]	@ (8001770 <menu+0x7e8>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	3b01      	subs	r3, #1
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b87      	ldr	r3, [pc, #540]	@ (8001770 <menu+0x7e8>)
 8001552:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001554:	4b86      	ldr	r3, [pc, #536]	@ (8001770 <menu+0x7e8>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	2b0b      	cmp	r3, #11
 800155a:	d902      	bls.n	8001562 <menu+0x5da>
	    		hataGostermeSirasi = 10;
 800155c:	4b84      	ldr	r3, [pc, #528]	@ (8001770 <menu+0x7e8>)
 800155e:	220a      	movs	r2, #10
 8001560:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001562:	f002 fa5d 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001566:	2108      	movs	r1, #8
 8001568:	4882      	ldr	r0, [pc, #520]	@ (8001774 <menu+0x7ec>)
 800156a:	f009 fd69 	bl	800b040 <HAL_GPIO_ReadPin>
 800156e:	4603      	mov	r3, r0
 8001570:	2b01      	cmp	r3, #1
 8001572:	d153      	bne.n	800161c <menu+0x694>
 8001574:	4b80      	ldr	r3, [pc, #512]	@ (8001778 <menu+0x7f0>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	f083 0301 	eor.w	r3, r3, #1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d04c      	beq.n	800161c <menu+0x694>
 8001582:	4b7b      	ldr	r3, [pc, #492]	@ (8001770 <menu+0x7e8>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b0a      	cmp	r3, #10
 8001588:	d148      	bne.n	800161c <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 800158a:	4b7c      	ldr	r3, [pc, #496]	@ (800177c <menu+0x7f4>)
 800158c:	2200      	movs	r2, #0
 800158e:	701a      	strb	r2, [r3, #0]
 8001590:	4b7b      	ldr	r3, [pc, #492]	@ (8001780 <menu+0x7f8>)
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001598:	4b7a      	ldr	r3, [pc, #488]	@ (8001784 <menu+0x7fc>)
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
 800159e:	4b78      	ldr	r3, [pc, #480]	@ (8001780 <menu+0x7f8>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 80015a6:	4b78      	ldr	r3, [pc, #480]	@ (8001788 <menu+0x800>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
 80015ac:	4b74      	ldr	r3, [pc, #464]	@ (8001780 <menu+0x7f8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 80015b4:	4b75      	ldr	r3, [pc, #468]	@ (800178c <menu+0x804>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	701a      	strb	r2, [r3, #0]
 80015ba:	4b71      	ldr	r3, [pc, #452]	@ (8001780 <menu+0x7f8>)
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 80015c2:	4b73      	ldr	r3, [pc, #460]	@ (8001790 <menu+0x808>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
 80015c8:	4b6d      	ldr	r3, [pc, #436]	@ (8001780 <menu+0x7f8>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 80015d0:	4b70      	ldr	r3, [pc, #448]	@ (8001794 <menu+0x80c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]
 80015d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001780 <menu+0x7f8>)
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 80015de:	4b6e      	ldr	r3, [pc, #440]	@ (8001798 <menu+0x810>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
 80015e4:	4b66      	ldr	r3, [pc, #408]	@ (8001780 <menu+0x7f8>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 80015ec:	4b6b      	ldr	r3, [pc, #428]	@ (800179c <menu+0x814>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
 80015f2:	4b63      	ldr	r3, [pc, #396]	@ (8001780 <menu+0x7f8>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 80015fa:	4b69      	ldr	r3, [pc, #420]	@ (80017a0 <menu+0x818>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	701a      	strb	r2, [r3, #0]
 8001600:	4b5f      	ldr	r3, [pc, #380]	@ (8001780 <menu+0x7f8>)
 8001602:	2200      	movs	r2, #0
 8001604:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001608:	4b66      	ldr	r3, [pc, #408]	@ (80017a4 <menu+0x81c>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	4b5c      	ldr	r3, [pc, #368]	@ (8001780 <menu+0x7f8>)
 8001610:	2200      	movs	r2, #0
 8001612:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 8001616:	4b64      	ldr	r3, [pc, #400]	@ (80017a8 <menu+0x820>)
 8001618:	2201      	movs	r2, #1
 800161a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 800161c:	4b63      	ldr	r3, [pc, #396]	@ (80017ac <menu+0x824>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b02      	cmp	r3, #2
 8001622:	f040 808e 	bne.w	8001742 <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 8001626:	4a62      	ldr	r2, [pc, #392]	@ (80017b0 <menu+0x828>)
 8001628:	2101      	movs	r1, #1
 800162a:	2001      	movs	r0, #1
 800162c:	f008 fa16 	bl	8009a5c <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001630:	4b4e      	ldr	r3, [pc, #312]	@ (800176c <menu+0x7e4>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d003      	beq.n	8001640 <menu+0x6b8>
 8001638:	4b4c      	ldr	r3, [pc, #304]	@ (800176c <menu+0x7e4>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b02      	cmp	r3, #2
 800163e:	d104      	bne.n	800164a <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 8001640:	4a5c      	ldr	r2, [pc, #368]	@ (80017b4 <menu+0x82c>)
 8001642:	2101      	movs	r1, #1
 8001644:	2002      	movs	r0, #2
 8001646:	f008 fa09 	bl	8009a5c <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 800164a:	4b5b      	ldr	r3, [pc, #364]	@ (80017b8 <menu+0x830>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d108      	bne.n	8001664 <menu+0x6dc>
 8001652:	4b46      	ldr	r3, [pc, #280]	@ (800176c <menu+0x7e4>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d104      	bne.n	8001664 <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 800165a:	4a58      	ldr	r2, [pc, #352]	@ (80017bc <menu+0x834>)
 800165c:	2101      	movs	r1, #1
 800165e:	2002      	movs	r0, #2
 8001660:	f008 f9fc 	bl	8009a5c <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001664:	4b54      	ldr	r3, [pc, #336]	@ (80017b8 <menu+0x830>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d108      	bne.n	800167e <menu+0x6f6>
 800166c:	4b3f      	ldr	r3, [pc, #252]	@ (800176c <menu+0x7e4>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d104      	bne.n	800167e <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 8001674:	4a52      	ldr	r2, [pc, #328]	@ (80017c0 <menu+0x838>)
 8001676:	2101      	movs	r1, #1
 8001678:	2002      	movs	r0, #2
 800167a:	f008 f9ef 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800167e:	2102      	movs	r1, #2
 8001680:	483c      	ldr	r0, [pc, #240]	@ (8001774 <menu+0x7ec>)
 8001682:	f009 fcdd 	bl	800b040 <HAL_GPIO_ReadPin>
 8001686:	4603      	mov	r3, r0
 8001688:	2b01      	cmp	r3, #1
 800168a:	d119      	bne.n	80016c0 <menu+0x738>
 800168c:	4b3a      	ldr	r3, [pc, #232]	@ (8001778 <menu+0x7f0>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	f083 0301 	eor.w	r3, r3, #1
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	d012      	beq.n	80016c0 <menu+0x738>
 800169a:	4b34      	ldr	r3, [pc, #208]	@ (800176c <menu+0x7e4>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10e      	bne.n	80016c0 <menu+0x738>
			calismaSekli = calismaSekli + 1;
 80016a2:	4b45      	ldr	r3, [pc, #276]	@ (80017b8 <menu+0x830>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b43      	ldr	r3, [pc, #268]	@ (80017b8 <menu+0x830>)
 80016ac:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 80016ae:	4b42      	ldr	r3, [pc, #264]	@ (80017b8 <menu+0x830>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d902      	bls.n	80016bc <menu+0x734>
				calismaSekli = 0;
 80016b6:	4b40      	ldr	r3, [pc, #256]	@ (80017b8 <menu+0x830>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80016bc:	f002 f9b0 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80016c0:	2104      	movs	r1, #4
 80016c2:	482c      	ldr	r0, [pc, #176]	@ (8001774 <menu+0x7ec>)
 80016c4:	f009 fcbc 	bl	800b040 <HAL_GPIO_ReadPin>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d119      	bne.n	8001702 <menu+0x77a>
 80016ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001778 <menu+0x7f0>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	f083 0301 	eor.w	r3, r3, #1
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d012      	beq.n	8001702 <menu+0x77a>
 80016dc:	4b23      	ldr	r3, [pc, #140]	@ (800176c <menu+0x7e4>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d10e      	bne.n	8001702 <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 80016e4:	4b34      	ldr	r3, [pc, #208]	@ (80017b8 <menu+0x830>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	4b32      	ldr	r3, [pc, #200]	@ (80017b8 <menu+0x830>)
 80016ee:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 80016f0:	4b31      	ldr	r3, [pc, #196]	@ (80017b8 <menu+0x830>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d002      	beq.n	80016fe <menu+0x776>
	    		calismaSekli = 1;
 80016f8:	4b2f      	ldr	r3, [pc, #188]	@ (80017b8 <menu+0x830>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80016fe:	f002 f98f 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001702:	2108      	movs	r1, #8
 8001704:	481b      	ldr	r0, [pc, #108]	@ (8001774 <menu+0x7ec>)
 8001706:	f009 fc9b 	bl	800b040 <HAL_GPIO_ReadPin>
 800170a:	4603      	mov	r3, r0
 800170c:	2b01      	cmp	r3, #1
 800170e:	d118      	bne.n	8001742 <menu+0x7ba>
 8001710:	4b19      	ldr	r3, [pc, #100]	@ (8001778 <menu+0x7f0>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	f083 0301 	eor.w	r3, r3, #1
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d011      	beq.n	8001742 <menu+0x7ba>
			eepromData[1] = calismaSekli;
 800171e:	4b26      	ldr	r3, [pc, #152]	@ (80017b8 <menu+0x830>)
 8001720:	781a      	ldrb	r2, [r3, #0]
 8001722:	4b17      	ldr	r3, [pc, #92]	@ (8001780 <menu+0x7f8>)
 8001724:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001726:	4b24      	ldr	r3, [pc, #144]	@ (80017b8 <menu+0x830>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d106      	bne.n	800173c <menu+0x7b4>
				altLimit = 1;
 800172e:	4b25      	ldr	r3, [pc, #148]	@ (80017c4 <menu+0x83c>)
 8001730:	2201      	movs	r2, #1
 8001732:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001734:	4b23      	ldr	r3, [pc, #140]	@ (80017c4 <menu+0x83c>)
 8001736:	781a      	ldrb	r2, [r3, #0]
 8001738:	4b11      	ldr	r3, [pc, #68]	@ (8001780 <menu+0x7f8>)
 800173a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 800173c:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <menu+0x820>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001742:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <menu+0x824>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b03      	cmp	r3, #3
 8001748:	f040 809c 	bne.w	8001884 <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 800174c:	4a1e      	ldr	r2, [pc, #120]	@ (80017c8 <menu+0x840>)
 800174e:	2101      	movs	r1, #1
 8001750:	2001      	movs	r0, #1
 8001752:	f008 f983 	bl	8009a5c <lcd_print>

		if(emniyetCercevesi == 0) {
 8001756:	4b1d      	ldr	r3, [pc, #116]	@ (80017cc <menu+0x844>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d13a      	bne.n	80017d4 <menu+0x84c>
			lcd_print(2, 1, pasifText);
 800175e:	4a1c      	ldr	r2, [pc, #112]	@ (80017d0 <menu+0x848>)
 8001760:	2101      	movs	r1, #1
 8001762:	2002      	movs	r0, #2
 8001764:	f008 f97a 	bl	8009a5c <lcd_print>
 8001768:	e03d      	b.n	80017e6 <menu+0x85e>
 800176a:	bf00      	nop
 800176c:	2000107b 	.word	0x2000107b
 8001770:	2000106e 	.word	0x2000106e
 8001774:	40010800 	.word	0x40010800
 8001778:	2000109b 	.word	0x2000109b
 800177c:	2000108e 	.word	0x2000108e
 8001780:	20000f9c 	.word	0x20000f9c
 8001784:	2000108f 	.word	0x2000108f
 8001788:	20001090 	.word	0x20001090
 800178c:	20001091 	.word	0x20001091
 8001790:	20001092 	.word	0x20001092
 8001794:	20001093 	.word	0x20001093
 8001798:	20001094 	.word	0x20001094
 800179c:	20001095 	.word	0x20001095
 80017a0:	20001096 	.word	0x20001096
 80017a4:	20001097 	.word	0x20001097
 80017a8:	20001098 	.word	0x20001098
 80017ac:	2000106c 	.word	0x2000106c
 80017b0:	200011ec 	.word	0x200011ec
 80017b4:	20001200 	.word	0x20001200
 80017b8:	2000106d 	.word	0x2000106d
 80017bc:	20001214 	.word	0x20001214
 80017c0:	20001228 	.word	0x20001228
 80017c4:	20001072 	.word	0x20001072
 80017c8:	2000123c 	.word	0x2000123c
 80017cc:	20001070 	.word	0x20001070
 80017d0:	20001250 	.word	0x20001250
		} else if(emniyetCercevesi == 1) {
 80017d4:	4b6b      	ldr	r3, [pc, #428]	@ (8001984 <menu+0x9fc>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d104      	bne.n	80017e6 <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 80017dc:	4a6a      	ldr	r2, [pc, #424]	@ (8001988 <menu+0xa00>)
 80017de:	2101      	movs	r1, #1
 80017e0:	2002      	movs	r0, #2
 80017e2:	f008 f93b 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80017e6:	2102      	movs	r1, #2
 80017e8:	4868      	ldr	r0, [pc, #416]	@ (800198c <menu+0xa04>)
 80017ea:	f009 fc29 	bl	800b040 <HAL_GPIO_ReadPin>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d115      	bne.n	8001820 <menu+0x898>
 80017f4:	4b66      	ldr	r3, [pc, #408]	@ (8001990 <menu+0xa08>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	f083 0301 	eor.w	r3, r3, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00e      	beq.n	8001820 <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001802:	4b60      	ldr	r3, [pc, #384]	@ (8001984 <menu+0x9fc>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	3301      	adds	r3, #1
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b5e      	ldr	r3, [pc, #376]	@ (8001984 <menu+0x9fc>)
 800180c:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 800180e:	4b5d      	ldr	r3, [pc, #372]	@ (8001984 <menu+0x9fc>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d902      	bls.n	800181c <menu+0x894>
				emniyetCercevesi = 0;
 8001816:	4b5b      	ldr	r3, [pc, #364]	@ (8001984 <menu+0x9fc>)
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800181c:	f002 f900 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001820:	2104      	movs	r1, #4
 8001822:	485a      	ldr	r0, [pc, #360]	@ (800198c <menu+0xa04>)
 8001824:	f009 fc0c 	bl	800b040 <HAL_GPIO_ReadPin>
 8001828:	4603      	mov	r3, r0
 800182a:	2b01      	cmp	r3, #1
 800182c:	d115      	bne.n	800185a <menu+0x8d2>
 800182e:	4b58      	ldr	r3, [pc, #352]	@ (8001990 <menu+0xa08>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	f083 0301 	eor.w	r3, r3, #1
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00e      	beq.n	800185a <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 800183c:	4b51      	ldr	r3, [pc, #324]	@ (8001984 <menu+0x9fc>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	3b01      	subs	r3, #1
 8001842:	b2da      	uxtb	r2, r3
 8001844:	4b4f      	ldr	r3, [pc, #316]	@ (8001984 <menu+0x9fc>)
 8001846:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001848:	4b4e      	ldr	r3, [pc, #312]	@ (8001984 <menu+0x9fc>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d002      	beq.n	8001856 <menu+0x8ce>
		   		emniyetCercevesi = 1;
 8001850:	4b4c      	ldr	r3, [pc, #304]	@ (8001984 <menu+0x9fc>)
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001856:	f002 f8e3 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 800185a:	2108      	movs	r1, #8
 800185c:	484b      	ldr	r0, [pc, #300]	@ (800198c <menu+0xa04>)
 800185e:	f009 fbef 	bl	800b040 <HAL_GPIO_ReadPin>
 8001862:	4603      	mov	r3, r0
 8001864:	2b01      	cmp	r3, #1
 8001866:	d10d      	bne.n	8001884 <menu+0x8fc>
 8001868:	4b49      	ldr	r3, [pc, #292]	@ (8001990 <menu+0xa08>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	f083 0301 	eor.w	r3, r3, #1
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d006      	beq.n	8001884 <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 8001876:	4b43      	ldr	r3, [pc, #268]	@ (8001984 <menu+0x9fc>)
 8001878:	781a      	ldrb	r2, [r3, #0]
 800187a:	4b46      	ldr	r3, [pc, #280]	@ (8001994 <menu+0xa0c>)
 800187c:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 800187e:	4b46      	ldr	r3, [pc, #280]	@ (8001998 <menu+0xa10>)
 8001880:	2201      	movs	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001884:	4b45      	ldr	r3, [pc, #276]	@ (800199c <menu+0xa14>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b04      	cmp	r3, #4
 800188a:	d166      	bne.n	800195a <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 800188c:	4a44      	ldr	r2, [pc, #272]	@ (80019a0 <menu+0xa18>)
 800188e:	2101      	movs	r1, #1
 8001890:	2001      	movs	r0, #1
 8001892:	f008 f8e3 	bl	8009a5c <lcd_print>

		if(yavaslamaLimit == 0) {
 8001896:	4b43      	ldr	r3, [pc, #268]	@ (80019a4 <menu+0xa1c>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d105      	bne.n	80018aa <menu+0x922>
			lcd_print(2, 1, pasifText);
 800189e:	4a42      	ldr	r2, [pc, #264]	@ (80019a8 <menu+0xa20>)
 80018a0:	2101      	movs	r1, #1
 80018a2:	2002      	movs	r0, #2
 80018a4:	f008 f8da 	bl	8009a5c <lcd_print>
 80018a8:	e008      	b.n	80018bc <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 80018aa:	4b3e      	ldr	r3, [pc, #248]	@ (80019a4 <menu+0xa1c>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d104      	bne.n	80018bc <menu+0x934>
			lcd_print(2, 1, aktifText);
 80018b2:	4a3e      	ldr	r2, [pc, #248]	@ (80019ac <menu+0xa24>)
 80018b4:	2101      	movs	r1, #1
 80018b6:	2002      	movs	r0, #2
 80018b8:	f008 f8d0 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80018bc:	2102      	movs	r1, #2
 80018be:	4833      	ldr	r0, [pc, #204]	@ (800198c <menu+0xa04>)
 80018c0:	f009 fbbe 	bl	800b040 <HAL_GPIO_ReadPin>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d115      	bne.n	80018f6 <menu+0x96e>
 80018ca:	4b31      	ldr	r3, [pc, #196]	@ (8001990 <menu+0xa08>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	f083 0301 	eor.w	r3, r3, #1
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d00e      	beq.n	80018f6 <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 80018d8:	4b32      	ldr	r3, [pc, #200]	@ (80019a4 <menu+0xa1c>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	3301      	adds	r3, #1
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	4b30      	ldr	r3, [pc, #192]	@ (80019a4 <menu+0xa1c>)
 80018e2:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80018e4:	4b2f      	ldr	r3, [pc, #188]	@ (80019a4 <menu+0xa1c>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d902      	bls.n	80018f2 <menu+0x96a>
				yavaslamaLimit = 0;
 80018ec:	4b2d      	ldr	r3, [pc, #180]	@ (80019a4 <menu+0xa1c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80018f2:	f002 f895 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80018f6:	2104      	movs	r1, #4
 80018f8:	4824      	ldr	r0, [pc, #144]	@ (800198c <menu+0xa04>)
 80018fa:	f009 fba1 	bl	800b040 <HAL_GPIO_ReadPin>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b01      	cmp	r3, #1
 8001902:	d115      	bne.n	8001930 <menu+0x9a8>
 8001904:	4b22      	ldr	r3, [pc, #136]	@ (8001990 <menu+0xa08>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	f083 0301 	eor.w	r3, r3, #1
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00e      	beq.n	8001930 <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001912:	4b24      	ldr	r3, [pc, #144]	@ (80019a4 <menu+0xa1c>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	3b01      	subs	r3, #1
 8001918:	b2da      	uxtb	r2, r3
 800191a:	4b22      	ldr	r3, [pc, #136]	@ (80019a4 <menu+0xa1c>)
 800191c:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 800191e:	4b21      	ldr	r3, [pc, #132]	@ (80019a4 <menu+0xa1c>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <menu+0x9a4>
		   		yavaslamaLimit = 1;
 8001926:	4b1f      	ldr	r3, [pc, #124]	@ (80019a4 <menu+0xa1c>)
 8001928:	2201      	movs	r2, #1
 800192a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800192c:	f002 f878 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001930:	2108      	movs	r1, #8
 8001932:	4816      	ldr	r0, [pc, #88]	@ (800198c <menu+0xa04>)
 8001934:	f009 fb84 	bl	800b040 <HAL_GPIO_ReadPin>
 8001938:	4603      	mov	r3, r0
 800193a:	2b01      	cmp	r3, #1
 800193c:	d10d      	bne.n	800195a <menu+0x9d2>
 800193e:	4b14      	ldr	r3, [pc, #80]	@ (8001990 <menu+0xa08>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	f083 0301 	eor.w	r3, r3, #1
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	d006      	beq.n	800195a <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 800194c:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <menu+0xa1c>)
 800194e:	781a      	ldrb	r2, [r3, #0]
 8001950:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <menu+0xa0c>)
 8001952:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001954:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <menu+0xa10>)
 8001956:	2201      	movs	r2, #1
 8001958:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 800195a:	4b10      	ldr	r3, [pc, #64]	@ (800199c <menu+0xa14>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b05      	cmp	r3, #5
 8001960:	f040 80aa 	bne.w	8001ab8 <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 8001964:	4a12      	ldr	r2, [pc, #72]	@ (80019b0 <menu+0xa28>)
 8001966:	2101      	movs	r1, #1
 8001968:	2001      	movs	r0, #1
 800196a:	f008 f877 	bl	8009a5c <lcd_print>

		if(altLimit == 0) {
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <menu+0xa2c>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d120      	bne.n	80019b8 <menu+0xa30>
			lcd_print(2, 1, pasifText);
 8001976:	4a0c      	ldr	r2, [pc, #48]	@ (80019a8 <menu+0xa20>)
 8001978:	2101      	movs	r1, #1
 800197a:	2002      	movs	r0, #2
 800197c:	f008 f86e 	bl	8009a5c <lcd_print>
 8001980:	e023      	b.n	80019ca <menu+0xa42>
 8001982:	bf00      	nop
 8001984:	20001070 	.word	0x20001070
 8001988:	200000ec 	.word	0x200000ec
 800198c:	40010800 	.word	0x40010800
 8001990:	2000109b 	.word	0x2000109b
 8001994:	20000f9c 	.word	0x20000f9c
 8001998:	20001098 	.word	0x20001098
 800199c:	2000106c 	.word	0x2000106c
 80019a0:	20001278 	.word	0x20001278
 80019a4:	20001071 	.word	0x20001071
 80019a8:	20001250 	.word	0x20001250
 80019ac:	20001264 	.word	0x20001264
 80019b0:	2000128c 	.word	0x2000128c
 80019b4:	20001072 	.word	0x20001072
		} else if(altLimit == 1) {
 80019b8:	4b89      	ldr	r3, [pc, #548]	@ (8001be0 <menu+0xc58>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d104      	bne.n	80019ca <menu+0xa42>
			lcd_print(2, 1, aktifText);
 80019c0:	4a88      	ldr	r2, [pc, #544]	@ (8001be4 <menu+0xc5c>)
 80019c2:	2101      	movs	r1, #1
 80019c4:	2002      	movs	r0, #2
 80019c6:	f008 f849 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80019ca:	2102      	movs	r1, #2
 80019cc:	4886      	ldr	r0, [pc, #536]	@ (8001be8 <menu+0xc60>)
 80019ce:	f009 fb37 	bl	800b040 <HAL_GPIO_ReadPin>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d119      	bne.n	8001a0c <menu+0xa84>
 80019d8:	4b84      	ldr	r3, [pc, #528]	@ (8001bec <menu+0xc64>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	f083 0301 	eor.w	r3, r3, #1
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d012      	beq.n	8001a0c <menu+0xa84>
 80019e6:	4b82      	ldr	r3, [pc, #520]	@ (8001bf0 <menu+0xc68>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d10e      	bne.n	8001a0c <menu+0xa84>
			altLimit = altLimit + 1;
 80019ee:	4b7c      	ldr	r3, [pc, #496]	@ (8001be0 <menu+0xc58>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	3301      	adds	r3, #1
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4b7a      	ldr	r3, [pc, #488]	@ (8001be0 <menu+0xc58>)
 80019f8:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80019fa:	4b79      	ldr	r3, [pc, #484]	@ (8001be0 <menu+0xc58>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d902      	bls.n	8001a08 <menu+0xa80>
				altLimit = 0;
 8001a02:	4b77      	ldr	r3, [pc, #476]	@ (8001be0 <menu+0xc58>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a08:	f002 f80a 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001a0c:	2104      	movs	r1, #4
 8001a0e:	4876      	ldr	r0, [pc, #472]	@ (8001be8 <menu+0xc60>)
 8001a10:	f009 fb16 	bl	800b040 <HAL_GPIO_ReadPin>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d119      	bne.n	8001a4e <menu+0xac6>
 8001a1a:	4b74      	ldr	r3, [pc, #464]	@ (8001bec <menu+0xc64>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	f083 0301 	eor.w	r3, r3, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d012      	beq.n	8001a4e <menu+0xac6>
 8001a28:	4b71      	ldr	r3, [pc, #452]	@ (8001bf0 <menu+0xc68>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d10e      	bne.n	8001a4e <menu+0xac6>
			altLimit = altLimit - 1;
 8001a30:	4b6b      	ldr	r3, [pc, #428]	@ (8001be0 <menu+0xc58>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	4b69      	ldr	r3, [pc, #420]	@ (8001be0 <menu+0xc58>)
 8001a3a:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001a3c:	4b68      	ldr	r3, [pc, #416]	@ (8001be0 <menu+0xc58>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <menu+0xac2>
		   		altLimit = 1;
 8001a44:	4b66      	ldr	r3, [pc, #408]	@ (8001be0 <menu+0xc58>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001a4a:	f001 ffe9 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a4e:	2108      	movs	r1, #8
 8001a50:	4865      	ldr	r0, [pc, #404]	@ (8001be8 <menu+0xc60>)
 8001a52:	f009 faf5 	bl	800b040 <HAL_GPIO_ReadPin>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d12d      	bne.n	8001ab8 <menu+0xb30>
 8001a5c:	4b63      	ldr	r3, [pc, #396]	@ (8001bec <menu+0xc64>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	f083 0301 	eor.w	r3, r3, #1
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d026      	beq.n	8001ab8 <menu+0xb30>
			eepromData[5] = altLimit;
 8001a6a:	4b5d      	ldr	r3, [pc, #372]	@ (8001be0 <menu+0xc58>)
 8001a6c:	781a      	ldrb	r2, [r3, #0]
 8001a6e:	4b61      	ldr	r3, [pc, #388]	@ (8001bf4 <menu+0xc6c>)
 8001a70:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001a72:	4b5b      	ldr	r3, [pc, #364]	@ (8001be0 <menu+0xc58>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d110      	bne.n	8001a9c <menu+0xb14>
 8001a7a:	4b5f      	ldr	r3, [pc, #380]	@ (8001bf8 <menu+0xc70>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <menu+0xb02>
 8001a82:	4b5d      	ldr	r3, [pc, #372]	@ (8001bf8 <menu+0xc70>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d108      	bne.n	8001a9c <menu+0xb14>
				kapiTablaAcKonum = 3;
 8001a8a:	4b5b      	ldr	r3, [pc, #364]	@ (8001bf8 <menu+0xc70>)
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001a90:	4b59      	ldr	r3, [pc, #356]	@ (8001bf8 <menu+0xc70>)
 8001a92:	781a      	ldrb	r2, [r3, #0]
 8001a94:	4b57      	ldr	r3, [pc, #348]	@ (8001bf4 <menu+0xc6c>)
 8001a96:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001a9a:	e00a      	b.n	8001ab2 <menu+0xb2a>
			} else if(altLimit == 0) {
 8001a9c:	4b50      	ldr	r3, [pc, #320]	@ (8001be0 <menu+0xc58>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d106      	bne.n	8001ab2 <menu+0xb2a>
				platformSilindirTipi = 0;
 8001aa4:	4b55      	ldr	r3, [pc, #340]	@ (8001bfc <menu+0xc74>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001aaa:	4b54      	ldr	r3, [pc, #336]	@ (8001bfc <menu+0xc74>)
 8001aac:	781a      	ldrb	r2, [r3, #0]
 8001aae:	4b51      	ldr	r3, [pc, #324]	@ (8001bf4 <menu+0xc6c>)
 8001ab0:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001ab2:	4b53      	ldr	r3, [pc, #332]	@ (8001c00 <menu+0xc78>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001ab8:	4b52      	ldr	r3, [pc, #328]	@ (8001c04 <menu+0xc7c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b06      	cmp	r3, #6
 8001abe:	d166      	bne.n	8001b8e <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 8001ac0:	4a51      	ldr	r2, [pc, #324]	@ (8001c08 <menu+0xc80>)
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	f007 ffc9 	bl	8009a5c <lcd_print>

		if(basincSalteri == 0) {
 8001aca:	4b50      	ldr	r3, [pc, #320]	@ (8001c0c <menu+0xc84>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d105      	bne.n	8001ade <menu+0xb56>
			lcd_print(2, 1, pasifText);
 8001ad2:	4a4f      	ldr	r2, [pc, #316]	@ (8001c10 <menu+0xc88>)
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	2002      	movs	r0, #2
 8001ad8:	f007 ffc0 	bl	8009a5c <lcd_print>
 8001adc:	e008      	b.n	8001af0 <menu+0xb68>
		} else if(basincSalteri == 1) {
 8001ade:	4b4b      	ldr	r3, [pc, #300]	@ (8001c0c <menu+0xc84>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d104      	bne.n	8001af0 <menu+0xb68>
			lcd_print(2, 1, aktifText);
 8001ae6:	4a3f      	ldr	r2, [pc, #252]	@ (8001be4 <menu+0xc5c>)
 8001ae8:	2101      	movs	r1, #1
 8001aea:	2002      	movs	r0, #2
 8001aec:	f007 ffb6 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001af0:	2102      	movs	r1, #2
 8001af2:	483d      	ldr	r0, [pc, #244]	@ (8001be8 <menu+0xc60>)
 8001af4:	f009 faa4 	bl	800b040 <HAL_GPIO_ReadPin>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d115      	bne.n	8001b2a <menu+0xba2>
 8001afe:	4b3b      	ldr	r3, [pc, #236]	@ (8001bec <menu+0xc64>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	f083 0301 	eor.w	r3, r3, #1
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d00e      	beq.n	8001b2a <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 8001b0c:	4b3f      	ldr	r3, [pc, #252]	@ (8001c0c <menu+0xc84>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	4b3d      	ldr	r3, [pc, #244]	@ (8001c0c <menu+0xc84>)
 8001b16:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001b18:	4b3c      	ldr	r3, [pc, #240]	@ (8001c0c <menu+0xc84>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d902      	bls.n	8001b26 <menu+0xb9e>
				basincSalteri = 0;
 8001b20:	4b3a      	ldr	r3, [pc, #232]	@ (8001c0c <menu+0xc84>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b26:	f001 ff7b 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b2a:	2104      	movs	r1, #4
 8001b2c:	482e      	ldr	r0, [pc, #184]	@ (8001be8 <menu+0xc60>)
 8001b2e:	f009 fa87 	bl	800b040 <HAL_GPIO_ReadPin>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d115      	bne.n	8001b64 <menu+0xbdc>
 8001b38:	4b2c      	ldr	r3, [pc, #176]	@ (8001bec <menu+0xc64>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	f083 0301 	eor.w	r3, r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00e      	beq.n	8001b64 <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 8001b46:	4b31      	ldr	r3, [pc, #196]	@ (8001c0c <menu+0xc84>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c0c <menu+0xc84>)
 8001b50:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001b52:	4b2e      	ldr	r3, [pc, #184]	@ (8001c0c <menu+0xc84>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <menu+0xbd8>
		   		basincSalteri = 1;
 8001b5a:	4b2c      	ldr	r3, [pc, #176]	@ (8001c0c <menu+0xc84>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001b60:	f001 ff5e 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b64:	2108      	movs	r1, #8
 8001b66:	4820      	ldr	r0, [pc, #128]	@ (8001be8 <menu+0xc60>)
 8001b68:	f009 fa6a 	bl	800b040 <HAL_GPIO_ReadPin>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d10d      	bne.n	8001b8e <menu+0xc06>
 8001b72:	4b1e      	ldr	r3, [pc, #120]	@ (8001bec <menu+0xc64>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	f083 0301 	eor.w	r3, r3, #1
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d006      	beq.n	8001b8e <menu+0xc06>
			eepromData[6] = basincSalteri;
 8001b80:	4b22      	ldr	r3, [pc, #136]	@ (8001c0c <menu+0xc84>)
 8001b82:	781a      	ldrb	r2, [r3, #0]
 8001b84:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf4 <menu+0xc6c>)
 8001b86:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8001b88:	4b1d      	ldr	r3, [pc, #116]	@ (8001c00 <menu+0xc78>)
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c04 <menu+0xc7c>)
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b07      	cmp	r3, #7
 8001b94:	f040 80a9 	bne.w	8001cea <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 8001b98:	4a1e      	ldr	r2, [pc, #120]	@ (8001c14 <menu+0xc8c>)
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f007 ff5d 	bl	8009a5c <lcd_print>

		if(kapiSecimleri == 0) {
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c18 <menu+0xc90>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d105      	bne.n	8001bb6 <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 8001baa:	4a19      	ldr	r2, [pc, #100]	@ (8001c10 <menu+0xc88>)
 8001bac:	2101      	movs	r1, #1
 8001bae:	2002      	movs	r0, #2
 8001bb0:	f007 ff54 	bl	8009a5c <lcd_print>
 8001bb4:	e03f      	b.n	8001c36 <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 8001bb6:	4b18      	ldr	r3, [pc, #96]	@ (8001c18 <menu+0xc90>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d105      	bne.n	8001bca <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 8001bbe:	4a17      	ldr	r2, [pc, #92]	@ (8001c1c <menu+0xc94>)
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	2002      	movs	r0, #2
 8001bc4:	f007 ff4a 	bl	8009a5c <lcd_print>
 8001bc8:	e035      	b.n	8001c36 <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 8001bca:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <menu+0xc90>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d128      	bne.n	8001c24 <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 8001bd2:	4a13      	ldr	r2, [pc, #76]	@ (8001c20 <menu+0xc98>)
 8001bd4:	2101      	movs	r1, #1
 8001bd6:	2002      	movs	r0, #2
 8001bd8:	f007 ff40 	bl	8009a5c <lcd_print>
 8001bdc:	e02b      	b.n	8001c36 <menu+0xcae>
 8001bde:	bf00      	nop
 8001be0:	20001072 	.word	0x20001072
 8001be4:	20001264 	.word	0x20001264
 8001be8:	40010800 	.word	0x40010800
 8001bec:	2000109b 	.word	0x2000109b
 8001bf0:	2000106d 	.word	0x2000106d
 8001bf4:	20000f9c 	.word	0x20000f9c
 8001bf8:	20001079 	.word	0x20001079
 8001bfc:	2000107f 	.word	0x2000107f
 8001c00:	20001098 	.word	0x20001098
 8001c04:	2000106c 	.word	0x2000106c
 8001c08:	200012a0 	.word	0x200012a0
 8001c0c:	20001073 	.word	0x20001073
 8001c10:	20001250 	.word	0x20001250
 8001c14:	200012b4 	.word	0x200012b4
 8001c18:	20001074 	.word	0x20001074
 8001c1c:	200012c8 	.word	0x200012c8
 8001c20:	200012dc 	.word	0x200012dc
		} else if(kapiSecimleri == 3) {
 8001c24:	4b76      	ldr	r3, [pc, #472]	@ (8001e00 <menu+0xe78>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d104      	bne.n	8001c36 <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 8001c2c:	4a75      	ldr	r2, [pc, #468]	@ (8001e04 <menu+0xe7c>)
 8001c2e:	2101      	movs	r1, #1
 8001c30:	2002      	movs	r0, #2
 8001c32:	f007 ff13 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c36:	2102      	movs	r1, #2
 8001c38:	4873      	ldr	r0, [pc, #460]	@ (8001e08 <menu+0xe80>)
 8001c3a:	f009 fa01 	bl	800b040 <HAL_GPIO_ReadPin>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d115      	bne.n	8001c70 <menu+0xce8>
 8001c44:	4b71      	ldr	r3, [pc, #452]	@ (8001e0c <menu+0xe84>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	f083 0301 	eor.w	r3, r3, #1
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00e      	beq.n	8001c70 <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 8001c52:	4b6b      	ldr	r3, [pc, #428]	@ (8001e00 <menu+0xe78>)
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	3301      	adds	r3, #1
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4b69      	ldr	r3, [pc, #420]	@ (8001e00 <menu+0xe78>)
 8001c5c:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8001c5e:	4b68      	ldr	r3, [pc, #416]	@ (8001e00 <menu+0xe78>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d902      	bls.n	8001c6c <menu+0xce4>
				kapiSecimleri = 0;
 8001c66:	4b66      	ldr	r3, [pc, #408]	@ (8001e00 <menu+0xe78>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c6c:	f001 fed8 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c70:	2104      	movs	r1, #4
 8001c72:	4865      	ldr	r0, [pc, #404]	@ (8001e08 <menu+0xe80>)
 8001c74:	f009 f9e4 	bl	800b040 <HAL_GPIO_ReadPin>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d115      	bne.n	8001caa <menu+0xd22>
 8001c7e:	4b63      	ldr	r3, [pc, #396]	@ (8001e0c <menu+0xe84>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	f083 0301 	eor.w	r3, r3, #1
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00e      	beq.n	8001caa <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 8001c8c:	4b5c      	ldr	r3, [pc, #368]	@ (8001e00 <menu+0xe78>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b2da      	uxtb	r2, r3
 8001c94:	4b5a      	ldr	r3, [pc, #360]	@ (8001e00 <menu+0xe78>)
 8001c96:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8001c98:	4b59      	ldr	r3, [pc, #356]	@ (8001e00 <menu+0xe78>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d902      	bls.n	8001ca6 <menu+0xd1e>
		   		kapiSecimleri = 3;
 8001ca0:	4b57      	ldr	r3, [pc, #348]	@ (8001e00 <menu+0xe78>)
 8001ca2:	2203      	movs	r2, #3
 8001ca4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001ca6:	f001 febb 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001caa:	2108      	movs	r1, #8
 8001cac:	4856      	ldr	r0, [pc, #344]	@ (8001e08 <menu+0xe80>)
 8001cae:	f009 f9c7 	bl	800b040 <HAL_GPIO_ReadPin>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d118      	bne.n	8001cea <menu+0xd62>
 8001cb8:	4b54      	ldr	r3, [pc, #336]	@ (8001e0c <menu+0xe84>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	f083 0301 	eor.w	r3, r3, #1
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d011      	beq.n	8001cea <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 8001cc6:	4b4e      	ldr	r3, [pc, #312]	@ (8001e00 <menu+0xe78>)
 8001cc8:	781a      	ldrb	r2, [r3, #0]
 8001cca:	4b51      	ldr	r3, [pc, #324]	@ (8001e10 <menu+0xe88>)
 8001ccc:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8001cce:	4b4c      	ldr	r3, [pc, #304]	@ (8001e00 <menu+0xe78>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d006      	beq.n	8001ce4 <menu+0xd5c>
				altLimit = 1;
 8001cd6:	4b4f      	ldr	r3, [pc, #316]	@ (8001e14 <menu+0xe8c>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001cdc:	4b4d      	ldr	r3, [pc, #308]	@ (8001e14 <menu+0xe8c>)
 8001cde:	781a      	ldrb	r2, [r3, #0]
 8001ce0:	4b4b      	ldr	r3, [pc, #300]	@ (8001e10 <menu+0xe88>)
 8001ce2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001ce4:	4b4c      	ldr	r3, [pc, #304]	@ (8001e18 <menu+0xe90>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8001cea:	4b4c      	ldr	r3, [pc, #304]	@ (8001e1c <menu+0xe94>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b08      	cmp	r3, #8
 8001cf0:	d167      	bne.n	8001dc2 <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 8001cf2:	4a4b      	ldr	r2, [pc, #300]	@ (8001e20 <menu+0xe98>)
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f007 feb0 	bl	8009a5c <lcd_print>

		if(kapiAcTipi == 0) {
 8001cfc:	4b49      	ldr	r3, [pc, #292]	@ (8001e24 <menu+0xe9c>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d105      	bne.n	8001d10 <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 8001d04:	4a48      	ldr	r2, [pc, #288]	@ (8001e28 <menu+0xea0>)
 8001d06:	2101      	movs	r1, #1
 8001d08:	2002      	movs	r0, #2
 8001d0a:	f007 fea7 	bl	8009a5c <lcd_print>
 8001d0e:	e008      	b.n	8001d22 <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 8001d10:	4b44      	ldr	r3, [pc, #272]	@ (8001e24 <menu+0xe9c>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d104      	bne.n	8001d22 <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 8001d18:	4a44      	ldr	r2, [pc, #272]	@ (8001e2c <menu+0xea4>)
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	2002      	movs	r0, #2
 8001d1e:	f007 fe9d 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d22:	2102      	movs	r1, #2
 8001d24:	4838      	ldr	r0, [pc, #224]	@ (8001e08 <menu+0xe80>)
 8001d26:	f009 f98b 	bl	800b040 <HAL_GPIO_ReadPin>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d115      	bne.n	8001d5c <menu+0xdd4>
 8001d30:	4b36      	ldr	r3, [pc, #216]	@ (8001e0c <menu+0xe84>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	f083 0301 	eor.w	r3, r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00e      	beq.n	8001d5c <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 8001d3e:	4b39      	ldr	r3, [pc, #228]	@ (8001e24 <menu+0xe9c>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	3301      	adds	r3, #1
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4b37      	ldr	r3, [pc, #220]	@ (8001e24 <menu+0xe9c>)
 8001d48:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8001d4a:	4b36      	ldr	r3, [pc, #216]	@ (8001e24 <menu+0xe9c>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d902      	bls.n	8001d58 <menu+0xdd0>
				kapiAcTipi = 0;
 8001d52:	4b34      	ldr	r3, [pc, #208]	@ (8001e24 <menu+0xe9c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d58:	f001 fe62 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d5c:	2104      	movs	r1, #4
 8001d5e:	482a      	ldr	r0, [pc, #168]	@ (8001e08 <menu+0xe80>)
 8001d60:	f009 f96e 	bl	800b040 <HAL_GPIO_ReadPin>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d115      	bne.n	8001d96 <menu+0xe0e>
 8001d6a:	4b28      	ldr	r3, [pc, #160]	@ (8001e0c <menu+0xe84>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	f083 0301 	eor.w	r3, r3, #1
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00e      	beq.n	8001d96 <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 8001d78:	4b2a      	ldr	r3, [pc, #168]	@ (8001e24 <menu+0xe9c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	4b28      	ldr	r3, [pc, #160]	@ (8001e24 <menu+0xe9c>)
 8001d82:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8001d84:	4b27      	ldr	r3, [pc, #156]	@ (8001e24 <menu+0xe9c>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d002      	beq.n	8001d92 <menu+0xe0a>
		   		kapiAcTipi = 1;
 8001d8c:	4b25      	ldr	r3, [pc, #148]	@ (8001e24 <menu+0xe9c>)
 8001d8e:	2201      	movs	r2, #1
 8001d90:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d92:	f001 fe45 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d96:	2108      	movs	r1, #8
 8001d98:	481b      	ldr	r0, [pc, #108]	@ (8001e08 <menu+0xe80>)
 8001d9a:	f009 f951 	bl	800b040 <HAL_GPIO_ReadPin>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d10e      	bne.n	8001dc2 <menu+0xe3a>
 8001da4:	4b19      	ldr	r3, [pc, #100]	@ (8001e0c <menu+0xe84>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	f083 0301 	eor.w	r3, r3, #1
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d007      	beq.n	8001dc2 <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 8001db2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e24 <menu+0xe9c>)
 8001db4:	781a      	ldrb	r2, [r3, #0]
 8001db6:	4b16      	ldr	r3, [pc, #88]	@ (8001e10 <menu+0xe88>)
 8001db8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 8001dbc:	4b16      	ldr	r3, [pc, #88]	@ (8001e18 <menu+0xe90>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8001dc2:	4b16      	ldr	r3, [pc, #88]	@ (8001e1c <menu+0xe94>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	2b09      	cmp	r3, #9
 8001dc8:	f040 8092 	bne.w	8001ef0 <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 8001dcc:	4a18      	ldr	r2, [pc, #96]	@ (8001e30 <menu+0xea8>)
 8001dce:	2101      	movs	r1, #1
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	f007 fe43 	bl	8009a5c <lcd_print>

		if(kapi1Tip == 0) {
 8001dd6:	4b17      	ldr	r3, [pc, #92]	@ (8001e34 <menu+0xeac>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d105      	bne.n	8001dea <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 8001dde:	4a16      	ldr	r2, [pc, #88]	@ (8001e38 <menu+0xeb0>)
 8001de0:	2101      	movs	r1, #1
 8001de2:	2002      	movs	r0, #2
 8001de4:	f007 fe3a 	bl	8009a5c <lcd_print>
 8001de8:	e033      	b.n	8001e52 <menu+0xeca>
		} else if(kapi1Tip == 1) {
 8001dea:	4b12      	ldr	r3, [pc, #72]	@ (8001e34 <menu+0xeac>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d126      	bne.n	8001e40 <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 8001df2:	4a12      	ldr	r2, [pc, #72]	@ (8001e3c <menu+0xeb4>)
 8001df4:	2101      	movs	r1, #1
 8001df6:	2002      	movs	r0, #2
 8001df8:	f007 fe30 	bl	8009a5c <lcd_print>
 8001dfc:	e029      	b.n	8001e52 <menu+0xeca>
 8001dfe:	bf00      	nop
 8001e00:	20001074 	.word	0x20001074
 8001e04:	200012f0 	.word	0x200012f0
 8001e08:	40010800 	.word	0x40010800
 8001e0c:	2000109b 	.word	0x2000109b
 8001e10:	20000f9c 	.word	0x20000f9c
 8001e14:	20001072 	.word	0x20001072
 8001e18:	20001098 	.word	0x20001098
 8001e1c:	2000106c 	.word	0x2000106c
 8001e20:	20001304 	.word	0x20001304
 8001e24:	20001078 	.word	0x20001078
 8001e28:	20001318 	.word	0x20001318
 8001e2c:	2000132c 	.word	0x2000132c
 8001e30:	20001340 	.word	0x20001340
 8001e34:	20001075 	.word	0x20001075
 8001e38:	20000100 	.word	0x20000100
 8001e3c:	20001354 	.word	0x20001354
		} else if(kapi1Tip == 2) {
 8001e40:	4b73      	ldr	r3, [pc, #460]	@ (8002010 <menu+0x1088>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d104      	bne.n	8001e52 <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 8001e48:	4a72      	ldr	r2, [pc, #456]	@ (8002014 <menu+0x108c>)
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	2002      	movs	r0, #2
 8001e4e:	f007 fe05 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e52:	2102      	movs	r1, #2
 8001e54:	4870      	ldr	r0, [pc, #448]	@ (8002018 <menu+0x1090>)
 8001e56:	f009 f8f3 	bl	800b040 <HAL_GPIO_ReadPin>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d115      	bne.n	8001e8c <menu+0xf04>
 8001e60:	4b6e      	ldr	r3, [pc, #440]	@ (800201c <menu+0x1094>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	f083 0301 	eor.w	r3, r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00e      	beq.n	8001e8c <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 8001e6e:	4b68      	ldr	r3, [pc, #416]	@ (8002010 <menu+0x1088>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	3301      	adds	r3, #1
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4b66      	ldr	r3, [pc, #408]	@ (8002010 <menu+0x1088>)
 8001e78:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8001e7a:	4b65      	ldr	r3, [pc, #404]	@ (8002010 <menu+0x1088>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d902      	bls.n	8001e88 <menu+0xf00>
				kapi1Tip = 0;
 8001e82:	4b63      	ldr	r3, [pc, #396]	@ (8002010 <menu+0x1088>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e88:	f001 fdca 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e8c:	2104      	movs	r1, #4
 8001e8e:	4862      	ldr	r0, [pc, #392]	@ (8002018 <menu+0x1090>)
 8001e90:	f009 f8d6 	bl	800b040 <HAL_GPIO_ReadPin>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d115      	bne.n	8001ec6 <menu+0xf3e>
 8001e9a:	4b60      	ldr	r3, [pc, #384]	@ (800201c <menu+0x1094>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	f083 0301 	eor.w	r3, r3, #1
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00e      	beq.n	8001ec6 <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 8001ea8:	4b59      	ldr	r3, [pc, #356]	@ (8002010 <menu+0x1088>)
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	4b57      	ldr	r3, [pc, #348]	@ (8002010 <menu+0x1088>)
 8001eb2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8001eb4:	4b56      	ldr	r3, [pc, #344]	@ (8002010 <menu+0x1088>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d902      	bls.n	8001ec2 <menu+0xf3a>
		   		kapi1Tip = 2;
 8001ebc:	4b54      	ldr	r3, [pc, #336]	@ (8002010 <menu+0x1088>)
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001ec2:	f001 fdad 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ec6:	2108      	movs	r1, #8
 8001ec8:	4853      	ldr	r0, [pc, #332]	@ (8002018 <menu+0x1090>)
 8001eca:	f009 f8b9 	bl	800b040 <HAL_GPIO_ReadPin>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d10d      	bne.n	8001ef0 <menu+0xf68>
 8001ed4:	4b51      	ldr	r3, [pc, #324]	@ (800201c <menu+0x1094>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	f083 0301 	eor.w	r3, r3, #1
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d006      	beq.n	8001ef0 <menu+0xf68>
			eepromData[8] = kapi1Tip;
 8001ee2:	4b4b      	ldr	r3, [pc, #300]	@ (8002010 <menu+0x1088>)
 8001ee4:	781a      	ldrb	r2, [r3, #0]
 8001ee6:	4b4e      	ldr	r3, [pc, #312]	@ (8002020 <menu+0x1098>)
 8001ee8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8001eea:	4b4e      	ldr	r3, [pc, #312]	@ (8002024 <menu+0x109c>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8001ef0:	4b4d      	ldr	r3, [pc, #308]	@ (8002028 <menu+0x10a0>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b0a      	cmp	r3, #10
 8001ef6:	d16c      	bne.n	8001fd2 <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 8001ef8:	4a4c      	ldr	r2, [pc, #304]	@ (800202c <menu+0x10a4>)
 8001efa:	2101      	movs	r1, #1
 8001efc:	2001      	movs	r0, #1
 8001efe:	f007 fdad 	bl	8009a5c <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8001f02:	4a4b      	ldr	r2, [pc, #300]	@ (8002030 <menu+0x10a8>)
 8001f04:	2101      	movs	r1, #1
 8001f06:	2002      	movs	r0, #2
 8001f08:	f007 fda8 	bl	8009a5c <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 8001f0c:	4b49      	ldr	r3, [pc, #292]	@ (8002034 <menu+0x10ac>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	220a      	movs	r2, #10
 8001f12:	4949      	ldr	r1, [pc, #292]	@ (8002038 <menu+0x10b0>)
 8001f14:	4618      	mov	r0, r3
 8001f16:	f00c f889 	bl	800e02c <itoa>
		lcd_print(2,16,snum);
 8001f1a:	4a47      	ldr	r2, [pc, #284]	@ (8002038 <menu+0x10b0>)
 8001f1c:	2110      	movs	r1, #16
 8001f1e:	2002      	movs	r0, #2
 8001f20:	f007 fd9c 	bl	8009a5c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001f24:	2102      	movs	r1, #2
 8001f26:	483c      	ldr	r0, [pc, #240]	@ (8002018 <menu+0x1090>)
 8001f28:	f009 f88a 	bl	800b040 <HAL_GPIO_ReadPin>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d119      	bne.n	8001f66 <menu+0xfde>
 8001f32:	4b3a      	ldr	r3, [pc, #232]	@ (800201c <menu+0x1094>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	f083 0301 	eor.w	r3, r3, #1
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d012      	beq.n	8001f66 <menu+0xfde>
 8001f40:	4b33      	ldr	r3, [pc, #204]	@ (8002010 <menu+0x1088>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d10e      	bne.n	8001f66 <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 8001f48:	4b3a      	ldr	r3, [pc, #232]	@ (8002034 <menu+0x10ac>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	4b38      	ldr	r3, [pc, #224]	@ (8002034 <menu+0x10ac>)
 8001f52:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8001f54:	4b37      	ldr	r3, [pc, #220]	@ (8002034 <menu+0x10ac>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d902      	bls.n	8001f62 <menu+0xfda>
				kapi1AcSure = 0;
 8001f5c:	4b35      	ldr	r3, [pc, #212]	@ (8002034 <menu+0x10ac>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f62:	f001 fd5d 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001f66:	2104      	movs	r1, #4
 8001f68:	482b      	ldr	r0, [pc, #172]	@ (8002018 <menu+0x1090>)
 8001f6a:	f009 f869 	bl	800b040 <HAL_GPIO_ReadPin>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d119      	bne.n	8001fa8 <menu+0x1020>
 8001f74:	4b29      	ldr	r3, [pc, #164]	@ (800201c <menu+0x1094>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	f083 0301 	eor.w	r3, r3, #1
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d012      	beq.n	8001fa8 <menu+0x1020>
 8001f82:	4b23      	ldr	r3, [pc, #140]	@ (8002010 <menu+0x1088>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d10e      	bne.n	8001fa8 <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 8001f8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002034 <menu+0x10ac>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	4b28      	ldr	r3, [pc, #160]	@ (8002034 <menu+0x10ac>)
 8001f94:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8001f96:	4b27      	ldr	r3, [pc, #156]	@ (8002034 <menu+0x10ac>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b06      	cmp	r3, #6
 8001f9c:	d902      	bls.n	8001fa4 <menu+0x101c>
		   		kapi1AcSure = 5;
 8001f9e:	4b25      	ldr	r3, [pc, #148]	@ (8002034 <menu+0x10ac>)
 8001fa0:	2205      	movs	r2, #5
 8001fa2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001fa4:	f001 fd3c 	bl	8003a20 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fa8:	2108      	movs	r1, #8
 8001faa:	481b      	ldr	r0, [pc, #108]	@ (8002018 <menu+0x1090>)
 8001fac:	f009 f848 	bl	800b040 <HAL_GPIO_ReadPin>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d10d      	bne.n	8001fd2 <menu+0x104a>
 8001fb6:	4b19      	ldr	r3, [pc, #100]	@ (800201c <menu+0x1094>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	f083 0301 	eor.w	r3, r3, #1
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d006      	beq.n	8001fd2 <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8002034 <menu+0x10ac>)
 8001fc6:	781a      	ldrb	r2, [r3, #0]
 8001fc8:	4b15      	ldr	r3, [pc, #84]	@ (8002020 <menu+0x1098>)
 8001fca:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8001fcc:	4b15      	ldr	r3, [pc, #84]	@ (8002024 <menu+0x109c>)
 8001fce:	2201      	movs	r2, #1
 8001fd0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8001fd2:	4b15      	ldr	r3, [pc, #84]	@ (8002028 <menu+0x10a0>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b0b      	cmp	r3, #11
 8001fd8:	f040 8090 	bne.w	80020fc <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 8001fdc:	4a17      	ldr	r2, [pc, #92]	@ (800203c <menu+0x10b4>)
 8001fde:	2101      	movs	r1, #1
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	f007 fd3b 	bl	8009a5c <lcd_print>

		if(kapi2Tip == 0) {
 8001fe6:	4b16      	ldr	r3, [pc, #88]	@ (8002040 <menu+0x10b8>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d105      	bne.n	8001ffa <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 8001fee:	4a15      	ldr	r2, [pc, #84]	@ (8002044 <menu+0x10bc>)
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	2002      	movs	r0, #2
 8001ff4:	f007 fd32 	bl	8009a5c <lcd_print>
 8001ff8:	e031      	b.n	800205e <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 8001ffa:	4b11      	ldr	r3, [pc, #68]	@ (8002040 <menu+0x10b8>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d124      	bne.n	800204c <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 8002002:	4a11      	ldr	r2, [pc, #68]	@ (8002048 <menu+0x10c0>)
 8002004:	2101      	movs	r1, #1
 8002006:	2002      	movs	r0, #2
 8002008:	f007 fd28 	bl	8009a5c <lcd_print>
 800200c:	e027      	b.n	800205e <menu+0x10d6>
 800200e:	bf00      	nop
 8002010:	20001075 	.word	0x20001075
 8002014:	20000114 	.word	0x20000114
 8002018:	40010800 	.word	0x40010800
 800201c:	2000109b 	.word	0x2000109b
 8002020:	20000f9c 	.word	0x20000f9c
 8002024:	20001098 	.word	0x20001098
 8002028:	2000106c 	.word	0x2000106c
 800202c:	20001368 	.word	0x20001368
 8002030:	2000137c 	.word	0x2000137c
 8002034:	20001085 	.word	0x20001085
 8002038:	2000100c 	.word	0x2000100c
 800203c:	20001390 	.word	0x20001390
 8002040:	20001076 	.word	0x20001076
 8002044:	20000100 	.word	0x20000100
 8002048:	20001354 	.word	0x20001354
		} else if(kapi2Tip == 2) {
 800204c:	4b73      	ldr	r3, [pc, #460]	@ (800221c <menu+0x1294>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d104      	bne.n	800205e <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 8002054:	4a72      	ldr	r2, [pc, #456]	@ (8002220 <menu+0x1298>)
 8002056:	2101      	movs	r1, #1
 8002058:	2002      	movs	r0, #2
 800205a:	f007 fcff 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800205e:	2102      	movs	r1, #2
 8002060:	4870      	ldr	r0, [pc, #448]	@ (8002224 <menu+0x129c>)
 8002062:	f008 ffed 	bl	800b040 <HAL_GPIO_ReadPin>
 8002066:	4603      	mov	r3, r0
 8002068:	2b01      	cmp	r3, #1
 800206a:	d115      	bne.n	8002098 <menu+0x1110>
 800206c:	4b6e      	ldr	r3, [pc, #440]	@ (8002228 <menu+0x12a0>)
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	f083 0301 	eor.w	r3, r3, #1
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00e      	beq.n	8002098 <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 800207a:	4b68      	ldr	r3, [pc, #416]	@ (800221c <menu+0x1294>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	3301      	adds	r3, #1
 8002080:	b2da      	uxtb	r2, r3
 8002082:	4b66      	ldr	r3, [pc, #408]	@ (800221c <menu+0x1294>)
 8002084:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002086:	4b65      	ldr	r3, [pc, #404]	@ (800221c <menu+0x1294>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b02      	cmp	r3, #2
 800208c:	d902      	bls.n	8002094 <menu+0x110c>
				kapi2Tip = 0;
 800208e:	4b63      	ldr	r3, [pc, #396]	@ (800221c <menu+0x1294>)
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002094:	f001 fcc4 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002098:	2104      	movs	r1, #4
 800209a:	4862      	ldr	r0, [pc, #392]	@ (8002224 <menu+0x129c>)
 800209c:	f008 ffd0 	bl	800b040 <HAL_GPIO_ReadPin>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d115      	bne.n	80020d2 <menu+0x114a>
 80020a6:	4b60      	ldr	r3, [pc, #384]	@ (8002228 <menu+0x12a0>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	f083 0301 	eor.w	r3, r3, #1
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00e      	beq.n	80020d2 <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 80020b4:	4b59      	ldr	r3, [pc, #356]	@ (800221c <menu+0x1294>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b2da      	uxtb	r2, r3
 80020bc:	4b57      	ldr	r3, [pc, #348]	@ (800221c <menu+0x1294>)
 80020be:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 80020c0:	4b56      	ldr	r3, [pc, #344]	@ (800221c <menu+0x1294>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d902      	bls.n	80020ce <menu+0x1146>
		   		kapi2Tip = 2;
 80020c8:	4b54      	ldr	r3, [pc, #336]	@ (800221c <menu+0x1294>)
 80020ca:	2202      	movs	r2, #2
 80020cc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020ce:	f001 fca7 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020d2:	2108      	movs	r1, #8
 80020d4:	4853      	ldr	r0, [pc, #332]	@ (8002224 <menu+0x129c>)
 80020d6:	f008 ffb3 	bl	800b040 <HAL_GPIO_ReadPin>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d10d      	bne.n	80020fc <menu+0x1174>
 80020e0:	4b51      	ldr	r3, [pc, #324]	@ (8002228 <menu+0x12a0>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	f083 0301 	eor.w	r3, r3, #1
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d006      	beq.n	80020fc <menu+0x1174>
			eepromData[10] = kapi2Tip;
 80020ee:	4b4b      	ldr	r3, [pc, #300]	@ (800221c <menu+0x1294>)
 80020f0:	781a      	ldrb	r2, [r3, #0]
 80020f2:	4b4e      	ldr	r3, [pc, #312]	@ (800222c <menu+0x12a4>)
 80020f4:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80020f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002230 <menu+0x12a8>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80020fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002234 <menu+0x12ac>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b0c      	cmp	r3, #12
 8002102:	d16c      	bne.n	80021de <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 8002104:	4a4c      	ldr	r2, [pc, #304]	@ (8002238 <menu+0x12b0>)
 8002106:	2101      	movs	r1, #1
 8002108:	2001      	movs	r0, #1
 800210a:	f007 fca7 	bl	8009a5c <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 800210e:	4a4b      	ldr	r2, [pc, #300]	@ (800223c <menu+0x12b4>)
 8002110:	2101      	movs	r1, #1
 8002112:	2002      	movs	r0, #2
 8002114:	f007 fca2 	bl	8009a5c <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 8002118:	4b49      	ldr	r3, [pc, #292]	@ (8002240 <menu+0x12b8>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	220a      	movs	r2, #10
 800211e:	4949      	ldr	r1, [pc, #292]	@ (8002244 <menu+0x12bc>)
 8002120:	4618      	mov	r0, r3
 8002122:	f00b ff83 	bl	800e02c <itoa>
		lcd_print(2,16,snum);
 8002126:	4a47      	ldr	r2, [pc, #284]	@ (8002244 <menu+0x12bc>)
 8002128:	2110      	movs	r1, #16
 800212a:	2002      	movs	r0, #2
 800212c:	f007 fc96 	bl	8009a5c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002130:	2102      	movs	r1, #2
 8002132:	483c      	ldr	r0, [pc, #240]	@ (8002224 <menu+0x129c>)
 8002134:	f008 ff84 	bl	800b040 <HAL_GPIO_ReadPin>
 8002138:	4603      	mov	r3, r0
 800213a:	2b01      	cmp	r3, #1
 800213c:	d119      	bne.n	8002172 <menu+0x11ea>
 800213e:	4b3a      	ldr	r3, [pc, #232]	@ (8002228 <menu+0x12a0>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	f083 0301 	eor.w	r3, r3, #1
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d012      	beq.n	8002172 <menu+0x11ea>
 800214c:	4b33      	ldr	r3, [pc, #204]	@ (800221c <menu+0x1294>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10e      	bne.n	8002172 <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 8002154:	4b3a      	ldr	r3, [pc, #232]	@ (8002240 <menu+0x12b8>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	3301      	adds	r3, #1
 800215a:	b2da      	uxtb	r2, r3
 800215c:	4b38      	ldr	r3, [pc, #224]	@ (8002240 <menu+0x12b8>)
 800215e:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002160:	4b37      	ldr	r3, [pc, #220]	@ (8002240 <menu+0x12b8>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b05      	cmp	r3, #5
 8002166:	d902      	bls.n	800216e <menu+0x11e6>
				kapi2AcSure = 0;
 8002168:	4b35      	ldr	r3, [pc, #212]	@ (8002240 <menu+0x12b8>)
 800216a:	2200      	movs	r2, #0
 800216c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800216e:	f001 fc57 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002172:	2104      	movs	r1, #4
 8002174:	482b      	ldr	r0, [pc, #172]	@ (8002224 <menu+0x129c>)
 8002176:	f008 ff63 	bl	800b040 <HAL_GPIO_ReadPin>
 800217a:	4603      	mov	r3, r0
 800217c:	2b01      	cmp	r3, #1
 800217e:	d119      	bne.n	80021b4 <menu+0x122c>
 8002180:	4b29      	ldr	r3, [pc, #164]	@ (8002228 <menu+0x12a0>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	f083 0301 	eor.w	r3, r3, #1
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d012      	beq.n	80021b4 <menu+0x122c>
 800218e:	4b23      	ldr	r3, [pc, #140]	@ (800221c <menu+0x1294>)
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10e      	bne.n	80021b4 <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 8002196:	4b2a      	ldr	r3, [pc, #168]	@ (8002240 <menu+0x12b8>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	3b01      	subs	r3, #1
 800219c:	b2da      	uxtb	r2, r3
 800219e:	4b28      	ldr	r3, [pc, #160]	@ (8002240 <menu+0x12b8>)
 80021a0:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 80021a2:	4b27      	ldr	r3, [pc, #156]	@ (8002240 <menu+0x12b8>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	2b06      	cmp	r3, #6
 80021a8:	d902      	bls.n	80021b0 <menu+0x1228>
		   		kapi2AcSure = 5;
 80021aa:	4b25      	ldr	r3, [pc, #148]	@ (8002240 <menu+0x12b8>)
 80021ac:	2205      	movs	r2, #5
 80021ae:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021b0:	f001 fc36 	bl	8003a20 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021b4:	2108      	movs	r1, #8
 80021b6:	481b      	ldr	r0, [pc, #108]	@ (8002224 <menu+0x129c>)
 80021b8:	f008 ff42 	bl	800b040 <HAL_GPIO_ReadPin>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d10d      	bne.n	80021de <menu+0x1256>
 80021c2:	4b19      	ldr	r3, [pc, #100]	@ (8002228 <menu+0x12a0>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	f083 0301 	eor.w	r3, r3, #1
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d006      	beq.n	80021de <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 80021d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002240 <menu+0x12b8>)
 80021d2:	781a      	ldrb	r2, [r3, #0]
 80021d4:	4b15      	ldr	r3, [pc, #84]	@ (800222c <menu+0x12a4>)
 80021d6:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80021d8:	4b15      	ldr	r3, [pc, #84]	@ (8002230 <menu+0x12a8>)
 80021da:	2201      	movs	r2, #1
 80021dc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80021de:	4b15      	ldr	r3, [pc, #84]	@ (8002234 <menu+0x12ac>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b0d      	cmp	r3, #13
 80021e4:	f040 8090 	bne.w	8002308 <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 80021e8:	4a17      	ldr	r2, [pc, #92]	@ (8002248 <menu+0x12c0>)
 80021ea:	2101      	movs	r1, #1
 80021ec:	2001      	movs	r0, #1
 80021ee:	f007 fc35 	bl	8009a5c <lcd_print>

		if(kapitablaTip == 0) {
 80021f2:	4b16      	ldr	r3, [pc, #88]	@ (800224c <menu+0x12c4>)
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d105      	bne.n	8002206 <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 80021fa:	4a15      	ldr	r2, [pc, #84]	@ (8002250 <menu+0x12c8>)
 80021fc:	2101      	movs	r1, #1
 80021fe:	2002      	movs	r0, #2
 8002200:	f007 fc2c 	bl	8009a5c <lcd_print>
 8002204:	e031      	b.n	800226a <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 8002206:	4b11      	ldr	r3, [pc, #68]	@ (800224c <menu+0x12c4>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d124      	bne.n	8002258 <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 800220e:	4a11      	ldr	r2, [pc, #68]	@ (8002254 <menu+0x12cc>)
 8002210:	2101      	movs	r1, #1
 8002212:	2002      	movs	r0, #2
 8002214:	f007 fc22 	bl	8009a5c <lcd_print>
 8002218:	e027      	b.n	800226a <menu+0x12e2>
 800221a:	bf00      	nop
 800221c:	20001076 	.word	0x20001076
 8002220:	20000114 	.word	0x20000114
 8002224:	40010800 	.word	0x40010800
 8002228:	2000109b 	.word	0x2000109b
 800222c:	20000f9c 	.word	0x20000f9c
 8002230:	20001098 	.word	0x20001098
 8002234:	2000106c 	.word	0x2000106c
 8002238:	200013a4 	.word	0x200013a4
 800223c:	2000137c 	.word	0x2000137c
 8002240:	20001086 	.word	0x20001086
 8002244:	2000100c 	.word	0x2000100c
 8002248:	200013b8 	.word	0x200013b8
 800224c:	20001077 	.word	0x20001077
 8002250:	20000100 	.word	0x20000100
 8002254:	20001354 	.word	0x20001354
		} else if(kapitablaTip == 2) {
 8002258:	4b3f      	ldr	r3, [pc, #252]	@ (8002358 <menu+0x13d0>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d104      	bne.n	800226a <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 8002260:	4a3e      	ldr	r2, [pc, #248]	@ (800235c <menu+0x13d4>)
 8002262:	2101      	movs	r1, #1
 8002264:	2002      	movs	r0, #2
 8002266:	f007 fbf9 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800226a:	2102      	movs	r1, #2
 800226c:	483c      	ldr	r0, [pc, #240]	@ (8002360 <menu+0x13d8>)
 800226e:	f008 fee7 	bl	800b040 <HAL_GPIO_ReadPin>
 8002272:	4603      	mov	r3, r0
 8002274:	2b01      	cmp	r3, #1
 8002276:	d115      	bne.n	80022a4 <menu+0x131c>
 8002278:	4b3a      	ldr	r3, [pc, #232]	@ (8002364 <menu+0x13dc>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	f083 0301 	eor.w	r3, r3, #1
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00e      	beq.n	80022a4 <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 8002286:	4b34      	ldr	r3, [pc, #208]	@ (8002358 <menu+0x13d0>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	3301      	adds	r3, #1
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4b32      	ldr	r3, [pc, #200]	@ (8002358 <menu+0x13d0>)
 8002290:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002292:	4b31      	ldr	r3, [pc, #196]	@ (8002358 <menu+0x13d0>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b02      	cmp	r3, #2
 8002298:	d902      	bls.n	80022a0 <menu+0x1318>
				kapitablaTip = 0;
 800229a:	4b2f      	ldr	r3, [pc, #188]	@ (8002358 <menu+0x13d0>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022a0:	f001 fbbe 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80022a4:	2104      	movs	r1, #4
 80022a6:	482e      	ldr	r0, [pc, #184]	@ (8002360 <menu+0x13d8>)
 80022a8:	f008 feca 	bl	800b040 <HAL_GPIO_ReadPin>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d115      	bne.n	80022de <menu+0x1356>
 80022b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002364 <menu+0x13dc>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	f083 0301 	eor.w	r3, r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00e      	beq.n	80022de <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 80022c0:	4b25      	ldr	r3, [pc, #148]	@ (8002358 <menu+0x13d0>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	4b23      	ldr	r3, [pc, #140]	@ (8002358 <menu+0x13d0>)
 80022ca:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 80022cc:	4b22      	ldr	r3, [pc, #136]	@ (8002358 <menu+0x13d0>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d902      	bls.n	80022da <menu+0x1352>
		   		kapitablaTip = 2;
 80022d4:	4b20      	ldr	r3, [pc, #128]	@ (8002358 <menu+0x13d0>)
 80022d6:	2202      	movs	r2, #2
 80022d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022da:	f001 fba1 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022de:	2108      	movs	r1, #8
 80022e0:	481f      	ldr	r0, [pc, #124]	@ (8002360 <menu+0x13d8>)
 80022e2:	f008 fead 	bl	800b040 <HAL_GPIO_ReadPin>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d10d      	bne.n	8002308 <menu+0x1380>
 80022ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002364 <menu+0x13dc>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f083 0301 	eor.w	r3, r3, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d006      	beq.n	8002308 <menu+0x1380>
			eepromData[12] = kapitablaTip;
 80022fa:	4b17      	ldr	r3, [pc, #92]	@ (8002358 <menu+0x13d0>)
 80022fc:	781a      	ldrb	r2, [r3, #0]
 80022fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002368 <menu+0x13e0>)
 8002300:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002302:	4b1a      	ldr	r3, [pc, #104]	@ (800236c <menu+0x13e4>)
 8002304:	2201      	movs	r2, #1
 8002306:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002308:	4b19      	ldr	r3, [pc, #100]	@ (8002370 <menu+0x13e8>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b0e      	cmp	r3, #14
 800230e:	f040 80a3 	bne.w	8002458 <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 8002312:	4a18      	ldr	r2, [pc, #96]	@ (8002374 <menu+0x13ec>)
 8002314:	2101      	movs	r1, #1
 8002316:	2001      	movs	r0, #1
 8002318:	f007 fba0 	bl	8009a5c <lcd_print>

		if(kapiTablaAcKonum == 0) {
 800231c:	4b16      	ldr	r3, [pc, #88]	@ (8002378 <menu+0x13f0>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d105      	bne.n	8002330 <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 8002324:	4a15      	ldr	r2, [pc, #84]	@ (800237c <menu+0x13f4>)
 8002326:	2101      	movs	r1, #1
 8002328:	2002      	movs	r0, #2
 800232a:	f007 fb97 	bl	8009a5c <lcd_print>
 800232e:	e034      	b.n	800239a <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 8002330:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <menu+0x13f0>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d105      	bne.n	8002344 <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 8002338:	4a11      	ldr	r2, [pc, #68]	@ (8002380 <menu+0x13f8>)
 800233a:	2101      	movs	r1, #1
 800233c:	2002      	movs	r0, #2
 800233e:	f007 fb8d 	bl	8009a5c <lcd_print>
 8002342:	e02a      	b.n	800239a <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 8002344:	4b0c      	ldr	r3, [pc, #48]	@ (8002378 <menu+0x13f0>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d11d      	bne.n	8002388 <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 800234c:	4a0d      	ldr	r2, [pc, #52]	@ (8002384 <menu+0x13fc>)
 800234e:	2101      	movs	r1, #1
 8002350:	2002      	movs	r0, #2
 8002352:	f007 fb83 	bl	8009a5c <lcd_print>
 8002356:	e020      	b.n	800239a <menu+0x1412>
 8002358:	20001077 	.word	0x20001077
 800235c:	20000114 	.word	0x20000114
 8002360:	40010800 	.word	0x40010800
 8002364:	2000109b 	.word	0x2000109b
 8002368:	20000f9c 	.word	0x20000f9c
 800236c:	20001098 	.word	0x20001098
 8002370:	2000106c 	.word	0x2000106c
 8002374:	200013cc 	.word	0x200013cc
 8002378:	20001079 	.word	0x20001079
 800237c:	200013e0 	.word	0x200013e0
 8002380:	200013f4 	.word	0x200013f4
 8002384:	20001408 	.word	0x20001408
		} else if(kapiTablaAcKonum == 3) {
 8002388:	4b76      	ldr	r3, [pc, #472]	@ (8002564 <menu+0x15dc>)
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b03      	cmp	r3, #3
 800238e:	d104      	bne.n	800239a <menu+0x1412>
			lcd_print(2, 1, pasifText);
 8002390:	4a75      	ldr	r2, [pc, #468]	@ (8002568 <menu+0x15e0>)
 8002392:	2101      	movs	r1, #1
 8002394:	2002      	movs	r0, #2
 8002396:	f007 fb61 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800239a:	2102      	movs	r1, #2
 800239c:	4873      	ldr	r0, [pc, #460]	@ (800256c <menu+0x15e4>)
 800239e:	f008 fe4f 	bl	800b040 <HAL_GPIO_ReadPin>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d115      	bne.n	80023d4 <menu+0x144c>
 80023a8:	4b71      	ldr	r3, [pc, #452]	@ (8002570 <menu+0x15e8>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	f083 0301 	eor.w	r3, r3, #1
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00e      	beq.n	80023d4 <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 80023b6:	4b6b      	ldr	r3, [pc, #428]	@ (8002564 <menu+0x15dc>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	3301      	adds	r3, #1
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4b69      	ldr	r3, [pc, #420]	@ (8002564 <menu+0x15dc>)
 80023c0:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 80023c2:	4b68      	ldr	r3, [pc, #416]	@ (8002564 <menu+0x15dc>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d902      	bls.n	80023d0 <menu+0x1448>
				kapiTablaAcKonum = 0;
 80023ca:	4b66      	ldr	r3, [pc, #408]	@ (8002564 <menu+0x15dc>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023d0:	f001 fb26 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023d4:	2104      	movs	r1, #4
 80023d6:	4865      	ldr	r0, [pc, #404]	@ (800256c <menu+0x15e4>)
 80023d8:	f008 fe32 	bl	800b040 <HAL_GPIO_ReadPin>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d115      	bne.n	800240e <menu+0x1486>
 80023e2:	4b63      	ldr	r3, [pc, #396]	@ (8002570 <menu+0x15e8>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	f083 0301 	eor.w	r3, r3, #1
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00e      	beq.n	800240e <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80023f0:	4b5c      	ldr	r3, [pc, #368]	@ (8002564 <menu+0x15dc>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	b2da      	uxtb	r2, r3
 80023f8:	4b5a      	ldr	r3, [pc, #360]	@ (8002564 <menu+0x15dc>)
 80023fa:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 80023fc:	4b59      	ldr	r3, [pc, #356]	@ (8002564 <menu+0x15dc>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b03      	cmp	r3, #3
 8002402:	d902      	bls.n	800240a <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 8002404:	4b57      	ldr	r3, [pc, #348]	@ (8002564 <menu+0x15dc>)
 8002406:	2202      	movs	r2, #2
 8002408:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800240a:	f001 fb09 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800240e:	2108      	movs	r1, #8
 8002410:	4856      	ldr	r0, [pc, #344]	@ (800256c <menu+0x15e4>)
 8002412:	f008 fe15 	bl	800b040 <HAL_GPIO_ReadPin>
 8002416:	4603      	mov	r3, r0
 8002418:	2b01      	cmp	r3, #1
 800241a:	d11d      	bne.n	8002458 <menu+0x14d0>
 800241c:	4b54      	ldr	r3, [pc, #336]	@ (8002570 <menu+0x15e8>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	f083 0301 	eor.w	r3, r3, #1
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d016      	beq.n	8002458 <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 800242a:	4b4e      	ldr	r3, [pc, #312]	@ (8002564 <menu+0x15dc>)
 800242c:	781a      	ldrb	r2, [r3, #0]
 800242e:	4b51      	ldr	r3, [pc, #324]	@ (8002574 <menu+0x15ec>)
 8002430:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002434:	4b4b      	ldr	r3, [pc, #300]	@ (8002564 <menu+0x15dc>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <menu+0x14bc>
 800243c:	4b49      	ldr	r3, [pc, #292]	@ (8002564 <menu+0x15dc>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b02      	cmp	r3, #2
 8002442:	d106      	bne.n	8002452 <menu+0x14ca>
				altLimit = 1;
 8002444:	4b4c      	ldr	r3, [pc, #304]	@ (8002578 <menu+0x15f0>)
 8002446:	2201      	movs	r2, #1
 8002448:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800244a:	4b4b      	ldr	r3, [pc, #300]	@ (8002578 <menu+0x15f0>)
 800244c:	781a      	ldrb	r2, [r3, #0]
 800244e:	4b49      	ldr	r3, [pc, #292]	@ (8002574 <menu+0x15ec>)
 8002450:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002452:	4b4a      	ldr	r3, [pc, #296]	@ (800257c <menu+0x15f4>)
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002458:	4b49      	ldr	r3, [pc, #292]	@ (8002580 <menu+0x15f8>)
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	2b0f      	cmp	r3, #15
 800245e:	d16c      	bne.n	800253a <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 8002460:	4a48      	ldr	r2, [pc, #288]	@ (8002584 <menu+0x15fc>)
 8002462:	2101      	movs	r1, #1
 8002464:	2001      	movs	r0, #1
 8002466:	f007 faf9 	bl	8009a5c <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 800246a:	4a47      	ldr	r2, [pc, #284]	@ (8002588 <menu+0x1600>)
 800246c:	2101      	movs	r1, #1
 800246e:	2002      	movs	r0, #2
 8002470:	f007 faf4 	bl	8009a5c <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002474:	4b45      	ldr	r3, [pc, #276]	@ (800258c <menu+0x1604>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	220a      	movs	r2, #10
 800247a:	4945      	ldr	r1, [pc, #276]	@ (8002590 <menu+0x1608>)
 800247c:	4618      	mov	r0, r3
 800247e:	f00b fdd5 	bl	800e02c <itoa>
		lcd_print(2,16,snum);
 8002482:	4a43      	ldr	r2, [pc, #268]	@ (8002590 <menu+0x1608>)
 8002484:	2110      	movs	r1, #16
 8002486:	2002      	movs	r0, #2
 8002488:	f007 fae8 	bl	8009a5c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800248c:	2102      	movs	r1, #2
 800248e:	4837      	ldr	r0, [pc, #220]	@ (800256c <menu+0x15e4>)
 8002490:	f008 fdd6 	bl	800b040 <HAL_GPIO_ReadPin>
 8002494:	4603      	mov	r3, r0
 8002496:	2b01      	cmp	r3, #1
 8002498:	d119      	bne.n	80024ce <menu+0x1546>
 800249a:	4b35      	ldr	r3, [pc, #212]	@ (8002570 <menu+0x15e8>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	f083 0301 	eor.w	r3, r3, #1
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d012      	beq.n	80024ce <menu+0x1546>
 80024a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002594 <menu+0x160c>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10e      	bne.n	80024ce <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 80024b0:	4b36      	ldr	r3, [pc, #216]	@ (800258c <menu+0x1604>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	3301      	adds	r3, #1
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	4b34      	ldr	r3, [pc, #208]	@ (800258c <menu+0x1604>)
 80024ba:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 80024bc:	4b33      	ldr	r3, [pc, #204]	@ (800258c <menu+0x1604>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	2b05      	cmp	r3, #5
 80024c2:	d902      	bls.n	80024ca <menu+0x1542>
				kapiTablaAcSure = 0;
 80024c4:	4b31      	ldr	r3, [pc, #196]	@ (800258c <menu+0x1604>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024ca:	f001 faa9 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80024ce:	2104      	movs	r1, #4
 80024d0:	4826      	ldr	r0, [pc, #152]	@ (800256c <menu+0x15e4>)
 80024d2:	f008 fdb5 	bl	800b040 <HAL_GPIO_ReadPin>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d119      	bne.n	8002510 <menu+0x1588>
 80024dc:	4b24      	ldr	r3, [pc, #144]	@ (8002570 <menu+0x15e8>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	f083 0301 	eor.w	r3, r3, #1
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d012      	beq.n	8002510 <menu+0x1588>
 80024ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002594 <menu+0x160c>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10e      	bne.n	8002510 <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80024f2:	4b26      	ldr	r3, [pc, #152]	@ (800258c <menu+0x1604>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4b24      	ldr	r3, [pc, #144]	@ (800258c <menu+0x1604>)
 80024fc:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80024fe:	4b23      	ldr	r3, [pc, #140]	@ (800258c <menu+0x1604>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b06      	cmp	r3, #6
 8002504:	d902      	bls.n	800250c <menu+0x1584>
		   		kapiTablaAcSure = 5;
 8002506:	4b21      	ldr	r3, [pc, #132]	@ (800258c <menu+0x1604>)
 8002508:	2205      	movs	r2, #5
 800250a:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800250c:	f001 fa88 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002510:	2108      	movs	r1, #8
 8002512:	4816      	ldr	r0, [pc, #88]	@ (800256c <menu+0x15e4>)
 8002514:	f008 fd94 	bl	800b040 <HAL_GPIO_ReadPin>
 8002518:	4603      	mov	r3, r0
 800251a:	2b01      	cmp	r3, #1
 800251c:	d10d      	bne.n	800253a <menu+0x15b2>
 800251e:	4b14      	ldr	r3, [pc, #80]	@ (8002570 <menu+0x15e8>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	f083 0301 	eor.w	r3, r3, #1
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d006      	beq.n	800253a <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 800252c:	4b17      	ldr	r3, [pc, #92]	@ (800258c <menu+0x1604>)
 800252e:	781a      	ldrb	r2, [r3, #0]
 8002530:	4b10      	ldr	r3, [pc, #64]	@ (8002574 <menu+0x15ec>)
 8002532:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002534:	4b11      	ldr	r3, [pc, #68]	@ (800257c <menu+0x15f4>)
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 800253a:	4b11      	ldr	r3, [pc, #68]	@ (8002580 <menu+0x15f8>)
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b10      	cmp	r3, #16
 8002540:	f040 8086 	bne.w	8002650 <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002544:	4a14      	ldr	r2, [pc, #80]	@ (8002598 <menu+0x1610>)
 8002546:	2101      	movs	r1, #1
 8002548:	2001      	movs	r0, #1
 800254a:	f007 fa87 	bl	8009a5c <lcd_print>

		if(yukariYavasLimit == 0) {
 800254e:	4b13      	ldr	r3, [pc, #76]	@ (800259c <menu+0x1614>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d124      	bne.n	80025a0 <menu+0x1618>
			lcd_print(2, 1, pasifText);
 8002556:	4a04      	ldr	r2, [pc, #16]	@ (8002568 <menu+0x15e0>)
 8002558:	2101      	movs	r1, #1
 800255a:	2002      	movs	r0, #2
 800255c:	f007 fa7e 	bl	8009a5c <lcd_print>
 8002560:	e027      	b.n	80025b2 <menu+0x162a>
 8002562:	bf00      	nop
 8002564:	20001079 	.word	0x20001079
 8002568:	20001250 	.word	0x20001250
 800256c:	40010800 	.word	0x40010800
 8002570:	2000109b 	.word	0x2000109b
 8002574:	20000f9c 	.word	0x20000f9c
 8002578:	20001072 	.word	0x20001072
 800257c:	20001098 	.word	0x20001098
 8002580:	2000106c 	.word	0x2000106c
 8002584:	2000141c 	.word	0x2000141c
 8002588:	2000137c 	.word	0x2000137c
 800258c:	20001087 	.word	0x20001087
 8002590:	2000100c 	.word	0x2000100c
 8002594:	20001077 	.word	0x20001077
 8002598:	20001430 	.word	0x20001430
 800259c:	2000107a 	.word	0x2000107a
		} else if(yukariYavasLimit == 1) {
 80025a0:	4b84      	ldr	r3, [pc, #528]	@ (80027b4 <menu+0x182c>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d104      	bne.n	80025b2 <menu+0x162a>
			lcd_print(2, 1, aktifText);
 80025a8:	4a83      	ldr	r2, [pc, #524]	@ (80027b8 <menu+0x1830>)
 80025aa:	2101      	movs	r1, #1
 80025ac:	2002      	movs	r0, #2
 80025ae:	f007 fa55 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025b2:	2102      	movs	r1, #2
 80025b4:	4881      	ldr	r0, [pc, #516]	@ (80027bc <menu+0x1834>)
 80025b6:	f008 fd43 	bl	800b040 <HAL_GPIO_ReadPin>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d115      	bne.n	80025ec <menu+0x1664>
 80025c0:	4b7f      	ldr	r3, [pc, #508]	@ (80027c0 <menu+0x1838>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	f083 0301 	eor.w	r3, r3, #1
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00e      	beq.n	80025ec <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 80025ce:	4b79      	ldr	r3, [pc, #484]	@ (80027b4 <menu+0x182c>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	3301      	adds	r3, #1
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4b77      	ldr	r3, [pc, #476]	@ (80027b4 <menu+0x182c>)
 80025d8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80025da:	4b76      	ldr	r3, [pc, #472]	@ (80027b4 <menu+0x182c>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d902      	bls.n	80025e8 <menu+0x1660>
				yukariYavasLimit = 0;
 80025e2:	4b74      	ldr	r3, [pc, #464]	@ (80027b4 <menu+0x182c>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025e8:	f001 fa1a 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025ec:	2104      	movs	r1, #4
 80025ee:	4873      	ldr	r0, [pc, #460]	@ (80027bc <menu+0x1834>)
 80025f0:	f008 fd26 	bl	800b040 <HAL_GPIO_ReadPin>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d115      	bne.n	8002626 <menu+0x169e>
 80025fa:	4b71      	ldr	r3, [pc, #452]	@ (80027c0 <menu+0x1838>)
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	f083 0301 	eor.w	r3, r3, #1
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00e      	beq.n	8002626 <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002608:	4b6a      	ldr	r3, [pc, #424]	@ (80027b4 <menu+0x182c>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	3b01      	subs	r3, #1
 800260e:	b2da      	uxtb	r2, r3
 8002610:	4b68      	ldr	r3, [pc, #416]	@ (80027b4 <menu+0x182c>)
 8002612:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002614:	4b67      	ldr	r3, [pc, #412]	@ (80027b4 <menu+0x182c>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <menu+0x169a>
		   		yukariYavasLimit = 1;
 800261c:	4b65      	ldr	r3, [pc, #404]	@ (80027b4 <menu+0x182c>)
 800261e:	2201      	movs	r2, #1
 8002620:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002622:	f001 f9fd 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002626:	2108      	movs	r1, #8
 8002628:	4864      	ldr	r0, [pc, #400]	@ (80027bc <menu+0x1834>)
 800262a:	f008 fd09 	bl	800b040 <HAL_GPIO_ReadPin>
 800262e:	4603      	mov	r3, r0
 8002630:	2b01      	cmp	r3, #1
 8002632:	d10d      	bne.n	8002650 <menu+0x16c8>
 8002634:	4b62      	ldr	r3, [pc, #392]	@ (80027c0 <menu+0x1838>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	f083 0301 	eor.w	r3, r3, #1
 800263c:	b2db      	uxtb	r3, r3
 800263e:	2b00      	cmp	r3, #0
 8002640:	d006      	beq.n	8002650 <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 8002642:	4b5c      	ldr	r3, [pc, #368]	@ (80027b4 <menu+0x182c>)
 8002644:	781a      	ldrb	r2, [r3, #0]
 8002646:	4b5f      	ldr	r3, [pc, #380]	@ (80027c4 <menu+0x183c>)
 8002648:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800264a:	4b5f      	ldr	r3, [pc, #380]	@ (80027c8 <menu+0x1840>)
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002650:	4b5e      	ldr	r3, [pc, #376]	@ (80027cc <menu+0x1844>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b11      	cmp	r3, #17
 8002656:	f040 808b 	bne.w	8002770 <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 800265a:	4a5d      	ldr	r2, [pc, #372]	@ (80027d0 <menu+0x1848>)
 800265c:	2101      	movs	r1, #1
 800265e:	2001      	movs	r0, #1
 8002660:	f007 f9fc 	bl	8009a5c <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002664:	4b5b      	ldr	r3, [pc, #364]	@ (80027d4 <menu+0x184c>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b02      	cmp	r3, #2
 800266a:	d105      	bne.n	8002678 <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 800266c:	4a5a      	ldr	r2, [pc, #360]	@ (80027d8 <menu+0x1850>)
 800266e:	2101      	movs	r1, #1
 8002670:	2002      	movs	r0, #2
 8002672:	f007 f9f3 	bl	8009a5c <lcd_print>
 8002676:	e012      	b.n	800269e <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 8002678:	4b56      	ldr	r3, [pc, #344]	@ (80027d4 <menu+0x184c>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d105      	bne.n	800268c <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 8002680:	4a56      	ldr	r2, [pc, #344]	@ (80027dc <menu+0x1854>)
 8002682:	2101      	movs	r1, #1
 8002684:	2002      	movs	r0, #2
 8002686:	f007 f9e9 	bl	8009a5c <lcd_print>
 800268a:	e008      	b.n	800269e <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 800268c:	4b51      	ldr	r3, [pc, #324]	@ (80027d4 <menu+0x184c>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d104      	bne.n	800269e <menu+0x1716>
			lcd_print(2, 1, pasifText);
 8002694:	4a52      	ldr	r2, [pc, #328]	@ (80027e0 <menu+0x1858>)
 8002696:	2101      	movs	r1, #1
 8002698:	2002      	movs	r0, #2
 800269a:	f007 f9df 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800269e:	2102      	movs	r1, #2
 80026a0:	4846      	ldr	r0, [pc, #280]	@ (80027bc <menu+0x1834>)
 80026a2:	f008 fccd 	bl	800b040 <HAL_GPIO_ReadPin>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d115      	bne.n	80026d8 <menu+0x1750>
 80026ac:	4b44      	ldr	r3, [pc, #272]	@ (80027c0 <menu+0x1838>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	f083 0301 	eor.w	r3, r3, #1
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00e      	beq.n	80026d8 <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80026ba:	4b46      	ldr	r3, [pc, #280]	@ (80027d4 <menu+0x184c>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	3301      	adds	r3, #1
 80026c0:	b2da      	uxtb	r2, r3
 80026c2:	4b44      	ldr	r3, [pc, #272]	@ (80027d4 <menu+0x184c>)
 80026c4:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80026c6:	4b43      	ldr	r3, [pc, #268]	@ (80027d4 <menu+0x184c>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d902      	bls.n	80026d4 <menu+0x174c>
				devirmeYuruyusSecim = 0;
 80026ce:	4b41      	ldr	r3, [pc, #260]	@ (80027d4 <menu+0x184c>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026d4:	f001 f9a4 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026d8:	2104      	movs	r1, #4
 80026da:	4838      	ldr	r0, [pc, #224]	@ (80027bc <menu+0x1834>)
 80026dc:	f008 fcb0 	bl	800b040 <HAL_GPIO_ReadPin>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d115      	bne.n	8002712 <menu+0x178a>
 80026e6:	4b36      	ldr	r3, [pc, #216]	@ (80027c0 <menu+0x1838>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	f083 0301 	eor.w	r3, r3, #1
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00e      	beq.n	8002712 <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80026f4:	4b37      	ldr	r3, [pc, #220]	@ (80027d4 <menu+0x184c>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	3b01      	subs	r3, #1
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	4b35      	ldr	r3, [pc, #212]	@ (80027d4 <menu+0x184c>)
 80026fe:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002700:	4b34      	ldr	r3, [pc, #208]	@ (80027d4 <menu+0x184c>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b03      	cmp	r3, #3
 8002706:	d902      	bls.n	800270e <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 8002708:	4b32      	ldr	r3, [pc, #200]	@ (80027d4 <menu+0x184c>)
 800270a:	2202      	movs	r2, #2
 800270c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800270e:	f001 f987 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002712:	2108      	movs	r1, #8
 8002714:	4829      	ldr	r0, [pc, #164]	@ (80027bc <menu+0x1834>)
 8002716:	f008 fc93 	bl	800b040 <HAL_GPIO_ReadPin>
 800271a:	4603      	mov	r3, r0
 800271c:	2b01      	cmp	r3, #1
 800271e:	d127      	bne.n	8002770 <menu+0x17e8>
 8002720:	4b27      	ldr	r3, [pc, #156]	@ (80027c0 <menu+0x1838>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	f083 0301 	eor.w	r3, r3, #1
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d020      	beq.n	8002770 <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 800272e:	4b29      	ldr	r3, [pc, #164]	@ (80027d4 <menu+0x184c>)
 8002730:	781a      	ldrb	r2, [r3, #0]
 8002732:	4b24      	ldr	r3, [pc, #144]	@ (80027c4 <menu+0x183c>)
 8002734:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002736:	4b27      	ldr	r3, [pc, #156]	@ (80027d4 <menu+0x184c>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d003      	beq.n	8002746 <menu+0x17be>
 800273e:	4b25      	ldr	r3, [pc, #148]	@ (80027d4 <menu+0x184c>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d106      	bne.n	8002754 <menu+0x17cc>
				calismaSekli = 0;
 8002746:	4b27      	ldr	r3, [pc, #156]	@ (80027e4 <menu+0x185c>)
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 800274c:	4b25      	ldr	r3, [pc, #148]	@ (80027e4 <menu+0x185c>)
 800274e:	781a      	ldrb	r2, [r3, #0]
 8002750:	4b1c      	ldr	r3, [pc, #112]	@ (80027c4 <menu+0x183c>)
 8002752:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002754:	4b1f      	ldr	r3, [pc, #124]	@ (80027d4 <menu+0x184c>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b01      	cmp	r3, #1
 800275a:	d106      	bne.n	800276a <menu+0x17e2>
				devirmeSilindirTipi = 1;
 800275c:	4b22      	ldr	r3, [pc, #136]	@ (80027e8 <menu+0x1860>)
 800275e:	2201      	movs	r2, #1
 8002760:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002762:	4b21      	ldr	r3, [pc, #132]	@ (80027e8 <menu+0x1860>)
 8002764:	781a      	ldrb	r2, [r3, #0]
 8002766:	4b17      	ldr	r3, [pc, #92]	@ (80027c4 <menu+0x183c>)
 8002768:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800276a:	4b17      	ldr	r3, [pc, #92]	@ (80027c8 <menu+0x1840>)
 800276c:	2201      	movs	r2, #1
 800276e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002770:	4b16      	ldr	r3, [pc, #88]	@ (80027cc <menu+0x1844>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b12      	cmp	r3, #18
 8002776:	f040 8097 	bne.w	80028a8 <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 800277a:	4b16      	ldr	r3, [pc, #88]	@ (80027d4 <menu+0x184c>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d105      	bne.n	800278e <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 8002782:	4a1a      	ldr	r2, [pc, #104]	@ (80027ec <menu+0x1864>)
 8002784:	2101      	movs	r1, #1
 8002786:	2001      	movs	r0, #1
 8002788:	f007 f968 	bl	8009a5c <lcd_print>
 800278c:	e008      	b.n	80027a0 <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 800278e:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <menu+0x184c>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d104      	bne.n	80027a0 <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 8002796:	4a16      	ldr	r2, [pc, #88]	@ (80027f0 <menu+0x1868>)
 8002798:	2101      	movs	r1, #1
 800279a:	2001      	movs	r0, #1
 800279c:	f007 f95e 	bl	8009a5c <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 80027a0:	4b14      	ldr	r3, [pc, #80]	@ (80027f4 <menu+0x186c>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d127      	bne.n	80027f8 <menu+0x1870>
			lcd_print(2, 1, pasifText);
 80027a8:	4a0d      	ldr	r2, [pc, #52]	@ (80027e0 <menu+0x1858>)
 80027aa:	2101      	movs	r1, #1
 80027ac:	2002      	movs	r0, #2
 80027ae:	f007 f955 	bl	8009a5c <lcd_print>
 80027b2:	e02a      	b.n	800280a <menu+0x1882>
 80027b4:	2000107a 	.word	0x2000107a
 80027b8:	20001264 	.word	0x20001264
 80027bc:	40010800 	.word	0x40010800
 80027c0:	2000109b 	.word	0x2000109b
 80027c4:	20000f9c 	.word	0x20000f9c
 80027c8:	20001098 	.word	0x20001098
 80027cc:	2000106c 	.word	0x2000106c
 80027d0:	20001444 	.word	0x20001444
 80027d4:	2000107b 	.word	0x2000107b
 80027d8:	20001458 	.word	0x20001458
 80027dc:	2000146c 	.word	0x2000146c
 80027e0:	20001250 	.word	0x20001250
 80027e4:	2000106d 	.word	0x2000106d
 80027e8:	2000107e 	.word	0x2000107e
 80027ec:	20001480 	.word	0x20001480
 80027f0:	20001494 	.word	0x20001494
 80027f4:	2000107c 	.word	0x2000107c
		} else if(devirmeYukariIleriLimit == 1){
 80027f8:	4b79      	ldr	r3, [pc, #484]	@ (80029e0 <menu+0x1a58>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d104      	bne.n	800280a <menu+0x1882>
			lcd_print(2, 1, aktifText);
 8002800:	4a78      	ldr	r2, [pc, #480]	@ (80029e4 <menu+0x1a5c>)
 8002802:	2101      	movs	r1, #1
 8002804:	2002      	movs	r0, #2
 8002806:	f007 f929 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800280a:	2102      	movs	r1, #2
 800280c:	4876      	ldr	r0, [pc, #472]	@ (80029e8 <menu+0x1a60>)
 800280e:	f008 fc17 	bl	800b040 <HAL_GPIO_ReadPin>
 8002812:	4603      	mov	r3, r0
 8002814:	2b01      	cmp	r3, #1
 8002816:	d115      	bne.n	8002844 <menu+0x18bc>
 8002818:	4b74      	ldr	r3, [pc, #464]	@ (80029ec <menu+0x1a64>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	f083 0301 	eor.w	r3, r3, #1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00e      	beq.n	8002844 <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002826:	4b6e      	ldr	r3, [pc, #440]	@ (80029e0 <menu+0x1a58>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	3301      	adds	r3, #1
 800282c:	b2da      	uxtb	r2, r3
 800282e:	4b6c      	ldr	r3, [pc, #432]	@ (80029e0 <menu+0x1a58>)
 8002830:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002832:	4b6b      	ldr	r3, [pc, #428]	@ (80029e0 <menu+0x1a58>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d902      	bls.n	8002840 <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 800283a:	4b69      	ldr	r3, [pc, #420]	@ (80029e0 <menu+0x1a58>)
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002840:	f001 f8ee 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002844:	2104      	movs	r1, #4
 8002846:	4868      	ldr	r0, [pc, #416]	@ (80029e8 <menu+0x1a60>)
 8002848:	f008 fbfa 	bl	800b040 <HAL_GPIO_ReadPin>
 800284c:	4603      	mov	r3, r0
 800284e:	2b01      	cmp	r3, #1
 8002850:	d115      	bne.n	800287e <menu+0x18f6>
 8002852:	4b66      	ldr	r3, [pc, #408]	@ (80029ec <menu+0x1a64>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	f083 0301 	eor.w	r3, r3, #1
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00e      	beq.n	800287e <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002860:	4b5f      	ldr	r3, [pc, #380]	@ (80029e0 <menu+0x1a58>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	3b01      	subs	r3, #1
 8002866:	b2da      	uxtb	r2, r3
 8002868:	4b5d      	ldr	r3, [pc, #372]	@ (80029e0 <menu+0x1a58>)
 800286a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 800286c:	4b5c      	ldr	r3, [pc, #368]	@ (80029e0 <menu+0x1a58>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d002      	beq.n	800287a <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 8002874:	4b5a      	ldr	r3, [pc, #360]	@ (80029e0 <menu+0x1a58>)
 8002876:	2201      	movs	r2, #1
 8002878:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800287a:	f001 f8d1 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800287e:	2108      	movs	r1, #8
 8002880:	4859      	ldr	r0, [pc, #356]	@ (80029e8 <menu+0x1a60>)
 8002882:	f008 fbdd 	bl	800b040 <HAL_GPIO_ReadPin>
 8002886:	4603      	mov	r3, r0
 8002888:	2b01      	cmp	r3, #1
 800288a:	d10d      	bne.n	80028a8 <menu+0x1920>
 800288c:	4b57      	ldr	r3, [pc, #348]	@ (80029ec <menu+0x1a64>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	f083 0301 	eor.w	r3, r3, #1
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b00      	cmp	r3, #0
 8002898:	d006      	beq.n	80028a8 <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 800289a:	4b51      	ldr	r3, [pc, #324]	@ (80029e0 <menu+0x1a58>)
 800289c:	781a      	ldrb	r2, [r3, #0]
 800289e:	4b54      	ldr	r3, [pc, #336]	@ (80029f0 <menu+0x1a68>)
 80028a0:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80028a2:	4b54      	ldr	r3, [pc, #336]	@ (80029f4 <menu+0x1a6c>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80028a8:	4b53      	ldr	r3, [pc, #332]	@ (80029f8 <menu+0x1a70>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b13      	cmp	r3, #19
 80028ae:	d174      	bne.n	800299a <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 80028b0:	4b52      	ldr	r3, [pc, #328]	@ (80029fc <menu+0x1a74>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d105      	bne.n	80028c4 <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 80028b8:	4a51      	ldr	r2, [pc, #324]	@ (8002a00 <menu+0x1a78>)
 80028ba:	2101      	movs	r1, #1
 80028bc:	2001      	movs	r0, #1
 80028be:	f007 f8cd 	bl	8009a5c <lcd_print>
 80028c2:	e008      	b.n	80028d6 <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 80028c4:	4b4d      	ldr	r3, [pc, #308]	@ (80029fc <menu+0x1a74>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d104      	bne.n	80028d6 <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 80028cc:	4a4d      	ldr	r2, [pc, #308]	@ (8002a04 <menu+0x1a7c>)
 80028ce:	2101      	movs	r1, #1
 80028d0:	2001      	movs	r0, #1
 80028d2:	f007 f8c3 	bl	8009a5c <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 80028d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002a08 <menu+0x1a80>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d105      	bne.n	80028ea <menu+0x1962>
			lcd_print(2, 1, pasifText);
 80028de:	4a4b      	ldr	r2, [pc, #300]	@ (8002a0c <menu+0x1a84>)
 80028e0:	2101      	movs	r1, #1
 80028e2:	2002      	movs	r0, #2
 80028e4:	f007 f8ba 	bl	8009a5c <lcd_print>
 80028e8:	e008      	b.n	80028fc <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 80028ea:	4b47      	ldr	r3, [pc, #284]	@ (8002a08 <menu+0x1a80>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d104      	bne.n	80028fc <menu+0x1974>
			lcd_print(2, 1, aktifText);
 80028f2:	4a3c      	ldr	r2, [pc, #240]	@ (80029e4 <menu+0x1a5c>)
 80028f4:	2101      	movs	r1, #1
 80028f6:	2002      	movs	r0, #2
 80028f8:	f007 f8b0 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80028fc:	2102      	movs	r1, #2
 80028fe:	483a      	ldr	r0, [pc, #232]	@ (80029e8 <menu+0x1a60>)
 8002900:	f008 fb9e 	bl	800b040 <HAL_GPIO_ReadPin>
 8002904:	4603      	mov	r3, r0
 8002906:	2b01      	cmp	r3, #1
 8002908:	d115      	bne.n	8002936 <menu+0x19ae>
 800290a:	4b38      	ldr	r3, [pc, #224]	@ (80029ec <menu+0x1a64>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	f083 0301 	eor.w	r3, r3, #1
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00e      	beq.n	8002936 <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002918:	4b3b      	ldr	r3, [pc, #236]	@ (8002a08 <menu+0x1a80>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	3301      	adds	r3, #1
 800291e:	b2da      	uxtb	r2, r3
 8002920:	4b39      	ldr	r3, [pc, #228]	@ (8002a08 <menu+0x1a80>)
 8002922:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002924:	4b38      	ldr	r3, [pc, #224]	@ (8002a08 <menu+0x1a80>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d902      	bls.n	8002932 <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 800292c:	4b36      	ldr	r3, [pc, #216]	@ (8002a08 <menu+0x1a80>)
 800292e:	2200      	movs	r2, #0
 8002930:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002932:	f001 f875 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002936:	2104      	movs	r1, #4
 8002938:	482b      	ldr	r0, [pc, #172]	@ (80029e8 <menu+0x1a60>)
 800293a:	f008 fb81 	bl	800b040 <HAL_GPIO_ReadPin>
 800293e:	4603      	mov	r3, r0
 8002940:	2b01      	cmp	r3, #1
 8002942:	d115      	bne.n	8002970 <menu+0x19e8>
 8002944:	4b29      	ldr	r3, [pc, #164]	@ (80029ec <menu+0x1a64>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	f083 0301 	eor.w	r3, r3, #1
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00e      	beq.n	8002970 <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002952:	4b2d      	ldr	r3, [pc, #180]	@ (8002a08 <menu+0x1a80>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	3b01      	subs	r3, #1
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4b2b      	ldr	r3, [pc, #172]	@ (8002a08 <menu+0x1a80>)
 800295c:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 800295e:	4b2a      	ldr	r3, [pc, #168]	@ (8002a08 <menu+0x1a80>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d002      	beq.n	800296c <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 8002966:	4b28      	ldr	r3, [pc, #160]	@ (8002a08 <menu+0x1a80>)
 8002968:	2201      	movs	r2, #1
 800296a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800296c:	f001 f858 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002970:	2108      	movs	r1, #8
 8002972:	481d      	ldr	r0, [pc, #116]	@ (80029e8 <menu+0x1a60>)
 8002974:	f008 fb64 	bl	800b040 <HAL_GPIO_ReadPin>
 8002978:	4603      	mov	r3, r0
 800297a:	2b01      	cmp	r3, #1
 800297c:	d10d      	bne.n	800299a <menu+0x1a12>
 800297e:	4b1b      	ldr	r3, [pc, #108]	@ (80029ec <menu+0x1a64>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	f083 0301 	eor.w	r3, r3, #1
 8002986:	b2db      	uxtb	r3, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d006      	beq.n	800299a <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 800298c:	4b1e      	ldr	r3, [pc, #120]	@ (8002a08 <menu+0x1a80>)
 800298e:	781a      	ldrb	r2, [r3, #0]
 8002990:	4b17      	ldr	r3, [pc, #92]	@ (80029f0 <menu+0x1a68>)
 8002992:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002994:	4b17      	ldr	r3, [pc, #92]	@ (80029f4 <menu+0x1a6c>)
 8002996:	2201      	movs	r2, #1
 8002998:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 800299a:	4b17      	ldr	r3, [pc, #92]	@ (80029f8 <menu+0x1a70>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b14      	cmp	r3, #20
 80029a0:	f040 809e 	bne.w	8002ae0 <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 80029a4:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <menu+0x1a74>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d105      	bne.n	80029b8 <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 80029ac:	4a18      	ldr	r2, [pc, #96]	@ (8002a10 <menu+0x1a88>)
 80029ae:	2101      	movs	r1, #1
 80029b0:	2001      	movs	r0, #1
 80029b2:	f007 f853 	bl	8009a5c <lcd_print>
 80029b6:	e008      	b.n	80029ca <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 80029b8:	4b10      	ldr	r3, [pc, #64]	@ (80029fc <menu+0x1a74>)
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d104      	bne.n	80029ca <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 80029c0:	4a14      	ldr	r2, [pc, #80]	@ (8002a14 <menu+0x1a8c>)
 80029c2:	2101      	movs	r1, #1
 80029c4:	2001      	movs	r0, #1
 80029c6:	f007 f849 	bl	8009a5c <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 80029ca:	4b13      	ldr	r3, [pc, #76]	@ (8002a18 <menu+0x1a90>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d126      	bne.n	8002a20 <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 80029d2:	4a12      	ldr	r2, [pc, #72]	@ (8002a1c <menu+0x1a94>)
 80029d4:	2101      	movs	r1, #1
 80029d6:	2002      	movs	r0, #2
 80029d8:	f007 f840 	bl	8009a5c <lcd_print>
 80029dc:	e029      	b.n	8002a32 <menu+0x1aaa>
 80029de:	bf00      	nop
 80029e0:	2000107c 	.word	0x2000107c
 80029e4:	20001264 	.word	0x20001264
 80029e8:	40010800 	.word	0x40010800
 80029ec:	2000109b 	.word	0x2000109b
 80029f0:	20000f9c 	.word	0x20000f9c
 80029f4:	20001098 	.word	0x20001098
 80029f8:	2000106c 	.word	0x2000106c
 80029fc:	2000107b 	.word	0x2000107b
 8002a00:	200014a8 	.word	0x200014a8
 8002a04:	200014bc 	.word	0x200014bc
 8002a08:	2000107d 	.word	0x2000107d
 8002a0c:	20001250 	.word	0x20001250
 8002a10:	200014d0 	.word	0x200014d0
 8002a14:	200014e4 	.word	0x200014e4
 8002a18:	2000107e 	.word	0x2000107e
 8002a1c:	200014f8 	.word	0x200014f8
		} else if(devirmeSilindirTipi == 1) {
 8002a20:	4b39      	ldr	r3, [pc, #228]	@ (8002b08 <menu+0x1b80>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d104      	bne.n	8002a32 <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 8002a28:	4a38      	ldr	r2, [pc, #224]	@ (8002b0c <menu+0x1b84>)
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	2002      	movs	r0, #2
 8002a2e:	f007 f815 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002a32:	2102      	movs	r1, #2
 8002a34:	4836      	ldr	r0, [pc, #216]	@ (8002b10 <menu+0x1b88>)
 8002a36:	f008 fb03 	bl	800b040 <HAL_GPIO_ReadPin>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d119      	bne.n	8002a74 <menu+0x1aec>
 8002a40:	4b34      	ldr	r3, [pc, #208]	@ (8002b14 <menu+0x1b8c>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	f083 0301 	eor.w	r3, r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d012      	beq.n	8002a74 <menu+0x1aec>
 8002a4e:	4b32      	ldr	r3, [pc, #200]	@ (8002b18 <menu+0x1b90>)
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d10e      	bne.n	8002a74 <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002a56:	4b2c      	ldr	r3, [pc, #176]	@ (8002b08 <menu+0x1b80>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	b2da      	uxtb	r2, r3
 8002a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8002b08 <menu+0x1b80>)
 8002a60:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002a62:	4b29      	ldr	r3, [pc, #164]	@ (8002b08 <menu+0x1b80>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d902      	bls.n	8002a70 <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 8002a6a:	4b27      	ldr	r3, [pc, #156]	@ (8002b08 <menu+0x1b80>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a70:	f000 ffd6 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002a74:	2104      	movs	r1, #4
 8002a76:	4826      	ldr	r0, [pc, #152]	@ (8002b10 <menu+0x1b88>)
 8002a78:	f008 fae2 	bl	800b040 <HAL_GPIO_ReadPin>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d119      	bne.n	8002ab6 <menu+0x1b2e>
 8002a82:	4b24      	ldr	r3, [pc, #144]	@ (8002b14 <menu+0x1b8c>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	f083 0301 	eor.w	r3, r3, #1
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d012      	beq.n	8002ab6 <menu+0x1b2e>
 8002a90:	4b21      	ldr	r3, [pc, #132]	@ (8002b18 <menu+0x1b90>)
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d10e      	bne.n	8002ab6 <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002a98:	4b1b      	ldr	r3, [pc, #108]	@ (8002b08 <menu+0x1b80>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	4b19      	ldr	r3, [pc, #100]	@ (8002b08 <menu+0x1b80>)
 8002aa2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002aa4:	4b18      	ldr	r3, [pc, #96]	@ (8002b08 <menu+0x1b80>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d002      	beq.n	8002ab2 <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 8002aac:	4b16      	ldr	r3, [pc, #88]	@ (8002b08 <menu+0x1b80>)
 8002aae:	2201      	movs	r2, #1
 8002ab0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ab2:	f000 ffb5 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ab6:	2108      	movs	r1, #8
 8002ab8:	4815      	ldr	r0, [pc, #84]	@ (8002b10 <menu+0x1b88>)
 8002aba:	f008 fac1 	bl	800b040 <HAL_GPIO_ReadPin>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d10d      	bne.n	8002ae0 <menu+0x1b58>
 8002ac4:	4b13      	ldr	r3, [pc, #76]	@ (8002b14 <menu+0x1b8c>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	f083 0301 	eor.w	r3, r3, #1
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d006      	beq.n	8002ae0 <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b08 <menu+0x1b80>)
 8002ad4:	781a      	ldrb	r2, [r3, #0]
 8002ad6:	4b11      	ldr	r3, [pc, #68]	@ (8002b1c <menu+0x1b94>)
 8002ad8:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002ada:	4b11      	ldr	r3, [pc, #68]	@ (8002b20 <menu+0x1b98>)
 8002adc:	2201      	movs	r2, #1
 8002ade:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002ae0:	4b10      	ldr	r3, [pc, #64]	@ (8002b24 <menu+0x1b9c>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b15      	cmp	r3, #21
 8002ae6:	f040 8088 	bne.w	8002bfa <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 8002aea:	4a0f      	ldr	r2, [pc, #60]	@ (8002b28 <menu+0x1ba0>)
 8002aec:	2101      	movs	r1, #1
 8002aee:	2001      	movs	r0, #1
 8002af0:	f006 ffb4 	bl	8009a5c <lcd_print>

		if(platformSilindirTipi == 0) {
 8002af4:	4b0d      	ldr	r3, [pc, #52]	@ (8002b2c <menu+0x1ba4>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d11b      	bne.n	8002b34 <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 8002afc:	4a0c      	ldr	r2, [pc, #48]	@ (8002b30 <menu+0x1ba8>)
 8002afe:	2101      	movs	r1, #1
 8002b00:	2002      	movs	r0, #2
 8002b02:	f006 ffab 	bl	8009a5c <lcd_print>
 8002b06:	e01e      	b.n	8002b46 <menu+0x1bbe>
 8002b08:	2000107e 	.word	0x2000107e
 8002b0c:	2000150c 	.word	0x2000150c
 8002b10:	40010800 	.word	0x40010800
 8002b14:	2000109b 	.word	0x2000109b
 8002b18:	2000107b 	.word	0x2000107b
 8002b1c:	20000f9c 	.word	0x20000f9c
 8002b20:	20001098 	.word	0x20001098
 8002b24:	2000106c 	.word	0x2000106c
 8002b28:	20001520 	.word	0x20001520
 8002b2c:	2000107f 	.word	0x2000107f
 8002b30:	200014f8 	.word	0x200014f8
		} else if(platformSilindirTipi == 1) {
 8002b34:	4ba1      	ldr	r3, [pc, #644]	@ (8002dbc <menu+0x1e34>)
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d104      	bne.n	8002b46 <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 8002b3c:	4aa0      	ldr	r2, [pc, #640]	@ (8002dc0 <menu+0x1e38>)
 8002b3e:	2101      	movs	r1, #1
 8002b40:	2002      	movs	r0, #2
 8002b42:	f006 ff8b 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b46:	2102      	movs	r1, #2
 8002b48:	489e      	ldr	r0, [pc, #632]	@ (8002dc4 <menu+0x1e3c>)
 8002b4a:	f008 fa79 	bl	800b040 <HAL_GPIO_ReadPin>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d115      	bne.n	8002b80 <menu+0x1bf8>
 8002b54:	4b9c      	ldr	r3, [pc, #624]	@ (8002dc8 <menu+0x1e40>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	f083 0301 	eor.w	r3, r3, #1
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00e      	beq.n	8002b80 <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002b62:	4b96      	ldr	r3, [pc, #600]	@ (8002dbc <menu+0x1e34>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	3301      	adds	r3, #1
 8002b68:	b2da      	uxtb	r2, r3
 8002b6a:	4b94      	ldr	r3, [pc, #592]	@ (8002dbc <menu+0x1e34>)
 8002b6c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002b6e:	4b93      	ldr	r3, [pc, #588]	@ (8002dbc <menu+0x1e34>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d902      	bls.n	8002b7c <menu+0x1bf4>
				platformSilindirTipi = 0;
 8002b76:	4b91      	ldr	r3, [pc, #580]	@ (8002dbc <menu+0x1e34>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b7c:	f000 ff50 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b80:	2104      	movs	r1, #4
 8002b82:	4890      	ldr	r0, [pc, #576]	@ (8002dc4 <menu+0x1e3c>)
 8002b84:	f008 fa5c 	bl	800b040 <HAL_GPIO_ReadPin>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d115      	bne.n	8002bba <menu+0x1c32>
 8002b8e:	4b8e      	ldr	r3, [pc, #568]	@ (8002dc8 <menu+0x1e40>)
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	f083 0301 	eor.w	r3, r3, #1
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00e      	beq.n	8002bba <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002b9c:	4b87      	ldr	r3, [pc, #540]	@ (8002dbc <menu+0x1e34>)
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	4b85      	ldr	r3, [pc, #532]	@ (8002dbc <menu+0x1e34>)
 8002ba6:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002ba8:	4b84      	ldr	r3, [pc, #528]	@ (8002dbc <menu+0x1e34>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d002      	beq.n	8002bb6 <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 8002bb0:	4b82      	ldr	r3, [pc, #520]	@ (8002dbc <menu+0x1e34>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bb6:	f000 ff33 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bba:	2108      	movs	r1, #8
 8002bbc:	4881      	ldr	r0, [pc, #516]	@ (8002dc4 <menu+0x1e3c>)
 8002bbe:	f008 fa3f 	bl	800b040 <HAL_GPIO_ReadPin>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d118      	bne.n	8002bfa <menu+0x1c72>
 8002bc8:	4b7f      	ldr	r3, [pc, #508]	@ (8002dc8 <menu+0x1e40>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	f083 0301 	eor.w	r3, r3, #1
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d011      	beq.n	8002bfa <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 8002bd6:	4b79      	ldr	r3, [pc, #484]	@ (8002dbc <menu+0x1e34>)
 8002bd8:	781a      	ldrb	r2, [r3, #0]
 8002bda:	4b7c      	ldr	r3, [pc, #496]	@ (8002dcc <menu+0x1e44>)
 8002bdc:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002bde:	4b77      	ldr	r3, [pc, #476]	@ (8002dbc <menu+0x1e34>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d106      	bne.n	8002bf4 <menu+0x1c6c>
				altLimit = 1;
 8002be6:	4b7a      	ldr	r3, [pc, #488]	@ (8002dd0 <menu+0x1e48>)
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002bec:	4b78      	ldr	r3, [pc, #480]	@ (8002dd0 <menu+0x1e48>)
 8002bee:	781a      	ldrb	r2, [r3, #0]
 8002bf0:	4b76      	ldr	r3, [pc, #472]	@ (8002dcc <menu+0x1e44>)
 8002bf2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002bf4:	4b77      	ldr	r3, [pc, #476]	@ (8002dd4 <menu+0x1e4c>)
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002bfa:	4b77      	ldr	r3, [pc, #476]	@ (8002dd8 <menu+0x1e50>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b16      	cmp	r3, #22
 8002c00:	d164      	bne.n	8002ccc <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 8002c02:	4a76      	ldr	r2, [pc, #472]	@ (8002ddc <menu+0x1e54>)
 8002c04:	2101      	movs	r1, #1
 8002c06:	2001      	movs	r0, #1
 8002c08:	f006 ff28 	bl	8009a5c <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002c0c:	4a74      	ldr	r2, [pc, #464]	@ (8002de0 <menu+0x1e58>)
 8002c0e:	2101      	movs	r1, #1
 8002c10:	2002      	movs	r0, #2
 8002c12:	f006 ff23 	bl	8009a5c <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 8002c16:	4b73      	ldr	r3, [pc, #460]	@ (8002de4 <menu+0x1e5c>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	220a      	movs	r2, #10
 8002c1c:	4972      	ldr	r1, [pc, #456]	@ (8002de8 <menu+0x1e60>)
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f00b fa04 	bl	800e02c <itoa>
		lcd_print(2,16,snum);
 8002c24:	4a70      	ldr	r2, [pc, #448]	@ (8002de8 <menu+0x1e60>)
 8002c26:	2110      	movs	r1, #16
 8002c28:	2002      	movs	r0, #2
 8002c2a:	f006 ff17 	bl	8009a5c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c2e:	2102      	movs	r1, #2
 8002c30:	4864      	ldr	r0, [pc, #400]	@ (8002dc4 <menu+0x1e3c>)
 8002c32:	f008 fa05 	bl	800b040 <HAL_GPIO_ReadPin>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d115      	bne.n	8002c68 <menu+0x1ce0>
 8002c3c:	4b62      	ldr	r3, [pc, #392]	@ (8002dc8 <menu+0x1e40>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	f083 0301 	eor.w	r3, r3, #1
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00e      	beq.n	8002c68 <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 8002c4a:	4b66      	ldr	r3, [pc, #408]	@ (8002de4 <menu+0x1e5c>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	4b64      	ldr	r3, [pc, #400]	@ (8002de4 <menu+0x1e5c>)
 8002c54:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002c56:	4b63      	ldr	r3, [pc, #396]	@ (8002de4 <menu+0x1e5c>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b05      	cmp	r3, #5
 8002c5c:	d902      	bls.n	8002c64 <menu+0x1cdc>
				yukariValfTmr = 0;
 8002c5e:	4b61      	ldr	r3, [pc, #388]	@ (8002de4 <menu+0x1e5c>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c64:	f000 fedc 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c68:	2104      	movs	r1, #4
 8002c6a:	4856      	ldr	r0, [pc, #344]	@ (8002dc4 <menu+0x1e3c>)
 8002c6c:	f008 f9e8 	bl	800b040 <HAL_GPIO_ReadPin>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d115      	bne.n	8002ca2 <menu+0x1d1a>
 8002c76:	4b54      	ldr	r3, [pc, #336]	@ (8002dc8 <menu+0x1e40>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	f083 0301 	eor.w	r3, r3, #1
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00e      	beq.n	8002ca2 <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 8002c84:	4b57      	ldr	r3, [pc, #348]	@ (8002de4 <menu+0x1e5c>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	4b55      	ldr	r3, [pc, #340]	@ (8002de4 <menu+0x1e5c>)
 8002c8e:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002c90:	4b54      	ldr	r3, [pc, #336]	@ (8002de4 <menu+0x1e5c>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b06      	cmp	r3, #6
 8002c96:	d902      	bls.n	8002c9e <menu+0x1d16>
		   		yukariValfTmr = 5;
 8002c98:	4b52      	ldr	r3, [pc, #328]	@ (8002de4 <menu+0x1e5c>)
 8002c9a:	2205      	movs	r2, #5
 8002c9c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c9e:	f000 febf 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ca2:	2108      	movs	r1, #8
 8002ca4:	4847      	ldr	r0, [pc, #284]	@ (8002dc4 <menu+0x1e3c>)
 8002ca6:	f008 f9cb 	bl	800b040 <HAL_GPIO_ReadPin>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d10d      	bne.n	8002ccc <menu+0x1d44>
 8002cb0:	4b45      	ldr	r3, [pc, #276]	@ (8002dc8 <menu+0x1e40>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	f083 0301 	eor.w	r3, r3, #1
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d006      	beq.n	8002ccc <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 8002cbe:	4b49      	ldr	r3, [pc, #292]	@ (8002de4 <menu+0x1e5c>)
 8002cc0:	781a      	ldrb	r2, [r3, #0]
 8002cc2:	4b42      	ldr	r3, [pc, #264]	@ (8002dcc <menu+0x1e44>)
 8002cc4:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002cc6:	4b43      	ldr	r3, [pc, #268]	@ (8002dd4 <menu+0x1e4c>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002ccc:	4b42      	ldr	r3, [pc, #264]	@ (8002dd8 <menu+0x1e50>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b17      	cmp	r3, #23
 8002cd2:	d164      	bne.n	8002d9e <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 8002cd4:	4a45      	ldr	r2, [pc, #276]	@ (8002dec <menu+0x1e64>)
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	2001      	movs	r0, #1
 8002cda:	f006 febf 	bl	8009a5c <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002cde:	4a40      	ldr	r2, [pc, #256]	@ (8002de0 <menu+0x1e58>)
 8002ce0:	2101      	movs	r1, #1
 8002ce2:	2002      	movs	r0, #2
 8002ce4:	f006 feba 	bl	8009a5c <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 8002ce8:	4b41      	ldr	r3, [pc, #260]	@ (8002df0 <menu+0x1e68>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	220a      	movs	r2, #10
 8002cee:	493e      	ldr	r1, [pc, #248]	@ (8002de8 <menu+0x1e60>)
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f00b f99b 	bl	800e02c <itoa>
		lcd_print(2,16,snum);
 8002cf6:	4a3c      	ldr	r2, [pc, #240]	@ (8002de8 <menu+0x1e60>)
 8002cf8:	2110      	movs	r1, #16
 8002cfa:	2002      	movs	r0, #2
 8002cfc:	f006 feae 	bl	8009a5c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d00:	2102      	movs	r1, #2
 8002d02:	4830      	ldr	r0, [pc, #192]	@ (8002dc4 <menu+0x1e3c>)
 8002d04:	f008 f99c 	bl	800b040 <HAL_GPIO_ReadPin>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d115      	bne.n	8002d3a <menu+0x1db2>
 8002d0e:	4b2e      	ldr	r3, [pc, #184]	@ (8002dc8 <menu+0x1e40>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	f083 0301 	eor.w	r3, r3, #1
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00e      	beq.n	8002d3a <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 8002d1c:	4b34      	ldr	r3, [pc, #208]	@ (8002df0 <menu+0x1e68>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	3301      	adds	r3, #1
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	4b32      	ldr	r3, [pc, #200]	@ (8002df0 <menu+0x1e68>)
 8002d26:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8002d28:	4b31      	ldr	r3, [pc, #196]	@ (8002df0 <menu+0x1e68>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b05      	cmp	r3, #5
 8002d2e:	d902      	bls.n	8002d36 <menu+0x1dae>
				asagiValfTmr = 0;
 8002d30:	4b2f      	ldr	r3, [pc, #188]	@ (8002df0 <menu+0x1e68>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d36:	f000 fe73 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d3a:	2104      	movs	r1, #4
 8002d3c:	4821      	ldr	r0, [pc, #132]	@ (8002dc4 <menu+0x1e3c>)
 8002d3e:	f008 f97f 	bl	800b040 <HAL_GPIO_ReadPin>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d115      	bne.n	8002d74 <menu+0x1dec>
 8002d48:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc8 <menu+0x1e40>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	f083 0301 	eor.w	r3, r3, #1
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00e      	beq.n	8002d74 <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 8002d56:	4b26      	ldr	r3, [pc, #152]	@ (8002df0 <menu+0x1e68>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b2da      	uxtb	r2, r3
 8002d5e:	4b24      	ldr	r3, [pc, #144]	@ (8002df0 <menu+0x1e68>)
 8002d60:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8002d62:	4b23      	ldr	r3, [pc, #140]	@ (8002df0 <menu+0x1e68>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b06      	cmp	r3, #6
 8002d68:	d902      	bls.n	8002d70 <menu+0x1de8>
		   		asagiValfTmr = 5;
 8002d6a:	4b21      	ldr	r3, [pc, #132]	@ (8002df0 <menu+0x1e68>)
 8002d6c:	2205      	movs	r2, #5
 8002d6e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d70:	f000 fe56 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d74:	2108      	movs	r1, #8
 8002d76:	4813      	ldr	r0, [pc, #76]	@ (8002dc4 <menu+0x1e3c>)
 8002d78:	f008 f962 	bl	800b040 <HAL_GPIO_ReadPin>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d10d      	bne.n	8002d9e <menu+0x1e16>
 8002d82:	4b11      	ldr	r3, [pc, #68]	@ (8002dc8 <menu+0x1e40>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	f083 0301 	eor.w	r3, r3, #1
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d006      	beq.n	8002d9e <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 8002d90:	4b17      	ldr	r3, [pc, #92]	@ (8002df0 <menu+0x1e68>)
 8002d92:	781a      	ldrb	r2, [r3, #0]
 8002d94:	4b0d      	ldr	r3, [pc, #52]	@ (8002dcc <menu+0x1e44>)
 8002d96:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8002d98:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd4 <menu+0x1e4c>)
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8002d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd8 <menu+0x1e50>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b18      	cmp	r3, #24
 8002da4:	f040 8093 	bne.w	8002ece <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 8002da8:	4b12      	ldr	r3, [pc, #72]	@ (8002df4 <menu+0x1e6c>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d125      	bne.n	8002dfc <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 8002db0:	4a11      	ldr	r2, [pc, #68]	@ (8002df8 <menu+0x1e70>)
 8002db2:	2101      	movs	r1, #1
 8002db4:	2001      	movs	r0, #1
 8002db6:	f006 fe51 	bl	8009a5c <lcd_print>
 8002dba:	e028      	b.n	8002e0e <menu+0x1e86>
 8002dbc:	2000107f 	.word	0x2000107f
 8002dc0:	2000150c 	.word	0x2000150c
 8002dc4:	40010800 	.word	0x40010800
 8002dc8:	2000109b 	.word	0x2000109b
 8002dcc:	20000f9c 	.word	0x20000f9c
 8002dd0:	20001072 	.word	0x20001072
 8002dd4:	20001098 	.word	0x20001098
 8002dd8:	2000106c 	.word	0x2000106c
 8002ddc:	20001534 	.word	0x20001534
 8002de0:	2000137c 	.word	0x2000137c
 8002de4:	20001080 	.word	0x20001080
 8002de8:	2000100c 	.word	0x2000100c
 8002dec:	20001548 	.word	0x20001548
 8002df0:	20001081 	.word	0x20001081
 8002df4:	2000107b 	.word	0x2000107b
 8002df8:	2000155c 	.word	0x2000155c
		} else if(devirmeYuruyusSecim == 1) {
 8002dfc:	4b8c      	ldr	r3, [pc, #560]	@ (8003030 <menu+0x20a8>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d104      	bne.n	8002e0e <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 8002e04:	4a8b      	ldr	r2, [pc, #556]	@ (8003034 <menu+0x20ac>)
 8002e06:	2101      	movs	r1, #1
 8002e08:	2001      	movs	r0, #1
 8002e0a:	f006 fe27 	bl	8009a5c <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002e0e:	4a8a      	ldr	r2, [pc, #552]	@ (8003038 <menu+0x20b0>)
 8002e10:	2101      	movs	r1, #1
 8002e12:	2002      	movs	r0, #2
 8002e14:	f006 fe22 	bl	8009a5c <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8002e18:	4b88      	ldr	r3, [pc, #544]	@ (800303c <menu+0x20b4>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	220a      	movs	r2, #10
 8002e1e:	4988      	ldr	r1, [pc, #544]	@ (8003040 <menu+0x20b8>)
 8002e20:	4618      	mov	r0, r3
 8002e22:	f00b f903 	bl	800e02c <itoa>
		lcd_print(2, 16, snum);
 8002e26:	4a86      	ldr	r2, [pc, #536]	@ (8003040 <menu+0x20b8>)
 8002e28:	2110      	movs	r1, #16
 8002e2a:	2002      	movs	r0, #2
 8002e2c:	f006 fe16 	bl	8009a5c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e30:	2102      	movs	r1, #2
 8002e32:	4884      	ldr	r0, [pc, #528]	@ (8003044 <menu+0x20bc>)
 8002e34:	f008 f904 	bl	800b040 <HAL_GPIO_ReadPin>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d115      	bne.n	8002e6a <menu+0x1ee2>
 8002e3e:	4b82      	ldr	r3, [pc, #520]	@ (8003048 <menu+0x20c0>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	f083 0301 	eor.w	r3, r3, #1
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00e      	beq.n	8002e6a <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8002e4c:	4b7b      	ldr	r3, [pc, #492]	@ (800303c <menu+0x20b4>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	3301      	adds	r3, #1
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	4b79      	ldr	r3, [pc, #484]	@ (800303c <menu+0x20b4>)
 8002e56:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8002e58:	4b78      	ldr	r3, [pc, #480]	@ (800303c <menu+0x20b4>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b05      	cmp	r3, #5
 8002e5e:	d902      	bls.n	8002e66 <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 8002e60:	4b76      	ldr	r3, [pc, #472]	@ (800303c <menu+0x20b4>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e66:	f000 fddb 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e6a:	2104      	movs	r1, #4
 8002e6c:	4875      	ldr	r0, [pc, #468]	@ (8003044 <menu+0x20bc>)
 8002e6e:	f008 f8e7 	bl	800b040 <HAL_GPIO_ReadPin>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d115      	bne.n	8002ea4 <menu+0x1f1c>
 8002e78:	4b73      	ldr	r3, [pc, #460]	@ (8003048 <menu+0x20c0>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	f083 0301 	eor.w	r3, r3, #1
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00e      	beq.n	8002ea4 <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8002e86:	4b6d      	ldr	r3, [pc, #436]	@ (800303c <menu+0x20b4>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4b6b      	ldr	r3, [pc, #428]	@ (800303c <menu+0x20b4>)
 8002e90:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8002e92:	4b6a      	ldr	r3, [pc, #424]	@ (800303c <menu+0x20b4>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b06      	cmp	r3, #6
 8002e98:	d902      	bls.n	8002ea0 <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 8002e9a:	4b68      	ldr	r3, [pc, #416]	@ (800303c <menu+0x20b4>)
 8002e9c:	2205      	movs	r2, #5
 8002e9e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ea0:	f000 fdbe 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ea4:	2108      	movs	r1, #8
 8002ea6:	4867      	ldr	r0, [pc, #412]	@ (8003044 <menu+0x20bc>)
 8002ea8:	f008 f8ca 	bl	800b040 <HAL_GPIO_ReadPin>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d10d      	bne.n	8002ece <menu+0x1f46>
 8002eb2:	4b65      	ldr	r3, [pc, #404]	@ (8003048 <menu+0x20c0>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	f083 0301 	eor.w	r3, r3, #1
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d006      	beq.n	8002ece <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 8002ec0:	4b5e      	ldr	r3, [pc, #376]	@ (800303c <menu+0x20b4>)
 8002ec2:	781a      	ldrb	r2, [r3, #0]
 8002ec4:	4b61      	ldr	r3, [pc, #388]	@ (800304c <menu+0x20c4>)
 8002ec6:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8002ec8:	4b61      	ldr	r3, [pc, #388]	@ (8003050 <menu+0x20c8>)
 8002eca:	2201      	movs	r2, #1
 8002ecc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8002ece:	4b61      	ldr	r3, [pc, #388]	@ (8003054 <menu+0x20cc>)
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b19      	cmp	r3, #25
 8002ed4:	d172      	bne.n	8002fbc <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 8002ed6:	4b56      	ldr	r3, [pc, #344]	@ (8003030 <menu+0x20a8>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d105      	bne.n	8002eea <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 8002ede:	4a5e      	ldr	r2, [pc, #376]	@ (8003058 <menu+0x20d0>)
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	2001      	movs	r0, #1
 8002ee4:	f006 fdba 	bl	8009a5c <lcd_print>
 8002ee8:	e008      	b.n	8002efc <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 8002eea:	4b51      	ldr	r3, [pc, #324]	@ (8003030 <menu+0x20a8>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d104      	bne.n	8002efc <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 8002ef2:	4a5a      	ldr	r2, [pc, #360]	@ (800305c <menu+0x20d4>)
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	2001      	movs	r0, #1
 8002ef8:	f006 fdb0 	bl	8009a5c <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002efc:	4a4e      	ldr	r2, [pc, #312]	@ (8003038 <menu+0x20b0>)
 8002efe:	2101      	movs	r1, #1
 8002f00:	2002      	movs	r0, #2
 8002f02:	f006 fdab 	bl	8009a5c <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8002f06:	4b56      	ldr	r3, [pc, #344]	@ (8003060 <menu+0x20d8>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	220a      	movs	r2, #10
 8002f0c:	494c      	ldr	r1, [pc, #304]	@ (8003040 <menu+0x20b8>)
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f00b f88c 	bl	800e02c <itoa>
		lcd_print(2,16,snum);
 8002f14:	4a4a      	ldr	r2, [pc, #296]	@ (8003040 <menu+0x20b8>)
 8002f16:	2110      	movs	r1, #16
 8002f18:	2002      	movs	r0, #2
 8002f1a:	f006 fd9f 	bl	8009a5c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f1e:	2102      	movs	r1, #2
 8002f20:	4848      	ldr	r0, [pc, #288]	@ (8003044 <menu+0x20bc>)
 8002f22:	f008 f88d 	bl	800b040 <HAL_GPIO_ReadPin>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d115      	bne.n	8002f58 <menu+0x1fd0>
 8002f2c:	4b46      	ldr	r3, [pc, #280]	@ (8003048 <menu+0x20c0>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	f083 0301 	eor.w	r3, r3, #1
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00e      	beq.n	8002f58 <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8002f3a:	4b49      	ldr	r3, [pc, #292]	@ (8003060 <menu+0x20d8>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	b2da      	uxtb	r2, r3
 8002f42:	4b47      	ldr	r3, [pc, #284]	@ (8003060 <menu+0x20d8>)
 8002f44:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8002f46:	4b46      	ldr	r3, [pc, #280]	@ (8003060 <menu+0x20d8>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b05      	cmp	r3, #5
 8002f4c:	d902      	bls.n	8002f54 <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 8002f4e:	4b44      	ldr	r3, [pc, #272]	@ (8003060 <menu+0x20d8>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f54:	f000 fd64 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f58:	2104      	movs	r1, #4
 8002f5a:	483a      	ldr	r0, [pc, #232]	@ (8003044 <menu+0x20bc>)
 8002f5c:	f008 f870 	bl	800b040 <HAL_GPIO_ReadPin>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d115      	bne.n	8002f92 <menu+0x200a>
 8002f66:	4b38      	ldr	r3, [pc, #224]	@ (8003048 <menu+0x20c0>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	f083 0301 	eor.w	r3, r3, #1
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00e      	beq.n	8002f92 <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8002f74:	4b3a      	ldr	r3, [pc, #232]	@ (8003060 <menu+0x20d8>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	4b38      	ldr	r3, [pc, #224]	@ (8003060 <menu+0x20d8>)
 8002f7e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8002f80:	4b37      	ldr	r3, [pc, #220]	@ (8003060 <menu+0x20d8>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b06      	cmp	r3, #6
 8002f86:	d902      	bls.n	8002f8e <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 8002f88:	4b35      	ldr	r3, [pc, #212]	@ (8003060 <menu+0x20d8>)
 8002f8a:	2205      	movs	r2, #5
 8002f8c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f8e:	f000 fd47 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f92:	2108      	movs	r1, #8
 8002f94:	482b      	ldr	r0, [pc, #172]	@ (8003044 <menu+0x20bc>)
 8002f96:	f008 f853 	bl	800b040 <HAL_GPIO_ReadPin>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d10d      	bne.n	8002fbc <menu+0x2034>
 8002fa0:	4b29      	ldr	r3, [pc, #164]	@ (8003048 <menu+0x20c0>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	f083 0301 	eor.w	r3, r3, #1
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d006      	beq.n	8002fbc <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 8002fae:	4b2c      	ldr	r3, [pc, #176]	@ (8003060 <menu+0x20d8>)
 8002fb0:	781a      	ldrb	r2, [r3, #0]
 8002fb2:	4b26      	ldr	r3, [pc, #152]	@ (800304c <menu+0x20c4>)
 8002fb4:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8002fb6:	4b26      	ldr	r3, [pc, #152]	@ (8003050 <menu+0x20c8>)
 8002fb8:	2201      	movs	r2, #1
 8002fba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8002fbc:	4b25      	ldr	r3, [pc, #148]	@ (8003054 <menu+0x20cc>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b1a      	cmp	r3, #26
 8002fc2:	f040 80b7 	bne.w	8003134 <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 8002fc6:	4a27      	ldr	r2, [pc, #156]	@ (8003064 <menu+0x20dc>)
 8002fc8:	2101      	movs	r1, #1
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f006 fd46 	bl	8009a5c <lcd_print>

		if(makineCalismaTmr > 99) {
 8002fd0:	4b25      	ldr	r3, [pc, #148]	@ (8003068 <menu+0x20e0>)
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b63      	cmp	r3, #99	@ 0x63
 8002fd6:	d911      	bls.n	8002ffc <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 8002fd8:	4a17      	ldr	r2, [pc, #92]	@ (8003038 <menu+0x20b0>)
 8002fda:	2101      	movs	r1, #1
 8002fdc:	2002      	movs	r0, #2
 8002fde:	f006 fd3d 	bl	8009a5c <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8002fe2:	4b21      	ldr	r3, [pc, #132]	@ (8003068 <menu+0x20e0>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	220a      	movs	r2, #10
 8002fe8:	4915      	ldr	r1, [pc, #84]	@ (8003040 <menu+0x20b8>)
 8002fea:	4618      	mov	r0, r3
 8002fec:	f00b f81e 	bl	800e02c <itoa>
			lcd_print(2,14,snum);
 8002ff0:	4a13      	ldr	r2, [pc, #76]	@ (8003040 <menu+0x20b8>)
 8002ff2:	210e      	movs	r1, #14
 8002ff4:	2002      	movs	r0, #2
 8002ff6:	f006 fd31 	bl	8009a5c <lcd_print>
 8002ffa:	e04c      	b.n	8003096 <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8002ffc:	4b1a      	ldr	r3, [pc, #104]	@ (8003068 <menu+0x20e0>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b09      	cmp	r3, #9
 8003002:	d933      	bls.n	800306c <menu+0x20e4>
 8003004:	4b18      	ldr	r3, [pc, #96]	@ (8003068 <menu+0x20e0>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b63      	cmp	r3, #99	@ 0x63
 800300a:	d82f      	bhi.n	800306c <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 800300c:	4a0a      	ldr	r2, [pc, #40]	@ (8003038 <menu+0x20b0>)
 800300e:	2101      	movs	r1, #1
 8003010:	2002      	movs	r0, #2
 8003012:	f006 fd23 	bl	8009a5c <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003016:	4b14      	ldr	r3, [pc, #80]	@ (8003068 <menu+0x20e0>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	220a      	movs	r2, #10
 800301c:	4908      	ldr	r1, [pc, #32]	@ (8003040 <menu+0x20b8>)
 800301e:	4618      	mov	r0, r3
 8003020:	f00b f804 	bl	800e02c <itoa>
			lcd_print(2, 15, snum);
 8003024:	4a06      	ldr	r2, [pc, #24]	@ (8003040 <menu+0x20b8>)
 8003026:	210f      	movs	r1, #15
 8003028:	2002      	movs	r0, #2
 800302a:	f006 fd17 	bl	8009a5c <lcd_print>
 800302e:	e032      	b.n	8003096 <menu+0x210e>
 8003030:	2000107b 	.word	0x2000107b
 8003034:	20001570 	.word	0x20001570
 8003038:	2000137c 	.word	0x2000137c
 800303c:	20001082 	.word	0x20001082
 8003040:	2000100c 	.word	0x2000100c
 8003044:	40010800 	.word	0x40010800
 8003048:	2000109b 	.word	0x2000109b
 800304c:	20000f9c 	.word	0x20000f9c
 8003050:	20001098 	.word	0x20001098
 8003054:	2000106c 	.word	0x2000106c
 8003058:	20001584 	.word	0x20001584
 800305c:	20001598 	.word	0x20001598
 8003060:	20001083 	.word	0x20001083
 8003064:	200015ac 	.word	0x200015ac
 8003068:	20001084 	.word	0x20001084
		} else if(makineCalismaTmr <=  9) {
 800306c:	4b72      	ldr	r3, [pc, #456]	@ (8003238 <menu+0x22b0>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b09      	cmp	r3, #9
 8003072:	d810      	bhi.n	8003096 <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 8003074:	4a71      	ldr	r2, [pc, #452]	@ (800323c <menu+0x22b4>)
 8003076:	2101      	movs	r1, #1
 8003078:	2002      	movs	r0, #2
 800307a:	f006 fcef 	bl	8009a5c <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800307e:	4b6e      	ldr	r3, [pc, #440]	@ (8003238 <menu+0x22b0>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	220a      	movs	r2, #10
 8003084:	496e      	ldr	r1, [pc, #440]	@ (8003240 <menu+0x22b8>)
 8003086:	4618      	mov	r0, r3
 8003088:	f00a ffd0 	bl	800e02c <itoa>
			lcd_print(2, 16, snum);
 800308c:	4a6c      	ldr	r2, [pc, #432]	@ (8003240 <menu+0x22b8>)
 800308e:	2110      	movs	r1, #16
 8003090:	2002      	movs	r0, #2
 8003092:	f006 fce3 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003096:	2102      	movs	r1, #2
 8003098:	486a      	ldr	r0, [pc, #424]	@ (8003244 <menu+0x22bc>)
 800309a:	f007 ffd1 	bl	800b040 <HAL_GPIO_ReadPin>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d115      	bne.n	80030d0 <menu+0x2148>
 80030a4:	4b68      	ldr	r3, [pc, #416]	@ (8003248 <menu+0x22c0>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	f083 0301 	eor.w	r3, r3, #1
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00e      	beq.n	80030d0 <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 80030b2:	4b61      	ldr	r3, [pc, #388]	@ (8003238 <menu+0x22b0>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	3301      	adds	r3, #1
 80030b8:	b2da      	uxtb	r2, r3
 80030ba:	4b5f      	ldr	r3, [pc, #380]	@ (8003238 <menu+0x22b0>)
 80030bc:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80030be:	4b5e      	ldr	r3, [pc, #376]	@ (8003238 <menu+0x22b0>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2bb4      	cmp	r3, #180	@ 0xb4
 80030c4:	d902      	bls.n	80030cc <menu+0x2144>
				makineCalismaTmr = 0;
 80030c6:	4b5c      	ldr	r3, [pc, #368]	@ (8003238 <menu+0x22b0>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030cc:	f000 fca8 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030d0:	2104      	movs	r1, #4
 80030d2:	485c      	ldr	r0, [pc, #368]	@ (8003244 <menu+0x22bc>)
 80030d4:	f007 ffb4 	bl	800b040 <HAL_GPIO_ReadPin>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d115      	bne.n	800310a <menu+0x2182>
 80030de:	4b5a      	ldr	r3, [pc, #360]	@ (8003248 <menu+0x22c0>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	f083 0301 	eor.w	r3, r3, #1
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00e      	beq.n	800310a <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 80030ec:	4b52      	ldr	r3, [pc, #328]	@ (8003238 <menu+0x22b0>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	4b50      	ldr	r3, [pc, #320]	@ (8003238 <menu+0x22b0>)
 80030f6:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80030f8:	4b4f      	ldr	r3, [pc, #316]	@ (8003238 <menu+0x22b0>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2bb5      	cmp	r3, #181	@ 0xb5
 80030fe:	d902      	bls.n	8003106 <menu+0x217e>
		   		makineCalismaTmr = 180;
 8003100:	4b4d      	ldr	r3, [pc, #308]	@ (8003238 <menu+0x22b0>)
 8003102:	22b4      	movs	r2, #180	@ 0xb4
 8003104:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003106:	f000 fc8b 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800310a:	2108      	movs	r1, #8
 800310c:	484d      	ldr	r0, [pc, #308]	@ (8003244 <menu+0x22bc>)
 800310e:	f007 ff97 	bl	800b040 <HAL_GPIO_ReadPin>
 8003112:	4603      	mov	r3, r0
 8003114:	2b01      	cmp	r3, #1
 8003116:	d10d      	bne.n	8003134 <menu+0x21ac>
 8003118:	4b4b      	ldr	r3, [pc, #300]	@ (8003248 <menu+0x22c0>)
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	f083 0301 	eor.w	r3, r3, #1
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d006      	beq.n	8003134 <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 8003126:	4b44      	ldr	r3, [pc, #272]	@ (8003238 <menu+0x22b0>)
 8003128:	781a      	ldrb	r2, [r3, #0]
 800312a:	4b48      	ldr	r3, [pc, #288]	@ (800324c <menu+0x22c4>)
 800312c:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800312e:	4b48      	ldr	r3, [pc, #288]	@ (8003250 <menu+0x22c8>)
 8003130:	2201      	movs	r2, #1
 8003132:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003134:	4b47      	ldr	r3, [pc, #284]	@ (8003254 <menu+0x22cc>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b1b      	cmp	r3, #27
 800313a:	d166      	bne.n	800320a <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 800313c:	4a46      	ldr	r2, [pc, #280]	@ (8003258 <menu+0x22d0>)
 800313e:	2101      	movs	r1, #1
 8003140:	2001      	movs	r0, #1
 8003142:	f006 fc8b 	bl	8009a5c <lcd_print>

		if(buzzer == 0) {
 8003146:	4b45      	ldr	r3, [pc, #276]	@ (800325c <menu+0x22d4>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d105      	bne.n	800315a <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 800314e:	4a44      	ldr	r2, [pc, #272]	@ (8003260 <menu+0x22d8>)
 8003150:	2101      	movs	r1, #1
 8003152:	2002      	movs	r0, #2
 8003154:	f006 fc82 	bl	8009a5c <lcd_print>
 8003158:	e008      	b.n	800316c <menu+0x21e4>
		} else if(buzzer == 1) {
 800315a:	4b40      	ldr	r3, [pc, #256]	@ (800325c <menu+0x22d4>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d104      	bne.n	800316c <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 8003162:	4a40      	ldr	r2, [pc, #256]	@ (8003264 <menu+0x22dc>)
 8003164:	2101      	movs	r1, #1
 8003166:	2002      	movs	r0, #2
 8003168:	f006 fc78 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800316c:	2102      	movs	r1, #2
 800316e:	4835      	ldr	r0, [pc, #212]	@ (8003244 <menu+0x22bc>)
 8003170:	f007 ff66 	bl	800b040 <HAL_GPIO_ReadPin>
 8003174:	4603      	mov	r3, r0
 8003176:	2b01      	cmp	r3, #1
 8003178:	d115      	bne.n	80031a6 <menu+0x221e>
 800317a:	4b33      	ldr	r3, [pc, #204]	@ (8003248 <menu+0x22c0>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	f083 0301 	eor.w	r3, r3, #1
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00e      	beq.n	80031a6 <menu+0x221e>
			buzzer = buzzer + 1;
 8003188:	4b34      	ldr	r3, [pc, #208]	@ (800325c <menu+0x22d4>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	3301      	adds	r3, #1
 800318e:	b2da      	uxtb	r2, r3
 8003190:	4b32      	ldr	r3, [pc, #200]	@ (800325c <menu+0x22d4>)
 8003192:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003194:	4b31      	ldr	r3, [pc, #196]	@ (800325c <menu+0x22d4>)
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d902      	bls.n	80031a2 <menu+0x221a>
				buzzer = 0;
 800319c:	4b2f      	ldr	r3, [pc, #188]	@ (800325c <menu+0x22d4>)
 800319e:	2200      	movs	r2, #0
 80031a0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031a2:	f000 fc3d 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031a6:	2104      	movs	r1, #4
 80031a8:	4826      	ldr	r0, [pc, #152]	@ (8003244 <menu+0x22bc>)
 80031aa:	f007 ff49 	bl	800b040 <HAL_GPIO_ReadPin>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d115      	bne.n	80031e0 <menu+0x2258>
 80031b4:	4b24      	ldr	r3, [pc, #144]	@ (8003248 <menu+0x22c0>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	f083 0301 	eor.w	r3, r3, #1
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00e      	beq.n	80031e0 <menu+0x2258>
			buzzer = buzzer - 1;
 80031c2:	4b26      	ldr	r3, [pc, #152]	@ (800325c <menu+0x22d4>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	4b24      	ldr	r3, [pc, #144]	@ (800325c <menu+0x22d4>)
 80031cc:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80031ce:	4b23      	ldr	r3, [pc, #140]	@ (800325c <menu+0x22d4>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d002      	beq.n	80031dc <menu+0x2254>
		   		buzzer = 1;
 80031d6:	4b21      	ldr	r3, [pc, #132]	@ (800325c <menu+0x22d4>)
 80031d8:	2201      	movs	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031dc:	f000 fc20 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031e0:	2108      	movs	r1, #8
 80031e2:	4818      	ldr	r0, [pc, #96]	@ (8003244 <menu+0x22bc>)
 80031e4:	f007 ff2c 	bl	800b040 <HAL_GPIO_ReadPin>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d10d      	bne.n	800320a <menu+0x2282>
 80031ee:	4b16      	ldr	r3, [pc, #88]	@ (8003248 <menu+0x22c0>)
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	f083 0301 	eor.w	r3, r3, #1
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d006      	beq.n	800320a <menu+0x2282>
			eepromData[25] = buzzer;
 80031fc:	4b17      	ldr	r3, [pc, #92]	@ (800325c <menu+0x22d4>)
 80031fe:	781a      	ldrb	r2, [r3, #0]
 8003200:	4b12      	ldr	r3, [pc, #72]	@ (800324c <menu+0x22c4>)
 8003202:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003204:	4b12      	ldr	r3, [pc, #72]	@ (8003250 <menu+0x22c8>)
 8003206:	2201      	movs	r2, #1
 8003208:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 800320a:	4b12      	ldr	r3, [pc, #72]	@ (8003254 <menu+0x22cc>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b1c      	cmp	r3, #28
 8003210:	f040 8088 	bne.w	8003324 <menu+0x239c>
		calismaSayModu = 0;
 8003214:	4b14      	ldr	r3, [pc, #80]	@ (8003268 <menu+0x22e0>)
 8003216:	2200      	movs	r2, #0
 8003218:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 800321a:	4a14      	ldr	r2, [pc, #80]	@ (800326c <menu+0x22e4>)
 800321c:	2101      	movs	r1, #1
 800321e:	2001      	movs	r0, #1
 8003220:	f006 fc1c 	bl	8009a5c <lcd_print>

		if(demoMode == 0) {
 8003224:	4b12      	ldr	r3, [pc, #72]	@ (8003270 <menu+0x22e8>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d123      	bne.n	8003274 <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 800322c:	4a0c      	ldr	r2, [pc, #48]	@ (8003260 <menu+0x22d8>)
 800322e:	2101      	movs	r1, #1
 8003230:	2002      	movs	r0, #2
 8003232:	f006 fc13 	bl	8009a5c <lcd_print>
 8003236:	e026      	b.n	8003286 <menu+0x22fe>
 8003238:	20001084 	.word	0x20001084
 800323c:	2000137c 	.word	0x2000137c
 8003240:	2000100c 	.word	0x2000100c
 8003244:	40010800 	.word	0x40010800
 8003248:	2000109b 	.word	0x2000109b
 800324c:	20000f9c 	.word	0x20000f9c
 8003250:	20001098 	.word	0x20001098
 8003254:	2000106c 	.word	0x2000106c
 8003258:	20000128 	.word	0x20000128
 800325c:	20001088 	.word	0x20001088
 8003260:	20001250 	.word	0x20001250
 8003264:	20001264 	.word	0x20001264
 8003268:	2000108c 	.word	0x2000108c
 800326c:	2000013c 	.word	0x2000013c
 8003270:	2000108a 	.word	0x2000108a
		} else if(demoMode == 1) {
 8003274:	4b80      	ldr	r3, [pc, #512]	@ (8003478 <menu+0x24f0>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d104      	bne.n	8003286 <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 800327c:	4a7f      	ldr	r2, [pc, #508]	@ (800347c <menu+0x24f4>)
 800327e:	2101      	movs	r1, #1
 8003280:	2002      	movs	r0, #2
 8003282:	f006 fbeb 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003286:	2102      	movs	r1, #2
 8003288:	487d      	ldr	r0, [pc, #500]	@ (8003480 <menu+0x24f8>)
 800328a:	f007 fed9 	bl	800b040 <HAL_GPIO_ReadPin>
 800328e:	4603      	mov	r3, r0
 8003290:	2b01      	cmp	r3, #1
 8003292:	d115      	bne.n	80032c0 <menu+0x2338>
 8003294:	4b7b      	ldr	r3, [pc, #492]	@ (8003484 <menu+0x24fc>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	f083 0301 	eor.w	r3, r3, #1
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00e      	beq.n	80032c0 <menu+0x2338>
			demoMode = demoMode + 1;
 80032a2:	4b75      	ldr	r3, [pc, #468]	@ (8003478 <menu+0x24f0>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	3301      	adds	r3, #1
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	4b73      	ldr	r3, [pc, #460]	@ (8003478 <menu+0x24f0>)
 80032ac:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80032ae:	4b72      	ldr	r3, [pc, #456]	@ (8003478 <menu+0x24f0>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d902      	bls.n	80032bc <menu+0x2334>
				demoMode = 0;
 80032b6:	4b70      	ldr	r3, [pc, #448]	@ (8003478 <menu+0x24f0>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032bc:	f000 fbb0 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032c0:	2104      	movs	r1, #4
 80032c2:	486f      	ldr	r0, [pc, #444]	@ (8003480 <menu+0x24f8>)
 80032c4:	f007 febc 	bl	800b040 <HAL_GPIO_ReadPin>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d115      	bne.n	80032fa <menu+0x2372>
 80032ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003484 <menu+0x24fc>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	f083 0301 	eor.w	r3, r3, #1
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00e      	beq.n	80032fa <menu+0x2372>
			demoMode = demoMode - 1;
 80032dc:	4b66      	ldr	r3, [pc, #408]	@ (8003478 <menu+0x24f0>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	4b64      	ldr	r3, [pc, #400]	@ (8003478 <menu+0x24f0>)
 80032e6:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80032e8:	4b63      	ldr	r3, [pc, #396]	@ (8003478 <menu+0x24f0>)
 80032ea:	781b      	ldrb	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <menu+0x236e>
		   		demoMode = 1;
 80032f0:	4b61      	ldr	r3, [pc, #388]	@ (8003478 <menu+0x24f0>)
 80032f2:	2201      	movs	r2, #1
 80032f4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032f6:	f000 fb93 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032fa:	2108      	movs	r1, #8
 80032fc:	4860      	ldr	r0, [pc, #384]	@ (8003480 <menu+0x24f8>)
 80032fe:	f007 fe9f 	bl	800b040 <HAL_GPIO_ReadPin>
 8003302:	4603      	mov	r3, r0
 8003304:	2b01      	cmp	r3, #1
 8003306:	d10d      	bne.n	8003324 <menu+0x239c>
 8003308:	4b5e      	ldr	r3, [pc, #376]	@ (8003484 <menu+0x24fc>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	f083 0301 	eor.w	r3, r3, #1
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d006      	beq.n	8003324 <menu+0x239c>
			eepromData[26] = demoMode;
 8003316:	4b58      	ldr	r3, [pc, #352]	@ (8003478 <menu+0x24f0>)
 8003318:	781a      	ldrb	r2, [r3, #0]
 800331a:	4b5b      	ldr	r3, [pc, #364]	@ (8003488 <menu+0x2500>)
 800331c:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800331e:	4b5b      	ldr	r3, [pc, #364]	@ (800348c <menu+0x2504>)
 8003320:	2201      	movs	r2, #1
 8003322:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003324:	4b5a      	ldr	r3, [pc, #360]	@ (8003490 <menu+0x2508>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b1d      	cmp	r3, #29
 800332a:	f040 80d5 	bne.w	80034d8 <menu+0x2550>
		finalCount=0;
 800332e:	4b59      	ldr	r3, [pc, #356]	@ (8003494 <menu+0x250c>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
		if(calismaSayModu == 0) {
 8003334:	4b58      	ldr	r3, [pc, #352]	@ (8003498 <menu+0x2510>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d135      	bne.n	80033a8 <menu+0x2420>
			lcd_print(1, 1, calismaSayisiText);
 800333c:	4a57      	ldr	r2, [pc, #348]	@ (800349c <menu+0x2514>)
 800333e:	2101      	movs	r1, #1
 8003340:	2001      	movs	r0, #1
 8003342:	f006 fb8b 	bl	8009a5c <lcd_print>

			if(demoMode == 1) {
 8003346:	4b4c      	ldr	r3, [pc, #304]	@ (8003478 <menu+0x24f0>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d113      	bne.n	8003376 <menu+0x23ee>
				finalCount += calismaCountDemo * 255; //sıfır durumu da dahil ediliyor
 800334e:	4b54      	ldr	r3, [pc, #336]	@ (80034a0 <menu+0x2518>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	4613      	mov	r3, r2
 8003356:	021b      	lsls	r3, r3, #8
 8003358:	1a9a      	subs	r2, r3, r2
 800335a:	4b4e      	ldr	r3, [pc, #312]	@ (8003494 <menu+0x250c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4413      	add	r3, r2
 8003360:	4a4c      	ldr	r2, [pc, #304]	@ (8003494 <menu+0x250c>)
 8003362:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisiDemo;
 8003364:	4b4f      	ldr	r3, [pc, #316]	@ (80034a4 <menu+0x251c>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	461a      	mov	r2, r3
 800336a:	4b4a      	ldr	r3, [pc, #296]	@ (8003494 <menu+0x250c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4413      	add	r3, r2
 8003370:	4a48      	ldr	r2, [pc, #288]	@ (8003494 <menu+0x250c>)
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	e012      	b.n	800339c <menu+0x2414>
			} else {
				finalCount += calismaCount * 255; //sıfır durumu da dahil ediliyor
 8003376:	4b4c      	ldr	r3, [pc, #304]	@ (80034a8 <menu+0x2520>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	4613      	mov	r3, r2
 800337e:	021b      	lsls	r3, r3, #8
 8003380:	1a9a      	subs	r2, r3, r2
 8003382:	4b44      	ldr	r3, [pc, #272]	@ (8003494 <menu+0x250c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4413      	add	r3, r2
 8003388:	4a42      	ldr	r2, [pc, #264]	@ (8003494 <menu+0x250c>)
 800338a:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisi;
 800338c:	4b47      	ldr	r3, [pc, #284]	@ (80034ac <menu+0x2524>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	461a      	mov	r2, r3
 8003392:	4b40      	ldr	r3, [pc, #256]	@ (8003494 <menu+0x250c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4413      	add	r3, r2
 8003398:	4a3e      	ldr	r2, [pc, #248]	@ (8003494 <menu+0x250c>)
 800339a:	6013      	str	r3, [r2, #0]
			}

			displayCycleOnLCD(finalCount);
 800339c:	4b3d      	ldr	r3, [pc, #244]	@ (8003494 <menu+0x250c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fa93 	bl	80038cc <displayCycleOnLCD>
 80033a6:	e00d      	b.n	80033c4 <menu+0x243c>
		} else if(calismaSayModu == 1) {
 80033a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003498 <menu+0x2510>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d109      	bne.n	80033c4 <menu+0x243c>
			lcd_print(1, 1, calismaSayisiText);
 80033b0:	4a3a      	ldr	r2, [pc, #232]	@ (800349c <menu+0x2514>)
 80033b2:	2101      	movs	r1, #1
 80033b4:	2001      	movs	r0, #1
 80033b6:	f006 fb51 	bl	8009a5c <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 80033ba:	4a3d      	ldr	r2, [pc, #244]	@ (80034b0 <menu+0x2528>)
 80033bc:	2101      	movs	r1, #1
 80033be:	2002      	movs	r0, #2
 80033c0:	f006 fb4c 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033c4:	2102      	movs	r1, #2
 80033c6:	482e      	ldr	r0, [pc, #184]	@ (8003480 <menu+0x24f8>)
 80033c8:	f007 fe3a 	bl	800b040 <HAL_GPIO_ReadPin>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d115      	bne.n	80033fe <menu+0x2476>
 80033d2:	4b2c      	ldr	r3, [pc, #176]	@ (8003484 <menu+0x24fc>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	f083 0301 	eor.w	r3, r3, #1
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00e      	beq.n	80033fe <menu+0x2476>
			calismaSayModu = calismaSayModu + 1;
 80033e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003498 <menu+0x2510>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	3301      	adds	r3, #1
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	4b2b      	ldr	r3, [pc, #172]	@ (8003498 <menu+0x2510>)
 80033ea:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80033ec:	4b2a      	ldr	r3, [pc, #168]	@ (8003498 <menu+0x2510>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d902      	bls.n	80033fa <menu+0x2472>
				calismaSayModu = 0;
 80033f4:	4b28      	ldr	r3, [pc, #160]	@ (8003498 <menu+0x2510>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033fa:	f000 fb11 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033fe:	2104      	movs	r1, #4
 8003400:	481f      	ldr	r0, [pc, #124]	@ (8003480 <menu+0x24f8>)
 8003402:	f007 fe1d 	bl	800b040 <HAL_GPIO_ReadPin>
 8003406:	4603      	mov	r3, r0
 8003408:	2b01      	cmp	r3, #1
 800340a:	d115      	bne.n	8003438 <menu+0x24b0>
 800340c:	4b1d      	ldr	r3, [pc, #116]	@ (8003484 <menu+0x24fc>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	f083 0301 	eor.w	r3, r3, #1
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00e      	beq.n	8003438 <menu+0x24b0>
			calismaSayModu = calismaSayModu - 1;
 800341a:	4b1f      	ldr	r3, [pc, #124]	@ (8003498 <menu+0x2510>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	3b01      	subs	r3, #1
 8003420:	b2da      	uxtb	r2, r3
 8003422:	4b1d      	ldr	r3, [pc, #116]	@ (8003498 <menu+0x2510>)
 8003424:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8003426:	4b1c      	ldr	r3, [pc, #112]	@ (8003498 <menu+0x2510>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <menu+0x24ac>
		   		calismaSayModu = 1;
 800342e:	4b1a      	ldr	r3, [pc, #104]	@ (8003498 <menu+0x2510>)
 8003430:	2201      	movs	r2, #1
 8003432:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003434:	f000 faf4 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003438:	2108      	movs	r1, #8
 800343a:	4811      	ldr	r0, [pc, #68]	@ (8003480 <menu+0x24f8>)
 800343c:	f007 fe00 	bl	800b040 <HAL_GPIO_ReadPin>
 8003440:	4603      	mov	r3, r0
 8003442:	2b01      	cmp	r3, #1
 8003444:	d148      	bne.n	80034d8 <menu+0x2550>
 8003446:	4b0f      	ldr	r3, [pc, #60]	@ (8003484 <menu+0x24fc>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	f083 0301 	eor.w	r3, r3, #1
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d041      	beq.n	80034d8 <menu+0x2550>
			if(demoMode == 1) {
 8003454:	4b08      	ldr	r3, [pc, #32]	@ (8003478 <menu+0x24f0>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d12b      	bne.n	80034b4 <menu+0x252c>
				eepromData[28] = 0;
 800345c:	4b0a      	ldr	r3, [pc, #40]	@ (8003488 <menu+0x2500>)
 800345e:	2200      	movs	r2, #0
 8003460:	771a      	strb	r2, [r3, #28]
				eepromData[30] = 0;
 8003462:	4b09      	ldr	r3, [pc, #36]	@ (8003488 <menu+0x2500>)
 8003464:	2200      	movs	r2, #0
 8003466:	779a      	strb	r2, [r3, #30]
				calismaSayisiDemo = 0;
 8003468:	4b0e      	ldr	r3, [pc, #56]	@ (80034a4 <menu+0x251c>)
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]
				calismaCountDemo = 0;
 800346e:	4b0c      	ldr	r3, [pc, #48]	@ (80034a0 <menu+0x2518>)
 8003470:	2200      	movs	r2, #0
 8003472:	701a      	strb	r2, [r3, #0]
 8003474:	e02a      	b.n	80034cc <menu+0x2544>
 8003476:	bf00      	nop
 8003478:	2000108a 	.word	0x2000108a
 800347c:	20001264 	.word	0x20001264
 8003480:	40010800 	.word	0x40010800
 8003484:	2000109b 	.word	0x2000109b
 8003488:	20000f9c 	.word	0x20000f9c
 800348c:	20001098 	.word	0x20001098
 8003490:	2000106c 	.word	0x2000106c
 8003494:	20001068 	.word	0x20001068
 8003498:	2000108c 	.word	0x2000108c
 800349c:	200015c0 	.word	0x200015c0
 80034a0:	20001067 	.word	0x20001067
 80034a4:	20001065 	.word	0x20001065
 80034a8:	20001066 	.word	0x20001066
 80034ac:	20001064 	.word	0x20001064
 80034b0:	200015d4 	.word	0x200015d4
			} else {
				eepromData[27] = 0;
 80034b4:	4b49      	ldr	r3, [pc, #292]	@ (80035dc <menu+0x2654>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	76da      	strb	r2, [r3, #27]
				eepromData[29] = 0;
 80034ba:	4b48      	ldr	r3, [pc, #288]	@ (80035dc <menu+0x2654>)
 80034bc:	2200      	movs	r2, #0
 80034be:	775a      	strb	r2, [r3, #29]
				calismaSayisi = 0;
 80034c0:	4b47      	ldr	r3, [pc, #284]	@ (80035e0 <menu+0x2658>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]
				calismaCount = 0;
 80034c6:	4b47      	ldr	r3, [pc, #284]	@ (80035e4 <menu+0x265c>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
			}
			calismaSayModu = 0;
 80034cc:	4b46      	ldr	r3, [pc, #280]	@ (80035e8 <menu+0x2660>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80034d2:	4b46      	ldr	r3, [pc, #280]	@ (80035ec <menu+0x2664>)
 80034d4:	2201      	movs	r2, #1
 80034d6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80034d8:	4b45      	ldr	r3, [pc, #276]	@ (80035f0 <menu+0x2668>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b1e      	cmp	r3, #30
 80034de:	d166      	bne.n	80035ae <menu+0x2626>
		calismaSayModu = 0;
 80034e0:	4b41      	ldr	r3, [pc, #260]	@ (80035e8 <menu+0x2660>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 80034e6:	4a43      	ldr	r2, [pc, #268]	@ (80035f4 <menu+0x266c>)
 80034e8:	2101      	movs	r1, #1
 80034ea:	2001      	movs	r0, #1
 80034ec:	f006 fab6 	bl	8009a5c <lcd_print>
		lcd_print(2, 1, secilenDilText);
 80034f0:	4a41      	ldr	r2, [pc, #260]	@ (80035f8 <menu+0x2670>)
 80034f2:	2101      	movs	r1, #1
 80034f4:	2002      	movs	r0, #2
 80034f6:	f006 fab1 	bl	8009a5c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80034fa:	2102      	movs	r1, #2
 80034fc:	483f      	ldr	r0, [pc, #252]	@ (80035fc <menu+0x2674>)
 80034fe:	f007 fd9f 	bl	800b040 <HAL_GPIO_ReadPin>
 8003502:	4603      	mov	r3, r0
 8003504:	2b01      	cmp	r3, #1
 8003506:	d11a      	bne.n	800353e <menu+0x25b6>
 8003508:	4b3d      	ldr	r3, [pc, #244]	@ (8003600 <menu+0x2678>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	f083 0301 	eor.w	r3, r3, #1
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d013      	beq.n	800353e <menu+0x25b6>
			dilSecim = dilSecim + 1;
 8003516:	4b3b      	ldr	r3, [pc, #236]	@ (8003604 <menu+0x267c>)
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	3301      	adds	r3, #1
 800351c:	b2da      	uxtb	r2, r3
 800351e:	4b39      	ldr	r3, [pc, #228]	@ (8003604 <menu+0x267c>)
 8003520:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003522:	4b38      	ldr	r3, [pc, #224]	@ (8003604 <menu+0x267c>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d902      	bls.n	8003530 <menu+0x25a8>
				dilSecim = 0;
 800352a:	4b36      	ldr	r3, [pc, #216]	@ (8003604 <menu+0x267c>)
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]
			}
			loadMenuTexts(dilSecim);
 8003530:	4b34      	ldr	r3, [pc, #208]	@ (8003604 <menu+0x267c>)
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f003 ff19 	bl	800736c <loadMenuTexts>

			bekle();
 800353a:	f000 fa71 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800353e:	2104      	movs	r1, #4
 8003540:	482e      	ldr	r0, [pc, #184]	@ (80035fc <menu+0x2674>)
 8003542:	f007 fd7d 	bl	800b040 <HAL_GPIO_ReadPin>
 8003546:	4603      	mov	r3, r0
 8003548:	2b01      	cmp	r3, #1
 800354a:	d11a      	bne.n	8003582 <menu+0x25fa>
 800354c:	4b2c      	ldr	r3, [pc, #176]	@ (8003600 <menu+0x2678>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	f083 0301 	eor.w	r3, r3, #1
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d013      	beq.n	8003582 <menu+0x25fa>
			dilSecim = dilSecim - 1;
 800355a:	4b2a      	ldr	r3, [pc, #168]	@ (8003604 <menu+0x267c>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	3b01      	subs	r3, #1
 8003560:	b2da      	uxtb	r2, r3
 8003562:	4b28      	ldr	r3, [pc, #160]	@ (8003604 <menu+0x267c>)
 8003564:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003566:	4b27      	ldr	r3, [pc, #156]	@ (8003604 <menu+0x267c>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <menu+0x25ec>
		   		dilSecim = 1;
 800356e:	4b25      	ldr	r3, [pc, #148]	@ (8003604 <menu+0x267c>)
 8003570:	2201      	movs	r2, #1
 8003572:	701a      	strb	r2, [r3, #0]
		   	}
		   	loadMenuTexts(dilSecim);
 8003574:	4b23      	ldr	r3, [pc, #140]	@ (8003604 <menu+0x267c>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f003 fef7 	bl	800736c <loadMenuTexts>

			bekle();
 800357e:	f000 fa4f 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003582:	2108      	movs	r1, #8
 8003584:	481d      	ldr	r0, [pc, #116]	@ (80035fc <menu+0x2674>)
 8003586:	f007 fd5b 	bl	800b040 <HAL_GPIO_ReadPin>
 800358a:	4603      	mov	r3, r0
 800358c:	2b01      	cmp	r3, #1
 800358e:	d10e      	bne.n	80035ae <menu+0x2626>
 8003590:	4b1b      	ldr	r3, [pc, #108]	@ (8003600 <menu+0x2678>)
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	f083 0301 	eor.w	r3, r3, #1
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b00      	cmp	r3, #0
 800359c:	d007      	beq.n	80035ae <menu+0x2626>
			eepromData[33] = dilSecim;
 800359e:	4b19      	ldr	r3, [pc, #100]	@ (8003604 <menu+0x267c>)
 80035a0:	781a      	ldrb	r2, [r3, #0]
 80035a2:	4b0e      	ldr	r3, [pc, #56]	@ (80035dc <menu+0x2654>)
 80035a4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 80035a8:	4b10      	ldr	r3, [pc, #64]	@ (80035ec <menu+0x2664>)
 80035aa:	2201      	movs	r2, #1
 80035ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80035ae:	4b10      	ldr	r3, [pc, #64]	@ (80035f0 <menu+0x2668>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b1f      	cmp	r3, #31
 80035b4:	f040 8087 	bne.w	80036c6 <menu+0x273e>
		calismaSayModu = 0;
 80035b8:	4b0b      	ldr	r3, [pc, #44]	@ (80035e8 <menu+0x2660>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 80035be:	4a12      	ldr	r2, [pc, #72]	@ (8003608 <menu+0x2680>)
 80035c0:	2101      	movs	r1, #1
 80035c2:	2001      	movs	r0, #1
 80035c4:	f006 fa4a 	bl	8009a5c <lcd_print>

		if(iotMode == 0) {
 80035c8:	4b10      	ldr	r3, [pc, #64]	@ (800360c <menu+0x2684>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d121      	bne.n	8003614 <menu+0x268c>
			lcd_print(2, 1, pasifText);
 80035d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003610 <menu+0x2688>)
 80035d2:	2101      	movs	r1, #1
 80035d4:	2002      	movs	r0, #2
 80035d6:	f006 fa41 	bl	8009a5c <lcd_print>
 80035da:	e024      	b.n	8003626 <menu+0x269e>
 80035dc:	20000f9c 	.word	0x20000f9c
 80035e0:	20001064 	.word	0x20001064
 80035e4:	20001066 	.word	0x20001066
 80035e8:	2000108c 	.word	0x2000108c
 80035ec:	20001098 	.word	0x20001098
 80035f0:	2000106c 	.word	0x2000106c
 80035f4:	200015e8 	.word	0x200015e8
 80035f8:	200015fc 	.word	0x200015fc
 80035fc:	40010800 	.word	0x40010800
 8003600:	2000109b 	.word	0x2000109b
 8003604:	2000108d 	.word	0x2000108d
 8003608:	20000150 	.word	0x20000150
 800360c:	2000108b 	.word	0x2000108b
 8003610:	20001250 	.word	0x20001250
		} else if(iotMode == 1) {
 8003614:	4ba0      	ldr	r3, [pc, #640]	@ (8003898 <menu+0x2910>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d104      	bne.n	8003626 <menu+0x269e>
			lcd_print(2, 1, aktifText);
 800361c:	4a9f      	ldr	r2, [pc, #636]	@ (800389c <menu+0x2914>)
 800361e:	2101      	movs	r1, #1
 8003620:	2002      	movs	r0, #2
 8003622:	f006 fa1b 	bl	8009a5c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003626:	2102      	movs	r1, #2
 8003628:	489d      	ldr	r0, [pc, #628]	@ (80038a0 <menu+0x2918>)
 800362a:	f007 fd09 	bl	800b040 <HAL_GPIO_ReadPin>
 800362e:	4603      	mov	r3, r0
 8003630:	2b01      	cmp	r3, #1
 8003632:	d115      	bne.n	8003660 <menu+0x26d8>
 8003634:	4b9b      	ldr	r3, [pc, #620]	@ (80038a4 <menu+0x291c>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	f083 0301 	eor.w	r3, r3, #1
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00e      	beq.n	8003660 <menu+0x26d8>
			iotMode = iotMode + 1;
 8003642:	4b95      	ldr	r3, [pc, #596]	@ (8003898 <menu+0x2910>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	3301      	adds	r3, #1
 8003648:	b2da      	uxtb	r2, r3
 800364a:	4b93      	ldr	r3, [pc, #588]	@ (8003898 <menu+0x2910>)
 800364c:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 800364e:	4b92      	ldr	r3, [pc, #584]	@ (8003898 <menu+0x2910>)
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d902      	bls.n	800365c <menu+0x26d4>
				iotMode = 0;
 8003656:	4b90      	ldr	r3, [pc, #576]	@ (8003898 <menu+0x2910>)
 8003658:	2200      	movs	r2, #0
 800365a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800365c:	f000 f9e0 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003660:	2104      	movs	r1, #4
 8003662:	488f      	ldr	r0, [pc, #572]	@ (80038a0 <menu+0x2918>)
 8003664:	f007 fcec 	bl	800b040 <HAL_GPIO_ReadPin>
 8003668:	4603      	mov	r3, r0
 800366a:	2b01      	cmp	r3, #1
 800366c:	d115      	bne.n	800369a <menu+0x2712>
 800366e:	4b8d      	ldr	r3, [pc, #564]	@ (80038a4 <menu+0x291c>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	f083 0301 	eor.w	r3, r3, #1
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00e      	beq.n	800369a <menu+0x2712>
			iotMode = iotMode - 1;
 800367c:	4b86      	ldr	r3, [pc, #536]	@ (8003898 <menu+0x2910>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	3b01      	subs	r3, #1
 8003682:	b2da      	uxtb	r2, r3
 8003684:	4b84      	ldr	r3, [pc, #528]	@ (8003898 <menu+0x2910>)
 8003686:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003688:	4b83      	ldr	r3, [pc, #524]	@ (8003898 <menu+0x2910>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d002      	beq.n	8003696 <menu+0x270e>
		   		iotMode = 1;
 8003690:	4b81      	ldr	r3, [pc, #516]	@ (8003898 <menu+0x2910>)
 8003692:	2201      	movs	r2, #1
 8003694:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003696:	f000 f9c3 	bl	8003a20 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800369a:	2108      	movs	r1, #8
 800369c:	4880      	ldr	r0, [pc, #512]	@ (80038a0 <menu+0x2918>)
 800369e:	f007 fccf 	bl	800b040 <HAL_GPIO_ReadPin>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d10e      	bne.n	80036c6 <menu+0x273e>
 80036a8:	4b7e      	ldr	r3, [pc, #504]	@ (80038a4 <menu+0x291c>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	f083 0301 	eor.w	r3, r3, #1
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d007      	beq.n	80036c6 <menu+0x273e>
			eepromData[48] = iotMode;
 80036b6:	4b78      	ldr	r3, [pc, #480]	@ (8003898 <menu+0x2910>)
 80036b8:	781a      	ldrb	r2, [r3, #0]
 80036ba:	4b7b      	ldr	r3, [pc, #492]	@ (80038a8 <menu+0x2920>)
 80036bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 80036c0:	4b7a      	ldr	r3, [pc, #488]	@ (80038ac <menu+0x2924>)
 80036c2:	2201      	movs	r2, #1
 80036c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80036c6:	4b7a      	ldr	r3, [pc, #488]	@ (80038b0 <menu+0x2928>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b20      	cmp	r3, #32
 80036cc:	d127      	bne.n	800371e <menu+0x2796>
		calismaSayModu = 0;
 80036ce:	4b79      	ldr	r3, [pc, #484]	@ (80038b4 <menu+0x292c>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, machineIDText);
 80036d4:	4a78      	ldr	r2, [pc, #480]	@ (80038b8 <menu+0x2930>)
 80036d6:	2101      	movs	r1, #1
 80036d8:	2001      	movs	r0, #1
 80036da:	f006 f9bf 	bl	8009a5c <lcd_print>

		convertArrays(1);
 80036de:	2001      	movs	r0, #1
 80036e0:	f7fd f852 	bl	8000788 <convertArrays>
		HAL_Delay(50);
 80036e4:	2032      	movs	r0, #50	@ 0x32
 80036e6:	f006 fedb 	bl	800a4a0 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 80036ea:	2001      	movs	r0, #1
 80036ec:	f7fd fbf0 	bl	8000ed0 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036f0:	2102      	movs	r1, #2
 80036f2:	486b      	ldr	r0, [pc, #428]	@ (80038a0 <menu+0x2918>)
 80036f4:	f007 fca4 	bl	800b040 <HAL_GPIO_ReadPin>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d10f      	bne.n	800371e <menu+0x2796>
 80036fe:	2104      	movs	r1, #4
 8003700:	4867      	ldr	r0, [pc, #412]	@ (80038a0 <menu+0x2918>)
 8003702:	f007 fc9d 	bl	800b040 <HAL_GPIO_ReadPin>
 8003706:	4603      	mov	r3, r0
 8003708:	2b01      	cmp	r3, #1
 800370a:	d108      	bne.n	800371e <menu+0x2796>
 800370c:	4b65      	ldr	r3, [pc, #404]	@ (80038a4 <menu+0x291c>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	f083 0301 	eor.w	r3, r3, #1
 8003714:	b2db      	uxtb	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <menu+0x2796>
			takeMachineIDWithConfirmation();
 800371a:	f005 faad 	bl	8008c78 <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 800371e:	4b64      	ldr	r3, [pc, #400]	@ (80038b0 <menu+0x2928>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b21      	cmp	r3, #33	@ 0x21
 8003724:	d12b      	bne.n	800377e <menu+0x27f6>
		calismaSayModu = 0;
 8003726:	4b63      	ldr	r3, [pc, #396]	@ (80038b4 <menu+0x292c>)
 8003728:	2200      	movs	r2, #0
 800372a:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 800372c:	2002      	movs	r0, #2
 800372e:	f7fd f82b 	bl	8000788 <convertArrays>
		HAL_Delay(50);
 8003732:	2032      	movs	r0, #50	@ 0x32
 8003734:	f006 feb4 	bl	800a4a0 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003738:	2002      	movs	r0, #2
 800373a:	f7fd fbc9 	bl	8000ed0 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800373e:	2102      	movs	r1, #2
 8003740:	4857      	ldr	r0, [pc, #348]	@ (80038a0 <menu+0x2918>)
 8003742:	f007 fc7d 	bl	800b040 <HAL_GPIO_ReadPin>
 8003746:	4603      	mov	r3, r0
 8003748:	2b01      	cmp	r3, #1
 800374a:	d118      	bne.n	800377e <menu+0x27f6>
 800374c:	2104      	movs	r1, #4
 800374e:	4854      	ldr	r0, [pc, #336]	@ (80038a0 <menu+0x2918>)
 8003750:	f007 fc76 	bl	800b040 <HAL_GPIO_ReadPin>
 8003754:	4603      	mov	r3, r0
 8003756:	2b01      	cmp	r3, #1
 8003758:	d111      	bne.n	800377e <menu+0x27f6>
 800375a:	4b52      	ldr	r3, [pc, #328]	@ (80038a4 <menu+0x291c>)
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	f083 0301 	eor.w	r3, r3, #1
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <menu+0x27f6>
			takeWifiSSID();
 8003768:	f005 fc9e 	bl	80090a8 <takeWifiSSID>

			convertArrays(2);
 800376c:	2002      	movs	r0, #2
 800376e:	f7fd f80b 	bl	8000788 <convertArrays>
			HAL_Delay(50);
 8003772:	2032      	movs	r0, #50	@ 0x32
 8003774:	f006 fe94 	bl	800a4a0 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003778:	2002      	movs	r0, #2
 800377a:	f7fd fba9 	bl	8000ed0 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 800377e:	4b4c      	ldr	r3, [pc, #304]	@ (80038b0 <menu+0x2928>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b22      	cmp	r3, #34	@ 0x22
 8003784:	d12b      	bne.n	80037de <menu+0x2856>
		calismaSayModu = 0;
 8003786:	4b4b      	ldr	r3, [pc, #300]	@ (80038b4 <menu+0x292c>)
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 800378c:	2003      	movs	r0, #3
 800378e:	f7fc fffb 	bl	8000788 <convertArrays>
		HAL_Delay(50);
 8003792:	2032      	movs	r0, #50	@ 0x32
 8003794:	f006 fe84 	bl	800a4a0 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003798:	2003      	movs	r0, #3
 800379a:	f7fd fb99 	bl	8000ed0 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800379e:	2102      	movs	r1, #2
 80037a0:	483f      	ldr	r0, [pc, #252]	@ (80038a0 <menu+0x2918>)
 80037a2:	f007 fc4d 	bl	800b040 <HAL_GPIO_ReadPin>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d118      	bne.n	80037de <menu+0x2856>
 80037ac:	2104      	movs	r1, #4
 80037ae:	483c      	ldr	r0, [pc, #240]	@ (80038a0 <menu+0x2918>)
 80037b0:	f007 fc46 	bl	800b040 <HAL_GPIO_ReadPin>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d111      	bne.n	80037de <menu+0x2856>
 80037ba:	4b3a      	ldr	r3, [pc, #232]	@ (80038a4 <menu+0x291c>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	f083 0301 	eor.w	r3, r3, #1
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <menu+0x2856>
			takeWifiPass();
 80037c8:	f005 fe2c 	bl	8009424 <takeWifiPass>

			convertArrays(3);
 80037cc:	2003      	movs	r0, #3
 80037ce:	f7fc ffdb 	bl	8000788 <convertArrays>
			HAL_Delay(50);
 80037d2:	2032      	movs	r0, #50	@ 0x32
 80037d4:	f006 fe64 	bl	800a4a0 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 80037d8:	2003      	movs	r0, #3
 80037da:	f7fd fb79 	bl	8000ed0 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 80037de:	4b34      	ldr	r3, [pc, #208]	@ (80038b0 <menu+0x2928>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b23      	cmp	r3, #35	@ 0x23
 80037e4:	d154      	bne.n	8003890 <menu+0x2908>
		lcd_print(1, 1, menudenCikisText);
 80037e6:	4a35      	ldr	r2, [pc, #212]	@ (80038bc <menu+0x2934>)
 80037e8:	2101      	movs	r1, #1
 80037ea:	2001      	movs	r0, #1
 80037ec:	f006 f936 	bl	8009a5c <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 80037f0:	4a33      	ldr	r2, [pc, #204]	@ (80038c0 <menu+0x2938>)
 80037f2:	2101      	movs	r1, #1
 80037f4:	2002      	movs	r0, #2
 80037f6:	f006 f931 	bl	8009a5c <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 80037fa:	2108      	movs	r1, #8
 80037fc:	4828      	ldr	r0, [pc, #160]	@ (80038a0 <menu+0x2918>)
 80037fe:	f007 fc1f 	bl	800b040 <HAL_GPIO_ReadPin>
 8003802:	4603      	mov	r3, r0
 8003804:	2b01      	cmp	r3, #1
 8003806:	d143      	bne.n	8003890 <menu+0x2908>
			menuGiris = 0;
 8003808:	4b2e      	ldr	r3, [pc, #184]	@ (80038c4 <menu+0x293c>)
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]

			uint32_t startTick = HAL_GetTick();
 800380e:	f006 fe3d 	bl	800a48c <HAL_GetTick>
 8003812:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003814:	e007      	b.n	8003826 <menu+0x289e>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003816:	f006 fe39 	bl	800a48c <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003824:	d806      	bhi.n	8003834 <menu+0x28ac>
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003826:	4828      	ldr	r0, [pc, #160]	@ (80038c8 <menu+0x2940>)
 8003828:	f008 fa33 	bl	800bc92 <HAL_I2C_GetError>
 800382c:	4603      	mov	r3, r0
 800382e:	2b04      	cmp	r3, #4
 8003830:	d0f1      	beq.n	8003816 <menu+0x288e>
 8003832:	e000      	b.n	8003836 <menu+0x28ae>
			        break;
 8003834:	bf00      	nop
			    }
			}

			startTick = HAL_GetTick();
 8003836:	f006 fe29 	bl	800a48c <HAL_GetTick>
 800383a:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800383c:	e007      	b.n	800384e <menu+0x28c6>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 800383e:	f006 fe25 	bl	800a48c <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800384c:	d806      	bhi.n	800385c <menu+0x28d4>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800384e:	481e      	ldr	r0, [pc, #120]	@ (80038c8 <menu+0x2940>)
 8003850:	f008 fa12 	bl	800bc78 <HAL_I2C_GetState>
 8003854:	4603      	mov	r3, r0
 8003856:	2b20      	cmp	r3, #32
 8003858:	d1f1      	bne.n	800383e <menu+0x28b6>
 800385a:	e000      	b.n	800385e <menu+0x28d6>
			        break;
 800385c:	bf00      	nop
			    }
			}

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800385e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003862:	9302      	str	r3, [sp, #8]
 8003864:	236e      	movs	r3, #110	@ 0x6e
 8003866:	9301      	str	r3, [sp, #4]
 8003868:	4b0f      	ldr	r3, [pc, #60]	@ (80038a8 <menu+0x2920>)
 800386a:	9300      	str	r3, [sp, #0]
 800386c:	236e      	movs	r3, #110	@ 0x6e
 800386e:	2200      	movs	r2, #0
 8003870:	21a0      	movs	r1, #160	@ 0xa0
 8003872:	4815      	ldr	r0, [pc, #84]	@ (80038c8 <menu+0x2940>)
 8003874:	f007 fe9e 	bl	800b5b4 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8003878:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 800387c:	f006 fe10 	bl	800a4a0 <HAL_Delay>

			lcd_clear();
 8003880:	f006 f918 	bl	8009ab4 <lcd_clear>
			HAL_Delay(500);
 8003884:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003888:	f006 fe0a 	bl	800a4a0 <HAL_Delay>
			NVIC_SystemReset();
 800388c:	f7fd fb66 	bl	8000f5c <__NVIC_SystemReset>
		}
	}
}
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	2000108b 	.word	0x2000108b
 800389c:	20001264 	.word	0x20001264
 80038a0:	40010800 	.word	0x40010800
 80038a4:	2000109b 	.word	0x2000109b
 80038a8:	20000f9c 	.word	0x20000f9c
 80038ac:	20001098 	.word	0x20001098
 80038b0:	2000106c 	.word	0x2000106c
 80038b4:	2000108c 	.word	0x2000108c
 80038b8:	20001778 	.word	0x20001778
 80038bc:	20001610 	.word	0x20001610
 80038c0:	20001624 	.word	0x20001624
 80038c4:	20001089 	.word	0x20001089
 80038c8:	200017f0 	.word	0x200017f0

080038cc <displayCycleOnLCD>:

void displayCycleOnLCD(int finalCount) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	@ 0x28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
    int padding, i;

    itoa(finalCount, snum, 10);
 80038d4:	220a      	movs	r2, #10
 80038d6:	491c      	ldr	r1, [pc, #112]	@ (8003948 <displayCycleOnLCD+0x7c>)
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f00a fba7 	bl	800e02c <itoa>

    int length = strlen(snum);
 80038de:	481a      	ldr	r0, [pc, #104]	@ (8003948 <displayCycleOnLCD+0x7c>)
 80038e0:	f7fc fca0 	bl	8000224 <strlen>
 80038e4:	4603      	mov	r3, r0
 80038e6:	623b      	str	r3, [r7, #32]

    padding = (16 - length) / 2;
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	f1c3 0310 	rsb	r3, r3, #16
 80038ee:	0fda      	lsrs	r2, r3, #31
 80038f0:	4413      	add	r3, r2
 80038f2:	105b      	asrs	r3, r3, #1
 80038f4:	61fb      	str	r3, [r7, #28]

    char displayLine[17];
    memset(displayLine, ' ', 16);
 80038f6:	f107 0308 	add.w	r3, r7, #8
 80038fa:	2210      	movs	r2, #16
 80038fc:	2120      	movs	r1, #32
 80038fe:	4618      	mov	r0, r3
 8003900:	f00a fbd8 	bl	800e0b4 <memset>
    displayLine[16] = '\0'; // Null terminator
 8003904:	2300      	movs	r3, #0
 8003906:	763b      	strb	r3, [r7, #24]

    for (i = 0; i < length; i++) {
 8003908:	2300      	movs	r3, #0
 800390a:	627b      	str	r3, [r7, #36]	@ 0x24
 800390c:	e00d      	b.n	800392a <displayCycleOnLCD+0x5e>
        displayLine[padding + i] = snum[i];
 800390e:	69fa      	ldr	r2, [r7, #28]
 8003910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003912:	4413      	add	r3, r2
 8003914:	490c      	ldr	r1, [pc, #48]	@ (8003948 <displayCycleOnLCD+0x7c>)
 8003916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003918:	440a      	add	r2, r1
 800391a:	7812      	ldrb	r2, [r2, #0]
 800391c:	3328      	adds	r3, #40	@ 0x28
 800391e:	443b      	add	r3, r7
 8003920:	f803 2c20 	strb.w	r2, [r3, #-32]
    for (i = 0; i < length; i++) {
 8003924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003926:	3301      	adds	r3, #1
 8003928:	627b      	str	r3, [r7, #36]	@ 0x24
 800392a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800392c:	6a3b      	ldr	r3, [r7, #32]
 800392e:	429a      	cmp	r2, r3
 8003930:	dbed      	blt.n	800390e <displayCycleOnLCD+0x42>
    }

    lcd_print(2, 1, displayLine);
 8003932:	f107 0308 	add.w	r3, r7, #8
 8003936:	461a      	mov	r2, r3
 8003938:	2101      	movs	r1, #1
 800393a:	2002      	movs	r0, #2
 800393c:	f006 f88e 	bl	8009a5c <lcd_print>
}
 8003940:	bf00      	nop
 8003942:	3728      	adds	r7, #40	@ 0x28
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	2000100c 	.word	0x2000100c

0800394c <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d105      	bne.n	8003968 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 800395c:	4a22      	ldr	r2, [pc, #136]	@ (80039e8 <lcdUpdate+0x9c>)
 800395e:	2101      	movs	r1, #1
 8003960:	2002      	movs	r0, #2
 8003962:	f006 f87b 	bl	8009a5c <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
	}
}
 8003966:	e03b      	b.n	80039e0 <lcdUpdate+0x94>
	} else if(y==2) {
 8003968:	79fb      	ldrb	r3, [r7, #7]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d105      	bne.n	800397a <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 800396e:	4a1e      	ldr	r2, [pc, #120]	@ (80039e8 <lcdUpdate+0x9c>)
 8003970:	2102      	movs	r1, #2
 8003972:	2002      	movs	r0, #2
 8003974:	f006 f872 	bl	8009a5c <lcd_print>
}
 8003978:	e032      	b.n	80039e0 <lcdUpdate+0x94>
	} else if(y==3) {
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	2b03      	cmp	r3, #3
 800397e:	d105      	bne.n	800398c <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003980:	4a19      	ldr	r2, [pc, #100]	@ (80039e8 <lcdUpdate+0x9c>)
 8003982:	2103      	movs	r1, #3
 8003984:	2002      	movs	r0, #2
 8003986:	f006 f869 	bl	8009a5c <lcd_print>
}
 800398a:	e029      	b.n	80039e0 <lcdUpdate+0x94>
	} else if(y==4) {
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	2b04      	cmp	r3, #4
 8003990:	d105      	bne.n	800399e <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003992:	4a15      	ldr	r2, [pc, #84]	@ (80039e8 <lcdUpdate+0x9c>)
 8003994:	2104      	movs	r1, #4
 8003996:	2002      	movs	r0, #2
 8003998:	f006 f860 	bl	8009a5c <lcd_print>
}
 800399c:	e020      	b.n	80039e0 <lcdUpdate+0x94>
	} else if(y==5) {
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	2b05      	cmp	r3, #5
 80039a2:	d105      	bne.n	80039b0 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80039a4:	4a10      	ldr	r2, [pc, #64]	@ (80039e8 <lcdUpdate+0x9c>)
 80039a6:	2105      	movs	r1, #5
 80039a8:	2002      	movs	r0, #2
 80039aa:	f006 f857 	bl	8009a5c <lcd_print>
}
 80039ae:	e017      	b.n	80039e0 <lcdUpdate+0x94>
	} else if(y==6) {
 80039b0:	79fb      	ldrb	r3, [r7, #7]
 80039b2:	2b06      	cmp	r3, #6
 80039b4:	d105      	bne.n	80039c2 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80039b6:	4a0c      	ldr	r2, [pc, #48]	@ (80039e8 <lcdUpdate+0x9c>)
 80039b8:	2106      	movs	r1, #6
 80039ba:	2002      	movs	r0, #2
 80039bc:	f006 f84e 	bl	8009a5c <lcd_print>
}
 80039c0:	e00e      	b.n	80039e0 <lcdUpdate+0x94>
	} else if (y==7) {
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	2b07      	cmp	r3, #7
 80039c6:	d10b      	bne.n	80039e0 <lcdUpdate+0x94>
		lcd_clear();
 80039c8:	f006 f874 	bl	8009ab4 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 80039cc:	4a07      	ldr	r2, [pc, #28]	@ (80039ec <lcdUpdate+0xa0>)
 80039ce:	2101      	movs	r1, #1
 80039d0:	2001      	movs	r0, #1
 80039d2:	f006 f843 	bl	8009a5c <lcd_print>
		lcd_print(2, 1, mainText2GN);
 80039d6:	4a06      	ldr	r2, [pc, #24]	@ (80039f0 <lcdUpdate+0xa4>)
 80039d8:	2101      	movs	r1, #1
 80039da:	2002      	movs	r0, #2
 80039dc:	f006 f83e 	bl	8009a5c <lcd_print>
}
 80039e0:	bf00      	nop
 80039e2:	3708      	adds	r7, #8
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	0800e25c 	.word	0x0800e25c
 80039ec:	200000c4 	.word	0x200000c4
 80039f0:	200000d8 	.word	0x200000d8

080039f4 <checkLCDBacklight>:

void checkLCDBacklight() {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 80039f8:	4b07      	ldr	r3, [pc, #28]	@ (8003a18 <checkLCDBacklight+0x24>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4b07      	ldr	r3, [pc, #28]	@ (8003a1c <checkLCDBacklight+0x28>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b3b      	cmp	r3, #59	@ 0x3b
 8003a04:	d903      	bls.n	8003a0e <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8003a06:	2000      	movs	r0, #0
 8003a08:	f006 f874 	bl	8009af4 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8003a0c:	e002      	b.n	8003a14 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8003a0e:	2001      	movs	r0, #1
 8003a10:	f006 f870 	bl	8009af4 <lcd_backlight>
}
 8003a14:	bf00      	nop
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20001044 	.word	0x20001044
 8003a1c:	20001060 	.word	0x20001060

08003a20 <bekle>:

void bekle() {
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
	timer1=millis;
 8003a24:	4b47      	ldr	r3, [pc, #284]	@ (8003b44 <bekle+0x124>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a47      	ldr	r2, [pc, #284]	@ (8003b48 <bekle+0x128>)
 8003a2a:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003a2c:	e002      	b.n	8003a34 <bekle+0x14>
    	butonKontrol = 1;
 8003a2e:	4b47      	ldr	r3, [pc, #284]	@ (8003b4c <bekle+0x12c>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003a34:	2101      	movs	r1, #1
 8003a36:	4846      	ldr	r0, [pc, #280]	@ (8003b50 <bekle+0x130>)
 8003a38:	f007 fb02 	bl	800b040 <HAL_GPIO_ReadPin>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d109      	bne.n	8003a56 <bekle+0x36>
 8003a42:	4b40      	ldr	r3, [pc, #256]	@ (8003b44 <bekle+0x124>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4b40      	ldr	r3, [pc, #256]	@ (8003b48 <bekle+0x128>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d0ef      	beq.n	8003a2e <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003a4e:	e002      	b.n	8003a56 <bekle+0x36>
    	butonKontrol = 1;
 8003a50:	4b3e      	ldr	r3, [pc, #248]	@ (8003b4c <bekle+0x12c>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003a56:	2108      	movs	r1, #8
 8003a58:	483e      	ldr	r0, [pc, #248]	@ (8003b54 <bekle+0x134>)
 8003a5a:	f007 faf1 	bl	800b040 <HAL_GPIO_ReadPin>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d109      	bne.n	8003a78 <bekle+0x58>
 8003a64:	4b37      	ldr	r3, [pc, #220]	@ (8003b44 <bekle+0x124>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4b37      	ldr	r3, [pc, #220]	@ (8003b48 <bekle+0x128>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d0ef      	beq.n	8003a50 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003a70:	e002      	b.n	8003a78 <bekle+0x58>
    	butonKontrol = 1;
 8003a72:	4b36      	ldr	r3, [pc, #216]	@ (8003b4c <bekle+0x12c>)
 8003a74:	2201      	movs	r2, #1
 8003a76:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003a78:	2102      	movs	r1, #2
 8003a7a:	4835      	ldr	r0, [pc, #212]	@ (8003b50 <bekle+0x130>)
 8003a7c:	f007 fae0 	bl	800b040 <HAL_GPIO_ReadPin>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d109      	bne.n	8003a9a <bekle+0x7a>
 8003a86:	4b2f      	ldr	r3, [pc, #188]	@ (8003b44 <bekle+0x124>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8003b48 <bekle+0x128>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d0ef      	beq.n	8003a72 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003a92:	e002      	b.n	8003a9a <bekle+0x7a>
    	butonKontrol = 1;
 8003a94:	4b2d      	ldr	r3, [pc, #180]	@ (8003b4c <bekle+0x12c>)
 8003a96:	2201      	movs	r2, #1
 8003a98:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003a9a:	2104      	movs	r1, #4
 8003a9c:	482c      	ldr	r0, [pc, #176]	@ (8003b50 <bekle+0x130>)
 8003a9e:	f007 facf 	bl	800b040 <HAL_GPIO_ReadPin>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d109      	bne.n	8003abc <bekle+0x9c>
 8003aa8:	4b26      	ldr	r3, [pc, #152]	@ (8003b44 <bekle+0x124>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4b26      	ldr	r3, [pc, #152]	@ (8003b48 <bekle+0x128>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d0ef      	beq.n	8003a94 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003ab4:	e002      	b.n	8003abc <bekle+0x9c>
    	butonKontrol = 1;
 8003ab6:	4b25      	ldr	r3, [pc, #148]	@ (8003b4c <bekle+0x12c>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003abc:	2108      	movs	r1, #8
 8003abe:	4824      	ldr	r0, [pc, #144]	@ (8003b50 <bekle+0x130>)
 8003ac0:	f007 fabe 	bl	800b040 <HAL_GPIO_ReadPin>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d109      	bne.n	8003ade <bekle+0xbe>
 8003aca:	4b1e      	ldr	r3, [pc, #120]	@ (8003b44 <bekle+0x124>)
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	4b1e      	ldr	r3, [pc, #120]	@ (8003b48 <bekle+0x128>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d0ef      	beq.n	8003ab6 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003ad6:	e002      	b.n	8003ade <bekle+0xbe>
    	butonKontrol = 1;
 8003ad8:	4b1c      	ldr	r3, [pc, #112]	@ (8003b4c <bekle+0x12c>)
 8003ada:	2201      	movs	r2, #1
 8003adc:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003ade:	2180      	movs	r1, #128	@ 0x80
 8003ae0:	481c      	ldr	r0, [pc, #112]	@ (8003b54 <bekle+0x134>)
 8003ae2:	f007 faad 	bl	800b040 <HAL_GPIO_ReadPin>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d109      	bne.n	8003b00 <bekle+0xe0>
 8003aec:	4b15      	ldr	r3, [pc, #84]	@ (8003b44 <bekle+0x124>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	4b15      	ldr	r3, [pc, #84]	@ (8003b48 <bekle+0x128>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d0ef      	beq.n	8003ad8 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003af8:	e002      	b.n	8003b00 <bekle+0xe0>
    	butonKontrol = 1;
 8003afa:	4b14      	ldr	r3, [pc, #80]	@ (8003b4c <bekle+0x12c>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003b00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003b04:	4813      	ldr	r0, [pc, #76]	@ (8003b54 <bekle+0x134>)
 8003b06:	f007 fa9b 	bl	800b040 <HAL_GPIO_ReadPin>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d109      	bne.n	8003b24 <bekle+0x104>
 8003b10:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <bekle+0x124>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4b0c      	ldr	r3, [pc, #48]	@ (8003b48 <bekle+0x128>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d0ee      	beq.n	8003afa <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003b1c:	e002      	b.n	8003b24 <bekle+0x104>
    	butonKontrol = 1;
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b4c <bekle+0x12c>)
 8003b20:	2201      	movs	r2, #1
 8003b22:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003b24:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003b28:	480a      	ldr	r0, [pc, #40]	@ (8003b54 <bekle+0x134>)
 8003b2a:	f007 fa89 	bl	800b040 <HAL_GPIO_ReadPin>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d105      	bne.n	8003b40 <bekle+0x120>
 8003b34:	4b03      	ldr	r3, [pc, #12]	@ (8003b44 <bekle+0x124>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	4b03      	ldr	r3, [pc, #12]	@ (8003b48 <bekle+0x128>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d0ee      	beq.n	8003b1e <bekle+0xfe>
    }

}
 8003b40:	bf00      	nop
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20001044 	.word	0x20001044
 8003b48:	2000104c 	.word	0x2000104c
 8003b4c:	2000109b 	.word	0x2000109b
 8003b50:	40010800 	.word	0x40010800
 8003b54:	40011000 	.word	0x40011000

08003b58 <buttonCheck>:

uint8_t buttonCheck(void) {
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	4815      	ldr	r0, [pc, #84]	@ (8003bb4 <buttonCheck+0x5c>)
 8003b60:	f007 fa6e 	bl	800b040 <HAL_GPIO_ReadPin>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d01b      	beq.n	8003ba2 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8003b6a:	2108      	movs	r1, #8
 8003b6c:	4812      	ldr	r0, [pc, #72]	@ (8003bb8 <buttonCheck+0x60>)
 8003b6e:	f007 fa67 	bl	800b040 <HAL_GPIO_ReadPin>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d014      	beq.n	8003ba2 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8003b78:	2102      	movs	r1, #2
 8003b7a:	480e      	ldr	r0, [pc, #56]	@ (8003bb4 <buttonCheck+0x5c>)
 8003b7c:	f007 fa60 	bl	800b040 <HAL_GPIO_ReadPin>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d00d      	beq.n	8003ba2 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8003b86:	2104      	movs	r1, #4
 8003b88:	480a      	ldr	r0, [pc, #40]	@ (8003bb4 <buttonCheck+0x5c>)
 8003b8a:	f007 fa59 	bl	800b040 <HAL_GPIO_ReadPin>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d006      	beq.n	8003ba2 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8003b94:	2108      	movs	r1, #8
 8003b96:	4807      	ldr	r0, [pc, #28]	@ (8003bb4 <buttonCheck+0x5c>)
 8003b98:	f007 fa52 	bl	800b040 <HAL_GPIO_ReadPin>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	d104      	bne.n	8003bac <buttonCheck+0x54>
		backLightTimer = 0;
 8003ba2:	4b06      	ldr	r3, [pc, #24]	@ (8003bbc <buttonCheck+0x64>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]
		return 1;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e000      	b.n	8003bae <buttonCheck+0x56>
	}
	return 0;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40010800 	.word	0x40010800
 8003bb8:	40011000 	.word	0x40011000
 8003bbc:	20001060 	.word	0x20001060

08003bc0 <checkBasincSalteri>:

void checkBasincSalteri() {
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8003bc4:	4b13      	ldr	r3, [pc, #76]	@ (8003c14 <checkBasincSalteri+0x54>)
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d102      	bne.n	8003bd2 <checkBasincSalteri+0x12>
		basincVar=1;
 8003bcc:	4b12      	ldr	r3, [pc, #72]	@ (8003c18 <checkBasincSalteri+0x58>)
 8003bce:	2201      	movs	r2, #1
 8003bd0:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8003bd2:	4b10      	ldr	r3, [pc, #64]	@ (8003c14 <checkBasincSalteri+0x54>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d119      	bne.n	8003c0e <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8003bda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003bde:	480f      	ldr	r0, [pc, #60]	@ (8003c1c <checkBasincSalteri+0x5c>)
 8003be0:	f007 fa2e 	bl	800b040 <HAL_GPIO_ReadPin>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10a      	bne.n	8003c00 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8003bea:	4b0d      	ldr	r3, [pc, #52]	@ (8003c20 <checkBasincSalteri+0x60>)
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	4b0d      	ldr	r3, [pc, #52]	@ (8003c24 <checkBasincSalteri+0x64>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d90a      	bls.n	8003c0e <checkBasincSalteri+0x4e>
				basincVar=1;
 8003bf8:	4b07      	ldr	r3, [pc, #28]	@ (8003c18 <checkBasincSalteri+0x58>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8003bfe:	e006      	b.n	8003c0e <checkBasincSalteri+0x4e>
			timer5=millis;
 8003c00:	4b07      	ldr	r3, [pc, #28]	@ (8003c20 <checkBasincSalteri+0x60>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a07      	ldr	r2, [pc, #28]	@ (8003c24 <checkBasincSalteri+0x64>)
 8003c06:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8003c08:	4b03      	ldr	r3, [pc, #12]	@ (8003c18 <checkBasincSalteri+0x58>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]
}
 8003c0e:	bf00      	nop
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20001073 	.word	0x20001073
 8003c18:	2000106f 	.word	0x2000106f
 8003c1c:	40011000 	.word	0x40011000
 8003c20:	20001044 	.word	0x20001044
 8003c24:	2000105c 	.word	0x2000105c

08003c28 <checkBasGonder>:

void checkBasGonder() {
 8003c28:	b480      	push	{r7}
 8003c2a:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003c9c <checkBasGonder+0x74>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d10b      	bne.n	8003c4c <checkBasGonder+0x24>
 8003c34:	4b1a      	ldr	r3, [pc, #104]	@ (8003ca0 <checkBasGonder+0x78>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d007      	beq.n	8003c4c <checkBasGonder+0x24>
 8003c3c:	4b19      	ldr	r3, [pc, #100]	@ (8003ca4 <checkBasGonder+0x7c>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d103      	bne.n	8003c4c <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8003c44:	4b18      	ldr	r3, [pc, #96]	@ (8003ca8 <checkBasGonder+0x80>)
 8003c46:	2201      	movs	r2, #1
 8003c48:	701a      	strb	r2, [r3, #0]
 8003c4a:	e009      	b.n	8003c60 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8003c4c:	4b14      	ldr	r3, [pc, #80]	@ (8003ca0 <checkBasGonder+0x78>)
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	f083 0301 	eor.w	r3, r3, #1
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8003c5a:	4b13      	ldr	r3, [pc, #76]	@ (8003ca8 <checkBasGonder+0x80>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003c60:	4b0e      	ldr	r3, [pc, #56]	@ (8003c9c <checkBasGonder+0x74>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d10b      	bne.n	8003c80 <checkBasGonder+0x58>
 8003c68:	4b10      	ldr	r3, [pc, #64]	@ (8003cac <checkBasGonder+0x84>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d007      	beq.n	8003c80 <checkBasGonder+0x58>
 8003c70:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca4 <checkBasGonder+0x7c>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d103      	bne.n	8003c80 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8003c78:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb0 <checkBasGonder+0x88>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8003c7e:	e009      	b.n	8003c94 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8003c80:	4b0a      	ldr	r3, [pc, #40]	@ (8003cac <checkBasGonder+0x84>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	f083 0301 	eor.w	r3, r3, #1
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8003c8e:	4b08      	ldr	r3, [pc, #32]	@ (8003cb0 <checkBasGonder+0x88>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	701a      	strb	r2, [r3, #0]
}
 8003c94:	bf00      	nop
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr
 8003c9c:	2000106d 	.word	0x2000106d
 8003ca0:	200010a1 	.word	0x200010a1
 8003ca4:	2000107b 	.word	0x2000107b
 8003ca8:	200010a8 	.word	0x200010a8
 8003cac:	200010a4 	.word	0x200010a4
 8003cb0:	200010a9 	.word	0x200010a9

08003cb4 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8003cb8:	4b24      	ldr	r3, [pc, #144]	@ (8003d4c <checkKapiSecimleri+0x98>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d102      	bne.n	8003cc6 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8003cc0:	4b23      	ldr	r3, [pc, #140]	@ (8003d50 <checkKapiSecimleri+0x9c>)
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8003cc6:	4b21      	ldr	r3, [pc, #132]	@ (8003d4c <checkKapiSecimleri+0x98>)
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d10e      	bne.n	8003cec <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8003cce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003cd2:	4820      	ldr	r0, [pc, #128]	@ (8003d54 <checkKapiSecimleri+0xa0>)
 8003cd4:	f007 f9b4 	bl	800b040 <HAL_GPIO_ReadPin>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d103      	bne.n	8003ce6 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8003cde:	4b1c      	ldr	r3, [pc, #112]	@ (8003d50 <checkKapiSecimleri+0x9c>)
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	701a      	strb	r2, [r3, #0]
 8003ce4:	e002      	b.n	8003cec <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8003ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8003d50 <checkKapiSecimleri+0x9c>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8003cec:	4b17      	ldr	r3, [pc, #92]	@ (8003d4c <checkKapiSecimleri+0x98>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d10e      	bne.n	8003d12 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8003cf4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003cf8:	4816      	ldr	r0, [pc, #88]	@ (8003d54 <checkKapiSecimleri+0xa0>)
 8003cfa:	f007 f9a1 	bl	800b040 <HAL_GPIO_ReadPin>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d103      	bne.n	8003d0c <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8003d04:	4b12      	ldr	r3, [pc, #72]	@ (8003d50 <checkKapiSecimleri+0x9c>)
 8003d06:	2201      	movs	r2, #1
 8003d08:	701a      	strb	r2, [r3, #0]
 8003d0a:	e002      	b.n	8003d12 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8003d0c:	4b10      	ldr	r3, [pc, #64]	@ (8003d50 <checkKapiSecimleri+0x9c>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8003d12:	4b0e      	ldr	r3, [pc, #56]	@ (8003d4c <checkKapiSecimleri+0x98>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d116      	bne.n	8003d48 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8003d1a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d1e:	480d      	ldr	r0, [pc, #52]	@ (8003d54 <checkKapiSecimleri+0xa0>)
 8003d20:	f007 f98e 	bl	800b040 <HAL_GPIO_ReadPin>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10b      	bne.n	8003d42 <checkKapiSecimleri+0x8e>
 8003d2a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003d2e:	4809      	ldr	r0, [pc, #36]	@ (8003d54 <checkKapiSecimleri+0xa0>)
 8003d30:	f007 f986 	bl	800b040 <HAL_GPIO_ReadPin>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d103      	bne.n	8003d42 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8003d3a:	4b05      	ldr	r3, [pc, #20]	@ (8003d50 <checkKapiSecimleri+0x9c>)
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8003d40:	e002      	b.n	8003d48 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8003d42:	4b03      	ldr	r3, [pc, #12]	@ (8003d50 <checkKapiSecimleri+0x9c>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	701a      	strb	r2, [r3, #0]
}
 8003d48:	bf00      	nop
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20001074 	.word	0x20001074
 8003d50:	200010be 	.word	0x200010be
 8003d54:	40010800 	.word	0x40010800

08003d58 <checkAktifCalisma>:

void checkAktifCalisma() {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8003d5c:	4b66      	ldr	r3, [pc, #408]	@ (8003ef8 <checkAktifCalisma+0x1a0>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f041 83ab 	bne.w	80054bc <checkAktifCalisma+0x1764>
 8003d66:	4b65      	ldr	r3, [pc, #404]	@ (8003efc <checkAktifCalisma+0x1a4>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f041 83a6 	bne.w	80054bc <checkAktifCalisma+0x1764>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8003d70:	4b63      	ldr	r3, [pc, #396]	@ (8003f00 <checkAktifCalisma+0x1a8>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d11a      	bne.n	8003dae <checkAktifCalisma+0x56>
 8003d78:	4b62      	ldr	r3, [pc, #392]	@ (8003f04 <checkAktifCalisma+0x1ac>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d116      	bne.n	8003dae <checkAktifCalisma+0x56>
 8003d80:	4b61      	ldr	r3, [pc, #388]	@ (8003f08 <checkAktifCalisma+0x1b0>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <checkAktifCalisma+0x46>
 8003d88:	4b60      	ldr	r3, [pc, #384]	@ (8003f0c <checkAktifCalisma+0x1b4>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	f083 0301 	eor.w	r3, r3, #1
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <checkAktifCalisma+0x46>
 8003d96:	4b5e      	ldr	r3, [pc, #376]	@ (8003f10 <checkAktifCalisma+0x1b8>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d007      	beq.n	8003dae <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 8003d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8003f14 <checkAktifCalisma+0x1bc>)
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d01c      	beq.n	8003de0 <checkAktifCalisma+0x88>
 8003da6:	4b5c      	ldr	r3, [pc, #368]	@ (8003f18 <checkAktifCalisma+0x1c0>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d118      	bne.n	8003de0 <checkAktifCalisma+0x88>
 8003dae:	4b5b      	ldr	r3, [pc, #364]	@ (8003f1c <checkAktifCalisma+0x1c4>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d103      	bne.n	8003dbe <checkAktifCalisma+0x66>
 8003db6:	4b5a      	ldr	r3, [pc, #360]	@ (8003f20 <checkAktifCalisma+0x1c8>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d010      	beq.n	8003de0 <checkAktifCalisma+0x88>
 8003dbe:	4b59      	ldr	r3, [pc, #356]	@ (8003f24 <checkAktifCalisma+0x1cc>)
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00c      	beq.n	8003de0 <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003dcc:	4856      	ldr	r0, [pc, #344]	@ (8003f28 <checkAktifCalisma+0x1d0>)
 8003dce:	f007 f94e 	bl	800b06e <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 8003dd2:	4b56      	ldr	r3, [pc, #344]	@ (8003f2c <checkAktifCalisma+0x1d4>)
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8003dd8:	4b55      	ldr	r3, [pc, #340]	@ (8003f30 <checkAktifCalisma+0x1d8>)
 8003dda:	2201      	movs	r2, #1
 8003ddc:	701a      	strb	r2, [r3, #0]
 8003dde:	e008      	b.n	8003df2 <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8003de0:	2200      	movs	r2, #0
 8003de2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003de6:	4850      	ldr	r0, [pc, #320]	@ (8003f28 <checkAktifCalisma+0x1d0>)
 8003de8:	f007 f941 	bl	800b06e <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8003dec:	4b4f      	ldr	r3, [pc, #316]	@ (8003f2c <checkAktifCalisma+0x1d4>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 8003df2:	4b42      	ldr	r3, [pc, #264]	@ (8003efc <checkAktifCalisma+0x1a4>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d164      	bne.n	8003ec4 <checkAktifCalisma+0x16c>
 8003dfa:	4b49      	ldr	r3, [pc, #292]	@ (8003f20 <checkAktifCalisma+0x1c8>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d103      	bne.n	8003e0a <checkAktifCalisma+0xb2>
 8003e02:	4b46      	ldr	r3, [pc, #280]	@ (8003f1c <checkAktifCalisma+0x1c4>)
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d05c      	beq.n	8003ec4 <checkAktifCalisma+0x16c>
 8003e0a:	4b46      	ldr	r3, [pc, #280]	@ (8003f24 <checkAktifCalisma+0x1cc>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d058      	beq.n	8003ec4 <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8003e12:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003e16:	4844      	ldr	r0, [pc, #272]	@ (8003f28 <checkAktifCalisma+0x1d0>)
 8003e18:	f007 f912 	bl	800b040 <HAL_GPIO_ReadPin>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <checkAktifCalisma+0xd2>
 8003e22:	4b44      	ldr	r3, [pc, #272]	@ (8003f34 <checkAktifCalisma+0x1dc>)
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d04c      	beq.n	8003ec4 <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8003e2a:	2102      	movs	r1, #2
 8003e2c:	4842      	ldr	r0, [pc, #264]	@ (8003f38 <checkAktifCalisma+0x1e0>)
 8003e2e:	f007 f907 	bl	800b040 <HAL_GPIO_ReadPin>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d145      	bne.n	8003ec4 <checkAktifCalisma+0x16c>
							&& (basincVar)
 8003e38:	4b40      	ldr	r3, [pc, #256]	@ (8003f3c <checkAktifCalisma+0x1e4>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d041      	beq.n	8003ec4 <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8003e40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003e44:	4838      	ldr	r0, [pc, #224]	@ (8003f28 <checkAktifCalisma+0x1d0>)
 8003e46:	f007 f8fb 	bl	800b040 <HAL_GPIO_ReadPin>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d10e      	bne.n	8003e6e <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8003e50:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e54:	4834      	ldr	r0, [pc, #208]	@ (8003f28 <checkAktifCalisma+0x1d0>)
 8003e56:	f007 f8f3 	bl	800b040 <HAL_GPIO_ReadPin>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d106      	bne.n	8003e6e <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8003e60:	2140      	movs	r1, #64	@ 0x40
 8003e62:	4835      	ldr	r0, [pc, #212]	@ (8003f38 <checkAktifCalisma+0x1e0>)
 8003e64:	f007 f8ec 	bl	800b040 <HAL_GPIO_ReadPin>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d003      	beq.n	8003e76 <checkAktifCalisma+0x11e>
 8003e6e:	4b24      	ldr	r3, [pc, #144]	@ (8003f00 <checkAktifCalisma+0x1a8>)
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d026      	beq.n	8003ec4 <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 8003e76:	4b24      	ldr	r3, [pc, #144]	@ (8003f08 <checkAktifCalisma+0x1b0>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	f083 0301 	eor.w	r3, r3, #1
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01f      	beq.n	8003ec4 <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 8003e84:	4b1f      	ldr	r3, [pc, #124]	@ (8003f04 <checkAktifCalisma+0x1ac>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	f083 0301 	eor.w	r3, r3, #1
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d018      	beq.n	8003ec4 <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 8003e92:	4b20      	ldr	r3, [pc, #128]	@ (8003f14 <checkAktifCalisma+0x1bc>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	f083 0301 	eor.w	r3, r3, #1
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d011      	beq.n	8003ec4 <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 8003ea0:	4b27      	ldr	r3, [pc, #156]	@ (8003f40 <checkAktifCalisma+0x1e8>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	f083 0301 	eor.w	r3, r3, #1
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d00a      	beq.n	8003ec4 <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 8003eae:	4b25      	ldr	r3, [pc, #148]	@ (8003f44 <checkAktifCalisma+0x1ec>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	f083 0301 	eor.w	r3, r3, #1
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d003      	beq.n	8003ec4 <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 8003ebc:	4b10      	ldr	r3, [pc, #64]	@ (8003f00 <checkAktifCalisma+0x1a8>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	701a      	strb	r2, [r3, #0]
 8003ec2:	e002      	b.n	8003eca <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 8003ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8003f00 <checkAktifCalisma+0x1a8>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8003eca:	4b0d      	ldr	r3, [pc, #52]	@ (8003f00 <checkAktifCalisma+0x1a8>)
 8003ecc:	781b      	ldrb	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d03c      	beq.n	8003f4c <checkAktifCalisma+0x1f4>
 8003ed2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003ed6:	4818      	ldr	r0, [pc, #96]	@ (8003f38 <checkAktifCalisma+0x1e0>)
 8003ed8:	f007 f8b2 	bl	800b040 <HAL_GPIO_ReadPin>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d134      	bne.n	8003f4c <checkAktifCalisma+0x1f4>
 8003ee2:	4b19      	ldr	r3, [pc, #100]	@ (8003f48 <checkAktifCalisma+0x1f0>)
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d030      	beq.n	8003f4c <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8003eea:	2201      	movs	r2, #1
 8003eec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003ef0:	480d      	ldr	r0, [pc, #52]	@ (8003f28 <checkAktifCalisma+0x1d0>)
 8003ef2:	f007 f8bc 	bl	800b06e <HAL_GPIO_WritePin>
 8003ef6:	e02f      	b.n	8003f58 <checkAktifCalisma+0x200>
 8003ef8:	2000108a 	.word	0x2000108a
 8003efc:	20001089 	.word	0x20001089
 8003f00:	200010a1 	.word	0x200010a1
 8003f04:	200010a2 	.word	0x200010a2
 8003f08:	200010a4 	.word	0x200010a4
 8003f0c:	2000109c 	.word	0x2000109c
 8003f10:	2000107f 	.word	0x2000107f
 8003f14:	200010a3 	.word	0x200010a3
 8003f18:	2000107e 	.word	0x2000107e
 8003f1c:	200010bd 	.word	0x200010bd
 8003f20:	200010d0 	.word	0x200010d0
 8003f24:	200010be 	.word	0x200010be
 8003f28:	40010c00 	.word	0x40010c00
 8003f2c:	200010bf 	.word	0x200010bf
 8003f30:	200010ab 	.word	0x200010ab
 8003f34:	200010a8 	.word	0x200010a8
 8003f38:	40011000 	.word	0x40011000
 8003f3c:	2000106f 	.word	0x2000106f
 8003f40:	200010a6 	.word	0x200010a6
 8003f44:	200010a7 	.word	0x200010a7
 8003f48:	2000107a 	.word	0x2000107a
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003f52:	4865      	ldr	r0, [pc, #404]	@ (80040e8 <checkAktifCalisma+0x390>)
 8003f54:	f007 f88b 	bl	800b06e <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8003f58:	4b64      	ldr	r3, [pc, #400]	@ (80040ec <checkAktifCalisma+0x394>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d013      	beq.n	8003f88 <checkAktifCalisma+0x230>
 8003f60:	4b63      	ldr	r3, [pc, #396]	@ (80040f0 <checkAktifCalisma+0x398>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d007      	beq.n	8003f78 <checkAktifCalisma+0x220>
 8003f68:	4b61      	ldr	r3, [pc, #388]	@ (80040f0 <checkAktifCalisma+0x398>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d003      	beq.n	8003f78 <checkAktifCalisma+0x220>
 8003f70:	4b60      	ldr	r3, [pc, #384]	@ (80040f4 <checkAktifCalisma+0x39c>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d107      	bne.n	8003f88 <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8003f78:	2201      	movs	r2, #1
 8003f7a:	2104      	movs	r1, #4
 8003f7c:	485a      	ldr	r0, [pc, #360]	@ (80040e8 <checkAktifCalisma+0x390>)
 8003f7e:	f007 f876 	bl	800b06e <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 8003f82:	4b5d      	ldr	r3, [pc, #372]	@ (80040f8 <checkAktifCalisma+0x3a0>)
 8003f84:	2201      	movs	r2, #1
 8003f86:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8003f88:	4b5b      	ldr	r3, [pc, #364]	@ (80040f8 <checkAktifCalisma+0x3a0>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d033      	beq.n	8003ff8 <checkAktifCalisma+0x2a0>
 8003f90:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003f94:	4854      	ldr	r0, [pc, #336]	@ (80040e8 <checkAktifCalisma+0x390>)
 8003f96:	f007 f853 	bl	800b040 <HAL_GPIO_ReadPin>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d106      	bne.n	8003fae <checkAktifCalisma+0x256>
 8003fa0:	4b56      	ldr	r3, [pc, #344]	@ (80040fc <checkAktifCalisma+0x3a4>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	f083 0301 	eor.w	r3, r3, #1
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <checkAktifCalisma+0x264>
 8003fae:	2102      	movs	r1, #2
 8003fb0:	4853      	ldr	r0, [pc, #332]	@ (8004100 <checkAktifCalisma+0x3a8>)
 8003fb2:	f007 f845 	bl	800b040 <HAL_GPIO_ReadPin>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d11d      	bne.n	8003ff8 <checkAktifCalisma+0x2a0>
 8003fbc:	4b51      	ldr	r3, [pc, #324]	@ (8004104 <checkAktifCalisma+0x3ac>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d103      	bne.n	8003fcc <checkAktifCalisma+0x274>
 8003fc4:	4b50      	ldr	r3, [pc, #320]	@ (8004108 <checkAktifCalisma+0x3b0>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d015      	beq.n	8003ff8 <checkAktifCalisma+0x2a0>
 8003fcc:	4b4f      	ldr	r3, [pc, #316]	@ (800410c <checkAktifCalisma+0x3b4>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d011      	beq.n	8003ff8 <checkAktifCalisma+0x2a0>
 8003fd4:	4b4e      	ldr	r3, [pc, #312]	@ (8004110 <checkAktifCalisma+0x3b8>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00d      	beq.n	8003ff8 <checkAktifCalisma+0x2a0>
 8003fdc:	4b4d      	ldr	r3, [pc, #308]	@ (8004114 <checkAktifCalisma+0x3bc>)
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	f083 0301 	eor.w	r3, r3, #1
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d006      	beq.n	8003ff8 <checkAktifCalisma+0x2a0>
					timer2=millis;
 8003fea:	4b4b      	ldr	r3, [pc, #300]	@ (8004118 <checkAktifCalisma+0x3c0>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a4b      	ldr	r2, [pc, #300]	@ (800411c <checkAktifCalisma+0x3c4>)
 8003ff0:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 8003ff2:	4b48      	ldr	r3, [pc, #288]	@ (8004114 <checkAktifCalisma+0x3bc>)
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 8003ff8:	4b47      	ldr	r3, [pc, #284]	@ (8004118 <checkAktifCalisma+0x3c0>)
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	4b47      	ldr	r3, [pc, #284]	@ (800411c <checkAktifCalisma+0x3c4>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	4a47      	ldr	r2, [pc, #284]	@ (8004120 <checkAktifCalisma+0x3c8>)
 8004004:	7812      	ldrb	r2, [r2, #0]
 8004006:	4293      	cmp	r3, r2
 8004008:	d303      	bcc.n	8004012 <checkAktifCalisma+0x2ba>
 800400a:	4b42      	ldr	r3, [pc, #264]	@ (8004114 <checkAktifCalisma+0x3bc>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d118      	bne.n	8004044 <checkAktifCalisma+0x2ec>
 8004012:	4b3c      	ldr	r3, [pc, #240]	@ (8004104 <checkAktifCalisma+0x3ac>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	f083 0301 	eor.w	r3, r3, #1
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d006      	beq.n	800402e <checkAktifCalisma+0x2d6>
 8004020:	4b39      	ldr	r3, [pc, #228]	@ (8004108 <checkAktifCalisma+0x3b0>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	f083 0301 	eor.w	r3, r3, #1
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10a      	bne.n	8004044 <checkAktifCalisma+0x2ec>
 800402e:	4b37      	ldr	r3, [pc, #220]	@ (800410c <checkAktifCalisma+0x3b4>)
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	f083 0301 	eor.w	r3, r3, #1
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d103      	bne.n	8004044 <checkAktifCalisma+0x2ec>
 800403c:	4b34      	ldr	r3, [pc, #208]	@ (8004110 <checkAktifCalisma+0x3b8>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d10a      	bne.n	800405a <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004044:	2200      	movs	r2, #0
 8004046:	2104      	movs	r1, #4
 8004048:	4827      	ldr	r0, [pc, #156]	@ (80040e8 <checkAktifCalisma+0x390>)
 800404a:	f007 f810 	bl	800b06e <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 800404e:	4b2a      	ldr	r3, [pc, #168]	@ (80040f8 <checkAktifCalisma+0x3a0>)
 8004050:	2200      	movs	r2, #0
 8004052:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 8004054:	4b2f      	ldr	r3, [pc, #188]	@ (8004114 <checkAktifCalisma+0x3bc>)
 8004056:	2200      	movs	r2, #0
 8004058:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 800405a:	4b32      	ldr	r3, [pc, #200]	@ (8004124 <checkAktifCalisma+0x3cc>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d102      	bne.n	8004068 <checkAktifCalisma+0x310>
					cerceveVar=1;
 8004062:	4b31      	ldr	r3, [pc, #196]	@ (8004128 <checkAktifCalisma+0x3d0>)
 8004064:	2201      	movs	r2, #1
 8004066:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004068:	4b2e      	ldr	r3, [pc, #184]	@ (8004124 <checkAktifCalisma+0x3cc>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d116      	bne.n	800409e <checkAktifCalisma+0x346>
 8004070:	4b2e      	ldr	r3, [pc, #184]	@ (800412c <checkAktifCalisma+0x3d4>)
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d112      	bne.n	800409e <checkAktifCalisma+0x346>
 8004078:	2101      	movs	r1, #1
 800407a:	4821      	ldr	r0, [pc, #132]	@ (8004100 <checkAktifCalisma+0x3a8>)
 800407c:	f006 ffe0 	bl	800b040 <HAL_GPIO_ReadPin>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10b      	bne.n	800409e <checkAktifCalisma+0x346>
 8004086:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800408a:	4817      	ldr	r0, [pc, #92]	@ (80040e8 <checkAktifCalisma+0x390>)
 800408c:	f006 ffd8 	bl	800b040 <HAL_GPIO_ReadPin>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d103      	bne.n	800409e <checkAktifCalisma+0x346>
					cerceveVar=1;
 8004096:	4b24      	ldr	r3, [pc, #144]	@ (8004128 <checkAktifCalisma+0x3d0>)
 8004098:	2201      	movs	r2, #1
 800409a:	701a      	strb	r2, [r3, #0]
 800409c:	e011      	b.n	80040c2 <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 800409e:	4b21      	ldr	r3, [pc, #132]	@ (8004124 <checkAktifCalisma+0x3cc>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d10d      	bne.n	80040c2 <checkAktifCalisma+0x36a>
 80040a6:	2101      	movs	r1, #1
 80040a8:	4815      	ldr	r0, [pc, #84]	@ (8004100 <checkAktifCalisma+0x3a8>)
 80040aa:	f006 ffc9 	bl	800b040 <HAL_GPIO_ReadPin>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d106      	bne.n	80040c2 <checkAktifCalisma+0x36a>
 80040b4:	4b1d      	ldr	r3, [pc, #116]	@ (800412c <checkAktifCalisma+0x3d4>)
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d102      	bne.n	80040c2 <checkAktifCalisma+0x36a>
					cerceveVar=0;
 80040bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004128 <checkAktifCalisma+0x3d0>)
 80040be:	2200      	movs	r2, #0
 80040c0:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 80040c2:	4b18      	ldr	r3, [pc, #96]	@ (8004124 <checkAktifCalisma+0x3cc>)
 80040c4:	781b      	ldrb	r3, [r3, #0]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d135      	bne.n	8004136 <checkAktifCalisma+0x3de>
 80040ca:	4b18      	ldr	r3, [pc, #96]	@ (800412c <checkAktifCalisma+0x3d4>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d131      	bne.n	8004136 <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80040d2:	2101      	movs	r1, #1
 80040d4:	480a      	ldr	r0, [pc, #40]	@ (8004100 <checkAktifCalisma+0x3a8>)
 80040d6:	f006 ffb3 	bl	800b040 <HAL_GPIO_ReadPin>
 80040da:	4603      	mov	r3, r0
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d127      	bne.n	8004130 <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 80040e0:	4b11      	ldr	r3, [pc, #68]	@ (8004128 <checkAktifCalisma+0x3d0>)
 80040e2:	2201      	movs	r2, #1
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	e026      	b.n	8004136 <checkAktifCalisma+0x3de>
 80040e8:	40010c00 	.word	0x40010c00
 80040ec:	200010a1 	.word	0x200010a1
 80040f0:	2000107b 	.word	0x2000107b
 80040f4:	2000107f 	.word	0x2000107f
 80040f8:	200010a5 	.word	0x200010a5
 80040fc:	200010a8 	.word	0x200010a8
 8004100:	40011000 	.word	0x40011000
 8004104:	200010bd 	.word	0x200010bd
 8004108:	200010d0 	.word	0x200010d0
 800410c:	200010be 	.word	0x200010be
 8004110:	2000106f 	.word	0x2000106f
 8004114:	2000109d 	.word	0x2000109d
 8004118:	20001044 	.word	0x20001044
 800411c:	20001050 	.word	0x20001050
 8004120:	20001080 	.word	0x20001080
 8004124:	20001070 	.word	0x20001070
 8004128:	200010c2 	.word	0x200010c2
 800412c:	2000106d 	.word	0x2000106d
					} else {
						cerceveVar=0;
 8004130:	4b7f      	ldr	r3, [pc, #508]	@ (8004330 <checkAktifCalisma+0x5d8>)
 8004132:	2200      	movs	r2, #0
 8004134:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004136:	4b7f      	ldr	r3, [pc, #508]	@ (8004334 <checkAktifCalisma+0x5dc>)
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d17c      	bne.n	8004238 <checkAktifCalisma+0x4e0>
 800413e:	4b7e      	ldr	r3, [pc, #504]	@ (8004338 <checkAktifCalisma+0x5e0>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d078      	beq.n	8004238 <checkAktifCalisma+0x4e0>
 8004146:	4b7d      	ldr	r3, [pc, #500]	@ (800433c <checkAktifCalisma+0x5e4>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d074      	beq.n	8004238 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800414e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004152:	487b      	ldr	r0, [pc, #492]	@ (8004340 <checkAktifCalisma+0x5e8>)
 8004154:	f006 ff74 	bl	800b040 <HAL_GPIO_ReadPin>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d003      	beq.n	8004166 <checkAktifCalisma+0x40e>
 800415e:	4b79      	ldr	r3, [pc, #484]	@ (8004344 <checkAktifCalisma+0x5ec>)
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d068      	beq.n	8004238 <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8004166:	4b72      	ldr	r3, [pc, #456]	@ (8004330 <checkAktifCalisma+0x5d8>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d064      	beq.n	8004238 <checkAktifCalisma+0x4e0>
 800416e:	4b76      	ldr	r3, [pc, #472]	@ (8004348 <checkAktifCalisma+0x5f0>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	f083 0301 	eor.w	r3, r3, #1
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d05d      	beq.n	8004238 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 800417c:	2104      	movs	r1, #4
 800417e:	4873      	ldr	r0, [pc, #460]	@ (800434c <checkAktifCalisma+0x5f4>)
 8004180:	f006 ff5e 	bl	800b040 <HAL_GPIO_ReadPin>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <checkAktifCalisma+0x43a>
 800418a:	4b71      	ldr	r3, [pc, #452]	@ (8004350 <checkAktifCalisma+0x5f8>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d152      	bne.n	8004238 <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004192:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004196:	486a      	ldr	r0, [pc, #424]	@ (8004340 <checkAktifCalisma+0x5e8>)
 8004198:	f006 ff52 	bl	800b040 <HAL_GPIO_ReadPin>
 800419c:	4603      	mov	r3, r0
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d10e      	bne.n	80041c0 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80041a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041a6:	4866      	ldr	r0, [pc, #408]	@ (8004340 <checkAktifCalisma+0x5e8>)
 80041a8:	f006 ff4a 	bl	800b040 <HAL_GPIO_ReadPin>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d106      	bne.n	80041c0 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80041b2:	2140      	movs	r1, #64	@ 0x40
 80041b4:	4865      	ldr	r0, [pc, #404]	@ (800434c <checkAktifCalisma+0x5f4>)
 80041b6:	f006 ff43 	bl	800b040 <HAL_GPIO_ReadPin>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d003      	beq.n	80041c8 <checkAktifCalisma+0x470>
 80041c0:	4b64      	ldr	r3, [pc, #400]	@ (8004354 <checkAktifCalisma+0x5fc>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d037      	beq.n	8004238 <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 80041c8:	4b63      	ldr	r3, [pc, #396]	@ (8004358 <checkAktifCalisma+0x600>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	f083 0301 	eor.w	r3, r3, #1
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d030      	beq.n	8004238 <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 80041d6:	4b61      	ldr	r3, [pc, #388]	@ (800435c <checkAktifCalisma+0x604>)
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	f083 0301 	eor.w	r3, r3, #1
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d029      	beq.n	8004238 <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 80041e4:	4b5e      	ldr	r3, [pc, #376]	@ (8004360 <checkAktifCalisma+0x608>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	f083 0301 	eor.w	r3, r3, #1
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d022      	beq.n	8004238 <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 80041f2:	4b5c      	ldr	r3, [pc, #368]	@ (8004364 <checkAktifCalisma+0x60c>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	f083 0301 	eor.w	r3, r3, #1
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01b      	beq.n	8004238 <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 8004200:	4b59      	ldr	r3, [pc, #356]	@ (8004368 <checkAktifCalisma+0x610>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	f083 0301 	eor.w	r3, r3, #1
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d014      	beq.n	8004238 <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 800420e:	4b57      	ldr	r3, [pc, #348]	@ (800436c <checkAktifCalisma+0x614>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	f083 0301 	eor.w	r3, r3, #1
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00d      	beq.n	8004238 <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800421c:	2201      	movs	r2, #1
 800421e:	2102      	movs	r1, #2
 8004220:	4847      	ldr	r0, [pc, #284]	@ (8004340 <checkAktifCalisma+0x5e8>)
 8004222:	f006 ff24 	bl	800b06e <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 8004226:	4b4b      	ldr	r3, [pc, #300]	@ (8004354 <checkAktifCalisma+0x5fc>)
 8004228:	2201      	movs	r2, #1
 800422a:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 800422c:	4b50      	ldr	r3, [pc, #320]	@ (8004370 <checkAktifCalisma+0x618>)
 800422e:	2201      	movs	r2, #1
 8004230:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 8004232:	4b50      	ldr	r3, [pc, #320]	@ (8004374 <checkAktifCalisma+0x61c>)
 8004234:	2201      	movs	r2, #1
 8004236:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8004238:	4b46      	ldr	r3, [pc, #280]	@ (8004354 <checkAktifCalisma+0x5fc>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d033      	beq.n	80042a8 <checkAktifCalisma+0x550>
 8004240:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004244:	483e      	ldr	r0, [pc, #248]	@ (8004340 <checkAktifCalisma+0x5e8>)
 8004246:	f006 fefb 	bl	800b040 <HAL_GPIO_ReadPin>
 800424a:	4603      	mov	r3, r0
 800424c:	2b01      	cmp	r3, #1
 800424e:	d106      	bne.n	800425e <checkAktifCalisma+0x506>
 8004250:	4b3c      	ldr	r3, [pc, #240]	@ (8004344 <checkAktifCalisma+0x5ec>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	f083 0301 	eor.w	r3, r3, #1
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10a      	bne.n	8004274 <checkAktifCalisma+0x51c>
 800425e:	2104      	movs	r1, #4
 8004260:	483a      	ldr	r0, [pc, #232]	@ (800434c <checkAktifCalisma+0x5f4>)
 8004262:	f006 feed 	bl	800b040 <HAL_GPIO_ReadPin>
 8004266:	4603      	mov	r3, r0
 8004268:	2b01      	cmp	r3, #1
 800426a:	d11d      	bne.n	80042a8 <checkAktifCalisma+0x550>
 800426c:	4b38      	ldr	r3, [pc, #224]	@ (8004350 <checkAktifCalisma+0x5f8>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d019      	beq.n	80042a8 <checkAktifCalisma+0x550>
 8004274:	4b30      	ldr	r3, [pc, #192]	@ (8004338 <checkAktifCalisma+0x5e0>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d015      	beq.n	80042a8 <checkAktifCalisma+0x550>
 800427c:	4b2f      	ldr	r3, [pc, #188]	@ (800433c <checkAktifCalisma+0x5e4>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d011      	beq.n	80042a8 <checkAktifCalisma+0x550>
 8004284:	4b2a      	ldr	r3, [pc, #168]	@ (8004330 <checkAktifCalisma+0x5d8>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00d      	beq.n	80042a8 <checkAktifCalisma+0x550>
 800428c:	4b3a      	ldr	r3, [pc, #232]	@ (8004378 <checkAktifCalisma+0x620>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	f083 0301 	eor.w	r3, r3, #1
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d006      	beq.n	80042a8 <checkAktifCalisma+0x550>
					timer2=millis;
 800429a:	4b38      	ldr	r3, [pc, #224]	@ (800437c <checkAktifCalisma+0x624>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a38      	ldr	r2, [pc, #224]	@ (8004380 <checkAktifCalisma+0x628>)
 80042a0:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 80042a2:	4b35      	ldr	r3, [pc, #212]	@ (8004378 <checkAktifCalisma+0x620>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80042a8:	4b34      	ldr	r3, [pc, #208]	@ (800437c <checkAktifCalisma+0x624>)
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	4b34      	ldr	r3, [pc, #208]	@ (8004380 <checkAktifCalisma+0x628>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	4a34      	ldr	r2, [pc, #208]	@ (8004384 <checkAktifCalisma+0x62c>)
 80042b4:	7812      	ldrb	r2, [r2, #0]
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d303      	bcc.n	80042c2 <checkAktifCalisma+0x56a>
 80042ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004378 <checkAktifCalisma+0x620>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d114      	bne.n	80042ec <checkAktifCalisma+0x594>
 80042c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004338 <checkAktifCalisma+0x5e0>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	f083 0301 	eor.w	r3, r3, #1
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10d      	bne.n	80042ec <checkAktifCalisma+0x594>
 80042d0:	4b1a      	ldr	r3, [pc, #104]	@ (800433c <checkAktifCalisma+0x5e4>)
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	f083 0301 	eor.w	r3, r3, #1
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d106      	bne.n	80042ec <checkAktifCalisma+0x594>
 80042de:	4b14      	ldr	r3, [pc, #80]	@ (8004330 <checkAktifCalisma+0x5d8>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	f083 0301 	eor.w	r3, r3, #1
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00a      	beq.n	8004302 <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80042ec:	2200      	movs	r2, #0
 80042ee:	2102      	movs	r1, #2
 80042f0:	4813      	ldr	r0, [pc, #76]	@ (8004340 <checkAktifCalisma+0x5e8>)
 80042f2:	f006 febc 	bl	800b06e <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 80042f6:	4b17      	ldr	r3, [pc, #92]	@ (8004354 <checkAktifCalisma+0x5fc>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 80042fc:	4b1e      	ldr	r3, [pc, #120]	@ (8004378 <checkAktifCalisma+0x620>)
 80042fe:	2200      	movs	r2, #0
 8004300:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8004302:	4b14      	ldr	r3, [pc, #80]	@ (8004354 <checkAktifCalisma+0x5fc>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d040      	beq.n	800438c <checkAktifCalisma+0x634>
 800430a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800430e:	480f      	ldr	r0, [pc, #60]	@ (800434c <checkAktifCalisma+0x5f4>)
 8004310:	f006 fe96 	bl	800b040 <HAL_GPIO_ReadPin>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d138      	bne.n	800438c <checkAktifCalisma+0x634>
 800431a:	4b1b      	ldr	r3, [pc, #108]	@ (8004388 <checkAktifCalisma+0x630>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d034      	beq.n	800438c <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8004322:	2201      	movs	r2, #1
 8004324:	2101      	movs	r1, #1
 8004326:	4806      	ldr	r0, [pc, #24]	@ (8004340 <checkAktifCalisma+0x5e8>)
 8004328:	f006 fea1 	bl	800b06e <HAL_GPIO_WritePin>
 800432c:	e033      	b.n	8004396 <checkAktifCalisma+0x63e>
 800432e:	bf00      	nop
 8004330:	200010c2 	.word	0x200010c2
 8004334:	20001089 	.word	0x20001089
 8004338:	200010bd 	.word	0x200010bd
 800433c:	200010be 	.word	0x200010be
 8004340:	40010c00 	.word	0x40010c00
 8004344:	200010a9 	.word	0x200010a9
 8004348:	200010bc 	.word	0x200010bc
 800434c:	40011000 	.word	0x40011000
 8004350:	20001072 	.word	0x20001072
 8004354:	200010a4 	.word	0x200010a4
 8004358:	200010a1 	.word	0x200010a1
 800435c:	200010a5 	.word	0x200010a5
 8004360:	200010a2 	.word	0x200010a2
 8004364:	200010a3 	.word	0x200010a3
 8004368:	200010a6 	.word	0x200010a6
 800436c:	200010a7 	.word	0x200010a7
 8004370:	200010ac 	.word	0x200010ac
 8004374:	200010cc 	.word	0x200010cc
 8004378:	2000109c 	.word	0x2000109c
 800437c:	20001044 	.word	0x20001044
 8004380:	20001050 	.word	0x20001050
 8004384:	20001081 	.word	0x20001081
 8004388:	20001071 	.word	0x20001071
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800438c:	2200      	movs	r2, #0
 800438e:	2101      	movs	r1, #1
 8004390:	4836      	ldr	r0, [pc, #216]	@ (800446c <checkAktifCalisma+0x714>)
 8004392:	f006 fe6c 	bl	800b06e <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8004396:	4b36      	ldr	r3, [pc, #216]	@ (8004470 <checkAktifCalisma+0x718>)
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	f040 8080 	bne.w	80044a0 <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80043a0:	4b34      	ldr	r3, [pc, #208]	@ (8004474 <checkAktifCalisma+0x71c>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d003      	beq.n	80043b0 <checkAktifCalisma+0x658>
 80043a8:	4b32      	ldr	r3, [pc, #200]	@ (8004474 <checkAktifCalisma+0x71c>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d177      	bne.n	80044a0 <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 80043b0:	4b31      	ldr	r3, [pc, #196]	@ (8004478 <checkAktifCalisma+0x720>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d073      	beq.n	80044a0 <checkAktifCalisma+0x748>
 80043b8:	4b30      	ldr	r3, [pc, #192]	@ (800447c <checkAktifCalisma+0x724>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d06f      	beq.n	80044a0 <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80043c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80043c4:	4829      	ldr	r0, [pc, #164]	@ (800446c <checkAktifCalisma+0x714>)
 80043c6:	f006 fe3b 	bl	800b040 <HAL_GPIO_ReadPin>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d167      	bne.n	80044a0 <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80043d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80043d4:	482a      	ldr	r0, [pc, #168]	@ (8004480 <checkAktifCalisma+0x728>)
 80043d6:	f006 fe33 	bl	800b040 <HAL_GPIO_ReadPin>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <checkAktifCalisma+0x690>
 80043e0:	4b28      	ldr	r3, [pc, #160]	@ (8004484 <checkAktifCalisma+0x72c>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d15b      	bne.n	80044a0 <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80043e8:	2140      	movs	r1, #64	@ 0x40
 80043ea:	4825      	ldr	r0, [pc, #148]	@ (8004480 <checkAktifCalisma+0x728>)
 80043ec:	f006 fe28 	bl	800b040 <HAL_GPIO_ReadPin>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d10f      	bne.n	8004416 <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80043f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80043fa:	481c      	ldr	r0, [pc, #112]	@ (800446c <checkAktifCalisma+0x714>)
 80043fc:	f006 fe20 	bl	800b040 <HAL_GPIO_ReadPin>
 8004400:	4603      	mov	r3, r0
 8004402:	2b01      	cmp	r3, #1
 8004404:	d107      	bne.n	8004416 <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8004406:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800440a:	4818      	ldr	r0, [pc, #96]	@ (800446c <checkAktifCalisma+0x714>)
 800440c:	f006 fe18 	bl	800b040 <HAL_GPIO_ReadPin>
 8004410:	4603      	mov	r3, r0
 8004412:	2b01      	cmp	r3, #1
 8004414:	d003      	beq.n	800441e <checkAktifCalisma+0x6c6>
 8004416:	4b1c      	ldr	r3, [pc, #112]	@ (8004488 <checkAktifCalisma+0x730>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d040      	beq.n	80044a0 <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 800441e:	4b1b      	ldr	r3, [pc, #108]	@ (800448c <checkAktifCalisma+0x734>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	f083 0301 	eor.w	r3, r3, #1
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d039      	beq.n	80044a0 <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 800442c:	4b18      	ldr	r3, [pc, #96]	@ (8004490 <checkAktifCalisma+0x738>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	f083 0301 	eor.w	r3, r3, #1
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d032      	beq.n	80044a0 <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 800443a:	4b16      	ldr	r3, [pc, #88]	@ (8004494 <checkAktifCalisma+0x73c>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	f083 0301 	eor.w	r3, r3, #1
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d02b      	beq.n	80044a0 <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8004448:	4b13      	ldr	r3, [pc, #76]	@ (8004498 <checkAktifCalisma+0x740>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	f083 0301 	eor.w	r3, r3, #1
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d024      	beq.n	80044a0 <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 8004456:	4b11      	ldr	r3, [pc, #68]	@ (800449c <checkAktifCalisma+0x744>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	f083 0301 	eor.w	r3, r3, #1
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d01d      	beq.n	80044a0 <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8004464:	4b08      	ldr	r3, [pc, #32]	@ (8004488 <checkAktifCalisma+0x730>)
 8004466:	2201      	movs	r2, #1
 8004468:	701a      	strb	r2, [r3, #0]
 800446a:	e01c      	b.n	80044a6 <checkAktifCalisma+0x74e>
 800446c:	40010c00 	.word	0x40010c00
 8004470:	20001089 	.word	0x20001089
 8004474:	2000107b 	.word	0x2000107b
 8004478:	200010bd 	.word	0x200010bd
 800447c:	200010be 	.word	0x200010be
 8004480:	40011000 	.word	0x40011000
 8004484:	2000107c 	.word	0x2000107c
 8004488:	200010a2 	.word	0x200010a2
 800448c:	200010a1 	.word	0x200010a1
 8004490:	200010a5 	.word	0x200010a5
 8004494:	200010a4 	.word	0x200010a4
 8004498:	200010a3 	.word	0x200010a3
 800449c:	200010a7 	.word	0x200010a7
				} else {
					devmotoryukaricalisiyor=0;
 80044a0:	4b64      	ldr	r3, [pc, #400]	@ (8004634 <checkAktifCalisma+0x8dc>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 80044a6:	4b63      	ldr	r3, [pc, #396]	@ (8004634 <checkAktifCalisma+0x8dc>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d007      	beq.n	80044be <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80044ae:	2201      	movs	r2, #1
 80044b0:	2120      	movs	r1, #32
 80044b2:	4861      	ldr	r0, [pc, #388]	@ (8004638 <checkAktifCalisma+0x8e0>)
 80044b4:	f006 fddb 	bl	800b06e <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 80044b8:	4b60      	ldr	r3, [pc, #384]	@ (800463c <checkAktifCalisma+0x8e4>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 80044be:	4b5f      	ldr	r3, [pc, #380]	@ (800463c <checkAktifCalisma+0x8e4>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d025      	beq.n	8004512 <checkAktifCalisma+0x7ba>
 80044c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044ca:	485d      	ldr	r0, [pc, #372]	@ (8004640 <checkAktifCalisma+0x8e8>)
 80044cc:	f006 fdb8 	bl	800b040 <HAL_GPIO_ReadPin>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d007      	beq.n	80044e6 <checkAktifCalisma+0x78e>
 80044d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80044da:	4857      	ldr	r0, [pc, #348]	@ (8004638 <checkAktifCalisma+0x8e0>)
 80044dc:	f006 fdb0 	bl	800b040 <HAL_GPIO_ReadPin>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d115      	bne.n	8004512 <checkAktifCalisma+0x7ba>
 80044e6:	4b57      	ldr	r3, [pc, #348]	@ (8004644 <checkAktifCalisma+0x8ec>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d011      	beq.n	8004512 <checkAktifCalisma+0x7ba>
 80044ee:	4b56      	ldr	r3, [pc, #344]	@ (8004648 <checkAktifCalisma+0x8f0>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00d      	beq.n	8004512 <checkAktifCalisma+0x7ba>
 80044f6:	4b55      	ldr	r3, [pc, #340]	@ (800464c <checkAktifCalisma+0x8f4>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	f083 0301 	eor.w	r3, r3, #1
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	d006      	beq.n	8004512 <checkAktifCalisma+0x7ba>
					timer2=millis;
 8004504:	4b52      	ldr	r3, [pc, #328]	@ (8004650 <checkAktifCalisma+0x8f8>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a52      	ldr	r2, [pc, #328]	@ (8004654 <checkAktifCalisma+0x8fc>)
 800450a:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 800450c:	4b4f      	ldr	r3, [pc, #316]	@ (800464c <checkAktifCalisma+0x8f4>)
 800450e:	2201      	movs	r2, #1
 8004510:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004512:	4b4f      	ldr	r3, [pc, #316]	@ (8004650 <checkAktifCalisma+0x8f8>)
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	4b4f      	ldr	r3, [pc, #316]	@ (8004654 <checkAktifCalisma+0x8fc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	4a4e      	ldr	r2, [pc, #312]	@ (8004658 <checkAktifCalisma+0x900>)
 800451e:	7812      	ldrb	r2, [r2, #0]
 8004520:	4293      	cmp	r3, r2
 8004522:	d303      	bcc.n	800452c <checkAktifCalisma+0x7d4>
 8004524:	4b49      	ldr	r3, [pc, #292]	@ (800464c <checkAktifCalisma+0x8f4>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10d      	bne.n	8004548 <checkAktifCalisma+0x7f0>
 800452c:	4b45      	ldr	r3, [pc, #276]	@ (8004644 <checkAktifCalisma+0x8ec>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	f083 0301 	eor.w	r3, r3, #1
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <checkAktifCalisma+0x7f0>
 800453a:	4b43      	ldr	r3, [pc, #268]	@ (8004648 <checkAktifCalisma+0x8f0>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	f083 0301 	eor.w	r3, r3, #1
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00a      	beq.n	800455e <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004548:	2200      	movs	r2, #0
 800454a:	2120      	movs	r1, #32
 800454c:	483a      	ldr	r0, [pc, #232]	@ (8004638 <checkAktifCalisma+0x8e0>)
 800454e:	f006 fd8e 	bl	800b06e <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8004552:	4b3a      	ldr	r3, [pc, #232]	@ (800463c <checkAktifCalisma+0x8e4>)
 8004554:	2200      	movs	r2, #0
 8004556:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8004558:	4b3c      	ldr	r3, [pc, #240]	@ (800464c <checkAktifCalisma+0x8f4>)
 800455a:	2200      	movs	r2, #0
 800455c:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 800455e:	4b3f      	ldr	r3, [pc, #252]	@ (800465c <checkAktifCalisma+0x904>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	f040 8088 	bne.w	8004678 <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004568:	4b3d      	ldr	r3, [pc, #244]	@ (8004660 <checkAktifCalisma+0x908>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d003      	beq.n	8004578 <checkAktifCalisma+0x820>
 8004570:	4b3b      	ldr	r3, [pc, #236]	@ (8004660 <checkAktifCalisma+0x908>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b02      	cmp	r3, #2
 8004576:	d17f      	bne.n	8004678 <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8004578:	4b32      	ldr	r3, [pc, #200]	@ (8004644 <checkAktifCalisma+0x8ec>)
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d07b      	beq.n	8004678 <checkAktifCalisma+0x920>
 8004580:	4b31      	ldr	r3, [pc, #196]	@ (8004648 <checkAktifCalisma+0x8f0>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d077      	beq.n	8004678 <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004588:	2140      	movs	r1, #64	@ 0x40
 800458a:	482b      	ldr	r0, [pc, #172]	@ (8004638 <checkAktifCalisma+0x8e0>)
 800458c:	f006 fd58 	bl	800b040 <HAL_GPIO_ReadPin>
 8004590:	4603      	mov	r3, r0
 8004592:	2b00      	cmp	r3, #0
 8004594:	d170      	bne.n	8004678 <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8004596:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800459a:	4827      	ldr	r0, [pc, #156]	@ (8004638 <checkAktifCalisma+0x8e0>)
 800459c:	f006 fd50 	bl	800b040 <HAL_GPIO_ReadPin>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <checkAktifCalisma+0x856>
 80045a6:	4b2f      	ldr	r3, [pc, #188]	@ (8004664 <checkAktifCalisma+0x90c>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d164      	bne.n	8004678 <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80045ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80045b2:	4823      	ldr	r0, [pc, #140]	@ (8004640 <checkAktifCalisma+0x8e8>)
 80045b4:	f006 fd44 	bl	800b040 <HAL_GPIO_ReadPin>
 80045b8:	4603      	mov	r3, r0
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d10f      	bne.n	80045de <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80045be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80045c2:	481f      	ldr	r0, [pc, #124]	@ (8004640 <checkAktifCalisma+0x8e8>)
 80045c4:	f006 fd3c 	bl	800b040 <HAL_GPIO_ReadPin>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d107      	bne.n	80045de <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 80045ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80045d2:	481b      	ldr	r0, [pc, #108]	@ (8004640 <checkAktifCalisma+0x8e8>)
 80045d4:	f006 fd34 	bl	800b040 <HAL_GPIO_ReadPin>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d003      	beq.n	80045e6 <checkAktifCalisma+0x88e>
 80045de:	4b22      	ldr	r3, [pc, #136]	@ (8004668 <checkAktifCalisma+0x910>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d048      	beq.n	8004678 <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 80045e6:	4b21      	ldr	r3, [pc, #132]	@ (800466c <checkAktifCalisma+0x914>)
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	f083 0301 	eor.w	r3, r3, #1
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d041      	beq.n	8004678 <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 80045f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004670 <checkAktifCalisma+0x918>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	f083 0301 	eor.w	r3, r3, #1
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d03a      	beq.n	8004678 <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8004602:	4b1c      	ldr	r3, [pc, #112]	@ (8004674 <checkAktifCalisma+0x91c>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	f083 0301 	eor.w	r3, r3, #1
 800460a:	b2db      	uxtb	r3, r3
 800460c:	2b00      	cmp	r3, #0
 800460e:	d033      	beq.n	8004678 <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8004610:	4b0a      	ldr	r3, [pc, #40]	@ (800463c <checkAktifCalisma+0x8e4>)
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	f083 0301 	eor.w	r3, r3, #1
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d02c      	beq.n	8004678 <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 800461e:	4b05      	ldr	r3, [pc, #20]	@ (8004634 <checkAktifCalisma+0x8dc>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	f083 0301 	eor.w	r3, r3, #1
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d025      	beq.n	8004678 <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 800462c:	4b0e      	ldr	r3, [pc, #56]	@ (8004668 <checkAktifCalisma+0x910>)
 800462e:	2201      	movs	r2, #1
 8004630:	701a      	strb	r2, [r3, #0]
 8004632:	e024      	b.n	800467e <checkAktifCalisma+0x926>
 8004634:	200010a2 	.word	0x200010a2
 8004638:	40011000 	.word	0x40011000
 800463c:	200010a6 	.word	0x200010a6
 8004640:	40010c00 	.word	0x40010c00
 8004644:	200010bd 	.word	0x200010bd
 8004648:	200010be 	.word	0x200010be
 800464c:	2000109e 	.word	0x2000109e
 8004650:	20001044 	.word	0x20001044
 8004654:	20001050 	.word	0x20001050
 8004658:	20001082 	.word	0x20001082
 800465c:	20001089 	.word	0x20001089
 8004660:	2000107b 	.word	0x2000107b
 8004664:	2000107d 	.word	0x2000107d
 8004668:	200010a3 	.word	0x200010a3
 800466c:	200010a1 	.word	0x200010a1
 8004670:	200010a5 	.word	0x200010a5
 8004674:	200010a4 	.word	0x200010a4
				} else {
					devmotorasagicalisiyor=0;
 8004678:	4b96      	ldr	r3, [pc, #600]	@ (80048d4 <checkAktifCalisma+0xb7c>)
 800467a:	2200      	movs	r2, #0
 800467c:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 800467e:	4b95      	ldr	r3, [pc, #596]	@ (80048d4 <checkAktifCalisma+0xb7c>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d007      	beq.n	8004696 <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004686:	2201      	movs	r2, #1
 8004688:	2110      	movs	r1, #16
 800468a:	4893      	ldr	r0, [pc, #588]	@ (80048d8 <checkAktifCalisma+0xb80>)
 800468c:	f006 fcef 	bl	800b06e <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8004690:	4b92      	ldr	r3, [pc, #584]	@ (80048dc <checkAktifCalisma+0xb84>)
 8004692:	2201      	movs	r2, #1
 8004694:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004696:	4b91      	ldr	r3, [pc, #580]	@ (80048dc <checkAktifCalisma+0xb84>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d024      	beq.n	80046e8 <checkAktifCalisma+0x990>
 800469e:	2140      	movs	r1, #64	@ 0x40
 80046a0:	488d      	ldr	r0, [pc, #564]	@ (80048d8 <checkAktifCalisma+0xb80>)
 80046a2:	f006 fccd 	bl	800b040 <HAL_GPIO_ReadPin>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d007      	beq.n	80046bc <checkAktifCalisma+0x964>
 80046ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80046b0:	4889      	ldr	r0, [pc, #548]	@ (80048d8 <checkAktifCalisma+0xb80>)
 80046b2:	f006 fcc5 	bl	800b040 <HAL_GPIO_ReadPin>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d115      	bne.n	80046e8 <checkAktifCalisma+0x990>
 80046bc:	4b88      	ldr	r3, [pc, #544]	@ (80048e0 <checkAktifCalisma+0xb88>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d011      	beq.n	80046e8 <checkAktifCalisma+0x990>
 80046c4:	4b87      	ldr	r3, [pc, #540]	@ (80048e4 <checkAktifCalisma+0xb8c>)
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00d      	beq.n	80046e8 <checkAktifCalisma+0x990>
 80046cc:	4b86      	ldr	r3, [pc, #536]	@ (80048e8 <checkAktifCalisma+0xb90>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	f083 0301 	eor.w	r3, r3, #1
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d006      	beq.n	80046e8 <checkAktifCalisma+0x990>
					timer2=millis;
 80046da:	4b84      	ldr	r3, [pc, #528]	@ (80048ec <checkAktifCalisma+0xb94>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a84      	ldr	r2, [pc, #528]	@ (80048f0 <checkAktifCalisma+0xb98>)
 80046e0:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 80046e2:	4b81      	ldr	r3, [pc, #516]	@ (80048e8 <checkAktifCalisma+0xb90>)
 80046e4:	2201      	movs	r2, #1
 80046e6:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80046e8:	4b80      	ldr	r3, [pc, #512]	@ (80048ec <checkAktifCalisma+0xb94>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4b80      	ldr	r3, [pc, #512]	@ (80048f0 <checkAktifCalisma+0xb98>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	4a80      	ldr	r2, [pc, #512]	@ (80048f4 <checkAktifCalisma+0xb9c>)
 80046f4:	7812      	ldrb	r2, [r2, #0]
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d303      	bcc.n	8004702 <checkAktifCalisma+0x9aa>
 80046fa:	4b7b      	ldr	r3, [pc, #492]	@ (80048e8 <checkAktifCalisma+0xb90>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10d      	bne.n	800471e <checkAktifCalisma+0x9c6>
 8004702:	4b77      	ldr	r3, [pc, #476]	@ (80048e0 <checkAktifCalisma+0xb88>)
 8004704:	781b      	ldrb	r3, [r3, #0]
 8004706:	f083 0301 	eor.w	r3, r3, #1
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d106      	bne.n	800471e <checkAktifCalisma+0x9c6>
 8004710:	4b74      	ldr	r3, [pc, #464]	@ (80048e4 <checkAktifCalisma+0xb8c>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	f083 0301 	eor.w	r3, r3, #1
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00a      	beq.n	8004734 <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800471e:	2200      	movs	r2, #0
 8004720:	2110      	movs	r1, #16
 8004722:	486d      	ldr	r0, [pc, #436]	@ (80048d8 <checkAktifCalisma+0xb80>)
 8004724:	f006 fca3 	bl	800b06e <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8004728:	4b6c      	ldr	r3, [pc, #432]	@ (80048dc <checkAktifCalisma+0xb84>)
 800472a:	2200      	movs	r2, #0
 800472c:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 800472e:	4b6e      	ldr	r3, [pc, #440]	@ (80048e8 <checkAktifCalisma+0xb90>)
 8004730:	2200      	movs	r2, #0
 8004732:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004734:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004738:	486f      	ldr	r0, [pc, #444]	@ (80048f8 <checkAktifCalisma+0xba0>)
 800473a:	f006 fc81 	bl	800b040 <HAL_GPIO_ReadPin>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d120      	bne.n	8004786 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004744:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004748:	486b      	ldr	r0, [pc, #428]	@ (80048f8 <checkAktifCalisma+0xba0>)
 800474a:	f006 fc79 	bl	800b040 <HAL_GPIO_ReadPin>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d118      	bne.n	8004786 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004754:	2104      	movs	r1, #4
 8004756:	4868      	ldr	r0, [pc, #416]	@ (80048f8 <checkAktifCalisma+0xba0>)
 8004758:	f006 fc72 	bl	800b040 <HAL_GPIO_ReadPin>
 800475c:	4603      	mov	r3, r0
 800475e:	2b00      	cmp	r3, #0
 8004760:	d111      	bne.n	8004786 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004762:	2102      	movs	r1, #2
 8004764:	4864      	ldr	r0, [pc, #400]	@ (80048f8 <checkAktifCalisma+0xba0>)
 8004766:	f006 fc6b 	bl	800b040 <HAL_GPIO_ReadPin>
 800476a:	4603      	mov	r3, r0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10a      	bne.n	8004786 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004770:	2101      	movs	r1, #1
 8004772:	4861      	ldr	r0, [pc, #388]	@ (80048f8 <checkAktifCalisma+0xba0>)
 8004774:	f006 fc64 	bl	800b040 <HAL_GPIO_ReadPin>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d103      	bne.n	8004786 <checkAktifCalisma+0xa2e>
					makineStop=1;
 800477e:	4b5f      	ldr	r3, [pc, #380]	@ (80048fc <checkAktifCalisma+0xba4>)
 8004780:	2201      	movs	r2, #1
 8004782:	701a      	strb	r2, [r3, #0]
 8004784:	e002      	b.n	800478c <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 8004786:	4b5d      	ldr	r3, [pc, #372]	@ (80048fc <checkAktifCalisma+0xba4>)
 8004788:	2200      	movs	r2, #0
 800478a:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800478c:	4b5c      	ldr	r3, [pc, #368]	@ (8004900 <checkAktifCalisma+0xba8>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d144      	bne.n	800481e <checkAktifCalisma+0xac6>
 8004794:	4b5b      	ldr	r3, [pc, #364]	@ (8004904 <checkAktifCalisma+0xbac>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d003      	beq.n	80047a4 <checkAktifCalisma+0xa4c>
 800479c:	4b59      	ldr	r3, [pc, #356]	@ (8004904 <checkAktifCalisma+0xbac>)
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d13c      	bne.n	800481e <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80047a4:	2180      	movs	r1, #128	@ 0x80
 80047a6:	484c      	ldr	r0, [pc, #304]	@ (80048d8 <checkAktifCalisma+0xb80>)
 80047a8:	f006 fc4a 	bl	800b040 <HAL_GPIO_ReadPin>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d103      	bne.n	80047ba <checkAktifCalisma+0xa62>
 80047b2:	4b55      	ldr	r3, [pc, #340]	@ (8004908 <checkAktifCalisma+0xbb0>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00b      	beq.n	80047d2 <checkAktifCalisma+0xa7a>
 80047ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80047be:	484e      	ldr	r0, [pc, #312]	@ (80048f8 <checkAktifCalisma+0xba0>)
 80047c0:	f006 fc3e 	bl	800b040 <HAL_GPIO_ReadPin>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d129      	bne.n	800481e <checkAktifCalisma+0xac6>
 80047ca:	4b4f      	ldr	r3, [pc, #316]	@ (8004908 <checkAktifCalisma+0xbb0>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d125      	bne.n	800481e <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80047d2:	2104      	movs	r1, #4
 80047d4:	4840      	ldr	r0, [pc, #256]	@ (80048d8 <checkAktifCalisma+0xb80>)
 80047d6:	f006 fc33 	bl	800b040 <HAL_GPIO_ReadPin>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d003      	beq.n	80047e8 <checkAktifCalisma+0xa90>
 80047e0:	4b4a      	ldr	r3, [pc, #296]	@ (800490c <checkAktifCalisma+0xbb4>)
 80047e2:	781b      	ldrb	r3, [r3, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d11a      	bne.n	800481e <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80047e8:	2102      	movs	r1, #2
 80047ea:	483b      	ldr	r0, [pc, #236]	@ (80048d8 <checkAktifCalisma+0xb80>)
 80047ec:	f006 fc28 	bl	800b040 <HAL_GPIO_ReadPin>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d113      	bne.n	800481e <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 80047f6:	4b46      	ldr	r3, [pc, #280]	@ (8004910 <checkAktifCalisma+0xbb8>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	f083 0301 	eor.w	r3, r3, #1
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00c      	beq.n	800481e <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 8004804:	4b3d      	ldr	r3, [pc, #244]	@ (80048fc <checkAktifCalisma+0xba4>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 800480c:	4b41      	ldr	r3, [pc, #260]	@ (8004914 <checkAktifCalisma+0xbbc>)
 800480e:	2201      	movs	r2, #1
 8004810:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004812:	4b36      	ldr	r3, [pc, #216]	@ (80048ec <checkAktifCalisma+0xb94>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a40      	ldr	r2, [pc, #256]	@ (8004918 <checkAktifCalisma+0xbc0>)
 8004818:	6013      	str	r3, [r2, #0]
					bekle();
 800481a:	f7ff f901 	bl	8003a20 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 800481e:	4b33      	ldr	r3, [pc, #204]	@ (80048ec <checkAktifCalisma+0xb94>)
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	4b3d      	ldr	r3, [pc, #244]	@ (8004918 <checkAktifCalisma+0xbc0>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	4a3c      	ldr	r2, [pc, #240]	@ (800491c <checkAktifCalisma+0xbc4>)
 800482a:	7812      	ldrb	r2, [r2, #0]
 800482c:	4293      	cmp	r3, r2
 800482e:	d211      	bcs.n	8004854 <checkAktifCalisma+0xafc>
 8004830:	2104      	movs	r1, #4
 8004832:	4829      	ldr	r0, [pc, #164]	@ (80048d8 <checkAktifCalisma+0xb80>)
 8004834:	f006 fc04 	bl	800b040 <HAL_GPIO_ReadPin>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <checkAktifCalisma+0xafc>
 800483e:	4b33      	ldr	r3, [pc, #204]	@ (800490c <checkAktifCalisma+0xbb4>)
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d006      	beq.n	8004854 <checkAktifCalisma+0xafc>
 8004846:	4b2d      	ldr	r3, [pc, #180]	@ (80048fc <checkAktifCalisma+0xba4>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	f083 0301 	eor.w	r3, r3, #1
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 8004854:	4b2f      	ldr	r3, [pc, #188]	@ (8004914 <checkAktifCalisma+0xbbc>)
 8004856:	2200      	movs	r2, #0
 8004858:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800485a:	4b29      	ldr	r3, [pc, #164]	@ (8004900 <checkAktifCalisma+0xba8>)
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d160      	bne.n	8004924 <checkAktifCalisma+0xbcc>
 8004862:	4b28      	ldr	r3, [pc, #160]	@ (8004904 <checkAktifCalisma+0xbac>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d003      	beq.n	8004872 <checkAktifCalisma+0xb1a>
 800486a:	4b26      	ldr	r3, [pc, #152]	@ (8004904 <checkAktifCalisma+0xbac>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b03      	cmp	r3, #3
 8004870:	d158      	bne.n	8004924 <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004872:	2104      	movs	r1, #4
 8004874:	4818      	ldr	r0, [pc, #96]	@ (80048d8 <checkAktifCalisma+0xb80>)
 8004876:	f006 fbe3 	bl	800b040 <HAL_GPIO_ReadPin>
 800487a:	4603      	mov	r3, r0
 800487c:	2b01      	cmp	r3, #1
 800487e:	d003      	beq.n	8004888 <checkAktifCalisma+0xb30>
 8004880:	4b22      	ldr	r3, [pc, #136]	@ (800490c <checkAktifCalisma+0xbb4>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d14d      	bne.n	8004924 <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004888:	2102      	movs	r1, #2
 800488a:	4813      	ldr	r0, [pc, #76]	@ (80048d8 <checkAktifCalisma+0xb80>)
 800488c:	f006 fbd8 	bl	800b040 <HAL_GPIO_ReadPin>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d146      	bne.n	8004924 <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004896:	2180      	movs	r1, #128	@ 0x80
 8004898:	480f      	ldr	r0, [pc, #60]	@ (80048d8 <checkAktifCalisma+0xb80>)
 800489a:	f006 fbd1 	bl	800b040 <HAL_GPIO_ReadPin>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d103      	bne.n	80048ac <checkAktifCalisma+0xb54>
 80048a4:	4b18      	ldr	r3, [pc, #96]	@ (8004908 <checkAktifCalisma+0xbb0>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00b      	beq.n	80048c4 <checkAktifCalisma+0xb6c>
 80048ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80048b0:	4811      	ldr	r0, [pc, #68]	@ (80048f8 <checkAktifCalisma+0xba0>)
 80048b2:	f006 fbc5 	bl	800b040 <HAL_GPIO_ReadPin>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d133      	bne.n	8004924 <checkAktifCalisma+0xbcc>
 80048bc:	4b12      	ldr	r3, [pc, #72]	@ (8004908 <checkAktifCalisma+0xbb0>)
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d12f      	bne.n	8004924 <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 80048c4:	4b0d      	ldr	r3, [pc, #52]	@ (80048fc <checkAktifCalisma+0xba4>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d02b      	beq.n	8004924 <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 80048cc:	4b14      	ldr	r3, [pc, #80]	@ (8004920 <checkAktifCalisma+0xbc8>)
 80048ce:	2201      	movs	r2, #1
 80048d0:	701a      	strb	r2, [r3, #0]
 80048d2:	e02a      	b.n	800492a <checkAktifCalisma+0xbd2>
 80048d4:	200010a3 	.word	0x200010a3
 80048d8:	40011000 	.word	0x40011000
 80048dc:	200010a7 	.word	0x200010a7
 80048e0:	200010bd 	.word	0x200010bd
 80048e4:	200010be 	.word	0x200010be
 80048e8:	2000109f 	.word	0x2000109f
 80048ec:	20001044 	.word	0x20001044
 80048f0:	20001050 	.word	0x20001050
 80048f4:	20001082 	.word	0x20001082
 80048f8:	40010c00 	.word	0x40010c00
 80048fc:	200010ad 	.word	0x200010ad
 8004900:	20001075 	.word	0x20001075
 8004904:	20001074 	.word	0x20001074
 8004908:	20001078 	.word	0x20001078
 800490c:	20001072 	.word	0x20001072
 8004910:	2000109b 	.word	0x2000109b
 8004914:	200010ae 	.word	0x200010ae
 8004918:	20001048 	.word	0x20001048
 800491c:	20001085 	.word	0x20001085
 8004920:	200010af 	.word	0x200010af
				} else {
					kapi1butonkontrol=0;
 8004924:	4b8b      	ldr	r3, [pc, #556]	@ (8004b54 <checkAktifCalisma+0xdfc>)
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800492a:	4b8b      	ldr	r3, [pc, #556]	@ (8004b58 <checkAktifCalisma+0xe00>)
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b02      	cmp	r3, #2
 8004930:	d121      	bne.n	8004976 <checkAktifCalisma+0xc1e>
 8004932:	4b8a      	ldr	r3, [pc, #552]	@ (8004b5c <checkAktifCalisma+0xe04>)
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d003      	beq.n	8004942 <checkAktifCalisma+0xbea>
 800493a:	4b88      	ldr	r3, [pc, #544]	@ (8004b5c <checkAktifCalisma+0xe04>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b03      	cmp	r3, #3
 8004940:	d119      	bne.n	8004976 <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004942:	2104      	movs	r1, #4
 8004944:	4886      	ldr	r0, [pc, #536]	@ (8004b60 <checkAktifCalisma+0xe08>)
 8004946:	f006 fb7b 	bl	800b040 <HAL_GPIO_ReadPin>
 800494a:	4603      	mov	r3, r0
 800494c:	2b01      	cmp	r3, #1
 800494e:	d003      	beq.n	8004958 <checkAktifCalisma+0xc00>
 8004950:	4b84      	ldr	r3, [pc, #528]	@ (8004b64 <checkAktifCalisma+0xe0c>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10e      	bne.n	8004976 <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004958:	2102      	movs	r1, #2
 800495a:	4881      	ldr	r0, [pc, #516]	@ (8004b60 <checkAktifCalisma+0xe08>)
 800495c:	f006 fb70 	bl	800b040 <HAL_GPIO_ReadPin>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d107      	bne.n	8004976 <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 8004966:	4b80      	ldr	r3, [pc, #512]	@ (8004b68 <checkAktifCalisma+0xe10>)
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d003      	beq.n	8004976 <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 800496e:	4b7f      	ldr	r3, [pc, #508]	@ (8004b6c <checkAktifCalisma+0xe14>)
 8004970:	2201      	movs	r2, #1
 8004972:	701a      	strb	r2, [r3, #0]
 8004974:	e002      	b.n	800497c <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 8004976:	4b7d      	ldr	r3, [pc, #500]	@ (8004b6c <checkAktifCalisma+0xe14>)
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 800497c:	4b75      	ldr	r3, [pc, #468]	@ (8004b54 <checkAktifCalisma+0xdfc>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d107      	bne.n	8004994 <checkAktifCalisma+0xc3c>
 8004984:	4b79      	ldr	r3, [pc, #484]	@ (8004b6c <checkAktifCalisma+0xe14>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d103      	bne.n	8004994 <checkAktifCalisma+0xc3c>
 800498c:	4b78      	ldr	r3, [pc, #480]	@ (8004b70 <checkAktifCalisma+0xe18>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d005      	beq.n	80049a0 <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004994:	2201      	movs	r2, #1
 8004996:	2180      	movs	r1, #128	@ 0x80
 8004998:	4876      	ldr	r0, [pc, #472]	@ (8004b74 <checkAktifCalisma+0xe1c>)
 800499a:	f006 fb68 	bl	800b06e <HAL_GPIO_WritePin>
 800499e:	e004      	b.n	80049aa <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80049a0:	2200      	movs	r2, #0
 80049a2:	2180      	movs	r1, #128	@ 0x80
 80049a4:	4873      	ldr	r0, [pc, #460]	@ (8004b74 <checkAktifCalisma+0xe1c>)
 80049a6:	f006 fb62 	bl	800b06e <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80049aa:	4b73      	ldr	r3, [pc, #460]	@ (8004b78 <checkAktifCalisma+0xe20>)
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d141      	bne.n	8004a36 <checkAktifCalisma+0xcde>
 80049b2:	4b6a      	ldr	r3, [pc, #424]	@ (8004b5c <checkAktifCalisma+0xe04>)
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d003      	beq.n	80049c2 <checkAktifCalisma+0xc6a>
 80049ba:	4b68      	ldr	r3, [pc, #416]	@ (8004b5c <checkAktifCalisma+0xe04>)
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d139      	bne.n	8004a36 <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80049c2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80049c6:	4866      	ldr	r0, [pc, #408]	@ (8004b60 <checkAktifCalisma+0xe08>)
 80049c8:	f006 fb3a 	bl	800b040 <HAL_GPIO_ReadPin>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d103      	bne.n	80049da <checkAktifCalisma+0xc82>
 80049d2:	4b6a      	ldr	r3, [pc, #424]	@ (8004b7c <checkAktifCalisma+0xe24>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00b      	beq.n	80049f2 <checkAktifCalisma+0xc9a>
 80049da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80049de:	4868      	ldr	r0, [pc, #416]	@ (8004b80 <checkAktifCalisma+0xe28>)
 80049e0:	f006 fb2e 	bl	800b040 <HAL_GPIO_ReadPin>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d125      	bne.n	8004a36 <checkAktifCalisma+0xcde>
 80049ea:	4b64      	ldr	r3, [pc, #400]	@ (8004b7c <checkAktifCalisma+0xe24>)
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d121      	bne.n	8004a36 <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80049f2:	2102      	movs	r1, #2
 80049f4:	485a      	ldr	r0, [pc, #360]	@ (8004b60 <checkAktifCalisma+0xe08>)
 80049f6:	f006 fb23 	bl	800b040 <HAL_GPIO_ReadPin>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d11a      	bne.n	8004a36 <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004a00:	2104      	movs	r1, #4
 8004a02:	4857      	ldr	r0, [pc, #348]	@ (8004b60 <checkAktifCalisma+0xe08>)
 8004a04:	f006 fb1c 	bl	800b040 <HAL_GPIO_ReadPin>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d113      	bne.n	8004a36 <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 8004a0e:	4b56      	ldr	r3, [pc, #344]	@ (8004b68 <checkAktifCalisma+0xe10>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00f      	beq.n	8004a36 <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 8004a16:	4b5b      	ldr	r3, [pc, #364]	@ (8004b84 <checkAktifCalisma+0xe2c>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	f083 0301 	eor.w	r3, r3, #1
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d008      	beq.n	8004a36 <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 8004a24:	4b58      	ldr	r3, [pc, #352]	@ (8004b88 <checkAktifCalisma+0xe30>)
 8004a26:	2201      	movs	r2, #1
 8004a28:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004a2a:	4b58      	ldr	r3, [pc, #352]	@ (8004b8c <checkAktifCalisma+0xe34>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a58      	ldr	r2, [pc, #352]	@ (8004b90 <checkAktifCalisma+0xe38>)
 8004a30:	6013      	str	r3, [r2, #0]
					bekle();
 8004a32:	f7fe fff5 	bl	8003a20 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8004a36:	4b55      	ldr	r3, [pc, #340]	@ (8004b8c <checkAktifCalisma+0xe34>)
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	4b55      	ldr	r3, [pc, #340]	@ (8004b90 <checkAktifCalisma+0xe38>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	4a54      	ldr	r2, [pc, #336]	@ (8004b94 <checkAktifCalisma+0xe3c>)
 8004a42:	7812      	ldrb	r2, [r2, #0]
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d20d      	bcs.n	8004a64 <checkAktifCalisma+0xd0c>
 8004a48:	2102      	movs	r1, #2
 8004a4a:	4845      	ldr	r0, [pc, #276]	@ (8004b60 <checkAktifCalisma+0xe08>)
 8004a4c:	f006 faf8 	bl	800b040 <HAL_GPIO_ReadPin>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d006      	beq.n	8004a64 <checkAktifCalisma+0xd0c>
 8004a56:	4b44      	ldr	r3, [pc, #272]	@ (8004b68 <checkAktifCalisma+0xe10>)
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	f083 0301 	eor.w	r3, r3, #1
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d002      	beq.n	8004a6a <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 8004a64:	4b48      	ldr	r3, [pc, #288]	@ (8004b88 <checkAktifCalisma+0xe30>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004a6a:	4b43      	ldr	r3, [pc, #268]	@ (8004b78 <checkAktifCalisma+0xe20>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d135      	bne.n	8004ade <checkAktifCalisma+0xd86>
 8004a72:	4b3a      	ldr	r3, [pc, #232]	@ (8004b5c <checkAktifCalisma+0xe04>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d003      	beq.n	8004a82 <checkAktifCalisma+0xd2a>
 8004a7a:	4b38      	ldr	r3, [pc, #224]	@ (8004b5c <checkAktifCalisma+0xe04>)
 8004a7c:	781b      	ldrb	r3, [r3, #0]
 8004a7e:	2b03      	cmp	r3, #3
 8004a80:	d12d      	bne.n	8004ade <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004a82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004a86:	4836      	ldr	r0, [pc, #216]	@ (8004b60 <checkAktifCalisma+0xe08>)
 8004a88:	f006 fada 	bl	800b040 <HAL_GPIO_ReadPin>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d103      	bne.n	8004a9a <checkAktifCalisma+0xd42>
 8004a92:	4b3a      	ldr	r3, [pc, #232]	@ (8004b7c <checkAktifCalisma+0xe24>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00b      	beq.n	8004ab2 <checkAktifCalisma+0xd5a>
 8004a9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004a9e:	4838      	ldr	r0, [pc, #224]	@ (8004b80 <checkAktifCalisma+0xe28>)
 8004aa0:	f006 face 	bl	800b040 <HAL_GPIO_ReadPin>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d119      	bne.n	8004ade <checkAktifCalisma+0xd86>
 8004aaa:	4b34      	ldr	r3, [pc, #208]	@ (8004b7c <checkAktifCalisma+0xe24>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d115      	bne.n	8004ade <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004ab2:	2102      	movs	r1, #2
 8004ab4:	482a      	ldr	r0, [pc, #168]	@ (8004b60 <checkAktifCalisma+0xe08>)
 8004ab6:	f006 fac3 	bl	800b040 <HAL_GPIO_ReadPin>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d10e      	bne.n	8004ade <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004ac0:	2104      	movs	r1, #4
 8004ac2:	4827      	ldr	r0, [pc, #156]	@ (8004b60 <checkAktifCalisma+0xe08>)
 8004ac4:	f006 fabc 	bl	800b040 <HAL_GPIO_ReadPin>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d107      	bne.n	8004ade <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 8004ace:	4b26      	ldr	r3, [pc, #152]	@ (8004b68 <checkAktifCalisma+0xe10>)
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 8004ad6:	4b30      	ldr	r3, [pc, #192]	@ (8004b98 <checkAktifCalisma+0xe40>)
 8004ad8:	2201      	movs	r2, #1
 8004ada:	701a      	strb	r2, [r3, #0]
 8004adc:	e002      	b.n	8004ae4 <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 8004ade:	4b2e      	ldr	r3, [pc, #184]	@ (8004b98 <checkAktifCalisma+0xe40>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004ae4:	4b24      	ldr	r3, [pc, #144]	@ (8004b78 <checkAktifCalisma+0xe20>)
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d11d      	bne.n	8004b28 <checkAktifCalisma+0xdd0>
 8004aec:	4b1b      	ldr	r3, [pc, #108]	@ (8004b5c <checkAktifCalisma+0xe04>)
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d003      	beq.n	8004afc <checkAktifCalisma+0xda4>
 8004af4:	4b19      	ldr	r3, [pc, #100]	@ (8004b5c <checkAktifCalisma+0xe04>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d115      	bne.n	8004b28 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004afc:	2102      	movs	r1, #2
 8004afe:	4818      	ldr	r0, [pc, #96]	@ (8004b60 <checkAktifCalisma+0xe08>)
 8004b00:	f006 fa9e 	bl	800b040 <HAL_GPIO_ReadPin>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b01      	cmp	r3, #1
 8004b08:	d10e      	bne.n	8004b28 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004b0a:	2104      	movs	r1, #4
 8004b0c:	4814      	ldr	r0, [pc, #80]	@ (8004b60 <checkAktifCalisma+0xe08>)
 8004b0e:	f006 fa97 	bl	800b040 <HAL_GPIO_ReadPin>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d107      	bne.n	8004b28 <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 8004b18:	4b13      	ldr	r3, [pc, #76]	@ (8004b68 <checkAktifCalisma+0xe10>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d003      	beq.n	8004b28 <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 8004b20:	4b1e      	ldr	r3, [pc, #120]	@ (8004b9c <checkAktifCalisma+0xe44>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	701a      	strb	r2, [r3, #0]
 8004b26:	e002      	b.n	8004b2e <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8004b28:	4b1c      	ldr	r3, [pc, #112]	@ (8004b9c <checkAktifCalisma+0xe44>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8004b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8004b98 <checkAktifCalisma+0xe40>)
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d107      	bne.n	8004b46 <checkAktifCalisma+0xdee>
 8004b36:	4b19      	ldr	r3, [pc, #100]	@ (8004b9c <checkAktifCalisma+0xe44>)
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d103      	bne.n	8004b46 <checkAktifCalisma+0xdee>
 8004b3e:	4b12      	ldr	r3, [pc, #72]	@ (8004b88 <checkAktifCalisma+0xe30>)
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d02c      	beq.n	8004ba0 <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8004b46:	2201      	movs	r2, #1
 8004b48:	2140      	movs	r1, #64	@ 0x40
 8004b4a:	480a      	ldr	r0, [pc, #40]	@ (8004b74 <checkAktifCalisma+0xe1c>)
 8004b4c:	f006 fa8f 	bl	800b06e <HAL_GPIO_WritePin>
 8004b50:	e02b      	b.n	8004baa <checkAktifCalisma+0xe52>
 8004b52:	bf00      	nop
 8004b54:	200010af 	.word	0x200010af
 8004b58:	20001075 	.word	0x20001075
 8004b5c:	20001074 	.word	0x20001074
 8004b60:	40011000 	.word	0x40011000
 8004b64:	20001072 	.word	0x20001072
 8004b68:	200010ad 	.word	0x200010ad
 8004b6c:	200010b0 	.word	0x200010b0
 8004b70:	200010ae 	.word	0x200010ae
 8004b74:	40010800 	.word	0x40010800
 8004b78:	20001076 	.word	0x20001076
 8004b7c:	20001078 	.word	0x20001078
 8004b80:	40010c00 	.word	0x40010c00
 8004b84:	2000109b 	.word	0x2000109b
 8004b88:	200010b1 	.word	0x200010b1
 8004b8c:	20001044 	.word	0x20001044
 8004b90:	20001048 	.word	0x20001048
 8004b94:	20001086 	.word	0x20001086
 8004b98:	200010b2 	.word	0x200010b2
 8004b9c:	200010b3 	.word	0x200010b3
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	2140      	movs	r1, #64	@ 0x40
 8004ba4:	4835      	ldr	r0, [pc, #212]	@ (8004c7c <checkAktifCalisma+0xf24>)
 8004ba6:	f006 fa62 	bl	800b06e <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 8004baa:	4b35      	ldr	r3, [pc, #212]	@ (8004c80 <checkAktifCalisma+0xf28>)
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <checkAktifCalisma+0xe62>
 8004bb2:	4b33      	ldr	r3, [pc, #204]	@ (8004c80 <checkAktifCalisma+0xf28>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d115      	bne.n	8004be6 <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004bba:	2104      	movs	r1, #4
 8004bbc:	4831      	ldr	r0, [pc, #196]	@ (8004c84 <checkAktifCalisma+0xf2c>)
 8004bbe:	f006 fa3f 	bl	800b040 <HAL_GPIO_ReadPin>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d003      	beq.n	8004bd0 <checkAktifCalisma+0xe78>
 8004bc8:	4b2f      	ldr	r3, [pc, #188]	@ (8004c88 <checkAktifCalisma+0xf30>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10a      	bne.n	8004be6 <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8004bd0:	2102      	movs	r1, #2
 8004bd2:	482c      	ldr	r0, [pc, #176]	@ (8004c84 <checkAktifCalisma+0xf2c>)
 8004bd4:	f006 fa34 	bl	800b040 <HAL_GPIO_ReadPin>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d103      	bne.n	8004be6 <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 8004bde:	4b2b      	ldr	r3, [pc, #172]	@ (8004c8c <checkAktifCalisma+0xf34>)
 8004be0:	2201      	movs	r2, #1
 8004be2:	701a      	strb	r2, [r3, #0]
 8004be4:	e002      	b.n	8004bec <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 8004be6:	4b29      	ldr	r3, [pc, #164]	@ (8004c8c <checkAktifCalisma+0xf34>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8004bec:	4b24      	ldr	r3, [pc, #144]	@ (8004c80 <checkAktifCalisma+0xf28>)
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d003      	beq.n	8004bfc <checkAktifCalisma+0xea4>
 8004bf4:	4b22      	ldr	r3, [pc, #136]	@ (8004c80 <checkAktifCalisma+0xf28>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d111      	bne.n	8004c20 <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004bfc:	2102      	movs	r1, #2
 8004bfe:	4821      	ldr	r0, [pc, #132]	@ (8004c84 <checkAktifCalisma+0xf2c>)
 8004c00:	f006 fa1e 	bl	800b040 <HAL_GPIO_ReadPin>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d10a      	bne.n	8004c20 <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8004c0a:	2104      	movs	r1, #4
 8004c0c:	481d      	ldr	r0, [pc, #116]	@ (8004c84 <checkAktifCalisma+0xf2c>)
 8004c0e:	f006 fa17 	bl	800b040 <HAL_GPIO_ReadPin>
 8004c12:	4603      	mov	r3, r0
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d103      	bne.n	8004c20 <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 8004c18:	4b1d      	ldr	r3, [pc, #116]	@ (8004c90 <checkAktifCalisma+0xf38>)
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	701a      	strb	r2, [r3, #0]
 8004c1e:	e002      	b.n	8004c26 <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 8004c20:	4b1b      	ldr	r3, [pc, #108]	@ (8004c90 <checkAktifCalisma+0xf38>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 8004c26:	4b19      	ldr	r3, [pc, #100]	@ (8004c8c <checkAktifCalisma+0xf34>)
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00f      	beq.n	8004c4e <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 8004c2e:	4b19      	ldr	r3, [pc, #100]	@ (8004c94 <checkAktifCalisma+0xf3c>)
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d10b      	bne.n	8004c4e <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8004c36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004c3a:	4817      	ldr	r0, [pc, #92]	@ (8004c98 <checkAktifCalisma+0xf40>)
 8004c3c:	f006 fa00 	bl	800b040 <HAL_GPIO_ReadPin>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d103      	bne.n	8004c4e <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 8004c46:	4b15      	ldr	r3, [pc, #84]	@ (8004c9c <checkAktifCalisma+0xf44>)
 8004c48:	2201      	movs	r2, #1
 8004c4a:	701a      	strb	r2, [r3, #0]
 8004c4c:	e002      	b.n	8004c54 <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 8004c4e:	4b13      	ldr	r3, [pc, #76]	@ (8004c9c <checkAktifCalisma+0xf44>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8004c54:	4b0e      	ldr	r3, [pc, #56]	@ (8004c90 <checkAktifCalisma+0xf38>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d023      	beq.n	8004ca4 <checkAktifCalisma+0xf4c>
						&& kapiAcTipi==1
 8004c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8004c94 <checkAktifCalisma+0xf3c>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d11f      	bne.n	8004ca4 <checkAktifCalisma+0xf4c>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8004c64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004c68:	480b      	ldr	r0, [pc, #44]	@ (8004c98 <checkAktifCalisma+0xf40>)
 8004c6a:	f006 f9e9 	bl	800b040 <HAL_GPIO_ReadPin>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d117      	bne.n	8004ca4 <checkAktifCalisma+0xf4c>

					kapiactablaesp2=1;
 8004c74:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca0 <checkAktifCalisma+0xf48>)
 8004c76:	2201      	movs	r2, #1
 8004c78:	701a      	strb	r2, [r3, #0]
 8004c7a:	e016      	b.n	8004caa <checkAktifCalisma+0xf52>
 8004c7c:	40010800 	.word	0x40010800
 8004c80:	20001079 	.word	0x20001079
 8004c84:	40011000 	.word	0x40011000
 8004c88:	20001072 	.word	0x20001072
 8004c8c:	200010b7 	.word	0x200010b7
 8004c90:	200010b8 	.word	0x200010b8
 8004c94:	20001078 	.word	0x20001078
 8004c98:	40010c00 	.word	0x40010c00
 8004c9c:	200010c7 	.word	0x200010c7
 8004ca0:	200010c8 	.word	0x200010c8
				} else {
					kapiactablaesp2=0;
 8004ca4:	4b7e      	ldr	r3, [pc, #504]	@ (8004ea0 <checkAktifCalisma+0x1148>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004caa:	4b7e      	ldr	r3, [pc, #504]	@ (8004ea4 <checkAktifCalisma+0x114c>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d154      	bne.n	8004d5c <checkAktifCalisma+0x1004>
 8004cb2:	4b7d      	ldr	r3, [pc, #500]	@ (8004ea8 <checkAktifCalisma+0x1150>)
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d003      	beq.n	8004cc2 <checkAktifCalisma+0xf6a>
 8004cba:	4b7b      	ldr	r3, [pc, #492]	@ (8004ea8 <checkAktifCalisma+0x1150>)
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d14c      	bne.n	8004d5c <checkAktifCalisma+0x1004>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004cc2:	4b7a      	ldr	r3, [pc, #488]	@ (8004eac <checkAktifCalisma+0x1154>)
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d103      	bne.n	8004cd2 <checkAktifCalisma+0xf7a>
 8004cca:	4b79      	ldr	r3, [pc, #484]	@ (8004eb0 <checkAktifCalisma+0x1158>)
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d044      	beq.n	8004d5c <checkAktifCalisma+0x1004>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8004cd2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004cd6:	4877      	ldr	r0, [pc, #476]	@ (8004eb4 <checkAktifCalisma+0x115c>)
 8004cd8:	f006 f9b2 	bl	800b040 <HAL_GPIO_ReadPin>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d01c      	beq.n	8004d1c <checkAktifCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8004ce2:	2180      	movs	r1, #128	@ 0x80
 8004ce4:	4873      	ldr	r0, [pc, #460]	@ (8004eb4 <checkAktifCalisma+0x115c>)
 8004ce6:	f006 f9ab 	bl	800b040 <HAL_GPIO_ReadPin>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d106      	bne.n	8004cfe <checkAktifCalisma+0xfa6>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8004cf0:	2104      	movs	r1, #4
 8004cf2:	4870      	ldr	r0, [pc, #448]	@ (8004eb4 <checkAktifCalisma+0x115c>)
 8004cf4:	f006 f9a4 	bl	800b040 <HAL_GPIO_ReadPin>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d00e      	beq.n	8004d1c <checkAktifCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8004cfe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004d02:	486c      	ldr	r0, [pc, #432]	@ (8004eb4 <checkAktifCalisma+0x115c>)
 8004d04:	f006 f99c 	bl	800b040 <HAL_GPIO_ReadPin>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10a      	bne.n	8004d24 <checkAktifCalisma+0xfcc>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8004d0e:	2102      	movs	r1, #2
 8004d10:	4868      	ldr	r0, [pc, #416]	@ (8004eb4 <checkAktifCalisma+0x115c>)
 8004d12:	f006 f995 	bl	800b040 <HAL_GPIO_ReadPin>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d103      	bne.n	8004d24 <checkAktifCalisma+0xfcc>
						&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8004d1c:	4b66      	ldr	r3, [pc, #408]	@ (8004eb8 <checkAktifCalisma+0x1160>)
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d007      	beq.n	8004d34 <checkAktifCalisma+0xfdc>
 8004d24:	4b65      	ldr	r3, [pc, #404]	@ (8004ebc <checkAktifCalisma+0x1164>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d103      	bne.n	8004d34 <checkAktifCalisma+0xfdc>
 8004d2c:	4b5c      	ldr	r3, [pc, #368]	@ (8004ea0 <checkAktifCalisma+0x1148>)
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d013      	beq.n	8004d5c <checkAktifCalisma+0x1004>
						&&(makineStop==1)
 8004d34:	4b62      	ldr	r3, [pc, #392]	@ (8004ec0 <checkAktifCalisma+0x1168>)
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00f      	beq.n	8004d5c <checkAktifCalisma+0x1004>
						&&(butonKontrol==0)) {
 8004d3c:	4b61      	ldr	r3, [pc, #388]	@ (8004ec4 <checkAktifCalisma+0x116c>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	f083 0301 	eor.w	r3, r3, #1
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d008      	beq.n	8004d5c <checkAktifCalisma+0x1004>

					kapiTablaprudhome=1;
 8004d4a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ec8 <checkAktifCalisma+0x1170>)
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004d50:	4b5e      	ldr	r3, [pc, #376]	@ (8004ecc <checkAktifCalisma+0x1174>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a5e      	ldr	r2, [pc, #376]	@ (8004ed0 <checkAktifCalisma+0x1178>)
 8004d56:	6013      	str	r3, [r2, #0]
					bekle();
 8004d58:	f7fe fe62 	bl	8003a20 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8004d5c:	4b5b      	ldr	r3, [pc, #364]	@ (8004ecc <checkAktifCalisma+0x1174>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	4b5b      	ldr	r3, [pc, #364]	@ (8004ed0 <checkAktifCalisma+0x1178>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	4a5b      	ldr	r2, [pc, #364]	@ (8004ed4 <checkAktifCalisma+0x117c>)
 8004d68:	7812      	ldrb	r2, [r2, #0]
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d214      	bcs.n	8004d98 <checkAktifCalisma+0x1040>
 8004d6e:	4b4f      	ldr	r3, [pc, #316]	@ (8004eac <checkAktifCalisma+0x1154>)
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	f083 0301 	eor.w	r3, r3, #1
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d006      	beq.n	8004d8a <checkAktifCalisma+0x1032>
 8004d7c:	4b4c      	ldr	r3, [pc, #304]	@ (8004eb0 <checkAktifCalisma+0x1158>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	f083 0301 	eor.w	r3, r3, #1
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d106      	bne.n	8004d98 <checkAktifCalisma+0x1040>
 8004d8a:	4b4d      	ldr	r3, [pc, #308]	@ (8004ec0 <checkAktifCalisma+0x1168>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	f083 0301 	eor.w	r3, r3, #1
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <checkAktifCalisma+0x1046>
					kapiTablaprudhome=0;
 8004d98:	4b4b      	ldr	r3, [pc, #300]	@ (8004ec8 <checkAktifCalisma+0x1170>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004d9e:	4b41      	ldr	r3, [pc, #260]	@ (8004ea4 <checkAktifCalisma+0x114c>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d148      	bne.n	8004e38 <checkAktifCalisma+0x10e0>
 8004da6:	4b40      	ldr	r3, [pc, #256]	@ (8004ea8 <checkAktifCalisma+0x1150>)
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d003      	beq.n	8004db6 <checkAktifCalisma+0x105e>
 8004dae:	4b3e      	ldr	r3, [pc, #248]	@ (8004ea8 <checkAktifCalisma+0x1150>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d140      	bne.n	8004e38 <checkAktifCalisma+0x10e0>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004db6:	4b3d      	ldr	r3, [pc, #244]	@ (8004eac <checkAktifCalisma+0x1154>)
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d103      	bne.n	8004dc6 <checkAktifCalisma+0x106e>
 8004dbe:	4b3c      	ldr	r3, [pc, #240]	@ (8004eb0 <checkAktifCalisma+0x1158>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d038      	beq.n	8004e38 <checkAktifCalisma+0x10e0>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8004dc6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004dca:	483a      	ldr	r0, [pc, #232]	@ (8004eb4 <checkAktifCalisma+0x115c>)
 8004dcc:	f006 f938 	bl	800b040 <HAL_GPIO_ReadPin>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d01c      	beq.n	8004e10 <checkAktifCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8004dd6:	2180      	movs	r1, #128	@ 0x80
 8004dd8:	4836      	ldr	r0, [pc, #216]	@ (8004eb4 <checkAktifCalisma+0x115c>)
 8004dda:	f006 f931 	bl	800b040 <HAL_GPIO_ReadPin>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d106      	bne.n	8004df2 <checkAktifCalisma+0x109a>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8004de4:	2104      	movs	r1, #4
 8004de6:	4833      	ldr	r0, [pc, #204]	@ (8004eb4 <checkAktifCalisma+0x115c>)
 8004de8:	f006 f92a 	bl	800b040 <HAL_GPIO_ReadPin>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d00e      	beq.n	8004e10 <checkAktifCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8004df2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004df6:	482f      	ldr	r0, [pc, #188]	@ (8004eb4 <checkAktifCalisma+0x115c>)
 8004df8:	f006 f922 	bl	800b040 <HAL_GPIO_ReadPin>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d10a      	bne.n	8004e18 <checkAktifCalisma+0x10c0>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8004e02:	2102      	movs	r1, #2
 8004e04:	482b      	ldr	r0, [pc, #172]	@ (8004eb4 <checkAktifCalisma+0x115c>)
 8004e06:	f006 f91b 	bl	800b040 <HAL_GPIO_ReadPin>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d103      	bne.n	8004e18 <checkAktifCalisma+0x10c0>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8004e10:	4b29      	ldr	r3, [pc, #164]	@ (8004eb8 <checkAktifCalisma+0x1160>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d007      	beq.n	8004e28 <checkAktifCalisma+0x10d0>
 8004e18:	4b28      	ldr	r3, [pc, #160]	@ (8004ebc <checkAktifCalisma+0x1164>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d103      	bne.n	8004e28 <checkAktifCalisma+0x10d0>
 8004e20:	4b1f      	ldr	r3, [pc, #124]	@ (8004ea0 <checkAktifCalisma+0x1148>)
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d007      	beq.n	8004e38 <checkAktifCalisma+0x10e0>
						&&(makineStop==1)) {
 8004e28:	4b25      	ldr	r3, [pc, #148]	@ (8004ec0 <checkAktifCalisma+0x1168>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <checkAktifCalisma+0x10e0>

					kapiTablabutonkontrol=1;
 8004e30:	4b29      	ldr	r3, [pc, #164]	@ (8004ed8 <checkAktifCalisma+0x1180>)
 8004e32:	2201      	movs	r2, #1
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	e002      	b.n	8004e3e <checkAktifCalisma+0x10e6>
				} else {
					kapiTablabutonkontrol=0;
 8004e38:	4b27      	ldr	r3, [pc, #156]	@ (8004ed8 <checkAktifCalisma+0x1180>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004e3e:	4b19      	ldr	r3, [pc, #100]	@ (8004ea4 <checkAktifCalisma+0x114c>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d117      	bne.n	8004e76 <checkAktifCalisma+0x111e>
 8004e46:	4b18      	ldr	r3, [pc, #96]	@ (8004ea8 <checkAktifCalisma+0x1150>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d003      	beq.n	8004e56 <checkAktifCalisma+0x10fe>
 8004e4e:	4b16      	ldr	r3, [pc, #88]	@ (8004ea8 <checkAktifCalisma+0x1150>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b03      	cmp	r3, #3
 8004e54:	d10f      	bne.n	8004e76 <checkAktifCalisma+0x111e>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004e56:	4b15      	ldr	r3, [pc, #84]	@ (8004eac <checkAktifCalisma+0x1154>)
 8004e58:	781b      	ldrb	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d103      	bne.n	8004e66 <checkAktifCalisma+0x110e>
 8004e5e:	4b14      	ldr	r3, [pc, #80]	@ (8004eb0 <checkAktifCalisma+0x1158>)
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d007      	beq.n	8004e76 <checkAktifCalisma+0x111e>
						&&(makineStop==1)) {
 8004e66:	4b16      	ldr	r3, [pc, #88]	@ (8004ec0 <checkAktifCalisma+0x1168>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <checkAktifCalisma+0x111e>

					kapiTablapizzato=1;
 8004e6e:	4b1b      	ldr	r3, [pc, #108]	@ (8004edc <checkAktifCalisma+0x1184>)
 8004e70:	2201      	movs	r2, #1
 8004e72:	701a      	strb	r2, [r3, #0]
 8004e74:	e002      	b.n	8004e7c <checkAktifCalisma+0x1124>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8004e76:	4b19      	ldr	r3, [pc, #100]	@ (8004edc <checkAktifCalisma+0x1184>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8004e7c:	4b16      	ldr	r3, [pc, #88]	@ (8004ed8 <checkAktifCalisma+0x1180>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d107      	bne.n	8004e94 <checkAktifCalisma+0x113c>
 8004e84:	4b10      	ldr	r3, [pc, #64]	@ (8004ec8 <checkAktifCalisma+0x1170>)
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d103      	bne.n	8004e94 <checkAktifCalisma+0x113c>
 8004e8c:	4b13      	ldr	r3, [pc, #76]	@ (8004edc <checkAktifCalisma+0x1184>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d027      	beq.n	8004ee4 <checkAktifCalisma+0x118c>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8004e94:	2201      	movs	r2, #1
 8004e96:	2120      	movs	r1, #32
 8004e98:	4811      	ldr	r0, [pc, #68]	@ (8004ee0 <checkAktifCalisma+0x1188>)
 8004e9a:	f006 f8e8 	bl	800b06e <HAL_GPIO_WritePin>
 8004e9e:	e026      	b.n	8004eee <checkAktifCalisma+0x1196>
 8004ea0:	200010c8 	.word	0x200010c8
 8004ea4:	20001077 	.word	0x20001077
 8004ea8:	20001074 	.word	0x20001074
 8004eac:	200010b7 	.word	0x200010b7
 8004eb0:	200010b8 	.word	0x200010b8
 8004eb4:	40011000 	.word	0x40011000
 8004eb8:	20001078 	.word	0x20001078
 8004ebc:	200010c7 	.word	0x200010c7
 8004ec0:	200010ad 	.word	0x200010ad
 8004ec4:	2000109b 	.word	0x2000109b
 8004ec8:	200010b4 	.word	0x200010b4
 8004ecc:	20001044 	.word	0x20001044
 8004ed0:	20001048 	.word	0x20001048
 8004ed4:	20001087 	.word	0x20001087
 8004ed8:	200010b5 	.word	0x200010b5
 8004edc:	200010b6 	.word	0x200010b6
 8004ee0:	40010800 	.word	0x40010800
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	2120      	movs	r1, #32
 8004ee8:	4887      	ldr	r0, [pc, #540]	@ (8005108 <checkAktifCalisma+0x13b0>)
 8004eea:	f006 f8c0 	bl	800b06e <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8004eee:	4b87      	ldr	r3, [pc, #540]	@ (800510c <checkAktifCalisma+0x13b4>)
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00e      	beq.n	8004f14 <checkAktifCalisma+0x11bc>
 8004ef6:	2102      	movs	r1, #2
 8004ef8:	4885      	ldr	r0, [pc, #532]	@ (8005110 <checkAktifCalisma+0x13b8>)
 8004efa:	f006 f8a1 	bl	800b040 <HAL_GPIO_ReadPin>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d107      	bne.n	8004f14 <checkAktifCalisma+0x11bc>
 8004f04:	4b83      	ldr	r3, [pc, #524]	@ (8005114 <checkAktifCalisma+0x13bc>)
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d103      	bne.n	8004f14 <checkAktifCalisma+0x11bc>
 8004f0c:	4b82      	ldr	r3, [pc, #520]	@ (8005118 <checkAktifCalisma+0x13c0>)
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d112      	bne.n	8004f3a <checkAktifCalisma+0x11e2>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8004f14:	4b81      	ldr	r3, [pc, #516]	@ (800511c <checkAktifCalisma+0x13c4>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d032      	beq.n	8004f82 <checkAktifCalisma+0x122a>
 8004f1c:	2104      	movs	r1, #4
 8004f1e:	487c      	ldr	r0, [pc, #496]	@ (8005110 <checkAktifCalisma+0x13b8>)
 8004f20:	f006 f88e 	bl	800b040 <HAL_GPIO_ReadPin>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d12b      	bne.n	8004f82 <checkAktifCalisma+0x122a>
 8004f2a:	4b7a      	ldr	r3, [pc, #488]	@ (8005114 <checkAktifCalisma+0x13bc>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d027      	beq.n	8004f82 <checkAktifCalisma+0x122a>
 8004f32:	4b79      	ldr	r3, [pc, #484]	@ (8005118 <checkAktifCalisma+0x13c0>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d023      	beq.n	8004f82 <checkAktifCalisma+0x122a>



					calismaSayisi=calismaSayisi+254;
 8004f3a:	4b79      	ldr	r3, [pc, #484]	@ (8005120 <checkAktifCalisma+0x13c8>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	3b02      	subs	r3, #2
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	4b77      	ldr	r3, [pc, #476]	@ (8005120 <checkAktifCalisma+0x13c8>)
 8004f44:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8004f46:	4b76      	ldr	r3, [pc, #472]	@ (8005120 <checkAktifCalisma+0x13c8>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2bff      	cmp	r3, #255	@ 0xff
 8004f4c:	d108      	bne.n	8004f60 <checkAktifCalisma+0x1208>
						calismaSayisi = 0;
 8004f4e:	4b74      	ldr	r3, [pc, #464]	@ (8005120 <checkAktifCalisma+0x13c8>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 8004f54:	4b73      	ldr	r3, [pc, #460]	@ (8005124 <checkAktifCalisma+0x13cc>)
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	4b71      	ldr	r3, [pc, #452]	@ (8005124 <checkAktifCalisma+0x13cc>)
 8004f5e:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 8004f60:	4b6f      	ldr	r3, [pc, #444]	@ (8005120 <checkAktifCalisma+0x13c8>)
 8004f62:	781a      	ldrb	r2, [r3, #0]
 8004f64:	4b70      	ldr	r3, [pc, #448]	@ (8005128 <checkAktifCalisma+0x13d0>)
 8004f66:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 8004f68:	4b6e      	ldr	r3, [pc, #440]	@ (8005124 <checkAktifCalisma+0x13cc>)
 8004f6a:	781a      	ldrb	r2, [r3, #0]
 8004f6c:	4b6e      	ldr	r3, [pc, #440]	@ (8005128 <checkAktifCalisma+0x13d0>)
 8004f6e:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 8004f70:	4b6e      	ldr	r3, [pc, #440]	@ (800512c <checkAktifCalisma+0x13d4>)
 8004f72:	2201      	movs	r2, #1
 8004f74:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 8004f76:	4b65      	ldr	r3, [pc, #404]	@ (800510c <checkAktifCalisma+0x13b4>)
 8004f78:	2200      	movs	r2, #0
 8004f7a:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 8004f7c:	4b67      	ldr	r3, [pc, #412]	@ (800511c <checkAktifCalisma+0x13c4>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8004f82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004f86:	486a      	ldr	r0, [pc, #424]	@ (8005130 <checkAktifCalisma+0x13d8>)
 8004f88:	f006 f85a 	bl	800b040 <HAL_GPIO_ReadPin>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d016      	beq.n	8004fc0 <checkAktifCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8004f92:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004f96:	4866      	ldr	r0, [pc, #408]	@ (8005130 <checkAktifCalisma+0x13d8>)
 8004f98:	f006 f852 	bl	800b040 <HAL_GPIO_ReadPin>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00e      	beq.n	8004fc0 <checkAktifCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8004fa2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004fa6:	4862      	ldr	r0, [pc, #392]	@ (8005130 <checkAktifCalisma+0x13d8>)
 8004fa8:	f006 f84a 	bl	800b040 <HAL_GPIO_ReadPin>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d006      	beq.n	8004fc0 <checkAktifCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8004fb2:	2140      	movs	r1, #64	@ 0x40
 8004fb4:	4856      	ldr	r0, [pc, #344]	@ (8005110 <checkAktifCalisma+0x13b8>)
 8004fb6:	f006 f843 	bl	800b040 <HAL_GPIO_ReadPin>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d103      	bne.n	8004fc8 <checkAktifCalisma+0x1270>

					startBasili=1;
 8004fc0:	4b5c      	ldr	r3, [pc, #368]	@ (8005134 <checkAktifCalisma+0x13dc>)
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	701a      	strb	r2, [r3, #0]
 8004fc6:	e002      	b.n	8004fce <checkAktifCalisma+0x1276>
				} else {
					startBasili=0;
 8004fc8:	4b5a      	ldr	r3, [pc, #360]	@ (8005134 <checkAktifCalisma+0x13dc>)
 8004fca:	2200      	movs	r2, #0
 8004fcc:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8004fce:	4b59      	ldr	r3, [pc, #356]	@ (8005134 <checkAktifCalisma+0x13dc>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d014      	beq.n	8005000 <checkAktifCalisma+0x12a8>
 8004fd6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004fda:	4855      	ldr	r0, [pc, #340]	@ (8005130 <checkAktifCalisma+0x13d8>)
 8004fdc:	f006 f830 	bl	800b040 <HAL_GPIO_ReadPin>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d10c      	bne.n	8005000 <checkAktifCalisma+0x12a8>

					hataVar=1;
 8004fe6:	4b54      	ldr	r3, [pc, #336]	@ (8005138 <checkAktifCalisma+0x13e0>)
 8004fe8:	2201      	movs	r2, #1
 8004fea:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 8004fec:	2001      	movs	r0, #1
 8004fee:	f7fb fca5 	bl	800093c <hataKoduLcdGoster>
					hata2EEPROM(1);
 8004ff2:	2001      	movs	r0, #1
 8004ff4:	f7fb fc4a 	bl	800088c <hata2EEPROM>
					acilstophatasi=1;
 8004ff8:	4b50      	ldr	r3, [pc, #320]	@ (800513c <checkAktifCalisma+0x13e4>)
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	701a      	strb	r2, [r3, #0]
 8004ffe:	e018      	b.n	8005032 <checkAktifCalisma+0x12da>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005000:	4b4e      	ldr	r3, [pc, #312]	@ (800513c <checkAktifCalisma+0x13e4>)
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d014      	beq.n	8005032 <checkAktifCalisma+0x12da>
 8005008:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800500c:	4848      	ldr	r0, [pc, #288]	@ (8005130 <checkAktifCalisma+0x13d8>)
 800500e:	f006 f817 	bl	800b040 <HAL_GPIO_ReadPin>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10c      	bne.n	8005032 <checkAktifCalisma+0x12da>
 8005018:	4b46      	ldr	r3, [pc, #280]	@ (8005134 <checkAktifCalisma+0x13dc>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	f083 0301 	eor.w	r3, r3, #1
 8005020:	b2db      	uxtb	r3, r3
 8005022:	2b00      	cmp	r3, #0
 8005024:	d005      	beq.n	8005032 <checkAktifCalisma+0x12da>
					acilstophatasi=0;
 8005026:	4b45      	ldr	r3, [pc, #276]	@ (800513c <checkAktifCalisma+0x13e4>)
 8005028:	2200      	movs	r2, #0
 800502a:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 800502c:	2001      	movs	r0, #1
 800502e:	f7fe fc8d 	bl	800394c <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 8005032:	4b43      	ldr	r3, [pc, #268]	@ (8005140 <checkAktifCalisma+0x13e8>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	f083 0301 	eor.w	r3, r3, #1
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b00      	cmp	r3, #0
 800503e:	d023      	beq.n	8005088 <checkAktifCalisma+0x1330>
 8005040:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005044:	483a      	ldr	r0, [pc, #232]	@ (8005130 <checkAktifCalisma+0x13d8>)
 8005046:	f005 fffb 	bl	800b040 <HAL_GPIO_ReadPin>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d003      	beq.n	8005058 <checkAktifCalisma+0x1300>
 8005050:	4b3c      	ldr	r3, [pc, #240]	@ (8005144 <checkAktifCalisma+0x13ec>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d017      	beq.n	8005088 <checkAktifCalisma+0x1330>
 8005058:	4b3b      	ldr	r3, [pc, #236]	@ (8005148 <checkAktifCalisma+0x13f0>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b01      	cmp	r3, #1
 800505e:	d113      	bne.n	8005088 <checkAktifCalisma+0x1330>
 8005060:	4b3a      	ldr	r3, [pc, #232]	@ (800514c <checkAktifCalisma+0x13f4>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	f083 0301 	eor.w	r3, r3, #1
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d00c      	beq.n	8005088 <checkAktifCalisma+0x1330>
					hataVar=1;
 800506e:	4b32      	ldr	r3, [pc, #200]	@ (8005138 <checkAktifCalisma+0x13e0>)
 8005070:	2201      	movs	r2, #1
 8005072:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 8005074:	2002      	movs	r0, #2
 8005076:	f7fb fc61 	bl	800093c <hataKoduLcdGoster>
					hata2EEPROM(2);
 800507a:	2002      	movs	r0, #2
 800507c:	f7fb fc06 	bl	800088c <hata2EEPROM>
					emniyetCercevesihatasi=1;
 8005080:	4b32      	ldr	r3, [pc, #200]	@ (800514c <checkAktifCalisma+0x13f4>)
 8005082:	2201      	movs	r2, #1
 8005084:	701a      	strb	r2, [r3, #0]
 8005086:	e017      	b.n	80050b8 <checkAktifCalisma+0x1360>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005088:	4b30      	ldr	r3, [pc, #192]	@ (800514c <checkAktifCalisma+0x13f4>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d013      	beq.n	80050b8 <checkAktifCalisma+0x1360>
 8005090:	4b2b      	ldr	r3, [pc, #172]	@ (8005140 <checkAktifCalisma+0x13e8>)
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00f      	beq.n	80050b8 <checkAktifCalisma+0x1360>
 8005098:	4b2d      	ldr	r3, [pc, #180]	@ (8005150 <checkAktifCalisma+0x13f8>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	f083 0301 	eor.w	r3, r3, #1
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d008      	beq.n	80050b8 <checkAktifCalisma+0x1360>
					emniyetCercevesihatasi=0;
 80050a6:	4b29      	ldr	r3, [pc, #164]	@ (800514c <checkAktifCalisma+0x13f4>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 80050ac:	4b25      	ldr	r3, [pc, #148]	@ (8005144 <checkAktifCalisma+0x13ec>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 80050b2:	2002      	movs	r0, #2
 80050b4:	f7fe fc4a 	bl	800394c <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 80050b8:	4b26      	ldr	r3, [pc, #152]	@ (8005154 <checkAktifCalisma+0x13fc>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d151      	bne.n	8005164 <checkAktifCalisma+0x140c>
 80050c0:	4b25      	ldr	r3, [pc, #148]	@ (8005158 <checkAktifCalisma+0x1400>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d14d      	bne.n	8005164 <checkAktifCalisma+0x140c>
 80050c8:	4b24      	ldr	r3, [pc, #144]	@ (800515c <checkAktifCalisma+0x1404>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d049      	beq.n	8005164 <checkAktifCalisma+0x140c>
 80050d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80050d4:	480e      	ldr	r0, [pc, #56]	@ (8005110 <checkAktifCalisma+0x13b8>)
 80050d6:	f005 ffb3 	bl	800b040 <HAL_GPIO_ReadPin>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d141      	bne.n	8005164 <checkAktifCalisma+0x140c>
 80050e0:	4b1f      	ldr	r3, [pc, #124]	@ (8005160 <checkAktifCalisma+0x1408>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	f083 0301 	eor.w	r3, r3, #1
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d03a      	beq.n	8005164 <checkAktifCalisma+0x140c>
					hataVar=1;
 80050ee:	4b12      	ldr	r3, [pc, #72]	@ (8005138 <checkAktifCalisma+0x13e0>)
 80050f0:	2201      	movs	r2, #1
 80050f2:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 80050f4:	2003      	movs	r0, #3
 80050f6:	f7fb fc21 	bl	800093c <hataKoduLcdGoster>
					hata2EEPROM(3);
 80050fa:	2003      	movs	r0, #3
 80050fc:	f7fb fbc6 	bl	800088c <hata2EEPROM>
					basinchatasi=1;
 8005100:	4b17      	ldr	r3, [pc, #92]	@ (8005160 <checkAktifCalisma+0x1408>)
 8005102:	2201      	movs	r2, #1
 8005104:	701a      	strb	r2, [r3, #0]
 8005106:	e043      	b.n	8005190 <checkAktifCalisma+0x1438>
 8005108:	40010800 	.word	0x40010800
 800510c:	200010ab 	.word	0x200010ab
 8005110:	40011000 	.word	0x40011000
 8005114:	20001072 	.word	0x20001072
 8005118:	200010ad 	.word	0x200010ad
 800511c:	200010ac 	.word	0x200010ac
 8005120:	20001064 	.word	0x20001064
 8005124:	20001066 	.word	0x20001066
 8005128:	20000f9c 	.word	0x20000f9c
 800512c:	20001098 	.word	0x20001098
 8005130:	40010c00 	.word	0x40010c00
 8005134:	200010b9 	.word	0x200010b9
 8005138:	200010c0 	.word	0x200010c0
 800513c:	200010bb 	.word	0x200010bb
 8005140:	200010c2 	.word	0x200010c2
 8005144:	200010cc 	.word	0x200010cc
 8005148:	20001070 	.word	0x20001070
 800514c:	200010bc 	.word	0x200010bc
 8005150:	200010a4 	.word	0x200010a4
 8005154:	2000106f 	.word	0x2000106f
 8005158:	20001073 	.word	0x20001073
 800515c:	200010bf 	.word	0x200010bf
 8005160:	200010c9 	.word	0x200010c9
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005164:	4b85      	ldr	r3, [pc, #532]	@ (800537c <checkAktifCalisma+0x1624>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d011      	beq.n	8005190 <checkAktifCalisma+0x1438>
 800516c:	4b84      	ldr	r3, [pc, #528]	@ (8005380 <checkAktifCalisma+0x1628>)
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d10d      	bne.n	8005190 <checkAktifCalisma+0x1438>
 8005174:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005178:	4882      	ldr	r0, [pc, #520]	@ (8005384 <checkAktifCalisma+0x162c>)
 800517a:	f005 ff61 	bl	800b040 <HAL_GPIO_ReadPin>
 800517e:	4603      	mov	r3, r0
 8005180:	2b01      	cmp	r3, #1
 8005182:	d105      	bne.n	8005190 <checkAktifCalisma+0x1438>
					basinchatasi=0;
 8005184:	4b7d      	ldr	r3, [pc, #500]	@ (800537c <checkAktifCalisma+0x1624>)
 8005186:	2200      	movs	r2, #0
 8005188:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 800518a:	2003      	movs	r0, #3
 800518c:	f7fe fbde 	bl	800394c <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8005190:	4b7d      	ldr	r3, [pc, #500]	@ (8005388 <checkAktifCalisma+0x1630>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d103      	bne.n	80051a0 <checkAktifCalisma+0x1448>
 8005198:	4b7c      	ldr	r3, [pc, #496]	@ (800538c <checkAktifCalisma+0x1634>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d023      	beq.n	80051e8 <checkAktifCalisma+0x1490>
 80051a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80051a4:	487a      	ldr	r0, [pc, #488]	@ (8005390 <checkAktifCalisma+0x1638>)
 80051a6:	f005 ff4b 	bl	800b040 <HAL_GPIO_ReadPin>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d11b      	bne.n	80051e8 <checkAktifCalisma+0x1490>
 80051b0:	4b78      	ldr	r3, [pc, #480]	@ (8005394 <checkAktifCalisma+0x163c>)
 80051b2:	781b      	ldrb	r3, [r3, #0]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d003      	beq.n	80051c0 <checkAktifCalisma+0x1468>
 80051b8:	4b76      	ldr	r3, [pc, #472]	@ (8005394 <checkAktifCalisma+0x163c>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b03      	cmp	r3, #3
 80051be:	d113      	bne.n	80051e8 <checkAktifCalisma+0x1490>
 80051c0:	4b75      	ldr	r3, [pc, #468]	@ (8005398 <checkAktifCalisma+0x1640>)
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	f083 0301 	eor.w	r3, r3, #1
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00c      	beq.n	80051e8 <checkAktifCalisma+0x1490>
					hataVar=1;
 80051ce:	4b73      	ldr	r3, [pc, #460]	@ (800539c <checkAktifCalisma+0x1644>)
 80051d0:	2201      	movs	r2, #1
 80051d2:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 80051d4:	2004      	movs	r0, #4
 80051d6:	f7fb fbb1 	bl	800093c <hataKoduLcdGoster>
					hata2EEPROM(4);
 80051da:	2004      	movs	r0, #4
 80051dc:	f7fb fb56 	bl	800088c <hata2EEPROM>
					katkapisivicihatasi=1;
 80051e0:	4b6d      	ldr	r3, [pc, #436]	@ (8005398 <checkAktifCalisma+0x1640>)
 80051e2:	2201      	movs	r2, #1
 80051e4:	701a      	strb	r2, [r3, #0]
 80051e6:	e01f      	b.n	8005228 <checkAktifCalisma+0x14d0>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80051e8:	4b6b      	ldr	r3, [pc, #428]	@ (8005398 <checkAktifCalisma+0x1640>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d01b      	beq.n	8005228 <checkAktifCalisma+0x14d0>
 80051f0:	4b6b      	ldr	r3, [pc, #428]	@ (80053a0 <checkAktifCalisma+0x1648>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d017      	beq.n	8005228 <checkAktifCalisma+0x14d0>
 80051f8:	4b63      	ldr	r3, [pc, #396]	@ (8005388 <checkAktifCalisma+0x1630>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	f083 0301 	eor.w	r3, r3, #1
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d010      	beq.n	8005228 <checkAktifCalisma+0x14d0>
 8005206:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800520a:	4861      	ldr	r0, [pc, #388]	@ (8005390 <checkAktifCalisma+0x1638>)
 800520c:	f005 ff18 	bl	800b040 <HAL_GPIO_ReadPin>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d108      	bne.n	8005228 <checkAktifCalisma+0x14d0>

					katkapisivicihatasi=0;
 8005216:	4b60      	ldr	r3, [pc, #384]	@ (8005398 <checkAktifCalisma+0x1640>)
 8005218:	2200      	movs	r2, #0
 800521a:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 800521c:	4b5b      	ldr	r3, [pc, #364]	@ (800538c <checkAktifCalisma+0x1634>)
 800521e:	2200      	movs	r2, #0
 8005220:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8005222:	2004      	movs	r0, #4
 8005224:	f7fe fb92 	bl	800394c <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8005228:	4b57      	ldr	r3, [pc, #348]	@ (8005388 <checkAktifCalisma+0x1630>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d103      	bne.n	8005238 <checkAktifCalisma+0x14e0>
 8005230:	4b5c      	ldr	r3, [pc, #368]	@ (80053a4 <checkAktifCalisma+0x164c>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d023      	beq.n	8005280 <checkAktifCalisma+0x1528>
 8005238:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800523c:	4854      	ldr	r0, [pc, #336]	@ (8005390 <checkAktifCalisma+0x1638>)
 800523e:	f005 feff 	bl	800b040 <HAL_GPIO_ReadPin>
 8005242:	4603      	mov	r3, r0
 8005244:	2b01      	cmp	r3, #1
 8005246:	d11b      	bne.n	8005280 <checkAktifCalisma+0x1528>
 8005248:	4b52      	ldr	r3, [pc, #328]	@ (8005394 <checkAktifCalisma+0x163c>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b01      	cmp	r3, #1
 800524e:	d003      	beq.n	8005258 <checkAktifCalisma+0x1500>
 8005250:	4b50      	ldr	r3, [pc, #320]	@ (8005394 <checkAktifCalisma+0x163c>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b03      	cmp	r3, #3
 8005256:	d113      	bne.n	8005280 <checkAktifCalisma+0x1528>
 8005258:	4b53      	ldr	r3, [pc, #332]	@ (80053a8 <checkAktifCalisma+0x1650>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	f083 0301 	eor.w	r3, r3, #1
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00c      	beq.n	8005280 <checkAktifCalisma+0x1528>

					hataVar=1;
 8005266:	4b4d      	ldr	r3, [pc, #308]	@ (800539c <checkAktifCalisma+0x1644>)
 8005268:	2201      	movs	r2, #1
 800526a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 800526c:	2005      	movs	r0, #5
 800526e:	f7fb fb65 	bl	800093c <hataKoduLcdGoster>
					hata2EEPROM(5);
 8005272:	2005      	movs	r0, #5
 8005274:	f7fb fb0a 	bl	800088c <hata2EEPROM>
					tablakapisivicihatasi=1;
 8005278:	4b4b      	ldr	r3, [pc, #300]	@ (80053a8 <checkAktifCalisma+0x1650>)
 800527a:	2201      	movs	r2, #1
 800527c:	701a      	strb	r2, [r3, #0]
 800527e:	e023      	b.n	80052c8 <checkAktifCalisma+0x1570>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8005280:	4b49      	ldr	r3, [pc, #292]	@ (80053a8 <checkAktifCalisma+0x1650>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d01f      	beq.n	80052c8 <checkAktifCalisma+0x1570>
 8005288:	4b45      	ldr	r3, [pc, #276]	@ (80053a0 <checkAktifCalisma+0x1648>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d01b      	beq.n	80052c8 <checkAktifCalisma+0x1570>
 8005290:	4b3d      	ldr	r3, [pc, #244]	@ (8005388 <checkAktifCalisma+0x1630>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	f083 0301 	eor.w	r3, r3, #1
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d014      	beq.n	80052c8 <checkAktifCalisma+0x1570>
 800529e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80052a2:	483b      	ldr	r0, [pc, #236]	@ (8005390 <checkAktifCalisma+0x1638>)
 80052a4:	f005 fecc 	bl	800b040 <HAL_GPIO_ReadPin>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10c      	bne.n	80052c8 <checkAktifCalisma+0x1570>
 80052ae:	4b3c      	ldr	r3, [pc, #240]	@ (80053a0 <checkAktifCalisma+0x1648>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d008      	beq.n	80052c8 <checkAktifCalisma+0x1570>
					tablakapisivicihatasi=0;
 80052b6:	4b3c      	ldr	r3, [pc, #240]	@ (80053a8 <checkAktifCalisma+0x1650>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 80052bc:	4b39      	ldr	r3, [pc, #228]	@ (80053a4 <checkAktifCalisma+0x164c>)
 80052be:	2200      	movs	r2, #0
 80052c0:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 80052c2:	2005      	movs	r0, #5
 80052c4:	f7fe fb42 	bl	800394c <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 80052c8:	4b38      	ldr	r3, [pc, #224]	@ (80053ac <checkAktifCalisma+0x1654>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d107      	bne.n	80052e0 <checkAktifCalisma+0x1588>
 80052d0:	4b37      	ldr	r3, [pc, #220]	@ (80053b0 <checkAktifCalisma+0x1658>)
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d103      	bne.n	80052e0 <checkAktifCalisma+0x1588>
 80052d8:	4b36      	ldr	r3, [pc, #216]	@ (80053b4 <checkAktifCalisma+0x165c>)
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01b      	beq.n	8005318 <checkAktifCalisma+0x15c0>
 80052e0:	4b35      	ldr	r3, [pc, #212]	@ (80053b8 <checkAktifCalisma+0x1660>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	f083 0301 	eor.w	r3, r3, #1
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d014      	beq.n	8005318 <checkAktifCalisma+0x15c0>
				    if(millis-timer4>=makineCalismaTmr) {
 80052ee:	4b33      	ldr	r3, [pc, #204]	@ (80053bc <checkAktifCalisma+0x1664>)
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	4b33      	ldr	r3, [pc, #204]	@ (80053c0 <checkAktifCalisma+0x1668>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	4a32      	ldr	r2, [pc, #200]	@ (80053c4 <checkAktifCalisma+0x166c>)
 80052fa:	7812      	ldrb	r2, [r2, #0]
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d30b      	bcc.n	8005318 <checkAktifCalisma+0x15c0>
					  	hataVar=1;
 8005300:	4b26      	ldr	r3, [pc, #152]	@ (800539c <checkAktifCalisma+0x1644>)
 8005302:	2201      	movs	r2, #1
 8005304:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 8005306:	2006      	movs	r0, #6
 8005308:	f7fb fb18 	bl	800093c <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 800530c:	2006      	movs	r0, #6
 800530e:	f7fb fabd 	bl	800088c <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8005312:	4b29      	ldr	r3, [pc, #164]	@ (80053b8 <checkAktifCalisma+0x1660>)
 8005314:	2201      	movs	r2, #1
 8005316:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8005318:	4b27      	ldr	r3, [pc, #156]	@ (80053b8 <checkAktifCalisma+0x1660>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d013      	beq.n	8005348 <checkAktifCalisma+0x15f0>
 8005320:	2108      	movs	r1, #8
 8005322:	481b      	ldr	r0, [pc, #108]	@ (8005390 <checkAktifCalisma+0x1638>)
 8005324:	f005 fe8c 	bl	800b040 <HAL_GPIO_ReadPin>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00c      	beq.n	8005348 <checkAktifCalisma+0x15f0>
 800532e:	4b16      	ldr	r3, [pc, #88]	@ (8005388 <checkAktifCalisma+0x1630>)
 8005330:	781b      	ldrb	r3, [r3, #0]
 8005332:	f083 0301 	eor.w	r3, r3, #1
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d005      	beq.n	8005348 <checkAktifCalisma+0x15f0>
					maksimumcalismahatasi=0;
 800533c:	4b1e      	ldr	r3, [pc, #120]	@ (80053b8 <checkAktifCalisma+0x1660>)
 800533e:	2200      	movs	r2, #0
 8005340:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8005342:	2006      	movs	r0, #6
 8005344:	f7fe fb02 	bl	800394c <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8005348:	4b1f      	ldr	r3, [pc, #124]	@ (80053c8 <checkAktifCalisma+0x1670>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10b      	bne.n	8005368 <checkAktifCalisma+0x1610>
 8005350:	4b17      	ldr	r3, [pc, #92]	@ (80053b0 <checkAktifCalisma+0x1658>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d107      	bne.n	8005368 <checkAktifCalisma+0x1610>
 8005358:	4b1c      	ldr	r3, [pc, #112]	@ (80053cc <checkAktifCalisma+0x1674>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d103      	bne.n	8005368 <checkAktifCalisma+0x1610>
 8005360:	4b14      	ldr	r3, [pc, #80]	@ (80053b4 <checkAktifCalisma+0x165c>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d035      	beq.n	80053d4 <checkAktifCalisma+0x167c>
					makineCalisiyor=0;
 8005368:	4b19      	ldr	r3, [pc, #100]	@ (80053d0 <checkAktifCalisma+0x1678>)
 800536a:	2200      	movs	r2, #0
 800536c:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 800536e:	4b07      	ldr	r3, [pc, #28]	@ (800538c <checkAktifCalisma+0x1634>)
 8005370:	2201      	movs	r2, #1
 8005372:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8005374:	4b0b      	ldr	r3, [pc, #44]	@ (80053a4 <checkAktifCalisma+0x164c>)
 8005376:	2201      	movs	r2, #1
 8005378:	701a      	strb	r2, [r3, #0]
 800537a:	e032      	b.n	80053e2 <checkAktifCalisma+0x168a>
 800537c:	200010c9 	.word	0x200010c9
 8005380:	2000106f 	.word	0x2000106f
 8005384:	40010c00 	.word	0x40010c00
 8005388:	200010b9 	.word	0x200010b9
 800538c:	200010cd 	.word	0x200010cd
 8005390:	40010800 	.word	0x40010800
 8005394:	20001074 	.word	0x20001074
 8005398:	200010ca 	.word	0x200010ca
 800539c:	200010c0 	.word	0x200010c0
 80053a0:	200010ad 	.word	0x200010ad
 80053a4:	200010ce 	.word	0x200010ce
 80053a8:	200010cb 	.word	0x200010cb
 80053ac:	200010bf 	.word	0x200010bf
 80053b0:	200010a4 	.word	0x200010a4
 80053b4:	200010a3 	.word	0x200010a3
 80053b8:	200010ba 	.word	0x200010ba
 80053bc:	20001044 	.word	0x20001044
 80053c0:	20001058 	.word	0x20001058
 80053c4:	20001084 	.word	0x20001084
 80053c8:	200010a1 	.word	0x200010a1
 80053cc:	200010a2 	.word	0x200010a2
 80053d0:	200010c1 	.word	0x200010c1
				} else {
					makineCalisiyor=1;
 80053d4:	4b3a      	ldr	r3, [pc, #232]	@ (80054c0 <checkAktifCalisma+0x1768>)
 80053d6:	2201      	movs	r2, #1
 80053d8:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 80053da:	4b3a      	ldr	r3, [pc, #232]	@ (80054c4 <checkAktifCalisma+0x176c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a3a      	ldr	r2, [pc, #232]	@ (80054c8 <checkAktifCalisma+0x1770>)
 80053e0:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80053e2:	4b3a      	ldr	r3, [pc, #232]	@ (80054cc <checkAktifCalisma+0x1774>)
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d02f      	beq.n	800544a <checkAktifCalisma+0x16f2>
 80053ea:	4b39      	ldr	r3, [pc, #228]	@ (80054d0 <checkAktifCalisma+0x1778>)
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	f083 0301 	eor.w	r3, r3, #1
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d028      	beq.n	800544a <checkAktifCalisma+0x16f2>
 80053f8:	4b36      	ldr	r3, [pc, #216]	@ (80054d4 <checkAktifCalisma+0x177c>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	f083 0301 	eor.w	r3, r3, #1
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d021      	beq.n	800544a <checkAktifCalisma+0x16f2>
 8005406:	4b34      	ldr	r3, [pc, #208]	@ (80054d8 <checkAktifCalisma+0x1780>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	f083 0301 	eor.w	r3, r3, #1
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01a      	beq.n	800544a <checkAktifCalisma+0x16f2>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8005414:	4b31      	ldr	r3, [pc, #196]	@ (80054dc <checkAktifCalisma+0x1784>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	f083 0301 	eor.w	r3, r3, #1
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d013      	beq.n	800544a <checkAktifCalisma+0x16f2>
 8005422:	4b2f      	ldr	r3, [pc, #188]	@ (80054e0 <checkAktifCalisma+0x1788>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	f083 0301 	eor.w	r3, r3, #1
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00c      	beq.n	800544a <checkAktifCalisma+0x16f2>
 8005430:	4b2c      	ldr	r3, [pc, #176]	@ (80054e4 <checkAktifCalisma+0x178c>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	f083 0301 	eor.w	r3, r3, #1
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d005      	beq.n	800544a <checkAktifCalisma+0x16f2>

					hataVar=0;
 800543e:	4b23      	ldr	r3, [pc, #140]	@ (80054cc <checkAktifCalisma+0x1774>)
 8005440:	2200      	movs	r2, #0
 8005442:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8005444:	2007      	movs	r0, #7
 8005446:	f7fe fa81 	bl	800394c <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 800544a:	4b20      	ldr	r3, [pc, #128]	@ (80054cc <checkAktifCalisma+0x1774>)
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d02a      	beq.n	80054a8 <checkAktifCalisma+0x1750>
 8005452:	4b1f      	ldr	r3, [pc, #124]	@ (80054d0 <checkAktifCalisma+0x1778>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	f083 0301 	eor.w	r3, r3, #1
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d023      	beq.n	80054a8 <checkAktifCalisma+0x1750>
 8005460:	4b1c      	ldr	r3, [pc, #112]	@ (80054d4 <checkAktifCalisma+0x177c>)
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d01f      	beq.n	80054a8 <checkAktifCalisma+0x1750>
 8005468:	4b1b      	ldr	r3, [pc, #108]	@ (80054d8 <checkAktifCalisma+0x1780>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	f083 0301 	eor.w	r3, r3, #1
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b00      	cmp	r3, #0
 8005474:	d018      	beq.n	80054a8 <checkAktifCalisma+0x1750>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8005476:	4b19      	ldr	r3, [pc, #100]	@ (80054dc <checkAktifCalisma+0x1784>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	f083 0301 	eor.w	r3, r3, #1
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d011      	beq.n	80054a8 <checkAktifCalisma+0x1750>
 8005484:	4b16      	ldr	r3, [pc, #88]	@ (80054e0 <checkAktifCalisma+0x1788>)
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	f083 0301 	eor.w	r3, r3, #1
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00a      	beq.n	80054a8 <checkAktifCalisma+0x1750>
 8005492:	4b14      	ldr	r3, [pc, #80]	@ (80054e4 <checkAktifCalisma+0x178c>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	f083 0301 	eor.w	r3, r3, #1
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <checkAktifCalisma+0x1750>
				{
					EmnCerHataMakYukariCalis=1;
 80054a0:	4b11      	ldr	r3, [pc, #68]	@ (80054e8 <checkAktifCalisma+0x1790>)
 80054a2:	2201      	movs	r2, #1
 80054a4:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 80054a6:	e009      	b.n	80054bc <checkAktifCalisma+0x1764>
				else if(emniyetCercevesihatasi==0)
 80054a8:	4b0a      	ldr	r3, [pc, #40]	@ (80054d4 <checkAktifCalisma+0x177c>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	f083 0301 	eor.w	r3, r3, #1
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d002      	beq.n	80054bc <checkAktifCalisma+0x1764>
					EmnCerHataMakYukariCalis=0;
 80054b6:	4b0c      	ldr	r3, [pc, #48]	@ (80054e8 <checkAktifCalisma+0x1790>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	701a      	strb	r2, [r3, #0]
}
 80054bc:	bf00      	nop
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	200010c1 	.word	0x200010c1
 80054c4:	20001044 	.word	0x20001044
 80054c8:	20001058 	.word	0x20001058
 80054cc:	200010c0 	.word	0x200010c0
 80054d0:	200010bb 	.word	0x200010bb
 80054d4:	200010bc 	.word	0x200010bc
 80054d8:	200010c9 	.word	0x200010c9
 80054dc:	200010ca 	.word	0x200010ca
 80054e0:	200010cb 	.word	0x200010cb
 80054e4:	200010ba 	.word	0x200010ba
 80054e8:	200010cf 	.word	0x200010cf

080054ec <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 80054f0:	4b66      	ldr	r3, [pc, #408]	@ (800568c <checkDemoModCalisma+0x1a0>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	f041 83ab 	bne.w	8006c50 <checkDemoModCalisma+0x1764>
 80054fa:	4b65      	ldr	r3, [pc, #404]	@ (8005690 <checkDemoModCalisma+0x1a4>)
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f041 83a6 	bne.w	8006c50 <checkDemoModCalisma+0x1764>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8005504:	4b63      	ldr	r3, [pc, #396]	@ (8005694 <checkDemoModCalisma+0x1a8>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d11a      	bne.n	8005542 <checkDemoModCalisma+0x56>
 800550c:	4b62      	ldr	r3, [pc, #392]	@ (8005698 <checkDemoModCalisma+0x1ac>)
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d116      	bne.n	8005542 <checkDemoModCalisma+0x56>
 8005514:	4b61      	ldr	r3, [pc, #388]	@ (800569c <checkDemoModCalisma+0x1b0>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00a      	beq.n	8005532 <checkDemoModCalisma+0x46>
 800551c:	4b60      	ldr	r3, [pc, #384]	@ (80056a0 <checkDemoModCalisma+0x1b4>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	f083 0301 	eor.w	r3, r3, #1
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <checkDemoModCalisma+0x46>
 800552a:	4b5e      	ldr	r3, [pc, #376]	@ (80056a4 <checkDemoModCalisma+0x1b8>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d007      	beq.n	8005542 <checkDemoModCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 8005532:	4b5d      	ldr	r3, [pc, #372]	@ (80056a8 <checkDemoModCalisma+0x1bc>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d01c      	beq.n	8005574 <checkDemoModCalisma+0x88>
 800553a:	4b5c      	ldr	r3, [pc, #368]	@ (80056ac <checkDemoModCalisma+0x1c0>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d118      	bne.n	8005574 <checkDemoModCalisma+0x88>
 8005542:	4b5b      	ldr	r3, [pc, #364]	@ (80056b0 <checkDemoModCalisma+0x1c4>)
 8005544:	781b      	ldrb	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d103      	bne.n	8005552 <checkDemoModCalisma+0x66>
 800554a:	4b5a      	ldr	r3, [pc, #360]	@ (80056b4 <checkDemoModCalisma+0x1c8>)
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d010      	beq.n	8005574 <checkDemoModCalisma+0x88>
 8005552:	4b59      	ldr	r3, [pc, #356]	@ (80056b8 <checkDemoModCalisma+0x1cc>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00c      	beq.n	8005574 <checkDemoModCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 800555a:	2201      	movs	r2, #1
 800555c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005560:	4856      	ldr	r0, [pc, #344]	@ (80056bc <checkDemoModCalisma+0x1d0>)
 8005562:	f005 fd84 	bl	800b06e <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 8005566:	4b56      	ldr	r3, [pc, #344]	@ (80056c0 <checkDemoModCalisma+0x1d4>)
 8005568:	2201      	movs	r2, #1
 800556a:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 800556c:	4b55      	ldr	r3, [pc, #340]	@ (80056c4 <checkDemoModCalisma+0x1d8>)
 800556e:	2201      	movs	r2, #1
 8005570:	701a      	strb	r2, [r3, #0]
 8005572:	e008      	b.n	8005586 <checkDemoModCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005574:	2200      	movs	r2, #0
 8005576:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800557a:	4850      	ldr	r0, [pc, #320]	@ (80056bc <checkDemoModCalisma+0x1d0>)
 800557c:	f005 fd77 	bl	800b06e <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8005580:	4b4f      	ldr	r3, [pc, #316]	@ (80056c0 <checkDemoModCalisma+0x1d4>)
 8005582:	2200      	movs	r2, #0
 8005584:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 8005586:	4b42      	ldr	r3, [pc, #264]	@ (8005690 <checkDemoModCalisma+0x1a4>)
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d164      	bne.n	8005658 <checkDemoModCalisma+0x16c>
 800558e:	4b49      	ldr	r3, [pc, #292]	@ (80056b4 <checkDemoModCalisma+0x1c8>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d103      	bne.n	800559e <checkDemoModCalisma+0xb2>
 8005596:	4b46      	ldr	r3, [pc, #280]	@ (80056b0 <checkDemoModCalisma+0x1c4>)
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d05c      	beq.n	8005658 <checkDemoModCalisma+0x16c>
 800559e:	4b46      	ldr	r3, [pc, #280]	@ (80056b8 <checkDemoModCalisma+0x1cc>)
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d058      	beq.n	8005658 <checkDemoModCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80055a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80055aa:	4844      	ldr	r0, [pc, #272]	@ (80056bc <checkDemoModCalisma+0x1d0>)
 80055ac:	f005 fd48 	bl	800b040 <HAL_GPIO_ReadPin>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <checkDemoModCalisma+0xd2>
 80055b6:	4b44      	ldr	r3, [pc, #272]	@ (80056c8 <checkDemoModCalisma+0x1dc>)
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d04c      	beq.n	8005658 <checkDemoModCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80055be:	2102      	movs	r1, #2
 80055c0:	4842      	ldr	r0, [pc, #264]	@ (80056cc <checkDemoModCalisma+0x1e0>)
 80055c2:	f005 fd3d 	bl	800b040 <HAL_GPIO_ReadPin>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d145      	bne.n	8005658 <checkDemoModCalisma+0x16c>
							&& (basincVar)
 80055cc:	4b40      	ldr	r3, [pc, #256]	@ (80056d0 <checkDemoModCalisma+0x1e4>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d041      	beq.n	8005658 <checkDemoModCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80055d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80055d8:	4838      	ldr	r0, [pc, #224]	@ (80056bc <checkDemoModCalisma+0x1d0>)
 80055da:	f005 fd31 	bl	800b040 <HAL_GPIO_ReadPin>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d10e      	bne.n	8005602 <checkDemoModCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80055e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055e8:	4834      	ldr	r0, [pc, #208]	@ (80056bc <checkDemoModCalisma+0x1d0>)
 80055ea:	f005 fd29 	bl	800b040 <HAL_GPIO_ReadPin>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d106      	bne.n	8005602 <checkDemoModCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 80055f4:	2140      	movs	r1, #64	@ 0x40
 80055f6:	4835      	ldr	r0, [pc, #212]	@ (80056cc <checkDemoModCalisma+0x1e0>)
 80055f8:	f005 fd22 	bl	800b040 <HAL_GPIO_ReadPin>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d003      	beq.n	800560a <checkDemoModCalisma+0x11e>
 8005602:	4b24      	ldr	r3, [pc, #144]	@ (8005694 <checkDemoModCalisma+0x1a8>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d026      	beq.n	8005658 <checkDemoModCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 800560a:	4b24      	ldr	r3, [pc, #144]	@ (800569c <checkDemoModCalisma+0x1b0>)
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	f083 0301 	eor.w	r3, r3, #1
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01f      	beq.n	8005658 <checkDemoModCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 8005618:	4b1f      	ldr	r3, [pc, #124]	@ (8005698 <checkDemoModCalisma+0x1ac>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	f083 0301 	eor.w	r3, r3, #1
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d018      	beq.n	8005658 <checkDemoModCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 8005626:	4b20      	ldr	r3, [pc, #128]	@ (80056a8 <checkDemoModCalisma+0x1bc>)
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	f083 0301 	eor.w	r3, r3, #1
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b00      	cmp	r3, #0
 8005632:	d011      	beq.n	8005658 <checkDemoModCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 8005634:	4b27      	ldr	r3, [pc, #156]	@ (80056d4 <checkDemoModCalisma+0x1e8>)
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	f083 0301 	eor.w	r3, r3, #1
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <checkDemoModCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 8005642:	4b25      	ldr	r3, [pc, #148]	@ (80056d8 <checkDemoModCalisma+0x1ec>)
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	f083 0301 	eor.w	r3, r3, #1
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <checkDemoModCalisma+0x16c>
					yukarimotorcalisiyor=1;
 8005650:	4b10      	ldr	r3, [pc, #64]	@ (8005694 <checkDemoModCalisma+0x1a8>)
 8005652:	2201      	movs	r2, #1
 8005654:	701a      	strb	r2, [r3, #0]
 8005656:	e002      	b.n	800565e <checkDemoModCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 8005658:	4b0e      	ldr	r3, [pc, #56]	@ (8005694 <checkDemoModCalisma+0x1a8>)
 800565a:	2200      	movs	r2, #0
 800565c:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800565e:	4b0d      	ldr	r3, [pc, #52]	@ (8005694 <checkDemoModCalisma+0x1a8>)
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d03c      	beq.n	80056e0 <checkDemoModCalisma+0x1f4>
 8005666:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800566a:	4818      	ldr	r0, [pc, #96]	@ (80056cc <checkDemoModCalisma+0x1e0>)
 800566c:	f005 fce8 	bl	800b040 <HAL_GPIO_ReadPin>
 8005670:	4603      	mov	r3, r0
 8005672:	2b01      	cmp	r3, #1
 8005674:	d134      	bne.n	80056e0 <checkDemoModCalisma+0x1f4>
 8005676:	4b19      	ldr	r3, [pc, #100]	@ (80056dc <checkDemoModCalisma+0x1f0>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d030      	beq.n	80056e0 <checkDemoModCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800567e:	2201      	movs	r2, #1
 8005680:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005684:	480d      	ldr	r0, [pc, #52]	@ (80056bc <checkDemoModCalisma+0x1d0>)
 8005686:	f005 fcf2 	bl	800b06e <HAL_GPIO_WritePin>
 800568a:	e02f      	b.n	80056ec <checkDemoModCalisma+0x200>
 800568c:	2000108a 	.word	0x2000108a
 8005690:	20001089 	.word	0x20001089
 8005694:	200010a1 	.word	0x200010a1
 8005698:	200010a2 	.word	0x200010a2
 800569c:	200010a4 	.word	0x200010a4
 80056a0:	2000109c 	.word	0x2000109c
 80056a4:	2000107f 	.word	0x2000107f
 80056a8:	200010a3 	.word	0x200010a3
 80056ac:	2000107e 	.word	0x2000107e
 80056b0:	200010bd 	.word	0x200010bd
 80056b4:	200010d0 	.word	0x200010d0
 80056b8:	200010be 	.word	0x200010be
 80056bc:	40010c00 	.word	0x40010c00
 80056c0:	200010bf 	.word	0x200010bf
 80056c4:	200010ab 	.word	0x200010ab
 80056c8:	200010a8 	.word	0x200010a8
 80056cc:	40011000 	.word	0x40011000
 80056d0:	2000106f 	.word	0x2000106f
 80056d4:	200010a6 	.word	0x200010a6
 80056d8:	200010a7 	.word	0x200010a7
 80056dc:	2000107a 	.word	0x2000107a
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80056e0:	2200      	movs	r2, #0
 80056e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80056e6:	4865      	ldr	r0, [pc, #404]	@ (800587c <checkDemoModCalisma+0x390>)
 80056e8:	f005 fcc1 	bl	800b06e <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80056ec:	4b64      	ldr	r3, [pc, #400]	@ (8005880 <checkDemoModCalisma+0x394>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d013      	beq.n	800571c <checkDemoModCalisma+0x230>
 80056f4:	4b63      	ldr	r3, [pc, #396]	@ (8005884 <checkDemoModCalisma+0x398>)
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d007      	beq.n	800570c <checkDemoModCalisma+0x220>
 80056fc:	4b61      	ldr	r3, [pc, #388]	@ (8005884 <checkDemoModCalisma+0x398>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d003      	beq.n	800570c <checkDemoModCalisma+0x220>
 8005704:	4b60      	ldr	r3, [pc, #384]	@ (8005888 <checkDemoModCalisma+0x39c>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d107      	bne.n	800571c <checkDemoModCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800570c:	2201      	movs	r2, #1
 800570e:	2104      	movs	r1, #4
 8005710:	485a      	ldr	r0, [pc, #360]	@ (800587c <checkDemoModCalisma+0x390>)
 8005712:	f005 fcac 	bl	800b06e <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 8005716:	4b5d      	ldr	r3, [pc, #372]	@ (800588c <checkDemoModCalisma+0x3a0>)
 8005718:	2201      	movs	r2, #1
 800571a:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 800571c:	4b5b      	ldr	r3, [pc, #364]	@ (800588c <checkDemoModCalisma+0x3a0>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d033      	beq.n	800578c <checkDemoModCalisma+0x2a0>
 8005724:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005728:	4854      	ldr	r0, [pc, #336]	@ (800587c <checkDemoModCalisma+0x390>)
 800572a:	f005 fc89 	bl	800b040 <HAL_GPIO_ReadPin>
 800572e:	4603      	mov	r3, r0
 8005730:	2b01      	cmp	r3, #1
 8005732:	d106      	bne.n	8005742 <checkDemoModCalisma+0x256>
 8005734:	4b56      	ldr	r3, [pc, #344]	@ (8005890 <checkDemoModCalisma+0x3a4>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	f083 0301 	eor.w	r3, r3, #1
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d106      	bne.n	8005750 <checkDemoModCalisma+0x264>
 8005742:	2102      	movs	r1, #2
 8005744:	4853      	ldr	r0, [pc, #332]	@ (8005894 <checkDemoModCalisma+0x3a8>)
 8005746:	f005 fc7b 	bl	800b040 <HAL_GPIO_ReadPin>
 800574a:	4603      	mov	r3, r0
 800574c:	2b01      	cmp	r3, #1
 800574e:	d11d      	bne.n	800578c <checkDemoModCalisma+0x2a0>
 8005750:	4b51      	ldr	r3, [pc, #324]	@ (8005898 <checkDemoModCalisma+0x3ac>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d103      	bne.n	8005760 <checkDemoModCalisma+0x274>
 8005758:	4b50      	ldr	r3, [pc, #320]	@ (800589c <checkDemoModCalisma+0x3b0>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d015      	beq.n	800578c <checkDemoModCalisma+0x2a0>
 8005760:	4b4f      	ldr	r3, [pc, #316]	@ (80058a0 <checkDemoModCalisma+0x3b4>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d011      	beq.n	800578c <checkDemoModCalisma+0x2a0>
 8005768:	4b4e      	ldr	r3, [pc, #312]	@ (80058a4 <checkDemoModCalisma+0x3b8>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00d      	beq.n	800578c <checkDemoModCalisma+0x2a0>
 8005770:	4b4d      	ldr	r3, [pc, #308]	@ (80058a8 <checkDemoModCalisma+0x3bc>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	f083 0301 	eor.w	r3, r3, #1
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d006      	beq.n	800578c <checkDemoModCalisma+0x2a0>
					timer2=millis;
 800577e:	4b4b      	ldr	r3, [pc, #300]	@ (80058ac <checkDemoModCalisma+0x3c0>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a4b      	ldr	r2, [pc, #300]	@ (80058b0 <checkDemoModCalisma+0x3c4>)
 8005784:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 8005786:	4b48      	ldr	r3, [pc, #288]	@ (80058a8 <checkDemoModCalisma+0x3bc>)
 8005788:	2201      	movs	r2, #1
 800578a:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 800578c:	4b47      	ldr	r3, [pc, #284]	@ (80058ac <checkDemoModCalisma+0x3c0>)
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	4b47      	ldr	r3, [pc, #284]	@ (80058b0 <checkDemoModCalisma+0x3c4>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	4a47      	ldr	r2, [pc, #284]	@ (80058b4 <checkDemoModCalisma+0x3c8>)
 8005798:	7812      	ldrb	r2, [r2, #0]
 800579a:	4293      	cmp	r3, r2
 800579c:	d303      	bcc.n	80057a6 <checkDemoModCalisma+0x2ba>
 800579e:	4b42      	ldr	r3, [pc, #264]	@ (80058a8 <checkDemoModCalisma+0x3bc>)
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d118      	bne.n	80057d8 <checkDemoModCalisma+0x2ec>
 80057a6:	4b3c      	ldr	r3, [pc, #240]	@ (8005898 <checkDemoModCalisma+0x3ac>)
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	f083 0301 	eor.w	r3, r3, #1
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d006      	beq.n	80057c2 <checkDemoModCalisma+0x2d6>
 80057b4:	4b39      	ldr	r3, [pc, #228]	@ (800589c <checkDemoModCalisma+0x3b0>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	f083 0301 	eor.w	r3, r3, #1
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10a      	bne.n	80057d8 <checkDemoModCalisma+0x2ec>
 80057c2:	4b37      	ldr	r3, [pc, #220]	@ (80058a0 <checkDemoModCalisma+0x3b4>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	f083 0301 	eor.w	r3, r3, #1
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d103      	bne.n	80057d8 <checkDemoModCalisma+0x2ec>
 80057d0:	4b34      	ldr	r3, [pc, #208]	@ (80058a4 <checkDemoModCalisma+0x3b8>)
 80057d2:	781b      	ldrb	r3, [r3, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10a      	bne.n	80057ee <checkDemoModCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80057d8:	2200      	movs	r2, #0
 80057da:	2104      	movs	r1, #4
 80057dc:	4827      	ldr	r0, [pc, #156]	@ (800587c <checkDemoModCalisma+0x390>)
 80057de:	f005 fc46 	bl	800b06e <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 80057e2:	4b2a      	ldr	r3, [pc, #168]	@ (800588c <checkDemoModCalisma+0x3a0>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 80057e8:	4b2f      	ldr	r3, [pc, #188]	@ (80058a8 <checkDemoModCalisma+0x3bc>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 80057ee:	4b32      	ldr	r3, [pc, #200]	@ (80058b8 <checkDemoModCalisma+0x3cc>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d102      	bne.n	80057fc <checkDemoModCalisma+0x310>
					cerceveVar=1;
 80057f6:	4b31      	ldr	r3, [pc, #196]	@ (80058bc <checkDemoModCalisma+0x3d0>)
 80057f8:	2201      	movs	r2, #1
 80057fa:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80057fc:	4b2e      	ldr	r3, [pc, #184]	@ (80058b8 <checkDemoModCalisma+0x3cc>)
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d116      	bne.n	8005832 <checkDemoModCalisma+0x346>
 8005804:	4b2e      	ldr	r3, [pc, #184]	@ (80058c0 <checkDemoModCalisma+0x3d4>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d112      	bne.n	8005832 <checkDemoModCalisma+0x346>
 800580c:	2101      	movs	r1, #1
 800580e:	4821      	ldr	r0, [pc, #132]	@ (8005894 <checkDemoModCalisma+0x3a8>)
 8005810:	f005 fc16 	bl	800b040 <HAL_GPIO_ReadPin>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10b      	bne.n	8005832 <checkDemoModCalisma+0x346>
 800581a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800581e:	4817      	ldr	r0, [pc, #92]	@ (800587c <checkDemoModCalisma+0x390>)
 8005820:	f005 fc0e 	bl	800b040 <HAL_GPIO_ReadPin>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d103      	bne.n	8005832 <checkDemoModCalisma+0x346>
					cerceveVar=1;
 800582a:	4b24      	ldr	r3, [pc, #144]	@ (80058bc <checkDemoModCalisma+0x3d0>)
 800582c:	2201      	movs	r2, #1
 800582e:	701a      	strb	r2, [r3, #0]
 8005830:	e011      	b.n	8005856 <checkDemoModCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8005832:	4b21      	ldr	r3, [pc, #132]	@ (80058b8 <checkDemoModCalisma+0x3cc>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d10d      	bne.n	8005856 <checkDemoModCalisma+0x36a>
 800583a:	2101      	movs	r1, #1
 800583c:	4815      	ldr	r0, [pc, #84]	@ (8005894 <checkDemoModCalisma+0x3a8>)
 800583e:	f005 fbff 	bl	800b040 <HAL_GPIO_ReadPin>
 8005842:	4603      	mov	r3, r0
 8005844:	2b01      	cmp	r3, #1
 8005846:	d106      	bne.n	8005856 <checkDemoModCalisma+0x36a>
 8005848:	4b1d      	ldr	r3, [pc, #116]	@ (80058c0 <checkDemoModCalisma+0x3d4>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d102      	bne.n	8005856 <checkDemoModCalisma+0x36a>
					cerceveVar=0;
 8005850:	4b1a      	ldr	r3, [pc, #104]	@ (80058bc <checkDemoModCalisma+0x3d0>)
 8005852:	2200      	movs	r2, #0
 8005854:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 8005856:	4b18      	ldr	r3, [pc, #96]	@ (80058b8 <checkDemoModCalisma+0x3cc>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d135      	bne.n	80058ca <checkDemoModCalisma+0x3de>
 800585e:	4b18      	ldr	r3, [pc, #96]	@ (80058c0 <checkDemoModCalisma+0x3d4>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d131      	bne.n	80058ca <checkDemoModCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005866:	2101      	movs	r1, #1
 8005868:	480a      	ldr	r0, [pc, #40]	@ (8005894 <checkDemoModCalisma+0x3a8>)
 800586a:	f005 fbe9 	bl	800b040 <HAL_GPIO_ReadPin>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d127      	bne.n	80058c4 <checkDemoModCalisma+0x3d8>
						cerceveVar=1;
 8005874:	4b11      	ldr	r3, [pc, #68]	@ (80058bc <checkDemoModCalisma+0x3d0>)
 8005876:	2201      	movs	r2, #1
 8005878:	701a      	strb	r2, [r3, #0]
 800587a:	e026      	b.n	80058ca <checkDemoModCalisma+0x3de>
 800587c:	40010c00 	.word	0x40010c00
 8005880:	200010a1 	.word	0x200010a1
 8005884:	2000107b 	.word	0x2000107b
 8005888:	2000107f 	.word	0x2000107f
 800588c:	200010a5 	.word	0x200010a5
 8005890:	200010a8 	.word	0x200010a8
 8005894:	40011000 	.word	0x40011000
 8005898:	200010bd 	.word	0x200010bd
 800589c:	200010d0 	.word	0x200010d0
 80058a0:	200010be 	.word	0x200010be
 80058a4:	2000106f 	.word	0x2000106f
 80058a8:	2000109d 	.word	0x2000109d
 80058ac:	20001044 	.word	0x20001044
 80058b0:	20001050 	.word	0x20001050
 80058b4:	20001080 	.word	0x20001080
 80058b8:	20001070 	.word	0x20001070
 80058bc:	200010c2 	.word	0x200010c2
 80058c0:	2000106d 	.word	0x2000106d
					} else {
						cerceveVar=0;
 80058c4:	4b7f      	ldr	r3, [pc, #508]	@ (8005ac4 <checkDemoModCalisma+0x5d8>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80058ca:	4b7f      	ldr	r3, [pc, #508]	@ (8005ac8 <checkDemoModCalisma+0x5dc>)
 80058cc:	781b      	ldrb	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d17c      	bne.n	80059cc <checkDemoModCalisma+0x4e0>
 80058d2:	4b7e      	ldr	r3, [pc, #504]	@ (8005acc <checkDemoModCalisma+0x5e0>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d078      	beq.n	80059cc <checkDemoModCalisma+0x4e0>
 80058da:	4b7d      	ldr	r3, [pc, #500]	@ (8005ad0 <checkDemoModCalisma+0x5e4>)
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d074      	beq.n	80059cc <checkDemoModCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80058e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80058e6:	487b      	ldr	r0, [pc, #492]	@ (8005ad4 <checkDemoModCalisma+0x5e8>)
 80058e8:	f005 fbaa 	bl	800b040 <HAL_GPIO_ReadPin>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d003      	beq.n	80058fa <checkDemoModCalisma+0x40e>
 80058f2:	4b79      	ldr	r3, [pc, #484]	@ (8005ad8 <checkDemoModCalisma+0x5ec>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d068      	beq.n	80059cc <checkDemoModCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80058fa:	4b72      	ldr	r3, [pc, #456]	@ (8005ac4 <checkDemoModCalisma+0x5d8>)
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d064      	beq.n	80059cc <checkDemoModCalisma+0x4e0>
 8005902:	4b76      	ldr	r3, [pc, #472]	@ (8005adc <checkDemoModCalisma+0x5f0>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	f083 0301 	eor.w	r3, r3, #1
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d05d      	beq.n	80059cc <checkDemoModCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005910:	2104      	movs	r1, #4
 8005912:	4873      	ldr	r0, [pc, #460]	@ (8005ae0 <checkDemoModCalisma+0x5f4>)
 8005914:	f005 fb94 	bl	800b040 <HAL_GPIO_ReadPin>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <checkDemoModCalisma+0x43a>
 800591e:	4b71      	ldr	r3, [pc, #452]	@ (8005ae4 <checkDemoModCalisma+0x5f8>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d152      	bne.n	80059cc <checkDemoModCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005926:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800592a:	486a      	ldr	r0, [pc, #424]	@ (8005ad4 <checkDemoModCalisma+0x5e8>)
 800592c:	f005 fb88 	bl	800b040 <HAL_GPIO_ReadPin>
 8005930:	4603      	mov	r3, r0
 8005932:	2b01      	cmp	r3, #1
 8005934:	d10e      	bne.n	8005954 <checkDemoModCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005936:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800593a:	4866      	ldr	r0, [pc, #408]	@ (8005ad4 <checkDemoModCalisma+0x5e8>)
 800593c:	f005 fb80 	bl	800b040 <HAL_GPIO_ReadPin>
 8005940:	4603      	mov	r3, r0
 8005942:	2b01      	cmp	r3, #1
 8005944:	d106      	bne.n	8005954 <checkDemoModCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8005946:	2140      	movs	r1, #64	@ 0x40
 8005948:	4865      	ldr	r0, [pc, #404]	@ (8005ae0 <checkDemoModCalisma+0x5f4>)
 800594a:	f005 fb79 	bl	800b040 <HAL_GPIO_ReadPin>
 800594e:	4603      	mov	r3, r0
 8005950:	2b01      	cmp	r3, #1
 8005952:	d003      	beq.n	800595c <checkDemoModCalisma+0x470>
 8005954:	4b64      	ldr	r3, [pc, #400]	@ (8005ae8 <checkDemoModCalisma+0x5fc>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d037      	beq.n	80059cc <checkDemoModCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 800595c:	4b63      	ldr	r3, [pc, #396]	@ (8005aec <checkDemoModCalisma+0x600>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	f083 0301 	eor.w	r3, r3, #1
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d030      	beq.n	80059cc <checkDemoModCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 800596a:	4b61      	ldr	r3, [pc, #388]	@ (8005af0 <checkDemoModCalisma+0x604>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	f083 0301 	eor.w	r3, r3, #1
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d029      	beq.n	80059cc <checkDemoModCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 8005978:	4b5e      	ldr	r3, [pc, #376]	@ (8005af4 <checkDemoModCalisma+0x608>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	f083 0301 	eor.w	r3, r3, #1
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d022      	beq.n	80059cc <checkDemoModCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 8005986:	4b5c      	ldr	r3, [pc, #368]	@ (8005af8 <checkDemoModCalisma+0x60c>)
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	f083 0301 	eor.w	r3, r3, #1
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b00      	cmp	r3, #0
 8005992:	d01b      	beq.n	80059cc <checkDemoModCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 8005994:	4b59      	ldr	r3, [pc, #356]	@ (8005afc <checkDemoModCalisma+0x610>)
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	f083 0301 	eor.w	r3, r3, #1
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d014      	beq.n	80059cc <checkDemoModCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 80059a2:	4b57      	ldr	r3, [pc, #348]	@ (8005b00 <checkDemoModCalisma+0x614>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	f083 0301 	eor.w	r3, r3, #1
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00d      	beq.n	80059cc <checkDemoModCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80059b0:	2201      	movs	r2, #1
 80059b2:	2102      	movs	r1, #2
 80059b4:	4847      	ldr	r0, [pc, #284]	@ (8005ad4 <checkDemoModCalisma+0x5e8>)
 80059b6:	f005 fb5a 	bl	800b06e <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 80059ba:	4b4b      	ldr	r3, [pc, #300]	@ (8005ae8 <checkDemoModCalisma+0x5fc>)
 80059bc:	2201      	movs	r2, #1
 80059be:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 80059c0:	4b50      	ldr	r3, [pc, #320]	@ (8005b04 <checkDemoModCalisma+0x618>)
 80059c2:	2201      	movs	r2, #1
 80059c4:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 80059c6:	4b50      	ldr	r3, [pc, #320]	@ (8005b08 <checkDemoModCalisma+0x61c>)
 80059c8:	2201      	movs	r2, #1
 80059ca:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80059cc:	4b46      	ldr	r3, [pc, #280]	@ (8005ae8 <checkDemoModCalisma+0x5fc>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d033      	beq.n	8005a3c <checkDemoModCalisma+0x550>
 80059d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80059d8:	483e      	ldr	r0, [pc, #248]	@ (8005ad4 <checkDemoModCalisma+0x5e8>)
 80059da:	f005 fb31 	bl	800b040 <HAL_GPIO_ReadPin>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d106      	bne.n	80059f2 <checkDemoModCalisma+0x506>
 80059e4:	4b3c      	ldr	r3, [pc, #240]	@ (8005ad8 <checkDemoModCalisma+0x5ec>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	f083 0301 	eor.w	r3, r3, #1
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10a      	bne.n	8005a08 <checkDemoModCalisma+0x51c>
 80059f2:	2104      	movs	r1, #4
 80059f4:	483a      	ldr	r0, [pc, #232]	@ (8005ae0 <checkDemoModCalisma+0x5f4>)
 80059f6:	f005 fb23 	bl	800b040 <HAL_GPIO_ReadPin>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d11d      	bne.n	8005a3c <checkDemoModCalisma+0x550>
 8005a00:	4b38      	ldr	r3, [pc, #224]	@ (8005ae4 <checkDemoModCalisma+0x5f8>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d019      	beq.n	8005a3c <checkDemoModCalisma+0x550>
 8005a08:	4b30      	ldr	r3, [pc, #192]	@ (8005acc <checkDemoModCalisma+0x5e0>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d015      	beq.n	8005a3c <checkDemoModCalisma+0x550>
 8005a10:	4b2f      	ldr	r3, [pc, #188]	@ (8005ad0 <checkDemoModCalisma+0x5e4>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d011      	beq.n	8005a3c <checkDemoModCalisma+0x550>
 8005a18:	4b2a      	ldr	r3, [pc, #168]	@ (8005ac4 <checkDemoModCalisma+0x5d8>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00d      	beq.n	8005a3c <checkDemoModCalisma+0x550>
 8005a20:	4b3a      	ldr	r3, [pc, #232]	@ (8005b0c <checkDemoModCalisma+0x620>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	f083 0301 	eor.w	r3, r3, #1
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d006      	beq.n	8005a3c <checkDemoModCalisma+0x550>
					timer2=millis;
 8005a2e:	4b38      	ldr	r3, [pc, #224]	@ (8005b10 <checkDemoModCalisma+0x624>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a38      	ldr	r2, [pc, #224]	@ (8005b14 <checkDemoModCalisma+0x628>)
 8005a34:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 8005a36:	4b35      	ldr	r3, [pc, #212]	@ (8005b0c <checkDemoModCalisma+0x620>)
 8005a38:	2201      	movs	r2, #1
 8005a3a:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005a3c:	4b34      	ldr	r3, [pc, #208]	@ (8005b10 <checkDemoModCalisma+0x624>)
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	4b34      	ldr	r3, [pc, #208]	@ (8005b14 <checkDemoModCalisma+0x628>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	4a34      	ldr	r2, [pc, #208]	@ (8005b18 <checkDemoModCalisma+0x62c>)
 8005a48:	7812      	ldrb	r2, [r2, #0]
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d303      	bcc.n	8005a56 <checkDemoModCalisma+0x56a>
 8005a4e:	4b2f      	ldr	r3, [pc, #188]	@ (8005b0c <checkDemoModCalisma+0x620>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d114      	bne.n	8005a80 <checkDemoModCalisma+0x594>
 8005a56:	4b1d      	ldr	r3, [pc, #116]	@ (8005acc <checkDemoModCalisma+0x5e0>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	f083 0301 	eor.w	r3, r3, #1
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10d      	bne.n	8005a80 <checkDemoModCalisma+0x594>
 8005a64:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad0 <checkDemoModCalisma+0x5e4>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	f083 0301 	eor.w	r3, r3, #1
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d106      	bne.n	8005a80 <checkDemoModCalisma+0x594>
 8005a72:	4b14      	ldr	r3, [pc, #80]	@ (8005ac4 <checkDemoModCalisma+0x5d8>)
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	f083 0301 	eor.w	r3, r3, #1
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00a      	beq.n	8005a96 <checkDemoModCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005a80:	2200      	movs	r2, #0
 8005a82:	2102      	movs	r1, #2
 8005a84:	4813      	ldr	r0, [pc, #76]	@ (8005ad4 <checkDemoModCalisma+0x5e8>)
 8005a86:	f005 faf2 	bl	800b06e <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 8005a8a:	4b17      	ldr	r3, [pc, #92]	@ (8005ae8 <checkDemoModCalisma+0x5fc>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8005a90:	4b1e      	ldr	r3, [pc, #120]	@ (8005b0c <checkDemoModCalisma+0x620>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8005a96:	4b14      	ldr	r3, [pc, #80]	@ (8005ae8 <checkDemoModCalisma+0x5fc>)
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d040      	beq.n	8005b20 <checkDemoModCalisma+0x634>
 8005a9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005aa2:	480f      	ldr	r0, [pc, #60]	@ (8005ae0 <checkDemoModCalisma+0x5f4>)
 8005aa4:	f005 facc 	bl	800b040 <HAL_GPIO_ReadPin>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d138      	bne.n	8005b20 <checkDemoModCalisma+0x634>
 8005aae:	4b1b      	ldr	r3, [pc, #108]	@ (8005b1c <checkDemoModCalisma+0x630>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d034      	beq.n	8005b20 <checkDemoModCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	2101      	movs	r1, #1
 8005aba:	4806      	ldr	r0, [pc, #24]	@ (8005ad4 <checkDemoModCalisma+0x5e8>)
 8005abc:	f005 fad7 	bl	800b06e <HAL_GPIO_WritePin>
 8005ac0:	e033      	b.n	8005b2a <checkDemoModCalisma+0x63e>
 8005ac2:	bf00      	nop
 8005ac4:	200010c2 	.word	0x200010c2
 8005ac8:	20001089 	.word	0x20001089
 8005acc:	200010bd 	.word	0x200010bd
 8005ad0:	200010be 	.word	0x200010be
 8005ad4:	40010c00 	.word	0x40010c00
 8005ad8:	200010a9 	.word	0x200010a9
 8005adc:	200010bc 	.word	0x200010bc
 8005ae0:	40011000 	.word	0x40011000
 8005ae4:	20001072 	.word	0x20001072
 8005ae8:	200010a4 	.word	0x200010a4
 8005aec:	200010a1 	.word	0x200010a1
 8005af0:	200010a5 	.word	0x200010a5
 8005af4:	200010a2 	.word	0x200010a2
 8005af8:	200010a3 	.word	0x200010a3
 8005afc:	200010a6 	.word	0x200010a6
 8005b00:	200010a7 	.word	0x200010a7
 8005b04:	200010ac 	.word	0x200010ac
 8005b08:	200010cc 	.word	0x200010cc
 8005b0c:	2000109c 	.word	0x2000109c
 8005b10:	20001044 	.word	0x20001044
 8005b14:	20001050 	.word	0x20001050
 8005b18:	20001081 	.word	0x20001081
 8005b1c:	20001071 	.word	0x20001071
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005b20:	2200      	movs	r2, #0
 8005b22:	2101      	movs	r1, #1
 8005b24:	4836      	ldr	r0, [pc, #216]	@ (8005c00 <checkDemoModCalisma+0x714>)
 8005b26:	f005 faa2 	bl	800b06e <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8005b2a:	4b36      	ldr	r3, [pc, #216]	@ (8005c04 <checkDemoModCalisma+0x718>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f040 8080 	bne.w	8005c34 <checkDemoModCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005b34:	4b34      	ldr	r3, [pc, #208]	@ (8005c08 <checkDemoModCalisma+0x71c>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d003      	beq.n	8005b44 <checkDemoModCalisma+0x658>
 8005b3c:	4b32      	ldr	r3, [pc, #200]	@ (8005c08 <checkDemoModCalisma+0x71c>)
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d177      	bne.n	8005c34 <checkDemoModCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8005b44:	4b31      	ldr	r3, [pc, #196]	@ (8005c0c <checkDemoModCalisma+0x720>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d073      	beq.n	8005c34 <checkDemoModCalisma+0x748>
 8005b4c:	4b30      	ldr	r3, [pc, #192]	@ (8005c10 <checkDemoModCalisma+0x724>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d06f      	beq.n	8005c34 <checkDemoModCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005b54:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b58:	4829      	ldr	r0, [pc, #164]	@ (8005c00 <checkDemoModCalisma+0x714>)
 8005b5a:	f005 fa71 	bl	800b040 <HAL_GPIO_ReadPin>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d167      	bne.n	8005c34 <checkDemoModCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005b64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b68:	482a      	ldr	r0, [pc, #168]	@ (8005c14 <checkDemoModCalisma+0x728>)
 8005b6a:	f005 fa69 	bl	800b040 <HAL_GPIO_ReadPin>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <checkDemoModCalisma+0x690>
 8005b74:	4b28      	ldr	r3, [pc, #160]	@ (8005c18 <checkDemoModCalisma+0x72c>)
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d15b      	bne.n	8005c34 <checkDemoModCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005b7c:	2140      	movs	r1, #64	@ 0x40
 8005b7e:	4825      	ldr	r0, [pc, #148]	@ (8005c14 <checkDemoModCalisma+0x728>)
 8005b80:	f005 fa5e 	bl	800b040 <HAL_GPIO_ReadPin>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d10f      	bne.n	8005baa <checkDemoModCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005b8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005b8e:	481c      	ldr	r0, [pc, #112]	@ (8005c00 <checkDemoModCalisma+0x714>)
 8005b90:	f005 fa56 	bl	800b040 <HAL_GPIO_ReadPin>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d107      	bne.n	8005baa <checkDemoModCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005b9a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005b9e:	4818      	ldr	r0, [pc, #96]	@ (8005c00 <checkDemoModCalisma+0x714>)
 8005ba0:	f005 fa4e 	bl	800b040 <HAL_GPIO_ReadPin>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d003      	beq.n	8005bb2 <checkDemoModCalisma+0x6c6>
 8005baa:	4b1c      	ldr	r3, [pc, #112]	@ (8005c1c <checkDemoModCalisma+0x730>)
 8005bac:	781b      	ldrb	r3, [r3, #0]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d040      	beq.n	8005c34 <checkDemoModCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 8005bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8005c20 <checkDemoModCalisma+0x734>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	f083 0301 	eor.w	r3, r3, #1
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d039      	beq.n	8005c34 <checkDemoModCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 8005bc0:	4b18      	ldr	r3, [pc, #96]	@ (8005c24 <checkDemoModCalisma+0x738>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	f083 0301 	eor.w	r3, r3, #1
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d032      	beq.n	8005c34 <checkDemoModCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 8005bce:	4b16      	ldr	r3, [pc, #88]	@ (8005c28 <checkDemoModCalisma+0x73c>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	f083 0301 	eor.w	r3, r3, #1
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d02b      	beq.n	8005c34 <checkDemoModCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8005bdc:	4b13      	ldr	r3, [pc, #76]	@ (8005c2c <checkDemoModCalisma+0x740>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	f083 0301 	eor.w	r3, r3, #1
 8005be4:	b2db      	uxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d024      	beq.n	8005c34 <checkDemoModCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 8005bea:	4b11      	ldr	r3, [pc, #68]	@ (8005c30 <checkDemoModCalisma+0x744>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	f083 0301 	eor.w	r3, r3, #1
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d01d      	beq.n	8005c34 <checkDemoModCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8005bf8:	4b08      	ldr	r3, [pc, #32]	@ (8005c1c <checkDemoModCalisma+0x730>)
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	701a      	strb	r2, [r3, #0]
 8005bfe:	e01c      	b.n	8005c3a <checkDemoModCalisma+0x74e>
 8005c00:	40010c00 	.word	0x40010c00
 8005c04:	20001089 	.word	0x20001089
 8005c08:	2000107b 	.word	0x2000107b
 8005c0c:	200010bd 	.word	0x200010bd
 8005c10:	200010be 	.word	0x200010be
 8005c14:	40011000 	.word	0x40011000
 8005c18:	2000107c 	.word	0x2000107c
 8005c1c:	200010a2 	.word	0x200010a2
 8005c20:	200010a1 	.word	0x200010a1
 8005c24:	200010a5 	.word	0x200010a5
 8005c28:	200010a4 	.word	0x200010a4
 8005c2c:	200010a3 	.word	0x200010a3
 8005c30:	200010a7 	.word	0x200010a7
				} else {
					devmotoryukaricalisiyor=0;
 8005c34:	4b64      	ldr	r3, [pc, #400]	@ (8005dc8 <checkDemoModCalisma+0x8dc>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8005c3a:	4b63      	ldr	r3, [pc, #396]	@ (8005dc8 <checkDemoModCalisma+0x8dc>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d007      	beq.n	8005c52 <checkDemoModCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005c42:	2201      	movs	r2, #1
 8005c44:	2120      	movs	r1, #32
 8005c46:	4861      	ldr	r0, [pc, #388]	@ (8005dcc <checkDemoModCalisma+0x8e0>)
 8005c48:	f005 fa11 	bl	800b06e <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8005c4c:	4b60      	ldr	r3, [pc, #384]	@ (8005dd0 <checkDemoModCalisma+0x8e4>)
 8005c4e:	2201      	movs	r2, #1
 8005c50:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005c52:	4b5f      	ldr	r3, [pc, #380]	@ (8005dd0 <checkDemoModCalisma+0x8e4>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d025      	beq.n	8005ca6 <checkDemoModCalisma+0x7ba>
 8005c5a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005c5e:	485d      	ldr	r0, [pc, #372]	@ (8005dd4 <checkDemoModCalisma+0x8e8>)
 8005c60:	f005 f9ee 	bl	800b040 <HAL_GPIO_ReadPin>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d007      	beq.n	8005c7a <checkDemoModCalisma+0x78e>
 8005c6a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c6e:	4857      	ldr	r0, [pc, #348]	@ (8005dcc <checkDemoModCalisma+0x8e0>)
 8005c70:	f005 f9e6 	bl	800b040 <HAL_GPIO_ReadPin>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d115      	bne.n	8005ca6 <checkDemoModCalisma+0x7ba>
 8005c7a:	4b57      	ldr	r3, [pc, #348]	@ (8005dd8 <checkDemoModCalisma+0x8ec>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d011      	beq.n	8005ca6 <checkDemoModCalisma+0x7ba>
 8005c82:	4b56      	ldr	r3, [pc, #344]	@ (8005ddc <checkDemoModCalisma+0x8f0>)
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00d      	beq.n	8005ca6 <checkDemoModCalisma+0x7ba>
 8005c8a:	4b55      	ldr	r3, [pc, #340]	@ (8005de0 <checkDemoModCalisma+0x8f4>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	f083 0301 	eor.w	r3, r3, #1
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d006      	beq.n	8005ca6 <checkDemoModCalisma+0x7ba>
					timer2=millis;
 8005c98:	4b52      	ldr	r3, [pc, #328]	@ (8005de4 <checkDemoModCalisma+0x8f8>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a52      	ldr	r2, [pc, #328]	@ (8005de8 <checkDemoModCalisma+0x8fc>)
 8005c9e:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8005ca0:	4b4f      	ldr	r3, [pc, #316]	@ (8005de0 <checkDemoModCalisma+0x8f4>)
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005ca6:	4b4f      	ldr	r3, [pc, #316]	@ (8005de4 <checkDemoModCalisma+0x8f8>)
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4b4f      	ldr	r3, [pc, #316]	@ (8005de8 <checkDemoModCalisma+0x8fc>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	4a4e      	ldr	r2, [pc, #312]	@ (8005dec <checkDemoModCalisma+0x900>)
 8005cb2:	7812      	ldrb	r2, [r2, #0]
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d303      	bcc.n	8005cc0 <checkDemoModCalisma+0x7d4>
 8005cb8:	4b49      	ldr	r3, [pc, #292]	@ (8005de0 <checkDemoModCalisma+0x8f4>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10d      	bne.n	8005cdc <checkDemoModCalisma+0x7f0>
 8005cc0:	4b45      	ldr	r3, [pc, #276]	@ (8005dd8 <checkDemoModCalisma+0x8ec>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	f083 0301 	eor.w	r3, r3, #1
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d106      	bne.n	8005cdc <checkDemoModCalisma+0x7f0>
 8005cce:	4b43      	ldr	r3, [pc, #268]	@ (8005ddc <checkDemoModCalisma+0x8f0>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	f083 0301 	eor.w	r3, r3, #1
 8005cd6:	b2db      	uxtb	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00a      	beq.n	8005cf2 <checkDemoModCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2120      	movs	r1, #32
 8005ce0:	483a      	ldr	r0, [pc, #232]	@ (8005dcc <checkDemoModCalisma+0x8e0>)
 8005ce2:	f005 f9c4 	bl	800b06e <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8005ce6:	4b3a      	ldr	r3, [pc, #232]	@ (8005dd0 <checkDemoModCalisma+0x8e4>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8005cec:	4b3c      	ldr	r3, [pc, #240]	@ (8005de0 <checkDemoModCalisma+0x8f4>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8005cf2:	4b3f      	ldr	r3, [pc, #252]	@ (8005df0 <checkDemoModCalisma+0x904>)
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f040 8088 	bne.w	8005e0c <checkDemoModCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005cfc:	4b3d      	ldr	r3, [pc, #244]	@ (8005df4 <checkDemoModCalisma+0x908>)
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d003      	beq.n	8005d0c <checkDemoModCalisma+0x820>
 8005d04:	4b3b      	ldr	r3, [pc, #236]	@ (8005df4 <checkDemoModCalisma+0x908>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d17f      	bne.n	8005e0c <checkDemoModCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8005d0c:	4b32      	ldr	r3, [pc, #200]	@ (8005dd8 <checkDemoModCalisma+0x8ec>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d07b      	beq.n	8005e0c <checkDemoModCalisma+0x920>
 8005d14:	4b31      	ldr	r3, [pc, #196]	@ (8005ddc <checkDemoModCalisma+0x8f0>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d077      	beq.n	8005e0c <checkDemoModCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005d1c:	2140      	movs	r1, #64	@ 0x40
 8005d1e:	482b      	ldr	r0, [pc, #172]	@ (8005dcc <checkDemoModCalisma+0x8e0>)
 8005d20:	f005 f98e 	bl	800b040 <HAL_GPIO_ReadPin>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d170      	bne.n	8005e0c <checkDemoModCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005d2a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005d2e:	4827      	ldr	r0, [pc, #156]	@ (8005dcc <checkDemoModCalisma+0x8e0>)
 8005d30:	f005 f986 	bl	800b040 <HAL_GPIO_ReadPin>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <checkDemoModCalisma+0x856>
 8005d3a:	4b2f      	ldr	r3, [pc, #188]	@ (8005df8 <checkDemoModCalisma+0x90c>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d164      	bne.n	8005e0c <checkDemoModCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005d42:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005d46:	4823      	ldr	r0, [pc, #140]	@ (8005dd4 <checkDemoModCalisma+0x8e8>)
 8005d48:	f005 f97a 	bl	800b040 <HAL_GPIO_ReadPin>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d10f      	bne.n	8005d72 <checkDemoModCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005d52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005d56:	481f      	ldr	r0, [pc, #124]	@ (8005dd4 <checkDemoModCalisma+0x8e8>)
 8005d58:	f005 f972 	bl	800b040 <HAL_GPIO_ReadPin>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d107      	bne.n	8005d72 <checkDemoModCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005d62:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005d66:	481b      	ldr	r0, [pc, #108]	@ (8005dd4 <checkDemoModCalisma+0x8e8>)
 8005d68:	f005 f96a 	bl	800b040 <HAL_GPIO_ReadPin>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d003      	beq.n	8005d7a <checkDemoModCalisma+0x88e>
 8005d72:	4b22      	ldr	r3, [pc, #136]	@ (8005dfc <checkDemoModCalisma+0x910>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d048      	beq.n	8005e0c <checkDemoModCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 8005d7a:	4b21      	ldr	r3, [pc, #132]	@ (8005e00 <checkDemoModCalisma+0x914>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	f083 0301 	eor.w	r3, r3, #1
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d041      	beq.n	8005e0c <checkDemoModCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8005d88:	4b1e      	ldr	r3, [pc, #120]	@ (8005e04 <checkDemoModCalisma+0x918>)
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	f083 0301 	eor.w	r3, r3, #1
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d03a      	beq.n	8005e0c <checkDemoModCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8005d96:	4b1c      	ldr	r3, [pc, #112]	@ (8005e08 <checkDemoModCalisma+0x91c>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	f083 0301 	eor.w	r3, r3, #1
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d033      	beq.n	8005e0c <checkDemoModCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8005da4:	4b0a      	ldr	r3, [pc, #40]	@ (8005dd0 <checkDemoModCalisma+0x8e4>)
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	f083 0301 	eor.w	r3, r3, #1
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d02c      	beq.n	8005e0c <checkDemoModCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 8005db2:	4b05      	ldr	r3, [pc, #20]	@ (8005dc8 <checkDemoModCalisma+0x8dc>)
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	f083 0301 	eor.w	r3, r3, #1
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d025      	beq.n	8005e0c <checkDemoModCalisma+0x920>

					devmotorasagicalisiyor=1;
 8005dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8005dfc <checkDemoModCalisma+0x910>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	e024      	b.n	8005e12 <checkDemoModCalisma+0x926>
 8005dc8:	200010a2 	.word	0x200010a2
 8005dcc:	40011000 	.word	0x40011000
 8005dd0:	200010a6 	.word	0x200010a6
 8005dd4:	40010c00 	.word	0x40010c00
 8005dd8:	200010bd 	.word	0x200010bd
 8005ddc:	200010be 	.word	0x200010be
 8005de0:	2000109e 	.word	0x2000109e
 8005de4:	20001044 	.word	0x20001044
 8005de8:	20001050 	.word	0x20001050
 8005dec:	20001082 	.word	0x20001082
 8005df0:	20001089 	.word	0x20001089
 8005df4:	2000107b 	.word	0x2000107b
 8005df8:	2000107d 	.word	0x2000107d
 8005dfc:	200010a3 	.word	0x200010a3
 8005e00:	200010a1 	.word	0x200010a1
 8005e04:	200010a5 	.word	0x200010a5
 8005e08:	200010a4 	.word	0x200010a4
				} else {
					devmotorasagicalisiyor=0;
 8005e0c:	4b96      	ldr	r3, [pc, #600]	@ (8006068 <checkDemoModCalisma+0xb7c>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8005e12:	4b95      	ldr	r3, [pc, #596]	@ (8006068 <checkDemoModCalisma+0xb7c>)
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d007      	beq.n	8005e2a <checkDemoModCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	2110      	movs	r1, #16
 8005e1e:	4893      	ldr	r0, [pc, #588]	@ (800606c <checkDemoModCalisma+0xb80>)
 8005e20:	f005 f925 	bl	800b06e <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8005e24:	4b92      	ldr	r3, [pc, #584]	@ (8006070 <checkDemoModCalisma+0xb84>)
 8005e26:	2201      	movs	r2, #1
 8005e28:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005e2a:	4b91      	ldr	r3, [pc, #580]	@ (8006070 <checkDemoModCalisma+0xb84>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d024      	beq.n	8005e7c <checkDemoModCalisma+0x990>
 8005e32:	2140      	movs	r1, #64	@ 0x40
 8005e34:	488d      	ldr	r0, [pc, #564]	@ (800606c <checkDemoModCalisma+0xb80>)
 8005e36:	f005 f903 	bl	800b040 <HAL_GPIO_ReadPin>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d007      	beq.n	8005e50 <checkDemoModCalisma+0x964>
 8005e40:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005e44:	4889      	ldr	r0, [pc, #548]	@ (800606c <checkDemoModCalisma+0xb80>)
 8005e46:	f005 f8fb 	bl	800b040 <HAL_GPIO_ReadPin>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d115      	bne.n	8005e7c <checkDemoModCalisma+0x990>
 8005e50:	4b88      	ldr	r3, [pc, #544]	@ (8006074 <checkDemoModCalisma+0xb88>)
 8005e52:	781b      	ldrb	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d011      	beq.n	8005e7c <checkDemoModCalisma+0x990>
 8005e58:	4b87      	ldr	r3, [pc, #540]	@ (8006078 <checkDemoModCalisma+0xb8c>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00d      	beq.n	8005e7c <checkDemoModCalisma+0x990>
 8005e60:	4b86      	ldr	r3, [pc, #536]	@ (800607c <checkDemoModCalisma+0xb90>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	f083 0301 	eor.w	r3, r3, #1
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d006      	beq.n	8005e7c <checkDemoModCalisma+0x990>
					timer2=millis;
 8005e6e:	4b84      	ldr	r3, [pc, #528]	@ (8006080 <checkDemoModCalisma+0xb94>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a84      	ldr	r2, [pc, #528]	@ (8006084 <checkDemoModCalisma+0xb98>)
 8005e74:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8005e76:	4b81      	ldr	r3, [pc, #516]	@ (800607c <checkDemoModCalisma+0xb90>)
 8005e78:	2201      	movs	r2, #1
 8005e7a:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005e7c:	4b80      	ldr	r3, [pc, #512]	@ (8006080 <checkDemoModCalisma+0xb94>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	4b80      	ldr	r3, [pc, #512]	@ (8006084 <checkDemoModCalisma+0xb98>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	4a80      	ldr	r2, [pc, #512]	@ (8006088 <checkDemoModCalisma+0xb9c>)
 8005e88:	7812      	ldrb	r2, [r2, #0]
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d303      	bcc.n	8005e96 <checkDemoModCalisma+0x9aa>
 8005e8e:	4b7b      	ldr	r3, [pc, #492]	@ (800607c <checkDemoModCalisma+0xb90>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10d      	bne.n	8005eb2 <checkDemoModCalisma+0x9c6>
 8005e96:	4b77      	ldr	r3, [pc, #476]	@ (8006074 <checkDemoModCalisma+0xb88>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	f083 0301 	eor.w	r3, r3, #1
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d106      	bne.n	8005eb2 <checkDemoModCalisma+0x9c6>
 8005ea4:	4b74      	ldr	r3, [pc, #464]	@ (8006078 <checkDemoModCalisma+0xb8c>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	f083 0301 	eor.w	r3, r3, #1
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <checkDemoModCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	2110      	movs	r1, #16
 8005eb6:	486d      	ldr	r0, [pc, #436]	@ (800606c <checkDemoModCalisma+0xb80>)
 8005eb8:	f005 f8d9 	bl	800b06e <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8005ebc:	4b6c      	ldr	r3, [pc, #432]	@ (8006070 <checkDemoModCalisma+0xb84>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8005ec2:	4b6e      	ldr	r3, [pc, #440]	@ (800607c <checkDemoModCalisma+0xb90>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005ec8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ecc:	486f      	ldr	r0, [pc, #444]	@ (800608c <checkDemoModCalisma+0xba0>)
 8005ece:	f005 f8b7 	bl	800b040 <HAL_GPIO_ReadPin>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d120      	bne.n	8005f1a <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005ed8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005edc:	486b      	ldr	r0, [pc, #428]	@ (800608c <checkDemoModCalisma+0xba0>)
 8005ede:	f005 f8af 	bl	800b040 <HAL_GPIO_ReadPin>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d118      	bne.n	8005f1a <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005ee8:	2104      	movs	r1, #4
 8005eea:	4868      	ldr	r0, [pc, #416]	@ (800608c <checkDemoModCalisma+0xba0>)
 8005eec:	f005 f8a8 	bl	800b040 <HAL_GPIO_ReadPin>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d111      	bne.n	8005f1a <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005ef6:	2102      	movs	r1, #2
 8005ef8:	4864      	ldr	r0, [pc, #400]	@ (800608c <checkDemoModCalisma+0xba0>)
 8005efa:	f005 f8a1 	bl	800b040 <HAL_GPIO_ReadPin>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10a      	bne.n	8005f1a <checkDemoModCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005f04:	2101      	movs	r1, #1
 8005f06:	4861      	ldr	r0, [pc, #388]	@ (800608c <checkDemoModCalisma+0xba0>)
 8005f08:	f005 f89a 	bl	800b040 <HAL_GPIO_ReadPin>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d103      	bne.n	8005f1a <checkDemoModCalisma+0xa2e>
					makineStop=1;
 8005f12:	4b5f      	ldr	r3, [pc, #380]	@ (8006090 <checkDemoModCalisma+0xba4>)
 8005f14:	2201      	movs	r2, #1
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	e002      	b.n	8005f20 <checkDemoModCalisma+0xa34>
				} else {
					makineStop=0;
 8005f1a:	4b5d      	ldr	r3, [pc, #372]	@ (8006090 <checkDemoModCalisma+0xba4>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005f20:	4b5c      	ldr	r3, [pc, #368]	@ (8006094 <checkDemoModCalisma+0xba8>)
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d144      	bne.n	8005fb2 <checkDemoModCalisma+0xac6>
 8005f28:	4b5b      	ldr	r3, [pc, #364]	@ (8006098 <checkDemoModCalisma+0xbac>)
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d003      	beq.n	8005f38 <checkDemoModCalisma+0xa4c>
 8005f30:	4b59      	ldr	r3, [pc, #356]	@ (8006098 <checkDemoModCalisma+0xbac>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2b03      	cmp	r3, #3
 8005f36:	d13c      	bne.n	8005fb2 <checkDemoModCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005f38:	2180      	movs	r1, #128	@ 0x80
 8005f3a:	484c      	ldr	r0, [pc, #304]	@ (800606c <checkDemoModCalisma+0xb80>)
 8005f3c:	f005 f880 	bl	800b040 <HAL_GPIO_ReadPin>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d103      	bne.n	8005f4e <checkDemoModCalisma+0xa62>
 8005f46:	4b55      	ldr	r3, [pc, #340]	@ (800609c <checkDemoModCalisma+0xbb0>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00b      	beq.n	8005f66 <checkDemoModCalisma+0xa7a>
 8005f4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005f52:	484e      	ldr	r0, [pc, #312]	@ (800608c <checkDemoModCalisma+0xba0>)
 8005f54:	f005 f874 	bl	800b040 <HAL_GPIO_ReadPin>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d129      	bne.n	8005fb2 <checkDemoModCalisma+0xac6>
 8005f5e:	4b4f      	ldr	r3, [pc, #316]	@ (800609c <checkDemoModCalisma+0xbb0>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d125      	bne.n	8005fb2 <checkDemoModCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005f66:	2104      	movs	r1, #4
 8005f68:	4840      	ldr	r0, [pc, #256]	@ (800606c <checkDemoModCalisma+0xb80>)
 8005f6a:	f005 f869 	bl	800b040 <HAL_GPIO_ReadPin>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d003      	beq.n	8005f7c <checkDemoModCalisma+0xa90>
 8005f74:	4b4a      	ldr	r3, [pc, #296]	@ (80060a0 <checkDemoModCalisma+0xbb4>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d11a      	bne.n	8005fb2 <checkDemoModCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005f7c:	2102      	movs	r1, #2
 8005f7e:	483b      	ldr	r0, [pc, #236]	@ (800606c <checkDemoModCalisma+0xb80>)
 8005f80:	f005 f85e 	bl	800b040 <HAL_GPIO_ReadPin>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d113      	bne.n	8005fb2 <checkDemoModCalisma+0xac6>
						&&(butonKontrol==0)
 8005f8a:	4b46      	ldr	r3, [pc, #280]	@ (80060a4 <checkDemoModCalisma+0xbb8>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	f083 0301 	eor.w	r3, r3, #1
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00c      	beq.n	8005fb2 <checkDemoModCalisma+0xac6>
						&&(makineStop==1)) {
 8005f98:	4b3d      	ldr	r3, [pc, #244]	@ (8006090 <checkDemoModCalisma+0xba4>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d008      	beq.n	8005fb2 <checkDemoModCalisma+0xac6>

					kapi1prudhome=1;
 8005fa0:	4b41      	ldr	r3, [pc, #260]	@ (80060a8 <checkDemoModCalisma+0xbbc>)
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005fa6:	4b36      	ldr	r3, [pc, #216]	@ (8006080 <checkDemoModCalisma+0xb94>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a40      	ldr	r2, [pc, #256]	@ (80060ac <checkDemoModCalisma+0xbc0>)
 8005fac:	6013      	str	r3, [r2, #0]
					bekle();
 8005fae:	f7fd fd37 	bl	8003a20 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005fb2:	4b33      	ldr	r3, [pc, #204]	@ (8006080 <checkDemoModCalisma+0xb94>)
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	4b3d      	ldr	r3, [pc, #244]	@ (80060ac <checkDemoModCalisma+0xbc0>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	4a3c      	ldr	r2, [pc, #240]	@ (80060b0 <checkDemoModCalisma+0xbc4>)
 8005fbe:	7812      	ldrb	r2, [r2, #0]
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d211      	bcs.n	8005fe8 <checkDemoModCalisma+0xafc>
 8005fc4:	2104      	movs	r1, #4
 8005fc6:	4829      	ldr	r0, [pc, #164]	@ (800606c <checkDemoModCalisma+0xb80>)
 8005fc8:	f005 f83a 	bl	800b040 <HAL_GPIO_ReadPin>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00a      	beq.n	8005fe8 <checkDemoModCalisma+0xafc>
 8005fd2:	4b33      	ldr	r3, [pc, #204]	@ (80060a0 <checkDemoModCalisma+0xbb4>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d006      	beq.n	8005fe8 <checkDemoModCalisma+0xafc>
 8005fda:	4b2d      	ldr	r3, [pc, #180]	@ (8006090 <checkDemoModCalisma+0xba4>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	f083 0301 	eor.w	r3, r3, #1
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <checkDemoModCalisma+0xb02>
					kapi1prudhome=0;
 8005fe8:	4b2f      	ldr	r3, [pc, #188]	@ (80060a8 <checkDemoModCalisma+0xbbc>)
 8005fea:	2200      	movs	r2, #0
 8005fec:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005fee:	4b29      	ldr	r3, [pc, #164]	@ (8006094 <checkDemoModCalisma+0xba8>)
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d160      	bne.n	80060b8 <checkDemoModCalisma+0xbcc>
 8005ff6:	4b28      	ldr	r3, [pc, #160]	@ (8006098 <checkDemoModCalisma+0xbac>)
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d003      	beq.n	8006006 <checkDemoModCalisma+0xb1a>
 8005ffe:	4b26      	ldr	r3, [pc, #152]	@ (8006098 <checkDemoModCalisma+0xbac>)
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	2b03      	cmp	r3, #3
 8006004:	d158      	bne.n	80060b8 <checkDemoModCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006006:	2104      	movs	r1, #4
 8006008:	4818      	ldr	r0, [pc, #96]	@ (800606c <checkDemoModCalisma+0xb80>)
 800600a:	f005 f819 	bl	800b040 <HAL_GPIO_ReadPin>
 800600e:	4603      	mov	r3, r0
 8006010:	2b01      	cmp	r3, #1
 8006012:	d003      	beq.n	800601c <checkDemoModCalisma+0xb30>
 8006014:	4b22      	ldr	r3, [pc, #136]	@ (80060a0 <checkDemoModCalisma+0xbb4>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d14d      	bne.n	80060b8 <checkDemoModCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800601c:	2102      	movs	r1, #2
 800601e:	4813      	ldr	r0, [pc, #76]	@ (800606c <checkDemoModCalisma+0xb80>)
 8006020:	f005 f80e 	bl	800b040 <HAL_GPIO_ReadPin>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d146      	bne.n	80060b8 <checkDemoModCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 800602a:	2180      	movs	r1, #128	@ 0x80
 800602c:	480f      	ldr	r0, [pc, #60]	@ (800606c <checkDemoModCalisma+0xb80>)
 800602e:	f005 f807 	bl	800b040 <HAL_GPIO_ReadPin>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d103      	bne.n	8006040 <checkDemoModCalisma+0xb54>
 8006038:	4b18      	ldr	r3, [pc, #96]	@ (800609c <checkDemoModCalisma+0xbb0>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00b      	beq.n	8006058 <checkDemoModCalisma+0xb6c>
 8006040:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006044:	4811      	ldr	r0, [pc, #68]	@ (800608c <checkDemoModCalisma+0xba0>)
 8006046:	f004 fffb 	bl	800b040 <HAL_GPIO_ReadPin>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d133      	bne.n	80060b8 <checkDemoModCalisma+0xbcc>
 8006050:	4b12      	ldr	r3, [pc, #72]	@ (800609c <checkDemoModCalisma+0xbb0>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d12f      	bne.n	80060b8 <checkDemoModCalisma+0xbcc>
						&&(makineStop==1)) {
 8006058:	4b0d      	ldr	r3, [pc, #52]	@ (8006090 <checkDemoModCalisma+0xba4>)
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d02b      	beq.n	80060b8 <checkDemoModCalisma+0xbcc>

					kapi1butonkontrol=1;
 8006060:	4b14      	ldr	r3, [pc, #80]	@ (80060b4 <checkDemoModCalisma+0xbc8>)
 8006062:	2201      	movs	r2, #1
 8006064:	701a      	strb	r2, [r3, #0]
 8006066:	e02a      	b.n	80060be <checkDemoModCalisma+0xbd2>
 8006068:	200010a3 	.word	0x200010a3
 800606c:	40011000 	.word	0x40011000
 8006070:	200010a7 	.word	0x200010a7
 8006074:	200010bd 	.word	0x200010bd
 8006078:	200010be 	.word	0x200010be
 800607c:	2000109f 	.word	0x2000109f
 8006080:	20001044 	.word	0x20001044
 8006084:	20001050 	.word	0x20001050
 8006088:	20001082 	.word	0x20001082
 800608c:	40010c00 	.word	0x40010c00
 8006090:	200010ad 	.word	0x200010ad
 8006094:	20001075 	.word	0x20001075
 8006098:	20001074 	.word	0x20001074
 800609c:	20001078 	.word	0x20001078
 80060a0:	20001072 	.word	0x20001072
 80060a4:	2000109b 	.word	0x2000109b
 80060a8:	200010ae 	.word	0x200010ae
 80060ac:	20001048 	.word	0x20001048
 80060b0:	20001085 	.word	0x20001085
 80060b4:	200010af 	.word	0x200010af
				} else {
					kapi1butonkontrol=0;
 80060b8:	4b8b      	ldr	r3, [pc, #556]	@ (80062e8 <checkDemoModCalisma+0xdfc>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80060be:	4b8b      	ldr	r3, [pc, #556]	@ (80062ec <checkDemoModCalisma+0xe00>)
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d121      	bne.n	800610a <checkDemoModCalisma+0xc1e>
 80060c6:	4b8a      	ldr	r3, [pc, #552]	@ (80062f0 <checkDemoModCalisma+0xe04>)
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d003      	beq.n	80060d6 <checkDemoModCalisma+0xbea>
 80060ce:	4b88      	ldr	r3, [pc, #544]	@ (80062f0 <checkDemoModCalisma+0xe04>)
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	2b03      	cmp	r3, #3
 80060d4:	d119      	bne.n	800610a <checkDemoModCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80060d6:	2104      	movs	r1, #4
 80060d8:	4886      	ldr	r0, [pc, #536]	@ (80062f4 <checkDemoModCalisma+0xe08>)
 80060da:	f004 ffb1 	bl	800b040 <HAL_GPIO_ReadPin>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d003      	beq.n	80060ec <checkDemoModCalisma+0xc00>
 80060e4:	4b84      	ldr	r3, [pc, #528]	@ (80062f8 <checkDemoModCalisma+0xe0c>)
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10e      	bne.n	800610a <checkDemoModCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80060ec:	2102      	movs	r1, #2
 80060ee:	4881      	ldr	r0, [pc, #516]	@ (80062f4 <checkDemoModCalisma+0xe08>)
 80060f0:	f004 ffa6 	bl	800b040 <HAL_GPIO_ReadPin>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d107      	bne.n	800610a <checkDemoModCalisma+0xc1e>
						&&(makineStop==1)) {
 80060fa:	4b80      	ldr	r3, [pc, #512]	@ (80062fc <checkDemoModCalisma+0xe10>)
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <checkDemoModCalisma+0xc1e>

					kapi1pizzato=1;
 8006102:	4b7f      	ldr	r3, [pc, #508]	@ (8006300 <checkDemoModCalisma+0xe14>)
 8006104:	2201      	movs	r2, #1
 8006106:	701a      	strb	r2, [r3, #0]
 8006108:	e002      	b.n	8006110 <checkDemoModCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 800610a:	4b7d      	ldr	r3, [pc, #500]	@ (8006300 <checkDemoModCalisma+0xe14>)
 800610c:	2200      	movs	r2, #0
 800610e:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8006110:	4b75      	ldr	r3, [pc, #468]	@ (80062e8 <checkDemoModCalisma+0xdfc>)
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d107      	bne.n	8006128 <checkDemoModCalisma+0xc3c>
 8006118:	4b79      	ldr	r3, [pc, #484]	@ (8006300 <checkDemoModCalisma+0xe14>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d103      	bne.n	8006128 <checkDemoModCalisma+0xc3c>
 8006120:	4b78      	ldr	r3, [pc, #480]	@ (8006304 <checkDemoModCalisma+0xe18>)
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d005      	beq.n	8006134 <checkDemoModCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006128:	2201      	movs	r2, #1
 800612a:	2180      	movs	r1, #128	@ 0x80
 800612c:	4876      	ldr	r0, [pc, #472]	@ (8006308 <checkDemoModCalisma+0xe1c>)
 800612e:	f004 ff9e 	bl	800b06e <HAL_GPIO_WritePin>
 8006132:	e004      	b.n	800613e <checkDemoModCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006134:	2200      	movs	r2, #0
 8006136:	2180      	movs	r1, #128	@ 0x80
 8006138:	4873      	ldr	r0, [pc, #460]	@ (8006308 <checkDemoModCalisma+0xe1c>)
 800613a:	f004 ff98 	bl	800b06e <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800613e:	4b73      	ldr	r3, [pc, #460]	@ (800630c <checkDemoModCalisma+0xe20>)
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d141      	bne.n	80061ca <checkDemoModCalisma+0xcde>
 8006146:	4b6a      	ldr	r3, [pc, #424]	@ (80062f0 <checkDemoModCalisma+0xe04>)
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d003      	beq.n	8006156 <checkDemoModCalisma+0xc6a>
 800614e:	4b68      	ldr	r3, [pc, #416]	@ (80062f0 <checkDemoModCalisma+0xe04>)
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	2b03      	cmp	r3, #3
 8006154:	d139      	bne.n	80061ca <checkDemoModCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006156:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800615a:	4866      	ldr	r0, [pc, #408]	@ (80062f4 <checkDemoModCalisma+0xe08>)
 800615c:	f004 ff70 	bl	800b040 <HAL_GPIO_ReadPin>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d103      	bne.n	800616e <checkDemoModCalisma+0xc82>
 8006166:	4b6a      	ldr	r3, [pc, #424]	@ (8006310 <checkDemoModCalisma+0xe24>)
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00b      	beq.n	8006186 <checkDemoModCalisma+0xc9a>
 800616e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006172:	4868      	ldr	r0, [pc, #416]	@ (8006314 <checkDemoModCalisma+0xe28>)
 8006174:	f004 ff64 	bl	800b040 <HAL_GPIO_ReadPin>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d125      	bne.n	80061ca <checkDemoModCalisma+0xcde>
 800617e:	4b64      	ldr	r3, [pc, #400]	@ (8006310 <checkDemoModCalisma+0xe24>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d121      	bne.n	80061ca <checkDemoModCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006186:	2102      	movs	r1, #2
 8006188:	485a      	ldr	r0, [pc, #360]	@ (80062f4 <checkDemoModCalisma+0xe08>)
 800618a:	f004 ff59 	bl	800b040 <HAL_GPIO_ReadPin>
 800618e:	4603      	mov	r3, r0
 8006190:	2b01      	cmp	r3, #1
 8006192:	d11a      	bne.n	80061ca <checkDemoModCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006194:	2104      	movs	r1, #4
 8006196:	4857      	ldr	r0, [pc, #348]	@ (80062f4 <checkDemoModCalisma+0xe08>)
 8006198:	f004 ff52 	bl	800b040 <HAL_GPIO_ReadPin>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d113      	bne.n	80061ca <checkDemoModCalisma+0xcde>
						&&(makineStop==1)
 80061a2:	4b56      	ldr	r3, [pc, #344]	@ (80062fc <checkDemoModCalisma+0xe10>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00f      	beq.n	80061ca <checkDemoModCalisma+0xcde>
						&&(butonKontrol==0)) {
 80061aa:	4b5b      	ldr	r3, [pc, #364]	@ (8006318 <checkDemoModCalisma+0xe2c>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	f083 0301 	eor.w	r3, r3, #1
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d008      	beq.n	80061ca <checkDemoModCalisma+0xcde>

					kapi2prudhome=1;
 80061b8:	4b58      	ldr	r3, [pc, #352]	@ (800631c <checkDemoModCalisma+0xe30>)
 80061ba:	2201      	movs	r2, #1
 80061bc:	701a      	strb	r2, [r3, #0]
					timer = millis;
 80061be:	4b58      	ldr	r3, [pc, #352]	@ (8006320 <checkDemoModCalisma+0xe34>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a58      	ldr	r2, [pc, #352]	@ (8006324 <checkDemoModCalisma+0xe38>)
 80061c4:	6013      	str	r3, [r2, #0]
					bekle();
 80061c6:	f7fd fc2b 	bl	8003a20 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80061ca:	4b55      	ldr	r3, [pc, #340]	@ (8006320 <checkDemoModCalisma+0xe34>)
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	4b55      	ldr	r3, [pc, #340]	@ (8006324 <checkDemoModCalisma+0xe38>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	4a54      	ldr	r2, [pc, #336]	@ (8006328 <checkDemoModCalisma+0xe3c>)
 80061d6:	7812      	ldrb	r2, [r2, #0]
 80061d8:	4293      	cmp	r3, r2
 80061da:	d20d      	bcs.n	80061f8 <checkDemoModCalisma+0xd0c>
 80061dc:	2102      	movs	r1, #2
 80061de:	4845      	ldr	r0, [pc, #276]	@ (80062f4 <checkDemoModCalisma+0xe08>)
 80061e0:	f004 ff2e 	bl	800b040 <HAL_GPIO_ReadPin>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d006      	beq.n	80061f8 <checkDemoModCalisma+0xd0c>
 80061ea:	4b44      	ldr	r3, [pc, #272]	@ (80062fc <checkDemoModCalisma+0xe10>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	f083 0301 	eor.w	r3, r3, #1
 80061f2:	b2db      	uxtb	r3, r3
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d002      	beq.n	80061fe <checkDemoModCalisma+0xd12>
					kapi2prudhome=0;
 80061f8:	4b48      	ldr	r3, [pc, #288]	@ (800631c <checkDemoModCalisma+0xe30>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80061fe:	4b43      	ldr	r3, [pc, #268]	@ (800630c <checkDemoModCalisma+0xe20>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	2b01      	cmp	r3, #1
 8006204:	d135      	bne.n	8006272 <checkDemoModCalisma+0xd86>
 8006206:	4b3a      	ldr	r3, [pc, #232]	@ (80062f0 <checkDemoModCalisma+0xe04>)
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d003      	beq.n	8006216 <checkDemoModCalisma+0xd2a>
 800620e:	4b38      	ldr	r3, [pc, #224]	@ (80062f0 <checkDemoModCalisma+0xe04>)
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	2b03      	cmp	r3, #3
 8006214:	d12d      	bne.n	8006272 <checkDemoModCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006216:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800621a:	4836      	ldr	r0, [pc, #216]	@ (80062f4 <checkDemoModCalisma+0xe08>)
 800621c:	f004 ff10 	bl	800b040 <HAL_GPIO_ReadPin>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d103      	bne.n	800622e <checkDemoModCalisma+0xd42>
 8006226:	4b3a      	ldr	r3, [pc, #232]	@ (8006310 <checkDemoModCalisma+0xe24>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00b      	beq.n	8006246 <checkDemoModCalisma+0xd5a>
 800622e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006232:	4838      	ldr	r0, [pc, #224]	@ (8006314 <checkDemoModCalisma+0xe28>)
 8006234:	f004 ff04 	bl	800b040 <HAL_GPIO_ReadPin>
 8006238:	4603      	mov	r3, r0
 800623a:	2b00      	cmp	r3, #0
 800623c:	d119      	bne.n	8006272 <checkDemoModCalisma+0xd86>
 800623e:	4b34      	ldr	r3, [pc, #208]	@ (8006310 <checkDemoModCalisma+0xe24>)
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d115      	bne.n	8006272 <checkDemoModCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006246:	2102      	movs	r1, #2
 8006248:	482a      	ldr	r0, [pc, #168]	@ (80062f4 <checkDemoModCalisma+0xe08>)
 800624a:	f004 fef9 	bl	800b040 <HAL_GPIO_ReadPin>
 800624e:	4603      	mov	r3, r0
 8006250:	2b01      	cmp	r3, #1
 8006252:	d10e      	bne.n	8006272 <checkDemoModCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006254:	2104      	movs	r1, #4
 8006256:	4827      	ldr	r0, [pc, #156]	@ (80062f4 <checkDemoModCalisma+0xe08>)
 8006258:	f004 fef2 	bl	800b040 <HAL_GPIO_ReadPin>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d107      	bne.n	8006272 <checkDemoModCalisma+0xd86>
						&&(makineStop==1)) {
 8006262:	4b26      	ldr	r3, [pc, #152]	@ (80062fc <checkDemoModCalisma+0xe10>)
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d003      	beq.n	8006272 <checkDemoModCalisma+0xd86>

					kapi2butonkontrol=1;
 800626a:	4b30      	ldr	r3, [pc, #192]	@ (800632c <checkDemoModCalisma+0xe40>)
 800626c:	2201      	movs	r2, #1
 800626e:	701a      	strb	r2, [r3, #0]
 8006270:	e002      	b.n	8006278 <checkDemoModCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 8006272:	4b2e      	ldr	r3, [pc, #184]	@ (800632c <checkDemoModCalisma+0xe40>)
 8006274:	2200      	movs	r2, #0
 8006276:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006278:	4b24      	ldr	r3, [pc, #144]	@ (800630c <checkDemoModCalisma+0xe20>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b02      	cmp	r3, #2
 800627e:	d11d      	bne.n	80062bc <checkDemoModCalisma+0xdd0>
 8006280:	4b1b      	ldr	r3, [pc, #108]	@ (80062f0 <checkDemoModCalisma+0xe04>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b01      	cmp	r3, #1
 8006286:	d003      	beq.n	8006290 <checkDemoModCalisma+0xda4>
 8006288:	4b19      	ldr	r3, [pc, #100]	@ (80062f0 <checkDemoModCalisma+0xe04>)
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b03      	cmp	r3, #3
 800628e:	d115      	bne.n	80062bc <checkDemoModCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006290:	2102      	movs	r1, #2
 8006292:	4818      	ldr	r0, [pc, #96]	@ (80062f4 <checkDemoModCalisma+0xe08>)
 8006294:	f004 fed4 	bl	800b040 <HAL_GPIO_ReadPin>
 8006298:	4603      	mov	r3, r0
 800629a:	2b01      	cmp	r3, #1
 800629c:	d10e      	bne.n	80062bc <checkDemoModCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800629e:	2104      	movs	r1, #4
 80062a0:	4814      	ldr	r0, [pc, #80]	@ (80062f4 <checkDemoModCalisma+0xe08>)
 80062a2:	f004 fecd 	bl	800b040 <HAL_GPIO_ReadPin>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d107      	bne.n	80062bc <checkDemoModCalisma+0xdd0>
						&&(makineStop==1)) {
 80062ac:	4b13      	ldr	r3, [pc, #76]	@ (80062fc <checkDemoModCalisma+0xe10>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <checkDemoModCalisma+0xdd0>

					kapi2pizzato=1;
 80062b4:	4b1e      	ldr	r3, [pc, #120]	@ (8006330 <checkDemoModCalisma+0xe44>)
 80062b6:	2201      	movs	r2, #1
 80062b8:	701a      	strb	r2, [r3, #0]
 80062ba:	e002      	b.n	80062c2 <checkDemoModCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 80062bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006330 <checkDemoModCalisma+0xe44>)
 80062be:	2200      	movs	r2, #0
 80062c0:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80062c2:	4b1a      	ldr	r3, [pc, #104]	@ (800632c <checkDemoModCalisma+0xe40>)
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d107      	bne.n	80062da <checkDemoModCalisma+0xdee>
 80062ca:	4b19      	ldr	r3, [pc, #100]	@ (8006330 <checkDemoModCalisma+0xe44>)
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d103      	bne.n	80062da <checkDemoModCalisma+0xdee>
 80062d2:	4b12      	ldr	r3, [pc, #72]	@ (800631c <checkDemoModCalisma+0xe30>)
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d02c      	beq.n	8006334 <checkDemoModCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80062da:	2201      	movs	r2, #1
 80062dc:	2140      	movs	r1, #64	@ 0x40
 80062de:	480a      	ldr	r0, [pc, #40]	@ (8006308 <checkDemoModCalisma+0xe1c>)
 80062e0:	f004 fec5 	bl	800b06e <HAL_GPIO_WritePin>
 80062e4:	e02b      	b.n	800633e <checkDemoModCalisma+0xe52>
 80062e6:	bf00      	nop
 80062e8:	200010af 	.word	0x200010af
 80062ec:	20001075 	.word	0x20001075
 80062f0:	20001074 	.word	0x20001074
 80062f4:	40011000 	.word	0x40011000
 80062f8:	20001072 	.word	0x20001072
 80062fc:	200010ad 	.word	0x200010ad
 8006300:	200010b0 	.word	0x200010b0
 8006304:	200010ae 	.word	0x200010ae
 8006308:	40010800 	.word	0x40010800
 800630c:	20001076 	.word	0x20001076
 8006310:	20001078 	.word	0x20001078
 8006314:	40010c00 	.word	0x40010c00
 8006318:	2000109b 	.word	0x2000109b
 800631c:	200010b1 	.word	0x200010b1
 8006320:	20001044 	.word	0x20001044
 8006324:	20001048 	.word	0x20001048
 8006328:	20001086 	.word	0x20001086
 800632c:	200010b2 	.word	0x200010b2
 8006330:	200010b3 	.word	0x200010b3
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006334:	2200      	movs	r2, #0
 8006336:	2140      	movs	r1, #64	@ 0x40
 8006338:	4835      	ldr	r0, [pc, #212]	@ (8006410 <checkDemoModCalisma+0xf24>)
 800633a:	f004 fe98 	bl	800b06e <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 800633e:	4b35      	ldr	r3, [pc, #212]	@ (8006414 <checkDemoModCalisma+0xf28>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <checkDemoModCalisma+0xe62>
 8006346:	4b33      	ldr	r3, [pc, #204]	@ (8006414 <checkDemoModCalisma+0xf28>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b02      	cmp	r3, #2
 800634c:	d115      	bne.n	800637a <checkDemoModCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800634e:	2104      	movs	r1, #4
 8006350:	4831      	ldr	r0, [pc, #196]	@ (8006418 <checkDemoModCalisma+0xf2c>)
 8006352:	f004 fe75 	bl	800b040 <HAL_GPIO_ReadPin>
 8006356:	4603      	mov	r3, r0
 8006358:	2b01      	cmp	r3, #1
 800635a:	d003      	beq.n	8006364 <checkDemoModCalisma+0xe78>
 800635c:	4b2f      	ldr	r3, [pc, #188]	@ (800641c <checkDemoModCalisma+0xf30>)
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d10a      	bne.n	800637a <checkDemoModCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8006364:	2102      	movs	r1, #2
 8006366:	482c      	ldr	r0, [pc, #176]	@ (8006418 <checkDemoModCalisma+0xf2c>)
 8006368:	f004 fe6a 	bl	800b040 <HAL_GPIO_ReadPin>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d103      	bne.n	800637a <checkDemoModCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 8006372:	4b2b      	ldr	r3, [pc, #172]	@ (8006420 <checkDemoModCalisma+0xf34>)
 8006374:	2201      	movs	r2, #1
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	e002      	b.n	8006380 <checkDemoModCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 800637a:	4b29      	ldr	r3, [pc, #164]	@ (8006420 <checkDemoModCalisma+0xf34>)
 800637c:	2200      	movs	r2, #0
 800637e:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8006380:	4b24      	ldr	r3, [pc, #144]	@ (8006414 <checkDemoModCalisma+0xf28>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d003      	beq.n	8006390 <checkDemoModCalisma+0xea4>
 8006388:	4b22      	ldr	r3, [pc, #136]	@ (8006414 <checkDemoModCalisma+0xf28>)
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	2b02      	cmp	r3, #2
 800638e:	d111      	bne.n	80063b4 <checkDemoModCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006390:	2102      	movs	r1, #2
 8006392:	4821      	ldr	r0, [pc, #132]	@ (8006418 <checkDemoModCalisma+0xf2c>)
 8006394:	f004 fe54 	bl	800b040 <HAL_GPIO_ReadPin>
 8006398:	4603      	mov	r3, r0
 800639a:	2b01      	cmp	r3, #1
 800639c:	d10a      	bne.n	80063b4 <checkDemoModCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 800639e:	2104      	movs	r1, #4
 80063a0:	481d      	ldr	r0, [pc, #116]	@ (8006418 <checkDemoModCalisma+0xf2c>)
 80063a2:	f004 fe4d 	bl	800b040 <HAL_GPIO_ReadPin>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d103      	bne.n	80063b4 <checkDemoModCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 80063ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006424 <checkDemoModCalisma+0xf38>)
 80063ae:	2201      	movs	r2, #1
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	e002      	b.n	80063ba <checkDemoModCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 80063b4:	4b1b      	ldr	r3, [pc, #108]	@ (8006424 <checkDemoModCalisma+0xf38>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 80063ba:	4b19      	ldr	r3, [pc, #100]	@ (8006420 <checkDemoModCalisma+0xf34>)
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00f      	beq.n	80063e2 <checkDemoModCalisma+0xef6>
						&& kapiAcTipi==1
 80063c2:	4b19      	ldr	r3, [pc, #100]	@ (8006428 <checkDemoModCalisma+0xf3c>)
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d10b      	bne.n	80063e2 <checkDemoModCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80063ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80063ce:	4817      	ldr	r0, [pc, #92]	@ (800642c <checkDemoModCalisma+0xf40>)
 80063d0:	f004 fe36 	bl	800b040 <HAL_GPIO_ReadPin>
 80063d4:	4603      	mov	r3, r0
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d103      	bne.n	80063e2 <checkDemoModCalisma+0xef6>

					kapiactablaesp1=1;
 80063da:	4b15      	ldr	r3, [pc, #84]	@ (8006430 <checkDemoModCalisma+0xf44>)
 80063dc:	2201      	movs	r2, #1
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	e002      	b.n	80063e8 <checkDemoModCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 80063e2:	4b13      	ldr	r3, [pc, #76]	@ (8006430 <checkDemoModCalisma+0xf44>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 80063e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006424 <checkDemoModCalisma+0xf38>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d023      	beq.n	8006438 <checkDemoModCalisma+0xf4c>
						&& kapiAcTipi==1
 80063f0:	4b0d      	ldr	r3, [pc, #52]	@ (8006428 <checkDemoModCalisma+0xf3c>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d11f      	bne.n	8006438 <checkDemoModCalisma+0xf4c>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80063f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80063fc:	480b      	ldr	r0, [pc, #44]	@ (800642c <checkDemoModCalisma+0xf40>)
 80063fe:	f004 fe1f 	bl	800b040 <HAL_GPIO_ReadPin>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d117      	bne.n	8006438 <checkDemoModCalisma+0xf4c>

					kapiactablaesp2=1;
 8006408:	4b0a      	ldr	r3, [pc, #40]	@ (8006434 <checkDemoModCalisma+0xf48>)
 800640a:	2201      	movs	r2, #1
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	e016      	b.n	800643e <checkDemoModCalisma+0xf52>
 8006410:	40010800 	.word	0x40010800
 8006414:	20001079 	.word	0x20001079
 8006418:	40011000 	.word	0x40011000
 800641c:	20001072 	.word	0x20001072
 8006420:	200010b7 	.word	0x200010b7
 8006424:	200010b8 	.word	0x200010b8
 8006428:	20001078 	.word	0x20001078
 800642c:	40010c00 	.word	0x40010c00
 8006430:	200010c7 	.word	0x200010c7
 8006434:	200010c8 	.word	0x200010c8
				} else {
					kapiactablaesp2=0;
 8006438:	4b7e      	ldr	r3, [pc, #504]	@ (8006634 <checkDemoModCalisma+0x1148>)
 800643a:	2200      	movs	r2, #0
 800643c:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800643e:	4b7e      	ldr	r3, [pc, #504]	@ (8006638 <checkDemoModCalisma+0x114c>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d154      	bne.n	80064f0 <checkDemoModCalisma+0x1004>
 8006446:	4b7d      	ldr	r3, [pc, #500]	@ (800663c <checkDemoModCalisma+0x1150>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	2b02      	cmp	r3, #2
 800644c:	d003      	beq.n	8006456 <checkDemoModCalisma+0xf6a>
 800644e:	4b7b      	ldr	r3, [pc, #492]	@ (800663c <checkDemoModCalisma+0x1150>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b03      	cmp	r3, #3
 8006454:	d14c      	bne.n	80064f0 <checkDemoModCalisma+0x1004>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006456:	4b7a      	ldr	r3, [pc, #488]	@ (8006640 <checkDemoModCalisma+0x1154>)
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d103      	bne.n	8006466 <checkDemoModCalisma+0xf7a>
 800645e:	4b79      	ldr	r3, [pc, #484]	@ (8006644 <checkDemoModCalisma+0x1158>)
 8006460:	781b      	ldrb	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d044      	beq.n	80064f0 <checkDemoModCalisma+0x1004>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8006466:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800646a:	4877      	ldr	r0, [pc, #476]	@ (8006648 <checkDemoModCalisma+0x115c>)
 800646c:	f004 fde8 	bl	800b040 <HAL_GPIO_ReadPin>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d01c      	beq.n	80064b0 <checkDemoModCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8006476:	2180      	movs	r1, #128	@ 0x80
 8006478:	4873      	ldr	r0, [pc, #460]	@ (8006648 <checkDemoModCalisma+0x115c>)
 800647a:	f004 fde1 	bl	800b040 <HAL_GPIO_ReadPin>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d106      	bne.n	8006492 <checkDemoModCalisma+0xfa6>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8006484:	2104      	movs	r1, #4
 8006486:	4870      	ldr	r0, [pc, #448]	@ (8006648 <checkDemoModCalisma+0x115c>)
 8006488:	f004 fdda 	bl	800b040 <HAL_GPIO_ReadPin>
 800648c:	4603      	mov	r3, r0
 800648e:	2b01      	cmp	r3, #1
 8006490:	d00e      	beq.n	80064b0 <checkDemoModCalisma+0xfc4>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8006492:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006496:	486c      	ldr	r0, [pc, #432]	@ (8006648 <checkDemoModCalisma+0x115c>)
 8006498:	f004 fdd2 	bl	800b040 <HAL_GPIO_ReadPin>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10a      	bne.n	80064b8 <checkDemoModCalisma+0xfcc>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 80064a2:	2102      	movs	r1, #2
 80064a4:	4868      	ldr	r0, [pc, #416]	@ (8006648 <checkDemoModCalisma+0x115c>)
 80064a6:	f004 fdcb 	bl	800b040 <HAL_GPIO_ReadPin>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d103      	bne.n	80064b8 <checkDemoModCalisma+0xfcc>
						&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80064b0:	4b66      	ldr	r3, [pc, #408]	@ (800664c <checkDemoModCalisma+0x1160>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d007      	beq.n	80064c8 <checkDemoModCalisma+0xfdc>
 80064b8:	4b65      	ldr	r3, [pc, #404]	@ (8006650 <checkDemoModCalisma+0x1164>)
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d103      	bne.n	80064c8 <checkDemoModCalisma+0xfdc>
 80064c0:	4b5c      	ldr	r3, [pc, #368]	@ (8006634 <checkDemoModCalisma+0x1148>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d013      	beq.n	80064f0 <checkDemoModCalisma+0x1004>
						&&(makineStop==1)
 80064c8:	4b62      	ldr	r3, [pc, #392]	@ (8006654 <checkDemoModCalisma+0x1168>)
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d00f      	beq.n	80064f0 <checkDemoModCalisma+0x1004>
						&&(butonKontrol==0)) {
 80064d0:	4b61      	ldr	r3, [pc, #388]	@ (8006658 <checkDemoModCalisma+0x116c>)
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	f083 0301 	eor.w	r3, r3, #1
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d008      	beq.n	80064f0 <checkDemoModCalisma+0x1004>

					kapiTablaprudhome=1;
 80064de:	4b5f      	ldr	r3, [pc, #380]	@ (800665c <checkDemoModCalisma+0x1170>)
 80064e0:	2201      	movs	r2, #1
 80064e2:	701a      	strb	r2, [r3, #0]
					timer = millis;
 80064e4:	4b5e      	ldr	r3, [pc, #376]	@ (8006660 <checkDemoModCalisma+0x1174>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a5e      	ldr	r2, [pc, #376]	@ (8006664 <checkDemoModCalisma+0x1178>)
 80064ea:	6013      	str	r3, [r2, #0]
					bekle();
 80064ec:	f7fd fa98 	bl	8003a20 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 80064f0:	4b5b      	ldr	r3, [pc, #364]	@ (8006660 <checkDemoModCalisma+0x1174>)
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	4b5b      	ldr	r3, [pc, #364]	@ (8006664 <checkDemoModCalisma+0x1178>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	4a5b      	ldr	r2, [pc, #364]	@ (8006668 <checkDemoModCalisma+0x117c>)
 80064fc:	7812      	ldrb	r2, [r2, #0]
 80064fe:	4293      	cmp	r3, r2
 8006500:	d214      	bcs.n	800652c <checkDemoModCalisma+0x1040>
 8006502:	4b4f      	ldr	r3, [pc, #316]	@ (8006640 <checkDemoModCalisma+0x1154>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	f083 0301 	eor.w	r3, r3, #1
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d006      	beq.n	800651e <checkDemoModCalisma+0x1032>
 8006510:	4b4c      	ldr	r3, [pc, #304]	@ (8006644 <checkDemoModCalisma+0x1158>)
 8006512:	781b      	ldrb	r3, [r3, #0]
 8006514:	f083 0301 	eor.w	r3, r3, #1
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d106      	bne.n	800652c <checkDemoModCalisma+0x1040>
 800651e:	4b4d      	ldr	r3, [pc, #308]	@ (8006654 <checkDemoModCalisma+0x1168>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	f083 0301 	eor.w	r3, r3, #1
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	d002      	beq.n	8006532 <checkDemoModCalisma+0x1046>
					kapiTablaprudhome=0;
 800652c:	4b4b      	ldr	r3, [pc, #300]	@ (800665c <checkDemoModCalisma+0x1170>)
 800652e:	2200      	movs	r2, #0
 8006530:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8006532:	4b41      	ldr	r3, [pc, #260]	@ (8006638 <checkDemoModCalisma+0x114c>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d148      	bne.n	80065cc <checkDemoModCalisma+0x10e0>
 800653a:	4b40      	ldr	r3, [pc, #256]	@ (800663c <checkDemoModCalisma+0x1150>)
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	2b02      	cmp	r3, #2
 8006540:	d003      	beq.n	800654a <checkDemoModCalisma+0x105e>
 8006542:	4b3e      	ldr	r3, [pc, #248]	@ (800663c <checkDemoModCalisma+0x1150>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	2b03      	cmp	r3, #3
 8006548:	d140      	bne.n	80065cc <checkDemoModCalisma+0x10e0>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800654a:	4b3d      	ldr	r3, [pc, #244]	@ (8006640 <checkDemoModCalisma+0x1154>)
 800654c:	781b      	ldrb	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d103      	bne.n	800655a <checkDemoModCalisma+0x106e>
 8006552:	4b3c      	ldr	r3, [pc, #240]	@ (8006644 <checkDemoModCalisma+0x1158>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d038      	beq.n	80065cc <checkDemoModCalisma+0x10e0>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 800655a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800655e:	483a      	ldr	r0, [pc, #232]	@ (8006648 <checkDemoModCalisma+0x115c>)
 8006560:	f004 fd6e 	bl	800b040 <HAL_GPIO_ReadPin>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d01c      	beq.n	80065a4 <checkDemoModCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 800656a:	2180      	movs	r1, #128	@ 0x80
 800656c:	4836      	ldr	r0, [pc, #216]	@ (8006648 <checkDemoModCalisma+0x115c>)
 800656e:	f004 fd67 	bl	800b040 <HAL_GPIO_ReadPin>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d106      	bne.n	8006586 <checkDemoModCalisma+0x109a>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8006578:	2104      	movs	r1, #4
 800657a:	4833      	ldr	r0, [pc, #204]	@ (8006648 <checkDemoModCalisma+0x115c>)
 800657c:	f004 fd60 	bl	800b040 <HAL_GPIO_ReadPin>
 8006580:	4603      	mov	r3, r0
 8006582:	2b01      	cmp	r3, #1
 8006584:	d00e      	beq.n	80065a4 <checkDemoModCalisma+0x10b8>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8006586:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800658a:	482f      	ldr	r0, [pc, #188]	@ (8006648 <checkDemoModCalisma+0x115c>)
 800658c:	f004 fd58 	bl	800b040 <HAL_GPIO_ReadPin>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10a      	bne.n	80065ac <checkDemoModCalisma+0x10c0>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8006596:	2102      	movs	r1, #2
 8006598:	482b      	ldr	r0, [pc, #172]	@ (8006648 <checkDemoModCalisma+0x115c>)
 800659a:	f004 fd51 	bl	800b040 <HAL_GPIO_ReadPin>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d103      	bne.n	80065ac <checkDemoModCalisma+0x10c0>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80065a4:	4b29      	ldr	r3, [pc, #164]	@ (800664c <checkDemoModCalisma+0x1160>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d007      	beq.n	80065bc <checkDemoModCalisma+0x10d0>
 80065ac:	4b28      	ldr	r3, [pc, #160]	@ (8006650 <checkDemoModCalisma+0x1164>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d103      	bne.n	80065bc <checkDemoModCalisma+0x10d0>
 80065b4:	4b1f      	ldr	r3, [pc, #124]	@ (8006634 <checkDemoModCalisma+0x1148>)
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d007      	beq.n	80065cc <checkDemoModCalisma+0x10e0>
						&&(makineStop==1)) {
 80065bc:	4b25      	ldr	r3, [pc, #148]	@ (8006654 <checkDemoModCalisma+0x1168>)
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <checkDemoModCalisma+0x10e0>

					kapiTablabutonkontrol=1;
 80065c4:	4b29      	ldr	r3, [pc, #164]	@ (800666c <checkDemoModCalisma+0x1180>)
 80065c6:	2201      	movs	r2, #1
 80065c8:	701a      	strb	r2, [r3, #0]
 80065ca:	e002      	b.n	80065d2 <checkDemoModCalisma+0x10e6>
				} else {
					kapiTablabutonkontrol=0;
 80065cc:	4b27      	ldr	r3, [pc, #156]	@ (800666c <checkDemoModCalisma+0x1180>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80065d2:	4b19      	ldr	r3, [pc, #100]	@ (8006638 <checkDemoModCalisma+0x114c>)
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b02      	cmp	r3, #2
 80065d8:	d117      	bne.n	800660a <checkDemoModCalisma+0x111e>
 80065da:	4b18      	ldr	r3, [pc, #96]	@ (800663c <checkDemoModCalisma+0x1150>)
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d003      	beq.n	80065ea <checkDemoModCalisma+0x10fe>
 80065e2:	4b16      	ldr	r3, [pc, #88]	@ (800663c <checkDemoModCalisma+0x1150>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d10f      	bne.n	800660a <checkDemoModCalisma+0x111e>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80065ea:	4b15      	ldr	r3, [pc, #84]	@ (8006640 <checkDemoModCalisma+0x1154>)
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d103      	bne.n	80065fa <checkDemoModCalisma+0x110e>
 80065f2:	4b14      	ldr	r3, [pc, #80]	@ (8006644 <checkDemoModCalisma+0x1158>)
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d007      	beq.n	800660a <checkDemoModCalisma+0x111e>
						&&(makineStop==1)) {
 80065fa:	4b16      	ldr	r3, [pc, #88]	@ (8006654 <checkDemoModCalisma+0x1168>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d003      	beq.n	800660a <checkDemoModCalisma+0x111e>

					kapiTablapizzato=1;
 8006602:	4b1b      	ldr	r3, [pc, #108]	@ (8006670 <checkDemoModCalisma+0x1184>)
 8006604:	2201      	movs	r2, #1
 8006606:	701a      	strb	r2, [r3, #0]
 8006608:	e002      	b.n	8006610 <checkDemoModCalisma+0x1124>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 800660a:	4b19      	ldr	r3, [pc, #100]	@ (8006670 <checkDemoModCalisma+0x1184>)
 800660c:	2200      	movs	r2, #0
 800660e:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8006610:	4b16      	ldr	r3, [pc, #88]	@ (800666c <checkDemoModCalisma+0x1180>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d107      	bne.n	8006628 <checkDemoModCalisma+0x113c>
 8006618:	4b10      	ldr	r3, [pc, #64]	@ (800665c <checkDemoModCalisma+0x1170>)
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d103      	bne.n	8006628 <checkDemoModCalisma+0x113c>
 8006620:	4b13      	ldr	r3, [pc, #76]	@ (8006670 <checkDemoModCalisma+0x1184>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d027      	beq.n	8006678 <checkDemoModCalisma+0x118c>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006628:	2201      	movs	r2, #1
 800662a:	2120      	movs	r1, #32
 800662c:	4811      	ldr	r0, [pc, #68]	@ (8006674 <checkDemoModCalisma+0x1188>)
 800662e:	f004 fd1e 	bl	800b06e <HAL_GPIO_WritePin>
 8006632:	e026      	b.n	8006682 <checkDemoModCalisma+0x1196>
 8006634:	200010c8 	.word	0x200010c8
 8006638:	20001077 	.word	0x20001077
 800663c:	20001074 	.word	0x20001074
 8006640:	200010b7 	.word	0x200010b7
 8006644:	200010b8 	.word	0x200010b8
 8006648:	40011000 	.word	0x40011000
 800664c:	20001078 	.word	0x20001078
 8006650:	200010c7 	.word	0x200010c7
 8006654:	200010ad 	.word	0x200010ad
 8006658:	2000109b 	.word	0x2000109b
 800665c:	200010b4 	.word	0x200010b4
 8006660:	20001044 	.word	0x20001044
 8006664:	20001048 	.word	0x20001048
 8006668:	20001087 	.word	0x20001087
 800666c:	200010b5 	.word	0x200010b5
 8006670:	200010b6 	.word	0x200010b6
 8006674:	40010800 	.word	0x40010800
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006678:	2200      	movs	r2, #0
 800667a:	2120      	movs	r1, #32
 800667c:	4887      	ldr	r0, [pc, #540]	@ (800689c <checkDemoModCalisma+0x13b0>)
 800667e:	f004 fcf6 	bl	800b06e <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8006682:	4b87      	ldr	r3, [pc, #540]	@ (80068a0 <checkDemoModCalisma+0x13b4>)
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00e      	beq.n	80066a8 <checkDemoModCalisma+0x11bc>
 800668a:	2102      	movs	r1, #2
 800668c:	4885      	ldr	r0, [pc, #532]	@ (80068a4 <checkDemoModCalisma+0x13b8>)
 800668e:	f004 fcd7 	bl	800b040 <HAL_GPIO_ReadPin>
 8006692:	4603      	mov	r3, r0
 8006694:	2b01      	cmp	r3, #1
 8006696:	d107      	bne.n	80066a8 <checkDemoModCalisma+0x11bc>
 8006698:	4b83      	ldr	r3, [pc, #524]	@ (80068a8 <checkDemoModCalisma+0x13bc>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d103      	bne.n	80066a8 <checkDemoModCalisma+0x11bc>
 80066a0:	4b82      	ldr	r3, [pc, #520]	@ (80068ac <checkDemoModCalisma+0x13c0>)
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d112      	bne.n	80066ce <checkDemoModCalisma+0x11e2>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80066a8:	4b81      	ldr	r3, [pc, #516]	@ (80068b0 <checkDemoModCalisma+0x13c4>)
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d032      	beq.n	8006716 <checkDemoModCalisma+0x122a>
 80066b0:	2104      	movs	r1, #4
 80066b2:	487c      	ldr	r0, [pc, #496]	@ (80068a4 <checkDemoModCalisma+0x13b8>)
 80066b4:	f004 fcc4 	bl	800b040 <HAL_GPIO_ReadPin>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d12b      	bne.n	8006716 <checkDemoModCalisma+0x122a>
 80066be:	4b7a      	ldr	r3, [pc, #488]	@ (80068a8 <checkDemoModCalisma+0x13bc>)
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d027      	beq.n	8006716 <checkDemoModCalisma+0x122a>
 80066c6:	4b79      	ldr	r3, [pc, #484]	@ (80068ac <checkDemoModCalisma+0x13c0>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d023      	beq.n	8006716 <checkDemoModCalisma+0x122a>


					calismaSayisi++;
 80066ce:	4b79      	ldr	r3, [pc, #484]	@ (80068b4 <checkDemoModCalisma+0x13c8>)
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	3301      	adds	r3, #1
 80066d4:	b2da      	uxtb	r2, r3
 80066d6:	4b77      	ldr	r3, [pc, #476]	@ (80068b4 <checkDemoModCalisma+0x13c8>)
 80066d8:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 80066da:	4b76      	ldr	r3, [pc, #472]	@ (80068b4 <checkDemoModCalisma+0x13c8>)
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	2bff      	cmp	r3, #255	@ 0xff
 80066e0:	d108      	bne.n	80066f4 <checkDemoModCalisma+0x1208>
						calismaSayisi = 0;
 80066e2:	4b74      	ldr	r3, [pc, #464]	@ (80068b4 <checkDemoModCalisma+0x13c8>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 80066e8:	4b73      	ldr	r3, [pc, #460]	@ (80068b8 <checkDemoModCalisma+0x13cc>)
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	3301      	adds	r3, #1
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	4b71      	ldr	r3, [pc, #452]	@ (80068b8 <checkDemoModCalisma+0x13cc>)
 80066f2:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 80066f4:	4b6f      	ldr	r3, [pc, #444]	@ (80068b4 <checkDemoModCalisma+0x13c8>)
 80066f6:	781a      	ldrb	r2, [r3, #0]
 80066f8:	4b70      	ldr	r3, [pc, #448]	@ (80068bc <checkDemoModCalisma+0x13d0>)
 80066fa:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 80066fc:	4b6e      	ldr	r3, [pc, #440]	@ (80068b8 <checkDemoModCalisma+0x13cc>)
 80066fe:	781a      	ldrb	r2, [r3, #0]
 8006700:	4b6e      	ldr	r3, [pc, #440]	@ (80068bc <checkDemoModCalisma+0x13d0>)
 8006702:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 8006704:	4b6e      	ldr	r3, [pc, #440]	@ (80068c0 <checkDemoModCalisma+0x13d4>)
 8006706:	2201      	movs	r2, #1
 8006708:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 800670a:	4b65      	ldr	r3, [pc, #404]	@ (80068a0 <checkDemoModCalisma+0x13b4>)
 800670c:	2200      	movs	r2, #0
 800670e:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 8006710:	4b67      	ldr	r3, [pc, #412]	@ (80068b0 <checkDemoModCalisma+0x13c4>)
 8006712:	2200      	movs	r2, #0
 8006714:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8006716:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800671a:	486a      	ldr	r0, [pc, #424]	@ (80068c4 <checkDemoModCalisma+0x13d8>)
 800671c:	f004 fc90 	bl	800b040 <HAL_GPIO_ReadPin>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d016      	beq.n	8006754 <checkDemoModCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8006726:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800672a:	4866      	ldr	r0, [pc, #408]	@ (80068c4 <checkDemoModCalisma+0x13d8>)
 800672c:	f004 fc88 	bl	800b040 <HAL_GPIO_ReadPin>
 8006730:	4603      	mov	r3, r0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00e      	beq.n	8006754 <checkDemoModCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006736:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800673a:	4862      	ldr	r0, [pc, #392]	@ (80068c4 <checkDemoModCalisma+0x13d8>)
 800673c:	f004 fc80 	bl	800b040 <HAL_GPIO_ReadPin>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d006      	beq.n	8006754 <checkDemoModCalisma+0x1268>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006746:	2140      	movs	r1, #64	@ 0x40
 8006748:	4856      	ldr	r0, [pc, #344]	@ (80068a4 <checkDemoModCalisma+0x13b8>)
 800674a:	f004 fc79 	bl	800b040 <HAL_GPIO_ReadPin>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d103      	bne.n	800675c <checkDemoModCalisma+0x1270>

					startBasili=1;
 8006754:	4b5c      	ldr	r3, [pc, #368]	@ (80068c8 <checkDemoModCalisma+0x13dc>)
 8006756:	2201      	movs	r2, #1
 8006758:	701a      	strb	r2, [r3, #0]
 800675a:	e002      	b.n	8006762 <checkDemoModCalisma+0x1276>
				} else {
					startBasili=0;
 800675c:	4b5a      	ldr	r3, [pc, #360]	@ (80068c8 <checkDemoModCalisma+0x13dc>)
 800675e:	2200      	movs	r2, #0
 8006760:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006762:	4b59      	ldr	r3, [pc, #356]	@ (80068c8 <checkDemoModCalisma+0x13dc>)
 8006764:	781b      	ldrb	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d014      	beq.n	8006794 <checkDemoModCalisma+0x12a8>
 800676a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800676e:	4855      	ldr	r0, [pc, #340]	@ (80068c4 <checkDemoModCalisma+0x13d8>)
 8006770:	f004 fc66 	bl	800b040 <HAL_GPIO_ReadPin>
 8006774:	4603      	mov	r3, r0
 8006776:	2b01      	cmp	r3, #1
 8006778:	d10c      	bne.n	8006794 <checkDemoModCalisma+0x12a8>

					hataVar=1;
 800677a:	4b54      	ldr	r3, [pc, #336]	@ (80068cc <checkDemoModCalisma+0x13e0>)
 800677c:	2201      	movs	r2, #1
 800677e:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 8006780:	2001      	movs	r0, #1
 8006782:	f7fa f8db 	bl	800093c <hataKoduLcdGoster>
					hata2EEPROM(1);
 8006786:	2001      	movs	r0, #1
 8006788:	f7fa f880 	bl	800088c <hata2EEPROM>
					acilstophatasi=1;
 800678c:	4b50      	ldr	r3, [pc, #320]	@ (80068d0 <checkDemoModCalisma+0x13e4>)
 800678e:	2201      	movs	r2, #1
 8006790:	701a      	strb	r2, [r3, #0]
 8006792:	e018      	b.n	80067c6 <checkDemoModCalisma+0x12da>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006794:	4b4e      	ldr	r3, [pc, #312]	@ (80068d0 <checkDemoModCalisma+0x13e4>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d014      	beq.n	80067c6 <checkDemoModCalisma+0x12da>
 800679c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80067a0:	4848      	ldr	r0, [pc, #288]	@ (80068c4 <checkDemoModCalisma+0x13d8>)
 80067a2:	f004 fc4d 	bl	800b040 <HAL_GPIO_ReadPin>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10c      	bne.n	80067c6 <checkDemoModCalisma+0x12da>
 80067ac:	4b46      	ldr	r3, [pc, #280]	@ (80068c8 <checkDemoModCalisma+0x13dc>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	f083 0301 	eor.w	r3, r3, #1
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d005      	beq.n	80067c6 <checkDemoModCalisma+0x12da>
					acilstophatasi=0;
 80067ba:	4b45      	ldr	r3, [pc, #276]	@ (80068d0 <checkDemoModCalisma+0x13e4>)
 80067bc:	2200      	movs	r2, #0
 80067be:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 80067c0:	2001      	movs	r0, #1
 80067c2:	f7fd f8c3 	bl	800394c <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 80067c6:	4b43      	ldr	r3, [pc, #268]	@ (80068d4 <checkDemoModCalisma+0x13e8>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	f083 0301 	eor.w	r3, r3, #1
 80067ce:	b2db      	uxtb	r3, r3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d023      	beq.n	800681c <checkDemoModCalisma+0x1330>
 80067d4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80067d8:	483a      	ldr	r0, [pc, #232]	@ (80068c4 <checkDemoModCalisma+0x13d8>)
 80067da:	f004 fc31 	bl	800b040 <HAL_GPIO_ReadPin>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d003      	beq.n	80067ec <checkDemoModCalisma+0x1300>
 80067e4:	4b3c      	ldr	r3, [pc, #240]	@ (80068d8 <checkDemoModCalisma+0x13ec>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d017      	beq.n	800681c <checkDemoModCalisma+0x1330>
 80067ec:	4b3b      	ldr	r3, [pc, #236]	@ (80068dc <checkDemoModCalisma+0x13f0>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d113      	bne.n	800681c <checkDemoModCalisma+0x1330>
 80067f4:	4b3a      	ldr	r3, [pc, #232]	@ (80068e0 <checkDemoModCalisma+0x13f4>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	f083 0301 	eor.w	r3, r3, #1
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00c      	beq.n	800681c <checkDemoModCalisma+0x1330>
					hataVar=1;
 8006802:	4b32      	ldr	r3, [pc, #200]	@ (80068cc <checkDemoModCalisma+0x13e0>)
 8006804:	2201      	movs	r2, #1
 8006806:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 8006808:	2002      	movs	r0, #2
 800680a:	f7fa f897 	bl	800093c <hataKoduLcdGoster>
					hata2EEPROM(2);
 800680e:	2002      	movs	r0, #2
 8006810:	f7fa f83c 	bl	800088c <hata2EEPROM>
					emniyetCercevesihatasi=1;
 8006814:	4b32      	ldr	r3, [pc, #200]	@ (80068e0 <checkDemoModCalisma+0x13f4>)
 8006816:	2201      	movs	r2, #1
 8006818:	701a      	strb	r2, [r3, #0]
 800681a:	e017      	b.n	800684c <checkDemoModCalisma+0x1360>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 800681c:	4b30      	ldr	r3, [pc, #192]	@ (80068e0 <checkDemoModCalisma+0x13f4>)
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d013      	beq.n	800684c <checkDemoModCalisma+0x1360>
 8006824:	4b2b      	ldr	r3, [pc, #172]	@ (80068d4 <checkDemoModCalisma+0x13e8>)
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00f      	beq.n	800684c <checkDemoModCalisma+0x1360>
 800682c:	4b2d      	ldr	r3, [pc, #180]	@ (80068e4 <checkDemoModCalisma+0x13f8>)
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	f083 0301 	eor.w	r3, r3, #1
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b00      	cmp	r3, #0
 8006838:	d008      	beq.n	800684c <checkDemoModCalisma+0x1360>
					emniyetCercevesihatasi=0;
 800683a:	4b29      	ldr	r3, [pc, #164]	@ (80068e0 <checkDemoModCalisma+0x13f4>)
 800683c:	2200      	movs	r2, #0
 800683e:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 8006840:	4b25      	ldr	r3, [pc, #148]	@ (80068d8 <checkDemoModCalisma+0x13ec>)
 8006842:	2200      	movs	r2, #0
 8006844:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 8006846:	2002      	movs	r0, #2
 8006848:	f7fd f880 	bl	800394c <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 800684c:	4b26      	ldr	r3, [pc, #152]	@ (80068e8 <checkDemoModCalisma+0x13fc>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d151      	bne.n	80068f8 <checkDemoModCalisma+0x140c>
 8006854:	4b25      	ldr	r3, [pc, #148]	@ (80068ec <checkDemoModCalisma+0x1400>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b01      	cmp	r3, #1
 800685a:	d14d      	bne.n	80068f8 <checkDemoModCalisma+0x140c>
 800685c:	4b24      	ldr	r3, [pc, #144]	@ (80068f0 <checkDemoModCalisma+0x1404>)
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d049      	beq.n	80068f8 <checkDemoModCalisma+0x140c>
 8006864:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006868:	480e      	ldr	r0, [pc, #56]	@ (80068a4 <checkDemoModCalisma+0x13b8>)
 800686a:	f004 fbe9 	bl	800b040 <HAL_GPIO_ReadPin>
 800686e:	4603      	mov	r3, r0
 8006870:	2b01      	cmp	r3, #1
 8006872:	d141      	bne.n	80068f8 <checkDemoModCalisma+0x140c>
 8006874:	4b1f      	ldr	r3, [pc, #124]	@ (80068f4 <checkDemoModCalisma+0x1408>)
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	f083 0301 	eor.w	r3, r3, #1
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b00      	cmp	r3, #0
 8006880:	d03a      	beq.n	80068f8 <checkDemoModCalisma+0x140c>
					hataVar=1;
 8006882:	4b12      	ldr	r3, [pc, #72]	@ (80068cc <checkDemoModCalisma+0x13e0>)
 8006884:	2201      	movs	r2, #1
 8006886:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 8006888:	2003      	movs	r0, #3
 800688a:	f7fa f857 	bl	800093c <hataKoduLcdGoster>
					hata2EEPROM(3);
 800688e:	2003      	movs	r0, #3
 8006890:	f7f9 fffc 	bl	800088c <hata2EEPROM>
					basinchatasi=1;
 8006894:	4b17      	ldr	r3, [pc, #92]	@ (80068f4 <checkDemoModCalisma+0x1408>)
 8006896:	2201      	movs	r2, #1
 8006898:	701a      	strb	r2, [r3, #0]
 800689a:	e043      	b.n	8006924 <checkDemoModCalisma+0x1438>
 800689c:	40010800 	.word	0x40010800
 80068a0:	200010ab 	.word	0x200010ab
 80068a4:	40011000 	.word	0x40011000
 80068a8:	20001072 	.word	0x20001072
 80068ac:	200010ad 	.word	0x200010ad
 80068b0:	200010ac 	.word	0x200010ac
 80068b4:	20001064 	.word	0x20001064
 80068b8:	20001066 	.word	0x20001066
 80068bc:	20000f9c 	.word	0x20000f9c
 80068c0:	20001098 	.word	0x20001098
 80068c4:	40010c00 	.word	0x40010c00
 80068c8:	200010b9 	.word	0x200010b9
 80068cc:	200010c0 	.word	0x200010c0
 80068d0:	200010bb 	.word	0x200010bb
 80068d4:	200010c2 	.word	0x200010c2
 80068d8:	200010cc 	.word	0x200010cc
 80068dc:	20001070 	.word	0x20001070
 80068e0:	200010bc 	.word	0x200010bc
 80068e4:	200010a4 	.word	0x200010a4
 80068e8:	2000106f 	.word	0x2000106f
 80068ec:	20001073 	.word	0x20001073
 80068f0:	200010bf 	.word	0x200010bf
 80068f4:	200010c9 	.word	0x200010c9
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80068f8:	4b85      	ldr	r3, [pc, #532]	@ (8006b10 <checkDemoModCalisma+0x1624>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d011      	beq.n	8006924 <checkDemoModCalisma+0x1438>
 8006900:	4b84      	ldr	r3, [pc, #528]	@ (8006b14 <checkDemoModCalisma+0x1628>)
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2b01      	cmp	r3, #1
 8006906:	d10d      	bne.n	8006924 <checkDemoModCalisma+0x1438>
 8006908:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800690c:	4882      	ldr	r0, [pc, #520]	@ (8006b18 <checkDemoModCalisma+0x162c>)
 800690e:	f004 fb97 	bl	800b040 <HAL_GPIO_ReadPin>
 8006912:	4603      	mov	r3, r0
 8006914:	2b01      	cmp	r3, #1
 8006916:	d105      	bne.n	8006924 <checkDemoModCalisma+0x1438>
					basinchatasi=0;
 8006918:	4b7d      	ldr	r3, [pc, #500]	@ (8006b10 <checkDemoModCalisma+0x1624>)
 800691a:	2200      	movs	r2, #0
 800691c:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 800691e:	2003      	movs	r0, #3
 8006920:	f7fd f814 	bl	800394c <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8006924:	4b7d      	ldr	r3, [pc, #500]	@ (8006b1c <checkDemoModCalisma+0x1630>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d103      	bne.n	8006934 <checkDemoModCalisma+0x1448>
 800692c:	4b7c      	ldr	r3, [pc, #496]	@ (8006b20 <checkDemoModCalisma+0x1634>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d023      	beq.n	800697c <checkDemoModCalisma+0x1490>
 8006934:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006938:	487a      	ldr	r0, [pc, #488]	@ (8006b24 <checkDemoModCalisma+0x1638>)
 800693a:	f004 fb81 	bl	800b040 <HAL_GPIO_ReadPin>
 800693e:	4603      	mov	r3, r0
 8006940:	2b01      	cmp	r3, #1
 8006942:	d11b      	bne.n	800697c <checkDemoModCalisma+0x1490>
 8006944:	4b78      	ldr	r3, [pc, #480]	@ (8006b28 <checkDemoModCalisma+0x163c>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d003      	beq.n	8006954 <checkDemoModCalisma+0x1468>
 800694c:	4b76      	ldr	r3, [pc, #472]	@ (8006b28 <checkDemoModCalisma+0x163c>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	2b03      	cmp	r3, #3
 8006952:	d113      	bne.n	800697c <checkDemoModCalisma+0x1490>
 8006954:	4b75      	ldr	r3, [pc, #468]	@ (8006b2c <checkDemoModCalisma+0x1640>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	f083 0301 	eor.w	r3, r3, #1
 800695c:	b2db      	uxtb	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00c      	beq.n	800697c <checkDemoModCalisma+0x1490>
					hataVar=1;
 8006962:	4b73      	ldr	r3, [pc, #460]	@ (8006b30 <checkDemoModCalisma+0x1644>)
 8006964:	2201      	movs	r2, #1
 8006966:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8006968:	2004      	movs	r0, #4
 800696a:	f7f9 ffe7 	bl	800093c <hataKoduLcdGoster>
					hata2EEPROM(4);
 800696e:	2004      	movs	r0, #4
 8006970:	f7f9 ff8c 	bl	800088c <hata2EEPROM>
					katkapisivicihatasi=1;
 8006974:	4b6d      	ldr	r3, [pc, #436]	@ (8006b2c <checkDemoModCalisma+0x1640>)
 8006976:	2201      	movs	r2, #1
 8006978:	701a      	strb	r2, [r3, #0]
 800697a:	e01f      	b.n	80069bc <checkDemoModCalisma+0x14d0>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800697c:	4b6b      	ldr	r3, [pc, #428]	@ (8006b2c <checkDemoModCalisma+0x1640>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d01b      	beq.n	80069bc <checkDemoModCalisma+0x14d0>
 8006984:	4b6b      	ldr	r3, [pc, #428]	@ (8006b34 <checkDemoModCalisma+0x1648>)
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d017      	beq.n	80069bc <checkDemoModCalisma+0x14d0>
 800698c:	4b63      	ldr	r3, [pc, #396]	@ (8006b1c <checkDemoModCalisma+0x1630>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	f083 0301 	eor.w	r3, r3, #1
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d010      	beq.n	80069bc <checkDemoModCalisma+0x14d0>
 800699a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800699e:	4861      	ldr	r0, [pc, #388]	@ (8006b24 <checkDemoModCalisma+0x1638>)
 80069a0:	f004 fb4e 	bl	800b040 <HAL_GPIO_ReadPin>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d108      	bne.n	80069bc <checkDemoModCalisma+0x14d0>

					katkapisivicihatasi=0;
 80069aa:	4b60      	ldr	r3, [pc, #384]	@ (8006b2c <checkDemoModCalisma+0x1640>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 80069b0:	4b5b      	ldr	r3, [pc, #364]	@ (8006b20 <checkDemoModCalisma+0x1634>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 80069b6:	2004      	movs	r0, #4
 80069b8:	f7fc ffc8 	bl	800394c <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 80069bc:	4b57      	ldr	r3, [pc, #348]	@ (8006b1c <checkDemoModCalisma+0x1630>)
 80069be:	781b      	ldrb	r3, [r3, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d103      	bne.n	80069cc <checkDemoModCalisma+0x14e0>
 80069c4:	4b5c      	ldr	r3, [pc, #368]	@ (8006b38 <checkDemoModCalisma+0x164c>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d023      	beq.n	8006a14 <checkDemoModCalisma+0x1528>
 80069cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80069d0:	4854      	ldr	r0, [pc, #336]	@ (8006b24 <checkDemoModCalisma+0x1638>)
 80069d2:	f004 fb35 	bl	800b040 <HAL_GPIO_ReadPin>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d11b      	bne.n	8006a14 <checkDemoModCalisma+0x1528>
 80069dc:	4b52      	ldr	r3, [pc, #328]	@ (8006b28 <checkDemoModCalisma+0x163c>)
 80069de:	781b      	ldrb	r3, [r3, #0]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d003      	beq.n	80069ec <checkDemoModCalisma+0x1500>
 80069e4:	4b50      	ldr	r3, [pc, #320]	@ (8006b28 <checkDemoModCalisma+0x163c>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b03      	cmp	r3, #3
 80069ea:	d113      	bne.n	8006a14 <checkDemoModCalisma+0x1528>
 80069ec:	4b53      	ldr	r3, [pc, #332]	@ (8006b3c <checkDemoModCalisma+0x1650>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	f083 0301 	eor.w	r3, r3, #1
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00c      	beq.n	8006a14 <checkDemoModCalisma+0x1528>

					hataVar=1;
 80069fa:	4b4d      	ldr	r3, [pc, #308]	@ (8006b30 <checkDemoModCalisma+0x1644>)
 80069fc:	2201      	movs	r2, #1
 80069fe:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 8006a00:	2005      	movs	r0, #5
 8006a02:	f7f9 ff9b 	bl	800093c <hataKoduLcdGoster>
					hata2EEPROM(5);
 8006a06:	2005      	movs	r0, #5
 8006a08:	f7f9 ff40 	bl	800088c <hata2EEPROM>
					tablakapisivicihatasi=1;
 8006a0c:	4b4b      	ldr	r3, [pc, #300]	@ (8006b3c <checkDemoModCalisma+0x1650>)
 8006a0e:	2201      	movs	r2, #1
 8006a10:	701a      	strb	r2, [r3, #0]
 8006a12:	e023      	b.n	8006a5c <checkDemoModCalisma+0x1570>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8006a14:	4b49      	ldr	r3, [pc, #292]	@ (8006b3c <checkDemoModCalisma+0x1650>)
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d01f      	beq.n	8006a5c <checkDemoModCalisma+0x1570>
 8006a1c:	4b45      	ldr	r3, [pc, #276]	@ (8006b34 <checkDemoModCalisma+0x1648>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d01b      	beq.n	8006a5c <checkDemoModCalisma+0x1570>
 8006a24:	4b3d      	ldr	r3, [pc, #244]	@ (8006b1c <checkDemoModCalisma+0x1630>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	f083 0301 	eor.w	r3, r3, #1
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d014      	beq.n	8006a5c <checkDemoModCalisma+0x1570>
 8006a32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006a36:	483b      	ldr	r0, [pc, #236]	@ (8006b24 <checkDemoModCalisma+0x1638>)
 8006a38:	f004 fb02 	bl	800b040 <HAL_GPIO_ReadPin>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10c      	bne.n	8006a5c <checkDemoModCalisma+0x1570>
 8006a42:	4b3c      	ldr	r3, [pc, #240]	@ (8006b34 <checkDemoModCalisma+0x1648>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d008      	beq.n	8006a5c <checkDemoModCalisma+0x1570>
					tablakapisivicihatasi=0;
 8006a4a:	4b3c      	ldr	r3, [pc, #240]	@ (8006b3c <checkDemoModCalisma+0x1650>)
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8006a50:	4b39      	ldr	r3, [pc, #228]	@ (8006b38 <checkDemoModCalisma+0x164c>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 8006a56:	2005      	movs	r0, #5
 8006a58:	f7fc ff78 	bl	800394c <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8006a5c:	4b38      	ldr	r3, [pc, #224]	@ (8006b40 <checkDemoModCalisma+0x1654>)
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d107      	bne.n	8006a74 <checkDemoModCalisma+0x1588>
 8006a64:	4b37      	ldr	r3, [pc, #220]	@ (8006b44 <checkDemoModCalisma+0x1658>)
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d103      	bne.n	8006a74 <checkDemoModCalisma+0x1588>
 8006a6c:	4b36      	ldr	r3, [pc, #216]	@ (8006b48 <checkDemoModCalisma+0x165c>)
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d01b      	beq.n	8006aac <checkDemoModCalisma+0x15c0>
 8006a74:	4b35      	ldr	r3, [pc, #212]	@ (8006b4c <checkDemoModCalisma+0x1660>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	f083 0301 	eor.w	r3, r3, #1
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d014      	beq.n	8006aac <checkDemoModCalisma+0x15c0>
				    if(millis-timer4>=makineCalismaTmr) {
 8006a82:	4b33      	ldr	r3, [pc, #204]	@ (8006b50 <checkDemoModCalisma+0x1664>)
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	4b33      	ldr	r3, [pc, #204]	@ (8006b54 <checkDemoModCalisma+0x1668>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	4a32      	ldr	r2, [pc, #200]	@ (8006b58 <checkDemoModCalisma+0x166c>)
 8006a8e:	7812      	ldrb	r2, [r2, #0]
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d30b      	bcc.n	8006aac <checkDemoModCalisma+0x15c0>
					  	hataVar=1;
 8006a94:	4b26      	ldr	r3, [pc, #152]	@ (8006b30 <checkDemoModCalisma+0x1644>)
 8006a96:	2201      	movs	r2, #1
 8006a98:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 8006a9a:	2006      	movs	r0, #6
 8006a9c:	f7f9 ff4e 	bl	800093c <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8006aa0:	2006      	movs	r0, #6
 8006aa2:	f7f9 fef3 	bl	800088c <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8006aa6:	4b29      	ldr	r3, [pc, #164]	@ (8006b4c <checkDemoModCalisma+0x1660>)
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8006aac:	4b27      	ldr	r3, [pc, #156]	@ (8006b4c <checkDemoModCalisma+0x1660>)
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d013      	beq.n	8006adc <checkDemoModCalisma+0x15f0>
 8006ab4:	2108      	movs	r1, #8
 8006ab6:	481b      	ldr	r0, [pc, #108]	@ (8006b24 <checkDemoModCalisma+0x1638>)
 8006ab8:	f004 fac2 	bl	800b040 <HAL_GPIO_ReadPin>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00c      	beq.n	8006adc <checkDemoModCalisma+0x15f0>
 8006ac2:	4b16      	ldr	r3, [pc, #88]	@ (8006b1c <checkDemoModCalisma+0x1630>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	f083 0301 	eor.w	r3, r3, #1
 8006aca:	b2db      	uxtb	r3, r3
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d005      	beq.n	8006adc <checkDemoModCalisma+0x15f0>
					maksimumcalismahatasi=0;
 8006ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8006b4c <checkDemoModCalisma+0x1660>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8006ad6:	2006      	movs	r0, #6
 8006ad8:	f7fc ff38 	bl	800394c <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8006adc:	4b1f      	ldr	r3, [pc, #124]	@ (8006b5c <checkDemoModCalisma+0x1670>)
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d10b      	bne.n	8006afc <checkDemoModCalisma+0x1610>
 8006ae4:	4b17      	ldr	r3, [pc, #92]	@ (8006b44 <checkDemoModCalisma+0x1658>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d107      	bne.n	8006afc <checkDemoModCalisma+0x1610>
 8006aec:	4b1c      	ldr	r3, [pc, #112]	@ (8006b60 <checkDemoModCalisma+0x1674>)
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d103      	bne.n	8006afc <checkDemoModCalisma+0x1610>
 8006af4:	4b14      	ldr	r3, [pc, #80]	@ (8006b48 <checkDemoModCalisma+0x165c>)
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d035      	beq.n	8006b68 <checkDemoModCalisma+0x167c>
					makineCalisiyor=0;
 8006afc:	4b19      	ldr	r3, [pc, #100]	@ (8006b64 <checkDemoModCalisma+0x1678>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 8006b02:	4b07      	ldr	r3, [pc, #28]	@ (8006b20 <checkDemoModCalisma+0x1634>)
 8006b04:	2201      	movs	r2, #1
 8006b06:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8006b08:	4b0b      	ldr	r3, [pc, #44]	@ (8006b38 <checkDemoModCalisma+0x164c>)
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	701a      	strb	r2, [r3, #0]
 8006b0e:	e032      	b.n	8006b76 <checkDemoModCalisma+0x168a>
 8006b10:	200010c9 	.word	0x200010c9
 8006b14:	2000106f 	.word	0x2000106f
 8006b18:	40010c00 	.word	0x40010c00
 8006b1c:	200010b9 	.word	0x200010b9
 8006b20:	200010cd 	.word	0x200010cd
 8006b24:	40010800 	.word	0x40010800
 8006b28:	20001074 	.word	0x20001074
 8006b2c:	200010ca 	.word	0x200010ca
 8006b30:	200010c0 	.word	0x200010c0
 8006b34:	200010ad 	.word	0x200010ad
 8006b38:	200010ce 	.word	0x200010ce
 8006b3c:	200010cb 	.word	0x200010cb
 8006b40:	200010bf 	.word	0x200010bf
 8006b44:	200010a4 	.word	0x200010a4
 8006b48:	200010a3 	.word	0x200010a3
 8006b4c:	200010ba 	.word	0x200010ba
 8006b50:	20001044 	.word	0x20001044
 8006b54:	20001058 	.word	0x20001058
 8006b58:	20001084 	.word	0x20001084
 8006b5c:	200010a1 	.word	0x200010a1
 8006b60:	200010a2 	.word	0x200010a2
 8006b64:	200010c1 	.word	0x200010c1
				} else {
					makineCalisiyor=1;
 8006b68:	4b90      	ldr	r3, [pc, #576]	@ (8006dac <checkDemoModCalisma+0x18c0>)
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8006b6e:	4b90      	ldr	r3, [pc, #576]	@ (8006db0 <checkDemoModCalisma+0x18c4>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a90      	ldr	r2, [pc, #576]	@ (8006db4 <checkDemoModCalisma+0x18c8>)
 8006b74:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006b76:	4b90      	ldr	r3, [pc, #576]	@ (8006db8 <checkDemoModCalisma+0x18cc>)
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d02f      	beq.n	8006bde <checkDemoModCalisma+0x16f2>
 8006b7e:	4b8f      	ldr	r3, [pc, #572]	@ (8006dbc <checkDemoModCalisma+0x18d0>)
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	f083 0301 	eor.w	r3, r3, #1
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d028      	beq.n	8006bde <checkDemoModCalisma+0x16f2>
 8006b8c:	4b8c      	ldr	r3, [pc, #560]	@ (8006dc0 <checkDemoModCalisma+0x18d4>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	f083 0301 	eor.w	r3, r3, #1
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d021      	beq.n	8006bde <checkDemoModCalisma+0x16f2>
 8006b9a:	4b8a      	ldr	r3, [pc, #552]	@ (8006dc4 <checkDemoModCalisma+0x18d8>)
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	f083 0301 	eor.w	r3, r3, #1
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d01a      	beq.n	8006bde <checkDemoModCalisma+0x16f2>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006ba8:	4b87      	ldr	r3, [pc, #540]	@ (8006dc8 <checkDemoModCalisma+0x18dc>)
 8006baa:	781b      	ldrb	r3, [r3, #0]
 8006bac:	f083 0301 	eor.w	r3, r3, #1
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d013      	beq.n	8006bde <checkDemoModCalisma+0x16f2>
 8006bb6:	4b85      	ldr	r3, [pc, #532]	@ (8006dcc <checkDemoModCalisma+0x18e0>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	f083 0301 	eor.w	r3, r3, #1
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00c      	beq.n	8006bde <checkDemoModCalisma+0x16f2>
 8006bc4:	4b82      	ldr	r3, [pc, #520]	@ (8006dd0 <checkDemoModCalisma+0x18e4>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	f083 0301 	eor.w	r3, r3, #1
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d005      	beq.n	8006bde <checkDemoModCalisma+0x16f2>

					hataVar=0;
 8006bd2:	4b79      	ldr	r3, [pc, #484]	@ (8006db8 <checkDemoModCalisma+0x18cc>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8006bd8:	2007      	movs	r0, #7
 8006bda:	f7fc feb7 	bl	800394c <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8006bde:	4b76      	ldr	r3, [pc, #472]	@ (8006db8 <checkDemoModCalisma+0x18cc>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d02a      	beq.n	8006c3c <checkDemoModCalisma+0x1750>
 8006be6:	4b75      	ldr	r3, [pc, #468]	@ (8006dbc <checkDemoModCalisma+0x18d0>)
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	f083 0301 	eor.w	r3, r3, #1
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d023      	beq.n	8006c3c <checkDemoModCalisma+0x1750>
 8006bf4:	4b72      	ldr	r3, [pc, #456]	@ (8006dc0 <checkDemoModCalisma+0x18d4>)
 8006bf6:	781b      	ldrb	r3, [r3, #0]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01f      	beq.n	8006c3c <checkDemoModCalisma+0x1750>
 8006bfc:	4b71      	ldr	r3, [pc, #452]	@ (8006dc4 <checkDemoModCalisma+0x18d8>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	f083 0301 	eor.w	r3, r3, #1
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d018      	beq.n	8006c3c <checkDemoModCalisma+0x1750>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8006c0a:	4b6f      	ldr	r3, [pc, #444]	@ (8006dc8 <checkDemoModCalisma+0x18dc>)
 8006c0c:	781b      	ldrb	r3, [r3, #0]
 8006c0e:	f083 0301 	eor.w	r3, r3, #1
 8006c12:	b2db      	uxtb	r3, r3
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d011      	beq.n	8006c3c <checkDemoModCalisma+0x1750>
 8006c18:	4b6c      	ldr	r3, [pc, #432]	@ (8006dcc <checkDemoModCalisma+0x18e0>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	f083 0301 	eor.w	r3, r3, #1
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00a      	beq.n	8006c3c <checkDemoModCalisma+0x1750>
 8006c26:	4b6a      	ldr	r3, [pc, #424]	@ (8006dd0 <checkDemoModCalisma+0x18e4>)
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	f083 0301 	eor.w	r3, r3, #1
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <checkDemoModCalisma+0x1750>
				{
					EmnCerHataMakYukariCalis=1;
 8006c34:	4b67      	ldr	r3, [pc, #412]	@ (8006dd4 <checkDemoModCalisma+0x18e8>)
 8006c36:	2201      	movs	r2, #1
 8006c38:	701a      	strb	r2, [r3, #0]
 8006c3a:	e009      	b.n	8006c50 <checkDemoModCalisma+0x1764>
				}
				else if(emniyetCercevesihatasi==0)
 8006c3c:	4b60      	ldr	r3, [pc, #384]	@ (8006dc0 <checkDemoModCalisma+0x18d4>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	f083 0301 	eor.w	r3, r3, #1
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <checkDemoModCalisma+0x1764>
				{
					EmnCerHataMakYukariCalis=0;
 8006c4a:	4b62      	ldr	r3, [pc, #392]	@ (8006dd4 <checkDemoModCalisma+0x18e8>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	701a      	strb	r2, [r3, #0]

			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006c50:	4b61      	ldr	r3, [pc, #388]	@ (8006dd8 <checkDemoModCalisma+0x18ec>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	f040 81d8 	bne.w	800700a <checkDemoModCalisma+0x1b1e>
 8006c5a:	4b60      	ldr	r3, [pc, #384]	@ (8006ddc <checkDemoModCalisma+0x18f0>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 81d3 	beq.w	800700a <checkDemoModCalisma+0x1b1e>
 8006c64:	4b5e      	ldr	r3, [pc, #376]	@ (8006de0 <checkDemoModCalisma+0x18f4>)
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f040 81ce 	bne.w	800700a <checkDemoModCalisma+0x1b1e>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006c6e:	2102      	movs	r1, #2
 8006c70:	485c      	ldr	r0, [pc, #368]	@ (8006de4 <checkDemoModCalisma+0x18f8>)
 8006c72:	f004 f9e5 	bl	800b040 <HAL_GPIO_ReadPin>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d11d      	bne.n	8006cb8 <checkDemoModCalisma+0x17cc>
						&& (demoAsagiCalis==0)
 8006c7c:	4b5a      	ldr	r3, [pc, #360]	@ (8006de8 <checkDemoModCalisma+0x18fc>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	f083 0301 	eor.w	r3, r3, #1
 8006c84:	b2db      	uxtb	r3, r3
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d016      	beq.n	8006cb8 <checkDemoModCalisma+0x17cc>
						&& (demoDevYukari==0)
 8006c8a:	4b58      	ldr	r3, [pc, #352]	@ (8006dec <checkDemoModCalisma+0x1900>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	f083 0301 	eor.w	r3, r3, #1
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00f      	beq.n	8006cb8 <checkDemoModCalisma+0x17cc>
						&& (demoDevAsagi==0)) {
 8006c98:	4b55      	ldr	r3, [pc, #340]	@ (8006df0 <checkDemoModCalisma+0x1904>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	f083 0301 	eor.w	r3, r3, #1
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d008      	beq.n	8006cb8 <checkDemoModCalisma+0x17cc>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	2104      	movs	r1, #4
 8006caa:	4852      	ldr	r0, [pc, #328]	@ (8006df4 <checkDemoModCalisma+0x1908>)
 8006cac:	f004 f9df 	bl	800b06e <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8006cb0:	4b51      	ldr	r3, [pc, #324]	@ (8006df8 <checkDemoModCalisma+0x190c>)
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	701a      	strb	r2, [r3, #0]
 8006cb6:	e00e      	b.n	8006cd6 <checkDemoModCalisma+0x17ea>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006cb8:	2102      	movs	r1, #2
 8006cba:	484a      	ldr	r0, [pc, #296]	@ (8006de4 <checkDemoModCalisma+0x18f8>)
 8006cbc:	f004 f9c0 	bl	800b040 <HAL_GPIO_ReadPin>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d107      	bne.n	8006cd6 <checkDemoModCalisma+0x17ea>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	2104      	movs	r1, #4
 8006cca:	484a      	ldr	r0, [pc, #296]	@ (8006df4 <checkDemoModCalisma+0x1908>)
 8006ccc:	f004 f9cf 	bl	800b06e <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8006cd0:	4b49      	ldr	r3, [pc, #292]	@ (8006df8 <checkDemoModCalisma+0x190c>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006cd6:	4b48      	ldr	r3, [pc, #288]	@ (8006df8 <checkDemoModCalisma+0x190c>)
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d10b      	bne.n	8006cf6 <checkDemoModCalisma+0x180a>
 8006cde:	4b43      	ldr	r3, [pc, #268]	@ (8006dec <checkDemoModCalisma+0x1900>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d107      	bne.n	8006cf6 <checkDemoModCalisma+0x180a>
 8006ce6:	4b42      	ldr	r3, [pc, #264]	@ (8006df0 <checkDemoModCalisma+0x1904>)
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d103      	bne.n	8006cf6 <checkDemoModCalisma+0x180a>
 8006cee:	4b3e      	ldr	r3, [pc, #248]	@ (8006de8 <checkDemoModCalisma+0x18fc>)
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00c      	beq.n	8006d10 <checkDemoModCalisma+0x1824>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006cfc:	483d      	ldr	r0, [pc, #244]	@ (8006df4 <checkDemoModCalisma+0x1908>)
 8006cfe:	f004 f9b6 	bl	800b06e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006d02:	2201      	movs	r2, #1
 8006d04:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006d08:	483a      	ldr	r0, [pc, #232]	@ (8006df4 <checkDemoModCalisma+0x1908>)
 8006d0a:	f004 f9b0 	bl	800b06e <HAL_GPIO_WritePin>
 8006d0e:	e00b      	b.n	8006d28 <checkDemoModCalisma+0x183c>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006d10:	2200      	movs	r2, #0
 8006d12:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006d16:	4837      	ldr	r0, [pc, #220]	@ (8006df4 <checkDemoModCalisma+0x1908>)
 8006d18:	f004 f9a9 	bl	800b06e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006d22:	4834      	ldr	r0, [pc, #208]	@ (8006df4 <checkDemoModCalisma+0x1908>)
 8006d24:	f004 f9a3 	bl	800b06e <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006d28:	2102      	movs	r1, #2
 8006d2a:	482e      	ldr	r0, [pc, #184]	@ (8006de4 <checkDemoModCalisma+0x18f8>)
 8006d2c:	f004 f988 	bl	800b040 <HAL_GPIO_ReadPin>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d10d      	bne.n	8006d52 <checkDemoModCalisma+0x1866>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006d36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006d3a:	482a      	ldr	r0, [pc, #168]	@ (8006de4 <checkDemoModCalisma+0x18f8>)
 8006d3c:	f004 f980 	bl	800b040 <HAL_GPIO_ReadPin>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d105      	bne.n	8006d52 <checkDemoModCalisma+0x1866>
						&& (demoYukariCalis==0)
 8006d46:	4b2c      	ldr	r3, [pc, #176]	@ (8006df8 <checkDemoModCalisma+0x190c>)
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	f083 0301 	eor.w	r3, r3, #1
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006d52:	2102      	movs	r1, #2
 8006d54:	4823      	ldr	r0, [pc, #140]	@ (8006de4 <checkDemoModCalisma+0x18f8>)
 8006d56:	f004 f973 	bl	800b040 <HAL_GPIO_ReadPin>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d14d      	bne.n	8006dfc <checkDemoModCalisma+0x1910>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006d60:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006d64:	481f      	ldr	r0, [pc, #124]	@ (8006de4 <checkDemoModCalisma+0x18f8>)
 8006d66:	f004 f96b 	bl	800b040 <HAL_GPIO_ReadPin>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d145      	bne.n	8006dfc <checkDemoModCalisma+0x1910>
						&&(demoYukariCalis==0)
 8006d70:	4b21      	ldr	r3, [pc, #132]	@ (8006df8 <checkDemoModCalisma+0x190c>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	f083 0301 	eor.w	r3, r3, #1
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d03e      	beq.n	8006dfc <checkDemoModCalisma+0x1910>
						&&(demoAsagiCalis==0)
 8006d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8006de8 <checkDemoModCalisma+0x18fc>)
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	f083 0301 	eor.w	r3, r3, #1
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d037      	beq.n	8006dfc <checkDemoModCalisma+0x1910>
						&& (demoDevAsagi==0)) {
 8006d8c:	4b18      	ldr	r3, [pc, #96]	@ (8006df0 <checkDemoModCalisma+0x1904>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	f083 0301 	eor.w	r3, r3, #1
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d030      	beq.n	8006dfc <checkDemoModCalisma+0x1910>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	2120      	movs	r1, #32
 8006d9e:	4811      	ldr	r0, [pc, #68]	@ (8006de4 <checkDemoModCalisma+0x18f8>)
 8006da0:	f004 f965 	bl	800b06e <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8006da4:	4b11      	ldr	r3, [pc, #68]	@ (8006dec <checkDemoModCalisma+0x1900>)
 8006da6:	2201      	movs	r2, #1
 8006da8:	701a      	strb	r2, [r3, #0]
 8006daa:	e02f      	b.n	8006e0c <checkDemoModCalisma+0x1920>
 8006dac:	200010c1 	.word	0x200010c1
 8006db0:	20001044 	.word	0x20001044
 8006db4:	20001058 	.word	0x20001058
 8006db8:	200010c0 	.word	0x200010c0
 8006dbc:	200010bb 	.word	0x200010bb
 8006dc0:	200010bc 	.word	0x200010bc
 8006dc4:	200010c9 	.word	0x200010c9
 8006dc8:	200010ca 	.word	0x200010ca
 8006dcc:	200010cb 	.word	0x200010cb
 8006dd0:	200010ba 	.word	0x200010ba
 8006dd4:	200010cf 	.word	0x200010cf
 8006dd8:	2000108a 	.word	0x2000108a
 8006ddc:	200010bd 	.word	0x200010bd
 8006de0:	20001089 	.word	0x20001089
 8006de4:	40011000 	.word	0x40011000
 8006de8:	200010c4 	.word	0x200010c4
 8006dec:	200010c5 	.word	0x200010c5
 8006df0:	200010c6 	.word	0x200010c6
 8006df4:	40010c00 	.word	0x40010c00
 8006df8:	200010c3 	.word	0x200010c3
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	2120      	movs	r1, #32
 8006e00:	48a1      	ldr	r0, [pc, #644]	@ (8007088 <checkDemoModCalisma+0x1b9c>)
 8006e02:	f004 f934 	bl	800b06e <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8006e06:	4ba1      	ldr	r3, [pc, #644]	@ (800708c <checkDemoModCalisma+0x1ba0>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006e0c:	2102      	movs	r1, #2
 8006e0e:	489e      	ldr	r0, [pc, #632]	@ (8007088 <checkDemoModCalisma+0x1b9c>)
 8006e10:	f004 f916 	bl	800b040 <HAL_GPIO_ReadPin>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d125      	bne.n	8006e66 <checkDemoModCalisma+0x197a>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006e1a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8006e1e:	489a      	ldr	r0, [pc, #616]	@ (8007088 <checkDemoModCalisma+0x1b9c>)
 8006e20:	f004 f90e 	bl	800b040 <HAL_GPIO_ReadPin>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d11d      	bne.n	8006e66 <checkDemoModCalisma+0x197a>
						&&(demoYukariCalis==0)
 8006e2a:	4b99      	ldr	r3, [pc, #612]	@ (8007090 <checkDemoModCalisma+0x1ba4>)
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	f083 0301 	eor.w	r3, r3, #1
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d016      	beq.n	8006e66 <checkDemoModCalisma+0x197a>
						&&(demoDevYukari==0)
 8006e38:	4b94      	ldr	r3, [pc, #592]	@ (800708c <checkDemoModCalisma+0x1ba0>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	f083 0301 	eor.w	r3, r3, #1
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d00f      	beq.n	8006e66 <checkDemoModCalisma+0x197a>
						&& (demoAsagiCalis==0)) {
 8006e46:	4b93      	ldr	r3, [pc, #588]	@ (8007094 <checkDemoModCalisma+0x1ba8>)
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	f083 0301 	eor.w	r3, r3, #1
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d008      	beq.n	8006e66 <checkDemoModCalisma+0x197a>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006e54:	2201      	movs	r2, #1
 8006e56:	2110      	movs	r1, #16
 8006e58:	488b      	ldr	r0, [pc, #556]	@ (8007088 <checkDemoModCalisma+0x1b9c>)
 8006e5a:	f004 f908 	bl	800b06e <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8006e5e:	4b8e      	ldr	r3, [pc, #568]	@ (8007098 <checkDemoModCalisma+0x1bac>)
 8006e60:	2201      	movs	r2, #1
 8006e62:	701a      	strb	r2, [r3, #0]
 8006e64:	e007      	b.n	8006e76 <checkDemoModCalisma+0x198a>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006e66:	2200      	movs	r2, #0
 8006e68:	2110      	movs	r1, #16
 8006e6a:	4887      	ldr	r0, [pc, #540]	@ (8007088 <checkDemoModCalisma+0x1b9c>)
 8006e6c:	f004 f8ff 	bl	800b06e <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8006e70:	4b89      	ldr	r3, [pc, #548]	@ (8007098 <checkDemoModCalisma+0x1bac>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006e76:	2104      	movs	r1, #4
 8006e78:	4883      	ldr	r0, [pc, #524]	@ (8007088 <checkDemoModCalisma+0x1b9c>)
 8006e7a:	f004 f8e1 	bl	800b040 <HAL_GPIO_ReadPin>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d125      	bne.n	8006ed0 <checkDemoModCalisma+0x19e4>
						&& (demoYukariCalis==0)
 8006e84:	4b82      	ldr	r3, [pc, #520]	@ (8007090 <checkDemoModCalisma+0x1ba4>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	f083 0301 	eor.w	r3, r3, #1
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d01e      	beq.n	8006ed0 <checkDemoModCalisma+0x19e4>
						&& (demoDevAsagi==0)
 8006e92:	4b81      	ldr	r3, [pc, #516]	@ (8007098 <checkDemoModCalisma+0x1bac>)
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	f083 0301 	eor.w	r3, r3, #1
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d017      	beq.n	8006ed0 <checkDemoModCalisma+0x19e4>
						&& (demoDevYukari==0)) {
 8006ea0:	4b7a      	ldr	r3, [pc, #488]	@ (800708c <checkDemoModCalisma+0x1ba0>)
 8006ea2:	781b      	ldrb	r3, [r3, #0]
 8006ea4:	f083 0301 	eor.w	r3, r3, #1
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d010      	beq.n	8006ed0 <checkDemoModCalisma+0x19e4>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006eae:	2201      	movs	r2, #1
 8006eb0:	2102      	movs	r1, #2
 8006eb2:	487a      	ldr	r0, [pc, #488]	@ (800709c <checkDemoModCalisma+0x1bb0>)
 8006eb4:	f004 f8db 	bl	800b06e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006eb8:	2201      	movs	r2, #1
 8006eba:	2101      	movs	r1, #1
 8006ebc:	4877      	ldr	r0, [pc, #476]	@ (800709c <checkDemoModCalisma+0x1bb0>)
 8006ebe:	f004 f8d6 	bl	800b06e <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8006ec2:	4b74      	ldr	r3, [pc, #464]	@ (8007094 <checkDemoModCalisma+0x1ba8>)
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 8006ec8:	4b75      	ldr	r3, [pc, #468]	@ (80070a0 <checkDemoModCalisma+0x1bb4>)
 8006eca:	2201      	movs	r2, #1
 8006ecc:	701a      	strb	r2, [r3, #0]
 8006ece:	e013      	b.n	8006ef8 <checkDemoModCalisma+0x1a0c>
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006ed0:	2104      	movs	r1, #4
 8006ed2:	486d      	ldr	r0, [pc, #436]	@ (8007088 <checkDemoModCalisma+0x1b9c>)
 8006ed4:	f004 f8b4 	bl	800b040 <HAL_GPIO_ReadPin>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d10c      	bne.n	8006ef8 <checkDemoModCalisma+0x1a0c>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006ede:	2200      	movs	r2, #0
 8006ee0:	2102      	movs	r1, #2
 8006ee2:	486e      	ldr	r0, [pc, #440]	@ (800709c <checkDemoModCalisma+0x1bb0>)
 8006ee4:	f004 f8c3 	bl	800b06e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2101      	movs	r1, #1
 8006eec:	486b      	ldr	r0, [pc, #428]	@ (800709c <checkDemoModCalisma+0x1bb0>)
 8006eee:	f004 f8be 	bl	800b06e <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8006ef2:	4b68      	ldr	r3, [pc, #416]	@ (8007094 <checkDemoModCalisma+0x1ba8>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006ef8:	2104      	movs	r1, #4
 8006efa:	4863      	ldr	r0, [pc, #396]	@ (8007088 <checkDemoModCalisma+0x1b9c>)
 8006efc:	f004 f8a0 	bl	800b040 <HAL_GPIO_ReadPin>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d10d      	bne.n	8006f22 <checkDemoModCalisma+0x1a36>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006f06:	2201      	movs	r2, #1
 8006f08:	2180      	movs	r1, #128	@ 0x80
 8006f0a:	4866      	ldr	r0, [pc, #408]	@ (80070a4 <checkDemoModCalisma+0x1bb8>)
 8006f0c:	f004 f8af 	bl	800b06e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006f10:	2201      	movs	r2, #1
 8006f12:	2120      	movs	r1, #32
 8006f14:	4863      	ldr	r0, [pc, #396]	@ (80070a4 <checkDemoModCalisma+0x1bb8>)
 8006f16:	f004 f8aa 	bl	800b06e <HAL_GPIO_WritePin>
					timer3 = millis;
 8006f1a:	4b63      	ldr	r3, [pc, #396]	@ (80070a8 <checkDemoModCalisma+0x1bbc>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a63      	ldr	r2, [pc, #396]	@ (80070ac <checkDemoModCalisma+0x1bc0>)
 8006f20:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8006f22:	4b61      	ldr	r3, [pc, #388]	@ (80070a8 <checkDemoModCalisma+0x1bbc>)
 8006f24:	681a      	ldr	r2, [r3, #0]
 8006f26:	4b61      	ldr	r3, [pc, #388]	@ (80070ac <checkDemoModCalisma+0x1bc0>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	1ad3      	subs	r3, r2, r3
 8006f2c:	2b04      	cmp	r3, #4
 8006f2e:	d909      	bls.n	8006f44 <checkDemoModCalisma+0x1a58>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006f30:	2200      	movs	r2, #0
 8006f32:	2180      	movs	r1, #128	@ 0x80
 8006f34:	485b      	ldr	r0, [pc, #364]	@ (80070a4 <checkDemoModCalisma+0x1bb8>)
 8006f36:	f004 f89a 	bl	800b06e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	2120      	movs	r1, #32
 8006f3e:	4859      	ldr	r0, [pc, #356]	@ (80070a4 <checkDemoModCalisma+0x1bb8>)
 8006f40:	f004 f895 	bl	800b06e <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006f44:	2102      	movs	r1, #2
 8006f46:	4850      	ldr	r0, [pc, #320]	@ (8007088 <checkDemoModCalisma+0x1b9c>)
 8006f48:	f004 f87a 	bl	800b040 <HAL_GPIO_ReadPin>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d108      	bne.n	8006f64 <checkDemoModCalisma+0x1a78>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006f52:	2201      	movs	r2, #1
 8006f54:	2140      	movs	r1, #64	@ 0x40
 8006f56:	4853      	ldr	r0, [pc, #332]	@ (80070a4 <checkDemoModCalisma+0x1bb8>)
 8006f58:	f004 f889 	bl	800b06e <HAL_GPIO_WritePin>
					timer3 = millis;
 8006f5c:	4b52      	ldr	r3, [pc, #328]	@ (80070a8 <checkDemoModCalisma+0x1bbc>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a52      	ldr	r2, [pc, #328]	@ (80070ac <checkDemoModCalisma+0x1bc0>)
 8006f62:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8006f64:	4b50      	ldr	r3, [pc, #320]	@ (80070a8 <checkDemoModCalisma+0x1bbc>)
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	4b50      	ldr	r3, [pc, #320]	@ (80070ac <checkDemoModCalisma+0x1bc0>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	2b04      	cmp	r3, #4
 8006f70:	d904      	bls.n	8006f7c <checkDemoModCalisma+0x1a90>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006f72:	2200      	movs	r2, #0
 8006f74:	2140      	movs	r1, #64	@ 0x40
 8006f76:	484b      	ldr	r0, [pc, #300]	@ (80070a4 <checkDemoModCalisma+0x1bb8>)
 8006f78:	f004 f879 	bl	800b06e <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006f7c:	4b44      	ldr	r3, [pc, #272]	@ (8007090 <checkDemoModCalisma+0x1ba4>)
 8006f7e:	781b      	ldrb	r3, [r3, #0]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d024      	beq.n	8006fce <checkDemoModCalisma+0x1ae2>
 8006f84:	4b46      	ldr	r3, [pc, #280]	@ (80070a0 <checkDemoModCalisma+0x1bb4>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d020      	beq.n	8006fce <checkDemoModCalisma+0x1ae2>

					calismaSayisiDemo++;
 8006f8c:	4b48      	ldr	r3, [pc, #288]	@ (80070b0 <checkDemoModCalisma+0x1bc4>)
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	3301      	adds	r3, #1
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	4b46      	ldr	r3, [pc, #280]	@ (80070b0 <checkDemoModCalisma+0x1bc4>)
 8006f96:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8006f98:	4b46      	ldr	r3, [pc, #280]	@ (80070b4 <checkDemoModCalisma+0x1bc8>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	2bff      	cmp	r3, #255	@ 0xff
 8006f9e:	d108      	bne.n	8006fb2 <checkDemoModCalisma+0x1ac6>
							calismaSayisi = 0;
 8006fa0:	4b44      	ldr	r3, [pc, #272]	@ (80070b4 <checkDemoModCalisma+0x1bc8>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	701a      	strb	r2, [r3, #0]
							calismaCount++;
 8006fa6:	4b44      	ldr	r3, [pc, #272]	@ (80070b8 <checkDemoModCalisma+0x1bcc>)
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	3301      	adds	r3, #1
 8006fac:	b2da      	uxtb	r2, r3
 8006fae:	4b42      	ldr	r3, [pc, #264]	@ (80070b8 <checkDemoModCalisma+0x1bcc>)
 8006fb0:	701a      	strb	r2, [r3, #0]
				}
					eepromData[28] = calismaSayisiDemo;
 8006fb2:	4b3f      	ldr	r3, [pc, #252]	@ (80070b0 <checkDemoModCalisma+0x1bc4>)
 8006fb4:	781a      	ldrb	r2, [r3, #0]
 8006fb6:	4b41      	ldr	r3, [pc, #260]	@ (80070bc <checkDemoModCalisma+0x1bd0>)
 8006fb8:	771a      	strb	r2, [r3, #28]
					eepromData[30] = calismaCountDemo;
 8006fba:	4b41      	ldr	r3, [pc, #260]	@ (80070c0 <checkDemoModCalisma+0x1bd4>)
 8006fbc:	781a      	ldrb	r2, [r3, #0]
 8006fbe:	4b3f      	ldr	r3, [pc, #252]	@ (80070bc <checkDemoModCalisma+0x1bd0>)
 8006fc0:	779a      	strb	r2, [r3, #30]

					hafizaYaz=1;
 8006fc2:	4b40      	ldr	r3, [pc, #256]	@ (80070c4 <checkDemoModCalisma+0x1bd8>)
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 8006fc8:	4b35      	ldr	r3, [pc, #212]	@ (80070a0 <checkDemoModCalisma+0x1bb4>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8006fce:	4b3e      	ldr	r3, [pc, #248]	@ (80070c8 <checkDemoModCalisma+0x1bdc>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d156      	bne.n	8007084 <checkDemoModCalisma+0x1b98>
					lcd_print(2,1,"Cycle     ");
 8006fd6:	4a3d      	ldr	r2, [pc, #244]	@ (80070cc <checkDemoModCalisma+0x1be0>)
 8006fd8:	2101      	movs	r1, #1
 8006fda:	2002      	movs	r0, #2
 8006fdc:	f002 fd3e 	bl	8009a5c <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8006fe0:	4a3b      	ldr	r2, [pc, #236]	@ (80070d0 <checkDemoModCalisma+0x1be4>)
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	2001      	movs	r0, #1
 8006fe6:	f002 fd39 	bl	8009a5c <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 8006fea:	4b31      	ldr	r3, [pc, #196]	@ (80070b0 <checkDemoModCalisma+0x1bc4>)
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	220a      	movs	r2, #10
 8006ff0:	4938      	ldr	r1, [pc, #224]	@ (80070d4 <checkDemoModCalisma+0x1be8>)
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f007 f81a 	bl	800e02c <itoa>
					lcd_print(2,11,snum);
 8006ff8:	4a36      	ldr	r2, [pc, #216]	@ (80070d4 <checkDemoModCalisma+0x1be8>)
 8006ffa:	210b      	movs	r1, #11
 8006ffc:	2002      	movs	r0, #2
 8006ffe:	f002 fd2d 	bl	8009a5c <lcd_print>
					mesajYazildi=1;
 8007002:	4b35      	ldr	r3, [pc, #212]	@ (80070d8 <checkDemoModCalisma+0x1bec>)
 8007004:	2201      	movs	r2, #1
 8007006:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8007008:	e03c      	b.n	8007084 <checkDemoModCalisma+0x1b98>
				}
			} else if(demoMode==1 || menuGiris==1) {
 800700a:	4b34      	ldr	r3, [pc, #208]	@ (80070dc <checkDemoModCalisma+0x1bf0>)
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	2b01      	cmp	r3, #1
 8007010:	d003      	beq.n	800701a <checkDemoModCalisma+0x1b2e>
 8007012:	4b2d      	ldr	r3, [pc, #180]	@ (80070c8 <checkDemoModCalisma+0x1bdc>)
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d134      	bne.n	8007084 <checkDemoModCalisma+0x1b98>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800701a:	2200      	movs	r2, #0
 800701c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8007020:	481e      	ldr	r0, [pc, #120]	@ (800709c <checkDemoModCalisma+0x1bb0>)
 8007022:	f004 f824 	bl	800b06e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007026:	2200      	movs	r2, #0
 8007028:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800702c:	481b      	ldr	r0, [pc, #108]	@ (800709c <checkDemoModCalisma+0x1bb0>)
 800702e:	f004 f81e 	bl	800b06e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007032:	2200      	movs	r2, #0
 8007034:	2104      	movs	r1, #4
 8007036:	4819      	ldr	r0, [pc, #100]	@ (800709c <checkDemoModCalisma+0x1bb0>)
 8007038:	f004 f819 	bl	800b06e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800703c:	2200      	movs	r2, #0
 800703e:	2102      	movs	r1, #2
 8007040:	4816      	ldr	r0, [pc, #88]	@ (800709c <checkDemoModCalisma+0x1bb0>)
 8007042:	f004 f814 	bl	800b06e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007046:	2200      	movs	r2, #0
 8007048:	2101      	movs	r1, #1
 800704a:	4814      	ldr	r0, [pc, #80]	@ (800709c <checkDemoModCalisma+0x1bb0>)
 800704c:	f004 f80f 	bl	800b06e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007050:	2200      	movs	r2, #0
 8007052:	2120      	movs	r1, #32
 8007054:	480c      	ldr	r0, [pc, #48]	@ (8007088 <checkDemoModCalisma+0x1b9c>)
 8007056:	f004 f80a 	bl	800b06e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800705a:	2200      	movs	r2, #0
 800705c:	2110      	movs	r1, #16
 800705e:	480a      	ldr	r0, [pc, #40]	@ (8007088 <checkDemoModCalisma+0x1b9c>)
 8007060:	f004 f805 	bl	800b06e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007064:	2200      	movs	r2, #0
 8007066:	2180      	movs	r1, #128	@ 0x80
 8007068:	480e      	ldr	r0, [pc, #56]	@ (80070a4 <checkDemoModCalisma+0x1bb8>)
 800706a:	f004 f800 	bl	800b06e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800706e:	2200      	movs	r2, #0
 8007070:	2140      	movs	r1, #64	@ 0x40
 8007072:	480c      	ldr	r0, [pc, #48]	@ (80070a4 <checkDemoModCalisma+0x1bb8>)
 8007074:	f003 fffb 	bl	800b06e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007078:	2200      	movs	r2, #0
 800707a:	2120      	movs	r1, #32
 800707c:	4809      	ldr	r0, [pc, #36]	@ (80070a4 <checkDemoModCalisma+0x1bb8>)
 800707e:	f003 fff6 	bl	800b06e <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8007082:	e7ff      	b.n	8007084 <checkDemoModCalisma+0x1b98>
 8007084:	bf00      	nop
 8007086:	bd80      	pop	{r7, pc}
 8007088:	40011000 	.word	0x40011000
 800708c:	200010c5 	.word	0x200010c5
 8007090:	200010c3 	.word	0x200010c3
 8007094:	200010c4 	.word	0x200010c4
 8007098:	200010c6 	.word	0x200010c6
 800709c:	40010c00 	.word	0x40010c00
 80070a0:	200010aa 	.word	0x200010aa
 80070a4:	40010800 	.word	0x40010800
 80070a8:	20001044 	.word	0x20001044
 80070ac:	20001054 	.word	0x20001054
 80070b0:	20001065 	.word	0x20001065
 80070b4:	20001064 	.word	0x20001064
 80070b8:	20001066 	.word	0x20001066
 80070bc:	20000f9c 	.word	0x20000f9c
 80070c0:	20001067 	.word	0x20001067
 80070c4:	20001098 	.word	0x20001098
 80070c8:	20001089 	.word	0x20001089
 80070cc:	0800e260 	.word	0x0800e260
 80070d0:	0800e26c 	.word	0x0800e26c
 80070d4:	2000100c 	.word	0x2000100c
 80070d8:	200010a0 	.word	0x200010a0
 80070dc:	2000108a 	.word	0x2000108a

080070e0 <mainLoop>:

void mainLoop() {
 80070e0:	b580      	push	{r7, lr}
 80070e2:	af00      	add	r7, sp, #0
	while(1) {
		checkLCDBacklight();
 80070e4:	f7fc fc86 	bl	80039f4 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80070e8:	2101      	movs	r1, #1
 80070ea:	4889      	ldr	r0, [pc, #548]	@ (8007310 <mainLoop+0x230>)
 80070ec:	f003 ffa8 	bl	800b040 <HAL_GPIO_ReadPin>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d136      	bne.n	8007164 <mainLoop+0x84>
 80070f6:	2108      	movs	r1, #8
 80070f8:	4886      	ldr	r0, [pc, #536]	@ (8007314 <mainLoop+0x234>)
 80070fa:	f003 ffa1 	bl	800b040 <HAL_GPIO_ReadPin>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d12f      	bne.n	8007164 <mainLoop+0x84>
 8007104:	2102      	movs	r1, #2
 8007106:	4882      	ldr	r0, [pc, #520]	@ (8007310 <mainLoop+0x230>)
 8007108:	f003 ff9a 	bl	800b040 <HAL_GPIO_ReadPin>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d128      	bne.n	8007164 <mainLoop+0x84>
 8007112:	2104      	movs	r1, #4
 8007114:	487e      	ldr	r0, [pc, #504]	@ (8007310 <mainLoop+0x230>)
 8007116:	f003 ff93 	bl	800b040 <HAL_GPIO_ReadPin>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d121      	bne.n	8007164 <mainLoop+0x84>
 8007120:	2108      	movs	r1, #8
 8007122:	487b      	ldr	r0, [pc, #492]	@ (8007310 <mainLoop+0x230>)
 8007124:	f003 ff8c 	bl	800b040 <HAL_GPIO_ReadPin>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d11a      	bne.n	8007164 <mainLoop+0x84>
 800712e:	2180      	movs	r1, #128	@ 0x80
 8007130:	4878      	ldr	r0, [pc, #480]	@ (8007314 <mainLoop+0x234>)
 8007132:	f003 ff85 	bl	800b040 <HAL_GPIO_ReadPin>
 8007136:	4603      	mov	r3, r0
 8007138:	2b01      	cmp	r3, #1
 800713a:	d113      	bne.n	8007164 <mainLoop+0x84>
 800713c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8007140:	4874      	ldr	r0, [pc, #464]	@ (8007314 <mainLoop+0x234>)
 8007142:	f003 ff7d 	bl	800b040 <HAL_GPIO_ReadPin>
 8007146:	4603      	mov	r3, r0
 8007148:	2b01      	cmp	r3, #1
 800714a:	d10b      	bne.n	8007164 <mainLoop+0x84>
 800714c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007150:	4870      	ldr	r0, [pc, #448]	@ (8007314 <mainLoop+0x234>)
 8007152:	f003 ff75 	bl	800b040 <HAL_GPIO_ReadPin>
 8007156:	4603      	mov	r3, r0
 8007158:	2b01      	cmp	r3, #1
 800715a:	d103      	bne.n	8007164 <mainLoop+0x84>
			butonKontrol=0;
 800715c:	4b6e      	ldr	r3, [pc, #440]	@ (8007318 <mainLoop+0x238>)
 800715e:	2200      	movs	r2, #0
 8007160:	701a      	strb	r2, [r3, #0]
 8007162:	e003      	b.n	800716c <mainLoop+0x8c>
		} else {
			backLightTimer = millis;
 8007164:	4b6d      	ldr	r3, [pc, #436]	@ (800731c <mainLoop+0x23c>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a6d      	ldr	r2, [pc, #436]	@ (8007320 <mainLoop+0x240>)
 800716a:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 800716c:	f7fc fcf4 	bl	8003b58 <buttonCheck>
 8007170:	4603      	mov	r3, r0
 8007172:	2b01      	cmp	r3, #1
 8007174:	d103      	bne.n	800717e <mainLoop+0x9e>
			backLightTimer = millis;
 8007176:	4b69      	ldr	r3, [pc, #420]	@ (800731c <mainLoop+0x23c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a69      	ldr	r2, [pc, #420]	@ (8007320 <mainLoop+0x240>)
 800717c:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 800717e:	4b69      	ldr	r3, [pc, #420]	@ (8007324 <mainLoop+0x244>)
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d001      	beq.n	800718a <mainLoop+0xaa>
			saveEEPROM();
 8007186:	f7f9 fae3 	bl	8000750 <saveEEPROM>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 800718a:	4b67      	ldr	r3, [pc, #412]	@ (8007328 <mainLoop+0x248>)
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	f083 0301 	eor.w	r3, r3, #1
 8007192:	b2db      	uxtb	r3, r3
 8007194:	2b00      	cmp	r3, #0
 8007196:	d043      	beq.n	8007220 <mainLoop+0x140>
 8007198:	4864      	ldr	r0, [pc, #400]	@ (800732c <mainLoop+0x24c>)
 800719a:	f004 fd6d 	bl	800bc78 <HAL_I2C_GetState>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b20      	cmp	r3, #32
 80071a2:	d13d      	bne.n	8007220 <mainLoop+0x140>
		  if(ilkOkuma==0) {
 80071a4:	4b62      	ldr	r3, [pc, #392]	@ (8007330 <mainLoop+0x250>)
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	f083 0301 	eor.w	r3, r3, #1
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d028      	beq.n	8007204 <mainLoop+0x124>
			  lcd_print(1, 1, eepromTextGN);
 80071b2:	4a60      	ldr	r2, [pc, #384]	@ (8007334 <mainLoop+0x254>)
 80071b4:	2101      	movs	r1, #1
 80071b6:	2001      	movs	r0, #1
 80071b8:	f002 fc50 	bl	8009a5c <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 80071bc:	4a5e      	ldr	r2, [pc, #376]	@ (8007338 <mainLoop+0x258>)
 80071be:	2101      	movs	r1, #1
 80071c0:	2002      	movs	r0, #2
 80071c2:	f002 fc4b 	bl	8009a5c <lcd_print>
			  HAL_Delay(1000);
 80071c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80071ca:	f003 f969 	bl	800a4a0 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80071ce:	bf00      	nop
 80071d0:	4856      	ldr	r0, [pc, #344]	@ (800732c <mainLoop+0x24c>)
 80071d2:	f004 fd5e 	bl	800bc92 <HAL_I2C_GetError>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b04      	cmp	r3, #4
 80071da:	d0f9      	beq.n	80071d0 <mainLoop+0xf0>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80071dc:	e003      	b.n	80071e6 <mainLoop+0x106>
				  HAL_Delay(1000);
 80071de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80071e2:	f003 f95d 	bl	800a4a0 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80071e6:	4851      	ldr	r0, [pc, #324]	@ (800732c <mainLoop+0x24c>)
 80071e8:	f004 fd46 	bl	800bc78 <HAL_I2C_GetState>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b20      	cmp	r3, #32
 80071f0:	d1f5      	bne.n	80071de <mainLoop+0xfe>
			  }

			  lcd_print(2, 1, dataOkunduText);
 80071f2:	4a52      	ldr	r2, [pc, #328]	@ (800733c <mainLoop+0x25c>)
 80071f4:	2101      	movs	r1, #1
 80071f6:	2002      	movs	r0, #2
 80071f8:	f002 fc30 	bl	8009a5c <lcd_print>

			  ilkOkuma=1;
 80071fc:	4b4c      	ldr	r3, [pc, #304]	@ (8007330 <mainLoop+0x250>)
 80071fe:	2201      	movs	r2, #1
 8007200:	701a      	strb	r2, [r3, #0]
 8007202:	e006      	b.n	8007212 <mainLoop+0x132>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8007204:	4a4e      	ldr	r2, [pc, #312]	@ (8007340 <mainLoop+0x260>)
 8007206:	2101      	movs	r1, #1
 8007208:	2002      	movs	r0, #2
 800720a:	f002 fc27 	bl	8009a5c <lcd_print>
			  lcd_clear();
 800720e:	f002 fc51 	bl	8009ab4 <lcd_clear>
		  }

		  lcd_clear();
 8007212:	f002 fc4f 	bl	8009ab4 <lcd_clear>

		  eepromKontrol();
 8007216:	f7f9 f80d 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 800721a:	4b43      	ldr	r3, [pc, #268]	@ (8007328 <mainLoop+0x248>)
 800721c:	2201      	movs	r2, #1
 800721e:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8007220:	4b48      	ldr	r3, [pc, #288]	@ (8007344 <mainLoop+0x264>)
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d11c      	bne.n	8007262 <mainLoop+0x182>
 8007228:	4b47      	ldr	r3, [pc, #284]	@ (8007348 <mainLoop+0x268>)
 800722a:	781b      	ldrb	r3, [r3, #0]
 800722c:	f083 0301 	eor.w	r3, r3, #1
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d015      	beq.n	8007262 <mainLoop+0x182>
 8007236:	4b45      	ldr	r3, [pc, #276]	@ (800734c <mainLoop+0x26c>)
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d111      	bne.n	8007262 <mainLoop+0x182>
			lcd_clear();
 800723e:	f002 fc39 	bl	8009ab4 <lcd_clear>
			HAL_Delay(10);
 8007242:	200a      	movs	r0, #10
 8007244:	f003 f92c 	bl	800a4a0 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8007248:	4a41      	ldr	r2, [pc, #260]	@ (8007350 <mainLoop+0x270>)
 800724a:	2101      	movs	r1, #1
 800724c:	2001      	movs	r0, #1
 800724e:	f002 fc05 	bl	8009a5c <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8007252:	4a40      	ldr	r2, [pc, #256]	@ (8007354 <mainLoop+0x274>)
 8007254:	2101      	movs	r1, #1
 8007256:	2002      	movs	r0, #2
 8007258:	f002 fc00 	bl	8009a5c <lcd_print>
			mesajYazildi=1;
 800725c:	4b3a      	ldr	r3, [pc, #232]	@ (8007348 <mainLoop+0x268>)
 800725e:	2201      	movs	r2, #1
 8007260:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8007262:	4b38      	ldr	r3, [pc, #224]	@ (8007344 <mainLoop+0x264>)
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d112      	bne.n	8007290 <mainLoop+0x1b0>
 800726a:	2102      	movs	r1, #2
 800726c:	4828      	ldr	r0, [pc, #160]	@ (8007310 <mainLoop+0x230>)
 800726e:	f003 fee7 	bl	800b040 <HAL_GPIO_ReadPin>
 8007272:	4603      	mov	r3, r0
 8007274:	2b01      	cmp	r3, #1
 8007276:	d10b      	bne.n	8007290 <mainLoop+0x1b0>
 8007278:	2104      	movs	r1, #4
 800727a:	4825      	ldr	r0, [pc, #148]	@ (8007310 <mainLoop+0x230>)
 800727c:	f003 fee0 	bl	800b040 <HAL_GPIO_ReadPin>
 8007280:	4603      	mov	r3, r0
 8007282:	2b01      	cmp	r3, #1
 8007284:	d104      	bne.n	8007290 <mainLoop+0x1b0>
			menuGiris=1;
 8007286:	4b2f      	ldr	r3, [pc, #188]	@ (8007344 <mainLoop+0x264>)
 8007288:	2201      	movs	r2, #1
 800728a:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800728c:	f002 fc12 	bl	8009ab4 <lcd_clear>
		}

		if(menuGiris==1) {
 8007290:	4b2c      	ldr	r3, [pc, #176]	@ (8007344 <mainLoop+0x264>)
 8007292:	781b      	ldrb	r3, [r3, #0]
 8007294:	2b01      	cmp	r3, #1
 8007296:	d101      	bne.n	800729c <mainLoop+0x1bc>
			menu();
 8007298:	f7f9 fe76 	bl	8000f88 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 800729c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80072a0:	481c      	ldr	r0, [pc, #112]	@ (8007314 <mainLoop+0x234>)
 80072a2:	f003 fefc 	bl	800b09e <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80072a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80072aa:	482b      	ldr	r0, [pc, #172]	@ (8007358 <mainLoop+0x278>)
 80072ac:	f003 fec8 	bl	800b040 <HAL_GPIO_ReadPin>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d10a      	bne.n	80072cc <mainLoop+0x1ec>
 80072b6:	4b29      	ldr	r3, [pc, #164]	@ (800735c <mainLoop+0x27c>)
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	f083 0301 	eor.w	r3, r3, #1
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d003      	beq.n	80072cc <mainLoop+0x1ec>
			stopVar=1;
 80072c4:	4b26      	ldr	r3, [pc, #152]	@ (8007360 <mainLoop+0x280>)
 80072c6:	2201      	movs	r2, #1
 80072c8:	701a      	strb	r2, [r3, #0]
 80072ca:	e002      	b.n	80072d2 <mainLoop+0x1f2>
		} else {
			stopVar=0;
 80072cc:	4b24      	ldr	r3, [pc, #144]	@ (8007360 <mainLoop+0x280>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 80072d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80072d6:	4820      	ldr	r0, [pc, #128]	@ (8007358 <mainLoop+0x278>)
 80072d8:	f003 feb2 	bl	800b040 <HAL_GPIO_ReadPin>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d107      	bne.n	80072f2 <mainLoop+0x212>
 80072e2:	4b20      	ldr	r3, [pc, #128]	@ (8007364 <mainLoop+0x284>)
 80072e4:	781b      	ldrb	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d003      	beq.n	80072f2 <mainLoop+0x212>
			EmnStopVar=1;
 80072ea:	4b1f      	ldr	r3, [pc, #124]	@ (8007368 <mainLoop+0x288>)
 80072ec:	2201      	movs	r2, #1
 80072ee:	701a      	strb	r2, [r3, #0]
 80072f0:	e002      	b.n	80072f8 <mainLoop+0x218>
		} else {
			EmnStopVar=0;
 80072f2:	4b1d      	ldr	r3, [pc, #116]	@ (8007368 <mainLoop+0x288>)
 80072f4:	2200      	movs	r2, #0
 80072f6:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80072f8:	f7fc fc62 	bl	8003bc0 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80072fc:	f7fc fc94 	bl	8003c28 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8007300:	f7fc fcd8 	bl	8003cb4 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8007304:	f7fc fd28 	bl	8003d58 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8007308:	f7fe f8f0 	bl	80054ec <checkDemoModCalisma>
		checkLCDBacklight();
 800730c:	e6ea      	b.n	80070e4 <mainLoop+0x4>
 800730e:	bf00      	nop
 8007310:	40010800 	.word	0x40010800
 8007314:	40011000 	.word	0x40011000
 8007318:	2000109b 	.word	0x2000109b
 800731c:	20001044 	.word	0x20001044
 8007320:	20001060 	.word	0x20001060
 8007324:	20001098 	.word	0x20001098
 8007328:	20001099 	.word	0x20001099
 800732c:	200017f0 	.word	0x200017f0
 8007330:	2000109a 	.word	0x2000109a
 8007334:	20000178 	.word	0x20000178
 8007338:	20001728 	.word	0x20001728
 800733c:	2000173c 	.word	0x2000173c
 8007340:	20001750 	.word	0x20001750
 8007344:	20001089 	.word	0x20001089
 8007348:	200010a0 	.word	0x200010a0
 800734c:	2000108a 	.word	0x2000108a
 8007350:	200000c4 	.word	0x200000c4
 8007354:	200000d8 	.word	0x200000d8
 8007358:	40010c00 	.word	0x40010c00
 800735c:	200010c0 	.word	0x200010c0
 8007360:	200010bd 	.word	0x200010bd
 8007364:	200010cf 	.word	0x200010cf
 8007368:	200010d0 	.word	0x200010d0

0800736c <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 800736c:	b5b0      	push	{r4, r5, r7, lr}
 800736e:	b082      	sub	sp, #8
 8007370:	af00      	add	r7, sp, #0
 8007372:	4603      	mov	r3, r0
 8007374:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8007376:	79fb      	ldrb	r3, [r7, #7]
 8007378:	2b00      	cmp	r3, #0
 800737a:	f040 853d 	bne.w	8007df8 <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 800737e:	4ac7      	ldr	r2, [pc, #796]	@ (800769c <loadMenuTexts+0x330>)
 8007380:	4bc7      	ldr	r3, [pc, #796]	@ (80076a0 <loadMenuTexts+0x334>)
 8007382:	4614      	mov	r4, r2
 8007384:	461d      	mov	r5, r3
 8007386:	6828      	ldr	r0, [r5, #0]
 8007388:	6869      	ldr	r1, [r5, #4]
 800738a:	68aa      	ldr	r2, [r5, #8]
 800738c:	68eb      	ldr	r3, [r5, #12]
 800738e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007390:	7c2b      	ldrb	r3, [r5, #16]
 8007392:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8007394:	4ac3      	ldr	r2, [pc, #780]	@ (80076a4 <loadMenuTexts+0x338>)
 8007396:	4bc4      	ldr	r3, [pc, #784]	@ (80076a8 <loadMenuTexts+0x33c>)
 8007398:	4614      	mov	r4, r2
 800739a:	461d      	mov	r5, r3
 800739c:	6828      	ldr	r0, [r5, #0]
 800739e:	6869      	ldr	r1, [r5, #4]
 80073a0:	68aa      	ldr	r2, [r5, #8]
 80073a2:	68eb      	ldr	r3, [r5, #12]
 80073a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073a6:	7c2b      	ldrb	r3, [r5, #16]
 80073a8:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 80073aa:	4ac0      	ldr	r2, [pc, #768]	@ (80076ac <loadMenuTexts+0x340>)
 80073ac:	4bc0      	ldr	r3, [pc, #768]	@ (80076b0 <loadMenuTexts+0x344>)
 80073ae:	4614      	mov	r4, r2
 80073b0:	461d      	mov	r5, r3
 80073b2:	6828      	ldr	r0, [r5, #0]
 80073b4:	6869      	ldr	r1, [r5, #4]
 80073b6:	68aa      	ldr	r2, [r5, #8]
 80073b8:	68eb      	ldr	r3, [r5, #12]
 80073ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073bc:	7c2b      	ldrb	r3, [r5, #16]
 80073be:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 80073c0:	4abc      	ldr	r2, [pc, #752]	@ (80076b4 <loadMenuTexts+0x348>)
 80073c2:	4bbd      	ldr	r3, [pc, #756]	@ (80076b8 <loadMenuTexts+0x34c>)
 80073c4:	4614      	mov	r4, r2
 80073c6:	461d      	mov	r5, r3
 80073c8:	6828      	ldr	r0, [r5, #0]
 80073ca:	6869      	ldr	r1, [r5, #4]
 80073cc:	68aa      	ldr	r2, [r5, #8]
 80073ce:	68eb      	ldr	r3, [r5, #12]
 80073d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073d2:	7c2b      	ldrb	r3, [r5, #16]
 80073d4:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 80073d6:	4ab9      	ldr	r2, [pc, #740]	@ (80076bc <loadMenuTexts+0x350>)
 80073d8:	4bb9      	ldr	r3, [pc, #740]	@ (80076c0 <loadMenuTexts+0x354>)
 80073da:	4614      	mov	r4, r2
 80073dc:	461d      	mov	r5, r3
 80073de:	6828      	ldr	r0, [r5, #0]
 80073e0:	6869      	ldr	r1, [r5, #4]
 80073e2:	68aa      	ldr	r2, [r5, #8]
 80073e4:	68eb      	ldr	r3, [r5, #12]
 80073e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073e8:	7c2b      	ldrb	r3, [r5, #16]
 80073ea:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 80073ec:	4ab5      	ldr	r2, [pc, #724]	@ (80076c4 <loadMenuTexts+0x358>)
 80073ee:	4bb6      	ldr	r3, [pc, #728]	@ (80076c8 <loadMenuTexts+0x35c>)
 80073f0:	4614      	mov	r4, r2
 80073f2:	461d      	mov	r5, r3
 80073f4:	6828      	ldr	r0, [r5, #0]
 80073f6:	6869      	ldr	r1, [r5, #4]
 80073f8:	68aa      	ldr	r2, [r5, #8]
 80073fa:	68eb      	ldr	r3, [r5, #12]
 80073fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073fe:	7c2b      	ldrb	r3, [r5, #16]
 8007400:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 8007402:	4ab2      	ldr	r2, [pc, #712]	@ (80076cc <loadMenuTexts+0x360>)
 8007404:	4bb2      	ldr	r3, [pc, #712]	@ (80076d0 <loadMenuTexts+0x364>)
 8007406:	4614      	mov	r4, r2
 8007408:	461d      	mov	r5, r3
 800740a:	6828      	ldr	r0, [r5, #0]
 800740c:	6869      	ldr	r1, [r5, #4]
 800740e:	68aa      	ldr	r2, [r5, #8]
 8007410:	68eb      	ldr	r3, [r5, #12]
 8007412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007414:	7c2b      	ldrb	r3, [r5, #16]
 8007416:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 8007418:	4aae      	ldr	r2, [pc, #696]	@ (80076d4 <loadMenuTexts+0x368>)
 800741a:	4baf      	ldr	r3, [pc, #700]	@ (80076d8 <loadMenuTexts+0x36c>)
 800741c:	4614      	mov	r4, r2
 800741e:	461d      	mov	r5, r3
 8007420:	6828      	ldr	r0, [r5, #0]
 8007422:	6869      	ldr	r1, [r5, #4]
 8007424:	68aa      	ldr	r2, [r5, #8]
 8007426:	68eb      	ldr	r3, [r5, #12]
 8007428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800742a:	7c2b      	ldrb	r3, [r5, #16]
 800742c:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 800742e:	4aab      	ldr	r2, [pc, #684]	@ (80076dc <loadMenuTexts+0x370>)
 8007430:	4bab      	ldr	r3, [pc, #684]	@ (80076e0 <loadMenuTexts+0x374>)
 8007432:	4614      	mov	r4, r2
 8007434:	461d      	mov	r5, r3
 8007436:	6828      	ldr	r0, [r5, #0]
 8007438:	6869      	ldr	r1, [r5, #4]
 800743a:	68aa      	ldr	r2, [r5, #8]
 800743c:	68eb      	ldr	r3, [r5, #12]
 800743e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007440:	7c2b      	ldrb	r3, [r5, #16]
 8007442:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8007444:	4aa7      	ldr	r2, [pc, #668]	@ (80076e4 <loadMenuTexts+0x378>)
 8007446:	4ba8      	ldr	r3, [pc, #672]	@ (80076e8 <loadMenuTexts+0x37c>)
 8007448:	4614      	mov	r4, r2
 800744a:	461d      	mov	r5, r3
 800744c:	6828      	ldr	r0, [r5, #0]
 800744e:	6869      	ldr	r1, [r5, #4]
 8007450:	68aa      	ldr	r2, [r5, #8]
 8007452:	68eb      	ldr	r3, [r5, #12]
 8007454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007456:	7c2b      	ldrb	r3, [r5, #16]
 8007458:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 800745a:	4aa4      	ldr	r2, [pc, #656]	@ (80076ec <loadMenuTexts+0x380>)
 800745c:	4ba4      	ldr	r3, [pc, #656]	@ (80076f0 <loadMenuTexts+0x384>)
 800745e:	4614      	mov	r4, r2
 8007460:	461d      	mov	r5, r3
 8007462:	6828      	ldr	r0, [r5, #0]
 8007464:	6869      	ldr	r1, [r5, #4]
 8007466:	68aa      	ldr	r2, [r5, #8]
 8007468:	68eb      	ldr	r3, [r5, #12]
 800746a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800746c:	7c2b      	ldrb	r3, [r5, #16]
 800746e:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8007470:	4aa0      	ldr	r2, [pc, #640]	@ (80076f4 <loadMenuTexts+0x388>)
 8007472:	4ba1      	ldr	r3, [pc, #644]	@ (80076f8 <loadMenuTexts+0x38c>)
 8007474:	4614      	mov	r4, r2
 8007476:	461d      	mov	r5, r3
 8007478:	6828      	ldr	r0, [r5, #0]
 800747a:	6869      	ldr	r1, [r5, #4]
 800747c:	68aa      	ldr	r2, [r5, #8]
 800747e:	68eb      	ldr	r3, [r5, #12]
 8007480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007482:	7c2b      	ldrb	r3, [r5, #16]
 8007484:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8007486:	4a9d      	ldr	r2, [pc, #628]	@ (80076fc <loadMenuTexts+0x390>)
 8007488:	4b9d      	ldr	r3, [pc, #628]	@ (8007700 <loadMenuTexts+0x394>)
 800748a:	4614      	mov	r4, r2
 800748c:	461d      	mov	r5, r3
 800748e:	6828      	ldr	r0, [r5, #0]
 8007490:	6869      	ldr	r1, [r5, #4]
 8007492:	68aa      	ldr	r2, [r5, #8]
 8007494:	68eb      	ldr	r3, [r5, #12]
 8007496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007498:	7c2b      	ldrb	r3, [r5, #16]
 800749a:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 800749c:	4a99      	ldr	r2, [pc, #612]	@ (8007704 <loadMenuTexts+0x398>)
 800749e:	4b9a      	ldr	r3, [pc, #616]	@ (8007708 <loadMenuTexts+0x39c>)
 80074a0:	4614      	mov	r4, r2
 80074a2:	461d      	mov	r5, r3
 80074a4:	6828      	ldr	r0, [r5, #0]
 80074a6:	6869      	ldr	r1, [r5, #4]
 80074a8:	68aa      	ldr	r2, [r5, #8]
 80074aa:	68eb      	ldr	r3, [r5, #12]
 80074ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074ae:	7c2b      	ldrb	r3, [r5, #16]
 80074b0:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 80074b2:	4a96      	ldr	r2, [pc, #600]	@ (800770c <loadMenuTexts+0x3a0>)
 80074b4:	4b96      	ldr	r3, [pc, #600]	@ (8007710 <loadMenuTexts+0x3a4>)
 80074b6:	4614      	mov	r4, r2
 80074b8:	461d      	mov	r5, r3
 80074ba:	6828      	ldr	r0, [r5, #0]
 80074bc:	6869      	ldr	r1, [r5, #4]
 80074be:	68aa      	ldr	r2, [r5, #8]
 80074c0:	68eb      	ldr	r3, [r5, #12]
 80074c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074c4:	7c2b      	ldrb	r3, [r5, #16]
 80074c6:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 80074c8:	4a92      	ldr	r2, [pc, #584]	@ (8007714 <loadMenuTexts+0x3a8>)
 80074ca:	4b93      	ldr	r3, [pc, #588]	@ (8007718 <loadMenuTexts+0x3ac>)
 80074cc:	4614      	mov	r4, r2
 80074ce:	461d      	mov	r5, r3
 80074d0:	6828      	ldr	r0, [r5, #0]
 80074d2:	6869      	ldr	r1, [r5, #4]
 80074d4:	68aa      	ldr	r2, [r5, #8]
 80074d6:	68eb      	ldr	r3, [r5, #12]
 80074d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074da:	7c2b      	ldrb	r3, [r5, #16]
 80074dc:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 80074de:	4a8f      	ldr	r2, [pc, #572]	@ (800771c <loadMenuTexts+0x3b0>)
 80074e0:	4b8f      	ldr	r3, [pc, #572]	@ (8007720 <loadMenuTexts+0x3b4>)
 80074e2:	4614      	mov	r4, r2
 80074e4:	461d      	mov	r5, r3
 80074e6:	6828      	ldr	r0, [r5, #0]
 80074e8:	6869      	ldr	r1, [r5, #4]
 80074ea:	68aa      	ldr	r2, [r5, #8]
 80074ec:	68eb      	ldr	r3, [r5, #12]
 80074ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074f0:	7c2b      	ldrb	r3, [r5, #16]
 80074f2:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 80074f4:	4a8b      	ldr	r2, [pc, #556]	@ (8007724 <loadMenuTexts+0x3b8>)
 80074f6:	4b8c      	ldr	r3, [pc, #560]	@ (8007728 <loadMenuTexts+0x3bc>)
 80074f8:	4614      	mov	r4, r2
 80074fa:	461d      	mov	r5, r3
 80074fc:	6828      	ldr	r0, [r5, #0]
 80074fe:	6869      	ldr	r1, [r5, #4]
 8007500:	68aa      	ldr	r2, [r5, #8]
 8007502:	68eb      	ldr	r3, [r5, #12]
 8007504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007506:	7c2b      	ldrb	r3, [r5, #16]
 8007508:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 800750a:	4a88      	ldr	r2, [pc, #544]	@ (800772c <loadMenuTexts+0x3c0>)
 800750c:	4b88      	ldr	r3, [pc, #544]	@ (8007730 <loadMenuTexts+0x3c4>)
 800750e:	4614      	mov	r4, r2
 8007510:	461d      	mov	r5, r3
 8007512:	6828      	ldr	r0, [r5, #0]
 8007514:	6869      	ldr	r1, [r5, #4]
 8007516:	68aa      	ldr	r2, [r5, #8]
 8007518:	68eb      	ldr	r3, [r5, #12]
 800751a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800751c:	7c2b      	ldrb	r3, [r5, #16]
 800751e:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 8007520:	4a84      	ldr	r2, [pc, #528]	@ (8007734 <loadMenuTexts+0x3c8>)
 8007522:	4b85      	ldr	r3, [pc, #532]	@ (8007738 <loadMenuTexts+0x3cc>)
 8007524:	4614      	mov	r4, r2
 8007526:	461d      	mov	r5, r3
 8007528:	6828      	ldr	r0, [r5, #0]
 800752a:	6869      	ldr	r1, [r5, #4]
 800752c:	68aa      	ldr	r2, [r5, #8]
 800752e:	68eb      	ldr	r3, [r5, #12]
 8007530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007532:	7c2b      	ldrb	r3, [r5, #16]
 8007534:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 8007536:	4a81      	ldr	r2, [pc, #516]	@ (800773c <loadMenuTexts+0x3d0>)
 8007538:	4b81      	ldr	r3, [pc, #516]	@ (8007740 <loadMenuTexts+0x3d4>)
 800753a:	4614      	mov	r4, r2
 800753c:	461d      	mov	r5, r3
 800753e:	6828      	ldr	r0, [r5, #0]
 8007540:	6869      	ldr	r1, [r5, #4]
 8007542:	68aa      	ldr	r2, [r5, #8]
 8007544:	68eb      	ldr	r3, [r5, #12]
 8007546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007548:	7c2b      	ldrb	r3, [r5, #16]
 800754a:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 800754c:	4a7d      	ldr	r2, [pc, #500]	@ (8007744 <loadMenuTexts+0x3d8>)
 800754e:	4b7e      	ldr	r3, [pc, #504]	@ (8007748 <loadMenuTexts+0x3dc>)
 8007550:	4614      	mov	r4, r2
 8007552:	461d      	mov	r5, r3
 8007554:	6828      	ldr	r0, [r5, #0]
 8007556:	6869      	ldr	r1, [r5, #4]
 8007558:	68aa      	ldr	r2, [r5, #8]
 800755a:	68eb      	ldr	r3, [r5, #12]
 800755c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800755e:	7c2b      	ldrb	r3, [r5, #16]
 8007560:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 8007562:	4a7a      	ldr	r2, [pc, #488]	@ (800774c <loadMenuTexts+0x3e0>)
 8007564:	4b7a      	ldr	r3, [pc, #488]	@ (8007750 <loadMenuTexts+0x3e4>)
 8007566:	4614      	mov	r4, r2
 8007568:	461d      	mov	r5, r3
 800756a:	6828      	ldr	r0, [r5, #0]
 800756c:	6869      	ldr	r1, [r5, #4]
 800756e:	68aa      	ldr	r2, [r5, #8]
 8007570:	68eb      	ldr	r3, [r5, #12]
 8007572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007574:	7c2b      	ldrb	r3, [r5, #16]
 8007576:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 8007578:	4a76      	ldr	r2, [pc, #472]	@ (8007754 <loadMenuTexts+0x3e8>)
 800757a:	4b77      	ldr	r3, [pc, #476]	@ (8007758 <loadMenuTexts+0x3ec>)
 800757c:	4614      	mov	r4, r2
 800757e:	461d      	mov	r5, r3
 8007580:	6828      	ldr	r0, [r5, #0]
 8007582:	6869      	ldr	r1, [r5, #4]
 8007584:	68aa      	ldr	r2, [r5, #8]
 8007586:	68eb      	ldr	r3, [r5, #12]
 8007588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800758a:	7c2b      	ldrb	r3, [r5, #16]
 800758c:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 800758e:	4a73      	ldr	r2, [pc, #460]	@ (800775c <loadMenuTexts+0x3f0>)
 8007590:	4b73      	ldr	r3, [pc, #460]	@ (8007760 <loadMenuTexts+0x3f4>)
 8007592:	4614      	mov	r4, r2
 8007594:	461d      	mov	r5, r3
 8007596:	6828      	ldr	r0, [r5, #0]
 8007598:	6869      	ldr	r1, [r5, #4]
 800759a:	68aa      	ldr	r2, [r5, #8]
 800759c:	68eb      	ldr	r3, [r5, #12]
 800759e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075a0:	7c2b      	ldrb	r3, [r5, #16]
 80075a2:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 80075a4:	4a6f      	ldr	r2, [pc, #444]	@ (8007764 <loadMenuTexts+0x3f8>)
 80075a6:	4b70      	ldr	r3, [pc, #448]	@ (8007768 <loadMenuTexts+0x3fc>)
 80075a8:	4614      	mov	r4, r2
 80075aa:	461d      	mov	r5, r3
 80075ac:	6828      	ldr	r0, [r5, #0]
 80075ae:	6869      	ldr	r1, [r5, #4]
 80075b0:	68aa      	ldr	r2, [r5, #8]
 80075b2:	68eb      	ldr	r3, [r5, #12]
 80075b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075b6:	7c2b      	ldrb	r3, [r5, #16]
 80075b8:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 80075ba:	4a6c      	ldr	r2, [pc, #432]	@ (800776c <loadMenuTexts+0x400>)
 80075bc:	4b6c      	ldr	r3, [pc, #432]	@ (8007770 <loadMenuTexts+0x404>)
 80075be:	4614      	mov	r4, r2
 80075c0:	461d      	mov	r5, r3
 80075c2:	6828      	ldr	r0, [r5, #0]
 80075c4:	6869      	ldr	r1, [r5, #4]
 80075c6:	68aa      	ldr	r2, [r5, #8]
 80075c8:	68eb      	ldr	r3, [r5, #12]
 80075ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075cc:	7c2b      	ldrb	r3, [r5, #16]
 80075ce:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 80075d0:	4a68      	ldr	r2, [pc, #416]	@ (8007774 <loadMenuTexts+0x408>)
 80075d2:	4b69      	ldr	r3, [pc, #420]	@ (8007778 <loadMenuTexts+0x40c>)
 80075d4:	4614      	mov	r4, r2
 80075d6:	461d      	mov	r5, r3
 80075d8:	6828      	ldr	r0, [r5, #0]
 80075da:	6869      	ldr	r1, [r5, #4]
 80075dc:	68aa      	ldr	r2, [r5, #8]
 80075de:	68eb      	ldr	r3, [r5, #12]
 80075e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075e2:	7c2b      	ldrb	r3, [r5, #16]
 80075e4:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 80075e6:	4a65      	ldr	r2, [pc, #404]	@ (800777c <loadMenuTexts+0x410>)
 80075e8:	4b65      	ldr	r3, [pc, #404]	@ (8007780 <loadMenuTexts+0x414>)
 80075ea:	4614      	mov	r4, r2
 80075ec:	461d      	mov	r5, r3
 80075ee:	6828      	ldr	r0, [r5, #0]
 80075f0:	6869      	ldr	r1, [r5, #4]
 80075f2:	68aa      	ldr	r2, [r5, #8]
 80075f4:	68eb      	ldr	r3, [r5, #12]
 80075f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075f8:	7c2b      	ldrb	r3, [r5, #16]
 80075fa:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 80075fc:	4a61      	ldr	r2, [pc, #388]	@ (8007784 <loadMenuTexts+0x418>)
 80075fe:	4b62      	ldr	r3, [pc, #392]	@ (8007788 <loadMenuTexts+0x41c>)
 8007600:	4614      	mov	r4, r2
 8007602:	461d      	mov	r5, r3
 8007604:	6828      	ldr	r0, [r5, #0]
 8007606:	6869      	ldr	r1, [r5, #4]
 8007608:	68aa      	ldr	r2, [r5, #8]
 800760a:	68eb      	ldr	r3, [r5, #12]
 800760c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800760e:	7c2b      	ldrb	r3, [r5, #16]
 8007610:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 8007612:	4a5e      	ldr	r2, [pc, #376]	@ (800778c <loadMenuTexts+0x420>)
 8007614:	4b5e      	ldr	r3, [pc, #376]	@ (8007790 <loadMenuTexts+0x424>)
 8007616:	4614      	mov	r4, r2
 8007618:	461d      	mov	r5, r3
 800761a:	6828      	ldr	r0, [r5, #0]
 800761c:	6869      	ldr	r1, [r5, #4]
 800761e:	68aa      	ldr	r2, [r5, #8]
 8007620:	68eb      	ldr	r3, [r5, #12]
 8007622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007624:	7c2b      	ldrb	r3, [r5, #16]
 8007626:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 8007628:	4a5a      	ldr	r2, [pc, #360]	@ (8007794 <loadMenuTexts+0x428>)
 800762a:	4b5b      	ldr	r3, [pc, #364]	@ (8007798 <loadMenuTexts+0x42c>)
 800762c:	4614      	mov	r4, r2
 800762e:	461d      	mov	r5, r3
 8007630:	6828      	ldr	r0, [r5, #0]
 8007632:	6869      	ldr	r1, [r5, #4]
 8007634:	68aa      	ldr	r2, [r5, #8]
 8007636:	68eb      	ldr	r3, [r5, #12]
 8007638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800763a:	7c2b      	ldrb	r3, [r5, #16]
 800763c:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 800763e:	4a57      	ldr	r2, [pc, #348]	@ (800779c <loadMenuTexts+0x430>)
 8007640:	4b57      	ldr	r3, [pc, #348]	@ (80077a0 <loadMenuTexts+0x434>)
 8007642:	4614      	mov	r4, r2
 8007644:	461d      	mov	r5, r3
 8007646:	6828      	ldr	r0, [r5, #0]
 8007648:	6869      	ldr	r1, [r5, #4]
 800764a:	68aa      	ldr	r2, [r5, #8]
 800764c:	68eb      	ldr	r3, [r5, #12]
 800764e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007650:	7c2b      	ldrb	r3, [r5, #16]
 8007652:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 8007654:	4a53      	ldr	r2, [pc, #332]	@ (80077a4 <loadMenuTexts+0x438>)
 8007656:	4b54      	ldr	r3, [pc, #336]	@ (80077a8 <loadMenuTexts+0x43c>)
 8007658:	4614      	mov	r4, r2
 800765a:	461d      	mov	r5, r3
 800765c:	6828      	ldr	r0, [r5, #0]
 800765e:	6869      	ldr	r1, [r5, #4]
 8007660:	68aa      	ldr	r2, [r5, #8]
 8007662:	68eb      	ldr	r3, [r5, #12]
 8007664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007666:	7c2b      	ldrb	r3, [r5, #16]
 8007668:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 800766a:	4a50      	ldr	r2, [pc, #320]	@ (80077ac <loadMenuTexts+0x440>)
 800766c:	4b50      	ldr	r3, [pc, #320]	@ (80077b0 <loadMenuTexts+0x444>)
 800766e:	4614      	mov	r4, r2
 8007670:	461d      	mov	r5, r3
 8007672:	6828      	ldr	r0, [r5, #0]
 8007674:	6869      	ldr	r1, [r5, #4]
 8007676:	68aa      	ldr	r2, [r5, #8]
 8007678:	68eb      	ldr	r3, [r5, #12]
 800767a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800767c:	7c2b      	ldrb	r3, [r5, #16]
 800767e:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 8007680:	4a4c      	ldr	r2, [pc, #304]	@ (80077b4 <loadMenuTexts+0x448>)
 8007682:	4b4d      	ldr	r3, [pc, #308]	@ (80077b8 <loadMenuTexts+0x44c>)
 8007684:	4614      	mov	r4, r2
 8007686:	461d      	mov	r5, r3
 8007688:	6828      	ldr	r0, [r5, #0]
 800768a:	6869      	ldr	r1, [r5, #4]
 800768c:	68aa      	ldr	r2, [r5, #8]
 800768e:	68eb      	ldr	r3, [r5, #12]
 8007690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007692:	7c2b      	ldrb	r3, [r5, #16]
 8007694:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 8007696:	4a49      	ldr	r2, [pc, #292]	@ (80077bc <loadMenuTexts+0x450>)
 8007698:	e092      	b.n	80077c0 <loadMenuTexts+0x454>
 800769a:	bf00      	nop
 800769c:	200010d4 	.word	0x200010d4
 80076a0:	2000018c 	.word	0x2000018c
 80076a4:	200010e8 	.word	0x200010e8
 80076a8:	200001a0 	.word	0x200001a0
 80076ac:	200010fc 	.word	0x200010fc
 80076b0:	200001b4 	.word	0x200001b4
 80076b4:	20001110 	.word	0x20001110
 80076b8:	200001c8 	.word	0x200001c8
 80076bc:	20001124 	.word	0x20001124
 80076c0:	200001dc 	.word	0x200001dc
 80076c4:	20001138 	.word	0x20001138
 80076c8:	200001f0 	.word	0x200001f0
 80076cc:	2000114c 	.word	0x2000114c
 80076d0:	20000204 	.word	0x20000204
 80076d4:	20001160 	.word	0x20001160
 80076d8:	20000218 	.word	0x20000218
 80076dc:	20001174 	.word	0x20001174
 80076e0:	2000022c 	.word	0x2000022c
 80076e4:	20001188 	.word	0x20001188
 80076e8:	20000240 	.word	0x20000240
 80076ec:	2000119c 	.word	0x2000119c
 80076f0:	20000254 	.word	0x20000254
 80076f4:	200011b0 	.word	0x200011b0
 80076f8:	20000268 	.word	0x20000268
 80076fc:	200011c4 	.word	0x200011c4
 8007700:	2000027c 	.word	0x2000027c
 8007704:	200011d8 	.word	0x200011d8
 8007708:	20000290 	.word	0x20000290
 800770c:	200011ec 	.word	0x200011ec
 8007710:	200002a4 	.word	0x200002a4
 8007714:	20001200 	.word	0x20001200
 8007718:	200002b8 	.word	0x200002b8
 800771c:	20001214 	.word	0x20001214
 8007720:	200002cc 	.word	0x200002cc
 8007724:	20001228 	.word	0x20001228
 8007728:	200002e0 	.word	0x200002e0
 800772c:	2000123c 	.word	0x2000123c
 8007730:	200002f4 	.word	0x200002f4
 8007734:	20001250 	.word	0x20001250
 8007738:	20000308 	.word	0x20000308
 800773c:	20001264 	.word	0x20001264
 8007740:	2000031c 	.word	0x2000031c
 8007744:	20001278 	.word	0x20001278
 8007748:	20000330 	.word	0x20000330
 800774c:	2000128c 	.word	0x2000128c
 8007750:	20000344 	.word	0x20000344
 8007754:	200012a0 	.word	0x200012a0
 8007758:	20000358 	.word	0x20000358
 800775c:	200012b4 	.word	0x200012b4
 8007760:	2000036c 	.word	0x2000036c
 8007764:	200012c8 	.word	0x200012c8
 8007768:	20000380 	.word	0x20000380
 800776c:	200012dc 	.word	0x200012dc
 8007770:	20000394 	.word	0x20000394
 8007774:	200012f0 	.word	0x200012f0
 8007778:	200003a8 	.word	0x200003a8
 800777c:	20001304 	.word	0x20001304
 8007780:	200003bc 	.word	0x200003bc
 8007784:	20001318 	.word	0x20001318
 8007788:	200003d0 	.word	0x200003d0
 800778c:	2000132c 	.word	0x2000132c
 8007790:	200003e4 	.word	0x200003e4
 8007794:	20001340 	.word	0x20001340
 8007798:	200003f8 	.word	0x200003f8
 800779c:	20001354 	.word	0x20001354
 80077a0:	2000040c 	.word	0x2000040c
 80077a4:	20001368 	.word	0x20001368
 80077a8:	20000420 	.word	0x20000420
 80077ac:	2000137c 	.word	0x2000137c
 80077b0:	20000434 	.word	0x20000434
 80077b4:	20001390 	.word	0x20001390
 80077b8:	20000448 	.word	0x20000448
 80077bc:	200013a4 	.word	0x200013a4
 80077c0:	4bc7      	ldr	r3, [pc, #796]	@ (8007ae0 <loadMenuTexts+0x774>)
 80077c2:	4614      	mov	r4, r2
 80077c4:	461d      	mov	r5, r3
 80077c6:	6828      	ldr	r0, [r5, #0]
 80077c8:	6869      	ldr	r1, [r5, #4]
 80077ca:	68aa      	ldr	r2, [r5, #8]
 80077cc:	68eb      	ldr	r3, [r5, #12]
 80077ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077d0:	7c2b      	ldrb	r3, [r5, #16]
 80077d2:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 80077d4:	4ac3      	ldr	r2, [pc, #780]	@ (8007ae4 <loadMenuTexts+0x778>)
 80077d6:	4bc4      	ldr	r3, [pc, #784]	@ (8007ae8 <loadMenuTexts+0x77c>)
 80077d8:	4614      	mov	r4, r2
 80077da:	461d      	mov	r5, r3
 80077dc:	6828      	ldr	r0, [r5, #0]
 80077de:	6869      	ldr	r1, [r5, #4]
 80077e0:	68aa      	ldr	r2, [r5, #8]
 80077e2:	68eb      	ldr	r3, [r5, #12]
 80077e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077e6:	7c2b      	ldrb	r3, [r5, #16]
 80077e8:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 80077ea:	4ac0      	ldr	r2, [pc, #768]	@ (8007aec <loadMenuTexts+0x780>)
 80077ec:	4bc0      	ldr	r3, [pc, #768]	@ (8007af0 <loadMenuTexts+0x784>)
 80077ee:	4614      	mov	r4, r2
 80077f0:	461d      	mov	r5, r3
 80077f2:	6828      	ldr	r0, [r5, #0]
 80077f4:	6869      	ldr	r1, [r5, #4]
 80077f6:	68aa      	ldr	r2, [r5, #8]
 80077f8:	68eb      	ldr	r3, [r5, #12]
 80077fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80077fc:	7c2b      	ldrb	r3, [r5, #16]
 80077fe:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 8007800:	4abc      	ldr	r2, [pc, #752]	@ (8007af4 <loadMenuTexts+0x788>)
 8007802:	4bbd      	ldr	r3, [pc, #756]	@ (8007af8 <loadMenuTexts+0x78c>)
 8007804:	4614      	mov	r4, r2
 8007806:	461d      	mov	r5, r3
 8007808:	6828      	ldr	r0, [r5, #0]
 800780a:	6869      	ldr	r1, [r5, #4]
 800780c:	68aa      	ldr	r2, [r5, #8]
 800780e:	68eb      	ldr	r3, [r5, #12]
 8007810:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007812:	7c2b      	ldrb	r3, [r5, #16]
 8007814:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 8007816:	4ab9      	ldr	r2, [pc, #740]	@ (8007afc <loadMenuTexts+0x790>)
 8007818:	4bb9      	ldr	r3, [pc, #740]	@ (8007b00 <loadMenuTexts+0x794>)
 800781a:	4614      	mov	r4, r2
 800781c:	461d      	mov	r5, r3
 800781e:	6828      	ldr	r0, [r5, #0]
 8007820:	6869      	ldr	r1, [r5, #4]
 8007822:	68aa      	ldr	r2, [r5, #8]
 8007824:	68eb      	ldr	r3, [r5, #12]
 8007826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007828:	7c2b      	ldrb	r3, [r5, #16]
 800782a:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 800782c:	4ab5      	ldr	r2, [pc, #724]	@ (8007b04 <loadMenuTexts+0x798>)
 800782e:	4bb6      	ldr	r3, [pc, #728]	@ (8007b08 <loadMenuTexts+0x79c>)
 8007830:	4614      	mov	r4, r2
 8007832:	461d      	mov	r5, r3
 8007834:	6828      	ldr	r0, [r5, #0]
 8007836:	6869      	ldr	r1, [r5, #4]
 8007838:	68aa      	ldr	r2, [r5, #8]
 800783a:	68eb      	ldr	r3, [r5, #12]
 800783c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800783e:	7c2b      	ldrb	r3, [r5, #16]
 8007840:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 8007842:	4ab2      	ldr	r2, [pc, #712]	@ (8007b0c <loadMenuTexts+0x7a0>)
 8007844:	4bb2      	ldr	r3, [pc, #712]	@ (8007b10 <loadMenuTexts+0x7a4>)
 8007846:	4614      	mov	r4, r2
 8007848:	461d      	mov	r5, r3
 800784a:	6828      	ldr	r0, [r5, #0]
 800784c:	6869      	ldr	r1, [r5, #4]
 800784e:	68aa      	ldr	r2, [r5, #8]
 8007850:	68eb      	ldr	r3, [r5, #12]
 8007852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007854:	7c2b      	ldrb	r3, [r5, #16]
 8007856:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 8007858:	4aae      	ldr	r2, [pc, #696]	@ (8007b14 <loadMenuTexts+0x7a8>)
 800785a:	4baf      	ldr	r3, [pc, #700]	@ (8007b18 <loadMenuTexts+0x7ac>)
 800785c:	4614      	mov	r4, r2
 800785e:	461d      	mov	r5, r3
 8007860:	6828      	ldr	r0, [r5, #0]
 8007862:	6869      	ldr	r1, [r5, #4]
 8007864:	68aa      	ldr	r2, [r5, #8]
 8007866:	68eb      	ldr	r3, [r5, #12]
 8007868:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800786a:	7c2b      	ldrb	r3, [r5, #16]
 800786c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 800786e:	4aab      	ldr	r2, [pc, #684]	@ (8007b1c <loadMenuTexts+0x7b0>)
 8007870:	4bab      	ldr	r3, [pc, #684]	@ (8007b20 <loadMenuTexts+0x7b4>)
 8007872:	4614      	mov	r4, r2
 8007874:	461d      	mov	r5, r3
 8007876:	6828      	ldr	r0, [r5, #0]
 8007878:	6869      	ldr	r1, [r5, #4]
 800787a:	68aa      	ldr	r2, [r5, #8]
 800787c:	68eb      	ldr	r3, [r5, #12]
 800787e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007880:	7c2b      	ldrb	r3, [r5, #16]
 8007882:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 8007884:	4aa7      	ldr	r2, [pc, #668]	@ (8007b24 <loadMenuTexts+0x7b8>)
 8007886:	4ba8      	ldr	r3, [pc, #672]	@ (8007b28 <loadMenuTexts+0x7bc>)
 8007888:	4614      	mov	r4, r2
 800788a:	461d      	mov	r5, r3
 800788c:	6828      	ldr	r0, [r5, #0]
 800788e:	6869      	ldr	r1, [r5, #4]
 8007890:	68aa      	ldr	r2, [r5, #8]
 8007892:	68eb      	ldr	r3, [r5, #12]
 8007894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007896:	7c2b      	ldrb	r3, [r5, #16]
 8007898:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 800789a:	4aa4      	ldr	r2, [pc, #656]	@ (8007b2c <loadMenuTexts+0x7c0>)
 800789c:	4ba4      	ldr	r3, [pc, #656]	@ (8007b30 <loadMenuTexts+0x7c4>)
 800789e:	4614      	mov	r4, r2
 80078a0:	461d      	mov	r5, r3
 80078a2:	6828      	ldr	r0, [r5, #0]
 80078a4:	6869      	ldr	r1, [r5, #4]
 80078a6:	68aa      	ldr	r2, [r5, #8]
 80078a8:	68eb      	ldr	r3, [r5, #12]
 80078aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078ac:	7c2b      	ldrb	r3, [r5, #16]
 80078ae:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 80078b0:	4aa0      	ldr	r2, [pc, #640]	@ (8007b34 <loadMenuTexts+0x7c8>)
 80078b2:	4ba1      	ldr	r3, [pc, #644]	@ (8007b38 <loadMenuTexts+0x7cc>)
 80078b4:	4614      	mov	r4, r2
 80078b6:	461d      	mov	r5, r3
 80078b8:	6828      	ldr	r0, [r5, #0]
 80078ba:	6869      	ldr	r1, [r5, #4]
 80078bc:	68aa      	ldr	r2, [r5, #8]
 80078be:	68eb      	ldr	r3, [r5, #12]
 80078c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078c2:	7c2b      	ldrb	r3, [r5, #16]
 80078c4:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 80078c6:	4a9d      	ldr	r2, [pc, #628]	@ (8007b3c <loadMenuTexts+0x7d0>)
 80078c8:	4b9d      	ldr	r3, [pc, #628]	@ (8007b40 <loadMenuTexts+0x7d4>)
 80078ca:	4614      	mov	r4, r2
 80078cc:	461d      	mov	r5, r3
 80078ce:	6828      	ldr	r0, [r5, #0]
 80078d0:	6869      	ldr	r1, [r5, #4]
 80078d2:	68aa      	ldr	r2, [r5, #8]
 80078d4:	68eb      	ldr	r3, [r5, #12]
 80078d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078d8:	7c2b      	ldrb	r3, [r5, #16]
 80078da:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 80078dc:	4a99      	ldr	r2, [pc, #612]	@ (8007b44 <loadMenuTexts+0x7d8>)
 80078de:	4b9a      	ldr	r3, [pc, #616]	@ (8007b48 <loadMenuTexts+0x7dc>)
 80078e0:	4614      	mov	r4, r2
 80078e2:	461d      	mov	r5, r3
 80078e4:	6828      	ldr	r0, [r5, #0]
 80078e6:	6869      	ldr	r1, [r5, #4]
 80078e8:	68aa      	ldr	r2, [r5, #8]
 80078ea:	68eb      	ldr	r3, [r5, #12]
 80078ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80078ee:	7c2b      	ldrb	r3, [r5, #16]
 80078f0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 80078f2:	4a96      	ldr	r2, [pc, #600]	@ (8007b4c <loadMenuTexts+0x7e0>)
 80078f4:	4b96      	ldr	r3, [pc, #600]	@ (8007b50 <loadMenuTexts+0x7e4>)
 80078f6:	4614      	mov	r4, r2
 80078f8:	461d      	mov	r5, r3
 80078fa:	6828      	ldr	r0, [r5, #0]
 80078fc:	6869      	ldr	r1, [r5, #4]
 80078fe:	68aa      	ldr	r2, [r5, #8]
 8007900:	68eb      	ldr	r3, [r5, #12]
 8007902:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007904:	7c2b      	ldrb	r3, [r5, #16]
 8007906:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 8007908:	4a92      	ldr	r2, [pc, #584]	@ (8007b54 <loadMenuTexts+0x7e8>)
 800790a:	4b93      	ldr	r3, [pc, #588]	@ (8007b58 <loadMenuTexts+0x7ec>)
 800790c:	4614      	mov	r4, r2
 800790e:	461d      	mov	r5, r3
 8007910:	6828      	ldr	r0, [r5, #0]
 8007912:	6869      	ldr	r1, [r5, #4]
 8007914:	68aa      	ldr	r2, [r5, #8]
 8007916:	68eb      	ldr	r3, [r5, #12]
 8007918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800791a:	7c2b      	ldrb	r3, [r5, #16]
 800791c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 800791e:	4a8f      	ldr	r2, [pc, #572]	@ (8007b5c <loadMenuTexts+0x7f0>)
 8007920:	4b8f      	ldr	r3, [pc, #572]	@ (8007b60 <loadMenuTexts+0x7f4>)
 8007922:	4614      	mov	r4, r2
 8007924:	461d      	mov	r5, r3
 8007926:	6828      	ldr	r0, [r5, #0]
 8007928:	6869      	ldr	r1, [r5, #4]
 800792a:	68aa      	ldr	r2, [r5, #8]
 800792c:	68eb      	ldr	r3, [r5, #12]
 800792e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007930:	7c2b      	ldrb	r3, [r5, #16]
 8007932:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 8007934:	4a8b      	ldr	r2, [pc, #556]	@ (8007b64 <loadMenuTexts+0x7f8>)
 8007936:	4b8c      	ldr	r3, [pc, #560]	@ (8007b68 <loadMenuTexts+0x7fc>)
 8007938:	4614      	mov	r4, r2
 800793a:	461d      	mov	r5, r3
 800793c:	6828      	ldr	r0, [r5, #0]
 800793e:	6869      	ldr	r1, [r5, #4]
 8007940:	68aa      	ldr	r2, [r5, #8]
 8007942:	68eb      	ldr	r3, [r5, #12]
 8007944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007946:	7c2b      	ldrb	r3, [r5, #16]
 8007948:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 800794a:	4a88      	ldr	r2, [pc, #544]	@ (8007b6c <loadMenuTexts+0x800>)
 800794c:	4b88      	ldr	r3, [pc, #544]	@ (8007b70 <loadMenuTexts+0x804>)
 800794e:	4614      	mov	r4, r2
 8007950:	461d      	mov	r5, r3
 8007952:	6828      	ldr	r0, [r5, #0]
 8007954:	6869      	ldr	r1, [r5, #4]
 8007956:	68aa      	ldr	r2, [r5, #8]
 8007958:	68eb      	ldr	r3, [r5, #12]
 800795a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800795c:	7c2b      	ldrb	r3, [r5, #16]
 800795e:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 8007960:	4a84      	ldr	r2, [pc, #528]	@ (8007b74 <loadMenuTexts+0x808>)
 8007962:	4b85      	ldr	r3, [pc, #532]	@ (8007b78 <loadMenuTexts+0x80c>)
 8007964:	4614      	mov	r4, r2
 8007966:	461d      	mov	r5, r3
 8007968:	6828      	ldr	r0, [r5, #0]
 800796a:	6869      	ldr	r1, [r5, #4]
 800796c:	68aa      	ldr	r2, [r5, #8]
 800796e:	68eb      	ldr	r3, [r5, #12]
 8007970:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007972:	7c2b      	ldrb	r3, [r5, #16]
 8007974:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 8007976:	4a81      	ldr	r2, [pc, #516]	@ (8007b7c <loadMenuTexts+0x810>)
 8007978:	4b81      	ldr	r3, [pc, #516]	@ (8007b80 <loadMenuTexts+0x814>)
 800797a:	4614      	mov	r4, r2
 800797c:	461d      	mov	r5, r3
 800797e:	6828      	ldr	r0, [r5, #0]
 8007980:	6869      	ldr	r1, [r5, #4]
 8007982:	68aa      	ldr	r2, [r5, #8]
 8007984:	68eb      	ldr	r3, [r5, #12]
 8007986:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007988:	7c2b      	ldrb	r3, [r5, #16]
 800798a:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 800798c:	4a7d      	ldr	r2, [pc, #500]	@ (8007b84 <loadMenuTexts+0x818>)
 800798e:	4b7e      	ldr	r3, [pc, #504]	@ (8007b88 <loadMenuTexts+0x81c>)
 8007990:	4614      	mov	r4, r2
 8007992:	461d      	mov	r5, r3
 8007994:	6828      	ldr	r0, [r5, #0]
 8007996:	6869      	ldr	r1, [r5, #4]
 8007998:	68aa      	ldr	r2, [r5, #8]
 800799a:	68eb      	ldr	r3, [r5, #12]
 800799c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800799e:	7c2b      	ldrb	r3, [r5, #16]
 80079a0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 80079a2:	4a7a      	ldr	r2, [pc, #488]	@ (8007b8c <loadMenuTexts+0x820>)
 80079a4:	4b7a      	ldr	r3, [pc, #488]	@ (8007b90 <loadMenuTexts+0x824>)
 80079a6:	4614      	mov	r4, r2
 80079a8:	461d      	mov	r5, r3
 80079aa:	6828      	ldr	r0, [r5, #0]
 80079ac:	6869      	ldr	r1, [r5, #4]
 80079ae:	68aa      	ldr	r2, [r5, #8]
 80079b0:	68eb      	ldr	r3, [r5, #12]
 80079b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079b4:	7c2b      	ldrb	r3, [r5, #16]
 80079b6:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 80079b8:	4a76      	ldr	r2, [pc, #472]	@ (8007b94 <loadMenuTexts+0x828>)
 80079ba:	4b77      	ldr	r3, [pc, #476]	@ (8007b98 <loadMenuTexts+0x82c>)
 80079bc:	4614      	mov	r4, r2
 80079be:	461d      	mov	r5, r3
 80079c0:	6828      	ldr	r0, [r5, #0]
 80079c2:	6869      	ldr	r1, [r5, #4]
 80079c4:	68aa      	ldr	r2, [r5, #8]
 80079c6:	68eb      	ldr	r3, [r5, #12]
 80079c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079ca:	7c2b      	ldrb	r3, [r5, #16]
 80079cc:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 80079ce:	4a73      	ldr	r2, [pc, #460]	@ (8007b9c <loadMenuTexts+0x830>)
 80079d0:	4b73      	ldr	r3, [pc, #460]	@ (8007ba0 <loadMenuTexts+0x834>)
 80079d2:	4614      	mov	r4, r2
 80079d4:	461d      	mov	r5, r3
 80079d6:	6828      	ldr	r0, [r5, #0]
 80079d8:	6869      	ldr	r1, [r5, #4]
 80079da:	68aa      	ldr	r2, [r5, #8]
 80079dc:	68eb      	ldr	r3, [r5, #12]
 80079de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079e0:	7c2b      	ldrb	r3, [r5, #16]
 80079e2:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 80079e4:	4a6f      	ldr	r2, [pc, #444]	@ (8007ba4 <loadMenuTexts+0x838>)
 80079e6:	4b70      	ldr	r3, [pc, #448]	@ (8007ba8 <loadMenuTexts+0x83c>)
 80079e8:	4614      	mov	r4, r2
 80079ea:	461d      	mov	r5, r3
 80079ec:	6828      	ldr	r0, [r5, #0]
 80079ee:	6869      	ldr	r1, [r5, #4]
 80079f0:	68aa      	ldr	r2, [r5, #8]
 80079f2:	68eb      	ldr	r3, [r5, #12]
 80079f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079f6:	7c2b      	ldrb	r3, [r5, #16]
 80079f8:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 80079fa:	4a6c      	ldr	r2, [pc, #432]	@ (8007bac <loadMenuTexts+0x840>)
 80079fc:	4b6c      	ldr	r3, [pc, #432]	@ (8007bb0 <loadMenuTexts+0x844>)
 80079fe:	4614      	mov	r4, r2
 8007a00:	461d      	mov	r5, r3
 8007a02:	6828      	ldr	r0, [r5, #0]
 8007a04:	6869      	ldr	r1, [r5, #4]
 8007a06:	68aa      	ldr	r2, [r5, #8]
 8007a08:	68eb      	ldr	r3, [r5, #12]
 8007a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a0c:	7c2b      	ldrb	r3, [r5, #16]
 8007a0e:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 8007a10:	4a68      	ldr	r2, [pc, #416]	@ (8007bb4 <loadMenuTexts+0x848>)
 8007a12:	4b69      	ldr	r3, [pc, #420]	@ (8007bb8 <loadMenuTexts+0x84c>)
 8007a14:	4614      	mov	r4, r2
 8007a16:	461d      	mov	r5, r3
 8007a18:	6828      	ldr	r0, [r5, #0]
 8007a1a:	6869      	ldr	r1, [r5, #4]
 8007a1c:	68aa      	ldr	r2, [r5, #8]
 8007a1e:	68eb      	ldr	r3, [r5, #12]
 8007a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a22:	7c2b      	ldrb	r3, [r5, #16]
 8007a24:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 8007a26:	4a65      	ldr	r2, [pc, #404]	@ (8007bbc <loadMenuTexts+0x850>)
 8007a28:	4b65      	ldr	r3, [pc, #404]	@ (8007bc0 <loadMenuTexts+0x854>)
 8007a2a:	4614      	mov	r4, r2
 8007a2c:	461d      	mov	r5, r3
 8007a2e:	6828      	ldr	r0, [r5, #0]
 8007a30:	6869      	ldr	r1, [r5, #4]
 8007a32:	68aa      	ldr	r2, [r5, #8]
 8007a34:	68eb      	ldr	r3, [r5, #12]
 8007a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a38:	7c2b      	ldrb	r3, [r5, #16]
 8007a3a:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 8007a3c:	4a61      	ldr	r2, [pc, #388]	@ (8007bc4 <loadMenuTexts+0x858>)
 8007a3e:	4b62      	ldr	r3, [pc, #392]	@ (8007bc8 <loadMenuTexts+0x85c>)
 8007a40:	4614      	mov	r4, r2
 8007a42:	461d      	mov	r5, r3
 8007a44:	6828      	ldr	r0, [r5, #0]
 8007a46:	6869      	ldr	r1, [r5, #4]
 8007a48:	68aa      	ldr	r2, [r5, #8]
 8007a4a:	68eb      	ldr	r3, [r5, #12]
 8007a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a4e:	7c2b      	ldrb	r3, [r5, #16]
 8007a50:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 8007a52:	4a5e      	ldr	r2, [pc, #376]	@ (8007bcc <loadMenuTexts+0x860>)
 8007a54:	4b5e      	ldr	r3, [pc, #376]	@ (8007bd0 <loadMenuTexts+0x864>)
 8007a56:	4614      	mov	r4, r2
 8007a58:	461d      	mov	r5, r3
 8007a5a:	6828      	ldr	r0, [r5, #0]
 8007a5c:	6869      	ldr	r1, [r5, #4]
 8007a5e:	68aa      	ldr	r2, [r5, #8]
 8007a60:	68eb      	ldr	r3, [r5, #12]
 8007a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a64:	7c2b      	ldrb	r3, [r5, #16]
 8007a66:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 8007a68:	4a5a      	ldr	r2, [pc, #360]	@ (8007bd4 <loadMenuTexts+0x868>)
 8007a6a:	4b5b      	ldr	r3, [pc, #364]	@ (8007bd8 <loadMenuTexts+0x86c>)
 8007a6c:	4614      	mov	r4, r2
 8007a6e:	461d      	mov	r5, r3
 8007a70:	6828      	ldr	r0, [r5, #0]
 8007a72:	6869      	ldr	r1, [r5, #4]
 8007a74:	68aa      	ldr	r2, [r5, #8]
 8007a76:	68eb      	ldr	r3, [r5, #12]
 8007a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a7a:	7c2b      	ldrb	r3, [r5, #16]
 8007a7c:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 8007a7e:	4a57      	ldr	r2, [pc, #348]	@ (8007bdc <loadMenuTexts+0x870>)
 8007a80:	4b57      	ldr	r3, [pc, #348]	@ (8007be0 <loadMenuTexts+0x874>)
 8007a82:	4614      	mov	r4, r2
 8007a84:	461d      	mov	r5, r3
 8007a86:	6828      	ldr	r0, [r5, #0]
 8007a88:	6869      	ldr	r1, [r5, #4]
 8007a8a:	68aa      	ldr	r2, [r5, #8]
 8007a8c:	68eb      	ldr	r3, [r5, #12]
 8007a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a90:	7c2b      	ldrb	r3, [r5, #16]
 8007a92:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 8007a94:	4a53      	ldr	r2, [pc, #332]	@ (8007be4 <loadMenuTexts+0x878>)
 8007a96:	4b54      	ldr	r3, [pc, #336]	@ (8007be8 <loadMenuTexts+0x87c>)
 8007a98:	4614      	mov	r4, r2
 8007a9a:	461d      	mov	r5, r3
 8007a9c:	6828      	ldr	r0, [r5, #0]
 8007a9e:	6869      	ldr	r1, [r5, #4]
 8007aa0:	68aa      	ldr	r2, [r5, #8]
 8007aa2:	68eb      	ldr	r3, [r5, #12]
 8007aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007aa6:	7c2b      	ldrb	r3, [r5, #16]
 8007aa8:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 8007aaa:	4a50      	ldr	r2, [pc, #320]	@ (8007bec <loadMenuTexts+0x880>)
 8007aac:	4b50      	ldr	r3, [pc, #320]	@ (8007bf0 <loadMenuTexts+0x884>)
 8007aae:	4614      	mov	r4, r2
 8007ab0:	461d      	mov	r5, r3
 8007ab2:	6828      	ldr	r0, [r5, #0]
 8007ab4:	6869      	ldr	r1, [r5, #4]
 8007ab6:	68aa      	ldr	r2, [r5, #8]
 8007ab8:	68eb      	ldr	r3, [r5, #12]
 8007aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007abc:	7c2b      	ldrb	r3, [r5, #16]
 8007abe:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 8007ac0:	4a4c      	ldr	r2, [pc, #304]	@ (8007bf4 <loadMenuTexts+0x888>)
 8007ac2:	4b4d      	ldr	r3, [pc, #308]	@ (8007bf8 <loadMenuTexts+0x88c>)
 8007ac4:	4614      	mov	r4, r2
 8007ac6:	461d      	mov	r5, r3
 8007ac8:	6828      	ldr	r0, [r5, #0]
 8007aca:	6869      	ldr	r1, [r5, #4]
 8007acc:	68aa      	ldr	r2, [r5, #8]
 8007ace:	68eb      	ldr	r3, [r5, #12]
 8007ad0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ad2:	7c2b      	ldrb	r3, [r5, #16]
 8007ad4:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 8007ad6:	4a49      	ldr	r2, [pc, #292]	@ (8007bfc <loadMenuTexts+0x890>)
 8007ad8:	4b49      	ldr	r3, [pc, #292]	@ (8007c00 <loadMenuTexts+0x894>)
 8007ada:	4614      	mov	r4, r2
 8007adc:	461d      	mov	r5, r3
 8007ade:	e091      	b.n	8007c04 <loadMenuTexts+0x898>
 8007ae0:	2000045c 	.word	0x2000045c
 8007ae4:	200013b8 	.word	0x200013b8
 8007ae8:	20000470 	.word	0x20000470
 8007aec:	200013cc 	.word	0x200013cc
 8007af0:	20000484 	.word	0x20000484
 8007af4:	200013e0 	.word	0x200013e0
 8007af8:	20000498 	.word	0x20000498
 8007afc:	200013f4 	.word	0x200013f4
 8007b00:	200004ac 	.word	0x200004ac
 8007b04:	20001408 	.word	0x20001408
 8007b08:	200004c0 	.word	0x200004c0
 8007b0c:	2000141c 	.word	0x2000141c
 8007b10:	200004d4 	.word	0x200004d4
 8007b14:	20001430 	.word	0x20001430
 8007b18:	200004e8 	.word	0x200004e8
 8007b1c:	20001444 	.word	0x20001444
 8007b20:	200004fc 	.word	0x200004fc
 8007b24:	20001458 	.word	0x20001458
 8007b28:	20000510 	.word	0x20000510
 8007b2c:	2000146c 	.word	0x2000146c
 8007b30:	20000524 	.word	0x20000524
 8007b34:	20001480 	.word	0x20001480
 8007b38:	20000538 	.word	0x20000538
 8007b3c:	20001494 	.word	0x20001494
 8007b40:	2000054c 	.word	0x2000054c
 8007b44:	200014a8 	.word	0x200014a8
 8007b48:	20000560 	.word	0x20000560
 8007b4c:	200014bc 	.word	0x200014bc
 8007b50:	20000574 	.word	0x20000574
 8007b54:	200014d0 	.word	0x200014d0
 8007b58:	20000588 	.word	0x20000588
 8007b5c:	200014e4 	.word	0x200014e4
 8007b60:	2000059c 	.word	0x2000059c
 8007b64:	200014f8 	.word	0x200014f8
 8007b68:	200005b0 	.word	0x200005b0
 8007b6c:	2000150c 	.word	0x2000150c
 8007b70:	200005c4 	.word	0x200005c4
 8007b74:	20001520 	.word	0x20001520
 8007b78:	200005d8 	.word	0x200005d8
 8007b7c:	20001534 	.word	0x20001534
 8007b80:	200005ec 	.word	0x200005ec
 8007b84:	20001548 	.word	0x20001548
 8007b88:	20000600 	.word	0x20000600
 8007b8c:	2000155c 	.word	0x2000155c
 8007b90:	20000614 	.word	0x20000614
 8007b94:	20001570 	.word	0x20001570
 8007b98:	20000628 	.word	0x20000628
 8007b9c:	20001584 	.word	0x20001584
 8007ba0:	2000063c 	.word	0x2000063c
 8007ba4:	20001598 	.word	0x20001598
 8007ba8:	20000650 	.word	0x20000650
 8007bac:	200015ac 	.word	0x200015ac
 8007bb0:	20000664 	.word	0x20000664
 8007bb4:	200015c0 	.word	0x200015c0
 8007bb8:	20000678 	.word	0x20000678
 8007bbc:	200015d4 	.word	0x200015d4
 8007bc0:	2000068c 	.word	0x2000068c
 8007bc4:	200015e8 	.word	0x200015e8
 8007bc8:	200006a0 	.word	0x200006a0
 8007bcc:	200015fc 	.word	0x200015fc
 8007bd0:	200006b4 	.word	0x200006b4
 8007bd4:	20001610 	.word	0x20001610
 8007bd8:	200006c8 	.word	0x200006c8
 8007bdc:	20001624 	.word	0x20001624
 8007be0:	200006dc 	.word	0x200006dc
 8007be4:	20001638 	.word	0x20001638
 8007be8:	200006f0 	.word	0x200006f0
 8007bec:	2000164c 	.word	0x2000164c
 8007bf0:	20000c7c 	.word	0x20000c7c
 8007bf4:	20001660 	.word	0x20001660
 8007bf8:	20000c90 	.word	0x20000c90
 8007bfc:	20001674 	.word	0x20001674
 8007c00:	20000ca4 	.word	0x20000ca4
 8007c04:	6828      	ldr	r0, [r5, #0]
 8007c06:	6869      	ldr	r1, [r5, #4]
 8007c08:	68aa      	ldr	r2, [r5, #8]
 8007c0a:	68eb      	ldr	r3, [r5, #12]
 8007c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c0e:	7c2b      	ldrb	r3, [r5, #16]
 8007c10:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 8007c12:	4a59      	ldr	r2, [pc, #356]	@ (8007d78 <loadMenuTexts+0xa0c>)
 8007c14:	4b59      	ldr	r3, [pc, #356]	@ (8007d7c <loadMenuTexts+0xa10>)
 8007c16:	4614      	mov	r4, r2
 8007c18:	461d      	mov	r5, r3
 8007c1a:	6828      	ldr	r0, [r5, #0]
 8007c1c:	6869      	ldr	r1, [r5, #4]
 8007c1e:	68aa      	ldr	r2, [r5, #8]
 8007c20:	68eb      	ldr	r3, [r5, #12]
 8007c22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c24:	7c2b      	ldrb	r3, [r5, #16]
 8007c26:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 8007c28:	4a55      	ldr	r2, [pc, #340]	@ (8007d80 <loadMenuTexts+0xa14>)
 8007c2a:	4b56      	ldr	r3, [pc, #344]	@ (8007d84 <loadMenuTexts+0xa18>)
 8007c2c:	4614      	mov	r4, r2
 8007c2e:	461d      	mov	r5, r3
 8007c30:	6828      	ldr	r0, [r5, #0]
 8007c32:	6869      	ldr	r1, [r5, #4]
 8007c34:	68aa      	ldr	r2, [r5, #8]
 8007c36:	68eb      	ldr	r3, [r5, #12]
 8007c38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c3a:	7c2b      	ldrb	r3, [r5, #16]
 8007c3c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 8007c3e:	4a52      	ldr	r2, [pc, #328]	@ (8007d88 <loadMenuTexts+0xa1c>)
 8007c40:	4b52      	ldr	r3, [pc, #328]	@ (8007d8c <loadMenuTexts+0xa20>)
 8007c42:	4614      	mov	r4, r2
 8007c44:	461d      	mov	r5, r3
 8007c46:	6828      	ldr	r0, [r5, #0]
 8007c48:	6869      	ldr	r1, [r5, #4]
 8007c4a:	68aa      	ldr	r2, [r5, #8]
 8007c4c:	68eb      	ldr	r3, [r5, #12]
 8007c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c50:	7c2b      	ldrb	r3, [r5, #16]
 8007c52:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 8007c54:	4a4e      	ldr	r2, [pc, #312]	@ (8007d90 <loadMenuTexts+0xa24>)
 8007c56:	4b4f      	ldr	r3, [pc, #316]	@ (8007d94 <loadMenuTexts+0xa28>)
 8007c58:	4614      	mov	r4, r2
 8007c5a:	461d      	mov	r5, r3
 8007c5c:	6828      	ldr	r0, [r5, #0]
 8007c5e:	6869      	ldr	r1, [r5, #4]
 8007c60:	68aa      	ldr	r2, [r5, #8]
 8007c62:	68eb      	ldr	r3, [r5, #12]
 8007c64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c66:	7c2b      	ldrb	r3, [r5, #16]
 8007c68:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 8007c6a:	4a4b      	ldr	r2, [pc, #300]	@ (8007d98 <loadMenuTexts+0xa2c>)
 8007c6c:	4b4b      	ldr	r3, [pc, #300]	@ (8007d9c <loadMenuTexts+0xa30>)
 8007c6e:	4614      	mov	r4, r2
 8007c70:	461d      	mov	r5, r3
 8007c72:	6828      	ldr	r0, [r5, #0]
 8007c74:	6869      	ldr	r1, [r5, #4]
 8007c76:	68aa      	ldr	r2, [r5, #8]
 8007c78:	68eb      	ldr	r3, [r5, #12]
 8007c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c7c:	7c2b      	ldrb	r3, [r5, #16]
 8007c7e:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 8007c80:	4a47      	ldr	r2, [pc, #284]	@ (8007da0 <loadMenuTexts+0xa34>)
 8007c82:	4b48      	ldr	r3, [pc, #288]	@ (8007da4 <loadMenuTexts+0xa38>)
 8007c84:	4614      	mov	r4, r2
 8007c86:	461d      	mov	r5, r3
 8007c88:	6828      	ldr	r0, [r5, #0]
 8007c8a:	6869      	ldr	r1, [r5, #4]
 8007c8c:	68aa      	ldr	r2, [r5, #8]
 8007c8e:	68eb      	ldr	r3, [r5, #12]
 8007c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007c92:	7c2b      	ldrb	r3, [r5, #16]
 8007c94:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 8007c96:	4a44      	ldr	r2, [pc, #272]	@ (8007da8 <loadMenuTexts+0xa3c>)
 8007c98:	4b44      	ldr	r3, [pc, #272]	@ (8007dac <loadMenuTexts+0xa40>)
 8007c9a:	4614      	mov	r4, r2
 8007c9c:	461d      	mov	r5, r3
 8007c9e:	6828      	ldr	r0, [r5, #0]
 8007ca0:	6869      	ldr	r1, [r5, #4]
 8007ca2:	68aa      	ldr	r2, [r5, #8]
 8007ca4:	68eb      	ldr	r3, [r5, #12]
 8007ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ca8:	7c2b      	ldrb	r3, [r5, #16]
 8007caa:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 8007cac:	4a40      	ldr	r2, [pc, #256]	@ (8007db0 <loadMenuTexts+0xa44>)
 8007cae:	4b41      	ldr	r3, [pc, #260]	@ (8007db4 <loadMenuTexts+0xa48>)
 8007cb0:	4614      	mov	r4, r2
 8007cb2:	461d      	mov	r5, r3
 8007cb4:	6828      	ldr	r0, [r5, #0]
 8007cb6:	6869      	ldr	r1, [r5, #4]
 8007cb8:	68aa      	ldr	r2, [r5, #8]
 8007cba:	68eb      	ldr	r3, [r5, #12]
 8007cbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cbe:	7c2b      	ldrb	r3, [r5, #16]
 8007cc0:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 8007cc2:	4a3d      	ldr	r2, [pc, #244]	@ (8007db8 <loadMenuTexts+0xa4c>)
 8007cc4:	4b3d      	ldr	r3, [pc, #244]	@ (8007dbc <loadMenuTexts+0xa50>)
 8007cc6:	4614      	mov	r4, r2
 8007cc8:	461d      	mov	r5, r3
 8007cca:	6828      	ldr	r0, [r5, #0]
 8007ccc:	6869      	ldr	r1, [r5, #4]
 8007cce:	68aa      	ldr	r2, [r5, #8]
 8007cd0:	68eb      	ldr	r3, [r5, #12]
 8007cd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cd4:	7c2b      	ldrb	r3, [r5, #16]
 8007cd6:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8007cd8:	4a39      	ldr	r2, [pc, #228]	@ (8007dc0 <loadMenuTexts+0xa54>)
 8007cda:	4b3a      	ldr	r3, [pc, #232]	@ (8007dc4 <loadMenuTexts+0xa58>)
 8007cdc:	4614      	mov	r4, r2
 8007cde:	461d      	mov	r5, r3
 8007ce0:	6828      	ldr	r0, [r5, #0]
 8007ce2:	6869      	ldr	r1, [r5, #4]
 8007ce4:	68aa      	ldr	r2, [r5, #8]
 8007ce6:	68eb      	ldr	r3, [r5, #12]
 8007ce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007cea:	7c2b      	ldrb	r3, [r5, #16]
 8007cec:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 8007cee:	4a36      	ldr	r2, [pc, #216]	@ (8007dc8 <loadMenuTexts+0xa5c>)
 8007cf0:	4b36      	ldr	r3, [pc, #216]	@ (8007dcc <loadMenuTexts+0xa60>)
 8007cf2:	4614      	mov	r4, r2
 8007cf4:	461d      	mov	r5, r3
 8007cf6:	6828      	ldr	r0, [r5, #0]
 8007cf8:	6869      	ldr	r1, [r5, #4]
 8007cfa:	68aa      	ldr	r2, [r5, #8]
 8007cfc:	68eb      	ldr	r3, [r5, #12]
 8007cfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d00:	7c2b      	ldrb	r3, [r5, #16]
 8007d02:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 8007d04:	4a32      	ldr	r2, [pc, #200]	@ (8007dd0 <loadMenuTexts+0xa64>)
 8007d06:	4b33      	ldr	r3, [pc, #204]	@ (8007dd4 <loadMenuTexts+0xa68>)
 8007d08:	4614      	mov	r4, r2
 8007d0a:	461d      	mov	r5, r3
 8007d0c:	6828      	ldr	r0, [r5, #0]
 8007d0e:	6869      	ldr	r1, [r5, #4]
 8007d10:	68aa      	ldr	r2, [r5, #8]
 8007d12:	68eb      	ldr	r3, [r5, #12]
 8007d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d16:	7c2b      	ldrb	r3, [r5, #16]
 8007d18:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 8007d1a:	4a2f      	ldr	r2, [pc, #188]	@ (8007dd8 <loadMenuTexts+0xa6c>)
 8007d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8007ddc <loadMenuTexts+0xa70>)
 8007d1e:	4614      	mov	r4, r2
 8007d20:	461d      	mov	r5, r3
 8007d22:	6828      	ldr	r0, [r5, #0]
 8007d24:	6869      	ldr	r1, [r5, #4]
 8007d26:	68aa      	ldr	r2, [r5, #8]
 8007d28:	68eb      	ldr	r3, [r5, #12]
 8007d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d2c:	7c2b      	ldrb	r3, [r5, #16]
 8007d2e:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 8007d30:	4a2b      	ldr	r2, [pc, #172]	@ (8007de0 <loadMenuTexts+0xa74>)
 8007d32:	4b2c      	ldr	r3, [pc, #176]	@ (8007de4 <loadMenuTexts+0xa78>)
 8007d34:	4614      	mov	r4, r2
 8007d36:	461d      	mov	r5, r3
 8007d38:	6828      	ldr	r0, [r5, #0]
 8007d3a:	6869      	ldr	r1, [r5, #4]
 8007d3c:	68aa      	ldr	r2, [r5, #8]
 8007d3e:	68eb      	ldr	r3, [r5, #12]
 8007d40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d42:	7c2b      	ldrb	r3, [r5, #16]
 8007d44:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 8007d46:	4a28      	ldr	r2, [pc, #160]	@ (8007de8 <loadMenuTexts+0xa7c>)
 8007d48:	4b28      	ldr	r3, [pc, #160]	@ (8007dec <loadMenuTexts+0xa80>)
 8007d4a:	4614      	mov	r4, r2
 8007d4c:	461d      	mov	r5, r3
 8007d4e:	6828      	ldr	r0, [r5, #0]
 8007d50:	6869      	ldr	r1, [r5, #4]
 8007d52:	68aa      	ldr	r2, [r5, #8]
 8007d54:	68eb      	ldr	r3, [r5, #12]
 8007d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d58:	7c2b      	ldrb	r3, [r5, #16]
 8007d5a:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 8007d5c:	4a24      	ldr	r2, [pc, #144]	@ (8007df0 <loadMenuTexts+0xa84>)
 8007d5e:	4b25      	ldr	r3, [pc, #148]	@ (8007df4 <loadMenuTexts+0xa88>)
 8007d60:	4614      	mov	r4, r2
 8007d62:	461d      	mov	r5, r3
 8007d64:	6828      	ldr	r0, [r5, #0]
 8007d66:	6869      	ldr	r1, [r5, #4]
 8007d68:	68aa      	ldr	r2, [r5, #8]
 8007d6a:	68eb      	ldr	r3, [r5, #12]
 8007d6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d6e:	7c2b      	ldrb	r3, [r5, #16]
 8007d70:	7023      	strb	r3, [r4, #0]
 8007d72:	f000 bd3a 	b.w	80087ea <loadMenuTexts+0x147e>
 8007d76:	bf00      	nop
 8007d78:	20001688 	.word	0x20001688
 8007d7c:	20000cb8 	.word	0x20000cb8
 8007d80:	2000169c 	.word	0x2000169c
 8007d84:	20000d1c 	.word	0x20000d1c
 8007d88:	200016b0 	.word	0x200016b0
 8007d8c:	20000d30 	.word	0x20000d30
 8007d90:	200016c4 	.word	0x200016c4
 8007d94:	20000d6c 	.word	0x20000d6c
 8007d98:	200016d8 	.word	0x200016d8
 8007d9c:	20000d80 	.word	0x20000d80
 8007da0:	200016ec 	.word	0x200016ec
 8007da4:	20000dbc 	.word	0x20000dbc
 8007da8:	20001700 	.word	0x20001700
 8007dac:	20000dd0 	.word	0x20000dd0
 8007db0:	20001714 	.word	0x20001714
 8007db4:	20000e0c 	.word	0x20000e0c
 8007db8:	20001728 	.word	0x20001728
 8007dbc:	20000e34 	.word	0x20000e34
 8007dc0:	2000173c 	.word	0x2000173c
 8007dc4:	20000e5c 	.word	0x20000e5c
 8007dc8:	20001750 	.word	0x20001750
 8007dcc:	20000e84 	.word	0x20000e84
 8007dd0:	20001764 	.word	0x20001764
 8007dd4:	20000eac 	.word	0x20000eac
 8007dd8:	20001778 	.word	0x20001778
 8007ddc:	20000ed4 	.word	0x20000ed4
 8007de0:	2000178c 	.word	0x2000178c
 8007de4:	20000efc 	.word	0x20000efc
 8007de8:	200017a0 	.word	0x200017a0
 8007dec:	20000f24 	.word	0x20000f24
 8007df0:	200017b4 	.word	0x200017b4
 8007df4:	20000f4c 	.word	0x20000f4c
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8007df8:	4ac6      	ldr	r2, [pc, #792]	@ (8008114 <loadMenuTexts+0xda8>)
 8007dfa:	4bc7      	ldr	r3, [pc, #796]	@ (8008118 <loadMenuTexts+0xdac>)
 8007dfc:	4614      	mov	r4, r2
 8007dfe:	461d      	mov	r5, r3
 8007e00:	6828      	ldr	r0, [r5, #0]
 8007e02:	6869      	ldr	r1, [r5, #4]
 8007e04:	68aa      	ldr	r2, [r5, #8]
 8007e06:	68eb      	ldr	r3, [r5, #12]
 8007e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e0a:	7c2b      	ldrb	r3, [r5, #16]
 8007e0c:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8007e0e:	4ac3      	ldr	r2, [pc, #780]	@ (800811c <loadMenuTexts+0xdb0>)
 8007e10:	4bc3      	ldr	r3, [pc, #780]	@ (8008120 <loadMenuTexts+0xdb4>)
 8007e12:	4614      	mov	r4, r2
 8007e14:	461d      	mov	r5, r3
 8007e16:	6828      	ldr	r0, [r5, #0]
 8007e18:	6869      	ldr	r1, [r5, #4]
 8007e1a:	68aa      	ldr	r2, [r5, #8]
 8007e1c:	68eb      	ldr	r3, [r5, #12]
 8007e1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e20:	7c2b      	ldrb	r3, [r5, #16]
 8007e22:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8007e24:	4abf      	ldr	r2, [pc, #764]	@ (8008124 <loadMenuTexts+0xdb8>)
 8007e26:	4bc0      	ldr	r3, [pc, #768]	@ (8008128 <loadMenuTexts+0xdbc>)
 8007e28:	4614      	mov	r4, r2
 8007e2a:	461d      	mov	r5, r3
 8007e2c:	6828      	ldr	r0, [r5, #0]
 8007e2e:	6869      	ldr	r1, [r5, #4]
 8007e30:	68aa      	ldr	r2, [r5, #8]
 8007e32:	68eb      	ldr	r3, [r5, #12]
 8007e34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e36:	7c2b      	ldrb	r3, [r5, #16]
 8007e38:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 8007e3a:	4abc      	ldr	r2, [pc, #752]	@ (800812c <loadMenuTexts+0xdc0>)
 8007e3c:	4bbc      	ldr	r3, [pc, #752]	@ (8008130 <loadMenuTexts+0xdc4>)
 8007e3e:	4614      	mov	r4, r2
 8007e40:	461d      	mov	r5, r3
 8007e42:	6828      	ldr	r0, [r5, #0]
 8007e44:	6869      	ldr	r1, [r5, #4]
 8007e46:	68aa      	ldr	r2, [r5, #8]
 8007e48:	68eb      	ldr	r3, [r5, #12]
 8007e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e4c:	7c2b      	ldrb	r3, [r5, #16]
 8007e4e:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8007e50:	4ab8      	ldr	r2, [pc, #736]	@ (8008134 <loadMenuTexts+0xdc8>)
 8007e52:	4bb9      	ldr	r3, [pc, #740]	@ (8008138 <loadMenuTexts+0xdcc>)
 8007e54:	4614      	mov	r4, r2
 8007e56:	461d      	mov	r5, r3
 8007e58:	6828      	ldr	r0, [r5, #0]
 8007e5a:	6869      	ldr	r1, [r5, #4]
 8007e5c:	68aa      	ldr	r2, [r5, #8]
 8007e5e:	68eb      	ldr	r3, [r5, #12]
 8007e60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e62:	7c2b      	ldrb	r3, [r5, #16]
 8007e64:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 8007e66:	4ab5      	ldr	r2, [pc, #724]	@ (800813c <loadMenuTexts+0xdd0>)
 8007e68:	4bb5      	ldr	r3, [pc, #724]	@ (8008140 <loadMenuTexts+0xdd4>)
 8007e6a:	4614      	mov	r4, r2
 8007e6c:	461d      	mov	r5, r3
 8007e6e:	6828      	ldr	r0, [r5, #0]
 8007e70:	6869      	ldr	r1, [r5, #4]
 8007e72:	68aa      	ldr	r2, [r5, #8]
 8007e74:	68eb      	ldr	r3, [r5, #12]
 8007e76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e78:	7c2b      	ldrb	r3, [r5, #16]
 8007e7a:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 8007e7c:	4ab1      	ldr	r2, [pc, #708]	@ (8008144 <loadMenuTexts+0xdd8>)
 8007e7e:	4bb2      	ldr	r3, [pc, #712]	@ (8008148 <loadMenuTexts+0xddc>)
 8007e80:	4614      	mov	r4, r2
 8007e82:	461d      	mov	r5, r3
 8007e84:	6828      	ldr	r0, [r5, #0]
 8007e86:	6869      	ldr	r1, [r5, #4]
 8007e88:	68aa      	ldr	r2, [r5, #8]
 8007e8a:	68eb      	ldr	r3, [r5, #12]
 8007e8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e8e:	7c2b      	ldrb	r3, [r5, #16]
 8007e90:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8007e92:	4aae      	ldr	r2, [pc, #696]	@ (800814c <loadMenuTexts+0xde0>)
 8007e94:	4bae      	ldr	r3, [pc, #696]	@ (8008150 <loadMenuTexts+0xde4>)
 8007e96:	4614      	mov	r4, r2
 8007e98:	461d      	mov	r5, r3
 8007e9a:	6828      	ldr	r0, [r5, #0]
 8007e9c:	6869      	ldr	r1, [r5, #4]
 8007e9e:	68aa      	ldr	r2, [r5, #8]
 8007ea0:	68eb      	ldr	r3, [r5, #12]
 8007ea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ea4:	7c2b      	ldrb	r3, [r5, #16]
 8007ea6:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8007ea8:	4aaa      	ldr	r2, [pc, #680]	@ (8008154 <loadMenuTexts+0xde8>)
 8007eaa:	4bab      	ldr	r3, [pc, #684]	@ (8008158 <loadMenuTexts+0xdec>)
 8007eac:	4614      	mov	r4, r2
 8007eae:	461d      	mov	r5, r3
 8007eb0:	6828      	ldr	r0, [r5, #0]
 8007eb2:	6869      	ldr	r1, [r5, #4]
 8007eb4:	68aa      	ldr	r2, [r5, #8]
 8007eb6:	68eb      	ldr	r3, [r5, #12]
 8007eb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007eba:	7c2b      	ldrb	r3, [r5, #16]
 8007ebc:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8007ebe:	4aa7      	ldr	r2, [pc, #668]	@ (800815c <loadMenuTexts+0xdf0>)
 8007ec0:	4ba7      	ldr	r3, [pc, #668]	@ (8008160 <loadMenuTexts+0xdf4>)
 8007ec2:	4614      	mov	r4, r2
 8007ec4:	461d      	mov	r5, r3
 8007ec6:	6828      	ldr	r0, [r5, #0]
 8007ec8:	6869      	ldr	r1, [r5, #4]
 8007eca:	68aa      	ldr	r2, [r5, #8]
 8007ecc:	68eb      	ldr	r3, [r5, #12]
 8007ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ed0:	7c2b      	ldrb	r3, [r5, #16]
 8007ed2:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8007ed4:	4aa3      	ldr	r2, [pc, #652]	@ (8008164 <loadMenuTexts+0xdf8>)
 8007ed6:	4ba4      	ldr	r3, [pc, #656]	@ (8008168 <loadMenuTexts+0xdfc>)
 8007ed8:	4614      	mov	r4, r2
 8007eda:	461d      	mov	r5, r3
 8007edc:	6828      	ldr	r0, [r5, #0]
 8007ede:	6869      	ldr	r1, [r5, #4]
 8007ee0:	68aa      	ldr	r2, [r5, #8]
 8007ee2:	68eb      	ldr	r3, [r5, #12]
 8007ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ee6:	7c2b      	ldrb	r3, [r5, #16]
 8007ee8:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8007eea:	4aa0      	ldr	r2, [pc, #640]	@ (800816c <loadMenuTexts+0xe00>)
 8007eec:	4ba0      	ldr	r3, [pc, #640]	@ (8008170 <loadMenuTexts+0xe04>)
 8007eee:	4614      	mov	r4, r2
 8007ef0:	461d      	mov	r5, r3
 8007ef2:	6828      	ldr	r0, [r5, #0]
 8007ef4:	6869      	ldr	r1, [r5, #4]
 8007ef6:	68aa      	ldr	r2, [r5, #8]
 8007ef8:	68eb      	ldr	r3, [r5, #12]
 8007efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007efc:	7c2b      	ldrb	r3, [r5, #16]
 8007efe:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8007f00:	4a9c      	ldr	r2, [pc, #624]	@ (8008174 <loadMenuTexts+0xe08>)
 8007f02:	4b9d      	ldr	r3, [pc, #628]	@ (8008178 <loadMenuTexts+0xe0c>)
 8007f04:	4614      	mov	r4, r2
 8007f06:	461d      	mov	r5, r3
 8007f08:	6828      	ldr	r0, [r5, #0]
 8007f0a:	6869      	ldr	r1, [r5, #4]
 8007f0c:	68aa      	ldr	r2, [r5, #8]
 8007f0e:	68eb      	ldr	r3, [r5, #12]
 8007f10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f12:	7c2b      	ldrb	r3, [r5, #16]
 8007f14:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8007f16:	4a99      	ldr	r2, [pc, #612]	@ (800817c <loadMenuTexts+0xe10>)
 8007f18:	4b99      	ldr	r3, [pc, #612]	@ (8008180 <loadMenuTexts+0xe14>)
 8007f1a:	4614      	mov	r4, r2
 8007f1c:	461d      	mov	r5, r3
 8007f1e:	6828      	ldr	r0, [r5, #0]
 8007f20:	6869      	ldr	r1, [r5, #4]
 8007f22:	68aa      	ldr	r2, [r5, #8]
 8007f24:	68eb      	ldr	r3, [r5, #12]
 8007f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f28:	7c2b      	ldrb	r3, [r5, #16]
 8007f2a:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8007f2c:	4a95      	ldr	r2, [pc, #596]	@ (8008184 <loadMenuTexts+0xe18>)
 8007f2e:	4b96      	ldr	r3, [pc, #600]	@ (8008188 <loadMenuTexts+0xe1c>)
 8007f30:	4614      	mov	r4, r2
 8007f32:	461d      	mov	r5, r3
 8007f34:	6828      	ldr	r0, [r5, #0]
 8007f36:	6869      	ldr	r1, [r5, #4]
 8007f38:	68aa      	ldr	r2, [r5, #8]
 8007f3a:	68eb      	ldr	r3, [r5, #12]
 8007f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f3e:	7c2b      	ldrb	r3, [r5, #16]
 8007f40:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8007f42:	4a92      	ldr	r2, [pc, #584]	@ (800818c <loadMenuTexts+0xe20>)
 8007f44:	4b92      	ldr	r3, [pc, #584]	@ (8008190 <loadMenuTexts+0xe24>)
 8007f46:	4614      	mov	r4, r2
 8007f48:	461d      	mov	r5, r3
 8007f4a:	6828      	ldr	r0, [r5, #0]
 8007f4c:	6869      	ldr	r1, [r5, #4]
 8007f4e:	68aa      	ldr	r2, [r5, #8]
 8007f50:	68eb      	ldr	r3, [r5, #12]
 8007f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f54:	7c2b      	ldrb	r3, [r5, #16]
 8007f56:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8007f58:	4a8e      	ldr	r2, [pc, #568]	@ (8008194 <loadMenuTexts+0xe28>)
 8007f5a:	4b8f      	ldr	r3, [pc, #572]	@ (8008198 <loadMenuTexts+0xe2c>)
 8007f5c:	4614      	mov	r4, r2
 8007f5e:	461d      	mov	r5, r3
 8007f60:	6828      	ldr	r0, [r5, #0]
 8007f62:	6869      	ldr	r1, [r5, #4]
 8007f64:	68aa      	ldr	r2, [r5, #8]
 8007f66:	68eb      	ldr	r3, [r5, #12]
 8007f68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f6a:	7c2b      	ldrb	r3, [r5, #16]
 8007f6c:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8007f6e:	4a8b      	ldr	r2, [pc, #556]	@ (800819c <loadMenuTexts+0xe30>)
 8007f70:	4b8b      	ldr	r3, [pc, #556]	@ (80081a0 <loadMenuTexts+0xe34>)
 8007f72:	4614      	mov	r4, r2
 8007f74:	461d      	mov	r5, r3
 8007f76:	6828      	ldr	r0, [r5, #0]
 8007f78:	6869      	ldr	r1, [r5, #4]
 8007f7a:	68aa      	ldr	r2, [r5, #8]
 8007f7c:	68eb      	ldr	r3, [r5, #12]
 8007f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f80:	7c2b      	ldrb	r3, [r5, #16]
 8007f82:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8007f84:	4a87      	ldr	r2, [pc, #540]	@ (80081a4 <loadMenuTexts+0xe38>)
 8007f86:	4b88      	ldr	r3, [pc, #544]	@ (80081a8 <loadMenuTexts+0xe3c>)
 8007f88:	4614      	mov	r4, r2
 8007f8a:	461d      	mov	r5, r3
 8007f8c:	6828      	ldr	r0, [r5, #0]
 8007f8e:	6869      	ldr	r1, [r5, #4]
 8007f90:	68aa      	ldr	r2, [r5, #8]
 8007f92:	68eb      	ldr	r3, [r5, #12]
 8007f94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f96:	7c2b      	ldrb	r3, [r5, #16]
 8007f98:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8007f9a:	4a84      	ldr	r2, [pc, #528]	@ (80081ac <loadMenuTexts+0xe40>)
 8007f9c:	4b84      	ldr	r3, [pc, #528]	@ (80081b0 <loadMenuTexts+0xe44>)
 8007f9e:	4614      	mov	r4, r2
 8007fa0:	461d      	mov	r5, r3
 8007fa2:	6828      	ldr	r0, [r5, #0]
 8007fa4:	6869      	ldr	r1, [r5, #4]
 8007fa6:	68aa      	ldr	r2, [r5, #8]
 8007fa8:	68eb      	ldr	r3, [r5, #12]
 8007faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fac:	7c2b      	ldrb	r3, [r5, #16]
 8007fae:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8007fb0:	4a80      	ldr	r2, [pc, #512]	@ (80081b4 <loadMenuTexts+0xe48>)
 8007fb2:	4b81      	ldr	r3, [pc, #516]	@ (80081b8 <loadMenuTexts+0xe4c>)
 8007fb4:	4614      	mov	r4, r2
 8007fb6:	461d      	mov	r5, r3
 8007fb8:	6828      	ldr	r0, [r5, #0]
 8007fba:	6869      	ldr	r1, [r5, #4]
 8007fbc:	68aa      	ldr	r2, [r5, #8]
 8007fbe:	68eb      	ldr	r3, [r5, #12]
 8007fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fc2:	7c2b      	ldrb	r3, [r5, #16]
 8007fc4:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8007fc6:	4a7d      	ldr	r2, [pc, #500]	@ (80081bc <loadMenuTexts+0xe50>)
 8007fc8:	4b7d      	ldr	r3, [pc, #500]	@ (80081c0 <loadMenuTexts+0xe54>)
 8007fca:	4614      	mov	r4, r2
 8007fcc:	461d      	mov	r5, r3
 8007fce:	6828      	ldr	r0, [r5, #0]
 8007fd0:	6869      	ldr	r1, [r5, #4]
 8007fd2:	68aa      	ldr	r2, [r5, #8]
 8007fd4:	68eb      	ldr	r3, [r5, #12]
 8007fd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fd8:	7c2b      	ldrb	r3, [r5, #16]
 8007fda:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8007fdc:	4a79      	ldr	r2, [pc, #484]	@ (80081c4 <loadMenuTexts+0xe58>)
 8007fde:	4b7a      	ldr	r3, [pc, #488]	@ (80081c8 <loadMenuTexts+0xe5c>)
 8007fe0:	4614      	mov	r4, r2
 8007fe2:	461d      	mov	r5, r3
 8007fe4:	6828      	ldr	r0, [r5, #0]
 8007fe6:	6869      	ldr	r1, [r5, #4]
 8007fe8:	68aa      	ldr	r2, [r5, #8]
 8007fea:	68eb      	ldr	r3, [r5, #12]
 8007fec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007fee:	7c2b      	ldrb	r3, [r5, #16]
 8007ff0:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8007ff2:	4a76      	ldr	r2, [pc, #472]	@ (80081cc <loadMenuTexts+0xe60>)
 8007ff4:	4b76      	ldr	r3, [pc, #472]	@ (80081d0 <loadMenuTexts+0xe64>)
 8007ff6:	4614      	mov	r4, r2
 8007ff8:	461d      	mov	r5, r3
 8007ffa:	6828      	ldr	r0, [r5, #0]
 8007ffc:	6869      	ldr	r1, [r5, #4]
 8007ffe:	68aa      	ldr	r2, [r5, #8]
 8008000:	68eb      	ldr	r3, [r5, #12]
 8008002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008004:	7c2b      	ldrb	r3, [r5, #16]
 8008006:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8008008:	4a72      	ldr	r2, [pc, #456]	@ (80081d4 <loadMenuTexts+0xe68>)
 800800a:	4b73      	ldr	r3, [pc, #460]	@ (80081d8 <loadMenuTexts+0xe6c>)
 800800c:	4614      	mov	r4, r2
 800800e:	461d      	mov	r5, r3
 8008010:	6828      	ldr	r0, [r5, #0]
 8008012:	6869      	ldr	r1, [r5, #4]
 8008014:	68aa      	ldr	r2, [r5, #8]
 8008016:	68eb      	ldr	r3, [r5, #12]
 8008018:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800801a:	7c2b      	ldrb	r3, [r5, #16]
 800801c:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 800801e:	4a6f      	ldr	r2, [pc, #444]	@ (80081dc <loadMenuTexts+0xe70>)
 8008020:	4b6f      	ldr	r3, [pc, #444]	@ (80081e0 <loadMenuTexts+0xe74>)
 8008022:	4614      	mov	r4, r2
 8008024:	461d      	mov	r5, r3
 8008026:	6828      	ldr	r0, [r5, #0]
 8008028:	6869      	ldr	r1, [r5, #4]
 800802a:	68aa      	ldr	r2, [r5, #8]
 800802c:	68eb      	ldr	r3, [r5, #12]
 800802e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008030:	7c2b      	ldrb	r3, [r5, #16]
 8008032:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8008034:	4a6b      	ldr	r2, [pc, #428]	@ (80081e4 <loadMenuTexts+0xe78>)
 8008036:	4b6c      	ldr	r3, [pc, #432]	@ (80081e8 <loadMenuTexts+0xe7c>)
 8008038:	4614      	mov	r4, r2
 800803a:	461d      	mov	r5, r3
 800803c:	6828      	ldr	r0, [r5, #0]
 800803e:	6869      	ldr	r1, [r5, #4]
 8008040:	68aa      	ldr	r2, [r5, #8]
 8008042:	68eb      	ldr	r3, [r5, #12]
 8008044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008046:	7c2b      	ldrb	r3, [r5, #16]
 8008048:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 800804a:	4a68      	ldr	r2, [pc, #416]	@ (80081ec <loadMenuTexts+0xe80>)
 800804c:	4b68      	ldr	r3, [pc, #416]	@ (80081f0 <loadMenuTexts+0xe84>)
 800804e:	4614      	mov	r4, r2
 8008050:	461d      	mov	r5, r3
 8008052:	6828      	ldr	r0, [r5, #0]
 8008054:	6869      	ldr	r1, [r5, #4]
 8008056:	68aa      	ldr	r2, [r5, #8]
 8008058:	68eb      	ldr	r3, [r5, #12]
 800805a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800805c:	7c2b      	ldrb	r3, [r5, #16]
 800805e:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8008060:	4a64      	ldr	r2, [pc, #400]	@ (80081f4 <loadMenuTexts+0xe88>)
 8008062:	4b65      	ldr	r3, [pc, #404]	@ (80081f8 <loadMenuTexts+0xe8c>)
 8008064:	4614      	mov	r4, r2
 8008066:	461d      	mov	r5, r3
 8008068:	6828      	ldr	r0, [r5, #0]
 800806a:	6869      	ldr	r1, [r5, #4]
 800806c:	68aa      	ldr	r2, [r5, #8]
 800806e:	68eb      	ldr	r3, [r5, #12]
 8008070:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008072:	7c2b      	ldrb	r3, [r5, #16]
 8008074:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 8008076:	4a61      	ldr	r2, [pc, #388]	@ (80081fc <loadMenuTexts+0xe90>)
 8008078:	4b61      	ldr	r3, [pc, #388]	@ (8008200 <loadMenuTexts+0xe94>)
 800807a:	4614      	mov	r4, r2
 800807c:	461d      	mov	r5, r3
 800807e:	6828      	ldr	r0, [r5, #0]
 8008080:	6869      	ldr	r1, [r5, #4]
 8008082:	68aa      	ldr	r2, [r5, #8]
 8008084:	68eb      	ldr	r3, [r5, #12]
 8008086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008088:	7c2b      	ldrb	r3, [r5, #16]
 800808a:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 800808c:	4a5d      	ldr	r2, [pc, #372]	@ (8008204 <loadMenuTexts+0xe98>)
 800808e:	4b5e      	ldr	r3, [pc, #376]	@ (8008208 <loadMenuTexts+0xe9c>)
 8008090:	4614      	mov	r4, r2
 8008092:	461d      	mov	r5, r3
 8008094:	6828      	ldr	r0, [r5, #0]
 8008096:	6869      	ldr	r1, [r5, #4]
 8008098:	68aa      	ldr	r2, [r5, #8]
 800809a:	68eb      	ldr	r3, [r5, #12]
 800809c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800809e:	7c2b      	ldrb	r3, [r5, #16]
 80080a0:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 80080a2:	4a5a      	ldr	r2, [pc, #360]	@ (800820c <loadMenuTexts+0xea0>)
 80080a4:	4b5a      	ldr	r3, [pc, #360]	@ (8008210 <loadMenuTexts+0xea4>)
 80080a6:	4614      	mov	r4, r2
 80080a8:	461d      	mov	r5, r3
 80080aa:	6828      	ldr	r0, [r5, #0]
 80080ac:	6869      	ldr	r1, [r5, #4]
 80080ae:	68aa      	ldr	r2, [r5, #8]
 80080b0:	68eb      	ldr	r3, [r5, #12]
 80080b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080b4:	7c2b      	ldrb	r3, [r5, #16]
 80080b6:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 80080b8:	4a56      	ldr	r2, [pc, #344]	@ (8008214 <loadMenuTexts+0xea8>)
 80080ba:	4b57      	ldr	r3, [pc, #348]	@ (8008218 <loadMenuTexts+0xeac>)
 80080bc:	4614      	mov	r4, r2
 80080be:	461d      	mov	r5, r3
 80080c0:	6828      	ldr	r0, [r5, #0]
 80080c2:	6869      	ldr	r1, [r5, #4]
 80080c4:	68aa      	ldr	r2, [r5, #8]
 80080c6:	68eb      	ldr	r3, [r5, #12]
 80080c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080ca:	7c2b      	ldrb	r3, [r5, #16]
 80080cc:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 80080ce:	4a53      	ldr	r2, [pc, #332]	@ (800821c <loadMenuTexts+0xeb0>)
 80080d0:	4b53      	ldr	r3, [pc, #332]	@ (8008220 <loadMenuTexts+0xeb4>)
 80080d2:	4614      	mov	r4, r2
 80080d4:	461d      	mov	r5, r3
 80080d6:	6828      	ldr	r0, [r5, #0]
 80080d8:	6869      	ldr	r1, [r5, #4]
 80080da:	68aa      	ldr	r2, [r5, #8]
 80080dc:	68eb      	ldr	r3, [r5, #12]
 80080de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080e0:	7c2b      	ldrb	r3, [r5, #16]
 80080e2:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 80080e4:	4a4f      	ldr	r2, [pc, #316]	@ (8008224 <loadMenuTexts+0xeb8>)
 80080e6:	4b50      	ldr	r3, [pc, #320]	@ (8008228 <loadMenuTexts+0xebc>)
 80080e8:	4614      	mov	r4, r2
 80080ea:	461d      	mov	r5, r3
 80080ec:	6828      	ldr	r0, [r5, #0]
 80080ee:	6869      	ldr	r1, [r5, #4]
 80080f0:	68aa      	ldr	r2, [r5, #8]
 80080f2:	68eb      	ldr	r3, [r5, #12]
 80080f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080f6:	7c2b      	ldrb	r3, [r5, #16]
 80080f8:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 80080fa:	4a4c      	ldr	r2, [pc, #304]	@ (800822c <loadMenuTexts+0xec0>)
 80080fc:	4b4c      	ldr	r3, [pc, #304]	@ (8008230 <loadMenuTexts+0xec4>)
 80080fe:	4614      	mov	r4, r2
 8008100:	461d      	mov	r5, r3
 8008102:	6828      	ldr	r0, [r5, #0]
 8008104:	6869      	ldr	r1, [r5, #4]
 8008106:	68aa      	ldr	r2, [r5, #8]
 8008108:	68eb      	ldr	r3, [r5, #12]
 800810a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800810c:	7c2b      	ldrb	r3, [r5, #16]
 800810e:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8008110:	4a48      	ldr	r2, [pc, #288]	@ (8008234 <loadMenuTexts+0xec8>)
 8008112:	e091      	b.n	8008238 <loadMenuTexts+0xecc>
 8008114:	200010d4 	.word	0x200010d4
 8008118:	20000704 	.word	0x20000704
 800811c:	200010e8 	.word	0x200010e8
 8008120:	20000718 	.word	0x20000718
 8008124:	200010fc 	.word	0x200010fc
 8008128:	2000072c 	.word	0x2000072c
 800812c:	20001110 	.word	0x20001110
 8008130:	20000740 	.word	0x20000740
 8008134:	20001124 	.word	0x20001124
 8008138:	20000754 	.word	0x20000754
 800813c:	20001138 	.word	0x20001138
 8008140:	20000768 	.word	0x20000768
 8008144:	2000114c 	.word	0x2000114c
 8008148:	2000077c 	.word	0x2000077c
 800814c:	20001160 	.word	0x20001160
 8008150:	20000790 	.word	0x20000790
 8008154:	20001174 	.word	0x20001174
 8008158:	200007a4 	.word	0x200007a4
 800815c:	20001188 	.word	0x20001188
 8008160:	200007b8 	.word	0x200007b8
 8008164:	2000119c 	.word	0x2000119c
 8008168:	200007cc 	.word	0x200007cc
 800816c:	200011b0 	.word	0x200011b0
 8008170:	200007e0 	.word	0x200007e0
 8008174:	200011c4 	.word	0x200011c4
 8008178:	200007f4 	.word	0x200007f4
 800817c:	200011d8 	.word	0x200011d8
 8008180:	20000808 	.word	0x20000808
 8008184:	200011ec 	.word	0x200011ec
 8008188:	2000081c 	.word	0x2000081c
 800818c:	20001200 	.word	0x20001200
 8008190:	20000830 	.word	0x20000830
 8008194:	20001214 	.word	0x20001214
 8008198:	20000844 	.word	0x20000844
 800819c:	20001228 	.word	0x20001228
 80081a0:	20000858 	.word	0x20000858
 80081a4:	2000123c 	.word	0x2000123c
 80081a8:	2000086c 	.word	0x2000086c
 80081ac:	20001250 	.word	0x20001250
 80081b0:	20000880 	.word	0x20000880
 80081b4:	20001264 	.word	0x20001264
 80081b8:	20000894 	.word	0x20000894
 80081bc:	20001278 	.word	0x20001278
 80081c0:	200008a8 	.word	0x200008a8
 80081c4:	2000128c 	.word	0x2000128c
 80081c8:	200008bc 	.word	0x200008bc
 80081cc:	200012a0 	.word	0x200012a0
 80081d0:	200008d0 	.word	0x200008d0
 80081d4:	200012b4 	.word	0x200012b4
 80081d8:	200008e4 	.word	0x200008e4
 80081dc:	200012c8 	.word	0x200012c8
 80081e0:	200008f8 	.word	0x200008f8
 80081e4:	200012dc 	.word	0x200012dc
 80081e8:	2000090c 	.word	0x2000090c
 80081ec:	200012f0 	.word	0x200012f0
 80081f0:	20000920 	.word	0x20000920
 80081f4:	20001304 	.word	0x20001304
 80081f8:	20000934 	.word	0x20000934
 80081fc:	20001318 	.word	0x20001318
 8008200:	20000948 	.word	0x20000948
 8008204:	2000132c 	.word	0x2000132c
 8008208:	2000095c 	.word	0x2000095c
 800820c:	20001340 	.word	0x20001340
 8008210:	20000970 	.word	0x20000970
 8008214:	20001354 	.word	0x20001354
 8008218:	20000984 	.word	0x20000984
 800821c:	20001368 	.word	0x20001368
 8008220:	20000998 	.word	0x20000998
 8008224:	2000137c 	.word	0x2000137c
 8008228:	200009ac 	.word	0x200009ac
 800822c:	20001390 	.word	0x20001390
 8008230:	200009c0 	.word	0x200009c0
 8008234:	200013a4 	.word	0x200013a4
 8008238:	4bc7      	ldr	r3, [pc, #796]	@ (8008558 <loadMenuTexts+0x11ec>)
 800823a:	4614      	mov	r4, r2
 800823c:	461d      	mov	r5, r3
 800823e:	6828      	ldr	r0, [r5, #0]
 8008240:	6869      	ldr	r1, [r5, #4]
 8008242:	68aa      	ldr	r2, [r5, #8]
 8008244:	68eb      	ldr	r3, [r5, #12]
 8008246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008248:	7c2b      	ldrb	r3, [r5, #16]
 800824a:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 800824c:	4ac3      	ldr	r2, [pc, #780]	@ (800855c <loadMenuTexts+0x11f0>)
 800824e:	4bc4      	ldr	r3, [pc, #784]	@ (8008560 <loadMenuTexts+0x11f4>)
 8008250:	4614      	mov	r4, r2
 8008252:	461d      	mov	r5, r3
 8008254:	6828      	ldr	r0, [r5, #0]
 8008256:	6869      	ldr	r1, [r5, #4]
 8008258:	68aa      	ldr	r2, [r5, #8]
 800825a:	68eb      	ldr	r3, [r5, #12]
 800825c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800825e:	7c2b      	ldrb	r3, [r5, #16]
 8008260:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8008262:	4ac0      	ldr	r2, [pc, #768]	@ (8008564 <loadMenuTexts+0x11f8>)
 8008264:	4bc0      	ldr	r3, [pc, #768]	@ (8008568 <loadMenuTexts+0x11fc>)
 8008266:	4614      	mov	r4, r2
 8008268:	461d      	mov	r5, r3
 800826a:	6828      	ldr	r0, [r5, #0]
 800826c:	6869      	ldr	r1, [r5, #4]
 800826e:	68aa      	ldr	r2, [r5, #8]
 8008270:	68eb      	ldr	r3, [r5, #12]
 8008272:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008274:	7c2b      	ldrb	r3, [r5, #16]
 8008276:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8008278:	4abc      	ldr	r2, [pc, #752]	@ (800856c <loadMenuTexts+0x1200>)
 800827a:	4bbd      	ldr	r3, [pc, #756]	@ (8008570 <loadMenuTexts+0x1204>)
 800827c:	4614      	mov	r4, r2
 800827e:	461d      	mov	r5, r3
 8008280:	6828      	ldr	r0, [r5, #0]
 8008282:	6869      	ldr	r1, [r5, #4]
 8008284:	68aa      	ldr	r2, [r5, #8]
 8008286:	68eb      	ldr	r3, [r5, #12]
 8008288:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800828a:	7c2b      	ldrb	r3, [r5, #16]
 800828c:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 800828e:	4ab9      	ldr	r2, [pc, #740]	@ (8008574 <loadMenuTexts+0x1208>)
 8008290:	4bb9      	ldr	r3, [pc, #740]	@ (8008578 <loadMenuTexts+0x120c>)
 8008292:	4614      	mov	r4, r2
 8008294:	461d      	mov	r5, r3
 8008296:	6828      	ldr	r0, [r5, #0]
 8008298:	6869      	ldr	r1, [r5, #4]
 800829a:	68aa      	ldr	r2, [r5, #8]
 800829c:	68eb      	ldr	r3, [r5, #12]
 800829e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082a0:	7c2b      	ldrb	r3, [r5, #16]
 80082a2:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 80082a4:	4ab5      	ldr	r2, [pc, #724]	@ (800857c <loadMenuTexts+0x1210>)
 80082a6:	4bb6      	ldr	r3, [pc, #728]	@ (8008580 <loadMenuTexts+0x1214>)
 80082a8:	4614      	mov	r4, r2
 80082aa:	461d      	mov	r5, r3
 80082ac:	6828      	ldr	r0, [r5, #0]
 80082ae:	6869      	ldr	r1, [r5, #4]
 80082b0:	68aa      	ldr	r2, [r5, #8]
 80082b2:	68eb      	ldr	r3, [r5, #12]
 80082b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082b6:	7c2b      	ldrb	r3, [r5, #16]
 80082b8:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 80082ba:	4ab2      	ldr	r2, [pc, #712]	@ (8008584 <loadMenuTexts+0x1218>)
 80082bc:	4bb2      	ldr	r3, [pc, #712]	@ (8008588 <loadMenuTexts+0x121c>)
 80082be:	4614      	mov	r4, r2
 80082c0:	461d      	mov	r5, r3
 80082c2:	6828      	ldr	r0, [r5, #0]
 80082c4:	6869      	ldr	r1, [r5, #4]
 80082c6:	68aa      	ldr	r2, [r5, #8]
 80082c8:	68eb      	ldr	r3, [r5, #12]
 80082ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082cc:	7c2b      	ldrb	r3, [r5, #16]
 80082ce:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 80082d0:	4aae      	ldr	r2, [pc, #696]	@ (800858c <loadMenuTexts+0x1220>)
 80082d2:	4baf      	ldr	r3, [pc, #700]	@ (8008590 <loadMenuTexts+0x1224>)
 80082d4:	4614      	mov	r4, r2
 80082d6:	461d      	mov	r5, r3
 80082d8:	6828      	ldr	r0, [r5, #0]
 80082da:	6869      	ldr	r1, [r5, #4]
 80082dc:	68aa      	ldr	r2, [r5, #8]
 80082de:	68eb      	ldr	r3, [r5, #12]
 80082e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082e2:	7c2b      	ldrb	r3, [r5, #16]
 80082e4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 80082e6:	4aab      	ldr	r2, [pc, #684]	@ (8008594 <loadMenuTexts+0x1228>)
 80082e8:	4bab      	ldr	r3, [pc, #684]	@ (8008598 <loadMenuTexts+0x122c>)
 80082ea:	4614      	mov	r4, r2
 80082ec:	461d      	mov	r5, r3
 80082ee:	6828      	ldr	r0, [r5, #0]
 80082f0:	6869      	ldr	r1, [r5, #4]
 80082f2:	68aa      	ldr	r2, [r5, #8]
 80082f4:	68eb      	ldr	r3, [r5, #12]
 80082f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082f8:	7c2b      	ldrb	r3, [r5, #16]
 80082fa:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 80082fc:	4aa7      	ldr	r2, [pc, #668]	@ (800859c <loadMenuTexts+0x1230>)
 80082fe:	4ba8      	ldr	r3, [pc, #672]	@ (80085a0 <loadMenuTexts+0x1234>)
 8008300:	4614      	mov	r4, r2
 8008302:	461d      	mov	r5, r3
 8008304:	6828      	ldr	r0, [r5, #0]
 8008306:	6869      	ldr	r1, [r5, #4]
 8008308:	68aa      	ldr	r2, [r5, #8]
 800830a:	68eb      	ldr	r3, [r5, #12]
 800830c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800830e:	7c2b      	ldrb	r3, [r5, #16]
 8008310:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 8008312:	4aa4      	ldr	r2, [pc, #656]	@ (80085a4 <loadMenuTexts+0x1238>)
 8008314:	4ba4      	ldr	r3, [pc, #656]	@ (80085a8 <loadMenuTexts+0x123c>)
 8008316:	4614      	mov	r4, r2
 8008318:	461d      	mov	r5, r3
 800831a:	6828      	ldr	r0, [r5, #0]
 800831c:	6869      	ldr	r1, [r5, #4]
 800831e:	68aa      	ldr	r2, [r5, #8]
 8008320:	68eb      	ldr	r3, [r5, #12]
 8008322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008324:	7c2b      	ldrb	r3, [r5, #16]
 8008326:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8008328:	4aa0      	ldr	r2, [pc, #640]	@ (80085ac <loadMenuTexts+0x1240>)
 800832a:	4ba1      	ldr	r3, [pc, #644]	@ (80085b0 <loadMenuTexts+0x1244>)
 800832c:	4614      	mov	r4, r2
 800832e:	461d      	mov	r5, r3
 8008330:	6828      	ldr	r0, [r5, #0]
 8008332:	6869      	ldr	r1, [r5, #4]
 8008334:	68aa      	ldr	r2, [r5, #8]
 8008336:	68eb      	ldr	r3, [r5, #12]
 8008338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800833a:	7c2b      	ldrb	r3, [r5, #16]
 800833c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 800833e:	4a9d      	ldr	r2, [pc, #628]	@ (80085b4 <loadMenuTexts+0x1248>)
 8008340:	4b9d      	ldr	r3, [pc, #628]	@ (80085b8 <loadMenuTexts+0x124c>)
 8008342:	4614      	mov	r4, r2
 8008344:	461d      	mov	r5, r3
 8008346:	6828      	ldr	r0, [r5, #0]
 8008348:	6869      	ldr	r1, [r5, #4]
 800834a:	68aa      	ldr	r2, [r5, #8]
 800834c:	68eb      	ldr	r3, [r5, #12]
 800834e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008350:	7c2b      	ldrb	r3, [r5, #16]
 8008352:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8008354:	4a99      	ldr	r2, [pc, #612]	@ (80085bc <loadMenuTexts+0x1250>)
 8008356:	4b9a      	ldr	r3, [pc, #616]	@ (80085c0 <loadMenuTexts+0x1254>)
 8008358:	4614      	mov	r4, r2
 800835a:	461d      	mov	r5, r3
 800835c:	6828      	ldr	r0, [r5, #0]
 800835e:	6869      	ldr	r1, [r5, #4]
 8008360:	68aa      	ldr	r2, [r5, #8]
 8008362:	68eb      	ldr	r3, [r5, #12]
 8008364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008366:	7c2b      	ldrb	r3, [r5, #16]
 8008368:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 800836a:	4a96      	ldr	r2, [pc, #600]	@ (80085c4 <loadMenuTexts+0x1258>)
 800836c:	4b96      	ldr	r3, [pc, #600]	@ (80085c8 <loadMenuTexts+0x125c>)
 800836e:	4614      	mov	r4, r2
 8008370:	461d      	mov	r5, r3
 8008372:	6828      	ldr	r0, [r5, #0]
 8008374:	6869      	ldr	r1, [r5, #4]
 8008376:	68aa      	ldr	r2, [r5, #8]
 8008378:	68eb      	ldr	r3, [r5, #12]
 800837a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800837c:	7c2b      	ldrb	r3, [r5, #16]
 800837e:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8008380:	4a92      	ldr	r2, [pc, #584]	@ (80085cc <loadMenuTexts+0x1260>)
 8008382:	4b93      	ldr	r3, [pc, #588]	@ (80085d0 <loadMenuTexts+0x1264>)
 8008384:	4614      	mov	r4, r2
 8008386:	461d      	mov	r5, r3
 8008388:	6828      	ldr	r0, [r5, #0]
 800838a:	6869      	ldr	r1, [r5, #4]
 800838c:	68aa      	ldr	r2, [r5, #8]
 800838e:	68eb      	ldr	r3, [r5, #12]
 8008390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008392:	7c2b      	ldrb	r3, [r5, #16]
 8008394:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8008396:	4a8f      	ldr	r2, [pc, #572]	@ (80085d4 <loadMenuTexts+0x1268>)
 8008398:	4b8f      	ldr	r3, [pc, #572]	@ (80085d8 <loadMenuTexts+0x126c>)
 800839a:	4614      	mov	r4, r2
 800839c:	461d      	mov	r5, r3
 800839e:	6828      	ldr	r0, [r5, #0]
 80083a0:	6869      	ldr	r1, [r5, #4]
 80083a2:	68aa      	ldr	r2, [r5, #8]
 80083a4:	68eb      	ldr	r3, [r5, #12]
 80083a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083a8:	7c2b      	ldrb	r3, [r5, #16]
 80083aa:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 80083ac:	4a8b      	ldr	r2, [pc, #556]	@ (80085dc <loadMenuTexts+0x1270>)
 80083ae:	4b8c      	ldr	r3, [pc, #560]	@ (80085e0 <loadMenuTexts+0x1274>)
 80083b0:	4614      	mov	r4, r2
 80083b2:	461d      	mov	r5, r3
 80083b4:	6828      	ldr	r0, [r5, #0]
 80083b6:	6869      	ldr	r1, [r5, #4]
 80083b8:	68aa      	ldr	r2, [r5, #8]
 80083ba:	68eb      	ldr	r3, [r5, #12]
 80083bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083be:	7c2b      	ldrb	r3, [r5, #16]
 80083c0:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 80083c2:	4a88      	ldr	r2, [pc, #544]	@ (80085e4 <loadMenuTexts+0x1278>)
 80083c4:	4b88      	ldr	r3, [pc, #544]	@ (80085e8 <loadMenuTexts+0x127c>)
 80083c6:	4614      	mov	r4, r2
 80083c8:	461d      	mov	r5, r3
 80083ca:	6828      	ldr	r0, [r5, #0]
 80083cc:	6869      	ldr	r1, [r5, #4]
 80083ce:	68aa      	ldr	r2, [r5, #8]
 80083d0:	68eb      	ldr	r3, [r5, #12]
 80083d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083d4:	7c2b      	ldrb	r3, [r5, #16]
 80083d6:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 80083d8:	4a84      	ldr	r2, [pc, #528]	@ (80085ec <loadMenuTexts+0x1280>)
 80083da:	4b85      	ldr	r3, [pc, #532]	@ (80085f0 <loadMenuTexts+0x1284>)
 80083dc:	4614      	mov	r4, r2
 80083de:	461d      	mov	r5, r3
 80083e0:	6828      	ldr	r0, [r5, #0]
 80083e2:	6869      	ldr	r1, [r5, #4]
 80083e4:	68aa      	ldr	r2, [r5, #8]
 80083e6:	68eb      	ldr	r3, [r5, #12]
 80083e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083ea:	7c2b      	ldrb	r3, [r5, #16]
 80083ec:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 80083ee:	4a81      	ldr	r2, [pc, #516]	@ (80085f4 <loadMenuTexts+0x1288>)
 80083f0:	4b81      	ldr	r3, [pc, #516]	@ (80085f8 <loadMenuTexts+0x128c>)
 80083f2:	4614      	mov	r4, r2
 80083f4:	461d      	mov	r5, r3
 80083f6:	6828      	ldr	r0, [r5, #0]
 80083f8:	6869      	ldr	r1, [r5, #4]
 80083fa:	68aa      	ldr	r2, [r5, #8]
 80083fc:	68eb      	ldr	r3, [r5, #12]
 80083fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008400:	7c2b      	ldrb	r3, [r5, #16]
 8008402:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 8008404:	4a7d      	ldr	r2, [pc, #500]	@ (80085fc <loadMenuTexts+0x1290>)
 8008406:	4b7e      	ldr	r3, [pc, #504]	@ (8008600 <loadMenuTexts+0x1294>)
 8008408:	4614      	mov	r4, r2
 800840a:	461d      	mov	r5, r3
 800840c:	6828      	ldr	r0, [r5, #0]
 800840e:	6869      	ldr	r1, [r5, #4]
 8008410:	68aa      	ldr	r2, [r5, #8]
 8008412:	68eb      	ldr	r3, [r5, #12]
 8008414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008416:	7c2b      	ldrb	r3, [r5, #16]
 8008418:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 800841a:	4a7a      	ldr	r2, [pc, #488]	@ (8008604 <loadMenuTexts+0x1298>)
 800841c:	4b7a      	ldr	r3, [pc, #488]	@ (8008608 <loadMenuTexts+0x129c>)
 800841e:	4614      	mov	r4, r2
 8008420:	461d      	mov	r5, r3
 8008422:	6828      	ldr	r0, [r5, #0]
 8008424:	6869      	ldr	r1, [r5, #4]
 8008426:	68aa      	ldr	r2, [r5, #8]
 8008428:	68eb      	ldr	r3, [r5, #12]
 800842a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800842c:	7c2b      	ldrb	r3, [r5, #16]
 800842e:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8008430:	4a76      	ldr	r2, [pc, #472]	@ (800860c <loadMenuTexts+0x12a0>)
 8008432:	4b77      	ldr	r3, [pc, #476]	@ (8008610 <loadMenuTexts+0x12a4>)
 8008434:	4614      	mov	r4, r2
 8008436:	461d      	mov	r5, r3
 8008438:	6828      	ldr	r0, [r5, #0]
 800843a:	6869      	ldr	r1, [r5, #4]
 800843c:	68aa      	ldr	r2, [r5, #8]
 800843e:	68eb      	ldr	r3, [r5, #12]
 8008440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008442:	7c2b      	ldrb	r3, [r5, #16]
 8008444:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8008446:	4a73      	ldr	r2, [pc, #460]	@ (8008614 <loadMenuTexts+0x12a8>)
 8008448:	4b73      	ldr	r3, [pc, #460]	@ (8008618 <loadMenuTexts+0x12ac>)
 800844a:	4614      	mov	r4, r2
 800844c:	461d      	mov	r5, r3
 800844e:	6828      	ldr	r0, [r5, #0]
 8008450:	6869      	ldr	r1, [r5, #4]
 8008452:	68aa      	ldr	r2, [r5, #8]
 8008454:	68eb      	ldr	r3, [r5, #12]
 8008456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008458:	7c2b      	ldrb	r3, [r5, #16]
 800845a:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 800845c:	4a6f      	ldr	r2, [pc, #444]	@ (800861c <loadMenuTexts+0x12b0>)
 800845e:	4b70      	ldr	r3, [pc, #448]	@ (8008620 <loadMenuTexts+0x12b4>)
 8008460:	4614      	mov	r4, r2
 8008462:	461d      	mov	r5, r3
 8008464:	6828      	ldr	r0, [r5, #0]
 8008466:	6869      	ldr	r1, [r5, #4]
 8008468:	68aa      	ldr	r2, [r5, #8]
 800846a:	68eb      	ldr	r3, [r5, #12]
 800846c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800846e:	7c2b      	ldrb	r3, [r5, #16]
 8008470:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 8008472:	4a6c      	ldr	r2, [pc, #432]	@ (8008624 <loadMenuTexts+0x12b8>)
 8008474:	4b6c      	ldr	r3, [pc, #432]	@ (8008628 <loadMenuTexts+0x12bc>)
 8008476:	4614      	mov	r4, r2
 8008478:	461d      	mov	r5, r3
 800847a:	6828      	ldr	r0, [r5, #0]
 800847c:	6869      	ldr	r1, [r5, #4]
 800847e:	68aa      	ldr	r2, [r5, #8]
 8008480:	68eb      	ldr	r3, [r5, #12]
 8008482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008484:	7c2b      	ldrb	r3, [r5, #16]
 8008486:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8008488:	4a68      	ldr	r2, [pc, #416]	@ (800862c <loadMenuTexts+0x12c0>)
 800848a:	4b69      	ldr	r3, [pc, #420]	@ (8008630 <loadMenuTexts+0x12c4>)
 800848c:	4614      	mov	r4, r2
 800848e:	461d      	mov	r5, r3
 8008490:	6828      	ldr	r0, [r5, #0]
 8008492:	6869      	ldr	r1, [r5, #4]
 8008494:	68aa      	ldr	r2, [r5, #8]
 8008496:	68eb      	ldr	r3, [r5, #12]
 8008498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800849a:	7c2b      	ldrb	r3, [r5, #16]
 800849c:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 800849e:	4a65      	ldr	r2, [pc, #404]	@ (8008634 <loadMenuTexts+0x12c8>)
 80084a0:	4b65      	ldr	r3, [pc, #404]	@ (8008638 <loadMenuTexts+0x12cc>)
 80084a2:	4614      	mov	r4, r2
 80084a4:	461d      	mov	r5, r3
 80084a6:	6828      	ldr	r0, [r5, #0]
 80084a8:	6869      	ldr	r1, [r5, #4]
 80084aa:	68aa      	ldr	r2, [r5, #8]
 80084ac:	68eb      	ldr	r3, [r5, #12]
 80084ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084b0:	7c2b      	ldrb	r3, [r5, #16]
 80084b2:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 80084b4:	4a61      	ldr	r2, [pc, #388]	@ (800863c <loadMenuTexts+0x12d0>)
 80084b6:	4b62      	ldr	r3, [pc, #392]	@ (8008640 <loadMenuTexts+0x12d4>)
 80084b8:	4614      	mov	r4, r2
 80084ba:	461d      	mov	r5, r3
 80084bc:	6828      	ldr	r0, [r5, #0]
 80084be:	6869      	ldr	r1, [r5, #4]
 80084c0:	68aa      	ldr	r2, [r5, #8]
 80084c2:	68eb      	ldr	r3, [r5, #12]
 80084c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084c6:	7c2b      	ldrb	r3, [r5, #16]
 80084c8:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 80084ca:	4a5e      	ldr	r2, [pc, #376]	@ (8008644 <loadMenuTexts+0x12d8>)
 80084cc:	4b5e      	ldr	r3, [pc, #376]	@ (8008648 <loadMenuTexts+0x12dc>)
 80084ce:	4614      	mov	r4, r2
 80084d0:	461d      	mov	r5, r3
 80084d2:	6828      	ldr	r0, [r5, #0]
 80084d4:	6869      	ldr	r1, [r5, #4]
 80084d6:	68aa      	ldr	r2, [r5, #8]
 80084d8:	68eb      	ldr	r3, [r5, #12]
 80084da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084dc:	7c2b      	ldrb	r3, [r5, #16]
 80084de:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 80084e0:	4a5a      	ldr	r2, [pc, #360]	@ (800864c <loadMenuTexts+0x12e0>)
 80084e2:	4b5b      	ldr	r3, [pc, #364]	@ (8008650 <loadMenuTexts+0x12e4>)
 80084e4:	4614      	mov	r4, r2
 80084e6:	461d      	mov	r5, r3
 80084e8:	6828      	ldr	r0, [r5, #0]
 80084ea:	6869      	ldr	r1, [r5, #4]
 80084ec:	68aa      	ldr	r2, [r5, #8]
 80084ee:	68eb      	ldr	r3, [r5, #12]
 80084f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80084f2:	7c2b      	ldrb	r3, [r5, #16]
 80084f4:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 80084f6:	4a57      	ldr	r2, [pc, #348]	@ (8008654 <loadMenuTexts+0x12e8>)
 80084f8:	4b57      	ldr	r3, [pc, #348]	@ (8008658 <loadMenuTexts+0x12ec>)
 80084fa:	4614      	mov	r4, r2
 80084fc:	461d      	mov	r5, r3
 80084fe:	6828      	ldr	r0, [r5, #0]
 8008500:	6869      	ldr	r1, [r5, #4]
 8008502:	68aa      	ldr	r2, [r5, #8]
 8008504:	68eb      	ldr	r3, [r5, #12]
 8008506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008508:	7c2b      	ldrb	r3, [r5, #16]
 800850a:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 800850c:	4a53      	ldr	r2, [pc, #332]	@ (800865c <loadMenuTexts+0x12f0>)
 800850e:	4b54      	ldr	r3, [pc, #336]	@ (8008660 <loadMenuTexts+0x12f4>)
 8008510:	4614      	mov	r4, r2
 8008512:	461d      	mov	r5, r3
 8008514:	6828      	ldr	r0, [r5, #0]
 8008516:	6869      	ldr	r1, [r5, #4]
 8008518:	68aa      	ldr	r2, [r5, #8]
 800851a:	68eb      	ldr	r3, [r5, #12]
 800851c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800851e:	7c2b      	ldrb	r3, [r5, #16]
 8008520:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 8008522:	4a50      	ldr	r2, [pc, #320]	@ (8008664 <loadMenuTexts+0x12f8>)
 8008524:	4b50      	ldr	r3, [pc, #320]	@ (8008668 <loadMenuTexts+0x12fc>)
 8008526:	4614      	mov	r4, r2
 8008528:	461d      	mov	r5, r3
 800852a:	6828      	ldr	r0, [r5, #0]
 800852c:	6869      	ldr	r1, [r5, #4]
 800852e:	68aa      	ldr	r2, [r5, #8]
 8008530:	68eb      	ldr	r3, [r5, #12]
 8008532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008534:	7c2b      	ldrb	r3, [r5, #16]
 8008536:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 8008538:	4a4c      	ldr	r2, [pc, #304]	@ (800866c <loadMenuTexts+0x1300>)
 800853a:	4b4d      	ldr	r3, [pc, #308]	@ (8008670 <loadMenuTexts+0x1304>)
 800853c:	4614      	mov	r4, r2
 800853e:	461d      	mov	r5, r3
 8008540:	6828      	ldr	r0, [r5, #0]
 8008542:	6869      	ldr	r1, [r5, #4]
 8008544:	68aa      	ldr	r2, [r5, #8]
 8008546:	68eb      	ldr	r3, [r5, #12]
 8008548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800854a:	7c2b      	ldrb	r3, [r5, #16]
 800854c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 800854e:	4a49      	ldr	r2, [pc, #292]	@ (8008674 <loadMenuTexts+0x1308>)
 8008550:	4b49      	ldr	r3, [pc, #292]	@ (8008678 <loadMenuTexts+0x130c>)
 8008552:	4614      	mov	r4, r2
 8008554:	461d      	mov	r5, r3
 8008556:	e091      	b.n	800867c <loadMenuTexts+0x1310>
 8008558:	200009d4 	.word	0x200009d4
 800855c:	200013b8 	.word	0x200013b8
 8008560:	200009e8 	.word	0x200009e8
 8008564:	200013cc 	.word	0x200013cc
 8008568:	200009fc 	.word	0x200009fc
 800856c:	200013e0 	.word	0x200013e0
 8008570:	20000a10 	.word	0x20000a10
 8008574:	200013f4 	.word	0x200013f4
 8008578:	20000a24 	.word	0x20000a24
 800857c:	20001408 	.word	0x20001408
 8008580:	20000a38 	.word	0x20000a38
 8008584:	2000141c 	.word	0x2000141c
 8008588:	20000a4c 	.word	0x20000a4c
 800858c:	20001430 	.word	0x20001430
 8008590:	20000a60 	.word	0x20000a60
 8008594:	20001444 	.word	0x20001444
 8008598:	20000a74 	.word	0x20000a74
 800859c:	20001458 	.word	0x20001458
 80085a0:	20000a88 	.word	0x20000a88
 80085a4:	2000146c 	.word	0x2000146c
 80085a8:	20000a9c 	.word	0x20000a9c
 80085ac:	20001480 	.word	0x20001480
 80085b0:	20000ab0 	.word	0x20000ab0
 80085b4:	20001494 	.word	0x20001494
 80085b8:	20000ac4 	.word	0x20000ac4
 80085bc:	200014a8 	.word	0x200014a8
 80085c0:	20000ad8 	.word	0x20000ad8
 80085c4:	200014bc 	.word	0x200014bc
 80085c8:	20000aec 	.word	0x20000aec
 80085cc:	200014d0 	.word	0x200014d0
 80085d0:	20000b00 	.word	0x20000b00
 80085d4:	200014e4 	.word	0x200014e4
 80085d8:	20000b14 	.word	0x20000b14
 80085dc:	200014f8 	.word	0x200014f8
 80085e0:	20000b28 	.word	0x20000b28
 80085e4:	2000150c 	.word	0x2000150c
 80085e8:	20000b3c 	.word	0x20000b3c
 80085ec:	20001520 	.word	0x20001520
 80085f0:	20000b50 	.word	0x20000b50
 80085f4:	20001534 	.word	0x20001534
 80085f8:	20000b64 	.word	0x20000b64
 80085fc:	20001548 	.word	0x20001548
 8008600:	20000b78 	.word	0x20000b78
 8008604:	2000155c 	.word	0x2000155c
 8008608:	20000b8c 	.word	0x20000b8c
 800860c:	20001570 	.word	0x20001570
 8008610:	20000ba0 	.word	0x20000ba0
 8008614:	20001584 	.word	0x20001584
 8008618:	20000bb4 	.word	0x20000bb4
 800861c:	20001598 	.word	0x20001598
 8008620:	20000bc8 	.word	0x20000bc8
 8008624:	200015ac 	.word	0x200015ac
 8008628:	20000bdc 	.word	0x20000bdc
 800862c:	200015c0 	.word	0x200015c0
 8008630:	20000bf0 	.word	0x20000bf0
 8008634:	200015d4 	.word	0x200015d4
 8008638:	20000c04 	.word	0x20000c04
 800863c:	200015e8 	.word	0x200015e8
 8008640:	20000c18 	.word	0x20000c18
 8008644:	200015fc 	.word	0x200015fc
 8008648:	20000c2c 	.word	0x20000c2c
 800864c:	20001610 	.word	0x20001610
 8008650:	20000c40 	.word	0x20000c40
 8008654:	20001624 	.word	0x20001624
 8008658:	20000c54 	.word	0x20000c54
 800865c:	20001638 	.word	0x20001638
 8008660:	20000c68 	.word	0x20000c68
 8008664:	2000164c 	.word	0x2000164c
 8008668:	20000cf4 	.word	0x20000cf4
 800866c:	20001660 	.word	0x20001660
 8008670:	20000d08 	.word	0x20000d08
 8008674:	20001674 	.word	0x20001674
 8008678:	20000ccc 	.word	0x20000ccc
 800867c:	6828      	ldr	r0, [r5, #0]
 800867e:	6869      	ldr	r1, [r5, #4]
 8008680:	68aa      	ldr	r2, [r5, #8]
 8008682:	68eb      	ldr	r3, [r5, #12]
 8008684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008686:	7c2b      	ldrb	r3, [r5, #16]
 8008688:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 800868a:	4a5b      	ldr	r2, [pc, #364]	@ (80087f8 <loadMenuTexts+0x148c>)
 800868c:	4b5b      	ldr	r3, [pc, #364]	@ (80087fc <loadMenuTexts+0x1490>)
 800868e:	4614      	mov	r4, r2
 8008690:	461d      	mov	r5, r3
 8008692:	6828      	ldr	r0, [r5, #0]
 8008694:	6869      	ldr	r1, [r5, #4]
 8008696:	68aa      	ldr	r2, [r5, #8]
 8008698:	68eb      	ldr	r3, [r5, #12]
 800869a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800869c:	7c2b      	ldrb	r3, [r5, #16]
 800869e:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 80086a0:	4a57      	ldr	r2, [pc, #348]	@ (8008800 <loadMenuTexts+0x1494>)
 80086a2:	4b58      	ldr	r3, [pc, #352]	@ (8008804 <loadMenuTexts+0x1498>)
 80086a4:	4614      	mov	r4, r2
 80086a6:	461d      	mov	r5, r3
 80086a8:	6828      	ldr	r0, [r5, #0]
 80086aa:	6869      	ldr	r1, [r5, #4]
 80086ac:	68aa      	ldr	r2, [r5, #8]
 80086ae:	68eb      	ldr	r3, [r5, #12]
 80086b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086b2:	7c2b      	ldrb	r3, [r5, #16]
 80086b4:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 80086b6:	4a54      	ldr	r2, [pc, #336]	@ (8008808 <loadMenuTexts+0x149c>)
 80086b8:	4b54      	ldr	r3, [pc, #336]	@ (800880c <loadMenuTexts+0x14a0>)
 80086ba:	4614      	mov	r4, r2
 80086bc:	461d      	mov	r5, r3
 80086be:	6828      	ldr	r0, [r5, #0]
 80086c0:	6869      	ldr	r1, [r5, #4]
 80086c2:	68aa      	ldr	r2, [r5, #8]
 80086c4:	68eb      	ldr	r3, [r5, #12]
 80086c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086c8:	7c2b      	ldrb	r3, [r5, #16]
 80086ca:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 80086cc:	4a50      	ldr	r2, [pc, #320]	@ (8008810 <loadMenuTexts+0x14a4>)
 80086ce:	4b51      	ldr	r3, [pc, #324]	@ (8008814 <loadMenuTexts+0x14a8>)
 80086d0:	4614      	mov	r4, r2
 80086d2:	461d      	mov	r5, r3
 80086d4:	6828      	ldr	r0, [r5, #0]
 80086d6:	6869      	ldr	r1, [r5, #4]
 80086d8:	68aa      	ldr	r2, [r5, #8]
 80086da:	68eb      	ldr	r3, [r5, #12]
 80086dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086de:	7c2b      	ldrb	r3, [r5, #16]
 80086e0:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 80086e2:	4a4d      	ldr	r2, [pc, #308]	@ (8008818 <loadMenuTexts+0x14ac>)
 80086e4:	4b4d      	ldr	r3, [pc, #308]	@ (800881c <loadMenuTexts+0x14b0>)
 80086e6:	4614      	mov	r4, r2
 80086e8:	461d      	mov	r5, r3
 80086ea:	6828      	ldr	r0, [r5, #0]
 80086ec:	6869      	ldr	r1, [r5, #4]
 80086ee:	68aa      	ldr	r2, [r5, #8]
 80086f0:	68eb      	ldr	r3, [r5, #12]
 80086f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086f4:	7c2b      	ldrb	r3, [r5, #16]
 80086f6:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 80086f8:	4a49      	ldr	r2, [pc, #292]	@ (8008820 <loadMenuTexts+0x14b4>)
 80086fa:	4b4a      	ldr	r3, [pc, #296]	@ (8008824 <loadMenuTexts+0x14b8>)
 80086fc:	4614      	mov	r4, r2
 80086fe:	461d      	mov	r5, r3
 8008700:	6828      	ldr	r0, [r5, #0]
 8008702:	6869      	ldr	r1, [r5, #4]
 8008704:	68aa      	ldr	r2, [r5, #8]
 8008706:	68eb      	ldr	r3, [r5, #12]
 8008708:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800870a:	7c2b      	ldrb	r3, [r5, #16]
 800870c:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 800870e:	4a46      	ldr	r2, [pc, #280]	@ (8008828 <loadMenuTexts+0x14bc>)
 8008710:	4b46      	ldr	r3, [pc, #280]	@ (800882c <loadMenuTexts+0x14c0>)
 8008712:	4614      	mov	r4, r2
 8008714:	461d      	mov	r5, r3
 8008716:	6828      	ldr	r0, [r5, #0]
 8008718:	6869      	ldr	r1, [r5, #4]
 800871a:	68aa      	ldr	r2, [r5, #8]
 800871c:	68eb      	ldr	r3, [r5, #12]
 800871e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008720:	7c2b      	ldrb	r3, [r5, #16]
 8008722:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 8008724:	4a42      	ldr	r2, [pc, #264]	@ (8008830 <loadMenuTexts+0x14c4>)
 8008726:	4b43      	ldr	r3, [pc, #268]	@ (8008834 <loadMenuTexts+0x14c8>)
 8008728:	4614      	mov	r4, r2
 800872a:	461d      	mov	r5, r3
 800872c:	6828      	ldr	r0, [r5, #0]
 800872e:	6869      	ldr	r1, [r5, #4]
 8008730:	68aa      	ldr	r2, [r5, #8]
 8008732:	68eb      	ldr	r3, [r5, #12]
 8008734:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008736:	7c2b      	ldrb	r3, [r5, #16]
 8008738:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 800873a:	4a3f      	ldr	r2, [pc, #252]	@ (8008838 <loadMenuTexts+0x14cc>)
 800873c:	4b3f      	ldr	r3, [pc, #252]	@ (800883c <loadMenuTexts+0x14d0>)
 800873e:	4614      	mov	r4, r2
 8008740:	461d      	mov	r5, r3
 8008742:	6828      	ldr	r0, [r5, #0]
 8008744:	6869      	ldr	r1, [r5, #4]
 8008746:	68aa      	ldr	r2, [r5, #8]
 8008748:	68eb      	ldr	r3, [r5, #12]
 800874a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800874c:	7c2b      	ldrb	r3, [r5, #16]
 800874e:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 8008750:	4a3b      	ldr	r2, [pc, #236]	@ (8008840 <loadMenuTexts+0x14d4>)
 8008752:	4b3c      	ldr	r3, [pc, #240]	@ (8008844 <loadMenuTexts+0x14d8>)
 8008754:	4614      	mov	r4, r2
 8008756:	461d      	mov	r5, r3
 8008758:	6828      	ldr	r0, [r5, #0]
 800875a:	6869      	ldr	r1, [r5, #4]
 800875c:	68aa      	ldr	r2, [r5, #8]
 800875e:	68eb      	ldr	r3, [r5, #12]
 8008760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008762:	7c2b      	ldrb	r3, [r5, #16]
 8008764:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 8008766:	4a38      	ldr	r2, [pc, #224]	@ (8008848 <loadMenuTexts+0x14dc>)
 8008768:	4b38      	ldr	r3, [pc, #224]	@ (800884c <loadMenuTexts+0x14e0>)
 800876a:	4614      	mov	r4, r2
 800876c:	461d      	mov	r5, r3
 800876e:	6828      	ldr	r0, [r5, #0]
 8008770:	6869      	ldr	r1, [r5, #4]
 8008772:	68aa      	ldr	r2, [r5, #8]
 8008774:	68eb      	ldr	r3, [r5, #12]
 8008776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008778:	7c2b      	ldrb	r3, [r5, #16]
 800877a:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 800877c:	4a34      	ldr	r2, [pc, #208]	@ (8008850 <loadMenuTexts+0x14e4>)
 800877e:	4b35      	ldr	r3, [pc, #212]	@ (8008854 <loadMenuTexts+0x14e8>)
 8008780:	4614      	mov	r4, r2
 8008782:	461d      	mov	r5, r3
 8008784:	6828      	ldr	r0, [r5, #0]
 8008786:	6869      	ldr	r1, [r5, #4]
 8008788:	68aa      	ldr	r2, [r5, #8]
 800878a:	68eb      	ldr	r3, [r5, #12]
 800878c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800878e:	7c2b      	ldrb	r3, [r5, #16]
 8008790:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 8008792:	4a31      	ldr	r2, [pc, #196]	@ (8008858 <loadMenuTexts+0x14ec>)
 8008794:	4b31      	ldr	r3, [pc, #196]	@ (800885c <loadMenuTexts+0x14f0>)
 8008796:	4614      	mov	r4, r2
 8008798:	461d      	mov	r5, r3
 800879a:	6828      	ldr	r0, [r5, #0]
 800879c:	6869      	ldr	r1, [r5, #4]
 800879e:	68aa      	ldr	r2, [r5, #8]
 80087a0:	68eb      	ldr	r3, [r5, #12]
 80087a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087a4:	7c2b      	ldrb	r3, [r5, #16]
 80087a6:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 80087a8:	4a2d      	ldr	r2, [pc, #180]	@ (8008860 <loadMenuTexts+0x14f4>)
 80087aa:	4b2e      	ldr	r3, [pc, #184]	@ (8008864 <loadMenuTexts+0x14f8>)
 80087ac:	4614      	mov	r4, r2
 80087ae:	461d      	mov	r5, r3
 80087b0:	6828      	ldr	r0, [r5, #0]
 80087b2:	6869      	ldr	r1, [r5, #4]
 80087b4:	68aa      	ldr	r2, [r5, #8]
 80087b6:	68eb      	ldr	r3, [r5, #12]
 80087b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087ba:	7c2b      	ldrb	r3, [r5, #16]
 80087bc:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 80087be:	4a2a      	ldr	r2, [pc, #168]	@ (8008868 <loadMenuTexts+0x14fc>)
 80087c0:	4b2a      	ldr	r3, [pc, #168]	@ (800886c <loadMenuTexts+0x1500>)
 80087c2:	4614      	mov	r4, r2
 80087c4:	461d      	mov	r5, r3
 80087c6:	6828      	ldr	r0, [r5, #0]
 80087c8:	6869      	ldr	r1, [r5, #4]
 80087ca:	68aa      	ldr	r2, [r5, #8]
 80087cc:	68eb      	ldr	r3, [r5, #12]
 80087ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087d0:	7c2b      	ldrb	r3, [r5, #16]
 80087d2:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 80087d4:	4a26      	ldr	r2, [pc, #152]	@ (8008870 <loadMenuTexts+0x1504>)
 80087d6:	4b27      	ldr	r3, [pc, #156]	@ (8008874 <loadMenuTexts+0x1508>)
 80087d8:	4614      	mov	r4, r2
 80087da:	461d      	mov	r5, r3
 80087dc:	6828      	ldr	r0, [r5, #0]
 80087de:	6869      	ldr	r1, [r5, #4]
 80087e0:	68aa      	ldr	r2, [r5, #8]
 80087e2:	68eb      	ldr	r3, [r5, #12]
 80087e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80087e6:	7c2b      	ldrb	r3, [r5, #16]
 80087e8:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 80087ea:	f000 f845 	bl	8008878 <menuVariableFinisher>
}
 80087ee:	bf00      	nop
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bdb0      	pop	{r4, r5, r7, pc}
 80087f6:	bf00      	nop
 80087f8:	20001688 	.word	0x20001688
 80087fc:	20000ce0 	.word	0x20000ce0
 8008800:	2000169c 	.word	0x2000169c
 8008804:	20000d44 	.word	0x20000d44
 8008808:	200016b0 	.word	0x200016b0
 800880c:	20000d58 	.word	0x20000d58
 8008810:	200016c4 	.word	0x200016c4
 8008814:	20000d94 	.word	0x20000d94
 8008818:	200016d8 	.word	0x200016d8
 800881c:	20000da8 	.word	0x20000da8
 8008820:	200016ec 	.word	0x200016ec
 8008824:	20000de4 	.word	0x20000de4
 8008828:	20001700 	.word	0x20001700
 800882c:	20000df8 	.word	0x20000df8
 8008830:	20001714 	.word	0x20001714
 8008834:	20000e20 	.word	0x20000e20
 8008838:	20001728 	.word	0x20001728
 800883c:	20000e48 	.word	0x20000e48
 8008840:	2000173c 	.word	0x2000173c
 8008844:	20000e70 	.word	0x20000e70
 8008848:	20001750 	.word	0x20001750
 800884c:	20000e98 	.word	0x20000e98
 8008850:	20001764 	.word	0x20001764
 8008854:	20000ec0 	.word	0x20000ec0
 8008858:	20001778 	.word	0x20001778
 800885c:	20000ee8 	.word	0x20000ee8
 8008860:	2000178c 	.word	0x2000178c
 8008864:	20000f10 	.word	0x20000f10
 8008868:	200017a0 	.word	0x200017a0
 800886c:	20000f38 	.word	0x20000f38
 8008870:	200017b4 	.word	0x200017b4
 8008874:	20000f60 	.word	0x20000f60

08008878 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 8008878:	b480      	push	{r7}
 800887a:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 800887c:	4b99      	ldr	r3, [pc, #612]	@ (8008ae4 <menuVariableFinisher+0x26c>)
 800887e:	2200      	movs	r2, #0
 8008880:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 8008882:	4b99      	ldr	r3, [pc, #612]	@ (8008ae8 <menuVariableFinisher+0x270>)
 8008884:	2200      	movs	r2, #0
 8008886:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 8008888:	4b98      	ldr	r3, [pc, #608]	@ (8008aec <menuVariableFinisher+0x274>)
 800888a:	2200      	movs	r2, #0
 800888c:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 800888e:	4b98      	ldr	r3, [pc, #608]	@ (8008af0 <menuVariableFinisher+0x278>)
 8008890:	2200      	movs	r2, #0
 8008892:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 8008894:	4b97      	ldr	r3, [pc, #604]	@ (8008af4 <menuVariableFinisher+0x27c>)
 8008896:	2200      	movs	r2, #0
 8008898:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 800889a:	4b97      	ldr	r3, [pc, #604]	@ (8008af8 <menuVariableFinisher+0x280>)
 800889c:	2200      	movs	r2, #0
 800889e:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 80088a0:	4b96      	ldr	r3, [pc, #600]	@ (8008afc <menuVariableFinisher+0x284>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 80088a6:	4b96      	ldr	r3, [pc, #600]	@ (8008b00 <menuVariableFinisher+0x288>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 80088ac:	4b95      	ldr	r3, [pc, #596]	@ (8008b04 <menuVariableFinisher+0x28c>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 80088b2:	4b95      	ldr	r3, [pc, #596]	@ (8008b08 <menuVariableFinisher+0x290>)
 80088b4:	2200      	movs	r2, #0
 80088b6:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 80088b8:	4b94      	ldr	r3, [pc, #592]	@ (8008b0c <menuVariableFinisher+0x294>)
 80088ba:	2200      	movs	r2, #0
 80088bc:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 80088be:	4b94      	ldr	r3, [pc, #592]	@ (8008b10 <menuVariableFinisher+0x298>)
 80088c0:	2200      	movs	r2, #0
 80088c2:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 80088c4:	4b93      	ldr	r3, [pc, #588]	@ (8008b14 <menuVariableFinisher+0x29c>)
 80088c6:	2200      	movs	r2, #0
 80088c8:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 80088ca:	4b93      	ldr	r3, [pc, #588]	@ (8008b18 <menuVariableFinisher+0x2a0>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 80088d0:	4b92      	ldr	r3, [pc, #584]	@ (8008b1c <menuVariableFinisher+0x2a4>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 80088d6:	4b92      	ldr	r3, [pc, #584]	@ (8008b20 <menuVariableFinisher+0x2a8>)
 80088d8:	2200      	movs	r2, #0
 80088da:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 80088dc:	4b91      	ldr	r3, [pc, #580]	@ (8008b24 <menuVariableFinisher+0x2ac>)
 80088de:	2200      	movs	r2, #0
 80088e0:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 80088e2:	4b91      	ldr	r3, [pc, #580]	@ (8008b28 <menuVariableFinisher+0x2b0>)
 80088e4:	2200      	movs	r2, #0
 80088e6:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 80088e8:	4b90      	ldr	r3, [pc, #576]	@ (8008b2c <menuVariableFinisher+0x2b4>)
 80088ea:	2200      	movs	r2, #0
 80088ec:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 80088ee:	4b90      	ldr	r3, [pc, #576]	@ (8008b30 <menuVariableFinisher+0x2b8>)
 80088f0:	2200      	movs	r2, #0
 80088f2:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 80088f4:	4b8f      	ldr	r3, [pc, #572]	@ (8008b34 <menuVariableFinisher+0x2bc>)
 80088f6:	2200      	movs	r2, #0
 80088f8:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 80088fa:	4b8f      	ldr	r3, [pc, #572]	@ (8008b38 <menuVariableFinisher+0x2c0>)
 80088fc:	2200      	movs	r2, #0
 80088fe:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 8008900:	4b8e      	ldr	r3, [pc, #568]	@ (8008b3c <menuVariableFinisher+0x2c4>)
 8008902:	2200      	movs	r2, #0
 8008904:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 8008906:	4b8e      	ldr	r3, [pc, #568]	@ (8008b40 <menuVariableFinisher+0x2c8>)
 8008908:	2200      	movs	r2, #0
 800890a:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 800890c:	4b8d      	ldr	r3, [pc, #564]	@ (8008b44 <menuVariableFinisher+0x2cc>)
 800890e:	2200      	movs	r2, #0
 8008910:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 8008912:	4b8d      	ldr	r3, [pc, #564]	@ (8008b48 <menuVariableFinisher+0x2d0>)
 8008914:	2200      	movs	r2, #0
 8008916:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 8008918:	4b8c      	ldr	r3, [pc, #560]	@ (8008b4c <menuVariableFinisher+0x2d4>)
 800891a:	2200      	movs	r2, #0
 800891c:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 800891e:	4b8c      	ldr	r3, [pc, #560]	@ (8008b50 <menuVariableFinisher+0x2d8>)
 8008920:	2200      	movs	r2, #0
 8008922:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 8008924:	4b8b      	ldr	r3, [pc, #556]	@ (8008b54 <menuVariableFinisher+0x2dc>)
 8008926:	2200      	movs	r2, #0
 8008928:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 800892a:	4b8b      	ldr	r3, [pc, #556]	@ (8008b58 <menuVariableFinisher+0x2e0>)
 800892c:	2200      	movs	r2, #0
 800892e:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 8008930:	4b8a      	ldr	r3, [pc, #552]	@ (8008b5c <menuVariableFinisher+0x2e4>)
 8008932:	2200      	movs	r2, #0
 8008934:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 8008936:	4b8a      	ldr	r3, [pc, #552]	@ (8008b60 <menuVariableFinisher+0x2e8>)
 8008938:	2200      	movs	r2, #0
 800893a:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 800893c:	4b89      	ldr	r3, [pc, #548]	@ (8008b64 <menuVariableFinisher+0x2ec>)
 800893e:	2200      	movs	r2, #0
 8008940:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 8008942:	4b89      	ldr	r3, [pc, #548]	@ (8008b68 <menuVariableFinisher+0x2f0>)
 8008944:	2200      	movs	r2, #0
 8008946:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 8008948:	4b88      	ldr	r3, [pc, #544]	@ (8008b6c <menuVariableFinisher+0x2f4>)
 800894a:	2200      	movs	r2, #0
 800894c:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 800894e:	4b88      	ldr	r3, [pc, #544]	@ (8008b70 <menuVariableFinisher+0x2f8>)
 8008950:	2200      	movs	r2, #0
 8008952:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 8008954:	4b87      	ldr	r3, [pc, #540]	@ (8008b74 <menuVariableFinisher+0x2fc>)
 8008956:	2200      	movs	r2, #0
 8008958:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 800895a:	4b87      	ldr	r3, [pc, #540]	@ (8008b78 <menuVariableFinisher+0x300>)
 800895c:	2200      	movs	r2, #0
 800895e:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 8008960:	4b86      	ldr	r3, [pc, #536]	@ (8008b7c <menuVariableFinisher+0x304>)
 8008962:	2200      	movs	r2, #0
 8008964:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 8008966:	4b86      	ldr	r3, [pc, #536]	@ (8008b80 <menuVariableFinisher+0x308>)
 8008968:	2200      	movs	r2, #0
 800896a:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 800896c:	4b85      	ldr	r3, [pc, #532]	@ (8008b84 <menuVariableFinisher+0x30c>)
 800896e:	2200      	movs	r2, #0
 8008970:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 8008972:	4b85      	ldr	r3, [pc, #532]	@ (8008b88 <menuVariableFinisher+0x310>)
 8008974:	2200      	movs	r2, #0
 8008976:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 8008978:	4b84      	ldr	r3, [pc, #528]	@ (8008b8c <menuVariableFinisher+0x314>)
 800897a:	2200      	movs	r2, #0
 800897c:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 800897e:	4b84      	ldr	r3, [pc, #528]	@ (8008b90 <menuVariableFinisher+0x318>)
 8008980:	2200      	movs	r2, #0
 8008982:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 8008984:	4b83      	ldr	r3, [pc, #524]	@ (8008b94 <menuVariableFinisher+0x31c>)
 8008986:	2200      	movs	r2, #0
 8008988:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 800898a:	4b83      	ldr	r3, [pc, #524]	@ (8008b98 <menuVariableFinisher+0x320>)
 800898c:	2200      	movs	r2, #0
 800898e:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 8008990:	4b82      	ldr	r3, [pc, #520]	@ (8008b9c <menuVariableFinisher+0x324>)
 8008992:	2200      	movs	r2, #0
 8008994:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 8008996:	4b82      	ldr	r3, [pc, #520]	@ (8008ba0 <menuVariableFinisher+0x328>)
 8008998:	2200      	movs	r2, #0
 800899a:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 800899c:	4b81      	ldr	r3, [pc, #516]	@ (8008ba4 <menuVariableFinisher+0x32c>)
 800899e:	2200      	movs	r2, #0
 80089a0:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 80089a2:	4b81      	ldr	r3, [pc, #516]	@ (8008ba8 <menuVariableFinisher+0x330>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 80089a8:	4b80      	ldr	r3, [pc, #512]	@ (8008bac <menuVariableFinisher+0x334>)
 80089aa:	2200      	movs	r2, #0
 80089ac:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 80089ae:	4b80      	ldr	r3, [pc, #512]	@ (8008bb0 <menuVariableFinisher+0x338>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 80089b4:	4b7f      	ldr	r3, [pc, #508]	@ (8008bb4 <menuVariableFinisher+0x33c>)
 80089b6:	2200      	movs	r2, #0
 80089b8:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 80089ba:	4b7f      	ldr	r3, [pc, #508]	@ (8008bb8 <menuVariableFinisher+0x340>)
 80089bc:	2200      	movs	r2, #0
 80089be:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 80089c0:	4b7e      	ldr	r3, [pc, #504]	@ (8008bbc <menuVariableFinisher+0x344>)
 80089c2:	2200      	movs	r2, #0
 80089c4:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 80089c6:	4b7e      	ldr	r3, [pc, #504]	@ (8008bc0 <menuVariableFinisher+0x348>)
 80089c8:	2200      	movs	r2, #0
 80089ca:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 80089cc:	4b7d      	ldr	r3, [pc, #500]	@ (8008bc4 <menuVariableFinisher+0x34c>)
 80089ce:	2200      	movs	r2, #0
 80089d0:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 80089d2:	4b7d      	ldr	r3, [pc, #500]	@ (8008bc8 <menuVariableFinisher+0x350>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 80089d8:	4b7c      	ldr	r3, [pc, #496]	@ (8008bcc <menuVariableFinisher+0x354>)
 80089da:	2200      	movs	r2, #0
 80089dc:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 80089de:	4b7c      	ldr	r3, [pc, #496]	@ (8008bd0 <menuVariableFinisher+0x358>)
 80089e0:	2200      	movs	r2, #0
 80089e2:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 80089e4:	4b7b      	ldr	r3, [pc, #492]	@ (8008bd4 <menuVariableFinisher+0x35c>)
 80089e6:	2200      	movs	r2, #0
 80089e8:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 80089ea:	4b7b      	ldr	r3, [pc, #492]	@ (8008bd8 <menuVariableFinisher+0x360>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 80089f0:	4b7a      	ldr	r3, [pc, #488]	@ (8008bdc <menuVariableFinisher+0x364>)
 80089f2:	2200      	movs	r2, #0
 80089f4:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 80089f6:	4b7a      	ldr	r3, [pc, #488]	@ (8008be0 <menuVariableFinisher+0x368>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 80089fc:	4b79      	ldr	r3, [pc, #484]	@ (8008be4 <menuVariableFinisher+0x36c>)
 80089fe:	2200      	movs	r2, #0
 8008a00:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 8008a02:	4b79      	ldr	r3, [pc, #484]	@ (8008be8 <menuVariableFinisher+0x370>)
 8008a04:	2200      	movs	r2, #0
 8008a06:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 8008a08:	4b78      	ldr	r3, [pc, #480]	@ (8008bec <menuVariableFinisher+0x374>)
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 8008a0e:	4b78      	ldr	r3, [pc, #480]	@ (8008bf0 <menuVariableFinisher+0x378>)
 8008a10:	2200      	movs	r2, #0
 8008a12:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 8008a14:	4b77      	ldr	r3, [pc, #476]	@ (8008bf4 <menuVariableFinisher+0x37c>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 8008a1a:	4b77      	ldr	r3, [pc, #476]	@ (8008bf8 <menuVariableFinisher+0x380>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 8008a20:	4b76      	ldr	r3, [pc, #472]	@ (8008bfc <menuVariableFinisher+0x384>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 8008a26:	4b76      	ldr	r3, [pc, #472]	@ (8008c00 <menuVariableFinisher+0x388>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 8008a2c:	4b75      	ldr	r3, [pc, #468]	@ (8008c04 <menuVariableFinisher+0x38c>)
 8008a2e:	2200      	movs	r2, #0
 8008a30:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 8008a32:	4b75      	ldr	r3, [pc, #468]	@ (8008c08 <menuVariableFinisher+0x390>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 8008a38:	4b74      	ldr	r3, [pc, #464]	@ (8008c0c <menuVariableFinisher+0x394>)
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 8008a3e:	4b74      	ldr	r3, [pc, #464]	@ (8008c10 <menuVariableFinisher+0x398>)
 8008a40:	2200      	movs	r2, #0
 8008a42:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 8008a44:	4b73      	ldr	r3, [pc, #460]	@ (8008c14 <menuVariableFinisher+0x39c>)
 8008a46:	2200      	movs	r2, #0
 8008a48:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 8008a4a:	4b73      	ldr	r3, [pc, #460]	@ (8008c18 <menuVariableFinisher+0x3a0>)
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 8008a50:	4b72      	ldr	r3, [pc, #456]	@ (8008c1c <menuVariableFinisher+0x3a4>)
 8008a52:	2200      	movs	r2, #0
 8008a54:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 8008a56:	4b72      	ldr	r3, [pc, #456]	@ (8008c20 <menuVariableFinisher+0x3a8>)
 8008a58:	2200      	movs	r2, #0
 8008a5a:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 8008a5c:	4b71      	ldr	r3, [pc, #452]	@ (8008c24 <menuVariableFinisher+0x3ac>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 8008a62:	4b71      	ldr	r3, [pc, #452]	@ (8008c28 <menuVariableFinisher+0x3b0>)
 8008a64:	2200      	movs	r2, #0
 8008a66:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 8008a68:	4b70      	ldr	r3, [pc, #448]	@ (8008c2c <menuVariableFinisher+0x3b4>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 8008a6e:	4b70      	ldr	r3, [pc, #448]	@ (8008c30 <menuVariableFinisher+0x3b8>)
 8008a70:	2200      	movs	r2, #0
 8008a72:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 8008a74:	4b6f      	ldr	r3, [pc, #444]	@ (8008c34 <menuVariableFinisher+0x3bc>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 8008a7a:	4b6f      	ldr	r3, [pc, #444]	@ (8008c38 <menuVariableFinisher+0x3c0>)
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 8008a80:	4b6e      	ldr	r3, [pc, #440]	@ (8008c3c <menuVariableFinisher+0x3c4>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 8008a86:	4b6e      	ldr	r3, [pc, #440]	@ (8008c40 <menuVariableFinisher+0x3c8>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 8008a8c:	4b6d      	ldr	r3, [pc, #436]	@ (8008c44 <menuVariableFinisher+0x3cc>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 8008a92:	4b6d      	ldr	r3, [pc, #436]	@ (8008c48 <menuVariableFinisher+0x3d0>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 8008a98:	4b6c      	ldr	r3, [pc, #432]	@ (8008c4c <menuVariableFinisher+0x3d4>)
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 8008a9e:	4b6c      	ldr	r3, [pc, #432]	@ (8008c50 <menuVariableFinisher+0x3d8>)
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8008aa4:	4b6b      	ldr	r3, [pc, #428]	@ (8008c54 <menuVariableFinisher+0x3dc>)
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 8008aaa:	4b6b      	ldr	r3, [pc, #428]	@ (8008c58 <menuVariableFinisher+0x3e0>)
 8008aac:	2200      	movs	r2, #0
 8008aae:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 8008ab0:	4b6a      	ldr	r3, [pc, #424]	@ (8008c5c <menuVariableFinisher+0x3e4>)
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 8008ab6:	4b6a      	ldr	r3, [pc, #424]	@ (8008c60 <menuVariableFinisher+0x3e8>)
 8008ab8:	2200      	movs	r2, #0
 8008aba:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 8008abc:	4b69      	ldr	r3, [pc, #420]	@ (8008c64 <menuVariableFinisher+0x3ec>)
 8008abe:	2200      	movs	r2, #0
 8008ac0:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 8008ac2:	4b69      	ldr	r3, [pc, #420]	@ (8008c68 <menuVariableFinisher+0x3f0>)
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 8008ac8:	4b68      	ldr	r3, [pc, #416]	@ (8008c6c <menuVariableFinisher+0x3f4>)
 8008aca:	2200      	movs	r2, #0
 8008acc:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 8008ace:	4b68      	ldr	r3, [pc, #416]	@ (8008c70 <menuVariableFinisher+0x3f8>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 8008ad4:	4b67      	ldr	r3, [pc, #412]	@ (8008c74 <menuVariableFinisher+0x3fc>)
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	741a      	strb	r2, [r3, #16]
}
 8008ada:	bf00      	nop
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bc80      	pop	{r7}
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	2000009c 	.word	0x2000009c
 8008ae8:	200000b0 	.word	0x200000b0
 8008aec:	200000c4 	.word	0x200000c4
 8008af0:	200000d8 	.word	0x200000d8
 8008af4:	200000ec 	.word	0x200000ec
 8008af8:	20000100 	.word	0x20000100
 8008afc:	20000114 	.word	0x20000114
 8008b00:	20000128 	.word	0x20000128
 8008b04:	2000013c 	.word	0x2000013c
 8008b08:	20000150 	.word	0x20000150
 8008b0c:	20000164 	.word	0x20000164
 8008b10:	20000178 	.word	0x20000178
 8008b14:	200010d4 	.word	0x200010d4
 8008b18:	200010e8 	.word	0x200010e8
 8008b1c:	200010fc 	.word	0x200010fc
 8008b20:	20001110 	.word	0x20001110
 8008b24:	20001124 	.word	0x20001124
 8008b28:	20001138 	.word	0x20001138
 8008b2c:	2000114c 	.word	0x2000114c
 8008b30:	20001160 	.word	0x20001160
 8008b34:	20001174 	.word	0x20001174
 8008b38:	20001188 	.word	0x20001188
 8008b3c:	2000119c 	.word	0x2000119c
 8008b40:	200011b0 	.word	0x200011b0
 8008b44:	200011c4 	.word	0x200011c4
 8008b48:	200011d8 	.word	0x200011d8
 8008b4c:	200011ec 	.word	0x200011ec
 8008b50:	20001200 	.word	0x20001200
 8008b54:	20001214 	.word	0x20001214
 8008b58:	20001228 	.word	0x20001228
 8008b5c:	2000123c 	.word	0x2000123c
 8008b60:	20001250 	.word	0x20001250
 8008b64:	20001264 	.word	0x20001264
 8008b68:	20001278 	.word	0x20001278
 8008b6c:	2000128c 	.word	0x2000128c
 8008b70:	200012a0 	.word	0x200012a0
 8008b74:	200012b4 	.word	0x200012b4
 8008b78:	200012c8 	.word	0x200012c8
 8008b7c:	200012dc 	.word	0x200012dc
 8008b80:	200012f0 	.word	0x200012f0
 8008b84:	20001304 	.word	0x20001304
 8008b88:	20001318 	.word	0x20001318
 8008b8c:	2000132c 	.word	0x2000132c
 8008b90:	20001340 	.word	0x20001340
 8008b94:	20001354 	.word	0x20001354
 8008b98:	20001368 	.word	0x20001368
 8008b9c:	2000137c 	.word	0x2000137c
 8008ba0:	20001390 	.word	0x20001390
 8008ba4:	200013a4 	.word	0x200013a4
 8008ba8:	200013b8 	.word	0x200013b8
 8008bac:	200013cc 	.word	0x200013cc
 8008bb0:	200013e0 	.word	0x200013e0
 8008bb4:	200013f4 	.word	0x200013f4
 8008bb8:	20001408 	.word	0x20001408
 8008bbc:	2000141c 	.word	0x2000141c
 8008bc0:	20001430 	.word	0x20001430
 8008bc4:	20001444 	.word	0x20001444
 8008bc8:	20001458 	.word	0x20001458
 8008bcc:	2000146c 	.word	0x2000146c
 8008bd0:	20001480 	.word	0x20001480
 8008bd4:	20001494 	.word	0x20001494
 8008bd8:	200014a8 	.word	0x200014a8
 8008bdc:	200014bc 	.word	0x200014bc
 8008be0:	200014d0 	.word	0x200014d0
 8008be4:	200014e4 	.word	0x200014e4
 8008be8:	200014f8 	.word	0x200014f8
 8008bec:	2000150c 	.word	0x2000150c
 8008bf0:	20001520 	.word	0x20001520
 8008bf4:	20001534 	.word	0x20001534
 8008bf8:	20001548 	.word	0x20001548
 8008bfc:	2000155c 	.word	0x2000155c
 8008c00:	20001570 	.word	0x20001570
 8008c04:	20001584 	.word	0x20001584
 8008c08:	20001598 	.word	0x20001598
 8008c0c:	200015ac 	.word	0x200015ac
 8008c10:	200015c0 	.word	0x200015c0
 8008c14:	200015d4 	.word	0x200015d4
 8008c18:	200015e8 	.word	0x200015e8
 8008c1c:	200015fc 	.word	0x200015fc
 8008c20:	20001610 	.word	0x20001610
 8008c24:	20001624 	.word	0x20001624
 8008c28:	20001638 	.word	0x20001638
 8008c2c:	2000164c 	.word	0x2000164c
 8008c30:	20001660 	.word	0x20001660
 8008c34:	20001674 	.word	0x20001674
 8008c38:	20001688 	.word	0x20001688
 8008c3c:	2000169c 	.word	0x2000169c
 8008c40:	200016b0 	.word	0x200016b0
 8008c44:	200016c4 	.word	0x200016c4
 8008c48:	200016d8 	.word	0x200016d8
 8008c4c:	200016ec 	.word	0x200016ec
 8008c50:	20001700 	.word	0x20001700
 8008c54:	20001714 	.word	0x20001714
 8008c58:	20001728 	.word	0x20001728
 8008c5c:	2000173c 	.word	0x2000173c
 8008c60:	20001750 	.word	0x20001750
 8008c64:	20001764 	.word	0x20001764
 8008c68:	20001778 	.word	0x20001778
 8008c6c:	2000178c 	.word	0x2000178c
 8008c70:	200017a0 	.word	0x200017a0
 8008c74:	200017b4 	.word	0x200017b4

08008c78 <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8008c7e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008c82:	f001 fc0d 	bl	800a4a0 <HAL_Delay>
	int confirmationVal = 0;
 8008c86:	2300      	movs	r3, #0
 8008c88:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8008c8a:	e012      	b.n	8008cb2 <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 8008c8c:	4a12      	ldr	r2, [pc, #72]	@ (8008cd8 <takeMachineIDWithConfirmation+0x60>)
 8008c8e:	2101      	movs	r1, #1
 8008c90:	2001      	movs	r0, #1
 8008c92:	f000 fee3 	bl	8009a5c <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 8008c96:	4a11      	ldr	r2, [pc, #68]	@ (8008cdc <takeMachineIDWithConfirmation+0x64>)
 8008c98:	2101      	movs	r1, #1
 8008c9a:	2002      	movs	r0, #2
 8008c9c:	f000 fede 	bl	8009a5c <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 8008ca0:	2102      	movs	r1, #2
 8008ca2:	480f      	ldr	r0, [pc, #60]	@ (8008ce0 <takeMachineIDWithConfirmation+0x68>)
 8008ca4:	f002 f9cc 	bl	800b040 <HAL_GPIO_ReadPin>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d101      	bne.n	8008cb2 <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d0e9      	beq.n	8008c8c <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 8008cb8:	f000 f814 	bl	8008ce4 <takeMachineID>

	convertArrays(1);
 8008cbc:	2001      	movs	r0, #1
 8008cbe:	f7f7 fd63 	bl	8000788 <convertArrays>
	HAL_Delay(50);
 8008cc2:	2032      	movs	r0, #50	@ 0x32
 8008cc4:	f001 fbec 	bl	800a4a0 <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 8008cc8:	2001      	movs	r0, #1
 8008cca:	f7f8 f901 	bl	8000ed0 <printCredentials>
}
 8008cce:	bf00      	nop
 8008cd0:	3708      	adds	r7, #8
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop
 8008cd8:	2000178c 	.word	0x2000178c
 8008cdc:	200017a0 	.word	0x200017a0
 8008ce0:	40010800 	.word	0x40010800

08008ce4 <takeMachineID>:

void takeMachineID() {
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b088      	sub	sp, #32
 8008ce8:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 8008cea:	2001      	movs	r0, #1
 8008cec:	f000 ff14 	bl	8009b18 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8008cf0:	220c      	movs	r2, #12
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	48a2      	ldr	r0, [pc, #648]	@ (8008f80 <takeMachineID+0x29c>)
 8008cf6:	f005 f9dd 	bl	800e0b4 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8008cfa:	2305      	movs	r3, #5
 8008cfc:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8008cfe:	2303      	movs	r3, #3
 8008d00:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8008d02:	2300      	movs	r3, #0
 8008d04:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8008d06:	4b9f      	ldr	r3, [pc, #636]	@ (8008f84 <takeMachineID+0x2a0>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8008d0c:	2100      	movs	r1, #0
 8008d0e:	2001      	movs	r0, #1
 8008d10:	f7f7 ff6e 	bl	8000bf0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008d14:	2108      	movs	r1, #8
 8008d16:	489c      	ldr	r0, [pc, #624]	@ (8008f88 <takeMachineID+0x2a4>)
 8008d18:	f002 f992 	bl	800b040 <HAL_GPIO_ReadPin>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d128      	bne.n	8008d74 <takeMachineID+0x90>
        	lcd_cursor(0);
 8008d22:	2000      	movs	r0, #0
 8008d24:	f000 fef8 	bl	8009b18 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8008d28:	f000 fcda 	bl	80096e0 <checkEEPROM4ID>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	2b01      	cmp	r3, #1
 8008d30:	d00e      	beq.n	8008d50 <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 8008d32:	4a96      	ldr	r2, [pc, #600]	@ (8008f8c <takeMachineID+0x2a8>)
 8008d34:	2101      	movs	r1, #1
 8008d36:	2001      	movs	r0, #1
 8008d38:	f000 fe90 	bl	8009a5c <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 8008d3c:	4a94      	ldr	r2, [pc, #592]	@ (8008f90 <takeMachineID+0x2ac>)
 8008d3e:	2101      	movs	r1, #1
 8008d40:	2002      	movs	r0, #2
 8008d42:	f000 fe8b 	bl	8009a5c <lcd_print>
        		HAL_Delay(1250);
 8008d46:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8008d4a:	f001 fba9 	bl	800a4a0 <HAL_Delay>

        		goto mainSection;
 8008d4e:	e7cc      	b.n	8008cea <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8008d50:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008d54:	9302      	str	r3, [sp, #8]
 8008d56:	236e      	movs	r3, #110	@ 0x6e
 8008d58:	9301      	str	r3, [sp, #4]
 8008d5a:	4b8e      	ldr	r3, [pc, #568]	@ (8008f94 <takeMachineID+0x2b0>)
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	236e      	movs	r3, #110	@ 0x6e
 8008d60:	2200      	movs	r2, #0
 8008d62:	21a0      	movs	r1, #160	@ 0xa0
 8008d64:	488c      	ldr	r0, [pc, #560]	@ (8008f98 <takeMachineID+0x2b4>)
 8008d66:	f002 fc25 	bl	800b5b4 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8008d6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008d6e:	f001 fb97 	bl	800a4a0 <HAL_Delay>

            	break;
 8008d72:	e132      	b.n	8008fda <takeMachineID+0x2f6>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008d74:	2101      	movs	r1, #1
 8008d76:	4884      	ldr	r0, [pc, #528]	@ (8008f88 <takeMachineID+0x2a4>)
 8008d78:	f002 f962 	bl	800b040 <HAL_GPIO_ReadPin>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d111      	bne.n	8008da6 <takeMachineID+0xc2>
        	if(cursorPosition == 7) {
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	2b07      	cmp	r3, #7
 8008d86:	d102      	bne.n	8008d8e <takeMachineID+0xaa>
        		cursorPosition = 10;
 8008d88:	230a      	movs	r3, #10
 8008d8a:	60bb      	str	r3, [r7, #8]
 8008d8c:	e008      	b.n	8008da0 <takeMachineID+0xbc>
        	} else if (cursorPosition == 14) {
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	2b0e      	cmp	r3, #14
 8008d92:	d102      	bne.n	8008d9a <takeMachineID+0xb6>
                cursorPosition = 3;
 8008d94:	2303      	movs	r3, #3
 8008d96:	60bb      	str	r3, [r7, #8]
 8008d98:	e002      	b.n	8008da0 <takeMachineID+0xbc>
            } else {
            	cursorPosition++;
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8008da0:	2096      	movs	r0, #150	@ 0x96
 8008da2:	f001 fb7d 	bl	800a4a0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8008da6:	2108      	movs	r1, #8
 8008da8:	487c      	ldr	r0, [pc, #496]	@ (8008f9c <takeMachineID+0x2b8>)
 8008daa:	f002 f949 	bl	800b040 <HAL_GPIO_ReadPin>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d111      	bne.n	8008dd8 <takeMachineID+0xf4>
            if (cursorPosition == 3) {
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2b03      	cmp	r3, #3
 8008db8:	d102      	bne.n	8008dc0 <takeMachineID+0xdc>
                cursorPosition = 14;
 8008dba:	230e      	movs	r3, #14
 8008dbc:	60bb      	str	r3, [r7, #8]
 8008dbe:	e008      	b.n	8008dd2 <takeMachineID+0xee>
            } else if(cursorPosition == 10) {
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	2b0a      	cmp	r3, #10
 8008dc4:	d102      	bne.n	8008dcc <takeMachineID+0xe8>
            	cursorPosition = 7;
 8008dc6:	2307      	movs	r3, #7
 8008dc8:	60bb      	str	r3, [r7, #8]
 8008dca:	e002      	b.n	8008dd2 <takeMachineID+0xee>
            } else {
            	cursorPosition--;
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	3b01      	subs	r3, #1
 8008dd0:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 8008dd2:	20fa      	movs	r0, #250	@ 0xfa
 8008dd4:	f001 fb64 	bl	800a4a0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008dd8:	2102      	movs	r1, #2
 8008dda:	486b      	ldr	r0, [pc, #428]	@ (8008f88 <takeMachineID+0x2a4>)
 8008ddc:	f002 f930 	bl	800b040 <HAL_GPIO_ReadPin>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	f040 80a1 	bne.w	8008f2a <takeMachineID+0x246>
        	if(cursorPosition == 3) {
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d10a      	bne.n	8008e04 <takeMachineID+0x120>
        		machineID[arrayPos] = '0';
 8008dee:	4a64      	ldr	r2, [pc, #400]	@ (8008f80 <takeMachineID+0x29c>)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4413      	add	r3, r2
 8008df4:	2230      	movs	r2, #48	@ 0x30
 8008df6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8008df8:	4a66      	ldr	r2, [pc, #408]	@ (8008f94 <takeMachineID+0x2b0>)
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	2200      	movs	r2, #0
 8008e00:	701a      	strb	r2, [r3, #0]
 8008e02:	e07c      	b.n	8008efe <takeMachineID+0x21a>
        	} else if(cursorPosition == 4) {
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	2b04      	cmp	r3, #4
 8008e08:	d10a      	bne.n	8008e20 <takeMachineID+0x13c>
        		machineID[arrayPos] = '1';
 8008e0a:	4a5d      	ldr	r2, [pc, #372]	@ (8008f80 <takeMachineID+0x29c>)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4413      	add	r3, r2
 8008e10:	2231      	movs	r2, #49	@ 0x31
 8008e12:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8008e14:	4a5f      	ldr	r2, [pc, #380]	@ (8008f94 <takeMachineID+0x2b0>)
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	4413      	add	r3, r2
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	701a      	strb	r2, [r3, #0]
 8008e1e:	e06e      	b.n	8008efe <takeMachineID+0x21a>
        	} else if(cursorPosition == 5) {
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	2b05      	cmp	r3, #5
 8008e24:	d10a      	bne.n	8008e3c <takeMachineID+0x158>
        		machineID[arrayPos] = '2';
 8008e26:	4a56      	ldr	r2, [pc, #344]	@ (8008f80 <takeMachineID+0x29c>)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	2232      	movs	r2, #50	@ 0x32
 8008e2e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8008e30:	4a58      	ldr	r2, [pc, #352]	@ (8008f94 <takeMachineID+0x2b0>)
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	4413      	add	r3, r2
 8008e36:	2202      	movs	r2, #2
 8008e38:	701a      	strb	r2, [r3, #0]
 8008e3a:	e060      	b.n	8008efe <takeMachineID+0x21a>
        	} else if(cursorPosition == 6) {
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	2b06      	cmp	r3, #6
 8008e40:	d10a      	bne.n	8008e58 <takeMachineID+0x174>
        		machineID[arrayPos] = '3';
 8008e42:	4a4f      	ldr	r2, [pc, #316]	@ (8008f80 <takeMachineID+0x29c>)
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4413      	add	r3, r2
 8008e48:	2233      	movs	r2, #51	@ 0x33
 8008e4a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8008e4c:	4a51      	ldr	r2, [pc, #324]	@ (8008f94 <takeMachineID+0x2b0>)
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	4413      	add	r3, r2
 8008e52:	2203      	movs	r2, #3
 8008e54:	701a      	strb	r2, [r3, #0]
 8008e56:	e052      	b.n	8008efe <takeMachineID+0x21a>
        	} else if(cursorPosition == 7) {
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	2b07      	cmp	r3, #7
 8008e5c:	d10a      	bne.n	8008e74 <takeMachineID+0x190>
        		machineID[arrayPos] = '4';
 8008e5e:	4a48      	ldr	r2, [pc, #288]	@ (8008f80 <takeMachineID+0x29c>)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4413      	add	r3, r2
 8008e64:	2234      	movs	r2, #52	@ 0x34
 8008e66:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8008e68:	4a4a      	ldr	r2, [pc, #296]	@ (8008f94 <takeMachineID+0x2b0>)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	2204      	movs	r2, #4
 8008e70:	701a      	strb	r2, [r3, #0]
 8008e72:	e044      	b.n	8008efe <takeMachineID+0x21a>
        	} else if(cursorPosition == 10) {
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	2b0a      	cmp	r3, #10
 8008e78:	d10a      	bne.n	8008e90 <takeMachineID+0x1ac>
        		machineID[arrayPos] = '5';
 8008e7a:	4a41      	ldr	r2, [pc, #260]	@ (8008f80 <takeMachineID+0x29c>)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4413      	add	r3, r2
 8008e80:	2235      	movs	r2, #53	@ 0x35
 8008e82:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8008e84:	4a43      	ldr	r2, [pc, #268]	@ (8008f94 <takeMachineID+0x2b0>)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	4413      	add	r3, r2
 8008e8a:	2205      	movs	r2, #5
 8008e8c:	701a      	strb	r2, [r3, #0]
 8008e8e:	e036      	b.n	8008efe <takeMachineID+0x21a>
        	} else if(cursorPosition == 11) {
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	2b0b      	cmp	r3, #11
 8008e94:	d10a      	bne.n	8008eac <takeMachineID+0x1c8>
        		machineID[arrayPos] = '6';
 8008e96:	4a3a      	ldr	r2, [pc, #232]	@ (8008f80 <takeMachineID+0x29c>)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	2236      	movs	r2, #54	@ 0x36
 8008e9e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8008ea0:	4a3c      	ldr	r2, [pc, #240]	@ (8008f94 <takeMachineID+0x2b0>)
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	2206      	movs	r2, #6
 8008ea8:	701a      	strb	r2, [r3, #0]
 8008eaa:	e028      	b.n	8008efe <takeMachineID+0x21a>
        	} else if(cursorPosition == 12) {
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	2b0c      	cmp	r3, #12
 8008eb0:	d10a      	bne.n	8008ec8 <takeMachineID+0x1e4>
        		machineID[arrayPos] = '7';
 8008eb2:	4a33      	ldr	r2, [pc, #204]	@ (8008f80 <takeMachineID+0x29c>)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	2237      	movs	r2, #55	@ 0x37
 8008eba:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8008ebc:	4a35      	ldr	r2, [pc, #212]	@ (8008f94 <takeMachineID+0x2b0>)
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	2207      	movs	r2, #7
 8008ec4:	701a      	strb	r2, [r3, #0]
 8008ec6:	e01a      	b.n	8008efe <takeMachineID+0x21a>
        	} else if(cursorPosition == 13) {
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	2b0d      	cmp	r3, #13
 8008ecc:	d10a      	bne.n	8008ee4 <takeMachineID+0x200>
        		machineID[arrayPos] = '8';
 8008ece:	4a2c      	ldr	r2, [pc, #176]	@ (8008f80 <takeMachineID+0x29c>)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	2238      	movs	r2, #56	@ 0x38
 8008ed6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8008ed8:	4a2e      	ldr	r2, [pc, #184]	@ (8008f94 <takeMachineID+0x2b0>)
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	4413      	add	r3, r2
 8008ede:	2208      	movs	r2, #8
 8008ee0:	701a      	strb	r2, [r3, #0]
 8008ee2:	e00c      	b.n	8008efe <takeMachineID+0x21a>
        	} else if(cursorPosition == 14) {
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	2b0e      	cmp	r3, #14
 8008ee8:	d109      	bne.n	8008efe <takeMachineID+0x21a>
        		machineID[arrayPos] = '9';
 8008eea:	4a25      	ldr	r2, [pc, #148]	@ (8008f80 <takeMachineID+0x29c>)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4413      	add	r3, r2
 8008ef0:	2239      	movs	r2, #57	@ 0x39
 8008ef2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8008ef4:	4a27      	ldr	r2, [pc, #156]	@ (8008f94 <takeMachineID+0x2b0>)
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	4413      	add	r3, r2
 8008efa:	2209      	movs	r2, #9
 8008efc:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	b2d9      	uxtb	r1, r3
 8008f02:	4a1f      	ldr	r2, [pc, #124]	@ (8008f80 <takeMachineID+0x29c>)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4413      	add	r3, r2
 8008f08:	781b      	ldrb	r3, [r3, #0]
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	2001      	movs	r0, #1
 8008f0e:	f000 fdba 	bl	8009a86 <lcd_print_char>

        	writeLoc++;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	3301      	adds	r3, #1
 8008f16:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	3301      	adds	r3, #1
 8008f22:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8008f24:	2096      	movs	r0, #150	@ 0x96
 8008f26:	f001 fabb 	bl	800a4a0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008f2a:	2104      	movs	r1, #4
 8008f2c:	4816      	ldr	r0, [pc, #88]	@ (8008f88 <takeMachineID+0x2a4>)
 8008f2e:	f002 f887 	bl	800b040 <HAL_GPIO_ReadPin>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d149      	bne.n	8008fcc <takeMachineID+0x2e8>
            if(strlen(machineID) >= 1) {
 8008f38:	4b11      	ldr	r3, [pc, #68]	@ (8008f80 <takeMachineID+0x29c>)
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d042      	beq.n	8008fc6 <takeMachineID+0x2e2>
                machineID[arrayPos] = '\0';
 8008f40:	4a0f      	ldr	r2, [pc, #60]	@ (8008f80 <takeMachineID+0x29c>)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4413      	add	r3, r2
 8008f46:	2200      	movs	r2, #0
 8008f48:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8008f4a:	4a12      	ldr	r2, [pc, #72]	@ (8008f94 <takeMachineID+0x2b0>)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	4413      	add	r3, r2
 8008f50:	2200      	movs	r2, #0
 8008f52:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b05      	cmp	r3, #5
 8008f58:	dd03      	ble.n	8008f62 <takeMachineID+0x27e>
                	writeLoc--;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	60fb      	str	r3, [r7, #12]
 8008f60:	e004      	b.n	8008f6c <takeMachineID+0x288>
                } else if(writeLoc < 5) {
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2b04      	cmp	r3, #4
 8008f66:	dc01      	bgt.n	8008f6c <takeMachineID+0x288>
                	writeLoc = 5;
 8008f68:	2305      	movs	r3, #5
 8008f6a:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	dd16      	ble.n	8008fa0 <takeMachineID+0x2bc>
                	arrayPos--;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	3b01      	subs	r3, #1
 8008f76:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	603b      	str	r3, [r7, #0]
 8008f7e:	e017      	b.n	8008fb0 <takeMachineID+0x2cc>
 8008f80:	20001014 	.word	0x20001014
 8008f84:	20000000 	.word	0x20000000
 8008f88:	40010800 	.word	0x40010800
 8008f8c:	2000169c 	.word	0x2000169c
 8008f90:	200016b0 	.word	0x200016b0
 8008f94:	20000f9c 	.word	0x20000f9c
 8008f98:	200017f0 	.word	0x200017f0
 8008f9c:	40011000 	.word	0x40011000
                } else if(arrayPos < 0) {
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	da04      	bge.n	8008fb0 <takeMachineID+0x2cc>
                	arrayPos = 0;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8008faa:	4b0e      	ldr	r3, [pc, #56]	@ (8008fe4 <takeMachineID+0x300>)
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	3305      	adds	r3, #5
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	4619      	mov	r1, r3
 8008fba:	2001      	movs	r0, #1
 8008fbc:	f000 fd84 	bl	8009ac8 <lcd_delete_char>
                HAL_Delay(50);
 8008fc0:	2032      	movs	r0, #50	@ 0x32
 8008fc2:	f001 fa6d 	bl	800a4a0 <HAL_Delay>
            }

            HAL_Delay(150);
 8008fc6:	2096      	movs	r0, #150	@ 0x96
 8008fc8:	f001 fa6a 	bl	800a4a0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	2002      	movs	r0, #2
 8008fd4:	f000 fd23 	bl	8009a1e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008fd8:	e69c      	b.n	8008d14 <takeMachineID+0x30>
    }
}
 8008fda:	bf00      	nop
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20000000 	.word	0x20000000

08008fe8 <ssidConfirmation>:

uint8_t ssidConfirmation() {
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b086      	sub	sp, #24
 8008fec:	af04      	add	r7, sp, #16
	int loopVal = 1;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8008ff2:	4a25      	ldr	r2, [pc, #148]	@ (8009088 <ssidConfirmation+0xa0>)
 8008ff4:	2101      	movs	r1, #1
 8008ff6:	2001      	movs	r0, #1
 8008ff8:	f000 fd30 	bl	8009a5c <lcd_print>

	while(loopVal == 1) {
 8008ffc:	e012      	b.n	8009024 <ssidConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 8008ffe:	4a23      	ldr	r2, [pc, #140]	@ (800908c <ssidConfirmation+0xa4>)
 8009000:	2101      	movs	r1, #1
 8009002:	2002      	movs	r0, #2
 8009004:	f000 fd2a 	bl	8009a5c <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8009008:	2102      	movs	r1, #2
 800900a:	4821      	ldr	r0, [pc, #132]	@ (8009090 <ssidConfirmation+0xa8>)
 800900c:	f002 f818 	bl	800b040 <HAL_GPIO_ReadPin>
 8009010:	4603      	mov	r3, r0
 8009012:	2b01      	cmp	r3, #1
 8009014:	d101      	bne.n	800901a <ssidConfirmation+0x32>
			loopVal = 0;
 8009016:	2300      	movs	r3, #0
 8009018:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiSSID);
 800901a:	4a1e      	ldr	r2, [pc, #120]	@ (8009094 <ssidConfirmation+0xac>)
 800901c:	2101      	movs	r1, #1
 800901e:	2001      	movs	r0, #1
 8009020:	f000 fd1c 	bl	8009a5c <lcd_print>
	while(loopVal == 1) {
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2b01      	cmp	r3, #1
 8009028:	d0e9      	beq.n	8008ffe <ssidConfirmation+0x16>
	}

    lcd_cursor(0);
 800902a:	2000      	movs	r0, #0
 800902c:	f000 fd74 	bl	8009b18 <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 8009030:	4818      	ldr	r0, [pc, #96]	@ (8009094 <ssidConfirmation+0xac>)
 8009032:	f7f7 f8f7 	bl	8000224 <strlen>
 8009036:	4603      	mov	r3, r0
 8009038:	2b14      	cmp	r3, #20
 800903a:	d90f      	bls.n	800905c <ssidConfirmation+0x74>
    	lcd_print(1, 1, ssidExceedErrorText);
 800903c:	4a16      	ldr	r2, [pc, #88]	@ (8009098 <ssidConfirmation+0xb0>)
 800903e:	2101      	movs	r1, #1
 8009040:	2001      	movs	r0, #1
 8009042:	f000 fd0b 	bl	8009a5c <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 8009046:	4a15      	ldr	r2, [pc, #84]	@ (800909c <ssidConfirmation+0xb4>)
 8009048:	2101      	movs	r1, #1
 800904a:	2002      	movs	r0, #2
 800904c:	f000 fd06 	bl	8009a5c <lcd_print>
        HAL_Delay(1250);
 8009050:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8009054:	f001 fa24 	bl	800a4a0 <HAL_Delay>

        return 0;
 8009058:	2300      	movs	r3, #0
 800905a:	e011      	b.n	8009080 <ssidConfirmation+0x98>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800905c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009060:	9302      	str	r3, [sp, #8]
 8009062:	236e      	movs	r3, #110	@ 0x6e
 8009064:	9301      	str	r3, [sp, #4]
 8009066:	4b0e      	ldr	r3, [pc, #56]	@ (80090a0 <ssidConfirmation+0xb8>)
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	236e      	movs	r3, #110	@ 0x6e
 800906c:	2200      	movs	r2, #0
 800906e:	21a0      	movs	r1, #160	@ 0xa0
 8009070:	480c      	ldr	r0, [pc, #48]	@ (80090a4 <ssidConfirmation+0xbc>)
 8009072:	f002 fa9f 	bl	800b5b4 <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 8009076:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800907a:	f001 fa11 	bl	800a4a0 <HAL_Delay>

    	return 1;
 800907e:	2301      	movs	r3, #1
    }
}
 8009080:	4618      	mov	r0, r3
 8009082:	3708      	adds	r7, #8
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	0800e280 	.word	0x0800e280
 800908c:	200017b4 	.word	0x200017b4
 8009090:	40010800 	.word	0x40010800
 8009094:	20001020 	.word	0x20001020
 8009098:	200016c4 	.word	0x200016c4
 800909c:	200016d8 	.word	0x200016d8
 80090a0:	20000f9c 	.word	0x20000f9c
 80090a4:	200017f0 	.word	0x200017f0

080090a8 <takeWifiSSID>:

void takeWifiSSID() {
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b086      	sub	sp, #24
 80090ac:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 80090ae:	2001      	movs	r0, #1
 80090b0:	f000 fd32 	bl	8009b18 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 80090b4:	2210      	movs	r2, #16
 80090b6:	2100      	movs	r1, #0
 80090b8:	48a4      	ldr	r0, [pc, #656]	@ (800934c <takeWifiSSID+0x2a4>)
 80090ba:	f004 fffb 	bl	800e0b4 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80090be:	2301      	movs	r3, #1
 80090c0:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80090c2:	2307      	movs	r3, #7
 80090c4:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80090c6:	2301      	movs	r3, #1
 80090c8:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80090ca:	2300      	movs	r3, #0
 80090cc:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80090ce:	4ba0      	ldr	r3, [pc, #640]	@ (8009350 <takeWifiSSID+0x2a8>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 80090d4:	2101      	movs	r1, #1
 80090d6:	2002      	movs	r0, #2
 80090d8:	f7f7 fd8a 	bl	8000bf0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80090dc:	2108      	movs	r1, #8
 80090de:	489d      	ldr	r0, [pc, #628]	@ (8009354 <takeWifiSSID+0x2ac>)
 80090e0:	f001 ffae 	bl	800b040 <HAL_GPIO_ReadPin>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d106      	bne.n	80090f8 <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 80090ea:	f7ff ff7d 	bl	8008fe8 <ssidConfirmation>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f040 8126 	bne.w	8009342 <takeWifiSSID+0x29a>
        		goto mainSSIDSection;
 80090f6:	e7da      	b.n	80090ae <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80090f8:	2101      	movs	r1, #1
 80090fa:	4896      	ldr	r0, [pc, #600]	@ (8009354 <takeWifiSSID+0x2ac>)
 80090fc:	f001 ffa0 	bl	800b040 <HAL_GPIO_ReadPin>
 8009100:	4603      	mov	r3, r0
 8009102:	2b01      	cmp	r3, #1
 8009104:	d14d      	bne.n	80091a2 <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	2b50      	cmp	r3, #80	@ 0x50
 800910a:	dd01      	ble.n	8009110 <takeWifiSSID+0x68>
        		cursorPosition = 1;
 800910c:	2301      	movs	r3, #1
 800910e:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2b10      	cmp	r3, #16
 8009114:	d13f      	bne.n	8009196 <takeWifiSSID+0xee>
            	if(page == 1) {
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	2b01      	cmp	r3, #1
 800911a:	d109      	bne.n	8009130 <takeWifiSSID+0x88>
            		cursorPosition = 1;
 800911c:	2301      	movs	r3, #1
 800911e:	60fb      	str	r3, [r7, #12]
            		page++;
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	3301      	adds	r3, #1
 8009124:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8009126:	2102      	movs	r1, #2
 8009128:	2002      	movs	r0, #2
 800912a:	f7f7 fd61 	bl	8000bf0 <printTemplate>
 800912e:	e035      	b.n	800919c <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 8009130:	697b      	ldr	r3, [r7, #20]
 8009132:	2b02      	cmp	r3, #2
 8009134:	d109      	bne.n	800914a <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 8009136:	2301      	movs	r3, #1
 8009138:	60fb      	str	r3, [r7, #12]
            		page++;
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	3301      	adds	r3, #1
 800913e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8009140:	2103      	movs	r1, #3
 8009142:	2002      	movs	r0, #2
 8009144:	f7f7 fd54 	bl	8000bf0 <printTemplate>
 8009148:	e028      	b.n	800919c <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	2b03      	cmp	r3, #3
 800914e:	d109      	bne.n	8009164 <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 8009150:	2301      	movs	r3, #1
 8009152:	60fb      	str	r3, [r7, #12]
            		page++;
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	3301      	adds	r3, #1
 8009158:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800915a:	2104      	movs	r1, #4
 800915c:	2002      	movs	r0, #2
 800915e:	f7f7 fd47 	bl	8000bf0 <printTemplate>
 8009162:	e01b      	b.n	800919c <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	2b04      	cmp	r3, #4
 8009168:	d109      	bne.n	800917e <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 800916a:	2301      	movs	r3, #1
 800916c:	60fb      	str	r3, [r7, #12]
            		page++;
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	3301      	adds	r3, #1
 8009172:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8009174:	2105      	movs	r1, #5
 8009176:	2002      	movs	r0, #2
 8009178:	f7f7 fd3a 	bl	8000bf0 <printTemplate>
 800917c:	e00e      	b.n	800919c <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	2b05      	cmp	r3, #5
 8009182:	d10b      	bne.n	800919c <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 8009184:	2301      	movs	r3, #1
 8009186:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8009188:	2301      	movs	r3, #1
 800918a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 800918c:	2101      	movs	r1, #1
 800918e:	2002      	movs	r0, #2
 8009190:	f7f7 fd2e 	bl	8000bf0 <printTemplate>
 8009194:	e002      	b.n	800919c <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	3301      	adds	r3, #1
 800919a:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800919c:	2096      	movs	r0, #150	@ 0x96
 800919e:	f001 f97f 	bl	800a4a0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80091a2:	2108      	movs	r1, #8
 80091a4:	486c      	ldr	r0, [pc, #432]	@ (8009358 <takeWifiSSID+0x2b0>)
 80091a6:	f001 ff4b 	bl	800b040 <HAL_GPIO_ReadPin>
 80091aa:	4603      	mov	r3, r0
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d149      	bne.n	8009244 <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	dc01      	bgt.n	80091ba <takeWifiSSID+0x112>
        		cursorPosition = 80;
 80091b6:	2350      	movs	r3, #80	@ 0x50
 80091b8:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d13b      	bne.n	8009238 <takeWifiSSID+0x190>
            	if(page == 1) {
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d108      	bne.n	80091d8 <takeWifiSSID+0x130>
            		cursorPosition = 16;
 80091c6:	2310      	movs	r3, #16
 80091c8:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80091ca:	2305      	movs	r3, #5
 80091cc:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80091ce:	2105      	movs	r1, #5
 80091d0:	2002      	movs	r0, #2
 80091d2:	f7f7 fd0d 	bl	8000bf0 <printTemplate>
 80091d6:	e032      	b.n	800923e <takeWifiSSID+0x196>
            	} else if(page == 2) {
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	2b02      	cmp	r3, #2
 80091dc:	d108      	bne.n	80091f0 <takeWifiSSID+0x148>
            		cursorPosition = 16;
 80091de:	2310      	movs	r3, #16
 80091e0:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80091e2:	2301      	movs	r3, #1
 80091e4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80091e6:	2101      	movs	r1, #1
 80091e8:	2002      	movs	r0, #2
 80091ea:	f7f7 fd01 	bl	8000bf0 <printTemplate>
 80091ee:	e026      	b.n	800923e <takeWifiSSID+0x196>
            	} else if(page == 3) {
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	2b03      	cmp	r3, #3
 80091f4:	d108      	bne.n	8009208 <takeWifiSSID+0x160>
            		cursorPosition = 16;
 80091f6:	2310      	movs	r3, #16
 80091f8:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80091fa:	2302      	movs	r3, #2
 80091fc:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80091fe:	2102      	movs	r1, #2
 8009200:	2002      	movs	r0, #2
 8009202:	f7f7 fcf5 	bl	8000bf0 <printTemplate>
 8009206:	e01a      	b.n	800923e <takeWifiSSID+0x196>
            	} else if(page == 4) {
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	2b04      	cmp	r3, #4
 800920c:	d108      	bne.n	8009220 <takeWifiSSID+0x178>
            		cursorPosition = 16;
 800920e:	2310      	movs	r3, #16
 8009210:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8009212:	2303      	movs	r3, #3
 8009214:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8009216:	2103      	movs	r1, #3
 8009218:	2002      	movs	r0, #2
 800921a:	f7f7 fce9 	bl	8000bf0 <printTemplate>
 800921e:	e00e      	b.n	800923e <takeWifiSSID+0x196>
            	} else if(page == 5) {
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	2b05      	cmp	r3, #5
 8009224:	d10b      	bne.n	800923e <takeWifiSSID+0x196>
            		cursorPosition = 16;
 8009226:	2310      	movs	r3, #16
 8009228:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800922a:	2304      	movs	r3, #4
 800922c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800922e:	2104      	movs	r1, #4
 8009230:	2002      	movs	r0, #2
 8009232:	f7f7 fcdd 	bl	8000bf0 <printTemplate>
 8009236:	e002      	b.n	800923e <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	3b01      	subs	r3, #1
 800923c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800923e:	2096      	movs	r0, #150	@ 0x96
 8009240:	f001 f92e 	bl	800a4a0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8009244:	2102      	movs	r1, #2
 8009246:	4843      	ldr	r0, [pc, #268]	@ (8009354 <takeWifiSSID+0x2ac>)
 8009248:	f001 fefa 	bl	800b040 <HAL_GPIO_ReadPin>
 800924c:	4603      	mov	r3, r0
 800924e:	2b01      	cmp	r3, #1
 8009250:	d12f      	bne.n	80092b2 <takeWifiSSID+0x20a>
            eepromData[eepromVal] = cursorPosition;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	b2d9      	uxtb	r1, r3
 8009256:	4a41      	ldr	r2, [pc, #260]	@ (800935c <takeWifiSSID+0x2b4>)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4413      	add	r3, r2
 800925c:	460a      	mov	r2, r1
 800925e:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 8009260:	4a3f      	ldr	r2, [pc, #252]	@ (8009360 <takeWifiSSID+0x2b8>)
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	4413      	add	r3, r2
 8009266:	7819      	ldrb	r1, [r3, #0]
 8009268:	4a38      	ldr	r2, [pc, #224]	@ (800934c <takeWifiSSID+0x2a4>)
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	4413      	add	r3, r2
 800926e:	460a      	mov	r2, r1
 8009270:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	b2d9      	uxtb	r1, r3
 8009276:	4a3a      	ldr	r2, [pc, #232]	@ (8009360 <takeWifiSSID+0x2b8>)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	4413      	add	r3, r2
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	461a      	mov	r2, r3
 8009280:	2001      	movs	r0, #1
 8009282:	f000 fc00 	bl	8009a86 <lcd_print_char>

            writeLoc++;
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	3301      	adds	r3, #1
 800928a:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	3301      	adds	r3, #1
 8009290:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	3301      	adds	r3, #1
 8009296:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8009298:	4a30      	ldr	r2, [pc, #192]	@ (800935c <takeWifiSSID+0x2b4>)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4413      	add	r3, r2
 800929e:	2200      	movs	r2, #0
 80092a0:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 80092a2:	4a2a      	ldr	r2, [pc, #168]	@ (800934c <takeWifiSSID+0x2a4>)
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	4413      	add	r3, r2
 80092a8:	2200      	movs	r2, #0
 80092aa:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80092ac:	2096      	movs	r0, #150	@ 0x96
 80092ae:	f001 f8f7 	bl	800a4a0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80092b2:	2104      	movs	r1, #4
 80092b4:	4827      	ldr	r0, [pc, #156]	@ (8009354 <takeWifiSSID+0x2ac>)
 80092b6:	f001 fec3 	bl	800b040 <HAL_GPIO_ReadPin>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d139      	bne.n	8009334 <takeWifiSSID+0x28c>
        	if(strlen(wifiSSID) >= 1) {
 80092c0:	4b22      	ldr	r3, [pc, #136]	@ (800934c <takeWifiSSID+0x2a4>)
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d032      	beq.n	800932e <takeWifiSSID+0x286>
        		eepromData[eepromVal] = '\0';
 80092c8:	4a24      	ldr	r2, [pc, #144]	@ (800935c <takeWifiSSID+0x2b4>)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4413      	add	r3, r2
 80092ce:	2200      	movs	r2, #0
 80092d0:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 80092d2:	4a1e      	ldr	r2, [pc, #120]	@ (800934c <takeWifiSSID+0x2a4>)
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	4413      	add	r3, r2
 80092d8:	2200      	movs	r2, #0
 80092da:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	2b07      	cmp	r3, #7
 80092e0:	dd03      	ble.n	80092ea <takeWifiSSID+0x242>
        			writeLoc--;
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	3b01      	subs	r3, #1
 80092e6:	613b      	str	r3, [r7, #16]
 80092e8:	e004      	b.n	80092f4 <takeWifiSSID+0x24c>
        		} else if(writeLoc < 7) {
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	2b06      	cmp	r3, #6
 80092ee:	dc01      	bgt.n	80092f4 <takeWifiSSID+0x24c>
        			writeLoc = 7;
 80092f0:	2307      	movs	r3, #7
 80092f2:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	dd06      	ble.n	8009308 <takeWifiSSID+0x260>
        			arrayPosition--;
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	3b01      	subs	r3, #1
 80092fe:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	3b01      	subs	r3, #1
 8009304:	607b      	str	r3, [r7, #4]
 8009306:	e007      	b.n	8009318 <takeWifiSSID+0x270>
        		} else if(arrayPosition < 0) {
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	2b00      	cmp	r3, #0
 800930c:	da04      	bge.n	8009318 <takeWifiSSID+0x270>
        			arrayPosition = 0;
 800930e:	2300      	movs	r3, #0
 8009310:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8009312:	4b0f      	ldr	r3, [pc, #60]	@ (8009350 <takeWifiSSID+0x2a8>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	b2db      	uxtb	r3, r3
 800931c:	3307      	adds	r3, #7
 800931e:	b2db      	uxtb	r3, r3
 8009320:	4619      	mov	r1, r3
 8009322:	2001      	movs	r0, #1
 8009324:	f000 fbd0 	bl	8009ac8 <lcd_delete_char>
        		HAL_Delay(50);
 8009328:	2032      	movs	r0, #50	@ 0x32
 800932a:	f001 f8b9 	bl	800a4a0 <HAL_Delay>
        	}

        	HAL_Delay(150);
 800932e:	2096      	movs	r0, #150	@ 0x96
 8009330:	f001 f8b6 	bl	800a4a0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	b2db      	uxtb	r3, r3
 8009338:	4619      	mov	r1, r3
 800933a:	2002      	movs	r0, #2
 800933c:	f000 fb6f 	bl	8009a1e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8009340:	e6cc      	b.n	80090dc <takeWifiSSID+0x34>
        		break;
 8009342:	bf00      	nop
    }
}
 8009344:	bf00      	nop
 8009346:	3718      	adds	r7, #24
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}
 800934c:	20001020 	.word	0x20001020
 8009350:	20000004 	.word	0x20000004
 8009354:	40010800 	.word	0x40010800
 8009358:	40011000 	.word	0x40011000
 800935c:	20000f9c 	.word	0x20000f9c
 8009360:	20000018 	.word	0x20000018

08009364 <passConfirmation>:

uint8_t passConfirmation() {
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af04      	add	r7, sp, #16
	int loopVal = 1;
 800936a:	2301      	movs	r3, #1
 800936c:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 800936e:	4a25      	ldr	r2, [pc, #148]	@ (8009404 <passConfirmation+0xa0>)
 8009370:	2101      	movs	r1, #1
 8009372:	2001      	movs	r0, #1
 8009374:	f000 fb72 	bl	8009a5c <lcd_print>

	while(loopVal == 1) {
 8009378:	e012      	b.n	80093a0 <passConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 800937a:	4a23      	ldr	r2, [pc, #140]	@ (8009408 <passConfirmation+0xa4>)
 800937c:	2101      	movs	r1, #1
 800937e:	2002      	movs	r0, #2
 8009380:	f000 fb6c 	bl	8009a5c <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8009384:	2102      	movs	r1, #2
 8009386:	4821      	ldr	r0, [pc, #132]	@ (800940c <passConfirmation+0xa8>)
 8009388:	f001 fe5a 	bl	800b040 <HAL_GPIO_ReadPin>
 800938c:	4603      	mov	r3, r0
 800938e:	2b01      	cmp	r3, #1
 8009390:	d101      	bne.n	8009396 <passConfirmation+0x32>
			loopVal = 0;
 8009392:	2300      	movs	r3, #0
 8009394:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiPass);
 8009396:	4a1e      	ldr	r2, [pc, #120]	@ (8009410 <passConfirmation+0xac>)
 8009398:	2101      	movs	r1, #1
 800939a:	2001      	movs	r0, #1
 800939c:	f000 fb5e 	bl	8009a5c <lcd_print>
	while(loopVal == 1) {
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d0e9      	beq.n	800937a <passConfirmation+0x16>
	}

    lcd_cursor(0);
 80093a6:	2000      	movs	r0, #0
 80093a8:	f000 fbb6 	bl	8009b18 <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 80093ac:	4818      	ldr	r0, [pc, #96]	@ (8009410 <passConfirmation+0xac>)
 80093ae:	f7f6 ff39 	bl	8000224 <strlen>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b14      	cmp	r3, #20
 80093b6:	d90f      	bls.n	80093d8 <passConfirmation+0x74>
    	lcd_print(1, 1, passExceedErrorText);
 80093b8:	4a16      	ldr	r2, [pc, #88]	@ (8009414 <passConfirmation+0xb0>)
 80093ba:	2101      	movs	r1, #1
 80093bc:	2001      	movs	r0, #1
 80093be:	f000 fb4d 	bl	8009a5c <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 80093c2:	4a15      	ldr	r2, [pc, #84]	@ (8009418 <passConfirmation+0xb4>)
 80093c4:	2101      	movs	r1, #1
 80093c6:	2002      	movs	r0, #2
 80093c8:	f000 fb48 	bl	8009a5c <lcd_print>
        HAL_Delay(1250);
 80093cc:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80093d0:	f001 f866 	bl	800a4a0 <HAL_Delay>

        return 0;
 80093d4:	2300      	movs	r3, #0
 80093d6:	e011      	b.n	80093fc <passConfirmation+0x98>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80093d8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80093dc:	9302      	str	r3, [sp, #8]
 80093de:	236e      	movs	r3, #110	@ 0x6e
 80093e0:	9301      	str	r3, [sp, #4]
 80093e2:	4b0e      	ldr	r3, [pc, #56]	@ (800941c <passConfirmation+0xb8>)
 80093e4:	9300      	str	r3, [sp, #0]
 80093e6:	236e      	movs	r3, #110	@ 0x6e
 80093e8:	2200      	movs	r2, #0
 80093ea:	21a0      	movs	r1, #160	@ 0xa0
 80093ec:	480c      	ldr	r0, [pc, #48]	@ (8009420 <passConfirmation+0xbc>)
 80093ee:	f002 f8e1 	bl	800b5b4 <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 80093f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80093f6:	f001 f853 	bl	800a4a0 <HAL_Delay>

    	return 1;
 80093fa:	2301      	movs	r3, #1
    }
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	0800e280 	.word	0x0800e280
 8009408:	200017b4 	.word	0x200017b4
 800940c:	40010800 	.word	0x40010800
 8009410:	20001030 	.word	0x20001030
 8009414:	200016ec 	.word	0x200016ec
 8009418:	20001700 	.word	0x20001700
 800941c:	20000f9c 	.word	0x20000f9c
 8009420:	200017f0 	.word	0x200017f0

08009424 <takeWifiPass>:

void takeWifiPass() {
 8009424:	b580      	push	{r7, lr}
 8009426:	b086      	sub	sp, #24
 8009428:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 800942a:	2001      	movs	r0, #1
 800942c:	f000 fb74 	bl	8009b18 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 8009430:	2210      	movs	r2, #16
 8009432:	2100      	movs	r1, #0
 8009434:	48a4      	ldr	r0, [pc, #656]	@ (80096c8 <takeWifiPass+0x2a4>)
 8009436:	f004 fe3d 	bl	800e0b4 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 800943a:	2301      	movs	r3, #1
 800943c:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 800943e:	2307      	movs	r3, #7
 8009440:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8009442:	2301      	movs	r3, #1
 8009444:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8009446:	2300      	movs	r3, #0
 8009448:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 800944a:	4ba0      	ldr	r3, [pc, #640]	@ (80096cc <takeWifiPass+0x2a8>)
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8009450:	2101      	movs	r1, #1
 8009452:	2003      	movs	r0, #3
 8009454:	f7f7 fbcc 	bl	8000bf0 <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8009458:	2108      	movs	r1, #8
 800945a:	489d      	ldr	r0, [pc, #628]	@ (80096d0 <takeWifiPass+0x2ac>)
 800945c:	f001 fdf0 	bl	800b040 <HAL_GPIO_ReadPin>
 8009460:	4603      	mov	r3, r0
 8009462:	2b01      	cmp	r3, #1
 8009464:	d106      	bne.n	8009474 <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 8009466:	f7ff ff7d 	bl	8009364 <passConfirmation>
 800946a:	4603      	mov	r3, r0
 800946c:	2b00      	cmp	r3, #0
 800946e:	f040 8126 	bne.w	80096be <takeWifiPass+0x29a>
    	        goto mainPassSection;
 8009472:	e7da      	b.n	800942a <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8009474:	2101      	movs	r1, #1
 8009476:	4896      	ldr	r0, [pc, #600]	@ (80096d0 <takeWifiPass+0x2ac>)
 8009478:	f001 fde2 	bl	800b040 <HAL_GPIO_ReadPin>
 800947c:	4603      	mov	r3, r0
 800947e:	2b01      	cmp	r3, #1
 8009480:	d14d      	bne.n	800951e <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2b50      	cmp	r3, #80	@ 0x50
 8009486:	dd01      	ble.n	800948c <takeWifiPass+0x68>
        		cursorPosition = 1;
 8009488:	2301      	movs	r3, #1
 800948a:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2b10      	cmp	r3, #16
 8009490:	d13f      	bne.n	8009512 <takeWifiPass+0xee>
            	if(page == 1) {
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	2b01      	cmp	r3, #1
 8009496:	d109      	bne.n	80094ac <takeWifiPass+0x88>
            		cursorPosition = 1;
 8009498:	2301      	movs	r3, #1
 800949a:	60fb      	str	r3, [r7, #12]
            		page++;
 800949c:	697b      	ldr	r3, [r7, #20]
 800949e:	3301      	adds	r3, #1
 80094a0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80094a2:	2102      	movs	r1, #2
 80094a4:	2003      	movs	r0, #3
 80094a6:	f7f7 fba3 	bl	8000bf0 <printTemplate>
 80094aa:	e035      	b.n	8009518 <takeWifiPass+0xf4>
            	} else if(page == 2) {
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d109      	bne.n	80094c6 <takeWifiPass+0xa2>
            		cursorPosition = 1;
 80094b2:	2301      	movs	r3, #1
 80094b4:	60fb      	str	r3, [r7, #12]
            		page++;
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	3301      	adds	r3, #1
 80094ba:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80094bc:	2103      	movs	r1, #3
 80094be:	2003      	movs	r0, #3
 80094c0:	f7f7 fb96 	bl	8000bf0 <printTemplate>
 80094c4:	e028      	b.n	8009518 <takeWifiPass+0xf4>
            	} else if(page == 3) {
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	2b03      	cmp	r3, #3
 80094ca:	d109      	bne.n	80094e0 <takeWifiPass+0xbc>
            		cursorPosition = 1;
 80094cc:	2301      	movs	r3, #1
 80094ce:	60fb      	str	r3, [r7, #12]
            		page++;
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	3301      	adds	r3, #1
 80094d4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80094d6:	2104      	movs	r1, #4
 80094d8:	2003      	movs	r0, #3
 80094da:	f7f7 fb89 	bl	8000bf0 <printTemplate>
 80094de:	e01b      	b.n	8009518 <takeWifiPass+0xf4>
            	} else if(page == 4) {
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	2b04      	cmp	r3, #4
 80094e4:	d109      	bne.n	80094fa <takeWifiPass+0xd6>
            		cursorPosition = 1;
 80094e6:	2301      	movs	r3, #1
 80094e8:	60fb      	str	r3, [r7, #12]
            		page++;
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	3301      	adds	r3, #1
 80094ee:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80094f0:	2105      	movs	r1, #5
 80094f2:	2003      	movs	r0, #3
 80094f4:	f7f7 fb7c 	bl	8000bf0 <printTemplate>
 80094f8:	e00e      	b.n	8009518 <takeWifiPass+0xf4>
            	} else if(page == 5) {
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	2b05      	cmp	r3, #5
 80094fe:	d10b      	bne.n	8009518 <takeWifiPass+0xf4>
            		cursorPosition = 1;
 8009500:	2301      	movs	r3, #1
 8009502:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8009504:	2301      	movs	r3, #1
 8009506:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8009508:	2101      	movs	r1, #1
 800950a:	2003      	movs	r0, #3
 800950c:	f7f7 fb70 	bl	8000bf0 <printTemplate>
 8009510:	e002      	b.n	8009518 <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	3301      	adds	r3, #1
 8009516:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8009518:	2096      	movs	r0, #150	@ 0x96
 800951a:	f000 ffc1 	bl	800a4a0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800951e:	2108      	movs	r1, #8
 8009520:	486c      	ldr	r0, [pc, #432]	@ (80096d4 <takeWifiPass+0x2b0>)
 8009522:	f001 fd8d 	bl	800b040 <HAL_GPIO_ReadPin>
 8009526:	4603      	mov	r3, r0
 8009528:	2b01      	cmp	r3, #1
 800952a:	d149      	bne.n	80095c0 <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2b00      	cmp	r3, #0
 8009530:	dc01      	bgt.n	8009536 <takeWifiPass+0x112>
        		cursorPosition = 80;
 8009532:	2350      	movs	r3, #80	@ 0x50
 8009534:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2b01      	cmp	r3, #1
 800953a:	d13b      	bne.n	80095b4 <takeWifiPass+0x190>
            	if(page == 1) {
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	2b01      	cmp	r3, #1
 8009540:	d108      	bne.n	8009554 <takeWifiPass+0x130>
            		cursorPosition = 16;
 8009542:	2310      	movs	r3, #16
 8009544:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8009546:	2305      	movs	r3, #5
 8009548:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 800954a:	2105      	movs	r1, #5
 800954c:	2003      	movs	r0, #3
 800954e:	f7f7 fb4f 	bl	8000bf0 <printTemplate>
 8009552:	e032      	b.n	80095ba <takeWifiPass+0x196>
            	} else if(page == 2) {
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	2b02      	cmp	r3, #2
 8009558:	d108      	bne.n	800956c <takeWifiPass+0x148>
            		cursorPosition = 16;
 800955a:	2310      	movs	r3, #16
 800955c:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800955e:	2301      	movs	r3, #1
 8009560:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8009562:	2101      	movs	r1, #1
 8009564:	2003      	movs	r0, #3
 8009566:	f7f7 fb43 	bl	8000bf0 <printTemplate>
 800956a:	e026      	b.n	80095ba <takeWifiPass+0x196>
            	} else if(page == 3) {
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	2b03      	cmp	r3, #3
 8009570:	d108      	bne.n	8009584 <takeWifiPass+0x160>
            		cursorPosition = 16;
 8009572:	2310      	movs	r3, #16
 8009574:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8009576:	2302      	movs	r3, #2
 8009578:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 800957a:	2102      	movs	r1, #2
 800957c:	2003      	movs	r0, #3
 800957e:	f7f7 fb37 	bl	8000bf0 <printTemplate>
 8009582:	e01a      	b.n	80095ba <takeWifiPass+0x196>
            	} else if(page == 4) {
 8009584:	697b      	ldr	r3, [r7, #20]
 8009586:	2b04      	cmp	r3, #4
 8009588:	d108      	bne.n	800959c <takeWifiPass+0x178>
            		cursorPosition = 16;
 800958a:	2310      	movs	r3, #16
 800958c:	60fb      	str	r3, [r7, #12]
            		page = 3;
 800958e:	2303      	movs	r3, #3
 8009590:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8009592:	2103      	movs	r1, #3
 8009594:	2003      	movs	r0, #3
 8009596:	f7f7 fb2b 	bl	8000bf0 <printTemplate>
 800959a:	e00e      	b.n	80095ba <takeWifiPass+0x196>
            	} else if(page == 5) {
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	2b05      	cmp	r3, #5
 80095a0:	d10b      	bne.n	80095ba <takeWifiPass+0x196>
            		cursorPosition = 16;
 80095a2:	2310      	movs	r3, #16
 80095a4:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80095a6:	2304      	movs	r3, #4
 80095a8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80095aa:	2104      	movs	r1, #4
 80095ac:	2003      	movs	r0, #3
 80095ae:	f7f7 fb1f 	bl	8000bf0 <printTemplate>
 80095b2:	e002      	b.n	80095ba <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	3b01      	subs	r3, #1
 80095b8:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80095ba:	2096      	movs	r0, #150	@ 0x96
 80095bc:	f000 ff70 	bl	800a4a0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80095c0:	2102      	movs	r1, #2
 80095c2:	4843      	ldr	r0, [pc, #268]	@ (80096d0 <takeWifiPass+0x2ac>)
 80095c4:	f001 fd3c 	bl	800b040 <HAL_GPIO_ReadPin>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d12f      	bne.n	800962e <takeWifiPass+0x20a>
            eepromData[eepromVal] = cursorPosition;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	b2d9      	uxtb	r1, r3
 80095d2:	4a41      	ldr	r2, [pc, #260]	@ (80096d8 <takeWifiPass+0x2b4>)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	4413      	add	r3, r2
 80095d8:	460a      	mov	r2, r1
 80095da:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 80095dc:	4a3f      	ldr	r2, [pc, #252]	@ (80096dc <takeWifiPass+0x2b8>)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	4413      	add	r3, r2
 80095e2:	7819      	ldrb	r1, [r3, #0]
 80095e4:	4a38      	ldr	r2, [pc, #224]	@ (80096c8 <takeWifiPass+0x2a4>)
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	4413      	add	r3, r2
 80095ea:	460a      	mov	r2, r1
 80095ec:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	b2d9      	uxtb	r1, r3
 80095f2:	4a3a      	ldr	r2, [pc, #232]	@ (80096dc <takeWifiPass+0x2b8>)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	4413      	add	r3, r2
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	461a      	mov	r2, r3
 80095fc:	2001      	movs	r0, #1
 80095fe:	f000 fa42 	bl	8009a86 <lcd_print_char>

            writeLoc++;
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	3301      	adds	r3, #1
 8009606:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	3301      	adds	r3, #1
 800960c:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	3301      	adds	r3, #1
 8009612:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8009614:	4a30      	ldr	r2, [pc, #192]	@ (80096d8 <takeWifiPass+0x2b4>)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	4413      	add	r3, r2
 800961a:	2200      	movs	r2, #0
 800961c:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 800961e:	4a2a      	ldr	r2, [pc, #168]	@ (80096c8 <takeWifiPass+0x2a4>)
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	4413      	add	r3, r2
 8009624:	2200      	movs	r2, #0
 8009626:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8009628:	2096      	movs	r0, #150	@ 0x96
 800962a:	f000 ff39 	bl	800a4a0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800962e:	2104      	movs	r1, #4
 8009630:	4827      	ldr	r0, [pc, #156]	@ (80096d0 <takeWifiPass+0x2ac>)
 8009632:	f001 fd05 	bl	800b040 <HAL_GPIO_ReadPin>
 8009636:	4603      	mov	r3, r0
 8009638:	2b01      	cmp	r3, #1
 800963a:	d139      	bne.n	80096b0 <takeWifiPass+0x28c>
        	if(strlen(wifiPass) >= 1) {
 800963c:	4b22      	ldr	r3, [pc, #136]	@ (80096c8 <takeWifiPass+0x2a4>)
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d032      	beq.n	80096aa <takeWifiPass+0x286>
        		eepromData[eepromVal] = '\0';
 8009644:	4a24      	ldr	r2, [pc, #144]	@ (80096d8 <takeWifiPass+0x2b4>)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4413      	add	r3, r2
 800964a:	2200      	movs	r2, #0
 800964c:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 800964e:	4a1e      	ldr	r2, [pc, #120]	@ (80096c8 <takeWifiPass+0x2a4>)
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	4413      	add	r3, r2
 8009654:	2200      	movs	r2, #0
 8009656:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	2b07      	cmp	r3, #7
 800965c:	dd03      	ble.n	8009666 <takeWifiPass+0x242>
        			writeLoc--;
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	3b01      	subs	r3, #1
 8009662:	613b      	str	r3, [r7, #16]
 8009664:	e004      	b.n	8009670 <takeWifiPass+0x24c>
        		} else if(writeLoc < 7) {
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	2b06      	cmp	r3, #6
 800966a:	dc01      	bgt.n	8009670 <takeWifiPass+0x24c>
        			writeLoc = 7;
 800966c:	2307      	movs	r3, #7
 800966e:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	2b00      	cmp	r3, #0
 8009674:	dd06      	ble.n	8009684 <takeWifiPass+0x260>
        			arrayPosition--;
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	3b01      	subs	r3, #1
 800967a:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	3b01      	subs	r3, #1
 8009680:	607b      	str	r3, [r7, #4]
 8009682:	e007      	b.n	8009694 <takeWifiPass+0x270>
        		} else if(arrayPosition < 0) {
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	2b00      	cmp	r3, #0
 8009688:	da04      	bge.n	8009694 <takeWifiPass+0x270>
        			arrayPosition = 0;
 800968a:	2300      	movs	r3, #0
 800968c:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 800968e:	4b0f      	ldr	r3, [pc, #60]	@ (80096cc <takeWifiPass+0x2a8>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	b2db      	uxtb	r3, r3
 8009698:	3307      	adds	r3, #7
 800969a:	b2db      	uxtb	r3, r3
 800969c:	4619      	mov	r1, r3
 800969e:	2001      	movs	r0, #1
 80096a0:	f000 fa12 	bl	8009ac8 <lcd_delete_char>
        		HAL_Delay(50);
 80096a4:	2032      	movs	r0, #50	@ 0x32
 80096a6:	f000 fefb 	bl	800a4a0 <HAL_Delay>
        	}

        	HAL_Delay(150);
 80096aa:	2096      	movs	r0, #150	@ 0x96
 80096ac:	f000 fef8 	bl	800a4a0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	4619      	mov	r1, r3
 80096b6:	2002      	movs	r0, #2
 80096b8:	f000 f9b1 	bl	8009a1e <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80096bc:	e6cc      	b.n	8009458 <takeWifiPass+0x34>
    	        break;
 80096be:	bf00      	nop
    }
}
 80096c0:	bf00      	nop
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	20001030 	.word	0x20001030
 80096cc:	20000008 	.word	0x20000008
 80096d0:	40010800 	.word	0x40010800
 80096d4:	40011000 	.word	0x40011000
 80096d8:	20000f9c 	.word	0x20000f9c
 80096dc:	20000018 	.word	0x20000018

080096e0 <checkEEPROM4ID>:
			convertAndSendData();
		}
	}
}

int checkEEPROM4ID() {
 80096e0:	b480      	push	{r7}
 80096e2:	b085      	sub	sp, #20
 80096e4:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 80096e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009724 <checkEEPROM4ID+0x44>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 80096ec:	2301      	movs	r3, #1
 80096ee:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 80096f0:	2300      	movs	r3, #0
 80096f2:	607b      	str	r3, [r7, #4]
 80096f4:	e00d      	b.n	8009712 <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 80096f6:	4a0c      	ldr	r2, [pc, #48]	@ (8009728 <checkEEPROM4ID+0x48>)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	4413      	add	r3, r2
 80096fc:	781b      	ldrb	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d101      	bne.n	8009706 <checkEEPROM4ID+0x26>
			returnVal = 0;
 8009702:	2300      	movs	r3, #0
 8009704:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	3301      	adds	r3, #1
 800970a:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	3301      	adds	r3, #1
 8009710:	607b      	str	r3, [r7, #4]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2b0b      	cmp	r3, #11
 8009716:	ddee      	ble.n	80096f6 <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8009718:	68bb      	ldr	r3, [r7, #8]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3714      	adds	r7, #20
 800971e:	46bd      	mov	sp, r7
 8009720:	bc80      	pop	{r7}
 8009722:	4770      	bx	lr
 8009724:	20000000 	.word	0x20000000
 8009728:	20000f9c 	.word	0x20000f9c

0800972c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af02      	add	r7, sp, #8
 8009732:	4603      	mov	r3, r0
 8009734:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8009736:	79fb      	ldrb	r3, [r7, #7]
 8009738:	f023 030f 	bic.w	r3, r3, #15
 800973c:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800973e:	79fb      	ldrb	r3, [r7, #7]
 8009740:	011b      	lsls	r3, r3, #4
 8009742:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8009744:	7b7b      	ldrb	r3, [r7, #13]
 8009746:	f043 030c 	orr.w	r3, r3, #12
 800974a:	b2db      	uxtb	r3, r3
 800974c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800974e:	7b7b      	ldrb	r3, [r7, #13]
 8009750:	f043 0308 	orr.w	r3, r3, #8
 8009754:	b2db      	uxtb	r3, r3
 8009756:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8009758:	7b3b      	ldrb	r3, [r7, #12]
 800975a:	f043 030c 	orr.w	r3, r3, #12
 800975e:	b2db      	uxtb	r3, r3
 8009760:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8009762:	7b3b      	ldrb	r3, [r7, #12]
 8009764:	f043 0308 	orr.w	r3, r3, #8
 8009768:	b2db      	uxtb	r3, r3
 800976a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800976c:	bf00      	nop
 800976e:	4825      	ldr	r0, [pc, #148]	@ (8009804 <lcd_send_cmd+0xd8>)
 8009770:	f002 fa8f 	bl	800bc92 <HAL_I2C_GetError>
 8009774:	4603      	mov	r3, r0
 8009776:	2b04      	cmp	r3, #4
 8009778:	d0f9      	beq.n	800976e <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800977a:	bf00      	nop
 800977c:	4821      	ldr	r0, [pc, #132]	@ (8009804 <lcd_send_cmd+0xd8>)
 800977e:	f002 fa7b 	bl	800bc78 <HAL_I2C_GetState>
 8009782:	4603      	mov	r3, r0
 8009784:	2b20      	cmp	r3, #32
 8009786:	d1f9      	bne.n	800977c <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8009788:	4b1f      	ldr	r3, [pc, #124]	@ (8009808 <lcd_send_cmd+0xdc>)
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d116      	bne.n	80097be <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8009790:	2300      	movs	r3, #0
 8009792:	73fb      	strb	r3, [r7, #15]
 8009794:	e00f      	b.n	80097b6 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8009796:	7bfb      	ldrb	r3, [r7, #15]
 8009798:	3310      	adds	r3, #16
 800979a:	443b      	add	r3, r7
 800979c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80097a0:	7bfb      	ldrb	r3, [r7, #15]
 80097a2:	f022 0208 	bic.w	r2, r2, #8
 80097a6:	b2d2      	uxtb	r2, r2
 80097a8:	3310      	adds	r3, #16
 80097aa:	443b      	add	r3, r7
 80097ac:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	3301      	adds	r3, #1
 80097b4:	73fb      	strb	r3, [r7, #15]
 80097b6:	7bfb      	ldrb	r3, [r7, #15]
 80097b8:	2b03      	cmp	r3, #3
 80097ba:	d9ec      	bls.n	8009796 <lcd_send_cmd+0x6a>
 80097bc:	e015      	b.n	80097ea <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80097be:	2300      	movs	r3, #0
 80097c0:	73bb      	strb	r3, [r7, #14]
 80097c2:	e00f      	b.n	80097e4 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80097c4:	7bbb      	ldrb	r3, [r7, #14]
 80097c6:	3310      	adds	r3, #16
 80097c8:	443b      	add	r3, r7
 80097ca:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80097ce:	7bbb      	ldrb	r3, [r7, #14]
 80097d0:	f042 0208 	orr.w	r2, r2, #8
 80097d4:	b2d2      	uxtb	r2, r2
 80097d6:	3310      	adds	r3, #16
 80097d8:	443b      	add	r3, r7
 80097da:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80097de:	7bbb      	ldrb	r3, [r7, #14]
 80097e0:	3301      	adds	r3, #1
 80097e2:	73bb      	strb	r3, [r7, #14]
 80097e4:	7bbb      	ldrb	r3, [r7, #14]
 80097e6:	2b03      	cmp	r3, #3
 80097e8:	d9ec      	bls.n	80097c4 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80097ea:	f107 0208 	add.w	r2, r7, #8
 80097ee:	2364      	movs	r3, #100	@ 0x64
 80097f0:	9300      	str	r3, [sp, #0]
 80097f2:	2304      	movs	r3, #4
 80097f4:	214e      	movs	r1, #78	@ 0x4e
 80097f6:	4803      	ldr	r0, [pc, #12]	@ (8009804 <lcd_send_cmd+0xd8>)
 80097f8:	f001 fdde 	bl	800b3b8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80097fc:	bf00      	nop
 80097fe:	3710      	adds	r7, #16
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	200017f0 	.word	0x200017f0
 8009808:	200017c5 	.word	0x200017c5

0800980c <lcd_send_data>:

void lcd_send_data (char data) {
 800980c:	b580      	push	{r7, lr}
 800980e:	b086      	sub	sp, #24
 8009810:	af02      	add	r7, sp, #8
 8009812:	4603      	mov	r3, r0
 8009814:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8009816:	79fb      	ldrb	r3, [r7, #7]
 8009818:	f023 030f 	bic.w	r3, r3, #15
 800981c:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800981e:	79fb      	ldrb	r3, [r7, #7]
 8009820:	011b      	lsls	r3, r3, #4
 8009822:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8009824:	7b7b      	ldrb	r3, [r7, #13]
 8009826:	f043 030d 	orr.w	r3, r3, #13
 800982a:	b2db      	uxtb	r3, r3
 800982c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800982e:	7b7b      	ldrb	r3, [r7, #13]
 8009830:	f043 0309 	orr.w	r3, r3, #9
 8009834:	b2db      	uxtb	r3, r3
 8009836:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8009838:	7b3b      	ldrb	r3, [r7, #12]
 800983a:	f043 030d 	orr.w	r3, r3, #13
 800983e:	b2db      	uxtb	r3, r3
 8009840:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8009842:	7b3b      	ldrb	r3, [r7, #12]
 8009844:	f043 0309 	orr.w	r3, r3, #9
 8009848:	b2db      	uxtb	r3, r3
 800984a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800984c:	bf00      	nop
 800984e:	4825      	ldr	r0, [pc, #148]	@ (80098e4 <lcd_send_data+0xd8>)
 8009850:	f002 fa1f 	bl	800bc92 <HAL_I2C_GetError>
 8009854:	4603      	mov	r3, r0
 8009856:	2b04      	cmp	r3, #4
 8009858:	d0f9      	beq.n	800984e <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800985a:	bf00      	nop
 800985c:	4821      	ldr	r0, [pc, #132]	@ (80098e4 <lcd_send_data+0xd8>)
 800985e:	f002 fa0b 	bl	800bc78 <HAL_I2C_GetState>
 8009862:	4603      	mov	r3, r0
 8009864:	2b20      	cmp	r3, #32
 8009866:	d1f9      	bne.n	800985c <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8009868:	4b1f      	ldr	r3, [pc, #124]	@ (80098e8 <lcd_send_data+0xdc>)
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d116      	bne.n	800989e <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8009870:	2300      	movs	r3, #0
 8009872:	73fb      	strb	r3, [r7, #15]
 8009874:	e00f      	b.n	8009896 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8009876:	7bfb      	ldrb	r3, [r7, #15]
 8009878:	3310      	adds	r3, #16
 800987a:	443b      	add	r3, r7
 800987c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009880:	7bfb      	ldrb	r3, [r7, #15]
 8009882:	f022 0208 	bic.w	r2, r2, #8
 8009886:	b2d2      	uxtb	r2, r2
 8009888:	3310      	adds	r3, #16
 800988a:	443b      	add	r3, r7
 800988c:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8009890:	7bfb      	ldrb	r3, [r7, #15]
 8009892:	3301      	adds	r3, #1
 8009894:	73fb      	strb	r3, [r7, #15]
 8009896:	7bfb      	ldrb	r3, [r7, #15]
 8009898:	2b03      	cmp	r3, #3
 800989a:	d9ec      	bls.n	8009876 <lcd_send_data+0x6a>
 800989c:	e015      	b.n	80098ca <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800989e:	2300      	movs	r3, #0
 80098a0:	73bb      	strb	r3, [r7, #14]
 80098a2:	e00f      	b.n	80098c4 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
 80098a6:	3310      	adds	r3, #16
 80098a8:	443b      	add	r3, r7
 80098aa:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80098ae:	7bbb      	ldrb	r3, [r7, #14]
 80098b0:	f042 0208 	orr.w	r2, r2, #8
 80098b4:	b2d2      	uxtb	r2, r2
 80098b6:	3310      	adds	r3, #16
 80098b8:	443b      	add	r3, r7
 80098ba:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80098be:	7bbb      	ldrb	r3, [r7, #14]
 80098c0:	3301      	adds	r3, #1
 80098c2:	73bb      	strb	r3, [r7, #14]
 80098c4:	7bbb      	ldrb	r3, [r7, #14]
 80098c6:	2b03      	cmp	r3, #3
 80098c8:	d9ec      	bls.n	80098a4 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80098ca:	f107 0208 	add.w	r2, r7, #8
 80098ce:	2364      	movs	r3, #100	@ 0x64
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	2304      	movs	r3, #4
 80098d4:	214e      	movs	r1, #78	@ 0x4e
 80098d6:	4803      	ldr	r0, [pc, #12]	@ (80098e4 <lcd_send_data+0xd8>)
 80098d8:	f001 fd6e 	bl	800b3b8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80098dc:	bf00      	nop
 80098de:	3710      	adds	r7, #16
 80098e0:	46bd      	mov	sp, r7
 80098e2:	bd80      	pop	{r7, pc}
 80098e4:	200017f0 	.word	0x200017f0
 80098e8:	200017c5 	.word	0x200017c5

080098ec <lcd_send_string>:

void lcd_send_string (char *str) {
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b082      	sub	sp, #8
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
	while (*str) {
 80098f4:	e006      	b.n	8009904 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	1c5a      	adds	r2, r3, #1
 80098fa:	607a      	str	r2, [r7, #4]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	4618      	mov	r0, r3
 8009900:	f7ff ff84 	bl	800980c <lcd_send_data>
	while (*str) {
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d1f4      	bne.n	80098f6 <lcd_send_string+0xa>
	}
}
 800990c:	bf00      	nop
 800990e:	bf00      	nop
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
	...

08009918 <lcd_send_char>:

void lcd_send_char(char ch) {
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af02      	add	r7, sp, #8
 800991e:	4603      	mov	r3, r0
 8009920:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8009922:	79fb      	ldrb	r3, [r7, #7]
 8009924:	f023 030f 	bic.w	r3, r3, #15
 8009928:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 800992a:	79fb      	ldrb	r3, [r7, #7]
 800992c:	011b      	lsls	r3, r3, #4
 800992e:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8009930:	7b7b      	ldrb	r3, [r7, #13]
 8009932:	f043 030d 	orr.w	r3, r3, #13
 8009936:	b2db      	uxtb	r3, r3
 8009938:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 800993a:	7b7b      	ldrb	r3, [r7, #13]
 800993c:	f043 0309 	orr.w	r3, r3, #9
 8009940:	b2db      	uxtb	r3, r3
 8009942:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8009944:	7b3b      	ldrb	r3, [r7, #12]
 8009946:	f043 030d 	orr.w	r3, r3, #13
 800994a:	b2db      	uxtb	r3, r3
 800994c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 800994e:	7b3b      	ldrb	r3, [r7, #12]
 8009950:	f043 0309 	orr.w	r3, r3, #9
 8009954:	b2db      	uxtb	r3, r3
 8009956:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009958:	bf00      	nop
 800995a:	4825      	ldr	r0, [pc, #148]	@ (80099f0 <lcd_send_char+0xd8>)
 800995c:	f002 f999 	bl	800bc92 <HAL_I2C_GetError>
 8009960:	4603      	mov	r3, r0
 8009962:	2b04      	cmp	r3, #4
 8009964:	d0f9      	beq.n	800995a <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8009966:	bf00      	nop
 8009968:	4821      	ldr	r0, [pc, #132]	@ (80099f0 <lcd_send_char+0xd8>)
 800996a:	f002 f985 	bl	800bc78 <HAL_I2C_GetState>
 800996e:	4603      	mov	r3, r0
 8009970:	2b20      	cmp	r3, #32
 8009972:	d1f9      	bne.n	8009968 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8009974:	4b1f      	ldr	r3, [pc, #124]	@ (80099f4 <lcd_send_char+0xdc>)
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d116      	bne.n	80099aa <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 800997c:	2300      	movs	r3, #0
 800997e:	73fb      	strb	r3, [r7, #15]
 8009980:	e00f      	b.n	80099a2 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8009982:	7bfb      	ldrb	r3, [r7, #15]
 8009984:	3310      	adds	r3, #16
 8009986:	443b      	add	r3, r7
 8009988:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800998c:	7bfb      	ldrb	r3, [r7, #15]
 800998e:	f022 0208 	bic.w	r2, r2, #8
 8009992:	b2d2      	uxtb	r2, r2
 8009994:	3310      	adds	r3, #16
 8009996:	443b      	add	r3, r7
 8009998:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 800999c:	7bfb      	ldrb	r3, [r7, #15]
 800999e:	3301      	adds	r3, #1
 80099a0:	73fb      	strb	r3, [r7, #15]
 80099a2:	7bfb      	ldrb	r3, [r7, #15]
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d9ec      	bls.n	8009982 <lcd_send_char+0x6a>
 80099a8:	e015      	b.n	80099d6 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80099aa:	2300      	movs	r3, #0
 80099ac:	73bb      	strb	r3, [r7, #14]
 80099ae:	e00f      	b.n	80099d0 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80099b0:	7bbb      	ldrb	r3, [r7, #14]
 80099b2:	3310      	adds	r3, #16
 80099b4:	443b      	add	r3, r7
 80099b6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80099ba:	7bbb      	ldrb	r3, [r7, #14]
 80099bc:	f042 0208 	orr.w	r2, r2, #8
 80099c0:	b2d2      	uxtb	r2, r2
 80099c2:	3310      	adds	r3, #16
 80099c4:	443b      	add	r3, r7
 80099c6:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80099ca:	7bbb      	ldrb	r3, [r7, #14]
 80099cc:	3301      	adds	r3, #1
 80099ce:	73bb      	strb	r3, [r7, #14]
 80099d0:	7bbb      	ldrb	r3, [r7, #14]
 80099d2:	2b03      	cmp	r3, #3
 80099d4:	d9ec      	bls.n	80099b0 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80099d6:	f107 0208 	add.w	r2, r7, #8
 80099da:	2364      	movs	r3, #100	@ 0x64
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	2304      	movs	r3, #4
 80099e0:	214e      	movs	r1, #78	@ 0x4e
 80099e2:	4803      	ldr	r0, [pc, #12]	@ (80099f0 <lcd_send_char+0xd8>)
 80099e4:	f001 fce8 	bl	800b3b8 <HAL_I2C_Master_Transmit>
}
 80099e8:	bf00      	nop
 80099ea:	3710      	adds	r7, #16
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}
 80099f0:	200017f0 	.word	0x200017f0
 80099f4:	200017c5 	.word	0x200017c5

080099f8 <lcd_init>:

void lcd_init (void) {
 80099f8:	b580      	push	{r7, lr}
 80099fa:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 80099fc:	2002      	movs	r0, #2
 80099fe:	f7ff fe95 	bl	800972c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8009a02:	2028      	movs	r0, #40	@ 0x28
 8009a04:	f7ff fe92 	bl	800972c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8009a08:	200c      	movs	r0, #12
 8009a0a:	f7ff fe8f 	bl	800972c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8009a0e:	2080      	movs	r0, #128	@ 0x80
 8009a10:	f7ff fe8c 	bl	800972c <lcd_send_cmd>
	lcd_backlight(1);
 8009a14:	2001      	movs	r0, #1
 8009a16:	f000 f86d 	bl	8009af4 <lcd_backlight>
}
 8009a1a:	bf00      	nop
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b082      	sub	sp, #8
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	4603      	mov	r3, r0
 8009a26:	460a      	mov	r2, r1
 8009a28:	71fb      	strb	r3, [r7, #7]
 8009a2a:	4613      	mov	r3, r2
 8009a2c:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8009a2e:	79fb      	ldrb	r3, [r7, #7]
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d106      	bne.n	8009a42 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8009a34:	79bb      	ldrb	r3, [r7, #6]
 8009a36:	337f      	adds	r3, #127	@ 0x7f
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7ff fe76 	bl	800972c <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8009a40:	e008      	b.n	8009a54 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8009a42:	79fb      	ldrb	r3, [r7, #7]
 8009a44:	2b02      	cmp	r3, #2
 8009a46:	d105      	bne.n	8009a54 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8009a48:	79bb      	ldrb	r3, [r7, #6]
 8009a4a:	3b41      	subs	r3, #65	@ 0x41
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f7ff fe6c 	bl	800972c <lcd_send_cmd>
}
 8009a54:	bf00      	nop
 8009a56:	3708      	adds	r7, #8
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b082      	sub	sp, #8
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	4603      	mov	r3, r0
 8009a64:	603a      	str	r2, [r7, #0]
 8009a66:	71fb      	strb	r3, [r7, #7]
 8009a68:	460b      	mov	r3, r1
 8009a6a:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8009a6c:	79ba      	ldrb	r2, [r7, #6]
 8009a6e:	79fb      	ldrb	r3, [r7, #7]
 8009a70:	4611      	mov	r1, r2
 8009a72:	4618      	mov	r0, r3
 8009a74:	f7ff ffd3 	bl	8009a1e <lcd_gotoxy>
	lcd_send_string(str);
 8009a78:	6838      	ldr	r0, [r7, #0]
 8009a7a:	f7ff ff37 	bl	80098ec <lcd_send_string>
}
 8009a7e:	bf00      	nop
 8009a80:	3708      	adds	r7, #8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b082      	sub	sp, #8
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	71fb      	strb	r3, [r7, #7]
 8009a90:	460b      	mov	r3, r1
 8009a92:	71bb      	strb	r3, [r7, #6]
 8009a94:	4613      	mov	r3, r2
 8009a96:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8009a98:	79ba      	ldrb	r2, [r7, #6]
 8009a9a:	79fb      	ldrb	r3, [r7, #7]
 8009a9c:	4611      	mov	r1, r2
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f7ff ffbd 	bl	8009a1e <lcd_gotoxy>
    lcd_send_char(ch);
 8009aa4:	797b      	ldrb	r3, [r7, #5]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7ff ff36 	bl	8009918 <lcd_send_char>
}
 8009aac:	bf00      	nop
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <lcd_clear>:

void lcd_clear(void) {
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8009ab8:	2001      	movs	r0, #1
 8009aba:	f7ff fe37 	bl	800972c <lcd_send_cmd>
    HAL_Delay(2);
 8009abe:	2002      	movs	r0, #2
 8009ac0:	f000 fcee 	bl	800a4a0 <HAL_Delay>
}
 8009ac4:	bf00      	nop
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	4603      	mov	r3, r0
 8009ad0:	460a      	mov	r2, r1
 8009ad2:	71fb      	strb	r3, [r7, #7]
 8009ad4:	4613      	mov	r3, r2
 8009ad6:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8009ad8:	79ba      	ldrb	r2, [r7, #6]
 8009ada:	79fb      	ldrb	r3, [r7, #7]
 8009adc:	4611      	mov	r1, r2
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7ff ff9d 	bl	8009a1e <lcd_gotoxy>

    lcd_send_char(' ');
 8009ae4:	2020      	movs	r0, #32
 8009ae6:	f7ff ff17 	bl	8009918 <lcd_send_char>
}
 8009aea:	bf00      	nop
 8009aec:	3708      	adds	r7, #8
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
	...

08009af4 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	4603      	mov	r3, r0
 8009afc:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8009afe:	4a05      	ldr	r2, [pc, #20]	@ (8009b14 <lcd_backlight+0x20>)
 8009b00:	79fb      	ldrb	r3, [r7, #7]
 8009b02:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8009b04:	2000      	movs	r0, #0
 8009b06:	f7ff fe11 	bl	800972c <lcd_send_cmd>
}
 8009b0a:	bf00      	nop
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	200017c5 	.word	0x200017c5

08009b18 <lcd_cursor>:

void lcd_cursor(int state) {
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d106      	bne.n	8009b34 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8009b26:	200e      	movs	r0, #14
 8009b28:	f7ff fe00 	bl	800972c <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8009b2c:	200f      	movs	r0, #15
 8009b2e:	f7ff fdfd 	bl	800972c <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8009b32:	e002      	b.n	8009b3a <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8009b34:	200c      	movs	r0, #12
 8009b36:	f7ff fdf9 	bl	800972c <lcd_send_cmd>
}
 8009b3a:	bf00      	nop
 8009b3c:	3708      	adds	r7, #8
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}
	...

08009b44 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8009b4c:	4b04      	ldr	r3, [pc, #16]	@ (8009b60 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	3301      	adds	r3, #1
 8009b52:	4a03      	ldr	r2, [pc, #12]	@ (8009b60 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8009b54:	6013      	str	r3, [r2, #0]
}
 8009b56:	bf00      	nop
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bc80      	pop	{r7}
 8009b5e:	4770      	bx	lr
 8009b60:	20001044 	.word	0x20001044

08009b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009b68:	f000 fc38 	bl	800a3dc <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8009b6c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009b70:	f000 fc96 	bl	800a4a0 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009b74:	f000 f89a 	bl	8009cac <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009b78:	f000 f9bc 	bl	8009ef4 <MX_GPIO_Init>
  MX_CAN_Init();
 8009b7c:	f000 f8dc 	bl	8009d38 <MX_CAN_Init>
  MX_I2C1_Init();
 8009b80:	f000 f90e 	bl	8009da0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8009b84:	f000 f93a 	bl	8009dfc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8009b88:	f000 f98a 	bl	8009ea0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	2140      	movs	r1, #64	@ 0x40
 8009b90:	483d      	ldr	r0, [pc, #244]	@ (8009c88 <main+0x124>)
 8009b92:	f001 fa6c 	bl	800b06e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8009b96:	2201      	movs	r2, #1
 8009b98:	2180      	movs	r1, #128	@ 0x80
 8009b9a:	483b      	ldr	r0, [pc, #236]	@ (8009c88 <main+0x124>)
 8009b9c:	f001 fa67 	bl	800b06e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8009ba0:	200a      	movs	r0, #10
 8009ba2:	f000 fc7d 	bl	800a4a0 <HAL_Delay>
  lcd_init();
 8009ba6:	f7ff ff27 	bl	80099f8 <lcd_init>
  HAL_Delay(10);
 8009baa:	200a      	movs	r0, #10
 8009bac:	f000 fc78 	bl	800a4a0 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 8009bb0:	4836      	ldr	r0, [pc, #216]	@ (8009c8c <main+0x128>)
 8009bb2:	f003 f90f 	bl	800cdd4 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009bb6:	bf00      	nop
 8009bb8:	4835      	ldr	r0, [pc, #212]	@ (8009c90 <main+0x12c>)
 8009bba:	f002 f86a 	bl	800bc92 <HAL_I2C_GetError>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b04      	cmp	r3, #4
 8009bc2:	d0f9      	beq.n	8009bb8 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8009bc4:	bf00      	nop
 8009bc6:	4832      	ldr	r0, [pc, #200]	@ (8009c90 <main+0x12c>)
 8009bc8:	f002 f856 	bl	800bc78 <HAL_I2C_GetState>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	2b20      	cmp	r3, #32
 8009bd0:	d1f9      	bne.n	8009bc6 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009bd8:	482b      	ldr	r0, [pc, #172]	@ (8009c88 <main+0x124>)
 8009bda:	f001 fa48 	bl	800b06e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8009bde:	2200      	movs	r2, #0
 8009be0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009be4:	4828      	ldr	r0, [pc, #160]	@ (8009c88 <main+0x124>)
 8009be6:	f001 fa42 	bl	800b06e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8009bea:	2200      	movs	r2, #0
 8009bec:	2104      	movs	r1, #4
 8009bee:	4826      	ldr	r0, [pc, #152]	@ (8009c88 <main+0x124>)
 8009bf0:	f001 fa3d 	bl	800b06e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	2102      	movs	r1, #2
 8009bf8:	4823      	ldr	r0, [pc, #140]	@ (8009c88 <main+0x124>)
 8009bfa:	f001 fa38 	bl	800b06e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8009bfe:	2200      	movs	r2, #0
 8009c00:	2101      	movs	r1, #1
 8009c02:	4821      	ldr	r0, [pc, #132]	@ (8009c88 <main+0x124>)
 8009c04:	f001 fa33 	bl	800b06e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8009c08:	2200      	movs	r2, #0
 8009c0a:	2120      	movs	r1, #32
 8009c0c:	4821      	ldr	r0, [pc, #132]	@ (8009c94 <main+0x130>)
 8009c0e:	f001 fa2e 	bl	800b06e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8009c12:	2200      	movs	r2, #0
 8009c14:	2110      	movs	r1, #16
 8009c16:	481f      	ldr	r0, [pc, #124]	@ (8009c94 <main+0x130>)
 8009c18:	f001 fa29 	bl	800b06e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	2180      	movs	r1, #128	@ 0x80
 8009c20:	481d      	ldr	r0, [pc, #116]	@ (8009c98 <main+0x134>)
 8009c22:	f001 fa24 	bl	800b06e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8009c26:	2200      	movs	r2, #0
 8009c28:	2140      	movs	r1, #64	@ 0x40
 8009c2a:	481b      	ldr	r0, [pc, #108]	@ (8009c98 <main+0x134>)
 8009c2c:	f001 fa1f 	bl	800b06e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8009c30:	2200      	movs	r2, #0
 8009c32:	2120      	movs	r1, #32
 8009c34:	4818      	ldr	r0, [pc, #96]	@ (8009c98 <main+0x134>)
 8009c36:	f001 fa1a 	bl	800b06e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	2110      	movs	r1, #16
 8009c3e:	4816      	ldr	r0, [pc, #88]	@ (8009c98 <main+0x134>)
 8009c40:	f001 fa15 	bl	800b06e <HAL_GPIO_WritePin>

  i2cTest();
 8009c44:	f7f6 ff26 	bl	8000a94 <i2cTest>
  HAL_Delay(100);
 8009c48:	2064      	movs	r0, #100	@ 0x64
 8009c4a:	f000 fc29 	bl	800a4a0 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 8009c4e:	4a13      	ldr	r2, [pc, #76]	@ (8009c9c <main+0x138>)
 8009c50:	2101      	movs	r1, #1
 8009c52:	2001      	movs	r0, #1
 8009c54:	f7ff ff02 	bl	8009a5c <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8009c58:	4a11      	ldr	r2, [pc, #68]	@ (8009ca0 <main+0x13c>)
 8009c5a:	2101      	movs	r1, #1
 8009c5c:	2002      	movs	r0, #2
 8009c5e:	f7ff fefd 	bl	8009a5c <lcd_print>
  HAL_Delay(1000);
 8009c62:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009c66:	f000 fc1b 	bl	800a4a0 <HAL_Delay>
  lcd_clear();
 8009c6a:	f7ff ff23 	bl	8009ab4 <lcd_clear>

  eepromKontrol();
 8009c6e:	f7f6 fae1 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8009c72:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009c76:	f000 fc13 	bl	800a4a0 <HAL_Delay>

  backLightTimer = millis;
 8009c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8009ca4 <main+0x140>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8009ca8 <main+0x144>)
 8009c80:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8009c82:	f7fd fa2d 	bl	80070e0 <mainLoop>
 8009c86:	e7fc      	b.n	8009c82 <main+0x11e>
 8009c88:	40010c00 	.word	0x40010c00
 8009c8c:	20001844 	.word	0x20001844
 8009c90:	200017f0 	.word	0x200017f0
 8009c94:	40011000 	.word	0x40011000
 8009c98:	40010800 	.word	0x40010800
 8009c9c:	2000009c 	.word	0x2000009c
 8009ca0:	200000b0 	.word	0x200000b0
 8009ca4:	20001044 	.word	0x20001044
 8009ca8:	20001060 	.word	0x20001060

08009cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b090      	sub	sp, #64	@ 0x40
 8009cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009cb2:	f107 0318 	add.w	r3, r7, #24
 8009cb6:	2228      	movs	r2, #40	@ 0x28
 8009cb8:	2100      	movs	r1, #0
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f004 f9fa 	bl	800e0b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009cc0:	1d3b      	adds	r3, r7, #4
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	601a      	str	r2, [r3, #0]
 8009cc6:	605a      	str	r2, [r3, #4]
 8009cc8:	609a      	str	r2, [r3, #8]
 8009cca:	60da      	str	r2, [r3, #12]
 8009ccc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009cd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009cd6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009cdc:	2301      	movs	r3, #1
 8009cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009ce4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8009cea:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8009cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009cf0:	f107 0318 	add.w	r3, r7, #24
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	f002 fc0d 	bl	800c514 <HAL_RCC_OscConfig>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8009d00:	f000 f9a2 	bl	800a048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009d04:	230f      	movs	r3, #15
 8009d06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009d08:	2302      	movs	r3, #2
 8009d0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009d10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009d16:	2300      	movs	r3, #0
 8009d18:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8009d1a:	1d3b      	adds	r3, r7, #4
 8009d1c:	2102      	movs	r1, #2
 8009d1e:	4618      	mov	r0, r3
 8009d20:	f002 fe7a 	bl	800ca18 <HAL_RCC_ClockConfig>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d001      	beq.n	8009d2e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8009d2a:	f000 f98d 	bl	800a048 <Error_Handler>
  }
}
 8009d2e:	bf00      	nop
 8009d30:	3740      	adds	r7, #64	@ 0x40
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
	...

08009d38 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8009d3c:	4b16      	ldr	r3, [pc, #88]	@ (8009d98 <MX_CAN_Init+0x60>)
 8009d3e:	4a17      	ldr	r2, [pc, #92]	@ (8009d9c <MX_CAN_Init+0x64>)
 8009d40:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8009d42:	4b15      	ldr	r3, [pc, #84]	@ (8009d98 <MX_CAN_Init+0x60>)
 8009d44:	2210      	movs	r2, #16
 8009d46:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8009d48:	4b13      	ldr	r3, [pc, #76]	@ (8009d98 <MX_CAN_Init+0x60>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8009d4e:	4b12      	ldr	r3, [pc, #72]	@ (8009d98 <MX_CAN_Init+0x60>)
 8009d50:	2200      	movs	r2, #0
 8009d52:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8009d54:	4b10      	ldr	r3, [pc, #64]	@ (8009d98 <MX_CAN_Init+0x60>)
 8009d56:	2200      	movs	r2, #0
 8009d58:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8009d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8009d98 <MX_CAN_Init+0x60>)
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8009d60:	4b0d      	ldr	r3, [pc, #52]	@ (8009d98 <MX_CAN_Init+0x60>)
 8009d62:	2200      	movs	r2, #0
 8009d64:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8009d66:	4b0c      	ldr	r3, [pc, #48]	@ (8009d98 <MX_CAN_Init+0x60>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8009d6c:	4b0a      	ldr	r3, [pc, #40]	@ (8009d98 <MX_CAN_Init+0x60>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8009d72:	4b09      	ldr	r3, [pc, #36]	@ (8009d98 <MX_CAN_Init+0x60>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8009d78:	4b07      	ldr	r3, [pc, #28]	@ (8009d98 <MX_CAN_Init+0x60>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8009d7e:	4b06      	ldr	r3, [pc, #24]	@ (8009d98 <MX_CAN_Init+0x60>)
 8009d80:	2200      	movs	r2, #0
 8009d82:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8009d84:	4804      	ldr	r0, [pc, #16]	@ (8009d98 <MX_CAN_Init+0x60>)
 8009d86:	f000 fbaf 	bl	800a4e8 <HAL_CAN_Init>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d001      	beq.n	8009d94 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8009d90:	f000 f95a 	bl	800a048 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8009d94:	bf00      	nop
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	200017c8 	.word	0x200017c8
 8009d9c:	40006400 	.word	0x40006400

08009da0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009da4:	4b12      	ldr	r3, [pc, #72]	@ (8009df0 <MX_I2C1_Init+0x50>)
 8009da6:	4a13      	ldr	r2, [pc, #76]	@ (8009df4 <MX_I2C1_Init+0x54>)
 8009da8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8009daa:	4b11      	ldr	r3, [pc, #68]	@ (8009df0 <MX_I2C1_Init+0x50>)
 8009dac:	4a12      	ldr	r2, [pc, #72]	@ (8009df8 <MX_I2C1_Init+0x58>)
 8009dae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009db0:	4b0f      	ldr	r3, [pc, #60]	@ (8009df0 <MX_I2C1_Init+0x50>)
 8009db2:	2200      	movs	r2, #0
 8009db4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009db6:	4b0e      	ldr	r3, [pc, #56]	@ (8009df0 <MX_I2C1_Init+0x50>)
 8009db8:	2200      	movs	r2, #0
 8009dba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8009df0 <MX_I2C1_Init+0x50>)
 8009dbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009dc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009dc4:	4b0a      	ldr	r3, [pc, #40]	@ (8009df0 <MX_I2C1_Init+0x50>)
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009dca:	4b09      	ldr	r3, [pc, #36]	@ (8009df0 <MX_I2C1_Init+0x50>)
 8009dcc:	2200      	movs	r2, #0
 8009dce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009dd0:	4b07      	ldr	r3, [pc, #28]	@ (8009df0 <MX_I2C1_Init+0x50>)
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009dd6:	4b06      	ldr	r3, [pc, #24]	@ (8009df0 <MX_I2C1_Init+0x50>)
 8009dd8:	2200      	movs	r2, #0
 8009dda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009ddc:	4804      	ldr	r0, [pc, #16]	@ (8009df0 <MX_I2C1_Init+0x50>)
 8009dde:	f001 f977 	bl	800b0d0 <HAL_I2C_Init>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d001      	beq.n	8009dec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009de8:	f000 f92e 	bl	800a048 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8009dec:	bf00      	nop
 8009dee:	bd80      	pop	{r7, pc}
 8009df0:	200017f0 	.word	0x200017f0
 8009df4:	40005400 	.word	0x40005400
 8009df8:	00061a80 	.word	0x00061a80

08009dfc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b086      	sub	sp, #24
 8009e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009e02:	f107 0308 	add.w	r3, r7, #8
 8009e06:	2200      	movs	r2, #0
 8009e08:	601a      	str	r2, [r3, #0]
 8009e0a:	605a      	str	r2, [r3, #4]
 8009e0c:	609a      	str	r2, [r3, #8]
 8009e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009e10:	463b      	mov	r3, r7
 8009e12:	2200      	movs	r2, #0
 8009e14:	601a      	str	r2, [r3, #0]
 8009e16:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009e18:	4b1f      	ldr	r3, [pc, #124]	@ (8009e98 <MX_TIM1_Init+0x9c>)
 8009e1a:	4a20      	ldr	r2, [pc, #128]	@ (8009e9c <MX_TIM1_Init+0xa0>)
 8009e1c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8009e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8009e98 <MX_TIM1_Init+0x9c>)
 8009e20:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8009e24:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009e26:	4b1c      	ldr	r3, [pc, #112]	@ (8009e98 <MX_TIM1_Init+0x9c>)
 8009e28:	2200      	movs	r2, #0
 8009e2a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8009e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8009e98 <MX_TIM1_Init+0x9c>)
 8009e2e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8009e32:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009e34:	4b18      	ldr	r3, [pc, #96]	@ (8009e98 <MX_TIM1_Init+0x9c>)
 8009e36:	2200      	movs	r2, #0
 8009e38:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009e3a:	4b17      	ldr	r3, [pc, #92]	@ (8009e98 <MX_TIM1_Init+0x9c>)
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e40:	4b15      	ldr	r3, [pc, #84]	@ (8009e98 <MX_TIM1_Init+0x9c>)
 8009e42:	2200      	movs	r2, #0
 8009e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009e46:	4814      	ldr	r0, [pc, #80]	@ (8009e98 <MX_TIM1_Init+0x9c>)
 8009e48:	f002 ff74 	bl	800cd34 <HAL_TIM_Base_Init>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8009e52:	f000 f8f9 	bl	800a048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009e56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009e5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009e5c:	f107 0308 	add.w	r3, r7, #8
 8009e60:	4619      	mov	r1, r3
 8009e62:	480d      	ldr	r0, [pc, #52]	@ (8009e98 <MX_TIM1_Init+0x9c>)
 8009e64:	f003 f91e 	bl	800d0a4 <HAL_TIM_ConfigClockSource>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d001      	beq.n	8009e72 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8009e6e:	f000 f8eb 	bl	800a048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009e72:	2300      	movs	r3, #0
 8009e74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009e76:	2300      	movs	r3, #0
 8009e78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009e7a:	463b      	mov	r3, r7
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4806      	ldr	r0, [pc, #24]	@ (8009e98 <MX_TIM1_Init+0x9c>)
 8009e80:	f003 fb0c 	bl	800d49c <HAL_TIMEx_MasterConfigSynchronization>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d001      	beq.n	8009e8e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8009e8a:	f000 f8dd 	bl	800a048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8009e8e:	bf00      	nop
 8009e90:	3718      	adds	r7, #24
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	20001844 	.word	0x20001844
 8009e9c:	40012c00 	.word	0x40012c00

08009ea0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009ea4:	4b11      	ldr	r3, [pc, #68]	@ (8009eec <MX_USART1_UART_Init+0x4c>)
 8009ea6:	4a12      	ldr	r2, [pc, #72]	@ (8009ef0 <MX_USART1_UART_Init+0x50>)
 8009ea8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009eaa:	4b10      	ldr	r3, [pc, #64]	@ (8009eec <MX_USART1_UART_Init+0x4c>)
 8009eac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009eb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8009eec <MX_USART1_UART_Init+0x4c>)
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8009eec <MX_USART1_UART_Init+0x4c>)
 8009eba:	2200      	movs	r2, #0
 8009ebc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8009eec <MX_USART1_UART_Init+0x4c>)
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009ec4:	4b09      	ldr	r3, [pc, #36]	@ (8009eec <MX_USART1_UART_Init+0x4c>)
 8009ec6:	220c      	movs	r2, #12
 8009ec8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009eca:	4b08      	ldr	r3, [pc, #32]	@ (8009eec <MX_USART1_UART_Init+0x4c>)
 8009ecc:	2200      	movs	r2, #0
 8009ece:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009ed0:	4b06      	ldr	r3, [pc, #24]	@ (8009eec <MX_USART1_UART_Init+0x4c>)
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009ed6:	4805      	ldr	r0, [pc, #20]	@ (8009eec <MX_USART1_UART_Init+0x4c>)
 8009ed8:	f003 fb5e 	bl	800d598 <HAL_UART_Init>
 8009edc:	4603      	mov	r3, r0
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d001      	beq.n	8009ee6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009ee2:	f000 f8b1 	bl	800a048 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009ee6:	bf00      	nop
 8009ee8:	bd80      	pop	{r7, pc}
 8009eea:	bf00      	nop
 8009eec:	2000188c 	.word	0x2000188c
 8009ef0:	40013800 	.word	0x40013800

08009ef4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b088      	sub	sp, #32
 8009ef8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009efa:	f107 0310 	add.w	r3, r7, #16
 8009efe:	2200      	movs	r2, #0
 8009f00:	601a      	str	r2, [r3, #0]
 8009f02:	605a      	str	r2, [r3, #4]
 8009f04:	609a      	str	r2, [r3, #8]
 8009f06:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f08:	4b4b      	ldr	r3, [pc, #300]	@ (800a038 <MX_GPIO_Init+0x144>)
 8009f0a:	699b      	ldr	r3, [r3, #24]
 8009f0c:	4a4a      	ldr	r2, [pc, #296]	@ (800a038 <MX_GPIO_Init+0x144>)
 8009f0e:	f043 0310 	orr.w	r3, r3, #16
 8009f12:	6193      	str	r3, [r2, #24]
 8009f14:	4b48      	ldr	r3, [pc, #288]	@ (800a038 <MX_GPIO_Init+0x144>)
 8009f16:	699b      	ldr	r3, [r3, #24]
 8009f18:	f003 0310 	and.w	r3, r3, #16
 8009f1c:	60fb      	str	r3, [r7, #12]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009f20:	4b45      	ldr	r3, [pc, #276]	@ (800a038 <MX_GPIO_Init+0x144>)
 8009f22:	699b      	ldr	r3, [r3, #24]
 8009f24:	4a44      	ldr	r2, [pc, #272]	@ (800a038 <MX_GPIO_Init+0x144>)
 8009f26:	f043 0320 	orr.w	r3, r3, #32
 8009f2a:	6193      	str	r3, [r2, #24]
 8009f2c:	4b42      	ldr	r3, [pc, #264]	@ (800a038 <MX_GPIO_Init+0x144>)
 8009f2e:	699b      	ldr	r3, [r3, #24]
 8009f30:	f003 0320 	and.w	r3, r3, #32
 8009f34:	60bb      	str	r3, [r7, #8]
 8009f36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f38:	4b3f      	ldr	r3, [pc, #252]	@ (800a038 <MX_GPIO_Init+0x144>)
 8009f3a:	699b      	ldr	r3, [r3, #24]
 8009f3c:	4a3e      	ldr	r2, [pc, #248]	@ (800a038 <MX_GPIO_Init+0x144>)
 8009f3e:	f043 0304 	orr.w	r3, r3, #4
 8009f42:	6193      	str	r3, [r2, #24]
 8009f44:	4b3c      	ldr	r3, [pc, #240]	@ (800a038 <MX_GPIO_Init+0x144>)
 8009f46:	699b      	ldr	r3, [r3, #24]
 8009f48:	f003 0304 	and.w	r3, r3, #4
 8009f4c:	607b      	str	r3, [r7, #4]
 8009f4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f50:	4b39      	ldr	r3, [pc, #228]	@ (800a038 <MX_GPIO_Init+0x144>)
 8009f52:	699b      	ldr	r3, [r3, #24]
 8009f54:	4a38      	ldr	r2, [pc, #224]	@ (800a038 <MX_GPIO_Init+0x144>)
 8009f56:	f043 0308 	orr.w	r3, r3, #8
 8009f5a:	6193      	str	r3, [r2, #24]
 8009f5c:	4b36      	ldr	r3, [pc, #216]	@ (800a038 <MX_GPIO_Init+0x144>)
 8009f5e:	699b      	ldr	r3, [r3, #24]
 8009f60:	f003 0308 	and.w	r3, r3, #8
 8009f64:	603b      	str	r3, [r7, #0]
 8009f66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8009f68:	2200      	movs	r2, #0
 8009f6a:	21f0      	movs	r1, #240	@ 0xf0
 8009f6c:	4833      	ldr	r0, [pc, #204]	@ (800a03c <MX_GPIO_Init+0x148>)
 8009f6e:	f001 f87e 	bl	800b06e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8009f72:	2200      	movs	r2, #0
 8009f74:	f241 0130 	movw	r1, #4144	@ 0x1030
 8009f78:	4831      	ldr	r0, [pc, #196]	@ (800a040 <MX_GPIO_Init+0x14c>)
 8009f7a:	f001 f878 	bl	800b06e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f640 4107 	movw	r1, #3079	@ 0xc07
 8009f84:	482f      	ldr	r0, [pc, #188]	@ (800a044 <MX_GPIO_Init+0x150>)
 8009f86:	f001 f872 	bl	800b06e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8009f8a:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 8009f8e:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009f90:	2300      	movs	r3, #0
 8009f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f94:	2300      	movs	r3, #0
 8009f96:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f98:	f107 0310 	add.w	r3, r7, #16
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	4828      	ldr	r0, [pc, #160]	@ (800a040 <MX_GPIO_Init+0x14c>)
 8009fa0:	f000 fdee 	bl	800ab80 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8009fa4:	f248 130f 	movw	r3, #33039	@ 0x810f
 8009fa8:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009faa:	2300      	movs	r3, #0
 8009fac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009fb2:	f107 0310 	add.w	r3, r7, #16
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	4820      	ldr	r0, [pc, #128]	@ (800a03c <MX_GPIO_Init+0x148>)
 8009fba:	f000 fde1 	bl	800ab80 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8009fbe:	23f0      	movs	r3, #240	@ 0xf0
 8009fc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fca:	2302      	movs	r3, #2
 8009fcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009fce:	f107 0310 	add.w	r3, r7, #16
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	4819      	ldr	r0, [pc, #100]	@ (800a03c <MX_GPIO_Init+0x148>)
 8009fd6:	f000 fdd3 	bl	800ab80 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8009fda:	f241 0330 	movw	r3, #4144	@ 0x1030
 8009fde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fe8:	2302      	movs	r3, #2
 8009fea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009fec:	f107 0310 	add.w	r3, r7, #16
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	4813      	ldr	r0, [pc, #76]	@ (800a040 <MX_GPIO_Init+0x14c>)
 8009ff4:	f000 fdc4 	bl	800ab80 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8009ff8:	f640 4307 	movw	r3, #3079	@ 0xc07
 8009ffc:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009ffe:	2301      	movs	r3, #1
 800a000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a002:	2300      	movs	r3, #0
 800a004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a006:	2302      	movs	r3, #2
 800a008:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a00a:	f107 0310 	add.w	r3, r7, #16
 800a00e:	4619      	mov	r1, r3
 800a010:	480c      	ldr	r0, [pc, #48]	@ (800a044 <MX_GPIO_Init+0x150>)
 800a012:	f000 fdb5 	bl	800ab80 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 800a016:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800a01a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a01c:	2300      	movs	r3, #0
 800a01e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a020:	2300      	movs	r3, #0
 800a022:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a024:	f107 0310 	add.w	r3, r7, #16
 800a028:	4619      	mov	r1, r3
 800a02a:	4806      	ldr	r0, [pc, #24]	@ (800a044 <MX_GPIO_Init+0x150>)
 800a02c:	f000 fda8 	bl	800ab80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800a030:	bf00      	nop
 800a032:	3720      	adds	r7, #32
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}
 800a038:	40021000 	.word	0x40021000
 800a03c:	40010800 	.word	0x40010800
 800a040:	40011000 	.word	0x40011000
 800a044:	40010c00 	.word	0x40010c00

0800a048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a048:	b480      	push	{r7}
 800a04a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800a04c:	bf00      	nop
 800a04e:	46bd      	mov	sp, r7
 800a050:	bc80      	pop	{r7}
 800a052:	4770      	bx	lr

0800a054 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a054:	b480      	push	{r7}
 800a056:	b085      	sub	sp, #20
 800a058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800a05a:	4b15      	ldr	r3, [pc, #84]	@ (800a0b0 <HAL_MspInit+0x5c>)
 800a05c:	699b      	ldr	r3, [r3, #24]
 800a05e:	4a14      	ldr	r2, [pc, #80]	@ (800a0b0 <HAL_MspInit+0x5c>)
 800a060:	f043 0301 	orr.w	r3, r3, #1
 800a064:	6193      	str	r3, [r2, #24]
 800a066:	4b12      	ldr	r3, [pc, #72]	@ (800a0b0 <HAL_MspInit+0x5c>)
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	f003 0301 	and.w	r3, r3, #1
 800a06e:	60bb      	str	r3, [r7, #8]
 800a070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a072:	4b0f      	ldr	r3, [pc, #60]	@ (800a0b0 <HAL_MspInit+0x5c>)
 800a074:	69db      	ldr	r3, [r3, #28]
 800a076:	4a0e      	ldr	r2, [pc, #56]	@ (800a0b0 <HAL_MspInit+0x5c>)
 800a078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a07c:	61d3      	str	r3, [r2, #28]
 800a07e:	4b0c      	ldr	r3, [pc, #48]	@ (800a0b0 <HAL_MspInit+0x5c>)
 800a080:	69db      	ldr	r3, [r3, #28]
 800a082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a086:	607b      	str	r3, [r7, #4]
 800a088:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800a08a:	4b0a      	ldr	r3, [pc, #40]	@ (800a0b4 <HAL_MspInit+0x60>)
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	60fb      	str	r3, [r7, #12]
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800a096:	60fb      	str	r3, [r7, #12]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a09e:	60fb      	str	r3, [r7, #12]
 800a0a0:	4a04      	ldr	r2, [pc, #16]	@ (800a0b4 <HAL_MspInit+0x60>)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a0a6:	bf00      	nop
 800a0a8:	3714      	adds	r7, #20
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bc80      	pop	{r7}
 800a0ae:	4770      	bx	lr
 800a0b0:	40021000 	.word	0x40021000
 800a0b4:	40010000 	.word	0x40010000

0800a0b8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b088      	sub	sp, #32
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a0c0:	f107 0310 	add.w	r3, r7, #16
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	601a      	str	r2, [r3, #0]
 800a0c8:	605a      	str	r2, [r3, #4]
 800a0ca:	609a      	str	r2, [r3, #8]
 800a0cc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a1c      	ldr	r2, [pc, #112]	@ (800a144 <HAL_CAN_MspInit+0x8c>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d131      	bne.n	800a13c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800a0d8:	4b1b      	ldr	r3, [pc, #108]	@ (800a148 <HAL_CAN_MspInit+0x90>)
 800a0da:	69db      	ldr	r3, [r3, #28]
 800a0dc:	4a1a      	ldr	r2, [pc, #104]	@ (800a148 <HAL_CAN_MspInit+0x90>)
 800a0de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a0e2:	61d3      	str	r3, [r2, #28]
 800a0e4:	4b18      	ldr	r3, [pc, #96]	@ (800a148 <HAL_CAN_MspInit+0x90>)
 800a0e6:	69db      	ldr	r3, [r3, #28]
 800a0e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0ec:	60fb      	str	r3, [r7, #12]
 800a0ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0f0:	4b15      	ldr	r3, [pc, #84]	@ (800a148 <HAL_CAN_MspInit+0x90>)
 800a0f2:	699b      	ldr	r3, [r3, #24]
 800a0f4:	4a14      	ldr	r2, [pc, #80]	@ (800a148 <HAL_CAN_MspInit+0x90>)
 800a0f6:	f043 0304 	orr.w	r3, r3, #4
 800a0fa:	6193      	str	r3, [r2, #24]
 800a0fc:	4b12      	ldr	r3, [pc, #72]	@ (800a148 <HAL_CAN_MspInit+0x90>)
 800a0fe:	699b      	ldr	r3, [r3, #24]
 800a100:	f003 0304 	and.w	r3, r3, #4
 800a104:	60bb      	str	r3, [r7, #8]
 800a106:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800a108:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800a10c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a10e:	2300      	movs	r3, #0
 800a110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a112:	2300      	movs	r3, #0
 800a114:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a116:	f107 0310 	add.w	r3, r7, #16
 800a11a:	4619      	mov	r1, r3
 800a11c:	480b      	ldr	r0, [pc, #44]	@ (800a14c <HAL_CAN_MspInit+0x94>)
 800a11e:	f000 fd2f 	bl	800ab80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a122:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a126:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a128:	2302      	movs	r3, #2
 800a12a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a12c:	2303      	movs	r3, #3
 800a12e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a130:	f107 0310 	add.w	r3, r7, #16
 800a134:	4619      	mov	r1, r3
 800a136:	4805      	ldr	r0, [pc, #20]	@ (800a14c <HAL_CAN_MspInit+0x94>)
 800a138:	f000 fd22 	bl	800ab80 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 800a13c:	bf00      	nop
 800a13e:	3720      	adds	r7, #32
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	40006400 	.word	0x40006400
 800a148:	40021000 	.word	0x40021000
 800a14c:	40010800 	.word	0x40010800

0800a150 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b088      	sub	sp, #32
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a158:	f107 0310 	add.w	r3, r7, #16
 800a15c:	2200      	movs	r2, #0
 800a15e:	601a      	str	r2, [r3, #0]
 800a160:	605a      	str	r2, [r3, #4]
 800a162:	609a      	str	r2, [r3, #8]
 800a164:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a15      	ldr	r2, [pc, #84]	@ (800a1c0 <HAL_I2C_MspInit+0x70>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d123      	bne.n	800a1b8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a170:	4b14      	ldr	r3, [pc, #80]	@ (800a1c4 <HAL_I2C_MspInit+0x74>)
 800a172:	699b      	ldr	r3, [r3, #24]
 800a174:	4a13      	ldr	r2, [pc, #76]	@ (800a1c4 <HAL_I2C_MspInit+0x74>)
 800a176:	f043 0308 	orr.w	r3, r3, #8
 800a17a:	6193      	str	r3, [r2, #24]
 800a17c:	4b11      	ldr	r3, [pc, #68]	@ (800a1c4 <HAL_I2C_MspInit+0x74>)
 800a17e:	699b      	ldr	r3, [r3, #24]
 800a180:	f003 0308 	and.w	r3, r3, #8
 800a184:	60fb      	str	r3, [r7, #12]
 800a186:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800a188:	23c0      	movs	r3, #192	@ 0xc0
 800a18a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a18c:	2312      	movs	r3, #18
 800a18e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a190:	2303      	movs	r3, #3
 800a192:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a194:	f107 0310 	add.w	r3, r7, #16
 800a198:	4619      	mov	r1, r3
 800a19a:	480b      	ldr	r0, [pc, #44]	@ (800a1c8 <HAL_I2C_MspInit+0x78>)
 800a19c:	f000 fcf0 	bl	800ab80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a1a0:	4b08      	ldr	r3, [pc, #32]	@ (800a1c4 <HAL_I2C_MspInit+0x74>)
 800a1a2:	69db      	ldr	r3, [r3, #28]
 800a1a4:	4a07      	ldr	r2, [pc, #28]	@ (800a1c4 <HAL_I2C_MspInit+0x74>)
 800a1a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a1aa:	61d3      	str	r3, [r2, #28]
 800a1ac:	4b05      	ldr	r3, [pc, #20]	@ (800a1c4 <HAL_I2C_MspInit+0x74>)
 800a1ae:	69db      	ldr	r3, [r3, #28]
 800a1b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a1b4:	60bb      	str	r3, [r7, #8]
 800a1b6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800a1b8:	bf00      	nop
 800a1ba:	3720      	adds	r7, #32
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	40005400 	.word	0x40005400
 800a1c4:	40021000 	.word	0x40021000
 800a1c8:	40010c00 	.word	0x40010c00

0800a1cc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a0a      	ldr	r2, [pc, #40]	@ (800a204 <HAL_I2C_MspDeInit+0x38>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d10d      	bne.n	800a1fa <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800a1de:	4b0a      	ldr	r3, [pc, #40]	@ (800a208 <HAL_I2C_MspDeInit+0x3c>)
 800a1e0:	69db      	ldr	r3, [r3, #28]
 800a1e2:	4a09      	ldr	r2, [pc, #36]	@ (800a208 <HAL_I2C_MspDeInit+0x3c>)
 800a1e4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a1e8:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800a1ea:	2140      	movs	r1, #64	@ 0x40
 800a1ec:	4807      	ldr	r0, [pc, #28]	@ (800a20c <HAL_I2C_MspDeInit+0x40>)
 800a1ee:	f000 fe5b 	bl	800aea8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800a1f2:	2180      	movs	r1, #128	@ 0x80
 800a1f4:	4805      	ldr	r0, [pc, #20]	@ (800a20c <HAL_I2C_MspDeInit+0x40>)
 800a1f6:	f000 fe57 	bl	800aea8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800a1fa:	bf00      	nop
 800a1fc:	3708      	adds	r7, #8
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	40005400 	.word	0x40005400
 800a208:	40021000 	.word	0x40021000
 800a20c:	40010c00 	.word	0x40010c00

0800a210 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a0d      	ldr	r2, [pc, #52]	@ (800a254 <HAL_TIM_Base_MspInit+0x44>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d113      	bne.n	800a24a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800a222:	4b0d      	ldr	r3, [pc, #52]	@ (800a258 <HAL_TIM_Base_MspInit+0x48>)
 800a224:	699b      	ldr	r3, [r3, #24]
 800a226:	4a0c      	ldr	r2, [pc, #48]	@ (800a258 <HAL_TIM_Base_MspInit+0x48>)
 800a228:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a22c:	6193      	str	r3, [r2, #24]
 800a22e:	4b0a      	ldr	r3, [pc, #40]	@ (800a258 <HAL_TIM_Base_MspInit+0x48>)
 800a230:	699b      	ldr	r3, [r3, #24]
 800a232:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a236:	60fb      	str	r3, [r7, #12]
 800a238:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800a23a:	2200      	movs	r2, #0
 800a23c:	2100      	movs	r1, #0
 800a23e:	2019      	movs	r0, #25
 800a240:	f000 fb25 	bl	800a88e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800a244:	2019      	movs	r0, #25
 800a246:	f000 fb3e 	bl	800a8c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800a24a:	bf00      	nop
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	40012c00 	.word	0x40012c00
 800a258:	40021000 	.word	0x40021000

0800a25c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b088      	sub	sp, #32
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a264:	f107 0310 	add.w	r3, r7, #16
 800a268:	2200      	movs	r2, #0
 800a26a:	601a      	str	r2, [r3, #0]
 800a26c:	605a      	str	r2, [r3, #4]
 800a26e:	609a      	str	r2, [r3, #8]
 800a270:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a20      	ldr	r2, [pc, #128]	@ (800a2f8 <HAL_UART_MspInit+0x9c>)
 800a278:	4293      	cmp	r3, r2
 800a27a:	d139      	bne.n	800a2f0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a27c:	4b1f      	ldr	r3, [pc, #124]	@ (800a2fc <HAL_UART_MspInit+0xa0>)
 800a27e:	699b      	ldr	r3, [r3, #24]
 800a280:	4a1e      	ldr	r2, [pc, #120]	@ (800a2fc <HAL_UART_MspInit+0xa0>)
 800a282:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a286:	6193      	str	r3, [r2, #24]
 800a288:	4b1c      	ldr	r3, [pc, #112]	@ (800a2fc <HAL_UART_MspInit+0xa0>)
 800a28a:	699b      	ldr	r3, [r3, #24]
 800a28c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a290:	60fb      	str	r3, [r7, #12]
 800a292:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a294:	4b19      	ldr	r3, [pc, #100]	@ (800a2fc <HAL_UART_MspInit+0xa0>)
 800a296:	699b      	ldr	r3, [r3, #24]
 800a298:	4a18      	ldr	r2, [pc, #96]	@ (800a2fc <HAL_UART_MspInit+0xa0>)
 800a29a:	f043 0304 	orr.w	r3, r3, #4
 800a29e:	6193      	str	r3, [r2, #24]
 800a2a0:	4b16      	ldr	r3, [pc, #88]	@ (800a2fc <HAL_UART_MspInit+0xa0>)
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	f003 0304 	and.w	r3, r3, #4
 800a2a8:	60bb      	str	r3, [r7, #8]
 800a2aa:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800a2ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a2b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2b2:	2302      	movs	r3, #2
 800a2b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a2b6:	2303      	movs	r3, #3
 800a2b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2ba:	f107 0310 	add.w	r3, r7, #16
 800a2be:	4619      	mov	r1, r3
 800a2c0:	480f      	ldr	r0, [pc, #60]	@ (800a300 <HAL_UART_MspInit+0xa4>)
 800a2c2:	f000 fc5d 	bl	800ab80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800a2c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a2d4:	f107 0310 	add.w	r3, r7, #16
 800a2d8:	4619      	mov	r1, r3
 800a2da:	4809      	ldr	r0, [pc, #36]	@ (800a300 <HAL_UART_MspInit+0xa4>)
 800a2dc:	f000 fc50 	bl	800ab80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	2025      	movs	r0, #37	@ 0x25
 800a2e6:	f000 fad2 	bl	800a88e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a2ea:	2025      	movs	r0, #37	@ 0x25
 800a2ec:	f000 faeb 	bl	800a8c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800a2f0:	bf00      	nop
 800a2f2:	3720      	adds	r7, #32
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	40013800 	.word	0x40013800
 800a2fc:	40021000 	.word	0x40021000
 800a300:	40010800 	.word	0x40010800

0800a304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a304:	b480      	push	{r7}
 800a306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a308:	bf00      	nop
 800a30a:	e7fd      	b.n	800a308 <NMI_Handler+0x4>

0800a30c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a30c:	b480      	push	{r7}
 800a30e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a310:	bf00      	nop
 800a312:	e7fd      	b.n	800a310 <HardFault_Handler+0x4>

0800a314 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a314:	b480      	push	{r7}
 800a316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a318:	bf00      	nop
 800a31a:	e7fd      	b.n	800a318 <MemManage_Handler+0x4>

0800a31c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a31c:	b480      	push	{r7}
 800a31e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a320:	bf00      	nop
 800a322:	e7fd      	b.n	800a320 <BusFault_Handler+0x4>

0800a324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a324:	b480      	push	{r7}
 800a326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a328:	bf00      	nop
 800a32a:	e7fd      	b.n	800a328 <UsageFault_Handler+0x4>

0800a32c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a32c:	b480      	push	{r7}
 800a32e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a330:	bf00      	nop
 800a332:	46bd      	mov	sp, r7
 800a334:	bc80      	pop	{r7}
 800a336:	4770      	bx	lr

0800a338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a338:	b480      	push	{r7}
 800a33a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a33c:	bf00      	nop
 800a33e:	46bd      	mov	sp, r7
 800a340:	bc80      	pop	{r7}
 800a342:	4770      	bx	lr

0800a344 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a344:	b480      	push	{r7}
 800a346:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a348:	bf00      	nop
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bc80      	pop	{r7}
 800a34e:	4770      	bx	lr

0800a350 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a354:	f000 f888 	bl	800a468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a358:	bf00      	nop
 800a35a:	bd80      	pop	{r7, pc}

0800a35c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a360:	4802      	ldr	r0, [pc, #8]	@ (800a36c <TIM1_UP_IRQHandler+0x10>)
 800a362:	f002 fd97 	bl	800ce94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800a366:	bf00      	nop
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	20001844 	.word	0x20001844

0800a370 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a374:	4802      	ldr	r0, [pc, #8]	@ (800a380 <USART1_IRQHandler+0x10>)
 800a376:	f003 f95f 	bl	800d638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800a37a:	bf00      	nop
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	2000188c 	.word	0x2000188c

0800a384 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800a384:	b480      	push	{r7}
 800a386:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a388:	bf00      	nop
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bc80      	pop	{r7}
 800a38e:	4770      	bx	lr

0800a390 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800a390:	480c      	ldr	r0, [pc, #48]	@ (800a3c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a392:	490d      	ldr	r1, [pc, #52]	@ (800a3c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a394:	4a0d      	ldr	r2, [pc, #52]	@ (800a3cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a398:	e002      	b.n	800a3a0 <LoopCopyDataInit>

0800a39a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a39a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a39c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a39e:	3304      	adds	r3, #4

0800a3a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a3a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a3a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a3a4:	d3f9      	bcc.n	800a39a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a3a6:	4a0a      	ldr	r2, [pc, #40]	@ (800a3d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a3a8:	4c0a      	ldr	r4, [pc, #40]	@ (800a3d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800a3aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a3ac:	e001      	b.n	800a3b2 <LoopFillZerobss>

0800a3ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a3ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a3b0:	3204      	adds	r2, #4

0800a3b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a3b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a3b4:	d3fb      	bcc.n	800a3ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800a3b6:	f7ff ffe5 	bl	800a384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800a3ba:	f003 fe83 	bl	800e0c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800a3be:	f7ff fbd1 	bl	8009b64 <main>
  bx lr
 800a3c2:	4770      	bx	lr
  ldr r0, =_sdata
 800a3c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a3c8:	20000f80 	.word	0x20000f80
  ldr r2, =_sidata
 800a3cc:	0800e318 	.word	0x0800e318
  ldr r2, =_sbss
 800a3d0:	20000f80 	.word	0x20000f80
  ldr r4, =_ebss
 800a3d4:	200018d8 	.word	0x200018d8

0800a3d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800a3d8:	e7fe      	b.n	800a3d8 <ADC1_2_IRQHandler>
	...

0800a3dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a3e0:	4b08      	ldr	r3, [pc, #32]	@ (800a404 <HAL_Init+0x28>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a07      	ldr	r2, [pc, #28]	@ (800a404 <HAL_Init+0x28>)
 800a3e6:	f043 0310 	orr.w	r3, r3, #16
 800a3ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a3ec:	2003      	movs	r0, #3
 800a3ee:	f000 fa43 	bl	800a878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a3f2:	200f      	movs	r0, #15
 800a3f4:	f000 f808 	bl	800a408 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a3f8:	f7ff fe2c 	bl	800a054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	40022000 	.word	0x40022000

0800a408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b082      	sub	sp, #8
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800a410:	4b12      	ldr	r3, [pc, #72]	@ (800a45c <HAL_InitTick+0x54>)
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	4b12      	ldr	r3, [pc, #72]	@ (800a460 <HAL_InitTick+0x58>)
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	4619      	mov	r1, r3
 800a41a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a41e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a422:	fbb2 f3f3 	udiv	r3, r2, r3
 800a426:	4618      	mov	r0, r3
 800a428:	f000 fa5b 	bl	800a8e2 <HAL_SYSTICK_Config>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d001      	beq.n	800a436 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	e00e      	b.n	800a454 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2b0f      	cmp	r3, #15
 800a43a:	d80a      	bhi.n	800a452 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a43c:	2200      	movs	r2, #0
 800a43e:	6879      	ldr	r1, [r7, #4]
 800a440:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a444:	f000 fa23 	bl	800a88e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800a448:	4a06      	ldr	r2, [pc, #24]	@ (800a464 <HAL_InitTick+0x5c>)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800a44e:	2300      	movs	r3, #0
 800a450:	e000      	b.n	800a454 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800a452:	2301      	movs	r3, #1
}
 800a454:	4618      	mov	r0, r3
 800a456:	3708      	adds	r7, #8
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	20000f74 	.word	0x20000f74
 800a460:	20000f7c 	.word	0x20000f7c
 800a464:	20000f78 	.word	0x20000f78

0800a468 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a468:	b480      	push	{r7}
 800a46a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a46c:	4b05      	ldr	r3, [pc, #20]	@ (800a484 <HAL_IncTick+0x1c>)
 800a46e:	781b      	ldrb	r3, [r3, #0]
 800a470:	461a      	mov	r2, r3
 800a472:	4b05      	ldr	r3, [pc, #20]	@ (800a488 <HAL_IncTick+0x20>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4413      	add	r3, r2
 800a478:	4a03      	ldr	r2, [pc, #12]	@ (800a488 <HAL_IncTick+0x20>)
 800a47a:	6013      	str	r3, [r2, #0]
}
 800a47c:	bf00      	nop
 800a47e:	46bd      	mov	sp, r7
 800a480:	bc80      	pop	{r7}
 800a482:	4770      	bx	lr
 800a484:	20000f7c 	.word	0x20000f7c
 800a488:	200018d4 	.word	0x200018d4

0800a48c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a48c:	b480      	push	{r7}
 800a48e:	af00      	add	r7, sp, #0
  return uwTick;
 800a490:	4b02      	ldr	r3, [pc, #8]	@ (800a49c <HAL_GetTick+0x10>)
 800a492:	681b      	ldr	r3, [r3, #0]
}
 800a494:	4618      	mov	r0, r3
 800a496:	46bd      	mov	sp, r7
 800a498:	bc80      	pop	{r7}
 800a49a:	4770      	bx	lr
 800a49c:	200018d4 	.word	0x200018d4

0800a4a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b084      	sub	sp, #16
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a4a8:	f7ff fff0 	bl	800a48c <HAL_GetTick>
 800a4ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4b8:	d005      	beq.n	800a4c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a4ba:	4b0a      	ldr	r3, [pc, #40]	@ (800a4e4 <HAL_Delay+0x44>)
 800a4bc:	781b      	ldrb	r3, [r3, #0]
 800a4be:	461a      	mov	r2, r3
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	4413      	add	r3, r2
 800a4c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a4c6:	bf00      	nop
 800a4c8:	f7ff ffe0 	bl	800a48c <HAL_GetTick>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	1ad3      	subs	r3, r2, r3
 800a4d2:	68fa      	ldr	r2, [r7, #12]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d8f7      	bhi.n	800a4c8 <HAL_Delay+0x28>
  {
  }
}
 800a4d8:	bf00      	nop
 800a4da:	bf00      	nop
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	20000f7c 	.word	0x20000f7c

0800a4e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d101      	bne.n	800a4fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	e0ed      	b.n	800a6d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a500:	b2db      	uxtb	r3, r3
 800a502:	2b00      	cmp	r3, #0
 800a504:	d102      	bne.n	800a50c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f7ff fdd6 	bl	800a0b8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f042 0201 	orr.w	r2, r2, #1
 800a51a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a51c:	f7ff ffb6 	bl	800a48c <HAL_GetTick>
 800a520:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a522:	e012      	b.n	800a54a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a524:	f7ff ffb2 	bl	800a48c <HAL_GetTick>
 800a528:	4602      	mov	r2, r0
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	2b0a      	cmp	r3, #10
 800a530:	d90b      	bls.n	800a54a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a536:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2205      	movs	r2, #5
 800a542:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	e0c5      	b.n	800a6d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	f003 0301 	and.w	r3, r3, #1
 800a554:	2b00      	cmp	r3, #0
 800a556:	d0e5      	beq.n	800a524 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	681a      	ldr	r2, [r3, #0]
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f022 0202 	bic.w	r2, r2, #2
 800a566:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a568:	f7ff ff90 	bl	800a48c <HAL_GetTick>
 800a56c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a56e:	e012      	b.n	800a596 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a570:	f7ff ff8c 	bl	800a48c <HAL_GetTick>
 800a574:	4602      	mov	r2, r0
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	1ad3      	subs	r3, r2, r3
 800a57a:	2b0a      	cmp	r3, #10
 800a57c:	d90b      	bls.n	800a596 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a582:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2205      	movs	r2, #5
 800a58e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a592:	2301      	movs	r3, #1
 800a594:	e09f      	b.n	800a6d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	685b      	ldr	r3, [r3, #4]
 800a59c:	f003 0302 	and.w	r3, r3, #2
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d1e5      	bne.n	800a570 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	7e1b      	ldrb	r3, [r3, #24]
 800a5a8:	2b01      	cmp	r3, #1
 800a5aa:	d108      	bne.n	800a5be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800a5ba:	601a      	str	r2, [r3, #0]
 800a5bc:	e007      	b.n	800a5ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681a      	ldr	r2, [r3, #0]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a5cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	7e5b      	ldrb	r3, [r3, #25]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d108      	bne.n	800a5e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	681a      	ldr	r2, [r3, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a5e4:	601a      	str	r2, [r3, #0]
 800a5e6:	e007      	b.n	800a5f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a5f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	7e9b      	ldrb	r3, [r3, #26]
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d108      	bne.n	800a612 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f042 0220 	orr.w	r2, r2, #32
 800a60e:	601a      	str	r2, [r3, #0]
 800a610:	e007      	b.n	800a622 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f022 0220 	bic.w	r2, r2, #32
 800a620:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	7edb      	ldrb	r3, [r3, #27]
 800a626:	2b01      	cmp	r3, #1
 800a628:	d108      	bne.n	800a63c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681a      	ldr	r2, [r3, #0]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f022 0210 	bic.w	r2, r2, #16
 800a638:	601a      	str	r2, [r3, #0]
 800a63a:	e007      	b.n	800a64c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f042 0210 	orr.w	r2, r2, #16
 800a64a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	7f1b      	ldrb	r3, [r3, #28]
 800a650:	2b01      	cmp	r3, #1
 800a652:	d108      	bne.n	800a666 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f042 0208 	orr.w	r2, r2, #8
 800a662:	601a      	str	r2, [r3, #0]
 800a664:	e007      	b.n	800a676 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f022 0208 	bic.w	r2, r2, #8
 800a674:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	7f5b      	ldrb	r3, [r3, #29]
 800a67a:	2b01      	cmp	r3, #1
 800a67c:	d108      	bne.n	800a690 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f042 0204 	orr.w	r2, r2, #4
 800a68c:	601a      	str	r2, [r3, #0]
 800a68e:	e007      	b.n	800a6a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f022 0204 	bic.w	r2, r2, #4
 800a69e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	689a      	ldr	r2, [r3, #8]
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	431a      	orrs	r2, r3
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	691b      	ldr	r3, [r3, #16]
 800a6ae:	431a      	orrs	r2, r3
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	695b      	ldr	r3, [r3, #20]
 800a6b4:	ea42 0103 	orr.w	r1, r2, r3
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	685b      	ldr	r3, [r3, #4]
 800a6bc:	1e5a      	subs	r2, r3, #1
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	430a      	orrs	r2, r1
 800a6c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
	...

0800a6e0 <__NVIC_SetPriorityGrouping>:
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b085      	sub	sp, #20
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f003 0307 	and.w	r3, r3, #7
 800a6ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a6f0:	4b0c      	ldr	r3, [pc, #48]	@ (800a724 <__NVIC_SetPriorityGrouping+0x44>)
 800a6f2:	68db      	ldr	r3, [r3, #12]
 800a6f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a6f6:	68ba      	ldr	r2, [r7, #8]
 800a6f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a6fc:	4013      	ands	r3, r2
 800a6fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a708:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a70c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a712:	4a04      	ldr	r2, [pc, #16]	@ (800a724 <__NVIC_SetPriorityGrouping+0x44>)
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	60d3      	str	r3, [r2, #12]
}
 800a718:	bf00      	nop
 800a71a:	3714      	adds	r7, #20
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bc80      	pop	{r7}
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	e000ed00 	.word	0xe000ed00

0800a728 <__NVIC_GetPriorityGrouping>:
{
 800a728:	b480      	push	{r7}
 800a72a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a72c:	4b04      	ldr	r3, [pc, #16]	@ (800a740 <__NVIC_GetPriorityGrouping+0x18>)
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	0a1b      	lsrs	r3, r3, #8
 800a732:	f003 0307 	and.w	r3, r3, #7
}
 800a736:	4618      	mov	r0, r3
 800a738:	46bd      	mov	sp, r7
 800a73a:	bc80      	pop	{r7}
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	e000ed00 	.word	0xe000ed00

0800a744 <__NVIC_EnableIRQ>:
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	4603      	mov	r3, r0
 800a74c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a74e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a752:	2b00      	cmp	r3, #0
 800a754:	db0b      	blt.n	800a76e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a756:	79fb      	ldrb	r3, [r7, #7]
 800a758:	f003 021f 	and.w	r2, r3, #31
 800a75c:	4906      	ldr	r1, [pc, #24]	@ (800a778 <__NVIC_EnableIRQ+0x34>)
 800a75e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a762:	095b      	lsrs	r3, r3, #5
 800a764:	2001      	movs	r0, #1
 800a766:	fa00 f202 	lsl.w	r2, r0, r2
 800a76a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800a76e:	bf00      	nop
 800a770:	370c      	adds	r7, #12
 800a772:	46bd      	mov	sp, r7
 800a774:	bc80      	pop	{r7}
 800a776:	4770      	bx	lr
 800a778:	e000e100 	.word	0xe000e100

0800a77c <__NVIC_SetPriority>:
{
 800a77c:	b480      	push	{r7}
 800a77e:	b083      	sub	sp, #12
 800a780:	af00      	add	r7, sp, #0
 800a782:	4603      	mov	r3, r0
 800a784:	6039      	str	r1, [r7, #0]
 800a786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	db0a      	blt.n	800a7a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	b2da      	uxtb	r2, r3
 800a794:	490c      	ldr	r1, [pc, #48]	@ (800a7c8 <__NVIC_SetPriority+0x4c>)
 800a796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a79a:	0112      	lsls	r2, r2, #4
 800a79c:	b2d2      	uxtb	r2, r2
 800a79e:	440b      	add	r3, r1
 800a7a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a7a4:	e00a      	b.n	800a7bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	b2da      	uxtb	r2, r3
 800a7aa:	4908      	ldr	r1, [pc, #32]	@ (800a7cc <__NVIC_SetPriority+0x50>)
 800a7ac:	79fb      	ldrb	r3, [r7, #7]
 800a7ae:	f003 030f 	and.w	r3, r3, #15
 800a7b2:	3b04      	subs	r3, #4
 800a7b4:	0112      	lsls	r2, r2, #4
 800a7b6:	b2d2      	uxtb	r2, r2
 800a7b8:	440b      	add	r3, r1
 800a7ba:	761a      	strb	r2, [r3, #24]
}
 800a7bc:	bf00      	nop
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bc80      	pop	{r7}
 800a7c4:	4770      	bx	lr
 800a7c6:	bf00      	nop
 800a7c8:	e000e100 	.word	0xe000e100
 800a7cc:	e000ed00 	.word	0xe000ed00

0800a7d0 <NVIC_EncodePriority>:
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b089      	sub	sp, #36	@ 0x24
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f003 0307 	and.w	r3, r3, #7
 800a7e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	f1c3 0307 	rsb	r3, r3, #7
 800a7ea:	2b04      	cmp	r3, #4
 800a7ec:	bf28      	it	cs
 800a7ee:	2304      	movcs	r3, #4
 800a7f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a7f2:	69fb      	ldr	r3, [r7, #28]
 800a7f4:	3304      	adds	r3, #4
 800a7f6:	2b06      	cmp	r3, #6
 800a7f8:	d902      	bls.n	800a800 <NVIC_EncodePriority+0x30>
 800a7fa:	69fb      	ldr	r3, [r7, #28]
 800a7fc:	3b03      	subs	r3, #3
 800a7fe:	e000      	b.n	800a802 <NVIC_EncodePriority+0x32>
 800a800:	2300      	movs	r3, #0
 800a802:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a804:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	fa02 f303 	lsl.w	r3, r2, r3
 800a80e:	43da      	mvns	r2, r3
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	401a      	ands	r2, r3
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a818:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	fa01 f303 	lsl.w	r3, r1, r3
 800a822:	43d9      	mvns	r1, r3
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a828:	4313      	orrs	r3, r2
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3724      	adds	r7, #36	@ 0x24
 800a82e:	46bd      	mov	sp, r7
 800a830:	bc80      	pop	{r7}
 800a832:	4770      	bx	lr

0800a834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b082      	sub	sp, #8
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	3b01      	subs	r3, #1
 800a840:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a844:	d301      	bcc.n	800a84a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a846:	2301      	movs	r3, #1
 800a848:	e00f      	b.n	800a86a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a84a:	4a0a      	ldr	r2, [pc, #40]	@ (800a874 <SysTick_Config+0x40>)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	3b01      	subs	r3, #1
 800a850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a852:	210f      	movs	r1, #15
 800a854:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a858:	f7ff ff90 	bl	800a77c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a85c:	4b05      	ldr	r3, [pc, #20]	@ (800a874 <SysTick_Config+0x40>)
 800a85e:	2200      	movs	r2, #0
 800a860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a862:	4b04      	ldr	r3, [pc, #16]	@ (800a874 <SysTick_Config+0x40>)
 800a864:	2207      	movs	r2, #7
 800a866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	e000e010 	.word	0xe000e010

0800a878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f7ff ff2d 	bl	800a6e0 <__NVIC_SetPriorityGrouping>
}
 800a886:	bf00      	nop
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a88e:	b580      	push	{r7, lr}
 800a890:	b086      	sub	sp, #24
 800a892:	af00      	add	r7, sp, #0
 800a894:	4603      	mov	r3, r0
 800a896:	60b9      	str	r1, [r7, #8]
 800a898:	607a      	str	r2, [r7, #4]
 800a89a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a89c:	2300      	movs	r3, #0
 800a89e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a8a0:	f7ff ff42 	bl	800a728 <__NVIC_GetPriorityGrouping>
 800a8a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	68b9      	ldr	r1, [r7, #8]
 800a8aa:	6978      	ldr	r0, [r7, #20]
 800a8ac:	f7ff ff90 	bl	800a7d0 <NVIC_EncodePriority>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	f7ff ff5f 	bl	800a77c <__NVIC_SetPriority>
}
 800a8be:	bf00      	nop
 800a8c0:	3718      	adds	r7, #24
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}

0800a8c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a8c6:	b580      	push	{r7, lr}
 800a8c8:	b082      	sub	sp, #8
 800a8ca:	af00      	add	r7, sp, #0
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a8d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7ff ff35 	bl	800a744 <__NVIC_EnableIRQ>
}
 800a8da:	bf00      	nop
 800a8dc:	3708      	adds	r7, #8
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b082      	sub	sp, #8
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f7ff ffa2 	bl	800a834 <SysTick_Config>
 800a8f0:	4603      	mov	r3, r0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a8fa:	b480      	push	{r7}
 800a8fc:	b085      	sub	sp, #20
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a902:	2300      	movs	r3, #0
 800a904:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	2b02      	cmp	r3, #2
 800a910:	d008      	beq.n	800a924 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2204      	movs	r2, #4
 800a916:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	e020      	b.n	800a966 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	681a      	ldr	r2, [r3, #0]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f022 020e 	bic.w	r2, r2, #14
 800a932:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f022 0201 	bic.w	r2, r2, #1
 800a942:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a94c:	2101      	movs	r1, #1
 800a94e:	fa01 f202 	lsl.w	r2, r1, r2
 800a952:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800a964:	7bfb      	ldrb	r3, [r7, #15]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3714      	adds	r7, #20
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bc80      	pop	{r7}
 800a96e:	4770      	bx	lr

0800a970 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a982:	b2db      	uxtb	r3, r3
 800a984:	2b02      	cmp	r3, #2
 800a986:	d005      	beq.n	800a994 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2204      	movs	r2, #4
 800a98c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	73fb      	strb	r3, [r7, #15]
 800a992:	e0d6      	b.n	800ab42 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f022 020e 	bic.w	r2, r2, #14
 800a9a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f022 0201 	bic.w	r2, r2, #1
 800a9b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	4b64      	ldr	r3, [pc, #400]	@ (800ab4c <HAL_DMA_Abort_IT+0x1dc>)
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d958      	bls.n	800aa72 <HAL_DMA_Abort_IT+0x102>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4a62      	ldr	r2, [pc, #392]	@ (800ab50 <HAL_DMA_Abort_IT+0x1e0>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d04f      	beq.n	800aa6a <HAL_DMA_Abort_IT+0xfa>
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	4a61      	ldr	r2, [pc, #388]	@ (800ab54 <HAL_DMA_Abort_IT+0x1e4>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d048      	beq.n	800aa66 <HAL_DMA_Abort_IT+0xf6>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4a5f      	ldr	r2, [pc, #380]	@ (800ab58 <HAL_DMA_Abort_IT+0x1e8>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d040      	beq.n	800aa60 <HAL_DMA_Abort_IT+0xf0>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	4a5e      	ldr	r2, [pc, #376]	@ (800ab5c <HAL_DMA_Abort_IT+0x1ec>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d038      	beq.n	800aa5a <HAL_DMA_Abort_IT+0xea>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a5c      	ldr	r2, [pc, #368]	@ (800ab60 <HAL_DMA_Abort_IT+0x1f0>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d030      	beq.n	800aa54 <HAL_DMA_Abort_IT+0xe4>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	4a5b      	ldr	r2, [pc, #364]	@ (800ab64 <HAL_DMA_Abort_IT+0x1f4>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d028      	beq.n	800aa4e <HAL_DMA_Abort_IT+0xde>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a52      	ldr	r2, [pc, #328]	@ (800ab4c <HAL_DMA_Abort_IT+0x1dc>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d020      	beq.n	800aa48 <HAL_DMA_Abort_IT+0xd8>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	4a57      	ldr	r2, [pc, #348]	@ (800ab68 <HAL_DMA_Abort_IT+0x1f8>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d019      	beq.n	800aa44 <HAL_DMA_Abort_IT+0xd4>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a55      	ldr	r2, [pc, #340]	@ (800ab6c <HAL_DMA_Abort_IT+0x1fc>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d012      	beq.n	800aa40 <HAL_DMA_Abort_IT+0xd0>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a54      	ldr	r2, [pc, #336]	@ (800ab70 <HAL_DMA_Abort_IT+0x200>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d00a      	beq.n	800aa3a <HAL_DMA_Abort_IT+0xca>
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4a52      	ldr	r2, [pc, #328]	@ (800ab74 <HAL_DMA_Abort_IT+0x204>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d102      	bne.n	800aa34 <HAL_DMA_Abort_IT+0xc4>
 800aa2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aa32:	e01b      	b.n	800aa6c <HAL_DMA_Abort_IT+0xfc>
 800aa34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800aa38:	e018      	b.n	800aa6c <HAL_DMA_Abort_IT+0xfc>
 800aa3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa3e:	e015      	b.n	800aa6c <HAL_DMA_Abort_IT+0xfc>
 800aa40:	2310      	movs	r3, #16
 800aa42:	e013      	b.n	800aa6c <HAL_DMA_Abort_IT+0xfc>
 800aa44:	2301      	movs	r3, #1
 800aa46:	e011      	b.n	800aa6c <HAL_DMA_Abort_IT+0xfc>
 800aa48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800aa4c:	e00e      	b.n	800aa6c <HAL_DMA_Abort_IT+0xfc>
 800aa4e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800aa52:	e00b      	b.n	800aa6c <HAL_DMA_Abort_IT+0xfc>
 800aa54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800aa58:	e008      	b.n	800aa6c <HAL_DMA_Abort_IT+0xfc>
 800aa5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aa5e:	e005      	b.n	800aa6c <HAL_DMA_Abort_IT+0xfc>
 800aa60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aa64:	e002      	b.n	800aa6c <HAL_DMA_Abort_IT+0xfc>
 800aa66:	2310      	movs	r3, #16
 800aa68:	e000      	b.n	800aa6c <HAL_DMA_Abort_IT+0xfc>
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	4a42      	ldr	r2, [pc, #264]	@ (800ab78 <HAL_DMA_Abort_IT+0x208>)
 800aa6e:	6053      	str	r3, [r2, #4]
 800aa70:	e057      	b.n	800ab22 <HAL_DMA_Abort_IT+0x1b2>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a36      	ldr	r2, [pc, #216]	@ (800ab50 <HAL_DMA_Abort_IT+0x1e0>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d04f      	beq.n	800ab1c <HAL_DMA_Abort_IT+0x1ac>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a34      	ldr	r2, [pc, #208]	@ (800ab54 <HAL_DMA_Abort_IT+0x1e4>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d048      	beq.n	800ab18 <HAL_DMA_Abort_IT+0x1a8>
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4a33      	ldr	r2, [pc, #204]	@ (800ab58 <HAL_DMA_Abort_IT+0x1e8>)
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d040      	beq.n	800ab12 <HAL_DMA_Abort_IT+0x1a2>
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a31      	ldr	r2, [pc, #196]	@ (800ab5c <HAL_DMA_Abort_IT+0x1ec>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d038      	beq.n	800ab0c <HAL_DMA_Abort_IT+0x19c>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a30      	ldr	r2, [pc, #192]	@ (800ab60 <HAL_DMA_Abort_IT+0x1f0>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d030      	beq.n	800ab06 <HAL_DMA_Abort_IT+0x196>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a2e      	ldr	r2, [pc, #184]	@ (800ab64 <HAL_DMA_Abort_IT+0x1f4>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d028      	beq.n	800ab00 <HAL_DMA_Abort_IT+0x190>
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a26      	ldr	r2, [pc, #152]	@ (800ab4c <HAL_DMA_Abort_IT+0x1dc>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d020      	beq.n	800aafa <HAL_DMA_Abort_IT+0x18a>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a2a      	ldr	r2, [pc, #168]	@ (800ab68 <HAL_DMA_Abort_IT+0x1f8>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d019      	beq.n	800aaf6 <HAL_DMA_Abort_IT+0x186>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4a29      	ldr	r2, [pc, #164]	@ (800ab6c <HAL_DMA_Abort_IT+0x1fc>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d012      	beq.n	800aaf2 <HAL_DMA_Abort_IT+0x182>
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	4a27      	ldr	r2, [pc, #156]	@ (800ab70 <HAL_DMA_Abort_IT+0x200>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d00a      	beq.n	800aaec <HAL_DMA_Abort_IT+0x17c>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a26      	ldr	r2, [pc, #152]	@ (800ab74 <HAL_DMA_Abort_IT+0x204>)
 800aadc:	4293      	cmp	r3, r2
 800aade:	d102      	bne.n	800aae6 <HAL_DMA_Abort_IT+0x176>
 800aae0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aae4:	e01b      	b.n	800ab1e <HAL_DMA_Abort_IT+0x1ae>
 800aae6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800aaea:	e018      	b.n	800ab1e <HAL_DMA_Abort_IT+0x1ae>
 800aaec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800aaf0:	e015      	b.n	800ab1e <HAL_DMA_Abort_IT+0x1ae>
 800aaf2:	2310      	movs	r3, #16
 800aaf4:	e013      	b.n	800ab1e <HAL_DMA_Abort_IT+0x1ae>
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e011      	b.n	800ab1e <HAL_DMA_Abort_IT+0x1ae>
 800aafa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800aafe:	e00e      	b.n	800ab1e <HAL_DMA_Abort_IT+0x1ae>
 800ab00:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ab04:	e00b      	b.n	800ab1e <HAL_DMA_Abort_IT+0x1ae>
 800ab06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800ab0a:	e008      	b.n	800ab1e <HAL_DMA_Abort_IT+0x1ae>
 800ab0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ab10:	e005      	b.n	800ab1e <HAL_DMA_Abort_IT+0x1ae>
 800ab12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ab16:	e002      	b.n	800ab1e <HAL_DMA_Abort_IT+0x1ae>
 800ab18:	2310      	movs	r3, #16
 800ab1a:	e000      	b.n	800ab1e <HAL_DMA_Abort_IT+0x1ae>
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	4a17      	ldr	r2, [pc, #92]	@ (800ab7c <HAL_DMA_Abort_IT+0x20c>)
 800ab20:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2201      	movs	r2, #1
 800ab26:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d003      	beq.n	800ab42 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	4798      	blx	r3
    } 
  }
  return status;
 800ab42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	40020080 	.word	0x40020080
 800ab50:	40020008 	.word	0x40020008
 800ab54:	4002001c 	.word	0x4002001c
 800ab58:	40020030 	.word	0x40020030
 800ab5c:	40020044 	.word	0x40020044
 800ab60:	40020058 	.word	0x40020058
 800ab64:	4002006c 	.word	0x4002006c
 800ab68:	40020408 	.word	0x40020408
 800ab6c:	4002041c 	.word	0x4002041c
 800ab70:	40020430 	.word	0x40020430
 800ab74:	40020444 	.word	0x40020444
 800ab78:	40020400 	.word	0x40020400
 800ab7c:	40020000 	.word	0x40020000

0800ab80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b08b      	sub	sp, #44	@ 0x2c
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ab92:	e179      	b.n	800ae88 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800ab94:	2201      	movs	r2, #1
 800ab96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab98:	fa02 f303 	lsl.w	r3, r2, r3
 800ab9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	69fa      	ldr	r2, [r7, #28]
 800aba4:	4013      	ands	r3, r2
 800aba6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800aba8:	69ba      	ldr	r2, [r7, #24]
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	429a      	cmp	r2, r3
 800abae:	f040 8168 	bne.w	800ae82 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	685b      	ldr	r3, [r3, #4]
 800abb6:	4a96      	ldr	r2, [pc, #600]	@ (800ae10 <HAL_GPIO_Init+0x290>)
 800abb8:	4293      	cmp	r3, r2
 800abba:	d05e      	beq.n	800ac7a <HAL_GPIO_Init+0xfa>
 800abbc:	4a94      	ldr	r2, [pc, #592]	@ (800ae10 <HAL_GPIO_Init+0x290>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d875      	bhi.n	800acae <HAL_GPIO_Init+0x12e>
 800abc2:	4a94      	ldr	r2, [pc, #592]	@ (800ae14 <HAL_GPIO_Init+0x294>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d058      	beq.n	800ac7a <HAL_GPIO_Init+0xfa>
 800abc8:	4a92      	ldr	r2, [pc, #584]	@ (800ae14 <HAL_GPIO_Init+0x294>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d86f      	bhi.n	800acae <HAL_GPIO_Init+0x12e>
 800abce:	4a92      	ldr	r2, [pc, #584]	@ (800ae18 <HAL_GPIO_Init+0x298>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d052      	beq.n	800ac7a <HAL_GPIO_Init+0xfa>
 800abd4:	4a90      	ldr	r2, [pc, #576]	@ (800ae18 <HAL_GPIO_Init+0x298>)
 800abd6:	4293      	cmp	r3, r2
 800abd8:	d869      	bhi.n	800acae <HAL_GPIO_Init+0x12e>
 800abda:	4a90      	ldr	r2, [pc, #576]	@ (800ae1c <HAL_GPIO_Init+0x29c>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d04c      	beq.n	800ac7a <HAL_GPIO_Init+0xfa>
 800abe0:	4a8e      	ldr	r2, [pc, #568]	@ (800ae1c <HAL_GPIO_Init+0x29c>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d863      	bhi.n	800acae <HAL_GPIO_Init+0x12e>
 800abe6:	4a8e      	ldr	r2, [pc, #568]	@ (800ae20 <HAL_GPIO_Init+0x2a0>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d046      	beq.n	800ac7a <HAL_GPIO_Init+0xfa>
 800abec:	4a8c      	ldr	r2, [pc, #560]	@ (800ae20 <HAL_GPIO_Init+0x2a0>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d85d      	bhi.n	800acae <HAL_GPIO_Init+0x12e>
 800abf2:	2b12      	cmp	r3, #18
 800abf4:	d82a      	bhi.n	800ac4c <HAL_GPIO_Init+0xcc>
 800abf6:	2b12      	cmp	r3, #18
 800abf8:	d859      	bhi.n	800acae <HAL_GPIO_Init+0x12e>
 800abfa:	a201      	add	r2, pc, #4	@ (adr r2, 800ac00 <HAL_GPIO_Init+0x80>)
 800abfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac00:	0800ac7b 	.word	0x0800ac7b
 800ac04:	0800ac55 	.word	0x0800ac55
 800ac08:	0800ac67 	.word	0x0800ac67
 800ac0c:	0800aca9 	.word	0x0800aca9
 800ac10:	0800acaf 	.word	0x0800acaf
 800ac14:	0800acaf 	.word	0x0800acaf
 800ac18:	0800acaf 	.word	0x0800acaf
 800ac1c:	0800acaf 	.word	0x0800acaf
 800ac20:	0800acaf 	.word	0x0800acaf
 800ac24:	0800acaf 	.word	0x0800acaf
 800ac28:	0800acaf 	.word	0x0800acaf
 800ac2c:	0800acaf 	.word	0x0800acaf
 800ac30:	0800acaf 	.word	0x0800acaf
 800ac34:	0800acaf 	.word	0x0800acaf
 800ac38:	0800acaf 	.word	0x0800acaf
 800ac3c:	0800acaf 	.word	0x0800acaf
 800ac40:	0800acaf 	.word	0x0800acaf
 800ac44:	0800ac5d 	.word	0x0800ac5d
 800ac48:	0800ac71 	.word	0x0800ac71
 800ac4c:	4a75      	ldr	r2, [pc, #468]	@ (800ae24 <HAL_GPIO_Init+0x2a4>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d013      	beq.n	800ac7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800ac52:	e02c      	b.n	800acae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	623b      	str	r3, [r7, #32]
          break;
 800ac5a:	e029      	b.n	800acb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	3304      	adds	r3, #4
 800ac62:	623b      	str	r3, [r7, #32]
          break;
 800ac64:	e024      	b.n	800acb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	68db      	ldr	r3, [r3, #12]
 800ac6a:	3308      	adds	r3, #8
 800ac6c:	623b      	str	r3, [r7, #32]
          break;
 800ac6e:	e01f      	b.n	800acb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	330c      	adds	r3, #12
 800ac76:	623b      	str	r3, [r7, #32]
          break;
 800ac78:	e01a      	b.n	800acb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	689b      	ldr	r3, [r3, #8]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d102      	bne.n	800ac88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800ac82:	2304      	movs	r3, #4
 800ac84:	623b      	str	r3, [r7, #32]
          break;
 800ac86:	e013      	b.n	800acb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	2b01      	cmp	r3, #1
 800ac8e:	d105      	bne.n	800ac9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800ac90:	2308      	movs	r3, #8
 800ac92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	69fa      	ldr	r2, [r7, #28]
 800ac98:	611a      	str	r2, [r3, #16]
          break;
 800ac9a:	e009      	b.n	800acb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800ac9c:	2308      	movs	r3, #8
 800ac9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	69fa      	ldr	r2, [r7, #28]
 800aca4:	615a      	str	r2, [r3, #20]
          break;
 800aca6:	e003      	b.n	800acb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800aca8:	2300      	movs	r3, #0
 800acaa:	623b      	str	r3, [r7, #32]
          break;
 800acac:	e000      	b.n	800acb0 <HAL_GPIO_Init+0x130>
          break;
 800acae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800acb0:	69bb      	ldr	r3, [r7, #24]
 800acb2:	2bff      	cmp	r3, #255	@ 0xff
 800acb4:	d801      	bhi.n	800acba <HAL_GPIO_Init+0x13a>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	e001      	b.n	800acbe <HAL_GPIO_Init+0x13e>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	3304      	adds	r3, #4
 800acbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800acc0:	69bb      	ldr	r3, [r7, #24]
 800acc2:	2bff      	cmp	r3, #255	@ 0xff
 800acc4:	d802      	bhi.n	800accc <HAL_GPIO_Init+0x14c>
 800acc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	e002      	b.n	800acd2 <HAL_GPIO_Init+0x152>
 800accc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acce:	3b08      	subs	r3, #8
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	681a      	ldr	r2, [r3, #0]
 800acd8:	210f      	movs	r1, #15
 800acda:	693b      	ldr	r3, [r7, #16]
 800acdc:	fa01 f303 	lsl.w	r3, r1, r3
 800ace0:	43db      	mvns	r3, r3
 800ace2:	401a      	ands	r2, r3
 800ace4:	6a39      	ldr	r1, [r7, #32]
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	fa01 f303 	lsl.w	r3, r1, r3
 800acec:	431a      	orrs	r2, r3
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	f000 80c1 	beq.w	800ae82 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800ad00:	4b49      	ldr	r3, [pc, #292]	@ (800ae28 <HAL_GPIO_Init+0x2a8>)
 800ad02:	699b      	ldr	r3, [r3, #24]
 800ad04:	4a48      	ldr	r2, [pc, #288]	@ (800ae28 <HAL_GPIO_Init+0x2a8>)
 800ad06:	f043 0301 	orr.w	r3, r3, #1
 800ad0a:	6193      	str	r3, [r2, #24]
 800ad0c:	4b46      	ldr	r3, [pc, #280]	@ (800ae28 <HAL_GPIO_Init+0x2a8>)
 800ad0e:	699b      	ldr	r3, [r3, #24]
 800ad10:	f003 0301 	and.w	r3, r3, #1
 800ad14:	60bb      	str	r3, [r7, #8]
 800ad16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800ad18:	4a44      	ldr	r2, [pc, #272]	@ (800ae2c <HAL_GPIO_Init+0x2ac>)
 800ad1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad1c:	089b      	lsrs	r3, r3, #2
 800ad1e:	3302      	adds	r3, #2
 800ad20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800ad26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad28:	f003 0303 	and.w	r3, r3, #3
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	220f      	movs	r2, #15
 800ad30:	fa02 f303 	lsl.w	r3, r2, r3
 800ad34:	43db      	mvns	r3, r3
 800ad36:	68fa      	ldr	r2, [r7, #12]
 800ad38:	4013      	ands	r3, r2
 800ad3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a3c      	ldr	r2, [pc, #240]	@ (800ae30 <HAL_GPIO_Init+0x2b0>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d01f      	beq.n	800ad84 <HAL_GPIO_Init+0x204>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a3b      	ldr	r2, [pc, #236]	@ (800ae34 <HAL_GPIO_Init+0x2b4>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d019      	beq.n	800ad80 <HAL_GPIO_Init+0x200>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a3a      	ldr	r2, [pc, #232]	@ (800ae38 <HAL_GPIO_Init+0x2b8>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d013      	beq.n	800ad7c <HAL_GPIO_Init+0x1fc>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4a39      	ldr	r2, [pc, #228]	@ (800ae3c <HAL_GPIO_Init+0x2bc>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d00d      	beq.n	800ad78 <HAL_GPIO_Init+0x1f8>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	4a38      	ldr	r2, [pc, #224]	@ (800ae40 <HAL_GPIO_Init+0x2c0>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d007      	beq.n	800ad74 <HAL_GPIO_Init+0x1f4>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4a37      	ldr	r2, [pc, #220]	@ (800ae44 <HAL_GPIO_Init+0x2c4>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d101      	bne.n	800ad70 <HAL_GPIO_Init+0x1f0>
 800ad6c:	2305      	movs	r3, #5
 800ad6e:	e00a      	b.n	800ad86 <HAL_GPIO_Init+0x206>
 800ad70:	2306      	movs	r3, #6
 800ad72:	e008      	b.n	800ad86 <HAL_GPIO_Init+0x206>
 800ad74:	2304      	movs	r3, #4
 800ad76:	e006      	b.n	800ad86 <HAL_GPIO_Init+0x206>
 800ad78:	2303      	movs	r3, #3
 800ad7a:	e004      	b.n	800ad86 <HAL_GPIO_Init+0x206>
 800ad7c:	2302      	movs	r3, #2
 800ad7e:	e002      	b.n	800ad86 <HAL_GPIO_Init+0x206>
 800ad80:	2301      	movs	r3, #1
 800ad82:	e000      	b.n	800ad86 <HAL_GPIO_Init+0x206>
 800ad84:	2300      	movs	r3, #0
 800ad86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad88:	f002 0203 	and.w	r2, r2, #3
 800ad8c:	0092      	lsls	r2, r2, #2
 800ad8e:	4093      	lsls	r3, r2
 800ad90:	68fa      	ldr	r2, [r7, #12]
 800ad92:	4313      	orrs	r3, r2
 800ad94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800ad96:	4925      	ldr	r1, [pc, #148]	@ (800ae2c <HAL_GPIO_Init+0x2ac>)
 800ad98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad9a:	089b      	lsrs	r3, r3, #2
 800ad9c:	3302      	adds	r3, #2
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800adac:	2b00      	cmp	r3, #0
 800adae:	d006      	beq.n	800adbe <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800adb0:	4b25      	ldr	r3, [pc, #148]	@ (800ae48 <HAL_GPIO_Init+0x2c8>)
 800adb2:	689a      	ldr	r2, [r3, #8]
 800adb4:	4924      	ldr	r1, [pc, #144]	@ (800ae48 <HAL_GPIO_Init+0x2c8>)
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	4313      	orrs	r3, r2
 800adba:	608b      	str	r3, [r1, #8]
 800adbc:	e006      	b.n	800adcc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800adbe:	4b22      	ldr	r3, [pc, #136]	@ (800ae48 <HAL_GPIO_Init+0x2c8>)
 800adc0:	689a      	ldr	r2, [r3, #8]
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	43db      	mvns	r3, r3
 800adc6:	4920      	ldr	r1, [pc, #128]	@ (800ae48 <HAL_GPIO_Init+0x2c8>)
 800adc8:	4013      	ands	r3, r2
 800adca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	685b      	ldr	r3, [r3, #4]
 800add0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800add4:	2b00      	cmp	r3, #0
 800add6:	d006      	beq.n	800ade6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800add8:	4b1b      	ldr	r3, [pc, #108]	@ (800ae48 <HAL_GPIO_Init+0x2c8>)
 800adda:	68da      	ldr	r2, [r3, #12]
 800addc:	491a      	ldr	r1, [pc, #104]	@ (800ae48 <HAL_GPIO_Init+0x2c8>)
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	60cb      	str	r3, [r1, #12]
 800ade4:	e006      	b.n	800adf4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800ade6:	4b18      	ldr	r3, [pc, #96]	@ (800ae48 <HAL_GPIO_Init+0x2c8>)
 800ade8:	68da      	ldr	r2, [r3, #12]
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	43db      	mvns	r3, r3
 800adee:	4916      	ldr	r1, [pc, #88]	@ (800ae48 <HAL_GPIO_Init+0x2c8>)
 800adf0:	4013      	ands	r3, r2
 800adf2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d025      	beq.n	800ae4c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800ae00:	4b11      	ldr	r3, [pc, #68]	@ (800ae48 <HAL_GPIO_Init+0x2c8>)
 800ae02:	685a      	ldr	r2, [r3, #4]
 800ae04:	4910      	ldr	r1, [pc, #64]	@ (800ae48 <HAL_GPIO_Init+0x2c8>)
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	604b      	str	r3, [r1, #4]
 800ae0c:	e025      	b.n	800ae5a <HAL_GPIO_Init+0x2da>
 800ae0e:	bf00      	nop
 800ae10:	10320000 	.word	0x10320000
 800ae14:	10310000 	.word	0x10310000
 800ae18:	10220000 	.word	0x10220000
 800ae1c:	10210000 	.word	0x10210000
 800ae20:	10120000 	.word	0x10120000
 800ae24:	10110000 	.word	0x10110000
 800ae28:	40021000 	.word	0x40021000
 800ae2c:	40010000 	.word	0x40010000
 800ae30:	40010800 	.word	0x40010800
 800ae34:	40010c00 	.word	0x40010c00
 800ae38:	40011000 	.word	0x40011000
 800ae3c:	40011400 	.word	0x40011400
 800ae40:	40011800 	.word	0x40011800
 800ae44:	40011c00 	.word	0x40011c00
 800ae48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800ae4c:	4b15      	ldr	r3, [pc, #84]	@ (800aea4 <HAL_GPIO_Init+0x324>)
 800ae4e:	685a      	ldr	r2, [r3, #4]
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	43db      	mvns	r3, r3
 800ae54:	4913      	ldr	r1, [pc, #76]	@ (800aea4 <HAL_GPIO_Init+0x324>)
 800ae56:	4013      	ands	r3, r2
 800ae58:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ae5a:	683b      	ldr	r3, [r7, #0]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d006      	beq.n	800ae74 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800ae66:	4b0f      	ldr	r3, [pc, #60]	@ (800aea4 <HAL_GPIO_Init+0x324>)
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	490e      	ldr	r1, [pc, #56]	@ (800aea4 <HAL_GPIO_Init+0x324>)
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	600b      	str	r3, [r1, #0]
 800ae72:	e006      	b.n	800ae82 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800ae74:	4b0b      	ldr	r3, [pc, #44]	@ (800aea4 <HAL_GPIO_Init+0x324>)
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	69bb      	ldr	r3, [r7, #24]
 800ae7a:	43db      	mvns	r3, r3
 800ae7c:	4909      	ldr	r1, [pc, #36]	@ (800aea4 <HAL_GPIO_Init+0x324>)
 800ae7e:	4013      	ands	r3, r2
 800ae80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800ae82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae84:	3301      	adds	r3, #1
 800ae86:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae8e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f47f ae7e 	bne.w	800ab94 <HAL_GPIO_Init+0x14>
  }
}
 800ae98:	bf00      	nop
 800ae9a:	bf00      	nop
 800ae9c:	372c      	adds	r7, #44	@ 0x2c
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bc80      	pop	{r7}
 800aea2:	4770      	bx	lr
 800aea4:	40010400 	.word	0x40010400

0800aea8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b089      	sub	sp, #36	@ 0x24
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800aeb6:	e0a6      	b.n	800b006 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800aeb8:	2201      	movs	r2, #1
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	fa02 f303 	lsl.w	r3, r2, r3
 800aec0:	683a      	ldr	r2, [r7, #0]
 800aec2:	4013      	ands	r3, r2
 800aec4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	f000 8099 	beq.w	800b000 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800aece:	4a54      	ldr	r2, [pc, #336]	@ (800b020 <HAL_GPIO_DeInit+0x178>)
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	089b      	lsrs	r3, r3, #2
 800aed4:	3302      	adds	r3, #2
 800aed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aeda:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	f003 0303 	and.w	r3, r3, #3
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	220f      	movs	r2, #15
 800aee6:	fa02 f303 	lsl.w	r3, r2, r3
 800aeea:	697a      	ldr	r2, [r7, #20]
 800aeec:	4013      	ands	r3, r2
 800aeee:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4a4c      	ldr	r2, [pc, #304]	@ (800b024 <HAL_GPIO_DeInit+0x17c>)
 800aef4:	4293      	cmp	r3, r2
 800aef6:	d01f      	beq.n	800af38 <HAL_GPIO_DeInit+0x90>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	4a4b      	ldr	r2, [pc, #300]	@ (800b028 <HAL_GPIO_DeInit+0x180>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d019      	beq.n	800af34 <HAL_GPIO_DeInit+0x8c>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	4a4a      	ldr	r2, [pc, #296]	@ (800b02c <HAL_GPIO_DeInit+0x184>)
 800af04:	4293      	cmp	r3, r2
 800af06:	d013      	beq.n	800af30 <HAL_GPIO_DeInit+0x88>
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	4a49      	ldr	r2, [pc, #292]	@ (800b030 <HAL_GPIO_DeInit+0x188>)
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d00d      	beq.n	800af2c <HAL_GPIO_DeInit+0x84>
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	4a48      	ldr	r2, [pc, #288]	@ (800b034 <HAL_GPIO_DeInit+0x18c>)
 800af14:	4293      	cmp	r3, r2
 800af16:	d007      	beq.n	800af28 <HAL_GPIO_DeInit+0x80>
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	4a47      	ldr	r2, [pc, #284]	@ (800b038 <HAL_GPIO_DeInit+0x190>)
 800af1c:	4293      	cmp	r3, r2
 800af1e:	d101      	bne.n	800af24 <HAL_GPIO_DeInit+0x7c>
 800af20:	2305      	movs	r3, #5
 800af22:	e00a      	b.n	800af3a <HAL_GPIO_DeInit+0x92>
 800af24:	2306      	movs	r3, #6
 800af26:	e008      	b.n	800af3a <HAL_GPIO_DeInit+0x92>
 800af28:	2304      	movs	r3, #4
 800af2a:	e006      	b.n	800af3a <HAL_GPIO_DeInit+0x92>
 800af2c:	2303      	movs	r3, #3
 800af2e:	e004      	b.n	800af3a <HAL_GPIO_DeInit+0x92>
 800af30:	2302      	movs	r3, #2
 800af32:	e002      	b.n	800af3a <HAL_GPIO_DeInit+0x92>
 800af34:	2301      	movs	r3, #1
 800af36:	e000      	b.n	800af3a <HAL_GPIO_DeInit+0x92>
 800af38:	2300      	movs	r3, #0
 800af3a:	69fa      	ldr	r2, [r7, #28]
 800af3c:	f002 0203 	and.w	r2, r2, #3
 800af40:	0092      	lsls	r2, r2, #2
 800af42:	4093      	lsls	r3, r2
 800af44:	697a      	ldr	r2, [r7, #20]
 800af46:	429a      	cmp	r2, r3
 800af48:	d132      	bne.n	800afb0 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800af4a:	4b3c      	ldr	r3, [pc, #240]	@ (800b03c <HAL_GPIO_DeInit+0x194>)
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	43db      	mvns	r3, r3
 800af52:	493a      	ldr	r1, [pc, #232]	@ (800b03c <HAL_GPIO_DeInit+0x194>)
 800af54:	4013      	ands	r3, r2
 800af56:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800af58:	4b38      	ldr	r3, [pc, #224]	@ (800b03c <HAL_GPIO_DeInit+0x194>)
 800af5a:	685a      	ldr	r2, [r3, #4]
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	43db      	mvns	r3, r3
 800af60:	4936      	ldr	r1, [pc, #216]	@ (800b03c <HAL_GPIO_DeInit+0x194>)
 800af62:	4013      	ands	r3, r2
 800af64:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800af66:	4b35      	ldr	r3, [pc, #212]	@ (800b03c <HAL_GPIO_DeInit+0x194>)
 800af68:	68da      	ldr	r2, [r3, #12]
 800af6a:	69bb      	ldr	r3, [r7, #24]
 800af6c:	43db      	mvns	r3, r3
 800af6e:	4933      	ldr	r1, [pc, #204]	@ (800b03c <HAL_GPIO_DeInit+0x194>)
 800af70:	4013      	ands	r3, r2
 800af72:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800af74:	4b31      	ldr	r3, [pc, #196]	@ (800b03c <HAL_GPIO_DeInit+0x194>)
 800af76:	689a      	ldr	r2, [r3, #8]
 800af78:	69bb      	ldr	r3, [r7, #24]
 800af7a:	43db      	mvns	r3, r3
 800af7c:	492f      	ldr	r1, [pc, #188]	@ (800b03c <HAL_GPIO_DeInit+0x194>)
 800af7e:	4013      	ands	r3, r2
 800af80:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	f003 0303 	and.w	r3, r3, #3
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	220f      	movs	r2, #15
 800af8c:	fa02 f303 	lsl.w	r3, r2, r3
 800af90:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800af92:	4a23      	ldr	r2, [pc, #140]	@ (800b020 <HAL_GPIO_DeInit+0x178>)
 800af94:	69fb      	ldr	r3, [r7, #28]
 800af96:	089b      	lsrs	r3, r3, #2
 800af98:	3302      	adds	r3, #2
 800af9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800af9e:	697b      	ldr	r3, [r7, #20]
 800afa0:	43da      	mvns	r2, r3
 800afa2:	481f      	ldr	r0, [pc, #124]	@ (800b020 <HAL_GPIO_DeInit+0x178>)
 800afa4:	69fb      	ldr	r3, [r7, #28]
 800afa6:	089b      	lsrs	r3, r3, #2
 800afa8:	400a      	ands	r2, r1
 800afaa:	3302      	adds	r3, #2
 800afac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	2bff      	cmp	r3, #255	@ 0xff
 800afb4:	d801      	bhi.n	800afba <HAL_GPIO_DeInit+0x112>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	e001      	b.n	800afbe <HAL_GPIO_DeInit+0x116>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	3304      	adds	r3, #4
 800afbe:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800afc0:	69bb      	ldr	r3, [r7, #24]
 800afc2:	2bff      	cmp	r3, #255	@ 0xff
 800afc4:	d802      	bhi.n	800afcc <HAL_GPIO_DeInit+0x124>
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	e002      	b.n	800afd2 <HAL_GPIO_DeInit+0x12a>
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	3b08      	subs	r3, #8
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	210f      	movs	r1, #15
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	fa01 f303 	lsl.w	r3, r1, r3
 800afe0:	43db      	mvns	r3, r3
 800afe2:	401a      	ands	r2, r3
 800afe4:	2104      	movs	r1, #4
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	fa01 f303 	lsl.w	r3, r1, r3
 800afec:	431a      	orrs	r2, r3
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	68da      	ldr	r2, [r3, #12]
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	43db      	mvns	r3, r3
 800affa:	401a      	ands	r2, r3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	60da      	str	r2, [r3, #12]
    }

    position++;
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	3301      	adds	r3, #1
 800b004:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800b006:	683a      	ldr	r2, [r7, #0]
 800b008:	69fb      	ldr	r3, [r7, #28]
 800b00a:	fa22 f303 	lsr.w	r3, r2, r3
 800b00e:	2b00      	cmp	r3, #0
 800b010:	f47f af52 	bne.w	800aeb8 <HAL_GPIO_DeInit+0x10>
  }
}
 800b014:	bf00      	nop
 800b016:	bf00      	nop
 800b018:	3724      	adds	r7, #36	@ 0x24
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bc80      	pop	{r7}
 800b01e:	4770      	bx	lr
 800b020:	40010000 	.word	0x40010000
 800b024:	40010800 	.word	0x40010800
 800b028:	40010c00 	.word	0x40010c00
 800b02c:	40011000 	.word	0x40011000
 800b030:	40011400 	.word	0x40011400
 800b034:	40011800 	.word	0x40011800
 800b038:	40011c00 	.word	0x40011c00
 800b03c:	40010400 	.word	0x40010400

0800b040 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b040:	b480      	push	{r7}
 800b042:	b085      	sub	sp, #20
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	460b      	mov	r3, r1
 800b04a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	689a      	ldr	r2, [r3, #8]
 800b050:	887b      	ldrh	r3, [r7, #2]
 800b052:	4013      	ands	r3, r2
 800b054:	2b00      	cmp	r3, #0
 800b056:	d002      	beq.n	800b05e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b058:	2301      	movs	r3, #1
 800b05a:	73fb      	strb	r3, [r7, #15]
 800b05c:	e001      	b.n	800b062 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b05e:	2300      	movs	r3, #0
 800b060:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b062:	7bfb      	ldrb	r3, [r7, #15]
}
 800b064:	4618      	mov	r0, r3
 800b066:	3714      	adds	r7, #20
 800b068:	46bd      	mov	sp, r7
 800b06a:	bc80      	pop	{r7}
 800b06c:	4770      	bx	lr

0800b06e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b06e:	b480      	push	{r7}
 800b070:	b083      	sub	sp, #12
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
 800b076:	460b      	mov	r3, r1
 800b078:	807b      	strh	r3, [r7, #2]
 800b07a:	4613      	mov	r3, r2
 800b07c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800b07e:	787b      	ldrb	r3, [r7, #1]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d003      	beq.n	800b08c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b084:	887a      	ldrh	r2, [r7, #2]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800b08a:	e003      	b.n	800b094 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800b08c:	887b      	ldrh	r3, [r7, #2]
 800b08e:	041a      	lsls	r2, r3, #16
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	611a      	str	r2, [r3, #16]
}
 800b094:	bf00      	nop
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	bc80      	pop	{r7}
 800b09c:	4770      	bx	lr

0800b09e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800b09e:	b480      	push	{r7}
 800b0a0:	b085      	sub	sp, #20
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	6078      	str	r0, [r7, #4]
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	68db      	ldr	r3, [r3, #12]
 800b0ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b0b0:	887a      	ldrh	r2, [r7, #2]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	4013      	ands	r3, r2
 800b0b6:	041a      	lsls	r2, r3, #16
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	43d9      	mvns	r1, r3
 800b0bc:	887b      	ldrh	r3, [r7, #2]
 800b0be:	400b      	ands	r3, r1
 800b0c0:	431a      	orrs	r2, r3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	611a      	str	r2, [r3, #16]
}
 800b0c6:	bf00      	nop
 800b0c8:	3714      	adds	r7, #20
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bc80      	pop	{r7}
 800b0ce:	4770      	bx	lr

0800b0d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d101      	bne.n	800b0e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b0de:	2301      	movs	r3, #1
 800b0e0:	e12b      	b.n	800b33a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b0e8:	b2db      	uxtb	r3, r3
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d106      	bne.n	800b0fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f7ff f82a 	bl	800a150 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2224      	movs	r2, #36	@ 0x24
 800b100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f022 0201 	bic.w	r2, r2, #1
 800b112:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	681a      	ldr	r2, [r3, #0]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b122:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	681a      	ldr	r2, [r3, #0]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b132:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b134:	f001 fdb8 	bl	800cca8 <HAL_RCC_GetPCLK1Freq>
 800b138:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	4a81      	ldr	r2, [pc, #516]	@ (800b344 <HAL_I2C_Init+0x274>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d807      	bhi.n	800b154 <HAL_I2C_Init+0x84>
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	4a80      	ldr	r2, [pc, #512]	@ (800b348 <HAL_I2C_Init+0x278>)
 800b148:	4293      	cmp	r3, r2
 800b14a:	bf94      	ite	ls
 800b14c:	2301      	movls	r3, #1
 800b14e:	2300      	movhi	r3, #0
 800b150:	b2db      	uxtb	r3, r3
 800b152:	e006      	b.n	800b162 <HAL_I2C_Init+0x92>
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	4a7d      	ldr	r2, [pc, #500]	@ (800b34c <HAL_I2C_Init+0x27c>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	bf94      	ite	ls
 800b15c:	2301      	movls	r3, #1
 800b15e:	2300      	movhi	r3, #0
 800b160:	b2db      	uxtb	r3, r3
 800b162:	2b00      	cmp	r3, #0
 800b164:	d001      	beq.n	800b16a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b166:	2301      	movs	r3, #1
 800b168:	e0e7      	b.n	800b33a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	4a78      	ldr	r2, [pc, #480]	@ (800b350 <HAL_I2C_Init+0x280>)
 800b16e:	fba2 2303 	umull	r2, r3, r2, r3
 800b172:	0c9b      	lsrs	r3, r3, #18
 800b174:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	685b      	ldr	r3, [r3, #4]
 800b17c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68ba      	ldr	r2, [r7, #8]
 800b186:	430a      	orrs	r2, r1
 800b188:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	6a1b      	ldr	r3, [r3, #32]
 800b190:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	685b      	ldr	r3, [r3, #4]
 800b198:	4a6a      	ldr	r2, [pc, #424]	@ (800b344 <HAL_I2C_Init+0x274>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d802      	bhi.n	800b1a4 <HAL_I2C_Init+0xd4>
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	e009      	b.n	800b1b8 <HAL_I2C_Init+0xe8>
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b1aa:	fb02 f303 	mul.w	r3, r2, r3
 800b1ae:	4a69      	ldr	r2, [pc, #420]	@ (800b354 <HAL_I2C_Init+0x284>)
 800b1b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b1b4:	099b      	lsrs	r3, r3, #6
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	687a      	ldr	r2, [r7, #4]
 800b1ba:	6812      	ldr	r2, [r2, #0]
 800b1bc:	430b      	orrs	r3, r1
 800b1be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	69db      	ldr	r3, [r3, #28]
 800b1c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800b1ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	495c      	ldr	r1, [pc, #368]	@ (800b344 <HAL_I2C_Init+0x274>)
 800b1d4:	428b      	cmp	r3, r1
 800b1d6:	d819      	bhi.n	800b20c <HAL_I2C_Init+0x13c>
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	1e59      	subs	r1, r3, #1
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	005b      	lsls	r3, r3, #1
 800b1e2:	fbb1 f3f3 	udiv	r3, r1, r3
 800b1e6:	1c59      	adds	r1, r3, #1
 800b1e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b1ec:	400b      	ands	r3, r1
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d00a      	beq.n	800b208 <HAL_I2C_Init+0x138>
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	1e59      	subs	r1, r3, #1
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	005b      	lsls	r3, r3, #1
 800b1fc:	fbb1 f3f3 	udiv	r3, r1, r3
 800b200:	3301      	adds	r3, #1
 800b202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b206:	e051      	b.n	800b2ac <HAL_I2C_Init+0x1dc>
 800b208:	2304      	movs	r3, #4
 800b20a:	e04f      	b.n	800b2ac <HAL_I2C_Init+0x1dc>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d111      	bne.n	800b238 <HAL_I2C_Init+0x168>
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	1e58      	subs	r0, r3, #1
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6859      	ldr	r1, [r3, #4]
 800b21c:	460b      	mov	r3, r1
 800b21e:	005b      	lsls	r3, r3, #1
 800b220:	440b      	add	r3, r1
 800b222:	fbb0 f3f3 	udiv	r3, r0, r3
 800b226:	3301      	adds	r3, #1
 800b228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	bf0c      	ite	eq
 800b230:	2301      	moveq	r3, #1
 800b232:	2300      	movne	r3, #0
 800b234:	b2db      	uxtb	r3, r3
 800b236:	e012      	b.n	800b25e <HAL_I2C_Init+0x18e>
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	1e58      	subs	r0, r3, #1
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6859      	ldr	r1, [r3, #4]
 800b240:	460b      	mov	r3, r1
 800b242:	009b      	lsls	r3, r3, #2
 800b244:	440b      	add	r3, r1
 800b246:	0099      	lsls	r1, r3, #2
 800b248:	440b      	add	r3, r1
 800b24a:	fbb0 f3f3 	udiv	r3, r0, r3
 800b24e:	3301      	adds	r3, #1
 800b250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b254:	2b00      	cmp	r3, #0
 800b256:	bf0c      	ite	eq
 800b258:	2301      	moveq	r3, #1
 800b25a:	2300      	movne	r3, #0
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d001      	beq.n	800b266 <HAL_I2C_Init+0x196>
 800b262:	2301      	movs	r3, #1
 800b264:	e022      	b.n	800b2ac <HAL_I2C_Init+0x1dc>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	689b      	ldr	r3, [r3, #8]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d10e      	bne.n	800b28c <HAL_I2C_Init+0x1bc>
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	1e58      	subs	r0, r3, #1
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6859      	ldr	r1, [r3, #4]
 800b276:	460b      	mov	r3, r1
 800b278:	005b      	lsls	r3, r3, #1
 800b27a:	440b      	add	r3, r1
 800b27c:	fbb0 f3f3 	udiv	r3, r0, r3
 800b280:	3301      	adds	r3, #1
 800b282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b286:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b28a:	e00f      	b.n	800b2ac <HAL_I2C_Init+0x1dc>
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	1e58      	subs	r0, r3, #1
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6859      	ldr	r1, [r3, #4]
 800b294:	460b      	mov	r3, r1
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	440b      	add	r3, r1
 800b29a:	0099      	lsls	r1, r3, #2
 800b29c:	440b      	add	r3, r1
 800b29e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b2ac:	6879      	ldr	r1, [r7, #4]
 800b2ae:	6809      	ldr	r1, [r1, #0]
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	69da      	ldr	r2, [r3, #28]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a1b      	ldr	r3, [r3, #32]
 800b2c6:	431a      	orrs	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	430a      	orrs	r2, r1
 800b2ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800b2da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	6911      	ldr	r1, [r2, #16]
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	68d2      	ldr	r2, [r2, #12]
 800b2e6:	4311      	orrs	r1, r2
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	6812      	ldr	r2, [r2, #0]
 800b2ec:	430b      	orrs	r3, r1
 800b2ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	695a      	ldr	r2, [r3, #20]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	699b      	ldr	r3, [r3, #24]
 800b302:	431a      	orrs	r2, r3
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	430a      	orrs	r2, r1
 800b30a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	681a      	ldr	r2, [r3, #0]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f042 0201 	orr.w	r2, r2, #1
 800b31a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2200      	movs	r2, #0
 800b320:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2220      	movs	r2, #32
 800b326:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800b338:	2300      	movs	r3, #0
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3710      	adds	r7, #16
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	000186a0 	.word	0x000186a0
 800b348:	001e847f 	.word	0x001e847f
 800b34c:	003d08ff 	.word	0x003d08ff
 800b350:	431bde83 	.word	0x431bde83
 800b354:	10624dd3 	.word	0x10624dd3

0800b358 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d101      	bne.n	800b36a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	e021      	b.n	800b3ae <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	2224      	movs	r2, #36	@ 0x24
 800b36e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f022 0201 	bic.w	r2, r2, #1
 800b380:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f7fe ff22 	bl	800a1cc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2200      	movs	r2, #0
 800b38c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2200      	movs	r2, #0
 800b392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	2200      	movs	r2, #0
 800b39a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b3ac:	2300      	movs	r3, #0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3708      	adds	r7, #8
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
	...

0800b3b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b088      	sub	sp, #32
 800b3bc:	af02      	add	r7, sp, #8
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	607a      	str	r2, [r7, #4]
 800b3c2:	461a      	mov	r2, r3
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	817b      	strh	r3, [r7, #10]
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b3cc:	f7ff f85e 	bl	800a48c <HAL_GetTick>
 800b3d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b3d8:	b2db      	uxtb	r3, r3
 800b3da:	2b20      	cmp	r3, #32
 800b3dc:	f040 80e0 	bne.w	800b5a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	9300      	str	r3, [sp, #0]
 800b3e4:	2319      	movs	r3, #25
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	4970      	ldr	r1, [pc, #448]	@ (800b5ac <HAL_I2C_Master_Transmit+0x1f4>)
 800b3ea:	68f8      	ldr	r0, [r7, #12]
 800b3ec:	f000 fe5c 	bl	800c0a8 <I2C_WaitOnFlagUntilTimeout>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d001      	beq.n	800b3fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800b3f6:	2302      	movs	r3, #2
 800b3f8:	e0d3      	b.n	800b5a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b400:	2b01      	cmp	r3, #1
 800b402:	d101      	bne.n	800b408 <HAL_I2C_Master_Transmit+0x50>
 800b404:	2302      	movs	r3, #2
 800b406:	e0cc      	b.n	800b5a2 <HAL_I2C_Master_Transmit+0x1ea>
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2201      	movs	r2, #1
 800b40c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f003 0301 	and.w	r3, r3, #1
 800b41a:	2b01      	cmp	r3, #1
 800b41c:	d007      	beq.n	800b42e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	f042 0201 	orr.w	r2, r2, #1
 800b42c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b43c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2221      	movs	r2, #33	@ 0x21
 800b442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2210      	movs	r2, #16
 800b44a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2200      	movs	r2, #0
 800b452:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	893a      	ldrh	r2, [r7, #8]
 800b45e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b464:	b29a      	uxth	r2, r3
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	4a50      	ldr	r2, [pc, #320]	@ (800b5b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800b46e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b470:	8979      	ldrh	r1, [r7, #10]
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	6a3a      	ldr	r2, [r7, #32]
 800b476:	68f8      	ldr	r0, [r7, #12]
 800b478:	f000 fc16 	bl	800bca8 <I2C_MasterRequestWrite>
 800b47c:	4603      	mov	r3, r0
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d001      	beq.n	800b486 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b482:	2301      	movs	r3, #1
 800b484:	e08d      	b.n	800b5a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b486:	2300      	movs	r3, #0
 800b488:	613b      	str	r3, [r7, #16]
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	695b      	ldr	r3, [r3, #20]
 800b490:	613b      	str	r3, [r7, #16]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	699b      	ldr	r3, [r3, #24]
 800b498:	613b      	str	r3, [r7, #16]
 800b49a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b49c:	e066      	b.n	800b56c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b49e:	697a      	ldr	r2, [r7, #20]
 800b4a0:	6a39      	ldr	r1, [r7, #32]
 800b4a2:	68f8      	ldr	r0, [r7, #12]
 800b4a4:	f000 ff1a 	bl	800c2dc <I2C_WaitOnTXEFlagUntilTimeout>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d00d      	beq.n	800b4ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4b2:	2b04      	cmp	r3, #4
 800b4b4:	d107      	bne.n	800b4c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b4c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e06b      	b.n	800b5a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4ce:	781a      	ldrb	r2, [r3, #0]
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4da:	1c5a      	adds	r2, r3, #1
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4e4:	b29b      	uxth	r3, r3
 800b4e6:	3b01      	subs	r3, #1
 800b4e8:	b29a      	uxth	r2, r3
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4f2:	3b01      	subs	r3, #1
 800b4f4:	b29a      	uxth	r2, r3
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	695b      	ldr	r3, [r3, #20]
 800b500:	f003 0304 	and.w	r3, r3, #4
 800b504:	2b04      	cmp	r3, #4
 800b506:	d11b      	bne.n	800b540 <HAL_I2C_Master_Transmit+0x188>
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d017      	beq.n	800b540 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b514:	781a      	ldrb	r2, [r3, #0]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b520:	1c5a      	adds	r2, r3, #1
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	3b01      	subs	r3, #1
 800b52e:	b29a      	uxth	r2, r3
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b538:	3b01      	subs	r3, #1
 800b53a:	b29a      	uxth	r2, r3
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b540:	697a      	ldr	r2, [r7, #20]
 800b542:	6a39      	ldr	r1, [r7, #32]
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f000 ff11 	bl	800c36c <I2C_WaitOnBTFFlagUntilTimeout>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d00d      	beq.n	800b56c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b554:	2b04      	cmp	r3, #4
 800b556:	d107      	bne.n	800b568 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b566:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b568:	2301      	movs	r3, #1
 800b56a:	e01a      	b.n	800b5a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b570:	2b00      	cmp	r3, #0
 800b572:	d194      	bne.n	800b49e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	2220      	movs	r2, #32
 800b588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2200      	movs	r2, #0
 800b590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	2200      	movs	r2, #0
 800b598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b59c:	2300      	movs	r3, #0
 800b59e:	e000      	b.n	800b5a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b5a0:	2302      	movs	r3, #2
  }
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3718      	adds	r7, #24
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	00100002 	.word	0x00100002
 800b5b0:	ffff0000 	.word	0xffff0000

0800b5b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b088      	sub	sp, #32
 800b5b8:	af02      	add	r7, sp, #8
 800b5ba:	60f8      	str	r0, [r7, #12]
 800b5bc:	4608      	mov	r0, r1
 800b5be:	4611      	mov	r1, r2
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	817b      	strh	r3, [r7, #10]
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	813b      	strh	r3, [r7, #8]
 800b5ca:	4613      	mov	r3, r2
 800b5cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b5ce:	f7fe ff5d 	bl	800a48c <HAL_GetTick>
 800b5d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5da:	b2db      	uxtb	r3, r3
 800b5dc:	2b20      	cmp	r3, #32
 800b5de:	f040 80d9 	bne.w	800b794 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	9300      	str	r3, [sp, #0]
 800b5e6:	2319      	movs	r3, #25
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	496d      	ldr	r1, [pc, #436]	@ (800b7a0 <HAL_I2C_Mem_Write+0x1ec>)
 800b5ec:	68f8      	ldr	r0, [r7, #12]
 800b5ee:	f000 fd5b 	bl	800c0a8 <I2C_WaitOnFlagUntilTimeout>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d001      	beq.n	800b5fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800b5f8:	2302      	movs	r3, #2
 800b5fa:	e0cc      	b.n	800b796 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b602:	2b01      	cmp	r3, #1
 800b604:	d101      	bne.n	800b60a <HAL_I2C_Mem_Write+0x56>
 800b606:	2302      	movs	r3, #2
 800b608:	e0c5      	b.n	800b796 <HAL_I2C_Mem_Write+0x1e2>
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2201      	movs	r2, #1
 800b60e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f003 0301 	and.w	r3, r3, #1
 800b61c:	2b01      	cmp	r3, #1
 800b61e:	d007      	beq.n	800b630 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f042 0201 	orr.w	r2, r2, #1
 800b62e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b63e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2221      	movs	r2, #33	@ 0x21
 800b644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	2240      	movs	r2, #64	@ 0x40
 800b64c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2200      	movs	r2, #0
 800b654:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	6a3a      	ldr	r2, [r7, #32]
 800b65a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b660:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b666:	b29a      	uxth	r2, r3
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	4a4d      	ldr	r2, [pc, #308]	@ (800b7a4 <HAL_I2C_Mem_Write+0x1f0>)
 800b670:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b672:	88f8      	ldrh	r0, [r7, #6]
 800b674:	893a      	ldrh	r2, [r7, #8]
 800b676:	8979      	ldrh	r1, [r7, #10]
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	9301      	str	r3, [sp, #4]
 800b67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	4603      	mov	r3, r0
 800b682:	68f8      	ldr	r0, [r7, #12]
 800b684:	f000 fb92 	bl	800bdac <I2C_RequestMemoryWrite>
 800b688:	4603      	mov	r3, r0
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d052      	beq.n	800b734 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	e081      	b.n	800b796 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b692:	697a      	ldr	r2, [r7, #20]
 800b694:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f000 fe20 	bl	800c2dc <I2C_WaitOnTXEFlagUntilTimeout>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d00d      	beq.n	800b6be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6a6:	2b04      	cmp	r3, #4
 800b6a8:	d107      	bne.n	800b6ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	681a      	ldr	r2, [r3, #0]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b6b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e06b      	b.n	800b796 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6c2:	781a      	ldrb	r2, [r3, #0]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6ce:	1c5a      	adds	r2, r3, #1
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b6d8:	3b01      	subs	r3, #1
 800b6da:	b29a      	uxth	r2, r3
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	3b01      	subs	r3, #1
 800b6e8:	b29a      	uxth	r2, r3
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	695b      	ldr	r3, [r3, #20]
 800b6f4:	f003 0304 	and.w	r3, r3, #4
 800b6f8:	2b04      	cmp	r3, #4
 800b6fa:	d11b      	bne.n	800b734 <HAL_I2C_Mem_Write+0x180>
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b700:	2b00      	cmp	r3, #0
 800b702:	d017      	beq.n	800b734 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b708:	781a      	ldrb	r2, [r3, #0]
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b714:	1c5a      	adds	r2, r3, #1
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b71e:	3b01      	subs	r3, #1
 800b720:	b29a      	uxth	r2, r3
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	3b01      	subs	r3, #1
 800b72e:	b29a      	uxth	r2, r3
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d1aa      	bne.n	800b692 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b73c:	697a      	ldr	r2, [r7, #20]
 800b73e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b740:	68f8      	ldr	r0, [r7, #12]
 800b742:	f000 fe13 	bl	800c36c <I2C_WaitOnBTFFlagUntilTimeout>
 800b746:	4603      	mov	r3, r0
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d00d      	beq.n	800b768 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b750:	2b04      	cmp	r3, #4
 800b752:	d107      	bne.n	800b764 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b762:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	e016      	b.n	800b796 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b776:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2220      	movs	r2, #32
 800b77c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2200      	movs	r2, #0
 800b784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2200      	movs	r2, #0
 800b78c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b790:	2300      	movs	r3, #0
 800b792:	e000      	b.n	800b796 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800b794:	2302      	movs	r3, #2
  }
}
 800b796:	4618      	mov	r0, r3
 800b798:	3718      	adds	r7, #24
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd80      	pop	{r7, pc}
 800b79e:	bf00      	nop
 800b7a0:	00100002 	.word	0x00100002
 800b7a4:	ffff0000 	.word	0xffff0000

0800b7a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b08c      	sub	sp, #48	@ 0x30
 800b7ac:	af02      	add	r7, sp, #8
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	4608      	mov	r0, r1
 800b7b2:	4611      	mov	r1, r2
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	817b      	strh	r3, [r7, #10]
 800b7ba:	460b      	mov	r3, r1
 800b7bc:	813b      	strh	r3, [r7, #8]
 800b7be:	4613      	mov	r3, r2
 800b7c0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b7c6:	f7fe fe61 	bl	800a48c <HAL_GetTick>
 800b7ca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	2b20      	cmp	r3, #32
 800b7d6:	f040 8244 	bne.w	800bc62 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b7da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7dc:	9300      	str	r3, [sp, #0]
 800b7de:	2319      	movs	r3, #25
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	4982      	ldr	r1, [pc, #520]	@ (800b9ec <HAL_I2C_Mem_Read+0x244>)
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f000 fc5f 	bl	800c0a8 <I2C_WaitOnFlagUntilTimeout>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d001      	beq.n	800b7f4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800b7f0:	2302      	movs	r3, #2
 800b7f2:	e237      	b.n	800bc64 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d101      	bne.n	800b802 <HAL_I2C_Mem_Read+0x5a>
 800b7fe:	2302      	movs	r3, #2
 800b800:	e230      	b.n	800bc64 <HAL_I2C_Mem_Read+0x4bc>
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2201      	movs	r2, #1
 800b806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f003 0301 	and.w	r3, r3, #1
 800b814:	2b01      	cmp	r3, #1
 800b816:	d007      	beq.n	800b828 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	681a      	ldr	r2, [r3, #0]
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f042 0201 	orr.w	r2, r2, #1
 800b826:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	681a      	ldr	r2, [r3, #0]
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b836:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2222      	movs	r2, #34	@ 0x22
 800b83c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2240      	movs	r2, #64	@ 0x40
 800b844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2200      	movs	r2, #0
 800b84c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b852:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800b858:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b85e:	b29a      	uxth	r2, r3
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	4a62      	ldr	r2, [pc, #392]	@ (800b9f0 <HAL_I2C_Mem_Read+0x248>)
 800b868:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b86a:	88f8      	ldrh	r0, [r7, #6]
 800b86c:	893a      	ldrh	r2, [r7, #8]
 800b86e:	8979      	ldrh	r1, [r7, #10]
 800b870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b872:	9301      	str	r3, [sp, #4]
 800b874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	4603      	mov	r3, r0
 800b87a:	68f8      	ldr	r0, [r7, #12]
 800b87c:	f000 fb2c 	bl	800bed8 <I2C_RequestMemoryRead>
 800b880:	4603      	mov	r3, r0
 800b882:	2b00      	cmp	r3, #0
 800b884:	d001      	beq.n	800b88a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800b886:	2301      	movs	r3, #1
 800b888:	e1ec      	b.n	800bc64 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d113      	bne.n	800b8ba <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b892:	2300      	movs	r3, #0
 800b894:	61fb      	str	r3, [r7, #28]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	695b      	ldr	r3, [r3, #20]
 800b89c:	61fb      	str	r3, [r7, #28]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	699b      	ldr	r3, [r3, #24]
 800b8a4:	61fb      	str	r3, [r7, #28]
 800b8a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	681a      	ldr	r2, [r3, #0]
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b8b6:	601a      	str	r2, [r3, #0]
 800b8b8:	e1c0      	b.n	800bc3c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b8be:	2b01      	cmp	r3, #1
 800b8c0:	d11e      	bne.n	800b900 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b8d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8d2:	b672      	cpsid	i
}
 800b8d4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	61bb      	str	r3, [r7, #24]
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	695b      	ldr	r3, [r3, #20]
 800b8e0:	61bb      	str	r3, [r7, #24]
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	699b      	ldr	r3, [r3, #24]
 800b8e8:	61bb      	str	r3, [r7, #24]
 800b8ea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b8fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b8fc:	b662      	cpsie	i
}
 800b8fe:	e035      	b.n	800b96c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b904:	2b02      	cmp	r3, #2
 800b906:	d11e      	bne.n	800b946 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b916:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b918:	b672      	cpsid	i
}
 800b91a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b91c:	2300      	movs	r3, #0
 800b91e:	617b      	str	r3, [r7, #20]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	695b      	ldr	r3, [r3, #20]
 800b926:	617b      	str	r3, [r7, #20]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	699b      	ldr	r3, [r3, #24]
 800b92e:	617b      	str	r3, [r7, #20]
 800b930:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b940:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b942:	b662      	cpsie	i
}
 800b944:	e012      	b.n	800b96c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b954:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b956:	2300      	movs	r3, #0
 800b958:	613b      	str	r3, [r7, #16]
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	695b      	ldr	r3, [r3, #20]
 800b960:	613b      	str	r3, [r7, #16]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	699b      	ldr	r3, [r3, #24]
 800b968:	613b      	str	r3, [r7, #16]
 800b96a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800b96c:	e166      	b.n	800bc3c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b972:	2b03      	cmp	r3, #3
 800b974:	f200 811f 	bhi.w	800bbb6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d123      	bne.n	800b9c8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b982:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b984:	68f8      	ldr	r0, [r7, #12]
 800b986:	f000 fd39 	bl	800c3fc <I2C_WaitOnRXNEFlagUntilTimeout>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d001      	beq.n	800b994 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800b990:	2301      	movs	r3, #1
 800b992:	e167      	b.n	800bc64 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	691a      	ldr	r2, [r3, #16]
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b99e:	b2d2      	uxtb	r2, r2
 800b9a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9a6:	1c5a      	adds	r2, r3, #1
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9b0:	3b01      	subs	r3, #1
 800b9b2:	b29a      	uxth	r2, r3
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b9bc:	b29b      	uxth	r3, r3
 800b9be:	3b01      	subs	r3, #1
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b9c6:	e139      	b.n	800bc3c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b9cc:	2b02      	cmp	r3, #2
 800b9ce:	d152      	bne.n	800ba76 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d2:	9300      	str	r3, [sp, #0]
 800b9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	4906      	ldr	r1, [pc, #24]	@ (800b9f4 <HAL_I2C_Mem_Read+0x24c>)
 800b9da:	68f8      	ldr	r0, [r7, #12]
 800b9dc:	f000 fb64 	bl	800c0a8 <I2C_WaitOnFlagUntilTimeout>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d008      	beq.n	800b9f8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e13c      	b.n	800bc64 <HAL_I2C_Mem_Read+0x4bc>
 800b9ea:	bf00      	nop
 800b9ec:	00100002 	.word	0x00100002
 800b9f0:	ffff0000 	.word	0xffff0000
 800b9f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800b9f8:	b672      	cpsid	i
}
 800b9fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	691a      	ldr	r2, [r3, #16]
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba16:	b2d2      	uxtb	r2, r2
 800ba18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba1e:	1c5a      	adds	r2, r3, #1
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	b29a      	uxth	r2, r3
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	3b01      	subs	r3, #1
 800ba38:	b29a      	uxth	r2, r3
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800ba3e:	b662      	cpsie	i
}
 800ba40:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	691a      	ldr	r2, [r3, #16]
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba4c:	b2d2      	uxtb	r2, r2
 800ba4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba54:	1c5a      	adds	r2, r3, #1
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ba74:	e0e2      	b.n	800bc3c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800ba76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba78:	9300      	str	r3, [sp, #0]
 800ba7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	497b      	ldr	r1, [pc, #492]	@ (800bc6c <HAL_I2C_Mem_Read+0x4c4>)
 800ba80:	68f8      	ldr	r0, [r7, #12]
 800ba82:	f000 fb11 	bl	800c0a8 <I2C_WaitOnFlagUntilTimeout>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d001      	beq.n	800ba90 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	e0e9      	b.n	800bc64 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ba9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800baa0:	b672      	cpsid	i
}
 800baa2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	691a      	ldr	r2, [r3, #16]
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baae:	b2d2      	uxtb	r2, r2
 800bab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bab6:	1c5a      	adds	r2, r3, #1
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bac0:	3b01      	subs	r3, #1
 800bac2:	b29a      	uxth	r2, r3
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bacc:	b29b      	uxth	r3, r3
 800bace:	3b01      	subs	r3, #1
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800bad6:	4b66      	ldr	r3, [pc, #408]	@ (800bc70 <HAL_I2C_Mem_Read+0x4c8>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	08db      	lsrs	r3, r3, #3
 800badc:	4a65      	ldr	r2, [pc, #404]	@ (800bc74 <HAL_I2C_Mem_Read+0x4cc>)
 800bade:	fba2 2303 	umull	r2, r3, r2, r3
 800bae2:	0a1a      	lsrs	r2, r3, #8
 800bae4:	4613      	mov	r3, r2
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	4413      	add	r3, r2
 800baea:	00da      	lsls	r2, r3, #3
 800baec:	1ad3      	subs	r3, r2, r3
 800baee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800baf0:	6a3b      	ldr	r3, [r7, #32]
 800baf2:	3b01      	subs	r3, #1
 800baf4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800baf6:	6a3b      	ldr	r3, [r7, #32]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d118      	bne.n	800bb2e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	2200      	movs	r2, #0
 800bb00:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2220      	movs	r2, #32
 800bb06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb16:	f043 0220 	orr.w	r2, r3, #32
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800bb1e:	b662      	cpsie	i
}
 800bb20:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2200      	movs	r2, #0
 800bb26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e09a      	b.n	800bc64 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	695b      	ldr	r3, [r3, #20]
 800bb34:	f003 0304 	and.w	r3, r3, #4
 800bb38:	2b04      	cmp	r3, #4
 800bb3a:	d1d9      	bne.n	800baf0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bb4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	691a      	ldr	r2, [r3, #16]
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb56:	b2d2      	uxtb	r2, r2
 800bb58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb5e:	1c5a      	adds	r2, r3, #1
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb68:	3b01      	subs	r3, #1
 800bb6a:	b29a      	uxth	r2, r3
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	3b01      	subs	r3, #1
 800bb78:	b29a      	uxth	r2, r3
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800bb7e:	b662      	cpsie	i
}
 800bb80:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	691a      	ldr	r2, [r3, #16]
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb8c:	b2d2      	uxtb	r2, r2
 800bb8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb94:	1c5a      	adds	r2, r3, #1
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bb9e:	3b01      	subs	r3, #1
 800bba0:	b29a      	uxth	r2, r3
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bbaa:	b29b      	uxth	r3, r3
 800bbac:	3b01      	subs	r3, #1
 800bbae:	b29a      	uxth	r2, r3
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bbb4:	e042      	b.n	800bc3c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bbb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbb8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bbba:	68f8      	ldr	r0, [r7, #12]
 800bbbc:	f000 fc1e 	bl	800c3fc <I2C_WaitOnRXNEFlagUntilTimeout>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d001      	beq.n	800bbca <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e04c      	b.n	800bc64 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	691a      	ldr	r2, [r3, #16]
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbd4:	b2d2      	uxtb	r2, r2
 800bbd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbdc:	1c5a      	adds	r2, r3, #1
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bbe6:	3b01      	subs	r3, #1
 800bbe8:	b29a      	uxth	r2, r3
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bbf2:	b29b      	uxth	r3, r3
 800bbf4:	3b01      	subs	r3, #1
 800bbf6:	b29a      	uxth	r2, r3
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	695b      	ldr	r3, [r3, #20]
 800bc02:	f003 0304 	and.w	r3, r3, #4
 800bc06:	2b04      	cmp	r3, #4
 800bc08:	d118      	bne.n	800bc3c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	691a      	ldr	r2, [r3, #16]
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc14:	b2d2      	uxtb	r2, r2
 800bc16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc1c:	1c5a      	adds	r2, r3, #1
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc26:	3b01      	subs	r3, #1
 800bc28:	b29a      	uxth	r2, r3
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	3b01      	subs	r3, #1
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	f47f ae94 	bne.w	800b96e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2220      	movs	r2, #32
 800bc4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2200      	movs	r2, #0
 800bc52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	e000      	b.n	800bc64 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800bc62:	2302      	movs	r3, #2
  }
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3728      	adds	r7, #40	@ 0x28
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	00010004 	.word	0x00010004
 800bc70:	20000f74 	.word	0x20000f74
 800bc74:	14f8b589 	.word	0x14f8b589

0800bc78 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc86:	b2db      	uxtb	r3, r3
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	370c      	adds	r7, #12
 800bc8c:	46bd      	mov	sp, r7
 800bc8e:	bc80      	pop	{r7}
 800bc90:	4770      	bx	lr

0800bc92 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800bc92:	b480      	push	{r7}
 800bc94:	b083      	sub	sp, #12
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	370c      	adds	r7, #12
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bc80      	pop	{r7}
 800bca6:	4770      	bx	lr

0800bca8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b088      	sub	sp, #32
 800bcac:	af02      	add	r7, sp, #8
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	607a      	str	r2, [r7, #4]
 800bcb2:	603b      	str	r3, [r7, #0]
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcbc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	2b08      	cmp	r3, #8
 800bcc2:	d006      	beq.n	800bcd2 <I2C_MasterRequestWrite+0x2a>
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d003      	beq.n	800bcd2 <I2C_MasterRequestWrite+0x2a>
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800bcd0:	d108      	bne.n	800bce4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bce0:	601a      	str	r2, [r3, #0]
 800bce2:	e00b      	b.n	800bcfc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bce8:	2b12      	cmp	r3, #18
 800bcea:	d107      	bne.n	800bcfc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bcfa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	9300      	str	r3, [sp, #0]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2200      	movs	r2, #0
 800bd04:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800bd08:	68f8      	ldr	r0, [r7, #12]
 800bd0a:	f000 f9cd 	bl	800c0a8 <I2C_WaitOnFlagUntilTimeout>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d00d      	beq.n	800bd30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd22:	d103      	bne.n	800bd2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bd2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800bd2c:	2303      	movs	r3, #3
 800bd2e:	e035      	b.n	800bd9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	691b      	ldr	r3, [r3, #16]
 800bd34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bd38:	d108      	bne.n	800bd4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bd3a:	897b      	ldrh	r3, [r7, #10]
 800bd3c:	b2db      	uxtb	r3, r3
 800bd3e:	461a      	mov	r2, r3
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800bd48:	611a      	str	r2, [r3, #16]
 800bd4a:	e01b      	b.n	800bd84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800bd4c:	897b      	ldrh	r3, [r7, #10]
 800bd4e:	11db      	asrs	r3, r3, #7
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	f003 0306 	and.w	r3, r3, #6
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	f063 030f 	orn	r3, r3, #15
 800bd5c:	b2da      	uxtb	r2, r3
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	490e      	ldr	r1, [pc, #56]	@ (800bda4 <I2C_MasterRequestWrite+0xfc>)
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	f000 fa16 	bl	800c19c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd70:	4603      	mov	r3, r0
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d001      	beq.n	800bd7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800bd76:	2301      	movs	r3, #1
 800bd78:	e010      	b.n	800bd9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800bd7a:	897b      	ldrh	r3, [r7, #10]
 800bd7c:	b2da      	uxtb	r2, r3
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	687a      	ldr	r2, [r7, #4]
 800bd88:	4907      	ldr	r1, [pc, #28]	@ (800bda8 <I2C_MasterRequestWrite+0x100>)
 800bd8a:	68f8      	ldr	r0, [r7, #12]
 800bd8c:	f000 fa06 	bl	800c19c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bd90:	4603      	mov	r3, r0
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d001      	beq.n	800bd9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800bd96:	2301      	movs	r3, #1
 800bd98:	e000      	b.n	800bd9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800bd9a:	2300      	movs	r3, #0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3718      	adds	r7, #24
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	00010008 	.word	0x00010008
 800bda8:	00010002 	.word	0x00010002

0800bdac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b088      	sub	sp, #32
 800bdb0:	af02      	add	r7, sp, #8
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	4608      	mov	r0, r1
 800bdb6:	4611      	mov	r1, r2
 800bdb8:	461a      	mov	r2, r3
 800bdba:	4603      	mov	r3, r0
 800bdbc:	817b      	strh	r3, [r7, #10]
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	813b      	strh	r3, [r7, #8]
 800bdc2:	4613      	mov	r3, r2
 800bdc4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bdd4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bdd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdd8:	9300      	str	r3, [sp, #0]
 800bdda:	6a3b      	ldr	r3, [r7, #32]
 800bddc:	2200      	movs	r2, #0
 800bdde:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800bde2:	68f8      	ldr	r0, [r7, #12]
 800bde4:	f000 f960 	bl	800c0a8 <I2C_WaitOnFlagUntilTimeout>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00d      	beq.n	800be0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bdf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bdfc:	d103      	bne.n	800be06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800be04:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800be06:	2303      	movs	r3, #3
 800be08:	e05f      	b.n	800beca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800be0a:	897b      	ldrh	r3, [r7, #10]
 800be0c:	b2db      	uxtb	r3, r3
 800be0e:	461a      	mov	r2, r3
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800be18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800be1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be1c:	6a3a      	ldr	r2, [r7, #32]
 800be1e:	492d      	ldr	r1, [pc, #180]	@ (800bed4 <I2C_RequestMemoryWrite+0x128>)
 800be20:	68f8      	ldr	r0, [r7, #12]
 800be22:	f000 f9bb 	bl	800c19c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800be26:	4603      	mov	r3, r0
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d001      	beq.n	800be30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800be2c:	2301      	movs	r3, #1
 800be2e:	e04c      	b.n	800beca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800be30:	2300      	movs	r3, #0
 800be32:	617b      	str	r3, [r7, #20]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	695b      	ldr	r3, [r3, #20]
 800be3a:	617b      	str	r3, [r7, #20]
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	699b      	ldr	r3, [r3, #24]
 800be42:	617b      	str	r3, [r7, #20]
 800be44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be48:	6a39      	ldr	r1, [r7, #32]
 800be4a:	68f8      	ldr	r0, [r7, #12]
 800be4c:	f000 fa46 	bl	800c2dc <I2C_WaitOnTXEFlagUntilTimeout>
 800be50:	4603      	mov	r3, r0
 800be52:	2b00      	cmp	r3, #0
 800be54:	d00d      	beq.n	800be72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be5a:	2b04      	cmp	r3, #4
 800be5c:	d107      	bne.n	800be6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800be6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800be6e:	2301      	movs	r3, #1
 800be70:	e02b      	b.n	800beca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800be72:	88fb      	ldrh	r3, [r7, #6]
 800be74:	2b01      	cmp	r3, #1
 800be76:	d105      	bne.n	800be84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800be78:	893b      	ldrh	r3, [r7, #8]
 800be7a:	b2da      	uxtb	r2, r3
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	611a      	str	r2, [r3, #16]
 800be82:	e021      	b.n	800bec8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800be84:	893b      	ldrh	r3, [r7, #8]
 800be86:	0a1b      	lsrs	r3, r3, #8
 800be88:	b29b      	uxth	r3, r3
 800be8a:	b2da      	uxtb	r2, r3
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800be92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be94:	6a39      	ldr	r1, [r7, #32]
 800be96:	68f8      	ldr	r0, [r7, #12]
 800be98:	f000 fa20 	bl	800c2dc <I2C_WaitOnTXEFlagUntilTimeout>
 800be9c:	4603      	mov	r3, r0
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d00d      	beq.n	800bebe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bea6:	2b04      	cmp	r3, #4
 800bea8:	d107      	bne.n	800beba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	681a      	ldr	r2, [r3, #0]
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800beb8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800beba:	2301      	movs	r3, #1
 800bebc:	e005      	b.n	800beca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bebe:	893b      	ldrh	r3, [r7, #8]
 800bec0:	b2da      	uxtb	r2, r3
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800bec8:	2300      	movs	r3, #0
}
 800beca:	4618      	mov	r0, r3
 800becc:	3718      	adds	r7, #24
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	bf00      	nop
 800bed4:	00010002 	.word	0x00010002

0800bed8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b088      	sub	sp, #32
 800bedc:	af02      	add	r7, sp, #8
 800bede:	60f8      	str	r0, [r7, #12]
 800bee0:	4608      	mov	r0, r1
 800bee2:	4611      	mov	r1, r2
 800bee4:	461a      	mov	r2, r3
 800bee6:	4603      	mov	r3, r0
 800bee8:	817b      	strh	r3, [r7, #10]
 800beea:	460b      	mov	r3, r1
 800beec:	813b      	strh	r3, [r7, #8]
 800beee:	4613      	mov	r3, r2
 800bef0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	681a      	ldr	r2, [r3, #0]
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bf00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	681a      	ldr	r2, [r3, #0]
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800bf10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800bf12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf14:	9300      	str	r3, [sp, #0]
 800bf16:	6a3b      	ldr	r3, [r7, #32]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800bf1e:	68f8      	ldr	r0, [r7, #12]
 800bf20:	f000 f8c2 	bl	800c0a8 <I2C_WaitOnFlagUntilTimeout>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00d      	beq.n	800bf46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf38:	d103      	bne.n	800bf42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800bf42:	2303      	movs	r3, #3
 800bf44:	e0aa      	b.n	800c09c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800bf46:	897b      	ldrh	r3, [r7, #10]
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800bf54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800bf56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf58:	6a3a      	ldr	r2, [r7, #32]
 800bf5a:	4952      	ldr	r1, [pc, #328]	@ (800c0a4 <I2C_RequestMemoryRead+0x1cc>)
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f000 f91d 	bl	800c19c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d001      	beq.n	800bf6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	e097      	b.n	800c09c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	617b      	str	r3, [r7, #20]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	695b      	ldr	r3, [r3, #20]
 800bf76:	617b      	str	r3, [r7, #20]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	699b      	ldr	r3, [r3, #24]
 800bf7e:	617b      	str	r3, [r7, #20]
 800bf80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf84:	6a39      	ldr	r1, [r7, #32]
 800bf86:	68f8      	ldr	r0, [r7, #12]
 800bf88:	f000 f9a8 	bl	800c2dc <I2C_WaitOnTXEFlagUntilTimeout>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d00d      	beq.n	800bfae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf96:	2b04      	cmp	r3, #4
 800bf98:	d107      	bne.n	800bfaa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	681a      	ldr	r2, [r3, #0]
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bfa8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	e076      	b.n	800c09c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bfae:	88fb      	ldrh	r3, [r7, #6]
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d105      	bne.n	800bfc0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bfb4:	893b      	ldrh	r3, [r7, #8]
 800bfb6:	b2da      	uxtb	r2, r3
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	611a      	str	r2, [r3, #16]
 800bfbe:	e021      	b.n	800c004 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800bfc0:	893b      	ldrh	r3, [r7, #8]
 800bfc2:	0a1b      	lsrs	r3, r3, #8
 800bfc4:	b29b      	uxth	r3, r3
 800bfc6:	b2da      	uxtb	r2, r3
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bfce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bfd0:	6a39      	ldr	r1, [r7, #32]
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f000 f982 	bl	800c2dc <I2C_WaitOnTXEFlagUntilTimeout>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d00d      	beq.n	800bffa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bfe2:	2b04      	cmp	r3, #4
 800bfe4:	d107      	bne.n	800bff6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800bff4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800bff6:	2301      	movs	r3, #1
 800bff8:	e050      	b.n	800c09c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800bffa:	893b      	ldrh	r3, [r7, #8]
 800bffc:	b2da      	uxtb	r2, r3
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800c004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c006:	6a39      	ldr	r1, [r7, #32]
 800c008:	68f8      	ldr	r0, [r7, #12]
 800c00a:	f000 f967 	bl	800c2dc <I2C_WaitOnTXEFlagUntilTimeout>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d00d      	beq.n	800c030 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c018:	2b04      	cmp	r3, #4
 800c01a:	d107      	bne.n	800c02c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c02a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800c02c:	2301      	movs	r3, #1
 800c02e:	e035      	b.n	800c09c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	681a      	ldr	r2, [r3, #0]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c03e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800c040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c042:	9300      	str	r3, [sp, #0]
 800c044:	6a3b      	ldr	r3, [r7, #32]
 800c046:	2200      	movs	r2, #0
 800c048:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800c04c:	68f8      	ldr	r0, [r7, #12]
 800c04e:	f000 f82b 	bl	800c0a8 <I2C_WaitOnFlagUntilTimeout>
 800c052:	4603      	mov	r3, r0
 800c054:	2b00      	cmp	r3, #0
 800c056:	d00d      	beq.n	800c074 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c066:	d103      	bne.n	800c070 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c06e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800c070:	2303      	movs	r3, #3
 800c072:	e013      	b.n	800c09c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800c074:	897b      	ldrh	r3, [r7, #10]
 800c076:	b2db      	uxtb	r3, r3
 800c078:	f043 0301 	orr.w	r3, r3, #1
 800c07c:	b2da      	uxtb	r2, r3
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800c084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c086:	6a3a      	ldr	r2, [r7, #32]
 800c088:	4906      	ldr	r1, [pc, #24]	@ (800c0a4 <I2C_RequestMemoryRead+0x1cc>)
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	f000 f886 	bl	800c19c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800c090:	4603      	mov	r3, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d001      	beq.n	800c09a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800c096:	2301      	movs	r3, #1
 800c098:	e000      	b.n	800c09c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3718      	adds	r7, #24
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	00010002 	.word	0x00010002

0800c0a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	603b      	str	r3, [r7, #0]
 800c0b4:	4613      	mov	r3, r2
 800c0b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0b8:	e048      	b.n	800c14c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c0c0:	d044      	beq.n	800c14c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0c2:	f7fe f9e3 	bl	800a48c <HAL_GetTick>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	69bb      	ldr	r3, [r7, #24]
 800c0ca:	1ad3      	subs	r3, r2, r3
 800c0cc:	683a      	ldr	r2, [r7, #0]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d302      	bcc.n	800c0d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d139      	bne.n	800c14c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	0c1b      	lsrs	r3, r3, #16
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d10d      	bne.n	800c0fe <I2C_WaitOnFlagUntilTimeout+0x56>
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	695b      	ldr	r3, [r3, #20]
 800c0e8:	43da      	mvns	r2, r3
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	4013      	ands	r3, r2
 800c0ee:	b29b      	uxth	r3, r3
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	bf0c      	ite	eq
 800c0f4:	2301      	moveq	r3, #1
 800c0f6:	2300      	movne	r3, #0
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	461a      	mov	r2, r3
 800c0fc:	e00c      	b.n	800c118 <I2C_WaitOnFlagUntilTimeout+0x70>
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	699b      	ldr	r3, [r3, #24]
 800c104:	43da      	mvns	r2, r3
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	4013      	ands	r3, r2
 800c10a:	b29b      	uxth	r3, r3
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	bf0c      	ite	eq
 800c110:	2301      	moveq	r3, #1
 800c112:	2300      	movne	r3, #0
 800c114:	b2db      	uxtb	r3, r3
 800c116:	461a      	mov	r2, r3
 800c118:	79fb      	ldrb	r3, [r7, #7]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d116      	bne.n	800c14c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2200      	movs	r2, #0
 800c122:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2220      	movs	r2, #32
 800c128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2200      	movs	r2, #0
 800c130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c138:	f043 0220 	orr.w	r2, r3, #32
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2200      	movs	r2, #0
 800c144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c148:	2301      	movs	r3, #1
 800c14a:	e023      	b.n	800c194 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c14c:	68bb      	ldr	r3, [r7, #8]
 800c14e:	0c1b      	lsrs	r3, r3, #16
 800c150:	b2db      	uxtb	r3, r3
 800c152:	2b01      	cmp	r3, #1
 800c154:	d10d      	bne.n	800c172 <I2C_WaitOnFlagUntilTimeout+0xca>
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	695b      	ldr	r3, [r3, #20]
 800c15c:	43da      	mvns	r2, r3
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	4013      	ands	r3, r2
 800c162:	b29b      	uxth	r3, r3
 800c164:	2b00      	cmp	r3, #0
 800c166:	bf0c      	ite	eq
 800c168:	2301      	moveq	r3, #1
 800c16a:	2300      	movne	r3, #0
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	461a      	mov	r2, r3
 800c170:	e00c      	b.n	800c18c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	699b      	ldr	r3, [r3, #24]
 800c178:	43da      	mvns	r2, r3
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	4013      	ands	r3, r2
 800c17e:	b29b      	uxth	r3, r3
 800c180:	2b00      	cmp	r3, #0
 800c182:	bf0c      	ite	eq
 800c184:	2301      	moveq	r3, #1
 800c186:	2300      	movne	r3, #0
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	461a      	mov	r2, r3
 800c18c:	79fb      	ldrb	r3, [r7, #7]
 800c18e:	429a      	cmp	r2, r3
 800c190:	d093      	beq.n	800c0ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c192:	2300      	movs	r3, #0
}
 800c194:	4618      	mov	r0, r3
 800c196:	3710      	adds	r7, #16
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	60f8      	str	r0, [r7, #12]
 800c1a4:	60b9      	str	r1, [r7, #8]
 800c1a6:	607a      	str	r2, [r7, #4]
 800c1a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c1aa:	e071      	b.n	800c290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	695b      	ldr	r3, [r3, #20]
 800c1b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c1b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1ba:	d123      	bne.n	800c204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c1ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c1d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	2220      	movs	r2, #32
 800c1e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c1f0:	f043 0204 	orr.w	r2, r3, #4
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c200:	2301      	movs	r3, #1
 800c202:	e067      	b.n	800c2d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c20a:	d041      	beq.n	800c290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c20c:	f7fe f93e 	bl	800a48c <HAL_GetTick>
 800c210:	4602      	mov	r2, r0
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	1ad3      	subs	r3, r2, r3
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d302      	bcc.n	800c222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d136      	bne.n	800c290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	0c1b      	lsrs	r3, r3, #16
 800c226:	b2db      	uxtb	r3, r3
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d10c      	bne.n	800c246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	695b      	ldr	r3, [r3, #20]
 800c232:	43da      	mvns	r2, r3
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	4013      	ands	r3, r2
 800c238:	b29b      	uxth	r3, r3
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	bf14      	ite	ne
 800c23e:	2301      	movne	r3, #1
 800c240:	2300      	moveq	r3, #0
 800c242:	b2db      	uxtb	r3, r3
 800c244:	e00b      	b.n	800c25e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	699b      	ldr	r3, [r3, #24]
 800c24c:	43da      	mvns	r2, r3
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	4013      	ands	r3, r2
 800c252:	b29b      	uxth	r3, r3
 800c254:	2b00      	cmp	r3, #0
 800c256:	bf14      	ite	ne
 800c258:	2301      	movne	r3, #1
 800c25a:	2300      	moveq	r3, #0
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d016      	beq.n	800c290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2200      	movs	r2, #0
 800c266:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2220      	movs	r2, #32
 800c26c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	2200      	movs	r2, #0
 800c274:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c27c:	f043 0220 	orr.w	r2, r3, #32
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2200      	movs	r2, #0
 800c288:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c28c:	2301      	movs	r3, #1
 800c28e:	e021      	b.n	800c2d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	0c1b      	lsrs	r3, r3, #16
 800c294:	b2db      	uxtb	r3, r3
 800c296:	2b01      	cmp	r3, #1
 800c298:	d10c      	bne.n	800c2b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	695b      	ldr	r3, [r3, #20]
 800c2a0:	43da      	mvns	r2, r3
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	4013      	ands	r3, r2
 800c2a6:	b29b      	uxth	r3, r3
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	bf14      	ite	ne
 800c2ac:	2301      	movne	r3, #1
 800c2ae:	2300      	moveq	r3, #0
 800c2b0:	b2db      	uxtb	r3, r3
 800c2b2:	e00b      	b.n	800c2cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	699b      	ldr	r3, [r3, #24]
 800c2ba:	43da      	mvns	r2, r3
 800c2bc:	68bb      	ldr	r3, [r7, #8]
 800c2be:	4013      	ands	r3, r2
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	bf14      	ite	ne
 800c2c6:	2301      	movne	r3, #1
 800c2c8:	2300      	moveq	r3, #0
 800c2ca:	b2db      	uxtb	r3, r3
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	f47f af6d 	bne.w	800c1ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800c2d2:	2300      	movs	r3, #0
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3710      	adds	r7, #16
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b084      	sub	sp, #16
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c2e8:	e034      	b.n	800c354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c2ea:	68f8      	ldr	r0, [r7, #12]
 800c2ec:	f000 f8e3 	bl	800c4b6 <I2C_IsAcknowledgeFailed>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d001      	beq.n	800c2fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e034      	b.n	800c364 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c2fa:	68bb      	ldr	r3, [r7, #8]
 800c2fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c300:	d028      	beq.n	800c354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c302:	f7fe f8c3 	bl	800a48c <HAL_GetTick>
 800c306:	4602      	mov	r2, r0
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	1ad3      	subs	r3, r2, r3
 800c30c:	68ba      	ldr	r2, [r7, #8]
 800c30e:	429a      	cmp	r2, r3
 800c310:	d302      	bcc.n	800c318 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d11d      	bne.n	800c354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	695b      	ldr	r3, [r3, #20]
 800c31e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c322:	2b80      	cmp	r3, #128	@ 0x80
 800c324:	d016      	beq.n	800c354 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2200      	movs	r2, #0
 800c32a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2220      	movs	r2, #32
 800c330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2200      	movs	r2, #0
 800c338:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c340:	f043 0220 	orr.w	r2, r3, #32
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2200      	movs	r2, #0
 800c34c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c350:	2301      	movs	r3, #1
 800c352:	e007      	b.n	800c364 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	695b      	ldr	r3, [r3, #20]
 800c35a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c35e:	2b80      	cmp	r3, #128	@ 0x80
 800c360:	d1c3      	bne.n	800c2ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c362:	2300      	movs	r3, #0
}
 800c364:	4618      	mov	r0, r3
 800c366:	3710      	adds	r7, #16
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	60f8      	str	r0, [r7, #12]
 800c374:	60b9      	str	r1, [r7, #8]
 800c376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c378:	e034      	b.n	800c3e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f000 f89b 	bl	800c4b6 <I2C_IsAcknowledgeFailed>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d001      	beq.n	800c38a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800c386:	2301      	movs	r3, #1
 800c388:	e034      	b.n	800c3f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c390:	d028      	beq.n	800c3e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c392:	f7fe f87b 	bl	800a48c <HAL_GetTick>
 800c396:	4602      	mov	r2, r0
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	1ad3      	subs	r3, r2, r3
 800c39c:	68ba      	ldr	r2, [r7, #8]
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d302      	bcc.n	800c3a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d11d      	bne.n	800c3e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	695b      	ldr	r3, [r3, #20]
 800c3ae:	f003 0304 	and.w	r3, r3, #4
 800c3b2:	2b04      	cmp	r3, #4
 800c3b4:	d016      	beq.n	800c3e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	2220      	movs	r2, #32
 800c3c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c3d0:	f043 0220 	orr.w	r2, r3, #32
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800c3e0:	2301      	movs	r3, #1
 800c3e2:	e007      	b.n	800c3f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	695b      	ldr	r3, [r3, #20]
 800c3ea:	f003 0304 	and.w	r3, r3, #4
 800c3ee:	2b04      	cmp	r3, #4
 800c3f0:	d1c3      	bne.n	800c37a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c408:	e049      	b.n	800c49e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	695b      	ldr	r3, [r3, #20]
 800c410:	f003 0310 	and.w	r3, r3, #16
 800c414:	2b10      	cmp	r3, #16
 800c416:	d119      	bne.n	800c44c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f06f 0210 	mvn.w	r2, #16
 800c420:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	2200      	movs	r2, #0
 800c426:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2220      	movs	r2, #32
 800c42c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2200      	movs	r2, #0
 800c434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	2200      	movs	r2, #0
 800c444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800c448:	2301      	movs	r3, #1
 800c44a:	e030      	b.n	800c4ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c44c:	f7fe f81e 	bl	800a48c <HAL_GetTick>
 800c450:	4602      	mov	r2, r0
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	1ad3      	subs	r3, r2, r3
 800c456:	68ba      	ldr	r2, [r7, #8]
 800c458:	429a      	cmp	r2, r3
 800c45a:	d302      	bcc.n	800c462 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d11d      	bne.n	800c49e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	695b      	ldr	r3, [r3, #20]
 800c468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c46c:	2b40      	cmp	r3, #64	@ 0x40
 800c46e:	d016      	beq.n	800c49e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2200      	movs	r2, #0
 800c474:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2220      	movs	r2, #32
 800c47a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	2200      	movs	r2, #0
 800c482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c48a:	f043 0220 	orr.w	r2, r3, #32
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2200      	movs	r2, #0
 800c496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800c49a:	2301      	movs	r3, #1
 800c49c:	e007      	b.n	800c4ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	695b      	ldr	r3, [r3, #20]
 800c4a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c4a8:	2b40      	cmp	r3, #64	@ 0x40
 800c4aa:	d1ae      	bne.n	800c40a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800c4ac:	2300      	movs	r3, #0
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	3710      	adds	r7, #16
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800c4b6:	b480      	push	{r7}
 800c4b8:	b083      	sub	sp, #12
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	695b      	ldr	r3, [r3, #20]
 800c4c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c4c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c4cc:	d11b      	bne.n	800c506 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800c4d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2220      	movs	r2, #32
 800c4e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4f2:	f043 0204 	orr.w	r2, r3, #4
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800c502:	2301      	movs	r3, #1
 800c504:	e000      	b.n	800c508 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800c506:	2300      	movs	r3, #0
}
 800c508:	4618      	mov	r0, r3
 800c50a:	370c      	adds	r7, #12
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bc80      	pop	{r7}
 800c510:	4770      	bx	lr
	...

0800c514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b086      	sub	sp, #24
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d101      	bne.n	800c526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c522:	2301      	movs	r3, #1
 800c524:	e272      	b.n	800ca0c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f003 0301 	and.w	r3, r3, #1
 800c52e:	2b00      	cmp	r3, #0
 800c530:	f000 8087 	beq.w	800c642 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c534:	4b92      	ldr	r3, [pc, #584]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	f003 030c 	and.w	r3, r3, #12
 800c53c:	2b04      	cmp	r3, #4
 800c53e:	d00c      	beq.n	800c55a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800c540:	4b8f      	ldr	r3, [pc, #572]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	f003 030c 	and.w	r3, r3, #12
 800c548:	2b08      	cmp	r3, #8
 800c54a:	d112      	bne.n	800c572 <HAL_RCC_OscConfig+0x5e>
 800c54c:	4b8c      	ldr	r3, [pc, #560]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c54e:	685b      	ldr	r3, [r3, #4]
 800c550:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c558:	d10b      	bne.n	800c572 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c55a:	4b89      	ldr	r3, [pc, #548]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c562:	2b00      	cmp	r3, #0
 800c564:	d06c      	beq.n	800c640 <HAL_RCC_OscConfig+0x12c>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d168      	bne.n	800c640 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800c56e:	2301      	movs	r3, #1
 800c570:	e24c      	b.n	800ca0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c57a:	d106      	bne.n	800c58a <HAL_RCC_OscConfig+0x76>
 800c57c:	4b80      	ldr	r3, [pc, #512]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	4a7f      	ldr	r2, [pc, #508]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c582:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c586:	6013      	str	r3, [r2, #0]
 800c588:	e02e      	b.n	800c5e8 <HAL_RCC_OscConfig+0xd4>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d10c      	bne.n	800c5ac <HAL_RCC_OscConfig+0x98>
 800c592:	4b7b      	ldr	r3, [pc, #492]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4a7a      	ldr	r2, [pc, #488]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c598:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c59c:	6013      	str	r3, [r2, #0]
 800c59e:	4b78      	ldr	r3, [pc, #480]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	4a77      	ldr	r2, [pc, #476]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c5a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c5a8:	6013      	str	r3, [r2, #0]
 800c5aa:	e01d      	b.n	800c5e8 <HAL_RCC_OscConfig+0xd4>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c5b4:	d10c      	bne.n	800c5d0 <HAL_RCC_OscConfig+0xbc>
 800c5b6:	4b72      	ldr	r3, [pc, #456]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4a71      	ldr	r2, [pc, #452]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c5bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c5c0:	6013      	str	r3, [r2, #0]
 800c5c2:	4b6f      	ldr	r3, [pc, #444]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a6e      	ldr	r2, [pc, #440]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c5c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c5cc:	6013      	str	r3, [r2, #0]
 800c5ce:	e00b      	b.n	800c5e8 <HAL_RCC_OscConfig+0xd4>
 800c5d0:	4b6b      	ldr	r3, [pc, #428]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a6a      	ldr	r2, [pc, #424]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c5d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c5da:	6013      	str	r3, [r2, #0]
 800c5dc:	4b68      	ldr	r3, [pc, #416]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	4a67      	ldr	r2, [pc, #412]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c5e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c5e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d013      	beq.n	800c618 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c5f0:	f7fd ff4c 	bl	800a48c <HAL_GetTick>
 800c5f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c5f6:	e008      	b.n	800c60a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c5f8:	f7fd ff48 	bl	800a48c <HAL_GetTick>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	2b64      	cmp	r3, #100	@ 0x64
 800c604:	d901      	bls.n	800c60a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800c606:	2303      	movs	r3, #3
 800c608:	e200      	b.n	800ca0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c60a:	4b5d      	ldr	r3, [pc, #372]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c612:	2b00      	cmp	r3, #0
 800c614:	d0f0      	beq.n	800c5f8 <HAL_RCC_OscConfig+0xe4>
 800c616:	e014      	b.n	800c642 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c618:	f7fd ff38 	bl	800a48c <HAL_GetTick>
 800c61c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c61e:	e008      	b.n	800c632 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c620:	f7fd ff34 	bl	800a48c <HAL_GetTick>
 800c624:	4602      	mov	r2, r0
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	1ad3      	subs	r3, r2, r3
 800c62a:	2b64      	cmp	r3, #100	@ 0x64
 800c62c:	d901      	bls.n	800c632 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800c62e:	2303      	movs	r3, #3
 800c630:	e1ec      	b.n	800ca0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c632:	4b53      	ldr	r3, [pc, #332]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d1f0      	bne.n	800c620 <HAL_RCC_OscConfig+0x10c>
 800c63e:	e000      	b.n	800c642 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f003 0302 	and.w	r3, r3, #2
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d063      	beq.n	800c716 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c64e:	4b4c      	ldr	r3, [pc, #304]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c650:	685b      	ldr	r3, [r3, #4]
 800c652:	f003 030c 	and.w	r3, r3, #12
 800c656:	2b00      	cmp	r3, #0
 800c658:	d00b      	beq.n	800c672 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800c65a:	4b49      	ldr	r3, [pc, #292]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	f003 030c 	and.w	r3, r3, #12
 800c662:	2b08      	cmp	r3, #8
 800c664:	d11c      	bne.n	800c6a0 <HAL_RCC_OscConfig+0x18c>
 800c666:	4b46      	ldr	r3, [pc, #280]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d116      	bne.n	800c6a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c672:	4b43      	ldr	r3, [pc, #268]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f003 0302 	and.w	r3, r3, #2
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d005      	beq.n	800c68a <HAL_RCC_OscConfig+0x176>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	691b      	ldr	r3, [r3, #16]
 800c682:	2b01      	cmp	r3, #1
 800c684:	d001      	beq.n	800c68a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800c686:	2301      	movs	r3, #1
 800c688:	e1c0      	b.n	800ca0c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c68a:	4b3d      	ldr	r3, [pc, #244]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	695b      	ldr	r3, [r3, #20]
 800c696:	00db      	lsls	r3, r3, #3
 800c698:	4939      	ldr	r1, [pc, #228]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c69a:	4313      	orrs	r3, r2
 800c69c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c69e:	e03a      	b.n	800c716 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	691b      	ldr	r3, [r3, #16]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d020      	beq.n	800c6ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c6a8:	4b36      	ldr	r3, [pc, #216]	@ (800c784 <HAL_RCC_OscConfig+0x270>)
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c6ae:	f7fd feed 	bl	800a48c <HAL_GetTick>
 800c6b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c6b4:	e008      	b.n	800c6c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c6b6:	f7fd fee9 	bl	800a48c <HAL_GetTick>
 800c6ba:	4602      	mov	r2, r0
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	1ad3      	subs	r3, r2, r3
 800c6c0:	2b02      	cmp	r3, #2
 800c6c2:	d901      	bls.n	800c6c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800c6c4:	2303      	movs	r3, #3
 800c6c6:	e1a1      	b.n	800ca0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c6c8:	4b2d      	ldr	r3, [pc, #180]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f003 0302 	and.w	r3, r3, #2
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d0f0      	beq.n	800c6b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c6d4:	4b2a      	ldr	r3, [pc, #168]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	695b      	ldr	r3, [r3, #20]
 800c6e0:	00db      	lsls	r3, r3, #3
 800c6e2:	4927      	ldr	r1, [pc, #156]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c6e4:	4313      	orrs	r3, r2
 800c6e6:	600b      	str	r3, [r1, #0]
 800c6e8:	e015      	b.n	800c716 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c6ea:	4b26      	ldr	r3, [pc, #152]	@ (800c784 <HAL_RCC_OscConfig+0x270>)
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c6f0:	f7fd fecc 	bl	800a48c <HAL_GetTick>
 800c6f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c6f6:	e008      	b.n	800c70a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c6f8:	f7fd fec8 	bl	800a48c <HAL_GetTick>
 800c6fc:	4602      	mov	r2, r0
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	1ad3      	subs	r3, r2, r3
 800c702:	2b02      	cmp	r3, #2
 800c704:	d901      	bls.n	800c70a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800c706:	2303      	movs	r3, #3
 800c708:	e180      	b.n	800ca0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c70a:	4b1d      	ldr	r3, [pc, #116]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	f003 0302 	and.w	r3, r3, #2
 800c712:	2b00      	cmp	r3, #0
 800c714:	d1f0      	bne.n	800c6f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	f003 0308 	and.w	r3, r3, #8
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d03a      	beq.n	800c798 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	699b      	ldr	r3, [r3, #24]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d019      	beq.n	800c75e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c72a:	4b17      	ldr	r3, [pc, #92]	@ (800c788 <HAL_RCC_OscConfig+0x274>)
 800c72c:	2201      	movs	r2, #1
 800c72e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c730:	f7fd feac 	bl	800a48c <HAL_GetTick>
 800c734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c736:	e008      	b.n	800c74a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c738:	f7fd fea8 	bl	800a48c <HAL_GetTick>
 800c73c:	4602      	mov	r2, r0
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	1ad3      	subs	r3, r2, r3
 800c742:	2b02      	cmp	r3, #2
 800c744:	d901      	bls.n	800c74a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800c746:	2303      	movs	r3, #3
 800c748:	e160      	b.n	800ca0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c74a:	4b0d      	ldr	r3, [pc, #52]	@ (800c780 <HAL_RCC_OscConfig+0x26c>)
 800c74c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c74e:	f003 0302 	and.w	r3, r3, #2
 800c752:	2b00      	cmp	r3, #0
 800c754:	d0f0      	beq.n	800c738 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800c756:	2001      	movs	r0, #1
 800c758:	f000 face 	bl	800ccf8 <RCC_Delay>
 800c75c:	e01c      	b.n	800c798 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c75e:	4b0a      	ldr	r3, [pc, #40]	@ (800c788 <HAL_RCC_OscConfig+0x274>)
 800c760:	2200      	movs	r2, #0
 800c762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c764:	f7fd fe92 	bl	800a48c <HAL_GetTick>
 800c768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c76a:	e00f      	b.n	800c78c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c76c:	f7fd fe8e 	bl	800a48c <HAL_GetTick>
 800c770:	4602      	mov	r2, r0
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	1ad3      	subs	r3, r2, r3
 800c776:	2b02      	cmp	r3, #2
 800c778:	d908      	bls.n	800c78c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800c77a:	2303      	movs	r3, #3
 800c77c:	e146      	b.n	800ca0c <HAL_RCC_OscConfig+0x4f8>
 800c77e:	bf00      	nop
 800c780:	40021000 	.word	0x40021000
 800c784:	42420000 	.word	0x42420000
 800c788:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c78c:	4b92      	ldr	r3, [pc, #584]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c78e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c790:	f003 0302 	and.w	r3, r3, #2
 800c794:	2b00      	cmp	r3, #0
 800c796:	d1e9      	bne.n	800c76c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f003 0304 	and.w	r3, r3, #4
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	f000 80a6 	beq.w	800c8f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c7aa:	4b8b      	ldr	r3, [pc, #556]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c7ac:	69db      	ldr	r3, [r3, #28]
 800c7ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d10d      	bne.n	800c7d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c7b6:	4b88      	ldr	r3, [pc, #544]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c7b8:	69db      	ldr	r3, [r3, #28]
 800c7ba:	4a87      	ldr	r2, [pc, #540]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c7bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c7c0:	61d3      	str	r3, [r2, #28]
 800c7c2:	4b85      	ldr	r3, [pc, #532]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c7c4:	69db      	ldr	r3, [r3, #28]
 800c7c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c7ca:	60bb      	str	r3, [r7, #8]
 800c7cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c7d2:	4b82      	ldr	r3, [pc, #520]	@ (800c9dc <HAL_RCC_OscConfig+0x4c8>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d118      	bne.n	800c810 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c7de:	4b7f      	ldr	r3, [pc, #508]	@ (800c9dc <HAL_RCC_OscConfig+0x4c8>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	4a7e      	ldr	r2, [pc, #504]	@ (800c9dc <HAL_RCC_OscConfig+0x4c8>)
 800c7e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c7e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c7ea:	f7fd fe4f 	bl	800a48c <HAL_GetTick>
 800c7ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c7f0:	e008      	b.n	800c804 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c7f2:	f7fd fe4b 	bl	800a48c <HAL_GetTick>
 800c7f6:	4602      	mov	r2, r0
 800c7f8:	693b      	ldr	r3, [r7, #16]
 800c7fa:	1ad3      	subs	r3, r2, r3
 800c7fc:	2b64      	cmp	r3, #100	@ 0x64
 800c7fe:	d901      	bls.n	800c804 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800c800:	2303      	movs	r3, #3
 800c802:	e103      	b.n	800ca0c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c804:	4b75      	ldr	r3, [pc, #468]	@ (800c9dc <HAL_RCC_OscConfig+0x4c8>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d0f0      	beq.n	800c7f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	2b01      	cmp	r3, #1
 800c816:	d106      	bne.n	800c826 <HAL_RCC_OscConfig+0x312>
 800c818:	4b6f      	ldr	r3, [pc, #444]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c81a:	6a1b      	ldr	r3, [r3, #32]
 800c81c:	4a6e      	ldr	r2, [pc, #440]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c81e:	f043 0301 	orr.w	r3, r3, #1
 800c822:	6213      	str	r3, [r2, #32]
 800c824:	e02d      	b.n	800c882 <HAL_RCC_OscConfig+0x36e>
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d10c      	bne.n	800c848 <HAL_RCC_OscConfig+0x334>
 800c82e:	4b6a      	ldr	r3, [pc, #424]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c830:	6a1b      	ldr	r3, [r3, #32]
 800c832:	4a69      	ldr	r2, [pc, #420]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c834:	f023 0301 	bic.w	r3, r3, #1
 800c838:	6213      	str	r3, [r2, #32]
 800c83a:	4b67      	ldr	r3, [pc, #412]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c83c:	6a1b      	ldr	r3, [r3, #32]
 800c83e:	4a66      	ldr	r2, [pc, #408]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c840:	f023 0304 	bic.w	r3, r3, #4
 800c844:	6213      	str	r3, [r2, #32]
 800c846:	e01c      	b.n	800c882 <HAL_RCC_OscConfig+0x36e>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	68db      	ldr	r3, [r3, #12]
 800c84c:	2b05      	cmp	r3, #5
 800c84e:	d10c      	bne.n	800c86a <HAL_RCC_OscConfig+0x356>
 800c850:	4b61      	ldr	r3, [pc, #388]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c852:	6a1b      	ldr	r3, [r3, #32]
 800c854:	4a60      	ldr	r2, [pc, #384]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c856:	f043 0304 	orr.w	r3, r3, #4
 800c85a:	6213      	str	r3, [r2, #32]
 800c85c:	4b5e      	ldr	r3, [pc, #376]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c85e:	6a1b      	ldr	r3, [r3, #32]
 800c860:	4a5d      	ldr	r2, [pc, #372]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c862:	f043 0301 	orr.w	r3, r3, #1
 800c866:	6213      	str	r3, [r2, #32]
 800c868:	e00b      	b.n	800c882 <HAL_RCC_OscConfig+0x36e>
 800c86a:	4b5b      	ldr	r3, [pc, #364]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c86c:	6a1b      	ldr	r3, [r3, #32]
 800c86e:	4a5a      	ldr	r2, [pc, #360]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c870:	f023 0301 	bic.w	r3, r3, #1
 800c874:	6213      	str	r3, [r2, #32]
 800c876:	4b58      	ldr	r3, [pc, #352]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c878:	6a1b      	ldr	r3, [r3, #32]
 800c87a:	4a57      	ldr	r2, [pc, #348]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c87c:	f023 0304 	bic.w	r3, r3, #4
 800c880:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d015      	beq.n	800c8b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c88a:	f7fd fdff 	bl	800a48c <HAL_GetTick>
 800c88e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c890:	e00a      	b.n	800c8a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c892:	f7fd fdfb 	bl	800a48c <HAL_GetTick>
 800c896:	4602      	mov	r2, r0
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	1ad3      	subs	r3, r2, r3
 800c89c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d901      	bls.n	800c8a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800c8a4:	2303      	movs	r3, #3
 800c8a6:	e0b1      	b.n	800ca0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c8a8:	4b4b      	ldr	r3, [pc, #300]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c8aa:	6a1b      	ldr	r3, [r3, #32]
 800c8ac:	f003 0302 	and.w	r3, r3, #2
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d0ee      	beq.n	800c892 <HAL_RCC_OscConfig+0x37e>
 800c8b4:	e014      	b.n	800c8e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c8b6:	f7fd fde9 	bl	800a48c <HAL_GetTick>
 800c8ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c8bc:	e00a      	b.n	800c8d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c8be:	f7fd fde5 	bl	800a48c <HAL_GetTick>
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	1ad3      	subs	r3, r2, r3
 800c8c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d901      	bls.n	800c8d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800c8d0:	2303      	movs	r3, #3
 800c8d2:	e09b      	b.n	800ca0c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c8d4:	4b40      	ldr	r3, [pc, #256]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c8d6:	6a1b      	ldr	r3, [r3, #32]
 800c8d8:	f003 0302 	and.w	r3, r3, #2
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d1ee      	bne.n	800c8be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800c8e0:	7dfb      	ldrb	r3, [r7, #23]
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	d105      	bne.n	800c8f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c8e6:	4b3c      	ldr	r3, [pc, #240]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c8e8:	69db      	ldr	r3, [r3, #28]
 800c8ea:	4a3b      	ldr	r2, [pc, #236]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c8ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c8f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	69db      	ldr	r3, [r3, #28]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	f000 8087 	beq.w	800ca0a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c8fc:	4b36      	ldr	r3, [pc, #216]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c8fe:	685b      	ldr	r3, [r3, #4]
 800c900:	f003 030c 	and.w	r3, r3, #12
 800c904:	2b08      	cmp	r3, #8
 800c906:	d061      	beq.n	800c9cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	69db      	ldr	r3, [r3, #28]
 800c90c:	2b02      	cmp	r3, #2
 800c90e:	d146      	bne.n	800c99e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c910:	4b33      	ldr	r3, [pc, #204]	@ (800c9e0 <HAL_RCC_OscConfig+0x4cc>)
 800c912:	2200      	movs	r2, #0
 800c914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c916:	f7fd fdb9 	bl	800a48c <HAL_GetTick>
 800c91a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c91c:	e008      	b.n	800c930 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c91e:	f7fd fdb5 	bl	800a48c <HAL_GetTick>
 800c922:	4602      	mov	r2, r0
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	1ad3      	subs	r3, r2, r3
 800c928:	2b02      	cmp	r3, #2
 800c92a:	d901      	bls.n	800c930 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800c92c:	2303      	movs	r3, #3
 800c92e:	e06d      	b.n	800ca0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c930:	4b29      	ldr	r3, [pc, #164]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d1f0      	bne.n	800c91e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6a1b      	ldr	r3, [r3, #32]
 800c940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c944:	d108      	bne.n	800c958 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800c946:	4b24      	ldr	r3, [pc, #144]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	689b      	ldr	r3, [r3, #8]
 800c952:	4921      	ldr	r1, [pc, #132]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c954:	4313      	orrs	r3, r2
 800c956:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c958:	4b1f      	ldr	r3, [pc, #124]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c95a:	685b      	ldr	r3, [r3, #4]
 800c95c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6a19      	ldr	r1, [r3, #32]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c968:	430b      	orrs	r3, r1
 800c96a:	491b      	ldr	r1, [pc, #108]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c96c:	4313      	orrs	r3, r2
 800c96e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c970:	4b1b      	ldr	r3, [pc, #108]	@ (800c9e0 <HAL_RCC_OscConfig+0x4cc>)
 800c972:	2201      	movs	r2, #1
 800c974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c976:	f7fd fd89 	bl	800a48c <HAL_GetTick>
 800c97a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c97c:	e008      	b.n	800c990 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c97e:	f7fd fd85 	bl	800a48c <HAL_GetTick>
 800c982:	4602      	mov	r2, r0
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	1ad3      	subs	r3, r2, r3
 800c988:	2b02      	cmp	r3, #2
 800c98a:	d901      	bls.n	800c990 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800c98c:	2303      	movs	r3, #3
 800c98e:	e03d      	b.n	800ca0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c990:	4b11      	ldr	r3, [pc, #68]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d0f0      	beq.n	800c97e <HAL_RCC_OscConfig+0x46a>
 800c99c:	e035      	b.n	800ca0a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c99e:	4b10      	ldr	r3, [pc, #64]	@ (800c9e0 <HAL_RCC_OscConfig+0x4cc>)
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c9a4:	f7fd fd72 	bl	800a48c <HAL_GetTick>
 800c9a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c9aa:	e008      	b.n	800c9be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c9ac:	f7fd fd6e 	bl	800a48c <HAL_GetTick>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	1ad3      	subs	r3, r2, r3
 800c9b6:	2b02      	cmp	r3, #2
 800c9b8:	d901      	bls.n	800c9be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800c9ba:	2303      	movs	r3, #3
 800c9bc:	e026      	b.n	800ca0c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c9be:	4b06      	ldr	r3, [pc, #24]	@ (800c9d8 <HAL_RCC_OscConfig+0x4c4>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d1f0      	bne.n	800c9ac <HAL_RCC_OscConfig+0x498>
 800c9ca:	e01e      	b.n	800ca0a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	69db      	ldr	r3, [r3, #28]
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d107      	bne.n	800c9e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	e019      	b.n	800ca0c <HAL_RCC_OscConfig+0x4f8>
 800c9d8:	40021000 	.word	0x40021000
 800c9dc:	40007000 	.word	0x40007000
 800c9e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800c9e4:	4b0b      	ldr	r3, [pc, #44]	@ (800ca14 <HAL_RCC_OscConfig+0x500>)
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6a1b      	ldr	r3, [r3, #32]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d106      	bne.n	800ca06 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca02:	429a      	cmp	r2, r3
 800ca04:	d001      	beq.n	800ca0a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800ca06:	2301      	movs	r3, #1
 800ca08:	e000      	b.n	800ca0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800ca0a:	2300      	movs	r3, #0
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3718      	adds	r7, #24
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	40021000 	.word	0x40021000

0800ca18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b084      	sub	sp, #16
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d101      	bne.n	800ca2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ca28:	2301      	movs	r3, #1
 800ca2a:	e0d0      	b.n	800cbce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ca2c:	4b6a      	ldr	r3, [pc, #424]	@ (800cbd8 <HAL_RCC_ClockConfig+0x1c0>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f003 0307 	and.w	r3, r3, #7
 800ca34:	683a      	ldr	r2, [r7, #0]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d910      	bls.n	800ca5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca3a:	4b67      	ldr	r3, [pc, #412]	@ (800cbd8 <HAL_RCC_ClockConfig+0x1c0>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f023 0207 	bic.w	r2, r3, #7
 800ca42:	4965      	ldr	r1, [pc, #404]	@ (800cbd8 <HAL_RCC_ClockConfig+0x1c0>)
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	4313      	orrs	r3, r2
 800ca48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca4a:	4b63      	ldr	r3, [pc, #396]	@ (800cbd8 <HAL_RCC_ClockConfig+0x1c0>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f003 0307 	and.w	r3, r3, #7
 800ca52:	683a      	ldr	r2, [r7, #0]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d001      	beq.n	800ca5c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	e0b8      	b.n	800cbce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	f003 0302 	and.w	r3, r3, #2
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d020      	beq.n	800caaa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f003 0304 	and.w	r3, r3, #4
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d005      	beq.n	800ca80 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ca74:	4b59      	ldr	r3, [pc, #356]	@ (800cbdc <HAL_RCC_ClockConfig+0x1c4>)
 800ca76:	685b      	ldr	r3, [r3, #4]
 800ca78:	4a58      	ldr	r2, [pc, #352]	@ (800cbdc <HAL_RCC_ClockConfig+0x1c4>)
 800ca7a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800ca7e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f003 0308 	and.w	r3, r3, #8
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d005      	beq.n	800ca98 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ca8c:	4b53      	ldr	r3, [pc, #332]	@ (800cbdc <HAL_RCC_ClockConfig+0x1c4>)
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	4a52      	ldr	r2, [pc, #328]	@ (800cbdc <HAL_RCC_ClockConfig+0x1c4>)
 800ca92:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800ca96:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ca98:	4b50      	ldr	r3, [pc, #320]	@ (800cbdc <HAL_RCC_ClockConfig+0x1c4>)
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	494d      	ldr	r1, [pc, #308]	@ (800cbdc <HAL_RCC_ClockConfig+0x1c4>)
 800caa6:	4313      	orrs	r3, r2
 800caa8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f003 0301 	and.w	r3, r3, #1
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d040      	beq.n	800cb38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	2b01      	cmp	r3, #1
 800cabc:	d107      	bne.n	800cace <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cabe:	4b47      	ldr	r3, [pc, #284]	@ (800cbdc <HAL_RCC_ClockConfig+0x1c4>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d115      	bne.n	800caf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800caca:	2301      	movs	r3, #1
 800cacc:	e07f      	b.n	800cbce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	2b02      	cmp	r3, #2
 800cad4:	d107      	bne.n	800cae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cad6:	4b41      	ldr	r3, [pc, #260]	@ (800cbdc <HAL_RCC_ClockConfig+0x1c4>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d109      	bne.n	800caf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cae2:	2301      	movs	r3, #1
 800cae4:	e073      	b.n	800cbce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cae6:	4b3d      	ldr	r3, [pc, #244]	@ (800cbdc <HAL_RCC_ClockConfig+0x1c4>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f003 0302 	and.w	r3, r3, #2
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d101      	bne.n	800caf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800caf2:	2301      	movs	r3, #1
 800caf4:	e06b      	b.n	800cbce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800caf6:	4b39      	ldr	r3, [pc, #228]	@ (800cbdc <HAL_RCC_ClockConfig+0x1c4>)
 800caf8:	685b      	ldr	r3, [r3, #4]
 800cafa:	f023 0203 	bic.w	r2, r3, #3
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	4936      	ldr	r1, [pc, #216]	@ (800cbdc <HAL_RCC_ClockConfig+0x1c4>)
 800cb04:	4313      	orrs	r3, r2
 800cb06:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cb08:	f7fd fcc0 	bl	800a48c <HAL_GetTick>
 800cb0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb0e:	e00a      	b.n	800cb26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cb10:	f7fd fcbc 	bl	800a48c <HAL_GetTick>
 800cb14:	4602      	mov	r2, r0
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	1ad3      	subs	r3, r2, r3
 800cb1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d901      	bls.n	800cb26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cb22:	2303      	movs	r3, #3
 800cb24:	e053      	b.n	800cbce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cb26:	4b2d      	ldr	r3, [pc, #180]	@ (800cbdc <HAL_RCC_ClockConfig+0x1c4>)
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	f003 020c 	and.w	r2, r3, #12
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	685b      	ldr	r3, [r3, #4]
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	429a      	cmp	r2, r3
 800cb36:	d1eb      	bne.n	800cb10 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cb38:	4b27      	ldr	r3, [pc, #156]	@ (800cbd8 <HAL_RCC_ClockConfig+0x1c0>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f003 0307 	and.w	r3, r3, #7
 800cb40:	683a      	ldr	r2, [r7, #0]
 800cb42:	429a      	cmp	r2, r3
 800cb44:	d210      	bcs.n	800cb68 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cb46:	4b24      	ldr	r3, [pc, #144]	@ (800cbd8 <HAL_RCC_ClockConfig+0x1c0>)
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	f023 0207 	bic.w	r2, r3, #7
 800cb4e:	4922      	ldr	r1, [pc, #136]	@ (800cbd8 <HAL_RCC_ClockConfig+0x1c0>)
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	4313      	orrs	r3, r2
 800cb54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cb56:	4b20      	ldr	r3, [pc, #128]	@ (800cbd8 <HAL_RCC_ClockConfig+0x1c0>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f003 0307 	and.w	r3, r3, #7
 800cb5e:	683a      	ldr	r2, [r7, #0]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d001      	beq.n	800cb68 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800cb64:	2301      	movs	r3, #1
 800cb66:	e032      	b.n	800cbce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f003 0304 	and.w	r3, r3, #4
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d008      	beq.n	800cb86 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cb74:	4b19      	ldr	r3, [pc, #100]	@ (800cbdc <HAL_RCC_ClockConfig+0x1c4>)
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	68db      	ldr	r3, [r3, #12]
 800cb80:	4916      	ldr	r1, [pc, #88]	@ (800cbdc <HAL_RCC_ClockConfig+0x1c4>)
 800cb82:	4313      	orrs	r3, r2
 800cb84:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	f003 0308 	and.w	r3, r3, #8
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d009      	beq.n	800cba6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cb92:	4b12      	ldr	r3, [pc, #72]	@ (800cbdc <HAL_RCC_ClockConfig+0x1c4>)
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	00db      	lsls	r3, r3, #3
 800cba0:	490e      	ldr	r1, [pc, #56]	@ (800cbdc <HAL_RCC_ClockConfig+0x1c4>)
 800cba2:	4313      	orrs	r3, r2
 800cba4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cba6:	f000 f821 	bl	800cbec <HAL_RCC_GetSysClockFreq>
 800cbaa:	4602      	mov	r2, r0
 800cbac:	4b0b      	ldr	r3, [pc, #44]	@ (800cbdc <HAL_RCC_ClockConfig+0x1c4>)
 800cbae:	685b      	ldr	r3, [r3, #4]
 800cbb0:	091b      	lsrs	r3, r3, #4
 800cbb2:	f003 030f 	and.w	r3, r3, #15
 800cbb6:	490a      	ldr	r1, [pc, #40]	@ (800cbe0 <HAL_RCC_ClockConfig+0x1c8>)
 800cbb8:	5ccb      	ldrb	r3, [r1, r3]
 800cbba:	fa22 f303 	lsr.w	r3, r2, r3
 800cbbe:	4a09      	ldr	r2, [pc, #36]	@ (800cbe4 <HAL_RCC_ClockConfig+0x1cc>)
 800cbc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800cbc2:	4b09      	ldr	r3, [pc, #36]	@ (800cbe8 <HAL_RCC_ClockConfig+0x1d0>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	f7fd fc1e 	bl	800a408 <HAL_InitTick>

  return HAL_OK;
 800cbcc:	2300      	movs	r3, #0
}
 800cbce:	4618      	mov	r0, r3
 800cbd0:	3710      	adds	r7, #16
 800cbd2:	46bd      	mov	sp, r7
 800cbd4:	bd80      	pop	{r7, pc}
 800cbd6:	bf00      	nop
 800cbd8:	40022000 	.word	0x40022000
 800cbdc:	40021000 	.word	0x40021000
 800cbe0:	0800e2b8 	.word	0x0800e2b8
 800cbe4:	20000f74 	.word	0x20000f74
 800cbe8:	20000f78 	.word	0x20000f78

0800cbec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b087      	sub	sp, #28
 800cbf0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	60fb      	str	r3, [r7, #12]
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	60bb      	str	r3, [r7, #8]
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	617b      	str	r3, [r7, #20]
 800cbfe:	2300      	movs	r3, #0
 800cc00:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800cc02:	2300      	movs	r3, #0
 800cc04:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800cc06:	4b1e      	ldr	r3, [pc, #120]	@ (800cc80 <HAL_RCC_GetSysClockFreq+0x94>)
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	f003 030c 	and.w	r3, r3, #12
 800cc12:	2b04      	cmp	r3, #4
 800cc14:	d002      	beq.n	800cc1c <HAL_RCC_GetSysClockFreq+0x30>
 800cc16:	2b08      	cmp	r3, #8
 800cc18:	d003      	beq.n	800cc22 <HAL_RCC_GetSysClockFreq+0x36>
 800cc1a:	e027      	b.n	800cc6c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800cc1c:	4b19      	ldr	r3, [pc, #100]	@ (800cc84 <HAL_RCC_GetSysClockFreq+0x98>)
 800cc1e:	613b      	str	r3, [r7, #16]
      break;
 800cc20:	e027      	b.n	800cc72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	0c9b      	lsrs	r3, r3, #18
 800cc26:	f003 030f 	and.w	r3, r3, #15
 800cc2a:	4a17      	ldr	r2, [pc, #92]	@ (800cc88 <HAL_RCC_GetSysClockFreq+0x9c>)
 800cc2c:	5cd3      	ldrb	r3, [r2, r3]
 800cc2e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d010      	beq.n	800cc5c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800cc3a:	4b11      	ldr	r3, [pc, #68]	@ (800cc80 <HAL_RCC_GetSysClockFreq+0x94>)
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	0c5b      	lsrs	r3, r3, #17
 800cc40:	f003 0301 	and.w	r3, r3, #1
 800cc44:	4a11      	ldr	r2, [pc, #68]	@ (800cc8c <HAL_RCC_GetSysClockFreq+0xa0>)
 800cc46:	5cd3      	ldrb	r3, [r2, r3]
 800cc48:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	4a0d      	ldr	r2, [pc, #52]	@ (800cc84 <HAL_RCC_GetSysClockFreq+0x98>)
 800cc4e:	fb03 f202 	mul.w	r2, r3, r2
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc58:	617b      	str	r3, [r7, #20]
 800cc5a:	e004      	b.n	800cc66 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	4a0c      	ldr	r2, [pc, #48]	@ (800cc90 <HAL_RCC_GetSysClockFreq+0xa4>)
 800cc60:	fb02 f303 	mul.w	r3, r2, r3
 800cc64:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	613b      	str	r3, [r7, #16]
      break;
 800cc6a:	e002      	b.n	800cc72 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800cc6c:	4b05      	ldr	r3, [pc, #20]	@ (800cc84 <HAL_RCC_GetSysClockFreq+0x98>)
 800cc6e:	613b      	str	r3, [r7, #16]
      break;
 800cc70:	bf00      	nop
    }
  }
  return sysclockfreq;
 800cc72:	693b      	ldr	r3, [r7, #16]
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	371c      	adds	r7, #28
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bc80      	pop	{r7}
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop
 800cc80:	40021000 	.word	0x40021000
 800cc84:	007a1200 	.word	0x007a1200
 800cc88:	0800e2d0 	.word	0x0800e2d0
 800cc8c:	0800e2e0 	.word	0x0800e2e0
 800cc90:	003d0900 	.word	0x003d0900

0800cc94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cc94:	b480      	push	{r7}
 800cc96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cc98:	4b02      	ldr	r3, [pc, #8]	@ (800cca4 <HAL_RCC_GetHCLKFreq+0x10>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bc80      	pop	{r7}
 800cca2:	4770      	bx	lr
 800cca4:	20000f74 	.word	0x20000f74

0800cca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ccac:	f7ff fff2 	bl	800cc94 <HAL_RCC_GetHCLKFreq>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	4b05      	ldr	r3, [pc, #20]	@ (800ccc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	0a1b      	lsrs	r3, r3, #8
 800ccb8:	f003 0307 	and.w	r3, r3, #7
 800ccbc:	4903      	ldr	r1, [pc, #12]	@ (800cccc <HAL_RCC_GetPCLK1Freq+0x24>)
 800ccbe:	5ccb      	ldrb	r3, [r1, r3]
 800ccc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	40021000 	.word	0x40021000
 800cccc:	0800e2c8 	.word	0x0800e2c8

0800ccd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ccd4:	f7ff ffde 	bl	800cc94 <HAL_RCC_GetHCLKFreq>
 800ccd8:	4602      	mov	r2, r0
 800ccda:	4b05      	ldr	r3, [pc, #20]	@ (800ccf0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	0adb      	lsrs	r3, r3, #11
 800cce0:	f003 0307 	and.w	r3, r3, #7
 800cce4:	4903      	ldr	r1, [pc, #12]	@ (800ccf4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cce6:	5ccb      	ldrb	r3, [r1, r3]
 800cce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	40021000 	.word	0x40021000
 800ccf4:	0800e2c8 	.word	0x0800e2c8

0800ccf8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b085      	sub	sp, #20
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800cd00:	4b0a      	ldr	r3, [pc, #40]	@ (800cd2c <RCC_Delay+0x34>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4a0a      	ldr	r2, [pc, #40]	@ (800cd30 <RCC_Delay+0x38>)
 800cd06:	fba2 2303 	umull	r2, r3, r2, r3
 800cd0a:	0a5b      	lsrs	r3, r3, #9
 800cd0c:	687a      	ldr	r2, [r7, #4]
 800cd0e:	fb02 f303 	mul.w	r3, r2, r3
 800cd12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800cd14:	bf00      	nop
  }
  while (Delay --);
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	1e5a      	subs	r2, r3, #1
 800cd1a:	60fa      	str	r2, [r7, #12]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d1f9      	bne.n	800cd14 <RCC_Delay+0x1c>
}
 800cd20:	bf00      	nop
 800cd22:	bf00      	nop
 800cd24:	3714      	adds	r7, #20
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bc80      	pop	{r7}
 800cd2a:	4770      	bx	lr
 800cd2c:	20000f74 	.word	0x20000f74
 800cd30:	10624dd3 	.word	0x10624dd3

0800cd34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d101      	bne.n	800cd46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cd42:	2301      	movs	r3, #1
 800cd44:	e041      	b.n	800cdca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d106      	bne.n	800cd60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2200      	movs	r2, #0
 800cd56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f7fd fa58 	bl	800a210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2202      	movs	r2, #2
 800cd64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	3304      	adds	r3, #4
 800cd70:	4619      	mov	r1, r3
 800cd72:	4610      	mov	r0, r2
 800cd74:	f000 fa82 	bl	800d27c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2201      	movs	r2, #1
 800cd84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2201      	movs	r2, #1
 800cd94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2201      	movs	r2, #1
 800cda4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2201      	movs	r2, #1
 800cdbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800cdc8:	2300      	movs	r3, #0
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3708      	adds	r7, #8
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
	...

0800cdd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cdd4:	b480      	push	{r7}
 800cdd6:	b085      	sub	sp, #20
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800cde2:	b2db      	uxtb	r3, r3
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d001      	beq.n	800cdec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cde8:	2301      	movs	r3, #1
 800cdea:	e044      	b.n	800ce76 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2202      	movs	r2, #2
 800cdf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	681b      	ldr	r3, [r3, #0]
 800cdf8:	68da      	ldr	r2, [r3, #12]
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f042 0201 	orr.w	r2, r2, #1
 800ce02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	4a1d      	ldr	r2, [pc, #116]	@ (800ce80 <HAL_TIM_Base_Start_IT+0xac>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d018      	beq.n	800ce40 <HAL_TIM_Base_Start_IT+0x6c>
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	4a1c      	ldr	r2, [pc, #112]	@ (800ce84 <HAL_TIM_Base_Start_IT+0xb0>)
 800ce14:	4293      	cmp	r3, r2
 800ce16:	d013      	beq.n	800ce40 <HAL_TIM_Base_Start_IT+0x6c>
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce20:	d00e      	beq.n	800ce40 <HAL_TIM_Base_Start_IT+0x6c>
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	4a18      	ldr	r2, [pc, #96]	@ (800ce88 <HAL_TIM_Base_Start_IT+0xb4>)
 800ce28:	4293      	cmp	r3, r2
 800ce2a:	d009      	beq.n	800ce40 <HAL_TIM_Base_Start_IT+0x6c>
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a16      	ldr	r2, [pc, #88]	@ (800ce8c <HAL_TIM_Base_Start_IT+0xb8>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d004      	beq.n	800ce40 <HAL_TIM_Base_Start_IT+0x6c>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a15      	ldr	r2, [pc, #84]	@ (800ce90 <HAL_TIM_Base_Start_IT+0xbc>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d111      	bne.n	800ce64 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	689b      	ldr	r3, [r3, #8]
 800ce46:	f003 0307 	and.w	r3, r3, #7
 800ce4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2b06      	cmp	r3, #6
 800ce50:	d010      	beq.n	800ce74 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f042 0201 	orr.w	r2, r2, #1
 800ce60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce62:	e007      	b.n	800ce74 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	681a      	ldr	r2, [r3, #0]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f042 0201 	orr.w	r2, r2, #1
 800ce72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ce74:	2300      	movs	r3, #0
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3714      	adds	r7, #20
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bc80      	pop	{r7}
 800ce7e:	4770      	bx	lr
 800ce80:	40012c00 	.word	0x40012c00
 800ce84:	40013400 	.word	0x40013400
 800ce88:	40000400 	.word	0x40000400
 800ce8c:	40000800 	.word	0x40000800
 800ce90:	40000c00 	.word	0x40000c00

0800ce94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	691b      	ldr	r3, [r3, #16]
 800cea2:	f003 0302 	and.w	r3, r3, #2
 800cea6:	2b02      	cmp	r3, #2
 800cea8:	d122      	bne.n	800cef0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	68db      	ldr	r3, [r3, #12]
 800ceb0:	f003 0302 	and.w	r3, r3, #2
 800ceb4:	2b02      	cmp	r3, #2
 800ceb6:	d11b      	bne.n	800cef0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	f06f 0202 	mvn.w	r2, #2
 800cec0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2201      	movs	r2, #1
 800cec6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	699b      	ldr	r3, [r3, #24]
 800cece:	f003 0303 	and.w	r3, r3, #3
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d003      	beq.n	800cede <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 f9b4 	bl	800d244 <HAL_TIM_IC_CaptureCallback>
 800cedc:	e005      	b.n	800ceea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f000 f9a7 	bl	800d232 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f000 f9b6 	bl	800d256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2200      	movs	r2, #0
 800ceee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	691b      	ldr	r3, [r3, #16]
 800cef6:	f003 0304 	and.w	r3, r3, #4
 800cefa:	2b04      	cmp	r3, #4
 800cefc:	d122      	bne.n	800cf44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	68db      	ldr	r3, [r3, #12]
 800cf04:	f003 0304 	and.w	r3, r3, #4
 800cf08:	2b04      	cmp	r3, #4
 800cf0a:	d11b      	bne.n	800cf44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	f06f 0204 	mvn.w	r2, #4
 800cf14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2202      	movs	r2, #2
 800cf1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	699b      	ldr	r3, [r3, #24]
 800cf22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d003      	beq.n	800cf32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf2a:	6878      	ldr	r0, [r7, #4]
 800cf2c:	f000 f98a 	bl	800d244 <HAL_TIM_IC_CaptureCallback>
 800cf30:	e005      	b.n	800cf3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f000 f97d 	bl	800d232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 f98c 	bl	800d256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	2200      	movs	r2, #0
 800cf42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	691b      	ldr	r3, [r3, #16]
 800cf4a:	f003 0308 	and.w	r3, r3, #8
 800cf4e:	2b08      	cmp	r3, #8
 800cf50:	d122      	bne.n	800cf98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	68db      	ldr	r3, [r3, #12]
 800cf58:	f003 0308 	and.w	r3, r3, #8
 800cf5c:	2b08      	cmp	r3, #8
 800cf5e:	d11b      	bne.n	800cf98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f06f 0208 	mvn.w	r2, #8
 800cf68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2204      	movs	r2, #4
 800cf6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	69db      	ldr	r3, [r3, #28]
 800cf76:	f003 0303 	and.w	r3, r3, #3
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d003      	beq.n	800cf86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f000 f960 	bl	800d244 <HAL_TIM_IC_CaptureCallback>
 800cf84:	e005      	b.n	800cf92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 f953 	bl	800d232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f000 f962 	bl	800d256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2200      	movs	r2, #0
 800cf96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	691b      	ldr	r3, [r3, #16]
 800cf9e:	f003 0310 	and.w	r3, r3, #16
 800cfa2:	2b10      	cmp	r3, #16
 800cfa4:	d122      	bne.n	800cfec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	f003 0310 	and.w	r3, r3, #16
 800cfb0:	2b10      	cmp	r3, #16
 800cfb2:	d11b      	bne.n	800cfec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	f06f 0210 	mvn.w	r2, #16
 800cfbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2208      	movs	r2, #8
 800cfc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	69db      	ldr	r3, [r3, #28]
 800cfca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d003      	beq.n	800cfda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	f000 f936 	bl	800d244 <HAL_TIM_IC_CaptureCallback>
 800cfd8:	e005      	b.n	800cfe6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f000 f929 	bl	800d232 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfe0:	6878      	ldr	r0, [r7, #4]
 800cfe2:	f000 f938 	bl	800d256 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	2200      	movs	r2, #0
 800cfea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	691b      	ldr	r3, [r3, #16]
 800cff2:	f003 0301 	and.w	r3, r3, #1
 800cff6:	2b01      	cmp	r3, #1
 800cff8:	d10e      	bne.n	800d018 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	68db      	ldr	r3, [r3, #12]
 800d000:	f003 0301 	and.w	r3, r3, #1
 800d004:	2b01      	cmp	r3, #1
 800d006:	d107      	bne.n	800d018 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f06f 0201 	mvn.w	r2, #1
 800d010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f7fc fd96 	bl	8009b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	691b      	ldr	r3, [r3, #16]
 800d01e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d022:	2b80      	cmp	r3, #128	@ 0x80
 800d024:	d10e      	bne.n	800d044 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	68db      	ldr	r3, [r3, #12]
 800d02c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d030:	2b80      	cmp	r3, #128	@ 0x80
 800d032:	d107      	bne.n	800d044 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800d03c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 faa1 	bl	800d586 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	691b      	ldr	r3, [r3, #16]
 800d04a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d04e:	2b40      	cmp	r3, #64	@ 0x40
 800d050:	d10e      	bne.n	800d070 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	68db      	ldr	r3, [r3, #12]
 800d058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d05c:	2b40      	cmp	r3, #64	@ 0x40
 800d05e:	d107      	bne.n	800d070 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f000 f8fc 	bl	800d268 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	691b      	ldr	r3, [r3, #16]
 800d076:	f003 0320 	and.w	r3, r3, #32
 800d07a:	2b20      	cmp	r3, #32
 800d07c:	d10e      	bne.n	800d09c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	68db      	ldr	r3, [r3, #12]
 800d084:	f003 0320 	and.w	r3, r3, #32
 800d088:	2b20      	cmp	r3, #32
 800d08a:	d107      	bne.n	800d09c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f06f 0220 	mvn.w	r2, #32
 800d094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f000 fa6c 	bl	800d574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d09c:	bf00      	nop
 800d09e:	3708      	adds	r7, #8
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b084      	sub	sp, #16
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d0b8:	2b01      	cmp	r3, #1
 800d0ba:	d101      	bne.n	800d0c0 <HAL_TIM_ConfigClockSource+0x1c>
 800d0bc:	2302      	movs	r3, #2
 800d0be:	e0b4      	b.n	800d22a <HAL_TIM_ConfigClockSource+0x186>
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2202      	movs	r2, #2
 800d0cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	689b      	ldr	r3, [r3, #8]
 800d0d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800d0de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d0e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	68ba      	ldr	r2, [r7, #8]
 800d0ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d0f8:	d03e      	beq.n	800d178 <HAL_TIM_ConfigClockSource+0xd4>
 800d0fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d0fe:	f200 8087 	bhi.w	800d210 <HAL_TIM_ConfigClockSource+0x16c>
 800d102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d106:	f000 8086 	beq.w	800d216 <HAL_TIM_ConfigClockSource+0x172>
 800d10a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d10e:	d87f      	bhi.n	800d210 <HAL_TIM_ConfigClockSource+0x16c>
 800d110:	2b70      	cmp	r3, #112	@ 0x70
 800d112:	d01a      	beq.n	800d14a <HAL_TIM_ConfigClockSource+0xa6>
 800d114:	2b70      	cmp	r3, #112	@ 0x70
 800d116:	d87b      	bhi.n	800d210 <HAL_TIM_ConfigClockSource+0x16c>
 800d118:	2b60      	cmp	r3, #96	@ 0x60
 800d11a:	d050      	beq.n	800d1be <HAL_TIM_ConfigClockSource+0x11a>
 800d11c:	2b60      	cmp	r3, #96	@ 0x60
 800d11e:	d877      	bhi.n	800d210 <HAL_TIM_ConfigClockSource+0x16c>
 800d120:	2b50      	cmp	r3, #80	@ 0x50
 800d122:	d03c      	beq.n	800d19e <HAL_TIM_ConfigClockSource+0xfa>
 800d124:	2b50      	cmp	r3, #80	@ 0x50
 800d126:	d873      	bhi.n	800d210 <HAL_TIM_ConfigClockSource+0x16c>
 800d128:	2b40      	cmp	r3, #64	@ 0x40
 800d12a:	d058      	beq.n	800d1de <HAL_TIM_ConfigClockSource+0x13a>
 800d12c:	2b40      	cmp	r3, #64	@ 0x40
 800d12e:	d86f      	bhi.n	800d210 <HAL_TIM_ConfigClockSource+0x16c>
 800d130:	2b30      	cmp	r3, #48	@ 0x30
 800d132:	d064      	beq.n	800d1fe <HAL_TIM_ConfigClockSource+0x15a>
 800d134:	2b30      	cmp	r3, #48	@ 0x30
 800d136:	d86b      	bhi.n	800d210 <HAL_TIM_ConfigClockSource+0x16c>
 800d138:	2b20      	cmp	r3, #32
 800d13a:	d060      	beq.n	800d1fe <HAL_TIM_ConfigClockSource+0x15a>
 800d13c:	2b20      	cmp	r3, #32
 800d13e:	d867      	bhi.n	800d210 <HAL_TIM_ConfigClockSource+0x16c>
 800d140:	2b00      	cmp	r3, #0
 800d142:	d05c      	beq.n	800d1fe <HAL_TIM_ConfigClockSource+0x15a>
 800d144:	2b10      	cmp	r3, #16
 800d146:	d05a      	beq.n	800d1fe <HAL_TIM_ConfigClockSource+0x15a>
 800d148:	e062      	b.n	800d210 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d15a:	f000 f980 	bl	800d45e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	689b      	ldr	r3, [r3, #8]
 800d164:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800d16c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	68ba      	ldr	r2, [r7, #8]
 800d174:	609a      	str	r2, [r3, #8]
      break;
 800d176:	e04f      	b.n	800d218 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d184:	683b      	ldr	r3, [r7, #0]
 800d186:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d188:	f000 f969 	bl	800d45e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	689a      	ldr	r2, [r3, #8]
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d19a:	609a      	str	r2, [r3, #8]
      break;
 800d19c:	e03c      	b.n	800d218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d1a2:	683b      	ldr	r3, [r7, #0]
 800d1a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d1a6:	683b      	ldr	r3, [r7, #0]
 800d1a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	f000 f8e0 	bl	800d370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	2150      	movs	r1, #80	@ 0x50
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f000 f937 	bl	800d42a <TIM_ITRx_SetConfig>
      break;
 800d1bc:	e02c      	b.n	800d218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	f000 f8fe 	bl	800d3cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	2160      	movs	r1, #96	@ 0x60
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f000 f927 	bl	800d42a <TIM_ITRx_SetConfig>
      break;
 800d1dc:	e01c      	b.n	800d218 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1ea:	461a      	mov	r2, r3
 800d1ec:	f000 f8c0 	bl	800d370 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	2140      	movs	r1, #64	@ 0x40
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f000 f917 	bl	800d42a <TIM_ITRx_SetConfig>
      break;
 800d1fc:	e00c      	b.n	800d218 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681a      	ldr	r2, [r3, #0]
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	4619      	mov	r1, r3
 800d208:	4610      	mov	r0, r2
 800d20a:	f000 f90e 	bl	800d42a <TIM_ITRx_SetConfig>
      break;
 800d20e:	e003      	b.n	800d218 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d210:	2301      	movs	r3, #1
 800d212:	73fb      	strb	r3, [r7, #15]
      break;
 800d214:	e000      	b.n	800d218 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d216:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2201      	movs	r2, #1
 800d21c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2200      	movs	r2, #0
 800d224:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d228:	7bfb      	ldrb	r3, [r7, #15]
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d232:	b480      	push	{r7}
 800d234:	b083      	sub	sp, #12
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d23a:	bf00      	nop
 800d23c:	370c      	adds	r7, #12
 800d23e:	46bd      	mov	sp, r7
 800d240:	bc80      	pop	{r7}
 800d242:	4770      	bx	lr

0800d244 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d24c:	bf00      	nop
 800d24e:	370c      	adds	r7, #12
 800d250:	46bd      	mov	sp, r7
 800d252:	bc80      	pop	{r7}
 800d254:	4770      	bx	lr

0800d256 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d256:	b480      	push	{r7}
 800d258:	b083      	sub	sp, #12
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d25e:	bf00      	nop
 800d260:	370c      	adds	r7, #12
 800d262:	46bd      	mov	sp, r7
 800d264:	bc80      	pop	{r7}
 800d266:	4770      	bx	lr

0800d268 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d270:	bf00      	nop
 800d272:	370c      	adds	r7, #12
 800d274:	46bd      	mov	sp, r7
 800d276:	bc80      	pop	{r7}
 800d278:	4770      	bx	lr
	...

0800d27c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b085      	sub	sp, #20
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	4a33      	ldr	r2, [pc, #204]	@ (800d35c <TIM_Base_SetConfig+0xe0>)
 800d290:	4293      	cmp	r3, r2
 800d292:	d013      	beq.n	800d2bc <TIM_Base_SetConfig+0x40>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	4a32      	ldr	r2, [pc, #200]	@ (800d360 <TIM_Base_SetConfig+0xe4>)
 800d298:	4293      	cmp	r3, r2
 800d29a:	d00f      	beq.n	800d2bc <TIM_Base_SetConfig+0x40>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2a2:	d00b      	beq.n	800d2bc <TIM_Base_SetConfig+0x40>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	4a2f      	ldr	r2, [pc, #188]	@ (800d364 <TIM_Base_SetConfig+0xe8>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d007      	beq.n	800d2bc <TIM_Base_SetConfig+0x40>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	4a2e      	ldr	r2, [pc, #184]	@ (800d368 <TIM_Base_SetConfig+0xec>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d003      	beq.n	800d2bc <TIM_Base_SetConfig+0x40>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	4a2d      	ldr	r2, [pc, #180]	@ (800d36c <TIM_Base_SetConfig+0xf0>)
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d108      	bne.n	800d2ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d2c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	685b      	ldr	r3, [r3, #4]
 800d2c8:	68fa      	ldr	r2, [r7, #12]
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	4a22      	ldr	r2, [pc, #136]	@ (800d35c <TIM_Base_SetConfig+0xe0>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d013      	beq.n	800d2fe <TIM_Base_SetConfig+0x82>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	4a21      	ldr	r2, [pc, #132]	@ (800d360 <TIM_Base_SetConfig+0xe4>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d00f      	beq.n	800d2fe <TIM_Base_SetConfig+0x82>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d2e4:	d00b      	beq.n	800d2fe <TIM_Base_SetConfig+0x82>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	4a1e      	ldr	r2, [pc, #120]	@ (800d364 <TIM_Base_SetConfig+0xe8>)
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d007      	beq.n	800d2fe <TIM_Base_SetConfig+0x82>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	4a1d      	ldr	r2, [pc, #116]	@ (800d368 <TIM_Base_SetConfig+0xec>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d003      	beq.n	800d2fe <TIM_Base_SetConfig+0x82>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	4a1c      	ldr	r2, [pc, #112]	@ (800d36c <TIM_Base_SetConfig+0xf0>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d108      	bne.n	800d310 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d304:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	68db      	ldr	r3, [r3, #12]
 800d30a:	68fa      	ldr	r2, [r7, #12]
 800d30c:	4313      	orrs	r3, r2
 800d30e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	695b      	ldr	r3, [r3, #20]
 800d31a:	4313      	orrs	r3, r2
 800d31c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	68fa      	ldr	r2, [r7, #12]
 800d322:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	689a      	ldr	r2, [r3, #8]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	681a      	ldr	r2, [r3, #0]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	4a09      	ldr	r2, [pc, #36]	@ (800d35c <TIM_Base_SetConfig+0xe0>)
 800d338:	4293      	cmp	r3, r2
 800d33a:	d003      	beq.n	800d344 <TIM_Base_SetConfig+0xc8>
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	4a08      	ldr	r2, [pc, #32]	@ (800d360 <TIM_Base_SetConfig+0xe4>)
 800d340:	4293      	cmp	r3, r2
 800d342:	d103      	bne.n	800d34c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	691a      	ldr	r2, [r3, #16]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2201      	movs	r2, #1
 800d350:	615a      	str	r2, [r3, #20]
}
 800d352:	bf00      	nop
 800d354:	3714      	adds	r7, #20
 800d356:	46bd      	mov	sp, r7
 800d358:	bc80      	pop	{r7}
 800d35a:	4770      	bx	lr
 800d35c:	40012c00 	.word	0x40012c00
 800d360:	40013400 	.word	0x40013400
 800d364:	40000400 	.word	0x40000400
 800d368:	40000800 	.word	0x40000800
 800d36c:	40000c00 	.word	0x40000c00

0800d370 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d370:	b480      	push	{r7}
 800d372:	b087      	sub	sp, #28
 800d374:	af00      	add	r7, sp, #0
 800d376:	60f8      	str	r0, [r7, #12]
 800d378:	60b9      	str	r1, [r7, #8]
 800d37a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	6a1b      	ldr	r3, [r3, #32]
 800d380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	6a1b      	ldr	r3, [r3, #32]
 800d386:	f023 0201 	bic.w	r2, r3, #1
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	699b      	ldr	r3, [r3, #24]
 800d392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d39a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	011b      	lsls	r3, r3, #4
 800d3a0:	693a      	ldr	r2, [r7, #16]
 800d3a2:	4313      	orrs	r3, r2
 800d3a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	f023 030a 	bic.w	r3, r3, #10
 800d3ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d3ae:	697a      	ldr	r2, [r7, #20]
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	4313      	orrs	r3, r2
 800d3b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	693a      	ldr	r2, [r7, #16]
 800d3ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	697a      	ldr	r2, [r7, #20]
 800d3c0:	621a      	str	r2, [r3, #32]
}
 800d3c2:	bf00      	nop
 800d3c4:	371c      	adds	r7, #28
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bc80      	pop	{r7}
 800d3ca:	4770      	bx	lr

0800d3cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b087      	sub	sp, #28
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	60f8      	str	r0, [r7, #12]
 800d3d4:	60b9      	str	r1, [r7, #8]
 800d3d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	6a1b      	ldr	r3, [r3, #32]
 800d3dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	6a1b      	ldr	r3, [r3, #32]
 800d3e2:	f023 0210 	bic.w	r2, r3, #16
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	699b      	ldr	r3, [r3, #24]
 800d3ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d3f0:	693b      	ldr	r3, [r7, #16]
 800d3f2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d3f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	031b      	lsls	r3, r3, #12
 800d3fc:	693a      	ldr	r2, [r7, #16]
 800d3fe:	4313      	orrs	r3, r2
 800d400:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d408:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	011b      	lsls	r3, r3, #4
 800d40e:	697a      	ldr	r2, [r7, #20]
 800d410:	4313      	orrs	r3, r2
 800d412:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	693a      	ldr	r2, [r7, #16]
 800d418:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	697a      	ldr	r2, [r7, #20]
 800d41e:	621a      	str	r2, [r3, #32]
}
 800d420:	bf00      	nop
 800d422:	371c      	adds	r7, #28
 800d424:	46bd      	mov	sp, r7
 800d426:	bc80      	pop	{r7}
 800d428:	4770      	bx	lr

0800d42a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d42a:	b480      	push	{r7}
 800d42c:	b085      	sub	sp, #20
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
 800d432:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	689b      	ldr	r3, [r3, #8]
 800d438:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d440:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d442:	683a      	ldr	r2, [r7, #0]
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	4313      	orrs	r3, r2
 800d448:	f043 0307 	orr.w	r3, r3, #7
 800d44c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	68fa      	ldr	r2, [r7, #12]
 800d452:	609a      	str	r2, [r3, #8]
}
 800d454:	bf00      	nop
 800d456:	3714      	adds	r7, #20
 800d458:	46bd      	mov	sp, r7
 800d45a:	bc80      	pop	{r7}
 800d45c:	4770      	bx	lr

0800d45e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d45e:	b480      	push	{r7}
 800d460:	b087      	sub	sp, #28
 800d462:	af00      	add	r7, sp, #0
 800d464:	60f8      	str	r0, [r7, #12]
 800d466:	60b9      	str	r1, [r7, #8]
 800d468:	607a      	str	r2, [r7, #4]
 800d46a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	689b      	ldr	r3, [r3, #8]
 800d470:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d478:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	021a      	lsls	r2, r3, #8
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	431a      	orrs	r2, r3
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	4313      	orrs	r3, r2
 800d486:	697a      	ldr	r2, [r7, #20]
 800d488:	4313      	orrs	r3, r2
 800d48a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	697a      	ldr	r2, [r7, #20]
 800d490:	609a      	str	r2, [r3, #8]
}
 800d492:	bf00      	nop
 800d494:	371c      	adds	r7, #28
 800d496:	46bd      	mov	sp, r7
 800d498:	bc80      	pop	{r7}
 800d49a:	4770      	bx	lr

0800d49c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b085      	sub	sp, #20
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d101      	bne.n	800d4b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d4b0:	2302      	movs	r3, #2
 800d4b2:	e050      	b.n	800d556 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2202      	movs	r2, #2
 800d4c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	685b      	ldr	r3, [r3, #4]
 800d4ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	689b      	ldr	r3, [r3, #8]
 800d4d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d4da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	68fa      	ldr	r2, [r7, #12]
 800d4e2:	4313      	orrs	r3, r2
 800d4e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	68fa      	ldr	r2, [r7, #12]
 800d4ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	4a1b      	ldr	r2, [pc, #108]	@ (800d560 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d018      	beq.n	800d52a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a19      	ldr	r2, [pc, #100]	@ (800d564 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d4fe:	4293      	cmp	r3, r2
 800d500:	d013      	beq.n	800d52a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d50a:	d00e      	beq.n	800d52a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4a15      	ldr	r2, [pc, #84]	@ (800d568 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d009      	beq.n	800d52a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4a14      	ldr	r2, [pc, #80]	@ (800d56c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d004      	beq.n	800d52a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4a12      	ldr	r2, [pc, #72]	@ (800d570 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d10c      	bne.n	800d544 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d530:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	68ba      	ldr	r2, [r7, #8]
 800d538:	4313      	orrs	r3, r2
 800d53a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	68ba      	ldr	r2, [r7, #8]
 800d542:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2201      	movs	r2, #1
 800d548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2200      	movs	r2, #0
 800d550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d554:	2300      	movs	r3, #0
}
 800d556:	4618      	mov	r0, r3
 800d558:	3714      	adds	r7, #20
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bc80      	pop	{r7}
 800d55e:	4770      	bx	lr
 800d560:	40012c00 	.word	0x40012c00
 800d564:	40013400 	.word	0x40013400
 800d568:	40000400 	.word	0x40000400
 800d56c:	40000800 	.word	0x40000800
 800d570:	40000c00 	.word	0x40000c00

0800d574 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d574:	b480      	push	{r7}
 800d576:	b083      	sub	sp, #12
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d57c:	bf00      	nop
 800d57e:	370c      	adds	r7, #12
 800d580:	46bd      	mov	sp, r7
 800d582:	bc80      	pop	{r7}
 800d584:	4770      	bx	lr

0800d586 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d586:	b480      	push	{r7}
 800d588:	b083      	sub	sp, #12
 800d58a:	af00      	add	r7, sp, #0
 800d58c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d58e:	bf00      	nop
 800d590:	370c      	adds	r7, #12
 800d592:	46bd      	mov	sp, r7
 800d594:	bc80      	pop	{r7}
 800d596:	4770      	bx	lr

0800d598 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b082      	sub	sp, #8
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d101      	bne.n	800d5aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	e042      	b.n	800d630 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d5b0:	b2db      	uxtb	r3, r3
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d106      	bne.n	800d5c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f7fc fe4c 	bl	800a25c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2224      	movs	r2, #36	@ 0x24
 800d5c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	68da      	ldr	r2, [r3, #12]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d5da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f000 fc7f 	bl	800dee0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	691a      	ldr	r2, [r3, #16]
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d5f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	695a      	ldr	r2, [r3, #20]
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d600:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	68da      	ldr	r2, [r3, #12]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d610:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2200      	movs	r2, #0
 800d616:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2220      	movs	r2, #32
 800d61c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2220      	movs	r2, #32
 800d624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2200      	movs	r2, #0
 800d62c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800d62e:	2300      	movs	r3, #0
}
 800d630:	4618      	mov	r0, r3
 800d632:	3708      	adds	r7, #8
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}

0800d638 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b0ba      	sub	sp, #232	@ 0xe8
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	68db      	ldr	r3, [r3, #12]
 800d650:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	695b      	ldr	r3, [r3, #20]
 800d65a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800d65e:	2300      	movs	r3, #0
 800d660:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800d664:	2300      	movs	r3, #0
 800d666:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d66a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d66e:	f003 030f 	and.w	r3, r3, #15
 800d672:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800d676:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d10f      	bne.n	800d69e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d67e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d682:	f003 0320 	and.w	r3, r3, #32
 800d686:	2b00      	cmp	r3, #0
 800d688:	d009      	beq.n	800d69e <HAL_UART_IRQHandler+0x66>
 800d68a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d68e:	f003 0320 	and.w	r3, r3, #32
 800d692:	2b00      	cmp	r3, #0
 800d694:	d003      	beq.n	800d69e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d696:	6878      	ldr	r0, [r7, #4]
 800d698:	f000 fb63 	bl	800dd62 <UART_Receive_IT>
      return;
 800d69c:	e25b      	b.n	800db56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d69e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	f000 80de 	beq.w	800d864 <HAL_UART_IRQHandler+0x22c>
 800d6a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d6ac:	f003 0301 	and.w	r3, r3, #1
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d106      	bne.n	800d6c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d6b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	f000 80d1 	beq.w	800d864 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d6c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6c6:	f003 0301 	and.w	r3, r3, #1
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d00b      	beq.n	800d6e6 <HAL_UART_IRQHandler+0xae>
 800d6ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d6d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d005      	beq.n	800d6e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d6de:	f043 0201 	orr.w	r2, r3, #1
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d6e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d6ea:	f003 0304 	and.w	r3, r3, #4
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d00b      	beq.n	800d70a <HAL_UART_IRQHandler+0xd2>
 800d6f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d6f6:	f003 0301 	and.w	r3, r3, #1
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d005      	beq.n	800d70a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d702:	f043 0202 	orr.w	r2, r3, #2
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d70a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d70e:	f003 0302 	and.w	r3, r3, #2
 800d712:	2b00      	cmp	r3, #0
 800d714:	d00b      	beq.n	800d72e <HAL_UART_IRQHandler+0xf6>
 800d716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d71a:	f003 0301 	and.w	r3, r3, #1
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d005      	beq.n	800d72e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d726:	f043 0204 	orr.w	r2, r3, #4
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d72e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d732:	f003 0308 	and.w	r3, r3, #8
 800d736:	2b00      	cmp	r3, #0
 800d738:	d011      	beq.n	800d75e <HAL_UART_IRQHandler+0x126>
 800d73a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d73e:	f003 0320 	and.w	r3, r3, #32
 800d742:	2b00      	cmp	r3, #0
 800d744:	d105      	bne.n	800d752 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d74a:	f003 0301 	and.w	r3, r3, #1
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d005      	beq.n	800d75e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d756:	f043 0208 	orr.w	r2, r3, #8
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d762:	2b00      	cmp	r3, #0
 800d764:	f000 81f2 	beq.w	800db4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d76c:	f003 0320 	and.w	r3, r3, #32
 800d770:	2b00      	cmp	r3, #0
 800d772:	d008      	beq.n	800d786 <HAL_UART_IRQHandler+0x14e>
 800d774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d778:	f003 0320 	and.w	r3, r3, #32
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d002      	beq.n	800d786 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 faee 	bl	800dd62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	695b      	ldr	r3, [r3, #20]
 800d78c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d790:	2b00      	cmp	r3, #0
 800d792:	bf14      	ite	ne
 800d794:	2301      	movne	r3, #1
 800d796:	2300      	moveq	r3, #0
 800d798:	b2db      	uxtb	r3, r3
 800d79a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7a2:	f003 0308 	and.w	r3, r3, #8
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d103      	bne.n	800d7b2 <HAL_UART_IRQHandler+0x17a>
 800d7aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d04f      	beq.n	800d852 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f000 f9f8 	bl	800dba8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	695b      	ldr	r3, [r3, #20]
 800d7be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d041      	beq.n	800d84a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	3314      	adds	r3, #20
 800d7cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d7d4:	e853 3f00 	ldrex	r3, [r3]
 800d7d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d7dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d7e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	3314      	adds	r3, #20
 800d7ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d7f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d7f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d7fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d802:	e841 2300 	strex	r3, r2, [r1]
 800d806:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d80a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d1d9      	bne.n	800d7c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d816:	2b00      	cmp	r3, #0
 800d818:	d013      	beq.n	800d842 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d81e:	4a7e      	ldr	r2, [pc, #504]	@ (800da18 <HAL_UART_IRQHandler+0x3e0>)
 800d820:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d826:	4618      	mov	r0, r3
 800d828:	f7fd f8a2 	bl	800a970 <HAL_DMA_Abort_IT>
 800d82c:	4603      	mov	r3, r0
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d016      	beq.n	800d860 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d836:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d83c:	4610      	mov	r0, r2
 800d83e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d840:	e00e      	b.n	800d860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f000 f99c 	bl	800db80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d848:	e00a      	b.n	800d860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 f998 	bl	800db80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d850:	e006      	b.n	800d860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f000 f994 	bl	800db80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2200      	movs	r2, #0
 800d85c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800d85e:	e175      	b.n	800db4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d860:	bf00      	nop
    return;
 800d862:	e173      	b.n	800db4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d868:	2b01      	cmp	r3, #1
 800d86a:	f040 814f 	bne.w	800db0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d86e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d872:	f003 0310 	and.w	r3, r3, #16
 800d876:	2b00      	cmp	r3, #0
 800d878:	f000 8148 	beq.w	800db0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d87c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d880:	f003 0310 	and.w	r3, r3, #16
 800d884:	2b00      	cmp	r3, #0
 800d886:	f000 8141 	beq.w	800db0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d88a:	2300      	movs	r3, #0
 800d88c:	60bb      	str	r3, [r7, #8]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	60bb      	str	r3, [r7, #8]
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	685b      	ldr	r3, [r3, #4]
 800d89c:	60bb      	str	r3, [r7, #8]
 800d89e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	695b      	ldr	r3, [r3, #20]
 800d8a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	f000 80b6 	beq.w	800da1c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	685b      	ldr	r3, [r3, #4]
 800d8b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d8bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	f000 8145 	beq.w	800db50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d8ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	f080 813e 	bcs.w	800db50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d8da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d8e0:	699b      	ldr	r3, [r3, #24]
 800d8e2:	2b20      	cmp	r3, #32
 800d8e4:	f000 8088 	beq.w	800d9f8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	330c      	adds	r3, #12
 800d8ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d8f6:	e853 3f00 	ldrex	r3, [r3]
 800d8fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d8fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d902:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d906:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	330c      	adds	r3, #12
 800d910:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d914:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d918:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d91c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d920:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d924:	e841 2300 	strex	r3, r2, [r1]
 800d928:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d92c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d930:	2b00      	cmp	r3, #0
 800d932:	d1d9      	bne.n	800d8e8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	3314      	adds	r3, #20
 800d93a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d93c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d93e:	e853 3f00 	ldrex	r3, [r3]
 800d942:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d944:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d946:	f023 0301 	bic.w	r3, r3, #1
 800d94a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	3314      	adds	r3, #20
 800d954:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d958:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d95c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d95e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d960:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d964:	e841 2300 	strex	r3, r2, [r1]
 800d968:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d96a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d1e1      	bne.n	800d934 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	3314      	adds	r3, #20
 800d976:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d978:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d97a:	e853 3f00 	ldrex	r3, [r3]
 800d97e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d980:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d982:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d986:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	3314      	adds	r3, #20
 800d990:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d994:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d996:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d998:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d99a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d99c:	e841 2300 	strex	r3, r2, [r1]
 800d9a0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d9a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d1e3      	bne.n	800d970 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	2220      	movs	r2, #32
 800d9ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	330c      	adds	r3, #12
 800d9bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d9c0:	e853 3f00 	ldrex	r3, [r3]
 800d9c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d9c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d9c8:	f023 0310 	bic.w	r3, r3, #16
 800d9cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	330c      	adds	r3, #12
 800d9d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d9da:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d9dc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d9e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d9e2:	e841 2300 	strex	r3, r2, [r1]
 800d9e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d9e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d1e3      	bne.n	800d9b6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f7fc ff81 	bl	800a8fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2202      	movs	r2, #2
 800d9fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800da06:	b29b      	uxth	r3, r3
 800da08:	1ad3      	subs	r3, r2, r3
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	4619      	mov	r1, r3
 800da0e:	6878      	ldr	r0, [r7, #4]
 800da10:	f000 f8bf 	bl	800db92 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800da14:	e09c      	b.n	800db50 <HAL_UART_IRQHandler+0x518>
 800da16:	bf00      	nop
 800da18:	0800dc6d 	.word	0x0800dc6d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800da24:	b29b      	uxth	r3, r3
 800da26:	1ad3      	subs	r3, r2, r3
 800da28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800da30:	b29b      	uxth	r3, r3
 800da32:	2b00      	cmp	r3, #0
 800da34:	f000 808e 	beq.w	800db54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800da38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	f000 8089 	beq.w	800db54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	330c      	adds	r3, #12
 800da48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da4c:	e853 3f00 	ldrex	r3, [r3]
 800da50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800da52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800da58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	330c      	adds	r3, #12
 800da62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800da66:	647a      	str	r2, [r7, #68]	@ 0x44
 800da68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800da6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da6e:	e841 2300 	strex	r3, r2, [r1]
 800da72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800da74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da76:	2b00      	cmp	r3, #0
 800da78:	d1e3      	bne.n	800da42 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	3314      	adds	r3, #20
 800da80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da84:	e853 3f00 	ldrex	r3, [r3]
 800da88:	623b      	str	r3, [r7, #32]
   return(result);
 800da8a:	6a3b      	ldr	r3, [r7, #32]
 800da8c:	f023 0301 	bic.w	r3, r3, #1
 800da90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	3314      	adds	r3, #20
 800da9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800da9e:	633a      	str	r2, [r7, #48]	@ 0x30
 800daa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800daa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800daa6:	e841 2300 	strex	r3, r2, [r1]
 800daaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800daac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d1e3      	bne.n	800da7a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	2220      	movs	r2, #32
 800dab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2200      	movs	r2, #0
 800dabe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	330c      	adds	r3, #12
 800dac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	e853 3f00 	ldrex	r3, [r3]
 800dace:	60fb      	str	r3, [r7, #12]
   return(result);
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	f023 0310 	bic.w	r3, r3, #16
 800dad6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	330c      	adds	r3, #12
 800dae0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800dae4:	61fa      	str	r2, [r7, #28]
 800dae6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae8:	69b9      	ldr	r1, [r7, #24]
 800daea:	69fa      	ldr	r2, [r7, #28]
 800daec:	e841 2300 	strex	r3, r2, [r1]
 800daf0:	617b      	str	r3, [r7, #20]
   return(result);
 800daf2:	697b      	ldr	r3, [r7, #20]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d1e3      	bne.n	800dac0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2202      	movs	r2, #2
 800dafc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800dafe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800db02:	4619      	mov	r1, r3
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f000 f844 	bl	800db92 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800db0a:	e023      	b.n	800db54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800db0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db14:	2b00      	cmp	r3, #0
 800db16:	d009      	beq.n	800db2c <HAL_UART_IRQHandler+0x4f4>
 800db18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800db20:	2b00      	cmp	r3, #0
 800db22:	d003      	beq.n	800db2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f000 f8b5 	bl	800dc94 <UART_Transmit_IT>
    return;
 800db2a:	e014      	b.n	800db56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800db2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800db30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db34:	2b00      	cmp	r3, #0
 800db36:	d00e      	beq.n	800db56 <HAL_UART_IRQHandler+0x51e>
 800db38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800db3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db40:	2b00      	cmp	r3, #0
 800db42:	d008      	beq.n	800db56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f000 f8f4 	bl	800dd32 <UART_EndTransmit_IT>
    return;
 800db4a:	e004      	b.n	800db56 <HAL_UART_IRQHandler+0x51e>
    return;
 800db4c:	bf00      	nop
 800db4e:	e002      	b.n	800db56 <HAL_UART_IRQHandler+0x51e>
      return;
 800db50:	bf00      	nop
 800db52:	e000      	b.n	800db56 <HAL_UART_IRQHandler+0x51e>
      return;
 800db54:	bf00      	nop
  }
}
 800db56:	37e8      	adds	r7, #232	@ 0xe8
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b083      	sub	sp, #12
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800db64:	bf00      	nop
 800db66:	370c      	adds	r7, #12
 800db68:	46bd      	mov	sp, r7
 800db6a:	bc80      	pop	{r7}
 800db6c:	4770      	bx	lr

0800db6e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800db6e:	b480      	push	{r7}
 800db70:	b083      	sub	sp, #12
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800db76:	bf00      	nop
 800db78:	370c      	adds	r7, #12
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bc80      	pop	{r7}
 800db7e:	4770      	bx	lr

0800db80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800db80:	b480      	push	{r7}
 800db82:	b083      	sub	sp, #12
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800db88:	bf00      	nop
 800db8a:	370c      	adds	r7, #12
 800db8c:	46bd      	mov	sp, r7
 800db8e:	bc80      	pop	{r7}
 800db90:	4770      	bx	lr

0800db92 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800db92:	b480      	push	{r7}
 800db94:	b083      	sub	sp, #12
 800db96:	af00      	add	r7, sp, #0
 800db98:	6078      	str	r0, [r7, #4]
 800db9a:	460b      	mov	r3, r1
 800db9c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800db9e:	bf00      	nop
 800dba0:	370c      	adds	r7, #12
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bc80      	pop	{r7}
 800dba6:	4770      	bx	lr

0800dba8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dba8:	b480      	push	{r7}
 800dbaa:	b095      	sub	sp, #84	@ 0x54
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	330c      	adds	r3, #12
 800dbb6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbba:	e853 3f00 	ldrex	r3, [r3]
 800dbbe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dbc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbc2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dbc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	330c      	adds	r3, #12
 800dbce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dbd0:	643a      	str	r2, [r7, #64]	@ 0x40
 800dbd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbd4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dbd6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dbd8:	e841 2300 	strex	r3, r2, [r1]
 800dbdc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dbde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d1e5      	bne.n	800dbb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	3314      	adds	r3, #20
 800dbea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbec:	6a3b      	ldr	r3, [r7, #32]
 800dbee:	e853 3f00 	ldrex	r3, [r3]
 800dbf2:	61fb      	str	r3, [r7, #28]
   return(result);
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	f023 0301 	bic.w	r3, r3, #1
 800dbfa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	3314      	adds	r3, #20
 800dc02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dc06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc0c:	e841 2300 	strex	r3, r2, [r1]
 800dc10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dc12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d1e5      	bne.n	800dbe4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d119      	bne.n	800dc54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	330c      	adds	r3, #12
 800dc26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	e853 3f00 	ldrex	r3, [r3]
 800dc2e:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	f023 0310 	bic.w	r3, r3, #16
 800dc36:	647b      	str	r3, [r7, #68]	@ 0x44
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	330c      	adds	r3, #12
 800dc3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dc40:	61ba      	str	r2, [r7, #24]
 800dc42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc44:	6979      	ldr	r1, [r7, #20]
 800dc46:	69ba      	ldr	r2, [r7, #24]
 800dc48:	e841 2300 	strex	r3, r2, [r1]
 800dc4c:	613b      	str	r3, [r7, #16]
   return(result);
 800dc4e:	693b      	ldr	r3, [r7, #16]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d1e5      	bne.n	800dc20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2220      	movs	r2, #32
 800dc58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2200      	movs	r2, #0
 800dc60:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800dc62:	bf00      	nop
 800dc64:	3754      	adds	r7, #84	@ 0x54
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bc80      	pop	{r7}
 800dc6a:	4770      	bx	lr

0800dc6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	2200      	movs	r2, #0
 800dc84:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dc86:	68f8      	ldr	r0, [r7, #12]
 800dc88:	f7ff ff7a 	bl	800db80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc8c:	bf00      	nop
 800dc8e:	3710      	adds	r7, #16
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b085      	sub	sp, #20
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	2b21      	cmp	r3, #33	@ 0x21
 800dca6:	d13e      	bne.n	800dd26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	689b      	ldr	r3, [r3, #8]
 800dcac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dcb0:	d114      	bne.n	800dcdc <UART_Transmit_IT+0x48>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	691b      	ldr	r3, [r3, #16]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d110      	bne.n	800dcdc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	6a1b      	ldr	r3, [r3, #32]
 800dcbe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	881b      	ldrh	r3, [r3, #0]
 800dcc4:	461a      	mov	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dcce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	6a1b      	ldr	r3, [r3, #32]
 800dcd4:	1c9a      	adds	r2, r3, #2
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	621a      	str	r2, [r3, #32]
 800dcda:	e008      	b.n	800dcee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6a1b      	ldr	r3, [r3, #32]
 800dce0:	1c59      	adds	r1, r3, #1
 800dce2:	687a      	ldr	r2, [r7, #4]
 800dce4:	6211      	str	r1, [r2, #32]
 800dce6:	781a      	ldrb	r2, [r3, #0]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800dcf2:	b29b      	uxth	r3, r3
 800dcf4:	3b01      	subs	r3, #1
 800dcf6:	b29b      	uxth	r3, r3
 800dcf8:	687a      	ldr	r2, [r7, #4]
 800dcfa:	4619      	mov	r1, r3
 800dcfc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d10f      	bne.n	800dd22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	68da      	ldr	r2, [r3, #12]
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dd10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	68da      	ldr	r2, [r3, #12]
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dd20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dd22:	2300      	movs	r3, #0
 800dd24:	e000      	b.n	800dd28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800dd26:	2302      	movs	r3, #2
  }
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3714      	adds	r7, #20
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bc80      	pop	{r7}
 800dd30:	4770      	bx	lr

0800dd32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dd32:	b580      	push	{r7, lr}
 800dd34:	b082      	sub	sp, #8
 800dd36:	af00      	add	r7, sp, #0
 800dd38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	68da      	ldr	r2, [r3, #12]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dd48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2220      	movs	r2, #32
 800dd4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dd52:	6878      	ldr	r0, [r7, #4]
 800dd54:	f7ff ff02 	bl	800db5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800dd58:	2300      	movs	r3, #0
}
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	3708      	adds	r7, #8
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	bd80      	pop	{r7, pc}

0800dd62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800dd62:	b580      	push	{r7, lr}
 800dd64:	b08c      	sub	sp, #48	@ 0x30
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dd70:	b2db      	uxtb	r3, r3
 800dd72:	2b22      	cmp	r3, #34	@ 0x22
 800dd74:	f040 80ae 	bne.w	800ded4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	689b      	ldr	r3, [r3, #8]
 800dd7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd80:	d117      	bne.n	800ddb2 <UART_Receive_IT+0x50>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	691b      	ldr	r3, [r3, #16]
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d113      	bne.n	800ddb2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd92:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	b29b      	uxth	r3, r3
 800dd9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dda0:	b29a      	uxth	r2, r3
 800dda2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dda4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddaa:	1c9a      	adds	r2, r3, #2
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	629a      	str	r2, [r3, #40]	@ 0x28
 800ddb0:	e026      	b.n	800de00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ddc4:	d007      	beq.n	800ddd6 <UART_Receive_IT+0x74>
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	689b      	ldr	r3, [r3, #8]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d10a      	bne.n	800dde4 <UART_Receive_IT+0x82>
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	691b      	ldr	r3, [r3, #16]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d106      	bne.n	800dde4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	685b      	ldr	r3, [r3, #4]
 800dddc:	b2da      	uxtb	r2, r3
 800ddde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dde0:	701a      	strb	r2, [r3, #0]
 800dde2:	e008      	b.n	800ddf6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	685b      	ldr	r3, [r3, #4]
 800ddea:	b2db      	uxtb	r3, r3
 800ddec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ddf0:	b2da      	uxtb	r2, r3
 800ddf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddf4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddfa:	1c5a      	adds	r2, r3, #1
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800de04:	b29b      	uxth	r3, r3
 800de06:	3b01      	subs	r3, #1
 800de08:	b29b      	uxth	r3, r3
 800de0a:	687a      	ldr	r2, [r7, #4]
 800de0c:	4619      	mov	r1, r3
 800de0e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800de10:	2b00      	cmp	r3, #0
 800de12:	d15d      	bne.n	800ded0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	68da      	ldr	r2, [r3, #12]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	f022 0220 	bic.w	r2, r2, #32
 800de22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	68da      	ldr	r2, [r3, #12]
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800de32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	695a      	ldr	r2, [r3, #20]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	f022 0201 	bic.w	r2, r2, #1
 800de42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2220      	movs	r2, #32
 800de48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	2200      	movs	r2, #0
 800de50:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de56:	2b01      	cmp	r3, #1
 800de58:	d135      	bne.n	800dec6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2200      	movs	r2, #0
 800de5e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	330c      	adds	r3, #12
 800de66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	e853 3f00 	ldrex	r3, [r3]
 800de6e:	613b      	str	r3, [r7, #16]
   return(result);
 800de70:	693b      	ldr	r3, [r7, #16]
 800de72:	f023 0310 	bic.w	r3, r3, #16
 800de76:	627b      	str	r3, [r7, #36]	@ 0x24
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	330c      	adds	r3, #12
 800de7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de80:	623a      	str	r2, [r7, #32]
 800de82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de84:	69f9      	ldr	r1, [r7, #28]
 800de86:	6a3a      	ldr	r2, [r7, #32]
 800de88:	e841 2300 	strex	r3, r2, [r1]
 800de8c:	61bb      	str	r3, [r7, #24]
   return(result);
 800de8e:	69bb      	ldr	r3, [r7, #24]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d1e5      	bne.n	800de60 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	f003 0310 	and.w	r3, r3, #16
 800de9e:	2b10      	cmp	r3, #16
 800dea0:	d10a      	bne.n	800deb8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dea2:	2300      	movs	r3, #0
 800dea4:	60fb      	str	r3, [r7, #12]
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	60fb      	str	r3, [r7, #12]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	60fb      	str	r3, [r7, #12]
 800deb6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800debc:	4619      	mov	r1, r3
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f7ff fe67 	bl	800db92 <HAL_UARTEx_RxEventCallback>
 800dec4:	e002      	b.n	800decc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f7ff fe51 	bl	800db6e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800decc:	2300      	movs	r3, #0
 800dece:	e002      	b.n	800ded6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ded0:	2300      	movs	r3, #0
 800ded2:	e000      	b.n	800ded6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ded4:	2302      	movs	r3, #2
  }
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3730      	adds	r7, #48	@ 0x30
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}
	...

0800dee0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b084      	sub	sp, #16
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	691b      	ldr	r3, [r3, #16]
 800deee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	68da      	ldr	r2, [r3, #12]
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	430a      	orrs	r2, r1
 800defc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	689a      	ldr	r2, [r3, #8]
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	691b      	ldr	r3, [r3, #16]
 800df06:	431a      	orrs	r2, r3
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	695b      	ldr	r3, [r3, #20]
 800df0c:	4313      	orrs	r3, r2
 800df0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	68db      	ldr	r3, [r3, #12]
 800df16:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800df1a:	f023 030c 	bic.w	r3, r3, #12
 800df1e:	687a      	ldr	r2, [r7, #4]
 800df20:	6812      	ldr	r2, [r2, #0]
 800df22:	68b9      	ldr	r1, [r7, #8]
 800df24:	430b      	orrs	r3, r1
 800df26:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	695b      	ldr	r3, [r3, #20]
 800df2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	699a      	ldr	r2, [r3, #24]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	430a      	orrs	r2, r1
 800df3c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	4a2c      	ldr	r2, [pc, #176]	@ (800dff4 <UART_SetConfig+0x114>)
 800df44:	4293      	cmp	r3, r2
 800df46:	d103      	bne.n	800df50 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800df48:	f7fe fec2 	bl	800ccd0 <HAL_RCC_GetPCLK2Freq>
 800df4c:	60f8      	str	r0, [r7, #12]
 800df4e:	e002      	b.n	800df56 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800df50:	f7fe feaa 	bl	800cca8 <HAL_RCC_GetPCLK1Freq>
 800df54:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800df56:	68fa      	ldr	r2, [r7, #12]
 800df58:	4613      	mov	r3, r2
 800df5a:	009b      	lsls	r3, r3, #2
 800df5c:	4413      	add	r3, r2
 800df5e:	009a      	lsls	r2, r3, #2
 800df60:	441a      	add	r2, r3
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	009b      	lsls	r3, r3, #2
 800df68:	fbb2 f3f3 	udiv	r3, r2, r3
 800df6c:	4a22      	ldr	r2, [pc, #136]	@ (800dff8 <UART_SetConfig+0x118>)
 800df6e:	fba2 2303 	umull	r2, r3, r2, r3
 800df72:	095b      	lsrs	r3, r3, #5
 800df74:	0119      	lsls	r1, r3, #4
 800df76:	68fa      	ldr	r2, [r7, #12]
 800df78:	4613      	mov	r3, r2
 800df7a:	009b      	lsls	r3, r3, #2
 800df7c:	4413      	add	r3, r2
 800df7e:	009a      	lsls	r2, r3, #2
 800df80:	441a      	add	r2, r3
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	009b      	lsls	r3, r3, #2
 800df88:	fbb2 f2f3 	udiv	r2, r2, r3
 800df8c:	4b1a      	ldr	r3, [pc, #104]	@ (800dff8 <UART_SetConfig+0x118>)
 800df8e:	fba3 0302 	umull	r0, r3, r3, r2
 800df92:	095b      	lsrs	r3, r3, #5
 800df94:	2064      	movs	r0, #100	@ 0x64
 800df96:	fb00 f303 	mul.w	r3, r0, r3
 800df9a:	1ad3      	subs	r3, r2, r3
 800df9c:	011b      	lsls	r3, r3, #4
 800df9e:	3332      	adds	r3, #50	@ 0x32
 800dfa0:	4a15      	ldr	r2, [pc, #84]	@ (800dff8 <UART_SetConfig+0x118>)
 800dfa2:	fba2 2303 	umull	r2, r3, r2, r3
 800dfa6:	095b      	lsrs	r3, r3, #5
 800dfa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dfac:	4419      	add	r1, r3
 800dfae:	68fa      	ldr	r2, [r7, #12]
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	009b      	lsls	r3, r3, #2
 800dfb4:	4413      	add	r3, r2
 800dfb6:	009a      	lsls	r2, r3, #2
 800dfb8:	441a      	add	r2, r3
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	009b      	lsls	r3, r3, #2
 800dfc0:	fbb2 f2f3 	udiv	r2, r2, r3
 800dfc4:	4b0c      	ldr	r3, [pc, #48]	@ (800dff8 <UART_SetConfig+0x118>)
 800dfc6:	fba3 0302 	umull	r0, r3, r3, r2
 800dfca:	095b      	lsrs	r3, r3, #5
 800dfcc:	2064      	movs	r0, #100	@ 0x64
 800dfce:	fb00 f303 	mul.w	r3, r0, r3
 800dfd2:	1ad3      	subs	r3, r2, r3
 800dfd4:	011b      	lsls	r3, r3, #4
 800dfd6:	3332      	adds	r3, #50	@ 0x32
 800dfd8:	4a07      	ldr	r2, [pc, #28]	@ (800dff8 <UART_SetConfig+0x118>)
 800dfda:	fba2 2303 	umull	r2, r3, r2, r3
 800dfde:	095b      	lsrs	r3, r3, #5
 800dfe0:	f003 020f 	and.w	r2, r3, #15
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	440a      	add	r2, r1
 800dfea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800dfec:	bf00      	nop
 800dfee:	3710      	adds	r7, #16
 800dff0:	46bd      	mov	sp, r7
 800dff2:	bd80      	pop	{r7, pc}
 800dff4:	40013800 	.word	0x40013800
 800dff8:	51eb851f 	.word	0x51eb851f

0800dffc <__itoa>:
 800dffc:	1e93      	subs	r3, r2, #2
 800dffe:	2b22      	cmp	r3, #34	@ 0x22
 800e000:	b510      	push	{r4, lr}
 800e002:	460c      	mov	r4, r1
 800e004:	d904      	bls.n	800e010 <__itoa+0x14>
 800e006:	2300      	movs	r3, #0
 800e008:	461c      	mov	r4, r3
 800e00a:	700b      	strb	r3, [r1, #0]
 800e00c:	4620      	mov	r0, r4
 800e00e:	bd10      	pop	{r4, pc}
 800e010:	2a0a      	cmp	r2, #10
 800e012:	d109      	bne.n	800e028 <__itoa+0x2c>
 800e014:	2800      	cmp	r0, #0
 800e016:	da07      	bge.n	800e028 <__itoa+0x2c>
 800e018:	232d      	movs	r3, #45	@ 0x2d
 800e01a:	700b      	strb	r3, [r1, #0]
 800e01c:	2101      	movs	r1, #1
 800e01e:	4240      	negs	r0, r0
 800e020:	4421      	add	r1, r4
 800e022:	f000 f805 	bl	800e030 <__utoa>
 800e026:	e7f1      	b.n	800e00c <__itoa+0x10>
 800e028:	2100      	movs	r1, #0
 800e02a:	e7f9      	b.n	800e020 <__itoa+0x24>

0800e02c <itoa>:
 800e02c:	f7ff bfe6 	b.w	800dffc <__itoa>

0800e030 <__utoa>:
 800e030:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e032:	b08b      	sub	sp, #44	@ 0x2c
 800e034:	4605      	mov	r5, r0
 800e036:	460b      	mov	r3, r1
 800e038:	466e      	mov	r6, sp
 800e03a:	4c1d      	ldr	r4, [pc, #116]	@ (800e0b0 <__utoa+0x80>)
 800e03c:	f104 0c20 	add.w	ip, r4, #32
 800e040:	4637      	mov	r7, r6
 800e042:	6820      	ldr	r0, [r4, #0]
 800e044:	6861      	ldr	r1, [r4, #4]
 800e046:	3408      	adds	r4, #8
 800e048:	c703      	stmia	r7!, {r0, r1}
 800e04a:	4564      	cmp	r4, ip
 800e04c:	463e      	mov	r6, r7
 800e04e:	d1f7      	bne.n	800e040 <__utoa+0x10>
 800e050:	7921      	ldrb	r1, [r4, #4]
 800e052:	6820      	ldr	r0, [r4, #0]
 800e054:	7139      	strb	r1, [r7, #4]
 800e056:	1e91      	subs	r1, r2, #2
 800e058:	2922      	cmp	r1, #34	@ 0x22
 800e05a:	6038      	str	r0, [r7, #0]
 800e05c:	f04f 0100 	mov.w	r1, #0
 800e060:	d904      	bls.n	800e06c <__utoa+0x3c>
 800e062:	7019      	strb	r1, [r3, #0]
 800e064:	460b      	mov	r3, r1
 800e066:	4618      	mov	r0, r3
 800e068:	b00b      	add	sp, #44	@ 0x2c
 800e06a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e06c:	1e58      	subs	r0, r3, #1
 800e06e:	4684      	mov	ip, r0
 800e070:	fbb5 f7f2 	udiv	r7, r5, r2
 800e074:	fb02 5617 	mls	r6, r2, r7, r5
 800e078:	3628      	adds	r6, #40	@ 0x28
 800e07a:	446e      	add	r6, sp
 800e07c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800e080:	460c      	mov	r4, r1
 800e082:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800e086:	462e      	mov	r6, r5
 800e088:	42b2      	cmp	r2, r6
 800e08a:	463d      	mov	r5, r7
 800e08c:	f101 0101 	add.w	r1, r1, #1
 800e090:	d9ee      	bls.n	800e070 <__utoa+0x40>
 800e092:	2200      	movs	r2, #0
 800e094:	545a      	strb	r2, [r3, r1]
 800e096:	1919      	adds	r1, r3, r4
 800e098:	1aa5      	subs	r5, r4, r2
 800e09a:	42aa      	cmp	r2, r5
 800e09c:	dae3      	bge.n	800e066 <__utoa+0x36>
 800e09e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800e0a2:	780e      	ldrb	r6, [r1, #0]
 800e0a4:	3201      	adds	r2, #1
 800e0a6:	7006      	strb	r6, [r0, #0]
 800e0a8:	f801 5901 	strb.w	r5, [r1], #-1
 800e0ac:	e7f4      	b.n	800e098 <__utoa+0x68>
 800e0ae:	bf00      	nop
 800e0b0:	0800e2e2 	.word	0x0800e2e2

0800e0b4 <memset>:
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	4402      	add	r2, r0
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	d100      	bne.n	800e0be <memset+0xa>
 800e0bc:	4770      	bx	lr
 800e0be:	f803 1b01 	strb.w	r1, [r3], #1
 800e0c2:	e7f9      	b.n	800e0b8 <memset+0x4>

0800e0c4 <__libc_init_array>:
 800e0c4:	b570      	push	{r4, r5, r6, lr}
 800e0c6:	2600      	movs	r6, #0
 800e0c8:	4d0c      	ldr	r5, [pc, #48]	@ (800e0fc <__libc_init_array+0x38>)
 800e0ca:	4c0d      	ldr	r4, [pc, #52]	@ (800e100 <__libc_init_array+0x3c>)
 800e0cc:	1b64      	subs	r4, r4, r5
 800e0ce:	10a4      	asrs	r4, r4, #2
 800e0d0:	42a6      	cmp	r6, r4
 800e0d2:	d109      	bne.n	800e0e8 <__libc_init_array+0x24>
 800e0d4:	f000 f81a 	bl	800e10c <_init>
 800e0d8:	2600      	movs	r6, #0
 800e0da:	4d0a      	ldr	r5, [pc, #40]	@ (800e104 <__libc_init_array+0x40>)
 800e0dc:	4c0a      	ldr	r4, [pc, #40]	@ (800e108 <__libc_init_array+0x44>)
 800e0de:	1b64      	subs	r4, r4, r5
 800e0e0:	10a4      	asrs	r4, r4, #2
 800e0e2:	42a6      	cmp	r6, r4
 800e0e4:	d105      	bne.n	800e0f2 <__libc_init_array+0x2e>
 800e0e6:	bd70      	pop	{r4, r5, r6, pc}
 800e0e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0ec:	4798      	blx	r3
 800e0ee:	3601      	adds	r6, #1
 800e0f0:	e7ee      	b.n	800e0d0 <__libc_init_array+0xc>
 800e0f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0f6:	4798      	blx	r3
 800e0f8:	3601      	adds	r6, #1
 800e0fa:	e7f2      	b.n	800e0e2 <__libc_init_array+0x1e>
 800e0fc:	0800e310 	.word	0x0800e310
 800e100:	0800e310 	.word	0x0800e310
 800e104:	0800e310 	.word	0x0800e310
 800e108:	0800e314 	.word	0x0800e314

0800e10c <_init>:
 800e10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e10e:	bf00      	nop
 800e110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e112:	bc08      	pop	{r3}
 800e114:	469e      	mov	lr, r3
 800e116:	4770      	bx	lr

0800e118 <_fini>:
 800e118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e11a:	bf00      	nop
 800e11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e11e:	bc08      	pop	{r3}
 800e120:	469e      	mov	lr, r3
 800e122:	4770      	bx	lr
