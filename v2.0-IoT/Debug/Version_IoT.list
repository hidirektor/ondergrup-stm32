
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e70c  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bac  0800e8f0  0800e8f0  0000f8f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f49c  0800f49c  00011fd0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f49c  0800f49c  0001049c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f4a4  0800f4a4  00011fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4a4  0800f4a4  000104a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f4a8  0800f4a8  000104a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fd0  20000000  0800f4ac  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba0  20000fd0  0801047c  00011fd0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b70  0801047c  00012b70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011fd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019176  00000000  00000000  00011ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037a8  00000000  00000000  0002b16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  0002e918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000edc  00000000  00000000  0002fc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8ae  00000000  00000000  00030b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d6a6  00000000  00000000  0004d3e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0609  00000000  00000000  0006aa88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b091  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e8  00000000  00000000  0010b0d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001105bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fd0 	.word	0x20000fd0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800e8d8 	.word	0x0800e8d8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fd4 	.word	0x20000fd4
 8000220:	0800e8d8 	.word	0x0800e8d8

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "EEPROMProcess.h"
#include "main.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	EEPROM_Read(0, 0, eepromData, 110);
 8000238:	236e      	movs	r3, #110	@ 0x6e
 800023a:	4a9b      	ldr	r2, [pc, #620]	@ (80004a8 <eepromKontrol+0x274>)
 800023c:	2100      	movs	r1, #0
 800023e:	2000      	movs	r0, #0
 8000240:	f000 fac2 	bl	80007c8 <EEPROM_Read>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	setupCompleted = eepromData[0];
 8000244:	4b98      	ldr	r3, [pc, #608]	@ (80004a8 <eepromKontrol+0x274>)
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	4b98      	ldr	r3, [pc, #608]	@ (80004ac <eepromKontrol+0x278>)
 800024a:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 800024c:	4b96      	ldr	r3, [pc, #600]	@ (80004a8 <eepromKontrol+0x274>)
 800024e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8000252:	4b97      	ldr	r3, [pc, #604]	@ (80004b0 <eepromKontrol+0x27c>)
 8000254:	701a      	strb	r2, [r3, #0]

	kaydedilenDeger = eepromData[3];
 8000256:	4b94      	ldr	r3, [pc, #592]	@ (80004a8 <eepromKontrol+0x274>)
 8000258:	78da      	ldrb	r2, [r3, #3]
 800025a:	4b96      	ldr	r3, [pc, #600]	@ (80004b4 <eepromKontrol+0x280>)
 800025c:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 800025e:	4b92      	ldr	r3, [pc, #584]	@ (80004a8 <eepromKontrol+0x274>)
 8000260:	785a      	ldrb	r2, [r3, #1]
 8000262:	4b95      	ldr	r3, [pc, #596]	@ (80004b8 <eepromKontrol+0x284>)
 8000264:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8000266:	4b90      	ldr	r3, [pc, #576]	@ (80004a8 <eepromKontrol+0x274>)
 8000268:	789a      	ldrb	r2, [r3, #2]
 800026a:	4b94      	ldr	r3, [pc, #592]	@ (80004bc <eepromKontrol+0x288>)
 800026c:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 800026e:	4b8e      	ldr	r3, [pc, #568]	@ (80004a8 <eepromKontrol+0x274>)
 8000270:	791a      	ldrb	r2, [r3, #4]
 8000272:	4b93      	ldr	r3, [pc, #588]	@ (80004c0 <eepromKontrol+0x28c>)
 8000274:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8000276:	4b8c      	ldr	r3, [pc, #560]	@ (80004a8 <eepromKontrol+0x274>)
 8000278:	795a      	ldrb	r2, [r3, #5]
 800027a:	4b92      	ldr	r3, [pc, #584]	@ (80004c4 <eepromKontrol+0x290>)
 800027c:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 800027e:	4b8a      	ldr	r3, [pc, #552]	@ (80004a8 <eepromKontrol+0x274>)
 8000280:	799a      	ldrb	r2, [r3, #6]
 8000282:	4b91      	ldr	r3, [pc, #580]	@ (80004c8 <eepromKontrol+0x294>)
 8000284:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8000286:	4b88      	ldr	r3, [pc, #544]	@ (80004a8 <eepromKontrol+0x274>)
 8000288:	79da      	ldrb	r2, [r3, #7]
 800028a:	4b90      	ldr	r3, [pc, #576]	@ (80004cc <eepromKontrol+0x298>)
 800028c:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 800028e:	4b86      	ldr	r3, [pc, #536]	@ (80004a8 <eepromKontrol+0x274>)
 8000290:	7a1a      	ldrb	r2, [r3, #8]
 8000292:	4b8f      	ldr	r3, [pc, #572]	@ (80004d0 <eepromKontrol+0x29c>)
 8000294:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8000296:	4b84      	ldr	r3, [pc, #528]	@ (80004a8 <eepromKontrol+0x274>)
 8000298:	7a5a      	ldrb	r2, [r3, #9]
 800029a:	4b8e      	ldr	r3, [pc, #568]	@ (80004d4 <eepromKontrol+0x2a0>)
 800029c:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 800029e:	4b82      	ldr	r3, [pc, #520]	@ (80004a8 <eepromKontrol+0x274>)
 80002a0:	7a9a      	ldrb	r2, [r3, #10]
 80002a2:	4b8d      	ldr	r3, [pc, #564]	@ (80004d8 <eepromKontrol+0x2a4>)
 80002a4:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002a6:	4b80      	ldr	r3, [pc, #512]	@ (80004a8 <eepromKontrol+0x274>)
 80002a8:	7ada      	ldrb	r2, [r3, #11]
 80002aa:	4b8c      	ldr	r3, [pc, #560]	@ (80004dc <eepromKontrol+0x2a8>)
 80002ac:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002ae:	4b7e      	ldr	r3, [pc, #504]	@ (80004a8 <eepromKontrol+0x274>)
 80002b0:	7b1a      	ldrb	r2, [r3, #12]
 80002b2:	4b8b      	ldr	r3, [pc, #556]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002b4:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002b6:	4b7c      	ldr	r3, [pc, #496]	@ (80004a8 <eepromKontrol+0x274>)
 80002b8:	7b5a      	ldrb	r2, [r3, #13]
 80002ba:	4b8a      	ldr	r3, [pc, #552]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002bc:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002be:	4b7a      	ldr	r3, [pc, #488]	@ (80004a8 <eepromKontrol+0x274>)
 80002c0:	7b9a      	ldrb	r2, [r3, #14]
 80002c2:	4b89      	ldr	r3, [pc, #548]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002c4:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002c6:	4b78      	ldr	r3, [pc, #480]	@ (80004a8 <eepromKontrol+0x274>)
 80002c8:	7bda      	ldrb	r2, [r3, #15]
 80002ca:	4b88      	ldr	r3, [pc, #544]	@ (80004ec <eepromKontrol+0x2b8>)
 80002cc:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002ce:	4b76      	ldr	r3, [pc, #472]	@ (80004a8 <eepromKontrol+0x274>)
 80002d0:	7c1a      	ldrb	r2, [r3, #16]
 80002d2:	4b87      	ldr	r3, [pc, #540]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002d4:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002d6:	4b74      	ldr	r3, [pc, #464]	@ (80004a8 <eepromKontrol+0x274>)
 80002d8:	7c5a      	ldrb	r2, [r3, #17]
 80002da:	4b86      	ldr	r3, [pc, #536]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002dc:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002de:	4b72      	ldr	r3, [pc, #456]	@ (80004a8 <eepromKontrol+0x274>)
 80002e0:	7c9a      	ldrb	r2, [r3, #18]
 80002e2:	4b85      	ldr	r3, [pc, #532]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002e4:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002e6:	4b70      	ldr	r3, [pc, #448]	@ (80004a8 <eepromKontrol+0x274>)
 80002e8:	7cda      	ldrb	r2, [r3, #19]
 80002ea:	4b84      	ldr	r3, [pc, #528]	@ (80004fc <eepromKontrol+0x2c8>)
 80002ec:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002ee:	4b6e      	ldr	r3, [pc, #440]	@ (80004a8 <eepromKontrol+0x274>)
 80002f0:	7d1a      	ldrb	r2, [r3, #20]
 80002f2:	4b83      	ldr	r3, [pc, #524]	@ (8000500 <eepromKontrol+0x2cc>)
 80002f4:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002f6:	4b6c      	ldr	r3, [pc, #432]	@ (80004a8 <eepromKontrol+0x274>)
 80002f8:	7d5a      	ldrb	r2, [r3, #21]
 80002fa:	4b82      	ldr	r3, [pc, #520]	@ (8000504 <eepromKontrol+0x2d0>)
 80002fc:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 80002fe:	4b6a      	ldr	r3, [pc, #424]	@ (80004a8 <eepromKontrol+0x274>)
 8000300:	7d9a      	ldrb	r2, [r3, #22]
 8000302:	4b81      	ldr	r3, [pc, #516]	@ (8000508 <eepromKontrol+0x2d4>)
 8000304:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8000306:	4b68      	ldr	r3, [pc, #416]	@ (80004a8 <eepromKontrol+0x274>)
 8000308:	7dda      	ldrb	r2, [r3, #23]
 800030a:	4b80      	ldr	r3, [pc, #512]	@ (800050c <eepromKontrol+0x2d8>)
 800030c:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 800030e:	4b66      	ldr	r3, [pc, #408]	@ (80004a8 <eepromKontrol+0x274>)
 8000310:	7e1a      	ldrb	r2, [r3, #24]
 8000312:	4b7f      	ldr	r3, [pc, #508]	@ (8000510 <eepromKontrol+0x2dc>)
 8000314:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8000316:	4b64      	ldr	r3, [pc, #400]	@ (80004a8 <eepromKontrol+0x274>)
 8000318:	7e5a      	ldrb	r2, [r3, #25]
 800031a:	4b7e      	ldr	r3, [pc, #504]	@ (8000514 <eepromKontrol+0x2e0>)
 800031c:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 800031e:	4b62      	ldr	r3, [pc, #392]	@ (80004a8 <eepromKontrol+0x274>)
 8000320:	7e9a      	ldrb	r2, [r3, #26]
 8000322:	4b7d      	ldr	r3, [pc, #500]	@ (8000518 <eepromKontrol+0x2e4>)
 8000324:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8000326:	4b60      	ldr	r3, [pc, #384]	@ (80004a8 <eepromKontrol+0x274>)
 8000328:	7eda      	ldrb	r2, [r3, #27]
 800032a:	4b7c      	ldr	r3, [pc, #496]	@ (800051c <eepromKontrol+0x2e8>)
 800032c:	701a      	strb	r2, [r3, #0]
	calismaSayisiDemo = eepromData[28];
 800032e:	4b5e      	ldr	r3, [pc, #376]	@ (80004a8 <eepromKontrol+0x274>)
 8000330:	7f1a      	ldrb	r2, [r3, #28]
 8000332:	4b7b      	ldr	r3, [pc, #492]	@ (8000520 <eepromKontrol+0x2ec>)
 8000334:	701a      	strb	r2, [r3, #0]
	calismaCount = eepromData[29];
 8000336:	4b5c      	ldr	r3, [pc, #368]	@ (80004a8 <eepromKontrol+0x274>)
 8000338:	7f5a      	ldrb	r2, [r3, #29]
 800033a:	4b7a      	ldr	r3, [pc, #488]	@ (8000524 <eepromKontrol+0x2f0>)
 800033c:	701a      	strb	r2, [r3, #0]
	calismaCountDemo = eepromData[30];
 800033e:	4b5a      	ldr	r3, [pc, #360]	@ (80004a8 <eepromKontrol+0x274>)
 8000340:	7f9a      	ldrb	r2, [r3, #30]
 8000342:	4b79      	ldr	r3, [pc, #484]	@ (8000528 <eepromKontrol+0x2f4>)
 8000344:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8000346:	4b58      	ldr	r3, [pc, #352]	@ (80004a8 <eepromKontrol+0x274>)
 8000348:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800034c:	4b77      	ldr	r3, [pc, #476]	@ (800052c <eepromKontrol+0x2f8>)
 800034e:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000350:	4b55      	ldr	r3, [pc, #340]	@ (80004a8 <eepromKontrol+0x274>)
 8000352:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000356:	4b76      	ldr	r3, [pc, #472]	@ (8000530 <eepromKontrol+0x2fc>)
 8000358:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800035a:	4b53      	ldr	r3, [pc, #332]	@ (80004a8 <eepromKontrol+0x274>)
 800035c:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000360:	4b74      	ldr	r3, [pc, #464]	@ (8000534 <eepromKontrol+0x300>)
 8000362:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000364:	4b50      	ldr	r3, [pc, #320]	@ (80004a8 <eepromKontrol+0x274>)
 8000366:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800036a:	4b73      	ldr	r3, [pc, #460]	@ (8000538 <eepromKontrol+0x304>)
 800036c:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 800036e:	4b4e      	ldr	r3, [pc, #312]	@ (80004a8 <eepromKontrol+0x274>)
 8000370:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000374:	4b71      	ldr	r3, [pc, #452]	@ (800053c <eepromKontrol+0x308>)
 8000376:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8000378:	4b4b      	ldr	r3, [pc, #300]	@ (80004a8 <eepromKontrol+0x274>)
 800037a:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800037e:	4b70      	ldr	r3, [pc, #448]	@ (8000540 <eepromKontrol+0x30c>)
 8000380:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8000382:	4b49      	ldr	r3, [pc, #292]	@ (80004a8 <eepromKontrol+0x274>)
 8000384:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8000388:	4b6e      	ldr	r3, [pc, #440]	@ (8000544 <eepromKontrol+0x310>)
 800038a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 800038c:	4b46      	ldr	r3, [pc, #280]	@ (80004a8 <eepromKontrol+0x274>)
 800038e:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8000392:	4b6d      	ldr	r3, [pc, #436]	@ (8000548 <eepromKontrol+0x314>)
 8000394:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8000396:	4b44      	ldr	r3, [pc, #272]	@ (80004a8 <eepromKontrol+0x274>)
 8000398:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800039c:	4b6b      	ldr	r3, [pc, #428]	@ (800054c <eepromKontrol+0x318>)
 800039e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003a0:	4b41      	ldr	r3, [pc, #260]	@ (80004a8 <eepromKontrol+0x274>)
 80003a2:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003a6:	4b6a      	ldr	r3, [pc, #424]	@ (8000550 <eepromKontrol+0x31c>)
 80003a8:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003aa:	4b3f      	ldr	r3, [pc, #252]	@ (80004a8 <eepromKontrol+0x274>)
 80003ac:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003b0:	4b68      	ldr	r3, [pc, #416]	@ (8000554 <eepromKontrol+0x320>)
 80003b2:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003b4:	4b3c      	ldr	r3, [pc, #240]	@ (80004a8 <eepromKontrol+0x274>)
 80003b6:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003ba:	4b67      	ldr	r3, [pc, #412]	@ (8000558 <eepromKontrol+0x324>)
 80003bc:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003be:	4b3a      	ldr	r3, [pc, #232]	@ (80004a8 <eepromKontrol+0x274>)
 80003c0:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003c4:	4b65      	ldr	r3, [pc, #404]	@ (800055c <eepromKontrol+0x328>)
 80003c6:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003c8:	4b37      	ldr	r3, [pc, #220]	@ (80004a8 <eepromKontrol+0x274>)
 80003ca:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003ce:	4b64      	ldr	r3, [pc, #400]	@ (8000560 <eepromKontrol+0x32c>)
 80003d0:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80003d2:	4b39      	ldr	r3, [pc, #228]	@ (80004b8 <eepromKontrol+0x284>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d902      	bls.n	80003e0 <eepromKontrol+0x1ac>
	    calismaSekli=0;
 80003da:	4b37      	ldr	r3, [pc, #220]	@ (80004b8 <eepromKontrol+0x284>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80003e0:	4b36      	ldr	r3, [pc, #216]	@ (80004bc <eepromKontrol+0x288>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d902      	bls.n	80003ee <eepromKontrol+0x1ba>
	    emniyetCercevesi=1;
 80003e8:	4b34      	ldr	r3, [pc, #208]	@ (80004bc <eepromKontrol+0x288>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80003ee:	4b34      	ldr	r3, [pc, #208]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d902      	bls.n	80003fc <eepromKontrol+0x1c8>
	    yavaslamaLimit=0;
 80003f6:	4b32      	ldr	r3, [pc, #200]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 80003fc:	4b31      	ldr	r3, [pc, #196]	@ (80004c4 <eepromKontrol+0x290>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d902      	bls.n	800040a <eepromKontrol+0x1d6>
	    altLimit=1;
 8000404:	4b2f      	ldr	r3, [pc, #188]	@ (80004c4 <eepromKontrol+0x290>)
 8000406:	2201      	movs	r2, #1
 8000408:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800040a:	4b2f      	ldr	r3, [pc, #188]	@ (80004c8 <eepromKontrol+0x294>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d902      	bls.n	8000418 <eepromKontrol+0x1e4>
	    basincSalteri=1;
 8000412:	4b2d      	ldr	r3, [pc, #180]	@ (80004c8 <eepromKontrol+0x294>)
 8000414:	2201      	movs	r2, #1
 8000416:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8000418:	4b2c      	ldr	r3, [pc, #176]	@ (80004cc <eepromKontrol+0x298>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b03      	cmp	r3, #3
 800041e:	d902      	bls.n	8000426 <eepromKontrol+0x1f2>
	    kapiSecimleri=3;
 8000420:	4b2a      	ldr	r3, [pc, #168]	@ (80004cc <eepromKontrol+0x298>)
 8000422:	2203      	movs	r2, #3
 8000424:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000426:	4b44      	ldr	r3, [pc, #272]	@ (8000538 <eepromKontrol+0x304>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d902      	bls.n	8000434 <eepromKontrol+0x200>
	    kapiAcTipi=0;
 800042e:	4b42      	ldr	r3, [pc, #264]	@ (8000538 <eepromKontrol+0x304>)
 8000430:	2200      	movs	r2, #0
 8000432:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8000434:	4b26      	ldr	r3, [pc, #152]	@ (80004d0 <eepromKontrol+0x29c>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b02      	cmp	r3, #2
 800043a:	d902      	bls.n	8000442 <eepromKontrol+0x20e>
	    kapi1Tip=1;
 800043c:	4b24      	ldr	r3, [pc, #144]	@ (80004d0 <eepromKontrol+0x29c>)
 800043e:	2201      	movs	r2, #1
 8000440:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8000442:	4b24      	ldr	r3, [pc, #144]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b05      	cmp	r3, #5
 8000448:	d902      	bls.n	8000450 <eepromKontrol+0x21c>
	    kapi1AcSure=5;
 800044a:	4b22      	ldr	r3, [pc, #136]	@ (80004d4 <eepromKontrol+0x2a0>)
 800044c:	2205      	movs	r2, #5
 800044e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8000450:	4b21      	ldr	r3, [pc, #132]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b02      	cmp	r3, #2
 8000456:	d902      	bls.n	800045e <eepromKontrol+0x22a>
	    kapi2Tip=1;
 8000458:	4b1f      	ldr	r3, [pc, #124]	@ (80004d8 <eepromKontrol+0x2a4>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800045e:	4b1f      	ldr	r3, [pc, #124]	@ (80004dc <eepromKontrol+0x2a8>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b05      	cmp	r3, #5
 8000464:	d902      	bls.n	800046c <eepromKontrol+0x238>
	    kapi2AcSure=5;
 8000466:	4b1d      	ldr	r3, [pc, #116]	@ (80004dc <eepromKontrol+0x2a8>)
 8000468:	2205      	movs	r2, #5
 800046a:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 800046c:	4b1c      	ldr	r3, [pc, #112]	@ (80004e0 <eepromKontrol+0x2ac>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b02      	cmp	r3, #2
 8000472:	d902      	bls.n	800047a <eepromKontrol+0x246>
	    kapitablaTip=1;
 8000474:	4b1a      	ldr	r3, [pc, #104]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000476:	2201      	movs	r2, #1
 8000478:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 800047a:	4b2d      	ldr	r3, [pc, #180]	@ (8000530 <eepromKontrol+0x2fc>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b02      	cmp	r3, #2
 8000480:	d902      	bls.n	8000488 <eepromKontrol+0x254>
	    kapiTablaAcKonum=2;
 8000482:	4b2b      	ldr	r3, [pc, #172]	@ (8000530 <eepromKontrol+0x2fc>)
 8000484:	2202      	movs	r2, #2
 8000486:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8000488:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <eepromKontrol+0x2b0>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b05      	cmp	r3, #5
 800048e:	d902      	bls.n	8000496 <eepromKontrol+0x262>
	    kapiTablaAcSure=5;
 8000490:	4b14      	ldr	r3, [pc, #80]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000492:	2205      	movs	r2, #5
 8000494:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8000496:	4b14      	ldr	r3, [pc, #80]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d962      	bls.n	8000564 <eepromKontrol+0x330>
	    yukariYavasLimit=0;
 800049e:	4b12      	ldr	r3, [pc, #72]	@ (80004e8 <eepromKontrol+0x2b4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	e05e      	b.n	8000564 <eepromKontrol+0x330>
 80004a6:	bf00      	nop
 80004a8:	20000fec 	.word	0x20000fec
 80004ac:	20001090 	.word	0x20001090
 80004b0:	200010e7 	.word	0x200010e7
 80004b4:	20001091 	.word	0x20001091
 80004b8:	200010bd 	.word	0x200010bd
 80004bc:	200010c0 	.word	0x200010c0
 80004c0:	200010c1 	.word	0x200010c1
 80004c4:	200010c2 	.word	0x200010c2
 80004c8:	200010c3 	.word	0x200010c3
 80004cc:	200010c4 	.word	0x200010c4
 80004d0:	200010c5 	.word	0x200010c5
 80004d4:	200010d5 	.word	0x200010d5
 80004d8:	200010c6 	.word	0x200010c6
 80004dc:	200010d6 	.word	0x200010d6
 80004e0:	200010c7 	.word	0x200010c7
 80004e4:	200010d7 	.word	0x200010d7
 80004e8:	200010ca 	.word	0x200010ca
 80004ec:	200010cb 	.word	0x200010cb
 80004f0:	200010cc 	.word	0x200010cc
 80004f4:	200010cd 	.word	0x200010cd
 80004f8:	200010ce 	.word	0x200010ce
 80004fc:	200010cf 	.word	0x200010cf
 8000500:	200010d0 	.word	0x200010d0
 8000504:	200010d1 	.word	0x200010d1
 8000508:	200010d2 	.word	0x200010d2
 800050c:	200010d3 	.word	0x200010d3
 8000510:	200010d4 	.word	0x200010d4
 8000514:	200010d8 	.word	0x200010d8
 8000518:	200010da 	.word	0x200010da
 800051c:	200010b4 	.word	0x200010b4
 8000520:	200010b5 	.word	0x200010b5
 8000524:	200010b6 	.word	0x200010b6
 8000528:	200010b7 	.word	0x200010b7
 800052c:	200010dc 	.word	0x200010dc
 8000530:	200010c9 	.word	0x200010c9
 8000534:	200010db 	.word	0x200010db
 8000538:	200010c8 	.word	0x200010c8
 800053c:	200010dd 	.word	0x200010dd
 8000540:	200010de 	.word	0x200010de
 8000544:	200010df 	.word	0x200010df
 8000548:	200010e0 	.word	0x200010e0
 800054c:	200010e1 	.word	0x200010e1
 8000550:	200010e2 	.word	0x200010e2
 8000554:	200010e3 	.word	0x200010e3
 8000558:	200010e4 	.word	0x200010e4
 800055c:	200010e5 	.word	0x200010e5
 8000560:	200010e6 	.word	0x200010e6
	}

	if(devirmeYuruyusSecim>2) {
 8000564:	4b40      	ldr	r3, [pc, #256]	@ (8000668 <eepromKontrol+0x434>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d902      	bls.n	8000572 <eepromKontrol+0x33e>
	    devirmeYuruyusSecim=0;
 800056c:	4b3e      	ldr	r3, [pc, #248]	@ (8000668 <eepromKontrol+0x434>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8000572:	4b3e      	ldr	r3, [pc, #248]	@ (800066c <eepromKontrol+0x438>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d902      	bls.n	8000580 <eepromKontrol+0x34c>
	    devirmeYukariIleriLimit=1;
 800057a:	4b3c      	ldr	r3, [pc, #240]	@ (800066c <eepromKontrol+0x438>)
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8000580:	4b3b      	ldr	r3, [pc, #236]	@ (8000670 <eepromKontrol+0x43c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    devirmeAsagiGeriLimit=1;
 8000588:	4b39      	ldr	r3, [pc, #228]	@ (8000670 <eepromKontrol+0x43c>)
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800058e:	4b39      	ldr	r3, [pc, #228]	@ (8000674 <eepromKontrol+0x440>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    devirmeSilindirTipi=0;
 8000596:	4b37      	ldr	r3, [pc, #220]	@ (8000674 <eepromKontrol+0x440>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800059c:	4b36      	ldr	r3, [pc, #216]	@ (8000678 <eepromKontrol+0x444>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    platformSilindirTipi=0;
 80005a4:	4b34      	ldr	r3, [pc, #208]	@ (8000678 <eepromKontrol+0x444>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80005aa:	4b34      	ldr	r3, [pc, #208]	@ (800067c <eepromKontrol+0x448>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b05      	cmp	r3, #5
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    yukariValfTmr=0;
 80005b2:	4b32      	ldr	r3, [pc, #200]	@ (800067c <eepromKontrol+0x448>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80005b8:	4b31      	ldr	r3, [pc, #196]	@ (8000680 <eepromKontrol+0x44c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b05      	cmp	r3, #5
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    asagiValfTmr=0;
 80005c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000680 <eepromKontrol+0x44c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80005c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000684 <eepromKontrol+0x450>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    devirmeYukariIleriTmr=0;
 80005ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <eepromKontrol+0x450>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80005d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000688 <eepromKontrol+0x454>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b05      	cmp	r3, #5
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    devirmeAsagiGeriTmr=0;
 80005dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000688 <eepromKontrol+0x454>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80005e2:	4b2a      	ldr	r3, [pc, #168]	@ (800068c <eepromKontrol+0x458>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2bb4      	cmp	r3, #180	@ 0xb4
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    makineCalismaTmr=60;
 80005ea:	4b28      	ldr	r3, [pc, #160]	@ (800068c <eepromKontrol+0x458>)
 80005ec:	223c      	movs	r2, #60	@ 0x3c
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80005f0:	4b27      	ldr	r3, [pc, #156]	@ (8000690 <eepromKontrol+0x45c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    buzzer=0;
 80005f8:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <eepromKontrol+0x45c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 80005fe:	4b25      	ldr	r3, [pc, #148]	@ (8000694 <eepromKontrol+0x460>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    demoMode=0;
 8000606:	4b23      	ldr	r3, [pc, #140]	@ (8000694 <eepromKontrol+0x460>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800060c:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <eepromKontrol+0x464>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    calismaSayModu=0;
 8000614:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <eepromKontrol+0x464>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 800061a:	4b20      	ldr	r3, [pc, #128]	@ (800069c <eepromKontrol+0x468>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    dilSecim=0;
 8000622:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <eepromKontrol+0x468>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8000628:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <eepromKontrol+0x46c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
		iotMode=0;
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <eepromKontrol+0x46c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f000 f936 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 800063c:	20fa      	movs	r0, #250	@ 0xfa
 800063e:	f009 fac3 	bl	8009bc8 <HAL_Delay>

	convertArrays(2);
 8000642:	2002      	movs	r0, #2
 8000644:	f000 f930 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 8000648:	20fa      	movs	r0, #250	@ 0xfa
 800064a:	f009 fabd 	bl	8009bc8 <HAL_Delay>

	convertArrays(3);
 800064e:	2003      	movs	r0, #3
 8000650:	f000 f92a 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 8000654:	20fa      	movs	r0, #250	@ 0xfa
 8000656:	f009 fab7 	bl	8009bc8 <HAL_Delay>

	loadMenuTexts(dilSecim);
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <eepromKontrol+0x468>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f005 fdf0 	bl	8006244 <loadMenuTexts>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200010cb 	.word	0x200010cb
 800066c:	200010cc 	.word	0x200010cc
 8000670:	200010cd 	.word	0x200010cd
 8000674:	200010ce 	.word	0x200010ce
 8000678:	200010cf 	.word	0x200010cf
 800067c:	200010d0 	.word	0x200010d0
 8000680:	200010d1 	.word	0x200010d1
 8000684:	200010d2 	.word	0x200010d2
 8000688:	200010d3 	.word	0x200010d3
 800068c:	200010d4 	.word	0x200010d4
 8000690:	200010d8 	.word	0x200010d8
 8000694:	200010da 	.word	0x200010da
 8000698:	200010db 	.word	0x200010db
 800069c:	200010dc 	.word	0x200010dc
 80006a0:	200010e7 	.word	0x200010e7

080006a4 <saveEEPROM>:

    HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, sizeof(eepromData), eepromData, sizeof(eepromData), 3000);
    HAL_Delay(1000);
}

void saveEEPROM(int resultText) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	EEPROM_Write(0, 0, eepromData, 110);
 80006ac:	236e      	movs	r3, #110	@ 0x6e
 80006ae:	4a0b      	ldr	r2, [pc, #44]	@ (80006dc <saveEEPROM+0x38>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 f816 	bl	80006e4 <EEPROM_Write>

    if(resultText == 1) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d104      	bne.n	80006c8 <saveEEPROM+0x24>
    	lcd_print(2, 1, dataYazildiText);
 80006be:	4a08      	ldr	r2, [pc, #32]	@ (80006e0 <saveEEPROM+0x3c>)
 80006c0:	2101      	movs	r1, #1
 80006c2:	2002      	movs	r0, #2
 80006c4:	f008 fd26 	bl	8009114 <lcd_print>
    }

    // Ekranı temizle
    HAL_Delay(500);
 80006c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006cc:	f009 fa7c 	bl	8009bc8 <HAL_Delay>
    lcd_clear();
 80006d0:	f008 fd4c 	bl	800916c <lcd_clear>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000fec 	.word	0x20000fec
 80006e0:	20001860 	.word	0x20001860

080006e4 <EEPROM_Write>:

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08e      	sub	sp, #56	@ 0x38
 80006e8:	af04      	add	r7, sp, #16
 80006ea:	60ba      	str	r2, [r7, #8]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4603      	mov	r3, r0
 80006f0:	81fb      	strh	r3, [r7, #14]
 80006f2:	460b      	mov	r3, r1
 80006f4:	81bb      	strh	r3, [r7, #12]
 80006f6:	4613      	mov	r3, r2
 80006f8:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80006fa:	2306      	movs	r3, #6
 80006fc:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80006fe:	89fb      	ldrh	r3, [r7, #14]
 8000700:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000702:	88fa      	ldrh	r2, [r7, #6]
 8000704:	89bb      	ldrh	r3, [r7, #12]
 8000706:	4413      	add	r3, r2
 8000708:	2b00      	cmp	r3, #0
 800070a:	da00      	bge.n	800070e <EEPROM_Write+0x2a>
 800070c:	333f      	adds	r3, #63	@ 0x3f
 800070e:	119b      	asrs	r3, r3, #6
 8000710:	b29a      	uxth	r2, r3
 8000712:	89fb      	ldrh	r3, [r7, #14]
 8000714:	4413      	add	r3, r2
 8000716:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 8000718:	8afa      	ldrh	r2, [r7, #22]
 800071a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	b29b      	uxth	r3, r3
 8000720:	3301      	adds	r3, #1
 8000722:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
 800072c:	e041      	b.n	80007b2 <EEPROM_Write+0xce>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 800072e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	b21a      	sxth	r2, r3
 8000738:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800073c:	4313      	orrs	r3, r2
 800073e:	b21b      	sxth	r3, r3
 8000740:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000742:	89bb      	ldrh	r3, [r7, #12]
 8000744:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000748:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800074a:	8bfa      	ldrh	r2, [r7, #30]
 800074c:	88fb      	ldrh	r3, [r7, #6]
 800074e:	429a      	cmp	r2, r3
 8000750:	d901      	bls.n	8000756 <EEPROM_Write+0x72>
            bytesremaining = size;
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 8000756:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000758:	68ba      	ldr	r2, [r7, #8]
 800075a:	4413      	add	r3, r2
 800075c:	8a79      	ldrh	r1, [r7, #18]
 800075e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000762:	9202      	str	r2, [sp, #8]
 8000764:	8bfa      	ldrh	r2, [r7, #30]
 8000766:	9201      	str	r2, [sp, #4]
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2310      	movs	r3, #16
 800076c:	460a      	mov	r2, r1
 800076e:	21a0      	movs	r1, #160	@ 0xa0
 8000770:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <EEPROM_Write+0xdc>)
 8000772:	f00a fb41 	bl	800adf8 <HAL_I2C_Mem_Write>
 8000776:	4603      	mov	r3, r0
 8000778:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800077a:	7c7b      	ldrb	r3, [r7, #17]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d005      	beq.n	800078c <EEPROM_Write+0xa8>
            lcd_print(2, 1, "Hata: EEPROM    ");
 8000780:	4a10      	ldr	r2, [pc, #64]	@ (80007c4 <EEPROM_Write+0xe0>)
 8000782:	2101      	movs	r1, #1
 8000784:	2002      	movs	r0, #2
 8000786:	f008 fcc5 	bl	8009114 <lcd_print>
            return;
 800078a:	e016      	b.n	80007ba <EEPROM_Write+0xd6>
        }

        startPage += 1;
 800078c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800078e:	3301      	adds	r3, #1
 8000790:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 8000796:	88fa      	ldrh	r2, [r7, #6]
 8000798:	8bfb      	ldrh	r3, [r7, #30]
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 800079e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80007a0:	8bfb      	ldrh	r3, [r7, #30]
 80007a2:	4413      	add	r3, r2
 80007a4:	84bb      	strh	r3, [r7, #36]	@ 0x24

        HAL_Delay(5);
 80007a6:	2005      	movs	r0, #5
 80007a8:	f009 fa0e 	bl	8009bc8 <HAL_Delay>
    for (int i = 0; i < numofpages; i++) {
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	3301      	adds	r3, #1
 80007b0:	623b      	str	r3, [r7, #32]
 80007b2:	8abb      	ldrh	r3, [r7, #20]
 80007b4:	6a3a      	ldr	r2, [r7, #32]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	dbb9      	blt.n	800072e <EEPROM_Write+0x4a>
    }
}
 80007ba:	3728      	adds	r7, #40	@ 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	2000193c 	.word	0x2000193c
 80007c4:	0800e8f0 	.word	0x0800e8f0

080007c8 <EEPROM_Read>:

void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08e      	sub	sp, #56	@ 0x38
 80007cc:	af04      	add	r7, sp, #16
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4603      	mov	r3, r0
 80007d4:	81fb      	strh	r3, [r7, #14]
 80007d6:	460b      	mov	r3, r1
 80007d8:	81bb      	strh	r3, [r7, #12]
 80007da:	4613      	mov	r3, r2
 80007dc:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80007de:	2306      	movs	r3, #6
 80007e0:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80007e2:	89fb      	ldrh	r3, [r7, #14]
 80007e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 80007e6:	88fa      	ldrh	r2, [r7, #6]
 80007e8:	89bb      	ldrh	r3, [r7, #12]
 80007ea:	4413      	add	r3, r2
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	da00      	bge.n	80007f2 <EEPROM_Read+0x2a>
 80007f0:	333f      	adds	r3, #63	@ 0x3f
 80007f2:	119b      	asrs	r3, r3, #6
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	89fb      	ldrh	r3, [r7, #14]
 80007f8:	4413      	add	r3, r2
 80007fa:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 80007fc:	8afa      	ldrh	r2, [r7, #22]
 80007fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	b29b      	uxth	r3, r3
 8000804:	3301      	adds	r3, #1
 8000806:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
 8000810:	e03e      	b.n	8000890 <EEPROM_Read+0xc8>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 8000812:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	b21a      	sxth	r2, r3
 800081c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000820:	4313      	orrs	r3, r2
 8000822:	b21b      	sxth	r3, r3
 8000824:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000826:	89bb      	ldrh	r3, [r7, #12]
 8000828:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800082c:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800082e:	8bfa      	ldrh	r2, [r7, #30]
 8000830:	88fb      	ldrh	r3, [r7, #6]
 8000832:	429a      	cmp	r2, r3
 8000834:	d901      	bls.n	800083a <EEPROM_Read+0x72>
            bytesremaining = size;
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 800083a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	4413      	add	r3, r2
 8000840:	8a79      	ldrh	r1, [r7, #18]
 8000842:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000846:	9202      	str	r2, [sp, #8]
 8000848:	8bfa      	ldrh	r2, [r7, #30]
 800084a:	9201      	str	r2, [sp, #4]
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2310      	movs	r3, #16
 8000850:	460a      	mov	r2, r1
 8000852:	21a0      	movs	r1, #160	@ 0xa0
 8000854:	4812      	ldr	r0, [pc, #72]	@ (80008a0 <EEPROM_Read+0xd8>)
 8000856:	f00a fbc9 	bl	800afec <HAL_I2C_Mem_Read>
 800085a:	4603      	mov	r3, r0
 800085c:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800085e:	7c7b      	ldrb	r3, [r7, #17]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d005      	beq.n	8000870 <EEPROM_Read+0xa8>
            lcd_print(2, 1, "Hata: EEPROM OKU");
 8000864:	4a0f      	ldr	r2, [pc, #60]	@ (80008a4 <EEPROM_Read+0xdc>)
 8000866:	2101      	movs	r1, #1
 8000868:	2002      	movs	r0, #2
 800086a:	f008 fc53 	bl	8009114 <lcd_print>
            return;
 800086e:	e013      	b.n	8000898 <EEPROM_Read+0xd0>
        }

        startPage += 1;
 8000870:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000872:	3301      	adds	r3, #1
 8000874:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 800087a:	88fa      	ldrh	r2, [r7, #6]
 800087c:	8bfb      	ldrh	r3, [r7, #30]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 8000882:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000884:	8bfb      	ldrh	r3, [r7, #30]
 8000886:	4413      	add	r3, r2
 8000888:	84bb      	strh	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < numofpages; i++) {
 800088a:	6a3b      	ldr	r3, [r7, #32]
 800088c:	3301      	adds	r3, #1
 800088e:	623b      	str	r3, [r7, #32]
 8000890:	8abb      	ldrh	r3, [r7, #20]
 8000892:	6a3a      	ldr	r2, [r7, #32]
 8000894:	429a      	cmp	r2, r3
 8000896:	dbbc      	blt.n	8000812 <EEPROM_Read+0x4a>
    }
}
 8000898:	3728      	adds	r7, #40	@ 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2000193c 	.word	0x2000193c
 80008a4:	0800e904 	.word	0x0800e904

080008a8 <convertArrays>:

void convertArrays(int state) {
 80008a8:	b480      	push	{r7}
 80008aa:	b08b      	sub	sp, #44	@ 0x2c
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d11d      	bne.n	80008f2 <convertArrays+0x4a>
		int eepromVal = idStartPos;
 80008b6:	4b34      	ldr	r3, [pc, #208]	@ (8000988 <convertArrays+0xe0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
 80008c0:	e013      	b.n	80008ea <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 80008c2:	4a32      	ldr	r2, [pc, #200]	@ (800098c <convertArrays+0xe4>)
 80008c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c6:	4413      	add	r3, r2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 80008cc:	4a30      	ldr	r2, [pc, #192]	@ (8000990 <convertArrays+0xe8>)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4413      	add	r3, r2
 80008d2:	7819      	ldrb	r1, [r3, #0]
 80008d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000994 <convertArrays+0xec>)
 80008d6:	6a3b      	ldr	r3, [r7, #32]
 80008d8:	4413      	add	r3, r2
 80008da:	460a      	mov	r2, r1
 80008dc:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 80008de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e0:	3301      	adds	r3, #1
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008e4:	6a3b      	ldr	r3, [r7, #32]
 80008e6:	3301      	adds	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
 80008ea:	6a3b      	ldr	r3, [r7, #32]
 80008ec:	2b0b      	cmp	r3, #11
 80008ee:	dde8      	ble.n	80008c2 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 80008f0:	e045      	b.n	800097e <convertArrays+0xd6>
	} else if(state == 2) {
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d121      	bne.n	800093c <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 80008f8:	4b27      	ldr	r3, [pc, #156]	@ (8000998 <convertArrays+0xf0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	e017      	b.n	8000934 <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 8000904:	4a21      	ldr	r2, [pc, #132]	@ (800098c <convertArrays+0xe4>)
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	4413      	add	r3, r2
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00e      	beq.n	800092e <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 8000910:	4a1e      	ldr	r2, [pc, #120]	@ (800098c <convertArrays+0xe4>)
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	4413      	add	r3, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b20      	ldr	r3, [pc, #128]	@ (800099c <convertArrays+0xf4>)
 800091c:	5c99      	ldrb	r1, [r3, r2]
 800091e:	4a20      	ldr	r2, [pc, #128]	@ (80009a0 <convertArrays+0xf8>)
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	4413      	add	r3, r2
 8000924:	460a      	mov	r2, r1
 8000926:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	3301      	adds	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	3301      	adds	r3, #1
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	2b0f      	cmp	r3, #15
 8000938:	dde4      	ble.n	8000904 <convertArrays+0x5c>
}
 800093a:	e020      	b.n	800097e <convertArrays+0xd6>
		int eepromVal = passStartPos;
 800093c:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <convertArrays+0xfc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	e017      	b.n	8000978 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 8000948:	4a10      	ldr	r2, [pc, #64]	@ (800098c <convertArrays+0xe4>)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	4413      	add	r3, r2
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00e      	beq.n	8000972 <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 8000954:	4a0d      	ldr	r2, [pc, #52]	@ (800098c <convertArrays+0xe4>)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	4413      	add	r3, r2
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <convertArrays+0xf4>)
 8000960:	5c99      	ldrb	r1, [r3, r2]
 8000962:	4a11      	ldr	r2, [pc, #68]	@ (80009a8 <convertArrays+0x100>)
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	4413      	add	r3, r2
 8000968:	460a      	mov	r2, r1
 800096a:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	3301      	adds	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	3301      	adds	r3, #1
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	2b0f      	cmp	r3, #15
 800097c:	dde4      	ble.n	8000948 <convertArrays+0xa0>
}
 800097e:	bf00      	nop
 8000980:	372c      	adds	r7, #44	@ 0x2c
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	20000000 	.word	0x20000000
 800098c:	20000fec 	.word	0x20000fec
 8000990:	2000000c 	.word	0x2000000c
 8000994:	20001064 	.word	0x20001064
 8000998:	20000004 	.word	0x20000004
 800099c:	20000018 	.word	0x20000018
 80009a0:	20001070 	.word	0x20001070
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20001080 	.word	0x20001080

080009ac <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"
#include "GlobalVariables.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b09f      	sub	sp, #124	@ 0x7c
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 80009b8:	4948      	ldr	r1, [pc, #288]	@ (8000adc <ESP8266_Init+0x130>)
 80009ba:	4849      	ldr	r0, [pc, #292]	@ (8000ae0 <ESP8266_Init+0x134>)
 80009bc:	f00d fb4a 	bl	800e054 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009c0:	4847      	ldr	r0, [pc, #284]	@ (8000ae0 <ESP8266_Init+0x134>)
 80009c2:	f7ff fc2f 	bl	8000224 <strlen>
 80009c6:	4603      	mov	r3, r0
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	461a      	mov	r2, r3
 80009cc:	4944      	ldr	r1, [pc, #272]	@ (8000ae0 <ESP8266_Init+0x134>)
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f00c fa54 	bl	800ce7c <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 80009d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009d8:	f009 f8f6 	bl	8009bc8 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 80009dc:	4941      	ldr	r1, [pc, #260]	@ (8000ae4 <ESP8266_Init+0x138>)
 80009de:	4840      	ldr	r0, [pc, #256]	@ (8000ae0 <ESP8266_Init+0x134>)
 80009e0:	f00d fb38 	bl	800e054 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009e4:	483e      	ldr	r0, [pc, #248]	@ (8000ae0 <ESP8266_Init+0x134>)
 80009e6:	f7ff fc1d 	bl	8000224 <strlen>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	461a      	mov	r2, r3
 80009f0:	493b      	ldr	r1, [pc, #236]	@ (8000ae0 <ESP8266_Init+0x134>)
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f00c fa42 	bl	800ce7c <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 80009f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009fc:	f009 f8e4 	bl	8009bc8 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000a00:	4939      	ldr	r1, [pc, #228]	@ (8000ae8 <ESP8266_Init+0x13c>)
 8000a02:	4837      	ldr	r0, [pc, #220]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000a04:	f00d fb26 	bl	800e054 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000a08:	4835      	ldr	r0, [pc, #212]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000a0a:	f7ff fc0b 	bl	8000224 <strlen>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	461a      	mov	r2, r3
 8000a14:	4932      	ldr	r1, [pc, #200]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f00c fa30 	bl	800ce7c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a1c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a20:	f009 f8d2 	bl	8009bc8 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 8000a24:	4931      	ldr	r1, [pc, #196]	@ (8000aec <ESP8266_Init+0x140>)
 8000a26:	482e      	ldr	r0, [pc, #184]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000a28:	f00d fb14 	bl	800e054 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000a2c:	482c      	ldr	r0, [pc, #176]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000a2e:	f7ff fbf9 	bl	8000224 <strlen>
 8000a32:	4603      	mov	r3, r0
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	461a      	mov	r2, r3
 8000a38:	4929      	ldr	r1, [pc, #164]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f00c fa1e 	bl	800ce7c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a40:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a44:	f009 f8c0 	bl	8009bc8 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4a28      	ldr	r2, [pc, #160]	@ (8000af0 <ESP8266_Init+0x144>)
 8000a4e:	461c      	mov	r4, r3
 8000a50:	4613      	mov	r3, r2
 8000a52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a54:	c407      	stmia	r4!, {r0, r1, r2}
 8000a56:	8023      	strh	r3, [r4, #0]
 8000a58:	3402      	adds	r4, #2
 8000a5a:	0c1b      	lsrs	r3, r3, #16
 8000a5c:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	68b9      	ldr	r1, [r7, #8]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f00d fb1d 	bl	800e0a4 <strcat>
	strcat(str, "\",\"");
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fbd8 	bl	8000224 <strlen>
 8000a74:	4603      	mov	r3, r0
 8000a76:	461a      	mov	r2, r3
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4413      	add	r3, r2
 8000a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8000af4 <ESP8266_Init+0x148>)
 8000a80:	6810      	ldr	r0, [r2, #0]
 8000a82:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	6879      	ldr	r1, [r7, #4]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f00d fb0a 	bl	800e0a4 <strcat>
	strcat(str, "\"\r\n");
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fbc5 	bl	8000224 <strlen>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a14      	ldr	r2, [pc, #80]	@ (8000af8 <ESP8266_Init+0x14c>)
 8000aa6:	6810      	ldr	r0, [r2, #0]
 8000aa8:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4912      	ldr	r1, [pc, #72]	@ (8000afc <ESP8266_Init+0x150>)
 8000ab2:	480b      	ldr	r0, [pc, #44]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000ab4:	f00d face 	bl	800e054 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000ab8:	4809      	ldr	r0, [pc, #36]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000aba:	f7ff fbb3 	bl	8000224 <strlen>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	4906      	ldr	r1, [pc, #24]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000ac6:	68f8      	ldr	r0, [r7, #12]
 8000ac8:	f00c f9d8 	bl	800ce7c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000acc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ad0:	f009 f87a 	bl	8009bc8 <HAL_Delay>
}
 8000ad4:	bf00      	nop
 8000ad6:	377c      	adds	r7, #124	@ 0x7c
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd90      	pop	{r4, r7, pc}
 8000adc:	0800e918 	.word	0x0800e918
 8000ae0:	20001124 	.word	0x20001124
 8000ae4:	0800e928 	.word	0x0800e928
 8000ae8:	0800e934 	.word	0x0800e934
 8000aec:	0800e93c 	.word	0x0800e93c
 8000af0:	0800e94c 	.word	0x0800e94c
 8000af4:	0800e95c 	.word	0x0800e95c
 8000af8:	0800e960 	.word	0x0800e960
 8000afc:	0800e964 	.word	0x0800e964

08000b00 <sendMachineData>:
    sprintf(bufferTX, "AT+CIPCLOSE=0");
    HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
    HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b02:	f2ad 7d7c 	subw	sp, sp, #1916	@ 0x77c
 8000b06:	af2c      	add	r7, sp, #176	@ 0xb0
 8000b08:	f507 64d9 	add.w	r4, r7, #1736	@ 0x6c8
 8000b0c:	f2a4 642c 	subw	r4, r4, #1580	@ 0x62c
 8000b10:	6020      	str	r0, [r4, #0]
 8000b12:	f507 60d9 	add.w	r0, r7, #1736	@ 0x6c8
 8000b16:	f5a0 60c6 	sub.w	r0, r0, #1584	@ 0x630
 8000b1a:	6001      	str	r1, [r0, #0]
 8000b1c:	f507 61d9 	add.w	r1, r7, #1736	@ 0x6c8
 8000b20:	f2a1 6134 	subw	r1, r1, #1588	@ 0x634
 8000b24:	600a      	str	r2, [r1, #0]
 8000b26:	f507 62d9 	add.w	r2, r7, #1736	@ 0x6c8
 8000b2a:	f5a2 62c7 	sub.w	r2, r2, #1592	@ 0x638
 8000b2e:	6013      	str	r3, [r2, #0]
	char local_txA[1500];
	char local_txB[50];
	int len;

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 8000b30:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000b34:	f5a3 63c6 	sub.w	r3, r3, #1584	@ 0x630
 8000b38:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8000b3c:	220c      	movs	r2, #12
 8000b3e:	6819      	ldr	r1, [r3, #0]
 8000b40:	f00d fabf 	bl	800e0c2 <strncpy>
	subMachineID[12] = '\0';
 8000b44:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000b48:	f2a3 6324 	subw	r3, r3, #1572	@ 0x624
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000b50:	4a9d      	ldr	r2, [pc, #628]	@ (8000dc8 <sendMachineData+0x2c8>)
 8000b52:	499e      	ldr	r1, [pc, #632]	@ (8000dcc <sendMachineData+0x2cc>)
 8000b54:	489e      	ldr	r0, [pc, #632]	@ (8000dd0 <sendMachineData+0x2d0>)
 8000b56:	f00d fa7d 	bl	800e054 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000b5a:	489d      	ldr	r0, [pc, #628]	@ (8000dd0 <sendMachineData+0x2d0>)
 8000b5c:	f7ff fb62 	bl	8000224 <strlen>
 8000b60:	4603      	mov	r3, r0
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000b68:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8000b6c:	4998      	ldr	r1, [pc, #608]	@ (8000dd0 <sendMachineData+0x2d0>)
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	f00c f984 	bl	800ce7c <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000b74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b78:	f009 f826 	bl	8009bc8 <HAL_Delay>

	sprintf(local_txA,
 8000b7c:	4b95      	ldr	r3, [pc, #596]	@ (8000dd4 <sendMachineData+0x2d4>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000b84:	4b94      	ldr	r3, [pc, #592]	@ (8000dd8 <sendMachineData+0x2d8>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000b8c:	4b93      	ldr	r3, [pc, #588]	@ (8000ddc <sendMachineData+0x2dc>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000b94:	4b92      	ldr	r3, [pc, #584]	@ (8000de0 <sendMachineData+0x2e0>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000b9c:	4b91      	ldr	r3, [pc, #580]	@ (8000de4 <sendMachineData+0x2e4>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000ba2:	4b91      	ldr	r3, [pc, #580]	@ (8000de8 <sendMachineData+0x2e8>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000ba8:	4b90      	ldr	r3, [pc, #576]	@ (8000dec <sendMachineData+0x2ec>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	677b      	str	r3, [r7, #116]	@ 0x74
 8000bae:	4b90      	ldr	r3, [pc, #576]	@ (8000df0 <sendMachineData+0x2f0>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	673b      	str	r3, [r7, #112]	@ 0x70
 8000bb4:	4b8f      	ldr	r3, [pc, #572]	@ (8000df4 <sendMachineData+0x2f4>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000bba:	4b8f      	ldr	r3, [pc, #572]	@ (8000df8 <sendMachineData+0x2f8>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000bc0:	4b8e      	ldr	r3, [pc, #568]	@ (8000dfc <sendMachineData+0x2fc>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	667b      	str	r3, [r7, #100]	@ 0x64
 8000bc6:	4b8e      	ldr	r3, [pc, #568]	@ (8000e00 <sendMachineData+0x300>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	663b      	str	r3, [r7, #96]	@ 0x60
 8000bcc:	4b8d      	ldr	r3, [pc, #564]	@ (8000e04 <sendMachineData+0x304>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000bd2:	4b8d      	ldr	r3, [pc, #564]	@ (8000e08 <sendMachineData+0x308>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000bd8:	4b8c      	ldr	r3, [pc, #560]	@ (8000e0c <sendMachineData+0x30c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	657b      	str	r3, [r7, #84]	@ 0x54
 8000bde:	4b8c      	ldr	r3, [pc, #560]	@ (8000e10 <sendMachineData+0x310>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	653b      	str	r3, [r7, #80]	@ 0x50
 8000be4:	4b8b      	ldr	r3, [pc, #556]	@ (8000e14 <sendMachineData+0x314>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000bea:	4b8b      	ldr	r3, [pc, #556]	@ (8000e18 <sendMachineData+0x318>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000bf0:	4b8a      	ldr	r3, [pc, #552]	@ (8000e1c <sendMachineData+0x31c>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8000bf6:	4b8a      	ldr	r3, [pc, #552]	@ (8000e20 <sendMachineData+0x320>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8000bfc:	4b89      	ldr	r3, [pc, #548]	@ (8000e24 <sendMachineData+0x324>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000c02:	4b89      	ldr	r3, [pc, #548]	@ (8000e28 <sendMachineData+0x328>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c08:	4b88      	ldr	r3, [pc, #544]	@ (8000e2c <sendMachineData+0x32c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c0e:	4b88      	ldr	r3, [pc, #544]	@ (8000e30 <sendMachineData+0x330>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	633b      	str	r3, [r7, #48]	@ 0x30
 8000c14:	4b87      	ldr	r3, [pc, #540]	@ (8000e34 <sendMachineData+0x334>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c1a:	4b87      	ldr	r3, [pc, #540]	@ (8000e38 <sendMachineData+0x338>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c20:	4b86      	ldr	r3, [pc, #536]	@ (8000e3c <sendMachineData+0x33c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c26:	4b86      	ldr	r3, [pc, #536]	@ (8000e40 <sendMachineData+0x340>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	623b      	str	r3, [r7, #32]
 8000c2c:	4b85      	ldr	r3, [pc, #532]	@ (8000e44 <sendMachineData+0x344>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	61fb      	str	r3, [r7, #28]
 8000c32:	4b85      	ldr	r3, [pc, #532]	@ (8000e48 <sendMachineData+0x348>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	61bb      	str	r3, [r7, #24]
	    "GET /api/v2/machine/updateMachineRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&devirmeYuruyusSecim=%d&calismaSekli=%d&emniyetCercevesi=%d&yavaslamaLimit=%d&altLimit=%d&kapiTablaAcKonum=%d&basincSalteri=%d&kapiSecimleri=%d&kapiAcTipi=%d&kapi1Tip=%d&kapi1AcSure=%d&kapi2Tip=%d&kapi2AcSure=%d&kapitablaTip=%d&kapiTablaAcSure=%d&yukariYavasLimit=%d&devirmeYukariIleriLimit=%d&devirmeAsagiGeriLimit=%d&devirmeSilindirTipi=%d&platformSilindirTipi=%d&yukariValfTmr=%d&asagiValfTmr=%d&devirmeYukariIleriTmr=%d&devirmeAsagiGeriTmr=%d&makineCalismaTmr=%d&buzzer=%d&demoMode=%d&calismaSayisi=%d&calismaSayisiDemo=%d&dilSecim=%d&eepromData38=%d&eepromData39=%d&eepromData40=%d&eepromData41=%d&eepromData42=%d&eepromData43=%d&eepromData44=%d&eepromData45=%d&eepromData46=%d&eepromData47=%d&lcdBacklightSure=%d HTTP/1.0\r\nHost: %s\r\n\r\n",
	    subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi,
	    yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure,
	    kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit,
	    devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr,
	    makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39],
 8000c38:	4b84      	ldr	r3, [pc, #528]	@ (8000e4c <sendMachineData+0x34c>)
 8000c3a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	sprintf(local_txA,
 8000c3e:	617b      	str	r3, [r7, #20]
	    makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39],
 8000c40:	4b82      	ldr	r3, [pc, #520]	@ (8000e4c <sendMachineData+0x34c>)
 8000c42:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	sprintf(local_txA,
 8000c46:	613b      	str	r3, [r7, #16]
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c48:	4b80      	ldr	r3, [pc, #512]	@ (8000e4c <sendMachineData+0x34c>)
 8000c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	sprintf(local_txA,
 8000c4e:	60fb      	str	r3, [r7, #12]
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c50:	4b7e      	ldr	r3, [pc, #504]	@ (8000e4c <sendMachineData+0x34c>)
 8000c52:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	sprintf(local_txA,
 8000c56:	60bb      	str	r3, [r7, #8]
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c58:	4b7c      	ldr	r3, [pc, #496]	@ (8000e4c <sendMachineData+0x34c>)
 8000c5a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	sprintf(local_txA,
 8000c5e:	607b      	str	r3, [r7, #4]
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c60:	4b7a      	ldr	r3, [pc, #488]	@ (8000e4c <sendMachineData+0x34c>)
 8000c62:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	sprintf(local_txA,
 8000c66:	603b      	str	r3, [r7, #0]
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c68:	4b78      	ldr	r3, [pc, #480]	@ (8000e4c <sendMachineData+0x34c>)
 8000c6a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	sprintf(local_txA,
 8000c6e:	461e      	mov	r6, r3
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c70:	4b76      	ldr	r3, [pc, #472]	@ (8000e4c <sendMachineData+0x34c>)
 8000c72:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	sprintf(local_txA,
 8000c76:	4618      	mov	r0, r3
	    eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000c78:	4b74      	ldr	r3, [pc, #464]	@ (8000e4c <sendMachineData+0x34c>)
 8000c7a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	sprintf(local_txA,
 8000c7e:	4619      	mov	r1, r3
	    eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000c80:	4b72      	ldr	r3, [pc, #456]	@ (8000e4c <sendMachineData+0x34c>)
 8000c82:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	sprintf(local_txA,
 8000c86:	461a      	mov	r2, r3
 8000c88:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000c8c:	f2a3 6434 	subw	r4, r3, #1588	@ 0x634
 8000c90:	f107 0ca4 	add.w	ip, r7, #164	@ 0xa4
 8000c94:	f107 05e8 	add.w	r5, r7, #232	@ 0xe8
 8000c98:	4b6d      	ldr	r3, [pc, #436]	@ (8000e50 <sendMachineData+0x350>)
 8000c9a:	932a      	str	r3, [sp, #168]	@ 0xa8
 8000c9c:	233c      	movs	r3, #60	@ 0x3c
 8000c9e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8000ca0:	9228      	str	r2, [sp, #160]	@ 0xa0
 8000ca2:	9127      	str	r1, [sp, #156]	@ 0x9c
 8000ca4:	9026      	str	r0, [sp, #152]	@ 0x98
 8000ca6:	9625      	str	r6, [sp, #148]	@ 0x94
 8000ca8:	683a      	ldr	r2, [r7, #0]
 8000caa:	9224      	str	r2, [sp, #144]	@ 0x90
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	9223      	str	r2, [sp, #140]	@ 0x8c
 8000cb0:	68ba      	ldr	r2, [r7, #8]
 8000cb2:	9222      	str	r2, [sp, #136]	@ 0x88
 8000cb4:	68fa      	ldr	r2, [r7, #12]
 8000cb6:	9221      	str	r2, [sp, #132]	@ 0x84
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	9220      	str	r2, [sp, #128]	@ 0x80
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	921f      	str	r2, [sp, #124]	@ 0x7c
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	921e      	str	r2, [sp, #120]	@ 0x78
 8000cc4:	69fa      	ldr	r2, [r7, #28]
 8000cc6:	921d      	str	r2, [sp, #116]	@ 0x74
 8000cc8:	6a3a      	ldr	r2, [r7, #32]
 8000cca:	921c      	str	r2, [sp, #112]	@ 0x70
 8000ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cce:	921b      	str	r2, [sp, #108]	@ 0x6c
 8000cd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cd2:	921a      	str	r2, [sp, #104]	@ 0x68
 8000cd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000cd6:	9219      	str	r2, [sp, #100]	@ 0x64
 8000cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000cda:	9218      	str	r2, [sp, #96]	@ 0x60
 8000cdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000cde:	9217      	str	r2, [sp, #92]	@ 0x5c
 8000ce0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ce2:	9216      	str	r2, [sp, #88]	@ 0x58
 8000ce4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ce6:	9215      	str	r2, [sp, #84]	@ 0x54
 8000ce8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000cea:	9214      	str	r2, [sp, #80]	@ 0x50
 8000cec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000cee:	9213      	str	r2, [sp, #76]	@ 0x4c
 8000cf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000cf2:	9212      	str	r2, [sp, #72]	@ 0x48
 8000cf4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000cf6:	9211      	str	r2, [sp, #68]	@ 0x44
 8000cf8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000cfa:	9210      	str	r2, [sp, #64]	@ 0x40
 8000cfc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000cfe:	920f      	str	r2, [sp, #60]	@ 0x3c
 8000d00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000d02:	920e      	str	r2, [sp, #56]	@ 0x38
 8000d04:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000d06:	920d      	str	r2, [sp, #52]	@ 0x34
 8000d08:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d0a:	920c      	str	r2, [sp, #48]	@ 0x30
 8000d0c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000d0e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8000d10:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000d12:	920a      	str	r2, [sp, #40]	@ 0x28
 8000d14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000d16:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d18:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000d1a:	9208      	str	r2, [sp, #32]
 8000d1c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000d1e:	9207      	str	r2, [sp, #28]
 8000d20:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000d22:	9206      	str	r2, [sp, #24]
 8000d24:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d26:	9205      	str	r2, [sp, #20]
 8000d28:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000d2c:	9204      	str	r2, [sp, #16]
 8000d2e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000d32:	9203      	str	r2, [sp, #12]
 8000d34:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000d38:	9202      	str	r2, [sp, #8]
 8000d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000d44:	f5a3 63c7 	sub.w	r3, r3, #1592	@ 0x638
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	6823      	ldr	r3, [r4, #0]
 8000d4e:	4662      	mov	r2, ip
 8000d50:	4940      	ldr	r1, [pc, #256]	@ (8000e54 <sendMachineData+0x354>)
 8000d52:	4628      	mov	r0, r5
 8000d54:	f00d f97e 	bl	800e054 <siprintf>

	len = strlen(local_txA);
 8000d58:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fa61 	bl	8000224 <strlen>
 8000d62:	4603      	mov	r3, r0
 8000d64:	f8c7 36c4 	str.w	r3, [r7, #1732]	@ 0x6c4
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000d68:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000d6c:	f8d7 26c4 	ldr.w	r2, [r7, #1732]	@ 0x6c4
 8000d70:	4939      	ldr	r1, [pc, #228]	@ (8000e58 <sendMachineData+0x358>)
 8000d72:	4618      	mov	r0, r3
 8000d74:	f00d f96e 	bl	800e054 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000d78:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fa51 	bl	8000224 <strlen>
 8000d82:	4603      	mov	r3, r0
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8000d8a:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000d8e:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8000d92:	6818      	ldr	r0, [r3, #0]
 8000d94:	f00c f872 	bl	800ce7c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000d98:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d9c:	f008 ff14 	bl	8009bc8 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000da0:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fa3d 	bl	8000224 <strlen>
 8000daa:	4603      	mov	r3, r0
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8000db2:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000db6:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8000dba:	6818      	ldr	r0, [r3, #0]
 8000dbc:	f00c f85e 	bl	800ce7c <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000dc0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000dc4:	e04a      	b.n	8000e5c <sendMachineData+0x35c>
 8000dc6:	bf00      	nop
 8000dc8:	0800ea54 	.word	0x0800ea54
 8000dcc:	0800ea64 	.word	0x0800ea64
 8000dd0:	20001124 	.word	0x20001124
 8000dd4:	200010cb 	.word	0x200010cb
 8000dd8:	200010bd 	.word	0x200010bd
 8000ddc:	200010c0 	.word	0x200010c0
 8000de0:	200010c1 	.word	0x200010c1
 8000de4:	200010c2 	.word	0x200010c2
 8000de8:	200010c9 	.word	0x200010c9
 8000dec:	200010c3 	.word	0x200010c3
 8000df0:	200010c4 	.word	0x200010c4
 8000df4:	200010c8 	.word	0x200010c8
 8000df8:	200010c5 	.word	0x200010c5
 8000dfc:	200010d5 	.word	0x200010d5
 8000e00:	200010c6 	.word	0x200010c6
 8000e04:	200010d6 	.word	0x200010d6
 8000e08:	200010c7 	.word	0x200010c7
 8000e0c:	200010d7 	.word	0x200010d7
 8000e10:	200010ca 	.word	0x200010ca
 8000e14:	200010cc 	.word	0x200010cc
 8000e18:	200010cd 	.word	0x200010cd
 8000e1c:	200010ce 	.word	0x200010ce
 8000e20:	200010cf 	.word	0x200010cf
 8000e24:	200010d0 	.word	0x200010d0
 8000e28:	200010d1 	.word	0x200010d1
 8000e2c:	200010d2 	.word	0x200010d2
 8000e30:	200010d3 	.word	0x200010d3
 8000e34:	200010d4 	.word	0x200010d4
 8000e38:	200010d8 	.word	0x200010d8
 8000e3c:	200010da 	.word	0x200010da
 8000e40:	200010b4 	.word	0x200010b4
 8000e44:	200010b5 	.word	0x200010b5
 8000e48:	200010dc 	.word	0x200010dc
 8000e4c:	20000fec 	.word	0x20000fec
 8000e50:	0800edb4 	.word	0x0800edb4
 8000e54:	0800ea84 	.word	0x0800ea84
 8000e58:	0800edc8 	.word	0x0800edc8
 8000e5c:	f008 feb4 	bl	8009bc8 <HAL_Delay>
}
 8000e60:	bf00      	nop
 8000e62:	f207 67cc 	addw	r7, r7, #1740	@ 0x6cc
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e6a:	bf00      	nop

08000e6c <checkMachineID>:

    HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
    HAL_Delay(15000);
}

int checkMachineID(UART_HandleTypeDef *huart1, const char *machineID) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	f6ad 2d18 	subw	sp, sp, #2584	@ 0xa18
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8000e78:	f6a3 2314 	subw	r3, r3, #2580	@ 0xa14
 8000e7c:	6018      	str	r0, [r3, #0]
 8000e7e:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8000e82:	f6a3 2318 	subw	r3, r3, #2584	@ 0xa18
 8000e86:	6019      	str	r1, [r3, #0]
    char local_txA[1000];
    char local_txB[50];
    int len;

    char bufferRX[1500];
    volatile uint8_t uart_rx_complete = 0;
 8000e88:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8000e8c:	f6a3 13fd 	subw	r3, r3, #2557	@ 0x9fd
 8000e90:	2200      	movs	r2, #0
 8000e92:	701a      	strb	r2, [r3, #0]

    char subMachineID[13];
    strncpy(subMachineID, machineID, 12);
 8000e94:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8000e98:	f6a3 2318 	subw	r3, r3, #2584	@ 0xa18
 8000e9c:	f107 000c 	add.w	r0, r7, #12
 8000ea0:	220c      	movs	r2, #12
 8000ea2:	6819      	ldr	r1, [r3, #0]
 8000ea4:	f00d f90d 	bl	800e0c2 <strncpy>
    subMachineID[12] = '\0';
 8000ea8:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8000eac:	f6a3 230c 	subw	r3, r3, #2572	@ 0xa0c
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	731a      	strb	r2, [r3, #12]

    sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000eb4:	4a3d      	ldr	r2, [pc, #244]	@ (8000fac <checkMachineID+0x140>)
 8000eb6:	493e      	ldr	r1, [pc, #248]	@ (8000fb0 <checkMachineID+0x144>)
 8000eb8:	483e      	ldr	r0, [pc, #248]	@ (8000fb4 <checkMachineID+0x148>)
 8000eba:	f00d f8cb 	bl	800e054 <siprintf>
    HAL_UART_Transmit_DMA(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000ebe:	483d      	ldr	r0, [pc, #244]	@ (8000fb4 <checkMachineID+0x148>)
 8000ec0:	f7ff f9b0 	bl	8000224 <strlen>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8000ecc:	f6a3 2314 	subw	r3, r3, #2580	@ 0xa14
 8000ed0:	4938      	ldr	r1, [pc, #224]	@ (8000fb4 <checkMachineID+0x148>)
 8000ed2:	6818      	ldr	r0, [r3, #0]
 8000ed4:	f00c f808 	bl	800cee8 <HAL_UART_Transmit_DMA>
    HAL_Delay(1000);
 8000ed8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000edc:	f008 fe74 	bl	8009bc8 <HAL_Delay>

    sprintf(local_txA,
 8000ee0:	f107 020c 	add.w	r2, r7, #12
 8000ee4:	f207 602c 	addw	r0, r7, #1580	@ 0x62c
 8000ee8:	4b33      	ldr	r3, [pc, #204]	@ (8000fb8 <checkMachineID+0x14c>)
 8000eea:	4934      	ldr	r1, [pc, #208]	@ (8000fbc <checkMachineID+0x150>)
 8000eec:	f00d f8b2 	bl	800e054 <siprintf>
            "GET /api/v2/machine/checkMachineIDRaw?machineID=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, mainServerWithPort);

    len = strlen(local_txA);
 8000ef0:	f207 632c 	addw	r3, r7, #1580	@ 0x62c
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff f995 	bl	8000224 <strlen>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f8c7 3a14 	str.w	r3, [r7, #2580]	@ 0xa14
    sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000f00:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 8000f04:	f8d7 2a14 	ldr.w	r2, [r7, #2580]	@ 0xa14
 8000f08:	492d      	ldr	r1, [pc, #180]	@ (8000fc0 <checkMachineID+0x154>)
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f00d f8a2 	bl	800e054 <siprintf>

    HAL_UART_Transmit_DMA(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000f10:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff f985 	bl	8000224 <strlen>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	f507 61bf 	add.w	r1, r7, #1528	@ 0x5f8
 8000f22:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8000f26:	f6a3 2314 	subw	r3, r3, #2580	@ 0xa14
 8000f2a:	6818      	ldr	r0, [r3, #0]
 8000f2c:	f00b ffdc 	bl	800cee8 <HAL_UART_Transmit_DMA>
    HAL_Delay(2000);
 8000f30:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f34:	f008 fe48 	bl	8009bc8 <HAL_Delay>

    HAL_UART_Transmit_DMA(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000f38:	f207 632c 	addw	r3, r7, #1580	@ 0x62c
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff f971 	bl	8000224 <strlen>
 8000f42:	4603      	mov	r3, r0
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	f207 612c 	addw	r1, r7, #1580	@ 0x62c
 8000f4a:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8000f4e:	f6a3 2314 	subw	r3, r3, #2580	@ 0xa14
 8000f52:	6818      	ldr	r0, [r3, #0]
 8000f54:	f00b ffc8 	bl	800cee8 <HAL_UART_Transmit_DMA>
    HAL_Delay(2000);
 8000f58:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f5c:	f008 fe34 	bl	8009bc8 <HAL_Delay>

    uart_rx_complete = 0;
 8000f60:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8000f64:	f6a3 13fd 	subw	r3, r3, #2557	@ 0x9fd
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_DMA(huart1, (uint8_t*) bufferRX, sizeof(bufferRX));
 8000f6c:	f107 011c 	add.w	r1, r7, #28
 8000f70:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8000f74:	f6a3 2314 	subw	r3, r3, #2580	@ 0xa14
 8000f78:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000f7c:	6818      	ldr	r0, [r3, #0]
 8000f7e:	f00c f823 	bl	800cfc8 <HAL_UART_Receive_DMA>
    HAL_Delay(5000);
 8000f82:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f86:	f008 fe1f 	bl	8009bc8 <HAL_Delay>
            return 0; // Zaman aşımı
        }
    }*/

    // HTTP yanıt kodunu kontrol et
    if (strstr(bufferRX, "HTTP/1.1 200 OK")) {
 8000f8a:	f107 031c 	add.w	r3, r7, #28
 8000f8e:	490d      	ldr	r1, [pc, #52]	@ (8000fc4 <checkMachineID+0x158>)
 8000f90:	4618      	mov	r0, r3
 8000f92:	f00d f8a9 	bl	800e0e8 <strstr>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <checkMachineID+0x134>
        return 1;  // Başarılı
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e000      	b.n	8000fa2 <checkMachineID+0x136>
    } else {
        return 0;  // Başarısız
 8000fa0:	2300      	movs	r3, #0
    }
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f607 2718 	addw	r7, r7, #2584	@ 0xa18
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	0800ea54 	.word	0x0800ea54
 8000fb0:	0800ea64 	.word	0x0800ea64
 8000fb4:	20001124 	.word	0x20001124
 8000fb8:	0800edb4 	.word	0x0800edb4
 8000fbc:	0800f200 	.word	0x0800f200
 8000fc0:	0800edc8 	.word	0x0800edc8
 8000fc4:	0800f24c 	.word	0x0800f24c

08000fc8 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b089      	sub	sp, #36	@ 0x24
 8000fcc:	af04      	add	r7, sp, #16
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000fd2:	4b25      	ldr	r3, [pc, #148]	@ (8001068 <hata2EEPROM+0xa0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	1e5a      	subs	r2, r3, #1
 8000fd8:	4b24      	ldr	r3, [pc, #144]	@ (800106c <hata2EEPROM+0xa4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4a24      	ldr	r2, [pc, #144]	@ (8001070 <hata2EEPROM+0xa8>)
 8000fe0:	5cd3      	ldrb	r3, [r2, r3]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d002      	beq.n	8000fec <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000fe6:	f000 f8d1 	bl	800118c <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000fea:	e000      	b.n	8000fee <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000fec:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	e012      	b.n	800101a <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800106c <hata2EEPROM+0xa4>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a1c      	ldr	r2, [pc, #112]	@ (8001070 <hata2EEPROM+0xa8>)
 8000ffe:	5cd3      	ldrb	r3, [r2, r3]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d107      	bne.n	8001014 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8001004:	4b19      	ldr	r3, [pc, #100]	@ (800106c <hata2EEPROM+0xa4>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	4918      	ldr	r1, [pc, #96]	@ (8001070 <hata2EEPROM+0xa8>)
 800100e:	79fa      	ldrb	r2, [r7, #7]
 8001010:	54ca      	strb	r2, [r1, r3]
					break;
 8001012:	e007      	b.n	8001024 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	3301      	adds	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b13      	ldr	r3, [pc, #76]	@ (8001068 <hata2EEPROM+0xa0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	68fa      	ldr	r2, [r7, #12]
 8001020:	429a      	cmp	r2, r3
 8001022:	dbe7      	blt.n	8000ff4 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8001024:	4b11      	ldr	r3, [pc, #68]	@ (800106c <hata2EEPROM+0xa4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	b299      	uxth	r1, r3
 800102a:	4b0f      	ldr	r3, [pc, #60]	@ (8001068 <hata2EEPROM+0xa0>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	b298      	uxth	r0, r3
 8001030:	4b0e      	ldr	r3, [pc, #56]	@ (800106c <hata2EEPROM+0xa4>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a0e      	ldr	r2, [pc, #56]	@ (8001070 <hata2EEPROM+0xa8>)
 8001036:	4413      	add	r3, r2
 8001038:	4a0b      	ldr	r2, [pc, #44]	@ (8001068 <hata2EEPROM+0xa0>)
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	b292      	uxth	r2, r2
 800103e:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 8001042:	9402      	str	r4, [sp, #8]
 8001044:	9201      	str	r2, [sp, #4]
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	4603      	mov	r3, r0
 800104a:	460a      	mov	r2, r1
 800104c:	21a0      	movs	r1, #160	@ 0xa0
 800104e:	4809      	ldr	r0, [pc, #36]	@ (8001074 <hata2EEPROM+0xac>)
 8001050:	f009 fed2 	bl	800adf8 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8001054:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001058:	f008 fdb6 	bl	8009bc8 <HAL_Delay>
	eepromKontrol();
 800105c:	f7ff f8ea 	bl	8000234 <eepromKontrol>
}
 8001060:	bf00      	nop
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	bd90      	pop	{r4, r7, pc}
 8001068:	20000094 	.word	0x20000094
 800106c:	20000098 	.word	0x20000098
 8001070:	20000fec 	.word	0x20000fec
 8001074:	2000193c 	.word	0x2000193c

08001078 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d10f      	bne.n	80010a8 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8001088:	4a38      	ldr	r2, [pc, #224]	@ (800116c <hataKoduLcdGoster+0xf4>)
 800108a:	2101      	movs	r1, #1
 800108c:	2001      	movs	r0, #1
 800108e:	f008 f841 	bl	8009114 <lcd_print>
		lcd_print(2, 1, "1");
 8001092:	4a37      	ldr	r2, [pc, #220]	@ (8001170 <hataKoduLcdGoster+0xf8>)
 8001094:	2101      	movs	r1, #1
 8001096:	2002      	movs	r0, #2
 8001098:	f008 f83c 	bl	8009114 <lcd_print>
		lcd_print(2, 7, "          ");
 800109c:	4a35      	ldr	r2, [pc, #212]	@ (8001174 <hataKoduLcdGoster+0xfc>)
 800109e:	2107      	movs	r1, #7
 80010a0:	2002      	movs	r0, #2
 80010a2:	f008 f837 	bl	8009114 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 80010a6:	e05d      	b.n	8001164 <hataKoduLcdGoster+0xec>
	} else if(x==2){
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d10f      	bne.n	80010ce <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 80010ae:	4a2f      	ldr	r2, [pc, #188]	@ (800116c <hataKoduLcdGoster+0xf4>)
 80010b0:	2101      	movs	r1, #1
 80010b2:	2001      	movs	r0, #1
 80010b4:	f008 f82e 	bl	8009114 <lcd_print>
		lcd_print(2, 2, "2");
 80010b8:	4a2f      	ldr	r2, [pc, #188]	@ (8001178 <hataKoduLcdGoster+0x100>)
 80010ba:	2102      	movs	r1, #2
 80010bc:	2002      	movs	r0, #2
 80010be:	f008 f829 	bl	8009114 <lcd_print>
		lcd_print(2, 7, "          ");
 80010c2:	4a2c      	ldr	r2, [pc, #176]	@ (8001174 <hataKoduLcdGoster+0xfc>)
 80010c4:	2107      	movs	r1, #7
 80010c6:	2002      	movs	r0, #2
 80010c8:	f008 f824 	bl	8009114 <lcd_print>
}
 80010cc:	e04a      	b.n	8001164 <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d10f      	bne.n	80010f4 <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 80010d4:	4a25      	ldr	r2, [pc, #148]	@ (800116c <hataKoduLcdGoster+0xf4>)
 80010d6:	2101      	movs	r1, #1
 80010d8:	2001      	movs	r0, #1
 80010da:	f008 f81b 	bl	8009114 <lcd_print>
		lcd_print(2, 3, "3");
 80010de:	4a27      	ldr	r2, [pc, #156]	@ (800117c <hataKoduLcdGoster+0x104>)
 80010e0:	2103      	movs	r1, #3
 80010e2:	2002      	movs	r0, #2
 80010e4:	f008 f816 	bl	8009114 <lcd_print>
		lcd_print(2, 7, "          ");
 80010e8:	4a22      	ldr	r2, [pc, #136]	@ (8001174 <hataKoduLcdGoster+0xfc>)
 80010ea:	2107      	movs	r1, #7
 80010ec:	2002      	movs	r0, #2
 80010ee:	f008 f811 	bl	8009114 <lcd_print>
}
 80010f2:	e037      	b.n	8001164 <hataKoduLcdGoster+0xec>
	} else if(x==4){
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d10f      	bne.n	800111a <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 80010fa:	4a1c      	ldr	r2, [pc, #112]	@ (800116c <hataKoduLcdGoster+0xf4>)
 80010fc:	2101      	movs	r1, #1
 80010fe:	2001      	movs	r0, #1
 8001100:	f008 f808 	bl	8009114 <lcd_print>
		lcd_print(2, 4, "4");
 8001104:	4a1e      	ldr	r2, [pc, #120]	@ (8001180 <hataKoduLcdGoster+0x108>)
 8001106:	2104      	movs	r1, #4
 8001108:	2002      	movs	r0, #2
 800110a:	f008 f803 	bl	8009114 <lcd_print>
		lcd_print(2, 7, "          ");
 800110e:	4a19      	ldr	r2, [pc, #100]	@ (8001174 <hataKoduLcdGoster+0xfc>)
 8001110:	2107      	movs	r1, #7
 8001112:	2002      	movs	r0, #2
 8001114:	f007 fffe 	bl	8009114 <lcd_print>
}
 8001118:	e024      	b.n	8001164 <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b05      	cmp	r3, #5
 800111e:	d10f      	bne.n	8001140 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8001120:	4a12      	ldr	r2, [pc, #72]	@ (800116c <hataKoduLcdGoster+0xf4>)
 8001122:	2101      	movs	r1, #1
 8001124:	2001      	movs	r0, #1
 8001126:	f007 fff5 	bl	8009114 <lcd_print>
		lcd_print(2, 5, "5");
 800112a:	4a16      	ldr	r2, [pc, #88]	@ (8001184 <hataKoduLcdGoster+0x10c>)
 800112c:	2105      	movs	r1, #5
 800112e:	2002      	movs	r0, #2
 8001130:	f007 fff0 	bl	8009114 <lcd_print>
		lcd_print(2, 7, "          ");
 8001134:	4a0f      	ldr	r2, [pc, #60]	@ (8001174 <hataKoduLcdGoster+0xfc>)
 8001136:	2107      	movs	r1, #7
 8001138:	2002      	movs	r0, #2
 800113a:	f007 ffeb 	bl	8009114 <lcd_print>
}
 800113e:	e011      	b.n	8001164 <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b06      	cmp	r3, #6
 8001144:	d10e      	bne.n	8001164 <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 8001146:	4a09      	ldr	r2, [pc, #36]	@ (800116c <hataKoduLcdGoster+0xf4>)
 8001148:	2101      	movs	r1, #1
 800114a:	2001      	movs	r0, #1
 800114c:	f007 ffe2 	bl	8009114 <lcd_print>
		lcd_print(2, 6, "6");
 8001150:	4a0d      	ldr	r2, [pc, #52]	@ (8001188 <hataKoduLcdGoster+0x110>)
 8001152:	2106      	movs	r1, #6
 8001154:	2002      	movs	r0, #2
 8001156:	f007 ffdd 	bl	8009114 <lcd_print>
		lcd_print(2, 7, "          ");
 800115a:	4a06      	ldr	r2, [pc, #24]	@ (8001174 <hataKoduLcdGoster+0xfc>)
 800115c:	2107      	movs	r1, #7
 800115e:	2002      	movs	r0, #2
 8001160:	f007 ffd8 	bl	8009114 <lcd_print>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200018b0 	.word	0x200018b0
 8001170:	0800f25c 	.word	0x0800f25c
 8001174:	0800f260 	.word	0x0800f260
 8001178:	0800f26c 	.word	0x0800f26c
 800117c:	0800f270 	.word	0x0800f270
 8001180:	0800f274 	.word	0x0800f274
 8001184:	0800f278 	.word	0x0800f278
 8001188:	0800f27c 	.word	0x0800f27c

0800118c <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8001192:	2300      	movs	r3, #0
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	e009      	b.n	80011ac <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8001198:	4a0a      	ldr	r2, [pc, #40]	@ (80011c4 <eepromDataFillWithEmpty+0x38>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011a0:	4a09      	ldr	r2, [pc, #36]	@ (80011c8 <eepromDataFillWithEmpty+0x3c>)
 80011a2:	2100      	movs	r1, #0
 80011a4:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3301      	adds	r3, #1
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	4b07      	ldr	r3, [pc, #28]	@ (80011cc <eepromDataFillWithEmpty+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	dbf0      	blt.n	8001198 <eepromDataFillWithEmpty+0xc>
	}
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	bc80      	pop	{r7}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	2000006c 	.word	0x2000006c
 80011c8:	20000fec 	.word	0x20000fec
 80011cc:	20000094 	.word	0x20000094

080011d0 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 80011d6:	463b      	mov	r3, r7
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 80011e2:	4b50      	ldr	r3, [pc, #320]	@ (8001324 <i2cTest+0x154>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b4e      	ldr	r3, [pc, #312]	@ (8001324 <i2cTest+0x154>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f022 0201 	bic.w	r2, r2, #1
 80011f0:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 80011f2:	484c      	ldr	r0, [pc, #304]	@ (8001324 <i2cTest+0x154>)
 80011f4:	f009 fcd2 	bl	800ab9c <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011f8:	23c0      	movs	r3, #192	@ 0xc0
 80011fa:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 80011fc:	2311      	movs	r3, #17
 80011fe:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8001200:	2301      	movs	r3, #1
 8001202:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8001204:	2303      	movs	r3, #3
 8001206:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8001208:	463b      	mov	r3, r7
 800120a:	4619      	mov	r1, r3
 800120c:	4846      	ldr	r0, [pc, #280]	@ (8001328 <i2cTest+0x158>)
 800120e:	f009 f8d9 	bl	800a3c4 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
 8001214:	2140      	movs	r1, #64	@ 0x40
 8001216:	4844      	ldr	r0, [pc, #272]	@ (8001328 <i2cTest+0x158>)
 8001218:	f009 fb4b 	bl	800a8b2 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800121c:	2201      	movs	r2, #1
 800121e:	2180      	movs	r1, #128	@ 0x80
 8001220:	4841      	ldr	r0, [pc, #260]	@ (8001328 <i2cTest+0x158>)
 8001222:	f009 fb46 	bl	800a8b2 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8001226:	200a      	movs	r0, #10
 8001228:	f008 fcce 	bl	8009bc8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800122c:	bf00      	nop
 800122e:	2140      	movs	r1, #64	@ 0x40
 8001230:	483d      	ldr	r0, [pc, #244]	@ (8001328 <i2cTest+0x158>)
 8001232:	f009 fb27 	bl	800a884 <HAL_GPIO_ReadPin>
 8001236:	4603      	mov	r3, r0
 8001238:	2b01      	cmp	r3, #1
 800123a:	d006      	beq.n	800124a <i2cTest+0x7a>
 800123c:	2180      	movs	r1, #128	@ 0x80
 800123e:	483a      	ldr	r0, [pc, #232]	@ (8001328 <i2cTest+0x158>)
 8001240:	f009 fb20 	bl	800a884 <HAL_GPIO_ReadPin>
 8001244:	4603      	mov	r3, r0
 8001246:	2b01      	cmp	r3, #1
 8001248:	d1f1      	bne.n	800122e <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	2180      	movs	r1, #128	@ 0x80
 800124e:	4836      	ldr	r0, [pc, #216]	@ (8001328 <i2cTest+0x158>)
 8001250:	f009 fb2f 	bl	800a8b2 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8001254:	200a      	movs	r0, #10
 8001256:	f008 fcb7 	bl	8009bc8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 800125a:	bf00      	nop
 800125c:	2180      	movs	r1, #128	@ 0x80
 800125e:	4832      	ldr	r0, [pc, #200]	@ (8001328 <i2cTest+0x158>)
 8001260:	f009 fb10 	bl	800a884 <HAL_GPIO_ReadPin>
 8001264:	4603      	mov	r3, r0
 8001266:	2b01      	cmp	r3, #1
 8001268:	d0f8      	beq.n	800125c <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	2140      	movs	r1, #64	@ 0x40
 800126e:	482e      	ldr	r0, [pc, #184]	@ (8001328 <i2cTest+0x158>)
 8001270:	f009 fb1f 	bl	800a8b2 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001274:	200a      	movs	r0, #10
 8001276:	f008 fca7 	bl	8009bc8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 800127a:	bf00      	nop
 800127c:	2140      	movs	r1, #64	@ 0x40
 800127e:	482a      	ldr	r0, [pc, #168]	@ (8001328 <i2cTest+0x158>)
 8001280:	f009 fb00 	bl	800a884 <HAL_GPIO_ReadPin>
 8001284:	4603      	mov	r3, r0
 8001286:	2b01      	cmp	r3, #1
 8001288:	d0f8      	beq.n	800127c <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800128a:	2201      	movs	r2, #1
 800128c:	2140      	movs	r1, #64	@ 0x40
 800128e:	4826      	ldr	r0, [pc, #152]	@ (8001328 <i2cTest+0x158>)
 8001290:	f009 fb0f 	bl	800a8b2 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001294:	200a      	movs	r0, #10
 8001296:	f008 fc97 	bl	8009bc8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 800129a:	bf00      	nop
 800129c:	2140      	movs	r1, #64	@ 0x40
 800129e:	4822      	ldr	r0, [pc, #136]	@ (8001328 <i2cTest+0x158>)
 80012a0:	f009 faf0 	bl	800a884 <HAL_GPIO_ReadPin>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d1f8      	bne.n	800129c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80012aa:	2201      	movs	r2, #1
 80012ac:	2180      	movs	r1, #128	@ 0x80
 80012ae:	481e      	ldr	r0, [pc, #120]	@ (8001328 <i2cTest+0x158>)
 80012b0:	f009 faff 	bl	800a8b2 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80012b4:	200a      	movs	r0, #10
 80012b6:	f008 fc87 	bl	8009bc8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80012ba:	bf00      	nop
 80012bc:	2180      	movs	r1, #128	@ 0x80
 80012be:	481a      	ldr	r0, [pc, #104]	@ (8001328 <i2cTest+0x158>)
 80012c0:	f009 fae0 	bl	800a884 <HAL_GPIO_ReadPin>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d1f8      	bne.n	80012bc <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012ca:	23c0      	movs	r3, #192	@ 0xc0
 80012cc:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80012ce:	2312      	movs	r3, #18
 80012d0:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80012d2:	2301      	movs	r3, #1
 80012d4:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80012da:	463b      	mov	r3, r7
 80012dc:	4619      	mov	r1, r3
 80012de:	4812      	ldr	r0, [pc, #72]	@ (8001328 <i2cTest+0x158>)
 80012e0:	f009 f870 	bl	800a3c4 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <i2cTest+0x154>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001324 <i2cTest+0x154>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80012f2:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80012f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <i2cTest+0x154>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <i2cTest+0x154>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001302:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8001304:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <i2cTest+0x154>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <i2cTest+0x154>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f042 0201 	orr.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8001314:	4803      	ldr	r0, [pc, #12]	@ (8001324 <i2cTest+0x154>)
 8001316:	f009 fafd 	bl	800a914 <HAL_I2C_Init>
}
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2000193c 	.word	0x2000193c
 8001328:	40010c00 	.word	0x40010c00

0800132c <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8001336:	20c8      	movs	r0, #200	@ 0xc8
 8001338:	f008 fc46 	bl	8009bc8 <HAL_Delay>
	lcd_clear();
 800133c:	f007 ff16 	bl	800916c <lcd_clear>
	if(type == 1 && page == 0) {
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d13e      	bne.n	80013c4 <printTemplate+0x98>
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d13b      	bne.n	80013c4 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 800134c:	4a9a      	ldr	r2, [pc, #616]	@ (80015b8 <printTemplate+0x28c>)
 800134e:	2101      	movs	r1, #1
 8001350:	2001      	movs	r0, #1
 8001352:	f007 fedf 	bl	8009114 <lcd_print>
		lcd_print(2, 3, "0");
 8001356:	4a99      	ldr	r2, [pc, #612]	@ (80015bc <printTemplate+0x290>)
 8001358:	2103      	movs	r1, #3
 800135a:	2002      	movs	r0, #2
 800135c:	f007 feda 	bl	8009114 <lcd_print>
		lcd_print(2, 4, "1");
 8001360:	4a97      	ldr	r2, [pc, #604]	@ (80015c0 <printTemplate+0x294>)
 8001362:	2104      	movs	r1, #4
 8001364:	2002      	movs	r0, #2
 8001366:	f007 fed5 	bl	8009114 <lcd_print>
		lcd_print(2, 5, "2");
 800136a:	4a96      	ldr	r2, [pc, #600]	@ (80015c4 <printTemplate+0x298>)
 800136c:	2105      	movs	r1, #5
 800136e:	2002      	movs	r0, #2
 8001370:	f007 fed0 	bl	8009114 <lcd_print>
		lcd_print(2, 6, "3");
 8001374:	4a94      	ldr	r2, [pc, #592]	@ (80015c8 <printTemplate+0x29c>)
 8001376:	2106      	movs	r1, #6
 8001378:	2002      	movs	r0, #2
 800137a:	f007 fecb 	bl	8009114 <lcd_print>
		lcd_print(2, 7, "4");
 800137e:	4a93      	ldr	r2, [pc, #588]	@ (80015cc <printTemplate+0x2a0>)
 8001380:	2107      	movs	r1, #7
 8001382:	2002      	movs	r0, #2
 8001384:	f007 fec6 	bl	8009114 <lcd_print>
		lcd_print(2, 10, "5");
 8001388:	4a91      	ldr	r2, [pc, #580]	@ (80015d0 <printTemplate+0x2a4>)
 800138a:	210a      	movs	r1, #10
 800138c:	2002      	movs	r0, #2
 800138e:	f007 fec1 	bl	8009114 <lcd_print>
		lcd_print(2, 11, "6");
 8001392:	4a90      	ldr	r2, [pc, #576]	@ (80015d4 <printTemplate+0x2a8>)
 8001394:	210b      	movs	r1, #11
 8001396:	2002      	movs	r0, #2
 8001398:	f007 febc 	bl	8009114 <lcd_print>
		lcd_print(2, 12, "7");
 800139c:	4a8e      	ldr	r2, [pc, #568]	@ (80015d8 <printTemplate+0x2ac>)
 800139e:	210c      	movs	r1, #12
 80013a0:	2002      	movs	r0, #2
 80013a2:	f007 feb7 	bl	8009114 <lcd_print>
		lcd_print(2, 13, "8");
 80013a6:	4a8d      	ldr	r2, [pc, #564]	@ (80015dc <printTemplate+0x2b0>)
 80013a8:	210d      	movs	r1, #13
 80013aa:	2002      	movs	r0, #2
 80013ac:	f007 feb2 	bl	8009114 <lcd_print>
		lcd_print(2, 14, "9");
 80013b0:	4a8b      	ldr	r2, [pc, #556]	@ (80015e0 <printTemplate+0x2b4>)
 80013b2:	210e      	movs	r1, #14
 80013b4:	2002      	movs	r0, #2
 80013b6:	f007 fead 	bl	8009114 <lcd_print>
		lcd_gotoxy(2, 3);
 80013ba:	2103      	movs	r1, #3
 80013bc:	2002      	movs	r0, #2
 80013be:	f007 fe8a 	bl	80090d6 <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 80013c2:	e0f5      	b.n	80015b0 <printTemplate+0x284>
	} else if(type == 2) {
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d178      	bne.n	80014bc <printTemplate+0x190>
		if(page == 1) {
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d114      	bne.n	80013fa <printTemplate+0xce>
			lcd_clear();
 80013d0:	f007 fecc 	bl	800916c <lcd_clear>
			HAL_Delay(100);
 80013d4:	2064      	movs	r0, #100	@ 0x64
 80013d6:	f008 fbf7 	bl	8009bc8 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 80013da:	4a82      	ldr	r2, [pc, #520]	@ (80015e4 <printTemplate+0x2b8>)
 80013dc:	2101      	movs	r1, #1
 80013de:	2001      	movs	r0, #1
 80013e0:	f007 fe98 	bl	8009114 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80013e4:	4a80      	ldr	r2, [pc, #512]	@ (80015e8 <printTemplate+0x2bc>)
 80013e6:	2107      	movs	r1, #7
 80013e8:	2001      	movs	r0, #1
 80013ea:	f007 fe93 	bl	8009114 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80013ee:	4a7f      	ldr	r2, [pc, #508]	@ (80015ec <printTemplate+0x2c0>)
 80013f0:	2101      	movs	r1, #1
 80013f2:	2002      	movs	r0, #2
 80013f4:	f007 fe8e 	bl	8009114 <lcd_print>
}
 80013f8:	e0da      	b.n	80015b0 <printTemplate+0x284>
		} else if(page == 2) {
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d114      	bne.n	800142a <printTemplate+0xfe>
			lcd_clear();
 8001400:	f007 feb4 	bl	800916c <lcd_clear>
			HAL_Delay(100);
 8001404:	2064      	movs	r0, #100	@ 0x64
 8001406:	f008 fbdf 	bl	8009bc8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800140a:	4a79      	ldr	r2, [pc, #484]	@ (80015f0 <printTemplate+0x2c4>)
 800140c:	2101      	movs	r1, #1
 800140e:	2001      	movs	r0, #1
 8001410:	f007 fe80 	bl	8009114 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001414:	4a74      	ldr	r2, [pc, #464]	@ (80015e8 <printTemplate+0x2bc>)
 8001416:	2107      	movs	r1, #7
 8001418:	2001      	movs	r0, #1
 800141a:	f007 fe7b 	bl	8009114 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 800141e:	4a75      	ldr	r2, [pc, #468]	@ (80015f4 <printTemplate+0x2c8>)
 8001420:	2101      	movs	r1, #1
 8001422:	2002      	movs	r0, #2
 8001424:	f007 fe76 	bl	8009114 <lcd_print>
}
 8001428:	e0c2      	b.n	80015b0 <printTemplate+0x284>
		} else if(page == 3) {
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	2b03      	cmp	r3, #3
 800142e:	d114      	bne.n	800145a <printTemplate+0x12e>
			lcd_clear();
 8001430:	f007 fe9c 	bl	800916c <lcd_clear>
			HAL_Delay(100);
 8001434:	2064      	movs	r0, #100	@ 0x64
 8001436:	f008 fbc7 	bl	8009bc8 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 800143a:	4a6a      	ldr	r2, [pc, #424]	@ (80015e4 <printTemplate+0x2b8>)
 800143c:	2101      	movs	r1, #1
 800143e:	2001      	movs	r0, #1
 8001440:	f007 fe68 	bl	8009114 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001444:	4a68      	ldr	r2, [pc, #416]	@ (80015e8 <printTemplate+0x2bc>)
 8001446:	2107      	movs	r1, #7
 8001448:	2001      	movs	r0, #1
 800144a:	f007 fe63 	bl	8009114 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 800144e:	4a6a      	ldr	r2, [pc, #424]	@ (80015f8 <printTemplate+0x2cc>)
 8001450:	2101      	movs	r1, #1
 8001452:	2002      	movs	r0, #2
 8001454:	f007 fe5e 	bl	8009114 <lcd_print>
}
 8001458:	e0aa      	b.n	80015b0 <printTemplate+0x284>
		} else if(page == 4) {
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	2b04      	cmp	r3, #4
 800145e:	d114      	bne.n	800148a <printTemplate+0x15e>
			lcd_clear();
 8001460:	f007 fe84 	bl	800916c <lcd_clear>
			HAL_Delay(100);
 8001464:	2064      	movs	r0, #100	@ 0x64
 8001466:	f008 fbaf 	bl	8009bc8 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 800146a:	4a5e      	ldr	r2, [pc, #376]	@ (80015e4 <printTemplate+0x2b8>)
 800146c:	2101      	movs	r1, #1
 800146e:	2001      	movs	r0, #1
 8001470:	f007 fe50 	bl	8009114 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001474:	4a5c      	ldr	r2, [pc, #368]	@ (80015e8 <printTemplate+0x2bc>)
 8001476:	2107      	movs	r1, #7
 8001478:	2001      	movs	r0, #1
 800147a:	f007 fe4b 	bl	8009114 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 800147e:	4a5f      	ldr	r2, [pc, #380]	@ (80015fc <printTemplate+0x2d0>)
 8001480:	2101      	movs	r1, #1
 8001482:	2002      	movs	r0, #2
 8001484:	f007 fe46 	bl	8009114 <lcd_print>
}
 8001488:	e092      	b.n	80015b0 <printTemplate+0x284>
		} else if(page == 5) {
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	2b05      	cmp	r3, #5
 800148e:	f040 808f 	bne.w	80015b0 <printTemplate+0x284>
			lcd_clear();
 8001492:	f007 fe6b 	bl	800916c <lcd_clear>
			HAL_Delay(100);
 8001496:	2064      	movs	r0, #100	@ 0x64
 8001498:	f008 fb96 	bl	8009bc8 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 800149c:	4a51      	ldr	r2, [pc, #324]	@ (80015e4 <printTemplate+0x2b8>)
 800149e:	2101      	movs	r1, #1
 80014a0:	2001      	movs	r0, #1
 80014a2:	f007 fe37 	bl	8009114 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80014a6:	4a50      	ldr	r2, [pc, #320]	@ (80015e8 <printTemplate+0x2bc>)
 80014a8:	2107      	movs	r1, #7
 80014aa:	2001      	movs	r0, #1
 80014ac:	f007 fe32 	bl	8009114 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 80014b0:	4a53      	ldr	r2, [pc, #332]	@ (8001600 <printTemplate+0x2d4>)
 80014b2:	2101      	movs	r1, #1
 80014b4:	2002      	movs	r0, #2
 80014b6:	f007 fe2d 	bl	8009114 <lcd_print>
}
 80014ba:	e079      	b.n	80015b0 <printTemplate+0x284>
	} else if(type == 3) {
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d176      	bne.n	80015b0 <printTemplate+0x284>
		if(page == 1) {
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d114      	bne.n	80014f2 <printTemplate+0x1c6>
			lcd_clear();
 80014c8:	f007 fe50 	bl	800916c <lcd_clear>
			HAL_Delay(100);
 80014cc:	2064      	movs	r0, #100	@ 0x64
 80014ce:	f008 fb7b 	bl	8009bc8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80014d2:	4a4c      	ldr	r2, [pc, #304]	@ (8001604 <printTemplate+0x2d8>)
 80014d4:	2101      	movs	r1, #1
 80014d6:	2001      	movs	r0, #1
 80014d8:	f007 fe1c 	bl	8009114 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80014dc:	4a4a      	ldr	r2, [pc, #296]	@ (8001608 <printTemplate+0x2dc>)
 80014de:	2107      	movs	r1, #7
 80014e0:	2001      	movs	r0, #1
 80014e2:	f007 fe17 	bl	8009114 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80014e6:	4a41      	ldr	r2, [pc, #260]	@ (80015ec <printTemplate+0x2c0>)
 80014e8:	2101      	movs	r1, #1
 80014ea:	2002      	movs	r0, #2
 80014ec:	f007 fe12 	bl	8009114 <lcd_print>
}
 80014f0:	e05e      	b.n	80015b0 <printTemplate+0x284>
		} else if(page == 2) {
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d114      	bne.n	8001522 <printTemplate+0x1f6>
			lcd_clear();
 80014f8:	f007 fe38 	bl	800916c <lcd_clear>
			HAL_Delay(100);
 80014fc:	2064      	movs	r0, #100	@ 0x64
 80014fe:	f008 fb63 	bl	8009bc8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001502:	4a40      	ldr	r2, [pc, #256]	@ (8001604 <printTemplate+0x2d8>)
 8001504:	2101      	movs	r1, #1
 8001506:	2001      	movs	r0, #1
 8001508:	f007 fe04 	bl	8009114 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800150c:	4a3e      	ldr	r2, [pc, #248]	@ (8001608 <printTemplate+0x2dc>)
 800150e:	2107      	movs	r1, #7
 8001510:	2001      	movs	r0, #1
 8001512:	f007 fdff 	bl	8009114 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001516:	4a37      	ldr	r2, [pc, #220]	@ (80015f4 <printTemplate+0x2c8>)
 8001518:	2101      	movs	r1, #1
 800151a:	2002      	movs	r0, #2
 800151c:	f007 fdfa 	bl	8009114 <lcd_print>
}
 8001520:	e046      	b.n	80015b0 <printTemplate+0x284>
		} else if(page == 3) {
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2b03      	cmp	r3, #3
 8001526:	d114      	bne.n	8001552 <printTemplate+0x226>
			lcd_clear();
 8001528:	f007 fe20 	bl	800916c <lcd_clear>
			HAL_Delay(100);
 800152c:	2064      	movs	r0, #100	@ 0x64
 800152e:	f008 fb4b 	bl	8009bc8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001532:	4a34      	ldr	r2, [pc, #208]	@ (8001604 <printTemplate+0x2d8>)
 8001534:	2101      	movs	r1, #1
 8001536:	2001      	movs	r0, #1
 8001538:	f007 fdec 	bl	8009114 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800153c:	4a32      	ldr	r2, [pc, #200]	@ (8001608 <printTemplate+0x2dc>)
 800153e:	2107      	movs	r1, #7
 8001540:	2001      	movs	r0, #1
 8001542:	f007 fde7 	bl	8009114 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8001546:	4a2c      	ldr	r2, [pc, #176]	@ (80015f8 <printTemplate+0x2cc>)
 8001548:	2101      	movs	r1, #1
 800154a:	2002      	movs	r0, #2
 800154c:	f007 fde2 	bl	8009114 <lcd_print>
}
 8001550:	e02e      	b.n	80015b0 <printTemplate+0x284>
		} else if(page == 4) {
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	2b04      	cmp	r3, #4
 8001556:	d114      	bne.n	8001582 <printTemplate+0x256>
			lcd_clear();
 8001558:	f007 fe08 	bl	800916c <lcd_clear>
			HAL_Delay(100);
 800155c:	2064      	movs	r0, #100	@ 0x64
 800155e:	f008 fb33 	bl	8009bc8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001562:	4a28      	ldr	r2, [pc, #160]	@ (8001604 <printTemplate+0x2d8>)
 8001564:	2101      	movs	r1, #1
 8001566:	2001      	movs	r0, #1
 8001568:	f007 fdd4 	bl	8009114 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800156c:	4a26      	ldr	r2, [pc, #152]	@ (8001608 <printTemplate+0x2dc>)
 800156e:	2107      	movs	r1, #7
 8001570:	2001      	movs	r0, #1
 8001572:	f007 fdcf 	bl	8009114 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8001576:	4a21      	ldr	r2, [pc, #132]	@ (80015fc <printTemplate+0x2d0>)
 8001578:	2101      	movs	r1, #1
 800157a:	2002      	movs	r0, #2
 800157c:	f007 fdca 	bl	8009114 <lcd_print>
}
 8001580:	e016      	b.n	80015b0 <printTemplate+0x284>
		} else if(page == 5) {
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b05      	cmp	r3, #5
 8001586:	d113      	bne.n	80015b0 <printTemplate+0x284>
			lcd_clear();
 8001588:	f007 fdf0 	bl	800916c <lcd_clear>
			HAL_Delay(100);
 800158c:	2064      	movs	r0, #100	@ 0x64
 800158e:	f008 fb1b 	bl	8009bc8 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001592:	4a1c      	ldr	r2, [pc, #112]	@ (8001604 <printTemplate+0x2d8>)
 8001594:	2101      	movs	r1, #1
 8001596:	2001      	movs	r0, #1
 8001598:	f007 fdbc 	bl	8009114 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800159c:	4a1a      	ldr	r2, [pc, #104]	@ (8001608 <printTemplate+0x2dc>)
 800159e:	2107      	movs	r1, #7
 80015a0:	2001      	movs	r0, #1
 80015a2:	f007 fdb7 	bl	8009114 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 80015a6:	4a16      	ldr	r2, [pc, #88]	@ (8001600 <printTemplate+0x2d4>)
 80015a8:	2101      	movs	r1, #1
 80015aa:	2002      	movs	r0, #2
 80015ac:	f007 fdb2 	bl	8009114 <lcd_print>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	0800f280 	.word	0x0800f280
 80015bc:	0800f288 	.word	0x0800f288
 80015c0:	0800f28c 	.word	0x0800f28c
 80015c4:	0800f290 	.word	0x0800f290
 80015c8:	0800f294 	.word	0x0800f294
 80015cc:	0800f298 	.word	0x0800f298
 80015d0:	0800f29c 	.word	0x0800f29c
 80015d4:	0800f2a0 	.word	0x0800f2a0
 80015d8:	0800f2a4 	.word	0x0800f2a4
 80015dc:	0800f2a8 	.word	0x0800f2a8
 80015e0:	0800f2ac 	.word	0x0800f2ac
 80015e4:	0800f2b0 	.word	0x0800f2b0
 80015e8:	20001070 	.word	0x20001070
 80015ec:	0800f2c4 	.word	0x0800f2c4
 80015f0:	0800f2d8 	.word	0x0800f2d8
 80015f4:	0800f2e0 	.word	0x0800f2e0
 80015f8:	0800f2f4 	.word	0x0800f2f4
 80015fc:	0800f308 	.word	0x0800f308
 8001600:	0800f31c 	.word	0x0800f31c
 8001604:	0800f330 	.word	0x0800f330
 8001608:	20001080 	.word	0x20001080

0800160c <printCredentials>:
			}
		}
	}
}

void printCredentials(int type) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d10a      	bne.n	8001630 <printCredentials+0x24>
		//machine id yazdır
		lcd_print(2, 1, machineID);
 800161a:	4a18      	ldr	r2, [pc, #96]	@ (800167c <printCredentials+0x70>)
 800161c:	2101      	movs	r1, #1
 800161e:	2002      	movs	r0, #2
 8001620:	f007 fd78 	bl	8009114 <lcd_print>
		lcd_print(2, 13, "    ");
 8001624:	4a16      	ldr	r2, [pc, #88]	@ (8001680 <printCredentials+0x74>)
 8001626:	210d      	movs	r1, #13
 8001628:	2002      	movs	r0, #2
 800162a:	f007 fd73 	bl	8009114 <lcd_print>
		lcd_print(1, 1, "WIFI PASS       ");

		lcd_print(2, 1, "                ");
		lcd_print(2, 1, wifiPass);
	}
}
 800162e:	e021      	b.n	8001674 <printCredentials+0x68>
	} else if(type == 2) {
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d10f      	bne.n	8001656 <printCredentials+0x4a>
		lcd_print(1, 1, "WIFI SSID       ");
 8001636:	4a13      	ldr	r2, [pc, #76]	@ (8001684 <printCredentials+0x78>)
 8001638:	2101      	movs	r1, #1
 800163a:	2001      	movs	r0, #1
 800163c:	f007 fd6a 	bl	8009114 <lcd_print>
		lcd_print(2, 1, "                ");
 8001640:	4a11      	ldr	r2, [pc, #68]	@ (8001688 <printCredentials+0x7c>)
 8001642:	2101      	movs	r1, #1
 8001644:	2002      	movs	r0, #2
 8001646:	f007 fd65 	bl	8009114 <lcd_print>
		lcd_print(2, 1, wifiSSID);
 800164a:	4a10      	ldr	r2, [pc, #64]	@ (800168c <printCredentials+0x80>)
 800164c:	2101      	movs	r1, #1
 800164e:	2002      	movs	r0, #2
 8001650:	f007 fd60 	bl	8009114 <lcd_print>
}
 8001654:	e00e      	b.n	8001674 <printCredentials+0x68>
		lcd_print(1, 1, "WIFI PASS       ");
 8001656:	4a0e      	ldr	r2, [pc, #56]	@ (8001690 <printCredentials+0x84>)
 8001658:	2101      	movs	r1, #1
 800165a:	2001      	movs	r0, #1
 800165c:	f007 fd5a 	bl	8009114 <lcd_print>
		lcd_print(2, 1, "                ");
 8001660:	4a09      	ldr	r2, [pc, #36]	@ (8001688 <printCredentials+0x7c>)
 8001662:	2101      	movs	r1, #1
 8001664:	2002      	movs	r0, #2
 8001666:	f007 fd55 	bl	8009114 <lcd_print>
		lcd_print(2, 1, wifiPass);
 800166a:	4a0a      	ldr	r2, [pc, #40]	@ (8001694 <printCredentials+0x88>)
 800166c:	2101      	movs	r1, #1
 800166e:	2002      	movs	r0, #2
 8001670:	f007 fd50 	bl	8009114 <lcd_print>
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	20001064 	.word	0x20001064
 8001680:	0800f344 	.word	0x0800f344
 8001684:	0800f34c 	.word	0x0800f34c
 8001688:	0800f360 	.word	0x0800f360
 800168c:	20001070 	.word	0x20001070
 8001690:	0800f374 	.word	0x0800f374
 8001694:	20001080 	.word	0x20001080

08001698 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800169c:	f3bf 8f4f 	dsb	sy
}
 80016a0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80016a2:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <__NVIC_SystemReset+0x24>)
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80016aa:	4904      	ldr	r1, [pc, #16]	@ (80016bc <__NVIC_SystemReset+0x24>)
 80016ac:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <__NVIC_SystemReset+0x28>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80016b2:	f3bf 8f4f 	dsb	sy
}
 80016b6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <__NVIC_SystemReset+0x20>
 80016bc:	e000ed00 	.word	0xe000ed00
 80016c0:	05fa0004 	.word	0x05fa0004

080016c4 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80016ca:	2101      	movs	r1, #1
 80016cc:	488e      	ldr	r0, [pc, #568]	@ (8001908 <menu+0x244>)
 80016ce:	f009 f8d9 	bl	800a884 <HAL_GPIO_ReadPin>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	f040 8099 	bne.w	800180c <menu+0x148>
 80016da:	4b8c      	ldr	r3, [pc, #560]	@ (800190c <menu+0x248>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	f083 0301 	eor.w	r3, r3, #1
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 8091 	beq.w	800180c <menu+0x148>
		menuSayac = menuSayac+1;
 80016ea:	4b89      	ldr	r3, [pc, #548]	@ (8001910 <menu+0x24c>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	3301      	adds	r3, #1
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4b87      	ldr	r3, [pc, #540]	@ (8001910 <menu+0x24c>)
 80016f4:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80016f6:	4b86      	ldr	r3, [pc, #536]	@ (8001910 <menu+0x24c>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b24      	cmp	r3, #36	@ 0x24
 80016fc:	d102      	bne.n	8001704 <menu+0x40>
			menuSayac = 1;
 80016fe:	4b84      	ldr	r3, [pc, #528]	@ (8001910 <menu+0x24c>)
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001704:	4b82      	ldr	r3, [pc, #520]	@ (8001910 <menu+0x24c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b12      	cmp	r3, #18
 800170a:	d106      	bne.n	800171a <menu+0x56>
 800170c:	4b81      	ldr	r3, [pc, #516]	@ (8001914 <menu+0x250>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d102      	bne.n	800171a <menu+0x56>
			menuSayac = 21;
 8001714:	4b7e      	ldr	r3, [pc, #504]	@ (8001910 <menu+0x24c>)
 8001716:	2215      	movs	r2, #21
 8001718:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 800171a:	4b7d      	ldr	r3, [pc, #500]	@ (8001910 <menu+0x24c>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b08      	cmp	r3, #8
 8001720:	d106      	bne.n	8001730 <menu+0x6c>
 8001722:	4b7d      	ldr	r3, [pc, #500]	@ (8001918 <menu+0x254>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d102      	bne.n	8001730 <menu+0x6c>
			menuSayac = 16;
 800172a:	4b79      	ldr	r3, [pc, #484]	@ (8001910 <menu+0x24c>)
 800172c:	2210      	movs	r2, #16
 800172e:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001730:	4b77      	ldr	r3, [pc, #476]	@ (8001910 <menu+0x24c>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b0d      	cmp	r3, #13
 8001736:	d106      	bne.n	8001746 <menu+0x82>
 8001738:	4b77      	ldr	r3, [pc, #476]	@ (8001918 <menu+0x254>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d102      	bne.n	8001746 <menu+0x82>
			menuSayac = 16;
 8001740:	4b73      	ldr	r3, [pc, #460]	@ (8001910 <menu+0x24c>)
 8001742:	2210      	movs	r2, #16
 8001744:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001746:	4b72      	ldr	r3, [pc, #456]	@ (8001910 <menu+0x24c>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b09      	cmp	r3, #9
 800174c:	d106      	bne.n	800175c <menu+0x98>
 800174e:	4b72      	ldr	r3, [pc, #456]	@ (8001918 <menu+0x254>)
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d102      	bne.n	800175c <menu+0x98>
			menuSayac = 13;
 8001756:	4b6e      	ldr	r3, [pc, #440]	@ (8001910 <menu+0x24c>)
 8001758:	220d      	movs	r2, #13
 800175a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800175c:	4b6c      	ldr	r3, [pc, #432]	@ (8001910 <menu+0x24c>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b0a      	cmp	r3, #10
 8001762:	d10a      	bne.n	800177a <menu+0xb6>
 8001764:	4b6d      	ldr	r3, [pc, #436]	@ (800191c <menu+0x258>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d003      	beq.n	8001774 <menu+0xb0>
 800176c:	4b6b      	ldr	r3, [pc, #428]	@ (800191c <menu+0x258>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b02      	cmp	r3, #2
 8001772:	d102      	bne.n	800177a <menu+0xb6>
			menuSayac = 11;
 8001774:	4b66      	ldr	r3, [pc, #408]	@ (8001910 <menu+0x24c>)
 8001776:	220b      	movs	r2, #11
 8001778:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800177a:	4b65      	ldr	r3, [pc, #404]	@ (8001910 <menu+0x24c>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b0c      	cmp	r3, #12
 8001780:	d10e      	bne.n	80017a0 <menu+0xdc>
 8001782:	4b67      	ldr	r3, [pc, #412]	@ (8001920 <menu+0x25c>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d003      	beq.n	8001792 <menu+0xce>
 800178a:	4b65      	ldr	r3, [pc, #404]	@ (8001920 <menu+0x25c>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b02      	cmp	r3, #2
 8001790:	d106      	bne.n	80017a0 <menu+0xdc>
 8001792:	4b61      	ldr	r3, [pc, #388]	@ (8001918 <menu+0x254>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d102      	bne.n	80017a0 <menu+0xdc>
			menuSayac = 16;
 800179a:	4b5d      	ldr	r3, [pc, #372]	@ (8001910 <menu+0x24c>)
 800179c:	2210      	movs	r2, #16
 800179e:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80017a0:	4b5b      	ldr	r3, [pc, #364]	@ (8001910 <menu+0x24c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b0c      	cmp	r3, #12
 80017a6:	d10e      	bne.n	80017c6 <menu+0x102>
 80017a8:	4b5d      	ldr	r3, [pc, #372]	@ (8001920 <menu+0x25c>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d003      	beq.n	80017b8 <menu+0xf4>
 80017b0:	4b5b      	ldr	r3, [pc, #364]	@ (8001920 <menu+0x25c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d106      	bne.n	80017c6 <menu+0x102>
 80017b8:	4b57      	ldr	r3, [pc, #348]	@ (8001918 <menu+0x254>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d102      	bne.n	80017c6 <menu+0x102>
			menuSayac = 13;
 80017c0:	4b53      	ldr	r3, [pc, #332]	@ (8001910 <menu+0x24c>)
 80017c2:	220d      	movs	r2, #13
 80017c4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80017c6:	4b52      	ldr	r3, [pc, #328]	@ (8001910 <menu+0x24c>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b0f      	cmp	r3, #15
 80017cc:	d106      	bne.n	80017dc <menu+0x118>
 80017ce:	4b55      	ldr	r3, [pc, #340]	@ (8001924 <menu+0x260>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d102      	bne.n	80017dc <menu+0x118>
			menuSayac = 16;
 80017d6:	4b4e      	ldr	r3, [pc, #312]	@ (8001910 <menu+0x24c>)
 80017d8:	2210      	movs	r2, #16
 80017da:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80017dc:	4b4c      	ldr	r3, [pc, #304]	@ (8001910 <menu+0x24c>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b18      	cmp	r3, #24
 80017e2:	d106      	bne.n	80017f2 <menu+0x12e>
 80017e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001914 <menu+0x250>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d102      	bne.n	80017f2 <menu+0x12e>
			menuSayac = 26;
 80017ec:	4b48      	ldr	r3, [pc, #288]	@ (8001910 <menu+0x24c>)
 80017ee:	221a      	movs	r2, #26
 80017f0:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 80017f2:	4b47      	ldr	r3, [pc, #284]	@ (8001910 <menu+0x24c>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b21      	cmp	r3, #33	@ 0x21
 80017f8:	d106      	bne.n	8001808 <menu+0x144>
 80017fa:	4b4b      	ldr	r3, [pc, #300]	@ (8001928 <menu+0x264>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <menu+0x144>
			menuSayac = 35;
 8001802:	4b43      	ldr	r3, [pc, #268]	@ (8001910 <menu+0x24c>)
 8001804:	2223      	movs	r2, #35	@ 0x23
 8001806:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001808:	f002 fca2 	bl	8004150 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 800180c:	2108      	movs	r1, #8
 800180e:	4847      	ldr	r0, [pc, #284]	@ (800192c <menu+0x268>)
 8001810:	f009 f838 	bl	800a884 <HAL_GPIO_ReadPin>
 8001814:	4603      	mov	r3, r0
 8001816:	2b01      	cmp	r3, #1
 8001818:	f040 8097 	bne.w	800194a <menu+0x286>
 800181c:	4b3b      	ldr	r3, [pc, #236]	@ (800190c <menu+0x248>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	f083 0301 	eor.w	r3, r3, #1
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 808f 	beq.w	800194a <menu+0x286>
		if (menuSayac <= 1) {
 800182c:	4b38      	ldr	r3, [pc, #224]	@ (8001910 <menu+0x24c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d802      	bhi.n	800183a <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001834:	4b36      	ldr	r3, [pc, #216]	@ (8001910 <menu+0x24c>)
 8001836:	2224      	movs	r2, #36	@ 0x24
 8001838:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800183a:	4b35      	ldr	r3, [pc, #212]	@ (8001910 <menu+0x24c>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	3b01      	subs	r3, #1
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4b33      	ldr	r3, [pc, #204]	@ (8001910 <menu+0x24c>)
 8001844:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001846:	4b32      	ldr	r3, [pc, #200]	@ (8001910 <menu+0x24c>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b14      	cmp	r3, #20
 800184c:	d106      	bne.n	800185c <menu+0x198>
 800184e:	4b31      	ldr	r3, [pc, #196]	@ (8001914 <menu+0x250>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d102      	bne.n	800185c <menu+0x198>
			menuSayac = 17;
 8001856:	4b2e      	ldr	r3, [pc, #184]	@ (8001910 <menu+0x24c>)
 8001858:	2211      	movs	r2, #17
 800185a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800185c:	4b2c      	ldr	r3, [pc, #176]	@ (8001910 <menu+0x24c>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b0f      	cmp	r3, #15
 8001862:	d106      	bne.n	8001872 <menu+0x1ae>
 8001864:	4b2c      	ldr	r3, [pc, #176]	@ (8001918 <menu+0x254>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <menu+0x1ae>
			menuSayac = 7;
 800186c:	4b28      	ldr	r3, [pc, #160]	@ (8001910 <menu+0x24c>)
 800186e:	2207      	movs	r2, #7
 8001870:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001872:	4b27      	ldr	r3, [pc, #156]	@ (8001910 <menu+0x24c>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b0f      	cmp	r3, #15
 8001878:	d106      	bne.n	8001888 <menu+0x1c4>
 800187a:	4b27      	ldr	r3, [pc, #156]	@ (8001918 <menu+0x254>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d102      	bne.n	8001888 <menu+0x1c4>
			menuSayac = 12;
 8001882:	4b23      	ldr	r3, [pc, #140]	@ (8001910 <menu+0x24c>)
 8001884:	220c      	movs	r2, #12
 8001886:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001888:	4b21      	ldr	r3, [pc, #132]	@ (8001910 <menu+0x24c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b0c      	cmp	r3, #12
 800188e:	d106      	bne.n	800189e <menu+0x1da>
 8001890:	4b21      	ldr	r3, [pc, #132]	@ (8001918 <menu+0x254>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b02      	cmp	r3, #2
 8001896:	d102      	bne.n	800189e <menu+0x1da>
			menuSayac = 8;
 8001898:	4b1d      	ldr	r3, [pc, #116]	@ (8001910 <menu+0x24c>)
 800189a:	2208      	movs	r2, #8
 800189c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800189e:	4b1c      	ldr	r3, [pc, #112]	@ (8001910 <menu+0x24c>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b0a      	cmp	r3, #10
 80018a4:	d10a      	bne.n	80018bc <menu+0x1f8>
 80018a6:	4b1d      	ldr	r3, [pc, #116]	@ (800191c <menu+0x258>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d003      	beq.n	80018b6 <menu+0x1f2>
 80018ae:	4b1b      	ldr	r3, [pc, #108]	@ (800191c <menu+0x258>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d102      	bne.n	80018bc <menu+0x1f8>
			menuSayac = 9;
 80018b6:	4b16      	ldr	r3, [pc, #88]	@ (8001910 <menu+0x24c>)
 80018b8:	2209      	movs	r2, #9
 80018ba:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80018bc:	4b14      	ldr	r3, [pc, #80]	@ (8001910 <menu+0x24c>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b0c      	cmp	r3, #12
 80018c2:	d10a      	bne.n	80018da <menu+0x216>
 80018c4:	4b16      	ldr	r3, [pc, #88]	@ (8001920 <menu+0x25c>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d003      	beq.n	80018d4 <menu+0x210>
 80018cc:	4b14      	ldr	r3, [pc, #80]	@ (8001920 <menu+0x25c>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d102      	bne.n	80018da <menu+0x216>
			menuSayac = 11;
 80018d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <menu+0x24c>)
 80018d6:	220b      	movs	r2, #11
 80018d8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80018da:	4b0d      	ldr	r3, [pc, #52]	@ (8001910 <menu+0x24c>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b0f      	cmp	r3, #15
 80018e0:	d106      	bne.n	80018f0 <menu+0x22c>
 80018e2:	4b10      	ldr	r3, [pc, #64]	@ (8001924 <menu+0x260>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d102      	bne.n	80018f0 <menu+0x22c>
			menuSayac = 14;
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <menu+0x24c>)
 80018ec:	220e      	movs	r2, #14
 80018ee:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80018f0:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <menu+0x24c>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b19      	cmp	r3, #25
 80018f6:	d11b      	bne.n	8001930 <menu+0x26c>
 80018f8:	4b06      	ldr	r3, [pc, #24]	@ (8001914 <menu+0x250>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d117      	bne.n	8001930 <menu+0x26c>
			menuSayac = 23;
 8001900:	4b03      	ldr	r3, [pc, #12]	@ (8001910 <menu+0x24c>)
 8001902:	2217      	movs	r2, #23
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	e013      	b.n	8001930 <menu+0x26c>
 8001908:	40010800 	.word	0x40010800
 800190c:	200010eb 	.word	0x200010eb
 8001910:	200010bc 	.word	0x200010bc
 8001914:	200010cb 	.word	0x200010cb
 8001918:	200010c4 	.word	0x200010c4
 800191c:	200010c5 	.word	0x200010c5
 8001920:	200010c6 	.word	0x200010c6
 8001924:	200010c7 	.word	0x200010c7
 8001928:	200010e7 	.word	0x200010e7
 800192c:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 8001930:	4bb0      	ldr	r3, [pc, #704]	@ (8001bf4 <menu+0x530>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b22      	cmp	r3, #34	@ 0x22
 8001936:	d106      	bne.n	8001946 <menu+0x282>
 8001938:	4baf      	ldr	r3, [pc, #700]	@ (8001bf8 <menu+0x534>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d102      	bne.n	8001946 <menu+0x282>
			menuSayac = 32;
 8001940:	4bac      	ldr	r3, [pc, #688]	@ (8001bf4 <menu+0x530>)
 8001942:	2220      	movs	r2, #32
 8001944:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001946:	f002 fc03 	bl	8004150 <bekle>
	}

	if (menuSayac == 0) {
 800194a:	4baa      	ldr	r3, [pc, #680]	@ (8001bf4 <menu+0x530>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d109      	bne.n	8001966 <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 8001952:	4aaa      	ldr	r2, [pc, #680]	@ (8001bfc <menu+0x538>)
 8001954:	2101      	movs	r1, #1
 8001956:	2001      	movs	r0, #1
 8001958:	f007 fbdc 	bl	8009114 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 800195c:	4aa8      	ldr	r2, [pc, #672]	@ (8001c00 <menu+0x53c>)
 800195e:	2101      	movs	r1, #1
 8001960:	2002      	movs	r0, #2
 8001962:	f007 fbd7 	bl	8009114 <lcd_print>
	}

	if (menuSayac == 1) {
 8001966:	4ba3      	ldr	r3, [pc, #652]	@ (8001bf4 <menu+0x530>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b01      	cmp	r3, #1
 800196c:	f040 81f4 	bne.w	8001d58 <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 8001970:	4aa4      	ldr	r2, [pc, #656]	@ (8001c04 <menu+0x540>)
 8001972:	2101      	movs	r1, #1
 8001974:	2001      	movs	r0, #1
 8001976:	f007 fbcd 	bl	8009114 <lcd_print>

		if(hataGostermeSirasi == 0) {
 800197a:	4ba3      	ldr	r3, [pc, #652]	@ (8001c08 <menu+0x544>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d115      	bne.n	80019ae <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 8001982:	4aa2      	ldr	r2, [pc, #648]	@ (8001c0c <menu+0x548>)
 8001984:	2101      	movs	r1, #1
 8001986:	2002      	movs	r0, #2
 8001988:	f007 fbc4 	bl	8009114 <lcd_print>
			lcd_print(2, 15, "   ");
 800198c:	4aa0      	ldr	r2, [pc, #640]	@ (8001c10 <menu+0x54c>)
 800198e:	210f      	movs	r1, #15
 8001990:	2002      	movs	r0, #2
 8001992:	f007 fbbf 	bl	8009114 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001996:	4b9f      	ldr	r3, [pc, #636]	@ (8001c14 <menu+0x550>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	220a      	movs	r2, #10
 800199c:	499e      	ldr	r1, [pc, #632]	@ (8001c18 <menu+0x554>)
 800199e:	4618      	mov	r0, r3
 80019a0:	f00c fa5e 	bl	800de60 <itoa>
			lcd_print(2, 14, snum);
 80019a4:	4a9c      	ldr	r2, [pc, #624]	@ (8001c18 <menu+0x554>)
 80019a6:	210e      	movs	r1, #14
 80019a8:	2002      	movs	r0, #2
 80019aa:	f007 fbb3 	bl	8009114 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80019ae:	4b96      	ldr	r3, [pc, #600]	@ (8001c08 <menu+0x544>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d115      	bne.n	80019e2 <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 80019b6:	4a99      	ldr	r2, [pc, #612]	@ (8001c1c <menu+0x558>)
 80019b8:	2101      	movs	r1, #1
 80019ba:	2002      	movs	r0, #2
 80019bc:	f007 fbaa 	bl	8009114 <lcd_print>
			lcd_print(2, 15, "  ");
 80019c0:	4a97      	ldr	r2, [pc, #604]	@ (8001c20 <menu+0x55c>)
 80019c2:	210f      	movs	r1, #15
 80019c4:	2002      	movs	r0, #2
 80019c6:	f007 fba5 	bl	8009114 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80019ca:	4b96      	ldr	r3, [pc, #600]	@ (8001c24 <menu+0x560>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	220a      	movs	r2, #10
 80019d0:	4991      	ldr	r1, [pc, #580]	@ (8001c18 <menu+0x554>)
 80019d2:	4618      	mov	r0, r3
 80019d4:	f00c fa44 	bl	800de60 <itoa>
			lcd_print(2, 14, snum);
 80019d8:	4a8f      	ldr	r2, [pc, #572]	@ (8001c18 <menu+0x554>)
 80019da:	210e      	movs	r1, #14
 80019dc:	2002      	movs	r0, #2
 80019de:	f007 fb99 	bl	8009114 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80019e2:	4b89      	ldr	r3, [pc, #548]	@ (8001c08 <menu+0x544>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d115      	bne.n	8001a16 <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 80019ea:	4a8f      	ldr	r2, [pc, #572]	@ (8001c28 <menu+0x564>)
 80019ec:	2101      	movs	r1, #1
 80019ee:	2002      	movs	r0, #2
 80019f0:	f007 fb90 	bl	8009114 <lcd_print>
			lcd_print(2, 15, "  ");
 80019f4:	4a8a      	ldr	r2, [pc, #552]	@ (8001c20 <menu+0x55c>)
 80019f6:	210f      	movs	r1, #15
 80019f8:	2002      	movs	r0, #2
 80019fa:	f007 fb8b 	bl	8009114 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80019fe:	4b8b      	ldr	r3, [pc, #556]	@ (8001c2c <menu+0x568>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	220a      	movs	r2, #10
 8001a04:	4984      	ldr	r1, [pc, #528]	@ (8001c18 <menu+0x554>)
 8001a06:	4618      	mov	r0, r3
 8001a08:	f00c fa2a 	bl	800de60 <itoa>
			lcd_print(2, 14, snum);
 8001a0c:	4a82      	ldr	r2, [pc, #520]	@ (8001c18 <menu+0x554>)
 8001a0e:	210e      	movs	r1, #14
 8001a10:	2002      	movs	r0, #2
 8001a12:	f007 fb7f 	bl	8009114 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001a16:	4b7c      	ldr	r3, [pc, #496]	@ (8001c08 <menu+0x544>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d115      	bne.n	8001a4a <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 8001a1e:	4a84      	ldr	r2, [pc, #528]	@ (8001c30 <menu+0x56c>)
 8001a20:	2101      	movs	r1, #1
 8001a22:	2002      	movs	r0, #2
 8001a24:	f007 fb76 	bl	8009114 <lcd_print>
			lcd_print(2, 15, "  ");
 8001a28:	4a7d      	ldr	r2, [pc, #500]	@ (8001c20 <menu+0x55c>)
 8001a2a:	210f      	movs	r1, #15
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f007 fb71 	bl	8009114 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001a32:	4b80      	ldr	r3, [pc, #512]	@ (8001c34 <menu+0x570>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	220a      	movs	r2, #10
 8001a38:	4977      	ldr	r1, [pc, #476]	@ (8001c18 <menu+0x554>)
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f00c fa10 	bl	800de60 <itoa>
			lcd_print(2, 14, snum);
 8001a40:	4a75      	ldr	r2, [pc, #468]	@ (8001c18 <menu+0x554>)
 8001a42:	210e      	movs	r1, #14
 8001a44:	2002      	movs	r0, #2
 8001a46:	f007 fb65 	bl	8009114 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001a4a:	4b6f      	ldr	r3, [pc, #444]	@ (8001c08 <menu+0x544>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d115      	bne.n	8001a7e <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 8001a52:	4a79      	ldr	r2, [pc, #484]	@ (8001c38 <menu+0x574>)
 8001a54:	2101      	movs	r1, #1
 8001a56:	2002      	movs	r0, #2
 8001a58:	f007 fb5c 	bl	8009114 <lcd_print>
			lcd_print(2, 15, "  ");
 8001a5c:	4a70      	ldr	r2, [pc, #448]	@ (8001c20 <menu+0x55c>)
 8001a5e:	210f      	movs	r1, #15
 8001a60:	2002      	movs	r0, #2
 8001a62:	f007 fb57 	bl	8009114 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001a66:	4b75      	ldr	r3, [pc, #468]	@ (8001c3c <menu+0x578>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	220a      	movs	r2, #10
 8001a6c:	496a      	ldr	r1, [pc, #424]	@ (8001c18 <menu+0x554>)
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f00c f9f6 	bl	800de60 <itoa>
			lcd_print(2, 14, snum);
 8001a74:	4a68      	ldr	r2, [pc, #416]	@ (8001c18 <menu+0x554>)
 8001a76:	210e      	movs	r1, #14
 8001a78:	2002      	movs	r0, #2
 8001a7a:	f007 fb4b 	bl	8009114 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001a7e:	4b62      	ldr	r3, [pc, #392]	@ (8001c08 <menu+0x544>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b05      	cmp	r3, #5
 8001a84:	d115      	bne.n	8001ab2 <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 8001a86:	4a6e      	ldr	r2, [pc, #440]	@ (8001c40 <menu+0x57c>)
 8001a88:	2101      	movs	r1, #1
 8001a8a:	2002      	movs	r0, #2
 8001a8c:	f007 fb42 	bl	8009114 <lcd_print>
			lcd_print(2, 15, "  ");
 8001a90:	4a63      	ldr	r2, [pc, #396]	@ (8001c20 <menu+0x55c>)
 8001a92:	210f      	movs	r1, #15
 8001a94:	2002      	movs	r0, #2
 8001a96:	f007 fb3d 	bl	8009114 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001a9a:	4b6a      	ldr	r3, [pc, #424]	@ (8001c44 <menu+0x580>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	220a      	movs	r2, #10
 8001aa0:	495d      	ldr	r1, [pc, #372]	@ (8001c18 <menu+0x554>)
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f00c f9dc 	bl	800de60 <itoa>
			lcd_print(2, 14, snum);
 8001aa8:	4a5b      	ldr	r2, [pc, #364]	@ (8001c18 <menu+0x554>)
 8001aaa:	210e      	movs	r1, #14
 8001aac:	2002      	movs	r0, #2
 8001aae:	f007 fb31 	bl	8009114 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001ab2:	4b55      	ldr	r3, [pc, #340]	@ (8001c08 <menu+0x544>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b06      	cmp	r3, #6
 8001ab8:	d115      	bne.n	8001ae6 <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 8001aba:	4a63      	ldr	r2, [pc, #396]	@ (8001c48 <menu+0x584>)
 8001abc:	2101      	movs	r1, #1
 8001abe:	2002      	movs	r0, #2
 8001ac0:	f007 fb28 	bl	8009114 <lcd_print>
			lcd_print(2, 15, "  ");
 8001ac4:	4a56      	ldr	r2, [pc, #344]	@ (8001c20 <menu+0x55c>)
 8001ac6:	210f      	movs	r1, #15
 8001ac8:	2002      	movs	r0, #2
 8001aca:	f007 fb23 	bl	8009114 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001ace:	4b5f      	ldr	r3, [pc, #380]	@ (8001c4c <menu+0x588>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	220a      	movs	r2, #10
 8001ad4:	4950      	ldr	r1, [pc, #320]	@ (8001c18 <menu+0x554>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f00c f9c2 	bl	800de60 <itoa>
			lcd_print(2, 14, snum);
 8001adc:	4a4e      	ldr	r2, [pc, #312]	@ (8001c18 <menu+0x554>)
 8001ade:	210e      	movs	r1, #14
 8001ae0:	2002      	movs	r0, #2
 8001ae2:	f007 fb17 	bl	8009114 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001ae6:	4b48      	ldr	r3, [pc, #288]	@ (8001c08 <menu+0x544>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b07      	cmp	r3, #7
 8001aec:	d115      	bne.n	8001b1a <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 8001aee:	4a58      	ldr	r2, [pc, #352]	@ (8001c50 <menu+0x58c>)
 8001af0:	2101      	movs	r1, #1
 8001af2:	2002      	movs	r0, #2
 8001af4:	f007 fb0e 	bl	8009114 <lcd_print>
			lcd_print(2, 15, "  ");
 8001af8:	4a49      	ldr	r2, [pc, #292]	@ (8001c20 <menu+0x55c>)
 8001afa:	210f      	movs	r1, #15
 8001afc:	2002      	movs	r0, #2
 8001afe:	f007 fb09 	bl	8009114 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001b02:	4b54      	ldr	r3, [pc, #336]	@ (8001c54 <menu+0x590>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	220a      	movs	r2, #10
 8001b08:	4943      	ldr	r1, [pc, #268]	@ (8001c18 <menu+0x554>)
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f00c f9a8 	bl	800de60 <itoa>
			lcd_print(2, 14, snum);
 8001b10:	4a41      	ldr	r2, [pc, #260]	@ (8001c18 <menu+0x554>)
 8001b12:	210e      	movs	r1, #14
 8001b14:	2002      	movs	r0, #2
 8001b16:	f007 fafd 	bl	8009114 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c08 <menu+0x544>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d115      	bne.n	8001b4e <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 8001b22:	4a4d      	ldr	r2, [pc, #308]	@ (8001c58 <menu+0x594>)
 8001b24:	2101      	movs	r1, #1
 8001b26:	2002      	movs	r0, #2
 8001b28:	f007 faf4 	bl	8009114 <lcd_print>
			lcd_print(2, 15, "  ");
 8001b2c:	4a3c      	ldr	r2, [pc, #240]	@ (8001c20 <menu+0x55c>)
 8001b2e:	210f      	movs	r1, #15
 8001b30:	2002      	movs	r0, #2
 8001b32:	f007 faef 	bl	8009114 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001b36:	4b49      	ldr	r3, [pc, #292]	@ (8001c5c <menu+0x598>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	220a      	movs	r2, #10
 8001b3c:	4936      	ldr	r1, [pc, #216]	@ (8001c18 <menu+0x554>)
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f00c f98e 	bl	800de60 <itoa>
			lcd_print(2, 14, snum);
 8001b44:	4a34      	ldr	r2, [pc, #208]	@ (8001c18 <menu+0x554>)
 8001b46:	210e      	movs	r1, #14
 8001b48:	2002      	movs	r0, #2
 8001b4a:	f007 fae3 	bl	8009114 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c08 <menu+0x544>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b09      	cmp	r3, #9
 8001b54:	d115      	bne.n	8001b82 <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 8001b56:	4a42      	ldr	r2, [pc, #264]	@ (8001c60 <menu+0x59c>)
 8001b58:	2101      	movs	r1, #1
 8001b5a:	2002      	movs	r0, #2
 8001b5c:	f007 fada 	bl	8009114 <lcd_print>
			lcd_print(2, 16, " ");
 8001b60:	4a40      	ldr	r2, [pc, #256]	@ (8001c64 <menu+0x5a0>)
 8001b62:	2110      	movs	r1, #16
 8001b64:	2002      	movs	r0, #2
 8001b66:	f007 fad5 	bl	8009114 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001b6a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c68 <menu+0x5a4>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	220a      	movs	r2, #10
 8001b70:	4929      	ldr	r1, [pc, #164]	@ (8001c18 <menu+0x554>)
 8001b72:	4618      	mov	r0, r3
 8001b74:	f00c f974 	bl	800de60 <itoa>
			lcd_print(2, 15, snum);
 8001b78:	4a27      	ldr	r2, [pc, #156]	@ (8001c18 <menu+0x554>)
 8001b7a:	210f      	movs	r1, #15
 8001b7c:	2002      	movs	r0, #2
 8001b7e:	f007 fac9 	bl	8009114 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001b82:	4b21      	ldr	r3, [pc, #132]	@ (8001c08 <menu+0x544>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b0a      	cmp	r3, #10
 8001b88:	d104      	bne.n	8001b94 <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 8001b8a:	4a38      	ldr	r2, [pc, #224]	@ (8001c6c <menu+0x5a8>)
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	2002      	movs	r0, #2
 8001b90:	f007 fac0 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b94:	2102      	movs	r1, #2
 8001b96:	4836      	ldr	r0, [pc, #216]	@ (8001c70 <menu+0x5ac>)
 8001b98:	f008 fe74 	bl	800a884 <HAL_GPIO_ReadPin>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d119      	bne.n	8001bd6 <menu+0x512>
 8001ba2:	4b34      	ldr	r3, [pc, #208]	@ (8001c74 <menu+0x5b0>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	f083 0301 	eor.w	r3, r3, #1
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d012      	beq.n	8001bd6 <menu+0x512>
 8001bb0:	4b31      	ldr	r3, [pc, #196]	@ (8001c78 <menu+0x5b4>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d10e      	bne.n	8001bd6 <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001bb8:	4b13      	ldr	r3, [pc, #76]	@ (8001c08 <menu+0x544>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	4b11      	ldr	r3, [pc, #68]	@ (8001c08 <menu+0x544>)
 8001bc2:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001bc4:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <menu+0x544>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b0a      	cmp	r3, #10
 8001bca:	d902      	bls.n	8001bd2 <menu+0x50e>
				hataGostermeSirasi = 0;
 8001bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8001c08 <menu+0x544>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bd2:	f002 fabd 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001bd6:	2104      	movs	r1, #4
 8001bd8:	4825      	ldr	r0, [pc, #148]	@ (8001c70 <menu+0x5ac>)
 8001bda:	f008 fe53 	bl	800a884 <HAL_GPIO_ReadPin>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d15e      	bne.n	8001ca2 <menu+0x5de>
 8001be4:	4b23      	ldr	r3, [pc, #140]	@ (8001c74 <menu+0x5b0>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	f083 0301 	eor.w	r3, r3, #1
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d057      	beq.n	8001ca2 <menu+0x5de>
 8001bf2:	e043      	b.n	8001c7c <menu+0x5b8>
 8001bf4:	200010bc 	.word	0x200010bc
 8001bf8:	200010e7 	.word	0x200010e7
 8001bfc:	20001220 	.word	0x20001220
 8001c00:	20001234 	.word	0x20001234
 8001c04:	20001248 	.word	0x20001248
 8001c08:	200010be 	.word	0x200010be
 8001c0c:	2000125c 	.word	0x2000125c
 8001c10:	0800f388 	.word	0x0800f388
 8001c14:	200010dd 	.word	0x200010dd
 8001c18:	2000105c 	.word	0x2000105c
 8001c1c:	20001270 	.word	0x20001270
 8001c20:	0800f38c 	.word	0x0800f38c
 8001c24:	200010de 	.word	0x200010de
 8001c28:	20001284 	.word	0x20001284
 8001c2c:	200010df 	.word	0x200010df
 8001c30:	20001298 	.word	0x20001298
 8001c34:	200010e0 	.word	0x200010e0
 8001c38:	200012ac 	.word	0x200012ac
 8001c3c:	200010e1 	.word	0x200010e1
 8001c40:	200012c0 	.word	0x200012c0
 8001c44:	200010e2 	.word	0x200010e2
 8001c48:	200012d4 	.word	0x200012d4
 8001c4c:	200010e3 	.word	0x200010e3
 8001c50:	200012e8 	.word	0x200012e8
 8001c54:	200010e4 	.word	0x200010e4
 8001c58:	200012fc 	.word	0x200012fc
 8001c5c:	200010e5 	.word	0x200010e5
 8001c60:	20001310 	.word	0x20001310
 8001c64:	0800f390 	.word	0x0800f390
 8001c68:	200010e6 	.word	0x200010e6
 8001c6c:	20001324 	.word	0x20001324
 8001c70:	40010800 	.word	0x40010800
 8001c74:	200010eb 	.word	0x200010eb
 8001c78:	200010cb 	.word	0x200010cb
 8001c7c:	4b8a      	ldr	r3, [pc, #552]	@ (8001ea8 <menu+0x7e4>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d10e      	bne.n	8001ca2 <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001c84:	4b89      	ldr	r3, [pc, #548]	@ (8001eac <menu+0x7e8>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	b2da      	uxtb	r2, r3
 8001c8c:	4b87      	ldr	r3, [pc, #540]	@ (8001eac <menu+0x7e8>)
 8001c8e:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001c90:	4b86      	ldr	r3, [pc, #536]	@ (8001eac <menu+0x7e8>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	2b0b      	cmp	r3, #11
 8001c96:	d902      	bls.n	8001c9e <menu+0x5da>
	    		hataGostermeSirasi = 10;
 8001c98:	4b84      	ldr	r3, [pc, #528]	@ (8001eac <menu+0x7e8>)
 8001c9a:	220a      	movs	r2, #10
 8001c9c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001c9e:	f002 fa57 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001ca2:	2108      	movs	r1, #8
 8001ca4:	4882      	ldr	r0, [pc, #520]	@ (8001eb0 <menu+0x7ec>)
 8001ca6:	f008 fded 	bl	800a884 <HAL_GPIO_ReadPin>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d153      	bne.n	8001d58 <menu+0x694>
 8001cb0:	4b80      	ldr	r3, [pc, #512]	@ (8001eb4 <menu+0x7f0>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	f083 0301 	eor.w	r3, r3, #1
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d04c      	beq.n	8001d58 <menu+0x694>
 8001cbe:	4b7b      	ldr	r3, [pc, #492]	@ (8001eac <menu+0x7e8>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b0a      	cmp	r3, #10
 8001cc4:	d148      	bne.n	8001d58 <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 8001cc6:	4b7c      	ldr	r3, [pc, #496]	@ (8001eb8 <menu+0x7f4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]
 8001ccc:	4b7b      	ldr	r3, [pc, #492]	@ (8001ebc <menu+0x7f8>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001cd4:	4b7a      	ldr	r3, [pc, #488]	@ (8001ec0 <menu+0x7fc>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
 8001cda:	4b78      	ldr	r3, [pc, #480]	@ (8001ebc <menu+0x7f8>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001ce2:	4b78      	ldr	r3, [pc, #480]	@ (8001ec4 <menu+0x800>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
 8001ce8:	4b74      	ldr	r3, [pc, #464]	@ (8001ebc <menu+0x7f8>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001cf0:	4b75      	ldr	r3, [pc, #468]	@ (8001ec8 <menu+0x804>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
 8001cf6:	4b71      	ldr	r3, [pc, #452]	@ (8001ebc <menu+0x7f8>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001cfe:	4b73      	ldr	r3, [pc, #460]	@ (8001ecc <menu+0x808>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	4b6d      	ldr	r3, [pc, #436]	@ (8001ebc <menu+0x7f8>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001d0c:	4b70      	ldr	r3, [pc, #448]	@ (8001ed0 <menu+0x80c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	4b6a      	ldr	r3, [pc, #424]	@ (8001ebc <menu+0x7f8>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001d1a:	4b6e      	ldr	r3, [pc, #440]	@ (8001ed4 <menu+0x810>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
 8001d20:	4b66      	ldr	r3, [pc, #408]	@ (8001ebc <menu+0x7f8>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001d28:	4b6b      	ldr	r3, [pc, #428]	@ (8001ed8 <menu+0x814>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
 8001d2e:	4b63      	ldr	r3, [pc, #396]	@ (8001ebc <menu+0x7f8>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001d36:	4b69      	ldr	r3, [pc, #420]	@ (8001edc <menu+0x818>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
 8001d3c:	4b5f      	ldr	r3, [pc, #380]	@ (8001ebc <menu+0x7f8>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001d44:	4b66      	ldr	r3, [pc, #408]	@ (8001ee0 <menu+0x81c>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
 8001d4a:	4b5c      	ldr	r3, [pc, #368]	@ (8001ebc <menu+0x7f8>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 8001d52:	4b64      	ldr	r3, [pc, #400]	@ (8001ee4 <menu+0x820>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001d58:	4b63      	ldr	r3, [pc, #396]	@ (8001ee8 <menu+0x824>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	f040 808e 	bne.w	8001e7e <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 8001d62:	4a62      	ldr	r2, [pc, #392]	@ (8001eec <menu+0x828>)
 8001d64:	2101      	movs	r1, #1
 8001d66:	2001      	movs	r0, #1
 8001d68:	f007 f9d4 	bl	8009114 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001d6c:	4b4e      	ldr	r3, [pc, #312]	@ (8001ea8 <menu+0x7e4>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d003      	beq.n	8001d7c <menu+0x6b8>
 8001d74:	4b4c      	ldr	r3, [pc, #304]	@ (8001ea8 <menu+0x7e4>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d104      	bne.n	8001d86 <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 8001d7c:	4a5c      	ldr	r2, [pc, #368]	@ (8001ef0 <menu+0x82c>)
 8001d7e:	2101      	movs	r1, #1
 8001d80:	2002      	movs	r0, #2
 8001d82:	f007 f9c7 	bl	8009114 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001d86:	4b5b      	ldr	r3, [pc, #364]	@ (8001ef4 <menu+0x830>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d108      	bne.n	8001da0 <menu+0x6dc>
 8001d8e:	4b46      	ldr	r3, [pc, #280]	@ (8001ea8 <menu+0x7e4>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d104      	bne.n	8001da0 <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 8001d96:	4a58      	ldr	r2, [pc, #352]	@ (8001ef8 <menu+0x834>)
 8001d98:	2101      	movs	r1, #1
 8001d9a:	2002      	movs	r0, #2
 8001d9c:	f007 f9ba 	bl	8009114 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001da0:	4b54      	ldr	r3, [pc, #336]	@ (8001ef4 <menu+0x830>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d108      	bne.n	8001dba <menu+0x6f6>
 8001da8:	4b3f      	ldr	r3, [pc, #252]	@ (8001ea8 <menu+0x7e4>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d104      	bne.n	8001dba <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 8001db0:	4a52      	ldr	r2, [pc, #328]	@ (8001efc <menu+0x838>)
 8001db2:	2101      	movs	r1, #1
 8001db4:	2002      	movs	r0, #2
 8001db6:	f007 f9ad 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001dba:	2102      	movs	r1, #2
 8001dbc:	483c      	ldr	r0, [pc, #240]	@ (8001eb0 <menu+0x7ec>)
 8001dbe:	f008 fd61 	bl	800a884 <HAL_GPIO_ReadPin>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d119      	bne.n	8001dfc <menu+0x738>
 8001dc8:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb4 <menu+0x7f0>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	f083 0301 	eor.w	r3, r3, #1
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d012      	beq.n	8001dfc <menu+0x738>
 8001dd6:	4b34      	ldr	r3, [pc, #208]	@ (8001ea8 <menu+0x7e4>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d10e      	bne.n	8001dfc <menu+0x738>
			calismaSekli = calismaSekli + 1;
 8001dde:	4b45      	ldr	r3, [pc, #276]	@ (8001ef4 <menu+0x830>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	3301      	adds	r3, #1
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4b43      	ldr	r3, [pc, #268]	@ (8001ef4 <menu+0x830>)
 8001de8:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001dea:	4b42      	ldr	r3, [pc, #264]	@ (8001ef4 <menu+0x830>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d902      	bls.n	8001df8 <menu+0x734>
				calismaSekli = 0;
 8001df2:	4b40      	ldr	r3, [pc, #256]	@ (8001ef4 <menu+0x830>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001df8:	f002 f9aa 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001dfc:	2104      	movs	r1, #4
 8001dfe:	482c      	ldr	r0, [pc, #176]	@ (8001eb0 <menu+0x7ec>)
 8001e00:	f008 fd40 	bl	800a884 <HAL_GPIO_ReadPin>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d119      	bne.n	8001e3e <menu+0x77a>
 8001e0a:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb4 <menu+0x7f0>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	f083 0301 	eor.w	r3, r3, #1
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d012      	beq.n	8001e3e <menu+0x77a>
 8001e18:	4b23      	ldr	r3, [pc, #140]	@ (8001ea8 <menu+0x7e4>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10e      	bne.n	8001e3e <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 8001e20:	4b34      	ldr	r3, [pc, #208]	@ (8001ef4 <menu+0x830>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	4b32      	ldr	r3, [pc, #200]	@ (8001ef4 <menu+0x830>)
 8001e2a:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001e2c:	4b31      	ldr	r3, [pc, #196]	@ (8001ef4 <menu+0x830>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d002      	beq.n	8001e3a <menu+0x776>
	    		calismaSekli = 1;
 8001e34:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef4 <menu+0x830>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001e3a:	f002 f989 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e3e:	2108      	movs	r1, #8
 8001e40:	481b      	ldr	r0, [pc, #108]	@ (8001eb0 <menu+0x7ec>)
 8001e42:	f008 fd1f 	bl	800a884 <HAL_GPIO_ReadPin>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d118      	bne.n	8001e7e <menu+0x7ba>
 8001e4c:	4b19      	ldr	r3, [pc, #100]	@ (8001eb4 <menu+0x7f0>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	f083 0301 	eor.w	r3, r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d011      	beq.n	8001e7e <menu+0x7ba>
			eepromData[1] = calismaSekli;
 8001e5a:	4b26      	ldr	r3, [pc, #152]	@ (8001ef4 <menu+0x830>)
 8001e5c:	781a      	ldrb	r2, [r3, #0]
 8001e5e:	4b17      	ldr	r3, [pc, #92]	@ (8001ebc <menu+0x7f8>)
 8001e60:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001e62:	4b24      	ldr	r3, [pc, #144]	@ (8001ef4 <menu+0x830>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d106      	bne.n	8001e78 <menu+0x7b4>
				altLimit = 1;
 8001e6a:	4b25      	ldr	r3, [pc, #148]	@ (8001f00 <menu+0x83c>)
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001e70:	4b23      	ldr	r3, [pc, #140]	@ (8001f00 <menu+0x83c>)
 8001e72:	781a      	ldrb	r2, [r3, #0]
 8001e74:	4b11      	ldr	r3, [pc, #68]	@ (8001ebc <menu+0x7f8>)
 8001e76:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001e78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee4 <menu+0x820>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee8 <menu+0x824>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b03      	cmp	r3, #3
 8001e84:	f040 809c 	bne.w	8001fc0 <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 8001e88:	4a1e      	ldr	r2, [pc, #120]	@ (8001f04 <menu+0x840>)
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	f007 f941 	bl	8009114 <lcd_print>

		if(emniyetCercevesi == 0) {
 8001e92:	4b1d      	ldr	r3, [pc, #116]	@ (8001f08 <menu+0x844>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d13a      	bne.n	8001f10 <menu+0x84c>
			lcd_print(2, 1, pasifText);
 8001e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001f0c <menu+0x848>)
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	2002      	movs	r0, #2
 8001ea0:	f007 f938 	bl	8009114 <lcd_print>
 8001ea4:	e03d      	b.n	8001f22 <menu+0x85e>
 8001ea6:	bf00      	nop
 8001ea8:	200010cb 	.word	0x200010cb
 8001eac:	200010be 	.word	0x200010be
 8001eb0:	40010800 	.word	0x40010800
 8001eb4:	200010eb 	.word	0x200010eb
 8001eb8:	200010dd 	.word	0x200010dd
 8001ebc:	20000fec 	.word	0x20000fec
 8001ec0:	200010de 	.word	0x200010de
 8001ec4:	200010df 	.word	0x200010df
 8001ec8:	200010e0 	.word	0x200010e0
 8001ecc:	200010e1 	.word	0x200010e1
 8001ed0:	200010e2 	.word	0x200010e2
 8001ed4:	200010e3 	.word	0x200010e3
 8001ed8:	200010e4 	.word	0x200010e4
 8001edc:	200010e5 	.word	0x200010e5
 8001ee0:	200010e6 	.word	0x200010e6
 8001ee4:	200010e8 	.word	0x200010e8
 8001ee8:	200010bc 	.word	0x200010bc
 8001eec:	20001338 	.word	0x20001338
 8001ef0:	2000134c 	.word	0x2000134c
 8001ef4:	200010bd 	.word	0x200010bd
 8001ef8:	20001360 	.word	0x20001360
 8001efc:	20001374 	.word	0x20001374
 8001f00:	200010c2 	.word	0x200010c2
 8001f04:	20001388 	.word	0x20001388
 8001f08:	200010c0 	.word	0x200010c0
 8001f0c:	2000139c 	.word	0x2000139c
		} else if(emniyetCercevesi == 1) {
 8001f10:	4b6b      	ldr	r3, [pc, #428]	@ (80020c0 <menu+0x9fc>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d104      	bne.n	8001f22 <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 8001f18:	4a6a      	ldr	r2, [pc, #424]	@ (80020c4 <menu+0xa00>)
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	f007 f8f9 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f22:	2102      	movs	r1, #2
 8001f24:	4868      	ldr	r0, [pc, #416]	@ (80020c8 <menu+0xa04>)
 8001f26:	f008 fcad 	bl	800a884 <HAL_GPIO_ReadPin>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d115      	bne.n	8001f5c <menu+0x898>
 8001f30:	4b66      	ldr	r3, [pc, #408]	@ (80020cc <menu+0xa08>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	f083 0301 	eor.w	r3, r3, #1
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00e      	beq.n	8001f5c <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001f3e:	4b60      	ldr	r3, [pc, #384]	@ (80020c0 <menu+0x9fc>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	3301      	adds	r3, #1
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4b5e      	ldr	r3, [pc, #376]	@ (80020c0 <menu+0x9fc>)
 8001f48:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001f4a:	4b5d      	ldr	r3, [pc, #372]	@ (80020c0 <menu+0x9fc>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d902      	bls.n	8001f58 <menu+0x894>
				emniyetCercevesi = 0;
 8001f52:	4b5b      	ldr	r3, [pc, #364]	@ (80020c0 <menu+0x9fc>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f58:	f002 f8fa 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f5c:	2104      	movs	r1, #4
 8001f5e:	485a      	ldr	r0, [pc, #360]	@ (80020c8 <menu+0xa04>)
 8001f60:	f008 fc90 	bl	800a884 <HAL_GPIO_ReadPin>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d115      	bne.n	8001f96 <menu+0x8d2>
 8001f6a:	4b58      	ldr	r3, [pc, #352]	@ (80020cc <menu+0xa08>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	f083 0301 	eor.w	r3, r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00e      	beq.n	8001f96 <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001f78:	4b51      	ldr	r3, [pc, #324]	@ (80020c0 <menu+0x9fc>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	4b4f      	ldr	r3, [pc, #316]	@ (80020c0 <menu+0x9fc>)
 8001f82:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001f84:	4b4e      	ldr	r3, [pc, #312]	@ (80020c0 <menu+0x9fc>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <menu+0x8ce>
		   		emniyetCercevesi = 1;
 8001f8c:	4b4c      	ldr	r3, [pc, #304]	@ (80020c0 <menu+0x9fc>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f92:	f002 f8dd 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001f96:	2108      	movs	r1, #8
 8001f98:	484b      	ldr	r0, [pc, #300]	@ (80020c8 <menu+0xa04>)
 8001f9a:	f008 fc73 	bl	800a884 <HAL_GPIO_ReadPin>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d10d      	bne.n	8001fc0 <menu+0x8fc>
 8001fa4:	4b49      	ldr	r3, [pc, #292]	@ (80020cc <menu+0xa08>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	f083 0301 	eor.w	r3, r3, #1
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d006      	beq.n	8001fc0 <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 8001fb2:	4b43      	ldr	r3, [pc, #268]	@ (80020c0 <menu+0x9fc>)
 8001fb4:	781a      	ldrb	r2, [r3, #0]
 8001fb6:	4b46      	ldr	r3, [pc, #280]	@ (80020d0 <menu+0xa0c>)
 8001fb8:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001fba:	4b46      	ldr	r3, [pc, #280]	@ (80020d4 <menu+0xa10>)
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001fc0:	4b45      	ldr	r3, [pc, #276]	@ (80020d8 <menu+0xa14>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d166      	bne.n	8002096 <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 8001fc8:	4a44      	ldr	r2, [pc, #272]	@ (80020dc <menu+0xa18>)
 8001fca:	2101      	movs	r1, #1
 8001fcc:	2001      	movs	r0, #1
 8001fce:	f007 f8a1 	bl	8009114 <lcd_print>

		if(yavaslamaLimit == 0) {
 8001fd2:	4b43      	ldr	r3, [pc, #268]	@ (80020e0 <menu+0xa1c>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d105      	bne.n	8001fe6 <menu+0x922>
			lcd_print(2, 1, pasifText);
 8001fda:	4a42      	ldr	r2, [pc, #264]	@ (80020e4 <menu+0xa20>)
 8001fdc:	2101      	movs	r1, #1
 8001fde:	2002      	movs	r0, #2
 8001fe0:	f007 f898 	bl	8009114 <lcd_print>
 8001fe4:	e008      	b.n	8001ff8 <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 8001fe6:	4b3e      	ldr	r3, [pc, #248]	@ (80020e0 <menu+0xa1c>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d104      	bne.n	8001ff8 <menu+0x934>
			lcd_print(2, 1, aktifText);
 8001fee:	4a3e      	ldr	r2, [pc, #248]	@ (80020e8 <menu+0xa24>)
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	2002      	movs	r0, #2
 8001ff4:	f007 f88e 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ff8:	2102      	movs	r1, #2
 8001ffa:	4833      	ldr	r0, [pc, #204]	@ (80020c8 <menu+0xa04>)
 8001ffc:	f008 fc42 	bl	800a884 <HAL_GPIO_ReadPin>
 8002000:	4603      	mov	r3, r0
 8002002:	2b01      	cmp	r3, #1
 8002004:	d115      	bne.n	8002032 <menu+0x96e>
 8002006:	4b31      	ldr	r3, [pc, #196]	@ (80020cc <menu+0xa08>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	f083 0301 	eor.w	r3, r3, #1
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00e      	beq.n	8002032 <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 8002014:	4b32      	ldr	r3, [pc, #200]	@ (80020e0 <menu+0xa1c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	b2da      	uxtb	r2, r3
 800201c:	4b30      	ldr	r3, [pc, #192]	@ (80020e0 <menu+0xa1c>)
 800201e:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8002020:	4b2f      	ldr	r3, [pc, #188]	@ (80020e0 <menu+0xa1c>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d902      	bls.n	800202e <menu+0x96a>
				yavaslamaLimit = 0;
 8002028:	4b2d      	ldr	r3, [pc, #180]	@ (80020e0 <menu+0xa1c>)
 800202a:	2200      	movs	r2, #0
 800202c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800202e:	f002 f88f 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002032:	2104      	movs	r1, #4
 8002034:	4824      	ldr	r0, [pc, #144]	@ (80020c8 <menu+0xa04>)
 8002036:	f008 fc25 	bl	800a884 <HAL_GPIO_ReadPin>
 800203a:	4603      	mov	r3, r0
 800203c:	2b01      	cmp	r3, #1
 800203e:	d115      	bne.n	800206c <menu+0x9a8>
 8002040:	4b22      	ldr	r3, [pc, #136]	@ (80020cc <menu+0xa08>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	f083 0301 	eor.w	r3, r3, #1
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00e      	beq.n	800206c <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 800204e:	4b24      	ldr	r3, [pc, #144]	@ (80020e0 <menu+0xa1c>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	3b01      	subs	r3, #1
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4b22      	ldr	r3, [pc, #136]	@ (80020e0 <menu+0xa1c>)
 8002058:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 800205a:	4b21      	ldr	r3, [pc, #132]	@ (80020e0 <menu+0xa1c>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d002      	beq.n	8002068 <menu+0x9a4>
		   		yavaslamaLimit = 1;
 8002062:	4b1f      	ldr	r3, [pc, #124]	@ (80020e0 <menu+0xa1c>)
 8002064:	2201      	movs	r2, #1
 8002066:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002068:	f002 f872 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800206c:	2108      	movs	r1, #8
 800206e:	4816      	ldr	r0, [pc, #88]	@ (80020c8 <menu+0xa04>)
 8002070:	f008 fc08 	bl	800a884 <HAL_GPIO_ReadPin>
 8002074:	4603      	mov	r3, r0
 8002076:	2b01      	cmp	r3, #1
 8002078:	d10d      	bne.n	8002096 <menu+0x9d2>
 800207a:	4b14      	ldr	r3, [pc, #80]	@ (80020cc <menu+0xa08>)
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	f083 0301 	eor.w	r3, r3, #1
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	d006      	beq.n	8002096 <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 8002088:	4b15      	ldr	r3, [pc, #84]	@ (80020e0 <menu+0xa1c>)
 800208a:	781a      	ldrb	r2, [r3, #0]
 800208c:	4b10      	ldr	r3, [pc, #64]	@ (80020d0 <menu+0xa0c>)
 800208e:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8002090:	4b10      	ldr	r3, [pc, #64]	@ (80020d4 <menu+0xa10>)
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002096:	4b10      	ldr	r3, [pc, #64]	@ (80020d8 <menu+0xa14>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b05      	cmp	r3, #5
 800209c:	f040 80aa 	bne.w	80021f4 <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 80020a0:	4a12      	ldr	r2, [pc, #72]	@ (80020ec <menu+0xa28>)
 80020a2:	2101      	movs	r1, #1
 80020a4:	2001      	movs	r0, #1
 80020a6:	f007 f835 	bl	8009114 <lcd_print>

		if(altLimit == 0) {
 80020aa:	4b11      	ldr	r3, [pc, #68]	@ (80020f0 <menu+0xa2c>)
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d120      	bne.n	80020f4 <menu+0xa30>
			lcd_print(2, 1, pasifText);
 80020b2:	4a0c      	ldr	r2, [pc, #48]	@ (80020e4 <menu+0xa20>)
 80020b4:	2101      	movs	r1, #1
 80020b6:	2002      	movs	r0, #2
 80020b8:	f007 f82c 	bl	8009114 <lcd_print>
 80020bc:	e023      	b.n	8002106 <menu+0xa42>
 80020be:	bf00      	nop
 80020c0:	200010c0 	.word	0x200010c0
 80020c4:	200000ec 	.word	0x200000ec
 80020c8:	40010800 	.word	0x40010800
 80020cc:	200010eb 	.word	0x200010eb
 80020d0:	20000fec 	.word	0x20000fec
 80020d4:	200010e8 	.word	0x200010e8
 80020d8:	200010bc 	.word	0x200010bc
 80020dc:	200013c4 	.word	0x200013c4
 80020e0:	200010c1 	.word	0x200010c1
 80020e4:	2000139c 	.word	0x2000139c
 80020e8:	200013b0 	.word	0x200013b0
 80020ec:	200013d8 	.word	0x200013d8
 80020f0:	200010c2 	.word	0x200010c2
		} else if(altLimit == 1) {
 80020f4:	4b89      	ldr	r3, [pc, #548]	@ (800231c <menu+0xc58>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d104      	bne.n	8002106 <menu+0xa42>
			lcd_print(2, 1, aktifText);
 80020fc:	4a88      	ldr	r2, [pc, #544]	@ (8002320 <menu+0xc5c>)
 80020fe:	2101      	movs	r1, #1
 8002100:	2002      	movs	r0, #2
 8002102:	f007 f807 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8002106:	2102      	movs	r1, #2
 8002108:	4886      	ldr	r0, [pc, #536]	@ (8002324 <menu+0xc60>)
 800210a:	f008 fbbb 	bl	800a884 <HAL_GPIO_ReadPin>
 800210e:	4603      	mov	r3, r0
 8002110:	2b01      	cmp	r3, #1
 8002112:	d119      	bne.n	8002148 <menu+0xa84>
 8002114:	4b84      	ldr	r3, [pc, #528]	@ (8002328 <menu+0xc64>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	f083 0301 	eor.w	r3, r3, #1
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d012      	beq.n	8002148 <menu+0xa84>
 8002122:	4b82      	ldr	r3, [pc, #520]	@ (800232c <menu+0xc68>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10e      	bne.n	8002148 <menu+0xa84>
			altLimit = altLimit + 1;
 800212a:	4b7c      	ldr	r3, [pc, #496]	@ (800231c <menu+0xc58>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	3301      	adds	r3, #1
 8002130:	b2da      	uxtb	r2, r3
 8002132:	4b7a      	ldr	r3, [pc, #488]	@ (800231c <menu+0xc58>)
 8002134:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8002136:	4b79      	ldr	r3, [pc, #484]	@ (800231c <menu+0xc58>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d902      	bls.n	8002144 <menu+0xa80>
				altLimit = 0;
 800213e:	4b77      	ldr	r3, [pc, #476]	@ (800231c <menu+0xc58>)
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002144:	f002 f804 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002148:	2104      	movs	r1, #4
 800214a:	4876      	ldr	r0, [pc, #472]	@ (8002324 <menu+0xc60>)
 800214c:	f008 fb9a 	bl	800a884 <HAL_GPIO_ReadPin>
 8002150:	4603      	mov	r3, r0
 8002152:	2b01      	cmp	r3, #1
 8002154:	d119      	bne.n	800218a <menu+0xac6>
 8002156:	4b74      	ldr	r3, [pc, #464]	@ (8002328 <menu+0xc64>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	f083 0301 	eor.w	r3, r3, #1
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d012      	beq.n	800218a <menu+0xac6>
 8002164:	4b71      	ldr	r3, [pc, #452]	@ (800232c <menu+0xc68>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10e      	bne.n	800218a <menu+0xac6>
			altLimit = altLimit - 1;
 800216c:	4b6b      	ldr	r3, [pc, #428]	@ (800231c <menu+0xc58>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	3b01      	subs	r3, #1
 8002172:	b2da      	uxtb	r2, r3
 8002174:	4b69      	ldr	r3, [pc, #420]	@ (800231c <menu+0xc58>)
 8002176:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002178:	4b68      	ldr	r3, [pc, #416]	@ (800231c <menu+0xc58>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d002      	beq.n	8002186 <menu+0xac2>
		   		altLimit = 1;
 8002180:	4b66      	ldr	r3, [pc, #408]	@ (800231c <menu+0xc58>)
 8002182:	2201      	movs	r2, #1
 8002184:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002186:	f001 ffe3 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800218a:	2108      	movs	r1, #8
 800218c:	4865      	ldr	r0, [pc, #404]	@ (8002324 <menu+0xc60>)
 800218e:	f008 fb79 	bl	800a884 <HAL_GPIO_ReadPin>
 8002192:	4603      	mov	r3, r0
 8002194:	2b01      	cmp	r3, #1
 8002196:	d12d      	bne.n	80021f4 <menu+0xb30>
 8002198:	4b63      	ldr	r3, [pc, #396]	@ (8002328 <menu+0xc64>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	f083 0301 	eor.w	r3, r3, #1
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d026      	beq.n	80021f4 <menu+0xb30>
			eepromData[5] = altLimit;
 80021a6:	4b5d      	ldr	r3, [pc, #372]	@ (800231c <menu+0xc58>)
 80021a8:	781a      	ldrb	r2, [r3, #0]
 80021aa:	4b61      	ldr	r3, [pc, #388]	@ (8002330 <menu+0xc6c>)
 80021ac:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80021ae:	4b5b      	ldr	r3, [pc, #364]	@ (800231c <menu+0xc58>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d110      	bne.n	80021d8 <menu+0xb14>
 80021b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002334 <menu+0xc70>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <menu+0xb02>
 80021be:	4b5d      	ldr	r3, [pc, #372]	@ (8002334 <menu+0xc70>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d108      	bne.n	80021d8 <menu+0xb14>
				kapiTablaAcKonum = 3;
 80021c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002334 <menu+0xc70>)
 80021c8:	2203      	movs	r2, #3
 80021ca:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80021cc:	4b59      	ldr	r3, [pc, #356]	@ (8002334 <menu+0xc70>)
 80021ce:	781a      	ldrb	r2, [r3, #0]
 80021d0:	4b57      	ldr	r3, [pc, #348]	@ (8002330 <menu+0xc6c>)
 80021d2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80021d6:	e00a      	b.n	80021ee <menu+0xb2a>
			} else if(altLimit == 0) {
 80021d8:	4b50      	ldr	r3, [pc, #320]	@ (800231c <menu+0xc58>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d106      	bne.n	80021ee <menu+0xb2a>
				platformSilindirTipi = 0;
 80021e0:	4b55      	ldr	r3, [pc, #340]	@ (8002338 <menu+0xc74>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80021e6:	4b54      	ldr	r3, [pc, #336]	@ (8002338 <menu+0xc74>)
 80021e8:	781a      	ldrb	r2, [r3, #0]
 80021ea:	4b51      	ldr	r3, [pc, #324]	@ (8002330 <menu+0xc6c>)
 80021ec:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80021ee:	4b53      	ldr	r3, [pc, #332]	@ (800233c <menu+0xc78>)
 80021f0:	2201      	movs	r2, #1
 80021f2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80021f4:	4b52      	ldr	r3, [pc, #328]	@ (8002340 <menu+0xc7c>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b06      	cmp	r3, #6
 80021fa:	d166      	bne.n	80022ca <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 80021fc:	4a51      	ldr	r2, [pc, #324]	@ (8002344 <menu+0xc80>)
 80021fe:	2101      	movs	r1, #1
 8002200:	2001      	movs	r0, #1
 8002202:	f006 ff87 	bl	8009114 <lcd_print>

		if(basincSalteri == 0) {
 8002206:	4b50      	ldr	r3, [pc, #320]	@ (8002348 <menu+0xc84>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d105      	bne.n	800221a <menu+0xb56>
			lcd_print(2, 1, pasifText);
 800220e:	4a4f      	ldr	r2, [pc, #316]	@ (800234c <menu+0xc88>)
 8002210:	2101      	movs	r1, #1
 8002212:	2002      	movs	r0, #2
 8002214:	f006 ff7e 	bl	8009114 <lcd_print>
 8002218:	e008      	b.n	800222c <menu+0xb68>
		} else if(basincSalteri == 1) {
 800221a:	4b4b      	ldr	r3, [pc, #300]	@ (8002348 <menu+0xc84>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d104      	bne.n	800222c <menu+0xb68>
			lcd_print(2, 1, aktifText);
 8002222:	4a3f      	ldr	r2, [pc, #252]	@ (8002320 <menu+0xc5c>)
 8002224:	2101      	movs	r1, #1
 8002226:	2002      	movs	r0, #2
 8002228:	f006 ff74 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800222c:	2102      	movs	r1, #2
 800222e:	483d      	ldr	r0, [pc, #244]	@ (8002324 <menu+0xc60>)
 8002230:	f008 fb28 	bl	800a884 <HAL_GPIO_ReadPin>
 8002234:	4603      	mov	r3, r0
 8002236:	2b01      	cmp	r3, #1
 8002238:	d115      	bne.n	8002266 <menu+0xba2>
 800223a:	4b3b      	ldr	r3, [pc, #236]	@ (8002328 <menu+0xc64>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	f083 0301 	eor.w	r3, r3, #1
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00e      	beq.n	8002266 <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 8002248:	4b3f      	ldr	r3, [pc, #252]	@ (8002348 <menu+0xc84>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	b2da      	uxtb	r2, r3
 8002250:	4b3d      	ldr	r3, [pc, #244]	@ (8002348 <menu+0xc84>)
 8002252:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002254:	4b3c      	ldr	r3, [pc, #240]	@ (8002348 <menu+0xc84>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d902      	bls.n	8002262 <menu+0xb9e>
				basincSalteri = 0;
 800225c:	4b3a      	ldr	r3, [pc, #232]	@ (8002348 <menu+0xc84>)
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002262:	f001 ff75 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002266:	2104      	movs	r1, #4
 8002268:	482e      	ldr	r0, [pc, #184]	@ (8002324 <menu+0xc60>)
 800226a:	f008 fb0b 	bl	800a884 <HAL_GPIO_ReadPin>
 800226e:	4603      	mov	r3, r0
 8002270:	2b01      	cmp	r3, #1
 8002272:	d115      	bne.n	80022a0 <menu+0xbdc>
 8002274:	4b2c      	ldr	r3, [pc, #176]	@ (8002328 <menu+0xc64>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	f083 0301 	eor.w	r3, r3, #1
 800227c:	b2db      	uxtb	r3, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00e      	beq.n	80022a0 <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 8002282:	4b31      	ldr	r3, [pc, #196]	@ (8002348 <menu+0xc84>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	3b01      	subs	r3, #1
 8002288:	b2da      	uxtb	r2, r3
 800228a:	4b2f      	ldr	r3, [pc, #188]	@ (8002348 <menu+0xc84>)
 800228c:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800228e:	4b2e      	ldr	r3, [pc, #184]	@ (8002348 <menu+0xc84>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <menu+0xbd8>
		   		basincSalteri = 1;
 8002296:	4b2c      	ldr	r3, [pc, #176]	@ (8002348 <menu+0xc84>)
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800229c:	f001 ff58 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022a0:	2108      	movs	r1, #8
 80022a2:	4820      	ldr	r0, [pc, #128]	@ (8002324 <menu+0xc60>)
 80022a4:	f008 faee 	bl	800a884 <HAL_GPIO_ReadPin>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d10d      	bne.n	80022ca <menu+0xc06>
 80022ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002328 <menu+0xc64>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	f083 0301 	eor.w	r3, r3, #1
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d006      	beq.n	80022ca <menu+0xc06>
			eepromData[6] = basincSalteri;
 80022bc:	4b22      	ldr	r3, [pc, #136]	@ (8002348 <menu+0xc84>)
 80022be:	781a      	ldrb	r2, [r3, #0]
 80022c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002330 <menu+0xc6c>)
 80022c2:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80022c4:	4b1d      	ldr	r3, [pc, #116]	@ (800233c <menu+0xc78>)
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80022ca:	4b1d      	ldr	r3, [pc, #116]	@ (8002340 <menu+0xc7c>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b07      	cmp	r3, #7
 80022d0:	f040 80a9 	bne.w	8002426 <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 80022d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002350 <menu+0xc8c>)
 80022d6:	2101      	movs	r1, #1
 80022d8:	2001      	movs	r0, #1
 80022da:	f006 ff1b 	bl	8009114 <lcd_print>

		if(kapiSecimleri == 0) {
 80022de:	4b1d      	ldr	r3, [pc, #116]	@ (8002354 <menu+0xc90>)
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d105      	bne.n	80022f2 <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 80022e6:	4a19      	ldr	r2, [pc, #100]	@ (800234c <menu+0xc88>)
 80022e8:	2101      	movs	r1, #1
 80022ea:	2002      	movs	r0, #2
 80022ec:	f006 ff12 	bl	8009114 <lcd_print>
 80022f0:	e03f      	b.n	8002372 <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 80022f2:	4b18      	ldr	r3, [pc, #96]	@ (8002354 <menu+0xc90>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d105      	bne.n	8002306 <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 80022fa:	4a17      	ldr	r2, [pc, #92]	@ (8002358 <menu+0xc94>)
 80022fc:	2101      	movs	r1, #1
 80022fe:	2002      	movs	r0, #2
 8002300:	f006 ff08 	bl	8009114 <lcd_print>
 8002304:	e035      	b.n	8002372 <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 8002306:	4b13      	ldr	r3, [pc, #76]	@ (8002354 <menu+0xc90>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d128      	bne.n	8002360 <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 800230e:	4a13      	ldr	r2, [pc, #76]	@ (800235c <menu+0xc98>)
 8002310:	2101      	movs	r1, #1
 8002312:	2002      	movs	r0, #2
 8002314:	f006 fefe 	bl	8009114 <lcd_print>
 8002318:	e02b      	b.n	8002372 <menu+0xcae>
 800231a:	bf00      	nop
 800231c:	200010c2 	.word	0x200010c2
 8002320:	200013b0 	.word	0x200013b0
 8002324:	40010800 	.word	0x40010800
 8002328:	200010eb 	.word	0x200010eb
 800232c:	200010bd 	.word	0x200010bd
 8002330:	20000fec 	.word	0x20000fec
 8002334:	200010c9 	.word	0x200010c9
 8002338:	200010cf 	.word	0x200010cf
 800233c:	200010e8 	.word	0x200010e8
 8002340:	200010bc 	.word	0x200010bc
 8002344:	200013ec 	.word	0x200013ec
 8002348:	200010c3 	.word	0x200010c3
 800234c:	2000139c 	.word	0x2000139c
 8002350:	20001400 	.word	0x20001400
 8002354:	200010c4 	.word	0x200010c4
 8002358:	20001414 	.word	0x20001414
 800235c:	20001428 	.word	0x20001428
		} else if(kapiSecimleri == 3) {
 8002360:	4b76      	ldr	r3, [pc, #472]	@ (800253c <menu+0xe78>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d104      	bne.n	8002372 <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 8002368:	4a75      	ldr	r2, [pc, #468]	@ (8002540 <menu+0xe7c>)
 800236a:	2101      	movs	r1, #1
 800236c:	2002      	movs	r0, #2
 800236e:	f006 fed1 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002372:	2102      	movs	r1, #2
 8002374:	4873      	ldr	r0, [pc, #460]	@ (8002544 <menu+0xe80>)
 8002376:	f008 fa85 	bl	800a884 <HAL_GPIO_ReadPin>
 800237a:	4603      	mov	r3, r0
 800237c:	2b01      	cmp	r3, #1
 800237e:	d115      	bne.n	80023ac <menu+0xce8>
 8002380:	4b71      	ldr	r3, [pc, #452]	@ (8002548 <menu+0xe84>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	f083 0301 	eor.w	r3, r3, #1
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00e      	beq.n	80023ac <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 800238e:	4b6b      	ldr	r3, [pc, #428]	@ (800253c <menu+0xe78>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	3301      	adds	r3, #1
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4b69      	ldr	r3, [pc, #420]	@ (800253c <menu+0xe78>)
 8002398:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800239a:	4b68      	ldr	r3, [pc, #416]	@ (800253c <menu+0xe78>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b03      	cmp	r3, #3
 80023a0:	d902      	bls.n	80023a8 <menu+0xce4>
				kapiSecimleri = 0;
 80023a2:	4b66      	ldr	r3, [pc, #408]	@ (800253c <menu+0xe78>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023a8:	f001 fed2 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023ac:	2104      	movs	r1, #4
 80023ae:	4865      	ldr	r0, [pc, #404]	@ (8002544 <menu+0xe80>)
 80023b0:	f008 fa68 	bl	800a884 <HAL_GPIO_ReadPin>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d115      	bne.n	80023e6 <menu+0xd22>
 80023ba:	4b63      	ldr	r3, [pc, #396]	@ (8002548 <menu+0xe84>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	f083 0301 	eor.w	r3, r3, #1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00e      	beq.n	80023e6 <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 80023c8:	4b5c      	ldr	r3, [pc, #368]	@ (800253c <menu+0xe78>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	3b01      	subs	r3, #1
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	4b5a      	ldr	r3, [pc, #360]	@ (800253c <menu+0xe78>)
 80023d2:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80023d4:	4b59      	ldr	r3, [pc, #356]	@ (800253c <menu+0xe78>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d902      	bls.n	80023e2 <menu+0xd1e>
		   		kapiSecimleri = 3;
 80023dc:	4b57      	ldr	r3, [pc, #348]	@ (800253c <menu+0xe78>)
 80023de:	2203      	movs	r2, #3
 80023e0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023e2:	f001 feb5 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023e6:	2108      	movs	r1, #8
 80023e8:	4856      	ldr	r0, [pc, #344]	@ (8002544 <menu+0xe80>)
 80023ea:	f008 fa4b 	bl	800a884 <HAL_GPIO_ReadPin>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d118      	bne.n	8002426 <menu+0xd62>
 80023f4:	4b54      	ldr	r3, [pc, #336]	@ (8002548 <menu+0xe84>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	f083 0301 	eor.w	r3, r3, #1
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d011      	beq.n	8002426 <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 8002402:	4b4e      	ldr	r3, [pc, #312]	@ (800253c <menu+0xe78>)
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	4b51      	ldr	r3, [pc, #324]	@ (800254c <menu+0xe88>)
 8002408:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800240a:	4b4c      	ldr	r3, [pc, #304]	@ (800253c <menu+0xe78>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d006      	beq.n	8002420 <menu+0xd5c>
				altLimit = 1;
 8002412:	4b4f      	ldr	r3, [pc, #316]	@ (8002550 <menu+0xe8c>)
 8002414:	2201      	movs	r2, #1
 8002416:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002418:	4b4d      	ldr	r3, [pc, #308]	@ (8002550 <menu+0xe8c>)
 800241a:	781a      	ldrb	r2, [r3, #0]
 800241c:	4b4b      	ldr	r3, [pc, #300]	@ (800254c <menu+0xe88>)
 800241e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002420:	4b4c      	ldr	r3, [pc, #304]	@ (8002554 <menu+0xe90>)
 8002422:	2201      	movs	r2, #1
 8002424:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002426:	4b4c      	ldr	r3, [pc, #304]	@ (8002558 <menu+0xe94>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b08      	cmp	r3, #8
 800242c:	d167      	bne.n	80024fe <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 800242e:	4a4b      	ldr	r2, [pc, #300]	@ (800255c <menu+0xe98>)
 8002430:	2101      	movs	r1, #1
 8002432:	2001      	movs	r0, #1
 8002434:	f006 fe6e 	bl	8009114 <lcd_print>

		if(kapiAcTipi == 0) {
 8002438:	4b49      	ldr	r3, [pc, #292]	@ (8002560 <menu+0xe9c>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d105      	bne.n	800244c <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 8002440:	4a48      	ldr	r2, [pc, #288]	@ (8002564 <menu+0xea0>)
 8002442:	2101      	movs	r1, #1
 8002444:	2002      	movs	r0, #2
 8002446:	f006 fe65 	bl	8009114 <lcd_print>
 800244a:	e008      	b.n	800245e <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 800244c:	4b44      	ldr	r3, [pc, #272]	@ (8002560 <menu+0xe9c>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d104      	bne.n	800245e <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 8002454:	4a44      	ldr	r2, [pc, #272]	@ (8002568 <menu+0xea4>)
 8002456:	2101      	movs	r1, #1
 8002458:	2002      	movs	r0, #2
 800245a:	f006 fe5b 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800245e:	2102      	movs	r1, #2
 8002460:	4838      	ldr	r0, [pc, #224]	@ (8002544 <menu+0xe80>)
 8002462:	f008 fa0f 	bl	800a884 <HAL_GPIO_ReadPin>
 8002466:	4603      	mov	r3, r0
 8002468:	2b01      	cmp	r3, #1
 800246a:	d115      	bne.n	8002498 <menu+0xdd4>
 800246c:	4b36      	ldr	r3, [pc, #216]	@ (8002548 <menu+0xe84>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	f083 0301 	eor.w	r3, r3, #1
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00e      	beq.n	8002498 <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 800247a:	4b39      	ldr	r3, [pc, #228]	@ (8002560 <menu+0xe9c>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	3301      	adds	r3, #1
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4b37      	ldr	r3, [pc, #220]	@ (8002560 <menu+0xe9c>)
 8002484:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002486:	4b36      	ldr	r3, [pc, #216]	@ (8002560 <menu+0xe9c>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d902      	bls.n	8002494 <menu+0xdd0>
				kapiAcTipi = 0;
 800248e:	4b34      	ldr	r3, [pc, #208]	@ (8002560 <menu+0xe9c>)
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002494:	f001 fe5c 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002498:	2104      	movs	r1, #4
 800249a:	482a      	ldr	r0, [pc, #168]	@ (8002544 <menu+0xe80>)
 800249c:	f008 f9f2 	bl	800a884 <HAL_GPIO_ReadPin>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d115      	bne.n	80024d2 <menu+0xe0e>
 80024a6:	4b28      	ldr	r3, [pc, #160]	@ (8002548 <menu+0xe84>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	f083 0301 	eor.w	r3, r3, #1
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00e      	beq.n	80024d2 <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 80024b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002560 <menu+0xe9c>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b2da      	uxtb	r2, r3
 80024bc:	4b28      	ldr	r3, [pc, #160]	@ (8002560 <menu+0xe9c>)
 80024be:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80024c0:	4b27      	ldr	r3, [pc, #156]	@ (8002560 <menu+0xe9c>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <menu+0xe0a>
		   		kapiAcTipi = 1;
 80024c8:	4b25      	ldr	r3, [pc, #148]	@ (8002560 <menu+0xe9c>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024ce:	f001 fe3f 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024d2:	2108      	movs	r1, #8
 80024d4:	481b      	ldr	r0, [pc, #108]	@ (8002544 <menu+0xe80>)
 80024d6:	f008 f9d5 	bl	800a884 <HAL_GPIO_ReadPin>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d10e      	bne.n	80024fe <menu+0xe3a>
 80024e0:	4b19      	ldr	r3, [pc, #100]	@ (8002548 <menu+0xe84>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	f083 0301 	eor.w	r3, r3, #1
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d007      	beq.n	80024fe <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 80024ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002560 <menu+0xe9c>)
 80024f0:	781a      	ldrb	r2, [r3, #0]
 80024f2:	4b16      	ldr	r3, [pc, #88]	@ (800254c <menu+0xe88>)
 80024f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 80024f8:	4b16      	ldr	r3, [pc, #88]	@ (8002554 <menu+0xe90>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80024fe:	4b16      	ldr	r3, [pc, #88]	@ (8002558 <menu+0xe94>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b09      	cmp	r3, #9
 8002504:	f040 8092 	bne.w	800262c <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 8002508:	4a18      	ldr	r2, [pc, #96]	@ (800256c <menu+0xea8>)
 800250a:	2101      	movs	r1, #1
 800250c:	2001      	movs	r0, #1
 800250e:	f006 fe01 	bl	8009114 <lcd_print>

		if(kapi1Tip == 0) {
 8002512:	4b17      	ldr	r3, [pc, #92]	@ (8002570 <menu+0xeac>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d105      	bne.n	8002526 <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 800251a:	4a16      	ldr	r2, [pc, #88]	@ (8002574 <menu+0xeb0>)
 800251c:	2101      	movs	r1, #1
 800251e:	2002      	movs	r0, #2
 8002520:	f006 fdf8 	bl	8009114 <lcd_print>
 8002524:	e033      	b.n	800258e <menu+0xeca>
		} else if(kapi1Tip == 1) {
 8002526:	4b12      	ldr	r3, [pc, #72]	@ (8002570 <menu+0xeac>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d126      	bne.n	800257c <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 800252e:	4a12      	ldr	r2, [pc, #72]	@ (8002578 <menu+0xeb4>)
 8002530:	2101      	movs	r1, #1
 8002532:	2002      	movs	r0, #2
 8002534:	f006 fdee 	bl	8009114 <lcd_print>
 8002538:	e029      	b.n	800258e <menu+0xeca>
 800253a:	bf00      	nop
 800253c:	200010c4 	.word	0x200010c4
 8002540:	2000143c 	.word	0x2000143c
 8002544:	40010800 	.word	0x40010800
 8002548:	200010eb 	.word	0x200010eb
 800254c:	20000fec 	.word	0x20000fec
 8002550:	200010c2 	.word	0x200010c2
 8002554:	200010e8 	.word	0x200010e8
 8002558:	200010bc 	.word	0x200010bc
 800255c:	20001450 	.word	0x20001450
 8002560:	200010c8 	.word	0x200010c8
 8002564:	20001464 	.word	0x20001464
 8002568:	20001478 	.word	0x20001478
 800256c:	2000148c 	.word	0x2000148c
 8002570:	200010c5 	.word	0x200010c5
 8002574:	20000100 	.word	0x20000100
 8002578:	200014a0 	.word	0x200014a0
		} else if(kapi1Tip == 2) {
 800257c:	4b73      	ldr	r3, [pc, #460]	@ (800274c <menu+0x1088>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d104      	bne.n	800258e <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 8002584:	4a72      	ldr	r2, [pc, #456]	@ (8002750 <menu+0x108c>)
 8002586:	2101      	movs	r1, #1
 8002588:	2002      	movs	r0, #2
 800258a:	f006 fdc3 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800258e:	2102      	movs	r1, #2
 8002590:	4870      	ldr	r0, [pc, #448]	@ (8002754 <menu+0x1090>)
 8002592:	f008 f977 	bl	800a884 <HAL_GPIO_ReadPin>
 8002596:	4603      	mov	r3, r0
 8002598:	2b01      	cmp	r3, #1
 800259a:	d115      	bne.n	80025c8 <menu+0xf04>
 800259c:	4b6e      	ldr	r3, [pc, #440]	@ (8002758 <menu+0x1094>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	f083 0301 	eor.w	r3, r3, #1
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00e      	beq.n	80025c8 <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 80025aa:	4b68      	ldr	r3, [pc, #416]	@ (800274c <menu+0x1088>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	3301      	adds	r3, #1
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4b66      	ldr	r3, [pc, #408]	@ (800274c <menu+0x1088>)
 80025b4:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80025b6:	4b65      	ldr	r3, [pc, #404]	@ (800274c <menu+0x1088>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d902      	bls.n	80025c4 <menu+0xf00>
				kapi1Tip = 0;
 80025be:	4b63      	ldr	r3, [pc, #396]	@ (800274c <menu+0x1088>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025c4:	f001 fdc4 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025c8:	2104      	movs	r1, #4
 80025ca:	4862      	ldr	r0, [pc, #392]	@ (8002754 <menu+0x1090>)
 80025cc:	f008 f95a 	bl	800a884 <HAL_GPIO_ReadPin>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d115      	bne.n	8002602 <menu+0xf3e>
 80025d6:	4b60      	ldr	r3, [pc, #384]	@ (8002758 <menu+0x1094>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	f083 0301 	eor.w	r3, r3, #1
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00e      	beq.n	8002602 <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 80025e4:	4b59      	ldr	r3, [pc, #356]	@ (800274c <menu+0x1088>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	4b57      	ldr	r3, [pc, #348]	@ (800274c <menu+0x1088>)
 80025ee:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80025f0:	4b56      	ldr	r3, [pc, #344]	@ (800274c <menu+0x1088>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d902      	bls.n	80025fe <menu+0xf3a>
		   		kapi1Tip = 2;
 80025f8:	4b54      	ldr	r3, [pc, #336]	@ (800274c <menu+0x1088>)
 80025fa:	2202      	movs	r2, #2
 80025fc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025fe:	f001 fda7 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002602:	2108      	movs	r1, #8
 8002604:	4853      	ldr	r0, [pc, #332]	@ (8002754 <menu+0x1090>)
 8002606:	f008 f93d 	bl	800a884 <HAL_GPIO_ReadPin>
 800260a:	4603      	mov	r3, r0
 800260c:	2b01      	cmp	r3, #1
 800260e:	d10d      	bne.n	800262c <menu+0xf68>
 8002610:	4b51      	ldr	r3, [pc, #324]	@ (8002758 <menu+0x1094>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	f083 0301 	eor.w	r3, r3, #1
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d006      	beq.n	800262c <menu+0xf68>
			eepromData[8] = kapi1Tip;
 800261e:	4b4b      	ldr	r3, [pc, #300]	@ (800274c <menu+0x1088>)
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	4b4e      	ldr	r3, [pc, #312]	@ (800275c <menu+0x1098>)
 8002624:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002626:	4b4e      	ldr	r3, [pc, #312]	@ (8002760 <menu+0x109c>)
 8002628:	2201      	movs	r2, #1
 800262a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 800262c:	4b4d      	ldr	r3, [pc, #308]	@ (8002764 <menu+0x10a0>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b0a      	cmp	r3, #10
 8002632:	d16c      	bne.n	800270e <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 8002634:	4a4c      	ldr	r2, [pc, #304]	@ (8002768 <menu+0x10a4>)
 8002636:	2101      	movs	r1, #1
 8002638:	2001      	movs	r0, #1
 800263a:	f006 fd6b 	bl	8009114 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 800263e:	4a4b      	ldr	r2, [pc, #300]	@ (800276c <menu+0x10a8>)
 8002640:	2101      	movs	r1, #1
 8002642:	2002      	movs	r0, #2
 8002644:	f006 fd66 	bl	8009114 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 8002648:	4b49      	ldr	r3, [pc, #292]	@ (8002770 <menu+0x10ac>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	220a      	movs	r2, #10
 800264e:	4949      	ldr	r1, [pc, #292]	@ (8002774 <menu+0x10b0>)
 8002650:	4618      	mov	r0, r3
 8002652:	f00b fc05 	bl	800de60 <itoa>
		lcd_print(2,16,snum);
 8002656:	4a47      	ldr	r2, [pc, #284]	@ (8002774 <menu+0x10b0>)
 8002658:	2110      	movs	r1, #16
 800265a:	2002      	movs	r0, #2
 800265c:	f006 fd5a 	bl	8009114 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002660:	2102      	movs	r1, #2
 8002662:	483c      	ldr	r0, [pc, #240]	@ (8002754 <menu+0x1090>)
 8002664:	f008 f90e 	bl	800a884 <HAL_GPIO_ReadPin>
 8002668:	4603      	mov	r3, r0
 800266a:	2b01      	cmp	r3, #1
 800266c:	d119      	bne.n	80026a2 <menu+0xfde>
 800266e:	4b3a      	ldr	r3, [pc, #232]	@ (8002758 <menu+0x1094>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	f083 0301 	eor.w	r3, r3, #1
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d012      	beq.n	80026a2 <menu+0xfde>
 800267c:	4b33      	ldr	r3, [pc, #204]	@ (800274c <menu+0x1088>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10e      	bne.n	80026a2 <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 8002684:	4b3a      	ldr	r3, [pc, #232]	@ (8002770 <menu+0x10ac>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	3301      	adds	r3, #1
 800268a:	b2da      	uxtb	r2, r3
 800268c:	4b38      	ldr	r3, [pc, #224]	@ (8002770 <menu+0x10ac>)
 800268e:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002690:	4b37      	ldr	r3, [pc, #220]	@ (8002770 <menu+0x10ac>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b05      	cmp	r3, #5
 8002696:	d902      	bls.n	800269e <menu+0xfda>
				kapi1AcSure = 0;
 8002698:	4b35      	ldr	r3, [pc, #212]	@ (8002770 <menu+0x10ac>)
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800269e:	f001 fd57 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80026a2:	2104      	movs	r1, #4
 80026a4:	482b      	ldr	r0, [pc, #172]	@ (8002754 <menu+0x1090>)
 80026a6:	f008 f8ed 	bl	800a884 <HAL_GPIO_ReadPin>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d119      	bne.n	80026e4 <menu+0x1020>
 80026b0:	4b29      	ldr	r3, [pc, #164]	@ (8002758 <menu+0x1094>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	f083 0301 	eor.w	r3, r3, #1
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d012      	beq.n	80026e4 <menu+0x1020>
 80026be:	4b23      	ldr	r3, [pc, #140]	@ (800274c <menu+0x1088>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10e      	bne.n	80026e4 <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 80026c6:	4b2a      	ldr	r3, [pc, #168]	@ (8002770 <menu+0x10ac>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b2da      	uxtb	r2, r3
 80026ce:	4b28      	ldr	r3, [pc, #160]	@ (8002770 <menu+0x10ac>)
 80026d0:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80026d2:	4b27      	ldr	r3, [pc, #156]	@ (8002770 <menu+0x10ac>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b06      	cmp	r3, #6
 80026d8:	d902      	bls.n	80026e0 <menu+0x101c>
		   		kapi1AcSure = 5;
 80026da:	4b25      	ldr	r3, [pc, #148]	@ (8002770 <menu+0x10ac>)
 80026dc:	2205      	movs	r2, #5
 80026de:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026e0:	f001 fd36 	bl	8004150 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026e4:	2108      	movs	r1, #8
 80026e6:	481b      	ldr	r0, [pc, #108]	@ (8002754 <menu+0x1090>)
 80026e8:	f008 f8cc 	bl	800a884 <HAL_GPIO_ReadPin>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d10d      	bne.n	800270e <menu+0x104a>
 80026f2:	4b19      	ldr	r3, [pc, #100]	@ (8002758 <menu+0x1094>)
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	f083 0301 	eor.w	r3, r3, #1
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d006      	beq.n	800270e <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 8002700:	4b1b      	ldr	r3, [pc, #108]	@ (8002770 <menu+0x10ac>)
 8002702:	781a      	ldrb	r2, [r3, #0]
 8002704:	4b15      	ldr	r3, [pc, #84]	@ (800275c <menu+0x1098>)
 8002706:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002708:	4b15      	ldr	r3, [pc, #84]	@ (8002760 <menu+0x109c>)
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 800270e:	4b15      	ldr	r3, [pc, #84]	@ (8002764 <menu+0x10a0>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b0b      	cmp	r3, #11
 8002714:	f040 8090 	bne.w	8002838 <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 8002718:	4a17      	ldr	r2, [pc, #92]	@ (8002778 <menu+0x10b4>)
 800271a:	2101      	movs	r1, #1
 800271c:	2001      	movs	r0, #1
 800271e:	f006 fcf9 	bl	8009114 <lcd_print>

		if(kapi2Tip == 0) {
 8002722:	4b16      	ldr	r3, [pc, #88]	@ (800277c <menu+0x10b8>)
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d105      	bne.n	8002736 <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 800272a:	4a15      	ldr	r2, [pc, #84]	@ (8002780 <menu+0x10bc>)
 800272c:	2101      	movs	r1, #1
 800272e:	2002      	movs	r0, #2
 8002730:	f006 fcf0 	bl	8009114 <lcd_print>
 8002734:	e031      	b.n	800279a <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 8002736:	4b11      	ldr	r3, [pc, #68]	@ (800277c <menu+0x10b8>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d124      	bne.n	8002788 <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 800273e:	4a11      	ldr	r2, [pc, #68]	@ (8002784 <menu+0x10c0>)
 8002740:	2101      	movs	r1, #1
 8002742:	2002      	movs	r0, #2
 8002744:	f006 fce6 	bl	8009114 <lcd_print>
 8002748:	e027      	b.n	800279a <menu+0x10d6>
 800274a:	bf00      	nop
 800274c:	200010c5 	.word	0x200010c5
 8002750:	20000114 	.word	0x20000114
 8002754:	40010800 	.word	0x40010800
 8002758:	200010eb 	.word	0x200010eb
 800275c:	20000fec 	.word	0x20000fec
 8002760:	200010e8 	.word	0x200010e8
 8002764:	200010bc 	.word	0x200010bc
 8002768:	200014b4 	.word	0x200014b4
 800276c:	200014c8 	.word	0x200014c8
 8002770:	200010d5 	.word	0x200010d5
 8002774:	2000105c 	.word	0x2000105c
 8002778:	200014dc 	.word	0x200014dc
 800277c:	200010c6 	.word	0x200010c6
 8002780:	20000100 	.word	0x20000100
 8002784:	200014a0 	.word	0x200014a0
		} else if(kapi2Tip == 2) {
 8002788:	4b73      	ldr	r3, [pc, #460]	@ (8002958 <menu+0x1294>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d104      	bne.n	800279a <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 8002790:	4a72      	ldr	r2, [pc, #456]	@ (800295c <menu+0x1298>)
 8002792:	2101      	movs	r1, #1
 8002794:	2002      	movs	r0, #2
 8002796:	f006 fcbd 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800279a:	2102      	movs	r1, #2
 800279c:	4870      	ldr	r0, [pc, #448]	@ (8002960 <menu+0x129c>)
 800279e:	f008 f871 	bl	800a884 <HAL_GPIO_ReadPin>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d115      	bne.n	80027d4 <menu+0x1110>
 80027a8:	4b6e      	ldr	r3, [pc, #440]	@ (8002964 <menu+0x12a0>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	f083 0301 	eor.w	r3, r3, #1
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00e      	beq.n	80027d4 <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 80027b6:	4b68      	ldr	r3, [pc, #416]	@ (8002958 <menu+0x1294>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	3301      	adds	r3, #1
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4b66      	ldr	r3, [pc, #408]	@ (8002958 <menu+0x1294>)
 80027c0:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80027c2:	4b65      	ldr	r3, [pc, #404]	@ (8002958 <menu+0x1294>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d902      	bls.n	80027d0 <menu+0x110c>
				kapi2Tip = 0;
 80027ca:	4b63      	ldr	r3, [pc, #396]	@ (8002958 <menu+0x1294>)
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027d0:	f001 fcbe 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027d4:	2104      	movs	r1, #4
 80027d6:	4862      	ldr	r0, [pc, #392]	@ (8002960 <menu+0x129c>)
 80027d8:	f008 f854 	bl	800a884 <HAL_GPIO_ReadPin>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d115      	bne.n	800280e <menu+0x114a>
 80027e2:	4b60      	ldr	r3, [pc, #384]	@ (8002964 <menu+0x12a0>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	f083 0301 	eor.w	r3, r3, #1
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00e      	beq.n	800280e <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 80027f0:	4b59      	ldr	r3, [pc, #356]	@ (8002958 <menu+0x1294>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	4b57      	ldr	r3, [pc, #348]	@ (8002958 <menu+0x1294>)
 80027fa:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 80027fc:	4b56      	ldr	r3, [pc, #344]	@ (8002958 <menu+0x1294>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b03      	cmp	r3, #3
 8002802:	d902      	bls.n	800280a <menu+0x1146>
		   		kapi2Tip = 2;
 8002804:	4b54      	ldr	r3, [pc, #336]	@ (8002958 <menu+0x1294>)
 8002806:	2202      	movs	r2, #2
 8002808:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800280a:	f001 fca1 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800280e:	2108      	movs	r1, #8
 8002810:	4853      	ldr	r0, [pc, #332]	@ (8002960 <menu+0x129c>)
 8002812:	f008 f837 	bl	800a884 <HAL_GPIO_ReadPin>
 8002816:	4603      	mov	r3, r0
 8002818:	2b01      	cmp	r3, #1
 800281a:	d10d      	bne.n	8002838 <menu+0x1174>
 800281c:	4b51      	ldr	r3, [pc, #324]	@ (8002964 <menu+0x12a0>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	f083 0301 	eor.w	r3, r3, #1
 8002824:	b2db      	uxtb	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d006      	beq.n	8002838 <menu+0x1174>
			eepromData[10] = kapi2Tip;
 800282a:	4b4b      	ldr	r3, [pc, #300]	@ (8002958 <menu+0x1294>)
 800282c:	781a      	ldrb	r2, [r3, #0]
 800282e:	4b4e      	ldr	r3, [pc, #312]	@ (8002968 <menu+0x12a4>)
 8002830:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002832:	4b4e      	ldr	r3, [pc, #312]	@ (800296c <menu+0x12a8>)
 8002834:	2201      	movs	r2, #1
 8002836:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002838:	4b4d      	ldr	r3, [pc, #308]	@ (8002970 <menu+0x12ac>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b0c      	cmp	r3, #12
 800283e:	d16c      	bne.n	800291a <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 8002840:	4a4c      	ldr	r2, [pc, #304]	@ (8002974 <menu+0x12b0>)
 8002842:	2101      	movs	r1, #1
 8002844:	2001      	movs	r0, #1
 8002846:	f006 fc65 	bl	8009114 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 800284a:	4a4b      	ldr	r2, [pc, #300]	@ (8002978 <menu+0x12b4>)
 800284c:	2101      	movs	r1, #1
 800284e:	2002      	movs	r0, #2
 8002850:	f006 fc60 	bl	8009114 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 8002854:	4b49      	ldr	r3, [pc, #292]	@ (800297c <menu+0x12b8>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	220a      	movs	r2, #10
 800285a:	4949      	ldr	r1, [pc, #292]	@ (8002980 <menu+0x12bc>)
 800285c:	4618      	mov	r0, r3
 800285e:	f00b faff 	bl	800de60 <itoa>
		lcd_print(2,16,snum);
 8002862:	4a47      	ldr	r2, [pc, #284]	@ (8002980 <menu+0x12bc>)
 8002864:	2110      	movs	r1, #16
 8002866:	2002      	movs	r0, #2
 8002868:	f006 fc54 	bl	8009114 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800286c:	2102      	movs	r1, #2
 800286e:	483c      	ldr	r0, [pc, #240]	@ (8002960 <menu+0x129c>)
 8002870:	f008 f808 	bl	800a884 <HAL_GPIO_ReadPin>
 8002874:	4603      	mov	r3, r0
 8002876:	2b01      	cmp	r3, #1
 8002878:	d119      	bne.n	80028ae <menu+0x11ea>
 800287a:	4b3a      	ldr	r3, [pc, #232]	@ (8002964 <menu+0x12a0>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	f083 0301 	eor.w	r3, r3, #1
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d012      	beq.n	80028ae <menu+0x11ea>
 8002888:	4b33      	ldr	r3, [pc, #204]	@ (8002958 <menu+0x1294>)
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10e      	bne.n	80028ae <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 8002890:	4b3a      	ldr	r3, [pc, #232]	@ (800297c <menu+0x12b8>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	3301      	adds	r3, #1
 8002896:	b2da      	uxtb	r2, r3
 8002898:	4b38      	ldr	r3, [pc, #224]	@ (800297c <menu+0x12b8>)
 800289a:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 800289c:	4b37      	ldr	r3, [pc, #220]	@ (800297c <menu+0x12b8>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b05      	cmp	r3, #5
 80028a2:	d902      	bls.n	80028aa <menu+0x11e6>
				kapi2AcSure = 0;
 80028a4:	4b35      	ldr	r3, [pc, #212]	@ (800297c <menu+0x12b8>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028aa:	f001 fc51 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80028ae:	2104      	movs	r1, #4
 80028b0:	482b      	ldr	r0, [pc, #172]	@ (8002960 <menu+0x129c>)
 80028b2:	f007 ffe7 	bl	800a884 <HAL_GPIO_ReadPin>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d119      	bne.n	80028f0 <menu+0x122c>
 80028bc:	4b29      	ldr	r3, [pc, #164]	@ (8002964 <menu+0x12a0>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	f083 0301 	eor.w	r3, r3, #1
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d012      	beq.n	80028f0 <menu+0x122c>
 80028ca:	4b23      	ldr	r3, [pc, #140]	@ (8002958 <menu+0x1294>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10e      	bne.n	80028f0 <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 80028d2:	4b2a      	ldr	r3, [pc, #168]	@ (800297c <menu+0x12b8>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4b28      	ldr	r3, [pc, #160]	@ (800297c <menu+0x12b8>)
 80028dc:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 80028de:	4b27      	ldr	r3, [pc, #156]	@ (800297c <menu+0x12b8>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b06      	cmp	r3, #6
 80028e4:	d902      	bls.n	80028ec <menu+0x1228>
		   		kapi2AcSure = 5;
 80028e6:	4b25      	ldr	r3, [pc, #148]	@ (800297c <menu+0x12b8>)
 80028e8:	2205      	movs	r2, #5
 80028ea:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028ec:	f001 fc30 	bl	8004150 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028f0:	2108      	movs	r1, #8
 80028f2:	481b      	ldr	r0, [pc, #108]	@ (8002960 <menu+0x129c>)
 80028f4:	f007 ffc6 	bl	800a884 <HAL_GPIO_ReadPin>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d10d      	bne.n	800291a <menu+0x1256>
 80028fe:	4b19      	ldr	r3, [pc, #100]	@ (8002964 <menu+0x12a0>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	f083 0301 	eor.w	r3, r3, #1
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d006      	beq.n	800291a <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 800290c:	4b1b      	ldr	r3, [pc, #108]	@ (800297c <menu+0x12b8>)
 800290e:	781a      	ldrb	r2, [r3, #0]
 8002910:	4b15      	ldr	r3, [pc, #84]	@ (8002968 <menu+0x12a4>)
 8002912:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002914:	4b15      	ldr	r3, [pc, #84]	@ (800296c <menu+0x12a8>)
 8002916:	2201      	movs	r2, #1
 8002918:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 800291a:	4b15      	ldr	r3, [pc, #84]	@ (8002970 <menu+0x12ac>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b0d      	cmp	r3, #13
 8002920:	f040 8090 	bne.w	8002a44 <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 8002924:	4a17      	ldr	r2, [pc, #92]	@ (8002984 <menu+0x12c0>)
 8002926:	2101      	movs	r1, #1
 8002928:	2001      	movs	r0, #1
 800292a:	f006 fbf3 	bl	8009114 <lcd_print>

		if(kapitablaTip == 0) {
 800292e:	4b16      	ldr	r3, [pc, #88]	@ (8002988 <menu+0x12c4>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d105      	bne.n	8002942 <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 8002936:	4a15      	ldr	r2, [pc, #84]	@ (800298c <menu+0x12c8>)
 8002938:	2101      	movs	r1, #1
 800293a:	2002      	movs	r0, #2
 800293c:	f006 fbea 	bl	8009114 <lcd_print>
 8002940:	e031      	b.n	80029a6 <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 8002942:	4b11      	ldr	r3, [pc, #68]	@ (8002988 <menu+0x12c4>)
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d124      	bne.n	8002994 <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 800294a:	4a11      	ldr	r2, [pc, #68]	@ (8002990 <menu+0x12cc>)
 800294c:	2101      	movs	r1, #1
 800294e:	2002      	movs	r0, #2
 8002950:	f006 fbe0 	bl	8009114 <lcd_print>
 8002954:	e027      	b.n	80029a6 <menu+0x12e2>
 8002956:	bf00      	nop
 8002958:	200010c6 	.word	0x200010c6
 800295c:	20000114 	.word	0x20000114
 8002960:	40010800 	.word	0x40010800
 8002964:	200010eb 	.word	0x200010eb
 8002968:	20000fec 	.word	0x20000fec
 800296c:	200010e8 	.word	0x200010e8
 8002970:	200010bc 	.word	0x200010bc
 8002974:	200014f0 	.word	0x200014f0
 8002978:	200014c8 	.word	0x200014c8
 800297c:	200010d6 	.word	0x200010d6
 8002980:	2000105c 	.word	0x2000105c
 8002984:	20001504 	.word	0x20001504
 8002988:	200010c7 	.word	0x200010c7
 800298c:	20000100 	.word	0x20000100
 8002990:	200014a0 	.word	0x200014a0
		} else if(kapitablaTip == 2) {
 8002994:	4b3f      	ldr	r3, [pc, #252]	@ (8002a94 <menu+0x13d0>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d104      	bne.n	80029a6 <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 800299c:	4a3e      	ldr	r2, [pc, #248]	@ (8002a98 <menu+0x13d4>)
 800299e:	2101      	movs	r1, #1
 80029a0:	2002      	movs	r0, #2
 80029a2:	f006 fbb7 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029a6:	2102      	movs	r1, #2
 80029a8:	483c      	ldr	r0, [pc, #240]	@ (8002a9c <menu+0x13d8>)
 80029aa:	f007 ff6b 	bl	800a884 <HAL_GPIO_ReadPin>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d115      	bne.n	80029e0 <menu+0x131c>
 80029b4:	4b3a      	ldr	r3, [pc, #232]	@ (8002aa0 <menu+0x13dc>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	f083 0301 	eor.w	r3, r3, #1
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00e      	beq.n	80029e0 <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 80029c2:	4b34      	ldr	r3, [pc, #208]	@ (8002a94 <menu+0x13d0>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	3301      	adds	r3, #1
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	4b32      	ldr	r3, [pc, #200]	@ (8002a94 <menu+0x13d0>)
 80029cc:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 80029ce:	4b31      	ldr	r3, [pc, #196]	@ (8002a94 <menu+0x13d0>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d902      	bls.n	80029dc <menu+0x1318>
				kapitablaTip = 0;
 80029d6:	4b2f      	ldr	r3, [pc, #188]	@ (8002a94 <menu+0x13d0>)
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029dc:	f001 fbb8 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029e0:	2104      	movs	r1, #4
 80029e2:	482e      	ldr	r0, [pc, #184]	@ (8002a9c <menu+0x13d8>)
 80029e4:	f007 ff4e 	bl	800a884 <HAL_GPIO_ReadPin>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d115      	bne.n	8002a1a <menu+0x1356>
 80029ee:	4b2c      	ldr	r3, [pc, #176]	@ (8002aa0 <menu+0x13dc>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	f083 0301 	eor.w	r3, r3, #1
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00e      	beq.n	8002a1a <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 80029fc:	4b25      	ldr	r3, [pc, #148]	@ (8002a94 <menu+0x13d0>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	4b23      	ldr	r3, [pc, #140]	@ (8002a94 <menu+0x13d0>)
 8002a06:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002a08:	4b22      	ldr	r3, [pc, #136]	@ (8002a94 <menu+0x13d0>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b03      	cmp	r3, #3
 8002a0e:	d902      	bls.n	8002a16 <menu+0x1352>
		   		kapitablaTip = 2;
 8002a10:	4b20      	ldr	r3, [pc, #128]	@ (8002a94 <menu+0x13d0>)
 8002a12:	2202      	movs	r2, #2
 8002a14:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a16:	f001 fb9b 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a1a:	2108      	movs	r1, #8
 8002a1c:	481f      	ldr	r0, [pc, #124]	@ (8002a9c <menu+0x13d8>)
 8002a1e:	f007 ff31 	bl	800a884 <HAL_GPIO_ReadPin>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d10d      	bne.n	8002a44 <menu+0x1380>
 8002a28:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa0 <menu+0x13dc>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	f083 0301 	eor.w	r3, r3, #1
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d006      	beq.n	8002a44 <menu+0x1380>
			eepromData[12] = kapitablaTip;
 8002a36:	4b17      	ldr	r3, [pc, #92]	@ (8002a94 <menu+0x13d0>)
 8002a38:	781a      	ldrb	r2, [r3, #0]
 8002a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa4 <menu+0x13e0>)
 8002a3c:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002a3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002aa8 <menu+0x13e4>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002a44:	4b19      	ldr	r3, [pc, #100]	@ (8002aac <menu+0x13e8>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b0e      	cmp	r3, #14
 8002a4a:	f040 80a3 	bne.w	8002b94 <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 8002a4e:	4a18      	ldr	r2, [pc, #96]	@ (8002ab0 <menu+0x13ec>)
 8002a50:	2101      	movs	r1, #1
 8002a52:	2001      	movs	r0, #1
 8002a54:	f006 fb5e 	bl	8009114 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 8002a58:	4b16      	ldr	r3, [pc, #88]	@ (8002ab4 <menu+0x13f0>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 8002a60:	4a15      	ldr	r2, [pc, #84]	@ (8002ab8 <menu+0x13f4>)
 8002a62:	2101      	movs	r1, #1
 8002a64:	2002      	movs	r0, #2
 8002a66:	f006 fb55 	bl	8009114 <lcd_print>
 8002a6a:	e034      	b.n	8002ad6 <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 8002a6c:	4b11      	ldr	r3, [pc, #68]	@ (8002ab4 <menu+0x13f0>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d105      	bne.n	8002a80 <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 8002a74:	4a11      	ldr	r2, [pc, #68]	@ (8002abc <menu+0x13f8>)
 8002a76:	2101      	movs	r1, #1
 8002a78:	2002      	movs	r0, #2
 8002a7a:	f006 fb4b 	bl	8009114 <lcd_print>
 8002a7e:	e02a      	b.n	8002ad6 <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 8002a80:	4b0c      	ldr	r3, [pc, #48]	@ (8002ab4 <menu+0x13f0>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d11d      	bne.n	8002ac4 <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 8002a88:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac0 <menu+0x13fc>)
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	2002      	movs	r0, #2
 8002a8e:	f006 fb41 	bl	8009114 <lcd_print>
 8002a92:	e020      	b.n	8002ad6 <menu+0x1412>
 8002a94:	200010c7 	.word	0x200010c7
 8002a98:	20000114 	.word	0x20000114
 8002a9c:	40010800 	.word	0x40010800
 8002aa0:	200010eb 	.word	0x200010eb
 8002aa4:	20000fec 	.word	0x20000fec
 8002aa8:	200010e8 	.word	0x200010e8
 8002aac:	200010bc 	.word	0x200010bc
 8002ab0:	20001518 	.word	0x20001518
 8002ab4:	200010c9 	.word	0x200010c9
 8002ab8:	2000152c 	.word	0x2000152c
 8002abc:	20001540 	.word	0x20001540
 8002ac0:	20001554 	.word	0x20001554
		} else if(kapiTablaAcKonum == 3) {
 8002ac4:	4b76      	ldr	r3, [pc, #472]	@ (8002ca0 <menu+0x15dc>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d104      	bne.n	8002ad6 <menu+0x1412>
			lcd_print(2, 1, pasifText);
 8002acc:	4a75      	ldr	r2, [pc, #468]	@ (8002ca4 <menu+0x15e0>)
 8002ace:	2101      	movs	r1, #1
 8002ad0:	2002      	movs	r0, #2
 8002ad2:	f006 fb1f 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ad6:	2102      	movs	r1, #2
 8002ad8:	4873      	ldr	r0, [pc, #460]	@ (8002ca8 <menu+0x15e4>)
 8002ada:	f007 fed3 	bl	800a884 <HAL_GPIO_ReadPin>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d115      	bne.n	8002b10 <menu+0x144c>
 8002ae4:	4b71      	ldr	r3, [pc, #452]	@ (8002cac <menu+0x15e8>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	f083 0301 	eor.w	r3, r3, #1
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00e      	beq.n	8002b10 <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002af2:	4b6b      	ldr	r3, [pc, #428]	@ (8002ca0 <menu+0x15dc>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	3301      	adds	r3, #1
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4b69      	ldr	r3, [pc, #420]	@ (8002ca0 <menu+0x15dc>)
 8002afc:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002afe:	4b68      	ldr	r3, [pc, #416]	@ (8002ca0 <menu+0x15dc>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d902      	bls.n	8002b0c <menu+0x1448>
				kapiTablaAcKonum = 0;
 8002b06:	4b66      	ldr	r3, [pc, #408]	@ (8002ca0 <menu+0x15dc>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b0c:	f001 fb20 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b10:	2104      	movs	r1, #4
 8002b12:	4865      	ldr	r0, [pc, #404]	@ (8002ca8 <menu+0x15e4>)
 8002b14:	f007 feb6 	bl	800a884 <HAL_GPIO_ReadPin>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d115      	bne.n	8002b4a <menu+0x1486>
 8002b1e:	4b63      	ldr	r3, [pc, #396]	@ (8002cac <menu+0x15e8>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	f083 0301 	eor.w	r3, r3, #1
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00e      	beq.n	8002b4a <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002b2c:	4b5c      	ldr	r3, [pc, #368]	@ (8002ca0 <menu+0x15dc>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	4b5a      	ldr	r3, [pc, #360]	@ (8002ca0 <menu+0x15dc>)
 8002b36:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002b38:	4b59      	ldr	r3, [pc, #356]	@ (8002ca0 <menu+0x15dc>)
 8002b3a:	781b      	ldrb	r3, [r3, #0]
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d902      	bls.n	8002b46 <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 8002b40:	4b57      	ldr	r3, [pc, #348]	@ (8002ca0 <menu+0x15dc>)
 8002b42:	2202      	movs	r2, #2
 8002b44:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b46:	f001 fb03 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b4a:	2108      	movs	r1, #8
 8002b4c:	4856      	ldr	r0, [pc, #344]	@ (8002ca8 <menu+0x15e4>)
 8002b4e:	f007 fe99 	bl	800a884 <HAL_GPIO_ReadPin>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d11d      	bne.n	8002b94 <menu+0x14d0>
 8002b58:	4b54      	ldr	r3, [pc, #336]	@ (8002cac <menu+0x15e8>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	f083 0301 	eor.w	r3, r3, #1
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d016      	beq.n	8002b94 <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 8002b66:	4b4e      	ldr	r3, [pc, #312]	@ (8002ca0 <menu+0x15dc>)
 8002b68:	781a      	ldrb	r2, [r3, #0]
 8002b6a:	4b51      	ldr	r3, [pc, #324]	@ (8002cb0 <menu+0x15ec>)
 8002b6c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002b70:	4b4b      	ldr	r3, [pc, #300]	@ (8002ca0 <menu+0x15dc>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d003      	beq.n	8002b80 <menu+0x14bc>
 8002b78:	4b49      	ldr	r3, [pc, #292]	@ (8002ca0 <menu+0x15dc>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d106      	bne.n	8002b8e <menu+0x14ca>
				altLimit = 1;
 8002b80:	4b4c      	ldr	r3, [pc, #304]	@ (8002cb4 <menu+0x15f0>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002b86:	4b4b      	ldr	r3, [pc, #300]	@ (8002cb4 <menu+0x15f0>)
 8002b88:	781a      	ldrb	r2, [r3, #0]
 8002b8a:	4b49      	ldr	r3, [pc, #292]	@ (8002cb0 <menu+0x15ec>)
 8002b8c:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002b8e:	4b4a      	ldr	r3, [pc, #296]	@ (8002cb8 <menu+0x15f4>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002b94:	4b49      	ldr	r3, [pc, #292]	@ (8002cbc <menu+0x15f8>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	2b0f      	cmp	r3, #15
 8002b9a:	d16c      	bne.n	8002c76 <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 8002b9c:	4a48      	ldr	r2, [pc, #288]	@ (8002cc0 <menu+0x15fc>)
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	2001      	movs	r0, #1
 8002ba2:	f006 fab7 	bl	8009114 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002ba6:	4a47      	ldr	r2, [pc, #284]	@ (8002cc4 <menu+0x1600>)
 8002ba8:	2101      	movs	r1, #1
 8002baa:	2002      	movs	r0, #2
 8002bac:	f006 fab2 	bl	8009114 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002bb0:	4b45      	ldr	r3, [pc, #276]	@ (8002cc8 <menu+0x1604>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	220a      	movs	r2, #10
 8002bb6:	4945      	ldr	r1, [pc, #276]	@ (8002ccc <menu+0x1608>)
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f00b f951 	bl	800de60 <itoa>
		lcd_print(2,16,snum);
 8002bbe:	4a43      	ldr	r2, [pc, #268]	@ (8002ccc <menu+0x1608>)
 8002bc0:	2110      	movs	r1, #16
 8002bc2:	2002      	movs	r0, #2
 8002bc4:	f006 faa6 	bl	8009114 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002bc8:	2102      	movs	r1, #2
 8002bca:	4837      	ldr	r0, [pc, #220]	@ (8002ca8 <menu+0x15e4>)
 8002bcc:	f007 fe5a 	bl	800a884 <HAL_GPIO_ReadPin>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d119      	bne.n	8002c0a <menu+0x1546>
 8002bd6:	4b35      	ldr	r3, [pc, #212]	@ (8002cac <menu+0x15e8>)
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	f083 0301 	eor.w	r3, r3, #1
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d012      	beq.n	8002c0a <menu+0x1546>
 8002be4:	4b3a      	ldr	r3, [pc, #232]	@ (8002cd0 <menu+0x160c>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10e      	bne.n	8002c0a <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002bec:	4b36      	ldr	r3, [pc, #216]	@ (8002cc8 <menu+0x1604>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	4b34      	ldr	r3, [pc, #208]	@ (8002cc8 <menu+0x1604>)
 8002bf6:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002bf8:	4b33      	ldr	r3, [pc, #204]	@ (8002cc8 <menu+0x1604>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b05      	cmp	r3, #5
 8002bfe:	d902      	bls.n	8002c06 <menu+0x1542>
				kapiTablaAcSure = 0;
 8002c00:	4b31      	ldr	r3, [pc, #196]	@ (8002cc8 <menu+0x1604>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c06:	f001 faa3 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002c0a:	2104      	movs	r1, #4
 8002c0c:	4826      	ldr	r0, [pc, #152]	@ (8002ca8 <menu+0x15e4>)
 8002c0e:	f007 fe39 	bl	800a884 <HAL_GPIO_ReadPin>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d119      	bne.n	8002c4c <menu+0x1588>
 8002c18:	4b24      	ldr	r3, [pc, #144]	@ (8002cac <menu+0x15e8>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	f083 0301 	eor.w	r3, r3, #1
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d012      	beq.n	8002c4c <menu+0x1588>
 8002c26:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd0 <menu+0x160c>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10e      	bne.n	8002c4c <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002c2e:	4b26      	ldr	r3, [pc, #152]	@ (8002cc8 <menu+0x1604>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	4b24      	ldr	r3, [pc, #144]	@ (8002cc8 <menu+0x1604>)
 8002c38:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002c3a:	4b23      	ldr	r3, [pc, #140]	@ (8002cc8 <menu+0x1604>)
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	2b06      	cmp	r3, #6
 8002c40:	d902      	bls.n	8002c48 <menu+0x1584>
		   		kapiTablaAcSure = 5;
 8002c42:	4b21      	ldr	r3, [pc, #132]	@ (8002cc8 <menu+0x1604>)
 8002c44:	2205      	movs	r2, #5
 8002c46:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002c48:	f001 fa82 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c4c:	2108      	movs	r1, #8
 8002c4e:	4816      	ldr	r0, [pc, #88]	@ (8002ca8 <menu+0x15e4>)
 8002c50:	f007 fe18 	bl	800a884 <HAL_GPIO_ReadPin>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d10d      	bne.n	8002c76 <menu+0x15b2>
 8002c5a:	4b14      	ldr	r3, [pc, #80]	@ (8002cac <menu+0x15e8>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	f083 0301 	eor.w	r3, r3, #1
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d006      	beq.n	8002c76 <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 8002c68:	4b17      	ldr	r3, [pc, #92]	@ (8002cc8 <menu+0x1604>)
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	4b10      	ldr	r3, [pc, #64]	@ (8002cb0 <menu+0x15ec>)
 8002c6e:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002c70:	4b11      	ldr	r3, [pc, #68]	@ (8002cb8 <menu+0x15f4>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002c76:	4b11      	ldr	r3, [pc, #68]	@ (8002cbc <menu+0x15f8>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b10      	cmp	r3, #16
 8002c7c:	f040 8086 	bne.w	8002d8c <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002c80:	4a14      	ldr	r2, [pc, #80]	@ (8002cd4 <menu+0x1610>)
 8002c82:	2101      	movs	r1, #1
 8002c84:	2001      	movs	r0, #1
 8002c86:	f006 fa45 	bl	8009114 <lcd_print>

		if(yukariYavasLimit == 0) {
 8002c8a:	4b13      	ldr	r3, [pc, #76]	@ (8002cd8 <menu+0x1614>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d124      	bne.n	8002cdc <menu+0x1618>
			lcd_print(2, 1, pasifText);
 8002c92:	4a04      	ldr	r2, [pc, #16]	@ (8002ca4 <menu+0x15e0>)
 8002c94:	2101      	movs	r1, #1
 8002c96:	2002      	movs	r0, #2
 8002c98:	f006 fa3c 	bl	8009114 <lcd_print>
 8002c9c:	e027      	b.n	8002cee <menu+0x162a>
 8002c9e:	bf00      	nop
 8002ca0:	200010c9 	.word	0x200010c9
 8002ca4:	2000139c 	.word	0x2000139c
 8002ca8:	40010800 	.word	0x40010800
 8002cac:	200010eb 	.word	0x200010eb
 8002cb0:	20000fec 	.word	0x20000fec
 8002cb4:	200010c2 	.word	0x200010c2
 8002cb8:	200010e8 	.word	0x200010e8
 8002cbc:	200010bc 	.word	0x200010bc
 8002cc0:	20001568 	.word	0x20001568
 8002cc4:	200014c8 	.word	0x200014c8
 8002cc8:	200010d7 	.word	0x200010d7
 8002ccc:	2000105c 	.word	0x2000105c
 8002cd0:	200010c7 	.word	0x200010c7
 8002cd4:	2000157c 	.word	0x2000157c
 8002cd8:	200010ca 	.word	0x200010ca
		} else if(yukariYavasLimit == 1) {
 8002cdc:	4b84      	ldr	r3, [pc, #528]	@ (8002ef0 <menu+0x182c>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d104      	bne.n	8002cee <menu+0x162a>
			lcd_print(2, 1, aktifText);
 8002ce4:	4a83      	ldr	r2, [pc, #524]	@ (8002ef4 <menu+0x1830>)
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	2002      	movs	r0, #2
 8002cea:	f006 fa13 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cee:	2102      	movs	r1, #2
 8002cf0:	4881      	ldr	r0, [pc, #516]	@ (8002ef8 <menu+0x1834>)
 8002cf2:	f007 fdc7 	bl	800a884 <HAL_GPIO_ReadPin>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d115      	bne.n	8002d28 <menu+0x1664>
 8002cfc:	4b7f      	ldr	r3, [pc, #508]	@ (8002efc <menu+0x1838>)
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	f083 0301 	eor.w	r3, r3, #1
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00e      	beq.n	8002d28 <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002d0a:	4b79      	ldr	r3, [pc, #484]	@ (8002ef0 <menu+0x182c>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	4b77      	ldr	r3, [pc, #476]	@ (8002ef0 <menu+0x182c>)
 8002d14:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002d16:	4b76      	ldr	r3, [pc, #472]	@ (8002ef0 <menu+0x182c>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d902      	bls.n	8002d24 <menu+0x1660>
				yukariYavasLimit = 0;
 8002d1e:	4b74      	ldr	r3, [pc, #464]	@ (8002ef0 <menu+0x182c>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d24:	f001 fa14 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d28:	2104      	movs	r1, #4
 8002d2a:	4873      	ldr	r0, [pc, #460]	@ (8002ef8 <menu+0x1834>)
 8002d2c:	f007 fdaa 	bl	800a884 <HAL_GPIO_ReadPin>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d115      	bne.n	8002d62 <menu+0x169e>
 8002d36:	4b71      	ldr	r3, [pc, #452]	@ (8002efc <menu+0x1838>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	f083 0301 	eor.w	r3, r3, #1
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00e      	beq.n	8002d62 <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002d44:	4b6a      	ldr	r3, [pc, #424]	@ (8002ef0 <menu+0x182c>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	4b68      	ldr	r3, [pc, #416]	@ (8002ef0 <menu+0x182c>)
 8002d4e:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002d50:	4b67      	ldr	r3, [pc, #412]	@ (8002ef0 <menu+0x182c>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <menu+0x169a>
		   		yukariYavasLimit = 1;
 8002d58:	4b65      	ldr	r3, [pc, #404]	@ (8002ef0 <menu+0x182c>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d5e:	f001 f9f7 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d62:	2108      	movs	r1, #8
 8002d64:	4864      	ldr	r0, [pc, #400]	@ (8002ef8 <menu+0x1834>)
 8002d66:	f007 fd8d 	bl	800a884 <HAL_GPIO_ReadPin>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d10d      	bne.n	8002d8c <menu+0x16c8>
 8002d70:	4b62      	ldr	r3, [pc, #392]	@ (8002efc <menu+0x1838>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	f083 0301 	eor.w	r3, r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d006      	beq.n	8002d8c <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 8002d7e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ef0 <menu+0x182c>)
 8002d80:	781a      	ldrb	r2, [r3, #0]
 8002d82:	4b5f      	ldr	r3, [pc, #380]	@ (8002f00 <menu+0x183c>)
 8002d84:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002d86:	4b5f      	ldr	r3, [pc, #380]	@ (8002f04 <menu+0x1840>)
 8002d88:	2201      	movs	r2, #1
 8002d8a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002d8c:	4b5e      	ldr	r3, [pc, #376]	@ (8002f08 <menu+0x1844>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b11      	cmp	r3, #17
 8002d92:	f040 808b 	bne.w	8002eac <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 8002d96:	4a5d      	ldr	r2, [pc, #372]	@ (8002f0c <menu+0x1848>)
 8002d98:	2101      	movs	r1, #1
 8002d9a:	2001      	movs	r0, #1
 8002d9c:	f006 f9ba 	bl	8009114 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002da0:	4b5b      	ldr	r3, [pc, #364]	@ (8002f10 <menu+0x184c>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d105      	bne.n	8002db4 <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 8002da8:	4a5a      	ldr	r2, [pc, #360]	@ (8002f14 <menu+0x1850>)
 8002daa:	2101      	movs	r1, #1
 8002dac:	2002      	movs	r0, #2
 8002dae:	f006 f9b1 	bl	8009114 <lcd_print>
 8002db2:	e012      	b.n	8002dda <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 8002db4:	4b56      	ldr	r3, [pc, #344]	@ (8002f10 <menu+0x184c>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d105      	bne.n	8002dc8 <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 8002dbc:	4a56      	ldr	r2, [pc, #344]	@ (8002f18 <menu+0x1854>)
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	2002      	movs	r0, #2
 8002dc2:	f006 f9a7 	bl	8009114 <lcd_print>
 8002dc6:	e008      	b.n	8002dda <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 8002dc8:	4b51      	ldr	r3, [pc, #324]	@ (8002f10 <menu+0x184c>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d104      	bne.n	8002dda <menu+0x1716>
			lcd_print(2, 1, pasifText);
 8002dd0:	4a52      	ldr	r2, [pc, #328]	@ (8002f1c <menu+0x1858>)
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	2002      	movs	r0, #2
 8002dd6:	f006 f99d 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dda:	2102      	movs	r1, #2
 8002ddc:	4846      	ldr	r0, [pc, #280]	@ (8002ef8 <menu+0x1834>)
 8002dde:	f007 fd51 	bl	800a884 <HAL_GPIO_ReadPin>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d115      	bne.n	8002e14 <menu+0x1750>
 8002de8:	4b44      	ldr	r3, [pc, #272]	@ (8002efc <menu+0x1838>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	f083 0301 	eor.w	r3, r3, #1
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00e      	beq.n	8002e14 <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002df6:	4b46      	ldr	r3, [pc, #280]	@ (8002f10 <menu+0x184c>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	4b44      	ldr	r3, [pc, #272]	@ (8002f10 <menu+0x184c>)
 8002e00:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002e02:	4b43      	ldr	r3, [pc, #268]	@ (8002f10 <menu+0x184c>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d902      	bls.n	8002e10 <menu+0x174c>
				devirmeYuruyusSecim = 0;
 8002e0a:	4b41      	ldr	r3, [pc, #260]	@ (8002f10 <menu+0x184c>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e10:	f001 f99e 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e14:	2104      	movs	r1, #4
 8002e16:	4838      	ldr	r0, [pc, #224]	@ (8002ef8 <menu+0x1834>)
 8002e18:	f007 fd34 	bl	800a884 <HAL_GPIO_ReadPin>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d115      	bne.n	8002e4e <menu+0x178a>
 8002e22:	4b36      	ldr	r3, [pc, #216]	@ (8002efc <menu+0x1838>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	f083 0301 	eor.w	r3, r3, #1
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00e      	beq.n	8002e4e <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002e30:	4b37      	ldr	r3, [pc, #220]	@ (8002f10 <menu+0x184c>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	4b35      	ldr	r3, [pc, #212]	@ (8002f10 <menu+0x184c>)
 8002e3a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002e3c:	4b34      	ldr	r3, [pc, #208]	@ (8002f10 <menu+0x184c>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b03      	cmp	r3, #3
 8002e42:	d902      	bls.n	8002e4a <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 8002e44:	4b32      	ldr	r3, [pc, #200]	@ (8002f10 <menu+0x184c>)
 8002e46:	2202      	movs	r2, #2
 8002e48:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e4a:	f001 f981 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e4e:	2108      	movs	r1, #8
 8002e50:	4829      	ldr	r0, [pc, #164]	@ (8002ef8 <menu+0x1834>)
 8002e52:	f007 fd17 	bl	800a884 <HAL_GPIO_ReadPin>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d127      	bne.n	8002eac <menu+0x17e8>
 8002e5c:	4b27      	ldr	r3, [pc, #156]	@ (8002efc <menu+0x1838>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	f083 0301 	eor.w	r3, r3, #1
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d020      	beq.n	8002eac <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 8002e6a:	4b29      	ldr	r3, [pc, #164]	@ (8002f10 <menu+0x184c>)
 8002e6c:	781a      	ldrb	r2, [r3, #0]
 8002e6e:	4b24      	ldr	r3, [pc, #144]	@ (8002f00 <menu+0x183c>)
 8002e70:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002e72:	4b27      	ldr	r3, [pc, #156]	@ (8002f10 <menu+0x184c>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d003      	beq.n	8002e82 <menu+0x17be>
 8002e7a:	4b25      	ldr	r3, [pc, #148]	@ (8002f10 <menu+0x184c>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d106      	bne.n	8002e90 <menu+0x17cc>
				calismaSekli = 0;
 8002e82:	4b27      	ldr	r3, [pc, #156]	@ (8002f20 <menu+0x185c>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002e88:	4b25      	ldr	r3, [pc, #148]	@ (8002f20 <menu+0x185c>)
 8002e8a:	781a      	ldrb	r2, [r3, #0]
 8002e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8002f00 <menu+0x183c>)
 8002e8e:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002e90:	4b1f      	ldr	r3, [pc, #124]	@ (8002f10 <menu+0x184c>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d106      	bne.n	8002ea6 <menu+0x17e2>
				devirmeSilindirTipi = 1;
 8002e98:	4b22      	ldr	r3, [pc, #136]	@ (8002f24 <menu+0x1860>)
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002e9e:	4b21      	ldr	r3, [pc, #132]	@ (8002f24 <menu+0x1860>)
 8002ea0:	781a      	ldrb	r2, [r3, #0]
 8002ea2:	4b17      	ldr	r3, [pc, #92]	@ (8002f00 <menu+0x183c>)
 8002ea4:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002ea6:	4b17      	ldr	r3, [pc, #92]	@ (8002f04 <menu+0x1840>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002eac:	4b16      	ldr	r3, [pc, #88]	@ (8002f08 <menu+0x1844>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b12      	cmp	r3, #18
 8002eb2:	f040 8097 	bne.w	8002fe4 <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 8002eb6:	4b16      	ldr	r3, [pc, #88]	@ (8002f10 <menu+0x184c>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d105      	bne.n	8002eca <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 8002ebe:	4a1a      	ldr	r2, [pc, #104]	@ (8002f28 <menu+0x1864>)
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	2001      	movs	r0, #1
 8002ec4:	f006 f926 	bl	8009114 <lcd_print>
 8002ec8:	e008      	b.n	8002edc <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 8002eca:	4b11      	ldr	r3, [pc, #68]	@ (8002f10 <menu+0x184c>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d104      	bne.n	8002edc <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 8002ed2:	4a16      	ldr	r2, [pc, #88]	@ (8002f2c <menu+0x1868>)
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	2001      	movs	r0, #1
 8002ed8:	f006 f91c 	bl	8009114 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002edc:	4b14      	ldr	r3, [pc, #80]	@ (8002f30 <menu+0x186c>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d127      	bne.n	8002f34 <menu+0x1870>
			lcd_print(2, 1, pasifText);
 8002ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8002f1c <menu+0x1858>)
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	2002      	movs	r0, #2
 8002eea:	f006 f913 	bl	8009114 <lcd_print>
 8002eee:	e02a      	b.n	8002f46 <menu+0x1882>
 8002ef0:	200010ca 	.word	0x200010ca
 8002ef4:	200013b0 	.word	0x200013b0
 8002ef8:	40010800 	.word	0x40010800
 8002efc:	200010eb 	.word	0x200010eb
 8002f00:	20000fec 	.word	0x20000fec
 8002f04:	200010e8 	.word	0x200010e8
 8002f08:	200010bc 	.word	0x200010bc
 8002f0c:	20001590 	.word	0x20001590
 8002f10:	200010cb 	.word	0x200010cb
 8002f14:	200015a4 	.word	0x200015a4
 8002f18:	200015b8 	.word	0x200015b8
 8002f1c:	2000139c 	.word	0x2000139c
 8002f20:	200010bd 	.word	0x200010bd
 8002f24:	200010ce 	.word	0x200010ce
 8002f28:	200015cc 	.word	0x200015cc
 8002f2c:	200015e0 	.word	0x200015e0
 8002f30:	200010cc 	.word	0x200010cc
		} else if(devirmeYukariIleriLimit == 1){
 8002f34:	4b79      	ldr	r3, [pc, #484]	@ (800311c <menu+0x1a58>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d104      	bne.n	8002f46 <menu+0x1882>
			lcd_print(2, 1, aktifText);
 8002f3c:	4a78      	ldr	r2, [pc, #480]	@ (8003120 <menu+0x1a5c>)
 8002f3e:	2101      	movs	r1, #1
 8002f40:	2002      	movs	r0, #2
 8002f42:	f006 f8e7 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f46:	2102      	movs	r1, #2
 8002f48:	4876      	ldr	r0, [pc, #472]	@ (8003124 <menu+0x1a60>)
 8002f4a:	f007 fc9b 	bl	800a884 <HAL_GPIO_ReadPin>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d115      	bne.n	8002f80 <menu+0x18bc>
 8002f54:	4b74      	ldr	r3, [pc, #464]	@ (8003128 <menu+0x1a64>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	f083 0301 	eor.w	r3, r3, #1
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00e      	beq.n	8002f80 <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002f62:	4b6e      	ldr	r3, [pc, #440]	@ (800311c <menu+0x1a58>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	3301      	adds	r3, #1
 8002f68:	b2da      	uxtb	r2, r3
 8002f6a:	4b6c      	ldr	r3, [pc, #432]	@ (800311c <menu+0x1a58>)
 8002f6c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002f6e:	4b6b      	ldr	r3, [pc, #428]	@ (800311c <menu+0x1a58>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d902      	bls.n	8002f7c <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 8002f76:	4b69      	ldr	r3, [pc, #420]	@ (800311c <menu+0x1a58>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f7c:	f001 f8e8 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f80:	2104      	movs	r1, #4
 8002f82:	4868      	ldr	r0, [pc, #416]	@ (8003124 <menu+0x1a60>)
 8002f84:	f007 fc7e 	bl	800a884 <HAL_GPIO_ReadPin>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d115      	bne.n	8002fba <menu+0x18f6>
 8002f8e:	4b66      	ldr	r3, [pc, #408]	@ (8003128 <menu+0x1a64>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	f083 0301 	eor.w	r3, r3, #1
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d00e      	beq.n	8002fba <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002f9c:	4b5f      	ldr	r3, [pc, #380]	@ (800311c <menu+0x1a58>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	4b5d      	ldr	r3, [pc, #372]	@ (800311c <menu+0x1a58>)
 8002fa6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002fa8:	4b5c      	ldr	r3, [pc, #368]	@ (800311c <menu+0x1a58>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 8002fb0:	4b5a      	ldr	r3, [pc, #360]	@ (800311c <menu+0x1a58>)
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002fb6:	f001 f8cb 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fba:	2108      	movs	r1, #8
 8002fbc:	4859      	ldr	r0, [pc, #356]	@ (8003124 <menu+0x1a60>)
 8002fbe:	f007 fc61 	bl	800a884 <HAL_GPIO_ReadPin>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d10d      	bne.n	8002fe4 <menu+0x1920>
 8002fc8:	4b57      	ldr	r3, [pc, #348]	@ (8003128 <menu+0x1a64>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	f083 0301 	eor.w	r3, r3, #1
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d006      	beq.n	8002fe4 <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 8002fd6:	4b51      	ldr	r3, [pc, #324]	@ (800311c <menu+0x1a58>)
 8002fd8:	781a      	ldrb	r2, [r3, #0]
 8002fda:	4b54      	ldr	r3, [pc, #336]	@ (800312c <menu+0x1a68>)
 8002fdc:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002fde:	4b54      	ldr	r3, [pc, #336]	@ (8003130 <menu+0x1a6c>)
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002fe4:	4b53      	ldr	r3, [pc, #332]	@ (8003134 <menu+0x1a70>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b13      	cmp	r3, #19
 8002fea:	d174      	bne.n	80030d6 <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 8002fec:	4b52      	ldr	r3, [pc, #328]	@ (8003138 <menu+0x1a74>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d105      	bne.n	8003000 <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002ff4:	4a51      	ldr	r2, [pc, #324]	@ (800313c <menu+0x1a78>)
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	f006 f88b 	bl	8009114 <lcd_print>
 8002ffe:	e008      	b.n	8003012 <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 8003000:	4b4d      	ldr	r3, [pc, #308]	@ (8003138 <menu+0x1a74>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d104      	bne.n	8003012 <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8003008:	4a4d      	ldr	r2, [pc, #308]	@ (8003140 <menu+0x1a7c>)
 800300a:	2101      	movs	r1, #1
 800300c:	2001      	movs	r0, #1
 800300e:	f006 f881 	bl	8009114 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8003012:	4b4c      	ldr	r3, [pc, #304]	@ (8003144 <menu+0x1a80>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d105      	bne.n	8003026 <menu+0x1962>
			lcd_print(2, 1, pasifText);
 800301a:	4a4b      	ldr	r2, [pc, #300]	@ (8003148 <menu+0x1a84>)
 800301c:	2101      	movs	r1, #1
 800301e:	2002      	movs	r0, #2
 8003020:	f006 f878 	bl	8009114 <lcd_print>
 8003024:	e008      	b.n	8003038 <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 8003026:	4b47      	ldr	r3, [pc, #284]	@ (8003144 <menu+0x1a80>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d104      	bne.n	8003038 <menu+0x1974>
			lcd_print(2, 1, aktifText);
 800302e:	4a3c      	ldr	r2, [pc, #240]	@ (8003120 <menu+0x1a5c>)
 8003030:	2101      	movs	r1, #1
 8003032:	2002      	movs	r0, #2
 8003034:	f006 f86e 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003038:	2102      	movs	r1, #2
 800303a:	483a      	ldr	r0, [pc, #232]	@ (8003124 <menu+0x1a60>)
 800303c:	f007 fc22 	bl	800a884 <HAL_GPIO_ReadPin>
 8003040:	4603      	mov	r3, r0
 8003042:	2b01      	cmp	r3, #1
 8003044:	d115      	bne.n	8003072 <menu+0x19ae>
 8003046:	4b38      	ldr	r3, [pc, #224]	@ (8003128 <menu+0x1a64>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	f083 0301 	eor.w	r3, r3, #1
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00e      	beq.n	8003072 <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003054:	4b3b      	ldr	r3, [pc, #236]	@ (8003144 <menu+0x1a80>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	b2da      	uxtb	r2, r3
 800305c:	4b39      	ldr	r3, [pc, #228]	@ (8003144 <menu+0x1a80>)
 800305e:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003060:	4b38      	ldr	r3, [pc, #224]	@ (8003144 <menu+0x1a80>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d902      	bls.n	800306e <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 8003068:	4b36      	ldr	r3, [pc, #216]	@ (8003144 <menu+0x1a80>)
 800306a:	2200      	movs	r2, #0
 800306c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800306e:	f001 f86f 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003072:	2104      	movs	r1, #4
 8003074:	482b      	ldr	r0, [pc, #172]	@ (8003124 <menu+0x1a60>)
 8003076:	f007 fc05 	bl	800a884 <HAL_GPIO_ReadPin>
 800307a:	4603      	mov	r3, r0
 800307c:	2b01      	cmp	r3, #1
 800307e:	d115      	bne.n	80030ac <menu+0x19e8>
 8003080:	4b29      	ldr	r3, [pc, #164]	@ (8003128 <menu+0x1a64>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	f083 0301 	eor.w	r3, r3, #1
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00e      	beq.n	80030ac <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 800308e:	4b2d      	ldr	r3, [pc, #180]	@ (8003144 <menu+0x1a80>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	3b01      	subs	r3, #1
 8003094:	b2da      	uxtb	r2, r3
 8003096:	4b2b      	ldr	r3, [pc, #172]	@ (8003144 <menu+0x1a80>)
 8003098:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 800309a:	4b2a      	ldr	r3, [pc, #168]	@ (8003144 <menu+0x1a80>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 80030a2:	4b28      	ldr	r3, [pc, #160]	@ (8003144 <menu+0x1a80>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030a8:	f001 f852 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030ac:	2108      	movs	r1, #8
 80030ae:	481d      	ldr	r0, [pc, #116]	@ (8003124 <menu+0x1a60>)
 80030b0:	f007 fbe8 	bl	800a884 <HAL_GPIO_ReadPin>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d10d      	bne.n	80030d6 <menu+0x1a12>
 80030ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003128 <menu+0x1a64>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	f083 0301 	eor.w	r3, r3, #1
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d006      	beq.n	80030d6 <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 80030c8:	4b1e      	ldr	r3, [pc, #120]	@ (8003144 <menu+0x1a80>)
 80030ca:	781a      	ldrb	r2, [r3, #0]
 80030cc:	4b17      	ldr	r3, [pc, #92]	@ (800312c <menu+0x1a68>)
 80030ce:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80030d0:	4b17      	ldr	r3, [pc, #92]	@ (8003130 <menu+0x1a6c>)
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80030d6:	4b17      	ldr	r3, [pc, #92]	@ (8003134 <menu+0x1a70>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b14      	cmp	r3, #20
 80030dc:	f040 809e 	bne.w	800321c <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 80030e0:	4b15      	ldr	r3, [pc, #84]	@ (8003138 <menu+0x1a74>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d105      	bne.n	80030f4 <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 80030e8:	4a18      	ldr	r2, [pc, #96]	@ (800314c <menu+0x1a88>)
 80030ea:	2101      	movs	r1, #1
 80030ec:	2001      	movs	r0, #1
 80030ee:	f006 f811 	bl	8009114 <lcd_print>
 80030f2:	e008      	b.n	8003106 <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 80030f4:	4b10      	ldr	r3, [pc, #64]	@ (8003138 <menu+0x1a74>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d104      	bne.n	8003106 <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 80030fc:	4a14      	ldr	r2, [pc, #80]	@ (8003150 <menu+0x1a8c>)
 80030fe:	2101      	movs	r1, #1
 8003100:	2001      	movs	r0, #1
 8003102:	f006 f807 	bl	8009114 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8003106:	4b13      	ldr	r3, [pc, #76]	@ (8003154 <menu+0x1a90>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d126      	bne.n	800315c <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 800310e:	4a12      	ldr	r2, [pc, #72]	@ (8003158 <menu+0x1a94>)
 8003110:	2101      	movs	r1, #1
 8003112:	2002      	movs	r0, #2
 8003114:	f005 fffe 	bl	8009114 <lcd_print>
 8003118:	e029      	b.n	800316e <menu+0x1aaa>
 800311a:	bf00      	nop
 800311c:	200010cc 	.word	0x200010cc
 8003120:	200013b0 	.word	0x200013b0
 8003124:	40010800 	.word	0x40010800
 8003128:	200010eb 	.word	0x200010eb
 800312c:	20000fec 	.word	0x20000fec
 8003130:	200010e8 	.word	0x200010e8
 8003134:	200010bc 	.word	0x200010bc
 8003138:	200010cb 	.word	0x200010cb
 800313c:	200015f4 	.word	0x200015f4
 8003140:	20001608 	.word	0x20001608
 8003144:	200010cd 	.word	0x200010cd
 8003148:	2000139c 	.word	0x2000139c
 800314c:	2000161c 	.word	0x2000161c
 8003150:	20001630 	.word	0x20001630
 8003154:	200010ce 	.word	0x200010ce
 8003158:	20001644 	.word	0x20001644
		} else if(devirmeSilindirTipi == 1) {
 800315c:	4b39      	ldr	r3, [pc, #228]	@ (8003244 <menu+0x1b80>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d104      	bne.n	800316e <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 8003164:	4a38      	ldr	r2, [pc, #224]	@ (8003248 <menu+0x1b84>)
 8003166:	2101      	movs	r1, #1
 8003168:	2002      	movs	r0, #2
 800316a:	f005 ffd3 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800316e:	2102      	movs	r1, #2
 8003170:	4836      	ldr	r0, [pc, #216]	@ (800324c <menu+0x1b88>)
 8003172:	f007 fb87 	bl	800a884 <HAL_GPIO_ReadPin>
 8003176:	4603      	mov	r3, r0
 8003178:	2b01      	cmp	r3, #1
 800317a:	d119      	bne.n	80031b0 <menu+0x1aec>
 800317c:	4b34      	ldr	r3, [pc, #208]	@ (8003250 <menu+0x1b8c>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	f083 0301 	eor.w	r3, r3, #1
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d012      	beq.n	80031b0 <menu+0x1aec>
 800318a:	4b32      	ldr	r3, [pc, #200]	@ (8003254 <menu+0x1b90>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d10e      	bne.n	80031b0 <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003192:	4b2c      	ldr	r3, [pc, #176]	@ (8003244 <menu+0x1b80>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	3301      	adds	r3, #1
 8003198:	b2da      	uxtb	r2, r3
 800319a:	4b2a      	ldr	r3, [pc, #168]	@ (8003244 <menu+0x1b80>)
 800319c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800319e:	4b29      	ldr	r3, [pc, #164]	@ (8003244 <menu+0x1b80>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d902      	bls.n	80031ac <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 80031a6:	4b27      	ldr	r3, [pc, #156]	@ (8003244 <menu+0x1b80>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031ac:	f000 ffd0 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80031b0:	2104      	movs	r1, #4
 80031b2:	4826      	ldr	r0, [pc, #152]	@ (800324c <menu+0x1b88>)
 80031b4:	f007 fb66 	bl	800a884 <HAL_GPIO_ReadPin>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d119      	bne.n	80031f2 <menu+0x1b2e>
 80031be:	4b24      	ldr	r3, [pc, #144]	@ (8003250 <menu+0x1b8c>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	f083 0301 	eor.w	r3, r3, #1
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d012      	beq.n	80031f2 <menu+0x1b2e>
 80031cc:	4b21      	ldr	r3, [pc, #132]	@ (8003254 <menu+0x1b90>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d10e      	bne.n	80031f2 <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80031d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003244 <menu+0x1b80>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	3b01      	subs	r3, #1
 80031da:	b2da      	uxtb	r2, r3
 80031dc:	4b19      	ldr	r3, [pc, #100]	@ (8003244 <menu+0x1b80>)
 80031de:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80031e0:	4b18      	ldr	r3, [pc, #96]	@ (8003244 <menu+0x1b80>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 80031e8:	4b16      	ldr	r3, [pc, #88]	@ (8003244 <menu+0x1b80>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031ee:	f000 ffaf 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031f2:	2108      	movs	r1, #8
 80031f4:	4815      	ldr	r0, [pc, #84]	@ (800324c <menu+0x1b88>)
 80031f6:	f007 fb45 	bl	800a884 <HAL_GPIO_ReadPin>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d10d      	bne.n	800321c <menu+0x1b58>
 8003200:	4b13      	ldr	r3, [pc, #76]	@ (8003250 <menu+0x1b8c>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	f083 0301 	eor.w	r3, r3, #1
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d006      	beq.n	800321c <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 800320e:	4b0d      	ldr	r3, [pc, #52]	@ (8003244 <menu+0x1b80>)
 8003210:	781a      	ldrb	r2, [r3, #0]
 8003212:	4b11      	ldr	r3, [pc, #68]	@ (8003258 <menu+0x1b94>)
 8003214:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003216:	4b11      	ldr	r3, [pc, #68]	@ (800325c <menu+0x1b98>)
 8003218:	2201      	movs	r2, #1
 800321a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800321c:	4b10      	ldr	r3, [pc, #64]	@ (8003260 <menu+0x1b9c>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b15      	cmp	r3, #21
 8003222:	f040 8088 	bne.w	8003336 <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 8003226:	4a0f      	ldr	r2, [pc, #60]	@ (8003264 <menu+0x1ba0>)
 8003228:	2101      	movs	r1, #1
 800322a:	2001      	movs	r0, #1
 800322c:	f005 ff72 	bl	8009114 <lcd_print>

		if(platformSilindirTipi == 0) {
 8003230:	4b0d      	ldr	r3, [pc, #52]	@ (8003268 <menu+0x1ba4>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d11b      	bne.n	8003270 <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 8003238:	4a0c      	ldr	r2, [pc, #48]	@ (800326c <menu+0x1ba8>)
 800323a:	2101      	movs	r1, #1
 800323c:	2002      	movs	r0, #2
 800323e:	f005 ff69 	bl	8009114 <lcd_print>
 8003242:	e01e      	b.n	8003282 <menu+0x1bbe>
 8003244:	200010ce 	.word	0x200010ce
 8003248:	20001658 	.word	0x20001658
 800324c:	40010800 	.word	0x40010800
 8003250:	200010eb 	.word	0x200010eb
 8003254:	200010cb 	.word	0x200010cb
 8003258:	20000fec 	.word	0x20000fec
 800325c:	200010e8 	.word	0x200010e8
 8003260:	200010bc 	.word	0x200010bc
 8003264:	2000166c 	.word	0x2000166c
 8003268:	200010cf 	.word	0x200010cf
 800326c:	20001644 	.word	0x20001644
		} else if(platformSilindirTipi == 1) {
 8003270:	4ba1      	ldr	r3, [pc, #644]	@ (80034f8 <menu+0x1e34>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d104      	bne.n	8003282 <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 8003278:	4aa0      	ldr	r2, [pc, #640]	@ (80034fc <menu+0x1e38>)
 800327a:	2101      	movs	r1, #1
 800327c:	2002      	movs	r0, #2
 800327e:	f005 ff49 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003282:	2102      	movs	r1, #2
 8003284:	489e      	ldr	r0, [pc, #632]	@ (8003500 <menu+0x1e3c>)
 8003286:	f007 fafd 	bl	800a884 <HAL_GPIO_ReadPin>
 800328a:	4603      	mov	r3, r0
 800328c:	2b01      	cmp	r3, #1
 800328e:	d115      	bne.n	80032bc <menu+0x1bf8>
 8003290:	4b9c      	ldr	r3, [pc, #624]	@ (8003504 <menu+0x1e40>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	f083 0301 	eor.w	r3, r3, #1
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00e      	beq.n	80032bc <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 800329e:	4b96      	ldr	r3, [pc, #600]	@ (80034f8 <menu+0x1e34>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	3301      	adds	r3, #1
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	4b94      	ldr	r3, [pc, #592]	@ (80034f8 <menu+0x1e34>)
 80032a8:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80032aa:	4b93      	ldr	r3, [pc, #588]	@ (80034f8 <menu+0x1e34>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d902      	bls.n	80032b8 <menu+0x1bf4>
				platformSilindirTipi = 0;
 80032b2:	4b91      	ldr	r3, [pc, #580]	@ (80034f8 <menu+0x1e34>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032b8:	f000 ff4a 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032bc:	2104      	movs	r1, #4
 80032be:	4890      	ldr	r0, [pc, #576]	@ (8003500 <menu+0x1e3c>)
 80032c0:	f007 fae0 	bl	800a884 <HAL_GPIO_ReadPin>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d115      	bne.n	80032f6 <menu+0x1c32>
 80032ca:	4b8e      	ldr	r3, [pc, #568]	@ (8003504 <menu+0x1e40>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	f083 0301 	eor.w	r3, r3, #1
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00e      	beq.n	80032f6 <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 80032d8:	4b87      	ldr	r3, [pc, #540]	@ (80034f8 <menu+0x1e34>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	3b01      	subs	r3, #1
 80032de:	b2da      	uxtb	r2, r3
 80032e0:	4b85      	ldr	r3, [pc, #532]	@ (80034f8 <menu+0x1e34>)
 80032e2:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80032e4:	4b84      	ldr	r3, [pc, #528]	@ (80034f8 <menu+0x1e34>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 80032ec:	4b82      	ldr	r3, [pc, #520]	@ (80034f8 <menu+0x1e34>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032f2:	f000 ff2d 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032f6:	2108      	movs	r1, #8
 80032f8:	4881      	ldr	r0, [pc, #516]	@ (8003500 <menu+0x1e3c>)
 80032fa:	f007 fac3 	bl	800a884 <HAL_GPIO_ReadPin>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b01      	cmp	r3, #1
 8003302:	d118      	bne.n	8003336 <menu+0x1c72>
 8003304:	4b7f      	ldr	r3, [pc, #508]	@ (8003504 <menu+0x1e40>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	f083 0301 	eor.w	r3, r3, #1
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d011      	beq.n	8003336 <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 8003312:	4b79      	ldr	r3, [pc, #484]	@ (80034f8 <menu+0x1e34>)
 8003314:	781a      	ldrb	r2, [r3, #0]
 8003316:	4b7c      	ldr	r3, [pc, #496]	@ (8003508 <menu+0x1e44>)
 8003318:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 800331a:	4b77      	ldr	r3, [pc, #476]	@ (80034f8 <menu+0x1e34>)
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d106      	bne.n	8003330 <menu+0x1c6c>
				altLimit = 1;
 8003322:	4b7a      	ldr	r3, [pc, #488]	@ (800350c <menu+0x1e48>)
 8003324:	2201      	movs	r2, #1
 8003326:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003328:	4b78      	ldr	r3, [pc, #480]	@ (800350c <menu+0x1e48>)
 800332a:	781a      	ldrb	r2, [r3, #0]
 800332c:	4b76      	ldr	r3, [pc, #472]	@ (8003508 <menu+0x1e44>)
 800332e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003330:	4b77      	ldr	r3, [pc, #476]	@ (8003510 <menu+0x1e4c>)
 8003332:	2201      	movs	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003336:	4b77      	ldr	r3, [pc, #476]	@ (8003514 <menu+0x1e50>)
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b16      	cmp	r3, #22
 800333c:	d164      	bne.n	8003408 <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 800333e:	4a76      	ldr	r2, [pc, #472]	@ (8003518 <menu+0x1e54>)
 8003340:	2101      	movs	r1, #1
 8003342:	2001      	movs	r0, #1
 8003344:	f005 fee6 	bl	8009114 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003348:	4a74      	ldr	r2, [pc, #464]	@ (800351c <menu+0x1e58>)
 800334a:	2101      	movs	r1, #1
 800334c:	2002      	movs	r0, #2
 800334e:	f005 fee1 	bl	8009114 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 8003352:	4b73      	ldr	r3, [pc, #460]	@ (8003520 <menu+0x1e5c>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	220a      	movs	r2, #10
 8003358:	4972      	ldr	r1, [pc, #456]	@ (8003524 <menu+0x1e60>)
 800335a:	4618      	mov	r0, r3
 800335c:	f00a fd80 	bl	800de60 <itoa>
		lcd_print(2,16,snum);
 8003360:	4a70      	ldr	r2, [pc, #448]	@ (8003524 <menu+0x1e60>)
 8003362:	2110      	movs	r1, #16
 8003364:	2002      	movs	r0, #2
 8003366:	f005 fed5 	bl	8009114 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800336a:	2102      	movs	r1, #2
 800336c:	4864      	ldr	r0, [pc, #400]	@ (8003500 <menu+0x1e3c>)
 800336e:	f007 fa89 	bl	800a884 <HAL_GPIO_ReadPin>
 8003372:	4603      	mov	r3, r0
 8003374:	2b01      	cmp	r3, #1
 8003376:	d115      	bne.n	80033a4 <menu+0x1ce0>
 8003378:	4b62      	ldr	r3, [pc, #392]	@ (8003504 <menu+0x1e40>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	f083 0301 	eor.w	r3, r3, #1
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00e      	beq.n	80033a4 <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 8003386:	4b66      	ldr	r3, [pc, #408]	@ (8003520 <menu+0x1e5c>)
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	3301      	adds	r3, #1
 800338c:	b2da      	uxtb	r2, r3
 800338e:	4b64      	ldr	r3, [pc, #400]	@ (8003520 <menu+0x1e5c>)
 8003390:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003392:	4b63      	ldr	r3, [pc, #396]	@ (8003520 <menu+0x1e5c>)
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	2b05      	cmp	r3, #5
 8003398:	d902      	bls.n	80033a0 <menu+0x1cdc>
				yukariValfTmr = 0;
 800339a:	4b61      	ldr	r3, [pc, #388]	@ (8003520 <menu+0x1e5c>)
 800339c:	2200      	movs	r2, #0
 800339e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033a0:	f000 fed6 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033a4:	2104      	movs	r1, #4
 80033a6:	4856      	ldr	r0, [pc, #344]	@ (8003500 <menu+0x1e3c>)
 80033a8:	f007 fa6c 	bl	800a884 <HAL_GPIO_ReadPin>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d115      	bne.n	80033de <menu+0x1d1a>
 80033b2:	4b54      	ldr	r3, [pc, #336]	@ (8003504 <menu+0x1e40>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	f083 0301 	eor.w	r3, r3, #1
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00e      	beq.n	80033de <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 80033c0:	4b57      	ldr	r3, [pc, #348]	@ (8003520 <menu+0x1e5c>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	4b55      	ldr	r3, [pc, #340]	@ (8003520 <menu+0x1e5c>)
 80033ca:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 80033cc:	4b54      	ldr	r3, [pc, #336]	@ (8003520 <menu+0x1e5c>)
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	2b06      	cmp	r3, #6
 80033d2:	d902      	bls.n	80033da <menu+0x1d16>
		   		yukariValfTmr = 5;
 80033d4:	4b52      	ldr	r3, [pc, #328]	@ (8003520 <menu+0x1e5c>)
 80033d6:	2205      	movs	r2, #5
 80033d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033da:	f000 feb9 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033de:	2108      	movs	r1, #8
 80033e0:	4847      	ldr	r0, [pc, #284]	@ (8003500 <menu+0x1e3c>)
 80033e2:	f007 fa4f 	bl	800a884 <HAL_GPIO_ReadPin>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d10d      	bne.n	8003408 <menu+0x1d44>
 80033ec:	4b45      	ldr	r3, [pc, #276]	@ (8003504 <menu+0x1e40>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	f083 0301 	eor.w	r3, r3, #1
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d006      	beq.n	8003408 <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 80033fa:	4b49      	ldr	r3, [pc, #292]	@ (8003520 <menu+0x1e5c>)
 80033fc:	781a      	ldrb	r2, [r3, #0]
 80033fe:	4b42      	ldr	r3, [pc, #264]	@ (8003508 <menu+0x1e44>)
 8003400:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003402:	4b43      	ldr	r3, [pc, #268]	@ (8003510 <menu+0x1e4c>)
 8003404:	2201      	movs	r2, #1
 8003406:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003408:	4b42      	ldr	r3, [pc, #264]	@ (8003514 <menu+0x1e50>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b17      	cmp	r3, #23
 800340e:	d164      	bne.n	80034da <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 8003410:	4a45      	ldr	r2, [pc, #276]	@ (8003528 <menu+0x1e64>)
 8003412:	2101      	movs	r1, #1
 8003414:	2001      	movs	r0, #1
 8003416:	f005 fe7d 	bl	8009114 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 800341a:	4a40      	ldr	r2, [pc, #256]	@ (800351c <menu+0x1e58>)
 800341c:	2101      	movs	r1, #1
 800341e:	2002      	movs	r0, #2
 8003420:	f005 fe78 	bl	8009114 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 8003424:	4b41      	ldr	r3, [pc, #260]	@ (800352c <menu+0x1e68>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	220a      	movs	r2, #10
 800342a:	493e      	ldr	r1, [pc, #248]	@ (8003524 <menu+0x1e60>)
 800342c:	4618      	mov	r0, r3
 800342e:	f00a fd17 	bl	800de60 <itoa>
		lcd_print(2,16,snum);
 8003432:	4a3c      	ldr	r2, [pc, #240]	@ (8003524 <menu+0x1e60>)
 8003434:	2110      	movs	r1, #16
 8003436:	2002      	movs	r0, #2
 8003438:	f005 fe6c 	bl	8009114 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800343c:	2102      	movs	r1, #2
 800343e:	4830      	ldr	r0, [pc, #192]	@ (8003500 <menu+0x1e3c>)
 8003440:	f007 fa20 	bl	800a884 <HAL_GPIO_ReadPin>
 8003444:	4603      	mov	r3, r0
 8003446:	2b01      	cmp	r3, #1
 8003448:	d115      	bne.n	8003476 <menu+0x1db2>
 800344a:	4b2e      	ldr	r3, [pc, #184]	@ (8003504 <menu+0x1e40>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	f083 0301 	eor.w	r3, r3, #1
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00e      	beq.n	8003476 <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 8003458:	4b34      	ldr	r3, [pc, #208]	@ (800352c <menu+0x1e68>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	3301      	adds	r3, #1
 800345e:	b2da      	uxtb	r2, r3
 8003460:	4b32      	ldr	r3, [pc, #200]	@ (800352c <menu+0x1e68>)
 8003462:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003464:	4b31      	ldr	r3, [pc, #196]	@ (800352c <menu+0x1e68>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b05      	cmp	r3, #5
 800346a:	d902      	bls.n	8003472 <menu+0x1dae>
				asagiValfTmr = 0;
 800346c:	4b2f      	ldr	r3, [pc, #188]	@ (800352c <menu+0x1e68>)
 800346e:	2200      	movs	r2, #0
 8003470:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003472:	f000 fe6d 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003476:	2104      	movs	r1, #4
 8003478:	4821      	ldr	r0, [pc, #132]	@ (8003500 <menu+0x1e3c>)
 800347a:	f007 fa03 	bl	800a884 <HAL_GPIO_ReadPin>
 800347e:	4603      	mov	r3, r0
 8003480:	2b01      	cmp	r3, #1
 8003482:	d115      	bne.n	80034b0 <menu+0x1dec>
 8003484:	4b1f      	ldr	r3, [pc, #124]	@ (8003504 <menu+0x1e40>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	f083 0301 	eor.w	r3, r3, #1
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00e      	beq.n	80034b0 <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 8003492:	4b26      	ldr	r3, [pc, #152]	@ (800352c <menu+0x1e68>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	3b01      	subs	r3, #1
 8003498:	b2da      	uxtb	r2, r3
 800349a:	4b24      	ldr	r3, [pc, #144]	@ (800352c <menu+0x1e68>)
 800349c:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 800349e:	4b23      	ldr	r3, [pc, #140]	@ (800352c <menu+0x1e68>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b06      	cmp	r3, #6
 80034a4:	d902      	bls.n	80034ac <menu+0x1de8>
		   		asagiValfTmr = 5;
 80034a6:	4b21      	ldr	r3, [pc, #132]	@ (800352c <menu+0x1e68>)
 80034a8:	2205      	movs	r2, #5
 80034aa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80034ac:	f000 fe50 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80034b0:	2108      	movs	r1, #8
 80034b2:	4813      	ldr	r0, [pc, #76]	@ (8003500 <menu+0x1e3c>)
 80034b4:	f007 f9e6 	bl	800a884 <HAL_GPIO_ReadPin>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d10d      	bne.n	80034da <menu+0x1e16>
 80034be:	4b11      	ldr	r3, [pc, #68]	@ (8003504 <menu+0x1e40>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	f083 0301 	eor.w	r3, r3, #1
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d006      	beq.n	80034da <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 80034cc:	4b17      	ldr	r3, [pc, #92]	@ (800352c <menu+0x1e68>)
 80034ce:	781a      	ldrb	r2, [r3, #0]
 80034d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003508 <menu+0x1e44>)
 80034d2:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 80034d4:	4b0e      	ldr	r3, [pc, #56]	@ (8003510 <menu+0x1e4c>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 80034da:	4b0e      	ldr	r3, [pc, #56]	@ (8003514 <menu+0x1e50>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b18      	cmp	r3, #24
 80034e0:	f040 8093 	bne.w	800360a <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 80034e4:	4b12      	ldr	r3, [pc, #72]	@ (8003530 <menu+0x1e6c>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d125      	bne.n	8003538 <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 80034ec:	4a11      	ldr	r2, [pc, #68]	@ (8003534 <menu+0x1e70>)
 80034ee:	2101      	movs	r1, #1
 80034f0:	2001      	movs	r0, #1
 80034f2:	f005 fe0f 	bl	8009114 <lcd_print>
 80034f6:	e028      	b.n	800354a <menu+0x1e86>
 80034f8:	200010cf 	.word	0x200010cf
 80034fc:	20001658 	.word	0x20001658
 8003500:	40010800 	.word	0x40010800
 8003504:	200010eb 	.word	0x200010eb
 8003508:	20000fec 	.word	0x20000fec
 800350c:	200010c2 	.word	0x200010c2
 8003510:	200010e8 	.word	0x200010e8
 8003514:	200010bc 	.word	0x200010bc
 8003518:	20001680 	.word	0x20001680
 800351c:	200014c8 	.word	0x200014c8
 8003520:	200010d0 	.word	0x200010d0
 8003524:	2000105c 	.word	0x2000105c
 8003528:	20001694 	.word	0x20001694
 800352c:	200010d1 	.word	0x200010d1
 8003530:	200010cb 	.word	0x200010cb
 8003534:	200016a8 	.word	0x200016a8
		} else if(devirmeYuruyusSecim == 1) {
 8003538:	4b8c      	ldr	r3, [pc, #560]	@ (800376c <menu+0x20a8>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d104      	bne.n	800354a <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 8003540:	4a8b      	ldr	r2, [pc, #556]	@ (8003770 <menu+0x20ac>)
 8003542:	2101      	movs	r1, #1
 8003544:	2001      	movs	r0, #1
 8003546:	f005 fde5 	bl	8009114 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 800354a:	4a8a      	ldr	r2, [pc, #552]	@ (8003774 <menu+0x20b0>)
 800354c:	2101      	movs	r1, #1
 800354e:	2002      	movs	r0, #2
 8003550:	f005 fde0 	bl	8009114 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003554:	4b88      	ldr	r3, [pc, #544]	@ (8003778 <menu+0x20b4>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	220a      	movs	r2, #10
 800355a:	4988      	ldr	r1, [pc, #544]	@ (800377c <menu+0x20b8>)
 800355c:	4618      	mov	r0, r3
 800355e:	f00a fc7f 	bl	800de60 <itoa>
		lcd_print(2, 16, snum);
 8003562:	4a86      	ldr	r2, [pc, #536]	@ (800377c <menu+0x20b8>)
 8003564:	2110      	movs	r1, #16
 8003566:	2002      	movs	r0, #2
 8003568:	f005 fdd4 	bl	8009114 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800356c:	2102      	movs	r1, #2
 800356e:	4884      	ldr	r0, [pc, #528]	@ (8003780 <menu+0x20bc>)
 8003570:	f007 f988 	bl	800a884 <HAL_GPIO_ReadPin>
 8003574:	4603      	mov	r3, r0
 8003576:	2b01      	cmp	r3, #1
 8003578:	d115      	bne.n	80035a6 <menu+0x1ee2>
 800357a:	4b82      	ldr	r3, [pc, #520]	@ (8003784 <menu+0x20c0>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	f083 0301 	eor.w	r3, r3, #1
 8003582:	b2db      	uxtb	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00e      	beq.n	80035a6 <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003588:	4b7b      	ldr	r3, [pc, #492]	@ (8003778 <menu+0x20b4>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	3301      	adds	r3, #1
 800358e:	b2da      	uxtb	r2, r3
 8003590:	4b79      	ldr	r3, [pc, #484]	@ (8003778 <menu+0x20b4>)
 8003592:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003594:	4b78      	ldr	r3, [pc, #480]	@ (8003778 <menu+0x20b4>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b05      	cmp	r3, #5
 800359a:	d902      	bls.n	80035a2 <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 800359c:	4b76      	ldr	r3, [pc, #472]	@ (8003778 <menu+0x20b4>)
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035a2:	f000 fdd5 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035a6:	2104      	movs	r1, #4
 80035a8:	4875      	ldr	r0, [pc, #468]	@ (8003780 <menu+0x20bc>)
 80035aa:	f007 f96b 	bl	800a884 <HAL_GPIO_ReadPin>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d115      	bne.n	80035e0 <menu+0x1f1c>
 80035b4:	4b73      	ldr	r3, [pc, #460]	@ (8003784 <menu+0x20c0>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	f083 0301 	eor.w	r3, r3, #1
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00e      	beq.n	80035e0 <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 80035c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003778 <menu+0x20b4>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b2da      	uxtb	r2, r3
 80035ca:	4b6b      	ldr	r3, [pc, #428]	@ (8003778 <menu+0x20b4>)
 80035cc:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 80035ce:	4b6a      	ldr	r3, [pc, #424]	@ (8003778 <menu+0x20b4>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b06      	cmp	r3, #6
 80035d4:	d902      	bls.n	80035dc <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 80035d6:	4b68      	ldr	r3, [pc, #416]	@ (8003778 <menu+0x20b4>)
 80035d8:	2205      	movs	r2, #5
 80035da:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035dc:	f000 fdb8 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035e0:	2108      	movs	r1, #8
 80035e2:	4867      	ldr	r0, [pc, #412]	@ (8003780 <menu+0x20bc>)
 80035e4:	f007 f94e 	bl	800a884 <HAL_GPIO_ReadPin>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d10d      	bne.n	800360a <menu+0x1f46>
 80035ee:	4b65      	ldr	r3, [pc, #404]	@ (8003784 <menu+0x20c0>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	f083 0301 	eor.w	r3, r3, #1
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d006      	beq.n	800360a <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 80035fc:	4b5e      	ldr	r3, [pc, #376]	@ (8003778 <menu+0x20b4>)
 80035fe:	781a      	ldrb	r2, [r3, #0]
 8003600:	4b61      	ldr	r3, [pc, #388]	@ (8003788 <menu+0x20c4>)
 8003602:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003604:	4b61      	ldr	r3, [pc, #388]	@ (800378c <menu+0x20c8>)
 8003606:	2201      	movs	r2, #1
 8003608:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 800360a:	4b61      	ldr	r3, [pc, #388]	@ (8003790 <menu+0x20cc>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b19      	cmp	r3, #25
 8003610:	d172      	bne.n	80036f8 <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 8003612:	4b56      	ldr	r3, [pc, #344]	@ (800376c <menu+0x20a8>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b02      	cmp	r3, #2
 8003618:	d105      	bne.n	8003626 <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 800361a:	4a5e      	ldr	r2, [pc, #376]	@ (8003794 <menu+0x20d0>)
 800361c:	2101      	movs	r1, #1
 800361e:	2001      	movs	r0, #1
 8003620:	f005 fd78 	bl	8009114 <lcd_print>
 8003624:	e008      	b.n	8003638 <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 8003626:	4b51      	ldr	r3, [pc, #324]	@ (800376c <menu+0x20a8>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d104      	bne.n	8003638 <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 800362e:	4a5a      	ldr	r2, [pc, #360]	@ (8003798 <menu+0x20d4>)
 8003630:	2101      	movs	r1, #1
 8003632:	2001      	movs	r0, #1
 8003634:	f005 fd6e 	bl	8009114 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003638:	4a4e      	ldr	r2, [pc, #312]	@ (8003774 <menu+0x20b0>)
 800363a:	2101      	movs	r1, #1
 800363c:	2002      	movs	r0, #2
 800363e:	f005 fd69 	bl	8009114 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003642:	4b56      	ldr	r3, [pc, #344]	@ (800379c <menu+0x20d8>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	220a      	movs	r2, #10
 8003648:	494c      	ldr	r1, [pc, #304]	@ (800377c <menu+0x20b8>)
 800364a:	4618      	mov	r0, r3
 800364c:	f00a fc08 	bl	800de60 <itoa>
		lcd_print(2,16,snum);
 8003650:	4a4a      	ldr	r2, [pc, #296]	@ (800377c <menu+0x20b8>)
 8003652:	2110      	movs	r1, #16
 8003654:	2002      	movs	r0, #2
 8003656:	f005 fd5d 	bl	8009114 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800365a:	2102      	movs	r1, #2
 800365c:	4848      	ldr	r0, [pc, #288]	@ (8003780 <menu+0x20bc>)
 800365e:	f007 f911 	bl	800a884 <HAL_GPIO_ReadPin>
 8003662:	4603      	mov	r3, r0
 8003664:	2b01      	cmp	r3, #1
 8003666:	d115      	bne.n	8003694 <menu+0x1fd0>
 8003668:	4b46      	ldr	r3, [pc, #280]	@ (8003784 <menu+0x20c0>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	f083 0301 	eor.w	r3, r3, #1
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00e      	beq.n	8003694 <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003676:	4b49      	ldr	r3, [pc, #292]	@ (800379c <menu+0x20d8>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	3301      	adds	r3, #1
 800367c:	b2da      	uxtb	r2, r3
 800367e:	4b47      	ldr	r3, [pc, #284]	@ (800379c <menu+0x20d8>)
 8003680:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003682:	4b46      	ldr	r3, [pc, #280]	@ (800379c <menu+0x20d8>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b05      	cmp	r3, #5
 8003688:	d902      	bls.n	8003690 <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 800368a:	4b44      	ldr	r3, [pc, #272]	@ (800379c <menu+0x20d8>)
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003690:	f000 fd5e 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003694:	2104      	movs	r1, #4
 8003696:	483a      	ldr	r0, [pc, #232]	@ (8003780 <menu+0x20bc>)
 8003698:	f007 f8f4 	bl	800a884 <HAL_GPIO_ReadPin>
 800369c:	4603      	mov	r3, r0
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d115      	bne.n	80036ce <menu+0x200a>
 80036a2:	4b38      	ldr	r3, [pc, #224]	@ (8003784 <menu+0x20c0>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	f083 0301 	eor.w	r3, r3, #1
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00e      	beq.n	80036ce <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 80036b0:	4b3a      	ldr	r3, [pc, #232]	@ (800379c <menu+0x20d8>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	3b01      	subs	r3, #1
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	4b38      	ldr	r3, [pc, #224]	@ (800379c <menu+0x20d8>)
 80036ba:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 80036bc:	4b37      	ldr	r3, [pc, #220]	@ (800379c <menu+0x20d8>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	2b06      	cmp	r3, #6
 80036c2:	d902      	bls.n	80036ca <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 80036c4:	4b35      	ldr	r3, [pc, #212]	@ (800379c <menu+0x20d8>)
 80036c6:	2205      	movs	r2, #5
 80036c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036ca:	f000 fd41 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ce:	2108      	movs	r1, #8
 80036d0:	482b      	ldr	r0, [pc, #172]	@ (8003780 <menu+0x20bc>)
 80036d2:	f007 f8d7 	bl	800a884 <HAL_GPIO_ReadPin>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d10d      	bne.n	80036f8 <menu+0x2034>
 80036dc:	4b29      	ldr	r3, [pc, #164]	@ (8003784 <menu+0x20c0>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	f083 0301 	eor.w	r3, r3, #1
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d006      	beq.n	80036f8 <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 80036ea:	4b2c      	ldr	r3, [pc, #176]	@ (800379c <menu+0x20d8>)
 80036ec:	781a      	ldrb	r2, [r3, #0]
 80036ee:	4b26      	ldr	r3, [pc, #152]	@ (8003788 <menu+0x20c4>)
 80036f0:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 80036f2:	4b26      	ldr	r3, [pc, #152]	@ (800378c <menu+0x20c8>)
 80036f4:	2201      	movs	r2, #1
 80036f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 80036f8:	4b25      	ldr	r3, [pc, #148]	@ (8003790 <menu+0x20cc>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b1a      	cmp	r3, #26
 80036fe:	f040 80b7 	bne.w	8003870 <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 8003702:	4a27      	ldr	r2, [pc, #156]	@ (80037a0 <menu+0x20dc>)
 8003704:	2101      	movs	r1, #1
 8003706:	2001      	movs	r0, #1
 8003708:	f005 fd04 	bl	8009114 <lcd_print>

		if(makineCalismaTmr > 99) {
 800370c:	4b25      	ldr	r3, [pc, #148]	@ (80037a4 <menu+0x20e0>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b63      	cmp	r3, #99	@ 0x63
 8003712:	d911      	bls.n	8003738 <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 8003714:	4a17      	ldr	r2, [pc, #92]	@ (8003774 <menu+0x20b0>)
 8003716:	2101      	movs	r1, #1
 8003718:	2002      	movs	r0, #2
 800371a:	f005 fcfb 	bl	8009114 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800371e:	4b21      	ldr	r3, [pc, #132]	@ (80037a4 <menu+0x20e0>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	220a      	movs	r2, #10
 8003724:	4915      	ldr	r1, [pc, #84]	@ (800377c <menu+0x20b8>)
 8003726:	4618      	mov	r0, r3
 8003728:	f00a fb9a 	bl	800de60 <itoa>
			lcd_print(2,14,snum);
 800372c:	4a13      	ldr	r2, [pc, #76]	@ (800377c <menu+0x20b8>)
 800372e:	210e      	movs	r1, #14
 8003730:	2002      	movs	r0, #2
 8003732:	f005 fcef 	bl	8009114 <lcd_print>
 8003736:	e04c      	b.n	80037d2 <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003738:	4b1a      	ldr	r3, [pc, #104]	@ (80037a4 <menu+0x20e0>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b09      	cmp	r3, #9
 800373e:	d933      	bls.n	80037a8 <menu+0x20e4>
 8003740:	4b18      	ldr	r3, [pc, #96]	@ (80037a4 <menu+0x20e0>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b63      	cmp	r3, #99	@ 0x63
 8003746:	d82f      	bhi.n	80037a8 <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 8003748:	4a0a      	ldr	r2, [pc, #40]	@ (8003774 <menu+0x20b0>)
 800374a:	2101      	movs	r1, #1
 800374c:	2002      	movs	r0, #2
 800374e:	f005 fce1 	bl	8009114 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003752:	4b14      	ldr	r3, [pc, #80]	@ (80037a4 <menu+0x20e0>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	220a      	movs	r2, #10
 8003758:	4908      	ldr	r1, [pc, #32]	@ (800377c <menu+0x20b8>)
 800375a:	4618      	mov	r0, r3
 800375c:	f00a fb80 	bl	800de60 <itoa>
			lcd_print(2, 15, snum);
 8003760:	4a06      	ldr	r2, [pc, #24]	@ (800377c <menu+0x20b8>)
 8003762:	210f      	movs	r1, #15
 8003764:	2002      	movs	r0, #2
 8003766:	f005 fcd5 	bl	8009114 <lcd_print>
 800376a:	e032      	b.n	80037d2 <menu+0x210e>
 800376c:	200010cb 	.word	0x200010cb
 8003770:	200016bc 	.word	0x200016bc
 8003774:	200014c8 	.word	0x200014c8
 8003778:	200010d2 	.word	0x200010d2
 800377c:	2000105c 	.word	0x2000105c
 8003780:	40010800 	.word	0x40010800
 8003784:	200010eb 	.word	0x200010eb
 8003788:	20000fec 	.word	0x20000fec
 800378c:	200010e8 	.word	0x200010e8
 8003790:	200010bc 	.word	0x200010bc
 8003794:	200016d0 	.word	0x200016d0
 8003798:	200016e4 	.word	0x200016e4
 800379c:	200010d3 	.word	0x200010d3
 80037a0:	200016f8 	.word	0x200016f8
 80037a4:	200010d4 	.word	0x200010d4
		} else if(makineCalismaTmr <=  9) {
 80037a8:	4b72      	ldr	r3, [pc, #456]	@ (8003974 <menu+0x22b0>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b09      	cmp	r3, #9
 80037ae:	d810      	bhi.n	80037d2 <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 80037b0:	4a71      	ldr	r2, [pc, #452]	@ (8003978 <menu+0x22b4>)
 80037b2:	2101      	movs	r1, #1
 80037b4:	2002      	movs	r0, #2
 80037b6:	f005 fcad 	bl	8009114 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80037ba:	4b6e      	ldr	r3, [pc, #440]	@ (8003974 <menu+0x22b0>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	220a      	movs	r2, #10
 80037c0:	496e      	ldr	r1, [pc, #440]	@ (800397c <menu+0x22b8>)
 80037c2:	4618      	mov	r0, r3
 80037c4:	f00a fb4c 	bl	800de60 <itoa>
			lcd_print(2, 16, snum);
 80037c8:	4a6c      	ldr	r2, [pc, #432]	@ (800397c <menu+0x22b8>)
 80037ca:	2110      	movs	r1, #16
 80037cc:	2002      	movs	r0, #2
 80037ce:	f005 fca1 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80037d2:	2102      	movs	r1, #2
 80037d4:	486a      	ldr	r0, [pc, #424]	@ (8003980 <menu+0x22bc>)
 80037d6:	f007 f855 	bl	800a884 <HAL_GPIO_ReadPin>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d115      	bne.n	800380c <menu+0x2148>
 80037e0:	4b68      	ldr	r3, [pc, #416]	@ (8003984 <menu+0x22c0>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	f083 0301 	eor.w	r3, r3, #1
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00e      	beq.n	800380c <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 80037ee:	4b61      	ldr	r3, [pc, #388]	@ (8003974 <menu+0x22b0>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	3301      	adds	r3, #1
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	4b5f      	ldr	r3, [pc, #380]	@ (8003974 <menu+0x22b0>)
 80037f8:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80037fa:	4b5e      	ldr	r3, [pc, #376]	@ (8003974 <menu+0x22b0>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2bb4      	cmp	r3, #180	@ 0xb4
 8003800:	d902      	bls.n	8003808 <menu+0x2144>
				makineCalismaTmr = 0;
 8003802:	4b5c      	ldr	r3, [pc, #368]	@ (8003974 <menu+0x22b0>)
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003808:	f000 fca2 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800380c:	2104      	movs	r1, #4
 800380e:	485c      	ldr	r0, [pc, #368]	@ (8003980 <menu+0x22bc>)
 8003810:	f007 f838 	bl	800a884 <HAL_GPIO_ReadPin>
 8003814:	4603      	mov	r3, r0
 8003816:	2b01      	cmp	r3, #1
 8003818:	d115      	bne.n	8003846 <menu+0x2182>
 800381a:	4b5a      	ldr	r3, [pc, #360]	@ (8003984 <menu+0x22c0>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	f083 0301 	eor.w	r3, r3, #1
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00e      	beq.n	8003846 <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003828:	4b52      	ldr	r3, [pc, #328]	@ (8003974 <menu+0x22b0>)
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	3b01      	subs	r3, #1
 800382e:	b2da      	uxtb	r2, r3
 8003830:	4b50      	ldr	r3, [pc, #320]	@ (8003974 <menu+0x22b0>)
 8003832:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003834:	4b4f      	ldr	r3, [pc, #316]	@ (8003974 <menu+0x22b0>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2bb5      	cmp	r3, #181	@ 0xb5
 800383a:	d902      	bls.n	8003842 <menu+0x217e>
		   		makineCalismaTmr = 180;
 800383c:	4b4d      	ldr	r3, [pc, #308]	@ (8003974 <menu+0x22b0>)
 800383e:	22b4      	movs	r2, #180	@ 0xb4
 8003840:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003842:	f000 fc85 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003846:	2108      	movs	r1, #8
 8003848:	484d      	ldr	r0, [pc, #308]	@ (8003980 <menu+0x22bc>)
 800384a:	f007 f81b 	bl	800a884 <HAL_GPIO_ReadPin>
 800384e:	4603      	mov	r3, r0
 8003850:	2b01      	cmp	r3, #1
 8003852:	d10d      	bne.n	8003870 <menu+0x21ac>
 8003854:	4b4b      	ldr	r3, [pc, #300]	@ (8003984 <menu+0x22c0>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	f083 0301 	eor.w	r3, r3, #1
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d006      	beq.n	8003870 <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 8003862:	4b44      	ldr	r3, [pc, #272]	@ (8003974 <menu+0x22b0>)
 8003864:	781a      	ldrb	r2, [r3, #0]
 8003866:	4b48      	ldr	r3, [pc, #288]	@ (8003988 <menu+0x22c4>)
 8003868:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800386a:	4b48      	ldr	r3, [pc, #288]	@ (800398c <menu+0x22c8>)
 800386c:	2201      	movs	r2, #1
 800386e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003870:	4b47      	ldr	r3, [pc, #284]	@ (8003990 <menu+0x22cc>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	2b1b      	cmp	r3, #27
 8003876:	d166      	bne.n	8003946 <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 8003878:	4a46      	ldr	r2, [pc, #280]	@ (8003994 <menu+0x22d0>)
 800387a:	2101      	movs	r1, #1
 800387c:	2001      	movs	r0, #1
 800387e:	f005 fc49 	bl	8009114 <lcd_print>

		if(buzzer == 0) {
 8003882:	4b45      	ldr	r3, [pc, #276]	@ (8003998 <menu+0x22d4>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d105      	bne.n	8003896 <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 800388a:	4a44      	ldr	r2, [pc, #272]	@ (800399c <menu+0x22d8>)
 800388c:	2101      	movs	r1, #1
 800388e:	2002      	movs	r0, #2
 8003890:	f005 fc40 	bl	8009114 <lcd_print>
 8003894:	e008      	b.n	80038a8 <menu+0x21e4>
		} else if(buzzer == 1) {
 8003896:	4b40      	ldr	r3, [pc, #256]	@ (8003998 <menu+0x22d4>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d104      	bne.n	80038a8 <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 800389e:	4a40      	ldr	r2, [pc, #256]	@ (80039a0 <menu+0x22dc>)
 80038a0:	2101      	movs	r1, #1
 80038a2:	2002      	movs	r0, #2
 80038a4:	f005 fc36 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80038a8:	2102      	movs	r1, #2
 80038aa:	4835      	ldr	r0, [pc, #212]	@ (8003980 <menu+0x22bc>)
 80038ac:	f006 ffea 	bl	800a884 <HAL_GPIO_ReadPin>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d115      	bne.n	80038e2 <menu+0x221e>
 80038b6:	4b33      	ldr	r3, [pc, #204]	@ (8003984 <menu+0x22c0>)
 80038b8:	781b      	ldrb	r3, [r3, #0]
 80038ba:	f083 0301 	eor.w	r3, r3, #1
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d00e      	beq.n	80038e2 <menu+0x221e>
			buzzer = buzzer + 1;
 80038c4:	4b34      	ldr	r3, [pc, #208]	@ (8003998 <menu+0x22d4>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	3301      	adds	r3, #1
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	4b32      	ldr	r3, [pc, #200]	@ (8003998 <menu+0x22d4>)
 80038ce:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80038d0:	4b31      	ldr	r3, [pc, #196]	@ (8003998 <menu+0x22d4>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d902      	bls.n	80038de <menu+0x221a>
				buzzer = 0;
 80038d8:	4b2f      	ldr	r3, [pc, #188]	@ (8003998 <menu+0x22d4>)
 80038da:	2200      	movs	r2, #0
 80038dc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038de:	f000 fc37 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038e2:	2104      	movs	r1, #4
 80038e4:	4826      	ldr	r0, [pc, #152]	@ (8003980 <menu+0x22bc>)
 80038e6:	f006 ffcd 	bl	800a884 <HAL_GPIO_ReadPin>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d115      	bne.n	800391c <menu+0x2258>
 80038f0:	4b24      	ldr	r3, [pc, #144]	@ (8003984 <menu+0x22c0>)
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	f083 0301 	eor.w	r3, r3, #1
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00e      	beq.n	800391c <menu+0x2258>
			buzzer = buzzer - 1;
 80038fe:	4b26      	ldr	r3, [pc, #152]	@ (8003998 <menu+0x22d4>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	3b01      	subs	r3, #1
 8003904:	b2da      	uxtb	r2, r3
 8003906:	4b24      	ldr	r3, [pc, #144]	@ (8003998 <menu+0x22d4>)
 8003908:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 800390a:	4b23      	ldr	r3, [pc, #140]	@ (8003998 <menu+0x22d4>)
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d002      	beq.n	8003918 <menu+0x2254>
		   		buzzer = 1;
 8003912:	4b21      	ldr	r3, [pc, #132]	@ (8003998 <menu+0x22d4>)
 8003914:	2201      	movs	r2, #1
 8003916:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003918:	f000 fc1a 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800391c:	2108      	movs	r1, #8
 800391e:	4818      	ldr	r0, [pc, #96]	@ (8003980 <menu+0x22bc>)
 8003920:	f006 ffb0 	bl	800a884 <HAL_GPIO_ReadPin>
 8003924:	4603      	mov	r3, r0
 8003926:	2b01      	cmp	r3, #1
 8003928:	d10d      	bne.n	8003946 <menu+0x2282>
 800392a:	4b16      	ldr	r3, [pc, #88]	@ (8003984 <menu+0x22c0>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	f083 0301 	eor.w	r3, r3, #1
 8003932:	b2db      	uxtb	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d006      	beq.n	8003946 <menu+0x2282>
			eepromData[25] = buzzer;
 8003938:	4b17      	ldr	r3, [pc, #92]	@ (8003998 <menu+0x22d4>)
 800393a:	781a      	ldrb	r2, [r3, #0]
 800393c:	4b12      	ldr	r3, [pc, #72]	@ (8003988 <menu+0x22c4>)
 800393e:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003940:	4b12      	ldr	r3, [pc, #72]	@ (800398c <menu+0x22c8>)
 8003942:	2201      	movs	r2, #1
 8003944:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003946:	4b12      	ldr	r3, [pc, #72]	@ (8003990 <menu+0x22cc>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b1c      	cmp	r3, #28
 800394c:	f040 8088 	bne.w	8003a60 <menu+0x239c>
		calismaSayModu = 0;
 8003950:	4b14      	ldr	r3, [pc, #80]	@ (80039a4 <menu+0x22e0>)
 8003952:	2200      	movs	r2, #0
 8003954:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 8003956:	4a14      	ldr	r2, [pc, #80]	@ (80039a8 <menu+0x22e4>)
 8003958:	2101      	movs	r1, #1
 800395a:	2001      	movs	r0, #1
 800395c:	f005 fbda 	bl	8009114 <lcd_print>

		if(demoMode == 0) {
 8003960:	4b12      	ldr	r3, [pc, #72]	@ (80039ac <menu+0x22e8>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d123      	bne.n	80039b0 <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 8003968:	4a0c      	ldr	r2, [pc, #48]	@ (800399c <menu+0x22d8>)
 800396a:	2101      	movs	r1, #1
 800396c:	2002      	movs	r0, #2
 800396e:	f005 fbd1 	bl	8009114 <lcd_print>
 8003972:	e026      	b.n	80039c2 <menu+0x22fe>
 8003974:	200010d4 	.word	0x200010d4
 8003978:	200014c8 	.word	0x200014c8
 800397c:	2000105c 	.word	0x2000105c
 8003980:	40010800 	.word	0x40010800
 8003984:	200010eb 	.word	0x200010eb
 8003988:	20000fec 	.word	0x20000fec
 800398c:	200010e8 	.word	0x200010e8
 8003990:	200010bc 	.word	0x200010bc
 8003994:	20000128 	.word	0x20000128
 8003998:	200010d8 	.word	0x200010d8
 800399c:	2000139c 	.word	0x2000139c
 80039a0:	200013b0 	.word	0x200013b0
 80039a4:	200010db 	.word	0x200010db
 80039a8:	2000013c 	.word	0x2000013c
 80039ac:	200010da 	.word	0x200010da
		} else if(demoMode == 1) {
 80039b0:	4b80      	ldr	r3, [pc, #512]	@ (8003bb4 <menu+0x24f0>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d104      	bne.n	80039c2 <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 80039b8:	4a7f      	ldr	r2, [pc, #508]	@ (8003bb8 <menu+0x24f4>)
 80039ba:	2101      	movs	r1, #1
 80039bc:	2002      	movs	r0, #2
 80039be:	f005 fba9 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039c2:	2102      	movs	r1, #2
 80039c4:	487d      	ldr	r0, [pc, #500]	@ (8003bbc <menu+0x24f8>)
 80039c6:	f006 ff5d 	bl	800a884 <HAL_GPIO_ReadPin>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d115      	bne.n	80039fc <menu+0x2338>
 80039d0:	4b7b      	ldr	r3, [pc, #492]	@ (8003bc0 <menu+0x24fc>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	f083 0301 	eor.w	r3, r3, #1
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00e      	beq.n	80039fc <menu+0x2338>
			demoMode = demoMode + 1;
 80039de:	4b75      	ldr	r3, [pc, #468]	@ (8003bb4 <menu+0x24f0>)
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	3301      	adds	r3, #1
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	4b73      	ldr	r3, [pc, #460]	@ (8003bb4 <menu+0x24f0>)
 80039e8:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80039ea:	4b72      	ldr	r3, [pc, #456]	@ (8003bb4 <menu+0x24f0>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d902      	bls.n	80039f8 <menu+0x2334>
				demoMode = 0;
 80039f2:	4b70      	ldr	r3, [pc, #448]	@ (8003bb4 <menu+0x24f0>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039f8:	f000 fbaa 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039fc:	2104      	movs	r1, #4
 80039fe:	486f      	ldr	r0, [pc, #444]	@ (8003bbc <menu+0x24f8>)
 8003a00:	f006 ff40 	bl	800a884 <HAL_GPIO_ReadPin>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d115      	bne.n	8003a36 <menu+0x2372>
 8003a0a:	4b6d      	ldr	r3, [pc, #436]	@ (8003bc0 <menu+0x24fc>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	f083 0301 	eor.w	r3, r3, #1
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00e      	beq.n	8003a36 <menu+0x2372>
			demoMode = demoMode - 1;
 8003a18:	4b66      	ldr	r3, [pc, #408]	@ (8003bb4 <menu+0x24f0>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	4b64      	ldr	r3, [pc, #400]	@ (8003bb4 <menu+0x24f0>)
 8003a22:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003a24:	4b63      	ldr	r3, [pc, #396]	@ (8003bb4 <menu+0x24f0>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <menu+0x236e>
		   		demoMode = 1;
 8003a2c:	4b61      	ldr	r3, [pc, #388]	@ (8003bb4 <menu+0x24f0>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a32:	f000 fb8d 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a36:	2108      	movs	r1, #8
 8003a38:	4860      	ldr	r0, [pc, #384]	@ (8003bbc <menu+0x24f8>)
 8003a3a:	f006 ff23 	bl	800a884 <HAL_GPIO_ReadPin>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d10d      	bne.n	8003a60 <menu+0x239c>
 8003a44:	4b5e      	ldr	r3, [pc, #376]	@ (8003bc0 <menu+0x24fc>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	f083 0301 	eor.w	r3, r3, #1
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d006      	beq.n	8003a60 <menu+0x239c>
			eepromData[26] = demoMode;
 8003a52:	4b58      	ldr	r3, [pc, #352]	@ (8003bb4 <menu+0x24f0>)
 8003a54:	781a      	ldrb	r2, [r3, #0]
 8003a56:	4b5b      	ldr	r3, [pc, #364]	@ (8003bc4 <menu+0x2500>)
 8003a58:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8003a5a:	4b5b      	ldr	r3, [pc, #364]	@ (8003bc8 <menu+0x2504>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003a60:	4b5a      	ldr	r3, [pc, #360]	@ (8003bcc <menu+0x2508>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b1d      	cmp	r3, #29
 8003a66:	f040 80d5 	bne.w	8003c14 <menu+0x2550>
		finalCount=0;
 8003a6a:	4b59      	ldr	r3, [pc, #356]	@ (8003bd0 <menu+0x250c>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	601a      	str	r2, [r3, #0]
		if(calismaSayModu == 0) {
 8003a70:	4b58      	ldr	r3, [pc, #352]	@ (8003bd4 <menu+0x2510>)
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d135      	bne.n	8003ae4 <menu+0x2420>
			lcd_print(1, 1, calismaSayisiText);
 8003a78:	4a57      	ldr	r2, [pc, #348]	@ (8003bd8 <menu+0x2514>)
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	2001      	movs	r0, #1
 8003a7e:	f005 fb49 	bl	8009114 <lcd_print>

			if(demoMode == 1) {
 8003a82:	4b4c      	ldr	r3, [pc, #304]	@ (8003bb4 <menu+0x24f0>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d113      	bne.n	8003ab2 <menu+0x23ee>
				finalCount += calismaCountDemo * 255; //sıfır durumu da dahil ediliyor
 8003a8a:	4b54      	ldr	r3, [pc, #336]	@ (8003bdc <menu+0x2518>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	461a      	mov	r2, r3
 8003a90:	4613      	mov	r3, r2
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	1a9a      	subs	r2, r3, r2
 8003a96:	4b4e      	ldr	r3, [pc, #312]	@ (8003bd0 <menu+0x250c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	4a4c      	ldr	r2, [pc, #304]	@ (8003bd0 <menu+0x250c>)
 8003a9e:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisiDemo;
 8003aa0:	4b4f      	ldr	r3, [pc, #316]	@ (8003be0 <menu+0x251c>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4b4a      	ldr	r3, [pc, #296]	@ (8003bd0 <menu+0x250c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4413      	add	r3, r2
 8003aac:	4a48      	ldr	r2, [pc, #288]	@ (8003bd0 <menu+0x250c>)
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	e012      	b.n	8003ad8 <menu+0x2414>
			} else {
				finalCount += calismaCount * 255; //sıfır durumu da dahil ediliyor
 8003ab2:	4b4c      	ldr	r3, [pc, #304]	@ (8003be4 <menu+0x2520>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4613      	mov	r3, r2
 8003aba:	021b      	lsls	r3, r3, #8
 8003abc:	1a9a      	subs	r2, r3, r2
 8003abe:	4b44      	ldr	r3, [pc, #272]	@ (8003bd0 <menu+0x250c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	4a42      	ldr	r2, [pc, #264]	@ (8003bd0 <menu+0x250c>)
 8003ac6:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisi;
 8003ac8:	4b47      	ldr	r3, [pc, #284]	@ (8003be8 <menu+0x2524>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	461a      	mov	r2, r3
 8003ace:	4b40      	ldr	r3, [pc, #256]	@ (8003bd0 <menu+0x250c>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	4a3e      	ldr	r2, [pc, #248]	@ (8003bd0 <menu+0x250c>)
 8003ad6:	6013      	str	r3, [r2, #0]
			}

			displayCycleOnLCD(finalCount);
 8003ad8:	4b3d      	ldr	r3, [pc, #244]	@ (8003bd0 <menu+0x250c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fa89 	bl	8003ff4 <displayCycleOnLCD>
 8003ae2:	e00d      	b.n	8003b00 <menu+0x243c>
		} else if(calismaSayModu == 1) {
 8003ae4:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd4 <menu+0x2510>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d109      	bne.n	8003b00 <menu+0x243c>
			lcd_print(1, 1, calismaSayisiText);
 8003aec:	4a3a      	ldr	r2, [pc, #232]	@ (8003bd8 <menu+0x2514>)
 8003aee:	2101      	movs	r1, #1
 8003af0:	2001      	movs	r0, #1
 8003af2:	f005 fb0f 	bl	8009114 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 8003af6:	4a3d      	ldr	r2, [pc, #244]	@ (8003bec <menu+0x2528>)
 8003af8:	2101      	movs	r1, #1
 8003afa:	2002      	movs	r0, #2
 8003afc:	f005 fb0a 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b00:	2102      	movs	r1, #2
 8003b02:	482e      	ldr	r0, [pc, #184]	@ (8003bbc <menu+0x24f8>)
 8003b04:	f006 febe 	bl	800a884 <HAL_GPIO_ReadPin>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d115      	bne.n	8003b3a <menu+0x2476>
 8003b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc0 <menu+0x24fc>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	f083 0301 	eor.w	r3, r3, #1
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00e      	beq.n	8003b3a <menu+0x2476>
			calismaSayModu = calismaSayModu + 1;
 8003b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003bd4 <menu+0x2510>)
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	3301      	adds	r3, #1
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	4b2b      	ldr	r3, [pc, #172]	@ (8003bd4 <menu+0x2510>)
 8003b26:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8003b28:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd4 <menu+0x2510>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d902      	bls.n	8003b36 <menu+0x2472>
				calismaSayModu = 0;
 8003b30:	4b28      	ldr	r3, [pc, #160]	@ (8003bd4 <menu+0x2510>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b36:	f000 fb0b 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b3a:	2104      	movs	r1, #4
 8003b3c:	481f      	ldr	r0, [pc, #124]	@ (8003bbc <menu+0x24f8>)
 8003b3e:	f006 fea1 	bl	800a884 <HAL_GPIO_ReadPin>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d115      	bne.n	8003b74 <menu+0x24b0>
 8003b48:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc0 <menu+0x24fc>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	f083 0301 	eor.w	r3, r3, #1
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00e      	beq.n	8003b74 <menu+0x24b0>
			calismaSayModu = calismaSayModu - 1;
 8003b56:	4b1f      	ldr	r3, [pc, #124]	@ (8003bd4 <menu+0x2510>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8003bd4 <menu+0x2510>)
 8003b60:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8003b62:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd4 <menu+0x2510>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <menu+0x24ac>
		   		calismaSayModu = 1;
 8003b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd4 <menu+0x2510>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b70:	f000 faee 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b74:	2108      	movs	r1, #8
 8003b76:	4811      	ldr	r0, [pc, #68]	@ (8003bbc <menu+0x24f8>)
 8003b78:	f006 fe84 	bl	800a884 <HAL_GPIO_ReadPin>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d148      	bne.n	8003c14 <menu+0x2550>
 8003b82:	4b0f      	ldr	r3, [pc, #60]	@ (8003bc0 <menu+0x24fc>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	f083 0301 	eor.w	r3, r3, #1
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d041      	beq.n	8003c14 <menu+0x2550>
			if(demoMode == 1) {
 8003b90:	4b08      	ldr	r3, [pc, #32]	@ (8003bb4 <menu+0x24f0>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d12b      	bne.n	8003bf0 <menu+0x252c>
				eepromData[28] = 0;
 8003b98:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc4 <menu+0x2500>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	771a      	strb	r2, [r3, #28]
				eepromData[30] = 0;
 8003b9e:	4b09      	ldr	r3, [pc, #36]	@ (8003bc4 <menu+0x2500>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	779a      	strb	r2, [r3, #30]
				calismaSayisiDemo = 0;
 8003ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8003be0 <menu+0x251c>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	701a      	strb	r2, [r3, #0]
				calismaCountDemo = 0;
 8003baa:	4b0c      	ldr	r3, [pc, #48]	@ (8003bdc <menu+0x2518>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	701a      	strb	r2, [r3, #0]
 8003bb0:	e02a      	b.n	8003c08 <menu+0x2544>
 8003bb2:	bf00      	nop
 8003bb4:	200010da 	.word	0x200010da
 8003bb8:	200013b0 	.word	0x200013b0
 8003bbc:	40010800 	.word	0x40010800
 8003bc0:	200010eb 	.word	0x200010eb
 8003bc4:	20000fec 	.word	0x20000fec
 8003bc8:	200010e8 	.word	0x200010e8
 8003bcc:	200010bc 	.word	0x200010bc
 8003bd0:	200010b8 	.word	0x200010b8
 8003bd4:	200010db 	.word	0x200010db
 8003bd8:	2000170c 	.word	0x2000170c
 8003bdc:	200010b7 	.word	0x200010b7
 8003be0:	200010b5 	.word	0x200010b5
 8003be4:	200010b6 	.word	0x200010b6
 8003be8:	200010b4 	.word	0x200010b4
 8003bec:	20001720 	.word	0x20001720
			} else {
				eepromData[27] = 0;
 8003bf0:	4b4b      	ldr	r3, [pc, #300]	@ (8003d20 <menu+0x265c>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	76da      	strb	r2, [r3, #27]
				eepromData[29] = 0;
 8003bf6:	4b4a      	ldr	r3, [pc, #296]	@ (8003d20 <menu+0x265c>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	775a      	strb	r2, [r3, #29]
				calismaSayisi = 0;
 8003bfc:	4b49      	ldr	r3, [pc, #292]	@ (8003d24 <menu+0x2660>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	701a      	strb	r2, [r3, #0]
				calismaCount = 0;
 8003c02:	4b49      	ldr	r3, [pc, #292]	@ (8003d28 <menu+0x2664>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	701a      	strb	r2, [r3, #0]
			}
			calismaSayModu = 0;
 8003c08:	4b48      	ldr	r3, [pc, #288]	@ (8003d2c <menu+0x2668>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003c0e:	4b48      	ldr	r3, [pc, #288]	@ (8003d30 <menu+0x266c>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8003c14:	4b47      	ldr	r3, [pc, #284]	@ (8003d34 <menu+0x2670>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2b1e      	cmp	r3, #30
 8003c1a:	d16a      	bne.n	8003cf2 <menu+0x262e>
		calismaSayModu = 0;
 8003c1c:	4b43      	ldr	r3, [pc, #268]	@ (8003d2c <menu+0x2668>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 8003c22:	4a45      	ldr	r2, [pc, #276]	@ (8003d38 <menu+0x2674>)
 8003c24:	2101      	movs	r1, #1
 8003c26:	2001      	movs	r0, #1
 8003c28:	f005 fa74 	bl	8009114 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 8003c2c:	4a43      	ldr	r2, [pc, #268]	@ (8003d3c <menu+0x2678>)
 8003c2e:	2101      	movs	r1, #1
 8003c30:	2002      	movs	r0, #2
 8003c32:	f005 fa6f 	bl	8009114 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c36:	2102      	movs	r1, #2
 8003c38:	4841      	ldr	r0, [pc, #260]	@ (8003d40 <menu+0x267c>)
 8003c3a:	f006 fe23 	bl	800a884 <HAL_GPIO_ReadPin>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d11c      	bne.n	8003c7e <menu+0x25ba>
 8003c44:	4b3f      	ldr	r3, [pc, #252]	@ (8003d44 <menu+0x2680>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	f083 0301 	eor.w	r3, r3, #1
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d015      	beq.n	8003c7e <menu+0x25ba>
			dilSecim = dilSecim + 1;
 8003c52:	4b3d      	ldr	r3, [pc, #244]	@ (8003d48 <menu+0x2684>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	3301      	adds	r3, #1
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d48 <menu+0x2684>)
 8003c5c:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003c5e:	4b3a      	ldr	r3, [pc, #232]	@ (8003d48 <menu+0x2684>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d902      	bls.n	8003c6c <menu+0x25a8>
				dilSecim = 0;
 8003c66:	4b38      	ldr	r3, [pc, #224]	@ (8003d48 <menu+0x2684>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	701a      	strb	r2, [r3, #0]
			}
			resetMenuTexts();
 8003c6c:	f003 ff70 	bl	8007b50 <resetMenuTexts>
			loadMenuTexts(dilSecim);
 8003c70:	4b35      	ldr	r3, [pc, #212]	@ (8003d48 <menu+0x2684>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f002 fae5 	bl	8006244 <loadMenuTexts>

			bekle();
 8003c7a:	f000 fa69 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c7e:	2104      	movs	r1, #4
 8003c80:	482f      	ldr	r0, [pc, #188]	@ (8003d40 <menu+0x267c>)
 8003c82:	f006 fdff 	bl	800a884 <HAL_GPIO_ReadPin>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d11c      	bne.n	8003cc6 <menu+0x2602>
 8003c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d44 <menu+0x2680>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	f083 0301 	eor.w	r3, r3, #1
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d015      	beq.n	8003cc6 <menu+0x2602>
			dilSecim = dilSecim - 1;
 8003c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8003d48 <menu+0x2684>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	4b29      	ldr	r3, [pc, #164]	@ (8003d48 <menu+0x2684>)
 8003ca4:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003ca6:	4b28      	ldr	r3, [pc, #160]	@ (8003d48 <menu+0x2684>)
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <menu+0x25f0>
		   		dilSecim = 1;
 8003cae:	4b26      	ldr	r3, [pc, #152]	@ (8003d48 <menu+0x2684>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	701a      	strb	r2, [r3, #0]
		   	}
		   	resetMenuTexts();
 8003cb4:	f003 ff4c 	bl	8007b50 <resetMenuTexts>
		   	loadMenuTexts(dilSecim);
 8003cb8:	4b23      	ldr	r3, [pc, #140]	@ (8003d48 <menu+0x2684>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f002 fac1 	bl	8006244 <loadMenuTexts>

			bekle();
 8003cc2:	f000 fa45 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cc6:	2108      	movs	r1, #8
 8003cc8:	481d      	ldr	r0, [pc, #116]	@ (8003d40 <menu+0x267c>)
 8003cca:	f006 fddb 	bl	800a884 <HAL_GPIO_ReadPin>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d10e      	bne.n	8003cf2 <menu+0x262e>
 8003cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d44 <menu+0x2680>)
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	f083 0301 	eor.w	r3, r3, #1
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d007      	beq.n	8003cf2 <menu+0x262e>
			eepromData[33] = dilSecim;
 8003ce2:	4b19      	ldr	r3, [pc, #100]	@ (8003d48 <menu+0x2684>)
 8003ce4:	781a      	ldrb	r2, [r3, #0]
 8003ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8003d20 <menu+0x265c>)
 8003ce8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 8003cec:	4b10      	ldr	r3, [pc, #64]	@ (8003d30 <menu+0x266c>)
 8003cee:	2201      	movs	r2, #1
 8003cf0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003cf2:	4b10      	ldr	r3, [pc, #64]	@ (8003d34 <menu+0x2670>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b1f      	cmp	r3, #31
 8003cf8:	f040 8087 	bne.w	8003e0a <menu+0x2746>
		calismaSayModu = 0;
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003d2c <menu+0x2668>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 8003d02:	4a12      	ldr	r2, [pc, #72]	@ (8003d4c <menu+0x2688>)
 8003d04:	2101      	movs	r1, #1
 8003d06:	2001      	movs	r0, #1
 8003d08:	f005 fa04 	bl	8009114 <lcd_print>

		if(iotMode == 0) {
 8003d0c:	4b10      	ldr	r3, [pc, #64]	@ (8003d50 <menu+0x268c>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d121      	bne.n	8003d58 <menu+0x2694>
			lcd_print(2, 1, pasifText);
 8003d14:	4a0f      	ldr	r2, [pc, #60]	@ (8003d54 <menu+0x2690>)
 8003d16:	2101      	movs	r1, #1
 8003d18:	2002      	movs	r0, #2
 8003d1a:	f005 f9fb 	bl	8009114 <lcd_print>
 8003d1e:	e024      	b.n	8003d6a <menu+0x26a6>
 8003d20:	20000fec 	.word	0x20000fec
 8003d24:	200010b4 	.word	0x200010b4
 8003d28:	200010b6 	.word	0x200010b6
 8003d2c:	200010db 	.word	0x200010db
 8003d30:	200010e8 	.word	0x200010e8
 8003d34:	200010bc 	.word	0x200010bc
 8003d38:	20001734 	.word	0x20001734
 8003d3c:	20001748 	.word	0x20001748
 8003d40:	40010800 	.word	0x40010800
 8003d44:	200010eb 	.word	0x200010eb
 8003d48:	200010dc 	.word	0x200010dc
 8003d4c:	20000150 	.word	0x20000150
 8003d50:	200010e7 	.word	0x200010e7
 8003d54:	2000139c 	.word	0x2000139c
		} else if(iotMode == 1) {
 8003d58:	4b99      	ldr	r3, [pc, #612]	@ (8003fc0 <menu+0x28fc>)
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d104      	bne.n	8003d6a <menu+0x26a6>
			lcd_print(2, 1, aktifText);
 8003d60:	4a98      	ldr	r2, [pc, #608]	@ (8003fc4 <menu+0x2900>)
 8003d62:	2101      	movs	r1, #1
 8003d64:	2002      	movs	r0, #2
 8003d66:	f005 f9d5 	bl	8009114 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d6a:	2102      	movs	r1, #2
 8003d6c:	4896      	ldr	r0, [pc, #600]	@ (8003fc8 <menu+0x2904>)
 8003d6e:	f006 fd89 	bl	800a884 <HAL_GPIO_ReadPin>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d115      	bne.n	8003da4 <menu+0x26e0>
 8003d78:	4b94      	ldr	r3, [pc, #592]	@ (8003fcc <menu+0x2908>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	f083 0301 	eor.w	r3, r3, #1
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00e      	beq.n	8003da4 <menu+0x26e0>
			iotMode = iotMode + 1;
 8003d86:	4b8e      	ldr	r3, [pc, #568]	@ (8003fc0 <menu+0x28fc>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	b2da      	uxtb	r2, r3
 8003d8e:	4b8c      	ldr	r3, [pc, #560]	@ (8003fc0 <menu+0x28fc>)
 8003d90:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003d92:	4b8b      	ldr	r3, [pc, #556]	@ (8003fc0 <menu+0x28fc>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d902      	bls.n	8003da0 <menu+0x26dc>
				iotMode = 0;
 8003d9a:	4b89      	ldr	r3, [pc, #548]	@ (8003fc0 <menu+0x28fc>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003da0:	f000 f9d6 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003da4:	2104      	movs	r1, #4
 8003da6:	4888      	ldr	r0, [pc, #544]	@ (8003fc8 <menu+0x2904>)
 8003da8:	f006 fd6c 	bl	800a884 <HAL_GPIO_ReadPin>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d115      	bne.n	8003dde <menu+0x271a>
 8003db2:	4b86      	ldr	r3, [pc, #536]	@ (8003fcc <menu+0x2908>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	f083 0301 	eor.w	r3, r3, #1
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00e      	beq.n	8003dde <menu+0x271a>
			iotMode = iotMode - 1;
 8003dc0:	4b7f      	ldr	r3, [pc, #508]	@ (8003fc0 <menu+0x28fc>)
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	4b7d      	ldr	r3, [pc, #500]	@ (8003fc0 <menu+0x28fc>)
 8003dca:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003dcc:	4b7c      	ldr	r3, [pc, #496]	@ (8003fc0 <menu+0x28fc>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <menu+0x2716>
		   		iotMode = 1;
 8003dd4:	4b7a      	ldr	r3, [pc, #488]	@ (8003fc0 <menu+0x28fc>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003dda:	f000 f9b9 	bl	8004150 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dde:	2108      	movs	r1, #8
 8003de0:	4879      	ldr	r0, [pc, #484]	@ (8003fc8 <menu+0x2904>)
 8003de2:	f006 fd4f 	bl	800a884 <HAL_GPIO_ReadPin>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d10e      	bne.n	8003e0a <menu+0x2746>
 8003dec:	4b77      	ldr	r3, [pc, #476]	@ (8003fcc <menu+0x2908>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	f083 0301 	eor.w	r3, r3, #1
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d007      	beq.n	8003e0a <menu+0x2746>
			eepromData[48] = iotMode;
 8003dfa:	4b71      	ldr	r3, [pc, #452]	@ (8003fc0 <menu+0x28fc>)
 8003dfc:	781a      	ldrb	r2, [r3, #0]
 8003dfe:	4b74      	ldr	r3, [pc, #464]	@ (8003fd0 <menu+0x290c>)
 8003e00:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003e04:	4b73      	ldr	r3, [pc, #460]	@ (8003fd4 <menu+0x2910>)
 8003e06:	2201      	movs	r2, #1
 8003e08:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003e0a:	4b73      	ldr	r3, [pc, #460]	@ (8003fd8 <menu+0x2914>)
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b20      	cmp	r3, #32
 8003e10:	d127      	bne.n	8003e62 <menu+0x279e>
		calismaSayModu = 0;
 8003e12:	4b72      	ldr	r3, [pc, #456]	@ (8003fdc <menu+0x2918>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, machineIDText);
 8003e18:	4a71      	ldr	r2, [pc, #452]	@ (8003fe0 <menu+0x291c>)
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	2001      	movs	r0, #1
 8003e1e:	f005 f979 	bl	8009114 <lcd_print>

		convertArrays(1);
 8003e22:	2001      	movs	r0, #1
 8003e24:	f7fc fd40 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003e28:	2032      	movs	r0, #50	@ 0x32
 8003e2a:	f005 fecd 	bl	8009bc8 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8003e2e:	2001      	movs	r0, #1
 8003e30:	f7fd fbec 	bl	800160c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e34:	2102      	movs	r1, #2
 8003e36:	4864      	ldr	r0, [pc, #400]	@ (8003fc8 <menu+0x2904>)
 8003e38:	f006 fd24 	bl	800a884 <HAL_GPIO_ReadPin>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d10f      	bne.n	8003e62 <menu+0x279e>
 8003e42:	2104      	movs	r1, #4
 8003e44:	4860      	ldr	r0, [pc, #384]	@ (8003fc8 <menu+0x2904>)
 8003e46:	f006 fd1d 	bl	800a884 <HAL_GPIO_ReadPin>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d108      	bne.n	8003e62 <menu+0x279e>
 8003e50:	4b5e      	ldr	r3, [pc, #376]	@ (8003fcc <menu+0x2908>)
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	f083 0301 	eor.w	r3, r3, #1
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <menu+0x279e>
			takeMachineIDWithConfirmation();
 8003e5e:	f004 f8eb 	bl	8008038 <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 8003e62:	4b5d      	ldr	r3, [pc, #372]	@ (8003fd8 <menu+0x2914>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	2b21      	cmp	r3, #33	@ 0x21
 8003e68:	d12b      	bne.n	8003ec2 <menu+0x27fe>
		calismaSayModu = 0;
 8003e6a:	4b5c      	ldr	r3, [pc, #368]	@ (8003fdc <menu+0x2918>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 8003e70:	2002      	movs	r0, #2
 8003e72:	f7fc fd19 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003e76:	2032      	movs	r0, #50	@ 0x32
 8003e78:	f005 fea6 	bl	8009bc8 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003e7c:	2002      	movs	r0, #2
 8003e7e:	f7fd fbc5 	bl	800160c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e82:	2102      	movs	r1, #2
 8003e84:	4850      	ldr	r0, [pc, #320]	@ (8003fc8 <menu+0x2904>)
 8003e86:	f006 fcfd 	bl	800a884 <HAL_GPIO_ReadPin>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d118      	bne.n	8003ec2 <menu+0x27fe>
 8003e90:	2104      	movs	r1, #4
 8003e92:	484d      	ldr	r0, [pc, #308]	@ (8003fc8 <menu+0x2904>)
 8003e94:	f006 fcf6 	bl	800a884 <HAL_GPIO_ReadPin>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d111      	bne.n	8003ec2 <menu+0x27fe>
 8003e9e:	4b4b      	ldr	r3, [pc, #300]	@ (8003fcc <menu+0x2908>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	f083 0301 	eor.w	r3, r3, #1
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <menu+0x27fe>
			takeWifiSSID();
 8003eac:	f004 faf2 	bl	8008494 <takeWifiSSID>

			convertArrays(2);
 8003eb0:	2002      	movs	r0, #2
 8003eb2:	f7fc fcf9 	bl	80008a8 <convertArrays>
			HAL_Delay(50);
 8003eb6:	2032      	movs	r0, #50	@ 0x32
 8003eb8:	f005 fe86 	bl	8009bc8 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003ebc:	2002      	movs	r0, #2
 8003ebe:	f7fd fba5 	bl	800160c <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003ec2:	4b45      	ldr	r3, [pc, #276]	@ (8003fd8 <menu+0x2914>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b22      	cmp	r3, #34	@ 0x22
 8003ec8:	d12b      	bne.n	8003f22 <menu+0x285e>
		calismaSayModu = 0;
 8003eca:	4b44      	ldr	r3, [pc, #272]	@ (8003fdc <menu+0x2918>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8003ed0:	2003      	movs	r0, #3
 8003ed2:	f7fc fce9 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003ed6:	2032      	movs	r0, #50	@ 0x32
 8003ed8:	f005 fe76 	bl	8009bc8 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003edc:	2003      	movs	r0, #3
 8003ede:	f7fd fb95 	bl	800160c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ee2:	2102      	movs	r1, #2
 8003ee4:	4838      	ldr	r0, [pc, #224]	@ (8003fc8 <menu+0x2904>)
 8003ee6:	f006 fccd 	bl	800a884 <HAL_GPIO_ReadPin>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d118      	bne.n	8003f22 <menu+0x285e>
 8003ef0:	2104      	movs	r1, #4
 8003ef2:	4835      	ldr	r0, [pc, #212]	@ (8003fc8 <menu+0x2904>)
 8003ef4:	f006 fcc6 	bl	800a884 <HAL_GPIO_ReadPin>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d111      	bne.n	8003f22 <menu+0x285e>
 8003efe:	4b33      	ldr	r3, [pc, #204]	@ (8003fcc <menu+0x2908>)
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	f083 0301 	eor.w	r3, r3, #1
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00a      	beq.n	8003f22 <menu+0x285e>
			takeWifiPass();
 8003f0c:	f004 fc6e 	bl	80087ec <takeWifiPass>

			convertArrays(3);
 8003f10:	2003      	movs	r0, #3
 8003f12:	f7fc fcc9 	bl	80008a8 <convertArrays>
			HAL_Delay(50);
 8003f16:	2032      	movs	r0, #50	@ 0x32
 8003f18:	f005 fe56 	bl	8009bc8 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8003f1c:	2003      	movs	r0, #3
 8003f1e:	f7fd fb75 	bl	800160c <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8003f22:	4b2d      	ldr	r3, [pc, #180]	@ (8003fd8 <menu+0x2914>)
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b23      	cmp	r3, #35	@ 0x23
 8003f28:	d146      	bne.n	8003fb8 <menu+0x28f4>
		lcd_print(1, 1, menudenCikisText);
 8003f2a:	4a2e      	ldr	r2, [pc, #184]	@ (8003fe4 <menu+0x2920>)
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	2001      	movs	r0, #1
 8003f30:	f005 f8f0 	bl	8009114 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003f34:	4a2c      	ldr	r2, [pc, #176]	@ (8003fe8 <menu+0x2924>)
 8003f36:	2101      	movs	r1, #1
 8003f38:	2002      	movs	r0, #2
 8003f3a:	f005 f8eb 	bl	8009114 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003f3e:	2108      	movs	r1, #8
 8003f40:	4821      	ldr	r0, [pc, #132]	@ (8003fc8 <menu+0x2904>)
 8003f42:	f006 fc9f 	bl	800a884 <HAL_GPIO_ReadPin>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d135      	bne.n	8003fb8 <menu+0x28f4>
			menuGiris = 0;
 8003f4c:	4b27      	ldr	r3, [pc, #156]	@ (8003fec <menu+0x2928>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	701a      	strb	r2, [r3, #0]

			uint32_t startTick = HAL_GetTick();
 8003f52:	f005 fe2f 	bl	8009bb4 <HAL_GetTick>
 8003f56:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003f58:	e007      	b.n	8003f6a <menu+0x28a6>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003f5a:	f005 fe2b 	bl	8009bb4 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f68:	d806      	bhi.n	8003f78 <menu+0x28b4>
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003f6a:	4821      	ldr	r0, [pc, #132]	@ (8003ff0 <menu+0x292c>)
 8003f6c:	f007 fab3 	bl	800b4d6 <HAL_I2C_GetError>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d0f1      	beq.n	8003f5a <menu+0x2896>
 8003f76:	e000      	b.n	8003f7a <menu+0x28b6>
			        break;
 8003f78:	bf00      	nop
			    }
			}

			startTick = HAL_GetTick();
 8003f7a:	f005 fe1b 	bl	8009bb4 <HAL_GetTick>
 8003f7e:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003f80:	e007      	b.n	8003f92 <menu+0x28ce>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003f82:	f005 fe17 	bl	8009bb4 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f90:	d806      	bhi.n	8003fa0 <menu+0x28dc>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003f92:	4817      	ldr	r0, [pc, #92]	@ (8003ff0 <menu+0x292c>)
 8003f94:	f007 fa92 	bl	800b4bc <HAL_I2C_GetState>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b20      	cmp	r3, #32
 8003f9c:	d1f1      	bne.n	8003f82 <menu+0x28be>
 8003f9e:	e000      	b.n	8003fa2 <menu+0x28de>
			        break;
 8003fa0:	bf00      	nop
			    }
			}

			saveEEPROM(0);
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	f7fc fb7e 	bl	80006a4 <saveEEPROM>

			lcd_clear();
 8003fa8:	f005 f8e0 	bl	800916c <lcd_clear>
			HAL_Delay(500);
 8003fac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003fb0:	f005 fe0a 	bl	8009bc8 <HAL_Delay>
			NVIC_SystemReset();
 8003fb4:	f7fd fb70 	bl	8001698 <__NVIC_SystemReset>
		}
	}
}
 8003fb8:	bf00      	nop
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	200010e7 	.word	0x200010e7
 8003fc4:	200013b0 	.word	0x200013b0
 8003fc8:	40010800 	.word	0x40010800
 8003fcc:	200010eb 	.word	0x200010eb
 8003fd0:	20000fec 	.word	0x20000fec
 8003fd4:	200010e8 	.word	0x200010e8
 8003fd8:	200010bc 	.word	0x200010bc
 8003fdc:	200010db 	.word	0x200010db
 8003fe0:	200018c4 	.word	0x200018c4
 8003fe4:	2000175c 	.word	0x2000175c
 8003fe8:	20001770 	.word	0x20001770
 8003fec:	200010d9 	.word	0x200010d9
 8003ff0:	2000193c 	.word	0x2000193c

08003ff4 <displayCycleOnLCD>:

void displayCycleOnLCD(int finalCount) {
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b08a      	sub	sp, #40	@ 0x28
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
    int padding, i;

    itoa(finalCount, snum, 10);
 8003ffc:	220a      	movs	r2, #10
 8003ffe:	491c      	ldr	r1, [pc, #112]	@ (8004070 <displayCycleOnLCD+0x7c>)
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	f009 ff2d 	bl	800de60 <itoa>

    int length = strlen(snum);
 8004006:	481a      	ldr	r0, [pc, #104]	@ (8004070 <displayCycleOnLCD+0x7c>)
 8004008:	f7fc f90c 	bl	8000224 <strlen>
 800400c:	4603      	mov	r3, r0
 800400e:	623b      	str	r3, [r7, #32]

    padding = (16 - length) / 2;
 8004010:	6a3b      	ldr	r3, [r7, #32]
 8004012:	f1c3 0310 	rsb	r3, r3, #16
 8004016:	0fda      	lsrs	r2, r3, #31
 8004018:	4413      	add	r3, r2
 800401a:	105b      	asrs	r3, r3, #1
 800401c:	61fb      	str	r3, [r7, #28]

    char displayLine[17];
    memset(displayLine, ' ', 16);
 800401e:	f107 0308 	add.w	r3, r7, #8
 8004022:	2210      	movs	r2, #16
 8004024:	2120      	movs	r1, #32
 8004026:	4618      	mov	r0, r3
 8004028:	f00a f834 	bl	800e094 <memset>
    displayLine[16] = '\0'; // Null terminator
 800402c:	2300      	movs	r3, #0
 800402e:	763b      	strb	r3, [r7, #24]

    for (i = 0; i < length; i++) {
 8004030:	2300      	movs	r3, #0
 8004032:	627b      	str	r3, [r7, #36]	@ 0x24
 8004034:	e00d      	b.n	8004052 <displayCycleOnLCD+0x5e>
        displayLine[padding + i] = snum[i];
 8004036:	69fa      	ldr	r2, [r7, #28]
 8004038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403a:	4413      	add	r3, r2
 800403c:	490c      	ldr	r1, [pc, #48]	@ (8004070 <displayCycleOnLCD+0x7c>)
 800403e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004040:	440a      	add	r2, r1
 8004042:	7812      	ldrb	r2, [r2, #0]
 8004044:	3328      	adds	r3, #40	@ 0x28
 8004046:	443b      	add	r3, r7
 8004048:	f803 2c20 	strb.w	r2, [r3, #-32]
    for (i = 0; i < length; i++) {
 800404c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404e:	3301      	adds	r3, #1
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
 8004052:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	429a      	cmp	r2, r3
 8004058:	dbed      	blt.n	8004036 <displayCycleOnLCD+0x42>
    }

    lcd_print(2, 1, displayLine);
 800405a:	f107 0308 	add.w	r3, r7, #8
 800405e:	461a      	mov	r2, r3
 8004060:	2101      	movs	r1, #1
 8004062:	2002      	movs	r0, #2
 8004064:	f005 f856 	bl	8009114 <lcd_print>
}
 8004068:	bf00      	nop
 800406a:	3728      	adds	r7, #40	@ 0x28
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}
 8004070:	2000105c 	.word	0x2000105c

08004074 <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 800407e:	79fb      	ldrb	r3, [r7, #7]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d105      	bne.n	8004090 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8004084:	4a24      	ldr	r2, [pc, #144]	@ (8004118 <lcdUpdate+0xa4>)
 8004086:	2101      	movs	r1, #1
 8004088:	2002      	movs	r0, #2
 800408a:	f005 f843 	bl	8009114 <lcd_print>
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
		HAL_Delay(10);
	}
}
 800408e:	e03e      	b.n	800410e <lcdUpdate+0x9a>
	} else if(y==2) {
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d105      	bne.n	80040a2 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8004096:	4a20      	ldr	r2, [pc, #128]	@ (8004118 <lcdUpdate+0xa4>)
 8004098:	2102      	movs	r1, #2
 800409a:	2002      	movs	r0, #2
 800409c:	f005 f83a 	bl	8009114 <lcd_print>
}
 80040a0:	e035      	b.n	800410e <lcdUpdate+0x9a>
	} else if(y==3) {
 80040a2:	79fb      	ldrb	r3, [r7, #7]
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d105      	bne.n	80040b4 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80040a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004118 <lcdUpdate+0xa4>)
 80040aa:	2103      	movs	r1, #3
 80040ac:	2002      	movs	r0, #2
 80040ae:	f005 f831 	bl	8009114 <lcd_print>
}
 80040b2:	e02c      	b.n	800410e <lcdUpdate+0x9a>
	} else if(y==4) {
 80040b4:	79fb      	ldrb	r3, [r7, #7]
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d105      	bne.n	80040c6 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80040ba:	4a17      	ldr	r2, [pc, #92]	@ (8004118 <lcdUpdate+0xa4>)
 80040bc:	2104      	movs	r1, #4
 80040be:	2002      	movs	r0, #2
 80040c0:	f005 f828 	bl	8009114 <lcd_print>
}
 80040c4:	e023      	b.n	800410e <lcdUpdate+0x9a>
	} else if(y==5) {
 80040c6:	79fb      	ldrb	r3, [r7, #7]
 80040c8:	2b05      	cmp	r3, #5
 80040ca:	d105      	bne.n	80040d8 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80040cc:	4a12      	ldr	r2, [pc, #72]	@ (8004118 <lcdUpdate+0xa4>)
 80040ce:	2105      	movs	r1, #5
 80040d0:	2002      	movs	r0, #2
 80040d2:	f005 f81f 	bl	8009114 <lcd_print>
}
 80040d6:	e01a      	b.n	800410e <lcdUpdate+0x9a>
	} else if(y==6) {
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	2b06      	cmp	r3, #6
 80040dc:	d105      	bne.n	80040ea <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80040de:	4a0e      	ldr	r2, [pc, #56]	@ (8004118 <lcdUpdate+0xa4>)
 80040e0:	2106      	movs	r1, #6
 80040e2:	2002      	movs	r0, #2
 80040e4:	f005 f816 	bl	8009114 <lcd_print>
}
 80040e8:	e011      	b.n	800410e <lcdUpdate+0x9a>
	} else if (y==7) {
 80040ea:	79fb      	ldrb	r3, [r7, #7]
 80040ec:	2b07      	cmp	r3, #7
 80040ee:	d10e      	bne.n	800410e <lcdUpdate+0x9a>
		lcd_clear();
 80040f0:	f005 f83c 	bl	800916c <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 80040f4:	4a09      	ldr	r2, [pc, #36]	@ (800411c <lcdUpdate+0xa8>)
 80040f6:	2101      	movs	r1, #1
 80040f8:	2001      	movs	r0, #1
 80040fa:	f005 f80b 	bl	8009114 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 80040fe:	4a08      	ldr	r2, [pc, #32]	@ (8004120 <lcdUpdate+0xac>)
 8004100:	2101      	movs	r1, #1
 8004102:	2002      	movs	r0, #2
 8004104:	f005 f806 	bl	8009114 <lcd_print>
		HAL_Delay(10);
 8004108:	200a      	movs	r0, #10
 800410a:	f005 fd5d 	bl	8009bc8 <HAL_Delay>
}
 800410e:	bf00      	nop
 8004110:	3708      	adds	r7, #8
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	0800f394 	.word	0x0800f394
 800411c:	200000c4 	.word	0x200000c4
 8004120:	200000d8 	.word	0x200000d8

08004124 <checkLCDBacklight>:

void checkLCDBacklight() {
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure) {
 8004128:	4b07      	ldr	r3, [pc, #28]	@ (8004148 <checkLCDBacklight+0x24>)
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	4b07      	ldr	r3, [pc, #28]	@ (800414c <checkLCDBacklight+0x28>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b3b      	cmp	r3, #59	@ 0x3b
 8004134:	d903      	bls.n	800413e <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8004136:	2000      	movs	r0, #0
 8004138:	f005 f838 	bl	80091ac <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 800413c:	e002      	b.n	8004144 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 800413e:	2001      	movs	r0, #1
 8004140:	f005 f834 	bl	80091ac <lcd_backlight>
}
 8004144:	bf00      	nop
 8004146:	bd80      	pop	{r7, pc}
 8004148:	20001094 	.word	0x20001094
 800414c:	200010b0 	.word	0x200010b0

08004150 <bekle>:

void bekle() {
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
	timer1=millis;
 8004154:	4b47      	ldr	r3, [pc, #284]	@ (8004274 <bekle+0x124>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a47      	ldr	r2, [pc, #284]	@ (8004278 <bekle+0x128>)
 800415a:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800415c:	e002      	b.n	8004164 <bekle+0x14>
    	butonKontrol = 1;
 800415e:	4b47      	ldr	r3, [pc, #284]	@ (800427c <bekle+0x12c>)
 8004160:	2201      	movs	r2, #1
 8004162:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004164:	2101      	movs	r1, #1
 8004166:	4846      	ldr	r0, [pc, #280]	@ (8004280 <bekle+0x130>)
 8004168:	f006 fb8c 	bl	800a884 <HAL_GPIO_ReadPin>
 800416c:	4603      	mov	r3, r0
 800416e:	2b01      	cmp	r3, #1
 8004170:	d109      	bne.n	8004186 <bekle+0x36>
 8004172:	4b40      	ldr	r3, [pc, #256]	@ (8004274 <bekle+0x124>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4b40      	ldr	r3, [pc, #256]	@ (8004278 <bekle+0x128>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d0ef      	beq.n	800415e <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800417e:	e002      	b.n	8004186 <bekle+0x36>
    	butonKontrol = 1;
 8004180:	4b3e      	ldr	r3, [pc, #248]	@ (800427c <bekle+0x12c>)
 8004182:	2201      	movs	r2, #1
 8004184:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004186:	2108      	movs	r1, #8
 8004188:	483e      	ldr	r0, [pc, #248]	@ (8004284 <bekle+0x134>)
 800418a:	f006 fb7b 	bl	800a884 <HAL_GPIO_ReadPin>
 800418e:	4603      	mov	r3, r0
 8004190:	2b01      	cmp	r3, #1
 8004192:	d109      	bne.n	80041a8 <bekle+0x58>
 8004194:	4b37      	ldr	r3, [pc, #220]	@ (8004274 <bekle+0x124>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	4b37      	ldr	r3, [pc, #220]	@ (8004278 <bekle+0x128>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d0ef      	beq.n	8004180 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80041a0:	e002      	b.n	80041a8 <bekle+0x58>
    	butonKontrol = 1;
 80041a2:	4b36      	ldr	r3, [pc, #216]	@ (800427c <bekle+0x12c>)
 80041a4:	2201      	movs	r2, #1
 80041a6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80041a8:	2102      	movs	r1, #2
 80041aa:	4835      	ldr	r0, [pc, #212]	@ (8004280 <bekle+0x130>)
 80041ac:	f006 fb6a 	bl	800a884 <HAL_GPIO_ReadPin>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d109      	bne.n	80041ca <bekle+0x7a>
 80041b6:	4b2f      	ldr	r3, [pc, #188]	@ (8004274 <bekle+0x124>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004278 <bekle+0x128>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d0ef      	beq.n	80041a2 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80041c2:	e002      	b.n	80041ca <bekle+0x7a>
    	butonKontrol = 1;
 80041c4:	4b2d      	ldr	r3, [pc, #180]	@ (800427c <bekle+0x12c>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80041ca:	2104      	movs	r1, #4
 80041cc:	482c      	ldr	r0, [pc, #176]	@ (8004280 <bekle+0x130>)
 80041ce:	f006 fb59 	bl	800a884 <HAL_GPIO_ReadPin>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d109      	bne.n	80041ec <bekle+0x9c>
 80041d8:	4b26      	ldr	r3, [pc, #152]	@ (8004274 <bekle+0x124>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	4b26      	ldr	r3, [pc, #152]	@ (8004278 <bekle+0x128>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d0ef      	beq.n	80041c4 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80041e4:	e002      	b.n	80041ec <bekle+0x9c>
    	butonKontrol = 1;
 80041e6:	4b25      	ldr	r3, [pc, #148]	@ (800427c <bekle+0x12c>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80041ec:	2108      	movs	r1, #8
 80041ee:	4824      	ldr	r0, [pc, #144]	@ (8004280 <bekle+0x130>)
 80041f0:	f006 fb48 	bl	800a884 <HAL_GPIO_ReadPin>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	d109      	bne.n	800420e <bekle+0xbe>
 80041fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004274 <bekle+0x124>)
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004278 <bekle+0x128>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	429a      	cmp	r2, r3
 8004204:	d0ef      	beq.n	80041e6 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004206:	e002      	b.n	800420e <bekle+0xbe>
    	butonKontrol = 1;
 8004208:	4b1c      	ldr	r3, [pc, #112]	@ (800427c <bekle+0x12c>)
 800420a:	2201      	movs	r2, #1
 800420c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800420e:	2180      	movs	r1, #128	@ 0x80
 8004210:	481c      	ldr	r0, [pc, #112]	@ (8004284 <bekle+0x134>)
 8004212:	f006 fb37 	bl	800a884 <HAL_GPIO_ReadPin>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d109      	bne.n	8004230 <bekle+0xe0>
 800421c:	4b15      	ldr	r3, [pc, #84]	@ (8004274 <bekle+0x124>)
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	4b15      	ldr	r3, [pc, #84]	@ (8004278 <bekle+0x128>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	429a      	cmp	r2, r3
 8004226:	d0ef      	beq.n	8004208 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004228:	e002      	b.n	8004230 <bekle+0xe0>
    	butonKontrol = 1;
 800422a:	4b14      	ldr	r3, [pc, #80]	@ (800427c <bekle+0x12c>)
 800422c:	2201      	movs	r2, #1
 800422e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004230:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004234:	4813      	ldr	r0, [pc, #76]	@ (8004284 <bekle+0x134>)
 8004236:	f006 fb25 	bl	800a884 <HAL_GPIO_ReadPin>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d109      	bne.n	8004254 <bekle+0x104>
 8004240:	4b0c      	ldr	r3, [pc, #48]	@ (8004274 <bekle+0x124>)
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	4b0c      	ldr	r3, [pc, #48]	@ (8004278 <bekle+0x128>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	429a      	cmp	r2, r3
 800424a:	d0ee      	beq.n	800422a <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800424c:	e002      	b.n	8004254 <bekle+0x104>
    	butonKontrol = 1;
 800424e:	4b0b      	ldr	r3, [pc, #44]	@ (800427c <bekle+0x12c>)
 8004250:	2201      	movs	r2, #1
 8004252:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004254:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004258:	480a      	ldr	r0, [pc, #40]	@ (8004284 <bekle+0x134>)
 800425a:	f006 fb13 	bl	800a884 <HAL_GPIO_ReadPin>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d105      	bne.n	8004270 <bekle+0x120>
 8004264:	4b03      	ldr	r3, [pc, #12]	@ (8004274 <bekle+0x124>)
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	4b03      	ldr	r3, [pc, #12]	@ (8004278 <bekle+0x128>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d0ee      	beq.n	800424e <bekle+0xfe>
    }

}
 8004270:	bf00      	nop
 8004272:	bd80      	pop	{r7, pc}
 8004274:	20001094 	.word	0x20001094
 8004278:	2000109c 	.word	0x2000109c
 800427c:	200010eb 	.word	0x200010eb
 8004280:	40010800 	.word	0x40010800
 8004284:	40011000 	.word	0x40011000

08004288 <buttonCheck>:

uint8_t buttonCheck(void) {
 8004288:	b580      	push	{r7, lr}
 800428a:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 800428c:	2101      	movs	r1, #1
 800428e:	4815      	ldr	r0, [pc, #84]	@ (80042e4 <buttonCheck+0x5c>)
 8004290:	f006 faf8 	bl	800a884 <HAL_GPIO_ReadPin>
 8004294:	4603      	mov	r3, r0
 8004296:	2b01      	cmp	r3, #1
 8004298:	d01b      	beq.n	80042d2 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 800429a:	2108      	movs	r1, #8
 800429c:	4812      	ldr	r0, [pc, #72]	@ (80042e8 <buttonCheck+0x60>)
 800429e:	f006 faf1 	bl	800a884 <HAL_GPIO_ReadPin>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d014      	beq.n	80042d2 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 80042a8:	2102      	movs	r1, #2
 80042aa:	480e      	ldr	r0, [pc, #56]	@ (80042e4 <buttonCheck+0x5c>)
 80042ac:	f006 faea 	bl	800a884 <HAL_GPIO_ReadPin>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d00d      	beq.n	80042d2 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 80042b6:	2104      	movs	r1, #4
 80042b8:	480a      	ldr	r0, [pc, #40]	@ (80042e4 <buttonCheck+0x5c>)
 80042ba:	f006 fae3 	bl	800a884 <HAL_GPIO_ReadPin>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d006      	beq.n	80042d2 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 80042c4:	2108      	movs	r1, #8
 80042c6:	4807      	ldr	r0, [pc, #28]	@ (80042e4 <buttonCheck+0x5c>)
 80042c8:	f006 fadc 	bl	800a884 <HAL_GPIO_ReadPin>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d104      	bne.n	80042dc <buttonCheck+0x54>
		backLightTimer = 0;
 80042d2:	4b06      	ldr	r3, [pc, #24]	@ (80042ec <buttonCheck+0x64>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
		return 1;
 80042d8:	2301      	movs	r3, #1
 80042da:	e000      	b.n	80042de <buttonCheck+0x56>
	}
	return 0;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40010800 	.word	0x40010800
 80042e8:	40011000 	.word	0x40011000
 80042ec:	200010b0 	.word	0x200010b0

080042f0 <checkBasincSalteri>:

void checkBasincSalteri() {
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80042f4:	4b13      	ldr	r3, [pc, #76]	@ (8004344 <checkBasincSalteri+0x54>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d102      	bne.n	8004302 <checkBasincSalteri+0x12>
		basincVar=1;
 80042fc:	4b12      	ldr	r3, [pc, #72]	@ (8004348 <checkBasincSalteri+0x58>)
 80042fe:	2201      	movs	r2, #1
 8004300:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004302:	4b10      	ldr	r3, [pc, #64]	@ (8004344 <checkBasincSalteri+0x54>)
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	2b01      	cmp	r3, #1
 8004308:	d119      	bne.n	800433e <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 800430a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800430e:	480f      	ldr	r0, [pc, #60]	@ (800434c <checkBasincSalteri+0x5c>)
 8004310:	f006 fab8 	bl	800a884 <HAL_GPIO_ReadPin>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10a      	bne.n	8004330 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 800431a:	4b0d      	ldr	r3, [pc, #52]	@ (8004350 <checkBasincSalteri+0x60>)
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	4b0d      	ldr	r3, [pc, #52]	@ (8004354 <checkBasincSalteri+0x64>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	2b02      	cmp	r3, #2
 8004326:	d90a      	bls.n	800433e <checkBasincSalteri+0x4e>
				basincVar=1;
 8004328:	4b07      	ldr	r3, [pc, #28]	@ (8004348 <checkBasincSalteri+0x58>)
 800432a:	2201      	movs	r2, #1
 800432c:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 800432e:	e006      	b.n	800433e <checkBasincSalteri+0x4e>
			timer5=millis;
 8004330:	4b07      	ldr	r3, [pc, #28]	@ (8004350 <checkBasincSalteri+0x60>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a07      	ldr	r2, [pc, #28]	@ (8004354 <checkBasincSalteri+0x64>)
 8004336:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004338:	4b03      	ldr	r3, [pc, #12]	@ (8004348 <checkBasincSalteri+0x58>)
 800433a:	2200      	movs	r2, #0
 800433c:	701a      	strb	r2, [r3, #0]
}
 800433e:	bf00      	nop
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	200010c3 	.word	0x200010c3
 8004348:	200010bf 	.word	0x200010bf
 800434c:	40011000 	.word	0x40011000
 8004350:	20001094 	.word	0x20001094
 8004354:	200010ac 	.word	0x200010ac

08004358 <checkBasGonder>:

void checkBasGonder() {
 8004358:	b480      	push	{r7}
 800435a:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 800435c:	4b1b      	ldr	r3, [pc, #108]	@ (80043cc <checkBasGonder+0x74>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d10b      	bne.n	800437c <checkBasGonder+0x24>
 8004364:	4b1a      	ldr	r3, [pc, #104]	@ (80043d0 <checkBasGonder+0x78>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d007      	beq.n	800437c <checkBasGonder+0x24>
 800436c:	4b19      	ldr	r3, [pc, #100]	@ (80043d4 <checkBasGonder+0x7c>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d103      	bne.n	800437c <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004374:	4b18      	ldr	r3, [pc, #96]	@ (80043d8 <checkBasGonder+0x80>)
 8004376:	2201      	movs	r2, #1
 8004378:	701a      	strb	r2, [r3, #0]
 800437a:	e009      	b.n	8004390 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 800437c:	4b14      	ldr	r3, [pc, #80]	@ (80043d0 <checkBasGonder+0x78>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	f083 0301 	eor.w	r3, r3, #1
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 800438a:	4b13      	ldr	r3, [pc, #76]	@ (80043d8 <checkBasGonder+0x80>)
 800438c:	2200      	movs	r2, #0
 800438e:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004390:	4b0e      	ldr	r3, [pc, #56]	@ (80043cc <checkBasGonder+0x74>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d10b      	bne.n	80043b0 <checkBasGonder+0x58>
 8004398:	4b10      	ldr	r3, [pc, #64]	@ (80043dc <checkBasGonder+0x84>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d007      	beq.n	80043b0 <checkBasGonder+0x58>
 80043a0:	4b0c      	ldr	r3, [pc, #48]	@ (80043d4 <checkBasGonder+0x7c>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d103      	bne.n	80043b0 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 80043a8:	4b0d      	ldr	r3, [pc, #52]	@ (80043e0 <checkBasGonder+0x88>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 80043ae:	e009      	b.n	80043c4 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 80043b0:	4b0a      	ldr	r3, [pc, #40]	@ (80043dc <checkBasGonder+0x84>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	f083 0301 	eor.w	r3, r3, #1
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 80043be:	4b08      	ldr	r3, [pc, #32]	@ (80043e0 <checkBasGonder+0x88>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	701a      	strb	r2, [r3, #0]
}
 80043c4:	bf00      	nop
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bc80      	pop	{r7}
 80043ca:	4770      	bx	lr
 80043cc:	200010bd 	.word	0x200010bd
 80043d0:	200010f1 	.word	0x200010f1
 80043d4:	200010cb 	.word	0x200010cb
 80043d8:	200010f8 	.word	0x200010f8
 80043dc:	200010f4 	.word	0x200010f4
 80043e0:	200010f9 	.word	0x200010f9

080043e4 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 80043e8:	4b24      	ldr	r3, [pc, #144]	@ (800447c <checkKapiSecimleri+0x98>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d102      	bne.n	80043f6 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 80043f0:	4b23      	ldr	r3, [pc, #140]	@ (8004480 <checkKapiSecimleri+0x9c>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 80043f6:	4b21      	ldr	r3, [pc, #132]	@ (800447c <checkKapiSecimleri+0x98>)
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d10e      	bne.n	800441c <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80043fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004402:	4820      	ldr	r0, [pc, #128]	@ (8004484 <checkKapiSecimleri+0xa0>)
 8004404:	f006 fa3e 	bl	800a884 <HAL_GPIO_ReadPin>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d103      	bne.n	8004416 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 800440e:	4b1c      	ldr	r3, [pc, #112]	@ (8004480 <checkKapiSecimleri+0x9c>)
 8004410:	2201      	movs	r2, #1
 8004412:	701a      	strb	r2, [r3, #0]
 8004414:	e002      	b.n	800441c <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8004416:	4b1a      	ldr	r3, [pc, #104]	@ (8004480 <checkKapiSecimleri+0x9c>)
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 800441c:	4b17      	ldr	r3, [pc, #92]	@ (800447c <checkKapiSecimleri+0x98>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	2b02      	cmp	r3, #2
 8004422:	d10e      	bne.n	8004442 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004424:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004428:	4816      	ldr	r0, [pc, #88]	@ (8004484 <checkKapiSecimleri+0xa0>)
 800442a:	f006 fa2b 	bl	800a884 <HAL_GPIO_ReadPin>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d103      	bne.n	800443c <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004434:	4b12      	ldr	r3, [pc, #72]	@ (8004480 <checkKapiSecimleri+0x9c>)
 8004436:	2201      	movs	r2, #1
 8004438:	701a      	strb	r2, [r3, #0]
 800443a:	e002      	b.n	8004442 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 800443c:	4b10      	ldr	r3, [pc, #64]	@ (8004480 <checkKapiSecimleri+0x9c>)
 800443e:	2200      	movs	r2, #0
 8004440:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004442:	4b0e      	ldr	r3, [pc, #56]	@ (800447c <checkKapiSecimleri+0x98>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b03      	cmp	r3, #3
 8004448:	d116      	bne.n	8004478 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 800444a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800444e:	480d      	ldr	r0, [pc, #52]	@ (8004484 <checkKapiSecimleri+0xa0>)
 8004450:	f006 fa18 	bl	800a884 <HAL_GPIO_ReadPin>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10b      	bne.n	8004472 <checkKapiSecimleri+0x8e>
 800445a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800445e:	4809      	ldr	r0, [pc, #36]	@ (8004484 <checkKapiSecimleri+0xa0>)
 8004460:	f006 fa10 	bl	800a884 <HAL_GPIO_ReadPin>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d103      	bne.n	8004472 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 800446a:	4b05      	ldr	r3, [pc, #20]	@ (8004480 <checkKapiSecimleri+0x9c>)
 800446c:	2201      	movs	r2, #1
 800446e:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004470:	e002      	b.n	8004478 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004472:	4b03      	ldr	r3, [pc, #12]	@ (8004480 <checkKapiSecimleri+0x9c>)
 8004474:	2200      	movs	r2, #0
 8004476:	701a      	strb	r2, [r3, #0]
}
 8004478:	bf00      	nop
 800447a:	bd80      	pop	{r7, pc}
 800447c:	200010c4 	.word	0x200010c4
 8004480:	2000110e 	.word	0x2000110e
 8004484:	40010800 	.word	0x40010800

08004488 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 800448c:	4b66      	ldr	r3, [pc, #408]	@ (8004628 <checkAktifCalisma+0x1a0>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	f041 8343 	bne.w	8005b1c <checkAktifCalisma+0x1694>
 8004496:	4b65      	ldr	r3, [pc, #404]	@ (800462c <checkAktifCalisma+0x1a4>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	f041 833e 	bne.w	8005b1c <checkAktifCalisma+0x1694>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 80044a0:	4b63      	ldr	r3, [pc, #396]	@ (8004630 <checkAktifCalisma+0x1a8>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d11a      	bne.n	80044de <checkAktifCalisma+0x56>
 80044a8:	4b62      	ldr	r3, [pc, #392]	@ (8004634 <checkAktifCalisma+0x1ac>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d116      	bne.n	80044de <checkAktifCalisma+0x56>
 80044b0:	4b61      	ldr	r3, [pc, #388]	@ (8004638 <checkAktifCalisma+0x1b0>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00a      	beq.n	80044ce <checkAktifCalisma+0x46>
 80044b8:	4b60      	ldr	r3, [pc, #384]	@ (800463c <checkAktifCalisma+0x1b4>)
 80044ba:	781b      	ldrb	r3, [r3, #0]
 80044bc:	f083 0301 	eor.w	r3, r3, #1
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <checkAktifCalisma+0x46>
 80044c6:	4b5e      	ldr	r3, [pc, #376]	@ (8004640 <checkAktifCalisma+0x1b8>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d007      	beq.n	80044de <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 80044ce:	4b5d      	ldr	r3, [pc, #372]	@ (8004644 <checkAktifCalisma+0x1bc>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d01c      	beq.n	8004510 <checkAktifCalisma+0x88>
 80044d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004648 <checkAktifCalisma+0x1c0>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d118      	bne.n	8004510 <checkAktifCalisma+0x88>
 80044de:	4b5b      	ldr	r3, [pc, #364]	@ (800464c <checkAktifCalisma+0x1c4>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d103      	bne.n	80044ee <checkAktifCalisma+0x66>
 80044e6:	4b5a      	ldr	r3, [pc, #360]	@ (8004650 <checkAktifCalisma+0x1c8>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d010      	beq.n	8004510 <checkAktifCalisma+0x88>
 80044ee:	4b59      	ldr	r3, [pc, #356]	@ (8004654 <checkAktifCalisma+0x1cc>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00c      	beq.n	8004510 <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80044f6:	2201      	movs	r2, #1
 80044f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80044fc:	4856      	ldr	r0, [pc, #344]	@ (8004658 <checkAktifCalisma+0x1d0>)
 80044fe:	f006 f9d8 	bl	800a8b2 <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 8004502:	4b56      	ldr	r3, [pc, #344]	@ (800465c <checkAktifCalisma+0x1d4>)
 8004504:	2201      	movs	r2, #1
 8004506:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8004508:	4b55      	ldr	r3, [pc, #340]	@ (8004660 <checkAktifCalisma+0x1d8>)
 800450a:	2201      	movs	r2, #1
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	e008      	b.n	8004522 <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004510:	2200      	movs	r2, #0
 8004512:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004516:	4850      	ldr	r0, [pc, #320]	@ (8004658 <checkAktifCalisma+0x1d0>)
 8004518:	f006 f9cb 	bl	800a8b2 <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 800451c:	4b4f      	ldr	r3, [pc, #316]	@ (800465c <checkAktifCalisma+0x1d4>)
 800451e:	2200      	movs	r2, #0
 8004520:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 8004522:	4b42      	ldr	r3, [pc, #264]	@ (800462c <checkAktifCalisma+0x1a4>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d164      	bne.n	80045f4 <checkAktifCalisma+0x16c>
 800452a:	4b49      	ldr	r3, [pc, #292]	@ (8004650 <checkAktifCalisma+0x1c8>)
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d103      	bne.n	800453a <checkAktifCalisma+0xb2>
 8004532:	4b46      	ldr	r3, [pc, #280]	@ (800464c <checkAktifCalisma+0x1c4>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d05c      	beq.n	80045f4 <checkAktifCalisma+0x16c>
 800453a:	4b46      	ldr	r3, [pc, #280]	@ (8004654 <checkAktifCalisma+0x1cc>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d058      	beq.n	80045f4 <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004542:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004546:	4844      	ldr	r0, [pc, #272]	@ (8004658 <checkAktifCalisma+0x1d0>)
 8004548:	f006 f99c 	bl	800a884 <HAL_GPIO_ReadPin>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <checkAktifCalisma+0xd2>
 8004552:	4b44      	ldr	r3, [pc, #272]	@ (8004664 <checkAktifCalisma+0x1dc>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d04c      	beq.n	80045f4 <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800455a:	2102      	movs	r1, #2
 800455c:	4842      	ldr	r0, [pc, #264]	@ (8004668 <checkAktifCalisma+0x1e0>)
 800455e:	f006 f991 	bl	800a884 <HAL_GPIO_ReadPin>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d145      	bne.n	80045f4 <checkAktifCalisma+0x16c>
							&& (basincVar)
 8004568:	4b40      	ldr	r3, [pc, #256]	@ (800466c <checkAktifCalisma+0x1e4>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d041      	beq.n	80045f4 <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004570:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004574:	4838      	ldr	r0, [pc, #224]	@ (8004658 <checkAktifCalisma+0x1d0>)
 8004576:	f006 f985 	bl	800a884 <HAL_GPIO_ReadPin>
 800457a:	4603      	mov	r3, r0
 800457c:	2b01      	cmp	r3, #1
 800457e:	d10e      	bne.n	800459e <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004580:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004584:	4834      	ldr	r0, [pc, #208]	@ (8004658 <checkAktifCalisma+0x1d0>)
 8004586:	f006 f97d 	bl	800a884 <HAL_GPIO_ReadPin>
 800458a:	4603      	mov	r3, r0
 800458c:	2b01      	cmp	r3, #1
 800458e:	d106      	bne.n	800459e <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004590:	2140      	movs	r1, #64	@ 0x40
 8004592:	4835      	ldr	r0, [pc, #212]	@ (8004668 <checkAktifCalisma+0x1e0>)
 8004594:	f006 f976 	bl	800a884 <HAL_GPIO_ReadPin>
 8004598:	4603      	mov	r3, r0
 800459a:	2b01      	cmp	r3, #1
 800459c:	d003      	beq.n	80045a6 <checkAktifCalisma+0x11e>
 800459e:	4b24      	ldr	r3, [pc, #144]	@ (8004630 <checkAktifCalisma+0x1a8>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d026      	beq.n	80045f4 <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 80045a6:	4b24      	ldr	r3, [pc, #144]	@ (8004638 <checkAktifCalisma+0x1b0>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	f083 0301 	eor.w	r3, r3, #1
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01f      	beq.n	80045f4 <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 80045b4:	4b1f      	ldr	r3, [pc, #124]	@ (8004634 <checkAktifCalisma+0x1ac>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	f083 0301 	eor.w	r3, r3, #1
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d018      	beq.n	80045f4 <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 80045c2:	4b20      	ldr	r3, [pc, #128]	@ (8004644 <checkAktifCalisma+0x1bc>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	f083 0301 	eor.w	r3, r3, #1
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d011      	beq.n	80045f4 <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 80045d0:	4b27      	ldr	r3, [pc, #156]	@ (8004670 <checkAktifCalisma+0x1e8>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	f083 0301 	eor.w	r3, r3, #1
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 80045de:	4b25      	ldr	r3, [pc, #148]	@ (8004674 <checkAktifCalisma+0x1ec>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	f083 0301 	eor.w	r3, r3, #1
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 80045ec:	4b10      	ldr	r3, [pc, #64]	@ (8004630 <checkAktifCalisma+0x1a8>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	701a      	strb	r2, [r3, #0]
 80045f2:	e002      	b.n	80045fa <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 80045f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004630 <checkAktifCalisma+0x1a8>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80045fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004630 <checkAktifCalisma+0x1a8>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d03c      	beq.n	800467c <checkAktifCalisma+0x1f4>
 8004602:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004606:	4818      	ldr	r0, [pc, #96]	@ (8004668 <checkAktifCalisma+0x1e0>)
 8004608:	f006 f93c 	bl	800a884 <HAL_GPIO_ReadPin>
 800460c:	4603      	mov	r3, r0
 800460e:	2b01      	cmp	r3, #1
 8004610:	d134      	bne.n	800467c <checkAktifCalisma+0x1f4>
 8004612:	4b19      	ldr	r3, [pc, #100]	@ (8004678 <checkAktifCalisma+0x1f0>)
 8004614:	781b      	ldrb	r3, [r3, #0]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d030      	beq.n	800467c <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800461a:	2201      	movs	r2, #1
 800461c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004620:	480d      	ldr	r0, [pc, #52]	@ (8004658 <checkAktifCalisma+0x1d0>)
 8004622:	f006 f946 	bl	800a8b2 <HAL_GPIO_WritePin>
 8004626:	e02f      	b.n	8004688 <checkAktifCalisma+0x200>
 8004628:	200010da 	.word	0x200010da
 800462c:	200010d9 	.word	0x200010d9
 8004630:	200010f1 	.word	0x200010f1
 8004634:	200010f2 	.word	0x200010f2
 8004638:	200010f4 	.word	0x200010f4
 800463c:	200010ec 	.word	0x200010ec
 8004640:	200010cf 	.word	0x200010cf
 8004644:	200010f3 	.word	0x200010f3
 8004648:	200010ce 	.word	0x200010ce
 800464c:	2000110d 	.word	0x2000110d
 8004650:	20001120 	.word	0x20001120
 8004654:	2000110e 	.word	0x2000110e
 8004658:	40010c00 	.word	0x40010c00
 800465c:	2000110f 	.word	0x2000110f
 8004660:	200010fb 	.word	0x200010fb
 8004664:	200010f8 	.word	0x200010f8
 8004668:	40011000 	.word	0x40011000
 800466c:	200010bf 	.word	0x200010bf
 8004670:	200010f6 	.word	0x200010f6
 8004674:	200010f7 	.word	0x200010f7
 8004678:	200010ca 	.word	0x200010ca
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800467c:	2200      	movs	r2, #0
 800467e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004682:	4865      	ldr	r0, [pc, #404]	@ (8004818 <checkAktifCalisma+0x390>)
 8004684:	f006 f915 	bl	800a8b2 <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004688:	4b64      	ldr	r3, [pc, #400]	@ (800481c <checkAktifCalisma+0x394>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d013      	beq.n	80046b8 <checkAktifCalisma+0x230>
 8004690:	4b63      	ldr	r3, [pc, #396]	@ (8004820 <checkAktifCalisma+0x398>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d007      	beq.n	80046a8 <checkAktifCalisma+0x220>
 8004698:	4b61      	ldr	r3, [pc, #388]	@ (8004820 <checkAktifCalisma+0x398>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b02      	cmp	r3, #2
 800469e:	d003      	beq.n	80046a8 <checkAktifCalisma+0x220>
 80046a0:	4b60      	ldr	r3, [pc, #384]	@ (8004824 <checkAktifCalisma+0x39c>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d107      	bne.n	80046b8 <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80046a8:	2201      	movs	r2, #1
 80046aa:	2104      	movs	r1, #4
 80046ac:	485a      	ldr	r0, [pc, #360]	@ (8004818 <checkAktifCalisma+0x390>)
 80046ae:	f006 f900 	bl	800a8b2 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 80046b2:	4b5d      	ldr	r3, [pc, #372]	@ (8004828 <checkAktifCalisma+0x3a0>)
 80046b4:	2201      	movs	r2, #1
 80046b6:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80046b8:	4b5b      	ldr	r3, [pc, #364]	@ (8004828 <checkAktifCalisma+0x3a0>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d033      	beq.n	8004728 <checkAktifCalisma+0x2a0>
 80046c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80046c4:	4854      	ldr	r0, [pc, #336]	@ (8004818 <checkAktifCalisma+0x390>)
 80046c6:	f006 f8dd 	bl	800a884 <HAL_GPIO_ReadPin>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d106      	bne.n	80046de <checkAktifCalisma+0x256>
 80046d0:	4b56      	ldr	r3, [pc, #344]	@ (800482c <checkAktifCalisma+0x3a4>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	f083 0301 	eor.w	r3, r3, #1
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <checkAktifCalisma+0x264>
 80046de:	2102      	movs	r1, #2
 80046e0:	4853      	ldr	r0, [pc, #332]	@ (8004830 <checkAktifCalisma+0x3a8>)
 80046e2:	f006 f8cf 	bl	800a884 <HAL_GPIO_ReadPin>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d11d      	bne.n	8004728 <checkAktifCalisma+0x2a0>
 80046ec:	4b51      	ldr	r3, [pc, #324]	@ (8004834 <checkAktifCalisma+0x3ac>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d103      	bne.n	80046fc <checkAktifCalisma+0x274>
 80046f4:	4b50      	ldr	r3, [pc, #320]	@ (8004838 <checkAktifCalisma+0x3b0>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d015      	beq.n	8004728 <checkAktifCalisma+0x2a0>
 80046fc:	4b4f      	ldr	r3, [pc, #316]	@ (800483c <checkAktifCalisma+0x3b4>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d011      	beq.n	8004728 <checkAktifCalisma+0x2a0>
 8004704:	4b4e      	ldr	r3, [pc, #312]	@ (8004840 <checkAktifCalisma+0x3b8>)
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00d      	beq.n	8004728 <checkAktifCalisma+0x2a0>
 800470c:	4b4d      	ldr	r3, [pc, #308]	@ (8004844 <checkAktifCalisma+0x3bc>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	f083 0301 	eor.w	r3, r3, #1
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d006      	beq.n	8004728 <checkAktifCalisma+0x2a0>
					timer2=millis;
 800471a:	4b4b      	ldr	r3, [pc, #300]	@ (8004848 <checkAktifCalisma+0x3c0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a4b      	ldr	r2, [pc, #300]	@ (800484c <checkAktifCalisma+0x3c4>)
 8004720:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 8004722:	4b48      	ldr	r3, [pc, #288]	@ (8004844 <checkAktifCalisma+0x3bc>)
 8004724:	2201      	movs	r2, #1
 8004726:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 8004728:	4b47      	ldr	r3, [pc, #284]	@ (8004848 <checkAktifCalisma+0x3c0>)
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	4b47      	ldr	r3, [pc, #284]	@ (800484c <checkAktifCalisma+0x3c4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	4a47      	ldr	r2, [pc, #284]	@ (8004850 <checkAktifCalisma+0x3c8>)
 8004734:	7812      	ldrb	r2, [r2, #0]
 8004736:	4293      	cmp	r3, r2
 8004738:	d303      	bcc.n	8004742 <checkAktifCalisma+0x2ba>
 800473a:	4b42      	ldr	r3, [pc, #264]	@ (8004844 <checkAktifCalisma+0x3bc>)
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d118      	bne.n	8004774 <checkAktifCalisma+0x2ec>
 8004742:	4b3c      	ldr	r3, [pc, #240]	@ (8004834 <checkAktifCalisma+0x3ac>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	f083 0301 	eor.w	r3, r3, #1
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b00      	cmp	r3, #0
 800474e:	d006      	beq.n	800475e <checkAktifCalisma+0x2d6>
 8004750:	4b39      	ldr	r3, [pc, #228]	@ (8004838 <checkAktifCalisma+0x3b0>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	f083 0301 	eor.w	r3, r3, #1
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <checkAktifCalisma+0x2ec>
 800475e:	4b37      	ldr	r3, [pc, #220]	@ (800483c <checkAktifCalisma+0x3b4>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	f083 0301 	eor.w	r3, r3, #1
 8004766:	b2db      	uxtb	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d103      	bne.n	8004774 <checkAktifCalisma+0x2ec>
 800476c:	4b34      	ldr	r3, [pc, #208]	@ (8004840 <checkAktifCalisma+0x3b8>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10a      	bne.n	800478a <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004774:	2200      	movs	r2, #0
 8004776:	2104      	movs	r1, #4
 8004778:	4827      	ldr	r0, [pc, #156]	@ (8004818 <checkAktifCalisma+0x390>)
 800477a:	f006 f89a 	bl	800a8b2 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 800477e:	4b2a      	ldr	r3, [pc, #168]	@ (8004828 <checkAktifCalisma+0x3a0>)
 8004780:	2200      	movs	r2, #0
 8004782:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 8004784:	4b2f      	ldr	r3, [pc, #188]	@ (8004844 <checkAktifCalisma+0x3bc>)
 8004786:	2200      	movs	r2, #0
 8004788:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 800478a:	4b32      	ldr	r3, [pc, #200]	@ (8004854 <checkAktifCalisma+0x3cc>)
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d102      	bne.n	8004798 <checkAktifCalisma+0x310>
					cerceveVar=1;
 8004792:	4b31      	ldr	r3, [pc, #196]	@ (8004858 <checkAktifCalisma+0x3d0>)
 8004794:	2201      	movs	r2, #1
 8004796:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004798:	4b2e      	ldr	r3, [pc, #184]	@ (8004854 <checkAktifCalisma+0x3cc>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d116      	bne.n	80047ce <checkAktifCalisma+0x346>
 80047a0:	4b2e      	ldr	r3, [pc, #184]	@ (800485c <checkAktifCalisma+0x3d4>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d112      	bne.n	80047ce <checkAktifCalisma+0x346>
 80047a8:	2101      	movs	r1, #1
 80047aa:	4821      	ldr	r0, [pc, #132]	@ (8004830 <checkAktifCalisma+0x3a8>)
 80047ac:	f006 f86a 	bl	800a884 <HAL_GPIO_ReadPin>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10b      	bne.n	80047ce <checkAktifCalisma+0x346>
 80047b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80047ba:	4817      	ldr	r0, [pc, #92]	@ (8004818 <checkAktifCalisma+0x390>)
 80047bc:	f006 f862 	bl	800a884 <HAL_GPIO_ReadPin>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d103      	bne.n	80047ce <checkAktifCalisma+0x346>
					cerceveVar=1;
 80047c6:	4b24      	ldr	r3, [pc, #144]	@ (8004858 <checkAktifCalisma+0x3d0>)
 80047c8:	2201      	movs	r2, #1
 80047ca:	701a      	strb	r2, [r3, #0]
 80047cc:	e011      	b.n	80047f2 <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80047ce:	4b21      	ldr	r3, [pc, #132]	@ (8004854 <checkAktifCalisma+0x3cc>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d10d      	bne.n	80047f2 <checkAktifCalisma+0x36a>
 80047d6:	2101      	movs	r1, #1
 80047d8:	4815      	ldr	r0, [pc, #84]	@ (8004830 <checkAktifCalisma+0x3a8>)
 80047da:	f006 f853 	bl	800a884 <HAL_GPIO_ReadPin>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d106      	bne.n	80047f2 <checkAktifCalisma+0x36a>
 80047e4:	4b1d      	ldr	r3, [pc, #116]	@ (800485c <checkAktifCalisma+0x3d4>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d102      	bne.n	80047f2 <checkAktifCalisma+0x36a>
					cerceveVar=0;
 80047ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004858 <checkAktifCalisma+0x3d0>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 80047f2:	4b18      	ldr	r3, [pc, #96]	@ (8004854 <checkAktifCalisma+0x3cc>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d135      	bne.n	8004866 <checkAktifCalisma+0x3de>
 80047fa:	4b18      	ldr	r3, [pc, #96]	@ (800485c <checkAktifCalisma+0x3d4>)
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d131      	bne.n	8004866 <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004802:	2101      	movs	r1, #1
 8004804:	480a      	ldr	r0, [pc, #40]	@ (8004830 <checkAktifCalisma+0x3a8>)
 8004806:	f006 f83d 	bl	800a884 <HAL_GPIO_ReadPin>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d127      	bne.n	8004860 <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 8004810:	4b11      	ldr	r3, [pc, #68]	@ (8004858 <checkAktifCalisma+0x3d0>)
 8004812:	2201      	movs	r2, #1
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	e026      	b.n	8004866 <checkAktifCalisma+0x3de>
 8004818:	40010c00 	.word	0x40010c00
 800481c:	200010f1 	.word	0x200010f1
 8004820:	200010cb 	.word	0x200010cb
 8004824:	200010cf 	.word	0x200010cf
 8004828:	200010f5 	.word	0x200010f5
 800482c:	200010f8 	.word	0x200010f8
 8004830:	40011000 	.word	0x40011000
 8004834:	2000110d 	.word	0x2000110d
 8004838:	20001120 	.word	0x20001120
 800483c:	2000110e 	.word	0x2000110e
 8004840:	200010bf 	.word	0x200010bf
 8004844:	200010ed 	.word	0x200010ed
 8004848:	20001094 	.word	0x20001094
 800484c:	200010a0 	.word	0x200010a0
 8004850:	200010d0 	.word	0x200010d0
 8004854:	200010c0 	.word	0x200010c0
 8004858:	20001112 	.word	0x20001112
 800485c:	200010bd 	.word	0x200010bd
					} else {
						cerceveVar=0;
 8004860:	4b7f      	ldr	r3, [pc, #508]	@ (8004a60 <checkAktifCalisma+0x5d8>)
 8004862:	2200      	movs	r2, #0
 8004864:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004866:	4b7f      	ldr	r3, [pc, #508]	@ (8004a64 <checkAktifCalisma+0x5dc>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d17c      	bne.n	8004968 <checkAktifCalisma+0x4e0>
 800486e:	4b7e      	ldr	r3, [pc, #504]	@ (8004a68 <checkAktifCalisma+0x5e0>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d078      	beq.n	8004968 <checkAktifCalisma+0x4e0>
 8004876:	4b7d      	ldr	r3, [pc, #500]	@ (8004a6c <checkAktifCalisma+0x5e4>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d074      	beq.n	8004968 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800487e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004882:	487b      	ldr	r0, [pc, #492]	@ (8004a70 <checkAktifCalisma+0x5e8>)
 8004884:	f005 fffe 	bl	800a884 <HAL_GPIO_ReadPin>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <checkAktifCalisma+0x40e>
 800488e:	4b79      	ldr	r3, [pc, #484]	@ (8004a74 <checkAktifCalisma+0x5ec>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d068      	beq.n	8004968 <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8004896:	4b72      	ldr	r3, [pc, #456]	@ (8004a60 <checkAktifCalisma+0x5d8>)
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d064      	beq.n	8004968 <checkAktifCalisma+0x4e0>
 800489e:	4b76      	ldr	r3, [pc, #472]	@ (8004a78 <checkAktifCalisma+0x5f0>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	f083 0301 	eor.w	r3, r3, #1
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d05d      	beq.n	8004968 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80048ac:	2104      	movs	r1, #4
 80048ae:	4873      	ldr	r0, [pc, #460]	@ (8004a7c <checkAktifCalisma+0x5f4>)
 80048b0:	f005 ffe8 	bl	800a884 <HAL_GPIO_ReadPin>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d003      	beq.n	80048c2 <checkAktifCalisma+0x43a>
 80048ba:	4b71      	ldr	r3, [pc, #452]	@ (8004a80 <checkAktifCalisma+0x5f8>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d152      	bne.n	8004968 <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80048c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80048c6:	486a      	ldr	r0, [pc, #424]	@ (8004a70 <checkAktifCalisma+0x5e8>)
 80048c8:	f005 ffdc 	bl	800a884 <HAL_GPIO_ReadPin>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d10e      	bne.n	80048f0 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80048d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80048d6:	4866      	ldr	r0, [pc, #408]	@ (8004a70 <checkAktifCalisma+0x5e8>)
 80048d8:	f005 ffd4 	bl	800a884 <HAL_GPIO_ReadPin>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d106      	bne.n	80048f0 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80048e2:	2140      	movs	r1, #64	@ 0x40
 80048e4:	4865      	ldr	r0, [pc, #404]	@ (8004a7c <checkAktifCalisma+0x5f4>)
 80048e6:	f005 ffcd 	bl	800a884 <HAL_GPIO_ReadPin>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d003      	beq.n	80048f8 <checkAktifCalisma+0x470>
 80048f0:	4b64      	ldr	r3, [pc, #400]	@ (8004a84 <checkAktifCalisma+0x5fc>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d037      	beq.n	8004968 <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 80048f8:	4b63      	ldr	r3, [pc, #396]	@ (8004a88 <checkAktifCalisma+0x600>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	f083 0301 	eor.w	r3, r3, #1
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d030      	beq.n	8004968 <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 8004906:	4b61      	ldr	r3, [pc, #388]	@ (8004a8c <checkAktifCalisma+0x604>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	f083 0301 	eor.w	r3, r3, #1
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d029      	beq.n	8004968 <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 8004914:	4b5e      	ldr	r3, [pc, #376]	@ (8004a90 <checkAktifCalisma+0x608>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	f083 0301 	eor.w	r3, r3, #1
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d022      	beq.n	8004968 <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 8004922:	4b5c      	ldr	r3, [pc, #368]	@ (8004a94 <checkAktifCalisma+0x60c>)
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	f083 0301 	eor.w	r3, r3, #1
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01b      	beq.n	8004968 <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 8004930:	4b59      	ldr	r3, [pc, #356]	@ (8004a98 <checkAktifCalisma+0x610>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	f083 0301 	eor.w	r3, r3, #1
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d014      	beq.n	8004968 <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 800493e:	4b57      	ldr	r3, [pc, #348]	@ (8004a9c <checkAktifCalisma+0x614>)
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	f083 0301 	eor.w	r3, r3, #1
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00d      	beq.n	8004968 <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800494c:	2201      	movs	r2, #1
 800494e:	2102      	movs	r1, #2
 8004950:	4847      	ldr	r0, [pc, #284]	@ (8004a70 <checkAktifCalisma+0x5e8>)
 8004952:	f005 ffae 	bl	800a8b2 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 8004956:	4b4b      	ldr	r3, [pc, #300]	@ (8004a84 <checkAktifCalisma+0x5fc>)
 8004958:	2201      	movs	r2, #1
 800495a:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 800495c:	4b50      	ldr	r3, [pc, #320]	@ (8004aa0 <checkAktifCalisma+0x618>)
 800495e:	2201      	movs	r2, #1
 8004960:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 8004962:	4b50      	ldr	r3, [pc, #320]	@ (8004aa4 <checkAktifCalisma+0x61c>)
 8004964:	2201      	movs	r2, #1
 8004966:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8004968:	4b46      	ldr	r3, [pc, #280]	@ (8004a84 <checkAktifCalisma+0x5fc>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d033      	beq.n	80049d8 <checkAktifCalisma+0x550>
 8004970:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004974:	483e      	ldr	r0, [pc, #248]	@ (8004a70 <checkAktifCalisma+0x5e8>)
 8004976:	f005 ff85 	bl	800a884 <HAL_GPIO_ReadPin>
 800497a:	4603      	mov	r3, r0
 800497c:	2b01      	cmp	r3, #1
 800497e:	d106      	bne.n	800498e <checkAktifCalisma+0x506>
 8004980:	4b3c      	ldr	r3, [pc, #240]	@ (8004a74 <checkAktifCalisma+0x5ec>)
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	f083 0301 	eor.w	r3, r3, #1
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10a      	bne.n	80049a4 <checkAktifCalisma+0x51c>
 800498e:	2104      	movs	r1, #4
 8004990:	483a      	ldr	r0, [pc, #232]	@ (8004a7c <checkAktifCalisma+0x5f4>)
 8004992:	f005 ff77 	bl	800a884 <HAL_GPIO_ReadPin>
 8004996:	4603      	mov	r3, r0
 8004998:	2b01      	cmp	r3, #1
 800499a:	d11d      	bne.n	80049d8 <checkAktifCalisma+0x550>
 800499c:	4b38      	ldr	r3, [pc, #224]	@ (8004a80 <checkAktifCalisma+0x5f8>)
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d019      	beq.n	80049d8 <checkAktifCalisma+0x550>
 80049a4:	4b30      	ldr	r3, [pc, #192]	@ (8004a68 <checkAktifCalisma+0x5e0>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d015      	beq.n	80049d8 <checkAktifCalisma+0x550>
 80049ac:	4b2f      	ldr	r3, [pc, #188]	@ (8004a6c <checkAktifCalisma+0x5e4>)
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d011      	beq.n	80049d8 <checkAktifCalisma+0x550>
 80049b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004a60 <checkAktifCalisma+0x5d8>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00d      	beq.n	80049d8 <checkAktifCalisma+0x550>
 80049bc:	4b3a      	ldr	r3, [pc, #232]	@ (8004aa8 <checkAktifCalisma+0x620>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	f083 0301 	eor.w	r3, r3, #1
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d006      	beq.n	80049d8 <checkAktifCalisma+0x550>
					timer2=millis;
 80049ca:	4b38      	ldr	r3, [pc, #224]	@ (8004aac <checkAktifCalisma+0x624>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a38      	ldr	r2, [pc, #224]	@ (8004ab0 <checkAktifCalisma+0x628>)
 80049d0:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 80049d2:	4b35      	ldr	r3, [pc, #212]	@ (8004aa8 <checkAktifCalisma+0x620>)
 80049d4:	2201      	movs	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80049d8:	4b34      	ldr	r3, [pc, #208]	@ (8004aac <checkAktifCalisma+0x624>)
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	4b34      	ldr	r3, [pc, #208]	@ (8004ab0 <checkAktifCalisma+0x628>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	4a34      	ldr	r2, [pc, #208]	@ (8004ab4 <checkAktifCalisma+0x62c>)
 80049e4:	7812      	ldrb	r2, [r2, #0]
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d303      	bcc.n	80049f2 <checkAktifCalisma+0x56a>
 80049ea:	4b2f      	ldr	r3, [pc, #188]	@ (8004aa8 <checkAktifCalisma+0x620>)
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d114      	bne.n	8004a1c <checkAktifCalisma+0x594>
 80049f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004a68 <checkAktifCalisma+0x5e0>)
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	f083 0301 	eor.w	r3, r3, #1
 80049fa:	b2db      	uxtb	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d10d      	bne.n	8004a1c <checkAktifCalisma+0x594>
 8004a00:	4b1a      	ldr	r3, [pc, #104]	@ (8004a6c <checkAktifCalisma+0x5e4>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	f083 0301 	eor.w	r3, r3, #1
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <checkAktifCalisma+0x594>
 8004a0e:	4b14      	ldr	r3, [pc, #80]	@ (8004a60 <checkAktifCalisma+0x5d8>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	f083 0301 	eor.w	r3, r3, #1
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00a      	beq.n	8004a32 <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2102      	movs	r1, #2
 8004a20:	4813      	ldr	r0, [pc, #76]	@ (8004a70 <checkAktifCalisma+0x5e8>)
 8004a22:	f005 ff46 	bl	800a8b2 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 8004a26:	4b17      	ldr	r3, [pc, #92]	@ (8004a84 <checkAktifCalisma+0x5fc>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8004a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8004aa8 <checkAktifCalisma+0x620>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8004a32:	4b14      	ldr	r3, [pc, #80]	@ (8004a84 <checkAktifCalisma+0x5fc>)
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d040      	beq.n	8004abc <checkAktifCalisma+0x634>
 8004a3a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a3e:	480f      	ldr	r0, [pc, #60]	@ (8004a7c <checkAktifCalisma+0x5f4>)
 8004a40:	f005 ff20 	bl	800a884 <HAL_GPIO_ReadPin>
 8004a44:	4603      	mov	r3, r0
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d138      	bne.n	8004abc <checkAktifCalisma+0x634>
 8004a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ab8 <checkAktifCalisma+0x630>)
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d034      	beq.n	8004abc <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8004a52:	2201      	movs	r2, #1
 8004a54:	2101      	movs	r1, #1
 8004a56:	4806      	ldr	r0, [pc, #24]	@ (8004a70 <checkAktifCalisma+0x5e8>)
 8004a58:	f005 ff2b 	bl	800a8b2 <HAL_GPIO_WritePin>
 8004a5c:	e033      	b.n	8004ac6 <checkAktifCalisma+0x63e>
 8004a5e:	bf00      	nop
 8004a60:	20001112 	.word	0x20001112
 8004a64:	200010d9 	.word	0x200010d9
 8004a68:	2000110d 	.word	0x2000110d
 8004a6c:	2000110e 	.word	0x2000110e
 8004a70:	40010c00 	.word	0x40010c00
 8004a74:	200010f9 	.word	0x200010f9
 8004a78:	2000110c 	.word	0x2000110c
 8004a7c:	40011000 	.word	0x40011000
 8004a80:	200010c2 	.word	0x200010c2
 8004a84:	200010f4 	.word	0x200010f4
 8004a88:	200010f1 	.word	0x200010f1
 8004a8c:	200010f5 	.word	0x200010f5
 8004a90:	200010f2 	.word	0x200010f2
 8004a94:	200010f3 	.word	0x200010f3
 8004a98:	200010f6 	.word	0x200010f6
 8004a9c:	200010f7 	.word	0x200010f7
 8004aa0:	200010fc 	.word	0x200010fc
 8004aa4:	2000111c 	.word	0x2000111c
 8004aa8:	200010ec 	.word	0x200010ec
 8004aac:	20001094 	.word	0x20001094
 8004ab0:	200010a0 	.word	0x200010a0
 8004ab4:	200010d1 	.word	0x200010d1
 8004ab8:	200010c1 	.word	0x200010c1
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004abc:	2200      	movs	r2, #0
 8004abe:	2101      	movs	r1, #1
 8004ac0:	4836      	ldr	r0, [pc, #216]	@ (8004b9c <checkAktifCalisma+0x714>)
 8004ac2:	f005 fef6 	bl	800a8b2 <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8004ac6:	4b36      	ldr	r3, [pc, #216]	@ (8004ba0 <checkAktifCalisma+0x718>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f040 8080 	bne.w	8004bd0 <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004ad0:	4b34      	ldr	r3, [pc, #208]	@ (8004ba4 <checkAktifCalisma+0x71c>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d003      	beq.n	8004ae0 <checkAktifCalisma+0x658>
 8004ad8:	4b32      	ldr	r3, [pc, #200]	@ (8004ba4 <checkAktifCalisma+0x71c>)
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d177      	bne.n	8004bd0 <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8004ae0:	4b31      	ldr	r3, [pc, #196]	@ (8004ba8 <checkAktifCalisma+0x720>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d073      	beq.n	8004bd0 <checkAktifCalisma+0x748>
 8004ae8:	4b30      	ldr	r3, [pc, #192]	@ (8004bac <checkAktifCalisma+0x724>)
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d06f      	beq.n	8004bd0 <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8004af0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004af4:	4829      	ldr	r0, [pc, #164]	@ (8004b9c <checkAktifCalisma+0x714>)
 8004af6:	f005 fec5 	bl	800a884 <HAL_GPIO_ReadPin>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d167      	bne.n	8004bd0 <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8004b00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004b04:	482a      	ldr	r0, [pc, #168]	@ (8004bb0 <checkAktifCalisma+0x728>)
 8004b06:	f005 febd 	bl	800a884 <HAL_GPIO_ReadPin>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <checkAktifCalisma+0x690>
 8004b10:	4b28      	ldr	r3, [pc, #160]	@ (8004bb4 <checkAktifCalisma+0x72c>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d15b      	bne.n	8004bd0 <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8004b18:	2140      	movs	r1, #64	@ 0x40
 8004b1a:	4825      	ldr	r0, [pc, #148]	@ (8004bb0 <checkAktifCalisma+0x728>)
 8004b1c:	f005 feb2 	bl	800a884 <HAL_GPIO_ReadPin>
 8004b20:	4603      	mov	r3, r0
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d10f      	bne.n	8004b46 <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004b26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004b2a:	481c      	ldr	r0, [pc, #112]	@ (8004b9c <checkAktifCalisma+0x714>)
 8004b2c:	f005 feaa 	bl	800a884 <HAL_GPIO_ReadPin>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d107      	bne.n	8004b46 <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8004b36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004b3a:	4818      	ldr	r0, [pc, #96]	@ (8004b9c <checkAktifCalisma+0x714>)
 8004b3c:	f005 fea2 	bl	800a884 <HAL_GPIO_ReadPin>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d003      	beq.n	8004b4e <checkAktifCalisma+0x6c6>
 8004b46:	4b1c      	ldr	r3, [pc, #112]	@ (8004bb8 <checkAktifCalisma+0x730>)
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d040      	beq.n	8004bd0 <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 8004b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bbc <checkAktifCalisma+0x734>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	f083 0301 	eor.w	r3, r3, #1
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d039      	beq.n	8004bd0 <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 8004b5c:	4b18      	ldr	r3, [pc, #96]	@ (8004bc0 <checkAktifCalisma+0x738>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	f083 0301 	eor.w	r3, r3, #1
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d032      	beq.n	8004bd0 <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 8004b6a:	4b16      	ldr	r3, [pc, #88]	@ (8004bc4 <checkAktifCalisma+0x73c>)
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	f083 0301 	eor.w	r3, r3, #1
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d02b      	beq.n	8004bd0 <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8004b78:	4b13      	ldr	r3, [pc, #76]	@ (8004bc8 <checkAktifCalisma+0x740>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	f083 0301 	eor.w	r3, r3, #1
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d024      	beq.n	8004bd0 <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 8004b86:	4b11      	ldr	r3, [pc, #68]	@ (8004bcc <checkAktifCalisma+0x744>)
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	f083 0301 	eor.w	r3, r3, #1
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01d      	beq.n	8004bd0 <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8004b94:	4b08      	ldr	r3, [pc, #32]	@ (8004bb8 <checkAktifCalisma+0x730>)
 8004b96:	2201      	movs	r2, #1
 8004b98:	701a      	strb	r2, [r3, #0]
 8004b9a:	e01c      	b.n	8004bd6 <checkAktifCalisma+0x74e>
 8004b9c:	40010c00 	.word	0x40010c00
 8004ba0:	200010d9 	.word	0x200010d9
 8004ba4:	200010cb 	.word	0x200010cb
 8004ba8:	2000110d 	.word	0x2000110d
 8004bac:	2000110e 	.word	0x2000110e
 8004bb0:	40011000 	.word	0x40011000
 8004bb4:	200010cc 	.word	0x200010cc
 8004bb8:	200010f2 	.word	0x200010f2
 8004bbc:	200010f1 	.word	0x200010f1
 8004bc0:	200010f5 	.word	0x200010f5
 8004bc4:	200010f4 	.word	0x200010f4
 8004bc8:	200010f3 	.word	0x200010f3
 8004bcc:	200010f7 	.word	0x200010f7
				} else {
					devmotoryukaricalisiyor=0;
 8004bd0:	4b64      	ldr	r3, [pc, #400]	@ (8004d64 <checkAktifCalisma+0x8dc>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8004bd6:	4b63      	ldr	r3, [pc, #396]	@ (8004d64 <checkAktifCalisma+0x8dc>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d007      	beq.n	8004bee <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8004bde:	2201      	movs	r2, #1
 8004be0:	2120      	movs	r1, #32
 8004be2:	4861      	ldr	r0, [pc, #388]	@ (8004d68 <checkAktifCalisma+0x8e0>)
 8004be4:	f005 fe65 	bl	800a8b2 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8004be8:	4b60      	ldr	r3, [pc, #384]	@ (8004d6c <checkAktifCalisma+0x8e4>)
 8004bea:	2201      	movs	r2, #1
 8004bec:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8004bee:	4b5f      	ldr	r3, [pc, #380]	@ (8004d6c <checkAktifCalisma+0x8e4>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d025      	beq.n	8004c42 <checkAktifCalisma+0x7ba>
 8004bf6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004bfa:	485d      	ldr	r0, [pc, #372]	@ (8004d70 <checkAktifCalisma+0x8e8>)
 8004bfc:	f005 fe42 	bl	800a884 <HAL_GPIO_ReadPin>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d007      	beq.n	8004c16 <checkAktifCalisma+0x78e>
 8004c06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004c0a:	4857      	ldr	r0, [pc, #348]	@ (8004d68 <checkAktifCalisma+0x8e0>)
 8004c0c:	f005 fe3a 	bl	800a884 <HAL_GPIO_ReadPin>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d115      	bne.n	8004c42 <checkAktifCalisma+0x7ba>
 8004c16:	4b57      	ldr	r3, [pc, #348]	@ (8004d74 <checkAktifCalisma+0x8ec>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d011      	beq.n	8004c42 <checkAktifCalisma+0x7ba>
 8004c1e:	4b56      	ldr	r3, [pc, #344]	@ (8004d78 <checkAktifCalisma+0x8f0>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00d      	beq.n	8004c42 <checkAktifCalisma+0x7ba>
 8004c26:	4b55      	ldr	r3, [pc, #340]	@ (8004d7c <checkAktifCalisma+0x8f4>)
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	f083 0301 	eor.w	r3, r3, #1
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d006      	beq.n	8004c42 <checkAktifCalisma+0x7ba>
					timer2=millis;
 8004c34:	4b52      	ldr	r3, [pc, #328]	@ (8004d80 <checkAktifCalisma+0x8f8>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a52      	ldr	r2, [pc, #328]	@ (8004d84 <checkAktifCalisma+0x8fc>)
 8004c3a:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8004c3c:	4b4f      	ldr	r3, [pc, #316]	@ (8004d7c <checkAktifCalisma+0x8f4>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004c42:	4b4f      	ldr	r3, [pc, #316]	@ (8004d80 <checkAktifCalisma+0x8f8>)
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4b4f      	ldr	r3, [pc, #316]	@ (8004d84 <checkAktifCalisma+0x8fc>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	4a4e      	ldr	r2, [pc, #312]	@ (8004d88 <checkAktifCalisma+0x900>)
 8004c4e:	7812      	ldrb	r2, [r2, #0]
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d303      	bcc.n	8004c5c <checkAktifCalisma+0x7d4>
 8004c54:	4b49      	ldr	r3, [pc, #292]	@ (8004d7c <checkAktifCalisma+0x8f4>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10d      	bne.n	8004c78 <checkAktifCalisma+0x7f0>
 8004c5c:	4b45      	ldr	r3, [pc, #276]	@ (8004d74 <checkAktifCalisma+0x8ec>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	f083 0301 	eor.w	r3, r3, #1
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d106      	bne.n	8004c78 <checkAktifCalisma+0x7f0>
 8004c6a:	4b43      	ldr	r3, [pc, #268]	@ (8004d78 <checkAktifCalisma+0x8f0>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	f083 0301 	eor.w	r3, r3, #1
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00a      	beq.n	8004c8e <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004c78:	2200      	movs	r2, #0
 8004c7a:	2120      	movs	r1, #32
 8004c7c:	483a      	ldr	r0, [pc, #232]	@ (8004d68 <checkAktifCalisma+0x8e0>)
 8004c7e:	f005 fe18 	bl	800a8b2 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8004c82:	4b3a      	ldr	r3, [pc, #232]	@ (8004d6c <checkAktifCalisma+0x8e4>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8004c88:	4b3c      	ldr	r3, [pc, #240]	@ (8004d7c <checkAktifCalisma+0x8f4>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8004c8e:	4b3f      	ldr	r3, [pc, #252]	@ (8004d8c <checkAktifCalisma+0x904>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f040 8088 	bne.w	8004da8 <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004c98:	4b3d      	ldr	r3, [pc, #244]	@ (8004d90 <checkAktifCalisma+0x908>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d003      	beq.n	8004ca8 <checkAktifCalisma+0x820>
 8004ca0:	4b3b      	ldr	r3, [pc, #236]	@ (8004d90 <checkAktifCalisma+0x908>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d17f      	bne.n	8004da8 <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8004ca8:	4b32      	ldr	r3, [pc, #200]	@ (8004d74 <checkAktifCalisma+0x8ec>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d07b      	beq.n	8004da8 <checkAktifCalisma+0x920>
 8004cb0:	4b31      	ldr	r3, [pc, #196]	@ (8004d78 <checkAktifCalisma+0x8f0>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d077      	beq.n	8004da8 <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004cb8:	2140      	movs	r1, #64	@ 0x40
 8004cba:	482b      	ldr	r0, [pc, #172]	@ (8004d68 <checkAktifCalisma+0x8e0>)
 8004cbc:	f005 fde2 	bl	800a884 <HAL_GPIO_ReadPin>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d170      	bne.n	8004da8 <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8004cc6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004cca:	4827      	ldr	r0, [pc, #156]	@ (8004d68 <checkAktifCalisma+0x8e0>)
 8004ccc:	f005 fdda 	bl	800a884 <HAL_GPIO_ReadPin>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <checkAktifCalisma+0x856>
 8004cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8004d94 <checkAktifCalisma+0x90c>)
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d164      	bne.n	8004da8 <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004cde:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ce2:	4823      	ldr	r0, [pc, #140]	@ (8004d70 <checkAktifCalisma+0x8e8>)
 8004ce4:	f005 fdce 	bl	800a884 <HAL_GPIO_ReadPin>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d10f      	bne.n	8004d0e <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004cee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004cf2:	481f      	ldr	r0, [pc, #124]	@ (8004d70 <checkAktifCalisma+0x8e8>)
 8004cf4:	f005 fdc6 	bl	800a884 <HAL_GPIO_ReadPin>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d107      	bne.n	8004d0e <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8004cfe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004d02:	481b      	ldr	r0, [pc, #108]	@ (8004d70 <checkAktifCalisma+0x8e8>)
 8004d04:	f005 fdbe 	bl	800a884 <HAL_GPIO_ReadPin>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d003      	beq.n	8004d16 <checkAktifCalisma+0x88e>
 8004d0e:	4b22      	ldr	r3, [pc, #136]	@ (8004d98 <checkAktifCalisma+0x910>)
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d048      	beq.n	8004da8 <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 8004d16:	4b21      	ldr	r3, [pc, #132]	@ (8004d9c <checkAktifCalisma+0x914>)
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	f083 0301 	eor.w	r3, r3, #1
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d041      	beq.n	8004da8 <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8004d24:	4b1e      	ldr	r3, [pc, #120]	@ (8004da0 <checkAktifCalisma+0x918>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	f083 0301 	eor.w	r3, r3, #1
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d03a      	beq.n	8004da8 <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8004d32:	4b1c      	ldr	r3, [pc, #112]	@ (8004da4 <checkAktifCalisma+0x91c>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	f083 0301 	eor.w	r3, r3, #1
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d033      	beq.n	8004da8 <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8004d40:	4b0a      	ldr	r3, [pc, #40]	@ (8004d6c <checkAktifCalisma+0x8e4>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	f083 0301 	eor.w	r3, r3, #1
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d02c      	beq.n	8004da8 <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 8004d4e:	4b05      	ldr	r3, [pc, #20]	@ (8004d64 <checkAktifCalisma+0x8dc>)
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	f083 0301 	eor.w	r3, r3, #1
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d025      	beq.n	8004da8 <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 8004d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8004d98 <checkAktifCalisma+0x910>)
 8004d5e:	2201      	movs	r2, #1
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	e024      	b.n	8004dae <checkAktifCalisma+0x926>
 8004d64:	200010f2 	.word	0x200010f2
 8004d68:	40011000 	.word	0x40011000
 8004d6c:	200010f6 	.word	0x200010f6
 8004d70:	40010c00 	.word	0x40010c00
 8004d74:	2000110d 	.word	0x2000110d
 8004d78:	2000110e 	.word	0x2000110e
 8004d7c:	200010ee 	.word	0x200010ee
 8004d80:	20001094 	.word	0x20001094
 8004d84:	200010a0 	.word	0x200010a0
 8004d88:	200010d2 	.word	0x200010d2
 8004d8c:	200010d9 	.word	0x200010d9
 8004d90:	200010cb 	.word	0x200010cb
 8004d94:	200010cd 	.word	0x200010cd
 8004d98:	200010f3 	.word	0x200010f3
 8004d9c:	200010f1 	.word	0x200010f1
 8004da0:	200010f5 	.word	0x200010f5
 8004da4:	200010f4 	.word	0x200010f4
				} else {
					devmotorasagicalisiyor=0;
 8004da8:	4b96      	ldr	r3, [pc, #600]	@ (8005004 <checkAktifCalisma+0xb7c>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8004dae:	4b95      	ldr	r3, [pc, #596]	@ (8005004 <checkAktifCalisma+0xb7c>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d007      	beq.n	8004dc6 <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004db6:	2201      	movs	r2, #1
 8004db8:	2110      	movs	r1, #16
 8004dba:	4893      	ldr	r0, [pc, #588]	@ (8005008 <checkAktifCalisma+0xb80>)
 8004dbc:	f005 fd79 	bl	800a8b2 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8004dc0:	4b92      	ldr	r3, [pc, #584]	@ (800500c <checkAktifCalisma+0xb84>)
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004dc6:	4b91      	ldr	r3, [pc, #580]	@ (800500c <checkAktifCalisma+0xb84>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d024      	beq.n	8004e18 <checkAktifCalisma+0x990>
 8004dce:	2140      	movs	r1, #64	@ 0x40
 8004dd0:	488d      	ldr	r0, [pc, #564]	@ (8005008 <checkAktifCalisma+0xb80>)
 8004dd2:	f005 fd57 	bl	800a884 <HAL_GPIO_ReadPin>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d007      	beq.n	8004dec <checkAktifCalisma+0x964>
 8004ddc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004de0:	4889      	ldr	r0, [pc, #548]	@ (8005008 <checkAktifCalisma+0xb80>)
 8004de2:	f005 fd4f 	bl	800a884 <HAL_GPIO_ReadPin>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d115      	bne.n	8004e18 <checkAktifCalisma+0x990>
 8004dec:	4b88      	ldr	r3, [pc, #544]	@ (8005010 <checkAktifCalisma+0xb88>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d011      	beq.n	8004e18 <checkAktifCalisma+0x990>
 8004df4:	4b87      	ldr	r3, [pc, #540]	@ (8005014 <checkAktifCalisma+0xb8c>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00d      	beq.n	8004e18 <checkAktifCalisma+0x990>
 8004dfc:	4b86      	ldr	r3, [pc, #536]	@ (8005018 <checkAktifCalisma+0xb90>)
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	f083 0301 	eor.w	r3, r3, #1
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d006      	beq.n	8004e18 <checkAktifCalisma+0x990>
					timer2=millis;
 8004e0a:	4b84      	ldr	r3, [pc, #528]	@ (800501c <checkAktifCalisma+0xb94>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a84      	ldr	r2, [pc, #528]	@ (8005020 <checkAktifCalisma+0xb98>)
 8004e10:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8004e12:	4b81      	ldr	r3, [pc, #516]	@ (8005018 <checkAktifCalisma+0xb90>)
 8004e14:	2201      	movs	r2, #1
 8004e16:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004e18:	4b80      	ldr	r3, [pc, #512]	@ (800501c <checkAktifCalisma+0xb94>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	4b80      	ldr	r3, [pc, #512]	@ (8005020 <checkAktifCalisma+0xb98>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	4a80      	ldr	r2, [pc, #512]	@ (8005024 <checkAktifCalisma+0xb9c>)
 8004e24:	7812      	ldrb	r2, [r2, #0]
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d303      	bcc.n	8004e32 <checkAktifCalisma+0x9aa>
 8004e2a:	4b7b      	ldr	r3, [pc, #492]	@ (8005018 <checkAktifCalisma+0xb90>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10d      	bne.n	8004e4e <checkAktifCalisma+0x9c6>
 8004e32:	4b77      	ldr	r3, [pc, #476]	@ (8005010 <checkAktifCalisma+0xb88>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	f083 0301 	eor.w	r3, r3, #1
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d106      	bne.n	8004e4e <checkAktifCalisma+0x9c6>
 8004e40:	4b74      	ldr	r3, [pc, #464]	@ (8005014 <checkAktifCalisma+0xb8c>)
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	f083 0301 	eor.w	r3, r3, #1
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004e4e:	2200      	movs	r2, #0
 8004e50:	2110      	movs	r1, #16
 8004e52:	486d      	ldr	r0, [pc, #436]	@ (8005008 <checkAktifCalisma+0xb80>)
 8004e54:	f005 fd2d 	bl	800a8b2 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8004e58:	4b6c      	ldr	r3, [pc, #432]	@ (800500c <checkAktifCalisma+0xb84>)
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8004e5e:	4b6e      	ldr	r3, [pc, #440]	@ (8005018 <checkAktifCalisma+0xb90>)
 8004e60:	2200      	movs	r2, #0
 8004e62:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004e64:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004e68:	486f      	ldr	r0, [pc, #444]	@ (8005028 <checkAktifCalisma+0xba0>)
 8004e6a:	f005 fd0b 	bl	800a884 <HAL_GPIO_ReadPin>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d120      	bne.n	8004eb6 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004e74:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004e78:	486b      	ldr	r0, [pc, #428]	@ (8005028 <checkAktifCalisma+0xba0>)
 8004e7a:	f005 fd03 	bl	800a884 <HAL_GPIO_ReadPin>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d118      	bne.n	8004eb6 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004e84:	2104      	movs	r1, #4
 8004e86:	4868      	ldr	r0, [pc, #416]	@ (8005028 <checkAktifCalisma+0xba0>)
 8004e88:	f005 fcfc 	bl	800a884 <HAL_GPIO_ReadPin>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d111      	bne.n	8004eb6 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004e92:	2102      	movs	r1, #2
 8004e94:	4864      	ldr	r0, [pc, #400]	@ (8005028 <checkAktifCalisma+0xba0>)
 8004e96:	f005 fcf5 	bl	800a884 <HAL_GPIO_ReadPin>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10a      	bne.n	8004eb6 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004ea0:	2101      	movs	r1, #1
 8004ea2:	4861      	ldr	r0, [pc, #388]	@ (8005028 <checkAktifCalisma+0xba0>)
 8004ea4:	f005 fcee 	bl	800a884 <HAL_GPIO_ReadPin>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d103      	bne.n	8004eb6 <checkAktifCalisma+0xa2e>
					makineStop=1;
 8004eae:	4b5f      	ldr	r3, [pc, #380]	@ (800502c <checkAktifCalisma+0xba4>)
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	701a      	strb	r2, [r3, #0]
 8004eb4:	e002      	b.n	8004ebc <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 8004eb6:	4b5d      	ldr	r3, [pc, #372]	@ (800502c <checkAktifCalisma+0xba4>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004ebc:	4b5c      	ldr	r3, [pc, #368]	@ (8005030 <checkAktifCalisma+0xba8>)
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d144      	bne.n	8004f4e <checkAktifCalisma+0xac6>
 8004ec4:	4b5b      	ldr	r3, [pc, #364]	@ (8005034 <checkAktifCalisma+0xbac>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d003      	beq.n	8004ed4 <checkAktifCalisma+0xa4c>
 8004ecc:	4b59      	ldr	r3, [pc, #356]	@ (8005034 <checkAktifCalisma+0xbac>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d13c      	bne.n	8004f4e <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004ed4:	2180      	movs	r1, #128	@ 0x80
 8004ed6:	484c      	ldr	r0, [pc, #304]	@ (8005008 <checkAktifCalisma+0xb80>)
 8004ed8:	f005 fcd4 	bl	800a884 <HAL_GPIO_ReadPin>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d103      	bne.n	8004eea <checkAktifCalisma+0xa62>
 8004ee2:	4b55      	ldr	r3, [pc, #340]	@ (8005038 <checkAktifCalisma+0xbb0>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00b      	beq.n	8004f02 <checkAktifCalisma+0xa7a>
 8004eea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004eee:	484e      	ldr	r0, [pc, #312]	@ (8005028 <checkAktifCalisma+0xba0>)
 8004ef0:	f005 fcc8 	bl	800a884 <HAL_GPIO_ReadPin>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d129      	bne.n	8004f4e <checkAktifCalisma+0xac6>
 8004efa:	4b4f      	ldr	r3, [pc, #316]	@ (8005038 <checkAktifCalisma+0xbb0>)
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d125      	bne.n	8004f4e <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004f02:	2104      	movs	r1, #4
 8004f04:	4840      	ldr	r0, [pc, #256]	@ (8005008 <checkAktifCalisma+0xb80>)
 8004f06:	f005 fcbd 	bl	800a884 <HAL_GPIO_ReadPin>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d003      	beq.n	8004f18 <checkAktifCalisma+0xa90>
 8004f10:	4b4a      	ldr	r3, [pc, #296]	@ (800503c <checkAktifCalisma+0xbb4>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d11a      	bne.n	8004f4e <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004f18:	2102      	movs	r1, #2
 8004f1a:	483b      	ldr	r0, [pc, #236]	@ (8005008 <checkAktifCalisma+0xb80>)
 8004f1c:	f005 fcb2 	bl	800a884 <HAL_GPIO_ReadPin>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d113      	bne.n	8004f4e <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 8004f26:	4b46      	ldr	r3, [pc, #280]	@ (8005040 <checkAktifCalisma+0xbb8>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	f083 0301 	eor.w	r3, r3, #1
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00c      	beq.n	8004f4e <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 8004f34:	4b3d      	ldr	r3, [pc, #244]	@ (800502c <checkAktifCalisma+0xba4>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d008      	beq.n	8004f4e <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 8004f3c:	4b41      	ldr	r3, [pc, #260]	@ (8005044 <checkAktifCalisma+0xbbc>)
 8004f3e:	2201      	movs	r2, #1
 8004f40:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004f42:	4b36      	ldr	r3, [pc, #216]	@ (800501c <checkAktifCalisma+0xb94>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a40      	ldr	r2, [pc, #256]	@ (8005048 <checkAktifCalisma+0xbc0>)
 8004f48:	6013      	str	r3, [r2, #0]
					bekle();
 8004f4a:	f7ff f901 	bl	8004150 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8004f4e:	4b33      	ldr	r3, [pc, #204]	@ (800501c <checkAktifCalisma+0xb94>)
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	4b3d      	ldr	r3, [pc, #244]	@ (8005048 <checkAktifCalisma+0xbc0>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	4a3c      	ldr	r2, [pc, #240]	@ (800504c <checkAktifCalisma+0xbc4>)
 8004f5a:	7812      	ldrb	r2, [r2, #0]
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d211      	bcs.n	8004f84 <checkAktifCalisma+0xafc>
 8004f60:	2104      	movs	r1, #4
 8004f62:	4829      	ldr	r0, [pc, #164]	@ (8005008 <checkAktifCalisma+0xb80>)
 8004f64:	f005 fc8e 	bl	800a884 <HAL_GPIO_ReadPin>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <checkAktifCalisma+0xafc>
 8004f6e:	4b33      	ldr	r3, [pc, #204]	@ (800503c <checkAktifCalisma+0xbb4>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d006      	beq.n	8004f84 <checkAktifCalisma+0xafc>
 8004f76:	4b2d      	ldr	r3, [pc, #180]	@ (800502c <checkAktifCalisma+0xba4>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	f083 0301 	eor.w	r3, r3, #1
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d002      	beq.n	8004f8a <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 8004f84:	4b2f      	ldr	r3, [pc, #188]	@ (8005044 <checkAktifCalisma+0xbbc>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004f8a:	4b29      	ldr	r3, [pc, #164]	@ (8005030 <checkAktifCalisma+0xba8>)
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d160      	bne.n	8005054 <checkAktifCalisma+0xbcc>
 8004f92:	4b28      	ldr	r3, [pc, #160]	@ (8005034 <checkAktifCalisma+0xbac>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d003      	beq.n	8004fa2 <checkAktifCalisma+0xb1a>
 8004f9a:	4b26      	ldr	r3, [pc, #152]	@ (8005034 <checkAktifCalisma+0xbac>)
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	2b03      	cmp	r3, #3
 8004fa0:	d158      	bne.n	8005054 <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004fa2:	2104      	movs	r1, #4
 8004fa4:	4818      	ldr	r0, [pc, #96]	@ (8005008 <checkAktifCalisma+0xb80>)
 8004fa6:	f005 fc6d 	bl	800a884 <HAL_GPIO_ReadPin>
 8004faa:	4603      	mov	r3, r0
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d003      	beq.n	8004fb8 <checkAktifCalisma+0xb30>
 8004fb0:	4b22      	ldr	r3, [pc, #136]	@ (800503c <checkAktifCalisma+0xbb4>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d14d      	bne.n	8005054 <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004fb8:	2102      	movs	r1, #2
 8004fba:	4813      	ldr	r0, [pc, #76]	@ (8005008 <checkAktifCalisma+0xb80>)
 8004fbc:	f005 fc62 	bl	800a884 <HAL_GPIO_ReadPin>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d146      	bne.n	8005054 <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004fc6:	2180      	movs	r1, #128	@ 0x80
 8004fc8:	480f      	ldr	r0, [pc, #60]	@ (8005008 <checkAktifCalisma+0xb80>)
 8004fca:	f005 fc5b 	bl	800a884 <HAL_GPIO_ReadPin>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d103      	bne.n	8004fdc <checkAktifCalisma+0xb54>
 8004fd4:	4b18      	ldr	r3, [pc, #96]	@ (8005038 <checkAktifCalisma+0xbb0>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00b      	beq.n	8004ff4 <checkAktifCalisma+0xb6c>
 8004fdc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004fe0:	4811      	ldr	r0, [pc, #68]	@ (8005028 <checkAktifCalisma+0xba0>)
 8004fe2:	f005 fc4f 	bl	800a884 <HAL_GPIO_ReadPin>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d133      	bne.n	8005054 <checkAktifCalisma+0xbcc>
 8004fec:	4b12      	ldr	r3, [pc, #72]	@ (8005038 <checkAktifCalisma+0xbb0>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d12f      	bne.n	8005054 <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 8004ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800502c <checkAktifCalisma+0xba4>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d02b      	beq.n	8005054 <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 8004ffc:	4b14      	ldr	r3, [pc, #80]	@ (8005050 <checkAktifCalisma+0xbc8>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	701a      	strb	r2, [r3, #0]
 8005002:	e02a      	b.n	800505a <checkAktifCalisma+0xbd2>
 8005004:	200010f3 	.word	0x200010f3
 8005008:	40011000 	.word	0x40011000
 800500c:	200010f7 	.word	0x200010f7
 8005010:	2000110d 	.word	0x2000110d
 8005014:	2000110e 	.word	0x2000110e
 8005018:	200010ef 	.word	0x200010ef
 800501c:	20001094 	.word	0x20001094
 8005020:	200010a0 	.word	0x200010a0
 8005024:	200010d2 	.word	0x200010d2
 8005028:	40010c00 	.word	0x40010c00
 800502c:	200010fd 	.word	0x200010fd
 8005030:	200010c5 	.word	0x200010c5
 8005034:	200010c4 	.word	0x200010c4
 8005038:	200010c8 	.word	0x200010c8
 800503c:	200010c2 	.word	0x200010c2
 8005040:	200010eb 	.word	0x200010eb
 8005044:	200010fe 	.word	0x200010fe
 8005048:	20001098 	.word	0x20001098
 800504c:	200010d5 	.word	0x200010d5
 8005050:	200010ff 	.word	0x200010ff
				} else {
					kapi1butonkontrol=0;
 8005054:	4b8b      	ldr	r3, [pc, #556]	@ (8005284 <checkAktifCalisma+0xdfc>)
 8005056:	2200      	movs	r2, #0
 8005058:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800505a:	4b8b      	ldr	r3, [pc, #556]	@ (8005288 <checkAktifCalisma+0xe00>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d121      	bne.n	80050a6 <checkAktifCalisma+0xc1e>
 8005062:	4b8a      	ldr	r3, [pc, #552]	@ (800528c <checkAktifCalisma+0xe04>)
 8005064:	781b      	ldrb	r3, [r3, #0]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d003      	beq.n	8005072 <checkAktifCalisma+0xbea>
 800506a:	4b88      	ldr	r3, [pc, #544]	@ (800528c <checkAktifCalisma+0xe04>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b03      	cmp	r3, #3
 8005070:	d119      	bne.n	80050a6 <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005072:	2104      	movs	r1, #4
 8005074:	4886      	ldr	r0, [pc, #536]	@ (8005290 <checkAktifCalisma+0xe08>)
 8005076:	f005 fc05 	bl	800a884 <HAL_GPIO_ReadPin>
 800507a:	4603      	mov	r3, r0
 800507c:	2b01      	cmp	r3, #1
 800507e:	d003      	beq.n	8005088 <checkAktifCalisma+0xc00>
 8005080:	4b84      	ldr	r3, [pc, #528]	@ (8005294 <checkAktifCalisma+0xe0c>)
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10e      	bne.n	80050a6 <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005088:	2102      	movs	r1, #2
 800508a:	4881      	ldr	r0, [pc, #516]	@ (8005290 <checkAktifCalisma+0xe08>)
 800508c:	f005 fbfa 	bl	800a884 <HAL_GPIO_ReadPin>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d107      	bne.n	80050a6 <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 8005096:	4b80      	ldr	r3, [pc, #512]	@ (8005298 <checkAktifCalisma+0xe10>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 800509e:	4b7f      	ldr	r3, [pc, #508]	@ (800529c <checkAktifCalisma+0xe14>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	701a      	strb	r2, [r3, #0]
 80050a4:	e002      	b.n	80050ac <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 80050a6:	4b7d      	ldr	r3, [pc, #500]	@ (800529c <checkAktifCalisma+0xe14>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80050ac:	4b75      	ldr	r3, [pc, #468]	@ (8005284 <checkAktifCalisma+0xdfc>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d107      	bne.n	80050c4 <checkAktifCalisma+0xc3c>
 80050b4:	4b79      	ldr	r3, [pc, #484]	@ (800529c <checkAktifCalisma+0xe14>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d103      	bne.n	80050c4 <checkAktifCalisma+0xc3c>
 80050bc:	4b78      	ldr	r3, [pc, #480]	@ (80052a0 <checkAktifCalisma+0xe18>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d005      	beq.n	80050d0 <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80050c4:	2201      	movs	r2, #1
 80050c6:	2180      	movs	r1, #128	@ 0x80
 80050c8:	4876      	ldr	r0, [pc, #472]	@ (80052a4 <checkAktifCalisma+0xe1c>)
 80050ca:	f005 fbf2 	bl	800a8b2 <HAL_GPIO_WritePin>
 80050ce:	e004      	b.n	80050da <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80050d0:	2200      	movs	r2, #0
 80050d2:	2180      	movs	r1, #128	@ 0x80
 80050d4:	4873      	ldr	r0, [pc, #460]	@ (80052a4 <checkAktifCalisma+0xe1c>)
 80050d6:	f005 fbec 	bl	800a8b2 <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80050da:	4b73      	ldr	r3, [pc, #460]	@ (80052a8 <checkAktifCalisma+0xe20>)
 80050dc:	781b      	ldrb	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d141      	bne.n	8005166 <checkAktifCalisma+0xcde>
 80050e2:	4b6a      	ldr	r3, [pc, #424]	@ (800528c <checkAktifCalisma+0xe04>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d003      	beq.n	80050f2 <checkAktifCalisma+0xc6a>
 80050ea:	4b68      	ldr	r3, [pc, #416]	@ (800528c <checkAktifCalisma+0xe04>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	d139      	bne.n	8005166 <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80050f2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80050f6:	4866      	ldr	r0, [pc, #408]	@ (8005290 <checkAktifCalisma+0xe08>)
 80050f8:	f005 fbc4 	bl	800a884 <HAL_GPIO_ReadPin>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d103      	bne.n	800510a <checkAktifCalisma+0xc82>
 8005102:	4b6a      	ldr	r3, [pc, #424]	@ (80052ac <checkAktifCalisma+0xe24>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00b      	beq.n	8005122 <checkAktifCalisma+0xc9a>
 800510a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800510e:	4868      	ldr	r0, [pc, #416]	@ (80052b0 <checkAktifCalisma+0xe28>)
 8005110:	f005 fbb8 	bl	800a884 <HAL_GPIO_ReadPin>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d125      	bne.n	8005166 <checkAktifCalisma+0xcde>
 800511a:	4b64      	ldr	r3, [pc, #400]	@ (80052ac <checkAktifCalisma+0xe24>)
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d121      	bne.n	8005166 <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005122:	2102      	movs	r1, #2
 8005124:	485a      	ldr	r0, [pc, #360]	@ (8005290 <checkAktifCalisma+0xe08>)
 8005126:	f005 fbad 	bl	800a884 <HAL_GPIO_ReadPin>
 800512a:	4603      	mov	r3, r0
 800512c:	2b01      	cmp	r3, #1
 800512e:	d11a      	bne.n	8005166 <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005130:	2104      	movs	r1, #4
 8005132:	4857      	ldr	r0, [pc, #348]	@ (8005290 <checkAktifCalisma+0xe08>)
 8005134:	f005 fba6 	bl	800a884 <HAL_GPIO_ReadPin>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d113      	bne.n	8005166 <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 800513e:	4b56      	ldr	r3, [pc, #344]	@ (8005298 <checkAktifCalisma+0xe10>)
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00f      	beq.n	8005166 <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 8005146:	4b5b      	ldr	r3, [pc, #364]	@ (80052b4 <checkAktifCalisma+0xe2c>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	f083 0301 	eor.w	r3, r3, #1
 800514e:	b2db      	uxtb	r3, r3
 8005150:	2b00      	cmp	r3, #0
 8005152:	d008      	beq.n	8005166 <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 8005154:	4b58      	ldr	r3, [pc, #352]	@ (80052b8 <checkAktifCalisma+0xe30>)
 8005156:	2201      	movs	r2, #1
 8005158:	701a      	strb	r2, [r3, #0]
					timer = millis;
 800515a:	4b58      	ldr	r3, [pc, #352]	@ (80052bc <checkAktifCalisma+0xe34>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a58      	ldr	r2, [pc, #352]	@ (80052c0 <checkAktifCalisma+0xe38>)
 8005160:	6013      	str	r3, [r2, #0]
					bekle();
 8005162:	f7fe fff5 	bl	8004150 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8005166:	4b55      	ldr	r3, [pc, #340]	@ (80052bc <checkAktifCalisma+0xe34>)
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	4b55      	ldr	r3, [pc, #340]	@ (80052c0 <checkAktifCalisma+0xe38>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	4a54      	ldr	r2, [pc, #336]	@ (80052c4 <checkAktifCalisma+0xe3c>)
 8005172:	7812      	ldrb	r2, [r2, #0]
 8005174:	4293      	cmp	r3, r2
 8005176:	d20d      	bcs.n	8005194 <checkAktifCalisma+0xd0c>
 8005178:	2102      	movs	r1, #2
 800517a:	4845      	ldr	r0, [pc, #276]	@ (8005290 <checkAktifCalisma+0xe08>)
 800517c:	f005 fb82 	bl	800a884 <HAL_GPIO_ReadPin>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d006      	beq.n	8005194 <checkAktifCalisma+0xd0c>
 8005186:	4b44      	ldr	r3, [pc, #272]	@ (8005298 <checkAktifCalisma+0xe10>)
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	f083 0301 	eor.w	r3, r3, #1
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 8005194:	4b48      	ldr	r3, [pc, #288]	@ (80052b8 <checkAktifCalisma+0xe30>)
 8005196:	2200      	movs	r2, #0
 8005198:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800519a:	4b43      	ldr	r3, [pc, #268]	@ (80052a8 <checkAktifCalisma+0xe20>)
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d135      	bne.n	800520e <checkAktifCalisma+0xd86>
 80051a2:	4b3a      	ldr	r3, [pc, #232]	@ (800528c <checkAktifCalisma+0xe04>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d003      	beq.n	80051b2 <checkAktifCalisma+0xd2a>
 80051aa:	4b38      	ldr	r3, [pc, #224]	@ (800528c <checkAktifCalisma+0xe04>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d12d      	bne.n	800520e <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80051b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80051b6:	4836      	ldr	r0, [pc, #216]	@ (8005290 <checkAktifCalisma+0xe08>)
 80051b8:	f005 fb64 	bl	800a884 <HAL_GPIO_ReadPin>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d103      	bne.n	80051ca <checkAktifCalisma+0xd42>
 80051c2:	4b3a      	ldr	r3, [pc, #232]	@ (80052ac <checkAktifCalisma+0xe24>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00b      	beq.n	80051e2 <checkAktifCalisma+0xd5a>
 80051ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80051ce:	4838      	ldr	r0, [pc, #224]	@ (80052b0 <checkAktifCalisma+0xe28>)
 80051d0:	f005 fb58 	bl	800a884 <HAL_GPIO_ReadPin>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d119      	bne.n	800520e <checkAktifCalisma+0xd86>
 80051da:	4b34      	ldr	r3, [pc, #208]	@ (80052ac <checkAktifCalisma+0xe24>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d115      	bne.n	800520e <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80051e2:	2102      	movs	r1, #2
 80051e4:	482a      	ldr	r0, [pc, #168]	@ (8005290 <checkAktifCalisma+0xe08>)
 80051e6:	f005 fb4d 	bl	800a884 <HAL_GPIO_ReadPin>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d10e      	bne.n	800520e <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80051f0:	2104      	movs	r1, #4
 80051f2:	4827      	ldr	r0, [pc, #156]	@ (8005290 <checkAktifCalisma+0xe08>)
 80051f4:	f005 fb46 	bl	800a884 <HAL_GPIO_ReadPin>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d107      	bne.n	800520e <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 80051fe:	4b26      	ldr	r3, [pc, #152]	@ (8005298 <checkAktifCalisma+0xe10>)
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 8005206:	4b30      	ldr	r3, [pc, #192]	@ (80052c8 <checkAktifCalisma+0xe40>)
 8005208:	2201      	movs	r2, #1
 800520a:	701a      	strb	r2, [r3, #0]
 800520c:	e002      	b.n	8005214 <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 800520e:	4b2e      	ldr	r3, [pc, #184]	@ (80052c8 <checkAktifCalisma+0xe40>)
 8005210:	2200      	movs	r2, #0
 8005212:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005214:	4b24      	ldr	r3, [pc, #144]	@ (80052a8 <checkAktifCalisma+0xe20>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b02      	cmp	r3, #2
 800521a:	d11d      	bne.n	8005258 <checkAktifCalisma+0xdd0>
 800521c:	4b1b      	ldr	r3, [pc, #108]	@ (800528c <checkAktifCalisma+0xe04>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d003      	beq.n	800522c <checkAktifCalisma+0xda4>
 8005224:	4b19      	ldr	r3, [pc, #100]	@ (800528c <checkAktifCalisma+0xe04>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b03      	cmp	r3, #3
 800522a:	d115      	bne.n	8005258 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800522c:	2102      	movs	r1, #2
 800522e:	4818      	ldr	r0, [pc, #96]	@ (8005290 <checkAktifCalisma+0xe08>)
 8005230:	f005 fb28 	bl	800a884 <HAL_GPIO_ReadPin>
 8005234:	4603      	mov	r3, r0
 8005236:	2b01      	cmp	r3, #1
 8005238:	d10e      	bne.n	8005258 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800523a:	2104      	movs	r1, #4
 800523c:	4814      	ldr	r0, [pc, #80]	@ (8005290 <checkAktifCalisma+0xe08>)
 800523e:	f005 fb21 	bl	800a884 <HAL_GPIO_ReadPin>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d107      	bne.n	8005258 <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 8005248:	4b13      	ldr	r3, [pc, #76]	@ (8005298 <checkAktifCalisma+0xe10>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d003      	beq.n	8005258 <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 8005250:	4b1e      	ldr	r3, [pc, #120]	@ (80052cc <checkAktifCalisma+0xe44>)
 8005252:	2201      	movs	r2, #1
 8005254:	701a      	strb	r2, [r3, #0]
 8005256:	e002      	b.n	800525e <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8005258:	4b1c      	ldr	r3, [pc, #112]	@ (80052cc <checkAktifCalisma+0xe44>)
 800525a:	2200      	movs	r2, #0
 800525c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 800525e:	4b1a      	ldr	r3, [pc, #104]	@ (80052c8 <checkAktifCalisma+0xe40>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d107      	bne.n	8005276 <checkAktifCalisma+0xdee>
 8005266:	4b19      	ldr	r3, [pc, #100]	@ (80052cc <checkAktifCalisma+0xe44>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d103      	bne.n	8005276 <checkAktifCalisma+0xdee>
 800526e:	4b12      	ldr	r3, [pc, #72]	@ (80052b8 <checkAktifCalisma+0xe30>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d02c      	beq.n	80052d0 <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005276:	2201      	movs	r2, #1
 8005278:	2140      	movs	r1, #64	@ 0x40
 800527a:	480a      	ldr	r0, [pc, #40]	@ (80052a4 <checkAktifCalisma+0xe1c>)
 800527c:	f005 fb19 	bl	800a8b2 <HAL_GPIO_WritePin>
 8005280:	e02b      	b.n	80052da <checkAktifCalisma+0xe52>
 8005282:	bf00      	nop
 8005284:	200010ff 	.word	0x200010ff
 8005288:	200010c5 	.word	0x200010c5
 800528c:	200010c4 	.word	0x200010c4
 8005290:	40011000 	.word	0x40011000
 8005294:	200010c2 	.word	0x200010c2
 8005298:	200010fd 	.word	0x200010fd
 800529c:	20001100 	.word	0x20001100
 80052a0:	200010fe 	.word	0x200010fe
 80052a4:	40010800 	.word	0x40010800
 80052a8:	200010c6 	.word	0x200010c6
 80052ac:	200010c8 	.word	0x200010c8
 80052b0:	40010c00 	.word	0x40010c00
 80052b4:	200010eb 	.word	0x200010eb
 80052b8:	20001101 	.word	0x20001101
 80052bc:	20001094 	.word	0x20001094
 80052c0:	20001098 	.word	0x20001098
 80052c4:	200010d6 	.word	0x200010d6
 80052c8:	20001102 	.word	0x20001102
 80052cc:	20001103 	.word	0x20001103
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80052d0:	2200      	movs	r2, #0
 80052d2:	2140      	movs	r1, #64	@ 0x40
 80052d4:	4889      	ldr	r0, [pc, #548]	@ (80054fc <checkAktifCalisma+0x1074>)
 80052d6:	f005 faec 	bl	800a8b2 <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 80052da:	4b89      	ldr	r3, [pc, #548]	@ (8005500 <checkAktifCalisma+0x1078>)
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <checkAktifCalisma+0xe62>
 80052e2:	4b87      	ldr	r3, [pc, #540]	@ (8005500 <checkAktifCalisma+0x1078>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d115      	bne.n	8005316 <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80052ea:	2104      	movs	r1, #4
 80052ec:	4885      	ldr	r0, [pc, #532]	@ (8005504 <checkAktifCalisma+0x107c>)
 80052ee:	f005 fac9 	bl	800a884 <HAL_GPIO_ReadPin>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d003      	beq.n	8005300 <checkAktifCalisma+0xe78>
 80052f8:	4b83      	ldr	r3, [pc, #524]	@ (8005508 <checkAktifCalisma+0x1080>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10a      	bne.n	8005316 <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005300:	2102      	movs	r1, #2
 8005302:	4880      	ldr	r0, [pc, #512]	@ (8005504 <checkAktifCalisma+0x107c>)
 8005304:	f005 fabe 	bl	800a884 <HAL_GPIO_ReadPin>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d103      	bne.n	8005316 <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 800530e:	4b7f      	ldr	r3, [pc, #508]	@ (800550c <checkAktifCalisma+0x1084>)
 8005310:	2201      	movs	r2, #1
 8005312:	701a      	strb	r2, [r3, #0]
 8005314:	e002      	b.n	800531c <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 8005316:	4b7d      	ldr	r3, [pc, #500]	@ (800550c <checkAktifCalisma+0x1084>)
 8005318:	2200      	movs	r2, #0
 800531a:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 800531c:	4b78      	ldr	r3, [pc, #480]	@ (8005500 <checkAktifCalisma+0x1078>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d003      	beq.n	800532c <checkAktifCalisma+0xea4>
 8005324:	4b76      	ldr	r3, [pc, #472]	@ (8005500 <checkAktifCalisma+0x1078>)
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	2b02      	cmp	r3, #2
 800532a:	d111      	bne.n	8005350 <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800532c:	2102      	movs	r1, #2
 800532e:	4875      	ldr	r0, [pc, #468]	@ (8005504 <checkAktifCalisma+0x107c>)
 8005330:	f005 faa8 	bl	800a884 <HAL_GPIO_ReadPin>
 8005334:	4603      	mov	r3, r0
 8005336:	2b01      	cmp	r3, #1
 8005338:	d10a      	bne.n	8005350 <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 800533a:	2104      	movs	r1, #4
 800533c:	4871      	ldr	r0, [pc, #452]	@ (8005504 <checkAktifCalisma+0x107c>)
 800533e:	f005 faa1 	bl	800a884 <HAL_GPIO_ReadPin>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d103      	bne.n	8005350 <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 8005348:	4b71      	ldr	r3, [pc, #452]	@ (8005510 <checkAktifCalisma+0x1088>)
 800534a:	2201      	movs	r2, #1
 800534c:	701a      	strb	r2, [r3, #0]
 800534e:	e002      	b.n	8005356 <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 8005350:	4b6f      	ldr	r3, [pc, #444]	@ (8005510 <checkAktifCalisma+0x1088>)
 8005352:	2200      	movs	r2, #0
 8005354:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 8005356:	4b6d      	ldr	r3, [pc, #436]	@ (800550c <checkAktifCalisma+0x1084>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00f      	beq.n	800537e <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 800535e:	4b6d      	ldr	r3, [pc, #436]	@ (8005514 <checkAktifCalisma+0x108c>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d10b      	bne.n	800537e <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8005366:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800536a:	486b      	ldr	r0, [pc, #428]	@ (8005518 <checkAktifCalisma+0x1090>)
 800536c:	f005 fa8a 	bl	800a884 <HAL_GPIO_ReadPin>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d103      	bne.n	800537e <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 8005376:	4b69      	ldr	r3, [pc, #420]	@ (800551c <checkAktifCalisma+0x1094>)
 8005378:	2201      	movs	r2, #1
 800537a:	701a      	strb	r2, [r3, #0]
 800537c:	e002      	b.n	8005384 <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 800537e:	4b67      	ldr	r3, [pc, #412]	@ (800551c <checkAktifCalisma+0x1094>)
 8005380:	2200      	movs	r2, #0
 8005382:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8005384:	4b62      	ldr	r3, [pc, #392]	@ (8005510 <checkAktifCalisma+0x1088>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00f      	beq.n	80053ac <checkAktifCalisma+0xf24>
						&& kapiAcTipi==1
 800538c:	4b61      	ldr	r3, [pc, #388]	@ (8005514 <checkAktifCalisma+0x108c>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d10b      	bne.n	80053ac <checkAktifCalisma+0xf24>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005394:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005398:	485f      	ldr	r0, [pc, #380]	@ (8005518 <checkAktifCalisma+0x1090>)
 800539a:	f005 fa73 	bl	800a884 <HAL_GPIO_ReadPin>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d103      	bne.n	80053ac <checkAktifCalisma+0xf24>

					kapiactablaesp2=1;
 80053a4:	4b5e      	ldr	r3, [pc, #376]	@ (8005520 <checkAktifCalisma+0x1098>)
 80053a6:	2201      	movs	r2, #1
 80053a8:	701a      	strb	r2, [r3, #0]
 80053aa:	e002      	b.n	80053b2 <checkAktifCalisma+0xf2a>
				} else {
					kapiactablaesp2=0;
 80053ac:	4b5c      	ldr	r3, [pc, #368]	@ (8005520 <checkAktifCalisma+0x1098>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80053b2:	4b5c      	ldr	r3, [pc, #368]	@ (8005524 <checkAktifCalisma+0x109c>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d11b      	bne.n	80053f2 <checkAktifCalisma+0xf6a>
 80053ba:	4b5b      	ldr	r3, [pc, #364]	@ (8005528 <checkAktifCalisma+0x10a0>)
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d003      	beq.n	80053ca <checkAktifCalisma+0xf42>
 80053c2:	4b59      	ldr	r3, [pc, #356]	@ (8005528 <checkAktifCalisma+0x10a0>)
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	2b03      	cmp	r3, #3
 80053c8:	d113      	bne.n	80053f2 <checkAktifCalisma+0xf6a>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))&& ((kapi1prudhome==1)||(kapi2prudhome==1)))
 80053ca:	4b50      	ldr	r3, [pc, #320]	@ (800550c <checkAktifCalisma+0x1084>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d103      	bne.n	80053da <checkAktifCalisma+0xf52>
 80053d2:	4b4f      	ldr	r3, [pc, #316]	@ (8005510 <checkAktifCalisma+0x1088>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00b      	beq.n	80053f2 <checkAktifCalisma+0xf6a>
 80053da:	4b54      	ldr	r3, [pc, #336]	@ (800552c <checkAktifCalisma+0x10a4>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d103      	bne.n	80053ea <checkAktifCalisma+0xf62>
 80053e2:	4b53      	ldr	r3, [pc, #332]	@ (8005530 <checkAktifCalisma+0x10a8>)
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <checkAktifCalisma+0xf6a>
						 {

						kapiTablaprudhome=1;
 80053ea:	4b52      	ldr	r3, [pc, #328]	@ (8005534 <checkAktifCalisma+0x10ac>)
 80053ec:	2201      	movs	r2, #1
 80053ee:	701a      	strb	r2, [r3, #0]
 80053f0:	e002      	b.n	80053f8 <checkAktifCalisma+0xf70>

						 }
				else {
					kapiTablaprudhome=0;
 80053f2:	4b50      	ldr	r3, [pc, #320]	@ (8005534 <checkAktifCalisma+0x10ac>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	701a      	strb	r2, [r3, #0]
				}


				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80053f8:	4b4a      	ldr	r3, [pc, #296]	@ (8005524 <checkAktifCalisma+0x109c>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d148      	bne.n	8005492 <checkAktifCalisma+0x100a>
 8005400:	4b49      	ldr	r3, [pc, #292]	@ (8005528 <checkAktifCalisma+0x10a0>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b02      	cmp	r3, #2
 8005406:	d003      	beq.n	8005410 <checkAktifCalisma+0xf88>
 8005408:	4b47      	ldr	r3, [pc, #284]	@ (8005528 <checkAktifCalisma+0x10a0>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b03      	cmp	r3, #3
 800540e:	d140      	bne.n	8005492 <checkAktifCalisma+0x100a>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005410:	4b3e      	ldr	r3, [pc, #248]	@ (800550c <checkAktifCalisma+0x1084>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d103      	bne.n	8005420 <checkAktifCalisma+0xf98>
 8005418:	4b3d      	ldr	r3, [pc, #244]	@ (8005510 <checkAktifCalisma+0x1088>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d038      	beq.n	8005492 <checkAktifCalisma+0x100a>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8005420:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005424:	4837      	ldr	r0, [pc, #220]	@ (8005504 <checkAktifCalisma+0x107c>)
 8005426:	f005 fa2d 	bl	800a884 <HAL_GPIO_ReadPin>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d01c      	beq.n	800546a <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8005430:	2180      	movs	r1, #128	@ 0x80
 8005432:	4834      	ldr	r0, [pc, #208]	@ (8005504 <checkAktifCalisma+0x107c>)
 8005434:	f005 fa26 	bl	800a884 <HAL_GPIO_ReadPin>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <checkAktifCalisma+0xfc4>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 800543e:	2104      	movs	r1, #4
 8005440:	4830      	ldr	r0, [pc, #192]	@ (8005504 <checkAktifCalisma+0x107c>)
 8005442:	f005 fa1f 	bl	800a884 <HAL_GPIO_ReadPin>
 8005446:	4603      	mov	r3, r0
 8005448:	2b01      	cmp	r3, #1
 800544a:	d00e      	beq.n	800546a <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 800544c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005450:	482c      	ldr	r0, [pc, #176]	@ (8005504 <checkAktifCalisma+0x107c>)
 8005452:	f005 fa17 	bl	800a884 <HAL_GPIO_ReadPin>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d10a      	bne.n	8005472 <checkAktifCalisma+0xfea>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 800545c:	2102      	movs	r1, #2
 800545e:	4829      	ldr	r0, [pc, #164]	@ (8005504 <checkAktifCalisma+0x107c>)
 8005460:	f005 fa10 	bl	800a884 <HAL_GPIO_ReadPin>
 8005464:	4603      	mov	r3, r0
 8005466:	2b01      	cmp	r3, #1
 8005468:	d103      	bne.n	8005472 <checkAktifCalisma+0xfea>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800546a:	4b2a      	ldr	r3, [pc, #168]	@ (8005514 <checkAktifCalisma+0x108c>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d007      	beq.n	8005482 <checkAktifCalisma+0xffa>
 8005472:	4b2a      	ldr	r3, [pc, #168]	@ (800551c <checkAktifCalisma+0x1094>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d103      	bne.n	8005482 <checkAktifCalisma+0xffa>
 800547a:	4b29      	ldr	r3, [pc, #164]	@ (8005520 <checkAktifCalisma+0x1098>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d007      	beq.n	8005492 <checkAktifCalisma+0x100a>
						&&(makineStop==1)) {
 8005482:	4b2d      	ldr	r3, [pc, #180]	@ (8005538 <checkAktifCalisma+0x10b0>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <checkAktifCalisma+0x100a>

					kapiTablabutonkontrol=1;
 800548a:	4b2c      	ldr	r3, [pc, #176]	@ (800553c <checkAktifCalisma+0x10b4>)
 800548c:	2201      	movs	r2, #1
 800548e:	701a      	strb	r2, [r3, #0]
 8005490:	e002      	b.n	8005498 <checkAktifCalisma+0x1010>
				} else {
					kapiTablabutonkontrol=0;
 8005492:	4b2a      	ldr	r3, [pc, #168]	@ (800553c <checkAktifCalisma+0x10b4>)
 8005494:	2200      	movs	r2, #0
 8005496:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005498:	4b22      	ldr	r3, [pc, #136]	@ (8005524 <checkAktifCalisma+0x109c>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b02      	cmp	r3, #2
 800549e:	d117      	bne.n	80054d0 <checkAktifCalisma+0x1048>
 80054a0:	4b21      	ldr	r3, [pc, #132]	@ (8005528 <checkAktifCalisma+0x10a0>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d003      	beq.n	80054b0 <checkAktifCalisma+0x1028>
 80054a8:	4b1f      	ldr	r3, [pc, #124]	@ (8005528 <checkAktifCalisma+0x10a0>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b03      	cmp	r3, #3
 80054ae:	d10f      	bne.n	80054d0 <checkAktifCalisma+0x1048>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80054b0:	4b16      	ldr	r3, [pc, #88]	@ (800550c <checkAktifCalisma+0x1084>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d103      	bne.n	80054c0 <checkAktifCalisma+0x1038>
 80054b8:	4b15      	ldr	r3, [pc, #84]	@ (8005510 <checkAktifCalisma+0x1088>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d007      	beq.n	80054d0 <checkAktifCalisma+0x1048>
						&&(makineStop==1)) {
 80054c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005538 <checkAktifCalisma+0x10b0>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <checkAktifCalisma+0x1048>

					kapiTablapizzato=1;
 80054c8:	4b1d      	ldr	r3, [pc, #116]	@ (8005540 <checkAktifCalisma+0x10b8>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	701a      	strb	r2, [r3, #0]
 80054ce:	e002      	b.n	80054d6 <checkAktifCalisma+0x104e>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 80054d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005540 <checkAktifCalisma+0x10b8>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80054d6:	4b19      	ldr	r3, [pc, #100]	@ (800553c <checkAktifCalisma+0x10b4>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d107      	bne.n	80054ee <checkAktifCalisma+0x1066>
 80054de:	4b15      	ldr	r3, [pc, #84]	@ (8005534 <checkAktifCalisma+0x10ac>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d103      	bne.n	80054ee <checkAktifCalisma+0x1066>
 80054e6:	4b16      	ldr	r3, [pc, #88]	@ (8005540 <checkAktifCalisma+0x10b8>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d02a      	beq.n	8005544 <checkAktifCalisma+0x10bc>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80054ee:	2201      	movs	r2, #1
 80054f0:	2120      	movs	r1, #32
 80054f2:	4802      	ldr	r0, [pc, #8]	@ (80054fc <checkAktifCalisma+0x1074>)
 80054f4:	f005 f9dd 	bl	800a8b2 <HAL_GPIO_WritePin>
 80054f8:	e029      	b.n	800554e <checkAktifCalisma+0x10c6>
 80054fa:	bf00      	nop
 80054fc:	40010800 	.word	0x40010800
 8005500:	200010c9 	.word	0x200010c9
 8005504:	40011000 	.word	0x40011000
 8005508:	200010c2 	.word	0x200010c2
 800550c:	20001107 	.word	0x20001107
 8005510:	20001108 	.word	0x20001108
 8005514:	200010c8 	.word	0x200010c8
 8005518:	40010c00 	.word	0x40010c00
 800551c:	20001117 	.word	0x20001117
 8005520:	20001118 	.word	0x20001118
 8005524:	200010c7 	.word	0x200010c7
 8005528:	200010c4 	.word	0x200010c4
 800552c:	200010fe 	.word	0x200010fe
 8005530:	20001101 	.word	0x20001101
 8005534:	20001104 	.word	0x20001104
 8005538:	200010fd 	.word	0x200010fd
 800553c:	20001105 	.word	0x20001105
 8005540:	20001106 	.word	0x20001106
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005544:	2200      	movs	r2, #0
 8005546:	2120      	movs	r1, #32
 8005548:	4887      	ldr	r0, [pc, #540]	@ (8005768 <checkAktifCalisma+0x12e0>)
 800554a:	f005 f9b2 	bl	800a8b2 <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 800554e:	4b87      	ldr	r3, [pc, #540]	@ (800576c <checkAktifCalisma+0x12e4>)
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00e      	beq.n	8005574 <checkAktifCalisma+0x10ec>
 8005556:	2102      	movs	r1, #2
 8005558:	4885      	ldr	r0, [pc, #532]	@ (8005770 <checkAktifCalisma+0x12e8>)
 800555a:	f005 f993 	bl	800a884 <HAL_GPIO_ReadPin>
 800555e:	4603      	mov	r3, r0
 8005560:	2b01      	cmp	r3, #1
 8005562:	d107      	bne.n	8005574 <checkAktifCalisma+0x10ec>
 8005564:	4b83      	ldr	r3, [pc, #524]	@ (8005774 <checkAktifCalisma+0x12ec>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d103      	bne.n	8005574 <checkAktifCalisma+0x10ec>
 800556c:	4b82      	ldr	r3, [pc, #520]	@ (8005778 <checkAktifCalisma+0x12f0>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d112      	bne.n	800559a <checkAktifCalisma+0x1112>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005574:	4b81      	ldr	r3, [pc, #516]	@ (800577c <checkAktifCalisma+0x12f4>)
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d032      	beq.n	80055e2 <checkAktifCalisma+0x115a>
 800557c:	2104      	movs	r1, #4
 800557e:	487c      	ldr	r0, [pc, #496]	@ (8005770 <checkAktifCalisma+0x12e8>)
 8005580:	f005 f980 	bl	800a884 <HAL_GPIO_ReadPin>
 8005584:	4603      	mov	r3, r0
 8005586:	2b01      	cmp	r3, #1
 8005588:	d12b      	bne.n	80055e2 <checkAktifCalisma+0x115a>
 800558a:	4b7a      	ldr	r3, [pc, #488]	@ (8005774 <checkAktifCalisma+0x12ec>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d027      	beq.n	80055e2 <checkAktifCalisma+0x115a>
 8005592:	4b79      	ldr	r3, [pc, #484]	@ (8005778 <checkAktifCalisma+0x12f0>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d023      	beq.n	80055e2 <checkAktifCalisma+0x115a>



					calismaSayisi++;
 800559a:	4b79      	ldr	r3, [pc, #484]	@ (8005780 <checkAktifCalisma+0x12f8>)
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	3301      	adds	r3, #1
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	4b77      	ldr	r3, [pc, #476]	@ (8005780 <checkAktifCalisma+0x12f8>)
 80055a4:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 80055a6:	4b76      	ldr	r3, [pc, #472]	@ (8005780 <checkAktifCalisma+0x12f8>)
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	2bff      	cmp	r3, #255	@ 0xff
 80055ac:	d108      	bne.n	80055c0 <checkAktifCalisma+0x1138>
						calismaSayisi = 0;
 80055ae:	4b74      	ldr	r3, [pc, #464]	@ (8005780 <checkAktifCalisma+0x12f8>)
 80055b0:	2200      	movs	r2, #0
 80055b2:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 80055b4:	4b73      	ldr	r3, [pc, #460]	@ (8005784 <checkAktifCalisma+0x12fc>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	3301      	adds	r3, #1
 80055ba:	b2da      	uxtb	r2, r3
 80055bc:	4b71      	ldr	r3, [pc, #452]	@ (8005784 <checkAktifCalisma+0x12fc>)
 80055be:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 80055c0:	4b6f      	ldr	r3, [pc, #444]	@ (8005780 <checkAktifCalisma+0x12f8>)
 80055c2:	781a      	ldrb	r2, [r3, #0]
 80055c4:	4b70      	ldr	r3, [pc, #448]	@ (8005788 <checkAktifCalisma+0x1300>)
 80055c6:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 80055c8:	4b6e      	ldr	r3, [pc, #440]	@ (8005784 <checkAktifCalisma+0x12fc>)
 80055ca:	781a      	ldrb	r2, [r3, #0]
 80055cc:	4b6e      	ldr	r3, [pc, #440]	@ (8005788 <checkAktifCalisma+0x1300>)
 80055ce:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 80055d0:	4b6e      	ldr	r3, [pc, #440]	@ (800578c <checkAktifCalisma+0x1304>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 80055d6:	4b65      	ldr	r3, [pc, #404]	@ (800576c <checkAktifCalisma+0x12e4>)
 80055d8:	2200      	movs	r2, #0
 80055da:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 80055dc:	4b67      	ldr	r3, [pc, #412]	@ (800577c <checkAktifCalisma+0x12f4>)
 80055de:	2200      	movs	r2, #0
 80055e0:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80055e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80055e6:	486a      	ldr	r0, [pc, #424]	@ (8005790 <checkAktifCalisma+0x1308>)
 80055e8:	f005 f94c 	bl	800a884 <HAL_GPIO_ReadPin>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d016      	beq.n	8005620 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80055f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80055f6:	4866      	ldr	r0, [pc, #408]	@ (8005790 <checkAktifCalisma+0x1308>)
 80055f8:	f005 f944 	bl	800a884 <HAL_GPIO_ReadPin>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00e      	beq.n	8005620 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005602:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005606:	4862      	ldr	r0, [pc, #392]	@ (8005790 <checkAktifCalisma+0x1308>)
 8005608:	f005 f93c 	bl	800a884 <HAL_GPIO_ReadPin>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d006      	beq.n	8005620 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005612:	2140      	movs	r1, #64	@ 0x40
 8005614:	4856      	ldr	r0, [pc, #344]	@ (8005770 <checkAktifCalisma+0x12e8>)
 8005616:	f005 f935 	bl	800a884 <HAL_GPIO_ReadPin>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d103      	bne.n	8005628 <checkAktifCalisma+0x11a0>

					startBasili=1;
 8005620:	4b5c      	ldr	r3, [pc, #368]	@ (8005794 <checkAktifCalisma+0x130c>)
 8005622:	2201      	movs	r2, #1
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	e002      	b.n	800562e <checkAktifCalisma+0x11a6>
				} else {
					startBasili=0;
 8005628:	4b5a      	ldr	r3, [pc, #360]	@ (8005794 <checkAktifCalisma+0x130c>)
 800562a:	2200      	movs	r2, #0
 800562c:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 800562e:	4b59      	ldr	r3, [pc, #356]	@ (8005794 <checkAktifCalisma+0x130c>)
 8005630:	781b      	ldrb	r3, [r3, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d014      	beq.n	8005660 <checkAktifCalisma+0x11d8>
 8005636:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800563a:	4855      	ldr	r0, [pc, #340]	@ (8005790 <checkAktifCalisma+0x1308>)
 800563c:	f005 f922 	bl	800a884 <HAL_GPIO_ReadPin>
 8005640:	4603      	mov	r3, r0
 8005642:	2b01      	cmp	r3, #1
 8005644:	d10c      	bne.n	8005660 <checkAktifCalisma+0x11d8>

					hataVar=1;
 8005646:	4b54      	ldr	r3, [pc, #336]	@ (8005798 <checkAktifCalisma+0x1310>)
 8005648:	2201      	movs	r2, #1
 800564a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 800564c:	2001      	movs	r0, #1
 800564e:	f7fb fd13 	bl	8001078 <hataKoduLcdGoster>
					hata2EEPROM(1);
 8005652:	2001      	movs	r0, #1
 8005654:	f7fb fcb8 	bl	8000fc8 <hata2EEPROM>
					acilstophatasi=1;
 8005658:	4b50      	ldr	r3, [pc, #320]	@ (800579c <checkAktifCalisma+0x1314>)
 800565a:	2201      	movs	r2, #1
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	e018      	b.n	8005692 <checkAktifCalisma+0x120a>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005660:	4b4e      	ldr	r3, [pc, #312]	@ (800579c <checkAktifCalisma+0x1314>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d014      	beq.n	8005692 <checkAktifCalisma+0x120a>
 8005668:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800566c:	4848      	ldr	r0, [pc, #288]	@ (8005790 <checkAktifCalisma+0x1308>)
 800566e:	f005 f909 	bl	800a884 <HAL_GPIO_ReadPin>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d10c      	bne.n	8005692 <checkAktifCalisma+0x120a>
 8005678:	4b46      	ldr	r3, [pc, #280]	@ (8005794 <checkAktifCalisma+0x130c>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	f083 0301 	eor.w	r3, r3, #1
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d005      	beq.n	8005692 <checkAktifCalisma+0x120a>
					acilstophatasi=0;
 8005686:	4b45      	ldr	r3, [pc, #276]	@ (800579c <checkAktifCalisma+0x1314>)
 8005688:	2200      	movs	r2, #0
 800568a:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 800568c:	2001      	movs	r0, #1
 800568e:	f7fe fcf1 	bl	8004074 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 8005692:	4b43      	ldr	r3, [pc, #268]	@ (80057a0 <checkAktifCalisma+0x1318>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	f083 0301 	eor.w	r3, r3, #1
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d023      	beq.n	80056e8 <checkAktifCalisma+0x1260>
 80056a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80056a4:	483a      	ldr	r0, [pc, #232]	@ (8005790 <checkAktifCalisma+0x1308>)
 80056a6:	f005 f8ed 	bl	800a884 <HAL_GPIO_ReadPin>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d003      	beq.n	80056b8 <checkAktifCalisma+0x1230>
 80056b0:	4b3c      	ldr	r3, [pc, #240]	@ (80057a4 <checkAktifCalisma+0x131c>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d017      	beq.n	80056e8 <checkAktifCalisma+0x1260>
 80056b8:	4b3b      	ldr	r3, [pc, #236]	@ (80057a8 <checkAktifCalisma+0x1320>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d113      	bne.n	80056e8 <checkAktifCalisma+0x1260>
 80056c0:	4b3a      	ldr	r3, [pc, #232]	@ (80057ac <checkAktifCalisma+0x1324>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	f083 0301 	eor.w	r3, r3, #1
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00c      	beq.n	80056e8 <checkAktifCalisma+0x1260>
					hataVar=1;
 80056ce:	4b32      	ldr	r3, [pc, #200]	@ (8005798 <checkAktifCalisma+0x1310>)
 80056d0:	2201      	movs	r2, #1
 80056d2:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 80056d4:	2002      	movs	r0, #2
 80056d6:	f7fb fccf 	bl	8001078 <hataKoduLcdGoster>
					hata2EEPROM(2);
 80056da:	2002      	movs	r0, #2
 80056dc:	f7fb fc74 	bl	8000fc8 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 80056e0:	4b32      	ldr	r3, [pc, #200]	@ (80057ac <checkAktifCalisma+0x1324>)
 80056e2:	2201      	movs	r2, #1
 80056e4:	701a      	strb	r2, [r3, #0]
 80056e6:	e017      	b.n	8005718 <checkAktifCalisma+0x1290>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80056e8:	4b30      	ldr	r3, [pc, #192]	@ (80057ac <checkAktifCalisma+0x1324>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d013      	beq.n	8005718 <checkAktifCalisma+0x1290>
 80056f0:	4b2b      	ldr	r3, [pc, #172]	@ (80057a0 <checkAktifCalisma+0x1318>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d00f      	beq.n	8005718 <checkAktifCalisma+0x1290>
 80056f8:	4b2d      	ldr	r3, [pc, #180]	@ (80057b0 <checkAktifCalisma+0x1328>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	f083 0301 	eor.w	r3, r3, #1
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d008      	beq.n	8005718 <checkAktifCalisma+0x1290>
					emniyetCercevesihatasi=0;
 8005706:	4b29      	ldr	r3, [pc, #164]	@ (80057ac <checkAktifCalisma+0x1324>)
 8005708:	2200      	movs	r2, #0
 800570a:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 800570c:	4b25      	ldr	r3, [pc, #148]	@ (80057a4 <checkAktifCalisma+0x131c>)
 800570e:	2200      	movs	r2, #0
 8005710:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 8005712:	2002      	movs	r0, #2
 8005714:	f7fe fcae 	bl	8004074 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 8005718:	4b26      	ldr	r3, [pc, #152]	@ (80057b4 <checkAktifCalisma+0x132c>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d151      	bne.n	80057c4 <checkAktifCalisma+0x133c>
 8005720:	4b25      	ldr	r3, [pc, #148]	@ (80057b8 <checkAktifCalisma+0x1330>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b01      	cmp	r3, #1
 8005726:	d14d      	bne.n	80057c4 <checkAktifCalisma+0x133c>
 8005728:	4b24      	ldr	r3, [pc, #144]	@ (80057bc <checkAktifCalisma+0x1334>)
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d049      	beq.n	80057c4 <checkAktifCalisma+0x133c>
 8005730:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005734:	480e      	ldr	r0, [pc, #56]	@ (8005770 <checkAktifCalisma+0x12e8>)
 8005736:	f005 f8a5 	bl	800a884 <HAL_GPIO_ReadPin>
 800573a:	4603      	mov	r3, r0
 800573c:	2b01      	cmp	r3, #1
 800573e:	d141      	bne.n	80057c4 <checkAktifCalisma+0x133c>
 8005740:	4b1f      	ldr	r3, [pc, #124]	@ (80057c0 <checkAktifCalisma+0x1338>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	f083 0301 	eor.w	r3, r3, #1
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d03a      	beq.n	80057c4 <checkAktifCalisma+0x133c>
					hataVar=1;
 800574e:	4b12      	ldr	r3, [pc, #72]	@ (8005798 <checkAktifCalisma+0x1310>)
 8005750:	2201      	movs	r2, #1
 8005752:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 8005754:	2003      	movs	r0, #3
 8005756:	f7fb fc8f 	bl	8001078 <hataKoduLcdGoster>
					hata2EEPROM(3);
 800575a:	2003      	movs	r0, #3
 800575c:	f7fb fc34 	bl	8000fc8 <hata2EEPROM>
					basinchatasi=1;
 8005760:	4b17      	ldr	r3, [pc, #92]	@ (80057c0 <checkAktifCalisma+0x1338>)
 8005762:	2201      	movs	r2, #1
 8005764:	701a      	strb	r2, [r3, #0]
 8005766:	e043      	b.n	80057f0 <checkAktifCalisma+0x1368>
 8005768:	40010800 	.word	0x40010800
 800576c:	200010fb 	.word	0x200010fb
 8005770:	40011000 	.word	0x40011000
 8005774:	200010c2 	.word	0x200010c2
 8005778:	200010fd 	.word	0x200010fd
 800577c:	200010fc 	.word	0x200010fc
 8005780:	200010b4 	.word	0x200010b4
 8005784:	200010b6 	.word	0x200010b6
 8005788:	20000fec 	.word	0x20000fec
 800578c:	200010e8 	.word	0x200010e8
 8005790:	40010c00 	.word	0x40010c00
 8005794:	20001109 	.word	0x20001109
 8005798:	20001110 	.word	0x20001110
 800579c:	2000110b 	.word	0x2000110b
 80057a0:	20001112 	.word	0x20001112
 80057a4:	2000111c 	.word	0x2000111c
 80057a8:	200010c0 	.word	0x200010c0
 80057ac:	2000110c 	.word	0x2000110c
 80057b0:	200010f4 	.word	0x200010f4
 80057b4:	200010bf 	.word	0x200010bf
 80057b8:	200010c3 	.word	0x200010c3
 80057bc:	2000110f 	.word	0x2000110f
 80057c0:	20001119 	.word	0x20001119
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80057c4:	4b85      	ldr	r3, [pc, #532]	@ (80059dc <checkAktifCalisma+0x1554>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d011      	beq.n	80057f0 <checkAktifCalisma+0x1368>
 80057cc:	4b84      	ldr	r3, [pc, #528]	@ (80059e0 <checkAktifCalisma+0x1558>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d10d      	bne.n	80057f0 <checkAktifCalisma+0x1368>
 80057d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80057d8:	4882      	ldr	r0, [pc, #520]	@ (80059e4 <checkAktifCalisma+0x155c>)
 80057da:	f005 f853 	bl	800a884 <HAL_GPIO_ReadPin>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d105      	bne.n	80057f0 <checkAktifCalisma+0x1368>
					basinchatasi=0;
 80057e4:	4b7d      	ldr	r3, [pc, #500]	@ (80059dc <checkAktifCalisma+0x1554>)
 80057e6:	2200      	movs	r2, #0
 80057e8:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 80057ea:	2003      	movs	r0, #3
 80057ec:	f7fe fc42 	bl	8004074 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 80057f0:	4b7d      	ldr	r3, [pc, #500]	@ (80059e8 <checkAktifCalisma+0x1560>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d103      	bne.n	8005800 <checkAktifCalisma+0x1378>
 80057f8:	4b7c      	ldr	r3, [pc, #496]	@ (80059ec <checkAktifCalisma+0x1564>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d023      	beq.n	8005848 <checkAktifCalisma+0x13c0>
 8005800:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005804:	487a      	ldr	r0, [pc, #488]	@ (80059f0 <checkAktifCalisma+0x1568>)
 8005806:	f005 f83d 	bl	800a884 <HAL_GPIO_ReadPin>
 800580a:	4603      	mov	r3, r0
 800580c:	2b01      	cmp	r3, #1
 800580e:	d11b      	bne.n	8005848 <checkAktifCalisma+0x13c0>
 8005810:	4b78      	ldr	r3, [pc, #480]	@ (80059f4 <checkAktifCalisma+0x156c>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d003      	beq.n	8005820 <checkAktifCalisma+0x1398>
 8005818:	4b76      	ldr	r3, [pc, #472]	@ (80059f4 <checkAktifCalisma+0x156c>)
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2b03      	cmp	r3, #3
 800581e:	d113      	bne.n	8005848 <checkAktifCalisma+0x13c0>
 8005820:	4b75      	ldr	r3, [pc, #468]	@ (80059f8 <checkAktifCalisma+0x1570>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	f083 0301 	eor.w	r3, r3, #1
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00c      	beq.n	8005848 <checkAktifCalisma+0x13c0>
					hataVar=1;
 800582e:	4b73      	ldr	r3, [pc, #460]	@ (80059fc <checkAktifCalisma+0x1574>)
 8005830:	2201      	movs	r2, #1
 8005832:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8005834:	2004      	movs	r0, #4
 8005836:	f7fb fc1f 	bl	8001078 <hataKoduLcdGoster>
					hata2EEPROM(4);
 800583a:	2004      	movs	r0, #4
 800583c:	f7fb fbc4 	bl	8000fc8 <hata2EEPROM>
					katkapisivicihatasi=1;
 8005840:	4b6d      	ldr	r3, [pc, #436]	@ (80059f8 <checkAktifCalisma+0x1570>)
 8005842:	2201      	movs	r2, #1
 8005844:	701a      	strb	r2, [r3, #0]
 8005846:	e01f      	b.n	8005888 <checkAktifCalisma+0x1400>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005848:	4b6b      	ldr	r3, [pc, #428]	@ (80059f8 <checkAktifCalisma+0x1570>)
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01b      	beq.n	8005888 <checkAktifCalisma+0x1400>
 8005850:	4b6b      	ldr	r3, [pc, #428]	@ (8005a00 <checkAktifCalisma+0x1578>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d017      	beq.n	8005888 <checkAktifCalisma+0x1400>
 8005858:	4b63      	ldr	r3, [pc, #396]	@ (80059e8 <checkAktifCalisma+0x1560>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	f083 0301 	eor.w	r3, r3, #1
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d010      	beq.n	8005888 <checkAktifCalisma+0x1400>
 8005866:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800586a:	4861      	ldr	r0, [pc, #388]	@ (80059f0 <checkAktifCalisma+0x1568>)
 800586c:	f005 f80a 	bl	800a884 <HAL_GPIO_ReadPin>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d108      	bne.n	8005888 <checkAktifCalisma+0x1400>

					katkapisivicihatasi=0;
 8005876:	4b60      	ldr	r3, [pc, #384]	@ (80059f8 <checkAktifCalisma+0x1570>)
 8005878:	2200      	movs	r2, #0
 800587a:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 800587c:	4b5b      	ldr	r3, [pc, #364]	@ (80059ec <checkAktifCalisma+0x1564>)
 800587e:	2200      	movs	r2, #0
 8005880:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8005882:	2004      	movs	r0, #4
 8005884:	f7fe fbf6 	bl	8004074 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8005888:	4b57      	ldr	r3, [pc, #348]	@ (80059e8 <checkAktifCalisma+0x1560>)
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d103      	bne.n	8005898 <checkAktifCalisma+0x1410>
 8005890:	4b5c      	ldr	r3, [pc, #368]	@ (8005a04 <checkAktifCalisma+0x157c>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d023      	beq.n	80058e0 <checkAktifCalisma+0x1458>
 8005898:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800589c:	4854      	ldr	r0, [pc, #336]	@ (80059f0 <checkAktifCalisma+0x1568>)
 800589e:	f004 fff1 	bl	800a884 <HAL_GPIO_ReadPin>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b01      	cmp	r3, #1
 80058a6:	d11b      	bne.n	80058e0 <checkAktifCalisma+0x1458>
 80058a8:	4b52      	ldr	r3, [pc, #328]	@ (80059f4 <checkAktifCalisma+0x156c>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d003      	beq.n	80058b8 <checkAktifCalisma+0x1430>
 80058b0:	4b50      	ldr	r3, [pc, #320]	@ (80059f4 <checkAktifCalisma+0x156c>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b03      	cmp	r3, #3
 80058b6:	d113      	bne.n	80058e0 <checkAktifCalisma+0x1458>
 80058b8:	4b53      	ldr	r3, [pc, #332]	@ (8005a08 <checkAktifCalisma+0x1580>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	f083 0301 	eor.w	r3, r3, #1
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00c      	beq.n	80058e0 <checkAktifCalisma+0x1458>

					hataVar=1;
 80058c6:	4b4d      	ldr	r3, [pc, #308]	@ (80059fc <checkAktifCalisma+0x1574>)
 80058c8:	2201      	movs	r2, #1
 80058ca:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 80058cc:	2005      	movs	r0, #5
 80058ce:	f7fb fbd3 	bl	8001078 <hataKoduLcdGoster>
					hata2EEPROM(5);
 80058d2:	2005      	movs	r0, #5
 80058d4:	f7fb fb78 	bl	8000fc8 <hata2EEPROM>
					tablakapisivicihatasi=1;
 80058d8:	4b4b      	ldr	r3, [pc, #300]	@ (8005a08 <checkAktifCalisma+0x1580>)
 80058da:	2201      	movs	r2, #1
 80058dc:	701a      	strb	r2, [r3, #0]
 80058de:	e023      	b.n	8005928 <checkAktifCalisma+0x14a0>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80058e0:	4b49      	ldr	r3, [pc, #292]	@ (8005a08 <checkAktifCalisma+0x1580>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d01f      	beq.n	8005928 <checkAktifCalisma+0x14a0>
 80058e8:	4b45      	ldr	r3, [pc, #276]	@ (8005a00 <checkAktifCalisma+0x1578>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d01b      	beq.n	8005928 <checkAktifCalisma+0x14a0>
 80058f0:	4b3d      	ldr	r3, [pc, #244]	@ (80059e8 <checkAktifCalisma+0x1560>)
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	f083 0301 	eor.w	r3, r3, #1
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d014      	beq.n	8005928 <checkAktifCalisma+0x14a0>
 80058fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005902:	483b      	ldr	r0, [pc, #236]	@ (80059f0 <checkAktifCalisma+0x1568>)
 8005904:	f004 ffbe 	bl	800a884 <HAL_GPIO_ReadPin>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d10c      	bne.n	8005928 <checkAktifCalisma+0x14a0>
 800590e:	4b3c      	ldr	r3, [pc, #240]	@ (8005a00 <checkAktifCalisma+0x1578>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d008      	beq.n	8005928 <checkAktifCalisma+0x14a0>
					tablakapisivicihatasi=0;
 8005916:	4b3c      	ldr	r3, [pc, #240]	@ (8005a08 <checkAktifCalisma+0x1580>)
 8005918:	2200      	movs	r2, #0
 800591a:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 800591c:	4b39      	ldr	r3, [pc, #228]	@ (8005a04 <checkAktifCalisma+0x157c>)
 800591e:	2200      	movs	r2, #0
 8005920:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 8005922:	2005      	movs	r0, #5
 8005924:	f7fe fba6 	bl	8004074 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8005928:	4b38      	ldr	r3, [pc, #224]	@ (8005a0c <checkAktifCalisma+0x1584>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d107      	bne.n	8005940 <checkAktifCalisma+0x14b8>
 8005930:	4b37      	ldr	r3, [pc, #220]	@ (8005a10 <checkAktifCalisma+0x1588>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d103      	bne.n	8005940 <checkAktifCalisma+0x14b8>
 8005938:	4b36      	ldr	r3, [pc, #216]	@ (8005a14 <checkAktifCalisma+0x158c>)
 800593a:	781b      	ldrb	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d01b      	beq.n	8005978 <checkAktifCalisma+0x14f0>
 8005940:	4b35      	ldr	r3, [pc, #212]	@ (8005a18 <checkAktifCalisma+0x1590>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	f083 0301 	eor.w	r3, r3, #1
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d014      	beq.n	8005978 <checkAktifCalisma+0x14f0>
				    if(millis-timer4>=makineCalismaTmr) {
 800594e:	4b33      	ldr	r3, [pc, #204]	@ (8005a1c <checkAktifCalisma+0x1594>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	4b33      	ldr	r3, [pc, #204]	@ (8005a20 <checkAktifCalisma+0x1598>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	4a32      	ldr	r2, [pc, #200]	@ (8005a24 <checkAktifCalisma+0x159c>)
 800595a:	7812      	ldrb	r2, [r2, #0]
 800595c:	4293      	cmp	r3, r2
 800595e:	d30b      	bcc.n	8005978 <checkAktifCalisma+0x14f0>
					  	hataVar=1;
 8005960:	4b26      	ldr	r3, [pc, #152]	@ (80059fc <checkAktifCalisma+0x1574>)
 8005962:	2201      	movs	r2, #1
 8005964:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 8005966:	2006      	movs	r0, #6
 8005968:	f7fb fb86 	bl	8001078 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 800596c:	2006      	movs	r0, #6
 800596e:	f7fb fb2b 	bl	8000fc8 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8005972:	4b29      	ldr	r3, [pc, #164]	@ (8005a18 <checkAktifCalisma+0x1590>)
 8005974:	2201      	movs	r2, #1
 8005976:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8005978:	4b27      	ldr	r3, [pc, #156]	@ (8005a18 <checkAktifCalisma+0x1590>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d013      	beq.n	80059a8 <checkAktifCalisma+0x1520>
 8005980:	2108      	movs	r1, #8
 8005982:	481b      	ldr	r0, [pc, #108]	@ (80059f0 <checkAktifCalisma+0x1568>)
 8005984:	f004 ff7e 	bl	800a884 <HAL_GPIO_ReadPin>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00c      	beq.n	80059a8 <checkAktifCalisma+0x1520>
 800598e:	4b16      	ldr	r3, [pc, #88]	@ (80059e8 <checkAktifCalisma+0x1560>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	f083 0301 	eor.w	r3, r3, #1
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <checkAktifCalisma+0x1520>
					maksimumcalismahatasi=0;
 800599c:	4b1e      	ldr	r3, [pc, #120]	@ (8005a18 <checkAktifCalisma+0x1590>)
 800599e:	2200      	movs	r2, #0
 80059a0:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 80059a2:	2006      	movs	r0, #6
 80059a4:	f7fe fb66 	bl	8004074 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80059a8:	4b1f      	ldr	r3, [pc, #124]	@ (8005a28 <checkAktifCalisma+0x15a0>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d10b      	bne.n	80059c8 <checkAktifCalisma+0x1540>
 80059b0:	4b17      	ldr	r3, [pc, #92]	@ (8005a10 <checkAktifCalisma+0x1588>)
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d107      	bne.n	80059c8 <checkAktifCalisma+0x1540>
 80059b8:	4b1c      	ldr	r3, [pc, #112]	@ (8005a2c <checkAktifCalisma+0x15a4>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d103      	bne.n	80059c8 <checkAktifCalisma+0x1540>
 80059c0:	4b14      	ldr	r3, [pc, #80]	@ (8005a14 <checkAktifCalisma+0x158c>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d035      	beq.n	8005a34 <checkAktifCalisma+0x15ac>
					makineCalisiyor=0;
 80059c8:	4b19      	ldr	r3, [pc, #100]	@ (8005a30 <checkAktifCalisma+0x15a8>)
 80059ca:	2200      	movs	r2, #0
 80059cc:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 80059ce:	4b07      	ldr	r3, [pc, #28]	@ (80059ec <checkAktifCalisma+0x1564>)
 80059d0:	2201      	movs	r2, #1
 80059d2:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 80059d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005a04 <checkAktifCalisma+0x157c>)
 80059d6:	2201      	movs	r2, #1
 80059d8:	701a      	strb	r2, [r3, #0]
 80059da:	e032      	b.n	8005a42 <checkAktifCalisma+0x15ba>
 80059dc:	20001119 	.word	0x20001119
 80059e0:	200010bf 	.word	0x200010bf
 80059e4:	40010c00 	.word	0x40010c00
 80059e8:	20001109 	.word	0x20001109
 80059ec:	2000111d 	.word	0x2000111d
 80059f0:	40010800 	.word	0x40010800
 80059f4:	200010c4 	.word	0x200010c4
 80059f8:	2000111a 	.word	0x2000111a
 80059fc:	20001110 	.word	0x20001110
 8005a00:	200010fd 	.word	0x200010fd
 8005a04:	2000111e 	.word	0x2000111e
 8005a08:	2000111b 	.word	0x2000111b
 8005a0c:	2000110f 	.word	0x2000110f
 8005a10:	200010f4 	.word	0x200010f4
 8005a14:	200010f3 	.word	0x200010f3
 8005a18:	2000110a 	.word	0x2000110a
 8005a1c:	20001094 	.word	0x20001094
 8005a20:	200010a8 	.word	0x200010a8
 8005a24:	200010d4 	.word	0x200010d4
 8005a28:	200010f1 	.word	0x200010f1
 8005a2c:	200010f2 	.word	0x200010f2
 8005a30:	20001111 	.word	0x20001111
				} else {
					makineCalisiyor=1;
 8005a34:	4b3a      	ldr	r3, [pc, #232]	@ (8005b20 <checkAktifCalisma+0x1698>)
 8005a36:	2201      	movs	r2, #1
 8005a38:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8005a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8005b24 <checkAktifCalisma+0x169c>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a3a      	ldr	r2, [pc, #232]	@ (8005b28 <checkAktifCalisma+0x16a0>)
 8005a40:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8005a42:	4b3a      	ldr	r3, [pc, #232]	@ (8005b2c <checkAktifCalisma+0x16a4>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d02f      	beq.n	8005aaa <checkAktifCalisma+0x1622>
 8005a4a:	4b39      	ldr	r3, [pc, #228]	@ (8005b30 <checkAktifCalisma+0x16a8>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	f083 0301 	eor.w	r3, r3, #1
 8005a52:	b2db      	uxtb	r3, r3
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d028      	beq.n	8005aaa <checkAktifCalisma+0x1622>
 8005a58:	4b36      	ldr	r3, [pc, #216]	@ (8005b34 <checkAktifCalisma+0x16ac>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	f083 0301 	eor.w	r3, r3, #1
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d021      	beq.n	8005aaa <checkAktifCalisma+0x1622>
 8005a66:	4b34      	ldr	r3, [pc, #208]	@ (8005b38 <checkAktifCalisma+0x16b0>)
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	f083 0301 	eor.w	r3, r3, #1
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d01a      	beq.n	8005aaa <checkAktifCalisma+0x1622>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8005a74:	4b31      	ldr	r3, [pc, #196]	@ (8005b3c <checkAktifCalisma+0x16b4>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	f083 0301 	eor.w	r3, r3, #1
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d013      	beq.n	8005aaa <checkAktifCalisma+0x1622>
 8005a82:	4b2f      	ldr	r3, [pc, #188]	@ (8005b40 <checkAktifCalisma+0x16b8>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	f083 0301 	eor.w	r3, r3, #1
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00c      	beq.n	8005aaa <checkAktifCalisma+0x1622>
 8005a90:	4b2c      	ldr	r3, [pc, #176]	@ (8005b44 <checkAktifCalisma+0x16bc>)
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	f083 0301 	eor.w	r3, r3, #1
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d005      	beq.n	8005aaa <checkAktifCalisma+0x1622>

					hataVar=0;
 8005a9e:	4b23      	ldr	r3, [pc, #140]	@ (8005b2c <checkAktifCalisma+0x16a4>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8005aa4:	2007      	movs	r0, #7
 8005aa6:	f7fe fae5 	bl	8004074 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8005aaa:	4b20      	ldr	r3, [pc, #128]	@ (8005b2c <checkAktifCalisma+0x16a4>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d02a      	beq.n	8005b08 <checkAktifCalisma+0x1680>
 8005ab2:	4b1f      	ldr	r3, [pc, #124]	@ (8005b30 <checkAktifCalisma+0x16a8>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	f083 0301 	eor.w	r3, r3, #1
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d023      	beq.n	8005b08 <checkAktifCalisma+0x1680>
 8005ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8005b34 <checkAktifCalisma+0x16ac>)
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01f      	beq.n	8005b08 <checkAktifCalisma+0x1680>
 8005ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b38 <checkAktifCalisma+0x16b0>)
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	f083 0301 	eor.w	r3, r3, #1
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d018      	beq.n	8005b08 <checkAktifCalisma+0x1680>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8005ad6:	4b19      	ldr	r3, [pc, #100]	@ (8005b3c <checkAktifCalisma+0x16b4>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	f083 0301 	eor.w	r3, r3, #1
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d011      	beq.n	8005b08 <checkAktifCalisma+0x1680>
 8005ae4:	4b16      	ldr	r3, [pc, #88]	@ (8005b40 <checkAktifCalisma+0x16b8>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	f083 0301 	eor.w	r3, r3, #1
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d00a      	beq.n	8005b08 <checkAktifCalisma+0x1680>
 8005af2:	4b14      	ldr	r3, [pc, #80]	@ (8005b44 <checkAktifCalisma+0x16bc>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	f083 0301 	eor.w	r3, r3, #1
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d003      	beq.n	8005b08 <checkAktifCalisma+0x1680>
				{
					EmnCerHataMakYukariCalis=1;
 8005b00:	4b11      	ldr	r3, [pc, #68]	@ (8005b48 <checkAktifCalisma+0x16c0>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 8005b06:	e009      	b.n	8005b1c <checkAktifCalisma+0x1694>
				else if(emniyetCercevesihatasi==0)
 8005b08:	4b0a      	ldr	r3, [pc, #40]	@ (8005b34 <checkAktifCalisma+0x16ac>)
 8005b0a:	781b      	ldrb	r3, [r3, #0]
 8005b0c:	f083 0301 	eor.w	r3, r3, #1
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d002      	beq.n	8005b1c <checkAktifCalisma+0x1694>
					EmnCerHataMakYukariCalis=0;
 8005b16:	4b0c      	ldr	r3, [pc, #48]	@ (8005b48 <checkAktifCalisma+0x16c0>)
 8005b18:	2200      	movs	r2, #0
 8005b1a:	701a      	strb	r2, [r3, #0]
}
 8005b1c:	bf00      	nop
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	20001111 	.word	0x20001111
 8005b24:	20001094 	.word	0x20001094
 8005b28:	200010a8 	.word	0x200010a8
 8005b2c:	20001110 	.word	0x20001110
 8005b30:	2000110b 	.word	0x2000110b
 8005b34:	2000110c 	.word	0x2000110c
 8005b38:	20001119 	.word	0x20001119
 8005b3c:	2000111a 	.word	0x2000111a
 8005b40:	2000111b 	.word	0x2000111b
 8005b44:	2000110a 	.word	0x2000110a
 8005b48:	2000111f 	.word	0x2000111f

08005b4c <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8005b50:	4b8b      	ldr	r3, [pc, #556]	@ (8005d80 <checkDemoModCalisma+0x234>)
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	f040 81c4 	bne.w	8005ee2 <checkDemoModCalisma+0x396>
 8005b5a:	4b8a      	ldr	r3, [pc, #552]	@ (8005d84 <checkDemoModCalisma+0x238>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 81bf 	beq.w	8005ee2 <checkDemoModCalisma+0x396>
 8005b64:	4b88      	ldr	r3, [pc, #544]	@ (8005d88 <checkDemoModCalisma+0x23c>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f040 81ba 	bne.w	8005ee2 <checkDemoModCalisma+0x396>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005b6e:	2102      	movs	r1, #2
 8005b70:	4886      	ldr	r0, [pc, #536]	@ (8005d8c <checkDemoModCalisma+0x240>)
 8005b72:	f004 fe87 	bl	800a884 <HAL_GPIO_ReadPin>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d11d      	bne.n	8005bb8 <checkDemoModCalisma+0x6c>
						&& (demoAsagiCalis==0)
 8005b7c:	4b84      	ldr	r3, [pc, #528]	@ (8005d90 <checkDemoModCalisma+0x244>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	f083 0301 	eor.w	r3, r3, #1
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d016      	beq.n	8005bb8 <checkDemoModCalisma+0x6c>
						&& (demoDevYukari==0)
 8005b8a:	4b82      	ldr	r3, [pc, #520]	@ (8005d94 <checkDemoModCalisma+0x248>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	f083 0301 	eor.w	r3, r3, #1
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00f      	beq.n	8005bb8 <checkDemoModCalisma+0x6c>
						&& (demoDevAsagi==0)) {
 8005b98:	4b7f      	ldr	r3, [pc, #508]	@ (8005d98 <checkDemoModCalisma+0x24c>)
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	f083 0301 	eor.w	r3, r3, #1
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d008      	beq.n	8005bb8 <checkDemoModCalisma+0x6c>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	2104      	movs	r1, #4
 8005baa:	487c      	ldr	r0, [pc, #496]	@ (8005d9c <checkDemoModCalisma+0x250>)
 8005bac:	f004 fe81 	bl	800a8b2 <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8005bb0:	4b7b      	ldr	r3, [pc, #492]	@ (8005da0 <checkDemoModCalisma+0x254>)
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	701a      	strb	r2, [r3, #0]
 8005bb6:	e00e      	b.n	8005bd6 <checkDemoModCalisma+0x8a>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005bb8:	2102      	movs	r1, #2
 8005bba:	4874      	ldr	r0, [pc, #464]	@ (8005d8c <checkDemoModCalisma+0x240>)
 8005bbc:	f004 fe62 	bl	800a884 <HAL_GPIO_ReadPin>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d107      	bne.n	8005bd6 <checkDemoModCalisma+0x8a>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	2104      	movs	r1, #4
 8005bca:	4874      	ldr	r0, [pc, #464]	@ (8005d9c <checkDemoModCalisma+0x250>)
 8005bcc:	f004 fe71 	bl	800a8b2 <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8005bd0:	4b73      	ldr	r3, [pc, #460]	@ (8005da0 <checkDemoModCalisma+0x254>)
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8005bd6:	4b72      	ldr	r3, [pc, #456]	@ (8005da0 <checkDemoModCalisma+0x254>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10b      	bne.n	8005bf6 <checkDemoModCalisma+0xaa>
 8005bde:	4b6d      	ldr	r3, [pc, #436]	@ (8005d94 <checkDemoModCalisma+0x248>)
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d107      	bne.n	8005bf6 <checkDemoModCalisma+0xaa>
 8005be6:	4b6c      	ldr	r3, [pc, #432]	@ (8005d98 <checkDemoModCalisma+0x24c>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d103      	bne.n	8005bf6 <checkDemoModCalisma+0xaa>
 8005bee:	4b68      	ldr	r3, [pc, #416]	@ (8005d90 <checkDemoModCalisma+0x244>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00c      	beq.n	8005c10 <checkDemoModCalisma+0xc4>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005bfc:	4867      	ldr	r0, [pc, #412]	@ (8005d9c <checkDemoModCalisma+0x250>)
 8005bfe:	f004 fe58 	bl	800a8b2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005c02:	2201      	movs	r2, #1
 8005c04:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c08:	4864      	ldr	r0, [pc, #400]	@ (8005d9c <checkDemoModCalisma+0x250>)
 8005c0a:	f004 fe52 	bl	800a8b2 <HAL_GPIO_WritePin>
 8005c0e:	e00b      	b.n	8005c28 <checkDemoModCalisma+0xdc>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005c10:	2200      	movs	r2, #0
 8005c12:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c16:	4861      	ldr	r0, [pc, #388]	@ (8005d9c <checkDemoModCalisma+0x250>)
 8005c18:	f004 fe4b 	bl	800a8b2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c22:	485e      	ldr	r0, [pc, #376]	@ (8005d9c <checkDemoModCalisma+0x250>)
 8005c24:	f004 fe45 	bl	800a8b2 <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c28:	2102      	movs	r1, #2
 8005c2a:	4858      	ldr	r0, [pc, #352]	@ (8005d8c <checkDemoModCalisma+0x240>)
 8005c2c:	f004 fe2a 	bl	800a884 <HAL_GPIO_ReadPin>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d10d      	bne.n	8005c52 <checkDemoModCalisma+0x106>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005c36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c3a:	4854      	ldr	r0, [pc, #336]	@ (8005d8c <checkDemoModCalisma+0x240>)
 8005c3c:	f004 fe22 	bl	800a884 <HAL_GPIO_ReadPin>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d105      	bne.n	8005c52 <checkDemoModCalisma+0x106>
						&& (demoYukariCalis==0)
 8005c46:	4b56      	ldr	r3, [pc, #344]	@ (8005da0 <checkDemoModCalisma+0x254>)
 8005c48:	781b      	ldrb	r3, [r3, #0]
 8005c4a:	f083 0301 	eor.w	r3, r3, #1
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c52:	2102      	movs	r1, #2
 8005c54:	484d      	ldr	r0, [pc, #308]	@ (8005d8c <checkDemoModCalisma+0x240>)
 8005c56:	f004 fe15 	bl	800a884 <HAL_GPIO_ReadPin>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d125      	bne.n	8005cac <checkDemoModCalisma+0x160>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005c60:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c64:	4849      	ldr	r0, [pc, #292]	@ (8005d8c <checkDemoModCalisma+0x240>)
 8005c66:	f004 fe0d 	bl	800a884 <HAL_GPIO_ReadPin>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d11d      	bne.n	8005cac <checkDemoModCalisma+0x160>
						&&(demoYukariCalis==0)
 8005c70:	4b4b      	ldr	r3, [pc, #300]	@ (8005da0 <checkDemoModCalisma+0x254>)
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	f083 0301 	eor.w	r3, r3, #1
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d016      	beq.n	8005cac <checkDemoModCalisma+0x160>
						&&(demoAsagiCalis==0)
 8005c7e:	4b44      	ldr	r3, [pc, #272]	@ (8005d90 <checkDemoModCalisma+0x244>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	f083 0301 	eor.w	r3, r3, #1
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00f      	beq.n	8005cac <checkDemoModCalisma+0x160>
						&& (demoDevAsagi==0)) {
 8005c8c:	4b42      	ldr	r3, [pc, #264]	@ (8005d98 <checkDemoModCalisma+0x24c>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	f083 0301 	eor.w	r3, r3, #1
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d008      	beq.n	8005cac <checkDemoModCalisma+0x160>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	2120      	movs	r1, #32
 8005c9e:	483b      	ldr	r0, [pc, #236]	@ (8005d8c <checkDemoModCalisma+0x240>)
 8005ca0:	f004 fe07 	bl	800a8b2 <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8005ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8005d94 <checkDemoModCalisma+0x248>)
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	e007      	b.n	8005cbc <checkDemoModCalisma+0x170>
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005cac:	2200      	movs	r2, #0
 8005cae:	2120      	movs	r1, #32
 8005cb0:	4836      	ldr	r0, [pc, #216]	@ (8005d8c <checkDemoModCalisma+0x240>)
 8005cb2:	f004 fdfe 	bl	800a8b2 <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8005cb6:	4b37      	ldr	r3, [pc, #220]	@ (8005d94 <checkDemoModCalisma+0x248>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005cbc:	2102      	movs	r1, #2
 8005cbe:	4833      	ldr	r0, [pc, #204]	@ (8005d8c <checkDemoModCalisma+0x240>)
 8005cc0:	f004 fde0 	bl	800a884 <HAL_GPIO_ReadPin>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d125      	bne.n	8005d16 <checkDemoModCalisma+0x1ca>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8005cca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005cce:	482f      	ldr	r0, [pc, #188]	@ (8005d8c <checkDemoModCalisma+0x240>)
 8005cd0:	f004 fdd8 	bl	800a884 <HAL_GPIO_ReadPin>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d11d      	bne.n	8005d16 <checkDemoModCalisma+0x1ca>
						&&(demoYukariCalis==0)
 8005cda:	4b31      	ldr	r3, [pc, #196]	@ (8005da0 <checkDemoModCalisma+0x254>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	f083 0301 	eor.w	r3, r3, #1
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d016      	beq.n	8005d16 <checkDemoModCalisma+0x1ca>
						&&(demoDevYukari==0)
 8005ce8:	4b2a      	ldr	r3, [pc, #168]	@ (8005d94 <checkDemoModCalisma+0x248>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	f083 0301 	eor.w	r3, r3, #1
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00f      	beq.n	8005d16 <checkDemoModCalisma+0x1ca>
						&& (demoAsagiCalis==0)) {
 8005cf6:	4b26      	ldr	r3, [pc, #152]	@ (8005d90 <checkDemoModCalisma+0x244>)
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	f083 0301 	eor.w	r3, r3, #1
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d008      	beq.n	8005d16 <checkDemoModCalisma+0x1ca>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005d04:	2201      	movs	r2, #1
 8005d06:	2110      	movs	r1, #16
 8005d08:	4820      	ldr	r0, [pc, #128]	@ (8005d8c <checkDemoModCalisma+0x240>)
 8005d0a:	f004 fdd2 	bl	800a8b2 <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8005d0e:	4b22      	ldr	r3, [pc, #136]	@ (8005d98 <checkDemoModCalisma+0x24c>)
 8005d10:	2201      	movs	r2, #1
 8005d12:	701a      	strb	r2, [r3, #0]
 8005d14:	e007      	b.n	8005d26 <checkDemoModCalisma+0x1da>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005d16:	2200      	movs	r2, #0
 8005d18:	2110      	movs	r1, #16
 8005d1a:	481c      	ldr	r0, [pc, #112]	@ (8005d8c <checkDemoModCalisma+0x240>)
 8005d1c:	f004 fdc9 	bl	800a8b2 <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8005d20:	4b1d      	ldr	r3, [pc, #116]	@ (8005d98 <checkDemoModCalisma+0x24c>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005d26:	2104      	movs	r1, #4
 8005d28:	4818      	ldr	r0, [pc, #96]	@ (8005d8c <checkDemoModCalisma+0x240>)
 8005d2a:	f004 fdab 	bl	800a884 <HAL_GPIO_ReadPin>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d139      	bne.n	8005da8 <checkDemoModCalisma+0x25c>
						&& (demoYukariCalis==0)
 8005d34:	4b1a      	ldr	r3, [pc, #104]	@ (8005da0 <checkDemoModCalisma+0x254>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	f083 0301 	eor.w	r3, r3, #1
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d032      	beq.n	8005da8 <checkDemoModCalisma+0x25c>
						&& (demoDevAsagi==0)
 8005d42:	4b15      	ldr	r3, [pc, #84]	@ (8005d98 <checkDemoModCalisma+0x24c>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	f083 0301 	eor.w	r3, r3, #1
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d02b      	beq.n	8005da8 <checkDemoModCalisma+0x25c>
						&& (demoDevYukari==0)) {
 8005d50:	4b10      	ldr	r3, [pc, #64]	@ (8005d94 <checkDemoModCalisma+0x248>)
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	f083 0301 	eor.w	r3, r3, #1
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d024      	beq.n	8005da8 <checkDemoModCalisma+0x25c>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005d5e:	2201      	movs	r2, #1
 8005d60:	2102      	movs	r1, #2
 8005d62:	480e      	ldr	r0, [pc, #56]	@ (8005d9c <checkDemoModCalisma+0x250>)
 8005d64:	f004 fda5 	bl	800a8b2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005d68:	2201      	movs	r2, #1
 8005d6a:	2101      	movs	r1, #1
 8005d6c:	480b      	ldr	r0, [pc, #44]	@ (8005d9c <checkDemoModCalisma+0x250>)
 8005d6e:	f004 fda0 	bl	800a8b2 <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8005d72:	4b07      	ldr	r3, [pc, #28]	@ (8005d90 <checkDemoModCalisma+0x244>)
 8005d74:	2201      	movs	r2, #1
 8005d76:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 8005d78:	4b0a      	ldr	r3, [pc, #40]	@ (8005da4 <checkDemoModCalisma+0x258>)
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	701a      	strb	r2, [r3, #0]
 8005d7e:	e027      	b.n	8005dd0 <checkDemoModCalisma+0x284>
 8005d80:	200010da 	.word	0x200010da
 8005d84:	2000110d 	.word	0x2000110d
 8005d88:	200010d9 	.word	0x200010d9
 8005d8c:	40011000 	.word	0x40011000
 8005d90:	20001114 	.word	0x20001114
 8005d94:	20001115 	.word	0x20001115
 8005d98:	20001116 	.word	0x20001116
 8005d9c:	40010c00 	.word	0x40010c00
 8005da0:	20001113 	.word	0x20001113
 8005da4:	200010fa 	.word	0x200010fa
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8005da8:	2104      	movs	r1, #4
 8005daa:	486d      	ldr	r0, [pc, #436]	@ (8005f60 <checkDemoModCalisma+0x414>)
 8005dac:	f004 fd6a 	bl	800a884 <HAL_GPIO_ReadPin>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d10c      	bne.n	8005dd0 <checkDemoModCalisma+0x284>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005db6:	2200      	movs	r2, #0
 8005db8:	2102      	movs	r1, #2
 8005dba:	486a      	ldr	r0, [pc, #424]	@ (8005f64 <checkDemoModCalisma+0x418>)
 8005dbc:	f004 fd79 	bl	800a8b2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	4867      	ldr	r0, [pc, #412]	@ (8005f64 <checkDemoModCalisma+0x418>)
 8005dc6:	f004 fd74 	bl	800a8b2 <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8005dca:	4b67      	ldr	r3, [pc, #412]	@ (8005f68 <checkDemoModCalisma+0x41c>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8005dd0:	2104      	movs	r1, #4
 8005dd2:	4863      	ldr	r0, [pc, #396]	@ (8005f60 <checkDemoModCalisma+0x414>)
 8005dd4:	f004 fd56 	bl	800a884 <HAL_GPIO_ReadPin>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d10d      	bne.n	8005dfa <checkDemoModCalisma+0x2ae>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005dde:	2201      	movs	r2, #1
 8005de0:	2180      	movs	r1, #128	@ 0x80
 8005de2:	4862      	ldr	r0, [pc, #392]	@ (8005f6c <checkDemoModCalisma+0x420>)
 8005de4:	f004 fd65 	bl	800a8b2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005de8:	2201      	movs	r2, #1
 8005dea:	2120      	movs	r1, #32
 8005dec:	485f      	ldr	r0, [pc, #380]	@ (8005f6c <checkDemoModCalisma+0x420>)
 8005dee:	f004 fd60 	bl	800a8b2 <HAL_GPIO_WritePin>
					timer3 = millis;
 8005df2:	4b5f      	ldr	r3, [pc, #380]	@ (8005f70 <checkDemoModCalisma+0x424>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a5f      	ldr	r2, [pc, #380]	@ (8005f74 <checkDemoModCalisma+0x428>)
 8005df8:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005dfa:	4b5d      	ldr	r3, [pc, #372]	@ (8005f70 <checkDemoModCalisma+0x424>)
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	4b5d      	ldr	r3, [pc, #372]	@ (8005f74 <checkDemoModCalisma+0x428>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	d909      	bls.n	8005e1c <checkDemoModCalisma+0x2d0>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005e08:	2200      	movs	r2, #0
 8005e0a:	2180      	movs	r1, #128	@ 0x80
 8005e0c:	4857      	ldr	r0, [pc, #348]	@ (8005f6c <checkDemoModCalisma+0x420>)
 8005e0e:	f004 fd50 	bl	800a8b2 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005e12:	2200      	movs	r2, #0
 8005e14:	2120      	movs	r1, #32
 8005e16:	4855      	ldr	r0, [pc, #340]	@ (8005f6c <checkDemoModCalisma+0x420>)
 8005e18:	f004 fd4b 	bl	800a8b2 <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005e1c:	2102      	movs	r1, #2
 8005e1e:	4850      	ldr	r0, [pc, #320]	@ (8005f60 <checkDemoModCalisma+0x414>)
 8005e20:	f004 fd30 	bl	800a884 <HAL_GPIO_ReadPin>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d108      	bne.n	8005e3c <checkDemoModCalisma+0x2f0>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	2140      	movs	r1, #64	@ 0x40
 8005e2e:	484f      	ldr	r0, [pc, #316]	@ (8005f6c <checkDemoModCalisma+0x420>)
 8005e30:	f004 fd3f 	bl	800a8b2 <HAL_GPIO_WritePin>
					timer3 = millis;
 8005e34:	4b4e      	ldr	r3, [pc, #312]	@ (8005f70 <checkDemoModCalisma+0x424>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a4e      	ldr	r2, [pc, #312]	@ (8005f74 <checkDemoModCalisma+0x428>)
 8005e3a:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005e3c:	4b4c      	ldr	r3, [pc, #304]	@ (8005f70 <checkDemoModCalisma+0x424>)
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	4b4c      	ldr	r3, [pc, #304]	@ (8005f74 <checkDemoModCalisma+0x428>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	2b04      	cmp	r3, #4
 8005e48:	d904      	bls.n	8005e54 <checkDemoModCalisma+0x308>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	2140      	movs	r1, #64	@ 0x40
 8005e4e:	4847      	ldr	r0, [pc, #284]	@ (8005f6c <checkDemoModCalisma+0x420>)
 8005e50:	f004 fd2f 	bl	800a8b2 <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8005e54:	4b48      	ldr	r3, [pc, #288]	@ (8005f78 <checkDemoModCalisma+0x42c>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d024      	beq.n	8005ea6 <checkDemoModCalisma+0x35a>
 8005e5c:	4b47      	ldr	r3, [pc, #284]	@ (8005f7c <checkDemoModCalisma+0x430>)
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d020      	beq.n	8005ea6 <checkDemoModCalisma+0x35a>

					calismaSayisiDemo++;
 8005e64:	4b46      	ldr	r3, [pc, #280]	@ (8005f80 <checkDemoModCalisma+0x434>)
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	b2da      	uxtb	r2, r3
 8005e6c:	4b44      	ldr	r3, [pc, #272]	@ (8005f80 <checkDemoModCalisma+0x434>)
 8005e6e:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8005e70:	4b44      	ldr	r3, [pc, #272]	@ (8005f84 <checkDemoModCalisma+0x438>)
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	2bff      	cmp	r3, #255	@ 0xff
 8005e76:	d108      	bne.n	8005e8a <checkDemoModCalisma+0x33e>
							calismaSayisi = 0;
 8005e78:	4b42      	ldr	r3, [pc, #264]	@ (8005f84 <checkDemoModCalisma+0x438>)
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	701a      	strb	r2, [r3, #0]
							calismaCount++;
 8005e7e:	4b42      	ldr	r3, [pc, #264]	@ (8005f88 <checkDemoModCalisma+0x43c>)
 8005e80:	781b      	ldrb	r3, [r3, #0]
 8005e82:	3301      	adds	r3, #1
 8005e84:	b2da      	uxtb	r2, r3
 8005e86:	4b40      	ldr	r3, [pc, #256]	@ (8005f88 <checkDemoModCalisma+0x43c>)
 8005e88:	701a      	strb	r2, [r3, #0]
				}
					eepromData[28] = calismaSayisiDemo;
 8005e8a:	4b3d      	ldr	r3, [pc, #244]	@ (8005f80 <checkDemoModCalisma+0x434>)
 8005e8c:	781a      	ldrb	r2, [r3, #0]
 8005e8e:	4b3f      	ldr	r3, [pc, #252]	@ (8005f8c <checkDemoModCalisma+0x440>)
 8005e90:	771a      	strb	r2, [r3, #28]
					eepromData[30] = calismaCountDemo;
 8005e92:	4b3f      	ldr	r3, [pc, #252]	@ (8005f90 <checkDemoModCalisma+0x444>)
 8005e94:	781a      	ldrb	r2, [r3, #0]
 8005e96:	4b3d      	ldr	r3, [pc, #244]	@ (8005f8c <checkDemoModCalisma+0x440>)
 8005e98:	779a      	strb	r2, [r3, #30]

					hafizaYaz=1;
 8005e9a:	4b3e      	ldr	r3, [pc, #248]	@ (8005f94 <checkDemoModCalisma+0x448>)
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 8005ea0:	4b36      	ldr	r3, [pc, #216]	@ (8005f7c <checkDemoModCalisma+0x430>)
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8005ea6:	4b3c      	ldr	r3, [pc, #240]	@ (8005f98 <checkDemoModCalisma+0x44c>)
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d156      	bne.n	8005f5c <checkDemoModCalisma+0x410>
					lcd_print(2,1,"Cycle     ");
 8005eae:	4a3b      	ldr	r2, [pc, #236]	@ (8005f9c <checkDemoModCalisma+0x450>)
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	2002      	movs	r0, #2
 8005eb4:	f003 f92e 	bl	8009114 <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8005eb8:	4a39      	ldr	r2, [pc, #228]	@ (8005fa0 <checkDemoModCalisma+0x454>)
 8005eba:	2101      	movs	r1, #1
 8005ebc:	2001      	movs	r0, #1
 8005ebe:	f003 f929 	bl	8009114 <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 8005ec2:	4b2f      	ldr	r3, [pc, #188]	@ (8005f80 <checkDemoModCalisma+0x434>)
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	220a      	movs	r2, #10
 8005ec8:	4936      	ldr	r1, [pc, #216]	@ (8005fa4 <checkDemoModCalisma+0x458>)
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f007 ffc8 	bl	800de60 <itoa>
					lcd_print(2,11,snum);
 8005ed0:	4a34      	ldr	r2, [pc, #208]	@ (8005fa4 <checkDemoModCalisma+0x458>)
 8005ed2:	210b      	movs	r1, #11
 8005ed4:	2002      	movs	r0, #2
 8005ed6:	f003 f91d 	bl	8009114 <lcd_print>
					mesajYazildi=1;
 8005eda:	4b33      	ldr	r3, [pc, #204]	@ (8005fa8 <checkDemoModCalisma+0x45c>)
 8005edc:	2201      	movs	r2, #1
 8005ede:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8005ee0:	e03c      	b.n	8005f5c <checkDemoModCalisma+0x410>
				}
			} else if(demoMode==1 || menuGiris==1) {
 8005ee2:	4b32      	ldr	r3, [pc, #200]	@ (8005fac <checkDemoModCalisma+0x460>)
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d003      	beq.n	8005ef2 <checkDemoModCalisma+0x3a6>
 8005eea:	4b2b      	ldr	r3, [pc, #172]	@ (8005f98 <checkDemoModCalisma+0x44c>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d134      	bne.n	8005f5c <checkDemoModCalisma+0x410>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ef8:	481a      	ldr	r0, [pc, #104]	@ (8005f64 <checkDemoModCalisma+0x418>)
 8005efa:	f004 fcda 	bl	800a8b2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005efe:	2200      	movs	r2, #0
 8005f00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005f04:	4817      	ldr	r0, [pc, #92]	@ (8005f64 <checkDemoModCalisma+0x418>)
 8005f06:	f004 fcd4 	bl	800a8b2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	2104      	movs	r1, #4
 8005f0e:	4815      	ldr	r0, [pc, #84]	@ (8005f64 <checkDemoModCalisma+0x418>)
 8005f10:	f004 fccf 	bl	800a8b2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005f14:	2200      	movs	r2, #0
 8005f16:	2102      	movs	r1, #2
 8005f18:	4812      	ldr	r0, [pc, #72]	@ (8005f64 <checkDemoModCalisma+0x418>)
 8005f1a:	f004 fcca 	bl	800a8b2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005f1e:	2200      	movs	r2, #0
 8005f20:	2101      	movs	r1, #1
 8005f22:	4810      	ldr	r0, [pc, #64]	@ (8005f64 <checkDemoModCalisma+0x418>)
 8005f24:	f004 fcc5 	bl	800a8b2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005f28:	2200      	movs	r2, #0
 8005f2a:	2120      	movs	r1, #32
 8005f2c:	480c      	ldr	r0, [pc, #48]	@ (8005f60 <checkDemoModCalisma+0x414>)
 8005f2e:	f004 fcc0 	bl	800a8b2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005f32:	2200      	movs	r2, #0
 8005f34:	2110      	movs	r1, #16
 8005f36:	480a      	ldr	r0, [pc, #40]	@ (8005f60 <checkDemoModCalisma+0x414>)
 8005f38:	f004 fcbb 	bl	800a8b2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	2180      	movs	r1, #128	@ 0x80
 8005f40:	480a      	ldr	r0, [pc, #40]	@ (8005f6c <checkDemoModCalisma+0x420>)
 8005f42:	f004 fcb6 	bl	800a8b2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005f46:	2200      	movs	r2, #0
 8005f48:	2140      	movs	r1, #64	@ 0x40
 8005f4a:	4808      	ldr	r0, [pc, #32]	@ (8005f6c <checkDemoModCalisma+0x420>)
 8005f4c:	f004 fcb1 	bl	800a8b2 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005f50:	2200      	movs	r2, #0
 8005f52:	2120      	movs	r1, #32
 8005f54:	4805      	ldr	r0, [pc, #20]	@ (8005f6c <checkDemoModCalisma+0x420>)
 8005f56:	f004 fcac 	bl	800a8b2 <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8005f5a:	e7ff      	b.n	8005f5c <checkDemoModCalisma+0x410>
 8005f5c:	bf00      	nop
 8005f5e:	bd80      	pop	{r7, pc}
 8005f60:	40011000 	.word	0x40011000
 8005f64:	40010c00 	.word	0x40010c00
 8005f68:	20001114 	.word	0x20001114
 8005f6c:	40010800 	.word	0x40010800
 8005f70:	20001094 	.word	0x20001094
 8005f74:	200010a4 	.word	0x200010a4
 8005f78:	20001113 	.word	0x20001113
 8005f7c:	200010fa 	.word	0x200010fa
 8005f80:	200010b5 	.word	0x200010b5
 8005f84:	200010b4 	.word	0x200010b4
 8005f88:	200010b6 	.word	0x200010b6
 8005f8c:	20000fec 	.word	0x20000fec
 8005f90:	200010b7 	.word	0x200010b7
 8005f94:	200010e8 	.word	0x200010e8
 8005f98:	200010d9 	.word	0x200010d9
 8005f9c:	0800f398 	.word	0x0800f398
 8005fa0:	0800f3a4 	.word	0x0800f3a4
 8005fa4:	2000105c 	.word	0x2000105c
 8005fa8:	200010f0 	.word	0x200010f0
 8005fac:	200010da 	.word	0x200010da

08005fb0 <mainLoop>:

void mainLoop() {
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
	while(1) {
		checkLCDBacklight();
 8005fb4:	f7fe f8b6 	bl	8004124 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8005fb8:	2101      	movs	r1, #1
 8005fba:	488b      	ldr	r0, [pc, #556]	@ (80061e8 <mainLoop+0x238>)
 8005fbc:	f004 fc62 	bl	800a884 <HAL_GPIO_ReadPin>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d136      	bne.n	8006034 <mainLoop+0x84>
 8005fc6:	2108      	movs	r1, #8
 8005fc8:	4888      	ldr	r0, [pc, #544]	@ (80061ec <mainLoop+0x23c>)
 8005fca:	f004 fc5b 	bl	800a884 <HAL_GPIO_ReadPin>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d12f      	bne.n	8006034 <mainLoop+0x84>
 8005fd4:	2102      	movs	r1, #2
 8005fd6:	4884      	ldr	r0, [pc, #528]	@ (80061e8 <mainLoop+0x238>)
 8005fd8:	f004 fc54 	bl	800a884 <HAL_GPIO_ReadPin>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d128      	bne.n	8006034 <mainLoop+0x84>
 8005fe2:	2104      	movs	r1, #4
 8005fe4:	4880      	ldr	r0, [pc, #512]	@ (80061e8 <mainLoop+0x238>)
 8005fe6:	f004 fc4d 	bl	800a884 <HAL_GPIO_ReadPin>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d121      	bne.n	8006034 <mainLoop+0x84>
 8005ff0:	2108      	movs	r1, #8
 8005ff2:	487d      	ldr	r0, [pc, #500]	@ (80061e8 <mainLoop+0x238>)
 8005ff4:	f004 fc46 	bl	800a884 <HAL_GPIO_ReadPin>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d11a      	bne.n	8006034 <mainLoop+0x84>
 8005ffe:	2180      	movs	r1, #128	@ 0x80
 8006000:	487a      	ldr	r0, [pc, #488]	@ (80061ec <mainLoop+0x23c>)
 8006002:	f004 fc3f 	bl	800a884 <HAL_GPIO_ReadPin>
 8006006:	4603      	mov	r3, r0
 8006008:	2b01      	cmp	r3, #1
 800600a:	d113      	bne.n	8006034 <mainLoop+0x84>
 800600c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006010:	4876      	ldr	r0, [pc, #472]	@ (80061ec <mainLoop+0x23c>)
 8006012:	f004 fc37 	bl	800a884 <HAL_GPIO_ReadPin>
 8006016:	4603      	mov	r3, r0
 8006018:	2b01      	cmp	r3, #1
 800601a:	d10b      	bne.n	8006034 <mainLoop+0x84>
 800601c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006020:	4872      	ldr	r0, [pc, #456]	@ (80061ec <mainLoop+0x23c>)
 8006022:	f004 fc2f 	bl	800a884 <HAL_GPIO_ReadPin>
 8006026:	4603      	mov	r3, r0
 8006028:	2b01      	cmp	r3, #1
 800602a:	d103      	bne.n	8006034 <mainLoop+0x84>
			butonKontrol=0;
 800602c:	4b70      	ldr	r3, [pc, #448]	@ (80061f0 <mainLoop+0x240>)
 800602e:	2200      	movs	r2, #0
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	e003      	b.n	800603c <mainLoop+0x8c>
		} else {
			backLightTimer = millis;
 8006034:	4b6f      	ldr	r3, [pc, #444]	@ (80061f4 <mainLoop+0x244>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a6f      	ldr	r2, [pc, #444]	@ (80061f8 <mainLoop+0x248>)
 800603a:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 800603c:	f7fe f924 	bl	8004288 <buttonCheck>
 8006040:	4603      	mov	r3, r0
 8006042:	2b01      	cmp	r3, #1
 8006044:	d103      	bne.n	800604e <mainLoop+0x9e>
			backLightTimer = millis;
 8006046:	4b6b      	ldr	r3, [pc, #428]	@ (80061f4 <mainLoop+0x244>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a6b      	ldr	r2, [pc, #428]	@ (80061f8 <mainLoop+0x248>)
 800604c:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz == 1) {
 800604e:	4b6b      	ldr	r3, [pc, #428]	@ (80061fc <mainLoop+0x24c>)
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d005      	beq.n	8006062 <mainLoop+0xb2>
			hafizaYaz = 0;
 8006056:	4b69      	ldr	r3, [pc, #420]	@ (80061fc <mainLoop+0x24c>)
 8006058:	2200      	movs	r2, #0
 800605a:	701a      	strb	r2, [r3, #0]
			saveEEPROM(1);
 800605c:	2001      	movs	r0, #1
 800605e:	f7fa fb21 	bl	80006a4 <saveEEPROM>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8006062:	4b67      	ldr	r3, [pc, #412]	@ (8006200 <mainLoop+0x250>)
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	f083 0301 	eor.w	r3, r3, #1
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	d043      	beq.n	80060f8 <mainLoop+0x148>
 8006070:	4864      	ldr	r0, [pc, #400]	@ (8006204 <mainLoop+0x254>)
 8006072:	f005 fa23 	bl	800b4bc <HAL_I2C_GetState>
 8006076:	4603      	mov	r3, r0
 8006078:	2b20      	cmp	r3, #32
 800607a:	d13d      	bne.n	80060f8 <mainLoop+0x148>
		  if(ilkOkuma==0) {
 800607c:	4b62      	ldr	r3, [pc, #392]	@ (8006208 <mainLoop+0x258>)
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	f083 0301 	eor.w	r3, r3, #1
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d028      	beq.n	80060dc <mainLoop+0x12c>
			  lcd_print(1, 1, eepromTextGN);
 800608a:	4a60      	ldr	r2, [pc, #384]	@ (800620c <mainLoop+0x25c>)
 800608c:	2101      	movs	r1, #1
 800608e:	2001      	movs	r0, #1
 8006090:	f003 f840 	bl	8009114 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8006094:	4a5e      	ldr	r2, [pc, #376]	@ (8006210 <mainLoop+0x260>)
 8006096:	2101      	movs	r1, #1
 8006098:	2002      	movs	r0, #2
 800609a:	f003 f83b 	bl	8009114 <lcd_print>
			  HAL_Delay(1000);
 800609e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80060a2:	f003 fd91 	bl	8009bc8 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80060a6:	bf00      	nop
 80060a8:	4856      	ldr	r0, [pc, #344]	@ (8006204 <mainLoop+0x254>)
 80060aa:	f005 fa14 	bl	800b4d6 <HAL_I2C_GetError>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d0f9      	beq.n	80060a8 <mainLoop+0xf8>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80060b4:	e003      	b.n	80060be <mainLoop+0x10e>
				  HAL_Delay(1000);
 80060b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80060ba:	f003 fd85 	bl	8009bc8 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80060be:	4851      	ldr	r0, [pc, #324]	@ (8006204 <mainLoop+0x254>)
 80060c0:	f005 f9fc 	bl	800b4bc <HAL_I2C_GetState>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b20      	cmp	r3, #32
 80060c8:	d1f5      	bne.n	80060b6 <mainLoop+0x106>
			  }

			  lcd_print(2, 1, dataOkunduText);
 80060ca:	4a52      	ldr	r2, [pc, #328]	@ (8006214 <mainLoop+0x264>)
 80060cc:	2101      	movs	r1, #1
 80060ce:	2002      	movs	r0, #2
 80060d0:	f003 f820 	bl	8009114 <lcd_print>

			  ilkOkuma=1;
 80060d4:	4b4c      	ldr	r3, [pc, #304]	@ (8006208 <mainLoop+0x258>)
 80060d6:	2201      	movs	r2, #1
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	e006      	b.n	80060ea <mainLoop+0x13a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 80060dc:	4a4e      	ldr	r2, [pc, #312]	@ (8006218 <mainLoop+0x268>)
 80060de:	2101      	movs	r1, #1
 80060e0:	2002      	movs	r0, #2
 80060e2:	f003 f817 	bl	8009114 <lcd_print>
			  lcd_clear();
 80060e6:	f003 f841 	bl	800916c <lcd_clear>
		  }

		  lcd_clear();
 80060ea:	f003 f83f 	bl	800916c <lcd_clear>

		  eepromKontrol();
 80060ee:	f7fa f8a1 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 80060f2:	4b43      	ldr	r3, [pc, #268]	@ (8006200 <mainLoop+0x250>)
 80060f4:	2201      	movs	r2, #1
 80060f6:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80060f8:	4b48      	ldr	r3, [pc, #288]	@ (800621c <mainLoop+0x26c>)
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d11c      	bne.n	800613a <mainLoop+0x18a>
 8006100:	4b47      	ldr	r3, [pc, #284]	@ (8006220 <mainLoop+0x270>)
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	f083 0301 	eor.w	r3, r3, #1
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d015      	beq.n	800613a <mainLoop+0x18a>
 800610e:	4b45      	ldr	r3, [pc, #276]	@ (8006224 <mainLoop+0x274>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d111      	bne.n	800613a <mainLoop+0x18a>
			lcd_clear();
 8006116:	f003 f829 	bl	800916c <lcd_clear>
			HAL_Delay(10);
 800611a:	200a      	movs	r0, #10
 800611c:	f003 fd54 	bl	8009bc8 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8006120:	4a41      	ldr	r2, [pc, #260]	@ (8006228 <mainLoop+0x278>)
 8006122:	2101      	movs	r1, #1
 8006124:	2001      	movs	r0, #1
 8006126:	f002 fff5 	bl	8009114 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 800612a:	4a40      	ldr	r2, [pc, #256]	@ (800622c <mainLoop+0x27c>)
 800612c:	2101      	movs	r1, #1
 800612e:	2002      	movs	r0, #2
 8006130:	f002 fff0 	bl	8009114 <lcd_print>
			mesajYazildi=1;
 8006134:	4b3a      	ldr	r3, [pc, #232]	@ (8006220 <mainLoop+0x270>)
 8006136:	2201      	movs	r2, #1
 8006138:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 800613a:	4b38      	ldr	r3, [pc, #224]	@ (800621c <mainLoop+0x26c>)
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d112      	bne.n	8006168 <mainLoop+0x1b8>
 8006142:	2102      	movs	r1, #2
 8006144:	4828      	ldr	r0, [pc, #160]	@ (80061e8 <mainLoop+0x238>)
 8006146:	f004 fb9d 	bl	800a884 <HAL_GPIO_ReadPin>
 800614a:	4603      	mov	r3, r0
 800614c:	2b01      	cmp	r3, #1
 800614e:	d10b      	bne.n	8006168 <mainLoop+0x1b8>
 8006150:	2104      	movs	r1, #4
 8006152:	4825      	ldr	r0, [pc, #148]	@ (80061e8 <mainLoop+0x238>)
 8006154:	f004 fb96 	bl	800a884 <HAL_GPIO_ReadPin>
 8006158:	4603      	mov	r3, r0
 800615a:	2b01      	cmp	r3, #1
 800615c:	d104      	bne.n	8006168 <mainLoop+0x1b8>
			menuGiris=1;
 800615e:	4b2f      	ldr	r3, [pc, #188]	@ (800621c <mainLoop+0x26c>)
 8006160:	2201      	movs	r2, #1
 8006162:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006164:	f003 f802 	bl	800916c <lcd_clear>
		}

		if(menuGiris==1) {
 8006168:	4b2c      	ldr	r3, [pc, #176]	@ (800621c <mainLoop+0x26c>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d101      	bne.n	8006174 <mainLoop+0x1c4>
			menu();
 8006170:	f7fb faa8 	bl	80016c4 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006174:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006178:	481c      	ldr	r0, [pc, #112]	@ (80061ec <mainLoop+0x23c>)
 800617a:	f004 fbb2 	bl	800a8e2 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 800617e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006182:	482b      	ldr	r0, [pc, #172]	@ (8006230 <mainLoop+0x280>)
 8006184:	f004 fb7e 	bl	800a884 <HAL_GPIO_ReadPin>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10a      	bne.n	80061a4 <mainLoop+0x1f4>
 800618e:	4b29      	ldr	r3, [pc, #164]	@ (8006234 <mainLoop+0x284>)
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	f083 0301 	eor.w	r3, r3, #1
 8006196:	b2db      	uxtb	r3, r3
 8006198:	2b00      	cmp	r3, #0
 800619a:	d003      	beq.n	80061a4 <mainLoop+0x1f4>
			stopVar=1;
 800619c:	4b26      	ldr	r3, [pc, #152]	@ (8006238 <mainLoop+0x288>)
 800619e:	2201      	movs	r2, #1
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	e002      	b.n	80061aa <mainLoop+0x1fa>
		} else {
			stopVar=0;
 80061a4:	4b24      	ldr	r3, [pc, #144]	@ (8006238 <mainLoop+0x288>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 80061aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80061ae:	4820      	ldr	r0, [pc, #128]	@ (8006230 <mainLoop+0x280>)
 80061b0:	f004 fb68 	bl	800a884 <HAL_GPIO_ReadPin>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d107      	bne.n	80061ca <mainLoop+0x21a>
 80061ba:	4b20      	ldr	r3, [pc, #128]	@ (800623c <mainLoop+0x28c>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <mainLoop+0x21a>
			EmnStopVar=1;
 80061c2:	4b1f      	ldr	r3, [pc, #124]	@ (8006240 <mainLoop+0x290>)
 80061c4:	2201      	movs	r2, #1
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	e002      	b.n	80061d0 <mainLoop+0x220>
		} else {
			EmnStopVar=0;
 80061ca:	4b1d      	ldr	r3, [pc, #116]	@ (8006240 <mainLoop+0x290>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80061d0:	f7fe f88e 	bl	80042f0 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80061d4:	f7fe f8c0 	bl	8004358 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80061d8:	f7fe f904 	bl	80043e4 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80061dc:	f7fe f954 	bl	8004488 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80061e0:	f7ff fcb4 	bl	8005b4c <checkDemoModCalisma>
		checkLCDBacklight();
 80061e4:	e6e6      	b.n	8005fb4 <mainLoop+0x4>
 80061e6:	bf00      	nop
 80061e8:	40010800 	.word	0x40010800
 80061ec:	40011000 	.word	0x40011000
 80061f0:	200010eb 	.word	0x200010eb
 80061f4:	20001094 	.word	0x20001094
 80061f8:	200010b0 	.word	0x200010b0
 80061fc:	200010e8 	.word	0x200010e8
 8006200:	200010e9 	.word	0x200010e9
 8006204:	2000193c 	.word	0x2000193c
 8006208:	200010ea 	.word	0x200010ea
 800620c:	20000178 	.word	0x20000178
 8006210:	20001874 	.word	0x20001874
 8006214:	20001888 	.word	0x20001888
 8006218:	2000189c 	.word	0x2000189c
 800621c:	200010d9 	.word	0x200010d9
 8006220:	200010f0 	.word	0x200010f0
 8006224:	200010da 	.word	0x200010da
 8006228:	200000c4 	.word	0x200000c4
 800622c:	200000d8 	.word	0x200000d8
 8006230:	40010c00 	.word	0x40010c00
 8006234:	20001110 	.word	0x20001110
 8006238:	2000110d 	.word	0x2000110d
 800623c:	2000111f 	.word	0x2000111f
 8006240:	20001120 	.word	0x20001120

08006244 <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8006244:	b5b0      	push	{r4, r5, r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	4603      	mov	r3, r0
 800624c:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 800624e:	79fb      	ldrb	r3, [r7, #7]
 8006250:	2b00      	cmp	r3, #0
 8006252:	f040 853d 	bne.w	8006cd0 <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 8006256:	4ac7      	ldr	r2, [pc, #796]	@ (8006574 <loadMenuTexts+0x330>)
 8006258:	4bc7      	ldr	r3, [pc, #796]	@ (8006578 <loadMenuTexts+0x334>)
 800625a:	4614      	mov	r4, r2
 800625c:	461d      	mov	r5, r3
 800625e:	6828      	ldr	r0, [r5, #0]
 8006260:	6869      	ldr	r1, [r5, #4]
 8006262:	68aa      	ldr	r2, [r5, #8]
 8006264:	68eb      	ldr	r3, [r5, #12]
 8006266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006268:	7c2b      	ldrb	r3, [r5, #16]
 800626a:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 800626c:	4ac3      	ldr	r2, [pc, #780]	@ (800657c <loadMenuTexts+0x338>)
 800626e:	4bc4      	ldr	r3, [pc, #784]	@ (8006580 <loadMenuTexts+0x33c>)
 8006270:	4614      	mov	r4, r2
 8006272:	461d      	mov	r5, r3
 8006274:	6828      	ldr	r0, [r5, #0]
 8006276:	6869      	ldr	r1, [r5, #4]
 8006278:	68aa      	ldr	r2, [r5, #8]
 800627a:	68eb      	ldr	r3, [r5, #12]
 800627c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800627e:	7c2b      	ldrb	r3, [r5, #16]
 8006280:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 8006282:	4ac0      	ldr	r2, [pc, #768]	@ (8006584 <loadMenuTexts+0x340>)
 8006284:	4bc0      	ldr	r3, [pc, #768]	@ (8006588 <loadMenuTexts+0x344>)
 8006286:	4614      	mov	r4, r2
 8006288:	461d      	mov	r5, r3
 800628a:	6828      	ldr	r0, [r5, #0]
 800628c:	6869      	ldr	r1, [r5, #4]
 800628e:	68aa      	ldr	r2, [r5, #8]
 8006290:	68eb      	ldr	r3, [r5, #12]
 8006292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006294:	7c2b      	ldrb	r3, [r5, #16]
 8006296:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8006298:	4abc      	ldr	r2, [pc, #752]	@ (800658c <loadMenuTexts+0x348>)
 800629a:	4bbd      	ldr	r3, [pc, #756]	@ (8006590 <loadMenuTexts+0x34c>)
 800629c:	4614      	mov	r4, r2
 800629e:	461d      	mov	r5, r3
 80062a0:	6828      	ldr	r0, [r5, #0]
 80062a2:	6869      	ldr	r1, [r5, #4]
 80062a4:	68aa      	ldr	r2, [r5, #8]
 80062a6:	68eb      	ldr	r3, [r5, #12]
 80062a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062aa:	7c2b      	ldrb	r3, [r5, #16]
 80062ac:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 80062ae:	4ab9      	ldr	r2, [pc, #740]	@ (8006594 <loadMenuTexts+0x350>)
 80062b0:	4bb9      	ldr	r3, [pc, #740]	@ (8006598 <loadMenuTexts+0x354>)
 80062b2:	4614      	mov	r4, r2
 80062b4:	461d      	mov	r5, r3
 80062b6:	6828      	ldr	r0, [r5, #0]
 80062b8:	6869      	ldr	r1, [r5, #4]
 80062ba:	68aa      	ldr	r2, [r5, #8]
 80062bc:	68eb      	ldr	r3, [r5, #12]
 80062be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062c0:	7c2b      	ldrb	r3, [r5, #16]
 80062c2:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 80062c4:	4ab5      	ldr	r2, [pc, #724]	@ (800659c <loadMenuTexts+0x358>)
 80062c6:	4bb6      	ldr	r3, [pc, #728]	@ (80065a0 <loadMenuTexts+0x35c>)
 80062c8:	4614      	mov	r4, r2
 80062ca:	461d      	mov	r5, r3
 80062cc:	6828      	ldr	r0, [r5, #0]
 80062ce:	6869      	ldr	r1, [r5, #4]
 80062d0:	68aa      	ldr	r2, [r5, #8]
 80062d2:	68eb      	ldr	r3, [r5, #12]
 80062d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062d6:	7c2b      	ldrb	r3, [r5, #16]
 80062d8:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 80062da:	4ab2      	ldr	r2, [pc, #712]	@ (80065a4 <loadMenuTexts+0x360>)
 80062dc:	4bb2      	ldr	r3, [pc, #712]	@ (80065a8 <loadMenuTexts+0x364>)
 80062de:	4614      	mov	r4, r2
 80062e0:	461d      	mov	r5, r3
 80062e2:	6828      	ldr	r0, [r5, #0]
 80062e4:	6869      	ldr	r1, [r5, #4]
 80062e6:	68aa      	ldr	r2, [r5, #8]
 80062e8:	68eb      	ldr	r3, [r5, #12]
 80062ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062ec:	7c2b      	ldrb	r3, [r5, #16]
 80062ee:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 80062f0:	4aae      	ldr	r2, [pc, #696]	@ (80065ac <loadMenuTexts+0x368>)
 80062f2:	4baf      	ldr	r3, [pc, #700]	@ (80065b0 <loadMenuTexts+0x36c>)
 80062f4:	4614      	mov	r4, r2
 80062f6:	461d      	mov	r5, r3
 80062f8:	6828      	ldr	r0, [r5, #0]
 80062fa:	6869      	ldr	r1, [r5, #4]
 80062fc:	68aa      	ldr	r2, [r5, #8]
 80062fe:	68eb      	ldr	r3, [r5, #12]
 8006300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006302:	7c2b      	ldrb	r3, [r5, #16]
 8006304:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 8006306:	4aab      	ldr	r2, [pc, #684]	@ (80065b4 <loadMenuTexts+0x370>)
 8006308:	4bab      	ldr	r3, [pc, #684]	@ (80065b8 <loadMenuTexts+0x374>)
 800630a:	4614      	mov	r4, r2
 800630c:	461d      	mov	r5, r3
 800630e:	6828      	ldr	r0, [r5, #0]
 8006310:	6869      	ldr	r1, [r5, #4]
 8006312:	68aa      	ldr	r2, [r5, #8]
 8006314:	68eb      	ldr	r3, [r5, #12]
 8006316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006318:	7c2b      	ldrb	r3, [r5, #16]
 800631a:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 800631c:	4aa7      	ldr	r2, [pc, #668]	@ (80065bc <loadMenuTexts+0x378>)
 800631e:	4ba8      	ldr	r3, [pc, #672]	@ (80065c0 <loadMenuTexts+0x37c>)
 8006320:	4614      	mov	r4, r2
 8006322:	461d      	mov	r5, r3
 8006324:	6828      	ldr	r0, [r5, #0]
 8006326:	6869      	ldr	r1, [r5, #4]
 8006328:	68aa      	ldr	r2, [r5, #8]
 800632a:	68eb      	ldr	r3, [r5, #12]
 800632c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800632e:	7c2b      	ldrb	r3, [r5, #16]
 8006330:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 8006332:	4aa4      	ldr	r2, [pc, #656]	@ (80065c4 <loadMenuTexts+0x380>)
 8006334:	4ba4      	ldr	r3, [pc, #656]	@ (80065c8 <loadMenuTexts+0x384>)
 8006336:	4614      	mov	r4, r2
 8006338:	461d      	mov	r5, r3
 800633a:	6828      	ldr	r0, [r5, #0]
 800633c:	6869      	ldr	r1, [r5, #4]
 800633e:	68aa      	ldr	r2, [r5, #8]
 8006340:	68eb      	ldr	r3, [r5, #12]
 8006342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006344:	7c2b      	ldrb	r3, [r5, #16]
 8006346:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8006348:	4aa0      	ldr	r2, [pc, #640]	@ (80065cc <loadMenuTexts+0x388>)
 800634a:	4ba1      	ldr	r3, [pc, #644]	@ (80065d0 <loadMenuTexts+0x38c>)
 800634c:	4614      	mov	r4, r2
 800634e:	461d      	mov	r5, r3
 8006350:	6828      	ldr	r0, [r5, #0]
 8006352:	6869      	ldr	r1, [r5, #4]
 8006354:	68aa      	ldr	r2, [r5, #8]
 8006356:	68eb      	ldr	r3, [r5, #12]
 8006358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800635a:	7c2b      	ldrb	r3, [r5, #16]
 800635c:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 800635e:	4a9d      	ldr	r2, [pc, #628]	@ (80065d4 <loadMenuTexts+0x390>)
 8006360:	4b9d      	ldr	r3, [pc, #628]	@ (80065d8 <loadMenuTexts+0x394>)
 8006362:	4614      	mov	r4, r2
 8006364:	461d      	mov	r5, r3
 8006366:	6828      	ldr	r0, [r5, #0]
 8006368:	6869      	ldr	r1, [r5, #4]
 800636a:	68aa      	ldr	r2, [r5, #8]
 800636c:	68eb      	ldr	r3, [r5, #12]
 800636e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006370:	7c2b      	ldrb	r3, [r5, #16]
 8006372:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 8006374:	4a99      	ldr	r2, [pc, #612]	@ (80065dc <loadMenuTexts+0x398>)
 8006376:	4b9a      	ldr	r3, [pc, #616]	@ (80065e0 <loadMenuTexts+0x39c>)
 8006378:	4614      	mov	r4, r2
 800637a:	461d      	mov	r5, r3
 800637c:	6828      	ldr	r0, [r5, #0]
 800637e:	6869      	ldr	r1, [r5, #4]
 8006380:	68aa      	ldr	r2, [r5, #8]
 8006382:	68eb      	ldr	r3, [r5, #12]
 8006384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006386:	7c2b      	ldrb	r3, [r5, #16]
 8006388:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 800638a:	4a96      	ldr	r2, [pc, #600]	@ (80065e4 <loadMenuTexts+0x3a0>)
 800638c:	4b96      	ldr	r3, [pc, #600]	@ (80065e8 <loadMenuTexts+0x3a4>)
 800638e:	4614      	mov	r4, r2
 8006390:	461d      	mov	r5, r3
 8006392:	6828      	ldr	r0, [r5, #0]
 8006394:	6869      	ldr	r1, [r5, #4]
 8006396:	68aa      	ldr	r2, [r5, #8]
 8006398:	68eb      	ldr	r3, [r5, #12]
 800639a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800639c:	7c2b      	ldrb	r3, [r5, #16]
 800639e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 80063a0:	4a92      	ldr	r2, [pc, #584]	@ (80065ec <loadMenuTexts+0x3a8>)
 80063a2:	4b93      	ldr	r3, [pc, #588]	@ (80065f0 <loadMenuTexts+0x3ac>)
 80063a4:	4614      	mov	r4, r2
 80063a6:	461d      	mov	r5, r3
 80063a8:	6828      	ldr	r0, [r5, #0]
 80063aa:	6869      	ldr	r1, [r5, #4]
 80063ac:	68aa      	ldr	r2, [r5, #8]
 80063ae:	68eb      	ldr	r3, [r5, #12]
 80063b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063b2:	7c2b      	ldrb	r3, [r5, #16]
 80063b4:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 80063b6:	4a8f      	ldr	r2, [pc, #572]	@ (80065f4 <loadMenuTexts+0x3b0>)
 80063b8:	4b8f      	ldr	r3, [pc, #572]	@ (80065f8 <loadMenuTexts+0x3b4>)
 80063ba:	4614      	mov	r4, r2
 80063bc:	461d      	mov	r5, r3
 80063be:	6828      	ldr	r0, [r5, #0]
 80063c0:	6869      	ldr	r1, [r5, #4]
 80063c2:	68aa      	ldr	r2, [r5, #8]
 80063c4:	68eb      	ldr	r3, [r5, #12]
 80063c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063c8:	7c2b      	ldrb	r3, [r5, #16]
 80063ca:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 80063cc:	4a8b      	ldr	r2, [pc, #556]	@ (80065fc <loadMenuTexts+0x3b8>)
 80063ce:	4b8c      	ldr	r3, [pc, #560]	@ (8006600 <loadMenuTexts+0x3bc>)
 80063d0:	4614      	mov	r4, r2
 80063d2:	461d      	mov	r5, r3
 80063d4:	6828      	ldr	r0, [r5, #0]
 80063d6:	6869      	ldr	r1, [r5, #4]
 80063d8:	68aa      	ldr	r2, [r5, #8]
 80063da:	68eb      	ldr	r3, [r5, #12]
 80063dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063de:	7c2b      	ldrb	r3, [r5, #16]
 80063e0:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 80063e2:	4a88      	ldr	r2, [pc, #544]	@ (8006604 <loadMenuTexts+0x3c0>)
 80063e4:	4b88      	ldr	r3, [pc, #544]	@ (8006608 <loadMenuTexts+0x3c4>)
 80063e6:	4614      	mov	r4, r2
 80063e8:	461d      	mov	r5, r3
 80063ea:	6828      	ldr	r0, [r5, #0]
 80063ec:	6869      	ldr	r1, [r5, #4]
 80063ee:	68aa      	ldr	r2, [r5, #8]
 80063f0:	68eb      	ldr	r3, [r5, #12]
 80063f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063f4:	7c2b      	ldrb	r3, [r5, #16]
 80063f6:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 80063f8:	4a84      	ldr	r2, [pc, #528]	@ (800660c <loadMenuTexts+0x3c8>)
 80063fa:	4b85      	ldr	r3, [pc, #532]	@ (8006610 <loadMenuTexts+0x3cc>)
 80063fc:	4614      	mov	r4, r2
 80063fe:	461d      	mov	r5, r3
 8006400:	6828      	ldr	r0, [r5, #0]
 8006402:	6869      	ldr	r1, [r5, #4]
 8006404:	68aa      	ldr	r2, [r5, #8]
 8006406:	68eb      	ldr	r3, [r5, #12]
 8006408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800640a:	7c2b      	ldrb	r3, [r5, #16]
 800640c:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 800640e:	4a81      	ldr	r2, [pc, #516]	@ (8006614 <loadMenuTexts+0x3d0>)
 8006410:	4b81      	ldr	r3, [pc, #516]	@ (8006618 <loadMenuTexts+0x3d4>)
 8006412:	4614      	mov	r4, r2
 8006414:	461d      	mov	r5, r3
 8006416:	6828      	ldr	r0, [r5, #0]
 8006418:	6869      	ldr	r1, [r5, #4]
 800641a:	68aa      	ldr	r2, [r5, #8]
 800641c:	68eb      	ldr	r3, [r5, #12]
 800641e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006420:	7c2b      	ldrb	r3, [r5, #16]
 8006422:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 8006424:	4a7d      	ldr	r2, [pc, #500]	@ (800661c <loadMenuTexts+0x3d8>)
 8006426:	4b7e      	ldr	r3, [pc, #504]	@ (8006620 <loadMenuTexts+0x3dc>)
 8006428:	4614      	mov	r4, r2
 800642a:	461d      	mov	r5, r3
 800642c:	6828      	ldr	r0, [r5, #0]
 800642e:	6869      	ldr	r1, [r5, #4]
 8006430:	68aa      	ldr	r2, [r5, #8]
 8006432:	68eb      	ldr	r3, [r5, #12]
 8006434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006436:	7c2b      	ldrb	r3, [r5, #16]
 8006438:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 800643a:	4a7a      	ldr	r2, [pc, #488]	@ (8006624 <loadMenuTexts+0x3e0>)
 800643c:	4b7a      	ldr	r3, [pc, #488]	@ (8006628 <loadMenuTexts+0x3e4>)
 800643e:	4614      	mov	r4, r2
 8006440:	461d      	mov	r5, r3
 8006442:	6828      	ldr	r0, [r5, #0]
 8006444:	6869      	ldr	r1, [r5, #4]
 8006446:	68aa      	ldr	r2, [r5, #8]
 8006448:	68eb      	ldr	r3, [r5, #12]
 800644a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800644c:	7c2b      	ldrb	r3, [r5, #16]
 800644e:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 8006450:	4a76      	ldr	r2, [pc, #472]	@ (800662c <loadMenuTexts+0x3e8>)
 8006452:	4b77      	ldr	r3, [pc, #476]	@ (8006630 <loadMenuTexts+0x3ec>)
 8006454:	4614      	mov	r4, r2
 8006456:	461d      	mov	r5, r3
 8006458:	6828      	ldr	r0, [r5, #0]
 800645a:	6869      	ldr	r1, [r5, #4]
 800645c:	68aa      	ldr	r2, [r5, #8]
 800645e:	68eb      	ldr	r3, [r5, #12]
 8006460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006462:	7c2b      	ldrb	r3, [r5, #16]
 8006464:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 8006466:	4a73      	ldr	r2, [pc, #460]	@ (8006634 <loadMenuTexts+0x3f0>)
 8006468:	4b73      	ldr	r3, [pc, #460]	@ (8006638 <loadMenuTexts+0x3f4>)
 800646a:	4614      	mov	r4, r2
 800646c:	461d      	mov	r5, r3
 800646e:	6828      	ldr	r0, [r5, #0]
 8006470:	6869      	ldr	r1, [r5, #4]
 8006472:	68aa      	ldr	r2, [r5, #8]
 8006474:	68eb      	ldr	r3, [r5, #12]
 8006476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006478:	7c2b      	ldrb	r3, [r5, #16]
 800647a:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 800647c:	4a6f      	ldr	r2, [pc, #444]	@ (800663c <loadMenuTexts+0x3f8>)
 800647e:	4b70      	ldr	r3, [pc, #448]	@ (8006640 <loadMenuTexts+0x3fc>)
 8006480:	4614      	mov	r4, r2
 8006482:	461d      	mov	r5, r3
 8006484:	6828      	ldr	r0, [r5, #0]
 8006486:	6869      	ldr	r1, [r5, #4]
 8006488:	68aa      	ldr	r2, [r5, #8]
 800648a:	68eb      	ldr	r3, [r5, #12]
 800648c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800648e:	7c2b      	ldrb	r3, [r5, #16]
 8006490:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 8006492:	4a6c      	ldr	r2, [pc, #432]	@ (8006644 <loadMenuTexts+0x400>)
 8006494:	4b6c      	ldr	r3, [pc, #432]	@ (8006648 <loadMenuTexts+0x404>)
 8006496:	4614      	mov	r4, r2
 8006498:	461d      	mov	r5, r3
 800649a:	6828      	ldr	r0, [r5, #0]
 800649c:	6869      	ldr	r1, [r5, #4]
 800649e:	68aa      	ldr	r2, [r5, #8]
 80064a0:	68eb      	ldr	r3, [r5, #12]
 80064a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064a4:	7c2b      	ldrb	r3, [r5, #16]
 80064a6:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 80064a8:	4a68      	ldr	r2, [pc, #416]	@ (800664c <loadMenuTexts+0x408>)
 80064aa:	4b69      	ldr	r3, [pc, #420]	@ (8006650 <loadMenuTexts+0x40c>)
 80064ac:	4614      	mov	r4, r2
 80064ae:	461d      	mov	r5, r3
 80064b0:	6828      	ldr	r0, [r5, #0]
 80064b2:	6869      	ldr	r1, [r5, #4]
 80064b4:	68aa      	ldr	r2, [r5, #8]
 80064b6:	68eb      	ldr	r3, [r5, #12]
 80064b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064ba:	7c2b      	ldrb	r3, [r5, #16]
 80064bc:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 80064be:	4a65      	ldr	r2, [pc, #404]	@ (8006654 <loadMenuTexts+0x410>)
 80064c0:	4b65      	ldr	r3, [pc, #404]	@ (8006658 <loadMenuTexts+0x414>)
 80064c2:	4614      	mov	r4, r2
 80064c4:	461d      	mov	r5, r3
 80064c6:	6828      	ldr	r0, [r5, #0]
 80064c8:	6869      	ldr	r1, [r5, #4]
 80064ca:	68aa      	ldr	r2, [r5, #8]
 80064cc:	68eb      	ldr	r3, [r5, #12]
 80064ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064d0:	7c2b      	ldrb	r3, [r5, #16]
 80064d2:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 80064d4:	4a61      	ldr	r2, [pc, #388]	@ (800665c <loadMenuTexts+0x418>)
 80064d6:	4b62      	ldr	r3, [pc, #392]	@ (8006660 <loadMenuTexts+0x41c>)
 80064d8:	4614      	mov	r4, r2
 80064da:	461d      	mov	r5, r3
 80064dc:	6828      	ldr	r0, [r5, #0]
 80064de:	6869      	ldr	r1, [r5, #4]
 80064e0:	68aa      	ldr	r2, [r5, #8]
 80064e2:	68eb      	ldr	r3, [r5, #12]
 80064e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064e6:	7c2b      	ldrb	r3, [r5, #16]
 80064e8:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 80064ea:	4a5e      	ldr	r2, [pc, #376]	@ (8006664 <loadMenuTexts+0x420>)
 80064ec:	4b5e      	ldr	r3, [pc, #376]	@ (8006668 <loadMenuTexts+0x424>)
 80064ee:	4614      	mov	r4, r2
 80064f0:	461d      	mov	r5, r3
 80064f2:	6828      	ldr	r0, [r5, #0]
 80064f4:	6869      	ldr	r1, [r5, #4]
 80064f6:	68aa      	ldr	r2, [r5, #8]
 80064f8:	68eb      	ldr	r3, [r5, #12]
 80064fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064fc:	7c2b      	ldrb	r3, [r5, #16]
 80064fe:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 8006500:	4a5a      	ldr	r2, [pc, #360]	@ (800666c <loadMenuTexts+0x428>)
 8006502:	4b5b      	ldr	r3, [pc, #364]	@ (8006670 <loadMenuTexts+0x42c>)
 8006504:	4614      	mov	r4, r2
 8006506:	461d      	mov	r5, r3
 8006508:	6828      	ldr	r0, [r5, #0]
 800650a:	6869      	ldr	r1, [r5, #4]
 800650c:	68aa      	ldr	r2, [r5, #8]
 800650e:	68eb      	ldr	r3, [r5, #12]
 8006510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006512:	7c2b      	ldrb	r3, [r5, #16]
 8006514:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 8006516:	4a57      	ldr	r2, [pc, #348]	@ (8006674 <loadMenuTexts+0x430>)
 8006518:	4b57      	ldr	r3, [pc, #348]	@ (8006678 <loadMenuTexts+0x434>)
 800651a:	4614      	mov	r4, r2
 800651c:	461d      	mov	r5, r3
 800651e:	6828      	ldr	r0, [r5, #0]
 8006520:	6869      	ldr	r1, [r5, #4]
 8006522:	68aa      	ldr	r2, [r5, #8]
 8006524:	68eb      	ldr	r3, [r5, #12]
 8006526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006528:	7c2b      	ldrb	r3, [r5, #16]
 800652a:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 800652c:	4a53      	ldr	r2, [pc, #332]	@ (800667c <loadMenuTexts+0x438>)
 800652e:	4b54      	ldr	r3, [pc, #336]	@ (8006680 <loadMenuTexts+0x43c>)
 8006530:	4614      	mov	r4, r2
 8006532:	461d      	mov	r5, r3
 8006534:	6828      	ldr	r0, [r5, #0]
 8006536:	6869      	ldr	r1, [r5, #4]
 8006538:	68aa      	ldr	r2, [r5, #8]
 800653a:	68eb      	ldr	r3, [r5, #12]
 800653c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800653e:	7c2b      	ldrb	r3, [r5, #16]
 8006540:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 8006542:	4a50      	ldr	r2, [pc, #320]	@ (8006684 <loadMenuTexts+0x440>)
 8006544:	4b50      	ldr	r3, [pc, #320]	@ (8006688 <loadMenuTexts+0x444>)
 8006546:	4614      	mov	r4, r2
 8006548:	461d      	mov	r5, r3
 800654a:	6828      	ldr	r0, [r5, #0]
 800654c:	6869      	ldr	r1, [r5, #4]
 800654e:	68aa      	ldr	r2, [r5, #8]
 8006550:	68eb      	ldr	r3, [r5, #12]
 8006552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006554:	7c2b      	ldrb	r3, [r5, #16]
 8006556:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 8006558:	4a4c      	ldr	r2, [pc, #304]	@ (800668c <loadMenuTexts+0x448>)
 800655a:	4b4d      	ldr	r3, [pc, #308]	@ (8006690 <loadMenuTexts+0x44c>)
 800655c:	4614      	mov	r4, r2
 800655e:	461d      	mov	r5, r3
 8006560:	6828      	ldr	r0, [r5, #0]
 8006562:	6869      	ldr	r1, [r5, #4]
 8006564:	68aa      	ldr	r2, [r5, #8]
 8006566:	68eb      	ldr	r3, [r5, #12]
 8006568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800656a:	7c2b      	ldrb	r3, [r5, #16]
 800656c:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 800656e:	4a49      	ldr	r2, [pc, #292]	@ (8006694 <loadMenuTexts+0x450>)
 8006570:	e092      	b.n	8006698 <loadMenuTexts+0x454>
 8006572:	bf00      	nop
 8006574:	20001220 	.word	0x20001220
 8006578:	2000018c 	.word	0x2000018c
 800657c:	20001234 	.word	0x20001234
 8006580:	200001a0 	.word	0x200001a0
 8006584:	20001248 	.word	0x20001248
 8006588:	200001b4 	.word	0x200001b4
 800658c:	2000125c 	.word	0x2000125c
 8006590:	200001c8 	.word	0x200001c8
 8006594:	20001270 	.word	0x20001270
 8006598:	200001dc 	.word	0x200001dc
 800659c:	20001284 	.word	0x20001284
 80065a0:	200001f0 	.word	0x200001f0
 80065a4:	20001298 	.word	0x20001298
 80065a8:	20000204 	.word	0x20000204
 80065ac:	200012ac 	.word	0x200012ac
 80065b0:	20000218 	.word	0x20000218
 80065b4:	200012c0 	.word	0x200012c0
 80065b8:	2000022c 	.word	0x2000022c
 80065bc:	200012d4 	.word	0x200012d4
 80065c0:	20000240 	.word	0x20000240
 80065c4:	200012e8 	.word	0x200012e8
 80065c8:	20000254 	.word	0x20000254
 80065cc:	200012fc 	.word	0x200012fc
 80065d0:	20000268 	.word	0x20000268
 80065d4:	20001310 	.word	0x20001310
 80065d8:	2000027c 	.word	0x2000027c
 80065dc:	20001324 	.word	0x20001324
 80065e0:	20000290 	.word	0x20000290
 80065e4:	20001338 	.word	0x20001338
 80065e8:	200002a4 	.word	0x200002a4
 80065ec:	2000134c 	.word	0x2000134c
 80065f0:	200002b8 	.word	0x200002b8
 80065f4:	20001360 	.word	0x20001360
 80065f8:	200002cc 	.word	0x200002cc
 80065fc:	20001374 	.word	0x20001374
 8006600:	200002e0 	.word	0x200002e0
 8006604:	20001388 	.word	0x20001388
 8006608:	200002f4 	.word	0x200002f4
 800660c:	2000139c 	.word	0x2000139c
 8006610:	20000308 	.word	0x20000308
 8006614:	200013b0 	.word	0x200013b0
 8006618:	2000031c 	.word	0x2000031c
 800661c:	200013c4 	.word	0x200013c4
 8006620:	20000330 	.word	0x20000330
 8006624:	200013d8 	.word	0x200013d8
 8006628:	20000344 	.word	0x20000344
 800662c:	200013ec 	.word	0x200013ec
 8006630:	20000358 	.word	0x20000358
 8006634:	20001400 	.word	0x20001400
 8006638:	2000036c 	.word	0x2000036c
 800663c:	20001414 	.word	0x20001414
 8006640:	20000380 	.word	0x20000380
 8006644:	20001428 	.word	0x20001428
 8006648:	20000394 	.word	0x20000394
 800664c:	2000143c 	.word	0x2000143c
 8006650:	200003a8 	.word	0x200003a8
 8006654:	20001450 	.word	0x20001450
 8006658:	200003bc 	.word	0x200003bc
 800665c:	20001464 	.word	0x20001464
 8006660:	200003d0 	.word	0x200003d0
 8006664:	20001478 	.word	0x20001478
 8006668:	200003e4 	.word	0x200003e4
 800666c:	2000148c 	.word	0x2000148c
 8006670:	200003f8 	.word	0x200003f8
 8006674:	200014a0 	.word	0x200014a0
 8006678:	2000040c 	.word	0x2000040c
 800667c:	200014b4 	.word	0x200014b4
 8006680:	20000420 	.word	0x20000420
 8006684:	200014c8 	.word	0x200014c8
 8006688:	20000434 	.word	0x20000434
 800668c:	200014dc 	.word	0x200014dc
 8006690:	20000448 	.word	0x20000448
 8006694:	200014f0 	.word	0x200014f0
 8006698:	4bc7      	ldr	r3, [pc, #796]	@ (80069b8 <loadMenuTexts+0x774>)
 800669a:	4614      	mov	r4, r2
 800669c:	461d      	mov	r5, r3
 800669e:	6828      	ldr	r0, [r5, #0]
 80066a0:	6869      	ldr	r1, [r5, #4]
 80066a2:	68aa      	ldr	r2, [r5, #8]
 80066a4:	68eb      	ldr	r3, [r5, #12]
 80066a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066a8:	7c2b      	ldrb	r3, [r5, #16]
 80066aa:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 80066ac:	4ac3      	ldr	r2, [pc, #780]	@ (80069bc <loadMenuTexts+0x778>)
 80066ae:	4bc4      	ldr	r3, [pc, #784]	@ (80069c0 <loadMenuTexts+0x77c>)
 80066b0:	4614      	mov	r4, r2
 80066b2:	461d      	mov	r5, r3
 80066b4:	6828      	ldr	r0, [r5, #0]
 80066b6:	6869      	ldr	r1, [r5, #4]
 80066b8:	68aa      	ldr	r2, [r5, #8]
 80066ba:	68eb      	ldr	r3, [r5, #12]
 80066bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066be:	7c2b      	ldrb	r3, [r5, #16]
 80066c0:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 80066c2:	4ac0      	ldr	r2, [pc, #768]	@ (80069c4 <loadMenuTexts+0x780>)
 80066c4:	4bc0      	ldr	r3, [pc, #768]	@ (80069c8 <loadMenuTexts+0x784>)
 80066c6:	4614      	mov	r4, r2
 80066c8:	461d      	mov	r5, r3
 80066ca:	6828      	ldr	r0, [r5, #0]
 80066cc:	6869      	ldr	r1, [r5, #4]
 80066ce:	68aa      	ldr	r2, [r5, #8]
 80066d0:	68eb      	ldr	r3, [r5, #12]
 80066d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066d4:	7c2b      	ldrb	r3, [r5, #16]
 80066d6:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 80066d8:	4abc      	ldr	r2, [pc, #752]	@ (80069cc <loadMenuTexts+0x788>)
 80066da:	4bbd      	ldr	r3, [pc, #756]	@ (80069d0 <loadMenuTexts+0x78c>)
 80066dc:	4614      	mov	r4, r2
 80066de:	461d      	mov	r5, r3
 80066e0:	6828      	ldr	r0, [r5, #0]
 80066e2:	6869      	ldr	r1, [r5, #4]
 80066e4:	68aa      	ldr	r2, [r5, #8]
 80066e6:	68eb      	ldr	r3, [r5, #12]
 80066e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066ea:	7c2b      	ldrb	r3, [r5, #16]
 80066ec:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 80066ee:	4ab9      	ldr	r2, [pc, #740]	@ (80069d4 <loadMenuTexts+0x790>)
 80066f0:	4bb9      	ldr	r3, [pc, #740]	@ (80069d8 <loadMenuTexts+0x794>)
 80066f2:	4614      	mov	r4, r2
 80066f4:	461d      	mov	r5, r3
 80066f6:	6828      	ldr	r0, [r5, #0]
 80066f8:	6869      	ldr	r1, [r5, #4]
 80066fa:	68aa      	ldr	r2, [r5, #8]
 80066fc:	68eb      	ldr	r3, [r5, #12]
 80066fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006700:	7c2b      	ldrb	r3, [r5, #16]
 8006702:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 8006704:	4ab5      	ldr	r2, [pc, #724]	@ (80069dc <loadMenuTexts+0x798>)
 8006706:	4bb6      	ldr	r3, [pc, #728]	@ (80069e0 <loadMenuTexts+0x79c>)
 8006708:	4614      	mov	r4, r2
 800670a:	461d      	mov	r5, r3
 800670c:	6828      	ldr	r0, [r5, #0]
 800670e:	6869      	ldr	r1, [r5, #4]
 8006710:	68aa      	ldr	r2, [r5, #8]
 8006712:	68eb      	ldr	r3, [r5, #12]
 8006714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006716:	7c2b      	ldrb	r3, [r5, #16]
 8006718:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 800671a:	4ab2      	ldr	r2, [pc, #712]	@ (80069e4 <loadMenuTexts+0x7a0>)
 800671c:	4bb2      	ldr	r3, [pc, #712]	@ (80069e8 <loadMenuTexts+0x7a4>)
 800671e:	4614      	mov	r4, r2
 8006720:	461d      	mov	r5, r3
 8006722:	6828      	ldr	r0, [r5, #0]
 8006724:	6869      	ldr	r1, [r5, #4]
 8006726:	68aa      	ldr	r2, [r5, #8]
 8006728:	68eb      	ldr	r3, [r5, #12]
 800672a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800672c:	7c2b      	ldrb	r3, [r5, #16]
 800672e:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 8006730:	4aae      	ldr	r2, [pc, #696]	@ (80069ec <loadMenuTexts+0x7a8>)
 8006732:	4baf      	ldr	r3, [pc, #700]	@ (80069f0 <loadMenuTexts+0x7ac>)
 8006734:	4614      	mov	r4, r2
 8006736:	461d      	mov	r5, r3
 8006738:	6828      	ldr	r0, [r5, #0]
 800673a:	6869      	ldr	r1, [r5, #4]
 800673c:	68aa      	ldr	r2, [r5, #8]
 800673e:	68eb      	ldr	r3, [r5, #12]
 8006740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006742:	7c2b      	ldrb	r3, [r5, #16]
 8006744:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 8006746:	4aab      	ldr	r2, [pc, #684]	@ (80069f4 <loadMenuTexts+0x7b0>)
 8006748:	4bab      	ldr	r3, [pc, #684]	@ (80069f8 <loadMenuTexts+0x7b4>)
 800674a:	4614      	mov	r4, r2
 800674c:	461d      	mov	r5, r3
 800674e:	6828      	ldr	r0, [r5, #0]
 8006750:	6869      	ldr	r1, [r5, #4]
 8006752:	68aa      	ldr	r2, [r5, #8]
 8006754:	68eb      	ldr	r3, [r5, #12]
 8006756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006758:	7c2b      	ldrb	r3, [r5, #16]
 800675a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 800675c:	4aa7      	ldr	r2, [pc, #668]	@ (80069fc <loadMenuTexts+0x7b8>)
 800675e:	4ba8      	ldr	r3, [pc, #672]	@ (8006a00 <loadMenuTexts+0x7bc>)
 8006760:	4614      	mov	r4, r2
 8006762:	461d      	mov	r5, r3
 8006764:	6828      	ldr	r0, [r5, #0]
 8006766:	6869      	ldr	r1, [r5, #4]
 8006768:	68aa      	ldr	r2, [r5, #8]
 800676a:	68eb      	ldr	r3, [r5, #12]
 800676c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800676e:	7c2b      	ldrb	r3, [r5, #16]
 8006770:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 8006772:	4aa4      	ldr	r2, [pc, #656]	@ (8006a04 <loadMenuTexts+0x7c0>)
 8006774:	4ba4      	ldr	r3, [pc, #656]	@ (8006a08 <loadMenuTexts+0x7c4>)
 8006776:	4614      	mov	r4, r2
 8006778:	461d      	mov	r5, r3
 800677a:	6828      	ldr	r0, [r5, #0]
 800677c:	6869      	ldr	r1, [r5, #4]
 800677e:	68aa      	ldr	r2, [r5, #8]
 8006780:	68eb      	ldr	r3, [r5, #12]
 8006782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006784:	7c2b      	ldrb	r3, [r5, #16]
 8006786:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 8006788:	4aa0      	ldr	r2, [pc, #640]	@ (8006a0c <loadMenuTexts+0x7c8>)
 800678a:	4ba1      	ldr	r3, [pc, #644]	@ (8006a10 <loadMenuTexts+0x7cc>)
 800678c:	4614      	mov	r4, r2
 800678e:	461d      	mov	r5, r3
 8006790:	6828      	ldr	r0, [r5, #0]
 8006792:	6869      	ldr	r1, [r5, #4]
 8006794:	68aa      	ldr	r2, [r5, #8]
 8006796:	68eb      	ldr	r3, [r5, #12]
 8006798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800679a:	7c2b      	ldrb	r3, [r5, #16]
 800679c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 800679e:	4a9d      	ldr	r2, [pc, #628]	@ (8006a14 <loadMenuTexts+0x7d0>)
 80067a0:	4b9d      	ldr	r3, [pc, #628]	@ (8006a18 <loadMenuTexts+0x7d4>)
 80067a2:	4614      	mov	r4, r2
 80067a4:	461d      	mov	r5, r3
 80067a6:	6828      	ldr	r0, [r5, #0]
 80067a8:	6869      	ldr	r1, [r5, #4]
 80067aa:	68aa      	ldr	r2, [r5, #8]
 80067ac:	68eb      	ldr	r3, [r5, #12]
 80067ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067b0:	7c2b      	ldrb	r3, [r5, #16]
 80067b2:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 80067b4:	4a99      	ldr	r2, [pc, #612]	@ (8006a1c <loadMenuTexts+0x7d8>)
 80067b6:	4b9a      	ldr	r3, [pc, #616]	@ (8006a20 <loadMenuTexts+0x7dc>)
 80067b8:	4614      	mov	r4, r2
 80067ba:	461d      	mov	r5, r3
 80067bc:	6828      	ldr	r0, [r5, #0]
 80067be:	6869      	ldr	r1, [r5, #4]
 80067c0:	68aa      	ldr	r2, [r5, #8]
 80067c2:	68eb      	ldr	r3, [r5, #12]
 80067c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067c6:	7c2b      	ldrb	r3, [r5, #16]
 80067c8:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 80067ca:	4a96      	ldr	r2, [pc, #600]	@ (8006a24 <loadMenuTexts+0x7e0>)
 80067cc:	4b96      	ldr	r3, [pc, #600]	@ (8006a28 <loadMenuTexts+0x7e4>)
 80067ce:	4614      	mov	r4, r2
 80067d0:	461d      	mov	r5, r3
 80067d2:	6828      	ldr	r0, [r5, #0]
 80067d4:	6869      	ldr	r1, [r5, #4]
 80067d6:	68aa      	ldr	r2, [r5, #8]
 80067d8:	68eb      	ldr	r3, [r5, #12]
 80067da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067dc:	7c2b      	ldrb	r3, [r5, #16]
 80067de:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 80067e0:	4a92      	ldr	r2, [pc, #584]	@ (8006a2c <loadMenuTexts+0x7e8>)
 80067e2:	4b93      	ldr	r3, [pc, #588]	@ (8006a30 <loadMenuTexts+0x7ec>)
 80067e4:	4614      	mov	r4, r2
 80067e6:	461d      	mov	r5, r3
 80067e8:	6828      	ldr	r0, [r5, #0]
 80067ea:	6869      	ldr	r1, [r5, #4]
 80067ec:	68aa      	ldr	r2, [r5, #8]
 80067ee:	68eb      	ldr	r3, [r5, #12]
 80067f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067f2:	7c2b      	ldrb	r3, [r5, #16]
 80067f4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 80067f6:	4a8f      	ldr	r2, [pc, #572]	@ (8006a34 <loadMenuTexts+0x7f0>)
 80067f8:	4b8f      	ldr	r3, [pc, #572]	@ (8006a38 <loadMenuTexts+0x7f4>)
 80067fa:	4614      	mov	r4, r2
 80067fc:	461d      	mov	r5, r3
 80067fe:	6828      	ldr	r0, [r5, #0]
 8006800:	6869      	ldr	r1, [r5, #4]
 8006802:	68aa      	ldr	r2, [r5, #8]
 8006804:	68eb      	ldr	r3, [r5, #12]
 8006806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006808:	7c2b      	ldrb	r3, [r5, #16]
 800680a:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 800680c:	4a8b      	ldr	r2, [pc, #556]	@ (8006a3c <loadMenuTexts+0x7f8>)
 800680e:	4b8c      	ldr	r3, [pc, #560]	@ (8006a40 <loadMenuTexts+0x7fc>)
 8006810:	4614      	mov	r4, r2
 8006812:	461d      	mov	r5, r3
 8006814:	6828      	ldr	r0, [r5, #0]
 8006816:	6869      	ldr	r1, [r5, #4]
 8006818:	68aa      	ldr	r2, [r5, #8]
 800681a:	68eb      	ldr	r3, [r5, #12]
 800681c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800681e:	7c2b      	ldrb	r3, [r5, #16]
 8006820:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 8006822:	4a88      	ldr	r2, [pc, #544]	@ (8006a44 <loadMenuTexts+0x800>)
 8006824:	4b88      	ldr	r3, [pc, #544]	@ (8006a48 <loadMenuTexts+0x804>)
 8006826:	4614      	mov	r4, r2
 8006828:	461d      	mov	r5, r3
 800682a:	6828      	ldr	r0, [r5, #0]
 800682c:	6869      	ldr	r1, [r5, #4]
 800682e:	68aa      	ldr	r2, [r5, #8]
 8006830:	68eb      	ldr	r3, [r5, #12]
 8006832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006834:	7c2b      	ldrb	r3, [r5, #16]
 8006836:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 8006838:	4a84      	ldr	r2, [pc, #528]	@ (8006a4c <loadMenuTexts+0x808>)
 800683a:	4b85      	ldr	r3, [pc, #532]	@ (8006a50 <loadMenuTexts+0x80c>)
 800683c:	4614      	mov	r4, r2
 800683e:	461d      	mov	r5, r3
 8006840:	6828      	ldr	r0, [r5, #0]
 8006842:	6869      	ldr	r1, [r5, #4]
 8006844:	68aa      	ldr	r2, [r5, #8]
 8006846:	68eb      	ldr	r3, [r5, #12]
 8006848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800684a:	7c2b      	ldrb	r3, [r5, #16]
 800684c:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 800684e:	4a81      	ldr	r2, [pc, #516]	@ (8006a54 <loadMenuTexts+0x810>)
 8006850:	4b81      	ldr	r3, [pc, #516]	@ (8006a58 <loadMenuTexts+0x814>)
 8006852:	4614      	mov	r4, r2
 8006854:	461d      	mov	r5, r3
 8006856:	6828      	ldr	r0, [r5, #0]
 8006858:	6869      	ldr	r1, [r5, #4]
 800685a:	68aa      	ldr	r2, [r5, #8]
 800685c:	68eb      	ldr	r3, [r5, #12]
 800685e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006860:	7c2b      	ldrb	r3, [r5, #16]
 8006862:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 8006864:	4a7d      	ldr	r2, [pc, #500]	@ (8006a5c <loadMenuTexts+0x818>)
 8006866:	4b7e      	ldr	r3, [pc, #504]	@ (8006a60 <loadMenuTexts+0x81c>)
 8006868:	4614      	mov	r4, r2
 800686a:	461d      	mov	r5, r3
 800686c:	6828      	ldr	r0, [r5, #0]
 800686e:	6869      	ldr	r1, [r5, #4]
 8006870:	68aa      	ldr	r2, [r5, #8]
 8006872:	68eb      	ldr	r3, [r5, #12]
 8006874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006876:	7c2b      	ldrb	r3, [r5, #16]
 8006878:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 800687a:	4a7a      	ldr	r2, [pc, #488]	@ (8006a64 <loadMenuTexts+0x820>)
 800687c:	4b7a      	ldr	r3, [pc, #488]	@ (8006a68 <loadMenuTexts+0x824>)
 800687e:	4614      	mov	r4, r2
 8006880:	461d      	mov	r5, r3
 8006882:	6828      	ldr	r0, [r5, #0]
 8006884:	6869      	ldr	r1, [r5, #4]
 8006886:	68aa      	ldr	r2, [r5, #8]
 8006888:	68eb      	ldr	r3, [r5, #12]
 800688a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800688c:	7c2b      	ldrb	r3, [r5, #16]
 800688e:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 8006890:	4a76      	ldr	r2, [pc, #472]	@ (8006a6c <loadMenuTexts+0x828>)
 8006892:	4b77      	ldr	r3, [pc, #476]	@ (8006a70 <loadMenuTexts+0x82c>)
 8006894:	4614      	mov	r4, r2
 8006896:	461d      	mov	r5, r3
 8006898:	6828      	ldr	r0, [r5, #0]
 800689a:	6869      	ldr	r1, [r5, #4]
 800689c:	68aa      	ldr	r2, [r5, #8]
 800689e:	68eb      	ldr	r3, [r5, #12]
 80068a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068a2:	7c2b      	ldrb	r3, [r5, #16]
 80068a4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 80068a6:	4a73      	ldr	r2, [pc, #460]	@ (8006a74 <loadMenuTexts+0x830>)
 80068a8:	4b73      	ldr	r3, [pc, #460]	@ (8006a78 <loadMenuTexts+0x834>)
 80068aa:	4614      	mov	r4, r2
 80068ac:	461d      	mov	r5, r3
 80068ae:	6828      	ldr	r0, [r5, #0]
 80068b0:	6869      	ldr	r1, [r5, #4]
 80068b2:	68aa      	ldr	r2, [r5, #8]
 80068b4:	68eb      	ldr	r3, [r5, #12]
 80068b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068b8:	7c2b      	ldrb	r3, [r5, #16]
 80068ba:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 80068bc:	4a6f      	ldr	r2, [pc, #444]	@ (8006a7c <loadMenuTexts+0x838>)
 80068be:	4b70      	ldr	r3, [pc, #448]	@ (8006a80 <loadMenuTexts+0x83c>)
 80068c0:	4614      	mov	r4, r2
 80068c2:	461d      	mov	r5, r3
 80068c4:	6828      	ldr	r0, [r5, #0]
 80068c6:	6869      	ldr	r1, [r5, #4]
 80068c8:	68aa      	ldr	r2, [r5, #8]
 80068ca:	68eb      	ldr	r3, [r5, #12]
 80068cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068ce:	7c2b      	ldrb	r3, [r5, #16]
 80068d0:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 80068d2:	4a6c      	ldr	r2, [pc, #432]	@ (8006a84 <loadMenuTexts+0x840>)
 80068d4:	4b6c      	ldr	r3, [pc, #432]	@ (8006a88 <loadMenuTexts+0x844>)
 80068d6:	4614      	mov	r4, r2
 80068d8:	461d      	mov	r5, r3
 80068da:	6828      	ldr	r0, [r5, #0]
 80068dc:	6869      	ldr	r1, [r5, #4]
 80068de:	68aa      	ldr	r2, [r5, #8]
 80068e0:	68eb      	ldr	r3, [r5, #12]
 80068e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068e4:	7c2b      	ldrb	r3, [r5, #16]
 80068e6:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 80068e8:	4a68      	ldr	r2, [pc, #416]	@ (8006a8c <loadMenuTexts+0x848>)
 80068ea:	4b69      	ldr	r3, [pc, #420]	@ (8006a90 <loadMenuTexts+0x84c>)
 80068ec:	4614      	mov	r4, r2
 80068ee:	461d      	mov	r5, r3
 80068f0:	6828      	ldr	r0, [r5, #0]
 80068f2:	6869      	ldr	r1, [r5, #4]
 80068f4:	68aa      	ldr	r2, [r5, #8]
 80068f6:	68eb      	ldr	r3, [r5, #12]
 80068f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068fa:	7c2b      	ldrb	r3, [r5, #16]
 80068fc:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 80068fe:	4a65      	ldr	r2, [pc, #404]	@ (8006a94 <loadMenuTexts+0x850>)
 8006900:	4b65      	ldr	r3, [pc, #404]	@ (8006a98 <loadMenuTexts+0x854>)
 8006902:	4614      	mov	r4, r2
 8006904:	461d      	mov	r5, r3
 8006906:	6828      	ldr	r0, [r5, #0]
 8006908:	6869      	ldr	r1, [r5, #4]
 800690a:	68aa      	ldr	r2, [r5, #8]
 800690c:	68eb      	ldr	r3, [r5, #12]
 800690e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006910:	7c2b      	ldrb	r3, [r5, #16]
 8006912:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 8006914:	4a61      	ldr	r2, [pc, #388]	@ (8006a9c <loadMenuTexts+0x858>)
 8006916:	4b62      	ldr	r3, [pc, #392]	@ (8006aa0 <loadMenuTexts+0x85c>)
 8006918:	4614      	mov	r4, r2
 800691a:	461d      	mov	r5, r3
 800691c:	6828      	ldr	r0, [r5, #0]
 800691e:	6869      	ldr	r1, [r5, #4]
 8006920:	68aa      	ldr	r2, [r5, #8]
 8006922:	68eb      	ldr	r3, [r5, #12]
 8006924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006926:	7c2b      	ldrb	r3, [r5, #16]
 8006928:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 800692a:	4a5e      	ldr	r2, [pc, #376]	@ (8006aa4 <loadMenuTexts+0x860>)
 800692c:	4b5e      	ldr	r3, [pc, #376]	@ (8006aa8 <loadMenuTexts+0x864>)
 800692e:	4614      	mov	r4, r2
 8006930:	461d      	mov	r5, r3
 8006932:	6828      	ldr	r0, [r5, #0]
 8006934:	6869      	ldr	r1, [r5, #4]
 8006936:	68aa      	ldr	r2, [r5, #8]
 8006938:	68eb      	ldr	r3, [r5, #12]
 800693a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800693c:	7c2b      	ldrb	r3, [r5, #16]
 800693e:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 8006940:	4a5a      	ldr	r2, [pc, #360]	@ (8006aac <loadMenuTexts+0x868>)
 8006942:	4b5b      	ldr	r3, [pc, #364]	@ (8006ab0 <loadMenuTexts+0x86c>)
 8006944:	4614      	mov	r4, r2
 8006946:	461d      	mov	r5, r3
 8006948:	6828      	ldr	r0, [r5, #0]
 800694a:	6869      	ldr	r1, [r5, #4]
 800694c:	68aa      	ldr	r2, [r5, #8]
 800694e:	68eb      	ldr	r3, [r5, #12]
 8006950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006952:	7c2b      	ldrb	r3, [r5, #16]
 8006954:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 8006956:	4a57      	ldr	r2, [pc, #348]	@ (8006ab4 <loadMenuTexts+0x870>)
 8006958:	4b57      	ldr	r3, [pc, #348]	@ (8006ab8 <loadMenuTexts+0x874>)
 800695a:	4614      	mov	r4, r2
 800695c:	461d      	mov	r5, r3
 800695e:	6828      	ldr	r0, [r5, #0]
 8006960:	6869      	ldr	r1, [r5, #4]
 8006962:	68aa      	ldr	r2, [r5, #8]
 8006964:	68eb      	ldr	r3, [r5, #12]
 8006966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006968:	7c2b      	ldrb	r3, [r5, #16]
 800696a:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 800696c:	4a53      	ldr	r2, [pc, #332]	@ (8006abc <loadMenuTexts+0x878>)
 800696e:	4b54      	ldr	r3, [pc, #336]	@ (8006ac0 <loadMenuTexts+0x87c>)
 8006970:	4614      	mov	r4, r2
 8006972:	461d      	mov	r5, r3
 8006974:	6828      	ldr	r0, [r5, #0]
 8006976:	6869      	ldr	r1, [r5, #4]
 8006978:	68aa      	ldr	r2, [r5, #8]
 800697a:	68eb      	ldr	r3, [r5, #12]
 800697c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800697e:	7c2b      	ldrb	r3, [r5, #16]
 8006980:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 8006982:	4a50      	ldr	r2, [pc, #320]	@ (8006ac4 <loadMenuTexts+0x880>)
 8006984:	4b50      	ldr	r3, [pc, #320]	@ (8006ac8 <loadMenuTexts+0x884>)
 8006986:	4614      	mov	r4, r2
 8006988:	461d      	mov	r5, r3
 800698a:	6828      	ldr	r0, [r5, #0]
 800698c:	6869      	ldr	r1, [r5, #4]
 800698e:	68aa      	ldr	r2, [r5, #8]
 8006990:	68eb      	ldr	r3, [r5, #12]
 8006992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006994:	7c2b      	ldrb	r3, [r5, #16]
 8006996:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 8006998:	4a4c      	ldr	r2, [pc, #304]	@ (8006acc <loadMenuTexts+0x888>)
 800699a:	4b4d      	ldr	r3, [pc, #308]	@ (8006ad0 <loadMenuTexts+0x88c>)
 800699c:	4614      	mov	r4, r2
 800699e:	461d      	mov	r5, r3
 80069a0:	6828      	ldr	r0, [r5, #0]
 80069a2:	6869      	ldr	r1, [r5, #4]
 80069a4:	68aa      	ldr	r2, [r5, #8]
 80069a6:	68eb      	ldr	r3, [r5, #12]
 80069a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069aa:	7c2b      	ldrb	r3, [r5, #16]
 80069ac:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 80069ae:	4a49      	ldr	r2, [pc, #292]	@ (8006ad4 <loadMenuTexts+0x890>)
 80069b0:	4b49      	ldr	r3, [pc, #292]	@ (8006ad8 <loadMenuTexts+0x894>)
 80069b2:	4614      	mov	r4, r2
 80069b4:	461d      	mov	r5, r3
 80069b6:	e091      	b.n	8006adc <loadMenuTexts+0x898>
 80069b8:	2000045c 	.word	0x2000045c
 80069bc:	20001504 	.word	0x20001504
 80069c0:	20000470 	.word	0x20000470
 80069c4:	20001518 	.word	0x20001518
 80069c8:	20000484 	.word	0x20000484
 80069cc:	2000152c 	.word	0x2000152c
 80069d0:	20000498 	.word	0x20000498
 80069d4:	20001540 	.word	0x20001540
 80069d8:	200004ac 	.word	0x200004ac
 80069dc:	20001554 	.word	0x20001554
 80069e0:	200004c0 	.word	0x200004c0
 80069e4:	20001568 	.word	0x20001568
 80069e8:	200004d4 	.word	0x200004d4
 80069ec:	2000157c 	.word	0x2000157c
 80069f0:	200004e8 	.word	0x200004e8
 80069f4:	20001590 	.word	0x20001590
 80069f8:	200004fc 	.word	0x200004fc
 80069fc:	200015a4 	.word	0x200015a4
 8006a00:	20000510 	.word	0x20000510
 8006a04:	200015b8 	.word	0x200015b8
 8006a08:	20000524 	.word	0x20000524
 8006a0c:	200015cc 	.word	0x200015cc
 8006a10:	20000538 	.word	0x20000538
 8006a14:	200015e0 	.word	0x200015e0
 8006a18:	2000054c 	.word	0x2000054c
 8006a1c:	200015f4 	.word	0x200015f4
 8006a20:	20000560 	.word	0x20000560
 8006a24:	20001608 	.word	0x20001608
 8006a28:	20000574 	.word	0x20000574
 8006a2c:	2000161c 	.word	0x2000161c
 8006a30:	20000588 	.word	0x20000588
 8006a34:	20001630 	.word	0x20001630
 8006a38:	2000059c 	.word	0x2000059c
 8006a3c:	20001644 	.word	0x20001644
 8006a40:	200005b0 	.word	0x200005b0
 8006a44:	20001658 	.word	0x20001658
 8006a48:	200005c4 	.word	0x200005c4
 8006a4c:	2000166c 	.word	0x2000166c
 8006a50:	200005d8 	.word	0x200005d8
 8006a54:	20001680 	.word	0x20001680
 8006a58:	200005ec 	.word	0x200005ec
 8006a5c:	20001694 	.word	0x20001694
 8006a60:	20000600 	.word	0x20000600
 8006a64:	200016a8 	.word	0x200016a8
 8006a68:	20000614 	.word	0x20000614
 8006a6c:	200016bc 	.word	0x200016bc
 8006a70:	20000628 	.word	0x20000628
 8006a74:	200016d0 	.word	0x200016d0
 8006a78:	2000063c 	.word	0x2000063c
 8006a7c:	200016e4 	.word	0x200016e4
 8006a80:	20000650 	.word	0x20000650
 8006a84:	200016f8 	.word	0x200016f8
 8006a88:	20000664 	.word	0x20000664
 8006a8c:	2000170c 	.word	0x2000170c
 8006a90:	20000678 	.word	0x20000678
 8006a94:	20001720 	.word	0x20001720
 8006a98:	2000068c 	.word	0x2000068c
 8006a9c:	20001734 	.word	0x20001734
 8006aa0:	200006a0 	.word	0x200006a0
 8006aa4:	20001748 	.word	0x20001748
 8006aa8:	200006b4 	.word	0x200006b4
 8006aac:	2000175c 	.word	0x2000175c
 8006ab0:	200006c8 	.word	0x200006c8
 8006ab4:	20001770 	.word	0x20001770
 8006ab8:	200006dc 	.word	0x200006dc
 8006abc:	20001784 	.word	0x20001784
 8006ac0:	200006f0 	.word	0x200006f0
 8006ac4:	20001798 	.word	0x20001798
 8006ac8:	20000c7c 	.word	0x20000c7c
 8006acc:	200017ac 	.word	0x200017ac
 8006ad0:	20000c90 	.word	0x20000c90
 8006ad4:	200017c0 	.word	0x200017c0
 8006ad8:	20000ca4 	.word	0x20000ca4
 8006adc:	6828      	ldr	r0, [r5, #0]
 8006ade:	6869      	ldr	r1, [r5, #4]
 8006ae0:	68aa      	ldr	r2, [r5, #8]
 8006ae2:	68eb      	ldr	r3, [r5, #12]
 8006ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ae6:	7c2b      	ldrb	r3, [r5, #16]
 8006ae8:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 8006aea:	4a59      	ldr	r2, [pc, #356]	@ (8006c50 <loadMenuTexts+0xa0c>)
 8006aec:	4b59      	ldr	r3, [pc, #356]	@ (8006c54 <loadMenuTexts+0xa10>)
 8006aee:	4614      	mov	r4, r2
 8006af0:	461d      	mov	r5, r3
 8006af2:	6828      	ldr	r0, [r5, #0]
 8006af4:	6869      	ldr	r1, [r5, #4]
 8006af6:	68aa      	ldr	r2, [r5, #8]
 8006af8:	68eb      	ldr	r3, [r5, #12]
 8006afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006afc:	7c2b      	ldrb	r3, [r5, #16]
 8006afe:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 8006b00:	4a55      	ldr	r2, [pc, #340]	@ (8006c58 <loadMenuTexts+0xa14>)
 8006b02:	4b56      	ldr	r3, [pc, #344]	@ (8006c5c <loadMenuTexts+0xa18>)
 8006b04:	4614      	mov	r4, r2
 8006b06:	461d      	mov	r5, r3
 8006b08:	6828      	ldr	r0, [r5, #0]
 8006b0a:	6869      	ldr	r1, [r5, #4]
 8006b0c:	68aa      	ldr	r2, [r5, #8]
 8006b0e:	68eb      	ldr	r3, [r5, #12]
 8006b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b12:	7c2b      	ldrb	r3, [r5, #16]
 8006b14:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 8006b16:	4a52      	ldr	r2, [pc, #328]	@ (8006c60 <loadMenuTexts+0xa1c>)
 8006b18:	4b52      	ldr	r3, [pc, #328]	@ (8006c64 <loadMenuTexts+0xa20>)
 8006b1a:	4614      	mov	r4, r2
 8006b1c:	461d      	mov	r5, r3
 8006b1e:	6828      	ldr	r0, [r5, #0]
 8006b20:	6869      	ldr	r1, [r5, #4]
 8006b22:	68aa      	ldr	r2, [r5, #8]
 8006b24:	68eb      	ldr	r3, [r5, #12]
 8006b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b28:	7c2b      	ldrb	r3, [r5, #16]
 8006b2a:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 8006b2c:	4a4e      	ldr	r2, [pc, #312]	@ (8006c68 <loadMenuTexts+0xa24>)
 8006b2e:	4b4f      	ldr	r3, [pc, #316]	@ (8006c6c <loadMenuTexts+0xa28>)
 8006b30:	4614      	mov	r4, r2
 8006b32:	461d      	mov	r5, r3
 8006b34:	6828      	ldr	r0, [r5, #0]
 8006b36:	6869      	ldr	r1, [r5, #4]
 8006b38:	68aa      	ldr	r2, [r5, #8]
 8006b3a:	68eb      	ldr	r3, [r5, #12]
 8006b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b3e:	7c2b      	ldrb	r3, [r5, #16]
 8006b40:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 8006b42:	4a4b      	ldr	r2, [pc, #300]	@ (8006c70 <loadMenuTexts+0xa2c>)
 8006b44:	4b4b      	ldr	r3, [pc, #300]	@ (8006c74 <loadMenuTexts+0xa30>)
 8006b46:	4614      	mov	r4, r2
 8006b48:	461d      	mov	r5, r3
 8006b4a:	6828      	ldr	r0, [r5, #0]
 8006b4c:	6869      	ldr	r1, [r5, #4]
 8006b4e:	68aa      	ldr	r2, [r5, #8]
 8006b50:	68eb      	ldr	r3, [r5, #12]
 8006b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b54:	7c2b      	ldrb	r3, [r5, #16]
 8006b56:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 8006b58:	4a47      	ldr	r2, [pc, #284]	@ (8006c78 <loadMenuTexts+0xa34>)
 8006b5a:	4b48      	ldr	r3, [pc, #288]	@ (8006c7c <loadMenuTexts+0xa38>)
 8006b5c:	4614      	mov	r4, r2
 8006b5e:	461d      	mov	r5, r3
 8006b60:	6828      	ldr	r0, [r5, #0]
 8006b62:	6869      	ldr	r1, [r5, #4]
 8006b64:	68aa      	ldr	r2, [r5, #8]
 8006b66:	68eb      	ldr	r3, [r5, #12]
 8006b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b6a:	7c2b      	ldrb	r3, [r5, #16]
 8006b6c:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 8006b6e:	4a44      	ldr	r2, [pc, #272]	@ (8006c80 <loadMenuTexts+0xa3c>)
 8006b70:	4b44      	ldr	r3, [pc, #272]	@ (8006c84 <loadMenuTexts+0xa40>)
 8006b72:	4614      	mov	r4, r2
 8006b74:	461d      	mov	r5, r3
 8006b76:	6828      	ldr	r0, [r5, #0]
 8006b78:	6869      	ldr	r1, [r5, #4]
 8006b7a:	68aa      	ldr	r2, [r5, #8]
 8006b7c:	68eb      	ldr	r3, [r5, #12]
 8006b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b80:	7c2b      	ldrb	r3, [r5, #16]
 8006b82:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 8006b84:	4a40      	ldr	r2, [pc, #256]	@ (8006c88 <loadMenuTexts+0xa44>)
 8006b86:	4b41      	ldr	r3, [pc, #260]	@ (8006c8c <loadMenuTexts+0xa48>)
 8006b88:	4614      	mov	r4, r2
 8006b8a:	461d      	mov	r5, r3
 8006b8c:	6828      	ldr	r0, [r5, #0]
 8006b8e:	6869      	ldr	r1, [r5, #4]
 8006b90:	68aa      	ldr	r2, [r5, #8]
 8006b92:	68eb      	ldr	r3, [r5, #12]
 8006b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b96:	7c2b      	ldrb	r3, [r5, #16]
 8006b98:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 8006b9a:	4a3d      	ldr	r2, [pc, #244]	@ (8006c90 <loadMenuTexts+0xa4c>)
 8006b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8006c94 <loadMenuTexts+0xa50>)
 8006b9e:	4614      	mov	r4, r2
 8006ba0:	461d      	mov	r5, r3
 8006ba2:	6828      	ldr	r0, [r5, #0]
 8006ba4:	6869      	ldr	r1, [r5, #4]
 8006ba6:	68aa      	ldr	r2, [r5, #8]
 8006ba8:	68eb      	ldr	r3, [r5, #12]
 8006baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bac:	7c2b      	ldrb	r3, [r5, #16]
 8006bae:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8006bb0:	4a39      	ldr	r2, [pc, #228]	@ (8006c98 <loadMenuTexts+0xa54>)
 8006bb2:	4b3a      	ldr	r3, [pc, #232]	@ (8006c9c <loadMenuTexts+0xa58>)
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	461d      	mov	r5, r3
 8006bb8:	6828      	ldr	r0, [r5, #0]
 8006bba:	6869      	ldr	r1, [r5, #4]
 8006bbc:	68aa      	ldr	r2, [r5, #8]
 8006bbe:	68eb      	ldr	r3, [r5, #12]
 8006bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bc2:	7c2b      	ldrb	r3, [r5, #16]
 8006bc4:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 8006bc6:	4a36      	ldr	r2, [pc, #216]	@ (8006ca0 <loadMenuTexts+0xa5c>)
 8006bc8:	4b36      	ldr	r3, [pc, #216]	@ (8006ca4 <loadMenuTexts+0xa60>)
 8006bca:	4614      	mov	r4, r2
 8006bcc:	461d      	mov	r5, r3
 8006bce:	6828      	ldr	r0, [r5, #0]
 8006bd0:	6869      	ldr	r1, [r5, #4]
 8006bd2:	68aa      	ldr	r2, [r5, #8]
 8006bd4:	68eb      	ldr	r3, [r5, #12]
 8006bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bd8:	7c2b      	ldrb	r3, [r5, #16]
 8006bda:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 8006bdc:	4a32      	ldr	r2, [pc, #200]	@ (8006ca8 <loadMenuTexts+0xa64>)
 8006bde:	4b33      	ldr	r3, [pc, #204]	@ (8006cac <loadMenuTexts+0xa68>)
 8006be0:	4614      	mov	r4, r2
 8006be2:	461d      	mov	r5, r3
 8006be4:	6828      	ldr	r0, [r5, #0]
 8006be6:	6869      	ldr	r1, [r5, #4]
 8006be8:	68aa      	ldr	r2, [r5, #8]
 8006bea:	68eb      	ldr	r3, [r5, #12]
 8006bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bee:	7c2b      	ldrb	r3, [r5, #16]
 8006bf0:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 8006bf2:	4a2f      	ldr	r2, [pc, #188]	@ (8006cb0 <loadMenuTexts+0xa6c>)
 8006bf4:	4b2f      	ldr	r3, [pc, #188]	@ (8006cb4 <loadMenuTexts+0xa70>)
 8006bf6:	4614      	mov	r4, r2
 8006bf8:	461d      	mov	r5, r3
 8006bfa:	6828      	ldr	r0, [r5, #0]
 8006bfc:	6869      	ldr	r1, [r5, #4]
 8006bfe:	68aa      	ldr	r2, [r5, #8]
 8006c00:	68eb      	ldr	r3, [r5, #12]
 8006c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c04:	7c2b      	ldrb	r3, [r5, #16]
 8006c06:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 8006c08:	4a2b      	ldr	r2, [pc, #172]	@ (8006cb8 <loadMenuTexts+0xa74>)
 8006c0a:	4b2c      	ldr	r3, [pc, #176]	@ (8006cbc <loadMenuTexts+0xa78>)
 8006c0c:	4614      	mov	r4, r2
 8006c0e:	461d      	mov	r5, r3
 8006c10:	6828      	ldr	r0, [r5, #0]
 8006c12:	6869      	ldr	r1, [r5, #4]
 8006c14:	68aa      	ldr	r2, [r5, #8]
 8006c16:	68eb      	ldr	r3, [r5, #12]
 8006c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c1a:	7c2b      	ldrb	r3, [r5, #16]
 8006c1c:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 8006c1e:	4a28      	ldr	r2, [pc, #160]	@ (8006cc0 <loadMenuTexts+0xa7c>)
 8006c20:	4b28      	ldr	r3, [pc, #160]	@ (8006cc4 <loadMenuTexts+0xa80>)
 8006c22:	4614      	mov	r4, r2
 8006c24:	461d      	mov	r5, r3
 8006c26:	6828      	ldr	r0, [r5, #0]
 8006c28:	6869      	ldr	r1, [r5, #4]
 8006c2a:	68aa      	ldr	r2, [r5, #8]
 8006c2c:	68eb      	ldr	r3, [r5, #12]
 8006c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c30:	7c2b      	ldrb	r3, [r5, #16]
 8006c32:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 8006c34:	4a24      	ldr	r2, [pc, #144]	@ (8006cc8 <loadMenuTexts+0xa84>)
 8006c36:	4b25      	ldr	r3, [pc, #148]	@ (8006ccc <loadMenuTexts+0xa88>)
 8006c38:	4614      	mov	r4, r2
 8006c3a:	461d      	mov	r5, r3
 8006c3c:	6828      	ldr	r0, [r5, #0]
 8006c3e:	6869      	ldr	r1, [r5, #4]
 8006c40:	68aa      	ldr	r2, [r5, #8]
 8006c42:	68eb      	ldr	r3, [r5, #12]
 8006c44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c46:	7c2b      	ldrb	r3, [r5, #16]
 8006c48:	7023      	strb	r3, [r4, #0]
 8006c4a:	f000 bd3a 	b.w	80076c2 <loadMenuTexts+0x147e>
 8006c4e:	bf00      	nop
 8006c50:	200017d4 	.word	0x200017d4
 8006c54:	20000cb8 	.word	0x20000cb8
 8006c58:	200017e8 	.word	0x200017e8
 8006c5c:	20000d1c 	.word	0x20000d1c
 8006c60:	200017fc 	.word	0x200017fc
 8006c64:	20000d30 	.word	0x20000d30
 8006c68:	20001810 	.word	0x20001810
 8006c6c:	20000d6c 	.word	0x20000d6c
 8006c70:	20001824 	.word	0x20001824
 8006c74:	20000d80 	.word	0x20000d80
 8006c78:	20001838 	.word	0x20001838
 8006c7c:	20000dbc 	.word	0x20000dbc
 8006c80:	2000184c 	.word	0x2000184c
 8006c84:	20000dd0 	.word	0x20000dd0
 8006c88:	20001860 	.word	0x20001860
 8006c8c:	20000e0c 	.word	0x20000e0c
 8006c90:	20001874 	.word	0x20001874
 8006c94:	20000e34 	.word	0x20000e34
 8006c98:	20001888 	.word	0x20001888
 8006c9c:	20000e5c 	.word	0x20000e5c
 8006ca0:	2000189c 	.word	0x2000189c
 8006ca4:	20000e84 	.word	0x20000e84
 8006ca8:	200018b0 	.word	0x200018b0
 8006cac:	20000eac 	.word	0x20000eac
 8006cb0:	200018c4 	.word	0x200018c4
 8006cb4:	20000ed4 	.word	0x20000ed4
 8006cb8:	200018d8 	.word	0x200018d8
 8006cbc:	20000efc 	.word	0x20000efc
 8006cc0:	200018ec 	.word	0x200018ec
 8006cc4:	20000f24 	.word	0x20000f24
 8006cc8:	20001900 	.word	0x20001900
 8006ccc:	20000f4c 	.word	0x20000f4c
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8006cd0:	4ac6      	ldr	r2, [pc, #792]	@ (8006fec <loadMenuTexts+0xda8>)
 8006cd2:	4bc7      	ldr	r3, [pc, #796]	@ (8006ff0 <loadMenuTexts+0xdac>)
 8006cd4:	4614      	mov	r4, r2
 8006cd6:	461d      	mov	r5, r3
 8006cd8:	6828      	ldr	r0, [r5, #0]
 8006cda:	6869      	ldr	r1, [r5, #4]
 8006cdc:	68aa      	ldr	r2, [r5, #8]
 8006cde:	68eb      	ldr	r3, [r5, #12]
 8006ce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ce2:	7c2b      	ldrb	r3, [r5, #16]
 8006ce4:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8006ce6:	4ac3      	ldr	r2, [pc, #780]	@ (8006ff4 <loadMenuTexts+0xdb0>)
 8006ce8:	4bc3      	ldr	r3, [pc, #780]	@ (8006ff8 <loadMenuTexts+0xdb4>)
 8006cea:	4614      	mov	r4, r2
 8006cec:	461d      	mov	r5, r3
 8006cee:	6828      	ldr	r0, [r5, #0]
 8006cf0:	6869      	ldr	r1, [r5, #4]
 8006cf2:	68aa      	ldr	r2, [r5, #8]
 8006cf4:	68eb      	ldr	r3, [r5, #12]
 8006cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cf8:	7c2b      	ldrb	r3, [r5, #16]
 8006cfa:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8006cfc:	4abf      	ldr	r2, [pc, #764]	@ (8006ffc <loadMenuTexts+0xdb8>)
 8006cfe:	4bc0      	ldr	r3, [pc, #768]	@ (8007000 <loadMenuTexts+0xdbc>)
 8006d00:	4614      	mov	r4, r2
 8006d02:	461d      	mov	r5, r3
 8006d04:	6828      	ldr	r0, [r5, #0]
 8006d06:	6869      	ldr	r1, [r5, #4]
 8006d08:	68aa      	ldr	r2, [r5, #8]
 8006d0a:	68eb      	ldr	r3, [r5, #12]
 8006d0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d0e:	7c2b      	ldrb	r3, [r5, #16]
 8006d10:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 8006d12:	4abc      	ldr	r2, [pc, #752]	@ (8007004 <loadMenuTexts+0xdc0>)
 8006d14:	4bbc      	ldr	r3, [pc, #752]	@ (8007008 <loadMenuTexts+0xdc4>)
 8006d16:	4614      	mov	r4, r2
 8006d18:	461d      	mov	r5, r3
 8006d1a:	6828      	ldr	r0, [r5, #0]
 8006d1c:	6869      	ldr	r1, [r5, #4]
 8006d1e:	68aa      	ldr	r2, [r5, #8]
 8006d20:	68eb      	ldr	r3, [r5, #12]
 8006d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d24:	7c2b      	ldrb	r3, [r5, #16]
 8006d26:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8006d28:	4ab8      	ldr	r2, [pc, #736]	@ (800700c <loadMenuTexts+0xdc8>)
 8006d2a:	4bb9      	ldr	r3, [pc, #740]	@ (8007010 <loadMenuTexts+0xdcc>)
 8006d2c:	4614      	mov	r4, r2
 8006d2e:	461d      	mov	r5, r3
 8006d30:	6828      	ldr	r0, [r5, #0]
 8006d32:	6869      	ldr	r1, [r5, #4]
 8006d34:	68aa      	ldr	r2, [r5, #8]
 8006d36:	68eb      	ldr	r3, [r5, #12]
 8006d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d3a:	7c2b      	ldrb	r3, [r5, #16]
 8006d3c:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 8006d3e:	4ab5      	ldr	r2, [pc, #724]	@ (8007014 <loadMenuTexts+0xdd0>)
 8006d40:	4bb5      	ldr	r3, [pc, #724]	@ (8007018 <loadMenuTexts+0xdd4>)
 8006d42:	4614      	mov	r4, r2
 8006d44:	461d      	mov	r5, r3
 8006d46:	6828      	ldr	r0, [r5, #0]
 8006d48:	6869      	ldr	r1, [r5, #4]
 8006d4a:	68aa      	ldr	r2, [r5, #8]
 8006d4c:	68eb      	ldr	r3, [r5, #12]
 8006d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d50:	7c2b      	ldrb	r3, [r5, #16]
 8006d52:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 8006d54:	4ab1      	ldr	r2, [pc, #708]	@ (800701c <loadMenuTexts+0xdd8>)
 8006d56:	4bb2      	ldr	r3, [pc, #712]	@ (8007020 <loadMenuTexts+0xddc>)
 8006d58:	4614      	mov	r4, r2
 8006d5a:	461d      	mov	r5, r3
 8006d5c:	6828      	ldr	r0, [r5, #0]
 8006d5e:	6869      	ldr	r1, [r5, #4]
 8006d60:	68aa      	ldr	r2, [r5, #8]
 8006d62:	68eb      	ldr	r3, [r5, #12]
 8006d64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d66:	7c2b      	ldrb	r3, [r5, #16]
 8006d68:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8006d6a:	4aae      	ldr	r2, [pc, #696]	@ (8007024 <loadMenuTexts+0xde0>)
 8006d6c:	4bae      	ldr	r3, [pc, #696]	@ (8007028 <loadMenuTexts+0xde4>)
 8006d6e:	4614      	mov	r4, r2
 8006d70:	461d      	mov	r5, r3
 8006d72:	6828      	ldr	r0, [r5, #0]
 8006d74:	6869      	ldr	r1, [r5, #4]
 8006d76:	68aa      	ldr	r2, [r5, #8]
 8006d78:	68eb      	ldr	r3, [r5, #12]
 8006d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d7c:	7c2b      	ldrb	r3, [r5, #16]
 8006d7e:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8006d80:	4aaa      	ldr	r2, [pc, #680]	@ (800702c <loadMenuTexts+0xde8>)
 8006d82:	4bab      	ldr	r3, [pc, #684]	@ (8007030 <loadMenuTexts+0xdec>)
 8006d84:	4614      	mov	r4, r2
 8006d86:	461d      	mov	r5, r3
 8006d88:	6828      	ldr	r0, [r5, #0]
 8006d8a:	6869      	ldr	r1, [r5, #4]
 8006d8c:	68aa      	ldr	r2, [r5, #8]
 8006d8e:	68eb      	ldr	r3, [r5, #12]
 8006d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d92:	7c2b      	ldrb	r3, [r5, #16]
 8006d94:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8006d96:	4aa7      	ldr	r2, [pc, #668]	@ (8007034 <loadMenuTexts+0xdf0>)
 8006d98:	4ba7      	ldr	r3, [pc, #668]	@ (8007038 <loadMenuTexts+0xdf4>)
 8006d9a:	4614      	mov	r4, r2
 8006d9c:	461d      	mov	r5, r3
 8006d9e:	6828      	ldr	r0, [r5, #0]
 8006da0:	6869      	ldr	r1, [r5, #4]
 8006da2:	68aa      	ldr	r2, [r5, #8]
 8006da4:	68eb      	ldr	r3, [r5, #12]
 8006da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006da8:	7c2b      	ldrb	r3, [r5, #16]
 8006daa:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8006dac:	4aa3      	ldr	r2, [pc, #652]	@ (800703c <loadMenuTexts+0xdf8>)
 8006dae:	4ba4      	ldr	r3, [pc, #656]	@ (8007040 <loadMenuTexts+0xdfc>)
 8006db0:	4614      	mov	r4, r2
 8006db2:	461d      	mov	r5, r3
 8006db4:	6828      	ldr	r0, [r5, #0]
 8006db6:	6869      	ldr	r1, [r5, #4]
 8006db8:	68aa      	ldr	r2, [r5, #8]
 8006dba:	68eb      	ldr	r3, [r5, #12]
 8006dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dbe:	7c2b      	ldrb	r3, [r5, #16]
 8006dc0:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8006dc2:	4aa0      	ldr	r2, [pc, #640]	@ (8007044 <loadMenuTexts+0xe00>)
 8006dc4:	4ba0      	ldr	r3, [pc, #640]	@ (8007048 <loadMenuTexts+0xe04>)
 8006dc6:	4614      	mov	r4, r2
 8006dc8:	461d      	mov	r5, r3
 8006dca:	6828      	ldr	r0, [r5, #0]
 8006dcc:	6869      	ldr	r1, [r5, #4]
 8006dce:	68aa      	ldr	r2, [r5, #8]
 8006dd0:	68eb      	ldr	r3, [r5, #12]
 8006dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dd4:	7c2b      	ldrb	r3, [r5, #16]
 8006dd6:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8006dd8:	4a9c      	ldr	r2, [pc, #624]	@ (800704c <loadMenuTexts+0xe08>)
 8006dda:	4b9d      	ldr	r3, [pc, #628]	@ (8007050 <loadMenuTexts+0xe0c>)
 8006ddc:	4614      	mov	r4, r2
 8006dde:	461d      	mov	r5, r3
 8006de0:	6828      	ldr	r0, [r5, #0]
 8006de2:	6869      	ldr	r1, [r5, #4]
 8006de4:	68aa      	ldr	r2, [r5, #8]
 8006de6:	68eb      	ldr	r3, [r5, #12]
 8006de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dea:	7c2b      	ldrb	r3, [r5, #16]
 8006dec:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8006dee:	4a99      	ldr	r2, [pc, #612]	@ (8007054 <loadMenuTexts+0xe10>)
 8006df0:	4b99      	ldr	r3, [pc, #612]	@ (8007058 <loadMenuTexts+0xe14>)
 8006df2:	4614      	mov	r4, r2
 8006df4:	461d      	mov	r5, r3
 8006df6:	6828      	ldr	r0, [r5, #0]
 8006df8:	6869      	ldr	r1, [r5, #4]
 8006dfa:	68aa      	ldr	r2, [r5, #8]
 8006dfc:	68eb      	ldr	r3, [r5, #12]
 8006dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e00:	7c2b      	ldrb	r3, [r5, #16]
 8006e02:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8006e04:	4a95      	ldr	r2, [pc, #596]	@ (800705c <loadMenuTexts+0xe18>)
 8006e06:	4b96      	ldr	r3, [pc, #600]	@ (8007060 <loadMenuTexts+0xe1c>)
 8006e08:	4614      	mov	r4, r2
 8006e0a:	461d      	mov	r5, r3
 8006e0c:	6828      	ldr	r0, [r5, #0]
 8006e0e:	6869      	ldr	r1, [r5, #4]
 8006e10:	68aa      	ldr	r2, [r5, #8]
 8006e12:	68eb      	ldr	r3, [r5, #12]
 8006e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e16:	7c2b      	ldrb	r3, [r5, #16]
 8006e18:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8006e1a:	4a92      	ldr	r2, [pc, #584]	@ (8007064 <loadMenuTexts+0xe20>)
 8006e1c:	4b92      	ldr	r3, [pc, #584]	@ (8007068 <loadMenuTexts+0xe24>)
 8006e1e:	4614      	mov	r4, r2
 8006e20:	461d      	mov	r5, r3
 8006e22:	6828      	ldr	r0, [r5, #0]
 8006e24:	6869      	ldr	r1, [r5, #4]
 8006e26:	68aa      	ldr	r2, [r5, #8]
 8006e28:	68eb      	ldr	r3, [r5, #12]
 8006e2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e2c:	7c2b      	ldrb	r3, [r5, #16]
 8006e2e:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8006e30:	4a8e      	ldr	r2, [pc, #568]	@ (800706c <loadMenuTexts+0xe28>)
 8006e32:	4b8f      	ldr	r3, [pc, #572]	@ (8007070 <loadMenuTexts+0xe2c>)
 8006e34:	4614      	mov	r4, r2
 8006e36:	461d      	mov	r5, r3
 8006e38:	6828      	ldr	r0, [r5, #0]
 8006e3a:	6869      	ldr	r1, [r5, #4]
 8006e3c:	68aa      	ldr	r2, [r5, #8]
 8006e3e:	68eb      	ldr	r3, [r5, #12]
 8006e40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e42:	7c2b      	ldrb	r3, [r5, #16]
 8006e44:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8006e46:	4a8b      	ldr	r2, [pc, #556]	@ (8007074 <loadMenuTexts+0xe30>)
 8006e48:	4b8b      	ldr	r3, [pc, #556]	@ (8007078 <loadMenuTexts+0xe34>)
 8006e4a:	4614      	mov	r4, r2
 8006e4c:	461d      	mov	r5, r3
 8006e4e:	6828      	ldr	r0, [r5, #0]
 8006e50:	6869      	ldr	r1, [r5, #4]
 8006e52:	68aa      	ldr	r2, [r5, #8]
 8006e54:	68eb      	ldr	r3, [r5, #12]
 8006e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e58:	7c2b      	ldrb	r3, [r5, #16]
 8006e5a:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8006e5c:	4a87      	ldr	r2, [pc, #540]	@ (800707c <loadMenuTexts+0xe38>)
 8006e5e:	4b88      	ldr	r3, [pc, #544]	@ (8007080 <loadMenuTexts+0xe3c>)
 8006e60:	4614      	mov	r4, r2
 8006e62:	461d      	mov	r5, r3
 8006e64:	6828      	ldr	r0, [r5, #0]
 8006e66:	6869      	ldr	r1, [r5, #4]
 8006e68:	68aa      	ldr	r2, [r5, #8]
 8006e6a:	68eb      	ldr	r3, [r5, #12]
 8006e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e6e:	7c2b      	ldrb	r3, [r5, #16]
 8006e70:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8006e72:	4a84      	ldr	r2, [pc, #528]	@ (8007084 <loadMenuTexts+0xe40>)
 8006e74:	4b84      	ldr	r3, [pc, #528]	@ (8007088 <loadMenuTexts+0xe44>)
 8006e76:	4614      	mov	r4, r2
 8006e78:	461d      	mov	r5, r3
 8006e7a:	6828      	ldr	r0, [r5, #0]
 8006e7c:	6869      	ldr	r1, [r5, #4]
 8006e7e:	68aa      	ldr	r2, [r5, #8]
 8006e80:	68eb      	ldr	r3, [r5, #12]
 8006e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e84:	7c2b      	ldrb	r3, [r5, #16]
 8006e86:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8006e88:	4a80      	ldr	r2, [pc, #512]	@ (800708c <loadMenuTexts+0xe48>)
 8006e8a:	4b81      	ldr	r3, [pc, #516]	@ (8007090 <loadMenuTexts+0xe4c>)
 8006e8c:	4614      	mov	r4, r2
 8006e8e:	461d      	mov	r5, r3
 8006e90:	6828      	ldr	r0, [r5, #0]
 8006e92:	6869      	ldr	r1, [r5, #4]
 8006e94:	68aa      	ldr	r2, [r5, #8]
 8006e96:	68eb      	ldr	r3, [r5, #12]
 8006e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e9a:	7c2b      	ldrb	r3, [r5, #16]
 8006e9c:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8006e9e:	4a7d      	ldr	r2, [pc, #500]	@ (8007094 <loadMenuTexts+0xe50>)
 8006ea0:	4b7d      	ldr	r3, [pc, #500]	@ (8007098 <loadMenuTexts+0xe54>)
 8006ea2:	4614      	mov	r4, r2
 8006ea4:	461d      	mov	r5, r3
 8006ea6:	6828      	ldr	r0, [r5, #0]
 8006ea8:	6869      	ldr	r1, [r5, #4]
 8006eaa:	68aa      	ldr	r2, [r5, #8]
 8006eac:	68eb      	ldr	r3, [r5, #12]
 8006eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eb0:	7c2b      	ldrb	r3, [r5, #16]
 8006eb2:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8006eb4:	4a79      	ldr	r2, [pc, #484]	@ (800709c <loadMenuTexts+0xe58>)
 8006eb6:	4b7a      	ldr	r3, [pc, #488]	@ (80070a0 <loadMenuTexts+0xe5c>)
 8006eb8:	4614      	mov	r4, r2
 8006eba:	461d      	mov	r5, r3
 8006ebc:	6828      	ldr	r0, [r5, #0]
 8006ebe:	6869      	ldr	r1, [r5, #4]
 8006ec0:	68aa      	ldr	r2, [r5, #8]
 8006ec2:	68eb      	ldr	r3, [r5, #12]
 8006ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ec6:	7c2b      	ldrb	r3, [r5, #16]
 8006ec8:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8006eca:	4a76      	ldr	r2, [pc, #472]	@ (80070a4 <loadMenuTexts+0xe60>)
 8006ecc:	4b76      	ldr	r3, [pc, #472]	@ (80070a8 <loadMenuTexts+0xe64>)
 8006ece:	4614      	mov	r4, r2
 8006ed0:	461d      	mov	r5, r3
 8006ed2:	6828      	ldr	r0, [r5, #0]
 8006ed4:	6869      	ldr	r1, [r5, #4]
 8006ed6:	68aa      	ldr	r2, [r5, #8]
 8006ed8:	68eb      	ldr	r3, [r5, #12]
 8006eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006edc:	7c2b      	ldrb	r3, [r5, #16]
 8006ede:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8006ee0:	4a72      	ldr	r2, [pc, #456]	@ (80070ac <loadMenuTexts+0xe68>)
 8006ee2:	4b73      	ldr	r3, [pc, #460]	@ (80070b0 <loadMenuTexts+0xe6c>)
 8006ee4:	4614      	mov	r4, r2
 8006ee6:	461d      	mov	r5, r3
 8006ee8:	6828      	ldr	r0, [r5, #0]
 8006eea:	6869      	ldr	r1, [r5, #4]
 8006eec:	68aa      	ldr	r2, [r5, #8]
 8006eee:	68eb      	ldr	r3, [r5, #12]
 8006ef0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ef2:	7c2b      	ldrb	r3, [r5, #16]
 8006ef4:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8006ef6:	4a6f      	ldr	r2, [pc, #444]	@ (80070b4 <loadMenuTexts+0xe70>)
 8006ef8:	4b6f      	ldr	r3, [pc, #444]	@ (80070b8 <loadMenuTexts+0xe74>)
 8006efa:	4614      	mov	r4, r2
 8006efc:	461d      	mov	r5, r3
 8006efe:	6828      	ldr	r0, [r5, #0]
 8006f00:	6869      	ldr	r1, [r5, #4]
 8006f02:	68aa      	ldr	r2, [r5, #8]
 8006f04:	68eb      	ldr	r3, [r5, #12]
 8006f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f08:	7c2b      	ldrb	r3, [r5, #16]
 8006f0a:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8006f0c:	4a6b      	ldr	r2, [pc, #428]	@ (80070bc <loadMenuTexts+0xe78>)
 8006f0e:	4b6c      	ldr	r3, [pc, #432]	@ (80070c0 <loadMenuTexts+0xe7c>)
 8006f10:	4614      	mov	r4, r2
 8006f12:	461d      	mov	r5, r3
 8006f14:	6828      	ldr	r0, [r5, #0]
 8006f16:	6869      	ldr	r1, [r5, #4]
 8006f18:	68aa      	ldr	r2, [r5, #8]
 8006f1a:	68eb      	ldr	r3, [r5, #12]
 8006f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f1e:	7c2b      	ldrb	r3, [r5, #16]
 8006f20:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8006f22:	4a68      	ldr	r2, [pc, #416]	@ (80070c4 <loadMenuTexts+0xe80>)
 8006f24:	4b68      	ldr	r3, [pc, #416]	@ (80070c8 <loadMenuTexts+0xe84>)
 8006f26:	4614      	mov	r4, r2
 8006f28:	461d      	mov	r5, r3
 8006f2a:	6828      	ldr	r0, [r5, #0]
 8006f2c:	6869      	ldr	r1, [r5, #4]
 8006f2e:	68aa      	ldr	r2, [r5, #8]
 8006f30:	68eb      	ldr	r3, [r5, #12]
 8006f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f34:	7c2b      	ldrb	r3, [r5, #16]
 8006f36:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8006f38:	4a64      	ldr	r2, [pc, #400]	@ (80070cc <loadMenuTexts+0xe88>)
 8006f3a:	4b65      	ldr	r3, [pc, #404]	@ (80070d0 <loadMenuTexts+0xe8c>)
 8006f3c:	4614      	mov	r4, r2
 8006f3e:	461d      	mov	r5, r3
 8006f40:	6828      	ldr	r0, [r5, #0]
 8006f42:	6869      	ldr	r1, [r5, #4]
 8006f44:	68aa      	ldr	r2, [r5, #8]
 8006f46:	68eb      	ldr	r3, [r5, #12]
 8006f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f4a:	7c2b      	ldrb	r3, [r5, #16]
 8006f4c:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 8006f4e:	4a61      	ldr	r2, [pc, #388]	@ (80070d4 <loadMenuTexts+0xe90>)
 8006f50:	4b61      	ldr	r3, [pc, #388]	@ (80070d8 <loadMenuTexts+0xe94>)
 8006f52:	4614      	mov	r4, r2
 8006f54:	461d      	mov	r5, r3
 8006f56:	6828      	ldr	r0, [r5, #0]
 8006f58:	6869      	ldr	r1, [r5, #4]
 8006f5a:	68aa      	ldr	r2, [r5, #8]
 8006f5c:	68eb      	ldr	r3, [r5, #12]
 8006f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f60:	7c2b      	ldrb	r3, [r5, #16]
 8006f62:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8006f64:	4a5d      	ldr	r2, [pc, #372]	@ (80070dc <loadMenuTexts+0xe98>)
 8006f66:	4b5e      	ldr	r3, [pc, #376]	@ (80070e0 <loadMenuTexts+0xe9c>)
 8006f68:	4614      	mov	r4, r2
 8006f6a:	461d      	mov	r5, r3
 8006f6c:	6828      	ldr	r0, [r5, #0]
 8006f6e:	6869      	ldr	r1, [r5, #4]
 8006f70:	68aa      	ldr	r2, [r5, #8]
 8006f72:	68eb      	ldr	r3, [r5, #12]
 8006f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f76:	7c2b      	ldrb	r3, [r5, #16]
 8006f78:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8006f7a:	4a5a      	ldr	r2, [pc, #360]	@ (80070e4 <loadMenuTexts+0xea0>)
 8006f7c:	4b5a      	ldr	r3, [pc, #360]	@ (80070e8 <loadMenuTexts+0xea4>)
 8006f7e:	4614      	mov	r4, r2
 8006f80:	461d      	mov	r5, r3
 8006f82:	6828      	ldr	r0, [r5, #0]
 8006f84:	6869      	ldr	r1, [r5, #4]
 8006f86:	68aa      	ldr	r2, [r5, #8]
 8006f88:	68eb      	ldr	r3, [r5, #12]
 8006f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f8c:	7c2b      	ldrb	r3, [r5, #16]
 8006f8e:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 8006f90:	4a56      	ldr	r2, [pc, #344]	@ (80070ec <loadMenuTexts+0xea8>)
 8006f92:	4b57      	ldr	r3, [pc, #348]	@ (80070f0 <loadMenuTexts+0xeac>)
 8006f94:	4614      	mov	r4, r2
 8006f96:	461d      	mov	r5, r3
 8006f98:	6828      	ldr	r0, [r5, #0]
 8006f9a:	6869      	ldr	r1, [r5, #4]
 8006f9c:	68aa      	ldr	r2, [r5, #8]
 8006f9e:	68eb      	ldr	r3, [r5, #12]
 8006fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fa2:	7c2b      	ldrb	r3, [r5, #16]
 8006fa4:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8006fa6:	4a53      	ldr	r2, [pc, #332]	@ (80070f4 <loadMenuTexts+0xeb0>)
 8006fa8:	4b53      	ldr	r3, [pc, #332]	@ (80070f8 <loadMenuTexts+0xeb4>)
 8006faa:	4614      	mov	r4, r2
 8006fac:	461d      	mov	r5, r3
 8006fae:	6828      	ldr	r0, [r5, #0]
 8006fb0:	6869      	ldr	r1, [r5, #4]
 8006fb2:	68aa      	ldr	r2, [r5, #8]
 8006fb4:	68eb      	ldr	r3, [r5, #12]
 8006fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fb8:	7c2b      	ldrb	r3, [r5, #16]
 8006fba:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8006fbc:	4a4f      	ldr	r2, [pc, #316]	@ (80070fc <loadMenuTexts+0xeb8>)
 8006fbe:	4b50      	ldr	r3, [pc, #320]	@ (8007100 <loadMenuTexts+0xebc>)
 8006fc0:	4614      	mov	r4, r2
 8006fc2:	461d      	mov	r5, r3
 8006fc4:	6828      	ldr	r0, [r5, #0]
 8006fc6:	6869      	ldr	r1, [r5, #4]
 8006fc8:	68aa      	ldr	r2, [r5, #8]
 8006fca:	68eb      	ldr	r3, [r5, #12]
 8006fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fce:	7c2b      	ldrb	r3, [r5, #16]
 8006fd0:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8006fd2:	4a4c      	ldr	r2, [pc, #304]	@ (8007104 <loadMenuTexts+0xec0>)
 8006fd4:	4b4c      	ldr	r3, [pc, #304]	@ (8007108 <loadMenuTexts+0xec4>)
 8006fd6:	4614      	mov	r4, r2
 8006fd8:	461d      	mov	r5, r3
 8006fda:	6828      	ldr	r0, [r5, #0]
 8006fdc:	6869      	ldr	r1, [r5, #4]
 8006fde:	68aa      	ldr	r2, [r5, #8]
 8006fe0:	68eb      	ldr	r3, [r5, #12]
 8006fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fe4:	7c2b      	ldrb	r3, [r5, #16]
 8006fe6:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8006fe8:	4a48      	ldr	r2, [pc, #288]	@ (800710c <loadMenuTexts+0xec8>)
 8006fea:	e091      	b.n	8007110 <loadMenuTexts+0xecc>
 8006fec:	20001220 	.word	0x20001220
 8006ff0:	20000704 	.word	0x20000704
 8006ff4:	20001234 	.word	0x20001234
 8006ff8:	20000718 	.word	0x20000718
 8006ffc:	20001248 	.word	0x20001248
 8007000:	2000072c 	.word	0x2000072c
 8007004:	2000125c 	.word	0x2000125c
 8007008:	20000740 	.word	0x20000740
 800700c:	20001270 	.word	0x20001270
 8007010:	20000754 	.word	0x20000754
 8007014:	20001284 	.word	0x20001284
 8007018:	20000768 	.word	0x20000768
 800701c:	20001298 	.word	0x20001298
 8007020:	2000077c 	.word	0x2000077c
 8007024:	200012ac 	.word	0x200012ac
 8007028:	20000790 	.word	0x20000790
 800702c:	200012c0 	.word	0x200012c0
 8007030:	200007a4 	.word	0x200007a4
 8007034:	200012d4 	.word	0x200012d4
 8007038:	200007b8 	.word	0x200007b8
 800703c:	200012e8 	.word	0x200012e8
 8007040:	200007cc 	.word	0x200007cc
 8007044:	200012fc 	.word	0x200012fc
 8007048:	200007e0 	.word	0x200007e0
 800704c:	20001310 	.word	0x20001310
 8007050:	200007f4 	.word	0x200007f4
 8007054:	20001324 	.word	0x20001324
 8007058:	20000808 	.word	0x20000808
 800705c:	20001338 	.word	0x20001338
 8007060:	2000081c 	.word	0x2000081c
 8007064:	2000134c 	.word	0x2000134c
 8007068:	20000830 	.word	0x20000830
 800706c:	20001360 	.word	0x20001360
 8007070:	20000844 	.word	0x20000844
 8007074:	20001374 	.word	0x20001374
 8007078:	20000858 	.word	0x20000858
 800707c:	20001388 	.word	0x20001388
 8007080:	2000086c 	.word	0x2000086c
 8007084:	2000139c 	.word	0x2000139c
 8007088:	20000880 	.word	0x20000880
 800708c:	200013b0 	.word	0x200013b0
 8007090:	20000894 	.word	0x20000894
 8007094:	200013c4 	.word	0x200013c4
 8007098:	200008a8 	.word	0x200008a8
 800709c:	200013d8 	.word	0x200013d8
 80070a0:	200008bc 	.word	0x200008bc
 80070a4:	200013ec 	.word	0x200013ec
 80070a8:	200008d0 	.word	0x200008d0
 80070ac:	20001400 	.word	0x20001400
 80070b0:	200008e4 	.word	0x200008e4
 80070b4:	20001414 	.word	0x20001414
 80070b8:	200008f8 	.word	0x200008f8
 80070bc:	20001428 	.word	0x20001428
 80070c0:	2000090c 	.word	0x2000090c
 80070c4:	2000143c 	.word	0x2000143c
 80070c8:	20000920 	.word	0x20000920
 80070cc:	20001450 	.word	0x20001450
 80070d0:	20000934 	.word	0x20000934
 80070d4:	20001464 	.word	0x20001464
 80070d8:	20000948 	.word	0x20000948
 80070dc:	20001478 	.word	0x20001478
 80070e0:	2000095c 	.word	0x2000095c
 80070e4:	2000148c 	.word	0x2000148c
 80070e8:	20000970 	.word	0x20000970
 80070ec:	200014a0 	.word	0x200014a0
 80070f0:	20000984 	.word	0x20000984
 80070f4:	200014b4 	.word	0x200014b4
 80070f8:	20000998 	.word	0x20000998
 80070fc:	200014c8 	.word	0x200014c8
 8007100:	200009ac 	.word	0x200009ac
 8007104:	200014dc 	.word	0x200014dc
 8007108:	200009c0 	.word	0x200009c0
 800710c:	200014f0 	.word	0x200014f0
 8007110:	4bc7      	ldr	r3, [pc, #796]	@ (8007430 <loadMenuTexts+0x11ec>)
 8007112:	4614      	mov	r4, r2
 8007114:	461d      	mov	r5, r3
 8007116:	6828      	ldr	r0, [r5, #0]
 8007118:	6869      	ldr	r1, [r5, #4]
 800711a:	68aa      	ldr	r2, [r5, #8]
 800711c:	68eb      	ldr	r3, [r5, #12]
 800711e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007120:	7c2b      	ldrb	r3, [r5, #16]
 8007122:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8007124:	4ac3      	ldr	r2, [pc, #780]	@ (8007434 <loadMenuTexts+0x11f0>)
 8007126:	4bc4      	ldr	r3, [pc, #784]	@ (8007438 <loadMenuTexts+0x11f4>)
 8007128:	4614      	mov	r4, r2
 800712a:	461d      	mov	r5, r3
 800712c:	6828      	ldr	r0, [r5, #0]
 800712e:	6869      	ldr	r1, [r5, #4]
 8007130:	68aa      	ldr	r2, [r5, #8]
 8007132:	68eb      	ldr	r3, [r5, #12]
 8007134:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007136:	7c2b      	ldrb	r3, [r5, #16]
 8007138:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 800713a:	4ac0      	ldr	r2, [pc, #768]	@ (800743c <loadMenuTexts+0x11f8>)
 800713c:	4bc0      	ldr	r3, [pc, #768]	@ (8007440 <loadMenuTexts+0x11fc>)
 800713e:	4614      	mov	r4, r2
 8007140:	461d      	mov	r5, r3
 8007142:	6828      	ldr	r0, [r5, #0]
 8007144:	6869      	ldr	r1, [r5, #4]
 8007146:	68aa      	ldr	r2, [r5, #8]
 8007148:	68eb      	ldr	r3, [r5, #12]
 800714a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800714c:	7c2b      	ldrb	r3, [r5, #16]
 800714e:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8007150:	4abc      	ldr	r2, [pc, #752]	@ (8007444 <loadMenuTexts+0x1200>)
 8007152:	4bbd      	ldr	r3, [pc, #756]	@ (8007448 <loadMenuTexts+0x1204>)
 8007154:	4614      	mov	r4, r2
 8007156:	461d      	mov	r5, r3
 8007158:	6828      	ldr	r0, [r5, #0]
 800715a:	6869      	ldr	r1, [r5, #4]
 800715c:	68aa      	ldr	r2, [r5, #8]
 800715e:	68eb      	ldr	r3, [r5, #12]
 8007160:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007162:	7c2b      	ldrb	r3, [r5, #16]
 8007164:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 8007166:	4ab9      	ldr	r2, [pc, #740]	@ (800744c <loadMenuTexts+0x1208>)
 8007168:	4bb9      	ldr	r3, [pc, #740]	@ (8007450 <loadMenuTexts+0x120c>)
 800716a:	4614      	mov	r4, r2
 800716c:	461d      	mov	r5, r3
 800716e:	6828      	ldr	r0, [r5, #0]
 8007170:	6869      	ldr	r1, [r5, #4]
 8007172:	68aa      	ldr	r2, [r5, #8]
 8007174:	68eb      	ldr	r3, [r5, #12]
 8007176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007178:	7c2b      	ldrb	r3, [r5, #16]
 800717a:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 800717c:	4ab5      	ldr	r2, [pc, #724]	@ (8007454 <loadMenuTexts+0x1210>)
 800717e:	4bb6      	ldr	r3, [pc, #728]	@ (8007458 <loadMenuTexts+0x1214>)
 8007180:	4614      	mov	r4, r2
 8007182:	461d      	mov	r5, r3
 8007184:	6828      	ldr	r0, [r5, #0]
 8007186:	6869      	ldr	r1, [r5, #4]
 8007188:	68aa      	ldr	r2, [r5, #8]
 800718a:	68eb      	ldr	r3, [r5, #12]
 800718c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800718e:	7c2b      	ldrb	r3, [r5, #16]
 8007190:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 8007192:	4ab2      	ldr	r2, [pc, #712]	@ (800745c <loadMenuTexts+0x1218>)
 8007194:	4bb2      	ldr	r3, [pc, #712]	@ (8007460 <loadMenuTexts+0x121c>)
 8007196:	4614      	mov	r4, r2
 8007198:	461d      	mov	r5, r3
 800719a:	6828      	ldr	r0, [r5, #0]
 800719c:	6869      	ldr	r1, [r5, #4]
 800719e:	68aa      	ldr	r2, [r5, #8]
 80071a0:	68eb      	ldr	r3, [r5, #12]
 80071a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071a4:	7c2b      	ldrb	r3, [r5, #16]
 80071a6:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 80071a8:	4aae      	ldr	r2, [pc, #696]	@ (8007464 <loadMenuTexts+0x1220>)
 80071aa:	4baf      	ldr	r3, [pc, #700]	@ (8007468 <loadMenuTexts+0x1224>)
 80071ac:	4614      	mov	r4, r2
 80071ae:	461d      	mov	r5, r3
 80071b0:	6828      	ldr	r0, [r5, #0]
 80071b2:	6869      	ldr	r1, [r5, #4]
 80071b4:	68aa      	ldr	r2, [r5, #8]
 80071b6:	68eb      	ldr	r3, [r5, #12]
 80071b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071ba:	7c2b      	ldrb	r3, [r5, #16]
 80071bc:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 80071be:	4aab      	ldr	r2, [pc, #684]	@ (800746c <loadMenuTexts+0x1228>)
 80071c0:	4bab      	ldr	r3, [pc, #684]	@ (8007470 <loadMenuTexts+0x122c>)
 80071c2:	4614      	mov	r4, r2
 80071c4:	461d      	mov	r5, r3
 80071c6:	6828      	ldr	r0, [r5, #0]
 80071c8:	6869      	ldr	r1, [r5, #4]
 80071ca:	68aa      	ldr	r2, [r5, #8]
 80071cc:	68eb      	ldr	r3, [r5, #12]
 80071ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071d0:	7c2b      	ldrb	r3, [r5, #16]
 80071d2:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 80071d4:	4aa7      	ldr	r2, [pc, #668]	@ (8007474 <loadMenuTexts+0x1230>)
 80071d6:	4ba8      	ldr	r3, [pc, #672]	@ (8007478 <loadMenuTexts+0x1234>)
 80071d8:	4614      	mov	r4, r2
 80071da:	461d      	mov	r5, r3
 80071dc:	6828      	ldr	r0, [r5, #0]
 80071de:	6869      	ldr	r1, [r5, #4]
 80071e0:	68aa      	ldr	r2, [r5, #8]
 80071e2:	68eb      	ldr	r3, [r5, #12]
 80071e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071e6:	7c2b      	ldrb	r3, [r5, #16]
 80071e8:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 80071ea:	4aa4      	ldr	r2, [pc, #656]	@ (800747c <loadMenuTexts+0x1238>)
 80071ec:	4ba4      	ldr	r3, [pc, #656]	@ (8007480 <loadMenuTexts+0x123c>)
 80071ee:	4614      	mov	r4, r2
 80071f0:	461d      	mov	r5, r3
 80071f2:	6828      	ldr	r0, [r5, #0]
 80071f4:	6869      	ldr	r1, [r5, #4]
 80071f6:	68aa      	ldr	r2, [r5, #8]
 80071f8:	68eb      	ldr	r3, [r5, #12]
 80071fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071fc:	7c2b      	ldrb	r3, [r5, #16]
 80071fe:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8007200:	4aa0      	ldr	r2, [pc, #640]	@ (8007484 <loadMenuTexts+0x1240>)
 8007202:	4ba1      	ldr	r3, [pc, #644]	@ (8007488 <loadMenuTexts+0x1244>)
 8007204:	4614      	mov	r4, r2
 8007206:	461d      	mov	r5, r3
 8007208:	6828      	ldr	r0, [r5, #0]
 800720a:	6869      	ldr	r1, [r5, #4]
 800720c:	68aa      	ldr	r2, [r5, #8]
 800720e:	68eb      	ldr	r3, [r5, #12]
 8007210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007212:	7c2b      	ldrb	r3, [r5, #16]
 8007214:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 8007216:	4a9d      	ldr	r2, [pc, #628]	@ (800748c <loadMenuTexts+0x1248>)
 8007218:	4b9d      	ldr	r3, [pc, #628]	@ (8007490 <loadMenuTexts+0x124c>)
 800721a:	4614      	mov	r4, r2
 800721c:	461d      	mov	r5, r3
 800721e:	6828      	ldr	r0, [r5, #0]
 8007220:	6869      	ldr	r1, [r5, #4]
 8007222:	68aa      	ldr	r2, [r5, #8]
 8007224:	68eb      	ldr	r3, [r5, #12]
 8007226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007228:	7c2b      	ldrb	r3, [r5, #16]
 800722a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 800722c:	4a99      	ldr	r2, [pc, #612]	@ (8007494 <loadMenuTexts+0x1250>)
 800722e:	4b9a      	ldr	r3, [pc, #616]	@ (8007498 <loadMenuTexts+0x1254>)
 8007230:	4614      	mov	r4, r2
 8007232:	461d      	mov	r5, r3
 8007234:	6828      	ldr	r0, [r5, #0]
 8007236:	6869      	ldr	r1, [r5, #4]
 8007238:	68aa      	ldr	r2, [r5, #8]
 800723a:	68eb      	ldr	r3, [r5, #12]
 800723c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800723e:	7c2b      	ldrb	r3, [r5, #16]
 8007240:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8007242:	4a96      	ldr	r2, [pc, #600]	@ (800749c <loadMenuTexts+0x1258>)
 8007244:	4b96      	ldr	r3, [pc, #600]	@ (80074a0 <loadMenuTexts+0x125c>)
 8007246:	4614      	mov	r4, r2
 8007248:	461d      	mov	r5, r3
 800724a:	6828      	ldr	r0, [r5, #0]
 800724c:	6869      	ldr	r1, [r5, #4]
 800724e:	68aa      	ldr	r2, [r5, #8]
 8007250:	68eb      	ldr	r3, [r5, #12]
 8007252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007254:	7c2b      	ldrb	r3, [r5, #16]
 8007256:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8007258:	4a92      	ldr	r2, [pc, #584]	@ (80074a4 <loadMenuTexts+0x1260>)
 800725a:	4b93      	ldr	r3, [pc, #588]	@ (80074a8 <loadMenuTexts+0x1264>)
 800725c:	4614      	mov	r4, r2
 800725e:	461d      	mov	r5, r3
 8007260:	6828      	ldr	r0, [r5, #0]
 8007262:	6869      	ldr	r1, [r5, #4]
 8007264:	68aa      	ldr	r2, [r5, #8]
 8007266:	68eb      	ldr	r3, [r5, #12]
 8007268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800726a:	7c2b      	ldrb	r3, [r5, #16]
 800726c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 800726e:	4a8f      	ldr	r2, [pc, #572]	@ (80074ac <loadMenuTexts+0x1268>)
 8007270:	4b8f      	ldr	r3, [pc, #572]	@ (80074b0 <loadMenuTexts+0x126c>)
 8007272:	4614      	mov	r4, r2
 8007274:	461d      	mov	r5, r3
 8007276:	6828      	ldr	r0, [r5, #0]
 8007278:	6869      	ldr	r1, [r5, #4]
 800727a:	68aa      	ldr	r2, [r5, #8]
 800727c:	68eb      	ldr	r3, [r5, #12]
 800727e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007280:	7c2b      	ldrb	r3, [r5, #16]
 8007282:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8007284:	4a8b      	ldr	r2, [pc, #556]	@ (80074b4 <loadMenuTexts+0x1270>)
 8007286:	4b8c      	ldr	r3, [pc, #560]	@ (80074b8 <loadMenuTexts+0x1274>)
 8007288:	4614      	mov	r4, r2
 800728a:	461d      	mov	r5, r3
 800728c:	6828      	ldr	r0, [r5, #0]
 800728e:	6869      	ldr	r1, [r5, #4]
 8007290:	68aa      	ldr	r2, [r5, #8]
 8007292:	68eb      	ldr	r3, [r5, #12]
 8007294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007296:	7c2b      	ldrb	r3, [r5, #16]
 8007298:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 800729a:	4a88      	ldr	r2, [pc, #544]	@ (80074bc <loadMenuTexts+0x1278>)
 800729c:	4b88      	ldr	r3, [pc, #544]	@ (80074c0 <loadMenuTexts+0x127c>)
 800729e:	4614      	mov	r4, r2
 80072a0:	461d      	mov	r5, r3
 80072a2:	6828      	ldr	r0, [r5, #0]
 80072a4:	6869      	ldr	r1, [r5, #4]
 80072a6:	68aa      	ldr	r2, [r5, #8]
 80072a8:	68eb      	ldr	r3, [r5, #12]
 80072aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ac:	7c2b      	ldrb	r3, [r5, #16]
 80072ae:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 80072b0:	4a84      	ldr	r2, [pc, #528]	@ (80074c4 <loadMenuTexts+0x1280>)
 80072b2:	4b85      	ldr	r3, [pc, #532]	@ (80074c8 <loadMenuTexts+0x1284>)
 80072b4:	4614      	mov	r4, r2
 80072b6:	461d      	mov	r5, r3
 80072b8:	6828      	ldr	r0, [r5, #0]
 80072ba:	6869      	ldr	r1, [r5, #4]
 80072bc:	68aa      	ldr	r2, [r5, #8]
 80072be:	68eb      	ldr	r3, [r5, #12]
 80072c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072c2:	7c2b      	ldrb	r3, [r5, #16]
 80072c4:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 80072c6:	4a81      	ldr	r2, [pc, #516]	@ (80074cc <loadMenuTexts+0x1288>)
 80072c8:	4b81      	ldr	r3, [pc, #516]	@ (80074d0 <loadMenuTexts+0x128c>)
 80072ca:	4614      	mov	r4, r2
 80072cc:	461d      	mov	r5, r3
 80072ce:	6828      	ldr	r0, [r5, #0]
 80072d0:	6869      	ldr	r1, [r5, #4]
 80072d2:	68aa      	ldr	r2, [r5, #8]
 80072d4:	68eb      	ldr	r3, [r5, #12]
 80072d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072d8:	7c2b      	ldrb	r3, [r5, #16]
 80072da:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 80072dc:	4a7d      	ldr	r2, [pc, #500]	@ (80074d4 <loadMenuTexts+0x1290>)
 80072de:	4b7e      	ldr	r3, [pc, #504]	@ (80074d8 <loadMenuTexts+0x1294>)
 80072e0:	4614      	mov	r4, r2
 80072e2:	461d      	mov	r5, r3
 80072e4:	6828      	ldr	r0, [r5, #0]
 80072e6:	6869      	ldr	r1, [r5, #4]
 80072e8:	68aa      	ldr	r2, [r5, #8]
 80072ea:	68eb      	ldr	r3, [r5, #12]
 80072ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ee:	7c2b      	ldrb	r3, [r5, #16]
 80072f0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 80072f2:	4a7a      	ldr	r2, [pc, #488]	@ (80074dc <loadMenuTexts+0x1298>)
 80072f4:	4b7a      	ldr	r3, [pc, #488]	@ (80074e0 <loadMenuTexts+0x129c>)
 80072f6:	4614      	mov	r4, r2
 80072f8:	461d      	mov	r5, r3
 80072fa:	6828      	ldr	r0, [r5, #0]
 80072fc:	6869      	ldr	r1, [r5, #4]
 80072fe:	68aa      	ldr	r2, [r5, #8]
 8007300:	68eb      	ldr	r3, [r5, #12]
 8007302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007304:	7c2b      	ldrb	r3, [r5, #16]
 8007306:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8007308:	4a76      	ldr	r2, [pc, #472]	@ (80074e4 <loadMenuTexts+0x12a0>)
 800730a:	4b77      	ldr	r3, [pc, #476]	@ (80074e8 <loadMenuTexts+0x12a4>)
 800730c:	4614      	mov	r4, r2
 800730e:	461d      	mov	r5, r3
 8007310:	6828      	ldr	r0, [r5, #0]
 8007312:	6869      	ldr	r1, [r5, #4]
 8007314:	68aa      	ldr	r2, [r5, #8]
 8007316:	68eb      	ldr	r3, [r5, #12]
 8007318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800731a:	7c2b      	ldrb	r3, [r5, #16]
 800731c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 800731e:	4a73      	ldr	r2, [pc, #460]	@ (80074ec <loadMenuTexts+0x12a8>)
 8007320:	4b73      	ldr	r3, [pc, #460]	@ (80074f0 <loadMenuTexts+0x12ac>)
 8007322:	4614      	mov	r4, r2
 8007324:	461d      	mov	r5, r3
 8007326:	6828      	ldr	r0, [r5, #0]
 8007328:	6869      	ldr	r1, [r5, #4]
 800732a:	68aa      	ldr	r2, [r5, #8]
 800732c:	68eb      	ldr	r3, [r5, #12]
 800732e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007330:	7c2b      	ldrb	r3, [r5, #16]
 8007332:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8007334:	4a6f      	ldr	r2, [pc, #444]	@ (80074f4 <loadMenuTexts+0x12b0>)
 8007336:	4b70      	ldr	r3, [pc, #448]	@ (80074f8 <loadMenuTexts+0x12b4>)
 8007338:	4614      	mov	r4, r2
 800733a:	461d      	mov	r5, r3
 800733c:	6828      	ldr	r0, [r5, #0]
 800733e:	6869      	ldr	r1, [r5, #4]
 8007340:	68aa      	ldr	r2, [r5, #8]
 8007342:	68eb      	ldr	r3, [r5, #12]
 8007344:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007346:	7c2b      	ldrb	r3, [r5, #16]
 8007348:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 800734a:	4a6c      	ldr	r2, [pc, #432]	@ (80074fc <loadMenuTexts+0x12b8>)
 800734c:	4b6c      	ldr	r3, [pc, #432]	@ (8007500 <loadMenuTexts+0x12bc>)
 800734e:	4614      	mov	r4, r2
 8007350:	461d      	mov	r5, r3
 8007352:	6828      	ldr	r0, [r5, #0]
 8007354:	6869      	ldr	r1, [r5, #4]
 8007356:	68aa      	ldr	r2, [r5, #8]
 8007358:	68eb      	ldr	r3, [r5, #12]
 800735a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800735c:	7c2b      	ldrb	r3, [r5, #16]
 800735e:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8007360:	4a68      	ldr	r2, [pc, #416]	@ (8007504 <loadMenuTexts+0x12c0>)
 8007362:	4b69      	ldr	r3, [pc, #420]	@ (8007508 <loadMenuTexts+0x12c4>)
 8007364:	4614      	mov	r4, r2
 8007366:	461d      	mov	r5, r3
 8007368:	6828      	ldr	r0, [r5, #0]
 800736a:	6869      	ldr	r1, [r5, #4]
 800736c:	68aa      	ldr	r2, [r5, #8]
 800736e:	68eb      	ldr	r3, [r5, #12]
 8007370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007372:	7c2b      	ldrb	r3, [r5, #16]
 8007374:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 8007376:	4a65      	ldr	r2, [pc, #404]	@ (800750c <loadMenuTexts+0x12c8>)
 8007378:	4b65      	ldr	r3, [pc, #404]	@ (8007510 <loadMenuTexts+0x12cc>)
 800737a:	4614      	mov	r4, r2
 800737c:	461d      	mov	r5, r3
 800737e:	6828      	ldr	r0, [r5, #0]
 8007380:	6869      	ldr	r1, [r5, #4]
 8007382:	68aa      	ldr	r2, [r5, #8]
 8007384:	68eb      	ldr	r3, [r5, #12]
 8007386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007388:	7c2b      	ldrb	r3, [r5, #16]
 800738a:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 800738c:	4a61      	ldr	r2, [pc, #388]	@ (8007514 <loadMenuTexts+0x12d0>)
 800738e:	4b62      	ldr	r3, [pc, #392]	@ (8007518 <loadMenuTexts+0x12d4>)
 8007390:	4614      	mov	r4, r2
 8007392:	461d      	mov	r5, r3
 8007394:	6828      	ldr	r0, [r5, #0]
 8007396:	6869      	ldr	r1, [r5, #4]
 8007398:	68aa      	ldr	r2, [r5, #8]
 800739a:	68eb      	ldr	r3, [r5, #12]
 800739c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800739e:	7c2b      	ldrb	r3, [r5, #16]
 80073a0:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 80073a2:	4a5e      	ldr	r2, [pc, #376]	@ (800751c <loadMenuTexts+0x12d8>)
 80073a4:	4b5e      	ldr	r3, [pc, #376]	@ (8007520 <loadMenuTexts+0x12dc>)
 80073a6:	4614      	mov	r4, r2
 80073a8:	461d      	mov	r5, r3
 80073aa:	6828      	ldr	r0, [r5, #0]
 80073ac:	6869      	ldr	r1, [r5, #4]
 80073ae:	68aa      	ldr	r2, [r5, #8]
 80073b0:	68eb      	ldr	r3, [r5, #12]
 80073b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073b4:	7c2b      	ldrb	r3, [r5, #16]
 80073b6:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 80073b8:	4a5a      	ldr	r2, [pc, #360]	@ (8007524 <loadMenuTexts+0x12e0>)
 80073ba:	4b5b      	ldr	r3, [pc, #364]	@ (8007528 <loadMenuTexts+0x12e4>)
 80073bc:	4614      	mov	r4, r2
 80073be:	461d      	mov	r5, r3
 80073c0:	6828      	ldr	r0, [r5, #0]
 80073c2:	6869      	ldr	r1, [r5, #4]
 80073c4:	68aa      	ldr	r2, [r5, #8]
 80073c6:	68eb      	ldr	r3, [r5, #12]
 80073c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073ca:	7c2b      	ldrb	r3, [r5, #16]
 80073cc:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 80073ce:	4a57      	ldr	r2, [pc, #348]	@ (800752c <loadMenuTexts+0x12e8>)
 80073d0:	4b57      	ldr	r3, [pc, #348]	@ (8007530 <loadMenuTexts+0x12ec>)
 80073d2:	4614      	mov	r4, r2
 80073d4:	461d      	mov	r5, r3
 80073d6:	6828      	ldr	r0, [r5, #0]
 80073d8:	6869      	ldr	r1, [r5, #4]
 80073da:	68aa      	ldr	r2, [r5, #8]
 80073dc:	68eb      	ldr	r3, [r5, #12]
 80073de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073e0:	7c2b      	ldrb	r3, [r5, #16]
 80073e2:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 80073e4:	4a53      	ldr	r2, [pc, #332]	@ (8007534 <loadMenuTexts+0x12f0>)
 80073e6:	4b54      	ldr	r3, [pc, #336]	@ (8007538 <loadMenuTexts+0x12f4>)
 80073e8:	4614      	mov	r4, r2
 80073ea:	461d      	mov	r5, r3
 80073ec:	6828      	ldr	r0, [r5, #0]
 80073ee:	6869      	ldr	r1, [r5, #4]
 80073f0:	68aa      	ldr	r2, [r5, #8]
 80073f2:	68eb      	ldr	r3, [r5, #12]
 80073f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073f6:	7c2b      	ldrb	r3, [r5, #16]
 80073f8:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 80073fa:	4a50      	ldr	r2, [pc, #320]	@ (800753c <loadMenuTexts+0x12f8>)
 80073fc:	4b50      	ldr	r3, [pc, #320]	@ (8007540 <loadMenuTexts+0x12fc>)
 80073fe:	4614      	mov	r4, r2
 8007400:	461d      	mov	r5, r3
 8007402:	6828      	ldr	r0, [r5, #0]
 8007404:	6869      	ldr	r1, [r5, #4]
 8007406:	68aa      	ldr	r2, [r5, #8]
 8007408:	68eb      	ldr	r3, [r5, #12]
 800740a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800740c:	7c2b      	ldrb	r3, [r5, #16]
 800740e:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 8007410:	4a4c      	ldr	r2, [pc, #304]	@ (8007544 <loadMenuTexts+0x1300>)
 8007412:	4b4d      	ldr	r3, [pc, #308]	@ (8007548 <loadMenuTexts+0x1304>)
 8007414:	4614      	mov	r4, r2
 8007416:	461d      	mov	r5, r3
 8007418:	6828      	ldr	r0, [r5, #0]
 800741a:	6869      	ldr	r1, [r5, #4]
 800741c:	68aa      	ldr	r2, [r5, #8]
 800741e:	68eb      	ldr	r3, [r5, #12]
 8007420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007422:	7c2b      	ldrb	r3, [r5, #16]
 8007424:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 8007426:	4a49      	ldr	r2, [pc, #292]	@ (800754c <loadMenuTexts+0x1308>)
 8007428:	4b49      	ldr	r3, [pc, #292]	@ (8007550 <loadMenuTexts+0x130c>)
 800742a:	4614      	mov	r4, r2
 800742c:	461d      	mov	r5, r3
 800742e:	e091      	b.n	8007554 <loadMenuTexts+0x1310>
 8007430:	200009d4 	.word	0x200009d4
 8007434:	20001504 	.word	0x20001504
 8007438:	200009e8 	.word	0x200009e8
 800743c:	20001518 	.word	0x20001518
 8007440:	200009fc 	.word	0x200009fc
 8007444:	2000152c 	.word	0x2000152c
 8007448:	20000a10 	.word	0x20000a10
 800744c:	20001540 	.word	0x20001540
 8007450:	20000a24 	.word	0x20000a24
 8007454:	20001554 	.word	0x20001554
 8007458:	20000a38 	.word	0x20000a38
 800745c:	20001568 	.word	0x20001568
 8007460:	20000a4c 	.word	0x20000a4c
 8007464:	2000157c 	.word	0x2000157c
 8007468:	20000a60 	.word	0x20000a60
 800746c:	20001590 	.word	0x20001590
 8007470:	20000a74 	.word	0x20000a74
 8007474:	200015a4 	.word	0x200015a4
 8007478:	20000a88 	.word	0x20000a88
 800747c:	200015b8 	.word	0x200015b8
 8007480:	20000a9c 	.word	0x20000a9c
 8007484:	200015cc 	.word	0x200015cc
 8007488:	20000ab0 	.word	0x20000ab0
 800748c:	200015e0 	.word	0x200015e0
 8007490:	20000ac4 	.word	0x20000ac4
 8007494:	200015f4 	.word	0x200015f4
 8007498:	20000ad8 	.word	0x20000ad8
 800749c:	20001608 	.word	0x20001608
 80074a0:	20000aec 	.word	0x20000aec
 80074a4:	2000161c 	.word	0x2000161c
 80074a8:	20000b00 	.word	0x20000b00
 80074ac:	20001630 	.word	0x20001630
 80074b0:	20000b14 	.word	0x20000b14
 80074b4:	20001644 	.word	0x20001644
 80074b8:	20000b28 	.word	0x20000b28
 80074bc:	20001658 	.word	0x20001658
 80074c0:	20000b3c 	.word	0x20000b3c
 80074c4:	2000166c 	.word	0x2000166c
 80074c8:	20000b50 	.word	0x20000b50
 80074cc:	20001680 	.word	0x20001680
 80074d0:	20000b64 	.word	0x20000b64
 80074d4:	20001694 	.word	0x20001694
 80074d8:	20000b78 	.word	0x20000b78
 80074dc:	200016a8 	.word	0x200016a8
 80074e0:	20000b8c 	.word	0x20000b8c
 80074e4:	200016bc 	.word	0x200016bc
 80074e8:	20000ba0 	.word	0x20000ba0
 80074ec:	200016d0 	.word	0x200016d0
 80074f0:	20000bb4 	.word	0x20000bb4
 80074f4:	200016e4 	.word	0x200016e4
 80074f8:	20000bc8 	.word	0x20000bc8
 80074fc:	200016f8 	.word	0x200016f8
 8007500:	20000bdc 	.word	0x20000bdc
 8007504:	2000170c 	.word	0x2000170c
 8007508:	20000bf0 	.word	0x20000bf0
 800750c:	20001720 	.word	0x20001720
 8007510:	20000c04 	.word	0x20000c04
 8007514:	20001734 	.word	0x20001734
 8007518:	20000c18 	.word	0x20000c18
 800751c:	20001748 	.word	0x20001748
 8007520:	20000c2c 	.word	0x20000c2c
 8007524:	2000175c 	.word	0x2000175c
 8007528:	20000c40 	.word	0x20000c40
 800752c:	20001770 	.word	0x20001770
 8007530:	20000c54 	.word	0x20000c54
 8007534:	20001784 	.word	0x20001784
 8007538:	20000c68 	.word	0x20000c68
 800753c:	20001798 	.word	0x20001798
 8007540:	20000cf4 	.word	0x20000cf4
 8007544:	200017ac 	.word	0x200017ac
 8007548:	20000d08 	.word	0x20000d08
 800754c:	200017c0 	.word	0x200017c0
 8007550:	20000ccc 	.word	0x20000ccc
 8007554:	6828      	ldr	r0, [r5, #0]
 8007556:	6869      	ldr	r1, [r5, #4]
 8007558:	68aa      	ldr	r2, [r5, #8]
 800755a:	68eb      	ldr	r3, [r5, #12]
 800755c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800755e:	7c2b      	ldrb	r3, [r5, #16]
 8007560:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 8007562:	4a5b      	ldr	r2, [pc, #364]	@ (80076d0 <loadMenuTexts+0x148c>)
 8007564:	4b5b      	ldr	r3, [pc, #364]	@ (80076d4 <loadMenuTexts+0x1490>)
 8007566:	4614      	mov	r4, r2
 8007568:	461d      	mov	r5, r3
 800756a:	6828      	ldr	r0, [r5, #0]
 800756c:	6869      	ldr	r1, [r5, #4]
 800756e:	68aa      	ldr	r2, [r5, #8]
 8007570:	68eb      	ldr	r3, [r5, #12]
 8007572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007574:	7c2b      	ldrb	r3, [r5, #16]
 8007576:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 8007578:	4a57      	ldr	r2, [pc, #348]	@ (80076d8 <loadMenuTexts+0x1494>)
 800757a:	4b58      	ldr	r3, [pc, #352]	@ (80076dc <loadMenuTexts+0x1498>)
 800757c:	4614      	mov	r4, r2
 800757e:	461d      	mov	r5, r3
 8007580:	6828      	ldr	r0, [r5, #0]
 8007582:	6869      	ldr	r1, [r5, #4]
 8007584:	68aa      	ldr	r2, [r5, #8]
 8007586:	68eb      	ldr	r3, [r5, #12]
 8007588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800758a:	7c2b      	ldrb	r3, [r5, #16]
 800758c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 800758e:	4a54      	ldr	r2, [pc, #336]	@ (80076e0 <loadMenuTexts+0x149c>)
 8007590:	4b54      	ldr	r3, [pc, #336]	@ (80076e4 <loadMenuTexts+0x14a0>)
 8007592:	4614      	mov	r4, r2
 8007594:	461d      	mov	r5, r3
 8007596:	6828      	ldr	r0, [r5, #0]
 8007598:	6869      	ldr	r1, [r5, #4]
 800759a:	68aa      	ldr	r2, [r5, #8]
 800759c:	68eb      	ldr	r3, [r5, #12]
 800759e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075a0:	7c2b      	ldrb	r3, [r5, #16]
 80075a2:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 80075a4:	4a50      	ldr	r2, [pc, #320]	@ (80076e8 <loadMenuTexts+0x14a4>)
 80075a6:	4b51      	ldr	r3, [pc, #324]	@ (80076ec <loadMenuTexts+0x14a8>)
 80075a8:	4614      	mov	r4, r2
 80075aa:	461d      	mov	r5, r3
 80075ac:	6828      	ldr	r0, [r5, #0]
 80075ae:	6869      	ldr	r1, [r5, #4]
 80075b0:	68aa      	ldr	r2, [r5, #8]
 80075b2:	68eb      	ldr	r3, [r5, #12]
 80075b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075b6:	7c2b      	ldrb	r3, [r5, #16]
 80075b8:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 80075ba:	4a4d      	ldr	r2, [pc, #308]	@ (80076f0 <loadMenuTexts+0x14ac>)
 80075bc:	4b4d      	ldr	r3, [pc, #308]	@ (80076f4 <loadMenuTexts+0x14b0>)
 80075be:	4614      	mov	r4, r2
 80075c0:	461d      	mov	r5, r3
 80075c2:	6828      	ldr	r0, [r5, #0]
 80075c4:	6869      	ldr	r1, [r5, #4]
 80075c6:	68aa      	ldr	r2, [r5, #8]
 80075c8:	68eb      	ldr	r3, [r5, #12]
 80075ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075cc:	7c2b      	ldrb	r3, [r5, #16]
 80075ce:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 80075d0:	4a49      	ldr	r2, [pc, #292]	@ (80076f8 <loadMenuTexts+0x14b4>)
 80075d2:	4b4a      	ldr	r3, [pc, #296]	@ (80076fc <loadMenuTexts+0x14b8>)
 80075d4:	4614      	mov	r4, r2
 80075d6:	461d      	mov	r5, r3
 80075d8:	6828      	ldr	r0, [r5, #0]
 80075da:	6869      	ldr	r1, [r5, #4]
 80075dc:	68aa      	ldr	r2, [r5, #8]
 80075de:	68eb      	ldr	r3, [r5, #12]
 80075e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075e2:	7c2b      	ldrb	r3, [r5, #16]
 80075e4:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 80075e6:	4a46      	ldr	r2, [pc, #280]	@ (8007700 <loadMenuTexts+0x14bc>)
 80075e8:	4b46      	ldr	r3, [pc, #280]	@ (8007704 <loadMenuTexts+0x14c0>)
 80075ea:	4614      	mov	r4, r2
 80075ec:	461d      	mov	r5, r3
 80075ee:	6828      	ldr	r0, [r5, #0]
 80075f0:	6869      	ldr	r1, [r5, #4]
 80075f2:	68aa      	ldr	r2, [r5, #8]
 80075f4:	68eb      	ldr	r3, [r5, #12]
 80075f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075f8:	7c2b      	ldrb	r3, [r5, #16]
 80075fa:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 80075fc:	4a42      	ldr	r2, [pc, #264]	@ (8007708 <loadMenuTexts+0x14c4>)
 80075fe:	4b43      	ldr	r3, [pc, #268]	@ (800770c <loadMenuTexts+0x14c8>)
 8007600:	4614      	mov	r4, r2
 8007602:	461d      	mov	r5, r3
 8007604:	6828      	ldr	r0, [r5, #0]
 8007606:	6869      	ldr	r1, [r5, #4]
 8007608:	68aa      	ldr	r2, [r5, #8]
 800760a:	68eb      	ldr	r3, [r5, #12]
 800760c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800760e:	7c2b      	ldrb	r3, [r5, #16]
 8007610:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 8007612:	4a3f      	ldr	r2, [pc, #252]	@ (8007710 <loadMenuTexts+0x14cc>)
 8007614:	4b3f      	ldr	r3, [pc, #252]	@ (8007714 <loadMenuTexts+0x14d0>)
 8007616:	4614      	mov	r4, r2
 8007618:	461d      	mov	r5, r3
 800761a:	6828      	ldr	r0, [r5, #0]
 800761c:	6869      	ldr	r1, [r5, #4]
 800761e:	68aa      	ldr	r2, [r5, #8]
 8007620:	68eb      	ldr	r3, [r5, #12]
 8007622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007624:	7c2b      	ldrb	r3, [r5, #16]
 8007626:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 8007628:	4a3b      	ldr	r2, [pc, #236]	@ (8007718 <loadMenuTexts+0x14d4>)
 800762a:	4b3c      	ldr	r3, [pc, #240]	@ (800771c <loadMenuTexts+0x14d8>)
 800762c:	4614      	mov	r4, r2
 800762e:	461d      	mov	r5, r3
 8007630:	6828      	ldr	r0, [r5, #0]
 8007632:	6869      	ldr	r1, [r5, #4]
 8007634:	68aa      	ldr	r2, [r5, #8]
 8007636:	68eb      	ldr	r3, [r5, #12]
 8007638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800763a:	7c2b      	ldrb	r3, [r5, #16]
 800763c:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 800763e:	4a38      	ldr	r2, [pc, #224]	@ (8007720 <loadMenuTexts+0x14dc>)
 8007640:	4b38      	ldr	r3, [pc, #224]	@ (8007724 <loadMenuTexts+0x14e0>)
 8007642:	4614      	mov	r4, r2
 8007644:	461d      	mov	r5, r3
 8007646:	6828      	ldr	r0, [r5, #0]
 8007648:	6869      	ldr	r1, [r5, #4]
 800764a:	68aa      	ldr	r2, [r5, #8]
 800764c:	68eb      	ldr	r3, [r5, #12]
 800764e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007650:	7c2b      	ldrb	r3, [r5, #16]
 8007652:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 8007654:	4a34      	ldr	r2, [pc, #208]	@ (8007728 <loadMenuTexts+0x14e4>)
 8007656:	4b35      	ldr	r3, [pc, #212]	@ (800772c <loadMenuTexts+0x14e8>)
 8007658:	4614      	mov	r4, r2
 800765a:	461d      	mov	r5, r3
 800765c:	6828      	ldr	r0, [r5, #0]
 800765e:	6869      	ldr	r1, [r5, #4]
 8007660:	68aa      	ldr	r2, [r5, #8]
 8007662:	68eb      	ldr	r3, [r5, #12]
 8007664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007666:	7c2b      	ldrb	r3, [r5, #16]
 8007668:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 800766a:	4a31      	ldr	r2, [pc, #196]	@ (8007730 <loadMenuTexts+0x14ec>)
 800766c:	4b31      	ldr	r3, [pc, #196]	@ (8007734 <loadMenuTexts+0x14f0>)
 800766e:	4614      	mov	r4, r2
 8007670:	461d      	mov	r5, r3
 8007672:	6828      	ldr	r0, [r5, #0]
 8007674:	6869      	ldr	r1, [r5, #4]
 8007676:	68aa      	ldr	r2, [r5, #8]
 8007678:	68eb      	ldr	r3, [r5, #12]
 800767a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800767c:	7c2b      	ldrb	r3, [r5, #16]
 800767e:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 8007680:	4a2d      	ldr	r2, [pc, #180]	@ (8007738 <loadMenuTexts+0x14f4>)
 8007682:	4b2e      	ldr	r3, [pc, #184]	@ (800773c <loadMenuTexts+0x14f8>)
 8007684:	4614      	mov	r4, r2
 8007686:	461d      	mov	r5, r3
 8007688:	6828      	ldr	r0, [r5, #0]
 800768a:	6869      	ldr	r1, [r5, #4]
 800768c:	68aa      	ldr	r2, [r5, #8]
 800768e:	68eb      	ldr	r3, [r5, #12]
 8007690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007692:	7c2b      	ldrb	r3, [r5, #16]
 8007694:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 8007696:	4a2a      	ldr	r2, [pc, #168]	@ (8007740 <loadMenuTexts+0x14fc>)
 8007698:	4b2a      	ldr	r3, [pc, #168]	@ (8007744 <loadMenuTexts+0x1500>)
 800769a:	4614      	mov	r4, r2
 800769c:	461d      	mov	r5, r3
 800769e:	6828      	ldr	r0, [r5, #0]
 80076a0:	6869      	ldr	r1, [r5, #4]
 80076a2:	68aa      	ldr	r2, [r5, #8]
 80076a4:	68eb      	ldr	r3, [r5, #12]
 80076a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076a8:	7c2b      	ldrb	r3, [r5, #16]
 80076aa:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 80076ac:	4a26      	ldr	r2, [pc, #152]	@ (8007748 <loadMenuTexts+0x1504>)
 80076ae:	4b27      	ldr	r3, [pc, #156]	@ (800774c <loadMenuTexts+0x1508>)
 80076b0:	4614      	mov	r4, r2
 80076b2:	461d      	mov	r5, r3
 80076b4:	6828      	ldr	r0, [r5, #0]
 80076b6:	6869      	ldr	r1, [r5, #4]
 80076b8:	68aa      	ldr	r2, [r5, #8]
 80076ba:	68eb      	ldr	r3, [r5, #12]
 80076bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076be:	7c2b      	ldrb	r3, [r5, #16]
 80076c0:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 80076c2:	f000 f845 	bl	8007750 <menuVariableFinisher>
}
 80076c6:	bf00      	nop
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bdb0      	pop	{r4, r5, r7, pc}
 80076ce:	bf00      	nop
 80076d0:	200017d4 	.word	0x200017d4
 80076d4:	20000ce0 	.word	0x20000ce0
 80076d8:	200017e8 	.word	0x200017e8
 80076dc:	20000d44 	.word	0x20000d44
 80076e0:	200017fc 	.word	0x200017fc
 80076e4:	20000d58 	.word	0x20000d58
 80076e8:	20001810 	.word	0x20001810
 80076ec:	20000d94 	.word	0x20000d94
 80076f0:	20001824 	.word	0x20001824
 80076f4:	20000da8 	.word	0x20000da8
 80076f8:	20001838 	.word	0x20001838
 80076fc:	20000de4 	.word	0x20000de4
 8007700:	2000184c 	.word	0x2000184c
 8007704:	20000df8 	.word	0x20000df8
 8007708:	20001860 	.word	0x20001860
 800770c:	20000e20 	.word	0x20000e20
 8007710:	20001874 	.word	0x20001874
 8007714:	20000e48 	.word	0x20000e48
 8007718:	20001888 	.word	0x20001888
 800771c:	20000e70 	.word	0x20000e70
 8007720:	2000189c 	.word	0x2000189c
 8007724:	20000e98 	.word	0x20000e98
 8007728:	200018b0 	.word	0x200018b0
 800772c:	20000ec0 	.word	0x20000ec0
 8007730:	200018c4 	.word	0x200018c4
 8007734:	20000ee8 	.word	0x20000ee8
 8007738:	200018d8 	.word	0x200018d8
 800773c:	20000f10 	.word	0x20000f10
 8007740:	200018ec 	.word	0x200018ec
 8007744:	20000f38 	.word	0x20000f38
 8007748:	20001900 	.word	0x20001900
 800774c:	20000f60 	.word	0x20000f60

08007750 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 8007750:	b480      	push	{r7}
 8007752:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 8007754:	4b99      	ldr	r3, [pc, #612]	@ (80079bc <menuVariableFinisher+0x26c>)
 8007756:	2200      	movs	r2, #0
 8007758:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 800775a:	4b99      	ldr	r3, [pc, #612]	@ (80079c0 <menuVariableFinisher+0x270>)
 800775c:	2200      	movs	r2, #0
 800775e:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 8007760:	4b98      	ldr	r3, [pc, #608]	@ (80079c4 <menuVariableFinisher+0x274>)
 8007762:	2200      	movs	r2, #0
 8007764:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 8007766:	4b98      	ldr	r3, [pc, #608]	@ (80079c8 <menuVariableFinisher+0x278>)
 8007768:	2200      	movs	r2, #0
 800776a:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 800776c:	4b97      	ldr	r3, [pc, #604]	@ (80079cc <menuVariableFinisher+0x27c>)
 800776e:	2200      	movs	r2, #0
 8007770:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 8007772:	4b97      	ldr	r3, [pc, #604]	@ (80079d0 <menuVariableFinisher+0x280>)
 8007774:	2200      	movs	r2, #0
 8007776:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 8007778:	4b96      	ldr	r3, [pc, #600]	@ (80079d4 <menuVariableFinisher+0x284>)
 800777a:	2200      	movs	r2, #0
 800777c:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 800777e:	4b96      	ldr	r3, [pc, #600]	@ (80079d8 <menuVariableFinisher+0x288>)
 8007780:	2200      	movs	r2, #0
 8007782:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 8007784:	4b95      	ldr	r3, [pc, #596]	@ (80079dc <menuVariableFinisher+0x28c>)
 8007786:	2200      	movs	r2, #0
 8007788:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 800778a:	4b95      	ldr	r3, [pc, #596]	@ (80079e0 <menuVariableFinisher+0x290>)
 800778c:	2200      	movs	r2, #0
 800778e:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 8007790:	4b94      	ldr	r3, [pc, #592]	@ (80079e4 <menuVariableFinisher+0x294>)
 8007792:	2200      	movs	r2, #0
 8007794:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 8007796:	4b94      	ldr	r3, [pc, #592]	@ (80079e8 <menuVariableFinisher+0x298>)
 8007798:	2200      	movs	r2, #0
 800779a:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 800779c:	4b93      	ldr	r3, [pc, #588]	@ (80079ec <menuVariableFinisher+0x29c>)
 800779e:	2200      	movs	r2, #0
 80077a0:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 80077a2:	4b93      	ldr	r3, [pc, #588]	@ (80079f0 <menuVariableFinisher+0x2a0>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 80077a8:	4b92      	ldr	r3, [pc, #584]	@ (80079f4 <menuVariableFinisher+0x2a4>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 80077ae:	4b92      	ldr	r3, [pc, #584]	@ (80079f8 <menuVariableFinisher+0x2a8>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 80077b4:	4b91      	ldr	r3, [pc, #580]	@ (80079fc <menuVariableFinisher+0x2ac>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 80077ba:	4b91      	ldr	r3, [pc, #580]	@ (8007a00 <menuVariableFinisher+0x2b0>)
 80077bc:	2200      	movs	r2, #0
 80077be:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 80077c0:	4b90      	ldr	r3, [pc, #576]	@ (8007a04 <menuVariableFinisher+0x2b4>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 80077c6:	4b90      	ldr	r3, [pc, #576]	@ (8007a08 <menuVariableFinisher+0x2b8>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 80077cc:	4b8f      	ldr	r3, [pc, #572]	@ (8007a0c <menuVariableFinisher+0x2bc>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 80077d2:	4b8f      	ldr	r3, [pc, #572]	@ (8007a10 <menuVariableFinisher+0x2c0>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 80077d8:	4b8e      	ldr	r3, [pc, #568]	@ (8007a14 <menuVariableFinisher+0x2c4>)
 80077da:	2200      	movs	r2, #0
 80077dc:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 80077de:	4b8e      	ldr	r3, [pc, #568]	@ (8007a18 <menuVariableFinisher+0x2c8>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 80077e4:	4b8d      	ldr	r3, [pc, #564]	@ (8007a1c <menuVariableFinisher+0x2cc>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 80077ea:	4b8d      	ldr	r3, [pc, #564]	@ (8007a20 <menuVariableFinisher+0x2d0>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 80077f0:	4b8c      	ldr	r3, [pc, #560]	@ (8007a24 <menuVariableFinisher+0x2d4>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 80077f6:	4b8c      	ldr	r3, [pc, #560]	@ (8007a28 <menuVariableFinisher+0x2d8>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 80077fc:	4b8b      	ldr	r3, [pc, #556]	@ (8007a2c <menuVariableFinisher+0x2dc>)
 80077fe:	2200      	movs	r2, #0
 8007800:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 8007802:	4b8b      	ldr	r3, [pc, #556]	@ (8007a30 <menuVariableFinisher+0x2e0>)
 8007804:	2200      	movs	r2, #0
 8007806:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 8007808:	4b8a      	ldr	r3, [pc, #552]	@ (8007a34 <menuVariableFinisher+0x2e4>)
 800780a:	2200      	movs	r2, #0
 800780c:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 800780e:	4b8a      	ldr	r3, [pc, #552]	@ (8007a38 <menuVariableFinisher+0x2e8>)
 8007810:	2200      	movs	r2, #0
 8007812:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 8007814:	4b89      	ldr	r3, [pc, #548]	@ (8007a3c <menuVariableFinisher+0x2ec>)
 8007816:	2200      	movs	r2, #0
 8007818:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 800781a:	4b89      	ldr	r3, [pc, #548]	@ (8007a40 <menuVariableFinisher+0x2f0>)
 800781c:	2200      	movs	r2, #0
 800781e:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 8007820:	4b88      	ldr	r3, [pc, #544]	@ (8007a44 <menuVariableFinisher+0x2f4>)
 8007822:	2200      	movs	r2, #0
 8007824:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 8007826:	4b88      	ldr	r3, [pc, #544]	@ (8007a48 <menuVariableFinisher+0x2f8>)
 8007828:	2200      	movs	r2, #0
 800782a:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 800782c:	4b87      	ldr	r3, [pc, #540]	@ (8007a4c <menuVariableFinisher+0x2fc>)
 800782e:	2200      	movs	r2, #0
 8007830:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 8007832:	4b87      	ldr	r3, [pc, #540]	@ (8007a50 <menuVariableFinisher+0x300>)
 8007834:	2200      	movs	r2, #0
 8007836:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 8007838:	4b86      	ldr	r3, [pc, #536]	@ (8007a54 <menuVariableFinisher+0x304>)
 800783a:	2200      	movs	r2, #0
 800783c:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 800783e:	4b86      	ldr	r3, [pc, #536]	@ (8007a58 <menuVariableFinisher+0x308>)
 8007840:	2200      	movs	r2, #0
 8007842:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 8007844:	4b85      	ldr	r3, [pc, #532]	@ (8007a5c <menuVariableFinisher+0x30c>)
 8007846:	2200      	movs	r2, #0
 8007848:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 800784a:	4b85      	ldr	r3, [pc, #532]	@ (8007a60 <menuVariableFinisher+0x310>)
 800784c:	2200      	movs	r2, #0
 800784e:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 8007850:	4b84      	ldr	r3, [pc, #528]	@ (8007a64 <menuVariableFinisher+0x314>)
 8007852:	2200      	movs	r2, #0
 8007854:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 8007856:	4b84      	ldr	r3, [pc, #528]	@ (8007a68 <menuVariableFinisher+0x318>)
 8007858:	2200      	movs	r2, #0
 800785a:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 800785c:	4b83      	ldr	r3, [pc, #524]	@ (8007a6c <menuVariableFinisher+0x31c>)
 800785e:	2200      	movs	r2, #0
 8007860:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 8007862:	4b83      	ldr	r3, [pc, #524]	@ (8007a70 <menuVariableFinisher+0x320>)
 8007864:	2200      	movs	r2, #0
 8007866:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 8007868:	4b82      	ldr	r3, [pc, #520]	@ (8007a74 <menuVariableFinisher+0x324>)
 800786a:	2200      	movs	r2, #0
 800786c:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 800786e:	4b82      	ldr	r3, [pc, #520]	@ (8007a78 <menuVariableFinisher+0x328>)
 8007870:	2200      	movs	r2, #0
 8007872:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 8007874:	4b81      	ldr	r3, [pc, #516]	@ (8007a7c <menuVariableFinisher+0x32c>)
 8007876:	2200      	movs	r2, #0
 8007878:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 800787a:	4b81      	ldr	r3, [pc, #516]	@ (8007a80 <menuVariableFinisher+0x330>)
 800787c:	2200      	movs	r2, #0
 800787e:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8007880:	4b80      	ldr	r3, [pc, #512]	@ (8007a84 <menuVariableFinisher+0x334>)
 8007882:	2200      	movs	r2, #0
 8007884:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 8007886:	4b80      	ldr	r3, [pc, #512]	@ (8007a88 <menuVariableFinisher+0x338>)
 8007888:	2200      	movs	r2, #0
 800788a:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 800788c:	4b7f      	ldr	r3, [pc, #508]	@ (8007a8c <menuVariableFinisher+0x33c>)
 800788e:	2200      	movs	r2, #0
 8007890:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 8007892:	4b7f      	ldr	r3, [pc, #508]	@ (8007a90 <menuVariableFinisher+0x340>)
 8007894:	2200      	movs	r2, #0
 8007896:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 8007898:	4b7e      	ldr	r3, [pc, #504]	@ (8007a94 <menuVariableFinisher+0x344>)
 800789a:	2200      	movs	r2, #0
 800789c:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 800789e:	4b7e      	ldr	r3, [pc, #504]	@ (8007a98 <menuVariableFinisher+0x348>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 80078a4:	4b7d      	ldr	r3, [pc, #500]	@ (8007a9c <menuVariableFinisher+0x34c>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 80078aa:	4b7d      	ldr	r3, [pc, #500]	@ (8007aa0 <menuVariableFinisher+0x350>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 80078b0:	4b7c      	ldr	r3, [pc, #496]	@ (8007aa4 <menuVariableFinisher+0x354>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 80078b6:	4b7c      	ldr	r3, [pc, #496]	@ (8007aa8 <menuVariableFinisher+0x358>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 80078bc:	4b7b      	ldr	r3, [pc, #492]	@ (8007aac <menuVariableFinisher+0x35c>)
 80078be:	2200      	movs	r2, #0
 80078c0:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 80078c2:	4b7b      	ldr	r3, [pc, #492]	@ (8007ab0 <menuVariableFinisher+0x360>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 80078c8:	4b7a      	ldr	r3, [pc, #488]	@ (8007ab4 <menuVariableFinisher+0x364>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 80078ce:	4b7a      	ldr	r3, [pc, #488]	@ (8007ab8 <menuVariableFinisher+0x368>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 80078d4:	4b79      	ldr	r3, [pc, #484]	@ (8007abc <menuVariableFinisher+0x36c>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 80078da:	4b79      	ldr	r3, [pc, #484]	@ (8007ac0 <menuVariableFinisher+0x370>)
 80078dc:	2200      	movs	r2, #0
 80078de:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 80078e0:	4b78      	ldr	r3, [pc, #480]	@ (8007ac4 <menuVariableFinisher+0x374>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 80078e6:	4b78      	ldr	r3, [pc, #480]	@ (8007ac8 <menuVariableFinisher+0x378>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 80078ec:	4b77      	ldr	r3, [pc, #476]	@ (8007acc <menuVariableFinisher+0x37c>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 80078f2:	4b77      	ldr	r3, [pc, #476]	@ (8007ad0 <menuVariableFinisher+0x380>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 80078f8:	4b76      	ldr	r3, [pc, #472]	@ (8007ad4 <menuVariableFinisher+0x384>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 80078fe:	4b76      	ldr	r3, [pc, #472]	@ (8007ad8 <menuVariableFinisher+0x388>)
 8007900:	2200      	movs	r2, #0
 8007902:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 8007904:	4b75      	ldr	r3, [pc, #468]	@ (8007adc <menuVariableFinisher+0x38c>)
 8007906:	2200      	movs	r2, #0
 8007908:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 800790a:	4b75      	ldr	r3, [pc, #468]	@ (8007ae0 <menuVariableFinisher+0x390>)
 800790c:	2200      	movs	r2, #0
 800790e:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 8007910:	4b74      	ldr	r3, [pc, #464]	@ (8007ae4 <menuVariableFinisher+0x394>)
 8007912:	2200      	movs	r2, #0
 8007914:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 8007916:	4b74      	ldr	r3, [pc, #464]	@ (8007ae8 <menuVariableFinisher+0x398>)
 8007918:	2200      	movs	r2, #0
 800791a:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 800791c:	4b73      	ldr	r3, [pc, #460]	@ (8007aec <menuVariableFinisher+0x39c>)
 800791e:	2200      	movs	r2, #0
 8007920:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 8007922:	4b73      	ldr	r3, [pc, #460]	@ (8007af0 <menuVariableFinisher+0x3a0>)
 8007924:	2200      	movs	r2, #0
 8007926:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 8007928:	4b72      	ldr	r3, [pc, #456]	@ (8007af4 <menuVariableFinisher+0x3a4>)
 800792a:	2200      	movs	r2, #0
 800792c:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 800792e:	4b72      	ldr	r3, [pc, #456]	@ (8007af8 <menuVariableFinisher+0x3a8>)
 8007930:	2200      	movs	r2, #0
 8007932:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 8007934:	4b71      	ldr	r3, [pc, #452]	@ (8007afc <menuVariableFinisher+0x3ac>)
 8007936:	2200      	movs	r2, #0
 8007938:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 800793a:	4b71      	ldr	r3, [pc, #452]	@ (8007b00 <menuVariableFinisher+0x3b0>)
 800793c:	2200      	movs	r2, #0
 800793e:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 8007940:	4b70      	ldr	r3, [pc, #448]	@ (8007b04 <menuVariableFinisher+0x3b4>)
 8007942:	2200      	movs	r2, #0
 8007944:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 8007946:	4b70      	ldr	r3, [pc, #448]	@ (8007b08 <menuVariableFinisher+0x3b8>)
 8007948:	2200      	movs	r2, #0
 800794a:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 800794c:	4b6f      	ldr	r3, [pc, #444]	@ (8007b0c <menuVariableFinisher+0x3bc>)
 800794e:	2200      	movs	r2, #0
 8007950:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 8007952:	4b6f      	ldr	r3, [pc, #444]	@ (8007b10 <menuVariableFinisher+0x3c0>)
 8007954:	2200      	movs	r2, #0
 8007956:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 8007958:	4b6e      	ldr	r3, [pc, #440]	@ (8007b14 <menuVariableFinisher+0x3c4>)
 800795a:	2200      	movs	r2, #0
 800795c:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 800795e:	4b6e      	ldr	r3, [pc, #440]	@ (8007b18 <menuVariableFinisher+0x3c8>)
 8007960:	2200      	movs	r2, #0
 8007962:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 8007964:	4b6d      	ldr	r3, [pc, #436]	@ (8007b1c <menuVariableFinisher+0x3cc>)
 8007966:	2200      	movs	r2, #0
 8007968:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 800796a:	4b6d      	ldr	r3, [pc, #436]	@ (8007b20 <menuVariableFinisher+0x3d0>)
 800796c:	2200      	movs	r2, #0
 800796e:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 8007970:	4b6c      	ldr	r3, [pc, #432]	@ (8007b24 <menuVariableFinisher+0x3d4>)
 8007972:	2200      	movs	r2, #0
 8007974:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 8007976:	4b6c      	ldr	r3, [pc, #432]	@ (8007b28 <menuVariableFinisher+0x3d8>)
 8007978:	2200      	movs	r2, #0
 800797a:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 800797c:	4b6b      	ldr	r3, [pc, #428]	@ (8007b2c <menuVariableFinisher+0x3dc>)
 800797e:	2200      	movs	r2, #0
 8007980:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 8007982:	4b6b      	ldr	r3, [pc, #428]	@ (8007b30 <menuVariableFinisher+0x3e0>)
 8007984:	2200      	movs	r2, #0
 8007986:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 8007988:	4b6a      	ldr	r3, [pc, #424]	@ (8007b34 <menuVariableFinisher+0x3e4>)
 800798a:	2200      	movs	r2, #0
 800798c:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 800798e:	4b6a      	ldr	r3, [pc, #424]	@ (8007b38 <menuVariableFinisher+0x3e8>)
 8007990:	2200      	movs	r2, #0
 8007992:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 8007994:	4b69      	ldr	r3, [pc, #420]	@ (8007b3c <menuVariableFinisher+0x3ec>)
 8007996:	2200      	movs	r2, #0
 8007998:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 800799a:	4b69      	ldr	r3, [pc, #420]	@ (8007b40 <menuVariableFinisher+0x3f0>)
 800799c:	2200      	movs	r2, #0
 800799e:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 80079a0:	4b68      	ldr	r3, [pc, #416]	@ (8007b44 <menuVariableFinisher+0x3f4>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 80079a6:	4b68      	ldr	r3, [pc, #416]	@ (8007b48 <menuVariableFinisher+0x3f8>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 80079ac:	4b67      	ldr	r3, [pc, #412]	@ (8007b4c <menuVariableFinisher+0x3fc>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	741a      	strb	r2, [r3, #16]
}
 80079b2:	bf00      	nop
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bc80      	pop	{r7}
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	2000009c 	.word	0x2000009c
 80079c0:	200000b0 	.word	0x200000b0
 80079c4:	200000c4 	.word	0x200000c4
 80079c8:	200000d8 	.word	0x200000d8
 80079cc:	200000ec 	.word	0x200000ec
 80079d0:	20000100 	.word	0x20000100
 80079d4:	20000114 	.word	0x20000114
 80079d8:	20000128 	.word	0x20000128
 80079dc:	2000013c 	.word	0x2000013c
 80079e0:	20000150 	.word	0x20000150
 80079e4:	20000164 	.word	0x20000164
 80079e8:	20000178 	.word	0x20000178
 80079ec:	20001220 	.word	0x20001220
 80079f0:	20001234 	.word	0x20001234
 80079f4:	20001248 	.word	0x20001248
 80079f8:	2000125c 	.word	0x2000125c
 80079fc:	20001270 	.word	0x20001270
 8007a00:	20001284 	.word	0x20001284
 8007a04:	20001298 	.word	0x20001298
 8007a08:	200012ac 	.word	0x200012ac
 8007a0c:	200012c0 	.word	0x200012c0
 8007a10:	200012d4 	.word	0x200012d4
 8007a14:	200012e8 	.word	0x200012e8
 8007a18:	200012fc 	.word	0x200012fc
 8007a1c:	20001310 	.word	0x20001310
 8007a20:	20001324 	.word	0x20001324
 8007a24:	20001338 	.word	0x20001338
 8007a28:	2000134c 	.word	0x2000134c
 8007a2c:	20001360 	.word	0x20001360
 8007a30:	20001374 	.word	0x20001374
 8007a34:	20001388 	.word	0x20001388
 8007a38:	2000139c 	.word	0x2000139c
 8007a3c:	200013b0 	.word	0x200013b0
 8007a40:	200013c4 	.word	0x200013c4
 8007a44:	200013d8 	.word	0x200013d8
 8007a48:	200013ec 	.word	0x200013ec
 8007a4c:	20001400 	.word	0x20001400
 8007a50:	20001414 	.word	0x20001414
 8007a54:	20001428 	.word	0x20001428
 8007a58:	2000143c 	.word	0x2000143c
 8007a5c:	20001450 	.word	0x20001450
 8007a60:	20001464 	.word	0x20001464
 8007a64:	20001478 	.word	0x20001478
 8007a68:	2000148c 	.word	0x2000148c
 8007a6c:	200014a0 	.word	0x200014a0
 8007a70:	200014b4 	.word	0x200014b4
 8007a74:	200014c8 	.word	0x200014c8
 8007a78:	200014dc 	.word	0x200014dc
 8007a7c:	200014f0 	.word	0x200014f0
 8007a80:	20001504 	.word	0x20001504
 8007a84:	20001518 	.word	0x20001518
 8007a88:	2000152c 	.word	0x2000152c
 8007a8c:	20001540 	.word	0x20001540
 8007a90:	20001554 	.word	0x20001554
 8007a94:	20001568 	.word	0x20001568
 8007a98:	2000157c 	.word	0x2000157c
 8007a9c:	20001590 	.word	0x20001590
 8007aa0:	200015a4 	.word	0x200015a4
 8007aa4:	200015b8 	.word	0x200015b8
 8007aa8:	200015cc 	.word	0x200015cc
 8007aac:	200015e0 	.word	0x200015e0
 8007ab0:	200015f4 	.word	0x200015f4
 8007ab4:	20001608 	.word	0x20001608
 8007ab8:	2000161c 	.word	0x2000161c
 8007abc:	20001630 	.word	0x20001630
 8007ac0:	20001644 	.word	0x20001644
 8007ac4:	20001658 	.word	0x20001658
 8007ac8:	2000166c 	.word	0x2000166c
 8007acc:	20001680 	.word	0x20001680
 8007ad0:	20001694 	.word	0x20001694
 8007ad4:	200016a8 	.word	0x200016a8
 8007ad8:	200016bc 	.word	0x200016bc
 8007adc:	200016d0 	.word	0x200016d0
 8007ae0:	200016e4 	.word	0x200016e4
 8007ae4:	200016f8 	.word	0x200016f8
 8007ae8:	2000170c 	.word	0x2000170c
 8007aec:	20001720 	.word	0x20001720
 8007af0:	20001734 	.word	0x20001734
 8007af4:	20001748 	.word	0x20001748
 8007af8:	2000175c 	.word	0x2000175c
 8007afc:	20001770 	.word	0x20001770
 8007b00:	20001784 	.word	0x20001784
 8007b04:	20001798 	.word	0x20001798
 8007b08:	200017ac 	.word	0x200017ac
 8007b0c:	200017c0 	.word	0x200017c0
 8007b10:	200017d4 	.word	0x200017d4
 8007b14:	200017e8 	.word	0x200017e8
 8007b18:	200017fc 	.word	0x200017fc
 8007b1c:	20001810 	.word	0x20001810
 8007b20:	20001824 	.word	0x20001824
 8007b24:	20001838 	.word	0x20001838
 8007b28:	2000184c 	.word	0x2000184c
 8007b2c:	20001860 	.word	0x20001860
 8007b30:	20001874 	.word	0x20001874
 8007b34:	20001888 	.word	0x20001888
 8007b38:	2000189c 	.word	0x2000189c
 8007b3c:	200018b0 	.word	0x200018b0
 8007b40:	200018c4 	.word	0x200018c4
 8007b44:	200018d8 	.word	0x200018d8
 8007b48:	200018ec 	.word	0x200018ec
 8007b4c:	20001900 	.word	0x20001900

08007b50 <resetMenuTexts>:

void resetMenuTexts() {
 8007b50:	b580      	push	{r7, lr}
 8007b52:	af00      	add	r7, sp, #0
    memset(menuyeGirildiText, 0, 17);
 8007b54:	2211      	movs	r2, #17
 8007b56:	2100      	movs	r1, #0
 8007b58:	48d3      	ldr	r0, [pc, #844]	@ (8007ea8 <resetMenuTexts+0x358>)
 8007b5a:	f006 fa9b 	bl	800e094 <memset>
    memset(ayarlarText, 0, 17);
 8007b5e:	2211      	movs	r2, #17
 8007b60:	2100      	movs	r1, #0
 8007b62:	48d2      	ldr	r0, [pc, #840]	@ (8007eac <resetMenuTexts+0x35c>)
 8007b64:	f006 fa96 	bl	800e094 <memset>
    memset(hataKayitListText, 0, 17);
 8007b68:	2211      	movs	r2, #17
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	48d0      	ldr	r0, [pc, #832]	@ (8007eb0 <resetMenuTexts+0x360>)
 8007b6e:	f006 fa91 	bl	800e094 <memset>
    memset(birHataKoduText, 0, 17);
 8007b72:	2211      	movs	r2, #17
 8007b74:	2100      	movs	r1, #0
 8007b76:	48cf      	ldr	r0, [pc, #828]	@ (8007eb4 <resetMenuTexts+0x364>)
 8007b78:	f006 fa8c 	bl	800e094 <memset>
    memset(ikiHataKoduText, 0, 17);
 8007b7c:	2211      	movs	r2, #17
 8007b7e:	2100      	movs	r1, #0
 8007b80:	48cd      	ldr	r0, [pc, #820]	@ (8007eb8 <resetMenuTexts+0x368>)
 8007b82:	f006 fa87 	bl	800e094 <memset>
    memset(ucHataKoduText, 0, 17);
 8007b86:	2211      	movs	r2, #17
 8007b88:	2100      	movs	r1, #0
 8007b8a:	48cc      	ldr	r0, [pc, #816]	@ (8007ebc <resetMenuTexts+0x36c>)
 8007b8c:	f006 fa82 	bl	800e094 <memset>
    memset(dortHataKoduText, 0, 17);
 8007b90:	2211      	movs	r2, #17
 8007b92:	2100      	movs	r1, #0
 8007b94:	48ca      	ldr	r0, [pc, #808]	@ (8007ec0 <resetMenuTexts+0x370>)
 8007b96:	f006 fa7d 	bl	800e094 <memset>
    memset(besHataKoduText, 0, 17);
 8007b9a:	2211      	movs	r2, #17
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	48c9      	ldr	r0, [pc, #804]	@ (8007ec4 <resetMenuTexts+0x374>)
 8007ba0:	f006 fa78 	bl	800e094 <memset>
    memset(altiHataKoduText, 0, 17);
 8007ba4:	2211      	movs	r2, #17
 8007ba6:	2100      	movs	r1, #0
 8007ba8:	48c7      	ldr	r0, [pc, #796]	@ (8007ec8 <resetMenuTexts+0x378>)
 8007baa:	f006 fa73 	bl	800e094 <memset>
    memset(yediHataKoduText, 0, 17);
 8007bae:	2211      	movs	r2, #17
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	48c6      	ldr	r0, [pc, #792]	@ (8007ecc <resetMenuTexts+0x37c>)
 8007bb4:	f006 fa6e 	bl	800e094 <memset>
    memset(sekizHataKoduText, 0, 17);
 8007bb8:	2211      	movs	r2, #17
 8007bba:	2100      	movs	r1, #0
 8007bbc:	48c4      	ldr	r0, [pc, #784]	@ (8007ed0 <resetMenuTexts+0x380>)
 8007bbe:	f006 fa69 	bl	800e094 <memset>
    memset(dokuzHataKoduText, 0, 17);
 8007bc2:	2211      	movs	r2, #17
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	48c3      	ldr	r0, [pc, #780]	@ (8007ed4 <resetMenuTexts+0x384>)
 8007bc8:	f006 fa64 	bl	800e094 <memset>
    memset(onHataKoduText, 0, 17);
 8007bcc:	2211      	movs	r2, #17
 8007bce:	2100      	movs	r1, #0
 8007bd0:	48c1      	ldr	r0, [pc, #772]	@ (8007ed8 <resetMenuTexts+0x388>)
 8007bd2:	f006 fa5f 	bl	800e094 <memset>
    memset(silmekIcinText, 0, 17);
 8007bd6:	2211      	movs	r2, #17
 8007bd8:	2100      	movs	r1, #0
 8007bda:	48c0      	ldr	r0, [pc, #768]	@ (8007edc <resetMenuTexts+0x38c>)
 8007bdc:	f006 fa5a 	bl	800e094 <memset>
    memset(calismaSekliText, 0, 17);
 8007be0:	2211      	movs	r2, #17
 8007be2:	2100      	movs	r1, #0
 8007be4:	48be      	ldr	r0, [pc, #760]	@ (8007ee0 <resetMenuTexts+0x390>)
 8007be6:	f006 fa55 	bl	800e094 <memset>
    memset(devirmeYuruyusText, 0, 17);
 8007bea:	2211      	movs	r2, #17
 8007bec:	2100      	movs	r1, #0
 8007bee:	48bd      	ldr	r0, [pc, #756]	@ (8007ee4 <resetMenuTexts+0x394>)
 8007bf0:	f006 fa50 	bl	800e094 <memset>
    memset(bastikcaCalisanText, 0, 17);
 8007bf4:	2211      	movs	r2, #17
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	48bb      	ldr	r0, [pc, #748]	@ (8007ee8 <resetMenuTexts+0x398>)
 8007bfa:	f006 fa4b 	bl	800e094 <memset>
    memset(basGonderText, 0, 17);
 8007bfe:	2211      	movs	r2, #17
 8007c00:	2100      	movs	r1, #0
 8007c02:	48ba      	ldr	r0, [pc, #744]	@ (8007eec <resetMenuTexts+0x39c>)
 8007c04:	f006 fa46 	bl	800e094 <memset>
    memset(emniyetCercevesiText, 0, 17);
 8007c08:	2211      	movs	r2, #17
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	48b8      	ldr	r0, [pc, #736]	@ (8007ef0 <resetMenuTexts+0x3a0>)
 8007c0e:	f006 fa41 	bl	800e094 <memset>
    memset(pasifText, 0, 17);
 8007c12:	2211      	movs	r2, #17
 8007c14:	2100      	movs	r1, #0
 8007c16:	48b7      	ldr	r0, [pc, #732]	@ (8007ef4 <resetMenuTexts+0x3a4>)
 8007c18:	f006 fa3c 	bl	800e094 <memset>
    memset(aktifText, 0, 17);
 8007c1c:	2211      	movs	r2, #17
 8007c1e:	2100      	movs	r1, #0
 8007c20:	48b5      	ldr	r0, [pc, #724]	@ (8007ef8 <resetMenuTexts+0x3a8>)
 8007c22:	f006 fa37 	bl	800e094 <memset>
    memset(yavaslamaLimitText, 0, 17);
 8007c26:	2211      	movs	r2, #17
 8007c28:	2100      	movs	r1, #0
 8007c2a:	48b4      	ldr	r0, [pc, #720]	@ (8007efc <resetMenuTexts+0x3ac>)
 8007c2c:	f006 fa32 	bl	800e094 <memset>
    memset(altLimitText, 0, 17);
 8007c30:	2211      	movs	r2, #17
 8007c32:	2100      	movs	r1, #0
 8007c34:	48b2      	ldr	r0, [pc, #712]	@ (8007f00 <resetMenuTexts+0x3b0>)
 8007c36:	f006 fa2d 	bl	800e094 <memset>
    memset(basincSalteriText, 0, 17);
 8007c3a:	2211      	movs	r2, #17
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	48b1      	ldr	r0, [pc, #708]	@ (8007f04 <resetMenuTexts+0x3b4>)
 8007c40:	f006 fa28 	bl	800e094 <memset>
    memset(kapiSecimleriText, 0, 17);
 8007c44:	2211      	movs	r2, #17
 8007c46:	2100      	movs	r1, #0
 8007c48:	48af      	ldr	r0, [pc, #700]	@ (8007f08 <resetMenuTexts+0x3b8>)
 8007c4a:	f006 fa23 	bl	800e094 <memset>
    memset(katKapisiAktifText, 0, 17);
 8007c4e:	2211      	movs	r2, #17
 8007c50:	2100      	movs	r1, #0
 8007c52:	48ae      	ldr	r0, [pc, #696]	@ (8007f0c <resetMenuTexts+0x3bc>)
 8007c54:	f006 fa1e 	bl	800e094 <memset>
    memset(tablaKapiAktifText, 0, 17);
 8007c58:	2211      	movs	r2, #17
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	48ac      	ldr	r0, [pc, #688]	@ (8007f10 <resetMenuTexts+0x3c0>)
 8007c5e:	f006 fa19 	bl	800e094 <memset>
    memset(katArtiTablaAktifText, 0, 17);
 8007c62:	2211      	movs	r2, #17
 8007c64:	2100      	movs	r1, #0
 8007c66:	48ab      	ldr	r0, [pc, #684]	@ (8007f14 <resetMenuTexts+0x3c4>)
 8007c68:	f006 fa14 	bl	800e094 <memset>
    memset(kapiAcmaTipiText, 0, 17);
 8007c6c:	2211      	movs	r2, #17
 8007c6e:	2100      	movs	r1, #0
 8007c70:	48a9      	ldr	r0, [pc, #676]	@ (8007f18 <resetMenuTexts+0x3c8>)
 8007c72:	f006 fa0f 	bl	800e094 <memset>
    memset(kapiButonuESPText, 0, 17);
 8007c76:	2211      	movs	r2, #17
 8007c78:	2100      	movs	r1, #0
 8007c7a:	48a8      	ldr	r0, [pc, #672]	@ (8007f1c <resetMenuTexts+0x3cc>)
 8007c7c:	f006 fa0a 	bl	800e094 <memset>
    memset(katButonuEXTText, 0, 17);
 8007c80:	2211      	movs	r2, #17
 8007c82:	2100      	movs	r1, #0
 8007c84:	48a6      	ldr	r0, [pc, #664]	@ (8007f20 <resetMenuTexts+0x3d0>)
 8007c86:	f006 fa05 	bl	800e094 <memset>
    memset(birKatKapiTipiText, 0, 17);
 8007c8a:	2211      	movs	r2, #17
 8007c8c:	2100      	movs	r1, #0
 8007c8e:	48a5      	ldr	r0, [pc, #660]	@ (8007f24 <resetMenuTexts+0x3d4>)
 8007c90:	f006 fa00 	bl	800e094 <memset>
    memset(butonKontrolluText, 0, 17);
 8007c94:	2211      	movs	r2, #17
 8007c96:	2100      	movs	r1, #0
 8007c98:	48a3      	ldr	r0, [pc, #652]	@ (8007f28 <resetMenuTexts+0x3d8>)
 8007c9a:	f006 f9fb 	bl	800e094 <memset>
    memset(birinciKapiAcSuresiText, 0, 17);
 8007c9e:	2211      	movs	r2, #17
 8007ca0:	2100      	movs	r1, #0
 8007ca2:	48a2      	ldr	r0, [pc, #648]	@ (8007f2c <resetMenuTexts+0x3dc>)
 8007ca4:	f006 f9f6 	bl	800e094 <memset>
    memset(kacSaniyeText, 0, 17);
 8007ca8:	2211      	movs	r2, #17
 8007caa:	2100      	movs	r1, #0
 8007cac:	48a0      	ldr	r0, [pc, #640]	@ (8007f30 <resetMenuTexts+0x3e0>)
 8007cae:	f006 f9f1 	bl	800e094 <memset>
    memset(ikinciKatKapiTipiText, 0, 17);
 8007cb2:	2211      	movs	r2, #17
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	489f      	ldr	r0, [pc, #636]	@ (8007f34 <resetMenuTexts+0x3e4>)
 8007cb8:	f006 f9ec 	bl	800e094 <memset>
    memset(ikinciKapiAcSuresiText, 0, 17);
 8007cbc:	2211      	movs	r2, #17
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	489d      	ldr	r0, [pc, #628]	@ (8007f38 <resetMenuTexts+0x3e8>)
 8007cc2:	f006 f9e7 	bl	800e094 <memset>
    memset(tablaKapiTipiText, 0, 17);
 8007cc6:	2211      	movs	r2, #17
 8007cc8:	2100      	movs	r1, #0
 8007cca:	489c      	ldr	r0, [pc, #624]	@ (8007f3c <resetMenuTexts+0x3ec>)
 8007ccc:	f006 f9e2 	bl	800e094 <memset>
    memset(tablaKapiAcKonumText, 0, 17);
 8007cd0:	2211      	movs	r2, #17
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	489a      	ldr	r0, [pc, #616]	@ (8007f40 <resetMenuTexts+0x3f0>)
 8007cd6:	f006 f9dd 	bl	800e094 <memset>
    memset(birinciKattaAcText, 0, 17);
 8007cda:	2211      	movs	r2, #17
 8007cdc:	2100      	movs	r1, #0
 8007cde:	4899      	ldr	r0, [pc, #612]	@ (8007f44 <resetMenuTexts+0x3f4>)
 8007ce0:	f006 f9d8 	bl	800e094 <memset>
    memset(ikinciKattaAcText, 0, 17);
 8007ce4:	2211      	movs	r2, #17
 8007ce6:	2100      	movs	r1, #0
 8007ce8:	4897      	ldr	r0, [pc, #604]	@ (8007f48 <resetMenuTexts+0x3f8>)
 8007cea:	f006 f9d3 	bl	800e094 <memset>
    memset(birVeIkinciKattaAcText, 0, 17);
 8007cee:	2211      	movs	r2, #17
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	4896      	ldr	r0, [pc, #600]	@ (8007f4c <resetMenuTexts+0x3fc>)
 8007cf4:	f006 f9ce 	bl	800e094 <memset>
    memset(tablaKapiAcSureText, 0, 17);
 8007cf8:	2211      	movs	r2, #17
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	4894      	ldr	r0, [pc, #592]	@ (8007f50 <resetMenuTexts+0x400>)
 8007cfe:	f006 f9c9 	bl	800e094 <memset>
    memset(yukariYavaslamaLimitiText, 0, 17);
 8007d02:	2211      	movs	r2, #17
 8007d04:	2100      	movs	r1, #0
 8007d06:	4893      	ldr	r0, [pc, #588]	@ (8007f54 <resetMenuTexts+0x404>)
 8007d08:	f006 f9c4 	bl	800e094 <memset>
    memset(devirmeYuruyusMenuText, 0, 17);
 8007d0c:	2211      	movs	r2, #17
 8007d0e:	2100      	movs	r1, #0
 8007d10:	4891      	ldr	r0, [pc, #580]	@ (8007f58 <resetMenuTexts+0x408>)
 8007d12:	f006 f9bf 	bl	800e094 <memset>
    memset(devirmeAktifText, 0, 17);
 8007d16:	2211      	movs	r2, #17
 8007d18:	2100      	movs	r1, #0
 8007d1a:	4890      	ldr	r0, [pc, #576]	@ (8007f5c <resetMenuTexts+0x40c>)
 8007d1c:	f006 f9ba 	bl	800e094 <memset>
    memset(yuruyusAktifText, 0, 17);
 8007d20:	2211      	movs	r2, #17
 8007d22:	2100      	movs	r1, #0
 8007d24:	488e      	ldr	r0, [pc, #568]	@ (8007f60 <resetMenuTexts+0x410>)
 8007d26:	f006 f9b5 	bl	800e094 <memset>
    memset(devirmeYukariText, 0, 17);
 8007d2a:	2211      	movs	r2, #17
 8007d2c:	2100      	movs	r1, #0
 8007d2e:	488d      	ldr	r0, [pc, #564]	@ (8007f64 <resetMenuTexts+0x414>)
 8007d30:	f006 f9b0 	bl	800e094 <memset>
    memset(yuruyusIleriText, 0, 17);
 8007d34:	2211      	movs	r2, #17
 8007d36:	2100      	movs	r1, #0
 8007d38:	488b      	ldr	r0, [pc, #556]	@ (8007f68 <resetMenuTexts+0x418>)
 8007d3a:	f006 f9ab 	bl	800e094 <memset>
    memset(devirmeAsagiSivicText, 0, 17);
 8007d3e:	2211      	movs	r2, #17
 8007d40:	2100      	movs	r1, #0
 8007d42:	488a      	ldr	r0, [pc, #552]	@ (8007f6c <resetMenuTexts+0x41c>)
 8007d44:	f006 f9a6 	bl	800e094 <memset>
    memset(yuruyusGeriSivicText, 0, 17);
 8007d48:	2211      	movs	r2, #17
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	4888      	ldr	r0, [pc, #544]	@ (8007f70 <resetMenuTexts+0x420>)
 8007d4e:	f006 f9a1 	bl	800e094 <memset>
    memset(yuruyusSecildiText, 0, 17);
 8007d52:	2211      	movs	r2, #17
 8007d54:	2100      	movs	r1, #0
 8007d56:	4887      	ldr	r0, [pc, #540]	@ (8007f74 <resetMenuTexts+0x424>)
 8007d58:	f006 f99c 	bl	800e094 <memset>
    memset(devirmeSilindirTipiText, 0, 17);
 8007d5c:	2211      	movs	r2, #17
 8007d5e:	2100      	movs	r1, #0
 8007d60:	4885      	ldr	r0, [pc, #532]	@ (8007f78 <resetMenuTexts+0x428>)
 8007d62:	f006 f997 	bl	800e094 <memset>
    memset(tekTesirText, 0, 17);
 8007d66:	2211      	movs	r2, #17
 8007d68:	2100      	movs	r1, #0
 8007d6a:	4884      	ldr	r0, [pc, #528]	@ (8007f7c <resetMenuTexts+0x42c>)
 8007d6c:	f006 f992 	bl	800e094 <memset>
    memset(ciftTesirText, 0, 17);
 8007d70:	2211      	movs	r2, #17
 8007d72:	2100      	movs	r1, #0
 8007d74:	4882      	ldr	r0, [pc, #520]	@ (8007f80 <resetMenuTexts+0x430>)
 8007d76:	f006 f98d 	bl	800e094 <memset>
    memset(platformSilindirTipiText, 0, 17);
 8007d7a:	2211      	movs	r2, #17
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	4881      	ldr	r0, [pc, #516]	@ (8007f84 <resetMenuTexts+0x434>)
 8007d80:	f006 f988 	bl	800e094 <memset>
    memset(yukariValfSureText, 0, 17);
 8007d84:	2211      	movs	r2, #17
 8007d86:	2100      	movs	r1, #0
 8007d88:	487f      	ldr	r0, [pc, #508]	@ (8007f88 <resetMenuTexts+0x438>)
 8007d8a:	f006 f983 	bl	800e094 <memset>
    memset(asagiValfSureText, 0, 17);
 8007d8e:	2211      	movs	r2, #17
 8007d90:	2100      	movs	r1, #0
 8007d92:	487e      	ldr	r0, [pc, #504]	@ (8007f8c <resetMenuTexts+0x43c>)
 8007d94:	f006 f97e 	bl	800e094 <memset>
    memset(devirmeYukariValfSureText, 0, 17);
 8007d98:	2211      	movs	r2, #17
 8007d9a:	2100      	movs	r1, #0
 8007d9c:	487c      	ldr	r0, [pc, #496]	@ (8007f90 <resetMenuTexts+0x440>)
 8007d9e:	f006 f979 	bl	800e094 <memset>
    memset(ileriValfSureText, 0, 17);
 8007da2:	2211      	movs	r2, #17
 8007da4:	2100      	movs	r1, #0
 8007da6:	487b      	ldr	r0, [pc, #492]	@ (8007f94 <resetMenuTexts+0x444>)
 8007da8:	f006 f974 	bl	800e094 <memset>
    memset(devirmeAsagiValfSureText, 0, 17);
 8007dac:	2211      	movs	r2, #17
 8007dae:	2100      	movs	r1, #0
 8007db0:	4879      	ldr	r0, [pc, #484]	@ (8007f98 <resetMenuTexts+0x448>)
 8007db2:	f006 f96f 	bl	800e094 <memset>
    memset(geriValfSureText, 0, 17);
 8007db6:	2211      	movs	r2, #17
 8007db8:	2100      	movs	r1, #0
 8007dba:	4878      	ldr	r0, [pc, #480]	@ (8007f9c <resetMenuTexts+0x44c>)
 8007dbc:	f006 f96a 	bl	800e094 <memset>
    memset(calismaSuresiText, 0, 17);
 8007dc0:	2211      	movs	r2, #17
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	4876      	ldr	r0, [pc, #472]	@ (8007fa0 <resetMenuTexts+0x450>)
 8007dc6:	f006 f965 	bl	800e094 <memset>
    memset(calismaSayisiText, 0, 17);
 8007dca:	2211      	movs	r2, #17
 8007dcc:	2100      	movs	r1, #0
 8007dce:	4875      	ldr	r0, [pc, #468]	@ (8007fa4 <resetMenuTexts+0x454>)
 8007dd0:	f006 f960 	bl	800e094 <memset>
    memset(enterlaSifirlaText, 0, 17);
 8007dd4:	2211      	movs	r2, #17
 8007dd6:	2100      	movs	r1, #0
 8007dd8:	4873      	ldr	r0, [pc, #460]	@ (8007fa8 <resetMenuTexts+0x458>)
 8007dda:	f006 f95b 	bl	800e094 <memset>
    memset(dilSecimText, 0, 17);
 8007dde:	2211      	movs	r2, #17
 8007de0:	2100      	movs	r1, #0
 8007de2:	4872      	ldr	r0, [pc, #456]	@ (8007fac <resetMenuTexts+0x45c>)
 8007de4:	f006 f956 	bl	800e094 <memset>
    memset(secilenDilText, 0, 17);
 8007de8:	2211      	movs	r2, #17
 8007dea:	2100      	movs	r1, #0
 8007dec:	4870      	ldr	r0, [pc, #448]	@ (8007fb0 <resetMenuTexts+0x460>)
 8007dee:	f006 f951 	bl	800e094 <memset>
    memset(menudenCikisText, 0, 17);
 8007df2:	2211      	movs	r2, #17
 8007df4:	2100      	movs	r1, #0
 8007df6:	486f      	ldr	r0, [pc, #444]	@ (8007fb4 <resetMenuTexts+0x464>)
 8007df8:	f006 f94c 	bl	800e094 <memset>
    memset(enteraBasinizText, 0, 17);
 8007dfc:	2211      	movs	r2, #17
 8007dfe:	2100      	movs	r1, #0
 8007e00:	486d      	ldr	r0, [pc, #436]	@ (8007fb8 <resetMenuTexts+0x468>)
 8007e02:	f006 f947 	bl	800e094 <memset>
    memset(hataKoduText, 0, 17);
 8007e06:	2211      	movs	r2, #17
 8007e08:	2100      	movs	r1, #0
 8007e0a:	486c      	ldr	r0, [pc, #432]	@ (8007fbc <resetMenuTexts+0x46c>)
 8007e0c:	f006 f942 	bl	800e094 <memset>
    memset(dataSynchText, 0, 17);
 8007e10:	2211      	movs	r2, #17
 8007e12:	2100      	movs	r1, #0
 8007e14:	486a      	ldr	r0, [pc, #424]	@ (8007fc0 <resetMenuTexts+0x470>)
 8007e16:	f006 f93d 	bl	800e094 <memset>
    memset(dataSynch2Text, 0, 17);
 8007e1a:	2211      	movs	r2, #17
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	4869      	ldr	r0, [pc, #420]	@ (8007fc4 <resetMenuTexts+0x474>)
 8007e20:	f006 f938 	bl	800e094 <memset>
    memset(mustBeUniqueText, 0, 17);
 8007e24:	2211      	movs	r2, #17
 8007e26:	2100      	movs	r1, #0
 8007e28:	4867      	ldr	r0, [pc, #412]	@ (8007fc8 <resetMenuTexts+0x478>)
 8007e2a:	f006 f933 	bl	800e094 <memset>
    memset(mustBeUnique2Text, 0, 17);
 8007e2e:	2211      	movs	r2, #17
 8007e30:	2100      	movs	r1, #0
 8007e32:	4866      	ldr	r0, [pc, #408]	@ (8007fcc <resetMenuTexts+0x47c>)
 8007e34:	f006 f92e 	bl	800e094 <memset>
    memset(mustBe12Text, 0, 17);
 8007e38:	2211      	movs	r2, #17
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	4864      	ldr	r0, [pc, #400]	@ (8007fd0 <resetMenuTexts+0x480>)
 8007e3e:	f006 f929 	bl	800e094 <memset>
    memset(mustBe122Text, 0, 17);
 8007e42:	2211      	movs	r2, #17
 8007e44:	2100      	movs	r1, #0
 8007e46:	4863      	ldr	r0, [pc, #396]	@ (8007fd4 <resetMenuTexts+0x484>)
 8007e48:	f006 f924 	bl	800e094 <memset>
    memset(ssidExceedErrorText, 0, 17);
 8007e4c:	2211      	movs	r2, #17
 8007e4e:	2100      	movs	r1, #0
 8007e50:	4861      	ldr	r0, [pc, #388]	@ (8007fd8 <resetMenuTexts+0x488>)
 8007e52:	f006 f91f 	bl	800e094 <memset>
    memset(ssidExceedError2Text, 0, 17);
 8007e56:	2211      	movs	r2, #17
 8007e58:	2100      	movs	r1, #0
 8007e5a:	4860      	ldr	r0, [pc, #384]	@ (8007fdc <resetMenuTexts+0x48c>)
 8007e5c:	f006 f91a 	bl	800e094 <memset>
    memset(passExceedErrorText, 0, 17);
 8007e60:	2211      	movs	r2, #17
 8007e62:	2100      	movs	r1, #0
 8007e64:	485e      	ldr	r0, [pc, #376]	@ (8007fe0 <resetMenuTexts+0x490>)
 8007e66:	f006 f915 	bl	800e094 <memset>
    memset(passExceedError2Text, 0, 17);
 8007e6a:	2211      	movs	r2, #17
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	485d      	ldr	r0, [pc, #372]	@ (8007fe4 <resetMenuTexts+0x494>)
 8007e70:	f006 f910 	bl	800e094 <memset>
    memset(dataYazildiText, 0, 17);
 8007e74:	2211      	movs	r2, #17
 8007e76:	2100      	movs	r1, #0
 8007e78:	485b      	ldr	r0, [pc, #364]	@ (8007fe8 <resetMenuTexts+0x498>)
 8007e7a:	f006 f90b 	bl	800e094 <memset>
    memset(dataOkunuyorText, 0, 17);
 8007e7e:	2211      	movs	r2, #17
 8007e80:	2100      	movs	r1, #0
 8007e82:	485a      	ldr	r0, [pc, #360]	@ (8007fec <resetMenuTexts+0x49c>)
 8007e84:	f006 f906 	bl	800e094 <memset>
    memset(dataOkunduText, 0, 17);
 8007e88:	2211      	movs	r2, #17
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	4858      	ldr	r0, [pc, #352]	@ (8007ff0 <resetMenuTexts+0x4a0>)
 8007e8e:	f006 f901 	bl	800e094 <memset>
    memset(degerKaydedildiText, 0, 17);
 8007e92:	2211      	movs	r2, #17
 8007e94:	2100      	movs	r1, #0
 8007e96:	4857      	ldr	r0, [pc, #348]	@ (8007ff4 <resetMenuTexts+0x4a4>)
 8007e98:	f006 f8fc 	bl	800e094 <memset>
    memset(errorCodeText, 0, 17);
 8007e9c:	2211      	movs	r2, #17
 8007e9e:	2100      	movs	r1, #0
 8007ea0:	4855      	ldr	r0, [pc, #340]	@ (8007ff8 <resetMenuTexts+0x4a8>)
 8007ea2:	f006 f8f7 	bl	800e094 <memset>
 8007ea6:	e0a9      	b.n	8007ffc <resetMenuTexts+0x4ac>
 8007ea8:	20001220 	.word	0x20001220
 8007eac:	20001234 	.word	0x20001234
 8007eb0:	20001248 	.word	0x20001248
 8007eb4:	2000125c 	.word	0x2000125c
 8007eb8:	20001270 	.word	0x20001270
 8007ebc:	20001284 	.word	0x20001284
 8007ec0:	20001298 	.word	0x20001298
 8007ec4:	200012ac 	.word	0x200012ac
 8007ec8:	200012c0 	.word	0x200012c0
 8007ecc:	200012d4 	.word	0x200012d4
 8007ed0:	200012e8 	.word	0x200012e8
 8007ed4:	200012fc 	.word	0x200012fc
 8007ed8:	20001310 	.word	0x20001310
 8007edc:	20001324 	.word	0x20001324
 8007ee0:	20001338 	.word	0x20001338
 8007ee4:	2000134c 	.word	0x2000134c
 8007ee8:	20001360 	.word	0x20001360
 8007eec:	20001374 	.word	0x20001374
 8007ef0:	20001388 	.word	0x20001388
 8007ef4:	2000139c 	.word	0x2000139c
 8007ef8:	200013b0 	.word	0x200013b0
 8007efc:	200013c4 	.word	0x200013c4
 8007f00:	200013d8 	.word	0x200013d8
 8007f04:	200013ec 	.word	0x200013ec
 8007f08:	20001400 	.word	0x20001400
 8007f0c:	20001414 	.word	0x20001414
 8007f10:	20001428 	.word	0x20001428
 8007f14:	2000143c 	.word	0x2000143c
 8007f18:	20001450 	.word	0x20001450
 8007f1c:	20001464 	.word	0x20001464
 8007f20:	20001478 	.word	0x20001478
 8007f24:	2000148c 	.word	0x2000148c
 8007f28:	200014a0 	.word	0x200014a0
 8007f2c:	200014b4 	.word	0x200014b4
 8007f30:	200014c8 	.word	0x200014c8
 8007f34:	200014dc 	.word	0x200014dc
 8007f38:	200014f0 	.word	0x200014f0
 8007f3c:	20001504 	.word	0x20001504
 8007f40:	20001518 	.word	0x20001518
 8007f44:	2000152c 	.word	0x2000152c
 8007f48:	20001540 	.word	0x20001540
 8007f4c:	20001554 	.word	0x20001554
 8007f50:	20001568 	.word	0x20001568
 8007f54:	2000157c 	.word	0x2000157c
 8007f58:	20001590 	.word	0x20001590
 8007f5c:	200015a4 	.word	0x200015a4
 8007f60:	200015b8 	.word	0x200015b8
 8007f64:	200015cc 	.word	0x200015cc
 8007f68:	200015e0 	.word	0x200015e0
 8007f6c:	200015f4 	.word	0x200015f4
 8007f70:	20001608 	.word	0x20001608
 8007f74:	2000161c 	.word	0x2000161c
 8007f78:	20001630 	.word	0x20001630
 8007f7c:	20001644 	.word	0x20001644
 8007f80:	20001658 	.word	0x20001658
 8007f84:	2000166c 	.word	0x2000166c
 8007f88:	20001680 	.word	0x20001680
 8007f8c:	20001694 	.word	0x20001694
 8007f90:	200016a8 	.word	0x200016a8
 8007f94:	200016bc 	.word	0x200016bc
 8007f98:	200016d0 	.word	0x200016d0
 8007f9c:	200016e4 	.word	0x200016e4
 8007fa0:	200016f8 	.word	0x200016f8
 8007fa4:	2000170c 	.word	0x2000170c
 8007fa8:	20001720 	.word	0x20001720
 8007fac:	20001734 	.word	0x20001734
 8007fb0:	20001748 	.word	0x20001748
 8007fb4:	2000175c 	.word	0x2000175c
 8007fb8:	20001770 	.word	0x20001770
 8007fbc:	20001784 	.word	0x20001784
 8007fc0:	20001798 	.word	0x20001798
 8007fc4:	200017ac 	.word	0x200017ac
 8007fc8:	200017c0 	.word	0x200017c0
 8007fcc:	200017d4 	.word	0x200017d4
 8007fd0:	200017e8 	.word	0x200017e8
 8007fd4:	200017fc 	.word	0x200017fc
 8007fd8:	20001810 	.word	0x20001810
 8007fdc:	20001824 	.word	0x20001824
 8007fe0:	20001838 	.word	0x20001838
 8007fe4:	2000184c 	.word	0x2000184c
 8007fe8:	20001860 	.word	0x20001860
 8007fec:	20001874 	.word	0x20001874
 8007ff0:	20001888 	.word	0x20001888
 8007ff4:	2000189c 	.word	0x2000189c
 8007ff8:	200018b0 	.word	0x200018b0
    memset(machineIDText, 0, 17);
 8007ffc:	2211      	movs	r2, #17
 8007ffe:	2100      	movs	r1, #0
 8008000:	4809      	ldr	r0, [pc, #36]	@ (8008028 <resetMenuTexts+0x4d8>)
 8008002:	f006 f847 	bl	800e094 <memset>
    memset(idConfirmationText, 0, 17);
 8008006:	2211      	movs	r2, #17
 8008008:	2100      	movs	r1, #0
 800800a:	4808      	ldr	r0, [pc, #32]	@ (800802c <resetMenuTexts+0x4dc>)
 800800c:	f006 f842 	bl	800e094 <memset>
    memset(idConfirmationSubText, 0, 17);
 8008010:	2211      	movs	r2, #17
 8008012:	2100      	movs	r1, #0
 8008014:	4806      	ldr	r0, [pc, #24]	@ (8008030 <resetMenuTexts+0x4e0>)
 8008016:	f006 f83d 	bl	800e094 <memset>
    memset(wifiConfirmationText, 0, 17);
 800801a:	2211      	movs	r2, #17
 800801c:	2100      	movs	r1, #0
 800801e:	4805      	ldr	r0, [pc, #20]	@ (8008034 <resetMenuTexts+0x4e4>)
 8008020:	f006 f838 	bl	800e094 <memset>
}
 8008024:	bf00      	nop
 8008026:	bd80      	pop	{r7, pc}
 8008028:	200018c4 	.word	0x200018c4
 800802c:	200018d8 	.word	0x200018d8
 8008030:	200018ec 	.word	0x200018ec
 8008034:	20001900 	.word	0x20001900

08008038 <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 800803e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008042:	f001 fdc1 	bl	8009bc8 <HAL_Delay>
	int confirmationVal = 0;
 8008046:	2300      	movs	r3, #0
 8008048:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 800804a:	e012      	b.n	8008072 <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 800804c:	4a12      	ldr	r2, [pc, #72]	@ (8008098 <takeMachineIDWithConfirmation+0x60>)
 800804e:	2101      	movs	r1, #1
 8008050:	2001      	movs	r0, #1
 8008052:	f001 f85f 	bl	8009114 <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 8008056:	4a11      	ldr	r2, [pc, #68]	@ (800809c <takeMachineIDWithConfirmation+0x64>)
 8008058:	2101      	movs	r1, #1
 800805a:	2002      	movs	r0, #2
 800805c:	f001 f85a 	bl	8009114 <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 8008060:	2102      	movs	r1, #2
 8008062:	480f      	ldr	r0, [pc, #60]	@ (80080a0 <takeMachineIDWithConfirmation+0x68>)
 8008064:	f002 fc0e 	bl	800a884 <HAL_GPIO_ReadPin>
 8008068:	4603      	mov	r3, r0
 800806a:	2b01      	cmp	r3, #1
 800806c:	d101      	bne.n	8008072 <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 800806e:	2301      	movs	r3, #1
 8008070:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d0e9      	beq.n	800804c <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 8008078:	f000 f814 	bl	80080a4 <takeMachineID>

	convertArrays(1);
 800807c:	2001      	movs	r0, #1
 800807e:	f7f8 fc13 	bl	80008a8 <convertArrays>
	HAL_Delay(50);
 8008082:	2032      	movs	r0, #50	@ 0x32
 8008084:	f001 fda0 	bl	8009bc8 <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 8008088:	2001      	movs	r0, #1
 800808a:	f7f9 fabf 	bl	800160c <printCredentials>
}
 800808e:	bf00      	nop
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	200018d8 	.word	0x200018d8
 800809c:	200018ec 	.word	0x200018ec
 80080a0:	40010800 	.word	0x40010800

080080a4 <takeMachineID>:

void takeMachineID() {
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
	mainSection:

	lcd_cursor(1);
 80080aa:	2001      	movs	r0, #1
 80080ac:	f001 f890 	bl	80091d0 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 80080b0:	220c      	movs	r2, #12
 80080b2:	2100      	movs	r1, #0
 80080b4:	488a      	ldr	r0, [pc, #552]	@ (80082e0 <takeMachineID+0x23c>)
 80080b6:	f005 ffed 	bl	800e094 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 80080ba:	2305      	movs	r3, #5
 80080bc:	617b      	str	r3, [r7, #20]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 80080be:	2303      	movs	r3, #3
 80080c0:	613b      	str	r3, [r7, #16]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 80080c2:	2300      	movs	r3, #0
 80080c4:	60fb      	str	r3, [r7, #12]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 80080c6:	4b87      	ldr	r3, [pc, #540]	@ (80082e4 <takeMachineID+0x240>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	60bb      	str	r3, [r7, #8]

    printTemplate(1, 0);
 80080cc:	2100      	movs	r1, #0
 80080ce:	2001      	movs	r0, #1
 80080d0:	f7f9 f92c 	bl	800132c <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80080d4:	2108      	movs	r1, #8
 80080d6:	4884      	ldr	r0, [pc, #528]	@ (80082e8 <takeMachineID+0x244>)
 80080d8:	f002 fbd4 	bl	800a884 <HAL_GPIO_ReadPin>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d146      	bne.n	8008170 <takeMachineID+0xcc>
        	lcd_cursor(0);
 80080e2:	2000      	movs	r0, #0
 80080e4:	f001 f874 	bl	80091d0 <lcd_cursor>

        	lcd_print(1, 1, "   MACHINE ID   ");
 80080e8:	4a80      	ldr	r2, [pc, #512]	@ (80082ec <takeMachineID+0x248>)
 80080ea:	2101      	movs	r1, #1
 80080ec:	2001      	movs	r0, #1
 80080ee:	f001 f811 	bl	8009114 <lcd_print>
        	lcd_print(2, 1, "KONTROL EDILIYOR");
 80080f2:	4a7f      	ldr	r2, [pc, #508]	@ (80082f0 <takeMachineID+0x24c>)
 80080f4:	2101      	movs	r1, #1
 80080f6:	2002      	movs	r0, #2
 80080f8:	f001 f80c 	bl	8009114 <lcd_print>

        	if(checkEEPROM4ID() != 1) {
 80080fc:	f000 fe4c 	bl	8008d98 <checkEEPROM4ID>
 8008100:	4603      	mov	r3, r0
 8008102:	2b01      	cmp	r3, #1
 8008104:	d00e      	beq.n	8008124 <takeMachineID+0x80>
        		lcd_print(1, 1, mustBe12Text);
 8008106:	4a7b      	ldr	r2, [pc, #492]	@ (80082f4 <takeMachineID+0x250>)
 8008108:	2101      	movs	r1, #1
 800810a:	2001      	movs	r0, #1
 800810c:	f001 f802 	bl	8009114 <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 8008110:	4a79      	ldr	r2, [pc, #484]	@ (80082f8 <takeMachineID+0x254>)
 8008112:	2101      	movs	r1, #1
 8008114:	2002      	movs	r0, #2
 8008116:	f000 fffd 	bl	8009114 <lcd_print>
        		HAL_Delay(1250);
 800811a:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 800811e:	f001 fd53 	bl	8009bc8 <HAL_Delay>

        		goto mainSection;
 8008122:	e7c2      	b.n	80080aa <takeMachineID+0x6>
        	}

        	int machineIDControl = 0;
 8008124:	2300      	movs	r3, #0
 8008126:	607b      	str	r3, [r7, #4]
        	for(int i=0; i<2; i++) {
 8008128:	2300      	movs	r3, #0
 800812a:	603b      	str	r3, [r7, #0]
 800812c:	e007      	b.n	800813e <takeMachineID+0x9a>
        		machineIDControl = checkMachineID(&huart1, machineID);
 800812e:	496c      	ldr	r1, [pc, #432]	@ (80082e0 <takeMachineID+0x23c>)
 8008130:	4872      	ldr	r0, [pc, #456]	@ (80082fc <takeMachineID+0x258>)
 8008132:	f7f8 fe9b 	bl	8000e6c <checkMachineID>
 8008136:	6078      	str	r0, [r7, #4]
        	for(int i=0; i<2; i++) {
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	3301      	adds	r3, #1
 800813c:	603b      	str	r3, [r7, #0]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	2b01      	cmp	r3, #1
 8008142:	ddf4      	ble.n	800812e <takeMachineID+0x8a>
        	}

        	if(machineIDControl == 1) {
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b01      	cmp	r3, #1
 8008148:	d103      	bne.n	8008152 <takeMachineID+0xae>
        		saveEEPROM(1);
 800814a:	2001      	movs	r0, #1
 800814c:	f7f8 faaa 	bl	80006a4 <saveEEPROM>
 8008150:	e00e      	b.n	8008170 <takeMachineID+0xcc>
        	} else {
        		lcd_print(1, 1, mustBeUniqueText);
 8008152:	4a6b      	ldr	r2, [pc, #428]	@ (8008300 <takeMachineID+0x25c>)
 8008154:	2101      	movs	r1, #1
 8008156:	2001      	movs	r0, #1
 8008158:	f000 ffdc 	bl	8009114 <lcd_print>
        		lcd_print(2, 1, mustBeUnique2Text);
 800815c:	4a69      	ldr	r2, [pc, #420]	@ (8008304 <takeMachineID+0x260>)
 800815e:	2101      	movs	r1, #1
 8008160:	2002      	movs	r0, #2
 8008162:	f000 ffd7 	bl	8009114 <lcd_print>

        		HAL_Delay(500);
 8008166:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800816a:	f001 fd2d 	bl	8009bc8 <HAL_Delay>

        		goto mainSection;
 800816e:	e79c      	b.n	80080aa <takeMachineID+0x6>
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008170:	2101      	movs	r1, #1
 8008172:	485d      	ldr	r0, [pc, #372]	@ (80082e8 <takeMachineID+0x244>)
 8008174:	f002 fb86 	bl	800a884 <HAL_GPIO_ReadPin>
 8008178:	4603      	mov	r3, r0
 800817a:	2b01      	cmp	r3, #1
 800817c:	d111      	bne.n	80081a2 <takeMachineID+0xfe>
        	if(cursorPosition == 7) {
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	2b07      	cmp	r3, #7
 8008182:	d102      	bne.n	800818a <takeMachineID+0xe6>
        		cursorPosition = 10;
 8008184:	230a      	movs	r3, #10
 8008186:	613b      	str	r3, [r7, #16]
 8008188:	e008      	b.n	800819c <takeMachineID+0xf8>
        	} else if (cursorPosition == 14) {
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	2b0e      	cmp	r3, #14
 800818e:	d102      	bne.n	8008196 <takeMachineID+0xf2>
                cursorPosition = 3;
 8008190:	2303      	movs	r3, #3
 8008192:	613b      	str	r3, [r7, #16]
 8008194:	e002      	b.n	800819c <takeMachineID+0xf8>
            } else {
            	cursorPosition++;
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	3301      	adds	r3, #1
 800819a:	613b      	str	r3, [r7, #16]
            }

        	HAL_Delay(150);
 800819c:	2096      	movs	r0, #150	@ 0x96
 800819e:	f001 fd13 	bl	8009bc8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80081a2:	2108      	movs	r1, #8
 80081a4:	4858      	ldr	r0, [pc, #352]	@ (8008308 <takeMachineID+0x264>)
 80081a6:	f002 fb6d 	bl	800a884 <HAL_GPIO_ReadPin>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d111      	bne.n	80081d4 <takeMachineID+0x130>
            if (cursorPosition == 3) {
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d102      	bne.n	80081bc <takeMachineID+0x118>
                cursorPosition = 14;
 80081b6:	230e      	movs	r3, #14
 80081b8:	613b      	str	r3, [r7, #16]
 80081ba:	e008      	b.n	80081ce <takeMachineID+0x12a>
            } else if(cursorPosition == 10) {
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	2b0a      	cmp	r3, #10
 80081c0:	d102      	bne.n	80081c8 <takeMachineID+0x124>
            	cursorPosition = 7;
 80081c2:	2307      	movs	r3, #7
 80081c4:	613b      	str	r3, [r7, #16]
 80081c6:	e002      	b.n	80081ce <takeMachineID+0x12a>
            } else {
            	cursorPosition--;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(250);
 80081ce:	20fa      	movs	r0, #250	@ 0xfa
 80081d0:	f001 fcfa 	bl	8009bc8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80081d4:	2102      	movs	r1, #2
 80081d6:	4844      	ldr	r0, [pc, #272]	@ (80082e8 <takeMachineID+0x244>)
 80081d8:	f002 fb54 	bl	800a884 <HAL_GPIO_ReadPin>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b01      	cmp	r3, #1
 80081e0:	f040 80b9 	bne.w	8008356 <takeMachineID+0x2b2>
        	if(cursorPosition == 3) {
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d10a      	bne.n	8008200 <takeMachineID+0x15c>
        		machineID[arrayPos] = '0';
 80081ea:	4a3d      	ldr	r2, [pc, #244]	@ (80082e0 <takeMachineID+0x23c>)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	4413      	add	r3, r2
 80081f0:	2230      	movs	r2, #48	@ 0x30
 80081f2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 80081f4:	4a45      	ldr	r2, [pc, #276]	@ (800830c <takeMachineID+0x268>)
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	4413      	add	r3, r2
 80081fa:	2200      	movs	r2, #0
 80081fc:	701a      	strb	r2, [r3, #0]
 80081fe:	e094      	b.n	800832a <takeMachineID+0x286>
        	} else if(cursorPosition == 4) {
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	2b04      	cmp	r3, #4
 8008204:	d10a      	bne.n	800821c <takeMachineID+0x178>
        		machineID[arrayPos] = '1';
 8008206:	4a36      	ldr	r2, [pc, #216]	@ (80082e0 <takeMachineID+0x23c>)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4413      	add	r3, r2
 800820c:	2231      	movs	r2, #49	@ 0x31
 800820e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8008210:	4a3e      	ldr	r2, [pc, #248]	@ (800830c <takeMachineID+0x268>)
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	4413      	add	r3, r2
 8008216:	2201      	movs	r2, #1
 8008218:	701a      	strb	r2, [r3, #0]
 800821a:	e086      	b.n	800832a <takeMachineID+0x286>
        	} else if(cursorPosition == 5) {
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	2b05      	cmp	r3, #5
 8008220:	d10a      	bne.n	8008238 <takeMachineID+0x194>
        		machineID[arrayPos] = '2';
 8008222:	4a2f      	ldr	r2, [pc, #188]	@ (80082e0 <takeMachineID+0x23c>)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	4413      	add	r3, r2
 8008228:	2232      	movs	r2, #50	@ 0x32
 800822a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 800822c:	4a37      	ldr	r2, [pc, #220]	@ (800830c <takeMachineID+0x268>)
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	4413      	add	r3, r2
 8008232:	2202      	movs	r2, #2
 8008234:	701a      	strb	r2, [r3, #0]
 8008236:	e078      	b.n	800832a <takeMachineID+0x286>
        	} else if(cursorPosition == 6) {
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	2b06      	cmp	r3, #6
 800823c:	d10a      	bne.n	8008254 <takeMachineID+0x1b0>
        		machineID[arrayPos] = '3';
 800823e:	4a28      	ldr	r2, [pc, #160]	@ (80082e0 <takeMachineID+0x23c>)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4413      	add	r3, r2
 8008244:	2233      	movs	r2, #51	@ 0x33
 8008246:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8008248:	4a30      	ldr	r2, [pc, #192]	@ (800830c <takeMachineID+0x268>)
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	4413      	add	r3, r2
 800824e:	2203      	movs	r2, #3
 8008250:	701a      	strb	r2, [r3, #0]
 8008252:	e06a      	b.n	800832a <takeMachineID+0x286>
        	} else if(cursorPosition == 7) {
 8008254:	693b      	ldr	r3, [r7, #16]
 8008256:	2b07      	cmp	r3, #7
 8008258:	d10a      	bne.n	8008270 <takeMachineID+0x1cc>
        		machineID[arrayPos] = '4';
 800825a:	4a21      	ldr	r2, [pc, #132]	@ (80082e0 <takeMachineID+0x23c>)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4413      	add	r3, r2
 8008260:	2234      	movs	r2, #52	@ 0x34
 8008262:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8008264:	4a29      	ldr	r2, [pc, #164]	@ (800830c <takeMachineID+0x268>)
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	4413      	add	r3, r2
 800826a:	2204      	movs	r2, #4
 800826c:	701a      	strb	r2, [r3, #0]
 800826e:	e05c      	b.n	800832a <takeMachineID+0x286>
        	} else if(cursorPosition == 10) {
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	2b0a      	cmp	r3, #10
 8008274:	d10a      	bne.n	800828c <takeMachineID+0x1e8>
        		machineID[arrayPos] = '5';
 8008276:	4a1a      	ldr	r2, [pc, #104]	@ (80082e0 <takeMachineID+0x23c>)
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	4413      	add	r3, r2
 800827c:	2235      	movs	r2, #53	@ 0x35
 800827e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8008280:	4a22      	ldr	r2, [pc, #136]	@ (800830c <takeMachineID+0x268>)
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	4413      	add	r3, r2
 8008286:	2205      	movs	r2, #5
 8008288:	701a      	strb	r2, [r3, #0]
 800828a:	e04e      	b.n	800832a <takeMachineID+0x286>
        	} else if(cursorPosition == 11) {
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	2b0b      	cmp	r3, #11
 8008290:	d10a      	bne.n	80082a8 <takeMachineID+0x204>
        		machineID[arrayPos] = '6';
 8008292:	4a13      	ldr	r2, [pc, #76]	@ (80082e0 <takeMachineID+0x23c>)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4413      	add	r3, r2
 8008298:	2236      	movs	r2, #54	@ 0x36
 800829a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 800829c:	4a1b      	ldr	r2, [pc, #108]	@ (800830c <takeMachineID+0x268>)
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	4413      	add	r3, r2
 80082a2:	2206      	movs	r2, #6
 80082a4:	701a      	strb	r2, [r3, #0]
 80082a6:	e040      	b.n	800832a <takeMachineID+0x286>
        	} else if(cursorPosition == 12) {
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	2b0c      	cmp	r3, #12
 80082ac:	d10a      	bne.n	80082c4 <takeMachineID+0x220>
        		machineID[arrayPos] = '7';
 80082ae:	4a0c      	ldr	r2, [pc, #48]	@ (80082e0 <takeMachineID+0x23c>)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	4413      	add	r3, r2
 80082b4:	2237      	movs	r2, #55	@ 0x37
 80082b6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 80082b8:	4a14      	ldr	r2, [pc, #80]	@ (800830c <takeMachineID+0x268>)
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	4413      	add	r3, r2
 80082be:	2207      	movs	r2, #7
 80082c0:	701a      	strb	r2, [r3, #0]
 80082c2:	e032      	b.n	800832a <takeMachineID+0x286>
        	} else if(cursorPosition == 13) {
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	2b0d      	cmp	r3, #13
 80082c8:	d122      	bne.n	8008310 <takeMachineID+0x26c>
        		machineID[arrayPos] = '8';
 80082ca:	4a05      	ldr	r2, [pc, #20]	@ (80082e0 <takeMachineID+0x23c>)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	4413      	add	r3, r2
 80082d0:	2238      	movs	r2, #56	@ 0x38
 80082d2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 80082d4:	4a0d      	ldr	r2, [pc, #52]	@ (800830c <takeMachineID+0x268>)
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	4413      	add	r3, r2
 80082da:	2208      	movs	r2, #8
 80082dc:	701a      	strb	r2, [r3, #0]
 80082de:	e024      	b.n	800832a <takeMachineID+0x286>
 80082e0:	20001064 	.word	0x20001064
 80082e4:	20000000 	.word	0x20000000
 80082e8:	40010800 	.word	0x40010800
 80082ec:	0800f3b8 	.word	0x0800f3b8
 80082f0:	0800f3cc 	.word	0x0800f3cc
 80082f4:	200017e8 	.word	0x200017e8
 80082f8:	200017fc 	.word	0x200017fc
 80082fc:	200019d8 	.word	0x200019d8
 8008300:	200017c0 	.word	0x200017c0
 8008304:	200017d4 	.word	0x200017d4
 8008308:	40011000 	.word	0x40011000
 800830c:	20000fec 	.word	0x20000fec
        	} else if(cursorPosition == 14) {
 8008310:	693b      	ldr	r3, [r7, #16]
 8008312:	2b0e      	cmp	r3, #14
 8008314:	d109      	bne.n	800832a <takeMachineID+0x286>
        		machineID[arrayPos] = '9';
 8008316:	4a34      	ldr	r2, [pc, #208]	@ (80083e8 <takeMachineID+0x344>)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4413      	add	r3, r2
 800831c:	2239      	movs	r2, #57	@ 0x39
 800831e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8008320:	4a32      	ldr	r2, [pc, #200]	@ (80083ec <takeMachineID+0x348>)
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	4413      	add	r3, r2
 8008326:	2209      	movs	r2, #9
 8008328:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	b2d9      	uxtb	r1, r3
 800832e:	4a2e      	ldr	r2, [pc, #184]	@ (80083e8 <takeMachineID+0x344>)
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	4413      	add	r3, r2
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	461a      	mov	r2, r3
 8008338:	2001      	movs	r0, #1
 800833a:	f000 ff00 	bl	800913e <lcd_print_char>

        	writeLoc++;
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	3301      	adds	r3, #1
 8008342:	617b      	str	r3, [r7, #20]
        	arrayPos++;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	3301      	adds	r3, #1
 8008348:	60fb      	str	r3, [r7, #12]
        	eepromVal++;
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	3301      	adds	r3, #1
 800834e:	60bb      	str	r3, [r7, #8]

        	HAL_Delay(150);
 8008350:	2096      	movs	r0, #150	@ 0x96
 8008352:	f001 fc39 	bl	8009bc8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008356:	2104      	movs	r1, #4
 8008358:	4825      	ldr	r0, [pc, #148]	@ (80083f0 <takeMachineID+0x34c>)
 800835a:	f002 fa93 	bl	800a884 <HAL_GPIO_ReadPin>
 800835e:	4603      	mov	r3, r0
 8008360:	2b01      	cmp	r3, #1
 8008362:	d139      	bne.n	80083d8 <takeMachineID+0x334>
            if(strlen(machineID) >= 1) {
 8008364:	4b20      	ldr	r3, [pc, #128]	@ (80083e8 <takeMachineID+0x344>)
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d032      	beq.n	80083d2 <takeMachineID+0x32e>
                machineID[arrayPos] = '\0';
 800836c:	4a1e      	ldr	r2, [pc, #120]	@ (80083e8 <takeMachineID+0x344>)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	4413      	add	r3, r2
 8008372:	2200      	movs	r2, #0
 8008374:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8008376:	4a1d      	ldr	r2, [pc, #116]	@ (80083ec <takeMachineID+0x348>)
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	4413      	add	r3, r2
 800837c:	2200      	movs	r2, #0
 800837e:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	2b05      	cmp	r3, #5
 8008384:	dd03      	ble.n	800838e <takeMachineID+0x2ea>
                	writeLoc--;
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	3b01      	subs	r3, #1
 800838a:	617b      	str	r3, [r7, #20]
 800838c:	e004      	b.n	8008398 <takeMachineID+0x2f4>
                } else if(writeLoc < 5) {
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	2b04      	cmp	r3, #4
 8008392:	dc01      	bgt.n	8008398 <takeMachineID+0x2f4>
                	writeLoc = 5;
 8008394:	2305      	movs	r3, #5
 8008396:	617b      	str	r3, [r7, #20]
                }

                if(arrayPos > 0) {
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	2b00      	cmp	r3, #0
 800839c:	dd06      	ble.n	80083ac <takeMachineID+0x308>
                	arrayPos--;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	3b01      	subs	r3, #1
 80083a2:	60fb      	str	r3, [r7, #12]
                	eepromVal--;
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	3b01      	subs	r3, #1
 80083a8:	60bb      	str	r3, [r7, #8]
 80083aa:	e007      	b.n	80083bc <takeMachineID+0x318>
                } else if(arrayPos < 0) {
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	da04      	bge.n	80083bc <takeMachineID+0x318>
                	arrayPos = 0;
 80083b2:	2300      	movs	r3, #0
 80083b4:	60fb      	str	r3, [r7, #12]
                	eepromVal = idStartPos;
 80083b6:	4b0f      	ldr	r3, [pc, #60]	@ (80083f4 <takeMachineID+0x350>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	60bb      	str	r3, [r7, #8]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	3305      	adds	r3, #5
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	4619      	mov	r1, r3
 80083c6:	2001      	movs	r0, #1
 80083c8:	f000 feda 	bl	8009180 <lcd_delete_char>
                HAL_Delay(50);
 80083cc:	2032      	movs	r0, #50	@ 0x32
 80083ce:	f001 fbfb 	bl	8009bc8 <HAL_Delay>
            }

            HAL_Delay(150);
 80083d2:	2096      	movs	r0, #150	@ 0x96
 80083d4:	f001 fbf8 	bl	8009bc8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	4619      	mov	r1, r3
 80083de:	2002      	movs	r0, #2
 80083e0:	f000 fe79 	bl	80090d6 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80083e4:	e676      	b.n	80080d4 <takeMachineID+0x30>
 80083e6:	bf00      	nop
 80083e8:	20001064 	.word	0x20001064
 80083ec:	20000fec 	.word	0x20000fec
 80083f0:	40010800 	.word	0x40010800
 80083f4:	20000000 	.word	0x20000000

080083f8 <ssidConfirmation>:
    }
}

uint8_t ssidConfirmation() {
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
	int loopVal = 1;
 80083fe:	2301      	movs	r3, #1
 8008400:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8008402:	4a1e      	ldr	r2, [pc, #120]	@ (800847c <ssidConfirmation+0x84>)
 8008404:	2101      	movs	r1, #1
 8008406:	2001      	movs	r0, #1
 8008408:	f000 fe84 	bl	8009114 <lcd_print>

	while(loopVal == 1) {
 800840c:	e012      	b.n	8008434 <ssidConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 800840e:	4a1c      	ldr	r2, [pc, #112]	@ (8008480 <ssidConfirmation+0x88>)
 8008410:	2101      	movs	r1, #1
 8008412:	2002      	movs	r0, #2
 8008414:	f000 fe7e 	bl	8009114 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008418:	2102      	movs	r1, #2
 800841a:	481a      	ldr	r0, [pc, #104]	@ (8008484 <ssidConfirmation+0x8c>)
 800841c:	f002 fa32 	bl	800a884 <HAL_GPIO_ReadPin>
 8008420:	4603      	mov	r3, r0
 8008422:	2b01      	cmp	r3, #1
 8008424:	d101      	bne.n	800842a <ssidConfirmation+0x32>
			loopVal = 0;
 8008426:	2300      	movs	r3, #0
 8008428:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiSSID);
 800842a:	4a17      	ldr	r2, [pc, #92]	@ (8008488 <ssidConfirmation+0x90>)
 800842c:	2101      	movs	r1, #1
 800842e:	2001      	movs	r0, #1
 8008430:	f000 fe70 	bl	8009114 <lcd_print>
	while(loopVal == 1) {
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2b01      	cmp	r3, #1
 8008438:	d0e9      	beq.n	800840e <ssidConfirmation+0x16>
	}

    lcd_cursor(0);
 800843a:	2000      	movs	r0, #0
 800843c:	f000 fec8 	bl	80091d0 <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 8008440:	4811      	ldr	r0, [pc, #68]	@ (8008488 <ssidConfirmation+0x90>)
 8008442:	f7f7 feef 	bl	8000224 <strlen>
 8008446:	4603      	mov	r3, r0
 8008448:	2b14      	cmp	r3, #20
 800844a:	d90f      	bls.n	800846c <ssidConfirmation+0x74>
    	lcd_print(1, 1, ssidExceedErrorText);
 800844c:	4a0f      	ldr	r2, [pc, #60]	@ (800848c <ssidConfirmation+0x94>)
 800844e:	2101      	movs	r1, #1
 8008450:	2001      	movs	r0, #1
 8008452:	f000 fe5f 	bl	8009114 <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 8008456:	4a0e      	ldr	r2, [pc, #56]	@ (8008490 <ssidConfirmation+0x98>)
 8008458:	2101      	movs	r1, #1
 800845a:	2002      	movs	r0, #2
 800845c:	f000 fe5a 	bl	8009114 <lcd_print>
        HAL_Delay(1250);
 8008460:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8008464:	f001 fbb0 	bl	8009bc8 <HAL_Delay>

        return 0;
 8008468:	2300      	movs	r3, #0
 800846a:	e003      	b.n	8008474 <ssidConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 800846c:	2001      	movs	r0, #1
 800846e:	f7f8 f919 	bl	80006a4 <saveEEPROM>

    	return 1;
 8008472:	2301      	movs	r3, #1
    }
}
 8008474:	4618      	mov	r0, r3
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}
 800847c:	0800f3e0 	.word	0x0800f3e0
 8008480:	20001900 	.word	0x20001900
 8008484:	40010800 	.word	0x40010800
 8008488:	20001070 	.word	0x20001070
 800848c:	20001810 	.word	0x20001810
 8008490:	20001824 	.word	0x20001824

08008494 <takeWifiSSID>:

void takeWifiSSID() {
 8008494:	b580      	push	{r7, lr}
 8008496:	b086      	sub	sp, #24
 8008498:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 800849a:	2001      	movs	r0, #1
 800849c:	f000 fe98 	bl	80091d0 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 80084a0:	2210      	movs	r2, #16
 80084a2:	2100      	movs	r1, #0
 80084a4:	48a4      	ldr	r0, [pc, #656]	@ (8008738 <takeWifiSSID+0x2a4>)
 80084a6:	f005 fdf5 	bl	800e094 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80084aa:	2301      	movs	r3, #1
 80084ac:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80084ae:	2307      	movs	r3, #7
 80084b0:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80084b2:	2301      	movs	r3, #1
 80084b4:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80084b6:	2300      	movs	r3, #0
 80084b8:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80084ba:	4ba0      	ldr	r3, [pc, #640]	@ (800873c <takeWifiSSID+0x2a8>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 80084c0:	2101      	movs	r1, #1
 80084c2:	2002      	movs	r0, #2
 80084c4:	f7f8 ff32 	bl	800132c <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80084c8:	2108      	movs	r1, #8
 80084ca:	489d      	ldr	r0, [pc, #628]	@ (8008740 <takeWifiSSID+0x2ac>)
 80084cc:	f002 f9da 	bl	800a884 <HAL_GPIO_ReadPin>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d106      	bne.n	80084e4 <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 80084d6:	f7ff ff8f 	bl	80083f8 <ssidConfirmation>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f040 8126 	bne.w	800872e <takeWifiSSID+0x29a>
        		goto mainSSIDSection;
 80084e2:	e7da      	b.n	800849a <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80084e4:	2101      	movs	r1, #1
 80084e6:	4896      	ldr	r0, [pc, #600]	@ (8008740 <takeWifiSSID+0x2ac>)
 80084e8:	f002 f9cc 	bl	800a884 <HAL_GPIO_ReadPin>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d14d      	bne.n	800858e <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2b50      	cmp	r3, #80	@ 0x50
 80084f6:	dd01      	ble.n	80084fc <takeWifiSSID+0x68>
        		cursorPosition = 1;
 80084f8:	2301      	movs	r3, #1
 80084fa:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2b10      	cmp	r3, #16
 8008500:	d13f      	bne.n	8008582 <takeWifiSSID+0xee>
            	if(page == 1) {
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d109      	bne.n	800851c <takeWifiSSID+0x88>
            		cursorPosition = 1;
 8008508:	2301      	movs	r3, #1
 800850a:	60fb      	str	r3, [r7, #12]
            		page++;
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	3301      	adds	r3, #1
 8008510:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8008512:	2102      	movs	r1, #2
 8008514:	2002      	movs	r0, #2
 8008516:	f7f8 ff09 	bl	800132c <printTemplate>
 800851a:	e035      	b.n	8008588 <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	2b02      	cmp	r3, #2
 8008520:	d109      	bne.n	8008536 <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 8008522:	2301      	movs	r3, #1
 8008524:	60fb      	str	r3, [r7, #12]
            		page++;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	3301      	adds	r3, #1
 800852a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 800852c:	2103      	movs	r1, #3
 800852e:	2002      	movs	r0, #2
 8008530:	f7f8 fefc 	bl	800132c <printTemplate>
 8008534:	e028      	b.n	8008588 <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2b03      	cmp	r3, #3
 800853a:	d109      	bne.n	8008550 <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 800853c:	2301      	movs	r3, #1
 800853e:	60fb      	str	r3, [r7, #12]
            		page++;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	3301      	adds	r3, #1
 8008544:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8008546:	2104      	movs	r1, #4
 8008548:	2002      	movs	r0, #2
 800854a:	f7f8 feef 	bl	800132c <printTemplate>
 800854e:	e01b      	b.n	8008588 <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	2b04      	cmp	r3, #4
 8008554:	d109      	bne.n	800856a <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 8008556:	2301      	movs	r3, #1
 8008558:	60fb      	str	r3, [r7, #12]
            		page++;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	3301      	adds	r3, #1
 800855e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8008560:	2105      	movs	r1, #5
 8008562:	2002      	movs	r0, #2
 8008564:	f7f8 fee2 	bl	800132c <printTemplate>
 8008568:	e00e      	b.n	8008588 <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	2b05      	cmp	r3, #5
 800856e:	d10b      	bne.n	8008588 <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 8008570:	2301      	movs	r3, #1
 8008572:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008574:	2301      	movs	r3, #1
 8008576:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8008578:	2101      	movs	r1, #1
 800857a:	2002      	movs	r0, #2
 800857c:	f7f8 fed6 	bl	800132c <printTemplate>
 8008580:	e002      	b.n	8008588 <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	3301      	adds	r3, #1
 8008586:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008588:	2096      	movs	r0, #150	@ 0x96
 800858a:	f001 fb1d 	bl	8009bc8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800858e:	2108      	movs	r1, #8
 8008590:	486c      	ldr	r0, [pc, #432]	@ (8008744 <takeWifiSSID+0x2b0>)
 8008592:	f002 f977 	bl	800a884 <HAL_GPIO_ReadPin>
 8008596:	4603      	mov	r3, r0
 8008598:	2b01      	cmp	r3, #1
 800859a:	d149      	bne.n	8008630 <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	dc01      	bgt.n	80085a6 <takeWifiSSID+0x112>
        		cursorPosition = 80;
 80085a2:	2350      	movs	r3, #80	@ 0x50
 80085a4:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d13b      	bne.n	8008624 <takeWifiSSID+0x190>
            	if(page == 1) {
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d108      	bne.n	80085c4 <takeWifiSSID+0x130>
            		cursorPosition = 16;
 80085b2:	2310      	movs	r3, #16
 80085b4:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80085b6:	2305      	movs	r3, #5
 80085b8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80085ba:	2105      	movs	r1, #5
 80085bc:	2002      	movs	r0, #2
 80085be:	f7f8 feb5 	bl	800132c <printTemplate>
 80085c2:	e032      	b.n	800862a <takeWifiSSID+0x196>
            	} else if(page == 2) {
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	d108      	bne.n	80085dc <takeWifiSSID+0x148>
            		cursorPosition = 16;
 80085ca:	2310      	movs	r3, #16
 80085cc:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80085ce:	2301      	movs	r3, #1
 80085d0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80085d2:	2101      	movs	r1, #1
 80085d4:	2002      	movs	r0, #2
 80085d6:	f7f8 fea9 	bl	800132c <printTemplate>
 80085da:	e026      	b.n	800862a <takeWifiSSID+0x196>
            	} else if(page == 3) {
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	2b03      	cmp	r3, #3
 80085e0:	d108      	bne.n	80085f4 <takeWifiSSID+0x160>
            		cursorPosition = 16;
 80085e2:	2310      	movs	r3, #16
 80085e4:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80085e6:	2302      	movs	r3, #2
 80085e8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80085ea:	2102      	movs	r1, #2
 80085ec:	2002      	movs	r0, #2
 80085ee:	f7f8 fe9d 	bl	800132c <printTemplate>
 80085f2:	e01a      	b.n	800862a <takeWifiSSID+0x196>
            	} else if(page == 4) {
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	2b04      	cmp	r3, #4
 80085f8:	d108      	bne.n	800860c <takeWifiSSID+0x178>
            		cursorPosition = 16;
 80085fa:	2310      	movs	r3, #16
 80085fc:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80085fe:	2303      	movs	r3, #3
 8008600:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8008602:	2103      	movs	r1, #3
 8008604:	2002      	movs	r0, #2
 8008606:	f7f8 fe91 	bl	800132c <printTemplate>
 800860a:	e00e      	b.n	800862a <takeWifiSSID+0x196>
            	} else if(page == 5) {
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	2b05      	cmp	r3, #5
 8008610:	d10b      	bne.n	800862a <takeWifiSSID+0x196>
            		cursorPosition = 16;
 8008612:	2310      	movs	r3, #16
 8008614:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8008616:	2304      	movs	r3, #4
 8008618:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800861a:	2104      	movs	r1, #4
 800861c:	2002      	movs	r0, #2
 800861e:	f7f8 fe85 	bl	800132c <printTemplate>
 8008622:	e002      	b.n	800862a <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	3b01      	subs	r3, #1
 8008628:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800862a:	2096      	movs	r0, #150	@ 0x96
 800862c:	f001 facc 	bl	8009bc8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008630:	2102      	movs	r1, #2
 8008632:	4843      	ldr	r0, [pc, #268]	@ (8008740 <takeWifiSSID+0x2ac>)
 8008634:	f002 f926 	bl	800a884 <HAL_GPIO_ReadPin>
 8008638:	4603      	mov	r3, r0
 800863a:	2b01      	cmp	r3, #1
 800863c:	d12f      	bne.n	800869e <takeWifiSSID+0x20a>
            eepromData[eepromVal] = cursorPosition;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	b2d9      	uxtb	r1, r3
 8008642:	4a41      	ldr	r2, [pc, #260]	@ (8008748 <takeWifiSSID+0x2b4>)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4413      	add	r3, r2
 8008648:	460a      	mov	r2, r1
 800864a:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 800864c:	4a3f      	ldr	r2, [pc, #252]	@ (800874c <takeWifiSSID+0x2b8>)
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	4413      	add	r3, r2
 8008652:	7819      	ldrb	r1, [r3, #0]
 8008654:	4a38      	ldr	r2, [pc, #224]	@ (8008738 <takeWifiSSID+0x2a4>)
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	4413      	add	r3, r2
 800865a:	460a      	mov	r2, r1
 800865c:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	b2d9      	uxtb	r1, r3
 8008662:	4a3a      	ldr	r2, [pc, #232]	@ (800874c <takeWifiSSID+0x2b8>)
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	4413      	add	r3, r2
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	461a      	mov	r2, r3
 800866c:	2001      	movs	r0, #1
 800866e:	f000 fd66 	bl	800913e <lcd_print_char>

            writeLoc++;
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	3301      	adds	r3, #1
 8008676:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	3301      	adds	r3, #1
 800867c:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	3301      	adds	r3, #1
 8008682:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8008684:	4a30      	ldr	r2, [pc, #192]	@ (8008748 <takeWifiSSID+0x2b4>)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4413      	add	r3, r2
 800868a:	2200      	movs	r2, #0
 800868c:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 800868e:	4a2a      	ldr	r2, [pc, #168]	@ (8008738 <takeWifiSSID+0x2a4>)
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	4413      	add	r3, r2
 8008694:	2200      	movs	r2, #0
 8008696:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8008698:	2096      	movs	r0, #150	@ 0x96
 800869a:	f001 fa95 	bl	8009bc8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800869e:	2104      	movs	r1, #4
 80086a0:	4827      	ldr	r0, [pc, #156]	@ (8008740 <takeWifiSSID+0x2ac>)
 80086a2:	f002 f8ef 	bl	800a884 <HAL_GPIO_ReadPin>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b01      	cmp	r3, #1
 80086aa:	d139      	bne.n	8008720 <takeWifiSSID+0x28c>
        	if(strlen(wifiSSID) >= 1) {
 80086ac:	4b22      	ldr	r3, [pc, #136]	@ (8008738 <takeWifiSSID+0x2a4>)
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d032      	beq.n	800871a <takeWifiSSID+0x286>
        		eepromData[eepromVal] = '\0';
 80086b4:	4a24      	ldr	r2, [pc, #144]	@ (8008748 <takeWifiSSID+0x2b4>)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4413      	add	r3, r2
 80086ba:	2200      	movs	r2, #0
 80086bc:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 80086be:	4a1e      	ldr	r2, [pc, #120]	@ (8008738 <takeWifiSSID+0x2a4>)
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	4413      	add	r3, r2
 80086c4:	2200      	movs	r2, #0
 80086c6:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	2b07      	cmp	r3, #7
 80086cc:	dd03      	ble.n	80086d6 <takeWifiSSID+0x242>
        			writeLoc--;
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	3b01      	subs	r3, #1
 80086d2:	613b      	str	r3, [r7, #16]
 80086d4:	e004      	b.n	80086e0 <takeWifiSSID+0x24c>
        		} else if(writeLoc < 7) {
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	2b06      	cmp	r3, #6
 80086da:	dc01      	bgt.n	80086e0 <takeWifiSSID+0x24c>
        			writeLoc = 7;
 80086dc:	2307      	movs	r3, #7
 80086de:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	dd06      	ble.n	80086f4 <takeWifiSSID+0x260>
        			arrayPosition--;
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	3b01      	subs	r3, #1
 80086ea:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	3b01      	subs	r3, #1
 80086f0:	607b      	str	r3, [r7, #4]
 80086f2:	e007      	b.n	8008704 <takeWifiSSID+0x270>
        		} else if(arrayPosition < 0) {
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	da04      	bge.n	8008704 <takeWifiSSID+0x270>
        			arrayPosition = 0;
 80086fa:	2300      	movs	r3, #0
 80086fc:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 80086fe:	4b0f      	ldr	r3, [pc, #60]	@ (800873c <takeWifiSSID+0x2a8>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	b2db      	uxtb	r3, r3
 8008708:	3307      	adds	r3, #7
 800870a:	b2db      	uxtb	r3, r3
 800870c:	4619      	mov	r1, r3
 800870e:	2001      	movs	r0, #1
 8008710:	f000 fd36 	bl	8009180 <lcd_delete_char>
        		HAL_Delay(50);
 8008714:	2032      	movs	r0, #50	@ 0x32
 8008716:	f001 fa57 	bl	8009bc8 <HAL_Delay>
        	}

        	HAL_Delay(150);
 800871a:	2096      	movs	r0, #150	@ 0x96
 800871c:	f001 fa54 	bl	8009bc8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	b2db      	uxtb	r3, r3
 8008724:	4619      	mov	r1, r3
 8008726:	2002      	movs	r0, #2
 8008728:	f000 fcd5 	bl	80090d6 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800872c:	e6cc      	b.n	80084c8 <takeWifiSSID+0x34>
        		break;
 800872e:	bf00      	nop
    }
}
 8008730:	bf00      	nop
 8008732:	3718      	adds	r7, #24
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}
 8008738:	20001070 	.word	0x20001070
 800873c:	20000004 	.word	0x20000004
 8008740:	40010800 	.word	0x40010800
 8008744:	40011000 	.word	0x40011000
 8008748:	20000fec 	.word	0x20000fec
 800874c:	20000018 	.word	0x20000018

08008750 <passConfirmation>:

uint8_t passConfirmation() {
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
	int loopVal = 1;
 8008756:	2301      	movs	r3, #1
 8008758:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 800875a:	4a1e      	ldr	r2, [pc, #120]	@ (80087d4 <passConfirmation+0x84>)
 800875c:	2101      	movs	r1, #1
 800875e:	2001      	movs	r0, #1
 8008760:	f000 fcd8 	bl	8009114 <lcd_print>

	while(loopVal == 1) {
 8008764:	e012      	b.n	800878c <passConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 8008766:	4a1c      	ldr	r2, [pc, #112]	@ (80087d8 <passConfirmation+0x88>)
 8008768:	2101      	movs	r1, #1
 800876a:	2002      	movs	r0, #2
 800876c:	f000 fcd2 	bl	8009114 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008770:	2102      	movs	r1, #2
 8008772:	481a      	ldr	r0, [pc, #104]	@ (80087dc <passConfirmation+0x8c>)
 8008774:	f002 f886 	bl	800a884 <HAL_GPIO_ReadPin>
 8008778:	4603      	mov	r3, r0
 800877a:	2b01      	cmp	r3, #1
 800877c:	d101      	bne.n	8008782 <passConfirmation+0x32>
			loopVal = 0;
 800877e:	2300      	movs	r3, #0
 8008780:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiPass);
 8008782:	4a17      	ldr	r2, [pc, #92]	@ (80087e0 <passConfirmation+0x90>)
 8008784:	2101      	movs	r1, #1
 8008786:	2001      	movs	r0, #1
 8008788:	f000 fcc4 	bl	8009114 <lcd_print>
	while(loopVal == 1) {
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b01      	cmp	r3, #1
 8008790:	d0e9      	beq.n	8008766 <passConfirmation+0x16>
	}

    lcd_cursor(0);
 8008792:	2000      	movs	r0, #0
 8008794:	f000 fd1c 	bl	80091d0 <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 8008798:	4811      	ldr	r0, [pc, #68]	@ (80087e0 <passConfirmation+0x90>)
 800879a:	f7f7 fd43 	bl	8000224 <strlen>
 800879e:	4603      	mov	r3, r0
 80087a0:	2b14      	cmp	r3, #20
 80087a2:	d90f      	bls.n	80087c4 <passConfirmation+0x74>
    	lcd_print(1, 1, passExceedErrorText);
 80087a4:	4a0f      	ldr	r2, [pc, #60]	@ (80087e4 <passConfirmation+0x94>)
 80087a6:	2101      	movs	r1, #1
 80087a8:	2001      	movs	r0, #1
 80087aa:	f000 fcb3 	bl	8009114 <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 80087ae:	4a0e      	ldr	r2, [pc, #56]	@ (80087e8 <passConfirmation+0x98>)
 80087b0:	2101      	movs	r1, #1
 80087b2:	2002      	movs	r0, #2
 80087b4:	f000 fcae 	bl	8009114 <lcd_print>
        HAL_Delay(1250);
 80087b8:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80087bc:	f001 fa04 	bl	8009bc8 <HAL_Delay>

        return 0;
 80087c0:	2300      	movs	r3, #0
 80087c2:	e003      	b.n	80087cc <passConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 80087c4:	2001      	movs	r0, #1
 80087c6:	f7f7 ff6d 	bl	80006a4 <saveEEPROM>

    	return 1;
 80087ca:	2301      	movs	r3, #1
    }
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3708      	adds	r7, #8
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	0800f3e0 	.word	0x0800f3e0
 80087d8:	20001900 	.word	0x20001900
 80087dc:	40010800 	.word	0x40010800
 80087e0:	20001080 	.word	0x20001080
 80087e4:	20001838 	.word	0x20001838
 80087e8:	2000184c 	.word	0x2000184c

080087ec <takeWifiPass>:

void takeWifiPass() {
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 80087f2:	2001      	movs	r0, #1
 80087f4:	f000 fcec 	bl	80091d0 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 80087f8:	2210      	movs	r2, #16
 80087fa:	2100      	movs	r1, #0
 80087fc:	48a4      	ldr	r0, [pc, #656]	@ (8008a90 <takeWifiPass+0x2a4>)
 80087fe:	f005 fc49 	bl	800e094 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8008802:	2301      	movs	r3, #1
 8008804:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8008806:	2307      	movs	r3, #7
 8008808:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 800880a:	2301      	movs	r3, #1
 800880c:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 800880e:	2300      	movs	r3, #0
 8008810:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8008812:	4ba0      	ldr	r3, [pc, #640]	@ (8008a94 <takeWifiPass+0x2a8>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8008818:	2101      	movs	r1, #1
 800881a:	2003      	movs	r0, #3
 800881c:	f7f8 fd86 	bl	800132c <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008820:	2108      	movs	r1, #8
 8008822:	489d      	ldr	r0, [pc, #628]	@ (8008a98 <takeWifiPass+0x2ac>)
 8008824:	f002 f82e 	bl	800a884 <HAL_GPIO_ReadPin>
 8008828:	4603      	mov	r3, r0
 800882a:	2b01      	cmp	r3, #1
 800882c:	d106      	bne.n	800883c <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 800882e:	f7ff ff8f 	bl	8008750 <passConfirmation>
 8008832:	4603      	mov	r3, r0
 8008834:	2b00      	cmp	r3, #0
 8008836:	f040 8126 	bne.w	8008a86 <takeWifiPass+0x29a>
    	        goto mainPassSection;
 800883a:	e7da      	b.n	80087f2 <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800883c:	2101      	movs	r1, #1
 800883e:	4896      	ldr	r0, [pc, #600]	@ (8008a98 <takeWifiPass+0x2ac>)
 8008840:	f002 f820 	bl	800a884 <HAL_GPIO_ReadPin>
 8008844:	4603      	mov	r3, r0
 8008846:	2b01      	cmp	r3, #1
 8008848:	d14d      	bne.n	80088e6 <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	2b50      	cmp	r3, #80	@ 0x50
 800884e:	dd01      	ble.n	8008854 <takeWifiPass+0x68>
        		cursorPosition = 1;
 8008850:	2301      	movs	r3, #1
 8008852:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2b10      	cmp	r3, #16
 8008858:	d13f      	bne.n	80088da <takeWifiPass+0xee>
            	if(page == 1) {
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	2b01      	cmp	r3, #1
 800885e:	d109      	bne.n	8008874 <takeWifiPass+0x88>
            		cursorPosition = 1;
 8008860:	2301      	movs	r3, #1
 8008862:	60fb      	str	r3, [r7, #12]
            		page++;
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	3301      	adds	r3, #1
 8008868:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 800886a:	2102      	movs	r1, #2
 800886c:	2003      	movs	r0, #3
 800886e:	f7f8 fd5d 	bl	800132c <printTemplate>
 8008872:	e035      	b.n	80088e0 <takeWifiPass+0xf4>
            	} else if(page == 2) {
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	2b02      	cmp	r3, #2
 8008878:	d109      	bne.n	800888e <takeWifiPass+0xa2>
            		cursorPosition = 1;
 800887a:	2301      	movs	r3, #1
 800887c:	60fb      	str	r3, [r7, #12]
            		page++;
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	3301      	adds	r3, #1
 8008882:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8008884:	2103      	movs	r1, #3
 8008886:	2003      	movs	r0, #3
 8008888:	f7f8 fd50 	bl	800132c <printTemplate>
 800888c:	e028      	b.n	80088e0 <takeWifiPass+0xf4>
            	} else if(page == 3) {
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	2b03      	cmp	r3, #3
 8008892:	d109      	bne.n	80088a8 <takeWifiPass+0xbc>
            		cursorPosition = 1;
 8008894:	2301      	movs	r3, #1
 8008896:	60fb      	str	r3, [r7, #12]
            		page++;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	3301      	adds	r3, #1
 800889c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 800889e:	2104      	movs	r1, #4
 80088a0:	2003      	movs	r0, #3
 80088a2:	f7f8 fd43 	bl	800132c <printTemplate>
 80088a6:	e01b      	b.n	80088e0 <takeWifiPass+0xf4>
            	} else if(page == 4) {
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	2b04      	cmp	r3, #4
 80088ac:	d109      	bne.n	80088c2 <takeWifiPass+0xd6>
            		cursorPosition = 1;
 80088ae:	2301      	movs	r3, #1
 80088b0:	60fb      	str	r3, [r7, #12]
            		page++;
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	3301      	adds	r3, #1
 80088b6:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80088b8:	2105      	movs	r1, #5
 80088ba:	2003      	movs	r0, #3
 80088bc:	f7f8 fd36 	bl	800132c <printTemplate>
 80088c0:	e00e      	b.n	80088e0 <takeWifiPass+0xf4>
            	} else if(page == 5) {
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	2b05      	cmp	r3, #5
 80088c6:	d10b      	bne.n	80088e0 <takeWifiPass+0xf4>
            		cursorPosition = 1;
 80088c8:	2301      	movs	r3, #1
 80088ca:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80088cc:	2301      	movs	r3, #1
 80088ce:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80088d0:	2101      	movs	r1, #1
 80088d2:	2003      	movs	r0, #3
 80088d4:	f7f8 fd2a 	bl	800132c <printTemplate>
 80088d8:	e002      	b.n	80088e0 <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	3301      	adds	r3, #1
 80088de:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80088e0:	2096      	movs	r0, #150	@ 0x96
 80088e2:	f001 f971 	bl	8009bc8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80088e6:	2108      	movs	r1, #8
 80088e8:	486c      	ldr	r0, [pc, #432]	@ (8008a9c <takeWifiPass+0x2b0>)
 80088ea:	f001 ffcb 	bl	800a884 <HAL_GPIO_ReadPin>
 80088ee:	4603      	mov	r3, r0
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d149      	bne.n	8008988 <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	dc01      	bgt.n	80088fe <takeWifiPass+0x112>
        		cursorPosition = 80;
 80088fa:	2350      	movs	r3, #80	@ 0x50
 80088fc:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2b01      	cmp	r3, #1
 8008902:	d13b      	bne.n	800897c <takeWifiPass+0x190>
            	if(page == 1) {
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d108      	bne.n	800891c <takeWifiPass+0x130>
            		cursorPosition = 16;
 800890a:	2310      	movs	r3, #16
 800890c:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800890e:	2305      	movs	r3, #5
 8008910:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8008912:	2105      	movs	r1, #5
 8008914:	2003      	movs	r0, #3
 8008916:	f7f8 fd09 	bl	800132c <printTemplate>
 800891a:	e032      	b.n	8008982 <takeWifiPass+0x196>
            	} else if(page == 2) {
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	2b02      	cmp	r3, #2
 8008920:	d108      	bne.n	8008934 <takeWifiPass+0x148>
            		cursorPosition = 16;
 8008922:	2310      	movs	r3, #16
 8008924:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008926:	2301      	movs	r3, #1
 8008928:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800892a:	2101      	movs	r1, #1
 800892c:	2003      	movs	r0, #3
 800892e:	f7f8 fcfd 	bl	800132c <printTemplate>
 8008932:	e026      	b.n	8008982 <takeWifiPass+0x196>
            	} else if(page == 3) {
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	2b03      	cmp	r3, #3
 8008938:	d108      	bne.n	800894c <takeWifiPass+0x160>
            		cursorPosition = 16;
 800893a:	2310      	movs	r3, #16
 800893c:	60fb      	str	r3, [r7, #12]
            		page = 2;
 800893e:	2302      	movs	r3, #2
 8008940:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8008942:	2102      	movs	r1, #2
 8008944:	2003      	movs	r0, #3
 8008946:	f7f8 fcf1 	bl	800132c <printTemplate>
 800894a:	e01a      	b.n	8008982 <takeWifiPass+0x196>
            	} else if(page == 4) {
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	2b04      	cmp	r3, #4
 8008950:	d108      	bne.n	8008964 <takeWifiPass+0x178>
            		cursorPosition = 16;
 8008952:	2310      	movs	r3, #16
 8008954:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8008956:	2303      	movs	r3, #3
 8008958:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 800895a:	2103      	movs	r1, #3
 800895c:	2003      	movs	r0, #3
 800895e:	f7f8 fce5 	bl	800132c <printTemplate>
 8008962:	e00e      	b.n	8008982 <takeWifiPass+0x196>
            	} else if(page == 5) {
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	2b05      	cmp	r3, #5
 8008968:	d10b      	bne.n	8008982 <takeWifiPass+0x196>
            		cursorPosition = 16;
 800896a:	2310      	movs	r3, #16
 800896c:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800896e:	2304      	movs	r3, #4
 8008970:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8008972:	2104      	movs	r1, #4
 8008974:	2003      	movs	r0, #3
 8008976:	f7f8 fcd9 	bl	800132c <printTemplate>
 800897a:	e002      	b.n	8008982 <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	3b01      	subs	r3, #1
 8008980:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008982:	2096      	movs	r0, #150	@ 0x96
 8008984:	f001 f920 	bl	8009bc8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008988:	2102      	movs	r1, #2
 800898a:	4843      	ldr	r0, [pc, #268]	@ (8008a98 <takeWifiPass+0x2ac>)
 800898c:	f001 ff7a 	bl	800a884 <HAL_GPIO_ReadPin>
 8008990:	4603      	mov	r3, r0
 8008992:	2b01      	cmp	r3, #1
 8008994:	d12f      	bne.n	80089f6 <takeWifiPass+0x20a>
            eepromData[eepromVal] = cursorPosition;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	b2d9      	uxtb	r1, r3
 800899a:	4a41      	ldr	r2, [pc, #260]	@ (8008aa0 <takeWifiPass+0x2b4>)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4413      	add	r3, r2
 80089a0:	460a      	mov	r2, r1
 80089a2:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 80089a4:	4a3f      	ldr	r2, [pc, #252]	@ (8008aa4 <takeWifiPass+0x2b8>)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	4413      	add	r3, r2
 80089aa:	7819      	ldrb	r1, [r3, #0]
 80089ac:	4a38      	ldr	r2, [pc, #224]	@ (8008a90 <takeWifiPass+0x2a4>)
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	4413      	add	r3, r2
 80089b2:	460a      	mov	r2, r1
 80089b4:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	b2d9      	uxtb	r1, r3
 80089ba:	4a3a      	ldr	r2, [pc, #232]	@ (8008aa4 <takeWifiPass+0x2b8>)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	4413      	add	r3, r2
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	461a      	mov	r2, r3
 80089c4:	2001      	movs	r0, #1
 80089c6:	f000 fbba 	bl	800913e <lcd_print_char>

            writeLoc++;
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	3301      	adds	r3, #1
 80089ce:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	3301      	adds	r3, #1
 80089d4:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	3301      	adds	r3, #1
 80089da:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 80089dc:	4a30      	ldr	r2, [pc, #192]	@ (8008aa0 <takeWifiPass+0x2b4>)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	4413      	add	r3, r2
 80089e2:	2200      	movs	r2, #0
 80089e4:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 80089e6:	4a2a      	ldr	r2, [pc, #168]	@ (8008a90 <takeWifiPass+0x2a4>)
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	4413      	add	r3, r2
 80089ec:	2200      	movs	r2, #0
 80089ee:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80089f0:	2096      	movs	r0, #150	@ 0x96
 80089f2:	f001 f8e9 	bl	8009bc8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80089f6:	2104      	movs	r1, #4
 80089f8:	4827      	ldr	r0, [pc, #156]	@ (8008a98 <takeWifiPass+0x2ac>)
 80089fa:	f001 ff43 	bl	800a884 <HAL_GPIO_ReadPin>
 80089fe:	4603      	mov	r3, r0
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d139      	bne.n	8008a78 <takeWifiPass+0x28c>
        	if(strlen(wifiPass) >= 1) {
 8008a04:	4b22      	ldr	r3, [pc, #136]	@ (8008a90 <takeWifiPass+0x2a4>)
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d032      	beq.n	8008a72 <takeWifiPass+0x286>
        		eepromData[eepromVal] = '\0';
 8008a0c:	4a24      	ldr	r2, [pc, #144]	@ (8008aa0 <takeWifiPass+0x2b4>)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4413      	add	r3, r2
 8008a12:	2200      	movs	r2, #0
 8008a14:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 8008a16:	4a1e      	ldr	r2, [pc, #120]	@ (8008a90 <takeWifiPass+0x2a4>)
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	2b07      	cmp	r3, #7
 8008a24:	dd03      	ble.n	8008a2e <takeWifiPass+0x242>
        			writeLoc--;
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	613b      	str	r3, [r7, #16]
 8008a2c:	e004      	b.n	8008a38 <takeWifiPass+0x24c>
        		} else if(writeLoc < 7) {
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	2b06      	cmp	r3, #6
 8008a32:	dc01      	bgt.n	8008a38 <takeWifiPass+0x24c>
        			writeLoc = 7;
 8008a34:	2307      	movs	r3, #7
 8008a36:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	dd06      	ble.n	8008a4c <takeWifiPass+0x260>
        			arrayPosition--;
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	3b01      	subs	r3, #1
 8008a42:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	3b01      	subs	r3, #1
 8008a48:	607b      	str	r3, [r7, #4]
 8008a4a:	e007      	b.n	8008a5c <takeWifiPass+0x270>
        		} else if(arrayPosition < 0) {
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	da04      	bge.n	8008a5c <takeWifiPass+0x270>
        			arrayPosition = 0;
 8008a52:	2300      	movs	r3, #0
 8008a54:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 8008a56:	4b0f      	ldr	r3, [pc, #60]	@ (8008a94 <takeWifiPass+0x2a8>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	3307      	adds	r3, #7
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	4619      	mov	r1, r3
 8008a66:	2001      	movs	r0, #1
 8008a68:	f000 fb8a 	bl	8009180 <lcd_delete_char>
        		HAL_Delay(50);
 8008a6c:	2032      	movs	r0, #50	@ 0x32
 8008a6e:	f001 f8ab 	bl	8009bc8 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8008a72:	2096      	movs	r0, #150	@ 0x96
 8008a74:	f001 f8a8 	bl	8009bc8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	2002      	movs	r0, #2
 8008a80:	f000 fb29 	bl	80090d6 <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008a84:	e6cc      	b.n	8008820 <takeWifiPass+0x34>
    	        break;
 8008a86:	bf00      	nop
    }
}
 8008a88:	bf00      	nop
 8008a8a:	3718      	adds	r7, #24
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	20001080 	.word	0x20001080
 8008a94:	20000008 	.word	0x20000008
 8008a98:	40010800 	.word	0x40010800
 8008a9c:	40011000 	.word	0x40011000
 8008aa0:	20000fec 	.word	0x20000fec
 8008aa4:	20000018 	.word	0x20000018

08008aa8 <mergeData>:

char* mergeData() {
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b09c      	sub	sp, #112	@ 0x70
 8008aac:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8008aae:	2300      	movs	r3, #0
 8008ab0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008ab2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8008ab6:	2229      	movs	r2, #41	@ 0x29
 8008ab8:	2100      	movs	r1, #0
 8008aba:	4618      	mov	r0, r3
 8008abc:	f005 faea 	bl	800e094 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8008ac0:	4b5f      	ldr	r3, [pc, #380]	@ (8008c40 <mergeData+0x198>)
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	703b      	strb	r3, [r7, #0]
 8008ac6:	4b5f      	ldr	r3, [pc, #380]	@ (8008c44 <mergeData+0x19c>)
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	707b      	strb	r3, [r7, #1]
 8008acc:	4b5e      	ldr	r3, [pc, #376]	@ (8008c48 <mergeData+0x1a0>)
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	70bb      	strb	r3, [r7, #2]
 8008ad2:	4b5e      	ldr	r3, [pc, #376]	@ (8008c4c <mergeData+0x1a4>)
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	70fb      	strb	r3, [r7, #3]
 8008ad8:	4b5d      	ldr	r3, [pc, #372]	@ (8008c50 <mergeData+0x1a8>)
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	713b      	strb	r3, [r7, #4]
 8008ade:	4b5d      	ldr	r3, [pc, #372]	@ (8008c54 <mergeData+0x1ac>)
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	717b      	strb	r3, [r7, #5]
 8008ae4:	4b5c      	ldr	r3, [pc, #368]	@ (8008c58 <mergeData+0x1b0>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	71bb      	strb	r3, [r7, #6]
 8008aea:	4b5c      	ldr	r3, [pc, #368]	@ (8008c5c <mergeData+0x1b4>)
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	71fb      	strb	r3, [r7, #7]
 8008af0:	4b5b      	ldr	r3, [pc, #364]	@ (8008c60 <mergeData+0x1b8>)
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	723b      	strb	r3, [r7, #8]
 8008af6:	4b5b      	ldr	r3, [pc, #364]	@ (8008c64 <mergeData+0x1bc>)
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	727b      	strb	r3, [r7, #9]
 8008afc:	4b5a      	ldr	r3, [pc, #360]	@ (8008c68 <mergeData+0x1c0>)
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	72bb      	strb	r3, [r7, #10]
 8008b02:	4b5a      	ldr	r3, [pc, #360]	@ (8008c6c <mergeData+0x1c4>)
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	72fb      	strb	r3, [r7, #11]
 8008b08:	4b59      	ldr	r3, [pc, #356]	@ (8008c70 <mergeData+0x1c8>)
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	733b      	strb	r3, [r7, #12]
 8008b0e:	4b59      	ldr	r3, [pc, #356]	@ (8008c74 <mergeData+0x1cc>)
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	737b      	strb	r3, [r7, #13]
 8008b14:	4b58      	ldr	r3, [pc, #352]	@ (8008c78 <mergeData+0x1d0>)
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	73bb      	strb	r3, [r7, #14]
 8008b1a:	4b58      	ldr	r3, [pc, #352]	@ (8008c7c <mergeData+0x1d4>)
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	73fb      	strb	r3, [r7, #15]
 8008b20:	4b57      	ldr	r3, [pc, #348]	@ (8008c80 <mergeData+0x1d8>)
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	743b      	strb	r3, [r7, #16]
 8008b26:	4b57      	ldr	r3, [pc, #348]	@ (8008c84 <mergeData+0x1dc>)
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	747b      	strb	r3, [r7, #17]
 8008b2c:	4b56      	ldr	r3, [pc, #344]	@ (8008c88 <mergeData+0x1e0>)
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	74bb      	strb	r3, [r7, #18]
 8008b32:	4b56      	ldr	r3, [pc, #344]	@ (8008c8c <mergeData+0x1e4>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	74fb      	strb	r3, [r7, #19]
 8008b38:	4b55      	ldr	r3, [pc, #340]	@ (8008c90 <mergeData+0x1e8>)
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	753b      	strb	r3, [r7, #20]
 8008b3e:	4b55      	ldr	r3, [pc, #340]	@ (8008c94 <mergeData+0x1ec>)
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	757b      	strb	r3, [r7, #21]
 8008b44:	4b54      	ldr	r3, [pc, #336]	@ (8008c98 <mergeData+0x1f0>)
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	75bb      	strb	r3, [r7, #22]
 8008b4a:	4b54      	ldr	r3, [pc, #336]	@ (8008c9c <mergeData+0x1f4>)
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	75fb      	strb	r3, [r7, #23]
 8008b50:	4b53      	ldr	r3, [pc, #332]	@ (8008ca0 <mergeData+0x1f8>)
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	763b      	strb	r3, [r7, #24]
 8008b56:	4b53      	ldr	r3, [pc, #332]	@ (8008ca4 <mergeData+0x1fc>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	767b      	strb	r3, [r7, #25]
 8008b5c:	4b52      	ldr	r3, [pc, #328]	@ (8008ca8 <mergeData+0x200>)
 8008b5e:	781b      	ldrb	r3, [r3, #0]
 8008b60:	76bb      	strb	r3, [r7, #26]
 8008b62:	4b52      	ldr	r3, [pc, #328]	@ (8008cac <mergeData+0x204>)
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	76fb      	strb	r3, [r7, #27]
 8008b68:	4b51      	ldr	r3, [pc, #324]	@ (8008cb0 <mergeData+0x208>)
 8008b6a:	781b      	ldrb	r3, [r3, #0]
 8008b6c:	773b      	strb	r3, [r7, #28]
 8008b6e:	4b51      	ldr	r3, [pc, #324]	@ (8008cb4 <mergeData+0x20c>)
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	777b      	strb	r3, [r7, #29]
			buzzer,
			demoMode,
			calismaSayisi,
			calismaSayisiDemo,
			dilSecim,
			eepromData[38],
 8008b74:	4b50      	ldr	r3, [pc, #320]	@ (8008cb8 <mergeData+0x210>)
 8008b76:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	uint8_t uintVariables[] = {
 8008b7a:	77bb      	strb	r3, [r7, #30]
			eepromData[39],
 8008b7c:	4b4e      	ldr	r3, [pc, #312]	@ (8008cb8 <mergeData+0x210>)
 8008b7e:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	uint8_t uintVariables[] = {
 8008b82:	77fb      	strb	r3, [r7, #31]
			eepromData[40],
 8008b84:	4b4c      	ldr	r3, [pc, #304]	@ (8008cb8 <mergeData+0x210>)
 8008b86:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	uint8_t uintVariables[] = {
 8008b8a:	f887 3020 	strb.w	r3, [r7, #32]
			eepromData[41],
 8008b8e:	4b4a      	ldr	r3, [pc, #296]	@ (8008cb8 <mergeData+0x210>)
 8008b90:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	uint8_t uintVariables[] = {
 8008b94:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[42],
 8008b98:	4b47      	ldr	r3, [pc, #284]	@ (8008cb8 <mergeData+0x210>)
 8008b9a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	uint8_t uintVariables[] = {
 8008b9e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[43],
 8008ba2:	4b45      	ldr	r3, [pc, #276]	@ (8008cb8 <mergeData+0x210>)
 8008ba4:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	uint8_t uintVariables[] = {
 8008ba8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[44],
 8008bac:	4b42      	ldr	r3, [pc, #264]	@ (8008cb8 <mergeData+0x210>)
 8008bae:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	uint8_t uintVariables[] = {
 8008bb2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[45],
 8008bb6:	4b40      	ldr	r3, [pc, #256]	@ (8008cb8 <mergeData+0x210>)
 8008bb8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	uint8_t uintVariables[] = {
 8008bbc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[46],
 8008bc0:	4b3d      	ldr	r3, [pc, #244]	@ (8008cb8 <mergeData+0x210>)
 8008bc2:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	uint8_t uintVariables[] = {
 8008bc6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[47],
 8008bca:	4b3b      	ldr	r3, [pc, #236]	@ (8008cb8 <mergeData+0x210>)
 8008bcc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	uint8_t uintVariables[] = {
 8008bd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008bd4:	233c      	movs	r3, #60	@ 0x3c
 8008bd6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008bda:	2300      	movs	r3, #0
 8008bdc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008bde:	e015      	b.n	8008c0c <mergeData+0x164>
	    sprintf(temp, "%u", uintVariables[i]);
 8008be0:	463a      	mov	r2, r7
 8008be2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008be4:	4413      	add	r3, r2
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	461a      	mov	r2, r3
 8008bea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008bee:	4933      	ldr	r1, [pc, #204]	@ (8008cbc <mergeData+0x214>)
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f005 fa2f 	bl	800e054 <siprintf>
	    strcat(combinedString, temp);
 8008bf6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008bfa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008bfe:	4611      	mov	r1, r2
 8008c00:	4618      	mov	r0, r3
 8008c02:	f005 fa4f 	bl	800e0a4 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008c06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c08:	3301      	adds	r3, #1
 8008c0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008c0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c0e:	2b28      	cmp	r3, #40	@ 0x28
 8008c10:	d9e6      	bls.n	8008be0 <mergeData+0x138>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8008c12:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008c16:	4618      	mov	r0, r3
 8008c18:	f7f7 fb04 	bl	8000224 <strlen>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	3301      	adds	r3, #1
 8008c20:	4618      	mov	r0, r3
 8008c22:	f005 f91f 	bl	800de64 <malloc>
 8008c26:	4603      	mov	r3, r0
 8008c28:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 8008c2a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008c2e:	4619      	mov	r1, r3
 8008c30:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8008c32:	f005 faab 	bl	800e18c <strcpy>
	return result;
 8008c36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3770      	adds	r7, #112	@ 0x70
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	200010cb 	.word	0x200010cb
 8008c44:	200010bd 	.word	0x200010bd
 8008c48:	200010c0 	.word	0x200010c0
 8008c4c:	200010c1 	.word	0x200010c1
 8008c50:	200010c2 	.word	0x200010c2
 8008c54:	200010c9 	.word	0x200010c9
 8008c58:	200010c3 	.word	0x200010c3
 8008c5c:	200010c4 	.word	0x200010c4
 8008c60:	200010c8 	.word	0x200010c8
 8008c64:	200010c5 	.word	0x200010c5
 8008c68:	200010d5 	.word	0x200010d5
 8008c6c:	200010c6 	.word	0x200010c6
 8008c70:	200010d6 	.word	0x200010d6
 8008c74:	200010c7 	.word	0x200010c7
 8008c78:	200010d7 	.word	0x200010d7
 8008c7c:	200010ca 	.word	0x200010ca
 8008c80:	200010cc 	.word	0x200010cc
 8008c84:	200010cd 	.word	0x200010cd
 8008c88:	200010ce 	.word	0x200010ce
 8008c8c:	200010cf 	.word	0x200010cf
 8008c90:	200010d0 	.word	0x200010d0
 8008c94:	200010d1 	.word	0x200010d1
 8008c98:	200010d2 	.word	0x200010d2
 8008c9c:	200010d3 	.word	0x200010d3
 8008ca0:	200010d4 	.word	0x200010d4
 8008ca4:	200010d8 	.word	0x200010d8
 8008ca8:	200010da 	.word	0x200010da
 8008cac:	200010b4 	.word	0x200010b4
 8008cb0:	200010b5 	.word	0x200010b5
 8008cb4:	200010dc 	.word	0x200010dc
 8008cb8:	20000fec 	.word	0x20000fec
 8008cbc:	0800f3f4 	.word	0x0800f3f4

08008cc0 <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af02      	add	r7, sp, #8
	lcd_print(1, 1, dataSynchText);
 8008cc6:	4a13      	ldr	r2, [pc, #76]	@ (8008d14 <convertAndSendData+0x54>)
 8008cc8:	2101      	movs	r1, #1
 8008cca:	2001      	movs	r0, #1
 8008ccc:	f000 fa22 	bl	8009114 <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 8008cd0:	4a11      	ldr	r2, [pc, #68]	@ (8008d18 <convertAndSendData+0x58>)
 8008cd2:	2101      	movs	r1, #1
 8008cd4:	2002      	movs	r0, #2
 8008cd6:	f000 fa1d 	bl	8009114 <lcd_print>

	for(int i=0; i<2; i++) {
 8008cda:	2300      	movs	r3, #0
 8008cdc:	607b      	str	r3, [r7, #4]
 8008cde:	e00c      	b.n	8008cfa <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8008ce0:	f7ff fee2 	bl	8008aa8 <mergeData>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8008d1c <convertAndSendData+0x5c>)
 8008cea:	4a0d      	ldr	r2, [pc, #52]	@ (8008d20 <convertAndSendData+0x60>)
 8008cec:	490d      	ldr	r1, [pc, #52]	@ (8008d24 <convertAndSendData+0x64>)
 8008cee:	480e      	ldr	r0, [pc, #56]	@ (8008d28 <convertAndSendData+0x68>)
 8008cf0:	f7f7 ff06 	bl	8000b00 <sendMachineData>
	for(int i=0; i<2; i++) {
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	607b      	str	r3, [r7, #4]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	ddef      	ble.n	8008ce0 <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 8008d00:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008d04:	f000 ff60 	bl	8009bc8 <HAL_Delay>
	lcd_clear();
 8008d08:	f000 fa30 	bl	800916c <lcd_clear>
}
 8008d0c:	bf00      	nop
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	20001798 	.word	0x20001798
 8008d18:	200017ac 	.word	0x200017ac
 8008d1c:	20001080 	.word	0x20001080
 8008d20:	20001070 	.word	0x20001070
 8008d24:	20001064 	.word	0x20001064
 8008d28:	200019d8 	.word	0x200019d8

08008d2c <iotSetup>:

void iotSetup() {
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8008d30:	4b13      	ldr	r3, [pc, #76]	@ (8008d80 <iotSetup+0x54>)
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d021      	beq.n	8008d7c <iotSetup+0x50>
		if(checkEEPROM4ID() != 1) {
 8008d38:	f000 f82e 	bl	8008d98 <checkEEPROM4ID>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d001      	beq.n	8008d46 <iotSetup+0x1a>
			takeMachineID();
 8008d42:	f7ff f9af 	bl	80080a4 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8008d46:	480f      	ldr	r0, [pc, #60]	@ (8008d84 <iotSetup+0x58>)
 8008d48:	f7f7 fa6c 	bl	8000224 <strlen>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d801      	bhi.n	8008d56 <iotSetup+0x2a>
			takeWifiSSID();
 8008d52:	f7ff fb9f 	bl	8008494 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8008d56:	480c      	ldr	r0, [pc, #48]	@ (8008d88 <iotSetup+0x5c>)
 8008d58:	f7f7 fa64 	bl	8000224 <strlen>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d801      	bhi.n	8008d66 <iotSetup+0x3a>
			takeWifiPass();
 8008d62:	f7ff fd43 	bl	80087ec <takeWifiPass>
		}

		ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 8008d66:	4a09      	ldr	r2, [pc, #36]	@ (8008d8c <iotSetup+0x60>)
 8008d68:	4909      	ldr	r1, [pc, #36]	@ (8008d90 <iotSetup+0x64>)
 8008d6a:	480a      	ldr	r0, [pc, #40]	@ (8008d94 <iotSetup+0x68>)
 8008d6c:	f7f7 fe1e 	bl	80009ac <ESP8266_Init>
		HAL_Delay(500);
 8008d70:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008d74:	f000 ff28 	bl	8009bc8 <HAL_Delay>
		convertAndSendData();
 8008d78:	f7ff ffa2 	bl	8008cc0 <convertAndSendData>
	}
}
 8008d7c:	bf00      	nop
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	200010e7 	.word	0x200010e7
 8008d84:	20001070 	.word	0x20001070
 8008d88:	20001080 	.word	0x20001080
 8008d8c:	0800f3f8 	.word	0x0800f3f8
 8008d90:	0800f410 	.word	0x0800f410
 8008d94:	200019d8 	.word	0x200019d8

08008d98 <checkEEPROM4ID>:

int checkEEPROM4ID() {
 8008d98:	b480      	push	{r7}
 8008d9a:	b085      	sub	sp, #20
 8008d9c:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8008d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8008ddc <checkEEPROM4ID+0x44>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8008da4:	2301      	movs	r3, #1
 8008da6:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008da8:	2300      	movs	r3, #0
 8008daa:	607b      	str	r3, [r7, #4]
 8008dac:	e00d      	b.n	8008dca <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8008dae:	4a0c      	ldr	r2, [pc, #48]	@ (8008de0 <checkEEPROM4ID+0x48>)
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	4413      	add	r3, r2
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d101      	bne.n	8008dbe <checkEEPROM4ID+0x26>
			returnVal = 0;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	3301      	adds	r3, #1
 8008dc2:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	607b      	str	r3, [r7, #4]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2b0b      	cmp	r3, #11
 8008dce:	ddee      	ble.n	8008dae <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8008dd0:	68bb      	ldr	r3, [r7, #8]
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bc80      	pop	{r7}
 8008dda:	4770      	bx	lr
 8008ddc:	20000000 	.word	0x20000000
 8008de0:	20000fec 	.word	0x20000fec

08008de4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b086      	sub	sp, #24
 8008de8:	af02      	add	r7, sp, #8
 8008dea:	4603      	mov	r3, r0
 8008dec:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8008dee:	79fb      	ldrb	r3, [r7, #7]
 8008df0:	f023 030f 	bic.w	r3, r3, #15
 8008df4:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8008df6:	79fb      	ldrb	r3, [r7, #7]
 8008df8:	011b      	lsls	r3, r3, #4
 8008dfa:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8008dfc:	7b7b      	ldrb	r3, [r7, #13]
 8008dfe:	f043 030c 	orr.w	r3, r3, #12
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8008e06:	7b7b      	ldrb	r3, [r7, #13]
 8008e08:	f043 0308 	orr.w	r3, r3, #8
 8008e0c:	b2db      	uxtb	r3, r3
 8008e0e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8008e10:	7b3b      	ldrb	r3, [r7, #12]
 8008e12:	f043 030c 	orr.w	r3, r3, #12
 8008e16:	b2db      	uxtb	r3, r3
 8008e18:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8008e1a:	7b3b      	ldrb	r3, [r7, #12]
 8008e1c:	f043 0308 	orr.w	r3, r3, #8
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008e24:	bf00      	nop
 8008e26:	4825      	ldr	r0, [pc, #148]	@ (8008ebc <lcd_send_cmd+0xd8>)
 8008e28:	f002 fb55 	bl	800b4d6 <HAL_I2C_GetError>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	2b04      	cmp	r3, #4
 8008e30:	d0f9      	beq.n	8008e26 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008e32:	bf00      	nop
 8008e34:	4821      	ldr	r0, [pc, #132]	@ (8008ebc <lcd_send_cmd+0xd8>)
 8008e36:	f002 fb41 	bl	800b4bc <HAL_I2C_GetState>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b20      	cmp	r3, #32
 8008e3e:	d1f9      	bne.n	8008e34 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008e40:	4b1f      	ldr	r3, [pc, #124]	@ (8008ec0 <lcd_send_cmd+0xdc>)
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d116      	bne.n	8008e76 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008e48:	2300      	movs	r3, #0
 8008e4a:	73fb      	strb	r3, [r7, #15]
 8008e4c:	e00f      	b.n	8008e6e <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
 8008e50:	3310      	adds	r3, #16
 8008e52:	443b      	add	r3, r7
 8008e54:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	f022 0208 	bic.w	r2, r2, #8
 8008e5e:	b2d2      	uxtb	r2, r2
 8008e60:	3310      	adds	r3, #16
 8008e62:	443b      	add	r3, r7
 8008e64:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	73fb      	strb	r3, [r7, #15]
 8008e6e:	7bfb      	ldrb	r3, [r7, #15]
 8008e70:	2b03      	cmp	r3, #3
 8008e72:	d9ec      	bls.n	8008e4e <lcd_send_cmd+0x6a>
 8008e74:	e015      	b.n	8008ea2 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008e76:	2300      	movs	r3, #0
 8008e78:	73bb      	strb	r3, [r7, #14]
 8008e7a:	e00f      	b.n	8008e9c <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8008e7c:	7bbb      	ldrb	r3, [r7, #14]
 8008e7e:	3310      	adds	r3, #16
 8008e80:	443b      	add	r3, r7
 8008e82:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008e86:	7bbb      	ldrb	r3, [r7, #14]
 8008e88:	f042 0208 	orr.w	r2, r2, #8
 8008e8c:	b2d2      	uxtb	r2, r2
 8008e8e:	3310      	adds	r3, #16
 8008e90:	443b      	add	r3, r7
 8008e92:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008e96:	7bbb      	ldrb	r3, [r7, #14]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	73bb      	strb	r3, [r7, #14]
 8008e9c:	7bbb      	ldrb	r3, [r7, #14]
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d9ec      	bls.n	8008e7c <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008ea2:	f107 0208 	add.w	r2, r7, #8
 8008ea6:	2364      	movs	r3, #100	@ 0x64
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	2304      	movs	r3, #4
 8008eac:	214e      	movs	r1, #78	@ 0x4e
 8008eae:	4803      	ldr	r0, [pc, #12]	@ (8008ebc <lcd_send_cmd+0xd8>)
 8008eb0:	f001 fea4 	bl	800abfc <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008eb4:	bf00      	nop
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	2000193c 	.word	0x2000193c
 8008ec0:	20001911 	.word	0x20001911

08008ec4 <lcd_send_data>:

void lcd_send_data (char data) {
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af02      	add	r7, sp, #8
 8008eca:	4603      	mov	r3, r0
 8008ecc:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8008ece:	79fb      	ldrb	r3, [r7, #7]
 8008ed0:	f023 030f 	bic.w	r3, r3, #15
 8008ed4:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8008ed6:	79fb      	ldrb	r3, [r7, #7]
 8008ed8:	011b      	lsls	r3, r3, #4
 8008eda:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8008edc:	7b7b      	ldrb	r3, [r7, #13]
 8008ede:	f043 030d 	orr.w	r3, r3, #13
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8008ee6:	7b7b      	ldrb	r3, [r7, #13]
 8008ee8:	f043 0309 	orr.w	r3, r3, #9
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8008ef0:	7b3b      	ldrb	r3, [r7, #12]
 8008ef2:	f043 030d 	orr.w	r3, r3, #13
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8008efa:	7b3b      	ldrb	r3, [r7, #12]
 8008efc:	f043 0309 	orr.w	r3, r3, #9
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008f04:	bf00      	nop
 8008f06:	4825      	ldr	r0, [pc, #148]	@ (8008f9c <lcd_send_data+0xd8>)
 8008f08:	f002 fae5 	bl	800b4d6 <HAL_I2C_GetError>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b04      	cmp	r3, #4
 8008f10:	d0f9      	beq.n	8008f06 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008f12:	bf00      	nop
 8008f14:	4821      	ldr	r0, [pc, #132]	@ (8008f9c <lcd_send_data+0xd8>)
 8008f16:	f002 fad1 	bl	800b4bc <HAL_I2C_GetState>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	2b20      	cmp	r3, #32
 8008f1e:	d1f9      	bne.n	8008f14 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008f20:	4b1f      	ldr	r3, [pc, #124]	@ (8008fa0 <lcd_send_data+0xdc>)
 8008f22:	781b      	ldrb	r3, [r3, #0]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d116      	bne.n	8008f56 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008f28:	2300      	movs	r3, #0
 8008f2a:	73fb      	strb	r3, [r7, #15]
 8008f2c:	e00f      	b.n	8008f4e <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
 8008f30:	3310      	adds	r3, #16
 8008f32:	443b      	add	r3, r7
 8008f34:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
 8008f3a:	f022 0208 	bic.w	r2, r2, #8
 8008f3e:	b2d2      	uxtb	r2, r2
 8008f40:	3310      	adds	r3, #16
 8008f42:	443b      	add	r3, r7
 8008f44:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
 8008f4a:	3301      	adds	r3, #1
 8008f4c:	73fb      	strb	r3, [r7, #15]
 8008f4e:	7bfb      	ldrb	r3, [r7, #15]
 8008f50:	2b03      	cmp	r3, #3
 8008f52:	d9ec      	bls.n	8008f2e <lcd_send_data+0x6a>
 8008f54:	e015      	b.n	8008f82 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008f56:	2300      	movs	r3, #0
 8008f58:	73bb      	strb	r3, [r7, #14]
 8008f5a:	e00f      	b.n	8008f7c <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8008f5c:	7bbb      	ldrb	r3, [r7, #14]
 8008f5e:	3310      	adds	r3, #16
 8008f60:	443b      	add	r3, r7
 8008f62:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008f66:	7bbb      	ldrb	r3, [r7, #14]
 8008f68:	f042 0208 	orr.w	r2, r2, #8
 8008f6c:	b2d2      	uxtb	r2, r2
 8008f6e:	3310      	adds	r3, #16
 8008f70:	443b      	add	r3, r7
 8008f72:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008f76:	7bbb      	ldrb	r3, [r7, #14]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	73bb      	strb	r3, [r7, #14]
 8008f7c:	7bbb      	ldrb	r3, [r7, #14]
 8008f7e:	2b03      	cmp	r3, #3
 8008f80:	d9ec      	bls.n	8008f5c <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008f82:	f107 0208 	add.w	r2, r7, #8
 8008f86:	2364      	movs	r3, #100	@ 0x64
 8008f88:	9300      	str	r3, [sp, #0]
 8008f8a:	2304      	movs	r3, #4
 8008f8c:	214e      	movs	r1, #78	@ 0x4e
 8008f8e:	4803      	ldr	r0, [pc, #12]	@ (8008f9c <lcd_send_data+0xd8>)
 8008f90:	f001 fe34 	bl	800abfc <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008f94:	bf00      	nop
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	2000193c 	.word	0x2000193c
 8008fa0:	20001911 	.word	0x20001911

08008fa4 <lcd_send_string>:

void lcd_send_string (char *str) {
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
	while (*str) {
 8008fac:	e006      	b.n	8008fbc <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	1c5a      	adds	r2, r3, #1
 8008fb2:	607a      	str	r2, [r7, #4]
 8008fb4:	781b      	ldrb	r3, [r3, #0]
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7ff ff84 	bl	8008ec4 <lcd_send_data>
	while (*str) {
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d1f4      	bne.n	8008fae <lcd_send_string+0xa>
	}
}
 8008fc4:	bf00      	nop
 8008fc6:	bf00      	nop
 8008fc8:	3708      	adds	r7, #8
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
	...

08008fd0 <lcd_send_char>:

void lcd_send_char(char ch) {
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b086      	sub	sp, #24
 8008fd4:	af02      	add	r7, sp, #8
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8008fda:	79fb      	ldrb	r3, [r7, #7]
 8008fdc:	f023 030f 	bic.w	r3, r3, #15
 8008fe0:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8008fe2:	79fb      	ldrb	r3, [r7, #7]
 8008fe4:	011b      	lsls	r3, r3, #4
 8008fe6:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8008fe8:	7b7b      	ldrb	r3, [r7, #13]
 8008fea:	f043 030d 	orr.w	r3, r3, #13
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8008ff2:	7b7b      	ldrb	r3, [r7, #13]
 8008ff4:	f043 0309 	orr.w	r3, r3, #9
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8008ffc:	7b3b      	ldrb	r3, [r7, #12]
 8008ffe:	f043 030d 	orr.w	r3, r3, #13
 8009002:	b2db      	uxtb	r3, r3
 8009004:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8009006:	7b3b      	ldrb	r3, [r7, #12]
 8009008:	f043 0309 	orr.w	r3, r3, #9
 800900c:	b2db      	uxtb	r3, r3
 800900e:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009010:	bf00      	nop
 8009012:	4825      	ldr	r0, [pc, #148]	@ (80090a8 <lcd_send_char+0xd8>)
 8009014:	f002 fa5f 	bl	800b4d6 <HAL_I2C_GetError>
 8009018:	4603      	mov	r3, r0
 800901a:	2b04      	cmp	r3, #4
 800901c:	d0f9      	beq.n	8009012 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800901e:	bf00      	nop
 8009020:	4821      	ldr	r0, [pc, #132]	@ (80090a8 <lcd_send_char+0xd8>)
 8009022:	f002 fa4b 	bl	800b4bc <HAL_I2C_GetState>
 8009026:	4603      	mov	r3, r0
 8009028:	2b20      	cmp	r3, #32
 800902a:	d1f9      	bne.n	8009020 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 800902c:	4b1f      	ldr	r3, [pc, #124]	@ (80090ac <lcd_send_char+0xdc>)
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	2b00      	cmp	r3, #0
 8009032:	d116      	bne.n	8009062 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8009034:	2300      	movs	r3, #0
 8009036:	73fb      	strb	r3, [r7, #15]
 8009038:	e00f      	b.n	800905a <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800903a:	7bfb      	ldrb	r3, [r7, #15]
 800903c:	3310      	adds	r3, #16
 800903e:	443b      	add	r3, r7
 8009040:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009044:	7bfb      	ldrb	r3, [r7, #15]
 8009046:	f022 0208 	bic.w	r2, r2, #8
 800904a:	b2d2      	uxtb	r2, r2
 800904c:	3310      	adds	r3, #16
 800904e:	443b      	add	r3, r7
 8009050:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8009054:	7bfb      	ldrb	r3, [r7, #15]
 8009056:	3301      	adds	r3, #1
 8009058:	73fb      	strb	r3, [r7, #15]
 800905a:	7bfb      	ldrb	r3, [r7, #15]
 800905c:	2b03      	cmp	r3, #3
 800905e:	d9ec      	bls.n	800903a <lcd_send_char+0x6a>
 8009060:	e015      	b.n	800908e <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8009062:	2300      	movs	r3, #0
 8009064:	73bb      	strb	r3, [r7, #14]
 8009066:	e00f      	b.n	8009088 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8009068:	7bbb      	ldrb	r3, [r7, #14]
 800906a:	3310      	adds	r3, #16
 800906c:	443b      	add	r3, r7
 800906e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	f042 0208 	orr.w	r2, r2, #8
 8009078:	b2d2      	uxtb	r2, r2
 800907a:	3310      	adds	r3, #16
 800907c:	443b      	add	r3, r7
 800907e:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8009082:	7bbb      	ldrb	r3, [r7, #14]
 8009084:	3301      	adds	r3, #1
 8009086:	73bb      	strb	r3, [r7, #14]
 8009088:	7bbb      	ldrb	r3, [r7, #14]
 800908a:	2b03      	cmp	r3, #3
 800908c:	d9ec      	bls.n	8009068 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 800908e:	f107 0208 	add.w	r2, r7, #8
 8009092:	2364      	movs	r3, #100	@ 0x64
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	2304      	movs	r3, #4
 8009098:	214e      	movs	r1, #78	@ 0x4e
 800909a:	4803      	ldr	r0, [pc, #12]	@ (80090a8 <lcd_send_char+0xd8>)
 800909c:	f001 fdae 	bl	800abfc <HAL_I2C_Master_Transmit>
}
 80090a0:	bf00      	nop
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}
 80090a8:	2000193c 	.word	0x2000193c
 80090ac:	20001911 	.word	0x20001911

080090b0 <lcd_init>:

void lcd_init (void) {
 80090b0:	b580      	push	{r7, lr}
 80090b2:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 80090b4:	2002      	movs	r0, #2
 80090b6:	f7ff fe95 	bl	8008de4 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80090ba:	2028      	movs	r0, #40	@ 0x28
 80090bc:	f7ff fe92 	bl	8008de4 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80090c0:	200c      	movs	r0, #12
 80090c2:	f7ff fe8f 	bl	8008de4 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80090c6:	2080      	movs	r0, #128	@ 0x80
 80090c8:	f7ff fe8c 	bl	8008de4 <lcd_send_cmd>
	lcd_backlight(1);
 80090cc:	2001      	movs	r0, #1
 80090ce:	f000 f86d 	bl	80091ac <lcd_backlight>
}
 80090d2:	bf00      	nop
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b082      	sub	sp, #8
 80090da:	af00      	add	r7, sp, #0
 80090dc:	4603      	mov	r3, r0
 80090de:	460a      	mov	r2, r1
 80090e0:	71fb      	strb	r3, [r7, #7]
 80090e2:	4613      	mov	r3, r2
 80090e4:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 80090e6:	79fb      	ldrb	r3, [r7, #7]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d106      	bne.n	80090fa <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 80090ec:	79bb      	ldrb	r3, [r7, #6]
 80090ee:	337f      	adds	r3, #127	@ 0x7f
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	4618      	mov	r0, r3
 80090f4:	f7ff fe76 	bl	8008de4 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80090f8:	e008      	b.n	800910c <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80090fa:	79fb      	ldrb	r3, [r7, #7]
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	d105      	bne.n	800910c <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8009100:	79bb      	ldrb	r3, [r7, #6]
 8009102:	3b41      	subs	r3, #65	@ 0x41
 8009104:	b2db      	uxtb	r3, r3
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff fe6c 	bl	8008de4 <lcd_send_cmd>
}
 800910c:	bf00      	nop
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	4603      	mov	r3, r0
 800911c:	603a      	str	r2, [r7, #0]
 800911e:	71fb      	strb	r3, [r7, #7]
 8009120:	460b      	mov	r3, r1
 8009122:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8009124:	79ba      	ldrb	r2, [r7, #6]
 8009126:	79fb      	ldrb	r3, [r7, #7]
 8009128:	4611      	mov	r1, r2
 800912a:	4618      	mov	r0, r3
 800912c:	f7ff ffd3 	bl	80090d6 <lcd_gotoxy>
	lcd_send_string(str);
 8009130:	6838      	ldr	r0, [r7, #0]
 8009132:	f7ff ff37 	bl	8008fa4 <lcd_send_string>
}
 8009136:	bf00      	nop
 8009138:	3708      	adds	r7, #8
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 800913e:	b580      	push	{r7, lr}
 8009140:	b082      	sub	sp, #8
 8009142:	af00      	add	r7, sp, #0
 8009144:	4603      	mov	r3, r0
 8009146:	71fb      	strb	r3, [r7, #7]
 8009148:	460b      	mov	r3, r1
 800914a:	71bb      	strb	r3, [r7, #6]
 800914c:	4613      	mov	r3, r2
 800914e:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8009150:	79ba      	ldrb	r2, [r7, #6]
 8009152:	79fb      	ldrb	r3, [r7, #7]
 8009154:	4611      	mov	r1, r2
 8009156:	4618      	mov	r0, r3
 8009158:	f7ff ffbd 	bl	80090d6 <lcd_gotoxy>
    lcd_send_char(ch);
 800915c:	797b      	ldrb	r3, [r7, #5]
 800915e:	4618      	mov	r0, r3
 8009160:	f7ff ff36 	bl	8008fd0 <lcd_send_char>
}
 8009164:	bf00      	nop
 8009166:	3708      	adds	r7, #8
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <lcd_clear>:

void lcd_clear(void) {
 800916c:	b580      	push	{r7, lr}
 800916e:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8009170:	2001      	movs	r0, #1
 8009172:	f7ff fe37 	bl	8008de4 <lcd_send_cmd>
    HAL_Delay(2);
 8009176:	2002      	movs	r0, #2
 8009178:	f000 fd26 	bl	8009bc8 <HAL_Delay>
}
 800917c:	bf00      	nop
 800917e:	bd80      	pop	{r7, pc}

08009180 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	4603      	mov	r3, r0
 8009188:	460a      	mov	r2, r1
 800918a:	71fb      	strb	r3, [r7, #7]
 800918c:	4613      	mov	r3, r2
 800918e:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8009190:	79ba      	ldrb	r2, [r7, #6]
 8009192:	79fb      	ldrb	r3, [r7, #7]
 8009194:	4611      	mov	r1, r2
 8009196:	4618      	mov	r0, r3
 8009198:	f7ff ff9d 	bl	80090d6 <lcd_gotoxy>

    lcd_send_char(' ');
 800919c:	2020      	movs	r0, #32
 800919e:	f7ff ff17 	bl	8008fd0 <lcd_send_char>
}
 80091a2:	bf00      	nop
 80091a4:	3708      	adds	r7, #8
 80091a6:	46bd      	mov	sp, r7
 80091a8:	bd80      	pop	{r7, pc}
	...

080091ac <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	4603      	mov	r3, r0
 80091b4:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 80091b6:	4a05      	ldr	r2, [pc, #20]	@ (80091cc <lcd_backlight+0x20>)
 80091b8:	79fb      	ldrb	r3, [r7, #7]
 80091ba:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 80091bc:	2000      	movs	r0, #0
 80091be:	f7ff fe11 	bl	8008de4 <lcd_send_cmd>
}
 80091c2:	bf00      	nop
 80091c4:	3708      	adds	r7, #8
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop
 80091cc:	20001911 	.word	0x20001911

080091d0 <lcd_cursor>:

void lcd_cursor(int state) {
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b082      	sub	sp, #8
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2b01      	cmp	r3, #1
 80091dc:	d106      	bne.n	80091ec <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 80091de:	200e      	movs	r0, #14
 80091e0:	f7ff fe00 	bl	8008de4 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 80091e4:	200f      	movs	r0, #15
 80091e6:	f7ff fdfd 	bl	8008de4 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 80091ea:	e002      	b.n	80091f2 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 80091ec:	200c      	movs	r0, #12
 80091ee:	f7ff fdf9 	bl	8008de4 <lcd_send_cmd>
}
 80091f2:	bf00      	nop
 80091f4:	3708      	adds	r7, #8
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
	...

080091fc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8009204:	4b04      	ldr	r3, [pc, #16]	@ (8009218 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	3301      	adds	r3, #1
 800920a:	4a03      	ldr	r2, [pc, #12]	@ (8009218 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800920c:	6013      	str	r3, [r2, #0]
}
 800920e:	bf00      	nop
 8009210:	370c      	adds	r7, #12
 8009212:	46bd      	mov	sp, r7
 8009214:	bc80      	pop	{r7}
 8009216:	4770      	bx	lr
 8009218:	20001094 	.word	0x20001094

0800921c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009220:	f000 fc70 	bl	8009b04 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8009224:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009228:	f000 fcce 	bl	8009bc8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800922c:	f000 f89c 	bl	8009368 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009230:	f000 f9be 	bl	80095b0 <MX_GPIO_Init>
  MX_CAN_Init();
 8009234:	f000 f8de 	bl	80093f4 <MX_CAN_Init>
  MX_I2C1_Init();
 8009238:	f000 f910 	bl	800945c <MX_I2C1_Init>
  MX_TIM1_Init();
 800923c:	f000 f93c 	bl	80094b8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8009240:	f000 f98c 	bl	800955c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8009244:	2201      	movs	r2, #1
 8009246:	2140      	movs	r1, #64	@ 0x40
 8009248:	483e      	ldr	r0, [pc, #248]	@ (8009344 <main+0x128>)
 800924a:	f001 fb32 	bl	800a8b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800924e:	2201      	movs	r2, #1
 8009250:	2180      	movs	r1, #128	@ 0x80
 8009252:	483c      	ldr	r0, [pc, #240]	@ (8009344 <main+0x128>)
 8009254:	f001 fb2d 	bl	800a8b2 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8009258:	200a      	movs	r0, #10
 800925a:	f000 fcb5 	bl	8009bc8 <HAL_Delay>
  lcd_init();
 800925e:	f7ff ff27 	bl	80090b0 <lcd_init>
  HAL_Delay(10);
 8009262:	200a      	movs	r0, #10
 8009264:	f000 fcb0 	bl	8009bc8 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 8009268:	4837      	ldr	r0, [pc, #220]	@ (8009348 <main+0x12c>)
 800926a:	f003 f9d5 	bl	800c618 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800926e:	bf00      	nop
 8009270:	4836      	ldr	r0, [pc, #216]	@ (800934c <main+0x130>)
 8009272:	f002 f930 	bl	800b4d6 <HAL_I2C_GetError>
 8009276:	4603      	mov	r3, r0
 8009278:	2b04      	cmp	r3, #4
 800927a:	d0f9      	beq.n	8009270 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800927c:	bf00      	nop
 800927e:	4833      	ldr	r0, [pc, #204]	@ (800934c <main+0x130>)
 8009280:	f002 f91c 	bl	800b4bc <HAL_I2C_GetState>
 8009284:	4603      	mov	r3, r0
 8009286:	2b20      	cmp	r3, #32
 8009288:	d1f9      	bne.n	800927e <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800928a:	2200      	movs	r2, #0
 800928c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009290:	482c      	ldr	r0, [pc, #176]	@ (8009344 <main+0x128>)
 8009292:	f001 fb0e 	bl	800a8b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8009296:	2200      	movs	r2, #0
 8009298:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800929c:	4829      	ldr	r0, [pc, #164]	@ (8009344 <main+0x128>)
 800929e:	f001 fb08 	bl	800a8b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80092a2:	2200      	movs	r2, #0
 80092a4:	2104      	movs	r1, #4
 80092a6:	4827      	ldr	r0, [pc, #156]	@ (8009344 <main+0x128>)
 80092a8:	f001 fb03 	bl	800a8b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80092ac:	2200      	movs	r2, #0
 80092ae:	2102      	movs	r1, #2
 80092b0:	4824      	ldr	r0, [pc, #144]	@ (8009344 <main+0x128>)
 80092b2:	f001 fafe 	bl	800a8b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80092b6:	2200      	movs	r2, #0
 80092b8:	2101      	movs	r1, #1
 80092ba:	4822      	ldr	r0, [pc, #136]	@ (8009344 <main+0x128>)
 80092bc:	f001 faf9 	bl	800a8b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80092c0:	2200      	movs	r2, #0
 80092c2:	2120      	movs	r1, #32
 80092c4:	4822      	ldr	r0, [pc, #136]	@ (8009350 <main+0x134>)
 80092c6:	f001 faf4 	bl	800a8b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80092ca:	2200      	movs	r2, #0
 80092cc:	2110      	movs	r1, #16
 80092ce:	4820      	ldr	r0, [pc, #128]	@ (8009350 <main+0x134>)
 80092d0:	f001 faef 	bl	800a8b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80092d4:	2200      	movs	r2, #0
 80092d6:	2180      	movs	r1, #128	@ 0x80
 80092d8:	481e      	ldr	r0, [pc, #120]	@ (8009354 <main+0x138>)
 80092da:	f001 faea 	bl	800a8b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80092de:	2200      	movs	r2, #0
 80092e0:	2140      	movs	r1, #64	@ 0x40
 80092e2:	481c      	ldr	r0, [pc, #112]	@ (8009354 <main+0x138>)
 80092e4:	f001 fae5 	bl	800a8b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80092e8:	2200      	movs	r2, #0
 80092ea:	2120      	movs	r1, #32
 80092ec:	4819      	ldr	r0, [pc, #100]	@ (8009354 <main+0x138>)
 80092ee:	f001 fae0 	bl	800a8b2 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 80092f2:	2200      	movs	r2, #0
 80092f4:	2110      	movs	r1, #16
 80092f6:	4817      	ldr	r0, [pc, #92]	@ (8009354 <main+0x138>)
 80092f8:	f001 fadb 	bl	800a8b2 <HAL_GPIO_WritePin>

  i2cTest();
 80092fc:	f7f7 ff68 	bl	80011d0 <i2cTest>
  HAL_Delay(100);
 8009300:	2064      	movs	r0, #100	@ 0x64
 8009302:	f000 fc61 	bl	8009bc8 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 8009306:	4a14      	ldr	r2, [pc, #80]	@ (8009358 <main+0x13c>)
 8009308:	2101      	movs	r1, #1
 800930a:	2001      	movs	r0, #1
 800930c:	f7ff ff02 	bl	8009114 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8009310:	4a12      	ldr	r2, [pc, #72]	@ (800935c <main+0x140>)
 8009312:	2101      	movs	r1, #1
 8009314:	2002      	movs	r0, #2
 8009316:	f7ff fefd 	bl	8009114 <lcd_print>
  HAL_Delay(1000);
 800931a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800931e:	f000 fc53 	bl	8009bc8 <HAL_Delay>
  lcd_clear();
 8009322:	f7ff ff23 	bl	800916c <lcd_clear>

  eepromKontrol();
 8009326:	f7f6 ff85 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 800932a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800932e:	f000 fc4b 	bl	8009bc8 <HAL_Delay>

  backLightTimer = millis;
 8009332:	4b0b      	ldr	r3, [pc, #44]	@ (8009360 <main+0x144>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a0b      	ldr	r2, [pc, #44]	@ (8009364 <main+0x148>)
 8009338:	6013      	str	r3, [r2, #0]

  //IoT Section:
  iotSetup();
 800933a:	f7ff fcf7 	bl	8008d2c <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 800933e:	f7fc fe37 	bl	8005fb0 <mainLoop>
 8009342:	e7fc      	b.n	800933e <main+0x122>
 8009344:	40010c00 	.word	0x40010c00
 8009348:	20001990 	.word	0x20001990
 800934c:	2000193c 	.word	0x2000193c
 8009350:	40011000 	.word	0x40011000
 8009354:	40010800 	.word	0x40010800
 8009358:	2000009c 	.word	0x2000009c
 800935c:	200000b0 	.word	0x200000b0
 8009360:	20001094 	.word	0x20001094
 8009364:	200010b0 	.word	0x200010b0

08009368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b090      	sub	sp, #64	@ 0x40
 800936c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800936e:	f107 0318 	add.w	r3, r7, #24
 8009372:	2228      	movs	r2, #40	@ 0x28
 8009374:	2100      	movs	r1, #0
 8009376:	4618      	mov	r0, r3
 8009378:	f004 fe8c 	bl	800e094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800937c:	1d3b      	adds	r3, r7, #4
 800937e:	2200      	movs	r2, #0
 8009380:	601a      	str	r2, [r3, #0]
 8009382:	605a      	str	r2, [r3, #4]
 8009384:	609a      	str	r2, [r3, #8]
 8009386:	60da      	str	r2, [r3, #12]
 8009388:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800938a:	2301      	movs	r3, #1
 800938c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800938e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009392:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8009394:	2300      	movs	r3, #0
 8009396:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009398:	2301      	movs	r3, #1
 800939a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800939c:	2302      	movs	r3, #2
 800939e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80093a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80093a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80093a6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80093aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80093ac:	f107 0318 	add.w	r3, r7, #24
 80093b0:	4618      	mov	r0, r3
 80093b2:	f002 fcd1 	bl	800bd58 <HAL_RCC_OscConfig>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80093bc:	f000 f9a2 	bl	8009704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80093c0:	230f      	movs	r3, #15
 80093c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80093c4:	2302      	movs	r3, #2
 80093c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80093c8:	2300      	movs	r3, #0
 80093ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80093cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80093d2:	2300      	movs	r3, #0
 80093d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80093d6:	1d3b      	adds	r3, r7, #4
 80093d8:	2102      	movs	r1, #2
 80093da:	4618      	mov	r0, r3
 80093dc:	f002 ff3e 	bl	800c25c <HAL_RCC_ClockConfig>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d001      	beq.n	80093ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80093e6:	f000 f98d 	bl	8009704 <Error_Handler>
  }
}
 80093ea:	bf00      	nop
 80093ec:	3740      	adds	r7, #64	@ 0x40
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
	...

080093f4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80093f8:	4b16      	ldr	r3, [pc, #88]	@ (8009454 <MX_CAN_Init+0x60>)
 80093fa:	4a17      	ldr	r2, [pc, #92]	@ (8009458 <MX_CAN_Init+0x64>)
 80093fc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80093fe:	4b15      	ldr	r3, [pc, #84]	@ (8009454 <MX_CAN_Init+0x60>)
 8009400:	2210      	movs	r2, #16
 8009402:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8009404:	4b13      	ldr	r3, [pc, #76]	@ (8009454 <MX_CAN_Init+0x60>)
 8009406:	2200      	movs	r2, #0
 8009408:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800940a:	4b12      	ldr	r3, [pc, #72]	@ (8009454 <MX_CAN_Init+0x60>)
 800940c:	2200      	movs	r2, #0
 800940e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8009410:	4b10      	ldr	r3, [pc, #64]	@ (8009454 <MX_CAN_Init+0x60>)
 8009412:	2200      	movs	r2, #0
 8009414:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8009416:	4b0f      	ldr	r3, [pc, #60]	@ (8009454 <MX_CAN_Init+0x60>)
 8009418:	2200      	movs	r2, #0
 800941a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800941c:	4b0d      	ldr	r3, [pc, #52]	@ (8009454 <MX_CAN_Init+0x60>)
 800941e:	2200      	movs	r2, #0
 8009420:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8009422:	4b0c      	ldr	r3, [pc, #48]	@ (8009454 <MX_CAN_Init+0x60>)
 8009424:	2200      	movs	r2, #0
 8009426:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8009428:	4b0a      	ldr	r3, [pc, #40]	@ (8009454 <MX_CAN_Init+0x60>)
 800942a:	2200      	movs	r2, #0
 800942c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800942e:	4b09      	ldr	r3, [pc, #36]	@ (8009454 <MX_CAN_Init+0x60>)
 8009430:	2200      	movs	r2, #0
 8009432:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8009434:	4b07      	ldr	r3, [pc, #28]	@ (8009454 <MX_CAN_Init+0x60>)
 8009436:	2200      	movs	r2, #0
 8009438:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800943a:	4b06      	ldr	r3, [pc, #24]	@ (8009454 <MX_CAN_Init+0x60>)
 800943c:	2200      	movs	r2, #0
 800943e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8009440:	4804      	ldr	r0, [pc, #16]	@ (8009454 <MX_CAN_Init+0x60>)
 8009442:	f000 fbe5 	bl	8009c10 <HAL_CAN_Init>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800944c:	f000 f95a 	bl	8009704 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8009450:	bf00      	nop
 8009452:	bd80      	pop	{r7, pc}
 8009454:	20001914 	.word	0x20001914
 8009458:	40006400 	.word	0x40006400

0800945c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009460:	4b12      	ldr	r3, [pc, #72]	@ (80094ac <MX_I2C1_Init+0x50>)
 8009462:	4a13      	ldr	r2, [pc, #76]	@ (80094b0 <MX_I2C1_Init+0x54>)
 8009464:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8009466:	4b11      	ldr	r3, [pc, #68]	@ (80094ac <MX_I2C1_Init+0x50>)
 8009468:	4a12      	ldr	r2, [pc, #72]	@ (80094b4 <MX_I2C1_Init+0x58>)
 800946a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800946c:	4b0f      	ldr	r3, [pc, #60]	@ (80094ac <MX_I2C1_Init+0x50>)
 800946e:	2200      	movs	r2, #0
 8009470:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009472:	4b0e      	ldr	r3, [pc, #56]	@ (80094ac <MX_I2C1_Init+0x50>)
 8009474:	2200      	movs	r2, #0
 8009476:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009478:	4b0c      	ldr	r3, [pc, #48]	@ (80094ac <MX_I2C1_Init+0x50>)
 800947a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800947e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009480:	4b0a      	ldr	r3, [pc, #40]	@ (80094ac <MX_I2C1_Init+0x50>)
 8009482:	2200      	movs	r2, #0
 8009484:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009486:	4b09      	ldr	r3, [pc, #36]	@ (80094ac <MX_I2C1_Init+0x50>)
 8009488:	2200      	movs	r2, #0
 800948a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800948c:	4b07      	ldr	r3, [pc, #28]	@ (80094ac <MX_I2C1_Init+0x50>)
 800948e:	2200      	movs	r2, #0
 8009490:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009492:	4b06      	ldr	r3, [pc, #24]	@ (80094ac <MX_I2C1_Init+0x50>)
 8009494:	2200      	movs	r2, #0
 8009496:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009498:	4804      	ldr	r0, [pc, #16]	@ (80094ac <MX_I2C1_Init+0x50>)
 800949a:	f001 fa3b 	bl	800a914 <HAL_I2C_Init>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d001      	beq.n	80094a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80094a4:	f000 f92e 	bl	8009704 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80094a8:	bf00      	nop
 80094aa:	bd80      	pop	{r7, pc}
 80094ac:	2000193c 	.word	0x2000193c
 80094b0:	40005400 	.word	0x40005400
 80094b4:	00061a80 	.word	0x00061a80

080094b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b086      	sub	sp, #24
 80094bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80094be:	f107 0308 	add.w	r3, r7, #8
 80094c2:	2200      	movs	r2, #0
 80094c4:	601a      	str	r2, [r3, #0]
 80094c6:	605a      	str	r2, [r3, #4]
 80094c8:	609a      	str	r2, [r3, #8]
 80094ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80094cc:	463b      	mov	r3, r7
 80094ce:	2200      	movs	r2, #0
 80094d0:	601a      	str	r2, [r3, #0]
 80094d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80094d4:	4b1f      	ldr	r3, [pc, #124]	@ (8009554 <MX_TIM1_Init+0x9c>)
 80094d6:	4a20      	ldr	r2, [pc, #128]	@ (8009558 <MX_TIM1_Init+0xa0>)
 80094d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80094da:	4b1e      	ldr	r3, [pc, #120]	@ (8009554 <MX_TIM1_Init+0x9c>)
 80094dc:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80094e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094e2:	4b1c      	ldr	r3, [pc, #112]	@ (8009554 <MX_TIM1_Init+0x9c>)
 80094e4:	2200      	movs	r2, #0
 80094e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80094e8:	4b1a      	ldr	r3, [pc, #104]	@ (8009554 <MX_TIM1_Init+0x9c>)
 80094ea:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80094ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80094f0:	4b18      	ldr	r3, [pc, #96]	@ (8009554 <MX_TIM1_Init+0x9c>)
 80094f2:	2200      	movs	r2, #0
 80094f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80094f6:	4b17      	ldr	r3, [pc, #92]	@ (8009554 <MX_TIM1_Init+0x9c>)
 80094f8:	2200      	movs	r2, #0
 80094fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80094fc:	4b15      	ldr	r3, [pc, #84]	@ (8009554 <MX_TIM1_Init+0x9c>)
 80094fe:	2200      	movs	r2, #0
 8009500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009502:	4814      	ldr	r0, [pc, #80]	@ (8009554 <MX_TIM1_Init+0x9c>)
 8009504:	f003 f838 	bl	800c578 <HAL_TIM_Base_Init>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d001      	beq.n	8009512 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800950e:	f000 f8f9 	bl	8009704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009512:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009516:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009518:	f107 0308 	add.w	r3, r7, #8
 800951c:	4619      	mov	r1, r3
 800951e:	480d      	ldr	r0, [pc, #52]	@ (8009554 <MX_TIM1_Init+0x9c>)
 8009520:	f003 f9e2 	bl	800c8e8 <HAL_TIM_ConfigClockSource>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d001      	beq.n	800952e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800952a:	f000 f8eb 	bl	8009704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800952e:	2300      	movs	r3, #0
 8009530:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009532:	2300      	movs	r3, #0
 8009534:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009536:	463b      	mov	r3, r7
 8009538:	4619      	mov	r1, r3
 800953a:	4806      	ldr	r0, [pc, #24]	@ (8009554 <MX_TIM1_Init+0x9c>)
 800953c:	f003 fbd0 	bl	800cce0 <HAL_TIMEx_MasterConfigSynchronization>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8009546:	f000 f8dd 	bl	8009704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800954a:	bf00      	nop
 800954c:	3718      	adds	r7, #24
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	20001990 	.word	0x20001990
 8009558:	40012c00 	.word	0x40012c00

0800955c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009560:	4b11      	ldr	r3, [pc, #68]	@ (80095a8 <MX_USART1_UART_Init+0x4c>)
 8009562:	4a12      	ldr	r2, [pc, #72]	@ (80095ac <MX_USART1_UART_Init+0x50>)
 8009564:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009566:	4b10      	ldr	r3, [pc, #64]	@ (80095a8 <MX_USART1_UART_Init+0x4c>)
 8009568:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800956c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800956e:	4b0e      	ldr	r3, [pc, #56]	@ (80095a8 <MX_USART1_UART_Init+0x4c>)
 8009570:	2200      	movs	r2, #0
 8009572:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009574:	4b0c      	ldr	r3, [pc, #48]	@ (80095a8 <MX_USART1_UART_Init+0x4c>)
 8009576:	2200      	movs	r2, #0
 8009578:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800957a:	4b0b      	ldr	r3, [pc, #44]	@ (80095a8 <MX_USART1_UART_Init+0x4c>)
 800957c:	2200      	movs	r2, #0
 800957e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009580:	4b09      	ldr	r3, [pc, #36]	@ (80095a8 <MX_USART1_UART_Init+0x4c>)
 8009582:	220c      	movs	r2, #12
 8009584:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009586:	4b08      	ldr	r3, [pc, #32]	@ (80095a8 <MX_USART1_UART_Init+0x4c>)
 8009588:	2200      	movs	r2, #0
 800958a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800958c:	4b06      	ldr	r3, [pc, #24]	@ (80095a8 <MX_USART1_UART_Init+0x4c>)
 800958e:	2200      	movs	r2, #0
 8009590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009592:	4805      	ldr	r0, [pc, #20]	@ (80095a8 <MX_USART1_UART_Init+0x4c>)
 8009594:	f003 fc22 	bl	800cddc <HAL_UART_Init>
 8009598:	4603      	mov	r3, r0
 800959a:	2b00      	cmp	r3, #0
 800959c:	d001      	beq.n	80095a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800959e:	f000 f8b1 	bl	8009704 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80095a2:	bf00      	nop
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	200019d8 	.word	0x200019d8
 80095ac:	40013800 	.word	0x40013800

080095b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b088      	sub	sp, #32
 80095b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095b6:	f107 0310 	add.w	r3, r7, #16
 80095ba:	2200      	movs	r2, #0
 80095bc:	601a      	str	r2, [r3, #0]
 80095be:	605a      	str	r2, [r3, #4]
 80095c0:	609a      	str	r2, [r3, #8]
 80095c2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80095c4:	4b4b      	ldr	r3, [pc, #300]	@ (80096f4 <MX_GPIO_Init+0x144>)
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	4a4a      	ldr	r2, [pc, #296]	@ (80096f4 <MX_GPIO_Init+0x144>)
 80095ca:	f043 0310 	orr.w	r3, r3, #16
 80095ce:	6193      	str	r3, [r2, #24]
 80095d0:	4b48      	ldr	r3, [pc, #288]	@ (80096f4 <MX_GPIO_Init+0x144>)
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	f003 0310 	and.w	r3, r3, #16
 80095d8:	60fb      	str	r3, [r7, #12]
 80095da:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80095dc:	4b45      	ldr	r3, [pc, #276]	@ (80096f4 <MX_GPIO_Init+0x144>)
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	4a44      	ldr	r2, [pc, #272]	@ (80096f4 <MX_GPIO_Init+0x144>)
 80095e2:	f043 0320 	orr.w	r3, r3, #32
 80095e6:	6193      	str	r3, [r2, #24]
 80095e8:	4b42      	ldr	r3, [pc, #264]	@ (80096f4 <MX_GPIO_Init+0x144>)
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	f003 0320 	and.w	r3, r3, #32
 80095f0:	60bb      	str	r3, [r7, #8]
 80095f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80095f4:	4b3f      	ldr	r3, [pc, #252]	@ (80096f4 <MX_GPIO_Init+0x144>)
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	4a3e      	ldr	r2, [pc, #248]	@ (80096f4 <MX_GPIO_Init+0x144>)
 80095fa:	f043 0304 	orr.w	r3, r3, #4
 80095fe:	6193      	str	r3, [r2, #24]
 8009600:	4b3c      	ldr	r3, [pc, #240]	@ (80096f4 <MX_GPIO_Init+0x144>)
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	f003 0304 	and.w	r3, r3, #4
 8009608:	607b      	str	r3, [r7, #4]
 800960a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800960c:	4b39      	ldr	r3, [pc, #228]	@ (80096f4 <MX_GPIO_Init+0x144>)
 800960e:	699b      	ldr	r3, [r3, #24]
 8009610:	4a38      	ldr	r2, [pc, #224]	@ (80096f4 <MX_GPIO_Init+0x144>)
 8009612:	f043 0308 	orr.w	r3, r3, #8
 8009616:	6193      	str	r3, [r2, #24]
 8009618:	4b36      	ldr	r3, [pc, #216]	@ (80096f4 <MX_GPIO_Init+0x144>)
 800961a:	699b      	ldr	r3, [r3, #24]
 800961c:	f003 0308 	and.w	r3, r3, #8
 8009620:	603b      	str	r3, [r7, #0]
 8009622:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8009624:	2200      	movs	r2, #0
 8009626:	21f0      	movs	r1, #240	@ 0xf0
 8009628:	4833      	ldr	r0, [pc, #204]	@ (80096f8 <MX_GPIO_Init+0x148>)
 800962a:	f001 f942 	bl	800a8b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800962e:	2200      	movs	r2, #0
 8009630:	f241 0130 	movw	r1, #4144	@ 0x1030
 8009634:	4831      	ldr	r0, [pc, #196]	@ (80096fc <MX_GPIO_Init+0x14c>)
 8009636:	f001 f93c 	bl	800a8b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800963a:	2200      	movs	r2, #0
 800963c:	f640 4107 	movw	r1, #3079	@ 0xc07
 8009640:	482f      	ldr	r0, [pc, #188]	@ (8009700 <MX_GPIO_Init+0x150>)
 8009642:	f001 f936 	bl	800a8b2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8009646:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 800964a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800964c:	2300      	movs	r3, #0
 800964e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009650:	2300      	movs	r3, #0
 8009652:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009654:	f107 0310 	add.w	r3, r7, #16
 8009658:	4619      	mov	r1, r3
 800965a:	4828      	ldr	r0, [pc, #160]	@ (80096fc <MX_GPIO_Init+0x14c>)
 800965c:	f000 feb2 	bl	800a3c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8009660:	f248 130f 	movw	r3, #33039	@ 0x810f
 8009664:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009666:	2300      	movs	r3, #0
 8009668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800966a:	2300      	movs	r3, #0
 800966c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800966e:	f107 0310 	add.w	r3, r7, #16
 8009672:	4619      	mov	r1, r3
 8009674:	4820      	ldr	r0, [pc, #128]	@ (80096f8 <MX_GPIO_Init+0x148>)
 8009676:	f000 fea5 	bl	800a3c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800967a:	23f0      	movs	r3, #240	@ 0xf0
 800967c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800967e:	2301      	movs	r3, #1
 8009680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009682:	2300      	movs	r3, #0
 8009684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009686:	2302      	movs	r3, #2
 8009688:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800968a:	f107 0310 	add.w	r3, r7, #16
 800968e:	4619      	mov	r1, r3
 8009690:	4819      	ldr	r0, [pc, #100]	@ (80096f8 <MX_GPIO_Init+0x148>)
 8009692:	f000 fe97 	bl	800a3c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8009696:	f241 0330 	movw	r3, #4144	@ 0x1030
 800969a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800969c:	2301      	movs	r3, #1
 800969e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096a0:	2300      	movs	r3, #0
 80096a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096a4:	2302      	movs	r3, #2
 80096a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80096a8:	f107 0310 	add.w	r3, r7, #16
 80096ac:	4619      	mov	r1, r3
 80096ae:	4813      	ldr	r0, [pc, #76]	@ (80096fc <MX_GPIO_Init+0x14c>)
 80096b0:	f000 fe88 	bl	800a3c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80096b4:	f640 4307 	movw	r3, #3079	@ 0xc07
 80096b8:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096ba:	2301      	movs	r3, #1
 80096bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096be:	2300      	movs	r3, #0
 80096c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096c2:	2302      	movs	r3, #2
 80096c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80096c6:	f107 0310 	add.w	r3, r7, #16
 80096ca:	4619      	mov	r1, r3
 80096cc:	480c      	ldr	r0, [pc, #48]	@ (8009700 <MX_GPIO_Init+0x150>)
 80096ce:	f000 fe79 	bl	800a3c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 80096d2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80096d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80096d8:	2300      	movs	r3, #0
 80096da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096dc:	2300      	movs	r3, #0
 80096de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80096e0:	f107 0310 	add.w	r3, r7, #16
 80096e4:	4619      	mov	r1, r3
 80096e6:	4806      	ldr	r0, [pc, #24]	@ (8009700 <MX_GPIO_Init+0x150>)
 80096e8:	f000 fe6c 	bl	800a3c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80096ec:	bf00      	nop
 80096ee:	3720      	adds	r7, #32
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	40021000 	.word	0x40021000
 80096f8:	40010800 	.word	0x40010800
 80096fc:	40011000 	.word	0x40011000
 8009700:	40010c00 	.word	0x40010c00

08009704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009704:	b480      	push	{r7}
 8009706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8009708:	bf00      	nop
 800970a:	46bd      	mov	sp, r7
 800970c:	bc80      	pop	{r7}
 800970e:	4770      	bx	lr

08009710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009710:	b480      	push	{r7}
 8009712:	b085      	sub	sp, #20
 8009714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8009716:	4b15      	ldr	r3, [pc, #84]	@ (800976c <HAL_MspInit+0x5c>)
 8009718:	699b      	ldr	r3, [r3, #24]
 800971a:	4a14      	ldr	r2, [pc, #80]	@ (800976c <HAL_MspInit+0x5c>)
 800971c:	f043 0301 	orr.w	r3, r3, #1
 8009720:	6193      	str	r3, [r2, #24]
 8009722:	4b12      	ldr	r3, [pc, #72]	@ (800976c <HAL_MspInit+0x5c>)
 8009724:	699b      	ldr	r3, [r3, #24]
 8009726:	f003 0301 	and.w	r3, r3, #1
 800972a:	60bb      	str	r3, [r7, #8]
 800972c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800972e:	4b0f      	ldr	r3, [pc, #60]	@ (800976c <HAL_MspInit+0x5c>)
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	4a0e      	ldr	r2, [pc, #56]	@ (800976c <HAL_MspInit+0x5c>)
 8009734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009738:	61d3      	str	r3, [r2, #28]
 800973a:	4b0c      	ldr	r3, [pc, #48]	@ (800976c <HAL_MspInit+0x5c>)
 800973c:	69db      	ldr	r3, [r3, #28]
 800973e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009742:	607b      	str	r3, [r7, #4]
 8009744:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8009746:	4b0a      	ldr	r3, [pc, #40]	@ (8009770 <HAL_MspInit+0x60>)
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	60fb      	str	r3, [r7, #12]
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8009752:	60fb      	str	r3, [r7, #12]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800975a:	60fb      	str	r3, [r7, #12]
 800975c:	4a04      	ldr	r2, [pc, #16]	@ (8009770 <HAL_MspInit+0x60>)
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009762:	bf00      	nop
 8009764:	3714      	adds	r7, #20
 8009766:	46bd      	mov	sp, r7
 8009768:	bc80      	pop	{r7}
 800976a:	4770      	bx	lr
 800976c:	40021000 	.word	0x40021000
 8009770:	40010000 	.word	0x40010000

08009774 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b088      	sub	sp, #32
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800977c:	f107 0310 	add.w	r3, r7, #16
 8009780:	2200      	movs	r2, #0
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	605a      	str	r2, [r3, #4]
 8009786:	609a      	str	r2, [r3, #8]
 8009788:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a1c      	ldr	r2, [pc, #112]	@ (8009800 <HAL_CAN_MspInit+0x8c>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d131      	bne.n	80097f8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8009794:	4b1b      	ldr	r3, [pc, #108]	@ (8009804 <HAL_CAN_MspInit+0x90>)
 8009796:	69db      	ldr	r3, [r3, #28]
 8009798:	4a1a      	ldr	r2, [pc, #104]	@ (8009804 <HAL_CAN_MspInit+0x90>)
 800979a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800979e:	61d3      	str	r3, [r2, #28]
 80097a0:	4b18      	ldr	r3, [pc, #96]	@ (8009804 <HAL_CAN_MspInit+0x90>)
 80097a2:	69db      	ldr	r3, [r3, #28]
 80097a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097a8:	60fb      	str	r3, [r7, #12]
 80097aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097ac:	4b15      	ldr	r3, [pc, #84]	@ (8009804 <HAL_CAN_MspInit+0x90>)
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	4a14      	ldr	r2, [pc, #80]	@ (8009804 <HAL_CAN_MspInit+0x90>)
 80097b2:	f043 0304 	orr.w	r3, r3, #4
 80097b6:	6193      	str	r3, [r2, #24]
 80097b8:	4b12      	ldr	r3, [pc, #72]	@ (8009804 <HAL_CAN_MspInit+0x90>)
 80097ba:	699b      	ldr	r3, [r3, #24]
 80097bc:	f003 0304 	and.w	r3, r3, #4
 80097c0:	60bb      	str	r3, [r7, #8]
 80097c2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80097c4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80097c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80097ca:	2300      	movs	r3, #0
 80097cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097ce:	2300      	movs	r3, #0
 80097d0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097d2:	f107 0310 	add.w	r3, r7, #16
 80097d6:	4619      	mov	r1, r3
 80097d8:	480b      	ldr	r0, [pc, #44]	@ (8009808 <HAL_CAN_MspInit+0x94>)
 80097da:	f000 fdf3 	bl	800a3c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80097de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80097e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097e4:	2302      	movs	r3, #2
 80097e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80097e8:	2303      	movs	r3, #3
 80097ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097ec:	f107 0310 	add.w	r3, r7, #16
 80097f0:	4619      	mov	r1, r3
 80097f2:	4805      	ldr	r0, [pc, #20]	@ (8009808 <HAL_CAN_MspInit+0x94>)
 80097f4:	f000 fde6 	bl	800a3c4 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80097f8:	bf00      	nop
 80097fa:	3720      	adds	r7, #32
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	40006400 	.word	0x40006400
 8009804:	40021000 	.word	0x40021000
 8009808:	40010800 	.word	0x40010800

0800980c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b088      	sub	sp, #32
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009814:	f107 0310 	add.w	r3, r7, #16
 8009818:	2200      	movs	r2, #0
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	605a      	str	r2, [r3, #4]
 800981e:	609a      	str	r2, [r3, #8]
 8009820:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a15      	ldr	r2, [pc, #84]	@ (800987c <HAL_I2C_MspInit+0x70>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d123      	bne.n	8009874 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800982c:	4b14      	ldr	r3, [pc, #80]	@ (8009880 <HAL_I2C_MspInit+0x74>)
 800982e:	699b      	ldr	r3, [r3, #24]
 8009830:	4a13      	ldr	r2, [pc, #76]	@ (8009880 <HAL_I2C_MspInit+0x74>)
 8009832:	f043 0308 	orr.w	r3, r3, #8
 8009836:	6193      	str	r3, [r2, #24]
 8009838:	4b11      	ldr	r3, [pc, #68]	@ (8009880 <HAL_I2C_MspInit+0x74>)
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	f003 0308 	and.w	r3, r3, #8
 8009840:	60fb      	str	r3, [r7, #12]
 8009842:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009844:	23c0      	movs	r3, #192	@ 0xc0
 8009846:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009848:	2312      	movs	r3, #18
 800984a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800984c:	2303      	movs	r3, #3
 800984e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009850:	f107 0310 	add.w	r3, r7, #16
 8009854:	4619      	mov	r1, r3
 8009856:	480b      	ldr	r0, [pc, #44]	@ (8009884 <HAL_I2C_MspInit+0x78>)
 8009858:	f000 fdb4 	bl	800a3c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800985c:	4b08      	ldr	r3, [pc, #32]	@ (8009880 <HAL_I2C_MspInit+0x74>)
 800985e:	69db      	ldr	r3, [r3, #28]
 8009860:	4a07      	ldr	r2, [pc, #28]	@ (8009880 <HAL_I2C_MspInit+0x74>)
 8009862:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009866:	61d3      	str	r3, [r2, #28]
 8009868:	4b05      	ldr	r3, [pc, #20]	@ (8009880 <HAL_I2C_MspInit+0x74>)
 800986a:	69db      	ldr	r3, [r3, #28]
 800986c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009870:	60bb      	str	r3, [r7, #8]
 8009872:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8009874:	bf00      	nop
 8009876:	3720      	adds	r7, #32
 8009878:	46bd      	mov	sp, r7
 800987a:	bd80      	pop	{r7, pc}
 800987c:	40005400 	.word	0x40005400
 8009880:	40021000 	.word	0x40021000
 8009884:	40010c00 	.word	0x40010c00

08009888 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b082      	sub	sp, #8
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a0a      	ldr	r2, [pc, #40]	@ (80098c0 <HAL_I2C_MspDeInit+0x38>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d10d      	bne.n	80098b6 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800989a:	4b0a      	ldr	r3, [pc, #40]	@ (80098c4 <HAL_I2C_MspDeInit+0x3c>)
 800989c:	69db      	ldr	r3, [r3, #28]
 800989e:	4a09      	ldr	r2, [pc, #36]	@ (80098c4 <HAL_I2C_MspDeInit+0x3c>)
 80098a0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80098a4:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80098a6:	2140      	movs	r1, #64	@ 0x40
 80098a8:	4807      	ldr	r0, [pc, #28]	@ (80098c8 <HAL_I2C_MspDeInit+0x40>)
 80098aa:	f000 ff1f 	bl	800a6ec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80098ae:	2180      	movs	r1, #128	@ 0x80
 80098b0:	4805      	ldr	r0, [pc, #20]	@ (80098c8 <HAL_I2C_MspDeInit+0x40>)
 80098b2:	f000 ff1b 	bl	800a6ec <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80098b6:	bf00      	nop
 80098b8:	3708      	adds	r7, #8
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	bf00      	nop
 80098c0:	40005400 	.word	0x40005400
 80098c4:	40021000 	.word	0x40021000
 80098c8:	40010c00 	.word	0x40010c00

080098cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a0d      	ldr	r2, [pc, #52]	@ (8009910 <HAL_TIM_Base_MspInit+0x44>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d113      	bne.n	8009906 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80098de:	4b0d      	ldr	r3, [pc, #52]	@ (8009914 <HAL_TIM_Base_MspInit+0x48>)
 80098e0:	699b      	ldr	r3, [r3, #24]
 80098e2:	4a0c      	ldr	r2, [pc, #48]	@ (8009914 <HAL_TIM_Base_MspInit+0x48>)
 80098e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80098e8:	6193      	str	r3, [r2, #24]
 80098ea:	4b0a      	ldr	r3, [pc, #40]	@ (8009914 <HAL_TIM_Base_MspInit+0x48>)
 80098ec:	699b      	ldr	r3, [r3, #24]
 80098ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80098f2:	60fb      	str	r3, [r7, #12]
 80098f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80098f6:	2200      	movs	r2, #0
 80098f8:	2100      	movs	r1, #0
 80098fa:	2019      	movs	r0, #25
 80098fc:	f000 fb5b 	bl	8009fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8009900:	2019      	movs	r0, #25
 8009902:	f000 fb74 	bl	8009fee <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8009906:	bf00      	nop
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	40012c00 	.word	0x40012c00
 8009914:	40021000 	.word	0x40021000

08009918 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b088      	sub	sp, #32
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009920:	f107 0310 	add.w	r3, r7, #16
 8009924:	2200      	movs	r2, #0
 8009926:	601a      	str	r2, [r3, #0]
 8009928:	605a      	str	r2, [r3, #4]
 800992a:	609a      	str	r2, [r3, #8]
 800992c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a20      	ldr	r2, [pc, #128]	@ (80099b4 <HAL_UART_MspInit+0x9c>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d139      	bne.n	80099ac <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009938:	4b1f      	ldr	r3, [pc, #124]	@ (80099b8 <HAL_UART_MspInit+0xa0>)
 800993a:	699b      	ldr	r3, [r3, #24]
 800993c:	4a1e      	ldr	r2, [pc, #120]	@ (80099b8 <HAL_UART_MspInit+0xa0>)
 800993e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009942:	6193      	str	r3, [r2, #24]
 8009944:	4b1c      	ldr	r3, [pc, #112]	@ (80099b8 <HAL_UART_MspInit+0xa0>)
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800994c:	60fb      	str	r3, [r7, #12]
 800994e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009950:	4b19      	ldr	r3, [pc, #100]	@ (80099b8 <HAL_UART_MspInit+0xa0>)
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	4a18      	ldr	r2, [pc, #96]	@ (80099b8 <HAL_UART_MspInit+0xa0>)
 8009956:	f043 0304 	orr.w	r3, r3, #4
 800995a:	6193      	str	r3, [r2, #24]
 800995c:	4b16      	ldr	r3, [pc, #88]	@ (80099b8 <HAL_UART_MspInit+0xa0>)
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	f003 0304 	and.w	r3, r3, #4
 8009964:	60bb      	str	r3, [r7, #8]
 8009966:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009968:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800996c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800996e:	2302      	movs	r3, #2
 8009970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009972:	2303      	movs	r3, #3
 8009974:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009976:	f107 0310 	add.w	r3, r7, #16
 800997a:	4619      	mov	r1, r3
 800997c:	480f      	ldr	r0, [pc, #60]	@ (80099bc <HAL_UART_MspInit+0xa4>)
 800997e:	f000 fd21 	bl	800a3c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009982:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009986:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009988:	2300      	movs	r3, #0
 800998a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800998c:	2300      	movs	r3, #0
 800998e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009990:	f107 0310 	add.w	r3, r7, #16
 8009994:	4619      	mov	r1, r3
 8009996:	4809      	ldr	r0, [pc, #36]	@ (80099bc <HAL_UART_MspInit+0xa4>)
 8009998:	f000 fd14 	bl	800a3c4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800999c:	2200      	movs	r2, #0
 800999e:	2100      	movs	r1, #0
 80099a0:	2025      	movs	r0, #37	@ 0x25
 80099a2:	f000 fb08 	bl	8009fb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80099a6:	2025      	movs	r0, #37	@ 0x25
 80099a8:	f000 fb21 	bl	8009fee <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80099ac:	bf00      	nop
 80099ae:	3720      	adds	r7, #32
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}
 80099b4:	40013800 	.word	0x40013800
 80099b8:	40021000 	.word	0x40021000
 80099bc:	40010800 	.word	0x40010800

080099c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80099c0:	b480      	push	{r7}
 80099c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80099c4:	bf00      	nop
 80099c6:	e7fd      	b.n	80099c4 <NMI_Handler+0x4>

080099c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80099c8:	b480      	push	{r7}
 80099ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80099cc:	bf00      	nop
 80099ce:	e7fd      	b.n	80099cc <HardFault_Handler+0x4>

080099d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80099d0:	b480      	push	{r7}
 80099d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80099d4:	bf00      	nop
 80099d6:	e7fd      	b.n	80099d4 <MemManage_Handler+0x4>

080099d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80099d8:	b480      	push	{r7}
 80099da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80099dc:	bf00      	nop
 80099de:	e7fd      	b.n	80099dc <BusFault_Handler+0x4>

080099e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80099e0:	b480      	push	{r7}
 80099e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80099e4:	bf00      	nop
 80099e6:	e7fd      	b.n	80099e4 <UsageFault_Handler+0x4>

080099e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80099e8:	b480      	push	{r7}
 80099ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80099ec:	bf00      	nop
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bc80      	pop	{r7}
 80099f2:	4770      	bx	lr

080099f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80099f4:	b480      	push	{r7}
 80099f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80099f8:	bf00      	nop
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bc80      	pop	{r7}
 80099fe:	4770      	bx	lr

08009a00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009a00:	b480      	push	{r7}
 8009a02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009a04:	bf00      	nop
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bc80      	pop	{r7}
 8009a0a:	4770      	bx	lr

08009a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009a10:	f000 f8be 	bl	8009b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009a14:	bf00      	nop
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009a1c:	4802      	ldr	r0, [pc, #8]	@ (8009a28 <TIM1_UP_IRQHandler+0x10>)
 8009a1e:	f002 fe5b 	bl	800c6d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8009a22:	bf00      	nop
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	20001990 	.word	0x20001990

08009a2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009a30:	4802      	ldr	r0, [pc, #8]	@ (8009a3c <USART1_IRQHandler+0x10>)
 8009a32:	f003 faef 	bl	800d014 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009a36:	bf00      	nop
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	200019d8 	.word	0x200019d8

08009a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009a48:	4a14      	ldr	r2, [pc, #80]	@ (8009a9c <_sbrk+0x5c>)
 8009a4a:	4b15      	ldr	r3, [pc, #84]	@ (8009aa0 <_sbrk+0x60>)
 8009a4c:	1ad3      	subs	r3, r2, r3
 8009a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009a54:	4b13      	ldr	r3, [pc, #76]	@ (8009aa4 <_sbrk+0x64>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d102      	bne.n	8009a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009a5c:	4b11      	ldr	r3, [pc, #68]	@ (8009aa4 <_sbrk+0x64>)
 8009a5e:	4a12      	ldr	r2, [pc, #72]	@ (8009aa8 <_sbrk+0x68>)
 8009a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009a62:	4b10      	ldr	r3, [pc, #64]	@ (8009aa4 <_sbrk+0x64>)
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	4413      	add	r3, r2
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	429a      	cmp	r2, r3
 8009a6e:	d207      	bcs.n	8009a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009a70:	f004 fb60 	bl	800e134 <__errno>
 8009a74:	4603      	mov	r3, r0
 8009a76:	220c      	movs	r2, #12
 8009a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8009a7e:	e009      	b.n	8009a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009a80:	4b08      	ldr	r3, [pc, #32]	@ (8009aa4 <_sbrk+0x64>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009a86:	4b07      	ldr	r3, [pc, #28]	@ (8009aa4 <_sbrk+0x64>)
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	4a05      	ldr	r2, [pc, #20]	@ (8009aa4 <_sbrk+0x64>)
 8009a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009a92:	68fb      	ldr	r3, [r7, #12]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	2000c000 	.word	0x2000c000
 8009aa0:	00000400 	.word	0x00000400
 8009aa4:	20001a20 	.word	0x20001a20
 8009aa8:	20001b70 	.word	0x20001b70

08009aac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009aac:	b480      	push	{r7}
 8009aae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009ab0:	bf00      	nop
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bc80      	pop	{r7}
 8009ab6:	4770      	bx	lr

08009ab8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009ab8:	480c      	ldr	r0, [pc, #48]	@ (8009aec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009aba:	490d      	ldr	r1, [pc, #52]	@ (8009af0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009abc:	4a0d      	ldr	r2, [pc, #52]	@ (8009af4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009ac0:	e002      	b.n	8009ac8 <LoopCopyDataInit>

08009ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009ac6:	3304      	adds	r3, #4

08009ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009acc:	d3f9      	bcc.n	8009ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009ace:	4a0a      	ldr	r2, [pc, #40]	@ (8009af8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8009afc <LoopFillZerobss+0x22>)
  movs r3, #0
 8009ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009ad4:	e001      	b.n	8009ada <LoopFillZerobss>

08009ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009ad8:	3204      	adds	r2, #4

08009ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009adc:	d3fb      	bcc.n	8009ad6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009ade:	f7ff ffe5 	bl	8009aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009ae2:	f004 fb2d 	bl	800e140 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009ae6:	f7ff fb99 	bl	800921c <main>
  bx lr
 8009aea:	4770      	bx	lr
  ldr r0, =_sdata
 8009aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009af0:	20000fd0 	.word	0x20000fd0
  ldr r2, =_sidata
 8009af4:	0800f4ac 	.word	0x0800f4ac
  ldr r2, =_sbss
 8009af8:	20000fd0 	.word	0x20000fd0
  ldr r4, =_ebss
 8009afc:	20001b70 	.word	0x20001b70

08009b00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009b00:	e7fe      	b.n	8009b00 <ADC1_2_IRQHandler>
	...

08009b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009b08:	4b08      	ldr	r3, [pc, #32]	@ (8009b2c <HAL_Init+0x28>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a07      	ldr	r2, [pc, #28]	@ (8009b2c <HAL_Init+0x28>)
 8009b0e:	f043 0310 	orr.w	r3, r3, #16
 8009b12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009b14:	2003      	movs	r0, #3
 8009b16:	f000 fa43 	bl	8009fa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009b1a:	200f      	movs	r0, #15
 8009b1c:	f000 f808 	bl	8009b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009b20:	f7ff fdf6 	bl	8009710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009b24:	2300      	movs	r3, #0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	40022000 	.word	0x40022000

08009b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009b38:	4b12      	ldr	r3, [pc, #72]	@ (8009b84 <HAL_InitTick+0x54>)
 8009b3a:	681a      	ldr	r2, [r3, #0]
 8009b3c:	4b12      	ldr	r3, [pc, #72]	@ (8009b88 <HAL_InitTick+0x58>)
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	4619      	mov	r1, r3
 8009b42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 fa5b 	bl	800a00a <HAL_SYSTICK_Config>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d001      	beq.n	8009b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e00e      	b.n	8009b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2b0f      	cmp	r3, #15
 8009b62:	d80a      	bhi.n	8009b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009b64:	2200      	movs	r2, #0
 8009b66:	6879      	ldr	r1, [r7, #4]
 8009b68:	f04f 30ff 	mov.w	r0, #4294967295
 8009b6c:	f000 fa23 	bl	8009fb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009b70:	4a06      	ldr	r2, [pc, #24]	@ (8009b8c <HAL_InitTick+0x5c>)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009b76:	2300      	movs	r3, #0
 8009b78:	e000      	b.n	8009b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	20000f74 	.word	0x20000f74
 8009b88:	20000f7c 	.word	0x20000f7c
 8009b8c:	20000f78 	.word	0x20000f78

08009b90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009b90:	b480      	push	{r7}
 8009b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009b94:	4b05      	ldr	r3, [pc, #20]	@ (8009bac <HAL_IncTick+0x1c>)
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	461a      	mov	r2, r3
 8009b9a:	4b05      	ldr	r3, [pc, #20]	@ (8009bb0 <HAL_IncTick+0x20>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	4a03      	ldr	r2, [pc, #12]	@ (8009bb0 <HAL_IncTick+0x20>)
 8009ba2:	6013      	str	r3, [r2, #0]
}
 8009ba4:	bf00      	nop
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bc80      	pop	{r7}
 8009baa:	4770      	bx	lr
 8009bac:	20000f7c 	.word	0x20000f7c
 8009bb0:	20001a24 	.word	0x20001a24

08009bb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8009bb8:	4b02      	ldr	r3, [pc, #8]	@ (8009bc4 <HAL_GetTick+0x10>)
 8009bba:	681b      	ldr	r3, [r3, #0]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bc80      	pop	{r7}
 8009bc2:	4770      	bx	lr
 8009bc4:	20001a24 	.word	0x20001a24

08009bc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009bd0:	f7ff fff0 	bl	8009bb4 <HAL_GetTick>
 8009bd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be0:	d005      	beq.n	8009bee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009be2:	4b0a      	ldr	r3, [pc, #40]	@ (8009c0c <HAL_Delay+0x44>)
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	461a      	mov	r2, r3
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	4413      	add	r3, r2
 8009bec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009bee:	bf00      	nop
 8009bf0:	f7ff ffe0 	bl	8009bb4 <HAL_GetTick>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	1ad3      	subs	r3, r2, r3
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d8f7      	bhi.n	8009bf0 <HAL_Delay+0x28>
  {
  }
}
 8009c00:	bf00      	nop
 8009c02:	bf00      	nop
 8009c04:	3710      	adds	r7, #16
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}
 8009c0a:	bf00      	nop
 8009c0c:	20000f7c 	.word	0x20000f7c

08009c10 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b084      	sub	sp, #16
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d101      	bne.n	8009c22 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e0ed      	b.n	8009dfe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d102      	bne.n	8009c34 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f7ff fda0 	bl	8009774 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	681a      	ldr	r2, [r3, #0]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f042 0201 	orr.w	r2, r2, #1
 8009c42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009c44:	f7ff ffb6 	bl	8009bb4 <HAL_GetTick>
 8009c48:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009c4a:	e012      	b.n	8009c72 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009c4c:	f7ff ffb2 	bl	8009bb4 <HAL_GetTick>
 8009c50:	4602      	mov	r2, r0
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	1ad3      	subs	r3, r2, r3
 8009c56:	2b0a      	cmp	r3, #10
 8009c58:	d90b      	bls.n	8009c72 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c5e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2205      	movs	r2, #5
 8009c6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	e0c5      	b.n	8009dfe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	f003 0301 	and.w	r3, r3, #1
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d0e5      	beq.n	8009c4c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f022 0202 	bic.w	r2, r2, #2
 8009c8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009c90:	f7ff ff90 	bl	8009bb4 <HAL_GetTick>
 8009c94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009c96:	e012      	b.n	8009cbe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009c98:	f7ff ff8c 	bl	8009bb4 <HAL_GetTick>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	2b0a      	cmp	r3, #10
 8009ca4:	d90b      	bls.n	8009cbe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009caa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2205      	movs	r2, #5
 8009cb6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009cba:	2301      	movs	r3, #1
 8009cbc:	e09f      	b.n	8009dfe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	f003 0302 	and.w	r3, r3, #2
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d1e5      	bne.n	8009c98 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	7e1b      	ldrb	r3, [r3, #24]
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d108      	bne.n	8009ce6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	e007      	b.n	8009cf6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009cf4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	7e5b      	ldrb	r3, [r3, #25]
 8009cfa:	2b01      	cmp	r3, #1
 8009cfc:	d108      	bne.n	8009d10 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d0c:	601a      	str	r2, [r3, #0]
 8009d0e:	e007      	b.n	8009d20 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	7e9b      	ldrb	r3, [r3, #26]
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d108      	bne.n	8009d3a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f042 0220 	orr.w	r2, r2, #32
 8009d36:	601a      	str	r2, [r3, #0]
 8009d38:	e007      	b.n	8009d4a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f022 0220 	bic.w	r2, r2, #32
 8009d48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	7edb      	ldrb	r3, [r3, #27]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d108      	bne.n	8009d64 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	681a      	ldr	r2, [r3, #0]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f022 0210 	bic.w	r2, r2, #16
 8009d60:	601a      	str	r2, [r3, #0]
 8009d62:	e007      	b.n	8009d74 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f042 0210 	orr.w	r2, r2, #16
 8009d72:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	7f1b      	ldrb	r3, [r3, #28]
 8009d78:	2b01      	cmp	r3, #1
 8009d7a:	d108      	bne.n	8009d8e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f042 0208 	orr.w	r2, r2, #8
 8009d8a:	601a      	str	r2, [r3, #0]
 8009d8c:	e007      	b.n	8009d9e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f022 0208 	bic.w	r2, r2, #8
 8009d9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	7f5b      	ldrb	r3, [r3, #29]
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	d108      	bne.n	8009db8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f042 0204 	orr.w	r2, r2, #4
 8009db4:	601a      	str	r2, [r3, #0]
 8009db6:	e007      	b.n	8009dc8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f022 0204 	bic.w	r2, r2, #4
 8009dc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	689a      	ldr	r2, [r3, #8]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	68db      	ldr	r3, [r3, #12]
 8009dd0:	431a      	orrs	r2, r3
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	431a      	orrs	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	695b      	ldr	r3, [r3, #20]
 8009ddc:	ea42 0103 	orr.w	r1, r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	1e5a      	subs	r2, r3, #1
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	430a      	orrs	r2, r1
 8009dec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009dfc:	2300      	movs	r3, #0
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3710      	adds	r7, #16
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
	...

08009e08 <__NVIC_SetPriorityGrouping>:
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f003 0307 	and.w	r3, r3, #7
 8009e16:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009e18:	4b0c      	ldr	r3, [pc, #48]	@ (8009e4c <__NVIC_SetPriorityGrouping+0x44>)
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009e1e:	68ba      	ldr	r2, [r7, #8]
 8009e20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009e24:	4013      	ands	r3, r2
 8009e26:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009e30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009e34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009e3a:	4a04      	ldr	r2, [pc, #16]	@ (8009e4c <__NVIC_SetPriorityGrouping+0x44>)
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	60d3      	str	r3, [r2, #12]
}
 8009e40:	bf00      	nop
 8009e42:	3714      	adds	r7, #20
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bc80      	pop	{r7}
 8009e48:	4770      	bx	lr
 8009e4a:	bf00      	nop
 8009e4c:	e000ed00 	.word	0xe000ed00

08009e50 <__NVIC_GetPriorityGrouping>:
{
 8009e50:	b480      	push	{r7}
 8009e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009e54:	4b04      	ldr	r3, [pc, #16]	@ (8009e68 <__NVIC_GetPriorityGrouping+0x18>)
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	0a1b      	lsrs	r3, r3, #8
 8009e5a:	f003 0307 	and.w	r3, r3, #7
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bc80      	pop	{r7}
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	e000ed00 	.word	0xe000ed00

08009e6c <__NVIC_EnableIRQ>:
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	4603      	mov	r3, r0
 8009e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	db0b      	blt.n	8009e96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009e7e:	79fb      	ldrb	r3, [r7, #7]
 8009e80:	f003 021f 	and.w	r2, r3, #31
 8009e84:	4906      	ldr	r1, [pc, #24]	@ (8009ea0 <__NVIC_EnableIRQ+0x34>)
 8009e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e8a:	095b      	lsrs	r3, r3, #5
 8009e8c:	2001      	movs	r0, #1
 8009e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8009e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009e96:	bf00      	nop
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bc80      	pop	{r7}
 8009e9e:	4770      	bx	lr
 8009ea0:	e000e100 	.word	0xe000e100

08009ea4 <__NVIC_SetPriority>:
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	4603      	mov	r3, r0
 8009eac:	6039      	str	r1, [r7, #0]
 8009eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	db0a      	blt.n	8009ece <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	b2da      	uxtb	r2, r3
 8009ebc:	490c      	ldr	r1, [pc, #48]	@ (8009ef0 <__NVIC_SetPriority+0x4c>)
 8009ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ec2:	0112      	lsls	r2, r2, #4
 8009ec4:	b2d2      	uxtb	r2, r2
 8009ec6:	440b      	add	r3, r1
 8009ec8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009ecc:	e00a      	b.n	8009ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	b2da      	uxtb	r2, r3
 8009ed2:	4908      	ldr	r1, [pc, #32]	@ (8009ef4 <__NVIC_SetPriority+0x50>)
 8009ed4:	79fb      	ldrb	r3, [r7, #7]
 8009ed6:	f003 030f 	and.w	r3, r3, #15
 8009eda:	3b04      	subs	r3, #4
 8009edc:	0112      	lsls	r2, r2, #4
 8009ede:	b2d2      	uxtb	r2, r2
 8009ee0:	440b      	add	r3, r1
 8009ee2:	761a      	strb	r2, [r3, #24]
}
 8009ee4:	bf00      	nop
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bc80      	pop	{r7}
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	e000e100 	.word	0xe000e100
 8009ef4:	e000ed00 	.word	0xe000ed00

08009ef8 <NVIC_EncodePriority>:
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b089      	sub	sp, #36	@ 0x24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	60f8      	str	r0, [r7, #12]
 8009f00:	60b9      	str	r1, [r7, #8]
 8009f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f003 0307 	and.w	r3, r3, #7
 8009f0a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	f1c3 0307 	rsb	r3, r3, #7
 8009f12:	2b04      	cmp	r3, #4
 8009f14:	bf28      	it	cs
 8009f16:	2304      	movcs	r3, #4
 8009f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	3304      	adds	r3, #4
 8009f1e:	2b06      	cmp	r3, #6
 8009f20:	d902      	bls.n	8009f28 <NVIC_EncodePriority+0x30>
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	3b03      	subs	r3, #3
 8009f26:	e000      	b.n	8009f2a <NVIC_EncodePriority+0x32>
 8009f28:	2300      	movs	r3, #0
 8009f2a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	fa02 f303 	lsl.w	r3, r2, r3
 8009f36:	43da      	mvns	r2, r3
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	401a      	ands	r2, r3
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009f40:	f04f 31ff 	mov.w	r1, #4294967295
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	fa01 f303 	lsl.w	r3, r1, r3
 8009f4a:	43d9      	mvns	r1, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f50:	4313      	orrs	r3, r2
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3724      	adds	r7, #36	@ 0x24
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bc80      	pop	{r7}
 8009f5a:	4770      	bx	lr

08009f5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	3b01      	subs	r3, #1
 8009f68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f6c:	d301      	bcc.n	8009f72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009f6e:	2301      	movs	r3, #1
 8009f70:	e00f      	b.n	8009f92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009f72:	4a0a      	ldr	r2, [pc, #40]	@ (8009f9c <SysTick_Config+0x40>)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	3b01      	subs	r3, #1
 8009f78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009f7a:	210f      	movs	r1, #15
 8009f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f80:	f7ff ff90 	bl	8009ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009f84:	4b05      	ldr	r3, [pc, #20]	@ (8009f9c <SysTick_Config+0x40>)
 8009f86:	2200      	movs	r2, #0
 8009f88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009f8a:	4b04      	ldr	r3, [pc, #16]	@ (8009f9c <SysTick_Config+0x40>)
 8009f8c:	2207      	movs	r2, #7
 8009f8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3708      	adds	r7, #8
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	e000e010 	.word	0xe000e010

08009fa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f7ff ff2d 	bl	8009e08 <__NVIC_SetPriorityGrouping>
}
 8009fae:	bf00      	nop
 8009fb0:	3708      	adds	r7, #8
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b086      	sub	sp, #24
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	60b9      	str	r1, [r7, #8]
 8009fc0:	607a      	str	r2, [r7, #4]
 8009fc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009fc8:	f7ff ff42 	bl	8009e50 <__NVIC_GetPriorityGrouping>
 8009fcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	68b9      	ldr	r1, [r7, #8]
 8009fd2:	6978      	ldr	r0, [r7, #20]
 8009fd4:	f7ff ff90 	bl	8009ef8 <NVIC_EncodePriority>
 8009fd8:	4602      	mov	r2, r0
 8009fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fde:	4611      	mov	r1, r2
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	f7ff ff5f 	bl	8009ea4 <__NVIC_SetPriority>
}
 8009fe6:	bf00      	nop
 8009fe8:	3718      	adds	r7, #24
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}

08009fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b082      	sub	sp, #8
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f7ff ff35 	bl	8009e6c <__NVIC_EnableIRQ>
}
 800a002:	bf00      	nop
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b082      	sub	sp, #8
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f7ff ffa2 	bl	8009f5c <SysTick_Config>
 800a018:	4603      	mov	r3, r0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3708      	adds	r7, #8
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b086      	sub	sp, #24
 800a026:	af00      	add	r7, sp, #0
 800a028:	60f8      	str	r0, [r7, #12]
 800a02a:	60b9      	str	r1, [r7, #8]
 800a02c:	607a      	str	r2, [r7, #4]
 800a02e:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a030:	2300      	movs	r3, #0
 800a032:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a03a:	2b01      	cmp	r3, #1
 800a03c:	d101      	bne.n	800a042 <HAL_DMA_Start_IT+0x20>
 800a03e:	2302      	movs	r3, #2
 800a040:	e04b      	b.n	800a0da <HAL_DMA_Start_IT+0xb8>
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2201      	movs	r2, #1
 800a046:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a050:	b2db      	uxtb	r3, r3
 800a052:	2b01      	cmp	r3, #1
 800a054:	d13a      	bne.n	800a0cc <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2202      	movs	r2, #2
 800a05a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2200      	movs	r2, #0
 800a062:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	681a      	ldr	r2, [r3, #0]
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f022 0201 	bic.w	r2, r2, #1
 800a072:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a074:	683b      	ldr	r3, [r7, #0]
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	68b9      	ldr	r1, [r7, #8]
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f000 f974 	bl	800a368 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a084:	2b00      	cmp	r3, #0
 800a086:	d008      	beq.n	800a09a <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f042 020e 	orr.w	r2, r2, #14
 800a096:	601a      	str	r2, [r3, #0]
 800a098:	e00f      	b.n	800a0ba <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f022 0204 	bic.w	r2, r2, #4
 800a0a8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f042 020a 	orr.w	r2, r2, #10
 800a0b8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f042 0201 	orr.w	r2, r2, #1
 800a0c8:	601a      	str	r2, [r3, #0]
 800a0ca:	e005      	b.n	800a0d8 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800a0d4:	2302      	movs	r3, #2
 800a0d6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800a0d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3718      	adds	r7, #24
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a0e2:	b480      	push	{r7}
 800a0e4:	b085      	sub	sp, #20
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	2b02      	cmp	r3, #2
 800a0f8:	d008      	beq.n	800a10c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2204      	movs	r2, #4
 800a0fe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2200      	movs	r2, #0
 800a104:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	e020      	b.n	800a14e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f022 020e 	bic.w	r2, r2, #14
 800a11a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f022 0201 	bic.w	r2, r2, #1
 800a12a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a134:	2101      	movs	r1, #1
 800a136:	fa01 f202 	lsl.w	r2, r1, r2
 800a13a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2201      	movs	r2, #1
 800a140:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800a14c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3714      	adds	r7, #20
 800a152:	46bd      	mov	sp, r7
 800a154:	bc80      	pop	{r7}
 800a156:	4770      	bx	lr

0800a158 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a160:	2300      	movs	r3, #0
 800a162:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d005      	beq.n	800a17c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2204      	movs	r2, #4
 800a174:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800a176:	2301      	movs	r3, #1
 800a178:	73fb      	strb	r3, [r7, #15]
 800a17a:	e0d6      	b.n	800a32a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f022 020e 	bic.w	r2, r2, #14
 800a18a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	681a      	ldr	r2, [r3, #0]
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f022 0201 	bic.w	r2, r2, #1
 800a19a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	4b64      	ldr	r3, [pc, #400]	@ (800a334 <HAL_DMA_Abort_IT+0x1dc>)
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d958      	bls.n	800a25a <HAL_DMA_Abort_IT+0x102>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	4a62      	ldr	r2, [pc, #392]	@ (800a338 <HAL_DMA_Abort_IT+0x1e0>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d04f      	beq.n	800a252 <HAL_DMA_Abort_IT+0xfa>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a61      	ldr	r2, [pc, #388]	@ (800a33c <HAL_DMA_Abort_IT+0x1e4>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d048      	beq.n	800a24e <HAL_DMA_Abort_IT+0xf6>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a5f      	ldr	r2, [pc, #380]	@ (800a340 <HAL_DMA_Abort_IT+0x1e8>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d040      	beq.n	800a248 <HAL_DMA_Abort_IT+0xf0>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a5e      	ldr	r2, [pc, #376]	@ (800a344 <HAL_DMA_Abort_IT+0x1ec>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d038      	beq.n	800a242 <HAL_DMA_Abort_IT+0xea>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4a5c      	ldr	r2, [pc, #368]	@ (800a348 <HAL_DMA_Abort_IT+0x1f0>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d030      	beq.n	800a23c <HAL_DMA_Abort_IT+0xe4>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a5b      	ldr	r2, [pc, #364]	@ (800a34c <HAL_DMA_Abort_IT+0x1f4>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d028      	beq.n	800a236 <HAL_DMA_Abort_IT+0xde>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a52      	ldr	r2, [pc, #328]	@ (800a334 <HAL_DMA_Abort_IT+0x1dc>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d020      	beq.n	800a230 <HAL_DMA_Abort_IT+0xd8>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	4a57      	ldr	r2, [pc, #348]	@ (800a350 <HAL_DMA_Abort_IT+0x1f8>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d019      	beq.n	800a22c <HAL_DMA_Abort_IT+0xd4>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a55      	ldr	r2, [pc, #340]	@ (800a354 <HAL_DMA_Abort_IT+0x1fc>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d012      	beq.n	800a228 <HAL_DMA_Abort_IT+0xd0>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a54      	ldr	r2, [pc, #336]	@ (800a358 <HAL_DMA_Abort_IT+0x200>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d00a      	beq.n	800a222 <HAL_DMA_Abort_IT+0xca>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a52      	ldr	r2, [pc, #328]	@ (800a35c <HAL_DMA_Abort_IT+0x204>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d102      	bne.n	800a21c <HAL_DMA_Abort_IT+0xc4>
 800a216:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a21a:	e01b      	b.n	800a254 <HAL_DMA_Abort_IT+0xfc>
 800a21c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a220:	e018      	b.n	800a254 <HAL_DMA_Abort_IT+0xfc>
 800a222:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a226:	e015      	b.n	800a254 <HAL_DMA_Abort_IT+0xfc>
 800a228:	2310      	movs	r3, #16
 800a22a:	e013      	b.n	800a254 <HAL_DMA_Abort_IT+0xfc>
 800a22c:	2301      	movs	r3, #1
 800a22e:	e011      	b.n	800a254 <HAL_DMA_Abort_IT+0xfc>
 800a230:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a234:	e00e      	b.n	800a254 <HAL_DMA_Abort_IT+0xfc>
 800a236:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a23a:	e00b      	b.n	800a254 <HAL_DMA_Abort_IT+0xfc>
 800a23c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a240:	e008      	b.n	800a254 <HAL_DMA_Abort_IT+0xfc>
 800a242:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a246:	e005      	b.n	800a254 <HAL_DMA_Abort_IT+0xfc>
 800a248:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a24c:	e002      	b.n	800a254 <HAL_DMA_Abort_IT+0xfc>
 800a24e:	2310      	movs	r3, #16
 800a250:	e000      	b.n	800a254 <HAL_DMA_Abort_IT+0xfc>
 800a252:	2301      	movs	r3, #1
 800a254:	4a42      	ldr	r2, [pc, #264]	@ (800a360 <HAL_DMA_Abort_IT+0x208>)
 800a256:	6053      	str	r3, [r2, #4]
 800a258:	e057      	b.n	800a30a <HAL_DMA_Abort_IT+0x1b2>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a36      	ldr	r2, [pc, #216]	@ (800a338 <HAL_DMA_Abort_IT+0x1e0>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d04f      	beq.n	800a304 <HAL_DMA_Abort_IT+0x1ac>
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a34      	ldr	r2, [pc, #208]	@ (800a33c <HAL_DMA_Abort_IT+0x1e4>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d048      	beq.n	800a300 <HAL_DMA_Abort_IT+0x1a8>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a33      	ldr	r2, [pc, #204]	@ (800a340 <HAL_DMA_Abort_IT+0x1e8>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d040      	beq.n	800a2fa <HAL_DMA_Abort_IT+0x1a2>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a31      	ldr	r2, [pc, #196]	@ (800a344 <HAL_DMA_Abort_IT+0x1ec>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d038      	beq.n	800a2f4 <HAL_DMA_Abort_IT+0x19c>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a30      	ldr	r2, [pc, #192]	@ (800a348 <HAL_DMA_Abort_IT+0x1f0>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d030      	beq.n	800a2ee <HAL_DMA_Abort_IT+0x196>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a2e      	ldr	r2, [pc, #184]	@ (800a34c <HAL_DMA_Abort_IT+0x1f4>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d028      	beq.n	800a2e8 <HAL_DMA_Abort_IT+0x190>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a26      	ldr	r2, [pc, #152]	@ (800a334 <HAL_DMA_Abort_IT+0x1dc>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d020      	beq.n	800a2e2 <HAL_DMA_Abort_IT+0x18a>
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	4a2a      	ldr	r2, [pc, #168]	@ (800a350 <HAL_DMA_Abort_IT+0x1f8>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d019      	beq.n	800a2de <HAL_DMA_Abort_IT+0x186>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a29      	ldr	r2, [pc, #164]	@ (800a354 <HAL_DMA_Abort_IT+0x1fc>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d012      	beq.n	800a2da <HAL_DMA_Abort_IT+0x182>
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4a27      	ldr	r2, [pc, #156]	@ (800a358 <HAL_DMA_Abort_IT+0x200>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d00a      	beq.n	800a2d4 <HAL_DMA_Abort_IT+0x17c>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	4a26      	ldr	r2, [pc, #152]	@ (800a35c <HAL_DMA_Abort_IT+0x204>)
 800a2c4:	4293      	cmp	r3, r2
 800a2c6:	d102      	bne.n	800a2ce <HAL_DMA_Abort_IT+0x176>
 800a2c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a2cc:	e01b      	b.n	800a306 <HAL_DMA_Abort_IT+0x1ae>
 800a2ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a2d2:	e018      	b.n	800a306 <HAL_DMA_Abort_IT+0x1ae>
 800a2d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a2d8:	e015      	b.n	800a306 <HAL_DMA_Abort_IT+0x1ae>
 800a2da:	2310      	movs	r3, #16
 800a2dc:	e013      	b.n	800a306 <HAL_DMA_Abort_IT+0x1ae>
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e011      	b.n	800a306 <HAL_DMA_Abort_IT+0x1ae>
 800a2e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a2e6:	e00e      	b.n	800a306 <HAL_DMA_Abort_IT+0x1ae>
 800a2e8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a2ec:	e00b      	b.n	800a306 <HAL_DMA_Abort_IT+0x1ae>
 800a2ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a2f2:	e008      	b.n	800a306 <HAL_DMA_Abort_IT+0x1ae>
 800a2f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a2f8:	e005      	b.n	800a306 <HAL_DMA_Abort_IT+0x1ae>
 800a2fa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a2fe:	e002      	b.n	800a306 <HAL_DMA_Abort_IT+0x1ae>
 800a300:	2310      	movs	r3, #16
 800a302:	e000      	b.n	800a306 <HAL_DMA_Abort_IT+0x1ae>
 800a304:	2301      	movs	r3, #1
 800a306:	4a17      	ldr	r2, [pc, #92]	@ (800a364 <HAL_DMA_Abort_IT+0x20c>)
 800a308:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2201      	movs	r2, #1
 800a30e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2200      	movs	r2, #0
 800a316:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d003      	beq.n	800a32a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	4798      	blx	r3
    } 
  }
  return status;
 800a32a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	40020080 	.word	0x40020080
 800a338:	40020008 	.word	0x40020008
 800a33c:	4002001c 	.word	0x4002001c
 800a340:	40020030 	.word	0x40020030
 800a344:	40020044 	.word	0x40020044
 800a348:	40020058 	.word	0x40020058
 800a34c:	4002006c 	.word	0x4002006c
 800a350:	40020408 	.word	0x40020408
 800a354:	4002041c 	.word	0x4002041c
 800a358:	40020430 	.word	0x40020430
 800a35c:	40020444 	.word	0x40020444
 800a360:	40020400 	.word	0x40020400
 800a364:	40020000 	.word	0x40020000

0800a368 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	60f8      	str	r0, [r7, #12]
 800a370:	60b9      	str	r1, [r7, #8]
 800a372:	607a      	str	r2, [r7, #4]
 800a374:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a37e:	2101      	movs	r1, #1
 800a380:	fa01 f202 	lsl.w	r2, r1, r2
 800a384:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	683a      	ldr	r2, [r7, #0]
 800a38c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	2b10      	cmp	r3, #16
 800a394:	d108      	bne.n	800a3a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	687a      	ldr	r2, [r7, #4]
 800a39c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800a3a6:	e007      	b.n	800a3b8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	68ba      	ldr	r2, [r7, #8]
 800a3ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	687a      	ldr	r2, [r7, #4]
 800a3b6:	60da      	str	r2, [r3, #12]
}
 800a3b8:	bf00      	nop
 800a3ba:	3714      	adds	r7, #20
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bc80      	pop	{r7}
 800a3c0:	4770      	bx	lr
	...

0800a3c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b08b      	sub	sp, #44	@ 0x2c
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
 800a3cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a3d6:	e179      	b.n	800a6cc <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800a3d8:	2201      	movs	r2, #1
 800a3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a3e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	69fa      	ldr	r2, [r7, #28]
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800a3ec:	69ba      	ldr	r2, [r7, #24]
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	f040 8168 	bne.w	800a6c6 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	4a96      	ldr	r2, [pc, #600]	@ (800a654 <HAL_GPIO_Init+0x290>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d05e      	beq.n	800a4be <HAL_GPIO_Init+0xfa>
 800a400:	4a94      	ldr	r2, [pc, #592]	@ (800a654 <HAL_GPIO_Init+0x290>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d875      	bhi.n	800a4f2 <HAL_GPIO_Init+0x12e>
 800a406:	4a94      	ldr	r2, [pc, #592]	@ (800a658 <HAL_GPIO_Init+0x294>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d058      	beq.n	800a4be <HAL_GPIO_Init+0xfa>
 800a40c:	4a92      	ldr	r2, [pc, #584]	@ (800a658 <HAL_GPIO_Init+0x294>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d86f      	bhi.n	800a4f2 <HAL_GPIO_Init+0x12e>
 800a412:	4a92      	ldr	r2, [pc, #584]	@ (800a65c <HAL_GPIO_Init+0x298>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d052      	beq.n	800a4be <HAL_GPIO_Init+0xfa>
 800a418:	4a90      	ldr	r2, [pc, #576]	@ (800a65c <HAL_GPIO_Init+0x298>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d869      	bhi.n	800a4f2 <HAL_GPIO_Init+0x12e>
 800a41e:	4a90      	ldr	r2, [pc, #576]	@ (800a660 <HAL_GPIO_Init+0x29c>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d04c      	beq.n	800a4be <HAL_GPIO_Init+0xfa>
 800a424:	4a8e      	ldr	r2, [pc, #568]	@ (800a660 <HAL_GPIO_Init+0x29c>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d863      	bhi.n	800a4f2 <HAL_GPIO_Init+0x12e>
 800a42a:	4a8e      	ldr	r2, [pc, #568]	@ (800a664 <HAL_GPIO_Init+0x2a0>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d046      	beq.n	800a4be <HAL_GPIO_Init+0xfa>
 800a430:	4a8c      	ldr	r2, [pc, #560]	@ (800a664 <HAL_GPIO_Init+0x2a0>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d85d      	bhi.n	800a4f2 <HAL_GPIO_Init+0x12e>
 800a436:	2b12      	cmp	r3, #18
 800a438:	d82a      	bhi.n	800a490 <HAL_GPIO_Init+0xcc>
 800a43a:	2b12      	cmp	r3, #18
 800a43c:	d859      	bhi.n	800a4f2 <HAL_GPIO_Init+0x12e>
 800a43e:	a201      	add	r2, pc, #4	@ (adr r2, 800a444 <HAL_GPIO_Init+0x80>)
 800a440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a444:	0800a4bf 	.word	0x0800a4bf
 800a448:	0800a499 	.word	0x0800a499
 800a44c:	0800a4ab 	.word	0x0800a4ab
 800a450:	0800a4ed 	.word	0x0800a4ed
 800a454:	0800a4f3 	.word	0x0800a4f3
 800a458:	0800a4f3 	.word	0x0800a4f3
 800a45c:	0800a4f3 	.word	0x0800a4f3
 800a460:	0800a4f3 	.word	0x0800a4f3
 800a464:	0800a4f3 	.word	0x0800a4f3
 800a468:	0800a4f3 	.word	0x0800a4f3
 800a46c:	0800a4f3 	.word	0x0800a4f3
 800a470:	0800a4f3 	.word	0x0800a4f3
 800a474:	0800a4f3 	.word	0x0800a4f3
 800a478:	0800a4f3 	.word	0x0800a4f3
 800a47c:	0800a4f3 	.word	0x0800a4f3
 800a480:	0800a4f3 	.word	0x0800a4f3
 800a484:	0800a4f3 	.word	0x0800a4f3
 800a488:	0800a4a1 	.word	0x0800a4a1
 800a48c:	0800a4b5 	.word	0x0800a4b5
 800a490:	4a75      	ldr	r2, [pc, #468]	@ (800a668 <HAL_GPIO_Init+0x2a4>)
 800a492:	4293      	cmp	r3, r2
 800a494:	d013      	beq.n	800a4be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800a496:	e02c      	b.n	800a4f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	68db      	ldr	r3, [r3, #12]
 800a49c:	623b      	str	r3, [r7, #32]
          break;
 800a49e:	e029      	b.n	800a4f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	3304      	adds	r3, #4
 800a4a6:	623b      	str	r3, [r7, #32]
          break;
 800a4a8:	e024      	b.n	800a4f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	3308      	adds	r3, #8
 800a4b0:	623b      	str	r3, [r7, #32]
          break;
 800a4b2:	e01f      	b.n	800a4f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	330c      	adds	r3, #12
 800a4ba:	623b      	str	r3, [r7, #32]
          break;
 800a4bc:	e01a      	b.n	800a4f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	689b      	ldr	r3, [r3, #8]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d102      	bne.n	800a4cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a4c6:	2304      	movs	r3, #4
 800a4c8:	623b      	str	r3, [r7, #32]
          break;
 800a4ca:	e013      	b.n	800a4f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d105      	bne.n	800a4e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a4d4:	2308      	movs	r3, #8
 800a4d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	69fa      	ldr	r2, [r7, #28]
 800a4dc:	611a      	str	r2, [r3, #16]
          break;
 800a4de:	e009      	b.n	800a4f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a4e0:	2308      	movs	r3, #8
 800a4e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	69fa      	ldr	r2, [r7, #28]
 800a4e8:	615a      	str	r2, [r3, #20]
          break;
 800a4ea:	e003      	b.n	800a4f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	623b      	str	r3, [r7, #32]
          break;
 800a4f0:	e000      	b.n	800a4f4 <HAL_GPIO_Init+0x130>
          break;
 800a4f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a4f4:	69bb      	ldr	r3, [r7, #24]
 800a4f6:	2bff      	cmp	r3, #255	@ 0xff
 800a4f8:	d801      	bhi.n	800a4fe <HAL_GPIO_Init+0x13a>
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	e001      	b.n	800a502 <HAL_GPIO_Init+0x13e>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	3304      	adds	r3, #4
 800a502:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	2bff      	cmp	r3, #255	@ 0xff
 800a508:	d802      	bhi.n	800a510 <HAL_GPIO_Init+0x14c>
 800a50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	e002      	b.n	800a516 <HAL_GPIO_Init+0x152>
 800a510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a512:	3b08      	subs	r3, #8
 800a514:	009b      	lsls	r3, r3, #2
 800a516:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	210f      	movs	r1, #15
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	fa01 f303 	lsl.w	r3, r1, r3
 800a524:	43db      	mvns	r3, r3
 800a526:	401a      	ands	r2, r3
 800a528:	6a39      	ldr	r1, [r7, #32]
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	fa01 f303 	lsl.w	r3, r1, r3
 800a530:	431a      	orrs	r2, r3
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	685b      	ldr	r3, [r3, #4]
 800a53a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a53e:	2b00      	cmp	r3, #0
 800a540:	f000 80c1 	beq.w	800a6c6 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a544:	4b49      	ldr	r3, [pc, #292]	@ (800a66c <HAL_GPIO_Init+0x2a8>)
 800a546:	699b      	ldr	r3, [r3, #24]
 800a548:	4a48      	ldr	r2, [pc, #288]	@ (800a66c <HAL_GPIO_Init+0x2a8>)
 800a54a:	f043 0301 	orr.w	r3, r3, #1
 800a54e:	6193      	str	r3, [r2, #24]
 800a550:	4b46      	ldr	r3, [pc, #280]	@ (800a66c <HAL_GPIO_Init+0x2a8>)
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	f003 0301 	and.w	r3, r3, #1
 800a558:	60bb      	str	r3, [r7, #8]
 800a55a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800a55c:	4a44      	ldr	r2, [pc, #272]	@ (800a670 <HAL_GPIO_Init+0x2ac>)
 800a55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a560:	089b      	lsrs	r3, r3, #2
 800a562:	3302      	adds	r3, #2
 800a564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a568:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a56a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a56c:	f003 0303 	and.w	r3, r3, #3
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	220f      	movs	r2, #15
 800a574:	fa02 f303 	lsl.w	r3, r2, r3
 800a578:	43db      	mvns	r3, r3
 800a57a:	68fa      	ldr	r2, [r7, #12]
 800a57c:	4013      	ands	r3, r2
 800a57e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4a3c      	ldr	r2, [pc, #240]	@ (800a674 <HAL_GPIO_Init+0x2b0>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d01f      	beq.n	800a5c8 <HAL_GPIO_Init+0x204>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a3b      	ldr	r2, [pc, #236]	@ (800a678 <HAL_GPIO_Init+0x2b4>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d019      	beq.n	800a5c4 <HAL_GPIO_Init+0x200>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4a3a      	ldr	r2, [pc, #232]	@ (800a67c <HAL_GPIO_Init+0x2b8>)
 800a594:	4293      	cmp	r3, r2
 800a596:	d013      	beq.n	800a5c0 <HAL_GPIO_Init+0x1fc>
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4a39      	ldr	r2, [pc, #228]	@ (800a680 <HAL_GPIO_Init+0x2bc>)
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d00d      	beq.n	800a5bc <HAL_GPIO_Init+0x1f8>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	4a38      	ldr	r2, [pc, #224]	@ (800a684 <HAL_GPIO_Init+0x2c0>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d007      	beq.n	800a5b8 <HAL_GPIO_Init+0x1f4>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	4a37      	ldr	r2, [pc, #220]	@ (800a688 <HAL_GPIO_Init+0x2c4>)
 800a5ac:	4293      	cmp	r3, r2
 800a5ae:	d101      	bne.n	800a5b4 <HAL_GPIO_Init+0x1f0>
 800a5b0:	2305      	movs	r3, #5
 800a5b2:	e00a      	b.n	800a5ca <HAL_GPIO_Init+0x206>
 800a5b4:	2306      	movs	r3, #6
 800a5b6:	e008      	b.n	800a5ca <HAL_GPIO_Init+0x206>
 800a5b8:	2304      	movs	r3, #4
 800a5ba:	e006      	b.n	800a5ca <HAL_GPIO_Init+0x206>
 800a5bc:	2303      	movs	r3, #3
 800a5be:	e004      	b.n	800a5ca <HAL_GPIO_Init+0x206>
 800a5c0:	2302      	movs	r3, #2
 800a5c2:	e002      	b.n	800a5ca <HAL_GPIO_Init+0x206>
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	e000      	b.n	800a5ca <HAL_GPIO_Init+0x206>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5cc:	f002 0203 	and.w	r2, r2, #3
 800a5d0:	0092      	lsls	r2, r2, #2
 800a5d2:	4093      	lsls	r3, r2
 800a5d4:	68fa      	ldr	r2, [r7, #12]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a5da:	4925      	ldr	r1, [pc, #148]	@ (800a670 <HAL_GPIO_Init+0x2ac>)
 800a5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5de:	089b      	lsrs	r3, r3, #2
 800a5e0:	3302      	adds	r3, #2
 800a5e2:	68fa      	ldr	r2, [r7, #12]
 800a5e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d006      	beq.n	800a602 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a5f4:	4b25      	ldr	r3, [pc, #148]	@ (800a68c <HAL_GPIO_Init+0x2c8>)
 800a5f6:	689a      	ldr	r2, [r3, #8]
 800a5f8:	4924      	ldr	r1, [pc, #144]	@ (800a68c <HAL_GPIO_Init+0x2c8>)
 800a5fa:	69bb      	ldr	r3, [r7, #24]
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	608b      	str	r3, [r1, #8]
 800a600:	e006      	b.n	800a610 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a602:	4b22      	ldr	r3, [pc, #136]	@ (800a68c <HAL_GPIO_Init+0x2c8>)
 800a604:	689a      	ldr	r2, [r3, #8]
 800a606:	69bb      	ldr	r3, [r7, #24]
 800a608:	43db      	mvns	r3, r3
 800a60a:	4920      	ldr	r1, [pc, #128]	@ (800a68c <HAL_GPIO_Init+0x2c8>)
 800a60c:	4013      	ands	r3, r2
 800a60e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	685b      	ldr	r3, [r3, #4]
 800a614:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d006      	beq.n	800a62a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a61c:	4b1b      	ldr	r3, [pc, #108]	@ (800a68c <HAL_GPIO_Init+0x2c8>)
 800a61e:	68da      	ldr	r2, [r3, #12]
 800a620:	491a      	ldr	r1, [pc, #104]	@ (800a68c <HAL_GPIO_Init+0x2c8>)
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	4313      	orrs	r3, r2
 800a626:	60cb      	str	r3, [r1, #12]
 800a628:	e006      	b.n	800a638 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a62a:	4b18      	ldr	r3, [pc, #96]	@ (800a68c <HAL_GPIO_Init+0x2c8>)
 800a62c:	68da      	ldr	r2, [r3, #12]
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	43db      	mvns	r3, r3
 800a632:	4916      	ldr	r1, [pc, #88]	@ (800a68c <HAL_GPIO_Init+0x2c8>)
 800a634:	4013      	ands	r3, r2
 800a636:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a640:	2b00      	cmp	r3, #0
 800a642:	d025      	beq.n	800a690 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a644:	4b11      	ldr	r3, [pc, #68]	@ (800a68c <HAL_GPIO_Init+0x2c8>)
 800a646:	685a      	ldr	r2, [r3, #4]
 800a648:	4910      	ldr	r1, [pc, #64]	@ (800a68c <HAL_GPIO_Init+0x2c8>)
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	604b      	str	r3, [r1, #4]
 800a650:	e025      	b.n	800a69e <HAL_GPIO_Init+0x2da>
 800a652:	bf00      	nop
 800a654:	10320000 	.word	0x10320000
 800a658:	10310000 	.word	0x10310000
 800a65c:	10220000 	.word	0x10220000
 800a660:	10210000 	.word	0x10210000
 800a664:	10120000 	.word	0x10120000
 800a668:	10110000 	.word	0x10110000
 800a66c:	40021000 	.word	0x40021000
 800a670:	40010000 	.word	0x40010000
 800a674:	40010800 	.word	0x40010800
 800a678:	40010c00 	.word	0x40010c00
 800a67c:	40011000 	.word	0x40011000
 800a680:	40011400 	.word	0x40011400
 800a684:	40011800 	.word	0x40011800
 800a688:	40011c00 	.word	0x40011c00
 800a68c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a690:	4b15      	ldr	r3, [pc, #84]	@ (800a6e8 <HAL_GPIO_Init+0x324>)
 800a692:	685a      	ldr	r2, [r3, #4]
 800a694:	69bb      	ldr	r3, [r7, #24]
 800a696:	43db      	mvns	r3, r3
 800a698:	4913      	ldr	r1, [pc, #76]	@ (800a6e8 <HAL_GPIO_Init+0x324>)
 800a69a:	4013      	ands	r3, r2
 800a69c:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d006      	beq.n	800a6b8 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a6aa:	4b0f      	ldr	r3, [pc, #60]	@ (800a6e8 <HAL_GPIO_Init+0x324>)
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	490e      	ldr	r1, [pc, #56]	@ (800a6e8 <HAL_GPIO_Init+0x324>)
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	600b      	str	r3, [r1, #0]
 800a6b6:	e006      	b.n	800a6c6 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a6b8:	4b0b      	ldr	r3, [pc, #44]	@ (800a6e8 <HAL_GPIO_Init+0x324>)
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	69bb      	ldr	r3, [r7, #24]
 800a6be:	43db      	mvns	r3, r3
 800a6c0:	4909      	ldr	r1, [pc, #36]	@ (800a6e8 <HAL_GPIO_Init+0x324>)
 800a6c2:	4013      	ands	r3, r2
 800a6c4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	681a      	ldr	r2, [r3, #0]
 800a6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	f47f ae7e 	bne.w	800a3d8 <HAL_GPIO_Init+0x14>
  }
}
 800a6dc:	bf00      	nop
 800a6de:	bf00      	nop
 800a6e0:	372c      	adds	r7, #44	@ 0x2c
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bc80      	pop	{r7}
 800a6e6:	4770      	bx	lr
 800a6e8:	40010400 	.word	0x40010400

0800a6ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b089      	sub	sp, #36	@ 0x24
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800a6fa:	e0a6      	b.n	800a84a <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	69fb      	ldr	r3, [r7, #28]
 800a700:	fa02 f303 	lsl.w	r3, r2, r3
 800a704:	683a      	ldr	r2, [r7, #0]
 800a706:	4013      	ands	r3, r2
 800a708:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f000 8099 	beq.w	800a844 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800a712:	4a54      	ldr	r2, [pc, #336]	@ (800a864 <HAL_GPIO_DeInit+0x178>)
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	089b      	lsrs	r3, r3, #2
 800a718:	3302      	adds	r3, #2
 800a71a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a71e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	f003 0303 	and.w	r3, r3, #3
 800a726:	009b      	lsls	r3, r3, #2
 800a728:	220f      	movs	r2, #15
 800a72a:	fa02 f303 	lsl.w	r3, r2, r3
 800a72e:	697a      	ldr	r2, [r7, #20]
 800a730:	4013      	ands	r3, r2
 800a732:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	4a4c      	ldr	r2, [pc, #304]	@ (800a868 <HAL_GPIO_DeInit+0x17c>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d01f      	beq.n	800a77c <HAL_GPIO_DeInit+0x90>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	4a4b      	ldr	r2, [pc, #300]	@ (800a86c <HAL_GPIO_DeInit+0x180>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d019      	beq.n	800a778 <HAL_GPIO_DeInit+0x8c>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	4a4a      	ldr	r2, [pc, #296]	@ (800a870 <HAL_GPIO_DeInit+0x184>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d013      	beq.n	800a774 <HAL_GPIO_DeInit+0x88>
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	4a49      	ldr	r2, [pc, #292]	@ (800a874 <HAL_GPIO_DeInit+0x188>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d00d      	beq.n	800a770 <HAL_GPIO_DeInit+0x84>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a48      	ldr	r2, [pc, #288]	@ (800a878 <HAL_GPIO_DeInit+0x18c>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d007      	beq.n	800a76c <HAL_GPIO_DeInit+0x80>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4a47      	ldr	r2, [pc, #284]	@ (800a87c <HAL_GPIO_DeInit+0x190>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d101      	bne.n	800a768 <HAL_GPIO_DeInit+0x7c>
 800a764:	2305      	movs	r3, #5
 800a766:	e00a      	b.n	800a77e <HAL_GPIO_DeInit+0x92>
 800a768:	2306      	movs	r3, #6
 800a76a:	e008      	b.n	800a77e <HAL_GPIO_DeInit+0x92>
 800a76c:	2304      	movs	r3, #4
 800a76e:	e006      	b.n	800a77e <HAL_GPIO_DeInit+0x92>
 800a770:	2303      	movs	r3, #3
 800a772:	e004      	b.n	800a77e <HAL_GPIO_DeInit+0x92>
 800a774:	2302      	movs	r3, #2
 800a776:	e002      	b.n	800a77e <HAL_GPIO_DeInit+0x92>
 800a778:	2301      	movs	r3, #1
 800a77a:	e000      	b.n	800a77e <HAL_GPIO_DeInit+0x92>
 800a77c:	2300      	movs	r3, #0
 800a77e:	69fa      	ldr	r2, [r7, #28]
 800a780:	f002 0203 	and.w	r2, r2, #3
 800a784:	0092      	lsls	r2, r2, #2
 800a786:	4093      	lsls	r3, r2
 800a788:	697a      	ldr	r2, [r7, #20]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d132      	bne.n	800a7f4 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800a78e:	4b3c      	ldr	r3, [pc, #240]	@ (800a880 <HAL_GPIO_DeInit+0x194>)
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	69bb      	ldr	r3, [r7, #24]
 800a794:	43db      	mvns	r3, r3
 800a796:	493a      	ldr	r1, [pc, #232]	@ (800a880 <HAL_GPIO_DeInit+0x194>)
 800a798:	4013      	ands	r3, r2
 800a79a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800a79c:	4b38      	ldr	r3, [pc, #224]	@ (800a880 <HAL_GPIO_DeInit+0x194>)
 800a79e:	685a      	ldr	r2, [r3, #4]
 800a7a0:	69bb      	ldr	r3, [r7, #24]
 800a7a2:	43db      	mvns	r3, r3
 800a7a4:	4936      	ldr	r1, [pc, #216]	@ (800a880 <HAL_GPIO_DeInit+0x194>)
 800a7a6:	4013      	ands	r3, r2
 800a7a8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800a7aa:	4b35      	ldr	r3, [pc, #212]	@ (800a880 <HAL_GPIO_DeInit+0x194>)
 800a7ac:	68da      	ldr	r2, [r3, #12]
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	43db      	mvns	r3, r3
 800a7b2:	4933      	ldr	r1, [pc, #204]	@ (800a880 <HAL_GPIO_DeInit+0x194>)
 800a7b4:	4013      	ands	r3, r2
 800a7b6:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800a7b8:	4b31      	ldr	r3, [pc, #196]	@ (800a880 <HAL_GPIO_DeInit+0x194>)
 800a7ba:	689a      	ldr	r2, [r3, #8]
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	43db      	mvns	r3, r3
 800a7c0:	492f      	ldr	r1, [pc, #188]	@ (800a880 <HAL_GPIO_DeInit+0x194>)
 800a7c2:	4013      	ands	r3, r2
 800a7c4:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	f003 0303 	and.w	r3, r3, #3
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	220f      	movs	r2, #15
 800a7d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a7d4:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800a7d6:	4a23      	ldr	r2, [pc, #140]	@ (800a864 <HAL_GPIO_DeInit+0x178>)
 800a7d8:	69fb      	ldr	r3, [r7, #28]
 800a7da:	089b      	lsrs	r3, r3, #2
 800a7dc:	3302      	adds	r3, #2
 800a7de:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	43da      	mvns	r2, r3
 800a7e6:	481f      	ldr	r0, [pc, #124]	@ (800a864 <HAL_GPIO_DeInit+0x178>)
 800a7e8:	69fb      	ldr	r3, [r7, #28]
 800a7ea:	089b      	lsrs	r3, r3, #2
 800a7ec:	400a      	ands	r2, r1
 800a7ee:	3302      	adds	r3, #2
 800a7f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a7f4:	69bb      	ldr	r3, [r7, #24]
 800a7f6:	2bff      	cmp	r3, #255	@ 0xff
 800a7f8:	d801      	bhi.n	800a7fe <HAL_GPIO_DeInit+0x112>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	e001      	b.n	800a802 <HAL_GPIO_DeInit+0x116>
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	3304      	adds	r3, #4
 800a802:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	2bff      	cmp	r3, #255	@ 0xff
 800a808:	d802      	bhi.n	800a810 <HAL_GPIO_DeInit+0x124>
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	e002      	b.n	800a816 <HAL_GPIO_DeInit+0x12a>
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	3b08      	subs	r3, #8
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	210f      	movs	r1, #15
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	fa01 f303 	lsl.w	r3, r1, r3
 800a824:	43db      	mvns	r3, r3
 800a826:	401a      	ands	r2, r3
 800a828:	2104      	movs	r1, #4
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	fa01 f303 	lsl.w	r3, r1, r3
 800a830:	431a      	orrs	r2, r3
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	68da      	ldr	r2, [r3, #12]
 800a83a:	69bb      	ldr	r3, [r7, #24]
 800a83c:	43db      	mvns	r3, r3
 800a83e:	401a      	ands	r2, r3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a844:	69fb      	ldr	r3, [r7, #28]
 800a846:	3301      	adds	r3, #1
 800a848:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800a84a:	683a      	ldr	r2, [r7, #0]
 800a84c:	69fb      	ldr	r3, [r7, #28]
 800a84e:	fa22 f303 	lsr.w	r3, r2, r3
 800a852:	2b00      	cmp	r3, #0
 800a854:	f47f af52 	bne.w	800a6fc <HAL_GPIO_DeInit+0x10>
  }
}
 800a858:	bf00      	nop
 800a85a:	bf00      	nop
 800a85c:	3724      	adds	r7, #36	@ 0x24
 800a85e:	46bd      	mov	sp, r7
 800a860:	bc80      	pop	{r7}
 800a862:	4770      	bx	lr
 800a864:	40010000 	.word	0x40010000
 800a868:	40010800 	.word	0x40010800
 800a86c:	40010c00 	.word	0x40010c00
 800a870:	40011000 	.word	0x40011000
 800a874:	40011400 	.word	0x40011400
 800a878:	40011800 	.word	0x40011800
 800a87c:	40011c00 	.word	0x40011c00
 800a880:	40010400 	.word	0x40010400

0800a884 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	460b      	mov	r3, r1
 800a88e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	689a      	ldr	r2, [r3, #8]
 800a894:	887b      	ldrh	r3, [r7, #2]
 800a896:	4013      	ands	r3, r2
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d002      	beq.n	800a8a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a89c:	2301      	movs	r3, #1
 800a89e:	73fb      	strb	r3, [r7, #15]
 800a8a0:	e001      	b.n	800a8a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a8a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3714      	adds	r7, #20
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bc80      	pop	{r7}
 800a8b0:	4770      	bx	lr

0800a8b2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a8b2:	b480      	push	{r7}
 800a8b4:	b083      	sub	sp, #12
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	807b      	strh	r3, [r7, #2]
 800a8be:	4613      	mov	r3, r2
 800a8c0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a8c2:	787b      	ldrb	r3, [r7, #1]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d003      	beq.n	800a8d0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a8c8:	887a      	ldrh	r2, [r7, #2]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a8ce:	e003      	b.n	800a8d8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a8d0:	887b      	ldrh	r3, [r7, #2]
 800a8d2:	041a      	lsls	r2, r3, #16
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	611a      	str	r2, [r3, #16]
}
 800a8d8:	bf00      	nop
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bc80      	pop	{r7}
 800a8e0:	4770      	bx	lr

0800a8e2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a8e2:	b480      	push	{r7}
 800a8e4:	b085      	sub	sp, #20
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a8f4:	887a      	ldrh	r2, [r7, #2]
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	041a      	lsls	r2, r3, #16
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	43d9      	mvns	r1, r3
 800a900:	887b      	ldrh	r3, [r7, #2]
 800a902:	400b      	ands	r3, r1
 800a904:	431a      	orrs	r2, r3
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	611a      	str	r2, [r3, #16]
}
 800a90a:	bf00      	nop
 800a90c:	3714      	adds	r7, #20
 800a90e:	46bd      	mov	sp, r7
 800a910:	bc80      	pop	{r7}
 800a912:	4770      	bx	lr

0800a914 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d101      	bne.n	800a926 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a922:	2301      	movs	r3, #1
 800a924:	e12b      	b.n	800ab7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d106      	bne.n	800a940 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f7fe ff66 	bl	800980c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2224      	movs	r2, #36	@ 0x24
 800a944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f022 0201 	bic.w	r2, r2, #1
 800a956:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a966:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a976:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a978:	f001 fdb8 	bl	800c4ec <HAL_RCC_GetPCLK1Freq>
 800a97c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	685b      	ldr	r3, [r3, #4]
 800a982:	4a81      	ldr	r2, [pc, #516]	@ (800ab88 <HAL_I2C_Init+0x274>)
 800a984:	4293      	cmp	r3, r2
 800a986:	d807      	bhi.n	800a998 <HAL_I2C_Init+0x84>
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	4a80      	ldr	r2, [pc, #512]	@ (800ab8c <HAL_I2C_Init+0x278>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	bf94      	ite	ls
 800a990:	2301      	movls	r3, #1
 800a992:	2300      	movhi	r3, #0
 800a994:	b2db      	uxtb	r3, r3
 800a996:	e006      	b.n	800a9a6 <HAL_I2C_Init+0x92>
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	4a7d      	ldr	r2, [pc, #500]	@ (800ab90 <HAL_I2C_Init+0x27c>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	bf94      	ite	ls
 800a9a0:	2301      	movls	r3, #1
 800a9a2:	2300      	movhi	r3, #0
 800a9a4:	b2db      	uxtb	r3, r3
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d001      	beq.n	800a9ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e0e7      	b.n	800ab7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	4a78      	ldr	r2, [pc, #480]	@ (800ab94 <HAL_I2C_Init+0x280>)
 800a9b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a9b6:	0c9b      	lsrs	r3, r3, #18
 800a9b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	68ba      	ldr	r2, [r7, #8]
 800a9ca:	430a      	orrs	r2, r1
 800a9cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	6a1b      	ldr	r3, [r3, #32]
 800a9d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	4a6a      	ldr	r2, [pc, #424]	@ (800ab88 <HAL_I2C_Init+0x274>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d802      	bhi.n	800a9e8 <HAL_I2C_Init+0xd4>
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	e009      	b.n	800a9fc <HAL_I2C_Init+0xe8>
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a9ee:	fb02 f303 	mul.w	r3, r2, r3
 800a9f2:	4a69      	ldr	r2, [pc, #420]	@ (800ab98 <HAL_I2C_Init+0x284>)
 800a9f4:	fba2 2303 	umull	r2, r3, r2, r3
 800a9f8:	099b      	lsrs	r3, r3, #6
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	687a      	ldr	r2, [r7, #4]
 800a9fe:	6812      	ldr	r2, [r2, #0]
 800aa00:	430b      	orrs	r3, r1
 800aa02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	69db      	ldr	r3, [r3, #28]
 800aa0a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800aa0e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	685b      	ldr	r3, [r3, #4]
 800aa16:	495c      	ldr	r1, [pc, #368]	@ (800ab88 <HAL_I2C_Init+0x274>)
 800aa18:	428b      	cmp	r3, r1
 800aa1a:	d819      	bhi.n	800aa50 <HAL_I2C_Init+0x13c>
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	1e59      	subs	r1, r3, #1
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	005b      	lsls	r3, r3, #1
 800aa26:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa2a:	1c59      	adds	r1, r3, #1
 800aa2c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800aa30:	400b      	ands	r3, r1
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00a      	beq.n	800aa4c <HAL_I2C_Init+0x138>
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	1e59      	subs	r1, r3, #1
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	685b      	ldr	r3, [r3, #4]
 800aa3e:	005b      	lsls	r3, r3, #1
 800aa40:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa44:	3301      	adds	r3, #1
 800aa46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa4a:	e051      	b.n	800aaf0 <HAL_I2C_Init+0x1dc>
 800aa4c:	2304      	movs	r3, #4
 800aa4e:	e04f      	b.n	800aaf0 <HAL_I2C_Init+0x1dc>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	689b      	ldr	r3, [r3, #8]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d111      	bne.n	800aa7c <HAL_I2C_Init+0x168>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	1e58      	subs	r0, r3, #1
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6859      	ldr	r1, [r3, #4]
 800aa60:	460b      	mov	r3, r1
 800aa62:	005b      	lsls	r3, r3, #1
 800aa64:	440b      	add	r3, r1
 800aa66:	fbb0 f3f3 	udiv	r3, r0, r3
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	bf0c      	ite	eq
 800aa74:	2301      	moveq	r3, #1
 800aa76:	2300      	movne	r3, #0
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	e012      	b.n	800aaa2 <HAL_I2C_Init+0x18e>
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	1e58      	subs	r0, r3, #1
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6859      	ldr	r1, [r3, #4]
 800aa84:	460b      	mov	r3, r1
 800aa86:	009b      	lsls	r3, r3, #2
 800aa88:	440b      	add	r3, r1
 800aa8a:	0099      	lsls	r1, r3, #2
 800aa8c:	440b      	add	r3, r1
 800aa8e:	fbb0 f3f3 	udiv	r3, r0, r3
 800aa92:	3301      	adds	r3, #1
 800aa94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	bf0c      	ite	eq
 800aa9c:	2301      	moveq	r3, #1
 800aa9e:	2300      	movne	r3, #0
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d001      	beq.n	800aaaa <HAL_I2C_Init+0x196>
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	e022      	b.n	800aaf0 <HAL_I2C_Init+0x1dc>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	689b      	ldr	r3, [r3, #8]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d10e      	bne.n	800aad0 <HAL_I2C_Init+0x1bc>
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	1e58      	subs	r0, r3, #1
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6859      	ldr	r1, [r3, #4]
 800aaba:	460b      	mov	r3, r1
 800aabc:	005b      	lsls	r3, r3, #1
 800aabe:	440b      	add	r3, r1
 800aac0:	fbb0 f3f3 	udiv	r3, r0, r3
 800aac4:	3301      	adds	r3, #1
 800aac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aaca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aace:	e00f      	b.n	800aaf0 <HAL_I2C_Init+0x1dc>
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	1e58      	subs	r0, r3, #1
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6859      	ldr	r1, [r3, #4]
 800aad8:	460b      	mov	r3, r1
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	440b      	add	r3, r1
 800aade:	0099      	lsls	r1, r3, #2
 800aae0:	440b      	add	r3, r1
 800aae2:	fbb0 f3f3 	udiv	r3, r0, r3
 800aae6:	3301      	adds	r3, #1
 800aae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aaec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aaf0:	6879      	ldr	r1, [r7, #4]
 800aaf2:	6809      	ldr	r1, [r1, #0]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	69da      	ldr	r2, [r3, #28]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6a1b      	ldr	r3, [r3, #32]
 800ab0a:	431a      	orrs	r2, r3
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	430a      	orrs	r2, r1
 800ab12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	689b      	ldr	r3, [r3, #8]
 800ab1a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800ab1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ab22:	687a      	ldr	r2, [r7, #4]
 800ab24:	6911      	ldr	r1, [r2, #16]
 800ab26:	687a      	ldr	r2, [r7, #4]
 800ab28:	68d2      	ldr	r2, [r2, #12]
 800ab2a:	4311      	orrs	r1, r2
 800ab2c:	687a      	ldr	r2, [r7, #4]
 800ab2e:	6812      	ldr	r2, [r2, #0]
 800ab30:	430b      	orrs	r3, r1
 800ab32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	695a      	ldr	r2, [r3, #20]
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	699b      	ldr	r3, [r3, #24]
 800ab46:	431a      	orrs	r2, r3
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	430a      	orrs	r2, r1
 800ab4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f042 0201 	orr.w	r2, r2, #1
 800ab5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2200      	movs	r2, #0
 800ab64:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2220      	movs	r2, #32
 800ab6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2200      	movs	r2, #0
 800ab72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3710      	adds	r7, #16
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	000186a0 	.word	0x000186a0
 800ab8c:	001e847f 	.word	0x001e847f
 800ab90:	003d08ff 	.word	0x003d08ff
 800ab94:	431bde83 	.word	0x431bde83
 800ab98:	10624dd3 	.word	0x10624dd3

0800ab9c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b082      	sub	sp, #8
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d101      	bne.n	800abae <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	e021      	b.n	800abf2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2224      	movs	r2, #36	@ 0x24
 800abb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f022 0201 	bic.w	r2, r2, #1
 800abc4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f7fe fe5e 	bl	8009888 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2200      	movs	r2, #0
 800abd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800abf0:	2300      	movs	r3, #0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3708      	adds	r7, #8
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
	...

0800abfc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b088      	sub	sp, #32
 800ac00:	af02      	add	r7, sp, #8
 800ac02:	60f8      	str	r0, [r7, #12]
 800ac04:	607a      	str	r2, [r7, #4]
 800ac06:	461a      	mov	r2, r3
 800ac08:	460b      	mov	r3, r1
 800ac0a:	817b      	strh	r3, [r7, #10]
 800ac0c:	4613      	mov	r3, r2
 800ac0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ac10:	f7fe ffd0 	bl	8009bb4 <HAL_GetTick>
 800ac14:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	2b20      	cmp	r3, #32
 800ac20:	f040 80e0 	bne.w	800ade4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ac24:	697b      	ldr	r3, [r7, #20]
 800ac26:	9300      	str	r3, [sp, #0]
 800ac28:	2319      	movs	r3, #25
 800ac2a:	2201      	movs	r2, #1
 800ac2c:	4970      	ldr	r1, [pc, #448]	@ (800adf0 <HAL_I2C_Master_Transmit+0x1f4>)
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f000 fe5c 	bl	800b8ec <I2C_WaitOnFlagUntilTimeout>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d001      	beq.n	800ac3e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800ac3a:	2302      	movs	r3, #2
 800ac3c:	e0d3      	b.n	800ade6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	d101      	bne.n	800ac4c <HAL_I2C_Master_Transmit+0x50>
 800ac48:	2302      	movs	r3, #2
 800ac4a:	e0cc      	b.n	800ade6 <HAL_I2C_Master_Transmit+0x1ea>
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f003 0301 	and.w	r3, r3, #1
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	d007      	beq.n	800ac72 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f042 0201 	orr.w	r2, r2, #1
 800ac70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	681a      	ldr	r2, [r3, #0]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ac80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2221      	movs	r2, #33	@ 0x21
 800ac86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2210      	movs	r2, #16
 800ac8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2200      	movs	r2, #0
 800ac96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	893a      	ldrh	r2, [r7, #8]
 800aca2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	4a50      	ldr	r2, [pc, #320]	@ (800adf4 <HAL_I2C_Master_Transmit+0x1f8>)
 800acb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800acb4:	8979      	ldrh	r1, [r7, #10]
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	6a3a      	ldr	r2, [r7, #32]
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	f000 fc16 	bl	800b4ec <I2C_MasterRequestWrite>
 800acc0:	4603      	mov	r3, r0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d001      	beq.n	800acca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	e08d      	b.n	800ade6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800acca:	2300      	movs	r3, #0
 800accc:	613b      	str	r3, [r7, #16]
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	695b      	ldr	r3, [r3, #20]
 800acd4:	613b      	str	r3, [r7, #16]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	699b      	ldr	r3, [r3, #24]
 800acdc:	613b      	str	r3, [r7, #16]
 800acde:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800ace0:	e066      	b.n	800adb0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ace2:	697a      	ldr	r2, [r7, #20]
 800ace4:	6a39      	ldr	r1, [r7, #32]
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	f000 ff1a 	bl	800bb20 <I2C_WaitOnTXEFlagUntilTimeout>
 800acec:	4603      	mov	r3, r0
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00d      	beq.n	800ad0e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acf6:	2b04      	cmp	r3, #4
 800acf8:	d107      	bne.n	800ad0a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad08:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e06b      	b.n	800ade6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad12:	781a      	ldrb	r2, [r3, #0]
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad1e:	1c5a      	adds	r2, r3, #1
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	b29a      	uxth	r2, r3
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad36:	3b01      	subs	r3, #1
 800ad38:	b29a      	uxth	r2, r3
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	695b      	ldr	r3, [r3, #20]
 800ad44:	f003 0304 	and.w	r3, r3, #4
 800ad48:	2b04      	cmp	r3, #4
 800ad4a:	d11b      	bne.n	800ad84 <HAL_I2C_Master_Transmit+0x188>
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d017      	beq.n	800ad84 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad58:	781a      	ldrb	r2, [r3, #0]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad64:	1c5a      	adds	r2, r3, #1
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	3b01      	subs	r3, #1
 800ad72:	b29a      	uxth	r2, r3
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	b29a      	uxth	r2, r3
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad84:	697a      	ldr	r2, [r7, #20]
 800ad86:	6a39      	ldr	r1, [r7, #32]
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	f000 ff11 	bl	800bbb0 <I2C_WaitOnBTFFlagUntilTimeout>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00d      	beq.n	800adb0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad98:	2b04      	cmp	r3, #4
 800ad9a:	d107      	bne.n	800adac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	681a      	ldr	r2, [r3, #0]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800adaa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800adac:	2301      	movs	r3, #1
 800adae:	e01a      	b.n	800ade6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d194      	bne.n	800ace2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800adc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	2220      	movs	r2, #32
 800adcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2200      	movs	r2, #0
 800add4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2200      	movs	r2, #0
 800addc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ade0:	2300      	movs	r3, #0
 800ade2:	e000      	b.n	800ade6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ade4:	2302      	movs	r3, #2
  }
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3718      	adds	r7, #24
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	00100002 	.word	0x00100002
 800adf4:	ffff0000 	.word	0xffff0000

0800adf8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b088      	sub	sp, #32
 800adfc:	af02      	add	r7, sp, #8
 800adfe:	60f8      	str	r0, [r7, #12]
 800ae00:	4608      	mov	r0, r1
 800ae02:	4611      	mov	r1, r2
 800ae04:	461a      	mov	r2, r3
 800ae06:	4603      	mov	r3, r0
 800ae08:	817b      	strh	r3, [r7, #10]
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	813b      	strh	r3, [r7, #8]
 800ae0e:	4613      	mov	r3, r2
 800ae10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ae12:	f7fe fecf 	bl	8009bb4 <HAL_GetTick>
 800ae16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	2b20      	cmp	r3, #32
 800ae22:	f040 80d9 	bne.w	800afd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	9300      	str	r3, [sp, #0]
 800ae2a:	2319      	movs	r3, #25
 800ae2c:	2201      	movs	r2, #1
 800ae2e:	496d      	ldr	r1, [pc, #436]	@ (800afe4 <HAL_I2C_Mem_Write+0x1ec>)
 800ae30:	68f8      	ldr	r0, [r7, #12]
 800ae32:	f000 fd5b 	bl	800b8ec <I2C_WaitOnFlagUntilTimeout>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d001      	beq.n	800ae40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800ae3c:	2302      	movs	r3, #2
 800ae3e:	e0cc      	b.n	800afda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d101      	bne.n	800ae4e <HAL_I2C_Mem_Write+0x56>
 800ae4a:	2302      	movs	r3, #2
 800ae4c:	e0c5      	b.n	800afda <HAL_I2C_Mem_Write+0x1e2>
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2201      	movs	r2, #1
 800ae52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f003 0301 	and.w	r3, r3, #1
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d007      	beq.n	800ae74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f042 0201 	orr.w	r2, r2, #1
 800ae72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ae82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2221      	movs	r2, #33	@ 0x21
 800ae88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	2240      	movs	r2, #64	@ 0x40
 800ae90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2200      	movs	r2, #0
 800ae98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	6a3a      	ldr	r2, [r7, #32]
 800ae9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800aea4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aeaa:	b29a      	uxth	r2, r3
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	4a4d      	ldr	r2, [pc, #308]	@ (800afe8 <HAL_I2C_Mem_Write+0x1f0>)
 800aeb4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aeb6:	88f8      	ldrh	r0, [r7, #6]
 800aeb8:	893a      	ldrh	r2, [r7, #8]
 800aeba:	8979      	ldrh	r1, [r7, #10]
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	9301      	str	r3, [sp, #4]
 800aec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	4603      	mov	r3, r0
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	f000 fb92 	bl	800b5f0 <I2C_RequestMemoryWrite>
 800aecc:	4603      	mov	r3, r0
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d052      	beq.n	800af78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800aed2:	2301      	movs	r3, #1
 800aed4:	e081      	b.n	800afda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aeda:	68f8      	ldr	r0, [r7, #12]
 800aedc:	f000 fe20 	bl	800bb20 <I2C_WaitOnTXEFlagUntilTimeout>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00d      	beq.n	800af02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeea:	2b04      	cmp	r3, #4
 800aeec:	d107      	bne.n	800aefe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aefc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800aefe:	2301      	movs	r3, #1
 800af00:	e06b      	b.n	800afda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af06:	781a      	ldrb	r2, [r3, #0]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af12:	1c5a      	adds	r2, r3, #1
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af1c:	3b01      	subs	r3, #1
 800af1e:	b29a      	uxth	r2, r3
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af28:	b29b      	uxth	r3, r3
 800af2a:	3b01      	subs	r3, #1
 800af2c:	b29a      	uxth	r2, r3
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	695b      	ldr	r3, [r3, #20]
 800af38:	f003 0304 	and.w	r3, r3, #4
 800af3c:	2b04      	cmp	r3, #4
 800af3e:	d11b      	bne.n	800af78 <HAL_I2C_Mem_Write+0x180>
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af44:	2b00      	cmp	r3, #0
 800af46:	d017      	beq.n	800af78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af4c:	781a      	ldrb	r2, [r3, #0]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af58:	1c5a      	adds	r2, r3, #1
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af62:	3b01      	subs	r3, #1
 800af64:	b29a      	uxth	r2, r3
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af6e:	b29b      	uxth	r3, r3
 800af70:	3b01      	subs	r3, #1
 800af72:	b29a      	uxth	r2, r3
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d1aa      	bne.n	800aed6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af80:	697a      	ldr	r2, [r7, #20]
 800af82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af84:	68f8      	ldr	r0, [r7, #12]
 800af86:	f000 fe13 	bl	800bbb0 <I2C_WaitOnBTFFlagUntilTimeout>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d00d      	beq.n	800afac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af94:	2b04      	cmp	r3, #4
 800af96:	d107      	bne.n	800afa8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800afa6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800afa8:	2301      	movs	r3, #1
 800afaa:	e016      	b.n	800afda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	681a      	ldr	r2, [r3, #0]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800afba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	2220      	movs	r2, #32
 800afc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2200      	movs	r2, #0
 800afc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2200      	movs	r2, #0
 800afd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800afd4:	2300      	movs	r3, #0
 800afd6:	e000      	b.n	800afda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800afd8:	2302      	movs	r3, #2
  }
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3718      	adds	r7, #24
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	00100002 	.word	0x00100002
 800afe8:	ffff0000 	.word	0xffff0000

0800afec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b08c      	sub	sp, #48	@ 0x30
 800aff0:	af02      	add	r7, sp, #8
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	4608      	mov	r0, r1
 800aff6:	4611      	mov	r1, r2
 800aff8:	461a      	mov	r2, r3
 800affa:	4603      	mov	r3, r0
 800affc:	817b      	strh	r3, [r7, #10]
 800affe:	460b      	mov	r3, r1
 800b000:	813b      	strh	r3, [r7, #8]
 800b002:	4613      	mov	r3, r2
 800b004:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800b006:	2300      	movs	r3, #0
 800b008:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b00a:	f7fe fdd3 	bl	8009bb4 <HAL_GetTick>
 800b00e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b016:	b2db      	uxtb	r3, r3
 800b018:	2b20      	cmp	r3, #32
 800b01a:	f040 8244 	bne.w	800b4a6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b01e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b020:	9300      	str	r3, [sp, #0]
 800b022:	2319      	movs	r3, #25
 800b024:	2201      	movs	r2, #1
 800b026:	4982      	ldr	r1, [pc, #520]	@ (800b230 <HAL_I2C_Mem_Read+0x244>)
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f000 fc5f 	bl	800b8ec <I2C_WaitOnFlagUntilTimeout>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d001      	beq.n	800b038 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800b034:	2302      	movs	r3, #2
 800b036:	e237      	b.n	800b4a8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d101      	bne.n	800b046 <HAL_I2C_Mem_Read+0x5a>
 800b042:	2302      	movs	r3, #2
 800b044:	e230      	b.n	800b4a8 <HAL_I2C_Mem_Read+0x4bc>
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2201      	movs	r2, #1
 800b04a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f003 0301 	and.w	r3, r3, #1
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d007      	beq.n	800b06c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	681a      	ldr	r2, [r3, #0]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f042 0201 	orr.w	r2, r2, #1
 800b06a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b07a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2222      	movs	r2, #34	@ 0x22
 800b080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2240      	movs	r2, #64	@ 0x40
 800b088:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	2200      	movs	r2, #0
 800b090:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b096:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800b09c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0a2:	b29a      	uxth	r2, r3
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	4a62      	ldr	r2, [pc, #392]	@ (800b234 <HAL_I2C_Mem_Read+0x248>)
 800b0ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b0ae:	88f8      	ldrh	r0, [r7, #6]
 800b0b0:	893a      	ldrh	r2, [r7, #8]
 800b0b2:	8979      	ldrh	r1, [r7, #10]
 800b0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b6:	9301      	str	r3, [sp, #4]
 800b0b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0ba:	9300      	str	r3, [sp, #0]
 800b0bc:	4603      	mov	r3, r0
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	f000 fb2c 	bl	800b71c <I2C_RequestMemoryRead>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d001      	beq.n	800b0ce <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	e1ec      	b.n	800b4a8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d113      	bne.n	800b0fe <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	61fb      	str	r3, [r7, #28]
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	695b      	ldr	r3, [r3, #20]
 800b0e0:	61fb      	str	r3, [r7, #28]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	699b      	ldr	r3, [r3, #24]
 800b0e8:	61fb      	str	r3, [r7, #28]
 800b0ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b0fa:	601a      	str	r2, [r3, #0]
 800b0fc:	e1c0      	b.n	800b480 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b102:	2b01      	cmp	r3, #1
 800b104:	d11e      	bne.n	800b144 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	681a      	ldr	r2, [r3, #0]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b114:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b116:	b672      	cpsid	i
}
 800b118:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b11a:	2300      	movs	r3, #0
 800b11c:	61bb      	str	r3, [r7, #24]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	695b      	ldr	r3, [r3, #20]
 800b124:	61bb      	str	r3, [r7, #24]
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	699b      	ldr	r3, [r3, #24]
 800b12c:	61bb      	str	r3, [r7, #24]
 800b12e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	681a      	ldr	r2, [r3, #0]
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b13e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b140:	b662      	cpsie	i
}
 800b142:	e035      	b.n	800b1b0 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d11e      	bne.n	800b18a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b15a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b15c:	b672      	cpsid	i
}
 800b15e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b160:	2300      	movs	r3, #0
 800b162:	617b      	str	r3, [r7, #20]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	695b      	ldr	r3, [r3, #20]
 800b16a:	617b      	str	r3, [r7, #20]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	699b      	ldr	r3, [r3, #24]
 800b172:	617b      	str	r3, [r7, #20]
 800b174:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b184:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b186:	b662      	cpsie	i
}
 800b188:	e012      	b.n	800b1b0 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b198:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b19a:	2300      	movs	r3, #0
 800b19c:	613b      	str	r3, [r7, #16]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	695b      	ldr	r3, [r3, #20]
 800b1a4:	613b      	str	r3, [r7, #16]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	699b      	ldr	r3, [r3, #24]
 800b1ac:	613b      	str	r3, [r7, #16]
 800b1ae:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800b1b0:	e166      	b.n	800b480 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1b6:	2b03      	cmp	r3, #3
 800b1b8:	f200 811f 	bhi.w	800b3fa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d123      	bne.n	800b20c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b1c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b1c8:	68f8      	ldr	r0, [r7, #12]
 800b1ca:	f000 fd39 	bl	800bc40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d001      	beq.n	800b1d8 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	e167      	b.n	800b4a8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	691a      	ldr	r2, [r3, #16]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1e2:	b2d2      	uxtb	r2, r2
 800b1e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1ea:	1c5a      	adds	r2, r3, #1
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1f4:	3b01      	subs	r3, #1
 800b1f6:	b29a      	uxth	r2, r3
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b200:	b29b      	uxth	r3, r3
 800b202:	3b01      	subs	r3, #1
 800b204:	b29a      	uxth	r2, r3
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b20a:	e139      	b.n	800b480 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b210:	2b02      	cmp	r3, #2
 800b212:	d152      	bne.n	800b2ba <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b216:	9300      	str	r3, [sp, #0]
 800b218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b21a:	2200      	movs	r2, #0
 800b21c:	4906      	ldr	r1, [pc, #24]	@ (800b238 <HAL_I2C_Mem_Read+0x24c>)
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f000 fb64 	bl	800b8ec <I2C_WaitOnFlagUntilTimeout>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d008      	beq.n	800b23c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800b22a:	2301      	movs	r3, #1
 800b22c:	e13c      	b.n	800b4a8 <HAL_I2C_Mem_Read+0x4bc>
 800b22e:	bf00      	nop
 800b230:	00100002 	.word	0x00100002
 800b234:	ffff0000 	.word	0xffff0000
 800b238:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800b23c:	b672      	cpsid	i
}
 800b23e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b24e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	691a      	ldr	r2, [r3, #16]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b25a:	b2d2      	uxtb	r2, r2
 800b25c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b262:	1c5a      	adds	r2, r3, #1
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b26c:	3b01      	subs	r3, #1
 800b26e:	b29a      	uxth	r2, r3
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b278:	b29b      	uxth	r3, r3
 800b27a:	3b01      	subs	r3, #1
 800b27c:	b29a      	uxth	r2, r3
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b282:	b662      	cpsie	i
}
 800b284:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	691a      	ldr	r2, [r3, #16]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b290:	b2d2      	uxtb	r2, r2
 800b292:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b298:	1c5a      	adds	r2, r3, #1
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	b29a      	uxth	r2, r3
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	3b01      	subs	r3, #1
 800b2b2:	b29a      	uxth	r2, r3
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b2b8:	e0e2      	b.n	800b480 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2bc:	9300      	str	r3, [sp, #0]
 800b2be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	497b      	ldr	r1, [pc, #492]	@ (800b4b0 <HAL_I2C_Mem_Read+0x4c4>)
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	f000 fb11 	bl	800b8ec <I2C_WaitOnFlagUntilTimeout>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d001      	beq.n	800b2d4 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	e0e9      	b.n	800b4a8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b2e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b2e4:	b672      	cpsid	i
}
 800b2e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	691a      	ldr	r2, [r3, #16]
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2f2:	b2d2      	uxtb	r2, r2
 800b2f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2fa:	1c5a      	adds	r2, r3, #1
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b304:	3b01      	subs	r3, #1
 800b306:	b29a      	uxth	r2, r3
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b310:	b29b      	uxth	r3, r3
 800b312:	3b01      	subs	r3, #1
 800b314:	b29a      	uxth	r2, r3
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b31a:	4b66      	ldr	r3, [pc, #408]	@ (800b4b4 <HAL_I2C_Mem_Read+0x4c8>)
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	08db      	lsrs	r3, r3, #3
 800b320:	4a65      	ldr	r2, [pc, #404]	@ (800b4b8 <HAL_I2C_Mem_Read+0x4cc>)
 800b322:	fba2 2303 	umull	r2, r3, r2, r3
 800b326:	0a1a      	lsrs	r2, r3, #8
 800b328:	4613      	mov	r3, r2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4413      	add	r3, r2
 800b32e:	00da      	lsls	r2, r3, #3
 800b330:	1ad3      	subs	r3, r2, r3
 800b332:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800b334:	6a3b      	ldr	r3, [r7, #32]
 800b336:	3b01      	subs	r3, #1
 800b338:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800b33a:	6a3b      	ldr	r3, [r7, #32]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d118      	bne.n	800b372 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2200      	movs	r2, #0
 800b344:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2220      	movs	r2, #32
 800b34a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2200      	movs	r2, #0
 800b352:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b35a:	f043 0220 	orr.w	r2, r3, #32
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800b362:	b662      	cpsie	i
}
 800b364:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2200      	movs	r2, #0
 800b36a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800b36e:	2301      	movs	r3, #1
 800b370:	e09a      	b.n	800b4a8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	695b      	ldr	r3, [r3, #20]
 800b378:	f003 0304 	and.w	r3, r3, #4
 800b37c:	2b04      	cmp	r3, #4
 800b37e:	d1d9      	bne.n	800b334 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b38e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	691a      	ldr	r2, [r3, #16]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b39a:	b2d2      	uxtb	r2, r2
 800b39c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3a2:	1c5a      	adds	r2, r3, #1
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3ac:	3b01      	subs	r3, #1
 800b3ae:	b29a      	uxth	r2, r3
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	b29a      	uxth	r2, r3
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b3c2:	b662      	cpsie	i
}
 800b3c4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	691a      	ldr	r2, [r3, #16]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3d0:	b2d2      	uxtb	r2, r2
 800b3d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3d8:	1c5a      	adds	r2, r3, #1
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	b29a      	uxth	r2, r3
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b3f8:	e042      	b.n	800b480 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b3fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b3fe:	68f8      	ldr	r0, [r7, #12]
 800b400:	f000 fc1e 	bl	800bc40 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b404:	4603      	mov	r3, r0
 800b406:	2b00      	cmp	r3, #0
 800b408:	d001      	beq.n	800b40e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	e04c      	b.n	800b4a8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	691a      	ldr	r2, [r3, #16]
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b418:	b2d2      	uxtb	r2, r2
 800b41a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b420:	1c5a      	adds	r2, r3, #1
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b42a:	3b01      	subs	r3, #1
 800b42c:	b29a      	uxth	r2, r3
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b436:	b29b      	uxth	r3, r3
 800b438:	3b01      	subs	r3, #1
 800b43a:	b29a      	uxth	r2, r3
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	695b      	ldr	r3, [r3, #20]
 800b446:	f003 0304 	and.w	r3, r3, #4
 800b44a:	2b04      	cmp	r3, #4
 800b44c:	d118      	bne.n	800b480 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	691a      	ldr	r2, [r3, #16]
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b458:	b2d2      	uxtb	r2, r2
 800b45a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b460:	1c5a      	adds	r2, r3, #1
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b46a:	3b01      	subs	r3, #1
 800b46c:	b29a      	uxth	r2, r3
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b476:	b29b      	uxth	r3, r3
 800b478:	3b01      	subs	r3, #1
 800b47a:	b29a      	uxth	r2, r3
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b484:	2b00      	cmp	r3, #0
 800b486:	f47f ae94 	bne.w	800b1b2 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2220      	movs	r2, #32
 800b48e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2200      	movs	r2, #0
 800b496:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2200      	movs	r2, #0
 800b49e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	e000      	b.n	800b4a8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800b4a6:	2302      	movs	r3, #2
  }
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	3728      	adds	r7, #40	@ 0x28
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	00010004 	.word	0x00010004
 800b4b4:	20000f74 	.word	0x20000f74
 800b4b8:	14f8b589 	.word	0x14f8b589

0800b4bc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b083      	sub	sp, #12
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4ca:	b2db      	uxtb	r3, r3
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	370c      	adds	r7, #12
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bc80      	pop	{r7}
 800b4d4:	4770      	bx	lr

0800b4d6 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b4d6:	b480      	push	{r7}
 800b4d8:	b083      	sub	sp, #12
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	370c      	adds	r7, #12
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bc80      	pop	{r7}
 800b4ea:	4770      	bx	lr

0800b4ec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b088      	sub	sp, #32
 800b4f0:	af02      	add	r7, sp, #8
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	607a      	str	r2, [r7, #4]
 800b4f6:	603b      	str	r3, [r7, #0]
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b500:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	2b08      	cmp	r3, #8
 800b506:	d006      	beq.n	800b516 <I2C_MasterRequestWrite+0x2a>
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d003      	beq.n	800b516 <I2C_MasterRequestWrite+0x2a>
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b514:	d108      	bne.n	800b528 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b524:	601a      	str	r2, [r3, #0]
 800b526:	e00b      	b.n	800b540 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b52c:	2b12      	cmp	r3, #18
 800b52e:	d107      	bne.n	800b540 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b53e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	9300      	str	r3, [sp, #0]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2200      	movs	r2, #0
 800b548:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f000 f9cd 	bl	800b8ec <I2C_WaitOnFlagUntilTimeout>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d00d      	beq.n	800b574 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b562:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b566:	d103      	bne.n	800b570 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b56e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b570:	2303      	movs	r3, #3
 800b572:	e035      	b.n	800b5e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	691b      	ldr	r3, [r3, #16]
 800b578:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b57c:	d108      	bne.n	800b590 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b57e:	897b      	ldrh	r3, [r7, #10]
 800b580:	b2db      	uxtb	r3, r3
 800b582:	461a      	mov	r2, r3
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b58c:	611a      	str	r2, [r3, #16]
 800b58e:	e01b      	b.n	800b5c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b590:	897b      	ldrh	r3, [r7, #10]
 800b592:	11db      	asrs	r3, r3, #7
 800b594:	b2db      	uxtb	r3, r3
 800b596:	f003 0306 	and.w	r3, r3, #6
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	f063 030f 	orn	r3, r3, #15
 800b5a0:	b2da      	uxtb	r2, r3
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	687a      	ldr	r2, [r7, #4]
 800b5ac:	490e      	ldr	r1, [pc, #56]	@ (800b5e8 <I2C_MasterRequestWrite+0xfc>)
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f000 fa16 	bl	800b9e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d001      	beq.n	800b5be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	e010      	b.n	800b5e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b5be:	897b      	ldrh	r3, [r7, #10]
 800b5c0:	b2da      	uxtb	r2, r3
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	4907      	ldr	r1, [pc, #28]	@ (800b5ec <I2C_MasterRequestWrite+0x100>)
 800b5ce:	68f8      	ldr	r0, [r7, #12]
 800b5d0:	f000 fa06 	bl	800b9e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d001      	beq.n	800b5de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e000      	b.n	800b5e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3718      	adds	r7, #24
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	00010008 	.word	0x00010008
 800b5ec:	00010002 	.word	0x00010002

0800b5f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b088      	sub	sp, #32
 800b5f4:	af02      	add	r7, sp, #8
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	4608      	mov	r0, r1
 800b5fa:	4611      	mov	r1, r2
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	4603      	mov	r3, r0
 800b600:	817b      	strh	r3, [r7, #10]
 800b602:	460b      	mov	r3, r1
 800b604:	813b      	strh	r3, [r7, #8]
 800b606:	4613      	mov	r3, r2
 800b608:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b618:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b61a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b61c:	9300      	str	r3, [sp, #0]
 800b61e:	6a3b      	ldr	r3, [r7, #32]
 800b620:	2200      	movs	r2, #0
 800b622:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f000 f960 	bl	800b8ec <I2C_WaitOnFlagUntilTimeout>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00d      	beq.n	800b64e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b63c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b640:	d103      	bne.n	800b64a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b648:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b64a:	2303      	movs	r3, #3
 800b64c:	e05f      	b.n	800b70e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b64e:	897b      	ldrh	r3, [r7, #10]
 800b650:	b2db      	uxtb	r3, r3
 800b652:	461a      	mov	r2, r3
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b65c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b65e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b660:	6a3a      	ldr	r2, [r7, #32]
 800b662:	492d      	ldr	r1, [pc, #180]	@ (800b718 <I2C_RequestMemoryWrite+0x128>)
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f000 f9bb 	bl	800b9e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d001      	beq.n	800b674 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b670:	2301      	movs	r3, #1
 800b672:	e04c      	b.n	800b70e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b674:	2300      	movs	r3, #0
 800b676:	617b      	str	r3, [r7, #20]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	695b      	ldr	r3, [r3, #20]
 800b67e:	617b      	str	r3, [r7, #20]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	699b      	ldr	r3, [r3, #24]
 800b686:	617b      	str	r3, [r7, #20]
 800b688:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b68a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b68c:	6a39      	ldr	r1, [r7, #32]
 800b68e:	68f8      	ldr	r0, [r7, #12]
 800b690:	f000 fa46 	bl	800bb20 <I2C_WaitOnTXEFlagUntilTimeout>
 800b694:	4603      	mov	r3, r0
 800b696:	2b00      	cmp	r3, #0
 800b698:	d00d      	beq.n	800b6b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b69e:	2b04      	cmp	r3, #4
 800b6a0:	d107      	bne.n	800b6b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	681a      	ldr	r2, [r3, #0]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b6b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b6b2:	2301      	movs	r3, #1
 800b6b4:	e02b      	b.n	800b70e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b6b6:	88fb      	ldrh	r3, [r7, #6]
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d105      	bne.n	800b6c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b6bc:	893b      	ldrh	r3, [r7, #8]
 800b6be:	b2da      	uxtb	r2, r3
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	611a      	str	r2, [r3, #16]
 800b6c6:	e021      	b.n	800b70c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b6c8:	893b      	ldrh	r3, [r7, #8]
 800b6ca:	0a1b      	lsrs	r3, r3, #8
 800b6cc:	b29b      	uxth	r3, r3
 800b6ce:	b2da      	uxtb	r2, r3
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6d8:	6a39      	ldr	r1, [r7, #32]
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	f000 fa20 	bl	800bb20 <I2C_WaitOnTXEFlagUntilTimeout>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00d      	beq.n	800b702 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6ea:	2b04      	cmp	r3, #4
 800b6ec:	d107      	bne.n	800b6fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	681a      	ldr	r2, [r3, #0]
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b6fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b6fe:	2301      	movs	r3, #1
 800b700:	e005      	b.n	800b70e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b702:	893b      	ldrh	r3, [r7, #8]
 800b704:	b2da      	uxtb	r2, r3
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b70c:	2300      	movs	r3, #0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3718      	adds	r7, #24
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	00010002 	.word	0x00010002

0800b71c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b088      	sub	sp, #32
 800b720:	af02      	add	r7, sp, #8
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	4608      	mov	r0, r1
 800b726:	4611      	mov	r1, r2
 800b728:	461a      	mov	r2, r3
 800b72a:	4603      	mov	r3, r0
 800b72c:	817b      	strh	r3, [r7, #10]
 800b72e:	460b      	mov	r3, r1
 800b730:	813b      	strh	r3, [r7, #8]
 800b732:	4613      	mov	r3, r2
 800b734:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b744:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	681a      	ldr	r2, [r3, #0]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b754:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b758:	9300      	str	r3, [sp, #0]
 800b75a:	6a3b      	ldr	r3, [r7, #32]
 800b75c:	2200      	movs	r2, #0
 800b75e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b762:	68f8      	ldr	r0, [r7, #12]
 800b764:	f000 f8c2 	bl	800b8ec <I2C_WaitOnFlagUntilTimeout>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d00d      	beq.n	800b78a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b778:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b77c:	d103      	bne.n	800b786 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b784:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b786:	2303      	movs	r3, #3
 800b788:	e0aa      	b.n	800b8e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b78a:	897b      	ldrh	r3, [r7, #10]
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	461a      	mov	r2, r3
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b798:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b79c:	6a3a      	ldr	r2, [r7, #32]
 800b79e:	4952      	ldr	r1, [pc, #328]	@ (800b8e8 <I2C_RequestMemoryRead+0x1cc>)
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f000 f91d 	bl	800b9e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d001      	beq.n	800b7b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	e097      	b.n	800b8e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	617b      	str	r3, [r7, #20]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	695b      	ldr	r3, [r3, #20]
 800b7ba:	617b      	str	r3, [r7, #20]
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	699b      	ldr	r3, [r3, #24]
 800b7c2:	617b      	str	r3, [r7, #20]
 800b7c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b7c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7c8:	6a39      	ldr	r1, [r7, #32]
 800b7ca:	68f8      	ldr	r0, [r7, #12]
 800b7cc:	f000 f9a8 	bl	800bb20 <I2C_WaitOnTXEFlagUntilTimeout>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d00d      	beq.n	800b7f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7da:	2b04      	cmp	r3, #4
 800b7dc:	d107      	bne.n	800b7ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	681a      	ldr	r2, [r3, #0]
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b7ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	e076      	b.n	800b8e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b7f2:	88fb      	ldrh	r3, [r7, #6]
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d105      	bne.n	800b804 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b7f8:	893b      	ldrh	r3, [r7, #8]
 800b7fa:	b2da      	uxtb	r2, r3
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	611a      	str	r2, [r3, #16]
 800b802:	e021      	b.n	800b848 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b804:	893b      	ldrh	r3, [r7, #8]
 800b806:	0a1b      	lsrs	r3, r3, #8
 800b808:	b29b      	uxth	r3, r3
 800b80a:	b2da      	uxtb	r2, r3
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b814:	6a39      	ldr	r1, [r7, #32]
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f000 f982 	bl	800bb20 <I2C_WaitOnTXEFlagUntilTimeout>
 800b81c:	4603      	mov	r3, r0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d00d      	beq.n	800b83e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b826:	2b04      	cmp	r3, #4
 800b828:	d107      	bne.n	800b83a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	681a      	ldr	r2, [r3, #0]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b838:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b83a:	2301      	movs	r3, #1
 800b83c:	e050      	b.n	800b8e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b83e:	893b      	ldrh	r3, [r7, #8]
 800b840:	b2da      	uxtb	r2, r3
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b84a:	6a39      	ldr	r1, [r7, #32]
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	f000 f967 	bl	800bb20 <I2C_WaitOnTXEFlagUntilTimeout>
 800b852:	4603      	mov	r3, r0
 800b854:	2b00      	cmp	r3, #0
 800b856:	d00d      	beq.n	800b874 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b85c:	2b04      	cmp	r3, #4
 800b85e:	d107      	bne.n	800b870 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	681a      	ldr	r2, [r3, #0]
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b86e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b870:	2301      	movs	r3, #1
 800b872:	e035      	b.n	800b8e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b882:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b886:	9300      	str	r3, [sp, #0]
 800b888:	6a3b      	ldr	r3, [r7, #32]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b890:	68f8      	ldr	r0, [r7, #12]
 800b892:	f000 f82b 	bl	800b8ec <I2C_WaitOnFlagUntilTimeout>
 800b896:	4603      	mov	r3, r0
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d00d      	beq.n	800b8b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8aa:	d103      	bne.n	800b8b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b8b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	e013      	b.n	800b8e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b8b8:	897b      	ldrh	r3, [r7, #10]
 800b8ba:	b2db      	uxtb	r3, r3
 800b8bc:	f043 0301 	orr.w	r3, r3, #1
 800b8c0:	b2da      	uxtb	r2, r3
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b8c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ca:	6a3a      	ldr	r2, [r7, #32]
 800b8cc:	4906      	ldr	r1, [pc, #24]	@ (800b8e8 <I2C_RequestMemoryRead+0x1cc>)
 800b8ce:	68f8      	ldr	r0, [r7, #12]
 800b8d0:	f000 f886 	bl	800b9e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d001      	beq.n	800b8de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e000      	b.n	800b8e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b8de:	2300      	movs	r3, #0
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3718      	adds	r7, #24
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	00010002 	.word	0x00010002

0800b8ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b084      	sub	sp, #16
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	60f8      	str	r0, [r7, #12]
 800b8f4:	60b9      	str	r1, [r7, #8]
 800b8f6:	603b      	str	r3, [r7, #0]
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b8fc:	e048      	b.n	800b990 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b904:	d044      	beq.n	800b990 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b906:	f7fe f955 	bl	8009bb4 <HAL_GetTick>
 800b90a:	4602      	mov	r2, r0
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	1ad3      	subs	r3, r2, r3
 800b910:	683a      	ldr	r2, [r7, #0]
 800b912:	429a      	cmp	r2, r3
 800b914:	d302      	bcc.n	800b91c <I2C_WaitOnFlagUntilTimeout+0x30>
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d139      	bne.n	800b990 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	0c1b      	lsrs	r3, r3, #16
 800b920:	b2db      	uxtb	r3, r3
 800b922:	2b01      	cmp	r3, #1
 800b924:	d10d      	bne.n	800b942 <I2C_WaitOnFlagUntilTimeout+0x56>
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	695b      	ldr	r3, [r3, #20]
 800b92c:	43da      	mvns	r2, r3
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	4013      	ands	r3, r2
 800b932:	b29b      	uxth	r3, r3
 800b934:	2b00      	cmp	r3, #0
 800b936:	bf0c      	ite	eq
 800b938:	2301      	moveq	r3, #1
 800b93a:	2300      	movne	r3, #0
 800b93c:	b2db      	uxtb	r3, r3
 800b93e:	461a      	mov	r2, r3
 800b940:	e00c      	b.n	800b95c <I2C_WaitOnFlagUntilTimeout+0x70>
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	699b      	ldr	r3, [r3, #24]
 800b948:	43da      	mvns	r2, r3
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	4013      	ands	r3, r2
 800b94e:	b29b      	uxth	r3, r3
 800b950:	2b00      	cmp	r3, #0
 800b952:	bf0c      	ite	eq
 800b954:	2301      	moveq	r3, #1
 800b956:	2300      	movne	r3, #0
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	461a      	mov	r2, r3
 800b95c:	79fb      	ldrb	r3, [r7, #7]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d116      	bne.n	800b990 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2200      	movs	r2, #0
 800b966:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	2220      	movs	r2, #32
 800b96c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	2200      	movs	r2, #0
 800b974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b97c:	f043 0220 	orr.w	r2, r3, #32
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2200      	movs	r2, #0
 800b988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b98c:	2301      	movs	r3, #1
 800b98e:	e023      	b.n	800b9d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	0c1b      	lsrs	r3, r3, #16
 800b994:	b2db      	uxtb	r3, r3
 800b996:	2b01      	cmp	r3, #1
 800b998:	d10d      	bne.n	800b9b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	695b      	ldr	r3, [r3, #20]
 800b9a0:	43da      	mvns	r2, r3
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	4013      	ands	r3, r2
 800b9a6:	b29b      	uxth	r3, r3
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	bf0c      	ite	eq
 800b9ac:	2301      	moveq	r3, #1
 800b9ae:	2300      	movne	r3, #0
 800b9b0:	b2db      	uxtb	r3, r3
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	e00c      	b.n	800b9d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	699b      	ldr	r3, [r3, #24]
 800b9bc:	43da      	mvns	r2, r3
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	4013      	ands	r3, r2
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	bf0c      	ite	eq
 800b9c8:	2301      	moveq	r3, #1
 800b9ca:	2300      	movne	r3, #0
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	79fb      	ldrb	r3, [r7, #7]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d093      	beq.n	800b8fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b9d6:	2300      	movs	r3, #0
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3710      	adds	r7, #16
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}

0800b9e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	607a      	str	r2, [r7, #4]
 800b9ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b9ee:	e071      	b.n	800bad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	695b      	ldr	r3, [r3, #20]
 800b9f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b9fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b9fe:	d123      	bne.n	800ba48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ba18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	2220      	movs	r2, #32
 800ba24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba34:	f043 0204 	orr.w	r2, r3, #4
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800ba44:	2301      	movs	r3, #1
 800ba46:	e067      	b.n	800bb18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba4e:	d041      	beq.n	800bad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba50:	f7fe f8b0 	bl	8009bb4 <HAL_GetTick>
 800ba54:	4602      	mov	r2, r0
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	1ad3      	subs	r3, r2, r3
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d302      	bcc.n	800ba66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d136      	bne.n	800bad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	0c1b      	lsrs	r3, r3, #16
 800ba6a:	b2db      	uxtb	r3, r3
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d10c      	bne.n	800ba8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	695b      	ldr	r3, [r3, #20]
 800ba76:	43da      	mvns	r2, r3
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	4013      	ands	r3, r2
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	bf14      	ite	ne
 800ba82:	2301      	movne	r3, #1
 800ba84:	2300      	moveq	r3, #0
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	e00b      	b.n	800baa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	43da      	mvns	r2, r3
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	4013      	ands	r3, r2
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	bf14      	ite	ne
 800ba9c:	2301      	movne	r3, #1
 800ba9e:	2300      	moveq	r3, #0
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d016      	beq.n	800bad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2200      	movs	r2, #0
 800baaa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	2220      	movs	r2, #32
 800bab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2200      	movs	r2, #0
 800bab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bac0:	f043 0220 	orr.w	r2, r3, #32
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	2200      	movs	r2, #0
 800bacc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bad0:	2301      	movs	r3, #1
 800bad2:	e021      	b.n	800bb18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	0c1b      	lsrs	r3, r3, #16
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	2b01      	cmp	r3, #1
 800badc:	d10c      	bne.n	800baf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	695b      	ldr	r3, [r3, #20]
 800bae4:	43da      	mvns	r2, r3
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	4013      	ands	r3, r2
 800baea:	b29b      	uxth	r3, r3
 800baec:	2b00      	cmp	r3, #0
 800baee:	bf14      	ite	ne
 800baf0:	2301      	movne	r3, #1
 800baf2:	2300      	moveq	r3, #0
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	e00b      	b.n	800bb10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	699b      	ldr	r3, [r3, #24]
 800bafe:	43da      	mvns	r2, r3
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	4013      	ands	r3, r2
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	bf14      	ite	ne
 800bb0a:	2301      	movne	r3, #1
 800bb0c:	2300      	moveq	r3, #0
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f47f af6d 	bne.w	800b9f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800bb16:	2300      	movs	r3, #0
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3710      	adds	r7, #16
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}

0800bb20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b084      	sub	sp, #16
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	60f8      	str	r0, [r7, #12]
 800bb28:	60b9      	str	r1, [r7, #8]
 800bb2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bb2c:	e034      	b.n	800bb98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bb2e:	68f8      	ldr	r0, [r7, #12]
 800bb30:	f000 f8e3 	bl	800bcfa <I2C_IsAcknowledgeFailed>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d001      	beq.n	800bb3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	e034      	b.n	800bba8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb44:	d028      	beq.n	800bb98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb46:	f7fe f835 	bl	8009bb4 <HAL_GetTick>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	1ad3      	subs	r3, r2, r3
 800bb50:	68ba      	ldr	r2, [r7, #8]
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d302      	bcc.n	800bb5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bb56:	68bb      	ldr	r3, [r7, #8]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d11d      	bne.n	800bb98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	695b      	ldr	r3, [r3, #20]
 800bb62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb66:	2b80      	cmp	r3, #128	@ 0x80
 800bb68:	d016      	beq.n	800bb98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2220      	movs	r2, #32
 800bb74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb84:	f043 0220 	orr.w	r2, r3, #32
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bb94:	2301      	movs	r3, #1
 800bb96:	e007      	b.n	800bba8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	695b      	ldr	r3, [r3, #20]
 800bb9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bba2:	2b80      	cmp	r3, #128	@ 0x80
 800bba4:	d1c3      	bne.n	800bb2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bba6:	2300      	movs	r3, #0
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3710      	adds	r7, #16
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	60b9      	str	r1, [r7, #8]
 800bbba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bbbc:	e034      	b.n	800bc28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bbbe:	68f8      	ldr	r0, [r7, #12]
 800bbc0:	f000 f89b 	bl	800bcfa <I2C_IsAcknowledgeFailed>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d001      	beq.n	800bbce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e034      	b.n	800bc38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbce:	68bb      	ldr	r3, [r7, #8]
 800bbd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbd4:	d028      	beq.n	800bc28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbd6:	f7fd ffed 	bl	8009bb4 <HAL_GetTick>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	1ad3      	subs	r3, r2, r3
 800bbe0:	68ba      	ldr	r2, [r7, #8]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d302      	bcc.n	800bbec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bbe6:	68bb      	ldr	r3, [r7, #8]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d11d      	bne.n	800bc28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	695b      	ldr	r3, [r3, #20]
 800bbf2:	f003 0304 	and.w	r3, r3, #4
 800bbf6:	2b04      	cmp	r3, #4
 800bbf8:	d016      	beq.n	800bc28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	2220      	movs	r2, #32
 800bc04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc14:	f043 0220 	orr.w	r2, r3, #32
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e007      	b.n	800bc38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	695b      	ldr	r3, [r3, #20]
 800bc2e:	f003 0304 	and.w	r3, r3, #4
 800bc32:	2b04      	cmp	r3, #4
 800bc34:	d1c3      	bne.n	800bbbe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bc36:	2300      	movs	r3, #0
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3710      	adds	r7, #16
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bc4c:	e049      	b.n	800bce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	695b      	ldr	r3, [r3, #20]
 800bc54:	f003 0310 	and.w	r3, r3, #16
 800bc58:	2b10      	cmp	r3, #16
 800bc5a:	d119      	bne.n	800bc90 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f06f 0210 	mvn.w	r2, #16
 800bc64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2220      	movs	r2, #32
 800bc70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2200      	movs	r2, #0
 800bc78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2200      	movs	r2, #0
 800bc88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	e030      	b.n	800bcf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc90:	f7fd ff90 	bl	8009bb4 <HAL_GetTick>
 800bc94:	4602      	mov	r2, r0
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	1ad3      	subs	r3, r2, r3
 800bc9a:	68ba      	ldr	r2, [r7, #8]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d302      	bcc.n	800bca6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d11d      	bne.n	800bce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	695b      	ldr	r3, [r3, #20]
 800bcac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcb0:	2b40      	cmp	r3, #64	@ 0x40
 800bcb2:	d016      	beq.n	800bce2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	2220      	movs	r2, #32
 800bcbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcce:	f043 0220 	orr.w	r2, r3, #32
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800bcde:	2301      	movs	r3, #1
 800bce0:	e007      	b.n	800bcf2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	695b      	ldr	r3, [r3, #20]
 800bce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcec:	2b40      	cmp	r3, #64	@ 0x40
 800bcee:	d1ae      	bne.n	800bc4e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bcf0:	2300      	movs	r3, #0
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bcfa:	b480      	push	{r7}
 800bcfc:	b083      	sub	sp, #12
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	695b      	ldr	r3, [r3, #20]
 800bd08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd10:	d11b      	bne.n	800bd4a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800bd1a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2220      	movs	r2, #32
 800bd26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd36:	f043 0204 	orr.w	r2, r3, #4
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	2200      	movs	r2, #0
 800bd42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800bd46:	2301      	movs	r3, #1
 800bd48:	e000      	b.n	800bd4c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bd4a:	2300      	movs	r3, #0
}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	370c      	adds	r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bc80      	pop	{r7}
 800bd54:	4770      	bx	lr
	...

0800bd58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b086      	sub	sp, #24
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d101      	bne.n	800bd6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bd66:	2301      	movs	r3, #1
 800bd68:	e272      	b.n	800c250 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f003 0301 	and.w	r3, r3, #1
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	f000 8087 	beq.w	800be86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bd78:	4b92      	ldr	r3, [pc, #584]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	f003 030c 	and.w	r3, r3, #12
 800bd80:	2b04      	cmp	r3, #4
 800bd82:	d00c      	beq.n	800bd9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800bd84:	4b8f      	ldr	r3, [pc, #572]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	f003 030c 	and.w	r3, r3, #12
 800bd8c:	2b08      	cmp	r3, #8
 800bd8e:	d112      	bne.n	800bdb6 <HAL_RCC_OscConfig+0x5e>
 800bd90:	4b8c      	ldr	r3, [pc, #560]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bd98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd9c:	d10b      	bne.n	800bdb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd9e:	4b89      	ldr	r3, [pc, #548]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d06c      	beq.n	800be84 <HAL_RCC_OscConfig+0x12c>
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d168      	bne.n	800be84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	e24c      	b.n	800c250 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	685b      	ldr	r3, [r3, #4]
 800bdba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdbe:	d106      	bne.n	800bdce <HAL_RCC_OscConfig+0x76>
 800bdc0:	4b80      	ldr	r3, [pc, #512]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	4a7f      	ldr	r2, [pc, #508]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800bdc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bdca:	6013      	str	r3, [r2, #0]
 800bdcc:	e02e      	b.n	800be2c <HAL_RCC_OscConfig+0xd4>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d10c      	bne.n	800bdf0 <HAL_RCC_OscConfig+0x98>
 800bdd6:	4b7b      	ldr	r3, [pc, #492]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	4a7a      	ldr	r2, [pc, #488]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800bddc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bde0:	6013      	str	r3, [r2, #0]
 800bde2:	4b78      	ldr	r3, [pc, #480]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	4a77      	ldr	r2, [pc, #476]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800bde8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bdec:	6013      	str	r3, [r2, #0]
 800bdee:	e01d      	b.n	800be2c <HAL_RCC_OscConfig+0xd4>
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bdf8:	d10c      	bne.n	800be14 <HAL_RCC_OscConfig+0xbc>
 800bdfa:	4b72      	ldr	r3, [pc, #456]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4a71      	ldr	r2, [pc, #452]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800be00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800be04:	6013      	str	r3, [r2, #0]
 800be06:	4b6f      	ldr	r3, [pc, #444]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4a6e      	ldr	r2, [pc, #440]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800be0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be10:	6013      	str	r3, [r2, #0]
 800be12:	e00b      	b.n	800be2c <HAL_RCC_OscConfig+0xd4>
 800be14:	4b6b      	ldr	r3, [pc, #428]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	4a6a      	ldr	r2, [pc, #424]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800be1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be1e:	6013      	str	r3, [r2, #0]
 800be20:	4b68      	ldr	r3, [pc, #416]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a67      	ldr	r2, [pc, #412]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800be26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800be2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d013      	beq.n	800be5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be34:	f7fd febe 	bl	8009bb4 <HAL_GetTick>
 800be38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be3a:	e008      	b.n	800be4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be3c:	f7fd feba 	bl	8009bb4 <HAL_GetTick>
 800be40:	4602      	mov	r2, r0
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	1ad3      	subs	r3, r2, r3
 800be46:	2b64      	cmp	r3, #100	@ 0x64
 800be48:	d901      	bls.n	800be4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800be4a:	2303      	movs	r3, #3
 800be4c:	e200      	b.n	800c250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be4e:	4b5d      	ldr	r3, [pc, #372]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be56:	2b00      	cmp	r3, #0
 800be58:	d0f0      	beq.n	800be3c <HAL_RCC_OscConfig+0xe4>
 800be5a:	e014      	b.n	800be86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be5c:	f7fd feaa 	bl	8009bb4 <HAL_GetTick>
 800be60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800be62:	e008      	b.n	800be76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be64:	f7fd fea6 	bl	8009bb4 <HAL_GetTick>
 800be68:	4602      	mov	r2, r0
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	1ad3      	subs	r3, r2, r3
 800be6e:	2b64      	cmp	r3, #100	@ 0x64
 800be70:	d901      	bls.n	800be76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800be72:	2303      	movs	r3, #3
 800be74:	e1ec      	b.n	800c250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800be76:	4b53      	ldr	r3, [pc, #332]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d1f0      	bne.n	800be64 <HAL_RCC_OscConfig+0x10c>
 800be82:	e000      	b.n	800be86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800be84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f003 0302 	and.w	r3, r3, #2
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d063      	beq.n	800bf5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800be92:	4b4c      	ldr	r3, [pc, #304]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	f003 030c 	and.w	r3, r3, #12
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00b      	beq.n	800beb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800be9e:	4b49      	ldr	r3, [pc, #292]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	f003 030c 	and.w	r3, r3, #12
 800bea6:	2b08      	cmp	r3, #8
 800bea8:	d11c      	bne.n	800bee4 <HAL_RCC_OscConfig+0x18c>
 800beaa:	4b46      	ldr	r3, [pc, #280]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d116      	bne.n	800bee4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800beb6:	4b43      	ldr	r3, [pc, #268]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f003 0302 	and.w	r3, r3, #2
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d005      	beq.n	800bece <HAL_RCC_OscConfig+0x176>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	691b      	ldr	r3, [r3, #16]
 800bec6:	2b01      	cmp	r3, #1
 800bec8:	d001      	beq.n	800bece <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800beca:	2301      	movs	r3, #1
 800becc:	e1c0      	b.n	800c250 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bece:	4b3d      	ldr	r3, [pc, #244]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	695b      	ldr	r3, [r3, #20]
 800beda:	00db      	lsls	r3, r3, #3
 800bedc:	4939      	ldr	r1, [pc, #228]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800bede:	4313      	orrs	r3, r2
 800bee0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bee2:	e03a      	b.n	800bf5a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	691b      	ldr	r3, [r3, #16]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d020      	beq.n	800bf2e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800beec:	4b36      	ldr	r3, [pc, #216]	@ (800bfc8 <HAL_RCC_OscConfig+0x270>)
 800beee:	2201      	movs	r2, #1
 800bef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bef2:	f7fd fe5f 	bl	8009bb4 <HAL_GetTick>
 800bef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bef8:	e008      	b.n	800bf0c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800befa:	f7fd fe5b 	bl	8009bb4 <HAL_GetTick>
 800befe:	4602      	mov	r2, r0
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	1ad3      	subs	r3, r2, r3
 800bf04:	2b02      	cmp	r3, #2
 800bf06:	d901      	bls.n	800bf0c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800bf08:	2303      	movs	r3, #3
 800bf0a:	e1a1      	b.n	800c250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf0c:	4b2d      	ldr	r3, [pc, #180]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	f003 0302 	and.w	r3, r3, #2
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d0f0      	beq.n	800befa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf18:	4b2a      	ldr	r3, [pc, #168]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	695b      	ldr	r3, [r3, #20]
 800bf24:	00db      	lsls	r3, r3, #3
 800bf26:	4927      	ldr	r1, [pc, #156]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800bf28:	4313      	orrs	r3, r2
 800bf2a:	600b      	str	r3, [r1, #0]
 800bf2c:	e015      	b.n	800bf5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bf2e:	4b26      	ldr	r3, [pc, #152]	@ (800bfc8 <HAL_RCC_OscConfig+0x270>)
 800bf30:	2200      	movs	r2, #0
 800bf32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf34:	f7fd fe3e 	bl	8009bb4 <HAL_GetTick>
 800bf38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bf3a:	e008      	b.n	800bf4e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf3c:	f7fd fe3a 	bl	8009bb4 <HAL_GetTick>
 800bf40:	4602      	mov	r2, r0
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	1ad3      	subs	r3, r2, r3
 800bf46:	2b02      	cmp	r3, #2
 800bf48:	d901      	bls.n	800bf4e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800bf4a:	2303      	movs	r3, #3
 800bf4c:	e180      	b.n	800c250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bf4e:	4b1d      	ldr	r3, [pc, #116]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f003 0302 	and.w	r3, r3, #2
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d1f0      	bne.n	800bf3c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f003 0308 	and.w	r3, r3, #8
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d03a      	beq.n	800bfdc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	699b      	ldr	r3, [r3, #24]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d019      	beq.n	800bfa2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bf6e:	4b17      	ldr	r3, [pc, #92]	@ (800bfcc <HAL_RCC_OscConfig+0x274>)
 800bf70:	2201      	movs	r2, #1
 800bf72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bf74:	f7fd fe1e 	bl	8009bb4 <HAL_GetTick>
 800bf78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bf7a:	e008      	b.n	800bf8e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bf7c:	f7fd fe1a 	bl	8009bb4 <HAL_GetTick>
 800bf80:	4602      	mov	r2, r0
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	1ad3      	subs	r3, r2, r3
 800bf86:	2b02      	cmp	r3, #2
 800bf88:	d901      	bls.n	800bf8e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800bf8a:	2303      	movs	r3, #3
 800bf8c:	e160      	b.n	800c250 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bf8e:	4b0d      	ldr	r3, [pc, #52]	@ (800bfc4 <HAL_RCC_OscConfig+0x26c>)
 800bf90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf92:	f003 0302 	and.w	r3, r3, #2
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d0f0      	beq.n	800bf7c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800bf9a:	2001      	movs	r0, #1
 800bf9c:	f000 face 	bl	800c53c <RCC_Delay>
 800bfa0:	e01c      	b.n	800bfdc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bfa2:	4b0a      	ldr	r3, [pc, #40]	@ (800bfcc <HAL_RCC_OscConfig+0x274>)
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bfa8:	f7fd fe04 	bl	8009bb4 <HAL_GetTick>
 800bfac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bfae:	e00f      	b.n	800bfd0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bfb0:	f7fd fe00 	bl	8009bb4 <HAL_GetTick>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	1ad3      	subs	r3, r2, r3
 800bfba:	2b02      	cmp	r3, #2
 800bfbc:	d908      	bls.n	800bfd0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800bfbe:	2303      	movs	r3, #3
 800bfc0:	e146      	b.n	800c250 <HAL_RCC_OscConfig+0x4f8>
 800bfc2:	bf00      	nop
 800bfc4:	40021000 	.word	0x40021000
 800bfc8:	42420000 	.word	0x42420000
 800bfcc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bfd0:	4b92      	ldr	r3, [pc, #584]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800bfd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfd4:	f003 0302 	and.w	r3, r3, #2
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d1e9      	bne.n	800bfb0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f003 0304 	and.w	r3, r3, #4
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	f000 80a6 	beq.w	800c136 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bfea:	2300      	movs	r3, #0
 800bfec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bfee:	4b8b      	ldr	r3, [pc, #556]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800bff0:	69db      	ldr	r3, [r3, #28]
 800bff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d10d      	bne.n	800c016 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bffa:	4b88      	ldr	r3, [pc, #544]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800bffc:	69db      	ldr	r3, [r3, #28]
 800bffe:	4a87      	ldr	r2, [pc, #540]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c004:	61d3      	str	r3, [r2, #28]
 800c006:	4b85      	ldr	r3, [pc, #532]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c008:	69db      	ldr	r3, [r3, #28]
 800c00a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c00e:	60bb      	str	r3, [r7, #8]
 800c010:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c012:	2301      	movs	r3, #1
 800c014:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c016:	4b82      	ldr	r3, [pc, #520]	@ (800c220 <HAL_RCC_OscConfig+0x4c8>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d118      	bne.n	800c054 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c022:	4b7f      	ldr	r3, [pc, #508]	@ (800c220 <HAL_RCC_OscConfig+0x4c8>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4a7e      	ldr	r2, [pc, #504]	@ (800c220 <HAL_RCC_OscConfig+0x4c8>)
 800c028:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c02c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c02e:	f7fd fdc1 	bl	8009bb4 <HAL_GetTick>
 800c032:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c034:	e008      	b.n	800c048 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c036:	f7fd fdbd 	bl	8009bb4 <HAL_GetTick>
 800c03a:	4602      	mov	r2, r0
 800c03c:	693b      	ldr	r3, [r7, #16]
 800c03e:	1ad3      	subs	r3, r2, r3
 800c040:	2b64      	cmp	r3, #100	@ 0x64
 800c042:	d901      	bls.n	800c048 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800c044:	2303      	movs	r3, #3
 800c046:	e103      	b.n	800c250 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c048:	4b75      	ldr	r3, [pc, #468]	@ (800c220 <HAL_RCC_OscConfig+0x4c8>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c050:	2b00      	cmp	r3, #0
 800c052:	d0f0      	beq.n	800c036 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	2b01      	cmp	r3, #1
 800c05a:	d106      	bne.n	800c06a <HAL_RCC_OscConfig+0x312>
 800c05c:	4b6f      	ldr	r3, [pc, #444]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c05e:	6a1b      	ldr	r3, [r3, #32]
 800c060:	4a6e      	ldr	r2, [pc, #440]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c062:	f043 0301 	orr.w	r3, r3, #1
 800c066:	6213      	str	r3, [r2, #32]
 800c068:	e02d      	b.n	800c0c6 <HAL_RCC_OscConfig+0x36e>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	68db      	ldr	r3, [r3, #12]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d10c      	bne.n	800c08c <HAL_RCC_OscConfig+0x334>
 800c072:	4b6a      	ldr	r3, [pc, #424]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c074:	6a1b      	ldr	r3, [r3, #32]
 800c076:	4a69      	ldr	r2, [pc, #420]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c078:	f023 0301 	bic.w	r3, r3, #1
 800c07c:	6213      	str	r3, [r2, #32]
 800c07e:	4b67      	ldr	r3, [pc, #412]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c080:	6a1b      	ldr	r3, [r3, #32]
 800c082:	4a66      	ldr	r2, [pc, #408]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c084:	f023 0304 	bic.w	r3, r3, #4
 800c088:	6213      	str	r3, [r2, #32]
 800c08a:	e01c      	b.n	800c0c6 <HAL_RCC_OscConfig+0x36e>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	68db      	ldr	r3, [r3, #12]
 800c090:	2b05      	cmp	r3, #5
 800c092:	d10c      	bne.n	800c0ae <HAL_RCC_OscConfig+0x356>
 800c094:	4b61      	ldr	r3, [pc, #388]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c096:	6a1b      	ldr	r3, [r3, #32]
 800c098:	4a60      	ldr	r2, [pc, #384]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c09a:	f043 0304 	orr.w	r3, r3, #4
 800c09e:	6213      	str	r3, [r2, #32]
 800c0a0:	4b5e      	ldr	r3, [pc, #376]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c0a2:	6a1b      	ldr	r3, [r3, #32]
 800c0a4:	4a5d      	ldr	r2, [pc, #372]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c0a6:	f043 0301 	orr.w	r3, r3, #1
 800c0aa:	6213      	str	r3, [r2, #32]
 800c0ac:	e00b      	b.n	800c0c6 <HAL_RCC_OscConfig+0x36e>
 800c0ae:	4b5b      	ldr	r3, [pc, #364]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c0b0:	6a1b      	ldr	r3, [r3, #32]
 800c0b2:	4a5a      	ldr	r2, [pc, #360]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c0b4:	f023 0301 	bic.w	r3, r3, #1
 800c0b8:	6213      	str	r3, [r2, #32]
 800c0ba:	4b58      	ldr	r3, [pc, #352]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c0bc:	6a1b      	ldr	r3, [r3, #32]
 800c0be:	4a57      	ldr	r2, [pc, #348]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c0c0:	f023 0304 	bic.w	r3, r3, #4
 800c0c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d015      	beq.n	800c0fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c0ce:	f7fd fd71 	bl	8009bb4 <HAL_GetTick>
 800c0d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c0d4:	e00a      	b.n	800c0ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0d6:	f7fd fd6d 	bl	8009bb4 <HAL_GetTick>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	1ad3      	subs	r3, r2, r3
 800c0e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c0e4:	4293      	cmp	r3, r2
 800c0e6:	d901      	bls.n	800c0ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800c0e8:	2303      	movs	r3, #3
 800c0ea:	e0b1      	b.n	800c250 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c0ec:	4b4b      	ldr	r3, [pc, #300]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c0ee:	6a1b      	ldr	r3, [r3, #32]
 800c0f0:	f003 0302 	and.w	r3, r3, #2
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d0ee      	beq.n	800c0d6 <HAL_RCC_OscConfig+0x37e>
 800c0f8:	e014      	b.n	800c124 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c0fa:	f7fd fd5b 	bl	8009bb4 <HAL_GetTick>
 800c0fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c100:	e00a      	b.n	800c118 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c102:	f7fd fd57 	bl	8009bb4 <HAL_GetTick>
 800c106:	4602      	mov	r2, r0
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	1ad3      	subs	r3, r2, r3
 800c10c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c110:	4293      	cmp	r3, r2
 800c112:	d901      	bls.n	800c118 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800c114:	2303      	movs	r3, #3
 800c116:	e09b      	b.n	800c250 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c118:	4b40      	ldr	r3, [pc, #256]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c11a:	6a1b      	ldr	r3, [r3, #32]
 800c11c:	f003 0302 	and.w	r3, r3, #2
 800c120:	2b00      	cmp	r3, #0
 800c122:	d1ee      	bne.n	800c102 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800c124:	7dfb      	ldrb	r3, [r7, #23]
 800c126:	2b01      	cmp	r3, #1
 800c128:	d105      	bne.n	800c136 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c12a:	4b3c      	ldr	r3, [pc, #240]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c12c:	69db      	ldr	r3, [r3, #28]
 800c12e:	4a3b      	ldr	r2, [pc, #236]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c130:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c134:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	69db      	ldr	r3, [r3, #28]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	f000 8087 	beq.w	800c24e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c140:	4b36      	ldr	r3, [pc, #216]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	f003 030c 	and.w	r3, r3, #12
 800c148:	2b08      	cmp	r3, #8
 800c14a:	d061      	beq.n	800c210 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	69db      	ldr	r3, [r3, #28]
 800c150:	2b02      	cmp	r3, #2
 800c152:	d146      	bne.n	800c1e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c154:	4b33      	ldr	r3, [pc, #204]	@ (800c224 <HAL_RCC_OscConfig+0x4cc>)
 800c156:	2200      	movs	r2, #0
 800c158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c15a:	f7fd fd2b 	bl	8009bb4 <HAL_GetTick>
 800c15e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c160:	e008      	b.n	800c174 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c162:	f7fd fd27 	bl	8009bb4 <HAL_GetTick>
 800c166:	4602      	mov	r2, r0
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	1ad3      	subs	r3, r2, r3
 800c16c:	2b02      	cmp	r3, #2
 800c16e:	d901      	bls.n	800c174 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800c170:	2303      	movs	r3, #3
 800c172:	e06d      	b.n	800c250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c174:	4b29      	ldr	r3, [pc, #164]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d1f0      	bne.n	800c162 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	6a1b      	ldr	r3, [r3, #32]
 800c184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c188:	d108      	bne.n	800c19c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800c18a:	4b24      	ldr	r3, [pc, #144]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	689b      	ldr	r3, [r3, #8]
 800c196:	4921      	ldr	r1, [pc, #132]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c198:	4313      	orrs	r3, r2
 800c19a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c19c:	4b1f      	ldr	r3, [pc, #124]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6a19      	ldr	r1, [r3, #32]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1ac:	430b      	orrs	r3, r1
 800c1ae:	491b      	ldr	r1, [pc, #108]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c1b4:	4b1b      	ldr	r3, [pc, #108]	@ (800c224 <HAL_RCC_OscConfig+0x4cc>)
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c1ba:	f7fd fcfb 	bl	8009bb4 <HAL_GetTick>
 800c1be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c1c0:	e008      	b.n	800c1d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1c2:	f7fd fcf7 	bl	8009bb4 <HAL_GetTick>
 800c1c6:	4602      	mov	r2, r0
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	1ad3      	subs	r3, r2, r3
 800c1cc:	2b02      	cmp	r3, #2
 800c1ce:	d901      	bls.n	800c1d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800c1d0:	2303      	movs	r3, #3
 800c1d2:	e03d      	b.n	800c250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c1d4:	4b11      	ldr	r3, [pc, #68]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d0f0      	beq.n	800c1c2 <HAL_RCC_OscConfig+0x46a>
 800c1e0:	e035      	b.n	800c24e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c1e2:	4b10      	ldr	r3, [pc, #64]	@ (800c224 <HAL_RCC_OscConfig+0x4cc>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c1e8:	f7fd fce4 	bl	8009bb4 <HAL_GetTick>
 800c1ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c1ee:	e008      	b.n	800c202 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1f0:	f7fd fce0 	bl	8009bb4 <HAL_GetTick>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	1ad3      	subs	r3, r2, r3
 800c1fa:	2b02      	cmp	r3, #2
 800c1fc:	d901      	bls.n	800c202 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800c1fe:	2303      	movs	r3, #3
 800c200:	e026      	b.n	800c250 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c202:	4b06      	ldr	r3, [pc, #24]	@ (800c21c <HAL_RCC_OscConfig+0x4c4>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d1f0      	bne.n	800c1f0 <HAL_RCC_OscConfig+0x498>
 800c20e:	e01e      	b.n	800c24e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	69db      	ldr	r3, [r3, #28]
 800c214:	2b01      	cmp	r3, #1
 800c216:	d107      	bne.n	800c228 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800c218:	2301      	movs	r3, #1
 800c21a:	e019      	b.n	800c250 <HAL_RCC_OscConfig+0x4f8>
 800c21c:	40021000 	.word	0x40021000
 800c220:	40007000 	.word	0x40007000
 800c224:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800c228:	4b0b      	ldr	r3, [pc, #44]	@ (800c258 <HAL_RCC_OscConfig+0x500>)
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	6a1b      	ldr	r3, [r3, #32]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d106      	bne.n	800c24a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c246:	429a      	cmp	r2, r3
 800c248:	d001      	beq.n	800c24e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800c24a:	2301      	movs	r3, #1
 800c24c:	e000      	b.n	800c250 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800c24e:	2300      	movs	r3, #0
}
 800c250:	4618      	mov	r0, r3
 800c252:	3718      	adds	r7, #24
 800c254:	46bd      	mov	sp, r7
 800c256:	bd80      	pop	{r7, pc}
 800c258:	40021000 	.word	0x40021000

0800c25c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d101      	bne.n	800c270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c26c:	2301      	movs	r3, #1
 800c26e:	e0d0      	b.n	800c412 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c270:	4b6a      	ldr	r3, [pc, #424]	@ (800c41c <HAL_RCC_ClockConfig+0x1c0>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f003 0307 	and.w	r3, r3, #7
 800c278:	683a      	ldr	r2, [r7, #0]
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d910      	bls.n	800c2a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c27e:	4b67      	ldr	r3, [pc, #412]	@ (800c41c <HAL_RCC_ClockConfig+0x1c0>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	f023 0207 	bic.w	r2, r3, #7
 800c286:	4965      	ldr	r1, [pc, #404]	@ (800c41c <HAL_RCC_ClockConfig+0x1c0>)
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	4313      	orrs	r3, r2
 800c28c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c28e:	4b63      	ldr	r3, [pc, #396]	@ (800c41c <HAL_RCC_ClockConfig+0x1c0>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f003 0307 	and.w	r3, r3, #7
 800c296:	683a      	ldr	r2, [r7, #0]
 800c298:	429a      	cmp	r2, r3
 800c29a:	d001      	beq.n	800c2a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800c29c:	2301      	movs	r3, #1
 800c29e:	e0b8      	b.n	800c412 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	f003 0302 	and.w	r3, r3, #2
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d020      	beq.n	800c2ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f003 0304 	and.w	r3, r3, #4
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d005      	beq.n	800c2c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c2b8:	4b59      	ldr	r3, [pc, #356]	@ (800c420 <HAL_RCC_ClockConfig+0x1c4>)
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	4a58      	ldr	r2, [pc, #352]	@ (800c420 <HAL_RCC_ClockConfig+0x1c4>)
 800c2be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800c2c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f003 0308 	and.w	r3, r3, #8
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d005      	beq.n	800c2dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c2d0:	4b53      	ldr	r3, [pc, #332]	@ (800c420 <HAL_RCC_ClockConfig+0x1c4>)
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	4a52      	ldr	r2, [pc, #328]	@ (800c420 <HAL_RCC_ClockConfig+0x1c4>)
 800c2d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800c2da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c2dc:	4b50      	ldr	r3, [pc, #320]	@ (800c420 <HAL_RCC_ClockConfig+0x1c4>)
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	494d      	ldr	r1, [pc, #308]	@ (800c420 <HAL_RCC_ClockConfig+0x1c4>)
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f003 0301 	and.w	r3, r3, #1
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d040      	beq.n	800c37c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	2b01      	cmp	r3, #1
 800c300:	d107      	bne.n	800c312 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c302:	4b47      	ldr	r3, [pc, #284]	@ (800c420 <HAL_RCC_ClockConfig+0x1c4>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d115      	bne.n	800c33a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c30e:	2301      	movs	r3, #1
 800c310:	e07f      	b.n	800c412 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	2b02      	cmp	r3, #2
 800c318:	d107      	bne.n	800c32a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c31a:	4b41      	ldr	r3, [pc, #260]	@ (800c420 <HAL_RCC_ClockConfig+0x1c4>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c322:	2b00      	cmp	r3, #0
 800c324:	d109      	bne.n	800c33a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c326:	2301      	movs	r3, #1
 800c328:	e073      	b.n	800c412 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c32a:	4b3d      	ldr	r3, [pc, #244]	@ (800c420 <HAL_RCC_ClockConfig+0x1c4>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	f003 0302 	and.w	r3, r3, #2
 800c332:	2b00      	cmp	r3, #0
 800c334:	d101      	bne.n	800c33a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c336:	2301      	movs	r3, #1
 800c338:	e06b      	b.n	800c412 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c33a:	4b39      	ldr	r3, [pc, #228]	@ (800c420 <HAL_RCC_ClockConfig+0x1c4>)
 800c33c:	685b      	ldr	r3, [r3, #4]
 800c33e:	f023 0203 	bic.w	r2, r3, #3
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	685b      	ldr	r3, [r3, #4]
 800c346:	4936      	ldr	r1, [pc, #216]	@ (800c420 <HAL_RCC_ClockConfig+0x1c4>)
 800c348:	4313      	orrs	r3, r2
 800c34a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c34c:	f7fd fc32 	bl	8009bb4 <HAL_GetTick>
 800c350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c352:	e00a      	b.n	800c36a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c354:	f7fd fc2e 	bl	8009bb4 <HAL_GetTick>
 800c358:	4602      	mov	r2, r0
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	1ad3      	subs	r3, r2, r3
 800c35e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c362:	4293      	cmp	r3, r2
 800c364:	d901      	bls.n	800c36a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c366:	2303      	movs	r3, #3
 800c368:	e053      	b.n	800c412 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c36a:	4b2d      	ldr	r3, [pc, #180]	@ (800c420 <HAL_RCC_ClockConfig+0x1c4>)
 800c36c:	685b      	ldr	r3, [r3, #4]
 800c36e:	f003 020c 	and.w	r2, r3, #12
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	685b      	ldr	r3, [r3, #4]
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	429a      	cmp	r2, r3
 800c37a:	d1eb      	bne.n	800c354 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c37c:	4b27      	ldr	r3, [pc, #156]	@ (800c41c <HAL_RCC_ClockConfig+0x1c0>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	f003 0307 	and.w	r3, r3, #7
 800c384:	683a      	ldr	r2, [r7, #0]
 800c386:	429a      	cmp	r2, r3
 800c388:	d210      	bcs.n	800c3ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c38a:	4b24      	ldr	r3, [pc, #144]	@ (800c41c <HAL_RCC_ClockConfig+0x1c0>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f023 0207 	bic.w	r2, r3, #7
 800c392:	4922      	ldr	r1, [pc, #136]	@ (800c41c <HAL_RCC_ClockConfig+0x1c0>)
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	4313      	orrs	r3, r2
 800c398:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c39a:	4b20      	ldr	r3, [pc, #128]	@ (800c41c <HAL_RCC_ClockConfig+0x1c0>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f003 0307 	and.w	r3, r3, #7
 800c3a2:	683a      	ldr	r2, [r7, #0]
 800c3a4:	429a      	cmp	r2, r3
 800c3a6:	d001      	beq.n	800c3ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	e032      	b.n	800c412 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f003 0304 	and.w	r3, r3, #4
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d008      	beq.n	800c3ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c3b8:	4b19      	ldr	r3, [pc, #100]	@ (800c420 <HAL_RCC_ClockConfig+0x1c4>)
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	68db      	ldr	r3, [r3, #12]
 800c3c4:	4916      	ldr	r1, [pc, #88]	@ (800c420 <HAL_RCC_ClockConfig+0x1c4>)
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f003 0308 	and.w	r3, r3, #8
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d009      	beq.n	800c3ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c3d6:	4b12      	ldr	r3, [pc, #72]	@ (800c420 <HAL_RCC_ClockConfig+0x1c4>)
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	691b      	ldr	r3, [r3, #16]
 800c3e2:	00db      	lsls	r3, r3, #3
 800c3e4:	490e      	ldr	r1, [pc, #56]	@ (800c420 <HAL_RCC_ClockConfig+0x1c4>)
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c3ea:	f000 f821 	bl	800c430 <HAL_RCC_GetSysClockFreq>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	4b0b      	ldr	r3, [pc, #44]	@ (800c420 <HAL_RCC_ClockConfig+0x1c4>)
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	091b      	lsrs	r3, r3, #4
 800c3f6:	f003 030f 	and.w	r3, r3, #15
 800c3fa:	490a      	ldr	r1, [pc, #40]	@ (800c424 <HAL_RCC_ClockConfig+0x1c8>)
 800c3fc:	5ccb      	ldrb	r3, [r1, r3]
 800c3fe:	fa22 f303 	lsr.w	r3, r2, r3
 800c402:	4a09      	ldr	r2, [pc, #36]	@ (800c428 <HAL_RCC_ClockConfig+0x1cc>)
 800c404:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c406:	4b09      	ldr	r3, [pc, #36]	@ (800c42c <HAL_RCC_ClockConfig+0x1d0>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7fd fb90 	bl	8009b30 <HAL_InitTick>

  return HAL_OK;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}
 800c41a:	bf00      	nop
 800c41c:	40022000 	.word	0x40022000
 800c420:	40021000 	.word	0x40021000
 800c424:	0800f418 	.word	0x0800f418
 800c428:	20000f74 	.word	0x20000f74
 800c42c:	20000f78 	.word	0x20000f78

0800c430 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c430:	b480      	push	{r7}
 800c432:	b087      	sub	sp, #28
 800c434:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800c436:	2300      	movs	r3, #0
 800c438:	60fb      	str	r3, [r7, #12]
 800c43a:	2300      	movs	r3, #0
 800c43c:	60bb      	str	r3, [r7, #8]
 800c43e:	2300      	movs	r3, #0
 800c440:	617b      	str	r3, [r7, #20]
 800c442:	2300      	movs	r3, #0
 800c444:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800c446:	2300      	movs	r3, #0
 800c448:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800c44a:	4b1e      	ldr	r3, [pc, #120]	@ (800c4c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f003 030c 	and.w	r3, r3, #12
 800c456:	2b04      	cmp	r3, #4
 800c458:	d002      	beq.n	800c460 <HAL_RCC_GetSysClockFreq+0x30>
 800c45a:	2b08      	cmp	r3, #8
 800c45c:	d003      	beq.n	800c466 <HAL_RCC_GetSysClockFreq+0x36>
 800c45e:	e027      	b.n	800c4b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c460:	4b19      	ldr	r3, [pc, #100]	@ (800c4c8 <HAL_RCC_GetSysClockFreq+0x98>)
 800c462:	613b      	str	r3, [r7, #16]
      break;
 800c464:	e027      	b.n	800c4b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	0c9b      	lsrs	r3, r3, #18
 800c46a:	f003 030f 	and.w	r3, r3, #15
 800c46e:	4a17      	ldr	r2, [pc, #92]	@ (800c4cc <HAL_RCC_GetSysClockFreq+0x9c>)
 800c470:	5cd3      	ldrb	r3, [r2, r3]
 800c472:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d010      	beq.n	800c4a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800c47e:	4b11      	ldr	r3, [pc, #68]	@ (800c4c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	0c5b      	lsrs	r3, r3, #17
 800c484:	f003 0301 	and.w	r3, r3, #1
 800c488:	4a11      	ldr	r2, [pc, #68]	@ (800c4d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800c48a:	5cd3      	ldrb	r3, [r2, r3]
 800c48c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4a0d      	ldr	r2, [pc, #52]	@ (800c4c8 <HAL_RCC_GetSysClockFreq+0x98>)
 800c492:	fb03 f202 	mul.w	r2, r3, r2
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	fbb2 f3f3 	udiv	r3, r2, r3
 800c49c:	617b      	str	r3, [r7, #20]
 800c49e:	e004      	b.n	800c4aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	4a0c      	ldr	r2, [pc, #48]	@ (800c4d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c4a4:	fb02 f303 	mul.w	r3, r2, r3
 800c4a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	613b      	str	r3, [r7, #16]
      break;
 800c4ae:	e002      	b.n	800c4b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800c4b0:	4b05      	ldr	r3, [pc, #20]	@ (800c4c8 <HAL_RCC_GetSysClockFreq+0x98>)
 800c4b2:	613b      	str	r3, [r7, #16]
      break;
 800c4b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c4b6:	693b      	ldr	r3, [r7, #16]
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	371c      	adds	r7, #28
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	bc80      	pop	{r7}
 800c4c0:	4770      	bx	lr
 800c4c2:	bf00      	nop
 800c4c4:	40021000 	.word	0x40021000
 800c4c8:	007a1200 	.word	0x007a1200
 800c4cc:	0800f430 	.word	0x0800f430
 800c4d0:	0800f440 	.word	0x0800f440
 800c4d4:	003d0900 	.word	0x003d0900

0800c4d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c4d8:	b480      	push	{r7}
 800c4da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c4dc:	4b02      	ldr	r3, [pc, #8]	@ (800c4e8 <HAL_RCC_GetHCLKFreq+0x10>)
 800c4de:	681b      	ldr	r3, [r3, #0]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bc80      	pop	{r7}
 800c4e6:	4770      	bx	lr
 800c4e8:	20000f74 	.word	0x20000f74

0800c4ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c4f0:	f7ff fff2 	bl	800c4d8 <HAL_RCC_GetHCLKFreq>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	4b05      	ldr	r3, [pc, #20]	@ (800c50c <HAL_RCC_GetPCLK1Freq+0x20>)
 800c4f8:	685b      	ldr	r3, [r3, #4]
 800c4fa:	0a1b      	lsrs	r3, r3, #8
 800c4fc:	f003 0307 	and.w	r3, r3, #7
 800c500:	4903      	ldr	r1, [pc, #12]	@ (800c510 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c502:	5ccb      	ldrb	r3, [r1, r3]
 800c504:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c508:	4618      	mov	r0, r3
 800c50a:	bd80      	pop	{r7, pc}
 800c50c:	40021000 	.word	0x40021000
 800c510:	0800f428 	.word	0x0800f428

0800c514 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c518:	f7ff ffde 	bl	800c4d8 <HAL_RCC_GetHCLKFreq>
 800c51c:	4602      	mov	r2, r0
 800c51e:	4b05      	ldr	r3, [pc, #20]	@ (800c534 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c520:	685b      	ldr	r3, [r3, #4]
 800c522:	0adb      	lsrs	r3, r3, #11
 800c524:	f003 0307 	and.w	r3, r3, #7
 800c528:	4903      	ldr	r1, [pc, #12]	@ (800c538 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c52a:	5ccb      	ldrb	r3, [r1, r3]
 800c52c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c530:	4618      	mov	r0, r3
 800c532:	bd80      	pop	{r7, pc}
 800c534:	40021000 	.word	0x40021000
 800c538:	0800f428 	.word	0x0800f428

0800c53c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b085      	sub	sp, #20
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c544:	4b0a      	ldr	r3, [pc, #40]	@ (800c570 <RCC_Delay+0x34>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	4a0a      	ldr	r2, [pc, #40]	@ (800c574 <RCC_Delay+0x38>)
 800c54a:	fba2 2303 	umull	r2, r3, r2, r3
 800c54e:	0a5b      	lsrs	r3, r3, #9
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	fb02 f303 	mul.w	r3, r2, r3
 800c556:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800c558:	bf00      	nop
  }
  while (Delay --);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	1e5a      	subs	r2, r3, #1
 800c55e:	60fa      	str	r2, [r7, #12]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d1f9      	bne.n	800c558 <RCC_Delay+0x1c>
}
 800c564:	bf00      	nop
 800c566:	bf00      	nop
 800c568:	3714      	adds	r7, #20
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bc80      	pop	{r7}
 800c56e:	4770      	bx	lr
 800c570:	20000f74 	.word	0x20000f74
 800c574:	10624dd3 	.word	0x10624dd3

0800c578 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d101      	bne.n	800c58a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c586:	2301      	movs	r3, #1
 800c588:	e041      	b.n	800c60e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c590:	b2db      	uxtb	r3, r3
 800c592:	2b00      	cmp	r3, #0
 800c594:	d106      	bne.n	800c5a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2200      	movs	r2, #0
 800c59a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f7fd f994 	bl	80098cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2202      	movs	r2, #2
 800c5a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681a      	ldr	r2, [r3, #0]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	3304      	adds	r3, #4
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	4610      	mov	r0, r2
 800c5b8:	f000 fa82 	bl	800cac0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2201      	movs	r2, #1
 800c5c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2201      	movs	r2, #1
 800c5e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2201      	movs	r2, #1
 800c600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2201      	movs	r2, #1
 800c608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c60c:	2300      	movs	r3, #0
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3708      	adds	r7, #8
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
	...

0800c618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c618:	b480      	push	{r7}
 800c61a:	b085      	sub	sp, #20
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c626:	b2db      	uxtb	r3, r3
 800c628:	2b01      	cmp	r3, #1
 800c62a:	d001      	beq.n	800c630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c62c:	2301      	movs	r3, #1
 800c62e:	e044      	b.n	800c6ba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2202      	movs	r2, #2
 800c634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	68da      	ldr	r2, [r3, #12]
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	f042 0201 	orr.w	r2, r2, #1
 800c646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	4a1d      	ldr	r2, [pc, #116]	@ (800c6c4 <HAL_TIM_Base_Start_IT+0xac>)
 800c64e:	4293      	cmp	r3, r2
 800c650:	d018      	beq.n	800c684 <HAL_TIM_Base_Start_IT+0x6c>
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	4a1c      	ldr	r2, [pc, #112]	@ (800c6c8 <HAL_TIM_Base_Start_IT+0xb0>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d013      	beq.n	800c684 <HAL_TIM_Base_Start_IT+0x6c>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c664:	d00e      	beq.n	800c684 <HAL_TIM_Base_Start_IT+0x6c>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a18      	ldr	r2, [pc, #96]	@ (800c6cc <HAL_TIM_Base_Start_IT+0xb4>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d009      	beq.n	800c684 <HAL_TIM_Base_Start_IT+0x6c>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4a16      	ldr	r2, [pc, #88]	@ (800c6d0 <HAL_TIM_Base_Start_IT+0xb8>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d004      	beq.n	800c684 <HAL_TIM_Base_Start_IT+0x6c>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	4a15      	ldr	r2, [pc, #84]	@ (800c6d4 <HAL_TIM_Base_Start_IT+0xbc>)
 800c680:	4293      	cmp	r3, r2
 800c682:	d111      	bne.n	800c6a8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	689b      	ldr	r3, [r3, #8]
 800c68a:	f003 0307 	and.w	r3, r3, #7
 800c68e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2b06      	cmp	r3, #6
 800c694:	d010      	beq.n	800c6b8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	681a      	ldr	r2, [r3, #0]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f042 0201 	orr.w	r2, r2, #1
 800c6a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6a6:	e007      	b.n	800c6b8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	681a      	ldr	r2, [r3, #0]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f042 0201 	orr.w	r2, r2, #1
 800c6b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c6b8:	2300      	movs	r3, #0
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3714      	adds	r7, #20
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bc80      	pop	{r7}
 800c6c2:	4770      	bx	lr
 800c6c4:	40012c00 	.word	0x40012c00
 800c6c8:	40013400 	.word	0x40013400
 800c6cc:	40000400 	.word	0x40000400
 800c6d0:	40000800 	.word	0x40000800
 800c6d4:	40000c00 	.word	0x40000c00

0800c6d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	691b      	ldr	r3, [r3, #16]
 800c6e6:	f003 0302 	and.w	r3, r3, #2
 800c6ea:	2b02      	cmp	r3, #2
 800c6ec:	d122      	bne.n	800c734 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	f003 0302 	and.w	r3, r3, #2
 800c6f8:	2b02      	cmp	r3, #2
 800c6fa:	d11b      	bne.n	800c734 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f06f 0202 	mvn.w	r2, #2
 800c704:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2201      	movs	r2, #1
 800c70a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	699b      	ldr	r3, [r3, #24]
 800c712:	f003 0303 	and.w	r3, r3, #3
 800c716:	2b00      	cmp	r3, #0
 800c718:	d003      	beq.n	800c722 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 f9b4 	bl	800ca88 <HAL_TIM_IC_CaptureCallback>
 800c720:	e005      	b.n	800c72e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 f9a7 	bl	800ca76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 f9b6 	bl	800ca9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2200      	movs	r2, #0
 800c732:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	691b      	ldr	r3, [r3, #16]
 800c73a:	f003 0304 	and.w	r3, r3, #4
 800c73e:	2b04      	cmp	r3, #4
 800c740:	d122      	bne.n	800c788 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	68db      	ldr	r3, [r3, #12]
 800c748:	f003 0304 	and.w	r3, r3, #4
 800c74c:	2b04      	cmp	r3, #4
 800c74e:	d11b      	bne.n	800c788 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f06f 0204 	mvn.w	r2, #4
 800c758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2202      	movs	r2, #2
 800c75e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	699b      	ldr	r3, [r3, #24]
 800c766:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d003      	beq.n	800c776 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f000 f98a 	bl	800ca88 <HAL_TIM_IC_CaptureCallback>
 800c774:	e005      	b.n	800c782 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 f97d 	bl	800ca76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f000 f98c 	bl	800ca9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	691b      	ldr	r3, [r3, #16]
 800c78e:	f003 0308 	and.w	r3, r3, #8
 800c792:	2b08      	cmp	r3, #8
 800c794:	d122      	bne.n	800c7dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	f003 0308 	and.w	r3, r3, #8
 800c7a0:	2b08      	cmp	r3, #8
 800c7a2:	d11b      	bne.n	800c7dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f06f 0208 	mvn.w	r2, #8
 800c7ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2204      	movs	r2, #4
 800c7b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	69db      	ldr	r3, [r3, #28]
 800c7ba:	f003 0303 	and.w	r3, r3, #3
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d003      	beq.n	800c7ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 f960 	bl	800ca88 <HAL_TIM_IC_CaptureCallback>
 800c7c8:	e005      	b.n	800c7d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f000 f953 	bl	800ca76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 f962 	bl	800ca9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	691b      	ldr	r3, [r3, #16]
 800c7e2:	f003 0310 	and.w	r3, r3, #16
 800c7e6:	2b10      	cmp	r3, #16
 800c7e8:	d122      	bne.n	800c830 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	68db      	ldr	r3, [r3, #12]
 800c7f0:	f003 0310 	and.w	r3, r3, #16
 800c7f4:	2b10      	cmp	r3, #16
 800c7f6:	d11b      	bne.n	800c830 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f06f 0210 	mvn.w	r2, #16
 800c800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2208      	movs	r2, #8
 800c806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	69db      	ldr	r3, [r3, #28]
 800c80e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c812:	2b00      	cmp	r3, #0
 800c814:	d003      	beq.n	800c81e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 f936 	bl	800ca88 <HAL_TIM_IC_CaptureCallback>
 800c81c:	e005      	b.n	800c82a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c81e:	6878      	ldr	r0, [r7, #4]
 800c820:	f000 f929 	bl	800ca76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c824:	6878      	ldr	r0, [r7, #4]
 800c826:	f000 f938 	bl	800ca9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	2200      	movs	r2, #0
 800c82e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	691b      	ldr	r3, [r3, #16]
 800c836:	f003 0301 	and.w	r3, r3, #1
 800c83a:	2b01      	cmp	r3, #1
 800c83c:	d10e      	bne.n	800c85c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	f003 0301 	and.w	r3, r3, #1
 800c848:	2b01      	cmp	r3, #1
 800c84a:	d107      	bne.n	800c85c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f06f 0201 	mvn.w	r2, #1
 800c854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f7fc fcd0 	bl	80091fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	691b      	ldr	r3, [r3, #16]
 800c862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c866:	2b80      	cmp	r3, #128	@ 0x80
 800c868:	d10e      	bne.n	800c888 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c874:	2b80      	cmp	r3, #128	@ 0x80
 800c876:	d107      	bne.n	800c888 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 faa1 	bl	800cdca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	691b      	ldr	r3, [r3, #16]
 800c88e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c892:	2b40      	cmp	r3, #64	@ 0x40
 800c894:	d10e      	bne.n	800c8b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	68db      	ldr	r3, [r3, #12]
 800c89c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8a0:	2b40      	cmp	r3, #64	@ 0x40
 800c8a2:	d107      	bne.n	800c8b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c8ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 f8fc 	bl	800caac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	691b      	ldr	r3, [r3, #16]
 800c8ba:	f003 0320 	and.w	r3, r3, #32
 800c8be:	2b20      	cmp	r3, #32
 800c8c0:	d10e      	bne.n	800c8e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	68db      	ldr	r3, [r3, #12]
 800c8c8:	f003 0320 	and.w	r3, r3, #32
 800c8cc:	2b20      	cmp	r3, #32
 800c8ce:	d107      	bne.n	800c8e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f06f 0220 	mvn.w	r2, #32
 800c8d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f000 fa6c 	bl	800cdb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c8e0:	bf00      	nop
 800c8e2:	3708      	adds	r7, #8
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b084      	sub	sp, #16
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
 800c8f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d101      	bne.n	800c904 <HAL_TIM_ConfigClockSource+0x1c>
 800c900:	2302      	movs	r3, #2
 800c902:	e0b4      	b.n	800ca6e <HAL_TIM_ConfigClockSource+0x186>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2201      	movs	r2, #1
 800c908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2202      	movs	r2, #2
 800c910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	689b      	ldr	r3, [r3, #8]
 800c91a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c91c:	68bb      	ldr	r3, [r7, #8]
 800c91e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c922:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c92a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	68ba      	ldr	r2, [r7, #8]
 800c932:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c93c:	d03e      	beq.n	800c9bc <HAL_TIM_ConfigClockSource+0xd4>
 800c93e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c942:	f200 8087 	bhi.w	800ca54 <HAL_TIM_ConfigClockSource+0x16c>
 800c946:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c94a:	f000 8086 	beq.w	800ca5a <HAL_TIM_ConfigClockSource+0x172>
 800c94e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c952:	d87f      	bhi.n	800ca54 <HAL_TIM_ConfigClockSource+0x16c>
 800c954:	2b70      	cmp	r3, #112	@ 0x70
 800c956:	d01a      	beq.n	800c98e <HAL_TIM_ConfigClockSource+0xa6>
 800c958:	2b70      	cmp	r3, #112	@ 0x70
 800c95a:	d87b      	bhi.n	800ca54 <HAL_TIM_ConfigClockSource+0x16c>
 800c95c:	2b60      	cmp	r3, #96	@ 0x60
 800c95e:	d050      	beq.n	800ca02 <HAL_TIM_ConfigClockSource+0x11a>
 800c960:	2b60      	cmp	r3, #96	@ 0x60
 800c962:	d877      	bhi.n	800ca54 <HAL_TIM_ConfigClockSource+0x16c>
 800c964:	2b50      	cmp	r3, #80	@ 0x50
 800c966:	d03c      	beq.n	800c9e2 <HAL_TIM_ConfigClockSource+0xfa>
 800c968:	2b50      	cmp	r3, #80	@ 0x50
 800c96a:	d873      	bhi.n	800ca54 <HAL_TIM_ConfigClockSource+0x16c>
 800c96c:	2b40      	cmp	r3, #64	@ 0x40
 800c96e:	d058      	beq.n	800ca22 <HAL_TIM_ConfigClockSource+0x13a>
 800c970:	2b40      	cmp	r3, #64	@ 0x40
 800c972:	d86f      	bhi.n	800ca54 <HAL_TIM_ConfigClockSource+0x16c>
 800c974:	2b30      	cmp	r3, #48	@ 0x30
 800c976:	d064      	beq.n	800ca42 <HAL_TIM_ConfigClockSource+0x15a>
 800c978:	2b30      	cmp	r3, #48	@ 0x30
 800c97a:	d86b      	bhi.n	800ca54 <HAL_TIM_ConfigClockSource+0x16c>
 800c97c:	2b20      	cmp	r3, #32
 800c97e:	d060      	beq.n	800ca42 <HAL_TIM_ConfigClockSource+0x15a>
 800c980:	2b20      	cmp	r3, #32
 800c982:	d867      	bhi.n	800ca54 <HAL_TIM_ConfigClockSource+0x16c>
 800c984:	2b00      	cmp	r3, #0
 800c986:	d05c      	beq.n	800ca42 <HAL_TIM_ConfigClockSource+0x15a>
 800c988:	2b10      	cmp	r3, #16
 800c98a:	d05a      	beq.n	800ca42 <HAL_TIM_ConfigClockSource+0x15a>
 800c98c:	e062      	b.n	800ca54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c99e:	f000 f980 	bl	800cca2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c9aa:	68bb      	ldr	r3, [r7, #8]
 800c9ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c9b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	68ba      	ldr	r2, [r7, #8]
 800c9b8:	609a      	str	r2, [r3, #8]
      break;
 800c9ba:	e04f      	b.n	800ca5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c9cc:	f000 f969 	bl	800cca2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	689a      	ldr	r2, [r3, #8]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c9de:	609a      	str	r2, [r3, #8]
      break;
 800c9e0:	e03c      	b.n	800ca5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	f000 f8e0 	bl	800cbb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	2150      	movs	r1, #80	@ 0x50
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	f000 f937 	bl	800cc6e <TIM_ITRx_SetConfig>
      break;
 800ca00:	e02c      	b.n	800ca5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca0e:	461a      	mov	r2, r3
 800ca10:	f000 f8fe 	bl	800cc10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	2160      	movs	r1, #96	@ 0x60
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f000 f927 	bl	800cc6e <TIM_ITRx_SetConfig>
      break;
 800ca20:	e01c      	b.n	800ca5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca2e:	461a      	mov	r2, r3
 800ca30:	f000 f8c0 	bl	800cbb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	2140      	movs	r1, #64	@ 0x40
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f000 f917 	bl	800cc6e <TIM_ITRx_SetConfig>
      break;
 800ca40:	e00c      	b.n	800ca5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681a      	ldr	r2, [r3, #0]
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	4610      	mov	r0, r2
 800ca4e:	f000 f90e 	bl	800cc6e <TIM_ITRx_SetConfig>
      break;
 800ca52:	e003      	b.n	800ca5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ca54:	2301      	movs	r3, #1
 800ca56:	73fb      	strb	r3, [r7, #15]
      break;
 800ca58:	e000      	b.n	800ca5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ca5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2200      	movs	r2, #0
 800ca68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ca6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3710      	adds	r7, #16
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}

0800ca76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca76:	b480      	push	{r7}
 800ca78:	b083      	sub	sp, #12
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ca7e:	bf00      	nop
 800ca80:	370c      	adds	r7, #12
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bc80      	pop	{r7}
 800ca86:	4770      	bx	lr

0800ca88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b083      	sub	sp, #12
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ca90:	bf00      	nop
 800ca92:	370c      	adds	r7, #12
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bc80      	pop	{r7}
 800ca98:	4770      	bx	lr

0800ca9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ca9a:	b480      	push	{r7}
 800ca9c:	b083      	sub	sp, #12
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800caa2:	bf00      	nop
 800caa4:	370c      	adds	r7, #12
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bc80      	pop	{r7}
 800caaa:	4770      	bx	lr

0800caac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cab4:	bf00      	nop
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	bc80      	pop	{r7}
 800cabc:	4770      	bx	lr
	...

0800cac0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b085      	sub	sp, #20
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	4a33      	ldr	r2, [pc, #204]	@ (800cba0 <TIM_Base_SetConfig+0xe0>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d013      	beq.n	800cb00 <TIM_Base_SetConfig+0x40>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4a32      	ldr	r2, [pc, #200]	@ (800cba4 <TIM_Base_SetConfig+0xe4>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d00f      	beq.n	800cb00 <TIM_Base_SetConfig+0x40>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cae6:	d00b      	beq.n	800cb00 <TIM_Base_SetConfig+0x40>
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	4a2f      	ldr	r2, [pc, #188]	@ (800cba8 <TIM_Base_SetConfig+0xe8>)
 800caec:	4293      	cmp	r3, r2
 800caee:	d007      	beq.n	800cb00 <TIM_Base_SetConfig+0x40>
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	4a2e      	ldr	r2, [pc, #184]	@ (800cbac <TIM_Base_SetConfig+0xec>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d003      	beq.n	800cb00 <TIM_Base_SetConfig+0x40>
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	4a2d      	ldr	r2, [pc, #180]	@ (800cbb0 <TIM_Base_SetConfig+0xf0>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d108      	bne.n	800cb12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	685b      	ldr	r3, [r3, #4]
 800cb0c:	68fa      	ldr	r2, [r7, #12]
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	4a22      	ldr	r2, [pc, #136]	@ (800cba0 <TIM_Base_SetConfig+0xe0>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d013      	beq.n	800cb42 <TIM_Base_SetConfig+0x82>
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	4a21      	ldr	r2, [pc, #132]	@ (800cba4 <TIM_Base_SetConfig+0xe4>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d00f      	beq.n	800cb42 <TIM_Base_SetConfig+0x82>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb28:	d00b      	beq.n	800cb42 <TIM_Base_SetConfig+0x82>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	4a1e      	ldr	r2, [pc, #120]	@ (800cba8 <TIM_Base_SetConfig+0xe8>)
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d007      	beq.n	800cb42 <TIM_Base_SetConfig+0x82>
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	4a1d      	ldr	r2, [pc, #116]	@ (800cbac <TIM_Base_SetConfig+0xec>)
 800cb36:	4293      	cmp	r3, r2
 800cb38:	d003      	beq.n	800cb42 <TIM_Base_SetConfig+0x82>
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	4a1c      	ldr	r2, [pc, #112]	@ (800cbb0 <TIM_Base_SetConfig+0xf0>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d108      	bne.n	800cb54 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	68fa      	ldr	r2, [r7, #12]
 800cb50:	4313      	orrs	r3, r2
 800cb52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	695b      	ldr	r3, [r3, #20]
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	68fa      	ldr	r2, [r7, #12]
 800cb66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	689a      	ldr	r2, [r3, #8]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	681a      	ldr	r2, [r3, #0]
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	4a09      	ldr	r2, [pc, #36]	@ (800cba0 <TIM_Base_SetConfig+0xe0>)
 800cb7c:	4293      	cmp	r3, r2
 800cb7e:	d003      	beq.n	800cb88 <TIM_Base_SetConfig+0xc8>
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	4a08      	ldr	r2, [pc, #32]	@ (800cba4 <TIM_Base_SetConfig+0xe4>)
 800cb84:	4293      	cmp	r3, r2
 800cb86:	d103      	bne.n	800cb90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	691a      	ldr	r2, [r3, #16]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2201      	movs	r2, #1
 800cb94:	615a      	str	r2, [r3, #20]
}
 800cb96:	bf00      	nop
 800cb98:	3714      	adds	r7, #20
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bc80      	pop	{r7}
 800cb9e:	4770      	bx	lr
 800cba0:	40012c00 	.word	0x40012c00
 800cba4:	40013400 	.word	0x40013400
 800cba8:	40000400 	.word	0x40000400
 800cbac:	40000800 	.word	0x40000800
 800cbb0:	40000c00 	.word	0x40000c00

0800cbb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b087      	sub	sp, #28
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	60f8      	str	r0, [r7, #12]
 800cbbc:	60b9      	str	r1, [r7, #8]
 800cbbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	6a1b      	ldr	r3, [r3, #32]
 800cbc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	6a1b      	ldr	r3, [r3, #32]
 800cbca:	f023 0201 	bic.w	r2, r3, #1
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	699b      	ldr	r3, [r3, #24]
 800cbd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cbde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	011b      	lsls	r3, r3, #4
 800cbe4:	693a      	ldr	r2, [r7, #16]
 800cbe6:	4313      	orrs	r3, r2
 800cbe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	f023 030a 	bic.w	r3, r3, #10
 800cbf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cbf2:	697a      	ldr	r2, [r7, #20]
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	4313      	orrs	r3, r2
 800cbf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	693a      	ldr	r2, [r7, #16]
 800cbfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	697a      	ldr	r2, [r7, #20]
 800cc04:	621a      	str	r2, [r3, #32]
}
 800cc06:	bf00      	nop
 800cc08:	371c      	adds	r7, #28
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bc80      	pop	{r7}
 800cc0e:	4770      	bx	lr

0800cc10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b087      	sub	sp, #28
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	60f8      	str	r0, [r7, #12]
 800cc18:	60b9      	str	r1, [r7, #8]
 800cc1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	6a1b      	ldr	r3, [r3, #32]
 800cc20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	6a1b      	ldr	r3, [r3, #32]
 800cc26:	f023 0210 	bic.w	r2, r3, #16
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	699b      	ldr	r3, [r3, #24]
 800cc32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc34:	693b      	ldr	r3, [r7, #16]
 800cc36:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cc3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	031b      	lsls	r3, r3, #12
 800cc40:	693a      	ldr	r2, [r7, #16]
 800cc42:	4313      	orrs	r3, r2
 800cc44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cc4c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc4e:	68bb      	ldr	r3, [r7, #8]
 800cc50:	011b      	lsls	r3, r3, #4
 800cc52:	697a      	ldr	r2, [r7, #20]
 800cc54:	4313      	orrs	r3, r2
 800cc56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	693a      	ldr	r2, [r7, #16]
 800cc5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	697a      	ldr	r2, [r7, #20]
 800cc62:	621a      	str	r2, [r3, #32]
}
 800cc64:	bf00      	nop
 800cc66:	371c      	adds	r7, #28
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bc80      	pop	{r7}
 800cc6c:	4770      	bx	lr

0800cc6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc6e:	b480      	push	{r7}
 800cc70:	b085      	sub	sp, #20
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
 800cc76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cc84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cc86:	683a      	ldr	r2, [r7, #0]
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	f043 0307 	orr.w	r3, r3, #7
 800cc90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	68fa      	ldr	r2, [r7, #12]
 800cc96:	609a      	str	r2, [r3, #8]
}
 800cc98:	bf00      	nop
 800cc9a:	3714      	adds	r7, #20
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bc80      	pop	{r7}
 800cca0:	4770      	bx	lr

0800cca2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cca2:	b480      	push	{r7}
 800cca4:	b087      	sub	sp, #28
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	60f8      	str	r0, [r7, #12]
 800ccaa:	60b9      	str	r1, [r7, #8]
 800ccac:	607a      	str	r2, [r7, #4]
 800ccae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	689b      	ldr	r3, [r3, #8]
 800ccb4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ccbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	021a      	lsls	r2, r3, #8
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	431a      	orrs	r2, r3
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	4313      	orrs	r3, r2
 800ccca:	697a      	ldr	r2, [r7, #20]
 800cccc:	4313      	orrs	r3, r2
 800ccce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	697a      	ldr	r2, [r7, #20]
 800ccd4:	609a      	str	r2, [r3, #8]
}
 800ccd6:	bf00      	nop
 800ccd8:	371c      	adds	r7, #28
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bc80      	pop	{r7}
 800ccde:	4770      	bx	lr

0800cce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b085      	sub	sp, #20
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d101      	bne.n	800ccf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ccf4:	2302      	movs	r3, #2
 800ccf6:	e050      	b.n	800cd9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2202      	movs	r2, #2
 800cd04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	685b      	ldr	r3, [r3, #4]
 800cd0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	689b      	ldr	r3, [r3, #8]
 800cd16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	68fa      	ldr	r2, [r7, #12]
 800cd26:	4313      	orrs	r3, r2
 800cd28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	68fa      	ldr	r2, [r7, #12]
 800cd30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	4a1b      	ldr	r2, [pc, #108]	@ (800cda4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	d018      	beq.n	800cd6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	4a19      	ldr	r2, [pc, #100]	@ (800cda8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cd42:	4293      	cmp	r3, r2
 800cd44:	d013      	beq.n	800cd6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd4e:	d00e      	beq.n	800cd6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	4a15      	ldr	r2, [pc, #84]	@ (800cdac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800cd56:	4293      	cmp	r3, r2
 800cd58:	d009      	beq.n	800cd6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	4a14      	ldr	r2, [pc, #80]	@ (800cdb0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d004      	beq.n	800cd6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4a12      	ldr	r2, [pc, #72]	@ (800cdb4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800cd6a:	4293      	cmp	r3, r2
 800cd6c:	d10c      	bne.n	800cd88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cd6e:	68bb      	ldr	r3, [r7, #8]
 800cd70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cd76:	683b      	ldr	r3, [r7, #0]
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	68ba      	ldr	r2, [r7, #8]
 800cd7c:	4313      	orrs	r3, r2
 800cd7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	68ba      	ldr	r2, [r7, #8]
 800cd86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2201      	movs	r2, #1
 800cd8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2200      	movs	r2, #0
 800cd94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cd98:	2300      	movs	r3, #0
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3714      	adds	r7, #20
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bc80      	pop	{r7}
 800cda2:	4770      	bx	lr
 800cda4:	40012c00 	.word	0x40012c00
 800cda8:	40013400 	.word	0x40013400
 800cdac:	40000400 	.word	0x40000400
 800cdb0:	40000800 	.word	0x40000800
 800cdb4:	40000c00 	.word	0x40000c00

0800cdb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b083      	sub	sp, #12
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cdc0:	bf00      	nop
 800cdc2:	370c      	adds	r7, #12
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bc80      	pop	{r7}
 800cdc8:	4770      	bx	lr

0800cdca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cdca:	b480      	push	{r7}
 800cdcc:	b083      	sub	sp, #12
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cdd2:	bf00      	nop
 800cdd4:	370c      	adds	r7, #12
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bc80      	pop	{r7}
 800cdda:	4770      	bx	lr

0800cddc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b082      	sub	sp, #8
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d101      	bne.n	800cdee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cdea:	2301      	movs	r3, #1
 800cdec:	e042      	b.n	800ce74 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d106      	bne.n	800ce08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f7fc fd88 	bl	8009918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2224      	movs	r2, #36	@ 0x24
 800ce0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	68da      	ldr	r2, [r3, #12]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ce1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f000 ff77 	bl	800dd14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	691a      	ldr	r2, [r3, #16]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ce34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	695a      	ldr	r2, [r3, #20]
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ce44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	68da      	ldr	r2, [r3, #12]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ce54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2220      	movs	r2, #32
 800ce60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2220      	movs	r2, #32
 800ce68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ce72:	2300      	movs	r3, #0
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3708      	adds	r7, #8
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ce7c:	b480      	push	{r7}
 800ce7e:	b085      	sub	sp, #20
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	60f8      	str	r0, [r7, #12]
 800ce84:	60b9      	str	r1, [r7, #8]
 800ce86:	4613      	mov	r3, r2
 800ce88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ce90:	b2db      	uxtb	r3, r3
 800ce92:	2b20      	cmp	r3, #32
 800ce94:	d121      	bne.n	800ceda <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d002      	beq.n	800cea2 <HAL_UART_Transmit_IT+0x26>
 800ce9c:	88fb      	ldrh	r3, [r7, #6]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d101      	bne.n	800cea6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800cea2:	2301      	movs	r3, #1
 800cea4:	e01a      	b.n	800cedc <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	68ba      	ldr	r2, [r7, #8]
 800ceaa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	88fa      	ldrh	r2, [r7, #6]
 800ceb0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	88fa      	ldrh	r2, [r7, #6]
 800ceb6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	2200      	movs	r2, #0
 800cebc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2221      	movs	r2, #33	@ 0x21
 800cec2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	68da      	ldr	r2, [r3, #12]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800ced4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800ced6:	2300      	movs	r3, #0
 800ced8:	e000      	b.n	800cedc <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800ceda:	2302      	movs	r3, #2
  }
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3714      	adds	r7, #20
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bc80      	pop	{r7}
 800cee4:	4770      	bx	lr
	...

0800cee8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b08c      	sub	sp, #48	@ 0x30
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	4613      	mov	r3, r2
 800cef4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	2b20      	cmp	r3, #32
 800cf00:	d156      	bne.n	800cfb0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf02:	68bb      	ldr	r3, [r7, #8]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d002      	beq.n	800cf0e <HAL_UART_Transmit_DMA+0x26>
 800cf08:	88fb      	ldrh	r3, [r7, #6]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d101      	bne.n	800cf12 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800cf0e:	2301      	movs	r3, #1
 800cf10:	e04f      	b.n	800cfb2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800cf12:	68ba      	ldr	r2, [r7, #8]
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	88fa      	ldrh	r2, [r7, #6]
 800cf1c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	88fa      	ldrh	r2, [r7, #6]
 800cf22:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2200      	movs	r2, #0
 800cf28:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2221      	movs	r2, #33	@ 0x21
 800cf2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf36:	4a21      	ldr	r2, [pc, #132]	@ (800cfbc <HAL_UART_Transmit_DMA+0xd4>)
 800cf38:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf3e:	4a20      	ldr	r2, [pc, #128]	@ (800cfc0 <HAL_UART_Transmit_DMA+0xd8>)
 800cf40:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf46:	4a1f      	ldr	r2, [pc, #124]	@ (800cfc4 <HAL_UART_Transmit_DMA+0xdc>)
 800cf48:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf4e:	2200      	movs	r2, #0
 800cf50:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800cf52:	f107 0308 	add.w	r3, r7, #8
 800cf56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800cf5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf5e:	6819      	ldr	r1, [r3, #0]
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	3304      	adds	r3, #4
 800cf66:	461a      	mov	r2, r3
 800cf68:	88fb      	ldrh	r3, [r7, #6]
 800cf6a:	f7fd f85a 	bl	800a022 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800cf76:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	3314      	adds	r3, #20
 800cf7e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf80:	69bb      	ldr	r3, [r7, #24]
 800cf82:	e853 3f00 	ldrex	r3, [r3]
 800cf86:	617b      	str	r3, [r7, #20]
   return(result);
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	3314      	adds	r3, #20
 800cf96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf98:	627a      	str	r2, [r7, #36]	@ 0x24
 800cf9a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf9c:	6a39      	ldr	r1, [r7, #32]
 800cf9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cfa0:	e841 2300 	strex	r3, r2, [r1]
 800cfa4:	61fb      	str	r3, [r7, #28]
   return(result);
 800cfa6:	69fb      	ldr	r3, [r7, #28]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d1e5      	bne.n	800cf78 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800cfac:	2300      	movs	r3, #0
 800cfae:	e000      	b.n	800cfb2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800cfb0:	2302      	movs	r3, #2
  }
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3730      	adds	r7, #48	@ 0x30
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	0800d5a9 	.word	0x0800d5a9
 800cfc0:	0800d643 	.word	0x0800d643
 800cfc4:	0800d7c7 	.word	0x0800d7c7

0800cfc8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b084      	sub	sp, #16
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	60f8      	str	r0, [r7, #12]
 800cfd0:	60b9      	str	r1, [r7, #8]
 800cfd2:	4613      	mov	r3, r2
 800cfd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cfdc:	b2db      	uxtb	r3, r3
 800cfde:	2b20      	cmp	r3, #32
 800cfe0:	d112      	bne.n	800d008 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d002      	beq.n	800cfee <HAL_UART_Receive_DMA+0x26>
 800cfe8:	88fb      	ldrh	r3, [r7, #6]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d101      	bne.n	800cff2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800cfee:	2301      	movs	r3, #1
 800cff0:	e00b      	b.n	800d00a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	2200      	movs	r2, #0
 800cff6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800cff8:	88fb      	ldrh	r3, [r7, #6]
 800cffa:	461a      	mov	r2, r3
 800cffc:	68b9      	ldr	r1, [r7, #8]
 800cffe:	68f8      	ldr	r0, [r7, #12]
 800d000:	f000 fc2c 	bl	800d85c <UART_Start_Receive_DMA>
 800d004:	4603      	mov	r3, r0
 800d006:	e000      	b.n	800d00a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800d008:	2302      	movs	r3, #2
  }
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3710      	adds	r7, #16
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
	...

0800d014 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b0ba      	sub	sp, #232	@ 0xe8
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	68db      	ldr	r3, [r3, #12]
 800d02c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	695b      	ldr	r3, [r3, #20]
 800d036:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800d03a:	2300      	movs	r3, #0
 800d03c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800d040:	2300      	movs	r3, #0
 800d042:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d04a:	f003 030f 	and.w	r3, r3, #15
 800d04e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800d052:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d056:	2b00      	cmp	r3, #0
 800d058:	d10f      	bne.n	800d07a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d05a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d05e:	f003 0320 	and.w	r3, r3, #32
 800d062:	2b00      	cmp	r3, #0
 800d064:	d009      	beq.n	800d07a <HAL_UART_IRQHandler+0x66>
 800d066:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d06a:	f003 0320 	and.w	r3, r3, #32
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d003      	beq.n	800d07a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 fd90 	bl	800db98 <UART_Receive_IT>
      return;
 800d078:	e25b      	b.n	800d532 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d07a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f000 80de 	beq.w	800d240 <HAL_UART_IRQHandler+0x22c>
 800d084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d088:	f003 0301 	and.w	r3, r3, #1
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d106      	bne.n	800d09e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d094:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800d098:	2b00      	cmp	r3, #0
 800d09a:	f000 80d1 	beq.w	800d240 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d09e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0a2:	f003 0301 	and.w	r3, r3, #1
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d00b      	beq.n	800d0c2 <HAL_UART_IRQHandler+0xae>
 800d0aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d0ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d005      	beq.n	800d0c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0ba:	f043 0201 	orr.w	r2, r3, #1
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d0c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0c6:	f003 0304 	and.w	r3, r3, #4
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d00b      	beq.n	800d0e6 <HAL_UART_IRQHandler+0xd2>
 800d0ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d0d2:	f003 0301 	and.w	r3, r3, #1
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d005      	beq.n	800d0e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0de:	f043 0202 	orr.w	r2, r3, #2
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d0e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d0ea:	f003 0302 	and.w	r3, r3, #2
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d00b      	beq.n	800d10a <HAL_UART_IRQHandler+0xf6>
 800d0f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d0f6:	f003 0301 	and.w	r3, r3, #1
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d005      	beq.n	800d10a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d102:	f043 0204 	orr.w	r2, r3, #4
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d10a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d10e:	f003 0308 	and.w	r3, r3, #8
 800d112:	2b00      	cmp	r3, #0
 800d114:	d011      	beq.n	800d13a <HAL_UART_IRQHandler+0x126>
 800d116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d11a:	f003 0320 	and.w	r3, r3, #32
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d105      	bne.n	800d12e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d126:	f003 0301 	and.w	r3, r3, #1
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d005      	beq.n	800d13a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d132:	f043 0208 	orr.w	r2, r3, #8
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d13e:	2b00      	cmp	r3, #0
 800d140:	f000 81f2 	beq.w	800d528 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d148:	f003 0320 	and.w	r3, r3, #32
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d008      	beq.n	800d162 <HAL_UART_IRQHandler+0x14e>
 800d150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d154:	f003 0320 	and.w	r3, r3, #32
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d002      	beq.n	800d162 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d15c:	6878      	ldr	r0, [r7, #4]
 800d15e:	f000 fd1b 	bl	800db98 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	695b      	ldr	r3, [r3, #20]
 800d168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	bf14      	ite	ne
 800d170:	2301      	movne	r3, #1
 800d172:	2300      	moveq	r3, #0
 800d174:	b2db      	uxtb	r3, r3
 800d176:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d17e:	f003 0308 	and.w	r3, r3, #8
 800d182:	2b00      	cmp	r3, #0
 800d184:	d103      	bne.n	800d18e <HAL_UART_IRQHandler+0x17a>
 800d186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d04f      	beq.n	800d22e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f000 fc25 	bl	800d9de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	695b      	ldr	r3, [r3, #20]
 800d19a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d041      	beq.n	800d226 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	3314      	adds	r3, #20
 800d1a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d1b0:	e853 3f00 	ldrex	r3, [r3]
 800d1b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d1b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d1bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d1c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	3314      	adds	r3, #20
 800d1ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d1ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d1d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d1da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d1de:	e841 2300 	strex	r3, r2, [r1]
 800d1e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d1e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d1d9      	bne.n	800d1a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d013      	beq.n	800d21e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1fa:	4a7e      	ldr	r2, [pc, #504]	@ (800d3f4 <HAL_UART_IRQHandler+0x3e0>)
 800d1fc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d202:	4618      	mov	r0, r3
 800d204:	f7fc ffa8 	bl	800a158 <HAL_DMA_Abort_IT>
 800d208:	4603      	mov	r3, r0
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d016      	beq.n	800d23c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d212:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d214:	687a      	ldr	r2, [r7, #4]
 800d216:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d218:	4610      	mov	r0, r2
 800d21a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d21c:	e00e      	b.n	800d23c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f000 f9ae 	bl	800d580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d224:	e00a      	b.n	800d23c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f000 f9aa 	bl	800d580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d22c:	e006      	b.n	800d23c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f000 f9a6 	bl	800d580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2200      	movs	r2, #0
 800d238:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800d23a:	e175      	b.n	800d528 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d23c:	bf00      	nop
    return;
 800d23e:	e173      	b.n	800d528 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d244:	2b01      	cmp	r3, #1
 800d246:	f040 814f 	bne.w	800d4e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d24a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d24e:	f003 0310 	and.w	r3, r3, #16
 800d252:	2b00      	cmp	r3, #0
 800d254:	f000 8148 	beq.w	800d4e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d25c:	f003 0310 	and.w	r3, r3, #16
 800d260:	2b00      	cmp	r3, #0
 800d262:	f000 8141 	beq.w	800d4e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d266:	2300      	movs	r3, #0
 800d268:	60bb      	str	r3, [r7, #8]
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	60bb      	str	r3, [r7, #8]
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	685b      	ldr	r3, [r3, #4]
 800d278:	60bb      	str	r3, [r7, #8]
 800d27a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	695b      	ldr	r3, [r3, #20]
 800d282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d286:	2b00      	cmp	r3, #0
 800d288:	f000 80b6 	beq.w	800d3f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d298:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	f000 8145 	beq.w	800d52c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d2a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d2aa:	429a      	cmp	r2, r3
 800d2ac:	f080 813e 	bcs.w	800d52c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d2b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2bc:	699b      	ldr	r3, [r3, #24]
 800d2be:	2b20      	cmp	r3, #32
 800d2c0:	f000 8088 	beq.w	800d3d4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	330c      	adds	r3, #12
 800d2ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d2d2:	e853 3f00 	ldrex	r3, [r3]
 800d2d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d2da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d2de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d2e2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	330c      	adds	r3, #12
 800d2ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d2f0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d2f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d2fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d300:	e841 2300 	strex	r3, r2, [r1]
 800d304:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d308:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d1d9      	bne.n	800d2c4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	3314      	adds	r3, #20
 800d316:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d318:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d31a:	e853 3f00 	ldrex	r3, [r3]
 800d31e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d320:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d322:	f023 0301 	bic.w	r3, r3, #1
 800d326:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	3314      	adds	r3, #20
 800d330:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d334:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d338:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d33a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d33c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d340:	e841 2300 	strex	r3, r2, [r1]
 800d344:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d346:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d1e1      	bne.n	800d310 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	3314      	adds	r3, #20
 800d352:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d354:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d356:	e853 3f00 	ldrex	r3, [r3]
 800d35a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d35c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d35e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d362:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	3314      	adds	r3, #20
 800d36c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d370:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d372:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d374:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d376:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d378:	e841 2300 	strex	r3, r2, [r1]
 800d37c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d37e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d380:	2b00      	cmp	r3, #0
 800d382:	d1e3      	bne.n	800d34c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2220      	movs	r2, #32
 800d388:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	2200      	movs	r2, #0
 800d390:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	330c      	adds	r3, #12
 800d398:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d39a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d39c:	e853 3f00 	ldrex	r3, [r3]
 800d3a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d3a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d3a4:	f023 0310 	bic.w	r3, r3, #16
 800d3a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	330c      	adds	r3, #12
 800d3b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d3b6:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d3b8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d3bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d3be:	e841 2300 	strex	r3, r2, [r1]
 800d3c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d3c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d1e3      	bne.n	800d392 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7fc fe87 	bl	800a0e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2202      	movs	r2, #2
 800d3d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d3e2:	b29b      	uxth	r3, r3
 800d3e4:	1ad3      	subs	r3, r2, r3
 800d3e6:	b29b      	uxth	r3, r3
 800d3e8:	4619      	mov	r1, r3
 800d3ea:	6878      	ldr	r0, [r7, #4]
 800d3ec:	f000 f8d1 	bl	800d592 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d3f0:	e09c      	b.n	800d52c <HAL_UART_IRQHandler+0x518>
 800d3f2:	bf00      	nop
 800d3f4:	0800daa3 	.word	0x0800daa3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d400:	b29b      	uxth	r3, r3
 800d402:	1ad3      	subs	r3, r2, r3
 800d404:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	2b00      	cmp	r3, #0
 800d410:	f000 808e 	beq.w	800d530 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d414:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d418:	2b00      	cmp	r3, #0
 800d41a:	f000 8089 	beq.w	800d530 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	330c      	adds	r3, #12
 800d424:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d428:	e853 3f00 	ldrex	r3, [r3]
 800d42c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d42e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d430:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d434:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	330c      	adds	r3, #12
 800d43e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d442:	647a      	str	r2, [r7, #68]	@ 0x44
 800d444:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d446:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d448:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d44a:	e841 2300 	strex	r3, r2, [r1]
 800d44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d452:	2b00      	cmp	r3, #0
 800d454:	d1e3      	bne.n	800d41e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	3314      	adds	r3, #20
 800d45c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d45e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d460:	e853 3f00 	ldrex	r3, [r3]
 800d464:	623b      	str	r3, [r7, #32]
   return(result);
 800d466:	6a3b      	ldr	r3, [r7, #32]
 800d468:	f023 0301 	bic.w	r3, r3, #1
 800d46c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	3314      	adds	r3, #20
 800d476:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d47a:	633a      	str	r2, [r7, #48]	@ 0x30
 800d47c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d47e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d480:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d482:	e841 2300 	strex	r3, r2, [r1]
 800d486:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d1e3      	bne.n	800d456 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	2220      	movs	r2, #32
 800d492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2200      	movs	r2, #0
 800d49a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	330c      	adds	r3, #12
 800d4a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	e853 3f00 	ldrex	r3, [r3]
 800d4aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f023 0310 	bic.w	r3, r3, #16
 800d4b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	330c      	adds	r3, #12
 800d4bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d4c0:	61fa      	str	r2, [r7, #28]
 800d4c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4c4:	69b9      	ldr	r1, [r7, #24]
 800d4c6:	69fa      	ldr	r2, [r7, #28]
 800d4c8:	e841 2300 	strex	r3, r2, [r1]
 800d4cc:	617b      	str	r3, [r7, #20]
   return(result);
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d1e3      	bne.n	800d49c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2202      	movs	r2, #2
 800d4d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d4da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d4de:	4619      	mov	r1, r3
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f000 f856 	bl	800d592 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d4e6:	e023      	b.n	800d530 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d4e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d009      	beq.n	800d508 <HAL_UART_IRQHandler+0x4f4>
 800d4f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d003      	beq.n	800d508 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f000 fae2 	bl	800daca <UART_Transmit_IT>
    return;
 800d506:	e014      	b.n	800d532 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d50c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d510:	2b00      	cmp	r3, #0
 800d512:	d00e      	beq.n	800d532 <HAL_UART_IRQHandler+0x51e>
 800d514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d008      	beq.n	800d532 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f000 fb21 	bl	800db68 <UART_EndTransmit_IT>
    return;
 800d526:	e004      	b.n	800d532 <HAL_UART_IRQHandler+0x51e>
    return;
 800d528:	bf00      	nop
 800d52a:	e002      	b.n	800d532 <HAL_UART_IRQHandler+0x51e>
      return;
 800d52c:	bf00      	nop
 800d52e:	e000      	b.n	800d532 <HAL_UART_IRQHandler+0x51e>
      return;
 800d530:	bf00      	nop
  }
}
 800d532:	37e8      	adds	r7, #232	@ 0xe8
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d538:	b480      	push	{r7}
 800d53a:	b083      	sub	sp, #12
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d540:	bf00      	nop
 800d542:	370c      	adds	r7, #12
 800d544:	46bd      	mov	sp, r7
 800d546:	bc80      	pop	{r7}
 800d548:	4770      	bx	lr

0800d54a <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d54a:	b480      	push	{r7}
 800d54c:	b083      	sub	sp, #12
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800d552:	bf00      	nop
 800d554:	370c      	adds	r7, #12
 800d556:	46bd      	mov	sp, r7
 800d558:	bc80      	pop	{r7}
 800d55a:	4770      	bx	lr

0800d55c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d55c:	b480      	push	{r7}
 800d55e:	b083      	sub	sp, #12
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d564:	bf00      	nop
 800d566:	370c      	adds	r7, #12
 800d568:	46bd      	mov	sp, r7
 800d56a:	bc80      	pop	{r7}
 800d56c:	4770      	bx	lr

0800d56e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d56e:	b480      	push	{r7}
 800d570:	b083      	sub	sp, #12
 800d572:	af00      	add	r7, sp, #0
 800d574:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800d576:	bf00      	nop
 800d578:	370c      	adds	r7, #12
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bc80      	pop	{r7}
 800d57e:	4770      	bx	lr

0800d580 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d580:	b480      	push	{r7}
 800d582:	b083      	sub	sp, #12
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d588:	bf00      	nop
 800d58a:	370c      	adds	r7, #12
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bc80      	pop	{r7}
 800d590:	4770      	bx	lr

0800d592 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d592:	b480      	push	{r7}
 800d594:	b083      	sub	sp, #12
 800d596:	af00      	add	r7, sp, #0
 800d598:	6078      	str	r0, [r7, #4]
 800d59a:	460b      	mov	r3, r1
 800d59c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d59e:	bf00      	nop
 800d5a0:	370c      	adds	r7, #12
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bc80      	pop	{r7}
 800d5a6:	4770      	bx	lr

0800d5a8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b090      	sub	sp, #64	@ 0x40
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f003 0320 	and.w	r3, r3, #32
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d137      	bne.n	800d634 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800d5c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d5ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	3314      	adds	r3, #20
 800d5d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5d4:	e853 3f00 	ldrex	r3, [r3]
 800d5d8:	623b      	str	r3, [r7, #32]
   return(result);
 800d5da:	6a3b      	ldr	r3, [r7, #32]
 800d5dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d5e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d5e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	3314      	adds	r3, #20
 800d5e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d5ea:	633a      	str	r2, [r7, #48]	@ 0x30
 800d5ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d5f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5f2:	e841 2300 	strex	r3, r2, [r1]
 800d5f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d1e5      	bne.n	800d5ca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d5fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	330c      	adds	r3, #12
 800d604:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	e853 3f00 	ldrex	r3, [r3]
 800d60c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d614:	637b      	str	r3, [r7, #52]	@ 0x34
 800d616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	330c      	adds	r3, #12
 800d61c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d61e:	61fa      	str	r2, [r7, #28]
 800d620:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d622:	69b9      	ldr	r1, [r7, #24]
 800d624:	69fa      	ldr	r2, [r7, #28]
 800d626:	e841 2300 	strex	r3, r2, [r1]
 800d62a:	617b      	str	r3, [r7, #20]
   return(result);
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d1e5      	bne.n	800d5fe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d632:	e002      	b.n	800d63a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800d634:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800d636:	f7ff ff7f 	bl	800d538 <HAL_UART_TxCpltCallback>
}
 800d63a:	bf00      	nop
 800d63c:	3740      	adds	r7, #64	@ 0x40
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}

0800d642 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d642:	b580      	push	{r7, lr}
 800d644:	b084      	sub	sp, #16
 800d646:	af00      	add	r7, sp, #0
 800d648:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d64e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d650:	68f8      	ldr	r0, [r7, #12]
 800d652:	f7ff ff7a 	bl	800d54a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d656:	bf00      	nop
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b09c      	sub	sp, #112	@ 0x70
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d66a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f003 0320 	and.w	r3, r3, #32
 800d676:	2b00      	cmp	r3, #0
 800d678:	d172      	bne.n	800d760 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800d67a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d67c:	2200      	movs	r2, #0
 800d67e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d680:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	330c      	adds	r3, #12
 800d686:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d688:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d68a:	e853 3f00 	ldrex	r3, [r3]
 800d68e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d690:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d692:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d696:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d698:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	330c      	adds	r3, #12
 800d69e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d6a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d6a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d6a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d6a8:	e841 2300 	strex	r3, r2, [r1]
 800d6ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d6ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d1e5      	bne.n	800d680 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d6b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	3314      	adds	r3, #20
 800d6ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6be:	e853 3f00 	ldrex	r3, [r3]
 800d6c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d6c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6c6:	f023 0301 	bic.w	r3, r3, #1
 800d6ca:	667b      	str	r3, [r7, #100]	@ 0x64
 800d6cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	3314      	adds	r3, #20
 800d6d2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d6d4:	647a      	str	r2, [r7, #68]	@ 0x44
 800d6d6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d6da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d6dc:	e841 2300 	strex	r3, r2, [r1]
 800d6e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d6e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d1e5      	bne.n	800d6b4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d6e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	3314      	adds	r3, #20
 800d6ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6f2:	e853 3f00 	ldrex	r3, [r3]
 800d6f6:	623b      	str	r3, [r7, #32]
   return(result);
 800d6f8:	6a3b      	ldr	r3, [r7, #32]
 800d6fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d6fe:	663b      	str	r3, [r7, #96]	@ 0x60
 800d700:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	3314      	adds	r3, #20
 800d706:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d708:	633a      	str	r2, [r7, #48]	@ 0x30
 800d70a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d70c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d70e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d710:	e841 2300 	strex	r3, r2, [r1]
 800d714:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d1e5      	bne.n	800d6e8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d71c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d71e:	2220      	movs	r2, #32
 800d720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d724:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d728:	2b01      	cmp	r3, #1
 800d72a:	d119      	bne.n	800d760 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d72c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	330c      	adds	r3, #12
 800d732:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	e853 3f00 	ldrex	r3, [r3]
 800d73a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f023 0310 	bic.w	r3, r3, #16
 800d742:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d744:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	330c      	adds	r3, #12
 800d74a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d74c:	61fa      	str	r2, [r7, #28]
 800d74e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d750:	69b9      	ldr	r1, [r7, #24]
 800d752:	69fa      	ldr	r2, [r7, #28]
 800d754:	e841 2300 	strex	r3, r2, [r1]
 800d758:	617b      	str	r3, [r7, #20]
   return(result);
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d1e5      	bne.n	800d72c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d760:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d762:	2200      	movs	r2, #0
 800d764:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d766:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d76a:	2b01      	cmp	r3, #1
 800d76c:	d106      	bne.n	800d77c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d76e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d770:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d772:	4619      	mov	r1, r3
 800d774:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d776:	f7ff ff0c 	bl	800d592 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d77a:	e002      	b.n	800d782 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800d77c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800d77e:	f7ff feed 	bl	800d55c <HAL_UART_RxCpltCallback>
}
 800d782:	bf00      	nop
 800d784:	3770      	adds	r7, #112	@ 0x70
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}

0800d78a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d78a:	b580      	push	{r7, lr}
 800d78c:	b084      	sub	sp, #16
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d796:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	2201      	movs	r2, #1
 800d79c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	d108      	bne.n	800d7b8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d7aa:	085b      	lsrs	r3, r3, #1
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	4619      	mov	r1, r3
 800d7b0:	68f8      	ldr	r0, [r7, #12]
 800d7b2:	f7ff feee 	bl	800d592 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d7b6:	e002      	b.n	800d7be <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800d7b8:	68f8      	ldr	r0, [r7, #12]
 800d7ba:	f7ff fed8 	bl	800d56e <HAL_UART_RxHalfCpltCallback>
}
 800d7be:	bf00      	nop
 800d7c0:	3710      	adds	r7, #16
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}

0800d7c6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d7c6:	b580      	push	{r7, lr}
 800d7c8:	b084      	sub	sp, #16
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7d6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	695b      	ldr	r3, [r3, #20]
 800d7de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	bf14      	ite	ne
 800d7e6:	2301      	movne	r3, #1
 800d7e8:	2300      	moveq	r3, #0
 800d7ea:	b2db      	uxtb	r3, r3
 800d7ec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d7f4:	b2db      	uxtb	r3, r3
 800d7f6:	2b21      	cmp	r3, #33	@ 0x21
 800d7f8:	d108      	bne.n	800d80c <UART_DMAError+0x46>
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d005      	beq.n	800d80c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	2200      	movs	r2, #0
 800d804:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800d806:	68b8      	ldr	r0, [r7, #8]
 800d808:	f000 f8c2 	bl	800d990 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	695b      	ldr	r3, [r3, #20]
 800d812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d816:	2b00      	cmp	r3, #0
 800d818:	bf14      	ite	ne
 800d81a:	2301      	movne	r3, #1
 800d81c:	2300      	moveq	r3, #0
 800d81e:	b2db      	uxtb	r3, r3
 800d820:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	2b22      	cmp	r3, #34	@ 0x22
 800d82c:	d108      	bne.n	800d840 <UART_DMAError+0x7a>
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d005      	beq.n	800d840 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	2200      	movs	r2, #0
 800d838:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800d83a:	68b8      	ldr	r0, [r7, #8]
 800d83c:	f000 f8cf 	bl	800d9de <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d844:	f043 0210 	orr.w	r2, r3, #16
 800d848:	68bb      	ldr	r3, [r7, #8]
 800d84a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d84c:	68b8      	ldr	r0, [r7, #8]
 800d84e:	f7ff fe97 	bl	800d580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d852:	bf00      	nop
 800d854:	3710      	adds	r7, #16
 800d856:	46bd      	mov	sp, r7
 800d858:	bd80      	pop	{r7, pc}
	...

0800d85c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b098      	sub	sp, #96	@ 0x60
 800d860:	af00      	add	r7, sp, #0
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	60b9      	str	r1, [r7, #8]
 800d866:	4613      	mov	r3, r2
 800d868:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800d86a:	68ba      	ldr	r2, [r7, #8]
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	88fa      	ldrh	r2, [r7, #6]
 800d874:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	2200      	movs	r2, #0
 800d87a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2222      	movs	r2, #34	@ 0x22
 800d880:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d888:	4a3e      	ldr	r2, [pc, #248]	@ (800d984 <UART_Start_Receive_DMA+0x128>)
 800d88a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d890:	4a3d      	ldr	r2, [pc, #244]	@ (800d988 <UART_Start_Receive_DMA+0x12c>)
 800d892:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d898:	4a3c      	ldr	r2, [pc, #240]	@ (800d98c <UART_Start_Receive_DMA+0x130>)
 800d89a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800d8a4:	f107 0308 	add.w	r3, r7, #8
 800d8a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	3304      	adds	r3, #4
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d8b8:	681a      	ldr	r2, [r3, #0]
 800d8ba:	88fb      	ldrh	r3, [r7, #6]
 800d8bc:	f7fc fbb1 	bl	800a022 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	613b      	str	r3, [r7, #16]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	613b      	str	r3, [r7, #16]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	685b      	ldr	r3, [r3, #4]
 800d8d2:	613b      	str	r3, [r7, #16]
 800d8d4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	691b      	ldr	r3, [r3, #16]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d019      	beq.n	800d912 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	330c      	adds	r3, #12
 800d8e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8e8:	e853 3f00 	ldrex	r3, [r3]
 800d8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d8ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d8f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d8f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	330c      	adds	r3, #12
 800d8fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d8fe:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800d900:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d902:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800d904:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d906:	e841 2300 	strex	r3, r2, [r1]
 800d90a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d90c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d1e5      	bne.n	800d8de <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	3314      	adds	r3, #20
 800d918:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d91a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d91c:	e853 3f00 	ldrex	r3, [r3]
 800d920:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d924:	f043 0301 	orr.w	r3, r3, #1
 800d928:	657b      	str	r3, [r7, #84]	@ 0x54
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	3314      	adds	r3, #20
 800d930:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d932:	63ba      	str	r2, [r7, #56]	@ 0x38
 800d934:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d936:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d938:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d93a:	e841 2300 	strex	r3, r2, [r1]
 800d93e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d942:	2b00      	cmp	r3, #0
 800d944:	d1e5      	bne.n	800d912 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	3314      	adds	r3, #20
 800d94c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d94e:	69bb      	ldr	r3, [r7, #24]
 800d950:	e853 3f00 	ldrex	r3, [r3]
 800d954:	617b      	str	r3, [r7, #20]
   return(result);
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d95c:	653b      	str	r3, [r7, #80]	@ 0x50
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	3314      	adds	r3, #20
 800d964:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d966:	627a      	str	r2, [r7, #36]	@ 0x24
 800d968:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d96a:	6a39      	ldr	r1, [r7, #32]
 800d96c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d96e:	e841 2300 	strex	r3, r2, [r1]
 800d972:	61fb      	str	r3, [r7, #28]
   return(result);
 800d974:	69fb      	ldr	r3, [r7, #28]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d1e5      	bne.n	800d946 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800d97a:	2300      	movs	r3, #0
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3760      	adds	r7, #96	@ 0x60
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}
 800d984:	0800d65f 	.word	0x0800d65f
 800d988:	0800d78b 	.word	0x0800d78b
 800d98c:	0800d7c7 	.word	0x0800d7c7

0800d990 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d990:	b480      	push	{r7}
 800d992:	b089      	sub	sp, #36	@ 0x24
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	330c      	adds	r3, #12
 800d99e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	e853 3f00 	ldrex	r3, [r3]
 800d9a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800d9ae:	61fb      	str	r3, [r7, #28]
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	330c      	adds	r3, #12
 800d9b6:	69fa      	ldr	r2, [r7, #28]
 800d9b8:	61ba      	str	r2, [r7, #24]
 800d9ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9bc:	6979      	ldr	r1, [r7, #20]
 800d9be:	69ba      	ldr	r2, [r7, #24]
 800d9c0:	e841 2300 	strex	r3, r2, [r1]
 800d9c4:	613b      	str	r3, [r7, #16]
   return(result);
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d1e5      	bne.n	800d998 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2220      	movs	r2, #32
 800d9d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800d9d4:	bf00      	nop
 800d9d6:	3724      	adds	r7, #36	@ 0x24
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bc80      	pop	{r7}
 800d9dc:	4770      	bx	lr

0800d9de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d9de:	b480      	push	{r7}
 800d9e0:	b095      	sub	sp, #84	@ 0x54
 800d9e2:	af00      	add	r7, sp, #0
 800d9e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	330c      	adds	r3, #12
 800d9ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9f0:	e853 3f00 	ldrex	r3, [r3]
 800d9f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d9fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	330c      	adds	r3, #12
 800da04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800da06:	643a      	str	r2, [r7, #64]	@ 0x40
 800da08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800da0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800da0e:	e841 2300 	strex	r3, r2, [r1]
 800da12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800da14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da16:	2b00      	cmp	r3, #0
 800da18:	d1e5      	bne.n	800d9e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	3314      	adds	r3, #20
 800da20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da22:	6a3b      	ldr	r3, [r7, #32]
 800da24:	e853 3f00 	ldrex	r3, [r3]
 800da28:	61fb      	str	r3, [r7, #28]
   return(result);
 800da2a:	69fb      	ldr	r3, [r7, #28]
 800da2c:	f023 0301 	bic.w	r3, r3, #1
 800da30:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	3314      	adds	r3, #20
 800da38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800da3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800da40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800da42:	e841 2300 	strex	r3, r2, [r1]
 800da46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800da48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d1e5      	bne.n	800da1a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da52:	2b01      	cmp	r3, #1
 800da54:	d119      	bne.n	800da8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	330c      	adds	r3, #12
 800da5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	e853 3f00 	ldrex	r3, [r3]
 800da64:	60bb      	str	r3, [r7, #8]
   return(result);
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	f023 0310 	bic.w	r3, r3, #16
 800da6c:	647b      	str	r3, [r7, #68]	@ 0x44
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	330c      	adds	r3, #12
 800da74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da76:	61ba      	str	r2, [r7, #24]
 800da78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da7a:	6979      	ldr	r1, [r7, #20]
 800da7c:	69ba      	ldr	r2, [r7, #24]
 800da7e:	e841 2300 	strex	r3, r2, [r1]
 800da82:	613b      	str	r3, [r7, #16]
   return(result);
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	2b00      	cmp	r3, #0
 800da88:	d1e5      	bne.n	800da56 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2220      	movs	r2, #32
 800da8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2200      	movs	r2, #0
 800da96:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800da98:	bf00      	nop
 800da9a:	3754      	adds	r7, #84	@ 0x54
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bc80      	pop	{r7}
 800daa0:	4770      	bx	lr

0800daa2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800daa2:	b580      	push	{r7, lr}
 800daa4:	b084      	sub	sp, #16
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2200      	movs	r2, #0
 800dab4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2200      	movs	r2, #0
 800daba:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dabc:	68f8      	ldr	r0, [r7, #12]
 800dabe:	f7ff fd5f 	bl	800d580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dac2:	bf00      	nop
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}

0800daca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800daca:	b480      	push	{r7}
 800dacc:	b085      	sub	sp, #20
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	2b21      	cmp	r3, #33	@ 0x21
 800dadc:	d13e      	bne.n	800db5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	689b      	ldr	r3, [r3, #8]
 800dae2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dae6:	d114      	bne.n	800db12 <UART_Transmit_IT+0x48>
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	691b      	ldr	r3, [r3, #16]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d110      	bne.n	800db12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6a1b      	ldr	r3, [r3, #32]
 800daf4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	881b      	ldrh	r3, [r3, #0]
 800dafa:	461a      	mov	r2, r3
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800db04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6a1b      	ldr	r3, [r3, #32]
 800db0a:	1c9a      	adds	r2, r3, #2
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	621a      	str	r2, [r3, #32]
 800db10:	e008      	b.n	800db24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6a1b      	ldr	r3, [r3, #32]
 800db16:	1c59      	adds	r1, r3, #1
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	6211      	str	r1, [r2, #32]
 800db1c:	781a      	ldrb	r2, [r3, #0]
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800db28:	b29b      	uxth	r3, r3
 800db2a:	3b01      	subs	r3, #1
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	687a      	ldr	r2, [r7, #4]
 800db30:	4619      	mov	r1, r3
 800db32:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800db34:	2b00      	cmp	r3, #0
 800db36:	d10f      	bne.n	800db58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	68da      	ldr	r2, [r3, #12]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800db46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	68da      	ldr	r2, [r3, #12]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800db56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800db58:	2300      	movs	r3, #0
 800db5a:	e000      	b.n	800db5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800db5c:	2302      	movs	r3, #2
  }
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3714      	adds	r7, #20
 800db62:	46bd      	mov	sp, r7
 800db64:	bc80      	pop	{r7}
 800db66:	4770      	bx	lr

0800db68 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b082      	sub	sp, #8
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	68da      	ldr	r2, [r3, #12]
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800db7e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2220      	movs	r2, #32
 800db84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f7ff fcd5 	bl	800d538 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800db8e:	2300      	movs	r3, #0
}
 800db90:	4618      	mov	r0, r3
 800db92:	3708      	adds	r7, #8
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b08c      	sub	sp, #48	@ 0x30
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dba6:	b2db      	uxtb	r3, r3
 800dba8:	2b22      	cmp	r3, #34	@ 0x22
 800dbaa:	f040 80ae 	bne.w	800dd0a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	689b      	ldr	r3, [r3, #8]
 800dbb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dbb6:	d117      	bne.n	800dbe8 <UART_Receive_IT+0x50>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	691b      	ldr	r3, [r3, #16]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d113      	bne.n	800dbe8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbc8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	685b      	ldr	r3, [r3, #4]
 800dbd0:	b29b      	uxth	r3, r3
 800dbd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbd6:	b29a      	uxth	r2, r3
 800dbd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbe0:	1c9a      	adds	r2, r3, #2
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	629a      	str	r2, [r3, #40]	@ 0x28
 800dbe6:	e026      	b.n	800dc36 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	689b      	ldr	r3, [r3, #8]
 800dbf6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dbfa:	d007      	beq.n	800dc0c <UART_Receive_IT+0x74>
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	689b      	ldr	r3, [r3, #8]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d10a      	bne.n	800dc1a <UART_Receive_IT+0x82>
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	691b      	ldr	r3, [r3, #16]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d106      	bne.n	800dc1a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	b2da      	uxtb	r2, r3
 800dc14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc16:	701a      	strb	r2, [r3, #0]
 800dc18:	e008      	b.n	800dc2c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	b2db      	uxtb	r3, r3
 800dc22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc26:	b2da      	uxtb	r2, r3
 800dc28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc2a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc30:	1c5a      	adds	r2, r3, #1
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dc3a:	b29b      	uxth	r3, r3
 800dc3c:	3b01      	subs	r3, #1
 800dc3e:	b29b      	uxth	r3, r3
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	4619      	mov	r1, r3
 800dc44:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d15d      	bne.n	800dd06 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	68da      	ldr	r2, [r3, #12]
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f022 0220 	bic.w	r2, r2, #32
 800dc58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	68da      	ldr	r2, [r3, #12]
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800dc68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	695a      	ldr	r2, [r3, #20]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	f022 0201 	bic.w	r2, r2, #1
 800dc78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	2220      	movs	r2, #32
 800dc7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	2200      	movs	r2, #0
 800dc86:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d135      	bne.n	800dcfc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2200      	movs	r2, #0
 800dc94:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	330c      	adds	r3, #12
 800dc9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	e853 3f00 	ldrex	r3, [r3]
 800dca4:	613b      	str	r3, [r7, #16]
   return(result);
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	f023 0310 	bic.w	r3, r3, #16
 800dcac:	627b      	str	r3, [r7, #36]	@ 0x24
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	330c      	adds	r3, #12
 800dcb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcb6:	623a      	str	r2, [r7, #32]
 800dcb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcba:	69f9      	ldr	r1, [r7, #28]
 800dcbc:	6a3a      	ldr	r2, [r7, #32]
 800dcbe:	e841 2300 	strex	r3, r2, [r1]
 800dcc2:	61bb      	str	r3, [r7, #24]
   return(result);
 800dcc4:	69bb      	ldr	r3, [r7, #24]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d1e5      	bne.n	800dc96 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f003 0310 	and.w	r3, r3, #16
 800dcd4:	2b10      	cmp	r3, #16
 800dcd6:	d10a      	bne.n	800dcee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800dcd8:	2300      	movs	r3, #0
 800dcda:	60fb      	str	r3, [r7, #12]
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	60fb      	str	r3, [r7, #12]
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	60fb      	str	r3, [r7, #12]
 800dcec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800dcf2:	4619      	mov	r1, r3
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f7ff fc4c 	bl	800d592 <HAL_UARTEx_RxEventCallback>
 800dcfa:	e002      	b.n	800dd02 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f7ff fc2d 	bl	800d55c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800dd02:	2300      	movs	r3, #0
 800dd04:	e002      	b.n	800dd0c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800dd06:	2300      	movs	r3, #0
 800dd08:	e000      	b.n	800dd0c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800dd0a:	2302      	movs	r3, #2
  }
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3730      	adds	r7, #48	@ 0x30
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	691b      	ldr	r3, [r3, #16]
 800dd22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	68da      	ldr	r2, [r3, #12]
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	430a      	orrs	r2, r1
 800dd30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	689a      	ldr	r2, [r3, #8]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	691b      	ldr	r3, [r3, #16]
 800dd3a:	431a      	orrs	r2, r3
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	695b      	ldr	r3, [r3, #20]
 800dd40:	4313      	orrs	r3, r2
 800dd42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	68db      	ldr	r3, [r3, #12]
 800dd4a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800dd4e:	f023 030c 	bic.w	r3, r3, #12
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	6812      	ldr	r2, [r2, #0]
 800dd56:	68b9      	ldr	r1, [r7, #8]
 800dd58:	430b      	orrs	r3, r1
 800dd5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	695b      	ldr	r3, [r3, #20]
 800dd62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	699a      	ldr	r2, [r3, #24]
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	430a      	orrs	r2, r1
 800dd70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	4a2c      	ldr	r2, [pc, #176]	@ (800de28 <UART_SetConfig+0x114>)
 800dd78:	4293      	cmp	r3, r2
 800dd7a:	d103      	bne.n	800dd84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800dd7c:	f7fe fbca 	bl	800c514 <HAL_RCC_GetPCLK2Freq>
 800dd80:	60f8      	str	r0, [r7, #12]
 800dd82:	e002      	b.n	800dd8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800dd84:	f7fe fbb2 	bl	800c4ec <HAL_RCC_GetPCLK1Freq>
 800dd88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dd8a:	68fa      	ldr	r2, [r7, #12]
 800dd8c:	4613      	mov	r3, r2
 800dd8e:	009b      	lsls	r3, r3, #2
 800dd90:	4413      	add	r3, r2
 800dd92:	009a      	lsls	r2, r3, #2
 800dd94:	441a      	add	r2, r3
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	685b      	ldr	r3, [r3, #4]
 800dd9a:	009b      	lsls	r3, r3, #2
 800dd9c:	fbb2 f3f3 	udiv	r3, r2, r3
 800dda0:	4a22      	ldr	r2, [pc, #136]	@ (800de2c <UART_SetConfig+0x118>)
 800dda2:	fba2 2303 	umull	r2, r3, r2, r3
 800dda6:	095b      	lsrs	r3, r3, #5
 800dda8:	0119      	lsls	r1, r3, #4
 800ddaa:	68fa      	ldr	r2, [r7, #12]
 800ddac:	4613      	mov	r3, r2
 800ddae:	009b      	lsls	r3, r3, #2
 800ddb0:	4413      	add	r3, r2
 800ddb2:	009a      	lsls	r2, r3, #2
 800ddb4:	441a      	add	r2, r3
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	685b      	ldr	r3, [r3, #4]
 800ddba:	009b      	lsls	r3, r3, #2
 800ddbc:	fbb2 f2f3 	udiv	r2, r2, r3
 800ddc0:	4b1a      	ldr	r3, [pc, #104]	@ (800de2c <UART_SetConfig+0x118>)
 800ddc2:	fba3 0302 	umull	r0, r3, r3, r2
 800ddc6:	095b      	lsrs	r3, r3, #5
 800ddc8:	2064      	movs	r0, #100	@ 0x64
 800ddca:	fb00 f303 	mul.w	r3, r0, r3
 800ddce:	1ad3      	subs	r3, r2, r3
 800ddd0:	011b      	lsls	r3, r3, #4
 800ddd2:	3332      	adds	r3, #50	@ 0x32
 800ddd4:	4a15      	ldr	r2, [pc, #84]	@ (800de2c <UART_SetConfig+0x118>)
 800ddd6:	fba2 2303 	umull	r2, r3, r2, r3
 800ddda:	095b      	lsrs	r3, r3, #5
 800dddc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dde0:	4419      	add	r1, r3
 800dde2:	68fa      	ldr	r2, [r7, #12]
 800dde4:	4613      	mov	r3, r2
 800dde6:	009b      	lsls	r3, r3, #2
 800dde8:	4413      	add	r3, r2
 800ddea:	009a      	lsls	r2, r3, #2
 800ddec:	441a      	add	r2, r3
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	685b      	ldr	r3, [r3, #4]
 800ddf2:	009b      	lsls	r3, r3, #2
 800ddf4:	fbb2 f2f3 	udiv	r2, r2, r3
 800ddf8:	4b0c      	ldr	r3, [pc, #48]	@ (800de2c <UART_SetConfig+0x118>)
 800ddfa:	fba3 0302 	umull	r0, r3, r3, r2
 800ddfe:	095b      	lsrs	r3, r3, #5
 800de00:	2064      	movs	r0, #100	@ 0x64
 800de02:	fb00 f303 	mul.w	r3, r0, r3
 800de06:	1ad3      	subs	r3, r2, r3
 800de08:	011b      	lsls	r3, r3, #4
 800de0a:	3332      	adds	r3, #50	@ 0x32
 800de0c:	4a07      	ldr	r2, [pc, #28]	@ (800de2c <UART_SetConfig+0x118>)
 800de0e:	fba2 2303 	umull	r2, r3, r2, r3
 800de12:	095b      	lsrs	r3, r3, #5
 800de14:	f003 020f 	and.w	r2, r3, #15
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	440a      	add	r2, r1
 800de1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800de20:	bf00      	nop
 800de22:	3710      	adds	r7, #16
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	40013800 	.word	0x40013800
 800de2c:	51eb851f 	.word	0x51eb851f

0800de30 <__itoa>:
 800de30:	1e93      	subs	r3, r2, #2
 800de32:	2b22      	cmp	r3, #34	@ 0x22
 800de34:	b510      	push	{r4, lr}
 800de36:	460c      	mov	r4, r1
 800de38:	d904      	bls.n	800de44 <__itoa+0x14>
 800de3a:	2300      	movs	r3, #0
 800de3c:	461c      	mov	r4, r3
 800de3e:	700b      	strb	r3, [r1, #0]
 800de40:	4620      	mov	r0, r4
 800de42:	bd10      	pop	{r4, pc}
 800de44:	2a0a      	cmp	r2, #10
 800de46:	d109      	bne.n	800de5c <__itoa+0x2c>
 800de48:	2800      	cmp	r0, #0
 800de4a:	da07      	bge.n	800de5c <__itoa+0x2c>
 800de4c:	232d      	movs	r3, #45	@ 0x2d
 800de4e:	700b      	strb	r3, [r1, #0]
 800de50:	2101      	movs	r1, #1
 800de52:	4240      	negs	r0, r0
 800de54:	4421      	add	r1, r4
 800de56:	f000 f8bb 	bl	800dfd0 <__utoa>
 800de5a:	e7f1      	b.n	800de40 <__itoa+0x10>
 800de5c:	2100      	movs	r1, #0
 800de5e:	e7f9      	b.n	800de54 <__itoa+0x24>

0800de60 <itoa>:
 800de60:	f7ff bfe6 	b.w	800de30 <__itoa>

0800de64 <malloc>:
 800de64:	4b02      	ldr	r3, [pc, #8]	@ (800de70 <malloc+0xc>)
 800de66:	4601      	mov	r1, r0
 800de68:	6818      	ldr	r0, [r3, #0]
 800de6a:	f000 b825 	b.w	800deb8 <_malloc_r>
 800de6e:	bf00      	nop
 800de70:	20000f80 	.word	0x20000f80

0800de74 <sbrk_aligned>:
 800de74:	b570      	push	{r4, r5, r6, lr}
 800de76:	4e0f      	ldr	r6, [pc, #60]	@ (800deb4 <sbrk_aligned+0x40>)
 800de78:	460c      	mov	r4, r1
 800de7a:	6831      	ldr	r1, [r6, #0]
 800de7c:	4605      	mov	r5, r0
 800de7e:	b911      	cbnz	r1, 800de86 <sbrk_aligned+0x12>
 800de80:	f000 f948 	bl	800e114 <_sbrk_r>
 800de84:	6030      	str	r0, [r6, #0]
 800de86:	4621      	mov	r1, r4
 800de88:	4628      	mov	r0, r5
 800de8a:	f000 f943 	bl	800e114 <_sbrk_r>
 800de8e:	1c43      	adds	r3, r0, #1
 800de90:	d103      	bne.n	800de9a <sbrk_aligned+0x26>
 800de92:	f04f 34ff 	mov.w	r4, #4294967295
 800de96:	4620      	mov	r0, r4
 800de98:	bd70      	pop	{r4, r5, r6, pc}
 800de9a:	1cc4      	adds	r4, r0, #3
 800de9c:	f024 0403 	bic.w	r4, r4, #3
 800dea0:	42a0      	cmp	r0, r4
 800dea2:	d0f8      	beq.n	800de96 <sbrk_aligned+0x22>
 800dea4:	1a21      	subs	r1, r4, r0
 800dea6:	4628      	mov	r0, r5
 800dea8:	f000 f934 	bl	800e114 <_sbrk_r>
 800deac:	3001      	adds	r0, #1
 800deae:	d1f2      	bne.n	800de96 <sbrk_aligned+0x22>
 800deb0:	e7ef      	b.n	800de92 <sbrk_aligned+0x1e>
 800deb2:	bf00      	nop
 800deb4:	20001a28 	.word	0x20001a28

0800deb8 <_malloc_r>:
 800deb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800debc:	1ccd      	adds	r5, r1, #3
 800debe:	f025 0503 	bic.w	r5, r5, #3
 800dec2:	3508      	adds	r5, #8
 800dec4:	2d0c      	cmp	r5, #12
 800dec6:	bf38      	it	cc
 800dec8:	250c      	movcc	r5, #12
 800deca:	2d00      	cmp	r5, #0
 800decc:	4606      	mov	r6, r0
 800dece:	db01      	blt.n	800ded4 <_malloc_r+0x1c>
 800ded0:	42a9      	cmp	r1, r5
 800ded2:	d904      	bls.n	800dede <_malloc_r+0x26>
 800ded4:	230c      	movs	r3, #12
 800ded6:	6033      	str	r3, [r6, #0]
 800ded8:	2000      	movs	r0, #0
 800deda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dede:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dfb4 <_malloc_r+0xfc>
 800dee2:	f000 f869 	bl	800dfb8 <__malloc_lock>
 800dee6:	f8d8 3000 	ldr.w	r3, [r8]
 800deea:	461c      	mov	r4, r3
 800deec:	bb44      	cbnz	r4, 800df40 <_malloc_r+0x88>
 800deee:	4629      	mov	r1, r5
 800def0:	4630      	mov	r0, r6
 800def2:	f7ff ffbf 	bl	800de74 <sbrk_aligned>
 800def6:	1c43      	adds	r3, r0, #1
 800def8:	4604      	mov	r4, r0
 800defa:	d158      	bne.n	800dfae <_malloc_r+0xf6>
 800defc:	f8d8 4000 	ldr.w	r4, [r8]
 800df00:	4627      	mov	r7, r4
 800df02:	2f00      	cmp	r7, #0
 800df04:	d143      	bne.n	800df8e <_malloc_r+0xd6>
 800df06:	2c00      	cmp	r4, #0
 800df08:	d04b      	beq.n	800dfa2 <_malloc_r+0xea>
 800df0a:	6823      	ldr	r3, [r4, #0]
 800df0c:	4639      	mov	r1, r7
 800df0e:	4630      	mov	r0, r6
 800df10:	eb04 0903 	add.w	r9, r4, r3
 800df14:	f000 f8fe 	bl	800e114 <_sbrk_r>
 800df18:	4581      	cmp	r9, r0
 800df1a:	d142      	bne.n	800dfa2 <_malloc_r+0xea>
 800df1c:	6821      	ldr	r1, [r4, #0]
 800df1e:	4630      	mov	r0, r6
 800df20:	1a6d      	subs	r5, r5, r1
 800df22:	4629      	mov	r1, r5
 800df24:	f7ff ffa6 	bl	800de74 <sbrk_aligned>
 800df28:	3001      	adds	r0, #1
 800df2a:	d03a      	beq.n	800dfa2 <_malloc_r+0xea>
 800df2c:	6823      	ldr	r3, [r4, #0]
 800df2e:	442b      	add	r3, r5
 800df30:	6023      	str	r3, [r4, #0]
 800df32:	f8d8 3000 	ldr.w	r3, [r8]
 800df36:	685a      	ldr	r2, [r3, #4]
 800df38:	bb62      	cbnz	r2, 800df94 <_malloc_r+0xdc>
 800df3a:	f8c8 7000 	str.w	r7, [r8]
 800df3e:	e00f      	b.n	800df60 <_malloc_r+0xa8>
 800df40:	6822      	ldr	r2, [r4, #0]
 800df42:	1b52      	subs	r2, r2, r5
 800df44:	d420      	bmi.n	800df88 <_malloc_r+0xd0>
 800df46:	2a0b      	cmp	r2, #11
 800df48:	d917      	bls.n	800df7a <_malloc_r+0xc2>
 800df4a:	1961      	adds	r1, r4, r5
 800df4c:	42a3      	cmp	r3, r4
 800df4e:	6025      	str	r5, [r4, #0]
 800df50:	bf18      	it	ne
 800df52:	6059      	strne	r1, [r3, #4]
 800df54:	6863      	ldr	r3, [r4, #4]
 800df56:	bf08      	it	eq
 800df58:	f8c8 1000 	streq.w	r1, [r8]
 800df5c:	5162      	str	r2, [r4, r5]
 800df5e:	604b      	str	r3, [r1, #4]
 800df60:	4630      	mov	r0, r6
 800df62:	f000 f82f 	bl	800dfc4 <__malloc_unlock>
 800df66:	f104 000b 	add.w	r0, r4, #11
 800df6a:	1d23      	adds	r3, r4, #4
 800df6c:	f020 0007 	bic.w	r0, r0, #7
 800df70:	1ac2      	subs	r2, r0, r3
 800df72:	bf1c      	itt	ne
 800df74:	1a1b      	subne	r3, r3, r0
 800df76:	50a3      	strne	r3, [r4, r2]
 800df78:	e7af      	b.n	800deda <_malloc_r+0x22>
 800df7a:	6862      	ldr	r2, [r4, #4]
 800df7c:	42a3      	cmp	r3, r4
 800df7e:	bf0c      	ite	eq
 800df80:	f8c8 2000 	streq.w	r2, [r8]
 800df84:	605a      	strne	r2, [r3, #4]
 800df86:	e7eb      	b.n	800df60 <_malloc_r+0xa8>
 800df88:	4623      	mov	r3, r4
 800df8a:	6864      	ldr	r4, [r4, #4]
 800df8c:	e7ae      	b.n	800deec <_malloc_r+0x34>
 800df8e:	463c      	mov	r4, r7
 800df90:	687f      	ldr	r7, [r7, #4]
 800df92:	e7b6      	b.n	800df02 <_malloc_r+0x4a>
 800df94:	461a      	mov	r2, r3
 800df96:	685b      	ldr	r3, [r3, #4]
 800df98:	42a3      	cmp	r3, r4
 800df9a:	d1fb      	bne.n	800df94 <_malloc_r+0xdc>
 800df9c:	2300      	movs	r3, #0
 800df9e:	6053      	str	r3, [r2, #4]
 800dfa0:	e7de      	b.n	800df60 <_malloc_r+0xa8>
 800dfa2:	230c      	movs	r3, #12
 800dfa4:	4630      	mov	r0, r6
 800dfa6:	6033      	str	r3, [r6, #0]
 800dfa8:	f000 f80c 	bl	800dfc4 <__malloc_unlock>
 800dfac:	e794      	b.n	800ded8 <_malloc_r+0x20>
 800dfae:	6005      	str	r5, [r0, #0]
 800dfb0:	e7d6      	b.n	800df60 <_malloc_r+0xa8>
 800dfb2:	bf00      	nop
 800dfb4:	20001a2c 	.word	0x20001a2c

0800dfb8 <__malloc_lock>:
 800dfb8:	4801      	ldr	r0, [pc, #4]	@ (800dfc0 <__malloc_lock+0x8>)
 800dfba:	f000 b8e5 	b.w	800e188 <__retarget_lock_acquire_recursive>
 800dfbe:	bf00      	nop
 800dfc0:	20001b6c 	.word	0x20001b6c

0800dfc4 <__malloc_unlock>:
 800dfc4:	4801      	ldr	r0, [pc, #4]	@ (800dfcc <__malloc_unlock+0x8>)
 800dfc6:	f000 b8e0 	b.w	800e18a <__retarget_lock_release_recursive>
 800dfca:	bf00      	nop
 800dfcc:	20001b6c 	.word	0x20001b6c

0800dfd0 <__utoa>:
 800dfd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfd2:	b08b      	sub	sp, #44	@ 0x2c
 800dfd4:	4605      	mov	r5, r0
 800dfd6:	460b      	mov	r3, r1
 800dfd8:	466e      	mov	r6, sp
 800dfda:	4c1d      	ldr	r4, [pc, #116]	@ (800e050 <__utoa+0x80>)
 800dfdc:	f104 0c20 	add.w	ip, r4, #32
 800dfe0:	4637      	mov	r7, r6
 800dfe2:	6820      	ldr	r0, [r4, #0]
 800dfe4:	6861      	ldr	r1, [r4, #4]
 800dfe6:	3408      	adds	r4, #8
 800dfe8:	c703      	stmia	r7!, {r0, r1}
 800dfea:	4564      	cmp	r4, ip
 800dfec:	463e      	mov	r6, r7
 800dfee:	d1f7      	bne.n	800dfe0 <__utoa+0x10>
 800dff0:	7921      	ldrb	r1, [r4, #4]
 800dff2:	6820      	ldr	r0, [r4, #0]
 800dff4:	7139      	strb	r1, [r7, #4]
 800dff6:	1e91      	subs	r1, r2, #2
 800dff8:	2922      	cmp	r1, #34	@ 0x22
 800dffa:	6038      	str	r0, [r7, #0]
 800dffc:	f04f 0100 	mov.w	r1, #0
 800e000:	d904      	bls.n	800e00c <__utoa+0x3c>
 800e002:	7019      	strb	r1, [r3, #0]
 800e004:	460b      	mov	r3, r1
 800e006:	4618      	mov	r0, r3
 800e008:	b00b      	add	sp, #44	@ 0x2c
 800e00a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e00c:	1e58      	subs	r0, r3, #1
 800e00e:	4684      	mov	ip, r0
 800e010:	fbb5 f7f2 	udiv	r7, r5, r2
 800e014:	fb02 5617 	mls	r6, r2, r7, r5
 800e018:	3628      	adds	r6, #40	@ 0x28
 800e01a:	446e      	add	r6, sp
 800e01c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800e020:	460c      	mov	r4, r1
 800e022:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800e026:	462e      	mov	r6, r5
 800e028:	42b2      	cmp	r2, r6
 800e02a:	463d      	mov	r5, r7
 800e02c:	f101 0101 	add.w	r1, r1, #1
 800e030:	d9ee      	bls.n	800e010 <__utoa+0x40>
 800e032:	2200      	movs	r2, #0
 800e034:	545a      	strb	r2, [r3, r1]
 800e036:	1919      	adds	r1, r3, r4
 800e038:	1aa5      	subs	r5, r4, r2
 800e03a:	42aa      	cmp	r2, r5
 800e03c:	dae3      	bge.n	800e006 <__utoa+0x36>
 800e03e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800e042:	780e      	ldrb	r6, [r1, #0]
 800e044:	3201      	adds	r2, #1
 800e046:	7006      	strb	r6, [r0, #0]
 800e048:	f801 5901 	strb.w	r5, [r1], #-1
 800e04c:	e7f4      	b.n	800e038 <__utoa+0x68>
 800e04e:	bf00      	nop
 800e050:	0800f442 	.word	0x0800f442

0800e054 <siprintf>:
 800e054:	b40e      	push	{r1, r2, r3}
 800e056:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e05a:	b500      	push	{lr}
 800e05c:	b09c      	sub	sp, #112	@ 0x70
 800e05e:	ab1d      	add	r3, sp, #116	@ 0x74
 800e060:	9002      	str	r0, [sp, #8]
 800e062:	9006      	str	r0, [sp, #24]
 800e064:	9107      	str	r1, [sp, #28]
 800e066:	9104      	str	r1, [sp, #16]
 800e068:	4808      	ldr	r0, [pc, #32]	@ (800e08c <siprintf+0x38>)
 800e06a:	4909      	ldr	r1, [pc, #36]	@ (800e090 <siprintf+0x3c>)
 800e06c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e070:	9105      	str	r1, [sp, #20]
 800e072:	6800      	ldr	r0, [r0, #0]
 800e074:	a902      	add	r1, sp, #8
 800e076:	9301      	str	r3, [sp, #4]
 800e078:	f000 f934 	bl	800e2e4 <_svfiprintf_r>
 800e07c:	2200      	movs	r2, #0
 800e07e:	9b02      	ldr	r3, [sp, #8]
 800e080:	701a      	strb	r2, [r3, #0]
 800e082:	b01c      	add	sp, #112	@ 0x70
 800e084:	f85d eb04 	ldr.w	lr, [sp], #4
 800e088:	b003      	add	sp, #12
 800e08a:	4770      	bx	lr
 800e08c:	20000f80 	.word	0x20000f80
 800e090:	ffff0208 	.word	0xffff0208

0800e094 <memset>:
 800e094:	4603      	mov	r3, r0
 800e096:	4402      	add	r2, r0
 800e098:	4293      	cmp	r3, r2
 800e09a:	d100      	bne.n	800e09e <memset+0xa>
 800e09c:	4770      	bx	lr
 800e09e:	f803 1b01 	strb.w	r1, [r3], #1
 800e0a2:	e7f9      	b.n	800e098 <memset+0x4>

0800e0a4 <strcat>:
 800e0a4:	4602      	mov	r2, r0
 800e0a6:	b510      	push	{r4, lr}
 800e0a8:	7814      	ldrb	r4, [r2, #0]
 800e0aa:	4613      	mov	r3, r2
 800e0ac:	3201      	adds	r2, #1
 800e0ae:	2c00      	cmp	r4, #0
 800e0b0:	d1fa      	bne.n	800e0a8 <strcat+0x4>
 800e0b2:	3b01      	subs	r3, #1
 800e0b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e0b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e0bc:	2a00      	cmp	r2, #0
 800e0be:	d1f9      	bne.n	800e0b4 <strcat+0x10>
 800e0c0:	bd10      	pop	{r4, pc}

0800e0c2 <strncpy>:
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	b510      	push	{r4, lr}
 800e0c6:	3901      	subs	r1, #1
 800e0c8:	b132      	cbz	r2, 800e0d8 <strncpy+0x16>
 800e0ca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e0ce:	3a01      	subs	r2, #1
 800e0d0:	f803 4b01 	strb.w	r4, [r3], #1
 800e0d4:	2c00      	cmp	r4, #0
 800e0d6:	d1f7      	bne.n	800e0c8 <strncpy+0x6>
 800e0d8:	2100      	movs	r1, #0
 800e0da:	441a      	add	r2, r3
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	d100      	bne.n	800e0e2 <strncpy+0x20>
 800e0e0:	bd10      	pop	{r4, pc}
 800e0e2:	f803 1b01 	strb.w	r1, [r3], #1
 800e0e6:	e7f9      	b.n	800e0dc <strncpy+0x1a>

0800e0e8 <strstr>:
 800e0e8:	780a      	ldrb	r2, [r1, #0]
 800e0ea:	b570      	push	{r4, r5, r6, lr}
 800e0ec:	b96a      	cbnz	r2, 800e10a <strstr+0x22>
 800e0ee:	bd70      	pop	{r4, r5, r6, pc}
 800e0f0:	429a      	cmp	r2, r3
 800e0f2:	d109      	bne.n	800e108 <strstr+0x20>
 800e0f4:	460c      	mov	r4, r1
 800e0f6:	4605      	mov	r5, r0
 800e0f8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d0f6      	beq.n	800e0ee <strstr+0x6>
 800e100:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e104:	429e      	cmp	r6, r3
 800e106:	d0f7      	beq.n	800e0f8 <strstr+0x10>
 800e108:	3001      	adds	r0, #1
 800e10a:	7803      	ldrb	r3, [r0, #0]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d1ef      	bne.n	800e0f0 <strstr+0x8>
 800e110:	4618      	mov	r0, r3
 800e112:	e7ec      	b.n	800e0ee <strstr+0x6>

0800e114 <_sbrk_r>:
 800e114:	b538      	push	{r3, r4, r5, lr}
 800e116:	2300      	movs	r3, #0
 800e118:	4d05      	ldr	r5, [pc, #20]	@ (800e130 <_sbrk_r+0x1c>)
 800e11a:	4604      	mov	r4, r0
 800e11c:	4608      	mov	r0, r1
 800e11e:	602b      	str	r3, [r5, #0]
 800e120:	f7fb fc8e 	bl	8009a40 <_sbrk>
 800e124:	1c43      	adds	r3, r0, #1
 800e126:	d102      	bne.n	800e12e <_sbrk_r+0x1a>
 800e128:	682b      	ldr	r3, [r5, #0]
 800e12a:	b103      	cbz	r3, 800e12e <_sbrk_r+0x1a>
 800e12c:	6023      	str	r3, [r4, #0]
 800e12e:	bd38      	pop	{r3, r4, r5, pc}
 800e130:	20001b68 	.word	0x20001b68

0800e134 <__errno>:
 800e134:	4b01      	ldr	r3, [pc, #4]	@ (800e13c <__errno+0x8>)
 800e136:	6818      	ldr	r0, [r3, #0]
 800e138:	4770      	bx	lr
 800e13a:	bf00      	nop
 800e13c:	20000f80 	.word	0x20000f80

0800e140 <__libc_init_array>:
 800e140:	b570      	push	{r4, r5, r6, lr}
 800e142:	2600      	movs	r6, #0
 800e144:	4d0c      	ldr	r5, [pc, #48]	@ (800e178 <__libc_init_array+0x38>)
 800e146:	4c0d      	ldr	r4, [pc, #52]	@ (800e17c <__libc_init_array+0x3c>)
 800e148:	1b64      	subs	r4, r4, r5
 800e14a:	10a4      	asrs	r4, r4, #2
 800e14c:	42a6      	cmp	r6, r4
 800e14e:	d109      	bne.n	800e164 <__libc_init_array+0x24>
 800e150:	f000 fbc2 	bl	800e8d8 <_init>
 800e154:	2600      	movs	r6, #0
 800e156:	4d0a      	ldr	r5, [pc, #40]	@ (800e180 <__libc_init_array+0x40>)
 800e158:	4c0a      	ldr	r4, [pc, #40]	@ (800e184 <__libc_init_array+0x44>)
 800e15a:	1b64      	subs	r4, r4, r5
 800e15c:	10a4      	asrs	r4, r4, #2
 800e15e:	42a6      	cmp	r6, r4
 800e160:	d105      	bne.n	800e16e <__libc_init_array+0x2e>
 800e162:	bd70      	pop	{r4, r5, r6, pc}
 800e164:	f855 3b04 	ldr.w	r3, [r5], #4
 800e168:	4798      	blx	r3
 800e16a:	3601      	adds	r6, #1
 800e16c:	e7ee      	b.n	800e14c <__libc_init_array+0xc>
 800e16e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e172:	4798      	blx	r3
 800e174:	3601      	adds	r6, #1
 800e176:	e7f2      	b.n	800e15e <__libc_init_array+0x1e>
 800e178:	0800f4a4 	.word	0x0800f4a4
 800e17c:	0800f4a4 	.word	0x0800f4a4
 800e180:	0800f4a4 	.word	0x0800f4a4
 800e184:	0800f4a8 	.word	0x0800f4a8

0800e188 <__retarget_lock_acquire_recursive>:
 800e188:	4770      	bx	lr

0800e18a <__retarget_lock_release_recursive>:
 800e18a:	4770      	bx	lr

0800e18c <strcpy>:
 800e18c:	4603      	mov	r3, r0
 800e18e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e192:	f803 2b01 	strb.w	r2, [r3], #1
 800e196:	2a00      	cmp	r2, #0
 800e198:	d1f9      	bne.n	800e18e <strcpy+0x2>
 800e19a:	4770      	bx	lr

0800e19c <_free_r>:
 800e19c:	b538      	push	{r3, r4, r5, lr}
 800e19e:	4605      	mov	r5, r0
 800e1a0:	2900      	cmp	r1, #0
 800e1a2:	d040      	beq.n	800e226 <_free_r+0x8a>
 800e1a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e1a8:	1f0c      	subs	r4, r1, #4
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	bfb8      	it	lt
 800e1ae:	18e4      	addlt	r4, r4, r3
 800e1b0:	f7ff ff02 	bl	800dfb8 <__malloc_lock>
 800e1b4:	4a1c      	ldr	r2, [pc, #112]	@ (800e228 <_free_r+0x8c>)
 800e1b6:	6813      	ldr	r3, [r2, #0]
 800e1b8:	b933      	cbnz	r3, 800e1c8 <_free_r+0x2c>
 800e1ba:	6063      	str	r3, [r4, #4]
 800e1bc:	6014      	str	r4, [r2, #0]
 800e1be:	4628      	mov	r0, r5
 800e1c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e1c4:	f7ff befe 	b.w	800dfc4 <__malloc_unlock>
 800e1c8:	42a3      	cmp	r3, r4
 800e1ca:	d908      	bls.n	800e1de <_free_r+0x42>
 800e1cc:	6820      	ldr	r0, [r4, #0]
 800e1ce:	1821      	adds	r1, r4, r0
 800e1d0:	428b      	cmp	r3, r1
 800e1d2:	bf01      	itttt	eq
 800e1d4:	6819      	ldreq	r1, [r3, #0]
 800e1d6:	685b      	ldreq	r3, [r3, #4]
 800e1d8:	1809      	addeq	r1, r1, r0
 800e1da:	6021      	streq	r1, [r4, #0]
 800e1dc:	e7ed      	b.n	800e1ba <_free_r+0x1e>
 800e1de:	461a      	mov	r2, r3
 800e1e0:	685b      	ldr	r3, [r3, #4]
 800e1e2:	b10b      	cbz	r3, 800e1e8 <_free_r+0x4c>
 800e1e4:	42a3      	cmp	r3, r4
 800e1e6:	d9fa      	bls.n	800e1de <_free_r+0x42>
 800e1e8:	6811      	ldr	r1, [r2, #0]
 800e1ea:	1850      	adds	r0, r2, r1
 800e1ec:	42a0      	cmp	r0, r4
 800e1ee:	d10b      	bne.n	800e208 <_free_r+0x6c>
 800e1f0:	6820      	ldr	r0, [r4, #0]
 800e1f2:	4401      	add	r1, r0
 800e1f4:	1850      	adds	r0, r2, r1
 800e1f6:	4283      	cmp	r3, r0
 800e1f8:	6011      	str	r1, [r2, #0]
 800e1fa:	d1e0      	bne.n	800e1be <_free_r+0x22>
 800e1fc:	6818      	ldr	r0, [r3, #0]
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	4408      	add	r0, r1
 800e202:	6010      	str	r0, [r2, #0]
 800e204:	6053      	str	r3, [r2, #4]
 800e206:	e7da      	b.n	800e1be <_free_r+0x22>
 800e208:	d902      	bls.n	800e210 <_free_r+0x74>
 800e20a:	230c      	movs	r3, #12
 800e20c:	602b      	str	r3, [r5, #0]
 800e20e:	e7d6      	b.n	800e1be <_free_r+0x22>
 800e210:	6820      	ldr	r0, [r4, #0]
 800e212:	1821      	adds	r1, r4, r0
 800e214:	428b      	cmp	r3, r1
 800e216:	bf01      	itttt	eq
 800e218:	6819      	ldreq	r1, [r3, #0]
 800e21a:	685b      	ldreq	r3, [r3, #4]
 800e21c:	1809      	addeq	r1, r1, r0
 800e21e:	6021      	streq	r1, [r4, #0]
 800e220:	6063      	str	r3, [r4, #4]
 800e222:	6054      	str	r4, [r2, #4]
 800e224:	e7cb      	b.n	800e1be <_free_r+0x22>
 800e226:	bd38      	pop	{r3, r4, r5, pc}
 800e228:	20001a2c 	.word	0x20001a2c

0800e22c <__ssputs_r>:
 800e22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e230:	461f      	mov	r7, r3
 800e232:	688e      	ldr	r6, [r1, #8]
 800e234:	4682      	mov	sl, r0
 800e236:	42be      	cmp	r6, r7
 800e238:	460c      	mov	r4, r1
 800e23a:	4690      	mov	r8, r2
 800e23c:	680b      	ldr	r3, [r1, #0]
 800e23e:	d82d      	bhi.n	800e29c <__ssputs_r+0x70>
 800e240:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e244:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e248:	d026      	beq.n	800e298 <__ssputs_r+0x6c>
 800e24a:	6965      	ldr	r5, [r4, #20]
 800e24c:	6909      	ldr	r1, [r1, #16]
 800e24e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e252:	eba3 0901 	sub.w	r9, r3, r1
 800e256:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e25a:	1c7b      	adds	r3, r7, #1
 800e25c:	444b      	add	r3, r9
 800e25e:	106d      	asrs	r5, r5, #1
 800e260:	429d      	cmp	r5, r3
 800e262:	bf38      	it	cc
 800e264:	461d      	movcc	r5, r3
 800e266:	0553      	lsls	r3, r2, #21
 800e268:	d527      	bpl.n	800e2ba <__ssputs_r+0x8e>
 800e26a:	4629      	mov	r1, r5
 800e26c:	f7ff fe24 	bl	800deb8 <_malloc_r>
 800e270:	4606      	mov	r6, r0
 800e272:	b360      	cbz	r0, 800e2ce <__ssputs_r+0xa2>
 800e274:	464a      	mov	r2, r9
 800e276:	6921      	ldr	r1, [r4, #16]
 800e278:	f000 faea 	bl	800e850 <memcpy>
 800e27c:	89a3      	ldrh	r3, [r4, #12]
 800e27e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e286:	81a3      	strh	r3, [r4, #12]
 800e288:	6126      	str	r6, [r4, #16]
 800e28a:	444e      	add	r6, r9
 800e28c:	6026      	str	r6, [r4, #0]
 800e28e:	463e      	mov	r6, r7
 800e290:	6165      	str	r5, [r4, #20]
 800e292:	eba5 0509 	sub.w	r5, r5, r9
 800e296:	60a5      	str	r5, [r4, #8]
 800e298:	42be      	cmp	r6, r7
 800e29a:	d900      	bls.n	800e29e <__ssputs_r+0x72>
 800e29c:	463e      	mov	r6, r7
 800e29e:	4632      	mov	r2, r6
 800e2a0:	4641      	mov	r1, r8
 800e2a2:	6820      	ldr	r0, [r4, #0]
 800e2a4:	f000 faac 	bl	800e800 <memmove>
 800e2a8:	2000      	movs	r0, #0
 800e2aa:	68a3      	ldr	r3, [r4, #8]
 800e2ac:	1b9b      	subs	r3, r3, r6
 800e2ae:	60a3      	str	r3, [r4, #8]
 800e2b0:	6823      	ldr	r3, [r4, #0]
 800e2b2:	4433      	add	r3, r6
 800e2b4:	6023      	str	r3, [r4, #0]
 800e2b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2ba:	462a      	mov	r2, r5
 800e2bc:	f000 fad6 	bl	800e86c <_realloc_r>
 800e2c0:	4606      	mov	r6, r0
 800e2c2:	2800      	cmp	r0, #0
 800e2c4:	d1e0      	bne.n	800e288 <__ssputs_r+0x5c>
 800e2c6:	4650      	mov	r0, sl
 800e2c8:	6921      	ldr	r1, [r4, #16]
 800e2ca:	f7ff ff67 	bl	800e19c <_free_r>
 800e2ce:	230c      	movs	r3, #12
 800e2d0:	f8ca 3000 	str.w	r3, [sl]
 800e2d4:	89a3      	ldrh	r3, [r4, #12]
 800e2d6:	f04f 30ff 	mov.w	r0, #4294967295
 800e2da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2de:	81a3      	strh	r3, [r4, #12]
 800e2e0:	e7e9      	b.n	800e2b6 <__ssputs_r+0x8a>
	...

0800e2e4 <_svfiprintf_r>:
 800e2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2e8:	4698      	mov	r8, r3
 800e2ea:	898b      	ldrh	r3, [r1, #12]
 800e2ec:	4607      	mov	r7, r0
 800e2ee:	061b      	lsls	r3, r3, #24
 800e2f0:	460d      	mov	r5, r1
 800e2f2:	4614      	mov	r4, r2
 800e2f4:	b09d      	sub	sp, #116	@ 0x74
 800e2f6:	d510      	bpl.n	800e31a <_svfiprintf_r+0x36>
 800e2f8:	690b      	ldr	r3, [r1, #16]
 800e2fa:	b973      	cbnz	r3, 800e31a <_svfiprintf_r+0x36>
 800e2fc:	2140      	movs	r1, #64	@ 0x40
 800e2fe:	f7ff fddb 	bl	800deb8 <_malloc_r>
 800e302:	6028      	str	r0, [r5, #0]
 800e304:	6128      	str	r0, [r5, #16]
 800e306:	b930      	cbnz	r0, 800e316 <_svfiprintf_r+0x32>
 800e308:	230c      	movs	r3, #12
 800e30a:	603b      	str	r3, [r7, #0]
 800e30c:	f04f 30ff 	mov.w	r0, #4294967295
 800e310:	b01d      	add	sp, #116	@ 0x74
 800e312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e316:	2340      	movs	r3, #64	@ 0x40
 800e318:	616b      	str	r3, [r5, #20]
 800e31a:	2300      	movs	r3, #0
 800e31c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e31e:	2320      	movs	r3, #32
 800e320:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e324:	2330      	movs	r3, #48	@ 0x30
 800e326:	f04f 0901 	mov.w	r9, #1
 800e32a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e32e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800e4c8 <_svfiprintf_r+0x1e4>
 800e332:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e336:	4623      	mov	r3, r4
 800e338:	469a      	mov	sl, r3
 800e33a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e33e:	b10a      	cbz	r2, 800e344 <_svfiprintf_r+0x60>
 800e340:	2a25      	cmp	r2, #37	@ 0x25
 800e342:	d1f9      	bne.n	800e338 <_svfiprintf_r+0x54>
 800e344:	ebba 0b04 	subs.w	fp, sl, r4
 800e348:	d00b      	beq.n	800e362 <_svfiprintf_r+0x7e>
 800e34a:	465b      	mov	r3, fp
 800e34c:	4622      	mov	r2, r4
 800e34e:	4629      	mov	r1, r5
 800e350:	4638      	mov	r0, r7
 800e352:	f7ff ff6b 	bl	800e22c <__ssputs_r>
 800e356:	3001      	adds	r0, #1
 800e358:	f000 80a7 	beq.w	800e4aa <_svfiprintf_r+0x1c6>
 800e35c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e35e:	445a      	add	r2, fp
 800e360:	9209      	str	r2, [sp, #36]	@ 0x24
 800e362:	f89a 3000 	ldrb.w	r3, [sl]
 800e366:	2b00      	cmp	r3, #0
 800e368:	f000 809f 	beq.w	800e4aa <_svfiprintf_r+0x1c6>
 800e36c:	2300      	movs	r3, #0
 800e36e:	f04f 32ff 	mov.w	r2, #4294967295
 800e372:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e376:	f10a 0a01 	add.w	sl, sl, #1
 800e37a:	9304      	str	r3, [sp, #16]
 800e37c:	9307      	str	r3, [sp, #28]
 800e37e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e382:	931a      	str	r3, [sp, #104]	@ 0x68
 800e384:	4654      	mov	r4, sl
 800e386:	2205      	movs	r2, #5
 800e388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e38c:	484e      	ldr	r0, [pc, #312]	@ (800e4c8 <_svfiprintf_r+0x1e4>)
 800e38e:	f000 fa51 	bl	800e834 <memchr>
 800e392:	9a04      	ldr	r2, [sp, #16]
 800e394:	b9d8      	cbnz	r0, 800e3ce <_svfiprintf_r+0xea>
 800e396:	06d0      	lsls	r0, r2, #27
 800e398:	bf44      	itt	mi
 800e39a:	2320      	movmi	r3, #32
 800e39c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e3a0:	0711      	lsls	r1, r2, #28
 800e3a2:	bf44      	itt	mi
 800e3a4:	232b      	movmi	r3, #43	@ 0x2b
 800e3a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e3aa:	f89a 3000 	ldrb.w	r3, [sl]
 800e3ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800e3b0:	d015      	beq.n	800e3de <_svfiprintf_r+0xfa>
 800e3b2:	4654      	mov	r4, sl
 800e3b4:	2000      	movs	r0, #0
 800e3b6:	f04f 0c0a 	mov.w	ip, #10
 800e3ba:	9a07      	ldr	r2, [sp, #28]
 800e3bc:	4621      	mov	r1, r4
 800e3be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3c2:	3b30      	subs	r3, #48	@ 0x30
 800e3c4:	2b09      	cmp	r3, #9
 800e3c6:	d94b      	bls.n	800e460 <_svfiprintf_r+0x17c>
 800e3c8:	b1b0      	cbz	r0, 800e3f8 <_svfiprintf_r+0x114>
 800e3ca:	9207      	str	r2, [sp, #28]
 800e3cc:	e014      	b.n	800e3f8 <_svfiprintf_r+0x114>
 800e3ce:	eba0 0308 	sub.w	r3, r0, r8
 800e3d2:	fa09 f303 	lsl.w	r3, r9, r3
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	46a2      	mov	sl, r4
 800e3da:	9304      	str	r3, [sp, #16]
 800e3dc:	e7d2      	b.n	800e384 <_svfiprintf_r+0xa0>
 800e3de:	9b03      	ldr	r3, [sp, #12]
 800e3e0:	1d19      	adds	r1, r3, #4
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	9103      	str	r1, [sp, #12]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	bfbb      	ittet	lt
 800e3ea:	425b      	neglt	r3, r3
 800e3ec:	f042 0202 	orrlt.w	r2, r2, #2
 800e3f0:	9307      	strge	r3, [sp, #28]
 800e3f2:	9307      	strlt	r3, [sp, #28]
 800e3f4:	bfb8      	it	lt
 800e3f6:	9204      	strlt	r2, [sp, #16]
 800e3f8:	7823      	ldrb	r3, [r4, #0]
 800e3fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800e3fc:	d10a      	bne.n	800e414 <_svfiprintf_r+0x130>
 800e3fe:	7863      	ldrb	r3, [r4, #1]
 800e400:	2b2a      	cmp	r3, #42	@ 0x2a
 800e402:	d132      	bne.n	800e46a <_svfiprintf_r+0x186>
 800e404:	9b03      	ldr	r3, [sp, #12]
 800e406:	3402      	adds	r4, #2
 800e408:	1d1a      	adds	r2, r3, #4
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	9203      	str	r2, [sp, #12]
 800e40e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e412:	9305      	str	r3, [sp, #20]
 800e414:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800e4cc <_svfiprintf_r+0x1e8>
 800e418:	2203      	movs	r2, #3
 800e41a:	4650      	mov	r0, sl
 800e41c:	7821      	ldrb	r1, [r4, #0]
 800e41e:	f000 fa09 	bl	800e834 <memchr>
 800e422:	b138      	cbz	r0, 800e434 <_svfiprintf_r+0x150>
 800e424:	2240      	movs	r2, #64	@ 0x40
 800e426:	9b04      	ldr	r3, [sp, #16]
 800e428:	eba0 000a 	sub.w	r0, r0, sl
 800e42c:	4082      	lsls	r2, r0
 800e42e:	4313      	orrs	r3, r2
 800e430:	3401      	adds	r4, #1
 800e432:	9304      	str	r3, [sp, #16]
 800e434:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e438:	2206      	movs	r2, #6
 800e43a:	4825      	ldr	r0, [pc, #148]	@ (800e4d0 <_svfiprintf_r+0x1ec>)
 800e43c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e440:	f000 f9f8 	bl	800e834 <memchr>
 800e444:	2800      	cmp	r0, #0
 800e446:	d036      	beq.n	800e4b6 <_svfiprintf_r+0x1d2>
 800e448:	4b22      	ldr	r3, [pc, #136]	@ (800e4d4 <_svfiprintf_r+0x1f0>)
 800e44a:	bb1b      	cbnz	r3, 800e494 <_svfiprintf_r+0x1b0>
 800e44c:	9b03      	ldr	r3, [sp, #12]
 800e44e:	3307      	adds	r3, #7
 800e450:	f023 0307 	bic.w	r3, r3, #7
 800e454:	3308      	adds	r3, #8
 800e456:	9303      	str	r3, [sp, #12]
 800e458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e45a:	4433      	add	r3, r6
 800e45c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e45e:	e76a      	b.n	800e336 <_svfiprintf_r+0x52>
 800e460:	460c      	mov	r4, r1
 800e462:	2001      	movs	r0, #1
 800e464:	fb0c 3202 	mla	r2, ip, r2, r3
 800e468:	e7a8      	b.n	800e3bc <_svfiprintf_r+0xd8>
 800e46a:	2300      	movs	r3, #0
 800e46c:	f04f 0c0a 	mov.w	ip, #10
 800e470:	4619      	mov	r1, r3
 800e472:	3401      	adds	r4, #1
 800e474:	9305      	str	r3, [sp, #20]
 800e476:	4620      	mov	r0, r4
 800e478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e47c:	3a30      	subs	r2, #48	@ 0x30
 800e47e:	2a09      	cmp	r2, #9
 800e480:	d903      	bls.n	800e48a <_svfiprintf_r+0x1a6>
 800e482:	2b00      	cmp	r3, #0
 800e484:	d0c6      	beq.n	800e414 <_svfiprintf_r+0x130>
 800e486:	9105      	str	r1, [sp, #20]
 800e488:	e7c4      	b.n	800e414 <_svfiprintf_r+0x130>
 800e48a:	4604      	mov	r4, r0
 800e48c:	2301      	movs	r3, #1
 800e48e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e492:	e7f0      	b.n	800e476 <_svfiprintf_r+0x192>
 800e494:	ab03      	add	r3, sp, #12
 800e496:	9300      	str	r3, [sp, #0]
 800e498:	462a      	mov	r2, r5
 800e49a:	4638      	mov	r0, r7
 800e49c:	4b0e      	ldr	r3, [pc, #56]	@ (800e4d8 <_svfiprintf_r+0x1f4>)
 800e49e:	a904      	add	r1, sp, #16
 800e4a0:	f3af 8000 	nop.w
 800e4a4:	1c42      	adds	r2, r0, #1
 800e4a6:	4606      	mov	r6, r0
 800e4a8:	d1d6      	bne.n	800e458 <_svfiprintf_r+0x174>
 800e4aa:	89ab      	ldrh	r3, [r5, #12]
 800e4ac:	065b      	lsls	r3, r3, #25
 800e4ae:	f53f af2d 	bmi.w	800e30c <_svfiprintf_r+0x28>
 800e4b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e4b4:	e72c      	b.n	800e310 <_svfiprintf_r+0x2c>
 800e4b6:	ab03      	add	r3, sp, #12
 800e4b8:	9300      	str	r3, [sp, #0]
 800e4ba:	462a      	mov	r2, r5
 800e4bc:	4638      	mov	r0, r7
 800e4be:	4b06      	ldr	r3, [pc, #24]	@ (800e4d8 <_svfiprintf_r+0x1f4>)
 800e4c0:	a904      	add	r1, sp, #16
 800e4c2:	f000 f87d 	bl	800e5c0 <_printf_i>
 800e4c6:	e7ed      	b.n	800e4a4 <_svfiprintf_r+0x1c0>
 800e4c8:	0800f467 	.word	0x0800f467
 800e4cc:	0800f46d 	.word	0x0800f46d
 800e4d0:	0800f471 	.word	0x0800f471
 800e4d4:	00000000 	.word	0x00000000
 800e4d8:	0800e22d 	.word	0x0800e22d

0800e4dc <_printf_common>:
 800e4dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4e0:	4616      	mov	r6, r2
 800e4e2:	4698      	mov	r8, r3
 800e4e4:	688a      	ldr	r2, [r1, #8]
 800e4e6:	690b      	ldr	r3, [r1, #16]
 800e4e8:	4607      	mov	r7, r0
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	bfb8      	it	lt
 800e4ee:	4613      	movlt	r3, r2
 800e4f0:	6033      	str	r3, [r6, #0]
 800e4f2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e4f6:	460c      	mov	r4, r1
 800e4f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e4fc:	b10a      	cbz	r2, 800e502 <_printf_common+0x26>
 800e4fe:	3301      	adds	r3, #1
 800e500:	6033      	str	r3, [r6, #0]
 800e502:	6823      	ldr	r3, [r4, #0]
 800e504:	0699      	lsls	r1, r3, #26
 800e506:	bf42      	ittt	mi
 800e508:	6833      	ldrmi	r3, [r6, #0]
 800e50a:	3302      	addmi	r3, #2
 800e50c:	6033      	strmi	r3, [r6, #0]
 800e50e:	6825      	ldr	r5, [r4, #0]
 800e510:	f015 0506 	ands.w	r5, r5, #6
 800e514:	d106      	bne.n	800e524 <_printf_common+0x48>
 800e516:	f104 0a19 	add.w	sl, r4, #25
 800e51a:	68e3      	ldr	r3, [r4, #12]
 800e51c:	6832      	ldr	r2, [r6, #0]
 800e51e:	1a9b      	subs	r3, r3, r2
 800e520:	42ab      	cmp	r3, r5
 800e522:	dc2b      	bgt.n	800e57c <_printf_common+0xa0>
 800e524:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e528:	6822      	ldr	r2, [r4, #0]
 800e52a:	3b00      	subs	r3, #0
 800e52c:	bf18      	it	ne
 800e52e:	2301      	movne	r3, #1
 800e530:	0692      	lsls	r2, r2, #26
 800e532:	d430      	bmi.n	800e596 <_printf_common+0xba>
 800e534:	4641      	mov	r1, r8
 800e536:	4638      	mov	r0, r7
 800e538:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e53c:	47c8      	blx	r9
 800e53e:	3001      	adds	r0, #1
 800e540:	d023      	beq.n	800e58a <_printf_common+0xae>
 800e542:	6823      	ldr	r3, [r4, #0]
 800e544:	6922      	ldr	r2, [r4, #16]
 800e546:	f003 0306 	and.w	r3, r3, #6
 800e54a:	2b04      	cmp	r3, #4
 800e54c:	bf14      	ite	ne
 800e54e:	2500      	movne	r5, #0
 800e550:	6833      	ldreq	r3, [r6, #0]
 800e552:	f04f 0600 	mov.w	r6, #0
 800e556:	bf08      	it	eq
 800e558:	68e5      	ldreq	r5, [r4, #12]
 800e55a:	f104 041a 	add.w	r4, r4, #26
 800e55e:	bf08      	it	eq
 800e560:	1aed      	subeq	r5, r5, r3
 800e562:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e566:	bf08      	it	eq
 800e568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e56c:	4293      	cmp	r3, r2
 800e56e:	bfc4      	itt	gt
 800e570:	1a9b      	subgt	r3, r3, r2
 800e572:	18ed      	addgt	r5, r5, r3
 800e574:	42b5      	cmp	r5, r6
 800e576:	d11a      	bne.n	800e5ae <_printf_common+0xd2>
 800e578:	2000      	movs	r0, #0
 800e57a:	e008      	b.n	800e58e <_printf_common+0xb2>
 800e57c:	2301      	movs	r3, #1
 800e57e:	4652      	mov	r2, sl
 800e580:	4641      	mov	r1, r8
 800e582:	4638      	mov	r0, r7
 800e584:	47c8      	blx	r9
 800e586:	3001      	adds	r0, #1
 800e588:	d103      	bne.n	800e592 <_printf_common+0xb6>
 800e58a:	f04f 30ff 	mov.w	r0, #4294967295
 800e58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e592:	3501      	adds	r5, #1
 800e594:	e7c1      	b.n	800e51a <_printf_common+0x3e>
 800e596:	2030      	movs	r0, #48	@ 0x30
 800e598:	18e1      	adds	r1, r4, r3
 800e59a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e59e:	1c5a      	adds	r2, r3, #1
 800e5a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e5a4:	4422      	add	r2, r4
 800e5a6:	3302      	adds	r3, #2
 800e5a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e5ac:	e7c2      	b.n	800e534 <_printf_common+0x58>
 800e5ae:	2301      	movs	r3, #1
 800e5b0:	4622      	mov	r2, r4
 800e5b2:	4641      	mov	r1, r8
 800e5b4:	4638      	mov	r0, r7
 800e5b6:	47c8      	blx	r9
 800e5b8:	3001      	adds	r0, #1
 800e5ba:	d0e6      	beq.n	800e58a <_printf_common+0xae>
 800e5bc:	3601      	adds	r6, #1
 800e5be:	e7d9      	b.n	800e574 <_printf_common+0x98>

0800e5c0 <_printf_i>:
 800e5c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e5c4:	7e0f      	ldrb	r7, [r1, #24]
 800e5c6:	4691      	mov	r9, r2
 800e5c8:	2f78      	cmp	r7, #120	@ 0x78
 800e5ca:	4680      	mov	r8, r0
 800e5cc:	460c      	mov	r4, r1
 800e5ce:	469a      	mov	sl, r3
 800e5d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e5d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e5d6:	d807      	bhi.n	800e5e8 <_printf_i+0x28>
 800e5d8:	2f62      	cmp	r7, #98	@ 0x62
 800e5da:	d80a      	bhi.n	800e5f2 <_printf_i+0x32>
 800e5dc:	2f00      	cmp	r7, #0
 800e5de:	f000 80d3 	beq.w	800e788 <_printf_i+0x1c8>
 800e5e2:	2f58      	cmp	r7, #88	@ 0x58
 800e5e4:	f000 80ba 	beq.w	800e75c <_printf_i+0x19c>
 800e5e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e5ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e5f0:	e03a      	b.n	800e668 <_printf_i+0xa8>
 800e5f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e5f6:	2b15      	cmp	r3, #21
 800e5f8:	d8f6      	bhi.n	800e5e8 <_printf_i+0x28>
 800e5fa:	a101      	add	r1, pc, #4	@ (adr r1, 800e600 <_printf_i+0x40>)
 800e5fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e600:	0800e659 	.word	0x0800e659
 800e604:	0800e66d 	.word	0x0800e66d
 800e608:	0800e5e9 	.word	0x0800e5e9
 800e60c:	0800e5e9 	.word	0x0800e5e9
 800e610:	0800e5e9 	.word	0x0800e5e9
 800e614:	0800e5e9 	.word	0x0800e5e9
 800e618:	0800e66d 	.word	0x0800e66d
 800e61c:	0800e5e9 	.word	0x0800e5e9
 800e620:	0800e5e9 	.word	0x0800e5e9
 800e624:	0800e5e9 	.word	0x0800e5e9
 800e628:	0800e5e9 	.word	0x0800e5e9
 800e62c:	0800e76f 	.word	0x0800e76f
 800e630:	0800e697 	.word	0x0800e697
 800e634:	0800e729 	.word	0x0800e729
 800e638:	0800e5e9 	.word	0x0800e5e9
 800e63c:	0800e5e9 	.word	0x0800e5e9
 800e640:	0800e791 	.word	0x0800e791
 800e644:	0800e5e9 	.word	0x0800e5e9
 800e648:	0800e697 	.word	0x0800e697
 800e64c:	0800e5e9 	.word	0x0800e5e9
 800e650:	0800e5e9 	.word	0x0800e5e9
 800e654:	0800e731 	.word	0x0800e731
 800e658:	6833      	ldr	r3, [r6, #0]
 800e65a:	1d1a      	adds	r2, r3, #4
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	6032      	str	r2, [r6, #0]
 800e660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e664:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e668:	2301      	movs	r3, #1
 800e66a:	e09e      	b.n	800e7aa <_printf_i+0x1ea>
 800e66c:	6833      	ldr	r3, [r6, #0]
 800e66e:	6820      	ldr	r0, [r4, #0]
 800e670:	1d19      	adds	r1, r3, #4
 800e672:	6031      	str	r1, [r6, #0]
 800e674:	0606      	lsls	r6, r0, #24
 800e676:	d501      	bpl.n	800e67c <_printf_i+0xbc>
 800e678:	681d      	ldr	r5, [r3, #0]
 800e67a:	e003      	b.n	800e684 <_printf_i+0xc4>
 800e67c:	0645      	lsls	r5, r0, #25
 800e67e:	d5fb      	bpl.n	800e678 <_printf_i+0xb8>
 800e680:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e684:	2d00      	cmp	r5, #0
 800e686:	da03      	bge.n	800e690 <_printf_i+0xd0>
 800e688:	232d      	movs	r3, #45	@ 0x2d
 800e68a:	426d      	negs	r5, r5
 800e68c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e690:	230a      	movs	r3, #10
 800e692:	4859      	ldr	r0, [pc, #356]	@ (800e7f8 <_printf_i+0x238>)
 800e694:	e011      	b.n	800e6ba <_printf_i+0xfa>
 800e696:	6821      	ldr	r1, [r4, #0]
 800e698:	6833      	ldr	r3, [r6, #0]
 800e69a:	0608      	lsls	r0, r1, #24
 800e69c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e6a0:	d402      	bmi.n	800e6a8 <_printf_i+0xe8>
 800e6a2:	0649      	lsls	r1, r1, #25
 800e6a4:	bf48      	it	mi
 800e6a6:	b2ad      	uxthmi	r5, r5
 800e6a8:	2f6f      	cmp	r7, #111	@ 0x6f
 800e6aa:	6033      	str	r3, [r6, #0]
 800e6ac:	bf14      	ite	ne
 800e6ae:	230a      	movne	r3, #10
 800e6b0:	2308      	moveq	r3, #8
 800e6b2:	4851      	ldr	r0, [pc, #324]	@ (800e7f8 <_printf_i+0x238>)
 800e6b4:	2100      	movs	r1, #0
 800e6b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e6ba:	6866      	ldr	r6, [r4, #4]
 800e6bc:	2e00      	cmp	r6, #0
 800e6be:	bfa8      	it	ge
 800e6c0:	6821      	ldrge	r1, [r4, #0]
 800e6c2:	60a6      	str	r6, [r4, #8]
 800e6c4:	bfa4      	itt	ge
 800e6c6:	f021 0104 	bicge.w	r1, r1, #4
 800e6ca:	6021      	strge	r1, [r4, #0]
 800e6cc:	b90d      	cbnz	r5, 800e6d2 <_printf_i+0x112>
 800e6ce:	2e00      	cmp	r6, #0
 800e6d0:	d04b      	beq.n	800e76a <_printf_i+0x1aa>
 800e6d2:	4616      	mov	r6, r2
 800e6d4:	fbb5 f1f3 	udiv	r1, r5, r3
 800e6d8:	fb03 5711 	mls	r7, r3, r1, r5
 800e6dc:	5dc7      	ldrb	r7, [r0, r7]
 800e6de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e6e2:	462f      	mov	r7, r5
 800e6e4:	42bb      	cmp	r3, r7
 800e6e6:	460d      	mov	r5, r1
 800e6e8:	d9f4      	bls.n	800e6d4 <_printf_i+0x114>
 800e6ea:	2b08      	cmp	r3, #8
 800e6ec:	d10b      	bne.n	800e706 <_printf_i+0x146>
 800e6ee:	6823      	ldr	r3, [r4, #0]
 800e6f0:	07df      	lsls	r7, r3, #31
 800e6f2:	d508      	bpl.n	800e706 <_printf_i+0x146>
 800e6f4:	6923      	ldr	r3, [r4, #16]
 800e6f6:	6861      	ldr	r1, [r4, #4]
 800e6f8:	4299      	cmp	r1, r3
 800e6fa:	bfde      	ittt	le
 800e6fc:	2330      	movle	r3, #48	@ 0x30
 800e6fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e702:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e706:	1b92      	subs	r2, r2, r6
 800e708:	6122      	str	r2, [r4, #16]
 800e70a:	464b      	mov	r3, r9
 800e70c:	4621      	mov	r1, r4
 800e70e:	4640      	mov	r0, r8
 800e710:	f8cd a000 	str.w	sl, [sp]
 800e714:	aa03      	add	r2, sp, #12
 800e716:	f7ff fee1 	bl	800e4dc <_printf_common>
 800e71a:	3001      	adds	r0, #1
 800e71c:	d14a      	bne.n	800e7b4 <_printf_i+0x1f4>
 800e71e:	f04f 30ff 	mov.w	r0, #4294967295
 800e722:	b004      	add	sp, #16
 800e724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e728:	6823      	ldr	r3, [r4, #0]
 800e72a:	f043 0320 	orr.w	r3, r3, #32
 800e72e:	6023      	str	r3, [r4, #0]
 800e730:	2778      	movs	r7, #120	@ 0x78
 800e732:	4832      	ldr	r0, [pc, #200]	@ (800e7fc <_printf_i+0x23c>)
 800e734:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e738:	6823      	ldr	r3, [r4, #0]
 800e73a:	6831      	ldr	r1, [r6, #0]
 800e73c:	061f      	lsls	r7, r3, #24
 800e73e:	f851 5b04 	ldr.w	r5, [r1], #4
 800e742:	d402      	bmi.n	800e74a <_printf_i+0x18a>
 800e744:	065f      	lsls	r7, r3, #25
 800e746:	bf48      	it	mi
 800e748:	b2ad      	uxthmi	r5, r5
 800e74a:	6031      	str	r1, [r6, #0]
 800e74c:	07d9      	lsls	r1, r3, #31
 800e74e:	bf44      	itt	mi
 800e750:	f043 0320 	orrmi.w	r3, r3, #32
 800e754:	6023      	strmi	r3, [r4, #0]
 800e756:	b11d      	cbz	r5, 800e760 <_printf_i+0x1a0>
 800e758:	2310      	movs	r3, #16
 800e75a:	e7ab      	b.n	800e6b4 <_printf_i+0xf4>
 800e75c:	4826      	ldr	r0, [pc, #152]	@ (800e7f8 <_printf_i+0x238>)
 800e75e:	e7e9      	b.n	800e734 <_printf_i+0x174>
 800e760:	6823      	ldr	r3, [r4, #0]
 800e762:	f023 0320 	bic.w	r3, r3, #32
 800e766:	6023      	str	r3, [r4, #0]
 800e768:	e7f6      	b.n	800e758 <_printf_i+0x198>
 800e76a:	4616      	mov	r6, r2
 800e76c:	e7bd      	b.n	800e6ea <_printf_i+0x12a>
 800e76e:	6833      	ldr	r3, [r6, #0]
 800e770:	6825      	ldr	r5, [r4, #0]
 800e772:	1d18      	adds	r0, r3, #4
 800e774:	6961      	ldr	r1, [r4, #20]
 800e776:	6030      	str	r0, [r6, #0]
 800e778:	062e      	lsls	r6, r5, #24
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	d501      	bpl.n	800e782 <_printf_i+0x1c2>
 800e77e:	6019      	str	r1, [r3, #0]
 800e780:	e002      	b.n	800e788 <_printf_i+0x1c8>
 800e782:	0668      	lsls	r0, r5, #25
 800e784:	d5fb      	bpl.n	800e77e <_printf_i+0x1be>
 800e786:	8019      	strh	r1, [r3, #0]
 800e788:	2300      	movs	r3, #0
 800e78a:	4616      	mov	r6, r2
 800e78c:	6123      	str	r3, [r4, #16]
 800e78e:	e7bc      	b.n	800e70a <_printf_i+0x14a>
 800e790:	6833      	ldr	r3, [r6, #0]
 800e792:	2100      	movs	r1, #0
 800e794:	1d1a      	adds	r2, r3, #4
 800e796:	6032      	str	r2, [r6, #0]
 800e798:	681e      	ldr	r6, [r3, #0]
 800e79a:	6862      	ldr	r2, [r4, #4]
 800e79c:	4630      	mov	r0, r6
 800e79e:	f000 f849 	bl	800e834 <memchr>
 800e7a2:	b108      	cbz	r0, 800e7a8 <_printf_i+0x1e8>
 800e7a4:	1b80      	subs	r0, r0, r6
 800e7a6:	6060      	str	r0, [r4, #4]
 800e7a8:	6863      	ldr	r3, [r4, #4]
 800e7aa:	6123      	str	r3, [r4, #16]
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e7b2:	e7aa      	b.n	800e70a <_printf_i+0x14a>
 800e7b4:	4632      	mov	r2, r6
 800e7b6:	4649      	mov	r1, r9
 800e7b8:	4640      	mov	r0, r8
 800e7ba:	6923      	ldr	r3, [r4, #16]
 800e7bc:	47d0      	blx	sl
 800e7be:	3001      	adds	r0, #1
 800e7c0:	d0ad      	beq.n	800e71e <_printf_i+0x15e>
 800e7c2:	6823      	ldr	r3, [r4, #0]
 800e7c4:	079b      	lsls	r3, r3, #30
 800e7c6:	d413      	bmi.n	800e7f0 <_printf_i+0x230>
 800e7c8:	68e0      	ldr	r0, [r4, #12]
 800e7ca:	9b03      	ldr	r3, [sp, #12]
 800e7cc:	4298      	cmp	r0, r3
 800e7ce:	bfb8      	it	lt
 800e7d0:	4618      	movlt	r0, r3
 800e7d2:	e7a6      	b.n	800e722 <_printf_i+0x162>
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	4632      	mov	r2, r6
 800e7d8:	4649      	mov	r1, r9
 800e7da:	4640      	mov	r0, r8
 800e7dc:	47d0      	blx	sl
 800e7de:	3001      	adds	r0, #1
 800e7e0:	d09d      	beq.n	800e71e <_printf_i+0x15e>
 800e7e2:	3501      	adds	r5, #1
 800e7e4:	68e3      	ldr	r3, [r4, #12]
 800e7e6:	9903      	ldr	r1, [sp, #12]
 800e7e8:	1a5b      	subs	r3, r3, r1
 800e7ea:	42ab      	cmp	r3, r5
 800e7ec:	dcf2      	bgt.n	800e7d4 <_printf_i+0x214>
 800e7ee:	e7eb      	b.n	800e7c8 <_printf_i+0x208>
 800e7f0:	2500      	movs	r5, #0
 800e7f2:	f104 0619 	add.w	r6, r4, #25
 800e7f6:	e7f5      	b.n	800e7e4 <_printf_i+0x224>
 800e7f8:	0800f478 	.word	0x0800f478
 800e7fc:	0800f489 	.word	0x0800f489

0800e800 <memmove>:
 800e800:	4288      	cmp	r0, r1
 800e802:	b510      	push	{r4, lr}
 800e804:	eb01 0402 	add.w	r4, r1, r2
 800e808:	d902      	bls.n	800e810 <memmove+0x10>
 800e80a:	4284      	cmp	r4, r0
 800e80c:	4623      	mov	r3, r4
 800e80e:	d807      	bhi.n	800e820 <memmove+0x20>
 800e810:	1e43      	subs	r3, r0, #1
 800e812:	42a1      	cmp	r1, r4
 800e814:	d008      	beq.n	800e828 <memmove+0x28>
 800e816:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e81a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e81e:	e7f8      	b.n	800e812 <memmove+0x12>
 800e820:	4601      	mov	r1, r0
 800e822:	4402      	add	r2, r0
 800e824:	428a      	cmp	r2, r1
 800e826:	d100      	bne.n	800e82a <memmove+0x2a>
 800e828:	bd10      	pop	{r4, pc}
 800e82a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e82e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e832:	e7f7      	b.n	800e824 <memmove+0x24>

0800e834 <memchr>:
 800e834:	4603      	mov	r3, r0
 800e836:	b510      	push	{r4, lr}
 800e838:	b2c9      	uxtb	r1, r1
 800e83a:	4402      	add	r2, r0
 800e83c:	4293      	cmp	r3, r2
 800e83e:	4618      	mov	r0, r3
 800e840:	d101      	bne.n	800e846 <memchr+0x12>
 800e842:	2000      	movs	r0, #0
 800e844:	e003      	b.n	800e84e <memchr+0x1a>
 800e846:	7804      	ldrb	r4, [r0, #0]
 800e848:	3301      	adds	r3, #1
 800e84a:	428c      	cmp	r4, r1
 800e84c:	d1f6      	bne.n	800e83c <memchr+0x8>
 800e84e:	bd10      	pop	{r4, pc}

0800e850 <memcpy>:
 800e850:	440a      	add	r2, r1
 800e852:	4291      	cmp	r1, r2
 800e854:	f100 33ff 	add.w	r3, r0, #4294967295
 800e858:	d100      	bne.n	800e85c <memcpy+0xc>
 800e85a:	4770      	bx	lr
 800e85c:	b510      	push	{r4, lr}
 800e85e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e862:	4291      	cmp	r1, r2
 800e864:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e868:	d1f9      	bne.n	800e85e <memcpy+0xe>
 800e86a:	bd10      	pop	{r4, pc}

0800e86c <_realloc_r>:
 800e86c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e870:	4680      	mov	r8, r0
 800e872:	4615      	mov	r5, r2
 800e874:	460c      	mov	r4, r1
 800e876:	b921      	cbnz	r1, 800e882 <_realloc_r+0x16>
 800e878:	4611      	mov	r1, r2
 800e87a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e87e:	f7ff bb1b 	b.w	800deb8 <_malloc_r>
 800e882:	b92a      	cbnz	r2, 800e890 <_realloc_r+0x24>
 800e884:	f7ff fc8a 	bl	800e19c <_free_r>
 800e888:	2400      	movs	r4, #0
 800e88a:	4620      	mov	r0, r4
 800e88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e890:	f000 f81a 	bl	800e8c8 <_malloc_usable_size_r>
 800e894:	4285      	cmp	r5, r0
 800e896:	4606      	mov	r6, r0
 800e898:	d802      	bhi.n	800e8a0 <_realloc_r+0x34>
 800e89a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e89e:	d8f4      	bhi.n	800e88a <_realloc_r+0x1e>
 800e8a0:	4629      	mov	r1, r5
 800e8a2:	4640      	mov	r0, r8
 800e8a4:	f7ff fb08 	bl	800deb8 <_malloc_r>
 800e8a8:	4607      	mov	r7, r0
 800e8aa:	2800      	cmp	r0, #0
 800e8ac:	d0ec      	beq.n	800e888 <_realloc_r+0x1c>
 800e8ae:	42b5      	cmp	r5, r6
 800e8b0:	462a      	mov	r2, r5
 800e8b2:	4621      	mov	r1, r4
 800e8b4:	bf28      	it	cs
 800e8b6:	4632      	movcs	r2, r6
 800e8b8:	f7ff ffca 	bl	800e850 <memcpy>
 800e8bc:	4621      	mov	r1, r4
 800e8be:	4640      	mov	r0, r8
 800e8c0:	f7ff fc6c 	bl	800e19c <_free_r>
 800e8c4:	463c      	mov	r4, r7
 800e8c6:	e7e0      	b.n	800e88a <_realloc_r+0x1e>

0800e8c8 <_malloc_usable_size_r>:
 800e8c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8cc:	1f18      	subs	r0, r3, #4
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	bfbc      	itt	lt
 800e8d2:	580b      	ldrlt	r3, [r1, r0]
 800e8d4:	18c0      	addlt	r0, r0, r3
 800e8d6:	4770      	bx	lr

0800e8d8 <_init>:
 800e8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8da:	bf00      	nop
 800e8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8de:	bc08      	pop	{r3}
 800e8e0:	469e      	mov	lr, r3
 800e8e2:	4770      	bx	lr

0800e8e4 <_fini>:
 800e8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8e6:	bf00      	nop
 800e8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e8ea:	bc08      	pop	{r3}
 800e8ec:	469e      	mov	lr, r3
 800e8ee:	4770      	bx	lr
