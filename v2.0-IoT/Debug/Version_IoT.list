
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e888  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e00  0800ea6c  0800ea6c  0000fa6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f86c  0800f86c  00011fd0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f86c  0800f86c  0001086c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f874  0800f874  00011fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f874  0800f874  00010874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f878  0800f878  00010878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fd0  20000000  0800f87c  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010a8  20000fd0  0801084c  00011fd0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002078  0801084c  00012078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011fd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a519  00000000  00000000  00011ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a83  00000000  00000000  0002c512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  0002ff98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fdd  00000000  00000000  00031430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cddb  00000000  00000000  0003240d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dc36  00000000  00000000  0004f1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1b32  00000000  00000000  0006ce1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e950  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b10  00000000  00000000  0010e994  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001144a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fd0 	.word	0x20000fd0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800ea54 	.word	0x0800ea54

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fd4 	.word	0x20000fd4
 8000220:	0800ea54 	.word	0x0800ea54

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "EEPROMProcess.h"
#include "main.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	EEPROM_Read(0, 0, eepromData, 110);
 8000238:	236e      	movs	r3, #110	@ 0x6e
 800023a:	4a9b      	ldr	r2, [pc, #620]	@ (80004a8 <eepromKontrol+0x274>)
 800023c:	2100      	movs	r1, #0
 800023e:	2000      	movs	r0, #0
 8000240:	f000 fac2 	bl	80007c8 <EEPROM_Read>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	setupCompleted = eepromData[0];
 8000244:	4b98      	ldr	r3, [pc, #608]	@ (80004a8 <eepromKontrol+0x274>)
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	4b98      	ldr	r3, [pc, #608]	@ (80004ac <eepromKontrol+0x278>)
 800024a:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 800024c:	4b96      	ldr	r3, [pc, #600]	@ (80004a8 <eepromKontrol+0x274>)
 800024e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8000252:	4b97      	ldr	r3, [pc, #604]	@ (80004b0 <eepromKontrol+0x27c>)
 8000254:	701a      	strb	r2, [r3, #0]

	kaydedilenDeger = eepromData[3];
 8000256:	4b94      	ldr	r3, [pc, #592]	@ (80004a8 <eepromKontrol+0x274>)
 8000258:	78da      	ldrb	r2, [r3, #3]
 800025a:	4b96      	ldr	r3, [pc, #600]	@ (80004b4 <eepromKontrol+0x280>)
 800025c:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 800025e:	4b92      	ldr	r3, [pc, #584]	@ (80004a8 <eepromKontrol+0x274>)
 8000260:	785a      	ldrb	r2, [r3, #1]
 8000262:	4b95      	ldr	r3, [pc, #596]	@ (80004b8 <eepromKontrol+0x284>)
 8000264:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8000266:	4b90      	ldr	r3, [pc, #576]	@ (80004a8 <eepromKontrol+0x274>)
 8000268:	789a      	ldrb	r2, [r3, #2]
 800026a:	4b94      	ldr	r3, [pc, #592]	@ (80004bc <eepromKontrol+0x288>)
 800026c:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 800026e:	4b8e      	ldr	r3, [pc, #568]	@ (80004a8 <eepromKontrol+0x274>)
 8000270:	791a      	ldrb	r2, [r3, #4]
 8000272:	4b93      	ldr	r3, [pc, #588]	@ (80004c0 <eepromKontrol+0x28c>)
 8000274:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8000276:	4b8c      	ldr	r3, [pc, #560]	@ (80004a8 <eepromKontrol+0x274>)
 8000278:	795a      	ldrb	r2, [r3, #5]
 800027a:	4b92      	ldr	r3, [pc, #584]	@ (80004c4 <eepromKontrol+0x290>)
 800027c:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 800027e:	4b8a      	ldr	r3, [pc, #552]	@ (80004a8 <eepromKontrol+0x274>)
 8000280:	799a      	ldrb	r2, [r3, #6]
 8000282:	4b91      	ldr	r3, [pc, #580]	@ (80004c8 <eepromKontrol+0x294>)
 8000284:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8000286:	4b88      	ldr	r3, [pc, #544]	@ (80004a8 <eepromKontrol+0x274>)
 8000288:	79da      	ldrb	r2, [r3, #7]
 800028a:	4b90      	ldr	r3, [pc, #576]	@ (80004cc <eepromKontrol+0x298>)
 800028c:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 800028e:	4b86      	ldr	r3, [pc, #536]	@ (80004a8 <eepromKontrol+0x274>)
 8000290:	7a1a      	ldrb	r2, [r3, #8]
 8000292:	4b8f      	ldr	r3, [pc, #572]	@ (80004d0 <eepromKontrol+0x29c>)
 8000294:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8000296:	4b84      	ldr	r3, [pc, #528]	@ (80004a8 <eepromKontrol+0x274>)
 8000298:	7a5a      	ldrb	r2, [r3, #9]
 800029a:	4b8e      	ldr	r3, [pc, #568]	@ (80004d4 <eepromKontrol+0x2a0>)
 800029c:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 800029e:	4b82      	ldr	r3, [pc, #520]	@ (80004a8 <eepromKontrol+0x274>)
 80002a0:	7a9a      	ldrb	r2, [r3, #10]
 80002a2:	4b8d      	ldr	r3, [pc, #564]	@ (80004d8 <eepromKontrol+0x2a4>)
 80002a4:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002a6:	4b80      	ldr	r3, [pc, #512]	@ (80004a8 <eepromKontrol+0x274>)
 80002a8:	7ada      	ldrb	r2, [r3, #11]
 80002aa:	4b8c      	ldr	r3, [pc, #560]	@ (80004dc <eepromKontrol+0x2a8>)
 80002ac:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002ae:	4b7e      	ldr	r3, [pc, #504]	@ (80004a8 <eepromKontrol+0x274>)
 80002b0:	7b1a      	ldrb	r2, [r3, #12]
 80002b2:	4b8b      	ldr	r3, [pc, #556]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002b4:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002b6:	4b7c      	ldr	r3, [pc, #496]	@ (80004a8 <eepromKontrol+0x274>)
 80002b8:	7b5a      	ldrb	r2, [r3, #13]
 80002ba:	4b8a      	ldr	r3, [pc, #552]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002bc:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002be:	4b7a      	ldr	r3, [pc, #488]	@ (80004a8 <eepromKontrol+0x274>)
 80002c0:	7b9a      	ldrb	r2, [r3, #14]
 80002c2:	4b89      	ldr	r3, [pc, #548]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002c4:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002c6:	4b78      	ldr	r3, [pc, #480]	@ (80004a8 <eepromKontrol+0x274>)
 80002c8:	7bda      	ldrb	r2, [r3, #15]
 80002ca:	4b88      	ldr	r3, [pc, #544]	@ (80004ec <eepromKontrol+0x2b8>)
 80002cc:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002ce:	4b76      	ldr	r3, [pc, #472]	@ (80004a8 <eepromKontrol+0x274>)
 80002d0:	7c1a      	ldrb	r2, [r3, #16]
 80002d2:	4b87      	ldr	r3, [pc, #540]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002d4:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002d6:	4b74      	ldr	r3, [pc, #464]	@ (80004a8 <eepromKontrol+0x274>)
 80002d8:	7c5a      	ldrb	r2, [r3, #17]
 80002da:	4b86      	ldr	r3, [pc, #536]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002dc:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002de:	4b72      	ldr	r3, [pc, #456]	@ (80004a8 <eepromKontrol+0x274>)
 80002e0:	7c9a      	ldrb	r2, [r3, #18]
 80002e2:	4b85      	ldr	r3, [pc, #532]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002e4:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002e6:	4b70      	ldr	r3, [pc, #448]	@ (80004a8 <eepromKontrol+0x274>)
 80002e8:	7cda      	ldrb	r2, [r3, #19]
 80002ea:	4b84      	ldr	r3, [pc, #528]	@ (80004fc <eepromKontrol+0x2c8>)
 80002ec:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002ee:	4b6e      	ldr	r3, [pc, #440]	@ (80004a8 <eepromKontrol+0x274>)
 80002f0:	7d1a      	ldrb	r2, [r3, #20]
 80002f2:	4b83      	ldr	r3, [pc, #524]	@ (8000500 <eepromKontrol+0x2cc>)
 80002f4:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002f6:	4b6c      	ldr	r3, [pc, #432]	@ (80004a8 <eepromKontrol+0x274>)
 80002f8:	7d5a      	ldrb	r2, [r3, #21]
 80002fa:	4b82      	ldr	r3, [pc, #520]	@ (8000504 <eepromKontrol+0x2d0>)
 80002fc:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 80002fe:	4b6a      	ldr	r3, [pc, #424]	@ (80004a8 <eepromKontrol+0x274>)
 8000300:	7d9a      	ldrb	r2, [r3, #22]
 8000302:	4b81      	ldr	r3, [pc, #516]	@ (8000508 <eepromKontrol+0x2d4>)
 8000304:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8000306:	4b68      	ldr	r3, [pc, #416]	@ (80004a8 <eepromKontrol+0x274>)
 8000308:	7dda      	ldrb	r2, [r3, #23]
 800030a:	4b80      	ldr	r3, [pc, #512]	@ (800050c <eepromKontrol+0x2d8>)
 800030c:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 800030e:	4b66      	ldr	r3, [pc, #408]	@ (80004a8 <eepromKontrol+0x274>)
 8000310:	7e1a      	ldrb	r2, [r3, #24]
 8000312:	4b7f      	ldr	r3, [pc, #508]	@ (8000510 <eepromKontrol+0x2dc>)
 8000314:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8000316:	4b64      	ldr	r3, [pc, #400]	@ (80004a8 <eepromKontrol+0x274>)
 8000318:	7e5a      	ldrb	r2, [r3, #25]
 800031a:	4b7e      	ldr	r3, [pc, #504]	@ (8000514 <eepromKontrol+0x2e0>)
 800031c:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 800031e:	4b62      	ldr	r3, [pc, #392]	@ (80004a8 <eepromKontrol+0x274>)
 8000320:	7e9a      	ldrb	r2, [r3, #26]
 8000322:	4b7d      	ldr	r3, [pc, #500]	@ (8000518 <eepromKontrol+0x2e4>)
 8000324:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8000326:	4b60      	ldr	r3, [pc, #384]	@ (80004a8 <eepromKontrol+0x274>)
 8000328:	7eda      	ldrb	r2, [r3, #27]
 800032a:	4b7c      	ldr	r3, [pc, #496]	@ (800051c <eepromKontrol+0x2e8>)
 800032c:	701a      	strb	r2, [r3, #0]
	calismaSayisiDemo = eepromData[28];
 800032e:	4b5e      	ldr	r3, [pc, #376]	@ (80004a8 <eepromKontrol+0x274>)
 8000330:	7f1a      	ldrb	r2, [r3, #28]
 8000332:	4b7b      	ldr	r3, [pc, #492]	@ (8000520 <eepromKontrol+0x2ec>)
 8000334:	701a      	strb	r2, [r3, #0]
	calismaCount = eepromData[29];
 8000336:	4b5c      	ldr	r3, [pc, #368]	@ (80004a8 <eepromKontrol+0x274>)
 8000338:	7f5a      	ldrb	r2, [r3, #29]
 800033a:	4b7a      	ldr	r3, [pc, #488]	@ (8000524 <eepromKontrol+0x2f0>)
 800033c:	701a      	strb	r2, [r3, #0]
	calismaCountDemo = eepromData[30];
 800033e:	4b5a      	ldr	r3, [pc, #360]	@ (80004a8 <eepromKontrol+0x274>)
 8000340:	7f9a      	ldrb	r2, [r3, #30]
 8000342:	4b79      	ldr	r3, [pc, #484]	@ (8000528 <eepromKontrol+0x2f4>)
 8000344:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8000346:	4b58      	ldr	r3, [pc, #352]	@ (80004a8 <eepromKontrol+0x274>)
 8000348:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800034c:	4b77      	ldr	r3, [pc, #476]	@ (800052c <eepromKontrol+0x2f8>)
 800034e:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000350:	4b55      	ldr	r3, [pc, #340]	@ (80004a8 <eepromKontrol+0x274>)
 8000352:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000356:	4b76      	ldr	r3, [pc, #472]	@ (8000530 <eepromKontrol+0x2fc>)
 8000358:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800035a:	4b53      	ldr	r3, [pc, #332]	@ (80004a8 <eepromKontrol+0x274>)
 800035c:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000360:	4b74      	ldr	r3, [pc, #464]	@ (8000534 <eepromKontrol+0x300>)
 8000362:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000364:	4b50      	ldr	r3, [pc, #320]	@ (80004a8 <eepromKontrol+0x274>)
 8000366:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800036a:	4b73      	ldr	r3, [pc, #460]	@ (8000538 <eepromKontrol+0x304>)
 800036c:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 800036e:	4b4e      	ldr	r3, [pc, #312]	@ (80004a8 <eepromKontrol+0x274>)
 8000370:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000374:	4b71      	ldr	r3, [pc, #452]	@ (800053c <eepromKontrol+0x308>)
 8000376:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8000378:	4b4b      	ldr	r3, [pc, #300]	@ (80004a8 <eepromKontrol+0x274>)
 800037a:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800037e:	4b70      	ldr	r3, [pc, #448]	@ (8000540 <eepromKontrol+0x30c>)
 8000380:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8000382:	4b49      	ldr	r3, [pc, #292]	@ (80004a8 <eepromKontrol+0x274>)
 8000384:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8000388:	4b6e      	ldr	r3, [pc, #440]	@ (8000544 <eepromKontrol+0x310>)
 800038a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 800038c:	4b46      	ldr	r3, [pc, #280]	@ (80004a8 <eepromKontrol+0x274>)
 800038e:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8000392:	4b6d      	ldr	r3, [pc, #436]	@ (8000548 <eepromKontrol+0x314>)
 8000394:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8000396:	4b44      	ldr	r3, [pc, #272]	@ (80004a8 <eepromKontrol+0x274>)
 8000398:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800039c:	4b6b      	ldr	r3, [pc, #428]	@ (800054c <eepromKontrol+0x318>)
 800039e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003a0:	4b41      	ldr	r3, [pc, #260]	@ (80004a8 <eepromKontrol+0x274>)
 80003a2:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003a6:	4b6a      	ldr	r3, [pc, #424]	@ (8000550 <eepromKontrol+0x31c>)
 80003a8:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003aa:	4b3f      	ldr	r3, [pc, #252]	@ (80004a8 <eepromKontrol+0x274>)
 80003ac:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003b0:	4b68      	ldr	r3, [pc, #416]	@ (8000554 <eepromKontrol+0x320>)
 80003b2:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003b4:	4b3c      	ldr	r3, [pc, #240]	@ (80004a8 <eepromKontrol+0x274>)
 80003b6:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003ba:	4b67      	ldr	r3, [pc, #412]	@ (8000558 <eepromKontrol+0x324>)
 80003bc:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003be:	4b3a      	ldr	r3, [pc, #232]	@ (80004a8 <eepromKontrol+0x274>)
 80003c0:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003c4:	4b65      	ldr	r3, [pc, #404]	@ (800055c <eepromKontrol+0x328>)
 80003c6:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003c8:	4b37      	ldr	r3, [pc, #220]	@ (80004a8 <eepromKontrol+0x274>)
 80003ca:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003ce:	4b64      	ldr	r3, [pc, #400]	@ (8000560 <eepromKontrol+0x32c>)
 80003d0:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80003d2:	4b39      	ldr	r3, [pc, #228]	@ (80004b8 <eepromKontrol+0x284>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d902      	bls.n	80003e0 <eepromKontrol+0x1ac>
	    calismaSekli=0;
 80003da:	4b37      	ldr	r3, [pc, #220]	@ (80004b8 <eepromKontrol+0x284>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80003e0:	4b36      	ldr	r3, [pc, #216]	@ (80004bc <eepromKontrol+0x288>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d902      	bls.n	80003ee <eepromKontrol+0x1ba>
	    emniyetCercevesi=1;
 80003e8:	4b34      	ldr	r3, [pc, #208]	@ (80004bc <eepromKontrol+0x288>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80003ee:	4b34      	ldr	r3, [pc, #208]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d902      	bls.n	80003fc <eepromKontrol+0x1c8>
	    yavaslamaLimit=0;
 80003f6:	4b32      	ldr	r3, [pc, #200]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 80003fc:	4b31      	ldr	r3, [pc, #196]	@ (80004c4 <eepromKontrol+0x290>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d902      	bls.n	800040a <eepromKontrol+0x1d6>
	    altLimit=1;
 8000404:	4b2f      	ldr	r3, [pc, #188]	@ (80004c4 <eepromKontrol+0x290>)
 8000406:	2201      	movs	r2, #1
 8000408:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800040a:	4b2f      	ldr	r3, [pc, #188]	@ (80004c8 <eepromKontrol+0x294>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d902      	bls.n	8000418 <eepromKontrol+0x1e4>
	    basincSalteri=1;
 8000412:	4b2d      	ldr	r3, [pc, #180]	@ (80004c8 <eepromKontrol+0x294>)
 8000414:	2201      	movs	r2, #1
 8000416:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8000418:	4b2c      	ldr	r3, [pc, #176]	@ (80004cc <eepromKontrol+0x298>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b03      	cmp	r3, #3
 800041e:	d902      	bls.n	8000426 <eepromKontrol+0x1f2>
	    kapiSecimleri=3;
 8000420:	4b2a      	ldr	r3, [pc, #168]	@ (80004cc <eepromKontrol+0x298>)
 8000422:	2203      	movs	r2, #3
 8000424:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000426:	4b44      	ldr	r3, [pc, #272]	@ (8000538 <eepromKontrol+0x304>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d902      	bls.n	8000434 <eepromKontrol+0x200>
	    kapiAcTipi=0;
 800042e:	4b42      	ldr	r3, [pc, #264]	@ (8000538 <eepromKontrol+0x304>)
 8000430:	2200      	movs	r2, #0
 8000432:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8000434:	4b26      	ldr	r3, [pc, #152]	@ (80004d0 <eepromKontrol+0x29c>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b02      	cmp	r3, #2
 800043a:	d902      	bls.n	8000442 <eepromKontrol+0x20e>
	    kapi1Tip=1;
 800043c:	4b24      	ldr	r3, [pc, #144]	@ (80004d0 <eepromKontrol+0x29c>)
 800043e:	2201      	movs	r2, #1
 8000440:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8000442:	4b24      	ldr	r3, [pc, #144]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b05      	cmp	r3, #5
 8000448:	d902      	bls.n	8000450 <eepromKontrol+0x21c>
	    kapi1AcSure=5;
 800044a:	4b22      	ldr	r3, [pc, #136]	@ (80004d4 <eepromKontrol+0x2a0>)
 800044c:	2205      	movs	r2, #5
 800044e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8000450:	4b21      	ldr	r3, [pc, #132]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b02      	cmp	r3, #2
 8000456:	d902      	bls.n	800045e <eepromKontrol+0x22a>
	    kapi2Tip=1;
 8000458:	4b1f      	ldr	r3, [pc, #124]	@ (80004d8 <eepromKontrol+0x2a4>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800045e:	4b1f      	ldr	r3, [pc, #124]	@ (80004dc <eepromKontrol+0x2a8>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b05      	cmp	r3, #5
 8000464:	d902      	bls.n	800046c <eepromKontrol+0x238>
	    kapi2AcSure=5;
 8000466:	4b1d      	ldr	r3, [pc, #116]	@ (80004dc <eepromKontrol+0x2a8>)
 8000468:	2205      	movs	r2, #5
 800046a:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 800046c:	4b1c      	ldr	r3, [pc, #112]	@ (80004e0 <eepromKontrol+0x2ac>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b02      	cmp	r3, #2
 8000472:	d902      	bls.n	800047a <eepromKontrol+0x246>
	    kapitablaTip=1;
 8000474:	4b1a      	ldr	r3, [pc, #104]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000476:	2201      	movs	r2, #1
 8000478:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 800047a:	4b2d      	ldr	r3, [pc, #180]	@ (8000530 <eepromKontrol+0x2fc>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b02      	cmp	r3, #2
 8000480:	d902      	bls.n	8000488 <eepromKontrol+0x254>
	    kapiTablaAcKonum=2;
 8000482:	4b2b      	ldr	r3, [pc, #172]	@ (8000530 <eepromKontrol+0x2fc>)
 8000484:	2202      	movs	r2, #2
 8000486:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8000488:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <eepromKontrol+0x2b0>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b05      	cmp	r3, #5
 800048e:	d902      	bls.n	8000496 <eepromKontrol+0x262>
	    kapiTablaAcSure=5;
 8000490:	4b14      	ldr	r3, [pc, #80]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000492:	2205      	movs	r2, #5
 8000494:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8000496:	4b14      	ldr	r3, [pc, #80]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d962      	bls.n	8000564 <eepromKontrol+0x330>
	    yukariYavasLimit=0;
 800049e:	4b12      	ldr	r3, [pc, #72]	@ (80004e8 <eepromKontrol+0x2b4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	e05e      	b.n	8000564 <eepromKontrol+0x330>
 80004a6:	bf00      	nop
 80004a8:	20000fec 	.word	0x20000fec
 80004ac:	20001090 	.word	0x20001090
 80004b0:	200016eb 	.word	0x200016eb
 80004b4:	20001091 	.word	0x20001091
 80004b8:	200016c1 	.word	0x200016c1
 80004bc:	200016c4 	.word	0x200016c4
 80004c0:	200016c5 	.word	0x200016c5
 80004c4:	200016c6 	.word	0x200016c6
 80004c8:	200016c7 	.word	0x200016c7
 80004cc:	200016c8 	.word	0x200016c8
 80004d0:	200016c9 	.word	0x200016c9
 80004d4:	200016d9 	.word	0x200016d9
 80004d8:	200016ca 	.word	0x200016ca
 80004dc:	200016da 	.word	0x200016da
 80004e0:	200016cb 	.word	0x200016cb
 80004e4:	200016db 	.word	0x200016db
 80004e8:	200016ce 	.word	0x200016ce
 80004ec:	200016cf 	.word	0x200016cf
 80004f0:	200016d0 	.word	0x200016d0
 80004f4:	200016d1 	.word	0x200016d1
 80004f8:	200016d2 	.word	0x200016d2
 80004fc:	200016d3 	.word	0x200016d3
 8000500:	200016d4 	.word	0x200016d4
 8000504:	200016d5 	.word	0x200016d5
 8000508:	200016d6 	.word	0x200016d6
 800050c:	200016d7 	.word	0x200016d7
 8000510:	200016d8 	.word	0x200016d8
 8000514:	200016dc 	.word	0x200016dc
 8000518:	200016de 	.word	0x200016de
 800051c:	200016b8 	.word	0x200016b8
 8000520:	200016b9 	.word	0x200016b9
 8000524:	200016ba 	.word	0x200016ba
 8000528:	200016bb 	.word	0x200016bb
 800052c:	200016e0 	.word	0x200016e0
 8000530:	200016cd 	.word	0x200016cd
 8000534:	200016df 	.word	0x200016df
 8000538:	200016cc 	.word	0x200016cc
 800053c:	200016e1 	.word	0x200016e1
 8000540:	200016e2 	.word	0x200016e2
 8000544:	200016e3 	.word	0x200016e3
 8000548:	200016e4 	.word	0x200016e4
 800054c:	200016e5 	.word	0x200016e5
 8000550:	200016e6 	.word	0x200016e6
 8000554:	200016e7 	.word	0x200016e7
 8000558:	200016e8 	.word	0x200016e8
 800055c:	200016e9 	.word	0x200016e9
 8000560:	200016ea 	.word	0x200016ea
	}

	if(devirmeYuruyusSecim>2) {
 8000564:	4b40      	ldr	r3, [pc, #256]	@ (8000668 <eepromKontrol+0x434>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d902      	bls.n	8000572 <eepromKontrol+0x33e>
	    devirmeYuruyusSecim=0;
 800056c:	4b3e      	ldr	r3, [pc, #248]	@ (8000668 <eepromKontrol+0x434>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8000572:	4b3e      	ldr	r3, [pc, #248]	@ (800066c <eepromKontrol+0x438>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d902      	bls.n	8000580 <eepromKontrol+0x34c>
	    devirmeYukariIleriLimit=1;
 800057a:	4b3c      	ldr	r3, [pc, #240]	@ (800066c <eepromKontrol+0x438>)
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8000580:	4b3b      	ldr	r3, [pc, #236]	@ (8000670 <eepromKontrol+0x43c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    devirmeAsagiGeriLimit=1;
 8000588:	4b39      	ldr	r3, [pc, #228]	@ (8000670 <eepromKontrol+0x43c>)
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800058e:	4b39      	ldr	r3, [pc, #228]	@ (8000674 <eepromKontrol+0x440>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    devirmeSilindirTipi=0;
 8000596:	4b37      	ldr	r3, [pc, #220]	@ (8000674 <eepromKontrol+0x440>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800059c:	4b36      	ldr	r3, [pc, #216]	@ (8000678 <eepromKontrol+0x444>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    platformSilindirTipi=0;
 80005a4:	4b34      	ldr	r3, [pc, #208]	@ (8000678 <eepromKontrol+0x444>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80005aa:	4b34      	ldr	r3, [pc, #208]	@ (800067c <eepromKontrol+0x448>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b05      	cmp	r3, #5
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    yukariValfTmr=0;
 80005b2:	4b32      	ldr	r3, [pc, #200]	@ (800067c <eepromKontrol+0x448>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80005b8:	4b31      	ldr	r3, [pc, #196]	@ (8000680 <eepromKontrol+0x44c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b05      	cmp	r3, #5
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    asagiValfTmr=0;
 80005c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000680 <eepromKontrol+0x44c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80005c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000684 <eepromKontrol+0x450>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    devirmeYukariIleriTmr=0;
 80005ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <eepromKontrol+0x450>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80005d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000688 <eepromKontrol+0x454>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b05      	cmp	r3, #5
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    devirmeAsagiGeriTmr=0;
 80005dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000688 <eepromKontrol+0x454>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80005e2:	4b2a      	ldr	r3, [pc, #168]	@ (800068c <eepromKontrol+0x458>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2bb4      	cmp	r3, #180	@ 0xb4
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    makineCalismaTmr=60;
 80005ea:	4b28      	ldr	r3, [pc, #160]	@ (800068c <eepromKontrol+0x458>)
 80005ec:	223c      	movs	r2, #60	@ 0x3c
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80005f0:	4b27      	ldr	r3, [pc, #156]	@ (8000690 <eepromKontrol+0x45c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    buzzer=0;
 80005f8:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <eepromKontrol+0x45c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 80005fe:	4b25      	ldr	r3, [pc, #148]	@ (8000694 <eepromKontrol+0x460>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    demoMode=0;
 8000606:	4b23      	ldr	r3, [pc, #140]	@ (8000694 <eepromKontrol+0x460>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800060c:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <eepromKontrol+0x464>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    calismaSayModu=0;
 8000614:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <eepromKontrol+0x464>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 800061a:	4b20      	ldr	r3, [pc, #128]	@ (800069c <eepromKontrol+0x468>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    dilSecim=0;
 8000622:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <eepromKontrol+0x468>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8000628:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <eepromKontrol+0x46c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
		iotMode=0;
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <eepromKontrol+0x46c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f000 f936 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 800063c:	20fa      	movs	r0, #250	@ 0xfa
 800063e:	f009 fb57 	bl	8009cf0 <HAL_Delay>

	convertArrays(2);
 8000642:	2002      	movs	r0, #2
 8000644:	f000 f930 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 8000648:	20fa      	movs	r0, #250	@ 0xfa
 800064a:	f009 fb51 	bl	8009cf0 <HAL_Delay>

	convertArrays(3);
 800064e:	2003      	movs	r0, #3
 8000650:	f000 f92a 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 8000654:	20fa      	movs	r0, #250	@ 0xfa
 8000656:	f009 fb4b 	bl	8009cf0 <HAL_Delay>

	loadMenuTexts(dilSecim);
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <eepromKontrol+0x468>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f005 fcb8 	bl	8005fd4 <loadMenuTexts>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200016cf 	.word	0x200016cf
 800066c:	200016d0 	.word	0x200016d0
 8000670:	200016d1 	.word	0x200016d1
 8000674:	200016d2 	.word	0x200016d2
 8000678:	200016d3 	.word	0x200016d3
 800067c:	200016d4 	.word	0x200016d4
 8000680:	200016d5 	.word	0x200016d5
 8000684:	200016d6 	.word	0x200016d6
 8000688:	200016d7 	.word	0x200016d7
 800068c:	200016d8 	.word	0x200016d8
 8000690:	200016dc 	.word	0x200016dc
 8000694:	200016de 	.word	0x200016de
 8000698:	200016df 	.word	0x200016df
 800069c:	200016e0 	.word	0x200016e0
 80006a0:	200016eb 	.word	0x200016eb

080006a4 <saveEEPROM>:

    HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, sizeof(eepromData), eepromData, sizeof(eepromData), 3000);
    HAL_Delay(1000);
}

void saveEEPROM(int resultText) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	EEPROM_Write(0, 0, eepromData, 110);
 80006ac:	236e      	movs	r3, #110	@ 0x6e
 80006ae:	4a0b      	ldr	r2, [pc, #44]	@ (80006dc <saveEEPROM+0x38>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 f816 	bl	80006e4 <EEPROM_Write>

    if(resultText == 1) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d104      	bne.n	80006c8 <saveEEPROM+0x24>
    	lcd_print(2, 1, dataYazildiText);
 80006be:	4a08      	ldr	r2, [pc, #32]	@ (80006e0 <saveEEPROM+0x3c>)
 80006c0:	2101      	movs	r1, #1
 80006c2:	2002      	movs	r0, #2
 80006c4:	f008 fd9c 	bl	8009200 <lcd_print>
    }

    // Ekranı temizle
    HAL_Delay(500);
 80006c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006cc:	f009 fb10 	bl	8009cf0 <HAL_Delay>
    lcd_clear();
 80006d0:	f008 fdc2 	bl	8009258 <lcd_clear>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000fec 	.word	0x20000fec
 80006e0:	20001d68 	.word	0x20001d68

080006e4 <EEPROM_Write>:

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08e      	sub	sp, #56	@ 0x38
 80006e8:	af04      	add	r7, sp, #16
 80006ea:	60ba      	str	r2, [r7, #8]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4603      	mov	r3, r0
 80006f0:	81fb      	strh	r3, [r7, #14]
 80006f2:	460b      	mov	r3, r1
 80006f4:	81bb      	strh	r3, [r7, #12]
 80006f6:	4613      	mov	r3, r2
 80006f8:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80006fa:	2306      	movs	r3, #6
 80006fc:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80006fe:	89fb      	ldrh	r3, [r7, #14]
 8000700:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000702:	88fa      	ldrh	r2, [r7, #6]
 8000704:	89bb      	ldrh	r3, [r7, #12]
 8000706:	4413      	add	r3, r2
 8000708:	2b00      	cmp	r3, #0
 800070a:	da00      	bge.n	800070e <EEPROM_Write+0x2a>
 800070c:	333f      	adds	r3, #63	@ 0x3f
 800070e:	119b      	asrs	r3, r3, #6
 8000710:	b29a      	uxth	r2, r3
 8000712:	89fb      	ldrh	r3, [r7, #14]
 8000714:	4413      	add	r3, r2
 8000716:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 8000718:	8afa      	ldrh	r2, [r7, #22]
 800071a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	b29b      	uxth	r3, r3
 8000720:	3301      	adds	r3, #1
 8000722:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
 800072c:	e041      	b.n	80007b2 <EEPROM_Write+0xce>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 800072e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	b21a      	sxth	r2, r3
 8000738:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800073c:	4313      	orrs	r3, r2
 800073e:	b21b      	sxth	r3, r3
 8000740:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000742:	89bb      	ldrh	r3, [r7, #12]
 8000744:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000748:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800074a:	8bfa      	ldrh	r2, [r7, #30]
 800074c:	88fb      	ldrh	r3, [r7, #6]
 800074e:	429a      	cmp	r2, r3
 8000750:	d901      	bls.n	8000756 <EEPROM_Write+0x72>
            bytesremaining = size;
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 8000756:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000758:	68ba      	ldr	r2, [r7, #8]
 800075a:	4413      	add	r3, r2
 800075c:	8a79      	ldrh	r1, [r7, #18]
 800075e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000762:	9202      	str	r2, [sp, #8]
 8000764:	8bfa      	ldrh	r2, [r7, #30]
 8000766:	9201      	str	r2, [sp, #4]
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2310      	movs	r3, #16
 800076c:	460a      	mov	r2, r1
 800076e:	21a0      	movs	r1, #160	@ 0xa0
 8000770:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <EEPROM_Write+0xdc>)
 8000772:	f00a fb53 	bl	800ae1c <HAL_I2C_Mem_Write>
 8000776:	4603      	mov	r3, r0
 8000778:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800077a:	7c7b      	ldrb	r3, [r7, #17]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d005      	beq.n	800078c <EEPROM_Write+0xa8>
            lcd_print(2, 1, "Hata: EEPROM    ");
 8000780:	4a10      	ldr	r2, [pc, #64]	@ (80007c4 <EEPROM_Write+0xe0>)
 8000782:	2101      	movs	r1, #1
 8000784:	2002      	movs	r0, #2
 8000786:	f008 fd3b 	bl	8009200 <lcd_print>
            return;
 800078a:	e016      	b.n	80007ba <EEPROM_Write+0xd6>
        }

        startPage += 1;
 800078c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800078e:	3301      	adds	r3, #1
 8000790:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 8000796:	88fa      	ldrh	r2, [r7, #6]
 8000798:	8bfb      	ldrh	r3, [r7, #30]
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 800079e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80007a0:	8bfb      	ldrh	r3, [r7, #30]
 80007a2:	4413      	add	r3, r2
 80007a4:	84bb      	strh	r3, [r7, #36]	@ 0x24

        HAL_Delay(5);
 80007a6:	2005      	movs	r0, #5
 80007a8:	f009 faa2 	bl	8009cf0 <HAL_Delay>
    for (int i = 0; i < numofpages; i++) {
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	3301      	adds	r3, #1
 80007b0:	623b      	str	r3, [r7, #32]
 80007b2:	8abb      	ldrh	r3, [r7, #20]
 80007b4:	6a3a      	ldr	r2, [r7, #32]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	dbb9      	blt.n	800072e <EEPROM_Write+0x4a>
    }
}
 80007ba:	3728      	adds	r7, #40	@ 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20001e44 	.word	0x20001e44
 80007c4:	0800ea6c 	.word	0x0800ea6c

080007c8 <EEPROM_Read>:

void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08e      	sub	sp, #56	@ 0x38
 80007cc:	af04      	add	r7, sp, #16
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4603      	mov	r3, r0
 80007d4:	81fb      	strh	r3, [r7, #14]
 80007d6:	460b      	mov	r3, r1
 80007d8:	81bb      	strh	r3, [r7, #12]
 80007da:	4613      	mov	r3, r2
 80007dc:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80007de:	2306      	movs	r3, #6
 80007e0:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80007e2:	89fb      	ldrh	r3, [r7, #14]
 80007e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 80007e6:	88fa      	ldrh	r2, [r7, #6]
 80007e8:	89bb      	ldrh	r3, [r7, #12]
 80007ea:	4413      	add	r3, r2
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	da00      	bge.n	80007f2 <EEPROM_Read+0x2a>
 80007f0:	333f      	adds	r3, #63	@ 0x3f
 80007f2:	119b      	asrs	r3, r3, #6
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	89fb      	ldrh	r3, [r7, #14]
 80007f8:	4413      	add	r3, r2
 80007fa:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 80007fc:	8afa      	ldrh	r2, [r7, #22]
 80007fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	b29b      	uxth	r3, r3
 8000804:	3301      	adds	r3, #1
 8000806:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
 8000810:	e03e      	b.n	8000890 <EEPROM_Read+0xc8>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 8000812:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	b21a      	sxth	r2, r3
 800081c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000820:	4313      	orrs	r3, r2
 8000822:	b21b      	sxth	r3, r3
 8000824:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000826:	89bb      	ldrh	r3, [r7, #12]
 8000828:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800082c:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800082e:	8bfa      	ldrh	r2, [r7, #30]
 8000830:	88fb      	ldrh	r3, [r7, #6]
 8000832:	429a      	cmp	r2, r3
 8000834:	d901      	bls.n	800083a <EEPROM_Read+0x72>
            bytesremaining = size;
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 800083a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	4413      	add	r3, r2
 8000840:	8a79      	ldrh	r1, [r7, #18]
 8000842:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000846:	9202      	str	r2, [sp, #8]
 8000848:	8bfa      	ldrh	r2, [r7, #30]
 800084a:	9201      	str	r2, [sp, #4]
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2310      	movs	r3, #16
 8000850:	460a      	mov	r2, r1
 8000852:	21a0      	movs	r1, #160	@ 0xa0
 8000854:	4812      	ldr	r0, [pc, #72]	@ (80008a0 <EEPROM_Read+0xd8>)
 8000856:	f00a fbdb 	bl	800b010 <HAL_I2C_Mem_Read>
 800085a:	4603      	mov	r3, r0
 800085c:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800085e:	7c7b      	ldrb	r3, [r7, #17]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d005      	beq.n	8000870 <EEPROM_Read+0xa8>
            lcd_print(2, 1, "Hata: EEPROM OKU");
 8000864:	4a0f      	ldr	r2, [pc, #60]	@ (80008a4 <EEPROM_Read+0xdc>)
 8000866:	2101      	movs	r1, #1
 8000868:	2002      	movs	r0, #2
 800086a:	f008 fcc9 	bl	8009200 <lcd_print>
            return;
 800086e:	e013      	b.n	8000898 <EEPROM_Read+0xd0>
        }

        startPage += 1;
 8000870:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000872:	3301      	adds	r3, #1
 8000874:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 800087a:	88fa      	ldrh	r2, [r7, #6]
 800087c:	8bfb      	ldrh	r3, [r7, #30]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 8000882:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000884:	8bfb      	ldrh	r3, [r7, #30]
 8000886:	4413      	add	r3, r2
 8000888:	84bb      	strh	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < numofpages; i++) {
 800088a:	6a3b      	ldr	r3, [r7, #32]
 800088c:	3301      	adds	r3, #1
 800088e:	623b      	str	r3, [r7, #32]
 8000890:	8abb      	ldrh	r3, [r7, #20]
 8000892:	6a3a      	ldr	r2, [r7, #32]
 8000894:	429a      	cmp	r2, r3
 8000896:	dbbc      	blt.n	8000812 <EEPROM_Read+0x4a>
    }
}
 8000898:	3728      	adds	r7, #40	@ 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20001e44 	.word	0x20001e44
 80008a4:	0800ea80 	.word	0x0800ea80

080008a8 <convertArrays>:

void convertArrays(int state) {
 80008a8:	b480      	push	{r7}
 80008aa:	b08b      	sub	sp, #44	@ 0x2c
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d11d      	bne.n	80008f2 <convertArrays+0x4a>
		int eepromVal = idStartPos;
 80008b6:	4b34      	ldr	r3, [pc, #208]	@ (8000988 <convertArrays+0xe0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
 80008c0:	e013      	b.n	80008ea <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 80008c2:	4a32      	ldr	r2, [pc, #200]	@ (800098c <convertArrays+0xe4>)
 80008c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c6:	4413      	add	r3, r2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 80008cc:	4a30      	ldr	r2, [pc, #192]	@ (8000990 <convertArrays+0xe8>)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4413      	add	r3, r2
 80008d2:	7819      	ldrb	r1, [r3, #0]
 80008d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000994 <convertArrays+0xec>)
 80008d6:	6a3b      	ldr	r3, [r7, #32]
 80008d8:	4413      	add	r3, r2
 80008da:	460a      	mov	r2, r1
 80008dc:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 80008de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e0:	3301      	adds	r3, #1
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008e4:	6a3b      	ldr	r3, [r7, #32]
 80008e6:	3301      	adds	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
 80008ea:	6a3b      	ldr	r3, [r7, #32]
 80008ec:	2b0b      	cmp	r3, #11
 80008ee:	dde8      	ble.n	80008c2 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 80008f0:	e045      	b.n	800097e <convertArrays+0xd6>
	} else if(state == 2) {
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d121      	bne.n	800093c <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 80008f8:	4b27      	ldr	r3, [pc, #156]	@ (8000998 <convertArrays+0xf0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	e017      	b.n	8000934 <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 8000904:	4a21      	ldr	r2, [pc, #132]	@ (800098c <convertArrays+0xe4>)
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	4413      	add	r3, r2
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00e      	beq.n	800092e <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 8000910:	4a1e      	ldr	r2, [pc, #120]	@ (800098c <convertArrays+0xe4>)
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	4413      	add	r3, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b20      	ldr	r3, [pc, #128]	@ (800099c <convertArrays+0xf4>)
 800091c:	5c99      	ldrb	r1, [r3, r2]
 800091e:	4a20      	ldr	r2, [pc, #128]	@ (80009a0 <convertArrays+0xf8>)
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	4413      	add	r3, r2
 8000924:	460a      	mov	r2, r1
 8000926:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	3301      	adds	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	3301      	adds	r3, #1
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	2b0f      	cmp	r3, #15
 8000938:	dde4      	ble.n	8000904 <convertArrays+0x5c>
}
 800093a:	e020      	b.n	800097e <convertArrays+0xd6>
		int eepromVal = passStartPos;
 800093c:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <convertArrays+0xfc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	e017      	b.n	8000978 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 8000948:	4a10      	ldr	r2, [pc, #64]	@ (800098c <convertArrays+0xe4>)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	4413      	add	r3, r2
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00e      	beq.n	8000972 <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 8000954:	4a0d      	ldr	r2, [pc, #52]	@ (800098c <convertArrays+0xe4>)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	4413      	add	r3, r2
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <convertArrays+0xf4>)
 8000960:	5c99      	ldrb	r1, [r3, r2]
 8000962:	4a11      	ldr	r2, [pc, #68]	@ (80009a8 <convertArrays+0x100>)
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	4413      	add	r3, r2
 8000968:	460a      	mov	r2, r1
 800096a:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	3301      	adds	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	3301      	adds	r3, #1
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	2b0f      	cmp	r3, #15
 800097c:	dde4      	ble.n	8000948 <convertArrays+0xa0>
}
 800097e:	bf00      	nop
 8000980:	372c      	adds	r7, #44	@ 0x2c
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	20000000 	.word	0x20000000
 800098c:	20000fec 	.word	0x20000fec
 8000990:	2000000c 	.word	0x2000000c
 8000994:	20001064 	.word	0x20001064
 8000998:	20000004 	.word	0x20000004
 800099c:	20000018 	.word	0x20000018
 80009a0:	20001070 	.word	0x20001070
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20001080 	.word	0x20001080

080009ac <Wifi_SendString>:
void Wifi_RxClear(void) {
    memset(esp8266_rx_buffer, 0, sizeof(esp8266_rx_buffer));
    Wifi_RxBufferIndex = 0;  // Ayrıca buffer indexi sıfırlayın
}

int Wifi_SendString(UART_HandleTypeDef *huart, char *data) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
    return HAL_UART_Transmit(huart, (uint8_t *)data, strlen(data), HAL_MAX_DELAY) == HAL_OK ? 1 : 0;
 80009b6:	6838      	ldr	r0, [r7, #0]
 80009b8:	f7ff fc34 	bl	8000224 <strlen>
 80009bc:	4603      	mov	r3, r0
 80009be:	b29a      	uxth	r2, r3
 80009c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009c4:	6839      	ldr	r1, [r7, #0]
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f00c fa6a 	bl	800cea0 <HAL_UART_Transmit>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	bf0c      	ite	eq
 80009d2:	2301      	moveq	r3, #1
 80009d4:	2300      	movne	r3, #0
 80009d6:	b2db      	uxtb	r3, r3
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <Wifi_WaitForString>:

int Wifi_WaitForString(UART_HandleTypeDef *huart, uint32_t TimeOut_ms, uint8_t *result, uint8_t CountOfParameter, ...) {
 80009e0:	b408      	push	{r3}
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b089      	sub	sp, #36	@ 0x24
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	60f8      	str	r0, [r7, #12]
 80009ea:	60b9      	str	r1, [r7, #8]
 80009ec:	607a      	str	r2, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 80009ee:	f009 f975 	bl	8009cdc <HAL_GetTick>
 80009f2:	6178      	str	r0, [r7, #20]
    memset(esp8266_rx_buffer, 0, sizeof(esp8266_rx_buffer));
 80009f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009f8:	2100      	movs	r1, #0
 80009fa:	482b      	ldr	r0, [pc, #172]	@ (8000aa8 <Wifi_WaitForString+0xc8>)
 80009fc:	f00d fc3f 	bl	800e27e <memset>
    int index = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
    va_list args;
    va_start(args, CountOfParameter);
 8000a04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a08:	613b      	str	r3, [r7, #16]

    while ((HAL_GetTick() - tickstart) < TimeOut_ms) {
 8000a0a:	e03a      	b.n	8000a82 <Wifi_WaitForString+0xa2>
        if (HAL_UART_Receive(huart, (uint8_t *)&esp8266_rx_buffer[index], 1, 100) == HAL_OK) {
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	4a26      	ldr	r2, [pc, #152]	@ (8000aa8 <Wifi_WaitForString+0xc8>)
 8000a10:	1899      	adds	r1, r3, r2
 8000a12:	2364      	movs	r3, #100	@ 0x64
 8000a14:	2201      	movs	r2, #1
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f00c fac5 	bl	800cfa6 <HAL_UART_Receive>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d124      	bne.n	8000a6c <Wifi_WaitForString+0x8c>
            if (esp8266_rx_buffer[index] == '\n') {
 8000a22:	4a21      	ldr	r2, [pc, #132]	@ (8000aa8 <Wifi_WaitForString+0xc8>)
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	4413      	add	r3, r2
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b0a      	cmp	r3, #10
 8000a2c:	d11a      	bne.n	8000a64 <Wifi_WaitForString+0x84>
                for (uint8_t i = 0; i < CountOfParameter; i++) {
 8000a2e:	2300      	movs	r3, #0
 8000a30:	76fb      	strb	r3, [r7, #27]
 8000a32:	e012      	b.n	8000a5a <Wifi_WaitForString+0x7a>
                    if (strstr(esp8266_rx_buffer, va_arg(args, char *)) != NULL) {
 8000a34:	693b      	ldr	r3, [r7, #16]
 8000a36:	1d1a      	adds	r2, r3, #4
 8000a38:	613a      	str	r2, [r7, #16]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481a      	ldr	r0, [pc, #104]	@ (8000aa8 <Wifi_WaitForString+0xc8>)
 8000a40:	f00d fc07 	bl	800e252 <strstr>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d004      	beq.n	8000a54 <Wifi_WaitForString+0x74>
                        *result = i;
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	7efa      	ldrb	r2, [r7, #27]
 8000a4e:	701a      	strb	r2, [r3, #0]
                        va_end(args);
                        return 1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	e022      	b.n	8000a9a <Wifi_WaitForString+0xba>
                for (uint8_t i = 0; i < CountOfParameter; i++) {
 8000a54:	7efb      	ldrb	r3, [r7, #27]
 8000a56:	3301      	adds	r3, #1
 8000a58:	76fb      	strb	r3, [r7, #27]
 8000a5a:	7efa      	ldrb	r2, [r7, #27]
 8000a5c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d3e7      	bcc.n	8000a34 <Wifi_WaitForString+0x54>
                    }
                }
            }
            index++;
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	3301      	adds	r3, #1
 8000a68:	61fb      	str	r3, [r7, #28]
 8000a6a:	e00a      	b.n	8000a82 <Wifi_WaitForString+0xa2>
        } else {
            HAL_UART_AbortReceive(huart);  // Hatalı durumu temizle
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f00c fb86 	bl	800d17e <HAL_UART_AbortReceive>
            HAL_UART_Receive_IT(huart, (uint8_t *)&esp8266_rx_buffer[index], 1); // Tekrar başlat
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa8 <Wifi_WaitForString+0xc8>)
 8000a76:	4413      	add	r3, r2
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	68f8      	ldr	r0, [r7, #12]
 8000a7e:	f00c fb59 	bl	800d134 <HAL_UART_Receive_IT>
    while ((HAL_GetTick() - tickstart) < TimeOut_ms) {
 8000a82:	f009 f92b 	bl	8009cdc <HAL_GetTick>
 8000a86:	4602      	mov	r2, r0
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	68ba      	ldr	r2, [r7, #8]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	d8bc      	bhi.n	8000a0c <Wifi_WaitForString+0x2c>
        }
    }
    *result = 0xFF;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	22ff      	movs	r2, #255	@ 0xff
 8000a96:	701a      	strb	r2, [r3, #0]
    va_end(args);
    return 0;
 8000a98:	2300      	movs	r3, #0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3724      	adds	r7, #36	@ 0x24
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000aa4:	b001      	add	sp, #4
 8000aa6:	4770      	bx	lr
 8000aa8:	20001094 	.word	0x20001094

08000aac <Wifi_RxCallBack>:

void Wifi_RxCallBack(UART_HandleTypeDef *huart) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
    uint8_t receivedByte;

    if (HAL_UART_Receive_IT(huart, &receivedByte, 1) == HAL_OK) {
 8000ab4:	f107 030f 	add.w	r3, r7, #15
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4619      	mov	r1, r3
 8000abc:	6878      	ldr	r0, [r7, #4]
 8000abe:	f00c fb39 	bl	800d134 <HAL_UART_Receive_IT>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d126      	bne.n	8000b16 <Wifi_RxCallBack+0x6a>
        if (Wifi_RxBufferIndex >= WIFI_RX_BUFFER_SIZE) {
 8000ac8:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <Wifi_RxCallBack+0x74>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ad0:	d302      	bcc.n	8000ad8 <Wifi_RxCallBack+0x2c>
            Wifi_RxBufferIndex = 0;  // Bu aşamada veriyi yeniden başlatmak yerine işleyin
 8000ad2:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <Wifi_RxCallBack+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	801a      	strh	r2, [r3, #0]
        }

        Wifi_RxBuffer[Wifi_RxBufferIndex++] = receivedByte;
 8000ad8:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <Wifi_RxCallBack+0x74>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	1c5a      	adds	r2, r3, #1
 8000ade:	b291      	uxth	r1, r2
 8000ae0:	4a0f      	ldr	r2, [pc, #60]	@ (8000b20 <Wifi_RxCallBack+0x74>)
 8000ae2:	8011      	strh	r1, [r2, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	7bf9      	ldrb	r1, [r7, #15]
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <Wifi_RxCallBack+0x78>)
 8000aea:	5499      	strb	r1, [r3, r2]

        if (receivedByte == '\n' || receivedByte == '\r') {
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
 8000aee:	2b0a      	cmp	r3, #10
 8000af0:	d002      	beq.n	8000af8 <Wifi_RxCallBack+0x4c>
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	2b0d      	cmp	r3, #13
 8000af6:	d10e      	bne.n	8000b16 <Wifi_RxCallBack+0x6a>
            Wifi_ProcessReceivedData(Wifi_RxBuffer, Wifi_RxBufferIndex);
 8000af8:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <Wifi_RxCallBack+0x74>)
 8000afa:	881b      	ldrh	r3, [r3, #0]
 8000afc:	4619      	mov	r1, r3
 8000afe:	4809      	ldr	r0, [pc, #36]	@ (8000b24 <Wifi_RxCallBack+0x78>)
 8000b00:	f000 f812 	bl	8000b28 <Wifi_ProcessReceivedData>
            Wifi_RxBufferIndex = 0;
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <Wifi_RxCallBack+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	801a      	strh	r2, [r3, #0]
            memset(Wifi_RxBuffer, 0, WIFI_RX_BUFFER_SIZE);
 8000b0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <Wifi_RxCallBack+0x78>)
 8000b12:	f00d fbb4 	bl	800e27e <memset>
        }
    }
}
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	20001694 	.word	0x20001694
 8000b24:	20001494 	.word	0x20001494

08000b28 <Wifi_ProcessReceivedData>:

void Wifi_ProcessReceivedData(uint8_t* buffer, uint16_t length) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
 8000b30:	460b      	mov	r3, r1
 8000b32:	807b      	strh	r3, [r7, #2]
    memcpy(esp8266_rx_buffer, buffer, length);
 8000b34:	887b      	ldrh	r3, [r7, #2]
 8000b36:	461a      	mov	r2, r3
 8000b38:	6879      	ldr	r1, [r7, #4]
 8000b3a:	4805      	ldr	r0, [pc, #20]	@ (8000b50 <Wifi_ProcessReceivedData+0x28>)
 8000b3c:	f00d fbe4 	bl	800e308 <memcpy>

    if (strstr((char*)buffer, "OK") != NULL) {
 8000b40:	4904      	ldr	r1, [pc, #16]	@ (8000b54 <Wifi_ProcessReceivedData+0x2c>)
 8000b42:	6878      	ldr	r0, [r7, #4]
 8000b44:	f00d fb85 	bl	800e252 <strstr>
        // "OK" yanıtı bulundu, diğer işlemler yapılabilir
    }
}
 8000b48:	bf00      	nop
 8000b4a:	3708      	adds	r7, #8
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20001094 	.word	0x20001094
 8000b54:	0800ea94 	.word	0x0800ea94

08000b58 <Wifi_Init>:

int Wifi_Init(UART_HandleTypeDef *huart) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af02      	add	r7, sp, #8
 8000b5e:	6078      	str	r0, [r7, #4]
    if (!Wifi_SendString(huart, AT_CMD)) {
 8000b60:	4911      	ldr	r1, [pc, #68]	@ (8000ba8 <Wifi_Init+0x50>)
 8000b62:	6878      	ldr	r0, [r7, #4]
 8000b64:	f7ff ff22 	bl	80009ac <Wifi_SendString>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <Wifi_Init+0x1a>
        return 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	e016      	b.n	8000ba0 <Wifi_Init+0x48>
    }

    uint8_t result;
    if (!Wifi_WaitForString(huart, 2000, &result, 2, "OK", "ERROR")) {
 8000b72:	f107 020f 	add.w	r2, r7, #15
 8000b76:	4b0d      	ldr	r3, [pc, #52]	@ (8000bac <Wifi_Init+0x54>)
 8000b78:	9301      	str	r3, [sp, #4]
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <Wifi_Init+0x58>)
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2302      	movs	r3, #2
 8000b80:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff2b 	bl	80009e0 <Wifi_WaitForString>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d101      	bne.n	8000b94 <Wifi_Init+0x3c>
        return 0;
 8000b90:	2300      	movs	r3, #0
 8000b92:	e005      	b.n	8000ba0 <Wifi_Init+0x48>
    }

    if (result == 1) {
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d101      	bne.n	8000b9e <Wifi_Init+0x46>
        return 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e000      	b.n	8000ba0 <Wifi_Init+0x48>
    }

    return 1;
 8000b9e:	2301      	movs	r3, #1
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	0800ea98 	.word	0x0800ea98
 8000bac:	0800eaa0 	.word	0x0800eaa0
 8000bb0:	0800ea94 	.word	0x0800ea94

08000bb4 <Wifi_Restart>:

void Wifi_Disable(void) {
    // Wifi kapama işlemleri buraya eklenecek
}

int Wifi_Restart(UART_HandleTypeDef *huart) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af02      	add	r7, sp, #8
 8000bba:	6078      	str	r0, [r7, #4]
    return Wifi_SendString(huart, AT_RST_CMD) &&
 8000bbc:	490c      	ldr	r1, [pc, #48]	@ (8000bf0 <Wifi_Restart+0x3c>)
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff fef4 	bl	80009ac <Wifi_SendString>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d00d      	beq.n	8000be6 <Wifi_Restart+0x32>
           Wifi_WaitForString(huart, 5000, NULL, 1, "OK");
 8000bca:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <Wifi_Restart+0x40>)
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	2301      	movs	r3, #1
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f7ff ff02 	bl	80009e0 <Wifi_WaitForString>
 8000bdc:	4603      	mov	r3, r0
    return Wifi_SendString(huart, AT_RST_CMD) &&
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <Wifi_Restart+0x32>
 8000be2:	2301      	movs	r3, #1
 8000be4:	e000      	b.n	8000be8 <Wifi_Restart+0x34>
 8000be6:	2300      	movs	r3, #0
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	0800eaa8 	.word	0x0800eaa8
 8000bf4:	0800ea94 	.word	0x0800ea94

08000bf8 <Wifi_FactoryReset>:
    sprintf(cmd, AT_GSLP_CMD, DelayMs);
    return Wifi_SendString(huart, cmd) &&
           Wifi_WaitForString(huart, 1000, NULL, 1, "OK");
}

int Wifi_FactoryReset(UART_HandleTypeDef *huart) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af02      	add	r7, sp, #8
 8000bfe:	6078      	str	r0, [r7, #4]
    return Wifi_SendString(huart, AT_RESTORE_CMD) &&
 8000c00:	490c      	ldr	r1, [pc, #48]	@ (8000c34 <Wifi_FactoryReset+0x3c>)
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff fed2 	bl	80009ac <Wifi_SendString>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d00d      	beq.n	8000c2a <Wifi_FactoryReset+0x32>
           Wifi_WaitForString(huart, 5000, NULL, 1, "OK");
 8000c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c38 <Wifi_FactoryReset+0x40>)
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	2301      	movs	r3, #1
 8000c14:	2200      	movs	r2, #0
 8000c16:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fee0 	bl	80009e0 <Wifi_WaitForString>
 8000c20:	4603      	mov	r3, r0
    return Wifi_SendString(huart, AT_RESTORE_CMD) &&
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <Wifi_FactoryReset+0x32>
 8000c26:	2301      	movs	r3, #1
 8000c28:	e000      	b.n	8000c2c <Wifi_FactoryReset+0x34>
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	0800eac4 	.word	0x0800eac4
 8000c38:	0800ea94 	.word	0x0800ea94

08000c3c <Wifi_SetMode>:
    sprintf(cmd, AT_RFPOWER_CMD, Power_0_to_82);
    return Wifi_SendString(huart, cmd) &&
           Wifi_WaitForString(huart, 1000, NULL, 1, "OK");
}

int Wifi_SetMode(UART_HandleTypeDef *huart, WifiMode_t WifiMode_) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08c      	sub	sp, #48	@ 0x30
 8000c40:	af02      	add	r7, sp, #8
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	70fb      	strb	r3, [r7, #3]
    char cmd[32];
    sprintf(cmd, AT_CWMODE_CMD, WifiMode_);
 8000c48:	78fa      	ldrb	r2, [r7, #3]
 8000c4a:	f107 0308 	add.w	r3, r7, #8
 8000c4e:	4910      	ldr	r1, [pc, #64]	@ (8000c90 <Wifi_SetMode+0x54>)
 8000c50:	4618      	mov	r0, r3
 8000c52:	f00d fa8d 	bl	800e170 <siprintf>
    return Wifi_SendString(huart, cmd) &&
 8000c56:	f107 0308 	add.w	r3, r7, #8
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff fea5 	bl	80009ac <Wifi_SendString>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d00d      	beq.n	8000c84 <Wifi_SetMode+0x48>
           Wifi_WaitForString(huart, 1000, NULL, 1, "OK");
 8000c68:	4b0a      	ldr	r3, [pc, #40]	@ (8000c94 <Wifi_SetMode+0x58>)
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff feb3 	bl	80009e0 <Wifi_WaitForString>
 8000c7a:	4603      	mov	r3, r0
    return Wifi_SendString(huart, cmd) &&
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <Wifi_SetMode+0x48>
 8000c80:	2301      	movs	r3, #1
 8000c82:	e000      	b.n	8000c86 <Wifi_SetMode+0x4a>
 8000c84:	2300      	movs	r3, #0
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	3728      	adds	r7, #40	@ 0x28
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	0800eaf4 	.word	0x0800eaf4
 8000c94:	0800ea94 	.word	0x0800ea94

08000c98 <Wifi_Station_ConnectToAp>:
int Wifi_GetMyIp(UART_HandleTypeDef *huart) {
    return Wifi_SendString(huart, AT_CIFSR_CMD) &&
           Wifi_WaitForString(huart, 1000, NULL, 1, "OK");
}

int Wifi_Station_ConnectToAp(UART_HandleTypeDef *huart, char *SSID, char *Pass, char *MAC) {
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b0c9      	sub	sp, #292	@ 0x124
 8000c9c:	af02      	add	r7, sp, #8
 8000c9e:	f507 748c 	add.w	r4, r7, #280	@ 0x118
 8000ca2:	f5a4 7486 	sub.w	r4, r4, #268	@ 0x10c
 8000ca6:	6020      	str	r0, [r4, #0]
 8000ca8:	f507 708c 	add.w	r0, r7, #280	@ 0x118
 8000cac:	f5a0 7088 	sub.w	r0, r0, #272	@ 0x110
 8000cb0:	6001      	str	r1, [r0, #0]
 8000cb2:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 8000cb6:	f5a1 718a 	sub.w	r1, r1, #276	@ 0x114
 8000cba:	600a      	str	r2, [r1, #0]
 8000cbc:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000cc0:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 8000cc4:	6013      	str	r3, [r2, #0]
    char cmd[256];
    sprintf(cmd, AT_CWJAP_CMD, SSID, Pass);
 8000cc6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000cce:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8000cd2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000cd6:	f107 0018 	add.w	r0, r7, #24
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6812      	ldr	r2, [r2, #0]
 8000cde:	491b      	ldr	r1, [pc, #108]	@ (8000d4c <Wifi_Station_ConnectToAp+0xb4>)
 8000ce0:	f00d fa46 	bl	800e170 <siprintf>

    if (Wifi_SendString(huart, cmd)) {
 8000ce4:	f107 0218 	add.w	r2, r7, #24
 8000ce8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cec:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000cf0:	4611      	mov	r1, r2
 8000cf2:	6818      	ldr	r0, [r3, #0]
 8000cf4:	f7ff fe5a 	bl	80009ac <Wifi_SendString>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d01f      	beq.n	8000d3e <Wifi_Station_ConnectToAp+0xa6>
        uint8_t result;
        if (Wifi_WaitForString(huart, 20000, &result, 2, "OK", "FAIL")) {
 8000cfe:	f107 0217 	add.w	r2, r7, #23
 8000d02:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d06:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8000d0a:	4b11      	ldr	r3, [pc, #68]	@ (8000d50 <Wifi_Station_ConnectToAp+0xb8>)
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	4b11      	ldr	r3, [pc, #68]	@ (8000d54 <Wifi_Station_ConnectToAp+0xbc>)
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2302      	movs	r3, #2
 8000d14:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8000d18:	6800      	ldr	r0, [r0, #0]
 8000d1a:	f7ff fe61 	bl	80009e0 <Wifi_WaitForString>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d00a      	beq.n	8000d3a <Wifi_Station_ConnectToAp+0xa2>
            if (result == 0) {
 8000d24:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000d28:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <Wifi_Station_ConnectToAp+0x9e>
                return 1;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e004      	b.n	8000d40 <Wifi_Station_ConnectToAp+0xa8>
            } else {
                return 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	e002      	b.n	8000d40 <Wifi_Station_ConnectToAp+0xa8>
            }
        } else {
            return 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e000      	b.n	8000d40 <Wifi_Station_ConnectToAp+0xa8>
        }
    }

    return 0;
 8000d3e:	2300      	movs	r3, #0
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd90      	pop	{r4, r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	0800eb20 	.word	0x0800eb20
 8000d50:	0800eb38 	.word	0x0800eb38
 8000d54:	0800ea94 	.word	0x0800ea94

08000d58 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b089      	sub	sp, #36	@ 0x24
 8000d5c:	af04      	add	r7, sp, #16
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000d62:	4b25      	ldr	r3, [pc, #148]	@ (8000df8 <hata2EEPROM+0xa0>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	1e5a      	subs	r2, r3, #1
 8000d68:	4b24      	ldr	r3, [pc, #144]	@ (8000dfc <hata2EEPROM+0xa4>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	4a24      	ldr	r2, [pc, #144]	@ (8000e00 <hata2EEPROM+0xa8>)
 8000d70:	5cd3      	ldrb	r3, [r2, r3]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d002      	beq.n	8000d7c <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000d76:	f000 f8d1 	bl	8000f1c <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000d7a:	e000      	b.n	8000d7e <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000d7c:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	e012      	b.n	8000daa <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000d84:	4b1d      	ldr	r3, [pc, #116]	@ (8000dfc <hata2EEPROM+0xa4>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	4413      	add	r3, r2
 8000d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8000e00 <hata2EEPROM+0xa8>)
 8000d8e:	5cd3      	ldrb	r3, [r2, r3]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d107      	bne.n	8000da4 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000d94:	4b19      	ldr	r3, [pc, #100]	@ (8000dfc <hata2EEPROM+0xa4>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4918      	ldr	r1, [pc, #96]	@ (8000e00 <hata2EEPROM+0xa8>)
 8000d9e:	79fa      	ldrb	r2, [r7, #7]
 8000da0:	54ca      	strb	r2, [r1, r3]
					break;
 8000da2:	e007      	b.n	8000db4 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	3301      	adds	r3, #1
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <hata2EEPROM+0xa0>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dbe7      	blt.n	8000d84 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000db4:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <hata2EEPROM+0xa4>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	b299      	uxth	r1, r3
 8000dba:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <hata2EEPROM+0xa0>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	b298      	uxth	r0, r3
 8000dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dfc <hata2EEPROM+0xa4>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0e      	ldr	r2, [pc, #56]	@ (8000e00 <hata2EEPROM+0xa8>)
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000df8 <hata2EEPROM+0xa0>)
 8000dca:	6812      	ldr	r2, [r2, #0]
 8000dcc:	b292      	uxth	r2, r2
 8000dce:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 8000dd2:	9402      	str	r4, [sp, #8]
 8000dd4:	9201      	str	r2, [sp, #4]
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	4603      	mov	r3, r0
 8000dda:	460a      	mov	r2, r1
 8000ddc:	21a0      	movs	r1, #160	@ 0xa0
 8000dde:	4809      	ldr	r0, [pc, #36]	@ (8000e04 <hata2EEPROM+0xac>)
 8000de0:	f00a f81c 	bl	800ae1c <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000de4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000de8:	f008 ff82 	bl	8009cf0 <HAL_Delay>
	eepromKontrol();
 8000dec:	f7ff fa22 	bl	8000234 <eepromKontrol>
}
 8000df0:	bf00      	nop
 8000df2:	3714      	adds	r7, #20
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd90      	pop	{r4, r7, pc}
 8000df8:	20000094 	.word	0x20000094
 8000dfc:	20000098 	.word	0x20000098
 8000e00:	20000fec 	.word	0x20000fec
 8000e04:	20001e44 	.word	0x20001e44

08000e08 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d10f      	bne.n	8000e38 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000e18:	4a38      	ldr	r2, [pc, #224]	@ (8000efc <hataKoduLcdGoster+0xf4>)
 8000e1a:	2101      	movs	r1, #1
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f008 f9ef 	bl	8009200 <lcd_print>
		lcd_print(2, 1, "1");
 8000e22:	4a37      	ldr	r2, [pc, #220]	@ (8000f00 <hataKoduLcdGoster+0xf8>)
 8000e24:	2101      	movs	r1, #1
 8000e26:	2002      	movs	r0, #2
 8000e28:	f008 f9ea 	bl	8009200 <lcd_print>
		lcd_print(2, 7, "          ");
 8000e2c:	4a35      	ldr	r2, [pc, #212]	@ (8000f04 <hataKoduLcdGoster+0xfc>)
 8000e2e:	2107      	movs	r1, #7
 8000e30:	2002      	movs	r0, #2
 8000e32:	f008 f9e5 	bl	8009200 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000e36:	e05d      	b.n	8000ef4 <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	2b02      	cmp	r3, #2
 8000e3c:	d10f      	bne.n	8000e5e <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 8000e3e:	4a2f      	ldr	r2, [pc, #188]	@ (8000efc <hataKoduLcdGoster+0xf4>)
 8000e40:	2101      	movs	r1, #1
 8000e42:	2001      	movs	r0, #1
 8000e44:	f008 f9dc 	bl	8009200 <lcd_print>
		lcd_print(2, 2, "2");
 8000e48:	4a2f      	ldr	r2, [pc, #188]	@ (8000f08 <hataKoduLcdGoster+0x100>)
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f008 f9d7 	bl	8009200 <lcd_print>
		lcd_print(2, 7, "          ");
 8000e52:	4a2c      	ldr	r2, [pc, #176]	@ (8000f04 <hataKoduLcdGoster+0xfc>)
 8000e54:	2107      	movs	r1, #7
 8000e56:	2002      	movs	r0, #2
 8000e58:	f008 f9d2 	bl	8009200 <lcd_print>
}
 8000e5c:	e04a      	b.n	8000ef4 <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	d10f      	bne.n	8000e84 <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000e64:	4a25      	ldr	r2, [pc, #148]	@ (8000efc <hataKoduLcdGoster+0xf4>)
 8000e66:	2101      	movs	r1, #1
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f008 f9c9 	bl	8009200 <lcd_print>
		lcd_print(2, 3, "3");
 8000e6e:	4a27      	ldr	r2, [pc, #156]	@ (8000f0c <hataKoduLcdGoster+0x104>)
 8000e70:	2103      	movs	r1, #3
 8000e72:	2002      	movs	r0, #2
 8000e74:	f008 f9c4 	bl	8009200 <lcd_print>
		lcd_print(2, 7, "          ");
 8000e78:	4a22      	ldr	r2, [pc, #136]	@ (8000f04 <hataKoduLcdGoster+0xfc>)
 8000e7a:	2107      	movs	r1, #7
 8000e7c:	2002      	movs	r0, #2
 8000e7e:	f008 f9bf 	bl	8009200 <lcd_print>
}
 8000e82:	e037      	b.n	8000ef4 <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b04      	cmp	r3, #4
 8000e88:	d10f      	bne.n	8000eaa <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8000e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000efc <hataKoduLcdGoster+0xf4>)
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	2001      	movs	r0, #1
 8000e90:	f008 f9b6 	bl	8009200 <lcd_print>
		lcd_print(2, 4, "4");
 8000e94:	4a1e      	ldr	r2, [pc, #120]	@ (8000f10 <hataKoduLcdGoster+0x108>)
 8000e96:	2104      	movs	r1, #4
 8000e98:	2002      	movs	r0, #2
 8000e9a:	f008 f9b1 	bl	8009200 <lcd_print>
		lcd_print(2, 7, "          ");
 8000e9e:	4a19      	ldr	r2, [pc, #100]	@ (8000f04 <hataKoduLcdGoster+0xfc>)
 8000ea0:	2107      	movs	r1, #7
 8000ea2:	2002      	movs	r0, #2
 8000ea4:	f008 f9ac 	bl	8009200 <lcd_print>
}
 8000ea8:	e024      	b.n	8000ef4 <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b05      	cmp	r3, #5
 8000eae:	d10f      	bne.n	8000ed0 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8000eb0:	4a12      	ldr	r2, [pc, #72]	@ (8000efc <hataKoduLcdGoster+0xf4>)
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	2001      	movs	r0, #1
 8000eb6:	f008 f9a3 	bl	8009200 <lcd_print>
		lcd_print(2, 5, "5");
 8000eba:	4a16      	ldr	r2, [pc, #88]	@ (8000f14 <hataKoduLcdGoster+0x10c>)
 8000ebc:	2105      	movs	r1, #5
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	f008 f99e 	bl	8009200 <lcd_print>
		lcd_print(2, 7, "          ");
 8000ec4:	4a0f      	ldr	r2, [pc, #60]	@ (8000f04 <hataKoduLcdGoster+0xfc>)
 8000ec6:	2107      	movs	r1, #7
 8000ec8:	2002      	movs	r0, #2
 8000eca:	f008 f999 	bl	8009200 <lcd_print>
}
 8000ece:	e011      	b.n	8000ef4 <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	2b06      	cmp	r3, #6
 8000ed4:	d10e      	bne.n	8000ef4 <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 8000ed6:	4a09      	ldr	r2, [pc, #36]	@ (8000efc <hataKoduLcdGoster+0xf4>)
 8000ed8:	2101      	movs	r1, #1
 8000eda:	2001      	movs	r0, #1
 8000edc:	f008 f990 	bl	8009200 <lcd_print>
		lcd_print(2, 6, "6");
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	@ (8000f18 <hataKoduLcdGoster+0x110>)
 8000ee2:	2106      	movs	r1, #6
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f008 f98b 	bl	8009200 <lcd_print>
		lcd_print(2, 7, "          ");
 8000eea:	4a06      	ldr	r2, [pc, #24]	@ (8000f04 <hataKoduLcdGoster+0xfc>)
 8000eec:	2107      	movs	r1, #7
 8000eee:	2002      	movs	r0, #2
 8000ef0:	f008 f986 	bl	8009200 <lcd_print>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20001db8 	.word	0x20001db8
 8000f00:	0800ecac 	.word	0x0800ecac
 8000f04:	0800ecb0 	.word	0x0800ecb0
 8000f08:	0800ecbc 	.word	0x0800ecbc
 8000f0c:	0800ecc0 	.word	0x0800ecc0
 8000f10:	0800ecc4 	.word	0x0800ecc4
 8000f14:	0800ecc8 	.word	0x0800ecc8
 8000f18:	0800eccc 	.word	0x0800eccc

08000f1c <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000f22:	2300      	movs	r3, #0
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	e009      	b.n	8000f3c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000f28:	4a0a      	ldr	r2, [pc, #40]	@ (8000f54 <eepromDataFillWithEmpty+0x38>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f30:	4a09      	ldr	r2, [pc, #36]	@ (8000f58 <eepromDataFillWithEmpty+0x3c>)
 8000f32:	2100      	movs	r1, #0
 8000f34:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <eepromDataFillWithEmpty+0x40>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	dbf0      	blt.n	8000f28 <eepromDataFillWithEmpty+0xc>
	}
}
 8000f46:	bf00      	nop
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	2000006c 	.word	0x2000006c
 8000f58:	20000fec 	.word	0x20000fec
 8000f5c:	20000094 	.word	0x20000094

08000f60 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000f66:	463b      	mov	r3, r7
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000f72:	4b50      	ldr	r3, [pc, #320]	@ (80010b4 <i2cTest+0x154>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b4e      	ldr	r3, [pc, #312]	@ (80010b4 <i2cTest+0x154>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f022 0201 	bic.w	r2, r2, #1
 8000f80:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000f82:	484c      	ldr	r0, [pc, #304]	@ (80010b4 <i2cTest+0x154>)
 8000f84:	f009 fe1c 	bl	800abc0 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f88:	23c0      	movs	r3, #192	@ 0xc0
 8000f8a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000f8c:	2311      	movs	r3, #17
 8000f8e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000f94:	2303      	movs	r3, #3
 8000f96:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4846      	ldr	r0, [pc, #280]	@ (80010b8 <i2cTest+0x158>)
 8000f9e:	f009 fa23 	bl	800a3e8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2140      	movs	r1, #64	@ 0x40
 8000fa6:	4844      	ldr	r0, [pc, #272]	@ (80010b8 <i2cTest+0x158>)
 8000fa8:	f009 fc95 	bl	800a8d6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2180      	movs	r1, #128	@ 0x80
 8000fb0:	4841      	ldr	r0, [pc, #260]	@ (80010b8 <i2cTest+0x158>)
 8000fb2:	f009 fc90 	bl	800a8d6 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000fb6:	200a      	movs	r0, #10
 8000fb8:	f008 fe9a 	bl	8009cf0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000fbc:	bf00      	nop
 8000fbe:	2140      	movs	r1, #64	@ 0x40
 8000fc0:	483d      	ldr	r0, [pc, #244]	@ (80010b8 <i2cTest+0x158>)
 8000fc2:	f009 fc71 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d006      	beq.n	8000fda <i2cTest+0x7a>
 8000fcc:	2180      	movs	r1, #128	@ 0x80
 8000fce:	483a      	ldr	r0, [pc, #232]	@ (80010b8 <i2cTest+0x158>)
 8000fd0:	f009 fc6a 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d1f1      	bne.n	8000fbe <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2180      	movs	r1, #128	@ 0x80
 8000fde:	4836      	ldr	r0, [pc, #216]	@ (80010b8 <i2cTest+0x158>)
 8000fe0:	f009 fc79 	bl	800a8d6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000fe4:	200a      	movs	r0, #10
 8000fe6:	f008 fe83 	bl	8009cf0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000fea:	bf00      	nop
 8000fec:	2180      	movs	r1, #128	@ 0x80
 8000fee:	4832      	ldr	r0, [pc, #200]	@ (80010b8 <i2cTest+0x158>)
 8000ff0:	f009 fc5a 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d0f8      	beq.n	8000fec <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2140      	movs	r1, #64	@ 0x40
 8000ffe:	482e      	ldr	r0, [pc, #184]	@ (80010b8 <i2cTest+0x158>)
 8001000:	f009 fc69 	bl	800a8d6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001004:	200a      	movs	r0, #10
 8001006:	f008 fe73 	bl	8009cf0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 800100a:	bf00      	nop
 800100c:	2140      	movs	r1, #64	@ 0x40
 800100e:	482a      	ldr	r0, [pc, #168]	@ (80010b8 <i2cTest+0x158>)
 8001010:	f009 fc4a 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8001014:	4603      	mov	r3, r0
 8001016:	2b01      	cmp	r3, #1
 8001018:	d0f8      	beq.n	800100c <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800101a:	2201      	movs	r2, #1
 800101c:	2140      	movs	r1, #64	@ 0x40
 800101e:	4826      	ldr	r0, [pc, #152]	@ (80010b8 <i2cTest+0x158>)
 8001020:	f009 fc59 	bl	800a8d6 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001024:	200a      	movs	r0, #10
 8001026:	f008 fe63 	bl	8009cf0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 800102a:	bf00      	nop
 800102c:	2140      	movs	r1, #64	@ 0x40
 800102e:	4822      	ldr	r0, [pc, #136]	@ (80010b8 <i2cTest+0x158>)
 8001030:	f009 fc3a 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8001034:	4603      	mov	r3, r0
 8001036:	2b01      	cmp	r3, #1
 8001038:	d1f8      	bne.n	800102c <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800103a:	2201      	movs	r2, #1
 800103c:	2180      	movs	r1, #128	@ 0x80
 800103e:	481e      	ldr	r0, [pc, #120]	@ (80010b8 <i2cTest+0x158>)
 8001040:	f009 fc49 	bl	800a8d6 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001044:	200a      	movs	r0, #10
 8001046:	f008 fe53 	bl	8009cf0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800104a:	bf00      	nop
 800104c:	2180      	movs	r1, #128	@ 0x80
 800104e:	481a      	ldr	r0, [pc, #104]	@ (80010b8 <i2cTest+0x158>)
 8001050:	f009 fc2a 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	2b01      	cmp	r3, #1
 8001058:	d1f8      	bne.n	800104c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800105a:	23c0      	movs	r3, #192	@ 0xc0
 800105c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 800105e:	2312      	movs	r3, #18
 8001060:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8001062:	2301      	movs	r3, #1
 8001064:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	4812      	ldr	r0, [pc, #72]	@ (80010b8 <i2cTest+0x158>)
 8001070:	f009 f9ba 	bl	800a3e8 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8001074:	4b0f      	ldr	r3, [pc, #60]	@ (80010b4 <i2cTest+0x154>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <i2cTest+0x154>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001082:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8001084:	4b0b      	ldr	r3, [pc, #44]	@ (80010b4 <i2cTest+0x154>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4b0a      	ldr	r3, [pc, #40]	@ (80010b4 <i2cTest+0x154>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001092:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8001094:	4b07      	ldr	r3, [pc, #28]	@ (80010b4 <i2cTest+0x154>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4b06      	ldr	r3, [pc, #24]	@ (80010b4 <i2cTest+0x154>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 0201 	orr.w	r2, r2, #1
 80010a2:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80010a4:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <i2cTest+0x154>)
 80010a6:	f009 fc47 	bl	800a938 <HAL_I2C_Init>
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20001e44 	.word	0x20001e44
 80010b8:	40010c00 	.word	0x40010c00

080010bc <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 80010c6:	20c8      	movs	r0, #200	@ 0xc8
 80010c8:	f008 fe12 	bl	8009cf0 <HAL_Delay>
	lcd_clear();
 80010cc:	f008 f8c4 	bl	8009258 <lcd_clear>
	if(type == 1 && page == 0) {
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d13e      	bne.n	8001154 <printTemplate+0x98>
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d13b      	bne.n	8001154 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 80010dc:	4a9a      	ldr	r2, [pc, #616]	@ (8001348 <printTemplate+0x28c>)
 80010de:	2101      	movs	r1, #1
 80010e0:	2001      	movs	r0, #1
 80010e2:	f008 f88d 	bl	8009200 <lcd_print>
		lcd_print(2, 3, "0");
 80010e6:	4a99      	ldr	r2, [pc, #612]	@ (800134c <printTemplate+0x290>)
 80010e8:	2103      	movs	r1, #3
 80010ea:	2002      	movs	r0, #2
 80010ec:	f008 f888 	bl	8009200 <lcd_print>
		lcd_print(2, 4, "1");
 80010f0:	4a97      	ldr	r2, [pc, #604]	@ (8001350 <printTemplate+0x294>)
 80010f2:	2104      	movs	r1, #4
 80010f4:	2002      	movs	r0, #2
 80010f6:	f008 f883 	bl	8009200 <lcd_print>
		lcd_print(2, 5, "2");
 80010fa:	4a96      	ldr	r2, [pc, #600]	@ (8001354 <printTemplate+0x298>)
 80010fc:	2105      	movs	r1, #5
 80010fe:	2002      	movs	r0, #2
 8001100:	f008 f87e 	bl	8009200 <lcd_print>
		lcd_print(2, 6, "3");
 8001104:	4a94      	ldr	r2, [pc, #592]	@ (8001358 <printTemplate+0x29c>)
 8001106:	2106      	movs	r1, #6
 8001108:	2002      	movs	r0, #2
 800110a:	f008 f879 	bl	8009200 <lcd_print>
		lcd_print(2, 7, "4");
 800110e:	4a93      	ldr	r2, [pc, #588]	@ (800135c <printTemplate+0x2a0>)
 8001110:	2107      	movs	r1, #7
 8001112:	2002      	movs	r0, #2
 8001114:	f008 f874 	bl	8009200 <lcd_print>
		lcd_print(2, 10, "5");
 8001118:	4a91      	ldr	r2, [pc, #580]	@ (8001360 <printTemplate+0x2a4>)
 800111a:	210a      	movs	r1, #10
 800111c:	2002      	movs	r0, #2
 800111e:	f008 f86f 	bl	8009200 <lcd_print>
		lcd_print(2, 11, "6");
 8001122:	4a90      	ldr	r2, [pc, #576]	@ (8001364 <printTemplate+0x2a8>)
 8001124:	210b      	movs	r1, #11
 8001126:	2002      	movs	r0, #2
 8001128:	f008 f86a 	bl	8009200 <lcd_print>
		lcd_print(2, 12, "7");
 800112c:	4a8e      	ldr	r2, [pc, #568]	@ (8001368 <printTemplate+0x2ac>)
 800112e:	210c      	movs	r1, #12
 8001130:	2002      	movs	r0, #2
 8001132:	f008 f865 	bl	8009200 <lcd_print>
		lcd_print(2, 13, "8");
 8001136:	4a8d      	ldr	r2, [pc, #564]	@ (800136c <printTemplate+0x2b0>)
 8001138:	210d      	movs	r1, #13
 800113a:	2002      	movs	r0, #2
 800113c:	f008 f860 	bl	8009200 <lcd_print>
		lcd_print(2, 14, "9");
 8001140:	4a8b      	ldr	r2, [pc, #556]	@ (8001370 <printTemplate+0x2b4>)
 8001142:	210e      	movs	r1, #14
 8001144:	2002      	movs	r0, #2
 8001146:	f008 f85b 	bl	8009200 <lcd_print>
		lcd_gotoxy(2, 3);
 800114a:	2103      	movs	r1, #3
 800114c:	2002      	movs	r0, #2
 800114e:	f008 f838 	bl	80091c2 <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 8001152:	e0f5      	b.n	8001340 <printTemplate+0x284>
	} else if(type == 2) {
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d178      	bne.n	800124c <printTemplate+0x190>
		if(page == 1) {
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d114      	bne.n	800118a <printTemplate+0xce>
			lcd_clear();
 8001160:	f008 f87a 	bl	8009258 <lcd_clear>
			HAL_Delay(100);
 8001164:	2064      	movs	r0, #100	@ 0x64
 8001166:	f008 fdc3 	bl	8009cf0 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 800116a:	4a82      	ldr	r2, [pc, #520]	@ (8001374 <printTemplate+0x2b8>)
 800116c:	2101      	movs	r1, #1
 800116e:	2001      	movs	r0, #1
 8001170:	f008 f846 	bl	8009200 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001174:	4a80      	ldr	r2, [pc, #512]	@ (8001378 <printTemplate+0x2bc>)
 8001176:	2107      	movs	r1, #7
 8001178:	2001      	movs	r0, #1
 800117a:	f008 f841 	bl	8009200 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 800117e:	4a7f      	ldr	r2, [pc, #508]	@ (800137c <printTemplate+0x2c0>)
 8001180:	2101      	movs	r1, #1
 8001182:	2002      	movs	r0, #2
 8001184:	f008 f83c 	bl	8009200 <lcd_print>
}
 8001188:	e0da      	b.n	8001340 <printTemplate+0x284>
		} else if(page == 2) {
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d114      	bne.n	80011ba <printTemplate+0xfe>
			lcd_clear();
 8001190:	f008 f862 	bl	8009258 <lcd_clear>
			HAL_Delay(100);
 8001194:	2064      	movs	r0, #100	@ 0x64
 8001196:	f008 fdab 	bl	8009cf0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800119a:	4a79      	ldr	r2, [pc, #484]	@ (8001380 <printTemplate+0x2c4>)
 800119c:	2101      	movs	r1, #1
 800119e:	2001      	movs	r0, #1
 80011a0:	f008 f82e 	bl	8009200 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80011a4:	4a74      	ldr	r2, [pc, #464]	@ (8001378 <printTemplate+0x2bc>)
 80011a6:	2107      	movs	r1, #7
 80011a8:	2001      	movs	r0, #1
 80011aa:	f008 f829 	bl	8009200 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80011ae:	4a75      	ldr	r2, [pc, #468]	@ (8001384 <printTemplate+0x2c8>)
 80011b0:	2101      	movs	r1, #1
 80011b2:	2002      	movs	r0, #2
 80011b4:	f008 f824 	bl	8009200 <lcd_print>
}
 80011b8:	e0c2      	b.n	8001340 <printTemplate+0x284>
		} else if(page == 3) {
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	2b03      	cmp	r3, #3
 80011be:	d114      	bne.n	80011ea <printTemplate+0x12e>
			lcd_clear();
 80011c0:	f008 f84a 	bl	8009258 <lcd_clear>
			HAL_Delay(100);
 80011c4:	2064      	movs	r0, #100	@ 0x64
 80011c6:	f008 fd93 	bl	8009cf0 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 80011ca:	4a6a      	ldr	r2, [pc, #424]	@ (8001374 <printTemplate+0x2b8>)
 80011cc:	2101      	movs	r1, #1
 80011ce:	2001      	movs	r0, #1
 80011d0:	f008 f816 	bl	8009200 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80011d4:	4a68      	ldr	r2, [pc, #416]	@ (8001378 <printTemplate+0x2bc>)
 80011d6:	2107      	movs	r1, #7
 80011d8:	2001      	movs	r0, #1
 80011da:	f008 f811 	bl	8009200 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 80011de:	4a6a      	ldr	r2, [pc, #424]	@ (8001388 <printTemplate+0x2cc>)
 80011e0:	2101      	movs	r1, #1
 80011e2:	2002      	movs	r0, #2
 80011e4:	f008 f80c 	bl	8009200 <lcd_print>
}
 80011e8:	e0aa      	b.n	8001340 <printTemplate+0x284>
		} else if(page == 4) {
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d114      	bne.n	800121a <printTemplate+0x15e>
			lcd_clear();
 80011f0:	f008 f832 	bl	8009258 <lcd_clear>
			HAL_Delay(100);
 80011f4:	2064      	movs	r0, #100	@ 0x64
 80011f6:	f008 fd7b 	bl	8009cf0 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 80011fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001374 <printTemplate+0x2b8>)
 80011fc:	2101      	movs	r1, #1
 80011fe:	2001      	movs	r0, #1
 8001200:	f007 fffe 	bl	8009200 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001204:	4a5c      	ldr	r2, [pc, #368]	@ (8001378 <printTemplate+0x2bc>)
 8001206:	2107      	movs	r1, #7
 8001208:	2001      	movs	r0, #1
 800120a:	f007 fff9 	bl	8009200 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 800120e:	4a5f      	ldr	r2, [pc, #380]	@ (800138c <printTemplate+0x2d0>)
 8001210:	2101      	movs	r1, #1
 8001212:	2002      	movs	r0, #2
 8001214:	f007 fff4 	bl	8009200 <lcd_print>
}
 8001218:	e092      	b.n	8001340 <printTemplate+0x284>
		} else if(page == 5) {
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	2b05      	cmp	r3, #5
 800121e:	f040 808f 	bne.w	8001340 <printTemplate+0x284>
			lcd_clear();
 8001222:	f008 f819 	bl	8009258 <lcd_clear>
			HAL_Delay(100);
 8001226:	2064      	movs	r0, #100	@ 0x64
 8001228:	f008 fd62 	bl	8009cf0 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 800122c:	4a51      	ldr	r2, [pc, #324]	@ (8001374 <printTemplate+0x2b8>)
 800122e:	2101      	movs	r1, #1
 8001230:	2001      	movs	r0, #1
 8001232:	f007 ffe5 	bl	8009200 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001236:	4a50      	ldr	r2, [pc, #320]	@ (8001378 <printTemplate+0x2bc>)
 8001238:	2107      	movs	r1, #7
 800123a:	2001      	movs	r0, #1
 800123c:	f007 ffe0 	bl	8009200 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8001240:	4a53      	ldr	r2, [pc, #332]	@ (8001390 <printTemplate+0x2d4>)
 8001242:	2101      	movs	r1, #1
 8001244:	2002      	movs	r0, #2
 8001246:	f007 ffdb 	bl	8009200 <lcd_print>
}
 800124a:	e079      	b.n	8001340 <printTemplate+0x284>
	} else if(type == 3) {
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b03      	cmp	r3, #3
 8001250:	d176      	bne.n	8001340 <printTemplate+0x284>
		if(page == 1) {
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d114      	bne.n	8001282 <printTemplate+0x1c6>
			lcd_clear();
 8001258:	f007 fffe 	bl	8009258 <lcd_clear>
			HAL_Delay(100);
 800125c:	2064      	movs	r0, #100	@ 0x64
 800125e:	f008 fd47 	bl	8009cf0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001262:	4a4c      	ldr	r2, [pc, #304]	@ (8001394 <printTemplate+0x2d8>)
 8001264:	2101      	movs	r1, #1
 8001266:	2001      	movs	r0, #1
 8001268:	f007 ffca 	bl	8009200 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800126c:	4a4a      	ldr	r2, [pc, #296]	@ (8001398 <printTemplate+0x2dc>)
 800126e:	2107      	movs	r1, #7
 8001270:	2001      	movs	r0, #1
 8001272:	f007 ffc5 	bl	8009200 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8001276:	4a41      	ldr	r2, [pc, #260]	@ (800137c <printTemplate+0x2c0>)
 8001278:	2101      	movs	r1, #1
 800127a:	2002      	movs	r0, #2
 800127c:	f007 ffc0 	bl	8009200 <lcd_print>
}
 8001280:	e05e      	b.n	8001340 <printTemplate+0x284>
		} else if(page == 2) {
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	2b02      	cmp	r3, #2
 8001286:	d114      	bne.n	80012b2 <printTemplate+0x1f6>
			lcd_clear();
 8001288:	f007 ffe6 	bl	8009258 <lcd_clear>
			HAL_Delay(100);
 800128c:	2064      	movs	r0, #100	@ 0x64
 800128e:	f008 fd2f 	bl	8009cf0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001292:	4a40      	ldr	r2, [pc, #256]	@ (8001394 <printTemplate+0x2d8>)
 8001294:	2101      	movs	r1, #1
 8001296:	2001      	movs	r0, #1
 8001298:	f007 ffb2 	bl	8009200 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800129c:	4a3e      	ldr	r2, [pc, #248]	@ (8001398 <printTemplate+0x2dc>)
 800129e:	2107      	movs	r1, #7
 80012a0:	2001      	movs	r0, #1
 80012a2:	f007 ffad 	bl	8009200 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80012a6:	4a37      	ldr	r2, [pc, #220]	@ (8001384 <printTemplate+0x2c8>)
 80012a8:	2101      	movs	r1, #1
 80012aa:	2002      	movs	r0, #2
 80012ac:	f007 ffa8 	bl	8009200 <lcd_print>
}
 80012b0:	e046      	b.n	8001340 <printTemplate+0x284>
		} else if(page == 3) {
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	2b03      	cmp	r3, #3
 80012b6:	d114      	bne.n	80012e2 <printTemplate+0x226>
			lcd_clear();
 80012b8:	f007 ffce 	bl	8009258 <lcd_clear>
			HAL_Delay(100);
 80012bc:	2064      	movs	r0, #100	@ 0x64
 80012be:	f008 fd17 	bl	8009cf0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80012c2:	4a34      	ldr	r2, [pc, #208]	@ (8001394 <printTemplate+0x2d8>)
 80012c4:	2101      	movs	r1, #1
 80012c6:	2001      	movs	r0, #1
 80012c8:	f007 ff9a 	bl	8009200 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80012cc:	4a32      	ldr	r2, [pc, #200]	@ (8001398 <printTemplate+0x2dc>)
 80012ce:	2107      	movs	r1, #7
 80012d0:	2001      	movs	r0, #1
 80012d2:	f007 ff95 	bl	8009200 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 80012d6:	4a2c      	ldr	r2, [pc, #176]	@ (8001388 <printTemplate+0x2cc>)
 80012d8:	2101      	movs	r1, #1
 80012da:	2002      	movs	r0, #2
 80012dc:	f007 ff90 	bl	8009200 <lcd_print>
}
 80012e0:	e02e      	b.n	8001340 <printTemplate+0x284>
		} else if(page == 4) {
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d114      	bne.n	8001312 <printTemplate+0x256>
			lcd_clear();
 80012e8:	f007 ffb6 	bl	8009258 <lcd_clear>
			HAL_Delay(100);
 80012ec:	2064      	movs	r0, #100	@ 0x64
 80012ee:	f008 fcff 	bl	8009cf0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80012f2:	4a28      	ldr	r2, [pc, #160]	@ (8001394 <printTemplate+0x2d8>)
 80012f4:	2101      	movs	r1, #1
 80012f6:	2001      	movs	r0, #1
 80012f8:	f007 ff82 	bl	8009200 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80012fc:	4a26      	ldr	r2, [pc, #152]	@ (8001398 <printTemplate+0x2dc>)
 80012fe:	2107      	movs	r1, #7
 8001300:	2001      	movs	r0, #1
 8001302:	f007 ff7d 	bl	8009200 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8001306:	4a21      	ldr	r2, [pc, #132]	@ (800138c <printTemplate+0x2d0>)
 8001308:	2101      	movs	r1, #1
 800130a:	2002      	movs	r0, #2
 800130c:	f007 ff78 	bl	8009200 <lcd_print>
}
 8001310:	e016      	b.n	8001340 <printTemplate+0x284>
		} else if(page == 5) {
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	2b05      	cmp	r3, #5
 8001316:	d113      	bne.n	8001340 <printTemplate+0x284>
			lcd_clear();
 8001318:	f007 ff9e 	bl	8009258 <lcd_clear>
			HAL_Delay(100);
 800131c:	2064      	movs	r0, #100	@ 0x64
 800131e:	f008 fce7 	bl	8009cf0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001322:	4a1c      	ldr	r2, [pc, #112]	@ (8001394 <printTemplate+0x2d8>)
 8001324:	2101      	movs	r1, #1
 8001326:	2001      	movs	r0, #1
 8001328:	f007 ff6a 	bl	8009200 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800132c:	4a1a      	ldr	r2, [pc, #104]	@ (8001398 <printTemplate+0x2dc>)
 800132e:	2107      	movs	r1, #7
 8001330:	2001      	movs	r0, #1
 8001332:	f007 ff65 	bl	8009200 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8001336:	4a16      	ldr	r2, [pc, #88]	@ (8001390 <printTemplate+0x2d4>)
 8001338:	2101      	movs	r1, #1
 800133a:	2002      	movs	r0, #2
 800133c:	f007 ff60 	bl	8009200 <lcd_print>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	0800ecd0 	.word	0x0800ecd0
 800134c:	0800ecd8 	.word	0x0800ecd8
 8001350:	0800ecdc 	.word	0x0800ecdc
 8001354:	0800ece0 	.word	0x0800ece0
 8001358:	0800ece4 	.word	0x0800ece4
 800135c:	0800ece8 	.word	0x0800ece8
 8001360:	0800ecec 	.word	0x0800ecec
 8001364:	0800ecf0 	.word	0x0800ecf0
 8001368:	0800ecf4 	.word	0x0800ecf4
 800136c:	0800ecf8 	.word	0x0800ecf8
 8001370:	0800ecfc 	.word	0x0800ecfc
 8001374:	0800ed00 	.word	0x0800ed00
 8001378:	20001070 	.word	0x20001070
 800137c:	0800ed14 	.word	0x0800ed14
 8001380:	0800ed28 	.word	0x0800ed28
 8001384:	0800ed30 	.word	0x0800ed30
 8001388:	0800ed44 	.word	0x0800ed44
 800138c:	0800ed58 	.word	0x0800ed58
 8001390:	0800ed6c 	.word	0x0800ed6c
 8001394:	0800ed80 	.word	0x0800ed80
 8001398:	20001080 	.word	0x20001080

0800139c <printCredentials>:
			}
		}
	}
}

void printCredentials(int type) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d10a      	bne.n	80013c0 <printCredentials+0x24>
		//machine id yazdır
		lcd_print(2, 1, machineID);
 80013aa:	4a18      	ldr	r2, [pc, #96]	@ (800140c <printCredentials+0x70>)
 80013ac:	2101      	movs	r1, #1
 80013ae:	2002      	movs	r0, #2
 80013b0:	f007 ff26 	bl	8009200 <lcd_print>
		lcd_print(2, 13, "    ");
 80013b4:	4a16      	ldr	r2, [pc, #88]	@ (8001410 <printCredentials+0x74>)
 80013b6:	210d      	movs	r1, #13
 80013b8:	2002      	movs	r0, #2
 80013ba:	f007 ff21 	bl	8009200 <lcd_print>
		lcd_print(1, 1, "WIFI PASS       ");

		lcd_print(2, 1, "                ");
		lcd_print(2, 1, wifiPass);
	}
}
 80013be:	e021      	b.n	8001404 <printCredentials+0x68>
	} else if(type == 2) {
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d10f      	bne.n	80013e6 <printCredentials+0x4a>
		lcd_print(1, 1, "WIFI SSID       ");
 80013c6:	4a13      	ldr	r2, [pc, #76]	@ (8001414 <printCredentials+0x78>)
 80013c8:	2101      	movs	r1, #1
 80013ca:	2001      	movs	r0, #1
 80013cc:	f007 ff18 	bl	8009200 <lcd_print>
		lcd_print(2, 1, "                ");
 80013d0:	4a11      	ldr	r2, [pc, #68]	@ (8001418 <printCredentials+0x7c>)
 80013d2:	2101      	movs	r1, #1
 80013d4:	2002      	movs	r0, #2
 80013d6:	f007 ff13 	bl	8009200 <lcd_print>
		lcd_print(2, 1, wifiSSID);
 80013da:	4a10      	ldr	r2, [pc, #64]	@ (800141c <printCredentials+0x80>)
 80013dc:	2101      	movs	r1, #1
 80013de:	2002      	movs	r0, #2
 80013e0:	f007 ff0e 	bl	8009200 <lcd_print>
}
 80013e4:	e00e      	b.n	8001404 <printCredentials+0x68>
		lcd_print(1, 1, "WIFI PASS       ");
 80013e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001420 <printCredentials+0x84>)
 80013e8:	2101      	movs	r1, #1
 80013ea:	2001      	movs	r0, #1
 80013ec:	f007 ff08 	bl	8009200 <lcd_print>
		lcd_print(2, 1, "                ");
 80013f0:	4a09      	ldr	r2, [pc, #36]	@ (8001418 <printCredentials+0x7c>)
 80013f2:	2101      	movs	r1, #1
 80013f4:	2002      	movs	r0, #2
 80013f6:	f007 ff03 	bl	8009200 <lcd_print>
		lcd_print(2, 1, wifiPass);
 80013fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <printCredentials+0x88>)
 80013fc:	2101      	movs	r1, #1
 80013fe:	2002      	movs	r0, #2
 8001400:	f007 fefe 	bl	8009200 <lcd_print>
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20001064 	.word	0x20001064
 8001410:	0800ed94 	.word	0x0800ed94
 8001414:	0800ed9c 	.word	0x0800ed9c
 8001418:	0800edb0 	.word	0x0800edb0
 800141c:	20001070 	.word	0x20001070
 8001420:	0800edc4 	.word	0x0800edc4
 8001424:	20001080 	.word	0x20001080

08001428 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800142c:	f3bf 8f4f 	dsb	sy
}
 8001430:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001432:	4b06      	ldr	r3, [pc, #24]	@ (800144c <__NVIC_SystemReset+0x24>)
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800143a:	4904      	ldr	r1, [pc, #16]	@ (800144c <__NVIC_SystemReset+0x24>)
 800143c:	4b04      	ldr	r3, [pc, #16]	@ (8001450 <__NVIC_SystemReset+0x28>)
 800143e:	4313      	orrs	r3, r2
 8001440:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001442:	f3bf 8f4f 	dsb	sy
}
 8001446:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <__NVIC_SystemReset+0x20>
 800144c:	e000ed00 	.word	0xe000ed00
 8001450:	05fa0004 	.word	0x05fa0004

08001454 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800145a:	2101      	movs	r1, #1
 800145c:	488e      	ldr	r0, [pc, #568]	@ (8001698 <menu+0x244>)
 800145e:	f009 fa23 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8001462:	4603      	mov	r3, r0
 8001464:	2b01      	cmp	r3, #1
 8001466:	f040 8099 	bne.w	800159c <menu+0x148>
 800146a:	4b8c      	ldr	r3, [pc, #560]	@ (800169c <menu+0x248>)
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	f083 0301 	eor.w	r3, r3, #1
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	f000 8091 	beq.w	800159c <menu+0x148>
		menuSayac = menuSayac+1;
 800147a:	4b89      	ldr	r3, [pc, #548]	@ (80016a0 <menu+0x24c>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	3301      	adds	r3, #1
 8001480:	b2da      	uxtb	r2, r3
 8001482:	4b87      	ldr	r3, [pc, #540]	@ (80016a0 <menu+0x24c>)
 8001484:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001486:	4b86      	ldr	r3, [pc, #536]	@ (80016a0 <menu+0x24c>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b24      	cmp	r3, #36	@ 0x24
 800148c:	d102      	bne.n	8001494 <menu+0x40>
			menuSayac = 1;
 800148e:	4b84      	ldr	r3, [pc, #528]	@ (80016a0 <menu+0x24c>)
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001494:	4b82      	ldr	r3, [pc, #520]	@ (80016a0 <menu+0x24c>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	2b12      	cmp	r3, #18
 800149a:	d106      	bne.n	80014aa <menu+0x56>
 800149c:	4b81      	ldr	r3, [pc, #516]	@ (80016a4 <menu+0x250>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d102      	bne.n	80014aa <menu+0x56>
			menuSayac = 21;
 80014a4:	4b7e      	ldr	r3, [pc, #504]	@ (80016a0 <menu+0x24c>)
 80014a6:	2215      	movs	r2, #21
 80014a8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80014aa:	4b7d      	ldr	r3, [pc, #500]	@ (80016a0 <menu+0x24c>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b08      	cmp	r3, #8
 80014b0:	d106      	bne.n	80014c0 <menu+0x6c>
 80014b2:	4b7d      	ldr	r3, [pc, #500]	@ (80016a8 <menu+0x254>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <menu+0x6c>
			menuSayac = 16;
 80014ba:	4b79      	ldr	r3, [pc, #484]	@ (80016a0 <menu+0x24c>)
 80014bc:	2210      	movs	r2, #16
 80014be:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80014c0:	4b77      	ldr	r3, [pc, #476]	@ (80016a0 <menu+0x24c>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b0d      	cmp	r3, #13
 80014c6:	d106      	bne.n	80014d6 <menu+0x82>
 80014c8:	4b77      	ldr	r3, [pc, #476]	@ (80016a8 <menu+0x254>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d102      	bne.n	80014d6 <menu+0x82>
			menuSayac = 16;
 80014d0:	4b73      	ldr	r3, [pc, #460]	@ (80016a0 <menu+0x24c>)
 80014d2:	2210      	movs	r2, #16
 80014d4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80014d6:	4b72      	ldr	r3, [pc, #456]	@ (80016a0 <menu+0x24c>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	2b09      	cmp	r3, #9
 80014dc:	d106      	bne.n	80014ec <menu+0x98>
 80014de:	4b72      	ldr	r3, [pc, #456]	@ (80016a8 <menu+0x254>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d102      	bne.n	80014ec <menu+0x98>
			menuSayac = 13;
 80014e6:	4b6e      	ldr	r3, [pc, #440]	@ (80016a0 <menu+0x24c>)
 80014e8:	220d      	movs	r2, #13
 80014ea:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80014ec:	4b6c      	ldr	r3, [pc, #432]	@ (80016a0 <menu+0x24c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b0a      	cmp	r3, #10
 80014f2:	d10a      	bne.n	800150a <menu+0xb6>
 80014f4:	4b6d      	ldr	r3, [pc, #436]	@ (80016ac <menu+0x258>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d003      	beq.n	8001504 <menu+0xb0>
 80014fc:	4b6b      	ldr	r3, [pc, #428]	@ (80016ac <menu+0x258>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b02      	cmp	r3, #2
 8001502:	d102      	bne.n	800150a <menu+0xb6>
			menuSayac = 11;
 8001504:	4b66      	ldr	r3, [pc, #408]	@ (80016a0 <menu+0x24c>)
 8001506:	220b      	movs	r2, #11
 8001508:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800150a:	4b65      	ldr	r3, [pc, #404]	@ (80016a0 <menu+0x24c>)
 800150c:	781b      	ldrb	r3, [r3, #0]
 800150e:	2b0c      	cmp	r3, #12
 8001510:	d10e      	bne.n	8001530 <menu+0xdc>
 8001512:	4b67      	ldr	r3, [pc, #412]	@ (80016b0 <menu+0x25c>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d003      	beq.n	8001522 <menu+0xce>
 800151a:	4b65      	ldr	r3, [pc, #404]	@ (80016b0 <menu+0x25c>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d106      	bne.n	8001530 <menu+0xdc>
 8001522:	4b61      	ldr	r3, [pc, #388]	@ (80016a8 <menu+0x254>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d102      	bne.n	8001530 <menu+0xdc>
			menuSayac = 16;
 800152a:	4b5d      	ldr	r3, [pc, #372]	@ (80016a0 <menu+0x24c>)
 800152c:	2210      	movs	r2, #16
 800152e:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001530:	4b5b      	ldr	r3, [pc, #364]	@ (80016a0 <menu+0x24c>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b0c      	cmp	r3, #12
 8001536:	d10e      	bne.n	8001556 <menu+0x102>
 8001538:	4b5d      	ldr	r3, [pc, #372]	@ (80016b0 <menu+0x25c>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d003      	beq.n	8001548 <menu+0xf4>
 8001540:	4b5b      	ldr	r3, [pc, #364]	@ (80016b0 <menu+0x25c>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b02      	cmp	r3, #2
 8001546:	d106      	bne.n	8001556 <menu+0x102>
 8001548:	4b57      	ldr	r3, [pc, #348]	@ (80016a8 <menu+0x254>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b03      	cmp	r3, #3
 800154e:	d102      	bne.n	8001556 <menu+0x102>
			menuSayac = 13;
 8001550:	4b53      	ldr	r3, [pc, #332]	@ (80016a0 <menu+0x24c>)
 8001552:	220d      	movs	r2, #13
 8001554:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001556:	4b52      	ldr	r3, [pc, #328]	@ (80016a0 <menu+0x24c>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b0f      	cmp	r3, #15
 800155c:	d106      	bne.n	800156c <menu+0x118>
 800155e:	4b55      	ldr	r3, [pc, #340]	@ (80016b4 <menu+0x260>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d102      	bne.n	800156c <menu+0x118>
			menuSayac = 16;
 8001566:	4b4e      	ldr	r3, [pc, #312]	@ (80016a0 <menu+0x24c>)
 8001568:	2210      	movs	r2, #16
 800156a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 800156c:	4b4c      	ldr	r3, [pc, #304]	@ (80016a0 <menu+0x24c>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b18      	cmp	r3, #24
 8001572:	d106      	bne.n	8001582 <menu+0x12e>
 8001574:	4b4b      	ldr	r3, [pc, #300]	@ (80016a4 <menu+0x250>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d102      	bne.n	8001582 <menu+0x12e>
			menuSayac = 26;
 800157c:	4b48      	ldr	r3, [pc, #288]	@ (80016a0 <menu+0x24c>)
 800157e:	221a      	movs	r2, #26
 8001580:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 8001582:	4b47      	ldr	r3, [pc, #284]	@ (80016a0 <menu+0x24c>)
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b21      	cmp	r3, #33	@ 0x21
 8001588:	d106      	bne.n	8001598 <menu+0x144>
 800158a:	4b4b      	ldr	r3, [pc, #300]	@ (80016b8 <menu+0x264>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d102      	bne.n	8001598 <menu+0x144>
			menuSayac = 35;
 8001592:	4b43      	ldr	r3, [pc, #268]	@ (80016a0 <menu+0x24c>)
 8001594:	2223      	movs	r2, #35	@ 0x23
 8001596:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001598:	f002 fca2 	bl	8003ee0 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 800159c:	2108      	movs	r1, #8
 800159e:	4847      	ldr	r0, [pc, #284]	@ (80016bc <menu+0x268>)
 80015a0:	f009 f982 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	f040 8097 	bne.w	80016da <menu+0x286>
 80015ac:	4b3b      	ldr	r3, [pc, #236]	@ (800169c <menu+0x248>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	f083 0301 	eor.w	r3, r3, #1
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 808f 	beq.w	80016da <menu+0x286>
		if (menuSayac <= 1) {
 80015bc:	4b38      	ldr	r3, [pc, #224]	@ (80016a0 <menu+0x24c>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d802      	bhi.n	80015ca <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80015c4:	4b36      	ldr	r3, [pc, #216]	@ (80016a0 <menu+0x24c>)
 80015c6:	2224      	movs	r2, #36	@ 0x24
 80015c8:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80015ca:	4b35      	ldr	r3, [pc, #212]	@ (80016a0 <menu+0x24c>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4b33      	ldr	r3, [pc, #204]	@ (80016a0 <menu+0x24c>)
 80015d4:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80015d6:	4b32      	ldr	r3, [pc, #200]	@ (80016a0 <menu+0x24c>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b14      	cmp	r3, #20
 80015dc:	d106      	bne.n	80015ec <menu+0x198>
 80015de:	4b31      	ldr	r3, [pc, #196]	@ (80016a4 <menu+0x250>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d102      	bne.n	80015ec <menu+0x198>
			menuSayac = 17;
 80015e6:	4b2e      	ldr	r3, [pc, #184]	@ (80016a0 <menu+0x24c>)
 80015e8:	2211      	movs	r2, #17
 80015ea:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80015ec:	4b2c      	ldr	r3, [pc, #176]	@ (80016a0 <menu+0x24c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	d106      	bne.n	8001602 <menu+0x1ae>
 80015f4:	4b2c      	ldr	r3, [pc, #176]	@ (80016a8 <menu+0x254>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <menu+0x1ae>
			menuSayac = 7;
 80015fc:	4b28      	ldr	r3, [pc, #160]	@ (80016a0 <menu+0x24c>)
 80015fe:	2207      	movs	r2, #7
 8001600:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001602:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <menu+0x24c>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b0f      	cmp	r3, #15
 8001608:	d106      	bne.n	8001618 <menu+0x1c4>
 800160a:	4b27      	ldr	r3, [pc, #156]	@ (80016a8 <menu+0x254>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d102      	bne.n	8001618 <menu+0x1c4>
			menuSayac = 12;
 8001612:	4b23      	ldr	r3, [pc, #140]	@ (80016a0 <menu+0x24c>)
 8001614:	220c      	movs	r2, #12
 8001616:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001618:	4b21      	ldr	r3, [pc, #132]	@ (80016a0 <menu+0x24c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b0c      	cmp	r3, #12
 800161e:	d106      	bne.n	800162e <menu+0x1da>
 8001620:	4b21      	ldr	r3, [pc, #132]	@ (80016a8 <menu+0x254>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d102      	bne.n	800162e <menu+0x1da>
			menuSayac = 8;
 8001628:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <menu+0x24c>)
 800162a:	2208      	movs	r2, #8
 800162c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800162e:	4b1c      	ldr	r3, [pc, #112]	@ (80016a0 <menu+0x24c>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b0a      	cmp	r3, #10
 8001634:	d10a      	bne.n	800164c <menu+0x1f8>
 8001636:	4b1d      	ldr	r3, [pc, #116]	@ (80016ac <menu+0x258>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d003      	beq.n	8001646 <menu+0x1f2>
 800163e:	4b1b      	ldr	r3, [pc, #108]	@ (80016ac <menu+0x258>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d102      	bne.n	800164c <menu+0x1f8>
			menuSayac = 9;
 8001646:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <menu+0x24c>)
 8001648:	2209      	movs	r2, #9
 800164a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800164c:	4b14      	ldr	r3, [pc, #80]	@ (80016a0 <menu+0x24c>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b0c      	cmp	r3, #12
 8001652:	d10a      	bne.n	800166a <menu+0x216>
 8001654:	4b16      	ldr	r3, [pc, #88]	@ (80016b0 <menu+0x25c>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d003      	beq.n	8001664 <menu+0x210>
 800165c:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <menu+0x25c>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d102      	bne.n	800166a <menu+0x216>
			menuSayac = 11;
 8001664:	4b0e      	ldr	r3, [pc, #56]	@ (80016a0 <menu+0x24c>)
 8001666:	220b      	movs	r2, #11
 8001668:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800166a:	4b0d      	ldr	r3, [pc, #52]	@ (80016a0 <menu+0x24c>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b0f      	cmp	r3, #15
 8001670:	d106      	bne.n	8001680 <menu+0x22c>
 8001672:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <menu+0x260>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d102      	bne.n	8001680 <menu+0x22c>
			menuSayac = 14;
 800167a:	4b09      	ldr	r3, [pc, #36]	@ (80016a0 <menu+0x24c>)
 800167c:	220e      	movs	r2, #14
 800167e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001680:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <menu+0x24c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b19      	cmp	r3, #25
 8001686:	d11b      	bne.n	80016c0 <menu+0x26c>
 8001688:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <menu+0x250>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d117      	bne.n	80016c0 <menu+0x26c>
			menuSayac = 23;
 8001690:	4b03      	ldr	r3, [pc, #12]	@ (80016a0 <menu+0x24c>)
 8001692:	2217      	movs	r2, #23
 8001694:	701a      	strb	r2, [r3, #0]
 8001696:	e013      	b.n	80016c0 <menu+0x26c>
 8001698:	40010800 	.word	0x40010800
 800169c:	200016ef 	.word	0x200016ef
 80016a0:	200016c0 	.word	0x200016c0
 80016a4:	200016cf 	.word	0x200016cf
 80016a8:	200016c8 	.word	0x200016c8
 80016ac:	200016c9 	.word	0x200016c9
 80016b0:	200016ca 	.word	0x200016ca
 80016b4:	200016cb 	.word	0x200016cb
 80016b8:	200016eb 	.word	0x200016eb
 80016bc:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 80016c0:	4bb0      	ldr	r3, [pc, #704]	@ (8001984 <menu+0x530>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b22      	cmp	r3, #34	@ 0x22
 80016c6:	d106      	bne.n	80016d6 <menu+0x282>
 80016c8:	4baf      	ldr	r3, [pc, #700]	@ (8001988 <menu+0x534>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <menu+0x282>
			menuSayac = 32;
 80016d0:	4bac      	ldr	r3, [pc, #688]	@ (8001984 <menu+0x530>)
 80016d2:	2220      	movs	r2, #32
 80016d4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80016d6:	f002 fc03 	bl	8003ee0 <bekle>
	}

	if (menuSayac == 0) {
 80016da:	4baa      	ldr	r3, [pc, #680]	@ (8001984 <menu+0x530>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d109      	bne.n	80016f6 <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 80016e2:	4aaa      	ldr	r2, [pc, #680]	@ (800198c <menu+0x538>)
 80016e4:	2101      	movs	r1, #1
 80016e6:	2001      	movs	r0, #1
 80016e8:	f007 fd8a 	bl	8009200 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 80016ec:	4aa8      	ldr	r2, [pc, #672]	@ (8001990 <menu+0x53c>)
 80016ee:	2101      	movs	r1, #1
 80016f0:	2002      	movs	r0, #2
 80016f2:	f007 fd85 	bl	8009200 <lcd_print>
	}

	if (menuSayac == 1) {
 80016f6:	4ba3      	ldr	r3, [pc, #652]	@ (8001984 <menu+0x530>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	f040 81f4 	bne.w	8001ae8 <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 8001700:	4aa4      	ldr	r2, [pc, #656]	@ (8001994 <menu+0x540>)
 8001702:	2101      	movs	r1, #1
 8001704:	2001      	movs	r0, #1
 8001706:	f007 fd7b 	bl	8009200 <lcd_print>

		if(hataGostermeSirasi == 0) {
 800170a:	4ba3      	ldr	r3, [pc, #652]	@ (8001998 <menu+0x544>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d115      	bne.n	800173e <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 8001712:	4aa2      	ldr	r2, [pc, #648]	@ (800199c <menu+0x548>)
 8001714:	2101      	movs	r1, #1
 8001716:	2002      	movs	r0, #2
 8001718:	f007 fd72 	bl	8009200 <lcd_print>
			lcd_print(2, 15, "   ");
 800171c:	4aa0      	ldr	r2, [pc, #640]	@ (80019a0 <menu+0x54c>)
 800171e:	210f      	movs	r1, #15
 8001720:	2002      	movs	r0, #2
 8001722:	f007 fd6d 	bl	8009200 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001726:	4b9f      	ldr	r3, [pc, #636]	@ (80019a4 <menu+0x550>)
 8001728:	781b      	ldrb	r3, [r3, #0]
 800172a:	220a      	movs	r2, #10
 800172c:	499e      	ldr	r1, [pc, #632]	@ (80019a8 <menu+0x554>)
 800172e:	4618      	mov	r0, r3
 8001730:	f00c fc32 	bl	800df98 <itoa>
			lcd_print(2, 14, snum);
 8001734:	4a9c      	ldr	r2, [pc, #624]	@ (80019a8 <menu+0x554>)
 8001736:	210e      	movs	r1, #14
 8001738:	2002      	movs	r0, #2
 800173a:	f007 fd61 	bl	8009200 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 800173e:	4b96      	ldr	r3, [pc, #600]	@ (8001998 <menu+0x544>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d115      	bne.n	8001772 <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 8001746:	4a99      	ldr	r2, [pc, #612]	@ (80019ac <menu+0x558>)
 8001748:	2101      	movs	r1, #1
 800174a:	2002      	movs	r0, #2
 800174c:	f007 fd58 	bl	8009200 <lcd_print>
			lcd_print(2, 15, "  ");
 8001750:	4a97      	ldr	r2, [pc, #604]	@ (80019b0 <menu+0x55c>)
 8001752:	210f      	movs	r1, #15
 8001754:	2002      	movs	r0, #2
 8001756:	f007 fd53 	bl	8009200 <lcd_print>
			itoa(hataKayit2, snum, 10);
 800175a:	4b96      	ldr	r3, [pc, #600]	@ (80019b4 <menu+0x560>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	220a      	movs	r2, #10
 8001760:	4991      	ldr	r1, [pc, #580]	@ (80019a8 <menu+0x554>)
 8001762:	4618      	mov	r0, r3
 8001764:	f00c fc18 	bl	800df98 <itoa>
			lcd_print(2, 14, snum);
 8001768:	4a8f      	ldr	r2, [pc, #572]	@ (80019a8 <menu+0x554>)
 800176a:	210e      	movs	r1, #14
 800176c:	2002      	movs	r0, #2
 800176e:	f007 fd47 	bl	8009200 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001772:	4b89      	ldr	r3, [pc, #548]	@ (8001998 <menu+0x544>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d115      	bne.n	80017a6 <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 800177a:	4a8f      	ldr	r2, [pc, #572]	@ (80019b8 <menu+0x564>)
 800177c:	2101      	movs	r1, #1
 800177e:	2002      	movs	r0, #2
 8001780:	f007 fd3e 	bl	8009200 <lcd_print>
			lcd_print(2, 15, "  ");
 8001784:	4a8a      	ldr	r2, [pc, #552]	@ (80019b0 <menu+0x55c>)
 8001786:	210f      	movs	r1, #15
 8001788:	2002      	movs	r0, #2
 800178a:	f007 fd39 	bl	8009200 <lcd_print>
			itoa(hataKayit3, snum, 10);
 800178e:	4b8b      	ldr	r3, [pc, #556]	@ (80019bc <menu+0x568>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	220a      	movs	r2, #10
 8001794:	4984      	ldr	r1, [pc, #528]	@ (80019a8 <menu+0x554>)
 8001796:	4618      	mov	r0, r3
 8001798:	f00c fbfe 	bl	800df98 <itoa>
			lcd_print(2, 14, snum);
 800179c:	4a82      	ldr	r2, [pc, #520]	@ (80019a8 <menu+0x554>)
 800179e:	210e      	movs	r1, #14
 80017a0:	2002      	movs	r0, #2
 80017a2:	f007 fd2d 	bl	8009200 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80017a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001998 <menu+0x544>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	d115      	bne.n	80017da <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 80017ae:	4a84      	ldr	r2, [pc, #528]	@ (80019c0 <menu+0x56c>)
 80017b0:	2101      	movs	r1, #1
 80017b2:	2002      	movs	r0, #2
 80017b4:	f007 fd24 	bl	8009200 <lcd_print>
			lcd_print(2, 15, "  ");
 80017b8:	4a7d      	ldr	r2, [pc, #500]	@ (80019b0 <menu+0x55c>)
 80017ba:	210f      	movs	r1, #15
 80017bc:	2002      	movs	r0, #2
 80017be:	f007 fd1f 	bl	8009200 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80017c2:	4b80      	ldr	r3, [pc, #512]	@ (80019c4 <menu+0x570>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	220a      	movs	r2, #10
 80017c8:	4977      	ldr	r1, [pc, #476]	@ (80019a8 <menu+0x554>)
 80017ca:	4618      	mov	r0, r3
 80017cc:	f00c fbe4 	bl	800df98 <itoa>
			lcd_print(2, 14, snum);
 80017d0:	4a75      	ldr	r2, [pc, #468]	@ (80019a8 <menu+0x554>)
 80017d2:	210e      	movs	r1, #14
 80017d4:	2002      	movs	r0, #2
 80017d6:	f007 fd13 	bl	8009200 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80017da:	4b6f      	ldr	r3, [pc, #444]	@ (8001998 <menu+0x544>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d115      	bne.n	800180e <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 80017e2:	4a79      	ldr	r2, [pc, #484]	@ (80019c8 <menu+0x574>)
 80017e4:	2101      	movs	r1, #1
 80017e6:	2002      	movs	r0, #2
 80017e8:	f007 fd0a 	bl	8009200 <lcd_print>
			lcd_print(2, 15, "  ");
 80017ec:	4a70      	ldr	r2, [pc, #448]	@ (80019b0 <menu+0x55c>)
 80017ee:	210f      	movs	r1, #15
 80017f0:	2002      	movs	r0, #2
 80017f2:	f007 fd05 	bl	8009200 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80017f6:	4b75      	ldr	r3, [pc, #468]	@ (80019cc <menu+0x578>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	220a      	movs	r2, #10
 80017fc:	496a      	ldr	r1, [pc, #424]	@ (80019a8 <menu+0x554>)
 80017fe:	4618      	mov	r0, r3
 8001800:	f00c fbca 	bl	800df98 <itoa>
			lcd_print(2, 14, snum);
 8001804:	4a68      	ldr	r2, [pc, #416]	@ (80019a8 <menu+0x554>)
 8001806:	210e      	movs	r1, #14
 8001808:	2002      	movs	r0, #2
 800180a:	f007 fcf9 	bl	8009200 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 800180e:	4b62      	ldr	r3, [pc, #392]	@ (8001998 <menu+0x544>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b05      	cmp	r3, #5
 8001814:	d115      	bne.n	8001842 <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 8001816:	4a6e      	ldr	r2, [pc, #440]	@ (80019d0 <menu+0x57c>)
 8001818:	2101      	movs	r1, #1
 800181a:	2002      	movs	r0, #2
 800181c:	f007 fcf0 	bl	8009200 <lcd_print>
			lcd_print(2, 15, "  ");
 8001820:	4a63      	ldr	r2, [pc, #396]	@ (80019b0 <menu+0x55c>)
 8001822:	210f      	movs	r1, #15
 8001824:	2002      	movs	r0, #2
 8001826:	f007 fceb 	bl	8009200 <lcd_print>
			itoa(hataKayit6, snum, 10);
 800182a:	4b6a      	ldr	r3, [pc, #424]	@ (80019d4 <menu+0x580>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	220a      	movs	r2, #10
 8001830:	495d      	ldr	r1, [pc, #372]	@ (80019a8 <menu+0x554>)
 8001832:	4618      	mov	r0, r3
 8001834:	f00c fbb0 	bl	800df98 <itoa>
			lcd_print(2, 14, snum);
 8001838:	4a5b      	ldr	r2, [pc, #364]	@ (80019a8 <menu+0x554>)
 800183a:	210e      	movs	r1, #14
 800183c:	2002      	movs	r0, #2
 800183e:	f007 fcdf 	bl	8009200 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001842:	4b55      	ldr	r3, [pc, #340]	@ (8001998 <menu+0x544>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b06      	cmp	r3, #6
 8001848:	d115      	bne.n	8001876 <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 800184a:	4a63      	ldr	r2, [pc, #396]	@ (80019d8 <menu+0x584>)
 800184c:	2101      	movs	r1, #1
 800184e:	2002      	movs	r0, #2
 8001850:	f007 fcd6 	bl	8009200 <lcd_print>
			lcd_print(2, 15, "  ");
 8001854:	4a56      	ldr	r2, [pc, #344]	@ (80019b0 <menu+0x55c>)
 8001856:	210f      	movs	r1, #15
 8001858:	2002      	movs	r0, #2
 800185a:	f007 fcd1 	bl	8009200 <lcd_print>
			itoa(hataKayit7, snum, 10);
 800185e:	4b5f      	ldr	r3, [pc, #380]	@ (80019dc <menu+0x588>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	220a      	movs	r2, #10
 8001864:	4950      	ldr	r1, [pc, #320]	@ (80019a8 <menu+0x554>)
 8001866:	4618      	mov	r0, r3
 8001868:	f00c fb96 	bl	800df98 <itoa>
			lcd_print(2, 14, snum);
 800186c:	4a4e      	ldr	r2, [pc, #312]	@ (80019a8 <menu+0x554>)
 800186e:	210e      	movs	r1, #14
 8001870:	2002      	movs	r0, #2
 8001872:	f007 fcc5 	bl	8009200 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001876:	4b48      	ldr	r3, [pc, #288]	@ (8001998 <menu+0x544>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b07      	cmp	r3, #7
 800187c:	d115      	bne.n	80018aa <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 800187e:	4a58      	ldr	r2, [pc, #352]	@ (80019e0 <menu+0x58c>)
 8001880:	2101      	movs	r1, #1
 8001882:	2002      	movs	r0, #2
 8001884:	f007 fcbc 	bl	8009200 <lcd_print>
			lcd_print(2, 15, "  ");
 8001888:	4a49      	ldr	r2, [pc, #292]	@ (80019b0 <menu+0x55c>)
 800188a:	210f      	movs	r1, #15
 800188c:	2002      	movs	r0, #2
 800188e:	f007 fcb7 	bl	8009200 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001892:	4b54      	ldr	r3, [pc, #336]	@ (80019e4 <menu+0x590>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	220a      	movs	r2, #10
 8001898:	4943      	ldr	r1, [pc, #268]	@ (80019a8 <menu+0x554>)
 800189a:	4618      	mov	r0, r3
 800189c:	f00c fb7c 	bl	800df98 <itoa>
			lcd_print(2, 14, snum);
 80018a0:	4a41      	ldr	r2, [pc, #260]	@ (80019a8 <menu+0x554>)
 80018a2:	210e      	movs	r1, #14
 80018a4:	2002      	movs	r0, #2
 80018a6:	f007 fcab 	bl	8009200 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80018aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001998 <menu+0x544>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d115      	bne.n	80018de <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 80018b2:	4a4d      	ldr	r2, [pc, #308]	@ (80019e8 <menu+0x594>)
 80018b4:	2101      	movs	r1, #1
 80018b6:	2002      	movs	r0, #2
 80018b8:	f007 fca2 	bl	8009200 <lcd_print>
			lcd_print(2, 15, "  ");
 80018bc:	4a3c      	ldr	r2, [pc, #240]	@ (80019b0 <menu+0x55c>)
 80018be:	210f      	movs	r1, #15
 80018c0:	2002      	movs	r0, #2
 80018c2:	f007 fc9d 	bl	8009200 <lcd_print>
			itoa(hataKayit9, snum, 10);
 80018c6:	4b49      	ldr	r3, [pc, #292]	@ (80019ec <menu+0x598>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	220a      	movs	r2, #10
 80018cc:	4936      	ldr	r1, [pc, #216]	@ (80019a8 <menu+0x554>)
 80018ce:	4618      	mov	r0, r3
 80018d0:	f00c fb62 	bl	800df98 <itoa>
			lcd_print(2, 14, snum);
 80018d4:	4a34      	ldr	r2, [pc, #208]	@ (80019a8 <menu+0x554>)
 80018d6:	210e      	movs	r1, #14
 80018d8:	2002      	movs	r0, #2
 80018da:	f007 fc91 	bl	8009200 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80018de:	4b2e      	ldr	r3, [pc, #184]	@ (8001998 <menu+0x544>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b09      	cmp	r3, #9
 80018e4:	d115      	bne.n	8001912 <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 80018e6:	4a42      	ldr	r2, [pc, #264]	@ (80019f0 <menu+0x59c>)
 80018e8:	2101      	movs	r1, #1
 80018ea:	2002      	movs	r0, #2
 80018ec:	f007 fc88 	bl	8009200 <lcd_print>
			lcd_print(2, 16, " ");
 80018f0:	4a40      	ldr	r2, [pc, #256]	@ (80019f4 <menu+0x5a0>)
 80018f2:	2110      	movs	r1, #16
 80018f4:	2002      	movs	r0, #2
 80018f6:	f007 fc83 	bl	8009200 <lcd_print>
			itoa(hataKayit10, snum, 10);
 80018fa:	4b3f      	ldr	r3, [pc, #252]	@ (80019f8 <menu+0x5a4>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	220a      	movs	r2, #10
 8001900:	4929      	ldr	r1, [pc, #164]	@ (80019a8 <menu+0x554>)
 8001902:	4618      	mov	r0, r3
 8001904:	f00c fb48 	bl	800df98 <itoa>
			lcd_print(2, 15, snum);
 8001908:	4a27      	ldr	r2, [pc, #156]	@ (80019a8 <menu+0x554>)
 800190a:	210f      	movs	r1, #15
 800190c:	2002      	movs	r0, #2
 800190e:	f007 fc77 	bl	8009200 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001912:	4b21      	ldr	r3, [pc, #132]	@ (8001998 <menu+0x544>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b0a      	cmp	r3, #10
 8001918:	d104      	bne.n	8001924 <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 800191a:	4a38      	ldr	r2, [pc, #224]	@ (80019fc <menu+0x5a8>)
 800191c:	2101      	movs	r1, #1
 800191e:	2002      	movs	r0, #2
 8001920:	f007 fc6e 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001924:	2102      	movs	r1, #2
 8001926:	4836      	ldr	r0, [pc, #216]	@ (8001a00 <menu+0x5ac>)
 8001928:	f008 ffbe 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800192c:	4603      	mov	r3, r0
 800192e:	2b01      	cmp	r3, #1
 8001930:	d119      	bne.n	8001966 <menu+0x512>
 8001932:	4b34      	ldr	r3, [pc, #208]	@ (8001a04 <menu+0x5b0>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	f083 0301 	eor.w	r3, r3, #1
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d012      	beq.n	8001966 <menu+0x512>
 8001940:	4b31      	ldr	r3, [pc, #196]	@ (8001a08 <menu+0x5b4>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d10e      	bne.n	8001966 <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001948:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <menu+0x544>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	3301      	adds	r3, #1
 800194e:	b2da      	uxtb	r2, r3
 8001950:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <menu+0x544>)
 8001952:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001954:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <menu+0x544>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b0a      	cmp	r3, #10
 800195a:	d902      	bls.n	8001962 <menu+0x50e>
				hataGostermeSirasi = 0;
 800195c:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <menu+0x544>)
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001962:	f002 fabd 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001966:	2104      	movs	r1, #4
 8001968:	4825      	ldr	r0, [pc, #148]	@ (8001a00 <menu+0x5ac>)
 800196a:	f008 ff9d 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800196e:	4603      	mov	r3, r0
 8001970:	2b01      	cmp	r3, #1
 8001972:	d15e      	bne.n	8001a32 <menu+0x5de>
 8001974:	4b23      	ldr	r3, [pc, #140]	@ (8001a04 <menu+0x5b0>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	f083 0301 	eor.w	r3, r3, #1
 800197c:	b2db      	uxtb	r3, r3
 800197e:	2b00      	cmp	r3, #0
 8001980:	d057      	beq.n	8001a32 <menu+0x5de>
 8001982:	e043      	b.n	8001a0c <menu+0x5b8>
 8001984:	200016c0 	.word	0x200016c0
 8001988:	200016eb 	.word	0x200016eb
 800198c:	20001728 	.word	0x20001728
 8001990:	2000173c 	.word	0x2000173c
 8001994:	20001750 	.word	0x20001750
 8001998:	200016c2 	.word	0x200016c2
 800199c:	20001764 	.word	0x20001764
 80019a0:	0800edd8 	.word	0x0800edd8
 80019a4:	200016e1 	.word	0x200016e1
 80019a8:	2000105c 	.word	0x2000105c
 80019ac:	20001778 	.word	0x20001778
 80019b0:	0800eddc 	.word	0x0800eddc
 80019b4:	200016e2 	.word	0x200016e2
 80019b8:	2000178c 	.word	0x2000178c
 80019bc:	200016e3 	.word	0x200016e3
 80019c0:	200017a0 	.word	0x200017a0
 80019c4:	200016e4 	.word	0x200016e4
 80019c8:	200017b4 	.word	0x200017b4
 80019cc:	200016e5 	.word	0x200016e5
 80019d0:	200017c8 	.word	0x200017c8
 80019d4:	200016e6 	.word	0x200016e6
 80019d8:	200017dc 	.word	0x200017dc
 80019dc:	200016e7 	.word	0x200016e7
 80019e0:	200017f0 	.word	0x200017f0
 80019e4:	200016e8 	.word	0x200016e8
 80019e8:	20001804 	.word	0x20001804
 80019ec:	200016e9 	.word	0x200016e9
 80019f0:	20001818 	.word	0x20001818
 80019f4:	0800ede0 	.word	0x0800ede0
 80019f8:	200016ea 	.word	0x200016ea
 80019fc:	2000182c 	.word	0x2000182c
 8001a00:	40010800 	.word	0x40010800
 8001a04:	200016ef 	.word	0x200016ef
 8001a08:	200016cf 	.word	0x200016cf
 8001a0c:	4b8a      	ldr	r3, [pc, #552]	@ (8001c38 <menu+0x7e4>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10e      	bne.n	8001a32 <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001a14:	4b89      	ldr	r3, [pc, #548]	@ (8001c3c <menu+0x7e8>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b87      	ldr	r3, [pc, #540]	@ (8001c3c <menu+0x7e8>)
 8001a1e:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001a20:	4b86      	ldr	r3, [pc, #536]	@ (8001c3c <menu+0x7e8>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b0b      	cmp	r3, #11
 8001a26:	d902      	bls.n	8001a2e <menu+0x5da>
	    		hataGostermeSirasi = 10;
 8001a28:	4b84      	ldr	r3, [pc, #528]	@ (8001c3c <menu+0x7e8>)
 8001a2a:	220a      	movs	r2, #10
 8001a2c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001a2e:	f002 fa57 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001a32:	2108      	movs	r1, #8
 8001a34:	4882      	ldr	r0, [pc, #520]	@ (8001c40 <menu+0x7ec>)
 8001a36:	f008 ff37 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d153      	bne.n	8001ae8 <menu+0x694>
 8001a40:	4b80      	ldr	r3, [pc, #512]	@ (8001c44 <menu+0x7f0>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	f083 0301 	eor.w	r3, r3, #1
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d04c      	beq.n	8001ae8 <menu+0x694>
 8001a4e:	4b7b      	ldr	r3, [pc, #492]	@ (8001c3c <menu+0x7e8>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b0a      	cmp	r3, #10
 8001a54:	d148      	bne.n	8001ae8 <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 8001a56:	4b7c      	ldr	r3, [pc, #496]	@ (8001c48 <menu+0x7f4>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]
 8001a5c:	4b7b      	ldr	r3, [pc, #492]	@ (8001c4c <menu+0x7f8>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001a64:	4b7a      	ldr	r3, [pc, #488]	@ (8001c50 <menu+0x7fc>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
 8001a6a:	4b78      	ldr	r3, [pc, #480]	@ (8001c4c <menu+0x7f8>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001a72:	4b78      	ldr	r3, [pc, #480]	@ (8001c54 <menu+0x800>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]
 8001a78:	4b74      	ldr	r3, [pc, #464]	@ (8001c4c <menu+0x7f8>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001a80:	4b75      	ldr	r3, [pc, #468]	@ (8001c58 <menu+0x804>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	701a      	strb	r2, [r3, #0]
 8001a86:	4b71      	ldr	r3, [pc, #452]	@ (8001c4c <menu+0x7f8>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001a8e:	4b73      	ldr	r3, [pc, #460]	@ (8001c5c <menu+0x808>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
 8001a94:	4b6d      	ldr	r3, [pc, #436]	@ (8001c4c <menu+0x7f8>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001a9c:	4b70      	ldr	r3, [pc, #448]	@ (8001c60 <menu+0x80c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]
 8001aa2:	4b6a      	ldr	r3, [pc, #424]	@ (8001c4c <menu+0x7f8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001aaa:	4b6e      	ldr	r3, [pc, #440]	@ (8001c64 <menu+0x810>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
 8001ab0:	4b66      	ldr	r3, [pc, #408]	@ (8001c4c <menu+0x7f8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001ab8:	4b6b      	ldr	r3, [pc, #428]	@ (8001c68 <menu+0x814>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	4b63      	ldr	r3, [pc, #396]	@ (8001c4c <menu+0x7f8>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001ac6:	4b69      	ldr	r3, [pc, #420]	@ (8001c6c <menu+0x818>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
 8001acc:	4b5f      	ldr	r3, [pc, #380]	@ (8001c4c <menu+0x7f8>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001ad4:	4b66      	ldr	r3, [pc, #408]	@ (8001c70 <menu+0x81c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
 8001ada:	4b5c      	ldr	r3, [pc, #368]	@ (8001c4c <menu+0x7f8>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 8001ae2:	4b64      	ldr	r3, [pc, #400]	@ (8001c74 <menu+0x820>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001ae8:	4b63      	ldr	r3, [pc, #396]	@ (8001c78 <menu+0x824>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	f040 808e 	bne.w	8001c0e <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 8001af2:	4a62      	ldr	r2, [pc, #392]	@ (8001c7c <menu+0x828>)
 8001af4:	2101      	movs	r1, #1
 8001af6:	2001      	movs	r0, #1
 8001af8:	f007 fb82 	bl	8009200 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001afc:	4b4e      	ldr	r3, [pc, #312]	@ (8001c38 <menu+0x7e4>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d003      	beq.n	8001b0c <menu+0x6b8>
 8001b04:	4b4c      	ldr	r3, [pc, #304]	@ (8001c38 <menu+0x7e4>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d104      	bne.n	8001b16 <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 8001b0c:	4a5c      	ldr	r2, [pc, #368]	@ (8001c80 <menu+0x82c>)
 8001b0e:	2101      	movs	r1, #1
 8001b10:	2002      	movs	r0, #2
 8001b12:	f007 fb75 	bl	8009200 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001b16:	4b5b      	ldr	r3, [pc, #364]	@ (8001c84 <menu+0x830>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d108      	bne.n	8001b30 <menu+0x6dc>
 8001b1e:	4b46      	ldr	r3, [pc, #280]	@ (8001c38 <menu+0x7e4>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d104      	bne.n	8001b30 <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 8001b26:	4a58      	ldr	r2, [pc, #352]	@ (8001c88 <menu+0x834>)
 8001b28:	2101      	movs	r1, #1
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	f007 fb68 	bl	8009200 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001b30:	4b54      	ldr	r3, [pc, #336]	@ (8001c84 <menu+0x830>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d108      	bne.n	8001b4a <menu+0x6f6>
 8001b38:	4b3f      	ldr	r3, [pc, #252]	@ (8001c38 <menu+0x7e4>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d104      	bne.n	8001b4a <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 8001b40:	4a52      	ldr	r2, [pc, #328]	@ (8001c8c <menu+0x838>)
 8001b42:	2101      	movs	r1, #1
 8001b44:	2002      	movs	r0, #2
 8001b46:	f007 fb5b 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	483c      	ldr	r0, [pc, #240]	@ (8001c40 <menu+0x7ec>)
 8001b4e:	f008 feab 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d119      	bne.n	8001b8c <menu+0x738>
 8001b58:	4b3a      	ldr	r3, [pc, #232]	@ (8001c44 <menu+0x7f0>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	f083 0301 	eor.w	r3, r3, #1
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d012      	beq.n	8001b8c <menu+0x738>
 8001b66:	4b34      	ldr	r3, [pc, #208]	@ (8001c38 <menu+0x7e4>)
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10e      	bne.n	8001b8c <menu+0x738>
			calismaSekli = calismaSekli + 1;
 8001b6e:	4b45      	ldr	r3, [pc, #276]	@ (8001c84 <menu+0x830>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	3301      	adds	r3, #1
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4b43      	ldr	r3, [pc, #268]	@ (8001c84 <menu+0x830>)
 8001b78:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001b7a:	4b42      	ldr	r3, [pc, #264]	@ (8001c84 <menu+0x830>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d902      	bls.n	8001b88 <menu+0x734>
				calismaSekli = 0;
 8001b82:	4b40      	ldr	r3, [pc, #256]	@ (8001c84 <menu+0x830>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b88:	f002 f9aa 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b8c:	2104      	movs	r1, #4
 8001b8e:	482c      	ldr	r0, [pc, #176]	@ (8001c40 <menu+0x7ec>)
 8001b90:	f008 fe8a 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d119      	bne.n	8001bce <menu+0x77a>
 8001b9a:	4b2a      	ldr	r3, [pc, #168]	@ (8001c44 <menu+0x7f0>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	f083 0301 	eor.w	r3, r3, #1
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d012      	beq.n	8001bce <menu+0x77a>
 8001ba8:	4b23      	ldr	r3, [pc, #140]	@ (8001c38 <menu+0x7e4>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d10e      	bne.n	8001bce <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 8001bb0:	4b34      	ldr	r3, [pc, #208]	@ (8001c84 <menu+0x830>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	4b32      	ldr	r3, [pc, #200]	@ (8001c84 <menu+0x830>)
 8001bba:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001bbc:	4b31      	ldr	r3, [pc, #196]	@ (8001c84 <menu+0x830>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <menu+0x776>
	    		calismaSekli = 1;
 8001bc4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c84 <menu+0x830>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001bca:	f002 f989 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bce:	2108      	movs	r1, #8
 8001bd0:	481b      	ldr	r0, [pc, #108]	@ (8001c40 <menu+0x7ec>)
 8001bd2:	f008 fe69 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d118      	bne.n	8001c0e <menu+0x7ba>
 8001bdc:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <menu+0x7f0>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	f083 0301 	eor.w	r3, r3, #1
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d011      	beq.n	8001c0e <menu+0x7ba>
			eepromData[1] = calismaSekli;
 8001bea:	4b26      	ldr	r3, [pc, #152]	@ (8001c84 <menu+0x830>)
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	4b17      	ldr	r3, [pc, #92]	@ (8001c4c <menu+0x7f8>)
 8001bf0:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001bf2:	4b24      	ldr	r3, [pc, #144]	@ (8001c84 <menu+0x830>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d106      	bne.n	8001c08 <menu+0x7b4>
				altLimit = 1;
 8001bfa:	4b25      	ldr	r3, [pc, #148]	@ (8001c90 <menu+0x83c>)
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001c00:	4b23      	ldr	r3, [pc, #140]	@ (8001c90 <menu+0x83c>)
 8001c02:	781a      	ldrb	r2, [r3, #0]
 8001c04:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <menu+0x7f8>)
 8001c06:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001c08:	4b1a      	ldr	r3, [pc, #104]	@ (8001c74 <menu+0x820>)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <menu+0x824>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b03      	cmp	r3, #3
 8001c14:	f040 809c 	bne.w	8001d50 <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 8001c18:	4a1e      	ldr	r2, [pc, #120]	@ (8001c94 <menu+0x840>)
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f007 faef 	bl	8009200 <lcd_print>

		if(emniyetCercevesi == 0) {
 8001c22:	4b1d      	ldr	r3, [pc, #116]	@ (8001c98 <menu+0x844>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d13a      	bne.n	8001ca0 <menu+0x84c>
			lcd_print(2, 1, pasifText);
 8001c2a:	4a1c      	ldr	r2, [pc, #112]	@ (8001c9c <menu+0x848>)
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	2002      	movs	r0, #2
 8001c30:	f007 fae6 	bl	8009200 <lcd_print>
 8001c34:	e03d      	b.n	8001cb2 <menu+0x85e>
 8001c36:	bf00      	nop
 8001c38:	200016cf 	.word	0x200016cf
 8001c3c:	200016c2 	.word	0x200016c2
 8001c40:	40010800 	.word	0x40010800
 8001c44:	200016ef 	.word	0x200016ef
 8001c48:	200016e1 	.word	0x200016e1
 8001c4c:	20000fec 	.word	0x20000fec
 8001c50:	200016e2 	.word	0x200016e2
 8001c54:	200016e3 	.word	0x200016e3
 8001c58:	200016e4 	.word	0x200016e4
 8001c5c:	200016e5 	.word	0x200016e5
 8001c60:	200016e6 	.word	0x200016e6
 8001c64:	200016e7 	.word	0x200016e7
 8001c68:	200016e8 	.word	0x200016e8
 8001c6c:	200016e9 	.word	0x200016e9
 8001c70:	200016ea 	.word	0x200016ea
 8001c74:	200016ec 	.word	0x200016ec
 8001c78:	200016c0 	.word	0x200016c0
 8001c7c:	20001840 	.word	0x20001840
 8001c80:	20001854 	.word	0x20001854
 8001c84:	200016c1 	.word	0x200016c1
 8001c88:	20001868 	.word	0x20001868
 8001c8c:	2000187c 	.word	0x2000187c
 8001c90:	200016c6 	.word	0x200016c6
 8001c94:	20001890 	.word	0x20001890
 8001c98:	200016c4 	.word	0x200016c4
 8001c9c:	200018a4 	.word	0x200018a4
		} else if(emniyetCercevesi == 1) {
 8001ca0:	4b6b      	ldr	r3, [pc, #428]	@ (8001e50 <menu+0x9fc>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d104      	bne.n	8001cb2 <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 8001ca8:	4a6a      	ldr	r2, [pc, #424]	@ (8001e54 <menu+0xa00>)
 8001caa:	2101      	movs	r1, #1
 8001cac:	2002      	movs	r0, #2
 8001cae:	f007 faa7 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cb2:	2102      	movs	r1, #2
 8001cb4:	4868      	ldr	r0, [pc, #416]	@ (8001e58 <menu+0xa04>)
 8001cb6:	f008 fdf7 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d115      	bne.n	8001cec <menu+0x898>
 8001cc0:	4b66      	ldr	r3, [pc, #408]	@ (8001e5c <menu+0xa08>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	f083 0301 	eor.w	r3, r3, #1
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00e      	beq.n	8001cec <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001cce:	4b60      	ldr	r3, [pc, #384]	@ (8001e50 <menu+0x9fc>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	4b5e      	ldr	r3, [pc, #376]	@ (8001e50 <menu+0x9fc>)
 8001cd8:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001cda:	4b5d      	ldr	r3, [pc, #372]	@ (8001e50 <menu+0x9fc>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d902      	bls.n	8001ce8 <menu+0x894>
				emniyetCercevesi = 0;
 8001ce2:	4b5b      	ldr	r3, [pc, #364]	@ (8001e50 <menu+0x9fc>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ce8:	f002 f8fa 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cec:	2104      	movs	r1, #4
 8001cee:	485a      	ldr	r0, [pc, #360]	@ (8001e58 <menu+0xa04>)
 8001cf0:	f008 fdda 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d115      	bne.n	8001d26 <menu+0x8d2>
 8001cfa:	4b58      	ldr	r3, [pc, #352]	@ (8001e5c <menu+0xa08>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	f083 0301 	eor.w	r3, r3, #1
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00e      	beq.n	8001d26 <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001d08:	4b51      	ldr	r3, [pc, #324]	@ (8001e50 <menu+0x9fc>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	4b4f      	ldr	r3, [pc, #316]	@ (8001e50 <menu+0x9fc>)
 8001d12:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001d14:	4b4e      	ldr	r3, [pc, #312]	@ (8001e50 <menu+0x9fc>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <menu+0x8ce>
		   		emniyetCercevesi = 1;
 8001d1c:	4b4c      	ldr	r3, [pc, #304]	@ (8001e50 <menu+0x9fc>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d22:	f002 f8dd 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001d26:	2108      	movs	r1, #8
 8001d28:	484b      	ldr	r0, [pc, #300]	@ (8001e58 <menu+0xa04>)
 8001d2a:	f008 fdbd 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d10d      	bne.n	8001d50 <menu+0x8fc>
 8001d34:	4b49      	ldr	r3, [pc, #292]	@ (8001e5c <menu+0xa08>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	f083 0301 	eor.w	r3, r3, #1
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d006      	beq.n	8001d50 <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 8001d42:	4b43      	ldr	r3, [pc, #268]	@ (8001e50 <menu+0x9fc>)
 8001d44:	781a      	ldrb	r2, [r3, #0]
 8001d46:	4b46      	ldr	r3, [pc, #280]	@ (8001e60 <menu+0xa0c>)
 8001d48:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001d4a:	4b46      	ldr	r3, [pc, #280]	@ (8001e64 <menu+0xa10>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001d50:	4b45      	ldr	r3, [pc, #276]	@ (8001e68 <menu+0xa14>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d166      	bne.n	8001e26 <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 8001d58:	4a44      	ldr	r2, [pc, #272]	@ (8001e6c <menu+0xa18>)
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f007 fa4f 	bl	8009200 <lcd_print>

		if(yavaslamaLimit == 0) {
 8001d62:	4b43      	ldr	r3, [pc, #268]	@ (8001e70 <menu+0xa1c>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d105      	bne.n	8001d76 <menu+0x922>
			lcd_print(2, 1, pasifText);
 8001d6a:	4a42      	ldr	r2, [pc, #264]	@ (8001e74 <menu+0xa20>)
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	2002      	movs	r0, #2
 8001d70:	f007 fa46 	bl	8009200 <lcd_print>
 8001d74:	e008      	b.n	8001d88 <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 8001d76:	4b3e      	ldr	r3, [pc, #248]	@ (8001e70 <menu+0xa1c>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d104      	bne.n	8001d88 <menu+0x934>
			lcd_print(2, 1, aktifText);
 8001d7e:	4a3e      	ldr	r2, [pc, #248]	@ (8001e78 <menu+0xa24>)
 8001d80:	2101      	movs	r1, #1
 8001d82:	2002      	movs	r0, #2
 8001d84:	f007 fa3c 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d88:	2102      	movs	r1, #2
 8001d8a:	4833      	ldr	r0, [pc, #204]	@ (8001e58 <menu+0xa04>)
 8001d8c:	f008 fd8c 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d115      	bne.n	8001dc2 <menu+0x96e>
 8001d96:	4b31      	ldr	r3, [pc, #196]	@ (8001e5c <menu+0xa08>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	f083 0301 	eor.w	r3, r3, #1
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00e      	beq.n	8001dc2 <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001da4:	4b32      	ldr	r3, [pc, #200]	@ (8001e70 <menu+0xa1c>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	3301      	adds	r3, #1
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	4b30      	ldr	r3, [pc, #192]	@ (8001e70 <menu+0xa1c>)
 8001dae:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001db0:	4b2f      	ldr	r3, [pc, #188]	@ (8001e70 <menu+0xa1c>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d902      	bls.n	8001dbe <menu+0x96a>
				yavaslamaLimit = 0;
 8001db8:	4b2d      	ldr	r3, [pc, #180]	@ (8001e70 <menu+0xa1c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001dbe:	f002 f88f 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dc2:	2104      	movs	r1, #4
 8001dc4:	4824      	ldr	r0, [pc, #144]	@ (8001e58 <menu+0xa04>)
 8001dc6:	f008 fd6f 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d115      	bne.n	8001dfc <menu+0x9a8>
 8001dd0:	4b22      	ldr	r3, [pc, #136]	@ (8001e5c <menu+0xa08>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	f083 0301 	eor.w	r3, r3, #1
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00e      	beq.n	8001dfc <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001dde:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <menu+0xa1c>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <menu+0xa1c>)
 8001de8:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001dea:	4b21      	ldr	r3, [pc, #132]	@ (8001e70 <menu+0xa1c>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d002      	beq.n	8001df8 <menu+0x9a4>
		   		yavaslamaLimit = 1;
 8001df2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e70 <menu+0xa1c>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001df8:	f002 f872 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dfc:	2108      	movs	r1, #8
 8001dfe:	4816      	ldr	r0, [pc, #88]	@ (8001e58 <menu+0xa04>)
 8001e00:	f008 fd52 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d10d      	bne.n	8001e26 <menu+0x9d2>
 8001e0a:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <menu+0xa08>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	f083 0301 	eor.w	r3, r3, #1
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d006      	beq.n	8001e26 <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 8001e18:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <menu+0xa1c>)
 8001e1a:	781a      	ldrb	r2, [r3, #0]
 8001e1c:	4b10      	ldr	r3, [pc, #64]	@ (8001e60 <menu+0xa0c>)
 8001e1e:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001e20:	4b10      	ldr	r3, [pc, #64]	@ (8001e64 <menu+0xa10>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001e26:	4b10      	ldr	r3, [pc, #64]	@ (8001e68 <menu+0xa14>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2b05      	cmp	r3, #5
 8001e2c:	f040 80aa 	bne.w	8001f84 <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 8001e30:	4a12      	ldr	r2, [pc, #72]	@ (8001e7c <menu+0xa28>)
 8001e32:	2101      	movs	r1, #1
 8001e34:	2001      	movs	r0, #1
 8001e36:	f007 f9e3 	bl	8009200 <lcd_print>

		if(altLimit == 0) {
 8001e3a:	4b11      	ldr	r3, [pc, #68]	@ (8001e80 <menu+0xa2c>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d120      	bne.n	8001e84 <menu+0xa30>
			lcd_print(2, 1, pasifText);
 8001e42:	4a0c      	ldr	r2, [pc, #48]	@ (8001e74 <menu+0xa20>)
 8001e44:	2101      	movs	r1, #1
 8001e46:	2002      	movs	r0, #2
 8001e48:	f007 f9da 	bl	8009200 <lcd_print>
 8001e4c:	e023      	b.n	8001e96 <menu+0xa42>
 8001e4e:	bf00      	nop
 8001e50:	200016c4 	.word	0x200016c4
 8001e54:	200000ec 	.word	0x200000ec
 8001e58:	40010800 	.word	0x40010800
 8001e5c:	200016ef 	.word	0x200016ef
 8001e60:	20000fec 	.word	0x20000fec
 8001e64:	200016ec 	.word	0x200016ec
 8001e68:	200016c0 	.word	0x200016c0
 8001e6c:	200018cc 	.word	0x200018cc
 8001e70:	200016c5 	.word	0x200016c5
 8001e74:	200018a4 	.word	0x200018a4
 8001e78:	200018b8 	.word	0x200018b8
 8001e7c:	200018e0 	.word	0x200018e0
 8001e80:	200016c6 	.word	0x200016c6
		} else if(altLimit == 1) {
 8001e84:	4b89      	ldr	r3, [pc, #548]	@ (80020ac <menu+0xc58>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d104      	bne.n	8001e96 <menu+0xa42>
			lcd_print(2, 1, aktifText);
 8001e8c:	4a88      	ldr	r2, [pc, #544]	@ (80020b0 <menu+0xc5c>)
 8001e8e:	2101      	movs	r1, #1
 8001e90:	2002      	movs	r0, #2
 8001e92:	f007 f9b5 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001e96:	2102      	movs	r1, #2
 8001e98:	4886      	ldr	r0, [pc, #536]	@ (80020b4 <menu+0xc60>)
 8001e9a:	f008 fd05 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d119      	bne.n	8001ed8 <menu+0xa84>
 8001ea4:	4b84      	ldr	r3, [pc, #528]	@ (80020b8 <menu+0xc64>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	f083 0301 	eor.w	r3, r3, #1
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d012      	beq.n	8001ed8 <menu+0xa84>
 8001eb2:	4b82      	ldr	r3, [pc, #520]	@ (80020bc <menu+0xc68>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10e      	bne.n	8001ed8 <menu+0xa84>
			altLimit = altLimit + 1;
 8001eba:	4b7c      	ldr	r3, [pc, #496]	@ (80020ac <menu+0xc58>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	3301      	adds	r3, #1
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	4b7a      	ldr	r3, [pc, #488]	@ (80020ac <menu+0xc58>)
 8001ec4:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001ec6:	4b79      	ldr	r3, [pc, #484]	@ (80020ac <menu+0xc58>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d902      	bls.n	8001ed4 <menu+0xa80>
				altLimit = 0;
 8001ece:	4b77      	ldr	r3, [pc, #476]	@ (80020ac <menu+0xc58>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ed4:	f002 f804 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001ed8:	2104      	movs	r1, #4
 8001eda:	4876      	ldr	r0, [pc, #472]	@ (80020b4 <menu+0xc60>)
 8001edc:	f008 fce4 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d119      	bne.n	8001f1a <menu+0xac6>
 8001ee6:	4b74      	ldr	r3, [pc, #464]	@ (80020b8 <menu+0xc64>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	f083 0301 	eor.w	r3, r3, #1
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d012      	beq.n	8001f1a <menu+0xac6>
 8001ef4:	4b71      	ldr	r3, [pc, #452]	@ (80020bc <menu+0xc68>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10e      	bne.n	8001f1a <menu+0xac6>
			altLimit = altLimit - 1;
 8001efc:	4b6b      	ldr	r3, [pc, #428]	@ (80020ac <menu+0xc58>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	4b69      	ldr	r3, [pc, #420]	@ (80020ac <menu+0xc58>)
 8001f06:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001f08:	4b68      	ldr	r3, [pc, #416]	@ (80020ac <menu+0xc58>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <menu+0xac2>
		   		altLimit = 1;
 8001f10:	4b66      	ldr	r3, [pc, #408]	@ (80020ac <menu+0xc58>)
 8001f12:	2201      	movs	r2, #1
 8001f14:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f16:	f001 ffe3 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f1a:	2108      	movs	r1, #8
 8001f1c:	4865      	ldr	r0, [pc, #404]	@ (80020b4 <menu+0xc60>)
 8001f1e:	f008 fcc3 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d12d      	bne.n	8001f84 <menu+0xb30>
 8001f28:	4b63      	ldr	r3, [pc, #396]	@ (80020b8 <menu+0xc64>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	f083 0301 	eor.w	r3, r3, #1
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d026      	beq.n	8001f84 <menu+0xb30>
			eepromData[5] = altLimit;
 8001f36:	4b5d      	ldr	r3, [pc, #372]	@ (80020ac <menu+0xc58>)
 8001f38:	781a      	ldrb	r2, [r3, #0]
 8001f3a:	4b61      	ldr	r3, [pc, #388]	@ (80020c0 <menu+0xc6c>)
 8001f3c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001f3e:	4b5b      	ldr	r3, [pc, #364]	@ (80020ac <menu+0xc58>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d110      	bne.n	8001f68 <menu+0xb14>
 8001f46:	4b5f      	ldr	r3, [pc, #380]	@ (80020c4 <menu+0xc70>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <menu+0xb02>
 8001f4e:	4b5d      	ldr	r3, [pc, #372]	@ (80020c4 <menu+0xc70>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d108      	bne.n	8001f68 <menu+0xb14>
				kapiTablaAcKonum = 3;
 8001f56:	4b5b      	ldr	r3, [pc, #364]	@ (80020c4 <menu+0xc70>)
 8001f58:	2203      	movs	r2, #3
 8001f5a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001f5c:	4b59      	ldr	r3, [pc, #356]	@ (80020c4 <menu+0xc70>)
 8001f5e:	781a      	ldrb	r2, [r3, #0]
 8001f60:	4b57      	ldr	r3, [pc, #348]	@ (80020c0 <menu+0xc6c>)
 8001f62:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001f66:	e00a      	b.n	8001f7e <menu+0xb2a>
			} else if(altLimit == 0) {
 8001f68:	4b50      	ldr	r3, [pc, #320]	@ (80020ac <menu+0xc58>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d106      	bne.n	8001f7e <menu+0xb2a>
				platformSilindirTipi = 0;
 8001f70:	4b55      	ldr	r3, [pc, #340]	@ (80020c8 <menu+0xc74>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001f76:	4b54      	ldr	r3, [pc, #336]	@ (80020c8 <menu+0xc74>)
 8001f78:	781a      	ldrb	r2, [r3, #0]
 8001f7a:	4b51      	ldr	r3, [pc, #324]	@ (80020c0 <menu+0xc6c>)
 8001f7c:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001f7e:	4b53      	ldr	r3, [pc, #332]	@ (80020cc <menu+0xc78>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001f84:	4b52      	ldr	r3, [pc, #328]	@ (80020d0 <menu+0xc7c>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b06      	cmp	r3, #6
 8001f8a:	d166      	bne.n	800205a <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 8001f8c:	4a51      	ldr	r2, [pc, #324]	@ (80020d4 <menu+0xc80>)
 8001f8e:	2101      	movs	r1, #1
 8001f90:	2001      	movs	r0, #1
 8001f92:	f007 f935 	bl	8009200 <lcd_print>

		if(basincSalteri == 0) {
 8001f96:	4b50      	ldr	r3, [pc, #320]	@ (80020d8 <menu+0xc84>)
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d105      	bne.n	8001faa <menu+0xb56>
			lcd_print(2, 1, pasifText);
 8001f9e:	4a4f      	ldr	r2, [pc, #316]	@ (80020dc <menu+0xc88>)
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	2002      	movs	r0, #2
 8001fa4:	f007 f92c 	bl	8009200 <lcd_print>
 8001fa8:	e008      	b.n	8001fbc <menu+0xb68>
		} else if(basincSalteri == 1) {
 8001faa:	4b4b      	ldr	r3, [pc, #300]	@ (80020d8 <menu+0xc84>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d104      	bne.n	8001fbc <menu+0xb68>
			lcd_print(2, 1, aktifText);
 8001fb2:	4a3f      	ldr	r2, [pc, #252]	@ (80020b0 <menu+0xc5c>)
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	2002      	movs	r0, #2
 8001fb8:	f007 f922 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	483d      	ldr	r0, [pc, #244]	@ (80020b4 <menu+0xc60>)
 8001fc0:	f008 fc72 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d115      	bne.n	8001ff6 <menu+0xba2>
 8001fca:	4b3b      	ldr	r3, [pc, #236]	@ (80020b8 <menu+0xc64>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	f083 0301 	eor.w	r3, r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00e      	beq.n	8001ff6 <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 8001fd8:	4b3f      	ldr	r3, [pc, #252]	@ (80020d8 <menu+0xc84>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	4b3d      	ldr	r3, [pc, #244]	@ (80020d8 <menu+0xc84>)
 8001fe2:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001fe4:	4b3c      	ldr	r3, [pc, #240]	@ (80020d8 <menu+0xc84>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d902      	bls.n	8001ff2 <menu+0xb9e>
				basincSalteri = 0;
 8001fec:	4b3a      	ldr	r3, [pc, #232]	@ (80020d8 <menu+0xc84>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ff2:	f001 ff75 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ff6:	2104      	movs	r1, #4
 8001ff8:	482e      	ldr	r0, [pc, #184]	@ (80020b4 <menu+0xc60>)
 8001ffa:	f008 fc55 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b01      	cmp	r3, #1
 8002002:	d115      	bne.n	8002030 <menu+0xbdc>
 8002004:	4b2c      	ldr	r3, [pc, #176]	@ (80020b8 <menu+0xc64>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	f083 0301 	eor.w	r3, r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00e      	beq.n	8002030 <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 8002012:	4b31      	ldr	r3, [pc, #196]	@ (80020d8 <menu+0xc84>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	3b01      	subs	r3, #1
 8002018:	b2da      	uxtb	r2, r3
 800201a:	4b2f      	ldr	r3, [pc, #188]	@ (80020d8 <menu+0xc84>)
 800201c:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800201e:	4b2e      	ldr	r3, [pc, #184]	@ (80020d8 <menu+0xc84>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d002      	beq.n	800202c <menu+0xbd8>
		   		basincSalteri = 1;
 8002026:	4b2c      	ldr	r3, [pc, #176]	@ (80020d8 <menu+0xc84>)
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800202c:	f001 ff58 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002030:	2108      	movs	r1, #8
 8002032:	4820      	ldr	r0, [pc, #128]	@ (80020b4 <menu+0xc60>)
 8002034:	f008 fc38 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002038:	4603      	mov	r3, r0
 800203a:	2b01      	cmp	r3, #1
 800203c:	d10d      	bne.n	800205a <menu+0xc06>
 800203e:	4b1e      	ldr	r3, [pc, #120]	@ (80020b8 <menu+0xc64>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	f083 0301 	eor.w	r3, r3, #1
 8002046:	b2db      	uxtb	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <menu+0xc06>
			eepromData[6] = basincSalteri;
 800204c:	4b22      	ldr	r3, [pc, #136]	@ (80020d8 <menu+0xc84>)
 800204e:	781a      	ldrb	r2, [r3, #0]
 8002050:	4b1b      	ldr	r3, [pc, #108]	@ (80020c0 <menu+0xc6c>)
 8002052:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002054:	4b1d      	ldr	r3, [pc, #116]	@ (80020cc <menu+0xc78>)
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800205a:	4b1d      	ldr	r3, [pc, #116]	@ (80020d0 <menu+0xc7c>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b07      	cmp	r3, #7
 8002060:	f040 80a9 	bne.w	80021b6 <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 8002064:	4a1e      	ldr	r2, [pc, #120]	@ (80020e0 <menu+0xc8c>)
 8002066:	2101      	movs	r1, #1
 8002068:	2001      	movs	r0, #1
 800206a:	f007 f8c9 	bl	8009200 <lcd_print>

		if(kapiSecimleri == 0) {
 800206e:	4b1d      	ldr	r3, [pc, #116]	@ (80020e4 <menu+0xc90>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d105      	bne.n	8002082 <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 8002076:	4a19      	ldr	r2, [pc, #100]	@ (80020dc <menu+0xc88>)
 8002078:	2101      	movs	r1, #1
 800207a:	2002      	movs	r0, #2
 800207c:	f007 f8c0 	bl	8009200 <lcd_print>
 8002080:	e03f      	b.n	8002102 <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 8002082:	4b18      	ldr	r3, [pc, #96]	@ (80020e4 <menu+0xc90>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d105      	bne.n	8002096 <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 800208a:	4a17      	ldr	r2, [pc, #92]	@ (80020e8 <menu+0xc94>)
 800208c:	2101      	movs	r1, #1
 800208e:	2002      	movs	r0, #2
 8002090:	f007 f8b6 	bl	8009200 <lcd_print>
 8002094:	e035      	b.n	8002102 <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 8002096:	4b13      	ldr	r3, [pc, #76]	@ (80020e4 <menu+0xc90>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b02      	cmp	r3, #2
 800209c:	d128      	bne.n	80020f0 <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 800209e:	4a13      	ldr	r2, [pc, #76]	@ (80020ec <menu+0xc98>)
 80020a0:	2101      	movs	r1, #1
 80020a2:	2002      	movs	r0, #2
 80020a4:	f007 f8ac 	bl	8009200 <lcd_print>
 80020a8:	e02b      	b.n	8002102 <menu+0xcae>
 80020aa:	bf00      	nop
 80020ac:	200016c6 	.word	0x200016c6
 80020b0:	200018b8 	.word	0x200018b8
 80020b4:	40010800 	.word	0x40010800
 80020b8:	200016ef 	.word	0x200016ef
 80020bc:	200016c1 	.word	0x200016c1
 80020c0:	20000fec 	.word	0x20000fec
 80020c4:	200016cd 	.word	0x200016cd
 80020c8:	200016d3 	.word	0x200016d3
 80020cc:	200016ec 	.word	0x200016ec
 80020d0:	200016c0 	.word	0x200016c0
 80020d4:	200018f4 	.word	0x200018f4
 80020d8:	200016c7 	.word	0x200016c7
 80020dc:	200018a4 	.word	0x200018a4
 80020e0:	20001908 	.word	0x20001908
 80020e4:	200016c8 	.word	0x200016c8
 80020e8:	2000191c 	.word	0x2000191c
 80020ec:	20001930 	.word	0x20001930
		} else if(kapiSecimleri == 3) {
 80020f0:	4b76      	ldr	r3, [pc, #472]	@ (80022cc <menu+0xe78>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d104      	bne.n	8002102 <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 80020f8:	4a75      	ldr	r2, [pc, #468]	@ (80022d0 <menu+0xe7c>)
 80020fa:	2101      	movs	r1, #1
 80020fc:	2002      	movs	r0, #2
 80020fe:	f007 f87f 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002102:	2102      	movs	r1, #2
 8002104:	4873      	ldr	r0, [pc, #460]	@ (80022d4 <menu+0xe80>)
 8002106:	f008 fbcf 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800210a:	4603      	mov	r3, r0
 800210c:	2b01      	cmp	r3, #1
 800210e:	d115      	bne.n	800213c <menu+0xce8>
 8002110:	4b71      	ldr	r3, [pc, #452]	@ (80022d8 <menu+0xe84>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	f083 0301 	eor.w	r3, r3, #1
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d00e      	beq.n	800213c <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 800211e:	4b6b      	ldr	r3, [pc, #428]	@ (80022cc <menu+0xe78>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	3301      	adds	r3, #1
 8002124:	b2da      	uxtb	r2, r3
 8002126:	4b69      	ldr	r3, [pc, #420]	@ (80022cc <menu+0xe78>)
 8002128:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800212a:	4b68      	ldr	r3, [pc, #416]	@ (80022cc <menu+0xe78>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b03      	cmp	r3, #3
 8002130:	d902      	bls.n	8002138 <menu+0xce4>
				kapiSecimleri = 0;
 8002132:	4b66      	ldr	r3, [pc, #408]	@ (80022cc <menu+0xe78>)
 8002134:	2200      	movs	r2, #0
 8002136:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002138:	f001 fed2 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800213c:	2104      	movs	r1, #4
 800213e:	4865      	ldr	r0, [pc, #404]	@ (80022d4 <menu+0xe80>)
 8002140:	f008 fbb2 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002144:	4603      	mov	r3, r0
 8002146:	2b01      	cmp	r3, #1
 8002148:	d115      	bne.n	8002176 <menu+0xd22>
 800214a:	4b63      	ldr	r3, [pc, #396]	@ (80022d8 <menu+0xe84>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	f083 0301 	eor.w	r3, r3, #1
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00e      	beq.n	8002176 <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 8002158:	4b5c      	ldr	r3, [pc, #368]	@ (80022cc <menu+0xe78>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	3b01      	subs	r3, #1
 800215e:	b2da      	uxtb	r2, r3
 8002160:	4b5a      	ldr	r3, [pc, #360]	@ (80022cc <menu+0xe78>)
 8002162:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002164:	4b59      	ldr	r3, [pc, #356]	@ (80022cc <menu+0xe78>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b04      	cmp	r3, #4
 800216a:	d902      	bls.n	8002172 <menu+0xd1e>
		   		kapiSecimleri = 3;
 800216c:	4b57      	ldr	r3, [pc, #348]	@ (80022cc <menu+0xe78>)
 800216e:	2203      	movs	r2, #3
 8002170:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002172:	f001 feb5 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002176:	2108      	movs	r1, #8
 8002178:	4856      	ldr	r0, [pc, #344]	@ (80022d4 <menu+0xe80>)
 800217a:	f008 fb95 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800217e:	4603      	mov	r3, r0
 8002180:	2b01      	cmp	r3, #1
 8002182:	d118      	bne.n	80021b6 <menu+0xd62>
 8002184:	4b54      	ldr	r3, [pc, #336]	@ (80022d8 <menu+0xe84>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	f083 0301 	eor.w	r3, r3, #1
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d011      	beq.n	80021b6 <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 8002192:	4b4e      	ldr	r3, [pc, #312]	@ (80022cc <menu+0xe78>)
 8002194:	781a      	ldrb	r2, [r3, #0]
 8002196:	4b51      	ldr	r3, [pc, #324]	@ (80022dc <menu+0xe88>)
 8002198:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800219a:	4b4c      	ldr	r3, [pc, #304]	@ (80022cc <menu+0xe78>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d006      	beq.n	80021b0 <menu+0xd5c>
				altLimit = 1;
 80021a2:	4b4f      	ldr	r3, [pc, #316]	@ (80022e0 <menu+0xe8c>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80021a8:	4b4d      	ldr	r3, [pc, #308]	@ (80022e0 <menu+0xe8c>)
 80021aa:	781a      	ldrb	r2, [r3, #0]
 80021ac:	4b4b      	ldr	r3, [pc, #300]	@ (80022dc <menu+0xe88>)
 80021ae:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80021b0:	4b4c      	ldr	r3, [pc, #304]	@ (80022e4 <menu+0xe90>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80021b6:	4b4c      	ldr	r3, [pc, #304]	@ (80022e8 <menu+0xe94>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d167      	bne.n	800228e <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 80021be:	4a4b      	ldr	r2, [pc, #300]	@ (80022ec <menu+0xe98>)
 80021c0:	2101      	movs	r1, #1
 80021c2:	2001      	movs	r0, #1
 80021c4:	f007 f81c 	bl	8009200 <lcd_print>

		if(kapiAcTipi == 0) {
 80021c8:	4b49      	ldr	r3, [pc, #292]	@ (80022f0 <menu+0xe9c>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d105      	bne.n	80021dc <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 80021d0:	4a48      	ldr	r2, [pc, #288]	@ (80022f4 <menu+0xea0>)
 80021d2:	2101      	movs	r1, #1
 80021d4:	2002      	movs	r0, #2
 80021d6:	f007 f813 	bl	8009200 <lcd_print>
 80021da:	e008      	b.n	80021ee <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 80021dc:	4b44      	ldr	r3, [pc, #272]	@ (80022f0 <menu+0xe9c>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d104      	bne.n	80021ee <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 80021e4:	4a44      	ldr	r2, [pc, #272]	@ (80022f8 <menu+0xea4>)
 80021e6:	2101      	movs	r1, #1
 80021e8:	2002      	movs	r0, #2
 80021ea:	f007 f809 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80021ee:	2102      	movs	r1, #2
 80021f0:	4838      	ldr	r0, [pc, #224]	@ (80022d4 <menu+0xe80>)
 80021f2:	f008 fb59 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d115      	bne.n	8002228 <menu+0xdd4>
 80021fc:	4b36      	ldr	r3, [pc, #216]	@ (80022d8 <menu+0xe84>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	f083 0301 	eor.w	r3, r3, #1
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00e      	beq.n	8002228 <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 800220a:	4b39      	ldr	r3, [pc, #228]	@ (80022f0 <menu+0xe9c>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	3301      	adds	r3, #1
 8002210:	b2da      	uxtb	r2, r3
 8002212:	4b37      	ldr	r3, [pc, #220]	@ (80022f0 <menu+0xe9c>)
 8002214:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002216:	4b36      	ldr	r3, [pc, #216]	@ (80022f0 <menu+0xe9c>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d902      	bls.n	8002224 <menu+0xdd0>
				kapiAcTipi = 0;
 800221e:	4b34      	ldr	r3, [pc, #208]	@ (80022f0 <menu+0xe9c>)
 8002220:	2200      	movs	r2, #0
 8002222:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002224:	f001 fe5c 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002228:	2104      	movs	r1, #4
 800222a:	482a      	ldr	r0, [pc, #168]	@ (80022d4 <menu+0xe80>)
 800222c:	f008 fb3c 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002230:	4603      	mov	r3, r0
 8002232:	2b01      	cmp	r3, #1
 8002234:	d115      	bne.n	8002262 <menu+0xe0e>
 8002236:	4b28      	ldr	r3, [pc, #160]	@ (80022d8 <menu+0xe84>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	f083 0301 	eor.w	r3, r3, #1
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00e      	beq.n	8002262 <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 8002244:	4b2a      	ldr	r3, [pc, #168]	@ (80022f0 <menu+0xe9c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	3b01      	subs	r3, #1
 800224a:	b2da      	uxtb	r2, r3
 800224c:	4b28      	ldr	r3, [pc, #160]	@ (80022f0 <menu+0xe9c>)
 800224e:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002250:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <menu+0xe9c>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <menu+0xe0a>
		   		kapiAcTipi = 1;
 8002258:	4b25      	ldr	r3, [pc, #148]	@ (80022f0 <menu+0xe9c>)
 800225a:	2201      	movs	r2, #1
 800225c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800225e:	f001 fe3f 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002262:	2108      	movs	r1, #8
 8002264:	481b      	ldr	r0, [pc, #108]	@ (80022d4 <menu+0xe80>)
 8002266:	f008 fb1f 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800226a:	4603      	mov	r3, r0
 800226c:	2b01      	cmp	r3, #1
 800226e:	d10e      	bne.n	800228e <menu+0xe3a>
 8002270:	4b19      	ldr	r3, [pc, #100]	@ (80022d8 <menu+0xe84>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	f083 0301 	eor.w	r3, r3, #1
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d007      	beq.n	800228e <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 800227e:	4b1c      	ldr	r3, [pc, #112]	@ (80022f0 <menu+0xe9c>)
 8002280:	781a      	ldrb	r2, [r3, #0]
 8002282:	4b16      	ldr	r3, [pc, #88]	@ (80022dc <menu+0xe88>)
 8002284:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 8002288:	4b16      	ldr	r3, [pc, #88]	@ (80022e4 <menu+0xe90>)
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 800228e:	4b16      	ldr	r3, [pc, #88]	@ (80022e8 <menu+0xe94>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b09      	cmp	r3, #9
 8002294:	f040 8092 	bne.w	80023bc <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 8002298:	4a18      	ldr	r2, [pc, #96]	@ (80022fc <menu+0xea8>)
 800229a:	2101      	movs	r1, #1
 800229c:	2001      	movs	r0, #1
 800229e:	f006 ffaf 	bl	8009200 <lcd_print>

		if(kapi1Tip == 0) {
 80022a2:	4b17      	ldr	r3, [pc, #92]	@ (8002300 <menu+0xeac>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d105      	bne.n	80022b6 <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 80022aa:	4a16      	ldr	r2, [pc, #88]	@ (8002304 <menu+0xeb0>)
 80022ac:	2101      	movs	r1, #1
 80022ae:	2002      	movs	r0, #2
 80022b0:	f006 ffa6 	bl	8009200 <lcd_print>
 80022b4:	e033      	b.n	800231e <menu+0xeca>
		} else if(kapi1Tip == 1) {
 80022b6:	4b12      	ldr	r3, [pc, #72]	@ (8002300 <menu+0xeac>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d126      	bne.n	800230c <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 80022be:	4a12      	ldr	r2, [pc, #72]	@ (8002308 <menu+0xeb4>)
 80022c0:	2101      	movs	r1, #1
 80022c2:	2002      	movs	r0, #2
 80022c4:	f006 ff9c 	bl	8009200 <lcd_print>
 80022c8:	e029      	b.n	800231e <menu+0xeca>
 80022ca:	bf00      	nop
 80022cc:	200016c8 	.word	0x200016c8
 80022d0:	20001944 	.word	0x20001944
 80022d4:	40010800 	.word	0x40010800
 80022d8:	200016ef 	.word	0x200016ef
 80022dc:	20000fec 	.word	0x20000fec
 80022e0:	200016c6 	.word	0x200016c6
 80022e4:	200016ec 	.word	0x200016ec
 80022e8:	200016c0 	.word	0x200016c0
 80022ec:	20001958 	.word	0x20001958
 80022f0:	200016cc 	.word	0x200016cc
 80022f4:	2000196c 	.word	0x2000196c
 80022f8:	20001980 	.word	0x20001980
 80022fc:	20001994 	.word	0x20001994
 8002300:	200016c9 	.word	0x200016c9
 8002304:	20000100 	.word	0x20000100
 8002308:	200019a8 	.word	0x200019a8
		} else if(kapi1Tip == 2) {
 800230c:	4b73      	ldr	r3, [pc, #460]	@ (80024dc <menu+0x1088>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d104      	bne.n	800231e <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 8002314:	4a72      	ldr	r2, [pc, #456]	@ (80024e0 <menu+0x108c>)
 8002316:	2101      	movs	r1, #1
 8002318:	2002      	movs	r0, #2
 800231a:	f006 ff71 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800231e:	2102      	movs	r1, #2
 8002320:	4870      	ldr	r0, [pc, #448]	@ (80024e4 <menu+0x1090>)
 8002322:	f008 fac1 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002326:	4603      	mov	r3, r0
 8002328:	2b01      	cmp	r3, #1
 800232a:	d115      	bne.n	8002358 <menu+0xf04>
 800232c:	4b6e      	ldr	r3, [pc, #440]	@ (80024e8 <menu+0x1094>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	f083 0301 	eor.w	r3, r3, #1
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00e      	beq.n	8002358 <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 800233a:	4b68      	ldr	r3, [pc, #416]	@ (80024dc <menu+0x1088>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	3301      	adds	r3, #1
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4b66      	ldr	r3, [pc, #408]	@ (80024dc <menu+0x1088>)
 8002344:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002346:	4b65      	ldr	r3, [pc, #404]	@ (80024dc <menu+0x1088>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	2b02      	cmp	r3, #2
 800234c:	d902      	bls.n	8002354 <menu+0xf00>
				kapi1Tip = 0;
 800234e:	4b63      	ldr	r3, [pc, #396]	@ (80024dc <menu+0x1088>)
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002354:	f001 fdc4 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002358:	2104      	movs	r1, #4
 800235a:	4862      	ldr	r0, [pc, #392]	@ (80024e4 <menu+0x1090>)
 800235c:	f008 faa4 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002360:	4603      	mov	r3, r0
 8002362:	2b01      	cmp	r3, #1
 8002364:	d115      	bne.n	8002392 <menu+0xf3e>
 8002366:	4b60      	ldr	r3, [pc, #384]	@ (80024e8 <menu+0x1094>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	f083 0301 	eor.w	r3, r3, #1
 800236e:	b2db      	uxtb	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00e      	beq.n	8002392 <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 8002374:	4b59      	ldr	r3, [pc, #356]	@ (80024dc <menu+0x1088>)
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	3b01      	subs	r3, #1
 800237a:	b2da      	uxtb	r2, r3
 800237c:	4b57      	ldr	r3, [pc, #348]	@ (80024dc <menu+0x1088>)
 800237e:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002380:	4b56      	ldr	r3, [pc, #344]	@ (80024dc <menu+0x1088>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b03      	cmp	r3, #3
 8002386:	d902      	bls.n	800238e <menu+0xf3a>
		   		kapi1Tip = 2;
 8002388:	4b54      	ldr	r3, [pc, #336]	@ (80024dc <menu+0x1088>)
 800238a:	2202      	movs	r2, #2
 800238c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800238e:	f001 fda7 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002392:	2108      	movs	r1, #8
 8002394:	4853      	ldr	r0, [pc, #332]	@ (80024e4 <menu+0x1090>)
 8002396:	f008 fa87 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800239a:	4603      	mov	r3, r0
 800239c:	2b01      	cmp	r3, #1
 800239e:	d10d      	bne.n	80023bc <menu+0xf68>
 80023a0:	4b51      	ldr	r3, [pc, #324]	@ (80024e8 <menu+0x1094>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	f083 0301 	eor.w	r3, r3, #1
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d006      	beq.n	80023bc <menu+0xf68>
			eepromData[8] = kapi1Tip;
 80023ae:	4b4b      	ldr	r3, [pc, #300]	@ (80024dc <menu+0x1088>)
 80023b0:	781a      	ldrb	r2, [r3, #0]
 80023b2:	4b4e      	ldr	r3, [pc, #312]	@ (80024ec <menu+0x1098>)
 80023b4:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80023b6:	4b4e      	ldr	r3, [pc, #312]	@ (80024f0 <menu+0x109c>)
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80023bc:	4b4d      	ldr	r3, [pc, #308]	@ (80024f4 <menu+0x10a0>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b0a      	cmp	r3, #10
 80023c2:	d16c      	bne.n	800249e <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 80023c4:	4a4c      	ldr	r2, [pc, #304]	@ (80024f8 <menu+0x10a4>)
 80023c6:	2101      	movs	r1, #1
 80023c8:	2001      	movs	r0, #1
 80023ca:	f006 ff19 	bl	8009200 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80023ce:	4a4b      	ldr	r2, [pc, #300]	@ (80024fc <menu+0x10a8>)
 80023d0:	2101      	movs	r1, #1
 80023d2:	2002      	movs	r0, #2
 80023d4:	f006 ff14 	bl	8009200 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 80023d8:	4b49      	ldr	r3, [pc, #292]	@ (8002500 <menu+0x10ac>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	220a      	movs	r2, #10
 80023de:	4949      	ldr	r1, [pc, #292]	@ (8002504 <menu+0x10b0>)
 80023e0:	4618      	mov	r0, r3
 80023e2:	f00b fdd9 	bl	800df98 <itoa>
		lcd_print(2,16,snum);
 80023e6:	4a47      	ldr	r2, [pc, #284]	@ (8002504 <menu+0x10b0>)
 80023e8:	2110      	movs	r1, #16
 80023ea:	2002      	movs	r0, #2
 80023ec:	f006 ff08 	bl	8009200 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80023f0:	2102      	movs	r1, #2
 80023f2:	483c      	ldr	r0, [pc, #240]	@ (80024e4 <menu+0x1090>)
 80023f4:	f008 fa58 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d119      	bne.n	8002432 <menu+0xfde>
 80023fe:	4b3a      	ldr	r3, [pc, #232]	@ (80024e8 <menu+0x1094>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	f083 0301 	eor.w	r3, r3, #1
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d012      	beq.n	8002432 <menu+0xfde>
 800240c:	4b33      	ldr	r3, [pc, #204]	@ (80024dc <menu+0x1088>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10e      	bne.n	8002432 <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 8002414:	4b3a      	ldr	r3, [pc, #232]	@ (8002500 <menu+0x10ac>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	3301      	adds	r3, #1
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b38      	ldr	r3, [pc, #224]	@ (8002500 <menu+0x10ac>)
 800241e:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002420:	4b37      	ldr	r3, [pc, #220]	@ (8002500 <menu+0x10ac>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b05      	cmp	r3, #5
 8002426:	d902      	bls.n	800242e <menu+0xfda>
				kapi1AcSure = 0;
 8002428:	4b35      	ldr	r3, [pc, #212]	@ (8002500 <menu+0x10ac>)
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800242e:	f001 fd57 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002432:	2104      	movs	r1, #4
 8002434:	482b      	ldr	r0, [pc, #172]	@ (80024e4 <menu+0x1090>)
 8002436:	f008 fa37 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800243a:	4603      	mov	r3, r0
 800243c:	2b01      	cmp	r3, #1
 800243e:	d119      	bne.n	8002474 <menu+0x1020>
 8002440:	4b29      	ldr	r3, [pc, #164]	@ (80024e8 <menu+0x1094>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	f083 0301 	eor.w	r3, r3, #1
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d012      	beq.n	8002474 <menu+0x1020>
 800244e:	4b23      	ldr	r3, [pc, #140]	@ (80024dc <menu+0x1088>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10e      	bne.n	8002474 <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 8002456:	4b2a      	ldr	r3, [pc, #168]	@ (8002500 <menu+0x10ac>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	3b01      	subs	r3, #1
 800245c:	b2da      	uxtb	r2, r3
 800245e:	4b28      	ldr	r3, [pc, #160]	@ (8002500 <menu+0x10ac>)
 8002460:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002462:	4b27      	ldr	r3, [pc, #156]	@ (8002500 <menu+0x10ac>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b06      	cmp	r3, #6
 8002468:	d902      	bls.n	8002470 <menu+0x101c>
		   		kapi1AcSure = 5;
 800246a:	4b25      	ldr	r3, [pc, #148]	@ (8002500 <menu+0x10ac>)
 800246c:	2205      	movs	r2, #5
 800246e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002470:	f001 fd36 	bl	8003ee0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002474:	2108      	movs	r1, #8
 8002476:	481b      	ldr	r0, [pc, #108]	@ (80024e4 <menu+0x1090>)
 8002478:	f008 fa16 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800247c:	4603      	mov	r3, r0
 800247e:	2b01      	cmp	r3, #1
 8002480:	d10d      	bne.n	800249e <menu+0x104a>
 8002482:	4b19      	ldr	r3, [pc, #100]	@ (80024e8 <menu+0x1094>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	f083 0301 	eor.w	r3, r3, #1
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d006      	beq.n	800249e <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 8002490:	4b1b      	ldr	r3, [pc, #108]	@ (8002500 <menu+0x10ac>)
 8002492:	781a      	ldrb	r2, [r3, #0]
 8002494:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <menu+0x1098>)
 8002496:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002498:	4b15      	ldr	r3, [pc, #84]	@ (80024f0 <menu+0x109c>)
 800249a:	2201      	movs	r2, #1
 800249c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 800249e:	4b15      	ldr	r3, [pc, #84]	@ (80024f4 <menu+0x10a0>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b0b      	cmp	r3, #11
 80024a4:	f040 8090 	bne.w	80025c8 <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 80024a8:	4a17      	ldr	r2, [pc, #92]	@ (8002508 <menu+0x10b4>)
 80024aa:	2101      	movs	r1, #1
 80024ac:	2001      	movs	r0, #1
 80024ae:	f006 fea7 	bl	8009200 <lcd_print>

		if(kapi2Tip == 0) {
 80024b2:	4b16      	ldr	r3, [pc, #88]	@ (800250c <menu+0x10b8>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d105      	bne.n	80024c6 <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 80024ba:	4a15      	ldr	r2, [pc, #84]	@ (8002510 <menu+0x10bc>)
 80024bc:	2101      	movs	r1, #1
 80024be:	2002      	movs	r0, #2
 80024c0:	f006 fe9e 	bl	8009200 <lcd_print>
 80024c4:	e031      	b.n	800252a <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 80024c6:	4b11      	ldr	r3, [pc, #68]	@ (800250c <menu+0x10b8>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d124      	bne.n	8002518 <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 80024ce:	4a11      	ldr	r2, [pc, #68]	@ (8002514 <menu+0x10c0>)
 80024d0:	2101      	movs	r1, #1
 80024d2:	2002      	movs	r0, #2
 80024d4:	f006 fe94 	bl	8009200 <lcd_print>
 80024d8:	e027      	b.n	800252a <menu+0x10d6>
 80024da:	bf00      	nop
 80024dc:	200016c9 	.word	0x200016c9
 80024e0:	20000114 	.word	0x20000114
 80024e4:	40010800 	.word	0x40010800
 80024e8:	200016ef 	.word	0x200016ef
 80024ec:	20000fec 	.word	0x20000fec
 80024f0:	200016ec 	.word	0x200016ec
 80024f4:	200016c0 	.word	0x200016c0
 80024f8:	200019bc 	.word	0x200019bc
 80024fc:	200019d0 	.word	0x200019d0
 8002500:	200016d9 	.word	0x200016d9
 8002504:	2000105c 	.word	0x2000105c
 8002508:	200019e4 	.word	0x200019e4
 800250c:	200016ca 	.word	0x200016ca
 8002510:	20000100 	.word	0x20000100
 8002514:	200019a8 	.word	0x200019a8
		} else if(kapi2Tip == 2) {
 8002518:	4b73      	ldr	r3, [pc, #460]	@ (80026e8 <menu+0x1294>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d104      	bne.n	800252a <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 8002520:	4a72      	ldr	r2, [pc, #456]	@ (80026ec <menu+0x1298>)
 8002522:	2101      	movs	r1, #1
 8002524:	2002      	movs	r0, #2
 8002526:	f006 fe6b 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800252a:	2102      	movs	r1, #2
 800252c:	4870      	ldr	r0, [pc, #448]	@ (80026f0 <menu+0x129c>)
 800252e:	f008 f9bb 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002532:	4603      	mov	r3, r0
 8002534:	2b01      	cmp	r3, #1
 8002536:	d115      	bne.n	8002564 <menu+0x1110>
 8002538:	4b6e      	ldr	r3, [pc, #440]	@ (80026f4 <menu+0x12a0>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	f083 0301 	eor.w	r3, r3, #1
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00e      	beq.n	8002564 <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 8002546:	4b68      	ldr	r3, [pc, #416]	@ (80026e8 <menu+0x1294>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	3301      	adds	r3, #1
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4b66      	ldr	r3, [pc, #408]	@ (80026e8 <menu+0x1294>)
 8002550:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002552:	4b65      	ldr	r3, [pc, #404]	@ (80026e8 <menu+0x1294>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b02      	cmp	r3, #2
 8002558:	d902      	bls.n	8002560 <menu+0x110c>
				kapi2Tip = 0;
 800255a:	4b63      	ldr	r3, [pc, #396]	@ (80026e8 <menu+0x1294>)
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002560:	f001 fcbe 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002564:	2104      	movs	r1, #4
 8002566:	4862      	ldr	r0, [pc, #392]	@ (80026f0 <menu+0x129c>)
 8002568:	f008 f99e 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800256c:	4603      	mov	r3, r0
 800256e:	2b01      	cmp	r3, #1
 8002570:	d115      	bne.n	800259e <menu+0x114a>
 8002572:	4b60      	ldr	r3, [pc, #384]	@ (80026f4 <menu+0x12a0>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	f083 0301 	eor.w	r3, r3, #1
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00e      	beq.n	800259e <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 8002580:	4b59      	ldr	r3, [pc, #356]	@ (80026e8 <menu+0x1294>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	3b01      	subs	r3, #1
 8002586:	b2da      	uxtb	r2, r3
 8002588:	4b57      	ldr	r3, [pc, #348]	@ (80026e8 <menu+0x1294>)
 800258a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 800258c:	4b56      	ldr	r3, [pc, #344]	@ (80026e8 <menu+0x1294>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d902      	bls.n	800259a <menu+0x1146>
		   		kapi2Tip = 2;
 8002594:	4b54      	ldr	r3, [pc, #336]	@ (80026e8 <menu+0x1294>)
 8002596:	2202      	movs	r2, #2
 8002598:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800259a:	f001 fca1 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800259e:	2108      	movs	r1, #8
 80025a0:	4853      	ldr	r0, [pc, #332]	@ (80026f0 <menu+0x129c>)
 80025a2:	f008 f981 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d10d      	bne.n	80025c8 <menu+0x1174>
 80025ac:	4b51      	ldr	r3, [pc, #324]	@ (80026f4 <menu+0x12a0>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	f083 0301 	eor.w	r3, r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d006      	beq.n	80025c8 <menu+0x1174>
			eepromData[10] = kapi2Tip;
 80025ba:	4b4b      	ldr	r3, [pc, #300]	@ (80026e8 <menu+0x1294>)
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	4b4e      	ldr	r3, [pc, #312]	@ (80026f8 <menu+0x12a4>)
 80025c0:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 80025c2:	4b4e      	ldr	r3, [pc, #312]	@ (80026fc <menu+0x12a8>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 80025c8:	4b4d      	ldr	r3, [pc, #308]	@ (8002700 <menu+0x12ac>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b0c      	cmp	r3, #12
 80025ce:	d16c      	bne.n	80026aa <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 80025d0:	4a4c      	ldr	r2, [pc, #304]	@ (8002704 <menu+0x12b0>)
 80025d2:	2101      	movs	r1, #1
 80025d4:	2001      	movs	r0, #1
 80025d6:	f006 fe13 	bl	8009200 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80025da:	4a4b      	ldr	r2, [pc, #300]	@ (8002708 <menu+0x12b4>)
 80025dc:	2101      	movs	r1, #1
 80025de:	2002      	movs	r0, #2
 80025e0:	f006 fe0e 	bl	8009200 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 80025e4:	4b49      	ldr	r3, [pc, #292]	@ (800270c <menu+0x12b8>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	220a      	movs	r2, #10
 80025ea:	4949      	ldr	r1, [pc, #292]	@ (8002710 <menu+0x12bc>)
 80025ec:	4618      	mov	r0, r3
 80025ee:	f00b fcd3 	bl	800df98 <itoa>
		lcd_print(2,16,snum);
 80025f2:	4a47      	ldr	r2, [pc, #284]	@ (8002710 <menu+0x12bc>)
 80025f4:	2110      	movs	r1, #16
 80025f6:	2002      	movs	r0, #2
 80025f8:	f006 fe02 	bl	8009200 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80025fc:	2102      	movs	r1, #2
 80025fe:	483c      	ldr	r0, [pc, #240]	@ (80026f0 <menu+0x129c>)
 8002600:	f008 f952 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002604:	4603      	mov	r3, r0
 8002606:	2b01      	cmp	r3, #1
 8002608:	d119      	bne.n	800263e <menu+0x11ea>
 800260a:	4b3a      	ldr	r3, [pc, #232]	@ (80026f4 <menu+0x12a0>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	f083 0301 	eor.w	r3, r3, #1
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	d012      	beq.n	800263e <menu+0x11ea>
 8002618:	4b33      	ldr	r3, [pc, #204]	@ (80026e8 <menu+0x1294>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10e      	bne.n	800263e <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 8002620:	4b3a      	ldr	r3, [pc, #232]	@ (800270c <menu+0x12b8>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	3301      	adds	r3, #1
 8002626:	b2da      	uxtb	r2, r3
 8002628:	4b38      	ldr	r3, [pc, #224]	@ (800270c <menu+0x12b8>)
 800262a:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 800262c:	4b37      	ldr	r3, [pc, #220]	@ (800270c <menu+0x12b8>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b05      	cmp	r3, #5
 8002632:	d902      	bls.n	800263a <menu+0x11e6>
				kapi2AcSure = 0;
 8002634:	4b35      	ldr	r3, [pc, #212]	@ (800270c <menu+0x12b8>)
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800263a:	f001 fc51 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800263e:	2104      	movs	r1, #4
 8002640:	482b      	ldr	r0, [pc, #172]	@ (80026f0 <menu+0x129c>)
 8002642:	f008 f931 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002646:	4603      	mov	r3, r0
 8002648:	2b01      	cmp	r3, #1
 800264a:	d119      	bne.n	8002680 <menu+0x122c>
 800264c:	4b29      	ldr	r3, [pc, #164]	@ (80026f4 <menu+0x12a0>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	f083 0301 	eor.w	r3, r3, #1
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d012      	beq.n	8002680 <menu+0x122c>
 800265a:	4b23      	ldr	r3, [pc, #140]	@ (80026e8 <menu+0x1294>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10e      	bne.n	8002680 <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 8002662:	4b2a      	ldr	r3, [pc, #168]	@ (800270c <menu+0x12b8>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	3b01      	subs	r3, #1
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4b28      	ldr	r3, [pc, #160]	@ (800270c <menu+0x12b8>)
 800266c:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 800266e:	4b27      	ldr	r3, [pc, #156]	@ (800270c <menu+0x12b8>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b06      	cmp	r3, #6
 8002674:	d902      	bls.n	800267c <menu+0x1228>
		   		kapi2AcSure = 5;
 8002676:	4b25      	ldr	r3, [pc, #148]	@ (800270c <menu+0x12b8>)
 8002678:	2205      	movs	r2, #5
 800267a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800267c:	f001 fc30 	bl	8003ee0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002680:	2108      	movs	r1, #8
 8002682:	481b      	ldr	r0, [pc, #108]	@ (80026f0 <menu+0x129c>)
 8002684:	f008 f910 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002688:	4603      	mov	r3, r0
 800268a:	2b01      	cmp	r3, #1
 800268c:	d10d      	bne.n	80026aa <menu+0x1256>
 800268e:	4b19      	ldr	r3, [pc, #100]	@ (80026f4 <menu+0x12a0>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	f083 0301 	eor.w	r3, r3, #1
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b00      	cmp	r3, #0
 800269a:	d006      	beq.n	80026aa <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 800269c:	4b1b      	ldr	r3, [pc, #108]	@ (800270c <menu+0x12b8>)
 800269e:	781a      	ldrb	r2, [r3, #0]
 80026a0:	4b15      	ldr	r3, [pc, #84]	@ (80026f8 <menu+0x12a4>)
 80026a2:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80026a4:	4b15      	ldr	r3, [pc, #84]	@ (80026fc <menu+0x12a8>)
 80026a6:	2201      	movs	r2, #1
 80026a8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80026aa:	4b15      	ldr	r3, [pc, #84]	@ (8002700 <menu+0x12ac>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b0d      	cmp	r3, #13
 80026b0:	f040 8090 	bne.w	80027d4 <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 80026b4:	4a17      	ldr	r2, [pc, #92]	@ (8002714 <menu+0x12c0>)
 80026b6:	2101      	movs	r1, #1
 80026b8:	2001      	movs	r0, #1
 80026ba:	f006 fda1 	bl	8009200 <lcd_print>

		if(kapitablaTip == 0) {
 80026be:	4b16      	ldr	r3, [pc, #88]	@ (8002718 <menu+0x12c4>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d105      	bne.n	80026d2 <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 80026c6:	4a15      	ldr	r2, [pc, #84]	@ (800271c <menu+0x12c8>)
 80026c8:	2101      	movs	r1, #1
 80026ca:	2002      	movs	r0, #2
 80026cc:	f006 fd98 	bl	8009200 <lcd_print>
 80026d0:	e031      	b.n	8002736 <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 80026d2:	4b11      	ldr	r3, [pc, #68]	@ (8002718 <menu+0x12c4>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d124      	bne.n	8002724 <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 80026da:	4a11      	ldr	r2, [pc, #68]	@ (8002720 <menu+0x12cc>)
 80026dc:	2101      	movs	r1, #1
 80026de:	2002      	movs	r0, #2
 80026e0:	f006 fd8e 	bl	8009200 <lcd_print>
 80026e4:	e027      	b.n	8002736 <menu+0x12e2>
 80026e6:	bf00      	nop
 80026e8:	200016ca 	.word	0x200016ca
 80026ec:	20000114 	.word	0x20000114
 80026f0:	40010800 	.word	0x40010800
 80026f4:	200016ef 	.word	0x200016ef
 80026f8:	20000fec 	.word	0x20000fec
 80026fc:	200016ec 	.word	0x200016ec
 8002700:	200016c0 	.word	0x200016c0
 8002704:	200019f8 	.word	0x200019f8
 8002708:	200019d0 	.word	0x200019d0
 800270c:	200016da 	.word	0x200016da
 8002710:	2000105c 	.word	0x2000105c
 8002714:	20001a0c 	.word	0x20001a0c
 8002718:	200016cb 	.word	0x200016cb
 800271c:	20000100 	.word	0x20000100
 8002720:	200019a8 	.word	0x200019a8
		} else if(kapitablaTip == 2) {
 8002724:	4b3f      	ldr	r3, [pc, #252]	@ (8002824 <menu+0x13d0>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d104      	bne.n	8002736 <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 800272c:	4a3e      	ldr	r2, [pc, #248]	@ (8002828 <menu+0x13d4>)
 800272e:	2101      	movs	r1, #1
 8002730:	2002      	movs	r0, #2
 8002732:	f006 fd65 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002736:	2102      	movs	r1, #2
 8002738:	483c      	ldr	r0, [pc, #240]	@ (800282c <menu+0x13d8>)
 800273a:	f008 f8b5 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800273e:	4603      	mov	r3, r0
 8002740:	2b01      	cmp	r3, #1
 8002742:	d115      	bne.n	8002770 <menu+0x131c>
 8002744:	4b3a      	ldr	r3, [pc, #232]	@ (8002830 <menu+0x13dc>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	f083 0301 	eor.w	r3, r3, #1
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00e      	beq.n	8002770 <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 8002752:	4b34      	ldr	r3, [pc, #208]	@ (8002824 <menu+0x13d0>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	3301      	adds	r3, #1
 8002758:	b2da      	uxtb	r2, r3
 800275a:	4b32      	ldr	r3, [pc, #200]	@ (8002824 <menu+0x13d0>)
 800275c:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 800275e:	4b31      	ldr	r3, [pc, #196]	@ (8002824 <menu+0x13d0>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d902      	bls.n	800276c <menu+0x1318>
				kapitablaTip = 0;
 8002766:	4b2f      	ldr	r3, [pc, #188]	@ (8002824 <menu+0x13d0>)
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800276c:	f001 fbb8 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002770:	2104      	movs	r1, #4
 8002772:	482e      	ldr	r0, [pc, #184]	@ (800282c <menu+0x13d8>)
 8002774:	f008 f898 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002778:	4603      	mov	r3, r0
 800277a:	2b01      	cmp	r3, #1
 800277c:	d115      	bne.n	80027aa <menu+0x1356>
 800277e:	4b2c      	ldr	r3, [pc, #176]	@ (8002830 <menu+0x13dc>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	f083 0301 	eor.w	r3, r3, #1
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00e      	beq.n	80027aa <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 800278c:	4b25      	ldr	r3, [pc, #148]	@ (8002824 <menu+0x13d0>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	3b01      	subs	r3, #1
 8002792:	b2da      	uxtb	r2, r3
 8002794:	4b23      	ldr	r3, [pc, #140]	@ (8002824 <menu+0x13d0>)
 8002796:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002798:	4b22      	ldr	r3, [pc, #136]	@ (8002824 <menu+0x13d0>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d902      	bls.n	80027a6 <menu+0x1352>
		   		kapitablaTip = 2;
 80027a0:	4b20      	ldr	r3, [pc, #128]	@ (8002824 <menu+0x13d0>)
 80027a2:	2202      	movs	r2, #2
 80027a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027a6:	f001 fb9b 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027aa:	2108      	movs	r1, #8
 80027ac:	481f      	ldr	r0, [pc, #124]	@ (800282c <menu+0x13d8>)
 80027ae:	f008 f87b 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d10d      	bne.n	80027d4 <menu+0x1380>
 80027b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002830 <menu+0x13dc>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	f083 0301 	eor.w	r3, r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d006      	beq.n	80027d4 <menu+0x1380>
			eepromData[12] = kapitablaTip;
 80027c6:	4b17      	ldr	r3, [pc, #92]	@ (8002824 <menu+0x13d0>)
 80027c8:	781a      	ldrb	r2, [r3, #0]
 80027ca:	4b1a      	ldr	r3, [pc, #104]	@ (8002834 <menu+0x13e0>)
 80027cc:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 80027ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002838 <menu+0x13e4>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 80027d4:	4b19      	ldr	r3, [pc, #100]	@ (800283c <menu+0x13e8>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b0e      	cmp	r3, #14
 80027da:	f040 80a3 	bne.w	8002924 <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 80027de:	4a18      	ldr	r2, [pc, #96]	@ (8002840 <menu+0x13ec>)
 80027e0:	2101      	movs	r1, #1
 80027e2:	2001      	movs	r0, #1
 80027e4:	f006 fd0c 	bl	8009200 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 80027e8:	4b16      	ldr	r3, [pc, #88]	@ (8002844 <menu+0x13f0>)
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d105      	bne.n	80027fc <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 80027f0:	4a15      	ldr	r2, [pc, #84]	@ (8002848 <menu+0x13f4>)
 80027f2:	2101      	movs	r1, #1
 80027f4:	2002      	movs	r0, #2
 80027f6:	f006 fd03 	bl	8009200 <lcd_print>
 80027fa:	e034      	b.n	8002866 <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 80027fc:	4b11      	ldr	r3, [pc, #68]	@ (8002844 <menu+0x13f0>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d105      	bne.n	8002810 <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 8002804:	4a11      	ldr	r2, [pc, #68]	@ (800284c <menu+0x13f8>)
 8002806:	2101      	movs	r1, #1
 8002808:	2002      	movs	r0, #2
 800280a:	f006 fcf9 	bl	8009200 <lcd_print>
 800280e:	e02a      	b.n	8002866 <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 8002810:	4b0c      	ldr	r3, [pc, #48]	@ (8002844 <menu+0x13f0>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b02      	cmp	r3, #2
 8002816:	d11d      	bne.n	8002854 <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 8002818:	4a0d      	ldr	r2, [pc, #52]	@ (8002850 <menu+0x13fc>)
 800281a:	2101      	movs	r1, #1
 800281c:	2002      	movs	r0, #2
 800281e:	f006 fcef 	bl	8009200 <lcd_print>
 8002822:	e020      	b.n	8002866 <menu+0x1412>
 8002824:	200016cb 	.word	0x200016cb
 8002828:	20000114 	.word	0x20000114
 800282c:	40010800 	.word	0x40010800
 8002830:	200016ef 	.word	0x200016ef
 8002834:	20000fec 	.word	0x20000fec
 8002838:	200016ec 	.word	0x200016ec
 800283c:	200016c0 	.word	0x200016c0
 8002840:	20001a20 	.word	0x20001a20
 8002844:	200016cd 	.word	0x200016cd
 8002848:	20001a34 	.word	0x20001a34
 800284c:	20001a48 	.word	0x20001a48
 8002850:	20001a5c 	.word	0x20001a5c
		} else if(kapiTablaAcKonum == 3) {
 8002854:	4b76      	ldr	r3, [pc, #472]	@ (8002a30 <menu+0x15dc>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b03      	cmp	r3, #3
 800285a:	d104      	bne.n	8002866 <menu+0x1412>
			lcd_print(2, 1, pasifText);
 800285c:	4a75      	ldr	r2, [pc, #468]	@ (8002a34 <menu+0x15e0>)
 800285e:	2101      	movs	r1, #1
 8002860:	2002      	movs	r0, #2
 8002862:	f006 fccd 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002866:	2102      	movs	r1, #2
 8002868:	4873      	ldr	r0, [pc, #460]	@ (8002a38 <menu+0x15e4>)
 800286a:	f008 f81d 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800286e:	4603      	mov	r3, r0
 8002870:	2b01      	cmp	r3, #1
 8002872:	d115      	bne.n	80028a0 <menu+0x144c>
 8002874:	4b71      	ldr	r3, [pc, #452]	@ (8002a3c <menu+0x15e8>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	f083 0301 	eor.w	r3, r3, #1
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d00e      	beq.n	80028a0 <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002882:	4b6b      	ldr	r3, [pc, #428]	@ (8002a30 <menu+0x15dc>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	3301      	adds	r3, #1
 8002888:	b2da      	uxtb	r2, r3
 800288a:	4b69      	ldr	r3, [pc, #420]	@ (8002a30 <menu+0x15dc>)
 800288c:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 800288e:	4b68      	ldr	r3, [pc, #416]	@ (8002a30 <menu+0x15dc>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	2b02      	cmp	r3, #2
 8002894:	d902      	bls.n	800289c <menu+0x1448>
				kapiTablaAcKonum = 0;
 8002896:	4b66      	ldr	r3, [pc, #408]	@ (8002a30 <menu+0x15dc>)
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800289c:	f001 fb20 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028a0:	2104      	movs	r1, #4
 80028a2:	4865      	ldr	r0, [pc, #404]	@ (8002a38 <menu+0x15e4>)
 80028a4:	f008 f800 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d115      	bne.n	80028da <menu+0x1486>
 80028ae:	4b63      	ldr	r3, [pc, #396]	@ (8002a3c <menu+0x15e8>)
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	f083 0301 	eor.w	r3, r3, #1
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00e      	beq.n	80028da <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80028bc:	4b5c      	ldr	r3, [pc, #368]	@ (8002a30 <menu+0x15dc>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	4b5a      	ldr	r3, [pc, #360]	@ (8002a30 <menu+0x15dc>)
 80028c6:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 80028c8:	4b59      	ldr	r3, [pc, #356]	@ (8002a30 <menu+0x15dc>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d902      	bls.n	80028d6 <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 80028d0:	4b57      	ldr	r3, [pc, #348]	@ (8002a30 <menu+0x15dc>)
 80028d2:	2202      	movs	r2, #2
 80028d4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028d6:	f001 fb03 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028da:	2108      	movs	r1, #8
 80028dc:	4856      	ldr	r0, [pc, #344]	@ (8002a38 <menu+0x15e4>)
 80028de:	f007 ffe3 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d11d      	bne.n	8002924 <menu+0x14d0>
 80028e8:	4b54      	ldr	r3, [pc, #336]	@ (8002a3c <menu+0x15e8>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	f083 0301 	eor.w	r3, r3, #1
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d016      	beq.n	8002924 <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 80028f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002a30 <menu+0x15dc>)
 80028f8:	781a      	ldrb	r2, [r3, #0]
 80028fa:	4b51      	ldr	r3, [pc, #324]	@ (8002a40 <menu+0x15ec>)
 80028fc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002900:	4b4b      	ldr	r3, [pc, #300]	@ (8002a30 <menu+0x15dc>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <menu+0x14bc>
 8002908:	4b49      	ldr	r3, [pc, #292]	@ (8002a30 <menu+0x15dc>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b02      	cmp	r3, #2
 800290e:	d106      	bne.n	800291e <menu+0x14ca>
				altLimit = 1;
 8002910:	4b4c      	ldr	r3, [pc, #304]	@ (8002a44 <menu+0x15f0>)
 8002912:	2201      	movs	r2, #1
 8002914:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002916:	4b4b      	ldr	r3, [pc, #300]	@ (8002a44 <menu+0x15f0>)
 8002918:	781a      	ldrb	r2, [r3, #0]
 800291a:	4b49      	ldr	r3, [pc, #292]	@ (8002a40 <menu+0x15ec>)
 800291c:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 800291e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a48 <menu+0x15f4>)
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002924:	4b49      	ldr	r3, [pc, #292]	@ (8002a4c <menu+0x15f8>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	2b0f      	cmp	r3, #15
 800292a:	d16c      	bne.n	8002a06 <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 800292c:	4a48      	ldr	r2, [pc, #288]	@ (8002a50 <menu+0x15fc>)
 800292e:	2101      	movs	r1, #1
 8002930:	2001      	movs	r0, #1
 8002932:	f006 fc65 	bl	8009200 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002936:	4a47      	ldr	r2, [pc, #284]	@ (8002a54 <menu+0x1600>)
 8002938:	2101      	movs	r1, #1
 800293a:	2002      	movs	r0, #2
 800293c:	f006 fc60 	bl	8009200 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002940:	4b45      	ldr	r3, [pc, #276]	@ (8002a58 <menu+0x1604>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	220a      	movs	r2, #10
 8002946:	4945      	ldr	r1, [pc, #276]	@ (8002a5c <menu+0x1608>)
 8002948:	4618      	mov	r0, r3
 800294a:	f00b fb25 	bl	800df98 <itoa>
		lcd_print(2,16,snum);
 800294e:	4a43      	ldr	r2, [pc, #268]	@ (8002a5c <menu+0x1608>)
 8002950:	2110      	movs	r1, #16
 8002952:	2002      	movs	r0, #2
 8002954:	f006 fc54 	bl	8009200 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002958:	2102      	movs	r1, #2
 800295a:	4837      	ldr	r0, [pc, #220]	@ (8002a38 <menu+0x15e4>)
 800295c:	f007 ffa4 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002960:	4603      	mov	r3, r0
 8002962:	2b01      	cmp	r3, #1
 8002964:	d119      	bne.n	800299a <menu+0x1546>
 8002966:	4b35      	ldr	r3, [pc, #212]	@ (8002a3c <menu+0x15e8>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	f083 0301 	eor.w	r3, r3, #1
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b00      	cmp	r3, #0
 8002972:	d012      	beq.n	800299a <menu+0x1546>
 8002974:	4b3a      	ldr	r3, [pc, #232]	@ (8002a60 <menu+0x160c>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10e      	bne.n	800299a <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 800297c:	4b36      	ldr	r3, [pc, #216]	@ (8002a58 <menu+0x1604>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	3301      	adds	r3, #1
 8002982:	b2da      	uxtb	r2, r3
 8002984:	4b34      	ldr	r3, [pc, #208]	@ (8002a58 <menu+0x1604>)
 8002986:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002988:	4b33      	ldr	r3, [pc, #204]	@ (8002a58 <menu+0x1604>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b05      	cmp	r3, #5
 800298e:	d902      	bls.n	8002996 <menu+0x1542>
				kapiTablaAcSure = 0;
 8002990:	4b31      	ldr	r3, [pc, #196]	@ (8002a58 <menu+0x1604>)
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002996:	f001 faa3 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800299a:	2104      	movs	r1, #4
 800299c:	4826      	ldr	r0, [pc, #152]	@ (8002a38 <menu+0x15e4>)
 800299e:	f007 ff83 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d119      	bne.n	80029dc <menu+0x1588>
 80029a8:	4b24      	ldr	r3, [pc, #144]	@ (8002a3c <menu+0x15e8>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	f083 0301 	eor.w	r3, r3, #1
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d012      	beq.n	80029dc <menu+0x1588>
 80029b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a60 <menu+0x160c>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10e      	bne.n	80029dc <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80029be:	4b26      	ldr	r3, [pc, #152]	@ (8002a58 <menu+0x1604>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	4b24      	ldr	r3, [pc, #144]	@ (8002a58 <menu+0x1604>)
 80029c8:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80029ca:	4b23      	ldr	r3, [pc, #140]	@ (8002a58 <menu+0x1604>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	2b06      	cmp	r3, #6
 80029d0:	d902      	bls.n	80029d8 <menu+0x1584>
		   		kapiTablaAcSure = 5;
 80029d2:	4b21      	ldr	r3, [pc, #132]	@ (8002a58 <menu+0x1604>)
 80029d4:	2205      	movs	r2, #5
 80029d6:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80029d8:	f001 fa82 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029dc:	2108      	movs	r1, #8
 80029de:	4816      	ldr	r0, [pc, #88]	@ (8002a38 <menu+0x15e4>)
 80029e0:	f007 ff62 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d10d      	bne.n	8002a06 <menu+0x15b2>
 80029ea:	4b14      	ldr	r3, [pc, #80]	@ (8002a3c <menu+0x15e8>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	f083 0301 	eor.w	r3, r3, #1
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d006      	beq.n	8002a06 <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 80029f8:	4b17      	ldr	r3, [pc, #92]	@ (8002a58 <menu+0x1604>)
 80029fa:	781a      	ldrb	r2, [r3, #0]
 80029fc:	4b10      	ldr	r3, [pc, #64]	@ (8002a40 <menu+0x15ec>)
 80029fe:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002a00:	4b11      	ldr	r3, [pc, #68]	@ (8002a48 <menu+0x15f4>)
 8002a02:	2201      	movs	r2, #1
 8002a04:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002a06:	4b11      	ldr	r3, [pc, #68]	@ (8002a4c <menu+0x15f8>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b10      	cmp	r3, #16
 8002a0c:	f040 8086 	bne.w	8002b1c <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002a10:	4a14      	ldr	r2, [pc, #80]	@ (8002a64 <menu+0x1610>)
 8002a12:	2101      	movs	r1, #1
 8002a14:	2001      	movs	r0, #1
 8002a16:	f006 fbf3 	bl	8009200 <lcd_print>

		if(yukariYavasLimit == 0) {
 8002a1a:	4b13      	ldr	r3, [pc, #76]	@ (8002a68 <menu+0x1614>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d124      	bne.n	8002a6c <menu+0x1618>
			lcd_print(2, 1, pasifText);
 8002a22:	4a04      	ldr	r2, [pc, #16]	@ (8002a34 <menu+0x15e0>)
 8002a24:	2101      	movs	r1, #1
 8002a26:	2002      	movs	r0, #2
 8002a28:	f006 fbea 	bl	8009200 <lcd_print>
 8002a2c:	e027      	b.n	8002a7e <menu+0x162a>
 8002a2e:	bf00      	nop
 8002a30:	200016cd 	.word	0x200016cd
 8002a34:	200018a4 	.word	0x200018a4
 8002a38:	40010800 	.word	0x40010800
 8002a3c:	200016ef 	.word	0x200016ef
 8002a40:	20000fec 	.word	0x20000fec
 8002a44:	200016c6 	.word	0x200016c6
 8002a48:	200016ec 	.word	0x200016ec
 8002a4c:	200016c0 	.word	0x200016c0
 8002a50:	20001a70 	.word	0x20001a70
 8002a54:	200019d0 	.word	0x200019d0
 8002a58:	200016db 	.word	0x200016db
 8002a5c:	2000105c 	.word	0x2000105c
 8002a60:	200016cb 	.word	0x200016cb
 8002a64:	20001a84 	.word	0x20001a84
 8002a68:	200016ce 	.word	0x200016ce
		} else if(yukariYavasLimit == 1) {
 8002a6c:	4b84      	ldr	r3, [pc, #528]	@ (8002c80 <menu+0x182c>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d104      	bne.n	8002a7e <menu+0x162a>
			lcd_print(2, 1, aktifText);
 8002a74:	4a83      	ldr	r2, [pc, #524]	@ (8002c84 <menu+0x1830>)
 8002a76:	2101      	movs	r1, #1
 8002a78:	2002      	movs	r0, #2
 8002a7a:	f006 fbc1 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a7e:	2102      	movs	r1, #2
 8002a80:	4881      	ldr	r0, [pc, #516]	@ (8002c88 <menu+0x1834>)
 8002a82:	f007 ff11 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d115      	bne.n	8002ab8 <menu+0x1664>
 8002a8c:	4b7f      	ldr	r3, [pc, #508]	@ (8002c8c <menu+0x1838>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	f083 0301 	eor.w	r3, r3, #1
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00e      	beq.n	8002ab8 <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002a9a:	4b79      	ldr	r3, [pc, #484]	@ (8002c80 <menu+0x182c>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	4b77      	ldr	r3, [pc, #476]	@ (8002c80 <menu+0x182c>)
 8002aa4:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002aa6:	4b76      	ldr	r3, [pc, #472]	@ (8002c80 <menu+0x182c>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d902      	bls.n	8002ab4 <menu+0x1660>
				yukariYavasLimit = 0;
 8002aae:	4b74      	ldr	r3, [pc, #464]	@ (8002c80 <menu+0x182c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ab4:	f001 fa14 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ab8:	2104      	movs	r1, #4
 8002aba:	4873      	ldr	r0, [pc, #460]	@ (8002c88 <menu+0x1834>)
 8002abc:	f007 fef4 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d115      	bne.n	8002af2 <menu+0x169e>
 8002ac6:	4b71      	ldr	r3, [pc, #452]	@ (8002c8c <menu+0x1838>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	f083 0301 	eor.w	r3, r3, #1
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00e      	beq.n	8002af2 <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002ad4:	4b6a      	ldr	r3, [pc, #424]	@ (8002c80 <menu+0x182c>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	4b68      	ldr	r3, [pc, #416]	@ (8002c80 <menu+0x182c>)
 8002ade:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002ae0:	4b67      	ldr	r3, [pc, #412]	@ (8002c80 <menu+0x182c>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d002      	beq.n	8002aee <menu+0x169a>
		   		yukariYavasLimit = 1;
 8002ae8:	4b65      	ldr	r3, [pc, #404]	@ (8002c80 <menu+0x182c>)
 8002aea:	2201      	movs	r2, #1
 8002aec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002aee:	f001 f9f7 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002af2:	2108      	movs	r1, #8
 8002af4:	4864      	ldr	r0, [pc, #400]	@ (8002c88 <menu+0x1834>)
 8002af6:	f007 fed7 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d10d      	bne.n	8002b1c <menu+0x16c8>
 8002b00:	4b62      	ldr	r3, [pc, #392]	@ (8002c8c <menu+0x1838>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	f083 0301 	eor.w	r3, r3, #1
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d006      	beq.n	8002b1c <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 8002b0e:	4b5c      	ldr	r3, [pc, #368]	@ (8002c80 <menu+0x182c>)
 8002b10:	781a      	ldrb	r2, [r3, #0]
 8002b12:	4b5f      	ldr	r3, [pc, #380]	@ (8002c90 <menu+0x183c>)
 8002b14:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002b16:	4b5f      	ldr	r3, [pc, #380]	@ (8002c94 <menu+0x1840>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002b1c:	4b5e      	ldr	r3, [pc, #376]	@ (8002c98 <menu+0x1844>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b11      	cmp	r3, #17
 8002b22:	f040 808b 	bne.w	8002c3c <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 8002b26:	4a5d      	ldr	r2, [pc, #372]	@ (8002c9c <menu+0x1848>)
 8002b28:	2101      	movs	r1, #1
 8002b2a:	2001      	movs	r0, #1
 8002b2c:	f006 fb68 	bl	8009200 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002b30:	4b5b      	ldr	r3, [pc, #364]	@ (8002ca0 <menu+0x184c>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d105      	bne.n	8002b44 <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 8002b38:	4a5a      	ldr	r2, [pc, #360]	@ (8002ca4 <menu+0x1850>)
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	2002      	movs	r0, #2
 8002b3e:	f006 fb5f 	bl	8009200 <lcd_print>
 8002b42:	e012      	b.n	8002b6a <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 8002b44:	4b56      	ldr	r3, [pc, #344]	@ (8002ca0 <menu+0x184c>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d105      	bne.n	8002b58 <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 8002b4c:	4a56      	ldr	r2, [pc, #344]	@ (8002ca8 <menu+0x1854>)
 8002b4e:	2101      	movs	r1, #1
 8002b50:	2002      	movs	r0, #2
 8002b52:	f006 fb55 	bl	8009200 <lcd_print>
 8002b56:	e008      	b.n	8002b6a <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 8002b58:	4b51      	ldr	r3, [pc, #324]	@ (8002ca0 <menu+0x184c>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d104      	bne.n	8002b6a <menu+0x1716>
			lcd_print(2, 1, pasifText);
 8002b60:	4a52      	ldr	r2, [pc, #328]	@ (8002cac <menu+0x1858>)
 8002b62:	2101      	movs	r1, #1
 8002b64:	2002      	movs	r0, #2
 8002b66:	f006 fb4b 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	4846      	ldr	r0, [pc, #280]	@ (8002c88 <menu+0x1834>)
 8002b6e:	f007 fe9b 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d115      	bne.n	8002ba4 <menu+0x1750>
 8002b78:	4b44      	ldr	r3, [pc, #272]	@ (8002c8c <menu+0x1838>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	f083 0301 	eor.w	r3, r3, #1
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00e      	beq.n	8002ba4 <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002b86:	4b46      	ldr	r3, [pc, #280]	@ (8002ca0 <menu+0x184c>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	b2da      	uxtb	r2, r3
 8002b8e:	4b44      	ldr	r3, [pc, #272]	@ (8002ca0 <menu+0x184c>)
 8002b90:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002b92:	4b43      	ldr	r3, [pc, #268]	@ (8002ca0 <menu+0x184c>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d902      	bls.n	8002ba0 <menu+0x174c>
				devirmeYuruyusSecim = 0;
 8002b9a:	4b41      	ldr	r3, [pc, #260]	@ (8002ca0 <menu+0x184c>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ba0:	f001 f99e 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ba4:	2104      	movs	r1, #4
 8002ba6:	4838      	ldr	r0, [pc, #224]	@ (8002c88 <menu+0x1834>)
 8002ba8:	f007 fe7e 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d115      	bne.n	8002bde <menu+0x178a>
 8002bb2:	4b36      	ldr	r3, [pc, #216]	@ (8002c8c <menu+0x1838>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	f083 0301 	eor.w	r3, r3, #1
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00e      	beq.n	8002bde <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002bc0:	4b37      	ldr	r3, [pc, #220]	@ (8002ca0 <menu+0x184c>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	4b35      	ldr	r3, [pc, #212]	@ (8002ca0 <menu+0x184c>)
 8002bca:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002bcc:	4b34      	ldr	r3, [pc, #208]	@ (8002ca0 <menu+0x184c>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b03      	cmp	r3, #3
 8002bd2:	d902      	bls.n	8002bda <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 8002bd4:	4b32      	ldr	r3, [pc, #200]	@ (8002ca0 <menu+0x184c>)
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bda:	f001 f981 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bde:	2108      	movs	r1, #8
 8002be0:	4829      	ldr	r0, [pc, #164]	@ (8002c88 <menu+0x1834>)
 8002be2:	f007 fe61 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d127      	bne.n	8002c3c <menu+0x17e8>
 8002bec:	4b27      	ldr	r3, [pc, #156]	@ (8002c8c <menu+0x1838>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	f083 0301 	eor.w	r3, r3, #1
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d020      	beq.n	8002c3c <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 8002bfa:	4b29      	ldr	r3, [pc, #164]	@ (8002ca0 <menu+0x184c>)
 8002bfc:	781a      	ldrb	r2, [r3, #0]
 8002bfe:	4b24      	ldr	r3, [pc, #144]	@ (8002c90 <menu+0x183c>)
 8002c00:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002c02:	4b27      	ldr	r3, [pc, #156]	@ (8002ca0 <menu+0x184c>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d003      	beq.n	8002c12 <menu+0x17be>
 8002c0a:	4b25      	ldr	r3, [pc, #148]	@ (8002ca0 <menu+0x184c>)
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d106      	bne.n	8002c20 <menu+0x17cc>
				calismaSekli = 0;
 8002c12:	4b27      	ldr	r3, [pc, #156]	@ (8002cb0 <menu+0x185c>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002c18:	4b25      	ldr	r3, [pc, #148]	@ (8002cb0 <menu+0x185c>)
 8002c1a:	781a      	ldrb	r2, [r3, #0]
 8002c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8002c90 <menu+0x183c>)
 8002c1e:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002c20:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca0 <menu+0x184c>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d106      	bne.n	8002c36 <menu+0x17e2>
				devirmeSilindirTipi = 1;
 8002c28:	4b22      	ldr	r3, [pc, #136]	@ (8002cb4 <menu+0x1860>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002c2e:	4b21      	ldr	r3, [pc, #132]	@ (8002cb4 <menu+0x1860>)
 8002c30:	781a      	ldrb	r2, [r3, #0]
 8002c32:	4b17      	ldr	r3, [pc, #92]	@ (8002c90 <menu+0x183c>)
 8002c34:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002c36:	4b17      	ldr	r3, [pc, #92]	@ (8002c94 <menu+0x1840>)
 8002c38:	2201      	movs	r2, #1
 8002c3a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002c3c:	4b16      	ldr	r3, [pc, #88]	@ (8002c98 <menu+0x1844>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b12      	cmp	r3, #18
 8002c42:	f040 8097 	bne.w	8002d74 <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 8002c46:	4b16      	ldr	r3, [pc, #88]	@ (8002ca0 <menu+0x184c>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d105      	bne.n	8002c5a <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 8002c4e:	4a1a      	ldr	r2, [pc, #104]	@ (8002cb8 <menu+0x1864>)
 8002c50:	2101      	movs	r1, #1
 8002c52:	2001      	movs	r0, #1
 8002c54:	f006 fad4 	bl	8009200 <lcd_print>
 8002c58:	e008      	b.n	8002c6c <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 8002c5a:	4b11      	ldr	r3, [pc, #68]	@ (8002ca0 <menu+0x184c>)
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d104      	bne.n	8002c6c <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 8002c62:	4a16      	ldr	r2, [pc, #88]	@ (8002cbc <menu+0x1868>)
 8002c64:	2101      	movs	r1, #1
 8002c66:	2001      	movs	r0, #1
 8002c68:	f006 faca 	bl	8009200 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002c6c:	4b14      	ldr	r3, [pc, #80]	@ (8002cc0 <menu+0x186c>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d127      	bne.n	8002cc4 <menu+0x1870>
			lcd_print(2, 1, pasifText);
 8002c74:	4a0d      	ldr	r2, [pc, #52]	@ (8002cac <menu+0x1858>)
 8002c76:	2101      	movs	r1, #1
 8002c78:	2002      	movs	r0, #2
 8002c7a:	f006 fac1 	bl	8009200 <lcd_print>
 8002c7e:	e02a      	b.n	8002cd6 <menu+0x1882>
 8002c80:	200016ce 	.word	0x200016ce
 8002c84:	200018b8 	.word	0x200018b8
 8002c88:	40010800 	.word	0x40010800
 8002c8c:	200016ef 	.word	0x200016ef
 8002c90:	20000fec 	.word	0x20000fec
 8002c94:	200016ec 	.word	0x200016ec
 8002c98:	200016c0 	.word	0x200016c0
 8002c9c:	20001a98 	.word	0x20001a98
 8002ca0:	200016cf 	.word	0x200016cf
 8002ca4:	20001aac 	.word	0x20001aac
 8002ca8:	20001ac0 	.word	0x20001ac0
 8002cac:	200018a4 	.word	0x200018a4
 8002cb0:	200016c1 	.word	0x200016c1
 8002cb4:	200016d2 	.word	0x200016d2
 8002cb8:	20001ad4 	.word	0x20001ad4
 8002cbc:	20001ae8 	.word	0x20001ae8
 8002cc0:	200016d0 	.word	0x200016d0
		} else if(devirmeYukariIleriLimit == 1){
 8002cc4:	4b79      	ldr	r3, [pc, #484]	@ (8002eac <menu+0x1a58>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d104      	bne.n	8002cd6 <menu+0x1882>
			lcd_print(2, 1, aktifText);
 8002ccc:	4a78      	ldr	r2, [pc, #480]	@ (8002eb0 <menu+0x1a5c>)
 8002cce:	2101      	movs	r1, #1
 8002cd0:	2002      	movs	r0, #2
 8002cd2:	f006 fa95 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cd6:	2102      	movs	r1, #2
 8002cd8:	4876      	ldr	r0, [pc, #472]	@ (8002eb4 <menu+0x1a60>)
 8002cda:	f007 fde5 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d115      	bne.n	8002d10 <menu+0x18bc>
 8002ce4:	4b74      	ldr	r3, [pc, #464]	@ (8002eb8 <menu+0x1a64>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	f083 0301 	eor.w	r3, r3, #1
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00e      	beq.n	8002d10 <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002cf2:	4b6e      	ldr	r3, [pc, #440]	@ (8002eac <menu+0x1a58>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4b6c      	ldr	r3, [pc, #432]	@ (8002eac <menu+0x1a58>)
 8002cfc:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002cfe:	4b6b      	ldr	r3, [pc, #428]	@ (8002eac <menu+0x1a58>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d902      	bls.n	8002d0c <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 8002d06:	4b69      	ldr	r3, [pc, #420]	@ (8002eac <menu+0x1a58>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d0c:	f001 f8e8 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d10:	2104      	movs	r1, #4
 8002d12:	4868      	ldr	r0, [pc, #416]	@ (8002eb4 <menu+0x1a60>)
 8002d14:	f007 fdc8 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d115      	bne.n	8002d4a <menu+0x18f6>
 8002d1e:	4b66      	ldr	r3, [pc, #408]	@ (8002eb8 <menu+0x1a64>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	f083 0301 	eor.w	r3, r3, #1
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00e      	beq.n	8002d4a <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002d2c:	4b5f      	ldr	r3, [pc, #380]	@ (8002eac <menu+0x1a58>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	4b5d      	ldr	r3, [pc, #372]	@ (8002eac <menu+0x1a58>)
 8002d36:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002d38:	4b5c      	ldr	r3, [pc, #368]	@ (8002eac <menu+0x1a58>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 8002d40:	4b5a      	ldr	r3, [pc, #360]	@ (8002eac <menu+0x1a58>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d46:	f001 f8cb 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d4a:	2108      	movs	r1, #8
 8002d4c:	4859      	ldr	r0, [pc, #356]	@ (8002eb4 <menu+0x1a60>)
 8002d4e:	f007 fdab 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d10d      	bne.n	8002d74 <menu+0x1920>
 8002d58:	4b57      	ldr	r3, [pc, #348]	@ (8002eb8 <menu+0x1a64>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	f083 0301 	eor.w	r3, r3, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d006      	beq.n	8002d74 <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 8002d66:	4b51      	ldr	r3, [pc, #324]	@ (8002eac <menu+0x1a58>)
 8002d68:	781a      	ldrb	r2, [r3, #0]
 8002d6a:	4b54      	ldr	r3, [pc, #336]	@ (8002ebc <menu+0x1a68>)
 8002d6c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002d6e:	4b54      	ldr	r3, [pc, #336]	@ (8002ec0 <menu+0x1a6c>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002d74:	4b53      	ldr	r3, [pc, #332]	@ (8002ec4 <menu+0x1a70>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b13      	cmp	r3, #19
 8002d7a:	d174      	bne.n	8002e66 <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 8002d7c:	4b52      	ldr	r3, [pc, #328]	@ (8002ec8 <menu+0x1a74>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d105      	bne.n	8002d90 <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002d84:	4a51      	ldr	r2, [pc, #324]	@ (8002ecc <menu+0x1a78>)
 8002d86:	2101      	movs	r1, #1
 8002d88:	2001      	movs	r0, #1
 8002d8a:	f006 fa39 	bl	8009200 <lcd_print>
 8002d8e:	e008      	b.n	8002da2 <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 8002d90:	4b4d      	ldr	r3, [pc, #308]	@ (8002ec8 <menu+0x1a74>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d104      	bne.n	8002da2 <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002d98:	4a4d      	ldr	r2, [pc, #308]	@ (8002ed0 <menu+0x1a7c>)
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	f006 fa2f 	bl	8009200 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002da2:	4b4c      	ldr	r3, [pc, #304]	@ (8002ed4 <menu+0x1a80>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d105      	bne.n	8002db6 <menu+0x1962>
			lcd_print(2, 1, pasifText);
 8002daa:	4a4b      	ldr	r2, [pc, #300]	@ (8002ed8 <menu+0x1a84>)
 8002dac:	2101      	movs	r1, #1
 8002dae:	2002      	movs	r0, #2
 8002db0:	f006 fa26 	bl	8009200 <lcd_print>
 8002db4:	e008      	b.n	8002dc8 <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002db6:	4b47      	ldr	r3, [pc, #284]	@ (8002ed4 <menu+0x1a80>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d104      	bne.n	8002dc8 <menu+0x1974>
			lcd_print(2, 1, aktifText);
 8002dbe:	4a3c      	ldr	r2, [pc, #240]	@ (8002eb0 <menu+0x1a5c>)
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	2002      	movs	r0, #2
 8002dc4:	f006 fa1c 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dc8:	2102      	movs	r1, #2
 8002dca:	483a      	ldr	r0, [pc, #232]	@ (8002eb4 <menu+0x1a60>)
 8002dcc:	f007 fd6c 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d115      	bne.n	8002e02 <menu+0x19ae>
 8002dd6:	4b38      	ldr	r3, [pc, #224]	@ (8002eb8 <menu+0x1a64>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	f083 0301 	eor.w	r3, r3, #1
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00e      	beq.n	8002e02 <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002de4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed4 <menu+0x1a80>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	3301      	adds	r3, #1
 8002dea:	b2da      	uxtb	r2, r3
 8002dec:	4b39      	ldr	r3, [pc, #228]	@ (8002ed4 <menu+0x1a80>)
 8002dee:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002df0:	4b38      	ldr	r3, [pc, #224]	@ (8002ed4 <menu+0x1a80>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d902      	bls.n	8002dfe <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 8002df8:	4b36      	ldr	r3, [pc, #216]	@ (8002ed4 <menu+0x1a80>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002dfe:	f001 f86f 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e02:	2104      	movs	r1, #4
 8002e04:	482b      	ldr	r0, [pc, #172]	@ (8002eb4 <menu+0x1a60>)
 8002e06:	f007 fd4f 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d115      	bne.n	8002e3c <menu+0x19e8>
 8002e10:	4b29      	ldr	r3, [pc, #164]	@ (8002eb8 <menu+0x1a64>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	f083 0301 	eor.w	r3, r3, #1
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d00e      	beq.n	8002e3c <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed4 <menu+0x1a80>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	4b2b      	ldr	r3, [pc, #172]	@ (8002ed4 <menu+0x1a80>)
 8002e28:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002ed4 <menu+0x1a80>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 8002e32:	4b28      	ldr	r3, [pc, #160]	@ (8002ed4 <menu+0x1a80>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e38:	f001 f852 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e3c:	2108      	movs	r1, #8
 8002e3e:	481d      	ldr	r0, [pc, #116]	@ (8002eb4 <menu+0x1a60>)
 8002e40:	f007 fd32 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d10d      	bne.n	8002e66 <menu+0x1a12>
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb8 <menu+0x1a64>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	f083 0301 	eor.w	r3, r3, #1
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d006      	beq.n	8002e66 <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002e58:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed4 <menu+0x1a80>)
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	4b17      	ldr	r3, [pc, #92]	@ (8002ebc <menu+0x1a68>)
 8002e5e:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002e60:	4b17      	ldr	r3, [pc, #92]	@ (8002ec0 <menu+0x1a6c>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002e66:	4b17      	ldr	r3, [pc, #92]	@ (8002ec4 <menu+0x1a70>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b14      	cmp	r3, #20
 8002e6c:	f040 809e 	bne.w	8002fac <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 8002e70:	4b15      	ldr	r3, [pc, #84]	@ (8002ec8 <menu+0x1a74>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d105      	bne.n	8002e84 <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 8002e78:	4a18      	ldr	r2, [pc, #96]	@ (8002edc <menu+0x1a88>)
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	f006 f9bf 	bl	8009200 <lcd_print>
 8002e82:	e008      	b.n	8002e96 <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 8002e84:	4b10      	ldr	r3, [pc, #64]	@ (8002ec8 <menu+0x1a74>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d104      	bne.n	8002e96 <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8002e8c:	4a14      	ldr	r2, [pc, #80]	@ (8002ee0 <menu+0x1a8c>)
 8002e8e:	2101      	movs	r1, #1
 8002e90:	2001      	movs	r0, #1
 8002e92:	f006 f9b5 	bl	8009200 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002e96:	4b13      	ldr	r3, [pc, #76]	@ (8002ee4 <menu+0x1a90>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d126      	bne.n	8002eec <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 8002e9e:	4a12      	ldr	r2, [pc, #72]	@ (8002ee8 <menu+0x1a94>)
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	2002      	movs	r0, #2
 8002ea4:	f006 f9ac 	bl	8009200 <lcd_print>
 8002ea8:	e029      	b.n	8002efe <menu+0x1aaa>
 8002eaa:	bf00      	nop
 8002eac:	200016d0 	.word	0x200016d0
 8002eb0:	200018b8 	.word	0x200018b8
 8002eb4:	40010800 	.word	0x40010800
 8002eb8:	200016ef 	.word	0x200016ef
 8002ebc:	20000fec 	.word	0x20000fec
 8002ec0:	200016ec 	.word	0x200016ec
 8002ec4:	200016c0 	.word	0x200016c0
 8002ec8:	200016cf 	.word	0x200016cf
 8002ecc:	20001afc 	.word	0x20001afc
 8002ed0:	20001b10 	.word	0x20001b10
 8002ed4:	200016d1 	.word	0x200016d1
 8002ed8:	200018a4 	.word	0x200018a4
 8002edc:	20001b24 	.word	0x20001b24
 8002ee0:	20001b38 	.word	0x20001b38
 8002ee4:	200016d2 	.word	0x200016d2
 8002ee8:	20001b4c 	.word	0x20001b4c
		} else if(devirmeSilindirTipi == 1) {
 8002eec:	4b39      	ldr	r3, [pc, #228]	@ (8002fd4 <menu+0x1b80>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d104      	bne.n	8002efe <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 8002ef4:	4a38      	ldr	r2, [pc, #224]	@ (8002fd8 <menu+0x1b84>)
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	2002      	movs	r0, #2
 8002efa:	f006 f981 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002efe:	2102      	movs	r1, #2
 8002f00:	4836      	ldr	r0, [pc, #216]	@ (8002fdc <menu+0x1b88>)
 8002f02:	f007 fcd1 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d119      	bne.n	8002f40 <menu+0x1aec>
 8002f0c:	4b34      	ldr	r3, [pc, #208]	@ (8002fe0 <menu+0x1b8c>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	f083 0301 	eor.w	r3, r3, #1
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d012      	beq.n	8002f40 <menu+0x1aec>
 8002f1a:	4b32      	ldr	r3, [pc, #200]	@ (8002fe4 <menu+0x1b90>)
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d10e      	bne.n	8002f40 <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002f22:	4b2c      	ldr	r3, [pc, #176]	@ (8002fd4 <menu+0x1b80>)
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	3301      	adds	r3, #1
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002fd4 <menu+0x1b80>)
 8002f2c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002f2e:	4b29      	ldr	r3, [pc, #164]	@ (8002fd4 <menu+0x1b80>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d902      	bls.n	8002f3c <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 8002f36:	4b27      	ldr	r3, [pc, #156]	@ (8002fd4 <menu+0x1b80>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f3c:	f000 ffd0 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002f40:	2104      	movs	r1, #4
 8002f42:	4826      	ldr	r0, [pc, #152]	@ (8002fdc <menu+0x1b88>)
 8002f44:	f007 fcb0 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d119      	bne.n	8002f82 <menu+0x1b2e>
 8002f4e:	4b24      	ldr	r3, [pc, #144]	@ (8002fe0 <menu+0x1b8c>)
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	f083 0301 	eor.w	r3, r3, #1
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d012      	beq.n	8002f82 <menu+0x1b2e>
 8002f5c:	4b21      	ldr	r3, [pc, #132]	@ (8002fe4 <menu+0x1b90>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d10e      	bne.n	8002f82 <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002f64:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd4 <menu+0x1b80>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	4b19      	ldr	r3, [pc, #100]	@ (8002fd4 <menu+0x1b80>)
 8002f6e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002f70:	4b18      	ldr	r3, [pc, #96]	@ (8002fd4 <menu+0x1b80>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 8002f78:	4b16      	ldr	r3, [pc, #88]	@ (8002fd4 <menu+0x1b80>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f7e:	f000 ffaf 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f82:	2108      	movs	r1, #8
 8002f84:	4815      	ldr	r0, [pc, #84]	@ (8002fdc <menu+0x1b88>)
 8002f86:	f007 fc8f 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d10d      	bne.n	8002fac <menu+0x1b58>
 8002f90:	4b13      	ldr	r3, [pc, #76]	@ (8002fe0 <menu+0x1b8c>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	f083 0301 	eor.w	r3, r3, #1
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d006      	beq.n	8002fac <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002fd4 <menu+0x1b80>)
 8002fa0:	781a      	ldrb	r2, [r3, #0]
 8002fa2:	4b11      	ldr	r3, [pc, #68]	@ (8002fe8 <menu+0x1b94>)
 8002fa4:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002fa6:	4b11      	ldr	r3, [pc, #68]	@ (8002fec <menu+0x1b98>)
 8002fa8:	2201      	movs	r2, #1
 8002faa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002fac:	4b10      	ldr	r3, [pc, #64]	@ (8002ff0 <menu+0x1b9c>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b15      	cmp	r3, #21
 8002fb2:	f040 8088 	bne.w	80030c6 <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 8002fb6:	4a0f      	ldr	r2, [pc, #60]	@ (8002ff4 <menu+0x1ba0>)
 8002fb8:	2101      	movs	r1, #1
 8002fba:	2001      	movs	r0, #1
 8002fbc:	f006 f920 	bl	8009200 <lcd_print>

		if(platformSilindirTipi == 0) {
 8002fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff8 <menu+0x1ba4>)
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d11b      	bne.n	8003000 <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 8002fc8:	4a0c      	ldr	r2, [pc, #48]	@ (8002ffc <menu+0x1ba8>)
 8002fca:	2101      	movs	r1, #1
 8002fcc:	2002      	movs	r0, #2
 8002fce:	f006 f917 	bl	8009200 <lcd_print>
 8002fd2:	e01e      	b.n	8003012 <menu+0x1bbe>
 8002fd4:	200016d2 	.word	0x200016d2
 8002fd8:	20001b60 	.word	0x20001b60
 8002fdc:	40010800 	.word	0x40010800
 8002fe0:	200016ef 	.word	0x200016ef
 8002fe4:	200016cf 	.word	0x200016cf
 8002fe8:	20000fec 	.word	0x20000fec
 8002fec:	200016ec 	.word	0x200016ec
 8002ff0:	200016c0 	.word	0x200016c0
 8002ff4:	20001b74 	.word	0x20001b74
 8002ff8:	200016d3 	.word	0x200016d3
 8002ffc:	20001b4c 	.word	0x20001b4c
		} else if(platformSilindirTipi == 1) {
 8003000:	4ba1      	ldr	r3, [pc, #644]	@ (8003288 <menu+0x1e34>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d104      	bne.n	8003012 <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 8003008:	4aa0      	ldr	r2, [pc, #640]	@ (800328c <menu+0x1e38>)
 800300a:	2101      	movs	r1, #1
 800300c:	2002      	movs	r0, #2
 800300e:	f006 f8f7 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003012:	2102      	movs	r1, #2
 8003014:	489e      	ldr	r0, [pc, #632]	@ (8003290 <menu+0x1e3c>)
 8003016:	f007 fc47 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800301a:	4603      	mov	r3, r0
 800301c:	2b01      	cmp	r3, #1
 800301e:	d115      	bne.n	800304c <menu+0x1bf8>
 8003020:	4b9c      	ldr	r3, [pc, #624]	@ (8003294 <menu+0x1e40>)
 8003022:	781b      	ldrb	r3, [r3, #0]
 8003024:	f083 0301 	eor.w	r3, r3, #1
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00e      	beq.n	800304c <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 800302e:	4b96      	ldr	r3, [pc, #600]	@ (8003288 <menu+0x1e34>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	3301      	adds	r3, #1
 8003034:	b2da      	uxtb	r2, r3
 8003036:	4b94      	ldr	r3, [pc, #592]	@ (8003288 <menu+0x1e34>)
 8003038:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800303a:	4b93      	ldr	r3, [pc, #588]	@ (8003288 <menu+0x1e34>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d902      	bls.n	8003048 <menu+0x1bf4>
				platformSilindirTipi = 0;
 8003042:	4b91      	ldr	r3, [pc, #580]	@ (8003288 <menu+0x1e34>)
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003048:	f000 ff4a 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800304c:	2104      	movs	r1, #4
 800304e:	4890      	ldr	r0, [pc, #576]	@ (8003290 <menu+0x1e3c>)
 8003050:	f007 fc2a 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003054:	4603      	mov	r3, r0
 8003056:	2b01      	cmp	r3, #1
 8003058:	d115      	bne.n	8003086 <menu+0x1c32>
 800305a:	4b8e      	ldr	r3, [pc, #568]	@ (8003294 <menu+0x1e40>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	f083 0301 	eor.w	r3, r3, #1
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00e      	beq.n	8003086 <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003068:	4b87      	ldr	r3, [pc, #540]	@ (8003288 <menu+0x1e34>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	3b01      	subs	r3, #1
 800306e:	b2da      	uxtb	r2, r3
 8003070:	4b85      	ldr	r3, [pc, #532]	@ (8003288 <menu+0x1e34>)
 8003072:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003074:	4b84      	ldr	r3, [pc, #528]	@ (8003288 <menu+0x1e34>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d002      	beq.n	8003082 <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 800307c:	4b82      	ldr	r3, [pc, #520]	@ (8003288 <menu+0x1e34>)
 800307e:	2201      	movs	r2, #1
 8003080:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003082:	f000 ff2d 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003086:	2108      	movs	r1, #8
 8003088:	4881      	ldr	r0, [pc, #516]	@ (8003290 <menu+0x1e3c>)
 800308a:	f007 fc0d 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800308e:	4603      	mov	r3, r0
 8003090:	2b01      	cmp	r3, #1
 8003092:	d118      	bne.n	80030c6 <menu+0x1c72>
 8003094:	4b7f      	ldr	r3, [pc, #508]	@ (8003294 <menu+0x1e40>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	f083 0301 	eor.w	r3, r3, #1
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d011      	beq.n	80030c6 <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 80030a2:	4b79      	ldr	r3, [pc, #484]	@ (8003288 <menu+0x1e34>)
 80030a4:	781a      	ldrb	r2, [r3, #0]
 80030a6:	4b7c      	ldr	r3, [pc, #496]	@ (8003298 <menu+0x1e44>)
 80030a8:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 80030aa:	4b77      	ldr	r3, [pc, #476]	@ (8003288 <menu+0x1e34>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d106      	bne.n	80030c0 <menu+0x1c6c>
				altLimit = 1;
 80030b2:	4b7a      	ldr	r3, [pc, #488]	@ (800329c <menu+0x1e48>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80030b8:	4b78      	ldr	r3, [pc, #480]	@ (800329c <menu+0x1e48>)
 80030ba:	781a      	ldrb	r2, [r3, #0]
 80030bc:	4b76      	ldr	r3, [pc, #472]	@ (8003298 <menu+0x1e44>)
 80030be:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80030c0:	4b77      	ldr	r3, [pc, #476]	@ (80032a0 <menu+0x1e4c>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 80030c6:	4b77      	ldr	r3, [pc, #476]	@ (80032a4 <menu+0x1e50>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b16      	cmp	r3, #22
 80030cc:	d164      	bne.n	8003198 <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 80030ce:	4a76      	ldr	r2, [pc, #472]	@ (80032a8 <menu+0x1e54>)
 80030d0:	2101      	movs	r1, #1
 80030d2:	2001      	movs	r0, #1
 80030d4:	f006 f894 	bl	8009200 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80030d8:	4a74      	ldr	r2, [pc, #464]	@ (80032ac <menu+0x1e58>)
 80030da:	2101      	movs	r1, #1
 80030dc:	2002      	movs	r0, #2
 80030de:	f006 f88f 	bl	8009200 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 80030e2:	4b73      	ldr	r3, [pc, #460]	@ (80032b0 <menu+0x1e5c>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	220a      	movs	r2, #10
 80030e8:	4972      	ldr	r1, [pc, #456]	@ (80032b4 <menu+0x1e60>)
 80030ea:	4618      	mov	r0, r3
 80030ec:	f00a ff54 	bl	800df98 <itoa>
		lcd_print(2,16,snum);
 80030f0:	4a70      	ldr	r2, [pc, #448]	@ (80032b4 <menu+0x1e60>)
 80030f2:	2110      	movs	r1, #16
 80030f4:	2002      	movs	r0, #2
 80030f6:	f006 f883 	bl	8009200 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030fa:	2102      	movs	r1, #2
 80030fc:	4864      	ldr	r0, [pc, #400]	@ (8003290 <menu+0x1e3c>)
 80030fe:	f007 fbd3 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003102:	4603      	mov	r3, r0
 8003104:	2b01      	cmp	r3, #1
 8003106:	d115      	bne.n	8003134 <menu+0x1ce0>
 8003108:	4b62      	ldr	r3, [pc, #392]	@ (8003294 <menu+0x1e40>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	f083 0301 	eor.w	r3, r3, #1
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d00e      	beq.n	8003134 <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 8003116:	4b66      	ldr	r3, [pc, #408]	@ (80032b0 <menu+0x1e5c>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	3301      	adds	r3, #1
 800311c:	b2da      	uxtb	r2, r3
 800311e:	4b64      	ldr	r3, [pc, #400]	@ (80032b0 <menu+0x1e5c>)
 8003120:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003122:	4b63      	ldr	r3, [pc, #396]	@ (80032b0 <menu+0x1e5c>)
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b05      	cmp	r3, #5
 8003128:	d902      	bls.n	8003130 <menu+0x1cdc>
				yukariValfTmr = 0;
 800312a:	4b61      	ldr	r3, [pc, #388]	@ (80032b0 <menu+0x1e5c>)
 800312c:	2200      	movs	r2, #0
 800312e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003130:	f000 fed6 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003134:	2104      	movs	r1, #4
 8003136:	4856      	ldr	r0, [pc, #344]	@ (8003290 <menu+0x1e3c>)
 8003138:	f007 fbb6 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800313c:	4603      	mov	r3, r0
 800313e:	2b01      	cmp	r3, #1
 8003140:	d115      	bne.n	800316e <menu+0x1d1a>
 8003142:	4b54      	ldr	r3, [pc, #336]	@ (8003294 <menu+0x1e40>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	f083 0301 	eor.w	r3, r3, #1
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00e      	beq.n	800316e <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 8003150:	4b57      	ldr	r3, [pc, #348]	@ (80032b0 <menu+0x1e5c>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	3b01      	subs	r3, #1
 8003156:	b2da      	uxtb	r2, r3
 8003158:	4b55      	ldr	r3, [pc, #340]	@ (80032b0 <menu+0x1e5c>)
 800315a:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 800315c:	4b54      	ldr	r3, [pc, #336]	@ (80032b0 <menu+0x1e5c>)
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2b06      	cmp	r3, #6
 8003162:	d902      	bls.n	800316a <menu+0x1d16>
		   		yukariValfTmr = 5;
 8003164:	4b52      	ldr	r3, [pc, #328]	@ (80032b0 <menu+0x1e5c>)
 8003166:	2205      	movs	r2, #5
 8003168:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800316a:	f000 feb9 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800316e:	2108      	movs	r1, #8
 8003170:	4847      	ldr	r0, [pc, #284]	@ (8003290 <menu+0x1e3c>)
 8003172:	f007 fb99 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003176:	4603      	mov	r3, r0
 8003178:	2b01      	cmp	r3, #1
 800317a:	d10d      	bne.n	8003198 <menu+0x1d44>
 800317c:	4b45      	ldr	r3, [pc, #276]	@ (8003294 <menu+0x1e40>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	f083 0301 	eor.w	r3, r3, #1
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	d006      	beq.n	8003198 <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 800318a:	4b49      	ldr	r3, [pc, #292]	@ (80032b0 <menu+0x1e5c>)
 800318c:	781a      	ldrb	r2, [r3, #0]
 800318e:	4b42      	ldr	r3, [pc, #264]	@ (8003298 <menu+0x1e44>)
 8003190:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003192:	4b43      	ldr	r3, [pc, #268]	@ (80032a0 <menu+0x1e4c>)
 8003194:	2201      	movs	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003198:	4b42      	ldr	r3, [pc, #264]	@ (80032a4 <menu+0x1e50>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b17      	cmp	r3, #23
 800319e:	d164      	bne.n	800326a <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 80031a0:	4a45      	ldr	r2, [pc, #276]	@ (80032b8 <menu+0x1e64>)
 80031a2:	2101      	movs	r1, #1
 80031a4:	2001      	movs	r0, #1
 80031a6:	f006 f82b 	bl	8009200 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80031aa:	4a40      	ldr	r2, [pc, #256]	@ (80032ac <menu+0x1e58>)
 80031ac:	2101      	movs	r1, #1
 80031ae:	2002      	movs	r0, #2
 80031b0:	f006 f826 	bl	8009200 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 80031b4:	4b41      	ldr	r3, [pc, #260]	@ (80032bc <menu+0x1e68>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	220a      	movs	r2, #10
 80031ba:	493e      	ldr	r1, [pc, #248]	@ (80032b4 <menu+0x1e60>)
 80031bc:	4618      	mov	r0, r3
 80031be:	f00a feeb 	bl	800df98 <itoa>
		lcd_print(2,16,snum);
 80031c2:	4a3c      	ldr	r2, [pc, #240]	@ (80032b4 <menu+0x1e60>)
 80031c4:	2110      	movs	r1, #16
 80031c6:	2002      	movs	r0, #2
 80031c8:	f006 f81a 	bl	8009200 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031cc:	2102      	movs	r1, #2
 80031ce:	4830      	ldr	r0, [pc, #192]	@ (8003290 <menu+0x1e3c>)
 80031d0:	f007 fb6a 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d115      	bne.n	8003206 <menu+0x1db2>
 80031da:	4b2e      	ldr	r3, [pc, #184]	@ (8003294 <menu+0x1e40>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	f083 0301 	eor.w	r3, r3, #1
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d00e      	beq.n	8003206 <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 80031e8:	4b34      	ldr	r3, [pc, #208]	@ (80032bc <menu+0x1e68>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	3301      	adds	r3, #1
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	4b32      	ldr	r3, [pc, #200]	@ (80032bc <menu+0x1e68>)
 80031f2:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 80031f4:	4b31      	ldr	r3, [pc, #196]	@ (80032bc <menu+0x1e68>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b05      	cmp	r3, #5
 80031fa:	d902      	bls.n	8003202 <menu+0x1dae>
				asagiValfTmr = 0;
 80031fc:	4b2f      	ldr	r3, [pc, #188]	@ (80032bc <menu+0x1e68>)
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003202:	f000 fe6d 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003206:	2104      	movs	r1, #4
 8003208:	4821      	ldr	r0, [pc, #132]	@ (8003290 <menu+0x1e3c>)
 800320a:	f007 fb4d 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800320e:	4603      	mov	r3, r0
 8003210:	2b01      	cmp	r3, #1
 8003212:	d115      	bne.n	8003240 <menu+0x1dec>
 8003214:	4b1f      	ldr	r3, [pc, #124]	@ (8003294 <menu+0x1e40>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	f083 0301 	eor.w	r3, r3, #1
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00e      	beq.n	8003240 <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 8003222:	4b26      	ldr	r3, [pc, #152]	@ (80032bc <menu+0x1e68>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	3b01      	subs	r3, #1
 8003228:	b2da      	uxtb	r2, r3
 800322a:	4b24      	ldr	r3, [pc, #144]	@ (80032bc <menu+0x1e68>)
 800322c:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 800322e:	4b23      	ldr	r3, [pc, #140]	@ (80032bc <menu+0x1e68>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b06      	cmp	r3, #6
 8003234:	d902      	bls.n	800323c <menu+0x1de8>
		   		asagiValfTmr = 5;
 8003236:	4b21      	ldr	r3, [pc, #132]	@ (80032bc <menu+0x1e68>)
 8003238:	2205      	movs	r2, #5
 800323a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800323c:	f000 fe50 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003240:	2108      	movs	r1, #8
 8003242:	4813      	ldr	r0, [pc, #76]	@ (8003290 <menu+0x1e3c>)
 8003244:	f007 fb30 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003248:	4603      	mov	r3, r0
 800324a:	2b01      	cmp	r3, #1
 800324c:	d10d      	bne.n	800326a <menu+0x1e16>
 800324e:	4b11      	ldr	r3, [pc, #68]	@ (8003294 <menu+0x1e40>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	f083 0301 	eor.w	r3, r3, #1
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d006      	beq.n	800326a <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 800325c:	4b17      	ldr	r3, [pc, #92]	@ (80032bc <menu+0x1e68>)
 800325e:	781a      	ldrb	r2, [r3, #0]
 8003260:	4b0d      	ldr	r3, [pc, #52]	@ (8003298 <menu+0x1e44>)
 8003262:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003264:	4b0e      	ldr	r3, [pc, #56]	@ (80032a0 <menu+0x1e4c>)
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 800326a:	4b0e      	ldr	r3, [pc, #56]	@ (80032a4 <menu+0x1e50>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b18      	cmp	r3, #24
 8003270:	f040 8093 	bne.w	800339a <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 8003274:	4b12      	ldr	r3, [pc, #72]	@ (80032c0 <menu+0x1e6c>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d125      	bne.n	80032c8 <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 800327c:	4a11      	ldr	r2, [pc, #68]	@ (80032c4 <menu+0x1e70>)
 800327e:	2101      	movs	r1, #1
 8003280:	2001      	movs	r0, #1
 8003282:	f005 ffbd 	bl	8009200 <lcd_print>
 8003286:	e028      	b.n	80032da <menu+0x1e86>
 8003288:	200016d3 	.word	0x200016d3
 800328c:	20001b60 	.word	0x20001b60
 8003290:	40010800 	.word	0x40010800
 8003294:	200016ef 	.word	0x200016ef
 8003298:	20000fec 	.word	0x20000fec
 800329c:	200016c6 	.word	0x200016c6
 80032a0:	200016ec 	.word	0x200016ec
 80032a4:	200016c0 	.word	0x200016c0
 80032a8:	20001b88 	.word	0x20001b88
 80032ac:	200019d0 	.word	0x200019d0
 80032b0:	200016d4 	.word	0x200016d4
 80032b4:	2000105c 	.word	0x2000105c
 80032b8:	20001b9c 	.word	0x20001b9c
 80032bc:	200016d5 	.word	0x200016d5
 80032c0:	200016cf 	.word	0x200016cf
 80032c4:	20001bb0 	.word	0x20001bb0
		} else if(devirmeYuruyusSecim == 1) {
 80032c8:	4b8c      	ldr	r3, [pc, #560]	@ (80034fc <menu+0x20a8>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d104      	bne.n	80032da <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 80032d0:	4a8b      	ldr	r2, [pc, #556]	@ (8003500 <menu+0x20ac>)
 80032d2:	2101      	movs	r1, #1
 80032d4:	2001      	movs	r0, #1
 80032d6:	f005 ff93 	bl	8009200 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80032da:	4a8a      	ldr	r2, [pc, #552]	@ (8003504 <menu+0x20b0>)
 80032dc:	2101      	movs	r1, #1
 80032de:	2002      	movs	r0, #2
 80032e0:	f005 ff8e 	bl	8009200 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 80032e4:	4b88      	ldr	r3, [pc, #544]	@ (8003508 <menu+0x20b4>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	220a      	movs	r2, #10
 80032ea:	4988      	ldr	r1, [pc, #544]	@ (800350c <menu+0x20b8>)
 80032ec:	4618      	mov	r0, r3
 80032ee:	f00a fe53 	bl	800df98 <itoa>
		lcd_print(2, 16, snum);
 80032f2:	4a86      	ldr	r2, [pc, #536]	@ (800350c <menu+0x20b8>)
 80032f4:	2110      	movs	r1, #16
 80032f6:	2002      	movs	r0, #2
 80032f8:	f005 ff82 	bl	8009200 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032fc:	2102      	movs	r1, #2
 80032fe:	4884      	ldr	r0, [pc, #528]	@ (8003510 <menu+0x20bc>)
 8003300:	f007 fad2 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003304:	4603      	mov	r3, r0
 8003306:	2b01      	cmp	r3, #1
 8003308:	d115      	bne.n	8003336 <menu+0x1ee2>
 800330a:	4b82      	ldr	r3, [pc, #520]	@ (8003514 <menu+0x20c0>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	f083 0301 	eor.w	r3, r3, #1
 8003312:	b2db      	uxtb	r3, r3
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00e      	beq.n	8003336 <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003318:	4b7b      	ldr	r3, [pc, #492]	@ (8003508 <menu+0x20b4>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	3301      	adds	r3, #1
 800331e:	b2da      	uxtb	r2, r3
 8003320:	4b79      	ldr	r3, [pc, #484]	@ (8003508 <menu+0x20b4>)
 8003322:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003324:	4b78      	ldr	r3, [pc, #480]	@ (8003508 <menu+0x20b4>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b05      	cmp	r3, #5
 800332a:	d902      	bls.n	8003332 <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 800332c:	4b76      	ldr	r3, [pc, #472]	@ (8003508 <menu+0x20b4>)
 800332e:	2200      	movs	r2, #0
 8003330:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003332:	f000 fdd5 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003336:	2104      	movs	r1, #4
 8003338:	4875      	ldr	r0, [pc, #468]	@ (8003510 <menu+0x20bc>)
 800333a:	f007 fab5 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800333e:	4603      	mov	r3, r0
 8003340:	2b01      	cmp	r3, #1
 8003342:	d115      	bne.n	8003370 <menu+0x1f1c>
 8003344:	4b73      	ldr	r3, [pc, #460]	@ (8003514 <menu+0x20c0>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	f083 0301 	eor.w	r3, r3, #1
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00e      	beq.n	8003370 <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003352:	4b6d      	ldr	r3, [pc, #436]	@ (8003508 <menu+0x20b4>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	3b01      	subs	r3, #1
 8003358:	b2da      	uxtb	r2, r3
 800335a:	4b6b      	ldr	r3, [pc, #428]	@ (8003508 <menu+0x20b4>)
 800335c:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 800335e:	4b6a      	ldr	r3, [pc, #424]	@ (8003508 <menu+0x20b4>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b06      	cmp	r3, #6
 8003364:	d902      	bls.n	800336c <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 8003366:	4b68      	ldr	r3, [pc, #416]	@ (8003508 <menu+0x20b4>)
 8003368:	2205      	movs	r2, #5
 800336a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800336c:	f000 fdb8 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003370:	2108      	movs	r1, #8
 8003372:	4867      	ldr	r0, [pc, #412]	@ (8003510 <menu+0x20bc>)
 8003374:	f007 fa98 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003378:	4603      	mov	r3, r0
 800337a:	2b01      	cmp	r3, #1
 800337c:	d10d      	bne.n	800339a <menu+0x1f46>
 800337e:	4b65      	ldr	r3, [pc, #404]	@ (8003514 <menu+0x20c0>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	f083 0301 	eor.w	r3, r3, #1
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d006      	beq.n	800339a <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 800338c:	4b5e      	ldr	r3, [pc, #376]	@ (8003508 <menu+0x20b4>)
 800338e:	781a      	ldrb	r2, [r3, #0]
 8003390:	4b61      	ldr	r3, [pc, #388]	@ (8003518 <menu+0x20c4>)
 8003392:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003394:	4b61      	ldr	r3, [pc, #388]	@ (800351c <menu+0x20c8>)
 8003396:	2201      	movs	r2, #1
 8003398:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 800339a:	4b61      	ldr	r3, [pc, #388]	@ (8003520 <menu+0x20cc>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b19      	cmp	r3, #25
 80033a0:	d172      	bne.n	8003488 <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 80033a2:	4b56      	ldr	r3, [pc, #344]	@ (80034fc <menu+0x20a8>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d105      	bne.n	80033b6 <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 80033aa:	4a5e      	ldr	r2, [pc, #376]	@ (8003524 <menu+0x20d0>)
 80033ac:	2101      	movs	r1, #1
 80033ae:	2001      	movs	r0, #1
 80033b0:	f005 ff26 	bl	8009200 <lcd_print>
 80033b4:	e008      	b.n	80033c8 <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 80033b6:	4b51      	ldr	r3, [pc, #324]	@ (80034fc <menu+0x20a8>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d104      	bne.n	80033c8 <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 80033be:	4a5a      	ldr	r2, [pc, #360]	@ (8003528 <menu+0x20d4>)
 80033c0:	2101      	movs	r1, #1
 80033c2:	2001      	movs	r0, #1
 80033c4:	f005 ff1c 	bl	8009200 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80033c8:	4a4e      	ldr	r2, [pc, #312]	@ (8003504 <menu+0x20b0>)
 80033ca:	2101      	movs	r1, #1
 80033cc:	2002      	movs	r0, #2
 80033ce:	f005 ff17 	bl	8009200 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 80033d2:	4b56      	ldr	r3, [pc, #344]	@ (800352c <menu+0x20d8>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	220a      	movs	r2, #10
 80033d8:	494c      	ldr	r1, [pc, #304]	@ (800350c <menu+0x20b8>)
 80033da:	4618      	mov	r0, r3
 80033dc:	f00a fddc 	bl	800df98 <itoa>
		lcd_print(2,16,snum);
 80033e0:	4a4a      	ldr	r2, [pc, #296]	@ (800350c <menu+0x20b8>)
 80033e2:	2110      	movs	r1, #16
 80033e4:	2002      	movs	r0, #2
 80033e6:	f005 ff0b 	bl	8009200 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033ea:	2102      	movs	r1, #2
 80033ec:	4848      	ldr	r0, [pc, #288]	@ (8003510 <menu+0x20bc>)
 80033ee:	f007 fa5b 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d115      	bne.n	8003424 <menu+0x1fd0>
 80033f8:	4b46      	ldr	r3, [pc, #280]	@ (8003514 <menu+0x20c0>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	f083 0301 	eor.w	r3, r3, #1
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00e      	beq.n	8003424 <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003406:	4b49      	ldr	r3, [pc, #292]	@ (800352c <menu+0x20d8>)
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	3301      	adds	r3, #1
 800340c:	b2da      	uxtb	r2, r3
 800340e:	4b47      	ldr	r3, [pc, #284]	@ (800352c <menu+0x20d8>)
 8003410:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003412:	4b46      	ldr	r3, [pc, #280]	@ (800352c <menu+0x20d8>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b05      	cmp	r3, #5
 8003418:	d902      	bls.n	8003420 <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 800341a:	4b44      	ldr	r3, [pc, #272]	@ (800352c <menu+0x20d8>)
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003420:	f000 fd5e 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003424:	2104      	movs	r1, #4
 8003426:	483a      	ldr	r0, [pc, #232]	@ (8003510 <menu+0x20bc>)
 8003428:	f007 fa3e 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800342c:	4603      	mov	r3, r0
 800342e:	2b01      	cmp	r3, #1
 8003430:	d115      	bne.n	800345e <menu+0x200a>
 8003432:	4b38      	ldr	r3, [pc, #224]	@ (8003514 <menu+0x20c0>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	f083 0301 	eor.w	r3, r3, #1
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00e      	beq.n	800345e <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003440:	4b3a      	ldr	r3, [pc, #232]	@ (800352c <menu+0x20d8>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	3b01      	subs	r3, #1
 8003446:	b2da      	uxtb	r2, r3
 8003448:	4b38      	ldr	r3, [pc, #224]	@ (800352c <menu+0x20d8>)
 800344a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 800344c:	4b37      	ldr	r3, [pc, #220]	@ (800352c <menu+0x20d8>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b06      	cmp	r3, #6
 8003452:	d902      	bls.n	800345a <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 8003454:	4b35      	ldr	r3, [pc, #212]	@ (800352c <menu+0x20d8>)
 8003456:	2205      	movs	r2, #5
 8003458:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800345a:	f000 fd41 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800345e:	2108      	movs	r1, #8
 8003460:	482b      	ldr	r0, [pc, #172]	@ (8003510 <menu+0x20bc>)
 8003462:	f007 fa21 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003466:	4603      	mov	r3, r0
 8003468:	2b01      	cmp	r3, #1
 800346a:	d10d      	bne.n	8003488 <menu+0x2034>
 800346c:	4b29      	ldr	r3, [pc, #164]	@ (8003514 <menu+0x20c0>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	f083 0301 	eor.w	r3, r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d006      	beq.n	8003488 <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 800347a:	4b2c      	ldr	r3, [pc, #176]	@ (800352c <menu+0x20d8>)
 800347c:	781a      	ldrb	r2, [r3, #0]
 800347e:	4b26      	ldr	r3, [pc, #152]	@ (8003518 <menu+0x20c4>)
 8003480:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003482:	4b26      	ldr	r3, [pc, #152]	@ (800351c <menu+0x20c8>)
 8003484:	2201      	movs	r2, #1
 8003486:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003488:	4b25      	ldr	r3, [pc, #148]	@ (8003520 <menu+0x20cc>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b1a      	cmp	r3, #26
 800348e:	f040 80b7 	bne.w	8003600 <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 8003492:	4a27      	ldr	r2, [pc, #156]	@ (8003530 <menu+0x20dc>)
 8003494:	2101      	movs	r1, #1
 8003496:	2001      	movs	r0, #1
 8003498:	f005 feb2 	bl	8009200 <lcd_print>

		if(makineCalismaTmr > 99) {
 800349c:	4b25      	ldr	r3, [pc, #148]	@ (8003534 <menu+0x20e0>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b63      	cmp	r3, #99	@ 0x63
 80034a2:	d911      	bls.n	80034c8 <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 80034a4:	4a17      	ldr	r2, [pc, #92]	@ (8003504 <menu+0x20b0>)
 80034a6:	2101      	movs	r1, #1
 80034a8:	2002      	movs	r0, #2
 80034aa:	f005 fea9 	bl	8009200 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80034ae:	4b21      	ldr	r3, [pc, #132]	@ (8003534 <menu+0x20e0>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	220a      	movs	r2, #10
 80034b4:	4915      	ldr	r1, [pc, #84]	@ (800350c <menu+0x20b8>)
 80034b6:	4618      	mov	r0, r3
 80034b8:	f00a fd6e 	bl	800df98 <itoa>
			lcd_print(2,14,snum);
 80034bc:	4a13      	ldr	r2, [pc, #76]	@ (800350c <menu+0x20b8>)
 80034be:	210e      	movs	r1, #14
 80034c0:	2002      	movs	r0, #2
 80034c2:	f005 fe9d 	bl	8009200 <lcd_print>
 80034c6:	e04c      	b.n	8003562 <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80034c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003534 <menu+0x20e0>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b09      	cmp	r3, #9
 80034ce:	d933      	bls.n	8003538 <menu+0x20e4>
 80034d0:	4b18      	ldr	r3, [pc, #96]	@ (8003534 <menu+0x20e0>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b63      	cmp	r3, #99	@ 0x63
 80034d6:	d82f      	bhi.n	8003538 <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 80034d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003504 <menu+0x20b0>)
 80034da:	2101      	movs	r1, #1
 80034dc:	2002      	movs	r0, #2
 80034de:	f005 fe8f 	bl	8009200 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80034e2:	4b14      	ldr	r3, [pc, #80]	@ (8003534 <menu+0x20e0>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	220a      	movs	r2, #10
 80034e8:	4908      	ldr	r1, [pc, #32]	@ (800350c <menu+0x20b8>)
 80034ea:	4618      	mov	r0, r3
 80034ec:	f00a fd54 	bl	800df98 <itoa>
			lcd_print(2, 15, snum);
 80034f0:	4a06      	ldr	r2, [pc, #24]	@ (800350c <menu+0x20b8>)
 80034f2:	210f      	movs	r1, #15
 80034f4:	2002      	movs	r0, #2
 80034f6:	f005 fe83 	bl	8009200 <lcd_print>
 80034fa:	e032      	b.n	8003562 <menu+0x210e>
 80034fc:	200016cf 	.word	0x200016cf
 8003500:	20001bc4 	.word	0x20001bc4
 8003504:	200019d0 	.word	0x200019d0
 8003508:	200016d6 	.word	0x200016d6
 800350c:	2000105c 	.word	0x2000105c
 8003510:	40010800 	.word	0x40010800
 8003514:	200016ef 	.word	0x200016ef
 8003518:	20000fec 	.word	0x20000fec
 800351c:	200016ec 	.word	0x200016ec
 8003520:	200016c0 	.word	0x200016c0
 8003524:	20001bd8 	.word	0x20001bd8
 8003528:	20001bec 	.word	0x20001bec
 800352c:	200016d7 	.word	0x200016d7
 8003530:	20001c00 	.word	0x20001c00
 8003534:	200016d8 	.word	0x200016d8
		} else if(makineCalismaTmr <=  9) {
 8003538:	4b72      	ldr	r3, [pc, #456]	@ (8003704 <menu+0x22b0>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b09      	cmp	r3, #9
 800353e:	d810      	bhi.n	8003562 <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 8003540:	4a71      	ldr	r2, [pc, #452]	@ (8003708 <menu+0x22b4>)
 8003542:	2101      	movs	r1, #1
 8003544:	2002      	movs	r0, #2
 8003546:	f005 fe5b 	bl	8009200 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800354a:	4b6e      	ldr	r3, [pc, #440]	@ (8003704 <menu+0x22b0>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	220a      	movs	r2, #10
 8003550:	496e      	ldr	r1, [pc, #440]	@ (800370c <menu+0x22b8>)
 8003552:	4618      	mov	r0, r3
 8003554:	f00a fd20 	bl	800df98 <itoa>
			lcd_print(2, 16, snum);
 8003558:	4a6c      	ldr	r2, [pc, #432]	@ (800370c <menu+0x22b8>)
 800355a:	2110      	movs	r1, #16
 800355c:	2002      	movs	r0, #2
 800355e:	f005 fe4f 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003562:	2102      	movs	r1, #2
 8003564:	486a      	ldr	r0, [pc, #424]	@ (8003710 <menu+0x22bc>)
 8003566:	f007 f99f 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800356a:	4603      	mov	r3, r0
 800356c:	2b01      	cmp	r3, #1
 800356e:	d115      	bne.n	800359c <menu+0x2148>
 8003570:	4b68      	ldr	r3, [pc, #416]	@ (8003714 <menu+0x22c0>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	f083 0301 	eor.w	r3, r3, #1
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00e      	beq.n	800359c <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 800357e:	4b61      	ldr	r3, [pc, #388]	@ (8003704 <menu+0x22b0>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	3301      	adds	r3, #1
 8003584:	b2da      	uxtb	r2, r3
 8003586:	4b5f      	ldr	r3, [pc, #380]	@ (8003704 <menu+0x22b0>)
 8003588:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 800358a:	4b5e      	ldr	r3, [pc, #376]	@ (8003704 <menu+0x22b0>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2bb4      	cmp	r3, #180	@ 0xb4
 8003590:	d902      	bls.n	8003598 <menu+0x2144>
				makineCalismaTmr = 0;
 8003592:	4b5c      	ldr	r3, [pc, #368]	@ (8003704 <menu+0x22b0>)
 8003594:	2200      	movs	r2, #0
 8003596:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003598:	f000 fca2 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800359c:	2104      	movs	r1, #4
 800359e:	485c      	ldr	r0, [pc, #368]	@ (8003710 <menu+0x22bc>)
 80035a0:	f007 f982 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d115      	bne.n	80035d6 <menu+0x2182>
 80035aa:	4b5a      	ldr	r3, [pc, #360]	@ (8003714 <menu+0x22c0>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	f083 0301 	eor.w	r3, r3, #1
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00e      	beq.n	80035d6 <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 80035b8:	4b52      	ldr	r3, [pc, #328]	@ (8003704 <menu+0x22b0>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	3b01      	subs	r3, #1
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	4b50      	ldr	r3, [pc, #320]	@ (8003704 <menu+0x22b0>)
 80035c2:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80035c4:	4b4f      	ldr	r3, [pc, #316]	@ (8003704 <menu+0x22b0>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2bb5      	cmp	r3, #181	@ 0xb5
 80035ca:	d902      	bls.n	80035d2 <menu+0x217e>
		   		makineCalismaTmr = 180;
 80035cc:	4b4d      	ldr	r3, [pc, #308]	@ (8003704 <menu+0x22b0>)
 80035ce:	22b4      	movs	r2, #180	@ 0xb4
 80035d0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035d2:	f000 fc85 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035d6:	2108      	movs	r1, #8
 80035d8:	484d      	ldr	r0, [pc, #308]	@ (8003710 <menu+0x22bc>)
 80035da:	f007 f965 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d10d      	bne.n	8003600 <menu+0x21ac>
 80035e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003714 <menu+0x22c0>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	f083 0301 	eor.w	r3, r3, #1
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d006      	beq.n	8003600 <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 80035f2:	4b44      	ldr	r3, [pc, #272]	@ (8003704 <menu+0x22b0>)
 80035f4:	781a      	ldrb	r2, [r3, #0]
 80035f6:	4b48      	ldr	r3, [pc, #288]	@ (8003718 <menu+0x22c4>)
 80035f8:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80035fa:	4b48      	ldr	r3, [pc, #288]	@ (800371c <menu+0x22c8>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003600:	4b47      	ldr	r3, [pc, #284]	@ (8003720 <menu+0x22cc>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b1b      	cmp	r3, #27
 8003606:	d166      	bne.n	80036d6 <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 8003608:	4a46      	ldr	r2, [pc, #280]	@ (8003724 <menu+0x22d0>)
 800360a:	2101      	movs	r1, #1
 800360c:	2001      	movs	r0, #1
 800360e:	f005 fdf7 	bl	8009200 <lcd_print>

		if(buzzer == 0) {
 8003612:	4b45      	ldr	r3, [pc, #276]	@ (8003728 <menu+0x22d4>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d105      	bne.n	8003626 <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 800361a:	4a44      	ldr	r2, [pc, #272]	@ (800372c <menu+0x22d8>)
 800361c:	2101      	movs	r1, #1
 800361e:	2002      	movs	r0, #2
 8003620:	f005 fdee 	bl	8009200 <lcd_print>
 8003624:	e008      	b.n	8003638 <menu+0x21e4>
		} else if(buzzer == 1) {
 8003626:	4b40      	ldr	r3, [pc, #256]	@ (8003728 <menu+0x22d4>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d104      	bne.n	8003638 <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 800362e:	4a40      	ldr	r2, [pc, #256]	@ (8003730 <menu+0x22dc>)
 8003630:	2101      	movs	r1, #1
 8003632:	2002      	movs	r0, #2
 8003634:	f005 fde4 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003638:	2102      	movs	r1, #2
 800363a:	4835      	ldr	r0, [pc, #212]	@ (8003710 <menu+0x22bc>)
 800363c:	f007 f934 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003640:	4603      	mov	r3, r0
 8003642:	2b01      	cmp	r3, #1
 8003644:	d115      	bne.n	8003672 <menu+0x221e>
 8003646:	4b33      	ldr	r3, [pc, #204]	@ (8003714 <menu+0x22c0>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	f083 0301 	eor.w	r3, r3, #1
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b00      	cmp	r3, #0
 8003652:	d00e      	beq.n	8003672 <menu+0x221e>
			buzzer = buzzer + 1;
 8003654:	4b34      	ldr	r3, [pc, #208]	@ (8003728 <menu+0x22d4>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	3301      	adds	r3, #1
 800365a:	b2da      	uxtb	r2, r3
 800365c:	4b32      	ldr	r3, [pc, #200]	@ (8003728 <menu+0x22d4>)
 800365e:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003660:	4b31      	ldr	r3, [pc, #196]	@ (8003728 <menu+0x22d4>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d902      	bls.n	800366e <menu+0x221a>
				buzzer = 0;
 8003668:	4b2f      	ldr	r3, [pc, #188]	@ (8003728 <menu+0x22d4>)
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800366e:	f000 fc37 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003672:	2104      	movs	r1, #4
 8003674:	4826      	ldr	r0, [pc, #152]	@ (8003710 <menu+0x22bc>)
 8003676:	f007 f917 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800367a:	4603      	mov	r3, r0
 800367c:	2b01      	cmp	r3, #1
 800367e:	d115      	bne.n	80036ac <menu+0x2258>
 8003680:	4b24      	ldr	r3, [pc, #144]	@ (8003714 <menu+0x22c0>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	f083 0301 	eor.w	r3, r3, #1
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00e      	beq.n	80036ac <menu+0x2258>
			buzzer = buzzer - 1;
 800368e:	4b26      	ldr	r3, [pc, #152]	@ (8003728 <menu+0x22d4>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	3b01      	subs	r3, #1
 8003694:	b2da      	uxtb	r2, r3
 8003696:	4b24      	ldr	r3, [pc, #144]	@ (8003728 <menu+0x22d4>)
 8003698:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 800369a:	4b23      	ldr	r3, [pc, #140]	@ (8003728 <menu+0x22d4>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <menu+0x2254>
		   		buzzer = 1;
 80036a2:	4b21      	ldr	r3, [pc, #132]	@ (8003728 <menu+0x22d4>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036a8:	f000 fc1a 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ac:	2108      	movs	r1, #8
 80036ae:	4818      	ldr	r0, [pc, #96]	@ (8003710 <menu+0x22bc>)
 80036b0:	f007 f8fa 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d10d      	bne.n	80036d6 <menu+0x2282>
 80036ba:	4b16      	ldr	r3, [pc, #88]	@ (8003714 <menu+0x22c0>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	f083 0301 	eor.w	r3, r3, #1
 80036c2:	b2db      	uxtb	r3, r3
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d006      	beq.n	80036d6 <menu+0x2282>
			eepromData[25] = buzzer;
 80036c8:	4b17      	ldr	r3, [pc, #92]	@ (8003728 <menu+0x22d4>)
 80036ca:	781a      	ldrb	r2, [r3, #0]
 80036cc:	4b12      	ldr	r3, [pc, #72]	@ (8003718 <menu+0x22c4>)
 80036ce:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80036d0:	4b12      	ldr	r3, [pc, #72]	@ (800371c <menu+0x22c8>)
 80036d2:	2201      	movs	r2, #1
 80036d4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80036d6:	4b12      	ldr	r3, [pc, #72]	@ (8003720 <menu+0x22cc>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	2b1c      	cmp	r3, #28
 80036dc:	f040 8088 	bne.w	80037f0 <menu+0x239c>
		calismaSayModu = 0;
 80036e0:	4b14      	ldr	r3, [pc, #80]	@ (8003734 <menu+0x22e0>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 80036e6:	4a14      	ldr	r2, [pc, #80]	@ (8003738 <menu+0x22e4>)
 80036e8:	2101      	movs	r1, #1
 80036ea:	2001      	movs	r0, #1
 80036ec:	f005 fd88 	bl	8009200 <lcd_print>

		if(demoMode == 0) {
 80036f0:	4b12      	ldr	r3, [pc, #72]	@ (800373c <menu+0x22e8>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d123      	bne.n	8003740 <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 80036f8:	4a0c      	ldr	r2, [pc, #48]	@ (800372c <menu+0x22d8>)
 80036fa:	2101      	movs	r1, #1
 80036fc:	2002      	movs	r0, #2
 80036fe:	f005 fd7f 	bl	8009200 <lcd_print>
 8003702:	e026      	b.n	8003752 <menu+0x22fe>
 8003704:	200016d8 	.word	0x200016d8
 8003708:	200019d0 	.word	0x200019d0
 800370c:	2000105c 	.word	0x2000105c
 8003710:	40010800 	.word	0x40010800
 8003714:	200016ef 	.word	0x200016ef
 8003718:	20000fec 	.word	0x20000fec
 800371c:	200016ec 	.word	0x200016ec
 8003720:	200016c0 	.word	0x200016c0
 8003724:	20000128 	.word	0x20000128
 8003728:	200016dc 	.word	0x200016dc
 800372c:	200018a4 	.word	0x200018a4
 8003730:	200018b8 	.word	0x200018b8
 8003734:	200016df 	.word	0x200016df
 8003738:	2000013c 	.word	0x2000013c
 800373c:	200016de 	.word	0x200016de
		} else if(demoMode == 1) {
 8003740:	4b80      	ldr	r3, [pc, #512]	@ (8003944 <menu+0x24f0>)
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d104      	bne.n	8003752 <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 8003748:	4a7f      	ldr	r2, [pc, #508]	@ (8003948 <menu+0x24f4>)
 800374a:	2101      	movs	r1, #1
 800374c:	2002      	movs	r0, #2
 800374e:	f005 fd57 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003752:	2102      	movs	r1, #2
 8003754:	487d      	ldr	r0, [pc, #500]	@ (800394c <menu+0x24f8>)
 8003756:	f007 f8a7 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800375a:	4603      	mov	r3, r0
 800375c:	2b01      	cmp	r3, #1
 800375e:	d115      	bne.n	800378c <menu+0x2338>
 8003760:	4b7b      	ldr	r3, [pc, #492]	@ (8003950 <menu+0x24fc>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	f083 0301 	eor.w	r3, r3, #1
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00e      	beq.n	800378c <menu+0x2338>
			demoMode = demoMode + 1;
 800376e:	4b75      	ldr	r3, [pc, #468]	@ (8003944 <menu+0x24f0>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	3301      	adds	r3, #1
 8003774:	b2da      	uxtb	r2, r3
 8003776:	4b73      	ldr	r3, [pc, #460]	@ (8003944 <menu+0x24f0>)
 8003778:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800377a:	4b72      	ldr	r3, [pc, #456]	@ (8003944 <menu+0x24f0>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d902      	bls.n	8003788 <menu+0x2334>
				demoMode = 0;
 8003782:	4b70      	ldr	r3, [pc, #448]	@ (8003944 <menu+0x24f0>)
 8003784:	2200      	movs	r2, #0
 8003786:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003788:	f000 fbaa 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800378c:	2104      	movs	r1, #4
 800378e:	486f      	ldr	r0, [pc, #444]	@ (800394c <menu+0x24f8>)
 8003790:	f007 f88a 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003794:	4603      	mov	r3, r0
 8003796:	2b01      	cmp	r3, #1
 8003798:	d115      	bne.n	80037c6 <menu+0x2372>
 800379a:	4b6d      	ldr	r3, [pc, #436]	@ (8003950 <menu+0x24fc>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	f083 0301 	eor.w	r3, r3, #1
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00e      	beq.n	80037c6 <menu+0x2372>
			demoMode = demoMode - 1;
 80037a8:	4b66      	ldr	r3, [pc, #408]	@ (8003944 <menu+0x24f0>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	4b64      	ldr	r3, [pc, #400]	@ (8003944 <menu+0x24f0>)
 80037b2:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80037b4:	4b63      	ldr	r3, [pc, #396]	@ (8003944 <menu+0x24f0>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <menu+0x236e>
		   		demoMode = 1;
 80037bc:	4b61      	ldr	r3, [pc, #388]	@ (8003944 <menu+0x24f0>)
 80037be:	2201      	movs	r2, #1
 80037c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80037c2:	f000 fb8d 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037c6:	2108      	movs	r1, #8
 80037c8:	4860      	ldr	r0, [pc, #384]	@ (800394c <menu+0x24f8>)
 80037ca:	f007 f86d 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d10d      	bne.n	80037f0 <menu+0x239c>
 80037d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003950 <menu+0x24fc>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	f083 0301 	eor.w	r3, r3, #1
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d006      	beq.n	80037f0 <menu+0x239c>
			eepromData[26] = demoMode;
 80037e2:	4b58      	ldr	r3, [pc, #352]	@ (8003944 <menu+0x24f0>)
 80037e4:	781a      	ldrb	r2, [r3, #0]
 80037e6:	4b5b      	ldr	r3, [pc, #364]	@ (8003954 <menu+0x2500>)
 80037e8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80037ea:	4b5b      	ldr	r3, [pc, #364]	@ (8003958 <menu+0x2504>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80037f0:	4b5a      	ldr	r3, [pc, #360]	@ (800395c <menu+0x2508>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b1d      	cmp	r3, #29
 80037f6:	f040 80d5 	bne.w	80039a4 <menu+0x2550>
		finalCount=0;
 80037fa:	4b59      	ldr	r3, [pc, #356]	@ (8003960 <menu+0x250c>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	601a      	str	r2, [r3, #0]
		if(calismaSayModu == 0) {
 8003800:	4b58      	ldr	r3, [pc, #352]	@ (8003964 <menu+0x2510>)
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d135      	bne.n	8003874 <menu+0x2420>
			lcd_print(1, 1, calismaSayisiText);
 8003808:	4a57      	ldr	r2, [pc, #348]	@ (8003968 <menu+0x2514>)
 800380a:	2101      	movs	r1, #1
 800380c:	2001      	movs	r0, #1
 800380e:	f005 fcf7 	bl	8009200 <lcd_print>

			if(demoMode == 1) {
 8003812:	4b4c      	ldr	r3, [pc, #304]	@ (8003944 <menu+0x24f0>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d113      	bne.n	8003842 <menu+0x23ee>
				finalCount += calismaCountDemo * 255; //sıfır durumu da dahil ediliyor
 800381a:	4b54      	ldr	r3, [pc, #336]	@ (800396c <menu+0x2518>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	4613      	mov	r3, r2
 8003822:	021b      	lsls	r3, r3, #8
 8003824:	1a9a      	subs	r2, r3, r2
 8003826:	4b4e      	ldr	r3, [pc, #312]	@ (8003960 <menu+0x250c>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4413      	add	r3, r2
 800382c:	4a4c      	ldr	r2, [pc, #304]	@ (8003960 <menu+0x250c>)
 800382e:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisiDemo;
 8003830:	4b4f      	ldr	r3, [pc, #316]	@ (8003970 <menu+0x251c>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	4b4a      	ldr	r3, [pc, #296]	@ (8003960 <menu+0x250c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4413      	add	r3, r2
 800383c:	4a48      	ldr	r2, [pc, #288]	@ (8003960 <menu+0x250c>)
 800383e:	6013      	str	r3, [r2, #0]
 8003840:	e012      	b.n	8003868 <menu+0x2414>
			} else {
				finalCount += calismaCount * 255; //sıfır durumu da dahil ediliyor
 8003842:	4b4c      	ldr	r3, [pc, #304]	@ (8003974 <menu+0x2520>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	461a      	mov	r2, r3
 8003848:	4613      	mov	r3, r2
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	1a9a      	subs	r2, r3, r2
 800384e:	4b44      	ldr	r3, [pc, #272]	@ (8003960 <menu+0x250c>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4413      	add	r3, r2
 8003854:	4a42      	ldr	r2, [pc, #264]	@ (8003960 <menu+0x250c>)
 8003856:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisi;
 8003858:	4b47      	ldr	r3, [pc, #284]	@ (8003978 <menu+0x2524>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	4b40      	ldr	r3, [pc, #256]	@ (8003960 <menu+0x250c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4413      	add	r3, r2
 8003864:	4a3e      	ldr	r2, [pc, #248]	@ (8003960 <menu+0x250c>)
 8003866:	6013      	str	r3, [r2, #0]
			}

			displayCycleOnLCD(finalCount);
 8003868:	4b3d      	ldr	r3, [pc, #244]	@ (8003960 <menu+0x250c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fa89 	bl	8003d84 <displayCycleOnLCD>
 8003872:	e00d      	b.n	8003890 <menu+0x243c>
		} else if(calismaSayModu == 1) {
 8003874:	4b3b      	ldr	r3, [pc, #236]	@ (8003964 <menu+0x2510>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d109      	bne.n	8003890 <menu+0x243c>
			lcd_print(1, 1, calismaSayisiText);
 800387c:	4a3a      	ldr	r2, [pc, #232]	@ (8003968 <menu+0x2514>)
 800387e:	2101      	movs	r1, #1
 8003880:	2001      	movs	r0, #1
 8003882:	f005 fcbd 	bl	8009200 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 8003886:	4a3d      	ldr	r2, [pc, #244]	@ (800397c <menu+0x2528>)
 8003888:	2101      	movs	r1, #1
 800388a:	2002      	movs	r0, #2
 800388c:	f005 fcb8 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003890:	2102      	movs	r1, #2
 8003892:	482e      	ldr	r0, [pc, #184]	@ (800394c <menu+0x24f8>)
 8003894:	f007 f808 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003898:	4603      	mov	r3, r0
 800389a:	2b01      	cmp	r3, #1
 800389c:	d115      	bne.n	80038ca <menu+0x2476>
 800389e:	4b2c      	ldr	r3, [pc, #176]	@ (8003950 <menu+0x24fc>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	f083 0301 	eor.w	r3, r3, #1
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00e      	beq.n	80038ca <menu+0x2476>
			calismaSayModu = calismaSayModu + 1;
 80038ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003964 <menu+0x2510>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	3301      	adds	r3, #1
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003964 <menu+0x2510>)
 80038b6:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80038b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003964 <menu+0x2510>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d902      	bls.n	80038c6 <menu+0x2472>
				calismaSayModu = 0;
 80038c0:	4b28      	ldr	r3, [pc, #160]	@ (8003964 <menu+0x2510>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038c6:	f000 fb0b 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038ca:	2104      	movs	r1, #4
 80038cc:	481f      	ldr	r0, [pc, #124]	@ (800394c <menu+0x24f8>)
 80038ce:	f006 ffeb 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d115      	bne.n	8003904 <menu+0x24b0>
 80038d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003950 <menu+0x24fc>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	f083 0301 	eor.w	r3, r3, #1
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00e      	beq.n	8003904 <menu+0x24b0>
			calismaSayModu = calismaSayModu - 1;
 80038e6:	4b1f      	ldr	r3, [pc, #124]	@ (8003964 <menu+0x2510>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	4b1d      	ldr	r3, [pc, #116]	@ (8003964 <menu+0x2510>)
 80038f0:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80038f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003964 <menu+0x2510>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <menu+0x24ac>
		   		calismaSayModu = 1;
 80038fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003964 <menu+0x2510>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003900:	f000 faee 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003904:	2108      	movs	r1, #8
 8003906:	4811      	ldr	r0, [pc, #68]	@ (800394c <menu+0x24f8>)
 8003908:	f006 ffce 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800390c:	4603      	mov	r3, r0
 800390e:	2b01      	cmp	r3, #1
 8003910:	d148      	bne.n	80039a4 <menu+0x2550>
 8003912:	4b0f      	ldr	r3, [pc, #60]	@ (8003950 <menu+0x24fc>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	f083 0301 	eor.w	r3, r3, #1
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d041      	beq.n	80039a4 <menu+0x2550>
			if(demoMode == 1) {
 8003920:	4b08      	ldr	r3, [pc, #32]	@ (8003944 <menu+0x24f0>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d12b      	bne.n	8003980 <menu+0x252c>
				eepromData[28] = 0;
 8003928:	4b0a      	ldr	r3, [pc, #40]	@ (8003954 <menu+0x2500>)
 800392a:	2200      	movs	r2, #0
 800392c:	771a      	strb	r2, [r3, #28]
				eepromData[30] = 0;
 800392e:	4b09      	ldr	r3, [pc, #36]	@ (8003954 <menu+0x2500>)
 8003930:	2200      	movs	r2, #0
 8003932:	779a      	strb	r2, [r3, #30]
				calismaSayisiDemo = 0;
 8003934:	4b0e      	ldr	r3, [pc, #56]	@ (8003970 <menu+0x251c>)
 8003936:	2200      	movs	r2, #0
 8003938:	701a      	strb	r2, [r3, #0]
				calismaCountDemo = 0;
 800393a:	4b0c      	ldr	r3, [pc, #48]	@ (800396c <menu+0x2518>)
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
 8003940:	e02a      	b.n	8003998 <menu+0x2544>
 8003942:	bf00      	nop
 8003944:	200016de 	.word	0x200016de
 8003948:	200018b8 	.word	0x200018b8
 800394c:	40010800 	.word	0x40010800
 8003950:	200016ef 	.word	0x200016ef
 8003954:	20000fec 	.word	0x20000fec
 8003958:	200016ec 	.word	0x200016ec
 800395c:	200016c0 	.word	0x200016c0
 8003960:	200016bc 	.word	0x200016bc
 8003964:	200016df 	.word	0x200016df
 8003968:	20001c14 	.word	0x20001c14
 800396c:	200016bb 	.word	0x200016bb
 8003970:	200016b9 	.word	0x200016b9
 8003974:	200016ba 	.word	0x200016ba
 8003978:	200016b8 	.word	0x200016b8
 800397c:	20001c28 	.word	0x20001c28
			} else {
				eepromData[27] = 0;
 8003980:	4b4b      	ldr	r3, [pc, #300]	@ (8003ab0 <menu+0x265c>)
 8003982:	2200      	movs	r2, #0
 8003984:	76da      	strb	r2, [r3, #27]
				eepromData[29] = 0;
 8003986:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab0 <menu+0x265c>)
 8003988:	2200      	movs	r2, #0
 800398a:	775a      	strb	r2, [r3, #29]
				calismaSayisi = 0;
 800398c:	4b49      	ldr	r3, [pc, #292]	@ (8003ab4 <menu+0x2660>)
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
				calismaCount = 0;
 8003992:	4b49      	ldr	r3, [pc, #292]	@ (8003ab8 <menu+0x2664>)
 8003994:	2200      	movs	r2, #0
 8003996:	701a      	strb	r2, [r3, #0]
			}
			calismaSayModu = 0;
 8003998:	4b48      	ldr	r3, [pc, #288]	@ (8003abc <menu+0x2668>)
 800399a:	2200      	movs	r2, #0
 800399c:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 800399e:	4b48      	ldr	r3, [pc, #288]	@ (8003ac0 <menu+0x266c>)
 80039a0:	2201      	movs	r2, #1
 80039a2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80039a4:	4b47      	ldr	r3, [pc, #284]	@ (8003ac4 <menu+0x2670>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b1e      	cmp	r3, #30
 80039aa:	d16a      	bne.n	8003a82 <menu+0x262e>
		calismaSayModu = 0;
 80039ac:	4b43      	ldr	r3, [pc, #268]	@ (8003abc <menu+0x2668>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 80039b2:	4a45      	ldr	r2, [pc, #276]	@ (8003ac8 <menu+0x2674>)
 80039b4:	2101      	movs	r1, #1
 80039b6:	2001      	movs	r0, #1
 80039b8:	f005 fc22 	bl	8009200 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 80039bc:	4a43      	ldr	r2, [pc, #268]	@ (8003acc <menu+0x2678>)
 80039be:	2101      	movs	r1, #1
 80039c0:	2002      	movs	r0, #2
 80039c2:	f005 fc1d 	bl	8009200 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039c6:	2102      	movs	r1, #2
 80039c8:	4841      	ldr	r0, [pc, #260]	@ (8003ad0 <menu+0x267c>)
 80039ca:	f006 ff6d 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d11c      	bne.n	8003a0e <menu+0x25ba>
 80039d4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ad4 <menu+0x2680>)
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	f083 0301 	eor.w	r3, r3, #1
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d015      	beq.n	8003a0e <menu+0x25ba>
			dilSecim = dilSecim + 1;
 80039e2:	4b3d      	ldr	r3, [pc, #244]	@ (8003ad8 <menu+0x2684>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	3301      	adds	r3, #1
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad8 <menu+0x2684>)
 80039ec:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80039ee:	4b3a      	ldr	r3, [pc, #232]	@ (8003ad8 <menu+0x2684>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d902      	bls.n	80039fc <menu+0x25a8>
				dilSecim = 0;
 80039f6:	4b38      	ldr	r3, [pc, #224]	@ (8003ad8 <menu+0x2684>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	701a      	strb	r2, [r3, #0]
			}
			resetMenuTexts();
 80039fc:	f003 ff70 	bl	80078e0 <resetMenuTexts>
			loadMenuTexts(dilSecim);
 8003a00:	4b35      	ldr	r3, [pc, #212]	@ (8003ad8 <menu+0x2684>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f002 fae5 	bl	8005fd4 <loadMenuTexts>

			bekle();
 8003a0a:	f000 fa69 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a0e:	2104      	movs	r1, #4
 8003a10:	482f      	ldr	r0, [pc, #188]	@ (8003ad0 <menu+0x267c>)
 8003a12:	f006 ff49 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d11c      	bne.n	8003a56 <menu+0x2602>
 8003a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad4 <menu+0x2680>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	f083 0301 	eor.w	r3, r3, #1
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d015      	beq.n	8003a56 <menu+0x2602>
			dilSecim = dilSecim - 1;
 8003a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ad8 <menu+0x2684>)
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	4b29      	ldr	r3, [pc, #164]	@ (8003ad8 <menu+0x2684>)
 8003a34:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003a36:	4b28      	ldr	r3, [pc, #160]	@ (8003ad8 <menu+0x2684>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <menu+0x25f0>
		   		dilSecim = 1;
 8003a3e:	4b26      	ldr	r3, [pc, #152]	@ (8003ad8 <menu+0x2684>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	701a      	strb	r2, [r3, #0]
		   	}
		   	resetMenuTexts();
 8003a44:	f003 ff4c 	bl	80078e0 <resetMenuTexts>
		   	loadMenuTexts(dilSecim);
 8003a48:	4b23      	ldr	r3, [pc, #140]	@ (8003ad8 <menu+0x2684>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f002 fac1 	bl	8005fd4 <loadMenuTexts>

			bekle();
 8003a52:	f000 fa45 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a56:	2108      	movs	r1, #8
 8003a58:	481d      	ldr	r0, [pc, #116]	@ (8003ad0 <menu+0x267c>)
 8003a5a:	f006 ff25 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d10e      	bne.n	8003a82 <menu+0x262e>
 8003a64:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad4 <menu+0x2680>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	f083 0301 	eor.w	r3, r3, #1
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d007      	beq.n	8003a82 <menu+0x262e>
			eepromData[33] = dilSecim;
 8003a72:	4b19      	ldr	r3, [pc, #100]	@ (8003ad8 <menu+0x2684>)
 8003a74:	781a      	ldrb	r2, [r3, #0]
 8003a76:	4b0e      	ldr	r3, [pc, #56]	@ (8003ab0 <menu+0x265c>)
 8003a78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 8003a7c:	4b10      	ldr	r3, [pc, #64]	@ (8003ac0 <menu+0x266c>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003a82:	4b10      	ldr	r3, [pc, #64]	@ (8003ac4 <menu+0x2670>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b1f      	cmp	r3, #31
 8003a88:	f040 8087 	bne.w	8003b9a <menu+0x2746>
		calismaSayModu = 0;
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003abc <menu+0x2668>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 8003a92:	4a12      	ldr	r2, [pc, #72]	@ (8003adc <menu+0x2688>)
 8003a94:	2101      	movs	r1, #1
 8003a96:	2001      	movs	r0, #1
 8003a98:	f005 fbb2 	bl	8009200 <lcd_print>

		if(iotMode == 0) {
 8003a9c:	4b10      	ldr	r3, [pc, #64]	@ (8003ae0 <menu+0x268c>)
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d121      	bne.n	8003ae8 <menu+0x2694>
			lcd_print(2, 1, pasifText);
 8003aa4:	4a0f      	ldr	r2, [pc, #60]	@ (8003ae4 <menu+0x2690>)
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	2002      	movs	r0, #2
 8003aaa:	f005 fba9 	bl	8009200 <lcd_print>
 8003aae:	e024      	b.n	8003afa <menu+0x26a6>
 8003ab0:	20000fec 	.word	0x20000fec
 8003ab4:	200016b8 	.word	0x200016b8
 8003ab8:	200016ba 	.word	0x200016ba
 8003abc:	200016df 	.word	0x200016df
 8003ac0:	200016ec 	.word	0x200016ec
 8003ac4:	200016c0 	.word	0x200016c0
 8003ac8:	20001c3c 	.word	0x20001c3c
 8003acc:	20001c50 	.word	0x20001c50
 8003ad0:	40010800 	.word	0x40010800
 8003ad4:	200016ef 	.word	0x200016ef
 8003ad8:	200016e0 	.word	0x200016e0
 8003adc:	20000150 	.word	0x20000150
 8003ae0:	200016eb 	.word	0x200016eb
 8003ae4:	200018a4 	.word	0x200018a4
		} else if(iotMode == 1) {
 8003ae8:	4b99      	ldr	r3, [pc, #612]	@ (8003d50 <menu+0x28fc>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d104      	bne.n	8003afa <menu+0x26a6>
			lcd_print(2, 1, aktifText);
 8003af0:	4a98      	ldr	r2, [pc, #608]	@ (8003d54 <menu+0x2900>)
 8003af2:	2101      	movs	r1, #1
 8003af4:	2002      	movs	r0, #2
 8003af6:	f005 fb83 	bl	8009200 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003afa:	2102      	movs	r1, #2
 8003afc:	4896      	ldr	r0, [pc, #600]	@ (8003d58 <menu+0x2904>)
 8003afe:	f006 fed3 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d115      	bne.n	8003b34 <menu+0x26e0>
 8003b08:	4b94      	ldr	r3, [pc, #592]	@ (8003d5c <menu+0x2908>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	f083 0301 	eor.w	r3, r3, #1
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00e      	beq.n	8003b34 <menu+0x26e0>
			iotMode = iotMode + 1;
 8003b16:	4b8e      	ldr	r3, [pc, #568]	@ (8003d50 <menu+0x28fc>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	b2da      	uxtb	r2, r3
 8003b1e:	4b8c      	ldr	r3, [pc, #560]	@ (8003d50 <menu+0x28fc>)
 8003b20:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003b22:	4b8b      	ldr	r3, [pc, #556]	@ (8003d50 <menu+0x28fc>)
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d902      	bls.n	8003b30 <menu+0x26dc>
				iotMode = 0;
 8003b2a:	4b89      	ldr	r3, [pc, #548]	@ (8003d50 <menu+0x28fc>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003b30:	f000 f9d6 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b34:	2104      	movs	r1, #4
 8003b36:	4888      	ldr	r0, [pc, #544]	@ (8003d58 <menu+0x2904>)
 8003b38:	f006 feb6 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d115      	bne.n	8003b6e <menu+0x271a>
 8003b42:	4b86      	ldr	r3, [pc, #536]	@ (8003d5c <menu+0x2908>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	f083 0301 	eor.w	r3, r3, #1
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00e      	beq.n	8003b6e <menu+0x271a>
			iotMode = iotMode - 1;
 8003b50:	4b7f      	ldr	r3, [pc, #508]	@ (8003d50 <menu+0x28fc>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b2da      	uxtb	r2, r3
 8003b58:	4b7d      	ldr	r3, [pc, #500]	@ (8003d50 <menu+0x28fc>)
 8003b5a:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003b5c:	4b7c      	ldr	r3, [pc, #496]	@ (8003d50 <menu+0x28fc>)
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <menu+0x2716>
		   		iotMode = 1;
 8003b64:	4b7a      	ldr	r3, [pc, #488]	@ (8003d50 <menu+0x28fc>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003b6a:	f000 f9b9 	bl	8003ee0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b6e:	2108      	movs	r1, #8
 8003b70:	4879      	ldr	r0, [pc, #484]	@ (8003d58 <menu+0x2904>)
 8003b72:	f006 fe99 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d10e      	bne.n	8003b9a <menu+0x2746>
 8003b7c:	4b77      	ldr	r3, [pc, #476]	@ (8003d5c <menu+0x2908>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	f083 0301 	eor.w	r3, r3, #1
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d007      	beq.n	8003b9a <menu+0x2746>
			eepromData[48] = iotMode;
 8003b8a:	4b71      	ldr	r3, [pc, #452]	@ (8003d50 <menu+0x28fc>)
 8003b8c:	781a      	ldrb	r2, [r3, #0]
 8003b8e:	4b74      	ldr	r3, [pc, #464]	@ (8003d60 <menu+0x290c>)
 8003b90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003b94:	4b73      	ldr	r3, [pc, #460]	@ (8003d64 <menu+0x2910>)
 8003b96:	2201      	movs	r2, #1
 8003b98:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003b9a:	4b73      	ldr	r3, [pc, #460]	@ (8003d68 <menu+0x2914>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b20      	cmp	r3, #32
 8003ba0:	d127      	bne.n	8003bf2 <menu+0x279e>
		calismaSayModu = 0;
 8003ba2:	4b72      	ldr	r3, [pc, #456]	@ (8003d6c <menu+0x2918>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, machineIDText);
 8003ba8:	4a71      	ldr	r2, [pc, #452]	@ (8003d70 <menu+0x291c>)
 8003baa:	2101      	movs	r1, #1
 8003bac:	2001      	movs	r0, #1
 8003bae:	f005 fb27 	bl	8009200 <lcd_print>

		convertArrays(1);
 8003bb2:	2001      	movs	r0, #1
 8003bb4:	f7fc fe78 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003bb8:	2032      	movs	r0, #50	@ 0x32
 8003bba:	f006 f899 	bl	8009cf0 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8003bbe:	2001      	movs	r0, #1
 8003bc0:	f7fd fbec 	bl	800139c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bc4:	2102      	movs	r1, #2
 8003bc6:	4864      	ldr	r0, [pc, #400]	@ (8003d58 <menu+0x2904>)
 8003bc8:	f006 fe6e 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d10f      	bne.n	8003bf2 <menu+0x279e>
 8003bd2:	2104      	movs	r1, #4
 8003bd4:	4860      	ldr	r0, [pc, #384]	@ (8003d58 <menu+0x2904>)
 8003bd6:	f006 fe67 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d108      	bne.n	8003bf2 <menu+0x279e>
 8003be0:	4b5e      	ldr	r3, [pc, #376]	@ (8003d5c <menu+0x2908>)
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	f083 0301 	eor.w	r3, r3, #1
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <menu+0x279e>
			takeMachineIDWithConfirmation();
 8003bee:	f004 fab3 	bl	8008158 <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 8003bf2:	4b5d      	ldr	r3, [pc, #372]	@ (8003d68 <menu+0x2914>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b21      	cmp	r3, #33	@ 0x21
 8003bf8:	d12b      	bne.n	8003c52 <menu+0x27fe>
		calismaSayModu = 0;
 8003bfa:	4b5c      	ldr	r3, [pc, #368]	@ (8003d6c <menu+0x2918>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 8003c00:	2002      	movs	r0, #2
 8003c02:	f7fc fe51 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003c06:	2032      	movs	r0, #50	@ 0x32
 8003c08:	f006 f872 	bl	8009cf0 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003c0c:	2002      	movs	r0, #2
 8003c0e:	f7fd fbc5 	bl	800139c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c12:	2102      	movs	r1, #2
 8003c14:	4850      	ldr	r0, [pc, #320]	@ (8003d58 <menu+0x2904>)
 8003c16:	f006 fe47 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d118      	bne.n	8003c52 <menu+0x27fe>
 8003c20:	2104      	movs	r1, #4
 8003c22:	484d      	ldr	r0, [pc, #308]	@ (8003d58 <menu+0x2904>)
 8003c24:	f006 fe40 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d111      	bne.n	8003c52 <menu+0x27fe>
 8003c2e:	4b4b      	ldr	r3, [pc, #300]	@ (8003d5c <menu+0x2908>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	f083 0301 	eor.w	r3, r3, #1
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <menu+0x27fe>
			takeWifiSSID();
 8003c3c:	f004 fc98 	bl	8008570 <takeWifiSSID>

			convertArrays(2);
 8003c40:	2002      	movs	r0, #2
 8003c42:	f7fc fe31 	bl	80008a8 <convertArrays>
			HAL_Delay(50);
 8003c46:	2032      	movs	r0, #50	@ 0x32
 8003c48:	f006 f852 	bl	8009cf0 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003c4c:	2002      	movs	r0, #2
 8003c4e:	f7fd fba5 	bl	800139c <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003c52:	4b45      	ldr	r3, [pc, #276]	@ (8003d68 <menu+0x2914>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b22      	cmp	r3, #34	@ 0x22
 8003c58:	d12b      	bne.n	8003cb2 <menu+0x285e>
		calismaSayModu = 0;
 8003c5a:	4b44      	ldr	r3, [pc, #272]	@ (8003d6c <menu+0x2918>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8003c60:	2003      	movs	r0, #3
 8003c62:	f7fc fe21 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003c66:	2032      	movs	r0, #50	@ 0x32
 8003c68:	f006 f842 	bl	8009cf0 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003c6c:	2003      	movs	r0, #3
 8003c6e:	f7fd fb95 	bl	800139c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c72:	2102      	movs	r1, #2
 8003c74:	4838      	ldr	r0, [pc, #224]	@ (8003d58 <menu+0x2904>)
 8003c76:	f006 fe17 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d118      	bne.n	8003cb2 <menu+0x285e>
 8003c80:	2104      	movs	r1, #4
 8003c82:	4835      	ldr	r0, [pc, #212]	@ (8003d58 <menu+0x2904>)
 8003c84:	f006 fe10 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d111      	bne.n	8003cb2 <menu+0x285e>
 8003c8e:	4b33      	ldr	r3, [pc, #204]	@ (8003d5c <menu+0x2908>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	f083 0301 	eor.w	r3, r3, #1
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <menu+0x285e>
			takeWifiPass();
 8003c9c:	f004 fe14 	bl	80088c8 <takeWifiPass>

			convertArrays(3);
 8003ca0:	2003      	movs	r0, #3
 8003ca2:	f7fc fe01 	bl	80008a8 <convertArrays>
			HAL_Delay(50);
 8003ca6:	2032      	movs	r0, #50	@ 0x32
 8003ca8:	f006 f822 	bl	8009cf0 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8003cac:	2003      	movs	r0, #3
 8003cae:	f7fd fb75 	bl	800139c <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8003cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8003d68 <menu+0x2914>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b23      	cmp	r3, #35	@ 0x23
 8003cb8:	d146      	bne.n	8003d48 <menu+0x28f4>
		lcd_print(1, 1, menudenCikisText);
 8003cba:	4a2e      	ldr	r2, [pc, #184]	@ (8003d74 <menu+0x2920>)
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	2001      	movs	r0, #1
 8003cc0:	f005 fa9e 	bl	8009200 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003cc4:	4a2c      	ldr	r2, [pc, #176]	@ (8003d78 <menu+0x2924>)
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	2002      	movs	r0, #2
 8003cca:	f005 fa99 	bl	8009200 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003cce:	2108      	movs	r1, #8
 8003cd0:	4821      	ldr	r0, [pc, #132]	@ (8003d58 <menu+0x2904>)
 8003cd2:	f006 fde9 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d135      	bne.n	8003d48 <menu+0x28f4>
			menuGiris = 0;
 8003cdc:	4b27      	ldr	r3, [pc, #156]	@ (8003d7c <menu+0x2928>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	701a      	strb	r2, [r3, #0]

			uint32_t startTick = HAL_GetTick();
 8003ce2:	f005 fffb 	bl	8009cdc <HAL_GetTick>
 8003ce6:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003ce8:	e007      	b.n	8003cfa <menu+0x28a6>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003cea:	f005 fff7 	bl	8009cdc <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003cf8:	d806      	bhi.n	8003d08 <menu+0x28b4>
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003cfa:	4821      	ldr	r0, [pc, #132]	@ (8003d80 <menu+0x292c>)
 8003cfc:	f007 fbfd 	bl	800b4fa <HAL_I2C_GetError>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d0f1      	beq.n	8003cea <menu+0x2896>
 8003d06:	e000      	b.n	8003d0a <menu+0x28b6>
			        break;
 8003d08:	bf00      	nop
			    }
			}

			startTick = HAL_GetTick();
 8003d0a:	f005 ffe7 	bl	8009cdc <HAL_GetTick>
 8003d0e:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003d10:	e007      	b.n	8003d22 <menu+0x28ce>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003d12:	f005 ffe3 	bl	8009cdc <HAL_GetTick>
 8003d16:	4602      	mov	r2, r0
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d20:	d806      	bhi.n	8003d30 <menu+0x28dc>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003d22:	4817      	ldr	r0, [pc, #92]	@ (8003d80 <menu+0x292c>)
 8003d24:	f007 fbdc 	bl	800b4e0 <HAL_I2C_GetState>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	d1f1      	bne.n	8003d12 <menu+0x28be>
 8003d2e:	e000      	b.n	8003d32 <menu+0x28de>
			        break;
 8003d30:	bf00      	nop
			    }
			}

			saveEEPROM(0);
 8003d32:	2000      	movs	r0, #0
 8003d34:	f7fc fcb6 	bl	80006a4 <saveEEPROM>

			lcd_clear();
 8003d38:	f005 fa8e 	bl	8009258 <lcd_clear>
			HAL_Delay(500);
 8003d3c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003d40:	f005 ffd6 	bl	8009cf0 <HAL_Delay>
			NVIC_SystemReset();
 8003d44:	f7fd fb70 	bl	8001428 <__NVIC_SystemReset>
		}
	}
}
 8003d48:	bf00      	nop
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	200016eb 	.word	0x200016eb
 8003d54:	200018b8 	.word	0x200018b8
 8003d58:	40010800 	.word	0x40010800
 8003d5c:	200016ef 	.word	0x200016ef
 8003d60:	20000fec 	.word	0x20000fec
 8003d64:	200016ec 	.word	0x200016ec
 8003d68:	200016c0 	.word	0x200016c0
 8003d6c:	200016df 	.word	0x200016df
 8003d70:	20001dcc 	.word	0x20001dcc
 8003d74:	20001c64 	.word	0x20001c64
 8003d78:	20001c78 	.word	0x20001c78
 8003d7c:	200016dd 	.word	0x200016dd
 8003d80:	20001e44 	.word	0x20001e44

08003d84 <displayCycleOnLCD>:

void displayCycleOnLCD(int finalCount) {
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08a      	sub	sp, #40	@ 0x28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
    int padding, i;

    itoa(finalCount, snum, 10);
 8003d8c:	220a      	movs	r2, #10
 8003d8e:	491c      	ldr	r1, [pc, #112]	@ (8003e00 <displayCycleOnLCD+0x7c>)
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f00a f901 	bl	800df98 <itoa>

    int length = strlen(snum);
 8003d96:	481a      	ldr	r0, [pc, #104]	@ (8003e00 <displayCycleOnLCD+0x7c>)
 8003d98:	f7fc fa44 	bl	8000224 <strlen>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	623b      	str	r3, [r7, #32]

    padding = (16 - length) / 2;
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	f1c3 0310 	rsb	r3, r3, #16
 8003da6:	0fda      	lsrs	r2, r3, #31
 8003da8:	4413      	add	r3, r2
 8003daa:	105b      	asrs	r3, r3, #1
 8003dac:	61fb      	str	r3, [r7, #28]

    char displayLine[17];
    memset(displayLine, ' ', 16);
 8003dae:	f107 0308 	add.w	r3, r7, #8
 8003db2:	2210      	movs	r2, #16
 8003db4:	2120      	movs	r1, #32
 8003db6:	4618      	mov	r0, r3
 8003db8:	f00a fa61 	bl	800e27e <memset>
    displayLine[16] = '\0'; // Null terminator
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	763b      	strb	r3, [r7, #24]

    for (i = 0; i < length; i++) {
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dc4:	e00d      	b.n	8003de2 <displayCycleOnLCD+0x5e>
        displayLine[padding + i] = snum[i];
 8003dc6:	69fa      	ldr	r2, [r7, #28]
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dca:	4413      	add	r3, r2
 8003dcc:	490c      	ldr	r1, [pc, #48]	@ (8003e00 <displayCycleOnLCD+0x7c>)
 8003dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dd0:	440a      	add	r2, r1
 8003dd2:	7812      	ldrb	r2, [r2, #0]
 8003dd4:	3328      	adds	r3, #40	@ 0x28
 8003dd6:	443b      	add	r3, r7
 8003dd8:	f803 2c20 	strb.w	r2, [r3, #-32]
    for (i = 0; i < length; i++) {
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dde:	3301      	adds	r3, #1
 8003de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de4:	6a3b      	ldr	r3, [r7, #32]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	dbed      	blt.n	8003dc6 <displayCycleOnLCD+0x42>
    }

    lcd_print(2, 1, displayLine);
 8003dea:	f107 0308 	add.w	r3, r7, #8
 8003dee:	461a      	mov	r2, r3
 8003df0:	2101      	movs	r1, #1
 8003df2:	2002      	movs	r0, #2
 8003df4:	f005 fa04 	bl	8009200 <lcd_print>
}
 8003df8:	bf00      	nop
 8003dfa:	3728      	adds	r7, #40	@ 0x28
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	2000105c 	.word	0x2000105c

08003e04 <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d105      	bne.n	8003e20 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003e14:	4a24      	ldr	r2, [pc, #144]	@ (8003ea8 <lcdUpdate+0xa4>)
 8003e16:	2101      	movs	r1, #1
 8003e18:	2002      	movs	r0, #2
 8003e1a:	f005 f9f1 	bl	8009200 <lcd_print>
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
		HAL_Delay(10);
	}
}
 8003e1e:	e03e      	b.n	8003e9e <lcdUpdate+0x9a>
	} else if(y==2) {
 8003e20:	79fb      	ldrb	r3, [r7, #7]
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d105      	bne.n	8003e32 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003e26:	4a20      	ldr	r2, [pc, #128]	@ (8003ea8 <lcdUpdate+0xa4>)
 8003e28:	2102      	movs	r1, #2
 8003e2a:	2002      	movs	r0, #2
 8003e2c:	f005 f9e8 	bl	8009200 <lcd_print>
}
 8003e30:	e035      	b.n	8003e9e <lcdUpdate+0x9a>
	} else if(y==3) {
 8003e32:	79fb      	ldrb	r3, [r7, #7]
 8003e34:	2b03      	cmp	r3, #3
 8003e36:	d105      	bne.n	8003e44 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003e38:	4a1b      	ldr	r2, [pc, #108]	@ (8003ea8 <lcdUpdate+0xa4>)
 8003e3a:	2103      	movs	r1, #3
 8003e3c:	2002      	movs	r0, #2
 8003e3e:	f005 f9df 	bl	8009200 <lcd_print>
}
 8003e42:	e02c      	b.n	8003e9e <lcdUpdate+0x9a>
	} else if(y==4) {
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d105      	bne.n	8003e56 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003e4a:	4a17      	ldr	r2, [pc, #92]	@ (8003ea8 <lcdUpdate+0xa4>)
 8003e4c:	2104      	movs	r1, #4
 8003e4e:	2002      	movs	r0, #2
 8003e50:	f005 f9d6 	bl	8009200 <lcd_print>
}
 8003e54:	e023      	b.n	8003e9e <lcdUpdate+0x9a>
	} else if(y==5) {
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	2b05      	cmp	r3, #5
 8003e5a:	d105      	bne.n	8003e68 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003e5c:	4a12      	ldr	r2, [pc, #72]	@ (8003ea8 <lcdUpdate+0xa4>)
 8003e5e:	2105      	movs	r1, #5
 8003e60:	2002      	movs	r0, #2
 8003e62:	f005 f9cd 	bl	8009200 <lcd_print>
}
 8003e66:	e01a      	b.n	8003e9e <lcdUpdate+0x9a>
	} else if(y==6) {
 8003e68:	79fb      	ldrb	r3, [r7, #7]
 8003e6a:	2b06      	cmp	r3, #6
 8003e6c:	d105      	bne.n	8003e7a <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8003e6e:	4a0e      	ldr	r2, [pc, #56]	@ (8003ea8 <lcdUpdate+0xa4>)
 8003e70:	2106      	movs	r1, #6
 8003e72:	2002      	movs	r0, #2
 8003e74:	f005 f9c4 	bl	8009200 <lcd_print>
}
 8003e78:	e011      	b.n	8003e9e <lcdUpdate+0x9a>
	} else if (y==7) {
 8003e7a:	79fb      	ldrb	r3, [r7, #7]
 8003e7c:	2b07      	cmp	r3, #7
 8003e7e:	d10e      	bne.n	8003e9e <lcdUpdate+0x9a>
		lcd_clear();
 8003e80:	f005 f9ea 	bl	8009258 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8003e84:	4a09      	ldr	r2, [pc, #36]	@ (8003eac <lcdUpdate+0xa8>)
 8003e86:	2101      	movs	r1, #1
 8003e88:	2001      	movs	r0, #1
 8003e8a:	f005 f9b9 	bl	8009200 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8003e8e:	4a08      	ldr	r2, [pc, #32]	@ (8003eb0 <lcdUpdate+0xac>)
 8003e90:	2101      	movs	r1, #1
 8003e92:	2002      	movs	r0, #2
 8003e94:	f005 f9b4 	bl	8009200 <lcd_print>
		HAL_Delay(10);
 8003e98:	200a      	movs	r0, #10
 8003e9a:	f005 ff29 	bl	8009cf0 <HAL_Delay>
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	0800ede4 	.word	0x0800ede4
 8003eac:	200000c4 	.word	0x200000c4
 8003eb0:	200000d8 	.word	0x200000d8

08003eb4 <checkLCDBacklight>:

void checkLCDBacklight() {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure) {
 8003eb8:	4b07      	ldr	r3, [pc, #28]	@ (8003ed8 <checkLCDBacklight+0x24>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b07      	ldr	r3, [pc, #28]	@ (8003edc <checkLCDBacklight+0x28>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b3b      	cmp	r3, #59	@ 0x3b
 8003ec4:	d903      	bls.n	8003ece <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8003ec6:	2000      	movs	r0, #0
 8003ec8:	f005 f9e6 	bl	8009298 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8003ecc:	e002      	b.n	8003ed4 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8003ece:	2001      	movs	r0, #1
 8003ed0:	f005 f9e2 	bl	8009298 <lcd_backlight>
}
 8003ed4:	bf00      	nop
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20001698 	.word	0x20001698
 8003edc:	200016b4 	.word	0x200016b4

08003ee0 <bekle>:

void bekle() {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
	timer1=millis;
 8003ee4:	4b47      	ldr	r3, [pc, #284]	@ (8004004 <bekle+0x124>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a47      	ldr	r2, [pc, #284]	@ (8004008 <bekle+0x128>)
 8003eea:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003eec:	e002      	b.n	8003ef4 <bekle+0x14>
    	butonKontrol = 1;
 8003eee:	4b47      	ldr	r3, [pc, #284]	@ (800400c <bekle+0x12c>)
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003ef4:	2101      	movs	r1, #1
 8003ef6:	4846      	ldr	r0, [pc, #280]	@ (8004010 <bekle+0x130>)
 8003ef8:	f006 fcd6 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d109      	bne.n	8003f16 <bekle+0x36>
 8003f02:	4b40      	ldr	r3, [pc, #256]	@ (8004004 <bekle+0x124>)
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4b40      	ldr	r3, [pc, #256]	@ (8004008 <bekle+0x128>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d0ef      	beq.n	8003eee <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003f0e:	e002      	b.n	8003f16 <bekle+0x36>
    	butonKontrol = 1;
 8003f10:	4b3e      	ldr	r3, [pc, #248]	@ (800400c <bekle+0x12c>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003f16:	2108      	movs	r1, #8
 8003f18:	483e      	ldr	r0, [pc, #248]	@ (8004014 <bekle+0x134>)
 8003f1a:	f006 fcc5 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d109      	bne.n	8003f38 <bekle+0x58>
 8003f24:	4b37      	ldr	r3, [pc, #220]	@ (8004004 <bekle+0x124>)
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4b37      	ldr	r3, [pc, #220]	@ (8004008 <bekle+0x128>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d0ef      	beq.n	8003f10 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003f30:	e002      	b.n	8003f38 <bekle+0x58>
    	butonKontrol = 1;
 8003f32:	4b36      	ldr	r3, [pc, #216]	@ (800400c <bekle+0x12c>)
 8003f34:	2201      	movs	r2, #1
 8003f36:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003f38:	2102      	movs	r1, #2
 8003f3a:	4835      	ldr	r0, [pc, #212]	@ (8004010 <bekle+0x130>)
 8003f3c:	f006 fcb4 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d109      	bne.n	8003f5a <bekle+0x7a>
 8003f46:	4b2f      	ldr	r3, [pc, #188]	@ (8004004 <bekle+0x124>)
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8004008 <bekle+0x128>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d0ef      	beq.n	8003f32 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003f52:	e002      	b.n	8003f5a <bekle+0x7a>
    	butonKontrol = 1;
 8003f54:	4b2d      	ldr	r3, [pc, #180]	@ (800400c <bekle+0x12c>)
 8003f56:	2201      	movs	r2, #1
 8003f58:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003f5a:	2104      	movs	r1, #4
 8003f5c:	482c      	ldr	r0, [pc, #176]	@ (8004010 <bekle+0x130>)
 8003f5e:	f006 fca3 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d109      	bne.n	8003f7c <bekle+0x9c>
 8003f68:	4b26      	ldr	r3, [pc, #152]	@ (8004004 <bekle+0x124>)
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	4b26      	ldr	r3, [pc, #152]	@ (8004008 <bekle+0x128>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d0ef      	beq.n	8003f54 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003f74:	e002      	b.n	8003f7c <bekle+0x9c>
    	butonKontrol = 1;
 8003f76:	4b25      	ldr	r3, [pc, #148]	@ (800400c <bekle+0x12c>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003f7c:	2108      	movs	r1, #8
 8003f7e:	4824      	ldr	r0, [pc, #144]	@ (8004010 <bekle+0x130>)
 8003f80:	f006 fc92 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d109      	bne.n	8003f9e <bekle+0xbe>
 8003f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8004004 <bekle+0x124>)
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4b1e      	ldr	r3, [pc, #120]	@ (8004008 <bekle+0x128>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d0ef      	beq.n	8003f76 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003f96:	e002      	b.n	8003f9e <bekle+0xbe>
    	butonKontrol = 1;
 8003f98:	4b1c      	ldr	r3, [pc, #112]	@ (800400c <bekle+0x12c>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003f9e:	2180      	movs	r1, #128	@ 0x80
 8003fa0:	481c      	ldr	r0, [pc, #112]	@ (8004014 <bekle+0x134>)
 8003fa2:	f006 fc81 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d109      	bne.n	8003fc0 <bekle+0xe0>
 8003fac:	4b15      	ldr	r3, [pc, #84]	@ (8004004 <bekle+0x124>)
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	4b15      	ldr	r3, [pc, #84]	@ (8004008 <bekle+0x128>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d0ef      	beq.n	8003f98 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003fb8:	e002      	b.n	8003fc0 <bekle+0xe0>
    	butonKontrol = 1;
 8003fba:	4b14      	ldr	r3, [pc, #80]	@ (800400c <bekle+0x12c>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003fc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003fc4:	4813      	ldr	r0, [pc, #76]	@ (8004014 <bekle+0x134>)
 8003fc6:	f006 fc6f 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d109      	bne.n	8003fe4 <bekle+0x104>
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004004 <bekle+0x124>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004008 <bekle+0x128>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d0ee      	beq.n	8003fba <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003fdc:	e002      	b.n	8003fe4 <bekle+0x104>
    	butonKontrol = 1;
 8003fde:	4b0b      	ldr	r3, [pc, #44]	@ (800400c <bekle+0x12c>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003fe4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003fe8:	480a      	ldr	r0, [pc, #40]	@ (8004014 <bekle+0x134>)
 8003fea:	f006 fc5d 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d105      	bne.n	8004000 <bekle+0x120>
 8003ff4:	4b03      	ldr	r3, [pc, #12]	@ (8004004 <bekle+0x124>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4b03      	ldr	r3, [pc, #12]	@ (8004008 <bekle+0x128>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d0ee      	beq.n	8003fde <bekle+0xfe>
    }

}
 8004000:	bf00      	nop
 8004002:	bd80      	pop	{r7, pc}
 8004004:	20001698 	.word	0x20001698
 8004008:	200016a0 	.word	0x200016a0
 800400c:	200016ef 	.word	0x200016ef
 8004010:	40010800 	.word	0x40010800
 8004014:	40011000 	.word	0x40011000

08004018 <buttonCheck>:

uint8_t buttonCheck(void) {
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 800401c:	2101      	movs	r1, #1
 800401e:	4815      	ldr	r0, [pc, #84]	@ (8004074 <buttonCheck+0x5c>)
 8004020:	f006 fc42 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004024:	4603      	mov	r3, r0
 8004026:	2b01      	cmp	r3, #1
 8004028:	d01b      	beq.n	8004062 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 800402a:	2108      	movs	r1, #8
 800402c:	4812      	ldr	r0, [pc, #72]	@ (8004078 <buttonCheck+0x60>)
 800402e:	f006 fc3b 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004032:	4603      	mov	r3, r0
 8004034:	2b01      	cmp	r3, #1
 8004036:	d014      	beq.n	8004062 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8004038:	2102      	movs	r1, #2
 800403a:	480e      	ldr	r0, [pc, #56]	@ (8004074 <buttonCheck+0x5c>)
 800403c:	f006 fc34 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004040:	4603      	mov	r3, r0
 8004042:	2b01      	cmp	r3, #1
 8004044:	d00d      	beq.n	8004062 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8004046:	2104      	movs	r1, #4
 8004048:	480a      	ldr	r0, [pc, #40]	@ (8004074 <buttonCheck+0x5c>)
 800404a:	f006 fc2d 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800404e:	4603      	mov	r3, r0
 8004050:	2b01      	cmp	r3, #1
 8004052:	d006      	beq.n	8004062 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8004054:	2108      	movs	r1, #8
 8004056:	4807      	ldr	r0, [pc, #28]	@ (8004074 <buttonCheck+0x5c>)
 8004058:	f006 fc26 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800405c:	4603      	mov	r3, r0
 800405e:	2b01      	cmp	r3, #1
 8004060:	d104      	bne.n	800406c <buttonCheck+0x54>
		backLightTimer = 0;
 8004062:	4b06      	ldr	r3, [pc, #24]	@ (800407c <buttonCheck+0x64>)
 8004064:	2200      	movs	r2, #0
 8004066:	601a      	str	r2, [r3, #0]
		return 1;
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <buttonCheck+0x56>
	}
	return 0;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40010800 	.word	0x40010800
 8004078:	40011000 	.word	0x40011000
 800407c:	200016b4 	.word	0x200016b4

08004080 <checkBasincSalteri>:

void checkBasincSalteri() {
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8004084:	4b13      	ldr	r3, [pc, #76]	@ (80040d4 <checkBasincSalteri+0x54>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d102      	bne.n	8004092 <checkBasincSalteri+0x12>
		basincVar=1;
 800408c:	4b12      	ldr	r3, [pc, #72]	@ (80040d8 <checkBasincSalteri+0x58>)
 800408e:	2201      	movs	r2, #1
 8004090:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8004092:	4b10      	ldr	r3, [pc, #64]	@ (80040d4 <checkBasincSalteri+0x54>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d119      	bne.n	80040ce <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 800409a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800409e:	480f      	ldr	r0, [pc, #60]	@ (80040dc <checkBasincSalteri+0x5c>)
 80040a0:	f006 fc02 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10a      	bne.n	80040c0 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 80040aa:	4b0d      	ldr	r3, [pc, #52]	@ (80040e0 <checkBasincSalteri+0x60>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4b0d      	ldr	r3, [pc, #52]	@ (80040e4 <checkBasincSalteri+0x64>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d90a      	bls.n	80040ce <checkBasincSalteri+0x4e>
				basincVar=1;
 80040b8:	4b07      	ldr	r3, [pc, #28]	@ (80040d8 <checkBasincSalteri+0x58>)
 80040ba:	2201      	movs	r2, #1
 80040bc:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80040be:	e006      	b.n	80040ce <checkBasincSalteri+0x4e>
			timer5=millis;
 80040c0:	4b07      	ldr	r3, [pc, #28]	@ (80040e0 <checkBasincSalteri+0x60>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a07      	ldr	r2, [pc, #28]	@ (80040e4 <checkBasincSalteri+0x64>)
 80040c6:	6013      	str	r3, [r2, #0]
			basincVar=0;
 80040c8:	4b03      	ldr	r3, [pc, #12]	@ (80040d8 <checkBasincSalteri+0x58>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	701a      	strb	r2, [r3, #0]
}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	200016c7 	.word	0x200016c7
 80040d8:	200016c3 	.word	0x200016c3
 80040dc:	40011000 	.word	0x40011000
 80040e0:	20001698 	.word	0x20001698
 80040e4:	200016b0 	.word	0x200016b0

080040e8 <checkBasGonder>:

void checkBasGonder() {
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80040ec:	4b1b      	ldr	r3, [pc, #108]	@ (800415c <checkBasGonder+0x74>)
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d10b      	bne.n	800410c <checkBasGonder+0x24>
 80040f4:	4b1a      	ldr	r3, [pc, #104]	@ (8004160 <checkBasGonder+0x78>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d007      	beq.n	800410c <checkBasGonder+0x24>
 80040fc:	4b19      	ldr	r3, [pc, #100]	@ (8004164 <checkBasGonder+0x7c>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d103      	bne.n	800410c <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004104:	4b18      	ldr	r3, [pc, #96]	@ (8004168 <checkBasGonder+0x80>)
 8004106:	2201      	movs	r2, #1
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	e009      	b.n	8004120 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 800410c:	4b14      	ldr	r3, [pc, #80]	@ (8004160 <checkBasGonder+0x78>)
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	f083 0301 	eor.w	r3, r3, #1
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 800411a:	4b13      	ldr	r3, [pc, #76]	@ (8004168 <checkBasGonder+0x80>)
 800411c:	2200      	movs	r2, #0
 800411e:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004120:	4b0e      	ldr	r3, [pc, #56]	@ (800415c <checkBasGonder+0x74>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d10b      	bne.n	8004140 <checkBasGonder+0x58>
 8004128:	4b10      	ldr	r3, [pc, #64]	@ (800416c <checkBasGonder+0x84>)
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d007      	beq.n	8004140 <checkBasGonder+0x58>
 8004130:	4b0c      	ldr	r3, [pc, #48]	@ (8004164 <checkBasGonder+0x7c>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d103      	bne.n	8004140 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004138:	4b0d      	ldr	r3, [pc, #52]	@ (8004170 <checkBasGonder+0x88>)
 800413a:	2201      	movs	r2, #1
 800413c:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 800413e:	e009      	b.n	8004154 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004140:	4b0a      	ldr	r3, [pc, #40]	@ (800416c <checkBasGonder+0x84>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	f083 0301 	eor.w	r3, r3, #1
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 800414e:	4b08      	ldr	r3, [pc, #32]	@ (8004170 <checkBasGonder+0x88>)
 8004150:	2200      	movs	r2, #0
 8004152:	701a      	strb	r2, [r3, #0]
}
 8004154:	bf00      	nop
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr
 800415c:	200016c1 	.word	0x200016c1
 8004160:	200016f5 	.word	0x200016f5
 8004164:	200016cf 	.word	0x200016cf
 8004168:	200016fc 	.word	0x200016fc
 800416c:	200016f8 	.word	0x200016f8
 8004170:	200016fd 	.word	0x200016fd

08004174 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8004178:	4b24      	ldr	r3, [pc, #144]	@ (800420c <checkKapiSecimleri+0x98>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d102      	bne.n	8004186 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8004180:	4b23      	ldr	r3, [pc, #140]	@ (8004210 <checkKapiSecimleri+0x9c>)
 8004182:	2201      	movs	r2, #1
 8004184:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8004186:	4b21      	ldr	r3, [pc, #132]	@ (800420c <checkKapiSecimleri+0x98>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d10e      	bne.n	80041ac <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800418e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004192:	4820      	ldr	r0, [pc, #128]	@ (8004214 <checkKapiSecimleri+0xa0>)
 8004194:	f006 fb88 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d103      	bne.n	80041a6 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 800419e:	4b1c      	ldr	r3, [pc, #112]	@ (8004210 <checkKapiSecimleri+0x9c>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	701a      	strb	r2, [r3, #0]
 80041a4:	e002      	b.n	80041ac <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80041a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004210 <checkKapiSecimleri+0x9c>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 80041ac:	4b17      	ldr	r3, [pc, #92]	@ (800420c <checkKapiSecimleri+0x98>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b02      	cmp	r3, #2
 80041b2:	d10e      	bne.n	80041d2 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80041b4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80041b8:	4816      	ldr	r0, [pc, #88]	@ (8004214 <checkKapiSecimleri+0xa0>)
 80041ba:	f006 fb75 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d103      	bne.n	80041cc <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80041c4:	4b12      	ldr	r3, [pc, #72]	@ (8004210 <checkKapiSecimleri+0x9c>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	701a      	strb	r2, [r3, #0]
 80041ca:	e002      	b.n	80041d2 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 80041cc:	4b10      	ldr	r3, [pc, #64]	@ (8004210 <checkKapiSecimleri+0x9c>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 80041d2:	4b0e      	ldr	r3, [pc, #56]	@ (800420c <checkKapiSecimleri+0x98>)
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d116      	bne.n	8004208 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80041da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041de:	480d      	ldr	r0, [pc, #52]	@ (8004214 <checkKapiSecimleri+0xa0>)
 80041e0:	f006 fb62 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10b      	bne.n	8004202 <checkKapiSecimleri+0x8e>
 80041ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80041ee:	4809      	ldr	r0, [pc, #36]	@ (8004214 <checkKapiSecimleri+0xa0>)
 80041f0:	f006 fb5a 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d103      	bne.n	8004202 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 80041fa:	4b05      	ldr	r3, [pc, #20]	@ (8004210 <checkKapiSecimleri+0x9c>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004200:	e002      	b.n	8004208 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004202:	4b03      	ldr	r3, [pc, #12]	@ (8004210 <checkKapiSecimleri+0x9c>)
 8004204:	2200      	movs	r2, #0
 8004206:	701a      	strb	r2, [r3, #0]
}
 8004208:	bf00      	nop
 800420a:	bd80      	pop	{r7, pc}
 800420c:	200016c8 	.word	0x200016c8
 8004210:	20001712 	.word	0x20001712
 8004214:	40010800 	.word	0x40010800

08004218 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 800421c:	4b66      	ldr	r3, [pc, #408]	@ (80043b8 <checkAktifCalisma+0x1a0>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f041 8343 	bne.w	80058ac <checkAktifCalisma+0x1694>
 8004226:	4b65      	ldr	r3, [pc, #404]	@ (80043bc <checkAktifCalisma+0x1a4>)
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	f041 833e 	bne.w	80058ac <checkAktifCalisma+0x1694>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8004230:	4b63      	ldr	r3, [pc, #396]	@ (80043c0 <checkAktifCalisma+0x1a8>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d11a      	bne.n	800426e <checkAktifCalisma+0x56>
 8004238:	4b62      	ldr	r3, [pc, #392]	@ (80043c4 <checkAktifCalisma+0x1ac>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d116      	bne.n	800426e <checkAktifCalisma+0x56>
 8004240:	4b61      	ldr	r3, [pc, #388]	@ (80043c8 <checkAktifCalisma+0x1b0>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00a      	beq.n	800425e <checkAktifCalisma+0x46>
 8004248:	4b60      	ldr	r3, [pc, #384]	@ (80043cc <checkAktifCalisma+0x1b4>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	f083 0301 	eor.w	r3, r3, #1
 8004250:	b2db      	uxtb	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <checkAktifCalisma+0x46>
 8004256:	4b5e      	ldr	r3, [pc, #376]	@ (80043d0 <checkAktifCalisma+0x1b8>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d007      	beq.n	800426e <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 800425e:	4b5d      	ldr	r3, [pc, #372]	@ (80043d4 <checkAktifCalisma+0x1bc>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d01c      	beq.n	80042a0 <checkAktifCalisma+0x88>
 8004266:	4b5c      	ldr	r3, [pc, #368]	@ (80043d8 <checkAktifCalisma+0x1c0>)
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d118      	bne.n	80042a0 <checkAktifCalisma+0x88>
 800426e:	4b5b      	ldr	r3, [pc, #364]	@ (80043dc <checkAktifCalisma+0x1c4>)
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d103      	bne.n	800427e <checkAktifCalisma+0x66>
 8004276:	4b5a      	ldr	r3, [pc, #360]	@ (80043e0 <checkAktifCalisma+0x1c8>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d010      	beq.n	80042a0 <checkAktifCalisma+0x88>
 800427e:	4b59      	ldr	r3, [pc, #356]	@ (80043e4 <checkAktifCalisma+0x1cc>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00c      	beq.n	80042a0 <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8004286:	2201      	movs	r2, #1
 8004288:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800428c:	4856      	ldr	r0, [pc, #344]	@ (80043e8 <checkAktifCalisma+0x1d0>)
 800428e:	f006 fb22 	bl	800a8d6 <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 8004292:	4b56      	ldr	r3, [pc, #344]	@ (80043ec <checkAktifCalisma+0x1d4>)
 8004294:	2201      	movs	r2, #1
 8004296:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8004298:	4b55      	ldr	r3, [pc, #340]	@ (80043f0 <checkAktifCalisma+0x1d8>)
 800429a:	2201      	movs	r2, #1
 800429c:	701a      	strb	r2, [r3, #0]
 800429e:	e008      	b.n	80042b2 <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80042a0:	2200      	movs	r2, #0
 80042a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80042a6:	4850      	ldr	r0, [pc, #320]	@ (80043e8 <checkAktifCalisma+0x1d0>)
 80042a8:	f006 fb15 	bl	800a8d6 <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 80042ac:	4b4f      	ldr	r3, [pc, #316]	@ (80043ec <checkAktifCalisma+0x1d4>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 80042b2:	4b42      	ldr	r3, [pc, #264]	@ (80043bc <checkAktifCalisma+0x1a4>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d164      	bne.n	8004384 <checkAktifCalisma+0x16c>
 80042ba:	4b49      	ldr	r3, [pc, #292]	@ (80043e0 <checkAktifCalisma+0x1c8>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d103      	bne.n	80042ca <checkAktifCalisma+0xb2>
 80042c2:	4b46      	ldr	r3, [pc, #280]	@ (80043dc <checkAktifCalisma+0x1c4>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d05c      	beq.n	8004384 <checkAktifCalisma+0x16c>
 80042ca:	4b46      	ldr	r3, [pc, #280]	@ (80043e4 <checkAktifCalisma+0x1cc>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d058      	beq.n	8004384 <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80042d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80042d6:	4844      	ldr	r0, [pc, #272]	@ (80043e8 <checkAktifCalisma+0x1d0>)
 80042d8:	f006 fae6 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d003      	beq.n	80042ea <checkAktifCalisma+0xd2>
 80042e2:	4b44      	ldr	r3, [pc, #272]	@ (80043f4 <checkAktifCalisma+0x1dc>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d04c      	beq.n	8004384 <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80042ea:	2102      	movs	r1, #2
 80042ec:	4842      	ldr	r0, [pc, #264]	@ (80043f8 <checkAktifCalisma+0x1e0>)
 80042ee:	f006 fadb 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d145      	bne.n	8004384 <checkAktifCalisma+0x16c>
							&& (basincVar)
 80042f8:	4b40      	ldr	r3, [pc, #256]	@ (80043fc <checkAktifCalisma+0x1e4>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d041      	beq.n	8004384 <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004300:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004304:	4838      	ldr	r0, [pc, #224]	@ (80043e8 <checkAktifCalisma+0x1d0>)
 8004306:	f006 facf 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800430a:	4603      	mov	r3, r0
 800430c:	2b01      	cmp	r3, #1
 800430e:	d10e      	bne.n	800432e <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004310:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004314:	4834      	ldr	r0, [pc, #208]	@ (80043e8 <checkAktifCalisma+0x1d0>)
 8004316:	f006 fac7 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800431a:	4603      	mov	r3, r0
 800431c:	2b01      	cmp	r3, #1
 800431e:	d106      	bne.n	800432e <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004320:	2140      	movs	r1, #64	@ 0x40
 8004322:	4835      	ldr	r0, [pc, #212]	@ (80043f8 <checkAktifCalisma+0x1e0>)
 8004324:	f006 fac0 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004328:	4603      	mov	r3, r0
 800432a:	2b01      	cmp	r3, #1
 800432c:	d003      	beq.n	8004336 <checkAktifCalisma+0x11e>
 800432e:	4b24      	ldr	r3, [pc, #144]	@ (80043c0 <checkAktifCalisma+0x1a8>)
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d026      	beq.n	8004384 <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 8004336:	4b24      	ldr	r3, [pc, #144]	@ (80043c8 <checkAktifCalisma+0x1b0>)
 8004338:	781b      	ldrb	r3, [r3, #0]
 800433a:	f083 0301 	eor.w	r3, r3, #1
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01f      	beq.n	8004384 <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 8004344:	4b1f      	ldr	r3, [pc, #124]	@ (80043c4 <checkAktifCalisma+0x1ac>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	f083 0301 	eor.w	r3, r3, #1
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d018      	beq.n	8004384 <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 8004352:	4b20      	ldr	r3, [pc, #128]	@ (80043d4 <checkAktifCalisma+0x1bc>)
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	f083 0301 	eor.w	r3, r3, #1
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b00      	cmp	r3, #0
 800435e:	d011      	beq.n	8004384 <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 8004360:	4b27      	ldr	r3, [pc, #156]	@ (8004400 <checkAktifCalisma+0x1e8>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	f083 0301 	eor.w	r3, r3, #1
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 800436e:	4b25      	ldr	r3, [pc, #148]	@ (8004404 <checkAktifCalisma+0x1ec>)
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	f083 0301 	eor.w	r3, r3, #1
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 800437c:	4b10      	ldr	r3, [pc, #64]	@ (80043c0 <checkAktifCalisma+0x1a8>)
 800437e:	2201      	movs	r2, #1
 8004380:	701a      	strb	r2, [r3, #0]
 8004382:	e002      	b.n	800438a <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 8004384:	4b0e      	ldr	r3, [pc, #56]	@ (80043c0 <checkAktifCalisma+0x1a8>)
 8004386:	2200      	movs	r2, #0
 8004388:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800438a:	4b0d      	ldr	r3, [pc, #52]	@ (80043c0 <checkAktifCalisma+0x1a8>)
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d03c      	beq.n	800440c <checkAktifCalisma+0x1f4>
 8004392:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004396:	4818      	ldr	r0, [pc, #96]	@ (80043f8 <checkAktifCalisma+0x1e0>)
 8004398:	f006 fa86 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800439c:	4603      	mov	r3, r0
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d134      	bne.n	800440c <checkAktifCalisma+0x1f4>
 80043a2:	4b19      	ldr	r3, [pc, #100]	@ (8004408 <checkAktifCalisma+0x1f0>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d030      	beq.n	800440c <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80043aa:	2201      	movs	r2, #1
 80043ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80043b0:	480d      	ldr	r0, [pc, #52]	@ (80043e8 <checkAktifCalisma+0x1d0>)
 80043b2:	f006 fa90 	bl	800a8d6 <HAL_GPIO_WritePin>
 80043b6:	e02f      	b.n	8004418 <checkAktifCalisma+0x200>
 80043b8:	200016de 	.word	0x200016de
 80043bc:	200016dd 	.word	0x200016dd
 80043c0:	200016f5 	.word	0x200016f5
 80043c4:	200016f6 	.word	0x200016f6
 80043c8:	200016f8 	.word	0x200016f8
 80043cc:	200016f0 	.word	0x200016f0
 80043d0:	200016d3 	.word	0x200016d3
 80043d4:	200016f7 	.word	0x200016f7
 80043d8:	200016d2 	.word	0x200016d2
 80043dc:	20001711 	.word	0x20001711
 80043e0:	20001724 	.word	0x20001724
 80043e4:	20001712 	.word	0x20001712
 80043e8:	40010c00 	.word	0x40010c00
 80043ec:	20001713 	.word	0x20001713
 80043f0:	200016ff 	.word	0x200016ff
 80043f4:	200016fc 	.word	0x200016fc
 80043f8:	40011000 	.word	0x40011000
 80043fc:	200016c3 	.word	0x200016c3
 8004400:	200016fa 	.word	0x200016fa
 8004404:	200016fb 	.word	0x200016fb
 8004408:	200016ce 	.word	0x200016ce
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800440c:	2200      	movs	r2, #0
 800440e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004412:	4865      	ldr	r0, [pc, #404]	@ (80045a8 <checkAktifCalisma+0x390>)
 8004414:	f006 fa5f 	bl	800a8d6 <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004418:	4b64      	ldr	r3, [pc, #400]	@ (80045ac <checkAktifCalisma+0x394>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d013      	beq.n	8004448 <checkAktifCalisma+0x230>
 8004420:	4b63      	ldr	r3, [pc, #396]	@ (80045b0 <checkAktifCalisma+0x398>)
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d007      	beq.n	8004438 <checkAktifCalisma+0x220>
 8004428:	4b61      	ldr	r3, [pc, #388]	@ (80045b0 <checkAktifCalisma+0x398>)
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b02      	cmp	r3, #2
 800442e:	d003      	beq.n	8004438 <checkAktifCalisma+0x220>
 8004430:	4b60      	ldr	r3, [pc, #384]	@ (80045b4 <checkAktifCalisma+0x39c>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d107      	bne.n	8004448 <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004438:	2201      	movs	r2, #1
 800443a:	2104      	movs	r1, #4
 800443c:	485a      	ldr	r0, [pc, #360]	@ (80045a8 <checkAktifCalisma+0x390>)
 800443e:	f006 fa4a 	bl	800a8d6 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 8004442:	4b5d      	ldr	r3, [pc, #372]	@ (80045b8 <checkAktifCalisma+0x3a0>)
 8004444:	2201      	movs	r2, #1
 8004446:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004448:	4b5b      	ldr	r3, [pc, #364]	@ (80045b8 <checkAktifCalisma+0x3a0>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d033      	beq.n	80044b8 <checkAktifCalisma+0x2a0>
 8004450:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004454:	4854      	ldr	r0, [pc, #336]	@ (80045a8 <checkAktifCalisma+0x390>)
 8004456:	f006 fa27 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800445a:	4603      	mov	r3, r0
 800445c:	2b01      	cmp	r3, #1
 800445e:	d106      	bne.n	800446e <checkAktifCalisma+0x256>
 8004460:	4b56      	ldr	r3, [pc, #344]	@ (80045bc <checkAktifCalisma+0x3a4>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	f083 0301 	eor.w	r3, r3, #1
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <checkAktifCalisma+0x264>
 800446e:	2102      	movs	r1, #2
 8004470:	4853      	ldr	r0, [pc, #332]	@ (80045c0 <checkAktifCalisma+0x3a8>)
 8004472:	f006 fa19 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004476:	4603      	mov	r3, r0
 8004478:	2b01      	cmp	r3, #1
 800447a:	d11d      	bne.n	80044b8 <checkAktifCalisma+0x2a0>
 800447c:	4b51      	ldr	r3, [pc, #324]	@ (80045c4 <checkAktifCalisma+0x3ac>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d103      	bne.n	800448c <checkAktifCalisma+0x274>
 8004484:	4b50      	ldr	r3, [pc, #320]	@ (80045c8 <checkAktifCalisma+0x3b0>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d015      	beq.n	80044b8 <checkAktifCalisma+0x2a0>
 800448c:	4b4f      	ldr	r3, [pc, #316]	@ (80045cc <checkAktifCalisma+0x3b4>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d011      	beq.n	80044b8 <checkAktifCalisma+0x2a0>
 8004494:	4b4e      	ldr	r3, [pc, #312]	@ (80045d0 <checkAktifCalisma+0x3b8>)
 8004496:	781b      	ldrb	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00d      	beq.n	80044b8 <checkAktifCalisma+0x2a0>
 800449c:	4b4d      	ldr	r3, [pc, #308]	@ (80045d4 <checkAktifCalisma+0x3bc>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	f083 0301 	eor.w	r3, r3, #1
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d006      	beq.n	80044b8 <checkAktifCalisma+0x2a0>
					timer2=millis;
 80044aa:	4b4b      	ldr	r3, [pc, #300]	@ (80045d8 <checkAktifCalisma+0x3c0>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a4b      	ldr	r2, [pc, #300]	@ (80045dc <checkAktifCalisma+0x3c4>)
 80044b0:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 80044b2:	4b48      	ldr	r3, [pc, #288]	@ (80045d4 <checkAktifCalisma+0x3bc>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 80044b8:	4b47      	ldr	r3, [pc, #284]	@ (80045d8 <checkAktifCalisma+0x3c0>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	4b47      	ldr	r3, [pc, #284]	@ (80045dc <checkAktifCalisma+0x3c4>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	4a47      	ldr	r2, [pc, #284]	@ (80045e0 <checkAktifCalisma+0x3c8>)
 80044c4:	7812      	ldrb	r2, [r2, #0]
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d303      	bcc.n	80044d2 <checkAktifCalisma+0x2ba>
 80044ca:	4b42      	ldr	r3, [pc, #264]	@ (80045d4 <checkAktifCalisma+0x3bc>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d118      	bne.n	8004504 <checkAktifCalisma+0x2ec>
 80044d2:	4b3c      	ldr	r3, [pc, #240]	@ (80045c4 <checkAktifCalisma+0x3ac>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	f083 0301 	eor.w	r3, r3, #1
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d006      	beq.n	80044ee <checkAktifCalisma+0x2d6>
 80044e0:	4b39      	ldr	r3, [pc, #228]	@ (80045c8 <checkAktifCalisma+0x3b0>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	f083 0301 	eor.w	r3, r3, #1
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10a      	bne.n	8004504 <checkAktifCalisma+0x2ec>
 80044ee:	4b37      	ldr	r3, [pc, #220]	@ (80045cc <checkAktifCalisma+0x3b4>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	f083 0301 	eor.w	r3, r3, #1
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d103      	bne.n	8004504 <checkAktifCalisma+0x2ec>
 80044fc:	4b34      	ldr	r3, [pc, #208]	@ (80045d0 <checkAktifCalisma+0x3b8>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10a      	bne.n	800451a <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004504:	2200      	movs	r2, #0
 8004506:	2104      	movs	r1, #4
 8004508:	4827      	ldr	r0, [pc, #156]	@ (80045a8 <checkAktifCalisma+0x390>)
 800450a:	f006 f9e4 	bl	800a8d6 <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 800450e:	4b2a      	ldr	r3, [pc, #168]	@ (80045b8 <checkAktifCalisma+0x3a0>)
 8004510:	2200      	movs	r2, #0
 8004512:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 8004514:	4b2f      	ldr	r3, [pc, #188]	@ (80045d4 <checkAktifCalisma+0x3bc>)
 8004516:	2200      	movs	r2, #0
 8004518:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 800451a:	4b32      	ldr	r3, [pc, #200]	@ (80045e4 <checkAktifCalisma+0x3cc>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d102      	bne.n	8004528 <checkAktifCalisma+0x310>
					cerceveVar=1;
 8004522:	4b31      	ldr	r3, [pc, #196]	@ (80045e8 <checkAktifCalisma+0x3d0>)
 8004524:	2201      	movs	r2, #1
 8004526:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004528:	4b2e      	ldr	r3, [pc, #184]	@ (80045e4 <checkAktifCalisma+0x3cc>)
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d116      	bne.n	800455e <checkAktifCalisma+0x346>
 8004530:	4b2e      	ldr	r3, [pc, #184]	@ (80045ec <checkAktifCalisma+0x3d4>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d112      	bne.n	800455e <checkAktifCalisma+0x346>
 8004538:	2101      	movs	r1, #1
 800453a:	4821      	ldr	r0, [pc, #132]	@ (80045c0 <checkAktifCalisma+0x3a8>)
 800453c:	f006 f9b4 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10b      	bne.n	800455e <checkAktifCalisma+0x346>
 8004546:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800454a:	4817      	ldr	r0, [pc, #92]	@ (80045a8 <checkAktifCalisma+0x390>)
 800454c:	f006 f9ac 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d103      	bne.n	800455e <checkAktifCalisma+0x346>
					cerceveVar=1;
 8004556:	4b24      	ldr	r3, [pc, #144]	@ (80045e8 <checkAktifCalisma+0x3d0>)
 8004558:	2201      	movs	r2, #1
 800455a:	701a      	strb	r2, [r3, #0]
 800455c:	e011      	b.n	8004582 <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 800455e:	4b21      	ldr	r3, [pc, #132]	@ (80045e4 <checkAktifCalisma+0x3cc>)
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d10d      	bne.n	8004582 <checkAktifCalisma+0x36a>
 8004566:	2101      	movs	r1, #1
 8004568:	4815      	ldr	r0, [pc, #84]	@ (80045c0 <checkAktifCalisma+0x3a8>)
 800456a:	f006 f99d 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800456e:	4603      	mov	r3, r0
 8004570:	2b01      	cmp	r3, #1
 8004572:	d106      	bne.n	8004582 <checkAktifCalisma+0x36a>
 8004574:	4b1d      	ldr	r3, [pc, #116]	@ (80045ec <checkAktifCalisma+0x3d4>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d102      	bne.n	8004582 <checkAktifCalisma+0x36a>
					cerceveVar=0;
 800457c:	4b1a      	ldr	r3, [pc, #104]	@ (80045e8 <checkAktifCalisma+0x3d0>)
 800457e:	2200      	movs	r2, #0
 8004580:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 8004582:	4b18      	ldr	r3, [pc, #96]	@ (80045e4 <checkAktifCalisma+0x3cc>)
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d135      	bne.n	80045f6 <checkAktifCalisma+0x3de>
 800458a:	4b18      	ldr	r3, [pc, #96]	@ (80045ec <checkAktifCalisma+0x3d4>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d131      	bne.n	80045f6 <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004592:	2101      	movs	r1, #1
 8004594:	480a      	ldr	r0, [pc, #40]	@ (80045c0 <checkAktifCalisma+0x3a8>)
 8004596:	f006 f987 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d127      	bne.n	80045f0 <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 80045a0:	4b11      	ldr	r3, [pc, #68]	@ (80045e8 <checkAktifCalisma+0x3d0>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	701a      	strb	r2, [r3, #0]
 80045a6:	e026      	b.n	80045f6 <checkAktifCalisma+0x3de>
 80045a8:	40010c00 	.word	0x40010c00
 80045ac:	200016f5 	.word	0x200016f5
 80045b0:	200016cf 	.word	0x200016cf
 80045b4:	200016d3 	.word	0x200016d3
 80045b8:	200016f9 	.word	0x200016f9
 80045bc:	200016fc 	.word	0x200016fc
 80045c0:	40011000 	.word	0x40011000
 80045c4:	20001711 	.word	0x20001711
 80045c8:	20001724 	.word	0x20001724
 80045cc:	20001712 	.word	0x20001712
 80045d0:	200016c3 	.word	0x200016c3
 80045d4:	200016f1 	.word	0x200016f1
 80045d8:	20001698 	.word	0x20001698
 80045dc:	200016a4 	.word	0x200016a4
 80045e0:	200016d4 	.word	0x200016d4
 80045e4:	200016c4 	.word	0x200016c4
 80045e8:	20001716 	.word	0x20001716
 80045ec:	200016c1 	.word	0x200016c1
					} else {
						cerceveVar=0;
 80045f0:	4b7f      	ldr	r3, [pc, #508]	@ (80047f0 <checkAktifCalisma+0x5d8>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80045f6:	4b7f      	ldr	r3, [pc, #508]	@ (80047f4 <checkAktifCalisma+0x5dc>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d17c      	bne.n	80046f8 <checkAktifCalisma+0x4e0>
 80045fe:	4b7e      	ldr	r3, [pc, #504]	@ (80047f8 <checkAktifCalisma+0x5e0>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d078      	beq.n	80046f8 <checkAktifCalisma+0x4e0>
 8004606:	4b7d      	ldr	r3, [pc, #500]	@ (80047fc <checkAktifCalisma+0x5e4>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d074      	beq.n	80046f8 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800460e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004612:	487b      	ldr	r0, [pc, #492]	@ (8004800 <checkAktifCalisma+0x5e8>)
 8004614:	f006 f948 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d003      	beq.n	8004626 <checkAktifCalisma+0x40e>
 800461e:	4b79      	ldr	r3, [pc, #484]	@ (8004804 <checkAktifCalisma+0x5ec>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d068      	beq.n	80046f8 <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8004626:	4b72      	ldr	r3, [pc, #456]	@ (80047f0 <checkAktifCalisma+0x5d8>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d064      	beq.n	80046f8 <checkAktifCalisma+0x4e0>
 800462e:	4b76      	ldr	r3, [pc, #472]	@ (8004808 <checkAktifCalisma+0x5f0>)
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	f083 0301 	eor.w	r3, r3, #1
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d05d      	beq.n	80046f8 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 800463c:	2104      	movs	r1, #4
 800463e:	4873      	ldr	r0, [pc, #460]	@ (800480c <checkAktifCalisma+0x5f4>)
 8004640:	f006 f932 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <checkAktifCalisma+0x43a>
 800464a:	4b71      	ldr	r3, [pc, #452]	@ (8004810 <checkAktifCalisma+0x5f8>)
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d152      	bne.n	80046f8 <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004652:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004656:	486a      	ldr	r0, [pc, #424]	@ (8004800 <checkAktifCalisma+0x5e8>)
 8004658:	f006 f926 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800465c:	4603      	mov	r3, r0
 800465e:	2b01      	cmp	r3, #1
 8004660:	d10e      	bne.n	8004680 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004662:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004666:	4866      	ldr	r0, [pc, #408]	@ (8004800 <checkAktifCalisma+0x5e8>)
 8004668:	f006 f91e 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800466c:	4603      	mov	r3, r0
 800466e:	2b01      	cmp	r3, #1
 8004670:	d106      	bne.n	8004680 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8004672:	2140      	movs	r1, #64	@ 0x40
 8004674:	4865      	ldr	r0, [pc, #404]	@ (800480c <checkAktifCalisma+0x5f4>)
 8004676:	f006 f917 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800467a:	4603      	mov	r3, r0
 800467c:	2b01      	cmp	r3, #1
 800467e:	d003      	beq.n	8004688 <checkAktifCalisma+0x470>
 8004680:	4b64      	ldr	r3, [pc, #400]	@ (8004814 <checkAktifCalisma+0x5fc>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d037      	beq.n	80046f8 <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 8004688:	4b63      	ldr	r3, [pc, #396]	@ (8004818 <checkAktifCalisma+0x600>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	f083 0301 	eor.w	r3, r3, #1
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d030      	beq.n	80046f8 <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 8004696:	4b61      	ldr	r3, [pc, #388]	@ (800481c <checkAktifCalisma+0x604>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	f083 0301 	eor.w	r3, r3, #1
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d029      	beq.n	80046f8 <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 80046a4:	4b5e      	ldr	r3, [pc, #376]	@ (8004820 <checkAktifCalisma+0x608>)
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	f083 0301 	eor.w	r3, r3, #1
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d022      	beq.n	80046f8 <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 80046b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004824 <checkAktifCalisma+0x60c>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	f083 0301 	eor.w	r3, r3, #1
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01b      	beq.n	80046f8 <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 80046c0:	4b59      	ldr	r3, [pc, #356]	@ (8004828 <checkAktifCalisma+0x610>)
 80046c2:	781b      	ldrb	r3, [r3, #0]
 80046c4:	f083 0301 	eor.w	r3, r3, #1
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d014      	beq.n	80046f8 <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 80046ce:	4b57      	ldr	r3, [pc, #348]	@ (800482c <checkAktifCalisma+0x614>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	f083 0301 	eor.w	r3, r3, #1
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00d      	beq.n	80046f8 <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80046dc:	2201      	movs	r2, #1
 80046de:	2102      	movs	r1, #2
 80046e0:	4847      	ldr	r0, [pc, #284]	@ (8004800 <checkAktifCalisma+0x5e8>)
 80046e2:	f006 f8f8 	bl	800a8d6 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 80046e6:	4b4b      	ldr	r3, [pc, #300]	@ (8004814 <checkAktifCalisma+0x5fc>)
 80046e8:	2201      	movs	r2, #1
 80046ea:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 80046ec:	4b50      	ldr	r3, [pc, #320]	@ (8004830 <checkAktifCalisma+0x618>)
 80046ee:	2201      	movs	r2, #1
 80046f0:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 80046f2:	4b50      	ldr	r3, [pc, #320]	@ (8004834 <checkAktifCalisma+0x61c>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80046f8:	4b46      	ldr	r3, [pc, #280]	@ (8004814 <checkAktifCalisma+0x5fc>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d033      	beq.n	8004768 <checkAktifCalisma+0x550>
 8004700:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004704:	483e      	ldr	r0, [pc, #248]	@ (8004800 <checkAktifCalisma+0x5e8>)
 8004706:	f006 f8cf 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800470a:	4603      	mov	r3, r0
 800470c:	2b01      	cmp	r3, #1
 800470e:	d106      	bne.n	800471e <checkAktifCalisma+0x506>
 8004710:	4b3c      	ldr	r3, [pc, #240]	@ (8004804 <checkAktifCalisma+0x5ec>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	f083 0301 	eor.w	r3, r3, #1
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10a      	bne.n	8004734 <checkAktifCalisma+0x51c>
 800471e:	2104      	movs	r1, #4
 8004720:	483a      	ldr	r0, [pc, #232]	@ (800480c <checkAktifCalisma+0x5f4>)
 8004722:	f006 f8c1 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004726:	4603      	mov	r3, r0
 8004728:	2b01      	cmp	r3, #1
 800472a:	d11d      	bne.n	8004768 <checkAktifCalisma+0x550>
 800472c:	4b38      	ldr	r3, [pc, #224]	@ (8004810 <checkAktifCalisma+0x5f8>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d019      	beq.n	8004768 <checkAktifCalisma+0x550>
 8004734:	4b30      	ldr	r3, [pc, #192]	@ (80047f8 <checkAktifCalisma+0x5e0>)
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d015      	beq.n	8004768 <checkAktifCalisma+0x550>
 800473c:	4b2f      	ldr	r3, [pc, #188]	@ (80047fc <checkAktifCalisma+0x5e4>)
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d011      	beq.n	8004768 <checkAktifCalisma+0x550>
 8004744:	4b2a      	ldr	r3, [pc, #168]	@ (80047f0 <checkAktifCalisma+0x5d8>)
 8004746:	781b      	ldrb	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00d      	beq.n	8004768 <checkAktifCalisma+0x550>
 800474c:	4b3a      	ldr	r3, [pc, #232]	@ (8004838 <checkAktifCalisma+0x620>)
 800474e:	781b      	ldrb	r3, [r3, #0]
 8004750:	f083 0301 	eor.w	r3, r3, #1
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d006      	beq.n	8004768 <checkAktifCalisma+0x550>
					timer2=millis;
 800475a:	4b38      	ldr	r3, [pc, #224]	@ (800483c <checkAktifCalisma+0x624>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a38      	ldr	r2, [pc, #224]	@ (8004840 <checkAktifCalisma+0x628>)
 8004760:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 8004762:	4b35      	ldr	r3, [pc, #212]	@ (8004838 <checkAktifCalisma+0x620>)
 8004764:	2201      	movs	r2, #1
 8004766:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8004768:	4b34      	ldr	r3, [pc, #208]	@ (800483c <checkAktifCalisma+0x624>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	4b34      	ldr	r3, [pc, #208]	@ (8004840 <checkAktifCalisma+0x628>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	4a34      	ldr	r2, [pc, #208]	@ (8004844 <checkAktifCalisma+0x62c>)
 8004774:	7812      	ldrb	r2, [r2, #0]
 8004776:	4293      	cmp	r3, r2
 8004778:	d303      	bcc.n	8004782 <checkAktifCalisma+0x56a>
 800477a:	4b2f      	ldr	r3, [pc, #188]	@ (8004838 <checkAktifCalisma+0x620>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d114      	bne.n	80047ac <checkAktifCalisma+0x594>
 8004782:	4b1d      	ldr	r3, [pc, #116]	@ (80047f8 <checkAktifCalisma+0x5e0>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	f083 0301 	eor.w	r3, r3, #1
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d10d      	bne.n	80047ac <checkAktifCalisma+0x594>
 8004790:	4b1a      	ldr	r3, [pc, #104]	@ (80047fc <checkAktifCalisma+0x5e4>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	f083 0301 	eor.w	r3, r3, #1
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <checkAktifCalisma+0x594>
 800479e:	4b14      	ldr	r3, [pc, #80]	@ (80047f0 <checkAktifCalisma+0x5d8>)
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	f083 0301 	eor.w	r3, r3, #1
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00a      	beq.n	80047c2 <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80047ac:	2200      	movs	r2, #0
 80047ae:	2102      	movs	r1, #2
 80047b0:	4813      	ldr	r0, [pc, #76]	@ (8004800 <checkAktifCalisma+0x5e8>)
 80047b2:	f006 f890 	bl	800a8d6 <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 80047b6:	4b17      	ldr	r3, [pc, #92]	@ (8004814 <checkAktifCalisma+0x5fc>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 80047bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004838 <checkAktifCalisma+0x620>)
 80047be:	2200      	movs	r2, #0
 80047c0:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80047c2:	4b14      	ldr	r3, [pc, #80]	@ (8004814 <checkAktifCalisma+0x5fc>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d040      	beq.n	800484c <checkAktifCalisma+0x634>
 80047ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80047ce:	480f      	ldr	r0, [pc, #60]	@ (800480c <checkAktifCalisma+0x5f4>)
 80047d0:	f006 f86a 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d138      	bne.n	800484c <checkAktifCalisma+0x634>
 80047da:	4b1b      	ldr	r3, [pc, #108]	@ (8004848 <checkAktifCalisma+0x630>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d034      	beq.n	800484c <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80047e2:	2201      	movs	r2, #1
 80047e4:	2101      	movs	r1, #1
 80047e6:	4806      	ldr	r0, [pc, #24]	@ (8004800 <checkAktifCalisma+0x5e8>)
 80047e8:	f006 f875 	bl	800a8d6 <HAL_GPIO_WritePin>
 80047ec:	e033      	b.n	8004856 <checkAktifCalisma+0x63e>
 80047ee:	bf00      	nop
 80047f0:	20001716 	.word	0x20001716
 80047f4:	200016dd 	.word	0x200016dd
 80047f8:	20001711 	.word	0x20001711
 80047fc:	20001712 	.word	0x20001712
 8004800:	40010c00 	.word	0x40010c00
 8004804:	200016fd 	.word	0x200016fd
 8004808:	20001710 	.word	0x20001710
 800480c:	40011000 	.word	0x40011000
 8004810:	200016c6 	.word	0x200016c6
 8004814:	200016f8 	.word	0x200016f8
 8004818:	200016f5 	.word	0x200016f5
 800481c:	200016f9 	.word	0x200016f9
 8004820:	200016f6 	.word	0x200016f6
 8004824:	200016f7 	.word	0x200016f7
 8004828:	200016fa 	.word	0x200016fa
 800482c:	200016fb 	.word	0x200016fb
 8004830:	20001700 	.word	0x20001700
 8004834:	20001720 	.word	0x20001720
 8004838:	200016f0 	.word	0x200016f0
 800483c:	20001698 	.word	0x20001698
 8004840:	200016a4 	.word	0x200016a4
 8004844:	200016d5 	.word	0x200016d5
 8004848:	200016c5 	.word	0x200016c5
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800484c:	2200      	movs	r2, #0
 800484e:	2101      	movs	r1, #1
 8004850:	4836      	ldr	r0, [pc, #216]	@ (800492c <checkAktifCalisma+0x714>)
 8004852:	f006 f840 	bl	800a8d6 <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8004856:	4b36      	ldr	r3, [pc, #216]	@ (8004930 <checkAktifCalisma+0x718>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	f040 8080 	bne.w	8004960 <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004860:	4b34      	ldr	r3, [pc, #208]	@ (8004934 <checkAktifCalisma+0x71c>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d003      	beq.n	8004870 <checkAktifCalisma+0x658>
 8004868:	4b32      	ldr	r3, [pc, #200]	@ (8004934 <checkAktifCalisma+0x71c>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b02      	cmp	r3, #2
 800486e:	d177      	bne.n	8004960 <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8004870:	4b31      	ldr	r3, [pc, #196]	@ (8004938 <checkAktifCalisma+0x720>)
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d073      	beq.n	8004960 <checkAktifCalisma+0x748>
 8004878:	4b30      	ldr	r3, [pc, #192]	@ (800493c <checkAktifCalisma+0x724>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d06f      	beq.n	8004960 <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8004880:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004884:	4829      	ldr	r0, [pc, #164]	@ (800492c <checkAktifCalisma+0x714>)
 8004886:	f006 f80f 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d167      	bne.n	8004960 <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8004890:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004894:	482a      	ldr	r0, [pc, #168]	@ (8004940 <checkAktifCalisma+0x728>)
 8004896:	f006 f807 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <checkAktifCalisma+0x690>
 80048a0:	4b28      	ldr	r3, [pc, #160]	@ (8004944 <checkAktifCalisma+0x72c>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d15b      	bne.n	8004960 <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80048a8:	2140      	movs	r1, #64	@ 0x40
 80048aa:	4825      	ldr	r0, [pc, #148]	@ (8004940 <checkAktifCalisma+0x728>)
 80048ac:	f005 fffc 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d10f      	bne.n	80048d6 <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80048b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80048ba:	481c      	ldr	r0, [pc, #112]	@ (800492c <checkAktifCalisma+0x714>)
 80048bc:	f005 fff4 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d107      	bne.n	80048d6 <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80048c6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80048ca:	4818      	ldr	r0, [pc, #96]	@ (800492c <checkAktifCalisma+0x714>)
 80048cc:	f005 ffec 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d003      	beq.n	80048de <checkAktifCalisma+0x6c6>
 80048d6:	4b1c      	ldr	r3, [pc, #112]	@ (8004948 <checkAktifCalisma+0x730>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d040      	beq.n	8004960 <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 80048de:	4b1b      	ldr	r3, [pc, #108]	@ (800494c <checkAktifCalisma+0x734>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	f083 0301 	eor.w	r3, r3, #1
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d039      	beq.n	8004960 <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 80048ec:	4b18      	ldr	r3, [pc, #96]	@ (8004950 <checkAktifCalisma+0x738>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	f083 0301 	eor.w	r3, r3, #1
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d032      	beq.n	8004960 <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 80048fa:	4b16      	ldr	r3, [pc, #88]	@ (8004954 <checkAktifCalisma+0x73c>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	f083 0301 	eor.w	r3, r3, #1
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d02b      	beq.n	8004960 <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8004908:	4b13      	ldr	r3, [pc, #76]	@ (8004958 <checkAktifCalisma+0x740>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	f083 0301 	eor.w	r3, r3, #1
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d024      	beq.n	8004960 <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 8004916:	4b11      	ldr	r3, [pc, #68]	@ (800495c <checkAktifCalisma+0x744>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	f083 0301 	eor.w	r3, r3, #1
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b00      	cmp	r3, #0
 8004922:	d01d      	beq.n	8004960 <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8004924:	4b08      	ldr	r3, [pc, #32]	@ (8004948 <checkAktifCalisma+0x730>)
 8004926:	2201      	movs	r2, #1
 8004928:	701a      	strb	r2, [r3, #0]
 800492a:	e01c      	b.n	8004966 <checkAktifCalisma+0x74e>
 800492c:	40010c00 	.word	0x40010c00
 8004930:	200016dd 	.word	0x200016dd
 8004934:	200016cf 	.word	0x200016cf
 8004938:	20001711 	.word	0x20001711
 800493c:	20001712 	.word	0x20001712
 8004940:	40011000 	.word	0x40011000
 8004944:	200016d0 	.word	0x200016d0
 8004948:	200016f6 	.word	0x200016f6
 800494c:	200016f5 	.word	0x200016f5
 8004950:	200016f9 	.word	0x200016f9
 8004954:	200016f8 	.word	0x200016f8
 8004958:	200016f7 	.word	0x200016f7
 800495c:	200016fb 	.word	0x200016fb
				} else {
					devmotoryukaricalisiyor=0;
 8004960:	4b64      	ldr	r3, [pc, #400]	@ (8004af4 <checkAktifCalisma+0x8dc>)
 8004962:	2200      	movs	r2, #0
 8004964:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8004966:	4b63      	ldr	r3, [pc, #396]	@ (8004af4 <checkAktifCalisma+0x8dc>)
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d007      	beq.n	800497e <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800496e:	2201      	movs	r2, #1
 8004970:	2120      	movs	r1, #32
 8004972:	4861      	ldr	r0, [pc, #388]	@ (8004af8 <checkAktifCalisma+0x8e0>)
 8004974:	f005 ffaf 	bl	800a8d6 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8004978:	4b60      	ldr	r3, [pc, #384]	@ (8004afc <checkAktifCalisma+0x8e4>)
 800497a:	2201      	movs	r2, #1
 800497c:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800497e:	4b5f      	ldr	r3, [pc, #380]	@ (8004afc <checkAktifCalisma+0x8e4>)
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d025      	beq.n	80049d2 <checkAktifCalisma+0x7ba>
 8004986:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800498a:	485d      	ldr	r0, [pc, #372]	@ (8004b00 <checkAktifCalisma+0x8e8>)
 800498c:	f005 ff8c 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004990:	4603      	mov	r3, r0
 8004992:	2b01      	cmp	r3, #1
 8004994:	d007      	beq.n	80049a6 <checkAktifCalisma+0x78e>
 8004996:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800499a:	4857      	ldr	r0, [pc, #348]	@ (8004af8 <checkAktifCalisma+0x8e0>)
 800499c:	f005 ff84 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d115      	bne.n	80049d2 <checkAktifCalisma+0x7ba>
 80049a6:	4b57      	ldr	r3, [pc, #348]	@ (8004b04 <checkAktifCalisma+0x8ec>)
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d011      	beq.n	80049d2 <checkAktifCalisma+0x7ba>
 80049ae:	4b56      	ldr	r3, [pc, #344]	@ (8004b08 <checkAktifCalisma+0x8f0>)
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00d      	beq.n	80049d2 <checkAktifCalisma+0x7ba>
 80049b6:	4b55      	ldr	r3, [pc, #340]	@ (8004b0c <checkAktifCalisma+0x8f4>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	f083 0301 	eor.w	r3, r3, #1
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d006      	beq.n	80049d2 <checkAktifCalisma+0x7ba>
					timer2=millis;
 80049c4:	4b52      	ldr	r3, [pc, #328]	@ (8004b10 <checkAktifCalisma+0x8f8>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a52      	ldr	r2, [pc, #328]	@ (8004b14 <checkAktifCalisma+0x8fc>)
 80049ca:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 80049cc:	4b4f      	ldr	r3, [pc, #316]	@ (8004b0c <checkAktifCalisma+0x8f4>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80049d2:	4b4f      	ldr	r3, [pc, #316]	@ (8004b10 <checkAktifCalisma+0x8f8>)
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	4b4f      	ldr	r3, [pc, #316]	@ (8004b14 <checkAktifCalisma+0x8fc>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	4a4e      	ldr	r2, [pc, #312]	@ (8004b18 <checkAktifCalisma+0x900>)
 80049de:	7812      	ldrb	r2, [r2, #0]
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d303      	bcc.n	80049ec <checkAktifCalisma+0x7d4>
 80049e4:	4b49      	ldr	r3, [pc, #292]	@ (8004b0c <checkAktifCalisma+0x8f4>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10d      	bne.n	8004a08 <checkAktifCalisma+0x7f0>
 80049ec:	4b45      	ldr	r3, [pc, #276]	@ (8004b04 <checkAktifCalisma+0x8ec>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	f083 0301 	eor.w	r3, r3, #1
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <checkAktifCalisma+0x7f0>
 80049fa:	4b43      	ldr	r3, [pc, #268]	@ (8004b08 <checkAktifCalisma+0x8f0>)
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	f083 0301 	eor.w	r3, r3, #1
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00a      	beq.n	8004a1e <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2120      	movs	r1, #32
 8004a0c:	483a      	ldr	r0, [pc, #232]	@ (8004af8 <checkAktifCalisma+0x8e0>)
 8004a0e:	f005 ff62 	bl	800a8d6 <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8004a12:	4b3a      	ldr	r3, [pc, #232]	@ (8004afc <checkAktifCalisma+0x8e4>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8004a18:	4b3c      	ldr	r3, [pc, #240]	@ (8004b0c <checkAktifCalisma+0x8f4>)
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8004a1e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b1c <checkAktifCalisma+0x904>)
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f040 8088 	bne.w	8004b38 <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004a28:	4b3d      	ldr	r3, [pc, #244]	@ (8004b20 <checkAktifCalisma+0x908>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d003      	beq.n	8004a38 <checkAktifCalisma+0x820>
 8004a30:	4b3b      	ldr	r3, [pc, #236]	@ (8004b20 <checkAktifCalisma+0x908>)
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d17f      	bne.n	8004b38 <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8004a38:	4b32      	ldr	r3, [pc, #200]	@ (8004b04 <checkAktifCalisma+0x8ec>)
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d07b      	beq.n	8004b38 <checkAktifCalisma+0x920>
 8004a40:	4b31      	ldr	r3, [pc, #196]	@ (8004b08 <checkAktifCalisma+0x8f0>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d077      	beq.n	8004b38 <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004a48:	2140      	movs	r1, #64	@ 0x40
 8004a4a:	482b      	ldr	r0, [pc, #172]	@ (8004af8 <checkAktifCalisma+0x8e0>)
 8004a4c:	f005 ff2c 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d170      	bne.n	8004b38 <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8004a56:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a5a:	4827      	ldr	r0, [pc, #156]	@ (8004af8 <checkAktifCalisma+0x8e0>)
 8004a5c:	f005 ff24 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <checkAktifCalisma+0x856>
 8004a66:	4b2f      	ldr	r3, [pc, #188]	@ (8004b24 <checkAktifCalisma+0x90c>)
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d164      	bne.n	8004b38 <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004a6e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004a72:	4823      	ldr	r0, [pc, #140]	@ (8004b00 <checkAktifCalisma+0x8e8>)
 8004a74:	f005 ff18 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d10f      	bne.n	8004a9e <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004a7e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004a82:	481f      	ldr	r0, [pc, #124]	@ (8004b00 <checkAktifCalisma+0x8e8>)
 8004a84:	f005 ff10 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d107      	bne.n	8004a9e <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8004a8e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a92:	481b      	ldr	r0, [pc, #108]	@ (8004b00 <checkAktifCalisma+0x8e8>)
 8004a94:	f005 ff08 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d003      	beq.n	8004aa6 <checkAktifCalisma+0x88e>
 8004a9e:	4b22      	ldr	r3, [pc, #136]	@ (8004b28 <checkAktifCalisma+0x910>)
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d048      	beq.n	8004b38 <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 8004aa6:	4b21      	ldr	r3, [pc, #132]	@ (8004b2c <checkAktifCalisma+0x914>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	f083 0301 	eor.w	r3, r3, #1
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d041      	beq.n	8004b38 <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8004ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8004b30 <checkAktifCalisma+0x918>)
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	f083 0301 	eor.w	r3, r3, #1
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d03a      	beq.n	8004b38 <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8004ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8004b34 <checkAktifCalisma+0x91c>)
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	f083 0301 	eor.w	r3, r3, #1
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d033      	beq.n	8004b38 <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8004ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8004afc <checkAktifCalisma+0x8e4>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	f083 0301 	eor.w	r3, r3, #1
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d02c      	beq.n	8004b38 <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 8004ade:	4b05      	ldr	r3, [pc, #20]	@ (8004af4 <checkAktifCalisma+0x8dc>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	f083 0301 	eor.w	r3, r3, #1
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d025      	beq.n	8004b38 <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 8004aec:	4b0e      	ldr	r3, [pc, #56]	@ (8004b28 <checkAktifCalisma+0x910>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	701a      	strb	r2, [r3, #0]
 8004af2:	e024      	b.n	8004b3e <checkAktifCalisma+0x926>
 8004af4:	200016f6 	.word	0x200016f6
 8004af8:	40011000 	.word	0x40011000
 8004afc:	200016fa 	.word	0x200016fa
 8004b00:	40010c00 	.word	0x40010c00
 8004b04:	20001711 	.word	0x20001711
 8004b08:	20001712 	.word	0x20001712
 8004b0c:	200016f2 	.word	0x200016f2
 8004b10:	20001698 	.word	0x20001698
 8004b14:	200016a4 	.word	0x200016a4
 8004b18:	200016d6 	.word	0x200016d6
 8004b1c:	200016dd 	.word	0x200016dd
 8004b20:	200016cf 	.word	0x200016cf
 8004b24:	200016d1 	.word	0x200016d1
 8004b28:	200016f7 	.word	0x200016f7
 8004b2c:	200016f5 	.word	0x200016f5
 8004b30:	200016f9 	.word	0x200016f9
 8004b34:	200016f8 	.word	0x200016f8
				} else {
					devmotorasagicalisiyor=0;
 8004b38:	4b96      	ldr	r3, [pc, #600]	@ (8004d94 <checkAktifCalisma+0xb7c>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8004b3e:	4b95      	ldr	r3, [pc, #596]	@ (8004d94 <checkAktifCalisma+0xb7c>)
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d007      	beq.n	8004b56 <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004b46:	2201      	movs	r2, #1
 8004b48:	2110      	movs	r1, #16
 8004b4a:	4893      	ldr	r0, [pc, #588]	@ (8004d98 <checkAktifCalisma+0xb80>)
 8004b4c:	f005 fec3 	bl	800a8d6 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8004b50:	4b92      	ldr	r3, [pc, #584]	@ (8004d9c <checkAktifCalisma+0xb84>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004b56:	4b91      	ldr	r3, [pc, #580]	@ (8004d9c <checkAktifCalisma+0xb84>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d024      	beq.n	8004ba8 <checkAktifCalisma+0x990>
 8004b5e:	2140      	movs	r1, #64	@ 0x40
 8004b60:	488d      	ldr	r0, [pc, #564]	@ (8004d98 <checkAktifCalisma+0xb80>)
 8004b62:	f005 fea1 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004b66:	4603      	mov	r3, r0
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d007      	beq.n	8004b7c <checkAktifCalisma+0x964>
 8004b6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004b70:	4889      	ldr	r0, [pc, #548]	@ (8004d98 <checkAktifCalisma+0xb80>)
 8004b72:	f005 fe99 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d115      	bne.n	8004ba8 <checkAktifCalisma+0x990>
 8004b7c:	4b88      	ldr	r3, [pc, #544]	@ (8004da0 <checkAktifCalisma+0xb88>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d011      	beq.n	8004ba8 <checkAktifCalisma+0x990>
 8004b84:	4b87      	ldr	r3, [pc, #540]	@ (8004da4 <checkAktifCalisma+0xb8c>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00d      	beq.n	8004ba8 <checkAktifCalisma+0x990>
 8004b8c:	4b86      	ldr	r3, [pc, #536]	@ (8004da8 <checkAktifCalisma+0xb90>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	f083 0301 	eor.w	r3, r3, #1
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d006      	beq.n	8004ba8 <checkAktifCalisma+0x990>
					timer2=millis;
 8004b9a:	4b84      	ldr	r3, [pc, #528]	@ (8004dac <checkAktifCalisma+0xb94>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a84      	ldr	r2, [pc, #528]	@ (8004db0 <checkAktifCalisma+0xb98>)
 8004ba0:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8004ba2:	4b81      	ldr	r3, [pc, #516]	@ (8004da8 <checkAktifCalisma+0xb90>)
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004ba8:	4b80      	ldr	r3, [pc, #512]	@ (8004dac <checkAktifCalisma+0xb94>)
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	4b80      	ldr	r3, [pc, #512]	@ (8004db0 <checkAktifCalisma+0xb98>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	4a80      	ldr	r2, [pc, #512]	@ (8004db4 <checkAktifCalisma+0xb9c>)
 8004bb4:	7812      	ldrb	r2, [r2, #0]
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d303      	bcc.n	8004bc2 <checkAktifCalisma+0x9aa>
 8004bba:	4b7b      	ldr	r3, [pc, #492]	@ (8004da8 <checkAktifCalisma+0xb90>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10d      	bne.n	8004bde <checkAktifCalisma+0x9c6>
 8004bc2:	4b77      	ldr	r3, [pc, #476]	@ (8004da0 <checkAktifCalisma+0xb88>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	f083 0301 	eor.w	r3, r3, #1
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d106      	bne.n	8004bde <checkAktifCalisma+0x9c6>
 8004bd0:	4b74      	ldr	r3, [pc, #464]	@ (8004da4 <checkAktifCalisma+0xb8c>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	f083 0301 	eor.w	r3, r3, #1
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004bde:	2200      	movs	r2, #0
 8004be0:	2110      	movs	r1, #16
 8004be2:	486d      	ldr	r0, [pc, #436]	@ (8004d98 <checkAktifCalisma+0xb80>)
 8004be4:	f005 fe77 	bl	800a8d6 <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8004be8:	4b6c      	ldr	r3, [pc, #432]	@ (8004d9c <checkAktifCalisma+0xb84>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8004bee:	4b6e      	ldr	r3, [pc, #440]	@ (8004da8 <checkAktifCalisma+0xb90>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004bf4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004bf8:	486f      	ldr	r0, [pc, #444]	@ (8004db8 <checkAktifCalisma+0xba0>)
 8004bfa:	f005 fe55 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d120      	bne.n	8004c46 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004c04:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004c08:	486b      	ldr	r0, [pc, #428]	@ (8004db8 <checkAktifCalisma+0xba0>)
 8004c0a:	f005 fe4d 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d118      	bne.n	8004c46 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004c14:	2104      	movs	r1, #4
 8004c16:	4868      	ldr	r0, [pc, #416]	@ (8004db8 <checkAktifCalisma+0xba0>)
 8004c18:	f005 fe46 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d111      	bne.n	8004c46 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004c22:	2102      	movs	r1, #2
 8004c24:	4864      	ldr	r0, [pc, #400]	@ (8004db8 <checkAktifCalisma+0xba0>)
 8004c26:	f005 fe3f 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10a      	bne.n	8004c46 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004c30:	2101      	movs	r1, #1
 8004c32:	4861      	ldr	r0, [pc, #388]	@ (8004db8 <checkAktifCalisma+0xba0>)
 8004c34:	f005 fe38 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d103      	bne.n	8004c46 <checkAktifCalisma+0xa2e>
					makineStop=1;
 8004c3e:	4b5f      	ldr	r3, [pc, #380]	@ (8004dbc <checkAktifCalisma+0xba4>)
 8004c40:	2201      	movs	r2, #1
 8004c42:	701a      	strb	r2, [r3, #0]
 8004c44:	e002      	b.n	8004c4c <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 8004c46:	4b5d      	ldr	r3, [pc, #372]	@ (8004dbc <checkAktifCalisma+0xba4>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004c4c:	4b5c      	ldr	r3, [pc, #368]	@ (8004dc0 <checkAktifCalisma+0xba8>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d144      	bne.n	8004cde <checkAktifCalisma+0xac6>
 8004c54:	4b5b      	ldr	r3, [pc, #364]	@ (8004dc4 <checkAktifCalisma+0xbac>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d003      	beq.n	8004c64 <checkAktifCalisma+0xa4c>
 8004c5c:	4b59      	ldr	r3, [pc, #356]	@ (8004dc4 <checkAktifCalisma+0xbac>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b03      	cmp	r3, #3
 8004c62:	d13c      	bne.n	8004cde <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004c64:	2180      	movs	r1, #128	@ 0x80
 8004c66:	484c      	ldr	r0, [pc, #304]	@ (8004d98 <checkAktifCalisma+0xb80>)
 8004c68:	f005 fe1e 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d103      	bne.n	8004c7a <checkAktifCalisma+0xa62>
 8004c72:	4b55      	ldr	r3, [pc, #340]	@ (8004dc8 <checkAktifCalisma+0xbb0>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00b      	beq.n	8004c92 <checkAktifCalisma+0xa7a>
 8004c7a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004c7e:	484e      	ldr	r0, [pc, #312]	@ (8004db8 <checkAktifCalisma+0xba0>)
 8004c80:	f005 fe12 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d129      	bne.n	8004cde <checkAktifCalisma+0xac6>
 8004c8a:	4b4f      	ldr	r3, [pc, #316]	@ (8004dc8 <checkAktifCalisma+0xbb0>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d125      	bne.n	8004cde <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004c92:	2104      	movs	r1, #4
 8004c94:	4840      	ldr	r0, [pc, #256]	@ (8004d98 <checkAktifCalisma+0xb80>)
 8004c96:	f005 fe07 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d003      	beq.n	8004ca8 <checkAktifCalisma+0xa90>
 8004ca0:	4b4a      	ldr	r3, [pc, #296]	@ (8004dcc <checkAktifCalisma+0xbb4>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d11a      	bne.n	8004cde <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004ca8:	2102      	movs	r1, #2
 8004caa:	483b      	ldr	r0, [pc, #236]	@ (8004d98 <checkAktifCalisma+0xb80>)
 8004cac:	f005 fdfc 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d113      	bne.n	8004cde <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 8004cb6:	4b46      	ldr	r3, [pc, #280]	@ (8004dd0 <checkAktifCalisma+0xbb8>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	f083 0301 	eor.w	r3, r3, #1
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00c      	beq.n	8004cde <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 8004cc4:	4b3d      	ldr	r3, [pc, #244]	@ (8004dbc <checkAktifCalisma+0xba4>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d008      	beq.n	8004cde <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 8004ccc:	4b41      	ldr	r3, [pc, #260]	@ (8004dd4 <checkAktifCalisma+0xbbc>)
 8004cce:	2201      	movs	r2, #1
 8004cd0:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004cd2:	4b36      	ldr	r3, [pc, #216]	@ (8004dac <checkAktifCalisma+0xb94>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a40      	ldr	r2, [pc, #256]	@ (8004dd8 <checkAktifCalisma+0xbc0>)
 8004cd8:	6013      	str	r3, [r2, #0]
					bekle();
 8004cda:	f7ff f901 	bl	8003ee0 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8004cde:	4b33      	ldr	r3, [pc, #204]	@ (8004dac <checkAktifCalisma+0xb94>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4b3d      	ldr	r3, [pc, #244]	@ (8004dd8 <checkAktifCalisma+0xbc0>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	4a3c      	ldr	r2, [pc, #240]	@ (8004ddc <checkAktifCalisma+0xbc4>)
 8004cea:	7812      	ldrb	r2, [r2, #0]
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d211      	bcs.n	8004d14 <checkAktifCalisma+0xafc>
 8004cf0:	2104      	movs	r1, #4
 8004cf2:	4829      	ldr	r0, [pc, #164]	@ (8004d98 <checkAktifCalisma+0xb80>)
 8004cf4:	f005 fdd8 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <checkAktifCalisma+0xafc>
 8004cfe:	4b33      	ldr	r3, [pc, #204]	@ (8004dcc <checkAktifCalisma+0xbb4>)
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d006      	beq.n	8004d14 <checkAktifCalisma+0xafc>
 8004d06:	4b2d      	ldr	r3, [pc, #180]	@ (8004dbc <checkAktifCalisma+0xba4>)
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	f083 0301 	eor.w	r3, r3, #1
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 8004d14:	4b2f      	ldr	r3, [pc, #188]	@ (8004dd4 <checkAktifCalisma+0xbbc>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004d1a:	4b29      	ldr	r3, [pc, #164]	@ (8004dc0 <checkAktifCalisma+0xba8>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d160      	bne.n	8004de4 <checkAktifCalisma+0xbcc>
 8004d22:	4b28      	ldr	r3, [pc, #160]	@ (8004dc4 <checkAktifCalisma+0xbac>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d003      	beq.n	8004d32 <checkAktifCalisma+0xb1a>
 8004d2a:	4b26      	ldr	r3, [pc, #152]	@ (8004dc4 <checkAktifCalisma+0xbac>)
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b03      	cmp	r3, #3
 8004d30:	d158      	bne.n	8004de4 <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004d32:	2104      	movs	r1, #4
 8004d34:	4818      	ldr	r0, [pc, #96]	@ (8004d98 <checkAktifCalisma+0xb80>)
 8004d36:	f005 fdb7 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d003      	beq.n	8004d48 <checkAktifCalisma+0xb30>
 8004d40:	4b22      	ldr	r3, [pc, #136]	@ (8004dcc <checkAktifCalisma+0xbb4>)
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d14d      	bne.n	8004de4 <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004d48:	2102      	movs	r1, #2
 8004d4a:	4813      	ldr	r0, [pc, #76]	@ (8004d98 <checkAktifCalisma+0xb80>)
 8004d4c:	f005 fdac 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d146      	bne.n	8004de4 <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004d56:	2180      	movs	r1, #128	@ 0x80
 8004d58:	480f      	ldr	r0, [pc, #60]	@ (8004d98 <checkAktifCalisma+0xb80>)
 8004d5a:	f005 fda5 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d103      	bne.n	8004d6c <checkAktifCalisma+0xb54>
 8004d64:	4b18      	ldr	r3, [pc, #96]	@ (8004dc8 <checkAktifCalisma+0xbb0>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00b      	beq.n	8004d84 <checkAktifCalisma+0xb6c>
 8004d6c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004d70:	4811      	ldr	r0, [pc, #68]	@ (8004db8 <checkAktifCalisma+0xba0>)
 8004d72:	f005 fd99 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d133      	bne.n	8004de4 <checkAktifCalisma+0xbcc>
 8004d7c:	4b12      	ldr	r3, [pc, #72]	@ (8004dc8 <checkAktifCalisma+0xbb0>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d12f      	bne.n	8004de4 <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 8004d84:	4b0d      	ldr	r3, [pc, #52]	@ (8004dbc <checkAktifCalisma+0xba4>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d02b      	beq.n	8004de4 <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 8004d8c:	4b14      	ldr	r3, [pc, #80]	@ (8004de0 <checkAktifCalisma+0xbc8>)
 8004d8e:	2201      	movs	r2, #1
 8004d90:	701a      	strb	r2, [r3, #0]
 8004d92:	e02a      	b.n	8004dea <checkAktifCalisma+0xbd2>
 8004d94:	200016f7 	.word	0x200016f7
 8004d98:	40011000 	.word	0x40011000
 8004d9c:	200016fb 	.word	0x200016fb
 8004da0:	20001711 	.word	0x20001711
 8004da4:	20001712 	.word	0x20001712
 8004da8:	200016f3 	.word	0x200016f3
 8004dac:	20001698 	.word	0x20001698
 8004db0:	200016a4 	.word	0x200016a4
 8004db4:	200016d6 	.word	0x200016d6
 8004db8:	40010c00 	.word	0x40010c00
 8004dbc:	20001701 	.word	0x20001701
 8004dc0:	200016c9 	.word	0x200016c9
 8004dc4:	200016c8 	.word	0x200016c8
 8004dc8:	200016cc 	.word	0x200016cc
 8004dcc:	200016c6 	.word	0x200016c6
 8004dd0:	200016ef 	.word	0x200016ef
 8004dd4:	20001702 	.word	0x20001702
 8004dd8:	2000169c 	.word	0x2000169c
 8004ddc:	200016d9 	.word	0x200016d9
 8004de0:	20001703 	.word	0x20001703
				} else {
					kapi1butonkontrol=0;
 8004de4:	4b8b      	ldr	r3, [pc, #556]	@ (8005014 <checkAktifCalisma+0xdfc>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004dea:	4b8b      	ldr	r3, [pc, #556]	@ (8005018 <checkAktifCalisma+0xe00>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d121      	bne.n	8004e36 <checkAktifCalisma+0xc1e>
 8004df2:	4b8a      	ldr	r3, [pc, #552]	@ (800501c <checkAktifCalisma+0xe04>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d003      	beq.n	8004e02 <checkAktifCalisma+0xbea>
 8004dfa:	4b88      	ldr	r3, [pc, #544]	@ (800501c <checkAktifCalisma+0xe04>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d119      	bne.n	8004e36 <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004e02:	2104      	movs	r1, #4
 8004e04:	4886      	ldr	r0, [pc, #536]	@ (8005020 <checkAktifCalisma+0xe08>)
 8004e06:	f005 fd4f 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d003      	beq.n	8004e18 <checkAktifCalisma+0xc00>
 8004e10:	4b84      	ldr	r3, [pc, #528]	@ (8005024 <checkAktifCalisma+0xe0c>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10e      	bne.n	8004e36 <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004e18:	2102      	movs	r1, #2
 8004e1a:	4881      	ldr	r0, [pc, #516]	@ (8005020 <checkAktifCalisma+0xe08>)
 8004e1c:	f005 fd44 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d107      	bne.n	8004e36 <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 8004e26:	4b80      	ldr	r3, [pc, #512]	@ (8005028 <checkAktifCalisma+0xe10>)
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 8004e2e:	4b7f      	ldr	r3, [pc, #508]	@ (800502c <checkAktifCalisma+0xe14>)
 8004e30:	2201      	movs	r2, #1
 8004e32:	701a      	strb	r2, [r3, #0]
 8004e34:	e002      	b.n	8004e3c <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 8004e36:	4b7d      	ldr	r3, [pc, #500]	@ (800502c <checkAktifCalisma+0xe14>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8004e3c:	4b75      	ldr	r3, [pc, #468]	@ (8005014 <checkAktifCalisma+0xdfc>)
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d107      	bne.n	8004e54 <checkAktifCalisma+0xc3c>
 8004e44:	4b79      	ldr	r3, [pc, #484]	@ (800502c <checkAktifCalisma+0xe14>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d103      	bne.n	8004e54 <checkAktifCalisma+0xc3c>
 8004e4c:	4b78      	ldr	r3, [pc, #480]	@ (8005030 <checkAktifCalisma+0xe18>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d005      	beq.n	8004e60 <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004e54:	2201      	movs	r2, #1
 8004e56:	2180      	movs	r1, #128	@ 0x80
 8004e58:	4876      	ldr	r0, [pc, #472]	@ (8005034 <checkAktifCalisma+0xe1c>)
 8004e5a:	f005 fd3c 	bl	800a8d6 <HAL_GPIO_WritePin>
 8004e5e:	e004      	b.n	8004e6a <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004e60:	2200      	movs	r2, #0
 8004e62:	2180      	movs	r1, #128	@ 0x80
 8004e64:	4873      	ldr	r0, [pc, #460]	@ (8005034 <checkAktifCalisma+0xe1c>)
 8004e66:	f005 fd36 	bl	800a8d6 <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004e6a:	4b73      	ldr	r3, [pc, #460]	@ (8005038 <checkAktifCalisma+0xe20>)
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d141      	bne.n	8004ef6 <checkAktifCalisma+0xcde>
 8004e72:	4b6a      	ldr	r3, [pc, #424]	@ (800501c <checkAktifCalisma+0xe04>)
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d003      	beq.n	8004e82 <checkAktifCalisma+0xc6a>
 8004e7a:	4b68      	ldr	r3, [pc, #416]	@ (800501c <checkAktifCalisma+0xe04>)
 8004e7c:	781b      	ldrb	r3, [r3, #0]
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d139      	bne.n	8004ef6 <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004e82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004e86:	4866      	ldr	r0, [pc, #408]	@ (8005020 <checkAktifCalisma+0xe08>)
 8004e88:	f005 fd0e 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d103      	bne.n	8004e9a <checkAktifCalisma+0xc82>
 8004e92:	4b6a      	ldr	r3, [pc, #424]	@ (800503c <checkAktifCalisma+0xe24>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d00b      	beq.n	8004eb2 <checkAktifCalisma+0xc9a>
 8004e9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004e9e:	4868      	ldr	r0, [pc, #416]	@ (8005040 <checkAktifCalisma+0xe28>)
 8004ea0:	f005 fd02 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d125      	bne.n	8004ef6 <checkAktifCalisma+0xcde>
 8004eaa:	4b64      	ldr	r3, [pc, #400]	@ (800503c <checkAktifCalisma+0xe24>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d121      	bne.n	8004ef6 <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004eb2:	2102      	movs	r1, #2
 8004eb4:	485a      	ldr	r0, [pc, #360]	@ (8005020 <checkAktifCalisma+0xe08>)
 8004eb6:	f005 fcf7 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d11a      	bne.n	8004ef6 <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004ec0:	2104      	movs	r1, #4
 8004ec2:	4857      	ldr	r0, [pc, #348]	@ (8005020 <checkAktifCalisma+0xe08>)
 8004ec4:	f005 fcf0 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d113      	bne.n	8004ef6 <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 8004ece:	4b56      	ldr	r3, [pc, #344]	@ (8005028 <checkAktifCalisma+0xe10>)
 8004ed0:	781b      	ldrb	r3, [r3, #0]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00f      	beq.n	8004ef6 <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 8004ed6:	4b5b      	ldr	r3, [pc, #364]	@ (8005044 <checkAktifCalisma+0xe2c>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	f083 0301 	eor.w	r3, r3, #1
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 8004ee4:	4b58      	ldr	r3, [pc, #352]	@ (8005048 <checkAktifCalisma+0xe30>)
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004eea:	4b58      	ldr	r3, [pc, #352]	@ (800504c <checkAktifCalisma+0xe34>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a58      	ldr	r2, [pc, #352]	@ (8005050 <checkAktifCalisma+0xe38>)
 8004ef0:	6013      	str	r3, [r2, #0]
					bekle();
 8004ef2:	f7fe fff5 	bl	8003ee0 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8004ef6:	4b55      	ldr	r3, [pc, #340]	@ (800504c <checkAktifCalisma+0xe34>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4b55      	ldr	r3, [pc, #340]	@ (8005050 <checkAktifCalisma+0xe38>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	4a54      	ldr	r2, [pc, #336]	@ (8005054 <checkAktifCalisma+0xe3c>)
 8004f02:	7812      	ldrb	r2, [r2, #0]
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d20d      	bcs.n	8004f24 <checkAktifCalisma+0xd0c>
 8004f08:	2102      	movs	r1, #2
 8004f0a:	4845      	ldr	r0, [pc, #276]	@ (8005020 <checkAktifCalisma+0xe08>)
 8004f0c:	f005 fccc 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d006      	beq.n	8004f24 <checkAktifCalisma+0xd0c>
 8004f16:	4b44      	ldr	r3, [pc, #272]	@ (8005028 <checkAktifCalisma+0xe10>)
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	f083 0301 	eor.w	r3, r3, #1
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 8004f24:	4b48      	ldr	r3, [pc, #288]	@ (8005048 <checkAktifCalisma+0xe30>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004f2a:	4b43      	ldr	r3, [pc, #268]	@ (8005038 <checkAktifCalisma+0xe20>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d135      	bne.n	8004f9e <checkAktifCalisma+0xd86>
 8004f32:	4b3a      	ldr	r3, [pc, #232]	@ (800501c <checkAktifCalisma+0xe04>)
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d003      	beq.n	8004f42 <checkAktifCalisma+0xd2a>
 8004f3a:	4b38      	ldr	r3, [pc, #224]	@ (800501c <checkAktifCalisma+0xe04>)
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b03      	cmp	r3, #3
 8004f40:	d12d      	bne.n	8004f9e <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004f42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004f46:	4836      	ldr	r0, [pc, #216]	@ (8005020 <checkAktifCalisma+0xe08>)
 8004f48:	f005 fcae 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d103      	bne.n	8004f5a <checkAktifCalisma+0xd42>
 8004f52:	4b3a      	ldr	r3, [pc, #232]	@ (800503c <checkAktifCalisma+0xe24>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00b      	beq.n	8004f72 <checkAktifCalisma+0xd5a>
 8004f5a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004f5e:	4838      	ldr	r0, [pc, #224]	@ (8005040 <checkAktifCalisma+0xe28>)
 8004f60:	f005 fca2 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d119      	bne.n	8004f9e <checkAktifCalisma+0xd86>
 8004f6a:	4b34      	ldr	r3, [pc, #208]	@ (800503c <checkAktifCalisma+0xe24>)
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d115      	bne.n	8004f9e <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004f72:	2102      	movs	r1, #2
 8004f74:	482a      	ldr	r0, [pc, #168]	@ (8005020 <checkAktifCalisma+0xe08>)
 8004f76:	f005 fc97 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d10e      	bne.n	8004f9e <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004f80:	2104      	movs	r1, #4
 8004f82:	4827      	ldr	r0, [pc, #156]	@ (8005020 <checkAktifCalisma+0xe08>)
 8004f84:	f005 fc90 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d107      	bne.n	8004f9e <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 8004f8e:	4b26      	ldr	r3, [pc, #152]	@ (8005028 <checkAktifCalisma+0xe10>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 8004f96:	4b30      	ldr	r3, [pc, #192]	@ (8005058 <checkAktifCalisma+0xe40>)
 8004f98:	2201      	movs	r2, #1
 8004f9a:	701a      	strb	r2, [r3, #0]
 8004f9c:	e002      	b.n	8004fa4 <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 8004f9e:	4b2e      	ldr	r3, [pc, #184]	@ (8005058 <checkAktifCalisma+0xe40>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004fa4:	4b24      	ldr	r3, [pc, #144]	@ (8005038 <checkAktifCalisma+0xe20>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d11d      	bne.n	8004fe8 <checkAktifCalisma+0xdd0>
 8004fac:	4b1b      	ldr	r3, [pc, #108]	@ (800501c <checkAktifCalisma+0xe04>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d003      	beq.n	8004fbc <checkAktifCalisma+0xda4>
 8004fb4:	4b19      	ldr	r3, [pc, #100]	@ (800501c <checkAktifCalisma+0xe04>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	d115      	bne.n	8004fe8 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004fbc:	2102      	movs	r1, #2
 8004fbe:	4818      	ldr	r0, [pc, #96]	@ (8005020 <checkAktifCalisma+0xe08>)
 8004fc0:	f005 fc72 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d10e      	bne.n	8004fe8 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004fca:	2104      	movs	r1, #4
 8004fcc:	4814      	ldr	r0, [pc, #80]	@ (8005020 <checkAktifCalisma+0xe08>)
 8004fce:	f005 fc6b 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d107      	bne.n	8004fe8 <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 8004fd8:	4b13      	ldr	r3, [pc, #76]	@ (8005028 <checkAktifCalisma+0xe10>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 8004fe0:	4b1e      	ldr	r3, [pc, #120]	@ (800505c <checkAktifCalisma+0xe44>)
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	e002      	b.n	8004fee <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8004fe8:	4b1c      	ldr	r3, [pc, #112]	@ (800505c <checkAktifCalisma+0xe44>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8004fee:	4b1a      	ldr	r3, [pc, #104]	@ (8005058 <checkAktifCalisma+0xe40>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d107      	bne.n	8005006 <checkAktifCalisma+0xdee>
 8004ff6:	4b19      	ldr	r3, [pc, #100]	@ (800505c <checkAktifCalisma+0xe44>)
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d103      	bne.n	8005006 <checkAktifCalisma+0xdee>
 8004ffe:	4b12      	ldr	r3, [pc, #72]	@ (8005048 <checkAktifCalisma+0xe30>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d02c      	beq.n	8005060 <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005006:	2201      	movs	r2, #1
 8005008:	2140      	movs	r1, #64	@ 0x40
 800500a:	480a      	ldr	r0, [pc, #40]	@ (8005034 <checkAktifCalisma+0xe1c>)
 800500c:	f005 fc63 	bl	800a8d6 <HAL_GPIO_WritePin>
 8005010:	e02b      	b.n	800506a <checkAktifCalisma+0xe52>
 8005012:	bf00      	nop
 8005014:	20001703 	.word	0x20001703
 8005018:	200016c9 	.word	0x200016c9
 800501c:	200016c8 	.word	0x200016c8
 8005020:	40011000 	.word	0x40011000
 8005024:	200016c6 	.word	0x200016c6
 8005028:	20001701 	.word	0x20001701
 800502c:	20001704 	.word	0x20001704
 8005030:	20001702 	.word	0x20001702
 8005034:	40010800 	.word	0x40010800
 8005038:	200016ca 	.word	0x200016ca
 800503c:	200016cc 	.word	0x200016cc
 8005040:	40010c00 	.word	0x40010c00
 8005044:	200016ef 	.word	0x200016ef
 8005048:	20001705 	.word	0x20001705
 800504c:	20001698 	.word	0x20001698
 8005050:	2000169c 	.word	0x2000169c
 8005054:	200016da 	.word	0x200016da
 8005058:	20001706 	.word	0x20001706
 800505c:	20001707 	.word	0x20001707
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005060:	2200      	movs	r2, #0
 8005062:	2140      	movs	r1, #64	@ 0x40
 8005064:	4889      	ldr	r0, [pc, #548]	@ (800528c <checkAktifCalisma+0x1074>)
 8005066:	f005 fc36 	bl	800a8d6 <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 800506a:	4b89      	ldr	r3, [pc, #548]	@ (8005290 <checkAktifCalisma+0x1078>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <checkAktifCalisma+0xe62>
 8005072:	4b87      	ldr	r3, [pc, #540]	@ (8005290 <checkAktifCalisma+0x1078>)
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d115      	bne.n	80050a6 <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800507a:	2104      	movs	r1, #4
 800507c:	4885      	ldr	r0, [pc, #532]	@ (8005294 <checkAktifCalisma+0x107c>)
 800507e:	f005 fc13 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005082:	4603      	mov	r3, r0
 8005084:	2b01      	cmp	r3, #1
 8005086:	d003      	beq.n	8005090 <checkAktifCalisma+0xe78>
 8005088:	4b83      	ldr	r3, [pc, #524]	@ (8005298 <checkAktifCalisma+0x1080>)
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10a      	bne.n	80050a6 <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8005090:	2102      	movs	r1, #2
 8005092:	4880      	ldr	r0, [pc, #512]	@ (8005294 <checkAktifCalisma+0x107c>)
 8005094:	f005 fc08 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005098:	4603      	mov	r3, r0
 800509a:	2b00      	cmp	r3, #0
 800509c:	d103      	bne.n	80050a6 <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 800509e:	4b7f      	ldr	r3, [pc, #508]	@ (800529c <checkAktifCalisma+0x1084>)
 80050a0:	2201      	movs	r2, #1
 80050a2:	701a      	strb	r2, [r3, #0]
 80050a4:	e002      	b.n	80050ac <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 80050a6:	4b7d      	ldr	r3, [pc, #500]	@ (800529c <checkAktifCalisma+0x1084>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80050ac:	4b78      	ldr	r3, [pc, #480]	@ (8005290 <checkAktifCalisma+0x1078>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d003      	beq.n	80050bc <checkAktifCalisma+0xea4>
 80050b4:	4b76      	ldr	r3, [pc, #472]	@ (8005290 <checkAktifCalisma+0x1078>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d111      	bne.n	80050e0 <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80050bc:	2102      	movs	r1, #2
 80050be:	4875      	ldr	r0, [pc, #468]	@ (8005294 <checkAktifCalisma+0x107c>)
 80050c0:	f005 fbf2 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80050c4:	4603      	mov	r3, r0
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d10a      	bne.n	80050e0 <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80050ca:	2104      	movs	r1, #4
 80050cc:	4871      	ldr	r0, [pc, #452]	@ (8005294 <checkAktifCalisma+0x107c>)
 80050ce:	f005 fbeb 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d103      	bne.n	80050e0 <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 80050d8:	4b71      	ldr	r3, [pc, #452]	@ (80052a0 <checkAktifCalisma+0x1088>)
 80050da:	2201      	movs	r2, #1
 80050dc:	701a      	strb	r2, [r3, #0]
 80050de:	e002      	b.n	80050e6 <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 80050e0:	4b6f      	ldr	r3, [pc, #444]	@ (80052a0 <checkAktifCalisma+0x1088>)
 80050e2:	2200      	movs	r2, #0
 80050e4:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 80050e6:	4b6d      	ldr	r3, [pc, #436]	@ (800529c <checkAktifCalisma+0x1084>)
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00f      	beq.n	800510e <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 80050ee:	4b6d      	ldr	r3, [pc, #436]	@ (80052a4 <checkAktifCalisma+0x108c>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d10b      	bne.n	800510e <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80050f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80050fa:	486b      	ldr	r0, [pc, #428]	@ (80052a8 <checkAktifCalisma+0x1090>)
 80050fc:	f005 fbd4 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d103      	bne.n	800510e <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 8005106:	4b69      	ldr	r3, [pc, #420]	@ (80052ac <checkAktifCalisma+0x1094>)
 8005108:	2201      	movs	r2, #1
 800510a:	701a      	strb	r2, [r3, #0]
 800510c:	e002      	b.n	8005114 <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 800510e:	4b67      	ldr	r3, [pc, #412]	@ (80052ac <checkAktifCalisma+0x1094>)
 8005110:	2200      	movs	r2, #0
 8005112:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8005114:	4b62      	ldr	r3, [pc, #392]	@ (80052a0 <checkAktifCalisma+0x1088>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00f      	beq.n	800513c <checkAktifCalisma+0xf24>
						&& kapiAcTipi==1
 800511c:	4b61      	ldr	r3, [pc, #388]	@ (80052a4 <checkAktifCalisma+0x108c>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d10b      	bne.n	800513c <checkAktifCalisma+0xf24>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005124:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005128:	485f      	ldr	r0, [pc, #380]	@ (80052a8 <checkAktifCalisma+0x1090>)
 800512a:	f005 fbbd 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d103      	bne.n	800513c <checkAktifCalisma+0xf24>

					kapiactablaesp2=1;
 8005134:	4b5e      	ldr	r3, [pc, #376]	@ (80052b0 <checkAktifCalisma+0x1098>)
 8005136:	2201      	movs	r2, #1
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	e002      	b.n	8005142 <checkAktifCalisma+0xf2a>
				} else {
					kapiactablaesp2=0;
 800513c:	4b5c      	ldr	r3, [pc, #368]	@ (80052b0 <checkAktifCalisma+0x1098>)
 800513e:	2200      	movs	r2, #0
 8005140:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005142:	4b5c      	ldr	r3, [pc, #368]	@ (80052b4 <checkAktifCalisma+0x109c>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d11b      	bne.n	8005182 <checkAktifCalisma+0xf6a>
 800514a:	4b5b      	ldr	r3, [pc, #364]	@ (80052b8 <checkAktifCalisma+0x10a0>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2b02      	cmp	r3, #2
 8005150:	d003      	beq.n	800515a <checkAktifCalisma+0xf42>
 8005152:	4b59      	ldr	r3, [pc, #356]	@ (80052b8 <checkAktifCalisma+0x10a0>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b03      	cmp	r3, #3
 8005158:	d113      	bne.n	8005182 <checkAktifCalisma+0xf6a>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))&& ((kapi1prudhome==1)||(kapi2prudhome==1)))
 800515a:	4b50      	ldr	r3, [pc, #320]	@ (800529c <checkAktifCalisma+0x1084>)
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d103      	bne.n	800516a <checkAktifCalisma+0xf52>
 8005162:	4b4f      	ldr	r3, [pc, #316]	@ (80052a0 <checkAktifCalisma+0x1088>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00b      	beq.n	8005182 <checkAktifCalisma+0xf6a>
 800516a:	4b54      	ldr	r3, [pc, #336]	@ (80052bc <checkAktifCalisma+0x10a4>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d103      	bne.n	800517a <checkAktifCalisma+0xf62>
 8005172:	4b53      	ldr	r3, [pc, #332]	@ (80052c0 <checkAktifCalisma+0x10a8>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <checkAktifCalisma+0xf6a>
						 {

						kapiTablaprudhome=1;
 800517a:	4b52      	ldr	r3, [pc, #328]	@ (80052c4 <checkAktifCalisma+0x10ac>)
 800517c:	2201      	movs	r2, #1
 800517e:	701a      	strb	r2, [r3, #0]
 8005180:	e002      	b.n	8005188 <checkAktifCalisma+0xf70>

						 }
				else {
					kapiTablaprudhome=0;
 8005182:	4b50      	ldr	r3, [pc, #320]	@ (80052c4 <checkAktifCalisma+0x10ac>)
 8005184:	2200      	movs	r2, #0
 8005186:	701a      	strb	r2, [r3, #0]
				}


				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005188:	4b4a      	ldr	r3, [pc, #296]	@ (80052b4 <checkAktifCalisma+0x109c>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d148      	bne.n	8005222 <checkAktifCalisma+0x100a>
 8005190:	4b49      	ldr	r3, [pc, #292]	@ (80052b8 <checkAktifCalisma+0x10a0>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	2b02      	cmp	r3, #2
 8005196:	d003      	beq.n	80051a0 <checkAktifCalisma+0xf88>
 8005198:	4b47      	ldr	r3, [pc, #284]	@ (80052b8 <checkAktifCalisma+0x10a0>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b03      	cmp	r3, #3
 800519e:	d140      	bne.n	8005222 <checkAktifCalisma+0x100a>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80051a0:	4b3e      	ldr	r3, [pc, #248]	@ (800529c <checkAktifCalisma+0x1084>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d103      	bne.n	80051b0 <checkAktifCalisma+0xf98>
 80051a8:	4b3d      	ldr	r3, [pc, #244]	@ (80052a0 <checkAktifCalisma+0x1088>)
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d038      	beq.n	8005222 <checkAktifCalisma+0x100a>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 80051b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80051b4:	4837      	ldr	r0, [pc, #220]	@ (8005294 <checkAktifCalisma+0x107c>)
 80051b6:	f005 fb77 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d01c      	beq.n	80051fa <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 80051c0:	2180      	movs	r1, #128	@ 0x80
 80051c2:	4834      	ldr	r0, [pc, #208]	@ (8005294 <checkAktifCalisma+0x107c>)
 80051c4:	f005 fb70 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d106      	bne.n	80051dc <checkAktifCalisma+0xfc4>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 80051ce:	2104      	movs	r1, #4
 80051d0:	4830      	ldr	r0, [pc, #192]	@ (8005294 <checkAktifCalisma+0x107c>)
 80051d2:	f005 fb69 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d00e      	beq.n	80051fa <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 80051dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80051e0:	482c      	ldr	r0, [pc, #176]	@ (8005294 <checkAktifCalisma+0x107c>)
 80051e2:	f005 fb61 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d10a      	bne.n	8005202 <checkAktifCalisma+0xfea>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 80051ec:	2102      	movs	r1, #2
 80051ee:	4829      	ldr	r0, [pc, #164]	@ (8005294 <checkAktifCalisma+0x107c>)
 80051f0:	f005 fb5a 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d103      	bne.n	8005202 <checkAktifCalisma+0xfea>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80051fa:	4b2a      	ldr	r3, [pc, #168]	@ (80052a4 <checkAktifCalisma+0x108c>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d007      	beq.n	8005212 <checkAktifCalisma+0xffa>
 8005202:	4b2a      	ldr	r3, [pc, #168]	@ (80052ac <checkAktifCalisma+0x1094>)
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d103      	bne.n	8005212 <checkAktifCalisma+0xffa>
 800520a:	4b29      	ldr	r3, [pc, #164]	@ (80052b0 <checkAktifCalisma+0x1098>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d007      	beq.n	8005222 <checkAktifCalisma+0x100a>
						&&(makineStop==1)) {
 8005212:	4b2d      	ldr	r3, [pc, #180]	@ (80052c8 <checkAktifCalisma+0x10b0>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <checkAktifCalisma+0x100a>

					kapiTablabutonkontrol=1;
 800521a:	4b2c      	ldr	r3, [pc, #176]	@ (80052cc <checkAktifCalisma+0x10b4>)
 800521c:	2201      	movs	r2, #1
 800521e:	701a      	strb	r2, [r3, #0]
 8005220:	e002      	b.n	8005228 <checkAktifCalisma+0x1010>
				} else {
					kapiTablabutonkontrol=0;
 8005222:	4b2a      	ldr	r3, [pc, #168]	@ (80052cc <checkAktifCalisma+0x10b4>)
 8005224:	2200      	movs	r2, #0
 8005226:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005228:	4b22      	ldr	r3, [pc, #136]	@ (80052b4 <checkAktifCalisma+0x109c>)
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b02      	cmp	r3, #2
 800522e:	d117      	bne.n	8005260 <checkAktifCalisma+0x1048>
 8005230:	4b21      	ldr	r3, [pc, #132]	@ (80052b8 <checkAktifCalisma+0x10a0>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b02      	cmp	r3, #2
 8005236:	d003      	beq.n	8005240 <checkAktifCalisma+0x1028>
 8005238:	4b1f      	ldr	r3, [pc, #124]	@ (80052b8 <checkAktifCalisma+0x10a0>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b03      	cmp	r3, #3
 800523e:	d10f      	bne.n	8005260 <checkAktifCalisma+0x1048>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005240:	4b16      	ldr	r3, [pc, #88]	@ (800529c <checkAktifCalisma+0x1084>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d103      	bne.n	8005250 <checkAktifCalisma+0x1038>
 8005248:	4b15      	ldr	r3, [pc, #84]	@ (80052a0 <checkAktifCalisma+0x1088>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d007      	beq.n	8005260 <checkAktifCalisma+0x1048>
						&&(makineStop==1)) {
 8005250:	4b1d      	ldr	r3, [pc, #116]	@ (80052c8 <checkAktifCalisma+0x10b0>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <checkAktifCalisma+0x1048>

					kapiTablapizzato=1;
 8005258:	4b1d      	ldr	r3, [pc, #116]	@ (80052d0 <checkAktifCalisma+0x10b8>)
 800525a:	2201      	movs	r2, #1
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	e002      	b.n	8005266 <checkAktifCalisma+0x104e>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8005260:	4b1b      	ldr	r3, [pc, #108]	@ (80052d0 <checkAktifCalisma+0x10b8>)
 8005262:	2200      	movs	r2, #0
 8005264:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8005266:	4b19      	ldr	r3, [pc, #100]	@ (80052cc <checkAktifCalisma+0x10b4>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d107      	bne.n	800527e <checkAktifCalisma+0x1066>
 800526e:	4b15      	ldr	r3, [pc, #84]	@ (80052c4 <checkAktifCalisma+0x10ac>)
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d103      	bne.n	800527e <checkAktifCalisma+0x1066>
 8005276:	4b16      	ldr	r3, [pc, #88]	@ (80052d0 <checkAktifCalisma+0x10b8>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d02a      	beq.n	80052d4 <checkAktifCalisma+0x10bc>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800527e:	2201      	movs	r2, #1
 8005280:	2120      	movs	r1, #32
 8005282:	4802      	ldr	r0, [pc, #8]	@ (800528c <checkAktifCalisma+0x1074>)
 8005284:	f005 fb27 	bl	800a8d6 <HAL_GPIO_WritePin>
 8005288:	e029      	b.n	80052de <checkAktifCalisma+0x10c6>
 800528a:	bf00      	nop
 800528c:	40010800 	.word	0x40010800
 8005290:	200016cd 	.word	0x200016cd
 8005294:	40011000 	.word	0x40011000
 8005298:	200016c6 	.word	0x200016c6
 800529c:	2000170b 	.word	0x2000170b
 80052a0:	2000170c 	.word	0x2000170c
 80052a4:	200016cc 	.word	0x200016cc
 80052a8:	40010c00 	.word	0x40010c00
 80052ac:	2000171b 	.word	0x2000171b
 80052b0:	2000171c 	.word	0x2000171c
 80052b4:	200016cb 	.word	0x200016cb
 80052b8:	200016c8 	.word	0x200016c8
 80052bc:	20001702 	.word	0x20001702
 80052c0:	20001705 	.word	0x20001705
 80052c4:	20001708 	.word	0x20001708
 80052c8:	20001701 	.word	0x20001701
 80052cc:	20001709 	.word	0x20001709
 80052d0:	2000170a 	.word	0x2000170a
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80052d4:	2200      	movs	r2, #0
 80052d6:	2120      	movs	r1, #32
 80052d8:	4887      	ldr	r0, [pc, #540]	@ (80054f8 <checkAktifCalisma+0x12e0>)
 80052da:	f005 fafc 	bl	800a8d6 <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80052de:	4b87      	ldr	r3, [pc, #540]	@ (80054fc <checkAktifCalisma+0x12e4>)
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00e      	beq.n	8005304 <checkAktifCalisma+0x10ec>
 80052e6:	2102      	movs	r1, #2
 80052e8:	4885      	ldr	r0, [pc, #532]	@ (8005500 <checkAktifCalisma+0x12e8>)
 80052ea:	f005 fadd 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80052ee:	4603      	mov	r3, r0
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d107      	bne.n	8005304 <checkAktifCalisma+0x10ec>
 80052f4:	4b83      	ldr	r3, [pc, #524]	@ (8005504 <checkAktifCalisma+0x12ec>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d103      	bne.n	8005304 <checkAktifCalisma+0x10ec>
 80052fc:	4b82      	ldr	r3, [pc, #520]	@ (8005508 <checkAktifCalisma+0x12f0>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d112      	bne.n	800532a <checkAktifCalisma+0x1112>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005304:	4b81      	ldr	r3, [pc, #516]	@ (800550c <checkAktifCalisma+0x12f4>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d032      	beq.n	8005372 <checkAktifCalisma+0x115a>
 800530c:	2104      	movs	r1, #4
 800530e:	487c      	ldr	r0, [pc, #496]	@ (8005500 <checkAktifCalisma+0x12e8>)
 8005310:	f005 faca 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005314:	4603      	mov	r3, r0
 8005316:	2b01      	cmp	r3, #1
 8005318:	d12b      	bne.n	8005372 <checkAktifCalisma+0x115a>
 800531a:	4b7a      	ldr	r3, [pc, #488]	@ (8005504 <checkAktifCalisma+0x12ec>)
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d027      	beq.n	8005372 <checkAktifCalisma+0x115a>
 8005322:	4b79      	ldr	r3, [pc, #484]	@ (8005508 <checkAktifCalisma+0x12f0>)
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d023      	beq.n	8005372 <checkAktifCalisma+0x115a>



					calismaSayisi++;
 800532a:	4b79      	ldr	r3, [pc, #484]	@ (8005510 <checkAktifCalisma+0x12f8>)
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	3301      	adds	r3, #1
 8005330:	b2da      	uxtb	r2, r3
 8005332:	4b77      	ldr	r3, [pc, #476]	@ (8005510 <checkAktifCalisma+0x12f8>)
 8005334:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8005336:	4b76      	ldr	r3, [pc, #472]	@ (8005510 <checkAktifCalisma+0x12f8>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	2bff      	cmp	r3, #255	@ 0xff
 800533c:	d108      	bne.n	8005350 <checkAktifCalisma+0x1138>
						calismaSayisi = 0;
 800533e:	4b74      	ldr	r3, [pc, #464]	@ (8005510 <checkAktifCalisma+0x12f8>)
 8005340:	2200      	movs	r2, #0
 8005342:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 8005344:	4b73      	ldr	r3, [pc, #460]	@ (8005514 <checkAktifCalisma+0x12fc>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	3301      	adds	r3, #1
 800534a:	b2da      	uxtb	r2, r3
 800534c:	4b71      	ldr	r3, [pc, #452]	@ (8005514 <checkAktifCalisma+0x12fc>)
 800534e:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 8005350:	4b6f      	ldr	r3, [pc, #444]	@ (8005510 <checkAktifCalisma+0x12f8>)
 8005352:	781a      	ldrb	r2, [r3, #0]
 8005354:	4b70      	ldr	r3, [pc, #448]	@ (8005518 <checkAktifCalisma+0x1300>)
 8005356:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 8005358:	4b6e      	ldr	r3, [pc, #440]	@ (8005514 <checkAktifCalisma+0x12fc>)
 800535a:	781a      	ldrb	r2, [r3, #0]
 800535c:	4b6e      	ldr	r3, [pc, #440]	@ (8005518 <checkAktifCalisma+0x1300>)
 800535e:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 8005360:	4b6e      	ldr	r3, [pc, #440]	@ (800551c <checkAktifCalisma+0x1304>)
 8005362:	2201      	movs	r2, #1
 8005364:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 8005366:	4b65      	ldr	r3, [pc, #404]	@ (80054fc <checkAktifCalisma+0x12e4>)
 8005368:	2200      	movs	r2, #0
 800536a:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 800536c:	4b67      	ldr	r3, [pc, #412]	@ (800550c <checkAktifCalisma+0x12f4>)
 800536e:	2200      	movs	r2, #0
 8005370:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005372:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005376:	486a      	ldr	r0, [pc, #424]	@ (8005520 <checkAktifCalisma+0x1308>)
 8005378:	f005 fa96 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d016      	beq.n	80053b0 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005382:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005386:	4866      	ldr	r0, [pc, #408]	@ (8005520 <checkAktifCalisma+0x1308>)
 8005388:	f005 fa8e 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00e      	beq.n	80053b0 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005392:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005396:	4862      	ldr	r0, [pc, #392]	@ (8005520 <checkAktifCalisma+0x1308>)
 8005398:	f005 fa86 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d006      	beq.n	80053b0 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80053a2:	2140      	movs	r1, #64	@ 0x40
 80053a4:	4856      	ldr	r0, [pc, #344]	@ (8005500 <checkAktifCalisma+0x12e8>)
 80053a6:	f005 fa7f 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d103      	bne.n	80053b8 <checkAktifCalisma+0x11a0>

					startBasili=1;
 80053b0:	4b5c      	ldr	r3, [pc, #368]	@ (8005524 <checkAktifCalisma+0x130c>)
 80053b2:	2201      	movs	r2, #1
 80053b4:	701a      	strb	r2, [r3, #0]
 80053b6:	e002      	b.n	80053be <checkAktifCalisma+0x11a6>
				} else {
					startBasili=0;
 80053b8:	4b5a      	ldr	r3, [pc, #360]	@ (8005524 <checkAktifCalisma+0x130c>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 80053be:	4b59      	ldr	r3, [pc, #356]	@ (8005524 <checkAktifCalisma+0x130c>)
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d014      	beq.n	80053f0 <checkAktifCalisma+0x11d8>
 80053c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80053ca:	4855      	ldr	r0, [pc, #340]	@ (8005520 <checkAktifCalisma+0x1308>)
 80053cc:	f005 fa6c 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d10c      	bne.n	80053f0 <checkAktifCalisma+0x11d8>

					hataVar=1;
 80053d6:	4b54      	ldr	r3, [pc, #336]	@ (8005528 <checkAktifCalisma+0x1310>)
 80053d8:	2201      	movs	r2, #1
 80053da:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 80053dc:	2001      	movs	r0, #1
 80053de:	f7fb fd13 	bl	8000e08 <hataKoduLcdGoster>
					hata2EEPROM(1);
 80053e2:	2001      	movs	r0, #1
 80053e4:	f7fb fcb8 	bl	8000d58 <hata2EEPROM>
					acilstophatasi=1;
 80053e8:	4b50      	ldr	r3, [pc, #320]	@ (800552c <checkAktifCalisma+0x1314>)
 80053ea:	2201      	movs	r2, #1
 80053ec:	701a      	strb	r2, [r3, #0]
 80053ee:	e018      	b.n	8005422 <checkAktifCalisma+0x120a>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80053f0:	4b4e      	ldr	r3, [pc, #312]	@ (800552c <checkAktifCalisma+0x1314>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d014      	beq.n	8005422 <checkAktifCalisma+0x120a>
 80053f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80053fc:	4848      	ldr	r0, [pc, #288]	@ (8005520 <checkAktifCalisma+0x1308>)
 80053fe:	f005 fa53 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d10c      	bne.n	8005422 <checkAktifCalisma+0x120a>
 8005408:	4b46      	ldr	r3, [pc, #280]	@ (8005524 <checkAktifCalisma+0x130c>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	f083 0301 	eor.w	r3, r3, #1
 8005410:	b2db      	uxtb	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <checkAktifCalisma+0x120a>
					acilstophatasi=0;
 8005416:	4b45      	ldr	r3, [pc, #276]	@ (800552c <checkAktifCalisma+0x1314>)
 8005418:	2200      	movs	r2, #0
 800541a:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 800541c:	2001      	movs	r0, #1
 800541e:	f7fe fcf1 	bl	8003e04 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 8005422:	4b43      	ldr	r3, [pc, #268]	@ (8005530 <checkAktifCalisma+0x1318>)
 8005424:	781b      	ldrb	r3, [r3, #0]
 8005426:	f083 0301 	eor.w	r3, r3, #1
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d023      	beq.n	8005478 <checkAktifCalisma+0x1260>
 8005430:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005434:	483a      	ldr	r0, [pc, #232]	@ (8005520 <checkAktifCalisma+0x1308>)
 8005436:	f005 fa37 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d003      	beq.n	8005448 <checkAktifCalisma+0x1230>
 8005440:	4b3c      	ldr	r3, [pc, #240]	@ (8005534 <checkAktifCalisma+0x131c>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d017      	beq.n	8005478 <checkAktifCalisma+0x1260>
 8005448:	4b3b      	ldr	r3, [pc, #236]	@ (8005538 <checkAktifCalisma+0x1320>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d113      	bne.n	8005478 <checkAktifCalisma+0x1260>
 8005450:	4b3a      	ldr	r3, [pc, #232]	@ (800553c <checkAktifCalisma+0x1324>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	f083 0301 	eor.w	r3, r3, #1
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00c      	beq.n	8005478 <checkAktifCalisma+0x1260>
					hataVar=1;
 800545e:	4b32      	ldr	r3, [pc, #200]	@ (8005528 <checkAktifCalisma+0x1310>)
 8005460:	2201      	movs	r2, #1
 8005462:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 8005464:	2002      	movs	r0, #2
 8005466:	f7fb fccf 	bl	8000e08 <hataKoduLcdGoster>
					hata2EEPROM(2);
 800546a:	2002      	movs	r0, #2
 800546c:	f7fb fc74 	bl	8000d58 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 8005470:	4b32      	ldr	r3, [pc, #200]	@ (800553c <checkAktifCalisma+0x1324>)
 8005472:	2201      	movs	r2, #1
 8005474:	701a      	strb	r2, [r3, #0]
 8005476:	e017      	b.n	80054a8 <checkAktifCalisma+0x1290>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005478:	4b30      	ldr	r3, [pc, #192]	@ (800553c <checkAktifCalisma+0x1324>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d013      	beq.n	80054a8 <checkAktifCalisma+0x1290>
 8005480:	4b2b      	ldr	r3, [pc, #172]	@ (8005530 <checkAktifCalisma+0x1318>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00f      	beq.n	80054a8 <checkAktifCalisma+0x1290>
 8005488:	4b2d      	ldr	r3, [pc, #180]	@ (8005540 <checkAktifCalisma+0x1328>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	f083 0301 	eor.w	r3, r3, #1
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b00      	cmp	r3, #0
 8005494:	d008      	beq.n	80054a8 <checkAktifCalisma+0x1290>
					emniyetCercevesihatasi=0;
 8005496:	4b29      	ldr	r3, [pc, #164]	@ (800553c <checkAktifCalisma+0x1324>)
 8005498:	2200      	movs	r2, #0
 800549a:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 800549c:	4b25      	ldr	r3, [pc, #148]	@ (8005534 <checkAktifCalisma+0x131c>)
 800549e:	2200      	movs	r2, #0
 80054a0:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 80054a2:	2002      	movs	r0, #2
 80054a4:	f7fe fcae 	bl	8003e04 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 80054a8:	4b26      	ldr	r3, [pc, #152]	@ (8005544 <checkAktifCalisma+0x132c>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d151      	bne.n	8005554 <checkAktifCalisma+0x133c>
 80054b0:	4b25      	ldr	r3, [pc, #148]	@ (8005548 <checkAktifCalisma+0x1330>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d14d      	bne.n	8005554 <checkAktifCalisma+0x133c>
 80054b8:	4b24      	ldr	r3, [pc, #144]	@ (800554c <checkAktifCalisma+0x1334>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d049      	beq.n	8005554 <checkAktifCalisma+0x133c>
 80054c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054c4:	480e      	ldr	r0, [pc, #56]	@ (8005500 <checkAktifCalisma+0x12e8>)
 80054c6:	f005 f9ef 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d141      	bne.n	8005554 <checkAktifCalisma+0x133c>
 80054d0:	4b1f      	ldr	r3, [pc, #124]	@ (8005550 <checkAktifCalisma+0x1338>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	f083 0301 	eor.w	r3, r3, #1
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d03a      	beq.n	8005554 <checkAktifCalisma+0x133c>
					hataVar=1;
 80054de:	4b12      	ldr	r3, [pc, #72]	@ (8005528 <checkAktifCalisma+0x1310>)
 80054e0:	2201      	movs	r2, #1
 80054e2:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 80054e4:	2003      	movs	r0, #3
 80054e6:	f7fb fc8f 	bl	8000e08 <hataKoduLcdGoster>
					hata2EEPROM(3);
 80054ea:	2003      	movs	r0, #3
 80054ec:	f7fb fc34 	bl	8000d58 <hata2EEPROM>
					basinchatasi=1;
 80054f0:	4b17      	ldr	r3, [pc, #92]	@ (8005550 <checkAktifCalisma+0x1338>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	701a      	strb	r2, [r3, #0]
 80054f6:	e043      	b.n	8005580 <checkAktifCalisma+0x1368>
 80054f8:	40010800 	.word	0x40010800
 80054fc:	200016ff 	.word	0x200016ff
 8005500:	40011000 	.word	0x40011000
 8005504:	200016c6 	.word	0x200016c6
 8005508:	20001701 	.word	0x20001701
 800550c:	20001700 	.word	0x20001700
 8005510:	200016b8 	.word	0x200016b8
 8005514:	200016ba 	.word	0x200016ba
 8005518:	20000fec 	.word	0x20000fec
 800551c:	200016ec 	.word	0x200016ec
 8005520:	40010c00 	.word	0x40010c00
 8005524:	2000170d 	.word	0x2000170d
 8005528:	20001714 	.word	0x20001714
 800552c:	2000170f 	.word	0x2000170f
 8005530:	20001716 	.word	0x20001716
 8005534:	20001720 	.word	0x20001720
 8005538:	200016c4 	.word	0x200016c4
 800553c:	20001710 	.word	0x20001710
 8005540:	200016f8 	.word	0x200016f8
 8005544:	200016c3 	.word	0x200016c3
 8005548:	200016c7 	.word	0x200016c7
 800554c:	20001713 	.word	0x20001713
 8005550:	2000171d 	.word	0x2000171d
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005554:	4b85      	ldr	r3, [pc, #532]	@ (800576c <checkAktifCalisma+0x1554>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d011      	beq.n	8005580 <checkAktifCalisma+0x1368>
 800555c:	4b84      	ldr	r3, [pc, #528]	@ (8005770 <checkAktifCalisma+0x1558>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d10d      	bne.n	8005580 <checkAktifCalisma+0x1368>
 8005564:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005568:	4882      	ldr	r0, [pc, #520]	@ (8005774 <checkAktifCalisma+0x155c>)
 800556a:	f005 f99d 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800556e:	4603      	mov	r3, r0
 8005570:	2b01      	cmp	r3, #1
 8005572:	d105      	bne.n	8005580 <checkAktifCalisma+0x1368>
					basinchatasi=0;
 8005574:	4b7d      	ldr	r3, [pc, #500]	@ (800576c <checkAktifCalisma+0x1554>)
 8005576:	2200      	movs	r2, #0
 8005578:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 800557a:	2003      	movs	r0, #3
 800557c:	f7fe fc42 	bl	8003e04 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8005580:	4b7d      	ldr	r3, [pc, #500]	@ (8005778 <checkAktifCalisma+0x1560>)
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d103      	bne.n	8005590 <checkAktifCalisma+0x1378>
 8005588:	4b7c      	ldr	r3, [pc, #496]	@ (800577c <checkAktifCalisma+0x1564>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d023      	beq.n	80055d8 <checkAktifCalisma+0x13c0>
 8005590:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005594:	487a      	ldr	r0, [pc, #488]	@ (8005780 <checkAktifCalisma+0x1568>)
 8005596:	f005 f987 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800559a:	4603      	mov	r3, r0
 800559c:	2b01      	cmp	r3, #1
 800559e:	d11b      	bne.n	80055d8 <checkAktifCalisma+0x13c0>
 80055a0:	4b78      	ldr	r3, [pc, #480]	@ (8005784 <checkAktifCalisma+0x156c>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d003      	beq.n	80055b0 <checkAktifCalisma+0x1398>
 80055a8:	4b76      	ldr	r3, [pc, #472]	@ (8005784 <checkAktifCalisma+0x156c>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b03      	cmp	r3, #3
 80055ae:	d113      	bne.n	80055d8 <checkAktifCalisma+0x13c0>
 80055b0:	4b75      	ldr	r3, [pc, #468]	@ (8005788 <checkAktifCalisma+0x1570>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	f083 0301 	eor.w	r3, r3, #1
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00c      	beq.n	80055d8 <checkAktifCalisma+0x13c0>
					hataVar=1;
 80055be:	4b73      	ldr	r3, [pc, #460]	@ (800578c <checkAktifCalisma+0x1574>)
 80055c0:	2201      	movs	r2, #1
 80055c2:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 80055c4:	2004      	movs	r0, #4
 80055c6:	f7fb fc1f 	bl	8000e08 <hataKoduLcdGoster>
					hata2EEPROM(4);
 80055ca:	2004      	movs	r0, #4
 80055cc:	f7fb fbc4 	bl	8000d58 <hata2EEPROM>
					katkapisivicihatasi=1;
 80055d0:	4b6d      	ldr	r3, [pc, #436]	@ (8005788 <checkAktifCalisma+0x1570>)
 80055d2:	2201      	movs	r2, #1
 80055d4:	701a      	strb	r2, [r3, #0]
 80055d6:	e01f      	b.n	8005618 <checkAktifCalisma+0x1400>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80055d8:	4b6b      	ldr	r3, [pc, #428]	@ (8005788 <checkAktifCalisma+0x1570>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d01b      	beq.n	8005618 <checkAktifCalisma+0x1400>
 80055e0:	4b6b      	ldr	r3, [pc, #428]	@ (8005790 <checkAktifCalisma+0x1578>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d017      	beq.n	8005618 <checkAktifCalisma+0x1400>
 80055e8:	4b63      	ldr	r3, [pc, #396]	@ (8005778 <checkAktifCalisma+0x1560>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	f083 0301 	eor.w	r3, r3, #1
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d010      	beq.n	8005618 <checkAktifCalisma+0x1400>
 80055f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055fa:	4861      	ldr	r0, [pc, #388]	@ (8005780 <checkAktifCalisma+0x1568>)
 80055fc:	f005 f954 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d108      	bne.n	8005618 <checkAktifCalisma+0x1400>

					katkapisivicihatasi=0;
 8005606:	4b60      	ldr	r3, [pc, #384]	@ (8005788 <checkAktifCalisma+0x1570>)
 8005608:	2200      	movs	r2, #0
 800560a:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 800560c:	4b5b      	ldr	r3, [pc, #364]	@ (800577c <checkAktifCalisma+0x1564>)
 800560e:	2200      	movs	r2, #0
 8005610:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8005612:	2004      	movs	r0, #4
 8005614:	f7fe fbf6 	bl	8003e04 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8005618:	4b57      	ldr	r3, [pc, #348]	@ (8005778 <checkAktifCalisma+0x1560>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d103      	bne.n	8005628 <checkAktifCalisma+0x1410>
 8005620:	4b5c      	ldr	r3, [pc, #368]	@ (8005794 <checkAktifCalisma+0x157c>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d023      	beq.n	8005670 <checkAktifCalisma+0x1458>
 8005628:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800562c:	4854      	ldr	r0, [pc, #336]	@ (8005780 <checkAktifCalisma+0x1568>)
 800562e:	f005 f93b 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005632:	4603      	mov	r3, r0
 8005634:	2b01      	cmp	r3, #1
 8005636:	d11b      	bne.n	8005670 <checkAktifCalisma+0x1458>
 8005638:	4b52      	ldr	r3, [pc, #328]	@ (8005784 <checkAktifCalisma+0x156c>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	2b01      	cmp	r3, #1
 800563e:	d003      	beq.n	8005648 <checkAktifCalisma+0x1430>
 8005640:	4b50      	ldr	r3, [pc, #320]	@ (8005784 <checkAktifCalisma+0x156c>)
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b03      	cmp	r3, #3
 8005646:	d113      	bne.n	8005670 <checkAktifCalisma+0x1458>
 8005648:	4b53      	ldr	r3, [pc, #332]	@ (8005798 <checkAktifCalisma+0x1580>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	f083 0301 	eor.w	r3, r3, #1
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00c      	beq.n	8005670 <checkAktifCalisma+0x1458>

					hataVar=1;
 8005656:	4b4d      	ldr	r3, [pc, #308]	@ (800578c <checkAktifCalisma+0x1574>)
 8005658:	2201      	movs	r2, #1
 800565a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 800565c:	2005      	movs	r0, #5
 800565e:	f7fb fbd3 	bl	8000e08 <hataKoduLcdGoster>
					hata2EEPROM(5);
 8005662:	2005      	movs	r0, #5
 8005664:	f7fb fb78 	bl	8000d58 <hata2EEPROM>
					tablakapisivicihatasi=1;
 8005668:	4b4b      	ldr	r3, [pc, #300]	@ (8005798 <checkAktifCalisma+0x1580>)
 800566a:	2201      	movs	r2, #1
 800566c:	701a      	strb	r2, [r3, #0]
 800566e:	e023      	b.n	80056b8 <checkAktifCalisma+0x14a0>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8005670:	4b49      	ldr	r3, [pc, #292]	@ (8005798 <checkAktifCalisma+0x1580>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d01f      	beq.n	80056b8 <checkAktifCalisma+0x14a0>
 8005678:	4b45      	ldr	r3, [pc, #276]	@ (8005790 <checkAktifCalisma+0x1578>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d01b      	beq.n	80056b8 <checkAktifCalisma+0x14a0>
 8005680:	4b3d      	ldr	r3, [pc, #244]	@ (8005778 <checkAktifCalisma+0x1560>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	f083 0301 	eor.w	r3, r3, #1
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d014      	beq.n	80056b8 <checkAktifCalisma+0x14a0>
 800568e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005692:	483b      	ldr	r0, [pc, #236]	@ (8005780 <checkAktifCalisma+0x1568>)
 8005694:	f005 f908 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d10c      	bne.n	80056b8 <checkAktifCalisma+0x14a0>
 800569e:	4b3c      	ldr	r3, [pc, #240]	@ (8005790 <checkAktifCalisma+0x1578>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d008      	beq.n	80056b8 <checkAktifCalisma+0x14a0>
					tablakapisivicihatasi=0;
 80056a6:	4b3c      	ldr	r3, [pc, #240]	@ (8005798 <checkAktifCalisma+0x1580>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 80056ac:	4b39      	ldr	r3, [pc, #228]	@ (8005794 <checkAktifCalisma+0x157c>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 80056b2:	2005      	movs	r0, #5
 80056b4:	f7fe fba6 	bl	8003e04 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 80056b8:	4b38      	ldr	r3, [pc, #224]	@ (800579c <checkAktifCalisma+0x1584>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d107      	bne.n	80056d0 <checkAktifCalisma+0x14b8>
 80056c0:	4b37      	ldr	r3, [pc, #220]	@ (80057a0 <checkAktifCalisma+0x1588>)
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d103      	bne.n	80056d0 <checkAktifCalisma+0x14b8>
 80056c8:	4b36      	ldr	r3, [pc, #216]	@ (80057a4 <checkAktifCalisma+0x158c>)
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01b      	beq.n	8005708 <checkAktifCalisma+0x14f0>
 80056d0:	4b35      	ldr	r3, [pc, #212]	@ (80057a8 <checkAktifCalisma+0x1590>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	f083 0301 	eor.w	r3, r3, #1
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d014      	beq.n	8005708 <checkAktifCalisma+0x14f0>
				    if(millis-timer4>=makineCalismaTmr) {
 80056de:	4b33      	ldr	r3, [pc, #204]	@ (80057ac <checkAktifCalisma+0x1594>)
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	4b33      	ldr	r3, [pc, #204]	@ (80057b0 <checkAktifCalisma+0x1598>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	4a32      	ldr	r2, [pc, #200]	@ (80057b4 <checkAktifCalisma+0x159c>)
 80056ea:	7812      	ldrb	r2, [r2, #0]
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d30b      	bcc.n	8005708 <checkAktifCalisma+0x14f0>
					  	hataVar=1;
 80056f0:	4b26      	ldr	r3, [pc, #152]	@ (800578c <checkAktifCalisma+0x1574>)
 80056f2:	2201      	movs	r2, #1
 80056f4:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 80056f6:	2006      	movs	r0, #6
 80056f8:	f7fb fb86 	bl	8000e08 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 80056fc:	2006      	movs	r0, #6
 80056fe:	f7fb fb2b 	bl	8000d58 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8005702:	4b29      	ldr	r3, [pc, #164]	@ (80057a8 <checkAktifCalisma+0x1590>)
 8005704:	2201      	movs	r2, #1
 8005706:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8005708:	4b27      	ldr	r3, [pc, #156]	@ (80057a8 <checkAktifCalisma+0x1590>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d013      	beq.n	8005738 <checkAktifCalisma+0x1520>
 8005710:	2108      	movs	r1, #8
 8005712:	481b      	ldr	r0, [pc, #108]	@ (8005780 <checkAktifCalisma+0x1568>)
 8005714:	f005 f8c8 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00c      	beq.n	8005738 <checkAktifCalisma+0x1520>
 800571e:	4b16      	ldr	r3, [pc, #88]	@ (8005778 <checkAktifCalisma+0x1560>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	f083 0301 	eor.w	r3, r3, #1
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d005      	beq.n	8005738 <checkAktifCalisma+0x1520>
					maksimumcalismahatasi=0;
 800572c:	4b1e      	ldr	r3, [pc, #120]	@ (80057a8 <checkAktifCalisma+0x1590>)
 800572e:	2200      	movs	r2, #0
 8005730:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8005732:	2006      	movs	r0, #6
 8005734:	f7fe fb66 	bl	8003e04 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8005738:	4b1f      	ldr	r3, [pc, #124]	@ (80057b8 <checkAktifCalisma+0x15a0>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10b      	bne.n	8005758 <checkAktifCalisma+0x1540>
 8005740:	4b17      	ldr	r3, [pc, #92]	@ (80057a0 <checkAktifCalisma+0x1588>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d107      	bne.n	8005758 <checkAktifCalisma+0x1540>
 8005748:	4b1c      	ldr	r3, [pc, #112]	@ (80057bc <checkAktifCalisma+0x15a4>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d103      	bne.n	8005758 <checkAktifCalisma+0x1540>
 8005750:	4b14      	ldr	r3, [pc, #80]	@ (80057a4 <checkAktifCalisma+0x158c>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d035      	beq.n	80057c4 <checkAktifCalisma+0x15ac>
					makineCalisiyor=0;
 8005758:	4b19      	ldr	r3, [pc, #100]	@ (80057c0 <checkAktifCalisma+0x15a8>)
 800575a:	2200      	movs	r2, #0
 800575c:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 800575e:	4b07      	ldr	r3, [pc, #28]	@ (800577c <checkAktifCalisma+0x1564>)
 8005760:	2201      	movs	r2, #1
 8005762:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8005764:	4b0b      	ldr	r3, [pc, #44]	@ (8005794 <checkAktifCalisma+0x157c>)
 8005766:	2201      	movs	r2, #1
 8005768:	701a      	strb	r2, [r3, #0]
 800576a:	e032      	b.n	80057d2 <checkAktifCalisma+0x15ba>
 800576c:	2000171d 	.word	0x2000171d
 8005770:	200016c3 	.word	0x200016c3
 8005774:	40010c00 	.word	0x40010c00
 8005778:	2000170d 	.word	0x2000170d
 800577c:	20001721 	.word	0x20001721
 8005780:	40010800 	.word	0x40010800
 8005784:	200016c8 	.word	0x200016c8
 8005788:	2000171e 	.word	0x2000171e
 800578c:	20001714 	.word	0x20001714
 8005790:	20001701 	.word	0x20001701
 8005794:	20001722 	.word	0x20001722
 8005798:	2000171f 	.word	0x2000171f
 800579c:	20001713 	.word	0x20001713
 80057a0:	200016f8 	.word	0x200016f8
 80057a4:	200016f7 	.word	0x200016f7
 80057a8:	2000170e 	.word	0x2000170e
 80057ac:	20001698 	.word	0x20001698
 80057b0:	200016ac 	.word	0x200016ac
 80057b4:	200016d8 	.word	0x200016d8
 80057b8:	200016f5 	.word	0x200016f5
 80057bc:	200016f6 	.word	0x200016f6
 80057c0:	20001715 	.word	0x20001715
				} else {
					makineCalisiyor=1;
 80057c4:	4b3a      	ldr	r3, [pc, #232]	@ (80058b0 <checkAktifCalisma+0x1698>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 80057ca:	4b3a      	ldr	r3, [pc, #232]	@ (80058b4 <checkAktifCalisma+0x169c>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a3a      	ldr	r2, [pc, #232]	@ (80058b8 <checkAktifCalisma+0x16a0>)
 80057d0:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80057d2:	4b3a      	ldr	r3, [pc, #232]	@ (80058bc <checkAktifCalisma+0x16a4>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d02f      	beq.n	800583a <checkAktifCalisma+0x1622>
 80057da:	4b39      	ldr	r3, [pc, #228]	@ (80058c0 <checkAktifCalisma+0x16a8>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	f083 0301 	eor.w	r3, r3, #1
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d028      	beq.n	800583a <checkAktifCalisma+0x1622>
 80057e8:	4b36      	ldr	r3, [pc, #216]	@ (80058c4 <checkAktifCalisma+0x16ac>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	f083 0301 	eor.w	r3, r3, #1
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d021      	beq.n	800583a <checkAktifCalisma+0x1622>
 80057f6:	4b34      	ldr	r3, [pc, #208]	@ (80058c8 <checkAktifCalisma+0x16b0>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	f083 0301 	eor.w	r3, r3, #1
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d01a      	beq.n	800583a <checkAktifCalisma+0x1622>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8005804:	4b31      	ldr	r3, [pc, #196]	@ (80058cc <checkAktifCalisma+0x16b4>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	f083 0301 	eor.w	r3, r3, #1
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d013      	beq.n	800583a <checkAktifCalisma+0x1622>
 8005812:	4b2f      	ldr	r3, [pc, #188]	@ (80058d0 <checkAktifCalisma+0x16b8>)
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	f083 0301 	eor.w	r3, r3, #1
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00c      	beq.n	800583a <checkAktifCalisma+0x1622>
 8005820:	4b2c      	ldr	r3, [pc, #176]	@ (80058d4 <checkAktifCalisma+0x16bc>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	f083 0301 	eor.w	r3, r3, #1
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d005      	beq.n	800583a <checkAktifCalisma+0x1622>

					hataVar=0;
 800582e:	4b23      	ldr	r3, [pc, #140]	@ (80058bc <checkAktifCalisma+0x16a4>)
 8005830:	2200      	movs	r2, #0
 8005832:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8005834:	2007      	movs	r0, #7
 8005836:	f7fe fae5 	bl	8003e04 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 800583a:	4b20      	ldr	r3, [pc, #128]	@ (80058bc <checkAktifCalisma+0x16a4>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d02a      	beq.n	8005898 <checkAktifCalisma+0x1680>
 8005842:	4b1f      	ldr	r3, [pc, #124]	@ (80058c0 <checkAktifCalisma+0x16a8>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	f083 0301 	eor.w	r3, r3, #1
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d023      	beq.n	8005898 <checkAktifCalisma+0x1680>
 8005850:	4b1c      	ldr	r3, [pc, #112]	@ (80058c4 <checkAktifCalisma+0x16ac>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d01f      	beq.n	8005898 <checkAktifCalisma+0x1680>
 8005858:	4b1b      	ldr	r3, [pc, #108]	@ (80058c8 <checkAktifCalisma+0x16b0>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	f083 0301 	eor.w	r3, r3, #1
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d018      	beq.n	8005898 <checkAktifCalisma+0x1680>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8005866:	4b19      	ldr	r3, [pc, #100]	@ (80058cc <checkAktifCalisma+0x16b4>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	f083 0301 	eor.w	r3, r3, #1
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	d011      	beq.n	8005898 <checkAktifCalisma+0x1680>
 8005874:	4b16      	ldr	r3, [pc, #88]	@ (80058d0 <checkAktifCalisma+0x16b8>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	f083 0301 	eor.w	r3, r3, #1
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <checkAktifCalisma+0x1680>
 8005882:	4b14      	ldr	r3, [pc, #80]	@ (80058d4 <checkAktifCalisma+0x16bc>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	f083 0301 	eor.w	r3, r3, #1
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <checkAktifCalisma+0x1680>
				{
					EmnCerHataMakYukariCalis=1;
 8005890:	4b11      	ldr	r3, [pc, #68]	@ (80058d8 <checkAktifCalisma+0x16c0>)
 8005892:	2201      	movs	r2, #1
 8005894:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 8005896:	e009      	b.n	80058ac <checkAktifCalisma+0x1694>
				else if(emniyetCercevesihatasi==0)
 8005898:	4b0a      	ldr	r3, [pc, #40]	@ (80058c4 <checkAktifCalisma+0x16ac>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	f083 0301 	eor.w	r3, r3, #1
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <checkAktifCalisma+0x1694>
					EmnCerHataMakYukariCalis=0;
 80058a6:	4b0c      	ldr	r3, [pc, #48]	@ (80058d8 <checkAktifCalisma+0x16c0>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	701a      	strb	r2, [r3, #0]
}
 80058ac:	bf00      	nop
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	20001715 	.word	0x20001715
 80058b4:	20001698 	.word	0x20001698
 80058b8:	200016ac 	.word	0x200016ac
 80058bc:	20001714 	.word	0x20001714
 80058c0:	2000170f 	.word	0x2000170f
 80058c4:	20001710 	.word	0x20001710
 80058c8:	2000171d 	.word	0x2000171d
 80058cc:	2000171e 	.word	0x2000171e
 80058d0:	2000171f 	.word	0x2000171f
 80058d4:	2000170e 	.word	0x2000170e
 80058d8:	20001723 	.word	0x20001723

080058dc <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80058e0:	4b8b      	ldr	r3, [pc, #556]	@ (8005b10 <checkDemoModCalisma+0x234>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	f040 81c4 	bne.w	8005c72 <checkDemoModCalisma+0x396>
 80058ea:	4b8a      	ldr	r3, [pc, #552]	@ (8005b14 <checkDemoModCalisma+0x238>)
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 81bf 	beq.w	8005c72 <checkDemoModCalisma+0x396>
 80058f4:	4b88      	ldr	r3, [pc, #544]	@ (8005b18 <checkDemoModCalisma+0x23c>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f040 81ba 	bne.w	8005c72 <checkDemoModCalisma+0x396>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80058fe:	2102      	movs	r1, #2
 8005900:	4886      	ldr	r0, [pc, #536]	@ (8005b1c <checkDemoModCalisma+0x240>)
 8005902:	f004 ffd1 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d11d      	bne.n	8005948 <checkDemoModCalisma+0x6c>
						&& (demoAsagiCalis==0)
 800590c:	4b84      	ldr	r3, [pc, #528]	@ (8005b20 <checkDemoModCalisma+0x244>)
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	f083 0301 	eor.w	r3, r3, #1
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d016      	beq.n	8005948 <checkDemoModCalisma+0x6c>
						&& (demoDevYukari==0)
 800591a:	4b82      	ldr	r3, [pc, #520]	@ (8005b24 <checkDemoModCalisma+0x248>)
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	f083 0301 	eor.w	r3, r3, #1
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00f      	beq.n	8005948 <checkDemoModCalisma+0x6c>
						&& (demoDevAsagi==0)) {
 8005928:	4b7f      	ldr	r3, [pc, #508]	@ (8005b28 <checkDemoModCalisma+0x24c>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	f083 0301 	eor.w	r3, r3, #1
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d008      	beq.n	8005948 <checkDemoModCalisma+0x6c>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005936:	2201      	movs	r2, #1
 8005938:	2104      	movs	r1, #4
 800593a:	487c      	ldr	r0, [pc, #496]	@ (8005b2c <checkDemoModCalisma+0x250>)
 800593c:	f004 ffcb 	bl	800a8d6 <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8005940:	4b7b      	ldr	r3, [pc, #492]	@ (8005b30 <checkDemoModCalisma+0x254>)
 8005942:	2201      	movs	r2, #1
 8005944:	701a      	strb	r2, [r3, #0]
 8005946:	e00e      	b.n	8005966 <checkDemoModCalisma+0x8a>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005948:	2102      	movs	r1, #2
 800594a:	4874      	ldr	r0, [pc, #464]	@ (8005b1c <checkDemoModCalisma+0x240>)
 800594c:	f004 ffac 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005950:	4603      	mov	r3, r0
 8005952:	2b01      	cmp	r3, #1
 8005954:	d107      	bne.n	8005966 <checkDemoModCalisma+0x8a>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005956:	2200      	movs	r2, #0
 8005958:	2104      	movs	r1, #4
 800595a:	4874      	ldr	r0, [pc, #464]	@ (8005b2c <checkDemoModCalisma+0x250>)
 800595c:	f004 ffbb 	bl	800a8d6 <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8005960:	4b73      	ldr	r3, [pc, #460]	@ (8005b30 <checkDemoModCalisma+0x254>)
 8005962:	2200      	movs	r2, #0
 8005964:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8005966:	4b72      	ldr	r3, [pc, #456]	@ (8005b30 <checkDemoModCalisma+0x254>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10b      	bne.n	8005986 <checkDemoModCalisma+0xaa>
 800596e:	4b6d      	ldr	r3, [pc, #436]	@ (8005b24 <checkDemoModCalisma+0x248>)
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d107      	bne.n	8005986 <checkDemoModCalisma+0xaa>
 8005976:	4b6c      	ldr	r3, [pc, #432]	@ (8005b28 <checkDemoModCalisma+0x24c>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d103      	bne.n	8005986 <checkDemoModCalisma+0xaa>
 800597e:	4b68      	ldr	r3, [pc, #416]	@ (8005b20 <checkDemoModCalisma+0x244>)
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00c      	beq.n	80059a0 <checkDemoModCalisma+0xc4>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005986:	2201      	movs	r2, #1
 8005988:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800598c:	4867      	ldr	r0, [pc, #412]	@ (8005b2c <checkDemoModCalisma+0x250>)
 800598e:	f004 ffa2 	bl	800a8d6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005992:	2201      	movs	r2, #1
 8005994:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005998:	4864      	ldr	r0, [pc, #400]	@ (8005b2c <checkDemoModCalisma+0x250>)
 800599a:	f004 ff9c 	bl	800a8d6 <HAL_GPIO_WritePin>
 800599e:	e00b      	b.n	80059b8 <checkDemoModCalisma+0xdc>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80059a0:	2200      	movs	r2, #0
 80059a2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80059a6:	4861      	ldr	r0, [pc, #388]	@ (8005b2c <checkDemoModCalisma+0x250>)
 80059a8:	f004 ff95 	bl	800a8d6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80059ac:	2200      	movs	r2, #0
 80059ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80059b2:	485e      	ldr	r0, [pc, #376]	@ (8005b2c <checkDemoModCalisma+0x250>)
 80059b4:	f004 ff8f 	bl	800a8d6 <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80059b8:	2102      	movs	r1, #2
 80059ba:	4858      	ldr	r0, [pc, #352]	@ (8005b1c <checkDemoModCalisma+0x240>)
 80059bc:	f004 ff74 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d10d      	bne.n	80059e2 <checkDemoModCalisma+0x106>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80059c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80059ca:	4854      	ldr	r0, [pc, #336]	@ (8005b1c <checkDemoModCalisma+0x240>)
 80059cc:	f004 ff6c 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d105      	bne.n	80059e2 <checkDemoModCalisma+0x106>
						&& (demoYukariCalis==0)
 80059d6:	4b56      	ldr	r3, [pc, #344]	@ (8005b30 <checkDemoModCalisma+0x254>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	f083 0301 	eor.w	r3, r3, #1
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80059e2:	2102      	movs	r1, #2
 80059e4:	484d      	ldr	r0, [pc, #308]	@ (8005b1c <checkDemoModCalisma+0x240>)
 80059e6:	f004 ff5f 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d125      	bne.n	8005a3c <checkDemoModCalisma+0x160>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80059f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80059f4:	4849      	ldr	r0, [pc, #292]	@ (8005b1c <checkDemoModCalisma+0x240>)
 80059f6:	f004 ff57 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d11d      	bne.n	8005a3c <checkDemoModCalisma+0x160>
						&&(demoYukariCalis==0)
 8005a00:	4b4b      	ldr	r3, [pc, #300]	@ (8005b30 <checkDemoModCalisma+0x254>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	f083 0301 	eor.w	r3, r3, #1
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d016      	beq.n	8005a3c <checkDemoModCalisma+0x160>
						&&(demoAsagiCalis==0)
 8005a0e:	4b44      	ldr	r3, [pc, #272]	@ (8005b20 <checkDemoModCalisma+0x244>)
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	f083 0301 	eor.w	r3, r3, #1
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00f      	beq.n	8005a3c <checkDemoModCalisma+0x160>
						&& (demoDevAsagi==0)) {
 8005a1c:	4b42      	ldr	r3, [pc, #264]	@ (8005b28 <checkDemoModCalisma+0x24c>)
 8005a1e:	781b      	ldrb	r3, [r3, #0]
 8005a20:	f083 0301 	eor.w	r3, r3, #1
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d008      	beq.n	8005a3c <checkDemoModCalisma+0x160>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	2120      	movs	r1, #32
 8005a2e:	483b      	ldr	r0, [pc, #236]	@ (8005b1c <checkDemoModCalisma+0x240>)
 8005a30:	f004 ff51 	bl	800a8d6 <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8005a34:	4b3b      	ldr	r3, [pc, #236]	@ (8005b24 <checkDemoModCalisma+0x248>)
 8005a36:	2201      	movs	r2, #1
 8005a38:	701a      	strb	r2, [r3, #0]
 8005a3a:	e007      	b.n	8005a4c <checkDemoModCalisma+0x170>
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2120      	movs	r1, #32
 8005a40:	4836      	ldr	r0, [pc, #216]	@ (8005b1c <checkDemoModCalisma+0x240>)
 8005a42:	f004 ff48 	bl	800a8d6 <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8005a46:	4b37      	ldr	r3, [pc, #220]	@ (8005b24 <checkDemoModCalisma+0x248>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005a4c:	2102      	movs	r1, #2
 8005a4e:	4833      	ldr	r0, [pc, #204]	@ (8005b1c <checkDemoModCalisma+0x240>)
 8005a50:	f004 ff2a 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d125      	bne.n	8005aa6 <checkDemoModCalisma+0x1ca>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8005a5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005a5e:	482f      	ldr	r0, [pc, #188]	@ (8005b1c <checkDemoModCalisma+0x240>)
 8005a60:	f004 ff22 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d11d      	bne.n	8005aa6 <checkDemoModCalisma+0x1ca>
						&&(demoYukariCalis==0)
 8005a6a:	4b31      	ldr	r3, [pc, #196]	@ (8005b30 <checkDemoModCalisma+0x254>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	f083 0301 	eor.w	r3, r3, #1
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d016      	beq.n	8005aa6 <checkDemoModCalisma+0x1ca>
						&&(demoDevYukari==0)
 8005a78:	4b2a      	ldr	r3, [pc, #168]	@ (8005b24 <checkDemoModCalisma+0x248>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	f083 0301 	eor.w	r3, r3, #1
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00f      	beq.n	8005aa6 <checkDemoModCalisma+0x1ca>
						&& (demoAsagiCalis==0)) {
 8005a86:	4b26      	ldr	r3, [pc, #152]	@ (8005b20 <checkDemoModCalisma+0x244>)
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	f083 0301 	eor.w	r3, r3, #1
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d008      	beq.n	8005aa6 <checkDemoModCalisma+0x1ca>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005a94:	2201      	movs	r2, #1
 8005a96:	2110      	movs	r1, #16
 8005a98:	4820      	ldr	r0, [pc, #128]	@ (8005b1c <checkDemoModCalisma+0x240>)
 8005a9a:	f004 ff1c 	bl	800a8d6 <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8005a9e:	4b22      	ldr	r3, [pc, #136]	@ (8005b28 <checkDemoModCalisma+0x24c>)
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	701a      	strb	r2, [r3, #0]
 8005aa4:	e007      	b.n	8005ab6 <checkDemoModCalisma+0x1da>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2110      	movs	r1, #16
 8005aaa:	481c      	ldr	r0, [pc, #112]	@ (8005b1c <checkDemoModCalisma+0x240>)
 8005aac:	f004 ff13 	bl	800a8d6 <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8005ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8005b28 <checkDemoModCalisma+0x24c>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005ab6:	2104      	movs	r1, #4
 8005ab8:	4818      	ldr	r0, [pc, #96]	@ (8005b1c <checkDemoModCalisma+0x240>)
 8005aba:	f004 fef5 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d139      	bne.n	8005b38 <checkDemoModCalisma+0x25c>
						&& (demoYukariCalis==0)
 8005ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8005b30 <checkDemoModCalisma+0x254>)
 8005ac6:	781b      	ldrb	r3, [r3, #0]
 8005ac8:	f083 0301 	eor.w	r3, r3, #1
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d032      	beq.n	8005b38 <checkDemoModCalisma+0x25c>
						&& (demoDevAsagi==0)
 8005ad2:	4b15      	ldr	r3, [pc, #84]	@ (8005b28 <checkDemoModCalisma+0x24c>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	f083 0301 	eor.w	r3, r3, #1
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d02b      	beq.n	8005b38 <checkDemoModCalisma+0x25c>
						&& (demoDevYukari==0)) {
 8005ae0:	4b10      	ldr	r3, [pc, #64]	@ (8005b24 <checkDemoModCalisma+0x248>)
 8005ae2:	781b      	ldrb	r3, [r3, #0]
 8005ae4:	f083 0301 	eor.w	r3, r3, #1
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d024      	beq.n	8005b38 <checkDemoModCalisma+0x25c>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005aee:	2201      	movs	r2, #1
 8005af0:	2102      	movs	r1, #2
 8005af2:	480e      	ldr	r0, [pc, #56]	@ (8005b2c <checkDemoModCalisma+0x250>)
 8005af4:	f004 feef 	bl	800a8d6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005af8:	2201      	movs	r2, #1
 8005afa:	2101      	movs	r1, #1
 8005afc:	480b      	ldr	r0, [pc, #44]	@ (8005b2c <checkDemoModCalisma+0x250>)
 8005afe:	f004 feea 	bl	800a8d6 <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8005b02:	4b07      	ldr	r3, [pc, #28]	@ (8005b20 <checkDemoModCalisma+0x244>)
 8005b04:	2201      	movs	r2, #1
 8005b06:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 8005b08:	4b0a      	ldr	r3, [pc, #40]	@ (8005b34 <checkDemoModCalisma+0x258>)
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	701a      	strb	r2, [r3, #0]
 8005b0e:	e027      	b.n	8005b60 <checkDemoModCalisma+0x284>
 8005b10:	200016de 	.word	0x200016de
 8005b14:	20001711 	.word	0x20001711
 8005b18:	200016dd 	.word	0x200016dd
 8005b1c:	40011000 	.word	0x40011000
 8005b20:	20001718 	.word	0x20001718
 8005b24:	20001719 	.word	0x20001719
 8005b28:	2000171a 	.word	0x2000171a
 8005b2c:	40010c00 	.word	0x40010c00
 8005b30:	20001717 	.word	0x20001717
 8005b34:	200016fe 	.word	0x200016fe
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8005b38:	2104      	movs	r1, #4
 8005b3a:	486d      	ldr	r0, [pc, #436]	@ (8005cf0 <checkDemoModCalisma+0x414>)
 8005b3c:	f004 feb4 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d10c      	bne.n	8005b60 <checkDemoModCalisma+0x284>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005b46:	2200      	movs	r2, #0
 8005b48:	2102      	movs	r1, #2
 8005b4a:	486a      	ldr	r0, [pc, #424]	@ (8005cf4 <checkDemoModCalisma+0x418>)
 8005b4c:	f004 fec3 	bl	800a8d6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005b50:	2200      	movs	r2, #0
 8005b52:	2101      	movs	r1, #1
 8005b54:	4867      	ldr	r0, [pc, #412]	@ (8005cf4 <checkDemoModCalisma+0x418>)
 8005b56:	f004 febe 	bl	800a8d6 <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8005b5a:	4b67      	ldr	r3, [pc, #412]	@ (8005cf8 <checkDemoModCalisma+0x41c>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8005b60:	2104      	movs	r1, #4
 8005b62:	4863      	ldr	r0, [pc, #396]	@ (8005cf0 <checkDemoModCalisma+0x414>)
 8005b64:	f004 fea0 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d10d      	bne.n	8005b8a <checkDemoModCalisma+0x2ae>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005b6e:	2201      	movs	r2, #1
 8005b70:	2180      	movs	r1, #128	@ 0x80
 8005b72:	4862      	ldr	r0, [pc, #392]	@ (8005cfc <checkDemoModCalisma+0x420>)
 8005b74:	f004 feaf 	bl	800a8d6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005b78:	2201      	movs	r2, #1
 8005b7a:	2120      	movs	r1, #32
 8005b7c:	485f      	ldr	r0, [pc, #380]	@ (8005cfc <checkDemoModCalisma+0x420>)
 8005b7e:	f004 feaa 	bl	800a8d6 <HAL_GPIO_WritePin>
					timer3 = millis;
 8005b82:	4b5f      	ldr	r3, [pc, #380]	@ (8005d00 <checkDemoModCalisma+0x424>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a5f      	ldr	r2, [pc, #380]	@ (8005d04 <checkDemoModCalisma+0x428>)
 8005b88:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005b8a:	4b5d      	ldr	r3, [pc, #372]	@ (8005d00 <checkDemoModCalisma+0x424>)
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	4b5d      	ldr	r3, [pc, #372]	@ (8005d04 <checkDemoModCalisma+0x428>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	d909      	bls.n	8005bac <checkDemoModCalisma+0x2d0>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005b98:	2200      	movs	r2, #0
 8005b9a:	2180      	movs	r1, #128	@ 0x80
 8005b9c:	4857      	ldr	r0, [pc, #348]	@ (8005cfc <checkDemoModCalisma+0x420>)
 8005b9e:	f004 fe9a 	bl	800a8d6 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2120      	movs	r1, #32
 8005ba6:	4855      	ldr	r0, [pc, #340]	@ (8005cfc <checkDemoModCalisma+0x420>)
 8005ba8:	f004 fe95 	bl	800a8d6 <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005bac:	2102      	movs	r1, #2
 8005bae:	4850      	ldr	r0, [pc, #320]	@ (8005cf0 <checkDemoModCalisma+0x414>)
 8005bb0:	f004 fe7a 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d108      	bne.n	8005bcc <checkDemoModCalisma+0x2f0>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005bba:	2201      	movs	r2, #1
 8005bbc:	2140      	movs	r1, #64	@ 0x40
 8005bbe:	484f      	ldr	r0, [pc, #316]	@ (8005cfc <checkDemoModCalisma+0x420>)
 8005bc0:	f004 fe89 	bl	800a8d6 <HAL_GPIO_WritePin>
					timer3 = millis;
 8005bc4:	4b4e      	ldr	r3, [pc, #312]	@ (8005d00 <checkDemoModCalisma+0x424>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a4e      	ldr	r2, [pc, #312]	@ (8005d04 <checkDemoModCalisma+0x428>)
 8005bca:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005bcc:	4b4c      	ldr	r3, [pc, #304]	@ (8005d00 <checkDemoModCalisma+0x424>)
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	4b4c      	ldr	r3, [pc, #304]	@ (8005d04 <checkDemoModCalisma+0x428>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	1ad3      	subs	r3, r2, r3
 8005bd6:	2b04      	cmp	r3, #4
 8005bd8:	d904      	bls.n	8005be4 <checkDemoModCalisma+0x308>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2140      	movs	r1, #64	@ 0x40
 8005bde:	4847      	ldr	r0, [pc, #284]	@ (8005cfc <checkDemoModCalisma+0x420>)
 8005be0:	f004 fe79 	bl	800a8d6 <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8005be4:	4b48      	ldr	r3, [pc, #288]	@ (8005d08 <checkDemoModCalisma+0x42c>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d024      	beq.n	8005c36 <checkDemoModCalisma+0x35a>
 8005bec:	4b47      	ldr	r3, [pc, #284]	@ (8005d0c <checkDemoModCalisma+0x430>)
 8005bee:	781b      	ldrb	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d020      	beq.n	8005c36 <checkDemoModCalisma+0x35a>

					calismaSayisiDemo++;
 8005bf4:	4b46      	ldr	r3, [pc, #280]	@ (8005d10 <checkDemoModCalisma+0x434>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	4b44      	ldr	r3, [pc, #272]	@ (8005d10 <checkDemoModCalisma+0x434>)
 8005bfe:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8005c00:	4b44      	ldr	r3, [pc, #272]	@ (8005d14 <checkDemoModCalisma+0x438>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	2bff      	cmp	r3, #255	@ 0xff
 8005c06:	d108      	bne.n	8005c1a <checkDemoModCalisma+0x33e>
							calismaSayisi = 0;
 8005c08:	4b42      	ldr	r3, [pc, #264]	@ (8005d14 <checkDemoModCalisma+0x438>)
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	701a      	strb	r2, [r3, #0]
							calismaCount++;
 8005c0e:	4b42      	ldr	r3, [pc, #264]	@ (8005d18 <checkDemoModCalisma+0x43c>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	3301      	adds	r3, #1
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	4b40      	ldr	r3, [pc, #256]	@ (8005d18 <checkDemoModCalisma+0x43c>)
 8005c18:	701a      	strb	r2, [r3, #0]
				}
					eepromData[28] = calismaSayisiDemo;
 8005c1a:	4b3d      	ldr	r3, [pc, #244]	@ (8005d10 <checkDemoModCalisma+0x434>)
 8005c1c:	781a      	ldrb	r2, [r3, #0]
 8005c1e:	4b3f      	ldr	r3, [pc, #252]	@ (8005d1c <checkDemoModCalisma+0x440>)
 8005c20:	771a      	strb	r2, [r3, #28]
					eepromData[30] = calismaCountDemo;
 8005c22:	4b3f      	ldr	r3, [pc, #252]	@ (8005d20 <checkDemoModCalisma+0x444>)
 8005c24:	781a      	ldrb	r2, [r3, #0]
 8005c26:	4b3d      	ldr	r3, [pc, #244]	@ (8005d1c <checkDemoModCalisma+0x440>)
 8005c28:	779a      	strb	r2, [r3, #30]

					hafizaYaz=1;
 8005c2a:	4b3e      	ldr	r3, [pc, #248]	@ (8005d24 <checkDemoModCalisma+0x448>)
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 8005c30:	4b36      	ldr	r3, [pc, #216]	@ (8005d0c <checkDemoModCalisma+0x430>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8005c36:	4b3c      	ldr	r3, [pc, #240]	@ (8005d28 <checkDemoModCalisma+0x44c>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d156      	bne.n	8005cec <checkDemoModCalisma+0x410>
					lcd_print(2,1,"Cycle     ");
 8005c3e:	4a3b      	ldr	r2, [pc, #236]	@ (8005d2c <checkDemoModCalisma+0x450>)
 8005c40:	2101      	movs	r1, #1
 8005c42:	2002      	movs	r0, #2
 8005c44:	f003 fadc 	bl	8009200 <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8005c48:	4a39      	ldr	r2, [pc, #228]	@ (8005d30 <checkDemoModCalisma+0x454>)
 8005c4a:	2101      	movs	r1, #1
 8005c4c:	2001      	movs	r0, #1
 8005c4e:	f003 fad7 	bl	8009200 <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 8005c52:	4b2f      	ldr	r3, [pc, #188]	@ (8005d10 <checkDemoModCalisma+0x434>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	220a      	movs	r2, #10
 8005c58:	4936      	ldr	r1, [pc, #216]	@ (8005d34 <checkDemoModCalisma+0x458>)
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f008 f99c 	bl	800df98 <itoa>
					lcd_print(2,11,snum);
 8005c60:	4a34      	ldr	r2, [pc, #208]	@ (8005d34 <checkDemoModCalisma+0x458>)
 8005c62:	210b      	movs	r1, #11
 8005c64:	2002      	movs	r0, #2
 8005c66:	f003 facb 	bl	8009200 <lcd_print>
					mesajYazildi=1;
 8005c6a:	4b33      	ldr	r3, [pc, #204]	@ (8005d38 <checkDemoModCalisma+0x45c>)
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8005c70:	e03c      	b.n	8005cec <checkDemoModCalisma+0x410>
				}
			} else if(demoMode==1 || menuGiris==1) {
 8005c72:	4b32      	ldr	r3, [pc, #200]	@ (8005d3c <checkDemoModCalisma+0x460>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d003      	beq.n	8005c82 <checkDemoModCalisma+0x3a6>
 8005c7a:	4b2b      	ldr	r3, [pc, #172]	@ (8005d28 <checkDemoModCalisma+0x44c>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d134      	bne.n	8005cec <checkDemoModCalisma+0x410>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005c82:	2200      	movs	r2, #0
 8005c84:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005c88:	481a      	ldr	r0, [pc, #104]	@ (8005cf4 <checkDemoModCalisma+0x418>)
 8005c8a:	f004 fe24 	bl	800a8d6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c94:	4817      	ldr	r0, [pc, #92]	@ (8005cf4 <checkDemoModCalisma+0x418>)
 8005c96:	f004 fe1e 	bl	800a8d6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2104      	movs	r1, #4
 8005c9e:	4815      	ldr	r0, [pc, #84]	@ (8005cf4 <checkDemoModCalisma+0x418>)
 8005ca0:	f004 fe19 	bl	800a8d6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2102      	movs	r1, #2
 8005ca8:	4812      	ldr	r0, [pc, #72]	@ (8005cf4 <checkDemoModCalisma+0x418>)
 8005caa:	f004 fe14 	bl	800a8d6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	4810      	ldr	r0, [pc, #64]	@ (8005cf4 <checkDemoModCalisma+0x418>)
 8005cb4:	f004 fe0f 	bl	800a8d6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005cb8:	2200      	movs	r2, #0
 8005cba:	2120      	movs	r1, #32
 8005cbc:	480c      	ldr	r0, [pc, #48]	@ (8005cf0 <checkDemoModCalisma+0x414>)
 8005cbe:	f004 fe0a 	bl	800a8d6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	2110      	movs	r1, #16
 8005cc6:	480a      	ldr	r0, [pc, #40]	@ (8005cf0 <checkDemoModCalisma+0x414>)
 8005cc8:	f004 fe05 	bl	800a8d6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2180      	movs	r1, #128	@ 0x80
 8005cd0:	480a      	ldr	r0, [pc, #40]	@ (8005cfc <checkDemoModCalisma+0x420>)
 8005cd2:	f004 fe00 	bl	800a8d6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	2140      	movs	r1, #64	@ 0x40
 8005cda:	4808      	ldr	r0, [pc, #32]	@ (8005cfc <checkDemoModCalisma+0x420>)
 8005cdc:	f004 fdfb 	bl	800a8d6 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2120      	movs	r1, #32
 8005ce4:	4805      	ldr	r0, [pc, #20]	@ (8005cfc <checkDemoModCalisma+0x420>)
 8005ce6:	f004 fdf6 	bl	800a8d6 <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8005cea:	e7ff      	b.n	8005cec <checkDemoModCalisma+0x410>
 8005cec:	bf00      	nop
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40011000 	.word	0x40011000
 8005cf4:	40010c00 	.word	0x40010c00
 8005cf8:	20001718 	.word	0x20001718
 8005cfc:	40010800 	.word	0x40010800
 8005d00:	20001698 	.word	0x20001698
 8005d04:	200016a8 	.word	0x200016a8
 8005d08:	20001717 	.word	0x20001717
 8005d0c:	200016fe 	.word	0x200016fe
 8005d10:	200016b9 	.word	0x200016b9
 8005d14:	200016b8 	.word	0x200016b8
 8005d18:	200016ba 	.word	0x200016ba
 8005d1c:	20000fec 	.word	0x20000fec
 8005d20:	200016bb 	.word	0x200016bb
 8005d24:	200016ec 	.word	0x200016ec
 8005d28:	200016dd 	.word	0x200016dd
 8005d2c:	0800ede8 	.word	0x0800ede8
 8005d30:	0800edf4 	.word	0x0800edf4
 8005d34:	2000105c 	.word	0x2000105c
 8005d38:	200016f4 	.word	0x200016f4
 8005d3c:	200016de 	.word	0x200016de

08005d40 <mainLoop>:

void mainLoop() {
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
	while(1) {
		checkLCDBacklight();
 8005d44:	f7fe f8b6 	bl	8003eb4 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8005d48:	2101      	movs	r1, #1
 8005d4a:	488b      	ldr	r0, [pc, #556]	@ (8005f78 <mainLoop+0x238>)
 8005d4c:	f004 fdac 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d136      	bne.n	8005dc4 <mainLoop+0x84>
 8005d56:	2108      	movs	r1, #8
 8005d58:	4888      	ldr	r0, [pc, #544]	@ (8005f7c <mainLoop+0x23c>)
 8005d5a:	f004 fda5 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d12f      	bne.n	8005dc4 <mainLoop+0x84>
 8005d64:	2102      	movs	r1, #2
 8005d66:	4884      	ldr	r0, [pc, #528]	@ (8005f78 <mainLoop+0x238>)
 8005d68:	f004 fd9e 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d128      	bne.n	8005dc4 <mainLoop+0x84>
 8005d72:	2104      	movs	r1, #4
 8005d74:	4880      	ldr	r0, [pc, #512]	@ (8005f78 <mainLoop+0x238>)
 8005d76:	f004 fd97 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d121      	bne.n	8005dc4 <mainLoop+0x84>
 8005d80:	2108      	movs	r1, #8
 8005d82:	487d      	ldr	r0, [pc, #500]	@ (8005f78 <mainLoop+0x238>)
 8005d84:	f004 fd90 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d11a      	bne.n	8005dc4 <mainLoop+0x84>
 8005d8e:	2180      	movs	r1, #128	@ 0x80
 8005d90:	487a      	ldr	r0, [pc, #488]	@ (8005f7c <mainLoop+0x23c>)
 8005d92:	f004 fd89 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d113      	bne.n	8005dc4 <mainLoop+0x84>
 8005d9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005da0:	4876      	ldr	r0, [pc, #472]	@ (8005f7c <mainLoop+0x23c>)
 8005da2:	f004 fd81 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d10b      	bne.n	8005dc4 <mainLoop+0x84>
 8005dac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005db0:	4872      	ldr	r0, [pc, #456]	@ (8005f7c <mainLoop+0x23c>)
 8005db2:	f004 fd79 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d103      	bne.n	8005dc4 <mainLoop+0x84>
			butonKontrol=0;
 8005dbc:	4b70      	ldr	r3, [pc, #448]	@ (8005f80 <mainLoop+0x240>)
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	e003      	b.n	8005dcc <mainLoop+0x8c>
		} else {
			backLightTimer = millis;
 8005dc4:	4b6f      	ldr	r3, [pc, #444]	@ (8005f84 <mainLoop+0x244>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a6f      	ldr	r2, [pc, #444]	@ (8005f88 <mainLoop+0x248>)
 8005dca:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8005dcc:	f7fe f924 	bl	8004018 <buttonCheck>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d103      	bne.n	8005dde <mainLoop+0x9e>
			backLightTimer = millis;
 8005dd6:	4b6b      	ldr	r3, [pc, #428]	@ (8005f84 <mainLoop+0x244>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a6b      	ldr	r2, [pc, #428]	@ (8005f88 <mainLoop+0x248>)
 8005ddc:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz == 1) {
 8005dde:	4b6b      	ldr	r3, [pc, #428]	@ (8005f8c <mainLoop+0x24c>)
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d005      	beq.n	8005df2 <mainLoop+0xb2>
			hafizaYaz = 0;
 8005de6:	4b69      	ldr	r3, [pc, #420]	@ (8005f8c <mainLoop+0x24c>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	701a      	strb	r2, [r3, #0]
			saveEEPROM(1);
 8005dec:	2001      	movs	r0, #1
 8005dee:	f7fa fc59 	bl	80006a4 <saveEEPROM>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8005df2:	4b67      	ldr	r3, [pc, #412]	@ (8005f90 <mainLoop+0x250>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	f083 0301 	eor.w	r3, r3, #1
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d043      	beq.n	8005e88 <mainLoop+0x148>
 8005e00:	4864      	ldr	r0, [pc, #400]	@ (8005f94 <mainLoop+0x254>)
 8005e02:	f005 fb6d 	bl	800b4e0 <HAL_I2C_GetState>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b20      	cmp	r3, #32
 8005e0a:	d13d      	bne.n	8005e88 <mainLoop+0x148>
		  if(ilkOkuma==0) {
 8005e0c:	4b62      	ldr	r3, [pc, #392]	@ (8005f98 <mainLoop+0x258>)
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	f083 0301 	eor.w	r3, r3, #1
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d028      	beq.n	8005e6c <mainLoop+0x12c>
			  lcd_print(1, 1, eepromTextGN);
 8005e1a:	4a60      	ldr	r2, [pc, #384]	@ (8005f9c <mainLoop+0x25c>)
 8005e1c:	2101      	movs	r1, #1
 8005e1e:	2001      	movs	r0, #1
 8005e20:	f003 f9ee 	bl	8009200 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8005e24:	4a5e      	ldr	r2, [pc, #376]	@ (8005fa0 <mainLoop+0x260>)
 8005e26:	2101      	movs	r1, #1
 8005e28:	2002      	movs	r0, #2
 8005e2a:	f003 f9e9 	bl	8009200 <lcd_print>
			  HAL_Delay(1000);
 8005e2e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005e32:	f003 ff5d 	bl	8009cf0 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005e36:	bf00      	nop
 8005e38:	4856      	ldr	r0, [pc, #344]	@ (8005f94 <mainLoop+0x254>)
 8005e3a:	f005 fb5e 	bl	800b4fa <HAL_I2C_GetError>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d0f9      	beq.n	8005e38 <mainLoop+0xf8>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005e44:	e003      	b.n	8005e4e <mainLoop+0x10e>
				  HAL_Delay(1000);
 8005e46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005e4a:	f003 ff51 	bl	8009cf0 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005e4e:	4851      	ldr	r0, [pc, #324]	@ (8005f94 <mainLoop+0x254>)
 8005e50:	f005 fb46 	bl	800b4e0 <HAL_I2C_GetState>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b20      	cmp	r3, #32
 8005e58:	d1f5      	bne.n	8005e46 <mainLoop+0x106>
			  }

			  lcd_print(2, 1, dataOkunduText);
 8005e5a:	4a52      	ldr	r2, [pc, #328]	@ (8005fa4 <mainLoop+0x264>)
 8005e5c:	2101      	movs	r1, #1
 8005e5e:	2002      	movs	r0, #2
 8005e60:	f003 f9ce 	bl	8009200 <lcd_print>

			  ilkOkuma=1;
 8005e64:	4b4c      	ldr	r3, [pc, #304]	@ (8005f98 <mainLoop+0x258>)
 8005e66:	2201      	movs	r2, #1
 8005e68:	701a      	strb	r2, [r3, #0]
 8005e6a:	e006      	b.n	8005e7a <mainLoop+0x13a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8005e6c:	4a4e      	ldr	r2, [pc, #312]	@ (8005fa8 <mainLoop+0x268>)
 8005e6e:	2101      	movs	r1, #1
 8005e70:	2002      	movs	r0, #2
 8005e72:	f003 f9c5 	bl	8009200 <lcd_print>
			  lcd_clear();
 8005e76:	f003 f9ef 	bl	8009258 <lcd_clear>
		  }

		  lcd_clear();
 8005e7a:	f003 f9ed 	bl	8009258 <lcd_clear>

		  eepromKontrol();
 8005e7e:	f7fa f9d9 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8005e82:	4b43      	ldr	r3, [pc, #268]	@ (8005f90 <mainLoop+0x250>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8005e88:	4b48      	ldr	r3, [pc, #288]	@ (8005fac <mainLoop+0x26c>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d11c      	bne.n	8005eca <mainLoop+0x18a>
 8005e90:	4b47      	ldr	r3, [pc, #284]	@ (8005fb0 <mainLoop+0x270>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	f083 0301 	eor.w	r3, r3, #1
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d015      	beq.n	8005eca <mainLoop+0x18a>
 8005e9e:	4b45      	ldr	r3, [pc, #276]	@ (8005fb4 <mainLoop+0x274>)
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d111      	bne.n	8005eca <mainLoop+0x18a>
			lcd_clear();
 8005ea6:	f003 f9d7 	bl	8009258 <lcd_clear>
			HAL_Delay(10);
 8005eaa:	200a      	movs	r0, #10
 8005eac:	f003 ff20 	bl	8009cf0 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8005eb0:	4a41      	ldr	r2, [pc, #260]	@ (8005fb8 <mainLoop+0x278>)
 8005eb2:	2101      	movs	r1, #1
 8005eb4:	2001      	movs	r0, #1
 8005eb6:	f003 f9a3 	bl	8009200 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8005eba:	4a40      	ldr	r2, [pc, #256]	@ (8005fbc <mainLoop+0x27c>)
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	2002      	movs	r0, #2
 8005ec0:	f003 f99e 	bl	8009200 <lcd_print>
			mesajYazildi=1;
 8005ec4:	4b3a      	ldr	r3, [pc, #232]	@ (8005fb0 <mainLoop+0x270>)
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8005eca:	4b38      	ldr	r3, [pc, #224]	@ (8005fac <mainLoop+0x26c>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d112      	bne.n	8005ef8 <mainLoop+0x1b8>
 8005ed2:	2102      	movs	r1, #2
 8005ed4:	4828      	ldr	r0, [pc, #160]	@ (8005f78 <mainLoop+0x238>)
 8005ed6:	f004 fce7 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d10b      	bne.n	8005ef8 <mainLoop+0x1b8>
 8005ee0:	2104      	movs	r1, #4
 8005ee2:	4825      	ldr	r0, [pc, #148]	@ (8005f78 <mainLoop+0x238>)
 8005ee4:	f004 fce0 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d104      	bne.n	8005ef8 <mainLoop+0x1b8>
			menuGiris=1;
 8005eee:	4b2f      	ldr	r3, [pc, #188]	@ (8005fac <mainLoop+0x26c>)
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8005ef4:	f003 f9b0 	bl	8009258 <lcd_clear>
		}

		if(menuGiris==1) {
 8005ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8005fac <mainLoop+0x26c>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d101      	bne.n	8005f04 <mainLoop+0x1c4>
			menu();
 8005f00:	f7fb faa8 	bl	8001454 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8005f04:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f08:	481c      	ldr	r0, [pc, #112]	@ (8005f7c <mainLoop+0x23c>)
 8005f0a:	f004 fcfc 	bl	800a906 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8005f0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f12:	482b      	ldr	r0, [pc, #172]	@ (8005fc0 <mainLoop+0x280>)
 8005f14:	f004 fcc8 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10a      	bne.n	8005f34 <mainLoop+0x1f4>
 8005f1e:	4b29      	ldr	r3, [pc, #164]	@ (8005fc4 <mainLoop+0x284>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	f083 0301 	eor.w	r3, r3, #1
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <mainLoop+0x1f4>
			stopVar=1;
 8005f2c:	4b26      	ldr	r3, [pc, #152]	@ (8005fc8 <mainLoop+0x288>)
 8005f2e:	2201      	movs	r2, #1
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	e002      	b.n	8005f3a <mainLoop+0x1fa>
		} else {
			stopVar=0;
 8005f34:	4b24      	ldr	r3, [pc, #144]	@ (8005fc8 <mainLoop+0x288>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 8005f3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005f3e:	4820      	ldr	r0, [pc, #128]	@ (8005fc0 <mainLoop+0x280>)
 8005f40:	f004 fcb2 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d107      	bne.n	8005f5a <mainLoop+0x21a>
 8005f4a:	4b20      	ldr	r3, [pc, #128]	@ (8005fcc <mainLoop+0x28c>)
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <mainLoop+0x21a>
			EmnStopVar=1;
 8005f52:	4b1f      	ldr	r3, [pc, #124]	@ (8005fd0 <mainLoop+0x290>)
 8005f54:	2201      	movs	r2, #1
 8005f56:	701a      	strb	r2, [r3, #0]
 8005f58:	e002      	b.n	8005f60 <mainLoop+0x220>
		} else {
			EmnStopVar=0;
 8005f5a:	4b1d      	ldr	r3, [pc, #116]	@ (8005fd0 <mainLoop+0x290>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8005f60:	f7fe f88e 	bl	8004080 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8005f64:	f7fe f8c0 	bl	80040e8 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8005f68:	f7fe f904 	bl	8004174 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8005f6c:	f7fe f954 	bl	8004218 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8005f70:	f7ff fcb4 	bl	80058dc <checkDemoModCalisma>
		checkLCDBacklight();
 8005f74:	e6e6      	b.n	8005d44 <mainLoop+0x4>
 8005f76:	bf00      	nop
 8005f78:	40010800 	.word	0x40010800
 8005f7c:	40011000 	.word	0x40011000
 8005f80:	200016ef 	.word	0x200016ef
 8005f84:	20001698 	.word	0x20001698
 8005f88:	200016b4 	.word	0x200016b4
 8005f8c:	200016ec 	.word	0x200016ec
 8005f90:	200016ed 	.word	0x200016ed
 8005f94:	20001e44 	.word	0x20001e44
 8005f98:	200016ee 	.word	0x200016ee
 8005f9c:	20000178 	.word	0x20000178
 8005fa0:	20001d7c 	.word	0x20001d7c
 8005fa4:	20001d90 	.word	0x20001d90
 8005fa8:	20001da4 	.word	0x20001da4
 8005fac:	200016dd 	.word	0x200016dd
 8005fb0:	200016f4 	.word	0x200016f4
 8005fb4:	200016de 	.word	0x200016de
 8005fb8:	200000c4 	.word	0x200000c4
 8005fbc:	200000d8 	.word	0x200000d8
 8005fc0:	40010c00 	.word	0x40010c00
 8005fc4:	20001714 	.word	0x20001714
 8005fc8:	20001711 	.word	0x20001711
 8005fcc:	20001723 	.word	0x20001723
 8005fd0:	20001724 	.word	0x20001724

08005fd4 <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8005fd4:	b5b0      	push	{r4, r5, r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	4603      	mov	r3, r0
 8005fdc:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8005fde:	79fb      	ldrb	r3, [r7, #7]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f040 853d 	bne.w	8006a60 <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 8005fe6:	4ac7      	ldr	r2, [pc, #796]	@ (8006304 <loadMenuTexts+0x330>)
 8005fe8:	4bc7      	ldr	r3, [pc, #796]	@ (8006308 <loadMenuTexts+0x334>)
 8005fea:	4614      	mov	r4, r2
 8005fec:	461d      	mov	r5, r3
 8005fee:	6828      	ldr	r0, [r5, #0]
 8005ff0:	6869      	ldr	r1, [r5, #4]
 8005ff2:	68aa      	ldr	r2, [r5, #8]
 8005ff4:	68eb      	ldr	r3, [r5, #12]
 8005ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ff8:	7c2b      	ldrb	r3, [r5, #16]
 8005ffa:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8005ffc:	4ac3      	ldr	r2, [pc, #780]	@ (800630c <loadMenuTexts+0x338>)
 8005ffe:	4bc4      	ldr	r3, [pc, #784]	@ (8006310 <loadMenuTexts+0x33c>)
 8006000:	4614      	mov	r4, r2
 8006002:	461d      	mov	r5, r3
 8006004:	6828      	ldr	r0, [r5, #0]
 8006006:	6869      	ldr	r1, [r5, #4]
 8006008:	68aa      	ldr	r2, [r5, #8]
 800600a:	68eb      	ldr	r3, [r5, #12]
 800600c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800600e:	7c2b      	ldrb	r3, [r5, #16]
 8006010:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 8006012:	4ac0      	ldr	r2, [pc, #768]	@ (8006314 <loadMenuTexts+0x340>)
 8006014:	4bc0      	ldr	r3, [pc, #768]	@ (8006318 <loadMenuTexts+0x344>)
 8006016:	4614      	mov	r4, r2
 8006018:	461d      	mov	r5, r3
 800601a:	6828      	ldr	r0, [r5, #0]
 800601c:	6869      	ldr	r1, [r5, #4]
 800601e:	68aa      	ldr	r2, [r5, #8]
 8006020:	68eb      	ldr	r3, [r5, #12]
 8006022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006024:	7c2b      	ldrb	r3, [r5, #16]
 8006026:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8006028:	4abc      	ldr	r2, [pc, #752]	@ (800631c <loadMenuTexts+0x348>)
 800602a:	4bbd      	ldr	r3, [pc, #756]	@ (8006320 <loadMenuTexts+0x34c>)
 800602c:	4614      	mov	r4, r2
 800602e:	461d      	mov	r5, r3
 8006030:	6828      	ldr	r0, [r5, #0]
 8006032:	6869      	ldr	r1, [r5, #4]
 8006034:	68aa      	ldr	r2, [r5, #8]
 8006036:	68eb      	ldr	r3, [r5, #12]
 8006038:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800603a:	7c2b      	ldrb	r3, [r5, #16]
 800603c:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 800603e:	4ab9      	ldr	r2, [pc, #740]	@ (8006324 <loadMenuTexts+0x350>)
 8006040:	4bb9      	ldr	r3, [pc, #740]	@ (8006328 <loadMenuTexts+0x354>)
 8006042:	4614      	mov	r4, r2
 8006044:	461d      	mov	r5, r3
 8006046:	6828      	ldr	r0, [r5, #0]
 8006048:	6869      	ldr	r1, [r5, #4]
 800604a:	68aa      	ldr	r2, [r5, #8]
 800604c:	68eb      	ldr	r3, [r5, #12]
 800604e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006050:	7c2b      	ldrb	r3, [r5, #16]
 8006052:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 8006054:	4ab5      	ldr	r2, [pc, #724]	@ (800632c <loadMenuTexts+0x358>)
 8006056:	4bb6      	ldr	r3, [pc, #728]	@ (8006330 <loadMenuTexts+0x35c>)
 8006058:	4614      	mov	r4, r2
 800605a:	461d      	mov	r5, r3
 800605c:	6828      	ldr	r0, [r5, #0]
 800605e:	6869      	ldr	r1, [r5, #4]
 8006060:	68aa      	ldr	r2, [r5, #8]
 8006062:	68eb      	ldr	r3, [r5, #12]
 8006064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006066:	7c2b      	ldrb	r3, [r5, #16]
 8006068:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 800606a:	4ab2      	ldr	r2, [pc, #712]	@ (8006334 <loadMenuTexts+0x360>)
 800606c:	4bb2      	ldr	r3, [pc, #712]	@ (8006338 <loadMenuTexts+0x364>)
 800606e:	4614      	mov	r4, r2
 8006070:	461d      	mov	r5, r3
 8006072:	6828      	ldr	r0, [r5, #0]
 8006074:	6869      	ldr	r1, [r5, #4]
 8006076:	68aa      	ldr	r2, [r5, #8]
 8006078:	68eb      	ldr	r3, [r5, #12]
 800607a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800607c:	7c2b      	ldrb	r3, [r5, #16]
 800607e:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 8006080:	4aae      	ldr	r2, [pc, #696]	@ (800633c <loadMenuTexts+0x368>)
 8006082:	4baf      	ldr	r3, [pc, #700]	@ (8006340 <loadMenuTexts+0x36c>)
 8006084:	4614      	mov	r4, r2
 8006086:	461d      	mov	r5, r3
 8006088:	6828      	ldr	r0, [r5, #0]
 800608a:	6869      	ldr	r1, [r5, #4]
 800608c:	68aa      	ldr	r2, [r5, #8]
 800608e:	68eb      	ldr	r3, [r5, #12]
 8006090:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006092:	7c2b      	ldrb	r3, [r5, #16]
 8006094:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 8006096:	4aab      	ldr	r2, [pc, #684]	@ (8006344 <loadMenuTexts+0x370>)
 8006098:	4bab      	ldr	r3, [pc, #684]	@ (8006348 <loadMenuTexts+0x374>)
 800609a:	4614      	mov	r4, r2
 800609c:	461d      	mov	r5, r3
 800609e:	6828      	ldr	r0, [r5, #0]
 80060a0:	6869      	ldr	r1, [r5, #4]
 80060a2:	68aa      	ldr	r2, [r5, #8]
 80060a4:	68eb      	ldr	r3, [r5, #12]
 80060a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060a8:	7c2b      	ldrb	r3, [r5, #16]
 80060aa:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 80060ac:	4aa7      	ldr	r2, [pc, #668]	@ (800634c <loadMenuTexts+0x378>)
 80060ae:	4ba8      	ldr	r3, [pc, #672]	@ (8006350 <loadMenuTexts+0x37c>)
 80060b0:	4614      	mov	r4, r2
 80060b2:	461d      	mov	r5, r3
 80060b4:	6828      	ldr	r0, [r5, #0]
 80060b6:	6869      	ldr	r1, [r5, #4]
 80060b8:	68aa      	ldr	r2, [r5, #8]
 80060ba:	68eb      	ldr	r3, [r5, #12]
 80060bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060be:	7c2b      	ldrb	r3, [r5, #16]
 80060c0:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 80060c2:	4aa4      	ldr	r2, [pc, #656]	@ (8006354 <loadMenuTexts+0x380>)
 80060c4:	4ba4      	ldr	r3, [pc, #656]	@ (8006358 <loadMenuTexts+0x384>)
 80060c6:	4614      	mov	r4, r2
 80060c8:	461d      	mov	r5, r3
 80060ca:	6828      	ldr	r0, [r5, #0]
 80060cc:	6869      	ldr	r1, [r5, #4]
 80060ce:	68aa      	ldr	r2, [r5, #8]
 80060d0:	68eb      	ldr	r3, [r5, #12]
 80060d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060d4:	7c2b      	ldrb	r3, [r5, #16]
 80060d6:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 80060d8:	4aa0      	ldr	r2, [pc, #640]	@ (800635c <loadMenuTexts+0x388>)
 80060da:	4ba1      	ldr	r3, [pc, #644]	@ (8006360 <loadMenuTexts+0x38c>)
 80060dc:	4614      	mov	r4, r2
 80060de:	461d      	mov	r5, r3
 80060e0:	6828      	ldr	r0, [r5, #0]
 80060e2:	6869      	ldr	r1, [r5, #4]
 80060e4:	68aa      	ldr	r2, [r5, #8]
 80060e6:	68eb      	ldr	r3, [r5, #12]
 80060e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060ea:	7c2b      	ldrb	r3, [r5, #16]
 80060ec:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 80060ee:	4a9d      	ldr	r2, [pc, #628]	@ (8006364 <loadMenuTexts+0x390>)
 80060f0:	4b9d      	ldr	r3, [pc, #628]	@ (8006368 <loadMenuTexts+0x394>)
 80060f2:	4614      	mov	r4, r2
 80060f4:	461d      	mov	r5, r3
 80060f6:	6828      	ldr	r0, [r5, #0]
 80060f8:	6869      	ldr	r1, [r5, #4]
 80060fa:	68aa      	ldr	r2, [r5, #8]
 80060fc:	68eb      	ldr	r3, [r5, #12]
 80060fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006100:	7c2b      	ldrb	r3, [r5, #16]
 8006102:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 8006104:	4a99      	ldr	r2, [pc, #612]	@ (800636c <loadMenuTexts+0x398>)
 8006106:	4b9a      	ldr	r3, [pc, #616]	@ (8006370 <loadMenuTexts+0x39c>)
 8006108:	4614      	mov	r4, r2
 800610a:	461d      	mov	r5, r3
 800610c:	6828      	ldr	r0, [r5, #0]
 800610e:	6869      	ldr	r1, [r5, #4]
 8006110:	68aa      	ldr	r2, [r5, #8]
 8006112:	68eb      	ldr	r3, [r5, #12]
 8006114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006116:	7c2b      	ldrb	r3, [r5, #16]
 8006118:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 800611a:	4a96      	ldr	r2, [pc, #600]	@ (8006374 <loadMenuTexts+0x3a0>)
 800611c:	4b96      	ldr	r3, [pc, #600]	@ (8006378 <loadMenuTexts+0x3a4>)
 800611e:	4614      	mov	r4, r2
 8006120:	461d      	mov	r5, r3
 8006122:	6828      	ldr	r0, [r5, #0]
 8006124:	6869      	ldr	r1, [r5, #4]
 8006126:	68aa      	ldr	r2, [r5, #8]
 8006128:	68eb      	ldr	r3, [r5, #12]
 800612a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800612c:	7c2b      	ldrb	r3, [r5, #16]
 800612e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8006130:	4a92      	ldr	r2, [pc, #584]	@ (800637c <loadMenuTexts+0x3a8>)
 8006132:	4b93      	ldr	r3, [pc, #588]	@ (8006380 <loadMenuTexts+0x3ac>)
 8006134:	4614      	mov	r4, r2
 8006136:	461d      	mov	r5, r3
 8006138:	6828      	ldr	r0, [r5, #0]
 800613a:	6869      	ldr	r1, [r5, #4]
 800613c:	68aa      	ldr	r2, [r5, #8]
 800613e:	68eb      	ldr	r3, [r5, #12]
 8006140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006142:	7c2b      	ldrb	r3, [r5, #16]
 8006144:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 8006146:	4a8f      	ldr	r2, [pc, #572]	@ (8006384 <loadMenuTexts+0x3b0>)
 8006148:	4b8f      	ldr	r3, [pc, #572]	@ (8006388 <loadMenuTexts+0x3b4>)
 800614a:	4614      	mov	r4, r2
 800614c:	461d      	mov	r5, r3
 800614e:	6828      	ldr	r0, [r5, #0]
 8006150:	6869      	ldr	r1, [r5, #4]
 8006152:	68aa      	ldr	r2, [r5, #8]
 8006154:	68eb      	ldr	r3, [r5, #12]
 8006156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006158:	7c2b      	ldrb	r3, [r5, #16]
 800615a:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 800615c:	4a8b      	ldr	r2, [pc, #556]	@ (800638c <loadMenuTexts+0x3b8>)
 800615e:	4b8c      	ldr	r3, [pc, #560]	@ (8006390 <loadMenuTexts+0x3bc>)
 8006160:	4614      	mov	r4, r2
 8006162:	461d      	mov	r5, r3
 8006164:	6828      	ldr	r0, [r5, #0]
 8006166:	6869      	ldr	r1, [r5, #4]
 8006168:	68aa      	ldr	r2, [r5, #8]
 800616a:	68eb      	ldr	r3, [r5, #12]
 800616c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800616e:	7c2b      	ldrb	r3, [r5, #16]
 8006170:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 8006172:	4a88      	ldr	r2, [pc, #544]	@ (8006394 <loadMenuTexts+0x3c0>)
 8006174:	4b88      	ldr	r3, [pc, #544]	@ (8006398 <loadMenuTexts+0x3c4>)
 8006176:	4614      	mov	r4, r2
 8006178:	461d      	mov	r5, r3
 800617a:	6828      	ldr	r0, [r5, #0]
 800617c:	6869      	ldr	r1, [r5, #4]
 800617e:	68aa      	ldr	r2, [r5, #8]
 8006180:	68eb      	ldr	r3, [r5, #12]
 8006182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006184:	7c2b      	ldrb	r3, [r5, #16]
 8006186:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 8006188:	4a84      	ldr	r2, [pc, #528]	@ (800639c <loadMenuTexts+0x3c8>)
 800618a:	4b85      	ldr	r3, [pc, #532]	@ (80063a0 <loadMenuTexts+0x3cc>)
 800618c:	4614      	mov	r4, r2
 800618e:	461d      	mov	r5, r3
 8006190:	6828      	ldr	r0, [r5, #0]
 8006192:	6869      	ldr	r1, [r5, #4]
 8006194:	68aa      	ldr	r2, [r5, #8]
 8006196:	68eb      	ldr	r3, [r5, #12]
 8006198:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800619a:	7c2b      	ldrb	r3, [r5, #16]
 800619c:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 800619e:	4a81      	ldr	r2, [pc, #516]	@ (80063a4 <loadMenuTexts+0x3d0>)
 80061a0:	4b81      	ldr	r3, [pc, #516]	@ (80063a8 <loadMenuTexts+0x3d4>)
 80061a2:	4614      	mov	r4, r2
 80061a4:	461d      	mov	r5, r3
 80061a6:	6828      	ldr	r0, [r5, #0]
 80061a8:	6869      	ldr	r1, [r5, #4]
 80061aa:	68aa      	ldr	r2, [r5, #8]
 80061ac:	68eb      	ldr	r3, [r5, #12]
 80061ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061b0:	7c2b      	ldrb	r3, [r5, #16]
 80061b2:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 80061b4:	4a7d      	ldr	r2, [pc, #500]	@ (80063ac <loadMenuTexts+0x3d8>)
 80061b6:	4b7e      	ldr	r3, [pc, #504]	@ (80063b0 <loadMenuTexts+0x3dc>)
 80061b8:	4614      	mov	r4, r2
 80061ba:	461d      	mov	r5, r3
 80061bc:	6828      	ldr	r0, [r5, #0]
 80061be:	6869      	ldr	r1, [r5, #4]
 80061c0:	68aa      	ldr	r2, [r5, #8]
 80061c2:	68eb      	ldr	r3, [r5, #12]
 80061c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061c6:	7c2b      	ldrb	r3, [r5, #16]
 80061c8:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 80061ca:	4a7a      	ldr	r2, [pc, #488]	@ (80063b4 <loadMenuTexts+0x3e0>)
 80061cc:	4b7a      	ldr	r3, [pc, #488]	@ (80063b8 <loadMenuTexts+0x3e4>)
 80061ce:	4614      	mov	r4, r2
 80061d0:	461d      	mov	r5, r3
 80061d2:	6828      	ldr	r0, [r5, #0]
 80061d4:	6869      	ldr	r1, [r5, #4]
 80061d6:	68aa      	ldr	r2, [r5, #8]
 80061d8:	68eb      	ldr	r3, [r5, #12]
 80061da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061dc:	7c2b      	ldrb	r3, [r5, #16]
 80061de:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 80061e0:	4a76      	ldr	r2, [pc, #472]	@ (80063bc <loadMenuTexts+0x3e8>)
 80061e2:	4b77      	ldr	r3, [pc, #476]	@ (80063c0 <loadMenuTexts+0x3ec>)
 80061e4:	4614      	mov	r4, r2
 80061e6:	461d      	mov	r5, r3
 80061e8:	6828      	ldr	r0, [r5, #0]
 80061ea:	6869      	ldr	r1, [r5, #4]
 80061ec:	68aa      	ldr	r2, [r5, #8]
 80061ee:	68eb      	ldr	r3, [r5, #12]
 80061f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061f2:	7c2b      	ldrb	r3, [r5, #16]
 80061f4:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 80061f6:	4a73      	ldr	r2, [pc, #460]	@ (80063c4 <loadMenuTexts+0x3f0>)
 80061f8:	4b73      	ldr	r3, [pc, #460]	@ (80063c8 <loadMenuTexts+0x3f4>)
 80061fa:	4614      	mov	r4, r2
 80061fc:	461d      	mov	r5, r3
 80061fe:	6828      	ldr	r0, [r5, #0]
 8006200:	6869      	ldr	r1, [r5, #4]
 8006202:	68aa      	ldr	r2, [r5, #8]
 8006204:	68eb      	ldr	r3, [r5, #12]
 8006206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006208:	7c2b      	ldrb	r3, [r5, #16]
 800620a:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 800620c:	4a6f      	ldr	r2, [pc, #444]	@ (80063cc <loadMenuTexts+0x3f8>)
 800620e:	4b70      	ldr	r3, [pc, #448]	@ (80063d0 <loadMenuTexts+0x3fc>)
 8006210:	4614      	mov	r4, r2
 8006212:	461d      	mov	r5, r3
 8006214:	6828      	ldr	r0, [r5, #0]
 8006216:	6869      	ldr	r1, [r5, #4]
 8006218:	68aa      	ldr	r2, [r5, #8]
 800621a:	68eb      	ldr	r3, [r5, #12]
 800621c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800621e:	7c2b      	ldrb	r3, [r5, #16]
 8006220:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 8006222:	4a6c      	ldr	r2, [pc, #432]	@ (80063d4 <loadMenuTexts+0x400>)
 8006224:	4b6c      	ldr	r3, [pc, #432]	@ (80063d8 <loadMenuTexts+0x404>)
 8006226:	4614      	mov	r4, r2
 8006228:	461d      	mov	r5, r3
 800622a:	6828      	ldr	r0, [r5, #0]
 800622c:	6869      	ldr	r1, [r5, #4]
 800622e:	68aa      	ldr	r2, [r5, #8]
 8006230:	68eb      	ldr	r3, [r5, #12]
 8006232:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006234:	7c2b      	ldrb	r3, [r5, #16]
 8006236:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 8006238:	4a68      	ldr	r2, [pc, #416]	@ (80063dc <loadMenuTexts+0x408>)
 800623a:	4b69      	ldr	r3, [pc, #420]	@ (80063e0 <loadMenuTexts+0x40c>)
 800623c:	4614      	mov	r4, r2
 800623e:	461d      	mov	r5, r3
 8006240:	6828      	ldr	r0, [r5, #0]
 8006242:	6869      	ldr	r1, [r5, #4]
 8006244:	68aa      	ldr	r2, [r5, #8]
 8006246:	68eb      	ldr	r3, [r5, #12]
 8006248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800624a:	7c2b      	ldrb	r3, [r5, #16]
 800624c:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 800624e:	4a65      	ldr	r2, [pc, #404]	@ (80063e4 <loadMenuTexts+0x410>)
 8006250:	4b65      	ldr	r3, [pc, #404]	@ (80063e8 <loadMenuTexts+0x414>)
 8006252:	4614      	mov	r4, r2
 8006254:	461d      	mov	r5, r3
 8006256:	6828      	ldr	r0, [r5, #0]
 8006258:	6869      	ldr	r1, [r5, #4]
 800625a:	68aa      	ldr	r2, [r5, #8]
 800625c:	68eb      	ldr	r3, [r5, #12]
 800625e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006260:	7c2b      	ldrb	r3, [r5, #16]
 8006262:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 8006264:	4a61      	ldr	r2, [pc, #388]	@ (80063ec <loadMenuTexts+0x418>)
 8006266:	4b62      	ldr	r3, [pc, #392]	@ (80063f0 <loadMenuTexts+0x41c>)
 8006268:	4614      	mov	r4, r2
 800626a:	461d      	mov	r5, r3
 800626c:	6828      	ldr	r0, [r5, #0]
 800626e:	6869      	ldr	r1, [r5, #4]
 8006270:	68aa      	ldr	r2, [r5, #8]
 8006272:	68eb      	ldr	r3, [r5, #12]
 8006274:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006276:	7c2b      	ldrb	r3, [r5, #16]
 8006278:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 800627a:	4a5e      	ldr	r2, [pc, #376]	@ (80063f4 <loadMenuTexts+0x420>)
 800627c:	4b5e      	ldr	r3, [pc, #376]	@ (80063f8 <loadMenuTexts+0x424>)
 800627e:	4614      	mov	r4, r2
 8006280:	461d      	mov	r5, r3
 8006282:	6828      	ldr	r0, [r5, #0]
 8006284:	6869      	ldr	r1, [r5, #4]
 8006286:	68aa      	ldr	r2, [r5, #8]
 8006288:	68eb      	ldr	r3, [r5, #12]
 800628a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800628c:	7c2b      	ldrb	r3, [r5, #16]
 800628e:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 8006290:	4a5a      	ldr	r2, [pc, #360]	@ (80063fc <loadMenuTexts+0x428>)
 8006292:	4b5b      	ldr	r3, [pc, #364]	@ (8006400 <loadMenuTexts+0x42c>)
 8006294:	4614      	mov	r4, r2
 8006296:	461d      	mov	r5, r3
 8006298:	6828      	ldr	r0, [r5, #0]
 800629a:	6869      	ldr	r1, [r5, #4]
 800629c:	68aa      	ldr	r2, [r5, #8]
 800629e:	68eb      	ldr	r3, [r5, #12]
 80062a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062a2:	7c2b      	ldrb	r3, [r5, #16]
 80062a4:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 80062a6:	4a57      	ldr	r2, [pc, #348]	@ (8006404 <loadMenuTexts+0x430>)
 80062a8:	4b57      	ldr	r3, [pc, #348]	@ (8006408 <loadMenuTexts+0x434>)
 80062aa:	4614      	mov	r4, r2
 80062ac:	461d      	mov	r5, r3
 80062ae:	6828      	ldr	r0, [r5, #0]
 80062b0:	6869      	ldr	r1, [r5, #4]
 80062b2:	68aa      	ldr	r2, [r5, #8]
 80062b4:	68eb      	ldr	r3, [r5, #12]
 80062b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062b8:	7c2b      	ldrb	r3, [r5, #16]
 80062ba:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 80062bc:	4a53      	ldr	r2, [pc, #332]	@ (800640c <loadMenuTexts+0x438>)
 80062be:	4b54      	ldr	r3, [pc, #336]	@ (8006410 <loadMenuTexts+0x43c>)
 80062c0:	4614      	mov	r4, r2
 80062c2:	461d      	mov	r5, r3
 80062c4:	6828      	ldr	r0, [r5, #0]
 80062c6:	6869      	ldr	r1, [r5, #4]
 80062c8:	68aa      	ldr	r2, [r5, #8]
 80062ca:	68eb      	ldr	r3, [r5, #12]
 80062cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062ce:	7c2b      	ldrb	r3, [r5, #16]
 80062d0:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 80062d2:	4a50      	ldr	r2, [pc, #320]	@ (8006414 <loadMenuTexts+0x440>)
 80062d4:	4b50      	ldr	r3, [pc, #320]	@ (8006418 <loadMenuTexts+0x444>)
 80062d6:	4614      	mov	r4, r2
 80062d8:	461d      	mov	r5, r3
 80062da:	6828      	ldr	r0, [r5, #0]
 80062dc:	6869      	ldr	r1, [r5, #4]
 80062de:	68aa      	ldr	r2, [r5, #8]
 80062e0:	68eb      	ldr	r3, [r5, #12]
 80062e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062e4:	7c2b      	ldrb	r3, [r5, #16]
 80062e6:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 80062e8:	4a4c      	ldr	r2, [pc, #304]	@ (800641c <loadMenuTexts+0x448>)
 80062ea:	4b4d      	ldr	r3, [pc, #308]	@ (8006420 <loadMenuTexts+0x44c>)
 80062ec:	4614      	mov	r4, r2
 80062ee:	461d      	mov	r5, r3
 80062f0:	6828      	ldr	r0, [r5, #0]
 80062f2:	6869      	ldr	r1, [r5, #4]
 80062f4:	68aa      	ldr	r2, [r5, #8]
 80062f6:	68eb      	ldr	r3, [r5, #12]
 80062f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062fa:	7c2b      	ldrb	r3, [r5, #16]
 80062fc:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 80062fe:	4a49      	ldr	r2, [pc, #292]	@ (8006424 <loadMenuTexts+0x450>)
 8006300:	e092      	b.n	8006428 <loadMenuTexts+0x454>
 8006302:	bf00      	nop
 8006304:	20001728 	.word	0x20001728
 8006308:	2000018c 	.word	0x2000018c
 800630c:	2000173c 	.word	0x2000173c
 8006310:	200001a0 	.word	0x200001a0
 8006314:	20001750 	.word	0x20001750
 8006318:	200001b4 	.word	0x200001b4
 800631c:	20001764 	.word	0x20001764
 8006320:	200001c8 	.word	0x200001c8
 8006324:	20001778 	.word	0x20001778
 8006328:	200001dc 	.word	0x200001dc
 800632c:	2000178c 	.word	0x2000178c
 8006330:	200001f0 	.word	0x200001f0
 8006334:	200017a0 	.word	0x200017a0
 8006338:	20000204 	.word	0x20000204
 800633c:	200017b4 	.word	0x200017b4
 8006340:	20000218 	.word	0x20000218
 8006344:	200017c8 	.word	0x200017c8
 8006348:	2000022c 	.word	0x2000022c
 800634c:	200017dc 	.word	0x200017dc
 8006350:	20000240 	.word	0x20000240
 8006354:	200017f0 	.word	0x200017f0
 8006358:	20000254 	.word	0x20000254
 800635c:	20001804 	.word	0x20001804
 8006360:	20000268 	.word	0x20000268
 8006364:	20001818 	.word	0x20001818
 8006368:	2000027c 	.word	0x2000027c
 800636c:	2000182c 	.word	0x2000182c
 8006370:	20000290 	.word	0x20000290
 8006374:	20001840 	.word	0x20001840
 8006378:	200002a4 	.word	0x200002a4
 800637c:	20001854 	.word	0x20001854
 8006380:	200002b8 	.word	0x200002b8
 8006384:	20001868 	.word	0x20001868
 8006388:	200002cc 	.word	0x200002cc
 800638c:	2000187c 	.word	0x2000187c
 8006390:	200002e0 	.word	0x200002e0
 8006394:	20001890 	.word	0x20001890
 8006398:	200002f4 	.word	0x200002f4
 800639c:	200018a4 	.word	0x200018a4
 80063a0:	20000308 	.word	0x20000308
 80063a4:	200018b8 	.word	0x200018b8
 80063a8:	2000031c 	.word	0x2000031c
 80063ac:	200018cc 	.word	0x200018cc
 80063b0:	20000330 	.word	0x20000330
 80063b4:	200018e0 	.word	0x200018e0
 80063b8:	20000344 	.word	0x20000344
 80063bc:	200018f4 	.word	0x200018f4
 80063c0:	20000358 	.word	0x20000358
 80063c4:	20001908 	.word	0x20001908
 80063c8:	2000036c 	.word	0x2000036c
 80063cc:	2000191c 	.word	0x2000191c
 80063d0:	20000380 	.word	0x20000380
 80063d4:	20001930 	.word	0x20001930
 80063d8:	20000394 	.word	0x20000394
 80063dc:	20001944 	.word	0x20001944
 80063e0:	200003a8 	.word	0x200003a8
 80063e4:	20001958 	.word	0x20001958
 80063e8:	200003bc 	.word	0x200003bc
 80063ec:	2000196c 	.word	0x2000196c
 80063f0:	200003d0 	.word	0x200003d0
 80063f4:	20001980 	.word	0x20001980
 80063f8:	200003e4 	.word	0x200003e4
 80063fc:	20001994 	.word	0x20001994
 8006400:	200003f8 	.word	0x200003f8
 8006404:	200019a8 	.word	0x200019a8
 8006408:	2000040c 	.word	0x2000040c
 800640c:	200019bc 	.word	0x200019bc
 8006410:	20000420 	.word	0x20000420
 8006414:	200019d0 	.word	0x200019d0
 8006418:	20000434 	.word	0x20000434
 800641c:	200019e4 	.word	0x200019e4
 8006420:	20000448 	.word	0x20000448
 8006424:	200019f8 	.word	0x200019f8
 8006428:	4bc7      	ldr	r3, [pc, #796]	@ (8006748 <loadMenuTexts+0x774>)
 800642a:	4614      	mov	r4, r2
 800642c:	461d      	mov	r5, r3
 800642e:	6828      	ldr	r0, [r5, #0]
 8006430:	6869      	ldr	r1, [r5, #4]
 8006432:	68aa      	ldr	r2, [r5, #8]
 8006434:	68eb      	ldr	r3, [r5, #12]
 8006436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006438:	7c2b      	ldrb	r3, [r5, #16]
 800643a:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 800643c:	4ac3      	ldr	r2, [pc, #780]	@ (800674c <loadMenuTexts+0x778>)
 800643e:	4bc4      	ldr	r3, [pc, #784]	@ (8006750 <loadMenuTexts+0x77c>)
 8006440:	4614      	mov	r4, r2
 8006442:	461d      	mov	r5, r3
 8006444:	6828      	ldr	r0, [r5, #0]
 8006446:	6869      	ldr	r1, [r5, #4]
 8006448:	68aa      	ldr	r2, [r5, #8]
 800644a:	68eb      	ldr	r3, [r5, #12]
 800644c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800644e:	7c2b      	ldrb	r3, [r5, #16]
 8006450:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 8006452:	4ac0      	ldr	r2, [pc, #768]	@ (8006754 <loadMenuTexts+0x780>)
 8006454:	4bc0      	ldr	r3, [pc, #768]	@ (8006758 <loadMenuTexts+0x784>)
 8006456:	4614      	mov	r4, r2
 8006458:	461d      	mov	r5, r3
 800645a:	6828      	ldr	r0, [r5, #0]
 800645c:	6869      	ldr	r1, [r5, #4]
 800645e:	68aa      	ldr	r2, [r5, #8]
 8006460:	68eb      	ldr	r3, [r5, #12]
 8006462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006464:	7c2b      	ldrb	r3, [r5, #16]
 8006466:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 8006468:	4abc      	ldr	r2, [pc, #752]	@ (800675c <loadMenuTexts+0x788>)
 800646a:	4bbd      	ldr	r3, [pc, #756]	@ (8006760 <loadMenuTexts+0x78c>)
 800646c:	4614      	mov	r4, r2
 800646e:	461d      	mov	r5, r3
 8006470:	6828      	ldr	r0, [r5, #0]
 8006472:	6869      	ldr	r1, [r5, #4]
 8006474:	68aa      	ldr	r2, [r5, #8]
 8006476:	68eb      	ldr	r3, [r5, #12]
 8006478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800647a:	7c2b      	ldrb	r3, [r5, #16]
 800647c:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 800647e:	4ab9      	ldr	r2, [pc, #740]	@ (8006764 <loadMenuTexts+0x790>)
 8006480:	4bb9      	ldr	r3, [pc, #740]	@ (8006768 <loadMenuTexts+0x794>)
 8006482:	4614      	mov	r4, r2
 8006484:	461d      	mov	r5, r3
 8006486:	6828      	ldr	r0, [r5, #0]
 8006488:	6869      	ldr	r1, [r5, #4]
 800648a:	68aa      	ldr	r2, [r5, #8]
 800648c:	68eb      	ldr	r3, [r5, #12]
 800648e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006490:	7c2b      	ldrb	r3, [r5, #16]
 8006492:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 8006494:	4ab5      	ldr	r2, [pc, #724]	@ (800676c <loadMenuTexts+0x798>)
 8006496:	4bb6      	ldr	r3, [pc, #728]	@ (8006770 <loadMenuTexts+0x79c>)
 8006498:	4614      	mov	r4, r2
 800649a:	461d      	mov	r5, r3
 800649c:	6828      	ldr	r0, [r5, #0]
 800649e:	6869      	ldr	r1, [r5, #4]
 80064a0:	68aa      	ldr	r2, [r5, #8]
 80064a2:	68eb      	ldr	r3, [r5, #12]
 80064a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064a6:	7c2b      	ldrb	r3, [r5, #16]
 80064a8:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 80064aa:	4ab2      	ldr	r2, [pc, #712]	@ (8006774 <loadMenuTexts+0x7a0>)
 80064ac:	4bb2      	ldr	r3, [pc, #712]	@ (8006778 <loadMenuTexts+0x7a4>)
 80064ae:	4614      	mov	r4, r2
 80064b0:	461d      	mov	r5, r3
 80064b2:	6828      	ldr	r0, [r5, #0]
 80064b4:	6869      	ldr	r1, [r5, #4]
 80064b6:	68aa      	ldr	r2, [r5, #8]
 80064b8:	68eb      	ldr	r3, [r5, #12]
 80064ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064bc:	7c2b      	ldrb	r3, [r5, #16]
 80064be:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 80064c0:	4aae      	ldr	r2, [pc, #696]	@ (800677c <loadMenuTexts+0x7a8>)
 80064c2:	4baf      	ldr	r3, [pc, #700]	@ (8006780 <loadMenuTexts+0x7ac>)
 80064c4:	4614      	mov	r4, r2
 80064c6:	461d      	mov	r5, r3
 80064c8:	6828      	ldr	r0, [r5, #0]
 80064ca:	6869      	ldr	r1, [r5, #4]
 80064cc:	68aa      	ldr	r2, [r5, #8]
 80064ce:	68eb      	ldr	r3, [r5, #12]
 80064d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064d2:	7c2b      	ldrb	r3, [r5, #16]
 80064d4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 80064d6:	4aab      	ldr	r2, [pc, #684]	@ (8006784 <loadMenuTexts+0x7b0>)
 80064d8:	4bab      	ldr	r3, [pc, #684]	@ (8006788 <loadMenuTexts+0x7b4>)
 80064da:	4614      	mov	r4, r2
 80064dc:	461d      	mov	r5, r3
 80064de:	6828      	ldr	r0, [r5, #0]
 80064e0:	6869      	ldr	r1, [r5, #4]
 80064e2:	68aa      	ldr	r2, [r5, #8]
 80064e4:	68eb      	ldr	r3, [r5, #12]
 80064e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064e8:	7c2b      	ldrb	r3, [r5, #16]
 80064ea:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 80064ec:	4aa7      	ldr	r2, [pc, #668]	@ (800678c <loadMenuTexts+0x7b8>)
 80064ee:	4ba8      	ldr	r3, [pc, #672]	@ (8006790 <loadMenuTexts+0x7bc>)
 80064f0:	4614      	mov	r4, r2
 80064f2:	461d      	mov	r5, r3
 80064f4:	6828      	ldr	r0, [r5, #0]
 80064f6:	6869      	ldr	r1, [r5, #4]
 80064f8:	68aa      	ldr	r2, [r5, #8]
 80064fa:	68eb      	ldr	r3, [r5, #12]
 80064fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064fe:	7c2b      	ldrb	r3, [r5, #16]
 8006500:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 8006502:	4aa4      	ldr	r2, [pc, #656]	@ (8006794 <loadMenuTexts+0x7c0>)
 8006504:	4ba4      	ldr	r3, [pc, #656]	@ (8006798 <loadMenuTexts+0x7c4>)
 8006506:	4614      	mov	r4, r2
 8006508:	461d      	mov	r5, r3
 800650a:	6828      	ldr	r0, [r5, #0]
 800650c:	6869      	ldr	r1, [r5, #4]
 800650e:	68aa      	ldr	r2, [r5, #8]
 8006510:	68eb      	ldr	r3, [r5, #12]
 8006512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006514:	7c2b      	ldrb	r3, [r5, #16]
 8006516:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 8006518:	4aa0      	ldr	r2, [pc, #640]	@ (800679c <loadMenuTexts+0x7c8>)
 800651a:	4ba1      	ldr	r3, [pc, #644]	@ (80067a0 <loadMenuTexts+0x7cc>)
 800651c:	4614      	mov	r4, r2
 800651e:	461d      	mov	r5, r3
 8006520:	6828      	ldr	r0, [r5, #0]
 8006522:	6869      	ldr	r1, [r5, #4]
 8006524:	68aa      	ldr	r2, [r5, #8]
 8006526:	68eb      	ldr	r3, [r5, #12]
 8006528:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800652a:	7c2b      	ldrb	r3, [r5, #16]
 800652c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 800652e:	4a9d      	ldr	r2, [pc, #628]	@ (80067a4 <loadMenuTexts+0x7d0>)
 8006530:	4b9d      	ldr	r3, [pc, #628]	@ (80067a8 <loadMenuTexts+0x7d4>)
 8006532:	4614      	mov	r4, r2
 8006534:	461d      	mov	r5, r3
 8006536:	6828      	ldr	r0, [r5, #0]
 8006538:	6869      	ldr	r1, [r5, #4]
 800653a:	68aa      	ldr	r2, [r5, #8]
 800653c:	68eb      	ldr	r3, [r5, #12]
 800653e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006540:	7c2b      	ldrb	r3, [r5, #16]
 8006542:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 8006544:	4a99      	ldr	r2, [pc, #612]	@ (80067ac <loadMenuTexts+0x7d8>)
 8006546:	4b9a      	ldr	r3, [pc, #616]	@ (80067b0 <loadMenuTexts+0x7dc>)
 8006548:	4614      	mov	r4, r2
 800654a:	461d      	mov	r5, r3
 800654c:	6828      	ldr	r0, [r5, #0]
 800654e:	6869      	ldr	r1, [r5, #4]
 8006550:	68aa      	ldr	r2, [r5, #8]
 8006552:	68eb      	ldr	r3, [r5, #12]
 8006554:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006556:	7c2b      	ldrb	r3, [r5, #16]
 8006558:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 800655a:	4a96      	ldr	r2, [pc, #600]	@ (80067b4 <loadMenuTexts+0x7e0>)
 800655c:	4b96      	ldr	r3, [pc, #600]	@ (80067b8 <loadMenuTexts+0x7e4>)
 800655e:	4614      	mov	r4, r2
 8006560:	461d      	mov	r5, r3
 8006562:	6828      	ldr	r0, [r5, #0]
 8006564:	6869      	ldr	r1, [r5, #4]
 8006566:	68aa      	ldr	r2, [r5, #8]
 8006568:	68eb      	ldr	r3, [r5, #12]
 800656a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800656c:	7c2b      	ldrb	r3, [r5, #16]
 800656e:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 8006570:	4a92      	ldr	r2, [pc, #584]	@ (80067bc <loadMenuTexts+0x7e8>)
 8006572:	4b93      	ldr	r3, [pc, #588]	@ (80067c0 <loadMenuTexts+0x7ec>)
 8006574:	4614      	mov	r4, r2
 8006576:	461d      	mov	r5, r3
 8006578:	6828      	ldr	r0, [r5, #0]
 800657a:	6869      	ldr	r1, [r5, #4]
 800657c:	68aa      	ldr	r2, [r5, #8]
 800657e:	68eb      	ldr	r3, [r5, #12]
 8006580:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006582:	7c2b      	ldrb	r3, [r5, #16]
 8006584:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 8006586:	4a8f      	ldr	r2, [pc, #572]	@ (80067c4 <loadMenuTexts+0x7f0>)
 8006588:	4b8f      	ldr	r3, [pc, #572]	@ (80067c8 <loadMenuTexts+0x7f4>)
 800658a:	4614      	mov	r4, r2
 800658c:	461d      	mov	r5, r3
 800658e:	6828      	ldr	r0, [r5, #0]
 8006590:	6869      	ldr	r1, [r5, #4]
 8006592:	68aa      	ldr	r2, [r5, #8]
 8006594:	68eb      	ldr	r3, [r5, #12]
 8006596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006598:	7c2b      	ldrb	r3, [r5, #16]
 800659a:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 800659c:	4a8b      	ldr	r2, [pc, #556]	@ (80067cc <loadMenuTexts+0x7f8>)
 800659e:	4b8c      	ldr	r3, [pc, #560]	@ (80067d0 <loadMenuTexts+0x7fc>)
 80065a0:	4614      	mov	r4, r2
 80065a2:	461d      	mov	r5, r3
 80065a4:	6828      	ldr	r0, [r5, #0]
 80065a6:	6869      	ldr	r1, [r5, #4]
 80065a8:	68aa      	ldr	r2, [r5, #8]
 80065aa:	68eb      	ldr	r3, [r5, #12]
 80065ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065ae:	7c2b      	ldrb	r3, [r5, #16]
 80065b0:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 80065b2:	4a88      	ldr	r2, [pc, #544]	@ (80067d4 <loadMenuTexts+0x800>)
 80065b4:	4b88      	ldr	r3, [pc, #544]	@ (80067d8 <loadMenuTexts+0x804>)
 80065b6:	4614      	mov	r4, r2
 80065b8:	461d      	mov	r5, r3
 80065ba:	6828      	ldr	r0, [r5, #0]
 80065bc:	6869      	ldr	r1, [r5, #4]
 80065be:	68aa      	ldr	r2, [r5, #8]
 80065c0:	68eb      	ldr	r3, [r5, #12]
 80065c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065c4:	7c2b      	ldrb	r3, [r5, #16]
 80065c6:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 80065c8:	4a84      	ldr	r2, [pc, #528]	@ (80067dc <loadMenuTexts+0x808>)
 80065ca:	4b85      	ldr	r3, [pc, #532]	@ (80067e0 <loadMenuTexts+0x80c>)
 80065cc:	4614      	mov	r4, r2
 80065ce:	461d      	mov	r5, r3
 80065d0:	6828      	ldr	r0, [r5, #0]
 80065d2:	6869      	ldr	r1, [r5, #4]
 80065d4:	68aa      	ldr	r2, [r5, #8]
 80065d6:	68eb      	ldr	r3, [r5, #12]
 80065d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065da:	7c2b      	ldrb	r3, [r5, #16]
 80065dc:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 80065de:	4a81      	ldr	r2, [pc, #516]	@ (80067e4 <loadMenuTexts+0x810>)
 80065e0:	4b81      	ldr	r3, [pc, #516]	@ (80067e8 <loadMenuTexts+0x814>)
 80065e2:	4614      	mov	r4, r2
 80065e4:	461d      	mov	r5, r3
 80065e6:	6828      	ldr	r0, [r5, #0]
 80065e8:	6869      	ldr	r1, [r5, #4]
 80065ea:	68aa      	ldr	r2, [r5, #8]
 80065ec:	68eb      	ldr	r3, [r5, #12]
 80065ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065f0:	7c2b      	ldrb	r3, [r5, #16]
 80065f2:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 80065f4:	4a7d      	ldr	r2, [pc, #500]	@ (80067ec <loadMenuTexts+0x818>)
 80065f6:	4b7e      	ldr	r3, [pc, #504]	@ (80067f0 <loadMenuTexts+0x81c>)
 80065f8:	4614      	mov	r4, r2
 80065fa:	461d      	mov	r5, r3
 80065fc:	6828      	ldr	r0, [r5, #0]
 80065fe:	6869      	ldr	r1, [r5, #4]
 8006600:	68aa      	ldr	r2, [r5, #8]
 8006602:	68eb      	ldr	r3, [r5, #12]
 8006604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006606:	7c2b      	ldrb	r3, [r5, #16]
 8006608:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 800660a:	4a7a      	ldr	r2, [pc, #488]	@ (80067f4 <loadMenuTexts+0x820>)
 800660c:	4b7a      	ldr	r3, [pc, #488]	@ (80067f8 <loadMenuTexts+0x824>)
 800660e:	4614      	mov	r4, r2
 8006610:	461d      	mov	r5, r3
 8006612:	6828      	ldr	r0, [r5, #0]
 8006614:	6869      	ldr	r1, [r5, #4]
 8006616:	68aa      	ldr	r2, [r5, #8]
 8006618:	68eb      	ldr	r3, [r5, #12]
 800661a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800661c:	7c2b      	ldrb	r3, [r5, #16]
 800661e:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 8006620:	4a76      	ldr	r2, [pc, #472]	@ (80067fc <loadMenuTexts+0x828>)
 8006622:	4b77      	ldr	r3, [pc, #476]	@ (8006800 <loadMenuTexts+0x82c>)
 8006624:	4614      	mov	r4, r2
 8006626:	461d      	mov	r5, r3
 8006628:	6828      	ldr	r0, [r5, #0]
 800662a:	6869      	ldr	r1, [r5, #4]
 800662c:	68aa      	ldr	r2, [r5, #8]
 800662e:	68eb      	ldr	r3, [r5, #12]
 8006630:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006632:	7c2b      	ldrb	r3, [r5, #16]
 8006634:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 8006636:	4a73      	ldr	r2, [pc, #460]	@ (8006804 <loadMenuTexts+0x830>)
 8006638:	4b73      	ldr	r3, [pc, #460]	@ (8006808 <loadMenuTexts+0x834>)
 800663a:	4614      	mov	r4, r2
 800663c:	461d      	mov	r5, r3
 800663e:	6828      	ldr	r0, [r5, #0]
 8006640:	6869      	ldr	r1, [r5, #4]
 8006642:	68aa      	ldr	r2, [r5, #8]
 8006644:	68eb      	ldr	r3, [r5, #12]
 8006646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006648:	7c2b      	ldrb	r3, [r5, #16]
 800664a:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 800664c:	4a6f      	ldr	r2, [pc, #444]	@ (800680c <loadMenuTexts+0x838>)
 800664e:	4b70      	ldr	r3, [pc, #448]	@ (8006810 <loadMenuTexts+0x83c>)
 8006650:	4614      	mov	r4, r2
 8006652:	461d      	mov	r5, r3
 8006654:	6828      	ldr	r0, [r5, #0]
 8006656:	6869      	ldr	r1, [r5, #4]
 8006658:	68aa      	ldr	r2, [r5, #8]
 800665a:	68eb      	ldr	r3, [r5, #12]
 800665c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800665e:	7c2b      	ldrb	r3, [r5, #16]
 8006660:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 8006662:	4a6c      	ldr	r2, [pc, #432]	@ (8006814 <loadMenuTexts+0x840>)
 8006664:	4b6c      	ldr	r3, [pc, #432]	@ (8006818 <loadMenuTexts+0x844>)
 8006666:	4614      	mov	r4, r2
 8006668:	461d      	mov	r5, r3
 800666a:	6828      	ldr	r0, [r5, #0]
 800666c:	6869      	ldr	r1, [r5, #4]
 800666e:	68aa      	ldr	r2, [r5, #8]
 8006670:	68eb      	ldr	r3, [r5, #12]
 8006672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006674:	7c2b      	ldrb	r3, [r5, #16]
 8006676:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 8006678:	4a68      	ldr	r2, [pc, #416]	@ (800681c <loadMenuTexts+0x848>)
 800667a:	4b69      	ldr	r3, [pc, #420]	@ (8006820 <loadMenuTexts+0x84c>)
 800667c:	4614      	mov	r4, r2
 800667e:	461d      	mov	r5, r3
 8006680:	6828      	ldr	r0, [r5, #0]
 8006682:	6869      	ldr	r1, [r5, #4]
 8006684:	68aa      	ldr	r2, [r5, #8]
 8006686:	68eb      	ldr	r3, [r5, #12]
 8006688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800668a:	7c2b      	ldrb	r3, [r5, #16]
 800668c:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 800668e:	4a65      	ldr	r2, [pc, #404]	@ (8006824 <loadMenuTexts+0x850>)
 8006690:	4b65      	ldr	r3, [pc, #404]	@ (8006828 <loadMenuTexts+0x854>)
 8006692:	4614      	mov	r4, r2
 8006694:	461d      	mov	r5, r3
 8006696:	6828      	ldr	r0, [r5, #0]
 8006698:	6869      	ldr	r1, [r5, #4]
 800669a:	68aa      	ldr	r2, [r5, #8]
 800669c:	68eb      	ldr	r3, [r5, #12]
 800669e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066a0:	7c2b      	ldrb	r3, [r5, #16]
 80066a2:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 80066a4:	4a61      	ldr	r2, [pc, #388]	@ (800682c <loadMenuTexts+0x858>)
 80066a6:	4b62      	ldr	r3, [pc, #392]	@ (8006830 <loadMenuTexts+0x85c>)
 80066a8:	4614      	mov	r4, r2
 80066aa:	461d      	mov	r5, r3
 80066ac:	6828      	ldr	r0, [r5, #0]
 80066ae:	6869      	ldr	r1, [r5, #4]
 80066b0:	68aa      	ldr	r2, [r5, #8]
 80066b2:	68eb      	ldr	r3, [r5, #12]
 80066b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066b6:	7c2b      	ldrb	r3, [r5, #16]
 80066b8:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 80066ba:	4a5e      	ldr	r2, [pc, #376]	@ (8006834 <loadMenuTexts+0x860>)
 80066bc:	4b5e      	ldr	r3, [pc, #376]	@ (8006838 <loadMenuTexts+0x864>)
 80066be:	4614      	mov	r4, r2
 80066c0:	461d      	mov	r5, r3
 80066c2:	6828      	ldr	r0, [r5, #0]
 80066c4:	6869      	ldr	r1, [r5, #4]
 80066c6:	68aa      	ldr	r2, [r5, #8]
 80066c8:	68eb      	ldr	r3, [r5, #12]
 80066ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066cc:	7c2b      	ldrb	r3, [r5, #16]
 80066ce:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 80066d0:	4a5a      	ldr	r2, [pc, #360]	@ (800683c <loadMenuTexts+0x868>)
 80066d2:	4b5b      	ldr	r3, [pc, #364]	@ (8006840 <loadMenuTexts+0x86c>)
 80066d4:	4614      	mov	r4, r2
 80066d6:	461d      	mov	r5, r3
 80066d8:	6828      	ldr	r0, [r5, #0]
 80066da:	6869      	ldr	r1, [r5, #4]
 80066dc:	68aa      	ldr	r2, [r5, #8]
 80066de:	68eb      	ldr	r3, [r5, #12]
 80066e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066e2:	7c2b      	ldrb	r3, [r5, #16]
 80066e4:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 80066e6:	4a57      	ldr	r2, [pc, #348]	@ (8006844 <loadMenuTexts+0x870>)
 80066e8:	4b57      	ldr	r3, [pc, #348]	@ (8006848 <loadMenuTexts+0x874>)
 80066ea:	4614      	mov	r4, r2
 80066ec:	461d      	mov	r5, r3
 80066ee:	6828      	ldr	r0, [r5, #0]
 80066f0:	6869      	ldr	r1, [r5, #4]
 80066f2:	68aa      	ldr	r2, [r5, #8]
 80066f4:	68eb      	ldr	r3, [r5, #12]
 80066f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066f8:	7c2b      	ldrb	r3, [r5, #16]
 80066fa:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 80066fc:	4a53      	ldr	r2, [pc, #332]	@ (800684c <loadMenuTexts+0x878>)
 80066fe:	4b54      	ldr	r3, [pc, #336]	@ (8006850 <loadMenuTexts+0x87c>)
 8006700:	4614      	mov	r4, r2
 8006702:	461d      	mov	r5, r3
 8006704:	6828      	ldr	r0, [r5, #0]
 8006706:	6869      	ldr	r1, [r5, #4]
 8006708:	68aa      	ldr	r2, [r5, #8]
 800670a:	68eb      	ldr	r3, [r5, #12]
 800670c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800670e:	7c2b      	ldrb	r3, [r5, #16]
 8006710:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 8006712:	4a50      	ldr	r2, [pc, #320]	@ (8006854 <loadMenuTexts+0x880>)
 8006714:	4b50      	ldr	r3, [pc, #320]	@ (8006858 <loadMenuTexts+0x884>)
 8006716:	4614      	mov	r4, r2
 8006718:	461d      	mov	r5, r3
 800671a:	6828      	ldr	r0, [r5, #0]
 800671c:	6869      	ldr	r1, [r5, #4]
 800671e:	68aa      	ldr	r2, [r5, #8]
 8006720:	68eb      	ldr	r3, [r5, #12]
 8006722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006724:	7c2b      	ldrb	r3, [r5, #16]
 8006726:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 8006728:	4a4c      	ldr	r2, [pc, #304]	@ (800685c <loadMenuTexts+0x888>)
 800672a:	4b4d      	ldr	r3, [pc, #308]	@ (8006860 <loadMenuTexts+0x88c>)
 800672c:	4614      	mov	r4, r2
 800672e:	461d      	mov	r5, r3
 8006730:	6828      	ldr	r0, [r5, #0]
 8006732:	6869      	ldr	r1, [r5, #4]
 8006734:	68aa      	ldr	r2, [r5, #8]
 8006736:	68eb      	ldr	r3, [r5, #12]
 8006738:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800673a:	7c2b      	ldrb	r3, [r5, #16]
 800673c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 800673e:	4a49      	ldr	r2, [pc, #292]	@ (8006864 <loadMenuTexts+0x890>)
 8006740:	4b49      	ldr	r3, [pc, #292]	@ (8006868 <loadMenuTexts+0x894>)
 8006742:	4614      	mov	r4, r2
 8006744:	461d      	mov	r5, r3
 8006746:	e091      	b.n	800686c <loadMenuTexts+0x898>
 8006748:	2000045c 	.word	0x2000045c
 800674c:	20001a0c 	.word	0x20001a0c
 8006750:	20000470 	.word	0x20000470
 8006754:	20001a20 	.word	0x20001a20
 8006758:	20000484 	.word	0x20000484
 800675c:	20001a34 	.word	0x20001a34
 8006760:	20000498 	.word	0x20000498
 8006764:	20001a48 	.word	0x20001a48
 8006768:	200004ac 	.word	0x200004ac
 800676c:	20001a5c 	.word	0x20001a5c
 8006770:	200004c0 	.word	0x200004c0
 8006774:	20001a70 	.word	0x20001a70
 8006778:	200004d4 	.word	0x200004d4
 800677c:	20001a84 	.word	0x20001a84
 8006780:	200004e8 	.word	0x200004e8
 8006784:	20001a98 	.word	0x20001a98
 8006788:	200004fc 	.word	0x200004fc
 800678c:	20001aac 	.word	0x20001aac
 8006790:	20000510 	.word	0x20000510
 8006794:	20001ac0 	.word	0x20001ac0
 8006798:	20000524 	.word	0x20000524
 800679c:	20001ad4 	.word	0x20001ad4
 80067a0:	20000538 	.word	0x20000538
 80067a4:	20001ae8 	.word	0x20001ae8
 80067a8:	2000054c 	.word	0x2000054c
 80067ac:	20001afc 	.word	0x20001afc
 80067b0:	20000560 	.word	0x20000560
 80067b4:	20001b10 	.word	0x20001b10
 80067b8:	20000574 	.word	0x20000574
 80067bc:	20001b24 	.word	0x20001b24
 80067c0:	20000588 	.word	0x20000588
 80067c4:	20001b38 	.word	0x20001b38
 80067c8:	2000059c 	.word	0x2000059c
 80067cc:	20001b4c 	.word	0x20001b4c
 80067d0:	200005b0 	.word	0x200005b0
 80067d4:	20001b60 	.word	0x20001b60
 80067d8:	200005c4 	.word	0x200005c4
 80067dc:	20001b74 	.word	0x20001b74
 80067e0:	200005d8 	.word	0x200005d8
 80067e4:	20001b88 	.word	0x20001b88
 80067e8:	200005ec 	.word	0x200005ec
 80067ec:	20001b9c 	.word	0x20001b9c
 80067f0:	20000600 	.word	0x20000600
 80067f4:	20001bb0 	.word	0x20001bb0
 80067f8:	20000614 	.word	0x20000614
 80067fc:	20001bc4 	.word	0x20001bc4
 8006800:	20000628 	.word	0x20000628
 8006804:	20001bd8 	.word	0x20001bd8
 8006808:	2000063c 	.word	0x2000063c
 800680c:	20001bec 	.word	0x20001bec
 8006810:	20000650 	.word	0x20000650
 8006814:	20001c00 	.word	0x20001c00
 8006818:	20000664 	.word	0x20000664
 800681c:	20001c14 	.word	0x20001c14
 8006820:	20000678 	.word	0x20000678
 8006824:	20001c28 	.word	0x20001c28
 8006828:	2000068c 	.word	0x2000068c
 800682c:	20001c3c 	.word	0x20001c3c
 8006830:	200006a0 	.word	0x200006a0
 8006834:	20001c50 	.word	0x20001c50
 8006838:	200006b4 	.word	0x200006b4
 800683c:	20001c64 	.word	0x20001c64
 8006840:	200006c8 	.word	0x200006c8
 8006844:	20001c78 	.word	0x20001c78
 8006848:	200006dc 	.word	0x200006dc
 800684c:	20001c8c 	.word	0x20001c8c
 8006850:	200006f0 	.word	0x200006f0
 8006854:	20001ca0 	.word	0x20001ca0
 8006858:	20000c7c 	.word	0x20000c7c
 800685c:	20001cb4 	.word	0x20001cb4
 8006860:	20000c90 	.word	0x20000c90
 8006864:	20001cc8 	.word	0x20001cc8
 8006868:	20000ca4 	.word	0x20000ca4
 800686c:	6828      	ldr	r0, [r5, #0]
 800686e:	6869      	ldr	r1, [r5, #4]
 8006870:	68aa      	ldr	r2, [r5, #8]
 8006872:	68eb      	ldr	r3, [r5, #12]
 8006874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006876:	7c2b      	ldrb	r3, [r5, #16]
 8006878:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 800687a:	4a59      	ldr	r2, [pc, #356]	@ (80069e0 <loadMenuTexts+0xa0c>)
 800687c:	4b59      	ldr	r3, [pc, #356]	@ (80069e4 <loadMenuTexts+0xa10>)
 800687e:	4614      	mov	r4, r2
 8006880:	461d      	mov	r5, r3
 8006882:	6828      	ldr	r0, [r5, #0]
 8006884:	6869      	ldr	r1, [r5, #4]
 8006886:	68aa      	ldr	r2, [r5, #8]
 8006888:	68eb      	ldr	r3, [r5, #12]
 800688a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800688c:	7c2b      	ldrb	r3, [r5, #16]
 800688e:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 8006890:	4a55      	ldr	r2, [pc, #340]	@ (80069e8 <loadMenuTexts+0xa14>)
 8006892:	4b56      	ldr	r3, [pc, #344]	@ (80069ec <loadMenuTexts+0xa18>)
 8006894:	4614      	mov	r4, r2
 8006896:	461d      	mov	r5, r3
 8006898:	6828      	ldr	r0, [r5, #0]
 800689a:	6869      	ldr	r1, [r5, #4]
 800689c:	68aa      	ldr	r2, [r5, #8]
 800689e:	68eb      	ldr	r3, [r5, #12]
 80068a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068a2:	7c2b      	ldrb	r3, [r5, #16]
 80068a4:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 80068a6:	4a52      	ldr	r2, [pc, #328]	@ (80069f0 <loadMenuTexts+0xa1c>)
 80068a8:	4b52      	ldr	r3, [pc, #328]	@ (80069f4 <loadMenuTexts+0xa20>)
 80068aa:	4614      	mov	r4, r2
 80068ac:	461d      	mov	r5, r3
 80068ae:	6828      	ldr	r0, [r5, #0]
 80068b0:	6869      	ldr	r1, [r5, #4]
 80068b2:	68aa      	ldr	r2, [r5, #8]
 80068b4:	68eb      	ldr	r3, [r5, #12]
 80068b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068b8:	7c2b      	ldrb	r3, [r5, #16]
 80068ba:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 80068bc:	4a4e      	ldr	r2, [pc, #312]	@ (80069f8 <loadMenuTexts+0xa24>)
 80068be:	4b4f      	ldr	r3, [pc, #316]	@ (80069fc <loadMenuTexts+0xa28>)
 80068c0:	4614      	mov	r4, r2
 80068c2:	461d      	mov	r5, r3
 80068c4:	6828      	ldr	r0, [r5, #0]
 80068c6:	6869      	ldr	r1, [r5, #4]
 80068c8:	68aa      	ldr	r2, [r5, #8]
 80068ca:	68eb      	ldr	r3, [r5, #12]
 80068cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068ce:	7c2b      	ldrb	r3, [r5, #16]
 80068d0:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 80068d2:	4a4b      	ldr	r2, [pc, #300]	@ (8006a00 <loadMenuTexts+0xa2c>)
 80068d4:	4b4b      	ldr	r3, [pc, #300]	@ (8006a04 <loadMenuTexts+0xa30>)
 80068d6:	4614      	mov	r4, r2
 80068d8:	461d      	mov	r5, r3
 80068da:	6828      	ldr	r0, [r5, #0]
 80068dc:	6869      	ldr	r1, [r5, #4]
 80068de:	68aa      	ldr	r2, [r5, #8]
 80068e0:	68eb      	ldr	r3, [r5, #12]
 80068e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068e4:	7c2b      	ldrb	r3, [r5, #16]
 80068e6:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 80068e8:	4a47      	ldr	r2, [pc, #284]	@ (8006a08 <loadMenuTexts+0xa34>)
 80068ea:	4b48      	ldr	r3, [pc, #288]	@ (8006a0c <loadMenuTexts+0xa38>)
 80068ec:	4614      	mov	r4, r2
 80068ee:	461d      	mov	r5, r3
 80068f0:	6828      	ldr	r0, [r5, #0]
 80068f2:	6869      	ldr	r1, [r5, #4]
 80068f4:	68aa      	ldr	r2, [r5, #8]
 80068f6:	68eb      	ldr	r3, [r5, #12]
 80068f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068fa:	7c2b      	ldrb	r3, [r5, #16]
 80068fc:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 80068fe:	4a44      	ldr	r2, [pc, #272]	@ (8006a10 <loadMenuTexts+0xa3c>)
 8006900:	4b44      	ldr	r3, [pc, #272]	@ (8006a14 <loadMenuTexts+0xa40>)
 8006902:	4614      	mov	r4, r2
 8006904:	461d      	mov	r5, r3
 8006906:	6828      	ldr	r0, [r5, #0]
 8006908:	6869      	ldr	r1, [r5, #4]
 800690a:	68aa      	ldr	r2, [r5, #8]
 800690c:	68eb      	ldr	r3, [r5, #12]
 800690e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006910:	7c2b      	ldrb	r3, [r5, #16]
 8006912:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 8006914:	4a40      	ldr	r2, [pc, #256]	@ (8006a18 <loadMenuTexts+0xa44>)
 8006916:	4b41      	ldr	r3, [pc, #260]	@ (8006a1c <loadMenuTexts+0xa48>)
 8006918:	4614      	mov	r4, r2
 800691a:	461d      	mov	r5, r3
 800691c:	6828      	ldr	r0, [r5, #0]
 800691e:	6869      	ldr	r1, [r5, #4]
 8006920:	68aa      	ldr	r2, [r5, #8]
 8006922:	68eb      	ldr	r3, [r5, #12]
 8006924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006926:	7c2b      	ldrb	r3, [r5, #16]
 8006928:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 800692a:	4a3d      	ldr	r2, [pc, #244]	@ (8006a20 <loadMenuTexts+0xa4c>)
 800692c:	4b3d      	ldr	r3, [pc, #244]	@ (8006a24 <loadMenuTexts+0xa50>)
 800692e:	4614      	mov	r4, r2
 8006930:	461d      	mov	r5, r3
 8006932:	6828      	ldr	r0, [r5, #0]
 8006934:	6869      	ldr	r1, [r5, #4]
 8006936:	68aa      	ldr	r2, [r5, #8]
 8006938:	68eb      	ldr	r3, [r5, #12]
 800693a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800693c:	7c2b      	ldrb	r3, [r5, #16]
 800693e:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8006940:	4a39      	ldr	r2, [pc, #228]	@ (8006a28 <loadMenuTexts+0xa54>)
 8006942:	4b3a      	ldr	r3, [pc, #232]	@ (8006a2c <loadMenuTexts+0xa58>)
 8006944:	4614      	mov	r4, r2
 8006946:	461d      	mov	r5, r3
 8006948:	6828      	ldr	r0, [r5, #0]
 800694a:	6869      	ldr	r1, [r5, #4]
 800694c:	68aa      	ldr	r2, [r5, #8]
 800694e:	68eb      	ldr	r3, [r5, #12]
 8006950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006952:	7c2b      	ldrb	r3, [r5, #16]
 8006954:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 8006956:	4a36      	ldr	r2, [pc, #216]	@ (8006a30 <loadMenuTexts+0xa5c>)
 8006958:	4b36      	ldr	r3, [pc, #216]	@ (8006a34 <loadMenuTexts+0xa60>)
 800695a:	4614      	mov	r4, r2
 800695c:	461d      	mov	r5, r3
 800695e:	6828      	ldr	r0, [r5, #0]
 8006960:	6869      	ldr	r1, [r5, #4]
 8006962:	68aa      	ldr	r2, [r5, #8]
 8006964:	68eb      	ldr	r3, [r5, #12]
 8006966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006968:	7c2b      	ldrb	r3, [r5, #16]
 800696a:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 800696c:	4a32      	ldr	r2, [pc, #200]	@ (8006a38 <loadMenuTexts+0xa64>)
 800696e:	4b33      	ldr	r3, [pc, #204]	@ (8006a3c <loadMenuTexts+0xa68>)
 8006970:	4614      	mov	r4, r2
 8006972:	461d      	mov	r5, r3
 8006974:	6828      	ldr	r0, [r5, #0]
 8006976:	6869      	ldr	r1, [r5, #4]
 8006978:	68aa      	ldr	r2, [r5, #8]
 800697a:	68eb      	ldr	r3, [r5, #12]
 800697c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800697e:	7c2b      	ldrb	r3, [r5, #16]
 8006980:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 8006982:	4a2f      	ldr	r2, [pc, #188]	@ (8006a40 <loadMenuTexts+0xa6c>)
 8006984:	4b2f      	ldr	r3, [pc, #188]	@ (8006a44 <loadMenuTexts+0xa70>)
 8006986:	4614      	mov	r4, r2
 8006988:	461d      	mov	r5, r3
 800698a:	6828      	ldr	r0, [r5, #0]
 800698c:	6869      	ldr	r1, [r5, #4]
 800698e:	68aa      	ldr	r2, [r5, #8]
 8006990:	68eb      	ldr	r3, [r5, #12]
 8006992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006994:	7c2b      	ldrb	r3, [r5, #16]
 8006996:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 8006998:	4a2b      	ldr	r2, [pc, #172]	@ (8006a48 <loadMenuTexts+0xa74>)
 800699a:	4b2c      	ldr	r3, [pc, #176]	@ (8006a4c <loadMenuTexts+0xa78>)
 800699c:	4614      	mov	r4, r2
 800699e:	461d      	mov	r5, r3
 80069a0:	6828      	ldr	r0, [r5, #0]
 80069a2:	6869      	ldr	r1, [r5, #4]
 80069a4:	68aa      	ldr	r2, [r5, #8]
 80069a6:	68eb      	ldr	r3, [r5, #12]
 80069a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069aa:	7c2b      	ldrb	r3, [r5, #16]
 80069ac:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 80069ae:	4a28      	ldr	r2, [pc, #160]	@ (8006a50 <loadMenuTexts+0xa7c>)
 80069b0:	4b28      	ldr	r3, [pc, #160]	@ (8006a54 <loadMenuTexts+0xa80>)
 80069b2:	4614      	mov	r4, r2
 80069b4:	461d      	mov	r5, r3
 80069b6:	6828      	ldr	r0, [r5, #0]
 80069b8:	6869      	ldr	r1, [r5, #4]
 80069ba:	68aa      	ldr	r2, [r5, #8]
 80069bc:	68eb      	ldr	r3, [r5, #12]
 80069be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069c0:	7c2b      	ldrb	r3, [r5, #16]
 80069c2:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 80069c4:	4a24      	ldr	r2, [pc, #144]	@ (8006a58 <loadMenuTexts+0xa84>)
 80069c6:	4b25      	ldr	r3, [pc, #148]	@ (8006a5c <loadMenuTexts+0xa88>)
 80069c8:	4614      	mov	r4, r2
 80069ca:	461d      	mov	r5, r3
 80069cc:	6828      	ldr	r0, [r5, #0]
 80069ce:	6869      	ldr	r1, [r5, #4]
 80069d0:	68aa      	ldr	r2, [r5, #8]
 80069d2:	68eb      	ldr	r3, [r5, #12]
 80069d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069d6:	7c2b      	ldrb	r3, [r5, #16]
 80069d8:	7023      	strb	r3, [r4, #0]
 80069da:	f000 bd3a 	b.w	8007452 <loadMenuTexts+0x147e>
 80069de:	bf00      	nop
 80069e0:	20001cdc 	.word	0x20001cdc
 80069e4:	20000cb8 	.word	0x20000cb8
 80069e8:	20001cf0 	.word	0x20001cf0
 80069ec:	20000d1c 	.word	0x20000d1c
 80069f0:	20001d04 	.word	0x20001d04
 80069f4:	20000d30 	.word	0x20000d30
 80069f8:	20001d18 	.word	0x20001d18
 80069fc:	20000d6c 	.word	0x20000d6c
 8006a00:	20001d2c 	.word	0x20001d2c
 8006a04:	20000d80 	.word	0x20000d80
 8006a08:	20001d40 	.word	0x20001d40
 8006a0c:	20000dbc 	.word	0x20000dbc
 8006a10:	20001d54 	.word	0x20001d54
 8006a14:	20000dd0 	.word	0x20000dd0
 8006a18:	20001d68 	.word	0x20001d68
 8006a1c:	20000e0c 	.word	0x20000e0c
 8006a20:	20001d7c 	.word	0x20001d7c
 8006a24:	20000e34 	.word	0x20000e34
 8006a28:	20001d90 	.word	0x20001d90
 8006a2c:	20000e5c 	.word	0x20000e5c
 8006a30:	20001da4 	.word	0x20001da4
 8006a34:	20000e84 	.word	0x20000e84
 8006a38:	20001db8 	.word	0x20001db8
 8006a3c:	20000eac 	.word	0x20000eac
 8006a40:	20001dcc 	.word	0x20001dcc
 8006a44:	20000ed4 	.word	0x20000ed4
 8006a48:	20001de0 	.word	0x20001de0
 8006a4c:	20000efc 	.word	0x20000efc
 8006a50:	20001df4 	.word	0x20001df4
 8006a54:	20000f24 	.word	0x20000f24
 8006a58:	20001e08 	.word	0x20001e08
 8006a5c:	20000f4c 	.word	0x20000f4c
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8006a60:	4ac6      	ldr	r2, [pc, #792]	@ (8006d7c <loadMenuTexts+0xda8>)
 8006a62:	4bc7      	ldr	r3, [pc, #796]	@ (8006d80 <loadMenuTexts+0xdac>)
 8006a64:	4614      	mov	r4, r2
 8006a66:	461d      	mov	r5, r3
 8006a68:	6828      	ldr	r0, [r5, #0]
 8006a6a:	6869      	ldr	r1, [r5, #4]
 8006a6c:	68aa      	ldr	r2, [r5, #8]
 8006a6e:	68eb      	ldr	r3, [r5, #12]
 8006a70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a72:	7c2b      	ldrb	r3, [r5, #16]
 8006a74:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8006a76:	4ac3      	ldr	r2, [pc, #780]	@ (8006d84 <loadMenuTexts+0xdb0>)
 8006a78:	4bc3      	ldr	r3, [pc, #780]	@ (8006d88 <loadMenuTexts+0xdb4>)
 8006a7a:	4614      	mov	r4, r2
 8006a7c:	461d      	mov	r5, r3
 8006a7e:	6828      	ldr	r0, [r5, #0]
 8006a80:	6869      	ldr	r1, [r5, #4]
 8006a82:	68aa      	ldr	r2, [r5, #8]
 8006a84:	68eb      	ldr	r3, [r5, #12]
 8006a86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a88:	7c2b      	ldrb	r3, [r5, #16]
 8006a8a:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8006a8c:	4abf      	ldr	r2, [pc, #764]	@ (8006d8c <loadMenuTexts+0xdb8>)
 8006a8e:	4bc0      	ldr	r3, [pc, #768]	@ (8006d90 <loadMenuTexts+0xdbc>)
 8006a90:	4614      	mov	r4, r2
 8006a92:	461d      	mov	r5, r3
 8006a94:	6828      	ldr	r0, [r5, #0]
 8006a96:	6869      	ldr	r1, [r5, #4]
 8006a98:	68aa      	ldr	r2, [r5, #8]
 8006a9a:	68eb      	ldr	r3, [r5, #12]
 8006a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a9e:	7c2b      	ldrb	r3, [r5, #16]
 8006aa0:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 8006aa2:	4abc      	ldr	r2, [pc, #752]	@ (8006d94 <loadMenuTexts+0xdc0>)
 8006aa4:	4bbc      	ldr	r3, [pc, #752]	@ (8006d98 <loadMenuTexts+0xdc4>)
 8006aa6:	4614      	mov	r4, r2
 8006aa8:	461d      	mov	r5, r3
 8006aaa:	6828      	ldr	r0, [r5, #0]
 8006aac:	6869      	ldr	r1, [r5, #4]
 8006aae:	68aa      	ldr	r2, [r5, #8]
 8006ab0:	68eb      	ldr	r3, [r5, #12]
 8006ab2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ab4:	7c2b      	ldrb	r3, [r5, #16]
 8006ab6:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8006ab8:	4ab8      	ldr	r2, [pc, #736]	@ (8006d9c <loadMenuTexts+0xdc8>)
 8006aba:	4bb9      	ldr	r3, [pc, #740]	@ (8006da0 <loadMenuTexts+0xdcc>)
 8006abc:	4614      	mov	r4, r2
 8006abe:	461d      	mov	r5, r3
 8006ac0:	6828      	ldr	r0, [r5, #0]
 8006ac2:	6869      	ldr	r1, [r5, #4]
 8006ac4:	68aa      	ldr	r2, [r5, #8]
 8006ac6:	68eb      	ldr	r3, [r5, #12]
 8006ac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aca:	7c2b      	ldrb	r3, [r5, #16]
 8006acc:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 8006ace:	4ab5      	ldr	r2, [pc, #724]	@ (8006da4 <loadMenuTexts+0xdd0>)
 8006ad0:	4bb5      	ldr	r3, [pc, #724]	@ (8006da8 <loadMenuTexts+0xdd4>)
 8006ad2:	4614      	mov	r4, r2
 8006ad4:	461d      	mov	r5, r3
 8006ad6:	6828      	ldr	r0, [r5, #0]
 8006ad8:	6869      	ldr	r1, [r5, #4]
 8006ada:	68aa      	ldr	r2, [r5, #8]
 8006adc:	68eb      	ldr	r3, [r5, #12]
 8006ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ae0:	7c2b      	ldrb	r3, [r5, #16]
 8006ae2:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 8006ae4:	4ab1      	ldr	r2, [pc, #708]	@ (8006dac <loadMenuTexts+0xdd8>)
 8006ae6:	4bb2      	ldr	r3, [pc, #712]	@ (8006db0 <loadMenuTexts+0xddc>)
 8006ae8:	4614      	mov	r4, r2
 8006aea:	461d      	mov	r5, r3
 8006aec:	6828      	ldr	r0, [r5, #0]
 8006aee:	6869      	ldr	r1, [r5, #4]
 8006af0:	68aa      	ldr	r2, [r5, #8]
 8006af2:	68eb      	ldr	r3, [r5, #12]
 8006af4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006af6:	7c2b      	ldrb	r3, [r5, #16]
 8006af8:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8006afa:	4aae      	ldr	r2, [pc, #696]	@ (8006db4 <loadMenuTexts+0xde0>)
 8006afc:	4bae      	ldr	r3, [pc, #696]	@ (8006db8 <loadMenuTexts+0xde4>)
 8006afe:	4614      	mov	r4, r2
 8006b00:	461d      	mov	r5, r3
 8006b02:	6828      	ldr	r0, [r5, #0]
 8006b04:	6869      	ldr	r1, [r5, #4]
 8006b06:	68aa      	ldr	r2, [r5, #8]
 8006b08:	68eb      	ldr	r3, [r5, #12]
 8006b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b0c:	7c2b      	ldrb	r3, [r5, #16]
 8006b0e:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8006b10:	4aaa      	ldr	r2, [pc, #680]	@ (8006dbc <loadMenuTexts+0xde8>)
 8006b12:	4bab      	ldr	r3, [pc, #684]	@ (8006dc0 <loadMenuTexts+0xdec>)
 8006b14:	4614      	mov	r4, r2
 8006b16:	461d      	mov	r5, r3
 8006b18:	6828      	ldr	r0, [r5, #0]
 8006b1a:	6869      	ldr	r1, [r5, #4]
 8006b1c:	68aa      	ldr	r2, [r5, #8]
 8006b1e:	68eb      	ldr	r3, [r5, #12]
 8006b20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b22:	7c2b      	ldrb	r3, [r5, #16]
 8006b24:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8006b26:	4aa7      	ldr	r2, [pc, #668]	@ (8006dc4 <loadMenuTexts+0xdf0>)
 8006b28:	4ba7      	ldr	r3, [pc, #668]	@ (8006dc8 <loadMenuTexts+0xdf4>)
 8006b2a:	4614      	mov	r4, r2
 8006b2c:	461d      	mov	r5, r3
 8006b2e:	6828      	ldr	r0, [r5, #0]
 8006b30:	6869      	ldr	r1, [r5, #4]
 8006b32:	68aa      	ldr	r2, [r5, #8]
 8006b34:	68eb      	ldr	r3, [r5, #12]
 8006b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b38:	7c2b      	ldrb	r3, [r5, #16]
 8006b3a:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8006b3c:	4aa3      	ldr	r2, [pc, #652]	@ (8006dcc <loadMenuTexts+0xdf8>)
 8006b3e:	4ba4      	ldr	r3, [pc, #656]	@ (8006dd0 <loadMenuTexts+0xdfc>)
 8006b40:	4614      	mov	r4, r2
 8006b42:	461d      	mov	r5, r3
 8006b44:	6828      	ldr	r0, [r5, #0]
 8006b46:	6869      	ldr	r1, [r5, #4]
 8006b48:	68aa      	ldr	r2, [r5, #8]
 8006b4a:	68eb      	ldr	r3, [r5, #12]
 8006b4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b4e:	7c2b      	ldrb	r3, [r5, #16]
 8006b50:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8006b52:	4aa0      	ldr	r2, [pc, #640]	@ (8006dd4 <loadMenuTexts+0xe00>)
 8006b54:	4ba0      	ldr	r3, [pc, #640]	@ (8006dd8 <loadMenuTexts+0xe04>)
 8006b56:	4614      	mov	r4, r2
 8006b58:	461d      	mov	r5, r3
 8006b5a:	6828      	ldr	r0, [r5, #0]
 8006b5c:	6869      	ldr	r1, [r5, #4]
 8006b5e:	68aa      	ldr	r2, [r5, #8]
 8006b60:	68eb      	ldr	r3, [r5, #12]
 8006b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b64:	7c2b      	ldrb	r3, [r5, #16]
 8006b66:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8006b68:	4a9c      	ldr	r2, [pc, #624]	@ (8006ddc <loadMenuTexts+0xe08>)
 8006b6a:	4b9d      	ldr	r3, [pc, #628]	@ (8006de0 <loadMenuTexts+0xe0c>)
 8006b6c:	4614      	mov	r4, r2
 8006b6e:	461d      	mov	r5, r3
 8006b70:	6828      	ldr	r0, [r5, #0]
 8006b72:	6869      	ldr	r1, [r5, #4]
 8006b74:	68aa      	ldr	r2, [r5, #8]
 8006b76:	68eb      	ldr	r3, [r5, #12]
 8006b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b7a:	7c2b      	ldrb	r3, [r5, #16]
 8006b7c:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8006b7e:	4a99      	ldr	r2, [pc, #612]	@ (8006de4 <loadMenuTexts+0xe10>)
 8006b80:	4b99      	ldr	r3, [pc, #612]	@ (8006de8 <loadMenuTexts+0xe14>)
 8006b82:	4614      	mov	r4, r2
 8006b84:	461d      	mov	r5, r3
 8006b86:	6828      	ldr	r0, [r5, #0]
 8006b88:	6869      	ldr	r1, [r5, #4]
 8006b8a:	68aa      	ldr	r2, [r5, #8]
 8006b8c:	68eb      	ldr	r3, [r5, #12]
 8006b8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b90:	7c2b      	ldrb	r3, [r5, #16]
 8006b92:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8006b94:	4a95      	ldr	r2, [pc, #596]	@ (8006dec <loadMenuTexts+0xe18>)
 8006b96:	4b96      	ldr	r3, [pc, #600]	@ (8006df0 <loadMenuTexts+0xe1c>)
 8006b98:	4614      	mov	r4, r2
 8006b9a:	461d      	mov	r5, r3
 8006b9c:	6828      	ldr	r0, [r5, #0]
 8006b9e:	6869      	ldr	r1, [r5, #4]
 8006ba0:	68aa      	ldr	r2, [r5, #8]
 8006ba2:	68eb      	ldr	r3, [r5, #12]
 8006ba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ba6:	7c2b      	ldrb	r3, [r5, #16]
 8006ba8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8006baa:	4a92      	ldr	r2, [pc, #584]	@ (8006df4 <loadMenuTexts+0xe20>)
 8006bac:	4b92      	ldr	r3, [pc, #584]	@ (8006df8 <loadMenuTexts+0xe24>)
 8006bae:	4614      	mov	r4, r2
 8006bb0:	461d      	mov	r5, r3
 8006bb2:	6828      	ldr	r0, [r5, #0]
 8006bb4:	6869      	ldr	r1, [r5, #4]
 8006bb6:	68aa      	ldr	r2, [r5, #8]
 8006bb8:	68eb      	ldr	r3, [r5, #12]
 8006bba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bbc:	7c2b      	ldrb	r3, [r5, #16]
 8006bbe:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8006bc0:	4a8e      	ldr	r2, [pc, #568]	@ (8006dfc <loadMenuTexts+0xe28>)
 8006bc2:	4b8f      	ldr	r3, [pc, #572]	@ (8006e00 <loadMenuTexts+0xe2c>)
 8006bc4:	4614      	mov	r4, r2
 8006bc6:	461d      	mov	r5, r3
 8006bc8:	6828      	ldr	r0, [r5, #0]
 8006bca:	6869      	ldr	r1, [r5, #4]
 8006bcc:	68aa      	ldr	r2, [r5, #8]
 8006bce:	68eb      	ldr	r3, [r5, #12]
 8006bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bd2:	7c2b      	ldrb	r3, [r5, #16]
 8006bd4:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8006bd6:	4a8b      	ldr	r2, [pc, #556]	@ (8006e04 <loadMenuTexts+0xe30>)
 8006bd8:	4b8b      	ldr	r3, [pc, #556]	@ (8006e08 <loadMenuTexts+0xe34>)
 8006bda:	4614      	mov	r4, r2
 8006bdc:	461d      	mov	r5, r3
 8006bde:	6828      	ldr	r0, [r5, #0]
 8006be0:	6869      	ldr	r1, [r5, #4]
 8006be2:	68aa      	ldr	r2, [r5, #8]
 8006be4:	68eb      	ldr	r3, [r5, #12]
 8006be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006be8:	7c2b      	ldrb	r3, [r5, #16]
 8006bea:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8006bec:	4a87      	ldr	r2, [pc, #540]	@ (8006e0c <loadMenuTexts+0xe38>)
 8006bee:	4b88      	ldr	r3, [pc, #544]	@ (8006e10 <loadMenuTexts+0xe3c>)
 8006bf0:	4614      	mov	r4, r2
 8006bf2:	461d      	mov	r5, r3
 8006bf4:	6828      	ldr	r0, [r5, #0]
 8006bf6:	6869      	ldr	r1, [r5, #4]
 8006bf8:	68aa      	ldr	r2, [r5, #8]
 8006bfa:	68eb      	ldr	r3, [r5, #12]
 8006bfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bfe:	7c2b      	ldrb	r3, [r5, #16]
 8006c00:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8006c02:	4a84      	ldr	r2, [pc, #528]	@ (8006e14 <loadMenuTexts+0xe40>)
 8006c04:	4b84      	ldr	r3, [pc, #528]	@ (8006e18 <loadMenuTexts+0xe44>)
 8006c06:	4614      	mov	r4, r2
 8006c08:	461d      	mov	r5, r3
 8006c0a:	6828      	ldr	r0, [r5, #0]
 8006c0c:	6869      	ldr	r1, [r5, #4]
 8006c0e:	68aa      	ldr	r2, [r5, #8]
 8006c10:	68eb      	ldr	r3, [r5, #12]
 8006c12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c14:	7c2b      	ldrb	r3, [r5, #16]
 8006c16:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8006c18:	4a80      	ldr	r2, [pc, #512]	@ (8006e1c <loadMenuTexts+0xe48>)
 8006c1a:	4b81      	ldr	r3, [pc, #516]	@ (8006e20 <loadMenuTexts+0xe4c>)
 8006c1c:	4614      	mov	r4, r2
 8006c1e:	461d      	mov	r5, r3
 8006c20:	6828      	ldr	r0, [r5, #0]
 8006c22:	6869      	ldr	r1, [r5, #4]
 8006c24:	68aa      	ldr	r2, [r5, #8]
 8006c26:	68eb      	ldr	r3, [r5, #12]
 8006c28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c2a:	7c2b      	ldrb	r3, [r5, #16]
 8006c2c:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8006c2e:	4a7d      	ldr	r2, [pc, #500]	@ (8006e24 <loadMenuTexts+0xe50>)
 8006c30:	4b7d      	ldr	r3, [pc, #500]	@ (8006e28 <loadMenuTexts+0xe54>)
 8006c32:	4614      	mov	r4, r2
 8006c34:	461d      	mov	r5, r3
 8006c36:	6828      	ldr	r0, [r5, #0]
 8006c38:	6869      	ldr	r1, [r5, #4]
 8006c3a:	68aa      	ldr	r2, [r5, #8]
 8006c3c:	68eb      	ldr	r3, [r5, #12]
 8006c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c40:	7c2b      	ldrb	r3, [r5, #16]
 8006c42:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8006c44:	4a79      	ldr	r2, [pc, #484]	@ (8006e2c <loadMenuTexts+0xe58>)
 8006c46:	4b7a      	ldr	r3, [pc, #488]	@ (8006e30 <loadMenuTexts+0xe5c>)
 8006c48:	4614      	mov	r4, r2
 8006c4a:	461d      	mov	r5, r3
 8006c4c:	6828      	ldr	r0, [r5, #0]
 8006c4e:	6869      	ldr	r1, [r5, #4]
 8006c50:	68aa      	ldr	r2, [r5, #8]
 8006c52:	68eb      	ldr	r3, [r5, #12]
 8006c54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c56:	7c2b      	ldrb	r3, [r5, #16]
 8006c58:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8006c5a:	4a76      	ldr	r2, [pc, #472]	@ (8006e34 <loadMenuTexts+0xe60>)
 8006c5c:	4b76      	ldr	r3, [pc, #472]	@ (8006e38 <loadMenuTexts+0xe64>)
 8006c5e:	4614      	mov	r4, r2
 8006c60:	461d      	mov	r5, r3
 8006c62:	6828      	ldr	r0, [r5, #0]
 8006c64:	6869      	ldr	r1, [r5, #4]
 8006c66:	68aa      	ldr	r2, [r5, #8]
 8006c68:	68eb      	ldr	r3, [r5, #12]
 8006c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c6c:	7c2b      	ldrb	r3, [r5, #16]
 8006c6e:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8006c70:	4a72      	ldr	r2, [pc, #456]	@ (8006e3c <loadMenuTexts+0xe68>)
 8006c72:	4b73      	ldr	r3, [pc, #460]	@ (8006e40 <loadMenuTexts+0xe6c>)
 8006c74:	4614      	mov	r4, r2
 8006c76:	461d      	mov	r5, r3
 8006c78:	6828      	ldr	r0, [r5, #0]
 8006c7a:	6869      	ldr	r1, [r5, #4]
 8006c7c:	68aa      	ldr	r2, [r5, #8]
 8006c7e:	68eb      	ldr	r3, [r5, #12]
 8006c80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c82:	7c2b      	ldrb	r3, [r5, #16]
 8006c84:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8006c86:	4a6f      	ldr	r2, [pc, #444]	@ (8006e44 <loadMenuTexts+0xe70>)
 8006c88:	4b6f      	ldr	r3, [pc, #444]	@ (8006e48 <loadMenuTexts+0xe74>)
 8006c8a:	4614      	mov	r4, r2
 8006c8c:	461d      	mov	r5, r3
 8006c8e:	6828      	ldr	r0, [r5, #0]
 8006c90:	6869      	ldr	r1, [r5, #4]
 8006c92:	68aa      	ldr	r2, [r5, #8]
 8006c94:	68eb      	ldr	r3, [r5, #12]
 8006c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c98:	7c2b      	ldrb	r3, [r5, #16]
 8006c9a:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8006c9c:	4a6b      	ldr	r2, [pc, #428]	@ (8006e4c <loadMenuTexts+0xe78>)
 8006c9e:	4b6c      	ldr	r3, [pc, #432]	@ (8006e50 <loadMenuTexts+0xe7c>)
 8006ca0:	4614      	mov	r4, r2
 8006ca2:	461d      	mov	r5, r3
 8006ca4:	6828      	ldr	r0, [r5, #0]
 8006ca6:	6869      	ldr	r1, [r5, #4]
 8006ca8:	68aa      	ldr	r2, [r5, #8]
 8006caa:	68eb      	ldr	r3, [r5, #12]
 8006cac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cae:	7c2b      	ldrb	r3, [r5, #16]
 8006cb0:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8006cb2:	4a68      	ldr	r2, [pc, #416]	@ (8006e54 <loadMenuTexts+0xe80>)
 8006cb4:	4b68      	ldr	r3, [pc, #416]	@ (8006e58 <loadMenuTexts+0xe84>)
 8006cb6:	4614      	mov	r4, r2
 8006cb8:	461d      	mov	r5, r3
 8006cba:	6828      	ldr	r0, [r5, #0]
 8006cbc:	6869      	ldr	r1, [r5, #4]
 8006cbe:	68aa      	ldr	r2, [r5, #8]
 8006cc0:	68eb      	ldr	r3, [r5, #12]
 8006cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cc4:	7c2b      	ldrb	r3, [r5, #16]
 8006cc6:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8006cc8:	4a64      	ldr	r2, [pc, #400]	@ (8006e5c <loadMenuTexts+0xe88>)
 8006cca:	4b65      	ldr	r3, [pc, #404]	@ (8006e60 <loadMenuTexts+0xe8c>)
 8006ccc:	4614      	mov	r4, r2
 8006cce:	461d      	mov	r5, r3
 8006cd0:	6828      	ldr	r0, [r5, #0]
 8006cd2:	6869      	ldr	r1, [r5, #4]
 8006cd4:	68aa      	ldr	r2, [r5, #8]
 8006cd6:	68eb      	ldr	r3, [r5, #12]
 8006cd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cda:	7c2b      	ldrb	r3, [r5, #16]
 8006cdc:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 8006cde:	4a61      	ldr	r2, [pc, #388]	@ (8006e64 <loadMenuTexts+0xe90>)
 8006ce0:	4b61      	ldr	r3, [pc, #388]	@ (8006e68 <loadMenuTexts+0xe94>)
 8006ce2:	4614      	mov	r4, r2
 8006ce4:	461d      	mov	r5, r3
 8006ce6:	6828      	ldr	r0, [r5, #0]
 8006ce8:	6869      	ldr	r1, [r5, #4]
 8006cea:	68aa      	ldr	r2, [r5, #8]
 8006cec:	68eb      	ldr	r3, [r5, #12]
 8006cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cf0:	7c2b      	ldrb	r3, [r5, #16]
 8006cf2:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8006cf4:	4a5d      	ldr	r2, [pc, #372]	@ (8006e6c <loadMenuTexts+0xe98>)
 8006cf6:	4b5e      	ldr	r3, [pc, #376]	@ (8006e70 <loadMenuTexts+0xe9c>)
 8006cf8:	4614      	mov	r4, r2
 8006cfa:	461d      	mov	r5, r3
 8006cfc:	6828      	ldr	r0, [r5, #0]
 8006cfe:	6869      	ldr	r1, [r5, #4]
 8006d00:	68aa      	ldr	r2, [r5, #8]
 8006d02:	68eb      	ldr	r3, [r5, #12]
 8006d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d06:	7c2b      	ldrb	r3, [r5, #16]
 8006d08:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8006d0a:	4a5a      	ldr	r2, [pc, #360]	@ (8006e74 <loadMenuTexts+0xea0>)
 8006d0c:	4b5a      	ldr	r3, [pc, #360]	@ (8006e78 <loadMenuTexts+0xea4>)
 8006d0e:	4614      	mov	r4, r2
 8006d10:	461d      	mov	r5, r3
 8006d12:	6828      	ldr	r0, [r5, #0]
 8006d14:	6869      	ldr	r1, [r5, #4]
 8006d16:	68aa      	ldr	r2, [r5, #8]
 8006d18:	68eb      	ldr	r3, [r5, #12]
 8006d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d1c:	7c2b      	ldrb	r3, [r5, #16]
 8006d1e:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 8006d20:	4a56      	ldr	r2, [pc, #344]	@ (8006e7c <loadMenuTexts+0xea8>)
 8006d22:	4b57      	ldr	r3, [pc, #348]	@ (8006e80 <loadMenuTexts+0xeac>)
 8006d24:	4614      	mov	r4, r2
 8006d26:	461d      	mov	r5, r3
 8006d28:	6828      	ldr	r0, [r5, #0]
 8006d2a:	6869      	ldr	r1, [r5, #4]
 8006d2c:	68aa      	ldr	r2, [r5, #8]
 8006d2e:	68eb      	ldr	r3, [r5, #12]
 8006d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d32:	7c2b      	ldrb	r3, [r5, #16]
 8006d34:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8006d36:	4a53      	ldr	r2, [pc, #332]	@ (8006e84 <loadMenuTexts+0xeb0>)
 8006d38:	4b53      	ldr	r3, [pc, #332]	@ (8006e88 <loadMenuTexts+0xeb4>)
 8006d3a:	4614      	mov	r4, r2
 8006d3c:	461d      	mov	r5, r3
 8006d3e:	6828      	ldr	r0, [r5, #0]
 8006d40:	6869      	ldr	r1, [r5, #4]
 8006d42:	68aa      	ldr	r2, [r5, #8]
 8006d44:	68eb      	ldr	r3, [r5, #12]
 8006d46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d48:	7c2b      	ldrb	r3, [r5, #16]
 8006d4a:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8006d4c:	4a4f      	ldr	r2, [pc, #316]	@ (8006e8c <loadMenuTexts+0xeb8>)
 8006d4e:	4b50      	ldr	r3, [pc, #320]	@ (8006e90 <loadMenuTexts+0xebc>)
 8006d50:	4614      	mov	r4, r2
 8006d52:	461d      	mov	r5, r3
 8006d54:	6828      	ldr	r0, [r5, #0]
 8006d56:	6869      	ldr	r1, [r5, #4]
 8006d58:	68aa      	ldr	r2, [r5, #8]
 8006d5a:	68eb      	ldr	r3, [r5, #12]
 8006d5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d5e:	7c2b      	ldrb	r3, [r5, #16]
 8006d60:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8006d62:	4a4c      	ldr	r2, [pc, #304]	@ (8006e94 <loadMenuTexts+0xec0>)
 8006d64:	4b4c      	ldr	r3, [pc, #304]	@ (8006e98 <loadMenuTexts+0xec4>)
 8006d66:	4614      	mov	r4, r2
 8006d68:	461d      	mov	r5, r3
 8006d6a:	6828      	ldr	r0, [r5, #0]
 8006d6c:	6869      	ldr	r1, [r5, #4]
 8006d6e:	68aa      	ldr	r2, [r5, #8]
 8006d70:	68eb      	ldr	r3, [r5, #12]
 8006d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d74:	7c2b      	ldrb	r3, [r5, #16]
 8006d76:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8006d78:	4a48      	ldr	r2, [pc, #288]	@ (8006e9c <loadMenuTexts+0xec8>)
 8006d7a:	e091      	b.n	8006ea0 <loadMenuTexts+0xecc>
 8006d7c:	20001728 	.word	0x20001728
 8006d80:	20000704 	.word	0x20000704
 8006d84:	2000173c 	.word	0x2000173c
 8006d88:	20000718 	.word	0x20000718
 8006d8c:	20001750 	.word	0x20001750
 8006d90:	2000072c 	.word	0x2000072c
 8006d94:	20001764 	.word	0x20001764
 8006d98:	20000740 	.word	0x20000740
 8006d9c:	20001778 	.word	0x20001778
 8006da0:	20000754 	.word	0x20000754
 8006da4:	2000178c 	.word	0x2000178c
 8006da8:	20000768 	.word	0x20000768
 8006dac:	200017a0 	.word	0x200017a0
 8006db0:	2000077c 	.word	0x2000077c
 8006db4:	200017b4 	.word	0x200017b4
 8006db8:	20000790 	.word	0x20000790
 8006dbc:	200017c8 	.word	0x200017c8
 8006dc0:	200007a4 	.word	0x200007a4
 8006dc4:	200017dc 	.word	0x200017dc
 8006dc8:	200007b8 	.word	0x200007b8
 8006dcc:	200017f0 	.word	0x200017f0
 8006dd0:	200007cc 	.word	0x200007cc
 8006dd4:	20001804 	.word	0x20001804
 8006dd8:	200007e0 	.word	0x200007e0
 8006ddc:	20001818 	.word	0x20001818
 8006de0:	200007f4 	.word	0x200007f4
 8006de4:	2000182c 	.word	0x2000182c
 8006de8:	20000808 	.word	0x20000808
 8006dec:	20001840 	.word	0x20001840
 8006df0:	2000081c 	.word	0x2000081c
 8006df4:	20001854 	.word	0x20001854
 8006df8:	20000830 	.word	0x20000830
 8006dfc:	20001868 	.word	0x20001868
 8006e00:	20000844 	.word	0x20000844
 8006e04:	2000187c 	.word	0x2000187c
 8006e08:	20000858 	.word	0x20000858
 8006e0c:	20001890 	.word	0x20001890
 8006e10:	2000086c 	.word	0x2000086c
 8006e14:	200018a4 	.word	0x200018a4
 8006e18:	20000880 	.word	0x20000880
 8006e1c:	200018b8 	.word	0x200018b8
 8006e20:	20000894 	.word	0x20000894
 8006e24:	200018cc 	.word	0x200018cc
 8006e28:	200008a8 	.word	0x200008a8
 8006e2c:	200018e0 	.word	0x200018e0
 8006e30:	200008bc 	.word	0x200008bc
 8006e34:	200018f4 	.word	0x200018f4
 8006e38:	200008d0 	.word	0x200008d0
 8006e3c:	20001908 	.word	0x20001908
 8006e40:	200008e4 	.word	0x200008e4
 8006e44:	2000191c 	.word	0x2000191c
 8006e48:	200008f8 	.word	0x200008f8
 8006e4c:	20001930 	.word	0x20001930
 8006e50:	2000090c 	.word	0x2000090c
 8006e54:	20001944 	.word	0x20001944
 8006e58:	20000920 	.word	0x20000920
 8006e5c:	20001958 	.word	0x20001958
 8006e60:	20000934 	.word	0x20000934
 8006e64:	2000196c 	.word	0x2000196c
 8006e68:	20000948 	.word	0x20000948
 8006e6c:	20001980 	.word	0x20001980
 8006e70:	2000095c 	.word	0x2000095c
 8006e74:	20001994 	.word	0x20001994
 8006e78:	20000970 	.word	0x20000970
 8006e7c:	200019a8 	.word	0x200019a8
 8006e80:	20000984 	.word	0x20000984
 8006e84:	200019bc 	.word	0x200019bc
 8006e88:	20000998 	.word	0x20000998
 8006e8c:	200019d0 	.word	0x200019d0
 8006e90:	200009ac 	.word	0x200009ac
 8006e94:	200019e4 	.word	0x200019e4
 8006e98:	200009c0 	.word	0x200009c0
 8006e9c:	200019f8 	.word	0x200019f8
 8006ea0:	4bc7      	ldr	r3, [pc, #796]	@ (80071c0 <loadMenuTexts+0x11ec>)
 8006ea2:	4614      	mov	r4, r2
 8006ea4:	461d      	mov	r5, r3
 8006ea6:	6828      	ldr	r0, [r5, #0]
 8006ea8:	6869      	ldr	r1, [r5, #4]
 8006eaa:	68aa      	ldr	r2, [r5, #8]
 8006eac:	68eb      	ldr	r3, [r5, #12]
 8006eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eb0:	7c2b      	ldrb	r3, [r5, #16]
 8006eb2:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8006eb4:	4ac3      	ldr	r2, [pc, #780]	@ (80071c4 <loadMenuTexts+0x11f0>)
 8006eb6:	4bc4      	ldr	r3, [pc, #784]	@ (80071c8 <loadMenuTexts+0x11f4>)
 8006eb8:	4614      	mov	r4, r2
 8006eba:	461d      	mov	r5, r3
 8006ebc:	6828      	ldr	r0, [r5, #0]
 8006ebe:	6869      	ldr	r1, [r5, #4]
 8006ec0:	68aa      	ldr	r2, [r5, #8]
 8006ec2:	68eb      	ldr	r3, [r5, #12]
 8006ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ec6:	7c2b      	ldrb	r3, [r5, #16]
 8006ec8:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8006eca:	4ac0      	ldr	r2, [pc, #768]	@ (80071cc <loadMenuTexts+0x11f8>)
 8006ecc:	4bc0      	ldr	r3, [pc, #768]	@ (80071d0 <loadMenuTexts+0x11fc>)
 8006ece:	4614      	mov	r4, r2
 8006ed0:	461d      	mov	r5, r3
 8006ed2:	6828      	ldr	r0, [r5, #0]
 8006ed4:	6869      	ldr	r1, [r5, #4]
 8006ed6:	68aa      	ldr	r2, [r5, #8]
 8006ed8:	68eb      	ldr	r3, [r5, #12]
 8006eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006edc:	7c2b      	ldrb	r3, [r5, #16]
 8006ede:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8006ee0:	4abc      	ldr	r2, [pc, #752]	@ (80071d4 <loadMenuTexts+0x1200>)
 8006ee2:	4bbd      	ldr	r3, [pc, #756]	@ (80071d8 <loadMenuTexts+0x1204>)
 8006ee4:	4614      	mov	r4, r2
 8006ee6:	461d      	mov	r5, r3
 8006ee8:	6828      	ldr	r0, [r5, #0]
 8006eea:	6869      	ldr	r1, [r5, #4]
 8006eec:	68aa      	ldr	r2, [r5, #8]
 8006eee:	68eb      	ldr	r3, [r5, #12]
 8006ef0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ef2:	7c2b      	ldrb	r3, [r5, #16]
 8006ef4:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 8006ef6:	4ab9      	ldr	r2, [pc, #740]	@ (80071dc <loadMenuTexts+0x1208>)
 8006ef8:	4bb9      	ldr	r3, [pc, #740]	@ (80071e0 <loadMenuTexts+0x120c>)
 8006efa:	4614      	mov	r4, r2
 8006efc:	461d      	mov	r5, r3
 8006efe:	6828      	ldr	r0, [r5, #0]
 8006f00:	6869      	ldr	r1, [r5, #4]
 8006f02:	68aa      	ldr	r2, [r5, #8]
 8006f04:	68eb      	ldr	r3, [r5, #12]
 8006f06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f08:	7c2b      	ldrb	r3, [r5, #16]
 8006f0a:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8006f0c:	4ab5      	ldr	r2, [pc, #724]	@ (80071e4 <loadMenuTexts+0x1210>)
 8006f0e:	4bb6      	ldr	r3, [pc, #728]	@ (80071e8 <loadMenuTexts+0x1214>)
 8006f10:	4614      	mov	r4, r2
 8006f12:	461d      	mov	r5, r3
 8006f14:	6828      	ldr	r0, [r5, #0]
 8006f16:	6869      	ldr	r1, [r5, #4]
 8006f18:	68aa      	ldr	r2, [r5, #8]
 8006f1a:	68eb      	ldr	r3, [r5, #12]
 8006f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f1e:	7c2b      	ldrb	r3, [r5, #16]
 8006f20:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 8006f22:	4ab2      	ldr	r2, [pc, #712]	@ (80071ec <loadMenuTexts+0x1218>)
 8006f24:	4bb2      	ldr	r3, [pc, #712]	@ (80071f0 <loadMenuTexts+0x121c>)
 8006f26:	4614      	mov	r4, r2
 8006f28:	461d      	mov	r5, r3
 8006f2a:	6828      	ldr	r0, [r5, #0]
 8006f2c:	6869      	ldr	r1, [r5, #4]
 8006f2e:	68aa      	ldr	r2, [r5, #8]
 8006f30:	68eb      	ldr	r3, [r5, #12]
 8006f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f34:	7c2b      	ldrb	r3, [r5, #16]
 8006f36:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 8006f38:	4aae      	ldr	r2, [pc, #696]	@ (80071f4 <loadMenuTexts+0x1220>)
 8006f3a:	4baf      	ldr	r3, [pc, #700]	@ (80071f8 <loadMenuTexts+0x1224>)
 8006f3c:	4614      	mov	r4, r2
 8006f3e:	461d      	mov	r5, r3
 8006f40:	6828      	ldr	r0, [r5, #0]
 8006f42:	6869      	ldr	r1, [r5, #4]
 8006f44:	68aa      	ldr	r2, [r5, #8]
 8006f46:	68eb      	ldr	r3, [r5, #12]
 8006f48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f4a:	7c2b      	ldrb	r3, [r5, #16]
 8006f4c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 8006f4e:	4aab      	ldr	r2, [pc, #684]	@ (80071fc <loadMenuTexts+0x1228>)
 8006f50:	4bab      	ldr	r3, [pc, #684]	@ (8007200 <loadMenuTexts+0x122c>)
 8006f52:	4614      	mov	r4, r2
 8006f54:	461d      	mov	r5, r3
 8006f56:	6828      	ldr	r0, [r5, #0]
 8006f58:	6869      	ldr	r1, [r5, #4]
 8006f5a:	68aa      	ldr	r2, [r5, #8]
 8006f5c:	68eb      	ldr	r3, [r5, #12]
 8006f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f60:	7c2b      	ldrb	r3, [r5, #16]
 8006f62:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8006f64:	4aa7      	ldr	r2, [pc, #668]	@ (8007204 <loadMenuTexts+0x1230>)
 8006f66:	4ba8      	ldr	r3, [pc, #672]	@ (8007208 <loadMenuTexts+0x1234>)
 8006f68:	4614      	mov	r4, r2
 8006f6a:	461d      	mov	r5, r3
 8006f6c:	6828      	ldr	r0, [r5, #0]
 8006f6e:	6869      	ldr	r1, [r5, #4]
 8006f70:	68aa      	ldr	r2, [r5, #8]
 8006f72:	68eb      	ldr	r3, [r5, #12]
 8006f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f76:	7c2b      	ldrb	r3, [r5, #16]
 8006f78:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 8006f7a:	4aa4      	ldr	r2, [pc, #656]	@ (800720c <loadMenuTexts+0x1238>)
 8006f7c:	4ba4      	ldr	r3, [pc, #656]	@ (8007210 <loadMenuTexts+0x123c>)
 8006f7e:	4614      	mov	r4, r2
 8006f80:	461d      	mov	r5, r3
 8006f82:	6828      	ldr	r0, [r5, #0]
 8006f84:	6869      	ldr	r1, [r5, #4]
 8006f86:	68aa      	ldr	r2, [r5, #8]
 8006f88:	68eb      	ldr	r3, [r5, #12]
 8006f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f8c:	7c2b      	ldrb	r3, [r5, #16]
 8006f8e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8006f90:	4aa0      	ldr	r2, [pc, #640]	@ (8007214 <loadMenuTexts+0x1240>)
 8006f92:	4ba1      	ldr	r3, [pc, #644]	@ (8007218 <loadMenuTexts+0x1244>)
 8006f94:	4614      	mov	r4, r2
 8006f96:	461d      	mov	r5, r3
 8006f98:	6828      	ldr	r0, [r5, #0]
 8006f9a:	6869      	ldr	r1, [r5, #4]
 8006f9c:	68aa      	ldr	r2, [r5, #8]
 8006f9e:	68eb      	ldr	r3, [r5, #12]
 8006fa0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fa2:	7c2b      	ldrb	r3, [r5, #16]
 8006fa4:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 8006fa6:	4a9d      	ldr	r2, [pc, #628]	@ (800721c <loadMenuTexts+0x1248>)
 8006fa8:	4b9d      	ldr	r3, [pc, #628]	@ (8007220 <loadMenuTexts+0x124c>)
 8006faa:	4614      	mov	r4, r2
 8006fac:	461d      	mov	r5, r3
 8006fae:	6828      	ldr	r0, [r5, #0]
 8006fb0:	6869      	ldr	r1, [r5, #4]
 8006fb2:	68aa      	ldr	r2, [r5, #8]
 8006fb4:	68eb      	ldr	r3, [r5, #12]
 8006fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fb8:	7c2b      	ldrb	r3, [r5, #16]
 8006fba:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8006fbc:	4a99      	ldr	r2, [pc, #612]	@ (8007224 <loadMenuTexts+0x1250>)
 8006fbe:	4b9a      	ldr	r3, [pc, #616]	@ (8007228 <loadMenuTexts+0x1254>)
 8006fc0:	4614      	mov	r4, r2
 8006fc2:	461d      	mov	r5, r3
 8006fc4:	6828      	ldr	r0, [r5, #0]
 8006fc6:	6869      	ldr	r1, [r5, #4]
 8006fc8:	68aa      	ldr	r2, [r5, #8]
 8006fca:	68eb      	ldr	r3, [r5, #12]
 8006fcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fce:	7c2b      	ldrb	r3, [r5, #16]
 8006fd0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8006fd2:	4a96      	ldr	r2, [pc, #600]	@ (800722c <loadMenuTexts+0x1258>)
 8006fd4:	4b96      	ldr	r3, [pc, #600]	@ (8007230 <loadMenuTexts+0x125c>)
 8006fd6:	4614      	mov	r4, r2
 8006fd8:	461d      	mov	r5, r3
 8006fda:	6828      	ldr	r0, [r5, #0]
 8006fdc:	6869      	ldr	r1, [r5, #4]
 8006fde:	68aa      	ldr	r2, [r5, #8]
 8006fe0:	68eb      	ldr	r3, [r5, #12]
 8006fe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fe4:	7c2b      	ldrb	r3, [r5, #16]
 8006fe6:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8006fe8:	4a92      	ldr	r2, [pc, #584]	@ (8007234 <loadMenuTexts+0x1260>)
 8006fea:	4b93      	ldr	r3, [pc, #588]	@ (8007238 <loadMenuTexts+0x1264>)
 8006fec:	4614      	mov	r4, r2
 8006fee:	461d      	mov	r5, r3
 8006ff0:	6828      	ldr	r0, [r5, #0]
 8006ff2:	6869      	ldr	r1, [r5, #4]
 8006ff4:	68aa      	ldr	r2, [r5, #8]
 8006ff6:	68eb      	ldr	r3, [r5, #12]
 8006ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ffa:	7c2b      	ldrb	r3, [r5, #16]
 8006ffc:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8006ffe:	4a8f      	ldr	r2, [pc, #572]	@ (800723c <loadMenuTexts+0x1268>)
 8007000:	4b8f      	ldr	r3, [pc, #572]	@ (8007240 <loadMenuTexts+0x126c>)
 8007002:	4614      	mov	r4, r2
 8007004:	461d      	mov	r5, r3
 8007006:	6828      	ldr	r0, [r5, #0]
 8007008:	6869      	ldr	r1, [r5, #4]
 800700a:	68aa      	ldr	r2, [r5, #8]
 800700c:	68eb      	ldr	r3, [r5, #12]
 800700e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007010:	7c2b      	ldrb	r3, [r5, #16]
 8007012:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8007014:	4a8b      	ldr	r2, [pc, #556]	@ (8007244 <loadMenuTexts+0x1270>)
 8007016:	4b8c      	ldr	r3, [pc, #560]	@ (8007248 <loadMenuTexts+0x1274>)
 8007018:	4614      	mov	r4, r2
 800701a:	461d      	mov	r5, r3
 800701c:	6828      	ldr	r0, [r5, #0]
 800701e:	6869      	ldr	r1, [r5, #4]
 8007020:	68aa      	ldr	r2, [r5, #8]
 8007022:	68eb      	ldr	r3, [r5, #12]
 8007024:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007026:	7c2b      	ldrb	r3, [r5, #16]
 8007028:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 800702a:	4a88      	ldr	r2, [pc, #544]	@ (800724c <loadMenuTexts+0x1278>)
 800702c:	4b88      	ldr	r3, [pc, #544]	@ (8007250 <loadMenuTexts+0x127c>)
 800702e:	4614      	mov	r4, r2
 8007030:	461d      	mov	r5, r3
 8007032:	6828      	ldr	r0, [r5, #0]
 8007034:	6869      	ldr	r1, [r5, #4]
 8007036:	68aa      	ldr	r2, [r5, #8]
 8007038:	68eb      	ldr	r3, [r5, #12]
 800703a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800703c:	7c2b      	ldrb	r3, [r5, #16]
 800703e:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8007040:	4a84      	ldr	r2, [pc, #528]	@ (8007254 <loadMenuTexts+0x1280>)
 8007042:	4b85      	ldr	r3, [pc, #532]	@ (8007258 <loadMenuTexts+0x1284>)
 8007044:	4614      	mov	r4, r2
 8007046:	461d      	mov	r5, r3
 8007048:	6828      	ldr	r0, [r5, #0]
 800704a:	6869      	ldr	r1, [r5, #4]
 800704c:	68aa      	ldr	r2, [r5, #8]
 800704e:	68eb      	ldr	r3, [r5, #12]
 8007050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007052:	7c2b      	ldrb	r3, [r5, #16]
 8007054:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 8007056:	4a81      	ldr	r2, [pc, #516]	@ (800725c <loadMenuTexts+0x1288>)
 8007058:	4b81      	ldr	r3, [pc, #516]	@ (8007260 <loadMenuTexts+0x128c>)
 800705a:	4614      	mov	r4, r2
 800705c:	461d      	mov	r5, r3
 800705e:	6828      	ldr	r0, [r5, #0]
 8007060:	6869      	ldr	r1, [r5, #4]
 8007062:	68aa      	ldr	r2, [r5, #8]
 8007064:	68eb      	ldr	r3, [r5, #12]
 8007066:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007068:	7c2b      	ldrb	r3, [r5, #16]
 800706a:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 800706c:	4a7d      	ldr	r2, [pc, #500]	@ (8007264 <loadMenuTexts+0x1290>)
 800706e:	4b7e      	ldr	r3, [pc, #504]	@ (8007268 <loadMenuTexts+0x1294>)
 8007070:	4614      	mov	r4, r2
 8007072:	461d      	mov	r5, r3
 8007074:	6828      	ldr	r0, [r5, #0]
 8007076:	6869      	ldr	r1, [r5, #4]
 8007078:	68aa      	ldr	r2, [r5, #8]
 800707a:	68eb      	ldr	r3, [r5, #12]
 800707c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800707e:	7c2b      	ldrb	r3, [r5, #16]
 8007080:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 8007082:	4a7a      	ldr	r2, [pc, #488]	@ (800726c <loadMenuTexts+0x1298>)
 8007084:	4b7a      	ldr	r3, [pc, #488]	@ (8007270 <loadMenuTexts+0x129c>)
 8007086:	4614      	mov	r4, r2
 8007088:	461d      	mov	r5, r3
 800708a:	6828      	ldr	r0, [r5, #0]
 800708c:	6869      	ldr	r1, [r5, #4]
 800708e:	68aa      	ldr	r2, [r5, #8]
 8007090:	68eb      	ldr	r3, [r5, #12]
 8007092:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007094:	7c2b      	ldrb	r3, [r5, #16]
 8007096:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8007098:	4a76      	ldr	r2, [pc, #472]	@ (8007274 <loadMenuTexts+0x12a0>)
 800709a:	4b77      	ldr	r3, [pc, #476]	@ (8007278 <loadMenuTexts+0x12a4>)
 800709c:	4614      	mov	r4, r2
 800709e:	461d      	mov	r5, r3
 80070a0:	6828      	ldr	r0, [r5, #0]
 80070a2:	6869      	ldr	r1, [r5, #4]
 80070a4:	68aa      	ldr	r2, [r5, #8]
 80070a6:	68eb      	ldr	r3, [r5, #12]
 80070a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070aa:	7c2b      	ldrb	r3, [r5, #16]
 80070ac:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 80070ae:	4a73      	ldr	r2, [pc, #460]	@ (800727c <loadMenuTexts+0x12a8>)
 80070b0:	4b73      	ldr	r3, [pc, #460]	@ (8007280 <loadMenuTexts+0x12ac>)
 80070b2:	4614      	mov	r4, r2
 80070b4:	461d      	mov	r5, r3
 80070b6:	6828      	ldr	r0, [r5, #0]
 80070b8:	6869      	ldr	r1, [r5, #4]
 80070ba:	68aa      	ldr	r2, [r5, #8]
 80070bc:	68eb      	ldr	r3, [r5, #12]
 80070be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070c0:	7c2b      	ldrb	r3, [r5, #16]
 80070c2:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 80070c4:	4a6f      	ldr	r2, [pc, #444]	@ (8007284 <loadMenuTexts+0x12b0>)
 80070c6:	4b70      	ldr	r3, [pc, #448]	@ (8007288 <loadMenuTexts+0x12b4>)
 80070c8:	4614      	mov	r4, r2
 80070ca:	461d      	mov	r5, r3
 80070cc:	6828      	ldr	r0, [r5, #0]
 80070ce:	6869      	ldr	r1, [r5, #4]
 80070d0:	68aa      	ldr	r2, [r5, #8]
 80070d2:	68eb      	ldr	r3, [r5, #12]
 80070d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070d6:	7c2b      	ldrb	r3, [r5, #16]
 80070d8:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 80070da:	4a6c      	ldr	r2, [pc, #432]	@ (800728c <loadMenuTexts+0x12b8>)
 80070dc:	4b6c      	ldr	r3, [pc, #432]	@ (8007290 <loadMenuTexts+0x12bc>)
 80070de:	4614      	mov	r4, r2
 80070e0:	461d      	mov	r5, r3
 80070e2:	6828      	ldr	r0, [r5, #0]
 80070e4:	6869      	ldr	r1, [r5, #4]
 80070e6:	68aa      	ldr	r2, [r5, #8]
 80070e8:	68eb      	ldr	r3, [r5, #12]
 80070ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070ec:	7c2b      	ldrb	r3, [r5, #16]
 80070ee:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 80070f0:	4a68      	ldr	r2, [pc, #416]	@ (8007294 <loadMenuTexts+0x12c0>)
 80070f2:	4b69      	ldr	r3, [pc, #420]	@ (8007298 <loadMenuTexts+0x12c4>)
 80070f4:	4614      	mov	r4, r2
 80070f6:	461d      	mov	r5, r3
 80070f8:	6828      	ldr	r0, [r5, #0]
 80070fa:	6869      	ldr	r1, [r5, #4]
 80070fc:	68aa      	ldr	r2, [r5, #8]
 80070fe:	68eb      	ldr	r3, [r5, #12]
 8007100:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007102:	7c2b      	ldrb	r3, [r5, #16]
 8007104:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 8007106:	4a65      	ldr	r2, [pc, #404]	@ (800729c <loadMenuTexts+0x12c8>)
 8007108:	4b65      	ldr	r3, [pc, #404]	@ (80072a0 <loadMenuTexts+0x12cc>)
 800710a:	4614      	mov	r4, r2
 800710c:	461d      	mov	r5, r3
 800710e:	6828      	ldr	r0, [r5, #0]
 8007110:	6869      	ldr	r1, [r5, #4]
 8007112:	68aa      	ldr	r2, [r5, #8]
 8007114:	68eb      	ldr	r3, [r5, #12]
 8007116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007118:	7c2b      	ldrb	r3, [r5, #16]
 800711a:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 800711c:	4a61      	ldr	r2, [pc, #388]	@ (80072a4 <loadMenuTexts+0x12d0>)
 800711e:	4b62      	ldr	r3, [pc, #392]	@ (80072a8 <loadMenuTexts+0x12d4>)
 8007120:	4614      	mov	r4, r2
 8007122:	461d      	mov	r5, r3
 8007124:	6828      	ldr	r0, [r5, #0]
 8007126:	6869      	ldr	r1, [r5, #4]
 8007128:	68aa      	ldr	r2, [r5, #8]
 800712a:	68eb      	ldr	r3, [r5, #12]
 800712c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800712e:	7c2b      	ldrb	r3, [r5, #16]
 8007130:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 8007132:	4a5e      	ldr	r2, [pc, #376]	@ (80072ac <loadMenuTexts+0x12d8>)
 8007134:	4b5e      	ldr	r3, [pc, #376]	@ (80072b0 <loadMenuTexts+0x12dc>)
 8007136:	4614      	mov	r4, r2
 8007138:	461d      	mov	r5, r3
 800713a:	6828      	ldr	r0, [r5, #0]
 800713c:	6869      	ldr	r1, [r5, #4]
 800713e:	68aa      	ldr	r2, [r5, #8]
 8007140:	68eb      	ldr	r3, [r5, #12]
 8007142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007144:	7c2b      	ldrb	r3, [r5, #16]
 8007146:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 8007148:	4a5a      	ldr	r2, [pc, #360]	@ (80072b4 <loadMenuTexts+0x12e0>)
 800714a:	4b5b      	ldr	r3, [pc, #364]	@ (80072b8 <loadMenuTexts+0x12e4>)
 800714c:	4614      	mov	r4, r2
 800714e:	461d      	mov	r5, r3
 8007150:	6828      	ldr	r0, [r5, #0]
 8007152:	6869      	ldr	r1, [r5, #4]
 8007154:	68aa      	ldr	r2, [r5, #8]
 8007156:	68eb      	ldr	r3, [r5, #12]
 8007158:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800715a:	7c2b      	ldrb	r3, [r5, #16]
 800715c:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 800715e:	4a57      	ldr	r2, [pc, #348]	@ (80072bc <loadMenuTexts+0x12e8>)
 8007160:	4b57      	ldr	r3, [pc, #348]	@ (80072c0 <loadMenuTexts+0x12ec>)
 8007162:	4614      	mov	r4, r2
 8007164:	461d      	mov	r5, r3
 8007166:	6828      	ldr	r0, [r5, #0]
 8007168:	6869      	ldr	r1, [r5, #4]
 800716a:	68aa      	ldr	r2, [r5, #8]
 800716c:	68eb      	ldr	r3, [r5, #12]
 800716e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007170:	7c2b      	ldrb	r3, [r5, #16]
 8007172:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 8007174:	4a53      	ldr	r2, [pc, #332]	@ (80072c4 <loadMenuTexts+0x12f0>)
 8007176:	4b54      	ldr	r3, [pc, #336]	@ (80072c8 <loadMenuTexts+0x12f4>)
 8007178:	4614      	mov	r4, r2
 800717a:	461d      	mov	r5, r3
 800717c:	6828      	ldr	r0, [r5, #0]
 800717e:	6869      	ldr	r1, [r5, #4]
 8007180:	68aa      	ldr	r2, [r5, #8]
 8007182:	68eb      	ldr	r3, [r5, #12]
 8007184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007186:	7c2b      	ldrb	r3, [r5, #16]
 8007188:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 800718a:	4a50      	ldr	r2, [pc, #320]	@ (80072cc <loadMenuTexts+0x12f8>)
 800718c:	4b50      	ldr	r3, [pc, #320]	@ (80072d0 <loadMenuTexts+0x12fc>)
 800718e:	4614      	mov	r4, r2
 8007190:	461d      	mov	r5, r3
 8007192:	6828      	ldr	r0, [r5, #0]
 8007194:	6869      	ldr	r1, [r5, #4]
 8007196:	68aa      	ldr	r2, [r5, #8]
 8007198:	68eb      	ldr	r3, [r5, #12]
 800719a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800719c:	7c2b      	ldrb	r3, [r5, #16]
 800719e:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 80071a0:	4a4c      	ldr	r2, [pc, #304]	@ (80072d4 <loadMenuTexts+0x1300>)
 80071a2:	4b4d      	ldr	r3, [pc, #308]	@ (80072d8 <loadMenuTexts+0x1304>)
 80071a4:	4614      	mov	r4, r2
 80071a6:	461d      	mov	r5, r3
 80071a8:	6828      	ldr	r0, [r5, #0]
 80071aa:	6869      	ldr	r1, [r5, #4]
 80071ac:	68aa      	ldr	r2, [r5, #8]
 80071ae:	68eb      	ldr	r3, [r5, #12]
 80071b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071b2:	7c2b      	ldrb	r3, [r5, #16]
 80071b4:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 80071b6:	4a49      	ldr	r2, [pc, #292]	@ (80072dc <loadMenuTexts+0x1308>)
 80071b8:	4b49      	ldr	r3, [pc, #292]	@ (80072e0 <loadMenuTexts+0x130c>)
 80071ba:	4614      	mov	r4, r2
 80071bc:	461d      	mov	r5, r3
 80071be:	e091      	b.n	80072e4 <loadMenuTexts+0x1310>
 80071c0:	200009d4 	.word	0x200009d4
 80071c4:	20001a0c 	.word	0x20001a0c
 80071c8:	200009e8 	.word	0x200009e8
 80071cc:	20001a20 	.word	0x20001a20
 80071d0:	200009fc 	.word	0x200009fc
 80071d4:	20001a34 	.word	0x20001a34
 80071d8:	20000a10 	.word	0x20000a10
 80071dc:	20001a48 	.word	0x20001a48
 80071e0:	20000a24 	.word	0x20000a24
 80071e4:	20001a5c 	.word	0x20001a5c
 80071e8:	20000a38 	.word	0x20000a38
 80071ec:	20001a70 	.word	0x20001a70
 80071f0:	20000a4c 	.word	0x20000a4c
 80071f4:	20001a84 	.word	0x20001a84
 80071f8:	20000a60 	.word	0x20000a60
 80071fc:	20001a98 	.word	0x20001a98
 8007200:	20000a74 	.word	0x20000a74
 8007204:	20001aac 	.word	0x20001aac
 8007208:	20000a88 	.word	0x20000a88
 800720c:	20001ac0 	.word	0x20001ac0
 8007210:	20000a9c 	.word	0x20000a9c
 8007214:	20001ad4 	.word	0x20001ad4
 8007218:	20000ab0 	.word	0x20000ab0
 800721c:	20001ae8 	.word	0x20001ae8
 8007220:	20000ac4 	.word	0x20000ac4
 8007224:	20001afc 	.word	0x20001afc
 8007228:	20000ad8 	.word	0x20000ad8
 800722c:	20001b10 	.word	0x20001b10
 8007230:	20000aec 	.word	0x20000aec
 8007234:	20001b24 	.word	0x20001b24
 8007238:	20000b00 	.word	0x20000b00
 800723c:	20001b38 	.word	0x20001b38
 8007240:	20000b14 	.word	0x20000b14
 8007244:	20001b4c 	.word	0x20001b4c
 8007248:	20000b28 	.word	0x20000b28
 800724c:	20001b60 	.word	0x20001b60
 8007250:	20000b3c 	.word	0x20000b3c
 8007254:	20001b74 	.word	0x20001b74
 8007258:	20000b50 	.word	0x20000b50
 800725c:	20001b88 	.word	0x20001b88
 8007260:	20000b64 	.word	0x20000b64
 8007264:	20001b9c 	.word	0x20001b9c
 8007268:	20000b78 	.word	0x20000b78
 800726c:	20001bb0 	.word	0x20001bb0
 8007270:	20000b8c 	.word	0x20000b8c
 8007274:	20001bc4 	.word	0x20001bc4
 8007278:	20000ba0 	.word	0x20000ba0
 800727c:	20001bd8 	.word	0x20001bd8
 8007280:	20000bb4 	.word	0x20000bb4
 8007284:	20001bec 	.word	0x20001bec
 8007288:	20000bc8 	.word	0x20000bc8
 800728c:	20001c00 	.word	0x20001c00
 8007290:	20000bdc 	.word	0x20000bdc
 8007294:	20001c14 	.word	0x20001c14
 8007298:	20000bf0 	.word	0x20000bf0
 800729c:	20001c28 	.word	0x20001c28
 80072a0:	20000c04 	.word	0x20000c04
 80072a4:	20001c3c 	.word	0x20001c3c
 80072a8:	20000c18 	.word	0x20000c18
 80072ac:	20001c50 	.word	0x20001c50
 80072b0:	20000c2c 	.word	0x20000c2c
 80072b4:	20001c64 	.word	0x20001c64
 80072b8:	20000c40 	.word	0x20000c40
 80072bc:	20001c78 	.word	0x20001c78
 80072c0:	20000c54 	.word	0x20000c54
 80072c4:	20001c8c 	.word	0x20001c8c
 80072c8:	20000c68 	.word	0x20000c68
 80072cc:	20001ca0 	.word	0x20001ca0
 80072d0:	20000cf4 	.word	0x20000cf4
 80072d4:	20001cb4 	.word	0x20001cb4
 80072d8:	20000d08 	.word	0x20000d08
 80072dc:	20001cc8 	.word	0x20001cc8
 80072e0:	20000ccc 	.word	0x20000ccc
 80072e4:	6828      	ldr	r0, [r5, #0]
 80072e6:	6869      	ldr	r1, [r5, #4]
 80072e8:	68aa      	ldr	r2, [r5, #8]
 80072ea:	68eb      	ldr	r3, [r5, #12]
 80072ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ee:	7c2b      	ldrb	r3, [r5, #16]
 80072f0:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 80072f2:	4a5b      	ldr	r2, [pc, #364]	@ (8007460 <loadMenuTexts+0x148c>)
 80072f4:	4b5b      	ldr	r3, [pc, #364]	@ (8007464 <loadMenuTexts+0x1490>)
 80072f6:	4614      	mov	r4, r2
 80072f8:	461d      	mov	r5, r3
 80072fa:	6828      	ldr	r0, [r5, #0]
 80072fc:	6869      	ldr	r1, [r5, #4]
 80072fe:	68aa      	ldr	r2, [r5, #8]
 8007300:	68eb      	ldr	r3, [r5, #12]
 8007302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007304:	7c2b      	ldrb	r3, [r5, #16]
 8007306:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 8007308:	4a57      	ldr	r2, [pc, #348]	@ (8007468 <loadMenuTexts+0x1494>)
 800730a:	4b58      	ldr	r3, [pc, #352]	@ (800746c <loadMenuTexts+0x1498>)
 800730c:	4614      	mov	r4, r2
 800730e:	461d      	mov	r5, r3
 8007310:	6828      	ldr	r0, [r5, #0]
 8007312:	6869      	ldr	r1, [r5, #4]
 8007314:	68aa      	ldr	r2, [r5, #8]
 8007316:	68eb      	ldr	r3, [r5, #12]
 8007318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800731a:	7c2b      	ldrb	r3, [r5, #16]
 800731c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 800731e:	4a54      	ldr	r2, [pc, #336]	@ (8007470 <loadMenuTexts+0x149c>)
 8007320:	4b54      	ldr	r3, [pc, #336]	@ (8007474 <loadMenuTexts+0x14a0>)
 8007322:	4614      	mov	r4, r2
 8007324:	461d      	mov	r5, r3
 8007326:	6828      	ldr	r0, [r5, #0]
 8007328:	6869      	ldr	r1, [r5, #4]
 800732a:	68aa      	ldr	r2, [r5, #8]
 800732c:	68eb      	ldr	r3, [r5, #12]
 800732e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007330:	7c2b      	ldrb	r3, [r5, #16]
 8007332:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 8007334:	4a50      	ldr	r2, [pc, #320]	@ (8007478 <loadMenuTexts+0x14a4>)
 8007336:	4b51      	ldr	r3, [pc, #324]	@ (800747c <loadMenuTexts+0x14a8>)
 8007338:	4614      	mov	r4, r2
 800733a:	461d      	mov	r5, r3
 800733c:	6828      	ldr	r0, [r5, #0]
 800733e:	6869      	ldr	r1, [r5, #4]
 8007340:	68aa      	ldr	r2, [r5, #8]
 8007342:	68eb      	ldr	r3, [r5, #12]
 8007344:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007346:	7c2b      	ldrb	r3, [r5, #16]
 8007348:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 800734a:	4a4d      	ldr	r2, [pc, #308]	@ (8007480 <loadMenuTexts+0x14ac>)
 800734c:	4b4d      	ldr	r3, [pc, #308]	@ (8007484 <loadMenuTexts+0x14b0>)
 800734e:	4614      	mov	r4, r2
 8007350:	461d      	mov	r5, r3
 8007352:	6828      	ldr	r0, [r5, #0]
 8007354:	6869      	ldr	r1, [r5, #4]
 8007356:	68aa      	ldr	r2, [r5, #8]
 8007358:	68eb      	ldr	r3, [r5, #12]
 800735a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800735c:	7c2b      	ldrb	r3, [r5, #16]
 800735e:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 8007360:	4a49      	ldr	r2, [pc, #292]	@ (8007488 <loadMenuTexts+0x14b4>)
 8007362:	4b4a      	ldr	r3, [pc, #296]	@ (800748c <loadMenuTexts+0x14b8>)
 8007364:	4614      	mov	r4, r2
 8007366:	461d      	mov	r5, r3
 8007368:	6828      	ldr	r0, [r5, #0]
 800736a:	6869      	ldr	r1, [r5, #4]
 800736c:	68aa      	ldr	r2, [r5, #8]
 800736e:	68eb      	ldr	r3, [r5, #12]
 8007370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007372:	7c2b      	ldrb	r3, [r5, #16]
 8007374:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 8007376:	4a46      	ldr	r2, [pc, #280]	@ (8007490 <loadMenuTexts+0x14bc>)
 8007378:	4b46      	ldr	r3, [pc, #280]	@ (8007494 <loadMenuTexts+0x14c0>)
 800737a:	4614      	mov	r4, r2
 800737c:	461d      	mov	r5, r3
 800737e:	6828      	ldr	r0, [r5, #0]
 8007380:	6869      	ldr	r1, [r5, #4]
 8007382:	68aa      	ldr	r2, [r5, #8]
 8007384:	68eb      	ldr	r3, [r5, #12]
 8007386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007388:	7c2b      	ldrb	r3, [r5, #16]
 800738a:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 800738c:	4a42      	ldr	r2, [pc, #264]	@ (8007498 <loadMenuTexts+0x14c4>)
 800738e:	4b43      	ldr	r3, [pc, #268]	@ (800749c <loadMenuTexts+0x14c8>)
 8007390:	4614      	mov	r4, r2
 8007392:	461d      	mov	r5, r3
 8007394:	6828      	ldr	r0, [r5, #0]
 8007396:	6869      	ldr	r1, [r5, #4]
 8007398:	68aa      	ldr	r2, [r5, #8]
 800739a:	68eb      	ldr	r3, [r5, #12]
 800739c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800739e:	7c2b      	ldrb	r3, [r5, #16]
 80073a0:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 80073a2:	4a3f      	ldr	r2, [pc, #252]	@ (80074a0 <loadMenuTexts+0x14cc>)
 80073a4:	4b3f      	ldr	r3, [pc, #252]	@ (80074a4 <loadMenuTexts+0x14d0>)
 80073a6:	4614      	mov	r4, r2
 80073a8:	461d      	mov	r5, r3
 80073aa:	6828      	ldr	r0, [r5, #0]
 80073ac:	6869      	ldr	r1, [r5, #4]
 80073ae:	68aa      	ldr	r2, [r5, #8]
 80073b0:	68eb      	ldr	r3, [r5, #12]
 80073b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073b4:	7c2b      	ldrb	r3, [r5, #16]
 80073b6:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 80073b8:	4a3b      	ldr	r2, [pc, #236]	@ (80074a8 <loadMenuTexts+0x14d4>)
 80073ba:	4b3c      	ldr	r3, [pc, #240]	@ (80074ac <loadMenuTexts+0x14d8>)
 80073bc:	4614      	mov	r4, r2
 80073be:	461d      	mov	r5, r3
 80073c0:	6828      	ldr	r0, [r5, #0]
 80073c2:	6869      	ldr	r1, [r5, #4]
 80073c4:	68aa      	ldr	r2, [r5, #8]
 80073c6:	68eb      	ldr	r3, [r5, #12]
 80073c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073ca:	7c2b      	ldrb	r3, [r5, #16]
 80073cc:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 80073ce:	4a38      	ldr	r2, [pc, #224]	@ (80074b0 <loadMenuTexts+0x14dc>)
 80073d0:	4b38      	ldr	r3, [pc, #224]	@ (80074b4 <loadMenuTexts+0x14e0>)
 80073d2:	4614      	mov	r4, r2
 80073d4:	461d      	mov	r5, r3
 80073d6:	6828      	ldr	r0, [r5, #0]
 80073d8:	6869      	ldr	r1, [r5, #4]
 80073da:	68aa      	ldr	r2, [r5, #8]
 80073dc:	68eb      	ldr	r3, [r5, #12]
 80073de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073e0:	7c2b      	ldrb	r3, [r5, #16]
 80073e2:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 80073e4:	4a34      	ldr	r2, [pc, #208]	@ (80074b8 <loadMenuTexts+0x14e4>)
 80073e6:	4b35      	ldr	r3, [pc, #212]	@ (80074bc <loadMenuTexts+0x14e8>)
 80073e8:	4614      	mov	r4, r2
 80073ea:	461d      	mov	r5, r3
 80073ec:	6828      	ldr	r0, [r5, #0]
 80073ee:	6869      	ldr	r1, [r5, #4]
 80073f0:	68aa      	ldr	r2, [r5, #8]
 80073f2:	68eb      	ldr	r3, [r5, #12]
 80073f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073f6:	7c2b      	ldrb	r3, [r5, #16]
 80073f8:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 80073fa:	4a31      	ldr	r2, [pc, #196]	@ (80074c0 <loadMenuTexts+0x14ec>)
 80073fc:	4b31      	ldr	r3, [pc, #196]	@ (80074c4 <loadMenuTexts+0x14f0>)
 80073fe:	4614      	mov	r4, r2
 8007400:	461d      	mov	r5, r3
 8007402:	6828      	ldr	r0, [r5, #0]
 8007404:	6869      	ldr	r1, [r5, #4]
 8007406:	68aa      	ldr	r2, [r5, #8]
 8007408:	68eb      	ldr	r3, [r5, #12]
 800740a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800740c:	7c2b      	ldrb	r3, [r5, #16]
 800740e:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 8007410:	4a2d      	ldr	r2, [pc, #180]	@ (80074c8 <loadMenuTexts+0x14f4>)
 8007412:	4b2e      	ldr	r3, [pc, #184]	@ (80074cc <loadMenuTexts+0x14f8>)
 8007414:	4614      	mov	r4, r2
 8007416:	461d      	mov	r5, r3
 8007418:	6828      	ldr	r0, [r5, #0]
 800741a:	6869      	ldr	r1, [r5, #4]
 800741c:	68aa      	ldr	r2, [r5, #8]
 800741e:	68eb      	ldr	r3, [r5, #12]
 8007420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007422:	7c2b      	ldrb	r3, [r5, #16]
 8007424:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 8007426:	4a2a      	ldr	r2, [pc, #168]	@ (80074d0 <loadMenuTexts+0x14fc>)
 8007428:	4b2a      	ldr	r3, [pc, #168]	@ (80074d4 <loadMenuTexts+0x1500>)
 800742a:	4614      	mov	r4, r2
 800742c:	461d      	mov	r5, r3
 800742e:	6828      	ldr	r0, [r5, #0]
 8007430:	6869      	ldr	r1, [r5, #4]
 8007432:	68aa      	ldr	r2, [r5, #8]
 8007434:	68eb      	ldr	r3, [r5, #12]
 8007436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007438:	7c2b      	ldrb	r3, [r5, #16]
 800743a:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 800743c:	4a26      	ldr	r2, [pc, #152]	@ (80074d8 <loadMenuTexts+0x1504>)
 800743e:	4b27      	ldr	r3, [pc, #156]	@ (80074dc <loadMenuTexts+0x1508>)
 8007440:	4614      	mov	r4, r2
 8007442:	461d      	mov	r5, r3
 8007444:	6828      	ldr	r0, [r5, #0]
 8007446:	6869      	ldr	r1, [r5, #4]
 8007448:	68aa      	ldr	r2, [r5, #8]
 800744a:	68eb      	ldr	r3, [r5, #12]
 800744c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800744e:	7c2b      	ldrb	r3, [r5, #16]
 8007450:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 8007452:	f000 f845 	bl	80074e0 <menuVariableFinisher>
}
 8007456:	bf00      	nop
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bdb0      	pop	{r4, r5, r7, pc}
 800745e:	bf00      	nop
 8007460:	20001cdc 	.word	0x20001cdc
 8007464:	20000ce0 	.word	0x20000ce0
 8007468:	20001cf0 	.word	0x20001cf0
 800746c:	20000d44 	.word	0x20000d44
 8007470:	20001d04 	.word	0x20001d04
 8007474:	20000d58 	.word	0x20000d58
 8007478:	20001d18 	.word	0x20001d18
 800747c:	20000d94 	.word	0x20000d94
 8007480:	20001d2c 	.word	0x20001d2c
 8007484:	20000da8 	.word	0x20000da8
 8007488:	20001d40 	.word	0x20001d40
 800748c:	20000de4 	.word	0x20000de4
 8007490:	20001d54 	.word	0x20001d54
 8007494:	20000df8 	.word	0x20000df8
 8007498:	20001d68 	.word	0x20001d68
 800749c:	20000e20 	.word	0x20000e20
 80074a0:	20001d7c 	.word	0x20001d7c
 80074a4:	20000e48 	.word	0x20000e48
 80074a8:	20001d90 	.word	0x20001d90
 80074ac:	20000e70 	.word	0x20000e70
 80074b0:	20001da4 	.word	0x20001da4
 80074b4:	20000e98 	.word	0x20000e98
 80074b8:	20001db8 	.word	0x20001db8
 80074bc:	20000ec0 	.word	0x20000ec0
 80074c0:	20001dcc 	.word	0x20001dcc
 80074c4:	20000ee8 	.word	0x20000ee8
 80074c8:	20001de0 	.word	0x20001de0
 80074cc:	20000f10 	.word	0x20000f10
 80074d0:	20001df4 	.word	0x20001df4
 80074d4:	20000f38 	.word	0x20000f38
 80074d8:	20001e08 	.word	0x20001e08
 80074dc:	20000f60 	.word	0x20000f60

080074e0 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 80074e0:	b480      	push	{r7}
 80074e2:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 80074e4:	4b99      	ldr	r3, [pc, #612]	@ (800774c <menuVariableFinisher+0x26c>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 80074ea:	4b99      	ldr	r3, [pc, #612]	@ (8007750 <menuVariableFinisher+0x270>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 80074f0:	4b98      	ldr	r3, [pc, #608]	@ (8007754 <menuVariableFinisher+0x274>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 80074f6:	4b98      	ldr	r3, [pc, #608]	@ (8007758 <menuVariableFinisher+0x278>)
 80074f8:	2200      	movs	r2, #0
 80074fa:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 80074fc:	4b97      	ldr	r3, [pc, #604]	@ (800775c <menuVariableFinisher+0x27c>)
 80074fe:	2200      	movs	r2, #0
 8007500:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 8007502:	4b97      	ldr	r3, [pc, #604]	@ (8007760 <menuVariableFinisher+0x280>)
 8007504:	2200      	movs	r2, #0
 8007506:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 8007508:	4b96      	ldr	r3, [pc, #600]	@ (8007764 <menuVariableFinisher+0x284>)
 800750a:	2200      	movs	r2, #0
 800750c:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 800750e:	4b96      	ldr	r3, [pc, #600]	@ (8007768 <menuVariableFinisher+0x288>)
 8007510:	2200      	movs	r2, #0
 8007512:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 8007514:	4b95      	ldr	r3, [pc, #596]	@ (800776c <menuVariableFinisher+0x28c>)
 8007516:	2200      	movs	r2, #0
 8007518:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 800751a:	4b95      	ldr	r3, [pc, #596]	@ (8007770 <menuVariableFinisher+0x290>)
 800751c:	2200      	movs	r2, #0
 800751e:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 8007520:	4b94      	ldr	r3, [pc, #592]	@ (8007774 <menuVariableFinisher+0x294>)
 8007522:	2200      	movs	r2, #0
 8007524:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 8007526:	4b94      	ldr	r3, [pc, #592]	@ (8007778 <menuVariableFinisher+0x298>)
 8007528:	2200      	movs	r2, #0
 800752a:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 800752c:	4b93      	ldr	r3, [pc, #588]	@ (800777c <menuVariableFinisher+0x29c>)
 800752e:	2200      	movs	r2, #0
 8007530:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 8007532:	4b93      	ldr	r3, [pc, #588]	@ (8007780 <menuVariableFinisher+0x2a0>)
 8007534:	2200      	movs	r2, #0
 8007536:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 8007538:	4b92      	ldr	r3, [pc, #584]	@ (8007784 <menuVariableFinisher+0x2a4>)
 800753a:	2200      	movs	r2, #0
 800753c:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 800753e:	4b92      	ldr	r3, [pc, #584]	@ (8007788 <menuVariableFinisher+0x2a8>)
 8007540:	2200      	movs	r2, #0
 8007542:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 8007544:	4b91      	ldr	r3, [pc, #580]	@ (800778c <menuVariableFinisher+0x2ac>)
 8007546:	2200      	movs	r2, #0
 8007548:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 800754a:	4b91      	ldr	r3, [pc, #580]	@ (8007790 <menuVariableFinisher+0x2b0>)
 800754c:	2200      	movs	r2, #0
 800754e:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 8007550:	4b90      	ldr	r3, [pc, #576]	@ (8007794 <menuVariableFinisher+0x2b4>)
 8007552:	2200      	movs	r2, #0
 8007554:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 8007556:	4b90      	ldr	r3, [pc, #576]	@ (8007798 <menuVariableFinisher+0x2b8>)
 8007558:	2200      	movs	r2, #0
 800755a:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 800755c:	4b8f      	ldr	r3, [pc, #572]	@ (800779c <menuVariableFinisher+0x2bc>)
 800755e:	2200      	movs	r2, #0
 8007560:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 8007562:	4b8f      	ldr	r3, [pc, #572]	@ (80077a0 <menuVariableFinisher+0x2c0>)
 8007564:	2200      	movs	r2, #0
 8007566:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 8007568:	4b8e      	ldr	r3, [pc, #568]	@ (80077a4 <menuVariableFinisher+0x2c4>)
 800756a:	2200      	movs	r2, #0
 800756c:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 800756e:	4b8e      	ldr	r3, [pc, #568]	@ (80077a8 <menuVariableFinisher+0x2c8>)
 8007570:	2200      	movs	r2, #0
 8007572:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 8007574:	4b8d      	ldr	r3, [pc, #564]	@ (80077ac <menuVariableFinisher+0x2cc>)
 8007576:	2200      	movs	r2, #0
 8007578:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 800757a:	4b8d      	ldr	r3, [pc, #564]	@ (80077b0 <menuVariableFinisher+0x2d0>)
 800757c:	2200      	movs	r2, #0
 800757e:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 8007580:	4b8c      	ldr	r3, [pc, #560]	@ (80077b4 <menuVariableFinisher+0x2d4>)
 8007582:	2200      	movs	r2, #0
 8007584:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 8007586:	4b8c      	ldr	r3, [pc, #560]	@ (80077b8 <menuVariableFinisher+0x2d8>)
 8007588:	2200      	movs	r2, #0
 800758a:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 800758c:	4b8b      	ldr	r3, [pc, #556]	@ (80077bc <menuVariableFinisher+0x2dc>)
 800758e:	2200      	movs	r2, #0
 8007590:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 8007592:	4b8b      	ldr	r3, [pc, #556]	@ (80077c0 <menuVariableFinisher+0x2e0>)
 8007594:	2200      	movs	r2, #0
 8007596:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 8007598:	4b8a      	ldr	r3, [pc, #552]	@ (80077c4 <menuVariableFinisher+0x2e4>)
 800759a:	2200      	movs	r2, #0
 800759c:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 800759e:	4b8a      	ldr	r3, [pc, #552]	@ (80077c8 <menuVariableFinisher+0x2e8>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 80075a4:	4b89      	ldr	r3, [pc, #548]	@ (80077cc <menuVariableFinisher+0x2ec>)
 80075a6:	2200      	movs	r2, #0
 80075a8:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 80075aa:	4b89      	ldr	r3, [pc, #548]	@ (80077d0 <menuVariableFinisher+0x2f0>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 80075b0:	4b88      	ldr	r3, [pc, #544]	@ (80077d4 <menuVariableFinisher+0x2f4>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 80075b6:	4b88      	ldr	r3, [pc, #544]	@ (80077d8 <menuVariableFinisher+0x2f8>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 80075bc:	4b87      	ldr	r3, [pc, #540]	@ (80077dc <menuVariableFinisher+0x2fc>)
 80075be:	2200      	movs	r2, #0
 80075c0:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 80075c2:	4b87      	ldr	r3, [pc, #540]	@ (80077e0 <menuVariableFinisher+0x300>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 80075c8:	4b86      	ldr	r3, [pc, #536]	@ (80077e4 <menuVariableFinisher+0x304>)
 80075ca:	2200      	movs	r2, #0
 80075cc:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 80075ce:	4b86      	ldr	r3, [pc, #536]	@ (80077e8 <menuVariableFinisher+0x308>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 80075d4:	4b85      	ldr	r3, [pc, #532]	@ (80077ec <menuVariableFinisher+0x30c>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 80075da:	4b85      	ldr	r3, [pc, #532]	@ (80077f0 <menuVariableFinisher+0x310>)
 80075dc:	2200      	movs	r2, #0
 80075de:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 80075e0:	4b84      	ldr	r3, [pc, #528]	@ (80077f4 <menuVariableFinisher+0x314>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 80075e6:	4b84      	ldr	r3, [pc, #528]	@ (80077f8 <menuVariableFinisher+0x318>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 80075ec:	4b83      	ldr	r3, [pc, #524]	@ (80077fc <menuVariableFinisher+0x31c>)
 80075ee:	2200      	movs	r2, #0
 80075f0:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 80075f2:	4b83      	ldr	r3, [pc, #524]	@ (8007800 <menuVariableFinisher+0x320>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 80075f8:	4b82      	ldr	r3, [pc, #520]	@ (8007804 <menuVariableFinisher+0x324>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 80075fe:	4b82      	ldr	r3, [pc, #520]	@ (8007808 <menuVariableFinisher+0x328>)
 8007600:	2200      	movs	r2, #0
 8007602:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 8007604:	4b81      	ldr	r3, [pc, #516]	@ (800780c <menuVariableFinisher+0x32c>)
 8007606:	2200      	movs	r2, #0
 8007608:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 800760a:	4b81      	ldr	r3, [pc, #516]	@ (8007810 <menuVariableFinisher+0x330>)
 800760c:	2200      	movs	r2, #0
 800760e:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8007610:	4b80      	ldr	r3, [pc, #512]	@ (8007814 <menuVariableFinisher+0x334>)
 8007612:	2200      	movs	r2, #0
 8007614:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 8007616:	4b80      	ldr	r3, [pc, #512]	@ (8007818 <menuVariableFinisher+0x338>)
 8007618:	2200      	movs	r2, #0
 800761a:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 800761c:	4b7f      	ldr	r3, [pc, #508]	@ (800781c <menuVariableFinisher+0x33c>)
 800761e:	2200      	movs	r2, #0
 8007620:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 8007622:	4b7f      	ldr	r3, [pc, #508]	@ (8007820 <menuVariableFinisher+0x340>)
 8007624:	2200      	movs	r2, #0
 8007626:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 8007628:	4b7e      	ldr	r3, [pc, #504]	@ (8007824 <menuVariableFinisher+0x344>)
 800762a:	2200      	movs	r2, #0
 800762c:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 800762e:	4b7e      	ldr	r3, [pc, #504]	@ (8007828 <menuVariableFinisher+0x348>)
 8007630:	2200      	movs	r2, #0
 8007632:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 8007634:	4b7d      	ldr	r3, [pc, #500]	@ (800782c <menuVariableFinisher+0x34c>)
 8007636:	2200      	movs	r2, #0
 8007638:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 800763a:	4b7d      	ldr	r3, [pc, #500]	@ (8007830 <menuVariableFinisher+0x350>)
 800763c:	2200      	movs	r2, #0
 800763e:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8007640:	4b7c      	ldr	r3, [pc, #496]	@ (8007834 <menuVariableFinisher+0x354>)
 8007642:	2200      	movs	r2, #0
 8007644:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 8007646:	4b7c      	ldr	r3, [pc, #496]	@ (8007838 <menuVariableFinisher+0x358>)
 8007648:	2200      	movs	r2, #0
 800764a:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 800764c:	4b7b      	ldr	r3, [pc, #492]	@ (800783c <menuVariableFinisher+0x35c>)
 800764e:	2200      	movs	r2, #0
 8007650:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 8007652:	4b7b      	ldr	r3, [pc, #492]	@ (8007840 <menuVariableFinisher+0x360>)
 8007654:	2200      	movs	r2, #0
 8007656:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 8007658:	4b7a      	ldr	r3, [pc, #488]	@ (8007844 <menuVariableFinisher+0x364>)
 800765a:	2200      	movs	r2, #0
 800765c:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 800765e:	4b7a      	ldr	r3, [pc, #488]	@ (8007848 <menuVariableFinisher+0x368>)
 8007660:	2200      	movs	r2, #0
 8007662:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 8007664:	4b79      	ldr	r3, [pc, #484]	@ (800784c <menuVariableFinisher+0x36c>)
 8007666:	2200      	movs	r2, #0
 8007668:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 800766a:	4b79      	ldr	r3, [pc, #484]	@ (8007850 <menuVariableFinisher+0x370>)
 800766c:	2200      	movs	r2, #0
 800766e:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 8007670:	4b78      	ldr	r3, [pc, #480]	@ (8007854 <menuVariableFinisher+0x374>)
 8007672:	2200      	movs	r2, #0
 8007674:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 8007676:	4b78      	ldr	r3, [pc, #480]	@ (8007858 <menuVariableFinisher+0x378>)
 8007678:	2200      	movs	r2, #0
 800767a:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 800767c:	4b77      	ldr	r3, [pc, #476]	@ (800785c <menuVariableFinisher+0x37c>)
 800767e:	2200      	movs	r2, #0
 8007680:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 8007682:	4b77      	ldr	r3, [pc, #476]	@ (8007860 <menuVariableFinisher+0x380>)
 8007684:	2200      	movs	r2, #0
 8007686:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 8007688:	4b76      	ldr	r3, [pc, #472]	@ (8007864 <menuVariableFinisher+0x384>)
 800768a:	2200      	movs	r2, #0
 800768c:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 800768e:	4b76      	ldr	r3, [pc, #472]	@ (8007868 <menuVariableFinisher+0x388>)
 8007690:	2200      	movs	r2, #0
 8007692:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 8007694:	4b75      	ldr	r3, [pc, #468]	@ (800786c <menuVariableFinisher+0x38c>)
 8007696:	2200      	movs	r2, #0
 8007698:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 800769a:	4b75      	ldr	r3, [pc, #468]	@ (8007870 <menuVariableFinisher+0x390>)
 800769c:	2200      	movs	r2, #0
 800769e:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 80076a0:	4b74      	ldr	r3, [pc, #464]	@ (8007874 <menuVariableFinisher+0x394>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 80076a6:	4b74      	ldr	r3, [pc, #464]	@ (8007878 <menuVariableFinisher+0x398>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 80076ac:	4b73      	ldr	r3, [pc, #460]	@ (800787c <menuVariableFinisher+0x39c>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 80076b2:	4b73      	ldr	r3, [pc, #460]	@ (8007880 <menuVariableFinisher+0x3a0>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 80076b8:	4b72      	ldr	r3, [pc, #456]	@ (8007884 <menuVariableFinisher+0x3a4>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 80076be:	4b72      	ldr	r3, [pc, #456]	@ (8007888 <menuVariableFinisher+0x3a8>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 80076c4:	4b71      	ldr	r3, [pc, #452]	@ (800788c <menuVariableFinisher+0x3ac>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 80076ca:	4b71      	ldr	r3, [pc, #452]	@ (8007890 <menuVariableFinisher+0x3b0>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 80076d0:	4b70      	ldr	r3, [pc, #448]	@ (8007894 <menuVariableFinisher+0x3b4>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 80076d6:	4b70      	ldr	r3, [pc, #448]	@ (8007898 <menuVariableFinisher+0x3b8>)
 80076d8:	2200      	movs	r2, #0
 80076da:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 80076dc:	4b6f      	ldr	r3, [pc, #444]	@ (800789c <menuVariableFinisher+0x3bc>)
 80076de:	2200      	movs	r2, #0
 80076e0:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 80076e2:	4b6f      	ldr	r3, [pc, #444]	@ (80078a0 <menuVariableFinisher+0x3c0>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 80076e8:	4b6e      	ldr	r3, [pc, #440]	@ (80078a4 <menuVariableFinisher+0x3c4>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 80076ee:	4b6e      	ldr	r3, [pc, #440]	@ (80078a8 <menuVariableFinisher+0x3c8>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 80076f4:	4b6d      	ldr	r3, [pc, #436]	@ (80078ac <menuVariableFinisher+0x3cc>)
 80076f6:	2200      	movs	r2, #0
 80076f8:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 80076fa:	4b6d      	ldr	r3, [pc, #436]	@ (80078b0 <menuVariableFinisher+0x3d0>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 8007700:	4b6c      	ldr	r3, [pc, #432]	@ (80078b4 <menuVariableFinisher+0x3d4>)
 8007702:	2200      	movs	r2, #0
 8007704:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 8007706:	4b6c      	ldr	r3, [pc, #432]	@ (80078b8 <menuVariableFinisher+0x3d8>)
 8007708:	2200      	movs	r2, #0
 800770a:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 800770c:	4b6b      	ldr	r3, [pc, #428]	@ (80078bc <menuVariableFinisher+0x3dc>)
 800770e:	2200      	movs	r2, #0
 8007710:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 8007712:	4b6b      	ldr	r3, [pc, #428]	@ (80078c0 <menuVariableFinisher+0x3e0>)
 8007714:	2200      	movs	r2, #0
 8007716:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 8007718:	4b6a      	ldr	r3, [pc, #424]	@ (80078c4 <menuVariableFinisher+0x3e4>)
 800771a:	2200      	movs	r2, #0
 800771c:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 800771e:	4b6a      	ldr	r3, [pc, #424]	@ (80078c8 <menuVariableFinisher+0x3e8>)
 8007720:	2200      	movs	r2, #0
 8007722:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 8007724:	4b69      	ldr	r3, [pc, #420]	@ (80078cc <menuVariableFinisher+0x3ec>)
 8007726:	2200      	movs	r2, #0
 8007728:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 800772a:	4b69      	ldr	r3, [pc, #420]	@ (80078d0 <menuVariableFinisher+0x3f0>)
 800772c:	2200      	movs	r2, #0
 800772e:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 8007730:	4b68      	ldr	r3, [pc, #416]	@ (80078d4 <menuVariableFinisher+0x3f4>)
 8007732:	2200      	movs	r2, #0
 8007734:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 8007736:	4b68      	ldr	r3, [pc, #416]	@ (80078d8 <menuVariableFinisher+0x3f8>)
 8007738:	2200      	movs	r2, #0
 800773a:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 800773c:	4b67      	ldr	r3, [pc, #412]	@ (80078dc <menuVariableFinisher+0x3fc>)
 800773e:	2200      	movs	r2, #0
 8007740:	741a      	strb	r2, [r3, #16]
}
 8007742:	bf00      	nop
 8007744:	46bd      	mov	sp, r7
 8007746:	bc80      	pop	{r7}
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	2000009c 	.word	0x2000009c
 8007750:	200000b0 	.word	0x200000b0
 8007754:	200000c4 	.word	0x200000c4
 8007758:	200000d8 	.word	0x200000d8
 800775c:	200000ec 	.word	0x200000ec
 8007760:	20000100 	.word	0x20000100
 8007764:	20000114 	.word	0x20000114
 8007768:	20000128 	.word	0x20000128
 800776c:	2000013c 	.word	0x2000013c
 8007770:	20000150 	.word	0x20000150
 8007774:	20000164 	.word	0x20000164
 8007778:	20000178 	.word	0x20000178
 800777c:	20001728 	.word	0x20001728
 8007780:	2000173c 	.word	0x2000173c
 8007784:	20001750 	.word	0x20001750
 8007788:	20001764 	.word	0x20001764
 800778c:	20001778 	.word	0x20001778
 8007790:	2000178c 	.word	0x2000178c
 8007794:	200017a0 	.word	0x200017a0
 8007798:	200017b4 	.word	0x200017b4
 800779c:	200017c8 	.word	0x200017c8
 80077a0:	200017dc 	.word	0x200017dc
 80077a4:	200017f0 	.word	0x200017f0
 80077a8:	20001804 	.word	0x20001804
 80077ac:	20001818 	.word	0x20001818
 80077b0:	2000182c 	.word	0x2000182c
 80077b4:	20001840 	.word	0x20001840
 80077b8:	20001854 	.word	0x20001854
 80077bc:	20001868 	.word	0x20001868
 80077c0:	2000187c 	.word	0x2000187c
 80077c4:	20001890 	.word	0x20001890
 80077c8:	200018a4 	.word	0x200018a4
 80077cc:	200018b8 	.word	0x200018b8
 80077d0:	200018cc 	.word	0x200018cc
 80077d4:	200018e0 	.word	0x200018e0
 80077d8:	200018f4 	.word	0x200018f4
 80077dc:	20001908 	.word	0x20001908
 80077e0:	2000191c 	.word	0x2000191c
 80077e4:	20001930 	.word	0x20001930
 80077e8:	20001944 	.word	0x20001944
 80077ec:	20001958 	.word	0x20001958
 80077f0:	2000196c 	.word	0x2000196c
 80077f4:	20001980 	.word	0x20001980
 80077f8:	20001994 	.word	0x20001994
 80077fc:	200019a8 	.word	0x200019a8
 8007800:	200019bc 	.word	0x200019bc
 8007804:	200019d0 	.word	0x200019d0
 8007808:	200019e4 	.word	0x200019e4
 800780c:	200019f8 	.word	0x200019f8
 8007810:	20001a0c 	.word	0x20001a0c
 8007814:	20001a20 	.word	0x20001a20
 8007818:	20001a34 	.word	0x20001a34
 800781c:	20001a48 	.word	0x20001a48
 8007820:	20001a5c 	.word	0x20001a5c
 8007824:	20001a70 	.word	0x20001a70
 8007828:	20001a84 	.word	0x20001a84
 800782c:	20001a98 	.word	0x20001a98
 8007830:	20001aac 	.word	0x20001aac
 8007834:	20001ac0 	.word	0x20001ac0
 8007838:	20001ad4 	.word	0x20001ad4
 800783c:	20001ae8 	.word	0x20001ae8
 8007840:	20001afc 	.word	0x20001afc
 8007844:	20001b10 	.word	0x20001b10
 8007848:	20001b24 	.word	0x20001b24
 800784c:	20001b38 	.word	0x20001b38
 8007850:	20001b4c 	.word	0x20001b4c
 8007854:	20001b60 	.word	0x20001b60
 8007858:	20001b74 	.word	0x20001b74
 800785c:	20001b88 	.word	0x20001b88
 8007860:	20001b9c 	.word	0x20001b9c
 8007864:	20001bb0 	.word	0x20001bb0
 8007868:	20001bc4 	.word	0x20001bc4
 800786c:	20001bd8 	.word	0x20001bd8
 8007870:	20001bec 	.word	0x20001bec
 8007874:	20001c00 	.word	0x20001c00
 8007878:	20001c14 	.word	0x20001c14
 800787c:	20001c28 	.word	0x20001c28
 8007880:	20001c3c 	.word	0x20001c3c
 8007884:	20001c50 	.word	0x20001c50
 8007888:	20001c64 	.word	0x20001c64
 800788c:	20001c78 	.word	0x20001c78
 8007890:	20001c8c 	.word	0x20001c8c
 8007894:	20001ca0 	.word	0x20001ca0
 8007898:	20001cb4 	.word	0x20001cb4
 800789c:	20001cc8 	.word	0x20001cc8
 80078a0:	20001cdc 	.word	0x20001cdc
 80078a4:	20001cf0 	.word	0x20001cf0
 80078a8:	20001d04 	.word	0x20001d04
 80078ac:	20001d18 	.word	0x20001d18
 80078b0:	20001d2c 	.word	0x20001d2c
 80078b4:	20001d40 	.word	0x20001d40
 80078b8:	20001d54 	.word	0x20001d54
 80078bc:	20001d68 	.word	0x20001d68
 80078c0:	20001d7c 	.word	0x20001d7c
 80078c4:	20001d90 	.word	0x20001d90
 80078c8:	20001da4 	.word	0x20001da4
 80078cc:	20001db8 	.word	0x20001db8
 80078d0:	20001dcc 	.word	0x20001dcc
 80078d4:	20001de0 	.word	0x20001de0
 80078d8:	20001df4 	.word	0x20001df4
 80078dc:	20001e08 	.word	0x20001e08

080078e0 <resetMenuTexts>:

void resetMenuTexts() {
 80078e0:	b580      	push	{r7, lr}
 80078e2:	af00      	add	r7, sp, #0
    memset(menuyeGirildiText, 0, 17);
 80078e4:	2211      	movs	r2, #17
 80078e6:	2100      	movs	r1, #0
 80078e8:	48d3      	ldr	r0, [pc, #844]	@ (8007c38 <resetMenuTexts+0x358>)
 80078ea:	f006 fcc8 	bl	800e27e <memset>
    memset(ayarlarText, 0, 17);
 80078ee:	2211      	movs	r2, #17
 80078f0:	2100      	movs	r1, #0
 80078f2:	48d2      	ldr	r0, [pc, #840]	@ (8007c3c <resetMenuTexts+0x35c>)
 80078f4:	f006 fcc3 	bl	800e27e <memset>
    memset(hataKayitListText, 0, 17);
 80078f8:	2211      	movs	r2, #17
 80078fa:	2100      	movs	r1, #0
 80078fc:	48d0      	ldr	r0, [pc, #832]	@ (8007c40 <resetMenuTexts+0x360>)
 80078fe:	f006 fcbe 	bl	800e27e <memset>
    memset(birHataKoduText, 0, 17);
 8007902:	2211      	movs	r2, #17
 8007904:	2100      	movs	r1, #0
 8007906:	48cf      	ldr	r0, [pc, #828]	@ (8007c44 <resetMenuTexts+0x364>)
 8007908:	f006 fcb9 	bl	800e27e <memset>
    memset(ikiHataKoduText, 0, 17);
 800790c:	2211      	movs	r2, #17
 800790e:	2100      	movs	r1, #0
 8007910:	48cd      	ldr	r0, [pc, #820]	@ (8007c48 <resetMenuTexts+0x368>)
 8007912:	f006 fcb4 	bl	800e27e <memset>
    memset(ucHataKoduText, 0, 17);
 8007916:	2211      	movs	r2, #17
 8007918:	2100      	movs	r1, #0
 800791a:	48cc      	ldr	r0, [pc, #816]	@ (8007c4c <resetMenuTexts+0x36c>)
 800791c:	f006 fcaf 	bl	800e27e <memset>
    memset(dortHataKoduText, 0, 17);
 8007920:	2211      	movs	r2, #17
 8007922:	2100      	movs	r1, #0
 8007924:	48ca      	ldr	r0, [pc, #808]	@ (8007c50 <resetMenuTexts+0x370>)
 8007926:	f006 fcaa 	bl	800e27e <memset>
    memset(besHataKoduText, 0, 17);
 800792a:	2211      	movs	r2, #17
 800792c:	2100      	movs	r1, #0
 800792e:	48c9      	ldr	r0, [pc, #804]	@ (8007c54 <resetMenuTexts+0x374>)
 8007930:	f006 fca5 	bl	800e27e <memset>
    memset(altiHataKoduText, 0, 17);
 8007934:	2211      	movs	r2, #17
 8007936:	2100      	movs	r1, #0
 8007938:	48c7      	ldr	r0, [pc, #796]	@ (8007c58 <resetMenuTexts+0x378>)
 800793a:	f006 fca0 	bl	800e27e <memset>
    memset(yediHataKoduText, 0, 17);
 800793e:	2211      	movs	r2, #17
 8007940:	2100      	movs	r1, #0
 8007942:	48c6      	ldr	r0, [pc, #792]	@ (8007c5c <resetMenuTexts+0x37c>)
 8007944:	f006 fc9b 	bl	800e27e <memset>
    memset(sekizHataKoduText, 0, 17);
 8007948:	2211      	movs	r2, #17
 800794a:	2100      	movs	r1, #0
 800794c:	48c4      	ldr	r0, [pc, #784]	@ (8007c60 <resetMenuTexts+0x380>)
 800794e:	f006 fc96 	bl	800e27e <memset>
    memset(dokuzHataKoduText, 0, 17);
 8007952:	2211      	movs	r2, #17
 8007954:	2100      	movs	r1, #0
 8007956:	48c3      	ldr	r0, [pc, #780]	@ (8007c64 <resetMenuTexts+0x384>)
 8007958:	f006 fc91 	bl	800e27e <memset>
    memset(onHataKoduText, 0, 17);
 800795c:	2211      	movs	r2, #17
 800795e:	2100      	movs	r1, #0
 8007960:	48c1      	ldr	r0, [pc, #772]	@ (8007c68 <resetMenuTexts+0x388>)
 8007962:	f006 fc8c 	bl	800e27e <memset>
    memset(silmekIcinText, 0, 17);
 8007966:	2211      	movs	r2, #17
 8007968:	2100      	movs	r1, #0
 800796a:	48c0      	ldr	r0, [pc, #768]	@ (8007c6c <resetMenuTexts+0x38c>)
 800796c:	f006 fc87 	bl	800e27e <memset>
    memset(calismaSekliText, 0, 17);
 8007970:	2211      	movs	r2, #17
 8007972:	2100      	movs	r1, #0
 8007974:	48be      	ldr	r0, [pc, #760]	@ (8007c70 <resetMenuTexts+0x390>)
 8007976:	f006 fc82 	bl	800e27e <memset>
    memset(devirmeYuruyusText, 0, 17);
 800797a:	2211      	movs	r2, #17
 800797c:	2100      	movs	r1, #0
 800797e:	48bd      	ldr	r0, [pc, #756]	@ (8007c74 <resetMenuTexts+0x394>)
 8007980:	f006 fc7d 	bl	800e27e <memset>
    memset(bastikcaCalisanText, 0, 17);
 8007984:	2211      	movs	r2, #17
 8007986:	2100      	movs	r1, #0
 8007988:	48bb      	ldr	r0, [pc, #748]	@ (8007c78 <resetMenuTexts+0x398>)
 800798a:	f006 fc78 	bl	800e27e <memset>
    memset(basGonderText, 0, 17);
 800798e:	2211      	movs	r2, #17
 8007990:	2100      	movs	r1, #0
 8007992:	48ba      	ldr	r0, [pc, #744]	@ (8007c7c <resetMenuTexts+0x39c>)
 8007994:	f006 fc73 	bl	800e27e <memset>
    memset(emniyetCercevesiText, 0, 17);
 8007998:	2211      	movs	r2, #17
 800799a:	2100      	movs	r1, #0
 800799c:	48b8      	ldr	r0, [pc, #736]	@ (8007c80 <resetMenuTexts+0x3a0>)
 800799e:	f006 fc6e 	bl	800e27e <memset>
    memset(pasifText, 0, 17);
 80079a2:	2211      	movs	r2, #17
 80079a4:	2100      	movs	r1, #0
 80079a6:	48b7      	ldr	r0, [pc, #732]	@ (8007c84 <resetMenuTexts+0x3a4>)
 80079a8:	f006 fc69 	bl	800e27e <memset>
    memset(aktifText, 0, 17);
 80079ac:	2211      	movs	r2, #17
 80079ae:	2100      	movs	r1, #0
 80079b0:	48b5      	ldr	r0, [pc, #724]	@ (8007c88 <resetMenuTexts+0x3a8>)
 80079b2:	f006 fc64 	bl	800e27e <memset>
    memset(yavaslamaLimitText, 0, 17);
 80079b6:	2211      	movs	r2, #17
 80079b8:	2100      	movs	r1, #0
 80079ba:	48b4      	ldr	r0, [pc, #720]	@ (8007c8c <resetMenuTexts+0x3ac>)
 80079bc:	f006 fc5f 	bl	800e27e <memset>
    memset(altLimitText, 0, 17);
 80079c0:	2211      	movs	r2, #17
 80079c2:	2100      	movs	r1, #0
 80079c4:	48b2      	ldr	r0, [pc, #712]	@ (8007c90 <resetMenuTexts+0x3b0>)
 80079c6:	f006 fc5a 	bl	800e27e <memset>
    memset(basincSalteriText, 0, 17);
 80079ca:	2211      	movs	r2, #17
 80079cc:	2100      	movs	r1, #0
 80079ce:	48b1      	ldr	r0, [pc, #708]	@ (8007c94 <resetMenuTexts+0x3b4>)
 80079d0:	f006 fc55 	bl	800e27e <memset>
    memset(kapiSecimleriText, 0, 17);
 80079d4:	2211      	movs	r2, #17
 80079d6:	2100      	movs	r1, #0
 80079d8:	48af      	ldr	r0, [pc, #700]	@ (8007c98 <resetMenuTexts+0x3b8>)
 80079da:	f006 fc50 	bl	800e27e <memset>
    memset(katKapisiAktifText, 0, 17);
 80079de:	2211      	movs	r2, #17
 80079e0:	2100      	movs	r1, #0
 80079e2:	48ae      	ldr	r0, [pc, #696]	@ (8007c9c <resetMenuTexts+0x3bc>)
 80079e4:	f006 fc4b 	bl	800e27e <memset>
    memset(tablaKapiAktifText, 0, 17);
 80079e8:	2211      	movs	r2, #17
 80079ea:	2100      	movs	r1, #0
 80079ec:	48ac      	ldr	r0, [pc, #688]	@ (8007ca0 <resetMenuTexts+0x3c0>)
 80079ee:	f006 fc46 	bl	800e27e <memset>
    memset(katArtiTablaAktifText, 0, 17);
 80079f2:	2211      	movs	r2, #17
 80079f4:	2100      	movs	r1, #0
 80079f6:	48ab      	ldr	r0, [pc, #684]	@ (8007ca4 <resetMenuTexts+0x3c4>)
 80079f8:	f006 fc41 	bl	800e27e <memset>
    memset(kapiAcmaTipiText, 0, 17);
 80079fc:	2211      	movs	r2, #17
 80079fe:	2100      	movs	r1, #0
 8007a00:	48a9      	ldr	r0, [pc, #676]	@ (8007ca8 <resetMenuTexts+0x3c8>)
 8007a02:	f006 fc3c 	bl	800e27e <memset>
    memset(kapiButonuESPText, 0, 17);
 8007a06:	2211      	movs	r2, #17
 8007a08:	2100      	movs	r1, #0
 8007a0a:	48a8      	ldr	r0, [pc, #672]	@ (8007cac <resetMenuTexts+0x3cc>)
 8007a0c:	f006 fc37 	bl	800e27e <memset>
    memset(katButonuEXTText, 0, 17);
 8007a10:	2211      	movs	r2, #17
 8007a12:	2100      	movs	r1, #0
 8007a14:	48a6      	ldr	r0, [pc, #664]	@ (8007cb0 <resetMenuTexts+0x3d0>)
 8007a16:	f006 fc32 	bl	800e27e <memset>
    memset(birKatKapiTipiText, 0, 17);
 8007a1a:	2211      	movs	r2, #17
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	48a5      	ldr	r0, [pc, #660]	@ (8007cb4 <resetMenuTexts+0x3d4>)
 8007a20:	f006 fc2d 	bl	800e27e <memset>
    memset(butonKontrolluText, 0, 17);
 8007a24:	2211      	movs	r2, #17
 8007a26:	2100      	movs	r1, #0
 8007a28:	48a3      	ldr	r0, [pc, #652]	@ (8007cb8 <resetMenuTexts+0x3d8>)
 8007a2a:	f006 fc28 	bl	800e27e <memset>
    memset(birinciKapiAcSuresiText, 0, 17);
 8007a2e:	2211      	movs	r2, #17
 8007a30:	2100      	movs	r1, #0
 8007a32:	48a2      	ldr	r0, [pc, #648]	@ (8007cbc <resetMenuTexts+0x3dc>)
 8007a34:	f006 fc23 	bl	800e27e <memset>
    memset(kacSaniyeText, 0, 17);
 8007a38:	2211      	movs	r2, #17
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	48a0      	ldr	r0, [pc, #640]	@ (8007cc0 <resetMenuTexts+0x3e0>)
 8007a3e:	f006 fc1e 	bl	800e27e <memset>
    memset(ikinciKatKapiTipiText, 0, 17);
 8007a42:	2211      	movs	r2, #17
 8007a44:	2100      	movs	r1, #0
 8007a46:	489f      	ldr	r0, [pc, #636]	@ (8007cc4 <resetMenuTexts+0x3e4>)
 8007a48:	f006 fc19 	bl	800e27e <memset>
    memset(ikinciKapiAcSuresiText, 0, 17);
 8007a4c:	2211      	movs	r2, #17
 8007a4e:	2100      	movs	r1, #0
 8007a50:	489d      	ldr	r0, [pc, #628]	@ (8007cc8 <resetMenuTexts+0x3e8>)
 8007a52:	f006 fc14 	bl	800e27e <memset>
    memset(tablaKapiTipiText, 0, 17);
 8007a56:	2211      	movs	r2, #17
 8007a58:	2100      	movs	r1, #0
 8007a5a:	489c      	ldr	r0, [pc, #624]	@ (8007ccc <resetMenuTexts+0x3ec>)
 8007a5c:	f006 fc0f 	bl	800e27e <memset>
    memset(tablaKapiAcKonumText, 0, 17);
 8007a60:	2211      	movs	r2, #17
 8007a62:	2100      	movs	r1, #0
 8007a64:	489a      	ldr	r0, [pc, #616]	@ (8007cd0 <resetMenuTexts+0x3f0>)
 8007a66:	f006 fc0a 	bl	800e27e <memset>
    memset(birinciKattaAcText, 0, 17);
 8007a6a:	2211      	movs	r2, #17
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	4899      	ldr	r0, [pc, #612]	@ (8007cd4 <resetMenuTexts+0x3f4>)
 8007a70:	f006 fc05 	bl	800e27e <memset>
    memset(ikinciKattaAcText, 0, 17);
 8007a74:	2211      	movs	r2, #17
 8007a76:	2100      	movs	r1, #0
 8007a78:	4897      	ldr	r0, [pc, #604]	@ (8007cd8 <resetMenuTexts+0x3f8>)
 8007a7a:	f006 fc00 	bl	800e27e <memset>
    memset(birVeIkinciKattaAcText, 0, 17);
 8007a7e:	2211      	movs	r2, #17
 8007a80:	2100      	movs	r1, #0
 8007a82:	4896      	ldr	r0, [pc, #600]	@ (8007cdc <resetMenuTexts+0x3fc>)
 8007a84:	f006 fbfb 	bl	800e27e <memset>
    memset(tablaKapiAcSureText, 0, 17);
 8007a88:	2211      	movs	r2, #17
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	4894      	ldr	r0, [pc, #592]	@ (8007ce0 <resetMenuTexts+0x400>)
 8007a8e:	f006 fbf6 	bl	800e27e <memset>
    memset(yukariYavaslamaLimitiText, 0, 17);
 8007a92:	2211      	movs	r2, #17
 8007a94:	2100      	movs	r1, #0
 8007a96:	4893      	ldr	r0, [pc, #588]	@ (8007ce4 <resetMenuTexts+0x404>)
 8007a98:	f006 fbf1 	bl	800e27e <memset>
    memset(devirmeYuruyusMenuText, 0, 17);
 8007a9c:	2211      	movs	r2, #17
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	4891      	ldr	r0, [pc, #580]	@ (8007ce8 <resetMenuTexts+0x408>)
 8007aa2:	f006 fbec 	bl	800e27e <memset>
    memset(devirmeAktifText, 0, 17);
 8007aa6:	2211      	movs	r2, #17
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	4890      	ldr	r0, [pc, #576]	@ (8007cec <resetMenuTexts+0x40c>)
 8007aac:	f006 fbe7 	bl	800e27e <memset>
    memset(yuruyusAktifText, 0, 17);
 8007ab0:	2211      	movs	r2, #17
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	488e      	ldr	r0, [pc, #568]	@ (8007cf0 <resetMenuTexts+0x410>)
 8007ab6:	f006 fbe2 	bl	800e27e <memset>
    memset(devirmeYukariText, 0, 17);
 8007aba:	2211      	movs	r2, #17
 8007abc:	2100      	movs	r1, #0
 8007abe:	488d      	ldr	r0, [pc, #564]	@ (8007cf4 <resetMenuTexts+0x414>)
 8007ac0:	f006 fbdd 	bl	800e27e <memset>
    memset(yuruyusIleriText, 0, 17);
 8007ac4:	2211      	movs	r2, #17
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	488b      	ldr	r0, [pc, #556]	@ (8007cf8 <resetMenuTexts+0x418>)
 8007aca:	f006 fbd8 	bl	800e27e <memset>
    memset(devirmeAsagiSivicText, 0, 17);
 8007ace:	2211      	movs	r2, #17
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	488a      	ldr	r0, [pc, #552]	@ (8007cfc <resetMenuTexts+0x41c>)
 8007ad4:	f006 fbd3 	bl	800e27e <memset>
    memset(yuruyusGeriSivicText, 0, 17);
 8007ad8:	2211      	movs	r2, #17
 8007ada:	2100      	movs	r1, #0
 8007adc:	4888      	ldr	r0, [pc, #544]	@ (8007d00 <resetMenuTexts+0x420>)
 8007ade:	f006 fbce 	bl	800e27e <memset>
    memset(yuruyusSecildiText, 0, 17);
 8007ae2:	2211      	movs	r2, #17
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	4887      	ldr	r0, [pc, #540]	@ (8007d04 <resetMenuTexts+0x424>)
 8007ae8:	f006 fbc9 	bl	800e27e <memset>
    memset(devirmeSilindirTipiText, 0, 17);
 8007aec:	2211      	movs	r2, #17
 8007aee:	2100      	movs	r1, #0
 8007af0:	4885      	ldr	r0, [pc, #532]	@ (8007d08 <resetMenuTexts+0x428>)
 8007af2:	f006 fbc4 	bl	800e27e <memset>
    memset(tekTesirText, 0, 17);
 8007af6:	2211      	movs	r2, #17
 8007af8:	2100      	movs	r1, #0
 8007afa:	4884      	ldr	r0, [pc, #528]	@ (8007d0c <resetMenuTexts+0x42c>)
 8007afc:	f006 fbbf 	bl	800e27e <memset>
    memset(ciftTesirText, 0, 17);
 8007b00:	2211      	movs	r2, #17
 8007b02:	2100      	movs	r1, #0
 8007b04:	4882      	ldr	r0, [pc, #520]	@ (8007d10 <resetMenuTexts+0x430>)
 8007b06:	f006 fbba 	bl	800e27e <memset>
    memset(platformSilindirTipiText, 0, 17);
 8007b0a:	2211      	movs	r2, #17
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	4881      	ldr	r0, [pc, #516]	@ (8007d14 <resetMenuTexts+0x434>)
 8007b10:	f006 fbb5 	bl	800e27e <memset>
    memset(yukariValfSureText, 0, 17);
 8007b14:	2211      	movs	r2, #17
 8007b16:	2100      	movs	r1, #0
 8007b18:	487f      	ldr	r0, [pc, #508]	@ (8007d18 <resetMenuTexts+0x438>)
 8007b1a:	f006 fbb0 	bl	800e27e <memset>
    memset(asagiValfSureText, 0, 17);
 8007b1e:	2211      	movs	r2, #17
 8007b20:	2100      	movs	r1, #0
 8007b22:	487e      	ldr	r0, [pc, #504]	@ (8007d1c <resetMenuTexts+0x43c>)
 8007b24:	f006 fbab 	bl	800e27e <memset>
    memset(devirmeYukariValfSureText, 0, 17);
 8007b28:	2211      	movs	r2, #17
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	487c      	ldr	r0, [pc, #496]	@ (8007d20 <resetMenuTexts+0x440>)
 8007b2e:	f006 fba6 	bl	800e27e <memset>
    memset(ileriValfSureText, 0, 17);
 8007b32:	2211      	movs	r2, #17
 8007b34:	2100      	movs	r1, #0
 8007b36:	487b      	ldr	r0, [pc, #492]	@ (8007d24 <resetMenuTexts+0x444>)
 8007b38:	f006 fba1 	bl	800e27e <memset>
    memset(devirmeAsagiValfSureText, 0, 17);
 8007b3c:	2211      	movs	r2, #17
 8007b3e:	2100      	movs	r1, #0
 8007b40:	4879      	ldr	r0, [pc, #484]	@ (8007d28 <resetMenuTexts+0x448>)
 8007b42:	f006 fb9c 	bl	800e27e <memset>
    memset(geriValfSureText, 0, 17);
 8007b46:	2211      	movs	r2, #17
 8007b48:	2100      	movs	r1, #0
 8007b4a:	4878      	ldr	r0, [pc, #480]	@ (8007d2c <resetMenuTexts+0x44c>)
 8007b4c:	f006 fb97 	bl	800e27e <memset>
    memset(calismaSuresiText, 0, 17);
 8007b50:	2211      	movs	r2, #17
 8007b52:	2100      	movs	r1, #0
 8007b54:	4876      	ldr	r0, [pc, #472]	@ (8007d30 <resetMenuTexts+0x450>)
 8007b56:	f006 fb92 	bl	800e27e <memset>
    memset(calismaSayisiText, 0, 17);
 8007b5a:	2211      	movs	r2, #17
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	4875      	ldr	r0, [pc, #468]	@ (8007d34 <resetMenuTexts+0x454>)
 8007b60:	f006 fb8d 	bl	800e27e <memset>
    memset(enterlaSifirlaText, 0, 17);
 8007b64:	2211      	movs	r2, #17
 8007b66:	2100      	movs	r1, #0
 8007b68:	4873      	ldr	r0, [pc, #460]	@ (8007d38 <resetMenuTexts+0x458>)
 8007b6a:	f006 fb88 	bl	800e27e <memset>
    memset(dilSecimText, 0, 17);
 8007b6e:	2211      	movs	r2, #17
 8007b70:	2100      	movs	r1, #0
 8007b72:	4872      	ldr	r0, [pc, #456]	@ (8007d3c <resetMenuTexts+0x45c>)
 8007b74:	f006 fb83 	bl	800e27e <memset>
    memset(secilenDilText, 0, 17);
 8007b78:	2211      	movs	r2, #17
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	4870      	ldr	r0, [pc, #448]	@ (8007d40 <resetMenuTexts+0x460>)
 8007b7e:	f006 fb7e 	bl	800e27e <memset>
    memset(menudenCikisText, 0, 17);
 8007b82:	2211      	movs	r2, #17
 8007b84:	2100      	movs	r1, #0
 8007b86:	486f      	ldr	r0, [pc, #444]	@ (8007d44 <resetMenuTexts+0x464>)
 8007b88:	f006 fb79 	bl	800e27e <memset>
    memset(enteraBasinizText, 0, 17);
 8007b8c:	2211      	movs	r2, #17
 8007b8e:	2100      	movs	r1, #0
 8007b90:	486d      	ldr	r0, [pc, #436]	@ (8007d48 <resetMenuTexts+0x468>)
 8007b92:	f006 fb74 	bl	800e27e <memset>
    memset(hataKoduText, 0, 17);
 8007b96:	2211      	movs	r2, #17
 8007b98:	2100      	movs	r1, #0
 8007b9a:	486c      	ldr	r0, [pc, #432]	@ (8007d4c <resetMenuTexts+0x46c>)
 8007b9c:	f006 fb6f 	bl	800e27e <memset>
    memset(dataSynchText, 0, 17);
 8007ba0:	2211      	movs	r2, #17
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	486a      	ldr	r0, [pc, #424]	@ (8007d50 <resetMenuTexts+0x470>)
 8007ba6:	f006 fb6a 	bl	800e27e <memset>
    memset(dataSynch2Text, 0, 17);
 8007baa:	2211      	movs	r2, #17
 8007bac:	2100      	movs	r1, #0
 8007bae:	4869      	ldr	r0, [pc, #420]	@ (8007d54 <resetMenuTexts+0x474>)
 8007bb0:	f006 fb65 	bl	800e27e <memset>
    memset(mustBeUniqueText, 0, 17);
 8007bb4:	2211      	movs	r2, #17
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	4867      	ldr	r0, [pc, #412]	@ (8007d58 <resetMenuTexts+0x478>)
 8007bba:	f006 fb60 	bl	800e27e <memset>
    memset(mustBeUnique2Text, 0, 17);
 8007bbe:	2211      	movs	r2, #17
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	4866      	ldr	r0, [pc, #408]	@ (8007d5c <resetMenuTexts+0x47c>)
 8007bc4:	f006 fb5b 	bl	800e27e <memset>
    memset(mustBe12Text, 0, 17);
 8007bc8:	2211      	movs	r2, #17
 8007bca:	2100      	movs	r1, #0
 8007bcc:	4864      	ldr	r0, [pc, #400]	@ (8007d60 <resetMenuTexts+0x480>)
 8007bce:	f006 fb56 	bl	800e27e <memset>
    memset(mustBe122Text, 0, 17);
 8007bd2:	2211      	movs	r2, #17
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	4863      	ldr	r0, [pc, #396]	@ (8007d64 <resetMenuTexts+0x484>)
 8007bd8:	f006 fb51 	bl	800e27e <memset>
    memset(ssidExceedErrorText, 0, 17);
 8007bdc:	2211      	movs	r2, #17
 8007bde:	2100      	movs	r1, #0
 8007be0:	4861      	ldr	r0, [pc, #388]	@ (8007d68 <resetMenuTexts+0x488>)
 8007be2:	f006 fb4c 	bl	800e27e <memset>
    memset(ssidExceedError2Text, 0, 17);
 8007be6:	2211      	movs	r2, #17
 8007be8:	2100      	movs	r1, #0
 8007bea:	4860      	ldr	r0, [pc, #384]	@ (8007d6c <resetMenuTexts+0x48c>)
 8007bec:	f006 fb47 	bl	800e27e <memset>
    memset(passExceedErrorText, 0, 17);
 8007bf0:	2211      	movs	r2, #17
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	485e      	ldr	r0, [pc, #376]	@ (8007d70 <resetMenuTexts+0x490>)
 8007bf6:	f006 fb42 	bl	800e27e <memset>
    memset(passExceedError2Text, 0, 17);
 8007bfa:	2211      	movs	r2, #17
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	485d      	ldr	r0, [pc, #372]	@ (8007d74 <resetMenuTexts+0x494>)
 8007c00:	f006 fb3d 	bl	800e27e <memset>
    memset(dataYazildiText, 0, 17);
 8007c04:	2211      	movs	r2, #17
 8007c06:	2100      	movs	r1, #0
 8007c08:	485b      	ldr	r0, [pc, #364]	@ (8007d78 <resetMenuTexts+0x498>)
 8007c0a:	f006 fb38 	bl	800e27e <memset>
    memset(dataOkunuyorText, 0, 17);
 8007c0e:	2211      	movs	r2, #17
 8007c10:	2100      	movs	r1, #0
 8007c12:	485a      	ldr	r0, [pc, #360]	@ (8007d7c <resetMenuTexts+0x49c>)
 8007c14:	f006 fb33 	bl	800e27e <memset>
    memset(dataOkunduText, 0, 17);
 8007c18:	2211      	movs	r2, #17
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	4858      	ldr	r0, [pc, #352]	@ (8007d80 <resetMenuTexts+0x4a0>)
 8007c1e:	f006 fb2e 	bl	800e27e <memset>
    memset(degerKaydedildiText, 0, 17);
 8007c22:	2211      	movs	r2, #17
 8007c24:	2100      	movs	r1, #0
 8007c26:	4857      	ldr	r0, [pc, #348]	@ (8007d84 <resetMenuTexts+0x4a4>)
 8007c28:	f006 fb29 	bl	800e27e <memset>
    memset(errorCodeText, 0, 17);
 8007c2c:	2211      	movs	r2, #17
 8007c2e:	2100      	movs	r1, #0
 8007c30:	4855      	ldr	r0, [pc, #340]	@ (8007d88 <resetMenuTexts+0x4a8>)
 8007c32:	f006 fb24 	bl	800e27e <memset>
 8007c36:	e0a9      	b.n	8007d8c <resetMenuTexts+0x4ac>
 8007c38:	20001728 	.word	0x20001728
 8007c3c:	2000173c 	.word	0x2000173c
 8007c40:	20001750 	.word	0x20001750
 8007c44:	20001764 	.word	0x20001764
 8007c48:	20001778 	.word	0x20001778
 8007c4c:	2000178c 	.word	0x2000178c
 8007c50:	200017a0 	.word	0x200017a0
 8007c54:	200017b4 	.word	0x200017b4
 8007c58:	200017c8 	.word	0x200017c8
 8007c5c:	200017dc 	.word	0x200017dc
 8007c60:	200017f0 	.word	0x200017f0
 8007c64:	20001804 	.word	0x20001804
 8007c68:	20001818 	.word	0x20001818
 8007c6c:	2000182c 	.word	0x2000182c
 8007c70:	20001840 	.word	0x20001840
 8007c74:	20001854 	.word	0x20001854
 8007c78:	20001868 	.word	0x20001868
 8007c7c:	2000187c 	.word	0x2000187c
 8007c80:	20001890 	.word	0x20001890
 8007c84:	200018a4 	.word	0x200018a4
 8007c88:	200018b8 	.word	0x200018b8
 8007c8c:	200018cc 	.word	0x200018cc
 8007c90:	200018e0 	.word	0x200018e0
 8007c94:	200018f4 	.word	0x200018f4
 8007c98:	20001908 	.word	0x20001908
 8007c9c:	2000191c 	.word	0x2000191c
 8007ca0:	20001930 	.word	0x20001930
 8007ca4:	20001944 	.word	0x20001944
 8007ca8:	20001958 	.word	0x20001958
 8007cac:	2000196c 	.word	0x2000196c
 8007cb0:	20001980 	.word	0x20001980
 8007cb4:	20001994 	.word	0x20001994
 8007cb8:	200019a8 	.word	0x200019a8
 8007cbc:	200019bc 	.word	0x200019bc
 8007cc0:	200019d0 	.word	0x200019d0
 8007cc4:	200019e4 	.word	0x200019e4
 8007cc8:	200019f8 	.word	0x200019f8
 8007ccc:	20001a0c 	.word	0x20001a0c
 8007cd0:	20001a20 	.word	0x20001a20
 8007cd4:	20001a34 	.word	0x20001a34
 8007cd8:	20001a48 	.word	0x20001a48
 8007cdc:	20001a5c 	.word	0x20001a5c
 8007ce0:	20001a70 	.word	0x20001a70
 8007ce4:	20001a84 	.word	0x20001a84
 8007ce8:	20001a98 	.word	0x20001a98
 8007cec:	20001aac 	.word	0x20001aac
 8007cf0:	20001ac0 	.word	0x20001ac0
 8007cf4:	20001ad4 	.word	0x20001ad4
 8007cf8:	20001ae8 	.word	0x20001ae8
 8007cfc:	20001afc 	.word	0x20001afc
 8007d00:	20001b10 	.word	0x20001b10
 8007d04:	20001b24 	.word	0x20001b24
 8007d08:	20001b38 	.word	0x20001b38
 8007d0c:	20001b4c 	.word	0x20001b4c
 8007d10:	20001b60 	.word	0x20001b60
 8007d14:	20001b74 	.word	0x20001b74
 8007d18:	20001b88 	.word	0x20001b88
 8007d1c:	20001b9c 	.word	0x20001b9c
 8007d20:	20001bb0 	.word	0x20001bb0
 8007d24:	20001bc4 	.word	0x20001bc4
 8007d28:	20001bd8 	.word	0x20001bd8
 8007d2c:	20001bec 	.word	0x20001bec
 8007d30:	20001c00 	.word	0x20001c00
 8007d34:	20001c14 	.word	0x20001c14
 8007d38:	20001c28 	.word	0x20001c28
 8007d3c:	20001c3c 	.word	0x20001c3c
 8007d40:	20001c50 	.word	0x20001c50
 8007d44:	20001c64 	.word	0x20001c64
 8007d48:	20001c78 	.word	0x20001c78
 8007d4c:	20001c8c 	.word	0x20001c8c
 8007d50:	20001ca0 	.word	0x20001ca0
 8007d54:	20001cb4 	.word	0x20001cb4
 8007d58:	20001cc8 	.word	0x20001cc8
 8007d5c:	20001cdc 	.word	0x20001cdc
 8007d60:	20001cf0 	.word	0x20001cf0
 8007d64:	20001d04 	.word	0x20001d04
 8007d68:	20001d18 	.word	0x20001d18
 8007d6c:	20001d2c 	.word	0x20001d2c
 8007d70:	20001d40 	.word	0x20001d40
 8007d74:	20001d54 	.word	0x20001d54
 8007d78:	20001d68 	.word	0x20001d68
 8007d7c:	20001d7c 	.word	0x20001d7c
 8007d80:	20001d90 	.word	0x20001d90
 8007d84:	20001da4 	.word	0x20001da4
 8007d88:	20001db8 	.word	0x20001db8
    memset(machineIDText, 0, 17);
 8007d8c:	2211      	movs	r2, #17
 8007d8e:	2100      	movs	r1, #0
 8007d90:	4809      	ldr	r0, [pc, #36]	@ (8007db8 <resetMenuTexts+0x4d8>)
 8007d92:	f006 fa74 	bl	800e27e <memset>
    memset(idConfirmationText, 0, 17);
 8007d96:	2211      	movs	r2, #17
 8007d98:	2100      	movs	r1, #0
 8007d9a:	4808      	ldr	r0, [pc, #32]	@ (8007dbc <resetMenuTexts+0x4dc>)
 8007d9c:	f006 fa6f 	bl	800e27e <memset>
    memset(idConfirmationSubText, 0, 17);
 8007da0:	2211      	movs	r2, #17
 8007da2:	2100      	movs	r1, #0
 8007da4:	4806      	ldr	r0, [pc, #24]	@ (8007dc0 <resetMenuTexts+0x4e0>)
 8007da6:	f006 fa6a 	bl	800e27e <memset>
    memset(wifiConfirmationText, 0, 17);
 8007daa:	2211      	movs	r2, #17
 8007dac:	2100      	movs	r1, #0
 8007dae:	4805      	ldr	r0, [pc, #20]	@ (8007dc4 <resetMenuTexts+0x4e4>)
 8007db0:	f006 fa65 	bl	800e27e <memset>
}
 8007db4:	bf00      	nop
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	20001dcc 	.word	0x20001dcc
 8007dbc:	20001de0 	.word	0x20001de0
 8007dc0:	20001df4 	.word	0x20001df4
 8007dc4:	20001e08 	.word	0x20001e08

08007dc8 <BasicWifiSetup>:

#define SHORT_DELAY_MS 1000
#define LONG_DELAY_MS 2000

// Temel WiFi İşlemleri için Yardımcı Fonksiyon
static void BasicWifiSetup(UART_HandleTypeDef *huart) {
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
    Wifi_FactoryReset(huart);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7f8 ff11 	bl	8000bf8 <Wifi_FactoryReset>
    HAL_Delay(SHORT_DELAY_MS);
 8007dd6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007dda:	f001 ff89 	bl	8009cf0 <HAL_Delay>

    Wifi_Restart(huart);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7f8 fee8 	bl	8000bb4 <Wifi_Restart>
    HAL_Delay(SHORT_DELAY_MS);
 8007de4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007de8:	f001 ff82 	bl	8009cf0 <HAL_Delay>

    Wifi_Init(huart);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7f8 feb3 	bl	8000b58 <Wifi_Init>
    HAL_Delay(LONG_DELAY_MS);
 8007df2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8007df6:	f001 ff7b 	bl	8009cf0 <HAL_Delay>
}
 8007dfa:	bf00      	nop
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <ESP8266_Init>:

// ESP8266'yı WiFi ağına bağlamak için kullanılan fonksiyon
void ESP8266_Init(UART_HandleTypeDef *huart, const char *wifiSS, const char *wifiPA) {
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b084      	sub	sp, #16
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	60f8      	str	r0, [r7, #12]
 8007e0a:	60b9      	str	r1, [r7, #8]
 8007e0c:	607a      	str	r2, [r7, #4]
    BasicWifiSetup(huart);
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f7ff ffda 	bl	8007dc8 <BasicWifiSetup>
    Wifi_SetMode(huart, WifiMode_Station);
 8007e14:	2101      	movs	r1, #1
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f7f8 ff10 	bl	8000c3c <Wifi_SetMode>
    HAL_Delay(LONG_DELAY_MS);
 8007e1c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8007e20:	f001 ff66 	bl	8009cf0 <HAL_Delay>

    Wifi_Station_ConnectToAp(huart, (char *)wifiSS, (char *)wifiPA, NULL);
 8007e24:	2300      	movs	r3, #0
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	68b9      	ldr	r1, [r7, #8]
 8007e2a:	68f8      	ldr	r0, [r7, #12]
 8007e2c:	f7f8 ff34 	bl	8000c98 <Wifi_Station_ConnectToAp>
    HAL_Delay(LONG_DELAY_MS);
 8007e30:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8007e34:	f001 ff5c 	bl	8009cf0 <HAL_Delay>
}
 8007e38:	bf00      	nop
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <sendMachineData>:
    Wifi_TcpIp_Close(huart, 0);
    HAL_Delay(LONG_DELAY_MS);
}

// Makine verilerini sunucuya göndermek için kullanılan fonksiyon
void sendMachineData(UART_HandleTypeDef *huart, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8007e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e42:	f2ad 7d6c 	subw	sp, sp, #1900	@ 0x76c
 8007e46:	af2c      	add	r7, sp, #176	@ 0xb0
 8007e48:	f507 64d7 	add.w	r4, r7, #1720	@ 0x6b8
 8007e4c:	f2a4 641c 	subw	r4, r4, #1564	@ 0x61c
 8007e50:	6020      	str	r0, [r4, #0]
 8007e52:	f507 60d7 	add.w	r0, r7, #1720	@ 0x6b8
 8007e56:	f5a0 60c4 	sub.w	r0, r0, #1568	@ 0x620
 8007e5a:	6001      	str	r1, [r0, #0]
 8007e5c:	f507 61d7 	add.w	r1, r7, #1720	@ 0x6b8
 8007e60:	f2a1 6124 	subw	r1, r1, #1572	@ 0x624
 8007e64:	600a      	str	r2, [r1, #0]
 8007e66:	f507 62d7 	add.w	r2, r7, #1720	@ 0x6b8
 8007e6a:	f5a2 62c5 	sub.w	r2, r2, #1576	@ 0x628
 8007e6e:	6013      	str	r3, [r2, #0]
    char local_txA[1500];
    char local_txB[50];

    snprintf(local_txA, sizeof(local_txA), URL_UPDATE_MACHINE_RAW, machineID, wifiSSID, wifiPass,
 8007e70:	4b97      	ldr	r3, [pc, #604]	@ (80080d0 <sendMachineData+0x290>)
 8007e72:	781b      	ldrb	r3, [r3, #0]
 8007e74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007e78:	4b96      	ldr	r3, [pc, #600]	@ (80080d4 <sendMachineData+0x294>)
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e80:	4b95      	ldr	r3, [pc, #596]	@ (80080d8 <sendMachineData+0x298>)
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e88:	4b94      	ldr	r3, [pc, #592]	@ (80080dc <sendMachineData+0x29c>)
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e90:	4b93      	ldr	r3, [pc, #588]	@ (80080e0 <sendMachineData+0x2a0>)
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007e96:	4b93      	ldr	r3, [pc, #588]	@ (80080e4 <sendMachineData+0x2a4>)
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007e9c:	4b92      	ldr	r3, [pc, #584]	@ (80080e8 <sendMachineData+0x2a8>)
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	677b      	str	r3, [r7, #116]	@ 0x74
 8007ea2:	4b92      	ldr	r3, [pc, #584]	@ (80080ec <sendMachineData+0x2ac>)
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	673b      	str	r3, [r7, #112]	@ 0x70
 8007ea8:	4b91      	ldr	r3, [pc, #580]	@ (80080f0 <sendMachineData+0x2b0>)
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007eae:	4b91      	ldr	r3, [pc, #580]	@ (80080f4 <sendMachineData+0x2b4>)
 8007eb0:	781b      	ldrb	r3, [r3, #0]
 8007eb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007eb4:	4b90      	ldr	r3, [pc, #576]	@ (80080f8 <sendMachineData+0x2b8>)
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007eba:	4b90      	ldr	r3, [pc, #576]	@ (80080fc <sendMachineData+0x2bc>)
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ec0:	4b8f      	ldr	r3, [pc, #572]	@ (8008100 <sendMachineData+0x2c0>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007ec6:	4b8f      	ldr	r3, [pc, #572]	@ (8008104 <sendMachineData+0x2c4>)
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ecc:	4b8e      	ldr	r3, [pc, #568]	@ (8008108 <sendMachineData+0x2c8>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ed2:	4b8e      	ldr	r3, [pc, #568]	@ (800810c <sendMachineData+0x2cc>)
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ed8:	4b8d      	ldr	r3, [pc, #564]	@ (8008110 <sendMachineData+0x2d0>)
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ede:	4b8d      	ldr	r3, [pc, #564]	@ (8008114 <sendMachineData+0x2d4>)
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ee4:	4b8c      	ldr	r3, [pc, #560]	@ (8008118 <sendMachineData+0x2d8>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eea:	4b8c      	ldr	r3, [pc, #560]	@ (800811c <sendMachineData+0x2dc>)
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	643b      	str	r3, [r7, #64]	@ 0x40
 8007ef0:	4b8b      	ldr	r3, [pc, #556]	@ (8008120 <sendMachineData+0x2e0>)
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ef6:	4b8b      	ldr	r3, [pc, #556]	@ (8008124 <sendMachineData+0x2e4>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007efc:	4b8a      	ldr	r3, [pc, #552]	@ (8008128 <sendMachineData+0x2e8>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f02:	4b8a      	ldr	r3, [pc, #552]	@ (800812c <sendMachineData+0x2ec>)
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f08:	4b89      	ldr	r3, [pc, #548]	@ (8008130 <sendMachineData+0x2f0>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f0e:	4b89      	ldr	r3, [pc, #548]	@ (8008134 <sendMachineData+0x2f4>)
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f14:	4b88      	ldr	r3, [pc, #544]	@ (8008138 <sendMachineData+0x2f8>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f1a:	4b88      	ldr	r3, [pc, #544]	@ (800813c <sendMachineData+0x2fc>)
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	623b      	str	r3, [r7, #32]
 8007f20:	4b87      	ldr	r3, [pc, #540]	@ (8008140 <sendMachineData+0x300>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	61fb      	str	r3, [r7, #28]
 8007f26:	4b87      	ldr	r3, [pc, #540]	@ (8008144 <sendMachineData+0x304>)
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	61bb      	str	r3, [r7, #24]
             devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit,
             kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure,
             kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit,
             devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr,
             devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode,
             calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39],
 8007f2c:	4b86      	ldr	r3, [pc, #536]	@ (8008148 <sendMachineData+0x308>)
 8007f2e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
    snprintf(local_txA, sizeof(local_txA), URL_UPDATE_MACHINE_RAW, machineID, wifiSSID, wifiPass,
 8007f32:	617b      	str	r3, [r7, #20]
             calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39],
 8007f34:	4b84      	ldr	r3, [pc, #528]	@ (8008148 <sendMachineData+0x308>)
 8007f36:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
    snprintf(local_txA, sizeof(local_txA), URL_UPDATE_MACHINE_RAW, machineID, wifiSSID, wifiPass,
 8007f3a:	613b      	str	r3, [r7, #16]
             eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44],
 8007f3c:	4b82      	ldr	r3, [pc, #520]	@ (8008148 <sendMachineData+0x308>)
 8007f3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
    snprintf(local_txA, sizeof(local_txA), URL_UPDATE_MACHINE_RAW, machineID, wifiSSID, wifiPass,
 8007f42:	60fb      	str	r3, [r7, #12]
             eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44],
 8007f44:	4b80      	ldr	r3, [pc, #512]	@ (8008148 <sendMachineData+0x308>)
 8007f46:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
    snprintf(local_txA, sizeof(local_txA), URL_UPDATE_MACHINE_RAW, machineID, wifiSSID, wifiPass,
 8007f4a:	60bb      	str	r3, [r7, #8]
             eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44],
 8007f4c:	4b7e      	ldr	r3, [pc, #504]	@ (8008148 <sendMachineData+0x308>)
 8007f4e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    snprintf(local_txA, sizeof(local_txA), URL_UPDATE_MACHINE_RAW, machineID, wifiSSID, wifiPass,
 8007f52:	607b      	str	r3, [r7, #4]
             eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44],
 8007f54:	4b7c      	ldr	r3, [pc, #496]	@ (8008148 <sendMachineData+0x308>)
 8007f56:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
    snprintf(local_txA, sizeof(local_txA), URL_UPDATE_MACHINE_RAW, machineID, wifiSSID, wifiPass,
 8007f5a:	603b      	str	r3, [r7, #0]
             eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44],
 8007f5c:	4b7a      	ldr	r3, [pc, #488]	@ (8008148 <sendMachineData+0x308>)
 8007f5e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
    snprintf(local_txA, sizeof(local_txA), URL_UPDATE_MACHINE_RAW, machineID, wifiSSID, wifiPass,
 8007f62:	461d      	mov	r5, r3
             eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, MAIN_SERVER_WITH_PORT);
 8007f64:	4b78      	ldr	r3, [pc, #480]	@ (8008148 <sendMachineData+0x308>)
 8007f66:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
    snprintf(local_txA, sizeof(local_txA), URL_UPDATE_MACHINE_RAW, machineID, wifiSSID, wifiPass,
 8007f6a:	4618      	mov	r0, r3
             eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, MAIN_SERVER_WITH_PORT);
 8007f6c:	4b76      	ldr	r3, [pc, #472]	@ (8008148 <sendMachineData+0x308>)
 8007f6e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
    snprintf(local_txA, sizeof(local_txA), URL_UPDATE_MACHINE_RAW, machineID, wifiSSID, wifiPass,
 8007f72:	4619      	mov	r1, r3
             eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, MAIN_SERVER_WITH_PORT);
 8007f74:	4b74      	ldr	r3, [pc, #464]	@ (8008148 <sendMachineData+0x308>)
 8007f76:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
    snprintf(local_txA, sizeof(local_txA), URL_UPDATE_MACHINE_RAW, machineID, wifiSSID, wifiPass,
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 8007f80:	f5a3 64c4 	sub.w	r4, r3, #1568	@ 0x620
 8007f84:	f107 06d8 	add.w	r6, r7, #216	@ 0xd8
 8007f88:	4b70      	ldr	r3, [pc, #448]	@ (800814c <sendMachineData+0x30c>)
 8007f8a:	932b      	str	r3, [sp, #172]	@ 0xac
 8007f8c:	233c      	movs	r3, #60	@ 0x3c
 8007f8e:	932a      	str	r3, [sp, #168]	@ 0xa8
 8007f90:	9229      	str	r2, [sp, #164]	@ 0xa4
 8007f92:	9128      	str	r1, [sp, #160]	@ 0xa0
 8007f94:	9027      	str	r0, [sp, #156]	@ 0x9c
 8007f96:	9526      	str	r5, [sp, #152]	@ 0x98
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	9225      	str	r2, [sp, #148]	@ 0x94
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	9224      	str	r2, [sp, #144]	@ 0x90
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	9223      	str	r2, [sp, #140]	@ 0x8c
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	9222      	str	r2, [sp, #136]	@ 0x88
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	9221      	str	r2, [sp, #132]	@ 0x84
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	9220      	str	r2, [sp, #128]	@ 0x80
 8007fb0:	69ba      	ldr	r2, [r7, #24]
 8007fb2:	921f      	str	r2, [sp, #124]	@ 0x7c
 8007fb4:	69fa      	ldr	r2, [r7, #28]
 8007fb6:	921e      	str	r2, [sp, #120]	@ 0x78
 8007fb8:	6a3a      	ldr	r2, [r7, #32]
 8007fba:	921d      	str	r2, [sp, #116]	@ 0x74
 8007fbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fbe:	921c      	str	r2, [sp, #112]	@ 0x70
 8007fc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007fc2:	921b      	str	r2, [sp, #108]	@ 0x6c
 8007fc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fc6:	921a      	str	r2, [sp, #104]	@ 0x68
 8007fc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fca:	9219      	str	r2, [sp, #100]	@ 0x64
 8007fcc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007fce:	9218      	str	r2, [sp, #96]	@ 0x60
 8007fd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007fd2:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007fd4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007fd6:	9216      	str	r2, [sp, #88]	@ 0x58
 8007fd8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fda:	9215      	str	r2, [sp, #84]	@ 0x54
 8007fdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fde:	9214      	str	r2, [sp, #80]	@ 0x50
 8007fe0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007fe2:	9213      	str	r2, [sp, #76]	@ 0x4c
 8007fe4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007fe6:	9212      	str	r2, [sp, #72]	@ 0x48
 8007fe8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007fea:	9211      	str	r2, [sp, #68]	@ 0x44
 8007fec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007fee:	9210      	str	r2, [sp, #64]	@ 0x40
 8007ff0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ff2:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007ff4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007ff6:	920e      	str	r2, [sp, #56]	@ 0x38
 8007ff8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007ffa:	920d      	str	r2, [sp, #52]	@ 0x34
 8007ffc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007ffe:	920c      	str	r2, [sp, #48]	@ 0x30
 8008000:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8008002:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008004:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008006:	920a      	str	r2, [sp, #40]	@ 0x28
 8008008:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800800a:	9209      	str	r2, [sp, #36]	@ 0x24
 800800c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800800e:	9208      	str	r2, [sp, #32]
 8008010:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008012:	9207      	str	r2, [sp, #28]
 8008014:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008016:	9206      	str	r2, [sp, #24]
 8008018:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800801c:	9205      	str	r2, [sp, #20]
 800801e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008022:	9204      	str	r2, [sp, #16]
 8008024:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008028:	9203      	str	r2, [sp, #12]
 800802a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800802e:	9302      	str	r3, [sp, #8]
 8008030:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 8008034:	f5a3 63c5 	sub.w	r3, r3, #1576	@ 0x628
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	9301      	str	r3, [sp, #4]
 800803c:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 8008040:	f2a3 6324 	subw	r3, r3, #1572	@ 0x624
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	6823      	ldr	r3, [r4, #0]
 800804a:	4a41      	ldr	r2, [pc, #260]	@ (8008150 <sendMachineData+0x310>)
 800804c:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8008050:	4630      	mov	r0, r6
 8008052:	f006 f84d 	bl	800e0f0 <sniprintf>

    int len = strlen(local_txA);
 8008056:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800805a:	4618      	mov	r0, r3
 800805c:	f7f8 f8e2 	bl	8000224 <strlen>
 8008060:	4603      	mov	r3, r0
 8008062:	f8c7 36b4 	str.w	r3, [r7, #1716]	@ 0x6b4
    snprintf(local_txB, sizeof(local_txB), "AT+CIPSEND=%d\r\n", len);
 8008066:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 800806a:	f8d7 36b4 	ldr.w	r3, [r7, #1716]	@ 0x6b4
 800806e:	4a39      	ldr	r2, [pc, #228]	@ (8008154 <sendMachineData+0x314>)
 8008070:	2132      	movs	r1, #50	@ 0x32
 8008072:	f006 f83d 	bl	800e0f0 <sniprintf>

    HAL_UART_Transmit_IT(huart, (uint8_t *)local_txB, strlen(local_txB));
 8008076:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800807a:	4618      	mov	r0, r3
 800807c:	f7f8 f8d2 	bl	8000224 <strlen>
 8008080:	4603      	mov	r3, r0
 8008082:	b29a      	uxth	r2, r3
 8008084:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8008088:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 800808c:	f2a3 631c 	subw	r3, r3, #1564	@ 0x61c
 8008090:	6818      	ldr	r0, [r3, #0]
 8008092:	f005 f81a 	bl	800d0ca <HAL_UART_Transmit_IT>
    HAL_Delay(2000);
 8008096:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800809a:	f001 fe29 	bl	8009cf0 <HAL_Delay>

    HAL_UART_Transmit_IT(huart, (uint8_t *)local_txA, strlen(local_txA));
 800809e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7f8 f8be 	bl	8000224 <strlen>
 80080a8:	4603      	mov	r3, r0
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 80080b0:	f507 63d7 	add.w	r3, r7, #1720	@ 0x6b8
 80080b4:	f2a3 631c 	subw	r3, r3, #1564	@ 0x61c
 80080b8:	6818      	ldr	r0, [r3, #0]
 80080ba:	f005 f806 	bl	800d0ca <HAL_UART_Transmit_IT>
    HAL_Delay(2000);
 80080be:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80080c2:	f001 fe15 	bl	8009cf0 <HAL_Delay>
}
 80080c6:	bf00      	nop
 80080c8:	f207 67bc 	addw	r7, r7, #1724	@ 0x6bc
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080d0:	200016cf 	.word	0x200016cf
 80080d4:	200016c1 	.word	0x200016c1
 80080d8:	200016c4 	.word	0x200016c4
 80080dc:	200016c5 	.word	0x200016c5
 80080e0:	200016c6 	.word	0x200016c6
 80080e4:	200016cd 	.word	0x200016cd
 80080e8:	200016c7 	.word	0x200016c7
 80080ec:	200016c8 	.word	0x200016c8
 80080f0:	200016cc 	.word	0x200016cc
 80080f4:	200016c9 	.word	0x200016c9
 80080f8:	200016d9 	.word	0x200016d9
 80080fc:	200016ca 	.word	0x200016ca
 8008100:	200016da 	.word	0x200016da
 8008104:	200016cb 	.word	0x200016cb
 8008108:	200016db 	.word	0x200016db
 800810c:	200016ce 	.word	0x200016ce
 8008110:	200016d0 	.word	0x200016d0
 8008114:	200016d1 	.word	0x200016d1
 8008118:	200016d2 	.word	0x200016d2
 800811c:	200016d3 	.word	0x200016d3
 8008120:	200016d4 	.word	0x200016d4
 8008124:	200016d5 	.word	0x200016d5
 8008128:	200016d6 	.word	0x200016d6
 800812c:	200016d7 	.word	0x200016d7
 8008130:	200016d8 	.word	0x200016d8
 8008134:	200016dc 	.word	0x200016dc
 8008138:	200016de 	.word	0x200016de
 800813c:	200016b8 	.word	0x200016b8
 8008140:	200016b9 	.word	0x200016b9
 8008144:	200016e0 	.word	0x200016e0
 8008148:	20000fec 	.word	0x20000fec
 800814c:	0800f1b8 	.word	0x0800f1b8
 8008150:	0800ee88 	.word	0x0800ee88
 8008154:	0800f1e0 	.word	0x0800f1e0

08008158 <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 800815e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008162:	f001 fdc5 	bl	8009cf0 <HAL_Delay>
	int confirmationVal = 0;
 8008166:	2300      	movs	r3, #0
 8008168:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 800816a:	e012      	b.n	8008192 <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 800816c:	4a12      	ldr	r2, [pc, #72]	@ (80081b8 <takeMachineIDWithConfirmation+0x60>)
 800816e:	2101      	movs	r1, #1
 8008170:	2001      	movs	r0, #1
 8008172:	f001 f845 	bl	8009200 <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 8008176:	4a11      	ldr	r2, [pc, #68]	@ (80081bc <takeMachineIDWithConfirmation+0x64>)
 8008178:	2101      	movs	r1, #1
 800817a:	2002      	movs	r0, #2
 800817c:	f001 f840 	bl	8009200 <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 8008180:	2102      	movs	r1, #2
 8008182:	480f      	ldr	r0, [pc, #60]	@ (80081c0 <takeMachineIDWithConfirmation+0x68>)
 8008184:	f002 fb90 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8008188:	4603      	mov	r3, r0
 800818a:	2b01      	cmp	r3, #1
 800818c:	d101      	bne.n	8008192 <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 800818e:	2301      	movs	r3, #1
 8008190:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d0e9      	beq.n	800816c <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 8008198:	f000 f814 	bl	80081c4 <takeMachineID>

	convertArrays(1);
 800819c:	2001      	movs	r0, #1
 800819e:	f7f8 fb83 	bl	80008a8 <convertArrays>
	HAL_Delay(50);
 80081a2:	2032      	movs	r0, #50	@ 0x32
 80081a4:	f001 fda4 	bl	8009cf0 <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 80081a8:	2001      	movs	r0, #1
 80081aa:	f7f9 f8f7 	bl	800139c <printCredentials>
}
 80081ae:	bf00      	nop
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	20001de0 	.word	0x20001de0
 80081bc:	20001df4 	.word	0x20001df4
 80081c0:	40010800 	.word	0x40010800

080081c4 <takeMachineID>:

void takeMachineID() {
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b086      	sub	sp, #24
 80081c8:	af00      	add	r7, sp, #0
	mainSection:

	lcd_cursor(1);
 80081ca:	2001      	movs	r0, #1
 80081cc:	f001 f876 	bl	80092bc <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 80081d0:	220c      	movs	r2, #12
 80081d2:	2100      	movs	r1, #0
 80081d4:	48a6      	ldr	r0, [pc, #664]	@ (8008470 <takeMachineID+0x2ac>)
 80081d6:	f006 f852 	bl	800e27e <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 80081da:	2305      	movs	r3, #5
 80081dc:	617b      	str	r3, [r7, #20]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 80081de:	2303      	movs	r3, #3
 80081e0:	613b      	str	r3, [r7, #16]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 80081e2:	2300      	movs	r3, #0
 80081e4:	60fb      	str	r3, [r7, #12]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 80081e6:	4ba3      	ldr	r3, [pc, #652]	@ (8008474 <takeMachineID+0x2b0>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	60bb      	str	r3, [r7, #8]

    printTemplate(1, 0);
 80081ec:	2100      	movs	r1, #0
 80081ee:	2001      	movs	r0, #1
 80081f0:	f7f8 ff64 	bl	80010bc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80081f4:	2108      	movs	r1, #8
 80081f6:	48a0      	ldr	r0, [pc, #640]	@ (8008478 <takeMachineID+0x2b4>)
 80081f8:	f002 fb56 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80081fc:	4603      	mov	r3, r0
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d12f      	bne.n	8008262 <takeMachineID+0x9e>
        	lcd_cursor(0);
 8008202:	2000      	movs	r0, #0
 8008204:	f001 f85a 	bl	80092bc <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8008208:	f000 fe34 	bl	8008e74 <checkEEPROM4ID>
 800820c:	4603      	mov	r3, r0
 800820e:	2b01      	cmp	r3, #1
 8008210:	d00e      	beq.n	8008230 <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 8008212:	4a9a      	ldr	r2, [pc, #616]	@ (800847c <takeMachineID+0x2b8>)
 8008214:	2101      	movs	r1, #1
 8008216:	2001      	movs	r0, #1
 8008218:	f000 fff2 	bl	8009200 <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 800821c:	4a98      	ldr	r2, [pc, #608]	@ (8008480 <takeMachineID+0x2bc>)
 800821e:	2101      	movs	r1, #1
 8008220:	2002      	movs	r0, #2
 8008222:	f000 ffed 	bl	8009200 <lcd_print>
        		HAL_Delay(1250);
 8008226:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 800822a:	f001 fd61 	bl	8009cf0 <HAL_Delay>

        		goto mainSection;
 800822e:	e7cc      	b.n	80081ca <takeMachineID+0x6>
        	//int machineIDControl = 0;
        	//for(int i=0; i<2; i++) {
        		//machineIDControl = checkMachineID(&huart1, machineID);
        	//}

        	int adminPassword = az5();
 8008230:	f000 fe46 	bl	8008ec0 <az5>
 8008234:	6078      	str	r0, [r7, #4]

        	if(adminPassword == 1) {
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d103      	bne.n	8008244 <takeMachineID+0x80>
        		saveEEPROM(1);
 800823c:	2001      	movs	r0, #1
 800823e:	f7f8 fa31 	bl	80006a4 <saveEEPROM>
 8008242:	e00e      	b.n	8008262 <takeMachineID+0x9e>
        	} else {
        		//Özel mesaj ayarlanacak
        		lcd_print(1, 1, mustBeUniqueText);
 8008244:	4a8f      	ldr	r2, [pc, #572]	@ (8008484 <takeMachineID+0x2c0>)
 8008246:	2101      	movs	r1, #1
 8008248:	2001      	movs	r0, #1
 800824a:	f000 ffd9 	bl	8009200 <lcd_print>
        		lcd_print(2, 1, mustBeUnique2Text);
 800824e:	4a8e      	ldr	r2, [pc, #568]	@ (8008488 <takeMachineID+0x2c4>)
 8008250:	2101      	movs	r1, #1
 8008252:	2002      	movs	r0, #2
 8008254:	f000 ffd4 	bl	8009200 <lcd_print>

        		HAL_Delay(500);
 8008258:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800825c:	f001 fd48 	bl	8009cf0 <HAL_Delay>

        		goto mainSection;
 8008260:	e7b3      	b.n	80081ca <takeMachineID+0x6>
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008262:	2101      	movs	r1, #1
 8008264:	4884      	ldr	r0, [pc, #528]	@ (8008478 <takeMachineID+0x2b4>)
 8008266:	f002 fb1f 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800826a:	4603      	mov	r3, r0
 800826c:	2b01      	cmp	r3, #1
 800826e:	d111      	bne.n	8008294 <takeMachineID+0xd0>
        	if(cursorPosition == 7) {
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	2b07      	cmp	r3, #7
 8008274:	d102      	bne.n	800827c <takeMachineID+0xb8>
        		cursorPosition = 10;
 8008276:	230a      	movs	r3, #10
 8008278:	613b      	str	r3, [r7, #16]
 800827a:	e008      	b.n	800828e <takeMachineID+0xca>
        	} else if (cursorPosition == 14) {
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	2b0e      	cmp	r3, #14
 8008280:	d102      	bne.n	8008288 <takeMachineID+0xc4>
                cursorPosition = 3;
 8008282:	2303      	movs	r3, #3
 8008284:	613b      	str	r3, [r7, #16]
 8008286:	e002      	b.n	800828e <takeMachineID+0xca>
            } else {
            	cursorPosition++;
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	3301      	adds	r3, #1
 800828c:	613b      	str	r3, [r7, #16]
            }

        	HAL_Delay(150);
 800828e:	2096      	movs	r0, #150	@ 0x96
 8008290:	f001 fd2e 	bl	8009cf0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8008294:	2108      	movs	r1, #8
 8008296:	487d      	ldr	r0, [pc, #500]	@ (800848c <takeMachineID+0x2c8>)
 8008298:	f002 fb06 	bl	800a8a8 <HAL_GPIO_ReadPin>
 800829c:	4603      	mov	r3, r0
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d111      	bne.n	80082c6 <takeMachineID+0x102>
            if (cursorPosition == 3) {
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	2b03      	cmp	r3, #3
 80082a6:	d102      	bne.n	80082ae <takeMachineID+0xea>
                cursorPosition = 14;
 80082a8:	230e      	movs	r3, #14
 80082aa:	613b      	str	r3, [r7, #16]
 80082ac:	e008      	b.n	80082c0 <takeMachineID+0xfc>
            } else if(cursorPosition == 10) {
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	2b0a      	cmp	r3, #10
 80082b2:	d102      	bne.n	80082ba <takeMachineID+0xf6>
            	cursorPosition = 7;
 80082b4:	2307      	movs	r3, #7
 80082b6:	613b      	str	r3, [r7, #16]
 80082b8:	e002      	b.n	80082c0 <takeMachineID+0xfc>
            } else {
            	cursorPosition--;
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	3b01      	subs	r3, #1
 80082be:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(250);
 80082c0:	20fa      	movs	r0, #250	@ 0xfa
 80082c2:	f001 fd15 	bl	8009cf0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80082c6:	2102      	movs	r1, #2
 80082c8:	486b      	ldr	r0, [pc, #428]	@ (8008478 <takeMachineID+0x2b4>)
 80082ca:	f002 faed 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	f040 80a1 	bne.w	8008418 <takeMachineID+0x254>
        	if(cursorPosition == 3) {
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	2b03      	cmp	r3, #3
 80082da:	d10a      	bne.n	80082f2 <takeMachineID+0x12e>
        		machineID[arrayPos] = '0';
 80082dc:	4a64      	ldr	r2, [pc, #400]	@ (8008470 <takeMachineID+0x2ac>)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	4413      	add	r3, r2
 80082e2:	2230      	movs	r2, #48	@ 0x30
 80082e4:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 80082e6:	4a6a      	ldr	r2, [pc, #424]	@ (8008490 <takeMachineID+0x2cc>)
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	4413      	add	r3, r2
 80082ec:	2200      	movs	r2, #0
 80082ee:	701a      	strb	r2, [r3, #0]
 80082f0:	e07c      	b.n	80083ec <takeMachineID+0x228>
        	} else if(cursorPosition == 4) {
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	2b04      	cmp	r3, #4
 80082f6:	d10a      	bne.n	800830e <takeMachineID+0x14a>
        		machineID[arrayPos] = '1';
 80082f8:	4a5d      	ldr	r2, [pc, #372]	@ (8008470 <takeMachineID+0x2ac>)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	4413      	add	r3, r2
 80082fe:	2231      	movs	r2, #49	@ 0x31
 8008300:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8008302:	4a63      	ldr	r2, [pc, #396]	@ (8008490 <takeMachineID+0x2cc>)
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	4413      	add	r3, r2
 8008308:	2201      	movs	r2, #1
 800830a:	701a      	strb	r2, [r3, #0]
 800830c:	e06e      	b.n	80083ec <takeMachineID+0x228>
        	} else if(cursorPosition == 5) {
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	2b05      	cmp	r3, #5
 8008312:	d10a      	bne.n	800832a <takeMachineID+0x166>
        		machineID[arrayPos] = '2';
 8008314:	4a56      	ldr	r2, [pc, #344]	@ (8008470 <takeMachineID+0x2ac>)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	4413      	add	r3, r2
 800831a:	2232      	movs	r2, #50	@ 0x32
 800831c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 800831e:	4a5c      	ldr	r2, [pc, #368]	@ (8008490 <takeMachineID+0x2cc>)
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	4413      	add	r3, r2
 8008324:	2202      	movs	r2, #2
 8008326:	701a      	strb	r2, [r3, #0]
 8008328:	e060      	b.n	80083ec <takeMachineID+0x228>
        	} else if(cursorPosition == 6) {
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	2b06      	cmp	r3, #6
 800832e:	d10a      	bne.n	8008346 <takeMachineID+0x182>
        		machineID[arrayPos] = '3';
 8008330:	4a4f      	ldr	r2, [pc, #316]	@ (8008470 <takeMachineID+0x2ac>)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	4413      	add	r3, r2
 8008336:	2233      	movs	r2, #51	@ 0x33
 8008338:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 800833a:	4a55      	ldr	r2, [pc, #340]	@ (8008490 <takeMachineID+0x2cc>)
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	4413      	add	r3, r2
 8008340:	2203      	movs	r2, #3
 8008342:	701a      	strb	r2, [r3, #0]
 8008344:	e052      	b.n	80083ec <takeMachineID+0x228>
        	} else if(cursorPosition == 7) {
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	2b07      	cmp	r3, #7
 800834a:	d10a      	bne.n	8008362 <takeMachineID+0x19e>
        		machineID[arrayPos] = '4';
 800834c:	4a48      	ldr	r2, [pc, #288]	@ (8008470 <takeMachineID+0x2ac>)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	4413      	add	r3, r2
 8008352:	2234      	movs	r2, #52	@ 0x34
 8008354:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8008356:	4a4e      	ldr	r2, [pc, #312]	@ (8008490 <takeMachineID+0x2cc>)
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	4413      	add	r3, r2
 800835c:	2204      	movs	r2, #4
 800835e:	701a      	strb	r2, [r3, #0]
 8008360:	e044      	b.n	80083ec <takeMachineID+0x228>
        	} else if(cursorPosition == 10) {
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	2b0a      	cmp	r3, #10
 8008366:	d10a      	bne.n	800837e <takeMachineID+0x1ba>
        		machineID[arrayPos] = '5';
 8008368:	4a41      	ldr	r2, [pc, #260]	@ (8008470 <takeMachineID+0x2ac>)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	4413      	add	r3, r2
 800836e:	2235      	movs	r2, #53	@ 0x35
 8008370:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8008372:	4a47      	ldr	r2, [pc, #284]	@ (8008490 <takeMachineID+0x2cc>)
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	4413      	add	r3, r2
 8008378:	2205      	movs	r2, #5
 800837a:	701a      	strb	r2, [r3, #0]
 800837c:	e036      	b.n	80083ec <takeMachineID+0x228>
        	} else if(cursorPosition == 11) {
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	2b0b      	cmp	r3, #11
 8008382:	d10a      	bne.n	800839a <takeMachineID+0x1d6>
        		machineID[arrayPos] = '6';
 8008384:	4a3a      	ldr	r2, [pc, #232]	@ (8008470 <takeMachineID+0x2ac>)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	4413      	add	r3, r2
 800838a:	2236      	movs	r2, #54	@ 0x36
 800838c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 800838e:	4a40      	ldr	r2, [pc, #256]	@ (8008490 <takeMachineID+0x2cc>)
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	4413      	add	r3, r2
 8008394:	2206      	movs	r2, #6
 8008396:	701a      	strb	r2, [r3, #0]
 8008398:	e028      	b.n	80083ec <takeMachineID+0x228>
        	} else if(cursorPosition == 12) {
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	2b0c      	cmp	r3, #12
 800839e:	d10a      	bne.n	80083b6 <takeMachineID+0x1f2>
        		machineID[arrayPos] = '7';
 80083a0:	4a33      	ldr	r2, [pc, #204]	@ (8008470 <takeMachineID+0x2ac>)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	4413      	add	r3, r2
 80083a6:	2237      	movs	r2, #55	@ 0x37
 80083a8:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 80083aa:	4a39      	ldr	r2, [pc, #228]	@ (8008490 <takeMachineID+0x2cc>)
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	4413      	add	r3, r2
 80083b0:	2207      	movs	r2, #7
 80083b2:	701a      	strb	r2, [r3, #0]
 80083b4:	e01a      	b.n	80083ec <takeMachineID+0x228>
        	} else if(cursorPosition == 13) {
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	2b0d      	cmp	r3, #13
 80083ba:	d10a      	bne.n	80083d2 <takeMachineID+0x20e>
        		machineID[arrayPos] = '8';
 80083bc:	4a2c      	ldr	r2, [pc, #176]	@ (8008470 <takeMachineID+0x2ac>)
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	4413      	add	r3, r2
 80083c2:	2238      	movs	r2, #56	@ 0x38
 80083c4:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 80083c6:	4a32      	ldr	r2, [pc, #200]	@ (8008490 <takeMachineID+0x2cc>)
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	4413      	add	r3, r2
 80083cc:	2208      	movs	r2, #8
 80083ce:	701a      	strb	r2, [r3, #0]
 80083d0:	e00c      	b.n	80083ec <takeMachineID+0x228>
        	} else if(cursorPosition == 14) {
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	2b0e      	cmp	r3, #14
 80083d6:	d109      	bne.n	80083ec <takeMachineID+0x228>
        		machineID[arrayPos] = '9';
 80083d8:	4a25      	ldr	r2, [pc, #148]	@ (8008470 <takeMachineID+0x2ac>)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	4413      	add	r3, r2
 80083de:	2239      	movs	r2, #57	@ 0x39
 80083e0:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 80083e2:	4a2b      	ldr	r2, [pc, #172]	@ (8008490 <takeMachineID+0x2cc>)
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	4413      	add	r3, r2
 80083e8:	2209      	movs	r2, #9
 80083ea:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	b2d9      	uxtb	r1, r3
 80083f0:	4a1f      	ldr	r2, [pc, #124]	@ (8008470 <takeMachineID+0x2ac>)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	4413      	add	r3, r2
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	461a      	mov	r2, r3
 80083fa:	2001      	movs	r0, #1
 80083fc:	f000 ff15 	bl	800922a <lcd_print_char>

        	writeLoc++;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	3301      	adds	r3, #1
 8008404:	617b      	str	r3, [r7, #20]
        	arrayPos++;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	3301      	adds	r3, #1
 800840a:	60fb      	str	r3, [r7, #12]
        	eepromVal++;
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	3301      	adds	r3, #1
 8008410:	60bb      	str	r3, [r7, #8]

        	HAL_Delay(150);
 8008412:	2096      	movs	r0, #150	@ 0x96
 8008414:	f001 fc6c 	bl	8009cf0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008418:	2104      	movs	r1, #4
 800841a:	4817      	ldr	r0, [pc, #92]	@ (8008478 <takeMachineID+0x2b4>)
 800841c:	f002 fa44 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8008420:	4603      	mov	r3, r0
 8008422:	2b01      	cmp	r3, #1
 8008424:	d14c      	bne.n	80084c0 <takeMachineID+0x2fc>
            if(strlen(machineID) >= 1) {
 8008426:	4b12      	ldr	r3, [pc, #72]	@ (8008470 <takeMachineID+0x2ac>)
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d045      	beq.n	80084ba <takeMachineID+0x2f6>
                machineID[arrayPos] = '\0';
 800842e:	4a10      	ldr	r2, [pc, #64]	@ (8008470 <takeMachineID+0x2ac>)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4413      	add	r3, r2
 8008434:	2200      	movs	r2, #0
 8008436:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8008438:	4a15      	ldr	r2, [pc, #84]	@ (8008490 <takeMachineID+0x2cc>)
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	4413      	add	r3, r2
 800843e:	2200      	movs	r2, #0
 8008440:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2b05      	cmp	r3, #5
 8008446:	dd03      	ble.n	8008450 <takeMachineID+0x28c>
                	writeLoc--;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	3b01      	subs	r3, #1
 800844c:	617b      	str	r3, [r7, #20]
 800844e:	e004      	b.n	800845a <takeMachineID+0x296>
                } else if(writeLoc < 5) {
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	2b04      	cmp	r3, #4
 8008454:	dc01      	bgt.n	800845a <takeMachineID+0x296>
                	writeLoc = 5;
 8008456:	2305      	movs	r3, #5
 8008458:	617b      	str	r3, [r7, #20]
                }

                if(arrayPos > 0) {
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2b00      	cmp	r3, #0
 800845e:	dd19      	ble.n	8008494 <takeMachineID+0x2d0>
                	arrayPos--;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	3b01      	subs	r3, #1
 8008464:	60fb      	str	r3, [r7, #12]
                	eepromVal--;
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	3b01      	subs	r3, #1
 800846a:	60bb      	str	r3, [r7, #8]
 800846c:	e01a      	b.n	80084a4 <takeMachineID+0x2e0>
 800846e:	bf00      	nop
 8008470:	20001064 	.word	0x20001064
 8008474:	20000000 	.word	0x20000000
 8008478:	40010800 	.word	0x40010800
 800847c:	20001cf0 	.word	0x20001cf0
 8008480:	20001d04 	.word	0x20001d04
 8008484:	20001cc8 	.word	0x20001cc8
 8008488:	20001cdc 	.word	0x20001cdc
 800848c:	40011000 	.word	0x40011000
 8008490:	20000fec 	.word	0x20000fec
                } else if(arrayPos < 0) {
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2b00      	cmp	r3, #0
 8008498:	da04      	bge.n	80084a4 <takeMachineID+0x2e0>
                	arrayPos = 0;
 800849a:	2300      	movs	r3, #0
 800849c:	60fb      	str	r3, [r7, #12]
                	eepromVal = idStartPos;
 800849e:	4b0c      	ldr	r3, [pc, #48]	@ (80084d0 <takeMachineID+0x30c>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	60bb      	str	r3, [r7, #8]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	3305      	adds	r3, #5
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	4619      	mov	r1, r3
 80084ae:	2001      	movs	r0, #1
 80084b0:	f000 fedc 	bl	800926c <lcd_delete_char>
                HAL_Delay(50);
 80084b4:	2032      	movs	r0, #50	@ 0x32
 80084b6:	f001 fc1b 	bl	8009cf0 <HAL_Delay>
            }

            HAL_Delay(150);
 80084ba:	2096      	movs	r0, #150	@ 0x96
 80084bc:	f001 fc18 	bl	8009cf0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80084c0:	693b      	ldr	r3, [r7, #16]
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	4619      	mov	r1, r3
 80084c6:	2002      	movs	r0, #2
 80084c8:	f000 fe7b 	bl	80091c2 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80084cc:	e692      	b.n	80081f4 <takeMachineID+0x30>
 80084ce:	bf00      	nop
 80084d0:	20000000 	.word	0x20000000

080084d4 <ssidConfirmation>:
    }
}

uint8_t ssidConfirmation() {
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
	int loopVal = 1;
 80084da:	2301      	movs	r3, #1
 80084dc:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 80084de:	4a1e      	ldr	r2, [pc, #120]	@ (8008558 <ssidConfirmation+0x84>)
 80084e0:	2101      	movs	r1, #1
 80084e2:	2001      	movs	r0, #1
 80084e4:	f000 fe8c 	bl	8009200 <lcd_print>

	while(loopVal == 1) {
 80084e8:	e012      	b.n	8008510 <ssidConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 80084ea:	4a1c      	ldr	r2, [pc, #112]	@ (800855c <ssidConfirmation+0x88>)
 80084ec:	2101      	movs	r1, #1
 80084ee:	2002      	movs	r0, #2
 80084f0:	f000 fe86 	bl	8009200 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80084f4:	2102      	movs	r1, #2
 80084f6:	481a      	ldr	r0, [pc, #104]	@ (8008560 <ssidConfirmation+0x8c>)
 80084f8:	f002 f9d6 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d101      	bne.n	8008506 <ssidConfirmation+0x32>
			loopVal = 0;
 8008502:	2300      	movs	r3, #0
 8008504:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiSSID);
 8008506:	4a17      	ldr	r2, [pc, #92]	@ (8008564 <ssidConfirmation+0x90>)
 8008508:	2101      	movs	r1, #1
 800850a:	2001      	movs	r0, #1
 800850c:	f000 fe78 	bl	8009200 <lcd_print>
	while(loopVal == 1) {
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b01      	cmp	r3, #1
 8008514:	d0e9      	beq.n	80084ea <ssidConfirmation+0x16>
	}

    lcd_cursor(0);
 8008516:	2000      	movs	r0, #0
 8008518:	f000 fed0 	bl	80092bc <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 800851c:	4811      	ldr	r0, [pc, #68]	@ (8008564 <ssidConfirmation+0x90>)
 800851e:	f7f7 fe81 	bl	8000224 <strlen>
 8008522:	4603      	mov	r3, r0
 8008524:	2b14      	cmp	r3, #20
 8008526:	d90f      	bls.n	8008548 <ssidConfirmation+0x74>
    	lcd_print(1, 1, ssidExceedErrorText);
 8008528:	4a0f      	ldr	r2, [pc, #60]	@ (8008568 <ssidConfirmation+0x94>)
 800852a:	2101      	movs	r1, #1
 800852c:	2001      	movs	r0, #1
 800852e:	f000 fe67 	bl	8009200 <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 8008532:	4a0e      	ldr	r2, [pc, #56]	@ (800856c <ssidConfirmation+0x98>)
 8008534:	2101      	movs	r1, #1
 8008536:	2002      	movs	r0, #2
 8008538:	f000 fe62 	bl	8009200 <lcd_print>
        HAL_Delay(1250);
 800853c:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8008540:	f001 fbd6 	bl	8009cf0 <HAL_Delay>

        return 0;
 8008544:	2300      	movs	r3, #0
 8008546:	e003      	b.n	8008550 <ssidConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 8008548:	2001      	movs	r0, #1
 800854a:	f7f8 f8ab 	bl	80006a4 <saveEEPROM>

    	return 1;
 800854e:	2301      	movs	r3, #1
    }
}
 8008550:	4618      	mov	r0, r3
 8008552:	3708      	adds	r7, #8
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	0800f7b0 	.word	0x0800f7b0
 800855c:	20001e08 	.word	0x20001e08
 8008560:	40010800 	.word	0x40010800
 8008564:	20001070 	.word	0x20001070
 8008568:	20001d18 	.word	0x20001d18
 800856c:	20001d2c 	.word	0x20001d2c

08008570 <takeWifiSSID>:

void takeWifiSSID() {
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 8008576:	2001      	movs	r0, #1
 8008578:	f000 fea0 	bl	80092bc <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 800857c:	2210      	movs	r2, #16
 800857e:	2100      	movs	r1, #0
 8008580:	48a4      	ldr	r0, [pc, #656]	@ (8008814 <takeWifiSSID+0x2a4>)
 8008582:	f005 fe7c 	bl	800e27e <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8008586:	2301      	movs	r3, #1
 8008588:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 800858a:	2307      	movs	r3, #7
 800858c:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 800858e:	2301      	movs	r3, #1
 8008590:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8008592:	2300      	movs	r3, #0
 8008594:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8008596:	4ba0      	ldr	r3, [pc, #640]	@ (8008818 <takeWifiSSID+0x2a8>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 800859c:	2101      	movs	r1, #1
 800859e:	2002      	movs	r0, #2
 80085a0:	f7f8 fd8c 	bl	80010bc <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80085a4:	2108      	movs	r1, #8
 80085a6:	489d      	ldr	r0, [pc, #628]	@ (800881c <takeWifiSSID+0x2ac>)
 80085a8:	f002 f97e 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80085ac:	4603      	mov	r3, r0
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d106      	bne.n	80085c0 <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 80085b2:	f7ff ff8f 	bl	80084d4 <ssidConfirmation>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f040 8126 	bne.w	800880a <takeWifiSSID+0x29a>
        		goto mainSSIDSection;
 80085be:	e7da      	b.n	8008576 <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80085c0:	2101      	movs	r1, #1
 80085c2:	4896      	ldr	r0, [pc, #600]	@ (800881c <takeWifiSSID+0x2ac>)
 80085c4:	f002 f970 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80085c8:	4603      	mov	r3, r0
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d14d      	bne.n	800866a <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2b50      	cmp	r3, #80	@ 0x50
 80085d2:	dd01      	ble.n	80085d8 <takeWifiSSID+0x68>
        		cursorPosition = 1;
 80085d4:	2301      	movs	r3, #1
 80085d6:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2b10      	cmp	r3, #16
 80085dc:	d13f      	bne.n	800865e <takeWifiSSID+0xee>
            	if(page == 1) {
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d109      	bne.n	80085f8 <takeWifiSSID+0x88>
            		cursorPosition = 1;
 80085e4:	2301      	movs	r3, #1
 80085e6:	60fb      	str	r3, [r7, #12]
            		page++;
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	3301      	adds	r3, #1
 80085ec:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80085ee:	2102      	movs	r1, #2
 80085f0:	2002      	movs	r0, #2
 80085f2:	f7f8 fd63 	bl	80010bc <printTemplate>
 80085f6:	e035      	b.n	8008664 <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	2b02      	cmp	r3, #2
 80085fc:	d109      	bne.n	8008612 <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 80085fe:	2301      	movs	r3, #1
 8008600:	60fb      	str	r3, [r7, #12]
            		page++;
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	3301      	adds	r3, #1
 8008606:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8008608:	2103      	movs	r1, #3
 800860a:	2002      	movs	r0, #2
 800860c:	f7f8 fd56 	bl	80010bc <printTemplate>
 8008610:	e028      	b.n	8008664 <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	2b03      	cmp	r3, #3
 8008616:	d109      	bne.n	800862c <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 8008618:	2301      	movs	r3, #1
 800861a:	60fb      	str	r3, [r7, #12]
            		page++;
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	3301      	adds	r3, #1
 8008620:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8008622:	2104      	movs	r1, #4
 8008624:	2002      	movs	r0, #2
 8008626:	f7f8 fd49 	bl	80010bc <printTemplate>
 800862a:	e01b      	b.n	8008664 <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	2b04      	cmp	r3, #4
 8008630:	d109      	bne.n	8008646 <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 8008632:	2301      	movs	r3, #1
 8008634:	60fb      	str	r3, [r7, #12]
            		page++;
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	3301      	adds	r3, #1
 800863a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 800863c:	2105      	movs	r1, #5
 800863e:	2002      	movs	r0, #2
 8008640:	f7f8 fd3c 	bl	80010bc <printTemplate>
 8008644:	e00e      	b.n	8008664 <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	2b05      	cmp	r3, #5
 800864a:	d10b      	bne.n	8008664 <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 800864c:	2301      	movs	r3, #1
 800864e:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008650:	2301      	movs	r3, #1
 8008652:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8008654:	2101      	movs	r1, #1
 8008656:	2002      	movs	r0, #2
 8008658:	f7f8 fd30 	bl	80010bc <printTemplate>
 800865c:	e002      	b.n	8008664 <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	3301      	adds	r3, #1
 8008662:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008664:	2096      	movs	r0, #150	@ 0x96
 8008666:	f001 fb43 	bl	8009cf0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800866a:	2108      	movs	r1, #8
 800866c:	486c      	ldr	r0, [pc, #432]	@ (8008820 <takeWifiSSID+0x2b0>)
 800866e:	f002 f91b 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8008672:	4603      	mov	r3, r0
 8008674:	2b01      	cmp	r3, #1
 8008676:	d149      	bne.n	800870c <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2b00      	cmp	r3, #0
 800867c:	dc01      	bgt.n	8008682 <takeWifiSSID+0x112>
        		cursorPosition = 80;
 800867e:	2350      	movs	r3, #80	@ 0x50
 8008680:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2b01      	cmp	r3, #1
 8008686:	d13b      	bne.n	8008700 <takeWifiSSID+0x190>
            	if(page == 1) {
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d108      	bne.n	80086a0 <takeWifiSSID+0x130>
            		cursorPosition = 16;
 800868e:	2310      	movs	r3, #16
 8008690:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8008692:	2305      	movs	r3, #5
 8008694:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8008696:	2105      	movs	r1, #5
 8008698:	2002      	movs	r0, #2
 800869a:	f7f8 fd0f 	bl	80010bc <printTemplate>
 800869e:	e032      	b.n	8008706 <takeWifiSSID+0x196>
            	} else if(page == 2) {
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d108      	bne.n	80086b8 <takeWifiSSID+0x148>
            		cursorPosition = 16;
 80086a6:	2310      	movs	r3, #16
 80086a8:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80086aa:	2301      	movs	r3, #1
 80086ac:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80086ae:	2101      	movs	r1, #1
 80086b0:	2002      	movs	r0, #2
 80086b2:	f7f8 fd03 	bl	80010bc <printTemplate>
 80086b6:	e026      	b.n	8008706 <takeWifiSSID+0x196>
            	} else if(page == 3) {
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	2b03      	cmp	r3, #3
 80086bc:	d108      	bne.n	80086d0 <takeWifiSSID+0x160>
            		cursorPosition = 16;
 80086be:	2310      	movs	r3, #16
 80086c0:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80086c2:	2302      	movs	r3, #2
 80086c4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80086c6:	2102      	movs	r1, #2
 80086c8:	2002      	movs	r0, #2
 80086ca:	f7f8 fcf7 	bl	80010bc <printTemplate>
 80086ce:	e01a      	b.n	8008706 <takeWifiSSID+0x196>
            	} else if(page == 4) {
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	2b04      	cmp	r3, #4
 80086d4:	d108      	bne.n	80086e8 <takeWifiSSID+0x178>
            		cursorPosition = 16;
 80086d6:	2310      	movs	r3, #16
 80086d8:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80086da:	2303      	movs	r3, #3
 80086dc:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 80086de:	2103      	movs	r1, #3
 80086e0:	2002      	movs	r0, #2
 80086e2:	f7f8 fceb 	bl	80010bc <printTemplate>
 80086e6:	e00e      	b.n	8008706 <takeWifiSSID+0x196>
            	} else if(page == 5) {
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	2b05      	cmp	r3, #5
 80086ec:	d10b      	bne.n	8008706 <takeWifiSSID+0x196>
            		cursorPosition = 16;
 80086ee:	2310      	movs	r3, #16
 80086f0:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80086f2:	2304      	movs	r3, #4
 80086f4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 80086f6:	2104      	movs	r1, #4
 80086f8:	2002      	movs	r0, #2
 80086fa:	f7f8 fcdf 	bl	80010bc <printTemplate>
 80086fe:	e002      	b.n	8008706 <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	3b01      	subs	r3, #1
 8008704:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008706:	2096      	movs	r0, #150	@ 0x96
 8008708:	f001 faf2 	bl	8009cf0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800870c:	2102      	movs	r1, #2
 800870e:	4843      	ldr	r0, [pc, #268]	@ (800881c <takeWifiSSID+0x2ac>)
 8008710:	f002 f8ca 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8008714:	4603      	mov	r3, r0
 8008716:	2b01      	cmp	r3, #1
 8008718:	d12f      	bne.n	800877a <takeWifiSSID+0x20a>
            eepromData[eepromVal] = cursorPosition;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	b2d9      	uxtb	r1, r3
 800871e:	4a41      	ldr	r2, [pc, #260]	@ (8008824 <takeWifiSSID+0x2b4>)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4413      	add	r3, r2
 8008724:	460a      	mov	r2, r1
 8008726:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 8008728:	4a3f      	ldr	r2, [pc, #252]	@ (8008828 <takeWifiSSID+0x2b8>)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	4413      	add	r3, r2
 800872e:	7819      	ldrb	r1, [r3, #0]
 8008730:	4a38      	ldr	r2, [pc, #224]	@ (8008814 <takeWifiSSID+0x2a4>)
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	4413      	add	r3, r2
 8008736:	460a      	mov	r2, r1
 8008738:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	b2d9      	uxtb	r1, r3
 800873e:	4a3a      	ldr	r2, [pc, #232]	@ (8008828 <takeWifiSSID+0x2b8>)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	4413      	add	r3, r2
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	461a      	mov	r2, r3
 8008748:	2001      	movs	r0, #1
 800874a:	f000 fd6e 	bl	800922a <lcd_print_char>

            writeLoc++;
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	3301      	adds	r3, #1
 8008752:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	3301      	adds	r3, #1
 8008758:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	3301      	adds	r3, #1
 800875e:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8008760:	4a30      	ldr	r2, [pc, #192]	@ (8008824 <takeWifiSSID+0x2b4>)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4413      	add	r3, r2
 8008766:	2200      	movs	r2, #0
 8008768:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 800876a:	4a2a      	ldr	r2, [pc, #168]	@ (8008814 <takeWifiSSID+0x2a4>)
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	4413      	add	r3, r2
 8008770:	2200      	movs	r2, #0
 8008772:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8008774:	2096      	movs	r0, #150	@ 0x96
 8008776:	f001 fabb 	bl	8009cf0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800877a:	2104      	movs	r1, #4
 800877c:	4827      	ldr	r0, [pc, #156]	@ (800881c <takeWifiSSID+0x2ac>)
 800877e:	f002 f893 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8008782:	4603      	mov	r3, r0
 8008784:	2b01      	cmp	r3, #1
 8008786:	d139      	bne.n	80087fc <takeWifiSSID+0x28c>
        	if(strlen(wifiSSID) >= 1) {
 8008788:	4b22      	ldr	r3, [pc, #136]	@ (8008814 <takeWifiSSID+0x2a4>)
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d032      	beq.n	80087f6 <takeWifiSSID+0x286>
        		eepromData[eepromVal] = '\0';
 8008790:	4a24      	ldr	r2, [pc, #144]	@ (8008824 <takeWifiSSID+0x2b4>)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4413      	add	r3, r2
 8008796:	2200      	movs	r2, #0
 8008798:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 800879a:	4a1e      	ldr	r2, [pc, #120]	@ (8008814 <takeWifiSSID+0x2a4>)
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	4413      	add	r3, r2
 80087a0:	2200      	movs	r2, #0
 80087a2:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	2b07      	cmp	r3, #7
 80087a8:	dd03      	ble.n	80087b2 <takeWifiSSID+0x242>
        			writeLoc--;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	3b01      	subs	r3, #1
 80087ae:	613b      	str	r3, [r7, #16]
 80087b0:	e004      	b.n	80087bc <takeWifiSSID+0x24c>
        		} else if(writeLoc < 7) {
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	2b06      	cmp	r3, #6
 80087b6:	dc01      	bgt.n	80087bc <takeWifiSSID+0x24c>
        			writeLoc = 7;
 80087b8:	2307      	movs	r3, #7
 80087ba:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	dd06      	ble.n	80087d0 <takeWifiSSID+0x260>
        			arrayPosition--;
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	3b01      	subs	r3, #1
 80087c6:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	3b01      	subs	r3, #1
 80087cc:	607b      	str	r3, [r7, #4]
 80087ce:	e007      	b.n	80087e0 <takeWifiSSID+0x270>
        		} else if(arrayPosition < 0) {
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	da04      	bge.n	80087e0 <takeWifiSSID+0x270>
        			arrayPosition = 0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 80087da:	4b0f      	ldr	r3, [pc, #60]	@ (8008818 <takeWifiSSID+0x2a8>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	3307      	adds	r3, #7
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	4619      	mov	r1, r3
 80087ea:	2001      	movs	r0, #1
 80087ec:	f000 fd3e 	bl	800926c <lcd_delete_char>
        		HAL_Delay(50);
 80087f0:	2032      	movs	r0, #50	@ 0x32
 80087f2:	f001 fa7d 	bl	8009cf0 <HAL_Delay>
        	}

        	HAL_Delay(150);
 80087f6:	2096      	movs	r0, #150	@ 0x96
 80087f8:	f001 fa7a 	bl	8009cf0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	4619      	mov	r1, r3
 8008802:	2002      	movs	r0, #2
 8008804:	f000 fcdd 	bl	80091c2 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008808:	e6cc      	b.n	80085a4 <takeWifiSSID+0x34>
        		break;
 800880a:	bf00      	nop
    }
}
 800880c:	bf00      	nop
 800880e:	3718      	adds	r7, #24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	20001070 	.word	0x20001070
 8008818:	20000004 	.word	0x20000004
 800881c:	40010800 	.word	0x40010800
 8008820:	40011000 	.word	0x40011000
 8008824:	20000fec 	.word	0x20000fec
 8008828:	20000018 	.word	0x20000018

0800882c <passConfirmation>:

uint8_t passConfirmation() {
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
	int loopVal = 1;
 8008832:	2301      	movs	r3, #1
 8008834:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8008836:	4a1e      	ldr	r2, [pc, #120]	@ (80088b0 <passConfirmation+0x84>)
 8008838:	2101      	movs	r1, #1
 800883a:	2001      	movs	r0, #1
 800883c:	f000 fce0 	bl	8009200 <lcd_print>

	while(loopVal == 1) {
 8008840:	e012      	b.n	8008868 <passConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 8008842:	4a1c      	ldr	r2, [pc, #112]	@ (80088b4 <passConfirmation+0x88>)
 8008844:	2101      	movs	r1, #1
 8008846:	2002      	movs	r0, #2
 8008848:	f000 fcda 	bl	8009200 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800884c:	2102      	movs	r1, #2
 800884e:	481a      	ldr	r0, [pc, #104]	@ (80088b8 <passConfirmation+0x8c>)
 8008850:	f002 f82a 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8008854:	4603      	mov	r3, r0
 8008856:	2b01      	cmp	r3, #1
 8008858:	d101      	bne.n	800885e <passConfirmation+0x32>
			loopVal = 0;
 800885a:	2300      	movs	r3, #0
 800885c:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiPass);
 800885e:	4a17      	ldr	r2, [pc, #92]	@ (80088bc <passConfirmation+0x90>)
 8008860:	2101      	movs	r1, #1
 8008862:	2001      	movs	r0, #1
 8008864:	f000 fccc 	bl	8009200 <lcd_print>
	while(loopVal == 1) {
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d0e9      	beq.n	8008842 <passConfirmation+0x16>
	}

    lcd_cursor(0);
 800886e:	2000      	movs	r0, #0
 8008870:	f000 fd24 	bl	80092bc <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 8008874:	4811      	ldr	r0, [pc, #68]	@ (80088bc <passConfirmation+0x90>)
 8008876:	f7f7 fcd5 	bl	8000224 <strlen>
 800887a:	4603      	mov	r3, r0
 800887c:	2b14      	cmp	r3, #20
 800887e:	d90f      	bls.n	80088a0 <passConfirmation+0x74>
    	lcd_print(1, 1, passExceedErrorText);
 8008880:	4a0f      	ldr	r2, [pc, #60]	@ (80088c0 <passConfirmation+0x94>)
 8008882:	2101      	movs	r1, #1
 8008884:	2001      	movs	r0, #1
 8008886:	f000 fcbb 	bl	8009200 <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 800888a:	4a0e      	ldr	r2, [pc, #56]	@ (80088c4 <passConfirmation+0x98>)
 800888c:	2101      	movs	r1, #1
 800888e:	2002      	movs	r0, #2
 8008890:	f000 fcb6 	bl	8009200 <lcd_print>
        HAL_Delay(1250);
 8008894:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8008898:	f001 fa2a 	bl	8009cf0 <HAL_Delay>

        return 0;
 800889c:	2300      	movs	r3, #0
 800889e:	e003      	b.n	80088a8 <passConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 80088a0:	2001      	movs	r0, #1
 80088a2:	f7f7 feff 	bl	80006a4 <saveEEPROM>

    	return 1;
 80088a6:	2301      	movs	r3, #1
    }
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3708      	adds	r7, #8
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}
 80088b0:	0800f7b0 	.word	0x0800f7b0
 80088b4:	20001e08 	.word	0x20001e08
 80088b8:	40010800 	.word	0x40010800
 80088bc:	20001080 	.word	0x20001080
 80088c0:	20001d40 	.word	0x20001d40
 80088c4:	20001d54 	.word	0x20001d54

080088c8 <takeWifiPass>:

void takeWifiPass() {
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 80088ce:	2001      	movs	r0, #1
 80088d0:	f000 fcf4 	bl	80092bc <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 80088d4:	2210      	movs	r2, #16
 80088d6:	2100      	movs	r1, #0
 80088d8:	48a4      	ldr	r0, [pc, #656]	@ (8008b6c <takeWifiPass+0x2a4>)
 80088da:	f005 fcd0 	bl	800e27e <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80088de:	2301      	movs	r3, #1
 80088e0:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80088e2:	2307      	movs	r3, #7
 80088e4:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80088e6:	2301      	movs	r3, #1
 80088e8:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80088ea:	2300      	movs	r3, #0
 80088ec:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80088ee:	4ba0      	ldr	r3, [pc, #640]	@ (8008b70 <takeWifiPass+0x2a8>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 80088f4:	2101      	movs	r1, #1
 80088f6:	2003      	movs	r0, #3
 80088f8:	f7f8 fbe0 	bl	80010bc <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80088fc:	2108      	movs	r1, #8
 80088fe:	489d      	ldr	r0, [pc, #628]	@ (8008b74 <takeWifiPass+0x2ac>)
 8008900:	f001 ffd2 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8008904:	4603      	mov	r3, r0
 8008906:	2b01      	cmp	r3, #1
 8008908:	d106      	bne.n	8008918 <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 800890a:	f7ff ff8f 	bl	800882c <passConfirmation>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	f040 8126 	bne.w	8008b62 <takeWifiPass+0x29a>
    	        goto mainPassSection;
 8008916:	e7da      	b.n	80088ce <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008918:	2101      	movs	r1, #1
 800891a:	4896      	ldr	r0, [pc, #600]	@ (8008b74 <takeWifiPass+0x2ac>)
 800891c:	f001 ffc4 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8008920:	4603      	mov	r3, r0
 8008922:	2b01      	cmp	r3, #1
 8008924:	d14d      	bne.n	80089c2 <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2b50      	cmp	r3, #80	@ 0x50
 800892a:	dd01      	ble.n	8008930 <takeWifiPass+0x68>
        		cursorPosition = 1;
 800892c:	2301      	movs	r3, #1
 800892e:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	2b10      	cmp	r3, #16
 8008934:	d13f      	bne.n	80089b6 <takeWifiPass+0xee>
            	if(page == 1) {
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d109      	bne.n	8008950 <takeWifiPass+0x88>
            		cursorPosition = 1;
 800893c:	2301      	movs	r3, #1
 800893e:	60fb      	str	r3, [r7, #12]
            		page++;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	3301      	adds	r3, #1
 8008944:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8008946:	2102      	movs	r1, #2
 8008948:	2003      	movs	r0, #3
 800894a:	f7f8 fbb7 	bl	80010bc <printTemplate>
 800894e:	e035      	b.n	80089bc <takeWifiPass+0xf4>
            	} else if(page == 2) {
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	2b02      	cmp	r3, #2
 8008954:	d109      	bne.n	800896a <takeWifiPass+0xa2>
            		cursorPosition = 1;
 8008956:	2301      	movs	r3, #1
 8008958:	60fb      	str	r3, [r7, #12]
            		page++;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	3301      	adds	r3, #1
 800895e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8008960:	2103      	movs	r1, #3
 8008962:	2003      	movs	r0, #3
 8008964:	f7f8 fbaa 	bl	80010bc <printTemplate>
 8008968:	e028      	b.n	80089bc <takeWifiPass+0xf4>
            	} else if(page == 3) {
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	2b03      	cmp	r3, #3
 800896e:	d109      	bne.n	8008984 <takeWifiPass+0xbc>
            		cursorPosition = 1;
 8008970:	2301      	movs	r3, #1
 8008972:	60fb      	str	r3, [r7, #12]
            		page++;
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	3301      	adds	r3, #1
 8008978:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 800897a:	2104      	movs	r1, #4
 800897c:	2003      	movs	r0, #3
 800897e:	f7f8 fb9d 	bl	80010bc <printTemplate>
 8008982:	e01b      	b.n	80089bc <takeWifiPass+0xf4>
            	} else if(page == 4) {
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	2b04      	cmp	r3, #4
 8008988:	d109      	bne.n	800899e <takeWifiPass+0xd6>
            		cursorPosition = 1;
 800898a:	2301      	movs	r3, #1
 800898c:	60fb      	str	r3, [r7, #12]
            		page++;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	3301      	adds	r3, #1
 8008992:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8008994:	2105      	movs	r1, #5
 8008996:	2003      	movs	r0, #3
 8008998:	f7f8 fb90 	bl	80010bc <printTemplate>
 800899c:	e00e      	b.n	80089bc <takeWifiPass+0xf4>
            	} else if(page == 5) {
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	2b05      	cmp	r3, #5
 80089a2:	d10b      	bne.n	80089bc <takeWifiPass+0xf4>
            		cursorPosition = 1;
 80089a4:	2301      	movs	r3, #1
 80089a6:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80089a8:	2301      	movs	r3, #1
 80089aa:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80089ac:	2101      	movs	r1, #1
 80089ae:	2003      	movs	r0, #3
 80089b0:	f7f8 fb84 	bl	80010bc <printTemplate>
 80089b4:	e002      	b.n	80089bc <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	3301      	adds	r3, #1
 80089ba:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80089bc:	2096      	movs	r0, #150	@ 0x96
 80089be:	f001 f997 	bl	8009cf0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80089c2:	2108      	movs	r1, #8
 80089c4:	486c      	ldr	r0, [pc, #432]	@ (8008b78 <takeWifiPass+0x2b0>)
 80089c6:	f001 ff6f 	bl	800a8a8 <HAL_GPIO_ReadPin>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d149      	bne.n	8008a64 <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	dc01      	bgt.n	80089da <takeWifiPass+0x112>
        		cursorPosition = 80;
 80089d6:	2350      	movs	r3, #80	@ 0x50
 80089d8:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d13b      	bne.n	8008a58 <takeWifiPass+0x190>
            	if(page == 1) {
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	d108      	bne.n	80089f8 <takeWifiPass+0x130>
            		cursorPosition = 16;
 80089e6:	2310      	movs	r3, #16
 80089e8:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80089ea:	2305      	movs	r3, #5
 80089ec:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80089ee:	2105      	movs	r1, #5
 80089f0:	2003      	movs	r0, #3
 80089f2:	f7f8 fb63 	bl	80010bc <printTemplate>
 80089f6:	e032      	b.n	8008a5e <takeWifiPass+0x196>
            	} else if(page == 2) {
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	2b02      	cmp	r3, #2
 80089fc:	d108      	bne.n	8008a10 <takeWifiPass+0x148>
            		cursorPosition = 16;
 80089fe:	2310      	movs	r3, #16
 8008a00:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008a02:	2301      	movs	r3, #1
 8008a04:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8008a06:	2101      	movs	r1, #1
 8008a08:	2003      	movs	r0, #3
 8008a0a:	f7f8 fb57 	bl	80010bc <printTemplate>
 8008a0e:	e026      	b.n	8008a5e <takeWifiPass+0x196>
            	} else if(page == 3) {
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	2b03      	cmp	r3, #3
 8008a14:	d108      	bne.n	8008a28 <takeWifiPass+0x160>
            		cursorPosition = 16;
 8008a16:	2310      	movs	r3, #16
 8008a18:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8008a1a:	2302      	movs	r3, #2
 8008a1c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8008a1e:	2102      	movs	r1, #2
 8008a20:	2003      	movs	r0, #3
 8008a22:	f7f8 fb4b 	bl	80010bc <printTemplate>
 8008a26:	e01a      	b.n	8008a5e <takeWifiPass+0x196>
            	} else if(page == 4) {
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	2b04      	cmp	r3, #4
 8008a2c:	d108      	bne.n	8008a40 <takeWifiPass+0x178>
            		cursorPosition = 16;
 8008a2e:	2310      	movs	r3, #16
 8008a30:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8008a32:	2303      	movs	r3, #3
 8008a34:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8008a36:	2103      	movs	r1, #3
 8008a38:	2003      	movs	r0, #3
 8008a3a:	f7f8 fb3f 	bl	80010bc <printTemplate>
 8008a3e:	e00e      	b.n	8008a5e <takeWifiPass+0x196>
            	} else if(page == 5) {
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	2b05      	cmp	r3, #5
 8008a44:	d10b      	bne.n	8008a5e <takeWifiPass+0x196>
            		cursorPosition = 16;
 8008a46:	2310      	movs	r3, #16
 8008a48:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8008a4a:	2304      	movs	r3, #4
 8008a4c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8008a4e:	2104      	movs	r1, #4
 8008a50:	2003      	movs	r0, #3
 8008a52:	f7f8 fb33 	bl	80010bc <printTemplate>
 8008a56:	e002      	b.n	8008a5e <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	3b01      	subs	r3, #1
 8008a5c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008a5e:	2096      	movs	r0, #150	@ 0x96
 8008a60:	f001 f946 	bl	8009cf0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008a64:	2102      	movs	r1, #2
 8008a66:	4843      	ldr	r0, [pc, #268]	@ (8008b74 <takeWifiPass+0x2ac>)
 8008a68:	f001 ff1e 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d12f      	bne.n	8008ad2 <takeWifiPass+0x20a>
            eepromData[eepromVal] = cursorPosition;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	b2d9      	uxtb	r1, r3
 8008a76:	4a41      	ldr	r2, [pc, #260]	@ (8008b7c <takeWifiPass+0x2b4>)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	460a      	mov	r2, r1
 8008a7e:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 8008a80:	4a3f      	ldr	r2, [pc, #252]	@ (8008b80 <takeWifiPass+0x2b8>)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	4413      	add	r3, r2
 8008a86:	7819      	ldrb	r1, [r3, #0]
 8008a88:	4a38      	ldr	r2, [pc, #224]	@ (8008b6c <takeWifiPass+0x2a4>)
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	4413      	add	r3, r2
 8008a8e:	460a      	mov	r2, r1
 8008a90:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	b2d9      	uxtb	r1, r3
 8008a96:	4a3a      	ldr	r2, [pc, #232]	@ (8008b80 <takeWifiPass+0x2b8>)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	2001      	movs	r0, #1
 8008aa2:	f000 fbc2 	bl	800922a <lcd_print_char>

            writeLoc++;
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	3301      	adds	r3, #1
 8008ab0:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	3301      	adds	r3, #1
 8008ab6:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8008ab8:	4a30      	ldr	r2, [pc, #192]	@ (8008b7c <takeWifiPass+0x2b4>)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4413      	add	r3, r2
 8008abe:	2200      	movs	r2, #0
 8008ac0:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 8008ac2:	4a2a      	ldr	r2, [pc, #168]	@ (8008b6c <takeWifiPass+0x2a4>)
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	4413      	add	r3, r2
 8008ac8:	2200      	movs	r2, #0
 8008aca:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8008acc:	2096      	movs	r0, #150	@ 0x96
 8008ace:	f001 f90f 	bl	8009cf0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008ad2:	2104      	movs	r1, #4
 8008ad4:	4827      	ldr	r0, [pc, #156]	@ (8008b74 <takeWifiPass+0x2ac>)
 8008ad6:	f001 fee7 	bl	800a8a8 <HAL_GPIO_ReadPin>
 8008ada:	4603      	mov	r3, r0
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d139      	bne.n	8008b54 <takeWifiPass+0x28c>
        	if(strlen(wifiPass) >= 1) {
 8008ae0:	4b22      	ldr	r3, [pc, #136]	@ (8008b6c <takeWifiPass+0x2a4>)
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d032      	beq.n	8008b4e <takeWifiPass+0x286>
        		eepromData[eepromVal] = '\0';
 8008ae8:	4a24      	ldr	r2, [pc, #144]	@ (8008b7c <takeWifiPass+0x2b4>)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4413      	add	r3, r2
 8008aee:	2200      	movs	r2, #0
 8008af0:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 8008af2:	4a1e      	ldr	r2, [pc, #120]	@ (8008b6c <takeWifiPass+0x2a4>)
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	4413      	add	r3, r2
 8008af8:	2200      	movs	r2, #0
 8008afa:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	2b07      	cmp	r3, #7
 8008b00:	dd03      	ble.n	8008b0a <takeWifiPass+0x242>
        			writeLoc--;
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	3b01      	subs	r3, #1
 8008b06:	613b      	str	r3, [r7, #16]
 8008b08:	e004      	b.n	8008b14 <takeWifiPass+0x24c>
        		} else if(writeLoc < 7) {
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	2b06      	cmp	r3, #6
 8008b0e:	dc01      	bgt.n	8008b14 <takeWifiPass+0x24c>
        			writeLoc = 7;
 8008b10:	2307      	movs	r3, #7
 8008b12:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	dd06      	ble.n	8008b28 <takeWifiPass+0x260>
        			arrayPosition--;
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3b01      	subs	r3, #1
 8008b24:	607b      	str	r3, [r7, #4]
 8008b26:	e007      	b.n	8008b38 <takeWifiPass+0x270>
        		} else if(arrayPosition < 0) {
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	da04      	bge.n	8008b38 <takeWifiPass+0x270>
        			arrayPosition = 0;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 8008b32:	4b0f      	ldr	r3, [pc, #60]	@ (8008b70 <takeWifiPass+0x2a8>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	3307      	adds	r3, #7
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	4619      	mov	r1, r3
 8008b42:	2001      	movs	r0, #1
 8008b44:	f000 fb92 	bl	800926c <lcd_delete_char>
        		HAL_Delay(50);
 8008b48:	2032      	movs	r0, #50	@ 0x32
 8008b4a:	f001 f8d1 	bl	8009cf0 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8008b4e:	2096      	movs	r0, #150	@ 0x96
 8008b50:	f001 f8ce 	bl	8009cf0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	4619      	mov	r1, r3
 8008b5a:	2002      	movs	r0, #2
 8008b5c:	f000 fb31 	bl	80091c2 <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008b60:	e6cc      	b.n	80088fc <takeWifiPass+0x34>
    	        break;
 8008b62:	bf00      	nop
    }
}
 8008b64:	bf00      	nop
 8008b66:	3718      	adds	r7, #24
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	20001080 	.word	0x20001080
 8008b70:	20000008 	.word	0x20000008
 8008b74:	40010800 	.word	0x40010800
 8008b78:	40011000 	.word	0x40011000
 8008b7c:	20000fec 	.word	0x20000fec
 8008b80:	20000018 	.word	0x20000018

08008b84 <mergeData>:

char* mergeData() {
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b09c      	sub	sp, #112	@ 0x70
 8008b88:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b8e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8008b92:	2229      	movs	r2, #41	@ 0x29
 8008b94:	2100      	movs	r1, #0
 8008b96:	4618      	mov	r0, r3
 8008b98:	f005 fb71 	bl	800e27e <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8008b9c:	4b5f      	ldr	r3, [pc, #380]	@ (8008d1c <mergeData+0x198>)
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	703b      	strb	r3, [r7, #0]
 8008ba2:	4b5f      	ldr	r3, [pc, #380]	@ (8008d20 <mergeData+0x19c>)
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	707b      	strb	r3, [r7, #1]
 8008ba8:	4b5e      	ldr	r3, [pc, #376]	@ (8008d24 <mergeData+0x1a0>)
 8008baa:	781b      	ldrb	r3, [r3, #0]
 8008bac:	70bb      	strb	r3, [r7, #2]
 8008bae:	4b5e      	ldr	r3, [pc, #376]	@ (8008d28 <mergeData+0x1a4>)
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	70fb      	strb	r3, [r7, #3]
 8008bb4:	4b5d      	ldr	r3, [pc, #372]	@ (8008d2c <mergeData+0x1a8>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	713b      	strb	r3, [r7, #4]
 8008bba:	4b5d      	ldr	r3, [pc, #372]	@ (8008d30 <mergeData+0x1ac>)
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	717b      	strb	r3, [r7, #5]
 8008bc0:	4b5c      	ldr	r3, [pc, #368]	@ (8008d34 <mergeData+0x1b0>)
 8008bc2:	781b      	ldrb	r3, [r3, #0]
 8008bc4:	71bb      	strb	r3, [r7, #6]
 8008bc6:	4b5c      	ldr	r3, [pc, #368]	@ (8008d38 <mergeData+0x1b4>)
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	71fb      	strb	r3, [r7, #7]
 8008bcc:	4b5b      	ldr	r3, [pc, #364]	@ (8008d3c <mergeData+0x1b8>)
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	723b      	strb	r3, [r7, #8]
 8008bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8008d40 <mergeData+0x1bc>)
 8008bd4:	781b      	ldrb	r3, [r3, #0]
 8008bd6:	727b      	strb	r3, [r7, #9]
 8008bd8:	4b5a      	ldr	r3, [pc, #360]	@ (8008d44 <mergeData+0x1c0>)
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	72bb      	strb	r3, [r7, #10]
 8008bde:	4b5a      	ldr	r3, [pc, #360]	@ (8008d48 <mergeData+0x1c4>)
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	72fb      	strb	r3, [r7, #11]
 8008be4:	4b59      	ldr	r3, [pc, #356]	@ (8008d4c <mergeData+0x1c8>)
 8008be6:	781b      	ldrb	r3, [r3, #0]
 8008be8:	733b      	strb	r3, [r7, #12]
 8008bea:	4b59      	ldr	r3, [pc, #356]	@ (8008d50 <mergeData+0x1cc>)
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	737b      	strb	r3, [r7, #13]
 8008bf0:	4b58      	ldr	r3, [pc, #352]	@ (8008d54 <mergeData+0x1d0>)
 8008bf2:	781b      	ldrb	r3, [r3, #0]
 8008bf4:	73bb      	strb	r3, [r7, #14]
 8008bf6:	4b58      	ldr	r3, [pc, #352]	@ (8008d58 <mergeData+0x1d4>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	73fb      	strb	r3, [r7, #15]
 8008bfc:	4b57      	ldr	r3, [pc, #348]	@ (8008d5c <mergeData+0x1d8>)
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	743b      	strb	r3, [r7, #16]
 8008c02:	4b57      	ldr	r3, [pc, #348]	@ (8008d60 <mergeData+0x1dc>)
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	747b      	strb	r3, [r7, #17]
 8008c08:	4b56      	ldr	r3, [pc, #344]	@ (8008d64 <mergeData+0x1e0>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	74bb      	strb	r3, [r7, #18]
 8008c0e:	4b56      	ldr	r3, [pc, #344]	@ (8008d68 <mergeData+0x1e4>)
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	74fb      	strb	r3, [r7, #19]
 8008c14:	4b55      	ldr	r3, [pc, #340]	@ (8008d6c <mergeData+0x1e8>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	753b      	strb	r3, [r7, #20]
 8008c1a:	4b55      	ldr	r3, [pc, #340]	@ (8008d70 <mergeData+0x1ec>)
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	757b      	strb	r3, [r7, #21]
 8008c20:	4b54      	ldr	r3, [pc, #336]	@ (8008d74 <mergeData+0x1f0>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	75bb      	strb	r3, [r7, #22]
 8008c26:	4b54      	ldr	r3, [pc, #336]	@ (8008d78 <mergeData+0x1f4>)
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	75fb      	strb	r3, [r7, #23]
 8008c2c:	4b53      	ldr	r3, [pc, #332]	@ (8008d7c <mergeData+0x1f8>)
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	763b      	strb	r3, [r7, #24]
 8008c32:	4b53      	ldr	r3, [pc, #332]	@ (8008d80 <mergeData+0x1fc>)
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	767b      	strb	r3, [r7, #25]
 8008c38:	4b52      	ldr	r3, [pc, #328]	@ (8008d84 <mergeData+0x200>)
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	76bb      	strb	r3, [r7, #26]
 8008c3e:	4b52      	ldr	r3, [pc, #328]	@ (8008d88 <mergeData+0x204>)
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	76fb      	strb	r3, [r7, #27]
 8008c44:	4b51      	ldr	r3, [pc, #324]	@ (8008d8c <mergeData+0x208>)
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	773b      	strb	r3, [r7, #28]
 8008c4a:	4b51      	ldr	r3, [pc, #324]	@ (8008d90 <mergeData+0x20c>)
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	777b      	strb	r3, [r7, #29]
			buzzer,
			demoMode,
			calismaSayisi,
			calismaSayisiDemo,
			dilSecim,
			eepromData[38],
 8008c50:	4b50      	ldr	r3, [pc, #320]	@ (8008d94 <mergeData+0x210>)
 8008c52:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	uint8_t uintVariables[] = {
 8008c56:	77bb      	strb	r3, [r7, #30]
			eepromData[39],
 8008c58:	4b4e      	ldr	r3, [pc, #312]	@ (8008d94 <mergeData+0x210>)
 8008c5a:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	uint8_t uintVariables[] = {
 8008c5e:	77fb      	strb	r3, [r7, #31]
			eepromData[40],
 8008c60:	4b4c      	ldr	r3, [pc, #304]	@ (8008d94 <mergeData+0x210>)
 8008c62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	uint8_t uintVariables[] = {
 8008c66:	f887 3020 	strb.w	r3, [r7, #32]
			eepromData[41],
 8008c6a:	4b4a      	ldr	r3, [pc, #296]	@ (8008d94 <mergeData+0x210>)
 8008c6c:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	uint8_t uintVariables[] = {
 8008c70:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[42],
 8008c74:	4b47      	ldr	r3, [pc, #284]	@ (8008d94 <mergeData+0x210>)
 8008c76:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	uint8_t uintVariables[] = {
 8008c7a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[43],
 8008c7e:	4b45      	ldr	r3, [pc, #276]	@ (8008d94 <mergeData+0x210>)
 8008c80:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	uint8_t uintVariables[] = {
 8008c84:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[44],
 8008c88:	4b42      	ldr	r3, [pc, #264]	@ (8008d94 <mergeData+0x210>)
 8008c8a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	uint8_t uintVariables[] = {
 8008c8e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[45],
 8008c92:	4b40      	ldr	r3, [pc, #256]	@ (8008d94 <mergeData+0x210>)
 8008c94:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	uint8_t uintVariables[] = {
 8008c98:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[46],
 8008c9c:	4b3d      	ldr	r3, [pc, #244]	@ (8008d94 <mergeData+0x210>)
 8008c9e:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	uint8_t uintVariables[] = {
 8008ca2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[47],
 8008ca6:	4b3b      	ldr	r3, [pc, #236]	@ (8008d94 <mergeData+0x210>)
 8008ca8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	uint8_t uintVariables[] = {
 8008cac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008cb0:	233c      	movs	r3, #60	@ 0x3c
 8008cb2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008cba:	e015      	b.n	8008ce8 <mergeData+0x164>
	    sprintf(temp, "%u", uintVariables[i]);
 8008cbc:	463a      	mov	r2, r7
 8008cbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cc0:	4413      	add	r3, r2
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008cca:	4933      	ldr	r1, [pc, #204]	@ (8008d98 <mergeData+0x214>)
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f005 fa4f 	bl	800e170 <siprintf>
	    strcat(combinedString, temp);
 8008cd2:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008cd6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008cda:	4611      	mov	r1, r2
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f005 faa9 	bl	800e234 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008ce2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ce8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cea:	2b28      	cmp	r3, #40	@ 0x28
 8008cec:	d9e6      	bls.n	8008cbc <mergeData+0x138>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8008cee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7f7 fa96 	bl	8000224 <strlen>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f005 f94d 	bl	800df9c <malloc>
 8008d02:	4603      	mov	r3, r0
 8008d04:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 8008d06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8008d0e:	f005 fb09 	bl	800e324 <strcpy>
	return result;
 8008d12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3770      	adds	r7, #112	@ 0x70
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}
 8008d1c:	200016cf 	.word	0x200016cf
 8008d20:	200016c1 	.word	0x200016c1
 8008d24:	200016c4 	.word	0x200016c4
 8008d28:	200016c5 	.word	0x200016c5
 8008d2c:	200016c6 	.word	0x200016c6
 8008d30:	200016cd 	.word	0x200016cd
 8008d34:	200016c7 	.word	0x200016c7
 8008d38:	200016c8 	.word	0x200016c8
 8008d3c:	200016cc 	.word	0x200016cc
 8008d40:	200016c9 	.word	0x200016c9
 8008d44:	200016d9 	.word	0x200016d9
 8008d48:	200016ca 	.word	0x200016ca
 8008d4c:	200016da 	.word	0x200016da
 8008d50:	200016cb 	.word	0x200016cb
 8008d54:	200016db 	.word	0x200016db
 8008d58:	200016ce 	.word	0x200016ce
 8008d5c:	200016d0 	.word	0x200016d0
 8008d60:	200016d1 	.word	0x200016d1
 8008d64:	200016d2 	.word	0x200016d2
 8008d68:	200016d3 	.word	0x200016d3
 8008d6c:	200016d4 	.word	0x200016d4
 8008d70:	200016d5 	.word	0x200016d5
 8008d74:	200016d6 	.word	0x200016d6
 8008d78:	200016d7 	.word	0x200016d7
 8008d7c:	200016d8 	.word	0x200016d8
 8008d80:	200016dc 	.word	0x200016dc
 8008d84:	200016de 	.word	0x200016de
 8008d88:	200016b8 	.word	0x200016b8
 8008d8c:	200016b9 	.word	0x200016b9
 8008d90:	200016e0 	.word	0x200016e0
 8008d94:	20000fec 	.word	0x20000fec
 8008d98:	0800f7c4 	.word	0x0800f7c4

08008d9c <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af02      	add	r7, sp, #8
	lcd_print(1, 1, dataSynchText);
 8008da2:	4a13      	ldr	r2, [pc, #76]	@ (8008df0 <convertAndSendData+0x54>)
 8008da4:	2101      	movs	r1, #1
 8008da6:	2001      	movs	r0, #1
 8008da8:	f000 fa2a 	bl	8009200 <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 8008dac:	4a11      	ldr	r2, [pc, #68]	@ (8008df4 <convertAndSendData+0x58>)
 8008dae:	2101      	movs	r1, #1
 8008db0:	2002      	movs	r0, #2
 8008db2:	f000 fa25 	bl	8009200 <lcd_print>

	for(int i=0; i<2; i++) {
 8008db6:	2300      	movs	r3, #0
 8008db8:	607b      	str	r3, [r7, #4]
 8008dba:	e00c      	b.n	8008dd6 <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8008dbc:	f7ff fee2 	bl	8008b84 <mergeData>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	9300      	str	r3, [sp, #0]
 8008dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8008df8 <convertAndSendData+0x5c>)
 8008dc6:	4a0d      	ldr	r2, [pc, #52]	@ (8008dfc <convertAndSendData+0x60>)
 8008dc8:	490d      	ldr	r1, [pc, #52]	@ (8008e00 <convertAndSendData+0x64>)
 8008dca:	480e      	ldr	r0, [pc, #56]	@ (8008e04 <convertAndSendData+0x68>)
 8008dcc:	f7ff f838 	bl	8007e40 <sendMachineData>
	for(int i=0; i<2; i++) {
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	607b      	str	r3, [r7, #4]
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	ddef      	ble.n	8008dbc <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 8008ddc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008de0:	f000 ff86 	bl	8009cf0 <HAL_Delay>
	lcd_clear();
 8008de4:	f000 fa38 	bl	8009258 <lcd_clear>
}
 8008de8:	bf00      	nop
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	20001ca0 	.word	0x20001ca0
 8008df4:	20001cb4 	.word	0x20001cb4
 8008df8:	20001080 	.word	0x20001080
 8008dfc:	20001070 	.word	0x20001070
 8008e00:	20001064 	.word	0x20001064
 8008e04:	20001ee0 	.word	0x20001ee0

08008e08 <iotSetup>:

void iotSetup() {
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8008e0c:	4b13      	ldr	r3, [pc, #76]	@ (8008e5c <iotSetup+0x54>)
 8008e0e:	781b      	ldrb	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d021      	beq.n	8008e58 <iotSetup+0x50>
		if(checkEEPROM4ID() != 1) {
 8008e14:	f000 f82e 	bl	8008e74 <checkEEPROM4ID>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d001      	beq.n	8008e22 <iotSetup+0x1a>
			takeMachineID();
 8008e1e:	f7ff f9d1 	bl	80081c4 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8008e22:	480f      	ldr	r0, [pc, #60]	@ (8008e60 <iotSetup+0x58>)
 8008e24:	f7f7 f9fe 	bl	8000224 <strlen>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d801      	bhi.n	8008e32 <iotSetup+0x2a>
			takeWifiSSID();
 8008e2e:	f7ff fb9f 	bl	8008570 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8008e32:	480c      	ldr	r0, [pc, #48]	@ (8008e64 <iotSetup+0x5c>)
 8008e34:	f7f7 f9f6 	bl	8000224 <strlen>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d801      	bhi.n	8008e42 <iotSetup+0x3a>
			takeWifiPass();
 8008e3e:	f7ff fd43 	bl	80088c8 <takeWifiPass>
		}

		ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 8008e42:	4a09      	ldr	r2, [pc, #36]	@ (8008e68 <iotSetup+0x60>)
 8008e44:	4909      	ldr	r1, [pc, #36]	@ (8008e6c <iotSetup+0x64>)
 8008e46:	480a      	ldr	r0, [pc, #40]	@ (8008e70 <iotSetup+0x68>)
 8008e48:	f7fe ffdb 	bl	8007e02 <ESP8266_Init>
		HAL_Delay(500);
 8008e4c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008e50:	f000 ff4e 	bl	8009cf0 <HAL_Delay>
		convertAndSendData();
 8008e54:	f7ff ffa2 	bl	8008d9c <convertAndSendData>
	}
}
 8008e58:	bf00      	nop
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	200016eb 	.word	0x200016eb
 8008e60:	20001070 	.word	0x20001070
 8008e64:	20001080 	.word	0x20001080
 8008e68:	0800f7c8 	.word	0x0800f7c8
 8008e6c:	0800f7e0 	.word	0x0800f7e0
 8008e70:	20001ee0 	.word	0x20001ee0

08008e74 <checkEEPROM4ID>:

int checkEEPROM4ID() {
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8008e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8008eb8 <checkEEPROM4ID+0x44>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8008e80:	2301      	movs	r3, #1
 8008e82:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008e84:	2300      	movs	r3, #0
 8008e86:	607b      	str	r3, [r7, #4]
 8008e88:	e00d      	b.n	8008ea6 <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8008e8a:	4a0c      	ldr	r2, [pc, #48]	@ (8008ebc <checkEEPROM4ID+0x48>)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	4413      	add	r3, r2
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d101      	bne.n	8008e9a <checkEEPROM4ID+0x26>
			returnVal = 0;
 8008e96:	2300      	movs	r3, #0
 8008e98:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	607b      	str	r3, [r7, #4]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2b0b      	cmp	r3, #11
 8008eaa:	ddee      	ble.n	8008e8a <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8008eac:	68bb      	ldr	r3, [r7, #8]
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3714      	adds	r7, #20
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bc80      	pop	{r7}
 8008eb6:	4770      	bx	lr
 8008eb8:	20000000 	.word	0x20000000
 8008ebc:	20000fec 	.word	0x20000fec

08008ec0 <az5>:

int az5() {
 8008ec0:	b480      	push	{r7}
 8008ec2:	af00      	add	r7, sp, #0
	//Özel şifre iste
	return 0;
 8008ec4:	2300      	movs	r3, #0
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bc80      	pop	{r7}
 8008ecc:	4770      	bx	lr
	...

08008ed0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b086      	sub	sp, #24
 8008ed4:	af02      	add	r7, sp, #8
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8008eda:	79fb      	ldrb	r3, [r7, #7]
 8008edc:	f023 030f 	bic.w	r3, r3, #15
 8008ee0:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8008ee2:	79fb      	ldrb	r3, [r7, #7]
 8008ee4:	011b      	lsls	r3, r3, #4
 8008ee6:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8008ee8:	7b7b      	ldrb	r3, [r7, #13]
 8008eea:	f043 030c 	orr.w	r3, r3, #12
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8008ef2:	7b7b      	ldrb	r3, [r7, #13]
 8008ef4:	f043 0308 	orr.w	r3, r3, #8
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8008efc:	7b3b      	ldrb	r3, [r7, #12]
 8008efe:	f043 030c 	orr.w	r3, r3, #12
 8008f02:	b2db      	uxtb	r3, r3
 8008f04:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8008f06:	7b3b      	ldrb	r3, [r7, #12]
 8008f08:	f043 0308 	orr.w	r3, r3, #8
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008f10:	bf00      	nop
 8008f12:	4825      	ldr	r0, [pc, #148]	@ (8008fa8 <lcd_send_cmd+0xd8>)
 8008f14:	f002 faf1 	bl	800b4fa <HAL_I2C_GetError>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b04      	cmp	r3, #4
 8008f1c:	d0f9      	beq.n	8008f12 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008f1e:	bf00      	nop
 8008f20:	4821      	ldr	r0, [pc, #132]	@ (8008fa8 <lcd_send_cmd+0xd8>)
 8008f22:	f002 fadd 	bl	800b4e0 <HAL_I2C_GetState>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b20      	cmp	r3, #32
 8008f2a:	d1f9      	bne.n	8008f20 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8008fac <lcd_send_cmd+0xdc>)
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d116      	bne.n	8008f62 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008f34:	2300      	movs	r3, #0
 8008f36:	73fb      	strb	r3, [r7, #15]
 8008f38:	e00f      	b.n	8008f5a <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008f3a:	7bfb      	ldrb	r3, [r7, #15]
 8008f3c:	3310      	adds	r3, #16
 8008f3e:	443b      	add	r3, r7
 8008f40:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008f44:	7bfb      	ldrb	r3, [r7, #15]
 8008f46:	f022 0208 	bic.w	r2, r2, #8
 8008f4a:	b2d2      	uxtb	r2, r2
 8008f4c:	3310      	adds	r3, #16
 8008f4e:	443b      	add	r3, r7
 8008f50:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
 8008f56:	3301      	adds	r3, #1
 8008f58:	73fb      	strb	r3, [r7, #15]
 8008f5a:	7bfb      	ldrb	r3, [r7, #15]
 8008f5c:	2b03      	cmp	r3, #3
 8008f5e:	d9ec      	bls.n	8008f3a <lcd_send_cmd+0x6a>
 8008f60:	e015      	b.n	8008f8e <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008f62:	2300      	movs	r3, #0
 8008f64:	73bb      	strb	r3, [r7, #14]
 8008f66:	e00f      	b.n	8008f88 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8008f68:	7bbb      	ldrb	r3, [r7, #14]
 8008f6a:	3310      	adds	r3, #16
 8008f6c:	443b      	add	r3, r7
 8008f6e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008f72:	7bbb      	ldrb	r3, [r7, #14]
 8008f74:	f042 0208 	orr.w	r2, r2, #8
 8008f78:	b2d2      	uxtb	r2, r2
 8008f7a:	3310      	adds	r3, #16
 8008f7c:	443b      	add	r3, r7
 8008f7e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008f82:	7bbb      	ldrb	r3, [r7, #14]
 8008f84:	3301      	adds	r3, #1
 8008f86:	73bb      	strb	r3, [r7, #14]
 8008f88:	7bbb      	ldrb	r3, [r7, #14]
 8008f8a:	2b03      	cmp	r3, #3
 8008f8c:	d9ec      	bls.n	8008f68 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008f8e:	f107 0208 	add.w	r2, r7, #8
 8008f92:	2364      	movs	r3, #100	@ 0x64
 8008f94:	9300      	str	r3, [sp, #0]
 8008f96:	2304      	movs	r3, #4
 8008f98:	214e      	movs	r1, #78	@ 0x4e
 8008f9a:	4803      	ldr	r0, [pc, #12]	@ (8008fa8 <lcd_send_cmd+0xd8>)
 8008f9c:	f001 fe40 	bl	800ac20 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008fa0:	bf00      	nop
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	20001e44 	.word	0x20001e44
 8008fac:	20001e19 	.word	0x20001e19

08008fb0 <lcd_send_data>:

void lcd_send_data (char data) {
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b086      	sub	sp, #24
 8008fb4:	af02      	add	r7, sp, #8
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8008fba:	79fb      	ldrb	r3, [r7, #7]
 8008fbc:	f023 030f 	bic.w	r3, r3, #15
 8008fc0:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8008fc2:	79fb      	ldrb	r3, [r7, #7]
 8008fc4:	011b      	lsls	r3, r3, #4
 8008fc6:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8008fc8:	7b7b      	ldrb	r3, [r7, #13]
 8008fca:	f043 030d 	orr.w	r3, r3, #13
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8008fd2:	7b7b      	ldrb	r3, [r7, #13]
 8008fd4:	f043 0309 	orr.w	r3, r3, #9
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8008fdc:	7b3b      	ldrb	r3, [r7, #12]
 8008fde:	f043 030d 	orr.w	r3, r3, #13
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8008fe6:	7b3b      	ldrb	r3, [r7, #12]
 8008fe8:	f043 0309 	orr.w	r3, r3, #9
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008ff0:	bf00      	nop
 8008ff2:	4825      	ldr	r0, [pc, #148]	@ (8009088 <lcd_send_data+0xd8>)
 8008ff4:	f002 fa81 	bl	800b4fa <HAL_I2C_GetError>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b04      	cmp	r3, #4
 8008ffc:	d0f9      	beq.n	8008ff2 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008ffe:	bf00      	nop
 8009000:	4821      	ldr	r0, [pc, #132]	@ (8009088 <lcd_send_data+0xd8>)
 8009002:	f002 fa6d 	bl	800b4e0 <HAL_I2C_GetState>
 8009006:	4603      	mov	r3, r0
 8009008:	2b20      	cmp	r3, #32
 800900a:	d1f9      	bne.n	8009000 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 800900c:	4b1f      	ldr	r3, [pc, #124]	@ (800908c <lcd_send_data+0xdc>)
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d116      	bne.n	8009042 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8009014:	2300      	movs	r3, #0
 8009016:	73fb      	strb	r3, [r7, #15]
 8009018:	e00f      	b.n	800903a <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 800901a:	7bfb      	ldrb	r3, [r7, #15]
 800901c:	3310      	adds	r3, #16
 800901e:	443b      	add	r3, r7
 8009020:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009024:	7bfb      	ldrb	r3, [r7, #15]
 8009026:	f022 0208 	bic.w	r2, r2, #8
 800902a:	b2d2      	uxtb	r2, r2
 800902c:	3310      	adds	r3, #16
 800902e:	443b      	add	r3, r7
 8009030:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8009034:	7bfb      	ldrb	r3, [r7, #15]
 8009036:	3301      	adds	r3, #1
 8009038:	73fb      	strb	r3, [r7, #15]
 800903a:	7bfb      	ldrb	r3, [r7, #15]
 800903c:	2b03      	cmp	r3, #3
 800903e:	d9ec      	bls.n	800901a <lcd_send_data+0x6a>
 8009040:	e015      	b.n	800906e <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8009042:	2300      	movs	r3, #0
 8009044:	73bb      	strb	r3, [r7, #14]
 8009046:	e00f      	b.n	8009068 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8009048:	7bbb      	ldrb	r3, [r7, #14]
 800904a:	3310      	adds	r3, #16
 800904c:	443b      	add	r3, r7
 800904e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009052:	7bbb      	ldrb	r3, [r7, #14]
 8009054:	f042 0208 	orr.w	r2, r2, #8
 8009058:	b2d2      	uxtb	r2, r2
 800905a:	3310      	adds	r3, #16
 800905c:	443b      	add	r3, r7
 800905e:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8009062:	7bbb      	ldrb	r3, [r7, #14]
 8009064:	3301      	adds	r3, #1
 8009066:	73bb      	strb	r3, [r7, #14]
 8009068:	7bbb      	ldrb	r3, [r7, #14]
 800906a:	2b03      	cmp	r3, #3
 800906c:	d9ec      	bls.n	8009048 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800906e:	f107 0208 	add.w	r2, r7, #8
 8009072:	2364      	movs	r3, #100	@ 0x64
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	2304      	movs	r3, #4
 8009078:	214e      	movs	r1, #78	@ 0x4e
 800907a:	4803      	ldr	r0, [pc, #12]	@ (8009088 <lcd_send_data+0xd8>)
 800907c:	f001 fdd0 	bl	800ac20 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8009080:	bf00      	nop
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}
 8009088:	20001e44 	.word	0x20001e44
 800908c:	20001e19 	.word	0x20001e19

08009090 <lcd_send_string>:

void lcd_send_string (char *str) {
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
	while (*str) {
 8009098:	e006      	b.n	80090a8 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	1c5a      	adds	r2, r3, #1
 800909e:	607a      	str	r2, [r7, #4]
 80090a0:	781b      	ldrb	r3, [r3, #0]
 80090a2:	4618      	mov	r0, r3
 80090a4:	f7ff ff84 	bl	8008fb0 <lcd_send_data>
	while (*str) {
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d1f4      	bne.n	800909a <lcd_send_string+0xa>
	}
}
 80090b0:	bf00      	nop
 80090b2:	bf00      	nop
 80090b4:	3708      	adds	r7, #8
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
	...

080090bc <lcd_send_char>:

void lcd_send_char(char ch) {
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af02      	add	r7, sp, #8
 80090c2:	4603      	mov	r3, r0
 80090c4:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 80090c6:	79fb      	ldrb	r3, [r7, #7]
 80090c8:	f023 030f 	bic.w	r3, r3, #15
 80090cc:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 80090ce:	79fb      	ldrb	r3, [r7, #7]
 80090d0:	011b      	lsls	r3, r3, #4
 80090d2:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 80090d4:	7b7b      	ldrb	r3, [r7, #13]
 80090d6:	f043 030d 	orr.w	r3, r3, #13
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 80090de:	7b7b      	ldrb	r3, [r7, #13]
 80090e0:	f043 0309 	orr.w	r3, r3, #9
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80090e8:	7b3b      	ldrb	r3, [r7, #12]
 80090ea:	f043 030d 	orr.w	r3, r3, #13
 80090ee:	b2db      	uxtb	r3, r3
 80090f0:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80090f2:	7b3b      	ldrb	r3, [r7, #12]
 80090f4:	f043 0309 	orr.w	r3, r3, #9
 80090f8:	b2db      	uxtb	r3, r3
 80090fa:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80090fc:	bf00      	nop
 80090fe:	4825      	ldr	r0, [pc, #148]	@ (8009194 <lcd_send_char+0xd8>)
 8009100:	f002 f9fb 	bl	800b4fa <HAL_I2C_GetError>
 8009104:	4603      	mov	r3, r0
 8009106:	2b04      	cmp	r3, #4
 8009108:	d0f9      	beq.n	80090fe <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800910a:	bf00      	nop
 800910c:	4821      	ldr	r0, [pc, #132]	@ (8009194 <lcd_send_char+0xd8>)
 800910e:	f002 f9e7 	bl	800b4e0 <HAL_I2C_GetState>
 8009112:	4603      	mov	r3, r0
 8009114:	2b20      	cmp	r3, #32
 8009116:	d1f9      	bne.n	800910c <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8009118:	4b1f      	ldr	r3, [pc, #124]	@ (8009198 <lcd_send_char+0xdc>)
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d116      	bne.n	800914e <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8009120:	2300      	movs	r3, #0
 8009122:	73fb      	strb	r3, [r7, #15]
 8009124:	e00f      	b.n	8009146 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8009126:	7bfb      	ldrb	r3, [r7, #15]
 8009128:	3310      	adds	r3, #16
 800912a:	443b      	add	r3, r7
 800912c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8009130:	7bfb      	ldrb	r3, [r7, #15]
 8009132:	f022 0208 	bic.w	r2, r2, #8
 8009136:	b2d2      	uxtb	r2, r2
 8009138:	3310      	adds	r3, #16
 800913a:	443b      	add	r3, r7
 800913c:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8009140:	7bfb      	ldrb	r3, [r7, #15]
 8009142:	3301      	adds	r3, #1
 8009144:	73fb      	strb	r3, [r7, #15]
 8009146:	7bfb      	ldrb	r3, [r7, #15]
 8009148:	2b03      	cmp	r3, #3
 800914a:	d9ec      	bls.n	8009126 <lcd_send_char+0x6a>
 800914c:	e015      	b.n	800917a <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 800914e:	2300      	movs	r3, #0
 8009150:	73bb      	strb	r3, [r7, #14]
 8009152:	e00f      	b.n	8009174 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8009154:	7bbb      	ldrb	r3, [r7, #14]
 8009156:	3310      	adds	r3, #16
 8009158:	443b      	add	r3, r7
 800915a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800915e:	7bbb      	ldrb	r3, [r7, #14]
 8009160:	f042 0208 	orr.w	r2, r2, #8
 8009164:	b2d2      	uxtb	r2, r2
 8009166:	3310      	adds	r3, #16
 8009168:	443b      	add	r3, r7
 800916a:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 800916e:	7bbb      	ldrb	r3, [r7, #14]
 8009170:	3301      	adds	r3, #1
 8009172:	73bb      	strb	r3, [r7, #14]
 8009174:	7bbb      	ldrb	r3, [r7, #14]
 8009176:	2b03      	cmp	r3, #3
 8009178:	d9ec      	bls.n	8009154 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 800917a:	f107 0208 	add.w	r2, r7, #8
 800917e:	2364      	movs	r3, #100	@ 0x64
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	2304      	movs	r3, #4
 8009184:	214e      	movs	r1, #78	@ 0x4e
 8009186:	4803      	ldr	r0, [pc, #12]	@ (8009194 <lcd_send_char+0xd8>)
 8009188:	f001 fd4a 	bl	800ac20 <HAL_I2C_Master_Transmit>
}
 800918c:	bf00      	nop
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	20001e44 	.word	0x20001e44
 8009198:	20001e19 	.word	0x20001e19

0800919c <lcd_init>:

void lcd_init (void) {
 800919c:	b580      	push	{r7, lr}
 800919e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 80091a0:	2002      	movs	r0, #2
 80091a2:	f7ff fe95 	bl	8008ed0 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80091a6:	2028      	movs	r0, #40	@ 0x28
 80091a8:	f7ff fe92 	bl	8008ed0 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80091ac:	200c      	movs	r0, #12
 80091ae:	f7ff fe8f 	bl	8008ed0 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80091b2:	2080      	movs	r0, #128	@ 0x80
 80091b4:	f7ff fe8c 	bl	8008ed0 <lcd_send_cmd>
	lcd_backlight(1);
 80091b8:	2001      	movs	r0, #1
 80091ba:	f000 f86d 	bl	8009298 <lcd_backlight>
}
 80091be:	bf00      	nop
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b082      	sub	sp, #8
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	4603      	mov	r3, r0
 80091ca:	460a      	mov	r2, r1
 80091cc:	71fb      	strb	r3, [r7, #7]
 80091ce:	4613      	mov	r3, r2
 80091d0:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 80091d2:	79fb      	ldrb	r3, [r7, #7]
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d106      	bne.n	80091e6 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 80091d8:	79bb      	ldrb	r3, [r7, #6]
 80091da:	337f      	adds	r3, #127	@ 0x7f
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	4618      	mov	r0, r3
 80091e0:	f7ff fe76 	bl	8008ed0 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80091e4:	e008      	b.n	80091f8 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80091e6:	79fb      	ldrb	r3, [r7, #7]
 80091e8:	2b02      	cmp	r3, #2
 80091ea:	d105      	bne.n	80091f8 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80091ec:	79bb      	ldrb	r3, [r7, #6]
 80091ee:	3b41      	subs	r3, #65	@ 0x41
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7ff fe6c 	bl	8008ed0 <lcd_send_cmd>
}
 80091f8:	bf00      	nop
 80091fa:	3708      	adds	r7, #8
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}

08009200 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	4603      	mov	r3, r0
 8009208:	603a      	str	r2, [r7, #0]
 800920a:	71fb      	strb	r3, [r7, #7]
 800920c:	460b      	mov	r3, r1
 800920e:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8009210:	79ba      	ldrb	r2, [r7, #6]
 8009212:	79fb      	ldrb	r3, [r7, #7]
 8009214:	4611      	mov	r1, r2
 8009216:	4618      	mov	r0, r3
 8009218:	f7ff ffd3 	bl	80091c2 <lcd_gotoxy>
	lcd_send_string(str);
 800921c:	6838      	ldr	r0, [r7, #0]
 800921e:	f7ff ff37 	bl	8009090 <lcd_send_string>
}
 8009222:	bf00      	nop
 8009224:	3708      	adds	r7, #8
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 800922a:	b580      	push	{r7, lr}
 800922c:	b082      	sub	sp, #8
 800922e:	af00      	add	r7, sp, #0
 8009230:	4603      	mov	r3, r0
 8009232:	71fb      	strb	r3, [r7, #7]
 8009234:	460b      	mov	r3, r1
 8009236:	71bb      	strb	r3, [r7, #6]
 8009238:	4613      	mov	r3, r2
 800923a:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 800923c:	79ba      	ldrb	r2, [r7, #6]
 800923e:	79fb      	ldrb	r3, [r7, #7]
 8009240:	4611      	mov	r1, r2
 8009242:	4618      	mov	r0, r3
 8009244:	f7ff ffbd 	bl	80091c2 <lcd_gotoxy>
    lcd_send_char(ch);
 8009248:	797b      	ldrb	r3, [r7, #5]
 800924a:	4618      	mov	r0, r3
 800924c:	f7ff ff36 	bl	80090bc <lcd_send_char>
}
 8009250:	bf00      	nop
 8009252:	3708      	adds	r7, #8
 8009254:	46bd      	mov	sp, r7
 8009256:	bd80      	pop	{r7, pc}

08009258 <lcd_clear>:

void lcd_clear(void) {
 8009258:	b580      	push	{r7, lr}
 800925a:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 800925c:	2001      	movs	r0, #1
 800925e:	f7ff fe37 	bl	8008ed0 <lcd_send_cmd>
    HAL_Delay(2);
 8009262:	2002      	movs	r0, #2
 8009264:	f000 fd44 	bl	8009cf0 <HAL_Delay>
}
 8009268:	bf00      	nop
 800926a:	bd80      	pop	{r7, pc}

0800926c <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 800926c:	b580      	push	{r7, lr}
 800926e:	b082      	sub	sp, #8
 8009270:	af00      	add	r7, sp, #0
 8009272:	4603      	mov	r3, r0
 8009274:	460a      	mov	r2, r1
 8009276:	71fb      	strb	r3, [r7, #7]
 8009278:	4613      	mov	r3, r2
 800927a:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 800927c:	79ba      	ldrb	r2, [r7, #6]
 800927e:	79fb      	ldrb	r3, [r7, #7]
 8009280:	4611      	mov	r1, r2
 8009282:	4618      	mov	r0, r3
 8009284:	f7ff ff9d 	bl	80091c2 <lcd_gotoxy>

    lcd_send_char(' ');
 8009288:	2020      	movs	r0, #32
 800928a:	f7ff ff17 	bl	80090bc <lcd_send_char>
}
 800928e:	bf00      	nop
 8009290:	3708      	adds	r7, #8
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
	...

08009298 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8009298:	b580      	push	{r7, lr}
 800929a:	b082      	sub	sp, #8
 800929c:	af00      	add	r7, sp, #0
 800929e:	4603      	mov	r3, r0
 80092a0:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 80092a2:	4a05      	ldr	r2, [pc, #20]	@ (80092b8 <lcd_backlight+0x20>)
 80092a4:	79fb      	ldrb	r3, [r7, #7]
 80092a6:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 80092a8:	2000      	movs	r0, #0
 80092aa:	f7ff fe11 	bl	8008ed0 <lcd_send_cmd>
}
 80092ae:	bf00      	nop
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	20001e19 	.word	0x20001e19

080092bc <lcd_cursor>:

void lcd_cursor(int state) {
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d106      	bne.n	80092d8 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 80092ca:	200e      	movs	r0, #14
 80092cc:	f7ff fe00 	bl	8008ed0 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 80092d0:	200f      	movs	r0, #15
 80092d2:	f7ff fdfd 	bl	8008ed0 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 80092d6:	e002      	b.n	80092de <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 80092d8:	200c      	movs	r0, #12
 80092da:	f7ff fdf9 	bl	8008ed0 <lcd_send_cmd>
}
 80092de:	bf00      	nop
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
	...

080092e8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 80092e8:	b480      	push	{r7}
 80092ea:	b083      	sub	sp, #12
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 80092f0:	4b04      	ldr	r3, [pc, #16]	@ (8009304 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	3301      	adds	r3, #1
 80092f6:	4a03      	ldr	r2, [pc, #12]	@ (8009304 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80092f8:	6013      	str	r3, [r2, #0]
}
 80092fa:	bf00      	nop
 80092fc:	370c      	adds	r7, #12
 80092fe:	46bd      	mov	sp, r7
 8009300:	bc80      	pop	{r7}
 8009302:	4770      	bx	lr
 8009304:	20001698 	.word	0x20001698

08009308 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8009308:	b580      	push	{r7, lr}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a08      	ldr	r2, [pc, #32]	@ (8009338 <HAL_UART_RxCpltCallback+0x30>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d10a      	bne.n	8009330 <HAL_UART_RxCpltCallback+0x28>
        HAL_UART_AbortReceive_IT(&huart1);  // Güvenlik için veri alımını durdurun
 800931a:	4808      	ldr	r0, [pc, #32]	@ (800933c <HAL_UART_RxCpltCallback+0x34>)
 800931c:	f003 ffd2 	bl	800d2c4 <HAL_UART_AbortReceive_IT>
        Wifi_RxCallBack(&huart1);  // Gelen veriyi işleyin
 8009320:	4806      	ldr	r0, [pc, #24]	@ (800933c <HAL_UART_RxCpltCallback+0x34>)
 8009322:	f7f7 fbc3 	bl	8000aac <Wifi_RxCallBack>
        HAL_UART_Receive_IT(&huart1, (uint8_t *)esp8266_rx_buffer, 1);  // Yeni veri alımına devam edin
 8009326:	2201      	movs	r2, #1
 8009328:	4905      	ldr	r1, [pc, #20]	@ (8009340 <HAL_UART_RxCpltCallback+0x38>)
 800932a:	4804      	ldr	r0, [pc, #16]	@ (800933c <HAL_UART_RxCpltCallback+0x34>)
 800932c:	f003 ff02 	bl	800d134 <HAL_UART_Receive_IT>
    }
}
 8009330:	bf00      	nop
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	40013800 	.word	0x40013800
 800933c:	20001ee0 	.word	0x20001ee0
 8009340:	20001094 	.word	0x20001094

08009344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009348:	f000 fc70 	bl	8009c2c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 800934c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009350:	f000 fcce 	bl	8009cf0 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009354:	f000 f89c 	bl	8009490 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009358:	f000 f9be 	bl	80096d8 <MX_GPIO_Init>
  MX_CAN_Init();
 800935c:	f000 f8de 	bl	800951c <MX_CAN_Init>
  MX_I2C1_Init();
 8009360:	f000 f910 	bl	8009584 <MX_I2C1_Init>
  MX_TIM1_Init();
 8009364:	f000 f93c 	bl	80095e0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8009368:	f000 f98c 	bl	8009684 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800936c:	2201      	movs	r2, #1
 800936e:	2140      	movs	r1, #64	@ 0x40
 8009370:	483e      	ldr	r0, [pc, #248]	@ (800946c <main+0x128>)
 8009372:	f001 fab0 	bl	800a8d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8009376:	2201      	movs	r2, #1
 8009378:	2180      	movs	r1, #128	@ 0x80
 800937a:	483c      	ldr	r0, [pc, #240]	@ (800946c <main+0x128>)
 800937c:	f001 faab 	bl	800a8d6 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8009380:	200a      	movs	r0, #10
 8009382:	f000 fcb5 	bl	8009cf0 <HAL_Delay>
  lcd_init();
 8009386:	f7ff ff09 	bl	800919c <lcd_init>
  HAL_Delay(10);
 800938a:	200a      	movs	r0, #10
 800938c:	f000 fcb0 	bl	8009cf0 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 8009390:	4837      	ldr	r0, [pc, #220]	@ (8009470 <main+0x12c>)
 8009392:	f003 f953 	bl	800c63c <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009396:	bf00      	nop
 8009398:	4836      	ldr	r0, [pc, #216]	@ (8009474 <main+0x130>)
 800939a:	f002 f8ae 	bl	800b4fa <HAL_I2C_GetError>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b04      	cmp	r3, #4
 80093a2:	d0f9      	beq.n	8009398 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80093a4:	bf00      	nop
 80093a6:	4833      	ldr	r0, [pc, #204]	@ (8009474 <main+0x130>)
 80093a8:	f002 f89a 	bl	800b4e0 <HAL_I2C_GetState>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b20      	cmp	r3, #32
 80093b0:	d1f9      	bne.n	80093a6 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80093b2:	2200      	movs	r2, #0
 80093b4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80093b8:	482c      	ldr	r0, [pc, #176]	@ (800946c <main+0x128>)
 80093ba:	f001 fa8c 	bl	800a8d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80093be:	2200      	movs	r2, #0
 80093c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80093c4:	4829      	ldr	r0, [pc, #164]	@ (800946c <main+0x128>)
 80093c6:	f001 fa86 	bl	800a8d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80093ca:	2200      	movs	r2, #0
 80093cc:	2104      	movs	r1, #4
 80093ce:	4827      	ldr	r0, [pc, #156]	@ (800946c <main+0x128>)
 80093d0:	f001 fa81 	bl	800a8d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80093d4:	2200      	movs	r2, #0
 80093d6:	2102      	movs	r1, #2
 80093d8:	4824      	ldr	r0, [pc, #144]	@ (800946c <main+0x128>)
 80093da:	f001 fa7c 	bl	800a8d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80093de:	2200      	movs	r2, #0
 80093e0:	2101      	movs	r1, #1
 80093e2:	4822      	ldr	r0, [pc, #136]	@ (800946c <main+0x128>)
 80093e4:	f001 fa77 	bl	800a8d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80093e8:	2200      	movs	r2, #0
 80093ea:	2120      	movs	r1, #32
 80093ec:	4822      	ldr	r0, [pc, #136]	@ (8009478 <main+0x134>)
 80093ee:	f001 fa72 	bl	800a8d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80093f2:	2200      	movs	r2, #0
 80093f4:	2110      	movs	r1, #16
 80093f6:	4820      	ldr	r0, [pc, #128]	@ (8009478 <main+0x134>)
 80093f8:	f001 fa6d 	bl	800a8d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80093fc:	2200      	movs	r2, #0
 80093fe:	2180      	movs	r1, #128	@ 0x80
 8009400:	481e      	ldr	r0, [pc, #120]	@ (800947c <main+0x138>)
 8009402:	f001 fa68 	bl	800a8d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8009406:	2200      	movs	r2, #0
 8009408:	2140      	movs	r1, #64	@ 0x40
 800940a:	481c      	ldr	r0, [pc, #112]	@ (800947c <main+0x138>)
 800940c:	f001 fa63 	bl	800a8d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8009410:	2200      	movs	r2, #0
 8009412:	2120      	movs	r1, #32
 8009414:	4819      	ldr	r0, [pc, #100]	@ (800947c <main+0x138>)
 8009416:	f001 fa5e 	bl	800a8d6 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800941a:	2200      	movs	r2, #0
 800941c:	2110      	movs	r1, #16
 800941e:	4817      	ldr	r0, [pc, #92]	@ (800947c <main+0x138>)
 8009420:	f001 fa59 	bl	800a8d6 <HAL_GPIO_WritePin>

  i2cTest();
 8009424:	f7f7 fd9c 	bl	8000f60 <i2cTest>
  HAL_Delay(100);
 8009428:	2064      	movs	r0, #100	@ 0x64
 800942a:	f000 fc61 	bl	8009cf0 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 800942e:	4a14      	ldr	r2, [pc, #80]	@ (8009480 <main+0x13c>)
 8009430:	2101      	movs	r1, #1
 8009432:	2001      	movs	r0, #1
 8009434:	f7ff fee4 	bl	8009200 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8009438:	4a12      	ldr	r2, [pc, #72]	@ (8009484 <main+0x140>)
 800943a:	2101      	movs	r1, #1
 800943c:	2002      	movs	r0, #2
 800943e:	f7ff fedf 	bl	8009200 <lcd_print>
  HAL_Delay(1000);
 8009442:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009446:	f000 fc53 	bl	8009cf0 <HAL_Delay>
  lcd_clear();
 800944a:	f7ff ff05 	bl	8009258 <lcd_clear>

  eepromKontrol();
 800944e:	f7f6 fef1 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8009452:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009456:	f000 fc4b 	bl	8009cf0 <HAL_Delay>

  backLightTimer = millis;
 800945a:	4b0b      	ldr	r3, [pc, #44]	@ (8009488 <main+0x144>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a0b      	ldr	r2, [pc, #44]	@ (800948c <main+0x148>)
 8009460:	6013      	str	r3, [r2, #0]

  //IoT Section:
  iotSetup();
 8009462:	f7ff fcd1 	bl	8008e08 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8009466:	f7fc fc6b 	bl	8005d40 <mainLoop>
 800946a:	e7fc      	b.n	8009466 <main+0x122>
 800946c:	40010c00 	.word	0x40010c00
 8009470:	20001e98 	.word	0x20001e98
 8009474:	20001e44 	.word	0x20001e44
 8009478:	40011000 	.word	0x40011000
 800947c:	40010800 	.word	0x40010800
 8009480:	2000009c 	.word	0x2000009c
 8009484:	200000b0 	.word	0x200000b0
 8009488:	20001698 	.word	0x20001698
 800948c:	200016b4 	.word	0x200016b4

08009490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b090      	sub	sp, #64	@ 0x40
 8009494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009496:	f107 0318 	add.w	r3, r7, #24
 800949a:	2228      	movs	r2, #40	@ 0x28
 800949c:	2100      	movs	r1, #0
 800949e:	4618      	mov	r0, r3
 80094a0:	f004 feed 	bl	800e27e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80094a4:	1d3b      	adds	r3, r7, #4
 80094a6:	2200      	movs	r2, #0
 80094a8:	601a      	str	r2, [r3, #0]
 80094aa:	605a      	str	r2, [r3, #4]
 80094ac:	609a      	str	r2, [r3, #8]
 80094ae:	60da      	str	r2, [r3, #12]
 80094b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80094b2:	2301      	movs	r3, #1
 80094b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80094b6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80094ba:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80094bc:	2300      	movs	r3, #0
 80094be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80094c0:	2301      	movs	r3, #1
 80094c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80094c4:	2302      	movs	r3, #2
 80094c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80094c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80094cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80094ce:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80094d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80094d4:	f107 0318 	add.w	r3, r7, #24
 80094d8:	4618      	mov	r0, r3
 80094da:	f002 fc4f 	bl	800bd7c <HAL_RCC_OscConfig>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d001      	beq.n	80094e8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80094e4:	f000 f9a2 	bl	800982c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80094e8:	230f      	movs	r3, #15
 80094ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80094ec:	2302      	movs	r3, #2
 80094ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80094f0:	2300      	movs	r3, #0
 80094f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80094f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80094f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80094fa:	2300      	movs	r3, #0
 80094fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80094fe:	1d3b      	adds	r3, r7, #4
 8009500:	2102      	movs	r1, #2
 8009502:	4618      	mov	r0, r3
 8009504:	f002 febc 	bl	800c280 <HAL_RCC_ClockConfig>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d001      	beq.n	8009512 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800950e:	f000 f98d 	bl	800982c <Error_Handler>
  }
}
 8009512:	bf00      	nop
 8009514:	3740      	adds	r7, #64	@ 0x40
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
	...

0800951c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8009520:	4b16      	ldr	r3, [pc, #88]	@ (800957c <MX_CAN_Init+0x60>)
 8009522:	4a17      	ldr	r2, [pc, #92]	@ (8009580 <MX_CAN_Init+0x64>)
 8009524:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8009526:	4b15      	ldr	r3, [pc, #84]	@ (800957c <MX_CAN_Init+0x60>)
 8009528:	2210      	movs	r2, #16
 800952a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800952c:	4b13      	ldr	r3, [pc, #76]	@ (800957c <MX_CAN_Init+0x60>)
 800952e:	2200      	movs	r2, #0
 8009530:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8009532:	4b12      	ldr	r3, [pc, #72]	@ (800957c <MX_CAN_Init+0x60>)
 8009534:	2200      	movs	r2, #0
 8009536:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8009538:	4b10      	ldr	r3, [pc, #64]	@ (800957c <MX_CAN_Init+0x60>)
 800953a:	2200      	movs	r2, #0
 800953c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800953e:	4b0f      	ldr	r3, [pc, #60]	@ (800957c <MX_CAN_Init+0x60>)
 8009540:	2200      	movs	r2, #0
 8009542:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8009544:	4b0d      	ldr	r3, [pc, #52]	@ (800957c <MX_CAN_Init+0x60>)
 8009546:	2200      	movs	r2, #0
 8009548:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800954a:	4b0c      	ldr	r3, [pc, #48]	@ (800957c <MX_CAN_Init+0x60>)
 800954c:	2200      	movs	r2, #0
 800954e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8009550:	4b0a      	ldr	r3, [pc, #40]	@ (800957c <MX_CAN_Init+0x60>)
 8009552:	2200      	movs	r2, #0
 8009554:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8009556:	4b09      	ldr	r3, [pc, #36]	@ (800957c <MX_CAN_Init+0x60>)
 8009558:	2200      	movs	r2, #0
 800955a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800955c:	4b07      	ldr	r3, [pc, #28]	@ (800957c <MX_CAN_Init+0x60>)
 800955e:	2200      	movs	r2, #0
 8009560:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8009562:	4b06      	ldr	r3, [pc, #24]	@ (800957c <MX_CAN_Init+0x60>)
 8009564:	2200      	movs	r2, #0
 8009566:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8009568:	4804      	ldr	r0, [pc, #16]	@ (800957c <MX_CAN_Init+0x60>)
 800956a:	f000 fbe5 	bl	8009d38 <HAL_CAN_Init>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d001      	beq.n	8009578 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8009574:	f000 f95a 	bl	800982c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8009578:	bf00      	nop
 800957a:	bd80      	pop	{r7, pc}
 800957c:	20001e1c 	.word	0x20001e1c
 8009580:	40006400 	.word	0x40006400

08009584 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009588:	4b12      	ldr	r3, [pc, #72]	@ (80095d4 <MX_I2C1_Init+0x50>)
 800958a:	4a13      	ldr	r2, [pc, #76]	@ (80095d8 <MX_I2C1_Init+0x54>)
 800958c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800958e:	4b11      	ldr	r3, [pc, #68]	@ (80095d4 <MX_I2C1_Init+0x50>)
 8009590:	4a12      	ldr	r2, [pc, #72]	@ (80095dc <MX_I2C1_Init+0x58>)
 8009592:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009594:	4b0f      	ldr	r3, [pc, #60]	@ (80095d4 <MX_I2C1_Init+0x50>)
 8009596:	2200      	movs	r2, #0
 8009598:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800959a:	4b0e      	ldr	r3, [pc, #56]	@ (80095d4 <MX_I2C1_Init+0x50>)
 800959c:	2200      	movs	r2, #0
 800959e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80095a0:	4b0c      	ldr	r3, [pc, #48]	@ (80095d4 <MX_I2C1_Init+0x50>)
 80095a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80095a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80095a8:	4b0a      	ldr	r3, [pc, #40]	@ (80095d4 <MX_I2C1_Init+0x50>)
 80095aa:	2200      	movs	r2, #0
 80095ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80095ae:	4b09      	ldr	r3, [pc, #36]	@ (80095d4 <MX_I2C1_Init+0x50>)
 80095b0:	2200      	movs	r2, #0
 80095b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80095b4:	4b07      	ldr	r3, [pc, #28]	@ (80095d4 <MX_I2C1_Init+0x50>)
 80095b6:	2200      	movs	r2, #0
 80095b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80095ba:	4b06      	ldr	r3, [pc, #24]	@ (80095d4 <MX_I2C1_Init+0x50>)
 80095bc:	2200      	movs	r2, #0
 80095be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80095c0:	4804      	ldr	r0, [pc, #16]	@ (80095d4 <MX_I2C1_Init+0x50>)
 80095c2:	f001 f9b9 	bl	800a938 <HAL_I2C_Init>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d001      	beq.n	80095d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80095cc:	f000 f92e 	bl	800982c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80095d0:	bf00      	nop
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	20001e44 	.word	0x20001e44
 80095d8:	40005400 	.word	0x40005400
 80095dc:	00061a80 	.word	0x00061a80

080095e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b086      	sub	sp, #24
 80095e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80095e6:	f107 0308 	add.w	r3, r7, #8
 80095ea:	2200      	movs	r2, #0
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	605a      	str	r2, [r3, #4]
 80095f0:	609a      	str	r2, [r3, #8]
 80095f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80095f4:	463b      	mov	r3, r7
 80095f6:	2200      	movs	r2, #0
 80095f8:	601a      	str	r2, [r3, #0]
 80095fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80095fc:	4b1f      	ldr	r3, [pc, #124]	@ (800967c <MX_TIM1_Init+0x9c>)
 80095fe:	4a20      	ldr	r2, [pc, #128]	@ (8009680 <MX_TIM1_Init+0xa0>)
 8009600:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8009602:	4b1e      	ldr	r3, [pc, #120]	@ (800967c <MX_TIM1_Init+0x9c>)
 8009604:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8009608:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800960a:	4b1c      	ldr	r3, [pc, #112]	@ (800967c <MX_TIM1_Init+0x9c>)
 800960c:	2200      	movs	r2, #0
 800960e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8009610:	4b1a      	ldr	r3, [pc, #104]	@ (800967c <MX_TIM1_Init+0x9c>)
 8009612:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8009616:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009618:	4b18      	ldr	r3, [pc, #96]	@ (800967c <MX_TIM1_Init+0x9c>)
 800961a:	2200      	movs	r2, #0
 800961c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800961e:	4b17      	ldr	r3, [pc, #92]	@ (800967c <MX_TIM1_Init+0x9c>)
 8009620:	2200      	movs	r2, #0
 8009622:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009624:	4b15      	ldr	r3, [pc, #84]	@ (800967c <MX_TIM1_Init+0x9c>)
 8009626:	2200      	movs	r2, #0
 8009628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800962a:	4814      	ldr	r0, [pc, #80]	@ (800967c <MX_TIM1_Init+0x9c>)
 800962c:	f002 ffb6 	bl	800c59c <HAL_TIM_Base_Init>
 8009630:	4603      	mov	r3, r0
 8009632:	2b00      	cmp	r3, #0
 8009634:	d001      	beq.n	800963a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8009636:	f000 f8f9 	bl	800982c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800963a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800963e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009640:	f107 0308 	add.w	r3, r7, #8
 8009644:	4619      	mov	r1, r3
 8009646:	480d      	ldr	r0, [pc, #52]	@ (800967c <MX_TIM1_Init+0x9c>)
 8009648:	f003 f960 	bl	800c90c <HAL_TIM_ConfigClockSource>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d001      	beq.n	8009656 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8009652:	f000 f8eb 	bl	800982c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009656:	2300      	movs	r3, #0
 8009658:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800965a:	2300      	movs	r3, #0
 800965c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800965e:	463b      	mov	r3, r7
 8009660:	4619      	mov	r1, r3
 8009662:	4806      	ldr	r0, [pc, #24]	@ (800967c <MX_TIM1_Init+0x9c>)
 8009664:	f003 fb4e 	bl	800cd04 <HAL_TIMEx_MasterConfigSynchronization>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d001      	beq.n	8009672 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800966e:	f000 f8dd 	bl	800982c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8009672:	bf00      	nop
 8009674:	3718      	adds	r7, #24
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}
 800967a:	bf00      	nop
 800967c:	20001e98 	.word	0x20001e98
 8009680:	40012c00 	.word	0x40012c00

08009684 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009688:	4b11      	ldr	r3, [pc, #68]	@ (80096d0 <MX_USART1_UART_Init+0x4c>)
 800968a:	4a12      	ldr	r2, [pc, #72]	@ (80096d4 <MX_USART1_UART_Init+0x50>)
 800968c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800968e:	4b10      	ldr	r3, [pc, #64]	@ (80096d0 <MX_USART1_UART_Init+0x4c>)
 8009690:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009694:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009696:	4b0e      	ldr	r3, [pc, #56]	@ (80096d0 <MX_USART1_UART_Init+0x4c>)
 8009698:	2200      	movs	r2, #0
 800969a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800969c:	4b0c      	ldr	r3, [pc, #48]	@ (80096d0 <MX_USART1_UART_Init+0x4c>)
 800969e:	2200      	movs	r2, #0
 80096a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80096a2:	4b0b      	ldr	r3, [pc, #44]	@ (80096d0 <MX_USART1_UART_Init+0x4c>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80096a8:	4b09      	ldr	r3, [pc, #36]	@ (80096d0 <MX_USART1_UART_Init+0x4c>)
 80096aa:	220c      	movs	r2, #12
 80096ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80096ae:	4b08      	ldr	r3, [pc, #32]	@ (80096d0 <MX_USART1_UART_Init+0x4c>)
 80096b0:	2200      	movs	r2, #0
 80096b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80096b4:	4b06      	ldr	r3, [pc, #24]	@ (80096d0 <MX_USART1_UART_Init+0x4c>)
 80096b6:	2200      	movs	r2, #0
 80096b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80096ba:	4805      	ldr	r0, [pc, #20]	@ (80096d0 <MX_USART1_UART_Init+0x4c>)
 80096bc:	f003 fba0 	bl	800ce00 <HAL_UART_Init>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d001      	beq.n	80096ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80096c6:	f000 f8b1 	bl	800982c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80096ca:	bf00      	nop
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20001ee0 	.word	0x20001ee0
 80096d4:	40013800 	.word	0x40013800

080096d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b088      	sub	sp, #32
 80096dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096de:	f107 0310 	add.w	r3, r7, #16
 80096e2:	2200      	movs	r2, #0
 80096e4:	601a      	str	r2, [r3, #0]
 80096e6:	605a      	str	r2, [r3, #4]
 80096e8:	609a      	str	r2, [r3, #8]
 80096ea:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80096ec:	4b4b      	ldr	r3, [pc, #300]	@ (800981c <MX_GPIO_Init+0x144>)
 80096ee:	699b      	ldr	r3, [r3, #24]
 80096f0:	4a4a      	ldr	r2, [pc, #296]	@ (800981c <MX_GPIO_Init+0x144>)
 80096f2:	f043 0310 	orr.w	r3, r3, #16
 80096f6:	6193      	str	r3, [r2, #24]
 80096f8:	4b48      	ldr	r3, [pc, #288]	@ (800981c <MX_GPIO_Init+0x144>)
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	f003 0310 	and.w	r3, r3, #16
 8009700:	60fb      	str	r3, [r7, #12]
 8009702:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009704:	4b45      	ldr	r3, [pc, #276]	@ (800981c <MX_GPIO_Init+0x144>)
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	4a44      	ldr	r2, [pc, #272]	@ (800981c <MX_GPIO_Init+0x144>)
 800970a:	f043 0320 	orr.w	r3, r3, #32
 800970e:	6193      	str	r3, [r2, #24]
 8009710:	4b42      	ldr	r3, [pc, #264]	@ (800981c <MX_GPIO_Init+0x144>)
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	f003 0320 	and.w	r3, r3, #32
 8009718:	60bb      	str	r3, [r7, #8]
 800971a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800971c:	4b3f      	ldr	r3, [pc, #252]	@ (800981c <MX_GPIO_Init+0x144>)
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	4a3e      	ldr	r2, [pc, #248]	@ (800981c <MX_GPIO_Init+0x144>)
 8009722:	f043 0304 	orr.w	r3, r3, #4
 8009726:	6193      	str	r3, [r2, #24]
 8009728:	4b3c      	ldr	r3, [pc, #240]	@ (800981c <MX_GPIO_Init+0x144>)
 800972a:	699b      	ldr	r3, [r3, #24]
 800972c:	f003 0304 	and.w	r3, r3, #4
 8009730:	607b      	str	r3, [r7, #4]
 8009732:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009734:	4b39      	ldr	r3, [pc, #228]	@ (800981c <MX_GPIO_Init+0x144>)
 8009736:	699b      	ldr	r3, [r3, #24]
 8009738:	4a38      	ldr	r2, [pc, #224]	@ (800981c <MX_GPIO_Init+0x144>)
 800973a:	f043 0308 	orr.w	r3, r3, #8
 800973e:	6193      	str	r3, [r2, #24]
 8009740:	4b36      	ldr	r3, [pc, #216]	@ (800981c <MX_GPIO_Init+0x144>)
 8009742:	699b      	ldr	r3, [r3, #24]
 8009744:	f003 0308 	and.w	r3, r3, #8
 8009748:	603b      	str	r3, [r7, #0]
 800974a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 800974c:	2200      	movs	r2, #0
 800974e:	21f0      	movs	r1, #240	@ 0xf0
 8009750:	4833      	ldr	r0, [pc, #204]	@ (8009820 <MX_GPIO_Init+0x148>)
 8009752:	f001 f8c0 	bl	800a8d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8009756:	2200      	movs	r2, #0
 8009758:	f241 0130 	movw	r1, #4144	@ 0x1030
 800975c:	4831      	ldr	r0, [pc, #196]	@ (8009824 <MX_GPIO_Init+0x14c>)
 800975e:	f001 f8ba 	bl	800a8d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8009762:	2200      	movs	r2, #0
 8009764:	f640 4107 	movw	r1, #3079	@ 0xc07
 8009768:	482f      	ldr	r0, [pc, #188]	@ (8009828 <MX_GPIO_Init+0x150>)
 800976a:	f001 f8b4 	bl	800a8d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800976e:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 8009772:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009774:	2300      	movs	r3, #0
 8009776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009778:	2300      	movs	r3, #0
 800977a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800977c:	f107 0310 	add.w	r3, r7, #16
 8009780:	4619      	mov	r1, r3
 8009782:	4828      	ldr	r0, [pc, #160]	@ (8009824 <MX_GPIO_Init+0x14c>)
 8009784:	f000 fe30 	bl	800a3e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8009788:	f248 130f 	movw	r3, #33039	@ 0x810f
 800978c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800978e:	2300      	movs	r3, #0
 8009790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009792:	2300      	movs	r3, #0
 8009794:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009796:	f107 0310 	add.w	r3, r7, #16
 800979a:	4619      	mov	r1, r3
 800979c:	4820      	ldr	r0, [pc, #128]	@ (8009820 <MX_GPIO_Init+0x148>)
 800979e:	f000 fe23 	bl	800a3e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80097a2:	23f0      	movs	r3, #240	@ 0xf0
 80097a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097a6:	2301      	movs	r3, #1
 80097a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097aa:	2300      	movs	r3, #0
 80097ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097ae:	2302      	movs	r3, #2
 80097b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097b2:	f107 0310 	add.w	r3, r7, #16
 80097b6:	4619      	mov	r1, r3
 80097b8:	4819      	ldr	r0, [pc, #100]	@ (8009820 <MX_GPIO_Init+0x148>)
 80097ba:	f000 fe15 	bl	800a3e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80097be:	f241 0330 	movw	r3, #4144	@ 0x1030
 80097c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097c4:	2301      	movs	r3, #1
 80097c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097c8:	2300      	movs	r3, #0
 80097ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097cc:	2302      	movs	r3, #2
 80097ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80097d0:	f107 0310 	add.w	r3, r7, #16
 80097d4:	4619      	mov	r1, r3
 80097d6:	4813      	ldr	r0, [pc, #76]	@ (8009824 <MX_GPIO_Init+0x14c>)
 80097d8:	f000 fe06 	bl	800a3e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80097dc:	f640 4307 	movw	r3, #3079	@ 0xc07
 80097e0:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80097e2:	2301      	movs	r3, #1
 80097e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097e6:	2300      	movs	r3, #0
 80097e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097ea:	2302      	movs	r3, #2
 80097ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80097ee:	f107 0310 	add.w	r3, r7, #16
 80097f2:	4619      	mov	r1, r3
 80097f4:	480c      	ldr	r0, [pc, #48]	@ (8009828 <MX_GPIO_Init+0x150>)
 80097f6:	f000 fdf7 	bl	800a3e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 80097fa:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80097fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009800:	2300      	movs	r3, #0
 8009802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009804:	2300      	movs	r3, #0
 8009806:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009808:	f107 0310 	add.w	r3, r7, #16
 800980c:	4619      	mov	r1, r3
 800980e:	4806      	ldr	r0, [pc, #24]	@ (8009828 <MX_GPIO_Init+0x150>)
 8009810:	f000 fdea 	bl	800a3e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8009814:	bf00      	nop
 8009816:	3720      	adds	r7, #32
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	40021000 	.word	0x40021000
 8009820:	40010800 	.word	0x40010800
 8009824:	40011000 	.word	0x40011000
 8009828:	40010c00 	.word	0x40010c00

0800982c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800982c:	b480      	push	{r7}
 800982e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8009830:	bf00      	nop
 8009832:	46bd      	mov	sp, r7
 8009834:	bc80      	pop	{r7}
 8009836:	4770      	bx	lr

08009838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800983e:	4b15      	ldr	r3, [pc, #84]	@ (8009894 <HAL_MspInit+0x5c>)
 8009840:	699b      	ldr	r3, [r3, #24]
 8009842:	4a14      	ldr	r2, [pc, #80]	@ (8009894 <HAL_MspInit+0x5c>)
 8009844:	f043 0301 	orr.w	r3, r3, #1
 8009848:	6193      	str	r3, [r2, #24]
 800984a:	4b12      	ldr	r3, [pc, #72]	@ (8009894 <HAL_MspInit+0x5c>)
 800984c:	699b      	ldr	r3, [r3, #24]
 800984e:	f003 0301 	and.w	r3, r3, #1
 8009852:	60bb      	str	r3, [r7, #8]
 8009854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009856:	4b0f      	ldr	r3, [pc, #60]	@ (8009894 <HAL_MspInit+0x5c>)
 8009858:	69db      	ldr	r3, [r3, #28]
 800985a:	4a0e      	ldr	r2, [pc, #56]	@ (8009894 <HAL_MspInit+0x5c>)
 800985c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009860:	61d3      	str	r3, [r2, #28]
 8009862:	4b0c      	ldr	r3, [pc, #48]	@ (8009894 <HAL_MspInit+0x5c>)
 8009864:	69db      	ldr	r3, [r3, #28]
 8009866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800986a:	607b      	str	r3, [r7, #4]
 800986c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800986e:	4b0a      	ldr	r3, [pc, #40]	@ (8009898 <HAL_MspInit+0x60>)
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800987a:	60fb      	str	r3, [r7, #12]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009882:	60fb      	str	r3, [r7, #12]
 8009884:	4a04      	ldr	r2, [pc, #16]	@ (8009898 <HAL_MspInit+0x60>)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800988a:	bf00      	nop
 800988c:	3714      	adds	r7, #20
 800988e:	46bd      	mov	sp, r7
 8009890:	bc80      	pop	{r7}
 8009892:	4770      	bx	lr
 8009894:	40021000 	.word	0x40021000
 8009898:	40010000 	.word	0x40010000

0800989c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b088      	sub	sp, #32
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80098a4:	f107 0310 	add.w	r3, r7, #16
 80098a8:	2200      	movs	r2, #0
 80098aa:	601a      	str	r2, [r3, #0]
 80098ac:	605a      	str	r2, [r3, #4]
 80098ae:	609a      	str	r2, [r3, #8]
 80098b0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4a1c      	ldr	r2, [pc, #112]	@ (8009928 <HAL_CAN_MspInit+0x8c>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d131      	bne.n	8009920 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80098bc:	4b1b      	ldr	r3, [pc, #108]	@ (800992c <HAL_CAN_MspInit+0x90>)
 80098be:	69db      	ldr	r3, [r3, #28]
 80098c0:	4a1a      	ldr	r2, [pc, #104]	@ (800992c <HAL_CAN_MspInit+0x90>)
 80098c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80098c6:	61d3      	str	r3, [r2, #28]
 80098c8:	4b18      	ldr	r3, [pc, #96]	@ (800992c <HAL_CAN_MspInit+0x90>)
 80098ca:	69db      	ldr	r3, [r3, #28]
 80098cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098d0:	60fb      	str	r3, [r7, #12]
 80098d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098d4:	4b15      	ldr	r3, [pc, #84]	@ (800992c <HAL_CAN_MspInit+0x90>)
 80098d6:	699b      	ldr	r3, [r3, #24]
 80098d8:	4a14      	ldr	r2, [pc, #80]	@ (800992c <HAL_CAN_MspInit+0x90>)
 80098da:	f043 0304 	orr.w	r3, r3, #4
 80098de:	6193      	str	r3, [r2, #24]
 80098e0:	4b12      	ldr	r3, [pc, #72]	@ (800992c <HAL_CAN_MspInit+0x90>)
 80098e2:	699b      	ldr	r3, [r3, #24]
 80098e4:	f003 0304 	and.w	r3, r3, #4
 80098e8:	60bb      	str	r3, [r7, #8]
 80098ea:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80098ec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80098f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80098f2:	2300      	movs	r3, #0
 80098f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098f6:	2300      	movs	r3, #0
 80098f8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098fa:	f107 0310 	add.w	r3, r7, #16
 80098fe:	4619      	mov	r1, r3
 8009900:	480b      	ldr	r0, [pc, #44]	@ (8009930 <HAL_CAN_MspInit+0x94>)
 8009902:	f000 fd71 	bl	800a3e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8009906:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800990a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800990c:	2302      	movs	r3, #2
 800990e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009910:	2303      	movs	r3, #3
 8009912:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009914:	f107 0310 	add.w	r3, r7, #16
 8009918:	4619      	mov	r1, r3
 800991a:	4805      	ldr	r0, [pc, #20]	@ (8009930 <HAL_CAN_MspInit+0x94>)
 800991c:	f000 fd64 	bl	800a3e8 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8009920:	bf00      	nop
 8009922:	3720      	adds	r7, #32
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	40006400 	.word	0x40006400
 800992c:	40021000 	.word	0x40021000
 8009930:	40010800 	.word	0x40010800

08009934 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b088      	sub	sp, #32
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800993c:	f107 0310 	add.w	r3, r7, #16
 8009940:	2200      	movs	r2, #0
 8009942:	601a      	str	r2, [r3, #0]
 8009944:	605a      	str	r2, [r3, #4]
 8009946:	609a      	str	r2, [r3, #8]
 8009948:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4a15      	ldr	r2, [pc, #84]	@ (80099a4 <HAL_I2C_MspInit+0x70>)
 8009950:	4293      	cmp	r3, r2
 8009952:	d123      	bne.n	800999c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009954:	4b14      	ldr	r3, [pc, #80]	@ (80099a8 <HAL_I2C_MspInit+0x74>)
 8009956:	699b      	ldr	r3, [r3, #24]
 8009958:	4a13      	ldr	r2, [pc, #76]	@ (80099a8 <HAL_I2C_MspInit+0x74>)
 800995a:	f043 0308 	orr.w	r3, r3, #8
 800995e:	6193      	str	r3, [r2, #24]
 8009960:	4b11      	ldr	r3, [pc, #68]	@ (80099a8 <HAL_I2C_MspInit+0x74>)
 8009962:	699b      	ldr	r3, [r3, #24]
 8009964:	f003 0308 	and.w	r3, r3, #8
 8009968:	60fb      	str	r3, [r7, #12]
 800996a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800996c:	23c0      	movs	r3, #192	@ 0xc0
 800996e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009970:	2312      	movs	r3, #18
 8009972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009974:	2303      	movs	r3, #3
 8009976:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009978:	f107 0310 	add.w	r3, r7, #16
 800997c:	4619      	mov	r1, r3
 800997e:	480b      	ldr	r0, [pc, #44]	@ (80099ac <HAL_I2C_MspInit+0x78>)
 8009980:	f000 fd32 	bl	800a3e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009984:	4b08      	ldr	r3, [pc, #32]	@ (80099a8 <HAL_I2C_MspInit+0x74>)
 8009986:	69db      	ldr	r3, [r3, #28]
 8009988:	4a07      	ldr	r2, [pc, #28]	@ (80099a8 <HAL_I2C_MspInit+0x74>)
 800998a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800998e:	61d3      	str	r3, [r2, #28]
 8009990:	4b05      	ldr	r3, [pc, #20]	@ (80099a8 <HAL_I2C_MspInit+0x74>)
 8009992:	69db      	ldr	r3, [r3, #28]
 8009994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009998:	60bb      	str	r3, [r7, #8]
 800999a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800999c:	bf00      	nop
 800999e:	3720      	adds	r7, #32
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	40005400 	.word	0x40005400
 80099a8:	40021000 	.word	0x40021000
 80099ac:	40010c00 	.word	0x40010c00

080099b0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a0a      	ldr	r2, [pc, #40]	@ (80099e8 <HAL_I2C_MspDeInit+0x38>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d10d      	bne.n	80099de <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80099c2:	4b0a      	ldr	r3, [pc, #40]	@ (80099ec <HAL_I2C_MspDeInit+0x3c>)
 80099c4:	69db      	ldr	r3, [r3, #28]
 80099c6:	4a09      	ldr	r2, [pc, #36]	@ (80099ec <HAL_I2C_MspDeInit+0x3c>)
 80099c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80099cc:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80099ce:	2140      	movs	r1, #64	@ 0x40
 80099d0:	4807      	ldr	r0, [pc, #28]	@ (80099f0 <HAL_I2C_MspDeInit+0x40>)
 80099d2:	f000 fe9d 	bl	800a710 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80099d6:	2180      	movs	r1, #128	@ 0x80
 80099d8:	4805      	ldr	r0, [pc, #20]	@ (80099f0 <HAL_I2C_MspDeInit+0x40>)
 80099da:	f000 fe99 	bl	800a710 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 80099de:	bf00      	nop
 80099e0:	3708      	adds	r7, #8
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	40005400 	.word	0x40005400
 80099ec:	40021000 	.word	0x40021000
 80099f0:	40010c00 	.word	0x40010c00

080099f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a0d      	ldr	r2, [pc, #52]	@ (8009a38 <HAL_TIM_Base_MspInit+0x44>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d113      	bne.n	8009a2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009a06:	4b0d      	ldr	r3, [pc, #52]	@ (8009a3c <HAL_TIM_Base_MspInit+0x48>)
 8009a08:	699b      	ldr	r3, [r3, #24]
 8009a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8009a3c <HAL_TIM_Base_MspInit+0x48>)
 8009a0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009a10:	6193      	str	r3, [r2, #24]
 8009a12:	4b0a      	ldr	r3, [pc, #40]	@ (8009a3c <HAL_TIM_Base_MspInit+0x48>)
 8009a14:	699b      	ldr	r3, [r3, #24]
 8009a16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a1a:	60fb      	str	r3, [r7, #12]
 8009a1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8009a1e:	2200      	movs	r2, #0
 8009a20:	2100      	movs	r1, #0
 8009a22:	2019      	movs	r0, #25
 8009a24:	f000 fb5b 	bl	800a0de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8009a28:	2019      	movs	r0, #25
 8009a2a:	f000 fb74 	bl	800a116 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8009a2e:	bf00      	nop
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	40012c00 	.word	0x40012c00
 8009a3c:	40021000 	.word	0x40021000

08009a40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b088      	sub	sp, #32
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a48:	f107 0310 	add.w	r3, r7, #16
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	601a      	str	r2, [r3, #0]
 8009a50:	605a      	str	r2, [r3, #4]
 8009a52:	609a      	str	r2, [r3, #8]
 8009a54:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a20      	ldr	r2, [pc, #128]	@ (8009adc <HAL_UART_MspInit+0x9c>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d139      	bne.n	8009ad4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009a60:	4b1f      	ldr	r3, [pc, #124]	@ (8009ae0 <HAL_UART_MspInit+0xa0>)
 8009a62:	699b      	ldr	r3, [r3, #24]
 8009a64:	4a1e      	ldr	r2, [pc, #120]	@ (8009ae0 <HAL_UART_MspInit+0xa0>)
 8009a66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009a6a:	6193      	str	r3, [r2, #24]
 8009a6c:	4b1c      	ldr	r3, [pc, #112]	@ (8009ae0 <HAL_UART_MspInit+0xa0>)
 8009a6e:	699b      	ldr	r3, [r3, #24]
 8009a70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a74:	60fb      	str	r3, [r7, #12]
 8009a76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a78:	4b19      	ldr	r3, [pc, #100]	@ (8009ae0 <HAL_UART_MspInit+0xa0>)
 8009a7a:	699b      	ldr	r3, [r3, #24]
 8009a7c:	4a18      	ldr	r2, [pc, #96]	@ (8009ae0 <HAL_UART_MspInit+0xa0>)
 8009a7e:	f043 0304 	orr.w	r3, r3, #4
 8009a82:	6193      	str	r3, [r2, #24]
 8009a84:	4b16      	ldr	r3, [pc, #88]	@ (8009ae0 <HAL_UART_MspInit+0xa0>)
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	f003 0304 	and.w	r3, r3, #4
 8009a8c:	60bb      	str	r3, [r7, #8]
 8009a8e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009a90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009a94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a96:	2302      	movs	r3, #2
 8009a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a9e:	f107 0310 	add.w	r3, r7, #16
 8009aa2:	4619      	mov	r1, r3
 8009aa4:	480f      	ldr	r0, [pc, #60]	@ (8009ae4 <HAL_UART_MspInit+0xa4>)
 8009aa6:	f000 fc9f 	bl	800a3e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009aaa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009aae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ab8:	f107 0310 	add.w	r3, r7, #16
 8009abc:	4619      	mov	r1, r3
 8009abe:	4809      	ldr	r0, [pc, #36]	@ (8009ae4 <HAL_UART_MspInit+0xa4>)
 8009ac0:	f000 fc92 	bl	800a3e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	2100      	movs	r1, #0
 8009ac8:	2025      	movs	r0, #37	@ 0x25
 8009aca:	f000 fb08 	bl	800a0de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009ace:	2025      	movs	r0, #37	@ 0x25
 8009ad0:	f000 fb21 	bl	800a116 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8009ad4:	bf00      	nop
 8009ad6:	3720      	adds	r7, #32
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	40013800 	.word	0x40013800
 8009ae0:	40021000 	.word	0x40021000
 8009ae4:	40010800 	.word	0x40010800

08009ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009aec:	bf00      	nop
 8009aee:	e7fd      	b.n	8009aec <NMI_Handler+0x4>

08009af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009af0:	b480      	push	{r7}
 8009af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009af4:	bf00      	nop
 8009af6:	e7fd      	b.n	8009af4 <HardFault_Handler+0x4>

08009af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009af8:	b480      	push	{r7}
 8009afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009afc:	bf00      	nop
 8009afe:	e7fd      	b.n	8009afc <MemManage_Handler+0x4>

08009b00 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009b00:	b480      	push	{r7}
 8009b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009b04:	bf00      	nop
 8009b06:	e7fd      	b.n	8009b04 <BusFault_Handler+0x4>

08009b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009b0c:	bf00      	nop
 8009b0e:	e7fd      	b.n	8009b0c <UsageFault_Handler+0x4>

08009b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009b10:	b480      	push	{r7}
 8009b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009b14:	bf00      	nop
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bc80      	pop	{r7}
 8009b1a:	4770      	bx	lr

08009b1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009b20:	bf00      	nop
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bc80      	pop	{r7}
 8009b26:	4770      	bx	lr

08009b28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009b2c:	bf00      	nop
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bc80      	pop	{r7}
 8009b32:	4770      	bx	lr

08009b34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009b38:	f000 f8be 	bl	8009cb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009b3c:	bf00      	nop
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009b44:	4802      	ldr	r0, [pc, #8]	@ (8009b50 <TIM1_UP_IRQHandler+0x10>)
 8009b46:	f002 fdd9 	bl	800c6fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8009b4a:	bf00      	nop
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	20001e98 	.word	0x20001e98

08009b54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009b58:	4802      	ldr	r0, [pc, #8]	@ (8009b64 <USART1_IRQHandler+0x10>)
 8009b5a:	f003 fc65 	bl	800d428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009b5e:	bf00      	nop
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	20001ee0 	.word	0x20001ee0

08009b68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b086      	sub	sp, #24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009b70:	4a14      	ldr	r2, [pc, #80]	@ (8009bc4 <_sbrk+0x5c>)
 8009b72:	4b15      	ldr	r3, [pc, #84]	@ (8009bc8 <_sbrk+0x60>)
 8009b74:	1ad3      	subs	r3, r2, r3
 8009b76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009b7c:	4b13      	ldr	r3, [pc, #76]	@ (8009bcc <_sbrk+0x64>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d102      	bne.n	8009b8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009b84:	4b11      	ldr	r3, [pc, #68]	@ (8009bcc <_sbrk+0x64>)
 8009b86:	4a12      	ldr	r2, [pc, #72]	@ (8009bd0 <_sbrk+0x68>)
 8009b88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009b8a:	4b10      	ldr	r3, [pc, #64]	@ (8009bcc <_sbrk+0x64>)
 8009b8c:	681a      	ldr	r2, [r3, #0]
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	4413      	add	r3, r2
 8009b92:	693a      	ldr	r2, [r7, #16]
 8009b94:	429a      	cmp	r2, r3
 8009b96:	d207      	bcs.n	8009ba8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009b98:	f004 fb8a 	bl	800e2b0 <__errno>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	220c      	movs	r2, #12
 8009ba0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009ba2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009ba6:	e009      	b.n	8009bbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009ba8:	4b08      	ldr	r3, [pc, #32]	@ (8009bcc <_sbrk+0x64>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009bae:	4b07      	ldr	r3, [pc, #28]	@ (8009bcc <_sbrk+0x64>)
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	4a05      	ldr	r2, [pc, #20]	@ (8009bcc <_sbrk+0x64>)
 8009bb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009bba:	68fb      	ldr	r3, [r7, #12]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3718      	adds	r7, #24
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	2000c000 	.word	0x2000c000
 8009bc8:	00000400 	.word	0x00000400
 8009bcc:	20001f28 	.word	0x20001f28
 8009bd0:	20002078 	.word	0x20002078

08009bd4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009bd8:	bf00      	nop
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bc80      	pop	{r7}
 8009bde:	4770      	bx	lr

08009be0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009be0:	480c      	ldr	r0, [pc, #48]	@ (8009c14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009be2:	490d      	ldr	r1, [pc, #52]	@ (8009c18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009be4:	4a0d      	ldr	r2, [pc, #52]	@ (8009c1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009be6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009be8:	e002      	b.n	8009bf0 <LoopCopyDataInit>

08009bea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009bea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009bec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009bee:	3304      	adds	r3, #4

08009bf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009bf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009bf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009bf4:	d3f9      	bcc.n	8009bea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8009c20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009bf8:	4c0a      	ldr	r4, [pc, #40]	@ (8009c24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009bfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009bfc:	e001      	b.n	8009c02 <LoopFillZerobss>

08009bfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009bfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009c00:	3204      	adds	r2, #4

08009c02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009c02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009c04:	d3fb      	bcc.n	8009bfe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009c06:	f7ff ffe5 	bl	8009bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009c0a:	f004 fb57 	bl	800e2bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009c0e:	f7ff fb99 	bl	8009344 <main>
  bx lr
 8009c12:	4770      	bx	lr
  ldr r0, =_sdata
 8009c14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009c18:	20000fd0 	.word	0x20000fd0
  ldr r2, =_sidata
 8009c1c:	0800f87c 	.word	0x0800f87c
  ldr r2, =_sbss
 8009c20:	20000fd0 	.word	0x20000fd0
  ldr r4, =_ebss
 8009c24:	20002078 	.word	0x20002078

08009c28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009c28:	e7fe      	b.n	8009c28 <ADC1_2_IRQHandler>
	...

08009c2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009c30:	4b08      	ldr	r3, [pc, #32]	@ (8009c54 <HAL_Init+0x28>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a07      	ldr	r2, [pc, #28]	@ (8009c54 <HAL_Init+0x28>)
 8009c36:	f043 0310 	orr.w	r3, r3, #16
 8009c3a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009c3c:	2003      	movs	r0, #3
 8009c3e:	f000 fa43 	bl	800a0c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009c42:	200f      	movs	r0, #15
 8009c44:	f000 f808 	bl	8009c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009c48:	f7ff fdf6 	bl	8009838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009c4c:	2300      	movs	r3, #0
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	bd80      	pop	{r7, pc}
 8009c52:	bf00      	nop
 8009c54:	40022000 	.word	0x40022000

08009c58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009c60:	4b12      	ldr	r3, [pc, #72]	@ (8009cac <HAL_InitTick+0x54>)
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	4b12      	ldr	r3, [pc, #72]	@ (8009cb0 <HAL_InitTick+0x58>)
 8009c66:	781b      	ldrb	r3, [r3, #0]
 8009c68:	4619      	mov	r1, r3
 8009c6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009c6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c76:	4618      	mov	r0, r3
 8009c78:	f000 fa5b 	bl	800a132 <HAL_SYSTICK_Config>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d001      	beq.n	8009c86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009c82:	2301      	movs	r3, #1
 8009c84:	e00e      	b.n	8009ca4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2b0f      	cmp	r3, #15
 8009c8a:	d80a      	bhi.n	8009ca2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	6879      	ldr	r1, [r7, #4]
 8009c90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c94:	f000 fa23 	bl	800a0de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009c98:	4a06      	ldr	r2, [pc, #24]	@ (8009cb4 <HAL_InitTick+0x5c>)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	e000      	b.n	8009ca4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
}
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	3708      	adds	r7, #8
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bd80      	pop	{r7, pc}
 8009cac:	20000f74 	.word	0x20000f74
 8009cb0:	20000f7c 	.word	0x20000f7c
 8009cb4:	20000f78 	.word	0x20000f78

08009cb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009cbc:	4b05      	ldr	r3, [pc, #20]	@ (8009cd4 <HAL_IncTick+0x1c>)
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	4b05      	ldr	r3, [pc, #20]	@ (8009cd8 <HAL_IncTick+0x20>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4413      	add	r3, r2
 8009cc8:	4a03      	ldr	r2, [pc, #12]	@ (8009cd8 <HAL_IncTick+0x20>)
 8009cca:	6013      	str	r3, [r2, #0]
}
 8009ccc:	bf00      	nop
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bc80      	pop	{r7}
 8009cd2:	4770      	bx	lr
 8009cd4:	20000f7c 	.word	0x20000f7c
 8009cd8:	20001f2c 	.word	0x20001f2c

08009cdc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	af00      	add	r7, sp, #0
  return uwTick;
 8009ce0:	4b02      	ldr	r3, [pc, #8]	@ (8009cec <HAL_GetTick+0x10>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bc80      	pop	{r7}
 8009cea:	4770      	bx	lr
 8009cec:	20001f2c 	.word	0x20001f2c

08009cf0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009cf8:	f7ff fff0 	bl	8009cdc <HAL_GetTick>
 8009cfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d08:	d005      	beq.n	8009d16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8009d34 <HAL_Delay+0x44>)
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	461a      	mov	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	4413      	add	r3, r2
 8009d14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009d16:	bf00      	nop
 8009d18:	f7ff ffe0 	bl	8009cdc <HAL_GetTick>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d8f7      	bhi.n	8009d18 <HAL_Delay+0x28>
  {
  }
}
 8009d28:	bf00      	nop
 8009d2a:	bf00      	nop
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	20000f7c 	.word	0x20000f7c

08009d38 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d101      	bne.n	8009d4a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e0ed      	b.n	8009f26 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d102      	bne.n	8009d5c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f7ff fda0 	bl	800989c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f042 0201 	orr.w	r2, r2, #1
 8009d6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009d6c:	f7ff ffb6 	bl	8009cdc <HAL_GetTick>
 8009d70:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009d72:	e012      	b.n	8009d9a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009d74:	f7ff ffb2 	bl	8009cdc <HAL_GetTick>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	2b0a      	cmp	r3, #10
 8009d80:	d90b      	bls.n	8009d9a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d86:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2205      	movs	r2, #5
 8009d92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	e0c5      	b.n	8009f26 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	f003 0301 	and.w	r3, r3, #1
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d0e5      	beq.n	8009d74 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f022 0202 	bic.w	r2, r2, #2
 8009db6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009db8:	f7ff ff90 	bl	8009cdc <HAL_GetTick>
 8009dbc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009dbe:	e012      	b.n	8009de6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009dc0:	f7ff ff8c 	bl	8009cdc <HAL_GetTick>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	1ad3      	subs	r3, r2, r3
 8009dca:	2b0a      	cmp	r3, #10
 8009dcc:	d90b      	bls.n	8009de6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009dd2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2205      	movs	r2, #5
 8009dde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	e09f      	b.n	8009f26 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	f003 0302 	and.w	r3, r3, #2
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d1e5      	bne.n	8009dc0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	7e1b      	ldrb	r3, [r3, #24]
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d108      	bne.n	8009e0e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009e0a:	601a      	str	r2, [r3, #0]
 8009e0c:	e007      	b.n	8009e1e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009e1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	7e5b      	ldrb	r3, [r3, #25]
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d108      	bne.n	8009e38 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e34:	601a      	str	r2, [r3, #0]
 8009e36:	e007      	b.n	8009e48 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009e46:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	7e9b      	ldrb	r3, [r3, #26]
 8009e4c:	2b01      	cmp	r3, #1
 8009e4e:	d108      	bne.n	8009e62 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f042 0220 	orr.w	r2, r2, #32
 8009e5e:	601a      	str	r2, [r3, #0]
 8009e60:	e007      	b.n	8009e72 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	681a      	ldr	r2, [r3, #0]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f022 0220 	bic.w	r2, r2, #32
 8009e70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	7edb      	ldrb	r3, [r3, #27]
 8009e76:	2b01      	cmp	r3, #1
 8009e78:	d108      	bne.n	8009e8c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f022 0210 	bic.w	r2, r2, #16
 8009e88:	601a      	str	r2, [r3, #0]
 8009e8a:	e007      	b.n	8009e9c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f042 0210 	orr.w	r2, r2, #16
 8009e9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	7f1b      	ldrb	r3, [r3, #28]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d108      	bne.n	8009eb6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f042 0208 	orr.w	r2, r2, #8
 8009eb2:	601a      	str	r2, [r3, #0]
 8009eb4:	e007      	b.n	8009ec6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f022 0208 	bic.w	r2, r2, #8
 8009ec4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	7f5b      	ldrb	r3, [r3, #29]
 8009eca:	2b01      	cmp	r3, #1
 8009ecc:	d108      	bne.n	8009ee0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f042 0204 	orr.w	r2, r2, #4
 8009edc:	601a      	str	r2, [r3, #0]
 8009ede:	e007      	b.n	8009ef0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f022 0204 	bic.w	r2, r2, #4
 8009eee:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	689a      	ldr	r2, [r3, #8]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	431a      	orrs	r2, r3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	691b      	ldr	r3, [r3, #16]
 8009efe:	431a      	orrs	r2, r3
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	695b      	ldr	r3, [r3, #20]
 8009f04:	ea42 0103 	orr.w	r1, r2, r3
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	1e5a      	subs	r2, r3, #1
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	430a      	orrs	r2, r1
 8009f14:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2201      	movs	r2, #1
 8009f20:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
	...

08009f30 <__NVIC_SetPriorityGrouping>:
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f003 0307 	and.w	r3, r3, #7
 8009f3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009f40:	4b0c      	ldr	r3, [pc, #48]	@ (8009f74 <__NVIC_SetPriorityGrouping+0x44>)
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009f46:	68ba      	ldr	r2, [r7, #8]
 8009f48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009f4c:	4013      	ands	r3, r2
 8009f4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009f58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009f5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009f62:	4a04      	ldr	r2, [pc, #16]	@ (8009f74 <__NVIC_SetPriorityGrouping+0x44>)
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	60d3      	str	r3, [r2, #12]
}
 8009f68:	bf00      	nop
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bc80      	pop	{r7}
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	e000ed00 	.word	0xe000ed00

08009f78 <__NVIC_GetPriorityGrouping>:
{
 8009f78:	b480      	push	{r7}
 8009f7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009f7c:	4b04      	ldr	r3, [pc, #16]	@ (8009f90 <__NVIC_GetPriorityGrouping+0x18>)
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	0a1b      	lsrs	r3, r3, #8
 8009f82:	f003 0307 	and.w	r3, r3, #7
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bc80      	pop	{r7}
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	e000ed00 	.word	0xe000ed00

08009f94 <__NVIC_EnableIRQ>:
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	db0b      	blt.n	8009fbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009fa6:	79fb      	ldrb	r3, [r7, #7]
 8009fa8:	f003 021f 	and.w	r2, r3, #31
 8009fac:	4906      	ldr	r1, [pc, #24]	@ (8009fc8 <__NVIC_EnableIRQ+0x34>)
 8009fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fb2:	095b      	lsrs	r3, r3, #5
 8009fb4:	2001      	movs	r0, #1
 8009fb6:	fa00 f202 	lsl.w	r2, r0, r2
 8009fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009fbe:	bf00      	nop
 8009fc0:	370c      	adds	r7, #12
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bc80      	pop	{r7}
 8009fc6:	4770      	bx	lr
 8009fc8:	e000e100 	.word	0xe000e100

08009fcc <__NVIC_SetPriority>:
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b083      	sub	sp, #12
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	6039      	str	r1, [r7, #0]
 8009fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	db0a      	blt.n	8009ff6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	b2da      	uxtb	r2, r3
 8009fe4:	490c      	ldr	r1, [pc, #48]	@ (800a018 <__NVIC_SetPriority+0x4c>)
 8009fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fea:	0112      	lsls	r2, r2, #4
 8009fec:	b2d2      	uxtb	r2, r2
 8009fee:	440b      	add	r3, r1
 8009ff0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009ff4:	e00a      	b.n	800a00c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	b2da      	uxtb	r2, r3
 8009ffa:	4908      	ldr	r1, [pc, #32]	@ (800a01c <__NVIC_SetPriority+0x50>)
 8009ffc:	79fb      	ldrb	r3, [r7, #7]
 8009ffe:	f003 030f 	and.w	r3, r3, #15
 800a002:	3b04      	subs	r3, #4
 800a004:	0112      	lsls	r2, r2, #4
 800a006:	b2d2      	uxtb	r2, r2
 800a008:	440b      	add	r3, r1
 800a00a:	761a      	strb	r2, [r3, #24]
}
 800a00c:	bf00      	nop
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	bc80      	pop	{r7}
 800a014:	4770      	bx	lr
 800a016:	bf00      	nop
 800a018:	e000e100 	.word	0xe000e100
 800a01c:	e000ed00 	.word	0xe000ed00

0800a020 <NVIC_EncodePriority>:
{
 800a020:	b480      	push	{r7}
 800a022:	b089      	sub	sp, #36	@ 0x24
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f003 0307 	and.w	r3, r3, #7
 800a032:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	f1c3 0307 	rsb	r3, r3, #7
 800a03a:	2b04      	cmp	r3, #4
 800a03c:	bf28      	it	cs
 800a03e:	2304      	movcs	r3, #4
 800a040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	3304      	adds	r3, #4
 800a046:	2b06      	cmp	r3, #6
 800a048:	d902      	bls.n	800a050 <NVIC_EncodePriority+0x30>
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	3b03      	subs	r3, #3
 800a04e:	e000      	b.n	800a052 <NVIC_EncodePriority+0x32>
 800a050:	2300      	movs	r3, #0
 800a052:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a054:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a058:	69bb      	ldr	r3, [r7, #24]
 800a05a:	fa02 f303 	lsl.w	r3, r2, r3
 800a05e:	43da      	mvns	r2, r3
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	401a      	ands	r2, r3
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a068:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	fa01 f303 	lsl.w	r3, r1, r3
 800a072:	43d9      	mvns	r1, r3
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a078:	4313      	orrs	r3, r2
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3724      	adds	r7, #36	@ 0x24
 800a07e:	46bd      	mov	sp, r7
 800a080:	bc80      	pop	{r7}
 800a082:	4770      	bx	lr

0800a084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b082      	sub	sp, #8
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	3b01      	subs	r3, #1
 800a090:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a094:	d301      	bcc.n	800a09a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a096:	2301      	movs	r3, #1
 800a098:	e00f      	b.n	800a0ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a09a:	4a0a      	ldr	r2, [pc, #40]	@ (800a0c4 <SysTick_Config+0x40>)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a0a2:	210f      	movs	r1, #15
 800a0a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a0a8:	f7ff ff90 	bl	8009fcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a0ac:	4b05      	ldr	r3, [pc, #20]	@ (800a0c4 <SysTick_Config+0x40>)
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a0b2:	4b04      	ldr	r3, [pc, #16]	@ (800a0c4 <SysTick_Config+0x40>)
 800a0b4:	2207      	movs	r2, #7
 800a0b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a0b8:	2300      	movs	r3, #0
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	3708      	adds	r7, #8
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}
 800a0c2:	bf00      	nop
 800a0c4:	e000e010 	.word	0xe000e010

0800a0c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f7ff ff2d 	bl	8009f30 <__NVIC_SetPriorityGrouping>
}
 800a0d6:	bf00      	nop
 800a0d8:	3708      	adds	r7, #8
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b086      	sub	sp, #24
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	60b9      	str	r1, [r7, #8]
 800a0e8:	607a      	str	r2, [r7, #4]
 800a0ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a0f0:	f7ff ff42 	bl	8009f78 <__NVIC_GetPriorityGrouping>
 800a0f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	68b9      	ldr	r1, [r7, #8]
 800a0fa:	6978      	ldr	r0, [r7, #20]
 800a0fc:	f7ff ff90 	bl	800a020 <NVIC_EncodePriority>
 800a100:	4602      	mov	r2, r0
 800a102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a106:	4611      	mov	r1, r2
 800a108:	4618      	mov	r0, r3
 800a10a:	f7ff ff5f 	bl	8009fcc <__NVIC_SetPriority>
}
 800a10e:	bf00      	nop
 800a110:	3718      	adds	r7, #24
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b082      	sub	sp, #8
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	4603      	mov	r3, r0
 800a11e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a124:	4618      	mov	r0, r3
 800a126:	f7ff ff35 	bl	8009f94 <__NVIC_EnableIRQ>
}
 800a12a:	bf00      	nop
 800a12c:	3708      	adds	r7, #8
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}

0800a132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a132:	b580      	push	{r7, lr}
 800a134:	b082      	sub	sp, #8
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7ff ffa2 	bl	800a084 <SysTick_Config>
 800a140:	4603      	mov	r3, r0
}
 800a142:	4618      	mov	r0, r3
 800a144:	3708      	adds	r7, #8
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a14a:	b480      	push	{r7}
 800a14c:	b085      	sub	sp, #20
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a152:	2300      	movs	r3, #0
 800a154:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d008      	beq.n	800a174 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2204      	movs	r2, #4
 800a166:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	e020      	b.n	800a1b6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	681a      	ldr	r2, [r3, #0]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f022 020e 	bic.w	r2, r2, #14
 800a182:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f022 0201 	bic.w	r2, r2, #1
 800a192:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a19c:	2101      	movs	r1, #1
 800a19e:	fa01 f202 	lsl.w	r2, r1, r2
 800a1a2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800a1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3714      	adds	r7, #20
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bc80      	pop	{r7}
 800a1be:	4770      	bx	lr

0800a1c0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	d005      	beq.n	800a1e4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2204      	movs	r2, #4
 800a1dc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	73fb      	strb	r3, [r7, #15]
 800a1e2:	e0d6      	b.n	800a392 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f022 020e 	bic.w	r2, r2, #14
 800a1f2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	f022 0201 	bic.w	r2, r2, #1
 800a202:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	461a      	mov	r2, r3
 800a20a:	4b64      	ldr	r3, [pc, #400]	@ (800a39c <HAL_DMA_Abort_IT+0x1dc>)
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d958      	bls.n	800a2c2 <HAL_DMA_Abort_IT+0x102>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	4a62      	ldr	r2, [pc, #392]	@ (800a3a0 <HAL_DMA_Abort_IT+0x1e0>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d04f      	beq.n	800a2ba <HAL_DMA_Abort_IT+0xfa>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a61      	ldr	r2, [pc, #388]	@ (800a3a4 <HAL_DMA_Abort_IT+0x1e4>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d048      	beq.n	800a2b6 <HAL_DMA_Abort_IT+0xf6>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a5f      	ldr	r2, [pc, #380]	@ (800a3a8 <HAL_DMA_Abort_IT+0x1e8>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d040      	beq.n	800a2b0 <HAL_DMA_Abort_IT+0xf0>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a5e      	ldr	r2, [pc, #376]	@ (800a3ac <HAL_DMA_Abort_IT+0x1ec>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d038      	beq.n	800a2aa <HAL_DMA_Abort_IT+0xea>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a5c      	ldr	r2, [pc, #368]	@ (800a3b0 <HAL_DMA_Abort_IT+0x1f0>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d030      	beq.n	800a2a4 <HAL_DMA_Abort_IT+0xe4>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a5b      	ldr	r2, [pc, #364]	@ (800a3b4 <HAL_DMA_Abort_IT+0x1f4>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d028      	beq.n	800a29e <HAL_DMA_Abort_IT+0xde>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a52      	ldr	r2, [pc, #328]	@ (800a39c <HAL_DMA_Abort_IT+0x1dc>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d020      	beq.n	800a298 <HAL_DMA_Abort_IT+0xd8>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	4a57      	ldr	r2, [pc, #348]	@ (800a3b8 <HAL_DMA_Abort_IT+0x1f8>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d019      	beq.n	800a294 <HAL_DMA_Abort_IT+0xd4>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a55      	ldr	r2, [pc, #340]	@ (800a3bc <HAL_DMA_Abort_IT+0x1fc>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d012      	beq.n	800a290 <HAL_DMA_Abort_IT+0xd0>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a54      	ldr	r2, [pc, #336]	@ (800a3c0 <HAL_DMA_Abort_IT+0x200>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d00a      	beq.n	800a28a <HAL_DMA_Abort_IT+0xca>
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4a52      	ldr	r2, [pc, #328]	@ (800a3c4 <HAL_DMA_Abort_IT+0x204>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d102      	bne.n	800a284 <HAL_DMA_Abort_IT+0xc4>
 800a27e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a282:	e01b      	b.n	800a2bc <HAL_DMA_Abort_IT+0xfc>
 800a284:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a288:	e018      	b.n	800a2bc <HAL_DMA_Abort_IT+0xfc>
 800a28a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a28e:	e015      	b.n	800a2bc <HAL_DMA_Abort_IT+0xfc>
 800a290:	2310      	movs	r3, #16
 800a292:	e013      	b.n	800a2bc <HAL_DMA_Abort_IT+0xfc>
 800a294:	2301      	movs	r3, #1
 800a296:	e011      	b.n	800a2bc <HAL_DMA_Abort_IT+0xfc>
 800a298:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a29c:	e00e      	b.n	800a2bc <HAL_DMA_Abort_IT+0xfc>
 800a29e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a2a2:	e00b      	b.n	800a2bc <HAL_DMA_Abort_IT+0xfc>
 800a2a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a2a8:	e008      	b.n	800a2bc <HAL_DMA_Abort_IT+0xfc>
 800a2aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a2ae:	e005      	b.n	800a2bc <HAL_DMA_Abort_IT+0xfc>
 800a2b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a2b4:	e002      	b.n	800a2bc <HAL_DMA_Abort_IT+0xfc>
 800a2b6:	2310      	movs	r3, #16
 800a2b8:	e000      	b.n	800a2bc <HAL_DMA_Abort_IT+0xfc>
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	4a42      	ldr	r2, [pc, #264]	@ (800a3c8 <HAL_DMA_Abort_IT+0x208>)
 800a2be:	6053      	str	r3, [r2, #4]
 800a2c0:	e057      	b.n	800a372 <HAL_DMA_Abort_IT+0x1b2>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4a36      	ldr	r2, [pc, #216]	@ (800a3a0 <HAL_DMA_Abort_IT+0x1e0>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d04f      	beq.n	800a36c <HAL_DMA_Abort_IT+0x1ac>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4a34      	ldr	r2, [pc, #208]	@ (800a3a4 <HAL_DMA_Abort_IT+0x1e4>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d048      	beq.n	800a368 <HAL_DMA_Abort_IT+0x1a8>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	4a33      	ldr	r2, [pc, #204]	@ (800a3a8 <HAL_DMA_Abort_IT+0x1e8>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d040      	beq.n	800a362 <HAL_DMA_Abort_IT+0x1a2>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4a31      	ldr	r2, [pc, #196]	@ (800a3ac <HAL_DMA_Abort_IT+0x1ec>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d038      	beq.n	800a35c <HAL_DMA_Abort_IT+0x19c>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	4a30      	ldr	r2, [pc, #192]	@ (800a3b0 <HAL_DMA_Abort_IT+0x1f0>)
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d030      	beq.n	800a356 <HAL_DMA_Abort_IT+0x196>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a2e      	ldr	r2, [pc, #184]	@ (800a3b4 <HAL_DMA_Abort_IT+0x1f4>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d028      	beq.n	800a350 <HAL_DMA_Abort_IT+0x190>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a26      	ldr	r2, [pc, #152]	@ (800a39c <HAL_DMA_Abort_IT+0x1dc>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d020      	beq.n	800a34a <HAL_DMA_Abort_IT+0x18a>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a2a      	ldr	r2, [pc, #168]	@ (800a3b8 <HAL_DMA_Abort_IT+0x1f8>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d019      	beq.n	800a346 <HAL_DMA_Abort_IT+0x186>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4a29      	ldr	r2, [pc, #164]	@ (800a3bc <HAL_DMA_Abort_IT+0x1fc>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d012      	beq.n	800a342 <HAL_DMA_Abort_IT+0x182>
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	4a27      	ldr	r2, [pc, #156]	@ (800a3c0 <HAL_DMA_Abort_IT+0x200>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d00a      	beq.n	800a33c <HAL_DMA_Abort_IT+0x17c>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	4a26      	ldr	r2, [pc, #152]	@ (800a3c4 <HAL_DMA_Abort_IT+0x204>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d102      	bne.n	800a336 <HAL_DMA_Abort_IT+0x176>
 800a330:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a334:	e01b      	b.n	800a36e <HAL_DMA_Abort_IT+0x1ae>
 800a336:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a33a:	e018      	b.n	800a36e <HAL_DMA_Abort_IT+0x1ae>
 800a33c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a340:	e015      	b.n	800a36e <HAL_DMA_Abort_IT+0x1ae>
 800a342:	2310      	movs	r3, #16
 800a344:	e013      	b.n	800a36e <HAL_DMA_Abort_IT+0x1ae>
 800a346:	2301      	movs	r3, #1
 800a348:	e011      	b.n	800a36e <HAL_DMA_Abort_IT+0x1ae>
 800a34a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a34e:	e00e      	b.n	800a36e <HAL_DMA_Abort_IT+0x1ae>
 800a350:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a354:	e00b      	b.n	800a36e <HAL_DMA_Abort_IT+0x1ae>
 800a356:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a35a:	e008      	b.n	800a36e <HAL_DMA_Abort_IT+0x1ae>
 800a35c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a360:	e005      	b.n	800a36e <HAL_DMA_Abort_IT+0x1ae>
 800a362:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a366:	e002      	b.n	800a36e <HAL_DMA_Abort_IT+0x1ae>
 800a368:	2310      	movs	r3, #16
 800a36a:	e000      	b.n	800a36e <HAL_DMA_Abort_IT+0x1ae>
 800a36c:	2301      	movs	r3, #1
 800a36e:	4a17      	ldr	r2, [pc, #92]	@ (800a3cc <HAL_DMA_Abort_IT+0x20c>)
 800a370:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2201      	movs	r2, #1
 800a376:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2200      	movs	r2, #0
 800a37e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a386:	2b00      	cmp	r3, #0
 800a388:	d003      	beq.n	800a392 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	4798      	blx	r3
    } 
  }
  return status;
 800a392:	7bfb      	ldrb	r3, [r7, #15]
}
 800a394:	4618      	mov	r0, r3
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	40020080 	.word	0x40020080
 800a3a0:	40020008 	.word	0x40020008
 800a3a4:	4002001c 	.word	0x4002001c
 800a3a8:	40020030 	.word	0x40020030
 800a3ac:	40020044 	.word	0x40020044
 800a3b0:	40020058 	.word	0x40020058
 800a3b4:	4002006c 	.word	0x4002006c
 800a3b8:	40020408 	.word	0x40020408
 800a3bc:	4002041c 	.word	0x4002041c
 800a3c0:	40020430 	.word	0x40020430
 800a3c4:	40020444 	.word	0x40020444
 800a3c8:	40020400 	.word	0x40020400
 800a3cc:	40020000 	.word	0x40020000

0800a3d0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	370c      	adds	r7, #12
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bc80      	pop	{r7}
 800a3e4:	4770      	bx	lr
	...

0800a3e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b08b      	sub	sp, #44	@ 0x2c
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a3fa:	e179      	b.n	800a6f0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a400:	fa02 f303 	lsl.w	r3, r2, r3
 800a404:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	69fa      	ldr	r2, [r7, #28]
 800a40c:	4013      	ands	r3, r2
 800a40e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800a410:	69ba      	ldr	r2, [r7, #24]
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	429a      	cmp	r2, r3
 800a416:	f040 8168 	bne.w	800a6ea <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	4a96      	ldr	r2, [pc, #600]	@ (800a678 <HAL_GPIO_Init+0x290>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d05e      	beq.n	800a4e2 <HAL_GPIO_Init+0xfa>
 800a424:	4a94      	ldr	r2, [pc, #592]	@ (800a678 <HAL_GPIO_Init+0x290>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d875      	bhi.n	800a516 <HAL_GPIO_Init+0x12e>
 800a42a:	4a94      	ldr	r2, [pc, #592]	@ (800a67c <HAL_GPIO_Init+0x294>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d058      	beq.n	800a4e2 <HAL_GPIO_Init+0xfa>
 800a430:	4a92      	ldr	r2, [pc, #584]	@ (800a67c <HAL_GPIO_Init+0x294>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d86f      	bhi.n	800a516 <HAL_GPIO_Init+0x12e>
 800a436:	4a92      	ldr	r2, [pc, #584]	@ (800a680 <HAL_GPIO_Init+0x298>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d052      	beq.n	800a4e2 <HAL_GPIO_Init+0xfa>
 800a43c:	4a90      	ldr	r2, [pc, #576]	@ (800a680 <HAL_GPIO_Init+0x298>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d869      	bhi.n	800a516 <HAL_GPIO_Init+0x12e>
 800a442:	4a90      	ldr	r2, [pc, #576]	@ (800a684 <HAL_GPIO_Init+0x29c>)
 800a444:	4293      	cmp	r3, r2
 800a446:	d04c      	beq.n	800a4e2 <HAL_GPIO_Init+0xfa>
 800a448:	4a8e      	ldr	r2, [pc, #568]	@ (800a684 <HAL_GPIO_Init+0x29c>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d863      	bhi.n	800a516 <HAL_GPIO_Init+0x12e>
 800a44e:	4a8e      	ldr	r2, [pc, #568]	@ (800a688 <HAL_GPIO_Init+0x2a0>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d046      	beq.n	800a4e2 <HAL_GPIO_Init+0xfa>
 800a454:	4a8c      	ldr	r2, [pc, #560]	@ (800a688 <HAL_GPIO_Init+0x2a0>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d85d      	bhi.n	800a516 <HAL_GPIO_Init+0x12e>
 800a45a:	2b12      	cmp	r3, #18
 800a45c:	d82a      	bhi.n	800a4b4 <HAL_GPIO_Init+0xcc>
 800a45e:	2b12      	cmp	r3, #18
 800a460:	d859      	bhi.n	800a516 <HAL_GPIO_Init+0x12e>
 800a462:	a201      	add	r2, pc, #4	@ (adr r2, 800a468 <HAL_GPIO_Init+0x80>)
 800a464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a468:	0800a4e3 	.word	0x0800a4e3
 800a46c:	0800a4bd 	.word	0x0800a4bd
 800a470:	0800a4cf 	.word	0x0800a4cf
 800a474:	0800a511 	.word	0x0800a511
 800a478:	0800a517 	.word	0x0800a517
 800a47c:	0800a517 	.word	0x0800a517
 800a480:	0800a517 	.word	0x0800a517
 800a484:	0800a517 	.word	0x0800a517
 800a488:	0800a517 	.word	0x0800a517
 800a48c:	0800a517 	.word	0x0800a517
 800a490:	0800a517 	.word	0x0800a517
 800a494:	0800a517 	.word	0x0800a517
 800a498:	0800a517 	.word	0x0800a517
 800a49c:	0800a517 	.word	0x0800a517
 800a4a0:	0800a517 	.word	0x0800a517
 800a4a4:	0800a517 	.word	0x0800a517
 800a4a8:	0800a517 	.word	0x0800a517
 800a4ac:	0800a4c5 	.word	0x0800a4c5
 800a4b0:	0800a4d9 	.word	0x0800a4d9
 800a4b4:	4a75      	ldr	r2, [pc, #468]	@ (800a68c <HAL_GPIO_Init+0x2a4>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d013      	beq.n	800a4e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800a4ba:	e02c      	b.n	800a516 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	623b      	str	r3, [r7, #32]
          break;
 800a4c2:	e029      	b.n	800a518 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	3304      	adds	r3, #4
 800a4ca:	623b      	str	r3, [r7, #32]
          break;
 800a4cc:	e024      	b.n	800a518 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	68db      	ldr	r3, [r3, #12]
 800a4d2:	3308      	adds	r3, #8
 800a4d4:	623b      	str	r3, [r7, #32]
          break;
 800a4d6:	e01f      	b.n	800a518 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	68db      	ldr	r3, [r3, #12]
 800a4dc:	330c      	adds	r3, #12
 800a4de:	623b      	str	r3, [r7, #32]
          break;
 800a4e0:	e01a      	b.n	800a518 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d102      	bne.n	800a4f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a4ea:	2304      	movs	r3, #4
 800a4ec:	623b      	str	r3, [r7, #32]
          break;
 800a4ee:	e013      	b.n	800a518 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d105      	bne.n	800a504 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a4f8:	2308      	movs	r3, #8
 800a4fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	69fa      	ldr	r2, [r7, #28]
 800a500:	611a      	str	r2, [r3, #16]
          break;
 800a502:	e009      	b.n	800a518 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a504:	2308      	movs	r3, #8
 800a506:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	69fa      	ldr	r2, [r7, #28]
 800a50c:	615a      	str	r2, [r3, #20]
          break;
 800a50e:	e003      	b.n	800a518 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800a510:	2300      	movs	r3, #0
 800a512:	623b      	str	r3, [r7, #32]
          break;
 800a514:	e000      	b.n	800a518 <HAL_GPIO_Init+0x130>
          break;
 800a516:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	2bff      	cmp	r3, #255	@ 0xff
 800a51c:	d801      	bhi.n	800a522 <HAL_GPIO_Init+0x13a>
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	e001      	b.n	800a526 <HAL_GPIO_Init+0x13e>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	3304      	adds	r3, #4
 800a526:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	2bff      	cmp	r3, #255	@ 0xff
 800a52c:	d802      	bhi.n	800a534 <HAL_GPIO_Init+0x14c>
 800a52e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	e002      	b.n	800a53a <HAL_GPIO_Init+0x152>
 800a534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a536:	3b08      	subs	r3, #8
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	210f      	movs	r1, #15
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	fa01 f303 	lsl.w	r3, r1, r3
 800a548:	43db      	mvns	r3, r3
 800a54a:	401a      	ands	r2, r3
 800a54c:	6a39      	ldr	r1, [r7, #32]
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	fa01 f303 	lsl.w	r3, r1, r3
 800a554:	431a      	orrs	r2, r3
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a562:	2b00      	cmp	r3, #0
 800a564:	f000 80c1 	beq.w	800a6ea <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a568:	4b49      	ldr	r3, [pc, #292]	@ (800a690 <HAL_GPIO_Init+0x2a8>)
 800a56a:	699b      	ldr	r3, [r3, #24]
 800a56c:	4a48      	ldr	r2, [pc, #288]	@ (800a690 <HAL_GPIO_Init+0x2a8>)
 800a56e:	f043 0301 	orr.w	r3, r3, #1
 800a572:	6193      	str	r3, [r2, #24]
 800a574:	4b46      	ldr	r3, [pc, #280]	@ (800a690 <HAL_GPIO_Init+0x2a8>)
 800a576:	699b      	ldr	r3, [r3, #24]
 800a578:	f003 0301 	and.w	r3, r3, #1
 800a57c:	60bb      	str	r3, [r7, #8]
 800a57e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800a580:	4a44      	ldr	r2, [pc, #272]	@ (800a694 <HAL_GPIO_Init+0x2ac>)
 800a582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a584:	089b      	lsrs	r3, r3, #2
 800a586:	3302      	adds	r3, #2
 800a588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a58c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a590:	f003 0303 	and.w	r3, r3, #3
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	220f      	movs	r2, #15
 800a598:	fa02 f303 	lsl.w	r3, r2, r3
 800a59c:	43db      	mvns	r3, r3
 800a59e:	68fa      	ldr	r2, [r7, #12]
 800a5a0:	4013      	ands	r3, r2
 800a5a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4a3c      	ldr	r2, [pc, #240]	@ (800a698 <HAL_GPIO_Init+0x2b0>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d01f      	beq.n	800a5ec <HAL_GPIO_Init+0x204>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4a3b      	ldr	r2, [pc, #236]	@ (800a69c <HAL_GPIO_Init+0x2b4>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d019      	beq.n	800a5e8 <HAL_GPIO_Init+0x200>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a3a      	ldr	r2, [pc, #232]	@ (800a6a0 <HAL_GPIO_Init+0x2b8>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d013      	beq.n	800a5e4 <HAL_GPIO_Init+0x1fc>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4a39      	ldr	r2, [pc, #228]	@ (800a6a4 <HAL_GPIO_Init+0x2bc>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d00d      	beq.n	800a5e0 <HAL_GPIO_Init+0x1f8>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4a38      	ldr	r2, [pc, #224]	@ (800a6a8 <HAL_GPIO_Init+0x2c0>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	d007      	beq.n	800a5dc <HAL_GPIO_Init+0x1f4>
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4a37      	ldr	r2, [pc, #220]	@ (800a6ac <HAL_GPIO_Init+0x2c4>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d101      	bne.n	800a5d8 <HAL_GPIO_Init+0x1f0>
 800a5d4:	2305      	movs	r3, #5
 800a5d6:	e00a      	b.n	800a5ee <HAL_GPIO_Init+0x206>
 800a5d8:	2306      	movs	r3, #6
 800a5da:	e008      	b.n	800a5ee <HAL_GPIO_Init+0x206>
 800a5dc:	2304      	movs	r3, #4
 800a5de:	e006      	b.n	800a5ee <HAL_GPIO_Init+0x206>
 800a5e0:	2303      	movs	r3, #3
 800a5e2:	e004      	b.n	800a5ee <HAL_GPIO_Init+0x206>
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	e002      	b.n	800a5ee <HAL_GPIO_Init+0x206>
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e000      	b.n	800a5ee <HAL_GPIO_Init+0x206>
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5f0:	f002 0203 	and.w	r2, r2, #3
 800a5f4:	0092      	lsls	r2, r2, #2
 800a5f6:	4093      	lsls	r3, r2
 800a5f8:	68fa      	ldr	r2, [r7, #12]
 800a5fa:	4313      	orrs	r3, r2
 800a5fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a5fe:	4925      	ldr	r1, [pc, #148]	@ (800a694 <HAL_GPIO_Init+0x2ac>)
 800a600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a602:	089b      	lsrs	r3, r3, #2
 800a604:	3302      	adds	r3, #2
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a614:	2b00      	cmp	r3, #0
 800a616:	d006      	beq.n	800a626 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a618:	4b25      	ldr	r3, [pc, #148]	@ (800a6b0 <HAL_GPIO_Init+0x2c8>)
 800a61a:	689a      	ldr	r2, [r3, #8]
 800a61c:	4924      	ldr	r1, [pc, #144]	@ (800a6b0 <HAL_GPIO_Init+0x2c8>)
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	4313      	orrs	r3, r2
 800a622:	608b      	str	r3, [r1, #8]
 800a624:	e006      	b.n	800a634 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a626:	4b22      	ldr	r3, [pc, #136]	@ (800a6b0 <HAL_GPIO_Init+0x2c8>)
 800a628:	689a      	ldr	r2, [r3, #8]
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	43db      	mvns	r3, r3
 800a62e:	4920      	ldr	r1, [pc, #128]	@ (800a6b0 <HAL_GPIO_Init+0x2c8>)
 800a630:	4013      	ands	r3, r2
 800a632:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d006      	beq.n	800a64e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a640:	4b1b      	ldr	r3, [pc, #108]	@ (800a6b0 <HAL_GPIO_Init+0x2c8>)
 800a642:	68da      	ldr	r2, [r3, #12]
 800a644:	491a      	ldr	r1, [pc, #104]	@ (800a6b0 <HAL_GPIO_Init+0x2c8>)
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	4313      	orrs	r3, r2
 800a64a:	60cb      	str	r3, [r1, #12]
 800a64c:	e006      	b.n	800a65c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a64e:	4b18      	ldr	r3, [pc, #96]	@ (800a6b0 <HAL_GPIO_Init+0x2c8>)
 800a650:	68da      	ldr	r2, [r3, #12]
 800a652:	69bb      	ldr	r3, [r7, #24]
 800a654:	43db      	mvns	r3, r3
 800a656:	4916      	ldr	r1, [pc, #88]	@ (800a6b0 <HAL_GPIO_Init+0x2c8>)
 800a658:	4013      	ands	r3, r2
 800a65a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	685b      	ldr	r3, [r3, #4]
 800a660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a664:	2b00      	cmp	r3, #0
 800a666:	d025      	beq.n	800a6b4 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a668:	4b11      	ldr	r3, [pc, #68]	@ (800a6b0 <HAL_GPIO_Init+0x2c8>)
 800a66a:	685a      	ldr	r2, [r3, #4]
 800a66c:	4910      	ldr	r1, [pc, #64]	@ (800a6b0 <HAL_GPIO_Init+0x2c8>)
 800a66e:	69bb      	ldr	r3, [r7, #24]
 800a670:	4313      	orrs	r3, r2
 800a672:	604b      	str	r3, [r1, #4]
 800a674:	e025      	b.n	800a6c2 <HAL_GPIO_Init+0x2da>
 800a676:	bf00      	nop
 800a678:	10320000 	.word	0x10320000
 800a67c:	10310000 	.word	0x10310000
 800a680:	10220000 	.word	0x10220000
 800a684:	10210000 	.word	0x10210000
 800a688:	10120000 	.word	0x10120000
 800a68c:	10110000 	.word	0x10110000
 800a690:	40021000 	.word	0x40021000
 800a694:	40010000 	.word	0x40010000
 800a698:	40010800 	.word	0x40010800
 800a69c:	40010c00 	.word	0x40010c00
 800a6a0:	40011000 	.word	0x40011000
 800a6a4:	40011400 	.word	0x40011400
 800a6a8:	40011800 	.word	0x40011800
 800a6ac:	40011c00 	.word	0x40011c00
 800a6b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a6b4:	4b15      	ldr	r3, [pc, #84]	@ (800a70c <HAL_GPIO_Init+0x324>)
 800a6b6:	685a      	ldr	r2, [r3, #4]
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	43db      	mvns	r3, r3
 800a6bc:	4913      	ldr	r1, [pc, #76]	@ (800a70c <HAL_GPIO_Init+0x324>)
 800a6be:	4013      	ands	r3, r2
 800a6c0:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d006      	beq.n	800a6dc <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a6ce:	4b0f      	ldr	r3, [pc, #60]	@ (800a70c <HAL_GPIO_Init+0x324>)
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	490e      	ldr	r1, [pc, #56]	@ (800a70c <HAL_GPIO_Init+0x324>)
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	600b      	str	r3, [r1, #0]
 800a6da:	e006      	b.n	800a6ea <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a6dc:	4b0b      	ldr	r3, [pc, #44]	@ (800a70c <HAL_GPIO_Init+0x324>)
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	69bb      	ldr	r3, [r7, #24]
 800a6e2:	43db      	mvns	r3, r3
 800a6e4:	4909      	ldr	r1, [pc, #36]	@ (800a70c <HAL_GPIO_Init+0x324>)
 800a6e6:	4013      	ands	r3, r2
 800a6e8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ec:	3301      	adds	r3, #1
 800a6ee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	681a      	ldr	r2, [r3, #0]
 800a6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f6:	fa22 f303 	lsr.w	r3, r2, r3
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f47f ae7e 	bne.w	800a3fc <HAL_GPIO_Init+0x14>
  }
}
 800a700:	bf00      	nop
 800a702:	bf00      	nop
 800a704:	372c      	adds	r7, #44	@ 0x2c
 800a706:	46bd      	mov	sp, r7
 800a708:	bc80      	pop	{r7}
 800a70a:	4770      	bx	lr
 800a70c:	40010400 	.word	0x40010400

0800a710 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a710:	b480      	push	{r7}
 800a712:	b089      	sub	sp, #36	@ 0x24
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a71a:	2300      	movs	r3, #0
 800a71c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800a71e:	e0a6      	b.n	800a86e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a720:	2201      	movs	r2, #1
 800a722:	69fb      	ldr	r3, [r7, #28]
 800a724:	fa02 f303 	lsl.w	r3, r2, r3
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	4013      	ands	r3, r2
 800a72c:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	2b00      	cmp	r3, #0
 800a732:	f000 8099 	beq.w	800a868 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800a736:	4a54      	ldr	r2, [pc, #336]	@ (800a888 <HAL_GPIO_DeInit+0x178>)
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	089b      	lsrs	r3, r3, #2
 800a73c:	3302      	adds	r3, #2
 800a73e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a742:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800a744:	69fb      	ldr	r3, [r7, #28]
 800a746:	f003 0303 	and.w	r3, r3, #3
 800a74a:	009b      	lsls	r3, r3, #2
 800a74c:	220f      	movs	r2, #15
 800a74e:	fa02 f303 	lsl.w	r3, r2, r3
 800a752:	697a      	ldr	r2, [r7, #20]
 800a754:	4013      	ands	r3, r2
 800a756:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a4c      	ldr	r2, [pc, #304]	@ (800a88c <HAL_GPIO_DeInit+0x17c>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d01f      	beq.n	800a7a0 <HAL_GPIO_DeInit+0x90>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a4b      	ldr	r2, [pc, #300]	@ (800a890 <HAL_GPIO_DeInit+0x180>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d019      	beq.n	800a79c <HAL_GPIO_DeInit+0x8c>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a4a      	ldr	r2, [pc, #296]	@ (800a894 <HAL_GPIO_DeInit+0x184>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d013      	beq.n	800a798 <HAL_GPIO_DeInit+0x88>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a49      	ldr	r2, [pc, #292]	@ (800a898 <HAL_GPIO_DeInit+0x188>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d00d      	beq.n	800a794 <HAL_GPIO_DeInit+0x84>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a48      	ldr	r2, [pc, #288]	@ (800a89c <HAL_GPIO_DeInit+0x18c>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d007      	beq.n	800a790 <HAL_GPIO_DeInit+0x80>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a47      	ldr	r2, [pc, #284]	@ (800a8a0 <HAL_GPIO_DeInit+0x190>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d101      	bne.n	800a78c <HAL_GPIO_DeInit+0x7c>
 800a788:	2305      	movs	r3, #5
 800a78a:	e00a      	b.n	800a7a2 <HAL_GPIO_DeInit+0x92>
 800a78c:	2306      	movs	r3, #6
 800a78e:	e008      	b.n	800a7a2 <HAL_GPIO_DeInit+0x92>
 800a790:	2304      	movs	r3, #4
 800a792:	e006      	b.n	800a7a2 <HAL_GPIO_DeInit+0x92>
 800a794:	2303      	movs	r3, #3
 800a796:	e004      	b.n	800a7a2 <HAL_GPIO_DeInit+0x92>
 800a798:	2302      	movs	r3, #2
 800a79a:	e002      	b.n	800a7a2 <HAL_GPIO_DeInit+0x92>
 800a79c:	2301      	movs	r3, #1
 800a79e:	e000      	b.n	800a7a2 <HAL_GPIO_DeInit+0x92>
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	69fa      	ldr	r2, [r7, #28]
 800a7a4:	f002 0203 	and.w	r2, r2, #3
 800a7a8:	0092      	lsls	r2, r2, #2
 800a7aa:	4093      	lsls	r3, r2
 800a7ac:	697a      	ldr	r2, [r7, #20]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d132      	bne.n	800a818 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800a7b2:	4b3c      	ldr	r3, [pc, #240]	@ (800a8a4 <HAL_GPIO_DeInit+0x194>)
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	43db      	mvns	r3, r3
 800a7ba:	493a      	ldr	r1, [pc, #232]	@ (800a8a4 <HAL_GPIO_DeInit+0x194>)
 800a7bc:	4013      	ands	r3, r2
 800a7be:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800a7c0:	4b38      	ldr	r3, [pc, #224]	@ (800a8a4 <HAL_GPIO_DeInit+0x194>)
 800a7c2:	685a      	ldr	r2, [r3, #4]
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	43db      	mvns	r3, r3
 800a7c8:	4936      	ldr	r1, [pc, #216]	@ (800a8a4 <HAL_GPIO_DeInit+0x194>)
 800a7ca:	4013      	ands	r3, r2
 800a7cc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800a7ce:	4b35      	ldr	r3, [pc, #212]	@ (800a8a4 <HAL_GPIO_DeInit+0x194>)
 800a7d0:	68da      	ldr	r2, [r3, #12]
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	43db      	mvns	r3, r3
 800a7d6:	4933      	ldr	r1, [pc, #204]	@ (800a8a4 <HAL_GPIO_DeInit+0x194>)
 800a7d8:	4013      	ands	r3, r2
 800a7da:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800a7dc:	4b31      	ldr	r3, [pc, #196]	@ (800a8a4 <HAL_GPIO_DeInit+0x194>)
 800a7de:	689a      	ldr	r2, [r3, #8]
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	43db      	mvns	r3, r3
 800a7e4:	492f      	ldr	r1, [pc, #188]	@ (800a8a4 <HAL_GPIO_DeInit+0x194>)
 800a7e6:	4013      	ands	r3, r2
 800a7e8:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	f003 0303 	and.w	r3, r3, #3
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	220f      	movs	r2, #15
 800a7f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800a7fa:	4a23      	ldr	r2, [pc, #140]	@ (800a888 <HAL_GPIO_DeInit+0x178>)
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	089b      	lsrs	r3, r3, #2
 800a800:	3302      	adds	r3, #2
 800a802:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	43da      	mvns	r2, r3
 800a80a:	481f      	ldr	r0, [pc, #124]	@ (800a888 <HAL_GPIO_DeInit+0x178>)
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	089b      	lsrs	r3, r3, #2
 800a810:	400a      	ands	r2, r1
 800a812:	3302      	adds	r3, #2
 800a814:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	2bff      	cmp	r3, #255	@ 0xff
 800a81c:	d801      	bhi.n	800a822 <HAL_GPIO_DeInit+0x112>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	e001      	b.n	800a826 <HAL_GPIO_DeInit+0x116>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	3304      	adds	r3, #4
 800a826:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	2bff      	cmp	r3, #255	@ 0xff
 800a82c:	d802      	bhi.n	800a834 <HAL_GPIO_DeInit+0x124>
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	009b      	lsls	r3, r3, #2
 800a832:	e002      	b.n	800a83a <HAL_GPIO_DeInit+0x12a>
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	3b08      	subs	r3, #8
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	210f      	movs	r1, #15
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	fa01 f303 	lsl.w	r3, r1, r3
 800a848:	43db      	mvns	r3, r3
 800a84a:	401a      	ands	r2, r3
 800a84c:	2104      	movs	r1, #4
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	fa01 f303 	lsl.w	r3, r1, r3
 800a854:	431a      	orrs	r2, r3
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	68da      	ldr	r2, [r3, #12]
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	43db      	mvns	r3, r3
 800a862:	401a      	ands	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	3301      	adds	r3, #1
 800a86c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800a86e:	683a      	ldr	r2, [r7, #0]
 800a870:	69fb      	ldr	r3, [r7, #28]
 800a872:	fa22 f303 	lsr.w	r3, r2, r3
 800a876:	2b00      	cmp	r3, #0
 800a878:	f47f af52 	bne.w	800a720 <HAL_GPIO_DeInit+0x10>
  }
}
 800a87c:	bf00      	nop
 800a87e:	bf00      	nop
 800a880:	3724      	adds	r7, #36	@ 0x24
 800a882:	46bd      	mov	sp, r7
 800a884:	bc80      	pop	{r7}
 800a886:	4770      	bx	lr
 800a888:	40010000 	.word	0x40010000
 800a88c:	40010800 	.word	0x40010800
 800a890:	40010c00 	.word	0x40010c00
 800a894:	40011000 	.word	0x40011000
 800a898:	40011400 	.word	0x40011400
 800a89c:	40011800 	.word	0x40011800
 800a8a0:	40011c00 	.word	0x40011c00
 800a8a4:	40010400 	.word	0x40010400

0800a8a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	460b      	mov	r3, r1
 800a8b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	689a      	ldr	r2, [r3, #8]
 800a8b8:	887b      	ldrh	r3, [r7, #2]
 800a8ba:	4013      	ands	r3, r2
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d002      	beq.n	800a8c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	73fb      	strb	r3, [r7, #15]
 800a8c4:	e001      	b.n	800a8ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a8ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3714      	adds	r7, #20
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bc80      	pop	{r7}
 800a8d4:	4770      	bx	lr

0800a8d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a8d6:	b480      	push	{r7}
 800a8d8:	b083      	sub	sp, #12
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
 800a8de:	460b      	mov	r3, r1
 800a8e0:	807b      	strh	r3, [r7, #2]
 800a8e2:	4613      	mov	r3, r2
 800a8e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a8e6:	787b      	ldrb	r3, [r7, #1]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d003      	beq.n	800a8f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a8ec:	887a      	ldrh	r2, [r7, #2]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a8f2:	e003      	b.n	800a8fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a8f4:	887b      	ldrh	r3, [r7, #2]
 800a8f6:	041a      	lsls	r2, r3, #16
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	611a      	str	r2, [r3, #16]
}
 800a8fc:	bf00      	nop
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	bc80      	pop	{r7}
 800a904:	4770      	bx	lr

0800a906 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a906:	b480      	push	{r7}
 800a908:	b085      	sub	sp, #20
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
 800a90e:	460b      	mov	r3, r1
 800a910:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a918:	887a      	ldrh	r2, [r7, #2]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	4013      	ands	r3, r2
 800a91e:	041a      	lsls	r2, r3, #16
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	43d9      	mvns	r1, r3
 800a924:	887b      	ldrh	r3, [r7, #2]
 800a926:	400b      	ands	r3, r1
 800a928:	431a      	orrs	r2, r3
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	611a      	str	r2, [r3, #16]
}
 800a92e:	bf00      	nop
 800a930:	3714      	adds	r7, #20
 800a932:	46bd      	mov	sp, r7
 800a934:	bc80      	pop	{r7}
 800a936:	4770      	bx	lr

0800a938 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d101      	bne.n	800a94a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a946:	2301      	movs	r3, #1
 800a948:	e12b      	b.n	800aba2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a950:	b2db      	uxtb	r3, r3
 800a952:	2b00      	cmp	r3, #0
 800a954:	d106      	bne.n	800a964 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	f7fe ffe8 	bl	8009934 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2224      	movs	r2, #36	@ 0x24
 800a968:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f022 0201 	bic.w	r2, r2, #1
 800a97a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681a      	ldr	r2, [r3, #0]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a98a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	681a      	ldr	r2, [r3, #0]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a99a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a99c:	f001 fdb8 	bl	800c510 <HAL_RCC_GetPCLK1Freq>
 800a9a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	685b      	ldr	r3, [r3, #4]
 800a9a6:	4a81      	ldr	r2, [pc, #516]	@ (800abac <HAL_I2C_Init+0x274>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d807      	bhi.n	800a9bc <HAL_I2C_Init+0x84>
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	4a80      	ldr	r2, [pc, #512]	@ (800abb0 <HAL_I2C_Init+0x278>)
 800a9b0:	4293      	cmp	r3, r2
 800a9b2:	bf94      	ite	ls
 800a9b4:	2301      	movls	r3, #1
 800a9b6:	2300      	movhi	r3, #0
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	e006      	b.n	800a9ca <HAL_I2C_Init+0x92>
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	4a7d      	ldr	r2, [pc, #500]	@ (800abb4 <HAL_I2C_Init+0x27c>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	bf94      	ite	ls
 800a9c4:	2301      	movls	r3, #1
 800a9c6:	2300      	movhi	r3, #0
 800a9c8:	b2db      	uxtb	r3, r3
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d001      	beq.n	800a9d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	e0e7      	b.n	800aba2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	4a78      	ldr	r2, [pc, #480]	@ (800abb8 <HAL_I2C_Init+0x280>)
 800a9d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9da:	0c9b      	lsrs	r3, r3, #18
 800a9dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	68ba      	ldr	r2, [r7, #8]
 800a9ee:	430a      	orrs	r2, r1
 800a9f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	6a1b      	ldr	r3, [r3, #32]
 800a9f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	4a6a      	ldr	r2, [pc, #424]	@ (800abac <HAL_I2C_Init+0x274>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d802      	bhi.n	800aa0c <HAL_I2C_Init+0xd4>
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	3301      	adds	r3, #1
 800aa0a:	e009      	b.n	800aa20 <HAL_I2C_Init+0xe8>
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800aa12:	fb02 f303 	mul.w	r3, r2, r3
 800aa16:	4a69      	ldr	r2, [pc, #420]	@ (800abbc <HAL_I2C_Init+0x284>)
 800aa18:	fba2 2303 	umull	r2, r3, r2, r3
 800aa1c:	099b      	lsrs	r3, r3, #6
 800aa1e:	3301      	adds	r3, #1
 800aa20:	687a      	ldr	r2, [r7, #4]
 800aa22:	6812      	ldr	r2, [r2, #0]
 800aa24:	430b      	orrs	r3, r1
 800aa26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	69db      	ldr	r3, [r3, #28]
 800aa2e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800aa32:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	685b      	ldr	r3, [r3, #4]
 800aa3a:	495c      	ldr	r1, [pc, #368]	@ (800abac <HAL_I2C_Init+0x274>)
 800aa3c:	428b      	cmp	r3, r1
 800aa3e:	d819      	bhi.n	800aa74 <HAL_I2C_Init+0x13c>
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	1e59      	subs	r1, r3, #1
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	005b      	lsls	r3, r3, #1
 800aa4a:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa4e:	1c59      	adds	r1, r3, #1
 800aa50:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800aa54:	400b      	ands	r3, r1
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d00a      	beq.n	800aa70 <HAL_I2C_Init+0x138>
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	1e59      	subs	r1, r3, #1
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	005b      	lsls	r3, r3, #1
 800aa64:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa68:	3301      	adds	r3, #1
 800aa6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa6e:	e051      	b.n	800ab14 <HAL_I2C_Init+0x1dc>
 800aa70:	2304      	movs	r3, #4
 800aa72:	e04f      	b.n	800ab14 <HAL_I2C_Init+0x1dc>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	689b      	ldr	r3, [r3, #8]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d111      	bne.n	800aaa0 <HAL_I2C_Init+0x168>
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	1e58      	subs	r0, r3, #1
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6859      	ldr	r1, [r3, #4]
 800aa84:	460b      	mov	r3, r1
 800aa86:	005b      	lsls	r3, r3, #1
 800aa88:	440b      	add	r3, r1
 800aa8a:	fbb0 f3f3 	udiv	r3, r0, r3
 800aa8e:	3301      	adds	r3, #1
 800aa90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	bf0c      	ite	eq
 800aa98:	2301      	moveq	r3, #1
 800aa9a:	2300      	movne	r3, #0
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	e012      	b.n	800aac6 <HAL_I2C_Init+0x18e>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	1e58      	subs	r0, r3, #1
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6859      	ldr	r1, [r3, #4]
 800aaa8:	460b      	mov	r3, r1
 800aaaa:	009b      	lsls	r3, r3, #2
 800aaac:	440b      	add	r3, r1
 800aaae:	0099      	lsls	r1, r3, #2
 800aab0:	440b      	add	r3, r1
 800aab2:	fbb0 f3f3 	udiv	r3, r0, r3
 800aab6:	3301      	adds	r3, #1
 800aab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	bf0c      	ite	eq
 800aac0:	2301      	moveq	r3, #1
 800aac2:	2300      	movne	r3, #0
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d001      	beq.n	800aace <HAL_I2C_Init+0x196>
 800aaca:	2301      	movs	r3, #1
 800aacc:	e022      	b.n	800ab14 <HAL_I2C_Init+0x1dc>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10e      	bne.n	800aaf4 <HAL_I2C_Init+0x1bc>
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	1e58      	subs	r0, r3, #1
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6859      	ldr	r1, [r3, #4]
 800aade:	460b      	mov	r3, r1
 800aae0:	005b      	lsls	r3, r3, #1
 800aae2:	440b      	add	r3, r1
 800aae4:	fbb0 f3f3 	udiv	r3, r0, r3
 800aae8:	3301      	adds	r3, #1
 800aaea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aaee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aaf2:	e00f      	b.n	800ab14 <HAL_I2C_Init+0x1dc>
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	1e58      	subs	r0, r3, #1
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6859      	ldr	r1, [r3, #4]
 800aafc:	460b      	mov	r3, r1
 800aafe:	009b      	lsls	r3, r3, #2
 800ab00:	440b      	add	r3, r1
 800ab02:	0099      	lsls	r1, r3, #2
 800ab04:	440b      	add	r3, r1
 800ab06:	fbb0 f3f3 	udiv	r3, r0, r3
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ab14:	6879      	ldr	r1, [r7, #4]
 800ab16:	6809      	ldr	r1, [r1, #0]
 800ab18:	4313      	orrs	r3, r2
 800ab1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	69da      	ldr	r2, [r3, #28]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a1b      	ldr	r3, [r3, #32]
 800ab2e:	431a      	orrs	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	430a      	orrs	r2, r1
 800ab36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800ab42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	6911      	ldr	r1, [r2, #16]
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	68d2      	ldr	r2, [r2, #12]
 800ab4e:	4311      	orrs	r1, r2
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	6812      	ldr	r2, [r2, #0]
 800ab54:	430b      	orrs	r3, r1
 800ab56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	695a      	ldr	r2, [r3, #20]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	699b      	ldr	r3, [r3, #24]
 800ab6a:	431a      	orrs	r2, r3
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	430a      	orrs	r2, r1
 800ab72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f042 0201 	orr.w	r2, r2, #1
 800ab82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2220      	movs	r2, #32
 800ab8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2200      	movs	r2, #0
 800ab96:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800aba0:	2300      	movs	r3, #0
}
 800aba2:	4618      	mov	r0, r3
 800aba4:	3710      	adds	r7, #16
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	000186a0 	.word	0x000186a0
 800abb0:	001e847f 	.word	0x001e847f
 800abb4:	003d08ff 	.word	0x003d08ff
 800abb8:	431bde83 	.word	0x431bde83
 800abbc:	10624dd3 	.word	0x10624dd3

0800abc0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d101      	bne.n	800abd2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800abce:	2301      	movs	r3, #1
 800abd0:	e021      	b.n	800ac16 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2224      	movs	r2, #36	@ 0x24
 800abd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	681a      	ldr	r2, [r3, #0]
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f022 0201 	bic.w	r2, r2, #1
 800abe8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f7fe fee0 	bl	80099b0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2200      	movs	r2, #0
 800abfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3708      	adds	r7, #8
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
	...

0800ac20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b088      	sub	sp, #32
 800ac24:	af02      	add	r7, sp, #8
 800ac26:	60f8      	str	r0, [r7, #12]
 800ac28:	607a      	str	r2, [r7, #4]
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	817b      	strh	r3, [r7, #10]
 800ac30:	4613      	mov	r3, r2
 800ac32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ac34:	f7ff f852 	bl	8009cdc <HAL_GetTick>
 800ac38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ac40:	b2db      	uxtb	r3, r3
 800ac42:	2b20      	cmp	r3, #32
 800ac44:	f040 80e0 	bne.w	800ae08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ac48:	697b      	ldr	r3, [r7, #20]
 800ac4a:	9300      	str	r3, [sp, #0]
 800ac4c:	2319      	movs	r3, #25
 800ac4e:	2201      	movs	r2, #1
 800ac50:	4970      	ldr	r1, [pc, #448]	@ (800ae14 <HAL_I2C_Master_Transmit+0x1f4>)
 800ac52:	68f8      	ldr	r0, [r7, #12]
 800ac54:	f000 fe5c 	bl	800b910 <I2C_WaitOnFlagUntilTimeout>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d001      	beq.n	800ac62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800ac5e:	2302      	movs	r3, #2
 800ac60:	e0d3      	b.n	800ae0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d101      	bne.n	800ac70 <HAL_I2C_Master_Transmit+0x50>
 800ac6c:	2302      	movs	r3, #2
 800ac6e:	e0cc      	b.n	800ae0a <HAL_I2C_Master_Transmit+0x1ea>
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f003 0301 	and.w	r3, r3, #1
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d007      	beq.n	800ac96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f042 0201 	orr.w	r2, r2, #1
 800ac94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800aca4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	2221      	movs	r2, #33	@ 0x21
 800acaa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2210      	movs	r2, #16
 800acb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2200      	movs	r2, #0
 800acba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	893a      	ldrh	r2, [r7, #8]
 800acc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800accc:	b29a      	uxth	r2, r3
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	4a50      	ldr	r2, [pc, #320]	@ (800ae18 <HAL_I2C_Master_Transmit+0x1f8>)
 800acd6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800acd8:	8979      	ldrh	r1, [r7, #10]
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	6a3a      	ldr	r2, [r7, #32]
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	f000 fc16 	bl	800b510 <I2C_MasterRequestWrite>
 800ace4:	4603      	mov	r3, r0
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d001      	beq.n	800acee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	e08d      	b.n	800ae0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800acee:	2300      	movs	r3, #0
 800acf0:	613b      	str	r3, [r7, #16]
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	695b      	ldr	r3, [r3, #20]
 800acf8:	613b      	str	r3, [r7, #16]
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	699b      	ldr	r3, [r3, #24]
 800ad00:	613b      	str	r3, [r7, #16]
 800ad02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800ad04:	e066      	b.n	800add4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad06:	697a      	ldr	r2, [r7, #20]
 800ad08:	6a39      	ldr	r1, [r7, #32]
 800ad0a:	68f8      	ldr	r0, [r7, #12]
 800ad0c:	f000 ff1a 	bl	800bb44 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00d      	beq.n	800ad32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad1a:	2b04      	cmp	r3, #4
 800ad1c:	d107      	bne.n	800ad2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	e06b      	b.n	800ae0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad36:	781a      	ldrb	r2, [r3, #0]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad42:	1c5a      	adds	r2, r3, #1
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	b29a      	uxth	r2, r3
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad5a:	3b01      	subs	r3, #1
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	695b      	ldr	r3, [r3, #20]
 800ad68:	f003 0304 	and.w	r3, r3, #4
 800ad6c:	2b04      	cmp	r3, #4
 800ad6e:	d11b      	bne.n	800ada8 <HAL_I2C_Master_Transmit+0x188>
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d017      	beq.n	800ada8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad7c:	781a      	ldrb	r2, [r3, #0]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad88:	1c5a      	adds	r2, r3, #1
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	3b01      	subs	r3, #1
 800ad96:	b29a      	uxth	r2, r3
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ada0:	3b01      	subs	r3, #1
 800ada2:	b29a      	uxth	r2, r3
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	6a39      	ldr	r1, [r7, #32]
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	f000 ff11 	bl	800bbd4 <I2C_WaitOnBTFFlagUntilTimeout>
 800adb2:	4603      	mov	r3, r0
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d00d      	beq.n	800add4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adbc:	2b04      	cmp	r3, #4
 800adbe:	d107      	bne.n	800add0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800adce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800add0:	2301      	movs	r3, #1
 800add2:	e01a      	b.n	800ae0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800add8:	2b00      	cmp	r3, #0
 800adda:	d194      	bne.n	800ad06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	681a      	ldr	r2, [r3, #0]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800adea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2220      	movs	r2, #32
 800adf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2200      	movs	r2, #0
 800adf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ae04:	2300      	movs	r3, #0
 800ae06:	e000      	b.n	800ae0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ae08:	2302      	movs	r3, #2
  }
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3718      	adds	r7, #24
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}
 800ae12:	bf00      	nop
 800ae14:	00100002 	.word	0x00100002
 800ae18:	ffff0000 	.word	0xffff0000

0800ae1c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b088      	sub	sp, #32
 800ae20:	af02      	add	r7, sp, #8
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	4608      	mov	r0, r1
 800ae26:	4611      	mov	r1, r2
 800ae28:	461a      	mov	r2, r3
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	817b      	strh	r3, [r7, #10]
 800ae2e:	460b      	mov	r3, r1
 800ae30:	813b      	strh	r3, [r7, #8]
 800ae32:	4613      	mov	r3, r2
 800ae34:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ae36:	f7fe ff51 	bl	8009cdc <HAL_GetTick>
 800ae3a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	2b20      	cmp	r3, #32
 800ae46:	f040 80d9 	bne.w	800affc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ae4a:	697b      	ldr	r3, [r7, #20]
 800ae4c:	9300      	str	r3, [sp, #0]
 800ae4e:	2319      	movs	r3, #25
 800ae50:	2201      	movs	r2, #1
 800ae52:	496d      	ldr	r1, [pc, #436]	@ (800b008 <HAL_I2C_Mem_Write+0x1ec>)
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f000 fd5b 	bl	800b910 <I2C_WaitOnFlagUntilTimeout>
 800ae5a:	4603      	mov	r3, r0
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d001      	beq.n	800ae64 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800ae60:	2302      	movs	r3, #2
 800ae62:	e0cc      	b.n	800affe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d101      	bne.n	800ae72 <HAL_I2C_Mem_Write+0x56>
 800ae6e:	2302      	movs	r3, #2
 800ae70:	e0c5      	b.n	800affe <HAL_I2C_Mem_Write+0x1e2>
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2201      	movs	r2, #1
 800ae76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f003 0301 	and.w	r3, r3, #1
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d007      	beq.n	800ae98 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f042 0201 	orr.w	r2, r2, #1
 800ae96:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	681a      	ldr	r2, [r3, #0]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800aea6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2221      	movs	r2, #33	@ 0x21
 800aeac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2240      	movs	r2, #64	@ 0x40
 800aeb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	2200      	movs	r2, #0
 800aebc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	6a3a      	ldr	r2, [r7, #32]
 800aec2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800aec8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aece:	b29a      	uxth	r2, r3
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	4a4d      	ldr	r2, [pc, #308]	@ (800b00c <HAL_I2C_Mem_Write+0x1f0>)
 800aed8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aeda:	88f8      	ldrh	r0, [r7, #6]
 800aedc:	893a      	ldrh	r2, [r7, #8]
 800aede:	8979      	ldrh	r1, [r7, #10]
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	9301      	str	r3, [sp, #4]
 800aee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee6:	9300      	str	r3, [sp, #0]
 800aee8:	4603      	mov	r3, r0
 800aeea:	68f8      	ldr	r0, [r7, #12]
 800aeec:	f000 fb92 	bl	800b614 <I2C_RequestMemoryWrite>
 800aef0:	4603      	mov	r3, r0
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d052      	beq.n	800af9c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800aef6:	2301      	movs	r3, #1
 800aef8:	e081      	b.n	800affe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aefa:	697a      	ldr	r2, [r7, #20]
 800aefc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	f000 fe20 	bl	800bb44 <I2C_WaitOnTXEFlagUntilTimeout>
 800af04:	4603      	mov	r3, r0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00d      	beq.n	800af26 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af0e:	2b04      	cmp	r3, #4
 800af10:	d107      	bne.n	800af22 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af20:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	e06b      	b.n	800affe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af2a:	781a      	ldrb	r2, [r3, #0]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af36:	1c5a      	adds	r2, r3, #1
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af40:	3b01      	subs	r3, #1
 800af42:	b29a      	uxth	r2, r3
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af4c:	b29b      	uxth	r3, r3
 800af4e:	3b01      	subs	r3, #1
 800af50:	b29a      	uxth	r2, r3
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	695b      	ldr	r3, [r3, #20]
 800af5c:	f003 0304 	and.w	r3, r3, #4
 800af60:	2b04      	cmp	r3, #4
 800af62:	d11b      	bne.n	800af9c <HAL_I2C_Mem_Write+0x180>
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d017      	beq.n	800af9c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af70:	781a      	ldrb	r2, [r3, #0]
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af7c:	1c5a      	adds	r2, r3, #1
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af86:	3b01      	subs	r3, #1
 800af88:	b29a      	uxth	r2, r3
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af92:	b29b      	uxth	r3, r3
 800af94:	3b01      	subs	r3, #1
 800af96:	b29a      	uxth	r2, r3
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d1aa      	bne.n	800aefa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800afa4:	697a      	ldr	r2, [r7, #20]
 800afa6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800afa8:	68f8      	ldr	r0, [r7, #12]
 800afaa:	f000 fe13 	bl	800bbd4 <I2C_WaitOnBTFFlagUntilTimeout>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00d      	beq.n	800afd0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afb8:	2b04      	cmp	r3, #4
 800afba:	d107      	bne.n	800afcc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	681a      	ldr	r2, [r3, #0]
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800afca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800afcc:	2301      	movs	r3, #1
 800afce:	e016      	b.n	800affe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800afde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2220      	movs	r2, #32
 800afe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2200      	movs	r2, #0
 800afec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800aff8:	2300      	movs	r3, #0
 800affa:	e000      	b.n	800affe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800affc:	2302      	movs	r3, #2
  }
}
 800affe:	4618      	mov	r0, r3
 800b000:	3718      	adds	r7, #24
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	00100002 	.word	0x00100002
 800b00c:	ffff0000 	.word	0xffff0000

0800b010 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b08c      	sub	sp, #48	@ 0x30
 800b014:	af02      	add	r7, sp, #8
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	4608      	mov	r0, r1
 800b01a:	4611      	mov	r1, r2
 800b01c:	461a      	mov	r2, r3
 800b01e:	4603      	mov	r3, r0
 800b020:	817b      	strh	r3, [r7, #10]
 800b022:	460b      	mov	r3, r1
 800b024:	813b      	strh	r3, [r7, #8]
 800b026:	4613      	mov	r3, r2
 800b028:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800b02a:	2300      	movs	r3, #0
 800b02c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b02e:	f7fe fe55 	bl	8009cdc <HAL_GetTick>
 800b032:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	2b20      	cmp	r3, #32
 800b03e:	f040 8244 	bne.w	800b4ca <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b044:	9300      	str	r3, [sp, #0]
 800b046:	2319      	movs	r3, #25
 800b048:	2201      	movs	r2, #1
 800b04a:	4982      	ldr	r1, [pc, #520]	@ (800b254 <HAL_I2C_Mem_Read+0x244>)
 800b04c:	68f8      	ldr	r0, [r7, #12]
 800b04e:	f000 fc5f 	bl	800b910 <I2C_WaitOnFlagUntilTimeout>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d001      	beq.n	800b05c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800b058:	2302      	movs	r3, #2
 800b05a:	e237      	b.n	800b4cc <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b062:	2b01      	cmp	r3, #1
 800b064:	d101      	bne.n	800b06a <HAL_I2C_Mem_Read+0x5a>
 800b066:	2302      	movs	r3, #2
 800b068:	e230      	b.n	800b4cc <HAL_I2C_Mem_Read+0x4bc>
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2201      	movs	r2, #1
 800b06e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f003 0301 	and.w	r3, r3, #1
 800b07c:	2b01      	cmp	r3, #1
 800b07e:	d007      	beq.n	800b090 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f042 0201 	orr.w	r2, r2, #1
 800b08e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b09e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2222      	movs	r2, #34	@ 0x22
 800b0a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2240      	movs	r2, #64	@ 0x40
 800b0ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800b0c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0c6:	b29a      	uxth	r2, r3
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	4a62      	ldr	r2, [pc, #392]	@ (800b258 <HAL_I2C_Mem_Read+0x248>)
 800b0d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b0d2:	88f8      	ldrh	r0, [r7, #6]
 800b0d4:	893a      	ldrh	r2, [r7, #8]
 800b0d6:	8979      	ldrh	r1, [r7, #10]
 800b0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0da:	9301      	str	r3, [sp, #4]
 800b0dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0de:	9300      	str	r3, [sp, #0]
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	68f8      	ldr	r0, [r7, #12]
 800b0e4:	f000 fb2c 	bl	800b740 <I2C_RequestMemoryRead>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d001      	beq.n	800b0f2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e1ec      	b.n	800b4cc <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d113      	bne.n	800b122 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	61fb      	str	r3, [r7, #28]
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	695b      	ldr	r3, [r3, #20]
 800b104:	61fb      	str	r3, [r7, #28]
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	699b      	ldr	r3, [r3, #24]
 800b10c:	61fb      	str	r3, [r7, #28]
 800b10e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b11e:	601a      	str	r2, [r3, #0]
 800b120:	e1c0      	b.n	800b4a4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b126:	2b01      	cmp	r3, #1
 800b128:	d11e      	bne.n	800b168 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	681a      	ldr	r2, [r3, #0]
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b138:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b13a:	b672      	cpsid	i
}
 800b13c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b13e:	2300      	movs	r3, #0
 800b140:	61bb      	str	r3, [r7, #24]
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	695b      	ldr	r3, [r3, #20]
 800b148:	61bb      	str	r3, [r7, #24]
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	699b      	ldr	r3, [r3, #24]
 800b150:	61bb      	str	r3, [r7, #24]
 800b152:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b162:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b164:	b662      	cpsie	i
}
 800b166:	e035      	b.n	800b1d4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b16c:	2b02      	cmp	r3, #2
 800b16e:	d11e      	bne.n	800b1ae <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	681a      	ldr	r2, [r3, #0]
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b17e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b180:	b672      	cpsid	i
}
 800b182:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b184:	2300      	movs	r3, #0
 800b186:	617b      	str	r3, [r7, #20]
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	695b      	ldr	r3, [r3, #20]
 800b18e:	617b      	str	r3, [r7, #20]
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	699b      	ldr	r3, [r3, #24]
 800b196:	617b      	str	r3, [r7, #20]
 800b198:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	681a      	ldr	r2, [r3, #0]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b1a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b1aa:	b662      	cpsie	i
}
 800b1ac:	e012      	b.n	800b1d4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b1bc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b1be:	2300      	movs	r3, #0
 800b1c0:	613b      	str	r3, [r7, #16]
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	695b      	ldr	r3, [r3, #20]
 800b1c8:	613b      	str	r3, [r7, #16]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	699b      	ldr	r3, [r3, #24]
 800b1d0:	613b      	str	r3, [r7, #16]
 800b1d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800b1d4:	e166      	b.n	800b4a4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1da:	2b03      	cmp	r3, #3
 800b1dc:	f200 811f 	bhi.w	800b41e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d123      	bne.n	800b230 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b1e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f000 fd39 	bl	800bc64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d001      	beq.n	800b1fc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	e167      	b.n	800b4cc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	691a      	ldr	r2, [r3, #16]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b206:	b2d2      	uxtb	r2, r2
 800b208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b20e:	1c5a      	adds	r2, r3, #1
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b218:	3b01      	subs	r3, #1
 800b21a:	b29a      	uxth	r2, r3
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b224:	b29b      	uxth	r3, r3
 800b226:	3b01      	subs	r3, #1
 800b228:	b29a      	uxth	r2, r3
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b22e:	e139      	b.n	800b4a4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b234:	2b02      	cmp	r3, #2
 800b236:	d152      	bne.n	800b2de <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b23e:	2200      	movs	r2, #0
 800b240:	4906      	ldr	r1, [pc, #24]	@ (800b25c <HAL_I2C_Mem_Read+0x24c>)
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f000 fb64 	bl	800b910 <I2C_WaitOnFlagUntilTimeout>
 800b248:	4603      	mov	r3, r0
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d008      	beq.n	800b260 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800b24e:	2301      	movs	r3, #1
 800b250:	e13c      	b.n	800b4cc <HAL_I2C_Mem_Read+0x4bc>
 800b252:	bf00      	nop
 800b254:	00100002 	.word	0x00100002
 800b258:	ffff0000 	.word	0xffff0000
 800b25c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800b260:	b672      	cpsid	i
}
 800b262:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	681a      	ldr	r2, [r3, #0]
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b272:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	691a      	ldr	r2, [r3, #16]
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b27e:	b2d2      	uxtb	r2, r2
 800b280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b286:	1c5a      	adds	r2, r3, #1
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b290:	3b01      	subs	r3, #1
 800b292:	b29a      	uxth	r2, r3
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	3b01      	subs	r3, #1
 800b2a0:	b29a      	uxth	r2, r3
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b2a6:	b662      	cpsie	i
}
 800b2a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	691a      	ldr	r2, [r3, #16]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2b4:	b2d2      	uxtb	r2, r2
 800b2b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2bc:	1c5a      	adds	r2, r3, #1
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2c6:	3b01      	subs	r3, #1
 800b2c8:	b29a      	uxth	r2, r3
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	b29a      	uxth	r2, r3
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b2dc:	e0e2      	b.n	800b4a4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b2de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e0:	9300      	str	r3, [sp, #0]
 800b2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	497b      	ldr	r1, [pc, #492]	@ (800b4d4 <HAL_I2C_Mem_Read+0x4c4>)
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f000 fb11 	bl	800b910 <I2C_WaitOnFlagUntilTimeout>
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d001      	beq.n	800b2f8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	e0e9      	b.n	800b4cc <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b306:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b308:	b672      	cpsid	i
}
 800b30a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	691a      	ldr	r2, [r3, #16]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b316:	b2d2      	uxtb	r2, r2
 800b318:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b31e:	1c5a      	adds	r2, r3, #1
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b328:	3b01      	subs	r3, #1
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b334:	b29b      	uxth	r3, r3
 800b336:	3b01      	subs	r3, #1
 800b338:	b29a      	uxth	r2, r3
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b33e:	4b66      	ldr	r3, [pc, #408]	@ (800b4d8 <HAL_I2C_Mem_Read+0x4c8>)
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	08db      	lsrs	r3, r3, #3
 800b344:	4a65      	ldr	r2, [pc, #404]	@ (800b4dc <HAL_I2C_Mem_Read+0x4cc>)
 800b346:	fba2 2303 	umull	r2, r3, r2, r3
 800b34a:	0a1a      	lsrs	r2, r3, #8
 800b34c:	4613      	mov	r3, r2
 800b34e:	009b      	lsls	r3, r3, #2
 800b350:	4413      	add	r3, r2
 800b352:	00da      	lsls	r2, r3, #3
 800b354:	1ad3      	subs	r3, r2, r3
 800b356:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800b358:	6a3b      	ldr	r3, [r7, #32]
 800b35a:	3b01      	subs	r3, #1
 800b35c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800b35e:	6a3b      	ldr	r3, [r7, #32]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d118      	bne.n	800b396 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	2200      	movs	r2, #0
 800b368:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	2220      	movs	r2, #32
 800b36e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	2200      	movs	r2, #0
 800b376:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b37e:	f043 0220 	orr.w	r2, r3, #32
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800b386:	b662      	cpsie	i
}
 800b388:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800b392:	2301      	movs	r3, #1
 800b394:	e09a      	b.n	800b4cc <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	695b      	ldr	r3, [r3, #20]
 800b39c:	f003 0304 	and.w	r3, r3, #4
 800b3a0:	2b04      	cmp	r3, #4
 800b3a2:	d1d9      	bne.n	800b358 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b3b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	691a      	ldr	r2, [r3, #16]
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3be:	b2d2      	uxtb	r2, r2
 800b3c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3c6:	1c5a      	adds	r2, r3, #1
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	b29a      	uxth	r2, r3
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	3b01      	subs	r3, #1
 800b3e0:	b29a      	uxth	r2, r3
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b3e6:	b662      	cpsie	i
}
 800b3e8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	691a      	ldr	r2, [r3, #16]
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3f4:	b2d2      	uxtb	r2, r2
 800b3f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3fc:	1c5a      	adds	r2, r3, #1
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b406:	3b01      	subs	r3, #1
 800b408:	b29a      	uxth	r2, r3
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b412:	b29b      	uxth	r3, r3
 800b414:	3b01      	subs	r3, #1
 800b416:	b29a      	uxth	r2, r3
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b41c:	e042      	b.n	800b4a4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b41e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b420:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f000 fc1e 	bl	800bc64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d001      	beq.n	800b432 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800b42e:	2301      	movs	r3, #1
 800b430:	e04c      	b.n	800b4cc <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	691a      	ldr	r2, [r3, #16]
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b43c:	b2d2      	uxtb	r2, r2
 800b43e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b444:	1c5a      	adds	r2, r3, #1
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b44e:	3b01      	subs	r3, #1
 800b450:	b29a      	uxth	r2, r3
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b45a:	b29b      	uxth	r3, r3
 800b45c:	3b01      	subs	r3, #1
 800b45e:	b29a      	uxth	r2, r3
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	695b      	ldr	r3, [r3, #20]
 800b46a:	f003 0304 	and.w	r3, r3, #4
 800b46e:	2b04      	cmp	r3, #4
 800b470:	d118      	bne.n	800b4a4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	691a      	ldr	r2, [r3, #16]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b47c:	b2d2      	uxtb	r2, r2
 800b47e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b484:	1c5a      	adds	r2, r3, #1
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b48e:	3b01      	subs	r3, #1
 800b490:	b29a      	uxth	r2, r3
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	3b01      	subs	r3, #1
 800b49e:	b29a      	uxth	r2, r3
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	f47f ae94 	bne.w	800b1d6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2220      	movs	r2, #32
 800b4b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	e000      	b.n	800b4cc <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800b4ca:	2302      	movs	r3, #2
  }
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3728      	adds	r7, #40	@ 0x28
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	00010004 	.word	0x00010004
 800b4d8:	20000f74 	.word	0x20000f74
 800b4dc:	14f8b589 	.word	0x14f8b589

0800b4e0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4ee:	b2db      	uxtb	r3, r3
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	370c      	adds	r7, #12
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bc80      	pop	{r7}
 800b4f8:	4770      	bx	lr

0800b4fa <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b4fa:	b480      	push	{r7}
 800b4fc:	b083      	sub	sp, #12
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800b506:	4618      	mov	r0, r3
 800b508:	370c      	adds	r7, #12
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bc80      	pop	{r7}
 800b50e:	4770      	bx	lr

0800b510 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b088      	sub	sp, #32
 800b514:	af02      	add	r7, sp, #8
 800b516:	60f8      	str	r0, [r7, #12]
 800b518:	607a      	str	r2, [r7, #4]
 800b51a:	603b      	str	r3, [r7, #0]
 800b51c:	460b      	mov	r3, r1
 800b51e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b524:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	2b08      	cmp	r3, #8
 800b52a:	d006      	beq.n	800b53a <I2C_MasterRequestWrite+0x2a>
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	2b01      	cmp	r3, #1
 800b530:	d003      	beq.n	800b53a <I2C_MasterRequestWrite+0x2a>
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b538:	d108      	bne.n	800b54c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	681a      	ldr	r2, [r3, #0]
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b548:	601a      	str	r2, [r3, #0]
 800b54a:	e00b      	b.n	800b564 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b550:	2b12      	cmp	r3, #18
 800b552:	d107      	bne.n	800b564 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	681a      	ldr	r2, [r3, #0]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b562:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	9300      	str	r3, [sp, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	f000 f9cd 	bl	800b910 <I2C_WaitOnFlagUntilTimeout>
 800b576:	4603      	mov	r3, r0
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00d      	beq.n	800b598 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b58a:	d103      	bne.n	800b594 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b592:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b594:	2303      	movs	r3, #3
 800b596:	e035      	b.n	800b604 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	691b      	ldr	r3, [r3, #16]
 800b59c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b5a0:	d108      	bne.n	800b5b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b5a2:	897b      	ldrh	r3, [r7, #10]
 800b5a4:	b2db      	uxtb	r3, r3
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b5b0:	611a      	str	r2, [r3, #16]
 800b5b2:	e01b      	b.n	800b5ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b5b4:	897b      	ldrh	r3, [r7, #10]
 800b5b6:	11db      	asrs	r3, r3, #7
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	f003 0306 	and.w	r3, r3, #6
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	f063 030f 	orn	r3, r3, #15
 800b5c4:	b2da      	uxtb	r2, r3
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	490e      	ldr	r1, [pc, #56]	@ (800b60c <I2C_MasterRequestWrite+0xfc>)
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	f000 fa16 	bl	800ba04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d001      	beq.n	800b5e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e010      	b.n	800b604 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b5e2:	897b      	ldrh	r3, [r7, #10]
 800b5e4:	b2da      	uxtb	r2, r3
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	4907      	ldr	r1, [pc, #28]	@ (800b610 <I2C_MasterRequestWrite+0x100>)
 800b5f2:	68f8      	ldr	r0, [r7, #12]
 800b5f4:	f000 fa06 	bl	800ba04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d001      	beq.n	800b602 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b5fe:	2301      	movs	r3, #1
 800b600:	e000      	b.n	800b604 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b602:	2300      	movs	r3, #0
}
 800b604:	4618      	mov	r0, r3
 800b606:	3718      	adds	r7, #24
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	00010008 	.word	0x00010008
 800b610:	00010002 	.word	0x00010002

0800b614 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b088      	sub	sp, #32
 800b618:	af02      	add	r7, sp, #8
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	4608      	mov	r0, r1
 800b61e:	4611      	mov	r1, r2
 800b620:	461a      	mov	r2, r3
 800b622:	4603      	mov	r3, r0
 800b624:	817b      	strh	r3, [r7, #10]
 800b626:	460b      	mov	r3, r1
 800b628:	813b      	strh	r3, [r7, #8]
 800b62a:	4613      	mov	r3, r2
 800b62c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b63c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	6a3b      	ldr	r3, [r7, #32]
 800b644:	2200      	movs	r2, #0
 800b646:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b64a:	68f8      	ldr	r0, [r7, #12]
 800b64c:	f000 f960 	bl	800b910 <I2C_WaitOnFlagUntilTimeout>
 800b650:	4603      	mov	r3, r0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00d      	beq.n	800b672 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b660:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b664:	d103      	bne.n	800b66e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b66c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b66e:	2303      	movs	r3, #3
 800b670:	e05f      	b.n	800b732 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b672:	897b      	ldrh	r3, [r7, #10]
 800b674:	b2db      	uxtb	r3, r3
 800b676:	461a      	mov	r2, r3
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b680:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b684:	6a3a      	ldr	r2, [r7, #32]
 800b686:	492d      	ldr	r1, [pc, #180]	@ (800b73c <I2C_RequestMemoryWrite+0x128>)
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f000 f9bb 	bl	800ba04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b68e:	4603      	mov	r3, r0
 800b690:	2b00      	cmp	r3, #0
 800b692:	d001      	beq.n	800b698 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b694:	2301      	movs	r3, #1
 800b696:	e04c      	b.n	800b732 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b698:	2300      	movs	r3, #0
 800b69a:	617b      	str	r3, [r7, #20]
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	695b      	ldr	r3, [r3, #20]
 800b6a2:	617b      	str	r3, [r7, #20]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	699b      	ldr	r3, [r3, #24]
 800b6aa:	617b      	str	r3, [r7, #20]
 800b6ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6b0:	6a39      	ldr	r1, [r7, #32]
 800b6b2:	68f8      	ldr	r0, [r7, #12]
 800b6b4:	f000 fa46 	bl	800bb44 <I2C_WaitOnTXEFlagUntilTimeout>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d00d      	beq.n	800b6da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6c2:	2b04      	cmp	r3, #4
 800b6c4:	d107      	bne.n	800b6d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b6d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e02b      	b.n	800b732 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b6da:	88fb      	ldrh	r3, [r7, #6]
 800b6dc:	2b01      	cmp	r3, #1
 800b6de:	d105      	bne.n	800b6ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b6e0:	893b      	ldrh	r3, [r7, #8]
 800b6e2:	b2da      	uxtb	r2, r3
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	611a      	str	r2, [r3, #16]
 800b6ea:	e021      	b.n	800b730 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b6ec:	893b      	ldrh	r3, [r7, #8]
 800b6ee:	0a1b      	lsrs	r3, r3, #8
 800b6f0:	b29b      	uxth	r3, r3
 800b6f2:	b2da      	uxtb	r2, r3
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6fc:	6a39      	ldr	r1, [r7, #32]
 800b6fe:	68f8      	ldr	r0, [r7, #12]
 800b700:	f000 fa20 	bl	800bb44 <I2C_WaitOnTXEFlagUntilTimeout>
 800b704:	4603      	mov	r3, r0
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00d      	beq.n	800b726 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b70e:	2b04      	cmp	r3, #4
 800b710:	d107      	bne.n	800b722 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	681a      	ldr	r2, [r3, #0]
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b720:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	e005      	b.n	800b732 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b726:	893b      	ldrh	r3, [r7, #8]
 800b728:	b2da      	uxtb	r2, r3
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b730:	2300      	movs	r3, #0
}
 800b732:	4618      	mov	r0, r3
 800b734:	3718      	adds	r7, #24
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	00010002 	.word	0x00010002

0800b740 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b088      	sub	sp, #32
 800b744:	af02      	add	r7, sp, #8
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	4608      	mov	r0, r1
 800b74a:	4611      	mov	r1, r2
 800b74c:	461a      	mov	r2, r3
 800b74e:	4603      	mov	r3, r0
 800b750:	817b      	strh	r3, [r7, #10]
 800b752:	460b      	mov	r3, r1
 800b754:	813b      	strh	r3, [r7, #8]
 800b756:	4613      	mov	r3, r2
 800b758:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	681a      	ldr	r2, [r3, #0]
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b768:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b778:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b77a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b77c:	9300      	str	r3, [sp, #0]
 800b77e:	6a3b      	ldr	r3, [r7, #32]
 800b780:	2200      	movs	r2, #0
 800b782:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b786:	68f8      	ldr	r0, [r7, #12]
 800b788:	f000 f8c2 	bl	800b910 <I2C_WaitOnFlagUntilTimeout>
 800b78c:	4603      	mov	r3, r0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d00d      	beq.n	800b7ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b79c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7a0:	d103      	bne.n	800b7aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b7a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b7aa:	2303      	movs	r3, #3
 800b7ac:	e0aa      	b.n	800b904 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b7ae:	897b      	ldrh	r3, [r7, #10]
 800b7b0:	b2db      	uxtb	r3, r3
 800b7b2:	461a      	mov	r2, r3
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b7bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7c0:	6a3a      	ldr	r2, [r7, #32]
 800b7c2:	4952      	ldr	r1, [pc, #328]	@ (800b90c <I2C_RequestMemoryRead+0x1cc>)
 800b7c4:	68f8      	ldr	r0, [r7, #12]
 800b7c6:	f000 f91d 	bl	800ba04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d001      	beq.n	800b7d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	e097      	b.n	800b904 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	617b      	str	r3, [r7, #20]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	695b      	ldr	r3, [r3, #20]
 800b7de:	617b      	str	r3, [r7, #20]
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	699b      	ldr	r3, [r3, #24]
 800b7e6:	617b      	str	r3, [r7, #20]
 800b7e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b7ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b7ec:	6a39      	ldr	r1, [r7, #32]
 800b7ee:	68f8      	ldr	r0, [r7, #12]
 800b7f0:	f000 f9a8 	bl	800bb44 <I2C_WaitOnTXEFlagUntilTimeout>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d00d      	beq.n	800b816 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7fe:	2b04      	cmp	r3, #4
 800b800:	d107      	bne.n	800b812 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	681a      	ldr	r2, [r3, #0]
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b810:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	e076      	b.n	800b904 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b816:	88fb      	ldrh	r3, [r7, #6]
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d105      	bne.n	800b828 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b81c:	893b      	ldrh	r3, [r7, #8]
 800b81e:	b2da      	uxtb	r2, r3
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	611a      	str	r2, [r3, #16]
 800b826:	e021      	b.n	800b86c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b828:	893b      	ldrh	r3, [r7, #8]
 800b82a:	0a1b      	lsrs	r3, r3, #8
 800b82c:	b29b      	uxth	r3, r3
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b838:	6a39      	ldr	r1, [r7, #32]
 800b83a:	68f8      	ldr	r0, [r7, #12]
 800b83c:	f000 f982 	bl	800bb44 <I2C_WaitOnTXEFlagUntilTimeout>
 800b840:	4603      	mov	r3, r0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00d      	beq.n	800b862 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b84a:	2b04      	cmp	r3, #4
 800b84c:	d107      	bne.n	800b85e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b85c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b85e:	2301      	movs	r3, #1
 800b860:	e050      	b.n	800b904 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b862:	893b      	ldrh	r3, [r7, #8]
 800b864:	b2da      	uxtb	r2, r3
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b86c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b86e:	6a39      	ldr	r1, [r7, #32]
 800b870:	68f8      	ldr	r0, [r7, #12]
 800b872:	f000 f967 	bl	800bb44 <I2C_WaitOnTXEFlagUntilTimeout>
 800b876:	4603      	mov	r3, r0
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00d      	beq.n	800b898 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b880:	2b04      	cmp	r3, #4
 800b882:	d107      	bne.n	800b894 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b892:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b894:	2301      	movs	r3, #1
 800b896:	e035      	b.n	800b904 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b8a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8aa:	9300      	str	r3, [sp, #0]
 800b8ac:	6a3b      	ldr	r3, [r7, #32]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f000 f82b 	bl	800b910 <I2C_WaitOnFlagUntilTimeout>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d00d      	beq.n	800b8dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b8ce:	d103      	bne.n	800b8d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b8d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b8d8:	2303      	movs	r3, #3
 800b8da:	e013      	b.n	800b904 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b8dc:	897b      	ldrh	r3, [r7, #10]
 800b8de:	b2db      	uxtb	r3, r3
 800b8e0:	f043 0301 	orr.w	r3, r3, #1
 800b8e4:	b2da      	uxtb	r2, r3
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ee:	6a3a      	ldr	r2, [r7, #32]
 800b8f0:	4906      	ldr	r1, [pc, #24]	@ (800b90c <I2C_RequestMemoryRead+0x1cc>)
 800b8f2:	68f8      	ldr	r0, [r7, #12]
 800b8f4:	f000 f886 	bl	800ba04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d001      	beq.n	800b902 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b8fe:	2301      	movs	r3, #1
 800b900:	e000      	b.n	800b904 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b902:	2300      	movs	r3, #0
}
 800b904:	4618      	mov	r0, r3
 800b906:	3718      	adds	r7, #24
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}
 800b90c:	00010002 	.word	0x00010002

0800b910 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	603b      	str	r3, [r7, #0]
 800b91c:	4613      	mov	r3, r2
 800b91e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b920:	e048      	b.n	800b9b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b928:	d044      	beq.n	800b9b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b92a:	f7fe f9d7 	bl	8009cdc <HAL_GetTick>
 800b92e:	4602      	mov	r2, r0
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	1ad3      	subs	r3, r2, r3
 800b934:	683a      	ldr	r2, [r7, #0]
 800b936:	429a      	cmp	r2, r3
 800b938:	d302      	bcc.n	800b940 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d139      	bne.n	800b9b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b940:	68bb      	ldr	r3, [r7, #8]
 800b942:	0c1b      	lsrs	r3, r3, #16
 800b944:	b2db      	uxtb	r3, r3
 800b946:	2b01      	cmp	r3, #1
 800b948:	d10d      	bne.n	800b966 <I2C_WaitOnFlagUntilTimeout+0x56>
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	695b      	ldr	r3, [r3, #20]
 800b950:	43da      	mvns	r2, r3
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	4013      	ands	r3, r2
 800b956:	b29b      	uxth	r3, r3
 800b958:	2b00      	cmp	r3, #0
 800b95a:	bf0c      	ite	eq
 800b95c:	2301      	moveq	r3, #1
 800b95e:	2300      	movne	r3, #0
 800b960:	b2db      	uxtb	r3, r3
 800b962:	461a      	mov	r2, r3
 800b964:	e00c      	b.n	800b980 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	699b      	ldr	r3, [r3, #24]
 800b96c:	43da      	mvns	r2, r3
 800b96e:	68bb      	ldr	r3, [r7, #8]
 800b970:	4013      	ands	r3, r2
 800b972:	b29b      	uxth	r3, r3
 800b974:	2b00      	cmp	r3, #0
 800b976:	bf0c      	ite	eq
 800b978:	2301      	moveq	r3, #1
 800b97a:	2300      	movne	r3, #0
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	461a      	mov	r2, r3
 800b980:	79fb      	ldrb	r3, [r7, #7]
 800b982:	429a      	cmp	r2, r3
 800b984:	d116      	bne.n	800b9b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	2200      	movs	r2, #0
 800b98a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	2220      	movs	r2, #32
 800b990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9a0:	f043 0220 	orr.w	r2, r3, #32
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	e023      	b.n	800b9fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b9b4:	68bb      	ldr	r3, [r7, #8]
 800b9b6:	0c1b      	lsrs	r3, r3, #16
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d10d      	bne.n	800b9da <I2C_WaitOnFlagUntilTimeout+0xca>
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	695b      	ldr	r3, [r3, #20]
 800b9c4:	43da      	mvns	r2, r3
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	4013      	ands	r3, r2
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	bf0c      	ite	eq
 800b9d0:	2301      	moveq	r3, #1
 800b9d2:	2300      	movne	r3, #0
 800b9d4:	b2db      	uxtb	r3, r3
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	e00c      	b.n	800b9f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	699b      	ldr	r3, [r3, #24]
 800b9e0:	43da      	mvns	r2, r3
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	4013      	ands	r3, r2
 800b9e6:	b29b      	uxth	r3, r3
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	bf0c      	ite	eq
 800b9ec:	2301      	moveq	r3, #1
 800b9ee:	2300      	movne	r3, #0
 800b9f0:	b2db      	uxtb	r3, r3
 800b9f2:	461a      	mov	r2, r3
 800b9f4:	79fb      	ldrb	r3, [r7, #7]
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d093      	beq.n	800b922 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b9fa:	2300      	movs	r3, #0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3710      	adds	r7, #16
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	60b9      	str	r1, [r7, #8]
 800ba0e:	607a      	str	r2, [r7, #4]
 800ba10:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ba12:	e071      	b.n	800baf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	695b      	ldr	r3, [r3, #20]
 800ba1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba22:	d123      	bne.n	800ba6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	681a      	ldr	r2, [r3, #0]
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ba32:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ba3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	2200      	movs	r2, #0
 800ba42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2220      	movs	r2, #32
 800ba48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba58:	f043 0204 	orr.w	r2, r3, #4
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2200      	movs	r2, #0
 800ba64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	e067      	b.n	800bb3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba72:	d041      	beq.n	800baf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba74:	f7fe f932 	bl	8009cdc <HAL_GetTick>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	1ad3      	subs	r3, r2, r3
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	429a      	cmp	r2, r3
 800ba82:	d302      	bcc.n	800ba8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d136      	bne.n	800baf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	0c1b      	lsrs	r3, r3, #16
 800ba8e:	b2db      	uxtb	r3, r3
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d10c      	bne.n	800baae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	695b      	ldr	r3, [r3, #20]
 800ba9a:	43da      	mvns	r2, r3
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	4013      	ands	r3, r2
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	bf14      	ite	ne
 800baa6:	2301      	movne	r3, #1
 800baa8:	2300      	moveq	r3, #0
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	e00b      	b.n	800bac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	699b      	ldr	r3, [r3, #24]
 800bab4:	43da      	mvns	r2, r3
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	4013      	ands	r3, r2
 800baba:	b29b      	uxth	r3, r3
 800babc:	2b00      	cmp	r3, #0
 800babe:	bf14      	ite	ne
 800bac0:	2301      	movne	r3, #1
 800bac2:	2300      	moveq	r3, #0
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d016      	beq.n	800baf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2200      	movs	r2, #0
 800bace:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	2220      	movs	r2, #32
 800bad4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2200      	movs	r2, #0
 800badc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bae4:	f043 0220 	orr.w	r2, r3, #32
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2200      	movs	r2, #0
 800baf0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800baf4:	2301      	movs	r3, #1
 800baf6:	e021      	b.n	800bb3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800baf8:	68bb      	ldr	r3, [r7, #8]
 800bafa:	0c1b      	lsrs	r3, r3, #16
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	2b01      	cmp	r3, #1
 800bb00:	d10c      	bne.n	800bb1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	695b      	ldr	r3, [r3, #20]
 800bb08:	43da      	mvns	r2, r3
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	bf14      	ite	ne
 800bb14:	2301      	movne	r3, #1
 800bb16:	2300      	moveq	r3, #0
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	e00b      	b.n	800bb34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	699b      	ldr	r3, [r3, #24]
 800bb22:	43da      	mvns	r2, r3
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	4013      	ands	r3, r2
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	bf14      	ite	ne
 800bb2e:	2301      	movne	r3, #1
 800bb30:	2300      	moveq	r3, #0
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	f47f af6d 	bne.w	800ba14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800bb3a:	2300      	movs	r3, #0
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b084      	sub	sp, #16
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bb50:	e034      	b.n	800bbbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bb52:	68f8      	ldr	r0, [r7, #12]
 800bb54:	f000 f8e3 	bl	800bd1e <I2C_IsAcknowledgeFailed>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d001      	beq.n	800bb62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e034      	b.n	800bbcc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bb68:	d028      	beq.n	800bbbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb6a:	f7fe f8b7 	bl	8009cdc <HAL_GetTick>
 800bb6e:	4602      	mov	r2, r0
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	1ad3      	subs	r3, r2, r3
 800bb74:	68ba      	ldr	r2, [r7, #8]
 800bb76:	429a      	cmp	r2, r3
 800bb78:	d302      	bcc.n	800bb80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d11d      	bne.n	800bbbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	695b      	ldr	r3, [r3, #20]
 800bb86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb8a:	2b80      	cmp	r3, #128	@ 0x80
 800bb8c:	d016      	beq.n	800bbbc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2200      	movs	r2, #0
 800bb92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2220      	movs	r2, #32
 800bb98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bba8:	f043 0220 	orr.w	r2, r3, #32
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	e007      	b.n	800bbcc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	695b      	ldr	r3, [r3, #20]
 800bbc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bbc6:	2b80      	cmp	r3, #128	@ 0x80
 800bbc8:	d1c3      	bne.n	800bb52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bbca:	2300      	movs	r3, #0
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3710      	adds	r7, #16
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bbe0:	e034      	b.n	800bc4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bbe2:	68f8      	ldr	r0, [r7, #12]
 800bbe4:	f000 f89b 	bl	800bd1e <I2C_IsAcknowledgeFailed>
 800bbe8:	4603      	mov	r3, r0
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d001      	beq.n	800bbf2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	e034      	b.n	800bc5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bbf8:	d028      	beq.n	800bc4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbfa:	f7fe f86f 	bl	8009cdc <HAL_GetTick>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	1ad3      	subs	r3, r2, r3
 800bc04:	68ba      	ldr	r2, [r7, #8]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d302      	bcc.n	800bc10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d11d      	bne.n	800bc4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	695b      	ldr	r3, [r3, #20]
 800bc16:	f003 0304 	and.w	r3, r3, #4
 800bc1a:	2b04      	cmp	r3, #4
 800bc1c:	d016      	beq.n	800bc4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	2200      	movs	r2, #0
 800bc22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	2220      	movs	r2, #32
 800bc28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc38:	f043 0220 	orr.w	r2, r3, #32
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2200      	movs	r2, #0
 800bc44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	e007      	b.n	800bc5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	695b      	ldr	r3, [r3, #20]
 800bc52:	f003 0304 	and.w	r3, r3, #4
 800bc56:	2b04      	cmp	r3, #4
 800bc58:	d1c3      	bne.n	800bbe2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bc5a:	2300      	movs	r3, #0
}
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	3710      	adds	r7, #16
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b084      	sub	sp, #16
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bc70:	e049      	b.n	800bd06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	695b      	ldr	r3, [r3, #20]
 800bc78:	f003 0310 	and.w	r3, r3, #16
 800bc7c:	2b10      	cmp	r3, #16
 800bc7e:	d119      	bne.n	800bcb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f06f 0210 	mvn.w	r2, #16
 800bc88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2220      	movs	r2, #32
 800bc94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	e030      	b.n	800bd16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bcb4:	f7fe f812 	bl	8009cdc <HAL_GetTick>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	1ad3      	subs	r3, r2, r3
 800bcbe:	68ba      	ldr	r2, [r7, #8]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d302      	bcc.n	800bcca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d11d      	bne.n	800bd06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	695b      	ldr	r3, [r3, #20]
 800bcd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcd4:	2b40      	cmp	r3, #64	@ 0x40
 800bcd6:	d016      	beq.n	800bd06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2220      	movs	r2, #32
 800bce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	2200      	movs	r2, #0
 800bcea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bcf2:	f043 0220 	orr.w	r2, r3, #32
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800bd02:	2301      	movs	r3, #1
 800bd04:	e007      	b.n	800bd16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	695b      	ldr	r3, [r3, #20]
 800bd0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd10:	2b40      	cmp	r3, #64	@ 0x40
 800bd12:	d1ae      	bne.n	800bc72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3710      	adds	r7, #16
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bd1e:	b480      	push	{r7}
 800bd20:	b083      	sub	sp, #12
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	695b      	ldr	r3, [r3, #20]
 800bd2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bd30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bd34:	d11b      	bne.n	800bd6e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800bd3e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2220      	movs	r2, #32
 800bd4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bd5a:	f043 0204 	orr.w	r2, r3, #4
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	2200      	movs	r2, #0
 800bd66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	e000      	b.n	800bd70 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bc80      	pop	{r7}
 800bd78:	4770      	bx	lr
	...

0800bd7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b086      	sub	sp, #24
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d101      	bne.n	800bd8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	e272      	b.n	800c274 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f003 0301 	and.w	r3, r3, #1
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	f000 8087 	beq.w	800beaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bd9c:	4b92      	ldr	r3, [pc, #584]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800bd9e:	685b      	ldr	r3, [r3, #4]
 800bda0:	f003 030c 	and.w	r3, r3, #12
 800bda4:	2b04      	cmp	r3, #4
 800bda6:	d00c      	beq.n	800bdc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800bda8:	4b8f      	ldr	r3, [pc, #572]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800bdaa:	685b      	ldr	r3, [r3, #4]
 800bdac:	f003 030c 	and.w	r3, r3, #12
 800bdb0:	2b08      	cmp	r3, #8
 800bdb2:	d112      	bne.n	800bdda <HAL_RCC_OscConfig+0x5e>
 800bdb4:	4b8c      	ldr	r3, [pc, #560]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800bdb6:	685b      	ldr	r3, [r3, #4]
 800bdb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bdbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bdc0:	d10b      	bne.n	800bdda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bdc2:	4b89      	ldr	r3, [pc, #548]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d06c      	beq.n	800bea8 <HAL_RCC_OscConfig+0x12c>
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d168      	bne.n	800bea8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	e24c      	b.n	800c274 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bde2:	d106      	bne.n	800bdf2 <HAL_RCC_OscConfig+0x76>
 800bde4:	4b80      	ldr	r3, [pc, #512]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a7f      	ldr	r2, [pc, #508]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800bdea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bdee:	6013      	str	r3, [r2, #0]
 800bdf0:	e02e      	b.n	800be50 <HAL_RCC_OscConfig+0xd4>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	685b      	ldr	r3, [r3, #4]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d10c      	bne.n	800be14 <HAL_RCC_OscConfig+0x98>
 800bdfa:	4b7b      	ldr	r3, [pc, #492]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4a7a      	ldr	r2, [pc, #488]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800be00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be04:	6013      	str	r3, [r2, #0]
 800be06:	4b78      	ldr	r3, [pc, #480]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4a77      	ldr	r2, [pc, #476]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800be0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800be10:	6013      	str	r3, [r2, #0]
 800be12:	e01d      	b.n	800be50 <HAL_RCC_OscConfig+0xd4>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800be1c:	d10c      	bne.n	800be38 <HAL_RCC_OscConfig+0xbc>
 800be1e:	4b72      	ldr	r3, [pc, #456]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	4a71      	ldr	r2, [pc, #452]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800be24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800be28:	6013      	str	r3, [r2, #0]
 800be2a:	4b6f      	ldr	r3, [pc, #444]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4a6e      	ldr	r2, [pc, #440]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800be30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be34:	6013      	str	r3, [r2, #0]
 800be36:	e00b      	b.n	800be50 <HAL_RCC_OscConfig+0xd4>
 800be38:	4b6b      	ldr	r3, [pc, #428]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	4a6a      	ldr	r2, [pc, #424]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800be3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be42:	6013      	str	r3, [r2, #0]
 800be44:	4b68      	ldr	r3, [pc, #416]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	4a67      	ldr	r2, [pc, #412]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800be4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800be4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d013      	beq.n	800be80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be58:	f7fd ff40 	bl	8009cdc <HAL_GetTick>
 800be5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be5e:	e008      	b.n	800be72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be60:	f7fd ff3c 	bl	8009cdc <HAL_GetTick>
 800be64:	4602      	mov	r2, r0
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	1ad3      	subs	r3, r2, r3
 800be6a:	2b64      	cmp	r3, #100	@ 0x64
 800be6c:	d901      	bls.n	800be72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800be6e:	2303      	movs	r3, #3
 800be70:	e200      	b.n	800c274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be72:	4b5d      	ldr	r3, [pc, #372]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d0f0      	beq.n	800be60 <HAL_RCC_OscConfig+0xe4>
 800be7e:	e014      	b.n	800beaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be80:	f7fd ff2c 	bl	8009cdc <HAL_GetTick>
 800be84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800be86:	e008      	b.n	800be9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be88:	f7fd ff28 	bl	8009cdc <HAL_GetTick>
 800be8c:	4602      	mov	r2, r0
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	1ad3      	subs	r3, r2, r3
 800be92:	2b64      	cmp	r3, #100	@ 0x64
 800be94:	d901      	bls.n	800be9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800be96:	2303      	movs	r3, #3
 800be98:	e1ec      	b.n	800c274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800be9a:	4b53      	ldr	r3, [pc, #332]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d1f0      	bne.n	800be88 <HAL_RCC_OscConfig+0x10c>
 800bea6:	e000      	b.n	800beaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f003 0302 	and.w	r3, r3, #2
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d063      	beq.n	800bf7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800beb6:	4b4c      	ldr	r3, [pc, #304]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	f003 030c 	and.w	r3, r3, #12
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d00b      	beq.n	800beda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800bec2:	4b49      	ldr	r3, [pc, #292]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800bec4:	685b      	ldr	r3, [r3, #4]
 800bec6:	f003 030c 	and.w	r3, r3, #12
 800beca:	2b08      	cmp	r3, #8
 800becc:	d11c      	bne.n	800bf08 <HAL_RCC_OscConfig+0x18c>
 800bece:	4b46      	ldr	r3, [pc, #280]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d116      	bne.n	800bf08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800beda:	4b43      	ldr	r3, [pc, #268]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f003 0302 	and.w	r3, r3, #2
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d005      	beq.n	800bef2 <HAL_RCC_OscConfig+0x176>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	691b      	ldr	r3, [r3, #16]
 800beea:	2b01      	cmp	r3, #1
 800beec:	d001      	beq.n	800bef2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800beee:	2301      	movs	r3, #1
 800bef0:	e1c0      	b.n	800c274 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bef2:	4b3d      	ldr	r3, [pc, #244]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	695b      	ldr	r3, [r3, #20]
 800befe:	00db      	lsls	r3, r3, #3
 800bf00:	4939      	ldr	r1, [pc, #228]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800bf02:	4313      	orrs	r3, r2
 800bf04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bf06:	e03a      	b.n	800bf7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	691b      	ldr	r3, [r3, #16]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d020      	beq.n	800bf52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bf10:	4b36      	ldr	r3, [pc, #216]	@ (800bfec <HAL_RCC_OscConfig+0x270>)
 800bf12:	2201      	movs	r2, #1
 800bf14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf16:	f7fd fee1 	bl	8009cdc <HAL_GetTick>
 800bf1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf1c:	e008      	b.n	800bf30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf1e:	f7fd fedd 	bl	8009cdc <HAL_GetTick>
 800bf22:	4602      	mov	r2, r0
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	1ad3      	subs	r3, r2, r3
 800bf28:	2b02      	cmp	r3, #2
 800bf2a:	d901      	bls.n	800bf30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800bf2c:	2303      	movs	r3, #3
 800bf2e:	e1a1      	b.n	800c274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf30:	4b2d      	ldr	r3, [pc, #180]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f003 0302 	and.w	r3, r3, #2
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d0f0      	beq.n	800bf1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf3c:	4b2a      	ldr	r3, [pc, #168]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	695b      	ldr	r3, [r3, #20]
 800bf48:	00db      	lsls	r3, r3, #3
 800bf4a:	4927      	ldr	r1, [pc, #156]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800bf4c:	4313      	orrs	r3, r2
 800bf4e:	600b      	str	r3, [r1, #0]
 800bf50:	e015      	b.n	800bf7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bf52:	4b26      	ldr	r3, [pc, #152]	@ (800bfec <HAL_RCC_OscConfig+0x270>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf58:	f7fd fec0 	bl	8009cdc <HAL_GetTick>
 800bf5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bf5e:	e008      	b.n	800bf72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf60:	f7fd febc 	bl	8009cdc <HAL_GetTick>
 800bf64:	4602      	mov	r2, r0
 800bf66:	693b      	ldr	r3, [r7, #16]
 800bf68:	1ad3      	subs	r3, r2, r3
 800bf6a:	2b02      	cmp	r3, #2
 800bf6c:	d901      	bls.n	800bf72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800bf6e:	2303      	movs	r3, #3
 800bf70:	e180      	b.n	800c274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bf72:	4b1d      	ldr	r3, [pc, #116]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f003 0302 	and.w	r3, r3, #2
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d1f0      	bne.n	800bf60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f003 0308 	and.w	r3, r3, #8
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d03a      	beq.n	800c000 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	699b      	ldr	r3, [r3, #24]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d019      	beq.n	800bfc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bf92:	4b17      	ldr	r3, [pc, #92]	@ (800bff0 <HAL_RCC_OscConfig+0x274>)
 800bf94:	2201      	movs	r2, #1
 800bf96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bf98:	f7fd fea0 	bl	8009cdc <HAL_GetTick>
 800bf9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bf9e:	e008      	b.n	800bfb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bfa0:	f7fd fe9c 	bl	8009cdc <HAL_GetTick>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	693b      	ldr	r3, [r7, #16]
 800bfa8:	1ad3      	subs	r3, r2, r3
 800bfaa:	2b02      	cmp	r3, #2
 800bfac:	d901      	bls.n	800bfb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800bfae:	2303      	movs	r3, #3
 800bfb0:	e160      	b.n	800c274 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bfb2:	4b0d      	ldr	r3, [pc, #52]	@ (800bfe8 <HAL_RCC_OscConfig+0x26c>)
 800bfb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfb6:	f003 0302 	and.w	r3, r3, #2
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d0f0      	beq.n	800bfa0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800bfbe:	2001      	movs	r0, #1
 800bfc0:	f000 face 	bl	800c560 <RCC_Delay>
 800bfc4:	e01c      	b.n	800c000 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bfc6:	4b0a      	ldr	r3, [pc, #40]	@ (800bff0 <HAL_RCC_OscConfig+0x274>)
 800bfc8:	2200      	movs	r2, #0
 800bfca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bfcc:	f7fd fe86 	bl	8009cdc <HAL_GetTick>
 800bfd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bfd2:	e00f      	b.n	800bff4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bfd4:	f7fd fe82 	bl	8009cdc <HAL_GetTick>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	1ad3      	subs	r3, r2, r3
 800bfde:	2b02      	cmp	r3, #2
 800bfe0:	d908      	bls.n	800bff4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800bfe2:	2303      	movs	r3, #3
 800bfe4:	e146      	b.n	800c274 <HAL_RCC_OscConfig+0x4f8>
 800bfe6:	bf00      	nop
 800bfe8:	40021000 	.word	0x40021000
 800bfec:	42420000 	.word	0x42420000
 800bff0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bff4:	4b92      	ldr	r3, [pc, #584]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800bff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bff8:	f003 0302 	and.w	r3, r3, #2
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d1e9      	bne.n	800bfd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f003 0304 	and.w	r3, r3, #4
 800c008:	2b00      	cmp	r3, #0
 800c00a:	f000 80a6 	beq.w	800c15a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c00e:	2300      	movs	r3, #0
 800c010:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c012:	4b8b      	ldr	r3, [pc, #556]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c014:	69db      	ldr	r3, [r3, #28]
 800c016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d10d      	bne.n	800c03a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c01e:	4b88      	ldr	r3, [pc, #544]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c020:	69db      	ldr	r3, [r3, #28]
 800c022:	4a87      	ldr	r2, [pc, #540]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c028:	61d3      	str	r3, [r2, #28]
 800c02a:	4b85      	ldr	r3, [pc, #532]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c02c:	69db      	ldr	r3, [r3, #28]
 800c02e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c032:	60bb      	str	r3, [r7, #8]
 800c034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c036:	2301      	movs	r3, #1
 800c038:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c03a:	4b82      	ldr	r3, [pc, #520]	@ (800c244 <HAL_RCC_OscConfig+0x4c8>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c042:	2b00      	cmp	r3, #0
 800c044:	d118      	bne.n	800c078 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c046:	4b7f      	ldr	r3, [pc, #508]	@ (800c244 <HAL_RCC_OscConfig+0x4c8>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4a7e      	ldr	r2, [pc, #504]	@ (800c244 <HAL_RCC_OscConfig+0x4c8>)
 800c04c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c052:	f7fd fe43 	bl	8009cdc <HAL_GetTick>
 800c056:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c058:	e008      	b.n	800c06c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c05a:	f7fd fe3f 	bl	8009cdc <HAL_GetTick>
 800c05e:	4602      	mov	r2, r0
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	1ad3      	subs	r3, r2, r3
 800c064:	2b64      	cmp	r3, #100	@ 0x64
 800c066:	d901      	bls.n	800c06c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800c068:	2303      	movs	r3, #3
 800c06a:	e103      	b.n	800c274 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c06c:	4b75      	ldr	r3, [pc, #468]	@ (800c244 <HAL_RCC_OscConfig+0x4c8>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c074:	2b00      	cmp	r3, #0
 800c076:	d0f0      	beq.n	800c05a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d106      	bne.n	800c08e <HAL_RCC_OscConfig+0x312>
 800c080:	4b6f      	ldr	r3, [pc, #444]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c082:	6a1b      	ldr	r3, [r3, #32]
 800c084:	4a6e      	ldr	r2, [pc, #440]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c086:	f043 0301 	orr.w	r3, r3, #1
 800c08a:	6213      	str	r3, [r2, #32]
 800c08c:	e02d      	b.n	800c0ea <HAL_RCC_OscConfig+0x36e>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d10c      	bne.n	800c0b0 <HAL_RCC_OscConfig+0x334>
 800c096:	4b6a      	ldr	r3, [pc, #424]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c098:	6a1b      	ldr	r3, [r3, #32]
 800c09a:	4a69      	ldr	r2, [pc, #420]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c09c:	f023 0301 	bic.w	r3, r3, #1
 800c0a0:	6213      	str	r3, [r2, #32]
 800c0a2:	4b67      	ldr	r3, [pc, #412]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c0a4:	6a1b      	ldr	r3, [r3, #32]
 800c0a6:	4a66      	ldr	r2, [pc, #408]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c0a8:	f023 0304 	bic.w	r3, r3, #4
 800c0ac:	6213      	str	r3, [r2, #32]
 800c0ae:	e01c      	b.n	800c0ea <HAL_RCC_OscConfig+0x36e>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	68db      	ldr	r3, [r3, #12]
 800c0b4:	2b05      	cmp	r3, #5
 800c0b6:	d10c      	bne.n	800c0d2 <HAL_RCC_OscConfig+0x356>
 800c0b8:	4b61      	ldr	r3, [pc, #388]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c0ba:	6a1b      	ldr	r3, [r3, #32]
 800c0bc:	4a60      	ldr	r2, [pc, #384]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c0be:	f043 0304 	orr.w	r3, r3, #4
 800c0c2:	6213      	str	r3, [r2, #32]
 800c0c4:	4b5e      	ldr	r3, [pc, #376]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c0c6:	6a1b      	ldr	r3, [r3, #32]
 800c0c8:	4a5d      	ldr	r2, [pc, #372]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c0ca:	f043 0301 	orr.w	r3, r3, #1
 800c0ce:	6213      	str	r3, [r2, #32]
 800c0d0:	e00b      	b.n	800c0ea <HAL_RCC_OscConfig+0x36e>
 800c0d2:	4b5b      	ldr	r3, [pc, #364]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c0d4:	6a1b      	ldr	r3, [r3, #32]
 800c0d6:	4a5a      	ldr	r2, [pc, #360]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c0d8:	f023 0301 	bic.w	r3, r3, #1
 800c0dc:	6213      	str	r3, [r2, #32]
 800c0de:	4b58      	ldr	r3, [pc, #352]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c0e0:	6a1b      	ldr	r3, [r3, #32]
 800c0e2:	4a57      	ldr	r2, [pc, #348]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c0e4:	f023 0304 	bic.w	r3, r3, #4
 800c0e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	68db      	ldr	r3, [r3, #12]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d015      	beq.n	800c11e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c0f2:	f7fd fdf3 	bl	8009cdc <HAL_GetTick>
 800c0f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c0f8:	e00a      	b.n	800c110 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0fa:	f7fd fdef 	bl	8009cdc <HAL_GetTick>
 800c0fe:	4602      	mov	r2, r0
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	1ad3      	subs	r3, r2, r3
 800c104:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c108:	4293      	cmp	r3, r2
 800c10a:	d901      	bls.n	800c110 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800c10c:	2303      	movs	r3, #3
 800c10e:	e0b1      	b.n	800c274 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c110:	4b4b      	ldr	r3, [pc, #300]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c112:	6a1b      	ldr	r3, [r3, #32]
 800c114:	f003 0302 	and.w	r3, r3, #2
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d0ee      	beq.n	800c0fa <HAL_RCC_OscConfig+0x37e>
 800c11c:	e014      	b.n	800c148 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c11e:	f7fd fddd 	bl	8009cdc <HAL_GetTick>
 800c122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c124:	e00a      	b.n	800c13c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c126:	f7fd fdd9 	bl	8009cdc <HAL_GetTick>
 800c12a:	4602      	mov	r2, r0
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	1ad3      	subs	r3, r2, r3
 800c130:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c134:	4293      	cmp	r3, r2
 800c136:	d901      	bls.n	800c13c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800c138:	2303      	movs	r3, #3
 800c13a:	e09b      	b.n	800c274 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c13c:	4b40      	ldr	r3, [pc, #256]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c13e:	6a1b      	ldr	r3, [r3, #32]
 800c140:	f003 0302 	and.w	r3, r3, #2
 800c144:	2b00      	cmp	r3, #0
 800c146:	d1ee      	bne.n	800c126 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800c148:	7dfb      	ldrb	r3, [r7, #23]
 800c14a:	2b01      	cmp	r3, #1
 800c14c:	d105      	bne.n	800c15a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c14e:	4b3c      	ldr	r3, [pc, #240]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c150:	69db      	ldr	r3, [r3, #28]
 800c152:	4a3b      	ldr	r2, [pc, #236]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c154:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c158:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	69db      	ldr	r3, [r3, #28]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	f000 8087 	beq.w	800c272 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c164:	4b36      	ldr	r3, [pc, #216]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	f003 030c 	and.w	r3, r3, #12
 800c16c:	2b08      	cmp	r3, #8
 800c16e:	d061      	beq.n	800c234 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	69db      	ldr	r3, [r3, #28]
 800c174:	2b02      	cmp	r3, #2
 800c176:	d146      	bne.n	800c206 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c178:	4b33      	ldr	r3, [pc, #204]	@ (800c248 <HAL_RCC_OscConfig+0x4cc>)
 800c17a:	2200      	movs	r2, #0
 800c17c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c17e:	f7fd fdad 	bl	8009cdc <HAL_GetTick>
 800c182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c184:	e008      	b.n	800c198 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c186:	f7fd fda9 	bl	8009cdc <HAL_GetTick>
 800c18a:	4602      	mov	r2, r0
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	1ad3      	subs	r3, r2, r3
 800c190:	2b02      	cmp	r3, #2
 800c192:	d901      	bls.n	800c198 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800c194:	2303      	movs	r3, #3
 800c196:	e06d      	b.n	800c274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c198:	4b29      	ldr	r3, [pc, #164]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d1f0      	bne.n	800c186 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	6a1b      	ldr	r3, [r3, #32]
 800c1a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1ac:	d108      	bne.n	800c1c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800c1ae:	4b24      	ldr	r3, [pc, #144]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	689b      	ldr	r3, [r3, #8]
 800c1ba:	4921      	ldr	r1, [pc, #132]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c1c0:	4b1f      	ldr	r3, [pc, #124]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	6a19      	ldr	r1, [r3, #32]
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1d0:	430b      	orrs	r3, r1
 800c1d2:	491b      	ldr	r1, [pc, #108]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c1d8:	4b1b      	ldr	r3, [pc, #108]	@ (800c248 <HAL_RCC_OscConfig+0x4cc>)
 800c1da:	2201      	movs	r2, #1
 800c1dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c1de:	f7fd fd7d 	bl	8009cdc <HAL_GetTick>
 800c1e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c1e4:	e008      	b.n	800c1f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1e6:	f7fd fd79 	bl	8009cdc <HAL_GetTick>
 800c1ea:	4602      	mov	r2, r0
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	1ad3      	subs	r3, r2, r3
 800c1f0:	2b02      	cmp	r3, #2
 800c1f2:	d901      	bls.n	800c1f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800c1f4:	2303      	movs	r3, #3
 800c1f6:	e03d      	b.n	800c274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c1f8:	4b11      	ldr	r3, [pc, #68]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c200:	2b00      	cmp	r3, #0
 800c202:	d0f0      	beq.n	800c1e6 <HAL_RCC_OscConfig+0x46a>
 800c204:	e035      	b.n	800c272 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c206:	4b10      	ldr	r3, [pc, #64]	@ (800c248 <HAL_RCC_OscConfig+0x4cc>)
 800c208:	2200      	movs	r2, #0
 800c20a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c20c:	f7fd fd66 	bl	8009cdc <HAL_GetTick>
 800c210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c212:	e008      	b.n	800c226 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c214:	f7fd fd62 	bl	8009cdc <HAL_GetTick>
 800c218:	4602      	mov	r2, r0
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	1ad3      	subs	r3, r2, r3
 800c21e:	2b02      	cmp	r3, #2
 800c220:	d901      	bls.n	800c226 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800c222:	2303      	movs	r3, #3
 800c224:	e026      	b.n	800c274 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c226:	4b06      	ldr	r3, [pc, #24]	@ (800c240 <HAL_RCC_OscConfig+0x4c4>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d1f0      	bne.n	800c214 <HAL_RCC_OscConfig+0x498>
 800c232:	e01e      	b.n	800c272 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	69db      	ldr	r3, [r3, #28]
 800c238:	2b01      	cmp	r3, #1
 800c23a:	d107      	bne.n	800c24c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800c23c:	2301      	movs	r3, #1
 800c23e:	e019      	b.n	800c274 <HAL_RCC_OscConfig+0x4f8>
 800c240:	40021000 	.word	0x40021000
 800c244:	40007000 	.word	0x40007000
 800c248:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800c24c:	4b0b      	ldr	r3, [pc, #44]	@ (800c27c <HAL_RCC_OscConfig+0x500>)
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6a1b      	ldr	r3, [r3, #32]
 800c25c:	429a      	cmp	r2, r3
 800c25e:	d106      	bne.n	800c26e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c26a:	429a      	cmp	r2, r3
 800c26c:	d001      	beq.n	800c272 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800c26e:	2301      	movs	r3, #1
 800c270:	e000      	b.n	800c274 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800c272:	2300      	movs	r3, #0
}
 800c274:	4618      	mov	r0, r3
 800c276:	3718      	adds	r7, #24
 800c278:	46bd      	mov	sp, r7
 800c27a:	bd80      	pop	{r7, pc}
 800c27c:	40021000 	.word	0x40021000

0800c280 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
 800c288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d101      	bne.n	800c294 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c290:	2301      	movs	r3, #1
 800c292:	e0d0      	b.n	800c436 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c294:	4b6a      	ldr	r3, [pc, #424]	@ (800c440 <HAL_RCC_ClockConfig+0x1c0>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f003 0307 	and.w	r3, r3, #7
 800c29c:	683a      	ldr	r2, [r7, #0]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d910      	bls.n	800c2c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c2a2:	4b67      	ldr	r3, [pc, #412]	@ (800c440 <HAL_RCC_ClockConfig+0x1c0>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f023 0207 	bic.w	r2, r3, #7
 800c2aa:	4965      	ldr	r1, [pc, #404]	@ (800c440 <HAL_RCC_ClockConfig+0x1c0>)
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c2b2:	4b63      	ldr	r3, [pc, #396]	@ (800c440 <HAL_RCC_ClockConfig+0x1c0>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f003 0307 	and.w	r3, r3, #7
 800c2ba:	683a      	ldr	r2, [r7, #0]
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d001      	beq.n	800c2c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	e0b8      	b.n	800c436 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f003 0302 	and.w	r3, r3, #2
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d020      	beq.n	800c312 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f003 0304 	and.w	r3, r3, #4
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d005      	beq.n	800c2e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c2dc:	4b59      	ldr	r3, [pc, #356]	@ (800c444 <HAL_RCC_ClockConfig+0x1c4>)
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	4a58      	ldr	r2, [pc, #352]	@ (800c444 <HAL_RCC_ClockConfig+0x1c4>)
 800c2e2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800c2e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	f003 0308 	and.w	r3, r3, #8
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d005      	beq.n	800c300 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c2f4:	4b53      	ldr	r3, [pc, #332]	@ (800c444 <HAL_RCC_ClockConfig+0x1c4>)
 800c2f6:	685b      	ldr	r3, [r3, #4]
 800c2f8:	4a52      	ldr	r2, [pc, #328]	@ (800c444 <HAL_RCC_ClockConfig+0x1c4>)
 800c2fa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800c2fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c300:	4b50      	ldr	r3, [pc, #320]	@ (800c444 <HAL_RCC_ClockConfig+0x1c4>)
 800c302:	685b      	ldr	r3, [r3, #4]
 800c304:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	689b      	ldr	r3, [r3, #8]
 800c30c:	494d      	ldr	r1, [pc, #308]	@ (800c444 <HAL_RCC_ClockConfig+0x1c4>)
 800c30e:	4313      	orrs	r3, r2
 800c310:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f003 0301 	and.w	r3, r3, #1
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d040      	beq.n	800c3a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	2b01      	cmp	r3, #1
 800c324:	d107      	bne.n	800c336 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c326:	4b47      	ldr	r3, [pc, #284]	@ (800c444 <HAL_RCC_ClockConfig+0x1c4>)
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d115      	bne.n	800c35e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c332:	2301      	movs	r3, #1
 800c334:	e07f      	b.n	800c436 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	2b02      	cmp	r3, #2
 800c33c:	d107      	bne.n	800c34e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c33e:	4b41      	ldr	r3, [pc, #260]	@ (800c444 <HAL_RCC_ClockConfig+0x1c4>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c346:	2b00      	cmp	r3, #0
 800c348:	d109      	bne.n	800c35e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c34a:	2301      	movs	r3, #1
 800c34c:	e073      	b.n	800c436 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c34e:	4b3d      	ldr	r3, [pc, #244]	@ (800c444 <HAL_RCC_ClockConfig+0x1c4>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f003 0302 	and.w	r3, r3, #2
 800c356:	2b00      	cmp	r3, #0
 800c358:	d101      	bne.n	800c35e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c35a:	2301      	movs	r3, #1
 800c35c:	e06b      	b.n	800c436 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c35e:	4b39      	ldr	r3, [pc, #228]	@ (800c444 <HAL_RCC_ClockConfig+0x1c4>)
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	f023 0203 	bic.w	r2, r3, #3
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	685b      	ldr	r3, [r3, #4]
 800c36a:	4936      	ldr	r1, [pc, #216]	@ (800c444 <HAL_RCC_ClockConfig+0x1c4>)
 800c36c:	4313      	orrs	r3, r2
 800c36e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c370:	f7fd fcb4 	bl	8009cdc <HAL_GetTick>
 800c374:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c376:	e00a      	b.n	800c38e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c378:	f7fd fcb0 	bl	8009cdc <HAL_GetTick>
 800c37c:	4602      	mov	r2, r0
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	1ad3      	subs	r3, r2, r3
 800c382:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c386:	4293      	cmp	r3, r2
 800c388:	d901      	bls.n	800c38e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c38a:	2303      	movs	r3, #3
 800c38c:	e053      	b.n	800c436 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c38e:	4b2d      	ldr	r3, [pc, #180]	@ (800c444 <HAL_RCC_ClockConfig+0x1c4>)
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	f003 020c 	and.w	r2, r3, #12
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	429a      	cmp	r2, r3
 800c39e:	d1eb      	bne.n	800c378 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c3a0:	4b27      	ldr	r3, [pc, #156]	@ (800c440 <HAL_RCC_ClockConfig+0x1c0>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	f003 0307 	and.w	r3, r3, #7
 800c3a8:	683a      	ldr	r2, [r7, #0]
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d210      	bcs.n	800c3d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c3ae:	4b24      	ldr	r3, [pc, #144]	@ (800c440 <HAL_RCC_ClockConfig+0x1c0>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	f023 0207 	bic.w	r2, r3, #7
 800c3b6:	4922      	ldr	r1, [pc, #136]	@ (800c440 <HAL_RCC_ClockConfig+0x1c0>)
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	4313      	orrs	r3, r2
 800c3bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c3be:	4b20      	ldr	r3, [pc, #128]	@ (800c440 <HAL_RCC_ClockConfig+0x1c0>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f003 0307 	and.w	r3, r3, #7
 800c3c6:	683a      	ldr	r2, [r7, #0]
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d001      	beq.n	800c3d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	e032      	b.n	800c436 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f003 0304 	and.w	r3, r3, #4
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d008      	beq.n	800c3ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c3dc:	4b19      	ldr	r3, [pc, #100]	@ (800c444 <HAL_RCC_ClockConfig+0x1c4>)
 800c3de:	685b      	ldr	r3, [r3, #4]
 800c3e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	68db      	ldr	r3, [r3, #12]
 800c3e8:	4916      	ldr	r1, [pc, #88]	@ (800c444 <HAL_RCC_ClockConfig+0x1c4>)
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f003 0308 	and.w	r3, r3, #8
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d009      	beq.n	800c40e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c3fa:	4b12      	ldr	r3, [pc, #72]	@ (800c444 <HAL_RCC_ClockConfig+0x1c4>)
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	691b      	ldr	r3, [r3, #16]
 800c406:	00db      	lsls	r3, r3, #3
 800c408:	490e      	ldr	r1, [pc, #56]	@ (800c444 <HAL_RCC_ClockConfig+0x1c4>)
 800c40a:	4313      	orrs	r3, r2
 800c40c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c40e:	f000 f821 	bl	800c454 <HAL_RCC_GetSysClockFreq>
 800c412:	4602      	mov	r2, r0
 800c414:	4b0b      	ldr	r3, [pc, #44]	@ (800c444 <HAL_RCC_ClockConfig+0x1c4>)
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	091b      	lsrs	r3, r3, #4
 800c41a:	f003 030f 	and.w	r3, r3, #15
 800c41e:	490a      	ldr	r1, [pc, #40]	@ (800c448 <HAL_RCC_ClockConfig+0x1c8>)
 800c420:	5ccb      	ldrb	r3, [r1, r3]
 800c422:	fa22 f303 	lsr.w	r3, r2, r3
 800c426:	4a09      	ldr	r2, [pc, #36]	@ (800c44c <HAL_RCC_ClockConfig+0x1cc>)
 800c428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c42a:	4b09      	ldr	r3, [pc, #36]	@ (800c450 <HAL_RCC_ClockConfig+0x1d0>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	4618      	mov	r0, r3
 800c430:	f7fd fc12 	bl	8009c58 <HAL_InitTick>

  return HAL_OK;
 800c434:	2300      	movs	r3, #0
}
 800c436:	4618      	mov	r0, r3
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	40022000 	.word	0x40022000
 800c444:	40021000 	.word	0x40021000
 800c448:	0800f7e8 	.word	0x0800f7e8
 800c44c:	20000f74 	.word	0x20000f74
 800c450:	20000f78 	.word	0x20000f78

0800c454 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c454:	b480      	push	{r7}
 800c456:	b087      	sub	sp, #28
 800c458:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800c45a:	2300      	movs	r3, #0
 800c45c:	60fb      	str	r3, [r7, #12]
 800c45e:	2300      	movs	r3, #0
 800c460:	60bb      	str	r3, [r7, #8]
 800c462:	2300      	movs	r3, #0
 800c464:	617b      	str	r3, [r7, #20]
 800c466:	2300      	movs	r3, #0
 800c468:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800c46a:	2300      	movs	r3, #0
 800c46c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800c46e:	4b1e      	ldr	r3, [pc, #120]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x94>)
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	f003 030c 	and.w	r3, r3, #12
 800c47a:	2b04      	cmp	r3, #4
 800c47c:	d002      	beq.n	800c484 <HAL_RCC_GetSysClockFreq+0x30>
 800c47e:	2b08      	cmp	r3, #8
 800c480:	d003      	beq.n	800c48a <HAL_RCC_GetSysClockFreq+0x36>
 800c482:	e027      	b.n	800c4d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c484:	4b19      	ldr	r3, [pc, #100]	@ (800c4ec <HAL_RCC_GetSysClockFreq+0x98>)
 800c486:	613b      	str	r3, [r7, #16]
      break;
 800c488:	e027      	b.n	800c4da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	0c9b      	lsrs	r3, r3, #18
 800c48e:	f003 030f 	and.w	r3, r3, #15
 800c492:	4a17      	ldr	r2, [pc, #92]	@ (800c4f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800c494:	5cd3      	ldrb	r3, [r2, r3]
 800c496:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d010      	beq.n	800c4c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800c4a2:	4b11      	ldr	r3, [pc, #68]	@ (800c4e8 <HAL_RCC_GetSysClockFreq+0x94>)
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	0c5b      	lsrs	r3, r3, #17
 800c4a8:	f003 0301 	and.w	r3, r3, #1
 800c4ac:	4a11      	ldr	r2, [pc, #68]	@ (800c4f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800c4ae:	5cd3      	ldrb	r3, [r2, r3]
 800c4b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	4a0d      	ldr	r2, [pc, #52]	@ (800c4ec <HAL_RCC_GetSysClockFreq+0x98>)
 800c4b6:	fb03 f202 	mul.w	r2, r3, r2
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4c0:	617b      	str	r3, [r7, #20]
 800c4c2:	e004      	b.n	800c4ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	4a0c      	ldr	r2, [pc, #48]	@ (800c4f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c4c8:	fb02 f303 	mul.w	r3, r2, r3
 800c4cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	613b      	str	r3, [r7, #16]
      break;
 800c4d2:	e002      	b.n	800c4da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800c4d4:	4b05      	ldr	r3, [pc, #20]	@ (800c4ec <HAL_RCC_GetSysClockFreq+0x98>)
 800c4d6:	613b      	str	r3, [r7, #16]
      break;
 800c4d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c4da:	693b      	ldr	r3, [r7, #16]
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	371c      	adds	r7, #28
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bc80      	pop	{r7}
 800c4e4:	4770      	bx	lr
 800c4e6:	bf00      	nop
 800c4e8:	40021000 	.word	0x40021000
 800c4ec:	007a1200 	.word	0x007a1200
 800c4f0:	0800f800 	.word	0x0800f800
 800c4f4:	0800f810 	.word	0x0800f810
 800c4f8:	003d0900 	.word	0x003d0900

0800c4fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c4fc:	b480      	push	{r7}
 800c4fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c500:	4b02      	ldr	r3, [pc, #8]	@ (800c50c <HAL_RCC_GetHCLKFreq+0x10>)
 800c502:	681b      	ldr	r3, [r3, #0]
}
 800c504:	4618      	mov	r0, r3
 800c506:	46bd      	mov	sp, r7
 800c508:	bc80      	pop	{r7}
 800c50a:	4770      	bx	lr
 800c50c:	20000f74 	.word	0x20000f74

0800c510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c514:	f7ff fff2 	bl	800c4fc <HAL_RCC_GetHCLKFreq>
 800c518:	4602      	mov	r2, r0
 800c51a:	4b05      	ldr	r3, [pc, #20]	@ (800c530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c51c:	685b      	ldr	r3, [r3, #4]
 800c51e:	0a1b      	lsrs	r3, r3, #8
 800c520:	f003 0307 	and.w	r3, r3, #7
 800c524:	4903      	ldr	r1, [pc, #12]	@ (800c534 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c526:	5ccb      	ldrb	r3, [r1, r3]
 800c528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	bd80      	pop	{r7, pc}
 800c530:	40021000 	.word	0x40021000
 800c534:	0800f7f8 	.word	0x0800f7f8

0800c538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c53c:	f7ff ffde 	bl	800c4fc <HAL_RCC_GetHCLKFreq>
 800c540:	4602      	mov	r2, r0
 800c542:	4b05      	ldr	r3, [pc, #20]	@ (800c558 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	0adb      	lsrs	r3, r3, #11
 800c548:	f003 0307 	and.w	r3, r3, #7
 800c54c:	4903      	ldr	r1, [pc, #12]	@ (800c55c <HAL_RCC_GetPCLK2Freq+0x24>)
 800c54e:	5ccb      	ldrb	r3, [r1, r3]
 800c550:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c554:	4618      	mov	r0, r3
 800c556:	bd80      	pop	{r7, pc}
 800c558:	40021000 	.word	0x40021000
 800c55c:	0800f7f8 	.word	0x0800f7f8

0800c560 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800c560:	b480      	push	{r7}
 800c562:	b085      	sub	sp, #20
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c568:	4b0a      	ldr	r3, [pc, #40]	@ (800c594 <RCC_Delay+0x34>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4a0a      	ldr	r2, [pc, #40]	@ (800c598 <RCC_Delay+0x38>)
 800c56e:	fba2 2303 	umull	r2, r3, r2, r3
 800c572:	0a5b      	lsrs	r3, r3, #9
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	fb02 f303 	mul.w	r3, r2, r3
 800c57a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800c57c:	bf00      	nop
  }
  while (Delay --);
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	1e5a      	subs	r2, r3, #1
 800c582:	60fa      	str	r2, [r7, #12]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d1f9      	bne.n	800c57c <RCC_Delay+0x1c>
}
 800c588:	bf00      	nop
 800c58a:	bf00      	nop
 800c58c:	3714      	adds	r7, #20
 800c58e:	46bd      	mov	sp, r7
 800c590:	bc80      	pop	{r7}
 800c592:	4770      	bx	lr
 800c594:	20000f74 	.word	0x20000f74
 800c598:	10624dd3 	.word	0x10624dd3

0800c59c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b082      	sub	sp, #8
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d101      	bne.n	800c5ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c5aa:	2301      	movs	r3, #1
 800c5ac:	e041      	b.n	800c632 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d106      	bne.n	800c5c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2200      	movs	r2, #0
 800c5be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f7fd fa16 	bl	80099f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2202      	movs	r2, #2
 800c5cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	3304      	adds	r3, #4
 800c5d8:	4619      	mov	r1, r3
 800c5da:	4610      	mov	r0, r2
 800c5dc:	f000 fa82 	bl	800cae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2201      	movs	r2, #1
 800c5fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2201      	movs	r2, #1
 800c604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2201      	movs	r2, #1
 800c60c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2201      	movs	r2, #1
 800c614:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2201      	movs	r2, #1
 800c61c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2201      	movs	r2, #1
 800c624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2201      	movs	r2, #1
 800c62c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c630:	2300      	movs	r3, #0
}
 800c632:	4618      	mov	r0, r3
 800c634:	3708      	adds	r7, #8
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
	...

0800c63c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b085      	sub	sp, #20
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d001      	beq.n	800c654 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c650:	2301      	movs	r3, #1
 800c652:	e044      	b.n	800c6de <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2202      	movs	r2, #2
 800c658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	68da      	ldr	r2, [r3, #12]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f042 0201 	orr.w	r2, r2, #1
 800c66a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4a1d      	ldr	r2, [pc, #116]	@ (800c6e8 <HAL_TIM_Base_Start_IT+0xac>)
 800c672:	4293      	cmp	r3, r2
 800c674:	d018      	beq.n	800c6a8 <HAL_TIM_Base_Start_IT+0x6c>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4a1c      	ldr	r2, [pc, #112]	@ (800c6ec <HAL_TIM_Base_Start_IT+0xb0>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d013      	beq.n	800c6a8 <HAL_TIM_Base_Start_IT+0x6c>
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c688:	d00e      	beq.n	800c6a8 <HAL_TIM_Base_Start_IT+0x6c>
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	4a18      	ldr	r2, [pc, #96]	@ (800c6f0 <HAL_TIM_Base_Start_IT+0xb4>)
 800c690:	4293      	cmp	r3, r2
 800c692:	d009      	beq.n	800c6a8 <HAL_TIM_Base_Start_IT+0x6c>
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a16      	ldr	r2, [pc, #88]	@ (800c6f4 <HAL_TIM_Base_Start_IT+0xb8>)
 800c69a:	4293      	cmp	r3, r2
 800c69c:	d004      	beq.n	800c6a8 <HAL_TIM_Base_Start_IT+0x6c>
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	4a15      	ldr	r2, [pc, #84]	@ (800c6f8 <HAL_TIM_Base_Start_IT+0xbc>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d111      	bne.n	800c6cc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	689b      	ldr	r3, [r3, #8]
 800c6ae:	f003 0307 	and.w	r3, r3, #7
 800c6b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2b06      	cmp	r3, #6
 800c6b8:	d010      	beq.n	800c6dc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	681a      	ldr	r2, [r3, #0]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f042 0201 	orr.w	r2, r2, #1
 800c6c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6ca:	e007      	b.n	800c6dc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	681a      	ldr	r2, [r3, #0]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f042 0201 	orr.w	r2, r2, #1
 800c6da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c6dc:	2300      	movs	r3, #0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3714      	adds	r7, #20
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bc80      	pop	{r7}
 800c6e6:	4770      	bx	lr
 800c6e8:	40012c00 	.word	0x40012c00
 800c6ec:	40013400 	.word	0x40013400
 800c6f0:	40000400 	.word	0x40000400
 800c6f4:	40000800 	.word	0x40000800
 800c6f8:	40000c00 	.word	0x40000c00

0800c6fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	691b      	ldr	r3, [r3, #16]
 800c70a:	f003 0302 	and.w	r3, r3, #2
 800c70e:	2b02      	cmp	r3, #2
 800c710:	d122      	bne.n	800c758 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	68db      	ldr	r3, [r3, #12]
 800c718:	f003 0302 	and.w	r3, r3, #2
 800c71c:	2b02      	cmp	r3, #2
 800c71e:	d11b      	bne.n	800c758 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f06f 0202 	mvn.w	r2, #2
 800c728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2201      	movs	r2, #1
 800c72e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	699b      	ldr	r3, [r3, #24]
 800c736:	f003 0303 	and.w	r3, r3, #3
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d003      	beq.n	800c746 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f000 f9b4 	bl	800caac <HAL_TIM_IC_CaptureCallback>
 800c744:	e005      	b.n	800c752 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 f9a7 	bl	800ca9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 f9b6 	bl	800cabe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2200      	movs	r2, #0
 800c756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	691b      	ldr	r3, [r3, #16]
 800c75e:	f003 0304 	and.w	r3, r3, #4
 800c762:	2b04      	cmp	r3, #4
 800c764:	d122      	bne.n	800c7ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	f003 0304 	and.w	r3, r3, #4
 800c770:	2b04      	cmp	r3, #4
 800c772:	d11b      	bne.n	800c7ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	f06f 0204 	mvn.w	r2, #4
 800c77c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2202      	movs	r2, #2
 800c782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	699b      	ldr	r3, [r3, #24]
 800c78a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d003      	beq.n	800c79a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f98a 	bl	800caac <HAL_TIM_IC_CaptureCallback>
 800c798:	e005      	b.n	800c7a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 f97d 	bl	800ca9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 f98c 	bl	800cabe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	691b      	ldr	r3, [r3, #16]
 800c7b2:	f003 0308 	and.w	r3, r3, #8
 800c7b6:	2b08      	cmp	r3, #8
 800c7b8:	d122      	bne.n	800c800 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	f003 0308 	and.w	r3, r3, #8
 800c7c4:	2b08      	cmp	r3, #8
 800c7c6:	d11b      	bne.n	800c800 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f06f 0208 	mvn.w	r2, #8
 800c7d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	2204      	movs	r2, #4
 800c7d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	69db      	ldr	r3, [r3, #28]
 800c7de:	f003 0303 	and.w	r3, r3, #3
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d003      	beq.n	800c7ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 f960 	bl	800caac <HAL_TIM_IC_CaptureCallback>
 800c7ec:	e005      	b.n	800c7fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f000 f953 	bl	800ca9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 f962 	bl	800cabe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	691b      	ldr	r3, [r3, #16]
 800c806:	f003 0310 	and.w	r3, r3, #16
 800c80a:	2b10      	cmp	r3, #16
 800c80c:	d122      	bne.n	800c854 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	68db      	ldr	r3, [r3, #12]
 800c814:	f003 0310 	and.w	r3, r3, #16
 800c818:	2b10      	cmp	r3, #16
 800c81a:	d11b      	bne.n	800c854 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f06f 0210 	mvn.w	r2, #16
 800c824:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2208      	movs	r2, #8
 800c82a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	69db      	ldr	r3, [r3, #28]
 800c832:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c836:	2b00      	cmp	r3, #0
 800c838:	d003      	beq.n	800c842 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c83a:	6878      	ldr	r0, [r7, #4]
 800c83c:	f000 f936 	bl	800caac <HAL_TIM_IC_CaptureCallback>
 800c840:	e005      	b.n	800c84e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 f929 	bl	800ca9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f000 f938 	bl	800cabe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2200      	movs	r2, #0
 800c852:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	691b      	ldr	r3, [r3, #16]
 800c85a:	f003 0301 	and.w	r3, r3, #1
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d10e      	bne.n	800c880 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	68db      	ldr	r3, [r3, #12]
 800c868:	f003 0301 	and.w	r3, r3, #1
 800c86c:	2b01      	cmp	r3, #1
 800c86e:	d107      	bne.n	800c880 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	f06f 0201 	mvn.w	r2, #1
 800c878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c87a:	6878      	ldr	r0, [r7, #4]
 800c87c:	f7fc fd34 	bl	80092e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	691b      	ldr	r3, [r3, #16]
 800c886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c88a:	2b80      	cmp	r3, #128	@ 0x80
 800c88c:	d10e      	bne.n	800c8ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c898:	2b80      	cmp	r3, #128	@ 0x80
 800c89a:	d107      	bne.n	800c8ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c8a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f000 faa1 	bl	800cdee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	691b      	ldr	r3, [r3, #16]
 800c8b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8b6:	2b40      	cmp	r3, #64	@ 0x40
 800c8b8:	d10e      	bne.n	800c8d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8c4:	2b40      	cmp	r3, #64	@ 0x40
 800c8c6:	d107      	bne.n	800c8d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c8d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 f8fc 	bl	800cad0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	691b      	ldr	r3, [r3, #16]
 800c8de:	f003 0320 	and.w	r3, r3, #32
 800c8e2:	2b20      	cmp	r3, #32
 800c8e4:	d10e      	bne.n	800c904 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	f003 0320 	and.w	r3, r3, #32
 800c8f0:	2b20      	cmp	r3, #32
 800c8f2:	d107      	bne.n	800c904 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f06f 0220 	mvn.w	r2, #32
 800c8fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 fa6c 	bl	800cddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c904:	bf00      	nop
 800c906:	3708      	adds	r7, #8
 800c908:	46bd      	mov	sp, r7
 800c90a:	bd80      	pop	{r7, pc}

0800c90c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c916:	2300      	movs	r3, #0
 800c918:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c920:	2b01      	cmp	r3, #1
 800c922:	d101      	bne.n	800c928 <HAL_TIM_ConfigClockSource+0x1c>
 800c924:	2302      	movs	r3, #2
 800c926:	e0b4      	b.n	800ca92 <HAL_TIM_ConfigClockSource+0x186>
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2201      	movs	r2, #1
 800c92c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2202      	movs	r2, #2
 800c934:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	689b      	ldr	r3, [r3, #8]
 800c93e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c948:	68bb      	ldr	r3, [r7, #8]
 800c94a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c94e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	68ba      	ldr	r2, [r7, #8]
 800c956:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c960:	d03e      	beq.n	800c9e0 <HAL_TIM_ConfigClockSource+0xd4>
 800c962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c966:	f200 8087 	bhi.w	800ca78 <HAL_TIM_ConfigClockSource+0x16c>
 800c96a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c96e:	f000 8086 	beq.w	800ca7e <HAL_TIM_ConfigClockSource+0x172>
 800c972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c976:	d87f      	bhi.n	800ca78 <HAL_TIM_ConfigClockSource+0x16c>
 800c978:	2b70      	cmp	r3, #112	@ 0x70
 800c97a:	d01a      	beq.n	800c9b2 <HAL_TIM_ConfigClockSource+0xa6>
 800c97c:	2b70      	cmp	r3, #112	@ 0x70
 800c97e:	d87b      	bhi.n	800ca78 <HAL_TIM_ConfigClockSource+0x16c>
 800c980:	2b60      	cmp	r3, #96	@ 0x60
 800c982:	d050      	beq.n	800ca26 <HAL_TIM_ConfigClockSource+0x11a>
 800c984:	2b60      	cmp	r3, #96	@ 0x60
 800c986:	d877      	bhi.n	800ca78 <HAL_TIM_ConfigClockSource+0x16c>
 800c988:	2b50      	cmp	r3, #80	@ 0x50
 800c98a:	d03c      	beq.n	800ca06 <HAL_TIM_ConfigClockSource+0xfa>
 800c98c:	2b50      	cmp	r3, #80	@ 0x50
 800c98e:	d873      	bhi.n	800ca78 <HAL_TIM_ConfigClockSource+0x16c>
 800c990:	2b40      	cmp	r3, #64	@ 0x40
 800c992:	d058      	beq.n	800ca46 <HAL_TIM_ConfigClockSource+0x13a>
 800c994:	2b40      	cmp	r3, #64	@ 0x40
 800c996:	d86f      	bhi.n	800ca78 <HAL_TIM_ConfigClockSource+0x16c>
 800c998:	2b30      	cmp	r3, #48	@ 0x30
 800c99a:	d064      	beq.n	800ca66 <HAL_TIM_ConfigClockSource+0x15a>
 800c99c:	2b30      	cmp	r3, #48	@ 0x30
 800c99e:	d86b      	bhi.n	800ca78 <HAL_TIM_ConfigClockSource+0x16c>
 800c9a0:	2b20      	cmp	r3, #32
 800c9a2:	d060      	beq.n	800ca66 <HAL_TIM_ConfigClockSource+0x15a>
 800c9a4:	2b20      	cmp	r3, #32
 800c9a6:	d867      	bhi.n	800ca78 <HAL_TIM_ConfigClockSource+0x16c>
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d05c      	beq.n	800ca66 <HAL_TIM_ConfigClockSource+0x15a>
 800c9ac:	2b10      	cmp	r3, #16
 800c9ae:	d05a      	beq.n	800ca66 <HAL_TIM_ConfigClockSource+0x15a>
 800c9b0:	e062      	b.n	800ca78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c9c2:	f000 f980 	bl	800ccc6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	689b      	ldr	r3, [r3, #8]
 800c9cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c9ce:	68bb      	ldr	r3, [r7, #8]
 800c9d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c9d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	68ba      	ldr	r2, [r7, #8]
 800c9dc:	609a      	str	r2, [r3, #8]
      break;
 800c9de:	e04f      	b.n	800ca80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c9f0:	f000 f969 	bl	800ccc6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	689a      	ldr	r2, [r3, #8]
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ca02:	609a      	str	r2, [r3, #8]
      break;
 800ca04:	e03c      	b.n	800ca80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca12:	461a      	mov	r2, r3
 800ca14:	f000 f8e0 	bl	800cbd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	2150      	movs	r1, #80	@ 0x50
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f000 f937 	bl	800cc92 <TIM_ITRx_SetConfig>
      break;
 800ca24:	e02c      	b.n	800ca80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca32:	461a      	mov	r2, r3
 800ca34:	f000 f8fe 	bl	800cc34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	2160      	movs	r1, #96	@ 0x60
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f000 f927 	bl	800cc92 <TIM_ITRx_SetConfig>
      break;
 800ca44:	e01c      	b.n	800ca80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca52:	461a      	mov	r2, r3
 800ca54:	f000 f8c0 	bl	800cbd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2140      	movs	r1, #64	@ 0x40
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f000 f917 	bl	800cc92 <TIM_ITRx_SetConfig>
      break;
 800ca64:	e00c      	b.n	800ca80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	4619      	mov	r1, r3
 800ca70:	4610      	mov	r0, r2
 800ca72:	f000 f90e 	bl	800cc92 <TIM_ITRx_SetConfig>
      break;
 800ca76:	e003      	b.n	800ca80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ca78:	2301      	movs	r3, #1
 800ca7a:	73fb      	strb	r3, [r7, #15]
      break;
 800ca7c:	e000      	b.n	800ca80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ca7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2201      	movs	r2, #1
 800ca84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ca90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3710      	adds	r7, #16
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca9a:	b480      	push	{r7}
 800ca9c:	b083      	sub	sp, #12
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800caa2:	bf00      	nop
 800caa4:	370c      	adds	r7, #12
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bc80      	pop	{r7}
 800caaa:	4770      	bx	lr

0800caac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800caac:	b480      	push	{r7}
 800caae:	b083      	sub	sp, #12
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cab4:	bf00      	nop
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	bc80      	pop	{r7}
 800cabc:	4770      	bx	lr

0800cabe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cabe:	b480      	push	{r7}
 800cac0:	b083      	sub	sp, #12
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cac6:	bf00      	nop
 800cac8:	370c      	adds	r7, #12
 800caca:	46bd      	mov	sp, r7
 800cacc:	bc80      	pop	{r7}
 800cace:	4770      	bx	lr

0800cad0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b083      	sub	sp, #12
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cad8:	bf00      	nop
 800cada:	370c      	adds	r7, #12
 800cadc:	46bd      	mov	sp, r7
 800cade:	bc80      	pop	{r7}
 800cae0:	4770      	bx	lr
	...

0800cae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b085      	sub	sp, #20
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	4a33      	ldr	r2, [pc, #204]	@ (800cbc4 <TIM_Base_SetConfig+0xe0>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d013      	beq.n	800cb24 <TIM_Base_SetConfig+0x40>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	4a32      	ldr	r2, [pc, #200]	@ (800cbc8 <TIM_Base_SetConfig+0xe4>)
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d00f      	beq.n	800cb24 <TIM_Base_SetConfig+0x40>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb0a:	d00b      	beq.n	800cb24 <TIM_Base_SetConfig+0x40>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	4a2f      	ldr	r2, [pc, #188]	@ (800cbcc <TIM_Base_SetConfig+0xe8>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d007      	beq.n	800cb24 <TIM_Base_SetConfig+0x40>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	4a2e      	ldr	r2, [pc, #184]	@ (800cbd0 <TIM_Base_SetConfig+0xec>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d003      	beq.n	800cb24 <TIM_Base_SetConfig+0x40>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a2d      	ldr	r2, [pc, #180]	@ (800cbd4 <TIM_Base_SetConfig+0xf0>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d108      	bne.n	800cb36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	4313      	orrs	r3, r2
 800cb34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	4a22      	ldr	r2, [pc, #136]	@ (800cbc4 <TIM_Base_SetConfig+0xe0>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d013      	beq.n	800cb66 <TIM_Base_SetConfig+0x82>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	4a21      	ldr	r2, [pc, #132]	@ (800cbc8 <TIM_Base_SetConfig+0xe4>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d00f      	beq.n	800cb66 <TIM_Base_SetConfig+0x82>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb4c:	d00b      	beq.n	800cb66 <TIM_Base_SetConfig+0x82>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	4a1e      	ldr	r2, [pc, #120]	@ (800cbcc <TIM_Base_SetConfig+0xe8>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d007      	beq.n	800cb66 <TIM_Base_SetConfig+0x82>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	4a1d      	ldr	r2, [pc, #116]	@ (800cbd0 <TIM_Base_SetConfig+0xec>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d003      	beq.n	800cb66 <TIM_Base_SetConfig+0x82>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	4a1c      	ldr	r2, [pc, #112]	@ (800cbd4 <TIM_Base_SetConfig+0xf0>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d108      	bne.n	800cb78 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	68db      	ldr	r3, [r3, #12]
 800cb72:	68fa      	ldr	r2, [r7, #12]
 800cb74:	4313      	orrs	r3, r2
 800cb76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	695b      	ldr	r3, [r3, #20]
 800cb82:	4313      	orrs	r3, r2
 800cb84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	68fa      	ldr	r2, [r7, #12]
 800cb8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	689a      	ldr	r2, [r3, #8]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	681a      	ldr	r2, [r3, #0]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	4a09      	ldr	r2, [pc, #36]	@ (800cbc4 <TIM_Base_SetConfig+0xe0>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d003      	beq.n	800cbac <TIM_Base_SetConfig+0xc8>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	4a08      	ldr	r2, [pc, #32]	@ (800cbc8 <TIM_Base_SetConfig+0xe4>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d103      	bne.n	800cbb4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	691a      	ldr	r2, [r3, #16]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	615a      	str	r2, [r3, #20]
}
 800cbba:	bf00      	nop
 800cbbc:	3714      	adds	r7, #20
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bc80      	pop	{r7}
 800cbc2:	4770      	bx	lr
 800cbc4:	40012c00 	.word	0x40012c00
 800cbc8:	40013400 	.word	0x40013400
 800cbcc:	40000400 	.word	0x40000400
 800cbd0:	40000800 	.word	0x40000800
 800cbd4:	40000c00 	.word	0x40000c00

0800cbd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b087      	sub	sp, #28
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	60f8      	str	r0, [r7, #12]
 800cbe0:	60b9      	str	r1, [r7, #8]
 800cbe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	6a1b      	ldr	r3, [r3, #32]
 800cbe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	6a1b      	ldr	r3, [r3, #32]
 800cbee:	f023 0201 	bic.w	r2, r3, #1
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	699b      	ldr	r3, [r3, #24]
 800cbfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cc02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	011b      	lsls	r3, r3, #4
 800cc08:	693a      	ldr	r2, [r7, #16]
 800cc0a:	4313      	orrs	r3, r2
 800cc0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	f023 030a 	bic.w	r3, r3, #10
 800cc14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cc16:	697a      	ldr	r2, [r7, #20]
 800cc18:	68bb      	ldr	r3, [r7, #8]
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	693a      	ldr	r2, [r7, #16]
 800cc22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	697a      	ldr	r2, [r7, #20]
 800cc28:	621a      	str	r2, [r3, #32]
}
 800cc2a:	bf00      	nop
 800cc2c:	371c      	adds	r7, #28
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bc80      	pop	{r7}
 800cc32:	4770      	bx	lr

0800cc34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc34:	b480      	push	{r7}
 800cc36:	b087      	sub	sp, #28
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	60b9      	str	r1, [r7, #8]
 800cc3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	6a1b      	ldr	r3, [r3, #32]
 800cc44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	6a1b      	ldr	r3, [r3, #32]
 800cc4a:	f023 0210 	bic.w	r2, r3, #16
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	699b      	ldr	r3, [r3, #24]
 800cc56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cc5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	031b      	lsls	r3, r3, #12
 800cc64:	693a      	ldr	r2, [r7, #16]
 800cc66:	4313      	orrs	r3, r2
 800cc68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cc70:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	011b      	lsls	r3, r3, #4
 800cc76:	697a      	ldr	r2, [r7, #20]
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	693a      	ldr	r2, [r7, #16]
 800cc80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	697a      	ldr	r2, [r7, #20]
 800cc86:	621a      	str	r2, [r3, #32]
}
 800cc88:	bf00      	nop
 800cc8a:	371c      	adds	r7, #28
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bc80      	pop	{r7}
 800cc90:	4770      	bx	lr

0800cc92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cc92:	b480      	push	{r7}
 800cc94:	b085      	sub	sp, #20
 800cc96:	af00      	add	r7, sp, #0
 800cc98:	6078      	str	r0, [r7, #4]
 800cc9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	689b      	ldr	r3, [r3, #8]
 800cca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ccaa:	683a      	ldr	r2, [r7, #0]
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	f043 0307 	orr.w	r3, r3, #7
 800ccb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	68fa      	ldr	r2, [r7, #12]
 800ccba:	609a      	str	r2, [r3, #8]
}
 800ccbc:	bf00      	nop
 800ccbe:	3714      	adds	r7, #20
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bc80      	pop	{r7}
 800ccc4:	4770      	bx	lr

0800ccc6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ccc6:	b480      	push	{r7}
 800ccc8:	b087      	sub	sp, #28
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	60f8      	str	r0, [r7, #12]
 800ccce:	60b9      	str	r1, [r7, #8]
 800ccd0:	607a      	str	r2, [r7, #4]
 800ccd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	689b      	ldr	r3, [r3, #8]
 800ccd8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cce0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	021a      	lsls	r2, r3, #8
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	431a      	orrs	r2, r3
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	4313      	orrs	r3, r2
 800ccee:	697a      	ldr	r2, [r7, #20]
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	697a      	ldr	r2, [r7, #20]
 800ccf8:	609a      	str	r2, [r3, #8]
}
 800ccfa:	bf00      	nop
 800ccfc:	371c      	adds	r7, #28
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bc80      	pop	{r7}
 800cd02:	4770      	bx	lr

0800cd04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b085      	sub	sp, #20
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d101      	bne.n	800cd1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd18:	2302      	movs	r3, #2
 800cd1a:	e050      	b.n	800cdbe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2201      	movs	r2, #1
 800cd20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2202      	movs	r2, #2
 800cd28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	685b      	ldr	r3, [r3, #4]
 800cd32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	689b      	ldr	r3, [r3, #8]
 800cd3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cd42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	68fa      	ldr	r2, [r7, #12]
 800cd4a:	4313      	orrs	r3, r2
 800cd4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	68fa      	ldr	r2, [r7, #12]
 800cd54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	4a1b      	ldr	r2, [pc, #108]	@ (800cdc8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800cd5c:	4293      	cmp	r3, r2
 800cd5e:	d018      	beq.n	800cd92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	4a19      	ldr	r2, [pc, #100]	@ (800cdcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cd66:	4293      	cmp	r3, r2
 800cd68:	d013      	beq.n	800cd92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd72:	d00e      	beq.n	800cd92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4a15      	ldr	r2, [pc, #84]	@ (800cdd0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800cd7a:	4293      	cmp	r3, r2
 800cd7c:	d009      	beq.n	800cd92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	4a14      	ldr	r2, [pc, #80]	@ (800cdd4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d004      	beq.n	800cd92 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4a12      	ldr	r2, [pc, #72]	@ (800cdd8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d10c      	bne.n	800cdac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cd98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	685b      	ldr	r3, [r3, #4]
 800cd9e:	68ba      	ldr	r2, [r7, #8]
 800cda0:	4313      	orrs	r3, r2
 800cda2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	68ba      	ldr	r2, [r7, #8]
 800cdaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cdbc:	2300      	movs	r3, #0
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3714      	adds	r7, #20
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bc80      	pop	{r7}
 800cdc6:	4770      	bx	lr
 800cdc8:	40012c00 	.word	0x40012c00
 800cdcc:	40013400 	.word	0x40013400
 800cdd0:	40000400 	.word	0x40000400
 800cdd4:	40000800 	.word	0x40000800
 800cdd8:	40000c00 	.word	0x40000c00

0800cddc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cddc:	b480      	push	{r7}
 800cdde:	b083      	sub	sp, #12
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cde4:	bf00      	nop
 800cde6:	370c      	adds	r7, #12
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bc80      	pop	{r7}
 800cdec:	4770      	bx	lr

0800cdee <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cdee:	b480      	push	{r7}
 800cdf0:	b083      	sub	sp, #12
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cdf6:	bf00      	nop
 800cdf8:	370c      	adds	r7, #12
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bc80      	pop	{r7}
 800cdfe:	4770      	bx	lr

0800ce00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b082      	sub	sp, #8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d101      	bne.n	800ce12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	e042      	b.n	800ce98 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ce18:	b2db      	uxtb	r3, r3
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d106      	bne.n	800ce2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2200      	movs	r2, #0
 800ce22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	f7fc fe0a 	bl	8009a40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2224      	movs	r2, #36	@ 0x24
 800ce30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	68da      	ldr	r2, [r3, #12]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ce42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f001 f801 	bl	800de4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	691a      	ldr	r2, [r3, #16]
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ce58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	695a      	ldr	r2, [r3, #20]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ce68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	68da      	ldr	r2, [r3, #12]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ce78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2220      	movs	r2, #32
 800ce84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2220      	movs	r2, #32
 800ce8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2200      	movs	r2, #0
 800ce94:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ce96:	2300      	movs	r3, #0
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3708      	adds	r7, #8
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b08a      	sub	sp, #40	@ 0x28
 800cea4:	af02      	add	r7, sp, #8
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	603b      	str	r3, [r7, #0]
 800ceac:	4613      	mov	r3, r2
 800ceae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ceba:	b2db      	uxtb	r3, r3
 800cebc:	2b20      	cmp	r3, #32
 800cebe:	d16d      	bne.n	800cf9c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d002      	beq.n	800cecc <HAL_UART_Transmit+0x2c>
 800cec6:	88fb      	ldrh	r3, [r7, #6]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d101      	bne.n	800ced0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cecc:	2301      	movs	r3, #1
 800cece:	e066      	b.n	800cf9e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	2200      	movs	r2, #0
 800ced4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2221      	movs	r2, #33	@ 0x21
 800ceda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cede:	f7fc fefd 	bl	8009cdc <HAL_GetTick>
 800cee2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	88fa      	ldrh	r2, [r7, #6]
 800cee8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	88fa      	ldrh	r2, [r7, #6]
 800ceee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	689b      	ldr	r3, [r3, #8]
 800cef4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cef8:	d108      	bne.n	800cf0c <HAL_UART_Transmit+0x6c>
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	691b      	ldr	r3, [r3, #16]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d104      	bne.n	800cf0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cf02:	2300      	movs	r3, #0
 800cf04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cf06:	68bb      	ldr	r3, [r7, #8]
 800cf08:	61bb      	str	r3, [r7, #24]
 800cf0a:	e003      	b.n	800cf14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cf0c:	68bb      	ldr	r3, [r7, #8]
 800cf0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cf10:	2300      	movs	r3, #0
 800cf12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cf14:	e02a      	b.n	800cf6c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	9300      	str	r3, [sp, #0]
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	2180      	movs	r1, #128	@ 0x80
 800cf20:	68f8      	ldr	r0, [r7, #12]
 800cf22:	f000 fd39 	bl	800d998 <UART_WaitOnFlagUntilTimeout>
 800cf26:	4603      	mov	r3, r0
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d001      	beq.n	800cf30 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800cf2c:	2303      	movs	r3, #3
 800cf2e:	e036      	b.n	800cf9e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800cf30:	69fb      	ldr	r3, [r7, #28]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d10b      	bne.n	800cf4e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	881b      	ldrh	r3, [r3, #0]
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cf44:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800cf46:	69bb      	ldr	r3, [r7, #24]
 800cf48:	3302      	adds	r3, #2
 800cf4a:	61bb      	str	r3, [r7, #24]
 800cf4c:	e007      	b.n	800cf5e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cf4e:	69fb      	ldr	r3, [r7, #28]
 800cf50:	781a      	ldrb	r2, [r3, #0]
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800cf58:	69fb      	ldr	r3, [r7, #28]
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cf62:	b29b      	uxth	r3, r3
 800cf64:	3b01      	subs	r3, #1
 800cf66:	b29a      	uxth	r2, r3
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cf70:	b29b      	uxth	r3, r3
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d1cf      	bne.n	800cf16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	9300      	str	r3, [sp, #0]
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	2140      	movs	r1, #64	@ 0x40
 800cf80:	68f8      	ldr	r0, [r7, #12]
 800cf82:	f000 fd09 	bl	800d998 <UART_WaitOnFlagUntilTimeout>
 800cf86:	4603      	mov	r3, r0
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d001      	beq.n	800cf90 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800cf8c:	2303      	movs	r3, #3
 800cf8e:	e006      	b.n	800cf9e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2220      	movs	r2, #32
 800cf94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	e000      	b.n	800cf9e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800cf9c:	2302      	movs	r3, #2
  }
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3720      	adds	r7, #32
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}

0800cfa6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b08a      	sub	sp, #40	@ 0x28
 800cfaa:	af02      	add	r7, sp, #8
 800cfac:	60f8      	str	r0, [r7, #12]
 800cfae:	60b9      	str	r1, [r7, #8]
 800cfb0:	603b      	str	r3, [r7, #0]
 800cfb2:	4613      	mov	r3, r2
 800cfb4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	2b20      	cmp	r3, #32
 800cfc4:	d17c      	bne.n	800d0c0 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d002      	beq.n	800cfd2 <HAL_UART_Receive+0x2c>
 800cfcc:	88fb      	ldrh	r3, [r7, #6]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d101      	bne.n	800cfd6 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	e075      	b.n	800d0c2 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	2222      	movs	r2, #34	@ 0x22
 800cfe0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cfea:	f7fc fe77 	bl	8009cdc <HAL_GetTick>
 800cfee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	88fa      	ldrh	r2, [r7, #6]
 800cff4:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	88fa      	ldrh	r2, [r7, #6]
 800cffa:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	689b      	ldr	r3, [r3, #8]
 800d000:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d004:	d108      	bne.n	800d018 <HAL_UART_Receive+0x72>
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	691b      	ldr	r3, [r3, #16]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d104      	bne.n	800d018 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800d00e:	2300      	movs	r3, #0
 800d010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d012:	68bb      	ldr	r3, [r7, #8]
 800d014:	61bb      	str	r3, [r7, #24]
 800d016:	e003      	b.n	800d020 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d01c:	2300      	movs	r3, #0
 800d01e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800d020:	e043      	b.n	800d0aa <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800d022:	683b      	ldr	r3, [r7, #0]
 800d024:	9300      	str	r3, [sp, #0]
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	2200      	movs	r2, #0
 800d02a:	2120      	movs	r1, #32
 800d02c:	68f8      	ldr	r0, [r7, #12]
 800d02e:	f000 fcb3 	bl	800d998 <UART_WaitOnFlagUntilTimeout>
 800d032:	4603      	mov	r3, r0
 800d034:	2b00      	cmp	r3, #0
 800d036:	d001      	beq.n	800d03c <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800d038:	2303      	movs	r3, #3
 800d03a:	e042      	b.n	800d0c2 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800d03c:	69fb      	ldr	r3, [r7, #28]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d10c      	bne.n	800d05c <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	b29b      	uxth	r3, r3
 800d04a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d04e:	b29a      	uxth	r2, r3
 800d050:	69bb      	ldr	r3, [r7, #24]
 800d052:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800d054:	69bb      	ldr	r3, [r7, #24]
 800d056:	3302      	adds	r3, #2
 800d058:	61bb      	str	r3, [r7, #24]
 800d05a:	e01f      	b.n	800d09c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	689b      	ldr	r3, [r3, #8]
 800d060:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d064:	d007      	beq.n	800d076 <HAL_UART_Receive+0xd0>
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	689b      	ldr	r3, [r3, #8]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d10a      	bne.n	800d084 <HAL_UART_Receive+0xde>
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	691b      	ldr	r3, [r3, #16]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d106      	bne.n	800d084 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	b2da      	uxtb	r2, r3
 800d07e:	69fb      	ldr	r3, [r7, #28]
 800d080:	701a      	strb	r2, [r3, #0]
 800d082:	e008      	b.n	800d096 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d090:	b2da      	uxtb	r2, r3
 800d092:	69fb      	ldr	r3, [r7, #28]
 800d094:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800d096:	69fb      	ldr	r3, [r7, #28]
 800d098:	3301      	adds	r3, #1
 800d09a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d0a0:	b29b      	uxth	r3, r3
 800d0a2:	3b01      	subs	r3, #1
 800d0a4:	b29a      	uxth	r2, r3
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d1b6      	bne.n	800d022 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2220      	movs	r2, #32
 800d0b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	e000      	b.n	800d0c2 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800d0c0:	2302      	movs	r3, #2
  }
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3720      	adds	r7, #32
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}

0800d0ca <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d0ca:	b480      	push	{r7}
 800d0cc:	b085      	sub	sp, #20
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	60f8      	str	r0, [r7, #12]
 800d0d2:	60b9      	str	r1, [r7, #8]
 800d0d4:	4613      	mov	r3, r2
 800d0d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d0de:	b2db      	uxtb	r3, r3
 800d0e0:	2b20      	cmp	r3, #32
 800d0e2:	d121      	bne.n	800d128 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d002      	beq.n	800d0f0 <HAL_UART_Transmit_IT+0x26>
 800d0ea:	88fb      	ldrh	r3, [r7, #6]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d101      	bne.n	800d0f4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	e01a      	b.n	800d12a <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	68ba      	ldr	r2, [r7, #8]
 800d0f8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	88fa      	ldrh	r2, [r7, #6]
 800d0fe:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	88fa      	ldrh	r2, [r7, #6]
 800d104:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2200      	movs	r2, #0
 800d10a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2221      	movs	r2, #33	@ 0x21
 800d110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	68da      	ldr	r2, [r3, #12]
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800d122:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800d124:	2300      	movs	r3, #0
 800d126:	e000      	b.n	800d12a <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800d128:	2302      	movs	r3, #2
  }
}
 800d12a:	4618      	mov	r0, r3
 800d12c:	3714      	adds	r7, #20
 800d12e:	46bd      	mov	sp, r7
 800d130:	bc80      	pop	{r7}
 800d132:	4770      	bx	lr

0800d134 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b084      	sub	sp, #16
 800d138:	af00      	add	r7, sp, #0
 800d13a:	60f8      	str	r0, [r7, #12]
 800d13c:	60b9      	str	r1, [r7, #8]
 800d13e:	4613      	mov	r3, r2
 800d140:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d148:	b2db      	uxtb	r3, r3
 800d14a:	2b20      	cmp	r3, #32
 800d14c:	d112      	bne.n	800d174 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800d14e:	68bb      	ldr	r3, [r7, #8]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d002      	beq.n	800d15a <HAL_UART_Receive_IT+0x26>
 800d154:	88fb      	ldrh	r3, [r7, #6]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d101      	bne.n	800d15e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800d15a:	2301      	movs	r3, #1
 800d15c:	e00b      	b.n	800d176 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2200      	movs	r2, #0
 800d162:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800d164:	88fb      	ldrh	r3, [r7, #6]
 800d166:	461a      	mov	r2, r3
 800d168:	68b9      	ldr	r1, [r7, #8]
 800d16a:	68f8      	ldr	r0, [r7, #12]
 800d16c:	f000 fc82 	bl	800da74 <UART_Start_Receive_IT>
 800d170:	4603      	mov	r3, r0
 800d172:	e000      	b.n	800d176 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800d174:	2302      	movs	r3, #2
  }
}
 800d176:	4618      	mov	r0, r3
 800d178:	3710      	adds	r7, #16
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}

0800d17e <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800d17e:	b580      	push	{r7, lr}
 800d180:	b09a      	sub	sp, #104	@ 0x68
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	330c      	adds	r3, #12
 800d18c:	64bb      	str	r3, [r7, #72]	@ 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d18e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d190:	e853 3f00 	ldrex	r3, [r3]
 800d194:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d198:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d19c:	667b      	str	r3, [r7, #100]	@ 0x64
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	330c      	adds	r3, #12
 800d1a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d1a6:	657a      	str	r2, [r7, #84]	@ 0x54
 800d1a8:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d1ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d1ae:	e841 2300 	strex	r3, r2, [r1]
 800d1b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d1b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d1e5      	bne.n	800d186 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	3314      	adds	r3, #20
 800d1c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1c4:	e853 3f00 	ldrex	r3, [r3]
 800d1c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d1ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1cc:	f023 0301 	bic.w	r3, r3, #1
 800d1d0:	663b      	str	r3, [r7, #96]	@ 0x60
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	3314      	adds	r3, #20
 800d1d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d1da:	643a      	str	r2, [r7, #64]	@ 0x40
 800d1dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d1e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d1e2:	e841 2300 	strex	r3, r2, [r1]
 800d1e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d1e5      	bne.n	800d1ba <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d1f2:	2b01      	cmp	r3, #1
 800d1f4:	d119      	bne.n	800d22a <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	330c      	adds	r3, #12
 800d1fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1fe:	6a3b      	ldr	r3, [r7, #32]
 800d200:	e853 3f00 	ldrex	r3, [r3]
 800d204:	61fb      	str	r3, [r7, #28]
   return(result);
 800d206:	69fb      	ldr	r3, [r7, #28]
 800d208:	f023 0310 	bic.w	r3, r3, #16
 800d20c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	330c      	adds	r3, #12
 800d214:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d216:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d218:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d21a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d21c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d21e:	e841 2300 	strex	r3, r2, [r1]
 800d222:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d226:	2b00      	cmp	r3, #0
 800d228:	d1e5      	bne.n	800d1f6 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	695b      	ldr	r3, [r3, #20]
 800d230:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d234:	2b00      	cmp	r3, #0
 800d236:	d036      	beq.n	800d2a6 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	3314      	adds	r3, #20
 800d23e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	e853 3f00 	ldrex	r3, [r3]
 800d246:	60bb      	str	r3, [r7, #8]
   return(result);
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d24e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	3314      	adds	r3, #20
 800d256:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d258:	61ba      	str	r2, [r7, #24]
 800d25a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d25c:	6979      	ldr	r1, [r7, #20]
 800d25e:	69ba      	ldr	r2, [r7, #24]
 800d260:	e841 2300 	strex	r3, r2, [r1]
 800d264:	613b      	str	r3, [r7, #16]
   return(result);
 800d266:	693b      	ldr	r3, [r7, #16]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d1e5      	bne.n	800d238 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d270:	2b00      	cmp	r3, #0
 800d272:	d018      	beq.n	800d2a6 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d278:	2200      	movs	r2, #0
 800d27a:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d280:	4618      	mov	r0, r3
 800d282:	f7fc ff62 	bl	800a14a <HAL_DMA_Abort>
 800d286:	4603      	mov	r3, r0
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d00c      	beq.n	800d2a6 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d290:	4618      	mov	r0, r3
 800d292:	f7fd f89d 	bl	800a3d0 <HAL_DMA_GetError>
 800d296:	4603      	mov	r3, r0
 800d298:	2b20      	cmp	r3, #32
 800d29a:	d104      	bne.n	800d2a6 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2210      	movs	r2, #16
 800d2a0:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 800d2a2:	2303      	movs	r3, #3
 800d2a4:	e00a      	b.n	800d2bc <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2220      	movs	r2, #32
 800d2b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 800d2ba:	2300      	movs	r3, #0
}
 800d2bc:	4618      	mov	r0, r3
 800d2be:	3768      	adds	r7, #104	@ 0x68
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	bd80      	pop	{r7, pc}

0800d2c4 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b09a      	sub	sp, #104	@ 0x68
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	330c      	adds	r3, #12
 800d2d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d2d6:	e853 3f00 	ldrex	r3, [r3]
 800d2da:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800d2dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d2de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d2e2:	667b      	str	r3, [r7, #100]	@ 0x64
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	330c      	adds	r3, #12
 800d2ea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d2ec:	657a      	str	r2, [r7, #84]	@ 0x54
 800d2ee:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d2f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d2f4:	e841 2300 	strex	r3, r2, [r1]
 800d2f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800d2fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d1e5      	bne.n	800d2cc <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	3314      	adds	r3, #20
 800d306:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d30a:	e853 3f00 	ldrex	r3, [r3]
 800d30e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d312:	f023 0301 	bic.w	r3, r3, #1
 800d316:	663b      	str	r3, [r7, #96]	@ 0x60
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	3314      	adds	r3, #20
 800d31e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d320:	643a      	str	r2, [r7, #64]	@ 0x40
 800d322:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d324:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d326:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d328:	e841 2300 	strex	r3, r2, [r1]
 800d32c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d32e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d330:	2b00      	cmp	r3, #0
 800d332:	d1e5      	bne.n	800d300 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d338:	2b01      	cmp	r3, #1
 800d33a:	d119      	bne.n	800d370 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	330c      	adds	r3, #12
 800d342:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d344:	6a3b      	ldr	r3, [r7, #32]
 800d346:	e853 3f00 	ldrex	r3, [r3]
 800d34a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d34c:	69fb      	ldr	r3, [r7, #28]
 800d34e:	f023 0310 	bic.w	r3, r3, #16
 800d352:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	330c      	adds	r3, #12
 800d35a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800d35c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d35e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d360:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d364:	e841 2300 	strex	r3, r2, [r1]
 800d368:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d1e5      	bne.n	800d33c <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	695b      	ldr	r3, [r3, #20]
 800d376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d03f      	beq.n	800d3fe <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	3314      	adds	r3, #20
 800d384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	e853 3f00 	ldrex	r3, [r3]
 800d38c:	60bb      	str	r3, [r7, #8]
   return(result);
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d394:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	3314      	adds	r3, #20
 800d39c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d39e:	61ba      	str	r2, [r7, #24]
 800d3a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a2:	6979      	ldr	r1, [r7, #20]
 800d3a4:	69ba      	ldr	r2, [r7, #24]
 800d3a6:	e841 2300 	strex	r3, r2, [r1]
 800d3aa:	613b      	str	r3, [r7, #16]
   return(result);
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d1e5      	bne.n	800d37e <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d013      	beq.n	800d3e2 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3be:	4a19      	ldr	r2, [pc, #100]	@ (800d424 <HAL_UART_AbortReceive_IT+0x160>)
 800d3c0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7fc fefa 	bl	800a1c0 <HAL_DMA_Abort_IT>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d022      	beq.n	800d418 <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d3d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d3d8:	687a      	ldr	r2, [r7, #4]
 800d3da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d3dc:	4610      	mov	r0, r2
 800d3de:	4798      	blx	r3
 800d3e0:	e01a      	b.n	800d418 <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2220      	movs	r2, #32
 800d3ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 faba 	bl	800d970 <HAL_UART_AbortReceiveCpltCallback>
 800d3fc:	e00c      	b.n	800d418 <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	2200      	movs	r2, #0
 800d402:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2220      	movs	r2, #32
 800d408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2200      	movs	r2, #0
 800d410:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f000 faac 	bl	800d970 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800d418:	2300      	movs	r3, #0
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3768      	adds	r7, #104	@ 0x68
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}
 800d422:	bf00      	nop
 800d424:	0800dbd3 	.word	0x0800dbd3

0800d428 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b0ba      	sub	sp, #232	@ 0xe8
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	68db      	ldr	r3, [r3, #12]
 800d440:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	695b      	ldr	r3, [r3, #20]
 800d44a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800d44e:	2300      	movs	r3, #0
 800d450:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800d454:	2300      	movs	r3, #0
 800d456:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d45a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d45e:	f003 030f 	and.w	r3, r3, #15
 800d462:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800d466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d10f      	bne.n	800d48e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d46e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d472:	f003 0320 	and.w	r3, r3, #32
 800d476:	2b00      	cmp	r3, #0
 800d478:	d009      	beq.n	800d48e <HAL_UART_IRQHandler+0x66>
 800d47a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d47e:	f003 0320 	and.w	r3, r3, #32
 800d482:	2b00      	cmp	r3, #0
 800d484:	d003      	beq.n	800d48e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 fc22 	bl	800dcd0 <UART_Receive_IT>
      return;
 800d48c:	e25b      	b.n	800d946 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d48e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800d492:	2b00      	cmp	r3, #0
 800d494:	f000 80de 	beq.w	800d654 <HAL_UART_IRQHandler+0x22c>
 800d498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d49c:	f003 0301 	and.w	r3, r3, #1
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d106      	bne.n	800d4b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d4a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	f000 80d1 	beq.w	800d654 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d4b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4b6:	f003 0301 	and.w	r3, r3, #1
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d00b      	beq.n	800d4d6 <HAL_UART_IRQHandler+0xae>
 800d4be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d4c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d005      	beq.n	800d4d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4ce:	f043 0201 	orr.w	r2, r3, #1
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d4d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4da:	f003 0304 	and.w	r3, r3, #4
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d00b      	beq.n	800d4fa <HAL_UART_IRQHandler+0xd2>
 800d4e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d4e6:	f003 0301 	and.w	r3, r3, #1
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d005      	beq.n	800d4fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d4f2:	f043 0202 	orr.w	r2, r3, #2
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d4fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d4fe:	f003 0302 	and.w	r3, r3, #2
 800d502:	2b00      	cmp	r3, #0
 800d504:	d00b      	beq.n	800d51e <HAL_UART_IRQHandler+0xf6>
 800d506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d50a:	f003 0301 	and.w	r3, r3, #1
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d005      	beq.n	800d51e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d516:	f043 0204 	orr.w	r2, r3, #4
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d51e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d522:	f003 0308 	and.w	r3, r3, #8
 800d526:	2b00      	cmp	r3, #0
 800d528:	d011      	beq.n	800d54e <HAL_UART_IRQHandler+0x126>
 800d52a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d52e:	f003 0320 	and.w	r3, r3, #32
 800d532:	2b00      	cmp	r3, #0
 800d534:	d105      	bne.n	800d542 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800d53a:	f003 0301 	and.w	r3, r3, #1
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d005      	beq.n	800d54e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d546:	f043 0208 	orr.w	r2, r3, #8
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d552:	2b00      	cmp	r3, #0
 800d554:	f000 81f2 	beq.w	800d93c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d55c:	f003 0320 	and.w	r3, r3, #32
 800d560:	2b00      	cmp	r3, #0
 800d562:	d008      	beq.n	800d576 <HAL_UART_IRQHandler+0x14e>
 800d564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d568:	f003 0320 	and.w	r3, r3, #32
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d002      	beq.n	800d576 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f000 fbad 	bl	800dcd0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	695b      	ldr	r3, [r3, #20]
 800d57c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d580:	2b00      	cmp	r3, #0
 800d582:	bf14      	ite	ne
 800d584:	2301      	movne	r3, #1
 800d586:	2300      	moveq	r3, #0
 800d588:	b2db      	uxtb	r3, r3
 800d58a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d592:	f003 0308 	and.w	r3, r3, #8
 800d596:	2b00      	cmp	r3, #0
 800d598:	d103      	bne.n	800d5a2 <HAL_UART_IRQHandler+0x17a>
 800d59a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d04f      	beq.n	800d642 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d5a2:	6878      	ldr	r0, [r7, #4]
 800d5a4:	f000 fa9f 	bl	800dae6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	695b      	ldr	r3, [r3, #20]
 800d5ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d041      	beq.n	800d63a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	3314      	adds	r3, #20
 800d5bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d5c4:	e853 3f00 	ldrex	r3, [r3]
 800d5c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800d5cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d5d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d5d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	3314      	adds	r3, #20
 800d5de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800d5e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800d5e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800d5ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800d5f2:	e841 2300 	strex	r3, r2, [r1]
 800d5f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800d5fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d1d9      	bne.n	800d5b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d606:	2b00      	cmp	r3, #0
 800d608:	d013      	beq.n	800d632 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d60e:	4a7e      	ldr	r2, [pc, #504]	@ (800d808 <HAL_UART_IRQHandler+0x3e0>)
 800d610:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d616:	4618      	mov	r0, r3
 800d618:	f7fc fdd2 	bl	800a1c0 <HAL_DMA_Abort_IT>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d016      	beq.n	800d650 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d628:	687a      	ldr	r2, [r7, #4]
 800d62a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d62c:	4610      	mov	r0, r2
 800d62e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d630:	e00e      	b.n	800d650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f000 f993 	bl	800d95e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d638:	e00a      	b.n	800d650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 f98f 	bl	800d95e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d640:	e006      	b.n	800d650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 f98b 	bl	800d95e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	2200      	movs	r2, #0
 800d64c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800d64e:	e175      	b.n	800d93c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d650:	bf00      	nop
    return;
 800d652:	e173      	b.n	800d93c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d658:	2b01      	cmp	r3, #1
 800d65a:	f040 814f 	bne.w	800d8fc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d65e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d662:	f003 0310 	and.w	r3, r3, #16
 800d666:	2b00      	cmp	r3, #0
 800d668:	f000 8148 	beq.w	800d8fc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d66c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d670:	f003 0310 	and.w	r3, r3, #16
 800d674:	2b00      	cmp	r3, #0
 800d676:	f000 8141 	beq.w	800d8fc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d67a:	2300      	movs	r3, #0
 800d67c:	60bb      	str	r3, [r7, #8]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	60bb      	str	r3, [r7, #8]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	685b      	ldr	r3, [r3, #4]
 800d68c:	60bb      	str	r3, [r7, #8]
 800d68e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	695b      	ldr	r3, [r3, #20]
 800d696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	f000 80b6 	beq.w	800d80c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	685b      	ldr	r3, [r3, #4]
 800d6a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d6ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	f000 8145 	beq.w	800d940 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d6ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d6be:	429a      	cmp	r2, r3
 800d6c0:	f080 813e 	bcs.w	800d940 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d6ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6d0:	699b      	ldr	r3, [r3, #24]
 800d6d2:	2b20      	cmp	r3, #32
 800d6d4:	f000 8088 	beq.w	800d7e8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	330c      	adds	r3, #12
 800d6de:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d6e6:	e853 3f00 	ldrex	r3, [r3]
 800d6ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d6ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d6f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d6f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	330c      	adds	r3, #12
 800d700:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d704:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d708:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d70c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d710:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d714:	e841 2300 	strex	r3, r2, [r1]
 800d718:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d71c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d720:	2b00      	cmp	r3, #0
 800d722:	d1d9      	bne.n	800d6d8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	3314      	adds	r3, #20
 800d72a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d72c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d72e:	e853 3f00 	ldrex	r3, [r3]
 800d732:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d734:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d736:	f023 0301 	bic.w	r3, r3, #1
 800d73a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	3314      	adds	r3, #20
 800d744:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d748:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d74c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d74e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d750:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d754:	e841 2300 	strex	r3, r2, [r1]
 800d758:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d75a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d1e1      	bne.n	800d724 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	3314      	adds	r3, #20
 800d766:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d768:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d76a:	e853 3f00 	ldrex	r3, [r3]
 800d76e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d770:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d772:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d776:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	3314      	adds	r3, #20
 800d780:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d784:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d786:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d788:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d78a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d78c:	e841 2300 	strex	r3, r2, [r1]
 800d790:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d792:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d794:	2b00      	cmp	r3, #0
 800d796:	d1e3      	bne.n	800d760 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2220      	movs	r2, #32
 800d79c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	330c      	adds	r3, #12
 800d7ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d7b0:	e853 3f00 	ldrex	r3, [r3]
 800d7b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d7b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d7b8:	f023 0310 	bic.w	r3, r3, #16
 800d7bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	330c      	adds	r3, #12
 800d7c6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d7ca:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d7cc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d7d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d7d2:	e841 2300 	strex	r3, r2, [r1]
 800d7d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d7d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d1e3      	bne.n	800d7a6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f7fc fcb1 	bl	800a14a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2202      	movs	r2, #2
 800d7ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d7f6:	b29b      	uxth	r3, r3
 800d7f8:	1ad3      	subs	r3, r2, r3
 800d7fa:	b29b      	uxth	r3, r3
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f000 f8bf 	bl	800d982 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d804:	e09c      	b.n	800d940 <HAL_UART_IRQHandler+0x518>
 800d806:	bf00      	nop
 800d808:	0800dbab 	.word	0x0800dbab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d814:	b29b      	uxth	r3, r3
 800d816:	1ad3      	subs	r3, r2, r3
 800d818:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d820:	b29b      	uxth	r3, r3
 800d822:	2b00      	cmp	r3, #0
 800d824:	f000 808e 	beq.w	800d944 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d828:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	f000 8089 	beq.w	800d944 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	330c      	adds	r3, #12
 800d838:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d83c:	e853 3f00 	ldrex	r3, [r3]
 800d840:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d844:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d848:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	330c      	adds	r3, #12
 800d852:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d856:	647a      	str	r2, [r7, #68]	@ 0x44
 800d858:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d85a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d85c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d85e:	e841 2300 	strex	r3, r2, [r1]
 800d862:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d866:	2b00      	cmp	r3, #0
 800d868:	d1e3      	bne.n	800d832 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	3314      	adds	r3, #20
 800d870:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d874:	e853 3f00 	ldrex	r3, [r3]
 800d878:	623b      	str	r3, [r7, #32]
   return(result);
 800d87a:	6a3b      	ldr	r3, [r7, #32]
 800d87c:	f023 0301 	bic.w	r3, r3, #1
 800d880:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	3314      	adds	r3, #20
 800d88a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d88e:	633a      	str	r2, [r7, #48]	@ 0x30
 800d890:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d892:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d894:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d896:	e841 2300 	strex	r3, r2, [r1]
 800d89a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d89c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d1e3      	bne.n	800d86a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2220      	movs	r2, #32
 800d8a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2200      	movs	r2, #0
 800d8ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	330c      	adds	r3, #12
 800d8b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	e853 3f00 	ldrex	r3, [r3]
 800d8be:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	f023 0310 	bic.w	r3, r3, #16
 800d8c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	330c      	adds	r3, #12
 800d8d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d8d4:	61fa      	str	r2, [r7, #28]
 800d8d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d8:	69b9      	ldr	r1, [r7, #24]
 800d8da:	69fa      	ldr	r2, [r7, #28]
 800d8dc:	e841 2300 	strex	r3, r2, [r1]
 800d8e0:	617b      	str	r3, [r7, #20]
   return(result);
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d1e3      	bne.n	800d8b0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2202      	movs	r2, #2
 800d8ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d8ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f000 f844 	bl	800d982 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d8fa:	e023      	b.n	800d944 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d8fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d904:	2b00      	cmp	r3, #0
 800d906:	d009      	beq.n	800d91c <HAL_UART_IRQHandler+0x4f4>
 800d908:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d90c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d910:	2b00      	cmp	r3, #0
 800d912:	d003      	beq.n	800d91c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f000 f974 	bl	800dc02 <UART_Transmit_IT>
    return;
 800d91a:	e014      	b.n	800d946 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d91c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d924:	2b00      	cmp	r3, #0
 800d926:	d00e      	beq.n	800d946 <HAL_UART_IRQHandler+0x51e>
 800d928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d92c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d930:	2b00      	cmp	r3, #0
 800d932:	d008      	beq.n	800d946 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f000 f9b3 	bl	800dca0 <UART_EndTransmit_IT>
    return;
 800d93a:	e004      	b.n	800d946 <HAL_UART_IRQHandler+0x51e>
    return;
 800d93c:	bf00      	nop
 800d93e:	e002      	b.n	800d946 <HAL_UART_IRQHandler+0x51e>
      return;
 800d940:	bf00      	nop
 800d942:	e000      	b.n	800d946 <HAL_UART_IRQHandler+0x51e>
      return;
 800d944:	bf00      	nop
  }
}
 800d946:	37e8      	adds	r7, #232	@ 0xe8
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b083      	sub	sp, #12
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d954:	bf00      	nop
 800d956:	370c      	adds	r7, #12
 800d958:	46bd      	mov	sp, r7
 800d95a:	bc80      	pop	{r7}
 800d95c:	4770      	bx	lr

0800d95e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d95e:	b480      	push	{r7}
 800d960:	b083      	sub	sp, #12
 800d962:	af00      	add	r7, sp, #0
 800d964:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d966:	bf00      	nop
 800d968:	370c      	adds	r7, #12
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bc80      	pop	{r7}
 800d96e:	4770      	bx	lr

0800d970 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800d970:	b480      	push	{r7}
 800d972:	b083      	sub	sp, #12
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800d978:	bf00      	nop
 800d97a:	370c      	adds	r7, #12
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bc80      	pop	{r7}
 800d980:	4770      	bx	lr

0800d982 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d982:	b480      	push	{r7}
 800d984:	b083      	sub	sp, #12
 800d986:	af00      	add	r7, sp, #0
 800d988:	6078      	str	r0, [r7, #4]
 800d98a:	460b      	mov	r3, r1
 800d98c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d98e:	bf00      	nop
 800d990:	370c      	adds	r7, #12
 800d992:	46bd      	mov	sp, r7
 800d994:	bc80      	pop	{r7}
 800d996:	4770      	bx	lr

0800d998 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d998:	b580      	push	{r7, lr}
 800d99a:	b090      	sub	sp, #64	@ 0x40
 800d99c:	af00      	add	r7, sp, #0
 800d99e:	60f8      	str	r0, [r7, #12]
 800d9a0:	60b9      	str	r1, [r7, #8]
 800d9a2:	603b      	str	r3, [r7, #0]
 800d9a4:	4613      	mov	r3, r2
 800d9a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d9a8:	e050      	b.n	800da4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d9aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d9ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d9b0:	d04c      	beq.n	800da4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d9b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d007      	beq.n	800d9c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800d9b8:	f7fc f990 	bl	8009cdc <HAL_GetTick>
 800d9bc:	4602      	mov	r2, r0
 800d9be:	683b      	ldr	r3, [r7, #0]
 800d9c0:	1ad3      	subs	r3, r2, r3
 800d9c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d9c4:	429a      	cmp	r2, r3
 800d9c6:	d241      	bcs.n	800da4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	330c      	adds	r3, #12
 800d9ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d9d2:	e853 3f00 	ldrex	r3, [r3]
 800d9d6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d9d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9da:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800d9de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	330c      	adds	r3, #12
 800d9e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d9e8:	637a      	str	r2, [r7, #52]	@ 0x34
 800d9ea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d9ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d9f0:	e841 2300 	strex	r3, r2, [r1]
 800d9f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d9f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d1e5      	bne.n	800d9c8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	3314      	adds	r3, #20
 800da02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	e853 3f00 	ldrex	r3, [r3]
 800da0a:	613b      	str	r3, [r7, #16]
   return(result);
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	f023 0301 	bic.w	r3, r3, #1
 800da12:	63bb      	str	r3, [r7, #56]	@ 0x38
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	3314      	adds	r3, #20
 800da1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800da1c:	623a      	str	r2, [r7, #32]
 800da1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da20:	69f9      	ldr	r1, [r7, #28]
 800da22:	6a3a      	ldr	r2, [r7, #32]
 800da24:	e841 2300 	strex	r3, r2, [r1]
 800da28:	61bb      	str	r3, [r7, #24]
   return(result);
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d1e5      	bne.n	800d9fc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2220      	movs	r2, #32
 800da34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2220      	movs	r2, #32
 800da3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	2200      	movs	r2, #0
 800da44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800da48:	2303      	movs	r3, #3
 800da4a:	e00f      	b.n	800da6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	681a      	ldr	r2, [r3, #0]
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	4013      	ands	r3, r2
 800da56:	68ba      	ldr	r2, [r7, #8]
 800da58:	429a      	cmp	r2, r3
 800da5a:	bf0c      	ite	eq
 800da5c:	2301      	moveq	r3, #1
 800da5e:	2300      	movne	r3, #0
 800da60:	b2db      	uxtb	r3, r3
 800da62:	461a      	mov	r2, r3
 800da64:	79fb      	ldrb	r3, [r7, #7]
 800da66:	429a      	cmp	r2, r3
 800da68:	d09f      	beq.n	800d9aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800da6a:	2300      	movs	r3, #0
}
 800da6c:	4618      	mov	r0, r3
 800da6e:	3740      	adds	r7, #64	@ 0x40
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800da74:	b480      	push	{r7}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
 800da7a:	60f8      	str	r0, [r7, #12]
 800da7c:	60b9      	str	r1, [r7, #8]
 800da7e:	4613      	mov	r3, r2
 800da80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	68ba      	ldr	r2, [r7, #8]
 800da86:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	88fa      	ldrh	r2, [r7, #6]
 800da8c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	88fa      	ldrh	r2, [r7, #6]
 800da92:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	2200      	movs	r2, #0
 800da98:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2222      	movs	r2, #34	@ 0x22
 800da9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	691b      	ldr	r3, [r3, #16]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d007      	beq.n	800daba <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	68da      	ldr	r2, [r3, #12]
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dab8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	695a      	ldr	r2, [r3, #20]
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f042 0201 	orr.w	r2, r2, #1
 800dac8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	68da      	ldr	r2, [r3, #12]
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	f042 0220 	orr.w	r2, r2, #32
 800dad8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dada:	2300      	movs	r3, #0
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3714      	adds	r7, #20
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bc80      	pop	{r7}
 800dae4:	4770      	bx	lr

0800dae6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dae6:	b480      	push	{r7}
 800dae8:	b095      	sub	sp, #84	@ 0x54
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	330c      	adds	r3, #12
 800daf4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800daf8:	e853 3f00 	ldrex	r3, [r3]
 800dafc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800db04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	330c      	adds	r3, #12
 800db0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800db0e:	643a      	str	r2, [r7, #64]	@ 0x40
 800db10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800db14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800db16:	e841 2300 	strex	r3, r2, [r1]
 800db1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800db1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d1e5      	bne.n	800daee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	3314      	adds	r3, #20
 800db28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db2a:	6a3b      	ldr	r3, [r7, #32]
 800db2c:	e853 3f00 	ldrex	r3, [r3]
 800db30:	61fb      	str	r3, [r7, #28]
   return(result);
 800db32:	69fb      	ldr	r3, [r7, #28]
 800db34:	f023 0301 	bic.w	r3, r3, #1
 800db38:	64bb      	str	r3, [r7, #72]	@ 0x48
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	3314      	adds	r3, #20
 800db40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800db42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800db44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800db48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db4a:	e841 2300 	strex	r3, r2, [r1]
 800db4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800db50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db52:	2b00      	cmp	r3, #0
 800db54:	d1e5      	bne.n	800db22 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db5a:	2b01      	cmp	r3, #1
 800db5c:	d119      	bne.n	800db92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	330c      	adds	r3, #12
 800db64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	e853 3f00 	ldrex	r3, [r3]
 800db6c:	60bb      	str	r3, [r7, #8]
   return(result);
 800db6e:	68bb      	ldr	r3, [r7, #8]
 800db70:	f023 0310 	bic.w	r3, r3, #16
 800db74:	647b      	str	r3, [r7, #68]	@ 0x44
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	330c      	adds	r3, #12
 800db7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800db7e:	61ba      	str	r2, [r7, #24]
 800db80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db82:	6979      	ldr	r1, [r7, #20]
 800db84:	69ba      	ldr	r2, [r7, #24]
 800db86:	e841 2300 	strex	r3, r2, [r1]
 800db8a:	613b      	str	r3, [r7, #16]
   return(result);
 800db8c:	693b      	ldr	r3, [r7, #16]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d1e5      	bne.n	800db5e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	2220      	movs	r2, #32
 800db96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2200      	movs	r2, #0
 800db9e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800dba0:	bf00      	nop
 800dba2:	3754      	adds	r7, #84	@ 0x54
 800dba4:	46bd      	mov	sp, r7
 800dba6:	bc80      	pop	{r7}
 800dba8:	4770      	bx	lr

0800dbaa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dbaa:	b580      	push	{r7, lr}
 800dbac:	b084      	sub	sp, #16
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbb6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dbc4:	68f8      	ldr	r0, [r7, #12]
 800dbc6:	f7ff feca 	bl	800d95e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbca:	bf00      	nop
 800dbcc:	3710      	adds	r7, #16
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}

0800dbd2 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b084      	sub	sp, #16
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbde:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	2220      	movs	r2, #32
 800dbea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800dbf4:	68f8      	ldr	r0, [r7, #12]
 800dbf6:	f7ff febb 	bl	800d970 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbfa:	bf00      	nop
 800dbfc:	3710      	adds	r7, #16
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800dc02:	b480      	push	{r7}
 800dc04:	b085      	sub	sp, #20
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800dc10:	b2db      	uxtb	r3, r3
 800dc12:	2b21      	cmp	r3, #33	@ 0x21
 800dc14:	d13e      	bne.n	800dc94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	689b      	ldr	r3, [r3, #8]
 800dc1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dc1e:	d114      	bne.n	800dc4a <UART_Transmit_IT+0x48>
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	691b      	ldr	r3, [r3, #16]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d110      	bne.n	800dc4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6a1b      	ldr	r3, [r3, #32]
 800dc2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	881b      	ldrh	r3, [r3, #0]
 800dc32:	461a      	mov	r2, r3
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dc3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	6a1b      	ldr	r3, [r3, #32]
 800dc42:	1c9a      	adds	r2, r3, #2
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	621a      	str	r2, [r3, #32]
 800dc48:	e008      	b.n	800dc5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6a1b      	ldr	r3, [r3, #32]
 800dc4e:	1c59      	adds	r1, r3, #1
 800dc50:	687a      	ldr	r2, [r7, #4]
 800dc52:	6211      	str	r1, [r2, #32]
 800dc54:	781a      	ldrb	r2, [r3, #0]
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	3b01      	subs	r3, #1
 800dc64:	b29b      	uxth	r3, r3
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	4619      	mov	r1, r3
 800dc6a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d10f      	bne.n	800dc90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	68da      	ldr	r2, [r3, #12]
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800dc7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	68da      	ldr	r2, [r3, #12]
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dc8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dc90:	2300      	movs	r3, #0
 800dc92:	e000      	b.n	800dc96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800dc94:	2302      	movs	r3, #2
  }
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3714      	adds	r7, #20
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bc80      	pop	{r7}
 800dc9e:	4770      	bx	lr

0800dca0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b082      	sub	sp, #8
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	68da      	ldr	r2, [r3, #12]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dcb6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2220      	movs	r2, #32
 800dcbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f7ff fe43 	bl	800d94c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800dcc6:	2300      	movs	r3, #0
}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3708      	adds	r7, #8
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b08c      	sub	sp, #48	@ 0x30
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	2b22      	cmp	r3, #34	@ 0x22
 800dce2:	f040 80ae 	bne.w	800de42 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	689b      	ldr	r3, [r3, #8]
 800dcea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dcee:	d117      	bne.n	800dd20 <UART_Receive_IT+0x50>
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	691b      	ldr	r3, [r3, #16]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d113      	bne.n	800dd20 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd00:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	b29b      	uxth	r3, r3
 800dd0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd0e:	b29a      	uxth	r2, r3
 800dd10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd18:	1c9a      	adds	r2, r3, #2
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	629a      	str	r2, [r3, #40]	@ 0x28
 800dd1e:	e026      	b.n	800dd6e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd24:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800dd26:	2300      	movs	r3, #0
 800dd28:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	689b      	ldr	r3, [r3, #8]
 800dd2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dd32:	d007      	beq.n	800dd44 <UART_Receive_IT+0x74>
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	689b      	ldr	r3, [r3, #8]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d10a      	bne.n	800dd52 <UART_Receive_IT+0x82>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	691b      	ldr	r3, [r3, #16]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d106      	bne.n	800dd52 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	b2da      	uxtb	r2, r3
 800dd4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd4e:	701a      	strb	r2, [r3, #0]
 800dd50:	e008      	b.n	800dd64 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	b2db      	uxtb	r3, r3
 800dd5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd5e:	b2da      	uxtb	r2, r3
 800dd60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd62:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd68:	1c5a      	adds	r2, r3, #1
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	3b01      	subs	r3, #1
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	687a      	ldr	r2, [r7, #4]
 800dd7a:	4619      	mov	r1, r3
 800dd7c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d15d      	bne.n	800de3e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	68da      	ldr	r2, [r3, #12]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	f022 0220 	bic.w	r2, r2, #32
 800dd90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	68da      	ldr	r2, [r3, #12]
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800dda0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	695a      	ldr	r2, [r3, #20]
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f022 0201 	bic.w	r2, r2, #1
 800ddb0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2220      	movs	r2, #32
 800ddb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d135      	bne.n	800de34 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	330c      	adds	r3, #12
 800ddd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	e853 3f00 	ldrex	r3, [r3]
 800dddc:	613b      	str	r3, [r7, #16]
   return(result);
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	f023 0310 	bic.w	r3, r3, #16
 800dde4:	627b      	str	r3, [r7, #36]	@ 0x24
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	330c      	adds	r3, #12
 800ddec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ddee:	623a      	str	r2, [r7, #32]
 800ddf0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddf2:	69f9      	ldr	r1, [r7, #28]
 800ddf4:	6a3a      	ldr	r2, [r7, #32]
 800ddf6:	e841 2300 	strex	r3, r2, [r1]
 800ddfa:	61bb      	str	r3, [r7, #24]
   return(result);
 800ddfc:	69bb      	ldr	r3, [r7, #24]
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	d1e5      	bne.n	800ddce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	f003 0310 	and.w	r3, r3, #16
 800de0c:	2b10      	cmp	r3, #16
 800de0e:	d10a      	bne.n	800de26 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800de10:	2300      	movs	r3, #0
 800de12:	60fb      	str	r3, [r7, #12]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	60fb      	str	r3, [r7, #12]
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	60fb      	str	r3, [r7, #12]
 800de24:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800de2a:	4619      	mov	r1, r3
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f7ff fda8 	bl	800d982 <HAL_UARTEx_RxEventCallback>
 800de32:	e002      	b.n	800de3a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f7fb fa67 	bl	8009308 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800de3a:	2300      	movs	r3, #0
 800de3c:	e002      	b.n	800de44 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800de3e:	2300      	movs	r3, #0
 800de40:	e000      	b.n	800de44 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800de42:	2302      	movs	r3, #2
  }
}
 800de44:	4618      	mov	r0, r3
 800de46:	3730      	adds	r7, #48	@ 0x30
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b084      	sub	sp, #16
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	691b      	ldr	r3, [r3, #16]
 800de5a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	68da      	ldr	r2, [r3, #12]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	430a      	orrs	r2, r1
 800de68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	689a      	ldr	r2, [r3, #8]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	691b      	ldr	r3, [r3, #16]
 800de72:	431a      	orrs	r2, r3
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	695b      	ldr	r3, [r3, #20]
 800de78:	4313      	orrs	r3, r2
 800de7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	68db      	ldr	r3, [r3, #12]
 800de82:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800de86:	f023 030c 	bic.w	r3, r3, #12
 800de8a:	687a      	ldr	r2, [r7, #4]
 800de8c:	6812      	ldr	r2, [r2, #0]
 800de8e:	68b9      	ldr	r1, [r7, #8]
 800de90:	430b      	orrs	r3, r1
 800de92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	695b      	ldr	r3, [r3, #20]
 800de9a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	699a      	ldr	r2, [r3, #24]
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	430a      	orrs	r2, r1
 800dea8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	4a2c      	ldr	r2, [pc, #176]	@ (800df60 <UART_SetConfig+0x114>)
 800deb0:	4293      	cmp	r3, r2
 800deb2:	d103      	bne.n	800debc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800deb4:	f7fe fb40 	bl	800c538 <HAL_RCC_GetPCLK2Freq>
 800deb8:	60f8      	str	r0, [r7, #12]
 800deba:	e002      	b.n	800dec2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800debc:	f7fe fb28 	bl	800c510 <HAL_RCC_GetPCLK1Freq>
 800dec0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dec2:	68fa      	ldr	r2, [r7, #12]
 800dec4:	4613      	mov	r3, r2
 800dec6:	009b      	lsls	r3, r3, #2
 800dec8:	4413      	add	r3, r2
 800deca:	009a      	lsls	r2, r3, #2
 800decc:	441a      	add	r2, r3
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	685b      	ldr	r3, [r3, #4]
 800ded2:	009b      	lsls	r3, r3, #2
 800ded4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ded8:	4a22      	ldr	r2, [pc, #136]	@ (800df64 <UART_SetConfig+0x118>)
 800deda:	fba2 2303 	umull	r2, r3, r2, r3
 800dede:	095b      	lsrs	r3, r3, #5
 800dee0:	0119      	lsls	r1, r3, #4
 800dee2:	68fa      	ldr	r2, [r7, #12]
 800dee4:	4613      	mov	r3, r2
 800dee6:	009b      	lsls	r3, r3, #2
 800dee8:	4413      	add	r3, r2
 800deea:	009a      	lsls	r2, r3, #2
 800deec:	441a      	add	r2, r3
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	685b      	ldr	r3, [r3, #4]
 800def2:	009b      	lsls	r3, r3, #2
 800def4:	fbb2 f2f3 	udiv	r2, r2, r3
 800def8:	4b1a      	ldr	r3, [pc, #104]	@ (800df64 <UART_SetConfig+0x118>)
 800defa:	fba3 0302 	umull	r0, r3, r3, r2
 800defe:	095b      	lsrs	r3, r3, #5
 800df00:	2064      	movs	r0, #100	@ 0x64
 800df02:	fb00 f303 	mul.w	r3, r0, r3
 800df06:	1ad3      	subs	r3, r2, r3
 800df08:	011b      	lsls	r3, r3, #4
 800df0a:	3332      	adds	r3, #50	@ 0x32
 800df0c:	4a15      	ldr	r2, [pc, #84]	@ (800df64 <UART_SetConfig+0x118>)
 800df0e:	fba2 2303 	umull	r2, r3, r2, r3
 800df12:	095b      	lsrs	r3, r3, #5
 800df14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800df18:	4419      	add	r1, r3
 800df1a:	68fa      	ldr	r2, [r7, #12]
 800df1c:	4613      	mov	r3, r2
 800df1e:	009b      	lsls	r3, r3, #2
 800df20:	4413      	add	r3, r2
 800df22:	009a      	lsls	r2, r3, #2
 800df24:	441a      	add	r2, r3
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	009b      	lsls	r3, r3, #2
 800df2c:	fbb2 f2f3 	udiv	r2, r2, r3
 800df30:	4b0c      	ldr	r3, [pc, #48]	@ (800df64 <UART_SetConfig+0x118>)
 800df32:	fba3 0302 	umull	r0, r3, r3, r2
 800df36:	095b      	lsrs	r3, r3, #5
 800df38:	2064      	movs	r0, #100	@ 0x64
 800df3a:	fb00 f303 	mul.w	r3, r0, r3
 800df3e:	1ad3      	subs	r3, r2, r3
 800df40:	011b      	lsls	r3, r3, #4
 800df42:	3332      	adds	r3, #50	@ 0x32
 800df44:	4a07      	ldr	r2, [pc, #28]	@ (800df64 <UART_SetConfig+0x118>)
 800df46:	fba2 2303 	umull	r2, r3, r2, r3
 800df4a:	095b      	lsrs	r3, r3, #5
 800df4c:	f003 020f 	and.w	r2, r3, #15
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	440a      	add	r2, r1
 800df56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800df58:	bf00      	nop
 800df5a:	3710      	adds	r7, #16
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	40013800 	.word	0x40013800
 800df64:	51eb851f 	.word	0x51eb851f

0800df68 <__itoa>:
 800df68:	1e93      	subs	r3, r2, #2
 800df6a:	2b22      	cmp	r3, #34	@ 0x22
 800df6c:	b510      	push	{r4, lr}
 800df6e:	460c      	mov	r4, r1
 800df70:	d904      	bls.n	800df7c <__itoa+0x14>
 800df72:	2300      	movs	r3, #0
 800df74:	461c      	mov	r4, r3
 800df76:	700b      	strb	r3, [r1, #0]
 800df78:	4620      	mov	r0, r4
 800df7a:	bd10      	pop	{r4, pc}
 800df7c:	2a0a      	cmp	r2, #10
 800df7e:	d109      	bne.n	800df94 <__itoa+0x2c>
 800df80:	2800      	cmp	r0, #0
 800df82:	da07      	bge.n	800df94 <__itoa+0x2c>
 800df84:	232d      	movs	r3, #45	@ 0x2d
 800df86:	700b      	strb	r3, [r1, #0]
 800df88:	2101      	movs	r1, #1
 800df8a:	4240      	negs	r0, r0
 800df8c:	4421      	add	r1, r4
 800df8e:	f000 f90f 	bl	800e1b0 <__utoa>
 800df92:	e7f1      	b.n	800df78 <__itoa+0x10>
 800df94:	2100      	movs	r1, #0
 800df96:	e7f9      	b.n	800df8c <__itoa+0x24>

0800df98 <itoa>:
 800df98:	f7ff bfe6 	b.w	800df68 <__itoa>

0800df9c <malloc>:
 800df9c:	4b02      	ldr	r3, [pc, #8]	@ (800dfa8 <malloc+0xc>)
 800df9e:	4601      	mov	r1, r0
 800dfa0:	6818      	ldr	r0, [r3, #0]
 800dfa2:	f000 b825 	b.w	800dff0 <_malloc_r>
 800dfa6:	bf00      	nop
 800dfa8:	20000f80 	.word	0x20000f80

0800dfac <sbrk_aligned>:
 800dfac:	b570      	push	{r4, r5, r6, lr}
 800dfae:	4e0f      	ldr	r6, [pc, #60]	@ (800dfec <sbrk_aligned+0x40>)
 800dfb0:	460c      	mov	r4, r1
 800dfb2:	6831      	ldr	r1, [r6, #0]
 800dfb4:	4605      	mov	r5, r0
 800dfb6:	b911      	cbnz	r1, 800dfbe <sbrk_aligned+0x12>
 800dfb8:	f000 f96a 	bl	800e290 <_sbrk_r>
 800dfbc:	6030      	str	r0, [r6, #0]
 800dfbe:	4621      	mov	r1, r4
 800dfc0:	4628      	mov	r0, r5
 800dfc2:	f000 f965 	bl	800e290 <_sbrk_r>
 800dfc6:	1c43      	adds	r3, r0, #1
 800dfc8:	d103      	bne.n	800dfd2 <sbrk_aligned+0x26>
 800dfca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800dfce:	4620      	mov	r0, r4
 800dfd0:	bd70      	pop	{r4, r5, r6, pc}
 800dfd2:	1cc4      	adds	r4, r0, #3
 800dfd4:	f024 0403 	bic.w	r4, r4, #3
 800dfd8:	42a0      	cmp	r0, r4
 800dfda:	d0f8      	beq.n	800dfce <sbrk_aligned+0x22>
 800dfdc:	1a21      	subs	r1, r4, r0
 800dfde:	4628      	mov	r0, r5
 800dfe0:	f000 f956 	bl	800e290 <_sbrk_r>
 800dfe4:	3001      	adds	r0, #1
 800dfe6:	d1f2      	bne.n	800dfce <sbrk_aligned+0x22>
 800dfe8:	e7ef      	b.n	800dfca <sbrk_aligned+0x1e>
 800dfea:	bf00      	nop
 800dfec:	20001f30 	.word	0x20001f30

0800dff0 <_malloc_r>:
 800dff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dff4:	1ccd      	adds	r5, r1, #3
 800dff6:	f025 0503 	bic.w	r5, r5, #3
 800dffa:	3508      	adds	r5, #8
 800dffc:	2d0c      	cmp	r5, #12
 800dffe:	bf38      	it	cc
 800e000:	250c      	movcc	r5, #12
 800e002:	2d00      	cmp	r5, #0
 800e004:	4606      	mov	r6, r0
 800e006:	db01      	blt.n	800e00c <_malloc_r+0x1c>
 800e008:	42a9      	cmp	r1, r5
 800e00a:	d904      	bls.n	800e016 <_malloc_r+0x26>
 800e00c:	230c      	movs	r3, #12
 800e00e:	6033      	str	r3, [r6, #0]
 800e010:	2000      	movs	r0, #0
 800e012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e016:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e0ec <_malloc_r+0xfc>
 800e01a:	f000 f89d 	bl	800e158 <__malloc_lock>
 800e01e:	f8d8 3000 	ldr.w	r3, [r8]
 800e022:	461c      	mov	r4, r3
 800e024:	bb44      	cbnz	r4, 800e078 <_malloc_r+0x88>
 800e026:	4629      	mov	r1, r5
 800e028:	4630      	mov	r0, r6
 800e02a:	f7ff ffbf 	bl	800dfac <sbrk_aligned>
 800e02e:	1c43      	adds	r3, r0, #1
 800e030:	4604      	mov	r4, r0
 800e032:	d158      	bne.n	800e0e6 <_malloc_r+0xf6>
 800e034:	f8d8 4000 	ldr.w	r4, [r8]
 800e038:	4627      	mov	r7, r4
 800e03a:	2f00      	cmp	r7, #0
 800e03c:	d143      	bne.n	800e0c6 <_malloc_r+0xd6>
 800e03e:	2c00      	cmp	r4, #0
 800e040:	d04b      	beq.n	800e0da <_malloc_r+0xea>
 800e042:	6823      	ldr	r3, [r4, #0]
 800e044:	4639      	mov	r1, r7
 800e046:	4630      	mov	r0, r6
 800e048:	eb04 0903 	add.w	r9, r4, r3
 800e04c:	f000 f920 	bl	800e290 <_sbrk_r>
 800e050:	4581      	cmp	r9, r0
 800e052:	d142      	bne.n	800e0da <_malloc_r+0xea>
 800e054:	6821      	ldr	r1, [r4, #0]
 800e056:	4630      	mov	r0, r6
 800e058:	1a6d      	subs	r5, r5, r1
 800e05a:	4629      	mov	r1, r5
 800e05c:	f7ff ffa6 	bl	800dfac <sbrk_aligned>
 800e060:	3001      	adds	r0, #1
 800e062:	d03a      	beq.n	800e0da <_malloc_r+0xea>
 800e064:	6823      	ldr	r3, [r4, #0]
 800e066:	442b      	add	r3, r5
 800e068:	6023      	str	r3, [r4, #0]
 800e06a:	f8d8 3000 	ldr.w	r3, [r8]
 800e06e:	685a      	ldr	r2, [r3, #4]
 800e070:	bb62      	cbnz	r2, 800e0cc <_malloc_r+0xdc>
 800e072:	f8c8 7000 	str.w	r7, [r8]
 800e076:	e00f      	b.n	800e098 <_malloc_r+0xa8>
 800e078:	6822      	ldr	r2, [r4, #0]
 800e07a:	1b52      	subs	r2, r2, r5
 800e07c:	d420      	bmi.n	800e0c0 <_malloc_r+0xd0>
 800e07e:	2a0b      	cmp	r2, #11
 800e080:	d917      	bls.n	800e0b2 <_malloc_r+0xc2>
 800e082:	1961      	adds	r1, r4, r5
 800e084:	42a3      	cmp	r3, r4
 800e086:	6025      	str	r5, [r4, #0]
 800e088:	bf18      	it	ne
 800e08a:	6059      	strne	r1, [r3, #4]
 800e08c:	6863      	ldr	r3, [r4, #4]
 800e08e:	bf08      	it	eq
 800e090:	f8c8 1000 	streq.w	r1, [r8]
 800e094:	5162      	str	r2, [r4, r5]
 800e096:	604b      	str	r3, [r1, #4]
 800e098:	4630      	mov	r0, r6
 800e09a:	f000 f863 	bl	800e164 <__malloc_unlock>
 800e09e:	f104 000b 	add.w	r0, r4, #11
 800e0a2:	1d23      	adds	r3, r4, #4
 800e0a4:	f020 0007 	bic.w	r0, r0, #7
 800e0a8:	1ac2      	subs	r2, r0, r3
 800e0aa:	bf1c      	itt	ne
 800e0ac:	1a1b      	subne	r3, r3, r0
 800e0ae:	50a3      	strne	r3, [r4, r2]
 800e0b0:	e7af      	b.n	800e012 <_malloc_r+0x22>
 800e0b2:	6862      	ldr	r2, [r4, #4]
 800e0b4:	42a3      	cmp	r3, r4
 800e0b6:	bf0c      	ite	eq
 800e0b8:	f8c8 2000 	streq.w	r2, [r8]
 800e0bc:	605a      	strne	r2, [r3, #4]
 800e0be:	e7eb      	b.n	800e098 <_malloc_r+0xa8>
 800e0c0:	4623      	mov	r3, r4
 800e0c2:	6864      	ldr	r4, [r4, #4]
 800e0c4:	e7ae      	b.n	800e024 <_malloc_r+0x34>
 800e0c6:	463c      	mov	r4, r7
 800e0c8:	687f      	ldr	r7, [r7, #4]
 800e0ca:	e7b6      	b.n	800e03a <_malloc_r+0x4a>
 800e0cc:	461a      	mov	r2, r3
 800e0ce:	685b      	ldr	r3, [r3, #4]
 800e0d0:	42a3      	cmp	r3, r4
 800e0d2:	d1fb      	bne.n	800e0cc <_malloc_r+0xdc>
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	6053      	str	r3, [r2, #4]
 800e0d8:	e7de      	b.n	800e098 <_malloc_r+0xa8>
 800e0da:	230c      	movs	r3, #12
 800e0dc:	4630      	mov	r0, r6
 800e0de:	6033      	str	r3, [r6, #0]
 800e0e0:	f000 f840 	bl	800e164 <__malloc_unlock>
 800e0e4:	e794      	b.n	800e010 <_malloc_r+0x20>
 800e0e6:	6005      	str	r5, [r0, #0]
 800e0e8:	e7d6      	b.n	800e098 <_malloc_r+0xa8>
 800e0ea:	bf00      	nop
 800e0ec:	20001f34 	.word	0x20001f34

0800e0f0 <sniprintf>:
 800e0f0:	b40c      	push	{r2, r3}
 800e0f2:	b530      	push	{r4, r5, lr}
 800e0f4:	4b17      	ldr	r3, [pc, #92]	@ (800e154 <sniprintf+0x64>)
 800e0f6:	1e0c      	subs	r4, r1, #0
 800e0f8:	681d      	ldr	r5, [r3, #0]
 800e0fa:	b09d      	sub	sp, #116	@ 0x74
 800e0fc:	da08      	bge.n	800e110 <sniprintf+0x20>
 800e0fe:	238b      	movs	r3, #139	@ 0x8b
 800e100:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e104:	602b      	str	r3, [r5, #0]
 800e106:	b01d      	add	sp, #116	@ 0x74
 800e108:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e10c:	b002      	add	sp, #8
 800e10e:	4770      	bx	lr
 800e110:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800e114:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e118:	bf0c      	ite	eq
 800e11a:	4623      	moveq	r3, r4
 800e11c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800e120:	9304      	str	r3, [sp, #16]
 800e122:	9307      	str	r3, [sp, #28]
 800e124:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e128:	9002      	str	r0, [sp, #8]
 800e12a:	9006      	str	r0, [sp, #24]
 800e12c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e130:	4628      	mov	r0, r5
 800e132:	ab21      	add	r3, sp, #132	@ 0x84
 800e134:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800e136:	a902      	add	r1, sp, #8
 800e138:	9301      	str	r3, [sp, #4]
 800e13a:	f000 f99f 	bl	800e47c <_svfiprintf_r>
 800e13e:	1c43      	adds	r3, r0, #1
 800e140:	bfbc      	itt	lt
 800e142:	238b      	movlt	r3, #139	@ 0x8b
 800e144:	602b      	strlt	r3, [r5, #0]
 800e146:	2c00      	cmp	r4, #0
 800e148:	d0dd      	beq.n	800e106 <sniprintf+0x16>
 800e14a:	2200      	movs	r2, #0
 800e14c:	9b02      	ldr	r3, [sp, #8]
 800e14e:	701a      	strb	r2, [r3, #0]
 800e150:	e7d9      	b.n	800e106 <sniprintf+0x16>
 800e152:	bf00      	nop
 800e154:	20000f80 	.word	0x20000f80

0800e158 <__malloc_lock>:
 800e158:	4801      	ldr	r0, [pc, #4]	@ (800e160 <__malloc_lock+0x8>)
 800e15a:	f000 b8d3 	b.w	800e304 <__retarget_lock_acquire_recursive>
 800e15e:	bf00      	nop
 800e160:	20002070 	.word	0x20002070

0800e164 <__malloc_unlock>:
 800e164:	4801      	ldr	r0, [pc, #4]	@ (800e16c <__malloc_unlock+0x8>)
 800e166:	f000 b8ce 	b.w	800e306 <__retarget_lock_release_recursive>
 800e16a:	bf00      	nop
 800e16c:	20002070 	.word	0x20002070

0800e170 <siprintf>:
 800e170:	b40e      	push	{r1, r2, r3}
 800e172:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e176:	b500      	push	{lr}
 800e178:	b09c      	sub	sp, #112	@ 0x70
 800e17a:	ab1d      	add	r3, sp, #116	@ 0x74
 800e17c:	9002      	str	r0, [sp, #8]
 800e17e:	9006      	str	r0, [sp, #24]
 800e180:	9107      	str	r1, [sp, #28]
 800e182:	9104      	str	r1, [sp, #16]
 800e184:	4808      	ldr	r0, [pc, #32]	@ (800e1a8 <siprintf+0x38>)
 800e186:	4909      	ldr	r1, [pc, #36]	@ (800e1ac <siprintf+0x3c>)
 800e188:	f853 2b04 	ldr.w	r2, [r3], #4
 800e18c:	9105      	str	r1, [sp, #20]
 800e18e:	6800      	ldr	r0, [r0, #0]
 800e190:	a902      	add	r1, sp, #8
 800e192:	9301      	str	r3, [sp, #4]
 800e194:	f000 f972 	bl	800e47c <_svfiprintf_r>
 800e198:	2200      	movs	r2, #0
 800e19a:	9b02      	ldr	r3, [sp, #8]
 800e19c:	701a      	strb	r2, [r3, #0]
 800e19e:	b01c      	add	sp, #112	@ 0x70
 800e1a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1a4:	b003      	add	sp, #12
 800e1a6:	4770      	bx	lr
 800e1a8:	20000f80 	.word	0x20000f80
 800e1ac:	ffff0208 	.word	0xffff0208

0800e1b0 <__utoa>:
 800e1b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1b2:	b08b      	sub	sp, #44	@ 0x2c
 800e1b4:	4605      	mov	r5, r0
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	466e      	mov	r6, sp
 800e1ba:	4c1d      	ldr	r4, [pc, #116]	@ (800e230 <__utoa+0x80>)
 800e1bc:	f104 0c20 	add.w	ip, r4, #32
 800e1c0:	4637      	mov	r7, r6
 800e1c2:	6820      	ldr	r0, [r4, #0]
 800e1c4:	6861      	ldr	r1, [r4, #4]
 800e1c6:	3408      	adds	r4, #8
 800e1c8:	c703      	stmia	r7!, {r0, r1}
 800e1ca:	4564      	cmp	r4, ip
 800e1cc:	463e      	mov	r6, r7
 800e1ce:	d1f7      	bne.n	800e1c0 <__utoa+0x10>
 800e1d0:	7921      	ldrb	r1, [r4, #4]
 800e1d2:	6820      	ldr	r0, [r4, #0]
 800e1d4:	7139      	strb	r1, [r7, #4]
 800e1d6:	1e91      	subs	r1, r2, #2
 800e1d8:	2922      	cmp	r1, #34	@ 0x22
 800e1da:	6038      	str	r0, [r7, #0]
 800e1dc:	f04f 0100 	mov.w	r1, #0
 800e1e0:	d904      	bls.n	800e1ec <__utoa+0x3c>
 800e1e2:	7019      	strb	r1, [r3, #0]
 800e1e4:	460b      	mov	r3, r1
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	b00b      	add	sp, #44	@ 0x2c
 800e1ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1ec:	1e58      	subs	r0, r3, #1
 800e1ee:	4684      	mov	ip, r0
 800e1f0:	fbb5 f7f2 	udiv	r7, r5, r2
 800e1f4:	fb02 5617 	mls	r6, r2, r7, r5
 800e1f8:	3628      	adds	r6, #40	@ 0x28
 800e1fa:	446e      	add	r6, sp
 800e1fc:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800e200:	460c      	mov	r4, r1
 800e202:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800e206:	462e      	mov	r6, r5
 800e208:	42b2      	cmp	r2, r6
 800e20a:	463d      	mov	r5, r7
 800e20c:	f101 0101 	add.w	r1, r1, #1
 800e210:	d9ee      	bls.n	800e1f0 <__utoa+0x40>
 800e212:	2200      	movs	r2, #0
 800e214:	545a      	strb	r2, [r3, r1]
 800e216:	1919      	adds	r1, r3, r4
 800e218:	1aa5      	subs	r5, r4, r2
 800e21a:	42aa      	cmp	r2, r5
 800e21c:	dae3      	bge.n	800e1e6 <__utoa+0x36>
 800e21e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800e222:	780e      	ldrb	r6, [r1, #0]
 800e224:	3201      	adds	r2, #1
 800e226:	7006      	strb	r6, [r0, #0]
 800e228:	f801 5901 	strb.w	r5, [r1], #-1
 800e22c:	e7f4      	b.n	800e218 <__utoa+0x68>
 800e22e:	bf00      	nop
 800e230:	0800f812 	.word	0x0800f812

0800e234 <strcat>:
 800e234:	4602      	mov	r2, r0
 800e236:	b510      	push	{r4, lr}
 800e238:	7814      	ldrb	r4, [r2, #0]
 800e23a:	4613      	mov	r3, r2
 800e23c:	3201      	adds	r2, #1
 800e23e:	2c00      	cmp	r4, #0
 800e240:	d1fa      	bne.n	800e238 <strcat+0x4>
 800e242:	3b01      	subs	r3, #1
 800e244:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e248:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e24c:	2a00      	cmp	r2, #0
 800e24e:	d1f9      	bne.n	800e244 <strcat+0x10>
 800e250:	bd10      	pop	{r4, pc}

0800e252 <strstr>:
 800e252:	780a      	ldrb	r2, [r1, #0]
 800e254:	b570      	push	{r4, r5, r6, lr}
 800e256:	b96a      	cbnz	r2, 800e274 <strstr+0x22>
 800e258:	bd70      	pop	{r4, r5, r6, pc}
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d109      	bne.n	800e272 <strstr+0x20>
 800e25e:	460c      	mov	r4, r1
 800e260:	4605      	mov	r5, r0
 800e262:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800e266:	2b00      	cmp	r3, #0
 800e268:	d0f6      	beq.n	800e258 <strstr+0x6>
 800e26a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800e26e:	429e      	cmp	r6, r3
 800e270:	d0f7      	beq.n	800e262 <strstr+0x10>
 800e272:	3001      	adds	r0, #1
 800e274:	7803      	ldrb	r3, [r0, #0]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d1ef      	bne.n	800e25a <strstr+0x8>
 800e27a:	4618      	mov	r0, r3
 800e27c:	e7ec      	b.n	800e258 <strstr+0x6>

0800e27e <memset>:
 800e27e:	4603      	mov	r3, r0
 800e280:	4402      	add	r2, r0
 800e282:	4293      	cmp	r3, r2
 800e284:	d100      	bne.n	800e288 <memset+0xa>
 800e286:	4770      	bx	lr
 800e288:	f803 1b01 	strb.w	r1, [r3], #1
 800e28c:	e7f9      	b.n	800e282 <memset+0x4>
	...

0800e290 <_sbrk_r>:
 800e290:	b538      	push	{r3, r4, r5, lr}
 800e292:	2300      	movs	r3, #0
 800e294:	4d05      	ldr	r5, [pc, #20]	@ (800e2ac <_sbrk_r+0x1c>)
 800e296:	4604      	mov	r4, r0
 800e298:	4608      	mov	r0, r1
 800e29a:	602b      	str	r3, [r5, #0]
 800e29c:	f7fb fc64 	bl	8009b68 <_sbrk>
 800e2a0:	1c43      	adds	r3, r0, #1
 800e2a2:	d102      	bne.n	800e2aa <_sbrk_r+0x1a>
 800e2a4:	682b      	ldr	r3, [r5, #0]
 800e2a6:	b103      	cbz	r3, 800e2aa <_sbrk_r+0x1a>
 800e2a8:	6023      	str	r3, [r4, #0]
 800e2aa:	bd38      	pop	{r3, r4, r5, pc}
 800e2ac:	20002074 	.word	0x20002074

0800e2b0 <__errno>:
 800e2b0:	4b01      	ldr	r3, [pc, #4]	@ (800e2b8 <__errno+0x8>)
 800e2b2:	6818      	ldr	r0, [r3, #0]
 800e2b4:	4770      	bx	lr
 800e2b6:	bf00      	nop
 800e2b8:	20000f80 	.word	0x20000f80

0800e2bc <__libc_init_array>:
 800e2bc:	b570      	push	{r4, r5, r6, lr}
 800e2be:	2600      	movs	r6, #0
 800e2c0:	4d0c      	ldr	r5, [pc, #48]	@ (800e2f4 <__libc_init_array+0x38>)
 800e2c2:	4c0d      	ldr	r4, [pc, #52]	@ (800e2f8 <__libc_init_array+0x3c>)
 800e2c4:	1b64      	subs	r4, r4, r5
 800e2c6:	10a4      	asrs	r4, r4, #2
 800e2c8:	42a6      	cmp	r6, r4
 800e2ca:	d109      	bne.n	800e2e0 <__libc_init_array+0x24>
 800e2cc:	f000 fbc2 	bl	800ea54 <_init>
 800e2d0:	2600      	movs	r6, #0
 800e2d2:	4d0a      	ldr	r5, [pc, #40]	@ (800e2fc <__libc_init_array+0x40>)
 800e2d4:	4c0a      	ldr	r4, [pc, #40]	@ (800e300 <__libc_init_array+0x44>)
 800e2d6:	1b64      	subs	r4, r4, r5
 800e2d8:	10a4      	asrs	r4, r4, #2
 800e2da:	42a6      	cmp	r6, r4
 800e2dc:	d105      	bne.n	800e2ea <__libc_init_array+0x2e>
 800e2de:	bd70      	pop	{r4, r5, r6, pc}
 800e2e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2e4:	4798      	blx	r3
 800e2e6:	3601      	adds	r6, #1
 800e2e8:	e7ee      	b.n	800e2c8 <__libc_init_array+0xc>
 800e2ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2ee:	4798      	blx	r3
 800e2f0:	3601      	adds	r6, #1
 800e2f2:	e7f2      	b.n	800e2da <__libc_init_array+0x1e>
 800e2f4:	0800f874 	.word	0x0800f874
 800e2f8:	0800f874 	.word	0x0800f874
 800e2fc:	0800f874 	.word	0x0800f874
 800e300:	0800f878 	.word	0x0800f878

0800e304 <__retarget_lock_acquire_recursive>:
 800e304:	4770      	bx	lr

0800e306 <__retarget_lock_release_recursive>:
 800e306:	4770      	bx	lr

0800e308 <memcpy>:
 800e308:	440a      	add	r2, r1
 800e30a:	4291      	cmp	r1, r2
 800e30c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e310:	d100      	bne.n	800e314 <memcpy+0xc>
 800e312:	4770      	bx	lr
 800e314:	b510      	push	{r4, lr}
 800e316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e31a:	4291      	cmp	r1, r2
 800e31c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e320:	d1f9      	bne.n	800e316 <memcpy+0xe>
 800e322:	bd10      	pop	{r4, pc}

0800e324 <strcpy>:
 800e324:	4603      	mov	r3, r0
 800e326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e32a:	f803 2b01 	strb.w	r2, [r3], #1
 800e32e:	2a00      	cmp	r2, #0
 800e330:	d1f9      	bne.n	800e326 <strcpy+0x2>
 800e332:	4770      	bx	lr

0800e334 <_free_r>:
 800e334:	b538      	push	{r3, r4, r5, lr}
 800e336:	4605      	mov	r5, r0
 800e338:	2900      	cmp	r1, #0
 800e33a:	d040      	beq.n	800e3be <_free_r+0x8a>
 800e33c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e340:	1f0c      	subs	r4, r1, #4
 800e342:	2b00      	cmp	r3, #0
 800e344:	bfb8      	it	lt
 800e346:	18e4      	addlt	r4, r4, r3
 800e348:	f7ff ff06 	bl	800e158 <__malloc_lock>
 800e34c:	4a1c      	ldr	r2, [pc, #112]	@ (800e3c0 <_free_r+0x8c>)
 800e34e:	6813      	ldr	r3, [r2, #0]
 800e350:	b933      	cbnz	r3, 800e360 <_free_r+0x2c>
 800e352:	6063      	str	r3, [r4, #4]
 800e354:	6014      	str	r4, [r2, #0]
 800e356:	4628      	mov	r0, r5
 800e358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e35c:	f7ff bf02 	b.w	800e164 <__malloc_unlock>
 800e360:	42a3      	cmp	r3, r4
 800e362:	d908      	bls.n	800e376 <_free_r+0x42>
 800e364:	6820      	ldr	r0, [r4, #0]
 800e366:	1821      	adds	r1, r4, r0
 800e368:	428b      	cmp	r3, r1
 800e36a:	bf01      	itttt	eq
 800e36c:	6819      	ldreq	r1, [r3, #0]
 800e36e:	685b      	ldreq	r3, [r3, #4]
 800e370:	1809      	addeq	r1, r1, r0
 800e372:	6021      	streq	r1, [r4, #0]
 800e374:	e7ed      	b.n	800e352 <_free_r+0x1e>
 800e376:	461a      	mov	r2, r3
 800e378:	685b      	ldr	r3, [r3, #4]
 800e37a:	b10b      	cbz	r3, 800e380 <_free_r+0x4c>
 800e37c:	42a3      	cmp	r3, r4
 800e37e:	d9fa      	bls.n	800e376 <_free_r+0x42>
 800e380:	6811      	ldr	r1, [r2, #0]
 800e382:	1850      	adds	r0, r2, r1
 800e384:	42a0      	cmp	r0, r4
 800e386:	d10b      	bne.n	800e3a0 <_free_r+0x6c>
 800e388:	6820      	ldr	r0, [r4, #0]
 800e38a:	4401      	add	r1, r0
 800e38c:	1850      	adds	r0, r2, r1
 800e38e:	4283      	cmp	r3, r0
 800e390:	6011      	str	r1, [r2, #0]
 800e392:	d1e0      	bne.n	800e356 <_free_r+0x22>
 800e394:	6818      	ldr	r0, [r3, #0]
 800e396:	685b      	ldr	r3, [r3, #4]
 800e398:	4408      	add	r0, r1
 800e39a:	6010      	str	r0, [r2, #0]
 800e39c:	6053      	str	r3, [r2, #4]
 800e39e:	e7da      	b.n	800e356 <_free_r+0x22>
 800e3a0:	d902      	bls.n	800e3a8 <_free_r+0x74>
 800e3a2:	230c      	movs	r3, #12
 800e3a4:	602b      	str	r3, [r5, #0]
 800e3a6:	e7d6      	b.n	800e356 <_free_r+0x22>
 800e3a8:	6820      	ldr	r0, [r4, #0]
 800e3aa:	1821      	adds	r1, r4, r0
 800e3ac:	428b      	cmp	r3, r1
 800e3ae:	bf01      	itttt	eq
 800e3b0:	6819      	ldreq	r1, [r3, #0]
 800e3b2:	685b      	ldreq	r3, [r3, #4]
 800e3b4:	1809      	addeq	r1, r1, r0
 800e3b6:	6021      	streq	r1, [r4, #0]
 800e3b8:	6063      	str	r3, [r4, #4]
 800e3ba:	6054      	str	r4, [r2, #4]
 800e3bc:	e7cb      	b.n	800e356 <_free_r+0x22>
 800e3be:	bd38      	pop	{r3, r4, r5, pc}
 800e3c0:	20001f34 	.word	0x20001f34

0800e3c4 <__ssputs_r>:
 800e3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3c8:	461f      	mov	r7, r3
 800e3ca:	688e      	ldr	r6, [r1, #8]
 800e3cc:	4682      	mov	sl, r0
 800e3ce:	42be      	cmp	r6, r7
 800e3d0:	460c      	mov	r4, r1
 800e3d2:	4690      	mov	r8, r2
 800e3d4:	680b      	ldr	r3, [r1, #0]
 800e3d6:	d82d      	bhi.n	800e434 <__ssputs_r+0x70>
 800e3d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e3dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e3e0:	d026      	beq.n	800e430 <__ssputs_r+0x6c>
 800e3e2:	6965      	ldr	r5, [r4, #20]
 800e3e4:	6909      	ldr	r1, [r1, #16]
 800e3e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e3ea:	eba3 0901 	sub.w	r9, r3, r1
 800e3ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e3f2:	1c7b      	adds	r3, r7, #1
 800e3f4:	444b      	add	r3, r9
 800e3f6:	106d      	asrs	r5, r5, #1
 800e3f8:	429d      	cmp	r5, r3
 800e3fa:	bf38      	it	cc
 800e3fc:	461d      	movcc	r5, r3
 800e3fe:	0553      	lsls	r3, r2, #21
 800e400:	d527      	bpl.n	800e452 <__ssputs_r+0x8e>
 800e402:	4629      	mov	r1, r5
 800e404:	f7ff fdf4 	bl	800dff0 <_malloc_r>
 800e408:	4606      	mov	r6, r0
 800e40a:	b360      	cbz	r0, 800e466 <__ssputs_r+0xa2>
 800e40c:	464a      	mov	r2, r9
 800e40e:	6921      	ldr	r1, [r4, #16]
 800e410:	f7ff ff7a 	bl	800e308 <memcpy>
 800e414:	89a3      	ldrh	r3, [r4, #12]
 800e416:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e41a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e41e:	81a3      	strh	r3, [r4, #12]
 800e420:	6126      	str	r6, [r4, #16]
 800e422:	444e      	add	r6, r9
 800e424:	6026      	str	r6, [r4, #0]
 800e426:	463e      	mov	r6, r7
 800e428:	6165      	str	r5, [r4, #20]
 800e42a:	eba5 0509 	sub.w	r5, r5, r9
 800e42e:	60a5      	str	r5, [r4, #8]
 800e430:	42be      	cmp	r6, r7
 800e432:	d900      	bls.n	800e436 <__ssputs_r+0x72>
 800e434:	463e      	mov	r6, r7
 800e436:	4632      	mov	r2, r6
 800e438:	4641      	mov	r1, r8
 800e43a:	6820      	ldr	r0, [r4, #0]
 800e43c:	f000 fada 	bl	800e9f4 <memmove>
 800e440:	2000      	movs	r0, #0
 800e442:	68a3      	ldr	r3, [r4, #8]
 800e444:	1b9b      	subs	r3, r3, r6
 800e446:	60a3      	str	r3, [r4, #8]
 800e448:	6823      	ldr	r3, [r4, #0]
 800e44a:	4433      	add	r3, r6
 800e44c:	6023      	str	r3, [r4, #0]
 800e44e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e452:	462a      	mov	r2, r5
 800e454:	f000 faa0 	bl	800e998 <_realloc_r>
 800e458:	4606      	mov	r6, r0
 800e45a:	2800      	cmp	r0, #0
 800e45c:	d1e0      	bne.n	800e420 <__ssputs_r+0x5c>
 800e45e:	4650      	mov	r0, sl
 800e460:	6921      	ldr	r1, [r4, #16]
 800e462:	f7ff ff67 	bl	800e334 <_free_r>
 800e466:	230c      	movs	r3, #12
 800e468:	f8ca 3000 	str.w	r3, [sl]
 800e46c:	89a3      	ldrh	r3, [r4, #12]
 800e46e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e476:	81a3      	strh	r3, [r4, #12]
 800e478:	e7e9      	b.n	800e44e <__ssputs_r+0x8a>
	...

0800e47c <_svfiprintf_r>:
 800e47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e480:	4698      	mov	r8, r3
 800e482:	898b      	ldrh	r3, [r1, #12]
 800e484:	4607      	mov	r7, r0
 800e486:	061b      	lsls	r3, r3, #24
 800e488:	460d      	mov	r5, r1
 800e48a:	4614      	mov	r4, r2
 800e48c:	b09d      	sub	sp, #116	@ 0x74
 800e48e:	d510      	bpl.n	800e4b2 <_svfiprintf_r+0x36>
 800e490:	690b      	ldr	r3, [r1, #16]
 800e492:	b973      	cbnz	r3, 800e4b2 <_svfiprintf_r+0x36>
 800e494:	2140      	movs	r1, #64	@ 0x40
 800e496:	f7ff fdab 	bl	800dff0 <_malloc_r>
 800e49a:	6028      	str	r0, [r5, #0]
 800e49c:	6128      	str	r0, [r5, #16]
 800e49e:	b930      	cbnz	r0, 800e4ae <_svfiprintf_r+0x32>
 800e4a0:	230c      	movs	r3, #12
 800e4a2:	603b      	str	r3, [r7, #0]
 800e4a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e4a8:	b01d      	add	sp, #116	@ 0x74
 800e4aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4ae:	2340      	movs	r3, #64	@ 0x40
 800e4b0:	616b      	str	r3, [r5, #20]
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4b6:	2320      	movs	r3, #32
 800e4b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e4bc:	2330      	movs	r3, #48	@ 0x30
 800e4be:	f04f 0901 	mov.w	r9, #1
 800e4c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4c6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800e660 <_svfiprintf_r+0x1e4>
 800e4ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e4ce:	4623      	mov	r3, r4
 800e4d0:	469a      	mov	sl, r3
 800e4d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4d6:	b10a      	cbz	r2, 800e4dc <_svfiprintf_r+0x60>
 800e4d8:	2a25      	cmp	r2, #37	@ 0x25
 800e4da:	d1f9      	bne.n	800e4d0 <_svfiprintf_r+0x54>
 800e4dc:	ebba 0b04 	subs.w	fp, sl, r4
 800e4e0:	d00b      	beq.n	800e4fa <_svfiprintf_r+0x7e>
 800e4e2:	465b      	mov	r3, fp
 800e4e4:	4622      	mov	r2, r4
 800e4e6:	4629      	mov	r1, r5
 800e4e8:	4638      	mov	r0, r7
 800e4ea:	f7ff ff6b 	bl	800e3c4 <__ssputs_r>
 800e4ee:	3001      	adds	r0, #1
 800e4f0:	f000 80a7 	beq.w	800e642 <_svfiprintf_r+0x1c6>
 800e4f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e4f6:	445a      	add	r2, fp
 800e4f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800e4fa:	f89a 3000 	ldrb.w	r3, [sl]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	f000 809f 	beq.w	800e642 <_svfiprintf_r+0x1c6>
 800e504:	2300      	movs	r3, #0
 800e506:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e50a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e50e:	f10a 0a01 	add.w	sl, sl, #1
 800e512:	9304      	str	r3, [sp, #16]
 800e514:	9307      	str	r3, [sp, #28]
 800e516:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e51a:	931a      	str	r3, [sp, #104]	@ 0x68
 800e51c:	4654      	mov	r4, sl
 800e51e:	2205      	movs	r2, #5
 800e520:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e524:	484e      	ldr	r0, [pc, #312]	@ (800e660 <_svfiprintf_r+0x1e4>)
 800e526:	f000 fa7f 	bl	800ea28 <memchr>
 800e52a:	9a04      	ldr	r2, [sp, #16]
 800e52c:	b9d8      	cbnz	r0, 800e566 <_svfiprintf_r+0xea>
 800e52e:	06d0      	lsls	r0, r2, #27
 800e530:	bf44      	itt	mi
 800e532:	2320      	movmi	r3, #32
 800e534:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e538:	0711      	lsls	r1, r2, #28
 800e53a:	bf44      	itt	mi
 800e53c:	232b      	movmi	r3, #43	@ 0x2b
 800e53e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e542:	f89a 3000 	ldrb.w	r3, [sl]
 800e546:	2b2a      	cmp	r3, #42	@ 0x2a
 800e548:	d015      	beq.n	800e576 <_svfiprintf_r+0xfa>
 800e54a:	4654      	mov	r4, sl
 800e54c:	2000      	movs	r0, #0
 800e54e:	f04f 0c0a 	mov.w	ip, #10
 800e552:	9a07      	ldr	r2, [sp, #28]
 800e554:	4621      	mov	r1, r4
 800e556:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e55a:	3b30      	subs	r3, #48	@ 0x30
 800e55c:	2b09      	cmp	r3, #9
 800e55e:	d94b      	bls.n	800e5f8 <_svfiprintf_r+0x17c>
 800e560:	b1b0      	cbz	r0, 800e590 <_svfiprintf_r+0x114>
 800e562:	9207      	str	r2, [sp, #28]
 800e564:	e014      	b.n	800e590 <_svfiprintf_r+0x114>
 800e566:	eba0 0308 	sub.w	r3, r0, r8
 800e56a:	fa09 f303 	lsl.w	r3, r9, r3
 800e56e:	4313      	orrs	r3, r2
 800e570:	46a2      	mov	sl, r4
 800e572:	9304      	str	r3, [sp, #16]
 800e574:	e7d2      	b.n	800e51c <_svfiprintf_r+0xa0>
 800e576:	9b03      	ldr	r3, [sp, #12]
 800e578:	1d19      	adds	r1, r3, #4
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	9103      	str	r1, [sp, #12]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	bfbb      	ittet	lt
 800e582:	425b      	neglt	r3, r3
 800e584:	f042 0202 	orrlt.w	r2, r2, #2
 800e588:	9307      	strge	r3, [sp, #28]
 800e58a:	9307      	strlt	r3, [sp, #28]
 800e58c:	bfb8      	it	lt
 800e58e:	9204      	strlt	r2, [sp, #16]
 800e590:	7823      	ldrb	r3, [r4, #0]
 800e592:	2b2e      	cmp	r3, #46	@ 0x2e
 800e594:	d10a      	bne.n	800e5ac <_svfiprintf_r+0x130>
 800e596:	7863      	ldrb	r3, [r4, #1]
 800e598:	2b2a      	cmp	r3, #42	@ 0x2a
 800e59a:	d132      	bne.n	800e602 <_svfiprintf_r+0x186>
 800e59c:	9b03      	ldr	r3, [sp, #12]
 800e59e:	3402      	adds	r4, #2
 800e5a0:	1d1a      	adds	r2, r3, #4
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	9203      	str	r2, [sp, #12]
 800e5a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e5aa:	9305      	str	r3, [sp, #20]
 800e5ac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800e664 <_svfiprintf_r+0x1e8>
 800e5b0:	2203      	movs	r2, #3
 800e5b2:	4650      	mov	r0, sl
 800e5b4:	7821      	ldrb	r1, [r4, #0]
 800e5b6:	f000 fa37 	bl	800ea28 <memchr>
 800e5ba:	b138      	cbz	r0, 800e5cc <_svfiprintf_r+0x150>
 800e5bc:	2240      	movs	r2, #64	@ 0x40
 800e5be:	9b04      	ldr	r3, [sp, #16]
 800e5c0:	eba0 000a 	sub.w	r0, r0, sl
 800e5c4:	4082      	lsls	r2, r0
 800e5c6:	4313      	orrs	r3, r2
 800e5c8:	3401      	adds	r4, #1
 800e5ca:	9304      	str	r3, [sp, #16]
 800e5cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5d0:	2206      	movs	r2, #6
 800e5d2:	4825      	ldr	r0, [pc, #148]	@ (800e668 <_svfiprintf_r+0x1ec>)
 800e5d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e5d8:	f000 fa26 	bl	800ea28 <memchr>
 800e5dc:	2800      	cmp	r0, #0
 800e5de:	d036      	beq.n	800e64e <_svfiprintf_r+0x1d2>
 800e5e0:	4b22      	ldr	r3, [pc, #136]	@ (800e66c <_svfiprintf_r+0x1f0>)
 800e5e2:	bb1b      	cbnz	r3, 800e62c <_svfiprintf_r+0x1b0>
 800e5e4:	9b03      	ldr	r3, [sp, #12]
 800e5e6:	3307      	adds	r3, #7
 800e5e8:	f023 0307 	bic.w	r3, r3, #7
 800e5ec:	3308      	adds	r3, #8
 800e5ee:	9303      	str	r3, [sp, #12]
 800e5f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5f2:	4433      	add	r3, r6
 800e5f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e5f6:	e76a      	b.n	800e4ce <_svfiprintf_r+0x52>
 800e5f8:	460c      	mov	r4, r1
 800e5fa:	2001      	movs	r0, #1
 800e5fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800e600:	e7a8      	b.n	800e554 <_svfiprintf_r+0xd8>
 800e602:	2300      	movs	r3, #0
 800e604:	f04f 0c0a 	mov.w	ip, #10
 800e608:	4619      	mov	r1, r3
 800e60a:	3401      	adds	r4, #1
 800e60c:	9305      	str	r3, [sp, #20]
 800e60e:	4620      	mov	r0, r4
 800e610:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e614:	3a30      	subs	r2, #48	@ 0x30
 800e616:	2a09      	cmp	r2, #9
 800e618:	d903      	bls.n	800e622 <_svfiprintf_r+0x1a6>
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d0c6      	beq.n	800e5ac <_svfiprintf_r+0x130>
 800e61e:	9105      	str	r1, [sp, #20]
 800e620:	e7c4      	b.n	800e5ac <_svfiprintf_r+0x130>
 800e622:	4604      	mov	r4, r0
 800e624:	2301      	movs	r3, #1
 800e626:	fb0c 2101 	mla	r1, ip, r1, r2
 800e62a:	e7f0      	b.n	800e60e <_svfiprintf_r+0x192>
 800e62c:	ab03      	add	r3, sp, #12
 800e62e:	9300      	str	r3, [sp, #0]
 800e630:	462a      	mov	r2, r5
 800e632:	4638      	mov	r0, r7
 800e634:	4b0e      	ldr	r3, [pc, #56]	@ (800e670 <_svfiprintf_r+0x1f4>)
 800e636:	a904      	add	r1, sp, #16
 800e638:	f3af 8000 	nop.w
 800e63c:	1c42      	adds	r2, r0, #1
 800e63e:	4606      	mov	r6, r0
 800e640:	d1d6      	bne.n	800e5f0 <_svfiprintf_r+0x174>
 800e642:	89ab      	ldrh	r3, [r5, #12]
 800e644:	065b      	lsls	r3, r3, #25
 800e646:	f53f af2d 	bmi.w	800e4a4 <_svfiprintf_r+0x28>
 800e64a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e64c:	e72c      	b.n	800e4a8 <_svfiprintf_r+0x2c>
 800e64e:	ab03      	add	r3, sp, #12
 800e650:	9300      	str	r3, [sp, #0]
 800e652:	462a      	mov	r2, r5
 800e654:	4638      	mov	r0, r7
 800e656:	4b06      	ldr	r3, [pc, #24]	@ (800e670 <_svfiprintf_r+0x1f4>)
 800e658:	a904      	add	r1, sp, #16
 800e65a:	f000 f87d 	bl	800e758 <_printf_i>
 800e65e:	e7ed      	b.n	800e63c <_svfiprintf_r+0x1c0>
 800e660:	0800f837 	.word	0x0800f837
 800e664:	0800f83d 	.word	0x0800f83d
 800e668:	0800f841 	.word	0x0800f841
 800e66c:	00000000 	.word	0x00000000
 800e670:	0800e3c5 	.word	0x0800e3c5

0800e674 <_printf_common>:
 800e674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e678:	4616      	mov	r6, r2
 800e67a:	4698      	mov	r8, r3
 800e67c:	688a      	ldr	r2, [r1, #8]
 800e67e:	690b      	ldr	r3, [r1, #16]
 800e680:	4607      	mov	r7, r0
 800e682:	4293      	cmp	r3, r2
 800e684:	bfb8      	it	lt
 800e686:	4613      	movlt	r3, r2
 800e688:	6033      	str	r3, [r6, #0]
 800e68a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e68e:	460c      	mov	r4, r1
 800e690:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e694:	b10a      	cbz	r2, 800e69a <_printf_common+0x26>
 800e696:	3301      	adds	r3, #1
 800e698:	6033      	str	r3, [r6, #0]
 800e69a:	6823      	ldr	r3, [r4, #0]
 800e69c:	0699      	lsls	r1, r3, #26
 800e69e:	bf42      	ittt	mi
 800e6a0:	6833      	ldrmi	r3, [r6, #0]
 800e6a2:	3302      	addmi	r3, #2
 800e6a4:	6033      	strmi	r3, [r6, #0]
 800e6a6:	6825      	ldr	r5, [r4, #0]
 800e6a8:	f015 0506 	ands.w	r5, r5, #6
 800e6ac:	d106      	bne.n	800e6bc <_printf_common+0x48>
 800e6ae:	f104 0a19 	add.w	sl, r4, #25
 800e6b2:	68e3      	ldr	r3, [r4, #12]
 800e6b4:	6832      	ldr	r2, [r6, #0]
 800e6b6:	1a9b      	subs	r3, r3, r2
 800e6b8:	42ab      	cmp	r3, r5
 800e6ba:	dc2b      	bgt.n	800e714 <_printf_common+0xa0>
 800e6bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e6c0:	6822      	ldr	r2, [r4, #0]
 800e6c2:	3b00      	subs	r3, #0
 800e6c4:	bf18      	it	ne
 800e6c6:	2301      	movne	r3, #1
 800e6c8:	0692      	lsls	r2, r2, #26
 800e6ca:	d430      	bmi.n	800e72e <_printf_common+0xba>
 800e6cc:	4641      	mov	r1, r8
 800e6ce:	4638      	mov	r0, r7
 800e6d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e6d4:	47c8      	blx	r9
 800e6d6:	3001      	adds	r0, #1
 800e6d8:	d023      	beq.n	800e722 <_printf_common+0xae>
 800e6da:	6823      	ldr	r3, [r4, #0]
 800e6dc:	6922      	ldr	r2, [r4, #16]
 800e6de:	f003 0306 	and.w	r3, r3, #6
 800e6e2:	2b04      	cmp	r3, #4
 800e6e4:	bf14      	ite	ne
 800e6e6:	2500      	movne	r5, #0
 800e6e8:	6833      	ldreq	r3, [r6, #0]
 800e6ea:	f04f 0600 	mov.w	r6, #0
 800e6ee:	bf08      	it	eq
 800e6f0:	68e5      	ldreq	r5, [r4, #12]
 800e6f2:	f104 041a 	add.w	r4, r4, #26
 800e6f6:	bf08      	it	eq
 800e6f8:	1aed      	subeq	r5, r5, r3
 800e6fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e6fe:	bf08      	it	eq
 800e700:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e704:	4293      	cmp	r3, r2
 800e706:	bfc4      	itt	gt
 800e708:	1a9b      	subgt	r3, r3, r2
 800e70a:	18ed      	addgt	r5, r5, r3
 800e70c:	42b5      	cmp	r5, r6
 800e70e:	d11a      	bne.n	800e746 <_printf_common+0xd2>
 800e710:	2000      	movs	r0, #0
 800e712:	e008      	b.n	800e726 <_printf_common+0xb2>
 800e714:	2301      	movs	r3, #1
 800e716:	4652      	mov	r2, sl
 800e718:	4641      	mov	r1, r8
 800e71a:	4638      	mov	r0, r7
 800e71c:	47c8      	blx	r9
 800e71e:	3001      	adds	r0, #1
 800e720:	d103      	bne.n	800e72a <_printf_common+0xb6>
 800e722:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e72a:	3501      	adds	r5, #1
 800e72c:	e7c1      	b.n	800e6b2 <_printf_common+0x3e>
 800e72e:	2030      	movs	r0, #48	@ 0x30
 800e730:	18e1      	adds	r1, r4, r3
 800e732:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e736:	1c5a      	adds	r2, r3, #1
 800e738:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e73c:	4422      	add	r2, r4
 800e73e:	3302      	adds	r3, #2
 800e740:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e744:	e7c2      	b.n	800e6cc <_printf_common+0x58>
 800e746:	2301      	movs	r3, #1
 800e748:	4622      	mov	r2, r4
 800e74a:	4641      	mov	r1, r8
 800e74c:	4638      	mov	r0, r7
 800e74e:	47c8      	blx	r9
 800e750:	3001      	adds	r0, #1
 800e752:	d0e6      	beq.n	800e722 <_printf_common+0xae>
 800e754:	3601      	adds	r6, #1
 800e756:	e7d9      	b.n	800e70c <_printf_common+0x98>

0800e758 <_printf_i>:
 800e758:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e75c:	7e0f      	ldrb	r7, [r1, #24]
 800e75e:	4691      	mov	r9, r2
 800e760:	2f78      	cmp	r7, #120	@ 0x78
 800e762:	4680      	mov	r8, r0
 800e764:	460c      	mov	r4, r1
 800e766:	469a      	mov	sl, r3
 800e768:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e76a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e76e:	d807      	bhi.n	800e780 <_printf_i+0x28>
 800e770:	2f62      	cmp	r7, #98	@ 0x62
 800e772:	d80a      	bhi.n	800e78a <_printf_i+0x32>
 800e774:	2f00      	cmp	r7, #0
 800e776:	f000 80d3 	beq.w	800e920 <_printf_i+0x1c8>
 800e77a:	2f58      	cmp	r7, #88	@ 0x58
 800e77c:	f000 80ba 	beq.w	800e8f4 <_printf_i+0x19c>
 800e780:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e784:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e788:	e03a      	b.n	800e800 <_printf_i+0xa8>
 800e78a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e78e:	2b15      	cmp	r3, #21
 800e790:	d8f6      	bhi.n	800e780 <_printf_i+0x28>
 800e792:	a101      	add	r1, pc, #4	@ (adr r1, 800e798 <_printf_i+0x40>)
 800e794:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e798:	0800e7f1 	.word	0x0800e7f1
 800e79c:	0800e805 	.word	0x0800e805
 800e7a0:	0800e781 	.word	0x0800e781
 800e7a4:	0800e781 	.word	0x0800e781
 800e7a8:	0800e781 	.word	0x0800e781
 800e7ac:	0800e781 	.word	0x0800e781
 800e7b0:	0800e805 	.word	0x0800e805
 800e7b4:	0800e781 	.word	0x0800e781
 800e7b8:	0800e781 	.word	0x0800e781
 800e7bc:	0800e781 	.word	0x0800e781
 800e7c0:	0800e781 	.word	0x0800e781
 800e7c4:	0800e907 	.word	0x0800e907
 800e7c8:	0800e82f 	.word	0x0800e82f
 800e7cc:	0800e8c1 	.word	0x0800e8c1
 800e7d0:	0800e781 	.word	0x0800e781
 800e7d4:	0800e781 	.word	0x0800e781
 800e7d8:	0800e929 	.word	0x0800e929
 800e7dc:	0800e781 	.word	0x0800e781
 800e7e0:	0800e82f 	.word	0x0800e82f
 800e7e4:	0800e781 	.word	0x0800e781
 800e7e8:	0800e781 	.word	0x0800e781
 800e7ec:	0800e8c9 	.word	0x0800e8c9
 800e7f0:	6833      	ldr	r3, [r6, #0]
 800e7f2:	1d1a      	adds	r2, r3, #4
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	6032      	str	r2, [r6, #0]
 800e7f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e7fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e800:	2301      	movs	r3, #1
 800e802:	e09e      	b.n	800e942 <_printf_i+0x1ea>
 800e804:	6833      	ldr	r3, [r6, #0]
 800e806:	6820      	ldr	r0, [r4, #0]
 800e808:	1d19      	adds	r1, r3, #4
 800e80a:	6031      	str	r1, [r6, #0]
 800e80c:	0606      	lsls	r6, r0, #24
 800e80e:	d501      	bpl.n	800e814 <_printf_i+0xbc>
 800e810:	681d      	ldr	r5, [r3, #0]
 800e812:	e003      	b.n	800e81c <_printf_i+0xc4>
 800e814:	0645      	lsls	r5, r0, #25
 800e816:	d5fb      	bpl.n	800e810 <_printf_i+0xb8>
 800e818:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e81c:	2d00      	cmp	r5, #0
 800e81e:	da03      	bge.n	800e828 <_printf_i+0xd0>
 800e820:	232d      	movs	r3, #45	@ 0x2d
 800e822:	426d      	negs	r5, r5
 800e824:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e828:	230a      	movs	r3, #10
 800e82a:	4859      	ldr	r0, [pc, #356]	@ (800e990 <_printf_i+0x238>)
 800e82c:	e011      	b.n	800e852 <_printf_i+0xfa>
 800e82e:	6821      	ldr	r1, [r4, #0]
 800e830:	6833      	ldr	r3, [r6, #0]
 800e832:	0608      	lsls	r0, r1, #24
 800e834:	f853 5b04 	ldr.w	r5, [r3], #4
 800e838:	d402      	bmi.n	800e840 <_printf_i+0xe8>
 800e83a:	0649      	lsls	r1, r1, #25
 800e83c:	bf48      	it	mi
 800e83e:	b2ad      	uxthmi	r5, r5
 800e840:	2f6f      	cmp	r7, #111	@ 0x6f
 800e842:	6033      	str	r3, [r6, #0]
 800e844:	bf14      	ite	ne
 800e846:	230a      	movne	r3, #10
 800e848:	2308      	moveq	r3, #8
 800e84a:	4851      	ldr	r0, [pc, #324]	@ (800e990 <_printf_i+0x238>)
 800e84c:	2100      	movs	r1, #0
 800e84e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e852:	6866      	ldr	r6, [r4, #4]
 800e854:	2e00      	cmp	r6, #0
 800e856:	bfa8      	it	ge
 800e858:	6821      	ldrge	r1, [r4, #0]
 800e85a:	60a6      	str	r6, [r4, #8]
 800e85c:	bfa4      	itt	ge
 800e85e:	f021 0104 	bicge.w	r1, r1, #4
 800e862:	6021      	strge	r1, [r4, #0]
 800e864:	b90d      	cbnz	r5, 800e86a <_printf_i+0x112>
 800e866:	2e00      	cmp	r6, #0
 800e868:	d04b      	beq.n	800e902 <_printf_i+0x1aa>
 800e86a:	4616      	mov	r6, r2
 800e86c:	fbb5 f1f3 	udiv	r1, r5, r3
 800e870:	fb03 5711 	mls	r7, r3, r1, r5
 800e874:	5dc7      	ldrb	r7, [r0, r7]
 800e876:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e87a:	462f      	mov	r7, r5
 800e87c:	42bb      	cmp	r3, r7
 800e87e:	460d      	mov	r5, r1
 800e880:	d9f4      	bls.n	800e86c <_printf_i+0x114>
 800e882:	2b08      	cmp	r3, #8
 800e884:	d10b      	bne.n	800e89e <_printf_i+0x146>
 800e886:	6823      	ldr	r3, [r4, #0]
 800e888:	07df      	lsls	r7, r3, #31
 800e88a:	d508      	bpl.n	800e89e <_printf_i+0x146>
 800e88c:	6923      	ldr	r3, [r4, #16]
 800e88e:	6861      	ldr	r1, [r4, #4]
 800e890:	4299      	cmp	r1, r3
 800e892:	bfde      	ittt	le
 800e894:	2330      	movle	r3, #48	@ 0x30
 800e896:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e89a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e89e:	1b92      	subs	r2, r2, r6
 800e8a0:	6122      	str	r2, [r4, #16]
 800e8a2:	464b      	mov	r3, r9
 800e8a4:	4621      	mov	r1, r4
 800e8a6:	4640      	mov	r0, r8
 800e8a8:	f8cd a000 	str.w	sl, [sp]
 800e8ac:	aa03      	add	r2, sp, #12
 800e8ae:	f7ff fee1 	bl	800e674 <_printf_common>
 800e8b2:	3001      	adds	r0, #1
 800e8b4:	d14a      	bne.n	800e94c <_printf_i+0x1f4>
 800e8b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e8ba:	b004      	add	sp, #16
 800e8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8c0:	6823      	ldr	r3, [r4, #0]
 800e8c2:	f043 0320 	orr.w	r3, r3, #32
 800e8c6:	6023      	str	r3, [r4, #0]
 800e8c8:	2778      	movs	r7, #120	@ 0x78
 800e8ca:	4832      	ldr	r0, [pc, #200]	@ (800e994 <_printf_i+0x23c>)
 800e8cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e8d0:	6823      	ldr	r3, [r4, #0]
 800e8d2:	6831      	ldr	r1, [r6, #0]
 800e8d4:	061f      	lsls	r7, r3, #24
 800e8d6:	f851 5b04 	ldr.w	r5, [r1], #4
 800e8da:	d402      	bmi.n	800e8e2 <_printf_i+0x18a>
 800e8dc:	065f      	lsls	r7, r3, #25
 800e8de:	bf48      	it	mi
 800e8e0:	b2ad      	uxthmi	r5, r5
 800e8e2:	6031      	str	r1, [r6, #0]
 800e8e4:	07d9      	lsls	r1, r3, #31
 800e8e6:	bf44      	itt	mi
 800e8e8:	f043 0320 	orrmi.w	r3, r3, #32
 800e8ec:	6023      	strmi	r3, [r4, #0]
 800e8ee:	b11d      	cbz	r5, 800e8f8 <_printf_i+0x1a0>
 800e8f0:	2310      	movs	r3, #16
 800e8f2:	e7ab      	b.n	800e84c <_printf_i+0xf4>
 800e8f4:	4826      	ldr	r0, [pc, #152]	@ (800e990 <_printf_i+0x238>)
 800e8f6:	e7e9      	b.n	800e8cc <_printf_i+0x174>
 800e8f8:	6823      	ldr	r3, [r4, #0]
 800e8fa:	f023 0320 	bic.w	r3, r3, #32
 800e8fe:	6023      	str	r3, [r4, #0]
 800e900:	e7f6      	b.n	800e8f0 <_printf_i+0x198>
 800e902:	4616      	mov	r6, r2
 800e904:	e7bd      	b.n	800e882 <_printf_i+0x12a>
 800e906:	6833      	ldr	r3, [r6, #0]
 800e908:	6825      	ldr	r5, [r4, #0]
 800e90a:	1d18      	adds	r0, r3, #4
 800e90c:	6961      	ldr	r1, [r4, #20]
 800e90e:	6030      	str	r0, [r6, #0]
 800e910:	062e      	lsls	r6, r5, #24
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	d501      	bpl.n	800e91a <_printf_i+0x1c2>
 800e916:	6019      	str	r1, [r3, #0]
 800e918:	e002      	b.n	800e920 <_printf_i+0x1c8>
 800e91a:	0668      	lsls	r0, r5, #25
 800e91c:	d5fb      	bpl.n	800e916 <_printf_i+0x1be>
 800e91e:	8019      	strh	r1, [r3, #0]
 800e920:	2300      	movs	r3, #0
 800e922:	4616      	mov	r6, r2
 800e924:	6123      	str	r3, [r4, #16]
 800e926:	e7bc      	b.n	800e8a2 <_printf_i+0x14a>
 800e928:	6833      	ldr	r3, [r6, #0]
 800e92a:	2100      	movs	r1, #0
 800e92c:	1d1a      	adds	r2, r3, #4
 800e92e:	6032      	str	r2, [r6, #0]
 800e930:	681e      	ldr	r6, [r3, #0]
 800e932:	6862      	ldr	r2, [r4, #4]
 800e934:	4630      	mov	r0, r6
 800e936:	f000 f877 	bl	800ea28 <memchr>
 800e93a:	b108      	cbz	r0, 800e940 <_printf_i+0x1e8>
 800e93c:	1b80      	subs	r0, r0, r6
 800e93e:	6060      	str	r0, [r4, #4]
 800e940:	6863      	ldr	r3, [r4, #4]
 800e942:	6123      	str	r3, [r4, #16]
 800e944:	2300      	movs	r3, #0
 800e946:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e94a:	e7aa      	b.n	800e8a2 <_printf_i+0x14a>
 800e94c:	4632      	mov	r2, r6
 800e94e:	4649      	mov	r1, r9
 800e950:	4640      	mov	r0, r8
 800e952:	6923      	ldr	r3, [r4, #16]
 800e954:	47d0      	blx	sl
 800e956:	3001      	adds	r0, #1
 800e958:	d0ad      	beq.n	800e8b6 <_printf_i+0x15e>
 800e95a:	6823      	ldr	r3, [r4, #0]
 800e95c:	079b      	lsls	r3, r3, #30
 800e95e:	d413      	bmi.n	800e988 <_printf_i+0x230>
 800e960:	68e0      	ldr	r0, [r4, #12]
 800e962:	9b03      	ldr	r3, [sp, #12]
 800e964:	4298      	cmp	r0, r3
 800e966:	bfb8      	it	lt
 800e968:	4618      	movlt	r0, r3
 800e96a:	e7a6      	b.n	800e8ba <_printf_i+0x162>
 800e96c:	2301      	movs	r3, #1
 800e96e:	4632      	mov	r2, r6
 800e970:	4649      	mov	r1, r9
 800e972:	4640      	mov	r0, r8
 800e974:	47d0      	blx	sl
 800e976:	3001      	adds	r0, #1
 800e978:	d09d      	beq.n	800e8b6 <_printf_i+0x15e>
 800e97a:	3501      	adds	r5, #1
 800e97c:	68e3      	ldr	r3, [r4, #12]
 800e97e:	9903      	ldr	r1, [sp, #12]
 800e980:	1a5b      	subs	r3, r3, r1
 800e982:	42ab      	cmp	r3, r5
 800e984:	dcf2      	bgt.n	800e96c <_printf_i+0x214>
 800e986:	e7eb      	b.n	800e960 <_printf_i+0x208>
 800e988:	2500      	movs	r5, #0
 800e98a:	f104 0619 	add.w	r6, r4, #25
 800e98e:	e7f5      	b.n	800e97c <_printf_i+0x224>
 800e990:	0800f848 	.word	0x0800f848
 800e994:	0800f859 	.word	0x0800f859

0800e998 <_realloc_r>:
 800e998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e99c:	4680      	mov	r8, r0
 800e99e:	4615      	mov	r5, r2
 800e9a0:	460c      	mov	r4, r1
 800e9a2:	b921      	cbnz	r1, 800e9ae <_realloc_r+0x16>
 800e9a4:	4611      	mov	r1, r2
 800e9a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9aa:	f7ff bb21 	b.w	800dff0 <_malloc_r>
 800e9ae:	b92a      	cbnz	r2, 800e9bc <_realloc_r+0x24>
 800e9b0:	f7ff fcc0 	bl	800e334 <_free_r>
 800e9b4:	2400      	movs	r4, #0
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9bc:	f000 f842 	bl	800ea44 <_malloc_usable_size_r>
 800e9c0:	4285      	cmp	r5, r0
 800e9c2:	4606      	mov	r6, r0
 800e9c4:	d802      	bhi.n	800e9cc <_realloc_r+0x34>
 800e9c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e9ca:	d8f4      	bhi.n	800e9b6 <_realloc_r+0x1e>
 800e9cc:	4629      	mov	r1, r5
 800e9ce:	4640      	mov	r0, r8
 800e9d0:	f7ff fb0e 	bl	800dff0 <_malloc_r>
 800e9d4:	4607      	mov	r7, r0
 800e9d6:	2800      	cmp	r0, #0
 800e9d8:	d0ec      	beq.n	800e9b4 <_realloc_r+0x1c>
 800e9da:	42b5      	cmp	r5, r6
 800e9dc:	462a      	mov	r2, r5
 800e9de:	4621      	mov	r1, r4
 800e9e0:	bf28      	it	cs
 800e9e2:	4632      	movcs	r2, r6
 800e9e4:	f7ff fc90 	bl	800e308 <memcpy>
 800e9e8:	4621      	mov	r1, r4
 800e9ea:	4640      	mov	r0, r8
 800e9ec:	f7ff fca2 	bl	800e334 <_free_r>
 800e9f0:	463c      	mov	r4, r7
 800e9f2:	e7e0      	b.n	800e9b6 <_realloc_r+0x1e>

0800e9f4 <memmove>:
 800e9f4:	4288      	cmp	r0, r1
 800e9f6:	b510      	push	{r4, lr}
 800e9f8:	eb01 0402 	add.w	r4, r1, r2
 800e9fc:	d902      	bls.n	800ea04 <memmove+0x10>
 800e9fe:	4284      	cmp	r4, r0
 800ea00:	4623      	mov	r3, r4
 800ea02:	d807      	bhi.n	800ea14 <memmove+0x20>
 800ea04:	1e43      	subs	r3, r0, #1
 800ea06:	42a1      	cmp	r1, r4
 800ea08:	d008      	beq.n	800ea1c <memmove+0x28>
 800ea0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea12:	e7f8      	b.n	800ea06 <memmove+0x12>
 800ea14:	4601      	mov	r1, r0
 800ea16:	4402      	add	r2, r0
 800ea18:	428a      	cmp	r2, r1
 800ea1a:	d100      	bne.n	800ea1e <memmove+0x2a>
 800ea1c:	bd10      	pop	{r4, pc}
 800ea1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea26:	e7f7      	b.n	800ea18 <memmove+0x24>

0800ea28 <memchr>:
 800ea28:	4603      	mov	r3, r0
 800ea2a:	b510      	push	{r4, lr}
 800ea2c:	b2c9      	uxtb	r1, r1
 800ea2e:	4402      	add	r2, r0
 800ea30:	4293      	cmp	r3, r2
 800ea32:	4618      	mov	r0, r3
 800ea34:	d101      	bne.n	800ea3a <memchr+0x12>
 800ea36:	2000      	movs	r0, #0
 800ea38:	e003      	b.n	800ea42 <memchr+0x1a>
 800ea3a:	7804      	ldrb	r4, [r0, #0]
 800ea3c:	3301      	adds	r3, #1
 800ea3e:	428c      	cmp	r4, r1
 800ea40:	d1f6      	bne.n	800ea30 <memchr+0x8>
 800ea42:	bd10      	pop	{r4, pc}

0800ea44 <_malloc_usable_size_r>:
 800ea44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea48:	1f18      	subs	r0, r3, #4
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	bfbc      	itt	lt
 800ea4e:	580b      	ldrlt	r3, [r1, r0]
 800ea50:	18c0      	addlt	r0, r0, r3
 800ea52:	4770      	bx	lr

0800ea54 <_init>:
 800ea54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea56:	bf00      	nop
 800ea58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea5a:	bc08      	pop	{r3}
 800ea5c:	469e      	mov	lr, r3
 800ea5e:	4770      	bx	lr

0800ea60 <_fini>:
 800ea60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea62:	bf00      	nop
 800ea64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea66:	bc08      	pop	{r3}
 800ea68:	469e      	mov	lr, r3
 800ea6a:	4770      	bx	lr
