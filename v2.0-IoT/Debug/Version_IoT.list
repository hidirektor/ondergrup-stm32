
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd60  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  0800cf44  0800cf44  0000df44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d150  0800d150  0000ff80  2**0
                  CONTENTS
  4 .ARM          00000008  0800d150  0800d150  0000e150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d158  0800d158  0000ff80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d158  0800d158  0000e158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d15c  0800d15c  0000e15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000f80  20000000  0800d160  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000958  20000f80  0800e0e0  0000ff80  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200018d8  0800e0e0  000108d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000ff80  2**0
                  CONTENTS, READONLY
 12 .debug_info   000187b5  00000000  00000000  0000ffa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d5  00000000  00000000  0002875e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  0002bc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e8c  00000000  00000000  0002cf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c248  00000000  00000000  0002dd94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc03  00000000  00000000  00049fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a006e  00000000  00000000  00065bdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00105c4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d64  00000000  00000000  00105c90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010a9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000f80 	.word	0x20000f80
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cf2c 	.word	0x0800cf2c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000f84 	.word	0x20000f84
 8000220:	0800cf2c 	.word	0x0800cf2c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "EEPROMProcess.h"
#include "main.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	EEPROM_Read(0, 0, eepromData, 110);
 8000238:	236e      	movs	r3, #110	@ 0x6e
 800023a:	4a9b      	ldr	r2, [pc, #620]	@ (80004a8 <eepromKontrol+0x274>)
 800023c:	2100      	movs	r1, #0
 800023e:	2000      	movs	r0, #0
 8000240:	f000 fb00 	bl	8000844 <EEPROM_Read>

	//Sürekli sıfırlama işlemi yapıyor
	firstSetup();
 8000244:	f000 fa3a 	bl	80006bc <firstSetup>

	setupCompleted = eepromData[0];
 8000248:	4b97      	ldr	r3, [pc, #604]	@ (80004a8 <eepromKontrol+0x274>)
 800024a:	781a      	ldrb	r2, [r3, #0]
 800024c:	4b97      	ldr	r3, [pc, #604]	@ (80004ac <eepromKontrol+0x278>)
 800024e:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000250:	4b95      	ldr	r3, [pc, #596]	@ (80004a8 <eepromKontrol+0x274>)
 8000252:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8000256:	4b96      	ldr	r3, [pc, #600]	@ (80004b0 <eepromKontrol+0x27c>)
 8000258:	701a      	strb	r2, [r3, #0]
	idVerifyVal = eepromData[49];
 800025a:	4b93      	ldr	r3, [pc, #588]	@ (80004a8 <eepromKontrol+0x274>)
 800025c:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8000260:	4b94      	ldr	r3, [pc, #592]	@ (80004b4 <eepromKontrol+0x280>)
 8000262:	701a      	strb	r2, [r3, #0]

	kaydedilenDeger = eepromData[3];
 8000264:	4b90      	ldr	r3, [pc, #576]	@ (80004a8 <eepromKontrol+0x274>)
 8000266:	78da      	ldrb	r2, [r3, #3]
 8000268:	4b93      	ldr	r3, [pc, #588]	@ (80004b8 <eepromKontrol+0x284>)
 800026a:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 800026c:	4b8e      	ldr	r3, [pc, #568]	@ (80004a8 <eepromKontrol+0x274>)
 800026e:	785a      	ldrb	r2, [r3, #1]
 8000270:	4b92      	ldr	r3, [pc, #584]	@ (80004bc <eepromKontrol+0x288>)
 8000272:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8000274:	4b8c      	ldr	r3, [pc, #560]	@ (80004a8 <eepromKontrol+0x274>)
 8000276:	789a      	ldrb	r2, [r3, #2]
 8000278:	4b91      	ldr	r3, [pc, #580]	@ (80004c0 <eepromKontrol+0x28c>)
 800027a:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 800027c:	4b8a      	ldr	r3, [pc, #552]	@ (80004a8 <eepromKontrol+0x274>)
 800027e:	791a      	ldrb	r2, [r3, #4]
 8000280:	4b90      	ldr	r3, [pc, #576]	@ (80004c4 <eepromKontrol+0x290>)
 8000282:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8000284:	4b88      	ldr	r3, [pc, #544]	@ (80004a8 <eepromKontrol+0x274>)
 8000286:	795a      	ldrb	r2, [r3, #5]
 8000288:	4b8f      	ldr	r3, [pc, #572]	@ (80004c8 <eepromKontrol+0x294>)
 800028a:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 800028c:	4b86      	ldr	r3, [pc, #536]	@ (80004a8 <eepromKontrol+0x274>)
 800028e:	799a      	ldrb	r2, [r3, #6]
 8000290:	4b8e      	ldr	r3, [pc, #568]	@ (80004cc <eepromKontrol+0x298>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8000294:	4b84      	ldr	r3, [pc, #528]	@ (80004a8 <eepromKontrol+0x274>)
 8000296:	79da      	ldrb	r2, [r3, #7]
 8000298:	4b8d      	ldr	r3, [pc, #564]	@ (80004d0 <eepromKontrol+0x29c>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 800029c:	4b82      	ldr	r3, [pc, #520]	@ (80004a8 <eepromKontrol+0x274>)
 800029e:	7a1a      	ldrb	r2, [r3, #8]
 80002a0:	4b8c      	ldr	r3, [pc, #560]	@ (80004d4 <eepromKontrol+0x2a0>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 80002a4:	4b80      	ldr	r3, [pc, #512]	@ (80004a8 <eepromKontrol+0x274>)
 80002a6:	7a5a      	ldrb	r2, [r3, #9]
 80002a8:	4b8b      	ldr	r3, [pc, #556]	@ (80004d8 <eepromKontrol+0x2a4>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002ac:	4b7e      	ldr	r3, [pc, #504]	@ (80004a8 <eepromKontrol+0x274>)
 80002ae:	7a9a      	ldrb	r2, [r3, #10]
 80002b0:	4b8a      	ldr	r3, [pc, #552]	@ (80004dc <eepromKontrol+0x2a8>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002b4:	4b7c      	ldr	r3, [pc, #496]	@ (80004a8 <eepromKontrol+0x274>)
 80002b6:	7ada      	ldrb	r2, [r3, #11]
 80002b8:	4b89      	ldr	r3, [pc, #548]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002bc:	4b7a      	ldr	r3, [pc, #488]	@ (80004a8 <eepromKontrol+0x274>)
 80002be:	7b1a      	ldrb	r2, [r3, #12]
 80002c0:	4b88      	ldr	r3, [pc, #544]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002c2:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002c4:	4b78      	ldr	r3, [pc, #480]	@ (80004a8 <eepromKontrol+0x274>)
 80002c6:	7b5a      	ldrb	r2, [r3, #13]
 80002c8:	4b87      	ldr	r3, [pc, #540]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002ca:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002cc:	4b76      	ldr	r3, [pc, #472]	@ (80004a8 <eepromKontrol+0x274>)
 80002ce:	7b9a      	ldrb	r2, [r3, #14]
 80002d0:	4b86      	ldr	r3, [pc, #536]	@ (80004ec <eepromKontrol+0x2b8>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002d4:	4b74      	ldr	r3, [pc, #464]	@ (80004a8 <eepromKontrol+0x274>)
 80002d6:	7bda      	ldrb	r2, [r3, #15]
 80002d8:	4b85      	ldr	r3, [pc, #532]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002dc:	4b72      	ldr	r3, [pc, #456]	@ (80004a8 <eepromKontrol+0x274>)
 80002de:	7c1a      	ldrb	r2, [r3, #16]
 80002e0:	4b84      	ldr	r3, [pc, #528]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002e4:	4b70      	ldr	r3, [pc, #448]	@ (80004a8 <eepromKontrol+0x274>)
 80002e6:	7c5a      	ldrb	r2, [r3, #17]
 80002e8:	4b83      	ldr	r3, [pc, #524]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002ea:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002ec:	4b6e      	ldr	r3, [pc, #440]	@ (80004a8 <eepromKontrol+0x274>)
 80002ee:	7c9a      	ldrb	r2, [r3, #18]
 80002f0:	4b82      	ldr	r3, [pc, #520]	@ (80004fc <eepromKontrol+0x2c8>)
 80002f2:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002f4:	4b6c      	ldr	r3, [pc, #432]	@ (80004a8 <eepromKontrol+0x274>)
 80002f6:	7cda      	ldrb	r2, [r3, #19]
 80002f8:	4b81      	ldr	r3, [pc, #516]	@ (8000500 <eepromKontrol+0x2cc>)
 80002fa:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002fc:	4b6a      	ldr	r3, [pc, #424]	@ (80004a8 <eepromKontrol+0x274>)
 80002fe:	7d1a      	ldrb	r2, [r3, #20]
 8000300:	4b80      	ldr	r3, [pc, #512]	@ (8000504 <eepromKontrol+0x2d0>)
 8000302:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8000304:	4b68      	ldr	r3, [pc, #416]	@ (80004a8 <eepromKontrol+0x274>)
 8000306:	7d5a      	ldrb	r2, [r3, #21]
 8000308:	4b7f      	ldr	r3, [pc, #508]	@ (8000508 <eepromKontrol+0x2d4>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 800030c:	4b66      	ldr	r3, [pc, #408]	@ (80004a8 <eepromKontrol+0x274>)
 800030e:	7d9a      	ldrb	r2, [r3, #22]
 8000310:	4b7e      	ldr	r3, [pc, #504]	@ (800050c <eepromKontrol+0x2d8>)
 8000312:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8000314:	4b64      	ldr	r3, [pc, #400]	@ (80004a8 <eepromKontrol+0x274>)
 8000316:	7dda      	ldrb	r2, [r3, #23]
 8000318:	4b7d      	ldr	r3, [pc, #500]	@ (8000510 <eepromKontrol+0x2dc>)
 800031a:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 800031c:	4b62      	ldr	r3, [pc, #392]	@ (80004a8 <eepromKontrol+0x274>)
 800031e:	7e1a      	ldrb	r2, [r3, #24]
 8000320:	4b7c      	ldr	r3, [pc, #496]	@ (8000514 <eepromKontrol+0x2e0>)
 8000322:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8000324:	4b60      	ldr	r3, [pc, #384]	@ (80004a8 <eepromKontrol+0x274>)
 8000326:	7e5a      	ldrb	r2, [r3, #25]
 8000328:	4b7b      	ldr	r3, [pc, #492]	@ (8000518 <eepromKontrol+0x2e4>)
 800032a:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 800032c:	4b5e      	ldr	r3, [pc, #376]	@ (80004a8 <eepromKontrol+0x274>)
 800032e:	7e9a      	ldrb	r2, [r3, #26]
 8000330:	4b7a      	ldr	r3, [pc, #488]	@ (800051c <eepromKontrol+0x2e8>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8000334:	4b5c      	ldr	r3, [pc, #368]	@ (80004a8 <eepromKontrol+0x274>)
 8000336:	7eda      	ldrb	r2, [r3, #27]
 8000338:	4b79      	ldr	r3, [pc, #484]	@ (8000520 <eepromKontrol+0x2ec>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisiDemo = eepromData[28];
 800033c:	4b5a      	ldr	r3, [pc, #360]	@ (80004a8 <eepromKontrol+0x274>)
 800033e:	7f1a      	ldrb	r2, [r3, #28]
 8000340:	4b78      	ldr	r3, [pc, #480]	@ (8000524 <eepromKontrol+0x2f0>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaCount = eepromData[29];
 8000344:	4b58      	ldr	r3, [pc, #352]	@ (80004a8 <eepromKontrol+0x274>)
 8000346:	7f5a      	ldrb	r2, [r3, #29]
 8000348:	4b77      	ldr	r3, [pc, #476]	@ (8000528 <eepromKontrol+0x2f4>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaCountDemo = eepromData[30];
 800034c:	4b56      	ldr	r3, [pc, #344]	@ (80004a8 <eepromKontrol+0x274>)
 800034e:	7f9a      	ldrb	r2, [r3, #30]
 8000350:	4b76      	ldr	r3, [pc, #472]	@ (800052c <eepromKontrol+0x2f8>)
 8000352:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8000354:	4b54      	ldr	r3, [pc, #336]	@ (80004a8 <eepromKontrol+0x274>)
 8000356:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800035a:	4b75      	ldr	r3, [pc, #468]	@ (8000530 <eepromKontrol+0x2fc>)
 800035c:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 800035e:	4b52      	ldr	r3, [pc, #328]	@ (80004a8 <eepromKontrol+0x274>)
 8000360:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000364:	4b73      	ldr	r3, [pc, #460]	@ (8000534 <eepromKontrol+0x300>)
 8000366:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8000368:	4b4f      	ldr	r3, [pc, #316]	@ (80004a8 <eepromKontrol+0x274>)
 800036a:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800036e:	4b72      	ldr	r3, [pc, #456]	@ (8000538 <eepromKontrol+0x304>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000372:	4b4d      	ldr	r3, [pc, #308]	@ (80004a8 <eepromKontrol+0x274>)
 8000374:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000378:	4b70      	ldr	r3, [pc, #448]	@ (800053c <eepromKontrol+0x308>)
 800037a:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 800037c:	4b4a      	ldr	r3, [pc, #296]	@ (80004a8 <eepromKontrol+0x274>)
 800037e:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000382:	4b6f      	ldr	r3, [pc, #444]	@ (8000540 <eepromKontrol+0x30c>)
 8000384:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8000386:	4b48      	ldr	r3, [pc, #288]	@ (80004a8 <eepromKontrol+0x274>)
 8000388:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800038c:	4b6d      	ldr	r3, [pc, #436]	@ (8000544 <eepromKontrol+0x310>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8000390:	4b45      	ldr	r3, [pc, #276]	@ (80004a8 <eepromKontrol+0x274>)
 8000392:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8000396:	4b6c      	ldr	r3, [pc, #432]	@ (8000548 <eepromKontrol+0x314>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 800039a:	4b43      	ldr	r3, [pc, #268]	@ (80004a8 <eepromKontrol+0x274>)
 800039c:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 80003a0:	4b6a      	ldr	r3, [pc, #424]	@ (800054c <eepromKontrol+0x318>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003a4:	4b40      	ldr	r3, [pc, #256]	@ (80004a8 <eepromKontrol+0x274>)
 80003a6:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80003aa:	4b69      	ldr	r3, [pc, #420]	@ (8000550 <eepromKontrol+0x31c>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003ae:	4b3e      	ldr	r3, [pc, #248]	@ (80004a8 <eepromKontrol+0x274>)
 80003b0:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003b4:	4b67      	ldr	r3, [pc, #412]	@ (8000554 <eepromKontrol+0x320>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003b8:	4b3b      	ldr	r3, [pc, #236]	@ (80004a8 <eepromKontrol+0x274>)
 80003ba:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003be:	4b66      	ldr	r3, [pc, #408]	@ (8000558 <eepromKontrol+0x324>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003c2:	4b39      	ldr	r3, [pc, #228]	@ (80004a8 <eepromKontrol+0x274>)
 80003c4:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003c8:	4b64      	ldr	r3, [pc, #400]	@ (800055c <eepromKontrol+0x328>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003cc:	4b36      	ldr	r3, [pc, #216]	@ (80004a8 <eepromKontrol+0x274>)
 80003ce:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003d2:	4b63      	ldr	r3, [pc, #396]	@ (8000560 <eepromKontrol+0x32c>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003d6:	4b34      	ldr	r3, [pc, #208]	@ (80004a8 <eepromKontrol+0x274>)
 80003d8:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003dc:	4b61      	ldr	r3, [pc, #388]	@ (8000564 <eepromKontrol+0x330>)
 80003de:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80003e0:	4b36      	ldr	r3, [pc, #216]	@ (80004bc <eepromKontrol+0x288>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d902      	bls.n	80003ee <eepromKontrol+0x1ba>
	    calismaSekli=0;
 80003e8:	4b34      	ldr	r3, [pc, #208]	@ (80004bc <eepromKontrol+0x288>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80003ee:	4b34      	ldr	r3, [pc, #208]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d902      	bls.n	80003fc <eepromKontrol+0x1c8>
	    emniyetCercevesi=1;
 80003f6:	4b32      	ldr	r3, [pc, #200]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f8:	2201      	movs	r2, #1
 80003fa:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80003fc:	4b31      	ldr	r3, [pc, #196]	@ (80004c4 <eepromKontrol+0x290>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d902      	bls.n	800040a <eepromKontrol+0x1d6>
	    yavaslamaLimit=0;
 8000404:	4b2f      	ldr	r3, [pc, #188]	@ (80004c4 <eepromKontrol+0x290>)
 8000406:	2200      	movs	r2, #0
 8000408:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800040a:	4b2f      	ldr	r3, [pc, #188]	@ (80004c8 <eepromKontrol+0x294>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d902      	bls.n	8000418 <eepromKontrol+0x1e4>
	    altLimit=1;
 8000412:	4b2d      	ldr	r3, [pc, #180]	@ (80004c8 <eepromKontrol+0x294>)
 8000414:	2201      	movs	r2, #1
 8000416:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8000418:	4b2c      	ldr	r3, [pc, #176]	@ (80004cc <eepromKontrol+0x298>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b01      	cmp	r3, #1
 800041e:	d902      	bls.n	8000426 <eepromKontrol+0x1f2>
	    basincSalteri=1;
 8000420:	4b2a      	ldr	r3, [pc, #168]	@ (80004cc <eepromKontrol+0x298>)
 8000422:	2201      	movs	r2, #1
 8000424:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8000426:	4b2a      	ldr	r3, [pc, #168]	@ (80004d0 <eepromKontrol+0x29c>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b03      	cmp	r3, #3
 800042c:	d902      	bls.n	8000434 <eepromKontrol+0x200>
	    kapiSecimleri=3;
 800042e:	4b28      	ldr	r3, [pc, #160]	@ (80004d0 <eepromKontrol+0x29c>)
 8000430:	2203      	movs	r2, #3
 8000432:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000434:	4b41      	ldr	r3, [pc, #260]	@ (800053c <eepromKontrol+0x308>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b01      	cmp	r3, #1
 800043a:	d902      	bls.n	8000442 <eepromKontrol+0x20e>
	    kapiAcTipi=0;
 800043c:	4b3f      	ldr	r3, [pc, #252]	@ (800053c <eepromKontrol+0x308>)
 800043e:	2200      	movs	r2, #0
 8000440:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8000442:	4b24      	ldr	r3, [pc, #144]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b02      	cmp	r3, #2
 8000448:	d902      	bls.n	8000450 <eepromKontrol+0x21c>
	    kapi1Tip=1;
 800044a:	4b22      	ldr	r3, [pc, #136]	@ (80004d4 <eepromKontrol+0x2a0>)
 800044c:	2201      	movs	r2, #1
 800044e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8000450:	4b21      	ldr	r3, [pc, #132]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b05      	cmp	r3, #5
 8000456:	d902      	bls.n	800045e <eepromKontrol+0x22a>
	    kapi1AcSure=5;
 8000458:	4b1f      	ldr	r3, [pc, #124]	@ (80004d8 <eepromKontrol+0x2a4>)
 800045a:	2205      	movs	r2, #5
 800045c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800045e:	4b1f      	ldr	r3, [pc, #124]	@ (80004dc <eepromKontrol+0x2a8>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b02      	cmp	r3, #2
 8000464:	d902      	bls.n	800046c <eepromKontrol+0x238>
	    kapi2Tip=1;
 8000466:	4b1d      	ldr	r3, [pc, #116]	@ (80004dc <eepromKontrol+0x2a8>)
 8000468:	2201      	movs	r2, #1
 800046a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800046c:	4b1c      	ldr	r3, [pc, #112]	@ (80004e0 <eepromKontrol+0x2ac>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b05      	cmp	r3, #5
 8000472:	d902      	bls.n	800047a <eepromKontrol+0x246>
	    kapi2AcSure=5;
 8000474:	4b1a      	ldr	r3, [pc, #104]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000476:	2205      	movs	r2, #5
 8000478:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 800047a:	4b1a      	ldr	r3, [pc, #104]	@ (80004e4 <eepromKontrol+0x2b0>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b02      	cmp	r3, #2
 8000480:	d902      	bls.n	8000488 <eepromKontrol+0x254>
	    kapitablaTip=1;
 8000482:	4b18      	ldr	r3, [pc, #96]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000484:	2201      	movs	r2, #1
 8000486:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8000488:	4b2a      	ldr	r3, [pc, #168]	@ (8000534 <eepromKontrol+0x300>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b02      	cmp	r3, #2
 800048e:	d902      	bls.n	8000496 <eepromKontrol+0x262>
	    kapiTablaAcKonum=2;
 8000490:	4b28      	ldr	r3, [pc, #160]	@ (8000534 <eepromKontrol+0x300>)
 8000492:	2202      	movs	r2, #2
 8000494:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8000496:	4b14      	ldr	r3, [pc, #80]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b05      	cmp	r3, #5
 800049c:	d964      	bls.n	8000568 <eepromKontrol+0x334>
	    kapiTablaAcSure=5;
 800049e:	4b12      	ldr	r3, [pc, #72]	@ (80004e8 <eepromKontrol+0x2b4>)
 80004a0:	2205      	movs	r2, #5
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	e060      	b.n	8000568 <eepromKontrol+0x334>
 80004a6:	bf00      	nop
 80004a8:	20000f9c 	.word	0x20000f9c
 80004ac:	20001040 	.word	0x20001040
 80004b0:	20001097 	.word	0x20001097
 80004b4:	20001098 	.word	0x20001098
 80004b8:	20001041 	.word	0x20001041
 80004bc:	2000106d 	.word	0x2000106d
 80004c0:	20001070 	.word	0x20001070
 80004c4:	20001071 	.word	0x20001071
 80004c8:	20001072 	.word	0x20001072
 80004cc:	20001073 	.word	0x20001073
 80004d0:	20001074 	.word	0x20001074
 80004d4:	20001075 	.word	0x20001075
 80004d8:	20001085 	.word	0x20001085
 80004dc:	20001076 	.word	0x20001076
 80004e0:	20001086 	.word	0x20001086
 80004e4:	20001077 	.word	0x20001077
 80004e8:	20001087 	.word	0x20001087
 80004ec:	2000107a 	.word	0x2000107a
 80004f0:	2000107b 	.word	0x2000107b
 80004f4:	2000107c 	.word	0x2000107c
 80004f8:	2000107d 	.word	0x2000107d
 80004fc:	2000107e 	.word	0x2000107e
 8000500:	2000107f 	.word	0x2000107f
 8000504:	20001080 	.word	0x20001080
 8000508:	20001081 	.word	0x20001081
 800050c:	20001082 	.word	0x20001082
 8000510:	20001083 	.word	0x20001083
 8000514:	20001084 	.word	0x20001084
 8000518:	20001088 	.word	0x20001088
 800051c:	2000108a 	.word	0x2000108a
 8000520:	20001064 	.word	0x20001064
 8000524:	20001065 	.word	0x20001065
 8000528:	20001066 	.word	0x20001066
 800052c:	20001067 	.word	0x20001067
 8000530:	2000108c 	.word	0x2000108c
 8000534:	20001079 	.word	0x20001079
 8000538:	2000108b 	.word	0x2000108b
 800053c:	20001078 	.word	0x20001078
 8000540:	2000108d 	.word	0x2000108d
 8000544:	2000108e 	.word	0x2000108e
 8000548:	2000108f 	.word	0x2000108f
 800054c:	20001090 	.word	0x20001090
 8000550:	20001091 	.word	0x20001091
 8000554:	20001092 	.word	0x20001092
 8000558:	20001093 	.word	0x20001093
 800055c:	20001094 	.word	0x20001094
 8000560:	20001095 	.word	0x20001095
 8000564:	20001096 	.word	0x20001096
	}

	if(yukariYavasLimit>1) {
 8000568:	4b44      	ldr	r3, [pc, #272]	@ (800067c <eepromKontrol+0x448>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d902      	bls.n	8000576 <eepromKontrol+0x342>
	    yukariYavasLimit=0;
 8000570:	4b42      	ldr	r3, [pc, #264]	@ (800067c <eepromKontrol+0x448>)
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8000576:	4b42      	ldr	r3, [pc, #264]	@ (8000680 <eepromKontrol+0x44c>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b02      	cmp	r3, #2
 800057c:	d902      	bls.n	8000584 <eepromKontrol+0x350>
	    devirmeYuruyusSecim=0;
 800057e:	4b40      	ldr	r3, [pc, #256]	@ (8000680 <eepromKontrol+0x44c>)
 8000580:	2200      	movs	r2, #0
 8000582:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8000584:	4b3f      	ldr	r3, [pc, #252]	@ (8000684 <eepromKontrol+0x450>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d902      	bls.n	8000592 <eepromKontrol+0x35e>
	    devirmeYukariIleriLimit=1;
 800058c:	4b3d      	ldr	r3, [pc, #244]	@ (8000684 <eepromKontrol+0x450>)
 800058e:	2201      	movs	r2, #1
 8000590:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8000592:	4b3d      	ldr	r3, [pc, #244]	@ (8000688 <eepromKontrol+0x454>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2b01      	cmp	r3, #1
 8000598:	d902      	bls.n	80005a0 <eepromKontrol+0x36c>
	    devirmeAsagiGeriLimit=1;
 800059a:	4b3b      	ldr	r3, [pc, #236]	@ (8000688 <eepromKontrol+0x454>)
 800059c:	2201      	movs	r2, #1
 800059e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 80005a0:	4b3a      	ldr	r3, [pc, #232]	@ (800068c <eepromKontrol+0x458>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d902      	bls.n	80005ae <eepromKontrol+0x37a>
	    devirmeSilindirTipi=0;
 80005a8:	4b38      	ldr	r3, [pc, #224]	@ (800068c <eepromKontrol+0x458>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 80005ae:	4b38      	ldr	r3, [pc, #224]	@ (8000690 <eepromKontrol+0x45c>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b01      	cmp	r3, #1
 80005b4:	d902      	bls.n	80005bc <eepromKontrol+0x388>
	    platformSilindirTipi=0;
 80005b6:	4b36      	ldr	r3, [pc, #216]	@ (8000690 <eepromKontrol+0x45c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80005bc:	4b35      	ldr	r3, [pc, #212]	@ (8000694 <eepromKontrol+0x460>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b05      	cmp	r3, #5
 80005c2:	d902      	bls.n	80005ca <eepromKontrol+0x396>
	    yukariValfTmr=0;
 80005c4:	4b33      	ldr	r3, [pc, #204]	@ (8000694 <eepromKontrol+0x460>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80005ca:	4b33      	ldr	r3, [pc, #204]	@ (8000698 <eepromKontrol+0x464>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b05      	cmp	r3, #5
 80005d0:	d902      	bls.n	80005d8 <eepromKontrol+0x3a4>
	    asagiValfTmr=0;
 80005d2:	4b31      	ldr	r3, [pc, #196]	@ (8000698 <eepromKontrol+0x464>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80005d8:	4b30      	ldr	r3, [pc, #192]	@ (800069c <eepromKontrol+0x468>)
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b05      	cmp	r3, #5
 80005de:	d902      	bls.n	80005e6 <eepromKontrol+0x3b2>
	    devirmeYukariIleriTmr=0;
 80005e0:	4b2e      	ldr	r3, [pc, #184]	@ (800069c <eepromKontrol+0x468>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80005e6:	4b2e      	ldr	r3, [pc, #184]	@ (80006a0 <eepromKontrol+0x46c>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b05      	cmp	r3, #5
 80005ec:	d902      	bls.n	80005f4 <eepromKontrol+0x3c0>
	    devirmeAsagiGeriTmr=0;
 80005ee:	4b2c      	ldr	r3, [pc, #176]	@ (80006a0 <eepromKontrol+0x46c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80005f4:	4b2b      	ldr	r3, [pc, #172]	@ (80006a4 <eepromKontrol+0x470>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2bb4      	cmp	r3, #180	@ 0xb4
 80005fa:	d902      	bls.n	8000602 <eepromKontrol+0x3ce>
	    makineCalismaTmr=60;
 80005fc:	4b29      	ldr	r3, [pc, #164]	@ (80006a4 <eepromKontrol+0x470>)
 80005fe:	223c      	movs	r2, #60	@ 0x3c
 8000600:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8000602:	4b29      	ldr	r3, [pc, #164]	@ (80006a8 <eepromKontrol+0x474>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d902      	bls.n	8000610 <eepromKontrol+0x3dc>
	    buzzer=0;
 800060a:	4b27      	ldr	r3, [pc, #156]	@ (80006a8 <eepromKontrol+0x474>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8000610:	4b26      	ldr	r3, [pc, #152]	@ (80006ac <eepromKontrol+0x478>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d902      	bls.n	800061e <eepromKontrol+0x3ea>
	    demoMode=0;
 8000618:	4b24      	ldr	r3, [pc, #144]	@ (80006ac <eepromKontrol+0x478>)
 800061a:	2200      	movs	r2, #0
 800061c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800061e:	4b24      	ldr	r3, [pc, #144]	@ (80006b0 <eepromKontrol+0x47c>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d902      	bls.n	800062c <eepromKontrol+0x3f8>
	    calismaSayModu=0;
 8000626:	4b22      	ldr	r3, [pc, #136]	@ (80006b0 <eepromKontrol+0x47c>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 800062c:	4b21      	ldr	r3, [pc, #132]	@ (80006b4 <eepromKontrol+0x480>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b01      	cmp	r3, #1
 8000632:	d902      	bls.n	800063a <eepromKontrol+0x406>
	    dilSecim=0;
 8000634:	4b1f      	ldr	r3, [pc, #124]	@ (80006b4 <eepromKontrol+0x480>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 800063a:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <eepromKontrol+0x484>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b01      	cmp	r3, #1
 8000640:	d902      	bls.n	8000648 <eepromKontrol+0x414>
		iotMode=0;
 8000642:	4b1d      	ldr	r3, [pc, #116]	@ (80006b8 <eepromKontrol+0x484>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 8000648:	2001      	movs	r0, #1
 800064a:	f000 f96b 	bl	8000924 <convertArrays>
	HAL_Delay(250);
 800064e:	20fa      	movs	r0, #250	@ 0xfa
 8000650:	f008 fe36 	bl	80092c0 <HAL_Delay>

	convertArrays(2);
 8000654:	2002      	movs	r0, #2
 8000656:	f000 f965 	bl	8000924 <convertArrays>
	HAL_Delay(250);
 800065a:	20fa      	movs	r0, #250	@ 0xfa
 800065c:	f008 fe30 	bl	80092c0 <HAL_Delay>

	convertArrays(3);
 8000660:	2003      	movs	r0, #3
 8000662:	f000 f95f 	bl	8000924 <convertArrays>
	HAL_Delay(250);
 8000666:	20fa      	movs	r0, #250	@ 0xfa
 8000668:	f008 fe2a 	bl	80092c0 <HAL_Delay>

	loadMenuTexts(dilSecim);
 800066c:	4b11      	ldr	r3, [pc, #68]	@ (80006b4 <eepromKontrol+0x480>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f005 fb17 	bl	8005ca4 <loadMenuTexts>
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	2000107a 	.word	0x2000107a
 8000680:	2000107b 	.word	0x2000107b
 8000684:	2000107c 	.word	0x2000107c
 8000688:	2000107d 	.word	0x2000107d
 800068c:	2000107e 	.word	0x2000107e
 8000690:	2000107f 	.word	0x2000107f
 8000694:	20001080 	.word	0x20001080
 8000698:	20001081 	.word	0x20001081
 800069c:	20001082 	.word	0x20001082
 80006a0:	20001083 	.word	0x20001083
 80006a4:	20001084 	.word	0x20001084
 80006a8:	20001088 	.word	0x20001088
 80006ac:	2000108a 	.word	0x2000108a
 80006b0:	2000108b 	.word	0x2000108b
 80006b4:	2000108c 	.word	0x2000108c
 80006b8:	20001097 	.word	0x20001097

080006bc <firstSetup>:

void firstSetup() {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
    if (setupCompleted != 1) {
 80006c0:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <firstSetup+0x5c>)
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d025      	beq.n	8000714 <firstSetup+0x58>
        memset(eepromData, 0, 110);
 80006c8:	226e      	movs	r2, #110	@ 0x6e
 80006ca:	2100      	movs	r1, #0
 80006cc:	4813      	ldr	r0, [pc, #76]	@ (800071c <firstSetup+0x60>)
 80006ce:	f00c fc01 	bl	800ced4 <memset>

        eepromData[0] = 1;
 80006d2:	4b12      	ldr	r3, [pc, #72]	@ (800071c <firstSetup+0x60>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	701a      	strb	r2, [r3, #0]
        eepromData[9] = 4;
 80006d8:	4b10      	ldr	r3, [pc, #64]	@ (800071c <firstSetup+0x60>)
 80006da:	2204      	movs	r2, #4
 80006dc:	725a      	strb	r2, [r3, #9]
        eepromData[11] = 4;
 80006de:	4b0f      	ldr	r3, [pc, #60]	@ (800071c <firstSetup+0x60>)
 80006e0:	2204      	movs	r2, #4
 80006e2:	72da      	strb	r2, [r3, #11]
        eepromData[13] = 4;
 80006e4:	4b0d      	ldr	r3, [pc, #52]	@ (800071c <firstSetup+0x60>)
 80006e6:	2204      	movs	r2, #4
 80006e8:	735a      	strb	r2, [r3, #13]

        eepromData[20] = 60;
 80006ea:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <firstSetup+0x60>)
 80006ec:	223c      	movs	r2, #60	@ 0x3c
 80006ee:	751a      	strb	r2, [r3, #20]
        eepromData[21] = 60;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <firstSetup+0x60>)
 80006f2:	223c      	movs	r2, #60	@ 0x3c
 80006f4:	755a      	strb	r2, [r3, #21]
        eepromData[22] = 60;
 80006f6:	4b09      	ldr	r3, [pc, #36]	@ (800071c <firstSetup+0x60>)
 80006f8:	223c      	movs	r2, #60	@ 0x3c
 80006fa:	759a      	strb	r2, [r3, #22]
        eepromData[23] = 60;
 80006fc:	4b07      	ldr	r3, [pc, #28]	@ (800071c <firstSetup+0x60>)
 80006fe:	223c      	movs	r2, #60	@ 0x3c
 8000700:	75da      	strb	r2, [r3, #23]
        eepromData[24] = 60;
 8000702:	4b06      	ldr	r3, [pc, #24]	@ (800071c <firstSetup+0x60>)
 8000704:	223c      	movs	r2, #60	@ 0x3c
 8000706:	761a      	strb	r2, [r3, #24]

        EEPROM_Write(0, 0, eepromData, 110);
 8000708:	236e      	movs	r3, #110	@ 0x6e
 800070a:	4a04      	ldr	r2, [pc, #16]	@ (800071c <firstSetup+0x60>)
 800070c:	2100      	movs	r1, #0
 800070e:	2000      	movs	r0, #0
 8000710:	f000 f826 	bl	8000760 <EEPROM_Write>
    }
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20001040 	.word	0x20001040
 800071c:	20000f9c 	.word	0x20000f9c

08000720 <saveEEPROM>:

    HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, sizeof(eepromData), eepromData, sizeof(eepromData), 3000);
    HAL_Delay(1000);
}

void saveEEPROM(int resultText) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	EEPROM_Write(0, 0, eepromData, 110);
 8000728:	236e      	movs	r3, #110	@ 0x6e
 800072a:	4a0b      	ldr	r2, [pc, #44]	@ (8000758 <saveEEPROM+0x38>)
 800072c:	2100      	movs	r1, #0
 800072e:	2000      	movs	r0, #0
 8000730:	f000 f816 	bl	8000760 <EEPROM_Write>

    if(resultText == 1) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d104      	bne.n	8000744 <saveEEPROM+0x24>
    	lcd_print(2, 1, dataYazildiText);
 800073a:	4a08      	ldr	r2, [pc, #32]	@ (800075c <saveEEPROM+0x3c>)
 800073c:	2101      	movs	r1, #1
 800073e:	2002      	movs	r0, #2
 8000740:	f008 f89c 	bl	800887c <lcd_print>
    }

    // Ekranı temizle
    HAL_Delay(500);
 8000744:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000748:	f008 fdba 	bl	80092c0 <HAL_Delay>
    lcd_clear();
 800074c:	f008 f8c2 	bl	80088d4 <lcd_clear>
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000f9c 	.word	0x20000f9c
 800075c:	20001714 	.word	0x20001714

08000760 <EEPROM_Write>:

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b08e      	sub	sp, #56	@ 0x38
 8000764:	af04      	add	r7, sp, #16
 8000766:	60ba      	str	r2, [r7, #8]
 8000768:	461a      	mov	r2, r3
 800076a:	4603      	mov	r3, r0
 800076c:	81fb      	strh	r3, [r7, #14]
 800076e:	460b      	mov	r3, r1
 8000770:	81bb      	strh	r3, [r7, #12]
 8000772:	4613      	mov	r3, r2
 8000774:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 8000776:	2306      	movs	r3, #6
 8000778:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 800077a:	89fb      	ldrh	r3, [r7, #14]
 800077c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 800077e:	88fa      	ldrh	r2, [r7, #6]
 8000780:	89bb      	ldrh	r3, [r7, #12]
 8000782:	4413      	add	r3, r2
 8000784:	2b00      	cmp	r3, #0
 8000786:	da00      	bge.n	800078a <EEPROM_Write+0x2a>
 8000788:	333f      	adds	r3, #63	@ 0x3f
 800078a:	119b      	asrs	r3, r3, #6
 800078c:	b29a      	uxth	r2, r3
 800078e:	89fb      	ldrh	r3, [r7, #14]
 8000790:	4413      	add	r3, r2
 8000792:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 8000794:	8afa      	ldrh	r2, [r7, #22]
 8000796:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	b29b      	uxth	r3, r3
 800079c:	3301      	adds	r3, #1
 800079e:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 80007a4:	2300      	movs	r3, #0
 80007a6:	623b      	str	r3, [r7, #32]
 80007a8:	e041      	b.n	800082e <EEPROM_Write+0xce>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 80007aa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
 80007b2:	b21a      	sxth	r2, r3
 80007b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 80007be:	89bb      	ldrh	r3, [r7, #12]
 80007c0:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80007c4:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 80007c6:	8bfa      	ldrh	r2, [r7, #30]
 80007c8:	88fb      	ldrh	r3, [r7, #6]
 80007ca:	429a      	cmp	r2, r3
 80007cc:	d901      	bls.n	80007d2 <EEPROM_Write+0x72>
            bytesremaining = size;
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 80007d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80007d4:	68ba      	ldr	r2, [r7, #8]
 80007d6:	4413      	add	r3, r2
 80007d8:	8a79      	ldrh	r1, [r7, #18]
 80007da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007de:	9202      	str	r2, [sp, #8]
 80007e0:	8bfa      	ldrh	r2, [r7, #30]
 80007e2:	9201      	str	r2, [sp, #4]
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2310      	movs	r3, #16
 80007e8:	460a      	mov	r2, r1
 80007ea:	21a0      	movs	r1, #160	@ 0xa0
 80007ec:	4813      	ldr	r0, [pc, #76]	@ (800083c <EEPROM_Write+0xdc>)
 80007ee:	f009 fdf1 	bl	800a3d4 <HAL_I2C_Mem_Write>
 80007f2:	4603      	mov	r3, r0
 80007f4:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 80007f6:	7c7b      	ldrb	r3, [r7, #17]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d005      	beq.n	8000808 <EEPROM_Write+0xa8>
            lcd_print(2, 1, "Hata: EEPROM    ");
 80007fc:	4a10      	ldr	r2, [pc, #64]	@ (8000840 <EEPROM_Write+0xe0>)
 80007fe:	2101      	movs	r1, #1
 8000800:	2002      	movs	r0, #2
 8000802:	f008 f83b 	bl	800887c <lcd_print>
            return;
 8000806:	e016      	b.n	8000836 <EEPROM_Write+0xd6>
        }

        startPage += 1;
 8000808:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800080a:	3301      	adds	r3, #1
 800080c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 8000812:	88fa      	ldrh	r2, [r7, #6]
 8000814:	8bfb      	ldrh	r3, [r7, #30]
 8000816:	1ad3      	subs	r3, r2, r3
 8000818:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 800081a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800081c:	8bfb      	ldrh	r3, [r7, #30]
 800081e:	4413      	add	r3, r2
 8000820:	84bb      	strh	r3, [r7, #36]	@ 0x24

        HAL_Delay(5);
 8000822:	2005      	movs	r0, #5
 8000824:	f008 fd4c 	bl	80092c0 <HAL_Delay>
    for (int i = 0; i < numofpages; i++) {
 8000828:	6a3b      	ldr	r3, [r7, #32]
 800082a:	3301      	adds	r3, #1
 800082c:	623b      	str	r3, [r7, #32]
 800082e:	8abb      	ldrh	r3, [r7, #20]
 8000830:	6a3a      	ldr	r2, [r7, #32]
 8000832:	429a      	cmp	r2, r3
 8000834:	dbb9      	blt.n	80007aa <EEPROM_Write+0x4a>
    }
}
 8000836:	3728      	adds	r7, #40	@ 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200017f0 	.word	0x200017f0
 8000840:	0800cf44 	.word	0x0800cf44

08000844 <EEPROM_Read>:

void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b08e      	sub	sp, #56	@ 0x38
 8000848:	af04      	add	r7, sp, #16
 800084a:	60ba      	str	r2, [r7, #8]
 800084c:	461a      	mov	r2, r3
 800084e:	4603      	mov	r3, r0
 8000850:	81fb      	strh	r3, [r7, #14]
 8000852:	460b      	mov	r3, r1
 8000854:	81bb      	strh	r3, [r7, #12]
 8000856:	4613      	mov	r3, r2
 8000858:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 800085a:	2306      	movs	r3, #6
 800085c:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 800085e:	89fb      	ldrh	r3, [r7, #14]
 8000860:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000862:	88fa      	ldrh	r2, [r7, #6]
 8000864:	89bb      	ldrh	r3, [r7, #12]
 8000866:	4413      	add	r3, r2
 8000868:	2b00      	cmp	r3, #0
 800086a:	da00      	bge.n	800086e <EEPROM_Read+0x2a>
 800086c:	333f      	adds	r3, #63	@ 0x3f
 800086e:	119b      	asrs	r3, r3, #6
 8000870:	b29a      	uxth	r2, r3
 8000872:	89fb      	ldrh	r3, [r7, #14]
 8000874:	4413      	add	r3, r2
 8000876:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 8000878:	8afa      	ldrh	r2, [r7, #22]
 800087a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	b29b      	uxth	r3, r3
 8000880:	3301      	adds	r3, #1
 8000882:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
 800088c:	e03e      	b.n	800090c <EEPROM_Read+0xc8>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 800088e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	b21a      	sxth	r2, r3
 8000898:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800089c:	4313      	orrs	r3, r2
 800089e:	b21b      	sxth	r3, r3
 80008a0:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 80008a2:	89bb      	ldrh	r3, [r7, #12]
 80008a4:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80008a8:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 80008aa:	8bfa      	ldrh	r2, [r7, #30]
 80008ac:	88fb      	ldrh	r3, [r7, #6]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d901      	bls.n	80008b6 <EEPROM_Read+0x72>
            bytesremaining = size;
 80008b2:	88fb      	ldrh	r3, [r7, #6]
 80008b4:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 80008b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80008b8:	68ba      	ldr	r2, [r7, #8]
 80008ba:	4413      	add	r3, r2
 80008bc:	8a79      	ldrh	r1, [r7, #18]
 80008be:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008c2:	9202      	str	r2, [sp, #8]
 80008c4:	8bfa      	ldrh	r2, [r7, #30]
 80008c6:	9201      	str	r2, [sp, #4]
 80008c8:	9300      	str	r3, [sp, #0]
 80008ca:	2310      	movs	r3, #16
 80008cc:	460a      	mov	r2, r1
 80008ce:	21a0      	movs	r1, #160	@ 0xa0
 80008d0:	4812      	ldr	r0, [pc, #72]	@ (800091c <EEPROM_Read+0xd8>)
 80008d2:	f009 fe79 	bl	800a5c8 <HAL_I2C_Mem_Read>
 80008d6:	4603      	mov	r3, r0
 80008d8:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 80008da:	7c7b      	ldrb	r3, [r7, #17]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d005      	beq.n	80008ec <EEPROM_Read+0xa8>
            lcd_print(2, 1, "Hata: EEPROM OKU");
 80008e0:	4a0f      	ldr	r2, [pc, #60]	@ (8000920 <EEPROM_Read+0xdc>)
 80008e2:	2101      	movs	r1, #1
 80008e4:	2002      	movs	r0, #2
 80008e6:	f007 ffc9 	bl	800887c <lcd_print>
            return;
 80008ea:	e013      	b.n	8000914 <EEPROM_Read+0xd0>
        }

        startPage += 1;
 80008ec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80008ee:	3301      	adds	r3, #1
 80008f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 80008f6:	88fa      	ldrh	r2, [r7, #6]
 80008f8:	8bfb      	ldrh	r3, [r7, #30]
 80008fa:	1ad3      	subs	r3, r2, r3
 80008fc:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 80008fe:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000900:	8bfb      	ldrh	r3, [r7, #30]
 8000902:	4413      	add	r3, r2
 8000904:	84bb      	strh	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < numofpages; i++) {
 8000906:	6a3b      	ldr	r3, [r7, #32]
 8000908:	3301      	adds	r3, #1
 800090a:	623b      	str	r3, [r7, #32]
 800090c:	8abb      	ldrh	r3, [r7, #20]
 800090e:	6a3a      	ldr	r2, [r7, #32]
 8000910:	429a      	cmp	r2, r3
 8000912:	dbbc      	blt.n	800088e <EEPROM_Read+0x4a>
    }
}
 8000914:	3728      	adds	r7, #40	@ 0x28
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200017f0 	.word	0x200017f0
 8000920:	0800cf58 	.word	0x0800cf58

08000924 <convertArrays>:

void convertArrays(int state) {
 8000924:	b480      	push	{r7}
 8000926:	b08b      	sub	sp, #44	@ 0x2c
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	2b01      	cmp	r3, #1
 8000930:	d11d      	bne.n	800096e <convertArrays+0x4a>
		int eepromVal = idStartPos;
 8000932:	4b34      	ldr	r3, [pc, #208]	@ (8000a04 <convertArrays+0xe0>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000938:	2300      	movs	r3, #0
 800093a:	623b      	str	r3, [r7, #32]
 800093c:	e013      	b.n	8000966 <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 800093e:	4a32      	ldr	r2, [pc, #200]	@ (8000a08 <convertArrays+0xe4>)
 8000940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000942:	4413      	add	r3, r2
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 8000948:	4a30      	ldr	r2, [pc, #192]	@ (8000a0c <convertArrays+0xe8>)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	4413      	add	r3, r2
 800094e:	7819      	ldrb	r1, [r3, #0]
 8000950:	4a2f      	ldr	r2, [pc, #188]	@ (8000a10 <convertArrays+0xec>)
 8000952:	6a3b      	ldr	r3, [r7, #32]
 8000954:	4413      	add	r3, r2
 8000956:	460a      	mov	r2, r1
 8000958:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 800095a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800095c:	3301      	adds	r3, #1
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000960:	6a3b      	ldr	r3, [r7, #32]
 8000962:	3301      	adds	r3, #1
 8000964:	623b      	str	r3, [r7, #32]
 8000966:	6a3b      	ldr	r3, [r7, #32]
 8000968:	2b0b      	cmp	r3, #11
 800096a:	dde8      	ble.n	800093e <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 800096c:	e045      	b.n	80009fa <convertArrays+0xd6>
	} else if(state == 2) {
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2b02      	cmp	r3, #2
 8000972:	d121      	bne.n	80009b8 <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 8000974:	4b27      	ldr	r3, [pc, #156]	@ (8000a14 <convertArrays+0xf0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800097a:	2300      	movs	r3, #0
 800097c:	61bb      	str	r3, [r7, #24]
 800097e:	e017      	b.n	80009b0 <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 8000980:	4a21      	ldr	r2, [pc, #132]	@ (8000a08 <convertArrays+0xe4>)
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	4413      	add	r3, r2
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d00e      	beq.n	80009aa <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 800098c:	4a1e      	ldr	r2, [pc, #120]	@ (8000a08 <convertArrays+0xe4>)
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	4413      	add	r3, r2
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	461a      	mov	r2, r3
 8000996:	4b20      	ldr	r3, [pc, #128]	@ (8000a18 <convertArrays+0xf4>)
 8000998:	5c99      	ldrb	r1, [r3, r2]
 800099a:	4a20      	ldr	r2, [pc, #128]	@ (8000a1c <convertArrays+0xf8>)
 800099c:	69bb      	ldr	r3, [r7, #24]
 800099e:	4413      	add	r3, r2
 80009a0:	460a      	mov	r2, r1
 80009a2:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 80009a4:	69fb      	ldr	r3, [r7, #28]
 80009a6:	3301      	adds	r3, #1
 80009a8:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	3301      	adds	r3, #1
 80009ae:	61bb      	str	r3, [r7, #24]
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	2b0f      	cmp	r3, #15
 80009b4:	dde4      	ble.n	8000980 <convertArrays+0x5c>
}
 80009b6:	e020      	b.n	80009fa <convertArrays+0xd6>
		int eepromVal = passStartPos;
 80009b8:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <convertArrays+0xfc>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	e017      	b.n	80009f4 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 80009c4:	4a10      	ldr	r2, [pc, #64]	@ (8000a08 <convertArrays+0xe4>)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	4413      	add	r3, r2
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d00e      	beq.n	80009ee <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 80009d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a08 <convertArrays+0xe4>)
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	4413      	add	r3, r2
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <convertArrays+0xf4>)
 80009dc:	5c99      	ldrb	r1, [r3, r2]
 80009de:	4a11      	ldr	r2, [pc, #68]	@ (8000a24 <convertArrays+0x100>)
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	4413      	add	r3, r2
 80009e4:	460a      	mov	r2, r1
 80009e6:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 80009e8:	697b      	ldr	r3, [r7, #20]
 80009ea:	3301      	adds	r3, #1
 80009ec:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	3301      	adds	r3, #1
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	693b      	ldr	r3, [r7, #16]
 80009f6:	2b0f      	cmp	r3, #15
 80009f8:	dde4      	ble.n	80009c4 <convertArrays+0xa0>
}
 80009fa:	bf00      	nop
 80009fc:	372c      	adds	r7, #44	@ 0x2c
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	20000000 	.word	0x20000000
 8000a08:	20000f9c 	.word	0x20000f9c
 8000a0c:	2000000c 	.word	0x2000000c
 8000a10:	20001014 	.word	0x20001014
 8000a14:	20000004 	.word	0x20000004
 8000a18:	20000018 	.word	0x20000018
 8000a1c:	20001020 	.word	0x20001020
 8000a20:	20000008 	.word	0x20000008
 8000a24:	20001030 	.word	0x20001030

08000a28 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b089      	sub	sp, #36	@ 0x24
 8000a2c:	af04      	add	r7, sp, #16
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000a32:	4b25      	ldr	r3, [pc, #148]	@ (8000ac8 <hata2EEPROM+0xa0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	1e5a      	subs	r2, r3, #1
 8000a38:	4b24      	ldr	r3, [pc, #144]	@ (8000acc <hata2EEPROM+0xa4>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	4a24      	ldr	r2, [pc, #144]	@ (8000ad0 <hata2EEPROM+0xa8>)
 8000a40:	5cd3      	ldrb	r3, [r2, r3]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d002      	beq.n	8000a4c <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000a46:	f000 f8d1 	bl	8000bec <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000a4a:	e000      	b.n	8000a4e <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000a4c:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	e012      	b.n	8000a7a <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000a54:	4b1d      	ldr	r3, [pc, #116]	@ (8000acc <hata2EEPROM+0xa4>)
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad0 <hata2EEPROM+0xa8>)
 8000a5e:	5cd3      	ldrb	r3, [r2, r3]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d107      	bne.n	8000a74 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000a64:	4b19      	ldr	r3, [pc, #100]	@ (8000acc <hata2EEPROM+0xa4>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	4918      	ldr	r1, [pc, #96]	@ (8000ad0 <hata2EEPROM+0xa8>)
 8000a6e:	79fa      	ldrb	r2, [r7, #7]
 8000a70:	54ca      	strb	r2, [r1, r3]
					break;
 8000a72:	e007      	b.n	8000a84 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	3301      	adds	r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <hata2EEPROM+0xa0>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	dbe7      	blt.n	8000a54 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000a84:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <hata2EEPROM+0xa4>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	b299      	uxth	r1, r3
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <hata2EEPROM+0xa0>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	b298      	uxth	r0, r3
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <hata2EEPROM+0xa4>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a0e      	ldr	r2, [pc, #56]	@ (8000ad0 <hata2EEPROM+0xa8>)
 8000a96:	4413      	add	r3, r2
 8000a98:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac8 <hata2EEPROM+0xa0>)
 8000a9a:	6812      	ldr	r2, [r2, #0]
 8000a9c:	b292      	uxth	r2, r2
 8000a9e:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 8000aa2:	9402      	str	r4, [sp, #8]
 8000aa4:	9201      	str	r2, [sp, #4]
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	460a      	mov	r2, r1
 8000aac:	21a0      	movs	r1, #160	@ 0xa0
 8000aae:	4809      	ldr	r0, [pc, #36]	@ (8000ad4 <hata2EEPROM+0xac>)
 8000ab0:	f009 fc90 	bl	800a3d4 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000ab4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ab8:	f008 fc02 	bl	80092c0 <HAL_Delay>
	eepromKontrol();
 8000abc:	f7ff fbba 	bl	8000234 <eepromKontrol>
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd90      	pop	{r4, r7, pc}
 8000ac8:	20000094 	.word	0x20000094
 8000acc:	20000098 	.word	0x20000098
 8000ad0:	20000f9c 	.word	0x20000f9c
 8000ad4:	200017f0 	.word	0x200017f0

08000ad8 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d10f      	bne.n	8000b08 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000ae8:	4a38      	ldr	r2, [pc, #224]	@ (8000bcc <hataKoduLcdGoster+0xf4>)
 8000aea:	2101      	movs	r1, #1
 8000aec:	2001      	movs	r0, #1
 8000aee:	f007 fec5 	bl	800887c <lcd_print>
		lcd_print(2, 1, "1");
 8000af2:	4a37      	ldr	r2, [pc, #220]	@ (8000bd0 <hataKoduLcdGoster+0xf8>)
 8000af4:	2101      	movs	r1, #1
 8000af6:	2002      	movs	r0, #2
 8000af8:	f007 fec0 	bl	800887c <lcd_print>
		lcd_print(2, 7, "          ");
 8000afc:	4a35      	ldr	r2, [pc, #212]	@ (8000bd4 <hataKoduLcdGoster+0xfc>)
 8000afe:	2107      	movs	r1, #7
 8000b00:	2002      	movs	r0, #2
 8000b02:	f007 febb 	bl	800887c <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000b06:	e05d      	b.n	8000bc4 <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d10f      	bne.n	8000b2e <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 8000b0e:	4a2f      	ldr	r2, [pc, #188]	@ (8000bcc <hataKoduLcdGoster+0xf4>)
 8000b10:	2101      	movs	r1, #1
 8000b12:	2001      	movs	r0, #1
 8000b14:	f007 feb2 	bl	800887c <lcd_print>
		lcd_print(2, 2, "2");
 8000b18:	4a2f      	ldr	r2, [pc, #188]	@ (8000bd8 <hataKoduLcdGoster+0x100>)
 8000b1a:	2102      	movs	r1, #2
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	f007 fead 	bl	800887c <lcd_print>
		lcd_print(2, 7, "          ");
 8000b22:	4a2c      	ldr	r2, [pc, #176]	@ (8000bd4 <hataKoduLcdGoster+0xfc>)
 8000b24:	2107      	movs	r1, #7
 8000b26:	2002      	movs	r0, #2
 8000b28:	f007 fea8 	bl	800887c <lcd_print>
}
 8000b2c:	e04a      	b.n	8000bc4 <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b03      	cmp	r3, #3
 8000b32:	d10f      	bne.n	8000b54 <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000b34:	4a25      	ldr	r2, [pc, #148]	@ (8000bcc <hataKoduLcdGoster+0xf4>)
 8000b36:	2101      	movs	r1, #1
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f007 fe9f 	bl	800887c <lcd_print>
		lcd_print(2, 3, "3");
 8000b3e:	4a27      	ldr	r2, [pc, #156]	@ (8000bdc <hataKoduLcdGoster+0x104>)
 8000b40:	2103      	movs	r1, #3
 8000b42:	2002      	movs	r0, #2
 8000b44:	f007 fe9a 	bl	800887c <lcd_print>
		lcd_print(2, 7, "          ");
 8000b48:	4a22      	ldr	r2, [pc, #136]	@ (8000bd4 <hataKoduLcdGoster+0xfc>)
 8000b4a:	2107      	movs	r1, #7
 8000b4c:	2002      	movs	r0, #2
 8000b4e:	f007 fe95 	bl	800887c <lcd_print>
}
 8000b52:	e037      	b.n	8000bc4 <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	d10f      	bne.n	8000b7a <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8000b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000bcc <hataKoduLcdGoster+0xf4>)
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f007 fe8c 	bl	800887c <lcd_print>
		lcd_print(2, 4, "4");
 8000b64:	4a1e      	ldr	r2, [pc, #120]	@ (8000be0 <hataKoduLcdGoster+0x108>)
 8000b66:	2104      	movs	r1, #4
 8000b68:	2002      	movs	r0, #2
 8000b6a:	f007 fe87 	bl	800887c <lcd_print>
		lcd_print(2, 7, "          ");
 8000b6e:	4a19      	ldr	r2, [pc, #100]	@ (8000bd4 <hataKoduLcdGoster+0xfc>)
 8000b70:	2107      	movs	r1, #7
 8000b72:	2002      	movs	r0, #2
 8000b74:	f007 fe82 	bl	800887c <lcd_print>
}
 8000b78:	e024      	b.n	8000bc4 <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2b05      	cmp	r3, #5
 8000b7e:	d10f      	bne.n	8000ba0 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8000b80:	4a12      	ldr	r2, [pc, #72]	@ (8000bcc <hataKoduLcdGoster+0xf4>)
 8000b82:	2101      	movs	r1, #1
 8000b84:	2001      	movs	r0, #1
 8000b86:	f007 fe79 	bl	800887c <lcd_print>
		lcd_print(2, 5, "5");
 8000b8a:	4a16      	ldr	r2, [pc, #88]	@ (8000be4 <hataKoduLcdGoster+0x10c>)
 8000b8c:	2105      	movs	r1, #5
 8000b8e:	2002      	movs	r0, #2
 8000b90:	f007 fe74 	bl	800887c <lcd_print>
		lcd_print(2, 7, "          ");
 8000b94:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd4 <hataKoduLcdGoster+0xfc>)
 8000b96:	2107      	movs	r1, #7
 8000b98:	2002      	movs	r0, #2
 8000b9a:	f007 fe6f 	bl	800887c <lcd_print>
}
 8000b9e:	e011      	b.n	8000bc4 <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d10e      	bne.n	8000bc4 <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 8000ba6:	4a09      	ldr	r2, [pc, #36]	@ (8000bcc <hataKoduLcdGoster+0xf4>)
 8000ba8:	2101      	movs	r1, #1
 8000baa:	2001      	movs	r0, #1
 8000bac:	f007 fe66 	bl	800887c <lcd_print>
		lcd_print(2, 6, "6");
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000be8 <hataKoduLcdGoster+0x110>)
 8000bb2:	2106      	movs	r1, #6
 8000bb4:	2002      	movs	r0, #2
 8000bb6:	f007 fe61 	bl	800887c <lcd_print>
		lcd_print(2, 7, "          ");
 8000bba:	4a06      	ldr	r2, [pc, #24]	@ (8000bd4 <hataKoduLcdGoster+0xfc>)
 8000bbc:	2107      	movs	r1, #7
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	f007 fe5c 	bl	800887c <lcd_print>
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20001764 	.word	0x20001764
 8000bd0:	0800cf6c 	.word	0x0800cf6c
 8000bd4:	0800cf70 	.word	0x0800cf70
 8000bd8:	0800cf7c 	.word	0x0800cf7c
 8000bdc:	0800cf80 	.word	0x0800cf80
 8000be0:	0800cf84 	.word	0x0800cf84
 8000be4:	0800cf88 	.word	0x0800cf88
 8000be8:	0800cf8c 	.word	0x0800cf8c

08000bec <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	e009      	b.n	8000c0c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <eepromDataFillWithEmpty+0x38>)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c00:	4a09      	ldr	r2, [pc, #36]	@ (8000c28 <eepromDataFillWithEmpty+0x3c>)
 8000c02:	2100      	movs	r1, #0
 8000c04:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <eepromDataFillWithEmpty+0x40>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	429a      	cmp	r2, r3
 8000c14:	dbf0      	blt.n	8000bf8 <eepromDataFillWithEmpty+0xc>
	}
}
 8000c16:	bf00      	nop
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bc80      	pop	{r7}
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	2000006c 	.word	0x2000006c
 8000c28:	20000f9c 	.word	0x20000f9c
 8000c2c:	20000094 	.word	0x20000094

08000c30 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000c36:	463b      	mov	r3, r7
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000c42:	4b50      	ldr	r3, [pc, #320]	@ (8000d84 <i2cTest+0x154>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b4e      	ldr	r3, [pc, #312]	@ (8000d84 <i2cTest+0x154>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f022 0201 	bic.w	r2, r2, #1
 8000c50:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000c52:	484c      	ldr	r0, [pc, #304]	@ (8000d84 <i2cTest+0x154>)
 8000c54:	f009 fa90 	bl	800a178 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c58:	23c0      	movs	r3, #192	@ 0xc0
 8000c5a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000c5c:	2311      	movs	r3, #17
 8000c5e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000c68:	463b      	mov	r3, r7
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4846      	ldr	r0, [pc, #280]	@ (8000d88 <i2cTest+0x158>)
 8000c6e:	f008 fe97 	bl	80099a0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	2140      	movs	r1, #64	@ 0x40
 8000c76:	4844      	ldr	r0, [pc, #272]	@ (8000d88 <i2cTest+0x158>)
 8000c78:	f009 f909 	bl	8009e8e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2180      	movs	r1, #128	@ 0x80
 8000c80:	4841      	ldr	r0, [pc, #260]	@ (8000d88 <i2cTest+0x158>)
 8000c82:	f009 f904 	bl	8009e8e <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000c86:	200a      	movs	r0, #10
 8000c88:	f008 fb1a 	bl	80092c0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000c8c:	bf00      	nop
 8000c8e:	2140      	movs	r1, #64	@ 0x40
 8000c90:	483d      	ldr	r0, [pc, #244]	@ (8000d88 <i2cTest+0x158>)
 8000c92:	f009 f8e5 	bl	8009e60 <HAL_GPIO_ReadPin>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d006      	beq.n	8000caa <i2cTest+0x7a>
 8000c9c:	2180      	movs	r1, #128	@ 0x80
 8000c9e:	483a      	ldr	r0, [pc, #232]	@ (8000d88 <i2cTest+0x158>)
 8000ca0:	f009 f8de 	bl	8009e60 <HAL_GPIO_ReadPin>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d1f1      	bne.n	8000c8e <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2180      	movs	r1, #128	@ 0x80
 8000cae:	4836      	ldr	r0, [pc, #216]	@ (8000d88 <i2cTest+0x158>)
 8000cb0:	f009 f8ed 	bl	8009e8e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000cb4:	200a      	movs	r0, #10
 8000cb6:	f008 fb03 	bl	80092c0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000cba:	bf00      	nop
 8000cbc:	2180      	movs	r1, #128	@ 0x80
 8000cbe:	4832      	ldr	r0, [pc, #200]	@ (8000d88 <i2cTest+0x158>)
 8000cc0:	f009 f8ce 	bl	8009e60 <HAL_GPIO_ReadPin>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d0f8      	beq.n	8000cbc <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2140      	movs	r1, #64	@ 0x40
 8000cce:	482e      	ldr	r0, [pc, #184]	@ (8000d88 <i2cTest+0x158>)
 8000cd0:	f009 f8dd 	bl	8009e8e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000cd4:	200a      	movs	r0, #10
 8000cd6:	f008 faf3 	bl	80092c0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000cda:	bf00      	nop
 8000cdc:	2140      	movs	r1, #64	@ 0x40
 8000cde:	482a      	ldr	r0, [pc, #168]	@ (8000d88 <i2cTest+0x158>)
 8000ce0:	f009 f8be 	bl	8009e60 <HAL_GPIO_ReadPin>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d0f8      	beq.n	8000cdc <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	2140      	movs	r1, #64	@ 0x40
 8000cee:	4826      	ldr	r0, [pc, #152]	@ (8000d88 <i2cTest+0x158>)
 8000cf0:	f009 f8cd 	bl	8009e8e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000cf4:	200a      	movs	r0, #10
 8000cf6:	f008 fae3 	bl	80092c0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000cfa:	bf00      	nop
 8000cfc:	2140      	movs	r1, #64	@ 0x40
 8000cfe:	4822      	ldr	r0, [pc, #136]	@ (8000d88 <i2cTest+0x158>)
 8000d00:	f009 f8ae 	bl	8009e60 <HAL_GPIO_ReadPin>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d1f8      	bne.n	8000cfc <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	2180      	movs	r1, #128	@ 0x80
 8000d0e:	481e      	ldr	r0, [pc, #120]	@ (8000d88 <i2cTest+0x158>)
 8000d10:	f009 f8bd 	bl	8009e8e <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000d14:	200a      	movs	r0, #10
 8000d16:	f008 fad3 	bl	80092c0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000d1a:	bf00      	nop
 8000d1c:	2180      	movs	r1, #128	@ 0x80
 8000d1e:	481a      	ldr	r0, [pc, #104]	@ (8000d88 <i2cTest+0x158>)
 8000d20:	f009 f89e 	bl	8009e60 <HAL_GPIO_ReadPin>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d1f8      	bne.n	8000d1c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d2a:	23c0      	movs	r3, #192	@ 0xc0
 8000d2c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000d2e:	2312      	movs	r3, #18
 8000d30:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4812      	ldr	r0, [pc, #72]	@ (8000d88 <i2cTest+0x158>)
 8000d40:	f008 fe2e 	bl	80099a0 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <i2cTest+0x154>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d84 <i2cTest+0x154>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000d52:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000d54:	4b0b      	ldr	r3, [pc, #44]	@ (8000d84 <i2cTest+0x154>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d84 <i2cTest+0x154>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000d62:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000d64:	4b07      	ldr	r3, [pc, #28]	@ (8000d84 <i2cTest+0x154>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <i2cTest+0x154>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f042 0201 	orr.w	r2, r2, #1
 8000d72:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000d74:	4803      	ldr	r0, [pc, #12]	@ (8000d84 <i2cTest+0x154>)
 8000d76:	f009 f8bb 	bl	8009ef0 <HAL_I2C_Init>
}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200017f0 	.word	0x200017f0
 8000d88:	40010c00 	.word	0x40010c00

08000d8c <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000d96:	20c8      	movs	r0, #200	@ 0xc8
 8000d98:	f008 fa92 	bl	80092c0 <HAL_Delay>
	lcd_clear();
 8000d9c:	f007 fd9a 	bl	80088d4 <lcd_clear>
	if(type == 1 && page == 0) {
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d13e      	bne.n	8000e24 <printTemplate+0x98>
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d13b      	bne.n	8000e24 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8000dac:	4a9a      	ldr	r2, [pc, #616]	@ (8001018 <printTemplate+0x28c>)
 8000dae:	2101      	movs	r1, #1
 8000db0:	2001      	movs	r0, #1
 8000db2:	f007 fd63 	bl	800887c <lcd_print>
		lcd_print(2, 3, "0");
 8000db6:	4a99      	ldr	r2, [pc, #612]	@ (800101c <printTemplate+0x290>)
 8000db8:	2103      	movs	r1, #3
 8000dba:	2002      	movs	r0, #2
 8000dbc:	f007 fd5e 	bl	800887c <lcd_print>
		lcd_print(2, 4, "1");
 8000dc0:	4a97      	ldr	r2, [pc, #604]	@ (8001020 <printTemplate+0x294>)
 8000dc2:	2104      	movs	r1, #4
 8000dc4:	2002      	movs	r0, #2
 8000dc6:	f007 fd59 	bl	800887c <lcd_print>
		lcd_print(2, 5, "2");
 8000dca:	4a96      	ldr	r2, [pc, #600]	@ (8001024 <printTemplate+0x298>)
 8000dcc:	2105      	movs	r1, #5
 8000dce:	2002      	movs	r0, #2
 8000dd0:	f007 fd54 	bl	800887c <lcd_print>
		lcd_print(2, 6, "3");
 8000dd4:	4a94      	ldr	r2, [pc, #592]	@ (8001028 <printTemplate+0x29c>)
 8000dd6:	2106      	movs	r1, #6
 8000dd8:	2002      	movs	r0, #2
 8000dda:	f007 fd4f 	bl	800887c <lcd_print>
		lcd_print(2, 7, "4");
 8000dde:	4a93      	ldr	r2, [pc, #588]	@ (800102c <printTemplate+0x2a0>)
 8000de0:	2107      	movs	r1, #7
 8000de2:	2002      	movs	r0, #2
 8000de4:	f007 fd4a 	bl	800887c <lcd_print>
		lcd_print(2, 10, "5");
 8000de8:	4a91      	ldr	r2, [pc, #580]	@ (8001030 <printTemplate+0x2a4>)
 8000dea:	210a      	movs	r1, #10
 8000dec:	2002      	movs	r0, #2
 8000dee:	f007 fd45 	bl	800887c <lcd_print>
		lcd_print(2, 11, "6");
 8000df2:	4a90      	ldr	r2, [pc, #576]	@ (8001034 <printTemplate+0x2a8>)
 8000df4:	210b      	movs	r1, #11
 8000df6:	2002      	movs	r0, #2
 8000df8:	f007 fd40 	bl	800887c <lcd_print>
		lcd_print(2, 12, "7");
 8000dfc:	4a8e      	ldr	r2, [pc, #568]	@ (8001038 <printTemplate+0x2ac>)
 8000dfe:	210c      	movs	r1, #12
 8000e00:	2002      	movs	r0, #2
 8000e02:	f007 fd3b 	bl	800887c <lcd_print>
		lcd_print(2, 13, "8");
 8000e06:	4a8d      	ldr	r2, [pc, #564]	@ (800103c <printTemplate+0x2b0>)
 8000e08:	210d      	movs	r1, #13
 8000e0a:	2002      	movs	r0, #2
 8000e0c:	f007 fd36 	bl	800887c <lcd_print>
		lcd_print(2, 14, "9");
 8000e10:	4a8b      	ldr	r2, [pc, #556]	@ (8001040 <printTemplate+0x2b4>)
 8000e12:	210e      	movs	r1, #14
 8000e14:	2002      	movs	r0, #2
 8000e16:	f007 fd31 	bl	800887c <lcd_print>
		lcd_gotoxy(2, 3);
 8000e1a:	2103      	movs	r1, #3
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f007 fd0e 	bl	800883e <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 8000e22:	e0f5      	b.n	8001010 <printTemplate+0x284>
	} else if(type == 2) {
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d178      	bne.n	8000f1c <printTemplate+0x190>
		if(page == 1) {
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d114      	bne.n	8000e5a <printTemplate+0xce>
			lcd_clear();
 8000e30:	f007 fd50 	bl	80088d4 <lcd_clear>
			HAL_Delay(100);
 8000e34:	2064      	movs	r0, #100	@ 0x64
 8000e36:	f008 fa43 	bl	80092c0 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000e3a:	4a82      	ldr	r2, [pc, #520]	@ (8001044 <printTemplate+0x2b8>)
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f007 fd1c 	bl	800887c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e44:	4a80      	ldr	r2, [pc, #512]	@ (8001048 <printTemplate+0x2bc>)
 8000e46:	2107      	movs	r1, #7
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f007 fd17 	bl	800887c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000e4e:	4a7f      	ldr	r2, [pc, #508]	@ (800104c <printTemplate+0x2c0>)
 8000e50:	2101      	movs	r1, #1
 8000e52:	2002      	movs	r0, #2
 8000e54:	f007 fd12 	bl	800887c <lcd_print>
}
 8000e58:	e0da      	b.n	8001010 <printTemplate+0x284>
		} else if(page == 2) {
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d114      	bne.n	8000e8a <printTemplate+0xfe>
			lcd_clear();
 8000e60:	f007 fd38 	bl	80088d4 <lcd_clear>
			HAL_Delay(100);
 8000e64:	2064      	movs	r0, #100	@ 0x64
 8000e66:	f008 fa2b 	bl	80092c0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e6a:	4a79      	ldr	r2, [pc, #484]	@ (8001050 <printTemplate+0x2c4>)
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f007 fd04 	bl	800887c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000e74:	4a74      	ldr	r2, [pc, #464]	@ (8001048 <printTemplate+0x2bc>)
 8000e76:	2107      	movs	r1, #7
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f007 fcff 	bl	800887c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000e7e:	4a75      	ldr	r2, [pc, #468]	@ (8001054 <printTemplate+0x2c8>)
 8000e80:	2101      	movs	r1, #1
 8000e82:	2002      	movs	r0, #2
 8000e84:	f007 fcfa 	bl	800887c <lcd_print>
}
 8000e88:	e0c2      	b.n	8001010 <printTemplate+0x284>
		} else if(page == 3) {
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	d114      	bne.n	8000eba <printTemplate+0x12e>
			lcd_clear();
 8000e90:	f007 fd20 	bl	80088d4 <lcd_clear>
			HAL_Delay(100);
 8000e94:	2064      	movs	r0, #100	@ 0x64
 8000e96:	f008 fa13 	bl	80092c0 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000e9a:	4a6a      	ldr	r2, [pc, #424]	@ (8001044 <printTemplate+0x2b8>)
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	f007 fcec 	bl	800887c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000ea4:	4a68      	ldr	r2, [pc, #416]	@ (8001048 <printTemplate+0x2bc>)
 8000ea6:	2107      	movs	r1, #7
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f007 fce7 	bl	800887c <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000eae:	4a6a      	ldr	r2, [pc, #424]	@ (8001058 <printTemplate+0x2cc>)
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	2002      	movs	r0, #2
 8000eb4:	f007 fce2 	bl	800887c <lcd_print>
}
 8000eb8:	e0aa      	b.n	8001010 <printTemplate+0x284>
		} else if(page == 4) {
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	d114      	bne.n	8000eea <printTemplate+0x15e>
			lcd_clear();
 8000ec0:	f007 fd08 	bl	80088d4 <lcd_clear>
			HAL_Delay(100);
 8000ec4:	2064      	movs	r0, #100	@ 0x64
 8000ec6:	f008 f9fb 	bl	80092c0 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000eca:	4a5e      	ldr	r2, [pc, #376]	@ (8001044 <printTemplate+0x2b8>)
 8000ecc:	2101      	movs	r1, #1
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f007 fcd4 	bl	800887c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000ed4:	4a5c      	ldr	r2, [pc, #368]	@ (8001048 <printTemplate+0x2bc>)
 8000ed6:	2107      	movs	r1, #7
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f007 fccf 	bl	800887c <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000ede:	4a5f      	ldr	r2, [pc, #380]	@ (800105c <printTemplate+0x2d0>)
 8000ee0:	2101      	movs	r1, #1
 8000ee2:	2002      	movs	r0, #2
 8000ee4:	f007 fcca 	bl	800887c <lcd_print>
}
 8000ee8:	e092      	b.n	8001010 <printTemplate+0x284>
		} else if(page == 5) {
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	2b05      	cmp	r3, #5
 8000eee:	f040 808f 	bne.w	8001010 <printTemplate+0x284>
			lcd_clear();
 8000ef2:	f007 fcef 	bl	80088d4 <lcd_clear>
			HAL_Delay(100);
 8000ef6:	2064      	movs	r0, #100	@ 0x64
 8000ef8:	f008 f9e2 	bl	80092c0 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8000efc:	4a51      	ldr	r2, [pc, #324]	@ (8001044 <printTemplate+0x2b8>)
 8000efe:	2101      	movs	r1, #1
 8000f00:	2001      	movs	r0, #1
 8000f02:	f007 fcbb 	bl	800887c <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000f06:	4a50      	ldr	r2, [pc, #320]	@ (8001048 <printTemplate+0x2bc>)
 8000f08:	2107      	movs	r1, #7
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f007 fcb6 	bl	800887c <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000f10:	4a53      	ldr	r2, [pc, #332]	@ (8001060 <printTemplate+0x2d4>)
 8000f12:	2101      	movs	r1, #1
 8000f14:	2002      	movs	r0, #2
 8000f16:	f007 fcb1 	bl	800887c <lcd_print>
}
 8000f1a:	e079      	b.n	8001010 <printTemplate+0x284>
	} else if(type == 3) {
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d176      	bne.n	8001010 <printTemplate+0x284>
		if(page == 1) {
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d114      	bne.n	8000f52 <printTemplate+0x1c6>
			lcd_clear();
 8000f28:	f007 fcd4 	bl	80088d4 <lcd_clear>
			HAL_Delay(100);
 8000f2c:	2064      	movs	r0, #100	@ 0x64
 8000f2e:	f008 f9c7 	bl	80092c0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000f32:	4a4c      	ldr	r2, [pc, #304]	@ (8001064 <printTemplate+0x2d8>)
 8000f34:	2101      	movs	r1, #1
 8000f36:	2001      	movs	r0, #1
 8000f38:	f007 fca0 	bl	800887c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f3c:	4a4a      	ldr	r2, [pc, #296]	@ (8001068 <printTemplate+0x2dc>)
 8000f3e:	2107      	movs	r1, #7
 8000f40:	2001      	movs	r0, #1
 8000f42:	f007 fc9b 	bl	800887c <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000f46:	4a41      	ldr	r2, [pc, #260]	@ (800104c <printTemplate+0x2c0>)
 8000f48:	2101      	movs	r1, #1
 8000f4a:	2002      	movs	r0, #2
 8000f4c:	f007 fc96 	bl	800887c <lcd_print>
}
 8000f50:	e05e      	b.n	8001010 <printTemplate+0x284>
		} else if(page == 2) {
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d114      	bne.n	8000f82 <printTemplate+0x1f6>
			lcd_clear();
 8000f58:	f007 fcbc 	bl	80088d4 <lcd_clear>
			HAL_Delay(100);
 8000f5c:	2064      	movs	r0, #100	@ 0x64
 8000f5e:	f008 f9af 	bl	80092c0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000f62:	4a40      	ldr	r2, [pc, #256]	@ (8001064 <printTemplate+0x2d8>)
 8000f64:	2101      	movs	r1, #1
 8000f66:	2001      	movs	r0, #1
 8000f68:	f007 fc88 	bl	800887c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f6c:	4a3e      	ldr	r2, [pc, #248]	@ (8001068 <printTemplate+0x2dc>)
 8000f6e:	2107      	movs	r1, #7
 8000f70:	2001      	movs	r0, #1
 8000f72:	f007 fc83 	bl	800887c <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000f76:	4a37      	ldr	r2, [pc, #220]	@ (8001054 <printTemplate+0x2c8>)
 8000f78:	2101      	movs	r1, #1
 8000f7a:	2002      	movs	r0, #2
 8000f7c:	f007 fc7e 	bl	800887c <lcd_print>
}
 8000f80:	e046      	b.n	8001010 <printTemplate+0x284>
		} else if(page == 3) {
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d114      	bne.n	8000fb2 <printTemplate+0x226>
			lcd_clear();
 8000f88:	f007 fca4 	bl	80088d4 <lcd_clear>
			HAL_Delay(100);
 8000f8c:	2064      	movs	r0, #100	@ 0x64
 8000f8e:	f008 f997 	bl	80092c0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000f92:	4a34      	ldr	r2, [pc, #208]	@ (8001064 <printTemplate+0x2d8>)
 8000f94:	2101      	movs	r1, #1
 8000f96:	2001      	movs	r0, #1
 8000f98:	f007 fc70 	bl	800887c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000f9c:	4a32      	ldr	r2, [pc, #200]	@ (8001068 <printTemplate+0x2dc>)
 8000f9e:	2107      	movs	r1, #7
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	f007 fc6b 	bl	800887c <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000fa6:	4a2c      	ldr	r2, [pc, #176]	@ (8001058 <printTemplate+0x2cc>)
 8000fa8:	2101      	movs	r1, #1
 8000faa:	2002      	movs	r0, #2
 8000fac:	f007 fc66 	bl	800887c <lcd_print>
}
 8000fb0:	e02e      	b.n	8001010 <printTemplate+0x284>
		} else if(page == 4) {
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	2b04      	cmp	r3, #4
 8000fb6:	d114      	bne.n	8000fe2 <printTemplate+0x256>
			lcd_clear();
 8000fb8:	f007 fc8c 	bl	80088d4 <lcd_clear>
			HAL_Delay(100);
 8000fbc:	2064      	movs	r0, #100	@ 0x64
 8000fbe:	f008 f97f 	bl	80092c0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000fc2:	4a28      	ldr	r2, [pc, #160]	@ (8001064 <printTemplate+0x2d8>)
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f007 fc58 	bl	800887c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000fcc:	4a26      	ldr	r2, [pc, #152]	@ (8001068 <printTemplate+0x2dc>)
 8000fce:	2107      	movs	r1, #7
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f007 fc53 	bl	800887c <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000fd6:	4a21      	ldr	r2, [pc, #132]	@ (800105c <printTemplate+0x2d0>)
 8000fd8:	2101      	movs	r1, #1
 8000fda:	2002      	movs	r0, #2
 8000fdc:	f007 fc4e 	bl	800887c <lcd_print>
}
 8000fe0:	e016      	b.n	8001010 <printTemplate+0x284>
		} else if(page == 5) {
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	2b05      	cmp	r3, #5
 8000fe6:	d113      	bne.n	8001010 <printTemplate+0x284>
			lcd_clear();
 8000fe8:	f007 fc74 	bl	80088d4 <lcd_clear>
			HAL_Delay(100);
 8000fec:	2064      	movs	r0, #100	@ 0x64
 8000fee:	f008 f967 	bl	80092c0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8000ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8001064 <printTemplate+0x2d8>)
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f007 fc40 	bl	800887c <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8001068 <printTemplate+0x2dc>)
 8000ffe:	2107      	movs	r1, #7
 8001000:	2001      	movs	r0, #1
 8001002:	f007 fc3b 	bl	800887c <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8001006:	4a16      	ldr	r2, [pc, #88]	@ (8001060 <printTemplate+0x2d4>)
 8001008:	2101      	movs	r1, #1
 800100a:	2002      	movs	r0, #2
 800100c:	f007 fc36 	bl	800887c <lcd_print>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	0800cf90 	.word	0x0800cf90
 800101c:	0800cf98 	.word	0x0800cf98
 8001020:	0800cf9c 	.word	0x0800cf9c
 8001024:	0800cfa0 	.word	0x0800cfa0
 8001028:	0800cfa4 	.word	0x0800cfa4
 800102c:	0800cfa8 	.word	0x0800cfa8
 8001030:	0800cfac 	.word	0x0800cfac
 8001034:	0800cfb0 	.word	0x0800cfb0
 8001038:	0800cfb4 	.word	0x0800cfb4
 800103c:	0800cfb8 	.word	0x0800cfb8
 8001040:	0800cfbc 	.word	0x0800cfbc
 8001044:	0800cfc0 	.word	0x0800cfc0
 8001048:	20001020 	.word	0x20001020
 800104c:	0800cfd4 	.word	0x0800cfd4
 8001050:	0800cfe8 	.word	0x0800cfe8
 8001054:	0800cff0 	.word	0x0800cff0
 8001058:	0800d004 	.word	0x0800d004
 800105c:	0800d018 	.word	0x0800d018
 8001060:	0800d02c 	.word	0x0800d02c
 8001064:	0800d040 	.word	0x0800d040
 8001068:	20001030 	.word	0x20001030

0800106c <printCredentials>:
			}
		}
	}
}

void printCredentials(int type) {
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d10a      	bne.n	8001090 <printCredentials+0x24>
		//machine id yazdır
		lcd_print(2, 1, machineID);
 800107a:	4a18      	ldr	r2, [pc, #96]	@ (80010dc <printCredentials+0x70>)
 800107c:	2101      	movs	r1, #1
 800107e:	2002      	movs	r0, #2
 8001080:	f007 fbfc 	bl	800887c <lcd_print>
		lcd_print(2, 13, "    ");
 8001084:	4a16      	ldr	r2, [pc, #88]	@ (80010e0 <printCredentials+0x74>)
 8001086:	210d      	movs	r1, #13
 8001088:	2002      	movs	r0, #2
 800108a:	f007 fbf7 	bl	800887c <lcd_print>
		lcd_print(1, 1, "WIFI PASS       ");

		lcd_print(2, 1, "                ");
		lcd_print(2, 1, wifiPass);
	}
}
 800108e:	e021      	b.n	80010d4 <printCredentials+0x68>
	} else if(type == 2) {
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b02      	cmp	r3, #2
 8001094:	d10f      	bne.n	80010b6 <printCredentials+0x4a>
		lcd_print(1, 1, "WIFI SSID       ");
 8001096:	4a13      	ldr	r2, [pc, #76]	@ (80010e4 <printCredentials+0x78>)
 8001098:	2101      	movs	r1, #1
 800109a:	2001      	movs	r0, #1
 800109c:	f007 fbee 	bl	800887c <lcd_print>
		lcd_print(2, 1, "                ");
 80010a0:	4a11      	ldr	r2, [pc, #68]	@ (80010e8 <printCredentials+0x7c>)
 80010a2:	2101      	movs	r1, #1
 80010a4:	2002      	movs	r0, #2
 80010a6:	f007 fbe9 	bl	800887c <lcd_print>
		lcd_print(2, 1, wifiSSID);
 80010aa:	4a10      	ldr	r2, [pc, #64]	@ (80010ec <printCredentials+0x80>)
 80010ac:	2101      	movs	r1, #1
 80010ae:	2002      	movs	r0, #2
 80010b0:	f007 fbe4 	bl	800887c <lcd_print>
}
 80010b4:	e00e      	b.n	80010d4 <printCredentials+0x68>
		lcd_print(1, 1, "WIFI PASS       ");
 80010b6:	4a0e      	ldr	r2, [pc, #56]	@ (80010f0 <printCredentials+0x84>)
 80010b8:	2101      	movs	r1, #1
 80010ba:	2001      	movs	r0, #1
 80010bc:	f007 fbde 	bl	800887c <lcd_print>
		lcd_print(2, 1, "                ");
 80010c0:	4a09      	ldr	r2, [pc, #36]	@ (80010e8 <printCredentials+0x7c>)
 80010c2:	2101      	movs	r1, #1
 80010c4:	2002      	movs	r0, #2
 80010c6:	f007 fbd9 	bl	800887c <lcd_print>
		lcd_print(2, 1, wifiPass);
 80010ca:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <printCredentials+0x88>)
 80010cc:	2101      	movs	r1, #1
 80010ce:	2002      	movs	r0, #2
 80010d0:	f007 fbd4 	bl	800887c <lcd_print>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20001014 	.word	0x20001014
 80010e0:	0800d054 	.word	0x0800d054
 80010e4:	0800d05c 	.word	0x0800d05c
 80010e8:	0800d070 	.word	0x0800d070
 80010ec:	20001020 	.word	0x20001020
 80010f0:	0800d084 	.word	0x0800d084
 80010f4:	20001030 	.word	0x20001030

080010f8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80010fc:	f3bf 8f4f 	dsb	sy
}
 8001100:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001102:	4b06      	ldr	r3, [pc, #24]	@ (800111c <__NVIC_SystemReset+0x24>)
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800110a:	4904      	ldr	r1, [pc, #16]	@ (800111c <__NVIC_SystemReset+0x24>)
 800110c:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <__NVIC_SystemReset+0x28>)
 800110e:	4313      	orrs	r3, r2
 8001110:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001112:	f3bf 8f4f 	dsb	sy
}
 8001116:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <__NVIC_SystemReset+0x20>
 800111c:	e000ed00 	.word	0xe000ed00
 8001120:	05fa0004 	.word	0x05fa0004

08001124 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800112a:	2101      	movs	r1, #1
 800112c:	488e      	ldr	r0, [pc, #568]	@ (8001368 <menu+0x244>)
 800112e:	f008 fe97 	bl	8009e60 <HAL_GPIO_ReadPin>
 8001132:	4603      	mov	r3, r0
 8001134:	2b01      	cmp	r3, #1
 8001136:	f040 8099 	bne.w	800126c <menu+0x148>
 800113a:	4b8c      	ldr	r3, [pc, #560]	@ (800136c <menu+0x248>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	f083 0301 	eor.w	r3, r3, #1
 8001142:	b2db      	uxtb	r3, r3
 8001144:	2b00      	cmp	r3, #0
 8001146:	f000 8091 	beq.w	800126c <menu+0x148>
		menuSayac = menuSayac+1;
 800114a:	4b89      	ldr	r3, [pc, #548]	@ (8001370 <menu+0x24c>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4b87      	ldr	r3, [pc, #540]	@ (8001370 <menu+0x24c>)
 8001154:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001156:	4b86      	ldr	r3, [pc, #536]	@ (8001370 <menu+0x24c>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	2b24      	cmp	r3, #36	@ 0x24
 800115c:	d102      	bne.n	8001164 <menu+0x40>
			menuSayac = 1;
 800115e:	4b84      	ldr	r3, [pc, #528]	@ (8001370 <menu+0x24c>)
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001164:	4b82      	ldr	r3, [pc, #520]	@ (8001370 <menu+0x24c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	2b12      	cmp	r3, #18
 800116a:	d106      	bne.n	800117a <menu+0x56>
 800116c:	4b81      	ldr	r3, [pc, #516]	@ (8001374 <menu+0x250>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d102      	bne.n	800117a <menu+0x56>
			menuSayac = 21;
 8001174:	4b7e      	ldr	r3, [pc, #504]	@ (8001370 <menu+0x24c>)
 8001176:	2215      	movs	r2, #21
 8001178:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 800117a:	4b7d      	ldr	r3, [pc, #500]	@ (8001370 <menu+0x24c>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b08      	cmp	r3, #8
 8001180:	d106      	bne.n	8001190 <menu+0x6c>
 8001182:	4b7d      	ldr	r3, [pc, #500]	@ (8001378 <menu+0x254>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <menu+0x6c>
			menuSayac = 16;
 800118a:	4b79      	ldr	r3, [pc, #484]	@ (8001370 <menu+0x24c>)
 800118c:	2210      	movs	r2, #16
 800118e:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001190:	4b77      	ldr	r3, [pc, #476]	@ (8001370 <menu+0x24c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b0d      	cmp	r3, #13
 8001196:	d106      	bne.n	80011a6 <menu+0x82>
 8001198:	4b77      	ldr	r3, [pc, #476]	@ (8001378 <menu+0x254>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d102      	bne.n	80011a6 <menu+0x82>
			menuSayac = 16;
 80011a0:	4b73      	ldr	r3, [pc, #460]	@ (8001370 <menu+0x24c>)
 80011a2:	2210      	movs	r2, #16
 80011a4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80011a6:	4b72      	ldr	r3, [pc, #456]	@ (8001370 <menu+0x24c>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b09      	cmp	r3, #9
 80011ac:	d106      	bne.n	80011bc <menu+0x98>
 80011ae:	4b72      	ldr	r3, [pc, #456]	@ (8001378 <menu+0x254>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d102      	bne.n	80011bc <menu+0x98>
			menuSayac = 13;
 80011b6:	4b6e      	ldr	r3, [pc, #440]	@ (8001370 <menu+0x24c>)
 80011b8:	220d      	movs	r2, #13
 80011ba:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80011bc:	4b6c      	ldr	r3, [pc, #432]	@ (8001370 <menu+0x24c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b0a      	cmp	r3, #10
 80011c2:	d10a      	bne.n	80011da <menu+0xb6>
 80011c4:	4b6d      	ldr	r3, [pc, #436]	@ (800137c <menu+0x258>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d003      	beq.n	80011d4 <menu+0xb0>
 80011cc:	4b6b      	ldr	r3, [pc, #428]	@ (800137c <menu+0x258>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d102      	bne.n	80011da <menu+0xb6>
			menuSayac = 11;
 80011d4:	4b66      	ldr	r3, [pc, #408]	@ (8001370 <menu+0x24c>)
 80011d6:	220b      	movs	r2, #11
 80011d8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80011da:	4b65      	ldr	r3, [pc, #404]	@ (8001370 <menu+0x24c>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b0c      	cmp	r3, #12
 80011e0:	d10e      	bne.n	8001200 <menu+0xdc>
 80011e2:	4b67      	ldr	r3, [pc, #412]	@ (8001380 <menu+0x25c>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d003      	beq.n	80011f2 <menu+0xce>
 80011ea:	4b65      	ldr	r3, [pc, #404]	@ (8001380 <menu+0x25c>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d106      	bne.n	8001200 <menu+0xdc>
 80011f2:	4b61      	ldr	r3, [pc, #388]	@ (8001378 <menu+0x254>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d102      	bne.n	8001200 <menu+0xdc>
			menuSayac = 16;
 80011fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001370 <menu+0x24c>)
 80011fc:	2210      	movs	r2, #16
 80011fe:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001200:	4b5b      	ldr	r3, [pc, #364]	@ (8001370 <menu+0x24c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b0c      	cmp	r3, #12
 8001206:	d10e      	bne.n	8001226 <menu+0x102>
 8001208:	4b5d      	ldr	r3, [pc, #372]	@ (8001380 <menu+0x25c>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d003      	beq.n	8001218 <menu+0xf4>
 8001210:	4b5b      	ldr	r3, [pc, #364]	@ (8001380 <menu+0x25c>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b02      	cmp	r3, #2
 8001216:	d106      	bne.n	8001226 <menu+0x102>
 8001218:	4b57      	ldr	r3, [pc, #348]	@ (8001378 <menu+0x254>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b03      	cmp	r3, #3
 800121e:	d102      	bne.n	8001226 <menu+0x102>
			menuSayac = 13;
 8001220:	4b53      	ldr	r3, [pc, #332]	@ (8001370 <menu+0x24c>)
 8001222:	220d      	movs	r2, #13
 8001224:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001226:	4b52      	ldr	r3, [pc, #328]	@ (8001370 <menu+0x24c>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b0f      	cmp	r3, #15
 800122c:	d106      	bne.n	800123c <menu+0x118>
 800122e:	4b55      	ldr	r3, [pc, #340]	@ (8001384 <menu+0x260>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d102      	bne.n	800123c <menu+0x118>
			menuSayac = 16;
 8001236:	4b4e      	ldr	r3, [pc, #312]	@ (8001370 <menu+0x24c>)
 8001238:	2210      	movs	r2, #16
 800123a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 800123c:	4b4c      	ldr	r3, [pc, #304]	@ (8001370 <menu+0x24c>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b18      	cmp	r3, #24
 8001242:	d106      	bne.n	8001252 <menu+0x12e>
 8001244:	4b4b      	ldr	r3, [pc, #300]	@ (8001374 <menu+0x250>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d102      	bne.n	8001252 <menu+0x12e>
			menuSayac = 26;
 800124c:	4b48      	ldr	r3, [pc, #288]	@ (8001370 <menu+0x24c>)
 800124e:	221a      	movs	r2, #26
 8001250:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 8001252:	4b47      	ldr	r3, [pc, #284]	@ (8001370 <menu+0x24c>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b21      	cmp	r3, #33	@ 0x21
 8001258:	d106      	bne.n	8001268 <menu+0x144>
 800125a:	4b4b      	ldr	r3, [pc, #300]	@ (8001388 <menu+0x264>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d102      	bne.n	8001268 <menu+0x144>
			menuSayac = 35;
 8001262:	4b43      	ldr	r3, [pc, #268]	@ (8001370 <menu+0x24c>)
 8001264:	2223      	movs	r2, #35	@ 0x23
 8001266:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001268:	f002 fca2 	bl	8003bb0 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 800126c:	2108      	movs	r1, #8
 800126e:	4847      	ldr	r0, [pc, #284]	@ (800138c <menu+0x268>)
 8001270:	f008 fdf6 	bl	8009e60 <HAL_GPIO_ReadPin>
 8001274:	4603      	mov	r3, r0
 8001276:	2b01      	cmp	r3, #1
 8001278:	f040 8097 	bne.w	80013aa <menu+0x286>
 800127c:	4b3b      	ldr	r3, [pc, #236]	@ (800136c <menu+0x248>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	f083 0301 	eor.w	r3, r3, #1
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 808f 	beq.w	80013aa <menu+0x286>
		if (menuSayac <= 1) {
 800128c:	4b38      	ldr	r3, [pc, #224]	@ (8001370 <menu+0x24c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d802      	bhi.n	800129a <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001294:	4b36      	ldr	r3, [pc, #216]	@ (8001370 <menu+0x24c>)
 8001296:	2224      	movs	r2, #36	@ 0x24
 8001298:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800129a:	4b35      	ldr	r3, [pc, #212]	@ (8001370 <menu+0x24c>)
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	3b01      	subs	r3, #1
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4b33      	ldr	r3, [pc, #204]	@ (8001370 <menu+0x24c>)
 80012a4:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80012a6:	4b32      	ldr	r3, [pc, #200]	@ (8001370 <menu+0x24c>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b14      	cmp	r3, #20
 80012ac:	d106      	bne.n	80012bc <menu+0x198>
 80012ae:	4b31      	ldr	r3, [pc, #196]	@ (8001374 <menu+0x250>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d102      	bne.n	80012bc <menu+0x198>
			menuSayac = 17;
 80012b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001370 <menu+0x24c>)
 80012b8:	2211      	movs	r2, #17
 80012ba:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80012bc:	4b2c      	ldr	r3, [pc, #176]	@ (8001370 <menu+0x24c>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b0f      	cmp	r3, #15
 80012c2:	d106      	bne.n	80012d2 <menu+0x1ae>
 80012c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001378 <menu+0x254>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d102      	bne.n	80012d2 <menu+0x1ae>
			menuSayac = 7;
 80012cc:	4b28      	ldr	r3, [pc, #160]	@ (8001370 <menu+0x24c>)
 80012ce:	2207      	movs	r2, #7
 80012d0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80012d2:	4b27      	ldr	r3, [pc, #156]	@ (8001370 <menu+0x24c>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b0f      	cmp	r3, #15
 80012d8:	d106      	bne.n	80012e8 <menu+0x1c4>
 80012da:	4b27      	ldr	r3, [pc, #156]	@ (8001378 <menu+0x254>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d102      	bne.n	80012e8 <menu+0x1c4>
			menuSayac = 12;
 80012e2:	4b23      	ldr	r3, [pc, #140]	@ (8001370 <menu+0x24c>)
 80012e4:	220c      	movs	r2, #12
 80012e6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80012e8:	4b21      	ldr	r3, [pc, #132]	@ (8001370 <menu+0x24c>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	2b0c      	cmp	r3, #12
 80012ee:	d106      	bne.n	80012fe <menu+0x1da>
 80012f0:	4b21      	ldr	r3, [pc, #132]	@ (8001378 <menu+0x254>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d102      	bne.n	80012fe <menu+0x1da>
			menuSayac = 8;
 80012f8:	4b1d      	ldr	r3, [pc, #116]	@ (8001370 <menu+0x24c>)
 80012fa:	2208      	movs	r2, #8
 80012fc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80012fe:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <menu+0x24c>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b0a      	cmp	r3, #10
 8001304:	d10a      	bne.n	800131c <menu+0x1f8>
 8001306:	4b1d      	ldr	r3, [pc, #116]	@ (800137c <menu+0x258>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d003      	beq.n	8001316 <menu+0x1f2>
 800130e:	4b1b      	ldr	r3, [pc, #108]	@ (800137c <menu+0x258>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d102      	bne.n	800131c <menu+0x1f8>
			menuSayac = 9;
 8001316:	4b16      	ldr	r3, [pc, #88]	@ (8001370 <menu+0x24c>)
 8001318:	2209      	movs	r2, #9
 800131a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800131c:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <menu+0x24c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b0c      	cmp	r3, #12
 8001322:	d10a      	bne.n	800133a <menu+0x216>
 8001324:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <menu+0x25c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d003      	beq.n	8001334 <menu+0x210>
 800132c:	4b14      	ldr	r3, [pc, #80]	@ (8001380 <menu+0x25c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d102      	bne.n	800133a <menu+0x216>
			menuSayac = 11;
 8001334:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <menu+0x24c>)
 8001336:	220b      	movs	r2, #11
 8001338:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800133a:	4b0d      	ldr	r3, [pc, #52]	@ (8001370 <menu+0x24c>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b0f      	cmp	r3, #15
 8001340:	d106      	bne.n	8001350 <menu+0x22c>
 8001342:	4b10      	ldr	r3, [pc, #64]	@ (8001384 <menu+0x260>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d102      	bne.n	8001350 <menu+0x22c>
			menuSayac = 14;
 800134a:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <menu+0x24c>)
 800134c:	220e      	movs	r2, #14
 800134e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001350:	4b07      	ldr	r3, [pc, #28]	@ (8001370 <menu+0x24c>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b19      	cmp	r3, #25
 8001356:	d11b      	bne.n	8001390 <menu+0x26c>
 8001358:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <menu+0x250>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d117      	bne.n	8001390 <menu+0x26c>
			menuSayac = 23;
 8001360:	4b03      	ldr	r3, [pc, #12]	@ (8001370 <menu+0x24c>)
 8001362:	2217      	movs	r2, #23
 8001364:	701a      	strb	r2, [r3, #0]
 8001366:	e013      	b.n	8001390 <menu+0x26c>
 8001368:	40010800 	.word	0x40010800
 800136c:	2000109c 	.word	0x2000109c
 8001370:	2000106c 	.word	0x2000106c
 8001374:	2000107b 	.word	0x2000107b
 8001378:	20001074 	.word	0x20001074
 800137c:	20001075 	.word	0x20001075
 8001380:	20001076 	.word	0x20001076
 8001384:	20001077 	.word	0x20001077
 8001388:	20001097 	.word	0x20001097
 800138c:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 8001390:	4bb0      	ldr	r3, [pc, #704]	@ (8001654 <menu+0x530>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b22      	cmp	r3, #34	@ 0x22
 8001396:	d106      	bne.n	80013a6 <menu+0x282>
 8001398:	4baf      	ldr	r3, [pc, #700]	@ (8001658 <menu+0x534>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <menu+0x282>
			menuSayac = 32;
 80013a0:	4bac      	ldr	r3, [pc, #688]	@ (8001654 <menu+0x530>)
 80013a2:	2220      	movs	r2, #32
 80013a4:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80013a6:	f002 fc03 	bl	8003bb0 <bekle>
	}

	if (menuSayac == 0) {
 80013aa:	4baa      	ldr	r3, [pc, #680]	@ (8001654 <menu+0x530>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d109      	bne.n	80013c6 <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 80013b2:	4aaa      	ldr	r2, [pc, #680]	@ (800165c <menu+0x538>)
 80013b4:	2101      	movs	r1, #1
 80013b6:	2001      	movs	r0, #1
 80013b8:	f007 fa60 	bl	800887c <lcd_print>
		lcd_print(2, 1, ayarlarText);
 80013bc:	4aa8      	ldr	r2, [pc, #672]	@ (8001660 <menu+0x53c>)
 80013be:	2101      	movs	r1, #1
 80013c0:	2002      	movs	r0, #2
 80013c2:	f007 fa5b 	bl	800887c <lcd_print>
	}

	if (menuSayac == 1) {
 80013c6:	4ba3      	ldr	r3, [pc, #652]	@ (8001654 <menu+0x530>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	f040 81f4 	bne.w	80017b8 <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 80013d0:	4aa4      	ldr	r2, [pc, #656]	@ (8001664 <menu+0x540>)
 80013d2:	2101      	movs	r1, #1
 80013d4:	2001      	movs	r0, #1
 80013d6:	f007 fa51 	bl	800887c <lcd_print>

		if(hataGostermeSirasi == 0) {
 80013da:	4ba3      	ldr	r3, [pc, #652]	@ (8001668 <menu+0x544>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d115      	bne.n	800140e <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 80013e2:	4aa2      	ldr	r2, [pc, #648]	@ (800166c <menu+0x548>)
 80013e4:	2101      	movs	r1, #1
 80013e6:	2002      	movs	r0, #2
 80013e8:	f007 fa48 	bl	800887c <lcd_print>
			lcd_print(2, 15, "   ");
 80013ec:	4aa0      	ldr	r2, [pc, #640]	@ (8001670 <menu+0x54c>)
 80013ee:	210f      	movs	r1, #15
 80013f0:	2002      	movs	r0, #2
 80013f2:	f007 fa43 	bl	800887c <lcd_print>
			itoa(hataKayit1, snum, 10);
 80013f6:	4b9f      	ldr	r3, [pc, #636]	@ (8001674 <menu+0x550>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	220a      	movs	r2, #10
 80013fc:	499e      	ldr	r1, [pc, #632]	@ (8001678 <menu+0x554>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f00b fd24 	bl	800ce4c <itoa>
			lcd_print(2, 14, snum);
 8001404:	4a9c      	ldr	r2, [pc, #624]	@ (8001678 <menu+0x554>)
 8001406:	210e      	movs	r1, #14
 8001408:	2002      	movs	r0, #2
 800140a:	f007 fa37 	bl	800887c <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 800140e:	4b96      	ldr	r3, [pc, #600]	@ (8001668 <menu+0x544>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d115      	bne.n	8001442 <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 8001416:	4a99      	ldr	r2, [pc, #612]	@ (800167c <menu+0x558>)
 8001418:	2101      	movs	r1, #1
 800141a:	2002      	movs	r0, #2
 800141c:	f007 fa2e 	bl	800887c <lcd_print>
			lcd_print(2, 15, "  ");
 8001420:	4a97      	ldr	r2, [pc, #604]	@ (8001680 <menu+0x55c>)
 8001422:	210f      	movs	r1, #15
 8001424:	2002      	movs	r0, #2
 8001426:	f007 fa29 	bl	800887c <lcd_print>
			itoa(hataKayit2, snum, 10);
 800142a:	4b96      	ldr	r3, [pc, #600]	@ (8001684 <menu+0x560>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	220a      	movs	r2, #10
 8001430:	4991      	ldr	r1, [pc, #580]	@ (8001678 <menu+0x554>)
 8001432:	4618      	mov	r0, r3
 8001434:	f00b fd0a 	bl	800ce4c <itoa>
			lcd_print(2, 14, snum);
 8001438:	4a8f      	ldr	r2, [pc, #572]	@ (8001678 <menu+0x554>)
 800143a:	210e      	movs	r1, #14
 800143c:	2002      	movs	r0, #2
 800143e:	f007 fa1d 	bl	800887c <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001442:	4b89      	ldr	r3, [pc, #548]	@ (8001668 <menu+0x544>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d115      	bne.n	8001476 <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 800144a:	4a8f      	ldr	r2, [pc, #572]	@ (8001688 <menu+0x564>)
 800144c:	2101      	movs	r1, #1
 800144e:	2002      	movs	r0, #2
 8001450:	f007 fa14 	bl	800887c <lcd_print>
			lcd_print(2, 15, "  ");
 8001454:	4a8a      	ldr	r2, [pc, #552]	@ (8001680 <menu+0x55c>)
 8001456:	210f      	movs	r1, #15
 8001458:	2002      	movs	r0, #2
 800145a:	f007 fa0f 	bl	800887c <lcd_print>
			itoa(hataKayit3, snum, 10);
 800145e:	4b8b      	ldr	r3, [pc, #556]	@ (800168c <menu+0x568>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	220a      	movs	r2, #10
 8001464:	4984      	ldr	r1, [pc, #528]	@ (8001678 <menu+0x554>)
 8001466:	4618      	mov	r0, r3
 8001468:	f00b fcf0 	bl	800ce4c <itoa>
			lcd_print(2, 14, snum);
 800146c:	4a82      	ldr	r2, [pc, #520]	@ (8001678 <menu+0x554>)
 800146e:	210e      	movs	r1, #14
 8001470:	2002      	movs	r0, #2
 8001472:	f007 fa03 	bl	800887c <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001476:	4b7c      	ldr	r3, [pc, #496]	@ (8001668 <menu+0x544>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b03      	cmp	r3, #3
 800147c:	d115      	bne.n	80014aa <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 800147e:	4a84      	ldr	r2, [pc, #528]	@ (8001690 <menu+0x56c>)
 8001480:	2101      	movs	r1, #1
 8001482:	2002      	movs	r0, #2
 8001484:	f007 f9fa 	bl	800887c <lcd_print>
			lcd_print(2, 15, "  ");
 8001488:	4a7d      	ldr	r2, [pc, #500]	@ (8001680 <menu+0x55c>)
 800148a:	210f      	movs	r1, #15
 800148c:	2002      	movs	r0, #2
 800148e:	f007 f9f5 	bl	800887c <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001492:	4b80      	ldr	r3, [pc, #512]	@ (8001694 <menu+0x570>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	220a      	movs	r2, #10
 8001498:	4977      	ldr	r1, [pc, #476]	@ (8001678 <menu+0x554>)
 800149a:	4618      	mov	r0, r3
 800149c:	f00b fcd6 	bl	800ce4c <itoa>
			lcd_print(2, 14, snum);
 80014a0:	4a75      	ldr	r2, [pc, #468]	@ (8001678 <menu+0x554>)
 80014a2:	210e      	movs	r1, #14
 80014a4:	2002      	movs	r0, #2
 80014a6:	f007 f9e9 	bl	800887c <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80014aa:	4b6f      	ldr	r3, [pc, #444]	@ (8001668 <menu+0x544>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b04      	cmp	r3, #4
 80014b0:	d115      	bne.n	80014de <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 80014b2:	4a79      	ldr	r2, [pc, #484]	@ (8001698 <menu+0x574>)
 80014b4:	2101      	movs	r1, #1
 80014b6:	2002      	movs	r0, #2
 80014b8:	f007 f9e0 	bl	800887c <lcd_print>
			lcd_print(2, 15, "  ");
 80014bc:	4a70      	ldr	r2, [pc, #448]	@ (8001680 <menu+0x55c>)
 80014be:	210f      	movs	r1, #15
 80014c0:	2002      	movs	r0, #2
 80014c2:	f007 f9db 	bl	800887c <lcd_print>
			itoa(hataKayit5, snum, 10);
 80014c6:	4b75      	ldr	r3, [pc, #468]	@ (800169c <menu+0x578>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	220a      	movs	r2, #10
 80014cc:	496a      	ldr	r1, [pc, #424]	@ (8001678 <menu+0x554>)
 80014ce:	4618      	mov	r0, r3
 80014d0:	f00b fcbc 	bl	800ce4c <itoa>
			lcd_print(2, 14, snum);
 80014d4:	4a68      	ldr	r2, [pc, #416]	@ (8001678 <menu+0x554>)
 80014d6:	210e      	movs	r1, #14
 80014d8:	2002      	movs	r0, #2
 80014da:	f007 f9cf 	bl	800887c <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80014de:	4b62      	ldr	r3, [pc, #392]	@ (8001668 <menu+0x544>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	2b05      	cmp	r3, #5
 80014e4:	d115      	bne.n	8001512 <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 80014e6:	4a6e      	ldr	r2, [pc, #440]	@ (80016a0 <menu+0x57c>)
 80014e8:	2101      	movs	r1, #1
 80014ea:	2002      	movs	r0, #2
 80014ec:	f007 f9c6 	bl	800887c <lcd_print>
			lcd_print(2, 15, "  ");
 80014f0:	4a63      	ldr	r2, [pc, #396]	@ (8001680 <menu+0x55c>)
 80014f2:	210f      	movs	r1, #15
 80014f4:	2002      	movs	r0, #2
 80014f6:	f007 f9c1 	bl	800887c <lcd_print>
			itoa(hataKayit6, snum, 10);
 80014fa:	4b6a      	ldr	r3, [pc, #424]	@ (80016a4 <menu+0x580>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	220a      	movs	r2, #10
 8001500:	495d      	ldr	r1, [pc, #372]	@ (8001678 <menu+0x554>)
 8001502:	4618      	mov	r0, r3
 8001504:	f00b fca2 	bl	800ce4c <itoa>
			lcd_print(2, 14, snum);
 8001508:	4a5b      	ldr	r2, [pc, #364]	@ (8001678 <menu+0x554>)
 800150a:	210e      	movs	r1, #14
 800150c:	2002      	movs	r0, #2
 800150e:	f007 f9b5 	bl	800887c <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001512:	4b55      	ldr	r3, [pc, #340]	@ (8001668 <menu+0x544>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b06      	cmp	r3, #6
 8001518:	d115      	bne.n	8001546 <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 800151a:	4a63      	ldr	r2, [pc, #396]	@ (80016a8 <menu+0x584>)
 800151c:	2101      	movs	r1, #1
 800151e:	2002      	movs	r0, #2
 8001520:	f007 f9ac 	bl	800887c <lcd_print>
			lcd_print(2, 15, "  ");
 8001524:	4a56      	ldr	r2, [pc, #344]	@ (8001680 <menu+0x55c>)
 8001526:	210f      	movs	r1, #15
 8001528:	2002      	movs	r0, #2
 800152a:	f007 f9a7 	bl	800887c <lcd_print>
			itoa(hataKayit7, snum, 10);
 800152e:	4b5f      	ldr	r3, [pc, #380]	@ (80016ac <menu+0x588>)
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	220a      	movs	r2, #10
 8001534:	4950      	ldr	r1, [pc, #320]	@ (8001678 <menu+0x554>)
 8001536:	4618      	mov	r0, r3
 8001538:	f00b fc88 	bl	800ce4c <itoa>
			lcd_print(2, 14, snum);
 800153c:	4a4e      	ldr	r2, [pc, #312]	@ (8001678 <menu+0x554>)
 800153e:	210e      	movs	r1, #14
 8001540:	2002      	movs	r0, #2
 8001542:	f007 f99b 	bl	800887c <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001546:	4b48      	ldr	r3, [pc, #288]	@ (8001668 <menu+0x544>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	2b07      	cmp	r3, #7
 800154c:	d115      	bne.n	800157a <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 800154e:	4a58      	ldr	r2, [pc, #352]	@ (80016b0 <menu+0x58c>)
 8001550:	2101      	movs	r1, #1
 8001552:	2002      	movs	r0, #2
 8001554:	f007 f992 	bl	800887c <lcd_print>
			lcd_print(2, 15, "  ");
 8001558:	4a49      	ldr	r2, [pc, #292]	@ (8001680 <menu+0x55c>)
 800155a:	210f      	movs	r1, #15
 800155c:	2002      	movs	r0, #2
 800155e:	f007 f98d 	bl	800887c <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001562:	4b54      	ldr	r3, [pc, #336]	@ (80016b4 <menu+0x590>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	220a      	movs	r2, #10
 8001568:	4943      	ldr	r1, [pc, #268]	@ (8001678 <menu+0x554>)
 800156a:	4618      	mov	r0, r3
 800156c:	f00b fc6e 	bl	800ce4c <itoa>
			lcd_print(2, 14, snum);
 8001570:	4a41      	ldr	r2, [pc, #260]	@ (8001678 <menu+0x554>)
 8001572:	210e      	movs	r1, #14
 8001574:	2002      	movs	r0, #2
 8001576:	f007 f981 	bl	800887c <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 800157a:	4b3b      	ldr	r3, [pc, #236]	@ (8001668 <menu+0x544>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	2b08      	cmp	r3, #8
 8001580:	d115      	bne.n	80015ae <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 8001582:	4a4d      	ldr	r2, [pc, #308]	@ (80016b8 <menu+0x594>)
 8001584:	2101      	movs	r1, #1
 8001586:	2002      	movs	r0, #2
 8001588:	f007 f978 	bl	800887c <lcd_print>
			lcd_print(2, 15, "  ");
 800158c:	4a3c      	ldr	r2, [pc, #240]	@ (8001680 <menu+0x55c>)
 800158e:	210f      	movs	r1, #15
 8001590:	2002      	movs	r0, #2
 8001592:	f007 f973 	bl	800887c <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001596:	4b49      	ldr	r3, [pc, #292]	@ (80016bc <menu+0x598>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	220a      	movs	r2, #10
 800159c:	4936      	ldr	r1, [pc, #216]	@ (8001678 <menu+0x554>)
 800159e:	4618      	mov	r0, r3
 80015a0:	f00b fc54 	bl	800ce4c <itoa>
			lcd_print(2, 14, snum);
 80015a4:	4a34      	ldr	r2, [pc, #208]	@ (8001678 <menu+0x554>)
 80015a6:	210e      	movs	r1, #14
 80015a8:	2002      	movs	r0, #2
 80015aa:	f007 f967 	bl	800887c <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 80015ae:	4b2e      	ldr	r3, [pc, #184]	@ (8001668 <menu+0x544>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b09      	cmp	r3, #9
 80015b4:	d115      	bne.n	80015e2 <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 80015b6:	4a42      	ldr	r2, [pc, #264]	@ (80016c0 <menu+0x59c>)
 80015b8:	2101      	movs	r1, #1
 80015ba:	2002      	movs	r0, #2
 80015bc:	f007 f95e 	bl	800887c <lcd_print>
			lcd_print(2, 16, " ");
 80015c0:	4a40      	ldr	r2, [pc, #256]	@ (80016c4 <menu+0x5a0>)
 80015c2:	2110      	movs	r1, #16
 80015c4:	2002      	movs	r0, #2
 80015c6:	f007 f959 	bl	800887c <lcd_print>
			itoa(hataKayit10, snum, 10);
 80015ca:	4b3f      	ldr	r3, [pc, #252]	@ (80016c8 <menu+0x5a4>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	220a      	movs	r2, #10
 80015d0:	4929      	ldr	r1, [pc, #164]	@ (8001678 <menu+0x554>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	f00b fc3a 	bl	800ce4c <itoa>
			lcd_print(2, 15, snum);
 80015d8:	4a27      	ldr	r2, [pc, #156]	@ (8001678 <menu+0x554>)
 80015da:	210f      	movs	r1, #15
 80015dc:	2002      	movs	r0, #2
 80015de:	f007 f94d 	bl	800887c <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 80015e2:	4b21      	ldr	r3, [pc, #132]	@ (8001668 <menu+0x544>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b0a      	cmp	r3, #10
 80015e8:	d104      	bne.n	80015f4 <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 80015ea:	4a38      	ldr	r2, [pc, #224]	@ (80016cc <menu+0x5a8>)
 80015ec:	2101      	movs	r1, #1
 80015ee:	2002      	movs	r0, #2
 80015f0:	f007 f944 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80015f4:	2102      	movs	r1, #2
 80015f6:	4836      	ldr	r0, [pc, #216]	@ (80016d0 <menu+0x5ac>)
 80015f8:	f008 fc32 	bl	8009e60 <HAL_GPIO_ReadPin>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d119      	bne.n	8001636 <menu+0x512>
 8001602:	4b34      	ldr	r3, [pc, #208]	@ (80016d4 <menu+0x5b0>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	f083 0301 	eor.w	r3, r3, #1
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d012      	beq.n	8001636 <menu+0x512>
 8001610:	4b31      	ldr	r3, [pc, #196]	@ (80016d8 <menu+0x5b4>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10e      	bne.n	8001636 <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001618:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <menu+0x544>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	3301      	adds	r3, #1
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <menu+0x544>)
 8001622:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001624:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <menu+0x544>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b0a      	cmp	r3, #10
 800162a:	d902      	bls.n	8001632 <menu+0x50e>
				hataGostermeSirasi = 0;
 800162c:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <menu+0x544>)
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001632:	f002 fabd 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001636:	2104      	movs	r1, #4
 8001638:	4825      	ldr	r0, [pc, #148]	@ (80016d0 <menu+0x5ac>)
 800163a:	f008 fc11 	bl	8009e60 <HAL_GPIO_ReadPin>
 800163e:	4603      	mov	r3, r0
 8001640:	2b01      	cmp	r3, #1
 8001642:	d15e      	bne.n	8001702 <menu+0x5de>
 8001644:	4b23      	ldr	r3, [pc, #140]	@ (80016d4 <menu+0x5b0>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	f083 0301 	eor.w	r3, r3, #1
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d057      	beq.n	8001702 <menu+0x5de>
 8001652:	e043      	b.n	80016dc <menu+0x5b8>
 8001654:	2000106c 	.word	0x2000106c
 8001658:	20001097 	.word	0x20001097
 800165c:	200010d4 	.word	0x200010d4
 8001660:	200010e8 	.word	0x200010e8
 8001664:	200010fc 	.word	0x200010fc
 8001668:	2000106e 	.word	0x2000106e
 800166c:	20001110 	.word	0x20001110
 8001670:	0800d098 	.word	0x0800d098
 8001674:	2000108d 	.word	0x2000108d
 8001678:	2000100c 	.word	0x2000100c
 800167c:	20001124 	.word	0x20001124
 8001680:	0800d09c 	.word	0x0800d09c
 8001684:	2000108e 	.word	0x2000108e
 8001688:	20001138 	.word	0x20001138
 800168c:	2000108f 	.word	0x2000108f
 8001690:	2000114c 	.word	0x2000114c
 8001694:	20001090 	.word	0x20001090
 8001698:	20001160 	.word	0x20001160
 800169c:	20001091 	.word	0x20001091
 80016a0:	20001174 	.word	0x20001174
 80016a4:	20001092 	.word	0x20001092
 80016a8:	20001188 	.word	0x20001188
 80016ac:	20001093 	.word	0x20001093
 80016b0:	2000119c 	.word	0x2000119c
 80016b4:	20001094 	.word	0x20001094
 80016b8:	200011b0 	.word	0x200011b0
 80016bc:	20001095 	.word	0x20001095
 80016c0:	200011c4 	.word	0x200011c4
 80016c4:	0800d0a0 	.word	0x0800d0a0
 80016c8:	20001096 	.word	0x20001096
 80016cc:	200011d8 	.word	0x200011d8
 80016d0:	40010800 	.word	0x40010800
 80016d4:	2000109c 	.word	0x2000109c
 80016d8:	2000107b 	.word	0x2000107b
 80016dc:	4b8a      	ldr	r3, [pc, #552]	@ (8001908 <menu+0x7e4>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d10e      	bne.n	8001702 <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 80016e4:	4b89      	ldr	r3, [pc, #548]	@ (800190c <menu+0x7e8>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	4b87      	ldr	r3, [pc, #540]	@ (800190c <menu+0x7e8>)
 80016ee:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 80016f0:	4b86      	ldr	r3, [pc, #536]	@ (800190c <menu+0x7e8>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b0b      	cmp	r3, #11
 80016f6:	d902      	bls.n	80016fe <menu+0x5da>
	    		hataGostermeSirasi = 10;
 80016f8:	4b84      	ldr	r3, [pc, #528]	@ (800190c <menu+0x7e8>)
 80016fa:	220a      	movs	r2, #10
 80016fc:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80016fe:	f002 fa57 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001702:	2108      	movs	r1, #8
 8001704:	4882      	ldr	r0, [pc, #520]	@ (8001910 <menu+0x7ec>)
 8001706:	f008 fbab 	bl	8009e60 <HAL_GPIO_ReadPin>
 800170a:	4603      	mov	r3, r0
 800170c:	2b01      	cmp	r3, #1
 800170e:	d153      	bne.n	80017b8 <menu+0x694>
 8001710:	4b80      	ldr	r3, [pc, #512]	@ (8001914 <menu+0x7f0>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	f083 0301 	eor.w	r3, r3, #1
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2b00      	cmp	r3, #0
 800171c:	d04c      	beq.n	80017b8 <menu+0x694>
 800171e:	4b7b      	ldr	r3, [pc, #492]	@ (800190c <menu+0x7e8>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b0a      	cmp	r3, #10
 8001724:	d148      	bne.n	80017b8 <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 8001726:	4b7c      	ldr	r3, [pc, #496]	@ (8001918 <menu+0x7f4>)
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
 800172c:	4b7b      	ldr	r3, [pc, #492]	@ (800191c <menu+0x7f8>)
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001734:	4b7a      	ldr	r3, [pc, #488]	@ (8001920 <menu+0x7fc>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	4b78      	ldr	r3, [pc, #480]	@ (800191c <menu+0x7f8>)
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001742:	4b78      	ldr	r3, [pc, #480]	@ (8001924 <menu+0x800>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
 8001748:	4b74      	ldr	r3, [pc, #464]	@ (800191c <menu+0x7f8>)
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001750:	4b75      	ldr	r3, [pc, #468]	@ (8001928 <menu+0x804>)
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
 8001756:	4b71      	ldr	r3, [pc, #452]	@ (800191c <menu+0x7f8>)
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 800175e:	4b73      	ldr	r3, [pc, #460]	@ (800192c <menu+0x808>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
 8001764:	4b6d      	ldr	r3, [pc, #436]	@ (800191c <menu+0x7f8>)
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 800176c:	4b70      	ldr	r3, [pc, #448]	@ (8001930 <menu+0x80c>)
 800176e:	2200      	movs	r2, #0
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	4b6a      	ldr	r3, [pc, #424]	@ (800191c <menu+0x7f8>)
 8001774:	2200      	movs	r2, #0
 8001776:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 800177a:	4b6e      	ldr	r3, [pc, #440]	@ (8001934 <menu+0x810>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	4b66      	ldr	r3, [pc, #408]	@ (800191c <menu+0x7f8>)
 8001782:	2200      	movs	r2, #0
 8001784:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001788:	4b6b      	ldr	r3, [pc, #428]	@ (8001938 <menu+0x814>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
 800178e:	4b63      	ldr	r3, [pc, #396]	@ (800191c <menu+0x7f8>)
 8001790:	2200      	movs	r2, #0
 8001792:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001796:	4b69      	ldr	r3, [pc, #420]	@ (800193c <menu+0x818>)
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
 800179c:	4b5f      	ldr	r3, [pc, #380]	@ (800191c <menu+0x7f8>)
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 80017a4:	4b66      	ldr	r3, [pc, #408]	@ (8001940 <menu+0x81c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	4b5c      	ldr	r3, [pc, #368]	@ (800191c <menu+0x7f8>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 80017b2:	4b64      	ldr	r3, [pc, #400]	@ (8001944 <menu+0x820>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 80017b8:	4b63      	ldr	r3, [pc, #396]	@ (8001948 <menu+0x824>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	f040 808e 	bne.w	80018de <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 80017c2:	4a62      	ldr	r2, [pc, #392]	@ (800194c <menu+0x828>)
 80017c4:	2101      	movs	r1, #1
 80017c6:	2001      	movs	r0, #1
 80017c8:	f007 f858 	bl	800887c <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 80017cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001908 <menu+0x7e4>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d003      	beq.n	80017dc <menu+0x6b8>
 80017d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001908 <menu+0x7e4>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d104      	bne.n	80017e6 <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 80017dc:	4a5c      	ldr	r2, [pc, #368]	@ (8001950 <menu+0x82c>)
 80017de:	2101      	movs	r1, #1
 80017e0:	2002      	movs	r0, #2
 80017e2:	f007 f84b 	bl	800887c <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 80017e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001954 <menu+0x830>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d108      	bne.n	8001800 <menu+0x6dc>
 80017ee:	4b46      	ldr	r3, [pc, #280]	@ (8001908 <menu+0x7e4>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d104      	bne.n	8001800 <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 80017f6:	4a58      	ldr	r2, [pc, #352]	@ (8001958 <menu+0x834>)
 80017f8:	2101      	movs	r1, #1
 80017fa:	2002      	movs	r0, #2
 80017fc:	f007 f83e 	bl	800887c <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001800:	4b54      	ldr	r3, [pc, #336]	@ (8001954 <menu+0x830>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d108      	bne.n	800181a <menu+0x6f6>
 8001808:	4b3f      	ldr	r3, [pc, #252]	@ (8001908 <menu+0x7e4>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d104      	bne.n	800181a <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 8001810:	4a52      	ldr	r2, [pc, #328]	@ (800195c <menu+0x838>)
 8001812:	2101      	movs	r1, #1
 8001814:	2002      	movs	r0, #2
 8001816:	f007 f831 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800181a:	2102      	movs	r1, #2
 800181c:	483c      	ldr	r0, [pc, #240]	@ (8001910 <menu+0x7ec>)
 800181e:	f008 fb1f 	bl	8009e60 <HAL_GPIO_ReadPin>
 8001822:	4603      	mov	r3, r0
 8001824:	2b01      	cmp	r3, #1
 8001826:	d119      	bne.n	800185c <menu+0x738>
 8001828:	4b3a      	ldr	r3, [pc, #232]	@ (8001914 <menu+0x7f0>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	f083 0301 	eor.w	r3, r3, #1
 8001830:	b2db      	uxtb	r3, r3
 8001832:	2b00      	cmp	r3, #0
 8001834:	d012      	beq.n	800185c <menu+0x738>
 8001836:	4b34      	ldr	r3, [pc, #208]	@ (8001908 <menu+0x7e4>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10e      	bne.n	800185c <menu+0x738>
			calismaSekli = calismaSekli + 1;
 800183e:	4b45      	ldr	r3, [pc, #276]	@ (8001954 <menu+0x830>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	3301      	adds	r3, #1
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4b43      	ldr	r3, [pc, #268]	@ (8001954 <menu+0x830>)
 8001848:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 800184a:	4b42      	ldr	r3, [pc, #264]	@ (8001954 <menu+0x830>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d902      	bls.n	8001858 <menu+0x734>
				calismaSekli = 0;
 8001852:	4b40      	ldr	r3, [pc, #256]	@ (8001954 <menu+0x830>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001858:	f002 f9aa 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800185c:	2104      	movs	r1, #4
 800185e:	482c      	ldr	r0, [pc, #176]	@ (8001910 <menu+0x7ec>)
 8001860:	f008 fafe 	bl	8009e60 <HAL_GPIO_ReadPin>
 8001864:	4603      	mov	r3, r0
 8001866:	2b01      	cmp	r3, #1
 8001868:	d119      	bne.n	800189e <menu+0x77a>
 800186a:	4b2a      	ldr	r3, [pc, #168]	@ (8001914 <menu+0x7f0>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	f083 0301 	eor.w	r3, r3, #1
 8001872:	b2db      	uxtb	r3, r3
 8001874:	2b00      	cmp	r3, #0
 8001876:	d012      	beq.n	800189e <menu+0x77a>
 8001878:	4b23      	ldr	r3, [pc, #140]	@ (8001908 <menu+0x7e4>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d10e      	bne.n	800189e <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 8001880:	4b34      	ldr	r3, [pc, #208]	@ (8001954 <menu+0x830>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	3b01      	subs	r3, #1
 8001886:	b2da      	uxtb	r2, r3
 8001888:	4b32      	ldr	r3, [pc, #200]	@ (8001954 <menu+0x830>)
 800188a:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 800188c:	4b31      	ldr	r3, [pc, #196]	@ (8001954 <menu+0x830>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <menu+0x776>
	    		calismaSekli = 1;
 8001894:	4b2f      	ldr	r3, [pc, #188]	@ (8001954 <menu+0x830>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800189a:	f002 f989 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800189e:	2108      	movs	r1, #8
 80018a0:	481b      	ldr	r0, [pc, #108]	@ (8001910 <menu+0x7ec>)
 80018a2:	f008 fadd 	bl	8009e60 <HAL_GPIO_ReadPin>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d118      	bne.n	80018de <menu+0x7ba>
 80018ac:	4b19      	ldr	r3, [pc, #100]	@ (8001914 <menu+0x7f0>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	f083 0301 	eor.w	r3, r3, #1
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d011      	beq.n	80018de <menu+0x7ba>
			eepromData[1] = calismaSekli;
 80018ba:	4b26      	ldr	r3, [pc, #152]	@ (8001954 <menu+0x830>)
 80018bc:	781a      	ldrb	r2, [r3, #0]
 80018be:	4b17      	ldr	r3, [pc, #92]	@ (800191c <menu+0x7f8>)
 80018c0:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 80018c2:	4b24      	ldr	r3, [pc, #144]	@ (8001954 <menu+0x830>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d106      	bne.n	80018d8 <menu+0x7b4>
				altLimit = 1;
 80018ca:	4b25      	ldr	r3, [pc, #148]	@ (8001960 <menu+0x83c>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80018d0:	4b23      	ldr	r3, [pc, #140]	@ (8001960 <menu+0x83c>)
 80018d2:	781a      	ldrb	r2, [r3, #0]
 80018d4:	4b11      	ldr	r3, [pc, #68]	@ (800191c <menu+0x7f8>)
 80018d6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80018d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001944 <menu+0x820>)
 80018da:	2201      	movs	r2, #1
 80018dc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 80018de:	4b1a      	ldr	r3, [pc, #104]	@ (8001948 <menu+0x824>)
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	f040 809c 	bne.w	8001a20 <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 80018e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001964 <menu+0x840>)
 80018ea:	2101      	movs	r1, #1
 80018ec:	2001      	movs	r0, #1
 80018ee:	f006 ffc5 	bl	800887c <lcd_print>

		if(emniyetCercevesi == 0) {
 80018f2:	4b1d      	ldr	r3, [pc, #116]	@ (8001968 <menu+0x844>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d13a      	bne.n	8001970 <menu+0x84c>
			lcd_print(2, 1, pasifText);
 80018fa:	4a1c      	ldr	r2, [pc, #112]	@ (800196c <menu+0x848>)
 80018fc:	2101      	movs	r1, #1
 80018fe:	2002      	movs	r0, #2
 8001900:	f006 ffbc 	bl	800887c <lcd_print>
 8001904:	e03d      	b.n	8001982 <menu+0x85e>
 8001906:	bf00      	nop
 8001908:	2000107b 	.word	0x2000107b
 800190c:	2000106e 	.word	0x2000106e
 8001910:	40010800 	.word	0x40010800
 8001914:	2000109c 	.word	0x2000109c
 8001918:	2000108d 	.word	0x2000108d
 800191c:	20000f9c 	.word	0x20000f9c
 8001920:	2000108e 	.word	0x2000108e
 8001924:	2000108f 	.word	0x2000108f
 8001928:	20001090 	.word	0x20001090
 800192c:	20001091 	.word	0x20001091
 8001930:	20001092 	.word	0x20001092
 8001934:	20001093 	.word	0x20001093
 8001938:	20001094 	.word	0x20001094
 800193c:	20001095 	.word	0x20001095
 8001940:	20001096 	.word	0x20001096
 8001944:	20001099 	.word	0x20001099
 8001948:	2000106c 	.word	0x2000106c
 800194c:	200011ec 	.word	0x200011ec
 8001950:	20001200 	.word	0x20001200
 8001954:	2000106d 	.word	0x2000106d
 8001958:	20001214 	.word	0x20001214
 800195c:	20001228 	.word	0x20001228
 8001960:	20001072 	.word	0x20001072
 8001964:	2000123c 	.word	0x2000123c
 8001968:	20001070 	.word	0x20001070
 800196c:	20001250 	.word	0x20001250
		} else if(emniyetCercevesi == 1) {
 8001970:	4b6b      	ldr	r3, [pc, #428]	@ (8001b20 <menu+0x9fc>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d104      	bne.n	8001982 <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 8001978:	4a6a      	ldr	r2, [pc, #424]	@ (8001b24 <menu+0xa00>)
 800197a:	2101      	movs	r1, #1
 800197c:	2002      	movs	r0, #2
 800197e:	f006 ff7d 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001982:	2102      	movs	r1, #2
 8001984:	4868      	ldr	r0, [pc, #416]	@ (8001b28 <menu+0xa04>)
 8001986:	f008 fa6b 	bl	8009e60 <HAL_GPIO_ReadPin>
 800198a:	4603      	mov	r3, r0
 800198c:	2b01      	cmp	r3, #1
 800198e:	d115      	bne.n	80019bc <menu+0x898>
 8001990:	4b66      	ldr	r3, [pc, #408]	@ (8001b2c <menu+0xa08>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	f083 0301 	eor.w	r3, r3, #1
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00e      	beq.n	80019bc <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 800199e:	4b60      	ldr	r3, [pc, #384]	@ (8001b20 <menu+0x9fc>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	3301      	adds	r3, #1
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4b5e      	ldr	r3, [pc, #376]	@ (8001b20 <menu+0x9fc>)
 80019a8:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 80019aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001b20 <menu+0x9fc>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d902      	bls.n	80019b8 <menu+0x894>
				emniyetCercevesi = 0;
 80019b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001b20 <menu+0x9fc>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80019b8:	f002 f8fa 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80019bc:	2104      	movs	r1, #4
 80019be:	485a      	ldr	r0, [pc, #360]	@ (8001b28 <menu+0xa04>)
 80019c0:	f008 fa4e 	bl	8009e60 <HAL_GPIO_ReadPin>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d115      	bne.n	80019f6 <menu+0x8d2>
 80019ca:	4b58      	ldr	r3, [pc, #352]	@ (8001b2c <menu+0xa08>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	f083 0301 	eor.w	r3, r3, #1
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00e      	beq.n	80019f6 <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 80019d8:	4b51      	ldr	r3, [pc, #324]	@ (8001b20 <menu+0x9fc>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	3b01      	subs	r3, #1
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	4b4f      	ldr	r3, [pc, #316]	@ (8001b20 <menu+0x9fc>)
 80019e2:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 80019e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001b20 <menu+0x9fc>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d002      	beq.n	80019f2 <menu+0x8ce>
		   		emniyetCercevesi = 1;
 80019ec:	4b4c      	ldr	r3, [pc, #304]	@ (8001b20 <menu+0x9fc>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80019f2:	f002 f8dd 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 80019f6:	2108      	movs	r1, #8
 80019f8:	484b      	ldr	r0, [pc, #300]	@ (8001b28 <menu+0xa04>)
 80019fa:	f008 fa31 	bl	8009e60 <HAL_GPIO_ReadPin>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d10d      	bne.n	8001a20 <menu+0x8fc>
 8001a04:	4b49      	ldr	r3, [pc, #292]	@ (8001b2c <menu+0xa08>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	f083 0301 	eor.w	r3, r3, #1
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d006      	beq.n	8001a20 <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 8001a12:	4b43      	ldr	r3, [pc, #268]	@ (8001b20 <menu+0x9fc>)
 8001a14:	781a      	ldrb	r2, [r3, #0]
 8001a16:	4b46      	ldr	r3, [pc, #280]	@ (8001b30 <menu+0xa0c>)
 8001a18:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001a1a:	4b46      	ldr	r3, [pc, #280]	@ (8001b34 <menu+0xa10>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001a20:	4b45      	ldr	r3, [pc, #276]	@ (8001b38 <menu+0xa14>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	2b04      	cmp	r3, #4
 8001a26:	d166      	bne.n	8001af6 <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 8001a28:	4a44      	ldr	r2, [pc, #272]	@ (8001b3c <menu+0xa18>)
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	f006 ff25 	bl	800887c <lcd_print>

		if(yavaslamaLimit == 0) {
 8001a32:	4b43      	ldr	r3, [pc, #268]	@ (8001b40 <menu+0xa1c>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d105      	bne.n	8001a46 <menu+0x922>
			lcd_print(2, 1, pasifText);
 8001a3a:	4a42      	ldr	r2, [pc, #264]	@ (8001b44 <menu+0xa20>)
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	2002      	movs	r0, #2
 8001a40:	f006 ff1c 	bl	800887c <lcd_print>
 8001a44:	e008      	b.n	8001a58 <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 8001a46:	4b3e      	ldr	r3, [pc, #248]	@ (8001b40 <menu+0xa1c>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d104      	bne.n	8001a58 <menu+0x934>
			lcd_print(2, 1, aktifText);
 8001a4e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b48 <menu+0xa24>)
 8001a50:	2101      	movs	r1, #1
 8001a52:	2002      	movs	r0, #2
 8001a54:	f006 ff12 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a58:	2102      	movs	r1, #2
 8001a5a:	4833      	ldr	r0, [pc, #204]	@ (8001b28 <menu+0xa04>)
 8001a5c:	f008 fa00 	bl	8009e60 <HAL_GPIO_ReadPin>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d115      	bne.n	8001a92 <menu+0x96e>
 8001a66:	4b31      	ldr	r3, [pc, #196]	@ (8001b2c <menu+0xa08>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	f083 0301 	eor.w	r3, r3, #1
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00e      	beq.n	8001a92 <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001a74:	4b32      	ldr	r3, [pc, #200]	@ (8001b40 <menu+0xa1c>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	4b30      	ldr	r3, [pc, #192]	@ (8001b40 <menu+0xa1c>)
 8001a7e:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001a80:	4b2f      	ldr	r3, [pc, #188]	@ (8001b40 <menu+0xa1c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d902      	bls.n	8001a8e <menu+0x96a>
				yavaslamaLimit = 0;
 8001a88:	4b2d      	ldr	r3, [pc, #180]	@ (8001b40 <menu+0xa1c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001a8e:	f002 f88f 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a92:	2104      	movs	r1, #4
 8001a94:	4824      	ldr	r0, [pc, #144]	@ (8001b28 <menu+0xa04>)
 8001a96:	f008 f9e3 	bl	8009e60 <HAL_GPIO_ReadPin>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d115      	bne.n	8001acc <menu+0x9a8>
 8001aa0:	4b22      	ldr	r3, [pc, #136]	@ (8001b2c <menu+0xa08>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	f083 0301 	eor.w	r3, r3, #1
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d00e      	beq.n	8001acc <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001aae:	4b24      	ldr	r3, [pc, #144]	@ (8001b40 <menu+0xa1c>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4b22      	ldr	r3, [pc, #136]	@ (8001b40 <menu+0xa1c>)
 8001ab8:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001aba:	4b21      	ldr	r3, [pc, #132]	@ (8001b40 <menu+0xa1c>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <menu+0x9a4>
		   		yavaslamaLimit = 1;
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b40 <menu+0xa1c>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001ac8:	f002 f872 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001acc:	2108      	movs	r1, #8
 8001ace:	4816      	ldr	r0, [pc, #88]	@ (8001b28 <menu+0xa04>)
 8001ad0:	f008 f9c6 	bl	8009e60 <HAL_GPIO_ReadPin>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d10d      	bne.n	8001af6 <menu+0x9d2>
 8001ada:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <menu+0xa08>)
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	f083 0301 	eor.w	r3, r3, #1
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d006      	beq.n	8001af6 <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 8001ae8:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <menu+0xa1c>)
 8001aea:	781a      	ldrb	r2, [r3, #0]
 8001aec:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <menu+0xa0c>)
 8001aee:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001af0:	4b10      	ldr	r3, [pc, #64]	@ (8001b34 <menu+0xa10>)
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001af6:	4b10      	ldr	r3, [pc, #64]	@ (8001b38 <menu+0xa14>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	f040 80aa 	bne.w	8001c54 <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 8001b00:	4a12      	ldr	r2, [pc, #72]	@ (8001b4c <menu+0xa28>)
 8001b02:	2101      	movs	r1, #1
 8001b04:	2001      	movs	r0, #1
 8001b06:	f006 feb9 	bl	800887c <lcd_print>

		if(altLimit == 0) {
 8001b0a:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <menu+0xa2c>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d120      	bne.n	8001b54 <menu+0xa30>
			lcd_print(2, 1, pasifText);
 8001b12:	4a0c      	ldr	r2, [pc, #48]	@ (8001b44 <menu+0xa20>)
 8001b14:	2101      	movs	r1, #1
 8001b16:	2002      	movs	r0, #2
 8001b18:	f006 feb0 	bl	800887c <lcd_print>
 8001b1c:	e023      	b.n	8001b66 <menu+0xa42>
 8001b1e:	bf00      	nop
 8001b20:	20001070 	.word	0x20001070
 8001b24:	200000ec 	.word	0x200000ec
 8001b28:	40010800 	.word	0x40010800
 8001b2c:	2000109c 	.word	0x2000109c
 8001b30:	20000f9c 	.word	0x20000f9c
 8001b34:	20001099 	.word	0x20001099
 8001b38:	2000106c 	.word	0x2000106c
 8001b3c:	20001278 	.word	0x20001278
 8001b40:	20001071 	.word	0x20001071
 8001b44:	20001250 	.word	0x20001250
 8001b48:	20001264 	.word	0x20001264
 8001b4c:	2000128c 	.word	0x2000128c
 8001b50:	20001072 	.word	0x20001072
		} else if(altLimit == 1) {
 8001b54:	4b89      	ldr	r3, [pc, #548]	@ (8001d7c <menu+0xc58>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d104      	bne.n	8001b66 <menu+0xa42>
			lcd_print(2, 1, aktifText);
 8001b5c:	4a88      	ldr	r2, [pc, #544]	@ (8001d80 <menu+0xc5c>)
 8001b5e:	2101      	movs	r1, #1
 8001b60:	2002      	movs	r0, #2
 8001b62:	f006 fe8b 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001b66:	2102      	movs	r1, #2
 8001b68:	4886      	ldr	r0, [pc, #536]	@ (8001d84 <menu+0xc60>)
 8001b6a:	f008 f979 	bl	8009e60 <HAL_GPIO_ReadPin>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d119      	bne.n	8001ba8 <menu+0xa84>
 8001b74:	4b84      	ldr	r3, [pc, #528]	@ (8001d88 <menu+0xc64>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	f083 0301 	eor.w	r3, r3, #1
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d012      	beq.n	8001ba8 <menu+0xa84>
 8001b82:	4b82      	ldr	r3, [pc, #520]	@ (8001d8c <menu+0xc68>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10e      	bne.n	8001ba8 <menu+0xa84>
			altLimit = altLimit + 1;
 8001b8a:	4b7c      	ldr	r3, [pc, #496]	@ (8001d7c <menu+0xc58>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4b7a      	ldr	r3, [pc, #488]	@ (8001d7c <menu+0xc58>)
 8001b94:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001b96:	4b79      	ldr	r3, [pc, #484]	@ (8001d7c <menu+0xc58>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d902      	bls.n	8001ba4 <menu+0xa80>
				altLimit = 0;
 8001b9e:	4b77      	ldr	r3, [pc, #476]	@ (8001d7c <menu+0xc58>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ba4:	f002 f804 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001ba8:	2104      	movs	r1, #4
 8001baa:	4876      	ldr	r0, [pc, #472]	@ (8001d84 <menu+0xc60>)
 8001bac:	f008 f958 	bl	8009e60 <HAL_GPIO_ReadPin>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d119      	bne.n	8001bea <menu+0xac6>
 8001bb6:	4b74      	ldr	r3, [pc, #464]	@ (8001d88 <menu+0xc64>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	f083 0301 	eor.w	r3, r3, #1
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d012      	beq.n	8001bea <menu+0xac6>
 8001bc4:	4b71      	ldr	r3, [pc, #452]	@ (8001d8c <menu+0xc68>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10e      	bne.n	8001bea <menu+0xac6>
			altLimit = altLimit - 1;
 8001bcc:	4b6b      	ldr	r3, [pc, #428]	@ (8001d7c <menu+0xc58>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	4b69      	ldr	r3, [pc, #420]	@ (8001d7c <menu+0xc58>)
 8001bd6:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001bd8:	4b68      	ldr	r3, [pc, #416]	@ (8001d7c <menu+0xc58>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d002      	beq.n	8001be6 <menu+0xac2>
		   		altLimit = 1;
 8001be0:	4b66      	ldr	r3, [pc, #408]	@ (8001d7c <menu+0xc58>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001be6:	f001 ffe3 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001bea:	2108      	movs	r1, #8
 8001bec:	4865      	ldr	r0, [pc, #404]	@ (8001d84 <menu+0xc60>)
 8001bee:	f008 f937 	bl	8009e60 <HAL_GPIO_ReadPin>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d12d      	bne.n	8001c54 <menu+0xb30>
 8001bf8:	4b63      	ldr	r3, [pc, #396]	@ (8001d88 <menu+0xc64>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	f083 0301 	eor.w	r3, r3, #1
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d026      	beq.n	8001c54 <menu+0xb30>
			eepromData[5] = altLimit;
 8001c06:	4b5d      	ldr	r3, [pc, #372]	@ (8001d7c <menu+0xc58>)
 8001c08:	781a      	ldrb	r2, [r3, #0]
 8001c0a:	4b61      	ldr	r3, [pc, #388]	@ (8001d90 <menu+0xc6c>)
 8001c0c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001c0e:	4b5b      	ldr	r3, [pc, #364]	@ (8001d7c <menu+0xc58>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d110      	bne.n	8001c38 <menu+0xb14>
 8001c16:	4b5f      	ldr	r3, [pc, #380]	@ (8001d94 <menu+0xc70>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <menu+0xb02>
 8001c1e:	4b5d      	ldr	r3, [pc, #372]	@ (8001d94 <menu+0xc70>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d108      	bne.n	8001c38 <menu+0xb14>
				kapiTablaAcKonum = 3;
 8001c26:	4b5b      	ldr	r3, [pc, #364]	@ (8001d94 <menu+0xc70>)
 8001c28:	2203      	movs	r2, #3
 8001c2a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001c2c:	4b59      	ldr	r3, [pc, #356]	@ (8001d94 <menu+0xc70>)
 8001c2e:	781a      	ldrb	r2, [r3, #0]
 8001c30:	4b57      	ldr	r3, [pc, #348]	@ (8001d90 <menu+0xc6c>)
 8001c32:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001c36:	e00a      	b.n	8001c4e <menu+0xb2a>
			} else if(altLimit == 0) {
 8001c38:	4b50      	ldr	r3, [pc, #320]	@ (8001d7c <menu+0xc58>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d106      	bne.n	8001c4e <menu+0xb2a>
				platformSilindirTipi = 0;
 8001c40:	4b55      	ldr	r3, [pc, #340]	@ (8001d98 <menu+0xc74>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001c46:	4b54      	ldr	r3, [pc, #336]	@ (8001d98 <menu+0xc74>)
 8001c48:	781a      	ldrb	r2, [r3, #0]
 8001c4a:	4b51      	ldr	r3, [pc, #324]	@ (8001d90 <menu+0xc6c>)
 8001c4c:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001c4e:	4b53      	ldr	r3, [pc, #332]	@ (8001d9c <menu+0xc78>)
 8001c50:	2201      	movs	r2, #1
 8001c52:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001c54:	4b52      	ldr	r3, [pc, #328]	@ (8001da0 <menu+0xc7c>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	2b06      	cmp	r3, #6
 8001c5a:	d166      	bne.n	8001d2a <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 8001c5c:	4a51      	ldr	r2, [pc, #324]	@ (8001da4 <menu+0xc80>)
 8001c5e:	2101      	movs	r1, #1
 8001c60:	2001      	movs	r0, #1
 8001c62:	f006 fe0b 	bl	800887c <lcd_print>

		if(basincSalteri == 0) {
 8001c66:	4b50      	ldr	r3, [pc, #320]	@ (8001da8 <menu+0xc84>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d105      	bne.n	8001c7a <menu+0xb56>
			lcd_print(2, 1, pasifText);
 8001c6e:	4a4f      	ldr	r2, [pc, #316]	@ (8001dac <menu+0xc88>)
 8001c70:	2101      	movs	r1, #1
 8001c72:	2002      	movs	r0, #2
 8001c74:	f006 fe02 	bl	800887c <lcd_print>
 8001c78:	e008      	b.n	8001c8c <menu+0xb68>
		} else if(basincSalteri == 1) {
 8001c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8001da8 <menu+0xc84>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d104      	bne.n	8001c8c <menu+0xb68>
			lcd_print(2, 1, aktifText);
 8001c82:	4a3f      	ldr	r2, [pc, #252]	@ (8001d80 <menu+0xc5c>)
 8001c84:	2101      	movs	r1, #1
 8001c86:	2002      	movs	r0, #2
 8001c88:	f006 fdf8 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c8c:	2102      	movs	r1, #2
 8001c8e:	483d      	ldr	r0, [pc, #244]	@ (8001d84 <menu+0xc60>)
 8001c90:	f008 f8e6 	bl	8009e60 <HAL_GPIO_ReadPin>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d115      	bne.n	8001cc6 <menu+0xba2>
 8001c9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d88 <menu+0xc64>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	f083 0301 	eor.w	r3, r3, #1
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d00e      	beq.n	8001cc6 <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 8001ca8:	4b3f      	ldr	r3, [pc, #252]	@ (8001da8 <menu+0xc84>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	3301      	adds	r3, #1
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	4b3d      	ldr	r3, [pc, #244]	@ (8001da8 <menu+0xc84>)
 8001cb2:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001cb4:	4b3c      	ldr	r3, [pc, #240]	@ (8001da8 <menu+0xc84>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d902      	bls.n	8001cc2 <menu+0xb9e>
				basincSalteri = 0;
 8001cbc:	4b3a      	ldr	r3, [pc, #232]	@ (8001da8 <menu+0xc84>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cc2:	f001 ff75 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cc6:	2104      	movs	r1, #4
 8001cc8:	482e      	ldr	r0, [pc, #184]	@ (8001d84 <menu+0xc60>)
 8001cca:	f008 f8c9 	bl	8009e60 <HAL_GPIO_ReadPin>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d115      	bne.n	8001d00 <menu+0xbdc>
 8001cd4:	4b2c      	ldr	r3, [pc, #176]	@ (8001d88 <menu+0xc64>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	f083 0301 	eor.w	r3, r3, #1
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00e      	beq.n	8001d00 <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 8001ce2:	4b31      	ldr	r3, [pc, #196]	@ (8001da8 <menu+0xc84>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4b2f      	ldr	r3, [pc, #188]	@ (8001da8 <menu+0xc84>)
 8001cec:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001cee:	4b2e      	ldr	r3, [pc, #184]	@ (8001da8 <menu+0xc84>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d002      	beq.n	8001cfc <menu+0xbd8>
		   		basincSalteri = 1;
 8001cf6:	4b2c      	ldr	r3, [pc, #176]	@ (8001da8 <menu+0xc84>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001cfc:	f001 ff58 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d00:	2108      	movs	r1, #8
 8001d02:	4820      	ldr	r0, [pc, #128]	@ (8001d84 <menu+0xc60>)
 8001d04:	f008 f8ac 	bl	8009e60 <HAL_GPIO_ReadPin>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d10d      	bne.n	8001d2a <menu+0xc06>
 8001d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8001d88 <menu+0xc64>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	f083 0301 	eor.w	r3, r3, #1
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <menu+0xc06>
			eepromData[6] = basincSalteri;
 8001d1c:	4b22      	ldr	r3, [pc, #136]	@ (8001da8 <menu+0xc84>)
 8001d1e:	781a      	ldrb	r2, [r3, #0]
 8001d20:	4b1b      	ldr	r3, [pc, #108]	@ (8001d90 <menu+0xc6c>)
 8001d22:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8001d24:	4b1d      	ldr	r3, [pc, #116]	@ (8001d9c <menu+0xc78>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001da0 <menu+0xc7c>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b07      	cmp	r3, #7
 8001d30:	f040 80a9 	bne.w	8001e86 <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 8001d34:	4a1e      	ldr	r2, [pc, #120]	@ (8001db0 <menu+0xc8c>)
 8001d36:	2101      	movs	r1, #1
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f006 fd9f 	bl	800887c <lcd_print>

		if(kapiSecimleri == 0) {
 8001d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001db4 <menu+0xc90>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d105      	bne.n	8001d52 <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 8001d46:	4a19      	ldr	r2, [pc, #100]	@ (8001dac <menu+0xc88>)
 8001d48:	2101      	movs	r1, #1
 8001d4a:	2002      	movs	r0, #2
 8001d4c:	f006 fd96 	bl	800887c <lcd_print>
 8001d50:	e03f      	b.n	8001dd2 <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 8001d52:	4b18      	ldr	r3, [pc, #96]	@ (8001db4 <menu+0xc90>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d105      	bne.n	8001d66 <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 8001d5a:	4a17      	ldr	r2, [pc, #92]	@ (8001db8 <menu+0xc94>)
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	2002      	movs	r0, #2
 8001d60:	f006 fd8c 	bl	800887c <lcd_print>
 8001d64:	e035      	b.n	8001dd2 <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 8001d66:	4b13      	ldr	r3, [pc, #76]	@ (8001db4 <menu+0xc90>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d128      	bne.n	8001dc0 <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 8001d6e:	4a13      	ldr	r2, [pc, #76]	@ (8001dbc <menu+0xc98>)
 8001d70:	2101      	movs	r1, #1
 8001d72:	2002      	movs	r0, #2
 8001d74:	f006 fd82 	bl	800887c <lcd_print>
 8001d78:	e02b      	b.n	8001dd2 <menu+0xcae>
 8001d7a:	bf00      	nop
 8001d7c:	20001072 	.word	0x20001072
 8001d80:	20001264 	.word	0x20001264
 8001d84:	40010800 	.word	0x40010800
 8001d88:	2000109c 	.word	0x2000109c
 8001d8c:	2000106d 	.word	0x2000106d
 8001d90:	20000f9c 	.word	0x20000f9c
 8001d94:	20001079 	.word	0x20001079
 8001d98:	2000107f 	.word	0x2000107f
 8001d9c:	20001099 	.word	0x20001099
 8001da0:	2000106c 	.word	0x2000106c
 8001da4:	200012a0 	.word	0x200012a0
 8001da8:	20001073 	.word	0x20001073
 8001dac:	20001250 	.word	0x20001250
 8001db0:	200012b4 	.word	0x200012b4
 8001db4:	20001074 	.word	0x20001074
 8001db8:	200012c8 	.word	0x200012c8
 8001dbc:	200012dc 	.word	0x200012dc
		} else if(kapiSecimleri == 3) {
 8001dc0:	4b76      	ldr	r3, [pc, #472]	@ (8001f9c <menu+0xe78>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b03      	cmp	r3, #3
 8001dc6:	d104      	bne.n	8001dd2 <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 8001dc8:	4a75      	ldr	r2, [pc, #468]	@ (8001fa0 <menu+0xe7c>)
 8001dca:	2101      	movs	r1, #1
 8001dcc:	2002      	movs	r0, #2
 8001dce:	f006 fd55 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dd2:	2102      	movs	r1, #2
 8001dd4:	4873      	ldr	r0, [pc, #460]	@ (8001fa4 <menu+0xe80>)
 8001dd6:	f008 f843 	bl	8009e60 <HAL_GPIO_ReadPin>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d115      	bne.n	8001e0c <menu+0xce8>
 8001de0:	4b71      	ldr	r3, [pc, #452]	@ (8001fa8 <menu+0xe84>)
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	f083 0301 	eor.w	r3, r3, #1
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00e      	beq.n	8001e0c <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 8001dee:	4b6b      	ldr	r3, [pc, #428]	@ (8001f9c <menu+0xe78>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	3301      	adds	r3, #1
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	4b69      	ldr	r3, [pc, #420]	@ (8001f9c <menu+0xe78>)
 8001df8:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8001dfa:	4b68      	ldr	r3, [pc, #416]	@ (8001f9c <menu+0xe78>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b03      	cmp	r3, #3
 8001e00:	d902      	bls.n	8001e08 <menu+0xce4>
				kapiSecimleri = 0;
 8001e02:	4b66      	ldr	r3, [pc, #408]	@ (8001f9c <menu+0xe78>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e08:	f001 fed2 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e0c:	2104      	movs	r1, #4
 8001e0e:	4865      	ldr	r0, [pc, #404]	@ (8001fa4 <menu+0xe80>)
 8001e10:	f008 f826 	bl	8009e60 <HAL_GPIO_ReadPin>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d115      	bne.n	8001e46 <menu+0xd22>
 8001e1a:	4b63      	ldr	r3, [pc, #396]	@ (8001fa8 <menu+0xe84>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	f083 0301 	eor.w	r3, r3, #1
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00e      	beq.n	8001e46 <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 8001e28:	4b5c      	ldr	r3, [pc, #368]	@ (8001f9c <menu+0xe78>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	4b5a      	ldr	r3, [pc, #360]	@ (8001f9c <menu+0xe78>)
 8001e32:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8001e34:	4b59      	ldr	r3, [pc, #356]	@ (8001f9c <menu+0xe78>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d902      	bls.n	8001e42 <menu+0xd1e>
		   		kapiSecimleri = 3;
 8001e3c:	4b57      	ldr	r3, [pc, #348]	@ (8001f9c <menu+0xe78>)
 8001e3e:	2203      	movs	r2, #3
 8001e40:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e42:	f001 feb5 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e46:	2108      	movs	r1, #8
 8001e48:	4856      	ldr	r0, [pc, #344]	@ (8001fa4 <menu+0xe80>)
 8001e4a:	f008 f809 	bl	8009e60 <HAL_GPIO_ReadPin>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d118      	bne.n	8001e86 <menu+0xd62>
 8001e54:	4b54      	ldr	r3, [pc, #336]	@ (8001fa8 <menu+0xe84>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	f083 0301 	eor.w	r3, r3, #1
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d011      	beq.n	8001e86 <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 8001e62:	4b4e      	ldr	r3, [pc, #312]	@ (8001f9c <menu+0xe78>)
 8001e64:	781a      	ldrb	r2, [r3, #0]
 8001e66:	4b51      	ldr	r3, [pc, #324]	@ (8001fac <menu+0xe88>)
 8001e68:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8001e6a:	4b4c      	ldr	r3, [pc, #304]	@ (8001f9c <menu+0xe78>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d006      	beq.n	8001e80 <menu+0xd5c>
				altLimit = 1;
 8001e72:	4b4f      	ldr	r3, [pc, #316]	@ (8001fb0 <menu+0xe8c>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001e78:	4b4d      	ldr	r3, [pc, #308]	@ (8001fb0 <menu+0xe8c>)
 8001e7a:	781a      	ldrb	r2, [r3, #0]
 8001e7c:	4b4b      	ldr	r3, [pc, #300]	@ (8001fac <menu+0xe88>)
 8001e7e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001e80:	4b4c      	ldr	r3, [pc, #304]	@ (8001fb4 <menu+0xe90>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8001e86:	4b4c      	ldr	r3, [pc, #304]	@ (8001fb8 <menu+0xe94>)
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b08      	cmp	r3, #8
 8001e8c:	d167      	bne.n	8001f5e <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 8001e8e:	4a4b      	ldr	r2, [pc, #300]	@ (8001fbc <menu+0xe98>)
 8001e90:	2101      	movs	r1, #1
 8001e92:	2001      	movs	r0, #1
 8001e94:	f006 fcf2 	bl	800887c <lcd_print>

		if(kapiAcTipi == 0) {
 8001e98:	4b49      	ldr	r3, [pc, #292]	@ (8001fc0 <menu+0xe9c>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d105      	bne.n	8001eac <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 8001ea0:	4a48      	ldr	r2, [pc, #288]	@ (8001fc4 <menu+0xea0>)
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	2002      	movs	r0, #2
 8001ea6:	f006 fce9 	bl	800887c <lcd_print>
 8001eaa:	e008      	b.n	8001ebe <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 8001eac:	4b44      	ldr	r3, [pc, #272]	@ (8001fc0 <menu+0xe9c>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d104      	bne.n	8001ebe <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 8001eb4:	4a44      	ldr	r2, [pc, #272]	@ (8001fc8 <menu+0xea4>)
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	2002      	movs	r0, #2
 8001eba:	f006 fcdf 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ebe:	2102      	movs	r1, #2
 8001ec0:	4838      	ldr	r0, [pc, #224]	@ (8001fa4 <menu+0xe80>)
 8001ec2:	f007 ffcd 	bl	8009e60 <HAL_GPIO_ReadPin>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d115      	bne.n	8001ef8 <menu+0xdd4>
 8001ecc:	4b36      	ldr	r3, [pc, #216]	@ (8001fa8 <menu+0xe84>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	f083 0301 	eor.w	r3, r3, #1
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00e      	beq.n	8001ef8 <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 8001eda:	4b39      	ldr	r3, [pc, #228]	@ (8001fc0 <menu+0xe9c>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	3301      	adds	r3, #1
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4b37      	ldr	r3, [pc, #220]	@ (8001fc0 <menu+0xe9c>)
 8001ee4:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8001ee6:	4b36      	ldr	r3, [pc, #216]	@ (8001fc0 <menu+0xe9c>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d902      	bls.n	8001ef4 <menu+0xdd0>
				kapiAcTipi = 0;
 8001eee:	4b34      	ldr	r3, [pc, #208]	@ (8001fc0 <menu+0xe9c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ef4:	f001 fe5c 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ef8:	2104      	movs	r1, #4
 8001efa:	482a      	ldr	r0, [pc, #168]	@ (8001fa4 <menu+0xe80>)
 8001efc:	f007 ffb0 	bl	8009e60 <HAL_GPIO_ReadPin>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d115      	bne.n	8001f32 <menu+0xe0e>
 8001f06:	4b28      	ldr	r3, [pc, #160]	@ (8001fa8 <menu+0xe84>)
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	f083 0301 	eor.w	r3, r3, #1
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00e      	beq.n	8001f32 <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 8001f14:	4b2a      	ldr	r3, [pc, #168]	@ (8001fc0 <menu+0xe9c>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	4b28      	ldr	r3, [pc, #160]	@ (8001fc0 <menu+0xe9c>)
 8001f1e:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8001f20:	4b27      	ldr	r3, [pc, #156]	@ (8001fc0 <menu+0xe9c>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <menu+0xe0a>
		   		kapiAcTipi = 1;
 8001f28:	4b25      	ldr	r3, [pc, #148]	@ (8001fc0 <menu+0xe9c>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f2e:	f001 fe3f 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f32:	2108      	movs	r1, #8
 8001f34:	481b      	ldr	r0, [pc, #108]	@ (8001fa4 <menu+0xe80>)
 8001f36:	f007 ff93 	bl	8009e60 <HAL_GPIO_ReadPin>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d10e      	bne.n	8001f5e <menu+0xe3a>
 8001f40:	4b19      	ldr	r3, [pc, #100]	@ (8001fa8 <menu+0xe84>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	f083 0301 	eor.w	r3, r3, #1
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d007      	beq.n	8001f5e <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 8001f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc0 <menu+0xe9c>)
 8001f50:	781a      	ldrb	r2, [r3, #0]
 8001f52:	4b16      	ldr	r3, [pc, #88]	@ (8001fac <menu+0xe88>)
 8001f54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 8001f58:	4b16      	ldr	r3, [pc, #88]	@ (8001fb4 <menu+0xe90>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8001f5e:	4b16      	ldr	r3, [pc, #88]	@ (8001fb8 <menu+0xe94>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b09      	cmp	r3, #9
 8001f64:	f040 8092 	bne.w	800208c <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 8001f68:	4a18      	ldr	r2, [pc, #96]	@ (8001fcc <menu+0xea8>)
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	f006 fc85 	bl	800887c <lcd_print>

		if(kapi1Tip == 0) {
 8001f72:	4b17      	ldr	r3, [pc, #92]	@ (8001fd0 <menu+0xeac>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d105      	bne.n	8001f86 <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 8001f7a:	4a16      	ldr	r2, [pc, #88]	@ (8001fd4 <menu+0xeb0>)
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	2002      	movs	r0, #2
 8001f80:	f006 fc7c 	bl	800887c <lcd_print>
 8001f84:	e033      	b.n	8001fee <menu+0xeca>
		} else if(kapi1Tip == 1) {
 8001f86:	4b12      	ldr	r3, [pc, #72]	@ (8001fd0 <menu+0xeac>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d126      	bne.n	8001fdc <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 8001f8e:	4a12      	ldr	r2, [pc, #72]	@ (8001fd8 <menu+0xeb4>)
 8001f90:	2101      	movs	r1, #1
 8001f92:	2002      	movs	r0, #2
 8001f94:	f006 fc72 	bl	800887c <lcd_print>
 8001f98:	e029      	b.n	8001fee <menu+0xeca>
 8001f9a:	bf00      	nop
 8001f9c:	20001074 	.word	0x20001074
 8001fa0:	200012f0 	.word	0x200012f0
 8001fa4:	40010800 	.word	0x40010800
 8001fa8:	2000109c 	.word	0x2000109c
 8001fac:	20000f9c 	.word	0x20000f9c
 8001fb0:	20001072 	.word	0x20001072
 8001fb4:	20001099 	.word	0x20001099
 8001fb8:	2000106c 	.word	0x2000106c
 8001fbc:	20001304 	.word	0x20001304
 8001fc0:	20001078 	.word	0x20001078
 8001fc4:	20001318 	.word	0x20001318
 8001fc8:	2000132c 	.word	0x2000132c
 8001fcc:	20001340 	.word	0x20001340
 8001fd0:	20001075 	.word	0x20001075
 8001fd4:	20000100 	.word	0x20000100
 8001fd8:	20001354 	.word	0x20001354
		} else if(kapi1Tip == 2) {
 8001fdc:	4b73      	ldr	r3, [pc, #460]	@ (80021ac <menu+0x1088>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d104      	bne.n	8001fee <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 8001fe4:	4a72      	ldr	r2, [pc, #456]	@ (80021b0 <menu+0x108c>)
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	2002      	movs	r0, #2
 8001fea:	f006 fc47 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fee:	2102      	movs	r1, #2
 8001ff0:	4870      	ldr	r0, [pc, #448]	@ (80021b4 <menu+0x1090>)
 8001ff2:	f007 ff35 	bl	8009e60 <HAL_GPIO_ReadPin>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d115      	bne.n	8002028 <menu+0xf04>
 8001ffc:	4b6e      	ldr	r3, [pc, #440]	@ (80021b8 <menu+0x1094>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	f083 0301 	eor.w	r3, r3, #1
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00e      	beq.n	8002028 <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 800200a:	4b68      	ldr	r3, [pc, #416]	@ (80021ac <menu+0x1088>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	3301      	adds	r3, #1
 8002010:	b2da      	uxtb	r2, r3
 8002012:	4b66      	ldr	r3, [pc, #408]	@ (80021ac <menu+0x1088>)
 8002014:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002016:	4b65      	ldr	r3, [pc, #404]	@ (80021ac <menu+0x1088>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b02      	cmp	r3, #2
 800201c:	d902      	bls.n	8002024 <menu+0xf00>
				kapi1Tip = 0;
 800201e:	4b63      	ldr	r3, [pc, #396]	@ (80021ac <menu+0x1088>)
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002024:	f001 fdc4 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002028:	2104      	movs	r1, #4
 800202a:	4862      	ldr	r0, [pc, #392]	@ (80021b4 <menu+0x1090>)
 800202c:	f007 ff18 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002030:	4603      	mov	r3, r0
 8002032:	2b01      	cmp	r3, #1
 8002034:	d115      	bne.n	8002062 <menu+0xf3e>
 8002036:	4b60      	ldr	r3, [pc, #384]	@ (80021b8 <menu+0x1094>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	f083 0301 	eor.w	r3, r3, #1
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00e      	beq.n	8002062 <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 8002044:	4b59      	ldr	r3, [pc, #356]	@ (80021ac <menu+0x1088>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	3b01      	subs	r3, #1
 800204a:	b2da      	uxtb	r2, r3
 800204c:	4b57      	ldr	r3, [pc, #348]	@ (80021ac <menu+0x1088>)
 800204e:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002050:	4b56      	ldr	r3, [pc, #344]	@ (80021ac <menu+0x1088>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b03      	cmp	r3, #3
 8002056:	d902      	bls.n	800205e <menu+0xf3a>
		   		kapi1Tip = 2;
 8002058:	4b54      	ldr	r3, [pc, #336]	@ (80021ac <menu+0x1088>)
 800205a:	2202      	movs	r2, #2
 800205c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800205e:	f001 fda7 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002062:	2108      	movs	r1, #8
 8002064:	4853      	ldr	r0, [pc, #332]	@ (80021b4 <menu+0x1090>)
 8002066:	f007 fefb 	bl	8009e60 <HAL_GPIO_ReadPin>
 800206a:	4603      	mov	r3, r0
 800206c:	2b01      	cmp	r3, #1
 800206e:	d10d      	bne.n	800208c <menu+0xf68>
 8002070:	4b51      	ldr	r3, [pc, #324]	@ (80021b8 <menu+0x1094>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	f083 0301 	eor.w	r3, r3, #1
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d006      	beq.n	800208c <menu+0xf68>
			eepromData[8] = kapi1Tip;
 800207e:	4b4b      	ldr	r3, [pc, #300]	@ (80021ac <menu+0x1088>)
 8002080:	781a      	ldrb	r2, [r3, #0]
 8002082:	4b4e      	ldr	r3, [pc, #312]	@ (80021bc <menu+0x1098>)
 8002084:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002086:	4b4e      	ldr	r3, [pc, #312]	@ (80021c0 <menu+0x109c>)
 8002088:	2201      	movs	r2, #1
 800208a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 800208c:	4b4d      	ldr	r3, [pc, #308]	@ (80021c4 <menu+0x10a0>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b0a      	cmp	r3, #10
 8002092:	d16c      	bne.n	800216e <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 8002094:	4a4c      	ldr	r2, [pc, #304]	@ (80021c8 <menu+0x10a4>)
 8002096:	2101      	movs	r1, #1
 8002098:	2001      	movs	r0, #1
 800209a:	f006 fbef 	bl	800887c <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 800209e:	4a4b      	ldr	r2, [pc, #300]	@ (80021cc <menu+0x10a8>)
 80020a0:	2101      	movs	r1, #1
 80020a2:	2002      	movs	r0, #2
 80020a4:	f006 fbea 	bl	800887c <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 80020a8:	4b49      	ldr	r3, [pc, #292]	@ (80021d0 <menu+0x10ac>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	220a      	movs	r2, #10
 80020ae:	4949      	ldr	r1, [pc, #292]	@ (80021d4 <menu+0x10b0>)
 80020b0:	4618      	mov	r0, r3
 80020b2:	f00a fecb 	bl	800ce4c <itoa>
		lcd_print(2,16,snum);
 80020b6:	4a47      	ldr	r2, [pc, #284]	@ (80021d4 <menu+0x10b0>)
 80020b8:	2110      	movs	r1, #16
 80020ba:	2002      	movs	r0, #2
 80020bc:	f006 fbde 	bl	800887c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80020c0:	2102      	movs	r1, #2
 80020c2:	483c      	ldr	r0, [pc, #240]	@ (80021b4 <menu+0x1090>)
 80020c4:	f007 fecc 	bl	8009e60 <HAL_GPIO_ReadPin>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d119      	bne.n	8002102 <menu+0xfde>
 80020ce:	4b3a      	ldr	r3, [pc, #232]	@ (80021b8 <menu+0x1094>)
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	f083 0301 	eor.w	r3, r3, #1
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d012      	beq.n	8002102 <menu+0xfde>
 80020dc:	4b33      	ldr	r3, [pc, #204]	@ (80021ac <menu+0x1088>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d10e      	bne.n	8002102 <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 80020e4:	4b3a      	ldr	r3, [pc, #232]	@ (80021d0 <menu+0x10ac>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	3301      	adds	r3, #1
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	4b38      	ldr	r3, [pc, #224]	@ (80021d0 <menu+0x10ac>)
 80020ee:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 80020f0:	4b37      	ldr	r3, [pc, #220]	@ (80021d0 <menu+0x10ac>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b05      	cmp	r3, #5
 80020f6:	d902      	bls.n	80020fe <menu+0xfda>
				kapi1AcSure = 0;
 80020f8:	4b35      	ldr	r3, [pc, #212]	@ (80021d0 <menu+0x10ac>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020fe:	f001 fd57 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002102:	2104      	movs	r1, #4
 8002104:	482b      	ldr	r0, [pc, #172]	@ (80021b4 <menu+0x1090>)
 8002106:	f007 feab 	bl	8009e60 <HAL_GPIO_ReadPin>
 800210a:	4603      	mov	r3, r0
 800210c:	2b01      	cmp	r3, #1
 800210e:	d119      	bne.n	8002144 <menu+0x1020>
 8002110:	4b29      	ldr	r3, [pc, #164]	@ (80021b8 <menu+0x1094>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	f083 0301 	eor.w	r3, r3, #1
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d012      	beq.n	8002144 <menu+0x1020>
 800211e:	4b23      	ldr	r3, [pc, #140]	@ (80021ac <menu+0x1088>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10e      	bne.n	8002144 <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 8002126:	4b2a      	ldr	r3, [pc, #168]	@ (80021d0 <menu+0x10ac>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	3b01      	subs	r3, #1
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4b28      	ldr	r3, [pc, #160]	@ (80021d0 <menu+0x10ac>)
 8002130:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002132:	4b27      	ldr	r3, [pc, #156]	@ (80021d0 <menu+0x10ac>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2b06      	cmp	r3, #6
 8002138:	d902      	bls.n	8002140 <menu+0x101c>
		   		kapi1AcSure = 5;
 800213a:	4b25      	ldr	r3, [pc, #148]	@ (80021d0 <menu+0x10ac>)
 800213c:	2205      	movs	r2, #5
 800213e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002140:	f001 fd36 	bl	8003bb0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002144:	2108      	movs	r1, #8
 8002146:	481b      	ldr	r0, [pc, #108]	@ (80021b4 <menu+0x1090>)
 8002148:	f007 fe8a 	bl	8009e60 <HAL_GPIO_ReadPin>
 800214c:	4603      	mov	r3, r0
 800214e:	2b01      	cmp	r3, #1
 8002150:	d10d      	bne.n	800216e <menu+0x104a>
 8002152:	4b19      	ldr	r3, [pc, #100]	@ (80021b8 <menu+0x1094>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	f083 0301 	eor.w	r3, r3, #1
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d006      	beq.n	800216e <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 8002160:	4b1b      	ldr	r3, [pc, #108]	@ (80021d0 <menu+0x10ac>)
 8002162:	781a      	ldrb	r2, [r3, #0]
 8002164:	4b15      	ldr	r3, [pc, #84]	@ (80021bc <menu+0x1098>)
 8002166:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002168:	4b15      	ldr	r3, [pc, #84]	@ (80021c0 <menu+0x109c>)
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 800216e:	4b15      	ldr	r3, [pc, #84]	@ (80021c4 <menu+0x10a0>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	2b0b      	cmp	r3, #11
 8002174:	f040 8090 	bne.w	8002298 <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 8002178:	4a17      	ldr	r2, [pc, #92]	@ (80021d8 <menu+0x10b4>)
 800217a:	2101      	movs	r1, #1
 800217c:	2001      	movs	r0, #1
 800217e:	f006 fb7d 	bl	800887c <lcd_print>

		if(kapi2Tip == 0) {
 8002182:	4b16      	ldr	r3, [pc, #88]	@ (80021dc <menu+0x10b8>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d105      	bne.n	8002196 <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 800218a:	4a15      	ldr	r2, [pc, #84]	@ (80021e0 <menu+0x10bc>)
 800218c:	2101      	movs	r1, #1
 800218e:	2002      	movs	r0, #2
 8002190:	f006 fb74 	bl	800887c <lcd_print>
 8002194:	e031      	b.n	80021fa <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 8002196:	4b11      	ldr	r3, [pc, #68]	@ (80021dc <menu+0x10b8>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d124      	bne.n	80021e8 <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 800219e:	4a11      	ldr	r2, [pc, #68]	@ (80021e4 <menu+0x10c0>)
 80021a0:	2101      	movs	r1, #1
 80021a2:	2002      	movs	r0, #2
 80021a4:	f006 fb6a 	bl	800887c <lcd_print>
 80021a8:	e027      	b.n	80021fa <menu+0x10d6>
 80021aa:	bf00      	nop
 80021ac:	20001075 	.word	0x20001075
 80021b0:	20000114 	.word	0x20000114
 80021b4:	40010800 	.word	0x40010800
 80021b8:	2000109c 	.word	0x2000109c
 80021bc:	20000f9c 	.word	0x20000f9c
 80021c0:	20001099 	.word	0x20001099
 80021c4:	2000106c 	.word	0x2000106c
 80021c8:	20001368 	.word	0x20001368
 80021cc:	2000137c 	.word	0x2000137c
 80021d0:	20001085 	.word	0x20001085
 80021d4:	2000100c 	.word	0x2000100c
 80021d8:	20001390 	.word	0x20001390
 80021dc:	20001076 	.word	0x20001076
 80021e0:	20000100 	.word	0x20000100
 80021e4:	20001354 	.word	0x20001354
		} else if(kapi2Tip == 2) {
 80021e8:	4b73      	ldr	r3, [pc, #460]	@ (80023b8 <menu+0x1294>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d104      	bne.n	80021fa <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 80021f0:	4a72      	ldr	r2, [pc, #456]	@ (80023bc <menu+0x1298>)
 80021f2:	2101      	movs	r1, #1
 80021f4:	2002      	movs	r0, #2
 80021f6:	f006 fb41 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80021fa:	2102      	movs	r1, #2
 80021fc:	4870      	ldr	r0, [pc, #448]	@ (80023c0 <menu+0x129c>)
 80021fe:	f007 fe2f 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002202:	4603      	mov	r3, r0
 8002204:	2b01      	cmp	r3, #1
 8002206:	d115      	bne.n	8002234 <menu+0x1110>
 8002208:	4b6e      	ldr	r3, [pc, #440]	@ (80023c4 <menu+0x12a0>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	f083 0301 	eor.w	r3, r3, #1
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d00e      	beq.n	8002234 <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 8002216:	4b68      	ldr	r3, [pc, #416]	@ (80023b8 <menu+0x1294>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	3301      	adds	r3, #1
 800221c:	b2da      	uxtb	r2, r3
 800221e:	4b66      	ldr	r3, [pc, #408]	@ (80023b8 <menu+0x1294>)
 8002220:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002222:	4b65      	ldr	r3, [pc, #404]	@ (80023b8 <menu+0x1294>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d902      	bls.n	8002230 <menu+0x110c>
				kapi2Tip = 0;
 800222a:	4b63      	ldr	r3, [pc, #396]	@ (80023b8 <menu+0x1294>)
 800222c:	2200      	movs	r2, #0
 800222e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002230:	f001 fcbe 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002234:	2104      	movs	r1, #4
 8002236:	4862      	ldr	r0, [pc, #392]	@ (80023c0 <menu+0x129c>)
 8002238:	f007 fe12 	bl	8009e60 <HAL_GPIO_ReadPin>
 800223c:	4603      	mov	r3, r0
 800223e:	2b01      	cmp	r3, #1
 8002240:	d115      	bne.n	800226e <menu+0x114a>
 8002242:	4b60      	ldr	r3, [pc, #384]	@ (80023c4 <menu+0x12a0>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	f083 0301 	eor.w	r3, r3, #1
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00e      	beq.n	800226e <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 8002250:	4b59      	ldr	r3, [pc, #356]	@ (80023b8 <menu+0x1294>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	3b01      	subs	r3, #1
 8002256:	b2da      	uxtb	r2, r3
 8002258:	4b57      	ldr	r3, [pc, #348]	@ (80023b8 <menu+0x1294>)
 800225a:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 800225c:	4b56      	ldr	r3, [pc, #344]	@ (80023b8 <menu+0x1294>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b03      	cmp	r3, #3
 8002262:	d902      	bls.n	800226a <menu+0x1146>
		   		kapi2Tip = 2;
 8002264:	4b54      	ldr	r3, [pc, #336]	@ (80023b8 <menu+0x1294>)
 8002266:	2202      	movs	r2, #2
 8002268:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800226a:	f001 fca1 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800226e:	2108      	movs	r1, #8
 8002270:	4853      	ldr	r0, [pc, #332]	@ (80023c0 <menu+0x129c>)
 8002272:	f007 fdf5 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002276:	4603      	mov	r3, r0
 8002278:	2b01      	cmp	r3, #1
 800227a:	d10d      	bne.n	8002298 <menu+0x1174>
 800227c:	4b51      	ldr	r3, [pc, #324]	@ (80023c4 <menu+0x12a0>)
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	f083 0301 	eor.w	r3, r3, #1
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d006      	beq.n	8002298 <menu+0x1174>
			eepromData[10] = kapi2Tip;
 800228a:	4b4b      	ldr	r3, [pc, #300]	@ (80023b8 <menu+0x1294>)
 800228c:	781a      	ldrb	r2, [r3, #0]
 800228e:	4b4e      	ldr	r3, [pc, #312]	@ (80023c8 <menu+0x12a4>)
 8002290:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002292:	4b4e      	ldr	r3, [pc, #312]	@ (80023cc <menu+0x12a8>)
 8002294:	2201      	movs	r2, #1
 8002296:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002298:	4b4d      	ldr	r3, [pc, #308]	@ (80023d0 <menu+0x12ac>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b0c      	cmp	r3, #12
 800229e:	d16c      	bne.n	800237a <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 80022a0:	4a4c      	ldr	r2, [pc, #304]	@ (80023d4 <menu+0x12b0>)
 80022a2:	2101      	movs	r1, #1
 80022a4:	2001      	movs	r0, #1
 80022a6:	f006 fae9 	bl	800887c <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 80022aa:	4a4b      	ldr	r2, [pc, #300]	@ (80023d8 <menu+0x12b4>)
 80022ac:	2101      	movs	r1, #1
 80022ae:	2002      	movs	r0, #2
 80022b0:	f006 fae4 	bl	800887c <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 80022b4:	4b49      	ldr	r3, [pc, #292]	@ (80023dc <menu+0x12b8>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	220a      	movs	r2, #10
 80022ba:	4949      	ldr	r1, [pc, #292]	@ (80023e0 <menu+0x12bc>)
 80022bc:	4618      	mov	r0, r3
 80022be:	f00a fdc5 	bl	800ce4c <itoa>
		lcd_print(2,16,snum);
 80022c2:	4a47      	ldr	r2, [pc, #284]	@ (80023e0 <menu+0x12bc>)
 80022c4:	2110      	movs	r1, #16
 80022c6:	2002      	movs	r0, #2
 80022c8:	f006 fad8 	bl	800887c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80022cc:	2102      	movs	r1, #2
 80022ce:	483c      	ldr	r0, [pc, #240]	@ (80023c0 <menu+0x129c>)
 80022d0:	f007 fdc6 	bl	8009e60 <HAL_GPIO_ReadPin>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d119      	bne.n	800230e <menu+0x11ea>
 80022da:	4b3a      	ldr	r3, [pc, #232]	@ (80023c4 <menu+0x12a0>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	f083 0301 	eor.w	r3, r3, #1
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d012      	beq.n	800230e <menu+0x11ea>
 80022e8:	4b33      	ldr	r3, [pc, #204]	@ (80023b8 <menu+0x1294>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10e      	bne.n	800230e <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 80022f0:	4b3a      	ldr	r3, [pc, #232]	@ (80023dc <menu+0x12b8>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	3301      	adds	r3, #1
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	4b38      	ldr	r3, [pc, #224]	@ (80023dc <menu+0x12b8>)
 80022fa:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 80022fc:	4b37      	ldr	r3, [pc, #220]	@ (80023dc <menu+0x12b8>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b05      	cmp	r3, #5
 8002302:	d902      	bls.n	800230a <menu+0x11e6>
				kapi2AcSure = 0;
 8002304:	4b35      	ldr	r3, [pc, #212]	@ (80023dc <menu+0x12b8>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800230a:	f001 fc51 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800230e:	2104      	movs	r1, #4
 8002310:	482b      	ldr	r0, [pc, #172]	@ (80023c0 <menu+0x129c>)
 8002312:	f007 fda5 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002316:	4603      	mov	r3, r0
 8002318:	2b01      	cmp	r3, #1
 800231a:	d119      	bne.n	8002350 <menu+0x122c>
 800231c:	4b29      	ldr	r3, [pc, #164]	@ (80023c4 <menu+0x12a0>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	f083 0301 	eor.w	r3, r3, #1
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d012      	beq.n	8002350 <menu+0x122c>
 800232a:	4b23      	ldr	r3, [pc, #140]	@ (80023b8 <menu+0x1294>)
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10e      	bne.n	8002350 <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 8002332:	4b2a      	ldr	r3, [pc, #168]	@ (80023dc <menu+0x12b8>)
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	3b01      	subs	r3, #1
 8002338:	b2da      	uxtb	r2, r3
 800233a:	4b28      	ldr	r3, [pc, #160]	@ (80023dc <menu+0x12b8>)
 800233c:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 800233e:	4b27      	ldr	r3, [pc, #156]	@ (80023dc <menu+0x12b8>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b06      	cmp	r3, #6
 8002344:	d902      	bls.n	800234c <menu+0x1228>
		   		kapi2AcSure = 5;
 8002346:	4b25      	ldr	r3, [pc, #148]	@ (80023dc <menu+0x12b8>)
 8002348:	2205      	movs	r2, #5
 800234a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800234c:	f001 fc30 	bl	8003bb0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002350:	2108      	movs	r1, #8
 8002352:	481b      	ldr	r0, [pc, #108]	@ (80023c0 <menu+0x129c>)
 8002354:	f007 fd84 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002358:	4603      	mov	r3, r0
 800235a:	2b01      	cmp	r3, #1
 800235c:	d10d      	bne.n	800237a <menu+0x1256>
 800235e:	4b19      	ldr	r3, [pc, #100]	@ (80023c4 <menu+0x12a0>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	f083 0301 	eor.w	r3, r3, #1
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d006      	beq.n	800237a <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 800236c:	4b1b      	ldr	r3, [pc, #108]	@ (80023dc <menu+0x12b8>)
 800236e:	781a      	ldrb	r2, [r3, #0]
 8002370:	4b15      	ldr	r3, [pc, #84]	@ (80023c8 <menu+0x12a4>)
 8002372:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002374:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <menu+0x12a8>)
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 800237a:	4b15      	ldr	r3, [pc, #84]	@ (80023d0 <menu+0x12ac>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b0d      	cmp	r3, #13
 8002380:	f040 8090 	bne.w	80024a4 <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 8002384:	4a17      	ldr	r2, [pc, #92]	@ (80023e4 <menu+0x12c0>)
 8002386:	2101      	movs	r1, #1
 8002388:	2001      	movs	r0, #1
 800238a:	f006 fa77 	bl	800887c <lcd_print>

		if(kapitablaTip == 0) {
 800238e:	4b16      	ldr	r3, [pc, #88]	@ (80023e8 <menu+0x12c4>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d105      	bne.n	80023a2 <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 8002396:	4a15      	ldr	r2, [pc, #84]	@ (80023ec <menu+0x12c8>)
 8002398:	2101      	movs	r1, #1
 800239a:	2002      	movs	r0, #2
 800239c:	f006 fa6e 	bl	800887c <lcd_print>
 80023a0:	e031      	b.n	8002406 <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 80023a2:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <menu+0x12c4>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d124      	bne.n	80023f4 <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 80023aa:	4a11      	ldr	r2, [pc, #68]	@ (80023f0 <menu+0x12cc>)
 80023ac:	2101      	movs	r1, #1
 80023ae:	2002      	movs	r0, #2
 80023b0:	f006 fa64 	bl	800887c <lcd_print>
 80023b4:	e027      	b.n	8002406 <menu+0x12e2>
 80023b6:	bf00      	nop
 80023b8:	20001076 	.word	0x20001076
 80023bc:	20000114 	.word	0x20000114
 80023c0:	40010800 	.word	0x40010800
 80023c4:	2000109c 	.word	0x2000109c
 80023c8:	20000f9c 	.word	0x20000f9c
 80023cc:	20001099 	.word	0x20001099
 80023d0:	2000106c 	.word	0x2000106c
 80023d4:	200013a4 	.word	0x200013a4
 80023d8:	2000137c 	.word	0x2000137c
 80023dc:	20001086 	.word	0x20001086
 80023e0:	2000100c 	.word	0x2000100c
 80023e4:	200013b8 	.word	0x200013b8
 80023e8:	20001077 	.word	0x20001077
 80023ec:	20000100 	.word	0x20000100
 80023f0:	20001354 	.word	0x20001354
		} else if(kapitablaTip == 2) {
 80023f4:	4b3f      	ldr	r3, [pc, #252]	@ (80024f4 <menu+0x13d0>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d104      	bne.n	8002406 <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 80023fc:	4a3e      	ldr	r2, [pc, #248]	@ (80024f8 <menu+0x13d4>)
 80023fe:	2101      	movs	r1, #1
 8002400:	2002      	movs	r0, #2
 8002402:	f006 fa3b 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002406:	2102      	movs	r1, #2
 8002408:	483c      	ldr	r0, [pc, #240]	@ (80024fc <menu+0x13d8>)
 800240a:	f007 fd29 	bl	8009e60 <HAL_GPIO_ReadPin>
 800240e:	4603      	mov	r3, r0
 8002410:	2b01      	cmp	r3, #1
 8002412:	d115      	bne.n	8002440 <menu+0x131c>
 8002414:	4b3a      	ldr	r3, [pc, #232]	@ (8002500 <menu+0x13dc>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	f083 0301 	eor.w	r3, r3, #1
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00e      	beq.n	8002440 <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 8002422:	4b34      	ldr	r3, [pc, #208]	@ (80024f4 <menu+0x13d0>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	3301      	adds	r3, #1
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4b32      	ldr	r3, [pc, #200]	@ (80024f4 <menu+0x13d0>)
 800242c:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 800242e:	4b31      	ldr	r3, [pc, #196]	@ (80024f4 <menu+0x13d0>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b02      	cmp	r3, #2
 8002434:	d902      	bls.n	800243c <menu+0x1318>
				kapitablaTip = 0;
 8002436:	4b2f      	ldr	r3, [pc, #188]	@ (80024f4 <menu+0x13d0>)
 8002438:	2200      	movs	r2, #0
 800243a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800243c:	f001 fbb8 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002440:	2104      	movs	r1, #4
 8002442:	482e      	ldr	r0, [pc, #184]	@ (80024fc <menu+0x13d8>)
 8002444:	f007 fd0c 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002448:	4603      	mov	r3, r0
 800244a:	2b01      	cmp	r3, #1
 800244c:	d115      	bne.n	800247a <menu+0x1356>
 800244e:	4b2c      	ldr	r3, [pc, #176]	@ (8002500 <menu+0x13dc>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	f083 0301 	eor.w	r3, r3, #1
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00e      	beq.n	800247a <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 800245c:	4b25      	ldr	r3, [pc, #148]	@ (80024f4 <menu+0x13d0>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	3b01      	subs	r3, #1
 8002462:	b2da      	uxtb	r2, r3
 8002464:	4b23      	ldr	r3, [pc, #140]	@ (80024f4 <menu+0x13d0>)
 8002466:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002468:	4b22      	ldr	r3, [pc, #136]	@ (80024f4 <menu+0x13d0>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b03      	cmp	r3, #3
 800246e:	d902      	bls.n	8002476 <menu+0x1352>
		   		kapitablaTip = 2;
 8002470:	4b20      	ldr	r3, [pc, #128]	@ (80024f4 <menu+0x13d0>)
 8002472:	2202      	movs	r2, #2
 8002474:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002476:	f001 fb9b 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800247a:	2108      	movs	r1, #8
 800247c:	481f      	ldr	r0, [pc, #124]	@ (80024fc <menu+0x13d8>)
 800247e:	f007 fcef 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002482:	4603      	mov	r3, r0
 8002484:	2b01      	cmp	r3, #1
 8002486:	d10d      	bne.n	80024a4 <menu+0x1380>
 8002488:	4b1d      	ldr	r3, [pc, #116]	@ (8002500 <menu+0x13dc>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	f083 0301 	eor.w	r3, r3, #1
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d006      	beq.n	80024a4 <menu+0x1380>
			eepromData[12] = kapitablaTip;
 8002496:	4b17      	ldr	r3, [pc, #92]	@ (80024f4 <menu+0x13d0>)
 8002498:	781a      	ldrb	r2, [r3, #0]
 800249a:	4b1a      	ldr	r3, [pc, #104]	@ (8002504 <menu+0x13e0>)
 800249c:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 800249e:	4b1a      	ldr	r3, [pc, #104]	@ (8002508 <menu+0x13e4>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 80024a4:	4b19      	ldr	r3, [pc, #100]	@ (800250c <menu+0x13e8>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b0e      	cmp	r3, #14
 80024aa:	f040 80a3 	bne.w	80025f4 <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 80024ae:	4a18      	ldr	r2, [pc, #96]	@ (8002510 <menu+0x13ec>)
 80024b0:	2101      	movs	r1, #1
 80024b2:	2001      	movs	r0, #1
 80024b4:	f006 f9e2 	bl	800887c <lcd_print>

		if(kapiTablaAcKonum == 0) {
 80024b8:	4b16      	ldr	r3, [pc, #88]	@ (8002514 <menu+0x13f0>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d105      	bne.n	80024cc <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 80024c0:	4a15      	ldr	r2, [pc, #84]	@ (8002518 <menu+0x13f4>)
 80024c2:	2101      	movs	r1, #1
 80024c4:	2002      	movs	r0, #2
 80024c6:	f006 f9d9 	bl	800887c <lcd_print>
 80024ca:	e034      	b.n	8002536 <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 80024cc:	4b11      	ldr	r3, [pc, #68]	@ (8002514 <menu+0x13f0>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d105      	bne.n	80024e0 <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 80024d4:	4a11      	ldr	r2, [pc, #68]	@ (800251c <menu+0x13f8>)
 80024d6:	2101      	movs	r1, #1
 80024d8:	2002      	movs	r0, #2
 80024da:	f006 f9cf 	bl	800887c <lcd_print>
 80024de:	e02a      	b.n	8002536 <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 80024e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002514 <menu+0x13f0>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d11d      	bne.n	8002524 <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 80024e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002520 <menu+0x13fc>)
 80024ea:	2101      	movs	r1, #1
 80024ec:	2002      	movs	r0, #2
 80024ee:	f006 f9c5 	bl	800887c <lcd_print>
 80024f2:	e020      	b.n	8002536 <menu+0x1412>
 80024f4:	20001077 	.word	0x20001077
 80024f8:	20000114 	.word	0x20000114
 80024fc:	40010800 	.word	0x40010800
 8002500:	2000109c 	.word	0x2000109c
 8002504:	20000f9c 	.word	0x20000f9c
 8002508:	20001099 	.word	0x20001099
 800250c:	2000106c 	.word	0x2000106c
 8002510:	200013cc 	.word	0x200013cc
 8002514:	20001079 	.word	0x20001079
 8002518:	200013e0 	.word	0x200013e0
 800251c:	200013f4 	.word	0x200013f4
 8002520:	20001408 	.word	0x20001408
		} else if(kapiTablaAcKonum == 3) {
 8002524:	4b76      	ldr	r3, [pc, #472]	@ (8002700 <menu+0x15dc>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b03      	cmp	r3, #3
 800252a:	d104      	bne.n	8002536 <menu+0x1412>
			lcd_print(2, 1, pasifText);
 800252c:	4a75      	ldr	r2, [pc, #468]	@ (8002704 <menu+0x15e0>)
 800252e:	2101      	movs	r1, #1
 8002530:	2002      	movs	r0, #2
 8002532:	f006 f9a3 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002536:	2102      	movs	r1, #2
 8002538:	4873      	ldr	r0, [pc, #460]	@ (8002708 <menu+0x15e4>)
 800253a:	f007 fc91 	bl	8009e60 <HAL_GPIO_ReadPin>
 800253e:	4603      	mov	r3, r0
 8002540:	2b01      	cmp	r3, #1
 8002542:	d115      	bne.n	8002570 <menu+0x144c>
 8002544:	4b71      	ldr	r3, [pc, #452]	@ (800270c <menu+0x15e8>)
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	f083 0301 	eor.w	r3, r3, #1
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00e      	beq.n	8002570 <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002552:	4b6b      	ldr	r3, [pc, #428]	@ (8002700 <menu+0x15dc>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	3301      	adds	r3, #1
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4b69      	ldr	r3, [pc, #420]	@ (8002700 <menu+0x15dc>)
 800255c:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 800255e:	4b68      	ldr	r3, [pc, #416]	@ (8002700 <menu+0x15dc>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d902      	bls.n	800256c <menu+0x1448>
				kapiTablaAcKonum = 0;
 8002566:	4b66      	ldr	r3, [pc, #408]	@ (8002700 <menu+0x15dc>)
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800256c:	f001 fb20 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002570:	2104      	movs	r1, #4
 8002572:	4865      	ldr	r0, [pc, #404]	@ (8002708 <menu+0x15e4>)
 8002574:	f007 fc74 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002578:	4603      	mov	r3, r0
 800257a:	2b01      	cmp	r3, #1
 800257c:	d115      	bne.n	80025aa <menu+0x1486>
 800257e:	4b63      	ldr	r3, [pc, #396]	@ (800270c <menu+0x15e8>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	f083 0301 	eor.w	r3, r3, #1
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00e      	beq.n	80025aa <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 800258c:	4b5c      	ldr	r3, [pc, #368]	@ (8002700 <menu+0x15dc>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	3b01      	subs	r3, #1
 8002592:	b2da      	uxtb	r2, r3
 8002594:	4b5a      	ldr	r3, [pc, #360]	@ (8002700 <menu+0x15dc>)
 8002596:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002598:	4b59      	ldr	r3, [pc, #356]	@ (8002700 <menu+0x15dc>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d902      	bls.n	80025a6 <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 80025a0:	4b57      	ldr	r3, [pc, #348]	@ (8002700 <menu+0x15dc>)
 80025a2:	2202      	movs	r2, #2
 80025a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025a6:	f001 fb03 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025aa:	2108      	movs	r1, #8
 80025ac:	4856      	ldr	r0, [pc, #344]	@ (8002708 <menu+0x15e4>)
 80025ae:	f007 fc57 	bl	8009e60 <HAL_GPIO_ReadPin>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d11d      	bne.n	80025f4 <menu+0x14d0>
 80025b8:	4b54      	ldr	r3, [pc, #336]	@ (800270c <menu+0x15e8>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	f083 0301 	eor.w	r3, r3, #1
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d016      	beq.n	80025f4 <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 80025c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002700 <menu+0x15dc>)
 80025c8:	781a      	ldrb	r2, [r3, #0]
 80025ca:	4b51      	ldr	r3, [pc, #324]	@ (8002710 <menu+0x15ec>)
 80025cc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 80025d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002700 <menu+0x15dc>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <menu+0x14bc>
 80025d8:	4b49      	ldr	r3, [pc, #292]	@ (8002700 <menu+0x15dc>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d106      	bne.n	80025ee <menu+0x14ca>
				altLimit = 1;
 80025e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002714 <menu+0x15f0>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80025e6:	4b4b      	ldr	r3, [pc, #300]	@ (8002714 <menu+0x15f0>)
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	4b49      	ldr	r3, [pc, #292]	@ (8002710 <menu+0x15ec>)
 80025ec:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 80025ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002718 <menu+0x15f4>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 80025f4:	4b49      	ldr	r3, [pc, #292]	@ (800271c <menu+0x15f8>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b0f      	cmp	r3, #15
 80025fa:	d16c      	bne.n	80026d6 <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 80025fc:	4a48      	ldr	r2, [pc, #288]	@ (8002720 <menu+0x15fc>)
 80025fe:	2101      	movs	r1, #1
 8002600:	2001      	movs	r0, #1
 8002602:	f006 f93b 	bl	800887c <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002606:	4a47      	ldr	r2, [pc, #284]	@ (8002724 <menu+0x1600>)
 8002608:	2101      	movs	r1, #1
 800260a:	2002      	movs	r0, #2
 800260c:	f006 f936 	bl	800887c <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002610:	4b45      	ldr	r3, [pc, #276]	@ (8002728 <menu+0x1604>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	220a      	movs	r2, #10
 8002616:	4945      	ldr	r1, [pc, #276]	@ (800272c <menu+0x1608>)
 8002618:	4618      	mov	r0, r3
 800261a:	f00a fc17 	bl	800ce4c <itoa>
		lcd_print(2,16,snum);
 800261e:	4a43      	ldr	r2, [pc, #268]	@ (800272c <menu+0x1608>)
 8002620:	2110      	movs	r1, #16
 8002622:	2002      	movs	r0, #2
 8002624:	f006 f92a 	bl	800887c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002628:	2102      	movs	r1, #2
 800262a:	4837      	ldr	r0, [pc, #220]	@ (8002708 <menu+0x15e4>)
 800262c:	f007 fc18 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002630:	4603      	mov	r3, r0
 8002632:	2b01      	cmp	r3, #1
 8002634:	d119      	bne.n	800266a <menu+0x1546>
 8002636:	4b35      	ldr	r3, [pc, #212]	@ (800270c <menu+0x15e8>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	f083 0301 	eor.w	r3, r3, #1
 800263e:	b2db      	uxtb	r3, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	d012      	beq.n	800266a <menu+0x1546>
 8002644:	4b3a      	ldr	r3, [pc, #232]	@ (8002730 <menu+0x160c>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10e      	bne.n	800266a <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 800264c:	4b36      	ldr	r3, [pc, #216]	@ (8002728 <menu+0x1604>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	3301      	adds	r3, #1
 8002652:	b2da      	uxtb	r2, r3
 8002654:	4b34      	ldr	r3, [pc, #208]	@ (8002728 <menu+0x1604>)
 8002656:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002658:	4b33      	ldr	r3, [pc, #204]	@ (8002728 <menu+0x1604>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	2b05      	cmp	r3, #5
 800265e:	d902      	bls.n	8002666 <menu+0x1542>
				kapiTablaAcSure = 0;
 8002660:	4b31      	ldr	r3, [pc, #196]	@ (8002728 <menu+0x1604>)
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002666:	f001 faa3 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800266a:	2104      	movs	r1, #4
 800266c:	4826      	ldr	r0, [pc, #152]	@ (8002708 <menu+0x15e4>)
 800266e:	f007 fbf7 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002672:	4603      	mov	r3, r0
 8002674:	2b01      	cmp	r3, #1
 8002676:	d119      	bne.n	80026ac <menu+0x1588>
 8002678:	4b24      	ldr	r3, [pc, #144]	@ (800270c <menu+0x15e8>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	f083 0301 	eor.w	r3, r3, #1
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d012      	beq.n	80026ac <menu+0x1588>
 8002686:	4b2a      	ldr	r3, [pc, #168]	@ (8002730 <menu+0x160c>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d10e      	bne.n	80026ac <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 800268e:	4b26      	ldr	r3, [pc, #152]	@ (8002728 <menu+0x1604>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	3b01      	subs	r3, #1
 8002694:	b2da      	uxtb	r2, r3
 8002696:	4b24      	ldr	r3, [pc, #144]	@ (8002728 <menu+0x1604>)
 8002698:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 800269a:	4b23      	ldr	r3, [pc, #140]	@ (8002728 <menu+0x1604>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b06      	cmp	r3, #6
 80026a0:	d902      	bls.n	80026a8 <menu+0x1584>
		   		kapiTablaAcSure = 5;
 80026a2:	4b21      	ldr	r3, [pc, #132]	@ (8002728 <menu+0x1604>)
 80026a4:	2205      	movs	r2, #5
 80026a6:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80026a8:	f001 fa82 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026ac:	2108      	movs	r1, #8
 80026ae:	4816      	ldr	r0, [pc, #88]	@ (8002708 <menu+0x15e4>)
 80026b0:	f007 fbd6 	bl	8009e60 <HAL_GPIO_ReadPin>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d10d      	bne.n	80026d6 <menu+0x15b2>
 80026ba:	4b14      	ldr	r3, [pc, #80]	@ (800270c <menu+0x15e8>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	f083 0301 	eor.w	r3, r3, #1
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d006      	beq.n	80026d6 <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 80026c8:	4b17      	ldr	r3, [pc, #92]	@ (8002728 <menu+0x1604>)
 80026ca:	781a      	ldrb	r2, [r3, #0]
 80026cc:	4b10      	ldr	r3, [pc, #64]	@ (8002710 <menu+0x15ec>)
 80026ce:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80026d0:	4b11      	ldr	r3, [pc, #68]	@ (8002718 <menu+0x15f4>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80026d6:	4b11      	ldr	r3, [pc, #68]	@ (800271c <menu+0x15f8>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b10      	cmp	r3, #16
 80026dc:	f040 8086 	bne.w	80027ec <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 80026e0:	4a14      	ldr	r2, [pc, #80]	@ (8002734 <menu+0x1610>)
 80026e2:	2101      	movs	r1, #1
 80026e4:	2001      	movs	r0, #1
 80026e6:	f006 f8c9 	bl	800887c <lcd_print>

		if(yukariYavasLimit == 0) {
 80026ea:	4b13      	ldr	r3, [pc, #76]	@ (8002738 <menu+0x1614>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d124      	bne.n	800273c <menu+0x1618>
			lcd_print(2, 1, pasifText);
 80026f2:	4a04      	ldr	r2, [pc, #16]	@ (8002704 <menu+0x15e0>)
 80026f4:	2101      	movs	r1, #1
 80026f6:	2002      	movs	r0, #2
 80026f8:	f006 f8c0 	bl	800887c <lcd_print>
 80026fc:	e027      	b.n	800274e <menu+0x162a>
 80026fe:	bf00      	nop
 8002700:	20001079 	.word	0x20001079
 8002704:	20001250 	.word	0x20001250
 8002708:	40010800 	.word	0x40010800
 800270c:	2000109c 	.word	0x2000109c
 8002710:	20000f9c 	.word	0x20000f9c
 8002714:	20001072 	.word	0x20001072
 8002718:	20001099 	.word	0x20001099
 800271c:	2000106c 	.word	0x2000106c
 8002720:	2000141c 	.word	0x2000141c
 8002724:	2000137c 	.word	0x2000137c
 8002728:	20001087 	.word	0x20001087
 800272c:	2000100c 	.word	0x2000100c
 8002730:	20001077 	.word	0x20001077
 8002734:	20001430 	.word	0x20001430
 8002738:	2000107a 	.word	0x2000107a
		} else if(yukariYavasLimit == 1) {
 800273c:	4b84      	ldr	r3, [pc, #528]	@ (8002950 <menu+0x182c>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d104      	bne.n	800274e <menu+0x162a>
			lcd_print(2, 1, aktifText);
 8002744:	4a83      	ldr	r2, [pc, #524]	@ (8002954 <menu+0x1830>)
 8002746:	2101      	movs	r1, #1
 8002748:	2002      	movs	r0, #2
 800274a:	f006 f897 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800274e:	2102      	movs	r1, #2
 8002750:	4881      	ldr	r0, [pc, #516]	@ (8002958 <menu+0x1834>)
 8002752:	f007 fb85 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002756:	4603      	mov	r3, r0
 8002758:	2b01      	cmp	r3, #1
 800275a:	d115      	bne.n	8002788 <menu+0x1664>
 800275c:	4b7f      	ldr	r3, [pc, #508]	@ (800295c <menu+0x1838>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	f083 0301 	eor.w	r3, r3, #1
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00e      	beq.n	8002788 <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 800276a:	4b79      	ldr	r3, [pc, #484]	@ (8002950 <menu+0x182c>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	3301      	adds	r3, #1
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4b77      	ldr	r3, [pc, #476]	@ (8002950 <menu+0x182c>)
 8002774:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002776:	4b76      	ldr	r3, [pc, #472]	@ (8002950 <menu+0x182c>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d902      	bls.n	8002784 <menu+0x1660>
				yukariYavasLimit = 0;
 800277e:	4b74      	ldr	r3, [pc, #464]	@ (8002950 <menu+0x182c>)
 8002780:	2200      	movs	r2, #0
 8002782:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002784:	f001 fa14 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002788:	2104      	movs	r1, #4
 800278a:	4873      	ldr	r0, [pc, #460]	@ (8002958 <menu+0x1834>)
 800278c:	f007 fb68 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002790:	4603      	mov	r3, r0
 8002792:	2b01      	cmp	r3, #1
 8002794:	d115      	bne.n	80027c2 <menu+0x169e>
 8002796:	4b71      	ldr	r3, [pc, #452]	@ (800295c <menu+0x1838>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	f083 0301 	eor.w	r3, r3, #1
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00e      	beq.n	80027c2 <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 80027a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002950 <menu+0x182c>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	4b68      	ldr	r3, [pc, #416]	@ (8002950 <menu+0x182c>)
 80027ae:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80027b0:	4b67      	ldr	r3, [pc, #412]	@ (8002950 <menu+0x182c>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d002      	beq.n	80027be <menu+0x169a>
		   		yukariYavasLimit = 1;
 80027b8:	4b65      	ldr	r3, [pc, #404]	@ (8002950 <menu+0x182c>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027be:	f001 f9f7 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027c2:	2108      	movs	r1, #8
 80027c4:	4864      	ldr	r0, [pc, #400]	@ (8002958 <menu+0x1834>)
 80027c6:	f007 fb4b 	bl	8009e60 <HAL_GPIO_ReadPin>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d10d      	bne.n	80027ec <menu+0x16c8>
 80027d0:	4b62      	ldr	r3, [pc, #392]	@ (800295c <menu+0x1838>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	f083 0301 	eor.w	r3, r3, #1
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d006      	beq.n	80027ec <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 80027de:	4b5c      	ldr	r3, [pc, #368]	@ (8002950 <menu+0x182c>)
 80027e0:	781a      	ldrb	r2, [r3, #0]
 80027e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002960 <menu+0x183c>)
 80027e4:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80027e6:	4b5f      	ldr	r3, [pc, #380]	@ (8002964 <menu+0x1840>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80027ec:	4b5e      	ldr	r3, [pc, #376]	@ (8002968 <menu+0x1844>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b11      	cmp	r3, #17
 80027f2:	f040 808b 	bne.w	800290c <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 80027f6:	4a5d      	ldr	r2, [pc, #372]	@ (800296c <menu+0x1848>)
 80027f8:	2101      	movs	r1, #1
 80027fa:	2001      	movs	r0, #1
 80027fc:	f006 f83e 	bl	800887c <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002800:	4b5b      	ldr	r3, [pc, #364]	@ (8002970 <menu+0x184c>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b02      	cmp	r3, #2
 8002806:	d105      	bne.n	8002814 <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 8002808:	4a5a      	ldr	r2, [pc, #360]	@ (8002974 <menu+0x1850>)
 800280a:	2101      	movs	r1, #1
 800280c:	2002      	movs	r0, #2
 800280e:	f006 f835 	bl	800887c <lcd_print>
 8002812:	e012      	b.n	800283a <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 8002814:	4b56      	ldr	r3, [pc, #344]	@ (8002970 <menu+0x184c>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d105      	bne.n	8002828 <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 800281c:	4a56      	ldr	r2, [pc, #344]	@ (8002978 <menu+0x1854>)
 800281e:	2101      	movs	r1, #1
 8002820:	2002      	movs	r0, #2
 8002822:	f006 f82b 	bl	800887c <lcd_print>
 8002826:	e008      	b.n	800283a <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 8002828:	4b51      	ldr	r3, [pc, #324]	@ (8002970 <menu+0x184c>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d104      	bne.n	800283a <menu+0x1716>
			lcd_print(2, 1, pasifText);
 8002830:	4a52      	ldr	r2, [pc, #328]	@ (800297c <menu+0x1858>)
 8002832:	2101      	movs	r1, #1
 8002834:	2002      	movs	r0, #2
 8002836:	f006 f821 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800283a:	2102      	movs	r1, #2
 800283c:	4846      	ldr	r0, [pc, #280]	@ (8002958 <menu+0x1834>)
 800283e:	f007 fb0f 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002842:	4603      	mov	r3, r0
 8002844:	2b01      	cmp	r3, #1
 8002846:	d115      	bne.n	8002874 <menu+0x1750>
 8002848:	4b44      	ldr	r3, [pc, #272]	@ (800295c <menu+0x1838>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	f083 0301 	eor.w	r3, r3, #1
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00e      	beq.n	8002874 <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002856:	4b46      	ldr	r3, [pc, #280]	@ (8002970 <menu+0x184c>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	3301      	adds	r3, #1
 800285c:	b2da      	uxtb	r2, r3
 800285e:	4b44      	ldr	r3, [pc, #272]	@ (8002970 <menu+0x184c>)
 8002860:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002862:	4b43      	ldr	r3, [pc, #268]	@ (8002970 <menu+0x184c>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d902      	bls.n	8002870 <menu+0x174c>
				devirmeYuruyusSecim = 0;
 800286a:	4b41      	ldr	r3, [pc, #260]	@ (8002970 <menu+0x184c>)
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002870:	f001 f99e 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002874:	2104      	movs	r1, #4
 8002876:	4838      	ldr	r0, [pc, #224]	@ (8002958 <menu+0x1834>)
 8002878:	f007 faf2 	bl	8009e60 <HAL_GPIO_ReadPin>
 800287c:	4603      	mov	r3, r0
 800287e:	2b01      	cmp	r3, #1
 8002880:	d115      	bne.n	80028ae <menu+0x178a>
 8002882:	4b36      	ldr	r3, [pc, #216]	@ (800295c <menu+0x1838>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	f083 0301 	eor.w	r3, r3, #1
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d00e      	beq.n	80028ae <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002890:	4b37      	ldr	r3, [pc, #220]	@ (8002970 <menu+0x184c>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	3b01      	subs	r3, #1
 8002896:	b2da      	uxtb	r2, r3
 8002898:	4b35      	ldr	r3, [pc, #212]	@ (8002970 <menu+0x184c>)
 800289a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 800289c:	4b34      	ldr	r3, [pc, #208]	@ (8002970 <menu+0x184c>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d902      	bls.n	80028aa <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 80028a4:	4b32      	ldr	r3, [pc, #200]	@ (8002970 <menu+0x184c>)
 80028a6:	2202      	movs	r2, #2
 80028a8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028aa:	f001 f981 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028ae:	2108      	movs	r1, #8
 80028b0:	4829      	ldr	r0, [pc, #164]	@ (8002958 <menu+0x1834>)
 80028b2:	f007 fad5 	bl	8009e60 <HAL_GPIO_ReadPin>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d127      	bne.n	800290c <menu+0x17e8>
 80028bc:	4b27      	ldr	r3, [pc, #156]	@ (800295c <menu+0x1838>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	f083 0301 	eor.w	r3, r3, #1
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d020      	beq.n	800290c <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 80028ca:	4b29      	ldr	r3, [pc, #164]	@ (8002970 <menu+0x184c>)
 80028cc:	781a      	ldrb	r2, [r3, #0]
 80028ce:	4b24      	ldr	r3, [pc, #144]	@ (8002960 <menu+0x183c>)
 80028d0:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80028d2:	4b27      	ldr	r3, [pc, #156]	@ (8002970 <menu+0x184c>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d003      	beq.n	80028e2 <menu+0x17be>
 80028da:	4b25      	ldr	r3, [pc, #148]	@ (8002970 <menu+0x184c>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d106      	bne.n	80028f0 <menu+0x17cc>
				calismaSekli = 0;
 80028e2:	4b27      	ldr	r3, [pc, #156]	@ (8002980 <menu+0x185c>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80028e8:	4b25      	ldr	r3, [pc, #148]	@ (8002980 <menu+0x185c>)
 80028ea:	781a      	ldrb	r2, [r3, #0]
 80028ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002960 <menu+0x183c>)
 80028ee:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80028f0:	4b1f      	ldr	r3, [pc, #124]	@ (8002970 <menu+0x184c>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d106      	bne.n	8002906 <menu+0x17e2>
				devirmeSilindirTipi = 1;
 80028f8:	4b22      	ldr	r3, [pc, #136]	@ (8002984 <menu+0x1860>)
 80028fa:	2201      	movs	r2, #1
 80028fc:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80028fe:	4b21      	ldr	r3, [pc, #132]	@ (8002984 <menu+0x1860>)
 8002900:	781a      	ldrb	r2, [r3, #0]
 8002902:	4b17      	ldr	r3, [pc, #92]	@ (8002960 <menu+0x183c>)
 8002904:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002906:	4b17      	ldr	r3, [pc, #92]	@ (8002964 <menu+0x1840>)
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 800290c:	4b16      	ldr	r3, [pc, #88]	@ (8002968 <menu+0x1844>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b12      	cmp	r3, #18
 8002912:	f040 8097 	bne.w	8002a44 <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 8002916:	4b16      	ldr	r3, [pc, #88]	@ (8002970 <menu+0x184c>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d105      	bne.n	800292a <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 800291e:	4a1a      	ldr	r2, [pc, #104]	@ (8002988 <menu+0x1864>)
 8002920:	2101      	movs	r1, #1
 8002922:	2001      	movs	r0, #1
 8002924:	f005 ffaa 	bl	800887c <lcd_print>
 8002928:	e008      	b.n	800293c <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 800292a:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <menu+0x184c>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d104      	bne.n	800293c <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 8002932:	4a16      	ldr	r2, [pc, #88]	@ (800298c <menu+0x1868>)
 8002934:	2101      	movs	r1, #1
 8002936:	2001      	movs	r0, #1
 8002938:	f005 ffa0 	bl	800887c <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 800293c:	4b14      	ldr	r3, [pc, #80]	@ (8002990 <menu+0x186c>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d127      	bne.n	8002994 <menu+0x1870>
			lcd_print(2, 1, pasifText);
 8002944:	4a0d      	ldr	r2, [pc, #52]	@ (800297c <menu+0x1858>)
 8002946:	2101      	movs	r1, #1
 8002948:	2002      	movs	r0, #2
 800294a:	f005 ff97 	bl	800887c <lcd_print>
 800294e:	e02a      	b.n	80029a6 <menu+0x1882>
 8002950:	2000107a 	.word	0x2000107a
 8002954:	20001264 	.word	0x20001264
 8002958:	40010800 	.word	0x40010800
 800295c:	2000109c 	.word	0x2000109c
 8002960:	20000f9c 	.word	0x20000f9c
 8002964:	20001099 	.word	0x20001099
 8002968:	2000106c 	.word	0x2000106c
 800296c:	20001444 	.word	0x20001444
 8002970:	2000107b 	.word	0x2000107b
 8002974:	20001458 	.word	0x20001458
 8002978:	2000146c 	.word	0x2000146c
 800297c:	20001250 	.word	0x20001250
 8002980:	2000106d 	.word	0x2000106d
 8002984:	2000107e 	.word	0x2000107e
 8002988:	20001480 	.word	0x20001480
 800298c:	20001494 	.word	0x20001494
 8002990:	2000107c 	.word	0x2000107c
		} else if(devirmeYukariIleriLimit == 1){
 8002994:	4b79      	ldr	r3, [pc, #484]	@ (8002b7c <menu+0x1a58>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d104      	bne.n	80029a6 <menu+0x1882>
			lcd_print(2, 1, aktifText);
 800299c:	4a78      	ldr	r2, [pc, #480]	@ (8002b80 <menu+0x1a5c>)
 800299e:	2101      	movs	r1, #1
 80029a0:	2002      	movs	r0, #2
 80029a2:	f005 ff6b 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029a6:	2102      	movs	r1, #2
 80029a8:	4876      	ldr	r0, [pc, #472]	@ (8002b84 <menu+0x1a60>)
 80029aa:	f007 fa59 	bl	8009e60 <HAL_GPIO_ReadPin>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d115      	bne.n	80029e0 <menu+0x18bc>
 80029b4:	4b74      	ldr	r3, [pc, #464]	@ (8002b88 <menu+0x1a64>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	f083 0301 	eor.w	r3, r3, #1
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00e      	beq.n	80029e0 <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80029c2:	4b6e      	ldr	r3, [pc, #440]	@ (8002b7c <menu+0x1a58>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	3301      	adds	r3, #1
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	4b6c      	ldr	r3, [pc, #432]	@ (8002b7c <menu+0x1a58>)
 80029cc:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80029ce:	4b6b      	ldr	r3, [pc, #428]	@ (8002b7c <menu+0x1a58>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d902      	bls.n	80029dc <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 80029d6:	4b69      	ldr	r3, [pc, #420]	@ (8002b7c <menu+0x1a58>)
 80029d8:	2200      	movs	r2, #0
 80029da:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029dc:	f001 f8e8 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029e0:	2104      	movs	r1, #4
 80029e2:	4868      	ldr	r0, [pc, #416]	@ (8002b84 <menu+0x1a60>)
 80029e4:	f007 fa3c 	bl	8009e60 <HAL_GPIO_ReadPin>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d115      	bne.n	8002a1a <menu+0x18f6>
 80029ee:	4b66      	ldr	r3, [pc, #408]	@ (8002b88 <menu+0x1a64>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	f083 0301 	eor.w	r3, r3, #1
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00e      	beq.n	8002a1a <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80029fc:	4b5f      	ldr	r3, [pc, #380]	@ (8002b7c <menu+0x1a58>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	4b5d      	ldr	r3, [pc, #372]	@ (8002b7c <menu+0x1a58>)
 8002a06:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002a08:	4b5c      	ldr	r3, [pc, #368]	@ (8002b7c <menu+0x1a58>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d002      	beq.n	8002a16 <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 8002a10:	4b5a      	ldr	r3, [pc, #360]	@ (8002b7c <menu+0x1a58>)
 8002a12:	2201      	movs	r2, #1
 8002a14:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a16:	f001 f8cb 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a1a:	2108      	movs	r1, #8
 8002a1c:	4859      	ldr	r0, [pc, #356]	@ (8002b84 <menu+0x1a60>)
 8002a1e:	f007 fa1f 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d10d      	bne.n	8002a44 <menu+0x1920>
 8002a28:	4b57      	ldr	r3, [pc, #348]	@ (8002b88 <menu+0x1a64>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	f083 0301 	eor.w	r3, r3, #1
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d006      	beq.n	8002a44 <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 8002a36:	4b51      	ldr	r3, [pc, #324]	@ (8002b7c <menu+0x1a58>)
 8002a38:	781a      	ldrb	r2, [r3, #0]
 8002a3a:	4b54      	ldr	r3, [pc, #336]	@ (8002b8c <menu+0x1a68>)
 8002a3c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002a3e:	4b54      	ldr	r3, [pc, #336]	@ (8002b90 <menu+0x1a6c>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002a44:	4b53      	ldr	r3, [pc, #332]	@ (8002b94 <menu+0x1a70>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b13      	cmp	r3, #19
 8002a4a:	d174      	bne.n	8002b36 <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 8002a4c:	4b52      	ldr	r3, [pc, #328]	@ (8002b98 <menu+0x1a74>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d105      	bne.n	8002a60 <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002a54:	4a51      	ldr	r2, [pc, #324]	@ (8002b9c <menu+0x1a78>)
 8002a56:	2101      	movs	r1, #1
 8002a58:	2001      	movs	r0, #1
 8002a5a:	f005 ff0f 	bl	800887c <lcd_print>
 8002a5e:	e008      	b.n	8002a72 <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 8002a60:	4b4d      	ldr	r3, [pc, #308]	@ (8002b98 <menu+0x1a74>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d104      	bne.n	8002a72 <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002a68:	4a4d      	ldr	r2, [pc, #308]	@ (8002ba0 <menu+0x1a7c>)
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	f005 ff05 	bl	800887c <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002a72:	4b4c      	ldr	r3, [pc, #304]	@ (8002ba4 <menu+0x1a80>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d105      	bne.n	8002a86 <menu+0x1962>
			lcd_print(2, 1, pasifText);
 8002a7a:	4a4b      	ldr	r2, [pc, #300]	@ (8002ba8 <menu+0x1a84>)
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	2002      	movs	r0, #2
 8002a80:	f005 fefc 	bl	800887c <lcd_print>
 8002a84:	e008      	b.n	8002a98 <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002a86:	4b47      	ldr	r3, [pc, #284]	@ (8002ba4 <menu+0x1a80>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d104      	bne.n	8002a98 <menu+0x1974>
			lcd_print(2, 1, aktifText);
 8002a8e:	4a3c      	ldr	r2, [pc, #240]	@ (8002b80 <menu+0x1a5c>)
 8002a90:	2101      	movs	r1, #1
 8002a92:	2002      	movs	r0, #2
 8002a94:	f005 fef2 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a98:	2102      	movs	r1, #2
 8002a9a:	483a      	ldr	r0, [pc, #232]	@ (8002b84 <menu+0x1a60>)
 8002a9c:	f007 f9e0 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d115      	bne.n	8002ad2 <menu+0x19ae>
 8002aa6:	4b38      	ldr	r3, [pc, #224]	@ (8002b88 <menu+0x1a64>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	f083 0301 	eor.w	r3, r3, #1
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00e      	beq.n	8002ad2 <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ba4 <menu+0x1a80>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	4b39      	ldr	r3, [pc, #228]	@ (8002ba4 <menu+0x1a80>)
 8002abe:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002ac0:	4b38      	ldr	r3, [pc, #224]	@ (8002ba4 <menu+0x1a80>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d902      	bls.n	8002ace <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 8002ac8:	4b36      	ldr	r3, [pc, #216]	@ (8002ba4 <menu+0x1a80>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ace:	f001 f86f 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ad2:	2104      	movs	r1, #4
 8002ad4:	482b      	ldr	r0, [pc, #172]	@ (8002b84 <menu+0x1a60>)
 8002ad6:	f007 f9c3 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d115      	bne.n	8002b0c <menu+0x19e8>
 8002ae0:	4b29      	ldr	r3, [pc, #164]	@ (8002b88 <menu+0x1a64>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	f083 0301 	eor.w	r3, r3, #1
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00e      	beq.n	8002b0c <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002aee:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba4 <menu+0x1a80>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba4 <menu+0x1a80>)
 8002af8:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002afa:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba4 <menu+0x1a80>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d002      	beq.n	8002b08 <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 8002b02:	4b28      	ldr	r3, [pc, #160]	@ (8002ba4 <menu+0x1a80>)
 8002b04:	2201      	movs	r2, #1
 8002b06:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b08:	f001 f852 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b0c:	2108      	movs	r1, #8
 8002b0e:	481d      	ldr	r0, [pc, #116]	@ (8002b84 <menu+0x1a60>)
 8002b10:	f007 f9a6 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d10d      	bne.n	8002b36 <menu+0x1a12>
 8002b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002b88 <menu+0x1a64>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	f083 0301 	eor.w	r3, r3, #1
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d006      	beq.n	8002b36 <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002b28:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba4 <menu+0x1a80>)
 8002b2a:	781a      	ldrb	r2, [r3, #0]
 8002b2c:	4b17      	ldr	r3, [pc, #92]	@ (8002b8c <menu+0x1a68>)
 8002b2e:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002b30:	4b17      	ldr	r3, [pc, #92]	@ (8002b90 <menu+0x1a6c>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002b36:	4b17      	ldr	r3, [pc, #92]	@ (8002b94 <menu+0x1a70>)
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b14      	cmp	r3, #20
 8002b3c:	f040 809e 	bne.w	8002c7c <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 8002b40:	4b15      	ldr	r3, [pc, #84]	@ (8002b98 <menu+0x1a74>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d105      	bne.n	8002b54 <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 8002b48:	4a18      	ldr	r2, [pc, #96]	@ (8002bac <menu+0x1a88>)
 8002b4a:	2101      	movs	r1, #1
 8002b4c:	2001      	movs	r0, #1
 8002b4e:	f005 fe95 	bl	800887c <lcd_print>
 8002b52:	e008      	b.n	8002b66 <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 8002b54:	4b10      	ldr	r3, [pc, #64]	@ (8002b98 <menu+0x1a74>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d104      	bne.n	8002b66 <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8002b5c:	4a14      	ldr	r2, [pc, #80]	@ (8002bb0 <menu+0x1a8c>)
 8002b5e:	2101      	movs	r1, #1
 8002b60:	2001      	movs	r0, #1
 8002b62:	f005 fe8b 	bl	800887c <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002b66:	4b13      	ldr	r3, [pc, #76]	@ (8002bb4 <menu+0x1a90>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d126      	bne.n	8002bbc <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 8002b6e:	4a12      	ldr	r2, [pc, #72]	@ (8002bb8 <menu+0x1a94>)
 8002b70:	2101      	movs	r1, #1
 8002b72:	2002      	movs	r0, #2
 8002b74:	f005 fe82 	bl	800887c <lcd_print>
 8002b78:	e029      	b.n	8002bce <menu+0x1aaa>
 8002b7a:	bf00      	nop
 8002b7c:	2000107c 	.word	0x2000107c
 8002b80:	20001264 	.word	0x20001264
 8002b84:	40010800 	.word	0x40010800
 8002b88:	2000109c 	.word	0x2000109c
 8002b8c:	20000f9c 	.word	0x20000f9c
 8002b90:	20001099 	.word	0x20001099
 8002b94:	2000106c 	.word	0x2000106c
 8002b98:	2000107b 	.word	0x2000107b
 8002b9c:	200014a8 	.word	0x200014a8
 8002ba0:	200014bc 	.word	0x200014bc
 8002ba4:	2000107d 	.word	0x2000107d
 8002ba8:	20001250 	.word	0x20001250
 8002bac:	200014d0 	.word	0x200014d0
 8002bb0:	200014e4 	.word	0x200014e4
 8002bb4:	2000107e 	.word	0x2000107e
 8002bb8:	200014f8 	.word	0x200014f8
		} else if(devirmeSilindirTipi == 1) {
 8002bbc:	4b39      	ldr	r3, [pc, #228]	@ (8002ca4 <menu+0x1b80>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d104      	bne.n	8002bce <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 8002bc4:	4a38      	ldr	r2, [pc, #224]	@ (8002ca8 <menu+0x1b84>)
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	2002      	movs	r0, #2
 8002bca:	f005 fe57 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002bce:	2102      	movs	r1, #2
 8002bd0:	4836      	ldr	r0, [pc, #216]	@ (8002cac <menu+0x1b88>)
 8002bd2:	f007 f945 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d119      	bne.n	8002c10 <menu+0x1aec>
 8002bdc:	4b34      	ldr	r3, [pc, #208]	@ (8002cb0 <menu+0x1b8c>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	f083 0301 	eor.w	r3, r3, #1
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d012      	beq.n	8002c10 <menu+0x1aec>
 8002bea:	4b32      	ldr	r3, [pc, #200]	@ (8002cb4 <menu+0x1b90>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d10e      	bne.n	8002c10 <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca4 <menu+0x1b80>)
 8002bf4:	781b      	ldrb	r3, [r3, #0]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca4 <menu+0x1b80>)
 8002bfc:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002bfe:	4b29      	ldr	r3, [pc, #164]	@ (8002ca4 <menu+0x1b80>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d902      	bls.n	8002c0c <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 8002c06:	4b27      	ldr	r3, [pc, #156]	@ (8002ca4 <menu+0x1b80>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c0c:	f000 ffd0 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002c10:	2104      	movs	r1, #4
 8002c12:	4826      	ldr	r0, [pc, #152]	@ (8002cac <menu+0x1b88>)
 8002c14:	f007 f924 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d119      	bne.n	8002c52 <menu+0x1b2e>
 8002c1e:	4b24      	ldr	r3, [pc, #144]	@ (8002cb0 <menu+0x1b8c>)
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	f083 0301 	eor.w	r3, r3, #1
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d012      	beq.n	8002c52 <menu+0x1b2e>
 8002c2c:	4b21      	ldr	r3, [pc, #132]	@ (8002cb4 <menu+0x1b90>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d10e      	bne.n	8002c52 <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002c34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca4 <menu+0x1b80>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	4b19      	ldr	r3, [pc, #100]	@ (8002ca4 <menu+0x1b80>)
 8002c3e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002c40:	4b18      	ldr	r3, [pc, #96]	@ (8002ca4 <menu+0x1b80>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 8002c48:	4b16      	ldr	r3, [pc, #88]	@ (8002ca4 <menu+0x1b80>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c4e:	f000 ffaf 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c52:	2108      	movs	r1, #8
 8002c54:	4815      	ldr	r0, [pc, #84]	@ (8002cac <menu+0x1b88>)
 8002c56:	f007 f903 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d10d      	bne.n	8002c7c <menu+0x1b58>
 8002c60:	4b13      	ldr	r3, [pc, #76]	@ (8002cb0 <menu+0x1b8c>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	f083 0301 	eor.w	r3, r3, #1
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d006      	beq.n	8002c7c <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca4 <menu+0x1b80>)
 8002c70:	781a      	ldrb	r2, [r3, #0]
 8002c72:	4b11      	ldr	r3, [pc, #68]	@ (8002cb8 <menu+0x1b94>)
 8002c74:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002c76:	4b11      	ldr	r3, [pc, #68]	@ (8002cbc <menu+0x1b98>)
 8002c78:	2201      	movs	r2, #1
 8002c7a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002c7c:	4b10      	ldr	r3, [pc, #64]	@ (8002cc0 <menu+0x1b9c>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b15      	cmp	r3, #21
 8002c82:	f040 8088 	bne.w	8002d96 <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 8002c86:	4a0f      	ldr	r2, [pc, #60]	@ (8002cc4 <menu+0x1ba0>)
 8002c88:	2101      	movs	r1, #1
 8002c8a:	2001      	movs	r0, #1
 8002c8c:	f005 fdf6 	bl	800887c <lcd_print>

		if(platformSilindirTipi == 0) {
 8002c90:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc8 <menu+0x1ba4>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d11b      	bne.n	8002cd0 <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 8002c98:	4a0c      	ldr	r2, [pc, #48]	@ (8002ccc <menu+0x1ba8>)
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	2002      	movs	r0, #2
 8002c9e:	f005 fded 	bl	800887c <lcd_print>
 8002ca2:	e01e      	b.n	8002ce2 <menu+0x1bbe>
 8002ca4:	2000107e 	.word	0x2000107e
 8002ca8:	2000150c 	.word	0x2000150c
 8002cac:	40010800 	.word	0x40010800
 8002cb0:	2000109c 	.word	0x2000109c
 8002cb4:	2000107b 	.word	0x2000107b
 8002cb8:	20000f9c 	.word	0x20000f9c
 8002cbc:	20001099 	.word	0x20001099
 8002cc0:	2000106c 	.word	0x2000106c
 8002cc4:	20001520 	.word	0x20001520
 8002cc8:	2000107f 	.word	0x2000107f
 8002ccc:	200014f8 	.word	0x200014f8
		} else if(platformSilindirTipi == 1) {
 8002cd0:	4ba1      	ldr	r3, [pc, #644]	@ (8002f58 <menu+0x1e34>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d104      	bne.n	8002ce2 <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 8002cd8:	4aa0      	ldr	r2, [pc, #640]	@ (8002f5c <menu+0x1e38>)
 8002cda:	2101      	movs	r1, #1
 8002cdc:	2002      	movs	r0, #2
 8002cde:	f005 fdcd 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	489e      	ldr	r0, [pc, #632]	@ (8002f60 <menu+0x1e3c>)
 8002ce6:	f007 f8bb 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d115      	bne.n	8002d1c <menu+0x1bf8>
 8002cf0:	4b9c      	ldr	r3, [pc, #624]	@ (8002f64 <menu+0x1e40>)
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	f083 0301 	eor.w	r3, r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00e      	beq.n	8002d1c <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002cfe:	4b96      	ldr	r3, [pc, #600]	@ (8002f58 <menu+0x1e34>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	3301      	adds	r3, #1
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	4b94      	ldr	r3, [pc, #592]	@ (8002f58 <menu+0x1e34>)
 8002d08:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002d0a:	4b93      	ldr	r3, [pc, #588]	@ (8002f58 <menu+0x1e34>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d902      	bls.n	8002d18 <menu+0x1bf4>
				platformSilindirTipi = 0;
 8002d12:	4b91      	ldr	r3, [pc, #580]	@ (8002f58 <menu+0x1e34>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d18:	f000 ff4a 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d1c:	2104      	movs	r1, #4
 8002d1e:	4890      	ldr	r0, [pc, #576]	@ (8002f60 <menu+0x1e3c>)
 8002d20:	f007 f89e 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d115      	bne.n	8002d56 <menu+0x1c32>
 8002d2a:	4b8e      	ldr	r3, [pc, #568]	@ (8002f64 <menu+0x1e40>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	f083 0301 	eor.w	r3, r3, #1
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00e      	beq.n	8002d56 <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002d38:	4b87      	ldr	r3, [pc, #540]	@ (8002f58 <menu+0x1e34>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b2da      	uxtb	r2, r3
 8002d40:	4b85      	ldr	r3, [pc, #532]	@ (8002f58 <menu+0x1e34>)
 8002d42:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002d44:	4b84      	ldr	r3, [pc, #528]	@ (8002f58 <menu+0x1e34>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 8002d4c:	4b82      	ldr	r3, [pc, #520]	@ (8002f58 <menu+0x1e34>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d52:	f000 ff2d 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d56:	2108      	movs	r1, #8
 8002d58:	4881      	ldr	r0, [pc, #516]	@ (8002f60 <menu+0x1e3c>)
 8002d5a:	f007 f881 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d118      	bne.n	8002d96 <menu+0x1c72>
 8002d64:	4b7f      	ldr	r3, [pc, #508]	@ (8002f64 <menu+0x1e40>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	f083 0301 	eor.w	r3, r3, #1
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d011      	beq.n	8002d96 <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 8002d72:	4b79      	ldr	r3, [pc, #484]	@ (8002f58 <menu+0x1e34>)
 8002d74:	781a      	ldrb	r2, [r3, #0]
 8002d76:	4b7c      	ldr	r3, [pc, #496]	@ (8002f68 <menu+0x1e44>)
 8002d78:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002d7a:	4b77      	ldr	r3, [pc, #476]	@ (8002f58 <menu+0x1e34>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d106      	bne.n	8002d90 <menu+0x1c6c>
				altLimit = 1;
 8002d82:	4b7a      	ldr	r3, [pc, #488]	@ (8002f6c <menu+0x1e48>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002d88:	4b78      	ldr	r3, [pc, #480]	@ (8002f6c <menu+0x1e48>)
 8002d8a:	781a      	ldrb	r2, [r3, #0]
 8002d8c:	4b76      	ldr	r3, [pc, #472]	@ (8002f68 <menu+0x1e44>)
 8002d8e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002d90:	4b77      	ldr	r3, [pc, #476]	@ (8002f70 <menu+0x1e4c>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002d96:	4b77      	ldr	r3, [pc, #476]	@ (8002f74 <menu+0x1e50>)
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b16      	cmp	r3, #22
 8002d9c:	d164      	bne.n	8002e68 <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 8002d9e:	4a76      	ldr	r2, [pc, #472]	@ (8002f78 <menu+0x1e54>)
 8002da0:	2101      	movs	r1, #1
 8002da2:	2001      	movs	r0, #1
 8002da4:	f005 fd6a 	bl	800887c <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002da8:	4a74      	ldr	r2, [pc, #464]	@ (8002f7c <menu+0x1e58>)
 8002daa:	2101      	movs	r1, #1
 8002dac:	2002      	movs	r0, #2
 8002dae:	f005 fd65 	bl	800887c <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 8002db2:	4b73      	ldr	r3, [pc, #460]	@ (8002f80 <menu+0x1e5c>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	220a      	movs	r2, #10
 8002db8:	4972      	ldr	r1, [pc, #456]	@ (8002f84 <menu+0x1e60>)
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f00a f846 	bl	800ce4c <itoa>
		lcd_print(2,16,snum);
 8002dc0:	4a70      	ldr	r2, [pc, #448]	@ (8002f84 <menu+0x1e60>)
 8002dc2:	2110      	movs	r1, #16
 8002dc4:	2002      	movs	r0, #2
 8002dc6:	f005 fd59 	bl	800887c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dca:	2102      	movs	r1, #2
 8002dcc:	4864      	ldr	r0, [pc, #400]	@ (8002f60 <menu+0x1e3c>)
 8002dce:	f007 f847 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d115      	bne.n	8002e04 <menu+0x1ce0>
 8002dd8:	4b62      	ldr	r3, [pc, #392]	@ (8002f64 <menu+0x1e40>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	f083 0301 	eor.w	r3, r3, #1
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00e      	beq.n	8002e04 <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 8002de6:	4b66      	ldr	r3, [pc, #408]	@ (8002f80 <menu+0x1e5c>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	3301      	adds	r3, #1
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	4b64      	ldr	r3, [pc, #400]	@ (8002f80 <menu+0x1e5c>)
 8002df0:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002df2:	4b63      	ldr	r3, [pc, #396]	@ (8002f80 <menu+0x1e5c>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b05      	cmp	r3, #5
 8002df8:	d902      	bls.n	8002e00 <menu+0x1cdc>
				yukariValfTmr = 0;
 8002dfa:	4b61      	ldr	r3, [pc, #388]	@ (8002f80 <menu+0x1e5c>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e00:	f000 fed6 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e04:	2104      	movs	r1, #4
 8002e06:	4856      	ldr	r0, [pc, #344]	@ (8002f60 <menu+0x1e3c>)
 8002e08:	f007 f82a 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d115      	bne.n	8002e3e <menu+0x1d1a>
 8002e12:	4b54      	ldr	r3, [pc, #336]	@ (8002f64 <menu+0x1e40>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	f083 0301 	eor.w	r3, r3, #1
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00e      	beq.n	8002e3e <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 8002e20:	4b57      	ldr	r3, [pc, #348]	@ (8002f80 <menu+0x1e5c>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	4b55      	ldr	r3, [pc, #340]	@ (8002f80 <menu+0x1e5c>)
 8002e2a:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002e2c:	4b54      	ldr	r3, [pc, #336]	@ (8002f80 <menu+0x1e5c>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b06      	cmp	r3, #6
 8002e32:	d902      	bls.n	8002e3a <menu+0x1d16>
		   		yukariValfTmr = 5;
 8002e34:	4b52      	ldr	r3, [pc, #328]	@ (8002f80 <menu+0x1e5c>)
 8002e36:	2205      	movs	r2, #5
 8002e38:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e3a:	f000 feb9 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e3e:	2108      	movs	r1, #8
 8002e40:	4847      	ldr	r0, [pc, #284]	@ (8002f60 <menu+0x1e3c>)
 8002e42:	f007 f80d 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d10d      	bne.n	8002e68 <menu+0x1d44>
 8002e4c:	4b45      	ldr	r3, [pc, #276]	@ (8002f64 <menu+0x1e40>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	f083 0301 	eor.w	r3, r3, #1
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d006      	beq.n	8002e68 <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 8002e5a:	4b49      	ldr	r3, [pc, #292]	@ (8002f80 <menu+0x1e5c>)
 8002e5c:	781a      	ldrb	r2, [r3, #0]
 8002e5e:	4b42      	ldr	r3, [pc, #264]	@ (8002f68 <menu+0x1e44>)
 8002e60:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002e62:	4b43      	ldr	r3, [pc, #268]	@ (8002f70 <menu+0x1e4c>)
 8002e64:	2201      	movs	r2, #1
 8002e66:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002e68:	4b42      	ldr	r3, [pc, #264]	@ (8002f74 <menu+0x1e50>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b17      	cmp	r3, #23
 8002e6e:	d164      	bne.n	8002f3a <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 8002e70:	4a45      	ldr	r2, [pc, #276]	@ (8002f88 <menu+0x1e64>)
 8002e72:	2101      	movs	r1, #1
 8002e74:	2001      	movs	r0, #1
 8002e76:	f005 fd01 	bl	800887c <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002e7a:	4a40      	ldr	r2, [pc, #256]	@ (8002f7c <menu+0x1e58>)
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	2002      	movs	r0, #2
 8002e80:	f005 fcfc 	bl	800887c <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 8002e84:	4b41      	ldr	r3, [pc, #260]	@ (8002f8c <menu+0x1e68>)
 8002e86:	781b      	ldrb	r3, [r3, #0]
 8002e88:	220a      	movs	r2, #10
 8002e8a:	493e      	ldr	r1, [pc, #248]	@ (8002f84 <menu+0x1e60>)
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f009 ffdd 	bl	800ce4c <itoa>
		lcd_print(2,16,snum);
 8002e92:	4a3c      	ldr	r2, [pc, #240]	@ (8002f84 <menu+0x1e60>)
 8002e94:	2110      	movs	r1, #16
 8002e96:	2002      	movs	r0, #2
 8002e98:	f005 fcf0 	bl	800887c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e9c:	2102      	movs	r1, #2
 8002e9e:	4830      	ldr	r0, [pc, #192]	@ (8002f60 <menu+0x1e3c>)
 8002ea0:	f006 ffde 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d115      	bne.n	8002ed6 <menu+0x1db2>
 8002eaa:	4b2e      	ldr	r3, [pc, #184]	@ (8002f64 <menu+0x1e40>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	f083 0301 	eor.w	r3, r3, #1
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00e      	beq.n	8002ed6 <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 8002eb8:	4b34      	ldr	r3, [pc, #208]	@ (8002f8c <menu+0x1e68>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	4b32      	ldr	r3, [pc, #200]	@ (8002f8c <menu+0x1e68>)
 8002ec2:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8002ec4:	4b31      	ldr	r3, [pc, #196]	@ (8002f8c <menu+0x1e68>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b05      	cmp	r3, #5
 8002eca:	d902      	bls.n	8002ed2 <menu+0x1dae>
				asagiValfTmr = 0;
 8002ecc:	4b2f      	ldr	r3, [pc, #188]	@ (8002f8c <menu+0x1e68>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ed2:	f000 fe6d 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ed6:	2104      	movs	r1, #4
 8002ed8:	4821      	ldr	r0, [pc, #132]	@ (8002f60 <menu+0x1e3c>)
 8002eda:	f006 ffc1 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d115      	bne.n	8002f10 <menu+0x1dec>
 8002ee4:	4b1f      	ldr	r3, [pc, #124]	@ (8002f64 <menu+0x1e40>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	f083 0301 	eor.w	r3, r3, #1
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00e      	beq.n	8002f10 <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 8002ef2:	4b26      	ldr	r3, [pc, #152]	@ (8002f8c <menu+0x1e68>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	4b24      	ldr	r3, [pc, #144]	@ (8002f8c <menu+0x1e68>)
 8002efc:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8002efe:	4b23      	ldr	r3, [pc, #140]	@ (8002f8c <menu+0x1e68>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b06      	cmp	r3, #6
 8002f04:	d902      	bls.n	8002f0c <menu+0x1de8>
		   		asagiValfTmr = 5;
 8002f06:	4b21      	ldr	r3, [pc, #132]	@ (8002f8c <menu+0x1e68>)
 8002f08:	2205      	movs	r2, #5
 8002f0a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f0c:	f000 fe50 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f10:	2108      	movs	r1, #8
 8002f12:	4813      	ldr	r0, [pc, #76]	@ (8002f60 <menu+0x1e3c>)
 8002f14:	f006 ffa4 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d10d      	bne.n	8002f3a <menu+0x1e16>
 8002f1e:	4b11      	ldr	r3, [pc, #68]	@ (8002f64 <menu+0x1e40>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	f083 0301 	eor.w	r3, r3, #1
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d006      	beq.n	8002f3a <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 8002f2c:	4b17      	ldr	r3, [pc, #92]	@ (8002f8c <menu+0x1e68>)
 8002f2e:	781a      	ldrb	r2, [r3, #0]
 8002f30:	4b0d      	ldr	r3, [pc, #52]	@ (8002f68 <menu+0x1e44>)
 8002f32:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8002f34:	4b0e      	ldr	r3, [pc, #56]	@ (8002f70 <menu+0x1e4c>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8002f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f74 <menu+0x1e50>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b18      	cmp	r3, #24
 8002f40:	f040 8093 	bne.w	800306a <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 8002f44:	4b12      	ldr	r3, [pc, #72]	@ (8002f90 <menu+0x1e6c>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d125      	bne.n	8002f98 <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 8002f4c:	4a11      	ldr	r2, [pc, #68]	@ (8002f94 <menu+0x1e70>)
 8002f4e:	2101      	movs	r1, #1
 8002f50:	2001      	movs	r0, #1
 8002f52:	f005 fc93 	bl	800887c <lcd_print>
 8002f56:	e028      	b.n	8002faa <menu+0x1e86>
 8002f58:	2000107f 	.word	0x2000107f
 8002f5c:	2000150c 	.word	0x2000150c
 8002f60:	40010800 	.word	0x40010800
 8002f64:	2000109c 	.word	0x2000109c
 8002f68:	20000f9c 	.word	0x20000f9c
 8002f6c:	20001072 	.word	0x20001072
 8002f70:	20001099 	.word	0x20001099
 8002f74:	2000106c 	.word	0x2000106c
 8002f78:	20001534 	.word	0x20001534
 8002f7c:	2000137c 	.word	0x2000137c
 8002f80:	20001080 	.word	0x20001080
 8002f84:	2000100c 	.word	0x2000100c
 8002f88:	20001548 	.word	0x20001548
 8002f8c:	20001081 	.word	0x20001081
 8002f90:	2000107b 	.word	0x2000107b
 8002f94:	2000155c 	.word	0x2000155c
		} else if(devirmeYuruyusSecim == 1) {
 8002f98:	4b8c      	ldr	r3, [pc, #560]	@ (80031cc <menu+0x20a8>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d104      	bne.n	8002faa <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 8002fa0:	4a8b      	ldr	r2, [pc, #556]	@ (80031d0 <menu+0x20ac>)
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	f005 fc69 	bl	800887c <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002faa:	4a8a      	ldr	r2, [pc, #552]	@ (80031d4 <menu+0x20b0>)
 8002fac:	2101      	movs	r1, #1
 8002fae:	2002      	movs	r0, #2
 8002fb0:	f005 fc64 	bl	800887c <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8002fb4:	4b88      	ldr	r3, [pc, #544]	@ (80031d8 <menu+0x20b4>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	220a      	movs	r2, #10
 8002fba:	4988      	ldr	r1, [pc, #544]	@ (80031dc <menu+0x20b8>)
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f009 ff45 	bl	800ce4c <itoa>
		lcd_print(2, 16, snum);
 8002fc2:	4a86      	ldr	r2, [pc, #536]	@ (80031dc <menu+0x20b8>)
 8002fc4:	2110      	movs	r1, #16
 8002fc6:	2002      	movs	r0, #2
 8002fc8:	f005 fc58 	bl	800887c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fcc:	2102      	movs	r1, #2
 8002fce:	4884      	ldr	r0, [pc, #528]	@ (80031e0 <menu+0x20bc>)
 8002fd0:	f006 ff46 	bl	8009e60 <HAL_GPIO_ReadPin>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d115      	bne.n	8003006 <menu+0x1ee2>
 8002fda:	4b82      	ldr	r3, [pc, #520]	@ (80031e4 <menu+0x20c0>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	f083 0301 	eor.w	r3, r3, #1
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00e      	beq.n	8003006 <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8002fe8:	4b7b      	ldr	r3, [pc, #492]	@ (80031d8 <menu+0x20b4>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	3301      	adds	r3, #1
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	4b79      	ldr	r3, [pc, #484]	@ (80031d8 <menu+0x20b4>)
 8002ff2:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8002ff4:	4b78      	ldr	r3, [pc, #480]	@ (80031d8 <menu+0x20b4>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b05      	cmp	r3, #5
 8002ffa:	d902      	bls.n	8003002 <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 8002ffc:	4b76      	ldr	r3, [pc, #472]	@ (80031d8 <menu+0x20b4>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003002:	f000 fdd5 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003006:	2104      	movs	r1, #4
 8003008:	4875      	ldr	r0, [pc, #468]	@ (80031e0 <menu+0x20bc>)
 800300a:	f006 ff29 	bl	8009e60 <HAL_GPIO_ReadPin>
 800300e:	4603      	mov	r3, r0
 8003010:	2b01      	cmp	r3, #1
 8003012:	d115      	bne.n	8003040 <menu+0x1f1c>
 8003014:	4b73      	ldr	r3, [pc, #460]	@ (80031e4 <menu+0x20c0>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	f083 0301 	eor.w	r3, r3, #1
 800301c:	b2db      	uxtb	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00e      	beq.n	8003040 <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003022:	4b6d      	ldr	r3, [pc, #436]	@ (80031d8 <menu+0x20b4>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	3b01      	subs	r3, #1
 8003028:	b2da      	uxtb	r2, r3
 800302a:	4b6b      	ldr	r3, [pc, #428]	@ (80031d8 <menu+0x20b4>)
 800302c:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 800302e:	4b6a      	ldr	r3, [pc, #424]	@ (80031d8 <menu+0x20b4>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b06      	cmp	r3, #6
 8003034:	d902      	bls.n	800303c <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 8003036:	4b68      	ldr	r3, [pc, #416]	@ (80031d8 <menu+0x20b4>)
 8003038:	2205      	movs	r2, #5
 800303a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800303c:	f000 fdb8 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003040:	2108      	movs	r1, #8
 8003042:	4867      	ldr	r0, [pc, #412]	@ (80031e0 <menu+0x20bc>)
 8003044:	f006 ff0c 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003048:	4603      	mov	r3, r0
 800304a:	2b01      	cmp	r3, #1
 800304c:	d10d      	bne.n	800306a <menu+0x1f46>
 800304e:	4b65      	ldr	r3, [pc, #404]	@ (80031e4 <menu+0x20c0>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	f083 0301 	eor.w	r3, r3, #1
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d006      	beq.n	800306a <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 800305c:	4b5e      	ldr	r3, [pc, #376]	@ (80031d8 <menu+0x20b4>)
 800305e:	781a      	ldrb	r2, [r3, #0]
 8003060:	4b61      	ldr	r3, [pc, #388]	@ (80031e8 <menu+0x20c4>)
 8003062:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003064:	4b61      	ldr	r3, [pc, #388]	@ (80031ec <menu+0x20c8>)
 8003066:	2201      	movs	r2, #1
 8003068:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 800306a:	4b61      	ldr	r3, [pc, #388]	@ (80031f0 <menu+0x20cc>)
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b19      	cmp	r3, #25
 8003070:	d172      	bne.n	8003158 <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 8003072:	4b56      	ldr	r3, [pc, #344]	@ (80031cc <menu+0x20a8>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d105      	bne.n	8003086 <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 800307a:	4a5e      	ldr	r2, [pc, #376]	@ (80031f4 <menu+0x20d0>)
 800307c:	2101      	movs	r1, #1
 800307e:	2001      	movs	r0, #1
 8003080:	f005 fbfc 	bl	800887c <lcd_print>
 8003084:	e008      	b.n	8003098 <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 8003086:	4b51      	ldr	r3, [pc, #324]	@ (80031cc <menu+0x20a8>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d104      	bne.n	8003098 <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 800308e:	4a5a      	ldr	r2, [pc, #360]	@ (80031f8 <menu+0x20d4>)
 8003090:	2101      	movs	r1, #1
 8003092:	2001      	movs	r0, #1
 8003094:	f005 fbf2 	bl	800887c <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003098:	4a4e      	ldr	r2, [pc, #312]	@ (80031d4 <menu+0x20b0>)
 800309a:	2101      	movs	r1, #1
 800309c:	2002      	movs	r0, #2
 800309e:	f005 fbed 	bl	800887c <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 80030a2:	4b56      	ldr	r3, [pc, #344]	@ (80031fc <menu+0x20d8>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	220a      	movs	r2, #10
 80030a8:	494c      	ldr	r1, [pc, #304]	@ (80031dc <menu+0x20b8>)
 80030aa:	4618      	mov	r0, r3
 80030ac:	f009 fece 	bl	800ce4c <itoa>
		lcd_print(2,16,snum);
 80030b0:	4a4a      	ldr	r2, [pc, #296]	@ (80031dc <menu+0x20b8>)
 80030b2:	2110      	movs	r1, #16
 80030b4:	2002      	movs	r0, #2
 80030b6:	f005 fbe1 	bl	800887c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030ba:	2102      	movs	r1, #2
 80030bc:	4848      	ldr	r0, [pc, #288]	@ (80031e0 <menu+0x20bc>)
 80030be:	f006 fecf 	bl	8009e60 <HAL_GPIO_ReadPin>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d115      	bne.n	80030f4 <menu+0x1fd0>
 80030c8:	4b46      	ldr	r3, [pc, #280]	@ (80031e4 <menu+0x20c0>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	f083 0301 	eor.w	r3, r3, #1
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00e      	beq.n	80030f4 <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 80030d6:	4b49      	ldr	r3, [pc, #292]	@ (80031fc <menu+0x20d8>)
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	3301      	adds	r3, #1
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	4b47      	ldr	r3, [pc, #284]	@ (80031fc <menu+0x20d8>)
 80030e0:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 80030e2:	4b46      	ldr	r3, [pc, #280]	@ (80031fc <menu+0x20d8>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b05      	cmp	r3, #5
 80030e8:	d902      	bls.n	80030f0 <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 80030ea:	4b44      	ldr	r3, [pc, #272]	@ (80031fc <menu+0x20d8>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030f0:	f000 fd5e 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030f4:	2104      	movs	r1, #4
 80030f6:	483a      	ldr	r0, [pc, #232]	@ (80031e0 <menu+0x20bc>)
 80030f8:	f006 feb2 	bl	8009e60 <HAL_GPIO_ReadPin>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d115      	bne.n	800312e <menu+0x200a>
 8003102:	4b38      	ldr	r3, [pc, #224]	@ (80031e4 <menu+0x20c0>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	f083 0301 	eor.w	r3, r3, #1
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00e      	beq.n	800312e <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003110:	4b3a      	ldr	r3, [pc, #232]	@ (80031fc <menu+0x20d8>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	3b01      	subs	r3, #1
 8003116:	b2da      	uxtb	r2, r3
 8003118:	4b38      	ldr	r3, [pc, #224]	@ (80031fc <menu+0x20d8>)
 800311a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 800311c:	4b37      	ldr	r3, [pc, #220]	@ (80031fc <menu+0x20d8>)
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b06      	cmp	r3, #6
 8003122:	d902      	bls.n	800312a <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 8003124:	4b35      	ldr	r3, [pc, #212]	@ (80031fc <menu+0x20d8>)
 8003126:	2205      	movs	r2, #5
 8003128:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800312a:	f000 fd41 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800312e:	2108      	movs	r1, #8
 8003130:	482b      	ldr	r0, [pc, #172]	@ (80031e0 <menu+0x20bc>)
 8003132:	f006 fe95 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003136:	4603      	mov	r3, r0
 8003138:	2b01      	cmp	r3, #1
 800313a:	d10d      	bne.n	8003158 <menu+0x2034>
 800313c:	4b29      	ldr	r3, [pc, #164]	@ (80031e4 <menu+0x20c0>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	f083 0301 	eor.w	r3, r3, #1
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d006      	beq.n	8003158 <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 800314a:	4b2c      	ldr	r3, [pc, #176]	@ (80031fc <menu+0x20d8>)
 800314c:	781a      	ldrb	r2, [r3, #0]
 800314e:	4b26      	ldr	r3, [pc, #152]	@ (80031e8 <menu+0x20c4>)
 8003150:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003152:	4b26      	ldr	r3, [pc, #152]	@ (80031ec <menu+0x20c8>)
 8003154:	2201      	movs	r2, #1
 8003156:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003158:	4b25      	ldr	r3, [pc, #148]	@ (80031f0 <menu+0x20cc>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b1a      	cmp	r3, #26
 800315e:	f040 80b7 	bne.w	80032d0 <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 8003162:	4a27      	ldr	r2, [pc, #156]	@ (8003200 <menu+0x20dc>)
 8003164:	2101      	movs	r1, #1
 8003166:	2001      	movs	r0, #1
 8003168:	f005 fb88 	bl	800887c <lcd_print>

		if(makineCalismaTmr > 99) {
 800316c:	4b25      	ldr	r3, [pc, #148]	@ (8003204 <menu+0x20e0>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	2b63      	cmp	r3, #99	@ 0x63
 8003172:	d911      	bls.n	8003198 <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 8003174:	4a17      	ldr	r2, [pc, #92]	@ (80031d4 <menu+0x20b0>)
 8003176:	2101      	movs	r1, #1
 8003178:	2002      	movs	r0, #2
 800317a:	f005 fb7f 	bl	800887c <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800317e:	4b21      	ldr	r3, [pc, #132]	@ (8003204 <menu+0x20e0>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	220a      	movs	r2, #10
 8003184:	4915      	ldr	r1, [pc, #84]	@ (80031dc <menu+0x20b8>)
 8003186:	4618      	mov	r0, r3
 8003188:	f009 fe60 	bl	800ce4c <itoa>
			lcd_print(2,14,snum);
 800318c:	4a13      	ldr	r2, [pc, #76]	@ (80031dc <menu+0x20b8>)
 800318e:	210e      	movs	r1, #14
 8003190:	2002      	movs	r0, #2
 8003192:	f005 fb73 	bl	800887c <lcd_print>
 8003196:	e04c      	b.n	8003232 <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003198:	4b1a      	ldr	r3, [pc, #104]	@ (8003204 <menu+0x20e0>)
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b09      	cmp	r3, #9
 800319e:	d933      	bls.n	8003208 <menu+0x20e4>
 80031a0:	4b18      	ldr	r3, [pc, #96]	@ (8003204 <menu+0x20e0>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b63      	cmp	r3, #99	@ 0x63
 80031a6:	d82f      	bhi.n	8003208 <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 80031a8:	4a0a      	ldr	r2, [pc, #40]	@ (80031d4 <menu+0x20b0>)
 80031aa:	2101      	movs	r1, #1
 80031ac:	2002      	movs	r0, #2
 80031ae:	f005 fb65 	bl	800887c <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80031b2:	4b14      	ldr	r3, [pc, #80]	@ (8003204 <menu+0x20e0>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	220a      	movs	r2, #10
 80031b8:	4908      	ldr	r1, [pc, #32]	@ (80031dc <menu+0x20b8>)
 80031ba:	4618      	mov	r0, r3
 80031bc:	f009 fe46 	bl	800ce4c <itoa>
			lcd_print(2, 15, snum);
 80031c0:	4a06      	ldr	r2, [pc, #24]	@ (80031dc <menu+0x20b8>)
 80031c2:	210f      	movs	r1, #15
 80031c4:	2002      	movs	r0, #2
 80031c6:	f005 fb59 	bl	800887c <lcd_print>
 80031ca:	e032      	b.n	8003232 <menu+0x210e>
 80031cc:	2000107b 	.word	0x2000107b
 80031d0:	20001570 	.word	0x20001570
 80031d4:	2000137c 	.word	0x2000137c
 80031d8:	20001082 	.word	0x20001082
 80031dc:	2000100c 	.word	0x2000100c
 80031e0:	40010800 	.word	0x40010800
 80031e4:	2000109c 	.word	0x2000109c
 80031e8:	20000f9c 	.word	0x20000f9c
 80031ec:	20001099 	.word	0x20001099
 80031f0:	2000106c 	.word	0x2000106c
 80031f4:	20001584 	.word	0x20001584
 80031f8:	20001598 	.word	0x20001598
 80031fc:	20001083 	.word	0x20001083
 8003200:	200015ac 	.word	0x200015ac
 8003204:	20001084 	.word	0x20001084
		} else if(makineCalismaTmr <=  9) {
 8003208:	4b72      	ldr	r3, [pc, #456]	@ (80033d4 <menu+0x22b0>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	2b09      	cmp	r3, #9
 800320e:	d810      	bhi.n	8003232 <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 8003210:	4a71      	ldr	r2, [pc, #452]	@ (80033d8 <menu+0x22b4>)
 8003212:	2101      	movs	r1, #1
 8003214:	2002      	movs	r0, #2
 8003216:	f005 fb31 	bl	800887c <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800321a:	4b6e      	ldr	r3, [pc, #440]	@ (80033d4 <menu+0x22b0>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	220a      	movs	r2, #10
 8003220:	496e      	ldr	r1, [pc, #440]	@ (80033dc <menu+0x22b8>)
 8003222:	4618      	mov	r0, r3
 8003224:	f009 fe12 	bl	800ce4c <itoa>
			lcd_print(2, 16, snum);
 8003228:	4a6c      	ldr	r2, [pc, #432]	@ (80033dc <menu+0x22b8>)
 800322a:	2110      	movs	r1, #16
 800322c:	2002      	movs	r0, #2
 800322e:	f005 fb25 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003232:	2102      	movs	r1, #2
 8003234:	486a      	ldr	r0, [pc, #424]	@ (80033e0 <menu+0x22bc>)
 8003236:	f006 fe13 	bl	8009e60 <HAL_GPIO_ReadPin>
 800323a:	4603      	mov	r3, r0
 800323c:	2b01      	cmp	r3, #1
 800323e:	d115      	bne.n	800326c <menu+0x2148>
 8003240:	4b68      	ldr	r3, [pc, #416]	@ (80033e4 <menu+0x22c0>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	f083 0301 	eor.w	r3, r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00e      	beq.n	800326c <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 800324e:	4b61      	ldr	r3, [pc, #388]	@ (80033d4 <menu+0x22b0>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	3301      	adds	r3, #1
 8003254:	b2da      	uxtb	r2, r3
 8003256:	4b5f      	ldr	r3, [pc, #380]	@ (80033d4 <menu+0x22b0>)
 8003258:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 800325a:	4b5e      	ldr	r3, [pc, #376]	@ (80033d4 <menu+0x22b0>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2bb4      	cmp	r3, #180	@ 0xb4
 8003260:	d902      	bls.n	8003268 <menu+0x2144>
				makineCalismaTmr = 0;
 8003262:	4b5c      	ldr	r3, [pc, #368]	@ (80033d4 <menu+0x22b0>)
 8003264:	2200      	movs	r2, #0
 8003266:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003268:	f000 fca2 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800326c:	2104      	movs	r1, #4
 800326e:	485c      	ldr	r0, [pc, #368]	@ (80033e0 <menu+0x22bc>)
 8003270:	f006 fdf6 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003274:	4603      	mov	r3, r0
 8003276:	2b01      	cmp	r3, #1
 8003278:	d115      	bne.n	80032a6 <menu+0x2182>
 800327a:	4b5a      	ldr	r3, [pc, #360]	@ (80033e4 <menu+0x22c0>)
 800327c:	781b      	ldrb	r3, [r3, #0]
 800327e:	f083 0301 	eor.w	r3, r3, #1
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00e      	beq.n	80032a6 <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003288:	4b52      	ldr	r3, [pc, #328]	@ (80033d4 <menu+0x22b0>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	3b01      	subs	r3, #1
 800328e:	b2da      	uxtb	r2, r3
 8003290:	4b50      	ldr	r3, [pc, #320]	@ (80033d4 <menu+0x22b0>)
 8003292:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003294:	4b4f      	ldr	r3, [pc, #316]	@ (80033d4 <menu+0x22b0>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2bb5      	cmp	r3, #181	@ 0xb5
 800329a:	d902      	bls.n	80032a2 <menu+0x217e>
		   		makineCalismaTmr = 180;
 800329c:	4b4d      	ldr	r3, [pc, #308]	@ (80033d4 <menu+0x22b0>)
 800329e:	22b4      	movs	r2, #180	@ 0xb4
 80032a0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032a2:	f000 fc85 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032a6:	2108      	movs	r1, #8
 80032a8:	484d      	ldr	r0, [pc, #308]	@ (80033e0 <menu+0x22bc>)
 80032aa:	f006 fdd9 	bl	8009e60 <HAL_GPIO_ReadPin>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d10d      	bne.n	80032d0 <menu+0x21ac>
 80032b4:	4b4b      	ldr	r3, [pc, #300]	@ (80033e4 <menu+0x22c0>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	f083 0301 	eor.w	r3, r3, #1
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d006      	beq.n	80032d0 <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 80032c2:	4b44      	ldr	r3, [pc, #272]	@ (80033d4 <menu+0x22b0>)
 80032c4:	781a      	ldrb	r2, [r3, #0]
 80032c6:	4b48      	ldr	r3, [pc, #288]	@ (80033e8 <menu+0x22c4>)
 80032c8:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80032ca:	4b48      	ldr	r3, [pc, #288]	@ (80033ec <menu+0x22c8>)
 80032cc:	2201      	movs	r2, #1
 80032ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 80032d0:	4b47      	ldr	r3, [pc, #284]	@ (80033f0 <menu+0x22cc>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	2b1b      	cmp	r3, #27
 80032d6:	d166      	bne.n	80033a6 <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 80032d8:	4a46      	ldr	r2, [pc, #280]	@ (80033f4 <menu+0x22d0>)
 80032da:	2101      	movs	r1, #1
 80032dc:	2001      	movs	r0, #1
 80032de:	f005 facd 	bl	800887c <lcd_print>

		if(buzzer == 0) {
 80032e2:	4b45      	ldr	r3, [pc, #276]	@ (80033f8 <menu+0x22d4>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d105      	bne.n	80032f6 <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 80032ea:	4a44      	ldr	r2, [pc, #272]	@ (80033fc <menu+0x22d8>)
 80032ec:	2101      	movs	r1, #1
 80032ee:	2002      	movs	r0, #2
 80032f0:	f005 fac4 	bl	800887c <lcd_print>
 80032f4:	e008      	b.n	8003308 <menu+0x21e4>
		} else if(buzzer == 1) {
 80032f6:	4b40      	ldr	r3, [pc, #256]	@ (80033f8 <menu+0x22d4>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d104      	bne.n	8003308 <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 80032fe:	4a40      	ldr	r2, [pc, #256]	@ (8003400 <menu+0x22dc>)
 8003300:	2101      	movs	r1, #1
 8003302:	2002      	movs	r0, #2
 8003304:	f005 faba 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003308:	2102      	movs	r1, #2
 800330a:	4835      	ldr	r0, [pc, #212]	@ (80033e0 <menu+0x22bc>)
 800330c:	f006 fda8 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003310:	4603      	mov	r3, r0
 8003312:	2b01      	cmp	r3, #1
 8003314:	d115      	bne.n	8003342 <menu+0x221e>
 8003316:	4b33      	ldr	r3, [pc, #204]	@ (80033e4 <menu+0x22c0>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	f083 0301 	eor.w	r3, r3, #1
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00e      	beq.n	8003342 <menu+0x221e>
			buzzer = buzzer + 1;
 8003324:	4b34      	ldr	r3, [pc, #208]	@ (80033f8 <menu+0x22d4>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	3301      	adds	r3, #1
 800332a:	b2da      	uxtb	r2, r3
 800332c:	4b32      	ldr	r3, [pc, #200]	@ (80033f8 <menu+0x22d4>)
 800332e:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003330:	4b31      	ldr	r3, [pc, #196]	@ (80033f8 <menu+0x22d4>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d902      	bls.n	800333e <menu+0x221a>
				buzzer = 0;
 8003338:	4b2f      	ldr	r3, [pc, #188]	@ (80033f8 <menu+0x22d4>)
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800333e:	f000 fc37 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003342:	2104      	movs	r1, #4
 8003344:	4826      	ldr	r0, [pc, #152]	@ (80033e0 <menu+0x22bc>)
 8003346:	f006 fd8b 	bl	8009e60 <HAL_GPIO_ReadPin>
 800334a:	4603      	mov	r3, r0
 800334c:	2b01      	cmp	r3, #1
 800334e:	d115      	bne.n	800337c <menu+0x2258>
 8003350:	4b24      	ldr	r3, [pc, #144]	@ (80033e4 <menu+0x22c0>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	f083 0301 	eor.w	r3, r3, #1
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00e      	beq.n	800337c <menu+0x2258>
			buzzer = buzzer - 1;
 800335e:	4b26      	ldr	r3, [pc, #152]	@ (80033f8 <menu+0x22d4>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	3b01      	subs	r3, #1
 8003364:	b2da      	uxtb	r2, r3
 8003366:	4b24      	ldr	r3, [pc, #144]	@ (80033f8 <menu+0x22d4>)
 8003368:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 800336a:	4b23      	ldr	r3, [pc, #140]	@ (80033f8 <menu+0x22d4>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <menu+0x2254>
		   		buzzer = 1;
 8003372:	4b21      	ldr	r3, [pc, #132]	@ (80033f8 <menu+0x22d4>)
 8003374:	2201      	movs	r2, #1
 8003376:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003378:	f000 fc1a 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800337c:	2108      	movs	r1, #8
 800337e:	4818      	ldr	r0, [pc, #96]	@ (80033e0 <menu+0x22bc>)
 8003380:	f006 fd6e 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003384:	4603      	mov	r3, r0
 8003386:	2b01      	cmp	r3, #1
 8003388:	d10d      	bne.n	80033a6 <menu+0x2282>
 800338a:	4b16      	ldr	r3, [pc, #88]	@ (80033e4 <menu+0x22c0>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	f083 0301 	eor.w	r3, r3, #1
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d006      	beq.n	80033a6 <menu+0x2282>
			eepromData[25] = buzzer;
 8003398:	4b17      	ldr	r3, [pc, #92]	@ (80033f8 <menu+0x22d4>)
 800339a:	781a      	ldrb	r2, [r3, #0]
 800339c:	4b12      	ldr	r3, [pc, #72]	@ (80033e8 <menu+0x22c4>)
 800339e:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80033a0:	4b12      	ldr	r3, [pc, #72]	@ (80033ec <menu+0x22c8>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80033a6:	4b12      	ldr	r3, [pc, #72]	@ (80033f0 <menu+0x22cc>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b1c      	cmp	r3, #28
 80033ac:	f040 8088 	bne.w	80034c0 <menu+0x239c>
		calismaSayModu = 0;
 80033b0:	4b14      	ldr	r3, [pc, #80]	@ (8003404 <menu+0x22e0>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 80033b6:	4a14      	ldr	r2, [pc, #80]	@ (8003408 <menu+0x22e4>)
 80033b8:	2101      	movs	r1, #1
 80033ba:	2001      	movs	r0, #1
 80033bc:	f005 fa5e 	bl	800887c <lcd_print>

		if(demoMode == 0) {
 80033c0:	4b12      	ldr	r3, [pc, #72]	@ (800340c <menu+0x22e8>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d123      	bne.n	8003410 <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 80033c8:	4a0c      	ldr	r2, [pc, #48]	@ (80033fc <menu+0x22d8>)
 80033ca:	2101      	movs	r1, #1
 80033cc:	2002      	movs	r0, #2
 80033ce:	f005 fa55 	bl	800887c <lcd_print>
 80033d2:	e026      	b.n	8003422 <menu+0x22fe>
 80033d4:	20001084 	.word	0x20001084
 80033d8:	2000137c 	.word	0x2000137c
 80033dc:	2000100c 	.word	0x2000100c
 80033e0:	40010800 	.word	0x40010800
 80033e4:	2000109c 	.word	0x2000109c
 80033e8:	20000f9c 	.word	0x20000f9c
 80033ec:	20001099 	.word	0x20001099
 80033f0:	2000106c 	.word	0x2000106c
 80033f4:	20000128 	.word	0x20000128
 80033f8:	20001088 	.word	0x20001088
 80033fc:	20001250 	.word	0x20001250
 8003400:	20001264 	.word	0x20001264
 8003404:	2000108b 	.word	0x2000108b
 8003408:	2000013c 	.word	0x2000013c
 800340c:	2000108a 	.word	0x2000108a
		} else if(demoMode == 1) {
 8003410:	4b80      	ldr	r3, [pc, #512]	@ (8003614 <menu+0x24f0>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d104      	bne.n	8003422 <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 8003418:	4a7f      	ldr	r2, [pc, #508]	@ (8003618 <menu+0x24f4>)
 800341a:	2101      	movs	r1, #1
 800341c:	2002      	movs	r0, #2
 800341e:	f005 fa2d 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003422:	2102      	movs	r1, #2
 8003424:	487d      	ldr	r0, [pc, #500]	@ (800361c <menu+0x24f8>)
 8003426:	f006 fd1b 	bl	8009e60 <HAL_GPIO_ReadPin>
 800342a:	4603      	mov	r3, r0
 800342c:	2b01      	cmp	r3, #1
 800342e:	d115      	bne.n	800345c <menu+0x2338>
 8003430:	4b7b      	ldr	r3, [pc, #492]	@ (8003620 <menu+0x24fc>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	f083 0301 	eor.w	r3, r3, #1
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00e      	beq.n	800345c <menu+0x2338>
			demoMode = demoMode + 1;
 800343e:	4b75      	ldr	r3, [pc, #468]	@ (8003614 <menu+0x24f0>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	3301      	adds	r3, #1
 8003444:	b2da      	uxtb	r2, r3
 8003446:	4b73      	ldr	r3, [pc, #460]	@ (8003614 <menu+0x24f0>)
 8003448:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800344a:	4b72      	ldr	r3, [pc, #456]	@ (8003614 <menu+0x24f0>)
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b01      	cmp	r3, #1
 8003450:	d902      	bls.n	8003458 <menu+0x2334>
				demoMode = 0;
 8003452:	4b70      	ldr	r3, [pc, #448]	@ (8003614 <menu+0x24f0>)
 8003454:	2200      	movs	r2, #0
 8003456:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003458:	f000 fbaa 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800345c:	2104      	movs	r1, #4
 800345e:	486f      	ldr	r0, [pc, #444]	@ (800361c <menu+0x24f8>)
 8003460:	f006 fcfe 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003464:	4603      	mov	r3, r0
 8003466:	2b01      	cmp	r3, #1
 8003468:	d115      	bne.n	8003496 <menu+0x2372>
 800346a:	4b6d      	ldr	r3, [pc, #436]	@ (8003620 <menu+0x24fc>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	f083 0301 	eor.w	r3, r3, #1
 8003472:	b2db      	uxtb	r3, r3
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00e      	beq.n	8003496 <menu+0x2372>
			demoMode = demoMode - 1;
 8003478:	4b66      	ldr	r3, [pc, #408]	@ (8003614 <menu+0x24f0>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	3b01      	subs	r3, #1
 800347e:	b2da      	uxtb	r2, r3
 8003480:	4b64      	ldr	r3, [pc, #400]	@ (8003614 <menu+0x24f0>)
 8003482:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003484:	4b63      	ldr	r3, [pc, #396]	@ (8003614 <menu+0x24f0>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <menu+0x236e>
		   		demoMode = 1;
 800348c:	4b61      	ldr	r3, [pc, #388]	@ (8003614 <menu+0x24f0>)
 800348e:	2201      	movs	r2, #1
 8003490:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003492:	f000 fb8d 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003496:	2108      	movs	r1, #8
 8003498:	4860      	ldr	r0, [pc, #384]	@ (800361c <menu+0x24f8>)
 800349a:	f006 fce1 	bl	8009e60 <HAL_GPIO_ReadPin>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d10d      	bne.n	80034c0 <menu+0x239c>
 80034a4:	4b5e      	ldr	r3, [pc, #376]	@ (8003620 <menu+0x24fc>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	f083 0301 	eor.w	r3, r3, #1
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d006      	beq.n	80034c0 <menu+0x239c>
			eepromData[26] = demoMode;
 80034b2:	4b58      	ldr	r3, [pc, #352]	@ (8003614 <menu+0x24f0>)
 80034b4:	781a      	ldrb	r2, [r3, #0]
 80034b6:	4b5b      	ldr	r3, [pc, #364]	@ (8003624 <menu+0x2500>)
 80034b8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80034ba:	4b5b      	ldr	r3, [pc, #364]	@ (8003628 <menu+0x2504>)
 80034bc:	2201      	movs	r2, #1
 80034be:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80034c0:	4b5a      	ldr	r3, [pc, #360]	@ (800362c <menu+0x2508>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b1d      	cmp	r3, #29
 80034c6:	f040 80d5 	bne.w	8003674 <menu+0x2550>
		finalCount=0;
 80034ca:	4b59      	ldr	r3, [pc, #356]	@ (8003630 <menu+0x250c>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
		if(calismaSayModu == 0) {
 80034d0:	4b58      	ldr	r3, [pc, #352]	@ (8003634 <menu+0x2510>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d135      	bne.n	8003544 <menu+0x2420>
			lcd_print(1, 1, calismaSayisiText);
 80034d8:	4a57      	ldr	r2, [pc, #348]	@ (8003638 <menu+0x2514>)
 80034da:	2101      	movs	r1, #1
 80034dc:	2001      	movs	r0, #1
 80034de:	f005 f9cd 	bl	800887c <lcd_print>

			if(demoMode == 1) {
 80034e2:	4b4c      	ldr	r3, [pc, #304]	@ (8003614 <menu+0x24f0>)
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d113      	bne.n	8003512 <menu+0x23ee>
				finalCount += calismaCountDemo * 255; //sıfır durumu da dahil ediliyor
 80034ea:	4b54      	ldr	r3, [pc, #336]	@ (800363c <menu+0x2518>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	4613      	mov	r3, r2
 80034f2:	021b      	lsls	r3, r3, #8
 80034f4:	1a9a      	subs	r2, r3, r2
 80034f6:	4b4e      	ldr	r3, [pc, #312]	@ (8003630 <menu+0x250c>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4413      	add	r3, r2
 80034fc:	4a4c      	ldr	r2, [pc, #304]	@ (8003630 <menu+0x250c>)
 80034fe:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisiDemo;
 8003500:	4b4f      	ldr	r3, [pc, #316]	@ (8003640 <menu+0x251c>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	4b4a      	ldr	r3, [pc, #296]	@ (8003630 <menu+0x250c>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4413      	add	r3, r2
 800350c:	4a48      	ldr	r2, [pc, #288]	@ (8003630 <menu+0x250c>)
 800350e:	6013      	str	r3, [r2, #0]
 8003510:	e012      	b.n	8003538 <menu+0x2414>
			} else {
				finalCount += calismaCount * 255; //sıfır durumu da dahil ediliyor
 8003512:	4b4c      	ldr	r3, [pc, #304]	@ (8003644 <menu+0x2520>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	461a      	mov	r2, r3
 8003518:	4613      	mov	r3, r2
 800351a:	021b      	lsls	r3, r3, #8
 800351c:	1a9a      	subs	r2, r3, r2
 800351e:	4b44      	ldr	r3, [pc, #272]	@ (8003630 <menu+0x250c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4413      	add	r3, r2
 8003524:	4a42      	ldr	r2, [pc, #264]	@ (8003630 <menu+0x250c>)
 8003526:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisi;
 8003528:	4b47      	ldr	r3, [pc, #284]	@ (8003648 <menu+0x2524>)
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	4b40      	ldr	r3, [pc, #256]	@ (8003630 <menu+0x250c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4413      	add	r3, r2
 8003534:	4a3e      	ldr	r2, [pc, #248]	@ (8003630 <menu+0x250c>)
 8003536:	6013      	str	r3, [r2, #0]
			}

			displayCycleOnLCD(finalCount);
 8003538:	4b3d      	ldr	r3, [pc, #244]	@ (8003630 <menu+0x250c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4618      	mov	r0, r3
 800353e:	f000 fa89 	bl	8003a54 <displayCycleOnLCD>
 8003542:	e00d      	b.n	8003560 <menu+0x243c>
		} else if(calismaSayModu == 1) {
 8003544:	4b3b      	ldr	r3, [pc, #236]	@ (8003634 <menu+0x2510>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d109      	bne.n	8003560 <menu+0x243c>
			lcd_print(1, 1, calismaSayisiText);
 800354c:	4a3a      	ldr	r2, [pc, #232]	@ (8003638 <menu+0x2514>)
 800354e:	2101      	movs	r1, #1
 8003550:	2001      	movs	r0, #1
 8003552:	f005 f993 	bl	800887c <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 8003556:	4a3d      	ldr	r2, [pc, #244]	@ (800364c <menu+0x2528>)
 8003558:	2101      	movs	r1, #1
 800355a:	2002      	movs	r0, #2
 800355c:	f005 f98e 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003560:	2102      	movs	r1, #2
 8003562:	482e      	ldr	r0, [pc, #184]	@ (800361c <menu+0x24f8>)
 8003564:	f006 fc7c 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003568:	4603      	mov	r3, r0
 800356a:	2b01      	cmp	r3, #1
 800356c:	d115      	bne.n	800359a <menu+0x2476>
 800356e:	4b2c      	ldr	r3, [pc, #176]	@ (8003620 <menu+0x24fc>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	f083 0301 	eor.w	r3, r3, #1
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00e      	beq.n	800359a <menu+0x2476>
			calismaSayModu = calismaSayModu + 1;
 800357c:	4b2d      	ldr	r3, [pc, #180]	@ (8003634 <menu+0x2510>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	3301      	adds	r3, #1
 8003582:	b2da      	uxtb	r2, r3
 8003584:	4b2b      	ldr	r3, [pc, #172]	@ (8003634 <menu+0x2510>)
 8003586:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8003588:	4b2a      	ldr	r3, [pc, #168]	@ (8003634 <menu+0x2510>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b01      	cmp	r3, #1
 800358e:	d902      	bls.n	8003596 <menu+0x2472>
				calismaSayModu = 0;
 8003590:	4b28      	ldr	r3, [pc, #160]	@ (8003634 <menu+0x2510>)
 8003592:	2200      	movs	r2, #0
 8003594:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003596:	f000 fb0b 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800359a:	2104      	movs	r1, #4
 800359c:	481f      	ldr	r0, [pc, #124]	@ (800361c <menu+0x24f8>)
 800359e:	f006 fc5f 	bl	8009e60 <HAL_GPIO_ReadPin>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d115      	bne.n	80035d4 <menu+0x24b0>
 80035a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003620 <menu+0x24fc>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	f083 0301 	eor.w	r3, r3, #1
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00e      	beq.n	80035d4 <menu+0x24b0>
			calismaSayModu = calismaSayModu - 1;
 80035b6:	4b1f      	ldr	r3, [pc, #124]	@ (8003634 <menu+0x2510>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	3b01      	subs	r3, #1
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	4b1d      	ldr	r3, [pc, #116]	@ (8003634 <menu+0x2510>)
 80035c0:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80035c2:	4b1c      	ldr	r3, [pc, #112]	@ (8003634 <menu+0x2510>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <menu+0x24ac>
		   		calismaSayModu = 1;
 80035ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003634 <menu+0x2510>)
 80035cc:	2201      	movs	r2, #1
 80035ce:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035d0:	f000 faee 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035d4:	2108      	movs	r1, #8
 80035d6:	4811      	ldr	r0, [pc, #68]	@ (800361c <menu+0x24f8>)
 80035d8:	f006 fc42 	bl	8009e60 <HAL_GPIO_ReadPin>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d148      	bne.n	8003674 <menu+0x2550>
 80035e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003620 <menu+0x24fc>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	f083 0301 	eor.w	r3, r3, #1
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d041      	beq.n	8003674 <menu+0x2550>
			if(demoMode == 1) {
 80035f0:	4b08      	ldr	r3, [pc, #32]	@ (8003614 <menu+0x24f0>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d12b      	bne.n	8003650 <menu+0x252c>
				eepromData[28] = 0;
 80035f8:	4b0a      	ldr	r3, [pc, #40]	@ (8003624 <menu+0x2500>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	771a      	strb	r2, [r3, #28]
				eepromData[30] = 0;
 80035fe:	4b09      	ldr	r3, [pc, #36]	@ (8003624 <menu+0x2500>)
 8003600:	2200      	movs	r2, #0
 8003602:	779a      	strb	r2, [r3, #30]
				calismaSayisiDemo = 0;
 8003604:	4b0e      	ldr	r3, [pc, #56]	@ (8003640 <menu+0x251c>)
 8003606:	2200      	movs	r2, #0
 8003608:	701a      	strb	r2, [r3, #0]
				calismaCountDemo = 0;
 800360a:	4b0c      	ldr	r3, [pc, #48]	@ (800363c <menu+0x2518>)
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]
 8003610:	e02a      	b.n	8003668 <menu+0x2544>
 8003612:	bf00      	nop
 8003614:	2000108a 	.word	0x2000108a
 8003618:	20001264 	.word	0x20001264
 800361c:	40010800 	.word	0x40010800
 8003620:	2000109c 	.word	0x2000109c
 8003624:	20000f9c 	.word	0x20000f9c
 8003628:	20001099 	.word	0x20001099
 800362c:	2000106c 	.word	0x2000106c
 8003630:	20001068 	.word	0x20001068
 8003634:	2000108b 	.word	0x2000108b
 8003638:	200015c0 	.word	0x200015c0
 800363c:	20001067 	.word	0x20001067
 8003640:	20001065 	.word	0x20001065
 8003644:	20001066 	.word	0x20001066
 8003648:	20001064 	.word	0x20001064
 800364c:	200015d4 	.word	0x200015d4
			} else {
				eepromData[27] = 0;
 8003650:	4b4b      	ldr	r3, [pc, #300]	@ (8003780 <menu+0x265c>)
 8003652:	2200      	movs	r2, #0
 8003654:	76da      	strb	r2, [r3, #27]
				eepromData[29] = 0;
 8003656:	4b4a      	ldr	r3, [pc, #296]	@ (8003780 <menu+0x265c>)
 8003658:	2200      	movs	r2, #0
 800365a:	775a      	strb	r2, [r3, #29]
				calismaSayisi = 0;
 800365c:	4b49      	ldr	r3, [pc, #292]	@ (8003784 <menu+0x2660>)
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]
				calismaCount = 0;
 8003662:	4b49      	ldr	r3, [pc, #292]	@ (8003788 <menu+0x2664>)
 8003664:	2200      	movs	r2, #0
 8003666:	701a      	strb	r2, [r3, #0]
			}
			calismaSayModu = 0;
 8003668:	4b48      	ldr	r3, [pc, #288]	@ (800378c <menu+0x2668>)
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 800366e:	4b48      	ldr	r3, [pc, #288]	@ (8003790 <menu+0x266c>)
 8003670:	2201      	movs	r2, #1
 8003672:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8003674:	4b47      	ldr	r3, [pc, #284]	@ (8003794 <menu+0x2670>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b1e      	cmp	r3, #30
 800367a:	d16a      	bne.n	8003752 <menu+0x262e>
		calismaSayModu = 0;
 800367c:	4b43      	ldr	r3, [pc, #268]	@ (800378c <menu+0x2668>)
 800367e:	2200      	movs	r2, #0
 8003680:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 8003682:	4a45      	ldr	r2, [pc, #276]	@ (8003798 <menu+0x2674>)
 8003684:	2101      	movs	r1, #1
 8003686:	2001      	movs	r0, #1
 8003688:	f005 f8f8 	bl	800887c <lcd_print>
		lcd_print(2, 1, secilenDilText);
 800368c:	4a43      	ldr	r2, [pc, #268]	@ (800379c <menu+0x2678>)
 800368e:	2101      	movs	r1, #1
 8003690:	2002      	movs	r0, #2
 8003692:	f005 f8f3 	bl	800887c <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003696:	2102      	movs	r1, #2
 8003698:	4841      	ldr	r0, [pc, #260]	@ (80037a0 <menu+0x267c>)
 800369a:	f006 fbe1 	bl	8009e60 <HAL_GPIO_ReadPin>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d11c      	bne.n	80036de <menu+0x25ba>
 80036a4:	4b3f      	ldr	r3, [pc, #252]	@ (80037a4 <menu+0x2680>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	f083 0301 	eor.w	r3, r3, #1
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d015      	beq.n	80036de <menu+0x25ba>
			dilSecim = dilSecim + 1;
 80036b2:	4b3d      	ldr	r3, [pc, #244]	@ (80037a8 <menu+0x2684>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	3301      	adds	r3, #1
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	4b3b      	ldr	r3, [pc, #236]	@ (80037a8 <menu+0x2684>)
 80036bc:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80036be:	4b3a      	ldr	r3, [pc, #232]	@ (80037a8 <menu+0x2684>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d902      	bls.n	80036cc <menu+0x25a8>
				dilSecim = 0;
 80036c6:	4b38      	ldr	r3, [pc, #224]	@ (80037a8 <menu+0x2684>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	701a      	strb	r2, [r3, #0]
			}
			resetMenuTexts();
 80036cc:	f003 ff70 	bl	80075b0 <resetMenuTexts>
			loadMenuTexts(dilSecim);
 80036d0:	4b35      	ldr	r3, [pc, #212]	@ (80037a8 <menu+0x2684>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f002 fae5 	bl	8005ca4 <loadMenuTexts>

			bekle();
 80036da:	f000 fa69 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036de:	2104      	movs	r1, #4
 80036e0:	482f      	ldr	r0, [pc, #188]	@ (80037a0 <menu+0x267c>)
 80036e2:	f006 fbbd 	bl	8009e60 <HAL_GPIO_ReadPin>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d11c      	bne.n	8003726 <menu+0x2602>
 80036ec:	4b2d      	ldr	r3, [pc, #180]	@ (80037a4 <menu+0x2680>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	f083 0301 	eor.w	r3, r3, #1
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d015      	beq.n	8003726 <menu+0x2602>
			dilSecim = dilSecim - 1;
 80036fa:	4b2b      	ldr	r3, [pc, #172]	@ (80037a8 <menu+0x2684>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	3b01      	subs	r3, #1
 8003700:	b2da      	uxtb	r2, r3
 8003702:	4b29      	ldr	r3, [pc, #164]	@ (80037a8 <menu+0x2684>)
 8003704:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003706:	4b28      	ldr	r3, [pc, #160]	@ (80037a8 <menu+0x2684>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <menu+0x25f0>
		   		dilSecim = 1;
 800370e:	4b26      	ldr	r3, [pc, #152]	@ (80037a8 <menu+0x2684>)
 8003710:	2201      	movs	r2, #1
 8003712:	701a      	strb	r2, [r3, #0]
		   	}
		   	resetMenuTexts();
 8003714:	f003 ff4c 	bl	80075b0 <resetMenuTexts>
		   	loadMenuTexts(dilSecim);
 8003718:	4b23      	ldr	r3, [pc, #140]	@ (80037a8 <menu+0x2684>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f002 fac1 	bl	8005ca4 <loadMenuTexts>

			bekle();
 8003722:	f000 fa45 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003726:	2108      	movs	r1, #8
 8003728:	481d      	ldr	r0, [pc, #116]	@ (80037a0 <menu+0x267c>)
 800372a:	f006 fb99 	bl	8009e60 <HAL_GPIO_ReadPin>
 800372e:	4603      	mov	r3, r0
 8003730:	2b01      	cmp	r3, #1
 8003732:	d10e      	bne.n	8003752 <menu+0x262e>
 8003734:	4b1b      	ldr	r3, [pc, #108]	@ (80037a4 <menu+0x2680>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	f083 0301 	eor.w	r3, r3, #1
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d007      	beq.n	8003752 <menu+0x262e>
			eepromData[33] = dilSecim;
 8003742:	4b19      	ldr	r3, [pc, #100]	@ (80037a8 <menu+0x2684>)
 8003744:	781a      	ldrb	r2, [r3, #0]
 8003746:	4b0e      	ldr	r3, [pc, #56]	@ (8003780 <menu+0x265c>)
 8003748:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 800374c:	4b10      	ldr	r3, [pc, #64]	@ (8003790 <menu+0x266c>)
 800374e:	2201      	movs	r2, #1
 8003750:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003752:	4b10      	ldr	r3, [pc, #64]	@ (8003794 <menu+0x2670>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b1f      	cmp	r3, #31
 8003758:	f040 8087 	bne.w	800386a <menu+0x2746>
		calismaSayModu = 0;
 800375c:	4b0b      	ldr	r3, [pc, #44]	@ (800378c <menu+0x2668>)
 800375e:	2200      	movs	r2, #0
 8003760:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 8003762:	4a12      	ldr	r2, [pc, #72]	@ (80037ac <menu+0x2688>)
 8003764:	2101      	movs	r1, #1
 8003766:	2001      	movs	r0, #1
 8003768:	f005 f888 	bl	800887c <lcd_print>

		if(iotMode == 0) {
 800376c:	4b10      	ldr	r3, [pc, #64]	@ (80037b0 <menu+0x268c>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d121      	bne.n	80037b8 <menu+0x2694>
			lcd_print(2, 1, pasifText);
 8003774:	4a0f      	ldr	r2, [pc, #60]	@ (80037b4 <menu+0x2690>)
 8003776:	2101      	movs	r1, #1
 8003778:	2002      	movs	r0, #2
 800377a:	f005 f87f 	bl	800887c <lcd_print>
 800377e:	e024      	b.n	80037ca <menu+0x26a6>
 8003780:	20000f9c 	.word	0x20000f9c
 8003784:	20001064 	.word	0x20001064
 8003788:	20001066 	.word	0x20001066
 800378c:	2000108b 	.word	0x2000108b
 8003790:	20001099 	.word	0x20001099
 8003794:	2000106c 	.word	0x2000106c
 8003798:	200015e8 	.word	0x200015e8
 800379c:	200015fc 	.word	0x200015fc
 80037a0:	40010800 	.word	0x40010800
 80037a4:	2000109c 	.word	0x2000109c
 80037a8:	2000108c 	.word	0x2000108c
 80037ac:	20000150 	.word	0x20000150
 80037b0:	20001097 	.word	0x20001097
 80037b4:	20001250 	.word	0x20001250
		} else if(iotMode == 1) {
 80037b8:	4b99      	ldr	r3, [pc, #612]	@ (8003a20 <menu+0x28fc>)
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d104      	bne.n	80037ca <menu+0x26a6>
			lcd_print(2, 1, aktifText);
 80037c0:	4a98      	ldr	r2, [pc, #608]	@ (8003a24 <menu+0x2900>)
 80037c2:	2101      	movs	r1, #1
 80037c4:	2002      	movs	r0, #2
 80037c6:	f005 f859 	bl	800887c <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80037ca:	2102      	movs	r1, #2
 80037cc:	4896      	ldr	r0, [pc, #600]	@ (8003a28 <menu+0x2904>)
 80037ce:	f006 fb47 	bl	8009e60 <HAL_GPIO_ReadPin>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d115      	bne.n	8003804 <menu+0x26e0>
 80037d8:	4b94      	ldr	r3, [pc, #592]	@ (8003a2c <menu+0x2908>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	f083 0301 	eor.w	r3, r3, #1
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00e      	beq.n	8003804 <menu+0x26e0>
			iotMode = iotMode + 1;
 80037e6:	4b8e      	ldr	r3, [pc, #568]	@ (8003a20 <menu+0x28fc>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	3301      	adds	r3, #1
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	4b8c      	ldr	r3, [pc, #560]	@ (8003a20 <menu+0x28fc>)
 80037f0:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80037f2:	4b8b      	ldr	r3, [pc, #556]	@ (8003a20 <menu+0x28fc>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d902      	bls.n	8003800 <menu+0x26dc>
				iotMode = 0;
 80037fa:	4b89      	ldr	r3, [pc, #548]	@ (8003a20 <menu+0x28fc>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003800:	f000 f9d6 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003804:	2104      	movs	r1, #4
 8003806:	4888      	ldr	r0, [pc, #544]	@ (8003a28 <menu+0x2904>)
 8003808:	f006 fb2a 	bl	8009e60 <HAL_GPIO_ReadPin>
 800380c:	4603      	mov	r3, r0
 800380e:	2b01      	cmp	r3, #1
 8003810:	d115      	bne.n	800383e <menu+0x271a>
 8003812:	4b86      	ldr	r3, [pc, #536]	@ (8003a2c <menu+0x2908>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	f083 0301 	eor.w	r3, r3, #1
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00e      	beq.n	800383e <menu+0x271a>
			iotMode = iotMode - 1;
 8003820:	4b7f      	ldr	r3, [pc, #508]	@ (8003a20 <menu+0x28fc>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	3b01      	subs	r3, #1
 8003826:	b2da      	uxtb	r2, r3
 8003828:	4b7d      	ldr	r3, [pc, #500]	@ (8003a20 <menu+0x28fc>)
 800382a:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 800382c:	4b7c      	ldr	r3, [pc, #496]	@ (8003a20 <menu+0x28fc>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <menu+0x2716>
		   		iotMode = 1;
 8003834:	4b7a      	ldr	r3, [pc, #488]	@ (8003a20 <menu+0x28fc>)
 8003836:	2201      	movs	r2, #1
 8003838:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800383a:	f000 f9b9 	bl	8003bb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800383e:	2108      	movs	r1, #8
 8003840:	4879      	ldr	r0, [pc, #484]	@ (8003a28 <menu+0x2904>)
 8003842:	f006 fb0d 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003846:	4603      	mov	r3, r0
 8003848:	2b01      	cmp	r3, #1
 800384a:	d10e      	bne.n	800386a <menu+0x2746>
 800384c:	4b77      	ldr	r3, [pc, #476]	@ (8003a2c <menu+0x2908>)
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	f083 0301 	eor.w	r3, r3, #1
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <menu+0x2746>
			eepromData[48] = iotMode;
 800385a:	4b71      	ldr	r3, [pc, #452]	@ (8003a20 <menu+0x28fc>)
 800385c:	781a      	ldrb	r2, [r3, #0]
 800385e:	4b74      	ldr	r3, [pc, #464]	@ (8003a30 <menu+0x290c>)
 8003860:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003864:	4b73      	ldr	r3, [pc, #460]	@ (8003a34 <menu+0x2910>)
 8003866:	2201      	movs	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 800386a:	4b73      	ldr	r3, [pc, #460]	@ (8003a38 <menu+0x2914>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b20      	cmp	r3, #32
 8003870:	d127      	bne.n	80038c2 <menu+0x279e>
		calismaSayModu = 0;
 8003872:	4b72      	ldr	r3, [pc, #456]	@ (8003a3c <menu+0x2918>)
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, machineIDText);
 8003878:	4a71      	ldr	r2, [pc, #452]	@ (8003a40 <menu+0x291c>)
 800387a:	2101      	movs	r1, #1
 800387c:	2001      	movs	r0, #1
 800387e:	f004 fffd 	bl	800887c <lcd_print>

		convertArrays(1);
 8003882:	2001      	movs	r0, #1
 8003884:	f7fd f84e 	bl	8000924 <convertArrays>
		HAL_Delay(50);
 8003888:	2032      	movs	r0, #50	@ 0x32
 800388a:	f005 fd19 	bl	80092c0 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 800388e:	2001      	movs	r0, #1
 8003890:	f7fd fbec 	bl	800106c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003894:	2102      	movs	r1, #2
 8003896:	4864      	ldr	r0, [pc, #400]	@ (8003a28 <menu+0x2904>)
 8003898:	f006 fae2 	bl	8009e60 <HAL_GPIO_ReadPin>
 800389c:	4603      	mov	r3, r0
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d10f      	bne.n	80038c2 <menu+0x279e>
 80038a2:	2104      	movs	r1, #4
 80038a4:	4860      	ldr	r0, [pc, #384]	@ (8003a28 <menu+0x2904>)
 80038a6:	f006 fadb 	bl	8009e60 <HAL_GPIO_ReadPin>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d108      	bne.n	80038c2 <menu+0x279e>
 80038b0:	4b5e      	ldr	r3, [pc, #376]	@ (8003a2c <menu+0x2908>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	f083 0301 	eor.w	r3, r3, #1
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <menu+0x279e>
			takeMachineIDWithConfirmation();
 80038be:	f004 f8eb 	bl	8007a98 <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 80038c2:	4b5d      	ldr	r3, [pc, #372]	@ (8003a38 <menu+0x2914>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	2b21      	cmp	r3, #33	@ 0x21
 80038c8:	d12b      	bne.n	8003922 <menu+0x27fe>
		calismaSayModu = 0;
 80038ca:	4b5c      	ldr	r3, [pc, #368]	@ (8003a3c <menu+0x2918>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 80038d0:	2002      	movs	r0, #2
 80038d2:	f7fd f827 	bl	8000924 <convertArrays>
		HAL_Delay(50);
 80038d6:	2032      	movs	r0, #50	@ 0x32
 80038d8:	f005 fcf2 	bl	80092c0 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 80038dc:	2002      	movs	r0, #2
 80038de:	f7fd fbc5 	bl	800106c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038e2:	2102      	movs	r1, #2
 80038e4:	4850      	ldr	r0, [pc, #320]	@ (8003a28 <menu+0x2904>)
 80038e6:	f006 fabb 	bl	8009e60 <HAL_GPIO_ReadPin>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d118      	bne.n	8003922 <menu+0x27fe>
 80038f0:	2104      	movs	r1, #4
 80038f2:	484d      	ldr	r0, [pc, #308]	@ (8003a28 <menu+0x2904>)
 80038f4:	f006 fab4 	bl	8009e60 <HAL_GPIO_ReadPin>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d111      	bne.n	8003922 <menu+0x27fe>
 80038fe:	4b4b      	ldr	r3, [pc, #300]	@ (8003a2c <menu+0x2908>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	f083 0301 	eor.w	r3, r3, #1
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <menu+0x27fe>
			takeWifiSSID();
 800390c:	f004 fadc 	bl	8007ec8 <takeWifiSSID>

			convertArrays(2);
 8003910:	2002      	movs	r0, #2
 8003912:	f7fd f807 	bl	8000924 <convertArrays>
			HAL_Delay(50);
 8003916:	2032      	movs	r0, #50	@ 0x32
 8003918:	f005 fcd2 	bl	80092c0 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 800391c:	2002      	movs	r0, #2
 800391e:	f7fd fba5 	bl	800106c <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003922:	4b45      	ldr	r3, [pc, #276]	@ (8003a38 <menu+0x2914>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	2b22      	cmp	r3, #34	@ 0x22
 8003928:	d12b      	bne.n	8003982 <menu+0x285e>
		calismaSayModu = 0;
 800392a:	4b44      	ldr	r3, [pc, #272]	@ (8003a3c <menu+0x2918>)
 800392c:	2200      	movs	r2, #0
 800392e:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8003930:	2003      	movs	r0, #3
 8003932:	f7fc fff7 	bl	8000924 <convertArrays>
		HAL_Delay(50);
 8003936:	2032      	movs	r0, #50	@ 0x32
 8003938:	f005 fcc2 	bl	80092c0 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 800393c:	2003      	movs	r0, #3
 800393e:	f7fd fb95 	bl	800106c <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003942:	2102      	movs	r1, #2
 8003944:	4838      	ldr	r0, [pc, #224]	@ (8003a28 <menu+0x2904>)
 8003946:	f006 fa8b 	bl	8009e60 <HAL_GPIO_ReadPin>
 800394a:	4603      	mov	r3, r0
 800394c:	2b01      	cmp	r3, #1
 800394e:	d118      	bne.n	8003982 <menu+0x285e>
 8003950:	2104      	movs	r1, #4
 8003952:	4835      	ldr	r0, [pc, #212]	@ (8003a28 <menu+0x2904>)
 8003954:	f006 fa84 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003958:	4603      	mov	r3, r0
 800395a:	2b01      	cmp	r3, #1
 800395c:	d111      	bne.n	8003982 <menu+0x285e>
 800395e:	4b33      	ldr	r3, [pc, #204]	@ (8003a2c <menu+0x2908>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	f083 0301 	eor.w	r3, r3, #1
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00a      	beq.n	8003982 <menu+0x285e>
			takeWifiPass();
 800396c:	f004 fc6a 	bl	8008244 <takeWifiPass>

			convertArrays(3);
 8003970:	2003      	movs	r0, #3
 8003972:	f7fc ffd7 	bl	8000924 <convertArrays>
			HAL_Delay(50);
 8003976:	2032      	movs	r0, #50	@ 0x32
 8003978:	f005 fca2 	bl	80092c0 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 800397c:	2003      	movs	r0, #3
 800397e:	f7fd fb75 	bl	800106c <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8003982:	4b2d      	ldr	r3, [pc, #180]	@ (8003a38 <menu+0x2914>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	2b23      	cmp	r3, #35	@ 0x23
 8003988:	d146      	bne.n	8003a18 <menu+0x28f4>
		lcd_print(1, 1, menudenCikisText);
 800398a:	4a2e      	ldr	r2, [pc, #184]	@ (8003a44 <menu+0x2920>)
 800398c:	2101      	movs	r1, #1
 800398e:	2001      	movs	r0, #1
 8003990:	f004 ff74 	bl	800887c <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003994:	4a2c      	ldr	r2, [pc, #176]	@ (8003a48 <menu+0x2924>)
 8003996:	2101      	movs	r1, #1
 8003998:	2002      	movs	r0, #2
 800399a:	f004 ff6f 	bl	800887c <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 800399e:	2108      	movs	r1, #8
 80039a0:	4821      	ldr	r0, [pc, #132]	@ (8003a28 <menu+0x2904>)
 80039a2:	f006 fa5d 	bl	8009e60 <HAL_GPIO_ReadPin>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d135      	bne.n	8003a18 <menu+0x28f4>
			menuGiris = 0;
 80039ac:	4b27      	ldr	r3, [pc, #156]	@ (8003a4c <menu+0x2928>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	701a      	strb	r2, [r3, #0]

			uint32_t startTick = HAL_GetTick();
 80039b2:	f005 fc7b 	bl	80092ac <HAL_GetTick>
 80039b6:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 80039b8:	e007      	b.n	80039ca <menu+0x28a6>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 80039ba:	f005 fc77 	bl	80092ac <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80039c8:	d806      	bhi.n	80039d8 <menu+0x28b4>
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 80039ca:	4821      	ldr	r0, [pc, #132]	@ (8003a50 <menu+0x292c>)
 80039cc:	f007 f871 	bl	800aab2 <HAL_I2C_GetError>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b04      	cmp	r3, #4
 80039d4:	d0f1      	beq.n	80039ba <menu+0x2896>
 80039d6:	e000      	b.n	80039da <menu+0x28b6>
			        break;
 80039d8:	bf00      	nop
			    }
			}

			startTick = HAL_GetTick();
 80039da:	f005 fc67 	bl	80092ac <HAL_GetTick>
 80039de:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80039e0:	e007      	b.n	80039f2 <menu+0x28ce>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 80039e2:	f005 fc63 	bl	80092ac <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80039f0:	d806      	bhi.n	8003a00 <menu+0x28dc>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80039f2:	4817      	ldr	r0, [pc, #92]	@ (8003a50 <menu+0x292c>)
 80039f4:	f007 f850 	bl	800aa98 <HAL_I2C_GetState>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b20      	cmp	r3, #32
 80039fc:	d1f1      	bne.n	80039e2 <menu+0x28be>
 80039fe:	e000      	b.n	8003a02 <menu+0x28de>
			        break;
 8003a00:	bf00      	nop
			    }
			}

			saveEEPROM(0);
 8003a02:	2000      	movs	r0, #0
 8003a04:	f7fc fe8c 	bl	8000720 <saveEEPROM>

			lcd_clear();
 8003a08:	f004 ff64 	bl	80088d4 <lcd_clear>
			HAL_Delay(500);
 8003a0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003a10:	f005 fc56 	bl	80092c0 <HAL_Delay>
			NVIC_SystemReset();
 8003a14:	f7fd fb70 	bl	80010f8 <__NVIC_SystemReset>
		}
	}
}
 8003a18:	bf00      	nop
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	20001097 	.word	0x20001097
 8003a24:	20001264 	.word	0x20001264
 8003a28:	40010800 	.word	0x40010800
 8003a2c:	2000109c 	.word	0x2000109c
 8003a30:	20000f9c 	.word	0x20000f9c
 8003a34:	20001099 	.word	0x20001099
 8003a38:	2000106c 	.word	0x2000106c
 8003a3c:	2000108b 	.word	0x2000108b
 8003a40:	20001778 	.word	0x20001778
 8003a44:	20001610 	.word	0x20001610
 8003a48:	20001624 	.word	0x20001624
 8003a4c:	20001089 	.word	0x20001089
 8003a50:	200017f0 	.word	0x200017f0

08003a54 <displayCycleOnLCD>:

void displayCycleOnLCD(int finalCount) {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08a      	sub	sp, #40	@ 0x28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
    int padding, i;

    itoa(finalCount, snum, 10);
 8003a5c:	220a      	movs	r2, #10
 8003a5e:	491c      	ldr	r1, [pc, #112]	@ (8003ad0 <displayCycleOnLCD+0x7c>)
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f009 f9f3 	bl	800ce4c <itoa>

    int length = strlen(snum);
 8003a66:	481a      	ldr	r0, [pc, #104]	@ (8003ad0 <displayCycleOnLCD+0x7c>)
 8003a68:	f7fc fbdc 	bl	8000224 <strlen>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	623b      	str	r3, [r7, #32]

    padding = (16 - length) / 2;
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	f1c3 0310 	rsb	r3, r3, #16
 8003a76:	0fda      	lsrs	r2, r3, #31
 8003a78:	4413      	add	r3, r2
 8003a7a:	105b      	asrs	r3, r3, #1
 8003a7c:	61fb      	str	r3, [r7, #28]

    char displayLine[17];
    memset(displayLine, ' ', 16);
 8003a7e:	f107 0308 	add.w	r3, r7, #8
 8003a82:	2210      	movs	r2, #16
 8003a84:	2120      	movs	r1, #32
 8003a86:	4618      	mov	r0, r3
 8003a88:	f009 fa24 	bl	800ced4 <memset>
    displayLine[16] = '\0'; // Null terminator
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	763b      	strb	r3, [r7, #24]

    for (i = 0; i < length; i++) {
 8003a90:	2300      	movs	r3, #0
 8003a92:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a94:	e00d      	b.n	8003ab2 <displayCycleOnLCD+0x5e>
        displayLine[padding + i] = snum[i];
 8003a96:	69fa      	ldr	r2, [r7, #28]
 8003a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9a:	4413      	add	r3, r2
 8003a9c:	490c      	ldr	r1, [pc, #48]	@ (8003ad0 <displayCycleOnLCD+0x7c>)
 8003a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aa0:	440a      	add	r2, r1
 8003aa2:	7812      	ldrb	r2, [r2, #0]
 8003aa4:	3328      	adds	r3, #40	@ 0x28
 8003aa6:	443b      	add	r3, r7
 8003aa8:	f803 2c20 	strb.w	r2, [r3, #-32]
    for (i = 0; i < length; i++) {
 8003aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aae:	3301      	adds	r3, #1
 8003ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	dbed      	blt.n	8003a96 <displayCycleOnLCD+0x42>
    }

    lcd_print(2, 1, displayLine);
 8003aba:	f107 0308 	add.w	r3, r7, #8
 8003abe:	461a      	mov	r2, r3
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	2002      	movs	r0, #2
 8003ac4:	f004 feda 	bl	800887c <lcd_print>
}
 8003ac8:	bf00      	nop
 8003aca:	3728      	adds	r7, #40	@ 0x28
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	2000100c 	.word	0x2000100c

08003ad4 <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003ade:	79fb      	ldrb	r3, [r7, #7]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d105      	bne.n	8003af0 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003ae4:	4a24      	ldr	r2, [pc, #144]	@ (8003b78 <lcdUpdate+0xa4>)
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	2002      	movs	r0, #2
 8003aea:	f004 fec7 	bl	800887c <lcd_print>
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
		HAL_Delay(10);
	}
}
 8003aee:	e03e      	b.n	8003b6e <lcdUpdate+0x9a>
	} else if(y==2) {
 8003af0:	79fb      	ldrb	r3, [r7, #7]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d105      	bne.n	8003b02 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003af6:	4a20      	ldr	r2, [pc, #128]	@ (8003b78 <lcdUpdate+0xa4>)
 8003af8:	2102      	movs	r1, #2
 8003afa:	2002      	movs	r0, #2
 8003afc:	f004 febe 	bl	800887c <lcd_print>
}
 8003b00:	e035      	b.n	8003b6e <lcdUpdate+0x9a>
	} else if(y==3) {
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d105      	bne.n	8003b14 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003b08:	4a1b      	ldr	r2, [pc, #108]	@ (8003b78 <lcdUpdate+0xa4>)
 8003b0a:	2103      	movs	r1, #3
 8003b0c:	2002      	movs	r0, #2
 8003b0e:	f004 feb5 	bl	800887c <lcd_print>
}
 8003b12:	e02c      	b.n	8003b6e <lcdUpdate+0x9a>
	} else if(y==4) {
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	2b04      	cmp	r3, #4
 8003b18:	d105      	bne.n	8003b26 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003b1a:	4a17      	ldr	r2, [pc, #92]	@ (8003b78 <lcdUpdate+0xa4>)
 8003b1c:	2104      	movs	r1, #4
 8003b1e:	2002      	movs	r0, #2
 8003b20:	f004 feac 	bl	800887c <lcd_print>
}
 8003b24:	e023      	b.n	8003b6e <lcdUpdate+0x9a>
	} else if(y==5) {
 8003b26:	79fb      	ldrb	r3, [r7, #7]
 8003b28:	2b05      	cmp	r3, #5
 8003b2a:	d105      	bne.n	8003b38 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003b2c:	4a12      	ldr	r2, [pc, #72]	@ (8003b78 <lcdUpdate+0xa4>)
 8003b2e:	2105      	movs	r1, #5
 8003b30:	2002      	movs	r0, #2
 8003b32:	f004 fea3 	bl	800887c <lcd_print>
}
 8003b36:	e01a      	b.n	8003b6e <lcdUpdate+0x9a>
	} else if(y==6) {
 8003b38:	79fb      	ldrb	r3, [r7, #7]
 8003b3a:	2b06      	cmp	r3, #6
 8003b3c:	d105      	bne.n	8003b4a <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8003b3e:	4a0e      	ldr	r2, [pc, #56]	@ (8003b78 <lcdUpdate+0xa4>)
 8003b40:	2106      	movs	r1, #6
 8003b42:	2002      	movs	r0, #2
 8003b44:	f004 fe9a 	bl	800887c <lcd_print>
}
 8003b48:	e011      	b.n	8003b6e <lcdUpdate+0x9a>
	} else if (y==7) {
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	2b07      	cmp	r3, #7
 8003b4e:	d10e      	bne.n	8003b6e <lcdUpdate+0x9a>
		lcd_clear();
 8003b50:	f004 fec0 	bl	80088d4 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8003b54:	4a09      	ldr	r2, [pc, #36]	@ (8003b7c <lcdUpdate+0xa8>)
 8003b56:	2101      	movs	r1, #1
 8003b58:	2001      	movs	r0, #1
 8003b5a:	f004 fe8f 	bl	800887c <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8003b5e:	4a08      	ldr	r2, [pc, #32]	@ (8003b80 <lcdUpdate+0xac>)
 8003b60:	2101      	movs	r1, #1
 8003b62:	2002      	movs	r0, #2
 8003b64:	f004 fe8a 	bl	800887c <lcd_print>
		HAL_Delay(10);
 8003b68:	200a      	movs	r0, #10
 8003b6a:	f005 fba9 	bl	80092c0 <HAL_Delay>
}
 8003b6e:	bf00      	nop
 8003b70:	3708      	adds	r7, #8
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	0800d0a4 	.word	0x0800d0a4
 8003b7c:	200000c4 	.word	0x200000c4
 8003b80:	200000d8 	.word	0x200000d8

08003b84 <checkLCDBacklight>:

void checkLCDBacklight() {
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8003b88:	4b07      	ldr	r3, [pc, #28]	@ (8003ba8 <checkLCDBacklight+0x24>)
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	4b07      	ldr	r3, [pc, #28]	@ (8003bac <checkLCDBacklight+0x28>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b3b      	cmp	r3, #59	@ 0x3b
 8003b94:	d903      	bls.n	8003b9e <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8003b96:	2000      	movs	r0, #0
 8003b98:	f004 febc 	bl	8008914 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8003b9c:	e002      	b.n	8003ba4 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	f004 feb8 	bl	8008914 <lcd_backlight>
}
 8003ba4:	bf00      	nop
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	20001044 	.word	0x20001044
 8003bac:	20001060 	.word	0x20001060

08003bb0 <bekle>:

void bekle() {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
	timer1=millis;
 8003bb4:	4b47      	ldr	r3, [pc, #284]	@ (8003cd4 <bekle+0x124>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a47      	ldr	r2, [pc, #284]	@ (8003cd8 <bekle+0x128>)
 8003bba:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003bbc:	e002      	b.n	8003bc4 <bekle+0x14>
    	butonKontrol = 1;
 8003bbe:	4b47      	ldr	r3, [pc, #284]	@ (8003cdc <bekle+0x12c>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003bc4:	2101      	movs	r1, #1
 8003bc6:	4846      	ldr	r0, [pc, #280]	@ (8003ce0 <bekle+0x130>)
 8003bc8:	f006 f94a 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d109      	bne.n	8003be6 <bekle+0x36>
 8003bd2:	4b40      	ldr	r3, [pc, #256]	@ (8003cd4 <bekle+0x124>)
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	4b40      	ldr	r3, [pc, #256]	@ (8003cd8 <bekle+0x128>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d0ef      	beq.n	8003bbe <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003bde:	e002      	b.n	8003be6 <bekle+0x36>
    	butonKontrol = 1;
 8003be0:	4b3e      	ldr	r3, [pc, #248]	@ (8003cdc <bekle+0x12c>)
 8003be2:	2201      	movs	r2, #1
 8003be4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003be6:	2108      	movs	r1, #8
 8003be8:	483e      	ldr	r0, [pc, #248]	@ (8003ce4 <bekle+0x134>)
 8003bea:	f006 f939 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d109      	bne.n	8003c08 <bekle+0x58>
 8003bf4:	4b37      	ldr	r3, [pc, #220]	@ (8003cd4 <bekle+0x124>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	4b37      	ldr	r3, [pc, #220]	@ (8003cd8 <bekle+0x128>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d0ef      	beq.n	8003be0 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003c00:	e002      	b.n	8003c08 <bekle+0x58>
    	butonKontrol = 1;
 8003c02:	4b36      	ldr	r3, [pc, #216]	@ (8003cdc <bekle+0x12c>)
 8003c04:	2201      	movs	r2, #1
 8003c06:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003c08:	2102      	movs	r1, #2
 8003c0a:	4835      	ldr	r0, [pc, #212]	@ (8003ce0 <bekle+0x130>)
 8003c0c:	f006 f928 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d109      	bne.n	8003c2a <bekle+0x7a>
 8003c16:	4b2f      	ldr	r3, [pc, #188]	@ (8003cd4 <bekle+0x124>)
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8003cd8 <bekle+0x128>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d0ef      	beq.n	8003c02 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003c22:	e002      	b.n	8003c2a <bekle+0x7a>
    	butonKontrol = 1;
 8003c24:	4b2d      	ldr	r3, [pc, #180]	@ (8003cdc <bekle+0x12c>)
 8003c26:	2201      	movs	r2, #1
 8003c28:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003c2a:	2104      	movs	r1, #4
 8003c2c:	482c      	ldr	r0, [pc, #176]	@ (8003ce0 <bekle+0x130>)
 8003c2e:	f006 f917 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d109      	bne.n	8003c4c <bekle+0x9c>
 8003c38:	4b26      	ldr	r3, [pc, #152]	@ (8003cd4 <bekle+0x124>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	4b26      	ldr	r3, [pc, #152]	@ (8003cd8 <bekle+0x128>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d0ef      	beq.n	8003c24 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003c44:	e002      	b.n	8003c4c <bekle+0x9c>
    	butonKontrol = 1;
 8003c46:	4b25      	ldr	r3, [pc, #148]	@ (8003cdc <bekle+0x12c>)
 8003c48:	2201      	movs	r2, #1
 8003c4a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003c4c:	2108      	movs	r1, #8
 8003c4e:	4824      	ldr	r0, [pc, #144]	@ (8003ce0 <bekle+0x130>)
 8003c50:	f006 f906 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d109      	bne.n	8003c6e <bekle+0xbe>
 8003c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003cd4 <bekle+0x124>)
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003cd8 <bekle+0x128>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d0ef      	beq.n	8003c46 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003c66:	e002      	b.n	8003c6e <bekle+0xbe>
    	butonKontrol = 1;
 8003c68:	4b1c      	ldr	r3, [pc, #112]	@ (8003cdc <bekle+0x12c>)
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003c6e:	2180      	movs	r1, #128	@ 0x80
 8003c70:	481c      	ldr	r0, [pc, #112]	@ (8003ce4 <bekle+0x134>)
 8003c72:	f006 f8f5 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d109      	bne.n	8003c90 <bekle+0xe0>
 8003c7c:	4b15      	ldr	r3, [pc, #84]	@ (8003cd4 <bekle+0x124>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	4b15      	ldr	r3, [pc, #84]	@ (8003cd8 <bekle+0x128>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d0ef      	beq.n	8003c68 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003c88:	e002      	b.n	8003c90 <bekle+0xe0>
    	butonKontrol = 1;
 8003c8a:	4b14      	ldr	r3, [pc, #80]	@ (8003cdc <bekle+0x12c>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003c90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003c94:	4813      	ldr	r0, [pc, #76]	@ (8003ce4 <bekle+0x134>)
 8003c96:	f006 f8e3 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d109      	bne.n	8003cb4 <bekle+0x104>
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd4 <bekle+0x124>)
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd8 <bekle+0x128>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d0ee      	beq.n	8003c8a <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003cac:	e002      	b.n	8003cb4 <bekle+0x104>
    	butonKontrol = 1;
 8003cae:	4b0b      	ldr	r3, [pc, #44]	@ (8003cdc <bekle+0x12c>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003cb4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003cb8:	480a      	ldr	r0, [pc, #40]	@ (8003ce4 <bekle+0x134>)
 8003cba:	f006 f8d1 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d105      	bne.n	8003cd0 <bekle+0x120>
 8003cc4:	4b03      	ldr	r3, [pc, #12]	@ (8003cd4 <bekle+0x124>)
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	4b03      	ldr	r3, [pc, #12]	@ (8003cd8 <bekle+0x128>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d0ee      	beq.n	8003cae <bekle+0xfe>
    }

}
 8003cd0:	bf00      	nop
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20001044 	.word	0x20001044
 8003cd8:	2000104c 	.word	0x2000104c
 8003cdc:	2000109c 	.word	0x2000109c
 8003ce0:	40010800 	.word	0x40010800
 8003ce4:	40011000 	.word	0x40011000

08003ce8 <buttonCheck>:

uint8_t buttonCheck(void) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8003cec:	2101      	movs	r1, #1
 8003cee:	4815      	ldr	r0, [pc, #84]	@ (8003d44 <buttonCheck+0x5c>)
 8003cf0:	f006 f8b6 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d01b      	beq.n	8003d32 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8003cfa:	2108      	movs	r1, #8
 8003cfc:	4812      	ldr	r0, [pc, #72]	@ (8003d48 <buttonCheck+0x60>)
 8003cfe:	f006 f8af 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d014      	beq.n	8003d32 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8003d08:	2102      	movs	r1, #2
 8003d0a:	480e      	ldr	r0, [pc, #56]	@ (8003d44 <buttonCheck+0x5c>)
 8003d0c:	f006 f8a8 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d00d      	beq.n	8003d32 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8003d16:	2104      	movs	r1, #4
 8003d18:	480a      	ldr	r0, [pc, #40]	@ (8003d44 <buttonCheck+0x5c>)
 8003d1a:	f006 f8a1 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d006      	beq.n	8003d32 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8003d24:	2108      	movs	r1, #8
 8003d26:	4807      	ldr	r0, [pc, #28]	@ (8003d44 <buttonCheck+0x5c>)
 8003d28:	f006 f89a 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d104      	bne.n	8003d3c <buttonCheck+0x54>
		backLightTimer = 0;
 8003d32:	4b06      	ldr	r3, [pc, #24]	@ (8003d4c <buttonCheck+0x64>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
		return 1;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <buttonCheck+0x56>
	}
	return 0;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	40010800 	.word	0x40010800
 8003d48:	40011000 	.word	0x40011000
 8003d4c:	20001060 	.word	0x20001060

08003d50 <checkBasincSalteri>:

void checkBasincSalteri() {
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8003d54:	4b13      	ldr	r3, [pc, #76]	@ (8003da4 <checkBasincSalteri+0x54>)
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d102      	bne.n	8003d62 <checkBasincSalteri+0x12>
		basincVar=1;
 8003d5c:	4b12      	ldr	r3, [pc, #72]	@ (8003da8 <checkBasincSalteri+0x58>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8003d62:	4b10      	ldr	r3, [pc, #64]	@ (8003da4 <checkBasincSalteri+0x54>)
 8003d64:	781b      	ldrb	r3, [r3, #0]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d119      	bne.n	8003d9e <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8003d6a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003d6e:	480f      	ldr	r0, [pc, #60]	@ (8003dac <checkBasincSalteri+0x5c>)
 8003d70:	f006 f876 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10a      	bne.n	8003d90 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8003d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8003db0 <checkBasincSalteri+0x60>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003db4 <checkBasincSalteri+0x64>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d90a      	bls.n	8003d9e <checkBasincSalteri+0x4e>
				basincVar=1;
 8003d88:	4b07      	ldr	r3, [pc, #28]	@ (8003da8 <checkBasincSalteri+0x58>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8003d8e:	e006      	b.n	8003d9e <checkBasincSalteri+0x4e>
			timer5=millis;
 8003d90:	4b07      	ldr	r3, [pc, #28]	@ (8003db0 <checkBasincSalteri+0x60>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a07      	ldr	r2, [pc, #28]	@ (8003db4 <checkBasincSalteri+0x64>)
 8003d96:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8003d98:	4b03      	ldr	r3, [pc, #12]	@ (8003da8 <checkBasincSalteri+0x58>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	701a      	strb	r2, [r3, #0]
}
 8003d9e:	bf00      	nop
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20001073 	.word	0x20001073
 8003da8:	2000106f 	.word	0x2000106f
 8003dac:	40011000 	.word	0x40011000
 8003db0:	20001044 	.word	0x20001044
 8003db4:	2000105c 	.word	0x2000105c

08003db8 <checkBasGonder>:

void checkBasGonder() {
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8003e2c <checkBasGonder+0x74>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d10b      	bne.n	8003ddc <checkBasGonder+0x24>
 8003dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e30 <checkBasGonder+0x78>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d007      	beq.n	8003ddc <checkBasGonder+0x24>
 8003dcc:	4b19      	ldr	r3, [pc, #100]	@ (8003e34 <checkBasGonder+0x7c>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d103      	bne.n	8003ddc <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8003dd4:	4b18      	ldr	r3, [pc, #96]	@ (8003e38 <checkBasGonder+0x80>)
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	e009      	b.n	8003df0 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8003ddc:	4b14      	ldr	r3, [pc, #80]	@ (8003e30 <checkBasGonder+0x78>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	f083 0301 	eor.w	r3, r3, #1
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8003dea:	4b13      	ldr	r3, [pc, #76]	@ (8003e38 <checkBasGonder+0x80>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003df0:	4b0e      	ldr	r3, [pc, #56]	@ (8003e2c <checkBasGonder+0x74>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d10b      	bne.n	8003e10 <checkBasGonder+0x58>
 8003df8:	4b10      	ldr	r3, [pc, #64]	@ (8003e3c <checkBasGonder+0x84>)
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d007      	beq.n	8003e10 <checkBasGonder+0x58>
 8003e00:	4b0c      	ldr	r3, [pc, #48]	@ (8003e34 <checkBasGonder+0x7c>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d103      	bne.n	8003e10 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8003e08:	4b0d      	ldr	r3, [pc, #52]	@ (8003e40 <checkBasGonder+0x88>)
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8003e0e:	e009      	b.n	8003e24 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8003e10:	4b0a      	ldr	r3, [pc, #40]	@ (8003e3c <checkBasGonder+0x84>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	f083 0301 	eor.w	r3, r3, #1
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8003e1e:	4b08      	ldr	r3, [pc, #32]	@ (8003e40 <checkBasGonder+0x88>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	701a      	strb	r2, [r3, #0]
}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr
 8003e2c:	2000106d 	.word	0x2000106d
 8003e30:	200010a2 	.word	0x200010a2
 8003e34:	2000107b 	.word	0x2000107b
 8003e38:	200010a9 	.word	0x200010a9
 8003e3c:	200010a5 	.word	0x200010a5
 8003e40:	200010aa 	.word	0x200010aa

08003e44 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8003e48:	4b24      	ldr	r3, [pc, #144]	@ (8003edc <checkKapiSecimleri+0x98>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d102      	bne.n	8003e56 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8003e50:	4b23      	ldr	r3, [pc, #140]	@ (8003ee0 <checkKapiSecimleri+0x9c>)
 8003e52:	2201      	movs	r2, #1
 8003e54:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8003e56:	4b21      	ldr	r3, [pc, #132]	@ (8003edc <checkKapiSecimleri+0x98>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d10e      	bne.n	8003e7c <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8003e5e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003e62:	4820      	ldr	r0, [pc, #128]	@ (8003ee4 <checkKapiSecimleri+0xa0>)
 8003e64:	f005 fffc 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d103      	bne.n	8003e76 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8003e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ee0 <checkKapiSecimleri+0x9c>)
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
 8003e74:	e002      	b.n	8003e7c <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8003e76:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee0 <checkKapiSecimleri+0x9c>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8003e7c:	4b17      	ldr	r3, [pc, #92]	@ (8003edc <checkKapiSecimleri+0x98>)
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d10e      	bne.n	8003ea2 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8003e84:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e88:	4816      	ldr	r0, [pc, #88]	@ (8003ee4 <checkKapiSecimleri+0xa0>)
 8003e8a:	f005 ffe9 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d103      	bne.n	8003e9c <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8003e94:	4b12      	ldr	r3, [pc, #72]	@ (8003ee0 <checkKapiSecimleri+0x9c>)
 8003e96:	2201      	movs	r2, #1
 8003e98:	701a      	strb	r2, [r3, #0]
 8003e9a:	e002      	b.n	8003ea2 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8003e9c:	4b10      	ldr	r3, [pc, #64]	@ (8003ee0 <checkKapiSecimleri+0x9c>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8003ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8003edc <checkKapiSecimleri+0x98>)
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b03      	cmp	r3, #3
 8003ea8:	d116      	bne.n	8003ed8 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8003eaa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003eae:	480d      	ldr	r0, [pc, #52]	@ (8003ee4 <checkKapiSecimleri+0xa0>)
 8003eb0:	f005 ffd6 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10b      	bne.n	8003ed2 <checkKapiSecimleri+0x8e>
 8003eba:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003ebe:	4809      	ldr	r0, [pc, #36]	@ (8003ee4 <checkKapiSecimleri+0xa0>)
 8003ec0:	f005 ffce 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d103      	bne.n	8003ed2 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8003eca:	4b05      	ldr	r3, [pc, #20]	@ (8003ee0 <checkKapiSecimleri+0x9c>)
 8003ecc:	2201      	movs	r2, #1
 8003ece:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8003ed0:	e002      	b.n	8003ed8 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8003ed2:	4b03      	ldr	r3, [pc, #12]	@ (8003ee0 <checkKapiSecimleri+0x9c>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	701a      	strb	r2, [r3, #0]
}
 8003ed8:	bf00      	nop
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20001074 	.word	0x20001074
 8003ee0:	200010bf 	.word	0x200010bf
 8003ee4:	40010800 	.word	0x40010800

08003ee8 <checkAktifCalisma>:

void checkAktifCalisma() {
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8003eec:	4b66      	ldr	r3, [pc, #408]	@ (8004088 <checkAktifCalisma+0x1a0>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f041 8343 	bne.w	800557c <checkAktifCalisma+0x1694>
 8003ef6:	4b65      	ldr	r3, [pc, #404]	@ (800408c <checkAktifCalisma+0x1a4>)
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	f041 833e 	bne.w	800557c <checkAktifCalisma+0x1694>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8003f00:	4b63      	ldr	r3, [pc, #396]	@ (8004090 <checkAktifCalisma+0x1a8>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d11a      	bne.n	8003f3e <checkAktifCalisma+0x56>
 8003f08:	4b62      	ldr	r3, [pc, #392]	@ (8004094 <checkAktifCalisma+0x1ac>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d116      	bne.n	8003f3e <checkAktifCalisma+0x56>
 8003f10:	4b61      	ldr	r3, [pc, #388]	@ (8004098 <checkAktifCalisma+0x1b0>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00a      	beq.n	8003f2e <checkAktifCalisma+0x46>
 8003f18:	4b60      	ldr	r3, [pc, #384]	@ (800409c <checkAktifCalisma+0x1b4>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	f083 0301 	eor.w	r3, r3, #1
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <checkAktifCalisma+0x46>
 8003f26:	4b5e      	ldr	r3, [pc, #376]	@ (80040a0 <checkAktifCalisma+0x1b8>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d007      	beq.n	8003f3e <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 8003f2e:	4b5d      	ldr	r3, [pc, #372]	@ (80040a4 <checkAktifCalisma+0x1bc>)
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d01c      	beq.n	8003f70 <checkAktifCalisma+0x88>
 8003f36:	4b5c      	ldr	r3, [pc, #368]	@ (80040a8 <checkAktifCalisma+0x1c0>)
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d118      	bne.n	8003f70 <checkAktifCalisma+0x88>
 8003f3e:	4b5b      	ldr	r3, [pc, #364]	@ (80040ac <checkAktifCalisma+0x1c4>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d103      	bne.n	8003f4e <checkAktifCalisma+0x66>
 8003f46:	4b5a      	ldr	r3, [pc, #360]	@ (80040b0 <checkAktifCalisma+0x1c8>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d010      	beq.n	8003f70 <checkAktifCalisma+0x88>
 8003f4e:	4b59      	ldr	r3, [pc, #356]	@ (80040b4 <checkAktifCalisma+0x1cc>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00c      	beq.n	8003f70 <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8003f56:	2201      	movs	r2, #1
 8003f58:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003f5c:	4856      	ldr	r0, [pc, #344]	@ (80040b8 <checkAktifCalisma+0x1d0>)
 8003f5e:	f005 ff96 	bl	8009e8e <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 8003f62:	4b56      	ldr	r3, [pc, #344]	@ (80040bc <checkAktifCalisma+0x1d4>)
 8003f64:	2201      	movs	r2, #1
 8003f66:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8003f68:	4b55      	ldr	r3, [pc, #340]	@ (80040c0 <checkAktifCalisma+0x1d8>)
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	701a      	strb	r2, [r3, #0]
 8003f6e:	e008      	b.n	8003f82 <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8003f70:	2200      	movs	r2, #0
 8003f72:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8003f76:	4850      	ldr	r0, [pc, #320]	@ (80040b8 <checkAktifCalisma+0x1d0>)
 8003f78:	f005 ff89 	bl	8009e8e <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8003f7c:	4b4f      	ldr	r3, [pc, #316]	@ (80040bc <checkAktifCalisma+0x1d4>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 8003f82:	4b42      	ldr	r3, [pc, #264]	@ (800408c <checkAktifCalisma+0x1a4>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d164      	bne.n	8004054 <checkAktifCalisma+0x16c>
 8003f8a:	4b49      	ldr	r3, [pc, #292]	@ (80040b0 <checkAktifCalisma+0x1c8>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d103      	bne.n	8003f9a <checkAktifCalisma+0xb2>
 8003f92:	4b46      	ldr	r3, [pc, #280]	@ (80040ac <checkAktifCalisma+0x1c4>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d05c      	beq.n	8004054 <checkAktifCalisma+0x16c>
 8003f9a:	4b46      	ldr	r3, [pc, #280]	@ (80040b4 <checkAktifCalisma+0x1cc>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d058      	beq.n	8004054 <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8003fa2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003fa6:	4844      	ldr	r0, [pc, #272]	@ (80040b8 <checkAktifCalisma+0x1d0>)
 8003fa8:	f005 ff5a 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <checkAktifCalisma+0xd2>
 8003fb2:	4b44      	ldr	r3, [pc, #272]	@ (80040c4 <checkAktifCalisma+0x1dc>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d04c      	beq.n	8004054 <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8003fba:	2102      	movs	r1, #2
 8003fbc:	4842      	ldr	r0, [pc, #264]	@ (80040c8 <checkAktifCalisma+0x1e0>)
 8003fbe:	f005 ff4f 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d145      	bne.n	8004054 <checkAktifCalisma+0x16c>
							&& (basincVar)
 8003fc8:	4b40      	ldr	r3, [pc, #256]	@ (80040cc <checkAktifCalisma+0x1e4>)
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d041      	beq.n	8004054 <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8003fd0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003fd4:	4838      	ldr	r0, [pc, #224]	@ (80040b8 <checkAktifCalisma+0x1d0>)
 8003fd6:	f005 ff43 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d10e      	bne.n	8003ffe <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8003fe0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fe4:	4834      	ldr	r0, [pc, #208]	@ (80040b8 <checkAktifCalisma+0x1d0>)
 8003fe6:	f005 ff3b 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d106      	bne.n	8003ffe <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8003ff0:	2140      	movs	r1, #64	@ 0x40
 8003ff2:	4835      	ldr	r0, [pc, #212]	@ (80040c8 <checkAktifCalisma+0x1e0>)
 8003ff4:	f005 ff34 	bl	8009e60 <HAL_GPIO_ReadPin>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d003      	beq.n	8004006 <checkAktifCalisma+0x11e>
 8003ffe:	4b24      	ldr	r3, [pc, #144]	@ (8004090 <checkAktifCalisma+0x1a8>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d026      	beq.n	8004054 <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 8004006:	4b24      	ldr	r3, [pc, #144]	@ (8004098 <checkAktifCalisma+0x1b0>)
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	f083 0301 	eor.w	r3, r3, #1
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01f      	beq.n	8004054 <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 8004014:	4b1f      	ldr	r3, [pc, #124]	@ (8004094 <checkAktifCalisma+0x1ac>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	f083 0301 	eor.w	r3, r3, #1
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d018      	beq.n	8004054 <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 8004022:	4b20      	ldr	r3, [pc, #128]	@ (80040a4 <checkAktifCalisma+0x1bc>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	f083 0301 	eor.w	r3, r3, #1
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d011      	beq.n	8004054 <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 8004030:	4b27      	ldr	r3, [pc, #156]	@ (80040d0 <checkAktifCalisma+0x1e8>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	f083 0301 	eor.w	r3, r3, #1
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 800403e:	4b25      	ldr	r3, [pc, #148]	@ (80040d4 <checkAktifCalisma+0x1ec>)
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	f083 0301 	eor.w	r3, r3, #1
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d003      	beq.n	8004054 <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 800404c:	4b10      	ldr	r3, [pc, #64]	@ (8004090 <checkAktifCalisma+0x1a8>)
 800404e:	2201      	movs	r2, #1
 8004050:	701a      	strb	r2, [r3, #0]
 8004052:	e002      	b.n	800405a <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 8004054:	4b0e      	ldr	r3, [pc, #56]	@ (8004090 <checkAktifCalisma+0x1a8>)
 8004056:	2200      	movs	r2, #0
 8004058:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800405a:	4b0d      	ldr	r3, [pc, #52]	@ (8004090 <checkAktifCalisma+0x1a8>)
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d03c      	beq.n	80040dc <checkAktifCalisma+0x1f4>
 8004062:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004066:	4818      	ldr	r0, [pc, #96]	@ (80040c8 <checkAktifCalisma+0x1e0>)
 8004068:	f005 fefa 	bl	8009e60 <HAL_GPIO_ReadPin>
 800406c:	4603      	mov	r3, r0
 800406e:	2b01      	cmp	r3, #1
 8004070:	d134      	bne.n	80040dc <checkAktifCalisma+0x1f4>
 8004072:	4b19      	ldr	r3, [pc, #100]	@ (80040d8 <checkAktifCalisma+0x1f0>)
 8004074:	781b      	ldrb	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d030      	beq.n	80040dc <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800407a:	2201      	movs	r2, #1
 800407c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004080:	480d      	ldr	r0, [pc, #52]	@ (80040b8 <checkAktifCalisma+0x1d0>)
 8004082:	f005 ff04 	bl	8009e8e <HAL_GPIO_WritePin>
 8004086:	e02f      	b.n	80040e8 <checkAktifCalisma+0x200>
 8004088:	2000108a 	.word	0x2000108a
 800408c:	20001089 	.word	0x20001089
 8004090:	200010a2 	.word	0x200010a2
 8004094:	200010a3 	.word	0x200010a3
 8004098:	200010a5 	.word	0x200010a5
 800409c:	2000109d 	.word	0x2000109d
 80040a0:	2000107f 	.word	0x2000107f
 80040a4:	200010a4 	.word	0x200010a4
 80040a8:	2000107e 	.word	0x2000107e
 80040ac:	200010be 	.word	0x200010be
 80040b0:	200010d1 	.word	0x200010d1
 80040b4:	200010bf 	.word	0x200010bf
 80040b8:	40010c00 	.word	0x40010c00
 80040bc:	200010c0 	.word	0x200010c0
 80040c0:	200010ac 	.word	0x200010ac
 80040c4:	200010a9 	.word	0x200010a9
 80040c8:	40011000 	.word	0x40011000
 80040cc:	2000106f 	.word	0x2000106f
 80040d0:	200010a7 	.word	0x200010a7
 80040d4:	200010a8 	.word	0x200010a8
 80040d8:	2000107a 	.word	0x2000107a
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80040dc:	2200      	movs	r2, #0
 80040de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80040e2:	4865      	ldr	r0, [pc, #404]	@ (8004278 <checkAktifCalisma+0x390>)
 80040e4:	f005 fed3 	bl	8009e8e <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80040e8:	4b64      	ldr	r3, [pc, #400]	@ (800427c <checkAktifCalisma+0x394>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d013      	beq.n	8004118 <checkAktifCalisma+0x230>
 80040f0:	4b63      	ldr	r3, [pc, #396]	@ (8004280 <checkAktifCalisma+0x398>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d007      	beq.n	8004108 <checkAktifCalisma+0x220>
 80040f8:	4b61      	ldr	r3, [pc, #388]	@ (8004280 <checkAktifCalisma+0x398>)
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d003      	beq.n	8004108 <checkAktifCalisma+0x220>
 8004100:	4b60      	ldr	r3, [pc, #384]	@ (8004284 <checkAktifCalisma+0x39c>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d107      	bne.n	8004118 <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004108:	2201      	movs	r2, #1
 800410a:	2104      	movs	r1, #4
 800410c:	485a      	ldr	r0, [pc, #360]	@ (8004278 <checkAktifCalisma+0x390>)
 800410e:	f005 febe 	bl	8009e8e <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 8004112:	4b5d      	ldr	r3, [pc, #372]	@ (8004288 <checkAktifCalisma+0x3a0>)
 8004114:	2201      	movs	r2, #1
 8004116:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8004118:	4b5b      	ldr	r3, [pc, #364]	@ (8004288 <checkAktifCalisma+0x3a0>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d033      	beq.n	8004188 <checkAktifCalisma+0x2a0>
 8004120:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004124:	4854      	ldr	r0, [pc, #336]	@ (8004278 <checkAktifCalisma+0x390>)
 8004126:	f005 fe9b 	bl	8009e60 <HAL_GPIO_ReadPin>
 800412a:	4603      	mov	r3, r0
 800412c:	2b01      	cmp	r3, #1
 800412e:	d106      	bne.n	800413e <checkAktifCalisma+0x256>
 8004130:	4b56      	ldr	r3, [pc, #344]	@ (800428c <checkAktifCalisma+0x3a4>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	f083 0301 	eor.w	r3, r3, #1
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <checkAktifCalisma+0x264>
 800413e:	2102      	movs	r1, #2
 8004140:	4853      	ldr	r0, [pc, #332]	@ (8004290 <checkAktifCalisma+0x3a8>)
 8004142:	f005 fe8d 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004146:	4603      	mov	r3, r0
 8004148:	2b01      	cmp	r3, #1
 800414a:	d11d      	bne.n	8004188 <checkAktifCalisma+0x2a0>
 800414c:	4b51      	ldr	r3, [pc, #324]	@ (8004294 <checkAktifCalisma+0x3ac>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d103      	bne.n	800415c <checkAktifCalisma+0x274>
 8004154:	4b50      	ldr	r3, [pc, #320]	@ (8004298 <checkAktifCalisma+0x3b0>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d015      	beq.n	8004188 <checkAktifCalisma+0x2a0>
 800415c:	4b4f      	ldr	r3, [pc, #316]	@ (800429c <checkAktifCalisma+0x3b4>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d011      	beq.n	8004188 <checkAktifCalisma+0x2a0>
 8004164:	4b4e      	ldr	r3, [pc, #312]	@ (80042a0 <checkAktifCalisma+0x3b8>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d00d      	beq.n	8004188 <checkAktifCalisma+0x2a0>
 800416c:	4b4d      	ldr	r3, [pc, #308]	@ (80042a4 <checkAktifCalisma+0x3bc>)
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	f083 0301 	eor.w	r3, r3, #1
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d006      	beq.n	8004188 <checkAktifCalisma+0x2a0>
					timer2=millis;
 800417a:	4b4b      	ldr	r3, [pc, #300]	@ (80042a8 <checkAktifCalisma+0x3c0>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a4b      	ldr	r2, [pc, #300]	@ (80042ac <checkAktifCalisma+0x3c4>)
 8004180:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 8004182:	4b48      	ldr	r3, [pc, #288]	@ (80042a4 <checkAktifCalisma+0x3bc>)
 8004184:	2201      	movs	r2, #1
 8004186:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 8004188:	4b47      	ldr	r3, [pc, #284]	@ (80042a8 <checkAktifCalisma+0x3c0>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	4b47      	ldr	r3, [pc, #284]	@ (80042ac <checkAktifCalisma+0x3c4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	1ad3      	subs	r3, r2, r3
 8004192:	4a47      	ldr	r2, [pc, #284]	@ (80042b0 <checkAktifCalisma+0x3c8>)
 8004194:	7812      	ldrb	r2, [r2, #0]
 8004196:	4293      	cmp	r3, r2
 8004198:	d303      	bcc.n	80041a2 <checkAktifCalisma+0x2ba>
 800419a:	4b42      	ldr	r3, [pc, #264]	@ (80042a4 <checkAktifCalisma+0x3bc>)
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d118      	bne.n	80041d4 <checkAktifCalisma+0x2ec>
 80041a2:	4b3c      	ldr	r3, [pc, #240]	@ (8004294 <checkAktifCalisma+0x3ac>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	f083 0301 	eor.w	r3, r3, #1
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d006      	beq.n	80041be <checkAktifCalisma+0x2d6>
 80041b0:	4b39      	ldr	r3, [pc, #228]	@ (8004298 <checkAktifCalisma+0x3b0>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	f083 0301 	eor.w	r3, r3, #1
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10a      	bne.n	80041d4 <checkAktifCalisma+0x2ec>
 80041be:	4b37      	ldr	r3, [pc, #220]	@ (800429c <checkAktifCalisma+0x3b4>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	f083 0301 	eor.w	r3, r3, #1
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d103      	bne.n	80041d4 <checkAktifCalisma+0x2ec>
 80041cc:	4b34      	ldr	r3, [pc, #208]	@ (80042a0 <checkAktifCalisma+0x3b8>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d10a      	bne.n	80041ea <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80041d4:	2200      	movs	r2, #0
 80041d6:	2104      	movs	r1, #4
 80041d8:	4827      	ldr	r0, [pc, #156]	@ (8004278 <checkAktifCalisma+0x390>)
 80041da:	f005 fe58 	bl	8009e8e <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 80041de:	4b2a      	ldr	r3, [pc, #168]	@ (8004288 <checkAktifCalisma+0x3a0>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 80041e4:	4b2f      	ldr	r3, [pc, #188]	@ (80042a4 <checkAktifCalisma+0x3bc>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 80041ea:	4b32      	ldr	r3, [pc, #200]	@ (80042b4 <checkAktifCalisma+0x3cc>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d102      	bne.n	80041f8 <checkAktifCalisma+0x310>
					cerceveVar=1;
 80041f2:	4b31      	ldr	r3, [pc, #196]	@ (80042b8 <checkAktifCalisma+0x3d0>)
 80041f4:	2201      	movs	r2, #1
 80041f6:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80041f8:	4b2e      	ldr	r3, [pc, #184]	@ (80042b4 <checkAktifCalisma+0x3cc>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d116      	bne.n	800422e <checkAktifCalisma+0x346>
 8004200:	4b2e      	ldr	r3, [pc, #184]	@ (80042bc <checkAktifCalisma+0x3d4>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d112      	bne.n	800422e <checkAktifCalisma+0x346>
 8004208:	2101      	movs	r1, #1
 800420a:	4821      	ldr	r0, [pc, #132]	@ (8004290 <checkAktifCalisma+0x3a8>)
 800420c:	f005 fe28 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10b      	bne.n	800422e <checkAktifCalisma+0x346>
 8004216:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800421a:	4817      	ldr	r0, [pc, #92]	@ (8004278 <checkAktifCalisma+0x390>)
 800421c:	f005 fe20 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d103      	bne.n	800422e <checkAktifCalisma+0x346>
					cerceveVar=1;
 8004226:	4b24      	ldr	r3, [pc, #144]	@ (80042b8 <checkAktifCalisma+0x3d0>)
 8004228:	2201      	movs	r2, #1
 800422a:	701a      	strb	r2, [r3, #0]
 800422c:	e011      	b.n	8004252 <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 800422e:	4b21      	ldr	r3, [pc, #132]	@ (80042b4 <checkAktifCalisma+0x3cc>)
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d10d      	bne.n	8004252 <checkAktifCalisma+0x36a>
 8004236:	2101      	movs	r1, #1
 8004238:	4815      	ldr	r0, [pc, #84]	@ (8004290 <checkAktifCalisma+0x3a8>)
 800423a:	f005 fe11 	bl	8009e60 <HAL_GPIO_ReadPin>
 800423e:	4603      	mov	r3, r0
 8004240:	2b01      	cmp	r3, #1
 8004242:	d106      	bne.n	8004252 <checkAktifCalisma+0x36a>
 8004244:	4b1d      	ldr	r3, [pc, #116]	@ (80042bc <checkAktifCalisma+0x3d4>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d102      	bne.n	8004252 <checkAktifCalisma+0x36a>
					cerceveVar=0;
 800424c:	4b1a      	ldr	r3, [pc, #104]	@ (80042b8 <checkAktifCalisma+0x3d0>)
 800424e:	2200      	movs	r2, #0
 8004250:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 8004252:	4b18      	ldr	r3, [pc, #96]	@ (80042b4 <checkAktifCalisma+0x3cc>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d135      	bne.n	80042c6 <checkAktifCalisma+0x3de>
 800425a:	4b18      	ldr	r3, [pc, #96]	@ (80042bc <checkAktifCalisma+0x3d4>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d131      	bne.n	80042c6 <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8004262:	2101      	movs	r1, #1
 8004264:	480a      	ldr	r0, [pc, #40]	@ (8004290 <checkAktifCalisma+0x3a8>)
 8004266:	f005 fdfb 	bl	8009e60 <HAL_GPIO_ReadPin>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d127      	bne.n	80042c0 <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 8004270:	4b11      	ldr	r3, [pc, #68]	@ (80042b8 <checkAktifCalisma+0x3d0>)
 8004272:	2201      	movs	r2, #1
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	e026      	b.n	80042c6 <checkAktifCalisma+0x3de>
 8004278:	40010c00 	.word	0x40010c00
 800427c:	200010a2 	.word	0x200010a2
 8004280:	2000107b 	.word	0x2000107b
 8004284:	2000107f 	.word	0x2000107f
 8004288:	200010a6 	.word	0x200010a6
 800428c:	200010a9 	.word	0x200010a9
 8004290:	40011000 	.word	0x40011000
 8004294:	200010be 	.word	0x200010be
 8004298:	200010d1 	.word	0x200010d1
 800429c:	200010bf 	.word	0x200010bf
 80042a0:	2000106f 	.word	0x2000106f
 80042a4:	2000109e 	.word	0x2000109e
 80042a8:	20001044 	.word	0x20001044
 80042ac:	20001050 	.word	0x20001050
 80042b0:	20001080 	.word	0x20001080
 80042b4:	20001070 	.word	0x20001070
 80042b8:	200010c3 	.word	0x200010c3
 80042bc:	2000106d 	.word	0x2000106d
					} else {
						cerceveVar=0;
 80042c0:	4b7f      	ldr	r3, [pc, #508]	@ (80044c0 <checkAktifCalisma+0x5d8>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80042c6:	4b7f      	ldr	r3, [pc, #508]	@ (80044c4 <checkAktifCalisma+0x5dc>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d17c      	bne.n	80043c8 <checkAktifCalisma+0x4e0>
 80042ce:	4b7e      	ldr	r3, [pc, #504]	@ (80044c8 <checkAktifCalisma+0x5e0>)
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d078      	beq.n	80043c8 <checkAktifCalisma+0x4e0>
 80042d6:	4b7d      	ldr	r3, [pc, #500]	@ (80044cc <checkAktifCalisma+0x5e4>)
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d074      	beq.n	80043c8 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80042de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80042e2:	487b      	ldr	r0, [pc, #492]	@ (80044d0 <checkAktifCalisma+0x5e8>)
 80042e4:	f005 fdbc 	bl	8009e60 <HAL_GPIO_ReadPin>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d003      	beq.n	80042f6 <checkAktifCalisma+0x40e>
 80042ee:	4b79      	ldr	r3, [pc, #484]	@ (80044d4 <checkAktifCalisma+0x5ec>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d068      	beq.n	80043c8 <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80042f6:	4b72      	ldr	r3, [pc, #456]	@ (80044c0 <checkAktifCalisma+0x5d8>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d064      	beq.n	80043c8 <checkAktifCalisma+0x4e0>
 80042fe:	4b76      	ldr	r3, [pc, #472]	@ (80044d8 <checkAktifCalisma+0x5f0>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	f083 0301 	eor.w	r3, r3, #1
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d05d      	beq.n	80043c8 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 800430c:	2104      	movs	r1, #4
 800430e:	4873      	ldr	r0, [pc, #460]	@ (80044dc <checkAktifCalisma+0x5f4>)
 8004310:	f005 fda6 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d003      	beq.n	8004322 <checkAktifCalisma+0x43a>
 800431a:	4b71      	ldr	r3, [pc, #452]	@ (80044e0 <checkAktifCalisma+0x5f8>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d152      	bne.n	80043c8 <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004322:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004326:	486a      	ldr	r0, [pc, #424]	@ (80044d0 <checkAktifCalisma+0x5e8>)
 8004328:	f005 fd9a 	bl	8009e60 <HAL_GPIO_ReadPin>
 800432c:	4603      	mov	r3, r0
 800432e:	2b01      	cmp	r3, #1
 8004330:	d10e      	bne.n	8004350 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004332:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004336:	4866      	ldr	r0, [pc, #408]	@ (80044d0 <checkAktifCalisma+0x5e8>)
 8004338:	f005 fd92 	bl	8009e60 <HAL_GPIO_ReadPin>
 800433c:	4603      	mov	r3, r0
 800433e:	2b01      	cmp	r3, #1
 8004340:	d106      	bne.n	8004350 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8004342:	2140      	movs	r1, #64	@ 0x40
 8004344:	4865      	ldr	r0, [pc, #404]	@ (80044dc <checkAktifCalisma+0x5f4>)
 8004346:	f005 fd8b 	bl	8009e60 <HAL_GPIO_ReadPin>
 800434a:	4603      	mov	r3, r0
 800434c:	2b01      	cmp	r3, #1
 800434e:	d003      	beq.n	8004358 <checkAktifCalisma+0x470>
 8004350:	4b64      	ldr	r3, [pc, #400]	@ (80044e4 <checkAktifCalisma+0x5fc>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d037      	beq.n	80043c8 <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 8004358:	4b63      	ldr	r3, [pc, #396]	@ (80044e8 <checkAktifCalisma+0x600>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	f083 0301 	eor.w	r3, r3, #1
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d030      	beq.n	80043c8 <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 8004366:	4b61      	ldr	r3, [pc, #388]	@ (80044ec <checkAktifCalisma+0x604>)
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	f083 0301 	eor.w	r3, r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d029      	beq.n	80043c8 <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 8004374:	4b5e      	ldr	r3, [pc, #376]	@ (80044f0 <checkAktifCalisma+0x608>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	f083 0301 	eor.w	r3, r3, #1
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d022      	beq.n	80043c8 <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 8004382:	4b5c      	ldr	r3, [pc, #368]	@ (80044f4 <checkAktifCalisma+0x60c>)
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	f083 0301 	eor.w	r3, r3, #1
 800438a:	b2db      	uxtb	r3, r3
 800438c:	2b00      	cmp	r3, #0
 800438e:	d01b      	beq.n	80043c8 <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 8004390:	4b59      	ldr	r3, [pc, #356]	@ (80044f8 <checkAktifCalisma+0x610>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	f083 0301 	eor.w	r3, r3, #1
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d014      	beq.n	80043c8 <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 800439e:	4b57      	ldr	r3, [pc, #348]	@ (80044fc <checkAktifCalisma+0x614>)
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	f083 0301 	eor.w	r3, r3, #1
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00d      	beq.n	80043c8 <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80043ac:	2201      	movs	r2, #1
 80043ae:	2102      	movs	r1, #2
 80043b0:	4847      	ldr	r0, [pc, #284]	@ (80044d0 <checkAktifCalisma+0x5e8>)
 80043b2:	f005 fd6c 	bl	8009e8e <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 80043b6:	4b4b      	ldr	r3, [pc, #300]	@ (80044e4 <checkAktifCalisma+0x5fc>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 80043bc:	4b50      	ldr	r3, [pc, #320]	@ (8004500 <checkAktifCalisma+0x618>)
 80043be:	2201      	movs	r2, #1
 80043c0:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 80043c2:	4b50      	ldr	r3, [pc, #320]	@ (8004504 <checkAktifCalisma+0x61c>)
 80043c4:	2201      	movs	r2, #1
 80043c6:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80043c8:	4b46      	ldr	r3, [pc, #280]	@ (80044e4 <checkAktifCalisma+0x5fc>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d033      	beq.n	8004438 <checkAktifCalisma+0x550>
 80043d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80043d4:	483e      	ldr	r0, [pc, #248]	@ (80044d0 <checkAktifCalisma+0x5e8>)
 80043d6:	f005 fd43 	bl	8009e60 <HAL_GPIO_ReadPin>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d106      	bne.n	80043ee <checkAktifCalisma+0x506>
 80043e0:	4b3c      	ldr	r3, [pc, #240]	@ (80044d4 <checkAktifCalisma+0x5ec>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	f083 0301 	eor.w	r3, r3, #1
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10a      	bne.n	8004404 <checkAktifCalisma+0x51c>
 80043ee:	2104      	movs	r1, #4
 80043f0:	483a      	ldr	r0, [pc, #232]	@ (80044dc <checkAktifCalisma+0x5f4>)
 80043f2:	f005 fd35 	bl	8009e60 <HAL_GPIO_ReadPin>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d11d      	bne.n	8004438 <checkAktifCalisma+0x550>
 80043fc:	4b38      	ldr	r3, [pc, #224]	@ (80044e0 <checkAktifCalisma+0x5f8>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d019      	beq.n	8004438 <checkAktifCalisma+0x550>
 8004404:	4b30      	ldr	r3, [pc, #192]	@ (80044c8 <checkAktifCalisma+0x5e0>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d015      	beq.n	8004438 <checkAktifCalisma+0x550>
 800440c:	4b2f      	ldr	r3, [pc, #188]	@ (80044cc <checkAktifCalisma+0x5e4>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d011      	beq.n	8004438 <checkAktifCalisma+0x550>
 8004414:	4b2a      	ldr	r3, [pc, #168]	@ (80044c0 <checkAktifCalisma+0x5d8>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00d      	beq.n	8004438 <checkAktifCalisma+0x550>
 800441c:	4b3a      	ldr	r3, [pc, #232]	@ (8004508 <checkAktifCalisma+0x620>)
 800441e:	781b      	ldrb	r3, [r3, #0]
 8004420:	f083 0301 	eor.w	r3, r3, #1
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d006      	beq.n	8004438 <checkAktifCalisma+0x550>
					timer2=millis;
 800442a:	4b38      	ldr	r3, [pc, #224]	@ (800450c <checkAktifCalisma+0x624>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a38      	ldr	r2, [pc, #224]	@ (8004510 <checkAktifCalisma+0x628>)
 8004430:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 8004432:	4b35      	ldr	r3, [pc, #212]	@ (8004508 <checkAktifCalisma+0x620>)
 8004434:	2201      	movs	r2, #1
 8004436:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8004438:	4b34      	ldr	r3, [pc, #208]	@ (800450c <checkAktifCalisma+0x624>)
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4b34      	ldr	r3, [pc, #208]	@ (8004510 <checkAktifCalisma+0x628>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	4a34      	ldr	r2, [pc, #208]	@ (8004514 <checkAktifCalisma+0x62c>)
 8004444:	7812      	ldrb	r2, [r2, #0]
 8004446:	4293      	cmp	r3, r2
 8004448:	d303      	bcc.n	8004452 <checkAktifCalisma+0x56a>
 800444a:	4b2f      	ldr	r3, [pc, #188]	@ (8004508 <checkAktifCalisma+0x620>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d114      	bne.n	800447c <checkAktifCalisma+0x594>
 8004452:	4b1d      	ldr	r3, [pc, #116]	@ (80044c8 <checkAktifCalisma+0x5e0>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	f083 0301 	eor.w	r3, r3, #1
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10d      	bne.n	800447c <checkAktifCalisma+0x594>
 8004460:	4b1a      	ldr	r3, [pc, #104]	@ (80044cc <checkAktifCalisma+0x5e4>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	f083 0301 	eor.w	r3, r3, #1
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <checkAktifCalisma+0x594>
 800446e:	4b14      	ldr	r3, [pc, #80]	@ (80044c0 <checkAktifCalisma+0x5d8>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	f083 0301 	eor.w	r3, r3, #1
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 800447c:	2200      	movs	r2, #0
 800447e:	2102      	movs	r1, #2
 8004480:	4813      	ldr	r0, [pc, #76]	@ (80044d0 <checkAktifCalisma+0x5e8>)
 8004482:	f005 fd04 	bl	8009e8e <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 8004486:	4b17      	ldr	r3, [pc, #92]	@ (80044e4 <checkAktifCalisma+0x5fc>)
 8004488:	2200      	movs	r2, #0
 800448a:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 800448c:	4b1e      	ldr	r3, [pc, #120]	@ (8004508 <checkAktifCalisma+0x620>)
 800448e:	2200      	movs	r2, #0
 8004490:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8004492:	4b14      	ldr	r3, [pc, #80]	@ (80044e4 <checkAktifCalisma+0x5fc>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d040      	beq.n	800451c <checkAktifCalisma+0x634>
 800449a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800449e:	480f      	ldr	r0, [pc, #60]	@ (80044dc <checkAktifCalisma+0x5f4>)
 80044a0:	f005 fcde 	bl	8009e60 <HAL_GPIO_ReadPin>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d138      	bne.n	800451c <checkAktifCalisma+0x634>
 80044aa:	4b1b      	ldr	r3, [pc, #108]	@ (8004518 <checkAktifCalisma+0x630>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d034      	beq.n	800451c <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80044b2:	2201      	movs	r2, #1
 80044b4:	2101      	movs	r1, #1
 80044b6:	4806      	ldr	r0, [pc, #24]	@ (80044d0 <checkAktifCalisma+0x5e8>)
 80044b8:	f005 fce9 	bl	8009e8e <HAL_GPIO_WritePin>
 80044bc:	e033      	b.n	8004526 <checkAktifCalisma+0x63e>
 80044be:	bf00      	nop
 80044c0:	200010c3 	.word	0x200010c3
 80044c4:	20001089 	.word	0x20001089
 80044c8:	200010be 	.word	0x200010be
 80044cc:	200010bf 	.word	0x200010bf
 80044d0:	40010c00 	.word	0x40010c00
 80044d4:	200010aa 	.word	0x200010aa
 80044d8:	200010bd 	.word	0x200010bd
 80044dc:	40011000 	.word	0x40011000
 80044e0:	20001072 	.word	0x20001072
 80044e4:	200010a5 	.word	0x200010a5
 80044e8:	200010a2 	.word	0x200010a2
 80044ec:	200010a6 	.word	0x200010a6
 80044f0:	200010a3 	.word	0x200010a3
 80044f4:	200010a4 	.word	0x200010a4
 80044f8:	200010a7 	.word	0x200010a7
 80044fc:	200010a8 	.word	0x200010a8
 8004500:	200010ad 	.word	0x200010ad
 8004504:	200010cd 	.word	0x200010cd
 8004508:	2000109d 	.word	0x2000109d
 800450c:	20001044 	.word	0x20001044
 8004510:	20001050 	.word	0x20001050
 8004514:	20001081 	.word	0x20001081
 8004518:	20001071 	.word	0x20001071
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800451c:	2200      	movs	r2, #0
 800451e:	2101      	movs	r1, #1
 8004520:	4836      	ldr	r0, [pc, #216]	@ (80045fc <checkAktifCalisma+0x714>)
 8004522:	f005 fcb4 	bl	8009e8e <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8004526:	4b36      	ldr	r3, [pc, #216]	@ (8004600 <checkAktifCalisma+0x718>)
 8004528:	781b      	ldrb	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	f040 8080 	bne.w	8004630 <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004530:	4b34      	ldr	r3, [pc, #208]	@ (8004604 <checkAktifCalisma+0x71c>)
 8004532:	781b      	ldrb	r3, [r3, #0]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d003      	beq.n	8004540 <checkAktifCalisma+0x658>
 8004538:	4b32      	ldr	r3, [pc, #200]	@ (8004604 <checkAktifCalisma+0x71c>)
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b02      	cmp	r3, #2
 800453e:	d177      	bne.n	8004630 <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8004540:	4b31      	ldr	r3, [pc, #196]	@ (8004608 <checkAktifCalisma+0x720>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d073      	beq.n	8004630 <checkAktifCalisma+0x748>
 8004548:	4b30      	ldr	r3, [pc, #192]	@ (800460c <checkAktifCalisma+0x724>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d06f      	beq.n	8004630 <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8004550:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004554:	4829      	ldr	r0, [pc, #164]	@ (80045fc <checkAktifCalisma+0x714>)
 8004556:	f005 fc83 	bl	8009e60 <HAL_GPIO_ReadPin>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d167      	bne.n	8004630 <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8004560:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004564:	482a      	ldr	r0, [pc, #168]	@ (8004610 <checkAktifCalisma+0x728>)
 8004566:	f005 fc7b 	bl	8009e60 <HAL_GPIO_ReadPin>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <checkAktifCalisma+0x690>
 8004570:	4b28      	ldr	r3, [pc, #160]	@ (8004614 <checkAktifCalisma+0x72c>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d15b      	bne.n	8004630 <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8004578:	2140      	movs	r1, #64	@ 0x40
 800457a:	4825      	ldr	r0, [pc, #148]	@ (8004610 <checkAktifCalisma+0x728>)
 800457c:	f005 fc70 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004580:	4603      	mov	r3, r0
 8004582:	2b01      	cmp	r3, #1
 8004584:	d10f      	bne.n	80045a6 <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004586:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800458a:	481c      	ldr	r0, [pc, #112]	@ (80045fc <checkAktifCalisma+0x714>)
 800458c:	f005 fc68 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004590:	4603      	mov	r3, r0
 8004592:	2b01      	cmp	r3, #1
 8004594:	d107      	bne.n	80045a6 <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8004596:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800459a:	4818      	ldr	r0, [pc, #96]	@ (80045fc <checkAktifCalisma+0x714>)
 800459c:	f005 fc60 	bl	8009e60 <HAL_GPIO_ReadPin>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d003      	beq.n	80045ae <checkAktifCalisma+0x6c6>
 80045a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004618 <checkAktifCalisma+0x730>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d040      	beq.n	8004630 <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 80045ae:	4b1b      	ldr	r3, [pc, #108]	@ (800461c <checkAktifCalisma+0x734>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	f083 0301 	eor.w	r3, r3, #1
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d039      	beq.n	8004630 <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 80045bc:	4b18      	ldr	r3, [pc, #96]	@ (8004620 <checkAktifCalisma+0x738>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	f083 0301 	eor.w	r3, r3, #1
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d032      	beq.n	8004630 <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 80045ca:	4b16      	ldr	r3, [pc, #88]	@ (8004624 <checkAktifCalisma+0x73c>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	f083 0301 	eor.w	r3, r3, #1
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d02b      	beq.n	8004630 <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 80045d8:	4b13      	ldr	r3, [pc, #76]	@ (8004628 <checkAktifCalisma+0x740>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	f083 0301 	eor.w	r3, r3, #1
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d024      	beq.n	8004630 <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 80045e6:	4b11      	ldr	r3, [pc, #68]	@ (800462c <checkAktifCalisma+0x744>)
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	f083 0301 	eor.w	r3, r3, #1
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d01d      	beq.n	8004630 <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 80045f4:	4b08      	ldr	r3, [pc, #32]	@ (8004618 <checkAktifCalisma+0x730>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	701a      	strb	r2, [r3, #0]
 80045fa:	e01c      	b.n	8004636 <checkAktifCalisma+0x74e>
 80045fc:	40010c00 	.word	0x40010c00
 8004600:	20001089 	.word	0x20001089
 8004604:	2000107b 	.word	0x2000107b
 8004608:	200010be 	.word	0x200010be
 800460c:	200010bf 	.word	0x200010bf
 8004610:	40011000 	.word	0x40011000
 8004614:	2000107c 	.word	0x2000107c
 8004618:	200010a3 	.word	0x200010a3
 800461c:	200010a2 	.word	0x200010a2
 8004620:	200010a6 	.word	0x200010a6
 8004624:	200010a5 	.word	0x200010a5
 8004628:	200010a4 	.word	0x200010a4
 800462c:	200010a8 	.word	0x200010a8
				} else {
					devmotoryukaricalisiyor=0;
 8004630:	4b64      	ldr	r3, [pc, #400]	@ (80047c4 <checkAktifCalisma+0x8dc>)
 8004632:	2200      	movs	r2, #0
 8004634:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8004636:	4b63      	ldr	r3, [pc, #396]	@ (80047c4 <checkAktifCalisma+0x8dc>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d007      	beq.n	800464e <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800463e:	2201      	movs	r2, #1
 8004640:	2120      	movs	r1, #32
 8004642:	4861      	ldr	r0, [pc, #388]	@ (80047c8 <checkAktifCalisma+0x8e0>)
 8004644:	f005 fc23 	bl	8009e8e <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8004648:	4b60      	ldr	r3, [pc, #384]	@ (80047cc <checkAktifCalisma+0x8e4>)
 800464a:	2201      	movs	r2, #1
 800464c:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800464e:	4b5f      	ldr	r3, [pc, #380]	@ (80047cc <checkAktifCalisma+0x8e4>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d025      	beq.n	80046a2 <checkAktifCalisma+0x7ba>
 8004656:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800465a:	485d      	ldr	r0, [pc, #372]	@ (80047d0 <checkAktifCalisma+0x8e8>)
 800465c:	f005 fc00 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004660:	4603      	mov	r3, r0
 8004662:	2b01      	cmp	r3, #1
 8004664:	d007      	beq.n	8004676 <checkAktifCalisma+0x78e>
 8004666:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800466a:	4857      	ldr	r0, [pc, #348]	@ (80047c8 <checkAktifCalisma+0x8e0>)
 800466c:	f005 fbf8 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004670:	4603      	mov	r3, r0
 8004672:	2b01      	cmp	r3, #1
 8004674:	d115      	bne.n	80046a2 <checkAktifCalisma+0x7ba>
 8004676:	4b57      	ldr	r3, [pc, #348]	@ (80047d4 <checkAktifCalisma+0x8ec>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d011      	beq.n	80046a2 <checkAktifCalisma+0x7ba>
 800467e:	4b56      	ldr	r3, [pc, #344]	@ (80047d8 <checkAktifCalisma+0x8f0>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00d      	beq.n	80046a2 <checkAktifCalisma+0x7ba>
 8004686:	4b55      	ldr	r3, [pc, #340]	@ (80047dc <checkAktifCalisma+0x8f4>)
 8004688:	781b      	ldrb	r3, [r3, #0]
 800468a:	f083 0301 	eor.w	r3, r3, #1
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d006      	beq.n	80046a2 <checkAktifCalisma+0x7ba>
					timer2=millis;
 8004694:	4b52      	ldr	r3, [pc, #328]	@ (80047e0 <checkAktifCalisma+0x8f8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a52      	ldr	r2, [pc, #328]	@ (80047e4 <checkAktifCalisma+0x8fc>)
 800469a:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 800469c:	4b4f      	ldr	r3, [pc, #316]	@ (80047dc <checkAktifCalisma+0x8f4>)
 800469e:	2201      	movs	r2, #1
 80046a0:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80046a2:	4b4f      	ldr	r3, [pc, #316]	@ (80047e0 <checkAktifCalisma+0x8f8>)
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	4b4f      	ldr	r3, [pc, #316]	@ (80047e4 <checkAktifCalisma+0x8fc>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	4a4e      	ldr	r2, [pc, #312]	@ (80047e8 <checkAktifCalisma+0x900>)
 80046ae:	7812      	ldrb	r2, [r2, #0]
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d303      	bcc.n	80046bc <checkAktifCalisma+0x7d4>
 80046b4:	4b49      	ldr	r3, [pc, #292]	@ (80047dc <checkAktifCalisma+0x8f4>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10d      	bne.n	80046d8 <checkAktifCalisma+0x7f0>
 80046bc:	4b45      	ldr	r3, [pc, #276]	@ (80047d4 <checkAktifCalisma+0x8ec>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	f083 0301 	eor.w	r3, r3, #1
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <checkAktifCalisma+0x7f0>
 80046ca:	4b43      	ldr	r3, [pc, #268]	@ (80047d8 <checkAktifCalisma+0x8f0>)
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	f083 0301 	eor.w	r3, r3, #1
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00a      	beq.n	80046ee <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80046d8:	2200      	movs	r2, #0
 80046da:	2120      	movs	r1, #32
 80046dc:	483a      	ldr	r0, [pc, #232]	@ (80047c8 <checkAktifCalisma+0x8e0>)
 80046de:	f005 fbd6 	bl	8009e8e <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 80046e2:	4b3a      	ldr	r3, [pc, #232]	@ (80047cc <checkAktifCalisma+0x8e4>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 80046e8:	4b3c      	ldr	r3, [pc, #240]	@ (80047dc <checkAktifCalisma+0x8f4>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 80046ee:	4b3f      	ldr	r3, [pc, #252]	@ (80047ec <checkAktifCalisma+0x904>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f040 8088 	bne.w	8004808 <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80046f8:	4b3d      	ldr	r3, [pc, #244]	@ (80047f0 <checkAktifCalisma+0x908>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d003      	beq.n	8004708 <checkAktifCalisma+0x820>
 8004700:	4b3b      	ldr	r3, [pc, #236]	@ (80047f0 <checkAktifCalisma+0x908>)
 8004702:	781b      	ldrb	r3, [r3, #0]
 8004704:	2b02      	cmp	r3, #2
 8004706:	d17f      	bne.n	8004808 <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8004708:	4b32      	ldr	r3, [pc, #200]	@ (80047d4 <checkAktifCalisma+0x8ec>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d07b      	beq.n	8004808 <checkAktifCalisma+0x920>
 8004710:	4b31      	ldr	r3, [pc, #196]	@ (80047d8 <checkAktifCalisma+0x8f0>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d077      	beq.n	8004808 <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004718:	2140      	movs	r1, #64	@ 0x40
 800471a:	482b      	ldr	r0, [pc, #172]	@ (80047c8 <checkAktifCalisma+0x8e0>)
 800471c:	f005 fba0 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d170      	bne.n	8004808 <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8004726:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800472a:	4827      	ldr	r0, [pc, #156]	@ (80047c8 <checkAktifCalisma+0x8e0>)
 800472c:	f005 fb98 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d003      	beq.n	800473e <checkAktifCalisma+0x856>
 8004736:	4b2f      	ldr	r3, [pc, #188]	@ (80047f4 <checkAktifCalisma+0x90c>)
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d164      	bne.n	8004808 <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800473e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004742:	4823      	ldr	r0, [pc, #140]	@ (80047d0 <checkAktifCalisma+0x8e8>)
 8004744:	f005 fb8c 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004748:	4603      	mov	r3, r0
 800474a:	2b01      	cmp	r3, #1
 800474c:	d10f      	bne.n	800476e <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800474e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004752:	481f      	ldr	r0, [pc, #124]	@ (80047d0 <checkAktifCalisma+0x8e8>)
 8004754:	f005 fb84 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004758:	4603      	mov	r3, r0
 800475a:	2b01      	cmp	r3, #1
 800475c:	d107      	bne.n	800476e <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 800475e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004762:	481b      	ldr	r0, [pc, #108]	@ (80047d0 <checkAktifCalisma+0x8e8>)
 8004764:	f005 fb7c 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004768:	4603      	mov	r3, r0
 800476a:	2b01      	cmp	r3, #1
 800476c:	d003      	beq.n	8004776 <checkAktifCalisma+0x88e>
 800476e:	4b22      	ldr	r3, [pc, #136]	@ (80047f8 <checkAktifCalisma+0x910>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d048      	beq.n	8004808 <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 8004776:	4b21      	ldr	r3, [pc, #132]	@ (80047fc <checkAktifCalisma+0x914>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	f083 0301 	eor.w	r3, r3, #1
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d041      	beq.n	8004808 <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8004784:	4b1e      	ldr	r3, [pc, #120]	@ (8004800 <checkAktifCalisma+0x918>)
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	f083 0301 	eor.w	r3, r3, #1
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d03a      	beq.n	8004808 <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8004792:	4b1c      	ldr	r3, [pc, #112]	@ (8004804 <checkAktifCalisma+0x91c>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	f083 0301 	eor.w	r3, r3, #1
 800479a:	b2db      	uxtb	r3, r3
 800479c:	2b00      	cmp	r3, #0
 800479e:	d033      	beq.n	8004808 <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 80047a0:	4b0a      	ldr	r3, [pc, #40]	@ (80047cc <checkAktifCalisma+0x8e4>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	f083 0301 	eor.w	r3, r3, #1
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d02c      	beq.n	8004808 <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 80047ae:	4b05      	ldr	r3, [pc, #20]	@ (80047c4 <checkAktifCalisma+0x8dc>)
 80047b0:	781b      	ldrb	r3, [r3, #0]
 80047b2:	f083 0301 	eor.w	r3, r3, #1
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d025      	beq.n	8004808 <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 80047bc:	4b0e      	ldr	r3, [pc, #56]	@ (80047f8 <checkAktifCalisma+0x910>)
 80047be:	2201      	movs	r2, #1
 80047c0:	701a      	strb	r2, [r3, #0]
 80047c2:	e024      	b.n	800480e <checkAktifCalisma+0x926>
 80047c4:	200010a3 	.word	0x200010a3
 80047c8:	40011000 	.word	0x40011000
 80047cc:	200010a7 	.word	0x200010a7
 80047d0:	40010c00 	.word	0x40010c00
 80047d4:	200010be 	.word	0x200010be
 80047d8:	200010bf 	.word	0x200010bf
 80047dc:	2000109f 	.word	0x2000109f
 80047e0:	20001044 	.word	0x20001044
 80047e4:	20001050 	.word	0x20001050
 80047e8:	20001082 	.word	0x20001082
 80047ec:	20001089 	.word	0x20001089
 80047f0:	2000107b 	.word	0x2000107b
 80047f4:	2000107d 	.word	0x2000107d
 80047f8:	200010a4 	.word	0x200010a4
 80047fc:	200010a2 	.word	0x200010a2
 8004800:	200010a6 	.word	0x200010a6
 8004804:	200010a5 	.word	0x200010a5
				} else {
					devmotorasagicalisiyor=0;
 8004808:	4b96      	ldr	r3, [pc, #600]	@ (8004a64 <checkAktifCalisma+0xb7c>)
 800480a:	2200      	movs	r2, #0
 800480c:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 800480e:	4b95      	ldr	r3, [pc, #596]	@ (8004a64 <checkAktifCalisma+0xb7c>)
 8004810:	781b      	ldrb	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d007      	beq.n	8004826 <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004816:	2201      	movs	r2, #1
 8004818:	2110      	movs	r1, #16
 800481a:	4893      	ldr	r0, [pc, #588]	@ (8004a68 <checkAktifCalisma+0xb80>)
 800481c:	f005 fb37 	bl	8009e8e <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8004820:	4b92      	ldr	r3, [pc, #584]	@ (8004a6c <checkAktifCalisma+0xb84>)
 8004822:	2201      	movs	r2, #1
 8004824:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004826:	4b91      	ldr	r3, [pc, #580]	@ (8004a6c <checkAktifCalisma+0xb84>)
 8004828:	781b      	ldrb	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d024      	beq.n	8004878 <checkAktifCalisma+0x990>
 800482e:	2140      	movs	r1, #64	@ 0x40
 8004830:	488d      	ldr	r0, [pc, #564]	@ (8004a68 <checkAktifCalisma+0xb80>)
 8004832:	f005 fb15 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004836:	4603      	mov	r3, r0
 8004838:	2b01      	cmp	r3, #1
 800483a:	d007      	beq.n	800484c <checkAktifCalisma+0x964>
 800483c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004840:	4889      	ldr	r0, [pc, #548]	@ (8004a68 <checkAktifCalisma+0xb80>)
 8004842:	f005 fb0d 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004846:	4603      	mov	r3, r0
 8004848:	2b01      	cmp	r3, #1
 800484a:	d115      	bne.n	8004878 <checkAktifCalisma+0x990>
 800484c:	4b88      	ldr	r3, [pc, #544]	@ (8004a70 <checkAktifCalisma+0xb88>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d011      	beq.n	8004878 <checkAktifCalisma+0x990>
 8004854:	4b87      	ldr	r3, [pc, #540]	@ (8004a74 <checkAktifCalisma+0xb8c>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00d      	beq.n	8004878 <checkAktifCalisma+0x990>
 800485c:	4b86      	ldr	r3, [pc, #536]	@ (8004a78 <checkAktifCalisma+0xb90>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	f083 0301 	eor.w	r3, r3, #1
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d006      	beq.n	8004878 <checkAktifCalisma+0x990>
					timer2=millis;
 800486a:	4b84      	ldr	r3, [pc, #528]	@ (8004a7c <checkAktifCalisma+0xb94>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a84      	ldr	r2, [pc, #528]	@ (8004a80 <checkAktifCalisma+0xb98>)
 8004870:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8004872:	4b81      	ldr	r3, [pc, #516]	@ (8004a78 <checkAktifCalisma+0xb90>)
 8004874:	2201      	movs	r2, #1
 8004876:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004878:	4b80      	ldr	r3, [pc, #512]	@ (8004a7c <checkAktifCalisma+0xb94>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	4b80      	ldr	r3, [pc, #512]	@ (8004a80 <checkAktifCalisma+0xb98>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	4a80      	ldr	r2, [pc, #512]	@ (8004a84 <checkAktifCalisma+0xb9c>)
 8004884:	7812      	ldrb	r2, [r2, #0]
 8004886:	4293      	cmp	r3, r2
 8004888:	d303      	bcc.n	8004892 <checkAktifCalisma+0x9aa>
 800488a:	4b7b      	ldr	r3, [pc, #492]	@ (8004a78 <checkAktifCalisma+0xb90>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10d      	bne.n	80048ae <checkAktifCalisma+0x9c6>
 8004892:	4b77      	ldr	r3, [pc, #476]	@ (8004a70 <checkAktifCalisma+0xb88>)
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	f083 0301 	eor.w	r3, r3, #1
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d106      	bne.n	80048ae <checkAktifCalisma+0x9c6>
 80048a0:	4b74      	ldr	r3, [pc, #464]	@ (8004a74 <checkAktifCalisma+0xb8c>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	f083 0301 	eor.w	r3, r3, #1
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00a      	beq.n	80048c4 <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80048ae:	2200      	movs	r2, #0
 80048b0:	2110      	movs	r1, #16
 80048b2:	486d      	ldr	r0, [pc, #436]	@ (8004a68 <checkAktifCalisma+0xb80>)
 80048b4:	f005 faeb 	bl	8009e8e <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 80048b8:	4b6c      	ldr	r3, [pc, #432]	@ (8004a6c <checkAktifCalisma+0xb84>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 80048be:	4b6e      	ldr	r3, [pc, #440]	@ (8004a78 <checkAktifCalisma+0xb90>)
 80048c0:	2200      	movs	r2, #0
 80048c2:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 80048c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80048c8:	486f      	ldr	r0, [pc, #444]	@ (8004a88 <checkAktifCalisma+0xba0>)
 80048ca:	f005 fac9 	bl	8009e60 <HAL_GPIO_ReadPin>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d120      	bne.n	8004916 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 80048d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80048d8:	486b      	ldr	r0, [pc, #428]	@ (8004a88 <checkAktifCalisma+0xba0>)
 80048da:	f005 fac1 	bl	8009e60 <HAL_GPIO_ReadPin>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d118      	bne.n	8004916 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 80048e4:	2104      	movs	r1, #4
 80048e6:	4868      	ldr	r0, [pc, #416]	@ (8004a88 <checkAktifCalisma+0xba0>)
 80048e8:	f005 faba 	bl	8009e60 <HAL_GPIO_ReadPin>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d111      	bne.n	8004916 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80048f2:	2102      	movs	r1, #2
 80048f4:	4864      	ldr	r0, [pc, #400]	@ (8004a88 <checkAktifCalisma+0xba0>)
 80048f6:	f005 fab3 	bl	8009e60 <HAL_GPIO_ReadPin>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10a      	bne.n	8004916 <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004900:	2101      	movs	r1, #1
 8004902:	4861      	ldr	r0, [pc, #388]	@ (8004a88 <checkAktifCalisma+0xba0>)
 8004904:	f005 faac 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d103      	bne.n	8004916 <checkAktifCalisma+0xa2e>
					makineStop=1;
 800490e:	4b5f      	ldr	r3, [pc, #380]	@ (8004a8c <checkAktifCalisma+0xba4>)
 8004910:	2201      	movs	r2, #1
 8004912:	701a      	strb	r2, [r3, #0]
 8004914:	e002      	b.n	800491c <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 8004916:	4b5d      	ldr	r3, [pc, #372]	@ (8004a8c <checkAktifCalisma+0xba4>)
 8004918:	2200      	movs	r2, #0
 800491a:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800491c:	4b5c      	ldr	r3, [pc, #368]	@ (8004a90 <checkAktifCalisma+0xba8>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d144      	bne.n	80049ae <checkAktifCalisma+0xac6>
 8004924:	4b5b      	ldr	r3, [pc, #364]	@ (8004a94 <checkAktifCalisma+0xbac>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d003      	beq.n	8004934 <checkAktifCalisma+0xa4c>
 800492c:	4b59      	ldr	r3, [pc, #356]	@ (8004a94 <checkAktifCalisma+0xbac>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b03      	cmp	r3, #3
 8004932:	d13c      	bne.n	80049ae <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004934:	2180      	movs	r1, #128	@ 0x80
 8004936:	484c      	ldr	r0, [pc, #304]	@ (8004a68 <checkAktifCalisma+0xb80>)
 8004938:	f005 fa92 	bl	8009e60 <HAL_GPIO_ReadPin>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d103      	bne.n	800494a <checkAktifCalisma+0xa62>
 8004942:	4b55      	ldr	r3, [pc, #340]	@ (8004a98 <checkAktifCalisma+0xbb0>)
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00b      	beq.n	8004962 <checkAktifCalisma+0xa7a>
 800494a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800494e:	484e      	ldr	r0, [pc, #312]	@ (8004a88 <checkAktifCalisma+0xba0>)
 8004950:	f005 fa86 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d129      	bne.n	80049ae <checkAktifCalisma+0xac6>
 800495a:	4b4f      	ldr	r3, [pc, #316]	@ (8004a98 <checkAktifCalisma+0xbb0>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b01      	cmp	r3, #1
 8004960:	d125      	bne.n	80049ae <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004962:	2104      	movs	r1, #4
 8004964:	4840      	ldr	r0, [pc, #256]	@ (8004a68 <checkAktifCalisma+0xb80>)
 8004966:	f005 fa7b 	bl	8009e60 <HAL_GPIO_ReadPin>
 800496a:	4603      	mov	r3, r0
 800496c:	2b01      	cmp	r3, #1
 800496e:	d003      	beq.n	8004978 <checkAktifCalisma+0xa90>
 8004970:	4b4a      	ldr	r3, [pc, #296]	@ (8004a9c <checkAktifCalisma+0xbb4>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d11a      	bne.n	80049ae <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004978:	2102      	movs	r1, #2
 800497a:	483b      	ldr	r0, [pc, #236]	@ (8004a68 <checkAktifCalisma+0xb80>)
 800497c:	f005 fa70 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d113      	bne.n	80049ae <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 8004986:	4b46      	ldr	r3, [pc, #280]	@ (8004aa0 <checkAktifCalisma+0xbb8>)
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	f083 0301 	eor.w	r3, r3, #1
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00c      	beq.n	80049ae <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 8004994:	4b3d      	ldr	r3, [pc, #244]	@ (8004a8c <checkAktifCalisma+0xba4>)
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 800499c:	4b41      	ldr	r3, [pc, #260]	@ (8004aa4 <checkAktifCalisma+0xbbc>)
 800499e:	2201      	movs	r2, #1
 80049a0:	701a      	strb	r2, [r3, #0]
					timer = millis;
 80049a2:	4b36      	ldr	r3, [pc, #216]	@ (8004a7c <checkAktifCalisma+0xb94>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a40      	ldr	r2, [pc, #256]	@ (8004aa8 <checkAktifCalisma+0xbc0>)
 80049a8:	6013      	str	r3, [r2, #0]
					bekle();
 80049aa:	f7ff f901 	bl	8003bb0 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 80049ae:	4b33      	ldr	r3, [pc, #204]	@ (8004a7c <checkAktifCalisma+0xb94>)
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4b3d      	ldr	r3, [pc, #244]	@ (8004aa8 <checkAktifCalisma+0xbc0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	4a3c      	ldr	r2, [pc, #240]	@ (8004aac <checkAktifCalisma+0xbc4>)
 80049ba:	7812      	ldrb	r2, [r2, #0]
 80049bc:	4293      	cmp	r3, r2
 80049be:	d211      	bcs.n	80049e4 <checkAktifCalisma+0xafc>
 80049c0:	2104      	movs	r1, #4
 80049c2:	4829      	ldr	r0, [pc, #164]	@ (8004a68 <checkAktifCalisma+0xb80>)
 80049c4:	f005 fa4c 	bl	8009e60 <HAL_GPIO_ReadPin>
 80049c8:	4603      	mov	r3, r0
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00a      	beq.n	80049e4 <checkAktifCalisma+0xafc>
 80049ce:	4b33      	ldr	r3, [pc, #204]	@ (8004a9c <checkAktifCalisma+0xbb4>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d006      	beq.n	80049e4 <checkAktifCalisma+0xafc>
 80049d6:	4b2d      	ldr	r3, [pc, #180]	@ (8004a8c <checkAktifCalisma+0xba4>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	f083 0301 	eor.w	r3, r3, #1
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 80049e4:	4b2f      	ldr	r3, [pc, #188]	@ (8004aa4 <checkAktifCalisma+0xbbc>)
 80049e6:	2200      	movs	r2, #0
 80049e8:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80049ea:	4b29      	ldr	r3, [pc, #164]	@ (8004a90 <checkAktifCalisma+0xba8>)
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d160      	bne.n	8004ab4 <checkAktifCalisma+0xbcc>
 80049f2:	4b28      	ldr	r3, [pc, #160]	@ (8004a94 <checkAktifCalisma+0xbac>)
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d003      	beq.n	8004a02 <checkAktifCalisma+0xb1a>
 80049fa:	4b26      	ldr	r3, [pc, #152]	@ (8004a94 <checkAktifCalisma+0xbac>)
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b03      	cmp	r3, #3
 8004a00:	d158      	bne.n	8004ab4 <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004a02:	2104      	movs	r1, #4
 8004a04:	4818      	ldr	r0, [pc, #96]	@ (8004a68 <checkAktifCalisma+0xb80>)
 8004a06:	f005 fa2b 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d003      	beq.n	8004a18 <checkAktifCalisma+0xb30>
 8004a10:	4b22      	ldr	r3, [pc, #136]	@ (8004a9c <checkAktifCalisma+0xbb4>)
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d14d      	bne.n	8004ab4 <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004a18:	2102      	movs	r1, #2
 8004a1a:	4813      	ldr	r0, [pc, #76]	@ (8004a68 <checkAktifCalisma+0xb80>)
 8004a1c:	f005 fa20 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d146      	bne.n	8004ab4 <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004a26:	2180      	movs	r1, #128	@ 0x80
 8004a28:	480f      	ldr	r0, [pc, #60]	@ (8004a68 <checkAktifCalisma+0xb80>)
 8004a2a:	f005 fa19 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d103      	bne.n	8004a3c <checkAktifCalisma+0xb54>
 8004a34:	4b18      	ldr	r3, [pc, #96]	@ (8004a98 <checkAktifCalisma+0xbb0>)
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00b      	beq.n	8004a54 <checkAktifCalisma+0xb6c>
 8004a3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a40:	4811      	ldr	r0, [pc, #68]	@ (8004a88 <checkAktifCalisma+0xba0>)
 8004a42:	f005 fa0d 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d133      	bne.n	8004ab4 <checkAktifCalisma+0xbcc>
 8004a4c:	4b12      	ldr	r3, [pc, #72]	@ (8004a98 <checkAktifCalisma+0xbb0>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d12f      	bne.n	8004ab4 <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 8004a54:	4b0d      	ldr	r3, [pc, #52]	@ (8004a8c <checkAktifCalisma+0xba4>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d02b      	beq.n	8004ab4 <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 8004a5c:	4b14      	ldr	r3, [pc, #80]	@ (8004ab0 <checkAktifCalisma+0xbc8>)
 8004a5e:	2201      	movs	r2, #1
 8004a60:	701a      	strb	r2, [r3, #0]
 8004a62:	e02a      	b.n	8004aba <checkAktifCalisma+0xbd2>
 8004a64:	200010a4 	.word	0x200010a4
 8004a68:	40011000 	.word	0x40011000
 8004a6c:	200010a8 	.word	0x200010a8
 8004a70:	200010be 	.word	0x200010be
 8004a74:	200010bf 	.word	0x200010bf
 8004a78:	200010a0 	.word	0x200010a0
 8004a7c:	20001044 	.word	0x20001044
 8004a80:	20001050 	.word	0x20001050
 8004a84:	20001082 	.word	0x20001082
 8004a88:	40010c00 	.word	0x40010c00
 8004a8c:	200010ae 	.word	0x200010ae
 8004a90:	20001075 	.word	0x20001075
 8004a94:	20001074 	.word	0x20001074
 8004a98:	20001078 	.word	0x20001078
 8004a9c:	20001072 	.word	0x20001072
 8004aa0:	2000109c 	.word	0x2000109c
 8004aa4:	200010af 	.word	0x200010af
 8004aa8:	20001048 	.word	0x20001048
 8004aac:	20001085 	.word	0x20001085
 8004ab0:	200010b0 	.word	0x200010b0
				} else {
					kapi1butonkontrol=0;
 8004ab4:	4b8b      	ldr	r3, [pc, #556]	@ (8004ce4 <checkAktifCalisma+0xdfc>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004aba:	4b8b      	ldr	r3, [pc, #556]	@ (8004ce8 <checkAktifCalisma+0xe00>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d121      	bne.n	8004b06 <checkAktifCalisma+0xc1e>
 8004ac2:	4b8a      	ldr	r3, [pc, #552]	@ (8004cec <checkAktifCalisma+0xe04>)
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d003      	beq.n	8004ad2 <checkAktifCalisma+0xbea>
 8004aca:	4b88      	ldr	r3, [pc, #544]	@ (8004cec <checkAktifCalisma+0xe04>)
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d119      	bne.n	8004b06 <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004ad2:	2104      	movs	r1, #4
 8004ad4:	4886      	ldr	r0, [pc, #536]	@ (8004cf0 <checkAktifCalisma+0xe08>)
 8004ad6:	f005 f9c3 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d003      	beq.n	8004ae8 <checkAktifCalisma+0xc00>
 8004ae0:	4b84      	ldr	r3, [pc, #528]	@ (8004cf4 <checkAktifCalisma+0xe0c>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10e      	bne.n	8004b06 <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004ae8:	2102      	movs	r1, #2
 8004aea:	4881      	ldr	r0, [pc, #516]	@ (8004cf0 <checkAktifCalisma+0xe08>)
 8004aec:	f005 f9b8 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d107      	bne.n	8004b06 <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 8004af6:	4b80      	ldr	r3, [pc, #512]	@ (8004cf8 <checkAktifCalisma+0xe10>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 8004afe:	4b7f      	ldr	r3, [pc, #508]	@ (8004cfc <checkAktifCalisma+0xe14>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	e002      	b.n	8004b0c <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 8004b06:	4b7d      	ldr	r3, [pc, #500]	@ (8004cfc <checkAktifCalisma+0xe14>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8004b0c:	4b75      	ldr	r3, [pc, #468]	@ (8004ce4 <checkAktifCalisma+0xdfc>)
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d107      	bne.n	8004b24 <checkAktifCalisma+0xc3c>
 8004b14:	4b79      	ldr	r3, [pc, #484]	@ (8004cfc <checkAktifCalisma+0xe14>)
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d103      	bne.n	8004b24 <checkAktifCalisma+0xc3c>
 8004b1c:	4b78      	ldr	r3, [pc, #480]	@ (8004d00 <checkAktifCalisma+0xe18>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004b24:	2201      	movs	r2, #1
 8004b26:	2180      	movs	r1, #128	@ 0x80
 8004b28:	4876      	ldr	r0, [pc, #472]	@ (8004d04 <checkAktifCalisma+0xe1c>)
 8004b2a:	f005 f9b0 	bl	8009e8e <HAL_GPIO_WritePin>
 8004b2e:	e004      	b.n	8004b3a <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004b30:	2200      	movs	r2, #0
 8004b32:	2180      	movs	r1, #128	@ 0x80
 8004b34:	4873      	ldr	r0, [pc, #460]	@ (8004d04 <checkAktifCalisma+0xe1c>)
 8004b36:	f005 f9aa 	bl	8009e8e <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004b3a:	4b73      	ldr	r3, [pc, #460]	@ (8004d08 <checkAktifCalisma+0xe20>)
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d141      	bne.n	8004bc6 <checkAktifCalisma+0xcde>
 8004b42:	4b6a      	ldr	r3, [pc, #424]	@ (8004cec <checkAktifCalisma+0xe04>)
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d003      	beq.n	8004b52 <checkAktifCalisma+0xc6a>
 8004b4a:	4b68      	ldr	r3, [pc, #416]	@ (8004cec <checkAktifCalisma+0xe04>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	2b03      	cmp	r3, #3
 8004b50:	d139      	bne.n	8004bc6 <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004b52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004b56:	4866      	ldr	r0, [pc, #408]	@ (8004cf0 <checkAktifCalisma+0xe08>)
 8004b58:	f005 f982 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d103      	bne.n	8004b6a <checkAktifCalisma+0xc82>
 8004b62:	4b6a      	ldr	r3, [pc, #424]	@ (8004d0c <checkAktifCalisma+0xe24>)
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00b      	beq.n	8004b82 <checkAktifCalisma+0xc9a>
 8004b6a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004b6e:	4868      	ldr	r0, [pc, #416]	@ (8004d10 <checkAktifCalisma+0xe28>)
 8004b70:	f005 f976 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d125      	bne.n	8004bc6 <checkAktifCalisma+0xcde>
 8004b7a:	4b64      	ldr	r3, [pc, #400]	@ (8004d0c <checkAktifCalisma+0xe24>)
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d121      	bne.n	8004bc6 <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004b82:	2102      	movs	r1, #2
 8004b84:	485a      	ldr	r0, [pc, #360]	@ (8004cf0 <checkAktifCalisma+0xe08>)
 8004b86:	f005 f96b 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d11a      	bne.n	8004bc6 <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004b90:	2104      	movs	r1, #4
 8004b92:	4857      	ldr	r0, [pc, #348]	@ (8004cf0 <checkAktifCalisma+0xe08>)
 8004b94:	f005 f964 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d113      	bne.n	8004bc6 <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 8004b9e:	4b56      	ldr	r3, [pc, #344]	@ (8004cf8 <checkAktifCalisma+0xe10>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00f      	beq.n	8004bc6 <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 8004ba6:	4b5b      	ldr	r3, [pc, #364]	@ (8004d14 <checkAktifCalisma+0xe2c>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	f083 0301 	eor.w	r3, r3, #1
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d008      	beq.n	8004bc6 <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 8004bb4:	4b58      	ldr	r3, [pc, #352]	@ (8004d18 <checkAktifCalisma+0xe30>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004bba:	4b58      	ldr	r3, [pc, #352]	@ (8004d1c <checkAktifCalisma+0xe34>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a58      	ldr	r2, [pc, #352]	@ (8004d20 <checkAktifCalisma+0xe38>)
 8004bc0:	6013      	str	r3, [r2, #0]
					bekle();
 8004bc2:	f7fe fff5 	bl	8003bb0 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8004bc6:	4b55      	ldr	r3, [pc, #340]	@ (8004d1c <checkAktifCalisma+0xe34>)
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	4b55      	ldr	r3, [pc, #340]	@ (8004d20 <checkAktifCalisma+0xe38>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	4a54      	ldr	r2, [pc, #336]	@ (8004d24 <checkAktifCalisma+0xe3c>)
 8004bd2:	7812      	ldrb	r2, [r2, #0]
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d20d      	bcs.n	8004bf4 <checkAktifCalisma+0xd0c>
 8004bd8:	2102      	movs	r1, #2
 8004bda:	4845      	ldr	r0, [pc, #276]	@ (8004cf0 <checkAktifCalisma+0xe08>)
 8004bdc:	f005 f940 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d006      	beq.n	8004bf4 <checkAktifCalisma+0xd0c>
 8004be6:	4b44      	ldr	r3, [pc, #272]	@ (8004cf8 <checkAktifCalisma+0xe10>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	f083 0301 	eor.w	r3, r3, #1
 8004bee:	b2db      	uxtb	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 8004bf4:	4b48      	ldr	r3, [pc, #288]	@ (8004d18 <checkAktifCalisma+0xe30>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004bfa:	4b43      	ldr	r3, [pc, #268]	@ (8004d08 <checkAktifCalisma+0xe20>)
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d135      	bne.n	8004c6e <checkAktifCalisma+0xd86>
 8004c02:	4b3a      	ldr	r3, [pc, #232]	@ (8004cec <checkAktifCalisma+0xe04>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d003      	beq.n	8004c12 <checkAktifCalisma+0xd2a>
 8004c0a:	4b38      	ldr	r3, [pc, #224]	@ (8004cec <checkAktifCalisma+0xe04>)
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d12d      	bne.n	8004c6e <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004c12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c16:	4836      	ldr	r0, [pc, #216]	@ (8004cf0 <checkAktifCalisma+0xe08>)
 8004c18:	f005 f922 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d103      	bne.n	8004c2a <checkAktifCalisma+0xd42>
 8004c22:	4b3a      	ldr	r3, [pc, #232]	@ (8004d0c <checkAktifCalisma+0xe24>)
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00b      	beq.n	8004c42 <checkAktifCalisma+0xd5a>
 8004c2a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004c2e:	4838      	ldr	r0, [pc, #224]	@ (8004d10 <checkAktifCalisma+0xe28>)
 8004c30:	f005 f916 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d119      	bne.n	8004c6e <checkAktifCalisma+0xd86>
 8004c3a:	4b34      	ldr	r3, [pc, #208]	@ (8004d0c <checkAktifCalisma+0xe24>)
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d115      	bne.n	8004c6e <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004c42:	2102      	movs	r1, #2
 8004c44:	482a      	ldr	r0, [pc, #168]	@ (8004cf0 <checkAktifCalisma+0xe08>)
 8004c46:	f005 f90b 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d10e      	bne.n	8004c6e <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004c50:	2104      	movs	r1, #4
 8004c52:	4827      	ldr	r0, [pc, #156]	@ (8004cf0 <checkAktifCalisma+0xe08>)
 8004c54:	f005 f904 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d107      	bne.n	8004c6e <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 8004c5e:	4b26      	ldr	r3, [pc, #152]	@ (8004cf8 <checkAktifCalisma+0xe10>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 8004c66:	4b30      	ldr	r3, [pc, #192]	@ (8004d28 <checkAktifCalisma+0xe40>)
 8004c68:	2201      	movs	r2, #1
 8004c6a:	701a      	strb	r2, [r3, #0]
 8004c6c:	e002      	b.n	8004c74 <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 8004c6e:	4b2e      	ldr	r3, [pc, #184]	@ (8004d28 <checkAktifCalisma+0xe40>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004c74:	4b24      	ldr	r3, [pc, #144]	@ (8004d08 <checkAktifCalisma+0xe20>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d11d      	bne.n	8004cb8 <checkAktifCalisma+0xdd0>
 8004c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004cec <checkAktifCalisma+0xe04>)
 8004c7e:	781b      	ldrb	r3, [r3, #0]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d003      	beq.n	8004c8c <checkAktifCalisma+0xda4>
 8004c84:	4b19      	ldr	r3, [pc, #100]	@ (8004cec <checkAktifCalisma+0xe04>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b03      	cmp	r3, #3
 8004c8a:	d115      	bne.n	8004cb8 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004c8c:	2102      	movs	r1, #2
 8004c8e:	4818      	ldr	r0, [pc, #96]	@ (8004cf0 <checkAktifCalisma+0xe08>)
 8004c90:	f005 f8e6 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d10e      	bne.n	8004cb8 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004c9a:	2104      	movs	r1, #4
 8004c9c:	4814      	ldr	r0, [pc, #80]	@ (8004cf0 <checkAktifCalisma+0xe08>)
 8004c9e:	f005 f8df 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d107      	bne.n	8004cb8 <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 8004ca8:	4b13      	ldr	r3, [pc, #76]	@ (8004cf8 <checkAktifCalisma+0xe10>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 8004cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8004d2c <checkAktifCalisma+0xe44>)
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	701a      	strb	r2, [r3, #0]
 8004cb6:	e002      	b.n	8004cbe <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8004cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8004d2c <checkAktifCalisma+0xe44>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8004cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8004d28 <checkAktifCalisma+0xe40>)
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d107      	bne.n	8004cd6 <checkAktifCalisma+0xdee>
 8004cc6:	4b19      	ldr	r3, [pc, #100]	@ (8004d2c <checkAktifCalisma+0xe44>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d103      	bne.n	8004cd6 <checkAktifCalisma+0xdee>
 8004cce:	4b12      	ldr	r3, [pc, #72]	@ (8004d18 <checkAktifCalisma+0xe30>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d02c      	beq.n	8004d30 <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	2140      	movs	r1, #64	@ 0x40
 8004cda:	480a      	ldr	r0, [pc, #40]	@ (8004d04 <checkAktifCalisma+0xe1c>)
 8004cdc:	f005 f8d7 	bl	8009e8e <HAL_GPIO_WritePin>
 8004ce0:	e02b      	b.n	8004d3a <checkAktifCalisma+0xe52>
 8004ce2:	bf00      	nop
 8004ce4:	200010b0 	.word	0x200010b0
 8004ce8:	20001075 	.word	0x20001075
 8004cec:	20001074 	.word	0x20001074
 8004cf0:	40011000 	.word	0x40011000
 8004cf4:	20001072 	.word	0x20001072
 8004cf8:	200010ae 	.word	0x200010ae
 8004cfc:	200010b1 	.word	0x200010b1
 8004d00:	200010af 	.word	0x200010af
 8004d04:	40010800 	.word	0x40010800
 8004d08:	20001076 	.word	0x20001076
 8004d0c:	20001078 	.word	0x20001078
 8004d10:	40010c00 	.word	0x40010c00
 8004d14:	2000109c 	.word	0x2000109c
 8004d18:	200010b2 	.word	0x200010b2
 8004d1c:	20001044 	.word	0x20001044
 8004d20:	20001048 	.word	0x20001048
 8004d24:	20001086 	.word	0x20001086
 8004d28:	200010b3 	.word	0x200010b3
 8004d2c:	200010b4 	.word	0x200010b4
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004d30:	2200      	movs	r2, #0
 8004d32:	2140      	movs	r1, #64	@ 0x40
 8004d34:	4889      	ldr	r0, [pc, #548]	@ (8004f5c <checkAktifCalisma+0x1074>)
 8004d36:	f005 f8aa 	bl	8009e8e <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 8004d3a:	4b89      	ldr	r3, [pc, #548]	@ (8004f60 <checkAktifCalisma+0x1078>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d003      	beq.n	8004d4a <checkAktifCalisma+0xe62>
 8004d42:	4b87      	ldr	r3, [pc, #540]	@ (8004f60 <checkAktifCalisma+0x1078>)
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d115      	bne.n	8004d76 <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004d4a:	2104      	movs	r1, #4
 8004d4c:	4885      	ldr	r0, [pc, #532]	@ (8004f64 <checkAktifCalisma+0x107c>)
 8004d4e:	f005 f887 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d003      	beq.n	8004d60 <checkAktifCalisma+0xe78>
 8004d58:	4b83      	ldr	r3, [pc, #524]	@ (8004f68 <checkAktifCalisma+0x1080>)
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10a      	bne.n	8004d76 <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8004d60:	2102      	movs	r1, #2
 8004d62:	4880      	ldr	r0, [pc, #512]	@ (8004f64 <checkAktifCalisma+0x107c>)
 8004d64:	f005 f87c 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d103      	bne.n	8004d76 <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 8004d6e:	4b7f      	ldr	r3, [pc, #508]	@ (8004f6c <checkAktifCalisma+0x1084>)
 8004d70:	2201      	movs	r2, #1
 8004d72:	701a      	strb	r2, [r3, #0]
 8004d74:	e002      	b.n	8004d7c <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 8004d76:	4b7d      	ldr	r3, [pc, #500]	@ (8004f6c <checkAktifCalisma+0x1084>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8004d7c:	4b78      	ldr	r3, [pc, #480]	@ (8004f60 <checkAktifCalisma+0x1078>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d003      	beq.n	8004d8c <checkAktifCalisma+0xea4>
 8004d84:	4b76      	ldr	r3, [pc, #472]	@ (8004f60 <checkAktifCalisma+0x1078>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d111      	bne.n	8004db0 <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004d8c:	2102      	movs	r1, #2
 8004d8e:	4875      	ldr	r0, [pc, #468]	@ (8004f64 <checkAktifCalisma+0x107c>)
 8004d90:	f005 f866 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d10a      	bne.n	8004db0 <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8004d9a:	2104      	movs	r1, #4
 8004d9c:	4871      	ldr	r0, [pc, #452]	@ (8004f64 <checkAktifCalisma+0x107c>)
 8004d9e:	f005 f85f 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d103      	bne.n	8004db0 <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 8004da8:	4b71      	ldr	r3, [pc, #452]	@ (8004f70 <checkAktifCalisma+0x1088>)
 8004daa:	2201      	movs	r2, #1
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	e002      	b.n	8004db6 <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 8004db0:	4b6f      	ldr	r3, [pc, #444]	@ (8004f70 <checkAktifCalisma+0x1088>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 8004db6:	4b6d      	ldr	r3, [pc, #436]	@ (8004f6c <checkAktifCalisma+0x1084>)
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00f      	beq.n	8004dde <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 8004dbe:	4b6d      	ldr	r3, [pc, #436]	@ (8004f74 <checkAktifCalisma+0x108c>)
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d10b      	bne.n	8004dde <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8004dc6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004dca:	486b      	ldr	r0, [pc, #428]	@ (8004f78 <checkAktifCalisma+0x1090>)
 8004dcc:	f005 f848 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d103      	bne.n	8004dde <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 8004dd6:	4b69      	ldr	r3, [pc, #420]	@ (8004f7c <checkAktifCalisma+0x1094>)
 8004dd8:	2201      	movs	r2, #1
 8004dda:	701a      	strb	r2, [r3, #0]
 8004ddc:	e002      	b.n	8004de4 <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 8004dde:	4b67      	ldr	r3, [pc, #412]	@ (8004f7c <checkAktifCalisma+0x1094>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8004de4:	4b62      	ldr	r3, [pc, #392]	@ (8004f70 <checkAktifCalisma+0x1088>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00f      	beq.n	8004e0c <checkAktifCalisma+0xf24>
						&& kapiAcTipi==1
 8004dec:	4b61      	ldr	r3, [pc, #388]	@ (8004f74 <checkAktifCalisma+0x108c>)
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d10b      	bne.n	8004e0c <checkAktifCalisma+0xf24>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8004df4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004df8:	485f      	ldr	r0, [pc, #380]	@ (8004f78 <checkAktifCalisma+0x1090>)
 8004dfa:	f005 f831 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d103      	bne.n	8004e0c <checkAktifCalisma+0xf24>

					kapiactablaesp2=1;
 8004e04:	4b5e      	ldr	r3, [pc, #376]	@ (8004f80 <checkAktifCalisma+0x1098>)
 8004e06:	2201      	movs	r2, #1
 8004e08:	701a      	strb	r2, [r3, #0]
 8004e0a:	e002      	b.n	8004e12 <checkAktifCalisma+0xf2a>
				} else {
					kapiactablaesp2=0;
 8004e0c:	4b5c      	ldr	r3, [pc, #368]	@ (8004f80 <checkAktifCalisma+0x1098>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004e12:	4b5c      	ldr	r3, [pc, #368]	@ (8004f84 <checkAktifCalisma+0x109c>)
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d11b      	bne.n	8004e52 <checkAktifCalisma+0xf6a>
 8004e1a:	4b5b      	ldr	r3, [pc, #364]	@ (8004f88 <checkAktifCalisma+0x10a0>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d003      	beq.n	8004e2a <checkAktifCalisma+0xf42>
 8004e22:	4b59      	ldr	r3, [pc, #356]	@ (8004f88 <checkAktifCalisma+0x10a0>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b03      	cmp	r3, #3
 8004e28:	d113      	bne.n	8004e52 <checkAktifCalisma+0xf6a>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))&& ((kapi1prudhome==1)||(kapi2prudhome==1)))
 8004e2a:	4b50      	ldr	r3, [pc, #320]	@ (8004f6c <checkAktifCalisma+0x1084>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d103      	bne.n	8004e3a <checkAktifCalisma+0xf52>
 8004e32:	4b4f      	ldr	r3, [pc, #316]	@ (8004f70 <checkAktifCalisma+0x1088>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00b      	beq.n	8004e52 <checkAktifCalisma+0xf6a>
 8004e3a:	4b54      	ldr	r3, [pc, #336]	@ (8004f8c <checkAktifCalisma+0x10a4>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d103      	bne.n	8004e4a <checkAktifCalisma+0xf62>
 8004e42:	4b53      	ldr	r3, [pc, #332]	@ (8004f90 <checkAktifCalisma+0x10a8>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d003      	beq.n	8004e52 <checkAktifCalisma+0xf6a>
						 {

						kapiTablaprudhome=1;
 8004e4a:	4b52      	ldr	r3, [pc, #328]	@ (8004f94 <checkAktifCalisma+0x10ac>)
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	701a      	strb	r2, [r3, #0]
 8004e50:	e002      	b.n	8004e58 <checkAktifCalisma+0xf70>

						 }
				else {
					kapiTablaprudhome=0;
 8004e52:	4b50      	ldr	r3, [pc, #320]	@ (8004f94 <checkAktifCalisma+0x10ac>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	701a      	strb	r2, [r3, #0]
				}


				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004e58:	4b4a      	ldr	r3, [pc, #296]	@ (8004f84 <checkAktifCalisma+0x109c>)
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d148      	bne.n	8004ef2 <checkAktifCalisma+0x100a>
 8004e60:	4b49      	ldr	r3, [pc, #292]	@ (8004f88 <checkAktifCalisma+0x10a0>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d003      	beq.n	8004e70 <checkAktifCalisma+0xf88>
 8004e68:	4b47      	ldr	r3, [pc, #284]	@ (8004f88 <checkAktifCalisma+0x10a0>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b03      	cmp	r3, #3
 8004e6e:	d140      	bne.n	8004ef2 <checkAktifCalisma+0x100a>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004e70:	4b3e      	ldr	r3, [pc, #248]	@ (8004f6c <checkAktifCalisma+0x1084>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d103      	bne.n	8004e80 <checkAktifCalisma+0xf98>
 8004e78:	4b3d      	ldr	r3, [pc, #244]	@ (8004f70 <checkAktifCalisma+0x1088>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d038      	beq.n	8004ef2 <checkAktifCalisma+0x100a>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8004e80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004e84:	4837      	ldr	r0, [pc, #220]	@ (8004f64 <checkAktifCalisma+0x107c>)
 8004e86:	f004 ffeb 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01c      	beq.n	8004eca <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8004e90:	2180      	movs	r1, #128	@ 0x80
 8004e92:	4834      	ldr	r0, [pc, #208]	@ (8004f64 <checkAktifCalisma+0x107c>)
 8004e94:	f004 ffe4 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <checkAktifCalisma+0xfc4>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8004e9e:	2104      	movs	r1, #4
 8004ea0:	4830      	ldr	r0, [pc, #192]	@ (8004f64 <checkAktifCalisma+0x107c>)
 8004ea2:	f004 ffdd 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d00e      	beq.n	8004eca <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8004eac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004eb0:	482c      	ldr	r0, [pc, #176]	@ (8004f64 <checkAktifCalisma+0x107c>)
 8004eb2:	f004 ffd5 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d10a      	bne.n	8004ed2 <checkAktifCalisma+0xfea>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8004ebc:	2102      	movs	r1, #2
 8004ebe:	4829      	ldr	r0, [pc, #164]	@ (8004f64 <checkAktifCalisma+0x107c>)
 8004ec0:	f004 ffce 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d103      	bne.n	8004ed2 <checkAktifCalisma+0xfea>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8004eca:	4b2a      	ldr	r3, [pc, #168]	@ (8004f74 <checkAktifCalisma+0x108c>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d007      	beq.n	8004ee2 <checkAktifCalisma+0xffa>
 8004ed2:	4b2a      	ldr	r3, [pc, #168]	@ (8004f7c <checkAktifCalisma+0x1094>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d103      	bne.n	8004ee2 <checkAktifCalisma+0xffa>
 8004eda:	4b29      	ldr	r3, [pc, #164]	@ (8004f80 <checkAktifCalisma+0x1098>)
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d007      	beq.n	8004ef2 <checkAktifCalisma+0x100a>
						&&(makineStop==1)) {
 8004ee2:	4b2d      	ldr	r3, [pc, #180]	@ (8004f98 <checkAktifCalisma+0x10b0>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <checkAktifCalisma+0x100a>

					kapiTablabutonkontrol=1;
 8004eea:	4b2c      	ldr	r3, [pc, #176]	@ (8004f9c <checkAktifCalisma+0x10b4>)
 8004eec:	2201      	movs	r2, #1
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	e002      	b.n	8004ef8 <checkAktifCalisma+0x1010>
				} else {
					kapiTablabutonkontrol=0;
 8004ef2:	4b2a      	ldr	r3, [pc, #168]	@ (8004f9c <checkAktifCalisma+0x10b4>)
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004ef8:	4b22      	ldr	r3, [pc, #136]	@ (8004f84 <checkAktifCalisma+0x109c>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d117      	bne.n	8004f30 <checkAktifCalisma+0x1048>
 8004f00:	4b21      	ldr	r3, [pc, #132]	@ (8004f88 <checkAktifCalisma+0x10a0>)
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d003      	beq.n	8004f10 <checkAktifCalisma+0x1028>
 8004f08:	4b1f      	ldr	r3, [pc, #124]	@ (8004f88 <checkAktifCalisma+0x10a0>)
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	2b03      	cmp	r3, #3
 8004f0e:	d10f      	bne.n	8004f30 <checkAktifCalisma+0x1048>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004f10:	4b16      	ldr	r3, [pc, #88]	@ (8004f6c <checkAktifCalisma+0x1084>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d103      	bne.n	8004f20 <checkAktifCalisma+0x1038>
 8004f18:	4b15      	ldr	r3, [pc, #84]	@ (8004f70 <checkAktifCalisma+0x1088>)
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d007      	beq.n	8004f30 <checkAktifCalisma+0x1048>
						&&(makineStop==1)) {
 8004f20:	4b1d      	ldr	r3, [pc, #116]	@ (8004f98 <checkAktifCalisma+0x10b0>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d003      	beq.n	8004f30 <checkAktifCalisma+0x1048>

					kapiTablapizzato=1;
 8004f28:	4b1d      	ldr	r3, [pc, #116]	@ (8004fa0 <checkAktifCalisma+0x10b8>)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	e002      	b.n	8004f36 <checkAktifCalisma+0x104e>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 8004f30:	4b1b      	ldr	r3, [pc, #108]	@ (8004fa0 <checkAktifCalisma+0x10b8>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8004f36:	4b19      	ldr	r3, [pc, #100]	@ (8004f9c <checkAktifCalisma+0x10b4>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d107      	bne.n	8004f4e <checkAktifCalisma+0x1066>
 8004f3e:	4b15      	ldr	r3, [pc, #84]	@ (8004f94 <checkAktifCalisma+0x10ac>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d103      	bne.n	8004f4e <checkAktifCalisma+0x1066>
 8004f46:	4b16      	ldr	r3, [pc, #88]	@ (8004fa0 <checkAktifCalisma+0x10b8>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d02a      	beq.n	8004fa4 <checkAktifCalisma+0x10bc>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8004f4e:	2201      	movs	r2, #1
 8004f50:	2120      	movs	r1, #32
 8004f52:	4802      	ldr	r0, [pc, #8]	@ (8004f5c <checkAktifCalisma+0x1074>)
 8004f54:	f004 ff9b 	bl	8009e8e <HAL_GPIO_WritePin>
 8004f58:	e029      	b.n	8004fae <checkAktifCalisma+0x10c6>
 8004f5a:	bf00      	nop
 8004f5c:	40010800 	.word	0x40010800
 8004f60:	20001079 	.word	0x20001079
 8004f64:	40011000 	.word	0x40011000
 8004f68:	20001072 	.word	0x20001072
 8004f6c:	200010b8 	.word	0x200010b8
 8004f70:	200010b9 	.word	0x200010b9
 8004f74:	20001078 	.word	0x20001078
 8004f78:	40010c00 	.word	0x40010c00
 8004f7c:	200010c8 	.word	0x200010c8
 8004f80:	200010c9 	.word	0x200010c9
 8004f84:	20001077 	.word	0x20001077
 8004f88:	20001074 	.word	0x20001074
 8004f8c:	200010af 	.word	0x200010af
 8004f90:	200010b2 	.word	0x200010b2
 8004f94:	200010b5 	.word	0x200010b5
 8004f98:	200010ae 	.word	0x200010ae
 8004f9c:	200010b6 	.word	0x200010b6
 8004fa0:	200010b7 	.word	0x200010b7
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2120      	movs	r1, #32
 8004fa8:	4887      	ldr	r0, [pc, #540]	@ (80051c8 <checkAktifCalisma+0x12e0>)
 8004faa:	f004 ff70 	bl	8009e8e <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8004fae:	4b87      	ldr	r3, [pc, #540]	@ (80051cc <checkAktifCalisma+0x12e4>)
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00e      	beq.n	8004fd4 <checkAktifCalisma+0x10ec>
 8004fb6:	2102      	movs	r1, #2
 8004fb8:	4885      	ldr	r0, [pc, #532]	@ (80051d0 <checkAktifCalisma+0x12e8>)
 8004fba:	f004 ff51 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d107      	bne.n	8004fd4 <checkAktifCalisma+0x10ec>
 8004fc4:	4b83      	ldr	r3, [pc, #524]	@ (80051d4 <checkAktifCalisma+0x12ec>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d103      	bne.n	8004fd4 <checkAktifCalisma+0x10ec>
 8004fcc:	4b82      	ldr	r3, [pc, #520]	@ (80051d8 <checkAktifCalisma+0x12f0>)
 8004fce:	781b      	ldrb	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d112      	bne.n	8004ffa <checkAktifCalisma+0x1112>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8004fd4:	4b81      	ldr	r3, [pc, #516]	@ (80051dc <checkAktifCalisma+0x12f4>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d032      	beq.n	8005042 <checkAktifCalisma+0x115a>
 8004fdc:	2104      	movs	r1, #4
 8004fde:	487c      	ldr	r0, [pc, #496]	@ (80051d0 <checkAktifCalisma+0x12e8>)
 8004fe0:	f004 ff3e 	bl	8009e60 <HAL_GPIO_ReadPin>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d12b      	bne.n	8005042 <checkAktifCalisma+0x115a>
 8004fea:	4b7a      	ldr	r3, [pc, #488]	@ (80051d4 <checkAktifCalisma+0x12ec>)
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d027      	beq.n	8005042 <checkAktifCalisma+0x115a>
 8004ff2:	4b79      	ldr	r3, [pc, #484]	@ (80051d8 <checkAktifCalisma+0x12f0>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d023      	beq.n	8005042 <checkAktifCalisma+0x115a>



					calismaSayisi++;
 8004ffa:	4b79      	ldr	r3, [pc, #484]	@ (80051e0 <checkAktifCalisma+0x12f8>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	3301      	adds	r3, #1
 8005000:	b2da      	uxtb	r2, r3
 8005002:	4b77      	ldr	r3, [pc, #476]	@ (80051e0 <checkAktifCalisma+0x12f8>)
 8005004:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8005006:	4b76      	ldr	r3, [pc, #472]	@ (80051e0 <checkAktifCalisma+0x12f8>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2bff      	cmp	r3, #255	@ 0xff
 800500c:	d108      	bne.n	8005020 <checkAktifCalisma+0x1138>
						calismaSayisi = 0;
 800500e:	4b74      	ldr	r3, [pc, #464]	@ (80051e0 <checkAktifCalisma+0x12f8>)
 8005010:	2200      	movs	r2, #0
 8005012:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 8005014:	4b73      	ldr	r3, [pc, #460]	@ (80051e4 <checkAktifCalisma+0x12fc>)
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	3301      	adds	r3, #1
 800501a:	b2da      	uxtb	r2, r3
 800501c:	4b71      	ldr	r3, [pc, #452]	@ (80051e4 <checkAktifCalisma+0x12fc>)
 800501e:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 8005020:	4b6f      	ldr	r3, [pc, #444]	@ (80051e0 <checkAktifCalisma+0x12f8>)
 8005022:	781a      	ldrb	r2, [r3, #0]
 8005024:	4b70      	ldr	r3, [pc, #448]	@ (80051e8 <checkAktifCalisma+0x1300>)
 8005026:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 8005028:	4b6e      	ldr	r3, [pc, #440]	@ (80051e4 <checkAktifCalisma+0x12fc>)
 800502a:	781a      	ldrb	r2, [r3, #0]
 800502c:	4b6e      	ldr	r3, [pc, #440]	@ (80051e8 <checkAktifCalisma+0x1300>)
 800502e:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 8005030:	4b6e      	ldr	r3, [pc, #440]	@ (80051ec <checkAktifCalisma+0x1304>)
 8005032:	2201      	movs	r2, #1
 8005034:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 8005036:	4b65      	ldr	r3, [pc, #404]	@ (80051cc <checkAktifCalisma+0x12e4>)
 8005038:	2200      	movs	r2, #0
 800503a:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 800503c:	4b67      	ldr	r3, [pc, #412]	@ (80051dc <checkAktifCalisma+0x12f4>)
 800503e:	2200      	movs	r2, #0
 8005040:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005042:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005046:	486a      	ldr	r0, [pc, #424]	@ (80051f0 <checkAktifCalisma+0x1308>)
 8005048:	f004 ff0a 	bl	8009e60 <HAL_GPIO_ReadPin>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d016      	beq.n	8005080 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005052:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005056:	4866      	ldr	r0, [pc, #408]	@ (80051f0 <checkAktifCalisma+0x1308>)
 8005058:	f004 ff02 	bl	8009e60 <HAL_GPIO_ReadPin>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00e      	beq.n	8005080 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005062:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005066:	4862      	ldr	r0, [pc, #392]	@ (80051f0 <checkAktifCalisma+0x1308>)
 8005068:	f004 fefa 	bl	8009e60 <HAL_GPIO_ReadPin>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d006      	beq.n	8005080 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005072:	2140      	movs	r1, #64	@ 0x40
 8005074:	4856      	ldr	r0, [pc, #344]	@ (80051d0 <checkAktifCalisma+0x12e8>)
 8005076:	f004 fef3 	bl	8009e60 <HAL_GPIO_ReadPin>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d103      	bne.n	8005088 <checkAktifCalisma+0x11a0>

					startBasili=1;
 8005080:	4b5c      	ldr	r3, [pc, #368]	@ (80051f4 <checkAktifCalisma+0x130c>)
 8005082:	2201      	movs	r2, #1
 8005084:	701a      	strb	r2, [r3, #0]
 8005086:	e002      	b.n	800508e <checkAktifCalisma+0x11a6>
				} else {
					startBasili=0;
 8005088:	4b5a      	ldr	r3, [pc, #360]	@ (80051f4 <checkAktifCalisma+0x130c>)
 800508a:	2200      	movs	r2, #0
 800508c:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 800508e:	4b59      	ldr	r3, [pc, #356]	@ (80051f4 <checkAktifCalisma+0x130c>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d014      	beq.n	80050c0 <checkAktifCalisma+0x11d8>
 8005096:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800509a:	4855      	ldr	r0, [pc, #340]	@ (80051f0 <checkAktifCalisma+0x1308>)
 800509c:	f004 fee0 	bl	8009e60 <HAL_GPIO_ReadPin>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d10c      	bne.n	80050c0 <checkAktifCalisma+0x11d8>

					hataVar=1;
 80050a6:	4b54      	ldr	r3, [pc, #336]	@ (80051f8 <checkAktifCalisma+0x1310>)
 80050a8:	2201      	movs	r2, #1
 80050aa:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 80050ac:	2001      	movs	r0, #1
 80050ae:	f7fb fd13 	bl	8000ad8 <hataKoduLcdGoster>
					hata2EEPROM(1);
 80050b2:	2001      	movs	r0, #1
 80050b4:	f7fb fcb8 	bl	8000a28 <hata2EEPROM>
					acilstophatasi=1;
 80050b8:	4b50      	ldr	r3, [pc, #320]	@ (80051fc <checkAktifCalisma+0x1314>)
 80050ba:	2201      	movs	r2, #1
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	e018      	b.n	80050f2 <checkAktifCalisma+0x120a>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80050c0:	4b4e      	ldr	r3, [pc, #312]	@ (80051fc <checkAktifCalisma+0x1314>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d014      	beq.n	80050f2 <checkAktifCalisma+0x120a>
 80050c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80050cc:	4848      	ldr	r0, [pc, #288]	@ (80051f0 <checkAktifCalisma+0x1308>)
 80050ce:	f004 fec7 	bl	8009e60 <HAL_GPIO_ReadPin>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10c      	bne.n	80050f2 <checkAktifCalisma+0x120a>
 80050d8:	4b46      	ldr	r3, [pc, #280]	@ (80051f4 <checkAktifCalisma+0x130c>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	f083 0301 	eor.w	r3, r3, #1
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d005      	beq.n	80050f2 <checkAktifCalisma+0x120a>
					acilstophatasi=0;
 80050e6:	4b45      	ldr	r3, [pc, #276]	@ (80051fc <checkAktifCalisma+0x1314>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 80050ec:	2001      	movs	r0, #1
 80050ee:	f7fe fcf1 	bl	8003ad4 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 80050f2:	4b43      	ldr	r3, [pc, #268]	@ (8005200 <checkAktifCalisma+0x1318>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	f083 0301 	eor.w	r3, r3, #1
 80050fa:	b2db      	uxtb	r3, r3
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d023      	beq.n	8005148 <checkAktifCalisma+0x1260>
 8005100:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005104:	483a      	ldr	r0, [pc, #232]	@ (80051f0 <checkAktifCalisma+0x1308>)
 8005106:	f004 feab 	bl	8009e60 <HAL_GPIO_ReadPin>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <checkAktifCalisma+0x1230>
 8005110:	4b3c      	ldr	r3, [pc, #240]	@ (8005204 <checkAktifCalisma+0x131c>)
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d017      	beq.n	8005148 <checkAktifCalisma+0x1260>
 8005118:	4b3b      	ldr	r3, [pc, #236]	@ (8005208 <checkAktifCalisma+0x1320>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d113      	bne.n	8005148 <checkAktifCalisma+0x1260>
 8005120:	4b3a      	ldr	r3, [pc, #232]	@ (800520c <checkAktifCalisma+0x1324>)
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	f083 0301 	eor.w	r3, r3, #1
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00c      	beq.n	8005148 <checkAktifCalisma+0x1260>
					hataVar=1;
 800512e:	4b32      	ldr	r3, [pc, #200]	@ (80051f8 <checkAktifCalisma+0x1310>)
 8005130:	2201      	movs	r2, #1
 8005132:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 8005134:	2002      	movs	r0, #2
 8005136:	f7fb fccf 	bl	8000ad8 <hataKoduLcdGoster>
					hata2EEPROM(2);
 800513a:	2002      	movs	r0, #2
 800513c:	f7fb fc74 	bl	8000a28 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 8005140:	4b32      	ldr	r3, [pc, #200]	@ (800520c <checkAktifCalisma+0x1324>)
 8005142:	2201      	movs	r2, #1
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	e017      	b.n	8005178 <checkAktifCalisma+0x1290>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005148:	4b30      	ldr	r3, [pc, #192]	@ (800520c <checkAktifCalisma+0x1324>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d013      	beq.n	8005178 <checkAktifCalisma+0x1290>
 8005150:	4b2b      	ldr	r3, [pc, #172]	@ (8005200 <checkAktifCalisma+0x1318>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00f      	beq.n	8005178 <checkAktifCalisma+0x1290>
 8005158:	4b2d      	ldr	r3, [pc, #180]	@ (8005210 <checkAktifCalisma+0x1328>)
 800515a:	781b      	ldrb	r3, [r3, #0]
 800515c:	f083 0301 	eor.w	r3, r3, #1
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d008      	beq.n	8005178 <checkAktifCalisma+0x1290>
					emniyetCercevesihatasi=0;
 8005166:	4b29      	ldr	r3, [pc, #164]	@ (800520c <checkAktifCalisma+0x1324>)
 8005168:	2200      	movs	r2, #0
 800516a:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 800516c:	4b25      	ldr	r3, [pc, #148]	@ (8005204 <checkAktifCalisma+0x131c>)
 800516e:	2200      	movs	r2, #0
 8005170:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 8005172:	2002      	movs	r0, #2
 8005174:	f7fe fcae 	bl	8003ad4 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 8005178:	4b26      	ldr	r3, [pc, #152]	@ (8005214 <checkAktifCalisma+0x132c>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d151      	bne.n	8005224 <checkAktifCalisma+0x133c>
 8005180:	4b25      	ldr	r3, [pc, #148]	@ (8005218 <checkAktifCalisma+0x1330>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b01      	cmp	r3, #1
 8005186:	d14d      	bne.n	8005224 <checkAktifCalisma+0x133c>
 8005188:	4b24      	ldr	r3, [pc, #144]	@ (800521c <checkAktifCalisma+0x1334>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d049      	beq.n	8005224 <checkAktifCalisma+0x133c>
 8005190:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005194:	480e      	ldr	r0, [pc, #56]	@ (80051d0 <checkAktifCalisma+0x12e8>)
 8005196:	f004 fe63 	bl	8009e60 <HAL_GPIO_ReadPin>
 800519a:	4603      	mov	r3, r0
 800519c:	2b01      	cmp	r3, #1
 800519e:	d141      	bne.n	8005224 <checkAktifCalisma+0x133c>
 80051a0:	4b1f      	ldr	r3, [pc, #124]	@ (8005220 <checkAktifCalisma+0x1338>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	f083 0301 	eor.w	r3, r3, #1
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d03a      	beq.n	8005224 <checkAktifCalisma+0x133c>
					hataVar=1;
 80051ae:	4b12      	ldr	r3, [pc, #72]	@ (80051f8 <checkAktifCalisma+0x1310>)
 80051b0:	2201      	movs	r2, #1
 80051b2:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 80051b4:	2003      	movs	r0, #3
 80051b6:	f7fb fc8f 	bl	8000ad8 <hataKoduLcdGoster>
					hata2EEPROM(3);
 80051ba:	2003      	movs	r0, #3
 80051bc:	f7fb fc34 	bl	8000a28 <hata2EEPROM>
					basinchatasi=1;
 80051c0:	4b17      	ldr	r3, [pc, #92]	@ (8005220 <checkAktifCalisma+0x1338>)
 80051c2:	2201      	movs	r2, #1
 80051c4:	701a      	strb	r2, [r3, #0]
 80051c6:	e043      	b.n	8005250 <checkAktifCalisma+0x1368>
 80051c8:	40010800 	.word	0x40010800
 80051cc:	200010ac 	.word	0x200010ac
 80051d0:	40011000 	.word	0x40011000
 80051d4:	20001072 	.word	0x20001072
 80051d8:	200010ae 	.word	0x200010ae
 80051dc:	200010ad 	.word	0x200010ad
 80051e0:	20001064 	.word	0x20001064
 80051e4:	20001066 	.word	0x20001066
 80051e8:	20000f9c 	.word	0x20000f9c
 80051ec:	20001099 	.word	0x20001099
 80051f0:	40010c00 	.word	0x40010c00
 80051f4:	200010ba 	.word	0x200010ba
 80051f8:	200010c1 	.word	0x200010c1
 80051fc:	200010bc 	.word	0x200010bc
 8005200:	200010c3 	.word	0x200010c3
 8005204:	200010cd 	.word	0x200010cd
 8005208:	20001070 	.word	0x20001070
 800520c:	200010bd 	.word	0x200010bd
 8005210:	200010a5 	.word	0x200010a5
 8005214:	2000106f 	.word	0x2000106f
 8005218:	20001073 	.word	0x20001073
 800521c:	200010c0 	.word	0x200010c0
 8005220:	200010ca 	.word	0x200010ca
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8005224:	4b85      	ldr	r3, [pc, #532]	@ (800543c <checkAktifCalisma+0x1554>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d011      	beq.n	8005250 <checkAktifCalisma+0x1368>
 800522c:	4b84      	ldr	r3, [pc, #528]	@ (8005440 <checkAktifCalisma+0x1558>)
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d10d      	bne.n	8005250 <checkAktifCalisma+0x1368>
 8005234:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005238:	4882      	ldr	r0, [pc, #520]	@ (8005444 <checkAktifCalisma+0x155c>)
 800523a:	f004 fe11 	bl	8009e60 <HAL_GPIO_ReadPin>
 800523e:	4603      	mov	r3, r0
 8005240:	2b01      	cmp	r3, #1
 8005242:	d105      	bne.n	8005250 <checkAktifCalisma+0x1368>
					basinchatasi=0;
 8005244:	4b7d      	ldr	r3, [pc, #500]	@ (800543c <checkAktifCalisma+0x1554>)
 8005246:	2200      	movs	r2, #0
 8005248:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 800524a:	2003      	movs	r0, #3
 800524c:	f7fe fc42 	bl	8003ad4 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 8005250:	4b7d      	ldr	r3, [pc, #500]	@ (8005448 <checkAktifCalisma+0x1560>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d103      	bne.n	8005260 <checkAktifCalisma+0x1378>
 8005258:	4b7c      	ldr	r3, [pc, #496]	@ (800544c <checkAktifCalisma+0x1564>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d023      	beq.n	80052a8 <checkAktifCalisma+0x13c0>
 8005260:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005264:	487a      	ldr	r0, [pc, #488]	@ (8005450 <checkAktifCalisma+0x1568>)
 8005266:	f004 fdfb 	bl	8009e60 <HAL_GPIO_ReadPin>
 800526a:	4603      	mov	r3, r0
 800526c:	2b01      	cmp	r3, #1
 800526e:	d11b      	bne.n	80052a8 <checkAktifCalisma+0x13c0>
 8005270:	4b78      	ldr	r3, [pc, #480]	@ (8005454 <checkAktifCalisma+0x156c>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d003      	beq.n	8005280 <checkAktifCalisma+0x1398>
 8005278:	4b76      	ldr	r3, [pc, #472]	@ (8005454 <checkAktifCalisma+0x156c>)
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	2b03      	cmp	r3, #3
 800527e:	d113      	bne.n	80052a8 <checkAktifCalisma+0x13c0>
 8005280:	4b75      	ldr	r3, [pc, #468]	@ (8005458 <checkAktifCalisma+0x1570>)
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	f083 0301 	eor.w	r3, r3, #1
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00c      	beq.n	80052a8 <checkAktifCalisma+0x13c0>
					hataVar=1;
 800528e:	4b73      	ldr	r3, [pc, #460]	@ (800545c <checkAktifCalisma+0x1574>)
 8005290:	2201      	movs	r2, #1
 8005292:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8005294:	2004      	movs	r0, #4
 8005296:	f7fb fc1f 	bl	8000ad8 <hataKoduLcdGoster>
					hata2EEPROM(4);
 800529a:	2004      	movs	r0, #4
 800529c:	f7fb fbc4 	bl	8000a28 <hata2EEPROM>
					katkapisivicihatasi=1;
 80052a0:	4b6d      	ldr	r3, [pc, #436]	@ (8005458 <checkAktifCalisma+0x1570>)
 80052a2:	2201      	movs	r2, #1
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	e01f      	b.n	80052e8 <checkAktifCalisma+0x1400>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80052a8:	4b6b      	ldr	r3, [pc, #428]	@ (8005458 <checkAktifCalisma+0x1570>)
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d01b      	beq.n	80052e8 <checkAktifCalisma+0x1400>
 80052b0:	4b6b      	ldr	r3, [pc, #428]	@ (8005460 <checkAktifCalisma+0x1578>)
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d017      	beq.n	80052e8 <checkAktifCalisma+0x1400>
 80052b8:	4b63      	ldr	r3, [pc, #396]	@ (8005448 <checkAktifCalisma+0x1560>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	f083 0301 	eor.w	r3, r3, #1
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d010      	beq.n	80052e8 <checkAktifCalisma+0x1400>
 80052c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80052ca:	4861      	ldr	r0, [pc, #388]	@ (8005450 <checkAktifCalisma+0x1568>)
 80052cc:	f004 fdc8 	bl	8009e60 <HAL_GPIO_ReadPin>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d108      	bne.n	80052e8 <checkAktifCalisma+0x1400>

					katkapisivicihatasi=0;
 80052d6:	4b60      	ldr	r3, [pc, #384]	@ (8005458 <checkAktifCalisma+0x1570>)
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 80052dc:	4b5b      	ldr	r3, [pc, #364]	@ (800544c <checkAktifCalisma+0x1564>)
 80052de:	2200      	movs	r2, #0
 80052e0:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 80052e2:	2004      	movs	r0, #4
 80052e4:	f7fe fbf6 	bl	8003ad4 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 80052e8:	4b57      	ldr	r3, [pc, #348]	@ (8005448 <checkAktifCalisma+0x1560>)
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d103      	bne.n	80052f8 <checkAktifCalisma+0x1410>
 80052f0:	4b5c      	ldr	r3, [pc, #368]	@ (8005464 <checkAktifCalisma+0x157c>)
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d023      	beq.n	8005340 <checkAktifCalisma+0x1458>
 80052f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80052fc:	4854      	ldr	r0, [pc, #336]	@ (8005450 <checkAktifCalisma+0x1568>)
 80052fe:	f004 fdaf 	bl	8009e60 <HAL_GPIO_ReadPin>
 8005302:	4603      	mov	r3, r0
 8005304:	2b01      	cmp	r3, #1
 8005306:	d11b      	bne.n	8005340 <checkAktifCalisma+0x1458>
 8005308:	4b52      	ldr	r3, [pc, #328]	@ (8005454 <checkAktifCalisma+0x156c>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d003      	beq.n	8005318 <checkAktifCalisma+0x1430>
 8005310:	4b50      	ldr	r3, [pc, #320]	@ (8005454 <checkAktifCalisma+0x156c>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b03      	cmp	r3, #3
 8005316:	d113      	bne.n	8005340 <checkAktifCalisma+0x1458>
 8005318:	4b53      	ldr	r3, [pc, #332]	@ (8005468 <checkAktifCalisma+0x1580>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	f083 0301 	eor.w	r3, r3, #1
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00c      	beq.n	8005340 <checkAktifCalisma+0x1458>

					hataVar=1;
 8005326:	4b4d      	ldr	r3, [pc, #308]	@ (800545c <checkAktifCalisma+0x1574>)
 8005328:	2201      	movs	r2, #1
 800532a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 800532c:	2005      	movs	r0, #5
 800532e:	f7fb fbd3 	bl	8000ad8 <hataKoduLcdGoster>
					hata2EEPROM(5);
 8005332:	2005      	movs	r0, #5
 8005334:	f7fb fb78 	bl	8000a28 <hata2EEPROM>
					tablakapisivicihatasi=1;
 8005338:	4b4b      	ldr	r3, [pc, #300]	@ (8005468 <checkAktifCalisma+0x1580>)
 800533a:	2201      	movs	r2, #1
 800533c:	701a      	strb	r2, [r3, #0]
 800533e:	e023      	b.n	8005388 <checkAktifCalisma+0x14a0>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8005340:	4b49      	ldr	r3, [pc, #292]	@ (8005468 <checkAktifCalisma+0x1580>)
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d01f      	beq.n	8005388 <checkAktifCalisma+0x14a0>
 8005348:	4b45      	ldr	r3, [pc, #276]	@ (8005460 <checkAktifCalisma+0x1578>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d01b      	beq.n	8005388 <checkAktifCalisma+0x14a0>
 8005350:	4b3d      	ldr	r3, [pc, #244]	@ (8005448 <checkAktifCalisma+0x1560>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	f083 0301 	eor.w	r3, r3, #1
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d014      	beq.n	8005388 <checkAktifCalisma+0x14a0>
 800535e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005362:	483b      	ldr	r0, [pc, #236]	@ (8005450 <checkAktifCalisma+0x1568>)
 8005364:	f004 fd7c 	bl	8009e60 <HAL_GPIO_ReadPin>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10c      	bne.n	8005388 <checkAktifCalisma+0x14a0>
 800536e:	4b3c      	ldr	r3, [pc, #240]	@ (8005460 <checkAktifCalisma+0x1578>)
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d008      	beq.n	8005388 <checkAktifCalisma+0x14a0>
					tablakapisivicihatasi=0;
 8005376:	4b3c      	ldr	r3, [pc, #240]	@ (8005468 <checkAktifCalisma+0x1580>)
 8005378:	2200      	movs	r2, #0
 800537a:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 800537c:	4b39      	ldr	r3, [pc, #228]	@ (8005464 <checkAktifCalisma+0x157c>)
 800537e:	2200      	movs	r2, #0
 8005380:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 8005382:	2005      	movs	r0, #5
 8005384:	f7fe fba6 	bl	8003ad4 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8005388:	4b38      	ldr	r3, [pc, #224]	@ (800546c <checkAktifCalisma+0x1584>)
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d107      	bne.n	80053a0 <checkAktifCalisma+0x14b8>
 8005390:	4b37      	ldr	r3, [pc, #220]	@ (8005470 <checkAktifCalisma+0x1588>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d103      	bne.n	80053a0 <checkAktifCalisma+0x14b8>
 8005398:	4b36      	ldr	r3, [pc, #216]	@ (8005474 <checkAktifCalisma+0x158c>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01b      	beq.n	80053d8 <checkAktifCalisma+0x14f0>
 80053a0:	4b35      	ldr	r3, [pc, #212]	@ (8005478 <checkAktifCalisma+0x1590>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	f083 0301 	eor.w	r3, r3, #1
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d014      	beq.n	80053d8 <checkAktifCalisma+0x14f0>
				    if(millis-timer4>=makineCalismaTmr) {
 80053ae:	4b33      	ldr	r3, [pc, #204]	@ (800547c <checkAktifCalisma+0x1594>)
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	4b33      	ldr	r3, [pc, #204]	@ (8005480 <checkAktifCalisma+0x1598>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	4a32      	ldr	r2, [pc, #200]	@ (8005484 <checkAktifCalisma+0x159c>)
 80053ba:	7812      	ldrb	r2, [r2, #0]
 80053bc:	4293      	cmp	r3, r2
 80053be:	d30b      	bcc.n	80053d8 <checkAktifCalisma+0x14f0>
					  	hataVar=1;
 80053c0:	4b26      	ldr	r3, [pc, #152]	@ (800545c <checkAktifCalisma+0x1574>)
 80053c2:	2201      	movs	r2, #1
 80053c4:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 80053c6:	2006      	movs	r0, #6
 80053c8:	f7fb fb86 	bl	8000ad8 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 80053cc:	2006      	movs	r0, #6
 80053ce:	f7fb fb2b 	bl	8000a28 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 80053d2:	4b29      	ldr	r3, [pc, #164]	@ (8005478 <checkAktifCalisma+0x1590>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80053d8:	4b27      	ldr	r3, [pc, #156]	@ (8005478 <checkAktifCalisma+0x1590>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d013      	beq.n	8005408 <checkAktifCalisma+0x1520>
 80053e0:	2108      	movs	r1, #8
 80053e2:	481b      	ldr	r0, [pc, #108]	@ (8005450 <checkAktifCalisma+0x1568>)
 80053e4:	f004 fd3c 	bl	8009e60 <HAL_GPIO_ReadPin>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00c      	beq.n	8005408 <checkAktifCalisma+0x1520>
 80053ee:	4b16      	ldr	r3, [pc, #88]	@ (8005448 <checkAktifCalisma+0x1560>)
 80053f0:	781b      	ldrb	r3, [r3, #0]
 80053f2:	f083 0301 	eor.w	r3, r3, #1
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d005      	beq.n	8005408 <checkAktifCalisma+0x1520>
					maksimumcalismahatasi=0;
 80053fc:	4b1e      	ldr	r3, [pc, #120]	@ (8005478 <checkAktifCalisma+0x1590>)
 80053fe:	2200      	movs	r2, #0
 8005400:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8005402:	2006      	movs	r0, #6
 8005404:	f7fe fb66 	bl	8003ad4 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8005408:	4b1f      	ldr	r3, [pc, #124]	@ (8005488 <checkAktifCalisma+0x15a0>)
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d10b      	bne.n	8005428 <checkAktifCalisma+0x1540>
 8005410:	4b17      	ldr	r3, [pc, #92]	@ (8005470 <checkAktifCalisma+0x1588>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d107      	bne.n	8005428 <checkAktifCalisma+0x1540>
 8005418:	4b1c      	ldr	r3, [pc, #112]	@ (800548c <checkAktifCalisma+0x15a4>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d103      	bne.n	8005428 <checkAktifCalisma+0x1540>
 8005420:	4b14      	ldr	r3, [pc, #80]	@ (8005474 <checkAktifCalisma+0x158c>)
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d035      	beq.n	8005494 <checkAktifCalisma+0x15ac>
					makineCalisiyor=0;
 8005428:	4b19      	ldr	r3, [pc, #100]	@ (8005490 <checkAktifCalisma+0x15a8>)
 800542a:	2200      	movs	r2, #0
 800542c:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 800542e:	4b07      	ldr	r3, [pc, #28]	@ (800544c <checkAktifCalisma+0x1564>)
 8005430:	2201      	movs	r2, #1
 8005432:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8005434:	4b0b      	ldr	r3, [pc, #44]	@ (8005464 <checkAktifCalisma+0x157c>)
 8005436:	2201      	movs	r2, #1
 8005438:	701a      	strb	r2, [r3, #0]
 800543a:	e032      	b.n	80054a2 <checkAktifCalisma+0x15ba>
 800543c:	200010ca 	.word	0x200010ca
 8005440:	2000106f 	.word	0x2000106f
 8005444:	40010c00 	.word	0x40010c00
 8005448:	200010ba 	.word	0x200010ba
 800544c:	200010ce 	.word	0x200010ce
 8005450:	40010800 	.word	0x40010800
 8005454:	20001074 	.word	0x20001074
 8005458:	200010cb 	.word	0x200010cb
 800545c:	200010c1 	.word	0x200010c1
 8005460:	200010ae 	.word	0x200010ae
 8005464:	200010cf 	.word	0x200010cf
 8005468:	200010cc 	.word	0x200010cc
 800546c:	200010c0 	.word	0x200010c0
 8005470:	200010a5 	.word	0x200010a5
 8005474:	200010a4 	.word	0x200010a4
 8005478:	200010bb 	.word	0x200010bb
 800547c:	20001044 	.word	0x20001044
 8005480:	20001058 	.word	0x20001058
 8005484:	20001084 	.word	0x20001084
 8005488:	200010a2 	.word	0x200010a2
 800548c:	200010a3 	.word	0x200010a3
 8005490:	200010c2 	.word	0x200010c2
				} else {
					makineCalisiyor=1;
 8005494:	4b3a      	ldr	r3, [pc, #232]	@ (8005580 <checkAktifCalisma+0x1698>)
 8005496:	2201      	movs	r2, #1
 8005498:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 800549a:	4b3a      	ldr	r3, [pc, #232]	@ (8005584 <checkAktifCalisma+0x169c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a3a      	ldr	r2, [pc, #232]	@ (8005588 <checkAktifCalisma+0x16a0>)
 80054a0:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80054a2:	4b3a      	ldr	r3, [pc, #232]	@ (800558c <checkAktifCalisma+0x16a4>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d02f      	beq.n	800550a <checkAktifCalisma+0x1622>
 80054aa:	4b39      	ldr	r3, [pc, #228]	@ (8005590 <checkAktifCalisma+0x16a8>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	f083 0301 	eor.w	r3, r3, #1
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d028      	beq.n	800550a <checkAktifCalisma+0x1622>
 80054b8:	4b36      	ldr	r3, [pc, #216]	@ (8005594 <checkAktifCalisma+0x16ac>)
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	f083 0301 	eor.w	r3, r3, #1
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d021      	beq.n	800550a <checkAktifCalisma+0x1622>
 80054c6:	4b34      	ldr	r3, [pc, #208]	@ (8005598 <checkAktifCalisma+0x16b0>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	f083 0301 	eor.w	r3, r3, #1
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d01a      	beq.n	800550a <checkAktifCalisma+0x1622>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80054d4:	4b31      	ldr	r3, [pc, #196]	@ (800559c <checkAktifCalisma+0x16b4>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	f083 0301 	eor.w	r3, r3, #1
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d013      	beq.n	800550a <checkAktifCalisma+0x1622>
 80054e2:	4b2f      	ldr	r3, [pc, #188]	@ (80055a0 <checkAktifCalisma+0x16b8>)
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	f083 0301 	eor.w	r3, r3, #1
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00c      	beq.n	800550a <checkAktifCalisma+0x1622>
 80054f0:	4b2c      	ldr	r3, [pc, #176]	@ (80055a4 <checkAktifCalisma+0x16bc>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	f083 0301 	eor.w	r3, r3, #1
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d005      	beq.n	800550a <checkAktifCalisma+0x1622>

					hataVar=0;
 80054fe:	4b23      	ldr	r3, [pc, #140]	@ (800558c <checkAktifCalisma+0x16a4>)
 8005500:	2200      	movs	r2, #0
 8005502:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8005504:	2007      	movs	r0, #7
 8005506:	f7fe fae5 	bl	8003ad4 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 800550a:	4b20      	ldr	r3, [pc, #128]	@ (800558c <checkAktifCalisma+0x16a4>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d02a      	beq.n	8005568 <checkAktifCalisma+0x1680>
 8005512:	4b1f      	ldr	r3, [pc, #124]	@ (8005590 <checkAktifCalisma+0x16a8>)
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	f083 0301 	eor.w	r3, r3, #1
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	d023      	beq.n	8005568 <checkAktifCalisma+0x1680>
 8005520:	4b1c      	ldr	r3, [pc, #112]	@ (8005594 <checkAktifCalisma+0x16ac>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01f      	beq.n	8005568 <checkAktifCalisma+0x1680>
 8005528:	4b1b      	ldr	r3, [pc, #108]	@ (8005598 <checkAktifCalisma+0x16b0>)
 800552a:	781b      	ldrb	r3, [r3, #0]
 800552c:	f083 0301 	eor.w	r3, r3, #1
 8005530:	b2db      	uxtb	r3, r3
 8005532:	2b00      	cmp	r3, #0
 8005534:	d018      	beq.n	8005568 <checkAktifCalisma+0x1680>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8005536:	4b19      	ldr	r3, [pc, #100]	@ (800559c <checkAktifCalisma+0x16b4>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	f083 0301 	eor.w	r3, r3, #1
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b00      	cmp	r3, #0
 8005542:	d011      	beq.n	8005568 <checkAktifCalisma+0x1680>
 8005544:	4b16      	ldr	r3, [pc, #88]	@ (80055a0 <checkAktifCalisma+0x16b8>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	f083 0301 	eor.w	r3, r3, #1
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <checkAktifCalisma+0x1680>
 8005552:	4b14      	ldr	r3, [pc, #80]	@ (80055a4 <checkAktifCalisma+0x16bc>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	f083 0301 	eor.w	r3, r3, #1
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <checkAktifCalisma+0x1680>
				{
					EmnCerHataMakYukariCalis=1;
 8005560:	4b11      	ldr	r3, [pc, #68]	@ (80055a8 <checkAktifCalisma+0x16c0>)
 8005562:	2201      	movs	r2, #1
 8005564:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 8005566:	e009      	b.n	800557c <checkAktifCalisma+0x1694>
				else if(emniyetCercevesihatasi==0)
 8005568:	4b0a      	ldr	r3, [pc, #40]	@ (8005594 <checkAktifCalisma+0x16ac>)
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	f083 0301 	eor.w	r3, r3, #1
 8005570:	b2db      	uxtb	r3, r3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <checkAktifCalisma+0x1694>
					EmnCerHataMakYukariCalis=0;
 8005576:	4b0c      	ldr	r3, [pc, #48]	@ (80055a8 <checkAktifCalisma+0x16c0>)
 8005578:	2200      	movs	r2, #0
 800557a:	701a      	strb	r2, [r3, #0]
}
 800557c:	bf00      	nop
 800557e:	bd80      	pop	{r7, pc}
 8005580:	200010c2 	.word	0x200010c2
 8005584:	20001044 	.word	0x20001044
 8005588:	20001058 	.word	0x20001058
 800558c:	200010c1 	.word	0x200010c1
 8005590:	200010bc 	.word	0x200010bc
 8005594:	200010bd 	.word	0x200010bd
 8005598:	200010ca 	.word	0x200010ca
 800559c:	200010cb 	.word	0x200010cb
 80055a0:	200010cc 	.word	0x200010cc
 80055a4:	200010bb 	.word	0x200010bb
 80055a8:	200010d0 	.word	0x200010d0

080055ac <checkDemoModCalisma>:

void checkDemoModCalisma() {
 80055ac:	b580      	push	{r7, lr}
 80055ae:	af00      	add	r7, sp, #0
			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 80055b0:	4b8b      	ldr	r3, [pc, #556]	@ (80057e0 <checkDemoModCalisma+0x234>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	f040 81c4 	bne.w	8005942 <checkDemoModCalisma+0x396>
 80055ba:	4b8a      	ldr	r3, [pc, #552]	@ (80057e4 <checkDemoModCalisma+0x238>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 81bf 	beq.w	8005942 <checkDemoModCalisma+0x396>
 80055c4:	4b88      	ldr	r3, [pc, #544]	@ (80057e8 <checkDemoModCalisma+0x23c>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f040 81ba 	bne.w	8005942 <checkDemoModCalisma+0x396>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80055ce:	2102      	movs	r1, #2
 80055d0:	4886      	ldr	r0, [pc, #536]	@ (80057ec <checkDemoModCalisma+0x240>)
 80055d2:	f004 fc45 	bl	8009e60 <HAL_GPIO_ReadPin>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d11d      	bne.n	8005618 <checkDemoModCalisma+0x6c>
						&& (demoAsagiCalis==0)
 80055dc:	4b84      	ldr	r3, [pc, #528]	@ (80057f0 <checkDemoModCalisma+0x244>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	f083 0301 	eor.w	r3, r3, #1
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d016      	beq.n	8005618 <checkDemoModCalisma+0x6c>
						&& (demoDevYukari==0)
 80055ea:	4b82      	ldr	r3, [pc, #520]	@ (80057f4 <checkDemoModCalisma+0x248>)
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	f083 0301 	eor.w	r3, r3, #1
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00f      	beq.n	8005618 <checkDemoModCalisma+0x6c>
						&& (demoDevAsagi==0)) {
 80055f8:	4b7f      	ldr	r3, [pc, #508]	@ (80057f8 <checkDemoModCalisma+0x24c>)
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	f083 0301 	eor.w	r3, r3, #1
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d008      	beq.n	8005618 <checkDemoModCalisma+0x6c>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005606:	2201      	movs	r2, #1
 8005608:	2104      	movs	r1, #4
 800560a:	487c      	ldr	r0, [pc, #496]	@ (80057fc <checkDemoModCalisma+0x250>)
 800560c:	f004 fc3f 	bl	8009e8e <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8005610:	4b7b      	ldr	r3, [pc, #492]	@ (8005800 <checkDemoModCalisma+0x254>)
 8005612:	2201      	movs	r2, #1
 8005614:	701a      	strb	r2, [r3, #0]
 8005616:	e00e      	b.n	8005636 <checkDemoModCalisma+0x8a>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005618:	2102      	movs	r1, #2
 800561a:	4874      	ldr	r0, [pc, #464]	@ (80057ec <checkDemoModCalisma+0x240>)
 800561c:	f004 fc20 	bl	8009e60 <HAL_GPIO_ReadPin>
 8005620:	4603      	mov	r3, r0
 8005622:	2b01      	cmp	r3, #1
 8005624:	d107      	bne.n	8005636 <checkDemoModCalisma+0x8a>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005626:	2200      	movs	r2, #0
 8005628:	2104      	movs	r1, #4
 800562a:	4874      	ldr	r0, [pc, #464]	@ (80057fc <checkDemoModCalisma+0x250>)
 800562c:	f004 fc2f 	bl	8009e8e <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8005630:	4b73      	ldr	r3, [pc, #460]	@ (8005800 <checkDemoModCalisma+0x254>)
 8005632:	2200      	movs	r2, #0
 8005634:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8005636:	4b72      	ldr	r3, [pc, #456]	@ (8005800 <checkDemoModCalisma+0x254>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10b      	bne.n	8005656 <checkDemoModCalisma+0xaa>
 800563e:	4b6d      	ldr	r3, [pc, #436]	@ (80057f4 <checkDemoModCalisma+0x248>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d107      	bne.n	8005656 <checkDemoModCalisma+0xaa>
 8005646:	4b6c      	ldr	r3, [pc, #432]	@ (80057f8 <checkDemoModCalisma+0x24c>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d103      	bne.n	8005656 <checkDemoModCalisma+0xaa>
 800564e:	4b68      	ldr	r3, [pc, #416]	@ (80057f0 <checkDemoModCalisma+0x244>)
 8005650:	781b      	ldrb	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d00c      	beq.n	8005670 <checkDemoModCalisma+0xc4>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005656:	2201      	movs	r2, #1
 8005658:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800565c:	4867      	ldr	r0, [pc, #412]	@ (80057fc <checkDemoModCalisma+0x250>)
 800565e:	f004 fc16 	bl	8009e8e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005662:	2201      	movs	r2, #1
 8005664:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005668:	4864      	ldr	r0, [pc, #400]	@ (80057fc <checkDemoModCalisma+0x250>)
 800566a:	f004 fc10 	bl	8009e8e <HAL_GPIO_WritePin>
 800566e:	e00b      	b.n	8005688 <checkDemoModCalisma+0xdc>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005670:	2200      	movs	r2, #0
 8005672:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005676:	4861      	ldr	r0, [pc, #388]	@ (80057fc <checkDemoModCalisma+0x250>)
 8005678:	f004 fc09 	bl	8009e8e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800567c:	2200      	movs	r2, #0
 800567e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005682:	485e      	ldr	r0, [pc, #376]	@ (80057fc <checkDemoModCalisma+0x250>)
 8005684:	f004 fc03 	bl	8009e8e <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005688:	2102      	movs	r1, #2
 800568a:	4858      	ldr	r0, [pc, #352]	@ (80057ec <checkDemoModCalisma+0x240>)
 800568c:	f004 fbe8 	bl	8009e60 <HAL_GPIO_ReadPin>
 8005690:	4603      	mov	r3, r0
 8005692:	2b01      	cmp	r3, #1
 8005694:	d10d      	bne.n	80056b2 <checkDemoModCalisma+0x106>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005696:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800569a:	4854      	ldr	r0, [pc, #336]	@ (80057ec <checkDemoModCalisma+0x240>)
 800569c:	f004 fbe0 	bl	8009e60 <HAL_GPIO_ReadPin>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d105      	bne.n	80056b2 <checkDemoModCalisma+0x106>
						&& (demoYukariCalis==0)
 80056a6:	4b56      	ldr	r3, [pc, #344]	@ (8005800 <checkDemoModCalisma+0x254>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	f083 0301 	eor.w	r3, r3, #1
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80056b2:	2102      	movs	r1, #2
 80056b4:	484d      	ldr	r0, [pc, #308]	@ (80057ec <checkDemoModCalisma+0x240>)
 80056b6:	f004 fbd3 	bl	8009e60 <HAL_GPIO_ReadPin>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d125      	bne.n	800570c <checkDemoModCalisma+0x160>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 80056c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80056c4:	4849      	ldr	r0, [pc, #292]	@ (80057ec <checkDemoModCalisma+0x240>)
 80056c6:	f004 fbcb 	bl	8009e60 <HAL_GPIO_ReadPin>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d11d      	bne.n	800570c <checkDemoModCalisma+0x160>
						&&(demoYukariCalis==0)
 80056d0:	4b4b      	ldr	r3, [pc, #300]	@ (8005800 <checkDemoModCalisma+0x254>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	f083 0301 	eor.w	r3, r3, #1
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d016      	beq.n	800570c <checkDemoModCalisma+0x160>
						&&(demoAsagiCalis==0)
 80056de:	4b44      	ldr	r3, [pc, #272]	@ (80057f0 <checkDemoModCalisma+0x244>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	f083 0301 	eor.w	r3, r3, #1
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d00f      	beq.n	800570c <checkDemoModCalisma+0x160>
						&& (demoDevAsagi==0)) {
 80056ec:	4b42      	ldr	r3, [pc, #264]	@ (80057f8 <checkDemoModCalisma+0x24c>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	f083 0301 	eor.w	r3, r3, #1
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d008      	beq.n	800570c <checkDemoModCalisma+0x160>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80056fa:	2201      	movs	r2, #1
 80056fc:	2120      	movs	r1, #32
 80056fe:	483b      	ldr	r0, [pc, #236]	@ (80057ec <checkDemoModCalisma+0x240>)
 8005700:	f004 fbc5 	bl	8009e8e <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8005704:	4b3b      	ldr	r3, [pc, #236]	@ (80057f4 <checkDemoModCalisma+0x248>)
 8005706:	2201      	movs	r2, #1
 8005708:	701a      	strb	r2, [r3, #0]
 800570a:	e007      	b.n	800571c <checkDemoModCalisma+0x170>
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800570c:	2200      	movs	r2, #0
 800570e:	2120      	movs	r1, #32
 8005710:	4836      	ldr	r0, [pc, #216]	@ (80057ec <checkDemoModCalisma+0x240>)
 8005712:	f004 fbbc 	bl	8009e8e <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8005716:	4b37      	ldr	r3, [pc, #220]	@ (80057f4 <checkDemoModCalisma+0x248>)
 8005718:	2200      	movs	r2, #0
 800571a:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800571c:	2102      	movs	r1, #2
 800571e:	4833      	ldr	r0, [pc, #204]	@ (80057ec <checkDemoModCalisma+0x240>)
 8005720:	f004 fb9e 	bl	8009e60 <HAL_GPIO_ReadPin>
 8005724:	4603      	mov	r3, r0
 8005726:	2b01      	cmp	r3, #1
 8005728:	d125      	bne.n	8005776 <checkDemoModCalisma+0x1ca>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 800572a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800572e:	482f      	ldr	r0, [pc, #188]	@ (80057ec <checkDemoModCalisma+0x240>)
 8005730:	f004 fb96 	bl	8009e60 <HAL_GPIO_ReadPin>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d11d      	bne.n	8005776 <checkDemoModCalisma+0x1ca>
						&&(demoYukariCalis==0)
 800573a:	4b31      	ldr	r3, [pc, #196]	@ (8005800 <checkDemoModCalisma+0x254>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	f083 0301 	eor.w	r3, r3, #1
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d016      	beq.n	8005776 <checkDemoModCalisma+0x1ca>
						&&(demoDevYukari==0)
 8005748:	4b2a      	ldr	r3, [pc, #168]	@ (80057f4 <checkDemoModCalisma+0x248>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	f083 0301 	eor.w	r3, r3, #1
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00f      	beq.n	8005776 <checkDemoModCalisma+0x1ca>
						&& (demoAsagiCalis==0)) {
 8005756:	4b26      	ldr	r3, [pc, #152]	@ (80057f0 <checkDemoModCalisma+0x244>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	f083 0301 	eor.w	r3, r3, #1
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d008      	beq.n	8005776 <checkDemoModCalisma+0x1ca>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005764:	2201      	movs	r2, #1
 8005766:	2110      	movs	r1, #16
 8005768:	4820      	ldr	r0, [pc, #128]	@ (80057ec <checkDemoModCalisma+0x240>)
 800576a:	f004 fb90 	bl	8009e8e <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 800576e:	4b22      	ldr	r3, [pc, #136]	@ (80057f8 <checkDemoModCalisma+0x24c>)
 8005770:	2201      	movs	r2, #1
 8005772:	701a      	strb	r2, [r3, #0]
 8005774:	e007      	b.n	8005786 <checkDemoModCalisma+0x1da>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005776:	2200      	movs	r2, #0
 8005778:	2110      	movs	r1, #16
 800577a:	481c      	ldr	r0, [pc, #112]	@ (80057ec <checkDemoModCalisma+0x240>)
 800577c:	f004 fb87 	bl	8009e8e <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8005780:	4b1d      	ldr	r3, [pc, #116]	@ (80057f8 <checkDemoModCalisma+0x24c>)
 8005782:	2200      	movs	r2, #0
 8005784:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005786:	2104      	movs	r1, #4
 8005788:	4818      	ldr	r0, [pc, #96]	@ (80057ec <checkDemoModCalisma+0x240>)
 800578a:	f004 fb69 	bl	8009e60 <HAL_GPIO_ReadPin>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d139      	bne.n	8005808 <checkDemoModCalisma+0x25c>
						&& (demoYukariCalis==0)
 8005794:	4b1a      	ldr	r3, [pc, #104]	@ (8005800 <checkDemoModCalisma+0x254>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	f083 0301 	eor.w	r3, r3, #1
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d032      	beq.n	8005808 <checkDemoModCalisma+0x25c>
						&& (demoDevAsagi==0)
 80057a2:	4b15      	ldr	r3, [pc, #84]	@ (80057f8 <checkDemoModCalisma+0x24c>)
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	f083 0301 	eor.w	r3, r3, #1
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d02b      	beq.n	8005808 <checkDemoModCalisma+0x25c>
						&& (demoDevYukari==0)) {
 80057b0:	4b10      	ldr	r3, [pc, #64]	@ (80057f4 <checkDemoModCalisma+0x248>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	f083 0301 	eor.w	r3, r3, #1
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d024      	beq.n	8005808 <checkDemoModCalisma+0x25c>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80057be:	2201      	movs	r2, #1
 80057c0:	2102      	movs	r1, #2
 80057c2:	480e      	ldr	r0, [pc, #56]	@ (80057fc <checkDemoModCalisma+0x250>)
 80057c4:	f004 fb63 	bl	8009e8e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80057c8:	2201      	movs	r2, #1
 80057ca:	2101      	movs	r1, #1
 80057cc:	480b      	ldr	r0, [pc, #44]	@ (80057fc <checkDemoModCalisma+0x250>)
 80057ce:	f004 fb5e 	bl	8009e8e <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 80057d2:	4b07      	ldr	r3, [pc, #28]	@ (80057f0 <checkDemoModCalisma+0x244>)
 80057d4:	2201      	movs	r2, #1
 80057d6:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 80057d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005804 <checkDemoModCalisma+0x258>)
 80057da:	2201      	movs	r2, #1
 80057dc:	701a      	strb	r2, [r3, #0]
 80057de:	e027      	b.n	8005830 <checkDemoModCalisma+0x284>
 80057e0:	2000108a 	.word	0x2000108a
 80057e4:	200010be 	.word	0x200010be
 80057e8:	20001089 	.word	0x20001089
 80057ec:	40011000 	.word	0x40011000
 80057f0:	200010c5 	.word	0x200010c5
 80057f4:	200010c6 	.word	0x200010c6
 80057f8:	200010c7 	.word	0x200010c7
 80057fc:	40010c00 	.word	0x40010c00
 8005800:	200010c4 	.word	0x200010c4
 8005804:	200010ab 	.word	0x200010ab
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8005808:	2104      	movs	r1, #4
 800580a:	486d      	ldr	r0, [pc, #436]	@ (80059c0 <checkDemoModCalisma+0x414>)
 800580c:	f004 fb28 	bl	8009e60 <HAL_GPIO_ReadPin>
 8005810:	4603      	mov	r3, r0
 8005812:	2b01      	cmp	r3, #1
 8005814:	d10c      	bne.n	8005830 <checkDemoModCalisma+0x284>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005816:	2200      	movs	r2, #0
 8005818:	2102      	movs	r1, #2
 800581a:	486a      	ldr	r0, [pc, #424]	@ (80059c4 <checkDemoModCalisma+0x418>)
 800581c:	f004 fb37 	bl	8009e8e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005820:	2200      	movs	r2, #0
 8005822:	2101      	movs	r1, #1
 8005824:	4867      	ldr	r0, [pc, #412]	@ (80059c4 <checkDemoModCalisma+0x418>)
 8005826:	f004 fb32 	bl	8009e8e <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 800582a:	4b67      	ldr	r3, [pc, #412]	@ (80059c8 <checkDemoModCalisma+0x41c>)
 800582c:	2200      	movs	r2, #0
 800582e:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8005830:	2104      	movs	r1, #4
 8005832:	4863      	ldr	r0, [pc, #396]	@ (80059c0 <checkDemoModCalisma+0x414>)
 8005834:	f004 fb14 	bl	8009e60 <HAL_GPIO_ReadPin>
 8005838:	4603      	mov	r3, r0
 800583a:	2b01      	cmp	r3, #1
 800583c:	d10d      	bne.n	800585a <checkDemoModCalisma+0x2ae>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 800583e:	2201      	movs	r2, #1
 8005840:	2180      	movs	r1, #128	@ 0x80
 8005842:	4862      	ldr	r0, [pc, #392]	@ (80059cc <checkDemoModCalisma+0x420>)
 8005844:	f004 fb23 	bl	8009e8e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005848:	2201      	movs	r2, #1
 800584a:	2120      	movs	r1, #32
 800584c:	485f      	ldr	r0, [pc, #380]	@ (80059cc <checkDemoModCalisma+0x420>)
 800584e:	f004 fb1e 	bl	8009e8e <HAL_GPIO_WritePin>
					timer3 = millis;
 8005852:	4b5f      	ldr	r3, [pc, #380]	@ (80059d0 <checkDemoModCalisma+0x424>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a5f      	ldr	r2, [pc, #380]	@ (80059d4 <checkDemoModCalisma+0x428>)
 8005858:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 800585a:	4b5d      	ldr	r3, [pc, #372]	@ (80059d0 <checkDemoModCalisma+0x424>)
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	4b5d      	ldr	r3, [pc, #372]	@ (80059d4 <checkDemoModCalisma+0x428>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b04      	cmp	r3, #4
 8005866:	d909      	bls.n	800587c <checkDemoModCalisma+0x2d0>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005868:	2200      	movs	r2, #0
 800586a:	2180      	movs	r1, #128	@ 0x80
 800586c:	4857      	ldr	r0, [pc, #348]	@ (80059cc <checkDemoModCalisma+0x420>)
 800586e:	f004 fb0e 	bl	8009e8e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005872:	2200      	movs	r2, #0
 8005874:	2120      	movs	r1, #32
 8005876:	4855      	ldr	r0, [pc, #340]	@ (80059cc <checkDemoModCalisma+0x420>)
 8005878:	f004 fb09 	bl	8009e8e <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800587c:	2102      	movs	r1, #2
 800587e:	4850      	ldr	r0, [pc, #320]	@ (80059c0 <checkDemoModCalisma+0x414>)
 8005880:	f004 faee 	bl	8009e60 <HAL_GPIO_ReadPin>
 8005884:	4603      	mov	r3, r0
 8005886:	2b01      	cmp	r3, #1
 8005888:	d108      	bne.n	800589c <checkDemoModCalisma+0x2f0>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800588a:	2201      	movs	r2, #1
 800588c:	2140      	movs	r1, #64	@ 0x40
 800588e:	484f      	ldr	r0, [pc, #316]	@ (80059cc <checkDemoModCalisma+0x420>)
 8005890:	f004 fafd 	bl	8009e8e <HAL_GPIO_WritePin>
					timer3 = millis;
 8005894:	4b4e      	ldr	r3, [pc, #312]	@ (80059d0 <checkDemoModCalisma+0x424>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a4e      	ldr	r2, [pc, #312]	@ (80059d4 <checkDemoModCalisma+0x428>)
 800589a:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 800589c:	4b4c      	ldr	r3, [pc, #304]	@ (80059d0 <checkDemoModCalisma+0x424>)
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	4b4c      	ldr	r3, [pc, #304]	@ (80059d4 <checkDemoModCalisma+0x428>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b04      	cmp	r3, #4
 80058a8:	d904      	bls.n	80058b4 <checkDemoModCalisma+0x308>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80058aa:	2200      	movs	r2, #0
 80058ac:	2140      	movs	r1, #64	@ 0x40
 80058ae:	4847      	ldr	r0, [pc, #284]	@ (80059cc <checkDemoModCalisma+0x420>)
 80058b0:	f004 faed 	bl	8009e8e <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 80058b4:	4b48      	ldr	r3, [pc, #288]	@ (80059d8 <checkDemoModCalisma+0x42c>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d024      	beq.n	8005906 <checkDemoModCalisma+0x35a>
 80058bc:	4b47      	ldr	r3, [pc, #284]	@ (80059dc <checkDemoModCalisma+0x430>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d020      	beq.n	8005906 <checkDemoModCalisma+0x35a>

					calismaSayisiDemo++;
 80058c4:	4b46      	ldr	r3, [pc, #280]	@ (80059e0 <checkDemoModCalisma+0x434>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	3301      	adds	r3, #1
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	4b44      	ldr	r3, [pc, #272]	@ (80059e0 <checkDemoModCalisma+0x434>)
 80058ce:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 80058d0:	4b44      	ldr	r3, [pc, #272]	@ (80059e4 <checkDemoModCalisma+0x438>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2bff      	cmp	r3, #255	@ 0xff
 80058d6:	d108      	bne.n	80058ea <checkDemoModCalisma+0x33e>
							calismaSayisi = 0;
 80058d8:	4b42      	ldr	r3, [pc, #264]	@ (80059e4 <checkDemoModCalisma+0x438>)
 80058da:	2200      	movs	r2, #0
 80058dc:	701a      	strb	r2, [r3, #0]
							calismaCount++;
 80058de:	4b42      	ldr	r3, [pc, #264]	@ (80059e8 <checkDemoModCalisma+0x43c>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	3301      	adds	r3, #1
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	4b40      	ldr	r3, [pc, #256]	@ (80059e8 <checkDemoModCalisma+0x43c>)
 80058e8:	701a      	strb	r2, [r3, #0]
				}
					eepromData[28] = calismaSayisiDemo;
 80058ea:	4b3d      	ldr	r3, [pc, #244]	@ (80059e0 <checkDemoModCalisma+0x434>)
 80058ec:	781a      	ldrb	r2, [r3, #0]
 80058ee:	4b3f      	ldr	r3, [pc, #252]	@ (80059ec <checkDemoModCalisma+0x440>)
 80058f0:	771a      	strb	r2, [r3, #28]
					eepromData[30] = calismaCountDemo;
 80058f2:	4b3f      	ldr	r3, [pc, #252]	@ (80059f0 <checkDemoModCalisma+0x444>)
 80058f4:	781a      	ldrb	r2, [r3, #0]
 80058f6:	4b3d      	ldr	r3, [pc, #244]	@ (80059ec <checkDemoModCalisma+0x440>)
 80058f8:	779a      	strb	r2, [r3, #30]

					hafizaYaz=1;
 80058fa:	4b3e      	ldr	r3, [pc, #248]	@ (80059f4 <checkDemoModCalisma+0x448>)
 80058fc:	2201      	movs	r2, #1
 80058fe:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 8005900:	4b36      	ldr	r3, [pc, #216]	@ (80059dc <checkDemoModCalisma+0x430>)
 8005902:	2200      	movs	r2, #0
 8005904:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8005906:	4b3c      	ldr	r3, [pc, #240]	@ (80059f8 <checkDemoModCalisma+0x44c>)
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d156      	bne.n	80059bc <checkDemoModCalisma+0x410>
					lcd_print(2,1,"Cycle     ");
 800590e:	4a3b      	ldr	r2, [pc, #236]	@ (80059fc <checkDemoModCalisma+0x450>)
 8005910:	2101      	movs	r1, #1
 8005912:	2002      	movs	r0, #2
 8005914:	f002 ffb2 	bl	800887c <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8005918:	4a39      	ldr	r2, [pc, #228]	@ (8005a00 <checkDemoModCalisma+0x454>)
 800591a:	2101      	movs	r1, #1
 800591c:	2001      	movs	r0, #1
 800591e:	f002 ffad 	bl	800887c <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 8005922:	4b2f      	ldr	r3, [pc, #188]	@ (80059e0 <checkDemoModCalisma+0x434>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	220a      	movs	r2, #10
 8005928:	4936      	ldr	r1, [pc, #216]	@ (8005a04 <checkDemoModCalisma+0x458>)
 800592a:	4618      	mov	r0, r3
 800592c:	f007 fa8e 	bl	800ce4c <itoa>
					lcd_print(2,11,snum);
 8005930:	4a34      	ldr	r2, [pc, #208]	@ (8005a04 <checkDemoModCalisma+0x458>)
 8005932:	210b      	movs	r1, #11
 8005934:	2002      	movs	r0, #2
 8005936:	f002 ffa1 	bl	800887c <lcd_print>
					mesajYazildi=1;
 800593a:	4b33      	ldr	r3, [pc, #204]	@ (8005a08 <checkDemoModCalisma+0x45c>)
 800593c:	2201      	movs	r2, #1
 800593e:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8005940:	e03c      	b.n	80059bc <checkDemoModCalisma+0x410>
				}
			} else if(demoMode==1 || menuGiris==1) {
 8005942:	4b32      	ldr	r3, [pc, #200]	@ (8005a0c <checkDemoModCalisma+0x460>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d003      	beq.n	8005952 <checkDemoModCalisma+0x3a6>
 800594a:	4b2b      	ldr	r3, [pc, #172]	@ (80059f8 <checkDemoModCalisma+0x44c>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d134      	bne.n	80059bc <checkDemoModCalisma+0x410>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005952:	2200      	movs	r2, #0
 8005954:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005958:	481a      	ldr	r0, [pc, #104]	@ (80059c4 <checkDemoModCalisma+0x418>)
 800595a:	f004 fa98 	bl	8009e8e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800595e:	2200      	movs	r2, #0
 8005960:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005964:	4817      	ldr	r0, [pc, #92]	@ (80059c4 <checkDemoModCalisma+0x418>)
 8005966:	f004 fa92 	bl	8009e8e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800596a:	2200      	movs	r2, #0
 800596c:	2104      	movs	r1, #4
 800596e:	4815      	ldr	r0, [pc, #84]	@ (80059c4 <checkDemoModCalisma+0x418>)
 8005970:	f004 fa8d 	bl	8009e8e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005974:	2200      	movs	r2, #0
 8005976:	2102      	movs	r1, #2
 8005978:	4812      	ldr	r0, [pc, #72]	@ (80059c4 <checkDemoModCalisma+0x418>)
 800597a:	f004 fa88 	bl	8009e8e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800597e:	2200      	movs	r2, #0
 8005980:	2101      	movs	r1, #1
 8005982:	4810      	ldr	r0, [pc, #64]	@ (80059c4 <checkDemoModCalisma+0x418>)
 8005984:	f004 fa83 	bl	8009e8e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005988:	2200      	movs	r2, #0
 800598a:	2120      	movs	r1, #32
 800598c:	480c      	ldr	r0, [pc, #48]	@ (80059c0 <checkDemoModCalisma+0x414>)
 800598e:	f004 fa7e 	bl	8009e8e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005992:	2200      	movs	r2, #0
 8005994:	2110      	movs	r1, #16
 8005996:	480a      	ldr	r0, [pc, #40]	@ (80059c0 <checkDemoModCalisma+0x414>)
 8005998:	f004 fa79 	bl	8009e8e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800599c:	2200      	movs	r2, #0
 800599e:	2180      	movs	r1, #128	@ 0x80
 80059a0:	480a      	ldr	r0, [pc, #40]	@ (80059cc <checkDemoModCalisma+0x420>)
 80059a2:	f004 fa74 	bl	8009e8e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80059a6:	2200      	movs	r2, #0
 80059a8:	2140      	movs	r1, #64	@ 0x40
 80059aa:	4808      	ldr	r0, [pc, #32]	@ (80059cc <checkDemoModCalisma+0x420>)
 80059ac:	f004 fa6f 	bl	8009e8e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80059b0:	2200      	movs	r2, #0
 80059b2:	2120      	movs	r1, #32
 80059b4:	4805      	ldr	r0, [pc, #20]	@ (80059cc <checkDemoModCalisma+0x420>)
 80059b6:	f004 fa6a 	bl	8009e8e <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 80059ba:	e7ff      	b.n	80059bc <checkDemoModCalisma+0x410>
 80059bc:	bf00      	nop
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40011000 	.word	0x40011000
 80059c4:	40010c00 	.word	0x40010c00
 80059c8:	200010c5 	.word	0x200010c5
 80059cc:	40010800 	.word	0x40010800
 80059d0:	20001044 	.word	0x20001044
 80059d4:	20001054 	.word	0x20001054
 80059d8:	200010c4 	.word	0x200010c4
 80059dc:	200010ab 	.word	0x200010ab
 80059e0:	20001065 	.word	0x20001065
 80059e4:	20001064 	.word	0x20001064
 80059e8:	20001066 	.word	0x20001066
 80059ec:	20000f9c 	.word	0x20000f9c
 80059f0:	20001067 	.word	0x20001067
 80059f4:	20001099 	.word	0x20001099
 80059f8:	20001089 	.word	0x20001089
 80059fc:	0800d0a8 	.word	0x0800d0a8
 8005a00:	0800d0b4 	.word	0x0800d0b4
 8005a04:	2000100c 	.word	0x2000100c
 8005a08:	200010a1 	.word	0x200010a1
 8005a0c:	2000108a 	.word	0x2000108a

08005a10 <mainLoop>:

void mainLoop() {
 8005a10:	b580      	push	{r7, lr}
 8005a12:	af00      	add	r7, sp, #0
	while(1) {
		checkLCDBacklight();
 8005a14:	f7fe f8b6 	bl	8003b84 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8005a18:	2101      	movs	r1, #1
 8005a1a:	488b      	ldr	r0, [pc, #556]	@ (8005c48 <mainLoop+0x238>)
 8005a1c:	f004 fa20 	bl	8009e60 <HAL_GPIO_ReadPin>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d136      	bne.n	8005a94 <mainLoop+0x84>
 8005a26:	2108      	movs	r1, #8
 8005a28:	4888      	ldr	r0, [pc, #544]	@ (8005c4c <mainLoop+0x23c>)
 8005a2a:	f004 fa19 	bl	8009e60 <HAL_GPIO_ReadPin>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d12f      	bne.n	8005a94 <mainLoop+0x84>
 8005a34:	2102      	movs	r1, #2
 8005a36:	4884      	ldr	r0, [pc, #528]	@ (8005c48 <mainLoop+0x238>)
 8005a38:	f004 fa12 	bl	8009e60 <HAL_GPIO_ReadPin>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d128      	bne.n	8005a94 <mainLoop+0x84>
 8005a42:	2104      	movs	r1, #4
 8005a44:	4880      	ldr	r0, [pc, #512]	@ (8005c48 <mainLoop+0x238>)
 8005a46:	f004 fa0b 	bl	8009e60 <HAL_GPIO_ReadPin>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d121      	bne.n	8005a94 <mainLoop+0x84>
 8005a50:	2108      	movs	r1, #8
 8005a52:	487d      	ldr	r0, [pc, #500]	@ (8005c48 <mainLoop+0x238>)
 8005a54:	f004 fa04 	bl	8009e60 <HAL_GPIO_ReadPin>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d11a      	bne.n	8005a94 <mainLoop+0x84>
 8005a5e:	2180      	movs	r1, #128	@ 0x80
 8005a60:	487a      	ldr	r0, [pc, #488]	@ (8005c4c <mainLoop+0x23c>)
 8005a62:	f004 f9fd 	bl	8009e60 <HAL_GPIO_ReadPin>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d113      	bne.n	8005a94 <mainLoop+0x84>
 8005a6c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005a70:	4876      	ldr	r0, [pc, #472]	@ (8005c4c <mainLoop+0x23c>)
 8005a72:	f004 f9f5 	bl	8009e60 <HAL_GPIO_ReadPin>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d10b      	bne.n	8005a94 <mainLoop+0x84>
 8005a7c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005a80:	4872      	ldr	r0, [pc, #456]	@ (8005c4c <mainLoop+0x23c>)
 8005a82:	f004 f9ed 	bl	8009e60 <HAL_GPIO_ReadPin>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d103      	bne.n	8005a94 <mainLoop+0x84>
			butonKontrol=0;
 8005a8c:	4b70      	ldr	r3, [pc, #448]	@ (8005c50 <mainLoop+0x240>)
 8005a8e:	2200      	movs	r2, #0
 8005a90:	701a      	strb	r2, [r3, #0]
 8005a92:	e003      	b.n	8005a9c <mainLoop+0x8c>
		} else {
			backLightTimer = millis;
 8005a94:	4b6f      	ldr	r3, [pc, #444]	@ (8005c54 <mainLoop+0x244>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a6f      	ldr	r2, [pc, #444]	@ (8005c58 <mainLoop+0x248>)
 8005a9a:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8005a9c:	f7fe f924 	bl	8003ce8 <buttonCheck>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d103      	bne.n	8005aae <mainLoop+0x9e>
			backLightTimer = millis;
 8005aa6:	4b6b      	ldr	r3, [pc, #428]	@ (8005c54 <mainLoop+0x244>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a6b      	ldr	r2, [pc, #428]	@ (8005c58 <mainLoop+0x248>)
 8005aac:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz == 1) {
 8005aae:	4b6b      	ldr	r3, [pc, #428]	@ (8005c5c <mainLoop+0x24c>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d005      	beq.n	8005ac2 <mainLoop+0xb2>
			hafizaYaz = 0;
 8005ab6:	4b69      	ldr	r3, [pc, #420]	@ (8005c5c <mainLoop+0x24c>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	701a      	strb	r2, [r3, #0]
			saveEEPROM(1);
 8005abc:	2001      	movs	r0, #1
 8005abe:	f7fa fe2f 	bl	8000720 <saveEEPROM>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8005ac2:	4b67      	ldr	r3, [pc, #412]	@ (8005c60 <mainLoop+0x250>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	f083 0301 	eor.w	r3, r3, #1
 8005aca:	b2db      	uxtb	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d043      	beq.n	8005b58 <mainLoop+0x148>
 8005ad0:	4864      	ldr	r0, [pc, #400]	@ (8005c64 <mainLoop+0x254>)
 8005ad2:	f004 ffe1 	bl	800aa98 <HAL_I2C_GetState>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b20      	cmp	r3, #32
 8005ada:	d13d      	bne.n	8005b58 <mainLoop+0x148>
		  if(ilkOkuma==0) {
 8005adc:	4b62      	ldr	r3, [pc, #392]	@ (8005c68 <mainLoop+0x258>)
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	f083 0301 	eor.w	r3, r3, #1
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d028      	beq.n	8005b3c <mainLoop+0x12c>
			  lcd_print(1, 1, eepromTextGN);
 8005aea:	4a60      	ldr	r2, [pc, #384]	@ (8005c6c <mainLoop+0x25c>)
 8005aec:	2101      	movs	r1, #1
 8005aee:	2001      	movs	r0, #1
 8005af0:	f002 fec4 	bl	800887c <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8005af4:	4a5e      	ldr	r2, [pc, #376]	@ (8005c70 <mainLoop+0x260>)
 8005af6:	2101      	movs	r1, #1
 8005af8:	2002      	movs	r0, #2
 8005afa:	f002 febf 	bl	800887c <lcd_print>
			  HAL_Delay(1000);
 8005afe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005b02:	f003 fbdd 	bl	80092c0 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005b06:	bf00      	nop
 8005b08:	4856      	ldr	r0, [pc, #344]	@ (8005c64 <mainLoop+0x254>)
 8005b0a:	f004 ffd2 	bl	800aab2 <HAL_I2C_GetError>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d0f9      	beq.n	8005b08 <mainLoop+0xf8>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005b14:	e003      	b.n	8005b1e <mainLoop+0x10e>
				  HAL_Delay(1000);
 8005b16:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005b1a:	f003 fbd1 	bl	80092c0 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005b1e:	4851      	ldr	r0, [pc, #324]	@ (8005c64 <mainLoop+0x254>)
 8005b20:	f004 ffba 	bl	800aa98 <HAL_I2C_GetState>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b20      	cmp	r3, #32
 8005b28:	d1f5      	bne.n	8005b16 <mainLoop+0x106>
			  }

			  lcd_print(2, 1, dataOkunduText);
 8005b2a:	4a52      	ldr	r2, [pc, #328]	@ (8005c74 <mainLoop+0x264>)
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	2002      	movs	r0, #2
 8005b30:	f002 fea4 	bl	800887c <lcd_print>

			  ilkOkuma=1;
 8005b34:	4b4c      	ldr	r3, [pc, #304]	@ (8005c68 <mainLoop+0x258>)
 8005b36:	2201      	movs	r2, #1
 8005b38:	701a      	strb	r2, [r3, #0]
 8005b3a:	e006      	b.n	8005b4a <mainLoop+0x13a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8005b3c:	4a4e      	ldr	r2, [pc, #312]	@ (8005c78 <mainLoop+0x268>)
 8005b3e:	2101      	movs	r1, #1
 8005b40:	2002      	movs	r0, #2
 8005b42:	f002 fe9b 	bl	800887c <lcd_print>
			  lcd_clear();
 8005b46:	f002 fec5 	bl	80088d4 <lcd_clear>
		  }

		  lcd_clear();
 8005b4a:	f002 fec3 	bl	80088d4 <lcd_clear>

		  eepromKontrol();
 8005b4e:	f7fa fb71 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8005b52:	4b43      	ldr	r3, [pc, #268]	@ (8005c60 <mainLoop+0x250>)
 8005b54:	2201      	movs	r2, #1
 8005b56:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8005b58:	4b48      	ldr	r3, [pc, #288]	@ (8005c7c <mainLoop+0x26c>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d11c      	bne.n	8005b9a <mainLoop+0x18a>
 8005b60:	4b47      	ldr	r3, [pc, #284]	@ (8005c80 <mainLoop+0x270>)
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	f083 0301 	eor.w	r3, r3, #1
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d015      	beq.n	8005b9a <mainLoop+0x18a>
 8005b6e:	4b45      	ldr	r3, [pc, #276]	@ (8005c84 <mainLoop+0x274>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d111      	bne.n	8005b9a <mainLoop+0x18a>
			lcd_clear();
 8005b76:	f002 fead 	bl	80088d4 <lcd_clear>
			HAL_Delay(10);
 8005b7a:	200a      	movs	r0, #10
 8005b7c:	f003 fba0 	bl	80092c0 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8005b80:	4a41      	ldr	r2, [pc, #260]	@ (8005c88 <mainLoop+0x278>)
 8005b82:	2101      	movs	r1, #1
 8005b84:	2001      	movs	r0, #1
 8005b86:	f002 fe79 	bl	800887c <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8005b8a:	4a40      	ldr	r2, [pc, #256]	@ (8005c8c <mainLoop+0x27c>)
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	2002      	movs	r0, #2
 8005b90:	f002 fe74 	bl	800887c <lcd_print>
			mesajYazildi=1;
 8005b94:	4b3a      	ldr	r3, [pc, #232]	@ (8005c80 <mainLoop+0x270>)
 8005b96:	2201      	movs	r2, #1
 8005b98:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8005b9a:	4b38      	ldr	r3, [pc, #224]	@ (8005c7c <mainLoop+0x26c>)
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d112      	bne.n	8005bc8 <mainLoop+0x1b8>
 8005ba2:	2102      	movs	r1, #2
 8005ba4:	4828      	ldr	r0, [pc, #160]	@ (8005c48 <mainLoop+0x238>)
 8005ba6:	f004 f95b 	bl	8009e60 <HAL_GPIO_ReadPin>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d10b      	bne.n	8005bc8 <mainLoop+0x1b8>
 8005bb0:	2104      	movs	r1, #4
 8005bb2:	4825      	ldr	r0, [pc, #148]	@ (8005c48 <mainLoop+0x238>)
 8005bb4:	f004 f954 	bl	8009e60 <HAL_GPIO_ReadPin>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d104      	bne.n	8005bc8 <mainLoop+0x1b8>
			menuGiris=1;
 8005bbe:	4b2f      	ldr	r3, [pc, #188]	@ (8005c7c <mainLoop+0x26c>)
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8005bc4:	f002 fe86 	bl	80088d4 <lcd_clear>
		}

		if(menuGiris==1) {
 8005bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8005c7c <mainLoop+0x26c>)
 8005bca:	781b      	ldrb	r3, [r3, #0]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d101      	bne.n	8005bd4 <mainLoop+0x1c4>
			menu();
 8005bd0:	f7fb faa8 	bl	8001124 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8005bd4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005bd8:	481c      	ldr	r0, [pc, #112]	@ (8005c4c <mainLoop+0x23c>)
 8005bda:	f004 f970 	bl	8009ebe <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8005bde:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005be2:	482b      	ldr	r0, [pc, #172]	@ (8005c90 <mainLoop+0x280>)
 8005be4:	f004 f93c 	bl	8009e60 <HAL_GPIO_ReadPin>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10a      	bne.n	8005c04 <mainLoop+0x1f4>
 8005bee:	4b29      	ldr	r3, [pc, #164]	@ (8005c94 <mainLoop+0x284>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	f083 0301 	eor.w	r3, r3, #1
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <mainLoop+0x1f4>
			stopVar=1;
 8005bfc:	4b26      	ldr	r3, [pc, #152]	@ (8005c98 <mainLoop+0x288>)
 8005bfe:	2201      	movs	r2, #1
 8005c00:	701a      	strb	r2, [r3, #0]
 8005c02:	e002      	b.n	8005c0a <mainLoop+0x1fa>
		} else {
			stopVar=0;
 8005c04:	4b24      	ldr	r3, [pc, #144]	@ (8005c98 <mainLoop+0x288>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 8005c0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005c0e:	4820      	ldr	r0, [pc, #128]	@ (8005c90 <mainLoop+0x280>)
 8005c10:	f004 f926 	bl	8009e60 <HAL_GPIO_ReadPin>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d107      	bne.n	8005c2a <mainLoop+0x21a>
 8005c1a:	4b20      	ldr	r3, [pc, #128]	@ (8005c9c <mainLoop+0x28c>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d003      	beq.n	8005c2a <mainLoop+0x21a>
			EmnStopVar=1;
 8005c22:	4b1f      	ldr	r3, [pc, #124]	@ (8005ca0 <mainLoop+0x290>)
 8005c24:	2201      	movs	r2, #1
 8005c26:	701a      	strb	r2, [r3, #0]
 8005c28:	e002      	b.n	8005c30 <mainLoop+0x220>
		} else {
			EmnStopVar=0;
 8005c2a:	4b1d      	ldr	r3, [pc, #116]	@ (8005ca0 <mainLoop+0x290>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8005c30:	f7fe f88e 	bl	8003d50 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8005c34:	f7fe f8c0 	bl	8003db8 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8005c38:	f7fe f904 	bl	8003e44 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8005c3c:	f7fe f954 	bl	8003ee8 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8005c40:	f7ff fcb4 	bl	80055ac <checkDemoModCalisma>
		checkLCDBacklight();
 8005c44:	e6e6      	b.n	8005a14 <mainLoop+0x4>
 8005c46:	bf00      	nop
 8005c48:	40010800 	.word	0x40010800
 8005c4c:	40011000 	.word	0x40011000
 8005c50:	2000109c 	.word	0x2000109c
 8005c54:	20001044 	.word	0x20001044
 8005c58:	20001060 	.word	0x20001060
 8005c5c:	20001099 	.word	0x20001099
 8005c60:	2000109a 	.word	0x2000109a
 8005c64:	200017f0 	.word	0x200017f0
 8005c68:	2000109b 	.word	0x2000109b
 8005c6c:	20000178 	.word	0x20000178
 8005c70:	20001728 	.word	0x20001728
 8005c74:	2000173c 	.word	0x2000173c
 8005c78:	20001750 	.word	0x20001750
 8005c7c:	20001089 	.word	0x20001089
 8005c80:	200010a1 	.word	0x200010a1
 8005c84:	2000108a 	.word	0x2000108a
 8005c88:	200000c4 	.word	0x200000c4
 8005c8c:	200000d8 	.word	0x200000d8
 8005c90:	40010c00 	.word	0x40010c00
 8005c94:	200010c1 	.word	0x200010c1
 8005c98:	200010be 	.word	0x200010be
 8005c9c:	200010d0 	.word	0x200010d0
 8005ca0:	200010d1 	.word	0x200010d1

08005ca4 <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8005ca4:	b5b0      	push	{r4, r5, r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	4603      	mov	r3, r0
 8005cac:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8005cae:	79fb      	ldrb	r3, [r7, #7]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f040 853d 	bne.w	8006730 <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 8005cb6:	4ac7      	ldr	r2, [pc, #796]	@ (8005fd4 <loadMenuTexts+0x330>)
 8005cb8:	4bc7      	ldr	r3, [pc, #796]	@ (8005fd8 <loadMenuTexts+0x334>)
 8005cba:	4614      	mov	r4, r2
 8005cbc:	461d      	mov	r5, r3
 8005cbe:	6828      	ldr	r0, [r5, #0]
 8005cc0:	6869      	ldr	r1, [r5, #4]
 8005cc2:	68aa      	ldr	r2, [r5, #8]
 8005cc4:	68eb      	ldr	r3, [r5, #12]
 8005cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cc8:	7c2b      	ldrb	r3, [r5, #16]
 8005cca:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8005ccc:	4ac3      	ldr	r2, [pc, #780]	@ (8005fdc <loadMenuTexts+0x338>)
 8005cce:	4bc4      	ldr	r3, [pc, #784]	@ (8005fe0 <loadMenuTexts+0x33c>)
 8005cd0:	4614      	mov	r4, r2
 8005cd2:	461d      	mov	r5, r3
 8005cd4:	6828      	ldr	r0, [r5, #0]
 8005cd6:	6869      	ldr	r1, [r5, #4]
 8005cd8:	68aa      	ldr	r2, [r5, #8]
 8005cda:	68eb      	ldr	r3, [r5, #12]
 8005cdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cde:	7c2b      	ldrb	r3, [r5, #16]
 8005ce0:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 8005ce2:	4ac0      	ldr	r2, [pc, #768]	@ (8005fe4 <loadMenuTexts+0x340>)
 8005ce4:	4bc0      	ldr	r3, [pc, #768]	@ (8005fe8 <loadMenuTexts+0x344>)
 8005ce6:	4614      	mov	r4, r2
 8005ce8:	461d      	mov	r5, r3
 8005cea:	6828      	ldr	r0, [r5, #0]
 8005cec:	6869      	ldr	r1, [r5, #4]
 8005cee:	68aa      	ldr	r2, [r5, #8]
 8005cf0:	68eb      	ldr	r3, [r5, #12]
 8005cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005cf4:	7c2b      	ldrb	r3, [r5, #16]
 8005cf6:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8005cf8:	4abc      	ldr	r2, [pc, #752]	@ (8005fec <loadMenuTexts+0x348>)
 8005cfa:	4bbd      	ldr	r3, [pc, #756]	@ (8005ff0 <loadMenuTexts+0x34c>)
 8005cfc:	4614      	mov	r4, r2
 8005cfe:	461d      	mov	r5, r3
 8005d00:	6828      	ldr	r0, [r5, #0]
 8005d02:	6869      	ldr	r1, [r5, #4]
 8005d04:	68aa      	ldr	r2, [r5, #8]
 8005d06:	68eb      	ldr	r3, [r5, #12]
 8005d08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d0a:	7c2b      	ldrb	r3, [r5, #16]
 8005d0c:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 8005d0e:	4ab9      	ldr	r2, [pc, #740]	@ (8005ff4 <loadMenuTexts+0x350>)
 8005d10:	4bb9      	ldr	r3, [pc, #740]	@ (8005ff8 <loadMenuTexts+0x354>)
 8005d12:	4614      	mov	r4, r2
 8005d14:	461d      	mov	r5, r3
 8005d16:	6828      	ldr	r0, [r5, #0]
 8005d18:	6869      	ldr	r1, [r5, #4]
 8005d1a:	68aa      	ldr	r2, [r5, #8]
 8005d1c:	68eb      	ldr	r3, [r5, #12]
 8005d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d20:	7c2b      	ldrb	r3, [r5, #16]
 8005d22:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 8005d24:	4ab5      	ldr	r2, [pc, #724]	@ (8005ffc <loadMenuTexts+0x358>)
 8005d26:	4bb6      	ldr	r3, [pc, #728]	@ (8006000 <loadMenuTexts+0x35c>)
 8005d28:	4614      	mov	r4, r2
 8005d2a:	461d      	mov	r5, r3
 8005d2c:	6828      	ldr	r0, [r5, #0]
 8005d2e:	6869      	ldr	r1, [r5, #4]
 8005d30:	68aa      	ldr	r2, [r5, #8]
 8005d32:	68eb      	ldr	r3, [r5, #12]
 8005d34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d36:	7c2b      	ldrb	r3, [r5, #16]
 8005d38:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 8005d3a:	4ab2      	ldr	r2, [pc, #712]	@ (8006004 <loadMenuTexts+0x360>)
 8005d3c:	4bb2      	ldr	r3, [pc, #712]	@ (8006008 <loadMenuTexts+0x364>)
 8005d3e:	4614      	mov	r4, r2
 8005d40:	461d      	mov	r5, r3
 8005d42:	6828      	ldr	r0, [r5, #0]
 8005d44:	6869      	ldr	r1, [r5, #4]
 8005d46:	68aa      	ldr	r2, [r5, #8]
 8005d48:	68eb      	ldr	r3, [r5, #12]
 8005d4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d4c:	7c2b      	ldrb	r3, [r5, #16]
 8005d4e:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 8005d50:	4aae      	ldr	r2, [pc, #696]	@ (800600c <loadMenuTexts+0x368>)
 8005d52:	4baf      	ldr	r3, [pc, #700]	@ (8006010 <loadMenuTexts+0x36c>)
 8005d54:	4614      	mov	r4, r2
 8005d56:	461d      	mov	r5, r3
 8005d58:	6828      	ldr	r0, [r5, #0]
 8005d5a:	6869      	ldr	r1, [r5, #4]
 8005d5c:	68aa      	ldr	r2, [r5, #8]
 8005d5e:	68eb      	ldr	r3, [r5, #12]
 8005d60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d62:	7c2b      	ldrb	r3, [r5, #16]
 8005d64:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 8005d66:	4aab      	ldr	r2, [pc, #684]	@ (8006014 <loadMenuTexts+0x370>)
 8005d68:	4bab      	ldr	r3, [pc, #684]	@ (8006018 <loadMenuTexts+0x374>)
 8005d6a:	4614      	mov	r4, r2
 8005d6c:	461d      	mov	r5, r3
 8005d6e:	6828      	ldr	r0, [r5, #0]
 8005d70:	6869      	ldr	r1, [r5, #4]
 8005d72:	68aa      	ldr	r2, [r5, #8]
 8005d74:	68eb      	ldr	r3, [r5, #12]
 8005d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d78:	7c2b      	ldrb	r3, [r5, #16]
 8005d7a:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8005d7c:	4aa7      	ldr	r2, [pc, #668]	@ (800601c <loadMenuTexts+0x378>)
 8005d7e:	4ba8      	ldr	r3, [pc, #672]	@ (8006020 <loadMenuTexts+0x37c>)
 8005d80:	4614      	mov	r4, r2
 8005d82:	461d      	mov	r5, r3
 8005d84:	6828      	ldr	r0, [r5, #0]
 8005d86:	6869      	ldr	r1, [r5, #4]
 8005d88:	68aa      	ldr	r2, [r5, #8]
 8005d8a:	68eb      	ldr	r3, [r5, #12]
 8005d8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005d8e:	7c2b      	ldrb	r3, [r5, #16]
 8005d90:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 8005d92:	4aa4      	ldr	r2, [pc, #656]	@ (8006024 <loadMenuTexts+0x380>)
 8005d94:	4ba4      	ldr	r3, [pc, #656]	@ (8006028 <loadMenuTexts+0x384>)
 8005d96:	4614      	mov	r4, r2
 8005d98:	461d      	mov	r5, r3
 8005d9a:	6828      	ldr	r0, [r5, #0]
 8005d9c:	6869      	ldr	r1, [r5, #4]
 8005d9e:	68aa      	ldr	r2, [r5, #8]
 8005da0:	68eb      	ldr	r3, [r5, #12]
 8005da2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005da4:	7c2b      	ldrb	r3, [r5, #16]
 8005da6:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8005da8:	4aa0      	ldr	r2, [pc, #640]	@ (800602c <loadMenuTexts+0x388>)
 8005daa:	4ba1      	ldr	r3, [pc, #644]	@ (8006030 <loadMenuTexts+0x38c>)
 8005dac:	4614      	mov	r4, r2
 8005dae:	461d      	mov	r5, r3
 8005db0:	6828      	ldr	r0, [r5, #0]
 8005db2:	6869      	ldr	r1, [r5, #4]
 8005db4:	68aa      	ldr	r2, [r5, #8]
 8005db6:	68eb      	ldr	r3, [r5, #12]
 8005db8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dba:	7c2b      	ldrb	r3, [r5, #16]
 8005dbc:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8005dbe:	4a9d      	ldr	r2, [pc, #628]	@ (8006034 <loadMenuTexts+0x390>)
 8005dc0:	4b9d      	ldr	r3, [pc, #628]	@ (8006038 <loadMenuTexts+0x394>)
 8005dc2:	4614      	mov	r4, r2
 8005dc4:	461d      	mov	r5, r3
 8005dc6:	6828      	ldr	r0, [r5, #0]
 8005dc8:	6869      	ldr	r1, [r5, #4]
 8005dca:	68aa      	ldr	r2, [r5, #8]
 8005dcc:	68eb      	ldr	r3, [r5, #12]
 8005dce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dd0:	7c2b      	ldrb	r3, [r5, #16]
 8005dd2:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 8005dd4:	4a99      	ldr	r2, [pc, #612]	@ (800603c <loadMenuTexts+0x398>)
 8005dd6:	4b9a      	ldr	r3, [pc, #616]	@ (8006040 <loadMenuTexts+0x39c>)
 8005dd8:	4614      	mov	r4, r2
 8005dda:	461d      	mov	r5, r3
 8005ddc:	6828      	ldr	r0, [r5, #0]
 8005dde:	6869      	ldr	r1, [r5, #4]
 8005de0:	68aa      	ldr	r2, [r5, #8]
 8005de2:	68eb      	ldr	r3, [r5, #12]
 8005de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005de6:	7c2b      	ldrb	r3, [r5, #16]
 8005de8:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 8005dea:	4a96      	ldr	r2, [pc, #600]	@ (8006044 <loadMenuTexts+0x3a0>)
 8005dec:	4b96      	ldr	r3, [pc, #600]	@ (8006048 <loadMenuTexts+0x3a4>)
 8005dee:	4614      	mov	r4, r2
 8005df0:	461d      	mov	r5, r3
 8005df2:	6828      	ldr	r0, [r5, #0]
 8005df4:	6869      	ldr	r1, [r5, #4]
 8005df6:	68aa      	ldr	r2, [r5, #8]
 8005df8:	68eb      	ldr	r3, [r5, #12]
 8005dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005dfc:	7c2b      	ldrb	r3, [r5, #16]
 8005dfe:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8005e00:	4a92      	ldr	r2, [pc, #584]	@ (800604c <loadMenuTexts+0x3a8>)
 8005e02:	4b93      	ldr	r3, [pc, #588]	@ (8006050 <loadMenuTexts+0x3ac>)
 8005e04:	4614      	mov	r4, r2
 8005e06:	461d      	mov	r5, r3
 8005e08:	6828      	ldr	r0, [r5, #0]
 8005e0a:	6869      	ldr	r1, [r5, #4]
 8005e0c:	68aa      	ldr	r2, [r5, #8]
 8005e0e:	68eb      	ldr	r3, [r5, #12]
 8005e10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e12:	7c2b      	ldrb	r3, [r5, #16]
 8005e14:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 8005e16:	4a8f      	ldr	r2, [pc, #572]	@ (8006054 <loadMenuTexts+0x3b0>)
 8005e18:	4b8f      	ldr	r3, [pc, #572]	@ (8006058 <loadMenuTexts+0x3b4>)
 8005e1a:	4614      	mov	r4, r2
 8005e1c:	461d      	mov	r5, r3
 8005e1e:	6828      	ldr	r0, [r5, #0]
 8005e20:	6869      	ldr	r1, [r5, #4]
 8005e22:	68aa      	ldr	r2, [r5, #8]
 8005e24:	68eb      	ldr	r3, [r5, #12]
 8005e26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e28:	7c2b      	ldrb	r3, [r5, #16]
 8005e2a:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 8005e2c:	4a8b      	ldr	r2, [pc, #556]	@ (800605c <loadMenuTexts+0x3b8>)
 8005e2e:	4b8c      	ldr	r3, [pc, #560]	@ (8006060 <loadMenuTexts+0x3bc>)
 8005e30:	4614      	mov	r4, r2
 8005e32:	461d      	mov	r5, r3
 8005e34:	6828      	ldr	r0, [r5, #0]
 8005e36:	6869      	ldr	r1, [r5, #4]
 8005e38:	68aa      	ldr	r2, [r5, #8]
 8005e3a:	68eb      	ldr	r3, [r5, #12]
 8005e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e3e:	7c2b      	ldrb	r3, [r5, #16]
 8005e40:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 8005e42:	4a88      	ldr	r2, [pc, #544]	@ (8006064 <loadMenuTexts+0x3c0>)
 8005e44:	4b88      	ldr	r3, [pc, #544]	@ (8006068 <loadMenuTexts+0x3c4>)
 8005e46:	4614      	mov	r4, r2
 8005e48:	461d      	mov	r5, r3
 8005e4a:	6828      	ldr	r0, [r5, #0]
 8005e4c:	6869      	ldr	r1, [r5, #4]
 8005e4e:	68aa      	ldr	r2, [r5, #8]
 8005e50:	68eb      	ldr	r3, [r5, #12]
 8005e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e54:	7c2b      	ldrb	r3, [r5, #16]
 8005e56:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 8005e58:	4a84      	ldr	r2, [pc, #528]	@ (800606c <loadMenuTexts+0x3c8>)
 8005e5a:	4b85      	ldr	r3, [pc, #532]	@ (8006070 <loadMenuTexts+0x3cc>)
 8005e5c:	4614      	mov	r4, r2
 8005e5e:	461d      	mov	r5, r3
 8005e60:	6828      	ldr	r0, [r5, #0]
 8005e62:	6869      	ldr	r1, [r5, #4]
 8005e64:	68aa      	ldr	r2, [r5, #8]
 8005e66:	68eb      	ldr	r3, [r5, #12]
 8005e68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e6a:	7c2b      	ldrb	r3, [r5, #16]
 8005e6c:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 8005e6e:	4a81      	ldr	r2, [pc, #516]	@ (8006074 <loadMenuTexts+0x3d0>)
 8005e70:	4b81      	ldr	r3, [pc, #516]	@ (8006078 <loadMenuTexts+0x3d4>)
 8005e72:	4614      	mov	r4, r2
 8005e74:	461d      	mov	r5, r3
 8005e76:	6828      	ldr	r0, [r5, #0]
 8005e78:	6869      	ldr	r1, [r5, #4]
 8005e7a:	68aa      	ldr	r2, [r5, #8]
 8005e7c:	68eb      	ldr	r3, [r5, #12]
 8005e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e80:	7c2b      	ldrb	r3, [r5, #16]
 8005e82:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 8005e84:	4a7d      	ldr	r2, [pc, #500]	@ (800607c <loadMenuTexts+0x3d8>)
 8005e86:	4b7e      	ldr	r3, [pc, #504]	@ (8006080 <loadMenuTexts+0x3dc>)
 8005e88:	4614      	mov	r4, r2
 8005e8a:	461d      	mov	r5, r3
 8005e8c:	6828      	ldr	r0, [r5, #0]
 8005e8e:	6869      	ldr	r1, [r5, #4]
 8005e90:	68aa      	ldr	r2, [r5, #8]
 8005e92:	68eb      	ldr	r3, [r5, #12]
 8005e94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e96:	7c2b      	ldrb	r3, [r5, #16]
 8005e98:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 8005e9a:	4a7a      	ldr	r2, [pc, #488]	@ (8006084 <loadMenuTexts+0x3e0>)
 8005e9c:	4b7a      	ldr	r3, [pc, #488]	@ (8006088 <loadMenuTexts+0x3e4>)
 8005e9e:	4614      	mov	r4, r2
 8005ea0:	461d      	mov	r5, r3
 8005ea2:	6828      	ldr	r0, [r5, #0]
 8005ea4:	6869      	ldr	r1, [r5, #4]
 8005ea6:	68aa      	ldr	r2, [r5, #8]
 8005ea8:	68eb      	ldr	r3, [r5, #12]
 8005eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005eac:	7c2b      	ldrb	r3, [r5, #16]
 8005eae:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 8005eb0:	4a76      	ldr	r2, [pc, #472]	@ (800608c <loadMenuTexts+0x3e8>)
 8005eb2:	4b77      	ldr	r3, [pc, #476]	@ (8006090 <loadMenuTexts+0x3ec>)
 8005eb4:	4614      	mov	r4, r2
 8005eb6:	461d      	mov	r5, r3
 8005eb8:	6828      	ldr	r0, [r5, #0]
 8005eba:	6869      	ldr	r1, [r5, #4]
 8005ebc:	68aa      	ldr	r2, [r5, #8]
 8005ebe:	68eb      	ldr	r3, [r5, #12]
 8005ec0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ec2:	7c2b      	ldrb	r3, [r5, #16]
 8005ec4:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 8005ec6:	4a73      	ldr	r2, [pc, #460]	@ (8006094 <loadMenuTexts+0x3f0>)
 8005ec8:	4b73      	ldr	r3, [pc, #460]	@ (8006098 <loadMenuTexts+0x3f4>)
 8005eca:	4614      	mov	r4, r2
 8005ecc:	461d      	mov	r5, r3
 8005ece:	6828      	ldr	r0, [r5, #0]
 8005ed0:	6869      	ldr	r1, [r5, #4]
 8005ed2:	68aa      	ldr	r2, [r5, #8]
 8005ed4:	68eb      	ldr	r3, [r5, #12]
 8005ed6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ed8:	7c2b      	ldrb	r3, [r5, #16]
 8005eda:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 8005edc:	4a6f      	ldr	r2, [pc, #444]	@ (800609c <loadMenuTexts+0x3f8>)
 8005ede:	4b70      	ldr	r3, [pc, #448]	@ (80060a0 <loadMenuTexts+0x3fc>)
 8005ee0:	4614      	mov	r4, r2
 8005ee2:	461d      	mov	r5, r3
 8005ee4:	6828      	ldr	r0, [r5, #0]
 8005ee6:	6869      	ldr	r1, [r5, #4]
 8005ee8:	68aa      	ldr	r2, [r5, #8]
 8005eea:	68eb      	ldr	r3, [r5, #12]
 8005eec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005eee:	7c2b      	ldrb	r3, [r5, #16]
 8005ef0:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 8005ef2:	4a6c      	ldr	r2, [pc, #432]	@ (80060a4 <loadMenuTexts+0x400>)
 8005ef4:	4b6c      	ldr	r3, [pc, #432]	@ (80060a8 <loadMenuTexts+0x404>)
 8005ef6:	4614      	mov	r4, r2
 8005ef8:	461d      	mov	r5, r3
 8005efa:	6828      	ldr	r0, [r5, #0]
 8005efc:	6869      	ldr	r1, [r5, #4]
 8005efe:	68aa      	ldr	r2, [r5, #8]
 8005f00:	68eb      	ldr	r3, [r5, #12]
 8005f02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f04:	7c2b      	ldrb	r3, [r5, #16]
 8005f06:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 8005f08:	4a68      	ldr	r2, [pc, #416]	@ (80060ac <loadMenuTexts+0x408>)
 8005f0a:	4b69      	ldr	r3, [pc, #420]	@ (80060b0 <loadMenuTexts+0x40c>)
 8005f0c:	4614      	mov	r4, r2
 8005f0e:	461d      	mov	r5, r3
 8005f10:	6828      	ldr	r0, [r5, #0]
 8005f12:	6869      	ldr	r1, [r5, #4]
 8005f14:	68aa      	ldr	r2, [r5, #8]
 8005f16:	68eb      	ldr	r3, [r5, #12]
 8005f18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f1a:	7c2b      	ldrb	r3, [r5, #16]
 8005f1c:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 8005f1e:	4a65      	ldr	r2, [pc, #404]	@ (80060b4 <loadMenuTexts+0x410>)
 8005f20:	4b65      	ldr	r3, [pc, #404]	@ (80060b8 <loadMenuTexts+0x414>)
 8005f22:	4614      	mov	r4, r2
 8005f24:	461d      	mov	r5, r3
 8005f26:	6828      	ldr	r0, [r5, #0]
 8005f28:	6869      	ldr	r1, [r5, #4]
 8005f2a:	68aa      	ldr	r2, [r5, #8]
 8005f2c:	68eb      	ldr	r3, [r5, #12]
 8005f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f30:	7c2b      	ldrb	r3, [r5, #16]
 8005f32:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 8005f34:	4a61      	ldr	r2, [pc, #388]	@ (80060bc <loadMenuTexts+0x418>)
 8005f36:	4b62      	ldr	r3, [pc, #392]	@ (80060c0 <loadMenuTexts+0x41c>)
 8005f38:	4614      	mov	r4, r2
 8005f3a:	461d      	mov	r5, r3
 8005f3c:	6828      	ldr	r0, [r5, #0]
 8005f3e:	6869      	ldr	r1, [r5, #4]
 8005f40:	68aa      	ldr	r2, [r5, #8]
 8005f42:	68eb      	ldr	r3, [r5, #12]
 8005f44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f46:	7c2b      	ldrb	r3, [r5, #16]
 8005f48:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 8005f4a:	4a5e      	ldr	r2, [pc, #376]	@ (80060c4 <loadMenuTexts+0x420>)
 8005f4c:	4b5e      	ldr	r3, [pc, #376]	@ (80060c8 <loadMenuTexts+0x424>)
 8005f4e:	4614      	mov	r4, r2
 8005f50:	461d      	mov	r5, r3
 8005f52:	6828      	ldr	r0, [r5, #0]
 8005f54:	6869      	ldr	r1, [r5, #4]
 8005f56:	68aa      	ldr	r2, [r5, #8]
 8005f58:	68eb      	ldr	r3, [r5, #12]
 8005f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f5c:	7c2b      	ldrb	r3, [r5, #16]
 8005f5e:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 8005f60:	4a5a      	ldr	r2, [pc, #360]	@ (80060cc <loadMenuTexts+0x428>)
 8005f62:	4b5b      	ldr	r3, [pc, #364]	@ (80060d0 <loadMenuTexts+0x42c>)
 8005f64:	4614      	mov	r4, r2
 8005f66:	461d      	mov	r5, r3
 8005f68:	6828      	ldr	r0, [r5, #0]
 8005f6a:	6869      	ldr	r1, [r5, #4]
 8005f6c:	68aa      	ldr	r2, [r5, #8]
 8005f6e:	68eb      	ldr	r3, [r5, #12]
 8005f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f72:	7c2b      	ldrb	r3, [r5, #16]
 8005f74:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 8005f76:	4a57      	ldr	r2, [pc, #348]	@ (80060d4 <loadMenuTexts+0x430>)
 8005f78:	4b57      	ldr	r3, [pc, #348]	@ (80060d8 <loadMenuTexts+0x434>)
 8005f7a:	4614      	mov	r4, r2
 8005f7c:	461d      	mov	r5, r3
 8005f7e:	6828      	ldr	r0, [r5, #0]
 8005f80:	6869      	ldr	r1, [r5, #4]
 8005f82:	68aa      	ldr	r2, [r5, #8]
 8005f84:	68eb      	ldr	r3, [r5, #12]
 8005f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f88:	7c2b      	ldrb	r3, [r5, #16]
 8005f8a:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 8005f8c:	4a53      	ldr	r2, [pc, #332]	@ (80060dc <loadMenuTexts+0x438>)
 8005f8e:	4b54      	ldr	r3, [pc, #336]	@ (80060e0 <loadMenuTexts+0x43c>)
 8005f90:	4614      	mov	r4, r2
 8005f92:	461d      	mov	r5, r3
 8005f94:	6828      	ldr	r0, [r5, #0]
 8005f96:	6869      	ldr	r1, [r5, #4]
 8005f98:	68aa      	ldr	r2, [r5, #8]
 8005f9a:	68eb      	ldr	r3, [r5, #12]
 8005f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f9e:	7c2b      	ldrb	r3, [r5, #16]
 8005fa0:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 8005fa2:	4a50      	ldr	r2, [pc, #320]	@ (80060e4 <loadMenuTexts+0x440>)
 8005fa4:	4b50      	ldr	r3, [pc, #320]	@ (80060e8 <loadMenuTexts+0x444>)
 8005fa6:	4614      	mov	r4, r2
 8005fa8:	461d      	mov	r5, r3
 8005faa:	6828      	ldr	r0, [r5, #0]
 8005fac:	6869      	ldr	r1, [r5, #4]
 8005fae:	68aa      	ldr	r2, [r5, #8]
 8005fb0:	68eb      	ldr	r3, [r5, #12]
 8005fb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fb4:	7c2b      	ldrb	r3, [r5, #16]
 8005fb6:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 8005fb8:	4a4c      	ldr	r2, [pc, #304]	@ (80060ec <loadMenuTexts+0x448>)
 8005fba:	4b4d      	ldr	r3, [pc, #308]	@ (80060f0 <loadMenuTexts+0x44c>)
 8005fbc:	4614      	mov	r4, r2
 8005fbe:	461d      	mov	r5, r3
 8005fc0:	6828      	ldr	r0, [r5, #0]
 8005fc2:	6869      	ldr	r1, [r5, #4]
 8005fc4:	68aa      	ldr	r2, [r5, #8]
 8005fc6:	68eb      	ldr	r3, [r5, #12]
 8005fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fca:	7c2b      	ldrb	r3, [r5, #16]
 8005fcc:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 8005fce:	4a49      	ldr	r2, [pc, #292]	@ (80060f4 <loadMenuTexts+0x450>)
 8005fd0:	e092      	b.n	80060f8 <loadMenuTexts+0x454>
 8005fd2:	bf00      	nop
 8005fd4:	200010d4 	.word	0x200010d4
 8005fd8:	2000018c 	.word	0x2000018c
 8005fdc:	200010e8 	.word	0x200010e8
 8005fe0:	200001a0 	.word	0x200001a0
 8005fe4:	200010fc 	.word	0x200010fc
 8005fe8:	200001b4 	.word	0x200001b4
 8005fec:	20001110 	.word	0x20001110
 8005ff0:	200001c8 	.word	0x200001c8
 8005ff4:	20001124 	.word	0x20001124
 8005ff8:	200001dc 	.word	0x200001dc
 8005ffc:	20001138 	.word	0x20001138
 8006000:	200001f0 	.word	0x200001f0
 8006004:	2000114c 	.word	0x2000114c
 8006008:	20000204 	.word	0x20000204
 800600c:	20001160 	.word	0x20001160
 8006010:	20000218 	.word	0x20000218
 8006014:	20001174 	.word	0x20001174
 8006018:	2000022c 	.word	0x2000022c
 800601c:	20001188 	.word	0x20001188
 8006020:	20000240 	.word	0x20000240
 8006024:	2000119c 	.word	0x2000119c
 8006028:	20000254 	.word	0x20000254
 800602c:	200011b0 	.word	0x200011b0
 8006030:	20000268 	.word	0x20000268
 8006034:	200011c4 	.word	0x200011c4
 8006038:	2000027c 	.word	0x2000027c
 800603c:	200011d8 	.word	0x200011d8
 8006040:	20000290 	.word	0x20000290
 8006044:	200011ec 	.word	0x200011ec
 8006048:	200002a4 	.word	0x200002a4
 800604c:	20001200 	.word	0x20001200
 8006050:	200002b8 	.word	0x200002b8
 8006054:	20001214 	.word	0x20001214
 8006058:	200002cc 	.word	0x200002cc
 800605c:	20001228 	.word	0x20001228
 8006060:	200002e0 	.word	0x200002e0
 8006064:	2000123c 	.word	0x2000123c
 8006068:	200002f4 	.word	0x200002f4
 800606c:	20001250 	.word	0x20001250
 8006070:	20000308 	.word	0x20000308
 8006074:	20001264 	.word	0x20001264
 8006078:	2000031c 	.word	0x2000031c
 800607c:	20001278 	.word	0x20001278
 8006080:	20000330 	.word	0x20000330
 8006084:	2000128c 	.word	0x2000128c
 8006088:	20000344 	.word	0x20000344
 800608c:	200012a0 	.word	0x200012a0
 8006090:	20000358 	.word	0x20000358
 8006094:	200012b4 	.word	0x200012b4
 8006098:	2000036c 	.word	0x2000036c
 800609c:	200012c8 	.word	0x200012c8
 80060a0:	20000380 	.word	0x20000380
 80060a4:	200012dc 	.word	0x200012dc
 80060a8:	20000394 	.word	0x20000394
 80060ac:	200012f0 	.word	0x200012f0
 80060b0:	200003a8 	.word	0x200003a8
 80060b4:	20001304 	.word	0x20001304
 80060b8:	200003bc 	.word	0x200003bc
 80060bc:	20001318 	.word	0x20001318
 80060c0:	200003d0 	.word	0x200003d0
 80060c4:	2000132c 	.word	0x2000132c
 80060c8:	200003e4 	.word	0x200003e4
 80060cc:	20001340 	.word	0x20001340
 80060d0:	200003f8 	.word	0x200003f8
 80060d4:	20001354 	.word	0x20001354
 80060d8:	2000040c 	.word	0x2000040c
 80060dc:	20001368 	.word	0x20001368
 80060e0:	20000420 	.word	0x20000420
 80060e4:	2000137c 	.word	0x2000137c
 80060e8:	20000434 	.word	0x20000434
 80060ec:	20001390 	.word	0x20001390
 80060f0:	20000448 	.word	0x20000448
 80060f4:	200013a4 	.word	0x200013a4
 80060f8:	4bc7      	ldr	r3, [pc, #796]	@ (8006418 <loadMenuTexts+0x774>)
 80060fa:	4614      	mov	r4, r2
 80060fc:	461d      	mov	r5, r3
 80060fe:	6828      	ldr	r0, [r5, #0]
 8006100:	6869      	ldr	r1, [r5, #4]
 8006102:	68aa      	ldr	r2, [r5, #8]
 8006104:	68eb      	ldr	r3, [r5, #12]
 8006106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006108:	7c2b      	ldrb	r3, [r5, #16]
 800610a:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 800610c:	4ac3      	ldr	r2, [pc, #780]	@ (800641c <loadMenuTexts+0x778>)
 800610e:	4bc4      	ldr	r3, [pc, #784]	@ (8006420 <loadMenuTexts+0x77c>)
 8006110:	4614      	mov	r4, r2
 8006112:	461d      	mov	r5, r3
 8006114:	6828      	ldr	r0, [r5, #0]
 8006116:	6869      	ldr	r1, [r5, #4]
 8006118:	68aa      	ldr	r2, [r5, #8]
 800611a:	68eb      	ldr	r3, [r5, #12]
 800611c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800611e:	7c2b      	ldrb	r3, [r5, #16]
 8006120:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 8006122:	4ac0      	ldr	r2, [pc, #768]	@ (8006424 <loadMenuTexts+0x780>)
 8006124:	4bc0      	ldr	r3, [pc, #768]	@ (8006428 <loadMenuTexts+0x784>)
 8006126:	4614      	mov	r4, r2
 8006128:	461d      	mov	r5, r3
 800612a:	6828      	ldr	r0, [r5, #0]
 800612c:	6869      	ldr	r1, [r5, #4]
 800612e:	68aa      	ldr	r2, [r5, #8]
 8006130:	68eb      	ldr	r3, [r5, #12]
 8006132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006134:	7c2b      	ldrb	r3, [r5, #16]
 8006136:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 8006138:	4abc      	ldr	r2, [pc, #752]	@ (800642c <loadMenuTexts+0x788>)
 800613a:	4bbd      	ldr	r3, [pc, #756]	@ (8006430 <loadMenuTexts+0x78c>)
 800613c:	4614      	mov	r4, r2
 800613e:	461d      	mov	r5, r3
 8006140:	6828      	ldr	r0, [r5, #0]
 8006142:	6869      	ldr	r1, [r5, #4]
 8006144:	68aa      	ldr	r2, [r5, #8]
 8006146:	68eb      	ldr	r3, [r5, #12]
 8006148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800614a:	7c2b      	ldrb	r3, [r5, #16]
 800614c:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 800614e:	4ab9      	ldr	r2, [pc, #740]	@ (8006434 <loadMenuTexts+0x790>)
 8006150:	4bb9      	ldr	r3, [pc, #740]	@ (8006438 <loadMenuTexts+0x794>)
 8006152:	4614      	mov	r4, r2
 8006154:	461d      	mov	r5, r3
 8006156:	6828      	ldr	r0, [r5, #0]
 8006158:	6869      	ldr	r1, [r5, #4]
 800615a:	68aa      	ldr	r2, [r5, #8]
 800615c:	68eb      	ldr	r3, [r5, #12]
 800615e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006160:	7c2b      	ldrb	r3, [r5, #16]
 8006162:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 8006164:	4ab5      	ldr	r2, [pc, #724]	@ (800643c <loadMenuTexts+0x798>)
 8006166:	4bb6      	ldr	r3, [pc, #728]	@ (8006440 <loadMenuTexts+0x79c>)
 8006168:	4614      	mov	r4, r2
 800616a:	461d      	mov	r5, r3
 800616c:	6828      	ldr	r0, [r5, #0]
 800616e:	6869      	ldr	r1, [r5, #4]
 8006170:	68aa      	ldr	r2, [r5, #8]
 8006172:	68eb      	ldr	r3, [r5, #12]
 8006174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006176:	7c2b      	ldrb	r3, [r5, #16]
 8006178:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 800617a:	4ab2      	ldr	r2, [pc, #712]	@ (8006444 <loadMenuTexts+0x7a0>)
 800617c:	4bb2      	ldr	r3, [pc, #712]	@ (8006448 <loadMenuTexts+0x7a4>)
 800617e:	4614      	mov	r4, r2
 8006180:	461d      	mov	r5, r3
 8006182:	6828      	ldr	r0, [r5, #0]
 8006184:	6869      	ldr	r1, [r5, #4]
 8006186:	68aa      	ldr	r2, [r5, #8]
 8006188:	68eb      	ldr	r3, [r5, #12]
 800618a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800618c:	7c2b      	ldrb	r3, [r5, #16]
 800618e:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 8006190:	4aae      	ldr	r2, [pc, #696]	@ (800644c <loadMenuTexts+0x7a8>)
 8006192:	4baf      	ldr	r3, [pc, #700]	@ (8006450 <loadMenuTexts+0x7ac>)
 8006194:	4614      	mov	r4, r2
 8006196:	461d      	mov	r5, r3
 8006198:	6828      	ldr	r0, [r5, #0]
 800619a:	6869      	ldr	r1, [r5, #4]
 800619c:	68aa      	ldr	r2, [r5, #8]
 800619e:	68eb      	ldr	r3, [r5, #12]
 80061a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061a2:	7c2b      	ldrb	r3, [r5, #16]
 80061a4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 80061a6:	4aab      	ldr	r2, [pc, #684]	@ (8006454 <loadMenuTexts+0x7b0>)
 80061a8:	4bab      	ldr	r3, [pc, #684]	@ (8006458 <loadMenuTexts+0x7b4>)
 80061aa:	4614      	mov	r4, r2
 80061ac:	461d      	mov	r5, r3
 80061ae:	6828      	ldr	r0, [r5, #0]
 80061b0:	6869      	ldr	r1, [r5, #4]
 80061b2:	68aa      	ldr	r2, [r5, #8]
 80061b4:	68eb      	ldr	r3, [r5, #12]
 80061b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061b8:	7c2b      	ldrb	r3, [r5, #16]
 80061ba:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 80061bc:	4aa7      	ldr	r2, [pc, #668]	@ (800645c <loadMenuTexts+0x7b8>)
 80061be:	4ba8      	ldr	r3, [pc, #672]	@ (8006460 <loadMenuTexts+0x7bc>)
 80061c0:	4614      	mov	r4, r2
 80061c2:	461d      	mov	r5, r3
 80061c4:	6828      	ldr	r0, [r5, #0]
 80061c6:	6869      	ldr	r1, [r5, #4]
 80061c8:	68aa      	ldr	r2, [r5, #8]
 80061ca:	68eb      	ldr	r3, [r5, #12]
 80061cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ce:	7c2b      	ldrb	r3, [r5, #16]
 80061d0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 80061d2:	4aa4      	ldr	r2, [pc, #656]	@ (8006464 <loadMenuTexts+0x7c0>)
 80061d4:	4ba4      	ldr	r3, [pc, #656]	@ (8006468 <loadMenuTexts+0x7c4>)
 80061d6:	4614      	mov	r4, r2
 80061d8:	461d      	mov	r5, r3
 80061da:	6828      	ldr	r0, [r5, #0]
 80061dc:	6869      	ldr	r1, [r5, #4]
 80061de:	68aa      	ldr	r2, [r5, #8]
 80061e0:	68eb      	ldr	r3, [r5, #12]
 80061e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061e4:	7c2b      	ldrb	r3, [r5, #16]
 80061e6:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 80061e8:	4aa0      	ldr	r2, [pc, #640]	@ (800646c <loadMenuTexts+0x7c8>)
 80061ea:	4ba1      	ldr	r3, [pc, #644]	@ (8006470 <loadMenuTexts+0x7cc>)
 80061ec:	4614      	mov	r4, r2
 80061ee:	461d      	mov	r5, r3
 80061f0:	6828      	ldr	r0, [r5, #0]
 80061f2:	6869      	ldr	r1, [r5, #4]
 80061f4:	68aa      	ldr	r2, [r5, #8]
 80061f6:	68eb      	ldr	r3, [r5, #12]
 80061f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061fa:	7c2b      	ldrb	r3, [r5, #16]
 80061fc:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 80061fe:	4a9d      	ldr	r2, [pc, #628]	@ (8006474 <loadMenuTexts+0x7d0>)
 8006200:	4b9d      	ldr	r3, [pc, #628]	@ (8006478 <loadMenuTexts+0x7d4>)
 8006202:	4614      	mov	r4, r2
 8006204:	461d      	mov	r5, r3
 8006206:	6828      	ldr	r0, [r5, #0]
 8006208:	6869      	ldr	r1, [r5, #4]
 800620a:	68aa      	ldr	r2, [r5, #8]
 800620c:	68eb      	ldr	r3, [r5, #12]
 800620e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006210:	7c2b      	ldrb	r3, [r5, #16]
 8006212:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 8006214:	4a99      	ldr	r2, [pc, #612]	@ (800647c <loadMenuTexts+0x7d8>)
 8006216:	4b9a      	ldr	r3, [pc, #616]	@ (8006480 <loadMenuTexts+0x7dc>)
 8006218:	4614      	mov	r4, r2
 800621a:	461d      	mov	r5, r3
 800621c:	6828      	ldr	r0, [r5, #0]
 800621e:	6869      	ldr	r1, [r5, #4]
 8006220:	68aa      	ldr	r2, [r5, #8]
 8006222:	68eb      	ldr	r3, [r5, #12]
 8006224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006226:	7c2b      	ldrb	r3, [r5, #16]
 8006228:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 800622a:	4a96      	ldr	r2, [pc, #600]	@ (8006484 <loadMenuTexts+0x7e0>)
 800622c:	4b96      	ldr	r3, [pc, #600]	@ (8006488 <loadMenuTexts+0x7e4>)
 800622e:	4614      	mov	r4, r2
 8006230:	461d      	mov	r5, r3
 8006232:	6828      	ldr	r0, [r5, #0]
 8006234:	6869      	ldr	r1, [r5, #4]
 8006236:	68aa      	ldr	r2, [r5, #8]
 8006238:	68eb      	ldr	r3, [r5, #12]
 800623a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800623c:	7c2b      	ldrb	r3, [r5, #16]
 800623e:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 8006240:	4a92      	ldr	r2, [pc, #584]	@ (800648c <loadMenuTexts+0x7e8>)
 8006242:	4b93      	ldr	r3, [pc, #588]	@ (8006490 <loadMenuTexts+0x7ec>)
 8006244:	4614      	mov	r4, r2
 8006246:	461d      	mov	r5, r3
 8006248:	6828      	ldr	r0, [r5, #0]
 800624a:	6869      	ldr	r1, [r5, #4]
 800624c:	68aa      	ldr	r2, [r5, #8]
 800624e:	68eb      	ldr	r3, [r5, #12]
 8006250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006252:	7c2b      	ldrb	r3, [r5, #16]
 8006254:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 8006256:	4a8f      	ldr	r2, [pc, #572]	@ (8006494 <loadMenuTexts+0x7f0>)
 8006258:	4b8f      	ldr	r3, [pc, #572]	@ (8006498 <loadMenuTexts+0x7f4>)
 800625a:	4614      	mov	r4, r2
 800625c:	461d      	mov	r5, r3
 800625e:	6828      	ldr	r0, [r5, #0]
 8006260:	6869      	ldr	r1, [r5, #4]
 8006262:	68aa      	ldr	r2, [r5, #8]
 8006264:	68eb      	ldr	r3, [r5, #12]
 8006266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006268:	7c2b      	ldrb	r3, [r5, #16]
 800626a:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 800626c:	4a8b      	ldr	r2, [pc, #556]	@ (800649c <loadMenuTexts+0x7f8>)
 800626e:	4b8c      	ldr	r3, [pc, #560]	@ (80064a0 <loadMenuTexts+0x7fc>)
 8006270:	4614      	mov	r4, r2
 8006272:	461d      	mov	r5, r3
 8006274:	6828      	ldr	r0, [r5, #0]
 8006276:	6869      	ldr	r1, [r5, #4]
 8006278:	68aa      	ldr	r2, [r5, #8]
 800627a:	68eb      	ldr	r3, [r5, #12]
 800627c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800627e:	7c2b      	ldrb	r3, [r5, #16]
 8006280:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 8006282:	4a88      	ldr	r2, [pc, #544]	@ (80064a4 <loadMenuTexts+0x800>)
 8006284:	4b88      	ldr	r3, [pc, #544]	@ (80064a8 <loadMenuTexts+0x804>)
 8006286:	4614      	mov	r4, r2
 8006288:	461d      	mov	r5, r3
 800628a:	6828      	ldr	r0, [r5, #0]
 800628c:	6869      	ldr	r1, [r5, #4]
 800628e:	68aa      	ldr	r2, [r5, #8]
 8006290:	68eb      	ldr	r3, [r5, #12]
 8006292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006294:	7c2b      	ldrb	r3, [r5, #16]
 8006296:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 8006298:	4a84      	ldr	r2, [pc, #528]	@ (80064ac <loadMenuTexts+0x808>)
 800629a:	4b85      	ldr	r3, [pc, #532]	@ (80064b0 <loadMenuTexts+0x80c>)
 800629c:	4614      	mov	r4, r2
 800629e:	461d      	mov	r5, r3
 80062a0:	6828      	ldr	r0, [r5, #0]
 80062a2:	6869      	ldr	r1, [r5, #4]
 80062a4:	68aa      	ldr	r2, [r5, #8]
 80062a6:	68eb      	ldr	r3, [r5, #12]
 80062a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062aa:	7c2b      	ldrb	r3, [r5, #16]
 80062ac:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 80062ae:	4a81      	ldr	r2, [pc, #516]	@ (80064b4 <loadMenuTexts+0x810>)
 80062b0:	4b81      	ldr	r3, [pc, #516]	@ (80064b8 <loadMenuTexts+0x814>)
 80062b2:	4614      	mov	r4, r2
 80062b4:	461d      	mov	r5, r3
 80062b6:	6828      	ldr	r0, [r5, #0]
 80062b8:	6869      	ldr	r1, [r5, #4]
 80062ba:	68aa      	ldr	r2, [r5, #8]
 80062bc:	68eb      	ldr	r3, [r5, #12]
 80062be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062c0:	7c2b      	ldrb	r3, [r5, #16]
 80062c2:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 80062c4:	4a7d      	ldr	r2, [pc, #500]	@ (80064bc <loadMenuTexts+0x818>)
 80062c6:	4b7e      	ldr	r3, [pc, #504]	@ (80064c0 <loadMenuTexts+0x81c>)
 80062c8:	4614      	mov	r4, r2
 80062ca:	461d      	mov	r5, r3
 80062cc:	6828      	ldr	r0, [r5, #0]
 80062ce:	6869      	ldr	r1, [r5, #4]
 80062d0:	68aa      	ldr	r2, [r5, #8]
 80062d2:	68eb      	ldr	r3, [r5, #12]
 80062d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062d6:	7c2b      	ldrb	r3, [r5, #16]
 80062d8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 80062da:	4a7a      	ldr	r2, [pc, #488]	@ (80064c4 <loadMenuTexts+0x820>)
 80062dc:	4b7a      	ldr	r3, [pc, #488]	@ (80064c8 <loadMenuTexts+0x824>)
 80062de:	4614      	mov	r4, r2
 80062e0:	461d      	mov	r5, r3
 80062e2:	6828      	ldr	r0, [r5, #0]
 80062e4:	6869      	ldr	r1, [r5, #4]
 80062e6:	68aa      	ldr	r2, [r5, #8]
 80062e8:	68eb      	ldr	r3, [r5, #12]
 80062ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062ec:	7c2b      	ldrb	r3, [r5, #16]
 80062ee:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 80062f0:	4a76      	ldr	r2, [pc, #472]	@ (80064cc <loadMenuTexts+0x828>)
 80062f2:	4b77      	ldr	r3, [pc, #476]	@ (80064d0 <loadMenuTexts+0x82c>)
 80062f4:	4614      	mov	r4, r2
 80062f6:	461d      	mov	r5, r3
 80062f8:	6828      	ldr	r0, [r5, #0]
 80062fa:	6869      	ldr	r1, [r5, #4]
 80062fc:	68aa      	ldr	r2, [r5, #8]
 80062fe:	68eb      	ldr	r3, [r5, #12]
 8006300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006302:	7c2b      	ldrb	r3, [r5, #16]
 8006304:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 8006306:	4a73      	ldr	r2, [pc, #460]	@ (80064d4 <loadMenuTexts+0x830>)
 8006308:	4b73      	ldr	r3, [pc, #460]	@ (80064d8 <loadMenuTexts+0x834>)
 800630a:	4614      	mov	r4, r2
 800630c:	461d      	mov	r5, r3
 800630e:	6828      	ldr	r0, [r5, #0]
 8006310:	6869      	ldr	r1, [r5, #4]
 8006312:	68aa      	ldr	r2, [r5, #8]
 8006314:	68eb      	ldr	r3, [r5, #12]
 8006316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006318:	7c2b      	ldrb	r3, [r5, #16]
 800631a:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 800631c:	4a6f      	ldr	r2, [pc, #444]	@ (80064dc <loadMenuTexts+0x838>)
 800631e:	4b70      	ldr	r3, [pc, #448]	@ (80064e0 <loadMenuTexts+0x83c>)
 8006320:	4614      	mov	r4, r2
 8006322:	461d      	mov	r5, r3
 8006324:	6828      	ldr	r0, [r5, #0]
 8006326:	6869      	ldr	r1, [r5, #4]
 8006328:	68aa      	ldr	r2, [r5, #8]
 800632a:	68eb      	ldr	r3, [r5, #12]
 800632c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800632e:	7c2b      	ldrb	r3, [r5, #16]
 8006330:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 8006332:	4a6c      	ldr	r2, [pc, #432]	@ (80064e4 <loadMenuTexts+0x840>)
 8006334:	4b6c      	ldr	r3, [pc, #432]	@ (80064e8 <loadMenuTexts+0x844>)
 8006336:	4614      	mov	r4, r2
 8006338:	461d      	mov	r5, r3
 800633a:	6828      	ldr	r0, [r5, #0]
 800633c:	6869      	ldr	r1, [r5, #4]
 800633e:	68aa      	ldr	r2, [r5, #8]
 8006340:	68eb      	ldr	r3, [r5, #12]
 8006342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006344:	7c2b      	ldrb	r3, [r5, #16]
 8006346:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 8006348:	4a68      	ldr	r2, [pc, #416]	@ (80064ec <loadMenuTexts+0x848>)
 800634a:	4b69      	ldr	r3, [pc, #420]	@ (80064f0 <loadMenuTexts+0x84c>)
 800634c:	4614      	mov	r4, r2
 800634e:	461d      	mov	r5, r3
 8006350:	6828      	ldr	r0, [r5, #0]
 8006352:	6869      	ldr	r1, [r5, #4]
 8006354:	68aa      	ldr	r2, [r5, #8]
 8006356:	68eb      	ldr	r3, [r5, #12]
 8006358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800635a:	7c2b      	ldrb	r3, [r5, #16]
 800635c:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 800635e:	4a65      	ldr	r2, [pc, #404]	@ (80064f4 <loadMenuTexts+0x850>)
 8006360:	4b65      	ldr	r3, [pc, #404]	@ (80064f8 <loadMenuTexts+0x854>)
 8006362:	4614      	mov	r4, r2
 8006364:	461d      	mov	r5, r3
 8006366:	6828      	ldr	r0, [r5, #0]
 8006368:	6869      	ldr	r1, [r5, #4]
 800636a:	68aa      	ldr	r2, [r5, #8]
 800636c:	68eb      	ldr	r3, [r5, #12]
 800636e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006370:	7c2b      	ldrb	r3, [r5, #16]
 8006372:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 8006374:	4a61      	ldr	r2, [pc, #388]	@ (80064fc <loadMenuTexts+0x858>)
 8006376:	4b62      	ldr	r3, [pc, #392]	@ (8006500 <loadMenuTexts+0x85c>)
 8006378:	4614      	mov	r4, r2
 800637a:	461d      	mov	r5, r3
 800637c:	6828      	ldr	r0, [r5, #0]
 800637e:	6869      	ldr	r1, [r5, #4]
 8006380:	68aa      	ldr	r2, [r5, #8]
 8006382:	68eb      	ldr	r3, [r5, #12]
 8006384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006386:	7c2b      	ldrb	r3, [r5, #16]
 8006388:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 800638a:	4a5e      	ldr	r2, [pc, #376]	@ (8006504 <loadMenuTexts+0x860>)
 800638c:	4b5e      	ldr	r3, [pc, #376]	@ (8006508 <loadMenuTexts+0x864>)
 800638e:	4614      	mov	r4, r2
 8006390:	461d      	mov	r5, r3
 8006392:	6828      	ldr	r0, [r5, #0]
 8006394:	6869      	ldr	r1, [r5, #4]
 8006396:	68aa      	ldr	r2, [r5, #8]
 8006398:	68eb      	ldr	r3, [r5, #12]
 800639a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800639c:	7c2b      	ldrb	r3, [r5, #16]
 800639e:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 80063a0:	4a5a      	ldr	r2, [pc, #360]	@ (800650c <loadMenuTexts+0x868>)
 80063a2:	4b5b      	ldr	r3, [pc, #364]	@ (8006510 <loadMenuTexts+0x86c>)
 80063a4:	4614      	mov	r4, r2
 80063a6:	461d      	mov	r5, r3
 80063a8:	6828      	ldr	r0, [r5, #0]
 80063aa:	6869      	ldr	r1, [r5, #4]
 80063ac:	68aa      	ldr	r2, [r5, #8]
 80063ae:	68eb      	ldr	r3, [r5, #12]
 80063b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063b2:	7c2b      	ldrb	r3, [r5, #16]
 80063b4:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 80063b6:	4a57      	ldr	r2, [pc, #348]	@ (8006514 <loadMenuTexts+0x870>)
 80063b8:	4b57      	ldr	r3, [pc, #348]	@ (8006518 <loadMenuTexts+0x874>)
 80063ba:	4614      	mov	r4, r2
 80063bc:	461d      	mov	r5, r3
 80063be:	6828      	ldr	r0, [r5, #0]
 80063c0:	6869      	ldr	r1, [r5, #4]
 80063c2:	68aa      	ldr	r2, [r5, #8]
 80063c4:	68eb      	ldr	r3, [r5, #12]
 80063c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063c8:	7c2b      	ldrb	r3, [r5, #16]
 80063ca:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 80063cc:	4a53      	ldr	r2, [pc, #332]	@ (800651c <loadMenuTexts+0x878>)
 80063ce:	4b54      	ldr	r3, [pc, #336]	@ (8006520 <loadMenuTexts+0x87c>)
 80063d0:	4614      	mov	r4, r2
 80063d2:	461d      	mov	r5, r3
 80063d4:	6828      	ldr	r0, [r5, #0]
 80063d6:	6869      	ldr	r1, [r5, #4]
 80063d8:	68aa      	ldr	r2, [r5, #8]
 80063da:	68eb      	ldr	r3, [r5, #12]
 80063dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063de:	7c2b      	ldrb	r3, [r5, #16]
 80063e0:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 80063e2:	4a50      	ldr	r2, [pc, #320]	@ (8006524 <loadMenuTexts+0x880>)
 80063e4:	4b50      	ldr	r3, [pc, #320]	@ (8006528 <loadMenuTexts+0x884>)
 80063e6:	4614      	mov	r4, r2
 80063e8:	461d      	mov	r5, r3
 80063ea:	6828      	ldr	r0, [r5, #0]
 80063ec:	6869      	ldr	r1, [r5, #4]
 80063ee:	68aa      	ldr	r2, [r5, #8]
 80063f0:	68eb      	ldr	r3, [r5, #12]
 80063f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063f4:	7c2b      	ldrb	r3, [r5, #16]
 80063f6:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 80063f8:	4a4c      	ldr	r2, [pc, #304]	@ (800652c <loadMenuTexts+0x888>)
 80063fa:	4b4d      	ldr	r3, [pc, #308]	@ (8006530 <loadMenuTexts+0x88c>)
 80063fc:	4614      	mov	r4, r2
 80063fe:	461d      	mov	r5, r3
 8006400:	6828      	ldr	r0, [r5, #0]
 8006402:	6869      	ldr	r1, [r5, #4]
 8006404:	68aa      	ldr	r2, [r5, #8]
 8006406:	68eb      	ldr	r3, [r5, #12]
 8006408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800640a:	7c2b      	ldrb	r3, [r5, #16]
 800640c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 800640e:	4a49      	ldr	r2, [pc, #292]	@ (8006534 <loadMenuTexts+0x890>)
 8006410:	4b49      	ldr	r3, [pc, #292]	@ (8006538 <loadMenuTexts+0x894>)
 8006412:	4614      	mov	r4, r2
 8006414:	461d      	mov	r5, r3
 8006416:	e091      	b.n	800653c <loadMenuTexts+0x898>
 8006418:	2000045c 	.word	0x2000045c
 800641c:	200013b8 	.word	0x200013b8
 8006420:	20000470 	.word	0x20000470
 8006424:	200013cc 	.word	0x200013cc
 8006428:	20000484 	.word	0x20000484
 800642c:	200013e0 	.word	0x200013e0
 8006430:	20000498 	.word	0x20000498
 8006434:	200013f4 	.word	0x200013f4
 8006438:	200004ac 	.word	0x200004ac
 800643c:	20001408 	.word	0x20001408
 8006440:	200004c0 	.word	0x200004c0
 8006444:	2000141c 	.word	0x2000141c
 8006448:	200004d4 	.word	0x200004d4
 800644c:	20001430 	.word	0x20001430
 8006450:	200004e8 	.word	0x200004e8
 8006454:	20001444 	.word	0x20001444
 8006458:	200004fc 	.word	0x200004fc
 800645c:	20001458 	.word	0x20001458
 8006460:	20000510 	.word	0x20000510
 8006464:	2000146c 	.word	0x2000146c
 8006468:	20000524 	.word	0x20000524
 800646c:	20001480 	.word	0x20001480
 8006470:	20000538 	.word	0x20000538
 8006474:	20001494 	.word	0x20001494
 8006478:	2000054c 	.word	0x2000054c
 800647c:	200014a8 	.word	0x200014a8
 8006480:	20000560 	.word	0x20000560
 8006484:	200014bc 	.word	0x200014bc
 8006488:	20000574 	.word	0x20000574
 800648c:	200014d0 	.word	0x200014d0
 8006490:	20000588 	.word	0x20000588
 8006494:	200014e4 	.word	0x200014e4
 8006498:	2000059c 	.word	0x2000059c
 800649c:	200014f8 	.word	0x200014f8
 80064a0:	200005b0 	.word	0x200005b0
 80064a4:	2000150c 	.word	0x2000150c
 80064a8:	200005c4 	.word	0x200005c4
 80064ac:	20001520 	.word	0x20001520
 80064b0:	200005d8 	.word	0x200005d8
 80064b4:	20001534 	.word	0x20001534
 80064b8:	200005ec 	.word	0x200005ec
 80064bc:	20001548 	.word	0x20001548
 80064c0:	20000600 	.word	0x20000600
 80064c4:	2000155c 	.word	0x2000155c
 80064c8:	20000614 	.word	0x20000614
 80064cc:	20001570 	.word	0x20001570
 80064d0:	20000628 	.word	0x20000628
 80064d4:	20001584 	.word	0x20001584
 80064d8:	2000063c 	.word	0x2000063c
 80064dc:	20001598 	.word	0x20001598
 80064e0:	20000650 	.word	0x20000650
 80064e4:	200015ac 	.word	0x200015ac
 80064e8:	20000664 	.word	0x20000664
 80064ec:	200015c0 	.word	0x200015c0
 80064f0:	20000678 	.word	0x20000678
 80064f4:	200015d4 	.word	0x200015d4
 80064f8:	2000068c 	.word	0x2000068c
 80064fc:	200015e8 	.word	0x200015e8
 8006500:	200006a0 	.word	0x200006a0
 8006504:	200015fc 	.word	0x200015fc
 8006508:	200006b4 	.word	0x200006b4
 800650c:	20001610 	.word	0x20001610
 8006510:	200006c8 	.word	0x200006c8
 8006514:	20001624 	.word	0x20001624
 8006518:	200006dc 	.word	0x200006dc
 800651c:	20001638 	.word	0x20001638
 8006520:	200006f0 	.word	0x200006f0
 8006524:	2000164c 	.word	0x2000164c
 8006528:	20000c7c 	.word	0x20000c7c
 800652c:	20001660 	.word	0x20001660
 8006530:	20000c90 	.word	0x20000c90
 8006534:	20001674 	.word	0x20001674
 8006538:	20000ca4 	.word	0x20000ca4
 800653c:	6828      	ldr	r0, [r5, #0]
 800653e:	6869      	ldr	r1, [r5, #4]
 8006540:	68aa      	ldr	r2, [r5, #8]
 8006542:	68eb      	ldr	r3, [r5, #12]
 8006544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006546:	7c2b      	ldrb	r3, [r5, #16]
 8006548:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 800654a:	4a59      	ldr	r2, [pc, #356]	@ (80066b0 <loadMenuTexts+0xa0c>)
 800654c:	4b59      	ldr	r3, [pc, #356]	@ (80066b4 <loadMenuTexts+0xa10>)
 800654e:	4614      	mov	r4, r2
 8006550:	461d      	mov	r5, r3
 8006552:	6828      	ldr	r0, [r5, #0]
 8006554:	6869      	ldr	r1, [r5, #4]
 8006556:	68aa      	ldr	r2, [r5, #8]
 8006558:	68eb      	ldr	r3, [r5, #12]
 800655a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800655c:	7c2b      	ldrb	r3, [r5, #16]
 800655e:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 8006560:	4a55      	ldr	r2, [pc, #340]	@ (80066b8 <loadMenuTexts+0xa14>)
 8006562:	4b56      	ldr	r3, [pc, #344]	@ (80066bc <loadMenuTexts+0xa18>)
 8006564:	4614      	mov	r4, r2
 8006566:	461d      	mov	r5, r3
 8006568:	6828      	ldr	r0, [r5, #0]
 800656a:	6869      	ldr	r1, [r5, #4]
 800656c:	68aa      	ldr	r2, [r5, #8]
 800656e:	68eb      	ldr	r3, [r5, #12]
 8006570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006572:	7c2b      	ldrb	r3, [r5, #16]
 8006574:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 8006576:	4a52      	ldr	r2, [pc, #328]	@ (80066c0 <loadMenuTexts+0xa1c>)
 8006578:	4b52      	ldr	r3, [pc, #328]	@ (80066c4 <loadMenuTexts+0xa20>)
 800657a:	4614      	mov	r4, r2
 800657c:	461d      	mov	r5, r3
 800657e:	6828      	ldr	r0, [r5, #0]
 8006580:	6869      	ldr	r1, [r5, #4]
 8006582:	68aa      	ldr	r2, [r5, #8]
 8006584:	68eb      	ldr	r3, [r5, #12]
 8006586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006588:	7c2b      	ldrb	r3, [r5, #16]
 800658a:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 800658c:	4a4e      	ldr	r2, [pc, #312]	@ (80066c8 <loadMenuTexts+0xa24>)
 800658e:	4b4f      	ldr	r3, [pc, #316]	@ (80066cc <loadMenuTexts+0xa28>)
 8006590:	4614      	mov	r4, r2
 8006592:	461d      	mov	r5, r3
 8006594:	6828      	ldr	r0, [r5, #0]
 8006596:	6869      	ldr	r1, [r5, #4]
 8006598:	68aa      	ldr	r2, [r5, #8]
 800659a:	68eb      	ldr	r3, [r5, #12]
 800659c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800659e:	7c2b      	ldrb	r3, [r5, #16]
 80065a0:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 80065a2:	4a4b      	ldr	r2, [pc, #300]	@ (80066d0 <loadMenuTexts+0xa2c>)
 80065a4:	4b4b      	ldr	r3, [pc, #300]	@ (80066d4 <loadMenuTexts+0xa30>)
 80065a6:	4614      	mov	r4, r2
 80065a8:	461d      	mov	r5, r3
 80065aa:	6828      	ldr	r0, [r5, #0]
 80065ac:	6869      	ldr	r1, [r5, #4]
 80065ae:	68aa      	ldr	r2, [r5, #8]
 80065b0:	68eb      	ldr	r3, [r5, #12]
 80065b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065b4:	7c2b      	ldrb	r3, [r5, #16]
 80065b6:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 80065b8:	4a47      	ldr	r2, [pc, #284]	@ (80066d8 <loadMenuTexts+0xa34>)
 80065ba:	4b48      	ldr	r3, [pc, #288]	@ (80066dc <loadMenuTexts+0xa38>)
 80065bc:	4614      	mov	r4, r2
 80065be:	461d      	mov	r5, r3
 80065c0:	6828      	ldr	r0, [r5, #0]
 80065c2:	6869      	ldr	r1, [r5, #4]
 80065c4:	68aa      	ldr	r2, [r5, #8]
 80065c6:	68eb      	ldr	r3, [r5, #12]
 80065c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065ca:	7c2b      	ldrb	r3, [r5, #16]
 80065cc:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 80065ce:	4a44      	ldr	r2, [pc, #272]	@ (80066e0 <loadMenuTexts+0xa3c>)
 80065d0:	4b44      	ldr	r3, [pc, #272]	@ (80066e4 <loadMenuTexts+0xa40>)
 80065d2:	4614      	mov	r4, r2
 80065d4:	461d      	mov	r5, r3
 80065d6:	6828      	ldr	r0, [r5, #0]
 80065d8:	6869      	ldr	r1, [r5, #4]
 80065da:	68aa      	ldr	r2, [r5, #8]
 80065dc:	68eb      	ldr	r3, [r5, #12]
 80065de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065e0:	7c2b      	ldrb	r3, [r5, #16]
 80065e2:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 80065e4:	4a40      	ldr	r2, [pc, #256]	@ (80066e8 <loadMenuTexts+0xa44>)
 80065e6:	4b41      	ldr	r3, [pc, #260]	@ (80066ec <loadMenuTexts+0xa48>)
 80065e8:	4614      	mov	r4, r2
 80065ea:	461d      	mov	r5, r3
 80065ec:	6828      	ldr	r0, [r5, #0]
 80065ee:	6869      	ldr	r1, [r5, #4]
 80065f0:	68aa      	ldr	r2, [r5, #8]
 80065f2:	68eb      	ldr	r3, [r5, #12]
 80065f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065f6:	7c2b      	ldrb	r3, [r5, #16]
 80065f8:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 80065fa:	4a3d      	ldr	r2, [pc, #244]	@ (80066f0 <loadMenuTexts+0xa4c>)
 80065fc:	4b3d      	ldr	r3, [pc, #244]	@ (80066f4 <loadMenuTexts+0xa50>)
 80065fe:	4614      	mov	r4, r2
 8006600:	461d      	mov	r5, r3
 8006602:	6828      	ldr	r0, [r5, #0]
 8006604:	6869      	ldr	r1, [r5, #4]
 8006606:	68aa      	ldr	r2, [r5, #8]
 8006608:	68eb      	ldr	r3, [r5, #12]
 800660a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800660c:	7c2b      	ldrb	r3, [r5, #16]
 800660e:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8006610:	4a39      	ldr	r2, [pc, #228]	@ (80066f8 <loadMenuTexts+0xa54>)
 8006612:	4b3a      	ldr	r3, [pc, #232]	@ (80066fc <loadMenuTexts+0xa58>)
 8006614:	4614      	mov	r4, r2
 8006616:	461d      	mov	r5, r3
 8006618:	6828      	ldr	r0, [r5, #0]
 800661a:	6869      	ldr	r1, [r5, #4]
 800661c:	68aa      	ldr	r2, [r5, #8]
 800661e:	68eb      	ldr	r3, [r5, #12]
 8006620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006622:	7c2b      	ldrb	r3, [r5, #16]
 8006624:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 8006626:	4a36      	ldr	r2, [pc, #216]	@ (8006700 <loadMenuTexts+0xa5c>)
 8006628:	4b36      	ldr	r3, [pc, #216]	@ (8006704 <loadMenuTexts+0xa60>)
 800662a:	4614      	mov	r4, r2
 800662c:	461d      	mov	r5, r3
 800662e:	6828      	ldr	r0, [r5, #0]
 8006630:	6869      	ldr	r1, [r5, #4]
 8006632:	68aa      	ldr	r2, [r5, #8]
 8006634:	68eb      	ldr	r3, [r5, #12]
 8006636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006638:	7c2b      	ldrb	r3, [r5, #16]
 800663a:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 800663c:	4a32      	ldr	r2, [pc, #200]	@ (8006708 <loadMenuTexts+0xa64>)
 800663e:	4b33      	ldr	r3, [pc, #204]	@ (800670c <loadMenuTexts+0xa68>)
 8006640:	4614      	mov	r4, r2
 8006642:	461d      	mov	r5, r3
 8006644:	6828      	ldr	r0, [r5, #0]
 8006646:	6869      	ldr	r1, [r5, #4]
 8006648:	68aa      	ldr	r2, [r5, #8]
 800664a:	68eb      	ldr	r3, [r5, #12]
 800664c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800664e:	7c2b      	ldrb	r3, [r5, #16]
 8006650:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 8006652:	4a2f      	ldr	r2, [pc, #188]	@ (8006710 <loadMenuTexts+0xa6c>)
 8006654:	4b2f      	ldr	r3, [pc, #188]	@ (8006714 <loadMenuTexts+0xa70>)
 8006656:	4614      	mov	r4, r2
 8006658:	461d      	mov	r5, r3
 800665a:	6828      	ldr	r0, [r5, #0]
 800665c:	6869      	ldr	r1, [r5, #4]
 800665e:	68aa      	ldr	r2, [r5, #8]
 8006660:	68eb      	ldr	r3, [r5, #12]
 8006662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006664:	7c2b      	ldrb	r3, [r5, #16]
 8006666:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 8006668:	4a2b      	ldr	r2, [pc, #172]	@ (8006718 <loadMenuTexts+0xa74>)
 800666a:	4b2c      	ldr	r3, [pc, #176]	@ (800671c <loadMenuTexts+0xa78>)
 800666c:	4614      	mov	r4, r2
 800666e:	461d      	mov	r5, r3
 8006670:	6828      	ldr	r0, [r5, #0]
 8006672:	6869      	ldr	r1, [r5, #4]
 8006674:	68aa      	ldr	r2, [r5, #8]
 8006676:	68eb      	ldr	r3, [r5, #12]
 8006678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800667a:	7c2b      	ldrb	r3, [r5, #16]
 800667c:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 800667e:	4a28      	ldr	r2, [pc, #160]	@ (8006720 <loadMenuTexts+0xa7c>)
 8006680:	4b28      	ldr	r3, [pc, #160]	@ (8006724 <loadMenuTexts+0xa80>)
 8006682:	4614      	mov	r4, r2
 8006684:	461d      	mov	r5, r3
 8006686:	6828      	ldr	r0, [r5, #0]
 8006688:	6869      	ldr	r1, [r5, #4]
 800668a:	68aa      	ldr	r2, [r5, #8]
 800668c:	68eb      	ldr	r3, [r5, #12]
 800668e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006690:	7c2b      	ldrb	r3, [r5, #16]
 8006692:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 8006694:	4a24      	ldr	r2, [pc, #144]	@ (8006728 <loadMenuTexts+0xa84>)
 8006696:	4b25      	ldr	r3, [pc, #148]	@ (800672c <loadMenuTexts+0xa88>)
 8006698:	4614      	mov	r4, r2
 800669a:	461d      	mov	r5, r3
 800669c:	6828      	ldr	r0, [r5, #0]
 800669e:	6869      	ldr	r1, [r5, #4]
 80066a0:	68aa      	ldr	r2, [r5, #8]
 80066a2:	68eb      	ldr	r3, [r5, #12]
 80066a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066a6:	7c2b      	ldrb	r3, [r5, #16]
 80066a8:	7023      	strb	r3, [r4, #0]
 80066aa:	f000 bd3a 	b.w	8007122 <loadMenuTexts+0x147e>
 80066ae:	bf00      	nop
 80066b0:	20001688 	.word	0x20001688
 80066b4:	20000cb8 	.word	0x20000cb8
 80066b8:	2000169c 	.word	0x2000169c
 80066bc:	20000d1c 	.word	0x20000d1c
 80066c0:	200016b0 	.word	0x200016b0
 80066c4:	20000d30 	.word	0x20000d30
 80066c8:	200016c4 	.word	0x200016c4
 80066cc:	20000d6c 	.word	0x20000d6c
 80066d0:	200016d8 	.word	0x200016d8
 80066d4:	20000d80 	.word	0x20000d80
 80066d8:	200016ec 	.word	0x200016ec
 80066dc:	20000dbc 	.word	0x20000dbc
 80066e0:	20001700 	.word	0x20001700
 80066e4:	20000dd0 	.word	0x20000dd0
 80066e8:	20001714 	.word	0x20001714
 80066ec:	20000e0c 	.word	0x20000e0c
 80066f0:	20001728 	.word	0x20001728
 80066f4:	20000e34 	.word	0x20000e34
 80066f8:	2000173c 	.word	0x2000173c
 80066fc:	20000e5c 	.word	0x20000e5c
 8006700:	20001750 	.word	0x20001750
 8006704:	20000e84 	.word	0x20000e84
 8006708:	20001764 	.word	0x20001764
 800670c:	20000eac 	.word	0x20000eac
 8006710:	20001778 	.word	0x20001778
 8006714:	20000ed4 	.word	0x20000ed4
 8006718:	2000178c 	.word	0x2000178c
 800671c:	20000efc 	.word	0x20000efc
 8006720:	200017a0 	.word	0x200017a0
 8006724:	20000f24 	.word	0x20000f24
 8006728:	200017b4 	.word	0x200017b4
 800672c:	20000f4c 	.word	0x20000f4c
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8006730:	4ac6      	ldr	r2, [pc, #792]	@ (8006a4c <loadMenuTexts+0xda8>)
 8006732:	4bc7      	ldr	r3, [pc, #796]	@ (8006a50 <loadMenuTexts+0xdac>)
 8006734:	4614      	mov	r4, r2
 8006736:	461d      	mov	r5, r3
 8006738:	6828      	ldr	r0, [r5, #0]
 800673a:	6869      	ldr	r1, [r5, #4]
 800673c:	68aa      	ldr	r2, [r5, #8]
 800673e:	68eb      	ldr	r3, [r5, #12]
 8006740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006742:	7c2b      	ldrb	r3, [r5, #16]
 8006744:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8006746:	4ac3      	ldr	r2, [pc, #780]	@ (8006a54 <loadMenuTexts+0xdb0>)
 8006748:	4bc3      	ldr	r3, [pc, #780]	@ (8006a58 <loadMenuTexts+0xdb4>)
 800674a:	4614      	mov	r4, r2
 800674c:	461d      	mov	r5, r3
 800674e:	6828      	ldr	r0, [r5, #0]
 8006750:	6869      	ldr	r1, [r5, #4]
 8006752:	68aa      	ldr	r2, [r5, #8]
 8006754:	68eb      	ldr	r3, [r5, #12]
 8006756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006758:	7c2b      	ldrb	r3, [r5, #16]
 800675a:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 800675c:	4abf      	ldr	r2, [pc, #764]	@ (8006a5c <loadMenuTexts+0xdb8>)
 800675e:	4bc0      	ldr	r3, [pc, #768]	@ (8006a60 <loadMenuTexts+0xdbc>)
 8006760:	4614      	mov	r4, r2
 8006762:	461d      	mov	r5, r3
 8006764:	6828      	ldr	r0, [r5, #0]
 8006766:	6869      	ldr	r1, [r5, #4]
 8006768:	68aa      	ldr	r2, [r5, #8]
 800676a:	68eb      	ldr	r3, [r5, #12]
 800676c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800676e:	7c2b      	ldrb	r3, [r5, #16]
 8006770:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 8006772:	4abc      	ldr	r2, [pc, #752]	@ (8006a64 <loadMenuTexts+0xdc0>)
 8006774:	4bbc      	ldr	r3, [pc, #752]	@ (8006a68 <loadMenuTexts+0xdc4>)
 8006776:	4614      	mov	r4, r2
 8006778:	461d      	mov	r5, r3
 800677a:	6828      	ldr	r0, [r5, #0]
 800677c:	6869      	ldr	r1, [r5, #4]
 800677e:	68aa      	ldr	r2, [r5, #8]
 8006780:	68eb      	ldr	r3, [r5, #12]
 8006782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006784:	7c2b      	ldrb	r3, [r5, #16]
 8006786:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8006788:	4ab8      	ldr	r2, [pc, #736]	@ (8006a6c <loadMenuTexts+0xdc8>)
 800678a:	4bb9      	ldr	r3, [pc, #740]	@ (8006a70 <loadMenuTexts+0xdcc>)
 800678c:	4614      	mov	r4, r2
 800678e:	461d      	mov	r5, r3
 8006790:	6828      	ldr	r0, [r5, #0]
 8006792:	6869      	ldr	r1, [r5, #4]
 8006794:	68aa      	ldr	r2, [r5, #8]
 8006796:	68eb      	ldr	r3, [r5, #12]
 8006798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800679a:	7c2b      	ldrb	r3, [r5, #16]
 800679c:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 800679e:	4ab5      	ldr	r2, [pc, #724]	@ (8006a74 <loadMenuTexts+0xdd0>)
 80067a0:	4bb5      	ldr	r3, [pc, #724]	@ (8006a78 <loadMenuTexts+0xdd4>)
 80067a2:	4614      	mov	r4, r2
 80067a4:	461d      	mov	r5, r3
 80067a6:	6828      	ldr	r0, [r5, #0]
 80067a8:	6869      	ldr	r1, [r5, #4]
 80067aa:	68aa      	ldr	r2, [r5, #8]
 80067ac:	68eb      	ldr	r3, [r5, #12]
 80067ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067b0:	7c2b      	ldrb	r3, [r5, #16]
 80067b2:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 80067b4:	4ab1      	ldr	r2, [pc, #708]	@ (8006a7c <loadMenuTexts+0xdd8>)
 80067b6:	4bb2      	ldr	r3, [pc, #712]	@ (8006a80 <loadMenuTexts+0xddc>)
 80067b8:	4614      	mov	r4, r2
 80067ba:	461d      	mov	r5, r3
 80067bc:	6828      	ldr	r0, [r5, #0]
 80067be:	6869      	ldr	r1, [r5, #4]
 80067c0:	68aa      	ldr	r2, [r5, #8]
 80067c2:	68eb      	ldr	r3, [r5, #12]
 80067c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067c6:	7c2b      	ldrb	r3, [r5, #16]
 80067c8:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 80067ca:	4aae      	ldr	r2, [pc, #696]	@ (8006a84 <loadMenuTexts+0xde0>)
 80067cc:	4bae      	ldr	r3, [pc, #696]	@ (8006a88 <loadMenuTexts+0xde4>)
 80067ce:	4614      	mov	r4, r2
 80067d0:	461d      	mov	r5, r3
 80067d2:	6828      	ldr	r0, [r5, #0]
 80067d4:	6869      	ldr	r1, [r5, #4]
 80067d6:	68aa      	ldr	r2, [r5, #8]
 80067d8:	68eb      	ldr	r3, [r5, #12]
 80067da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067dc:	7c2b      	ldrb	r3, [r5, #16]
 80067de:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 80067e0:	4aaa      	ldr	r2, [pc, #680]	@ (8006a8c <loadMenuTexts+0xde8>)
 80067e2:	4bab      	ldr	r3, [pc, #684]	@ (8006a90 <loadMenuTexts+0xdec>)
 80067e4:	4614      	mov	r4, r2
 80067e6:	461d      	mov	r5, r3
 80067e8:	6828      	ldr	r0, [r5, #0]
 80067ea:	6869      	ldr	r1, [r5, #4]
 80067ec:	68aa      	ldr	r2, [r5, #8]
 80067ee:	68eb      	ldr	r3, [r5, #12]
 80067f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067f2:	7c2b      	ldrb	r3, [r5, #16]
 80067f4:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 80067f6:	4aa7      	ldr	r2, [pc, #668]	@ (8006a94 <loadMenuTexts+0xdf0>)
 80067f8:	4ba7      	ldr	r3, [pc, #668]	@ (8006a98 <loadMenuTexts+0xdf4>)
 80067fa:	4614      	mov	r4, r2
 80067fc:	461d      	mov	r5, r3
 80067fe:	6828      	ldr	r0, [r5, #0]
 8006800:	6869      	ldr	r1, [r5, #4]
 8006802:	68aa      	ldr	r2, [r5, #8]
 8006804:	68eb      	ldr	r3, [r5, #12]
 8006806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006808:	7c2b      	ldrb	r3, [r5, #16]
 800680a:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 800680c:	4aa3      	ldr	r2, [pc, #652]	@ (8006a9c <loadMenuTexts+0xdf8>)
 800680e:	4ba4      	ldr	r3, [pc, #656]	@ (8006aa0 <loadMenuTexts+0xdfc>)
 8006810:	4614      	mov	r4, r2
 8006812:	461d      	mov	r5, r3
 8006814:	6828      	ldr	r0, [r5, #0]
 8006816:	6869      	ldr	r1, [r5, #4]
 8006818:	68aa      	ldr	r2, [r5, #8]
 800681a:	68eb      	ldr	r3, [r5, #12]
 800681c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800681e:	7c2b      	ldrb	r3, [r5, #16]
 8006820:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8006822:	4aa0      	ldr	r2, [pc, #640]	@ (8006aa4 <loadMenuTexts+0xe00>)
 8006824:	4ba0      	ldr	r3, [pc, #640]	@ (8006aa8 <loadMenuTexts+0xe04>)
 8006826:	4614      	mov	r4, r2
 8006828:	461d      	mov	r5, r3
 800682a:	6828      	ldr	r0, [r5, #0]
 800682c:	6869      	ldr	r1, [r5, #4]
 800682e:	68aa      	ldr	r2, [r5, #8]
 8006830:	68eb      	ldr	r3, [r5, #12]
 8006832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006834:	7c2b      	ldrb	r3, [r5, #16]
 8006836:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8006838:	4a9c      	ldr	r2, [pc, #624]	@ (8006aac <loadMenuTexts+0xe08>)
 800683a:	4b9d      	ldr	r3, [pc, #628]	@ (8006ab0 <loadMenuTexts+0xe0c>)
 800683c:	4614      	mov	r4, r2
 800683e:	461d      	mov	r5, r3
 8006840:	6828      	ldr	r0, [r5, #0]
 8006842:	6869      	ldr	r1, [r5, #4]
 8006844:	68aa      	ldr	r2, [r5, #8]
 8006846:	68eb      	ldr	r3, [r5, #12]
 8006848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800684a:	7c2b      	ldrb	r3, [r5, #16]
 800684c:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 800684e:	4a99      	ldr	r2, [pc, #612]	@ (8006ab4 <loadMenuTexts+0xe10>)
 8006850:	4b99      	ldr	r3, [pc, #612]	@ (8006ab8 <loadMenuTexts+0xe14>)
 8006852:	4614      	mov	r4, r2
 8006854:	461d      	mov	r5, r3
 8006856:	6828      	ldr	r0, [r5, #0]
 8006858:	6869      	ldr	r1, [r5, #4]
 800685a:	68aa      	ldr	r2, [r5, #8]
 800685c:	68eb      	ldr	r3, [r5, #12]
 800685e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006860:	7c2b      	ldrb	r3, [r5, #16]
 8006862:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8006864:	4a95      	ldr	r2, [pc, #596]	@ (8006abc <loadMenuTexts+0xe18>)
 8006866:	4b96      	ldr	r3, [pc, #600]	@ (8006ac0 <loadMenuTexts+0xe1c>)
 8006868:	4614      	mov	r4, r2
 800686a:	461d      	mov	r5, r3
 800686c:	6828      	ldr	r0, [r5, #0]
 800686e:	6869      	ldr	r1, [r5, #4]
 8006870:	68aa      	ldr	r2, [r5, #8]
 8006872:	68eb      	ldr	r3, [r5, #12]
 8006874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006876:	7c2b      	ldrb	r3, [r5, #16]
 8006878:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 800687a:	4a92      	ldr	r2, [pc, #584]	@ (8006ac4 <loadMenuTexts+0xe20>)
 800687c:	4b92      	ldr	r3, [pc, #584]	@ (8006ac8 <loadMenuTexts+0xe24>)
 800687e:	4614      	mov	r4, r2
 8006880:	461d      	mov	r5, r3
 8006882:	6828      	ldr	r0, [r5, #0]
 8006884:	6869      	ldr	r1, [r5, #4]
 8006886:	68aa      	ldr	r2, [r5, #8]
 8006888:	68eb      	ldr	r3, [r5, #12]
 800688a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800688c:	7c2b      	ldrb	r3, [r5, #16]
 800688e:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8006890:	4a8e      	ldr	r2, [pc, #568]	@ (8006acc <loadMenuTexts+0xe28>)
 8006892:	4b8f      	ldr	r3, [pc, #572]	@ (8006ad0 <loadMenuTexts+0xe2c>)
 8006894:	4614      	mov	r4, r2
 8006896:	461d      	mov	r5, r3
 8006898:	6828      	ldr	r0, [r5, #0]
 800689a:	6869      	ldr	r1, [r5, #4]
 800689c:	68aa      	ldr	r2, [r5, #8]
 800689e:	68eb      	ldr	r3, [r5, #12]
 80068a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068a2:	7c2b      	ldrb	r3, [r5, #16]
 80068a4:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 80068a6:	4a8b      	ldr	r2, [pc, #556]	@ (8006ad4 <loadMenuTexts+0xe30>)
 80068a8:	4b8b      	ldr	r3, [pc, #556]	@ (8006ad8 <loadMenuTexts+0xe34>)
 80068aa:	4614      	mov	r4, r2
 80068ac:	461d      	mov	r5, r3
 80068ae:	6828      	ldr	r0, [r5, #0]
 80068b0:	6869      	ldr	r1, [r5, #4]
 80068b2:	68aa      	ldr	r2, [r5, #8]
 80068b4:	68eb      	ldr	r3, [r5, #12]
 80068b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068b8:	7c2b      	ldrb	r3, [r5, #16]
 80068ba:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 80068bc:	4a87      	ldr	r2, [pc, #540]	@ (8006adc <loadMenuTexts+0xe38>)
 80068be:	4b88      	ldr	r3, [pc, #544]	@ (8006ae0 <loadMenuTexts+0xe3c>)
 80068c0:	4614      	mov	r4, r2
 80068c2:	461d      	mov	r5, r3
 80068c4:	6828      	ldr	r0, [r5, #0]
 80068c6:	6869      	ldr	r1, [r5, #4]
 80068c8:	68aa      	ldr	r2, [r5, #8]
 80068ca:	68eb      	ldr	r3, [r5, #12]
 80068cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068ce:	7c2b      	ldrb	r3, [r5, #16]
 80068d0:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 80068d2:	4a84      	ldr	r2, [pc, #528]	@ (8006ae4 <loadMenuTexts+0xe40>)
 80068d4:	4b84      	ldr	r3, [pc, #528]	@ (8006ae8 <loadMenuTexts+0xe44>)
 80068d6:	4614      	mov	r4, r2
 80068d8:	461d      	mov	r5, r3
 80068da:	6828      	ldr	r0, [r5, #0]
 80068dc:	6869      	ldr	r1, [r5, #4]
 80068de:	68aa      	ldr	r2, [r5, #8]
 80068e0:	68eb      	ldr	r3, [r5, #12]
 80068e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068e4:	7c2b      	ldrb	r3, [r5, #16]
 80068e6:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 80068e8:	4a80      	ldr	r2, [pc, #512]	@ (8006aec <loadMenuTexts+0xe48>)
 80068ea:	4b81      	ldr	r3, [pc, #516]	@ (8006af0 <loadMenuTexts+0xe4c>)
 80068ec:	4614      	mov	r4, r2
 80068ee:	461d      	mov	r5, r3
 80068f0:	6828      	ldr	r0, [r5, #0]
 80068f2:	6869      	ldr	r1, [r5, #4]
 80068f4:	68aa      	ldr	r2, [r5, #8]
 80068f6:	68eb      	ldr	r3, [r5, #12]
 80068f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068fa:	7c2b      	ldrb	r3, [r5, #16]
 80068fc:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 80068fe:	4a7d      	ldr	r2, [pc, #500]	@ (8006af4 <loadMenuTexts+0xe50>)
 8006900:	4b7d      	ldr	r3, [pc, #500]	@ (8006af8 <loadMenuTexts+0xe54>)
 8006902:	4614      	mov	r4, r2
 8006904:	461d      	mov	r5, r3
 8006906:	6828      	ldr	r0, [r5, #0]
 8006908:	6869      	ldr	r1, [r5, #4]
 800690a:	68aa      	ldr	r2, [r5, #8]
 800690c:	68eb      	ldr	r3, [r5, #12]
 800690e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006910:	7c2b      	ldrb	r3, [r5, #16]
 8006912:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8006914:	4a79      	ldr	r2, [pc, #484]	@ (8006afc <loadMenuTexts+0xe58>)
 8006916:	4b7a      	ldr	r3, [pc, #488]	@ (8006b00 <loadMenuTexts+0xe5c>)
 8006918:	4614      	mov	r4, r2
 800691a:	461d      	mov	r5, r3
 800691c:	6828      	ldr	r0, [r5, #0]
 800691e:	6869      	ldr	r1, [r5, #4]
 8006920:	68aa      	ldr	r2, [r5, #8]
 8006922:	68eb      	ldr	r3, [r5, #12]
 8006924:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006926:	7c2b      	ldrb	r3, [r5, #16]
 8006928:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 800692a:	4a76      	ldr	r2, [pc, #472]	@ (8006b04 <loadMenuTexts+0xe60>)
 800692c:	4b76      	ldr	r3, [pc, #472]	@ (8006b08 <loadMenuTexts+0xe64>)
 800692e:	4614      	mov	r4, r2
 8006930:	461d      	mov	r5, r3
 8006932:	6828      	ldr	r0, [r5, #0]
 8006934:	6869      	ldr	r1, [r5, #4]
 8006936:	68aa      	ldr	r2, [r5, #8]
 8006938:	68eb      	ldr	r3, [r5, #12]
 800693a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800693c:	7c2b      	ldrb	r3, [r5, #16]
 800693e:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8006940:	4a72      	ldr	r2, [pc, #456]	@ (8006b0c <loadMenuTexts+0xe68>)
 8006942:	4b73      	ldr	r3, [pc, #460]	@ (8006b10 <loadMenuTexts+0xe6c>)
 8006944:	4614      	mov	r4, r2
 8006946:	461d      	mov	r5, r3
 8006948:	6828      	ldr	r0, [r5, #0]
 800694a:	6869      	ldr	r1, [r5, #4]
 800694c:	68aa      	ldr	r2, [r5, #8]
 800694e:	68eb      	ldr	r3, [r5, #12]
 8006950:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006952:	7c2b      	ldrb	r3, [r5, #16]
 8006954:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8006956:	4a6f      	ldr	r2, [pc, #444]	@ (8006b14 <loadMenuTexts+0xe70>)
 8006958:	4b6f      	ldr	r3, [pc, #444]	@ (8006b18 <loadMenuTexts+0xe74>)
 800695a:	4614      	mov	r4, r2
 800695c:	461d      	mov	r5, r3
 800695e:	6828      	ldr	r0, [r5, #0]
 8006960:	6869      	ldr	r1, [r5, #4]
 8006962:	68aa      	ldr	r2, [r5, #8]
 8006964:	68eb      	ldr	r3, [r5, #12]
 8006966:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006968:	7c2b      	ldrb	r3, [r5, #16]
 800696a:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 800696c:	4a6b      	ldr	r2, [pc, #428]	@ (8006b1c <loadMenuTexts+0xe78>)
 800696e:	4b6c      	ldr	r3, [pc, #432]	@ (8006b20 <loadMenuTexts+0xe7c>)
 8006970:	4614      	mov	r4, r2
 8006972:	461d      	mov	r5, r3
 8006974:	6828      	ldr	r0, [r5, #0]
 8006976:	6869      	ldr	r1, [r5, #4]
 8006978:	68aa      	ldr	r2, [r5, #8]
 800697a:	68eb      	ldr	r3, [r5, #12]
 800697c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800697e:	7c2b      	ldrb	r3, [r5, #16]
 8006980:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8006982:	4a68      	ldr	r2, [pc, #416]	@ (8006b24 <loadMenuTexts+0xe80>)
 8006984:	4b68      	ldr	r3, [pc, #416]	@ (8006b28 <loadMenuTexts+0xe84>)
 8006986:	4614      	mov	r4, r2
 8006988:	461d      	mov	r5, r3
 800698a:	6828      	ldr	r0, [r5, #0]
 800698c:	6869      	ldr	r1, [r5, #4]
 800698e:	68aa      	ldr	r2, [r5, #8]
 8006990:	68eb      	ldr	r3, [r5, #12]
 8006992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006994:	7c2b      	ldrb	r3, [r5, #16]
 8006996:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8006998:	4a64      	ldr	r2, [pc, #400]	@ (8006b2c <loadMenuTexts+0xe88>)
 800699a:	4b65      	ldr	r3, [pc, #404]	@ (8006b30 <loadMenuTexts+0xe8c>)
 800699c:	4614      	mov	r4, r2
 800699e:	461d      	mov	r5, r3
 80069a0:	6828      	ldr	r0, [r5, #0]
 80069a2:	6869      	ldr	r1, [r5, #4]
 80069a4:	68aa      	ldr	r2, [r5, #8]
 80069a6:	68eb      	ldr	r3, [r5, #12]
 80069a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069aa:	7c2b      	ldrb	r3, [r5, #16]
 80069ac:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 80069ae:	4a61      	ldr	r2, [pc, #388]	@ (8006b34 <loadMenuTexts+0xe90>)
 80069b0:	4b61      	ldr	r3, [pc, #388]	@ (8006b38 <loadMenuTexts+0xe94>)
 80069b2:	4614      	mov	r4, r2
 80069b4:	461d      	mov	r5, r3
 80069b6:	6828      	ldr	r0, [r5, #0]
 80069b8:	6869      	ldr	r1, [r5, #4]
 80069ba:	68aa      	ldr	r2, [r5, #8]
 80069bc:	68eb      	ldr	r3, [r5, #12]
 80069be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069c0:	7c2b      	ldrb	r3, [r5, #16]
 80069c2:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 80069c4:	4a5d      	ldr	r2, [pc, #372]	@ (8006b3c <loadMenuTexts+0xe98>)
 80069c6:	4b5e      	ldr	r3, [pc, #376]	@ (8006b40 <loadMenuTexts+0xe9c>)
 80069c8:	4614      	mov	r4, r2
 80069ca:	461d      	mov	r5, r3
 80069cc:	6828      	ldr	r0, [r5, #0]
 80069ce:	6869      	ldr	r1, [r5, #4]
 80069d0:	68aa      	ldr	r2, [r5, #8]
 80069d2:	68eb      	ldr	r3, [r5, #12]
 80069d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069d6:	7c2b      	ldrb	r3, [r5, #16]
 80069d8:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 80069da:	4a5a      	ldr	r2, [pc, #360]	@ (8006b44 <loadMenuTexts+0xea0>)
 80069dc:	4b5a      	ldr	r3, [pc, #360]	@ (8006b48 <loadMenuTexts+0xea4>)
 80069de:	4614      	mov	r4, r2
 80069e0:	461d      	mov	r5, r3
 80069e2:	6828      	ldr	r0, [r5, #0]
 80069e4:	6869      	ldr	r1, [r5, #4]
 80069e6:	68aa      	ldr	r2, [r5, #8]
 80069e8:	68eb      	ldr	r3, [r5, #12]
 80069ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069ec:	7c2b      	ldrb	r3, [r5, #16]
 80069ee:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 80069f0:	4a56      	ldr	r2, [pc, #344]	@ (8006b4c <loadMenuTexts+0xea8>)
 80069f2:	4b57      	ldr	r3, [pc, #348]	@ (8006b50 <loadMenuTexts+0xeac>)
 80069f4:	4614      	mov	r4, r2
 80069f6:	461d      	mov	r5, r3
 80069f8:	6828      	ldr	r0, [r5, #0]
 80069fa:	6869      	ldr	r1, [r5, #4]
 80069fc:	68aa      	ldr	r2, [r5, #8]
 80069fe:	68eb      	ldr	r3, [r5, #12]
 8006a00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a02:	7c2b      	ldrb	r3, [r5, #16]
 8006a04:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8006a06:	4a53      	ldr	r2, [pc, #332]	@ (8006b54 <loadMenuTexts+0xeb0>)
 8006a08:	4b53      	ldr	r3, [pc, #332]	@ (8006b58 <loadMenuTexts+0xeb4>)
 8006a0a:	4614      	mov	r4, r2
 8006a0c:	461d      	mov	r5, r3
 8006a0e:	6828      	ldr	r0, [r5, #0]
 8006a10:	6869      	ldr	r1, [r5, #4]
 8006a12:	68aa      	ldr	r2, [r5, #8]
 8006a14:	68eb      	ldr	r3, [r5, #12]
 8006a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a18:	7c2b      	ldrb	r3, [r5, #16]
 8006a1a:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8006a1c:	4a4f      	ldr	r2, [pc, #316]	@ (8006b5c <loadMenuTexts+0xeb8>)
 8006a1e:	4b50      	ldr	r3, [pc, #320]	@ (8006b60 <loadMenuTexts+0xebc>)
 8006a20:	4614      	mov	r4, r2
 8006a22:	461d      	mov	r5, r3
 8006a24:	6828      	ldr	r0, [r5, #0]
 8006a26:	6869      	ldr	r1, [r5, #4]
 8006a28:	68aa      	ldr	r2, [r5, #8]
 8006a2a:	68eb      	ldr	r3, [r5, #12]
 8006a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a2e:	7c2b      	ldrb	r3, [r5, #16]
 8006a30:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8006a32:	4a4c      	ldr	r2, [pc, #304]	@ (8006b64 <loadMenuTexts+0xec0>)
 8006a34:	4b4c      	ldr	r3, [pc, #304]	@ (8006b68 <loadMenuTexts+0xec4>)
 8006a36:	4614      	mov	r4, r2
 8006a38:	461d      	mov	r5, r3
 8006a3a:	6828      	ldr	r0, [r5, #0]
 8006a3c:	6869      	ldr	r1, [r5, #4]
 8006a3e:	68aa      	ldr	r2, [r5, #8]
 8006a40:	68eb      	ldr	r3, [r5, #12]
 8006a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a44:	7c2b      	ldrb	r3, [r5, #16]
 8006a46:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8006a48:	4a48      	ldr	r2, [pc, #288]	@ (8006b6c <loadMenuTexts+0xec8>)
 8006a4a:	e091      	b.n	8006b70 <loadMenuTexts+0xecc>
 8006a4c:	200010d4 	.word	0x200010d4
 8006a50:	20000704 	.word	0x20000704
 8006a54:	200010e8 	.word	0x200010e8
 8006a58:	20000718 	.word	0x20000718
 8006a5c:	200010fc 	.word	0x200010fc
 8006a60:	2000072c 	.word	0x2000072c
 8006a64:	20001110 	.word	0x20001110
 8006a68:	20000740 	.word	0x20000740
 8006a6c:	20001124 	.word	0x20001124
 8006a70:	20000754 	.word	0x20000754
 8006a74:	20001138 	.word	0x20001138
 8006a78:	20000768 	.word	0x20000768
 8006a7c:	2000114c 	.word	0x2000114c
 8006a80:	2000077c 	.word	0x2000077c
 8006a84:	20001160 	.word	0x20001160
 8006a88:	20000790 	.word	0x20000790
 8006a8c:	20001174 	.word	0x20001174
 8006a90:	200007a4 	.word	0x200007a4
 8006a94:	20001188 	.word	0x20001188
 8006a98:	200007b8 	.word	0x200007b8
 8006a9c:	2000119c 	.word	0x2000119c
 8006aa0:	200007cc 	.word	0x200007cc
 8006aa4:	200011b0 	.word	0x200011b0
 8006aa8:	200007e0 	.word	0x200007e0
 8006aac:	200011c4 	.word	0x200011c4
 8006ab0:	200007f4 	.word	0x200007f4
 8006ab4:	200011d8 	.word	0x200011d8
 8006ab8:	20000808 	.word	0x20000808
 8006abc:	200011ec 	.word	0x200011ec
 8006ac0:	2000081c 	.word	0x2000081c
 8006ac4:	20001200 	.word	0x20001200
 8006ac8:	20000830 	.word	0x20000830
 8006acc:	20001214 	.word	0x20001214
 8006ad0:	20000844 	.word	0x20000844
 8006ad4:	20001228 	.word	0x20001228
 8006ad8:	20000858 	.word	0x20000858
 8006adc:	2000123c 	.word	0x2000123c
 8006ae0:	2000086c 	.word	0x2000086c
 8006ae4:	20001250 	.word	0x20001250
 8006ae8:	20000880 	.word	0x20000880
 8006aec:	20001264 	.word	0x20001264
 8006af0:	20000894 	.word	0x20000894
 8006af4:	20001278 	.word	0x20001278
 8006af8:	200008a8 	.word	0x200008a8
 8006afc:	2000128c 	.word	0x2000128c
 8006b00:	200008bc 	.word	0x200008bc
 8006b04:	200012a0 	.word	0x200012a0
 8006b08:	200008d0 	.word	0x200008d0
 8006b0c:	200012b4 	.word	0x200012b4
 8006b10:	200008e4 	.word	0x200008e4
 8006b14:	200012c8 	.word	0x200012c8
 8006b18:	200008f8 	.word	0x200008f8
 8006b1c:	200012dc 	.word	0x200012dc
 8006b20:	2000090c 	.word	0x2000090c
 8006b24:	200012f0 	.word	0x200012f0
 8006b28:	20000920 	.word	0x20000920
 8006b2c:	20001304 	.word	0x20001304
 8006b30:	20000934 	.word	0x20000934
 8006b34:	20001318 	.word	0x20001318
 8006b38:	20000948 	.word	0x20000948
 8006b3c:	2000132c 	.word	0x2000132c
 8006b40:	2000095c 	.word	0x2000095c
 8006b44:	20001340 	.word	0x20001340
 8006b48:	20000970 	.word	0x20000970
 8006b4c:	20001354 	.word	0x20001354
 8006b50:	20000984 	.word	0x20000984
 8006b54:	20001368 	.word	0x20001368
 8006b58:	20000998 	.word	0x20000998
 8006b5c:	2000137c 	.word	0x2000137c
 8006b60:	200009ac 	.word	0x200009ac
 8006b64:	20001390 	.word	0x20001390
 8006b68:	200009c0 	.word	0x200009c0
 8006b6c:	200013a4 	.word	0x200013a4
 8006b70:	4bc7      	ldr	r3, [pc, #796]	@ (8006e90 <loadMenuTexts+0x11ec>)
 8006b72:	4614      	mov	r4, r2
 8006b74:	461d      	mov	r5, r3
 8006b76:	6828      	ldr	r0, [r5, #0]
 8006b78:	6869      	ldr	r1, [r5, #4]
 8006b7a:	68aa      	ldr	r2, [r5, #8]
 8006b7c:	68eb      	ldr	r3, [r5, #12]
 8006b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b80:	7c2b      	ldrb	r3, [r5, #16]
 8006b82:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8006b84:	4ac3      	ldr	r2, [pc, #780]	@ (8006e94 <loadMenuTexts+0x11f0>)
 8006b86:	4bc4      	ldr	r3, [pc, #784]	@ (8006e98 <loadMenuTexts+0x11f4>)
 8006b88:	4614      	mov	r4, r2
 8006b8a:	461d      	mov	r5, r3
 8006b8c:	6828      	ldr	r0, [r5, #0]
 8006b8e:	6869      	ldr	r1, [r5, #4]
 8006b90:	68aa      	ldr	r2, [r5, #8]
 8006b92:	68eb      	ldr	r3, [r5, #12]
 8006b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b96:	7c2b      	ldrb	r3, [r5, #16]
 8006b98:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8006b9a:	4ac0      	ldr	r2, [pc, #768]	@ (8006e9c <loadMenuTexts+0x11f8>)
 8006b9c:	4bc0      	ldr	r3, [pc, #768]	@ (8006ea0 <loadMenuTexts+0x11fc>)
 8006b9e:	4614      	mov	r4, r2
 8006ba0:	461d      	mov	r5, r3
 8006ba2:	6828      	ldr	r0, [r5, #0]
 8006ba4:	6869      	ldr	r1, [r5, #4]
 8006ba6:	68aa      	ldr	r2, [r5, #8]
 8006ba8:	68eb      	ldr	r3, [r5, #12]
 8006baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bac:	7c2b      	ldrb	r3, [r5, #16]
 8006bae:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8006bb0:	4abc      	ldr	r2, [pc, #752]	@ (8006ea4 <loadMenuTexts+0x1200>)
 8006bb2:	4bbd      	ldr	r3, [pc, #756]	@ (8006ea8 <loadMenuTexts+0x1204>)
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	461d      	mov	r5, r3
 8006bb8:	6828      	ldr	r0, [r5, #0]
 8006bba:	6869      	ldr	r1, [r5, #4]
 8006bbc:	68aa      	ldr	r2, [r5, #8]
 8006bbe:	68eb      	ldr	r3, [r5, #12]
 8006bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bc2:	7c2b      	ldrb	r3, [r5, #16]
 8006bc4:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 8006bc6:	4ab9      	ldr	r2, [pc, #740]	@ (8006eac <loadMenuTexts+0x1208>)
 8006bc8:	4bb9      	ldr	r3, [pc, #740]	@ (8006eb0 <loadMenuTexts+0x120c>)
 8006bca:	4614      	mov	r4, r2
 8006bcc:	461d      	mov	r5, r3
 8006bce:	6828      	ldr	r0, [r5, #0]
 8006bd0:	6869      	ldr	r1, [r5, #4]
 8006bd2:	68aa      	ldr	r2, [r5, #8]
 8006bd4:	68eb      	ldr	r3, [r5, #12]
 8006bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bd8:	7c2b      	ldrb	r3, [r5, #16]
 8006bda:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8006bdc:	4ab5      	ldr	r2, [pc, #724]	@ (8006eb4 <loadMenuTexts+0x1210>)
 8006bde:	4bb6      	ldr	r3, [pc, #728]	@ (8006eb8 <loadMenuTexts+0x1214>)
 8006be0:	4614      	mov	r4, r2
 8006be2:	461d      	mov	r5, r3
 8006be4:	6828      	ldr	r0, [r5, #0]
 8006be6:	6869      	ldr	r1, [r5, #4]
 8006be8:	68aa      	ldr	r2, [r5, #8]
 8006bea:	68eb      	ldr	r3, [r5, #12]
 8006bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bee:	7c2b      	ldrb	r3, [r5, #16]
 8006bf0:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 8006bf2:	4ab2      	ldr	r2, [pc, #712]	@ (8006ebc <loadMenuTexts+0x1218>)
 8006bf4:	4bb2      	ldr	r3, [pc, #712]	@ (8006ec0 <loadMenuTexts+0x121c>)
 8006bf6:	4614      	mov	r4, r2
 8006bf8:	461d      	mov	r5, r3
 8006bfa:	6828      	ldr	r0, [r5, #0]
 8006bfc:	6869      	ldr	r1, [r5, #4]
 8006bfe:	68aa      	ldr	r2, [r5, #8]
 8006c00:	68eb      	ldr	r3, [r5, #12]
 8006c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c04:	7c2b      	ldrb	r3, [r5, #16]
 8006c06:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 8006c08:	4aae      	ldr	r2, [pc, #696]	@ (8006ec4 <loadMenuTexts+0x1220>)
 8006c0a:	4baf      	ldr	r3, [pc, #700]	@ (8006ec8 <loadMenuTexts+0x1224>)
 8006c0c:	4614      	mov	r4, r2
 8006c0e:	461d      	mov	r5, r3
 8006c10:	6828      	ldr	r0, [r5, #0]
 8006c12:	6869      	ldr	r1, [r5, #4]
 8006c14:	68aa      	ldr	r2, [r5, #8]
 8006c16:	68eb      	ldr	r3, [r5, #12]
 8006c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c1a:	7c2b      	ldrb	r3, [r5, #16]
 8006c1c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 8006c1e:	4aab      	ldr	r2, [pc, #684]	@ (8006ecc <loadMenuTexts+0x1228>)
 8006c20:	4bab      	ldr	r3, [pc, #684]	@ (8006ed0 <loadMenuTexts+0x122c>)
 8006c22:	4614      	mov	r4, r2
 8006c24:	461d      	mov	r5, r3
 8006c26:	6828      	ldr	r0, [r5, #0]
 8006c28:	6869      	ldr	r1, [r5, #4]
 8006c2a:	68aa      	ldr	r2, [r5, #8]
 8006c2c:	68eb      	ldr	r3, [r5, #12]
 8006c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c30:	7c2b      	ldrb	r3, [r5, #16]
 8006c32:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8006c34:	4aa7      	ldr	r2, [pc, #668]	@ (8006ed4 <loadMenuTexts+0x1230>)
 8006c36:	4ba8      	ldr	r3, [pc, #672]	@ (8006ed8 <loadMenuTexts+0x1234>)
 8006c38:	4614      	mov	r4, r2
 8006c3a:	461d      	mov	r5, r3
 8006c3c:	6828      	ldr	r0, [r5, #0]
 8006c3e:	6869      	ldr	r1, [r5, #4]
 8006c40:	68aa      	ldr	r2, [r5, #8]
 8006c42:	68eb      	ldr	r3, [r5, #12]
 8006c44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c46:	7c2b      	ldrb	r3, [r5, #16]
 8006c48:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 8006c4a:	4aa4      	ldr	r2, [pc, #656]	@ (8006edc <loadMenuTexts+0x1238>)
 8006c4c:	4ba4      	ldr	r3, [pc, #656]	@ (8006ee0 <loadMenuTexts+0x123c>)
 8006c4e:	4614      	mov	r4, r2
 8006c50:	461d      	mov	r5, r3
 8006c52:	6828      	ldr	r0, [r5, #0]
 8006c54:	6869      	ldr	r1, [r5, #4]
 8006c56:	68aa      	ldr	r2, [r5, #8]
 8006c58:	68eb      	ldr	r3, [r5, #12]
 8006c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c5c:	7c2b      	ldrb	r3, [r5, #16]
 8006c5e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8006c60:	4aa0      	ldr	r2, [pc, #640]	@ (8006ee4 <loadMenuTexts+0x1240>)
 8006c62:	4ba1      	ldr	r3, [pc, #644]	@ (8006ee8 <loadMenuTexts+0x1244>)
 8006c64:	4614      	mov	r4, r2
 8006c66:	461d      	mov	r5, r3
 8006c68:	6828      	ldr	r0, [r5, #0]
 8006c6a:	6869      	ldr	r1, [r5, #4]
 8006c6c:	68aa      	ldr	r2, [r5, #8]
 8006c6e:	68eb      	ldr	r3, [r5, #12]
 8006c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c72:	7c2b      	ldrb	r3, [r5, #16]
 8006c74:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 8006c76:	4a9d      	ldr	r2, [pc, #628]	@ (8006eec <loadMenuTexts+0x1248>)
 8006c78:	4b9d      	ldr	r3, [pc, #628]	@ (8006ef0 <loadMenuTexts+0x124c>)
 8006c7a:	4614      	mov	r4, r2
 8006c7c:	461d      	mov	r5, r3
 8006c7e:	6828      	ldr	r0, [r5, #0]
 8006c80:	6869      	ldr	r1, [r5, #4]
 8006c82:	68aa      	ldr	r2, [r5, #8]
 8006c84:	68eb      	ldr	r3, [r5, #12]
 8006c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c88:	7c2b      	ldrb	r3, [r5, #16]
 8006c8a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8006c8c:	4a99      	ldr	r2, [pc, #612]	@ (8006ef4 <loadMenuTexts+0x1250>)
 8006c8e:	4b9a      	ldr	r3, [pc, #616]	@ (8006ef8 <loadMenuTexts+0x1254>)
 8006c90:	4614      	mov	r4, r2
 8006c92:	461d      	mov	r5, r3
 8006c94:	6828      	ldr	r0, [r5, #0]
 8006c96:	6869      	ldr	r1, [r5, #4]
 8006c98:	68aa      	ldr	r2, [r5, #8]
 8006c9a:	68eb      	ldr	r3, [r5, #12]
 8006c9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c9e:	7c2b      	ldrb	r3, [r5, #16]
 8006ca0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8006ca2:	4a96      	ldr	r2, [pc, #600]	@ (8006efc <loadMenuTexts+0x1258>)
 8006ca4:	4b96      	ldr	r3, [pc, #600]	@ (8006f00 <loadMenuTexts+0x125c>)
 8006ca6:	4614      	mov	r4, r2
 8006ca8:	461d      	mov	r5, r3
 8006caa:	6828      	ldr	r0, [r5, #0]
 8006cac:	6869      	ldr	r1, [r5, #4]
 8006cae:	68aa      	ldr	r2, [r5, #8]
 8006cb0:	68eb      	ldr	r3, [r5, #12]
 8006cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cb4:	7c2b      	ldrb	r3, [r5, #16]
 8006cb6:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8006cb8:	4a92      	ldr	r2, [pc, #584]	@ (8006f04 <loadMenuTexts+0x1260>)
 8006cba:	4b93      	ldr	r3, [pc, #588]	@ (8006f08 <loadMenuTexts+0x1264>)
 8006cbc:	4614      	mov	r4, r2
 8006cbe:	461d      	mov	r5, r3
 8006cc0:	6828      	ldr	r0, [r5, #0]
 8006cc2:	6869      	ldr	r1, [r5, #4]
 8006cc4:	68aa      	ldr	r2, [r5, #8]
 8006cc6:	68eb      	ldr	r3, [r5, #12]
 8006cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cca:	7c2b      	ldrb	r3, [r5, #16]
 8006ccc:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8006cce:	4a8f      	ldr	r2, [pc, #572]	@ (8006f0c <loadMenuTexts+0x1268>)
 8006cd0:	4b8f      	ldr	r3, [pc, #572]	@ (8006f10 <loadMenuTexts+0x126c>)
 8006cd2:	4614      	mov	r4, r2
 8006cd4:	461d      	mov	r5, r3
 8006cd6:	6828      	ldr	r0, [r5, #0]
 8006cd8:	6869      	ldr	r1, [r5, #4]
 8006cda:	68aa      	ldr	r2, [r5, #8]
 8006cdc:	68eb      	ldr	r3, [r5, #12]
 8006cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ce0:	7c2b      	ldrb	r3, [r5, #16]
 8006ce2:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8006ce4:	4a8b      	ldr	r2, [pc, #556]	@ (8006f14 <loadMenuTexts+0x1270>)
 8006ce6:	4b8c      	ldr	r3, [pc, #560]	@ (8006f18 <loadMenuTexts+0x1274>)
 8006ce8:	4614      	mov	r4, r2
 8006cea:	461d      	mov	r5, r3
 8006cec:	6828      	ldr	r0, [r5, #0]
 8006cee:	6869      	ldr	r1, [r5, #4]
 8006cf0:	68aa      	ldr	r2, [r5, #8]
 8006cf2:	68eb      	ldr	r3, [r5, #12]
 8006cf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cf6:	7c2b      	ldrb	r3, [r5, #16]
 8006cf8:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 8006cfa:	4a88      	ldr	r2, [pc, #544]	@ (8006f1c <loadMenuTexts+0x1278>)
 8006cfc:	4b88      	ldr	r3, [pc, #544]	@ (8006f20 <loadMenuTexts+0x127c>)
 8006cfe:	4614      	mov	r4, r2
 8006d00:	461d      	mov	r5, r3
 8006d02:	6828      	ldr	r0, [r5, #0]
 8006d04:	6869      	ldr	r1, [r5, #4]
 8006d06:	68aa      	ldr	r2, [r5, #8]
 8006d08:	68eb      	ldr	r3, [r5, #12]
 8006d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d0c:	7c2b      	ldrb	r3, [r5, #16]
 8006d0e:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8006d10:	4a84      	ldr	r2, [pc, #528]	@ (8006f24 <loadMenuTexts+0x1280>)
 8006d12:	4b85      	ldr	r3, [pc, #532]	@ (8006f28 <loadMenuTexts+0x1284>)
 8006d14:	4614      	mov	r4, r2
 8006d16:	461d      	mov	r5, r3
 8006d18:	6828      	ldr	r0, [r5, #0]
 8006d1a:	6869      	ldr	r1, [r5, #4]
 8006d1c:	68aa      	ldr	r2, [r5, #8]
 8006d1e:	68eb      	ldr	r3, [r5, #12]
 8006d20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d22:	7c2b      	ldrb	r3, [r5, #16]
 8006d24:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 8006d26:	4a81      	ldr	r2, [pc, #516]	@ (8006f2c <loadMenuTexts+0x1288>)
 8006d28:	4b81      	ldr	r3, [pc, #516]	@ (8006f30 <loadMenuTexts+0x128c>)
 8006d2a:	4614      	mov	r4, r2
 8006d2c:	461d      	mov	r5, r3
 8006d2e:	6828      	ldr	r0, [r5, #0]
 8006d30:	6869      	ldr	r1, [r5, #4]
 8006d32:	68aa      	ldr	r2, [r5, #8]
 8006d34:	68eb      	ldr	r3, [r5, #12]
 8006d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d38:	7c2b      	ldrb	r3, [r5, #16]
 8006d3a:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 8006d3c:	4a7d      	ldr	r2, [pc, #500]	@ (8006f34 <loadMenuTexts+0x1290>)
 8006d3e:	4b7e      	ldr	r3, [pc, #504]	@ (8006f38 <loadMenuTexts+0x1294>)
 8006d40:	4614      	mov	r4, r2
 8006d42:	461d      	mov	r5, r3
 8006d44:	6828      	ldr	r0, [r5, #0]
 8006d46:	6869      	ldr	r1, [r5, #4]
 8006d48:	68aa      	ldr	r2, [r5, #8]
 8006d4a:	68eb      	ldr	r3, [r5, #12]
 8006d4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d4e:	7c2b      	ldrb	r3, [r5, #16]
 8006d50:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 8006d52:	4a7a      	ldr	r2, [pc, #488]	@ (8006f3c <loadMenuTexts+0x1298>)
 8006d54:	4b7a      	ldr	r3, [pc, #488]	@ (8006f40 <loadMenuTexts+0x129c>)
 8006d56:	4614      	mov	r4, r2
 8006d58:	461d      	mov	r5, r3
 8006d5a:	6828      	ldr	r0, [r5, #0]
 8006d5c:	6869      	ldr	r1, [r5, #4]
 8006d5e:	68aa      	ldr	r2, [r5, #8]
 8006d60:	68eb      	ldr	r3, [r5, #12]
 8006d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d64:	7c2b      	ldrb	r3, [r5, #16]
 8006d66:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8006d68:	4a76      	ldr	r2, [pc, #472]	@ (8006f44 <loadMenuTexts+0x12a0>)
 8006d6a:	4b77      	ldr	r3, [pc, #476]	@ (8006f48 <loadMenuTexts+0x12a4>)
 8006d6c:	4614      	mov	r4, r2
 8006d6e:	461d      	mov	r5, r3
 8006d70:	6828      	ldr	r0, [r5, #0]
 8006d72:	6869      	ldr	r1, [r5, #4]
 8006d74:	68aa      	ldr	r2, [r5, #8]
 8006d76:	68eb      	ldr	r3, [r5, #12]
 8006d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d7a:	7c2b      	ldrb	r3, [r5, #16]
 8006d7c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8006d7e:	4a73      	ldr	r2, [pc, #460]	@ (8006f4c <loadMenuTexts+0x12a8>)
 8006d80:	4b73      	ldr	r3, [pc, #460]	@ (8006f50 <loadMenuTexts+0x12ac>)
 8006d82:	4614      	mov	r4, r2
 8006d84:	461d      	mov	r5, r3
 8006d86:	6828      	ldr	r0, [r5, #0]
 8006d88:	6869      	ldr	r1, [r5, #4]
 8006d8a:	68aa      	ldr	r2, [r5, #8]
 8006d8c:	68eb      	ldr	r3, [r5, #12]
 8006d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d90:	7c2b      	ldrb	r3, [r5, #16]
 8006d92:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8006d94:	4a6f      	ldr	r2, [pc, #444]	@ (8006f54 <loadMenuTexts+0x12b0>)
 8006d96:	4b70      	ldr	r3, [pc, #448]	@ (8006f58 <loadMenuTexts+0x12b4>)
 8006d98:	4614      	mov	r4, r2
 8006d9a:	461d      	mov	r5, r3
 8006d9c:	6828      	ldr	r0, [r5, #0]
 8006d9e:	6869      	ldr	r1, [r5, #4]
 8006da0:	68aa      	ldr	r2, [r5, #8]
 8006da2:	68eb      	ldr	r3, [r5, #12]
 8006da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006da6:	7c2b      	ldrb	r3, [r5, #16]
 8006da8:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 8006daa:	4a6c      	ldr	r2, [pc, #432]	@ (8006f5c <loadMenuTexts+0x12b8>)
 8006dac:	4b6c      	ldr	r3, [pc, #432]	@ (8006f60 <loadMenuTexts+0x12bc>)
 8006dae:	4614      	mov	r4, r2
 8006db0:	461d      	mov	r5, r3
 8006db2:	6828      	ldr	r0, [r5, #0]
 8006db4:	6869      	ldr	r1, [r5, #4]
 8006db6:	68aa      	ldr	r2, [r5, #8]
 8006db8:	68eb      	ldr	r3, [r5, #12]
 8006dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dbc:	7c2b      	ldrb	r3, [r5, #16]
 8006dbe:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8006dc0:	4a68      	ldr	r2, [pc, #416]	@ (8006f64 <loadMenuTexts+0x12c0>)
 8006dc2:	4b69      	ldr	r3, [pc, #420]	@ (8006f68 <loadMenuTexts+0x12c4>)
 8006dc4:	4614      	mov	r4, r2
 8006dc6:	461d      	mov	r5, r3
 8006dc8:	6828      	ldr	r0, [r5, #0]
 8006dca:	6869      	ldr	r1, [r5, #4]
 8006dcc:	68aa      	ldr	r2, [r5, #8]
 8006dce:	68eb      	ldr	r3, [r5, #12]
 8006dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dd2:	7c2b      	ldrb	r3, [r5, #16]
 8006dd4:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 8006dd6:	4a65      	ldr	r2, [pc, #404]	@ (8006f6c <loadMenuTexts+0x12c8>)
 8006dd8:	4b65      	ldr	r3, [pc, #404]	@ (8006f70 <loadMenuTexts+0x12cc>)
 8006dda:	4614      	mov	r4, r2
 8006ddc:	461d      	mov	r5, r3
 8006dde:	6828      	ldr	r0, [r5, #0]
 8006de0:	6869      	ldr	r1, [r5, #4]
 8006de2:	68aa      	ldr	r2, [r5, #8]
 8006de4:	68eb      	ldr	r3, [r5, #12]
 8006de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006de8:	7c2b      	ldrb	r3, [r5, #16]
 8006dea:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 8006dec:	4a61      	ldr	r2, [pc, #388]	@ (8006f74 <loadMenuTexts+0x12d0>)
 8006dee:	4b62      	ldr	r3, [pc, #392]	@ (8006f78 <loadMenuTexts+0x12d4>)
 8006df0:	4614      	mov	r4, r2
 8006df2:	461d      	mov	r5, r3
 8006df4:	6828      	ldr	r0, [r5, #0]
 8006df6:	6869      	ldr	r1, [r5, #4]
 8006df8:	68aa      	ldr	r2, [r5, #8]
 8006dfa:	68eb      	ldr	r3, [r5, #12]
 8006dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dfe:	7c2b      	ldrb	r3, [r5, #16]
 8006e00:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 8006e02:	4a5e      	ldr	r2, [pc, #376]	@ (8006f7c <loadMenuTexts+0x12d8>)
 8006e04:	4b5e      	ldr	r3, [pc, #376]	@ (8006f80 <loadMenuTexts+0x12dc>)
 8006e06:	4614      	mov	r4, r2
 8006e08:	461d      	mov	r5, r3
 8006e0a:	6828      	ldr	r0, [r5, #0]
 8006e0c:	6869      	ldr	r1, [r5, #4]
 8006e0e:	68aa      	ldr	r2, [r5, #8]
 8006e10:	68eb      	ldr	r3, [r5, #12]
 8006e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e14:	7c2b      	ldrb	r3, [r5, #16]
 8006e16:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 8006e18:	4a5a      	ldr	r2, [pc, #360]	@ (8006f84 <loadMenuTexts+0x12e0>)
 8006e1a:	4b5b      	ldr	r3, [pc, #364]	@ (8006f88 <loadMenuTexts+0x12e4>)
 8006e1c:	4614      	mov	r4, r2
 8006e1e:	461d      	mov	r5, r3
 8006e20:	6828      	ldr	r0, [r5, #0]
 8006e22:	6869      	ldr	r1, [r5, #4]
 8006e24:	68aa      	ldr	r2, [r5, #8]
 8006e26:	68eb      	ldr	r3, [r5, #12]
 8006e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e2a:	7c2b      	ldrb	r3, [r5, #16]
 8006e2c:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 8006e2e:	4a57      	ldr	r2, [pc, #348]	@ (8006f8c <loadMenuTexts+0x12e8>)
 8006e30:	4b57      	ldr	r3, [pc, #348]	@ (8006f90 <loadMenuTexts+0x12ec>)
 8006e32:	4614      	mov	r4, r2
 8006e34:	461d      	mov	r5, r3
 8006e36:	6828      	ldr	r0, [r5, #0]
 8006e38:	6869      	ldr	r1, [r5, #4]
 8006e3a:	68aa      	ldr	r2, [r5, #8]
 8006e3c:	68eb      	ldr	r3, [r5, #12]
 8006e3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e40:	7c2b      	ldrb	r3, [r5, #16]
 8006e42:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 8006e44:	4a53      	ldr	r2, [pc, #332]	@ (8006f94 <loadMenuTexts+0x12f0>)
 8006e46:	4b54      	ldr	r3, [pc, #336]	@ (8006f98 <loadMenuTexts+0x12f4>)
 8006e48:	4614      	mov	r4, r2
 8006e4a:	461d      	mov	r5, r3
 8006e4c:	6828      	ldr	r0, [r5, #0]
 8006e4e:	6869      	ldr	r1, [r5, #4]
 8006e50:	68aa      	ldr	r2, [r5, #8]
 8006e52:	68eb      	ldr	r3, [r5, #12]
 8006e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e56:	7c2b      	ldrb	r3, [r5, #16]
 8006e58:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 8006e5a:	4a50      	ldr	r2, [pc, #320]	@ (8006f9c <loadMenuTexts+0x12f8>)
 8006e5c:	4b50      	ldr	r3, [pc, #320]	@ (8006fa0 <loadMenuTexts+0x12fc>)
 8006e5e:	4614      	mov	r4, r2
 8006e60:	461d      	mov	r5, r3
 8006e62:	6828      	ldr	r0, [r5, #0]
 8006e64:	6869      	ldr	r1, [r5, #4]
 8006e66:	68aa      	ldr	r2, [r5, #8]
 8006e68:	68eb      	ldr	r3, [r5, #12]
 8006e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e6c:	7c2b      	ldrb	r3, [r5, #16]
 8006e6e:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 8006e70:	4a4c      	ldr	r2, [pc, #304]	@ (8006fa4 <loadMenuTexts+0x1300>)
 8006e72:	4b4d      	ldr	r3, [pc, #308]	@ (8006fa8 <loadMenuTexts+0x1304>)
 8006e74:	4614      	mov	r4, r2
 8006e76:	461d      	mov	r5, r3
 8006e78:	6828      	ldr	r0, [r5, #0]
 8006e7a:	6869      	ldr	r1, [r5, #4]
 8006e7c:	68aa      	ldr	r2, [r5, #8]
 8006e7e:	68eb      	ldr	r3, [r5, #12]
 8006e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e82:	7c2b      	ldrb	r3, [r5, #16]
 8006e84:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 8006e86:	4a49      	ldr	r2, [pc, #292]	@ (8006fac <loadMenuTexts+0x1308>)
 8006e88:	4b49      	ldr	r3, [pc, #292]	@ (8006fb0 <loadMenuTexts+0x130c>)
 8006e8a:	4614      	mov	r4, r2
 8006e8c:	461d      	mov	r5, r3
 8006e8e:	e091      	b.n	8006fb4 <loadMenuTexts+0x1310>
 8006e90:	200009d4 	.word	0x200009d4
 8006e94:	200013b8 	.word	0x200013b8
 8006e98:	200009e8 	.word	0x200009e8
 8006e9c:	200013cc 	.word	0x200013cc
 8006ea0:	200009fc 	.word	0x200009fc
 8006ea4:	200013e0 	.word	0x200013e0
 8006ea8:	20000a10 	.word	0x20000a10
 8006eac:	200013f4 	.word	0x200013f4
 8006eb0:	20000a24 	.word	0x20000a24
 8006eb4:	20001408 	.word	0x20001408
 8006eb8:	20000a38 	.word	0x20000a38
 8006ebc:	2000141c 	.word	0x2000141c
 8006ec0:	20000a4c 	.word	0x20000a4c
 8006ec4:	20001430 	.word	0x20001430
 8006ec8:	20000a60 	.word	0x20000a60
 8006ecc:	20001444 	.word	0x20001444
 8006ed0:	20000a74 	.word	0x20000a74
 8006ed4:	20001458 	.word	0x20001458
 8006ed8:	20000a88 	.word	0x20000a88
 8006edc:	2000146c 	.word	0x2000146c
 8006ee0:	20000a9c 	.word	0x20000a9c
 8006ee4:	20001480 	.word	0x20001480
 8006ee8:	20000ab0 	.word	0x20000ab0
 8006eec:	20001494 	.word	0x20001494
 8006ef0:	20000ac4 	.word	0x20000ac4
 8006ef4:	200014a8 	.word	0x200014a8
 8006ef8:	20000ad8 	.word	0x20000ad8
 8006efc:	200014bc 	.word	0x200014bc
 8006f00:	20000aec 	.word	0x20000aec
 8006f04:	200014d0 	.word	0x200014d0
 8006f08:	20000b00 	.word	0x20000b00
 8006f0c:	200014e4 	.word	0x200014e4
 8006f10:	20000b14 	.word	0x20000b14
 8006f14:	200014f8 	.word	0x200014f8
 8006f18:	20000b28 	.word	0x20000b28
 8006f1c:	2000150c 	.word	0x2000150c
 8006f20:	20000b3c 	.word	0x20000b3c
 8006f24:	20001520 	.word	0x20001520
 8006f28:	20000b50 	.word	0x20000b50
 8006f2c:	20001534 	.word	0x20001534
 8006f30:	20000b64 	.word	0x20000b64
 8006f34:	20001548 	.word	0x20001548
 8006f38:	20000b78 	.word	0x20000b78
 8006f3c:	2000155c 	.word	0x2000155c
 8006f40:	20000b8c 	.word	0x20000b8c
 8006f44:	20001570 	.word	0x20001570
 8006f48:	20000ba0 	.word	0x20000ba0
 8006f4c:	20001584 	.word	0x20001584
 8006f50:	20000bb4 	.word	0x20000bb4
 8006f54:	20001598 	.word	0x20001598
 8006f58:	20000bc8 	.word	0x20000bc8
 8006f5c:	200015ac 	.word	0x200015ac
 8006f60:	20000bdc 	.word	0x20000bdc
 8006f64:	200015c0 	.word	0x200015c0
 8006f68:	20000bf0 	.word	0x20000bf0
 8006f6c:	200015d4 	.word	0x200015d4
 8006f70:	20000c04 	.word	0x20000c04
 8006f74:	200015e8 	.word	0x200015e8
 8006f78:	20000c18 	.word	0x20000c18
 8006f7c:	200015fc 	.word	0x200015fc
 8006f80:	20000c2c 	.word	0x20000c2c
 8006f84:	20001610 	.word	0x20001610
 8006f88:	20000c40 	.word	0x20000c40
 8006f8c:	20001624 	.word	0x20001624
 8006f90:	20000c54 	.word	0x20000c54
 8006f94:	20001638 	.word	0x20001638
 8006f98:	20000c68 	.word	0x20000c68
 8006f9c:	2000164c 	.word	0x2000164c
 8006fa0:	20000cf4 	.word	0x20000cf4
 8006fa4:	20001660 	.word	0x20001660
 8006fa8:	20000d08 	.word	0x20000d08
 8006fac:	20001674 	.word	0x20001674
 8006fb0:	20000ccc 	.word	0x20000ccc
 8006fb4:	6828      	ldr	r0, [r5, #0]
 8006fb6:	6869      	ldr	r1, [r5, #4]
 8006fb8:	68aa      	ldr	r2, [r5, #8]
 8006fba:	68eb      	ldr	r3, [r5, #12]
 8006fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fbe:	7c2b      	ldrb	r3, [r5, #16]
 8006fc0:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 8006fc2:	4a5b      	ldr	r2, [pc, #364]	@ (8007130 <loadMenuTexts+0x148c>)
 8006fc4:	4b5b      	ldr	r3, [pc, #364]	@ (8007134 <loadMenuTexts+0x1490>)
 8006fc6:	4614      	mov	r4, r2
 8006fc8:	461d      	mov	r5, r3
 8006fca:	6828      	ldr	r0, [r5, #0]
 8006fcc:	6869      	ldr	r1, [r5, #4]
 8006fce:	68aa      	ldr	r2, [r5, #8]
 8006fd0:	68eb      	ldr	r3, [r5, #12]
 8006fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fd4:	7c2b      	ldrb	r3, [r5, #16]
 8006fd6:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 8006fd8:	4a57      	ldr	r2, [pc, #348]	@ (8007138 <loadMenuTexts+0x1494>)
 8006fda:	4b58      	ldr	r3, [pc, #352]	@ (800713c <loadMenuTexts+0x1498>)
 8006fdc:	4614      	mov	r4, r2
 8006fde:	461d      	mov	r5, r3
 8006fe0:	6828      	ldr	r0, [r5, #0]
 8006fe2:	6869      	ldr	r1, [r5, #4]
 8006fe4:	68aa      	ldr	r2, [r5, #8]
 8006fe6:	68eb      	ldr	r3, [r5, #12]
 8006fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fea:	7c2b      	ldrb	r3, [r5, #16]
 8006fec:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 8006fee:	4a54      	ldr	r2, [pc, #336]	@ (8007140 <loadMenuTexts+0x149c>)
 8006ff0:	4b54      	ldr	r3, [pc, #336]	@ (8007144 <loadMenuTexts+0x14a0>)
 8006ff2:	4614      	mov	r4, r2
 8006ff4:	461d      	mov	r5, r3
 8006ff6:	6828      	ldr	r0, [r5, #0]
 8006ff8:	6869      	ldr	r1, [r5, #4]
 8006ffa:	68aa      	ldr	r2, [r5, #8]
 8006ffc:	68eb      	ldr	r3, [r5, #12]
 8006ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007000:	7c2b      	ldrb	r3, [r5, #16]
 8007002:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 8007004:	4a50      	ldr	r2, [pc, #320]	@ (8007148 <loadMenuTexts+0x14a4>)
 8007006:	4b51      	ldr	r3, [pc, #324]	@ (800714c <loadMenuTexts+0x14a8>)
 8007008:	4614      	mov	r4, r2
 800700a:	461d      	mov	r5, r3
 800700c:	6828      	ldr	r0, [r5, #0]
 800700e:	6869      	ldr	r1, [r5, #4]
 8007010:	68aa      	ldr	r2, [r5, #8]
 8007012:	68eb      	ldr	r3, [r5, #12]
 8007014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007016:	7c2b      	ldrb	r3, [r5, #16]
 8007018:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 800701a:	4a4d      	ldr	r2, [pc, #308]	@ (8007150 <loadMenuTexts+0x14ac>)
 800701c:	4b4d      	ldr	r3, [pc, #308]	@ (8007154 <loadMenuTexts+0x14b0>)
 800701e:	4614      	mov	r4, r2
 8007020:	461d      	mov	r5, r3
 8007022:	6828      	ldr	r0, [r5, #0]
 8007024:	6869      	ldr	r1, [r5, #4]
 8007026:	68aa      	ldr	r2, [r5, #8]
 8007028:	68eb      	ldr	r3, [r5, #12]
 800702a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800702c:	7c2b      	ldrb	r3, [r5, #16]
 800702e:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 8007030:	4a49      	ldr	r2, [pc, #292]	@ (8007158 <loadMenuTexts+0x14b4>)
 8007032:	4b4a      	ldr	r3, [pc, #296]	@ (800715c <loadMenuTexts+0x14b8>)
 8007034:	4614      	mov	r4, r2
 8007036:	461d      	mov	r5, r3
 8007038:	6828      	ldr	r0, [r5, #0]
 800703a:	6869      	ldr	r1, [r5, #4]
 800703c:	68aa      	ldr	r2, [r5, #8]
 800703e:	68eb      	ldr	r3, [r5, #12]
 8007040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007042:	7c2b      	ldrb	r3, [r5, #16]
 8007044:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 8007046:	4a46      	ldr	r2, [pc, #280]	@ (8007160 <loadMenuTexts+0x14bc>)
 8007048:	4b46      	ldr	r3, [pc, #280]	@ (8007164 <loadMenuTexts+0x14c0>)
 800704a:	4614      	mov	r4, r2
 800704c:	461d      	mov	r5, r3
 800704e:	6828      	ldr	r0, [r5, #0]
 8007050:	6869      	ldr	r1, [r5, #4]
 8007052:	68aa      	ldr	r2, [r5, #8]
 8007054:	68eb      	ldr	r3, [r5, #12]
 8007056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007058:	7c2b      	ldrb	r3, [r5, #16]
 800705a:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 800705c:	4a42      	ldr	r2, [pc, #264]	@ (8007168 <loadMenuTexts+0x14c4>)
 800705e:	4b43      	ldr	r3, [pc, #268]	@ (800716c <loadMenuTexts+0x14c8>)
 8007060:	4614      	mov	r4, r2
 8007062:	461d      	mov	r5, r3
 8007064:	6828      	ldr	r0, [r5, #0]
 8007066:	6869      	ldr	r1, [r5, #4]
 8007068:	68aa      	ldr	r2, [r5, #8]
 800706a:	68eb      	ldr	r3, [r5, #12]
 800706c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800706e:	7c2b      	ldrb	r3, [r5, #16]
 8007070:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 8007072:	4a3f      	ldr	r2, [pc, #252]	@ (8007170 <loadMenuTexts+0x14cc>)
 8007074:	4b3f      	ldr	r3, [pc, #252]	@ (8007174 <loadMenuTexts+0x14d0>)
 8007076:	4614      	mov	r4, r2
 8007078:	461d      	mov	r5, r3
 800707a:	6828      	ldr	r0, [r5, #0]
 800707c:	6869      	ldr	r1, [r5, #4]
 800707e:	68aa      	ldr	r2, [r5, #8]
 8007080:	68eb      	ldr	r3, [r5, #12]
 8007082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007084:	7c2b      	ldrb	r3, [r5, #16]
 8007086:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 8007088:	4a3b      	ldr	r2, [pc, #236]	@ (8007178 <loadMenuTexts+0x14d4>)
 800708a:	4b3c      	ldr	r3, [pc, #240]	@ (800717c <loadMenuTexts+0x14d8>)
 800708c:	4614      	mov	r4, r2
 800708e:	461d      	mov	r5, r3
 8007090:	6828      	ldr	r0, [r5, #0]
 8007092:	6869      	ldr	r1, [r5, #4]
 8007094:	68aa      	ldr	r2, [r5, #8]
 8007096:	68eb      	ldr	r3, [r5, #12]
 8007098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800709a:	7c2b      	ldrb	r3, [r5, #16]
 800709c:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 800709e:	4a38      	ldr	r2, [pc, #224]	@ (8007180 <loadMenuTexts+0x14dc>)
 80070a0:	4b38      	ldr	r3, [pc, #224]	@ (8007184 <loadMenuTexts+0x14e0>)
 80070a2:	4614      	mov	r4, r2
 80070a4:	461d      	mov	r5, r3
 80070a6:	6828      	ldr	r0, [r5, #0]
 80070a8:	6869      	ldr	r1, [r5, #4]
 80070aa:	68aa      	ldr	r2, [r5, #8]
 80070ac:	68eb      	ldr	r3, [r5, #12]
 80070ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070b0:	7c2b      	ldrb	r3, [r5, #16]
 80070b2:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 80070b4:	4a34      	ldr	r2, [pc, #208]	@ (8007188 <loadMenuTexts+0x14e4>)
 80070b6:	4b35      	ldr	r3, [pc, #212]	@ (800718c <loadMenuTexts+0x14e8>)
 80070b8:	4614      	mov	r4, r2
 80070ba:	461d      	mov	r5, r3
 80070bc:	6828      	ldr	r0, [r5, #0]
 80070be:	6869      	ldr	r1, [r5, #4]
 80070c0:	68aa      	ldr	r2, [r5, #8]
 80070c2:	68eb      	ldr	r3, [r5, #12]
 80070c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070c6:	7c2b      	ldrb	r3, [r5, #16]
 80070c8:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 80070ca:	4a31      	ldr	r2, [pc, #196]	@ (8007190 <loadMenuTexts+0x14ec>)
 80070cc:	4b31      	ldr	r3, [pc, #196]	@ (8007194 <loadMenuTexts+0x14f0>)
 80070ce:	4614      	mov	r4, r2
 80070d0:	461d      	mov	r5, r3
 80070d2:	6828      	ldr	r0, [r5, #0]
 80070d4:	6869      	ldr	r1, [r5, #4]
 80070d6:	68aa      	ldr	r2, [r5, #8]
 80070d8:	68eb      	ldr	r3, [r5, #12]
 80070da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070dc:	7c2b      	ldrb	r3, [r5, #16]
 80070de:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 80070e0:	4a2d      	ldr	r2, [pc, #180]	@ (8007198 <loadMenuTexts+0x14f4>)
 80070e2:	4b2e      	ldr	r3, [pc, #184]	@ (800719c <loadMenuTexts+0x14f8>)
 80070e4:	4614      	mov	r4, r2
 80070e6:	461d      	mov	r5, r3
 80070e8:	6828      	ldr	r0, [r5, #0]
 80070ea:	6869      	ldr	r1, [r5, #4]
 80070ec:	68aa      	ldr	r2, [r5, #8]
 80070ee:	68eb      	ldr	r3, [r5, #12]
 80070f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070f2:	7c2b      	ldrb	r3, [r5, #16]
 80070f4:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 80070f6:	4a2a      	ldr	r2, [pc, #168]	@ (80071a0 <loadMenuTexts+0x14fc>)
 80070f8:	4b2a      	ldr	r3, [pc, #168]	@ (80071a4 <loadMenuTexts+0x1500>)
 80070fa:	4614      	mov	r4, r2
 80070fc:	461d      	mov	r5, r3
 80070fe:	6828      	ldr	r0, [r5, #0]
 8007100:	6869      	ldr	r1, [r5, #4]
 8007102:	68aa      	ldr	r2, [r5, #8]
 8007104:	68eb      	ldr	r3, [r5, #12]
 8007106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007108:	7c2b      	ldrb	r3, [r5, #16]
 800710a:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 800710c:	4a26      	ldr	r2, [pc, #152]	@ (80071a8 <loadMenuTexts+0x1504>)
 800710e:	4b27      	ldr	r3, [pc, #156]	@ (80071ac <loadMenuTexts+0x1508>)
 8007110:	4614      	mov	r4, r2
 8007112:	461d      	mov	r5, r3
 8007114:	6828      	ldr	r0, [r5, #0]
 8007116:	6869      	ldr	r1, [r5, #4]
 8007118:	68aa      	ldr	r2, [r5, #8]
 800711a:	68eb      	ldr	r3, [r5, #12]
 800711c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800711e:	7c2b      	ldrb	r3, [r5, #16]
 8007120:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 8007122:	f000 f845 	bl	80071b0 <menuVariableFinisher>
}
 8007126:	bf00      	nop
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bdb0      	pop	{r4, r5, r7, pc}
 800712e:	bf00      	nop
 8007130:	20001688 	.word	0x20001688
 8007134:	20000ce0 	.word	0x20000ce0
 8007138:	2000169c 	.word	0x2000169c
 800713c:	20000d44 	.word	0x20000d44
 8007140:	200016b0 	.word	0x200016b0
 8007144:	20000d58 	.word	0x20000d58
 8007148:	200016c4 	.word	0x200016c4
 800714c:	20000d94 	.word	0x20000d94
 8007150:	200016d8 	.word	0x200016d8
 8007154:	20000da8 	.word	0x20000da8
 8007158:	200016ec 	.word	0x200016ec
 800715c:	20000de4 	.word	0x20000de4
 8007160:	20001700 	.word	0x20001700
 8007164:	20000df8 	.word	0x20000df8
 8007168:	20001714 	.word	0x20001714
 800716c:	20000e20 	.word	0x20000e20
 8007170:	20001728 	.word	0x20001728
 8007174:	20000e48 	.word	0x20000e48
 8007178:	2000173c 	.word	0x2000173c
 800717c:	20000e70 	.word	0x20000e70
 8007180:	20001750 	.word	0x20001750
 8007184:	20000e98 	.word	0x20000e98
 8007188:	20001764 	.word	0x20001764
 800718c:	20000ec0 	.word	0x20000ec0
 8007190:	20001778 	.word	0x20001778
 8007194:	20000ee8 	.word	0x20000ee8
 8007198:	2000178c 	.word	0x2000178c
 800719c:	20000f10 	.word	0x20000f10
 80071a0:	200017a0 	.word	0x200017a0
 80071a4:	20000f38 	.word	0x20000f38
 80071a8:	200017b4 	.word	0x200017b4
 80071ac:	20000f60 	.word	0x20000f60

080071b0 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 80071b0:	b480      	push	{r7}
 80071b2:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 80071b4:	4b99      	ldr	r3, [pc, #612]	@ (800741c <menuVariableFinisher+0x26c>)
 80071b6:	2200      	movs	r2, #0
 80071b8:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 80071ba:	4b99      	ldr	r3, [pc, #612]	@ (8007420 <menuVariableFinisher+0x270>)
 80071bc:	2200      	movs	r2, #0
 80071be:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 80071c0:	4b98      	ldr	r3, [pc, #608]	@ (8007424 <menuVariableFinisher+0x274>)
 80071c2:	2200      	movs	r2, #0
 80071c4:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 80071c6:	4b98      	ldr	r3, [pc, #608]	@ (8007428 <menuVariableFinisher+0x278>)
 80071c8:	2200      	movs	r2, #0
 80071ca:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 80071cc:	4b97      	ldr	r3, [pc, #604]	@ (800742c <menuVariableFinisher+0x27c>)
 80071ce:	2200      	movs	r2, #0
 80071d0:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 80071d2:	4b97      	ldr	r3, [pc, #604]	@ (8007430 <menuVariableFinisher+0x280>)
 80071d4:	2200      	movs	r2, #0
 80071d6:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 80071d8:	4b96      	ldr	r3, [pc, #600]	@ (8007434 <menuVariableFinisher+0x284>)
 80071da:	2200      	movs	r2, #0
 80071dc:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 80071de:	4b96      	ldr	r3, [pc, #600]	@ (8007438 <menuVariableFinisher+0x288>)
 80071e0:	2200      	movs	r2, #0
 80071e2:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 80071e4:	4b95      	ldr	r3, [pc, #596]	@ (800743c <menuVariableFinisher+0x28c>)
 80071e6:	2200      	movs	r2, #0
 80071e8:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 80071ea:	4b95      	ldr	r3, [pc, #596]	@ (8007440 <menuVariableFinisher+0x290>)
 80071ec:	2200      	movs	r2, #0
 80071ee:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 80071f0:	4b94      	ldr	r3, [pc, #592]	@ (8007444 <menuVariableFinisher+0x294>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 80071f6:	4b94      	ldr	r3, [pc, #592]	@ (8007448 <menuVariableFinisher+0x298>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 80071fc:	4b93      	ldr	r3, [pc, #588]	@ (800744c <menuVariableFinisher+0x29c>)
 80071fe:	2200      	movs	r2, #0
 8007200:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 8007202:	4b93      	ldr	r3, [pc, #588]	@ (8007450 <menuVariableFinisher+0x2a0>)
 8007204:	2200      	movs	r2, #0
 8007206:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 8007208:	4b92      	ldr	r3, [pc, #584]	@ (8007454 <menuVariableFinisher+0x2a4>)
 800720a:	2200      	movs	r2, #0
 800720c:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 800720e:	4b92      	ldr	r3, [pc, #584]	@ (8007458 <menuVariableFinisher+0x2a8>)
 8007210:	2200      	movs	r2, #0
 8007212:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 8007214:	4b91      	ldr	r3, [pc, #580]	@ (800745c <menuVariableFinisher+0x2ac>)
 8007216:	2200      	movs	r2, #0
 8007218:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 800721a:	4b91      	ldr	r3, [pc, #580]	@ (8007460 <menuVariableFinisher+0x2b0>)
 800721c:	2200      	movs	r2, #0
 800721e:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 8007220:	4b90      	ldr	r3, [pc, #576]	@ (8007464 <menuVariableFinisher+0x2b4>)
 8007222:	2200      	movs	r2, #0
 8007224:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 8007226:	4b90      	ldr	r3, [pc, #576]	@ (8007468 <menuVariableFinisher+0x2b8>)
 8007228:	2200      	movs	r2, #0
 800722a:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 800722c:	4b8f      	ldr	r3, [pc, #572]	@ (800746c <menuVariableFinisher+0x2bc>)
 800722e:	2200      	movs	r2, #0
 8007230:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 8007232:	4b8f      	ldr	r3, [pc, #572]	@ (8007470 <menuVariableFinisher+0x2c0>)
 8007234:	2200      	movs	r2, #0
 8007236:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 8007238:	4b8e      	ldr	r3, [pc, #568]	@ (8007474 <menuVariableFinisher+0x2c4>)
 800723a:	2200      	movs	r2, #0
 800723c:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 800723e:	4b8e      	ldr	r3, [pc, #568]	@ (8007478 <menuVariableFinisher+0x2c8>)
 8007240:	2200      	movs	r2, #0
 8007242:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 8007244:	4b8d      	ldr	r3, [pc, #564]	@ (800747c <menuVariableFinisher+0x2cc>)
 8007246:	2200      	movs	r2, #0
 8007248:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 800724a:	4b8d      	ldr	r3, [pc, #564]	@ (8007480 <menuVariableFinisher+0x2d0>)
 800724c:	2200      	movs	r2, #0
 800724e:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 8007250:	4b8c      	ldr	r3, [pc, #560]	@ (8007484 <menuVariableFinisher+0x2d4>)
 8007252:	2200      	movs	r2, #0
 8007254:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 8007256:	4b8c      	ldr	r3, [pc, #560]	@ (8007488 <menuVariableFinisher+0x2d8>)
 8007258:	2200      	movs	r2, #0
 800725a:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 800725c:	4b8b      	ldr	r3, [pc, #556]	@ (800748c <menuVariableFinisher+0x2dc>)
 800725e:	2200      	movs	r2, #0
 8007260:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 8007262:	4b8b      	ldr	r3, [pc, #556]	@ (8007490 <menuVariableFinisher+0x2e0>)
 8007264:	2200      	movs	r2, #0
 8007266:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 8007268:	4b8a      	ldr	r3, [pc, #552]	@ (8007494 <menuVariableFinisher+0x2e4>)
 800726a:	2200      	movs	r2, #0
 800726c:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 800726e:	4b8a      	ldr	r3, [pc, #552]	@ (8007498 <menuVariableFinisher+0x2e8>)
 8007270:	2200      	movs	r2, #0
 8007272:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 8007274:	4b89      	ldr	r3, [pc, #548]	@ (800749c <menuVariableFinisher+0x2ec>)
 8007276:	2200      	movs	r2, #0
 8007278:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 800727a:	4b89      	ldr	r3, [pc, #548]	@ (80074a0 <menuVariableFinisher+0x2f0>)
 800727c:	2200      	movs	r2, #0
 800727e:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 8007280:	4b88      	ldr	r3, [pc, #544]	@ (80074a4 <menuVariableFinisher+0x2f4>)
 8007282:	2200      	movs	r2, #0
 8007284:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 8007286:	4b88      	ldr	r3, [pc, #544]	@ (80074a8 <menuVariableFinisher+0x2f8>)
 8007288:	2200      	movs	r2, #0
 800728a:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 800728c:	4b87      	ldr	r3, [pc, #540]	@ (80074ac <menuVariableFinisher+0x2fc>)
 800728e:	2200      	movs	r2, #0
 8007290:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 8007292:	4b87      	ldr	r3, [pc, #540]	@ (80074b0 <menuVariableFinisher+0x300>)
 8007294:	2200      	movs	r2, #0
 8007296:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 8007298:	4b86      	ldr	r3, [pc, #536]	@ (80074b4 <menuVariableFinisher+0x304>)
 800729a:	2200      	movs	r2, #0
 800729c:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 800729e:	4b86      	ldr	r3, [pc, #536]	@ (80074b8 <menuVariableFinisher+0x308>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 80072a4:	4b85      	ldr	r3, [pc, #532]	@ (80074bc <menuVariableFinisher+0x30c>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 80072aa:	4b85      	ldr	r3, [pc, #532]	@ (80074c0 <menuVariableFinisher+0x310>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 80072b0:	4b84      	ldr	r3, [pc, #528]	@ (80074c4 <menuVariableFinisher+0x314>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 80072b6:	4b84      	ldr	r3, [pc, #528]	@ (80074c8 <menuVariableFinisher+0x318>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 80072bc:	4b83      	ldr	r3, [pc, #524]	@ (80074cc <menuVariableFinisher+0x31c>)
 80072be:	2200      	movs	r2, #0
 80072c0:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 80072c2:	4b83      	ldr	r3, [pc, #524]	@ (80074d0 <menuVariableFinisher+0x320>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 80072c8:	4b82      	ldr	r3, [pc, #520]	@ (80074d4 <menuVariableFinisher+0x324>)
 80072ca:	2200      	movs	r2, #0
 80072cc:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 80072ce:	4b82      	ldr	r3, [pc, #520]	@ (80074d8 <menuVariableFinisher+0x328>)
 80072d0:	2200      	movs	r2, #0
 80072d2:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 80072d4:	4b81      	ldr	r3, [pc, #516]	@ (80074dc <menuVariableFinisher+0x32c>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 80072da:	4b81      	ldr	r3, [pc, #516]	@ (80074e0 <menuVariableFinisher+0x330>)
 80072dc:	2200      	movs	r2, #0
 80072de:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 80072e0:	4b80      	ldr	r3, [pc, #512]	@ (80074e4 <menuVariableFinisher+0x334>)
 80072e2:	2200      	movs	r2, #0
 80072e4:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 80072e6:	4b80      	ldr	r3, [pc, #512]	@ (80074e8 <menuVariableFinisher+0x338>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 80072ec:	4b7f      	ldr	r3, [pc, #508]	@ (80074ec <menuVariableFinisher+0x33c>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 80072f2:	4b7f      	ldr	r3, [pc, #508]	@ (80074f0 <menuVariableFinisher+0x340>)
 80072f4:	2200      	movs	r2, #0
 80072f6:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 80072f8:	4b7e      	ldr	r3, [pc, #504]	@ (80074f4 <menuVariableFinisher+0x344>)
 80072fa:	2200      	movs	r2, #0
 80072fc:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 80072fe:	4b7e      	ldr	r3, [pc, #504]	@ (80074f8 <menuVariableFinisher+0x348>)
 8007300:	2200      	movs	r2, #0
 8007302:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 8007304:	4b7d      	ldr	r3, [pc, #500]	@ (80074fc <menuVariableFinisher+0x34c>)
 8007306:	2200      	movs	r2, #0
 8007308:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 800730a:	4b7d      	ldr	r3, [pc, #500]	@ (8007500 <menuVariableFinisher+0x350>)
 800730c:	2200      	movs	r2, #0
 800730e:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8007310:	4b7c      	ldr	r3, [pc, #496]	@ (8007504 <menuVariableFinisher+0x354>)
 8007312:	2200      	movs	r2, #0
 8007314:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 8007316:	4b7c      	ldr	r3, [pc, #496]	@ (8007508 <menuVariableFinisher+0x358>)
 8007318:	2200      	movs	r2, #0
 800731a:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 800731c:	4b7b      	ldr	r3, [pc, #492]	@ (800750c <menuVariableFinisher+0x35c>)
 800731e:	2200      	movs	r2, #0
 8007320:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 8007322:	4b7b      	ldr	r3, [pc, #492]	@ (8007510 <menuVariableFinisher+0x360>)
 8007324:	2200      	movs	r2, #0
 8007326:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 8007328:	4b7a      	ldr	r3, [pc, #488]	@ (8007514 <menuVariableFinisher+0x364>)
 800732a:	2200      	movs	r2, #0
 800732c:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 800732e:	4b7a      	ldr	r3, [pc, #488]	@ (8007518 <menuVariableFinisher+0x368>)
 8007330:	2200      	movs	r2, #0
 8007332:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 8007334:	4b79      	ldr	r3, [pc, #484]	@ (800751c <menuVariableFinisher+0x36c>)
 8007336:	2200      	movs	r2, #0
 8007338:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 800733a:	4b79      	ldr	r3, [pc, #484]	@ (8007520 <menuVariableFinisher+0x370>)
 800733c:	2200      	movs	r2, #0
 800733e:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 8007340:	4b78      	ldr	r3, [pc, #480]	@ (8007524 <menuVariableFinisher+0x374>)
 8007342:	2200      	movs	r2, #0
 8007344:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 8007346:	4b78      	ldr	r3, [pc, #480]	@ (8007528 <menuVariableFinisher+0x378>)
 8007348:	2200      	movs	r2, #0
 800734a:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 800734c:	4b77      	ldr	r3, [pc, #476]	@ (800752c <menuVariableFinisher+0x37c>)
 800734e:	2200      	movs	r2, #0
 8007350:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 8007352:	4b77      	ldr	r3, [pc, #476]	@ (8007530 <menuVariableFinisher+0x380>)
 8007354:	2200      	movs	r2, #0
 8007356:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 8007358:	4b76      	ldr	r3, [pc, #472]	@ (8007534 <menuVariableFinisher+0x384>)
 800735a:	2200      	movs	r2, #0
 800735c:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 800735e:	4b76      	ldr	r3, [pc, #472]	@ (8007538 <menuVariableFinisher+0x388>)
 8007360:	2200      	movs	r2, #0
 8007362:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 8007364:	4b75      	ldr	r3, [pc, #468]	@ (800753c <menuVariableFinisher+0x38c>)
 8007366:	2200      	movs	r2, #0
 8007368:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 800736a:	4b75      	ldr	r3, [pc, #468]	@ (8007540 <menuVariableFinisher+0x390>)
 800736c:	2200      	movs	r2, #0
 800736e:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 8007370:	4b74      	ldr	r3, [pc, #464]	@ (8007544 <menuVariableFinisher+0x394>)
 8007372:	2200      	movs	r2, #0
 8007374:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 8007376:	4b74      	ldr	r3, [pc, #464]	@ (8007548 <menuVariableFinisher+0x398>)
 8007378:	2200      	movs	r2, #0
 800737a:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 800737c:	4b73      	ldr	r3, [pc, #460]	@ (800754c <menuVariableFinisher+0x39c>)
 800737e:	2200      	movs	r2, #0
 8007380:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 8007382:	4b73      	ldr	r3, [pc, #460]	@ (8007550 <menuVariableFinisher+0x3a0>)
 8007384:	2200      	movs	r2, #0
 8007386:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 8007388:	4b72      	ldr	r3, [pc, #456]	@ (8007554 <menuVariableFinisher+0x3a4>)
 800738a:	2200      	movs	r2, #0
 800738c:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 800738e:	4b72      	ldr	r3, [pc, #456]	@ (8007558 <menuVariableFinisher+0x3a8>)
 8007390:	2200      	movs	r2, #0
 8007392:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 8007394:	4b71      	ldr	r3, [pc, #452]	@ (800755c <menuVariableFinisher+0x3ac>)
 8007396:	2200      	movs	r2, #0
 8007398:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 800739a:	4b71      	ldr	r3, [pc, #452]	@ (8007560 <menuVariableFinisher+0x3b0>)
 800739c:	2200      	movs	r2, #0
 800739e:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 80073a0:	4b70      	ldr	r3, [pc, #448]	@ (8007564 <menuVariableFinisher+0x3b4>)
 80073a2:	2200      	movs	r2, #0
 80073a4:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 80073a6:	4b70      	ldr	r3, [pc, #448]	@ (8007568 <menuVariableFinisher+0x3b8>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 80073ac:	4b6f      	ldr	r3, [pc, #444]	@ (800756c <menuVariableFinisher+0x3bc>)
 80073ae:	2200      	movs	r2, #0
 80073b0:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 80073b2:	4b6f      	ldr	r3, [pc, #444]	@ (8007570 <menuVariableFinisher+0x3c0>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 80073b8:	4b6e      	ldr	r3, [pc, #440]	@ (8007574 <menuVariableFinisher+0x3c4>)
 80073ba:	2200      	movs	r2, #0
 80073bc:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 80073be:	4b6e      	ldr	r3, [pc, #440]	@ (8007578 <menuVariableFinisher+0x3c8>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 80073c4:	4b6d      	ldr	r3, [pc, #436]	@ (800757c <menuVariableFinisher+0x3cc>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 80073ca:	4b6d      	ldr	r3, [pc, #436]	@ (8007580 <menuVariableFinisher+0x3d0>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 80073d0:	4b6c      	ldr	r3, [pc, #432]	@ (8007584 <menuVariableFinisher+0x3d4>)
 80073d2:	2200      	movs	r2, #0
 80073d4:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 80073d6:	4b6c      	ldr	r3, [pc, #432]	@ (8007588 <menuVariableFinisher+0x3d8>)
 80073d8:	2200      	movs	r2, #0
 80073da:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 80073dc:	4b6b      	ldr	r3, [pc, #428]	@ (800758c <menuVariableFinisher+0x3dc>)
 80073de:	2200      	movs	r2, #0
 80073e0:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 80073e2:	4b6b      	ldr	r3, [pc, #428]	@ (8007590 <menuVariableFinisher+0x3e0>)
 80073e4:	2200      	movs	r2, #0
 80073e6:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 80073e8:	4b6a      	ldr	r3, [pc, #424]	@ (8007594 <menuVariableFinisher+0x3e4>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 80073ee:	4b6a      	ldr	r3, [pc, #424]	@ (8007598 <menuVariableFinisher+0x3e8>)
 80073f0:	2200      	movs	r2, #0
 80073f2:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 80073f4:	4b69      	ldr	r3, [pc, #420]	@ (800759c <menuVariableFinisher+0x3ec>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 80073fa:	4b69      	ldr	r3, [pc, #420]	@ (80075a0 <menuVariableFinisher+0x3f0>)
 80073fc:	2200      	movs	r2, #0
 80073fe:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 8007400:	4b68      	ldr	r3, [pc, #416]	@ (80075a4 <menuVariableFinisher+0x3f4>)
 8007402:	2200      	movs	r2, #0
 8007404:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 8007406:	4b68      	ldr	r3, [pc, #416]	@ (80075a8 <menuVariableFinisher+0x3f8>)
 8007408:	2200      	movs	r2, #0
 800740a:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 800740c:	4b67      	ldr	r3, [pc, #412]	@ (80075ac <menuVariableFinisher+0x3fc>)
 800740e:	2200      	movs	r2, #0
 8007410:	741a      	strb	r2, [r3, #16]
}
 8007412:	bf00      	nop
 8007414:	46bd      	mov	sp, r7
 8007416:	bc80      	pop	{r7}
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	2000009c 	.word	0x2000009c
 8007420:	200000b0 	.word	0x200000b0
 8007424:	200000c4 	.word	0x200000c4
 8007428:	200000d8 	.word	0x200000d8
 800742c:	200000ec 	.word	0x200000ec
 8007430:	20000100 	.word	0x20000100
 8007434:	20000114 	.word	0x20000114
 8007438:	20000128 	.word	0x20000128
 800743c:	2000013c 	.word	0x2000013c
 8007440:	20000150 	.word	0x20000150
 8007444:	20000164 	.word	0x20000164
 8007448:	20000178 	.word	0x20000178
 800744c:	200010d4 	.word	0x200010d4
 8007450:	200010e8 	.word	0x200010e8
 8007454:	200010fc 	.word	0x200010fc
 8007458:	20001110 	.word	0x20001110
 800745c:	20001124 	.word	0x20001124
 8007460:	20001138 	.word	0x20001138
 8007464:	2000114c 	.word	0x2000114c
 8007468:	20001160 	.word	0x20001160
 800746c:	20001174 	.word	0x20001174
 8007470:	20001188 	.word	0x20001188
 8007474:	2000119c 	.word	0x2000119c
 8007478:	200011b0 	.word	0x200011b0
 800747c:	200011c4 	.word	0x200011c4
 8007480:	200011d8 	.word	0x200011d8
 8007484:	200011ec 	.word	0x200011ec
 8007488:	20001200 	.word	0x20001200
 800748c:	20001214 	.word	0x20001214
 8007490:	20001228 	.word	0x20001228
 8007494:	2000123c 	.word	0x2000123c
 8007498:	20001250 	.word	0x20001250
 800749c:	20001264 	.word	0x20001264
 80074a0:	20001278 	.word	0x20001278
 80074a4:	2000128c 	.word	0x2000128c
 80074a8:	200012a0 	.word	0x200012a0
 80074ac:	200012b4 	.word	0x200012b4
 80074b0:	200012c8 	.word	0x200012c8
 80074b4:	200012dc 	.word	0x200012dc
 80074b8:	200012f0 	.word	0x200012f0
 80074bc:	20001304 	.word	0x20001304
 80074c0:	20001318 	.word	0x20001318
 80074c4:	2000132c 	.word	0x2000132c
 80074c8:	20001340 	.word	0x20001340
 80074cc:	20001354 	.word	0x20001354
 80074d0:	20001368 	.word	0x20001368
 80074d4:	2000137c 	.word	0x2000137c
 80074d8:	20001390 	.word	0x20001390
 80074dc:	200013a4 	.word	0x200013a4
 80074e0:	200013b8 	.word	0x200013b8
 80074e4:	200013cc 	.word	0x200013cc
 80074e8:	200013e0 	.word	0x200013e0
 80074ec:	200013f4 	.word	0x200013f4
 80074f0:	20001408 	.word	0x20001408
 80074f4:	2000141c 	.word	0x2000141c
 80074f8:	20001430 	.word	0x20001430
 80074fc:	20001444 	.word	0x20001444
 8007500:	20001458 	.word	0x20001458
 8007504:	2000146c 	.word	0x2000146c
 8007508:	20001480 	.word	0x20001480
 800750c:	20001494 	.word	0x20001494
 8007510:	200014a8 	.word	0x200014a8
 8007514:	200014bc 	.word	0x200014bc
 8007518:	200014d0 	.word	0x200014d0
 800751c:	200014e4 	.word	0x200014e4
 8007520:	200014f8 	.word	0x200014f8
 8007524:	2000150c 	.word	0x2000150c
 8007528:	20001520 	.word	0x20001520
 800752c:	20001534 	.word	0x20001534
 8007530:	20001548 	.word	0x20001548
 8007534:	2000155c 	.word	0x2000155c
 8007538:	20001570 	.word	0x20001570
 800753c:	20001584 	.word	0x20001584
 8007540:	20001598 	.word	0x20001598
 8007544:	200015ac 	.word	0x200015ac
 8007548:	200015c0 	.word	0x200015c0
 800754c:	200015d4 	.word	0x200015d4
 8007550:	200015e8 	.word	0x200015e8
 8007554:	200015fc 	.word	0x200015fc
 8007558:	20001610 	.word	0x20001610
 800755c:	20001624 	.word	0x20001624
 8007560:	20001638 	.word	0x20001638
 8007564:	2000164c 	.word	0x2000164c
 8007568:	20001660 	.word	0x20001660
 800756c:	20001674 	.word	0x20001674
 8007570:	20001688 	.word	0x20001688
 8007574:	2000169c 	.word	0x2000169c
 8007578:	200016b0 	.word	0x200016b0
 800757c:	200016c4 	.word	0x200016c4
 8007580:	200016d8 	.word	0x200016d8
 8007584:	200016ec 	.word	0x200016ec
 8007588:	20001700 	.word	0x20001700
 800758c:	20001714 	.word	0x20001714
 8007590:	20001728 	.word	0x20001728
 8007594:	2000173c 	.word	0x2000173c
 8007598:	20001750 	.word	0x20001750
 800759c:	20001764 	.word	0x20001764
 80075a0:	20001778 	.word	0x20001778
 80075a4:	2000178c 	.word	0x2000178c
 80075a8:	200017a0 	.word	0x200017a0
 80075ac:	200017b4 	.word	0x200017b4

080075b0 <resetMenuTexts>:

void resetMenuTexts() {
 80075b0:	b580      	push	{r7, lr}
 80075b2:	af00      	add	r7, sp, #0
    memset(menuyeGirildiText, 0, 17);
 80075b4:	2211      	movs	r2, #17
 80075b6:	2100      	movs	r1, #0
 80075b8:	48d3      	ldr	r0, [pc, #844]	@ (8007908 <resetMenuTexts+0x358>)
 80075ba:	f005 fc8b 	bl	800ced4 <memset>
    memset(ayarlarText, 0, 17);
 80075be:	2211      	movs	r2, #17
 80075c0:	2100      	movs	r1, #0
 80075c2:	48d2      	ldr	r0, [pc, #840]	@ (800790c <resetMenuTexts+0x35c>)
 80075c4:	f005 fc86 	bl	800ced4 <memset>
    memset(hataKayitListText, 0, 17);
 80075c8:	2211      	movs	r2, #17
 80075ca:	2100      	movs	r1, #0
 80075cc:	48d0      	ldr	r0, [pc, #832]	@ (8007910 <resetMenuTexts+0x360>)
 80075ce:	f005 fc81 	bl	800ced4 <memset>
    memset(birHataKoduText, 0, 17);
 80075d2:	2211      	movs	r2, #17
 80075d4:	2100      	movs	r1, #0
 80075d6:	48cf      	ldr	r0, [pc, #828]	@ (8007914 <resetMenuTexts+0x364>)
 80075d8:	f005 fc7c 	bl	800ced4 <memset>
    memset(ikiHataKoduText, 0, 17);
 80075dc:	2211      	movs	r2, #17
 80075de:	2100      	movs	r1, #0
 80075e0:	48cd      	ldr	r0, [pc, #820]	@ (8007918 <resetMenuTexts+0x368>)
 80075e2:	f005 fc77 	bl	800ced4 <memset>
    memset(ucHataKoduText, 0, 17);
 80075e6:	2211      	movs	r2, #17
 80075e8:	2100      	movs	r1, #0
 80075ea:	48cc      	ldr	r0, [pc, #816]	@ (800791c <resetMenuTexts+0x36c>)
 80075ec:	f005 fc72 	bl	800ced4 <memset>
    memset(dortHataKoduText, 0, 17);
 80075f0:	2211      	movs	r2, #17
 80075f2:	2100      	movs	r1, #0
 80075f4:	48ca      	ldr	r0, [pc, #808]	@ (8007920 <resetMenuTexts+0x370>)
 80075f6:	f005 fc6d 	bl	800ced4 <memset>
    memset(besHataKoduText, 0, 17);
 80075fa:	2211      	movs	r2, #17
 80075fc:	2100      	movs	r1, #0
 80075fe:	48c9      	ldr	r0, [pc, #804]	@ (8007924 <resetMenuTexts+0x374>)
 8007600:	f005 fc68 	bl	800ced4 <memset>
    memset(altiHataKoduText, 0, 17);
 8007604:	2211      	movs	r2, #17
 8007606:	2100      	movs	r1, #0
 8007608:	48c7      	ldr	r0, [pc, #796]	@ (8007928 <resetMenuTexts+0x378>)
 800760a:	f005 fc63 	bl	800ced4 <memset>
    memset(yediHataKoduText, 0, 17);
 800760e:	2211      	movs	r2, #17
 8007610:	2100      	movs	r1, #0
 8007612:	48c6      	ldr	r0, [pc, #792]	@ (800792c <resetMenuTexts+0x37c>)
 8007614:	f005 fc5e 	bl	800ced4 <memset>
    memset(sekizHataKoduText, 0, 17);
 8007618:	2211      	movs	r2, #17
 800761a:	2100      	movs	r1, #0
 800761c:	48c4      	ldr	r0, [pc, #784]	@ (8007930 <resetMenuTexts+0x380>)
 800761e:	f005 fc59 	bl	800ced4 <memset>
    memset(dokuzHataKoduText, 0, 17);
 8007622:	2211      	movs	r2, #17
 8007624:	2100      	movs	r1, #0
 8007626:	48c3      	ldr	r0, [pc, #780]	@ (8007934 <resetMenuTexts+0x384>)
 8007628:	f005 fc54 	bl	800ced4 <memset>
    memset(onHataKoduText, 0, 17);
 800762c:	2211      	movs	r2, #17
 800762e:	2100      	movs	r1, #0
 8007630:	48c1      	ldr	r0, [pc, #772]	@ (8007938 <resetMenuTexts+0x388>)
 8007632:	f005 fc4f 	bl	800ced4 <memset>
    memset(silmekIcinText, 0, 17);
 8007636:	2211      	movs	r2, #17
 8007638:	2100      	movs	r1, #0
 800763a:	48c0      	ldr	r0, [pc, #768]	@ (800793c <resetMenuTexts+0x38c>)
 800763c:	f005 fc4a 	bl	800ced4 <memset>
    memset(calismaSekliText, 0, 17);
 8007640:	2211      	movs	r2, #17
 8007642:	2100      	movs	r1, #0
 8007644:	48be      	ldr	r0, [pc, #760]	@ (8007940 <resetMenuTexts+0x390>)
 8007646:	f005 fc45 	bl	800ced4 <memset>
    memset(devirmeYuruyusText, 0, 17);
 800764a:	2211      	movs	r2, #17
 800764c:	2100      	movs	r1, #0
 800764e:	48bd      	ldr	r0, [pc, #756]	@ (8007944 <resetMenuTexts+0x394>)
 8007650:	f005 fc40 	bl	800ced4 <memset>
    memset(bastikcaCalisanText, 0, 17);
 8007654:	2211      	movs	r2, #17
 8007656:	2100      	movs	r1, #0
 8007658:	48bb      	ldr	r0, [pc, #748]	@ (8007948 <resetMenuTexts+0x398>)
 800765a:	f005 fc3b 	bl	800ced4 <memset>
    memset(basGonderText, 0, 17);
 800765e:	2211      	movs	r2, #17
 8007660:	2100      	movs	r1, #0
 8007662:	48ba      	ldr	r0, [pc, #744]	@ (800794c <resetMenuTexts+0x39c>)
 8007664:	f005 fc36 	bl	800ced4 <memset>
    memset(emniyetCercevesiText, 0, 17);
 8007668:	2211      	movs	r2, #17
 800766a:	2100      	movs	r1, #0
 800766c:	48b8      	ldr	r0, [pc, #736]	@ (8007950 <resetMenuTexts+0x3a0>)
 800766e:	f005 fc31 	bl	800ced4 <memset>
    memset(pasifText, 0, 17);
 8007672:	2211      	movs	r2, #17
 8007674:	2100      	movs	r1, #0
 8007676:	48b7      	ldr	r0, [pc, #732]	@ (8007954 <resetMenuTexts+0x3a4>)
 8007678:	f005 fc2c 	bl	800ced4 <memset>
    memset(aktifText, 0, 17);
 800767c:	2211      	movs	r2, #17
 800767e:	2100      	movs	r1, #0
 8007680:	48b5      	ldr	r0, [pc, #724]	@ (8007958 <resetMenuTexts+0x3a8>)
 8007682:	f005 fc27 	bl	800ced4 <memset>
    memset(yavaslamaLimitText, 0, 17);
 8007686:	2211      	movs	r2, #17
 8007688:	2100      	movs	r1, #0
 800768a:	48b4      	ldr	r0, [pc, #720]	@ (800795c <resetMenuTexts+0x3ac>)
 800768c:	f005 fc22 	bl	800ced4 <memset>
    memset(altLimitText, 0, 17);
 8007690:	2211      	movs	r2, #17
 8007692:	2100      	movs	r1, #0
 8007694:	48b2      	ldr	r0, [pc, #712]	@ (8007960 <resetMenuTexts+0x3b0>)
 8007696:	f005 fc1d 	bl	800ced4 <memset>
    memset(basincSalteriText, 0, 17);
 800769a:	2211      	movs	r2, #17
 800769c:	2100      	movs	r1, #0
 800769e:	48b1      	ldr	r0, [pc, #708]	@ (8007964 <resetMenuTexts+0x3b4>)
 80076a0:	f005 fc18 	bl	800ced4 <memset>
    memset(kapiSecimleriText, 0, 17);
 80076a4:	2211      	movs	r2, #17
 80076a6:	2100      	movs	r1, #0
 80076a8:	48af      	ldr	r0, [pc, #700]	@ (8007968 <resetMenuTexts+0x3b8>)
 80076aa:	f005 fc13 	bl	800ced4 <memset>
    memset(katKapisiAktifText, 0, 17);
 80076ae:	2211      	movs	r2, #17
 80076b0:	2100      	movs	r1, #0
 80076b2:	48ae      	ldr	r0, [pc, #696]	@ (800796c <resetMenuTexts+0x3bc>)
 80076b4:	f005 fc0e 	bl	800ced4 <memset>
    memset(tablaKapiAktifText, 0, 17);
 80076b8:	2211      	movs	r2, #17
 80076ba:	2100      	movs	r1, #0
 80076bc:	48ac      	ldr	r0, [pc, #688]	@ (8007970 <resetMenuTexts+0x3c0>)
 80076be:	f005 fc09 	bl	800ced4 <memset>
    memset(katArtiTablaAktifText, 0, 17);
 80076c2:	2211      	movs	r2, #17
 80076c4:	2100      	movs	r1, #0
 80076c6:	48ab      	ldr	r0, [pc, #684]	@ (8007974 <resetMenuTexts+0x3c4>)
 80076c8:	f005 fc04 	bl	800ced4 <memset>
    memset(kapiAcmaTipiText, 0, 17);
 80076cc:	2211      	movs	r2, #17
 80076ce:	2100      	movs	r1, #0
 80076d0:	48a9      	ldr	r0, [pc, #676]	@ (8007978 <resetMenuTexts+0x3c8>)
 80076d2:	f005 fbff 	bl	800ced4 <memset>
    memset(kapiButonuESPText, 0, 17);
 80076d6:	2211      	movs	r2, #17
 80076d8:	2100      	movs	r1, #0
 80076da:	48a8      	ldr	r0, [pc, #672]	@ (800797c <resetMenuTexts+0x3cc>)
 80076dc:	f005 fbfa 	bl	800ced4 <memset>
    memset(katButonuEXTText, 0, 17);
 80076e0:	2211      	movs	r2, #17
 80076e2:	2100      	movs	r1, #0
 80076e4:	48a6      	ldr	r0, [pc, #664]	@ (8007980 <resetMenuTexts+0x3d0>)
 80076e6:	f005 fbf5 	bl	800ced4 <memset>
    memset(birKatKapiTipiText, 0, 17);
 80076ea:	2211      	movs	r2, #17
 80076ec:	2100      	movs	r1, #0
 80076ee:	48a5      	ldr	r0, [pc, #660]	@ (8007984 <resetMenuTexts+0x3d4>)
 80076f0:	f005 fbf0 	bl	800ced4 <memset>
    memset(butonKontrolluText, 0, 17);
 80076f4:	2211      	movs	r2, #17
 80076f6:	2100      	movs	r1, #0
 80076f8:	48a3      	ldr	r0, [pc, #652]	@ (8007988 <resetMenuTexts+0x3d8>)
 80076fa:	f005 fbeb 	bl	800ced4 <memset>
    memset(birinciKapiAcSuresiText, 0, 17);
 80076fe:	2211      	movs	r2, #17
 8007700:	2100      	movs	r1, #0
 8007702:	48a2      	ldr	r0, [pc, #648]	@ (800798c <resetMenuTexts+0x3dc>)
 8007704:	f005 fbe6 	bl	800ced4 <memset>
    memset(kacSaniyeText, 0, 17);
 8007708:	2211      	movs	r2, #17
 800770a:	2100      	movs	r1, #0
 800770c:	48a0      	ldr	r0, [pc, #640]	@ (8007990 <resetMenuTexts+0x3e0>)
 800770e:	f005 fbe1 	bl	800ced4 <memset>
    memset(ikinciKatKapiTipiText, 0, 17);
 8007712:	2211      	movs	r2, #17
 8007714:	2100      	movs	r1, #0
 8007716:	489f      	ldr	r0, [pc, #636]	@ (8007994 <resetMenuTexts+0x3e4>)
 8007718:	f005 fbdc 	bl	800ced4 <memset>
    memset(ikinciKapiAcSuresiText, 0, 17);
 800771c:	2211      	movs	r2, #17
 800771e:	2100      	movs	r1, #0
 8007720:	489d      	ldr	r0, [pc, #628]	@ (8007998 <resetMenuTexts+0x3e8>)
 8007722:	f005 fbd7 	bl	800ced4 <memset>
    memset(tablaKapiTipiText, 0, 17);
 8007726:	2211      	movs	r2, #17
 8007728:	2100      	movs	r1, #0
 800772a:	489c      	ldr	r0, [pc, #624]	@ (800799c <resetMenuTexts+0x3ec>)
 800772c:	f005 fbd2 	bl	800ced4 <memset>
    memset(tablaKapiAcKonumText, 0, 17);
 8007730:	2211      	movs	r2, #17
 8007732:	2100      	movs	r1, #0
 8007734:	489a      	ldr	r0, [pc, #616]	@ (80079a0 <resetMenuTexts+0x3f0>)
 8007736:	f005 fbcd 	bl	800ced4 <memset>
    memset(birinciKattaAcText, 0, 17);
 800773a:	2211      	movs	r2, #17
 800773c:	2100      	movs	r1, #0
 800773e:	4899      	ldr	r0, [pc, #612]	@ (80079a4 <resetMenuTexts+0x3f4>)
 8007740:	f005 fbc8 	bl	800ced4 <memset>
    memset(ikinciKattaAcText, 0, 17);
 8007744:	2211      	movs	r2, #17
 8007746:	2100      	movs	r1, #0
 8007748:	4897      	ldr	r0, [pc, #604]	@ (80079a8 <resetMenuTexts+0x3f8>)
 800774a:	f005 fbc3 	bl	800ced4 <memset>
    memset(birVeIkinciKattaAcText, 0, 17);
 800774e:	2211      	movs	r2, #17
 8007750:	2100      	movs	r1, #0
 8007752:	4896      	ldr	r0, [pc, #600]	@ (80079ac <resetMenuTexts+0x3fc>)
 8007754:	f005 fbbe 	bl	800ced4 <memset>
    memset(tablaKapiAcSureText, 0, 17);
 8007758:	2211      	movs	r2, #17
 800775a:	2100      	movs	r1, #0
 800775c:	4894      	ldr	r0, [pc, #592]	@ (80079b0 <resetMenuTexts+0x400>)
 800775e:	f005 fbb9 	bl	800ced4 <memset>
    memset(yukariYavaslamaLimitiText, 0, 17);
 8007762:	2211      	movs	r2, #17
 8007764:	2100      	movs	r1, #0
 8007766:	4893      	ldr	r0, [pc, #588]	@ (80079b4 <resetMenuTexts+0x404>)
 8007768:	f005 fbb4 	bl	800ced4 <memset>
    memset(devirmeYuruyusMenuText, 0, 17);
 800776c:	2211      	movs	r2, #17
 800776e:	2100      	movs	r1, #0
 8007770:	4891      	ldr	r0, [pc, #580]	@ (80079b8 <resetMenuTexts+0x408>)
 8007772:	f005 fbaf 	bl	800ced4 <memset>
    memset(devirmeAktifText, 0, 17);
 8007776:	2211      	movs	r2, #17
 8007778:	2100      	movs	r1, #0
 800777a:	4890      	ldr	r0, [pc, #576]	@ (80079bc <resetMenuTexts+0x40c>)
 800777c:	f005 fbaa 	bl	800ced4 <memset>
    memset(yuruyusAktifText, 0, 17);
 8007780:	2211      	movs	r2, #17
 8007782:	2100      	movs	r1, #0
 8007784:	488e      	ldr	r0, [pc, #568]	@ (80079c0 <resetMenuTexts+0x410>)
 8007786:	f005 fba5 	bl	800ced4 <memset>
    memset(devirmeYukariText, 0, 17);
 800778a:	2211      	movs	r2, #17
 800778c:	2100      	movs	r1, #0
 800778e:	488d      	ldr	r0, [pc, #564]	@ (80079c4 <resetMenuTexts+0x414>)
 8007790:	f005 fba0 	bl	800ced4 <memset>
    memset(yuruyusIleriText, 0, 17);
 8007794:	2211      	movs	r2, #17
 8007796:	2100      	movs	r1, #0
 8007798:	488b      	ldr	r0, [pc, #556]	@ (80079c8 <resetMenuTexts+0x418>)
 800779a:	f005 fb9b 	bl	800ced4 <memset>
    memset(devirmeAsagiSivicText, 0, 17);
 800779e:	2211      	movs	r2, #17
 80077a0:	2100      	movs	r1, #0
 80077a2:	488a      	ldr	r0, [pc, #552]	@ (80079cc <resetMenuTexts+0x41c>)
 80077a4:	f005 fb96 	bl	800ced4 <memset>
    memset(yuruyusGeriSivicText, 0, 17);
 80077a8:	2211      	movs	r2, #17
 80077aa:	2100      	movs	r1, #0
 80077ac:	4888      	ldr	r0, [pc, #544]	@ (80079d0 <resetMenuTexts+0x420>)
 80077ae:	f005 fb91 	bl	800ced4 <memset>
    memset(yuruyusSecildiText, 0, 17);
 80077b2:	2211      	movs	r2, #17
 80077b4:	2100      	movs	r1, #0
 80077b6:	4887      	ldr	r0, [pc, #540]	@ (80079d4 <resetMenuTexts+0x424>)
 80077b8:	f005 fb8c 	bl	800ced4 <memset>
    memset(devirmeSilindirTipiText, 0, 17);
 80077bc:	2211      	movs	r2, #17
 80077be:	2100      	movs	r1, #0
 80077c0:	4885      	ldr	r0, [pc, #532]	@ (80079d8 <resetMenuTexts+0x428>)
 80077c2:	f005 fb87 	bl	800ced4 <memset>
    memset(tekTesirText, 0, 17);
 80077c6:	2211      	movs	r2, #17
 80077c8:	2100      	movs	r1, #0
 80077ca:	4884      	ldr	r0, [pc, #528]	@ (80079dc <resetMenuTexts+0x42c>)
 80077cc:	f005 fb82 	bl	800ced4 <memset>
    memset(ciftTesirText, 0, 17);
 80077d0:	2211      	movs	r2, #17
 80077d2:	2100      	movs	r1, #0
 80077d4:	4882      	ldr	r0, [pc, #520]	@ (80079e0 <resetMenuTexts+0x430>)
 80077d6:	f005 fb7d 	bl	800ced4 <memset>
    memset(platformSilindirTipiText, 0, 17);
 80077da:	2211      	movs	r2, #17
 80077dc:	2100      	movs	r1, #0
 80077de:	4881      	ldr	r0, [pc, #516]	@ (80079e4 <resetMenuTexts+0x434>)
 80077e0:	f005 fb78 	bl	800ced4 <memset>
    memset(yukariValfSureText, 0, 17);
 80077e4:	2211      	movs	r2, #17
 80077e6:	2100      	movs	r1, #0
 80077e8:	487f      	ldr	r0, [pc, #508]	@ (80079e8 <resetMenuTexts+0x438>)
 80077ea:	f005 fb73 	bl	800ced4 <memset>
    memset(asagiValfSureText, 0, 17);
 80077ee:	2211      	movs	r2, #17
 80077f0:	2100      	movs	r1, #0
 80077f2:	487e      	ldr	r0, [pc, #504]	@ (80079ec <resetMenuTexts+0x43c>)
 80077f4:	f005 fb6e 	bl	800ced4 <memset>
    memset(devirmeYukariValfSureText, 0, 17);
 80077f8:	2211      	movs	r2, #17
 80077fa:	2100      	movs	r1, #0
 80077fc:	487c      	ldr	r0, [pc, #496]	@ (80079f0 <resetMenuTexts+0x440>)
 80077fe:	f005 fb69 	bl	800ced4 <memset>
    memset(ileriValfSureText, 0, 17);
 8007802:	2211      	movs	r2, #17
 8007804:	2100      	movs	r1, #0
 8007806:	487b      	ldr	r0, [pc, #492]	@ (80079f4 <resetMenuTexts+0x444>)
 8007808:	f005 fb64 	bl	800ced4 <memset>
    memset(devirmeAsagiValfSureText, 0, 17);
 800780c:	2211      	movs	r2, #17
 800780e:	2100      	movs	r1, #0
 8007810:	4879      	ldr	r0, [pc, #484]	@ (80079f8 <resetMenuTexts+0x448>)
 8007812:	f005 fb5f 	bl	800ced4 <memset>
    memset(geriValfSureText, 0, 17);
 8007816:	2211      	movs	r2, #17
 8007818:	2100      	movs	r1, #0
 800781a:	4878      	ldr	r0, [pc, #480]	@ (80079fc <resetMenuTexts+0x44c>)
 800781c:	f005 fb5a 	bl	800ced4 <memset>
    memset(calismaSuresiText, 0, 17);
 8007820:	2211      	movs	r2, #17
 8007822:	2100      	movs	r1, #0
 8007824:	4876      	ldr	r0, [pc, #472]	@ (8007a00 <resetMenuTexts+0x450>)
 8007826:	f005 fb55 	bl	800ced4 <memset>
    memset(calismaSayisiText, 0, 17);
 800782a:	2211      	movs	r2, #17
 800782c:	2100      	movs	r1, #0
 800782e:	4875      	ldr	r0, [pc, #468]	@ (8007a04 <resetMenuTexts+0x454>)
 8007830:	f005 fb50 	bl	800ced4 <memset>
    memset(enterlaSifirlaText, 0, 17);
 8007834:	2211      	movs	r2, #17
 8007836:	2100      	movs	r1, #0
 8007838:	4873      	ldr	r0, [pc, #460]	@ (8007a08 <resetMenuTexts+0x458>)
 800783a:	f005 fb4b 	bl	800ced4 <memset>
    memset(dilSecimText, 0, 17);
 800783e:	2211      	movs	r2, #17
 8007840:	2100      	movs	r1, #0
 8007842:	4872      	ldr	r0, [pc, #456]	@ (8007a0c <resetMenuTexts+0x45c>)
 8007844:	f005 fb46 	bl	800ced4 <memset>
    memset(secilenDilText, 0, 17);
 8007848:	2211      	movs	r2, #17
 800784a:	2100      	movs	r1, #0
 800784c:	4870      	ldr	r0, [pc, #448]	@ (8007a10 <resetMenuTexts+0x460>)
 800784e:	f005 fb41 	bl	800ced4 <memset>
    memset(menudenCikisText, 0, 17);
 8007852:	2211      	movs	r2, #17
 8007854:	2100      	movs	r1, #0
 8007856:	486f      	ldr	r0, [pc, #444]	@ (8007a14 <resetMenuTexts+0x464>)
 8007858:	f005 fb3c 	bl	800ced4 <memset>
    memset(enteraBasinizText, 0, 17);
 800785c:	2211      	movs	r2, #17
 800785e:	2100      	movs	r1, #0
 8007860:	486d      	ldr	r0, [pc, #436]	@ (8007a18 <resetMenuTexts+0x468>)
 8007862:	f005 fb37 	bl	800ced4 <memset>
    memset(hataKoduText, 0, 17);
 8007866:	2211      	movs	r2, #17
 8007868:	2100      	movs	r1, #0
 800786a:	486c      	ldr	r0, [pc, #432]	@ (8007a1c <resetMenuTexts+0x46c>)
 800786c:	f005 fb32 	bl	800ced4 <memset>
    memset(dataSynchText, 0, 17);
 8007870:	2211      	movs	r2, #17
 8007872:	2100      	movs	r1, #0
 8007874:	486a      	ldr	r0, [pc, #424]	@ (8007a20 <resetMenuTexts+0x470>)
 8007876:	f005 fb2d 	bl	800ced4 <memset>
    memset(dataSynch2Text, 0, 17);
 800787a:	2211      	movs	r2, #17
 800787c:	2100      	movs	r1, #0
 800787e:	4869      	ldr	r0, [pc, #420]	@ (8007a24 <resetMenuTexts+0x474>)
 8007880:	f005 fb28 	bl	800ced4 <memset>
    memset(mustBeUniqueText, 0, 17);
 8007884:	2211      	movs	r2, #17
 8007886:	2100      	movs	r1, #0
 8007888:	4867      	ldr	r0, [pc, #412]	@ (8007a28 <resetMenuTexts+0x478>)
 800788a:	f005 fb23 	bl	800ced4 <memset>
    memset(mustBeUnique2Text, 0, 17);
 800788e:	2211      	movs	r2, #17
 8007890:	2100      	movs	r1, #0
 8007892:	4866      	ldr	r0, [pc, #408]	@ (8007a2c <resetMenuTexts+0x47c>)
 8007894:	f005 fb1e 	bl	800ced4 <memset>
    memset(mustBe12Text, 0, 17);
 8007898:	2211      	movs	r2, #17
 800789a:	2100      	movs	r1, #0
 800789c:	4864      	ldr	r0, [pc, #400]	@ (8007a30 <resetMenuTexts+0x480>)
 800789e:	f005 fb19 	bl	800ced4 <memset>
    memset(mustBe122Text, 0, 17);
 80078a2:	2211      	movs	r2, #17
 80078a4:	2100      	movs	r1, #0
 80078a6:	4863      	ldr	r0, [pc, #396]	@ (8007a34 <resetMenuTexts+0x484>)
 80078a8:	f005 fb14 	bl	800ced4 <memset>
    memset(ssidExceedErrorText, 0, 17);
 80078ac:	2211      	movs	r2, #17
 80078ae:	2100      	movs	r1, #0
 80078b0:	4861      	ldr	r0, [pc, #388]	@ (8007a38 <resetMenuTexts+0x488>)
 80078b2:	f005 fb0f 	bl	800ced4 <memset>
    memset(ssidExceedError2Text, 0, 17);
 80078b6:	2211      	movs	r2, #17
 80078b8:	2100      	movs	r1, #0
 80078ba:	4860      	ldr	r0, [pc, #384]	@ (8007a3c <resetMenuTexts+0x48c>)
 80078bc:	f005 fb0a 	bl	800ced4 <memset>
    memset(passExceedErrorText, 0, 17);
 80078c0:	2211      	movs	r2, #17
 80078c2:	2100      	movs	r1, #0
 80078c4:	485e      	ldr	r0, [pc, #376]	@ (8007a40 <resetMenuTexts+0x490>)
 80078c6:	f005 fb05 	bl	800ced4 <memset>
    memset(passExceedError2Text, 0, 17);
 80078ca:	2211      	movs	r2, #17
 80078cc:	2100      	movs	r1, #0
 80078ce:	485d      	ldr	r0, [pc, #372]	@ (8007a44 <resetMenuTexts+0x494>)
 80078d0:	f005 fb00 	bl	800ced4 <memset>
    memset(dataYazildiText, 0, 17);
 80078d4:	2211      	movs	r2, #17
 80078d6:	2100      	movs	r1, #0
 80078d8:	485b      	ldr	r0, [pc, #364]	@ (8007a48 <resetMenuTexts+0x498>)
 80078da:	f005 fafb 	bl	800ced4 <memset>
    memset(dataOkunuyorText, 0, 17);
 80078de:	2211      	movs	r2, #17
 80078e0:	2100      	movs	r1, #0
 80078e2:	485a      	ldr	r0, [pc, #360]	@ (8007a4c <resetMenuTexts+0x49c>)
 80078e4:	f005 faf6 	bl	800ced4 <memset>
    memset(dataOkunduText, 0, 17);
 80078e8:	2211      	movs	r2, #17
 80078ea:	2100      	movs	r1, #0
 80078ec:	4858      	ldr	r0, [pc, #352]	@ (8007a50 <resetMenuTexts+0x4a0>)
 80078ee:	f005 faf1 	bl	800ced4 <memset>
    memset(degerKaydedildiText, 0, 17);
 80078f2:	2211      	movs	r2, #17
 80078f4:	2100      	movs	r1, #0
 80078f6:	4857      	ldr	r0, [pc, #348]	@ (8007a54 <resetMenuTexts+0x4a4>)
 80078f8:	f005 faec 	bl	800ced4 <memset>
    memset(errorCodeText, 0, 17);
 80078fc:	2211      	movs	r2, #17
 80078fe:	2100      	movs	r1, #0
 8007900:	4855      	ldr	r0, [pc, #340]	@ (8007a58 <resetMenuTexts+0x4a8>)
 8007902:	f005 fae7 	bl	800ced4 <memset>
 8007906:	e0a9      	b.n	8007a5c <resetMenuTexts+0x4ac>
 8007908:	200010d4 	.word	0x200010d4
 800790c:	200010e8 	.word	0x200010e8
 8007910:	200010fc 	.word	0x200010fc
 8007914:	20001110 	.word	0x20001110
 8007918:	20001124 	.word	0x20001124
 800791c:	20001138 	.word	0x20001138
 8007920:	2000114c 	.word	0x2000114c
 8007924:	20001160 	.word	0x20001160
 8007928:	20001174 	.word	0x20001174
 800792c:	20001188 	.word	0x20001188
 8007930:	2000119c 	.word	0x2000119c
 8007934:	200011b0 	.word	0x200011b0
 8007938:	200011c4 	.word	0x200011c4
 800793c:	200011d8 	.word	0x200011d8
 8007940:	200011ec 	.word	0x200011ec
 8007944:	20001200 	.word	0x20001200
 8007948:	20001214 	.word	0x20001214
 800794c:	20001228 	.word	0x20001228
 8007950:	2000123c 	.word	0x2000123c
 8007954:	20001250 	.word	0x20001250
 8007958:	20001264 	.word	0x20001264
 800795c:	20001278 	.word	0x20001278
 8007960:	2000128c 	.word	0x2000128c
 8007964:	200012a0 	.word	0x200012a0
 8007968:	200012b4 	.word	0x200012b4
 800796c:	200012c8 	.word	0x200012c8
 8007970:	200012dc 	.word	0x200012dc
 8007974:	200012f0 	.word	0x200012f0
 8007978:	20001304 	.word	0x20001304
 800797c:	20001318 	.word	0x20001318
 8007980:	2000132c 	.word	0x2000132c
 8007984:	20001340 	.word	0x20001340
 8007988:	20001354 	.word	0x20001354
 800798c:	20001368 	.word	0x20001368
 8007990:	2000137c 	.word	0x2000137c
 8007994:	20001390 	.word	0x20001390
 8007998:	200013a4 	.word	0x200013a4
 800799c:	200013b8 	.word	0x200013b8
 80079a0:	200013cc 	.word	0x200013cc
 80079a4:	200013e0 	.word	0x200013e0
 80079a8:	200013f4 	.word	0x200013f4
 80079ac:	20001408 	.word	0x20001408
 80079b0:	2000141c 	.word	0x2000141c
 80079b4:	20001430 	.word	0x20001430
 80079b8:	20001444 	.word	0x20001444
 80079bc:	20001458 	.word	0x20001458
 80079c0:	2000146c 	.word	0x2000146c
 80079c4:	20001480 	.word	0x20001480
 80079c8:	20001494 	.word	0x20001494
 80079cc:	200014a8 	.word	0x200014a8
 80079d0:	200014bc 	.word	0x200014bc
 80079d4:	200014d0 	.word	0x200014d0
 80079d8:	200014e4 	.word	0x200014e4
 80079dc:	200014f8 	.word	0x200014f8
 80079e0:	2000150c 	.word	0x2000150c
 80079e4:	20001520 	.word	0x20001520
 80079e8:	20001534 	.word	0x20001534
 80079ec:	20001548 	.word	0x20001548
 80079f0:	2000155c 	.word	0x2000155c
 80079f4:	20001570 	.word	0x20001570
 80079f8:	20001584 	.word	0x20001584
 80079fc:	20001598 	.word	0x20001598
 8007a00:	200015ac 	.word	0x200015ac
 8007a04:	200015c0 	.word	0x200015c0
 8007a08:	200015d4 	.word	0x200015d4
 8007a0c:	200015e8 	.word	0x200015e8
 8007a10:	200015fc 	.word	0x200015fc
 8007a14:	20001610 	.word	0x20001610
 8007a18:	20001624 	.word	0x20001624
 8007a1c:	20001638 	.word	0x20001638
 8007a20:	2000164c 	.word	0x2000164c
 8007a24:	20001660 	.word	0x20001660
 8007a28:	20001674 	.word	0x20001674
 8007a2c:	20001688 	.word	0x20001688
 8007a30:	2000169c 	.word	0x2000169c
 8007a34:	200016b0 	.word	0x200016b0
 8007a38:	200016c4 	.word	0x200016c4
 8007a3c:	200016d8 	.word	0x200016d8
 8007a40:	200016ec 	.word	0x200016ec
 8007a44:	20001700 	.word	0x20001700
 8007a48:	20001714 	.word	0x20001714
 8007a4c:	20001728 	.word	0x20001728
 8007a50:	2000173c 	.word	0x2000173c
 8007a54:	20001750 	.word	0x20001750
 8007a58:	20001764 	.word	0x20001764
    memset(machineIDText, 0, 17);
 8007a5c:	2211      	movs	r2, #17
 8007a5e:	2100      	movs	r1, #0
 8007a60:	4809      	ldr	r0, [pc, #36]	@ (8007a88 <resetMenuTexts+0x4d8>)
 8007a62:	f005 fa37 	bl	800ced4 <memset>
    memset(idConfirmationText, 0, 17);
 8007a66:	2211      	movs	r2, #17
 8007a68:	2100      	movs	r1, #0
 8007a6a:	4808      	ldr	r0, [pc, #32]	@ (8007a8c <resetMenuTexts+0x4dc>)
 8007a6c:	f005 fa32 	bl	800ced4 <memset>
    memset(idConfirmationSubText, 0, 17);
 8007a70:	2211      	movs	r2, #17
 8007a72:	2100      	movs	r1, #0
 8007a74:	4806      	ldr	r0, [pc, #24]	@ (8007a90 <resetMenuTexts+0x4e0>)
 8007a76:	f005 fa2d 	bl	800ced4 <memset>
    memset(wifiConfirmationText, 0, 17);
 8007a7a:	2211      	movs	r2, #17
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	4805      	ldr	r0, [pc, #20]	@ (8007a94 <resetMenuTexts+0x4e4>)
 8007a80:	f005 fa28 	bl	800ced4 <memset>
}
 8007a84:	bf00      	nop
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	20001778 	.word	0x20001778
 8007a8c:	2000178c 	.word	0x2000178c
 8007a90:	200017a0 	.word	0x200017a0
 8007a94:	200017b4 	.word	0x200017b4

08007a98 <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8007a9e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007aa2:	f001 fc0d 	bl	80092c0 <HAL_Delay>
	int confirmationVal = 0;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8007aaa:	e012      	b.n	8007ad2 <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 8007aac:	4a12      	ldr	r2, [pc, #72]	@ (8007af8 <takeMachineIDWithConfirmation+0x60>)
 8007aae:	2101      	movs	r1, #1
 8007ab0:	2001      	movs	r0, #1
 8007ab2:	f000 fee3 	bl	800887c <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 8007ab6:	4a11      	ldr	r2, [pc, #68]	@ (8007afc <takeMachineIDWithConfirmation+0x64>)
 8007ab8:	2101      	movs	r1, #1
 8007aba:	2002      	movs	r0, #2
 8007abc:	f000 fede 	bl	800887c <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 8007ac0:	2102      	movs	r1, #2
 8007ac2:	480f      	ldr	r0, [pc, #60]	@ (8007b00 <takeMachineIDWithConfirmation+0x68>)
 8007ac4:	f002 f9cc 	bl	8009e60 <HAL_GPIO_ReadPin>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d101      	bne.n	8007ad2 <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d0e9      	beq.n	8007aac <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 8007ad8:	f000 f814 	bl	8007b04 <takeMachineID>

	convertArrays(1);
 8007adc:	2001      	movs	r0, #1
 8007ade:	f7f8 ff21 	bl	8000924 <convertArrays>
	HAL_Delay(50);
 8007ae2:	2032      	movs	r0, #50	@ 0x32
 8007ae4:	f001 fbec 	bl	80092c0 <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 8007ae8:	2001      	movs	r0, #1
 8007aea:	f7f9 fabf 	bl	800106c <printCredentials>
}
 8007aee:	bf00      	nop
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	2000178c 	.word	0x2000178c
 8007afc:	200017a0 	.word	0x200017a0
 8007b00:	40010800 	.word	0x40010800

08007b04 <takeMachineID>:

void takeMachineID() {
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b088      	sub	sp, #32
 8007b08:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 8007b0a:	2001      	movs	r0, #1
 8007b0c:	f000 ff14 	bl	8008938 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8007b10:	220c      	movs	r2, #12
 8007b12:	2100      	movs	r1, #0
 8007b14:	48a2      	ldr	r0, [pc, #648]	@ (8007da0 <takeMachineID+0x29c>)
 8007b16:	f005 f9dd 	bl	800ced4 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8007b1a:	2305      	movs	r3, #5
 8007b1c:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8007b1e:	2303      	movs	r3, #3
 8007b20:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8007b22:	2300      	movs	r3, #0
 8007b24:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8007b26:	4b9f      	ldr	r3, [pc, #636]	@ (8007da4 <takeMachineID+0x2a0>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8007b2c:	2100      	movs	r1, #0
 8007b2e:	2001      	movs	r0, #1
 8007b30:	f7f9 f92c 	bl	8000d8c <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007b34:	2108      	movs	r1, #8
 8007b36:	489c      	ldr	r0, [pc, #624]	@ (8007da8 <takeMachineID+0x2a4>)
 8007b38:	f002 f992 	bl	8009e60 <HAL_GPIO_ReadPin>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d128      	bne.n	8007b94 <takeMachineID+0x90>
        	lcd_cursor(0);
 8007b42:	2000      	movs	r0, #0
 8007b44:	f000 fef8 	bl	8008938 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8007b48:	f000 fcda 	bl	8008500 <checkEEPROM4ID>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d00e      	beq.n	8007b70 <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 8007b52:	4a96      	ldr	r2, [pc, #600]	@ (8007dac <takeMachineID+0x2a8>)
 8007b54:	2101      	movs	r1, #1
 8007b56:	2001      	movs	r0, #1
 8007b58:	f000 fe90 	bl	800887c <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 8007b5c:	4a94      	ldr	r2, [pc, #592]	@ (8007db0 <takeMachineID+0x2ac>)
 8007b5e:	2101      	movs	r1, #1
 8007b60:	2002      	movs	r0, #2
 8007b62:	f000 fe8b 	bl	800887c <lcd_print>
        		HAL_Delay(1250);
 8007b66:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007b6a:	f001 fba9 	bl	80092c0 <HAL_Delay>

        		goto mainSection;
 8007b6e:	e7cc      	b.n	8007b0a <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007b70:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007b74:	9302      	str	r3, [sp, #8]
 8007b76:	236e      	movs	r3, #110	@ 0x6e
 8007b78:	9301      	str	r3, [sp, #4]
 8007b7a:	4b8e      	ldr	r3, [pc, #568]	@ (8007db4 <takeMachineID+0x2b0>)
 8007b7c:	9300      	str	r3, [sp, #0]
 8007b7e:	236e      	movs	r3, #110	@ 0x6e
 8007b80:	2200      	movs	r2, #0
 8007b82:	21a0      	movs	r1, #160	@ 0xa0
 8007b84:	488c      	ldr	r0, [pc, #560]	@ (8007db8 <takeMachineID+0x2b4>)
 8007b86:	f002 fc25 	bl	800a3d4 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007b8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007b8e:	f001 fb97 	bl	80092c0 <HAL_Delay>

            	break;
 8007b92:	e132      	b.n	8007dfa <takeMachineID+0x2f6>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007b94:	2101      	movs	r1, #1
 8007b96:	4884      	ldr	r0, [pc, #528]	@ (8007da8 <takeMachineID+0x2a4>)
 8007b98:	f002 f962 	bl	8009e60 <HAL_GPIO_ReadPin>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d111      	bne.n	8007bc6 <takeMachineID+0xc2>
        	if(cursorPosition == 7) {
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	2b07      	cmp	r3, #7
 8007ba6:	d102      	bne.n	8007bae <takeMachineID+0xaa>
        		cursorPosition = 10;
 8007ba8:	230a      	movs	r3, #10
 8007baa:	60bb      	str	r3, [r7, #8]
 8007bac:	e008      	b.n	8007bc0 <takeMachineID+0xbc>
        	} else if (cursorPosition == 14) {
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2b0e      	cmp	r3, #14
 8007bb2:	d102      	bne.n	8007bba <takeMachineID+0xb6>
                cursorPosition = 3;
 8007bb4:	2303      	movs	r3, #3
 8007bb6:	60bb      	str	r3, [r7, #8]
 8007bb8:	e002      	b.n	8007bc0 <takeMachineID+0xbc>
            } else {
            	cursorPosition++;
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8007bc0:	2096      	movs	r0, #150	@ 0x96
 8007bc2:	f001 fb7d 	bl	80092c0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007bc6:	2108      	movs	r1, #8
 8007bc8:	487c      	ldr	r0, [pc, #496]	@ (8007dbc <takeMachineID+0x2b8>)
 8007bca:	f002 f949 	bl	8009e60 <HAL_GPIO_ReadPin>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d111      	bne.n	8007bf8 <takeMachineID+0xf4>
            if (cursorPosition == 3) {
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d102      	bne.n	8007be0 <takeMachineID+0xdc>
                cursorPosition = 14;
 8007bda:	230e      	movs	r3, #14
 8007bdc:	60bb      	str	r3, [r7, #8]
 8007bde:	e008      	b.n	8007bf2 <takeMachineID+0xee>
            } else if(cursorPosition == 10) {
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	2b0a      	cmp	r3, #10
 8007be4:	d102      	bne.n	8007bec <takeMachineID+0xe8>
            	cursorPosition = 7;
 8007be6:	2307      	movs	r3, #7
 8007be8:	60bb      	str	r3, [r7, #8]
 8007bea:	e002      	b.n	8007bf2 <takeMachineID+0xee>
            } else {
            	cursorPosition--;
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 8007bf2:	20fa      	movs	r0, #250	@ 0xfa
 8007bf4:	f001 fb64 	bl	80092c0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007bf8:	2102      	movs	r1, #2
 8007bfa:	486b      	ldr	r0, [pc, #428]	@ (8007da8 <takeMachineID+0x2a4>)
 8007bfc:	f002 f930 	bl	8009e60 <HAL_GPIO_ReadPin>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	f040 80a1 	bne.w	8007d4a <takeMachineID+0x246>
        	if(cursorPosition == 3) {
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d10a      	bne.n	8007c24 <takeMachineID+0x120>
        		machineID[arrayPos] = '0';
 8007c0e:	4a64      	ldr	r2, [pc, #400]	@ (8007da0 <takeMachineID+0x29c>)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4413      	add	r3, r2
 8007c14:	2230      	movs	r2, #48	@ 0x30
 8007c16:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8007c18:	4a66      	ldr	r2, [pc, #408]	@ (8007db4 <takeMachineID+0x2b0>)
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	4413      	add	r3, r2
 8007c1e:	2200      	movs	r2, #0
 8007c20:	701a      	strb	r2, [r3, #0]
 8007c22:	e07c      	b.n	8007d1e <takeMachineID+0x21a>
        	} else if(cursorPosition == 4) {
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	d10a      	bne.n	8007c40 <takeMachineID+0x13c>
        		machineID[arrayPos] = '1';
 8007c2a:	4a5d      	ldr	r2, [pc, #372]	@ (8007da0 <takeMachineID+0x29c>)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4413      	add	r3, r2
 8007c30:	2231      	movs	r2, #49	@ 0x31
 8007c32:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8007c34:	4a5f      	ldr	r2, [pc, #380]	@ (8007db4 <takeMachineID+0x2b0>)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	4413      	add	r3, r2
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	701a      	strb	r2, [r3, #0]
 8007c3e:	e06e      	b.n	8007d1e <takeMachineID+0x21a>
        	} else if(cursorPosition == 5) {
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2b05      	cmp	r3, #5
 8007c44:	d10a      	bne.n	8007c5c <takeMachineID+0x158>
        		machineID[arrayPos] = '2';
 8007c46:	4a56      	ldr	r2, [pc, #344]	@ (8007da0 <takeMachineID+0x29c>)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	2232      	movs	r2, #50	@ 0x32
 8007c4e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8007c50:	4a58      	ldr	r2, [pc, #352]	@ (8007db4 <takeMachineID+0x2b0>)
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	4413      	add	r3, r2
 8007c56:	2202      	movs	r2, #2
 8007c58:	701a      	strb	r2, [r3, #0]
 8007c5a:	e060      	b.n	8007d1e <takeMachineID+0x21a>
        	} else if(cursorPosition == 6) {
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2b06      	cmp	r3, #6
 8007c60:	d10a      	bne.n	8007c78 <takeMachineID+0x174>
        		machineID[arrayPos] = '3';
 8007c62:	4a4f      	ldr	r2, [pc, #316]	@ (8007da0 <takeMachineID+0x29c>)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4413      	add	r3, r2
 8007c68:	2233      	movs	r2, #51	@ 0x33
 8007c6a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8007c6c:	4a51      	ldr	r2, [pc, #324]	@ (8007db4 <takeMachineID+0x2b0>)
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	4413      	add	r3, r2
 8007c72:	2203      	movs	r2, #3
 8007c74:	701a      	strb	r2, [r3, #0]
 8007c76:	e052      	b.n	8007d1e <takeMachineID+0x21a>
        	} else if(cursorPosition == 7) {
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	2b07      	cmp	r3, #7
 8007c7c:	d10a      	bne.n	8007c94 <takeMachineID+0x190>
        		machineID[arrayPos] = '4';
 8007c7e:	4a48      	ldr	r2, [pc, #288]	@ (8007da0 <takeMachineID+0x29c>)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	4413      	add	r3, r2
 8007c84:	2234      	movs	r2, #52	@ 0x34
 8007c86:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 8007c88:	4a4a      	ldr	r2, [pc, #296]	@ (8007db4 <takeMachineID+0x2b0>)
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	2204      	movs	r2, #4
 8007c90:	701a      	strb	r2, [r3, #0]
 8007c92:	e044      	b.n	8007d1e <takeMachineID+0x21a>
        	} else if(cursorPosition == 10) {
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	2b0a      	cmp	r3, #10
 8007c98:	d10a      	bne.n	8007cb0 <takeMachineID+0x1ac>
        		machineID[arrayPos] = '5';
 8007c9a:	4a41      	ldr	r2, [pc, #260]	@ (8007da0 <takeMachineID+0x29c>)
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	2235      	movs	r2, #53	@ 0x35
 8007ca2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8007ca4:	4a43      	ldr	r2, [pc, #268]	@ (8007db4 <takeMachineID+0x2b0>)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	4413      	add	r3, r2
 8007caa:	2205      	movs	r2, #5
 8007cac:	701a      	strb	r2, [r3, #0]
 8007cae:	e036      	b.n	8007d1e <takeMachineID+0x21a>
        	} else if(cursorPosition == 11) {
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2b0b      	cmp	r3, #11
 8007cb4:	d10a      	bne.n	8007ccc <takeMachineID+0x1c8>
        		machineID[arrayPos] = '6';
 8007cb6:	4a3a      	ldr	r2, [pc, #232]	@ (8007da0 <takeMachineID+0x29c>)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	4413      	add	r3, r2
 8007cbc:	2236      	movs	r2, #54	@ 0x36
 8007cbe:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8007cc0:	4a3c      	ldr	r2, [pc, #240]	@ (8007db4 <takeMachineID+0x2b0>)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	2206      	movs	r2, #6
 8007cc8:	701a      	strb	r2, [r3, #0]
 8007cca:	e028      	b.n	8007d1e <takeMachineID+0x21a>
        	} else if(cursorPosition == 12) {
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	2b0c      	cmp	r3, #12
 8007cd0:	d10a      	bne.n	8007ce8 <takeMachineID+0x1e4>
        		machineID[arrayPos] = '7';
 8007cd2:	4a33      	ldr	r2, [pc, #204]	@ (8007da0 <takeMachineID+0x29c>)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	2237      	movs	r2, #55	@ 0x37
 8007cda:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8007cdc:	4a35      	ldr	r2, [pc, #212]	@ (8007db4 <takeMachineID+0x2b0>)
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	2207      	movs	r2, #7
 8007ce4:	701a      	strb	r2, [r3, #0]
 8007ce6:	e01a      	b.n	8007d1e <takeMachineID+0x21a>
        	} else if(cursorPosition == 13) {
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	2b0d      	cmp	r3, #13
 8007cec:	d10a      	bne.n	8007d04 <takeMachineID+0x200>
        		machineID[arrayPos] = '8';
 8007cee:	4a2c      	ldr	r2, [pc, #176]	@ (8007da0 <takeMachineID+0x29c>)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	2238      	movs	r2, #56	@ 0x38
 8007cf6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8007cf8:	4a2e      	ldr	r2, [pc, #184]	@ (8007db4 <takeMachineID+0x2b0>)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	2208      	movs	r2, #8
 8007d00:	701a      	strb	r2, [r3, #0]
 8007d02:	e00c      	b.n	8007d1e <takeMachineID+0x21a>
        	} else if(cursorPosition == 14) {
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	2b0e      	cmp	r3, #14
 8007d08:	d109      	bne.n	8007d1e <takeMachineID+0x21a>
        		machineID[arrayPos] = '9';
 8007d0a:	4a25      	ldr	r2, [pc, #148]	@ (8007da0 <takeMachineID+0x29c>)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4413      	add	r3, r2
 8007d10:	2239      	movs	r2, #57	@ 0x39
 8007d12:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8007d14:	4a27      	ldr	r2, [pc, #156]	@ (8007db4 <takeMachineID+0x2b0>)
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	4413      	add	r3, r2
 8007d1a:	2209      	movs	r2, #9
 8007d1c:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	b2d9      	uxtb	r1, r3
 8007d22:	4a1f      	ldr	r2, [pc, #124]	@ (8007da0 <takeMachineID+0x29c>)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4413      	add	r3, r2
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	2001      	movs	r0, #1
 8007d2e:	f000 fdba 	bl	80088a6 <lcd_print_char>

        	writeLoc++;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	3301      	adds	r3, #1
 8007d36:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	3301      	adds	r3, #1
 8007d42:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8007d44:	2096      	movs	r0, #150	@ 0x96
 8007d46:	f001 fabb 	bl	80092c0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007d4a:	2104      	movs	r1, #4
 8007d4c:	4816      	ldr	r0, [pc, #88]	@ (8007da8 <takeMachineID+0x2a4>)
 8007d4e:	f002 f887 	bl	8009e60 <HAL_GPIO_ReadPin>
 8007d52:	4603      	mov	r3, r0
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d149      	bne.n	8007dec <takeMachineID+0x2e8>
            if(strlen(machineID) >= 1) {
 8007d58:	4b11      	ldr	r3, [pc, #68]	@ (8007da0 <takeMachineID+0x29c>)
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d042      	beq.n	8007de6 <takeMachineID+0x2e2>
                machineID[arrayPos] = '\0';
 8007d60:	4a0f      	ldr	r2, [pc, #60]	@ (8007da0 <takeMachineID+0x29c>)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4413      	add	r3, r2
 8007d66:	2200      	movs	r2, #0
 8007d68:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8007d6a:	4a12      	ldr	r2, [pc, #72]	@ (8007db4 <takeMachineID+0x2b0>)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	4413      	add	r3, r2
 8007d70:	2200      	movs	r2, #0
 8007d72:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2b05      	cmp	r3, #5
 8007d78:	dd03      	ble.n	8007d82 <takeMachineID+0x27e>
                	writeLoc--;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	e004      	b.n	8007d8c <takeMachineID+0x288>
                } else if(writeLoc < 5) {
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2b04      	cmp	r3, #4
 8007d86:	dc01      	bgt.n	8007d8c <takeMachineID+0x288>
                	writeLoc = 5;
 8007d88:	2305      	movs	r3, #5
 8007d8a:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	dd16      	ble.n	8007dc0 <takeMachineID+0x2bc>
                	arrayPos--;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	3b01      	subs	r3, #1
 8007d96:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	603b      	str	r3, [r7, #0]
 8007d9e:	e017      	b.n	8007dd0 <takeMachineID+0x2cc>
 8007da0:	20001014 	.word	0x20001014
 8007da4:	20000000 	.word	0x20000000
 8007da8:	40010800 	.word	0x40010800
 8007dac:	2000169c 	.word	0x2000169c
 8007db0:	200016b0 	.word	0x200016b0
 8007db4:	20000f9c 	.word	0x20000f9c
 8007db8:	200017f0 	.word	0x200017f0
 8007dbc:	40011000 	.word	0x40011000
                } else if(arrayPos < 0) {
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	da04      	bge.n	8007dd0 <takeMachineID+0x2cc>
                	arrayPos = 0;
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8007dca:	4b0e      	ldr	r3, [pc, #56]	@ (8007e04 <takeMachineID+0x300>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	3305      	adds	r3, #5
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	4619      	mov	r1, r3
 8007dda:	2001      	movs	r0, #1
 8007ddc:	f000 fd84 	bl	80088e8 <lcd_delete_char>
                HAL_Delay(50);
 8007de0:	2032      	movs	r0, #50	@ 0x32
 8007de2:	f001 fa6d 	bl	80092c0 <HAL_Delay>
            }

            HAL_Delay(150);
 8007de6:	2096      	movs	r0, #150	@ 0x96
 8007de8:	f001 fa6a 	bl	80092c0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	4619      	mov	r1, r3
 8007df2:	2002      	movs	r0, #2
 8007df4:	f000 fd23 	bl	800883e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007df8:	e69c      	b.n	8007b34 <takeMachineID+0x30>
    }
}
 8007dfa:	bf00      	nop
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	20000000 	.word	0x20000000

08007e08 <ssidConfirmation>:

uint8_t ssidConfirmation() {
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af04      	add	r7, sp, #16
	int loopVal = 1;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8007e12:	4a25      	ldr	r2, [pc, #148]	@ (8007ea8 <ssidConfirmation+0xa0>)
 8007e14:	2101      	movs	r1, #1
 8007e16:	2001      	movs	r0, #1
 8007e18:	f000 fd30 	bl	800887c <lcd_print>

	while(loopVal == 1) {
 8007e1c:	e012      	b.n	8007e44 <ssidConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 8007e1e:	4a23      	ldr	r2, [pc, #140]	@ (8007eac <ssidConfirmation+0xa4>)
 8007e20:	2101      	movs	r1, #1
 8007e22:	2002      	movs	r0, #2
 8007e24:	f000 fd2a 	bl	800887c <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007e28:	2102      	movs	r1, #2
 8007e2a:	4821      	ldr	r0, [pc, #132]	@ (8007eb0 <ssidConfirmation+0xa8>)
 8007e2c:	f002 f818 	bl	8009e60 <HAL_GPIO_ReadPin>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d101      	bne.n	8007e3a <ssidConfirmation+0x32>
			loopVal = 0;
 8007e36:	2300      	movs	r3, #0
 8007e38:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiSSID);
 8007e3a:	4a1e      	ldr	r2, [pc, #120]	@ (8007eb4 <ssidConfirmation+0xac>)
 8007e3c:	2101      	movs	r1, #1
 8007e3e:	2001      	movs	r0, #1
 8007e40:	f000 fd1c 	bl	800887c <lcd_print>
	while(loopVal == 1) {
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d0e9      	beq.n	8007e1e <ssidConfirmation+0x16>
	}

    lcd_cursor(0);
 8007e4a:	2000      	movs	r0, #0
 8007e4c:	f000 fd74 	bl	8008938 <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 8007e50:	4818      	ldr	r0, [pc, #96]	@ (8007eb4 <ssidConfirmation+0xac>)
 8007e52:	f7f8 f9e7 	bl	8000224 <strlen>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b14      	cmp	r3, #20
 8007e5a:	d90f      	bls.n	8007e7c <ssidConfirmation+0x74>
    	lcd_print(1, 1, ssidExceedErrorText);
 8007e5c:	4a16      	ldr	r2, [pc, #88]	@ (8007eb8 <ssidConfirmation+0xb0>)
 8007e5e:	2101      	movs	r1, #1
 8007e60:	2001      	movs	r0, #1
 8007e62:	f000 fd0b 	bl	800887c <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 8007e66:	4a15      	ldr	r2, [pc, #84]	@ (8007ebc <ssidConfirmation+0xb4>)
 8007e68:	2101      	movs	r1, #1
 8007e6a:	2002      	movs	r0, #2
 8007e6c:	f000 fd06 	bl	800887c <lcd_print>
        HAL_Delay(1250);
 8007e70:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007e74:	f001 fa24 	bl	80092c0 <HAL_Delay>

        return 0;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	e011      	b.n	8007ea0 <ssidConfirmation+0x98>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007e7c:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007e80:	9302      	str	r3, [sp, #8]
 8007e82:	236e      	movs	r3, #110	@ 0x6e
 8007e84:	9301      	str	r3, [sp, #4]
 8007e86:	4b0e      	ldr	r3, [pc, #56]	@ (8007ec0 <ssidConfirmation+0xb8>)
 8007e88:	9300      	str	r3, [sp, #0]
 8007e8a:	236e      	movs	r3, #110	@ 0x6e
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	21a0      	movs	r1, #160	@ 0xa0
 8007e90:	480c      	ldr	r0, [pc, #48]	@ (8007ec4 <ssidConfirmation+0xbc>)
 8007e92:	f002 fa9f 	bl	800a3d4 <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 8007e96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007e9a:	f001 fa11 	bl	80092c0 <HAL_Delay>

    	return 1;
 8007e9e:	2301      	movs	r3, #1
    }
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3708      	adds	r7, #8
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	0800d0c8 	.word	0x0800d0c8
 8007eac:	200017b4 	.word	0x200017b4
 8007eb0:	40010800 	.word	0x40010800
 8007eb4:	20001020 	.word	0x20001020
 8007eb8:	200016c4 	.word	0x200016c4
 8007ebc:	200016d8 	.word	0x200016d8
 8007ec0:	20000f9c 	.word	0x20000f9c
 8007ec4:	200017f0 	.word	0x200017f0

08007ec8 <takeWifiSSID>:

void takeWifiSSID() {
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 8007ece:	2001      	movs	r0, #1
 8007ed0:	f000 fd32 	bl	8008938 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 8007ed4:	2210      	movs	r2, #16
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	48a4      	ldr	r0, [pc, #656]	@ (800816c <takeWifiSSID+0x2a4>)
 8007eda:	f004 fffb 	bl	800ced4 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007ede:	2301      	movs	r3, #1
 8007ee0:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8007ee2:	2307      	movs	r3, #7
 8007ee4:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007eea:	2300      	movs	r3, #0
 8007eec:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007eee:	4ba0      	ldr	r3, [pc, #640]	@ (8008170 <takeWifiSSID+0x2a8>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8007ef4:	2101      	movs	r1, #1
 8007ef6:	2002      	movs	r0, #2
 8007ef8:	f7f8 ff48 	bl	8000d8c <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007efc:	2108      	movs	r1, #8
 8007efe:	489d      	ldr	r0, [pc, #628]	@ (8008174 <takeWifiSSID+0x2ac>)
 8007f00:	f001 ffae 	bl	8009e60 <HAL_GPIO_ReadPin>
 8007f04:	4603      	mov	r3, r0
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d106      	bne.n	8007f18 <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 8007f0a:	f7ff ff7d 	bl	8007e08 <ssidConfirmation>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f040 8126 	bne.w	8008162 <takeWifiSSID+0x29a>
        		goto mainSSIDSection;
 8007f16:	e7da      	b.n	8007ece <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007f18:	2101      	movs	r1, #1
 8007f1a:	4896      	ldr	r0, [pc, #600]	@ (8008174 <takeWifiSSID+0x2ac>)
 8007f1c:	f001 ffa0 	bl	8009e60 <HAL_GPIO_ReadPin>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d14d      	bne.n	8007fc2 <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2b50      	cmp	r3, #80	@ 0x50
 8007f2a:	dd01      	ble.n	8007f30 <takeWifiSSID+0x68>
        		cursorPosition = 1;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2b10      	cmp	r3, #16
 8007f34:	d13f      	bne.n	8007fb6 <takeWifiSSID+0xee>
            	if(page == 1) {
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d109      	bne.n	8007f50 <takeWifiSSID+0x88>
            		cursorPosition = 1;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	60fb      	str	r3, [r7, #12]
            		page++;
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	3301      	adds	r3, #1
 8007f44:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007f46:	2102      	movs	r1, #2
 8007f48:	2002      	movs	r0, #2
 8007f4a:	f7f8 ff1f 	bl	8000d8c <printTemplate>
 8007f4e:	e035      	b.n	8007fbc <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d109      	bne.n	8007f6a <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 8007f56:	2301      	movs	r3, #1
 8007f58:	60fb      	str	r3, [r7, #12]
            		page++;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007f60:	2103      	movs	r1, #3
 8007f62:	2002      	movs	r0, #2
 8007f64:	f7f8 ff12 	bl	8000d8c <printTemplate>
 8007f68:	e028      	b.n	8007fbc <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	2b03      	cmp	r3, #3
 8007f6e:	d109      	bne.n	8007f84 <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 8007f70:	2301      	movs	r3, #1
 8007f72:	60fb      	str	r3, [r7, #12]
            		page++;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	3301      	adds	r3, #1
 8007f78:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007f7a:	2104      	movs	r1, #4
 8007f7c:	2002      	movs	r0, #2
 8007f7e:	f7f8 ff05 	bl	8000d8c <printTemplate>
 8007f82:	e01b      	b.n	8007fbc <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	2b04      	cmp	r3, #4
 8007f88:	d109      	bne.n	8007f9e <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	60fb      	str	r3, [r7, #12]
            		page++;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	3301      	adds	r3, #1
 8007f92:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007f94:	2105      	movs	r1, #5
 8007f96:	2002      	movs	r0, #2
 8007f98:	f7f8 fef8 	bl	8000d8c <printTemplate>
 8007f9c:	e00e      	b.n	8007fbc <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	2b05      	cmp	r3, #5
 8007fa2:	d10b      	bne.n	8007fbc <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007fac:	2101      	movs	r1, #1
 8007fae:	2002      	movs	r0, #2
 8007fb0:	f7f8 feec 	bl	8000d8c <printTemplate>
 8007fb4:	e002      	b.n	8007fbc <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007fbc:	2096      	movs	r0, #150	@ 0x96
 8007fbe:	f001 f97f 	bl	80092c0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007fc2:	2108      	movs	r1, #8
 8007fc4:	486c      	ldr	r0, [pc, #432]	@ (8008178 <takeWifiSSID+0x2b0>)
 8007fc6:	f001 ff4b 	bl	8009e60 <HAL_GPIO_ReadPin>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d149      	bne.n	8008064 <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	dc01      	bgt.n	8007fda <takeWifiSSID+0x112>
        		cursorPosition = 80;
 8007fd6:	2350      	movs	r3, #80	@ 0x50
 8007fd8:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d13b      	bne.n	8008058 <takeWifiSSID+0x190>
            	if(page == 1) {
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d108      	bne.n	8007ff8 <takeWifiSSID+0x130>
            		cursorPosition = 16;
 8007fe6:	2310      	movs	r3, #16
 8007fe8:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8007fea:	2305      	movs	r3, #5
 8007fec:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007fee:	2105      	movs	r1, #5
 8007ff0:	2002      	movs	r0, #2
 8007ff2:	f7f8 fecb 	bl	8000d8c <printTemplate>
 8007ff6:	e032      	b.n	800805e <takeWifiSSID+0x196>
            	} else if(page == 2) {
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d108      	bne.n	8008010 <takeWifiSSID+0x148>
            		cursorPosition = 16;
 8007ffe:	2310      	movs	r3, #16
 8008000:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008002:	2301      	movs	r3, #1
 8008004:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8008006:	2101      	movs	r1, #1
 8008008:	2002      	movs	r0, #2
 800800a:	f7f8 febf 	bl	8000d8c <printTemplate>
 800800e:	e026      	b.n	800805e <takeWifiSSID+0x196>
            	} else if(page == 3) {
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	2b03      	cmp	r3, #3
 8008014:	d108      	bne.n	8008028 <takeWifiSSID+0x160>
            		cursorPosition = 16;
 8008016:	2310      	movs	r3, #16
 8008018:	60fb      	str	r3, [r7, #12]
            		page = 2;
 800801a:	2302      	movs	r3, #2
 800801c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 800801e:	2102      	movs	r1, #2
 8008020:	2002      	movs	r0, #2
 8008022:	f7f8 feb3 	bl	8000d8c <printTemplate>
 8008026:	e01a      	b.n	800805e <takeWifiSSID+0x196>
            	} else if(page == 4) {
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	2b04      	cmp	r3, #4
 800802c:	d108      	bne.n	8008040 <takeWifiSSID+0x178>
            		cursorPosition = 16;
 800802e:	2310      	movs	r3, #16
 8008030:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8008032:	2303      	movs	r3, #3
 8008034:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8008036:	2103      	movs	r1, #3
 8008038:	2002      	movs	r0, #2
 800803a:	f7f8 fea7 	bl	8000d8c <printTemplate>
 800803e:	e00e      	b.n	800805e <takeWifiSSID+0x196>
            	} else if(page == 5) {
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	2b05      	cmp	r3, #5
 8008044:	d10b      	bne.n	800805e <takeWifiSSID+0x196>
            		cursorPosition = 16;
 8008046:	2310      	movs	r3, #16
 8008048:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800804a:	2304      	movs	r3, #4
 800804c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800804e:	2104      	movs	r1, #4
 8008050:	2002      	movs	r0, #2
 8008052:	f7f8 fe9b 	bl	8000d8c <printTemplate>
 8008056:	e002      	b.n	800805e <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	3b01      	subs	r3, #1
 800805c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800805e:	2096      	movs	r0, #150	@ 0x96
 8008060:	f001 f92e 	bl	80092c0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008064:	2102      	movs	r1, #2
 8008066:	4843      	ldr	r0, [pc, #268]	@ (8008174 <takeWifiSSID+0x2ac>)
 8008068:	f001 fefa 	bl	8009e60 <HAL_GPIO_ReadPin>
 800806c:	4603      	mov	r3, r0
 800806e:	2b01      	cmp	r3, #1
 8008070:	d12f      	bne.n	80080d2 <takeWifiSSID+0x20a>
            eepromData[eepromVal] = cursorPosition;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	b2d9      	uxtb	r1, r3
 8008076:	4a41      	ldr	r2, [pc, #260]	@ (800817c <takeWifiSSID+0x2b4>)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4413      	add	r3, r2
 800807c:	460a      	mov	r2, r1
 800807e:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 8008080:	4a3f      	ldr	r2, [pc, #252]	@ (8008180 <takeWifiSSID+0x2b8>)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4413      	add	r3, r2
 8008086:	7819      	ldrb	r1, [r3, #0]
 8008088:	4a38      	ldr	r2, [pc, #224]	@ (800816c <takeWifiSSID+0x2a4>)
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	4413      	add	r3, r2
 800808e:	460a      	mov	r2, r1
 8008090:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	b2d9      	uxtb	r1, r3
 8008096:	4a3a      	ldr	r2, [pc, #232]	@ (8008180 <takeWifiSSID+0x2b8>)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	4413      	add	r3, r2
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	461a      	mov	r2, r3
 80080a0:	2001      	movs	r0, #1
 80080a2:	f000 fc00 	bl	80088a6 <lcd_print_char>

            writeLoc++;
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	3301      	adds	r3, #1
 80080aa:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	3301      	adds	r3, #1
 80080b0:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	3301      	adds	r3, #1
 80080b6:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 80080b8:	4a30      	ldr	r2, [pc, #192]	@ (800817c <takeWifiSSID+0x2b4>)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4413      	add	r3, r2
 80080be:	2200      	movs	r2, #0
 80080c0:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 80080c2:	4a2a      	ldr	r2, [pc, #168]	@ (800816c <takeWifiSSID+0x2a4>)
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4413      	add	r3, r2
 80080c8:	2200      	movs	r2, #0
 80080ca:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80080cc:	2096      	movs	r0, #150	@ 0x96
 80080ce:	f001 f8f7 	bl	80092c0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80080d2:	2104      	movs	r1, #4
 80080d4:	4827      	ldr	r0, [pc, #156]	@ (8008174 <takeWifiSSID+0x2ac>)
 80080d6:	f001 fec3 	bl	8009e60 <HAL_GPIO_ReadPin>
 80080da:	4603      	mov	r3, r0
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d139      	bne.n	8008154 <takeWifiSSID+0x28c>
        	if(strlen(wifiSSID) >= 1) {
 80080e0:	4b22      	ldr	r3, [pc, #136]	@ (800816c <takeWifiSSID+0x2a4>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d032      	beq.n	800814e <takeWifiSSID+0x286>
        		eepromData[eepromVal] = '\0';
 80080e8:	4a24      	ldr	r2, [pc, #144]	@ (800817c <takeWifiSSID+0x2b4>)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4413      	add	r3, r2
 80080ee:	2200      	movs	r2, #0
 80080f0:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 80080f2:	4a1e      	ldr	r2, [pc, #120]	@ (800816c <takeWifiSSID+0x2a4>)
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	4413      	add	r3, r2
 80080f8:	2200      	movs	r2, #0
 80080fa:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	2b07      	cmp	r3, #7
 8008100:	dd03      	ble.n	800810a <takeWifiSSID+0x242>
        			writeLoc--;
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	3b01      	subs	r3, #1
 8008106:	613b      	str	r3, [r7, #16]
 8008108:	e004      	b.n	8008114 <takeWifiSSID+0x24c>
        		} else if(writeLoc < 7) {
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	2b06      	cmp	r3, #6
 800810e:	dc01      	bgt.n	8008114 <takeWifiSSID+0x24c>
        			writeLoc = 7;
 8008110:	2307      	movs	r3, #7
 8008112:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	2b00      	cmp	r3, #0
 8008118:	dd06      	ble.n	8008128 <takeWifiSSID+0x260>
        			arrayPosition--;
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	3b01      	subs	r3, #1
 800811e:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	3b01      	subs	r3, #1
 8008124:	607b      	str	r3, [r7, #4]
 8008126:	e007      	b.n	8008138 <takeWifiSSID+0x270>
        		} else if(arrayPosition < 0) {
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2b00      	cmp	r3, #0
 800812c:	da04      	bge.n	8008138 <takeWifiSSID+0x270>
        			arrayPosition = 0;
 800812e:	2300      	movs	r3, #0
 8008130:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8008132:	4b0f      	ldr	r3, [pc, #60]	@ (8008170 <takeWifiSSID+0x2a8>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	b2db      	uxtb	r3, r3
 800813c:	3307      	adds	r3, #7
 800813e:	b2db      	uxtb	r3, r3
 8008140:	4619      	mov	r1, r3
 8008142:	2001      	movs	r0, #1
 8008144:	f000 fbd0 	bl	80088e8 <lcd_delete_char>
        		HAL_Delay(50);
 8008148:	2032      	movs	r0, #50	@ 0x32
 800814a:	f001 f8b9 	bl	80092c0 <HAL_Delay>
        	}

        	HAL_Delay(150);
 800814e:	2096      	movs	r0, #150	@ 0x96
 8008150:	f001 f8b6 	bl	80092c0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	b2db      	uxtb	r3, r3
 8008158:	4619      	mov	r1, r3
 800815a:	2002      	movs	r0, #2
 800815c:	f000 fb6f 	bl	800883e <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008160:	e6cc      	b.n	8007efc <takeWifiSSID+0x34>
        		break;
 8008162:	bf00      	nop
    }
}
 8008164:	bf00      	nop
 8008166:	3718      	adds	r7, #24
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	20001020 	.word	0x20001020
 8008170:	20000004 	.word	0x20000004
 8008174:	40010800 	.word	0x40010800
 8008178:	40011000 	.word	0x40011000
 800817c:	20000f9c 	.word	0x20000f9c
 8008180:	20000018 	.word	0x20000018

08008184 <passConfirmation>:

uint8_t passConfirmation() {
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af04      	add	r7, sp, #16
	int loopVal = 1;
 800818a:	2301      	movs	r3, #1
 800818c:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 800818e:	4a25      	ldr	r2, [pc, #148]	@ (8008224 <passConfirmation+0xa0>)
 8008190:	2101      	movs	r1, #1
 8008192:	2001      	movs	r0, #1
 8008194:	f000 fb72 	bl	800887c <lcd_print>

	while(loopVal == 1) {
 8008198:	e012      	b.n	80081c0 <passConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 800819a:	4a23      	ldr	r2, [pc, #140]	@ (8008228 <passConfirmation+0xa4>)
 800819c:	2101      	movs	r1, #1
 800819e:	2002      	movs	r0, #2
 80081a0:	f000 fb6c 	bl	800887c <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80081a4:	2102      	movs	r1, #2
 80081a6:	4821      	ldr	r0, [pc, #132]	@ (800822c <passConfirmation+0xa8>)
 80081a8:	f001 fe5a 	bl	8009e60 <HAL_GPIO_ReadPin>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d101      	bne.n	80081b6 <passConfirmation+0x32>
			loopVal = 0;
 80081b2:	2300      	movs	r3, #0
 80081b4:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiPass);
 80081b6:	4a1e      	ldr	r2, [pc, #120]	@ (8008230 <passConfirmation+0xac>)
 80081b8:	2101      	movs	r1, #1
 80081ba:	2001      	movs	r0, #1
 80081bc:	f000 fb5e 	bl	800887c <lcd_print>
	while(loopVal == 1) {
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d0e9      	beq.n	800819a <passConfirmation+0x16>
	}

    lcd_cursor(0);
 80081c6:	2000      	movs	r0, #0
 80081c8:	f000 fbb6 	bl	8008938 <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 80081cc:	4818      	ldr	r0, [pc, #96]	@ (8008230 <passConfirmation+0xac>)
 80081ce:	f7f8 f829 	bl	8000224 <strlen>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b14      	cmp	r3, #20
 80081d6:	d90f      	bls.n	80081f8 <passConfirmation+0x74>
    	lcd_print(1, 1, passExceedErrorText);
 80081d8:	4a16      	ldr	r2, [pc, #88]	@ (8008234 <passConfirmation+0xb0>)
 80081da:	2101      	movs	r1, #1
 80081dc:	2001      	movs	r0, #1
 80081de:	f000 fb4d 	bl	800887c <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 80081e2:	4a15      	ldr	r2, [pc, #84]	@ (8008238 <passConfirmation+0xb4>)
 80081e4:	2101      	movs	r1, #1
 80081e6:	2002      	movs	r0, #2
 80081e8:	f000 fb48 	bl	800887c <lcd_print>
        HAL_Delay(1250);
 80081ec:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80081f0:	f001 f866 	bl	80092c0 <HAL_Delay>

        return 0;
 80081f4:	2300      	movs	r3, #0
 80081f6:	e011      	b.n	800821c <passConfirmation+0x98>
    } else {
    	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80081f8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80081fc:	9302      	str	r3, [sp, #8]
 80081fe:	236e      	movs	r3, #110	@ 0x6e
 8008200:	9301      	str	r3, [sp, #4]
 8008202:	4b0e      	ldr	r3, [pc, #56]	@ (800823c <passConfirmation+0xb8>)
 8008204:	9300      	str	r3, [sp, #0]
 8008206:	236e      	movs	r3, #110	@ 0x6e
 8008208:	2200      	movs	r2, #0
 800820a:	21a0      	movs	r1, #160	@ 0xa0
 800820c:	480c      	ldr	r0, [pc, #48]	@ (8008240 <passConfirmation+0xbc>)
 800820e:	f002 f8e1 	bl	800a3d4 <HAL_I2C_Mem_Write>
    	HAL_Delay(1000);
 8008212:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008216:	f001 f853 	bl	80092c0 <HAL_Delay>

    	return 1;
 800821a:	2301      	movs	r3, #1
    }
}
 800821c:	4618      	mov	r0, r3
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	0800d0c8 	.word	0x0800d0c8
 8008228:	200017b4 	.word	0x200017b4
 800822c:	40010800 	.word	0x40010800
 8008230:	20001030 	.word	0x20001030
 8008234:	200016ec 	.word	0x200016ec
 8008238:	20001700 	.word	0x20001700
 800823c:	20000f9c 	.word	0x20000f9c
 8008240:	200017f0 	.word	0x200017f0

08008244 <takeWifiPass>:

void takeWifiPass() {
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 800824a:	2001      	movs	r0, #1
 800824c:	f000 fb74 	bl	8008938 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 8008250:	2210      	movs	r2, #16
 8008252:	2100      	movs	r1, #0
 8008254:	48a4      	ldr	r0, [pc, #656]	@ (80084e8 <takeWifiPass+0x2a4>)
 8008256:	f004 fe3d 	bl	800ced4 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 800825a:	2301      	movs	r3, #1
 800825c:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 800825e:	2307      	movs	r3, #7
 8008260:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8008262:	2301      	movs	r3, #1
 8008264:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8008266:	2300      	movs	r3, #0
 8008268:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 800826a:	4ba0      	ldr	r3, [pc, #640]	@ (80084ec <takeWifiPass+0x2a8>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8008270:	2101      	movs	r1, #1
 8008272:	2003      	movs	r0, #3
 8008274:	f7f8 fd8a 	bl	8000d8c <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008278:	2108      	movs	r1, #8
 800827a:	489d      	ldr	r0, [pc, #628]	@ (80084f0 <takeWifiPass+0x2ac>)
 800827c:	f001 fdf0 	bl	8009e60 <HAL_GPIO_ReadPin>
 8008280:	4603      	mov	r3, r0
 8008282:	2b01      	cmp	r3, #1
 8008284:	d106      	bne.n	8008294 <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 8008286:	f7ff ff7d 	bl	8008184 <passConfirmation>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	f040 8126 	bne.w	80084de <takeWifiPass+0x29a>
    	        goto mainPassSection;
 8008292:	e7da      	b.n	800824a <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008294:	2101      	movs	r1, #1
 8008296:	4896      	ldr	r0, [pc, #600]	@ (80084f0 <takeWifiPass+0x2ac>)
 8008298:	f001 fde2 	bl	8009e60 <HAL_GPIO_ReadPin>
 800829c:	4603      	mov	r3, r0
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d14d      	bne.n	800833e <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2b50      	cmp	r3, #80	@ 0x50
 80082a6:	dd01      	ble.n	80082ac <takeWifiPass+0x68>
        		cursorPosition = 1;
 80082a8:	2301      	movs	r3, #1
 80082aa:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2b10      	cmp	r3, #16
 80082b0:	d13f      	bne.n	8008332 <takeWifiPass+0xee>
            	if(page == 1) {
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d109      	bne.n	80082cc <takeWifiPass+0x88>
            		cursorPosition = 1;
 80082b8:	2301      	movs	r3, #1
 80082ba:	60fb      	str	r3, [r7, #12]
            		page++;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	3301      	adds	r3, #1
 80082c0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80082c2:	2102      	movs	r1, #2
 80082c4:	2003      	movs	r0, #3
 80082c6:	f7f8 fd61 	bl	8000d8c <printTemplate>
 80082ca:	e035      	b.n	8008338 <takeWifiPass+0xf4>
            	} else if(page == 2) {
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d109      	bne.n	80082e6 <takeWifiPass+0xa2>
            		cursorPosition = 1;
 80082d2:	2301      	movs	r3, #1
 80082d4:	60fb      	str	r3, [r7, #12]
            		page++;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	3301      	adds	r3, #1
 80082da:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80082dc:	2103      	movs	r1, #3
 80082de:	2003      	movs	r0, #3
 80082e0:	f7f8 fd54 	bl	8000d8c <printTemplate>
 80082e4:	e028      	b.n	8008338 <takeWifiPass+0xf4>
            	} else if(page == 3) {
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	2b03      	cmp	r3, #3
 80082ea:	d109      	bne.n	8008300 <takeWifiPass+0xbc>
            		cursorPosition = 1;
 80082ec:	2301      	movs	r3, #1
 80082ee:	60fb      	str	r3, [r7, #12]
            		page++;
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	3301      	adds	r3, #1
 80082f4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80082f6:	2104      	movs	r1, #4
 80082f8:	2003      	movs	r0, #3
 80082fa:	f7f8 fd47 	bl	8000d8c <printTemplate>
 80082fe:	e01b      	b.n	8008338 <takeWifiPass+0xf4>
            	} else if(page == 4) {
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	2b04      	cmp	r3, #4
 8008304:	d109      	bne.n	800831a <takeWifiPass+0xd6>
            		cursorPosition = 1;
 8008306:	2301      	movs	r3, #1
 8008308:	60fb      	str	r3, [r7, #12]
            		page++;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	3301      	adds	r3, #1
 800830e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8008310:	2105      	movs	r1, #5
 8008312:	2003      	movs	r0, #3
 8008314:	f7f8 fd3a 	bl	8000d8c <printTemplate>
 8008318:	e00e      	b.n	8008338 <takeWifiPass+0xf4>
            	} else if(page == 5) {
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	2b05      	cmp	r3, #5
 800831e:	d10b      	bne.n	8008338 <takeWifiPass+0xf4>
            		cursorPosition = 1;
 8008320:	2301      	movs	r3, #1
 8008322:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008324:	2301      	movs	r3, #1
 8008326:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8008328:	2101      	movs	r1, #1
 800832a:	2003      	movs	r0, #3
 800832c:	f7f8 fd2e 	bl	8000d8c <printTemplate>
 8008330:	e002      	b.n	8008338 <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	3301      	adds	r3, #1
 8008336:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008338:	2096      	movs	r0, #150	@ 0x96
 800833a:	f000 ffc1 	bl	80092c0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800833e:	2108      	movs	r1, #8
 8008340:	486c      	ldr	r0, [pc, #432]	@ (80084f4 <takeWifiPass+0x2b0>)
 8008342:	f001 fd8d 	bl	8009e60 <HAL_GPIO_ReadPin>
 8008346:	4603      	mov	r3, r0
 8008348:	2b01      	cmp	r3, #1
 800834a:	d149      	bne.n	80083e0 <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	dc01      	bgt.n	8008356 <takeWifiPass+0x112>
        		cursorPosition = 80;
 8008352:	2350      	movs	r3, #80	@ 0x50
 8008354:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d13b      	bne.n	80083d4 <takeWifiPass+0x190>
            	if(page == 1) {
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	2b01      	cmp	r3, #1
 8008360:	d108      	bne.n	8008374 <takeWifiPass+0x130>
            		cursorPosition = 16;
 8008362:	2310      	movs	r3, #16
 8008364:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8008366:	2305      	movs	r3, #5
 8008368:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 800836a:	2105      	movs	r1, #5
 800836c:	2003      	movs	r0, #3
 800836e:	f7f8 fd0d 	bl	8000d8c <printTemplate>
 8008372:	e032      	b.n	80083da <takeWifiPass+0x196>
            	} else if(page == 2) {
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	2b02      	cmp	r3, #2
 8008378:	d108      	bne.n	800838c <takeWifiPass+0x148>
            		cursorPosition = 16;
 800837a:	2310      	movs	r3, #16
 800837c:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800837e:	2301      	movs	r3, #1
 8008380:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8008382:	2101      	movs	r1, #1
 8008384:	2003      	movs	r0, #3
 8008386:	f7f8 fd01 	bl	8000d8c <printTemplate>
 800838a:	e026      	b.n	80083da <takeWifiPass+0x196>
            	} else if(page == 3) {
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	2b03      	cmp	r3, #3
 8008390:	d108      	bne.n	80083a4 <takeWifiPass+0x160>
            		cursorPosition = 16;
 8008392:	2310      	movs	r3, #16
 8008394:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8008396:	2302      	movs	r3, #2
 8008398:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 800839a:	2102      	movs	r1, #2
 800839c:	2003      	movs	r0, #3
 800839e:	f7f8 fcf5 	bl	8000d8c <printTemplate>
 80083a2:	e01a      	b.n	80083da <takeWifiPass+0x196>
            	} else if(page == 4) {
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	2b04      	cmp	r3, #4
 80083a8:	d108      	bne.n	80083bc <takeWifiPass+0x178>
            		cursorPosition = 16;
 80083aa:	2310      	movs	r3, #16
 80083ac:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80083ae:	2303      	movs	r3, #3
 80083b0:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80083b2:	2103      	movs	r1, #3
 80083b4:	2003      	movs	r0, #3
 80083b6:	f7f8 fce9 	bl	8000d8c <printTemplate>
 80083ba:	e00e      	b.n	80083da <takeWifiPass+0x196>
            	} else if(page == 5) {
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	2b05      	cmp	r3, #5
 80083c0:	d10b      	bne.n	80083da <takeWifiPass+0x196>
            		cursorPosition = 16;
 80083c2:	2310      	movs	r3, #16
 80083c4:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80083c6:	2304      	movs	r3, #4
 80083c8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80083ca:	2104      	movs	r1, #4
 80083cc:	2003      	movs	r0, #3
 80083ce:	f7f8 fcdd 	bl	8000d8c <printTemplate>
 80083d2:	e002      	b.n	80083da <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	3b01      	subs	r3, #1
 80083d8:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80083da:	2096      	movs	r0, #150	@ 0x96
 80083dc:	f000 ff70 	bl	80092c0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80083e0:	2102      	movs	r1, #2
 80083e2:	4843      	ldr	r0, [pc, #268]	@ (80084f0 <takeWifiPass+0x2ac>)
 80083e4:	f001 fd3c 	bl	8009e60 <HAL_GPIO_ReadPin>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d12f      	bne.n	800844e <takeWifiPass+0x20a>
            eepromData[eepromVal] = cursorPosition;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	b2d9      	uxtb	r1, r3
 80083f2:	4a41      	ldr	r2, [pc, #260]	@ (80084f8 <takeWifiPass+0x2b4>)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4413      	add	r3, r2
 80083f8:	460a      	mov	r2, r1
 80083fa:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 80083fc:	4a3f      	ldr	r2, [pc, #252]	@ (80084fc <takeWifiPass+0x2b8>)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	4413      	add	r3, r2
 8008402:	7819      	ldrb	r1, [r3, #0]
 8008404:	4a38      	ldr	r2, [pc, #224]	@ (80084e8 <takeWifiPass+0x2a4>)
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	4413      	add	r3, r2
 800840a:	460a      	mov	r2, r1
 800840c:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	b2d9      	uxtb	r1, r3
 8008412:	4a3a      	ldr	r2, [pc, #232]	@ (80084fc <takeWifiPass+0x2b8>)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	4413      	add	r3, r2
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	2001      	movs	r0, #1
 800841e:	f000 fa42 	bl	80088a6 <lcd_print_char>

            writeLoc++;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	3301      	adds	r3, #1
 8008426:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	3301      	adds	r3, #1
 800842c:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	3301      	adds	r3, #1
 8008432:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8008434:	4a30      	ldr	r2, [pc, #192]	@ (80084f8 <takeWifiPass+0x2b4>)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4413      	add	r3, r2
 800843a:	2200      	movs	r2, #0
 800843c:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 800843e:	4a2a      	ldr	r2, [pc, #168]	@ (80084e8 <takeWifiPass+0x2a4>)
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	4413      	add	r3, r2
 8008444:	2200      	movs	r2, #0
 8008446:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8008448:	2096      	movs	r0, #150	@ 0x96
 800844a:	f000 ff39 	bl	80092c0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800844e:	2104      	movs	r1, #4
 8008450:	4827      	ldr	r0, [pc, #156]	@ (80084f0 <takeWifiPass+0x2ac>)
 8008452:	f001 fd05 	bl	8009e60 <HAL_GPIO_ReadPin>
 8008456:	4603      	mov	r3, r0
 8008458:	2b01      	cmp	r3, #1
 800845a:	d139      	bne.n	80084d0 <takeWifiPass+0x28c>
        	if(strlen(wifiPass) >= 1) {
 800845c:	4b22      	ldr	r3, [pc, #136]	@ (80084e8 <takeWifiPass+0x2a4>)
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d032      	beq.n	80084ca <takeWifiPass+0x286>
        		eepromData[eepromVal] = '\0';
 8008464:	4a24      	ldr	r2, [pc, #144]	@ (80084f8 <takeWifiPass+0x2b4>)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4413      	add	r3, r2
 800846a:	2200      	movs	r2, #0
 800846c:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 800846e:	4a1e      	ldr	r2, [pc, #120]	@ (80084e8 <takeWifiPass+0x2a4>)
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	4413      	add	r3, r2
 8008474:	2200      	movs	r2, #0
 8008476:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	2b07      	cmp	r3, #7
 800847c:	dd03      	ble.n	8008486 <takeWifiPass+0x242>
        			writeLoc--;
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	3b01      	subs	r3, #1
 8008482:	613b      	str	r3, [r7, #16]
 8008484:	e004      	b.n	8008490 <takeWifiPass+0x24c>
        		} else if(writeLoc < 7) {
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	2b06      	cmp	r3, #6
 800848a:	dc01      	bgt.n	8008490 <takeWifiPass+0x24c>
        			writeLoc = 7;
 800848c:	2307      	movs	r3, #7
 800848e:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	2b00      	cmp	r3, #0
 8008494:	dd06      	ble.n	80084a4 <takeWifiPass+0x260>
        			arrayPosition--;
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	3b01      	subs	r3, #1
 800849a:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	3b01      	subs	r3, #1
 80084a0:	607b      	str	r3, [r7, #4]
 80084a2:	e007      	b.n	80084b4 <takeWifiPass+0x270>
        		} else if(arrayPosition < 0) {
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	da04      	bge.n	80084b4 <takeWifiPass+0x270>
        			arrayPosition = 0;
 80084aa:	2300      	movs	r3, #0
 80084ac:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 80084ae:	4b0f      	ldr	r3, [pc, #60]	@ (80084ec <takeWifiPass+0x2a8>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	3307      	adds	r3, #7
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	4619      	mov	r1, r3
 80084be:	2001      	movs	r0, #1
 80084c0:	f000 fa12 	bl	80088e8 <lcd_delete_char>
        		HAL_Delay(50);
 80084c4:	2032      	movs	r0, #50	@ 0x32
 80084c6:	f000 fefb 	bl	80092c0 <HAL_Delay>
        	}

        	HAL_Delay(150);
 80084ca:	2096      	movs	r0, #150	@ 0x96
 80084cc:	f000 fef8 	bl	80092c0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	4619      	mov	r1, r3
 80084d6:	2002      	movs	r0, #2
 80084d8:	f000 f9b1 	bl	800883e <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80084dc:	e6cc      	b.n	8008278 <takeWifiPass+0x34>
    	        break;
 80084de:	bf00      	nop
    }
}
 80084e0:	bf00      	nop
 80084e2:	3718      	adds	r7, #24
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	20001030 	.word	0x20001030
 80084ec:	20000008 	.word	0x20000008
 80084f0:	40010800 	.word	0x40010800
 80084f4:	40011000 	.word	0x40011000
 80084f8:	20000f9c 	.word	0x20000f9c
 80084fc:	20000018 	.word	0x20000018

08008500 <checkEEPROM4ID>:
		HAL_Delay(500);
		convertAndSendData();
	}
}

int checkEEPROM4ID() {
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8008506:	4b0f      	ldr	r3, [pc, #60]	@ (8008544 <checkEEPROM4ID+0x44>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 800850c:	2301      	movs	r3, #1
 800850e:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008510:	2300      	movs	r3, #0
 8008512:	607b      	str	r3, [r7, #4]
 8008514:	e00d      	b.n	8008532 <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8008516:	4a0c      	ldr	r2, [pc, #48]	@ (8008548 <checkEEPROM4ID+0x48>)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	4413      	add	r3, r2
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <checkEEPROM4ID+0x26>
			returnVal = 0;
 8008522:	2300      	movs	r3, #0
 8008524:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	3301      	adds	r3, #1
 800852a:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	3301      	adds	r3, #1
 8008530:	607b      	str	r3, [r7, #4]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2b0b      	cmp	r3, #11
 8008536:	ddee      	ble.n	8008516 <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8008538:	68bb      	ldr	r3, [r7, #8]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3714      	adds	r7, #20
 800853e:	46bd      	mov	sp, r7
 8008540:	bc80      	pop	{r7}
 8008542:	4770      	bx	lr
 8008544:	20000000 	.word	0x20000000
 8008548:	20000f9c 	.word	0x20000f9c

0800854c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af02      	add	r7, sp, #8
 8008552:	4603      	mov	r3, r0
 8008554:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8008556:	79fb      	ldrb	r3, [r7, #7]
 8008558:	f023 030f 	bic.w	r3, r3, #15
 800855c:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800855e:	79fb      	ldrb	r3, [r7, #7]
 8008560:	011b      	lsls	r3, r3, #4
 8008562:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8008564:	7b7b      	ldrb	r3, [r7, #13]
 8008566:	f043 030c 	orr.w	r3, r3, #12
 800856a:	b2db      	uxtb	r3, r3
 800856c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800856e:	7b7b      	ldrb	r3, [r7, #13]
 8008570:	f043 0308 	orr.w	r3, r3, #8
 8008574:	b2db      	uxtb	r3, r3
 8008576:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8008578:	7b3b      	ldrb	r3, [r7, #12]
 800857a:	f043 030c 	orr.w	r3, r3, #12
 800857e:	b2db      	uxtb	r3, r3
 8008580:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8008582:	7b3b      	ldrb	r3, [r7, #12]
 8008584:	f043 0308 	orr.w	r3, r3, #8
 8008588:	b2db      	uxtb	r3, r3
 800858a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800858c:	bf00      	nop
 800858e:	4825      	ldr	r0, [pc, #148]	@ (8008624 <lcd_send_cmd+0xd8>)
 8008590:	f002 fa8f 	bl	800aab2 <HAL_I2C_GetError>
 8008594:	4603      	mov	r3, r0
 8008596:	2b04      	cmp	r3, #4
 8008598:	d0f9      	beq.n	800858e <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800859a:	bf00      	nop
 800859c:	4821      	ldr	r0, [pc, #132]	@ (8008624 <lcd_send_cmd+0xd8>)
 800859e:	f002 fa7b 	bl	800aa98 <HAL_I2C_GetState>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b20      	cmp	r3, #32
 80085a6:	d1f9      	bne.n	800859c <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80085a8:	4b1f      	ldr	r3, [pc, #124]	@ (8008628 <lcd_send_cmd+0xdc>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d116      	bne.n	80085de <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80085b0:	2300      	movs	r3, #0
 80085b2:	73fb      	strb	r3, [r7, #15]
 80085b4:	e00f      	b.n	80085d6 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
 80085b8:	3310      	adds	r3, #16
 80085ba:	443b      	add	r3, r7
 80085bc:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
 80085c2:	f022 0208 	bic.w	r2, r2, #8
 80085c6:	b2d2      	uxtb	r2, r2
 80085c8:	3310      	adds	r3, #16
 80085ca:	443b      	add	r3, r7
 80085cc:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80085d0:	7bfb      	ldrb	r3, [r7, #15]
 80085d2:	3301      	adds	r3, #1
 80085d4:	73fb      	strb	r3, [r7, #15]
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
 80085d8:	2b03      	cmp	r3, #3
 80085da:	d9ec      	bls.n	80085b6 <lcd_send_cmd+0x6a>
 80085dc:	e015      	b.n	800860a <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80085de:	2300      	movs	r3, #0
 80085e0:	73bb      	strb	r3, [r7, #14]
 80085e2:	e00f      	b.n	8008604 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80085e4:	7bbb      	ldrb	r3, [r7, #14]
 80085e6:	3310      	adds	r3, #16
 80085e8:	443b      	add	r3, r7
 80085ea:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80085ee:	7bbb      	ldrb	r3, [r7, #14]
 80085f0:	f042 0208 	orr.w	r2, r2, #8
 80085f4:	b2d2      	uxtb	r2, r2
 80085f6:	3310      	adds	r3, #16
 80085f8:	443b      	add	r3, r7
 80085fa:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80085fe:	7bbb      	ldrb	r3, [r7, #14]
 8008600:	3301      	adds	r3, #1
 8008602:	73bb      	strb	r3, [r7, #14]
 8008604:	7bbb      	ldrb	r3, [r7, #14]
 8008606:	2b03      	cmp	r3, #3
 8008608:	d9ec      	bls.n	80085e4 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800860a:	f107 0208 	add.w	r2, r7, #8
 800860e:	2364      	movs	r3, #100	@ 0x64
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	2304      	movs	r3, #4
 8008614:	214e      	movs	r1, #78	@ 0x4e
 8008616:	4803      	ldr	r0, [pc, #12]	@ (8008624 <lcd_send_cmd+0xd8>)
 8008618:	f001 fdde 	bl	800a1d8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 800861c:	bf00      	nop
 800861e:	3710      	adds	r7, #16
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	200017f0 	.word	0x200017f0
 8008628:	200017c5 	.word	0x200017c5

0800862c <lcd_send_data>:

void lcd_send_data (char data) {
 800862c:	b580      	push	{r7, lr}
 800862e:	b086      	sub	sp, #24
 8008630:	af02      	add	r7, sp, #8
 8008632:	4603      	mov	r3, r0
 8008634:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8008636:	79fb      	ldrb	r3, [r7, #7]
 8008638:	f023 030f 	bic.w	r3, r3, #15
 800863c:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800863e:	79fb      	ldrb	r3, [r7, #7]
 8008640:	011b      	lsls	r3, r3, #4
 8008642:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8008644:	7b7b      	ldrb	r3, [r7, #13]
 8008646:	f043 030d 	orr.w	r3, r3, #13
 800864a:	b2db      	uxtb	r3, r3
 800864c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800864e:	7b7b      	ldrb	r3, [r7, #13]
 8008650:	f043 0309 	orr.w	r3, r3, #9
 8008654:	b2db      	uxtb	r3, r3
 8008656:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8008658:	7b3b      	ldrb	r3, [r7, #12]
 800865a:	f043 030d 	orr.w	r3, r3, #13
 800865e:	b2db      	uxtb	r3, r3
 8008660:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8008662:	7b3b      	ldrb	r3, [r7, #12]
 8008664:	f043 0309 	orr.w	r3, r3, #9
 8008668:	b2db      	uxtb	r3, r3
 800866a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800866c:	bf00      	nop
 800866e:	4825      	ldr	r0, [pc, #148]	@ (8008704 <lcd_send_data+0xd8>)
 8008670:	f002 fa1f 	bl	800aab2 <HAL_I2C_GetError>
 8008674:	4603      	mov	r3, r0
 8008676:	2b04      	cmp	r3, #4
 8008678:	d0f9      	beq.n	800866e <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800867a:	bf00      	nop
 800867c:	4821      	ldr	r0, [pc, #132]	@ (8008704 <lcd_send_data+0xd8>)
 800867e:	f002 fa0b 	bl	800aa98 <HAL_I2C_GetState>
 8008682:	4603      	mov	r3, r0
 8008684:	2b20      	cmp	r3, #32
 8008686:	d1f9      	bne.n	800867c <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008688:	4b1f      	ldr	r3, [pc, #124]	@ (8008708 <lcd_send_data+0xdc>)
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d116      	bne.n	80086be <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008690:	2300      	movs	r3, #0
 8008692:	73fb      	strb	r3, [r7, #15]
 8008694:	e00f      	b.n	80086b6 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008696:	7bfb      	ldrb	r3, [r7, #15]
 8008698:	3310      	adds	r3, #16
 800869a:	443b      	add	r3, r7
 800869c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
 80086a2:	f022 0208 	bic.w	r2, r2, #8
 80086a6:	b2d2      	uxtb	r2, r2
 80086a8:	3310      	adds	r3, #16
 80086aa:	443b      	add	r3, r7
 80086ac:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80086b0:	7bfb      	ldrb	r3, [r7, #15]
 80086b2:	3301      	adds	r3, #1
 80086b4:	73fb      	strb	r3, [r7, #15]
 80086b6:	7bfb      	ldrb	r3, [r7, #15]
 80086b8:	2b03      	cmp	r3, #3
 80086ba:	d9ec      	bls.n	8008696 <lcd_send_data+0x6a>
 80086bc:	e015      	b.n	80086ea <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80086be:	2300      	movs	r3, #0
 80086c0:	73bb      	strb	r3, [r7, #14]
 80086c2:	e00f      	b.n	80086e4 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80086c4:	7bbb      	ldrb	r3, [r7, #14]
 80086c6:	3310      	adds	r3, #16
 80086c8:	443b      	add	r3, r7
 80086ca:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
 80086d0:	f042 0208 	orr.w	r2, r2, #8
 80086d4:	b2d2      	uxtb	r2, r2
 80086d6:	3310      	adds	r3, #16
 80086d8:	443b      	add	r3, r7
 80086da:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	3301      	adds	r3, #1
 80086e2:	73bb      	strb	r3, [r7, #14]
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d9ec      	bls.n	80086c4 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80086ea:	f107 0208 	add.w	r2, r7, #8
 80086ee:	2364      	movs	r3, #100	@ 0x64
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	2304      	movs	r3, #4
 80086f4:	214e      	movs	r1, #78	@ 0x4e
 80086f6:	4803      	ldr	r0, [pc, #12]	@ (8008704 <lcd_send_data+0xd8>)
 80086f8:	f001 fd6e 	bl	800a1d8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80086fc:	bf00      	nop
 80086fe:	3710      	adds	r7, #16
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}
 8008704:	200017f0 	.word	0x200017f0
 8008708:	200017c5 	.word	0x200017c5

0800870c <lcd_send_string>:

void lcd_send_string (char *str) {
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
	while (*str) {
 8008714:	e006      	b.n	8008724 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	1c5a      	adds	r2, r3, #1
 800871a:	607a      	str	r2, [r7, #4]
 800871c:	781b      	ldrb	r3, [r3, #0]
 800871e:	4618      	mov	r0, r3
 8008720:	f7ff ff84 	bl	800862c <lcd_send_data>
	while (*str) {
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1f4      	bne.n	8008716 <lcd_send_string+0xa>
	}
}
 800872c:	bf00      	nop
 800872e:	bf00      	nop
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
	...

08008738 <lcd_send_char>:

void lcd_send_char(char ch) {
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af02      	add	r7, sp, #8
 800873e:	4603      	mov	r3, r0
 8008740:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8008742:	79fb      	ldrb	r3, [r7, #7]
 8008744:	f023 030f 	bic.w	r3, r3, #15
 8008748:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 800874a:	79fb      	ldrb	r3, [r7, #7]
 800874c:	011b      	lsls	r3, r3, #4
 800874e:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8008750:	7b7b      	ldrb	r3, [r7, #13]
 8008752:	f043 030d 	orr.w	r3, r3, #13
 8008756:	b2db      	uxtb	r3, r3
 8008758:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 800875a:	7b7b      	ldrb	r3, [r7, #13]
 800875c:	f043 0309 	orr.w	r3, r3, #9
 8008760:	b2db      	uxtb	r3, r3
 8008762:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8008764:	7b3b      	ldrb	r3, [r7, #12]
 8008766:	f043 030d 	orr.w	r3, r3, #13
 800876a:	b2db      	uxtb	r3, r3
 800876c:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 800876e:	7b3b      	ldrb	r3, [r7, #12]
 8008770:	f043 0309 	orr.w	r3, r3, #9
 8008774:	b2db      	uxtb	r3, r3
 8008776:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008778:	bf00      	nop
 800877a:	4825      	ldr	r0, [pc, #148]	@ (8008810 <lcd_send_char+0xd8>)
 800877c:	f002 f999 	bl	800aab2 <HAL_I2C_GetError>
 8008780:	4603      	mov	r3, r0
 8008782:	2b04      	cmp	r3, #4
 8008784:	d0f9      	beq.n	800877a <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008786:	bf00      	nop
 8008788:	4821      	ldr	r0, [pc, #132]	@ (8008810 <lcd_send_char+0xd8>)
 800878a:	f002 f985 	bl	800aa98 <HAL_I2C_GetState>
 800878e:	4603      	mov	r3, r0
 8008790:	2b20      	cmp	r3, #32
 8008792:	d1f9      	bne.n	8008788 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8008794:	4b1f      	ldr	r3, [pc, #124]	@ (8008814 <lcd_send_char+0xdc>)
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d116      	bne.n	80087ca <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 800879c:	2300      	movs	r3, #0
 800879e:	73fb      	strb	r3, [r7, #15]
 80087a0:	e00f      	b.n	80087c2 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
 80087a4:	3310      	adds	r3, #16
 80087a6:	443b      	add	r3, r7
 80087a8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80087ac:	7bfb      	ldrb	r3, [r7, #15]
 80087ae:	f022 0208 	bic.w	r2, r2, #8
 80087b2:	b2d2      	uxtb	r2, r2
 80087b4:	3310      	adds	r3, #16
 80087b6:	443b      	add	r3, r7
 80087b8:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
 80087be:	3301      	adds	r3, #1
 80087c0:	73fb      	strb	r3, [r7, #15]
 80087c2:	7bfb      	ldrb	r3, [r7, #15]
 80087c4:	2b03      	cmp	r3, #3
 80087c6:	d9ec      	bls.n	80087a2 <lcd_send_char+0x6a>
 80087c8:	e015      	b.n	80087f6 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80087ca:	2300      	movs	r3, #0
 80087cc:	73bb      	strb	r3, [r7, #14]
 80087ce:	e00f      	b.n	80087f0 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80087d0:	7bbb      	ldrb	r3, [r7, #14]
 80087d2:	3310      	adds	r3, #16
 80087d4:	443b      	add	r3, r7
 80087d6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80087da:	7bbb      	ldrb	r3, [r7, #14]
 80087dc:	f042 0208 	orr.w	r2, r2, #8
 80087e0:	b2d2      	uxtb	r2, r2
 80087e2:	3310      	adds	r3, #16
 80087e4:	443b      	add	r3, r7
 80087e6:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80087ea:	7bbb      	ldrb	r3, [r7, #14]
 80087ec:	3301      	adds	r3, #1
 80087ee:	73bb      	strb	r3, [r7, #14]
 80087f0:	7bbb      	ldrb	r3, [r7, #14]
 80087f2:	2b03      	cmp	r3, #3
 80087f4:	d9ec      	bls.n	80087d0 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80087f6:	f107 0208 	add.w	r2, r7, #8
 80087fa:	2364      	movs	r3, #100	@ 0x64
 80087fc:	9300      	str	r3, [sp, #0]
 80087fe:	2304      	movs	r3, #4
 8008800:	214e      	movs	r1, #78	@ 0x4e
 8008802:	4803      	ldr	r0, [pc, #12]	@ (8008810 <lcd_send_char+0xd8>)
 8008804:	f001 fce8 	bl	800a1d8 <HAL_I2C_Master_Transmit>
}
 8008808:	bf00      	nop
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	200017f0 	.word	0x200017f0
 8008814:	200017c5 	.word	0x200017c5

08008818 <lcd_init>:

void lcd_init (void) {
 8008818:	b580      	push	{r7, lr}
 800881a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 800881c:	2002      	movs	r0, #2
 800881e:	f7ff fe95 	bl	800854c <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8008822:	2028      	movs	r0, #40	@ 0x28
 8008824:	f7ff fe92 	bl	800854c <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8008828:	200c      	movs	r0, #12
 800882a:	f7ff fe8f 	bl	800854c <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800882e:	2080      	movs	r0, #128	@ 0x80
 8008830:	f7ff fe8c 	bl	800854c <lcd_send_cmd>
	lcd_backlight(1);
 8008834:	2001      	movs	r0, #1
 8008836:	f000 f86d 	bl	8008914 <lcd_backlight>
}
 800883a:	bf00      	nop
 800883c:	bd80      	pop	{r7, pc}

0800883e <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800883e:	b580      	push	{r7, lr}
 8008840:	b082      	sub	sp, #8
 8008842:	af00      	add	r7, sp, #0
 8008844:	4603      	mov	r3, r0
 8008846:	460a      	mov	r2, r1
 8008848:	71fb      	strb	r3, [r7, #7]
 800884a:	4613      	mov	r3, r2
 800884c:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800884e:	79fb      	ldrb	r3, [r7, #7]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d106      	bne.n	8008862 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8008854:	79bb      	ldrb	r3, [r7, #6]
 8008856:	337f      	adds	r3, #127	@ 0x7f
 8008858:	b2db      	uxtb	r3, r3
 800885a:	4618      	mov	r0, r3
 800885c:	f7ff fe76 	bl	800854c <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8008860:	e008      	b.n	8008874 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8008862:	79fb      	ldrb	r3, [r7, #7]
 8008864:	2b02      	cmp	r3, #2
 8008866:	d105      	bne.n	8008874 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8008868:	79bb      	ldrb	r3, [r7, #6]
 800886a:	3b41      	subs	r3, #65	@ 0x41
 800886c:	b2db      	uxtb	r3, r3
 800886e:	4618      	mov	r0, r3
 8008870:	f7ff fe6c 	bl	800854c <lcd_send_cmd>
}
 8008874:	bf00      	nop
 8008876:	3708      	adds	r7, #8
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 800887c:	b580      	push	{r7, lr}
 800887e:	b082      	sub	sp, #8
 8008880:	af00      	add	r7, sp, #0
 8008882:	4603      	mov	r3, r0
 8008884:	603a      	str	r2, [r7, #0]
 8008886:	71fb      	strb	r3, [r7, #7]
 8008888:	460b      	mov	r3, r1
 800888a:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 800888c:	79ba      	ldrb	r2, [r7, #6]
 800888e:	79fb      	ldrb	r3, [r7, #7]
 8008890:	4611      	mov	r1, r2
 8008892:	4618      	mov	r0, r3
 8008894:	f7ff ffd3 	bl	800883e <lcd_gotoxy>
	lcd_send_string(str);
 8008898:	6838      	ldr	r0, [r7, #0]
 800889a:	f7ff ff37 	bl	800870c <lcd_send_string>
}
 800889e:	bf00      	nop
 80088a0:	3708      	adds	r7, #8
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b082      	sub	sp, #8
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	4603      	mov	r3, r0
 80088ae:	71fb      	strb	r3, [r7, #7]
 80088b0:	460b      	mov	r3, r1
 80088b2:	71bb      	strb	r3, [r7, #6]
 80088b4:	4613      	mov	r3, r2
 80088b6:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80088b8:	79ba      	ldrb	r2, [r7, #6]
 80088ba:	79fb      	ldrb	r3, [r7, #7]
 80088bc:	4611      	mov	r1, r2
 80088be:	4618      	mov	r0, r3
 80088c0:	f7ff ffbd 	bl	800883e <lcd_gotoxy>
    lcd_send_char(ch);
 80088c4:	797b      	ldrb	r3, [r7, #5]
 80088c6:	4618      	mov	r0, r3
 80088c8:	f7ff ff36 	bl	8008738 <lcd_send_char>
}
 80088cc:	bf00      	nop
 80088ce:	3708      	adds	r7, #8
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <lcd_clear>:

void lcd_clear(void) {
 80088d4:	b580      	push	{r7, lr}
 80088d6:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80088d8:	2001      	movs	r0, #1
 80088da:	f7ff fe37 	bl	800854c <lcd_send_cmd>
    HAL_Delay(2);
 80088de:	2002      	movs	r0, #2
 80088e0:	f000 fcee 	bl	80092c0 <HAL_Delay>
}
 80088e4:	bf00      	nop
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	4603      	mov	r3, r0
 80088f0:	460a      	mov	r2, r1
 80088f2:	71fb      	strb	r3, [r7, #7]
 80088f4:	4613      	mov	r3, r2
 80088f6:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 80088f8:	79ba      	ldrb	r2, [r7, #6]
 80088fa:	79fb      	ldrb	r3, [r7, #7]
 80088fc:	4611      	mov	r1, r2
 80088fe:	4618      	mov	r0, r3
 8008900:	f7ff ff9d 	bl	800883e <lcd_gotoxy>

    lcd_send_char(' ');
 8008904:	2020      	movs	r0, #32
 8008906:	f7ff ff17 	bl	8008738 <lcd_send_char>
}
 800890a:	bf00      	nop
 800890c:	3708      	adds	r7, #8
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
	...

08008914 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	4603      	mov	r3, r0
 800891c:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800891e:	4a05      	ldr	r2, [pc, #20]	@ (8008934 <lcd_backlight+0x20>)
 8008920:	79fb      	ldrb	r3, [r7, #7]
 8008922:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8008924:	2000      	movs	r0, #0
 8008926:	f7ff fe11 	bl	800854c <lcd_send_cmd>
}
 800892a:	bf00      	nop
 800892c:	3708      	adds	r7, #8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	200017c5 	.word	0x200017c5

08008938 <lcd_cursor>:

void lcd_cursor(int state) {
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d106      	bne.n	8008954 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8008946:	200e      	movs	r0, #14
 8008948:	f7ff fe00 	bl	800854c <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 800894c:	200f      	movs	r0, #15
 800894e:	f7ff fdfd 	bl	800854c <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 8008952:	e002      	b.n	800895a <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8008954:	200c      	movs	r0, #12
 8008956:	f7ff fdf9 	bl	800854c <lcd_send_cmd>
}
 800895a:	bf00      	nop
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
	...

08008964 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 800896c:	4b04      	ldr	r3, [pc, #16]	@ (8008980 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	3301      	adds	r3, #1
 8008972:	4a03      	ldr	r2, [pc, #12]	@ (8008980 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008974:	6013      	str	r3, [r2, #0]
}
 8008976:	bf00      	nop
 8008978:	370c      	adds	r7, #12
 800897a:	46bd      	mov	sp, r7
 800897c:	bc80      	pop	{r7}
 800897e:	4770      	bx	lr
 8008980:	20001044 	.word	0x20001044

08008984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008988:	f000 fc38 	bl	80091fc <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 800898c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008990:	f000 fc96 	bl	80092c0 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008994:	f000 f89a 	bl	8008acc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008998:	f000 f9bc 	bl	8008d14 <MX_GPIO_Init>
  MX_CAN_Init();
 800899c:	f000 f8dc 	bl	8008b58 <MX_CAN_Init>
  MX_I2C1_Init();
 80089a0:	f000 f90e 	bl	8008bc0 <MX_I2C1_Init>
  MX_TIM1_Init();
 80089a4:	f000 f93a 	bl	8008c1c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80089a8:	f000 f98a 	bl	8008cc0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80089ac:	2201      	movs	r2, #1
 80089ae:	2140      	movs	r1, #64	@ 0x40
 80089b0:	483d      	ldr	r0, [pc, #244]	@ (8008aa8 <main+0x124>)
 80089b2:	f001 fa6c 	bl	8009e8e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80089b6:	2201      	movs	r2, #1
 80089b8:	2180      	movs	r1, #128	@ 0x80
 80089ba:	483b      	ldr	r0, [pc, #236]	@ (8008aa8 <main+0x124>)
 80089bc:	f001 fa67 	bl	8009e8e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80089c0:	200a      	movs	r0, #10
 80089c2:	f000 fc7d 	bl	80092c0 <HAL_Delay>
  lcd_init();
 80089c6:	f7ff ff27 	bl	8008818 <lcd_init>
  HAL_Delay(10);
 80089ca:	200a      	movs	r0, #10
 80089cc:	f000 fc78 	bl	80092c0 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 80089d0:	4836      	ldr	r0, [pc, #216]	@ (8008aac <main+0x128>)
 80089d2:	f003 f90f 	bl	800bbf4 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80089d6:	bf00      	nop
 80089d8:	4835      	ldr	r0, [pc, #212]	@ (8008ab0 <main+0x12c>)
 80089da:	f002 f86a 	bl	800aab2 <HAL_I2C_GetError>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b04      	cmp	r3, #4
 80089e2:	d0f9      	beq.n	80089d8 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80089e4:	bf00      	nop
 80089e6:	4832      	ldr	r0, [pc, #200]	@ (8008ab0 <main+0x12c>)
 80089e8:	f002 f856 	bl	800aa98 <HAL_I2C_GetState>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b20      	cmp	r3, #32
 80089f0:	d1f9      	bne.n	80089e6 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80089f2:	2200      	movs	r2, #0
 80089f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80089f8:	482b      	ldr	r0, [pc, #172]	@ (8008aa8 <main+0x124>)
 80089fa:	f001 fa48 	bl	8009e8e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80089fe:	2200      	movs	r2, #0
 8008a00:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008a04:	4828      	ldr	r0, [pc, #160]	@ (8008aa8 <main+0x124>)
 8008a06:	f001 fa42 	bl	8009e8e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	2104      	movs	r1, #4
 8008a0e:	4826      	ldr	r0, [pc, #152]	@ (8008aa8 <main+0x124>)
 8008a10:	f001 fa3d 	bl	8009e8e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008a14:	2200      	movs	r2, #0
 8008a16:	2102      	movs	r1, #2
 8008a18:	4823      	ldr	r0, [pc, #140]	@ (8008aa8 <main+0x124>)
 8008a1a:	f001 fa38 	bl	8009e8e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2101      	movs	r1, #1
 8008a22:	4821      	ldr	r0, [pc, #132]	@ (8008aa8 <main+0x124>)
 8008a24:	f001 fa33 	bl	8009e8e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008a28:	2200      	movs	r2, #0
 8008a2a:	2120      	movs	r1, #32
 8008a2c:	4821      	ldr	r0, [pc, #132]	@ (8008ab4 <main+0x130>)
 8008a2e:	f001 fa2e 	bl	8009e8e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008a32:	2200      	movs	r2, #0
 8008a34:	2110      	movs	r1, #16
 8008a36:	481f      	ldr	r0, [pc, #124]	@ (8008ab4 <main+0x130>)
 8008a38:	f001 fa29 	bl	8009e8e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	2180      	movs	r1, #128	@ 0x80
 8008a40:	481d      	ldr	r0, [pc, #116]	@ (8008ab8 <main+0x134>)
 8008a42:	f001 fa24 	bl	8009e8e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008a46:	2200      	movs	r2, #0
 8008a48:	2140      	movs	r1, #64	@ 0x40
 8008a4a:	481b      	ldr	r0, [pc, #108]	@ (8008ab8 <main+0x134>)
 8008a4c:	f001 fa1f 	bl	8009e8e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008a50:	2200      	movs	r2, #0
 8008a52:	2120      	movs	r1, #32
 8008a54:	4818      	ldr	r0, [pc, #96]	@ (8008ab8 <main+0x134>)
 8008a56:	f001 fa1a 	bl	8009e8e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	2110      	movs	r1, #16
 8008a5e:	4816      	ldr	r0, [pc, #88]	@ (8008ab8 <main+0x134>)
 8008a60:	f001 fa15 	bl	8009e8e <HAL_GPIO_WritePin>

  i2cTest();
 8008a64:	f7f8 f8e4 	bl	8000c30 <i2cTest>
  HAL_Delay(100);
 8008a68:	2064      	movs	r0, #100	@ 0x64
 8008a6a:	f000 fc29 	bl	80092c0 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 8008a6e:	4a13      	ldr	r2, [pc, #76]	@ (8008abc <main+0x138>)
 8008a70:	2101      	movs	r1, #1
 8008a72:	2001      	movs	r0, #1
 8008a74:	f7ff ff02 	bl	800887c <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8008a78:	4a11      	ldr	r2, [pc, #68]	@ (8008ac0 <main+0x13c>)
 8008a7a:	2101      	movs	r1, #1
 8008a7c:	2002      	movs	r0, #2
 8008a7e:	f7ff fefd 	bl	800887c <lcd_print>
  HAL_Delay(1000);
 8008a82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008a86:	f000 fc1b 	bl	80092c0 <HAL_Delay>
  lcd_clear();
 8008a8a:	f7ff ff23 	bl	80088d4 <lcd_clear>

  eepromKontrol();
 8008a8e:	f7f7 fbd1 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8008a92:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008a96:	f000 fc13 	bl	80092c0 <HAL_Delay>

  backLightTimer = millis;
 8008a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8008ac4 <main+0x140>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8008ac8 <main+0x144>)
 8008aa0:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008aa2:	f7fc ffb5 	bl	8005a10 <mainLoop>
 8008aa6:	e7fc      	b.n	8008aa2 <main+0x11e>
 8008aa8:	40010c00 	.word	0x40010c00
 8008aac:	20001844 	.word	0x20001844
 8008ab0:	200017f0 	.word	0x200017f0
 8008ab4:	40011000 	.word	0x40011000
 8008ab8:	40010800 	.word	0x40010800
 8008abc:	2000009c 	.word	0x2000009c
 8008ac0:	200000b0 	.word	0x200000b0
 8008ac4:	20001044 	.word	0x20001044
 8008ac8:	20001060 	.word	0x20001060

08008acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b090      	sub	sp, #64	@ 0x40
 8008ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008ad2:	f107 0318 	add.w	r3, r7, #24
 8008ad6:	2228      	movs	r2, #40	@ 0x28
 8008ad8:	2100      	movs	r1, #0
 8008ada:	4618      	mov	r0, r3
 8008adc:	f004 f9fa 	bl	800ced4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008ae0:	1d3b      	adds	r3, r7, #4
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	601a      	str	r2, [r3, #0]
 8008ae6:	605a      	str	r2, [r3, #4]
 8008ae8:	609a      	str	r2, [r3, #8]
 8008aea:	60da      	str	r2, [r3, #12]
 8008aec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008aee:	2301      	movs	r3, #1
 8008af0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008af2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008af6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008af8:	2300      	movs	r3, #0
 8008afa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008afc:	2301      	movs	r3, #1
 8008afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008b00:	2302      	movs	r3, #2
 8008b02:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008b04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008b08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008b0a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8008b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008b10:	f107 0318 	add.w	r3, r7, #24
 8008b14:	4618      	mov	r0, r3
 8008b16:	f002 fc0d 	bl	800b334 <HAL_RCC_OscConfig>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d001      	beq.n	8008b24 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008b20:	f000 f9a2 	bl	8008e68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008b24:	230f      	movs	r3, #15
 8008b26:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008b28:	2302      	movs	r3, #2
 8008b2a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008b30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008b36:	2300      	movs	r3, #0
 8008b38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008b3a:	1d3b      	adds	r3, r7, #4
 8008b3c:	2102      	movs	r1, #2
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f002 fe7a 	bl	800b838 <HAL_RCC_ClockConfig>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d001      	beq.n	8008b4e <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008b4a:	f000 f98d 	bl	8008e68 <Error_Handler>
  }
}
 8008b4e:	bf00      	nop
 8008b50:	3740      	adds	r7, #64	@ 0x40
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
	...

08008b58 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008b5c:	4b16      	ldr	r3, [pc, #88]	@ (8008bb8 <MX_CAN_Init+0x60>)
 8008b5e:	4a17      	ldr	r2, [pc, #92]	@ (8008bbc <MX_CAN_Init+0x64>)
 8008b60:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008b62:	4b15      	ldr	r3, [pc, #84]	@ (8008bb8 <MX_CAN_Init+0x60>)
 8008b64:	2210      	movs	r2, #16
 8008b66:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008b68:	4b13      	ldr	r3, [pc, #76]	@ (8008bb8 <MX_CAN_Init+0x60>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008b6e:	4b12      	ldr	r3, [pc, #72]	@ (8008bb8 <MX_CAN_Init+0x60>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008b74:	4b10      	ldr	r3, [pc, #64]	@ (8008bb8 <MX_CAN_Init+0x60>)
 8008b76:	2200      	movs	r2, #0
 8008b78:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8008bb8 <MX_CAN_Init+0x60>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008b80:	4b0d      	ldr	r3, [pc, #52]	@ (8008bb8 <MX_CAN_Init+0x60>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008b86:	4b0c      	ldr	r3, [pc, #48]	@ (8008bb8 <MX_CAN_Init+0x60>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008bb8 <MX_CAN_Init+0x60>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008b92:	4b09      	ldr	r3, [pc, #36]	@ (8008bb8 <MX_CAN_Init+0x60>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008b98:	4b07      	ldr	r3, [pc, #28]	@ (8008bb8 <MX_CAN_Init+0x60>)
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008b9e:	4b06      	ldr	r3, [pc, #24]	@ (8008bb8 <MX_CAN_Init+0x60>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008ba4:	4804      	ldr	r0, [pc, #16]	@ (8008bb8 <MX_CAN_Init+0x60>)
 8008ba6:	f000 fbaf 	bl	8009308 <HAL_CAN_Init>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d001      	beq.n	8008bb4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008bb0:	f000 f95a 	bl	8008e68 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008bb4:	bf00      	nop
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	200017c8 	.word	0x200017c8
 8008bbc:	40006400 	.word	0x40006400

08008bc0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008bc4:	4b12      	ldr	r3, [pc, #72]	@ (8008c10 <MX_I2C1_Init+0x50>)
 8008bc6:	4a13      	ldr	r2, [pc, #76]	@ (8008c14 <MX_I2C1_Init+0x54>)
 8008bc8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008bca:	4b11      	ldr	r3, [pc, #68]	@ (8008c10 <MX_I2C1_Init+0x50>)
 8008bcc:	4a12      	ldr	r2, [pc, #72]	@ (8008c18 <MX_I2C1_Init+0x58>)
 8008bce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8008c10 <MX_I2C1_Init+0x50>)
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8008c10 <MX_I2C1_Init+0x50>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8008c10 <MX_I2C1_Init+0x50>)
 8008bde:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008be2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008be4:	4b0a      	ldr	r3, [pc, #40]	@ (8008c10 <MX_I2C1_Init+0x50>)
 8008be6:	2200      	movs	r2, #0
 8008be8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008bea:	4b09      	ldr	r3, [pc, #36]	@ (8008c10 <MX_I2C1_Init+0x50>)
 8008bec:	2200      	movs	r2, #0
 8008bee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008bf0:	4b07      	ldr	r3, [pc, #28]	@ (8008c10 <MX_I2C1_Init+0x50>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008bf6:	4b06      	ldr	r3, [pc, #24]	@ (8008c10 <MX_I2C1_Init+0x50>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008bfc:	4804      	ldr	r0, [pc, #16]	@ (8008c10 <MX_I2C1_Init+0x50>)
 8008bfe:	f001 f977 	bl	8009ef0 <HAL_I2C_Init>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d001      	beq.n	8008c0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008c08:	f000 f92e 	bl	8008e68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008c0c:	bf00      	nop
 8008c0e:	bd80      	pop	{r7, pc}
 8008c10:	200017f0 	.word	0x200017f0
 8008c14:	40005400 	.word	0x40005400
 8008c18:	00061a80 	.word	0x00061a80

08008c1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b086      	sub	sp, #24
 8008c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008c22:	f107 0308 	add.w	r3, r7, #8
 8008c26:	2200      	movs	r2, #0
 8008c28:	601a      	str	r2, [r3, #0]
 8008c2a:	605a      	str	r2, [r3, #4]
 8008c2c:	609a      	str	r2, [r3, #8]
 8008c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c30:	463b      	mov	r3, r7
 8008c32:	2200      	movs	r2, #0
 8008c34:	601a      	str	r2, [r3, #0]
 8008c36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008c38:	4b1f      	ldr	r3, [pc, #124]	@ (8008cb8 <MX_TIM1_Init+0x9c>)
 8008c3a:	4a20      	ldr	r2, [pc, #128]	@ (8008cbc <MX_TIM1_Init+0xa0>)
 8008c3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8008cb8 <MX_TIM1_Init+0x9c>)
 8008c40:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8008c44:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c46:	4b1c      	ldr	r3, [pc, #112]	@ (8008cb8 <MX_TIM1_Init+0x9c>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8008cb8 <MX_TIM1_Init+0x9c>)
 8008c4e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8008c52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c54:	4b18      	ldr	r3, [pc, #96]	@ (8008cb8 <MX_TIM1_Init+0x9c>)
 8008c56:	2200      	movs	r2, #0
 8008c58:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008c5a:	4b17      	ldr	r3, [pc, #92]	@ (8008cb8 <MX_TIM1_Init+0x9c>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008c60:	4b15      	ldr	r3, [pc, #84]	@ (8008cb8 <MX_TIM1_Init+0x9c>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008c66:	4814      	ldr	r0, [pc, #80]	@ (8008cb8 <MX_TIM1_Init+0x9c>)
 8008c68:	f002 ff74 	bl	800bb54 <HAL_TIM_Base_Init>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d001      	beq.n	8008c76 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008c72:	f000 f8f9 	bl	8008e68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008c76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008c7a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008c7c:	f107 0308 	add.w	r3, r7, #8
 8008c80:	4619      	mov	r1, r3
 8008c82:	480d      	ldr	r0, [pc, #52]	@ (8008cb8 <MX_TIM1_Init+0x9c>)
 8008c84:	f003 f91e 	bl	800bec4 <HAL_TIM_ConfigClockSource>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d001      	beq.n	8008c92 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008c8e:	f000 f8eb 	bl	8008e68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008c92:	2300      	movs	r3, #0
 8008c94:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008c96:	2300      	movs	r3, #0
 8008c98:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008c9a:	463b      	mov	r3, r7
 8008c9c:	4619      	mov	r1, r3
 8008c9e:	4806      	ldr	r0, [pc, #24]	@ (8008cb8 <MX_TIM1_Init+0x9c>)
 8008ca0:	f003 fb0c 	bl	800c2bc <HAL_TIMEx_MasterConfigSynchronization>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d001      	beq.n	8008cae <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008caa:	f000 f8dd 	bl	8008e68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008cae:	bf00      	nop
 8008cb0:	3718      	adds	r7, #24
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	20001844 	.word	0x20001844
 8008cbc:	40012c00 	.word	0x40012c00

08008cc0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008cc4:	4b11      	ldr	r3, [pc, #68]	@ (8008d0c <MX_USART1_UART_Init+0x4c>)
 8008cc6:	4a12      	ldr	r2, [pc, #72]	@ (8008d10 <MX_USART1_UART_Init+0x50>)
 8008cc8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008cca:	4b10      	ldr	r3, [pc, #64]	@ (8008d0c <MX_USART1_UART_Init+0x4c>)
 8008ccc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008cd0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8008d0c <MX_USART1_UART_Init+0x4c>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8008d0c <MX_USART1_UART_Init+0x4c>)
 8008cda:	2200      	movs	r2, #0
 8008cdc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008cde:	4b0b      	ldr	r3, [pc, #44]	@ (8008d0c <MX_USART1_UART_Init+0x4c>)
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008ce4:	4b09      	ldr	r3, [pc, #36]	@ (8008d0c <MX_USART1_UART_Init+0x4c>)
 8008ce6:	220c      	movs	r2, #12
 8008ce8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008cea:	4b08      	ldr	r3, [pc, #32]	@ (8008d0c <MX_USART1_UART_Init+0x4c>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008cf0:	4b06      	ldr	r3, [pc, #24]	@ (8008d0c <MX_USART1_UART_Init+0x4c>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008cf6:	4805      	ldr	r0, [pc, #20]	@ (8008d0c <MX_USART1_UART_Init+0x4c>)
 8008cf8:	f003 fb5e 	bl	800c3b8 <HAL_UART_Init>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008d02:	f000 f8b1 	bl	8008e68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008d06:	bf00      	nop
 8008d08:	bd80      	pop	{r7, pc}
 8008d0a:	bf00      	nop
 8008d0c:	2000188c 	.word	0x2000188c
 8008d10:	40013800 	.word	0x40013800

08008d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b088      	sub	sp, #32
 8008d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d1a:	f107 0310 	add.w	r3, r7, #16
 8008d1e:	2200      	movs	r2, #0
 8008d20:	601a      	str	r2, [r3, #0]
 8008d22:	605a      	str	r2, [r3, #4]
 8008d24:	609a      	str	r2, [r3, #8]
 8008d26:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008d28:	4b4b      	ldr	r3, [pc, #300]	@ (8008e58 <MX_GPIO_Init+0x144>)
 8008d2a:	699b      	ldr	r3, [r3, #24]
 8008d2c:	4a4a      	ldr	r2, [pc, #296]	@ (8008e58 <MX_GPIO_Init+0x144>)
 8008d2e:	f043 0310 	orr.w	r3, r3, #16
 8008d32:	6193      	str	r3, [r2, #24]
 8008d34:	4b48      	ldr	r3, [pc, #288]	@ (8008e58 <MX_GPIO_Init+0x144>)
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	f003 0310 	and.w	r3, r3, #16
 8008d3c:	60fb      	str	r3, [r7, #12]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008d40:	4b45      	ldr	r3, [pc, #276]	@ (8008e58 <MX_GPIO_Init+0x144>)
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	4a44      	ldr	r2, [pc, #272]	@ (8008e58 <MX_GPIO_Init+0x144>)
 8008d46:	f043 0320 	orr.w	r3, r3, #32
 8008d4a:	6193      	str	r3, [r2, #24]
 8008d4c:	4b42      	ldr	r3, [pc, #264]	@ (8008e58 <MX_GPIO_Init+0x144>)
 8008d4e:	699b      	ldr	r3, [r3, #24]
 8008d50:	f003 0320 	and.w	r3, r3, #32
 8008d54:	60bb      	str	r3, [r7, #8]
 8008d56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d58:	4b3f      	ldr	r3, [pc, #252]	@ (8008e58 <MX_GPIO_Init+0x144>)
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	4a3e      	ldr	r2, [pc, #248]	@ (8008e58 <MX_GPIO_Init+0x144>)
 8008d5e:	f043 0304 	orr.w	r3, r3, #4
 8008d62:	6193      	str	r3, [r2, #24]
 8008d64:	4b3c      	ldr	r3, [pc, #240]	@ (8008e58 <MX_GPIO_Init+0x144>)
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	f003 0304 	and.w	r3, r3, #4
 8008d6c:	607b      	str	r3, [r7, #4]
 8008d6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d70:	4b39      	ldr	r3, [pc, #228]	@ (8008e58 <MX_GPIO_Init+0x144>)
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	4a38      	ldr	r2, [pc, #224]	@ (8008e58 <MX_GPIO_Init+0x144>)
 8008d76:	f043 0308 	orr.w	r3, r3, #8
 8008d7a:	6193      	str	r3, [r2, #24]
 8008d7c:	4b36      	ldr	r3, [pc, #216]	@ (8008e58 <MX_GPIO_Init+0x144>)
 8008d7e:	699b      	ldr	r3, [r3, #24]
 8008d80:	f003 0308 	and.w	r3, r3, #8
 8008d84:	603b      	str	r3, [r7, #0]
 8008d86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008d88:	2200      	movs	r2, #0
 8008d8a:	21f0      	movs	r1, #240	@ 0xf0
 8008d8c:	4833      	ldr	r0, [pc, #204]	@ (8008e5c <MX_GPIO_Init+0x148>)
 8008d8e:	f001 f87e 	bl	8009e8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008d92:	2200      	movs	r2, #0
 8008d94:	f241 0130 	movw	r1, #4144	@ 0x1030
 8008d98:	4831      	ldr	r0, [pc, #196]	@ (8008e60 <MX_GPIO_Init+0x14c>)
 8008d9a:	f001 f878 	bl	8009e8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008d9e:	2200      	movs	r2, #0
 8008da0:	f640 4107 	movw	r1, #3079	@ 0xc07
 8008da4:	482f      	ldr	r0, [pc, #188]	@ (8008e64 <MX_GPIO_Init+0x150>)
 8008da6:	f001 f872 	bl	8009e8e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008daa:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 8008dae:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008db0:	2300      	movs	r3, #0
 8008db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008db4:	2300      	movs	r3, #0
 8008db6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008db8:	f107 0310 	add.w	r3, r7, #16
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4828      	ldr	r0, [pc, #160]	@ (8008e60 <MX_GPIO_Init+0x14c>)
 8008dc0:	f000 fdee 	bl	80099a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008dc4:	f248 130f 	movw	r3, #33039	@ 0x810f
 8008dc8:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dd2:	f107 0310 	add.w	r3, r7, #16
 8008dd6:	4619      	mov	r1, r3
 8008dd8:	4820      	ldr	r0, [pc, #128]	@ (8008e5c <MX_GPIO_Init+0x148>)
 8008dda:	f000 fde1 	bl	80099a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008dde:	23f0      	movs	r3, #240	@ 0xf0
 8008de0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008de2:	2301      	movs	r3, #1
 8008de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008dea:	2302      	movs	r3, #2
 8008dec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008dee:	f107 0310 	add.w	r3, r7, #16
 8008df2:	4619      	mov	r1, r3
 8008df4:	4819      	ldr	r0, [pc, #100]	@ (8008e5c <MX_GPIO_Init+0x148>)
 8008df6:	f000 fdd3 	bl	80099a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008dfa:	f241 0330 	movw	r3, #4144	@ 0x1030
 8008dfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e00:	2301      	movs	r3, #1
 8008e02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e04:	2300      	movs	r3, #0
 8008e06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e08:	2302      	movs	r3, #2
 8008e0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e0c:	f107 0310 	add.w	r3, r7, #16
 8008e10:	4619      	mov	r1, r3
 8008e12:	4813      	ldr	r0, [pc, #76]	@ (8008e60 <MX_GPIO_Init+0x14c>)
 8008e14:	f000 fdc4 	bl	80099a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008e18:	f640 4307 	movw	r3, #3079	@ 0xc07
 8008e1c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e22:	2300      	movs	r3, #0
 8008e24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e26:	2302      	movs	r3, #2
 8008e28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e2a:	f107 0310 	add.w	r3, r7, #16
 8008e2e:	4619      	mov	r1, r3
 8008e30:	480c      	ldr	r0, [pc, #48]	@ (8008e64 <MX_GPIO_Init+0x150>)
 8008e32:	f000 fdb5 	bl	80099a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008e36:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8008e3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e40:	2300      	movs	r3, #0
 8008e42:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e44:	f107 0310 	add.w	r3, r7, #16
 8008e48:	4619      	mov	r1, r3
 8008e4a:	4806      	ldr	r0, [pc, #24]	@ (8008e64 <MX_GPIO_Init+0x150>)
 8008e4c:	f000 fda8 	bl	80099a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008e50:	bf00      	nop
 8008e52:	3720      	adds	r7, #32
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	40021000 	.word	0x40021000
 8008e5c:	40010800 	.word	0x40010800
 8008e60:	40011000 	.word	0x40011000
 8008e64:	40010c00 	.word	0x40010c00

08008e68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008e6c:	bf00      	nop
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bc80      	pop	{r7}
 8008e72:	4770      	bx	lr

08008e74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b085      	sub	sp, #20
 8008e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008e7a:	4b15      	ldr	r3, [pc, #84]	@ (8008ed0 <HAL_MspInit+0x5c>)
 8008e7c:	699b      	ldr	r3, [r3, #24]
 8008e7e:	4a14      	ldr	r2, [pc, #80]	@ (8008ed0 <HAL_MspInit+0x5c>)
 8008e80:	f043 0301 	orr.w	r3, r3, #1
 8008e84:	6193      	str	r3, [r2, #24]
 8008e86:	4b12      	ldr	r3, [pc, #72]	@ (8008ed0 <HAL_MspInit+0x5c>)
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	f003 0301 	and.w	r3, r3, #1
 8008e8e:	60bb      	str	r3, [r7, #8]
 8008e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008e92:	4b0f      	ldr	r3, [pc, #60]	@ (8008ed0 <HAL_MspInit+0x5c>)
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	4a0e      	ldr	r2, [pc, #56]	@ (8008ed0 <HAL_MspInit+0x5c>)
 8008e98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e9c:	61d3      	str	r3, [r2, #28]
 8008e9e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ed0 <HAL_MspInit+0x5c>)
 8008ea0:	69db      	ldr	r3, [r3, #28]
 8008ea2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008ea6:	607b      	str	r3, [r7, #4]
 8008ea8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8008ed4 <HAL_MspInit+0x60>)
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	60fb      	str	r3, [r7, #12]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8008eb6:	60fb      	str	r3, [r7, #12]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008ebe:	60fb      	str	r3, [r7, #12]
 8008ec0:	4a04      	ldr	r2, [pc, #16]	@ (8008ed4 <HAL_MspInit+0x60>)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008ec6:	bf00      	nop
 8008ec8:	3714      	adds	r7, #20
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bc80      	pop	{r7}
 8008ece:	4770      	bx	lr
 8008ed0:	40021000 	.word	0x40021000
 8008ed4:	40010000 	.word	0x40010000

08008ed8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b088      	sub	sp, #32
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ee0:	f107 0310 	add.w	r3, r7, #16
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	601a      	str	r2, [r3, #0]
 8008ee8:	605a      	str	r2, [r3, #4]
 8008eea:	609a      	str	r2, [r3, #8]
 8008eec:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a1c      	ldr	r2, [pc, #112]	@ (8008f64 <HAL_CAN_MspInit+0x8c>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d131      	bne.n	8008f5c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8008f68 <HAL_CAN_MspInit+0x90>)
 8008efa:	69db      	ldr	r3, [r3, #28]
 8008efc:	4a1a      	ldr	r2, [pc, #104]	@ (8008f68 <HAL_CAN_MspInit+0x90>)
 8008efe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008f02:	61d3      	str	r3, [r2, #28]
 8008f04:	4b18      	ldr	r3, [pc, #96]	@ (8008f68 <HAL_CAN_MspInit+0x90>)
 8008f06:	69db      	ldr	r3, [r3, #28]
 8008f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f0c:	60fb      	str	r3, [r7, #12]
 8008f0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f10:	4b15      	ldr	r3, [pc, #84]	@ (8008f68 <HAL_CAN_MspInit+0x90>)
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	4a14      	ldr	r2, [pc, #80]	@ (8008f68 <HAL_CAN_MspInit+0x90>)
 8008f16:	f043 0304 	orr.w	r3, r3, #4
 8008f1a:	6193      	str	r3, [r2, #24]
 8008f1c:	4b12      	ldr	r3, [pc, #72]	@ (8008f68 <HAL_CAN_MspInit+0x90>)
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	f003 0304 	and.w	r3, r3, #4
 8008f24:	60bb      	str	r3, [r7, #8]
 8008f26:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008f28:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008f2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f32:	2300      	movs	r3, #0
 8008f34:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f36:	f107 0310 	add.w	r3, r7, #16
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	480b      	ldr	r0, [pc, #44]	@ (8008f6c <HAL_CAN_MspInit+0x94>)
 8008f3e:	f000 fd2f 	bl	80099a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008f42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008f46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f48:	2302      	movs	r3, #2
 8008f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008f4c:	2303      	movs	r3, #3
 8008f4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f50:	f107 0310 	add.w	r3, r7, #16
 8008f54:	4619      	mov	r1, r3
 8008f56:	4805      	ldr	r0, [pc, #20]	@ (8008f6c <HAL_CAN_MspInit+0x94>)
 8008f58:	f000 fd22 	bl	80099a0 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8008f5c:	bf00      	nop
 8008f5e:	3720      	adds	r7, #32
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	40006400 	.word	0x40006400
 8008f68:	40021000 	.word	0x40021000
 8008f6c:	40010800 	.word	0x40010800

08008f70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b088      	sub	sp, #32
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f78:	f107 0310 	add.w	r3, r7, #16
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	601a      	str	r2, [r3, #0]
 8008f80:	605a      	str	r2, [r3, #4]
 8008f82:	609a      	str	r2, [r3, #8]
 8008f84:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a15      	ldr	r2, [pc, #84]	@ (8008fe0 <HAL_I2C_MspInit+0x70>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d123      	bne.n	8008fd8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008f90:	4b14      	ldr	r3, [pc, #80]	@ (8008fe4 <HAL_I2C_MspInit+0x74>)
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	4a13      	ldr	r2, [pc, #76]	@ (8008fe4 <HAL_I2C_MspInit+0x74>)
 8008f96:	f043 0308 	orr.w	r3, r3, #8
 8008f9a:	6193      	str	r3, [r2, #24]
 8008f9c:	4b11      	ldr	r3, [pc, #68]	@ (8008fe4 <HAL_I2C_MspInit+0x74>)
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	f003 0308 	and.w	r3, r3, #8
 8008fa4:	60fb      	str	r3, [r7, #12]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008fa8:	23c0      	movs	r3, #192	@ 0xc0
 8008faa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008fac:	2312      	movs	r3, #18
 8008fae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008fb4:	f107 0310 	add.w	r3, r7, #16
 8008fb8:	4619      	mov	r1, r3
 8008fba:	480b      	ldr	r0, [pc, #44]	@ (8008fe8 <HAL_I2C_MspInit+0x78>)
 8008fbc:	f000 fcf0 	bl	80099a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008fc0:	4b08      	ldr	r3, [pc, #32]	@ (8008fe4 <HAL_I2C_MspInit+0x74>)
 8008fc2:	69db      	ldr	r3, [r3, #28]
 8008fc4:	4a07      	ldr	r2, [pc, #28]	@ (8008fe4 <HAL_I2C_MspInit+0x74>)
 8008fc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008fca:	61d3      	str	r3, [r2, #28]
 8008fcc:	4b05      	ldr	r3, [pc, #20]	@ (8008fe4 <HAL_I2C_MspInit+0x74>)
 8008fce:	69db      	ldr	r3, [r3, #28]
 8008fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008fd4:	60bb      	str	r3, [r7, #8]
 8008fd6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8008fd8:	bf00      	nop
 8008fda:	3720      	adds	r7, #32
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}
 8008fe0:	40005400 	.word	0x40005400
 8008fe4:	40021000 	.word	0x40021000
 8008fe8:	40010c00 	.word	0x40010c00

08008fec <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a0a      	ldr	r2, [pc, #40]	@ (8009024 <HAL_I2C_MspDeInit+0x38>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d10d      	bne.n	800901a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008ffe:	4b0a      	ldr	r3, [pc, #40]	@ (8009028 <HAL_I2C_MspDeInit+0x3c>)
 8009000:	69db      	ldr	r3, [r3, #28]
 8009002:	4a09      	ldr	r2, [pc, #36]	@ (8009028 <HAL_I2C_MspDeInit+0x3c>)
 8009004:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009008:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800900a:	2140      	movs	r1, #64	@ 0x40
 800900c:	4807      	ldr	r0, [pc, #28]	@ (800902c <HAL_I2C_MspDeInit+0x40>)
 800900e:	f000 fe5b 	bl	8009cc8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8009012:	2180      	movs	r1, #128	@ 0x80
 8009014:	4805      	ldr	r0, [pc, #20]	@ (800902c <HAL_I2C_MspDeInit+0x40>)
 8009016:	f000 fe57 	bl	8009cc8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800901a:	bf00      	nop
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	40005400 	.word	0x40005400
 8009028:	40021000 	.word	0x40021000
 800902c:	40010c00 	.word	0x40010c00

08009030 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a0d      	ldr	r2, [pc, #52]	@ (8009074 <HAL_TIM_Base_MspInit+0x44>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d113      	bne.n	800906a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009042:	4b0d      	ldr	r3, [pc, #52]	@ (8009078 <HAL_TIM_Base_MspInit+0x48>)
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	4a0c      	ldr	r2, [pc, #48]	@ (8009078 <HAL_TIM_Base_MspInit+0x48>)
 8009048:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800904c:	6193      	str	r3, [r2, #24]
 800904e:	4b0a      	ldr	r3, [pc, #40]	@ (8009078 <HAL_TIM_Base_MspInit+0x48>)
 8009050:	699b      	ldr	r3, [r3, #24]
 8009052:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009056:	60fb      	str	r3, [r7, #12]
 8009058:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800905a:	2200      	movs	r2, #0
 800905c:	2100      	movs	r1, #0
 800905e:	2019      	movs	r0, #25
 8009060:	f000 fb25 	bl	80096ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8009064:	2019      	movs	r0, #25
 8009066:	f000 fb3e 	bl	80096e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800906a:	bf00      	nop
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	40012c00 	.word	0x40012c00
 8009078:	40021000 	.word	0x40021000

0800907c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b088      	sub	sp, #32
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009084:	f107 0310 	add.w	r3, r7, #16
 8009088:	2200      	movs	r2, #0
 800908a:	601a      	str	r2, [r3, #0]
 800908c:	605a      	str	r2, [r3, #4]
 800908e:	609a      	str	r2, [r3, #8]
 8009090:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a20      	ldr	r2, [pc, #128]	@ (8009118 <HAL_UART_MspInit+0x9c>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d139      	bne.n	8009110 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800909c:	4b1f      	ldr	r3, [pc, #124]	@ (800911c <HAL_UART_MspInit+0xa0>)
 800909e:	699b      	ldr	r3, [r3, #24]
 80090a0:	4a1e      	ldr	r2, [pc, #120]	@ (800911c <HAL_UART_MspInit+0xa0>)
 80090a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80090a6:	6193      	str	r3, [r2, #24]
 80090a8:	4b1c      	ldr	r3, [pc, #112]	@ (800911c <HAL_UART_MspInit+0xa0>)
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090b0:	60fb      	str	r3, [r7, #12]
 80090b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090b4:	4b19      	ldr	r3, [pc, #100]	@ (800911c <HAL_UART_MspInit+0xa0>)
 80090b6:	699b      	ldr	r3, [r3, #24]
 80090b8:	4a18      	ldr	r2, [pc, #96]	@ (800911c <HAL_UART_MspInit+0xa0>)
 80090ba:	f043 0304 	orr.w	r3, r3, #4
 80090be:	6193      	str	r3, [r2, #24]
 80090c0:	4b16      	ldr	r3, [pc, #88]	@ (800911c <HAL_UART_MspInit+0xa0>)
 80090c2:	699b      	ldr	r3, [r3, #24]
 80090c4:	f003 0304 	and.w	r3, r3, #4
 80090c8:	60bb      	str	r3, [r7, #8]
 80090ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80090cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80090d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090d2:	2302      	movs	r3, #2
 80090d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80090d6:	2303      	movs	r3, #3
 80090d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090da:	f107 0310 	add.w	r3, r7, #16
 80090de:	4619      	mov	r1, r3
 80090e0:	480f      	ldr	r0, [pc, #60]	@ (8009120 <HAL_UART_MspInit+0xa4>)
 80090e2:	f000 fc5d 	bl	80099a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80090e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80090ec:	2300      	movs	r3, #0
 80090ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090f0:	2300      	movs	r3, #0
 80090f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090f4:	f107 0310 	add.w	r3, r7, #16
 80090f8:	4619      	mov	r1, r3
 80090fa:	4809      	ldr	r0, [pc, #36]	@ (8009120 <HAL_UART_MspInit+0xa4>)
 80090fc:	f000 fc50 	bl	80099a0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009100:	2200      	movs	r2, #0
 8009102:	2100      	movs	r1, #0
 8009104:	2025      	movs	r0, #37	@ 0x25
 8009106:	f000 fad2 	bl	80096ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800910a:	2025      	movs	r0, #37	@ 0x25
 800910c:	f000 faeb 	bl	80096e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8009110:	bf00      	nop
 8009112:	3720      	adds	r7, #32
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	40013800 	.word	0x40013800
 800911c:	40021000 	.word	0x40021000
 8009120:	40010800 	.word	0x40010800

08009124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009124:	b480      	push	{r7}
 8009126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009128:	bf00      	nop
 800912a:	e7fd      	b.n	8009128 <NMI_Handler+0x4>

0800912c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800912c:	b480      	push	{r7}
 800912e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009130:	bf00      	nop
 8009132:	e7fd      	b.n	8009130 <HardFault_Handler+0x4>

08009134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009134:	b480      	push	{r7}
 8009136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009138:	bf00      	nop
 800913a:	e7fd      	b.n	8009138 <MemManage_Handler+0x4>

0800913c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800913c:	b480      	push	{r7}
 800913e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009140:	bf00      	nop
 8009142:	e7fd      	b.n	8009140 <BusFault_Handler+0x4>

08009144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009144:	b480      	push	{r7}
 8009146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009148:	bf00      	nop
 800914a:	e7fd      	b.n	8009148 <UsageFault_Handler+0x4>

0800914c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800914c:	b480      	push	{r7}
 800914e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009150:	bf00      	nop
 8009152:	46bd      	mov	sp, r7
 8009154:	bc80      	pop	{r7}
 8009156:	4770      	bx	lr

08009158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009158:	b480      	push	{r7}
 800915a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800915c:	bf00      	nop
 800915e:	46bd      	mov	sp, r7
 8009160:	bc80      	pop	{r7}
 8009162:	4770      	bx	lr

08009164 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009164:	b480      	push	{r7}
 8009166:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009168:	bf00      	nop
 800916a:	46bd      	mov	sp, r7
 800916c:	bc80      	pop	{r7}
 800916e:	4770      	bx	lr

08009170 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009174:	f000 f888 	bl	8009288 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009178:	bf00      	nop
 800917a:	bd80      	pop	{r7, pc}

0800917c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009180:	4802      	ldr	r0, [pc, #8]	@ (800918c <TIM1_UP_IRQHandler+0x10>)
 8009182:	f002 fd97 	bl	800bcb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8009186:	bf00      	nop
 8009188:	bd80      	pop	{r7, pc}
 800918a:	bf00      	nop
 800918c:	20001844 	.word	0x20001844

08009190 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009194:	4802      	ldr	r0, [pc, #8]	@ (80091a0 <USART1_IRQHandler+0x10>)
 8009196:	f003 f95f 	bl	800c458 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800919a:	bf00      	nop
 800919c:	bd80      	pop	{r7, pc}
 800919e:	bf00      	nop
 80091a0:	2000188c 	.word	0x2000188c

080091a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80091a4:	b480      	push	{r7}
 80091a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80091a8:	bf00      	nop
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bc80      	pop	{r7}
 80091ae:	4770      	bx	lr

080091b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80091b0:	480c      	ldr	r0, [pc, #48]	@ (80091e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80091b2:	490d      	ldr	r1, [pc, #52]	@ (80091e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80091b4:	4a0d      	ldr	r2, [pc, #52]	@ (80091ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80091b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80091b8:	e002      	b.n	80091c0 <LoopCopyDataInit>

080091ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80091ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80091bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80091be:	3304      	adds	r3, #4

080091c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80091c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80091c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80091c4:	d3f9      	bcc.n	80091ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80091c6:	4a0a      	ldr	r2, [pc, #40]	@ (80091f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80091c8:	4c0a      	ldr	r4, [pc, #40]	@ (80091f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80091ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80091cc:	e001      	b.n	80091d2 <LoopFillZerobss>

080091ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80091ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80091d0:	3204      	adds	r2, #4

080091d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80091d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80091d4:	d3fb      	bcc.n	80091ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80091d6:	f7ff ffe5 	bl	80091a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80091da:	f003 fe83 	bl	800cee4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80091de:	f7ff fbd1 	bl	8008984 <main>
  bx lr
 80091e2:	4770      	bx	lr
  ldr r0, =_sdata
 80091e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80091e8:	20000f80 	.word	0x20000f80
  ldr r2, =_sidata
 80091ec:	0800d160 	.word	0x0800d160
  ldr r2, =_sbss
 80091f0:	20000f80 	.word	0x20000f80
  ldr r4, =_ebss
 80091f4:	200018d8 	.word	0x200018d8

080091f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80091f8:	e7fe      	b.n	80091f8 <ADC1_2_IRQHandler>
	...

080091fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009200:	4b08      	ldr	r3, [pc, #32]	@ (8009224 <HAL_Init+0x28>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a07      	ldr	r2, [pc, #28]	@ (8009224 <HAL_Init+0x28>)
 8009206:	f043 0310 	orr.w	r3, r3, #16
 800920a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800920c:	2003      	movs	r0, #3
 800920e:	f000 fa43 	bl	8009698 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009212:	200f      	movs	r0, #15
 8009214:	f000 f808 	bl	8009228 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009218:	f7ff fe2c 	bl	8008e74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	40022000 	.word	0x40022000

08009228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009230:	4b12      	ldr	r3, [pc, #72]	@ (800927c <HAL_InitTick+0x54>)
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	4b12      	ldr	r3, [pc, #72]	@ (8009280 <HAL_InitTick+0x58>)
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	4619      	mov	r1, r3
 800923a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800923e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009242:	fbb2 f3f3 	udiv	r3, r2, r3
 8009246:	4618      	mov	r0, r3
 8009248:	f000 fa5b 	bl	8009702 <HAL_SYSTICK_Config>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d001      	beq.n	8009256 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009252:	2301      	movs	r3, #1
 8009254:	e00e      	b.n	8009274 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2b0f      	cmp	r3, #15
 800925a:	d80a      	bhi.n	8009272 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800925c:	2200      	movs	r2, #0
 800925e:	6879      	ldr	r1, [r7, #4]
 8009260:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009264:	f000 fa23 	bl	80096ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009268:	4a06      	ldr	r2, [pc, #24]	@ (8009284 <HAL_InitTick+0x5c>)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	e000      	b.n	8009274 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
}
 8009274:	4618      	mov	r0, r3
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}
 800927c:	20000f74 	.word	0x20000f74
 8009280:	20000f7c 	.word	0x20000f7c
 8009284:	20000f78 	.word	0x20000f78

08009288 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009288:	b480      	push	{r7}
 800928a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800928c:	4b05      	ldr	r3, [pc, #20]	@ (80092a4 <HAL_IncTick+0x1c>)
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	461a      	mov	r2, r3
 8009292:	4b05      	ldr	r3, [pc, #20]	@ (80092a8 <HAL_IncTick+0x20>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4413      	add	r3, r2
 8009298:	4a03      	ldr	r2, [pc, #12]	@ (80092a8 <HAL_IncTick+0x20>)
 800929a:	6013      	str	r3, [r2, #0]
}
 800929c:	bf00      	nop
 800929e:	46bd      	mov	sp, r7
 80092a0:	bc80      	pop	{r7}
 80092a2:	4770      	bx	lr
 80092a4:	20000f7c 	.word	0x20000f7c
 80092a8:	200018d4 	.word	0x200018d4

080092ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80092ac:	b480      	push	{r7}
 80092ae:	af00      	add	r7, sp, #0
  return uwTick;
 80092b0:	4b02      	ldr	r3, [pc, #8]	@ (80092bc <HAL_GetTick+0x10>)
 80092b2:	681b      	ldr	r3, [r3, #0]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	46bd      	mov	sp, r7
 80092b8:	bc80      	pop	{r7}
 80092ba:	4770      	bx	lr
 80092bc:	200018d4 	.word	0x200018d4

080092c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80092c8:	f7ff fff0 	bl	80092ac <HAL_GetTick>
 80092cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092d8:	d005      	beq.n	80092e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80092da:	4b0a      	ldr	r3, [pc, #40]	@ (8009304 <HAL_Delay+0x44>)
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	461a      	mov	r2, r3
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4413      	add	r3, r2
 80092e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80092e6:	bf00      	nop
 80092e8:	f7ff ffe0 	bl	80092ac <HAL_GetTick>
 80092ec:	4602      	mov	r2, r0
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	68fa      	ldr	r2, [r7, #12]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d8f7      	bhi.n	80092e8 <HAL_Delay+0x28>
  {
  }
}
 80092f8:	bf00      	nop
 80092fa:	bf00      	nop
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	20000f7c 	.word	0x20000f7c

08009308 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b084      	sub	sp, #16
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d101      	bne.n	800931a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e0ed      	b.n	80094f6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009320:	b2db      	uxtb	r3, r3
 8009322:	2b00      	cmp	r3, #0
 8009324:	d102      	bne.n	800932c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f7ff fdd6 	bl	8008ed8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f042 0201 	orr.w	r2, r2, #1
 800933a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800933c:	f7ff ffb6 	bl	80092ac <HAL_GetTick>
 8009340:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009342:	e012      	b.n	800936a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009344:	f7ff ffb2 	bl	80092ac <HAL_GetTick>
 8009348:	4602      	mov	r2, r0
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	1ad3      	subs	r3, r2, r3
 800934e:	2b0a      	cmp	r3, #10
 8009350:	d90b      	bls.n	800936a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009356:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2205      	movs	r2, #5
 8009362:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e0c5      	b.n	80094f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	f003 0301 	and.w	r3, r3, #1
 8009374:	2b00      	cmp	r3, #0
 8009376:	d0e5      	beq.n	8009344 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f022 0202 	bic.w	r2, r2, #2
 8009386:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009388:	f7ff ff90 	bl	80092ac <HAL_GetTick>
 800938c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800938e:	e012      	b.n	80093b6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009390:	f7ff ff8c 	bl	80092ac <HAL_GetTick>
 8009394:	4602      	mov	r2, r0
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	2b0a      	cmp	r3, #10
 800939c:	d90b      	bls.n	80093b6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093a2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2205      	movs	r2, #5
 80093ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e09f      	b.n	80094f6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	f003 0302 	and.w	r3, r3, #2
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d1e5      	bne.n	8009390 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	7e1b      	ldrb	r3, [r3, #24]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d108      	bne.n	80093de <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	681a      	ldr	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80093da:	601a      	str	r2, [r3, #0]
 80093dc:	e007      	b.n	80093ee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80093ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	7e5b      	ldrb	r3, [r3, #25]
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d108      	bne.n	8009408 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009404:	601a      	str	r2, [r3, #0]
 8009406:	e007      	b.n	8009418 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009416:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	7e9b      	ldrb	r3, [r3, #26]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d108      	bne.n	8009432 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f042 0220 	orr.w	r2, r2, #32
 800942e:	601a      	str	r2, [r3, #0]
 8009430:	e007      	b.n	8009442 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f022 0220 	bic.w	r2, r2, #32
 8009440:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	7edb      	ldrb	r3, [r3, #27]
 8009446:	2b01      	cmp	r3, #1
 8009448:	d108      	bne.n	800945c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f022 0210 	bic.w	r2, r2, #16
 8009458:	601a      	str	r2, [r3, #0]
 800945a:	e007      	b.n	800946c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f042 0210 	orr.w	r2, r2, #16
 800946a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	7f1b      	ldrb	r3, [r3, #28]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d108      	bne.n	8009486 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681a      	ldr	r2, [r3, #0]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f042 0208 	orr.w	r2, r2, #8
 8009482:	601a      	str	r2, [r3, #0]
 8009484:	e007      	b.n	8009496 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	681a      	ldr	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f022 0208 	bic.w	r2, r2, #8
 8009494:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	7f5b      	ldrb	r3, [r3, #29]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d108      	bne.n	80094b0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f042 0204 	orr.w	r2, r2, #4
 80094ac:	601a      	str	r2, [r3, #0]
 80094ae:	e007      	b.n	80094c0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	681a      	ldr	r2, [r3, #0]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f022 0204 	bic.w	r2, r2, #4
 80094be:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	689a      	ldr	r2, [r3, #8]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	68db      	ldr	r3, [r3, #12]
 80094c8:	431a      	orrs	r2, r3
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	691b      	ldr	r3, [r3, #16]
 80094ce:	431a      	orrs	r2, r3
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	695b      	ldr	r3, [r3, #20]
 80094d4:	ea42 0103 	orr.w	r1, r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	1e5a      	subs	r2, r3, #1
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	430a      	orrs	r2, r1
 80094e4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
	...

08009500 <__NVIC_SetPriorityGrouping>:
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f003 0307 	and.w	r3, r3, #7
 800950e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009510:	4b0c      	ldr	r3, [pc, #48]	@ (8009544 <__NVIC_SetPriorityGrouping+0x44>)
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009516:	68ba      	ldr	r2, [r7, #8]
 8009518:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800951c:	4013      	ands	r3, r2
 800951e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009528:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800952c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009532:	4a04      	ldr	r2, [pc, #16]	@ (8009544 <__NVIC_SetPriorityGrouping+0x44>)
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	60d3      	str	r3, [r2, #12]
}
 8009538:	bf00      	nop
 800953a:	3714      	adds	r7, #20
 800953c:	46bd      	mov	sp, r7
 800953e:	bc80      	pop	{r7}
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	e000ed00 	.word	0xe000ed00

08009548 <__NVIC_GetPriorityGrouping>:
{
 8009548:	b480      	push	{r7}
 800954a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800954c:	4b04      	ldr	r3, [pc, #16]	@ (8009560 <__NVIC_GetPriorityGrouping+0x18>)
 800954e:	68db      	ldr	r3, [r3, #12]
 8009550:	0a1b      	lsrs	r3, r3, #8
 8009552:	f003 0307 	and.w	r3, r3, #7
}
 8009556:	4618      	mov	r0, r3
 8009558:	46bd      	mov	sp, r7
 800955a:	bc80      	pop	{r7}
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	e000ed00 	.word	0xe000ed00

08009564 <__NVIC_EnableIRQ>:
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	4603      	mov	r3, r0
 800956c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800956e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009572:	2b00      	cmp	r3, #0
 8009574:	db0b      	blt.n	800958e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009576:	79fb      	ldrb	r3, [r7, #7]
 8009578:	f003 021f 	and.w	r2, r3, #31
 800957c:	4906      	ldr	r1, [pc, #24]	@ (8009598 <__NVIC_EnableIRQ+0x34>)
 800957e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009582:	095b      	lsrs	r3, r3, #5
 8009584:	2001      	movs	r0, #1
 8009586:	fa00 f202 	lsl.w	r2, r0, r2
 800958a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800958e:	bf00      	nop
 8009590:	370c      	adds	r7, #12
 8009592:	46bd      	mov	sp, r7
 8009594:	bc80      	pop	{r7}
 8009596:	4770      	bx	lr
 8009598:	e000e100 	.word	0xe000e100

0800959c <__NVIC_SetPriority>:
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	4603      	mov	r3, r0
 80095a4:	6039      	str	r1, [r7, #0]
 80095a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80095a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	db0a      	blt.n	80095c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	b2da      	uxtb	r2, r3
 80095b4:	490c      	ldr	r1, [pc, #48]	@ (80095e8 <__NVIC_SetPriority+0x4c>)
 80095b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095ba:	0112      	lsls	r2, r2, #4
 80095bc:	b2d2      	uxtb	r2, r2
 80095be:	440b      	add	r3, r1
 80095c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80095c4:	e00a      	b.n	80095dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	b2da      	uxtb	r2, r3
 80095ca:	4908      	ldr	r1, [pc, #32]	@ (80095ec <__NVIC_SetPriority+0x50>)
 80095cc:	79fb      	ldrb	r3, [r7, #7]
 80095ce:	f003 030f 	and.w	r3, r3, #15
 80095d2:	3b04      	subs	r3, #4
 80095d4:	0112      	lsls	r2, r2, #4
 80095d6:	b2d2      	uxtb	r2, r2
 80095d8:	440b      	add	r3, r1
 80095da:	761a      	strb	r2, [r3, #24]
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bc80      	pop	{r7}
 80095e4:	4770      	bx	lr
 80095e6:	bf00      	nop
 80095e8:	e000e100 	.word	0xe000e100
 80095ec:	e000ed00 	.word	0xe000ed00

080095f0 <NVIC_EncodePriority>:
{
 80095f0:	b480      	push	{r7}
 80095f2:	b089      	sub	sp, #36	@ 0x24
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f003 0307 	and.w	r3, r3, #7
 8009602:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	f1c3 0307 	rsb	r3, r3, #7
 800960a:	2b04      	cmp	r3, #4
 800960c:	bf28      	it	cs
 800960e:	2304      	movcs	r3, #4
 8009610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009612:	69fb      	ldr	r3, [r7, #28]
 8009614:	3304      	adds	r3, #4
 8009616:	2b06      	cmp	r3, #6
 8009618:	d902      	bls.n	8009620 <NVIC_EncodePriority+0x30>
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	3b03      	subs	r3, #3
 800961e:	e000      	b.n	8009622 <NVIC_EncodePriority+0x32>
 8009620:	2300      	movs	r3, #0
 8009622:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009624:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009628:	69bb      	ldr	r3, [r7, #24]
 800962a:	fa02 f303 	lsl.w	r3, r2, r3
 800962e:	43da      	mvns	r2, r3
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	401a      	ands	r2, r3
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009638:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	fa01 f303 	lsl.w	r3, r1, r3
 8009642:	43d9      	mvns	r1, r3
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009648:	4313      	orrs	r3, r2
}
 800964a:	4618      	mov	r0, r3
 800964c:	3724      	adds	r7, #36	@ 0x24
 800964e:	46bd      	mov	sp, r7
 8009650:	bc80      	pop	{r7}
 8009652:	4770      	bx	lr

08009654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	3b01      	subs	r3, #1
 8009660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009664:	d301      	bcc.n	800966a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009666:	2301      	movs	r3, #1
 8009668:	e00f      	b.n	800968a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800966a:	4a0a      	ldr	r2, [pc, #40]	@ (8009694 <SysTick_Config+0x40>)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	3b01      	subs	r3, #1
 8009670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009672:	210f      	movs	r1, #15
 8009674:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009678:	f7ff ff90 	bl	800959c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800967c:	4b05      	ldr	r3, [pc, #20]	@ (8009694 <SysTick_Config+0x40>)
 800967e:	2200      	movs	r2, #0
 8009680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009682:	4b04      	ldr	r3, [pc, #16]	@ (8009694 <SysTick_Config+0x40>)
 8009684:	2207      	movs	r2, #7
 8009686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009688:	2300      	movs	r3, #0
}
 800968a:	4618      	mov	r0, r3
 800968c:	3708      	adds	r7, #8
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
 8009692:	bf00      	nop
 8009694:	e000e010 	.word	0xe000e010

08009698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f7ff ff2d 	bl	8009500 <__NVIC_SetPriorityGrouping>
}
 80096a6:	bf00      	nop
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b086      	sub	sp, #24
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	4603      	mov	r3, r0
 80096b6:	60b9      	str	r1, [r7, #8]
 80096b8:	607a      	str	r2, [r7, #4]
 80096ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80096bc:	2300      	movs	r3, #0
 80096be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80096c0:	f7ff ff42 	bl	8009548 <__NVIC_GetPriorityGrouping>
 80096c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	68b9      	ldr	r1, [r7, #8]
 80096ca:	6978      	ldr	r0, [r7, #20]
 80096cc:	f7ff ff90 	bl	80095f0 <NVIC_EncodePriority>
 80096d0:	4602      	mov	r2, r0
 80096d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096d6:	4611      	mov	r1, r2
 80096d8:	4618      	mov	r0, r3
 80096da:	f7ff ff5f 	bl	800959c <__NVIC_SetPriority>
}
 80096de:	bf00      	nop
 80096e0:	3718      	adds	r7, #24
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b082      	sub	sp, #8
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	4603      	mov	r3, r0
 80096ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80096f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7ff ff35 	bl	8009564 <__NVIC_EnableIRQ>
}
 80096fa:	bf00      	nop
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b082      	sub	sp, #8
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f7ff ffa2 	bl	8009654 <SysTick_Config>
 8009710:	4603      	mov	r3, r0
}
 8009712:	4618      	mov	r0, r3
 8009714:	3708      	adds	r7, #8
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}

0800971a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800971a:	b480      	push	{r7}
 800971c:	b085      	sub	sp, #20
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800972c:	b2db      	uxtb	r3, r3
 800972e:	2b02      	cmp	r3, #2
 8009730:	d008      	beq.n	8009744 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2204      	movs	r2, #4
 8009736:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2200      	movs	r2, #0
 800973c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	e020      	b.n	8009786 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f022 020e 	bic.w	r2, r2, #14
 8009752:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	681a      	ldr	r2, [r3, #0]
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	f022 0201 	bic.w	r2, r2, #1
 8009762:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800976c:	2101      	movs	r1, #1
 800976e:	fa01 f202 	lsl.w	r2, r1, r2
 8009772:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2201      	movs	r2, #1
 8009778:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009784:	7bfb      	ldrb	r3, [r7, #15]
}
 8009786:	4618      	mov	r0, r3
 8009788:	3714      	adds	r7, #20
 800978a:	46bd      	mov	sp, r7
 800978c:	bc80      	pop	{r7}
 800978e:	4770      	bx	lr

08009790 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009798:	2300      	movs	r3, #0
 800979a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d005      	beq.n	80097b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2204      	movs	r2, #4
 80097ac:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	73fb      	strb	r3, [r7, #15]
 80097b2:	e0d6      	b.n	8009962 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	681a      	ldr	r2, [r3, #0]
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f022 020e 	bic.w	r2, r2, #14
 80097c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f022 0201 	bic.w	r2, r2, #1
 80097d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	461a      	mov	r2, r3
 80097da:	4b64      	ldr	r3, [pc, #400]	@ (800996c <HAL_DMA_Abort_IT+0x1dc>)
 80097dc:	429a      	cmp	r2, r3
 80097de:	d958      	bls.n	8009892 <HAL_DMA_Abort_IT+0x102>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a62      	ldr	r2, [pc, #392]	@ (8009970 <HAL_DMA_Abort_IT+0x1e0>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d04f      	beq.n	800988a <HAL_DMA_Abort_IT+0xfa>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a61      	ldr	r2, [pc, #388]	@ (8009974 <HAL_DMA_Abort_IT+0x1e4>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d048      	beq.n	8009886 <HAL_DMA_Abort_IT+0xf6>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a5f      	ldr	r2, [pc, #380]	@ (8009978 <HAL_DMA_Abort_IT+0x1e8>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d040      	beq.n	8009880 <HAL_DMA_Abort_IT+0xf0>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a5e      	ldr	r2, [pc, #376]	@ (800997c <HAL_DMA_Abort_IT+0x1ec>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d038      	beq.n	800987a <HAL_DMA_Abort_IT+0xea>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a5c      	ldr	r2, [pc, #368]	@ (8009980 <HAL_DMA_Abort_IT+0x1f0>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d030      	beq.n	8009874 <HAL_DMA_Abort_IT+0xe4>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a5b      	ldr	r2, [pc, #364]	@ (8009984 <HAL_DMA_Abort_IT+0x1f4>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d028      	beq.n	800986e <HAL_DMA_Abort_IT+0xde>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a52      	ldr	r2, [pc, #328]	@ (800996c <HAL_DMA_Abort_IT+0x1dc>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d020      	beq.n	8009868 <HAL_DMA_Abort_IT+0xd8>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a57      	ldr	r2, [pc, #348]	@ (8009988 <HAL_DMA_Abort_IT+0x1f8>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d019      	beq.n	8009864 <HAL_DMA_Abort_IT+0xd4>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a55      	ldr	r2, [pc, #340]	@ (800998c <HAL_DMA_Abort_IT+0x1fc>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d012      	beq.n	8009860 <HAL_DMA_Abort_IT+0xd0>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a54      	ldr	r2, [pc, #336]	@ (8009990 <HAL_DMA_Abort_IT+0x200>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d00a      	beq.n	800985a <HAL_DMA_Abort_IT+0xca>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a52      	ldr	r2, [pc, #328]	@ (8009994 <HAL_DMA_Abort_IT+0x204>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d102      	bne.n	8009854 <HAL_DMA_Abort_IT+0xc4>
 800984e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009852:	e01b      	b.n	800988c <HAL_DMA_Abort_IT+0xfc>
 8009854:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009858:	e018      	b.n	800988c <HAL_DMA_Abort_IT+0xfc>
 800985a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800985e:	e015      	b.n	800988c <HAL_DMA_Abort_IT+0xfc>
 8009860:	2310      	movs	r3, #16
 8009862:	e013      	b.n	800988c <HAL_DMA_Abort_IT+0xfc>
 8009864:	2301      	movs	r3, #1
 8009866:	e011      	b.n	800988c <HAL_DMA_Abort_IT+0xfc>
 8009868:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800986c:	e00e      	b.n	800988c <HAL_DMA_Abort_IT+0xfc>
 800986e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009872:	e00b      	b.n	800988c <HAL_DMA_Abort_IT+0xfc>
 8009874:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009878:	e008      	b.n	800988c <HAL_DMA_Abort_IT+0xfc>
 800987a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800987e:	e005      	b.n	800988c <HAL_DMA_Abort_IT+0xfc>
 8009880:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009884:	e002      	b.n	800988c <HAL_DMA_Abort_IT+0xfc>
 8009886:	2310      	movs	r3, #16
 8009888:	e000      	b.n	800988c <HAL_DMA_Abort_IT+0xfc>
 800988a:	2301      	movs	r3, #1
 800988c:	4a42      	ldr	r2, [pc, #264]	@ (8009998 <HAL_DMA_Abort_IT+0x208>)
 800988e:	6053      	str	r3, [r2, #4]
 8009890:	e057      	b.n	8009942 <HAL_DMA_Abort_IT+0x1b2>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a36      	ldr	r2, [pc, #216]	@ (8009970 <HAL_DMA_Abort_IT+0x1e0>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d04f      	beq.n	800993c <HAL_DMA_Abort_IT+0x1ac>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a34      	ldr	r2, [pc, #208]	@ (8009974 <HAL_DMA_Abort_IT+0x1e4>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d048      	beq.n	8009938 <HAL_DMA_Abort_IT+0x1a8>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a33      	ldr	r2, [pc, #204]	@ (8009978 <HAL_DMA_Abort_IT+0x1e8>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d040      	beq.n	8009932 <HAL_DMA_Abort_IT+0x1a2>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a31      	ldr	r2, [pc, #196]	@ (800997c <HAL_DMA_Abort_IT+0x1ec>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d038      	beq.n	800992c <HAL_DMA_Abort_IT+0x19c>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4a30      	ldr	r2, [pc, #192]	@ (8009980 <HAL_DMA_Abort_IT+0x1f0>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d030      	beq.n	8009926 <HAL_DMA_Abort_IT+0x196>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	4a2e      	ldr	r2, [pc, #184]	@ (8009984 <HAL_DMA_Abort_IT+0x1f4>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d028      	beq.n	8009920 <HAL_DMA_Abort_IT+0x190>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a26      	ldr	r2, [pc, #152]	@ (800996c <HAL_DMA_Abort_IT+0x1dc>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d020      	beq.n	800991a <HAL_DMA_Abort_IT+0x18a>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a2a      	ldr	r2, [pc, #168]	@ (8009988 <HAL_DMA_Abort_IT+0x1f8>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d019      	beq.n	8009916 <HAL_DMA_Abort_IT+0x186>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a29      	ldr	r2, [pc, #164]	@ (800998c <HAL_DMA_Abort_IT+0x1fc>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d012      	beq.n	8009912 <HAL_DMA_Abort_IT+0x182>
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4a27      	ldr	r2, [pc, #156]	@ (8009990 <HAL_DMA_Abort_IT+0x200>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d00a      	beq.n	800990c <HAL_DMA_Abort_IT+0x17c>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a26      	ldr	r2, [pc, #152]	@ (8009994 <HAL_DMA_Abort_IT+0x204>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d102      	bne.n	8009906 <HAL_DMA_Abort_IT+0x176>
 8009900:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009904:	e01b      	b.n	800993e <HAL_DMA_Abort_IT+0x1ae>
 8009906:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800990a:	e018      	b.n	800993e <HAL_DMA_Abort_IT+0x1ae>
 800990c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009910:	e015      	b.n	800993e <HAL_DMA_Abort_IT+0x1ae>
 8009912:	2310      	movs	r3, #16
 8009914:	e013      	b.n	800993e <HAL_DMA_Abort_IT+0x1ae>
 8009916:	2301      	movs	r3, #1
 8009918:	e011      	b.n	800993e <HAL_DMA_Abort_IT+0x1ae>
 800991a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800991e:	e00e      	b.n	800993e <HAL_DMA_Abort_IT+0x1ae>
 8009920:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009924:	e00b      	b.n	800993e <HAL_DMA_Abort_IT+0x1ae>
 8009926:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800992a:	e008      	b.n	800993e <HAL_DMA_Abort_IT+0x1ae>
 800992c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009930:	e005      	b.n	800993e <HAL_DMA_Abort_IT+0x1ae>
 8009932:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009936:	e002      	b.n	800993e <HAL_DMA_Abort_IT+0x1ae>
 8009938:	2310      	movs	r3, #16
 800993a:	e000      	b.n	800993e <HAL_DMA_Abort_IT+0x1ae>
 800993c:	2301      	movs	r3, #1
 800993e:	4a17      	ldr	r2, [pc, #92]	@ (800999c <HAL_DMA_Abort_IT+0x20c>)
 8009940:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009956:	2b00      	cmp	r3, #0
 8009958:	d003      	beq.n	8009962 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	4798      	blx	r3
    } 
  }
  return status;
 8009962:	7bfb      	ldrb	r3, [r7, #15]
}
 8009964:	4618      	mov	r0, r3
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	40020080 	.word	0x40020080
 8009970:	40020008 	.word	0x40020008
 8009974:	4002001c 	.word	0x4002001c
 8009978:	40020030 	.word	0x40020030
 800997c:	40020044 	.word	0x40020044
 8009980:	40020058 	.word	0x40020058
 8009984:	4002006c 	.word	0x4002006c
 8009988:	40020408 	.word	0x40020408
 800998c:	4002041c 	.word	0x4002041c
 8009990:	40020430 	.word	0x40020430
 8009994:	40020444 	.word	0x40020444
 8009998:	40020400 	.word	0x40020400
 800999c:	40020000 	.word	0x40020000

080099a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b08b      	sub	sp, #44	@ 0x2c
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80099aa:	2300      	movs	r3, #0
 80099ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80099ae:	2300      	movs	r3, #0
 80099b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80099b2:	e179      	b.n	8009ca8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80099b4:	2201      	movs	r2, #1
 80099b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b8:	fa02 f303 	lsl.w	r3, r2, r3
 80099bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	69fa      	ldr	r2, [r7, #28]
 80099c4:	4013      	ands	r3, r2
 80099c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80099c8:	69ba      	ldr	r2, [r7, #24]
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	f040 8168 	bne.w	8009ca2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	4a96      	ldr	r2, [pc, #600]	@ (8009c30 <HAL_GPIO_Init+0x290>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d05e      	beq.n	8009a9a <HAL_GPIO_Init+0xfa>
 80099dc:	4a94      	ldr	r2, [pc, #592]	@ (8009c30 <HAL_GPIO_Init+0x290>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d875      	bhi.n	8009ace <HAL_GPIO_Init+0x12e>
 80099e2:	4a94      	ldr	r2, [pc, #592]	@ (8009c34 <HAL_GPIO_Init+0x294>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d058      	beq.n	8009a9a <HAL_GPIO_Init+0xfa>
 80099e8:	4a92      	ldr	r2, [pc, #584]	@ (8009c34 <HAL_GPIO_Init+0x294>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d86f      	bhi.n	8009ace <HAL_GPIO_Init+0x12e>
 80099ee:	4a92      	ldr	r2, [pc, #584]	@ (8009c38 <HAL_GPIO_Init+0x298>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d052      	beq.n	8009a9a <HAL_GPIO_Init+0xfa>
 80099f4:	4a90      	ldr	r2, [pc, #576]	@ (8009c38 <HAL_GPIO_Init+0x298>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d869      	bhi.n	8009ace <HAL_GPIO_Init+0x12e>
 80099fa:	4a90      	ldr	r2, [pc, #576]	@ (8009c3c <HAL_GPIO_Init+0x29c>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d04c      	beq.n	8009a9a <HAL_GPIO_Init+0xfa>
 8009a00:	4a8e      	ldr	r2, [pc, #568]	@ (8009c3c <HAL_GPIO_Init+0x29c>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d863      	bhi.n	8009ace <HAL_GPIO_Init+0x12e>
 8009a06:	4a8e      	ldr	r2, [pc, #568]	@ (8009c40 <HAL_GPIO_Init+0x2a0>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d046      	beq.n	8009a9a <HAL_GPIO_Init+0xfa>
 8009a0c:	4a8c      	ldr	r2, [pc, #560]	@ (8009c40 <HAL_GPIO_Init+0x2a0>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d85d      	bhi.n	8009ace <HAL_GPIO_Init+0x12e>
 8009a12:	2b12      	cmp	r3, #18
 8009a14:	d82a      	bhi.n	8009a6c <HAL_GPIO_Init+0xcc>
 8009a16:	2b12      	cmp	r3, #18
 8009a18:	d859      	bhi.n	8009ace <HAL_GPIO_Init+0x12e>
 8009a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8009a20 <HAL_GPIO_Init+0x80>)
 8009a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a20:	08009a9b 	.word	0x08009a9b
 8009a24:	08009a75 	.word	0x08009a75
 8009a28:	08009a87 	.word	0x08009a87
 8009a2c:	08009ac9 	.word	0x08009ac9
 8009a30:	08009acf 	.word	0x08009acf
 8009a34:	08009acf 	.word	0x08009acf
 8009a38:	08009acf 	.word	0x08009acf
 8009a3c:	08009acf 	.word	0x08009acf
 8009a40:	08009acf 	.word	0x08009acf
 8009a44:	08009acf 	.word	0x08009acf
 8009a48:	08009acf 	.word	0x08009acf
 8009a4c:	08009acf 	.word	0x08009acf
 8009a50:	08009acf 	.word	0x08009acf
 8009a54:	08009acf 	.word	0x08009acf
 8009a58:	08009acf 	.word	0x08009acf
 8009a5c:	08009acf 	.word	0x08009acf
 8009a60:	08009acf 	.word	0x08009acf
 8009a64:	08009a7d 	.word	0x08009a7d
 8009a68:	08009a91 	.word	0x08009a91
 8009a6c:	4a75      	ldr	r2, [pc, #468]	@ (8009c44 <HAL_GPIO_Init+0x2a4>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d013      	beq.n	8009a9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009a72:	e02c      	b.n	8009ace <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	623b      	str	r3, [r7, #32]
          break;
 8009a7a:	e029      	b.n	8009ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	3304      	adds	r3, #4
 8009a82:	623b      	str	r3, [r7, #32]
          break;
 8009a84:	e024      	b.n	8009ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	68db      	ldr	r3, [r3, #12]
 8009a8a:	3308      	adds	r3, #8
 8009a8c:	623b      	str	r3, [r7, #32]
          break;
 8009a8e:	e01f      	b.n	8009ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	330c      	adds	r3, #12
 8009a96:	623b      	str	r3, [r7, #32]
          break;
 8009a98:	e01a      	b.n	8009ad0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d102      	bne.n	8009aa8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009aa2:	2304      	movs	r3, #4
 8009aa4:	623b      	str	r3, [r7, #32]
          break;
 8009aa6:	e013      	b.n	8009ad0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	689b      	ldr	r3, [r3, #8]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d105      	bne.n	8009abc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009ab0:	2308      	movs	r3, #8
 8009ab2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	69fa      	ldr	r2, [r7, #28]
 8009ab8:	611a      	str	r2, [r3, #16]
          break;
 8009aba:	e009      	b.n	8009ad0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009abc:	2308      	movs	r3, #8
 8009abe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	69fa      	ldr	r2, [r7, #28]
 8009ac4:	615a      	str	r2, [r3, #20]
          break;
 8009ac6:	e003      	b.n	8009ad0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	623b      	str	r3, [r7, #32]
          break;
 8009acc:	e000      	b.n	8009ad0 <HAL_GPIO_Init+0x130>
          break;
 8009ace:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009ad0:	69bb      	ldr	r3, [r7, #24]
 8009ad2:	2bff      	cmp	r3, #255	@ 0xff
 8009ad4:	d801      	bhi.n	8009ada <HAL_GPIO_Init+0x13a>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	e001      	b.n	8009ade <HAL_GPIO_Init+0x13e>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	3304      	adds	r3, #4
 8009ade:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009ae0:	69bb      	ldr	r3, [r7, #24]
 8009ae2:	2bff      	cmp	r3, #255	@ 0xff
 8009ae4:	d802      	bhi.n	8009aec <HAL_GPIO_Init+0x14c>
 8009ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	e002      	b.n	8009af2 <HAL_GPIO_Init+0x152>
 8009aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aee:	3b08      	subs	r3, #8
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	210f      	movs	r1, #15
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	fa01 f303 	lsl.w	r3, r1, r3
 8009b00:	43db      	mvns	r3, r3
 8009b02:	401a      	ands	r2, r3
 8009b04:	6a39      	ldr	r1, [r7, #32]
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	fa01 f303 	lsl.w	r3, r1, r3
 8009b0c:	431a      	orrs	r2, r3
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	f000 80c1 	beq.w	8009ca2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009b20:	4b49      	ldr	r3, [pc, #292]	@ (8009c48 <HAL_GPIO_Init+0x2a8>)
 8009b22:	699b      	ldr	r3, [r3, #24]
 8009b24:	4a48      	ldr	r2, [pc, #288]	@ (8009c48 <HAL_GPIO_Init+0x2a8>)
 8009b26:	f043 0301 	orr.w	r3, r3, #1
 8009b2a:	6193      	str	r3, [r2, #24]
 8009b2c:	4b46      	ldr	r3, [pc, #280]	@ (8009c48 <HAL_GPIO_Init+0x2a8>)
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	60bb      	str	r3, [r7, #8]
 8009b36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009b38:	4a44      	ldr	r2, [pc, #272]	@ (8009c4c <HAL_GPIO_Init+0x2ac>)
 8009b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b3c:	089b      	lsrs	r3, r3, #2
 8009b3e:	3302      	adds	r3, #2
 8009b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b48:	f003 0303 	and.w	r3, r3, #3
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	220f      	movs	r2, #15
 8009b50:	fa02 f303 	lsl.w	r3, r2, r3
 8009b54:	43db      	mvns	r3, r3
 8009b56:	68fa      	ldr	r2, [r7, #12]
 8009b58:	4013      	ands	r3, r2
 8009b5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a3c      	ldr	r2, [pc, #240]	@ (8009c50 <HAL_GPIO_Init+0x2b0>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d01f      	beq.n	8009ba4 <HAL_GPIO_Init+0x204>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a3b      	ldr	r2, [pc, #236]	@ (8009c54 <HAL_GPIO_Init+0x2b4>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d019      	beq.n	8009ba0 <HAL_GPIO_Init+0x200>
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	4a3a      	ldr	r2, [pc, #232]	@ (8009c58 <HAL_GPIO_Init+0x2b8>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d013      	beq.n	8009b9c <HAL_GPIO_Init+0x1fc>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	4a39      	ldr	r2, [pc, #228]	@ (8009c5c <HAL_GPIO_Init+0x2bc>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d00d      	beq.n	8009b98 <HAL_GPIO_Init+0x1f8>
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4a38      	ldr	r2, [pc, #224]	@ (8009c60 <HAL_GPIO_Init+0x2c0>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d007      	beq.n	8009b94 <HAL_GPIO_Init+0x1f4>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a37      	ldr	r2, [pc, #220]	@ (8009c64 <HAL_GPIO_Init+0x2c4>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d101      	bne.n	8009b90 <HAL_GPIO_Init+0x1f0>
 8009b8c:	2305      	movs	r3, #5
 8009b8e:	e00a      	b.n	8009ba6 <HAL_GPIO_Init+0x206>
 8009b90:	2306      	movs	r3, #6
 8009b92:	e008      	b.n	8009ba6 <HAL_GPIO_Init+0x206>
 8009b94:	2304      	movs	r3, #4
 8009b96:	e006      	b.n	8009ba6 <HAL_GPIO_Init+0x206>
 8009b98:	2303      	movs	r3, #3
 8009b9a:	e004      	b.n	8009ba6 <HAL_GPIO_Init+0x206>
 8009b9c:	2302      	movs	r3, #2
 8009b9e:	e002      	b.n	8009ba6 <HAL_GPIO_Init+0x206>
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	e000      	b.n	8009ba6 <HAL_GPIO_Init+0x206>
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ba8:	f002 0203 	and.w	r2, r2, #3
 8009bac:	0092      	lsls	r2, r2, #2
 8009bae:	4093      	lsls	r3, r2
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	4313      	orrs	r3, r2
 8009bb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009bb6:	4925      	ldr	r1, [pc, #148]	@ (8009c4c <HAL_GPIO_Init+0x2ac>)
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bba:	089b      	lsrs	r3, r3, #2
 8009bbc:	3302      	adds	r3, #2
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d006      	beq.n	8009bde <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009bd0:	4b25      	ldr	r3, [pc, #148]	@ (8009c68 <HAL_GPIO_Init+0x2c8>)
 8009bd2:	689a      	ldr	r2, [r3, #8]
 8009bd4:	4924      	ldr	r1, [pc, #144]	@ (8009c68 <HAL_GPIO_Init+0x2c8>)
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	608b      	str	r3, [r1, #8]
 8009bdc:	e006      	b.n	8009bec <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009bde:	4b22      	ldr	r3, [pc, #136]	@ (8009c68 <HAL_GPIO_Init+0x2c8>)
 8009be0:	689a      	ldr	r2, [r3, #8]
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	43db      	mvns	r3, r3
 8009be6:	4920      	ldr	r1, [pc, #128]	@ (8009c68 <HAL_GPIO_Init+0x2c8>)
 8009be8:	4013      	ands	r3, r2
 8009bea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d006      	beq.n	8009c06 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8009c68 <HAL_GPIO_Init+0x2c8>)
 8009bfa:	68da      	ldr	r2, [r3, #12]
 8009bfc:	491a      	ldr	r1, [pc, #104]	@ (8009c68 <HAL_GPIO_Init+0x2c8>)
 8009bfe:	69bb      	ldr	r3, [r7, #24]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	60cb      	str	r3, [r1, #12]
 8009c04:	e006      	b.n	8009c14 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009c06:	4b18      	ldr	r3, [pc, #96]	@ (8009c68 <HAL_GPIO_Init+0x2c8>)
 8009c08:	68da      	ldr	r2, [r3, #12]
 8009c0a:	69bb      	ldr	r3, [r7, #24]
 8009c0c:	43db      	mvns	r3, r3
 8009c0e:	4916      	ldr	r1, [pc, #88]	@ (8009c68 <HAL_GPIO_Init+0x2c8>)
 8009c10:	4013      	ands	r3, r2
 8009c12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d025      	beq.n	8009c6c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009c20:	4b11      	ldr	r3, [pc, #68]	@ (8009c68 <HAL_GPIO_Init+0x2c8>)
 8009c22:	685a      	ldr	r2, [r3, #4]
 8009c24:	4910      	ldr	r1, [pc, #64]	@ (8009c68 <HAL_GPIO_Init+0x2c8>)
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	604b      	str	r3, [r1, #4]
 8009c2c:	e025      	b.n	8009c7a <HAL_GPIO_Init+0x2da>
 8009c2e:	bf00      	nop
 8009c30:	10320000 	.word	0x10320000
 8009c34:	10310000 	.word	0x10310000
 8009c38:	10220000 	.word	0x10220000
 8009c3c:	10210000 	.word	0x10210000
 8009c40:	10120000 	.word	0x10120000
 8009c44:	10110000 	.word	0x10110000
 8009c48:	40021000 	.word	0x40021000
 8009c4c:	40010000 	.word	0x40010000
 8009c50:	40010800 	.word	0x40010800
 8009c54:	40010c00 	.word	0x40010c00
 8009c58:	40011000 	.word	0x40011000
 8009c5c:	40011400 	.word	0x40011400
 8009c60:	40011800 	.word	0x40011800
 8009c64:	40011c00 	.word	0x40011c00
 8009c68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009c6c:	4b15      	ldr	r3, [pc, #84]	@ (8009cc4 <HAL_GPIO_Init+0x324>)
 8009c6e:	685a      	ldr	r2, [r3, #4]
 8009c70:	69bb      	ldr	r3, [r7, #24]
 8009c72:	43db      	mvns	r3, r3
 8009c74:	4913      	ldr	r1, [pc, #76]	@ (8009cc4 <HAL_GPIO_Init+0x324>)
 8009c76:	4013      	ands	r3, r2
 8009c78:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d006      	beq.n	8009c94 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009c86:	4b0f      	ldr	r3, [pc, #60]	@ (8009cc4 <HAL_GPIO_Init+0x324>)
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	490e      	ldr	r1, [pc, #56]	@ (8009cc4 <HAL_GPIO_Init+0x324>)
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	600b      	str	r3, [r1, #0]
 8009c92:	e006      	b.n	8009ca2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009c94:	4b0b      	ldr	r3, [pc, #44]	@ (8009cc4 <HAL_GPIO_Init+0x324>)
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	69bb      	ldr	r3, [r7, #24]
 8009c9a:	43db      	mvns	r3, r3
 8009c9c:	4909      	ldr	r1, [pc, #36]	@ (8009cc4 <HAL_GPIO_Init+0x324>)
 8009c9e:	4013      	ands	r3, r2
 8009ca0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cae:	fa22 f303 	lsr.w	r3, r2, r3
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	f47f ae7e 	bne.w	80099b4 <HAL_GPIO_Init+0x14>
  }
}
 8009cb8:	bf00      	nop
 8009cba:	bf00      	nop
 8009cbc:	372c      	adds	r7, #44	@ 0x2c
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bc80      	pop	{r7}
 8009cc2:	4770      	bx	lr
 8009cc4:	40010400 	.word	0x40010400

08009cc8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b089      	sub	sp, #36	@ 0x24
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
 8009cd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009cd6:	e0a6      	b.n	8009e26 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009cd8:	2201      	movs	r2, #1
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8009ce0:	683a      	ldr	r2, [r7, #0]
 8009ce2:	4013      	ands	r3, r2
 8009ce4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009ce6:	69bb      	ldr	r3, [r7, #24]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f000 8099 	beq.w	8009e20 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009cee:	4a54      	ldr	r2, [pc, #336]	@ (8009e40 <HAL_GPIO_DeInit+0x178>)
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	089b      	lsrs	r3, r3, #2
 8009cf4:	3302      	adds	r3, #2
 8009cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cfa:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	f003 0303 	and.w	r3, r3, #3
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	220f      	movs	r2, #15
 8009d06:	fa02 f303 	lsl.w	r3, r2, r3
 8009d0a:	697a      	ldr	r2, [r7, #20]
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a4c      	ldr	r2, [pc, #304]	@ (8009e44 <HAL_GPIO_DeInit+0x17c>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d01f      	beq.n	8009d58 <HAL_GPIO_DeInit+0x90>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a4b      	ldr	r2, [pc, #300]	@ (8009e48 <HAL_GPIO_DeInit+0x180>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d019      	beq.n	8009d54 <HAL_GPIO_DeInit+0x8c>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	4a4a      	ldr	r2, [pc, #296]	@ (8009e4c <HAL_GPIO_DeInit+0x184>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d013      	beq.n	8009d50 <HAL_GPIO_DeInit+0x88>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	4a49      	ldr	r2, [pc, #292]	@ (8009e50 <HAL_GPIO_DeInit+0x188>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d00d      	beq.n	8009d4c <HAL_GPIO_DeInit+0x84>
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a48      	ldr	r2, [pc, #288]	@ (8009e54 <HAL_GPIO_DeInit+0x18c>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d007      	beq.n	8009d48 <HAL_GPIO_DeInit+0x80>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a47      	ldr	r2, [pc, #284]	@ (8009e58 <HAL_GPIO_DeInit+0x190>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d101      	bne.n	8009d44 <HAL_GPIO_DeInit+0x7c>
 8009d40:	2305      	movs	r3, #5
 8009d42:	e00a      	b.n	8009d5a <HAL_GPIO_DeInit+0x92>
 8009d44:	2306      	movs	r3, #6
 8009d46:	e008      	b.n	8009d5a <HAL_GPIO_DeInit+0x92>
 8009d48:	2304      	movs	r3, #4
 8009d4a:	e006      	b.n	8009d5a <HAL_GPIO_DeInit+0x92>
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	e004      	b.n	8009d5a <HAL_GPIO_DeInit+0x92>
 8009d50:	2302      	movs	r3, #2
 8009d52:	e002      	b.n	8009d5a <HAL_GPIO_DeInit+0x92>
 8009d54:	2301      	movs	r3, #1
 8009d56:	e000      	b.n	8009d5a <HAL_GPIO_DeInit+0x92>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	69fa      	ldr	r2, [r7, #28]
 8009d5c:	f002 0203 	and.w	r2, r2, #3
 8009d60:	0092      	lsls	r2, r2, #2
 8009d62:	4093      	lsls	r3, r2
 8009d64:	697a      	ldr	r2, [r7, #20]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d132      	bne.n	8009dd0 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009d6a:	4b3c      	ldr	r3, [pc, #240]	@ (8009e5c <HAL_GPIO_DeInit+0x194>)
 8009d6c:	681a      	ldr	r2, [r3, #0]
 8009d6e:	69bb      	ldr	r3, [r7, #24]
 8009d70:	43db      	mvns	r3, r3
 8009d72:	493a      	ldr	r1, [pc, #232]	@ (8009e5c <HAL_GPIO_DeInit+0x194>)
 8009d74:	4013      	ands	r3, r2
 8009d76:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009d78:	4b38      	ldr	r3, [pc, #224]	@ (8009e5c <HAL_GPIO_DeInit+0x194>)
 8009d7a:	685a      	ldr	r2, [r3, #4]
 8009d7c:	69bb      	ldr	r3, [r7, #24]
 8009d7e:	43db      	mvns	r3, r3
 8009d80:	4936      	ldr	r1, [pc, #216]	@ (8009e5c <HAL_GPIO_DeInit+0x194>)
 8009d82:	4013      	ands	r3, r2
 8009d84:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009d86:	4b35      	ldr	r3, [pc, #212]	@ (8009e5c <HAL_GPIO_DeInit+0x194>)
 8009d88:	68da      	ldr	r2, [r3, #12]
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	43db      	mvns	r3, r3
 8009d8e:	4933      	ldr	r1, [pc, #204]	@ (8009e5c <HAL_GPIO_DeInit+0x194>)
 8009d90:	4013      	ands	r3, r2
 8009d92:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009d94:	4b31      	ldr	r3, [pc, #196]	@ (8009e5c <HAL_GPIO_DeInit+0x194>)
 8009d96:	689a      	ldr	r2, [r3, #8]
 8009d98:	69bb      	ldr	r3, [r7, #24]
 8009d9a:	43db      	mvns	r3, r3
 8009d9c:	492f      	ldr	r1, [pc, #188]	@ (8009e5c <HAL_GPIO_DeInit+0x194>)
 8009d9e:	4013      	ands	r3, r2
 8009da0:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009da2:	69fb      	ldr	r3, [r7, #28]
 8009da4:	f003 0303 	and.w	r3, r3, #3
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	220f      	movs	r2, #15
 8009dac:	fa02 f303 	lsl.w	r3, r2, r3
 8009db0:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009db2:	4a23      	ldr	r2, [pc, #140]	@ (8009e40 <HAL_GPIO_DeInit+0x178>)
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	089b      	lsrs	r3, r3, #2
 8009db8:	3302      	adds	r3, #2
 8009dba:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	43da      	mvns	r2, r3
 8009dc2:	481f      	ldr	r0, [pc, #124]	@ (8009e40 <HAL_GPIO_DeInit+0x178>)
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	089b      	lsrs	r3, r3, #2
 8009dc8:	400a      	ands	r2, r1
 8009dca:	3302      	adds	r3, #2
 8009dcc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	2bff      	cmp	r3, #255	@ 0xff
 8009dd4:	d801      	bhi.n	8009dda <HAL_GPIO_DeInit+0x112>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	e001      	b.n	8009dde <HAL_GPIO_DeInit+0x116>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	3304      	adds	r3, #4
 8009dde:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	2bff      	cmp	r3, #255	@ 0xff
 8009de4:	d802      	bhi.n	8009dec <HAL_GPIO_DeInit+0x124>
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	009b      	lsls	r3, r3, #2
 8009dea:	e002      	b.n	8009df2 <HAL_GPIO_DeInit+0x12a>
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	3b08      	subs	r3, #8
 8009df0:	009b      	lsls	r3, r3, #2
 8009df2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	681a      	ldr	r2, [r3, #0]
 8009df8:	210f      	movs	r1, #15
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8009e00:	43db      	mvns	r3, r3
 8009e02:	401a      	ands	r2, r3
 8009e04:	2104      	movs	r1, #4
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	fa01 f303 	lsl.w	r3, r1, r3
 8009e0c:	431a      	orrs	r2, r3
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	68da      	ldr	r2, [r3, #12]
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	43db      	mvns	r3, r3
 8009e1a:	401a      	ands	r2, r3
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	3301      	adds	r3, #1
 8009e24:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009e26:	683a      	ldr	r2, [r7, #0]
 8009e28:	69fb      	ldr	r3, [r7, #28]
 8009e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f47f af52 	bne.w	8009cd8 <HAL_GPIO_DeInit+0x10>
  }
}
 8009e34:	bf00      	nop
 8009e36:	bf00      	nop
 8009e38:	3724      	adds	r7, #36	@ 0x24
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bc80      	pop	{r7}
 8009e3e:	4770      	bx	lr
 8009e40:	40010000 	.word	0x40010000
 8009e44:	40010800 	.word	0x40010800
 8009e48:	40010c00 	.word	0x40010c00
 8009e4c:	40011000 	.word	0x40011000
 8009e50:	40011400 	.word	0x40011400
 8009e54:	40011800 	.word	0x40011800
 8009e58:	40011c00 	.word	0x40011c00
 8009e5c:	40010400 	.word	0x40010400

08009e60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	689a      	ldr	r2, [r3, #8]
 8009e70:	887b      	ldrh	r3, [r7, #2]
 8009e72:	4013      	ands	r3, r2
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d002      	beq.n	8009e7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	73fb      	strb	r3, [r7, #15]
 8009e7c:	e001      	b.n	8009e82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3714      	adds	r7, #20
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bc80      	pop	{r7}
 8009e8c:	4770      	bx	lr

08009e8e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b083      	sub	sp, #12
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
 8009e96:	460b      	mov	r3, r1
 8009e98:	807b      	strh	r3, [r7, #2]
 8009e9a:	4613      	mov	r3, r2
 8009e9c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009e9e:	787b      	ldrb	r3, [r7, #1]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d003      	beq.n	8009eac <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009ea4:	887a      	ldrh	r2, [r7, #2]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009eaa:	e003      	b.n	8009eb4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009eac:	887b      	ldrh	r3, [r7, #2]
 8009eae:	041a      	lsls	r2, r3, #16
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	611a      	str	r2, [r3, #16]
}
 8009eb4:	bf00      	nop
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bc80      	pop	{r7}
 8009ebc:	4770      	bx	lr

08009ebe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009ebe:	b480      	push	{r7}
 8009ec0:	b085      	sub	sp, #20
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	68db      	ldr	r3, [r3, #12]
 8009ece:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009ed0:	887a      	ldrh	r2, [r7, #2]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	4013      	ands	r3, r2
 8009ed6:	041a      	lsls	r2, r3, #16
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	43d9      	mvns	r1, r3
 8009edc:	887b      	ldrh	r3, [r7, #2]
 8009ede:	400b      	ands	r3, r1
 8009ee0:	431a      	orrs	r2, r3
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	611a      	str	r2, [r3, #16]
}
 8009ee6:	bf00      	nop
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bc80      	pop	{r7}
 8009eee:	4770      	bx	lr

08009ef0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d101      	bne.n	8009f02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	e12b      	b.n	800a15a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f08:	b2db      	uxtb	r3, r3
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d106      	bne.n	8009f1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f7ff f82a 	bl	8008f70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	2224      	movs	r2, #36	@ 0x24
 8009f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	f022 0201 	bic.w	r2, r2, #1
 8009f32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009f42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	681a      	ldr	r2, [r3, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009f52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009f54:	f001 fdb8 	bl	800bac8 <HAL_RCC_GetPCLK1Freq>
 8009f58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	4a81      	ldr	r2, [pc, #516]	@ (800a164 <HAL_I2C_Init+0x274>)
 8009f60:	4293      	cmp	r3, r2
 8009f62:	d807      	bhi.n	8009f74 <HAL_I2C_Init+0x84>
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	4a80      	ldr	r2, [pc, #512]	@ (800a168 <HAL_I2C_Init+0x278>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	bf94      	ite	ls
 8009f6c:	2301      	movls	r3, #1
 8009f6e:	2300      	movhi	r3, #0
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	e006      	b.n	8009f82 <HAL_I2C_Init+0x92>
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	4a7d      	ldr	r2, [pc, #500]	@ (800a16c <HAL_I2C_Init+0x27c>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	bf94      	ite	ls
 8009f7c:	2301      	movls	r3, #1
 8009f7e:	2300      	movhi	r3, #0
 8009f80:	b2db      	uxtb	r3, r3
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d001      	beq.n	8009f8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e0e7      	b.n	800a15a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	4a78      	ldr	r2, [pc, #480]	@ (800a170 <HAL_I2C_Init+0x280>)
 8009f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f92:	0c9b      	lsrs	r3, r3, #18
 8009f94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	430a      	orrs	r2, r1
 8009fa8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	6a1b      	ldr	r3, [r3, #32]
 8009fb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	685b      	ldr	r3, [r3, #4]
 8009fb8:	4a6a      	ldr	r2, [pc, #424]	@ (800a164 <HAL_I2C_Init+0x274>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d802      	bhi.n	8009fc4 <HAL_I2C_Init+0xd4>
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	e009      	b.n	8009fd8 <HAL_I2C_Init+0xe8>
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009fca:	fb02 f303 	mul.w	r3, r2, r3
 8009fce:	4a69      	ldr	r2, [pc, #420]	@ (800a174 <HAL_I2C_Init+0x284>)
 8009fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8009fd4:	099b      	lsrs	r3, r3, #6
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	6812      	ldr	r2, [r2, #0]
 8009fdc:	430b      	orrs	r3, r1
 8009fde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	69db      	ldr	r3, [r3, #28]
 8009fe6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009fea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	495c      	ldr	r1, [pc, #368]	@ (800a164 <HAL_I2C_Init+0x274>)
 8009ff4:	428b      	cmp	r3, r1
 8009ff6:	d819      	bhi.n	800a02c <HAL_I2C_Init+0x13c>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	1e59      	subs	r1, r3, #1
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	005b      	lsls	r3, r3, #1
 800a002:	fbb1 f3f3 	udiv	r3, r1, r3
 800a006:	1c59      	adds	r1, r3, #1
 800a008:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a00c:	400b      	ands	r3, r1
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00a      	beq.n	800a028 <HAL_I2C_Init+0x138>
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	1e59      	subs	r1, r3, #1
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	005b      	lsls	r3, r3, #1
 800a01c:	fbb1 f3f3 	udiv	r3, r1, r3
 800a020:	3301      	adds	r3, #1
 800a022:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a026:	e051      	b.n	800a0cc <HAL_I2C_Init+0x1dc>
 800a028:	2304      	movs	r3, #4
 800a02a:	e04f      	b.n	800a0cc <HAL_I2C_Init+0x1dc>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d111      	bne.n	800a058 <HAL_I2C_Init+0x168>
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	1e58      	subs	r0, r3, #1
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6859      	ldr	r1, [r3, #4]
 800a03c:	460b      	mov	r3, r1
 800a03e:	005b      	lsls	r3, r3, #1
 800a040:	440b      	add	r3, r1
 800a042:	fbb0 f3f3 	udiv	r3, r0, r3
 800a046:	3301      	adds	r3, #1
 800a048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	bf0c      	ite	eq
 800a050:	2301      	moveq	r3, #1
 800a052:	2300      	movne	r3, #0
 800a054:	b2db      	uxtb	r3, r3
 800a056:	e012      	b.n	800a07e <HAL_I2C_Init+0x18e>
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	1e58      	subs	r0, r3, #1
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6859      	ldr	r1, [r3, #4]
 800a060:	460b      	mov	r3, r1
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	440b      	add	r3, r1
 800a066:	0099      	lsls	r1, r3, #2
 800a068:	440b      	add	r3, r1
 800a06a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a06e:	3301      	adds	r3, #1
 800a070:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a074:	2b00      	cmp	r3, #0
 800a076:	bf0c      	ite	eq
 800a078:	2301      	moveq	r3, #1
 800a07a:	2300      	movne	r3, #0
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d001      	beq.n	800a086 <HAL_I2C_Init+0x196>
 800a082:	2301      	movs	r3, #1
 800a084:	e022      	b.n	800a0cc <HAL_I2C_Init+0x1dc>
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d10e      	bne.n	800a0ac <HAL_I2C_Init+0x1bc>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	1e58      	subs	r0, r3, #1
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6859      	ldr	r1, [r3, #4]
 800a096:	460b      	mov	r3, r1
 800a098:	005b      	lsls	r3, r3, #1
 800a09a:	440b      	add	r3, r1
 800a09c:	fbb0 f3f3 	udiv	r3, r0, r3
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0aa:	e00f      	b.n	800a0cc <HAL_I2C_Init+0x1dc>
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	1e58      	subs	r0, r3, #1
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6859      	ldr	r1, [r3, #4]
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	440b      	add	r3, r1
 800a0ba:	0099      	lsls	r1, r3, #2
 800a0bc:	440b      	add	r3, r1
 800a0be:	fbb0 f3f3 	udiv	r3, r0, r3
 800a0c2:	3301      	adds	r3, #1
 800a0c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a0c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a0cc:	6879      	ldr	r1, [r7, #4]
 800a0ce:	6809      	ldr	r1, [r1, #0]
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	69da      	ldr	r2, [r3, #28]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a1b      	ldr	r3, [r3, #32]
 800a0e6:	431a      	orrs	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	430a      	orrs	r2, r1
 800a0ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a0fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	6911      	ldr	r1, [r2, #16]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	68d2      	ldr	r2, [r2, #12]
 800a106:	4311      	orrs	r1, r2
 800a108:	687a      	ldr	r2, [r7, #4]
 800a10a:	6812      	ldr	r2, [r2, #0]
 800a10c:	430b      	orrs	r3, r1
 800a10e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	695a      	ldr	r2, [r3, #20]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	699b      	ldr	r3, [r3, #24]
 800a122:	431a      	orrs	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	430a      	orrs	r2, r1
 800a12a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f042 0201 	orr.w	r2, r2, #1
 800a13a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2220      	movs	r2, #32
 800a146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2200      	movs	r2, #0
 800a14e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a158:	2300      	movs	r3, #0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}
 800a162:	bf00      	nop
 800a164:	000186a0 	.word	0x000186a0
 800a168:	001e847f 	.word	0x001e847f
 800a16c:	003d08ff 	.word	0x003d08ff
 800a170:	431bde83 	.word	0x431bde83
 800a174:	10624dd3 	.word	0x10624dd3

0800a178 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b082      	sub	sp, #8
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d101      	bne.n	800a18a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a186:	2301      	movs	r3, #1
 800a188:	e021      	b.n	800a1ce <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	2224      	movs	r2, #36	@ 0x24
 800a18e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f022 0201 	bic.w	r2, r2, #1
 800a1a0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f7fe ff22 	bl	8008fec <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a1cc:	2300      	movs	r3, #0
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3708      	adds	r7, #8
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
	...

0800a1d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b088      	sub	sp, #32
 800a1dc:	af02      	add	r7, sp, #8
 800a1de:	60f8      	str	r0, [r7, #12]
 800a1e0:	607a      	str	r2, [r7, #4]
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	817b      	strh	r3, [r7, #10]
 800a1e8:	4613      	mov	r3, r2
 800a1ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a1ec:	f7ff f85e 	bl	80092ac <HAL_GetTick>
 800a1f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1f8:	b2db      	uxtb	r3, r3
 800a1fa:	2b20      	cmp	r3, #32
 800a1fc:	f040 80e0 	bne.w	800a3c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	2319      	movs	r3, #25
 800a206:	2201      	movs	r2, #1
 800a208:	4970      	ldr	r1, [pc, #448]	@ (800a3cc <HAL_I2C_Master_Transmit+0x1f4>)
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f000 fe5c 	bl	800aec8 <I2C_WaitOnFlagUntilTimeout>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d001      	beq.n	800a21a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a216:	2302      	movs	r3, #2
 800a218:	e0d3      	b.n	800a3c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a220:	2b01      	cmp	r3, #1
 800a222:	d101      	bne.n	800a228 <HAL_I2C_Master_Transmit+0x50>
 800a224:	2302      	movs	r3, #2
 800a226:	e0cc      	b.n	800a3c2 <HAL_I2C_Master_Transmit+0x1ea>
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2201      	movs	r2, #1
 800a22c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f003 0301 	and.w	r3, r3, #1
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d007      	beq.n	800a24e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f042 0201 	orr.w	r2, r2, #1
 800a24c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a25c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	2221      	movs	r2, #33	@ 0x21
 800a262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	2210      	movs	r2, #16
 800a26a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2200      	movs	r2, #0
 800a272:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	893a      	ldrh	r2, [r7, #8]
 800a27e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a284:	b29a      	uxth	r2, r3
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	4a50      	ldr	r2, [pc, #320]	@ (800a3d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800a28e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a290:	8979      	ldrh	r1, [r7, #10]
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	6a3a      	ldr	r2, [r7, #32]
 800a296:	68f8      	ldr	r0, [r7, #12]
 800a298:	f000 fc16 	bl	800aac8 <I2C_MasterRequestWrite>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e08d      	b.n	800a3c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	613b      	str	r3, [r7, #16]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	695b      	ldr	r3, [r3, #20]
 800a2b0:	613b      	str	r3, [r7, #16]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	699b      	ldr	r3, [r3, #24]
 800a2b8:	613b      	str	r3, [r7, #16]
 800a2ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a2bc:	e066      	b.n	800a38c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	6a39      	ldr	r1, [r7, #32]
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f000 ff1a 	bl	800b0fc <I2C_WaitOnTXEFlagUntilTimeout>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00d      	beq.n	800a2ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2d2:	2b04      	cmp	r3, #4
 800a2d4:	d107      	bne.n	800a2e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a2e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	e06b      	b.n	800a3c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ee:	781a      	ldrb	r2, [r3, #0]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2fa:	1c5a      	adds	r2, r3, #1
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a304:	b29b      	uxth	r3, r3
 800a306:	3b01      	subs	r3, #1
 800a308:	b29a      	uxth	r2, r3
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a312:	3b01      	subs	r3, #1
 800a314:	b29a      	uxth	r2, r3
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	695b      	ldr	r3, [r3, #20]
 800a320:	f003 0304 	and.w	r3, r3, #4
 800a324:	2b04      	cmp	r3, #4
 800a326:	d11b      	bne.n	800a360 <HAL_I2C_Master_Transmit+0x188>
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d017      	beq.n	800a360 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a334:	781a      	ldrb	r2, [r3, #0]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a340:	1c5a      	adds	r2, r3, #1
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a34a:	b29b      	uxth	r3, r3
 800a34c:	3b01      	subs	r3, #1
 800a34e:	b29a      	uxth	r2, r3
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a358:	3b01      	subs	r3, #1
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a360:	697a      	ldr	r2, [r7, #20]
 800a362:	6a39      	ldr	r1, [r7, #32]
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f000 ff11 	bl	800b18c <I2C_WaitOnBTFFlagUntilTimeout>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d00d      	beq.n	800a38c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a374:	2b04      	cmp	r3, #4
 800a376:	d107      	bne.n	800a388 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a386:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	e01a      	b.n	800a3c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a390:	2b00      	cmp	r3, #0
 800a392:	d194      	bne.n	800a2be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a3a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2220      	movs	r2, #32
 800a3a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
 800a3be:	e000      	b.n	800a3c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a3c0:	2302      	movs	r3, #2
  }
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3718      	adds	r7, #24
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	00100002 	.word	0x00100002
 800a3d0:	ffff0000 	.word	0xffff0000

0800a3d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b088      	sub	sp, #32
 800a3d8:	af02      	add	r7, sp, #8
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	4608      	mov	r0, r1
 800a3de:	4611      	mov	r1, r2
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	817b      	strh	r3, [r7, #10]
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	813b      	strh	r3, [r7, #8]
 800a3ea:	4613      	mov	r3, r2
 800a3ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a3ee:	f7fe ff5d 	bl	80092ac <HAL_GetTick>
 800a3f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	2b20      	cmp	r3, #32
 800a3fe:	f040 80d9 	bne.w	800a5b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	9300      	str	r3, [sp, #0]
 800a406:	2319      	movs	r3, #25
 800a408:	2201      	movs	r2, #1
 800a40a:	496d      	ldr	r1, [pc, #436]	@ (800a5c0 <HAL_I2C_Mem_Write+0x1ec>)
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f000 fd5b 	bl	800aec8 <I2C_WaitOnFlagUntilTimeout>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d001      	beq.n	800a41c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a418:	2302      	movs	r3, #2
 800a41a:	e0cc      	b.n	800a5b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a422:	2b01      	cmp	r3, #1
 800a424:	d101      	bne.n	800a42a <HAL_I2C_Mem_Write+0x56>
 800a426:	2302      	movs	r3, #2
 800a428:	e0c5      	b.n	800a5b6 <HAL_I2C_Mem_Write+0x1e2>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2201      	movs	r2, #1
 800a42e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 0301 	and.w	r3, r3, #1
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d007      	beq.n	800a450 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f042 0201 	orr.w	r2, r2, #1
 800a44e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a45e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2221      	movs	r2, #33	@ 0x21
 800a464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2240      	movs	r2, #64	@ 0x40
 800a46c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2200      	movs	r2, #0
 800a474:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6a3a      	ldr	r2, [r7, #32]
 800a47a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a480:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a486:	b29a      	uxth	r2, r3
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	4a4d      	ldr	r2, [pc, #308]	@ (800a5c4 <HAL_I2C_Mem_Write+0x1f0>)
 800a490:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a492:	88f8      	ldrh	r0, [r7, #6]
 800a494:	893a      	ldrh	r2, [r7, #8]
 800a496:	8979      	ldrh	r1, [r7, #10]
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	9301      	str	r3, [sp, #4]
 800a49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a49e:	9300      	str	r3, [sp, #0]
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f000 fb92 	bl	800abcc <I2C_RequestMemoryWrite>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d052      	beq.n	800a554 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e081      	b.n	800a5b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a4b2:	697a      	ldr	r2, [r7, #20]
 800a4b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	f000 fe20 	bl	800b0fc <I2C_WaitOnTXEFlagUntilTimeout>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00d      	beq.n	800a4de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4c6:	2b04      	cmp	r3, #4
 800a4c8:	d107      	bne.n	800a4da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e06b      	b.n	800a5b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4e2:	781a      	ldrb	r2, [r3, #0]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ee:	1c5a      	adds	r2, r3, #1
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a504:	b29b      	uxth	r3, r3
 800a506:	3b01      	subs	r3, #1
 800a508:	b29a      	uxth	r2, r3
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	695b      	ldr	r3, [r3, #20]
 800a514:	f003 0304 	and.w	r3, r3, #4
 800a518:	2b04      	cmp	r3, #4
 800a51a:	d11b      	bne.n	800a554 <HAL_I2C_Mem_Write+0x180>
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a520:	2b00      	cmp	r3, #0
 800a522:	d017      	beq.n	800a554 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a528:	781a      	ldrb	r2, [r3, #0]
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a534:	1c5a      	adds	r2, r3, #1
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a53e:	3b01      	subs	r3, #1
 800a540:	b29a      	uxth	r2, r3
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	3b01      	subs	r3, #1
 800a54e:	b29a      	uxth	r2, r3
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d1aa      	bne.n	800a4b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a55c:	697a      	ldr	r2, [r7, #20]
 800a55e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a560:	68f8      	ldr	r0, [r7, #12]
 800a562:	f000 fe13 	bl	800b18c <I2C_WaitOnBTFFlagUntilTimeout>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00d      	beq.n	800a588 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a570:	2b04      	cmp	r3, #4
 800a572:	d107      	bne.n	800a584 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a582:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	e016      	b.n	800a5b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2220      	movs	r2, #32
 800a59c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	e000      	b.n	800a5b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a5b4:	2302      	movs	r3, #2
  }
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3718      	adds	r7, #24
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop
 800a5c0:	00100002 	.word	0x00100002
 800a5c4:	ffff0000 	.word	0xffff0000

0800a5c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b08c      	sub	sp, #48	@ 0x30
 800a5cc:	af02      	add	r7, sp, #8
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	4608      	mov	r0, r1
 800a5d2:	4611      	mov	r1, r2
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	817b      	strh	r3, [r7, #10]
 800a5da:	460b      	mov	r3, r1
 800a5dc:	813b      	strh	r3, [r7, #8]
 800a5de:	4613      	mov	r3, r2
 800a5e0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a5e6:	f7fe fe61 	bl	80092ac <HAL_GetTick>
 800a5ea:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	2b20      	cmp	r3, #32
 800a5f6:	f040 8244 	bne.w	800aa82 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5fc:	9300      	str	r3, [sp, #0]
 800a5fe:	2319      	movs	r3, #25
 800a600:	2201      	movs	r2, #1
 800a602:	4982      	ldr	r1, [pc, #520]	@ (800a80c <HAL_I2C_Mem_Read+0x244>)
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f000 fc5f 	bl	800aec8 <I2C_WaitOnFlagUntilTimeout>
 800a60a:	4603      	mov	r3, r0
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d001      	beq.n	800a614 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a610:	2302      	movs	r3, #2
 800a612:	e237      	b.n	800aa84 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d101      	bne.n	800a622 <HAL_I2C_Mem_Read+0x5a>
 800a61e:	2302      	movs	r3, #2
 800a620:	e230      	b.n	800aa84 <HAL_I2C_Mem_Read+0x4bc>
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2201      	movs	r2, #1
 800a626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f003 0301 	and.w	r3, r3, #1
 800a634:	2b01      	cmp	r3, #1
 800a636:	d007      	beq.n	800a648 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	681a      	ldr	r2, [r3, #0]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f042 0201 	orr.w	r2, r2, #1
 800a646:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a656:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2222      	movs	r2, #34	@ 0x22
 800a65c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2240      	movs	r2, #64	@ 0x40
 800a664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	2200      	movs	r2, #0
 800a66c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a672:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a678:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a67e:	b29a      	uxth	r2, r3
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	4a62      	ldr	r2, [pc, #392]	@ (800a810 <HAL_I2C_Mem_Read+0x248>)
 800a688:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a68a:	88f8      	ldrh	r0, [r7, #6]
 800a68c:	893a      	ldrh	r2, [r7, #8]
 800a68e:	8979      	ldrh	r1, [r7, #10]
 800a690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a692:	9301      	str	r3, [sp, #4]
 800a694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a696:	9300      	str	r3, [sp, #0]
 800a698:	4603      	mov	r3, r0
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f000 fb2c 	bl	800acf8 <I2C_RequestMemoryRead>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	e1ec      	b.n	800aa84 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d113      	bne.n	800a6da <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	61fb      	str	r3, [r7, #28]
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	695b      	ldr	r3, [r3, #20]
 800a6bc:	61fb      	str	r3, [r7, #28]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	699b      	ldr	r3, [r3, #24]
 800a6c4:	61fb      	str	r3, [r7, #28]
 800a6c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	681a      	ldr	r2, [r3, #0]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6d6:	601a      	str	r2, [r3, #0]
 800a6d8:	e1c0      	b.n	800aa5c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6de:	2b01      	cmp	r3, #1
 800a6e0:	d11e      	bne.n	800a720 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a6f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6f2:	b672      	cpsid	i
}
 800a6f4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	61bb      	str	r3, [r7, #24]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	695b      	ldr	r3, [r3, #20]
 800a700:	61bb      	str	r3, [r7, #24]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	699b      	ldr	r3, [r3, #24]
 800a708:	61bb      	str	r3, [r7, #24]
 800a70a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a71a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a71c:	b662      	cpsie	i
}
 800a71e:	e035      	b.n	800a78c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a724:	2b02      	cmp	r3, #2
 800a726:	d11e      	bne.n	800a766 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a736:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a738:	b672      	cpsid	i
}
 800a73a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a73c:	2300      	movs	r3, #0
 800a73e:	617b      	str	r3, [r7, #20]
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	695b      	ldr	r3, [r3, #20]
 800a746:	617b      	str	r3, [r7, #20]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	699b      	ldr	r3, [r3, #24]
 800a74e:	617b      	str	r3, [r7, #20]
 800a750:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a760:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a762:	b662      	cpsie	i
}
 800a764:	e012      	b.n	800a78c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a774:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a776:	2300      	movs	r3, #0
 800a778:	613b      	str	r3, [r7, #16]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	695b      	ldr	r3, [r3, #20]
 800a780:	613b      	str	r3, [r7, #16]
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	699b      	ldr	r3, [r3, #24]
 800a788:	613b      	str	r3, [r7, #16]
 800a78a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a78c:	e166      	b.n	800aa5c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a792:	2b03      	cmp	r3, #3
 800a794:	f200 811f 	bhi.w	800a9d6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d123      	bne.n	800a7e8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a7a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	f000 fd39 	bl	800b21c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d001      	beq.n	800a7b4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a7b0:	2301      	movs	r3, #1
 800a7b2:	e167      	b.n	800aa84 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	691a      	ldr	r2, [r3, #16]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7be:	b2d2      	uxtb	r2, r2
 800a7c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c6:	1c5a      	adds	r2, r3, #1
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	3b01      	subs	r3, #1
 800a7e0:	b29a      	uxth	r2, r3
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a7e6:	e139      	b.n	800aa5c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7ec:	2b02      	cmp	r3, #2
 800a7ee:	d152      	bne.n	800a896 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	4906      	ldr	r1, [pc, #24]	@ (800a814 <HAL_I2C_Mem_Read+0x24c>)
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f000 fb64 	bl	800aec8 <I2C_WaitOnFlagUntilTimeout>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d008      	beq.n	800a818 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a806:	2301      	movs	r3, #1
 800a808:	e13c      	b.n	800aa84 <HAL_I2C_Mem_Read+0x4bc>
 800a80a:	bf00      	nop
 800a80c:	00100002 	.word	0x00100002
 800a810:	ffff0000 	.word	0xffff0000
 800a814:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a818:	b672      	cpsid	i
}
 800a81a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a82a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	691a      	ldr	r2, [r3, #16]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a836:	b2d2      	uxtb	r2, r2
 800a838:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a83e:	1c5a      	adds	r2, r3, #1
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a848:	3b01      	subs	r3, #1
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a854:	b29b      	uxth	r3, r3
 800a856:	3b01      	subs	r3, #1
 800a858:	b29a      	uxth	r2, r3
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a85e:	b662      	cpsie	i
}
 800a860:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	691a      	ldr	r2, [r3, #16]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a86c:	b2d2      	uxtb	r2, r2
 800a86e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a874:	1c5a      	adds	r2, r3, #1
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a87e:	3b01      	subs	r3, #1
 800a880:	b29a      	uxth	r2, r3
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	3b01      	subs	r3, #1
 800a88e:	b29a      	uxth	r2, r3
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a894:	e0e2      	b.n	800aa5c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a898:	9300      	str	r3, [sp, #0]
 800a89a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a89c:	2200      	movs	r2, #0
 800a89e:	497b      	ldr	r1, [pc, #492]	@ (800aa8c <HAL_I2C_Mem_Read+0x4c4>)
 800a8a0:	68f8      	ldr	r0, [r7, #12]
 800a8a2:	f000 fb11 	bl	800aec8 <I2C_WaitOnFlagUntilTimeout>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d001      	beq.n	800a8b0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	e0e9      	b.n	800aa84 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a8be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8c0:	b672      	cpsid	i
}
 800a8c2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	691a      	ldr	r2, [r3, #16]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ce:	b2d2      	uxtb	r2, r2
 800a8d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8d6:	1c5a      	adds	r2, r3, #1
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8e0:	3b01      	subs	r3, #1
 800a8e2:	b29a      	uxth	r2, r3
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	b29a      	uxth	r2, r3
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a8f6:	4b66      	ldr	r3, [pc, #408]	@ (800aa90 <HAL_I2C_Mem_Read+0x4c8>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	08db      	lsrs	r3, r3, #3
 800a8fc:	4a65      	ldr	r2, [pc, #404]	@ (800aa94 <HAL_I2C_Mem_Read+0x4cc>)
 800a8fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a902:	0a1a      	lsrs	r2, r3, #8
 800a904:	4613      	mov	r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	4413      	add	r3, r2
 800a90a:	00da      	lsls	r2, r3, #3
 800a90c:	1ad3      	subs	r3, r2, r3
 800a90e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a910:	6a3b      	ldr	r3, [r7, #32]
 800a912:	3b01      	subs	r3, #1
 800a914:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a916:	6a3b      	ldr	r3, [r7, #32]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d118      	bne.n	800a94e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2200      	movs	r2, #0
 800a920:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2220      	movs	r2, #32
 800a926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	2200      	movs	r2, #0
 800a92e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a936:	f043 0220 	orr.w	r2, r3, #32
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a93e:	b662      	cpsie	i
}
 800a940:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2200      	movs	r2, #0
 800a946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	e09a      	b.n	800aa84 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	695b      	ldr	r3, [r3, #20]
 800a954:	f003 0304 	and.w	r3, r3, #4
 800a958:	2b04      	cmp	r3, #4
 800a95a:	d1d9      	bne.n	800a910 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a96a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	691a      	ldr	r2, [r3, #16]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a976:	b2d2      	uxtb	r2, r2
 800a978:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a97e:	1c5a      	adds	r2, r3, #1
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a988:	3b01      	subs	r3, #1
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a994:	b29b      	uxth	r3, r3
 800a996:	3b01      	subs	r3, #1
 800a998:	b29a      	uxth	r2, r3
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a99e:	b662      	cpsie	i
}
 800a9a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	691a      	ldr	r2, [r3, #16]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9ac:	b2d2      	uxtb	r2, r2
 800a9ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9b4:	1c5a      	adds	r2, r3, #1
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9be:	3b01      	subs	r3, #1
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a9d4:	e042      	b.n	800aa5c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a9d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9d8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a9da:	68f8      	ldr	r0, [r7, #12]
 800a9dc:	f000 fc1e 	bl	800b21c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d001      	beq.n	800a9ea <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a9e6:	2301      	movs	r3, #1
 800a9e8:	e04c      	b.n	800aa84 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	691a      	ldr	r2, [r3, #16]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9f4:	b2d2      	uxtb	r2, r2
 800a9f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9fc:	1c5a      	adds	r2, r3, #1
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa06:	3b01      	subs	r3, #1
 800aa08:	b29a      	uxth	r2, r3
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	3b01      	subs	r3, #1
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	695b      	ldr	r3, [r3, #20]
 800aa22:	f003 0304 	and.w	r3, r3, #4
 800aa26:	2b04      	cmp	r3, #4
 800aa28:	d118      	bne.n	800aa5c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	691a      	ldr	r2, [r3, #16]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa34:	b2d2      	uxtb	r2, r2
 800aa36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa3c:	1c5a      	adds	r2, r3, #1
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa46:	3b01      	subs	r3, #1
 800aa48:	b29a      	uxth	r2, r3
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa52:	b29b      	uxth	r3, r3
 800aa54:	3b01      	subs	r3, #1
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	f47f ae94 	bne.w	800a78e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2220      	movs	r2, #32
 800aa6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2200      	movs	r2, #0
 800aa72:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	e000      	b.n	800aa84 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800aa82:	2302      	movs	r3, #2
  }
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3728      	adds	r7, #40	@ 0x28
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}
 800aa8c:	00010004 	.word	0x00010004
 800aa90:	20000f74 	.word	0x20000f74
 800aa94:	14f8b589 	.word	0x14f8b589

0800aa98 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	b083      	sub	sp, #12
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aaa6:	b2db      	uxtb	r3, r3
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	370c      	adds	r7, #12
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bc80      	pop	{r7}
 800aab0:	4770      	bx	lr

0800aab2 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800aab2:	b480      	push	{r7}
 800aab4:	b083      	sub	sp, #12
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	370c      	adds	r7, #12
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bc80      	pop	{r7}
 800aac6:	4770      	bx	lr

0800aac8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b088      	sub	sp, #32
 800aacc:	af02      	add	r7, sp, #8
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	607a      	str	r2, [r7, #4]
 800aad2:	603b      	str	r3, [r7, #0]
 800aad4:	460b      	mov	r3, r1
 800aad6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aadc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	2b08      	cmp	r3, #8
 800aae2:	d006      	beq.n	800aaf2 <I2C_MasterRequestWrite+0x2a>
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d003      	beq.n	800aaf2 <I2C_MasterRequestWrite+0x2a>
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800aaf0:	d108      	bne.n	800ab04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	681a      	ldr	r2, [r3, #0]
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ab00:	601a      	str	r2, [r3, #0]
 800ab02:	e00b      	b.n	800ab1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab08:	2b12      	cmp	r3, #18
 800ab0a:	d107      	bne.n	800ab1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ab1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	9300      	str	r3, [sp, #0]
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2200      	movs	r2, #0
 800ab24:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ab28:	68f8      	ldr	r0, [r7, #12]
 800ab2a:	f000 f9cd 	bl	800aec8 <I2C_WaitOnFlagUntilTimeout>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d00d      	beq.n	800ab50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab3e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab42:	d103      	bne.n	800ab4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab4a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ab4c:	2303      	movs	r3, #3
 800ab4e:	e035      	b.n	800abbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab58:	d108      	bne.n	800ab6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ab5a:	897b      	ldrh	r3, [r7, #10]
 800ab5c:	b2db      	uxtb	r3, r3
 800ab5e:	461a      	mov	r2, r3
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ab68:	611a      	str	r2, [r3, #16]
 800ab6a:	e01b      	b.n	800aba4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ab6c:	897b      	ldrh	r3, [r7, #10]
 800ab6e:	11db      	asrs	r3, r3, #7
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	f003 0306 	and.w	r3, r3, #6
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	f063 030f 	orn	r3, r3, #15
 800ab7c:	b2da      	uxtb	r2, r3
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	490e      	ldr	r1, [pc, #56]	@ (800abc4 <I2C_MasterRequestWrite+0xfc>)
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f000 fa16 	bl	800afbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d001      	beq.n	800ab9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	e010      	b.n	800abbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ab9a:	897b      	ldrh	r3, [r7, #10]
 800ab9c:	b2da      	uxtb	r2, r3
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	4907      	ldr	r1, [pc, #28]	@ (800abc8 <I2C_MasterRequestWrite+0x100>)
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f000 fa06 	bl	800afbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800abb0:	4603      	mov	r3, r0
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d001      	beq.n	800abba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800abb6:	2301      	movs	r3, #1
 800abb8:	e000      	b.n	800abbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800abba:	2300      	movs	r3, #0
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3718      	adds	r7, #24
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	00010008 	.word	0x00010008
 800abc8:	00010002 	.word	0x00010002

0800abcc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b088      	sub	sp, #32
 800abd0:	af02      	add	r7, sp, #8
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	4608      	mov	r0, r1
 800abd6:	4611      	mov	r1, r2
 800abd8:	461a      	mov	r2, r3
 800abda:	4603      	mov	r3, r0
 800abdc:	817b      	strh	r3, [r7, #10]
 800abde:	460b      	mov	r3, r1
 800abe0:	813b      	strh	r3, [r7, #8]
 800abe2:	4613      	mov	r3, r2
 800abe4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	681a      	ldr	r2, [r3, #0]
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800abf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800abf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abf8:	9300      	str	r3, [sp, #0]
 800abfa:	6a3b      	ldr	r3, [r7, #32]
 800abfc:	2200      	movs	r2, #0
 800abfe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f000 f960 	bl	800aec8 <I2C_WaitOnFlagUntilTimeout>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00d      	beq.n	800ac2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ac1c:	d103      	bne.n	800ac26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ac24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ac26:	2303      	movs	r3, #3
 800ac28:	e05f      	b.n	800acea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ac2a:	897b      	ldrh	r3, [r7, #10]
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	461a      	mov	r2, r3
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ac38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac3c:	6a3a      	ldr	r2, [r7, #32]
 800ac3e:	492d      	ldr	r1, [pc, #180]	@ (800acf4 <I2C_RequestMemoryWrite+0x128>)
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	f000 f9bb 	bl	800afbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d001      	beq.n	800ac50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	e04c      	b.n	800acea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac50:	2300      	movs	r3, #0
 800ac52:	617b      	str	r3, [r7, #20]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	695b      	ldr	r3, [r3, #20]
 800ac5a:	617b      	str	r3, [r7, #20]
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	699b      	ldr	r3, [r3, #24]
 800ac62:	617b      	str	r3, [r7, #20]
 800ac64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac68:	6a39      	ldr	r1, [r7, #32]
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f000 fa46 	bl	800b0fc <I2C_WaitOnTXEFlagUntilTimeout>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00d      	beq.n	800ac92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac7a:	2b04      	cmp	r3, #4
 800ac7c:	d107      	bne.n	800ac8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ac8e:	2301      	movs	r3, #1
 800ac90:	e02b      	b.n	800acea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ac92:	88fb      	ldrh	r3, [r7, #6]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d105      	bne.n	800aca4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ac98:	893b      	ldrh	r3, [r7, #8]
 800ac9a:	b2da      	uxtb	r2, r3
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	611a      	str	r2, [r3, #16]
 800aca2:	e021      	b.n	800ace8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800aca4:	893b      	ldrh	r3, [r7, #8]
 800aca6:	0a1b      	lsrs	r3, r3, #8
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	b2da      	uxtb	r2, r3
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800acb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800acb4:	6a39      	ldr	r1, [r7, #32]
 800acb6:	68f8      	ldr	r0, [r7, #12]
 800acb8:	f000 fa20 	bl	800b0fc <I2C_WaitOnTXEFlagUntilTimeout>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d00d      	beq.n	800acde <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acc6:	2b04      	cmp	r3, #4
 800acc8:	d107      	bne.n	800acda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800acd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	e005      	b.n	800acea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800acde:	893b      	ldrh	r3, [r7, #8]
 800ace0:	b2da      	uxtb	r2, r3
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800ace8:	2300      	movs	r3, #0
}
 800acea:	4618      	mov	r0, r3
 800acec:	3718      	adds	r7, #24
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	00010002 	.word	0x00010002

0800acf8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b088      	sub	sp, #32
 800acfc:	af02      	add	r7, sp, #8
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	4608      	mov	r0, r1
 800ad02:	4611      	mov	r1, r2
 800ad04:	461a      	mov	r2, r3
 800ad06:	4603      	mov	r3, r0
 800ad08:	817b      	strh	r3, [r7, #10]
 800ad0a:	460b      	mov	r3, r1
 800ad0c:	813b      	strh	r3, [r7, #8]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ad20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681a      	ldr	r2, [r3, #0]
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ad30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ad32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad34:	9300      	str	r3, [sp, #0]
 800ad36:	6a3b      	ldr	r3, [r7, #32]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f000 f8c2 	bl	800aec8 <I2C_WaitOnFlagUntilTimeout>
 800ad44:	4603      	mov	r3, r0
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d00d      	beq.n	800ad66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad58:	d103      	bne.n	800ad62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ad60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ad62:	2303      	movs	r3, #3
 800ad64:	e0aa      	b.n	800aebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ad66:	897b      	ldrh	r3, [r7, #10]
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ad74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ad76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad78:	6a3a      	ldr	r2, [r7, #32]
 800ad7a:	4952      	ldr	r1, [pc, #328]	@ (800aec4 <I2C_RequestMemoryRead+0x1cc>)
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	f000 f91d 	bl	800afbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d001      	beq.n	800ad8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	e097      	b.n	800aebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	617b      	str	r3, [r7, #20]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	695b      	ldr	r3, [r3, #20]
 800ad96:	617b      	str	r3, [r7, #20]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	699b      	ldr	r3, [r3, #24]
 800ad9e:	617b      	str	r3, [r7, #20]
 800ada0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ada2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ada4:	6a39      	ldr	r1, [r7, #32]
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f000 f9a8 	bl	800b0fc <I2C_WaitOnTXEFlagUntilTimeout>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00d      	beq.n	800adce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adb6:	2b04      	cmp	r3, #4
 800adb8:	d107      	bne.n	800adca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800adc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800adca:	2301      	movs	r3, #1
 800adcc:	e076      	b.n	800aebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800adce:	88fb      	ldrh	r3, [r7, #6]
 800add0:	2b01      	cmp	r3, #1
 800add2:	d105      	bne.n	800ade0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800add4:	893b      	ldrh	r3, [r7, #8]
 800add6:	b2da      	uxtb	r2, r3
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	611a      	str	r2, [r3, #16]
 800adde:	e021      	b.n	800ae24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ade0:	893b      	ldrh	r3, [r7, #8]
 800ade2:	0a1b      	lsrs	r3, r3, #8
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	b2da      	uxtb	r2, r3
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800adee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adf0:	6a39      	ldr	r1, [r7, #32]
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	f000 f982 	bl	800b0fc <I2C_WaitOnTXEFlagUntilTimeout>
 800adf8:	4603      	mov	r3, r0
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00d      	beq.n	800ae1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae02:	2b04      	cmp	r3, #4
 800ae04:	d107      	bne.n	800ae16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	681a      	ldr	r2, [r3, #0]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	e050      	b.n	800aebc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ae1a:	893b      	ldrh	r3, [r7, #8]
 800ae1c:	b2da      	uxtb	r2, r3
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae26:	6a39      	ldr	r1, [r7, #32]
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f000 f967 	bl	800b0fc <I2C_WaitOnTXEFlagUntilTimeout>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00d      	beq.n	800ae50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae38:	2b04      	cmp	r3, #4
 800ae3a:	d107      	bne.n	800ae4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e035      	b.n	800aebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	681a      	ldr	r2, [r3, #0]
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ae5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ae60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae62:	9300      	str	r3, [sp, #0]
 800ae64:	6a3b      	ldr	r3, [r7, #32]
 800ae66:	2200      	movs	r2, #0
 800ae68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ae6c:	68f8      	ldr	r0, [r7, #12]
 800ae6e:	f000 f82b 	bl	800aec8 <I2C_WaitOnFlagUntilTimeout>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d00d      	beq.n	800ae94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae86:	d103      	bne.n	800ae90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ae90:	2303      	movs	r3, #3
 800ae92:	e013      	b.n	800aebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ae94:	897b      	ldrh	r3, [r7, #10]
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	f043 0301 	orr.w	r3, r3, #1
 800ae9c:	b2da      	uxtb	r2, r3
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea6:	6a3a      	ldr	r2, [r7, #32]
 800aea8:	4906      	ldr	r1, [pc, #24]	@ (800aec4 <I2C_RequestMemoryRead+0x1cc>)
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	f000 f886 	bl	800afbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d001      	beq.n	800aeba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e000      	b.n	800aebc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800aeba:	2300      	movs	r3, #0
}
 800aebc:	4618      	mov	r0, r3
 800aebe:	3718      	adds	r7, #24
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd80      	pop	{r7, pc}
 800aec4:	00010002 	.word	0x00010002

0800aec8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	60f8      	str	r0, [r7, #12]
 800aed0:	60b9      	str	r1, [r7, #8]
 800aed2:	603b      	str	r3, [r7, #0]
 800aed4:	4613      	mov	r3, r2
 800aed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aed8:	e048      	b.n	800af6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aee0:	d044      	beq.n	800af6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aee2:	f7fe f9e3 	bl	80092ac <HAL_GetTick>
 800aee6:	4602      	mov	r2, r0
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	1ad3      	subs	r3, r2, r3
 800aeec:	683a      	ldr	r2, [r7, #0]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d302      	bcc.n	800aef8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d139      	bne.n	800af6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	0c1b      	lsrs	r3, r3, #16
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d10d      	bne.n	800af1e <I2C_WaitOnFlagUntilTimeout+0x56>
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	695b      	ldr	r3, [r3, #20]
 800af08:	43da      	mvns	r2, r3
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	4013      	ands	r3, r2
 800af0e:	b29b      	uxth	r3, r3
 800af10:	2b00      	cmp	r3, #0
 800af12:	bf0c      	ite	eq
 800af14:	2301      	moveq	r3, #1
 800af16:	2300      	movne	r3, #0
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	461a      	mov	r2, r3
 800af1c:	e00c      	b.n	800af38 <I2C_WaitOnFlagUntilTimeout+0x70>
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	699b      	ldr	r3, [r3, #24]
 800af24:	43da      	mvns	r2, r3
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	4013      	ands	r3, r2
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	bf0c      	ite	eq
 800af30:	2301      	moveq	r3, #1
 800af32:	2300      	movne	r3, #0
 800af34:	b2db      	uxtb	r3, r3
 800af36:	461a      	mov	r2, r3
 800af38:	79fb      	ldrb	r3, [r7, #7]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d116      	bne.n	800af6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2200      	movs	r2, #0
 800af42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	2220      	movs	r2, #32
 800af48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2200      	movs	r2, #0
 800af50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af58:	f043 0220 	orr.w	r2, r3, #32
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	2200      	movs	r2, #0
 800af64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800af68:	2301      	movs	r3, #1
 800af6a:	e023      	b.n	800afb4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	0c1b      	lsrs	r3, r3, #16
 800af70:	b2db      	uxtb	r3, r3
 800af72:	2b01      	cmp	r3, #1
 800af74:	d10d      	bne.n	800af92 <I2C_WaitOnFlagUntilTimeout+0xca>
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	695b      	ldr	r3, [r3, #20]
 800af7c:	43da      	mvns	r2, r3
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	4013      	ands	r3, r2
 800af82:	b29b      	uxth	r3, r3
 800af84:	2b00      	cmp	r3, #0
 800af86:	bf0c      	ite	eq
 800af88:	2301      	moveq	r3, #1
 800af8a:	2300      	movne	r3, #0
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	461a      	mov	r2, r3
 800af90:	e00c      	b.n	800afac <I2C_WaitOnFlagUntilTimeout+0xe4>
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	699b      	ldr	r3, [r3, #24]
 800af98:	43da      	mvns	r2, r3
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	4013      	ands	r3, r2
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	bf0c      	ite	eq
 800afa4:	2301      	moveq	r3, #1
 800afa6:	2300      	movne	r3, #0
 800afa8:	b2db      	uxtb	r3, r3
 800afaa:	461a      	mov	r2, r3
 800afac:	79fb      	ldrb	r3, [r7, #7]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d093      	beq.n	800aeda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3710      	adds	r7, #16
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}

0800afbc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b084      	sub	sp, #16
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	60f8      	str	r0, [r7, #12]
 800afc4:	60b9      	str	r1, [r7, #8]
 800afc6:	607a      	str	r2, [r7, #4]
 800afc8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800afca:	e071      	b.n	800b0b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	695b      	ldr	r3, [r3, #20]
 800afd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800afd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afda:	d123      	bne.n	800b024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800afea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800aff4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2200      	movs	r2, #0
 800affa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2220      	movs	r2, #32
 800b000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2200      	movs	r2, #0
 800b008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b010:	f043 0204 	orr.w	r2, r3, #4
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b020:	2301      	movs	r3, #1
 800b022:	e067      	b.n	800b0f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b02a:	d041      	beq.n	800b0b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b02c:	f7fe f93e 	bl	80092ac <HAL_GetTick>
 800b030:	4602      	mov	r2, r0
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	1ad3      	subs	r3, r2, r3
 800b036:	687a      	ldr	r2, [r7, #4]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d302      	bcc.n	800b042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d136      	bne.n	800b0b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	0c1b      	lsrs	r3, r3, #16
 800b046:	b2db      	uxtb	r3, r3
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d10c      	bne.n	800b066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	695b      	ldr	r3, [r3, #20]
 800b052:	43da      	mvns	r2, r3
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	4013      	ands	r3, r2
 800b058:	b29b      	uxth	r3, r3
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	bf14      	ite	ne
 800b05e:	2301      	movne	r3, #1
 800b060:	2300      	moveq	r3, #0
 800b062:	b2db      	uxtb	r3, r3
 800b064:	e00b      	b.n	800b07e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	699b      	ldr	r3, [r3, #24]
 800b06c:	43da      	mvns	r2, r3
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	4013      	ands	r3, r2
 800b072:	b29b      	uxth	r3, r3
 800b074:	2b00      	cmp	r3, #0
 800b076:	bf14      	ite	ne
 800b078:	2301      	movne	r3, #1
 800b07a:	2300      	moveq	r3, #0
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d016      	beq.n	800b0b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2200      	movs	r2, #0
 800b086:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2220      	movs	r2, #32
 800b08c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	2200      	movs	r2, #0
 800b094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b09c:	f043 0220 	orr.w	r2, r3, #32
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e021      	b.n	800b0f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	0c1b      	lsrs	r3, r3, #16
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	2b01      	cmp	r3, #1
 800b0b8:	d10c      	bne.n	800b0d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	695b      	ldr	r3, [r3, #20]
 800b0c0:	43da      	mvns	r2, r3
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	4013      	ands	r3, r2
 800b0c6:	b29b      	uxth	r3, r3
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	bf14      	ite	ne
 800b0cc:	2301      	movne	r3, #1
 800b0ce:	2300      	moveq	r3, #0
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	e00b      	b.n	800b0ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	699b      	ldr	r3, [r3, #24]
 800b0da:	43da      	mvns	r2, r3
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	4013      	ands	r3, r2
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	bf14      	ite	ne
 800b0e6:	2301      	movne	r3, #1
 800b0e8:	2300      	moveq	r3, #0
 800b0ea:	b2db      	uxtb	r3, r3
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	f47f af6d 	bne.w	800afcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b0f2:	2300      	movs	r3, #0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3710      	adds	r7, #16
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b084      	sub	sp, #16
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b108:	e034      	b.n	800b174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b10a:	68f8      	ldr	r0, [r7, #12]
 800b10c:	f000 f8e3 	bl	800b2d6 <I2C_IsAcknowledgeFailed>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	d001      	beq.n	800b11a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	e034      	b.n	800b184 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b120:	d028      	beq.n	800b174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b122:	f7fe f8c3 	bl	80092ac <HAL_GetTick>
 800b126:	4602      	mov	r2, r0
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	1ad3      	subs	r3, r2, r3
 800b12c:	68ba      	ldr	r2, [r7, #8]
 800b12e:	429a      	cmp	r2, r3
 800b130:	d302      	bcc.n	800b138 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d11d      	bne.n	800b174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	695b      	ldr	r3, [r3, #20]
 800b13e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b142:	2b80      	cmp	r3, #128	@ 0x80
 800b144:	d016      	beq.n	800b174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2200      	movs	r2, #0
 800b14a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2220      	movs	r2, #32
 800b150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2200      	movs	r2, #0
 800b158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b160:	f043 0220 	orr.w	r2, r3, #32
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2200      	movs	r2, #0
 800b16c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	e007      	b.n	800b184 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	695b      	ldr	r3, [r3, #20]
 800b17a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b17e:	2b80      	cmp	r3, #128	@ 0x80
 800b180:	d1c3      	bne.n	800b10a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b182:	2300      	movs	r3, #0
}
 800b184:	4618      	mov	r0, r3
 800b186:	3710      	adds	r7, #16
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	60f8      	str	r0, [r7, #12]
 800b194:	60b9      	str	r1, [r7, #8]
 800b196:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b198:	e034      	b.n	800b204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b19a:	68f8      	ldr	r0, [r7, #12]
 800b19c:	f000 f89b 	bl	800b2d6 <I2C_IsAcknowledgeFailed>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d001      	beq.n	800b1aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e034      	b.n	800b214 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1b0:	d028      	beq.n	800b204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1b2:	f7fe f87b 	bl	80092ac <HAL_GetTick>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	1ad3      	subs	r3, r2, r3
 800b1bc:	68ba      	ldr	r2, [r7, #8]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d302      	bcc.n	800b1c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d11d      	bne.n	800b204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	695b      	ldr	r3, [r3, #20]
 800b1ce:	f003 0304 	and.w	r3, r3, #4
 800b1d2:	2b04      	cmp	r3, #4
 800b1d4:	d016      	beq.n	800b204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	2220      	movs	r2, #32
 800b1e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1f0:	f043 0220 	orr.w	r2, r3, #32
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b200:	2301      	movs	r3, #1
 800b202:	e007      	b.n	800b214 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	695b      	ldr	r3, [r3, #20]
 800b20a:	f003 0304 	and.w	r3, r3, #4
 800b20e:	2b04      	cmp	r3, #4
 800b210:	d1c3      	bne.n	800b19a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b212:	2300      	movs	r3, #0
}
 800b214:	4618      	mov	r0, r3
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b228:	e049      	b.n	800b2be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	695b      	ldr	r3, [r3, #20]
 800b230:	f003 0310 	and.w	r3, r3, #16
 800b234:	2b10      	cmp	r3, #16
 800b236:	d119      	bne.n	800b26c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f06f 0210 	mvn.w	r2, #16
 800b240:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2220      	movs	r2, #32
 800b24c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2200      	movs	r2, #0
 800b254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2200      	movs	r2, #0
 800b264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b268:	2301      	movs	r3, #1
 800b26a:	e030      	b.n	800b2ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b26c:	f7fe f81e 	bl	80092ac <HAL_GetTick>
 800b270:	4602      	mov	r2, r0
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	1ad3      	subs	r3, r2, r3
 800b276:	68ba      	ldr	r2, [r7, #8]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d302      	bcc.n	800b282 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d11d      	bne.n	800b2be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	695b      	ldr	r3, [r3, #20]
 800b288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b28c:	2b40      	cmp	r3, #64	@ 0x40
 800b28e:	d016      	beq.n	800b2be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	2200      	movs	r2, #0
 800b294:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2220      	movs	r2, #32
 800b29a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2aa:	f043 0220 	orr.w	r2, r3, #32
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b2ba:	2301      	movs	r3, #1
 800b2bc:	e007      	b.n	800b2ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	695b      	ldr	r3, [r3, #20]
 800b2c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b2c8:	2b40      	cmp	r3, #64	@ 0x40
 800b2ca:	d1ae      	bne.n	800b22a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3710      	adds	r7, #16
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b2d6:	b480      	push	{r7}
 800b2d8:	b083      	sub	sp, #12
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	695b      	ldr	r3, [r3, #20]
 800b2e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b2e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2ec:	d11b      	bne.n	800b326 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b2f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2220      	movs	r2, #32
 800b302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b312:	f043 0204 	orr.w	r2, r3, #4
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2200      	movs	r2, #0
 800b31e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800b322:	2301      	movs	r3, #1
 800b324:	e000      	b.n	800b328 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b326:	2300      	movs	r3, #0
}
 800b328:	4618      	mov	r0, r3
 800b32a:	370c      	adds	r7, #12
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bc80      	pop	{r7}
 800b330:	4770      	bx	lr
	...

0800b334 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b086      	sub	sp, #24
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d101      	bne.n	800b346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	e272      	b.n	800b82c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f003 0301 	and.w	r3, r3, #1
 800b34e:	2b00      	cmp	r3, #0
 800b350:	f000 8087 	beq.w	800b462 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b354:	4b92      	ldr	r3, [pc, #584]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b356:	685b      	ldr	r3, [r3, #4]
 800b358:	f003 030c 	and.w	r3, r3, #12
 800b35c:	2b04      	cmp	r3, #4
 800b35e:	d00c      	beq.n	800b37a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b360:	4b8f      	ldr	r3, [pc, #572]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	f003 030c 	and.w	r3, r3, #12
 800b368:	2b08      	cmp	r3, #8
 800b36a:	d112      	bne.n	800b392 <HAL_RCC_OscConfig+0x5e>
 800b36c:	4b8c      	ldr	r3, [pc, #560]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b378:	d10b      	bne.n	800b392 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b37a:	4b89      	ldr	r3, [pc, #548]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b382:	2b00      	cmp	r3, #0
 800b384:	d06c      	beq.n	800b460 <HAL_RCC_OscConfig+0x12c>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d168      	bne.n	800b460 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b38e:	2301      	movs	r3, #1
 800b390:	e24c      	b.n	800b82c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b39a:	d106      	bne.n	800b3aa <HAL_RCC_OscConfig+0x76>
 800b39c:	4b80      	ldr	r3, [pc, #512]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	4a7f      	ldr	r2, [pc, #508]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b3a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b3a6:	6013      	str	r3, [r2, #0]
 800b3a8:	e02e      	b.n	800b408 <HAL_RCC_OscConfig+0xd4>
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	685b      	ldr	r3, [r3, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d10c      	bne.n	800b3cc <HAL_RCC_OscConfig+0x98>
 800b3b2:	4b7b      	ldr	r3, [pc, #492]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	4a7a      	ldr	r2, [pc, #488]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b3b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b3bc:	6013      	str	r3, [r2, #0]
 800b3be:	4b78      	ldr	r3, [pc, #480]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	4a77      	ldr	r2, [pc, #476]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b3c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b3c8:	6013      	str	r3, [r2, #0]
 800b3ca:	e01d      	b.n	800b408 <HAL_RCC_OscConfig+0xd4>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	685b      	ldr	r3, [r3, #4]
 800b3d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b3d4:	d10c      	bne.n	800b3f0 <HAL_RCC_OscConfig+0xbc>
 800b3d6:	4b72      	ldr	r3, [pc, #456]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a71      	ldr	r2, [pc, #452]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b3dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b3e0:	6013      	str	r3, [r2, #0]
 800b3e2:	4b6f      	ldr	r3, [pc, #444]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a6e      	ldr	r2, [pc, #440]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b3e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b3ec:	6013      	str	r3, [r2, #0]
 800b3ee:	e00b      	b.n	800b408 <HAL_RCC_OscConfig+0xd4>
 800b3f0:	4b6b      	ldr	r3, [pc, #428]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	4a6a      	ldr	r2, [pc, #424]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b3f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b3fa:	6013      	str	r3, [r2, #0]
 800b3fc:	4b68      	ldr	r3, [pc, #416]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4a67      	ldr	r2, [pc, #412]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b406:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d013      	beq.n	800b438 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b410:	f7fd ff4c 	bl	80092ac <HAL_GetTick>
 800b414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b416:	e008      	b.n	800b42a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b418:	f7fd ff48 	bl	80092ac <HAL_GetTick>
 800b41c:	4602      	mov	r2, r0
 800b41e:	693b      	ldr	r3, [r7, #16]
 800b420:	1ad3      	subs	r3, r2, r3
 800b422:	2b64      	cmp	r3, #100	@ 0x64
 800b424:	d901      	bls.n	800b42a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b426:	2303      	movs	r3, #3
 800b428:	e200      	b.n	800b82c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b42a:	4b5d      	ldr	r3, [pc, #372]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b432:	2b00      	cmp	r3, #0
 800b434:	d0f0      	beq.n	800b418 <HAL_RCC_OscConfig+0xe4>
 800b436:	e014      	b.n	800b462 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b438:	f7fd ff38 	bl	80092ac <HAL_GetTick>
 800b43c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b43e:	e008      	b.n	800b452 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b440:	f7fd ff34 	bl	80092ac <HAL_GetTick>
 800b444:	4602      	mov	r2, r0
 800b446:	693b      	ldr	r3, [r7, #16]
 800b448:	1ad3      	subs	r3, r2, r3
 800b44a:	2b64      	cmp	r3, #100	@ 0x64
 800b44c:	d901      	bls.n	800b452 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b44e:	2303      	movs	r3, #3
 800b450:	e1ec      	b.n	800b82c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b452:	4b53      	ldr	r3, [pc, #332]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d1f0      	bne.n	800b440 <HAL_RCC_OscConfig+0x10c>
 800b45e:	e000      	b.n	800b462 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	f003 0302 	and.w	r3, r3, #2
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d063      	beq.n	800b536 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b46e:	4b4c      	ldr	r3, [pc, #304]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	f003 030c 	and.w	r3, r3, #12
 800b476:	2b00      	cmp	r3, #0
 800b478:	d00b      	beq.n	800b492 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b47a:	4b49      	ldr	r3, [pc, #292]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	f003 030c 	and.w	r3, r3, #12
 800b482:	2b08      	cmp	r3, #8
 800b484:	d11c      	bne.n	800b4c0 <HAL_RCC_OscConfig+0x18c>
 800b486:	4b46      	ldr	r3, [pc, #280]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d116      	bne.n	800b4c0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b492:	4b43      	ldr	r3, [pc, #268]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	f003 0302 	and.w	r3, r3, #2
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d005      	beq.n	800b4aa <HAL_RCC_OscConfig+0x176>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	691b      	ldr	r3, [r3, #16]
 800b4a2:	2b01      	cmp	r3, #1
 800b4a4:	d001      	beq.n	800b4aa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e1c0      	b.n	800b82c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4aa:	4b3d      	ldr	r3, [pc, #244]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	695b      	ldr	r3, [r3, #20]
 800b4b6:	00db      	lsls	r3, r3, #3
 800b4b8:	4939      	ldr	r1, [pc, #228]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b4be:	e03a      	b.n	800b536 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d020      	beq.n	800b50a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b4c8:	4b36      	ldr	r3, [pc, #216]	@ (800b5a4 <HAL_RCC_OscConfig+0x270>)
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b4ce:	f7fd feed 	bl	80092ac <HAL_GetTick>
 800b4d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b4d4:	e008      	b.n	800b4e8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b4d6:	f7fd fee9 	bl	80092ac <HAL_GetTick>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	693b      	ldr	r3, [r7, #16]
 800b4de:	1ad3      	subs	r3, r2, r3
 800b4e0:	2b02      	cmp	r3, #2
 800b4e2:	d901      	bls.n	800b4e8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b4e4:	2303      	movs	r3, #3
 800b4e6:	e1a1      	b.n	800b82c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b4e8:	4b2d      	ldr	r3, [pc, #180]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f003 0302 	and.w	r3, r3, #2
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d0f0      	beq.n	800b4d6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4f4:	4b2a      	ldr	r3, [pc, #168]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	695b      	ldr	r3, [r3, #20]
 800b500:	00db      	lsls	r3, r3, #3
 800b502:	4927      	ldr	r1, [pc, #156]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b504:	4313      	orrs	r3, r2
 800b506:	600b      	str	r3, [r1, #0]
 800b508:	e015      	b.n	800b536 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b50a:	4b26      	ldr	r3, [pc, #152]	@ (800b5a4 <HAL_RCC_OscConfig+0x270>)
 800b50c:	2200      	movs	r2, #0
 800b50e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b510:	f7fd fecc 	bl	80092ac <HAL_GetTick>
 800b514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b516:	e008      	b.n	800b52a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b518:	f7fd fec8 	bl	80092ac <HAL_GetTick>
 800b51c:	4602      	mov	r2, r0
 800b51e:	693b      	ldr	r3, [r7, #16]
 800b520:	1ad3      	subs	r3, r2, r3
 800b522:	2b02      	cmp	r3, #2
 800b524:	d901      	bls.n	800b52a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b526:	2303      	movs	r3, #3
 800b528:	e180      	b.n	800b82c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b52a:	4b1d      	ldr	r3, [pc, #116]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f003 0302 	and.w	r3, r3, #2
 800b532:	2b00      	cmp	r3, #0
 800b534:	d1f0      	bne.n	800b518 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f003 0308 	and.w	r3, r3, #8
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d03a      	beq.n	800b5b8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	699b      	ldr	r3, [r3, #24]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d019      	beq.n	800b57e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b54a:	4b17      	ldr	r3, [pc, #92]	@ (800b5a8 <HAL_RCC_OscConfig+0x274>)
 800b54c:	2201      	movs	r2, #1
 800b54e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b550:	f7fd feac 	bl	80092ac <HAL_GetTick>
 800b554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b556:	e008      	b.n	800b56a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b558:	f7fd fea8 	bl	80092ac <HAL_GetTick>
 800b55c:	4602      	mov	r2, r0
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	1ad3      	subs	r3, r2, r3
 800b562:	2b02      	cmp	r3, #2
 800b564:	d901      	bls.n	800b56a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b566:	2303      	movs	r3, #3
 800b568:	e160      	b.n	800b82c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b56a:	4b0d      	ldr	r3, [pc, #52]	@ (800b5a0 <HAL_RCC_OscConfig+0x26c>)
 800b56c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b56e:	f003 0302 	and.w	r3, r3, #2
 800b572:	2b00      	cmp	r3, #0
 800b574:	d0f0      	beq.n	800b558 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b576:	2001      	movs	r0, #1
 800b578:	f000 face 	bl	800bb18 <RCC_Delay>
 800b57c:	e01c      	b.n	800b5b8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b57e:	4b0a      	ldr	r3, [pc, #40]	@ (800b5a8 <HAL_RCC_OscConfig+0x274>)
 800b580:	2200      	movs	r2, #0
 800b582:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b584:	f7fd fe92 	bl	80092ac <HAL_GetTick>
 800b588:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b58a:	e00f      	b.n	800b5ac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b58c:	f7fd fe8e 	bl	80092ac <HAL_GetTick>
 800b590:	4602      	mov	r2, r0
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	1ad3      	subs	r3, r2, r3
 800b596:	2b02      	cmp	r3, #2
 800b598:	d908      	bls.n	800b5ac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b59a:	2303      	movs	r3, #3
 800b59c:	e146      	b.n	800b82c <HAL_RCC_OscConfig+0x4f8>
 800b59e:	bf00      	nop
 800b5a0:	40021000 	.word	0x40021000
 800b5a4:	42420000 	.word	0x42420000
 800b5a8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b5ac:	4b92      	ldr	r3, [pc, #584]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b5ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5b0:	f003 0302 	and.w	r3, r3, #2
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1e9      	bne.n	800b58c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f003 0304 	and.w	r3, r3, #4
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f000 80a6 	beq.w	800b712 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b5ca:	4b8b      	ldr	r3, [pc, #556]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b5cc:	69db      	ldr	r3, [r3, #28]
 800b5ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d10d      	bne.n	800b5f2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b5d6:	4b88      	ldr	r3, [pc, #544]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b5d8:	69db      	ldr	r3, [r3, #28]
 800b5da:	4a87      	ldr	r2, [pc, #540]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b5dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b5e0:	61d3      	str	r3, [r2, #28]
 800b5e2:	4b85      	ldr	r3, [pc, #532]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b5e4:	69db      	ldr	r3, [r3, #28]
 800b5e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b5ea:	60bb      	str	r3, [r7, #8]
 800b5ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b5f2:	4b82      	ldr	r3, [pc, #520]	@ (800b7fc <HAL_RCC_OscConfig+0x4c8>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d118      	bne.n	800b630 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b5fe:	4b7f      	ldr	r3, [pc, #508]	@ (800b7fc <HAL_RCC_OscConfig+0x4c8>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	4a7e      	ldr	r2, [pc, #504]	@ (800b7fc <HAL_RCC_OscConfig+0x4c8>)
 800b604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b60a:	f7fd fe4f 	bl	80092ac <HAL_GetTick>
 800b60e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b610:	e008      	b.n	800b624 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b612:	f7fd fe4b 	bl	80092ac <HAL_GetTick>
 800b616:	4602      	mov	r2, r0
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	1ad3      	subs	r3, r2, r3
 800b61c:	2b64      	cmp	r3, #100	@ 0x64
 800b61e:	d901      	bls.n	800b624 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b620:	2303      	movs	r3, #3
 800b622:	e103      	b.n	800b82c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b624:	4b75      	ldr	r3, [pc, #468]	@ (800b7fc <HAL_RCC_OscConfig+0x4c8>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d0f0      	beq.n	800b612 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	68db      	ldr	r3, [r3, #12]
 800b634:	2b01      	cmp	r3, #1
 800b636:	d106      	bne.n	800b646 <HAL_RCC_OscConfig+0x312>
 800b638:	4b6f      	ldr	r3, [pc, #444]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b63a:	6a1b      	ldr	r3, [r3, #32]
 800b63c:	4a6e      	ldr	r2, [pc, #440]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b63e:	f043 0301 	orr.w	r3, r3, #1
 800b642:	6213      	str	r3, [r2, #32]
 800b644:	e02d      	b.n	800b6a2 <HAL_RCC_OscConfig+0x36e>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	68db      	ldr	r3, [r3, #12]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d10c      	bne.n	800b668 <HAL_RCC_OscConfig+0x334>
 800b64e:	4b6a      	ldr	r3, [pc, #424]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b650:	6a1b      	ldr	r3, [r3, #32]
 800b652:	4a69      	ldr	r2, [pc, #420]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b654:	f023 0301 	bic.w	r3, r3, #1
 800b658:	6213      	str	r3, [r2, #32]
 800b65a:	4b67      	ldr	r3, [pc, #412]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b65c:	6a1b      	ldr	r3, [r3, #32]
 800b65e:	4a66      	ldr	r2, [pc, #408]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b660:	f023 0304 	bic.w	r3, r3, #4
 800b664:	6213      	str	r3, [r2, #32]
 800b666:	e01c      	b.n	800b6a2 <HAL_RCC_OscConfig+0x36e>
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	68db      	ldr	r3, [r3, #12]
 800b66c:	2b05      	cmp	r3, #5
 800b66e:	d10c      	bne.n	800b68a <HAL_RCC_OscConfig+0x356>
 800b670:	4b61      	ldr	r3, [pc, #388]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b672:	6a1b      	ldr	r3, [r3, #32]
 800b674:	4a60      	ldr	r2, [pc, #384]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b676:	f043 0304 	orr.w	r3, r3, #4
 800b67a:	6213      	str	r3, [r2, #32]
 800b67c:	4b5e      	ldr	r3, [pc, #376]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b67e:	6a1b      	ldr	r3, [r3, #32]
 800b680:	4a5d      	ldr	r2, [pc, #372]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b682:	f043 0301 	orr.w	r3, r3, #1
 800b686:	6213      	str	r3, [r2, #32]
 800b688:	e00b      	b.n	800b6a2 <HAL_RCC_OscConfig+0x36e>
 800b68a:	4b5b      	ldr	r3, [pc, #364]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b68c:	6a1b      	ldr	r3, [r3, #32]
 800b68e:	4a5a      	ldr	r2, [pc, #360]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b690:	f023 0301 	bic.w	r3, r3, #1
 800b694:	6213      	str	r3, [r2, #32]
 800b696:	4b58      	ldr	r3, [pc, #352]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b698:	6a1b      	ldr	r3, [r3, #32]
 800b69a:	4a57      	ldr	r2, [pc, #348]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b69c:	f023 0304 	bic.w	r3, r3, #4
 800b6a0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	68db      	ldr	r3, [r3, #12]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d015      	beq.n	800b6d6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b6aa:	f7fd fdff 	bl	80092ac <HAL_GetTick>
 800b6ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b6b0:	e00a      	b.n	800b6c8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6b2:	f7fd fdfb 	bl	80092ac <HAL_GetTick>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	1ad3      	subs	r3, r2, r3
 800b6bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6c0:	4293      	cmp	r3, r2
 800b6c2:	d901      	bls.n	800b6c8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b6c4:	2303      	movs	r3, #3
 800b6c6:	e0b1      	b.n	800b82c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b6c8:	4b4b      	ldr	r3, [pc, #300]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b6ca:	6a1b      	ldr	r3, [r3, #32]
 800b6cc:	f003 0302 	and.w	r3, r3, #2
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d0ee      	beq.n	800b6b2 <HAL_RCC_OscConfig+0x37e>
 800b6d4:	e014      	b.n	800b700 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b6d6:	f7fd fde9 	bl	80092ac <HAL_GetTick>
 800b6da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b6dc:	e00a      	b.n	800b6f4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6de:	f7fd fde5 	bl	80092ac <HAL_GetTick>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	1ad3      	subs	r3, r2, r3
 800b6e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d901      	bls.n	800b6f4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b6f0:	2303      	movs	r3, #3
 800b6f2:	e09b      	b.n	800b82c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b6f4:	4b40      	ldr	r3, [pc, #256]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b6f6:	6a1b      	ldr	r3, [r3, #32]
 800b6f8:	f003 0302 	and.w	r3, r3, #2
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1ee      	bne.n	800b6de <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b700:	7dfb      	ldrb	r3, [r7, #23]
 800b702:	2b01      	cmp	r3, #1
 800b704:	d105      	bne.n	800b712 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b706:	4b3c      	ldr	r3, [pc, #240]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b708:	69db      	ldr	r3, [r3, #28]
 800b70a:	4a3b      	ldr	r2, [pc, #236]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b70c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b710:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	69db      	ldr	r3, [r3, #28]
 800b716:	2b00      	cmp	r3, #0
 800b718:	f000 8087 	beq.w	800b82a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b71c:	4b36      	ldr	r3, [pc, #216]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b71e:	685b      	ldr	r3, [r3, #4]
 800b720:	f003 030c 	and.w	r3, r3, #12
 800b724:	2b08      	cmp	r3, #8
 800b726:	d061      	beq.n	800b7ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	69db      	ldr	r3, [r3, #28]
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	d146      	bne.n	800b7be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b730:	4b33      	ldr	r3, [pc, #204]	@ (800b800 <HAL_RCC_OscConfig+0x4cc>)
 800b732:	2200      	movs	r2, #0
 800b734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b736:	f7fd fdb9 	bl	80092ac <HAL_GetTick>
 800b73a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b73c:	e008      	b.n	800b750 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b73e:	f7fd fdb5 	bl	80092ac <HAL_GetTick>
 800b742:	4602      	mov	r2, r0
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	1ad3      	subs	r3, r2, r3
 800b748:	2b02      	cmp	r3, #2
 800b74a:	d901      	bls.n	800b750 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b74c:	2303      	movs	r3, #3
 800b74e:	e06d      	b.n	800b82c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b750:	4b29      	ldr	r3, [pc, #164]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d1f0      	bne.n	800b73e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6a1b      	ldr	r3, [r3, #32]
 800b760:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b764:	d108      	bne.n	800b778 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b766:	4b24      	ldr	r3, [pc, #144]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b768:	685b      	ldr	r3, [r3, #4]
 800b76a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	689b      	ldr	r3, [r3, #8]
 800b772:	4921      	ldr	r1, [pc, #132]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b774:	4313      	orrs	r3, r2
 800b776:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b778:	4b1f      	ldr	r3, [pc, #124]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6a19      	ldr	r1, [r3, #32]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b788:	430b      	orrs	r3, r1
 800b78a:	491b      	ldr	r1, [pc, #108]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b78c:	4313      	orrs	r3, r2
 800b78e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b790:	4b1b      	ldr	r3, [pc, #108]	@ (800b800 <HAL_RCC_OscConfig+0x4cc>)
 800b792:	2201      	movs	r2, #1
 800b794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b796:	f7fd fd89 	bl	80092ac <HAL_GetTick>
 800b79a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b79c:	e008      	b.n	800b7b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b79e:	f7fd fd85 	bl	80092ac <HAL_GetTick>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	1ad3      	subs	r3, r2, r3
 800b7a8:	2b02      	cmp	r3, #2
 800b7aa:	d901      	bls.n	800b7b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b7ac:	2303      	movs	r3, #3
 800b7ae:	e03d      	b.n	800b82c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b7b0:	4b11      	ldr	r3, [pc, #68]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d0f0      	beq.n	800b79e <HAL_RCC_OscConfig+0x46a>
 800b7bc:	e035      	b.n	800b82a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b7be:	4b10      	ldr	r3, [pc, #64]	@ (800b800 <HAL_RCC_OscConfig+0x4cc>)
 800b7c0:	2200      	movs	r2, #0
 800b7c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b7c4:	f7fd fd72 	bl	80092ac <HAL_GetTick>
 800b7c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b7ca:	e008      	b.n	800b7de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b7cc:	f7fd fd6e 	bl	80092ac <HAL_GetTick>
 800b7d0:	4602      	mov	r2, r0
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	1ad3      	subs	r3, r2, r3
 800b7d6:	2b02      	cmp	r3, #2
 800b7d8:	d901      	bls.n	800b7de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b7da:	2303      	movs	r3, #3
 800b7dc:	e026      	b.n	800b82c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b7de:	4b06      	ldr	r3, [pc, #24]	@ (800b7f8 <HAL_RCC_OscConfig+0x4c4>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d1f0      	bne.n	800b7cc <HAL_RCC_OscConfig+0x498>
 800b7ea:	e01e      	b.n	800b82a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	69db      	ldr	r3, [r3, #28]
 800b7f0:	2b01      	cmp	r3, #1
 800b7f2:	d107      	bne.n	800b804 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	e019      	b.n	800b82c <HAL_RCC_OscConfig+0x4f8>
 800b7f8:	40021000 	.word	0x40021000
 800b7fc:	40007000 	.word	0x40007000
 800b800:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b804:	4b0b      	ldr	r3, [pc, #44]	@ (800b834 <HAL_RCC_OscConfig+0x500>)
 800b806:	685b      	ldr	r3, [r3, #4]
 800b808:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6a1b      	ldr	r3, [r3, #32]
 800b814:	429a      	cmp	r2, r3
 800b816:	d106      	bne.n	800b826 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b822:	429a      	cmp	r2, r3
 800b824:	d001      	beq.n	800b82a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b826:	2301      	movs	r3, #1
 800b828:	e000      	b.n	800b82c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b82a:	2300      	movs	r3, #0
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3718      	adds	r7, #24
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	40021000 	.word	0x40021000

0800b838 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d101      	bne.n	800b84c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b848:	2301      	movs	r3, #1
 800b84a:	e0d0      	b.n	800b9ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b84c:	4b6a      	ldr	r3, [pc, #424]	@ (800b9f8 <HAL_RCC_ClockConfig+0x1c0>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f003 0307 	and.w	r3, r3, #7
 800b854:	683a      	ldr	r2, [r7, #0]
 800b856:	429a      	cmp	r2, r3
 800b858:	d910      	bls.n	800b87c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b85a:	4b67      	ldr	r3, [pc, #412]	@ (800b9f8 <HAL_RCC_ClockConfig+0x1c0>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f023 0207 	bic.w	r2, r3, #7
 800b862:	4965      	ldr	r1, [pc, #404]	@ (800b9f8 <HAL_RCC_ClockConfig+0x1c0>)
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	4313      	orrs	r3, r2
 800b868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b86a:	4b63      	ldr	r3, [pc, #396]	@ (800b9f8 <HAL_RCC_ClockConfig+0x1c0>)
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f003 0307 	and.w	r3, r3, #7
 800b872:	683a      	ldr	r2, [r7, #0]
 800b874:	429a      	cmp	r2, r3
 800b876:	d001      	beq.n	800b87c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b878:	2301      	movs	r3, #1
 800b87a:	e0b8      	b.n	800b9ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f003 0302 	and.w	r3, r3, #2
 800b884:	2b00      	cmp	r3, #0
 800b886:	d020      	beq.n	800b8ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f003 0304 	and.w	r3, r3, #4
 800b890:	2b00      	cmp	r3, #0
 800b892:	d005      	beq.n	800b8a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b894:	4b59      	ldr	r3, [pc, #356]	@ (800b9fc <HAL_RCC_ClockConfig+0x1c4>)
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	4a58      	ldr	r2, [pc, #352]	@ (800b9fc <HAL_RCC_ClockConfig+0x1c4>)
 800b89a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800b89e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f003 0308 	and.w	r3, r3, #8
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d005      	beq.n	800b8b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b8ac:	4b53      	ldr	r3, [pc, #332]	@ (800b9fc <HAL_RCC_ClockConfig+0x1c4>)
 800b8ae:	685b      	ldr	r3, [r3, #4]
 800b8b0:	4a52      	ldr	r2, [pc, #328]	@ (800b9fc <HAL_RCC_ClockConfig+0x1c4>)
 800b8b2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800b8b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b8b8:	4b50      	ldr	r3, [pc, #320]	@ (800b9fc <HAL_RCC_ClockConfig+0x1c4>)
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	689b      	ldr	r3, [r3, #8]
 800b8c4:	494d      	ldr	r1, [pc, #308]	@ (800b9fc <HAL_RCC_ClockConfig+0x1c4>)
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f003 0301 	and.w	r3, r3, #1
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d040      	beq.n	800b958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	2b01      	cmp	r3, #1
 800b8dc:	d107      	bne.n	800b8ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b8de:	4b47      	ldr	r3, [pc, #284]	@ (800b9fc <HAL_RCC_ClockConfig+0x1c4>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d115      	bne.n	800b916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e07f      	b.n	800b9ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	2b02      	cmp	r3, #2
 800b8f4:	d107      	bne.n	800b906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b8f6:	4b41      	ldr	r3, [pc, #260]	@ (800b9fc <HAL_RCC_ClockConfig+0x1c4>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d109      	bne.n	800b916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b902:	2301      	movs	r3, #1
 800b904:	e073      	b.n	800b9ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b906:	4b3d      	ldr	r3, [pc, #244]	@ (800b9fc <HAL_RCC_ClockConfig+0x1c4>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f003 0302 	and.w	r3, r3, #2
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d101      	bne.n	800b916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b912:	2301      	movs	r3, #1
 800b914:	e06b      	b.n	800b9ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b916:	4b39      	ldr	r3, [pc, #228]	@ (800b9fc <HAL_RCC_ClockConfig+0x1c4>)
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	f023 0203 	bic.w	r2, r3, #3
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	685b      	ldr	r3, [r3, #4]
 800b922:	4936      	ldr	r1, [pc, #216]	@ (800b9fc <HAL_RCC_ClockConfig+0x1c4>)
 800b924:	4313      	orrs	r3, r2
 800b926:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b928:	f7fd fcc0 	bl	80092ac <HAL_GetTick>
 800b92c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b92e:	e00a      	b.n	800b946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b930:	f7fd fcbc 	bl	80092ac <HAL_GetTick>
 800b934:	4602      	mov	r2, r0
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	1ad3      	subs	r3, r2, r3
 800b93a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b93e:	4293      	cmp	r3, r2
 800b940:	d901      	bls.n	800b946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b942:	2303      	movs	r3, #3
 800b944:	e053      	b.n	800b9ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b946:	4b2d      	ldr	r3, [pc, #180]	@ (800b9fc <HAL_RCC_ClockConfig+0x1c4>)
 800b948:	685b      	ldr	r3, [r3, #4]
 800b94a:	f003 020c 	and.w	r2, r3, #12
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	009b      	lsls	r3, r3, #2
 800b954:	429a      	cmp	r2, r3
 800b956:	d1eb      	bne.n	800b930 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b958:	4b27      	ldr	r3, [pc, #156]	@ (800b9f8 <HAL_RCC_ClockConfig+0x1c0>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f003 0307 	and.w	r3, r3, #7
 800b960:	683a      	ldr	r2, [r7, #0]
 800b962:	429a      	cmp	r2, r3
 800b964:	d210      	bcs.n	800b988 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b966:	4b24      	ldr	r3, [pc, #144]	@ (800b9f8 <HAL_RCC_ClockConfig+0x1c0>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	f023 0207 	bic.w	r2, r3, #7
 800b96e:	4922      	ldr	r1, [pc, #136]	@ (800b9f8 <HAL_RCC_ClockConfig+0x1c0>)
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	4313      	orrs	r3, r2
 800b974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b976:	4b20      	ldr	r3, [pc, #128]	@ (800b9f8 <HAL_RCC_ClockConfig+0x1c0>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	f003 0307 	and.w	r3, r3, #7
 800b97e:	683a      	ldr	r2, [r7, #0]
 800b980:	429a      	cmp	r2, r3
 800b982:	d001      	beq.n	800b988 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b984:	2301      	movs	r3, #1
 800b986:	e032      	b.n	800b9ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f003 0304 	and.w	r3, r3, #4
 800b990:	2b00      	cmp	r3, #0
 800b992:	d008      	beq.n	800b9a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b994:	4b19      	ldr	r3, [pc, #100]	@ (800b9fc <HAL_RCC_ClockConfig+0x1c4>)
 800b996:	685b      	ldr	r3, [r3, #4]
 800b998:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	68db      	ldr	r3, [r3, #12]
 800b9a0:	4916      	ldr	r1, [pc, #88]	@ (800b9fc <HAL_RCC_ClockConfig+0x1c4>)
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f003 0308 	and.w	r3, r3, #8
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d009      	beq.n	800b9c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b9b2:	4b12      	ldr	r3, [pc, #72]	@ (800b9fc <HAL_RCC_ClockConfig+0x1c4>)
 800b9b4:	685b      	ldr	r3, [r3, #4]
 800b9b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	691b      	ldr	r3, [r3, #16]
 800b9be:	00db      	lsls	r3, r3, #3
 800b9c0:	490e      	ldr	r1, [pc, #56]	@ (800b9fc <HAL_RCC_ClockConfig+0x1c4>)
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b9c6:	f000 f821 	bl	800ba0c <HAL_RCC_GetSysClockFreq>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	4b0b      	ldr	r3, [pc, #44]	@ (800b9fc <HAL_RCC_ClockConfig+0x1c4>)
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	091b      	lsrs	r3, r3, #4
 800b9d2:	f003 030f 	and.w	r3, r3, #15
 800b9d6:	490a      	ldr	r1, [pc, #40]	@ (800ba00 <HAL_RCC_ClockConfig+0x1c8>)
 800b9d8:	5ccb      	ldrb	r3, [r1, r3]
 800b9da:	fa22 f303 	lsr.w	r3, r2, r3
 800b9de:	4a09      	ldr	r2, [pc, #36]	@ (800ba04 <HAL_RCC_ClockConfig+0x1cc>)
 800b9e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b9e2:	4b09      	ldr	r3, [pc, #36]	@ (800ba08 <HAL_RCC_ClockConfig+0x1d0>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	f7fd fc1e 	bl	8009228 <HAL_InitTick>

  return HAL_OK;
 800b9ec:	2300      	movs	r3, #0
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	40022000 	.word	0x40022000
 800b9fc:	40021000 	.word	0x40021000
 800ba00:	0800d100 	.word	0x0800d100
 800ba04:	20000f74 	.word	0x20000f74
 800ba08:	20000f78 	.word	0x20000f78

0800ba0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b087      	sub	sp, #28
 800ba10:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800ba12:	2300      	movs	r3, #0
 800ba14:	60fb      	str	r3, [r7, #12]
 800ba16:	2300      	movs	r3, #0
 800ba18:	60bb      	str	r3, [r7, #8]
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	617b      	str	r3, [r7, #20]
 800ba1e:	2300      	movs	r3, #0
 800ba20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800ba22:	2300      	movs	r3, #0
 800ba24:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800ba26:	4b1e      	ldr	r3, [pc, #120]	@ (800baa0 <HAL_RCC_GetSysClockFreq+0x94>)
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f003 030c 	and.w	r3, r3, #12
 800ba32:	2b04      	cmp	r3, #4
 800ba34:	d002      	beq.n	800ba3c <HAL_RCC_GetSysClockFreq+0x30>
 800ba36:	2b08      	cmp	r3, #8
 800ba38:	d003      	beq.n	800ba42 <HAL_RCC_GetSysClockFreq+0x36>
 800ba3a:	e027      	b.n	800ba8c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ba3c:	4b19      	ldr	r3, [pc, #100]	@ (800baa4 <HAL_RCC_GetSysClockFreq+0x98>)
 800ba3e:	613b      	str	r3, [r7, #16]
      break;
 800ba40:	e027      	b.n	800ba92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	0c9b      	lsrs	r3, r3, #18
 800ba46:	f003 030f 	and.w	r3, r3, #15
 800ba4a:	4a17      	ldr	r2, [pc, #92]	@ (800baa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800ba4c:	5cd3      	ldrb	r3, [r2, r3]
 800ba4e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d010      	beq.n	800ba7c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ba5a:	4b11      	ldr	r3, [pc, #68]	@ (800baa0 <HAL_RCC_GetSysClockFreq+0x94>)
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	0c5b      	lsrs	r3, r3, #17
 800ba60:	f003 0301 	and.w	r3, r3, #1
 800ba64:	4a11      	ldr	r2, [pc, #68]	@ (800baac <HAL_RCC_GetSysClockFreq+0xa0>)
 800ba66:	5cd3      	ldrb	r3, [r2, r3]
 800ba68:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	4a0d      	ldr	r2, [pc, #52]	@ (800baa4 <HAL_RCC_GetSysClockFreq+0x98>)
 800ba6e:	fb03 f202 	mul.w	r2, r3, r2
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba78:	617b      	str	r3, [r7, #20]
 800ba7a:	e004      	b.n	800ba86 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	4a0c      	ldr	r2, [pc, #48]	@ (800bab0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800ba80:	fb02 f303 	mul.w	r3, r2, r3
 800ba84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	613b      	str	r3, [r7, #16]
      break;
 800ba8a:	e002      	b.n	800ba92 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ba8c:	4b05      	ldr	r3, [pc, #20]	@ (800baa4 <HAL_RCC_GetSysClockFreq+0x98>)
 800ba8e:	613b      	str	r3, [r7, #16]
      break;
 800ba90:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ba92:	693b      	ldr	r3, [r7, #16]
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	371c      	adds	r7, #28
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bc80      	pop	{r7}
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	40021000 	.word	0x40021000
 800baa4:	007a1200 	.word	0x007a1200
 800baa8:	0800d118 	.word	0x0800d118
 800baac:	0800d128 	.word	0x0800d128
 800bab0:	003d0900 	.word	0x003d0900

0800bab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bab4:	b480      	push	{r7}
 800bab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bab8:	4b02      	ldr	r3, [pc, #8]	@ (800bac4 <HAL_RCC_GetHCLKFreq+0x10>)
 800baba:	681b      	ldr	r3, [r3, #0]
}
 800babc:	4618      	mov	r0, r3
 800babe:	46bd      	mov	sp, r7
 800bac0:	bc80      	pop	{r7}
 800bac2:	4770      	bx	lr
 800bac4:	20000f74 	.word	0x20000f74

0800bac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bacc:	f7ff fff2 	bl	800bab4 <HAL_RCC_GetHCLKFreq>
 800bad0:	4602      	mov	r2, r0
 800bad2:	4b05      	ldr	r3, [pc, #20]	@ (800bae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	0a1b      	lsrs	r3, r3, #8
 800bad8:	f003 0307 	and.w	r3, r3, #7
 800badc:	4903      	ldr	r1, [pc, #12]	@ (800baec <HAL_RCC_GetPCLK1Freq+0x24>)
 800bade:	5ccb      	ldrb	r3, [r1, r3]
 800bae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	40021000 	.word	0x40021000
 800baec:	0800d110 	.word	0x0800d110

0800baf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800baf4:	f7ff ffde 	bl	800bab4 <HAL_RCC_GetHCLKFreq>
 800baf8:	4602      	mov	r2, r0
 800bafa:	4b05      	ldr	r3, [pc, #20]	@ (800bb10 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bafc:	685b      	ldr	r3, [r3, #4]
 800bafe:	0adb      	lsrs	r3, r3, #11
 800bb00:	f003 0307 	and.w	r3, r3, #7
 800bb04:	4903      	ldr	r1, [pc, #12]	@ (800bb14 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bb06:	5ccb      	ldrb	r3, [r1, r3]
 800bb08:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	bd80      	pop	{r7, pc}
 800bb10:	40021000 	.word	0x40021000
 800bb14:	0800d110 	.word	0x0800d110

0800bb18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b085      	sub	sp, #20
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800bb20:	4b0a      	ldr	r3, [pc, #40]	@ (800bb4c <RCC_Delay+0x34>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a0a      	ldr	r2, [pc, #40]	@ (800bb50 <RCC_Delay+0x38>)
 800bb26:	fba2 2303 	umull	r2, r3, r2, r3
 800bb2a:	0a5b      	lsrs	r3, r3, #9
 800bb2c:	687a      	ldr	r2, [r7, #4]
 800bb2e:	fb02 f303 	mul.w	r3, r2, r3
 800bb32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800bb34:	bf00      	nop
  }
  while (Delay --);
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	1e5a      	subs	r2, r3, #1
 800bb3a:	60fa      	str	r2, [r7, #12]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d1f9      	bne.n	800bb34 <RCC_Delay+0x1c>
}
 800bb40:	bf00      	nop
 800bb42:	bf00      	nop
 800bb44:	3714      	adds	r7, #20
 800bb46:	46bd      	mov	sp, r7
 800bb48:	bc80      	pop	{r7}
 800bb4a:	4770      	bx	lr
 800bb4c:	20000f74 	.word	0x20000f74
 800bb50:	10624dd3 	.word	0x10624dd3

0800bb54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b082      	sub	sp, #8
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d101      	bne.n	800bb66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bb62:	2301      	movs	r3, #1
 800bb64:	e041      	b.n	800bbea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d106      	bne.n	800bb80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2200      	movs	r2, #0
 800bb76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f7fd fa58 	bl	8009030 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2202      	movs	r2, #2
 800bb84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	3304      	adds	r3, #4
 800bb90:	4619      	mov	r1, r3
 800bb92:	4610      	mov	r0, r2
 800bb94:	f000 fa82 	bl	800c09c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2201      	movs	r2, #1
 800bba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2201      	movs	r2, #1
 800bbdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bbe8:	2300      	movs	r3, #0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3708      	adds	r7, #8
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}
	...

0800bbf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b085      	sub	sp, #20
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc02:	b2db      	uxtb	r3, r3
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d001      	beq.n	800bc0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	e044      	b.n	800bc96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2202      	movs	r2, #2
 800bc10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	68da      	ldr	r2, [r3, #12]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f042 0201 	orr.w	r2, r2, #1
 800bc22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	4a1d      	ldr	r2, [pc, #116]	@ (800bca0 <HAL_TIM_Base_Start_IT+0xac>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d018      	beq.n	800bc60 <HAL_TIM_Base_Start_IT+0x6c>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	4a1c      	ldr	r2, [pc, #112]	@ (800bca4 <HAL_TIM_Base_Start_IT+0xb0>)
 800bc34:	4293      	cmp	r3, r2
 800bc36:	d013      	beq.n	800bc60 <HAL_TIM_Base_Start_IT+0x6c>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc40:	d00e      	beq.n	800bc60 <HAL_TIM_Base_Start_IT+0x6c>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4a18      	ldr	r2, [pc, #96]	@ (800bca8 <HAL_TIM_Base_Start_IT+0xb4>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d009      	beq.n	800bc60 <HAL_TIM_Base_Start_IT+0x6c>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a16      	ldr	r2, [pc, #88]	@ (800bcac <HAL_TIM_Base_Start_IT+0xb8>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d004      	beq.n	800bc60 <HAL_TIM_Base_Start_IT+0x6c>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4a15      	ldr	r2, [pc, #84]	@ (800bcb0 <HAL_TIM_Base_Start_IT+0xbc>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d111      	bne.n	800bc84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	689b      	ldr	r3, [r3, #8]
 800bc66:	f003 0307 	and.w	r3, r3, #7
 800bc6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	2b06      	cmp	r3, #6
 800bc70:	d010      	beq.n	800bc94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f042 0201 	orr.w	r2, r2, #1
 800bc80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc82:	e007      	b.n	800bc94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	681a      	ldr	r2, [r3, #0]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f042 0201 	orr.w	r2, r2, #1
 800bc92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bc94:	2300      	movs	r3, #0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3714      	adds	r7, #20
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bc80      	pop	{r7}
 800bc9e:	4770      	bx	lr
 800bca0:	40012c00 	.word	0x40012c00
 800bca4:	40013400 	.word	0x40013400
 800bca8:	40000400 	.word	0x40000400
 800bcac:	40000800 	.word	0x40000800
 800bcb0:	40000c00 	.word	0x40000c00

0800bcb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b082      	sub	sp, #8
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	691b      	ldr	r3, [r3, #16]
 800bcc2:	f003 0302 	and.w	r3, r3, #2
 800bcc6:	2b02      	cmp	r3, #2
 800bcc8:	d122      	bne.n	800bd10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	f003 0302 	and.w	r3, r3, #2
 800bcd4:	2b02      	cmp	r3, #2
 800bcd6:	d11b      	bne.n	800bd10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f06f 0202 	mvn.w	r2, #2
 800bce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2201      	movs	r2, #1
 800bce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	699b      	ldr	r3, [r3, #24]
 800bcee:	f003 0303 	and.w	r3, r3, #3
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d003      	beq.n	800bcfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 f9b4 	bl	800c064 <HAL_TIM_IC_CaptureCallback>
 800bcfc:	e005      	b.n	800bd0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 f9a7 	bl	800c052 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f000 f9b6 	bl	800c076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	691b      	ldr	r3, [r3, #16]
 800bd16:	f003 0304 	and.w	r3, r3, #4
 800bd1a:	2b04      	cmp	r3, #4
 800bd1c:	d122      	bne.n	800bd64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	f003 0304 	and.w	r3, r3, #4
 800bd28:	2b04      	cmp	r3, #4
 800bd2a:	d11b      	bne.n	800bd64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f06f 0204 	mvn.w	r2, #4
 800bd34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2202      	movs	r2, #2
 800bd3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	699b      	ldr	r3, [r3, #24]
 800bd42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d003      	beq.n	800bd52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 f98a 	bl	800c064 <HAL_TIM_IC_CaptureCallback>
 800bd50:	e005      	b.n	800bd5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd52:	6878      	ldr	r0, [r7, #4]
 800bd54:	f000 f97d 	bl	800c052 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f000 f98c 	bl	800c076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	2200      	movs	r2, #0
 800bd62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	691b      	ldr	r3, [r3, #16]
 800bd6a:	f003 0308 	and.w	r3, r3, #8
 800bd6e:	2b08      	cmp	r3, #8
 800bd70:	d122      	bne.n	800bdb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	f003 0308 	and.w	r3, r3, #8
 800bd7c:	2b08      	cmp	r3, #8
 800bd7e:	d11b      	bne.n	800bdb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f06f 0208 	mvn.w	r2, #8
 800bd88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2204      	movs	r2, #4
 800bd8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	69db      	ldr	r3, [r3, #28]
 800bd96:	f003 0303 	and.w	r3, r3, #3
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d003      	beq.n	800bda6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 f960 	bl	800c064 <HAL_TIM_IC_CaptureCallback>
 800bda4:	e005      	b.n	800bdb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 f953 	bl	800c052 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 f962 	bl	800c076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	691b      	ldr	r3, [r3, #16]
 800bdbe:	f003 0310 	and.w	r3, r3, #16
 800bdc2:	2b10      	cmp	r3, #16
 800bdc4:	d122      	bne.n	800be0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	f003 0310 	and.w	r3, r3, #16
 800bdd0:	2b10      	cmp	r3, #16
 800bdd2:	d11b      	bne.n	800be0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f06f 0210 	mvn.w	r2, #16
 800bddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	2208      	movs	r2, #8
 800bde2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	69db      	ldr	r3, [r3, #28]
 800bdea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d003      	beq.n	800bdfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 f936 	bl	800c064 <HAL_TIM_IC_CaptureCallback>
 800bdf8:	e005      	b.n	800be06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 f929 	bl	800c052 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f000 f938 	bl	800c076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2200      	movs	r2, #0
 800be0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	691b      	ldr	r3, [r3, #16]
 800be12:	f003 0301 	and.w	r3, r3, #1
 800be16:	2b01      	cmp	r3, #1
 800be18:	d10e      	bne.n	800be38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	68db      	ldr	r3, [r3, #12]
 800be20:	f003 0301 	and.w	r3, r3, #1
 800be24:	2b01      	cmp	r3, #1
 800be26:	d107      	bne.n	800be38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	f06f 0201 	mvn.w	r2, #1
 800be30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f7fc fd96 	bl	8008964 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be42:	2b80      	cmp	r3, #128	@ 0x80
 800be44:	d10e      	bne.n	800be64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	68db      	ldr	r3, [r3, #12]
 800be4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be50:	2b80      	cmp	r3, #128	@ 0x80
 800be52:	d107      	bne.n	800be64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800be5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800be5e:	6878      	ldr	r0, [r7, #4]
 800be60:	f000 faa1 	bl	800c3a6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	691b      	ldr	r3, [r3, #16]
 800be6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be6e:	2b40      	cmp	r3, #64	@ 0x40
 800be70:	d10e      	bne.n	800be90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be7c:	2b40      	cmp	r3, #64	@ 0x40
 800be7e:	d107      	bne.n	800be90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800be88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 f8fc 	bl	800c088 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	691b      	ldr	r3, [r3, #16]
 800be96:	f003 0320 	and.w	r3, r3, #32
 800be9a:	2b20      	cmp	r3, #32
 800be9c:	d10e      	bne.n	800bebc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	68db      	ldr	r3, [r3, #12]
 800bea4:	f003 0320 	and.w	r3, r3, #32
 800bea8:	2b20      	cmp	r3, #32
 800beaa:	d107      	bne.n	800bebc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f06f 0220 	mvn.w	r2, #32
 800beb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 fa6c 	bl	800c394 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bebc:	bf00      	nop
 800bebe:	3708      	adds	r7, #8
 800bec0:	46bd      	mov	sp, r7
 800bec2:	bd80      	pop	{r7, pc}

0800bec4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b084      	sub	sp, #16
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bece:	2300      	movs	r3, #0
 800bed0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d101      	bne.n	800bee0 <HAL_TIM_ConfigClockSource+0x1c>
 800bedc:	2302      	movs	r3, #2
 800bede:	e0b4      	b.n	800c04a <HAL_TIM_ConfigClockSource+0x186>
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2201      	movs	r2, #1
 800bee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2202      	movs	r2, #2
 800beec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800befe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bf06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	68ba      	ldr	r2, [r7, #8]
 800bf0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf18:	d03e      	beq.n	800bf98 <HAL_TIM_ConfigClockSource+0xd4>
 800bf1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bf1e:	f200 8087 	bhi.w	800c030 <HAL_TIM_ConfigClockSource+0x16c>
 800bf22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf26:	f000 8086 	beq.w	800c036 <HAL_TIM_ConfigClockSource+0x172>
 800bf2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bf2e:	d87f      	bhi.n	800c030 <HAL_TIM_ConfigClockSource+0x16c>
 800bf30:	2b70      	cmp	r3, #112	@ 0x70
 800bf32:	d01a      	beq.n	800bf6a <HAL_TIM_ConfigClockSource+0xa6>
 800bf34:	2b70      	cmp	r3, #112	@ 0x70
 800bf36:	d87b      	bhi.n	800c030 <HAL_TIM_ConfigClockSource+0x16c>
 800bf38:	2b60      	cmp	r3, #96	@ 0x60
 800bf3a:	d050      	beq.n	800bfde <HAL_TIM_ConfigClockSource+0x11a>
 800bf3c:	2b60      	cmp	r3, #96	@ 0x60
 800bf3e:	d877      	bhi.n	800c030 <HAL_TIM_ConfigClockSource+0x16c>
 800bf40:	2b50      	cmp	r3, #80	@ 0x50
 800bf42:	d03c      	beq.n	800bfbe <HAL_TIM_ConfigClockSource+0xfa>
 800bf44:	2b50      	cmp	r3, #80	@ 0x50
 800bf46:	d873      	bhi.n	800c030 <HAL_TIM_ConfigClockSource+0x16c>
 800bf48:	2b40      	cmp	r3, #64	@ 0x40
 800bf4a:	d058      	beq.n	800bffe <HAL_TIM_ConfigClockSource+0x13a>
 800bf4c:	2b40      	cmp	r3, #64	@ 0x40
 800bf4e:	d86f      	bhi.n	800c030 <HAL_TIM_ConfigClockSource+0x16c>
 800bf50:	2b30      	cmp	r3, #48	@ 0x30
 800bf52:	d064      	beq.n	800c01e <HAL_TIM_ConfigClockSource+0x15a>
 800bf54:	2b30      	cmp	r3, #48	@ 0x30
 800bf56:	d86b      	bhi.n	800c030 <HAL_TIM_ConfigClockSource+0x16c>
 800bf58:	2b20      	cmp	r3, #32
 800bf5a:	d060      	beq.n	800c01e <HAL_TIM_ConfigClockSource+0x15a>
 800bf5c:	2b20      	cmp	r3, #32
 800bf5e:	d867      	bhi.n	800c030 <HAL_TIM_ConfigClockSource+0x16c>
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d05c      	beq.n	800c01e <HAL_TIM_ConfigClockSource+0x15a>
 800bf64:	2b10      	cmp	r3, #16
 800bf66:	d05a      	beq.n	800c01e <HAL_TIM_ConfigClockSource+0x15a>
 800bf68:	e062      	b.n	800c030 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bf7a:	f000 f980 	bl	800c27e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bf8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	68ba      	ldr	r2, [r7, #8]
 800bf94:	609a      	str	r2, [r3, #8]
      break;
 800bf96:	e04f      	b.n	800c038 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bfa8:	f000 f969 	bl	800c27e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	689a      	ldr	r2, [r3, #8]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bfba:	609a      	str	r2, [r3, #8]
      break;
 800bfbc:	e03c      	b.n	800c038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bfca:	461a      	mov	r2, r3
 800bfcc:	f000 f8e0 	bl	800c190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	2150      	movs	r1, #80	@ 0x50
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f000 f937 	bl	800c24a <TIM_ITRx_SetConfig>
      break;
 800bfdc:	e02c      	b.n	800c038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bfea:	461a      	mov	r2, r3
 800bfec:	f000 f8fe 	bl	800c1ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	2160      	movs	r1, #96	@ 0x60
 800bff6:	4618      	mov	r0, r3
 800bff8:	f000 f927 	bl	800c24a <TIM_ITRx_SetConfig>
      break;
 800bffc:	e01c      	b.n	800c038 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c00a:	461a      	mov	r2, r3
 800c00c:	f000 f8c0 	bl	800c190 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2140      	movs	r1, #64	@ 0x40
 800c016:	4618      	mov	r0, r3
 800c018:	f000 f917 	bl	800c24a <TIM_ITRx_SetConfig>
      break;
 800c01c:	e00c      	b.n	800c038 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681a      	ldr	r2, [r3, #0]
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4619      	mov	r1, r3
 800c028:	4610      	mov	r0, r2
 800c02a:	f000 f90e 	bl	800c24a <TIM_ITRx_SetConfig>
      break;
 800c02e:	e003      	b.n	800c038 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c030:	2301      	movs	r3, #1
 800c032:	73fb      	strb	r3, [r7, #15]
      break;
 800c034:	e000      	b.n	800c038 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c036:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2200      	movs	r2, #0
 800c044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c048:	7bfb      	ldrb	r3, [r7, #15]
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3710      	adds	r7, #16
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}

0800c052 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c052:	b480      	push	{r7}
 800c054:	b083      	sub	sp, #12
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c05a:	bf00      	nop
 800c05c:	370c      	adds	r7, #12
 800c05e:	46bd      	mov	sp, r7
 800c060:	bc80      	pop	{r7}
 800c062:	4770      	bx	lr

0800c064 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c06c:	bf00      	nop
 800c06e:	370c      	adds	r7, #12
 800c070:	46bd      	mov	sp, r7
 800c072:	bc80      	pop	{r7}
 800c074:	4770      	bx	lr

0800c076 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c076:	b480      	push	{r7}
 800c078:	b083      	sub	sp, #12
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c07e:	bf00      	nop
 800c080:	370c      	adds	r7, #12
 800c082:	46bd      	mov	sp, r7
 800c084:	bc80      	pop	{r7}
 800c086:	4770      	bx	lr

0800c088 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c088:	b480      	push	{r7}
 800c08a:	b083      	sub	sp, #12
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c090:	bf00      	nop
 800c092:	370c      	adds	r7, #12
 800c094:	46bd      	mov	sp, r7
 800c096:	bc80      	pop	{r7}
 800c098:	4770      	bx	lr
	...

0800c09c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b085      	sub	sp, #20
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	4a33      	ldr	r2, [pc, #204]	@ (800c17c <TIM_Base_SetConfig+0xe0>)
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d013      	beq.n	800c0dc <TIM_Base_SetConfig+0x40>
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	4a32      	ldr	r2, [pc, #200]	@ (800c180 <TIM_Base_SetConfig+0xe4>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d00f      	beq.n	800c0dc <TIM_Base_SetConfig+0x40>
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0c2:	d00b      	beq.n	800c0dc <TIM_Base_SetConfig+0x40>
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	4a2f      	ldr	r2, [pc, #188]	@ (800c184 <TIM_Base_SetConfig+0xe8>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d007      	beq.n	800c0dc <TIM_Base_SetConfig+0x40>
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	4a2e      	ldr	r2, [pc, #184]	@ (800c188 <TIM_Base_SetConfig+0xec>)
 800c0d0:	4293      	cmp	r3, r2
 800c0d2:	d003      	beq.n	800c0dc <TIM_Base_SetConfig+0x40>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4a2d      	ldr	r2, [pc, #180]	@ (800c18c <TIM_Base_SetConfig+0xf0>)
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d108      	bne.n	800c0ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	68fa      	ldr	r2, [r7, #12]
 800c0ea:	4313      	orrs	r3, r2
 800c0ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4a22      	ldr	r2, [pc, #136]	@ (800c17c <TIM_Base_SetConfig+0xe0>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d013      	beq.n	800c11e <TIM_Base_SetConfig+0x82>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4a21      	ldr	r2, [pc, #132]	@ (800c180 <TIM_Base_SetConfig+0xe4>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d00f      	beq.n	800c11e <TIM_Base_SetConfig+0x82>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c104:	d00b      	beq.n	800c11e <TIM_Base_SetConfig+0x82>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	4a1e      	ldr	r2, [pc, #120]	@ (800c184 <TIM_Base_SetConfig+0xe8>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d007      	beq.n	800c11e <TIM_Base_SetConfig+0x82>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	4a1d      	ldr	r2, [pc, #116]	@ (800c188 <TIM_Base_SetConfig+0xec>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d003      	beq.n	800c11e <TIM_Base_SetConfig+0x82>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	4a1c      	ldr	r2, [pc, #112]	@ (800c18c <TIM_Base_SetConfig+0xf0>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d108      	bne.n	800c130 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	68db      	ldr	r3, [r3, #12]
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	4313      	orrs	r3, r2
 800c12e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	695b      	ldr	r3, [r3, #20]
 800c13a:	4313      	orrs	r3, r2
 800c13c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	68fa      	ldr	r2, [r7, #12]
 800c142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	689a      	ldr	r2, [r3, #8]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	681a      	ldr	r2, [r3, #0]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	4a09      	ldr	r2, [pc, #36]	@ (800c17c <TIM_Base_SetConfig+0xe0>)
 800c158:	4293      	cmp	r3, r2
 800c15a:	d003      	beq.n	800c164 <TIM_Base_SetConfig+0xc8>
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	4a08      	ldr	r2, [pc, #32]	@ (800c180 <TIM_Base_SetConfig+0xe4>)
 800c160:	4293      	cmp	r3, r2
 800c162:	d103      	bne.n	800c16c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	691a      	ldr	r2, [r3, #16]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2201      	movs	r2, #1
 800c170:	615a      	str	r2, [r3, #20]
}
 800c172:	bf00      	nop
 800c174:	3714      	adds	r7, #20
 800c176:	46bd      	mov	sp, r7
 800c178:	bc80      	pop	{r7}
 800c17a:	4770      	bx	lr
 800c17c:	40012c00 	.word	0x40012c00
 800c180:	40013400 	.word	0x40013400
 800c184:	40000400 	.word	0x40000400
 800c188:	40000800 	.word	0x40000800
 800c18c:	40000c00 	.word	0x40000c00

0800c190 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c190:	b480      	push	{r7}
 800c192:	b087      	sub	sp, #28
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	6a1b      	ldr	r3, [r3, #32]
 800c1a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	6a1b      	ldr	r3, [r3, #32]
 800c1a6:	f023 0201 	bic.w	r2, r3, #1
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	699b      	ldr	r3, [r3, #24]
 800c1b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c1b4:	693b      	ldr	r3, [r7, #16]
 800c1b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c1ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	011b      	lsls	r3, r3, #4
 800c1c0:	693a      	ldr	r2, [r7, #16]
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	f023 030a 	bic.w	r3, r3, #10
 800c1cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c1ce:	697a      	ldr	r2, [r7, #20]
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	693a      	ldr	r2, [r7, #16]
 800c1da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	697a      	ldr	r2, [r7, #20]
 800c1e0:	621a      	str	r2, [r3, #32]
}
 800c1e2:	bf00      	nop
 800c1e4:	371c      	adds	r7, #28
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bc80      	pop	{r7}
 800c1ea:	4770      	bx	lr

0800c1ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b087      	sub	sp, #28
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	6a1b      	ldr	r3, [r3, #32]
 800c1fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6a1b      	ldr	r3, [r3, #32]
 800c202:	f023 0210 	bic.w	r2, r3, #16
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	699b      	ldr	r3, [r3, #24]
 800c20e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	031b      	lsls	r3, r3, #12
 800c21c:	693a      	ldr	r2, [r7, #16]
 800c21e:	4313      	orrs	r3, r2
 800c220:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c228:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	011b      	lsls	r3, r3, #4
 800c22e:	697a      	ldr	r2, [r7, #20]
 800c230:	4313      	orrs	r3, r2
 800c232:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	693a      	ldr	r2, [r7, #16]
 800c238:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	697a      	ldr	r2, [r7, #20]
 800c23e:	621a      	str	r2, [r3, #32]
}
 800c240:	bf00      	nop
 800c242:	371c      	adds	r7, #28
 800c244:	46bd      	mov	sp, r7
 800c246:	bc80      	pop	{r7}
 800c248:	4770      	bx	lr

0800c24a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c24a:	b480      	push	{r7}
 800c24c:	b085      	sub	sp, #20
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
 800c252:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c260:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c262:	683a      	ldr	r2, [r7, #0]
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	4313      	orrs	r3, r2
 800c268:	f043 0307 	orr.w	r3, r3, #7
 800c26c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	68fa      	ldr	r2, [r7, #12]
 800c272:	609a      	str	r2, [r3, #8]
}
 800c274:	bf00      	nop
 800c276:	3714      	adds	r7, #20
 800c278:	46bd      	mov	sp, r7
 800c27a:	bc80      	pop	{r7}
 800c27c:	4770      	bx	lr

0800c27e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c27e:	b480      	push	{r7}
 800c280:	b087      	sub	sp, #28
 800c282:	af00      	add	r7, sp, #0
 800c284:	60f8      	str	r0, [r7, #12]
 800c286:	60b9      	str	r1, [r7, #8]
 800c288:	607a      	str	r2, [r7, #4]
 800c28a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	689b      	ldr	r3, [r3, #8]
 800c290:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c298:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c29a:	683b      	ldr	r3, [r7, #0]
 800c29c:	021a      	lsls	r2, r3, #8
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	431a      	orrs	r2, r3
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	697a      	ldr	r2, [r7, #20]
 800c2a8:	4313      	orrs	r3, r2
 800c2aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	697a      	ldr	r2, [r7, #20]
 800c2b0:	609a      	str	r2, [r3, #8]
}
 800c2b2:	bf00      	nop
 800c2b4:	371c      	adds	r7, #28
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bc80      	pop	{r7}
 800c2ba:	4770      	bx	lr

0800c2bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b085      	sub	sp, #20
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
 800c2c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d101      	bne.n	800c2d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c2d0:	2302      	movs	r3, #2
 800c2d2:	e050      	b.n	800c376 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2201      	movs	r2, #1
 800c2d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2202      	movs	r2, #2
 800c2e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	689b      	ldr	r3, [r3, #8]
 800c2f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	68fa      	ldr	r2, [r7, #12]
 800c302:	4313      	orrs	r3, r2
 800c304:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	68fa      	ldr	r2, [r7, #12]
 800c30c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4a1b      	ldr	r2, [pc, #108]	@ (800c380 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c314:	4293      	cmp	r3, r2
 800c316:	d018      	beq.n	800c34a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a19      	ldr	r2, [pc, #100]	@ (800c384 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d013      	beq.n	800c34a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c32a:	d00e      	beq.n	800c34a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4a15      	ldr	r2, [pc, #84]	@ (800c388 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d009      	beq.n	800c34a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a14      	ldr	r2, [pc, #80]	@ (800c38c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d004      	beq.n	800c34a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a12      	ldr	r2, [pc, #72]	@ (800c390 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d10c      	bne.n	800c364 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	68ba      	ldr	r2, [r7, #8]
 800c358:	4313      	orrs	r3, r2
 800c35a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	68ba      	ldr	r2, [r7, #8]
 800c362:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2201      	movs	r2, #1
 800c368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2200      	movs	r2, #0
 800c370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c374:	2300      	movs	r3, #0
}
 800c376:	4618      	mov	r0, r3
 800c378:	3714      	adds	r7, #20
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bc80      	pop	{r7}
 800c37e:	4770      	bx	lr
 800c380:	40012c00 	.word	0x40012c00
 800c384:	40013400 	.word	0x40013400
 800c388:	40000400 	.word	0x40000400
 800c38c:	40000800 	.word	0x40000800
 800c390:	40000c00 	.word	0x40000c00

0800c394 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c39c:	bf00      	nop
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bc80      	pop	{r7}
 800c3a4:	4770      	bx	lr

0800c3a6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c3a6:	b480      	push	{r7}
 800c3a8:	b083      	sub	sp, #12
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c3ae:	bf00      	nop
 800c3b0:	370c      	adds	r7, #12
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bc80      	pop	{r7}
 800c3b6:	4770      	bx	lr

0800c3b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d101      	bne.n	800c3ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	e042      	b.n	800c450 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d106      	bne.n	800c3e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f7fc fe4c 	bl	800907c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2224      	movs	r2, #36	@ 0x24
 800c3e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	68da      	ldr	r2, [r3, #12]
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c3fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f000 fc7f 	bl	800cd00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	691a      	ldr	r2, [r3, #16]
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c410:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	695a      	ldr	r2, [r3, #20]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c420:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	68da      	ldr	r2, [r3, #12]
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c430:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2200      	movs	r2, #0
 800c436:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2220      	movs	r2, #32
 800c43c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2220      	movs	r2, #32
 800c444:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2200      	movs	r2, #0
 800c44c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c44e:	2300      	movs	r3, #0
}
 800c450:	4618      	mov	r0, r3
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b0ba      	sub	sp, #232	@ 0xe8
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	695b      	ldr	r3, [r3, #20]
 800c47a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c47e:	2300      	movs	r3, #0
 800c480:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c484:	2300      	movs	r3, #0
 800c486:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c48a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c48e:	f003 030f 	and.w	r3, r3, #15
 800c492:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c496:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d10f      	bne.n	800c4be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c49e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4a2:	f003 0320 	and.w	r3, r3, #32
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d009      	beq.n	800c4be <HAL_UART_IRQHandler+0x66>
 800c4aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4ae:	f003 0320 	and.w	r3, r3, #32
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d003      	beq.n	800c4be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 fb63 	bl	800cb82 <UART_Receive_IT>
      return;
 800c4bc:	e25b      	b.n	800c976 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c4be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	f000 80de 	beq.w	800c684 <HAL_UART_IRQHandler+0x22c>
 800c4c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4cc:	f003 0301 	and.w	r3, r3, #1
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d106      	bne.n	800c4e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c4d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	f000 80d1 	beq.w	800c684 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c4e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4e6:	f003 0301 	and.w	r3, r3, #1
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d00b      	beq.n	800c506 <HAL_UART_IRQHandler+0xae>
 800c4ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d005      	beq.n	800c506 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4fe:	f043 0201 	orr.w	r2, r3, #1
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c50a:	f003 0304 	and.w	r3, r3, #4
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00b      	beq.n	800c52a <HAL_UART_IRQHandler+0xd2>
 800c512:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c516:	f003 0301 	and.w	r3, r3, #1
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d005      	beq.n	800c52a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c522:	f043 0202 	orr.w	r2, r3, #2
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c52a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c52e:	f003 0302 	and.w	r3, r3, #2
 800c532:	2b00      	cmp	r3, #0
 800c534:	d00b      	beq.n	800c54e <HAL_UART_IRQHandler+0xf6>
 800c536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c53a:	f003 0301 	and.w	r3, r3, #1
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d005      	beq.n	800c54e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c546:	f043 0204 	orr.w	r2, r3, #4
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c54e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c552:	f003 0308 	and.w	r3, r3, #8
 800c556:	2b00      	cmp	r3, #0
 800c558:	d011      	beq.n	800c57e <HAL_UART_IRQHandler+0x126>
 800c55a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c55e:	f003 0320 	and.w	r3, r3, #32
 800c562:	2b00      	cmp	r3, #0
 800c564:	d105      	bne.n	800c572 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c56a:	f003 0301 	and.w	r3, r3, #1
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d005      	beq.n	800c57e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c576:	f043 0208 	orr.w	r2, r3, #8
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c582:	2b00      	cmp	r3, #0
 800c584:	f000 81f2 	beq.w	800c96c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c58c:	f003 0320 	and.w	r3, r3, #32
 800c590:	2b00      	cmp	r3, #0
 800c592:	d008      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x14e>
 800c594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c598:	f003 0320 	and.w	r3, r3, #32
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d002      	beq.n	800c5a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 faee 	bl	800cb82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	695b      	ldr	r3, [r3, #20]
 800c5ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	bf14      	ite	ne
 800c5b4:	2301      	movne	r3, #1
 800c5b6:	2300      	moveq	r3, #0
 800c5b8:	b2db      	uxtb	r3, r3
 800c5ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5c2:	f003 0308 	and.w	r3, r3, #8
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d103      	bne.n	800c5d2 <HAL_UART_IRQHandler+0x17a>
 800c5ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d04f      	beq.n	800c672 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 f9f8 	bl	800c9c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	695b      	ldr	r3, [r3, #20]
 800c5de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d041      	beq.n	800c66a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	3314      	adds	r3, #20
 800c5ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c5f4:	e853 3f00 	ldrex	r3, [r3]
 800c5f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c5fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c600:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c604:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	3314      	adds	r3, #20
 800c60e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c612:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c616:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c61a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c61e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c622:	e841 2300 	strex	r3, r2, [r1]
 800c626:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c62a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d1d9      	bne.n	800c5e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c636:	2b00      	cmp	r3, #0
 800c638:	d013      	beq.n	800c662 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c63e:	4a7e      	ldr	r2, [pc, #504]	@ (800c838 <HAL_UART_IRQHandler+0x3e0>)
 800c640:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c646:	4618      	mov	r0, r3
 800c648:	f7fd f8a2 	bl	8009790 <HAL_DMA_Abort_IT>
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d016      	beq.n	800c680 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c65c:	4610      	mov	r0, r2
 800c65e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c660:	e00e      	b.n	800c680 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 f99c 	bl	800c9a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c668:	e00a      	b.n	800c680 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 f998 	bl	800c9a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c670:	e006      	b.n	800c680 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f000 f994 	bl	800c9a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	2200      	movs	r2, #0
 800c67c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c67e:	e175      	b.n	800c96c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c680:	bf00      	nop
    return;
 800c682:	e173      	b.n	800c96c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c688:	2b01      	cmp	r3, #1
 800c68a:	f040 814f 	bne.w	800c92c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c68e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c692:	f003 0310 	and.w	r3, r3, #16
 800c696:	2b00      	cmp	r3, #0
 800c698:	f000 8148 	beq.w	800c92c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c69c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6a0:	f003 0310 	and.w	r3, r3, #16
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	f000 8141 	beq.w	800c92c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	60bb      	str	r3, [r7, #8]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	60bb      	str	r3, [r7, #8]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	60bb      	str	r3, [r7, #8]
 800c6be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	695b      	ldr	r3, [r3, #20]
 800c6c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	f000 80b6 	beq.w	800c83c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c6dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f000 8145 	beq.w	800c970 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c6ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	f080 813e 	bcs.w	800c970 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c6fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c700:	699b      	ldr	r3, [r3, #24]
 800c702:	2b20      	cmp	r3, #32
 800c704:	f000 8088 	beq.w	800c818 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	330c      	adds	r3, #12
 800c70e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c712:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c716:	e853 3f00 	ldrex	r3, [r3]
 800c71a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c71e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c722:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c726:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	330c      	adds	r3, #12
 800c730:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c734:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c738:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c73c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c740:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c744:	e841 2300 	strex	r3, r2, [r1]
 800c748:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c74c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c750:	2b00      	cmp	r3, #0
 800c752:	d1d9      	bne.n	800c708 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	3314      	adds	r3, #20
 800c75a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c75e:	e853 3f00 	ldrex	r3, [r3]
 800c762:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c764:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c766:	f023 0301 	bic.w	r3, r3, #1
 800c76a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	3314      	adds	r3, #20
 800c774:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c778:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c77c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c780:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c784:	e841 2300 	strex	r3, r2, [r1]
 800c788:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c78a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d1e1      	bne.n	800c754 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	3314      	adds	r3, #20
 800c796:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c798:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c79a:	e853 3f00 	ldrex	r3, [r3]
 800c79e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c7a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	3314      	adds	r3, #20
 800c7b0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c7b4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c7b6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c7ba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c7bc:	e841 2300 	strex	r3, r2, [r1]
 800c7c0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c7c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d1e3      	bne.n	800c790 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2220      	movs	r2, #32
 800c7cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	330c      	adds	r3, #12
 800c7dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c7e0:	e853 3f00 	ldrex	r3, [r3]
 800c7e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c7e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7e8:	f023 0310 	bic.w	r3, r3, #16
 800c7ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	330c      	adds	r3, #12
 800c7f6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c7fa:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c7fc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c800:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c802:	e841 2300 	strex	r3, r2, [r1]
 800c806:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c808:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d1e3      	bne.n	800c7d6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c812:	4618      	mov	r0, r3
 800c814:	f7fc ff81 	bl	800971a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2202      	movs	r2, #2
 800c81c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c826:	b29b      	uxth	r3, r3
 800c828:	1ad3      	subs	r3, r2, r3
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	4619      	mov	r1, r3
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 f8bf 	bl	800c9b2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c834:	e09c      	b.n	800c970 <HAL_UART_IRQHandler+0x518>
 800c836:	bf00      	nop
 800c838:	0800ca8d 	.word	0x0800ca8d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c844:	b29b      	uxth	r3, r3
 800c846:	1ad3      	subs	r3, r2, r3
 800c848:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c850:	b29b      	uxth	r3, r3
 800c852:	2b00      	cmp	r3, #0
 800c854:	f000 808e 	beq.w	800c974 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c858:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	f000 8089 	beq.w	800c974 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	330c      	adds	r3, #12
 800c868:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c86a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c86c:	e853 3f00 	ldrex	r3, [r3]
 800c870:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c874:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c878:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	330c      	adds	r3, #12
 800c882:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c886:	647a      	str	r2, [r7, #68]	@ 0x44
 800c888:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c88a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c88c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c88e:	e841 2300 	strex	r3, r2, [r1]
 800c892:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c896:	2b00      	cmp	r3, #0
 800c898:	d1e3      	bne.n	800c862 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	3314      	adds	r3, #20
 800c8a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a4:	e853 3f00 	ldrex	r3, [r3]
 800c8a8:	623b      	str	r3, [r7, #32]
   return(result);
 800c8aa:	6a3b      	ldr	r3, [r7, #32]
 800c8ac:	f023 0301 	bic.w	r3, r3, #1
 800c8b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	3314      	adds	r3, #20
 800c8ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c8be:	633a      	str	r2, [r7, #48]	@ 0x30
 800c8c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c8c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8c6:	e841 2300 	strex	r3, r2, [r1]
 800c8ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c8cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d1e3      	bne.n	800c89a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2220      	movs	r2, #32
 800c8d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	2200      	movs	r2, #0
 800c8de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	330c      	adds	r3, #12
 800c8e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	e853 3f00 	ldrex	r3, [r3]
 800c8ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f023 0310 	bic.w	r3, r3, #16
 800c8f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	330c      	adds	r3, #12
 800c900:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c904:	61fa      	str	r2, [r7, #28]
 800c906:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c908:	69b9      	ldr	r1, [r7, #24]
 800c90a:	69fa      	ldr	r2, [r7, #28]
 800c90c:	e841 2300 	strex	r3, r2, [r1]
 800c910:	617b      	str	r3, [r7, #20]
   return(result);
 800c912:	697b      	ldr	r3, [r7, #20]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d1e3      	bne.n	800c8e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2202      	movs	r2, #2
 800c91c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c91e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c922:	4619      	mov	r1, r3
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f000 f844 	bl	800c9b2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c92a:	e023      	b.n	800c974 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c92c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c930:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c934:	2b00      	cmp	r3, #0
 800c936:	d009      	beq.n	800c94c <HAL_UART_IRQHandler+0x4f4>
 800c938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c93c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c940:	2b00      	cmp	r3, #0
 800c942:	d003      	beq.n	800c94c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 f8b5 	bl	800cab4 <UART_Transmit_IT>
    return;
 800c94a:	e014      	b.n	800c976 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c94c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c950:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c954:	2b00      	cmp	r3, #0
 800c956:	d00e      	beq.n	800c976 <HAL_UART_IRQHandler+0x51e>
 800c958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c95c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c960:	2b00      	cmp	r3, #0
 800c962:	d008      	beq.n	800c976 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 f8f4 	bl	800cb52 <UART_EndTransmit_IT>
    return;
 800c96a:	e004      	b.n	800c976 <HAL_UART_IRQHandler+0x51e>
    return;
 800c96c:	bf00      	nop
 800c96e:	e002      	b.n	800c976 <HAL_UART_IRQHandler+0x51e>
      return;
 800c970:	bf00      	nop
 800c972:	e000      	b.n	800c976 <HAL_UART_IRQHandler+0x51e>
      return;
 800c974:	bf00      	nop
  }
}
 800c976:	37e8      	adds	r7, #232	@ 0xe8
 800c978:	46bd      	mov	sp, r7
 800c97a:	bd80      	pop	{r7, pc}

0800c97c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b083      	sub	sp, #12
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c984:	bf00      	nop
 800c986:	370c      	adds	r7, #12
 800c988:	46bd      	mov	sp, r7
 800c98a:	bc80      	pop	{r7}
 800c98c:	4770      	bx	lr

0800c98e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c98e:	b480      	push	{r7}
 800c990:	b083      	sub	sp, #12
 800c992:	af00      	add	r7, sp, #0
 800c994:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c996:	bf00      	nop
 800c998:	370c      	adds	r7, #12
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bc80      	pop	{r7}
 800c99e:	4770      	bx	lr

0800c9a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c9a0:	b480      	push	{r7}
 800c9a2:	b083      	sub	sp, #12
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c9a8:	bf00      	nop
 800c9aa:	370c      	adds	r7, #12
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bc80      	pop	{r7}
 800c9b0:	4770      	bx	lr

0800c9b2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c9b2:	b480      	push	{r7}
 800c9b4:	b083      	sub	sp, #12
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
 800c9ba:	460b      	mov	r3, r1
 800c9bc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c9be:	bf00      	nop
 800c9c0:	370c      	adds	r7, #12
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bc80      	pop	{r7}
 800c9c6:	4770      	bx	lr

0800c9c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c9c8:	b480      	push	{r7}
 800c9ca:	b095      	sub	sp, #84	@ 0x54
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	330c      	adds	r3, #12
 800c9d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c9da:	e853 3f00 	ldrex	r3, [r3]
 800c9de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c9e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	330c      	adds	r3, #12
 800c9ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c9f0:	643a      	str	r2, [r7, #64]	@ 0x40
 800c9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c9f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c9f8:	e841 2300 	strex	r3, r2, [r1]
 800c9fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c9fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d1e5      	bne.n	800c9d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	3314      	adds	r3, #20
 800ca0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca0c:	6a3b      	ldr	r3, [r7, #32]
 800ca0e:	e853 3f00 	ldrex	r3, [r3]
 800ca12:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	f023 0301 	bic.w	r3, r3, #1
 800ca1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	3314      	adds	r3, #20
 800ca22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ca26:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca2c:	e841 2300 	strex	r3, r2, [r1]
 800ca30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ca32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d1e5      	bne.n	800ca04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca3c:	2b01      	cmp	r3, #1
 800ca3e:	d119      	bne.n	800ca74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	330c      	adds	r3, #12
 800ca46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	e853 3f00 	ldrex	r3, [r3]
 800ca4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca50:	68bb      	ldr	r3, [r7, #8]
 800ca52:	f023 0310 	bic.w	r3, r3, #16
 800ca56:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	330c      	adds	r3, #12
 800ca5e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca60:	61ba      	str	r2, [r7, #24]
 800ca62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca64:	6979      	ldr	r1, [r7, #20]
 800ca66:	69ba      	ldr	r2, [r7, #24]
 800ca68:	e841 2300 	strex	r3, r2, [r1]
 800ca6c:	613b      	str	r3, [r7, #16]
   return(result);
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d1e5      	bne.n	800ca40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2220      	movs	r2, #32
 800ca78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ca82:	bf00      	nop
 800ca84:	3754      	adds	r7, #84	@ 0x54
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bc80      	pop	{r7}
 800ca8a:	4770      	bx	lr

0800ca8c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b084      	sub	sp, #16
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	2200      	movs	r2, #0
 800caa4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800caa6:	68f8      	ldr	r0, [r7, #12]
 800caa8:	f7ff ff7a 	bl	800c9a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800caac:	bf00      	nop
 800caae:	3710      	adds	r7, #16
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b085      	sub	sp, #20
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	2b21      	cmp	r3, #33	@ 0x21
 800cac6:	d13e      	bne.n	800cb46 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	689b      	ldr	r3, [r3, #8]
 800cacc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cad0:	d114      	bne.n	800cafc <UART_Transmit_IT+0x48>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	691b      	ldr	r3, [r3, #16]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d110      	bne.n	800cafc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6a1b      	ldr	r3, [r3, #32]
 800cade:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	881b      	ldrh	r3, [r3, #0]
 800cae4:	461a      	mov	r2, r3
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800caee:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	6a1b      	ldr	r3, [r3, #32]
 800caf4:	1c9a      	adds	r2, r3, #2
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	621a      	str	r2, [r3, #32]
 800cafa:	e008      	b.n	800cb0e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6a1b      	ldr	r3, [r3, #32]
 800cb00:	1c59      	adds	r1, r3, #1
 800cb02:	687a      	ldr	r2, [r7, #4]
 800cb04:	6211      	str	r1, [r2, #32]
 800cb06:	781a      	ldrb	r2, [r3, #0]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cb12:	b29b      	uxth	r3, r3
 800cb14:	3b01      	subs	r3, #1
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	687a      	ldr	r2, [r7, #4]
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d10f      	bne.n	800cb42 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	68da      	ldr	r2, [r3, #12]
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cb30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	68da      	ldr	r2, [r3, #12]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cb40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cb42:	2300      	movs	r3, #0
 800cb44:	e000      	b.n	800cb48 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cb46:	2302      	movs	r3, #2
  }
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3714      	adds	r7, #20
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bc80      	pop	{r7}
 800cb50:	4770      	bx	lr

0800cb52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cb52:	b580      	push	{r7, lr}
 800cb54:	b082      	sub	sp, #8
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	68da      	ldr	r2, [r3, #12]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cb68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2220      	movs	r2, #32
 800cb6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f7ff ff02 	bl	800c97c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cb78:	2300      	movs	r3, #0
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3708      	adds	r7, #8
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b08c      	sub	sp, #48	@ 0x30
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	2b22      	cmp	r3, #34	@ 0x22
 800cb94:	f040 80ae 	bne.w	800ccf4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	689b      	ldr	r3, [r3, #8]
 800cb9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cba0:	d117      	bne.n	800cbd2 <UART_Receive_IT+0x50>
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	691b      	ldr	r3, [r3, #16]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d113      	bne.n	800cbd2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbb2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	685b      	ldr	r3, [r3, #4]
 800cbba:	b29b      	uxth	r3, r3
 800cbbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbc0:	b29a      	uxth	r2, r3
 800cbc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbca:	1c9a      	adds	r2, r3, #2
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	629a      	str	r2, [r3, #40]	@ 0x28
 800cbd0:	e026      	b.n	800cc20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	689b      	ldr	r3, [r3, #8]
 800cbe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbe4:	d007      	beq.n	800cbf6 <UART_Receive_IT+0x74>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	689b      	ldr	r3, [r3, #8]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d10a      	bne.n	800cc04 <UART_Receive_IT+0x82>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	691b      	ldr	r3, [r3, #16]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d106      	bne.n	800cc04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	685b      	ldr	r3, [r3, #4]
 800cbfc:	b2da      	uxtb	r2, r3
 800cbfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc00:	701a      	strb	r2, [r3, #0]
 800cc02:	e008      	b.n	800cc16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	b2db      	uxtb	r3, r3
 800cc0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc10:	b2da      	uxtb	r2, r3
 800cc12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc1a:	1c5a      	adds	r2, r3, #1
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cc24:	b29b      	uxth	r3, r3
 800cc26:	3b01      	subs	r3, #1
 800cc28:	b29b      	uxth	r3, r3
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	4619      	mov	r1, r3
 800cc2e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d15d      	bne.n	800ccf0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	68da      	ldr	r2, [r3, #12]
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f022 0220 	bic.w	r2, r2, #32
 800cc42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	68da      	ldr	r2, [r3, #12]
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cc52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	695a      	ldr	r2, [r3, #20]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f022 0201 	bic.w	r2, r2, #1
 800cc62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2220      	movs	r2, #32
 800cc68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cc76:	2b01      	cmp	r3, #1
 800cc78:	d135      	bne.n	800cce6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	330c      	adds	r3, #12
 800cc86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	e853 3f00 	ldrex	r3, [r3]
 800cc8e:	613b      	str	r3, [r7, #16]
   return(result);
 800cc90:	693b      	ldr	r3, [r7, #16]
 800cc92:	f023 0310 	bic.w	r3, r3, #16
 800cc96:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	330c      	adds	r3, #12
 800cc9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cca0:	623a      	str	r2, [r7, #32]
 800cca2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca4:	69f9      	ldr	r1, [r7, #28]
 800cca6:	6a3a      	ldr	r2, [r7, #32]
 800cca8:	e841 2300 	strex	r3, r2, [r1]
 800ccac:	61bb      	str	r3, [r7, #24]
   return(result);
 800ccae:	69bb      	ldr	r3, [r7, #24]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d1e5      	bne.n	800cc80 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f003 0310 	and.w	r3, r3, #16
 800ccbe:	2b10      	cmp	r3, #16
 800ccc0:	d10a      	bne.n	800ccd8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	60fb      	str	r3, [r7, #12]
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	60fb      	str	r3, [r7, #12]
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	685b      	ldr	r3, [r3, #4]
 800ccd4:	60fb      	str	r3, [r7, #12]
 800ccd6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ccdc:	4619      	mov	r1, r3
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f7ff fe67 	bl	800c9b2 <HAL_UARTEx_RxEventCallback>
 800cce4:	e002      	b.n	800ccec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cce6:	6878      	ldr	r0, [r7, #4]
 800cce8:	f7ff fe51 	bl	800c98e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ccec:	2300      	movs	r3, #0
 800ccee:	e002      	b.n	800ccf6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	e000      	b.n	800ccf6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ccf4:	2302      	movs	r3, #2
  }
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3730      	adds	r7, #48	@ 0x30
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}
	...

0800cd00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	691b      	ldr	r3, [r3, #16]
 800cd0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	68da      	ldr	r2, [r3, #12]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	430a      	orrs	r2, r1
 800cd1c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	689a      	ldr	r2, [r3, #8]
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	691b      	ldr	r3, [r3, #16]
 800cd26:	431a      	orrs	r2, r3
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	695b      	ldr	r3, [r3, #20]
 800cd2c:	4313      	orrs	r3, r2
 800cd2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	68db      	ldr	r3, [r3, #12]
 800cd36:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800cd3a:	f023 030c 	bic.w	r3, r3, #12
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	6812      	ldr	r2, [r2, #0]
 800cd42:	68b9      	ldr	r1, [r7, #8]
 800cd44:	430b      	orrs	r3, r1
 800cd46:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	695b      	ldr	r3, [r3, #20]
 800cd4e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	699a      	ldr	r2, [r3, #24]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	430a      	orrs	r2, r1
 800cd5c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	4a2c      	ldr	r2, [pc, #176]	@ (800ce14 <UART_SetConfig+0x114>)
 800cd64:	4293      	cmp	r3, r2
 800cd66:	d103      	bne.n	800cd70 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800cd68:	f7fe fec2 	bl	800baf0 <HAL_RCC_GetPCLK2Freq>
 800cd6c:	60f8      	str	r0, [r7, #12]
 800cd6e:	e002      	b.n	800cd76 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800cd70:	f7fe feaa 	bl	800bac8 <HAL_RCC_GetPCLK1Freq>
 800cd74:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cd76:	68fa      	ldr	r2, [r7, #12]
 800cd78:	4613      	mov	r3, r2
 800cd7a:	009b      	lsls	r3, r3, #2
 800cd7c:	4413      	add	r3, r2
 800cd7e:	009a      	lsls	r2, r3, #2
 800cd80:	441a      	add	r2, r3
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	009b      	lsls	r3, r3, #2
 800cd88:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd8c:	4a22      	ldr	r2, [pc, #136]	@ (800ce18 <UART_SetConfig+0x118>)
 800cd8e:	fba2 2303 	umull	r2, r3, r2, r3
 800cd92:	095b      	lsrs	r3, r3, #5
 800cd94:	0119      	lsls	r1, r3, #4
 800cd96:	68fa      	ldr	r2, [r7, #12]
 800cd98:	4613      	mov	r3, r2
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	4413      	add	r3, r2
 800cd9e:	009a      	lsls	r2, r3, #2
 800cda0:	441a      	add	r2, r3
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	fbb2 f2f3 	udiv	r2, r2, r3
 800cdac:	4b1a      	ldr	r3, [pc, #104]	@ (800ce18 <UART_SetConfig+0x118>)
 800cdae:	fba3 0302 	umull	r0, r3, r3, r2
 800cdb2:	095b      	lsrs	r3, r3, #5
 800cdb4:	2064      	movs	r0, #100	@ 0x64
 800cdb6:	fb00 f303 	mul.w	r3, r0, r3
 800cdba:	1ad3      	subs	r3, r2, r3
 800cdbc:	011b      	lsls	r3, r3, #4
 800cdbe:	3332      	adds	r3, #50	@ 0x32
 800cdc0:	4a15      	ldr	r2, [pc, #84]	@ (800ce18 <UART_SetConfig+0x118>)
 800cdc2:	fba2 2303 	umull	r2, r3, r2, r3
 800cdc6:	095b      	lsrs	r3, r3, #5
 800cdc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cdcc:	4419      	add	r1, r3
 800cdce:	68fa      	ldr	r2, [r7, #12]
 800cdd0:	4613      	mov	r3, r2
 800cdd2:	009b      	lsls	r3, r3, #2
 800cdd4:	4413      	add	r3, r2
 800cdd6:	009a      	lsls	r2, r3, #2
 800cdd8:	441a      	add	r2, r3
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	fbb2 f2f3 	udiv	r2, r2, r3
 800cde4:	4b0c      	ldr	r3, [pc, #48]	@ (800ce18 <UART_SetConfig+0x118>)
 800cde6:	fba3 0302 	umull	r0, r3, r3, r2
 800cdea:	095b      	lsrs	r3, r3, #5
 800cdec:	2064      	movs	r0, #100	@ 0x64
 800cdee:	fb00 f303 	mul.w	r3, r0, r3
 800cdf2:	1ad3      	subs	r3, r2, r3
 800cdf4:	011b      	lsls	r3, r3, #4
 800cdf6:	3332      	adds	r3, #50	@ 0x32
 800cdf8:	4a07      	ldr	r2, [pc, #28]	@ (800ce18 <UART_SetConfig+0x118>)
 800cdfa:	fba2 2303 	umull	r2, r3, r2, r3
 800cdfe:	095b      	lsrs	r3, r3, #5
 800ce00:	f003 020f 	and.w	r2, r3, #15
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	440a      	add	r2, r1
 800ce0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800ce0c:	bf00      	nop
 800ce0e:	3710      	adds	r7, #16
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	40013800 	.word	0x40013800
 800ce18:	51eb851f 	.word	0x51eb851f

0800ce1c <__itoa>:
 800ce1c:	1e93      	subs	r3, r2, #2
 800ce1e:	2b22      	cmp	r3, #34	@ 0x22
 800ce20:	b510      	push	{r4, lr}
 800ce22:	460c      	mov	r4, r1
 800ce24:	d904      	bls.n	800ce30 <__itoa+0x14>
 800ce26:	2300      	movs	r3, #0
 800ce28:	461c      	mov	r4, r3
 800ce2a:	700b      	strb	r3, [r1, #0]
 800ce2c:	4620      	mov	r0, r4
 800ce2e:	bd10      	pop	{r4, pc}
 800ce30:	2a0a      	cmp	r2, #10
 800ce32:	d109      	bne.n	800ce48 <__itoa+0x2c>
 800ce34:	2800      	cmp	r0, #0
 800ce36:	da07      	bge.n	800ce48 <__itoa+0x2c>
 800ce38:	232d      	movs	r3, #45	@ 0x2d
 800ce3a:	700b      	strb	r3, [r1, #0]
 800ce3c:	2101      	movs	r1, #1
 800ce3e:	4240      	negs	r0, r0
 800ce40:	4421      	add	r1, r4
 800ce42:	f000 f805 	bl	800ce50 <__utoa>
 800ce46:	e7f1      	b.n	800ce2c <__itoa+0x10>
 800ce48:	2100      	movs	r1, #0
 800ce4a:	e7f9      	b.n	800ce40 <__itoa+0x24>

0800ce4c <itoa>:
 800ce4c:	f7ff bfe6 	b.w	800ce1c <__itoa>

0800ce50 <__utoa>:
 800ce50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce52:	b08b      	sub	sp, #44	@ 0x2c
 800ce54:	4605      	mov	r5, r0
 800ce56:	460b      	mov	r3, r1
 800ce58:	466e      	mov	r6, sp
 800ce5a:	4c1d      	ldr	r4, [pc, #116]	@ (800ced0 <__utoa+0x80>)
 800ce5c:	f104 0c20 	add.w	ip, r4, #32
 800ce60:	4637      	mov	r7, r6
 800ce62:	6820      	ldr	r0, [r4, #0]
 800ce64:	6861      	ldr	r1, [r4, #4]
 800ce66:	3408      	adds	r4, #8
 800ce68:	c703      	stmia	r7!, {r0, r1}
 800ce6a:	4564      	cmp	r4, ip
 800ce6c:	463e      	mov	r6, r7
 800ce6e:	d1f7      	bne.n	800ce60 <__utoa+0x10>
 800ce70:	7921      	ldrb	r1, [r4, #4]
 800ce72:	6820      	ldr	r0, [r4, #0]
 800ce74:	7139      	strb	r1, [r7, #4]
 800ce76:	1e91      	subs	r1, r2, #2
 800ce78:	2922      	cmp	r1, #34	@ 0x22
 800ce7a:	6038      	str	r0, [r7, #0]
 800ce7c:	f04f 0100 	mov.w	r1, #0
 800ce80:	d904      	bls.n	800ce8c <__utoa+0x3c>
 800ce82:	7019      	strb	r1, [r3, #0]
 800ce84:	460b      	mov	r3, r1
 800ce86:	4618      	mov	r0, r3
 800ce88:	b00b      	add	sp, #44	@ 0x2c
 800ce8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce8c:	1e58      	subs	r0, r3, #1
 800ce8e:	4684      	mov	ip, r0
 800ce90:	fbb5 f7f2 	udiv	r7, r5, r2
 800ce94:	fb02 5617 	mls	r6, r2, r7, r5
 800ce98:	3628      	adds	r6, #40	@ 0x28
 800ce9a:	446e      	add	r6, sp
 800ce9c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800cea0:	460c      	mov	r4, r1
 800cea2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800cea6:	462e      	mov	r6, r5
 800cea8:	42b2      	cmp	r2, r6
 800ceaa:	463d      	mov	r5, r7
 800ceac:	f101 0101 	add.w	r1, r1, #1
 800ceb0:	d9ee      	bls.n	800ce90 <__utoa+0x40>
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	545a      	strb	r2, [r3, r1]
 800ceb6:	1919      	adds	r1, r3, r4
 800ceb8:	1aa5      	subs	r5, r4, r2
 800ceba:	42aa      	cmp	r2, r5
 800cebc:	dae3      	bge.n	800ce86 <__utoa+0x36>
 800cebe:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800cec2:	780e      	ldrb	r6, [r1, #0]
 800cec4:	3201      	adds	r2, #1
 800cec6:	7006      	strb	r6, [r0, #0]
 800cec8:	f801 5901 	strb.w	r5, [r1], #-1
 800cecc:	e7f4      	b.n	800ceb8 <__utoa+0x68>
 800cece:	bf00      	nop
 800ced0:	0800d12a 	.word	0x0800d12a

0800ced4 <memset>:
 800ced4:	4603      	mov	r3, r0
 800ced6:	4402      	add	r2, r0
 800ced8:	4293      	cmp	r3, r2
 800ceda:	d100      	bne.n	800cede <memset+0xa>
 800cedc:	4770      	bx	lr
 800cede:	f803 1b01 	strb.w	r1, [r3], #1
 800cee2:	e7f9      	b.n	800ced8 <memset+0x4>

0800cee4 <__libc_init_array>:
 800cee4:	b570      	push	{r4, r5, r6, lr}
 800cee6:	2600      	movs	r6, #0
 800cee8:	4d0c      	ldr	r5, [pc, #48]	@ (800cf1c <__libc_init_array+0x38>)
 800ceea:	4c0d      	ldr	r4, [pc, #52]	@ (800cf20 <__libc_init_array+0x3c>)
 800ceec:	1b64      	subs	r4, r4, r5
 800ceee:	10a4      	asrs	r4, r4, #2
 800cef0:	42a6      	cmp	r6, r4
 800cef2:	d109      	bne.n	800cf08 <__libc_init_array+0x24>
 800cef4:	f000 f81a 	bl	800cf2c <_init>
 800cef8:	2600      	movs	r6, #0
 800cefa:	4d0a      	ldr	r5, [pc, #40]	@ (800cf24 <__libc_init_array+0x40>)
 800cefc:	4c0a      	ldr	r4, [pc, #40]	@ (800cf28 <__libc_init_array+0x44>)
 800cefe:	1b64      	subs	r4, r4, r5
 800cf00:	10a4      	asrs	r4, r4, #2
 800cf02:	42a6      	cmp	r6, r4
 800cf04:	d105      	bne.n	800cf12 <__libc_init_array+0x2e>
 800cf06:	bd70      	pop	{r4, r5, r6, pc}
 800cf08:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf0c:	4798      	blx	r3
 800cf0e:	3601      	adds	r6, #1
 800cf10:	e7ee      	b.n	800cef0 <__libc_init_array+0xc>
 800cf12:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf16:	4798      	blx	r3
 800cf18:	3601      	adds	r6, #1
 800cf1a:	e7f2      	b.n	800cf02 <__libc_init_array+0x1e>
 800cf1c:	0800d158 	.word	0x0800d158
 800cf20:	0800d158 	.word	0x0800d158
 800cf24:	0800d158 	.word	0x0800d158
 800cf28:	0800d15c 	.word	0x0800d15c

0800cf2c <_init>:
 800cf2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf2e:	bf00      	nop
 800cf30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf32:	bc08      	pop	{r3}
 800cf34:	469e      	mov	lr, r3
 800cf36:	4770      	bx	lr

0800cf38 <_fini>:
 800cf38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf3a:	bf00      	nop
 800cf3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf3e:	bc08      	pop	{r3}
 800cf40:	469e      	mov	lr, r3
 800cf42:	4770      	bx	lr
