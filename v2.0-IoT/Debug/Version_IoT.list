
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1b0  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ddc  0800e394  0800e394  0000f394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f170  0800f170  00011fd0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f170  0800f170  00010170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f178  0800f178  00011fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f178  0800f178  00010178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f17c  0800f17c  0001017c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fd0  20000000  0800f180  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fa0  20000fd0  08010150  00011fd0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f70  08010150  00012f70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011fd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6dd  00000000  00000000  00011ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b22  00000000  00000000  0002c6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  000301f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fd5  00000000  00000000  00031688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb80  00000000  00000000  0003265d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e3e0  00000000  00000000  0004f1dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0d1f  00000000  00000000  0006d5bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010e2dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a60  00000000  00000000  0010e320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00113d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fd0 	.word	0x20000fd0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800e37c 	.word	0x0800e37c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fd4 	.word	0x20000fd4
 8000220:	0800e37c 	.word	0x0800e37c

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "EEPROMProcess.h"
#include "main.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	EEPROM_Read(0, 0, eepromData, 110);
 8000238:	236e      	movs	r3, #110	@ 0x6e
 800023a:	4a9b      	ldr	r2, [pc, #620]	@ (80004a8 <eepromKontrol+0x274>)
 800023c:	2100      	movs	r1, #0
 800023e:	2000      	movs	r0, #0
 8000240:	f000 fac2 	bl	80007c8 <EEPROM_Read>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	setupCompleted = eepromData[0];
 8000244:	4b98      	ldr	r3, [pc, #608]	@ (80004a8 <eepromKontrol+0x274>)
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	4b98      	ldr	r3, [pc, #608]	@ (80004ac <eepromKontrol+0x278>)
 800024a:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 800024c:	4b96      	ldr	r3, [pc, #600]	@ (80004a8 <eepromKontrol+0x274>)
 800024e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8000252:	4b97      	ldr	r3, [pc, #604]	@ (80004b0 <eepromKontrol+0x27c>)
 8000254:	701a      	strb	r2, [r3, #0]

	kaydedilenDeger = eepromData[3];
 8000256:	4b94      	ldr	r3, [pc, #592]	@ (80004a8 <eepromKontrol+0x274>)
 8000258:	78da      	ldrb	r2, [r3, #3]
 800025a:	4b96      	ldr	r3, [pc, #600]	@ (80004b4 <eepromKontrol+0x280>)
 800025c:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 800025e:	4b92      	ldr	r3, [pc, #584]	@ (80004a8 <eepromKontrol+0x274>)
 8000260:	785a      	ldrb	r2, [r3, #1]
 8000262:	4b95      	ldr	r3, [pc, #596]	@ (80004b8 <eepromKontrol+0x284>)
 8000264:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8000266:	4b90      	ldr	r3, [pc, #576]	@ (80004a8 <eepromKontrol+0x274>)
 8000268:	789a      	ldrb	r2, [r3, #2]
 800026a:	4b94      	ldr	r3, [pc, #592]	@ (80004bc <eepromKontrol+0x288>)
 800026c:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 800026e:	4b8e      	ldr	r3, [pc, #568]	@ (80004a8 <eepromKontrol+0x274>)
 8000270:	791a      	ldrb	r2, [r3, #4]
 8000272:	4b93      	ldr	r3, [pc, #588]	@ (80004c0 <eepromKontrol+0x28c>)
 8000274:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8000276:	4b8c      	ldr	r3, [pc, #560]	@ (80004a8 <eepromKontrol+0x274>)
 8000278:	795a      	ldrb	r2, [r3, #5]
 800027a:	4b92      	ldr	r3, [pc, #584]	@ (80004c4 <eepromKontrol+0x290>)
 800027c:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 800027e:	4b8a      	ldr	r3, [pc, #552]	@ (80004a8 <eepromKontrol+0x274>)
 8000280:	799a      	ldrb	r2, [r3, #6]
 8000282:	4b91      	ldr	r3, [pc, #580]	@ (80004c8 <eepromKontrol+0x294>)
 8000284:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8000286:	4b88      	ldr	r3, [pc, #544]	@ (80004a8 <eepromKontrol+0x274>)
 8000288:	79da      	ldrb	r2, [r3, #7]
 800028a:	4b90      	ldr	r3, [pc, #576]	@ (80004cc <eepromKontrol+0x298>)
 800028c:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 800028e:	4b86      	ldr	r3, [pc, #536]	@ (80004a8 <eepromKontrol+0x274>)
 8000290:	7a1a      	ldrb	r2, [r3, #8]
 8000292:	4b8f      	ldr	r3, [pc, #572]	@ (80004d0 <eepromKontrol+0x29c>)
 8000294:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8000296:	4b84      	ldr	r3, [pc, #528]	@ (80004a8 <eepromKontrol+0x274>)
 8000298:	7a5a      	ldrb	r2, [r3, #9]
 800029a:	4b8e      	ldr	r3, [pc, #568]	@ (80004d4 <eepromKontrol+0x2a0>)
 800029c:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 800029e:	4b82      	ldr	r3, [pc, #520]	@ (80004a8 <eepromKontrol+0x274>)
 80002a0:	7a9a      	ldrb	r2, [r3, #10]
 80002a2:	4b8d      	ldr	r3, [pc, #564]	@ (80004d8 <eepromKontrol+0x2a4>)
 80002a4:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002a6:	4b80      	ldr	r3, [pc, #512]	@ (80004a8 <eepromKontrol+0x274>)
 80002a8:	7ada      	ldrb	r2, [r3, #11]
 80002aa:	4b8c      	ldr	r3, [pc, #560]	@ (80004dc <eepromKontrol+0x2a8>)
 80002ac:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002ae:	4b7e      	ldr	r3, [pc, #504]	@ (80004a8 <eepromKontrol+0x274>)
 80002b0:	7b1a      	ldrb	r2, [r3, #12]
 80002b2:	4b8b      	ldr	r3, [pc, #556]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002b4:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002b6:	4b7c      	ldr	r3, [pc, #496]	@ (80004a8 <eepromKontrol+0x274>)
 80002b8:	7b5a      	ldrb	r2, [r3, #13]
 80002ba:	4b8a      	ldr	r3, [pc, #552]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002bc:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002be:	4b7a      	ldr	r3, [pc, #488]	@ (80004a8 <eepromKontrol+0x274>)
 80002c0:	7b9a      	ldrb	r2, [r3, #14]
 80002c2:	4b89      	ldr	r3, [pc, #548]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002c4:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002c6:	4b78      	ldr	r3, [pc, #480]	@ (80004a8 <eepromKontrol+0x274>)
 80002c8:	7bda      	ldrb	r2, [r3, #15]
 80002ca:	4b88      	ldr	r3, [pc, #544]	@ (80004ec <eepromKontrol+0x2b8>)
 80002cc:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002ce:	4b76      	ldr	r3, [pc, #472]	@ (80004a8 <eepromKontrol+0x274>)
 80002d0:	7c1a      	ldrb	r2, [r3, #16]
 80002d2:	4b87      	ldr	r3, [pc, #540]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002d4:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002d6:	4b74      	ldr	r3, [pc, #464]	@ (80004a8 <eepromKontrol+0x274>)
 80002d8:	7c5a      	ldrb	r2, [r3, #17]
 80002da:	4b86      	ldr	r3, [pc, #536]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002dc:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002de:	4b72      	ldr	r3, [pc, #456]	@ (80004a8 <eepromKontrol+0x274>)
 80002e0:	7c9a      	ldrb	r2, [r3, #18]
 80002e2:	4b85      	ldr	r3, [pc, #532]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002e4:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002e6:	4b70      	ldr	r3, [pc, #448]	@ (80004a8 <eepromKontrol+0x274>)
 80002e8:	7cda      	ldrb	r2, [r3, #19]
 80002ea:	4b84      	ldr	r3, [pc, #528]	@ (80004fc <eepromKontrol+0x2c8>)
 80002ec:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002ee:	4b6e      	ldr	r3, [pc, #440]	@ (80004a8 <eepromKontrol+0x274>)
 80002f0:	7d1a      	ldrb	r2, [r3, #20]
 80002f2:	4b83      	ldr	r3, [pc, #524]	@ (8000500 <eepromKontrol+0x2cc>)
 80002f4:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002f6:	4b6c      	ldr	r3, [pc, #432]	@ (80004a8 <eepromKontrol+0x274>)
 80002f8:	7d5a      	ldrb	r2, [r3, #21]
 80002fa:	4b82      	ldr	r3, [pc, #520]	@ (8000504 <eepromKontrol+0x2d0>)
 80002fc:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 80002fe:	4b6a      	ldr	r3, [pc, #424]	@ (80004a8 <eepromKontrol+0x274>)
 8000300:	7d9a      	ldrb	r2, [r3, #22]
 8000302:	4b81      	ldr	r3, [pc, #516]	@ (8000508 <eepromKontrol+0x2d4>)
 8000304:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8000306:	4b68      	ldr	r3, [pc, #416]	@ (80004a8 <eepromKontrol+0x274>)
 8000308:	7dda      	ldrb	r2, [r3, #23]
 800030a:	4b80      	ldr	r3, [pc, #512]	@ (800050c <eepromKontrol+0x2d8>)
 800030c:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 800030e:	4b66      	ldr	r3, [pc, #408]	@ (80004a8 <eepromKontrol+0x274>)
 8000310:	7e1a      	ldrb	r2, [r3, #24]
 8000312:	4b7f      	ldr	r3, [pc, #508]	@ (8000510 <eepromKontrol+0x2dc>)
 8000314:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8000316:	4b64      	ldr	r3, [pc, #400]	@ (80004a8 <eepromKontrol+0x274>)
 8000318:	7e5a      	ldrb	r2, [r3, #25]
 800031a:	4b7e      	ldr	r3, [pc, #504]	@ (8000514 <eepromKontrol+0x2e0>)
 800031c:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 800031e:	4b62      	ldr	r3, [pc, #392]	@ (80004a8 <eepromKontrol+0x274>)
 8000320:	7e9a      	ldrb	r2, [r3, #26]
 8000322:	4b7d      	ldr	r3, [pc, #500]	@ (8000518 <eepromKontrol+0x2e4>)
 8000324:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8000326:	4b60      	ldr	r3, [pc, #384]	@ (80004a8 <eepromKontrol+0x274>)
 8000328:	7eda      	ldrb	r2, [r3, #27]
 800032a:	4b7c      	ldr	r3, [pc, #496]	@ (800051c <eepromKontrol+0x2e8>)
 800032c:	701a      	strb	r2, [r3, #0]
	calismaSayisiDemo = eepromData[28];
 800032e:	4b5e      	ldr	r3, [pc, #376]	@ (80004a8 <eepromKontrol+0x274>)
 8000330:	7f1a      	ldrb	r2, [r3, #28]
 8000332:	4b7b      	ldr	r3, [pc, #492]	@ (8000520 <eepromKontrol+0x2ec>)
 8000334:	701a      	strb	r2, [r3, #0]
	calismaCount = eepromData[29];
 8000336:	4b5c      	ldr	r3, [pc, #368]	@ (80004a8 <eepromKontrol+0x274>)
 8000338:	7f5a      	ldrb	r2, [r3, #29]
 800033a:	4b7a      	ldr	r3, [pc, #488]	@ (8000524 <eepromKontrol+0x2f0>)
 800033c:	701a      	strb	r2, [r3, #0]
	calismaCountDemo = eepromData[30];
 800033e:	4b5a      	ldr	r3, [pc, #360]	@ (80004a8 <eepromKontrol+0x274>)
 8000340:	7f9a      	ldrb	r2, [r3, #30]
 8000342:	4b79      	ldr	r3, [pc, #484]	@ (8000528 <eepromKontrol+0x2f4>)
 8000344:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8000346:	4b58      	ldr	r3, [pc, #352]	@ (80004a8 <eepromKontrol+0x274>)
 8000348:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800034c:	4b77      	ldr	r3, [pc, #476]	@ (800052c <eepromKontrol+0x2f8>)
 800034e:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000350:	4b55      	ldr	r3, [pc, #340]	@ (80004a8 <eepromKontrol+0x274>)
 8000352:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000356:	4b76      	ldr	r3, [pc, #472]	@ (8000530 <eepromKontrol+0x2fc>)
 8000358:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800035a:	4b53      	ldr	r3, [pc, #332]	@ (80004a8 <eepromKontrol+0x274>)
 800035c:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000360:	4b74      	ldr	r3, [pc, #464]	@ (8000534 <eepromKontrol+0x300>)
 8000362:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000364:	4b50      	ldr	r3, [pc, #320]	@ (80004a8 <eepromKontrol+0x274>)
 8000366:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800036a:	4b73      	ldr	r3, [pc, #460]	@ (8000538 <eepromKontrol+0x304>)
 800036c:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 800036e:	4b4e      	ldr	r3, [pc, #312]	@ (80004a8 <eepromKontrol+0x274>)
 8000370:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000374:	4b71      	ldr	r3, [pc, #452]	@ (800053c <eepromKontrol+0x308>)
 8000376:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8000378:	4b4b      	ldr	r3, [pc, #300]	@ (80004a8 <eepromKontrol+0x274>)
 800037a:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800037e:	4b70      	ldr	r3, [pc, #448]	@ (8000540 <eepromKontrol+0x30c>)
 8000380:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8000382:	4b49      	ldr	r3, [pc, #292]	@ (80004a8 <eepromKontrol+0x274>)
 8000384:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8000388:	4b6e      	ldr	r3, [pc, #440]	@ (8000544 <eepromKontrol+0x310>)
 800038a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 800038c:	4b46      	ldr	r3, [pc, #280]	@ (80004a8 <eepromKontrol+0x274>)
 800038e:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8000392:	4b6d      	ldr	r3, [pc, #436]	@ (8000548 <eepromKontrol+0x314>)
 8000394:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8000396:	4b44      	ldr	r3, [pc, #272]	@ (80004a8 <eepromKontrol+0x274>)
 8000398:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800039c:	4b6b      	ldr	r3, [pc, #428]	@ (800054c <eepromKontrol+0x318>)
 800039e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003a0:	4b41      	ldr	r3, [pc, #260]	@ (80004a8 <eepromKontrol+0x274>)
 80003a2:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003a6:	4b6a      	ldr	r3, [pc, #424]	@ (8000550 <eepromKontrol+0x31c>)
 80003a8:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003aa:	4b3f      	ldr	r3, [pc, #252]	@ (80004a8 <eepromKontrol+0x274>)
 80003ac:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003b0:	4b68      	ldr	r3, [pc, #416]	@ (8000554 <eepromKontrol+0x320>)
 80003b2:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003b4:	4b3c      	ldr	r3, [pc, #240]	@ (80004a8 <eepromKontrol+0x274>)
 80003b6:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003ba:	4b67      	ldr	r3, [pc, #412]	@ (8000558 <eepromKontrol+0x324>)
 80003bc:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003be:	4b3a      	ldr	r3, [pc, #232]	@ (80004a8 <eepromKontrol+0x274>)
 80003c0:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003c4:	4b65      	ldr	r3, [pc, #404]	@ (800055c <eepromKontrol+0x328>)
 80003c6:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003c8:	4b37      	ldr	r3, [pc, #220]	@ (80004a8 <eepromKontrol+0x274>)
 80003ca:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003ce:	4b64      	ldr	r3, [pc, #400]	@ (8000560 <eepromKontrol+0x32c>)
 80003d0:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80003d2:	4b39      	ldr	r3, [pc, #228]	@ (80004b8 <eepromKontrol+0x284>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d902      	bls.n	80003e0 <eepromKontrol+0x1ac>
	    calismaSekli=0;
 80003da:	4b37      	ldr	r3, [pc, #220]	@ (80004b8 <eepromKontrol+0x284>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80003e0:	4b36      	ldr	r3, [pc, #216]	@ (80004bc <eepromKontrol+0x288>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d902      	bls.n	80003ee <eepromKontrol+0x1ba>
	    emniyetCercevesi=1;
 80003e8:	4b34      	ldr	r3, [pc, #208]	@ (80004bc <eepromKontrol+0x288>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80003ee:	4b34      	ldr	r3, [pc, #208]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d902      	bls.n	80003fc <eepromKontrol+0x1c8>
	    yavaslamaLimit=0;
 80003f6:	4b32      	ldr	r3, [pc, #200]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 80003fc:	4b31      	ldr	r3, [pc, #196]	@ (80004c4 <eepromKontrol+0x290>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d902      	bls.n	800040a <eepromKontrol+0x1d6>
	    altLimit=1;
 8000404:	4b2f      	ldr	r3, [pc, #188]	@ (80004c4 <eepromKontrol+0x290>)
 8000406:	2201      	movs	r2, #1
 8000408:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800040a:	4b2f      	ldr	r3, [pc, #188]	@ (80004c8 <eepromKontrol+0x294>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d902      	bls.n	8000418 <eepromKontrol+0x1e4>
	    basincSalteri=1;
 8000412:	4b2d      	ldr	r3, [pc, #180]	@ (80004c8 <eepromKontrol+0x294>)
 8000414:	2201      	movs	r2, #1
 8000416:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8000418:	4b2c      	ldr	r3, [pc, #176]	@ (80004cc <eepromKontrol+0x298>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b03      	cmp	r3, #3
 800041e:	d902      	bls.n	8000426 <eepromKontrol+0x1f2>
	    kapiSecimleri=3;
 8000420:	4b2a      	ldr	r3, [pc, #168]	@ (80004cc <eepromKontrol+0x298>)
 8000422:	2203      	movs	r2, #3
 8000424:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000426:	4b44      	ldr	r3, [pc, #272]	@ (8000538 <eepromKontrol+0x304>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d902      	bls.n	8000434 <eepromKontrol+0x200>
	    kapiAcTipi=0;
 800042e:	4b42      	ldr	r3, [pc, #264]	@ (8000538 <eepromKontrol+0x304>)
 8000430:	2200      	movs	r2, #0
 8000432:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8000434:	4b26      	ldr	r3, [pc, #152]	@ (80004d0 <eepromKontrol+0x29c>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b02      	cmp	r3, #2
 800043a:	d902      	bls.n	8000442 <eepromKontrol+0x20e>
	    kapi1Tip=1;
 800043c:	4b24      	ldr	r3, [pc, #144]	@ (80004d0 <eepromKontrol+0x29c>)
 800043e:	2201      	movs	r2, #1
 8000440:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8000442:	4b24      	ldr	r3, [pc, #144]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b05      	cmp	r3, #5
 8000448:	d902      	bls.n	8000450 <eepromKontrol+0x21c>
	    kapi1AcSure=5;
 800044a:	4b22      	ldr	r3, [pc, #136]	@ (80004d4 <eepromKontrol+0x2a0>)
 800044c:	2205      	movs	r2, #5
 800044e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8000450:	4b21      	ldr	r3, [pc, #132]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b02      	cmp	r3, #2
 8000456:	d902      	bls.n	800045e <eepromKontrol+0x22a>
	    kapi2Tip=1;
 8000458:	4b1f      	ldr	r3, [pc, #124]	@ (80004d8 <eepromKontrol+0x2a4>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800045e:	4b1f      	ldr	r3, [pc, #124]	@ (80004dc <eepromKontrol+0x2a8>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b05      	cmp	r3, #5
 8000464:	d902      	bls.n	800046c <eepromKontrol+0x238>
	    kapi2AcSure=5;
 8000466:	4b1d      	ldr	r3, [pc, #116]	@ (80004dc <eepromKontrol+0x2a8>)
 8000468:	2205      	movs	r2, #5
 800046a:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 800046c:	4b1c      	ldr	r3, [pc, #112]	@ (80004e0 <eepromKontrol+0x2ac>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b02      	cmp	r3, #2
 8000472:	d902      	bls.n	800047a <eepromKontrol+0x246>
	    kapitablaTip=1;
 8000474:	4b1a      	ldr	r3, [pc, #104]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000476:	2201      	movs	r2, #1
 8000478:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 800047a:	4b2d      	ldr	r3, [pc, #180]	@ (8000530 <eepromKontrol+0x2fc>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b02      	cmp	r3, #2
 8000480:	d902      	bls.n	8000488 <eepromKontrol+0x254>
	    kapiTablaAcKonum=2;
 8000482:	4b2b      	ldr	r3, [pc, #172]	@ (8000530 <eepromKontrol+0x2fc>)
 8000484:	2202      	movs	r2, #2
 8000486:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8000488:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <eepromKontrol+0x2b0>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b05      	cmp	r3, #5
 800048e:	d902      	bls.n	8000496 <eepromKontrol+0x262>
	    kapiTablaAcSure=5;
 8000490:	4b14      	ldr	r3, [pc, #80]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000492:	2205      	movs	r2, #5
 8000494:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8000496:	4b14      	ldr	r3, [pc, #80]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d962      	bls.n	8000564 <eepromKontrol+0x330>
	    yukariYavasLimit=0;
 800049e:	4b12      	ldr	r3, [pc, #72]	@ (80004e8 <eepromKontrol+0x2b4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	e05e      	b.n	8000564 <eepromKontrol+0x330>
 80004a6:	bf00      	nop
 80004a8:	20000fec 	.word	0x20000fec
 80004ac:	20001090 	.word	0x20001090
 80004b0:	200014e7 	.word	0x200014e7
 80004b4:	20001091 	.word	0x20001091
 80004b8:	200014bd 	.word	0x200014bd
 80004bc:	200014c0 	.word	0x200014c0
 80004c0:	200014c1 	.word	0x200014c1
 80004c4:	200014c2 	.word	0x200014c2
 80004c8:	200014c3 	.word	0x200014c3
 80004cc:	200014c4 	.word	0x200014c4
 80004d0:	200014c5 	.word	0x200014c5
 80004d4:	200014d5 	.word	0x200014d5
 80004d8:	200014c6 	.word	0x200014c6
 80004dc:	200014d6 	.word	0x200014d6
 80004e0:	200014c7 	.word	0x200014c7
 80004e4:	200014d7 	.word	0x200014d7
 80004e8:	200014ca 	.word	0x200014ca
 80004ec:	200014cb 	.word	0x200014cb
 80004f0:	200014cc 	.word	0x200014cc
 80004f4:	200014cd 	.word	0x200014cd
 80004f8:	200014ce 	.word	0x200014ce
 80004fc:	200014cf 	.word	0x200014cf
 8000500:	200014d0 	.word	0x200014d0
 8000504:	200014d1 	.word	0x200014d1
 8000508:	200014d2 	.word	0x200014d2
 800050c:	200014d3 	.word	0x200014d3
 8000510:	200014d4 	.word	0x200014d4
 8000514:	200014d8 	.word	0x200014d8
 8000518:	200014da 	.word	0x200014da
 800051c:	200014b4 	.word	0x200014b4
 8000520:	200014b5 	.word	0x200014b5
 8000524:	200014b6 	.word	0x200014b6
 8000528:	200014b7 	.word	0x200014b7
 800052c:	200014dc 	.word	0x200014dc
 8000530:	200014c9 	.word	0x200014c9
 8000534:	200014db 	.word	0x200014db
 8000538:	200014c8 	.word	0x200014c8
 800053c:	200014dd 	.word	0x200014dd
 8000540:	200014de 	.word	0x200014de
 8000544:	200014df 	.word	0x200014df
 8000548:	200014e0 	.word	0x200014e0
 800054c:	200014e1 	.word	0x200014e1
 8000550:	200014e2 	.word	0x200014e2
 8000554:	200014e3 	.word	0x200014e3
 8000558:	200014e4 	.word	0x200014e4
 800055c:	200014e5 	.word	0x200014e5
 8000560:	200014e6 	.word	0x200014e6
	}

	if(devirmeYuruyusSecim>2) {
 8000564:	4b40      	ldr	r3, [pc, #256]	@ (8000668 <eepromKontrol+0x434>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d902      	bls.n	8000572 <eepromKontrol+0x33e>
	    devirmeYuruyusSecim=0;
 800056c:	4b3e      	ldr	r3, [pc, #248]	@ (8000668 <eepromKontrol+0x434>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8000572:	4b3e      	ldr	r3, [pc, #248]	@ (800066c <eepromKontrol+0x438>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d902      	bls.n	8000580 <eepromKontrol+0x34c>
	    devirmeYukariIleriLimit=1;
 800057a:	4b3c      	ldr	r3, [pc, #240]	@ (800066c <eepromKontrol+0x438>)
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8000580:	4b3b      	ldr	r3, [pc, #236]	@ (8000670 <eepromKontrol+0x43c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    devirmeAsagiGeriLimit=1;
 8000588:	4b39      	ldr	r3, [pc, #228]	@ (8000670 <eepromKontrol+0x43c>)
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800058e:	4b39      	ldr	r3, [pc, #228]	@ (8000674 <eepromKontrol+0x440>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    devirmeSilindirTipi=0;
 8000596:	4b37      	ldr	r3, [pc, #220]	@ (8000674 <eepromKontrol+0x440>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800059c:	4b36      	ldr	r3, [pc, #216]	@ (8000678 <eepromKontrol+0x444>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    platformSilindirTipi=0;
 80005a4:	4b34      	ldr	r3, [pc, #208]	@ (8000678 <eepromKontrol+0x444>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80005aa:	4b34      	ldr	r3, [pc, #208]	@ (800067c <eepromKontrol+0x448>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b05      	cmp	r3, #5
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    yukariValfTmr=0;
 80005b2:	4b32      	ldr	r3, [pc, #200]	@ (800067c <eepromKontrol+0x448>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80005b8:	4b31      	ldr	r3, [pc, #196]	@ (8000680 <eepromKontrol+0x44c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b05      	cmp	r3, #5
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    asagiValfTmr=0;
 80005c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000680 <eepromKontrol+0x44c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80005c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000684 <eepromKontrol+0x450>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    devirmeYukariIleriTmr=0;
 80005ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <eepromKontrol+0x450>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80005d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000688 <eepromKontrol+0x454>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b05      	cmp	r3, #5
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    devirmeAsagiGeriTmr=0;
 80005dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000688 <eepromKontrol+0x454>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80005e2:	4b2a      	ldr	r3, [pc, #168]	@ (800068c <eepromKontrol+0x458>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2bb4      	cmp	r3, #180	@ 0xb4
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    makineCalismaTmr=60;
 80005ea:	4b28      	ldr	r3, [pc, #160]	@ (800068c <eepromKontrol+0x458>)
 80005ec:	223c      	movs	r2, #60	@ 0x3c
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80005f0:	4b27      	ldr	r3, [pc, #156]	@ (8000690 <eepromKontrol+0x45c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    buzzer=0;
 80005f8:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <eepromKontrol+0x45c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 80005fe:	4b25      	ldr	r3, [pc, #148]	@ (8000694 <eepromKontrol+0x460>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    demoMode=0;
 8000606:	4b23      	ldr	r3, [pc, #140]	@ (8000694 <eepromKontrol+0x460>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800060c:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <eepromKontrol+0x464>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    calismaSayModu=0;
 8000614:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <eepromKontrol+0x464>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 800061a:	4b20      	ldr	r3, [pc, #128]	@ (800069c <eepromKontrol+0x468>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    dilSecim=0;
 8000622:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <eepromKontrol+0x468>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8000628:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <eepromKontrol+0x46c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
		iotMode=0;
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <eepromKontrol+0x46c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f000 f936 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 800063c:	20fa      	movs	r0, #250	@ 0xfa
 800063e:	f009 fa35 	bl	8009aac <HAL_Delay>

	convertArrays(2);
 8000642:	2002      	movs	r0, #2
 8000644:	f000 f930 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 8000648:	20fa      	movs	r0, #250	@ 0xfa
 800064a:	f009 fa2f 	bl	8009aac <HAL_Delay>

	convertArrays(3);
 800064e:	2003      	movs	r0, #3
 8000650:	f000 f92a 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 8000654:	20fa      	movs	r0, #250	@ 0xfa
 8000656:	f009 fa29 	bl	8009aac <HAL_Delay>

	loadMenuTexts(dilSecim);
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <eepromKontrol+0x468>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f005 fd6c 	bl	800613c <loadMenuTexts>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200014cb 	.word	0x200014cb
 800066c:	200014cc 	.word	0x200014cc
 8000670:	200014cd 	.word	0x200014cd
 8000674:	200014ce 	.word	0x200014ce
 8000678:	200014cf 	.word	0x200014cf
 800067c:	200014d0 	.word	0x200014d0
 8000680:	200014d1 	.word	0x200014d1
 8000684:	200014d2 	.word	0x200014d2
 8000688:	200014d3 	.word	0x200014d3
 800068c:	200014d4 	.word	0x200014d4
 8000690:	200014d8 	.word	0x200014d8
 8000694:	200014da 	.word	0x200014da
 8000698:	200014db 	.word	0x200014db
 800069c:	200014dc 	.word	0x200014dc
 80006a0:	200014e7 	.word	0x200014e7

080006a4 <saveEEPROM>:

    HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, sizeof(eepromData), eepromData, sizeof(eepromData), 3000);
    HAL_Delay(1000);
}

void saveEEPROM(int resultText) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	EEPROM_Write(0, 0, eepromData, 110);
 80006ac:	236e      	movs	r3, #110	@ 0x6e
 80006ae:	4a0b      	ldr	r2, [pc, #44]	@ (80006dc <saveEEPROM+0x38>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 f816 	bl	80006e4 <EEPROM_Write>

    if(resultText == 1) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d104      	bne.n	80006c8 <saveEEPROM+0x24>
    	lcd_print(2, 1, dataYazildiText);
 80006be:	4a08      	ldr	r2, [pc, #32]	@ (80006e0 <saveEEPROM+0x3c>)
 80006c0:	2101      	movs	r1, #1
 80006c2:	2002      	movs	r0, #2
 80006c4:	f008 fc7e 	bl	8008fc4 <lcd_print>
    }

    // Ekranı temizle
    HAL_Delay(500);
 80006c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006cc:	f009 f9ee 	bl	8009aac <HAL_Delay>
    lcd_clear();
 80006d0:	f008 fca4 	bl	800901c <lcd_clear>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000fec 	.word	0x20000fec
 80006e0:	20001c60 	.word	0x20001c60

080006e4 <EEPROM_Write>:

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08e      	sub	sp, #56	@ 0x38
 80006e8:	af04      	add	r7, sp, #16
 80006ea:	60ba      	str	r2, [r7, #8]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4603      	mov	r3, r0
 80006f0:	81fb      	strh	r3, [r7, #14]
 80006f2:	460b      	mov	r3, r1
 80006f4:	81bb      	strh	r3, [r7, #12]
 80006f6:	4613      	mov	r3, r2
 80006f8:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80006fa:	2306      	movs	r3, #6
 80006fc:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80006fe:	89fb      	ldrh	r3, [r7, #14]
 8000700:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000702:	88fa      	ldrh	r2, [r7, #6]
 8000704:	89bb      	ldrh	r3, [r7, #12]
 8000706:	4413      	add	r3, r2
 8000708:	2b00      	cmp	r3, #0
 800070a:	da00      	bge.n	800070e <EEPROM_Write+0x2a>
 800070c:	333f      	adds	r3, #63	@ 0x3f
 800070e:	119b      	asrs	r3, r3, #6
 8000710:	b29a      	uxth	r2, r3
 8000712:	89fb      	ldrh	r3, [r7, #14]
 8000714:	4413      	add	r3, r2
 8000716:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 8000718:	8afa      	ldrh	r2, [r7, #22]
 800071a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	b29b      	uxth	r3, r3
 8000720:	3301      	adds	r3, #1
 8000722:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
 800072c:	e041      	b.n	80007b2 <EEPROM_Write+0xce>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 800072e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	b21a      	sxth	r2, r3
 8000738:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800073c:	4313      	orrs	r3, r2
 800073e:	b21b      	sxth	r3, r3
 8000740:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000742:	89bb      	ldrh	r3, [r7, #12]
 8000744:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000748:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800074a:	8bfa      	ldrh	r2, [r7, #30]
 800074c:	88fb      	ldrh	r3, [r7, #6]
 800074e:	429a      	cmp	r2, r3
 8000750:	d901      	bls.n	8000756 <EEPROM_Write+0x72>
            bytesremaining = size;
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 8000756:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000758:	68ba      	ldr	r2, [r7, #8]
 800075a:	4413      	add	r3, r2
 800075c:	8a79      	ldrh	r1, [r7, #18]
 800075e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000762:	9202      	str	r2, [sp, #8]
 8000764:	8bfa      	ldrh	r2, [r7, #30]
 8000766:	9201      	str	r2, [sp, #4]
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2310      	movs	r3, #16
 800076c:	460a      	mov	r2, r1
 800076e:	21a0      	movs	r1, #160	@ 0xa0
 8000770:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <EEPROM_Write+0xdc>)
 8000772:	f00a fa25 	bl	800abc0 <HAL_I2C_Mem_Write>
 8000776:	4603      	mov	r3, r0
 8000778:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800077a:	7c7b      	ldrb	r3, [r7, #17]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d005      	beq.n	800078c <EEPROM_Write+0xa8>
            lcd_print(2, 1, "Hata: EEPROM    ");
 8000780:	4a10      	ldr	r2, [pc, #64]	@ (80007c4 <EEPROM_Write+0xe0>)
 8000782:	2101      	movs	r1, #1
 8000784:	2002      	movs	r0, #2
 8000786:	f008 fc1d 	bl	8008fc4 <lcd_print>
            return;
 800078a:	e016      	b.n	80007ba <EEPROM_Write+0xd6>
        }

        startPage += 1;
 800078c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800078e:	3301      	adds	r3, #1
 8000790:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 8000796:	88fa      	ldrh	r2, [r7, #6]
 8000798:	8bfb      	ldrh	r3, [r7, #30]
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 800079e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80007a0:	8bfb      	ldrh	r3, [r7, #30]
 80007a2:	4413      	add	r3, r2
 80007a4:	84bb      	strh	r3, [r7, #36]	@ 0x24

        HAL_Delay(5);
 80007a6:	2005      	movs	r0, #5
 80007a8:	f009 f980 	bl	8009aac <HAL_Delay>
    for (int i = 0; i < numofpages; i++) {
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	3301      	adds	r3, #1
 80007b0:	623b      	str	r3, [r7, #32]
 80007b2:	8abb      	ldrh	r3, [r7, #20]
 80007b4:	6a3a      	ldr	r2, [r7, #32]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	dbb9      	blt.n	800072e <EEPROM_Write+0x4a>
    }
}
 80007ba:	3728      	adds	r7, #40	@ 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20001d3c 	.word	0x20001d3c
 80007c4:	0800e394 	.word	0x0800e394

080007c8 <EEPROM_Read>:

void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08e      	sub	sp, #56	@ 0x38
 80007cc:	af04      	add	r7, sp, #16
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4603      	mov	r3, r0
 80007d4:	81fb      	strh	r3, [r7, #14]
 80007d6:	460b      	mov	r3, r1
 80007d8:	81bb      	strh	r3, [r7, #12]
 80007da:	4613      	mov	r3, r2
 80007dc:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80007de:	2306      	movs	r3, #6
 80007e0:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80007e2:	89fb      	ldrh	r3, [r7, #14]
 80007e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 80007e6:	88fa      	ldrh	r2, [r7, #6]
 80007e8:	89bb      	ldrh	r3, [r7, #12]
 80007ea:	4413      	add	r3, r2
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	da00      	bge.n	80007f2 <EEPROM_Read+0x2a>
 80007f0:	333f      	adds	r3, #63	@ 0x3f
 80007f2:	119b      	asrs	r3, r3, #6
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	89fb      	ldrh	r3, [r7, #14]
 80007f8:	4413      	add	r3, r2
 80007fa:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 80007fc:	8afa      	ldrh	r2, [r7, #22]
 80007fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	b29b      	uxth	r3, r3
 8000804:	3301      	adds	r3, #1
 8000806:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
 8000810:	e03e      	b.n	8000890 <EEPROM_Read+0xc8>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 8000812:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	b21a      	sxth	r2, r3
 800081c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000820:	4313      	orrs	r3, r2
 8000822:	b21b      	sxth	r3, r3
 8000824:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000826:	89bb      	ldrh	r3, [r7, #12]
 8000828:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800082c:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800082e:	8bfa      	ldrh	r2, [r7, #30]
 8000830:	88fb      	ldrh	r3, [r7, #6]
 8000832:	429a      	cmp	r2, r3
 8000834:	d901      	bls.n	800083a <EEPROM_Read+0x72>
            bytesremaining = size;
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 800083a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	4413      	add	r3, r2
 8000840:	8a79      	ldrh	r1, [r7, #18]
 8000842:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000846:	9202      	str	r2, [sp, #8]
 8000848:	8bfa      	ldrh	r2, [r7, #30]
 800084a:	9201      	str	r2, [sp, #4]
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2310      	movs	r3, #16
 8000850:	460a      	mov	r2, r1
 8000852:	21a0      	movs	r1, #160	@ 0xa0
 8000854:	4812      	ldr	r0, [pc, #72]	@ (80008a0 <EEPROM_Read+0xd8>)
 8000856:	f00a faad 	bl	800adb4 <HAL_I2C_Mem_Read>
 800085a:	4603      	mov	r3, r0
 800085c:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800085e:	7c7b      	ldrb	r3, [r7, #17]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d005      	beq.n	8000870 <EEPROM_Read+0xa8>
            lcd_print(2, 1, "Hata: EEPROM OKU");
 8000864:	4a0f      	ldr	r2, [pc, #60]	@ (80008a4 <EEPROM_Read+0xdc>)
 8000866:	2101      	movs	r1, #1
 8000868:	2002      	movs	r0, #2
 800086a:	f008 fbab 	bl	8008fc4 <lcd_print>
            return;
 800086e:	e013      	b.n	8000898 <EEPROM_Read+0xd0>
        }

        startPage += 1;
 8000870:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000872:	3301      	adds	r3, #1
 8000874:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 800087a:	88fa      	ldrh	r2, [r7, #6]
 800087c:	8bfb      	ldrh	r3, [r7, #30]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 8000882:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000884:	8bfb      	ldrh	r3, [r7, #30]
 8000886:	4413      	add	r3, r2
 8000888:	84bb      	strh	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < numofpages; i++) {
 800088a:	6a3b      	ldr	r3, [r7, #32]
 800088c:	3301      	adds	r3, #1
 800088e:	623b      	str	r3, [r7, #32]
 8000890:	8abb      	ldrh	r3, [r7, #20]
 8000892:	6a3a      	ldr	r2, [r7, #32]
 8000894:	429a      	cmp	r2, r3
 8000896:	dbbc      	blt.n	8000812 <EEPROM_Read+0x4a>
    }
}
 8000898:	3728      	adds	r7, #40	@ 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20001d3c 	.word	0x20001d3c
 80008a4:	0800e3a8 	.word	0x0800e3a8

080008a8 <convertArrays>:

void convertArrays(int state) {
 80008a8:	b480      	push	{r7}
 80008aa:	b08b      	sub	sp, #44	@ 0x2c
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d11d      	bne.n	80008f2 <convertArrays+0x4a>
		int eepromVal = idStartPos;
 80008b6:	4b34      	ldr	r3, [pc, #208]	@ (8000988 <convertArrays+0xe0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
 80008c0:	e013      	b.n	80008ea <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 80008c2:	4a32      	ldr	r2, [pc, #200]	@ (800098c <convertArrays+0xe4>)
 80008c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c6:	4413      	add	r3, r2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 80008cc:	4a30      	ldr	r2, [pc, #192]	@ (8000990 <convertArrays+0xe8>)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4413      	add	r3, r2
 80008d2:	7819      	ldrb	r1, [r3, #0]
 80008d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000994 <convertArrays+0xec>)
 80008d6:	6a3b      	ldr	r3, [r7, #32]
 80008d8:	4413      	add	r3, r2
 80008da:	460a      	mov	r2, r1
 80008dc:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 80008de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e0:	3301      	adds	r3, #1
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008e4:	6a3b      	ldr	r3, [r7, #32]
 80008e6:	3301      	adds	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
 80008ea:	6a3b      	ldr	r3, [r7, #32]
 80008ec:	2b0b      	cmp	r3, #11
 80008ee:	dde8      	ble.n	80008c2 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 80008f0:	e045      	b.n	800097e <convertArrays+0xd6>
	} else if(state == 2) {
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d121      	bne.n	800093c <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 80008f8:	4b27      	ldr	r3, [pc, #156]	@ (8000998 <convertArrays+0xf0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	e017      	b.n	8000934 <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 8000904:	4a21      	ldr	r2, [pc, #132]	@ (800098c <convertArrays+0xe4>)
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	4413      	add	r3, r2
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00e      	beq.n	800092e <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 8000910:	4a1e      	ldr	r2, [pc, #120]	@ (800098c <convertArrays+0xe4>)
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	4413      	add	r3, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b20      	ldr	r3, [pc, #128]	@ (800099c <convertArrays+0xf4>)
 800091c:	5c99      	ldrb	r1, [r3, r2]
 800091e:	4a20      	ldr	r2, [pc, #128]	@ (80009a0 <convertArrays+0xf8>)
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	4413      	add	r3, r2
 8000924:	460a      	mov	r2, r1
 8000926:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	3301      	adds	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	3301      	adds	r3, #1
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	2b0f      	cmp	r3, #15
 8000938:	dde4      	ble.n	8000904 <convertArrays+0x5c>
}
 800093a:	e020      	b.n	800097e <convertArrays+0xd6>
		int eepromVal = passStartPos;
 800093c:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <convertArrays+0xfc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	e017      	b.n	8000978 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 8000948:	4a10      	ldr	r2, [pc, #64]	@ (800098c <convertArrays+0xe4>)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	4413      	add	r3, r2
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00e      	beq.n	8000972 <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 8000954:	4a0d      	ldr	r2, [pc, #52]	@ (800098c <convertArrays+0xe4>)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	4413      	add	r3, r2
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <convertArrays+0xf4>)
 8000960:	5c99      	ldrb	r1, [r3, r2]
 8000962:	4a11      	ldr	r2, [pc, #68]	@ (80009a8 <convertArrays+0x100>)
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	4413      	add	r3, r2
 8000968:	460a      	mov	r2, r1
 800096a:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	3301      	adds	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	3301      	adds	r3, #1
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	2b0f      	cmp	r3, #15
 800097c:	dde4      	ble.n	8000948 <convertArrays+0xa0>
}
 800097e:	bf00      	nop
 8000980:	372c      	adds	r7, #44	@ 0x2c
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	20000000 	.word	0x20000000
 800098c:	20000fec 	.word	0x20000fec
 8000990:	2000000c 	.word	0x2000000c
 8000994:	20001064 	.word	0x20001064
 8000998:	20000004 	.word	0x20000004
 800099c:	20000018 	.word	0x20000018
 80009a0:	20001070 	.word	0x20001070
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20001080 	.word	0x20001080

080009ac <ESP8266_Init>:
#include "SystemDefaults.h"
#include "GlobalVariables.h"
#include "Flash.h"

// ESP8266'yı WiFi ağına bağlamak için kullanılan fonksiyon
void ESP8266_Init(UART_HandleTypeDef *huart, const char *wifiSS, const char *wifiPA) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
    Wifi_FactoryReset(huart);
 80009b8:	68f8      	ldr	r0, [r7, #12]
 80009ba:	f000 fa1f 	bl	8000dfc <Wifi_FactoryReset>
    HAL_Delay(1000);
 80009be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009c2:	f009 f873 	bl	8009aac <HAL_Delay>

    Wifi_Restart(huart);
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	f000 fa08 	bl	8000ddc <Wifi_Restart>
    HAL_Delay(1000);
 80009cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009d0:	f009 f86c 	bl	8009aac <HAL_Delay>

    Wifi_Init(huart);
 80009d4:	68f8      	ldr	r0, [r7, #12]
 80009d6:	f000 f9f1 	bl	8000dbc <Wifi_Init>
    HAL_Delay(2000);
 80009da:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009de:	f009 f865 	bl	8009aac <HAL_Delay>

    Wifi_SetMode(huart, WifiMode_Station);
 80009e2:	2101      	movs	r1, #1
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f000 fa19 	bl	8000e1c <Wifi_SetMode>
    HAL_Delay(2000);
 80009ea:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80009ee:	f009 f85d 	bl	8009aac <HAL_Delay>

    Wifi_Station_ConnectToAp(huart, (char *)wifiSS, (char *)wifiPA, NULL);
 80009f2:	2300      	movs	r3, #0
 80009f4:	687a      	ldr	r2, [r7, #4]
 80009f6:	68b9      	ldr	r1, [r7, #8]
 80009f8:	68f8      	ldr	r0, [r7, #12]
 80009fa:	f000 fa29 	bl	8000e50 <Wifi_Station_ConnectToAp>
    HAL_Delay(2000);
 80009fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a02:	f009 f853 	bl	8009aac <HAL_Delay>
}
 8000a06:	bf00      	nop
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <sendMachineData>:
    Wifi_TcpIp_Close(huart, 0);
    HAL_Delay(2000);
}

// Makine verilerini sunucuya göndermek için kullanılan fonksiyon
void sendMachineData(UART_HandleTypeDef *huart, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a12:	f2ad 7d7c 	subw	sp, sp, #1916	@ 0x77c
 8000a16:	af2c      	add	r7, sp, #176	@ 0xb0
 8000a18:	f507 64d9 	add.w	r4, r7, #1736	@ 0x6c8
 8000a1c:	f2a4 642c 	subw	r4, r4, #1580	@ 0x62c
 8000a20:	6020      	str	r0, [r4, #0]
 8000a22:	f507 60d9 	add.w	r0, r7, #1736	@ 0x6c8
 8000a26:	f5a0 60c6 	sub.w	r0, r0, #1584	@ 0x630
 8000a2a:	6001      	str	r1, [r0, #0]
 8000a2c:	f507 61d9 	add.w	r1, r7, #1736	@ 0x6c8
 8000a30:	f2a1 6134 	subw	r1, r1, #1588	@ 0x634
 8000a34:	600a      	str	r2, [r1, #0]
 8000a36:	f507 62d9 	add.w	r2, r7, #1736	@ 0x6c8
 8000a3a:	f5a2 62c7 	sub.w	r2, r2, #1592	@ 0x638
 8000a3e:	6013      	str	r3, [r2, #0]
    char local_txA[1500];
    char local_txB[50];
    int len;

    char subMachineID[13];
    strncpy(subMachineID, machineID, 12);
 8000a40:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000a44:	f5a3 63c6 	sub.w	r3, r3, #1584	@ 0x630
 8000a48:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8000a4c:	220c      	movs	r2, #12
 8000a4e:	6819      	ldr	r1, [r3, #0]
 8000a50:	f00d f89f 	bl	800db92 <strncpy>
    subMachineID[12] = '\0';
 8000a54:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000a58:	f2a3 6324 	subw	r3, r3, #1572	@ 0x624
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	731a      	strb	r2, [r3, #12]

    sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000a60:	4a9d      	ldr	r2, [pc, #628]	@ (8000cd8 <sendMachineData+0x2c8>)
 8000a62:	499e      	ldr	r1, [pc, #632]	@ (8000cdc <sendMachineData+0x2cc>)
 8000a64:	489e      	ldr	r0, [pc, #632]	@ (8000ce0 <sendMachineData+0x2d0>)
 8000a66:	f00d f85d 	bl	800db24 <siprintf>
    HAL_UART_Transmit_IT(huart, (uint8_t *)bufferTX, strlen(bufferTX));
 8000a6a:	489d      	ldr	r0, [pc, #628]	@ (8000ce0 <sendMachineData+0x2d0>)
 8000a6c:	f7ff fbda 	bl	8000224 <strlen>
 8000a70:	4603      	mov	r3, r0
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000a78:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8000a7c:	4998      	ldr	r1, [pc, #608]	@ (8000ce0 <sendMachineData+0x2d0>)
 8000a7e:	6818      	ldr	r0, [r3, #0]
 8000a80:	f00c f963 	bl	800cd4a <HAL_UART_Transmit_IT>
    HAL_Delay(1000);
 8000a84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a88:	f009 f810 	bl	8009aac <HAL_Delay>

    sprintf(local_txA,
 8000a8c:	4b95      	ldr	r3, [pc, #596]	@ (8000ce4 <sendMachineData+0x2d4>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000a94:	4b94      	ldr	r3, [pc, #592]	@ (8000ce8 <sendMachineData+0x2d8>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000a9c:	4b93      	ldr	r3, [pc, #588]	@ (8000cec <sendMachineData+0x2dc>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000aa4:	4b92      	ldr	r3, [pc, #584]	@ (8000cf0 <sendMachineData+0x2e0>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000aac:	4b91      	ldr	r3, [pc, #580]	@ (8000cf4 <sendMachineData+0x2e4>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000ab2:	4b91      	ldr	r3, [pc, #580]	@ (8000cf8 <sendMachineData+0x2e8>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000ab8:	4b90      	ldr	r3, [pc, #576]	@ (8000cfc <sendMachineData+0x2ec>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	677b      	str	r3, [r7, #116]	@ 0x74
 8000abe:	4b90      	ldr	r3, [pc, #576]	@ (8000d00 <sendMachineData+0x2f0>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	673b      	str	r3, [r7, #112]	@ 0x70
 8000ac4:	4b8f      	ldr	r3, [pc, #572]	@ (8000d04 <sendMachineData+0x2f4>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000aca:	4b8f      	ldr	r3, [pc, #572]	@ (8000d08 <sendMachineData+0x2f8>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000ad0:	4b8e      	ldr	r3, [pc, #568]	@ (8000d0c <sendMachineData+0x2fc>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	667b      	str	r3, [r7, #100]	@ 0x64
 8000ad6:	4b8e      	ldr	r3, [pc, #568]	@ (8000d10 <sendMachineData+0x300>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	663b      	str	r3, [r7, #96]	@ 0x60
 8000adc:	4b8d      	ldr	r3, [pc, #564]	@ (8000d14 <sendMachineData+0x304>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000ae2:	4b8d      	ldr	r3, [pc, #564]	@ (8000d18 <sendMachineData+0x308>)
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000ae8:	4b8c      	ldr	r3, [pc, #560]	@ (8000d1c <sendMachineData+0x30c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	657b      	str	r3, [r7, #84]	@ 0x54
 8000aee:	4b8c      	ldr	r3, [pc, #560]	@ (8000d20 <sendMachineData+0x310>)
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	653b      	str	r3, [r7, #80]	@ 0x50
 8000af4:	4b8b      	ldr	r3, [pc, #556]	@ (8000d24 <sendMachineData+0x314>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000afa:	4b8b      	ldr	r3, [pc, #556]	@ (8000d28 <sendMachineData+0x318>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000b00:	4b8a      	ldr	r3, [pc, #552]	@ (8000d2c <sendMachineData+0x31c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b06:	4b8a      	ldr	r3, [pc, #552]	@ (8000d30 <sendMachineData+0x320>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8000b0c:	4b89      	ldr	r3, [pc, #548]	@ (8000d34 <sendMachineData+0x324>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000b12:	4b89      	ldr	r3, [pc, #548]	@ (8000d38 <sendMachineData+0x328>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000b18:	4b88      	ldr	r3, [pc, #544]	@ (8000d3c <sendMachineData+0x32c>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000b1e:	4b88      	ldr	r3, [pc, #544]	@ (8000d40 <sendMachineData+0x330>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	633b      	str	r3, [r7, #48]	@ 0x30
 8000b24:	4b87      	ldr	r3, [pc, #540]	@ (8000d44 <sendMachineData+0x334>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b2a:	4b87      	ldr	r3, [pc, #540]	@ (8000d48 <sendMachineData+0x338>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b30:	4b86      	ldr	r3, [pc, #536]	@ (8000d4c <sendMachineData+0x33c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b36:	4b86      	ldr	r3, [pc, #536]	@ (8000d50 <sendMachineData+0x340>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	623b      	str	r3, [r7, #32]
 8000b3c:	4b85      	ldr	r3, [pc, #532]	@ (8000d54 <sendMachineData+0x344>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	61fb      	str	r3, [r7, #28]
 8000b42:	4b85      	ldr	r3, [pc, #532]	@ (8000d58 <sendMachineData+0x348>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	61bb      	str	r3, [r7, #24]
        "GET /api/v2/machine/updateMachineRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&devirmeYuruyusSecim=%d&calismaSekli=%d&emniyetCercevesi=%d&yavaslamaLimit=%d&altLimit=%d&kapiTablaAcKonum=%d&basincSalteri=%d&kapiSecimleri=%d&kapiAcTipi=%d&kapi1Tip=%d&kapi1AcSure=%d&kapi2Tip=%d&kapi2AcSure=%d&kapitablaTip=%d&kapiTablaAcSure=%d&yukariYavasLimit=%d&devirmeYukariIleriLimit=%d&devirmeAsagiGeriLimit=%d&devirmeSilindirTipi=%d&platformSilindirTipi=%d&yukariValfTmr=%d&asagiValfTmr=%d&devirmeYukariIleriTmr=%d&devirmeAsagiGeriTmr=%d&makineCalismaTmr=%d&buzzer=%d&demoMode=%d&calismaSayisi=%d&calismaSayisiDemo=%d&dilSecim=%d&eepromData38=%d&eepromData39=%d&eepromData40=%d&eepromData41=%d&eepromData42=%d&eepromData43=%d&eepromData44=%d&eepromData45=%d&eepromData46=%d&eepromData47=%d&lcdBacklightSure=%d HTTP/1.0\r\nHost: %s\r\n\r\n",
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b48:	4b84      	ldr	r3, [pc, #528]	@ (8000d5c <sendMachineData+0x34c>)
 8000b4a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
    sprintf(local_txA,
 8000b4e:	617b      	str	r3, [r7, #20]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b50:	4b82      	ldr	r3, [pc, #520]	@ (8000d5c <sendMachineData+0x34c>)
 8000b52:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
    sprintf(local_txA,
 8000b56:	613b      	str	r3, [r7, #16]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b58:	4b80      	ldr	r3, [pc, #512]	@ (8000d5c <sendMachineData+0x34c>)
 8000b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
    sprintf(local_txA,
 8000b5e:	60fb      	str	r3, [r7, #12]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b60:	4b7e      	ldr	r3, [pc, #504]	@ (8000d5c <sendMachineData+0x34c>)
 8000b62:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
    sprintf(local_txA,
 8000b66:	60bb      	str	r3, [r7, #8]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b68:	4b7c      	ldr	r3, [pc, #496]	@ (8000d5c <sendMachineData+0x34c>)
 8000b6a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
    sprintf(local_txA,
 8000b6e:	607b      	str	r3, [r7, #4]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b70:	4b7a      	ldr	r3, [pc, #488]	@ (8000d5c <sendMachineData+0x34c>)
 8000b72:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
    sprintf(local_txA,
 8000b76:	603b      	str	r3, [r7, #0]
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b78:	4b78      	ldr	r3, [pc, #480]	@ (8000d5c <sendMachineData+0x34c>)
 8000b7a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
    sprintf(local_txA,
 8000b7e:	461e      	mov	r6, r3
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b80:	4b76      	ldr	r3, [pc, #472]	@ (8000d5c <sendMachineData+0x34c>)
 8000b82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
    sprintf(local_txA,
 8000b86:	4618      	mov	r0, r3
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b88:	4b74      	ldr	r3, [pc, #464]	@ (8000d5c <sendMachineData+0x34c>)
 8000b8a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
    sprintf(local_txA,
 8000b8e:	4619      	mov	r1, r3
        subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi, yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure, kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit, devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr, makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39], eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45], eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000b90:	4b72      	ldr	r3, [pc, #456]	@ (8000d5c <sendMachineData+0x34c>)
 8000b92:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
    sprintf(local_txA,
 8000b96:	461a      	mov	r2, r3
 8000b98:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000b9c:	f2a3 6434 	subw	r4, r3, #1588	@ 0x634
 8000ba0:	f107 0ca4 	add.w	ip, r7, #164	@ 0xa4
 8000ba4:	f107 05e8 	add.w	r5, r7, #232	@ 0xe8
 8000ba8:	4b6d      	ldr	r3, [pc, #436]	@ (8000d60 <sendMachineData+0x350>)
 8000baa:	932a      	str	r3, [sp, #168]	@ 0xa8
 8000bac:	233c      	movs	r3, #60	@ 0x3c
 8000bae:	9329      	str	r3, [sp, #164]	@ 0xa4
 8000bb0:	9228      	str	r2, [sp, #160]	@ 0xa0
 8000bb2:	9127      	str	r1, [sp, #156]	@ 0x9c
 8000bb4:	9026      	str	r0, [sp, #152]	@ 0x98
 8000bb6:	9625      	str	r6, [sp, #148]	@ 0x94
 8000bb8:	683a      	ldr	r2, [r7, #0]
 8000bba:	9224      	str	r2, [sp, #144]	@ 0x90
 8000bbc:	687a      	ldr	r2, [r7, #4]
 8000bbe:	9223      	str	r2, [sp, #140]	@ 0x8c
 8000bc0:	68ba      	ldr	r2, [r7, #8]
 8000bc2:	9222      	str	r2, [sp, #136]	@ 0x88
 8000bc4:	68fa      	ldr	r2, [r7, #12]
 8000bc6:	9221      	str	r2, [sp, #132]	@ 0x84
 8000bc8:	693a      	ldr	r2, [r7, #16]
 8000bca:	9220      	str	r2, [sp, #128]	@ 0x80
 8000bcc:	697a      	ldr	r2, [r7, #20]
 8000bce:	921f      	str	r2, [sp, #124]	@ 0x7c
 8000bd0:	69ba      	ldr	r2, [r7, #24]
 8000bd2:	921e      	str	r2, [sp, #120]	@ 0x78
 8000bd4:	69fa      	ldr	r2, [r7, #28]
 8000bd6:	921d      	str	r2, [sp, #116]	@ 0x74
 8000bd8:	6a3a      	ldr	r2, [r7, #32]
 8000bda:	921c      	str	r2, [sp, #112]	@ 0x70
 8000bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bde:	921b      	str	r2, [sp, #108]	@ 0x6c
 8000be0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000be2:	921a      	str	r2, [sp, #104]	@ 0x68
 8000be4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000be6:	9219      	str	r2, [sp, #100]	@ 0x64
 8000be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000bea:	9218      	str	r2, [sp, #96]	@ 0x60
 8000bec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000bee:	9217      	str	r2, [sp, #92]	@ 0x5c
 8000bf0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000bf2:	9216      	str	r2, [sp, #88]	@ 0x58
 8000bf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000bf6:	9215      	str	r2, [sp, #84]	@ 0x54
 8000bf8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000bfa:	9214      	str	r2, [sp, #80]	@ 0x50
 8000bfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000bfe:	9213      	str	r2, [sp, #76]	@ 0x4c
 8000c00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000c02:	9212      	str	r2, [sp, #72]	@ 0x48
 8000c04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000c06:	9211      	str	r2, [sp, #68]	@ 0x44
 8000c08:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000c0a:	9210      	str	r2, [sp, #64]	@ 0x40
 8000c0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000c0e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8000c10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000c12:	920e      	str	r2, [sp, #56]	@ 0x38
 8000c14:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000c16:	920d      	str	r2, [sp, #52]	@ 0x34
 8000c18:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000c1a:	920c      	str	r2, [sp, #48]	@ 0x30
 8000c1c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000c1e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8000c20:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000c22:	920a      	str	r2, [sp, #40]	@ 0x28
 8000c24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000c26:	9209      	str	r2, [sp, #36]	@ 0x24
 8000c28:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000c2a:	9208      	str	r2, [sp, #32]
 8000c2c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000c2e:	9207      	str	r2, [sp, #28]
 8000c30:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000c32:	9206      	str	r2, [sp, #24]
 8000c34:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000c36:	9205      	str	r2, [sp, #20]
 8000c38:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000c3c:	9204      	str	r2, [sp, #16]
 8000c3e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000c42:	9203      	str	r2, [sp, #12]
 8000c44:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000c48:	9202      	str	r2, [sp, #8]
 8000c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000c4e:	9301      	str	r3, [sp, #4]
 8000c50:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000c54:	f5a3 63c7 	sub.w	r3, r3, #1592	@ 0x638
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	6823      	ldr	r3, [r4, #0]
 8000c5e:	4662      	mov	r2, ip
 8000c60:	4940      	ldr	r1, [pc, #256]	@ (8000d64 <sendMachineData+0x354>)
 8000c62:	4628      	mov	r0, r5
 8000c64:	f00c ff5e 	bl	800db24 <siprintf>

    len = strlen(local_txA);
 8000c68:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fad9 	bl	8000224 <strlen>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f8c7 36c4 	str.w	r3, [r7, #1732]	@ 0x6c4
    sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000c78:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000c7c:	f8d7 26c4 	ldr.w	r2, [r7, #1732]	@ 0x6c4
 8000c80:	4939      	ldr	r1, [pc, #228]	@ (8000d68 <sendMachineData+0x358>)
 8000c82:	4618      	mov	r0, r3
 8000c84:	f00c ff4e 	bl	800db24 <siprintf>

    HAL_UART_Transmit_IT(huart, (uint8_t *)local_txB, strlen(local_txB));
 8000c88:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fac9 	bl	8000224 <strlen>
 8000c92:	4603      	mov	r3, r0
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8000c9a:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000c9e:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8000ca2:	6818      	ldr	r0, [r3, #0]
 8000ca4:	f00c f851 	bl	800cd4a <HAL_UART_Transmit_IT>
    HAL_Delay(2000);
 8000ca8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000cac:	f008 fefe 	bl	8009aac <HAL_Delay>

    HAL_UART_Transmit_IT(huart, (uint8_t *)local_txA, strlen(local_txA));
 8000cb0:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fab5 	bl	8000224 <strlen>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8000cc2:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000cc6:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8000cca:	6818      	ldr	r0, [r3, #0]
 8000ccc:	f00c f83d 	bl	800cd4a <HAL_UART_Transmit_IT>
    HAL_Delay(2000);
 8000cd0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000cd4:	e04a      	b.n	8000d6c <sendMachineData+0x35c>
 8000cd6:	bf00      	nop
 8000cd8:	0800e43c 	.word	0x0800e43c
 8000cdc:	0800e44c 	.word	0x0800e44c
 8000ce0:	20001524 	.word	0x20001524
 8000ce4:	200014cb 	.word	0x200014cb
 8000ce8:	200014bd 	.word	0x200014bd
 8000cec:	200014c0 	.word	0x200014c0
 8000cf0:	200014c1 	.word	0x200014c1
 8000cf4:	200014c2 	.word	0x200014c2
 8000cf8:	200014c9 	.word	0x200014c9
 8000cfc:	200014c3 	.word	0x200014c3
 8000d00:	200014c4 	.word	0x200014c4
 8000d04:	200014c8 	.word	0x200014c8
 8000d08:	200014c5 	.word	0x200014c5
 8000d0c:	200014d5 	.word	0x200014d5
 8000d10:	200014c6 	.word	0x200014c6
 8000d14:	200014d6 	.word	0x200014d6
 8000d18:	200014c7 	.word	0x200014c7
 8000d1c:	200014d7 	.word	0x200014d7
 8000d20:	200014ca 	.word	0x200014ca
 8000d24:	200014cc 	.word	0x200014cc
 8000d28:	200014cd 	.word	0x200014cd
 8000d2c:	200014ce 	.word	0x200014ce
 8000d30:	200014cf 	.word	0x200014cf
 8000d34:	200014d0 	.word	0x200014d0
 8000d38:	200014d1 	.word	0x200014d1
 8000d3c:	200014d2 	.word	0x200014d2
 8000d40:	200014d3 	.word	0x200014d3
 8000d44:	200014d4 	.word	0x200014d4
 8000d48:	200014d8 	.word	0x200014d8
 8000d4c:	200014da 	.word	0x200014da
 8000d50:	200014b4 	.word	0x200014b4
 8000d54:	200014b5 	.word	0x200014b5
 8000d58:	200014dc 	.word	0x200014dc
 8000d5c:	20000fec 	.word	0x20000fec
 8000d60:	0800e79c 	.word	0x0800e79c
 8000d64:	0800e46c 	.word	0x0800e46c
 8000d68:	0800e7b0 	.word	0x0800e7b0
 8000d6c:	f008 fe9e 	bl	8009aac <HAL_Delay>
}
 8000d70:	bf00      	nop
 8000d72:	f207 67cc 	addw	r7, r7, #1740	@ 0x6cc
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d7a:	bf00      	nop

08000d7c <Wifi_SendString>:

void Wifi_RxClear(void) {
    memset(esp8266_rx_buffer, 0, sizeof(esp8266_rx_buffer));
}

bool Wifi_SendString(UART_HandleTypeDef *huart, char *data) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
    return HAL_UART_Transmit(huart, (uint8_t *)data, strlen(data), HAL_MAX_DELAY) == HAL_OK;
 8000d86:	6838      	ldr	r0, [r7, #0]
 8000d88:	f7ff fa4c 	bl	8000224 <strlen>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	f04f 33ff 	mov.w	r3, #4294967295
 8000d94:	6839      	ldr	r1, [r7, #0]
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f00b ff54 	bl	800cc44 <HAL_UART_Transmit>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	bf0c      	ite	eq
 8000da2:	2301      	moveq	r3, #1
 8000da4:	2300      	movne	r3, #0
 8000da6:	b2db      	uxtb	r3, r3
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <Wifi_RxCallBack>:
    }
    va_end(args);
    return false;
}

void Wifi_RxCallBack(void) {
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
    // Callback işlemleri buraya eklenecek
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <Wifi_Init>:

bool Wifi_Init(UART_HandleTypeDef *huart) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
    return Wifi_SendString(huart, "AT\r\n"); //&&
 8000dc4:	4904      	ldr	r1, [pc, #16]	@ (8000dd8 <Wifi_Init+0x1c>)
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ffd8 	bl	8000d7c <Wifi_SendString>
 8000dcc:	4603      	mov	r3, r0
           //Wifi_WaitForString(huart, 1000, NULL, 1, "OK");
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	0800ed60 	.word	0x0800ed60

08000ddc <Wifi_Restart>:

void Wifi_Disable(void) {
    // Wifi kapama işlemleri buraya eklenecek
}

bool Wifi_Restart(UART_HandleTypeDef *huart) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
    return Wifi_SendString(huart, "AT+RST\r\n"); //&&
 8000de4:	4904      	ldr	r1, [pc, #16]	@ (8000df8 <Wifi_Restart+0x1c>)
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff ffc8 	bl	8000d7c <Wifi_SendString>
 8000dec:	4603      	mov	r3, r0
           //Wifi_WaitForString(huart, 5000, NULL, 1, "OK");
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	0800ed68 	.word	0x0800ed68

08000dfc <Wifi_FactoryReset>:
    sprintf(cmd, "AT+GSLP=%d\r\n", DelayMs);
    return Wifi_SendString(huart, cmd); //&&
           //Wifi_WaitForString(huart, 1000, NULL, 1, "OK");
}

bool Wifi_FactoryReset(UART_HandleTypeDef *huart) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
    return Wifi_SendString(huart, "AT+RESTORE\r\n"); //&&
 8000e04:	4904      	ldr	r1, [pc, #16]	@ (8000e18 <Wifi_FactoryReset+0x1c>)
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f7ff ffb8 	bl	8000d7c <Wifi_SendString>
 8000e0c:	4603      	mov	r3, r0
           //Wifi_WaitForString(huart, 5000, NULL, 1, "OK");
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	0800ed84 	.word	0x0800ed84

08000e1c <Wifi_SetMode>:
    sprintf(cmd, "AT+RFPOWER=%d\r\n", Power_0_to_82);
    return Wifi_SendString(huart, cmd); //&&
           //Wifi_WaitForString(huart, 1000, NULL, 1, "OK");
}

bool Wifi_SetMode(UART_HandleTypeDef *huart, WifiMode_t WifiMode_) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08a      	sub	sp, #40	@ 0x28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	460b      	mov	r3, r1
 8000e26:	70fb      	strb	r3, [r7, #3]
    char cmd[32];
    sprintf(cmd, "AT+CWMODE=%d\r\n", WifiMode_);
 8000e28:	78fa      	ldrb	r2, [r7, #3]
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	4907      	ldr	r1, [pc, #28]	@ (8000e4c <Wifi_SetMode+0x30>)
 8000e30:	4618      	mov	r0, r3
 8000e32:	f00c fe77 	bl	800db24 <siprintf>
    return Wifi_SendString(huart, cmd); //&&
 8000e36:	f107 0308 	add.w	r3, r7, #8
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff9d 	bl	8000d7c <Wifi_SendString>
 8000e42:	4603      	mov	r3, r0
           //Wifi_WaitForString(huart, 1000, NULL, 1, "OK");
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3728      	adds	r7, #40	@ 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	0800edb4 	.word	0x0800edb4

08000e50 <Wifi_Station_ConnectToAp>:
bool Wifi_GetMyIp(UART_HandleTypeDef *huart) {
    return Wifi_SendString(huart, "AT+CIFSR\r\n"); //&&
           //Wifi_WaitForString(huart, 1000, NULL, 1, "OK");
}

bool Wifi_Station_ConnectToAp(UART_HandleTypeDef *huart, char *SSID, char *Pass, char *MAC) {
 8000e50:	b590      	push	{r4, r7, lr}
 8000e52:	b0c5      	sub	sp, #276	@ 0x114
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	f507 7488 	add.w	r4, r7, #272	@ 0x110
 8000e5a:	f5a4 7482 	sub.w	r4, r4, #260	@ 0x104
 8000e5e:	6020      	str	r0, [r4, #0]
 8000e60:	f507 7088 	add.w	r0, r7, #272	@ 0x110
 8000e64:	f5a0 7084 	sub.w	r0, r0, #264	@ 0x108
 8000e68:	6001      	str	r1, [r0, #0]
 8000e6a:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000e6e:	f5a1 7186 	sub.w	r1, r1, #268	@ 0x10c
 8000e72:	600a      	str	r2, [r1, #0]
 8000e74:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000e78:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000e7c:	6013      	str	r3, [r2, #0]
    char cmd[256];
    sprintf(cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, Pass);
 8000e7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e82:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000e86:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000e8a:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000e8e:	f107 0010 	add.w	r0, r7, #16
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	6812      	ldr	r2, [r2, #0]
 8000e96:	4909      	ldr	r1, [pc, #36]	@ (8000ebc <Wifi_Station_ConnectToAp+0x6c>)
 8000e98:	f00c fe44 	bl	800db24 <siprintf>
    return Wifi_SendString(huart, cmd); //&&
 8000e9c:	f107 0210 	add.w	r2, r7, #16
 8000ea0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000ea4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000ea8:	4611      	mov	r1, r2
 8000eaa:	6818      	ldr	r0, [r3, #0]
 8000eac:	f7ff ff66 	bl	8000d7c <Wifi_SendString>
 8000eb0:	4603      	mov	r3, r0
           //Wifi_WaitForString(huart, 10000, NULL, 1, "OK");
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd90      	pop	{r4, r7, pc}
 8000ebc:	0800ede0 	.word	0x0800ede0

08000ec0 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b089      	sub	sp, #36	@ 0x24
 8000ec4:	af04      	add	r7, sp, #16
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000eca:	4b25      	ldr	r3, [pc, #148]	@ (8000f60 <hata2EEPROM+0xa0>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	1e5a      	subs	r2, r3, #1
 8000ed0:	4b24      	ldr	r3, [pc, #144]	@ (8000f64 <hata2EEPROM+0xa4>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	4a24      	ldr	r2, [pc, #144]	@ (8000f68 <hata2EEPROM+0xa8>)
 8000ed8:	5cd3      	ldrb	r3, [r2, r3]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000ede:	f000 f8d1 	bl	8001084 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000ee2:	e000      	b.n	8000ee6 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000ee4:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	e012      	b.n	8000f12 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000eec:	4b1d      	ldr	r3, [pc, #116]	@ (8000f64 <hata2EEPROM+0xa4>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8000f68 <hata2EEPROM+0xa8>)
 8000ef6:	5cd3      	ldrb	r3, [r2, r3]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d107      	bne.n	8000f0c <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000efc:	4b19      	ldr	r3, [pc, #100]	@ (8000f64 <hata2EEPROM+0xa4>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	4918      	ldr	r1, [pc, #96]	@ (8000f68 <hata2EEPROM+0xa8>)
 8000f06:	79fa      	ldrb	r2, [r7, #7]
 8000f08:	54ca      	strb	r2, [r1, r3]
					break;
 8000f0a:	e007      	b.n	8000f1c <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <hata2EEPROM+0xa0>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	dbe7      	blt.n	8000eec <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000f1c:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <hata2EEPROM+0xa4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	b299      	uxth	r1, r3
 8000f22:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <hata2EEPROM+0xa0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	b298      	uxth	r0, r3
 8000f28:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <hata2EEPROM+0xa4>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a0e      	ldr	r2, [pc, #56]	@ (8000f68 <hata2EEPROM+0xa8>)
 8000f2e:	4413      	add	r3, r2
 8000f30:	4a0b      	ldr	r2, [pc, #44]	@ (8000f60 <hata2EEPROM+0xa0>)
 8000f32:	6812      	ldr	r2, [r2, #0]
 8000f34:	b292      	uxth	r2, r2
 8000f36:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 8000f3a:	9402      	str	r4, [sp, #8]
 8000f3c:	9201      	str	r2, [sp, #4]
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	4603      	mov	r3, r0
 8000f42:	460a      	mov	r2, r1
 8000f44:	21a0      	movs	r1, #160	@ 0xa0
 8000f46:	4809      	ldr	r0, [pc, #36]	@ (8000f6c <hata2EEPROM+0xac>)
 8000f48:	f009 fe3a 	bl	800abc0 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000f4c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f50:	f008 fdac 	bl	8009aac <HAL_Delay>
	eepromKontrol();
 8000f54:	f7ff f96e 	bl	8000234 <eepromKontrol>
}
 8000f58:	bf00      	nop
 8000f5a:	3714      	adds	r7, #20
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd90      	pop	{r4, r7, pc}
 8000f60:	20000094 	.word	0x20000094
 8000f64:	20000098 	.word	0x20000098
 8000f68:	20000fec 	.word	0x20000fec
 8000f6c:	20001d3c 	.word	0x20001d3c

08000f70 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d10f      	bne.n	8000fa0 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000f80:	4a38      	ldr	r2, [pc, #224]	@ (8001064 <hataKoduLcdGoster+0xf4>)
 8000f82:	2101      	movs	r1, #1
 8000f84:	2001      	movs	r0, #1
 8000f86:	f008 f81d 	bl	8008fc4 <lcd_print>
		lcd_print(2, 1, "1");
 8000f8a:	4a37      	ldr	r2, [pc, #220]	@ (8001068 <hataKoduLcdGoster+0xf8>)
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	2002      	movs	r0, #2
 8000f90:	f008 f818 	bl	8008fc4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000f94:	4a35      	ldr	r2, [pc, #212]	@ (800106c <hataKoduLcdGoster+0xfc>)
 8000f96:	2107      	movs	r1, #7
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f008 f813 	bl	8008fc4 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000f9e:	e05d      	b.n	800105c <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d10f      	bne.n	8000fc6 <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 8000fa6:	4a2f      	ldr	r2, [pc, #188]	@ (8001064 <hataKoduLcdGoster+0xf4>)
 8000fa8:	2101      	movs	r1, #1
 8000faa:	2001      	movs	r0, #1
 8000fac:	f008 f80a 	bl	8008fc4 <lcd_print>
		lcd_print(2, 2, "2");
 8000fb0:	4a2f      	ldr	r2, [pc, #188]	@ (8001070 <hataKoduLcdGoster+0x100>)
 8000fb2:	2102      	movs	r1, #2
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	f008 f805 	bl	8008fc4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000fba:	4a2c      	ldr	r2, [pc, #176]	@ (800106c <hataKoduLcdGoster+0xfc>)
 8000fbc:	2107      	movs	r1, #7
 8000fbe:	2002      	movs	r0, #2
 8000fc0:	f008 f800 	bl	8008fc4 <lcd_print>
}
 8000fc4:	e04a      	b.n	800105c <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d10f      	bne.n	8000fec <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000fcc:	4a25      	ldr	r2, [pc, #148]	@ (8001064 <hataKoduLcdGoster+0xf4>)
 8000fce:	2101      	movs	r1, #1
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f007 fff7 	bl	8008fc4 <lcd_print>
		lcd_print(2, 3, "3");
 8000fd6:	4a27      	ldr	r2, [pc, #156]	@ (8001074 <hataKoduLcdGoster+0x104>)
 8000fd8:	2103      	movs	r1, #3
 8000fda:	2002      	movs	r0, #2
 8000fdc:	f007 fff2 	bl	8008fc4 <lcd_print>
		lcd_print(2, 7, "          ");
 8000fe0:	4a22      	ldr	r2, [pc, #136]	@ (800106c <hataKoduLcdGoster+0xfc>)
 8000fe2:	2107      	movs	r1, #7
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f007 ffed 	bl	8008fc4 <lcd_print>
}
 8000fea:	e037      	b.n	800105c <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	d10f      	bne.n	8001012 <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8000ff2:	4a1c      	ldr	r2, [pc, #112]	@ (8001064 <hataKoduLcdGoster+0xf4>)
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f007 ffe4 	bl	8008fc4 <lcd_print>
		lcd_print(2, 4, "4");
 8000ffc:	4a1e      	ldr	r2, [pc, #120]	@ (8001078 <hataKoduLcdGoster+0x108>)
 8000ffe:	2104      	movs	r1, #4
 8001000:	2002      	movs	r0, #2
 8001002:	f007 ffdf 	bl	8008fc4 <lcd_print>
		lcd_print(2, 7, "          ");
 8001006:	4a19      	ldr	r2, [pc, #100]	@ (800106c <hataKoduLcdGoster+0xfc>)
 8001008:	2107      	movs	r1, #7
 800100a:	2002      	movs	r0, #2
 800100c:	f007 ffda 	bl	8008fc4 <lcd_print>
}
 8001010:	e024      	b.n	800105c <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8001012:	79fb      	ldrb	r3, [r7, #7]
 8001014:	2b05      	cmp	r3, #5
 8001016:	d10f      	bne.n	8001038 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8001018:	4a12      	ldr	r2, [pc, #72]	@ (8001064 <hataKoduLcdGoster+0xf4>)
 800101a:	2101      	movs	r1, #1
 800101c:	2001      	movs	r0, #1
 800101e:	f007 ffd1 	bl	8008fc4 <lcd_print>
		lcd_print(2, 5, "5");
 8001022:	4a16      	ldr	r2, [pc, #88]	@ (800107c <hataKoduLcdGoster+0x10c>)
 8001024:	2105      	movs	r1, #5
 8001026:	2002      	movs	r0, #2
 8001028:	f007 ffcc 	bl	8008fc4 <lcd_print>
		lcd_print(2, 7, "          ");
 800102c:	4a0f      	ldr	r2, [pc, #60]	@ (800106c <hataKoduLcdGoster+0xfc>)
 800102e:	2107      	movs	r1, #7
 8001030:	2002      	movs	r0, #2
 8001032:	f007 ffc7 	bl	8008fc4 <lcd_print>
}
 8001036:	e011      	b.n	800105c <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	2b06      	cmp	r3, #6
 800103c:	d10e      	bne.n	800105c <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 800103e:	4a09      	ldr	r2, [pc, #36]	@ (8001064 <hataKoduLcdGoster+0xf4>)
 8001040:	2101      	movs	r1, #1
 8001042:	2001      	movs	r0, #1
 8001044:	f007 ffbe 	bl	8008fc4 <lcd_print>
		lcd_print(2, 6, "6");
 8001048:	4a0d      	ldr	r2, [pc, #52]	@ (8001080 <hataKoduLcdGoster+0x110>)
 800104a:	2106      	movs	r1, #6
 800104c:	2002      	movs	r0, #2
 800104e:	f007 ffb9 	bl	8008fc4 <lcd_print>
		lcd_print(2, 7, "          ");
 8001052:	4a06      	ldr	r2, [pc, #24]	@ (800106c <hataKoduLcdGoster+0xfc>)
 8001054:	2107      	movs	r1, #7
 8001056:	2002      	movs	r0, #2
 8001058:	f007 ffb4 	bl	8008fc4 <lcd_print>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20001cb0 	.word	0x20001cb0
 8001068:	0800ef58 	.word	0x0800ef58
 800106c:	0800ef5c 	.word	0x0800ef5c
 8001070:	0800ef68 	.word	0x0800ef68
 8001074:	0800ef6c 	.word	0x0800ef6c
 8001078:	0800ef70 	.word	0x0800ef70
 800107c:	0800ef74 	.word	0x0800ef74
 8001080:	0800ef78 	.word	0x0800ef78

08001084 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 800108a:	2300      	movs	r3, #0
 800108c:	607b      	str	r3, [r7, #4]
 800108e:	e009      	b.n	80010a4 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8001090:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <eepromDataFillWithEmpty+0x38>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001098:	4a09      	ldr	r2, [pc, #36]	@ (80010c0 <eepromDataFillWithEmpty+0x3c>)
 800109a:	2100      	movs	r1, #0
 800109c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	3301      	adds	r3, #1
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	4b07      	ldr	r3, [pc, #28]	@ (80010c4 <eepromDataFillWithEmpty+0x40>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	dbf0      	blt.n	8001090 <eepromDataFillWithEmpty+0xc>
	}
}
 80010ae:	bf00      	nop
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bc80      	pop	{r7}
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	2000006c 	.word	0x2000006c
 80010c0:	20000fec 	.word	0x20000fec
 80010c4:	20000094 	.word	0x20000094

080010c8 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 80010ce:	463b      	mov	r3, r7
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 80010da:	4b50      	ldr	r3, [pc, #320]	@ (800121c <i2cTest+0x154>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	4b4e      	ldr	r3, [pc, #312]	@ (800121c <i2cTest+0x154>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f022 0201 	bic.w	r2, r2, #1
 80010e8:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 80010ea:	484c      	ldr	r0, [pc, #304]	@ (800121c <i2cTest+0x154>)
 80010ec:	f009 fc3a 	bl	800a964 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010f0:	23c0      	movs	r3, #192	@ 0xc0
 80010f2:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 80010f4:	2311      	movs	r3, #17
 80010f6:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80010f8:	2301      	movs	r3, #1
 80010fa:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80010fc:	2303      	movs	r3, #3
 80010fe:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8001100:	463b      	mov	r3, r7
 8001102:	4619      	mov	r1, r3
 8001104:	4846      	ldr	r0, [pc, #280]	@ (8001220 <i2cTest+0x158>)
 8001106:	f009 f841 	bl	800a18c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	2140      	movs	r1, #64	@ 0x40
 800110e:	4844      	ldr	r0, [pc, #272]	@ (8001220 <i2cTest+0x158>)
 8001110:	f009 fab3 	bl	800a67a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001114:	2201      	movs	r2, #1
 8001116:	2180      	movs	r1, #128	@ 0x80
 8001118:	4841      	ldr	r0, [pc, #260]	@ (8001220 <i2cTest+0x158>)
 800111a:	f009 faae 	bl	800a67a <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 800111e:	200a      	movs	r0, #10
 8001120:	f008 fcc4 	bl	8009aac <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8001124:	bf00      	nop
 8001126:	2140      	movs	r1, #64	@ 0x40
 8001128:	483d      	ldr	r0, [pc, #244]	@ (8001220 <i2cTest+0x158>)
 800112a:	f009 fa8f 	bl	800a64c <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	2b01      	cmp	r3, #1
 8001132:	d006      	beq.n	8001142 <i2cTest+0x7a>
 8001134:	2180      	movs	r1, #128	@ 0x80
 8001136:	483a      	ldr	r0, [pc, #232]	@ (8001220 <i2cTest+0x158>)
 8001138:	f009 fa88 	bl	800a64c <HAL_GPIO_ReadPin>
 800113c:	4603      	mov	r3, r0
 800113e:	2b01      	cmp	r3, #1
 8001140:	d1f1      	bne.n	8001126 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	2180      	movs	r1, #128	@ 0x80
 8001146:	4836      	ldr	r0, [pc, #216]	@ (8001220 <i2cTest+0x158>)
 8001148:	f009 fa97 	bl	800a67a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 800114c:	200a      	movs	r0, #10
 800114e:	f008 fcad 	bl	8009aac <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8001152:	bf00      	nop
 8001154:	2180      	movs	r1, #128	@ 0x80
 8001156:	4832      	ldr	r0, [pc, #200]	@ (8001220 <i2cTest+0x158>)
 8001158:	f009 fa78 	bl	800a64c <HAL_GPIO_ReadPin>
 800115c:	4603      	mov	r3, r0
 800115e:	2b01      	cmp	r3, #1
 8001160:	d0f8      	beq.n	8001154 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	2140      	movs	r1, #64	@ 0x40
 8001166:	482e      	ldr	r0, [pc, #184]	@ (8001220 <i2cTest+0x158>)
 8001168:	f009 fa87 	bl	800a67a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800116c:	200a      	movs	r0, #10
 800116e:	f008 fc9d 	bl	8009aac <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8001172:	bf00      	nop
 8001174:	2140      	movs	r1, #64	@ 0x40
 8001176:	482a      	ldr	r0, [pc, #168]	@ (8001220 <i2cTest+0x158>)
 8001178:	f009 fa68 	bl	800a64c <HAL_GPIO_ReadPin>
 800117c:	4603      	mov	r3, r0
 800117e:	2b01      	cmp	r3, #1
 8001180:	d0f8      	beq.n	8001174 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001182:	2201      	movs	r2, #1
 8001184:	2140      	movs	r1, #64	@ 0x40
 8001186:	4826      	ldr	r0, [pc, #152]	@ (8001220 <i2cTest+0x158>)
 8001188:	f009 fa77 	bl	800a67a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800118c:	200a      	movs	r0, #10
 800118e:	f008 fc8d 	bl	8009aac <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8001192:	bf00      	nop
 8001194:	2140      	movs	r1, #64	@ 0x40
 8001196:	4822      	ldr	r0, [pc, #136]	@ (8001220 <i2cTest+0x158>)
 8001198:	f009 fa58 	bl	800a64c <HAL_GPIO_ReadPin>
 800119c:	4603      	mov	r3, r0
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d1f8      	bne.n	8001194 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80011a2:	2201      	movs	r2, #1
 80011a4:	2180      	movs	r1, #128	@ 0x80
 80011a6:	481e      	ldr	r0, [pc, #120]	@ (8001220 <i2cTest+0x158>)
 80011a8:	f009 fa67 	bl	800a67a <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80011ac:	200a      	movs	r0, #10
 80011ae:	f008 fc7d 	bl	8009aac <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80011b2:	bf00      	nop
 80011b4:	2180      	movs	r1, #128	@ 0x80
 80011b6:	481a      	ldr	r0, [pc, #104]	@ (8001220 <i2cTest+0x158>)
 80011b8:	f009 fa48 	bl	800a64c <HAL_GPIO_ReadPin>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d1f8      	bne.n	80011b4 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011c2:	23c0      	movs	r3, #192	@ 0xc0
 80011c4:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80011c6:	2312      	movs	r3, #18
 80011c8:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80011ca:	2301      	movs	r3, #1
 80011cc:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80011ce:	2303      	movs	r3, #3
 80011d0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80011d2:	463b      	mov	r3, r7
 80011d4:	4619      	mov	r1, r3
 80011d6:	4812      	ldr	r0, [pc, #72]	@ (8001220 <i2cTest+0x158>)
 80011d8:	f008 ffd8 	bl	800a18c <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	@ (800121c <i2cTest+0x154>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	4b0e      	ldr	r3, [pc, #56]	@ (800121c <i2cTest+0x154>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80011ea:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80011ec:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <i2cTest+0x154>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <i2cTest+0x154>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80011fa:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 80011fc:	4b07      	ldr	r3, [pc, #28]	@ (800121c <i2cTest+0x154>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <i2cTest+0x154>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f042 0201 	orr.w	r2, r2, #1
 800120a:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 800120c:	4803      	ldr	r0, [pc, #12]	@ (800121c <i2cTest+0x154>)
 800120e:	f009 fa65 	bl	800a6dc <HAL_I2C_Init>
}
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20001d3c 	.word	0x20001d3c
 8001220:	40010c00 	.word	0x40010c00

08001224 <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 800122e:	20c8      	movs	r0, #200	@ 0xc8
 8001230:	f008 fc3c 	bl	8009aac <HAL_Delay>
	lcd_clear();
 8001234:	f007 fef2 	bl	800901c <lcd_clear>
	if(type == 1 && page == 0) {
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d13e      	bne.n	80012bc <printTemplate+0x98>
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d13b      	bne.n	80012bc <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8001244:	4a9a      	ldr	r2, [pc, #616]	@ (80014b0 <printTemplate+0x28c>)
 8001246:	2101      	movs	r1, #1
 8001248:	2001      	movs	r0, #1
 800124a:	f007 febb 	bl	8008fc4 <lcd_print>
		lcd_print(2, 3, "0");
 800124e:	4a99      	ldr	r2, [pc, #612]	@ (80014b4 <printTemplate+0x290>)
 8001250:	2103      	movs	r1, #3
 8001252:	2002      	movs	r0, #2
 8001254:	f007 feb6 	bl	8008fc4 <lcd_print>
		lcd_print(2, 4, "1");
 8001258:	4a97      	ldr	r2, [pc, #604]	@ (80014b8 <printTemplate+0x294>)
 800125a:	2104      	movs	r1, #4
 800125c:	2002      	movs	r0, #2
 800125e:	f007 feb1 	bl	8008fc4 <lcd_print>
		lcd_print(2, 5, "2");
 8001262:	4a96      	ldr	r2, [pc, #600]	@ (80014bc <printTemplate+0x298>)
 8001264:	2105      	movs	r1, #5
 8001266:	2002      	movs	r0, #2
 8001268:	f007 feac 	bl	8008fc4 <lcd_print>
		lcd_print(2, 6, "3");
 800126c:	4a94      	ldr	r2, [pc, #592]	@ (80014c0 <printTemplate+0x29c>)
 800126e:	2106      	movs	r1, #6
 8001270:	2002      	movs	r0, #2
 8001272:	f007 fea7 	bl	8008fc4 <lcd_print>
		lcd_print(2, 7, "4");
 8001276:	4a93      	ldr	r2, [pc, #588]	@ (80014c4 <printTemplate+0x2a0>)
 8001278:	2107      	movs	r1, #7
 800127a:	2002      	movs	r0, #2
 800127c:	f007 fea2 	bl	8008fc4 <lcd_print>
		lcd_print(2, 10, "5");
 8001280:	4a91      	ldr	r2, [pc, #580]	@ (80014c8 <printTemplate+0x2a4>)
 8001282:	210a      	movs	r1, #10
 8001284:	2002      	movs	r0, #2
 8001286:	f007 fe9d 	bl	8008fc4 <lcd_print>
		lcd_print(2, 11, "6");
 800128a:	4a90      	ldr	r2, [pc, #576]	@ (80014cc <printTemplate+0x2a8>)
 800128c:	210b      	movs	r1, #11
 800128e:	2002      	movs	r0, #2
 8001290:	f007 fe98 	bl	8008fc4 <lcd_print>
		lcd_print(2, 12, "7");
 8001294:	4a8e      	ldr	r2, [pc, #568]	@ (80014d0 <printTemplate+0x2ac>)
 8001296:	210c      	movs	r1, #12
 8001298:	2002      	movs	r0, #2
 800129a:	f007 fe93 	bl	8008fc4 <lcd_print>
		lcd_print(2, 13, "8");
 800129e:	4a8d      	ldr	r2, [pc, #564]	@ (80014d4 <printTemplate+0x2b0>)
 80012a0:	210d      	movs	r1, #13
 80012a2:	2002      	movs	r0, #2
 80012a4:	f007 fe8e 	bl	8008fc4 <lcd_print>
		lcd_print(2, 14, "9");
 80012a8:	4a8b      	ldr	r2, [pc, #556]	@ (80014d8 <printTemplate+0x2b4>)
 80012aa:	210e      	movs	r1, #14
 80012ac:	2002      	movs	r0, #2
 80012ae:	f007 fe89 	bl	8008fc4 <lcd_print>
		lcd_gotoxy(2, 3);
 80012b2:	2103      	movs	r1, #3
 80012b4:	2002      	movs	r0, #2
 80012b6:	f007 fe66 	bl	8008f86 <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 80012ba:	e0f5      	b.n	80014a8 <printTemplate+0x284>
	} else if(type == 2) {
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d178      	bne.n	80013b4 <printTemplate+0x190>
		if(page == 1) {
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d114      	bne.n	80012f2 <printTemplate+0xce>
			lcd_clear();
 80012c8:	f007 fea8 	bl	800901c <lcd_clear>
			HAL_Delay(100);
 80012cc:	2064      	movs	r0, #100	@ 0x64
 80012ce:	f008 fbed 	bl	8009aac <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 80012d2:	4a82      	ldr	r2, [pc, #520]	@ (80014dc <printTemplate+0x2b8>)
 80012d4:	2101      	movs	r1, #1
 80012d6:	2001      	movs	r0, #1
 80012d8:	f007 fe74 	bl	8008fc4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80012dc:	4a80      	ldr	r2, [pc, #512]	@ (80014e0 <printTemplate+0x2bc>)
 80012de:	2107      	movs	r1, #7
 80012e0:	2001      	movs	r0, #1
 80012e2:	f007 fe6f 	bl	8008fc4 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80012e6:	4a7f      	ldr	r2, [pc, #508]	@ (80014e4 <printTemplate+0x2c0>)
 80012e8:	2101      	movs	r1, #1
 80012ea:	2002      	movs	r0, #2
 80012ec:	f007 fe6a 	bl	8008fc4 <lcd_print>
}
 80012f0:	e0da      	b.n	80014a8 <printTemplate+0x284>
		} else if(page == 2) {
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d114      	bne.n	8001322 <printTemplate+0xfe>
			lcd_clear();
 80012f8:	f007 fe90 	bl	800901c <lcd_clear>
			HAL_Delay(100);
 80012fc:	2064      	movs	r0, #100	@ 0x64
 80012fe:	f008 fbd5 	bl	8009aac <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8001302:	4a79      	ldr	r2, [pc, #484]	@ (80014e8 <printTemplate+0x2c4>)
 8001304:	2101      	movs	r1, #1
 8001306:	2001      	movs	r0, #1
 8001308:	f007 fe5c 	bl	8008fc4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800130c:	4a74      	ldr	r2, [pc, #464]	@ (80014e0 <printTemplate+0x2bc>)
 800130e:	2107      	movs	r1, #7
 8001310:	2001      	movs	r0, #1
 8001312:	f007 fe57 	bl	8008fc4 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001316:	4a75      	ldr	r2, [pc, #468]	@ (80014ec <printTemplate+0x2c8>)
 8001318:	2101      	movs	r1, #1
 800131a:	2002      	movs	r0, #2
 800131c:	f007 fe52 	bl	8008fc4 <lcd_print>
}
 8001320:	e0c2      	b.n	80014a8 <printTemplate+0x284>
		} else if(page == 3) {
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	2b03      	cmp	r3, #3
 8001326:	d114      	bne.n	8001352 <printTemplate+0x12e>
			lcd_clear();
 8001328:	f007 fe78 	bl	800901c <lcd_clear>
			HAL_Delay(100);
 800132c:	2064      	movs	r0, #100	@ 0x64
 800132e:	f008 fbbd 	bl	8009aac <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8001332:	4a6a      	ldr	r2, [pc, #424]	@ (80014dc <printTemplate+0x2b8>)
 8001334:	2101      	movs	r1, #1
 8001336:	2001      	movs	r0, #1
 8001338:	f007 fe44 	bl	8008fc4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800133c:	4a68      	ldr	r2, [pc, #416]	@ (80014e0 <printTemplate+0x2bc>)
 800133e:	2107      	movs	r1, #7
 8001340:	2001      	movs	r0, #1
 8001342:	f007 fe3f 	bl	8008fc4 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8001346:	4a6a      	ldr	r2, [pc, #424]	@ (80014f0 <printTemplate+0x2cc>)
 8001348:	2101      	movs	r1, #1
 800134a:	2002      	movs	r0, #2
 800134c:	f007 fe3a 	bl	8008fc4 <lcd_print>
}
 8001350:	e0aa      	b.n	80014a8 <printTemplate+0x284>
		} else if(page == 4) {
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	2b04      	cmp	r3, #4
 8001356:	d114      	bne.n	8001382 <printTemplate+0x15e>
			lcd_clear();
 8001358:	f007 fe60 	bl	800901c <lcd_clear>
			HAL_Delay(100);
 800135c:	2064      	movs	r0, #100	@ 0x64
 800135e:	f008 fba5 	bl	8009aac <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8001362:	4a5e      	ldr	r2, [pc, #376]	@ (80014dc <printTemplate+0x2b8>)
 8001364:	2101      	movs	r1, #1
 8001366:	2001      	movs	r0, #1
 8001368:	f007 fe2c 	bl	8008fc4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800136c:	4a5c      	ldr	r2, [pc, #368]	@ (80014e0 <printTemplate+0x2bc>)
 800136e:	2107      	movs	r1, #7
 8001370:	2001      	movs	r0, #1
 8001372:	f007 fe27 	bl	8008fc4 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8001376:	4a5f      	ldr	r2, [pc, #380]	@ (80014f4 <printTemplate+0x2d0>)
 8001378:	2101      	movs	r1, #1
 800137a:	2002      	movs	r0, #2
 800137c:	f007 fe22 	bl	8008fc4 <lcd_print>
}
 8001380:	e092      	b.n	80014a8 <printTemplate+0x284>
		} else if(page == 5) {
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	2b05      	cmp	r3, #5
 8001386:	f040 808f 	bne.w	80014a8 <printTemplate+0x284>
			lcd_clear();
 800138a:	f007 fe47 	bl	800901c <lcd_clear>
			HAL_Delay(100);
 800138e:	2064      	movs	r0, #100	@ 0x64
 8001390:	f008 fb8c 	bl	8009aac <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8001394:	4a51      	ldr	r2, [pc, #324]	@ (80014dc <printTemplate+0x2b8>)
 8001396:	2101      	movs	r1, #1
 8001398:	2001      	movs	r0, #1
 800139a:	f007 fe13 	bl	8008fc4 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800139e:	4a50      	ldr	r2, [pc, #320]	@ (80014e0 <printTemplate+0x2bc>)
 80013a0:	2107      	movs	r1, #7
 80013a2:	2001      	movs	r0, #1
 80013a4:	f007 fe0e 	bl	8008fc4 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 80013a8:	4a53      	ldr	r2, [pc, #332]	@ (80014f8 <printTemplate+0x2d4>)
 80013aa:	2101      	movs	r1, #1
 80013ac:	2002      	movs	r0, #2
 80013ae:	f007 fe09 	bl	8008fc4 <lcd_print>
}
 80013b2:	e079      	b.n	80014a8 <printTemplate+0x284>
	} else if(type == 3) {
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d176      	bne.n	80014a8 <printTemplate+0x284>
		if(page == 1) {
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d114      	bne.n	80013ea <printTemplate+0x1c6>
			lcd_clear();
 80013c0:	f007 fe2c 	bl	800901c <lcd_clear>
			HAL_Delay(100);
 80013c4:	2064      	movs	r0, #100	@ 0x64
 80013c6:	f008 fb71 	bl	8009aac <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80013ca:	4a4c      	ldr	r2, [pc, #304]	@ (80014fc <printTemplate+0x2d8>)
 80013cc:	2101      	movs	r1, #1
 80013ce:	2001      	movs	r0, #1
 80013d0:	f007 fdf8 	bl	8008fc4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80013d4:	4a4a      	ldr	r2, [pc, #296]	@ (8001500 <printTemplate+0x2dc>)
 80013d6:	2107      	movs	r1, #7
 80013d8:	2001      	movs	r0, #1
 80013da:	f007 fdf3 	bl	8008fc4 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80013de:	4a41      	ldr	r2, [pc, #260]	@ (80014e4 <printTemplate+0x2c0>)
 80013e0:	2101      	movs	r1, #1
 80013e2:	2002      	movs	r0, #2
 80013e4:	f007 fdee 	bl	8008fc4 <lcd_print>
}
 80013e8:	e05e      	b.n	80014a8 <printTemplate+0x284>
		} else if(page == 2) {
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d114      	bne.n	800141a <printTemplate+0x1f6>
			lcd_clear();
 80013f0:	f007 fe14 	bl	800901c <lcd_clear>
			HAL_Delay(100);
 80013f4:	2064      	movs	r0, #100	@ 0x64
 80013f6:	f008 fb59 	bl	8009aac <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80013fa:	4a40      	ldr	r2, [pc, #256]	@ (80014fc <printTemplate+0x2d8>)
 80013fc:	2101      	movs	r1, #1
 80013fe:	2001      	movs	r0, #1
 8001400:	f007 fde0 	bl	8008fc4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001404:	4a3e      	ldr	r2, [pc, #248]	@ (8001500 <printTemplate+0x2dc>)
 8001406:	2107      	movs	r1, #7
 8001408:	2001      	movs	r0, #1
 800140a:	f007 fddb 	bl	8008fc4 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 800140e:	4a37      	ldr	r2, [pc, #220]	@ (80014ec <printTemplate+0x2c8>)
 8001410:	2101      	movs	r1, #1
 8001412:	2002      	movs	r0, #2
 8001414:	f007 fdd6 	bl	8008fc4 <lcd_print>
}
 8001418:	e046      	b.n	80014a8 <printTemplate+0x284>
		} else if(page == 3) {
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	2b03      	cmp	r3, #3
 800141e:	d114      	bne.n	800144a <printTemplate+0x226>
			lcd_clear();
 8001420:	f007 fdfc 	bl	800901c <lcd_clear>
			HAL_Delay(100);
 8001424:	2064      	movs	r0, #100	@ 0x64
 8001426:	f008 fb41 	bl	8009aac <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800142a:	4a34      	ldr	r2, [pc, #208]	@ (80014fc <printTemplate+0x2d8>)
 800142c:	2101      	movs	r1, #1
 800142e:	2001      	movs	r0, #1
 8001430:	f007 fdc8 	bl	8008fc4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001434:	4a32      	ldr	r2, [pc, #200]	@ (8001500 <printTemplate+0x2dc>)
 8001436:	2107      	movs	r1, #7
 8001438:	2001      	movs	r0, #1
 800143a:	f007 fdc3 	bl	8008fc4 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 800143e:	4a2c      	ldr	r2, [pc, #176]	@ (80014f0 <printTemplate+0x2cc>)
 8001440:	2101      	movs	r1, #1
 8001442:	2002      	movs	r0, #2
 8001444:	f007 fdbe 	bl	8008fc4 <lcd_print>
}
 8001448:	e02e      	b.n	80014a8 <printTemplate+0x284>
		} else if(page == 4) {
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	2b04      	cmp	r3, #4
 800144e:	d114      	bne.n	800147a <printTemplate+0x256>
			lcd_clear();
 8001450:	f007 fde4 	bl	800901c <lcd_clear>
			HAL_Delay(100);
 8001454:	2064      	movs	r0, #100	@ 0x64
 8001456:	f008 fb29 	bl	8009aac <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800145a:	4a28      	ldr	r2, [pc, #160]	@ (80014fc <printTemplate+0x2d8>)
 800145c:	2101      	movs	r1, #1
 800145e:	2001      	movs	r0, #1
 8001460:	f007 fdb0 	bl	8008fc4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001464:	4a26      	ldr	r2, [pc, #152]	@ (8001500 <printTemplate+0x2dc>)
 8001466:	2107      	movs	r1, #7
 8001468:	2001      	movs	r0, #1
 800146a:	f007 fdab 	bl	8008fc4 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 800146e:	4a21      	ldr	r2, [pc, #132]	@ (80014f4 <printTemplate+0x2d0>)
 8001470:	2101      	movs	r1, #1
 8001472:	2002      	movs	r0, #2
 8001474:	f007 fda6 	bl	8008fc4 <lcd_print>
}
 8001478:	e016      	b.n	80014a8 <printTemplate+0x284>
		} else if(page == 5) {
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	2b05      	cmp	r3, #5
 800147e:	d113      	bne.n	80014a8 <printTemplate+0x284>
			lcd_clear();
 8001480:	f007 fdcc 	bl	800901c <lcd_clear>
			HAL_Delay(100);
 8001484:	2064      	movs	r0, #100	@ 0x64
 8001486:	f008 fb11 	bl	8009aac <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800148a:	4a1c      	ldr	r2, [pc, #112]	@ (80014fc <printTemplate+0x2d8>)
 800148c:	2101      	movs	r1, #1
 800148e:	2001      	movs	r0, #1
 8001490:	f007 fd98 	bl	8008fc4 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001494:	4a1a      	ldr	r2, [pc, #104]	@ (8001500 <printTemplate+0x2dc>)
 8001496:	2107      	movs	r1, #7
 8001498:	2001      	movs	r0, #1
 800149a:	f007 fd93 	bl	8008fc4 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 800149e:	4a16      	ldr	r2, [pc, #88]	@ (80014f8 <printTemplate+0x2d4>)
 80014a0:	2101      	movs	r1, #1
 80014a2:	2002      	movs	r0, #2
 80014a4:	f007 fd8e 	bl	8008fc4 <lcd_print>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	0800ef7c 	.word	0x0800ef7c
 80014b4:	0800ef84 	.word	0x0800ef84
 80014b8:	0800ef88 	.word	0x0800ef88
 80014bc:	0800ef8c 	.word	0x0800ef8c
 80014c0:	0800ef90 	.word	0x0800ef90
 80014c4:	0800ef94 	.word	0x0800ef94
 80014c8:	0800ef98 	.word	0x0800ef98
 80014cc:	0800ef9c 	.word	0x0800ef9c
 80014d0:	0800efa0 	.word	0x0800efa0
 80014d4:	0800efa4 	.word	0x0800efa4
 80014d8:	0800efa8 	.word	0x0800efa8
 80014dc:	0800efac 	.word	0x0800efac
 80014e0:	20001070 	.word	0x20001070
 80014e4:	0800efc0 	.word	0x0800efc0
 80014e8:	0800efd4 	.word	0x0800efd4
 80014ec:	0800efdc 	.word	0x0800efdc
 80014f0:	0800eff0 	.word	0x0800eff0
 80014f4:	0800f004 	.word	0x0800f004
 80014f8:	0800f018 	.word	0x0800f018
 80014fc:	0800f02c 	.word	0x0800f02c
 8001500:	20001080 	.word	0x20001080

08001504 <printCredentials>:
			}
		}
	}
}

void printCredentials(int type) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d10a      	bne.n	8001528 <printCredentials+0x24>
		//machine id yazdır
		lcd_print(2, 1, machineID);
 8001512:	4a18      	ldr	r2, [pc, #96]	@ (8001574 <printCredentials+0x70>)
 8001514:	2101      	movs	r1, #1
 8001516:	2002      	movs	r0, #2
 8001518:	f007 fd54 	bl	8008fc4 <lcd_print>
		lcd_print(2, 13, "    ");
 800151c:	4a16      	ldr	r2, [pc, #88]	@ (8001578 <printCredentials+0x74>)
 800151e:	210d      	movs	r1, #13
 8001520:	2002      	movs	r0, #2
 8001522:	f007 fd4f 	bl	8008fc4 <lcd_print>
		lcd_print(1, 1, "WIFI PASS       ");

		lcd_print(2, 1, "                ");
		lcd_print(2, 1, wifiPass);
	}
}
 8001526:	e021      	b.n	800156c <printCredentials+0x68>
	} else if(type == 2) {
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b02      	cmp	r3, #2
 800152c:	d10f      	bne.n	800154e <printCredentials+0x4a>
		lcd_print(1, 1, "WIFI SSID       ");
 800152e:	4a13      	ldr	r2, [pc, #76]	@ (800157c <printCredentials+0x78>)
 8001530:	2101      	movs	r1, #1
 8001532:	2001      	movs	r0, #1
 8001534:	f007 fd46 	bl	8008fc4 <lcd_print>
		lcd_print(2, 1, "                ");
 8001538:	4a11      	ldr	r2, [pc, #68]	@ (8001580 <printCredentials+0x7c>)
 800153a:	2101      	movs	r1, #1
 800153c:	2002      	movs	r0, #2
 800153e:	f007 fd41 	bl	8008fc4 <lcd_print>
		lcd_print(2, 1, wifiSSID);
 8001542:	4a10      	ldr	r2, [pc, #64]	@ (8001584 <printCredentials+0x80>)
 8001544:	2101      	movs	r1, #1
 8001546:	2002      	movs	r0, #2
 8001548:	f007 fd3c 	bl	8008fc4 <lcd_print>
}
 800154c:	e00e      	b.n	800156c <printCredentials+0x68>
		lcd_print(1, 1, "WIFI PASS       ");
 800154e:	4a0e      	ldr	r2, [pc, #56]	@ (8001588 <printCredentials+0x84>)
 8001550:	2101      	movs	r1, #1
 8001552:	2001      	movs	r0, #1
 8001554:	f007 fd36 	bl	8008fc4 <lcd_print>
		lcd_print(2, 1, "                ");
 8001558:	4a09      	ldr	r2, [pc, #36]	@ (8001580 <printCredentials+0x7c>)
 800155a:	2101      	movs	r1, #1
 800155c:	2002      	movs	r0, #2
 800155e:	f007 fd31 	bl	8008fc4 <lcd_print>
		lcd_print(2, 1, wifiPass);
 8001562:	4a0a      	ldr	r2, [pc, #40]	@ (800158c <printCredentials+0x88>)
 8001564:	2101      	movs	r1, #1
 8001566:	2002      	movs	r0, #2
 8001568:	f007 fd2c 	bl	8008fc4 <lcd_print>
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20001064 	.word	0x20001064
 8001578:	0800f040 	.word	0x0800f040
 800157c:	0800f048 	.word	0x0800f048
 8001580:	0800f05c 	.word	0x0800f05c
 8001584:	20001070 	.word	0x20001070
 8001588:	0800f070 	.word	0x0800f070
 800158c:	20001080 	.word	0x20001080

08001590 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800159a:	4b06      	ldr	r3, [pc, #24]	@ (80015b4 <__NVIC_SystemReset+0x24>)
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80015a2:	4904      	ldr	r1, [pc, #16]	@ (80015b4 <__NVIC_SystemReset+0x24>)
 80015a4:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <__NVIC_SystemReset+0x28>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80015aa:	f3bf 8f4f 	dsb	sy
}
 80015ae:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80015b0:	bf00      	nop
 80015b2:	e7fd      	b.n	80015b0 <__NVIC_SystemReset+0x20>
 80015b4:	e000ed00 	.word	0xe000ed00
 80015b8:	05fa0004 	.word	0x05fa0004

080015bc <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80015c2:	2101      	movs	r1, #1
 80015c4:	488e      	ldr	r0, [pc, #568]	@ (8001800 <menu+0x244>)
 80015c6:	f009 f841 	bl	800a64c <HAL_GPIO_ReadPin>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	f040 8099 	bne.w	8001704 <menu+0x148>
 80015d2:	4b8c      	ldr	r3, [pc, #560]	@ (8001804 <menu+0x248>)
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	f083 0301 	eor.w	r3, r3, #1
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 8091 	beq.w	8001704 <menu+0x148>
		menuSayac = menuSayac+1;
 80015e2:	4b89      	ldr	r3, [pc, #548]	@ (8001808 <menu+0x24c>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	3301      	adds	r3, #1
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4b87      	ldr	r3, [pc, #540]	@ (8001808 <menu+0x24c>)
 80015ec:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80015ee:	4b86      	ldr	r3, [pc, #536]	@ (8001808 <menu+0x24c>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b24      	cmp	r3, #36	@ 0x24
 80015f4:	d102      	bne.n	80015fc <menu+0x40>
			menuSayac = 1;
 80015f6:	4b84      	ldr	r3, [pc, #528]	@ (8001808 <menu+0x24c>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80015fc:	4b82      	ldr	r3, [pc, #520]	@ (8001808 <menu+0x24c>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	2b12      	cmp	r3, #18
 8001602:	d106      	bne.n	8001612 <menu+0x56>
 8001604:	4b81      	ldr	r3, [pc, #516]	@ (800180c <menu+0x250>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d102      	bne.n	8001612 <menu+0x56>
			menuSayac = 21;
 800160c:	4b7e      	ldr	r3, [pc, #504]	@ (8001808 <menu+0x24c>)
 800160e:	2215      	movs	r2, #21
 8001610:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001612:	4b7d      	ldr	r3, [pc, #500]	@ (8001808 <menu+0x24c>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b08      	cmp	r3, #8
 8001618:	d106      	bne.n	8001628 <menu+0x6c>
 800161a:	4b7d      	ldr	r3, [pc, #500]	@ (8001810 <menu+0x254>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <menu+0x6c>
			menuSayac = 16;
 8001622:	4b79      	ldr	r3, [pc, #484]	@ (8001808 <menu+0x24c>)
 8001624:	2210      	movs	r2, #16
 8001626:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001628:	4b77      	ldr	r3, [pc, #476]	@ (8001808 <menu+0x24c>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b0d      	cmp	r3, #13
 800162e:	d106      	bne.n	800163e <menu+0x82>
 8001630:	4b77      	ldr	r3, [pc, #476]	@ (8001810 <menu+0x254>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d102      	bne.n	800163e <menu+0x82>
			menuSayac = 16;
 8001638:	4b73      	ldr	r3, [pc, #460]	@ (8001808 <menu+0x24c>)
 800163a:	2210      	movs	r2, #16
 800163c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800163e:	4b72      	ldr	r3, [pc, #456]	@ (8001808 <menu+0x24c>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b09      	cmp	r3, #9
 8001644:	d106      	bne.n	8001654 <menu+0x98>
 8001646:	4b72      	ldr	r3, [pc, #456]	@ (8001810 <menu+0x254>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d102      	bne.n	8001654 <menu+0x98>
			menuSayac = 13;
 800164e:	4b6e      	ldr	r3, [pc, #440]	@ (8001808 <menu+0x24c>)
 8001650:	220d      	movs	r2, #13
 8001652:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001654:	4b6c      	ldr	r3, [pc, #432]	@ (8001808 <menu+0x24c>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b0a      	cmp	r3, #10
 800165a:	d10a      	bne.n	8001672 <menu+0xb6>
 800165c:	4b6d      	ldr	r3, [pc, #436]	@ (8001814 <menu+0x258>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d003      	beq.n	800166c <menu+0xb0>
 8001664:	4b6b      	ldr	r3, [pc, #428]	@ (8001814 <menu+0x258>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b02      	cmp	r3, #2
 800166a:	d102      	bne.n	8001672 <menu+0xb6>
			menuSayac = 11;
 800166c:	4b66      	ldr	r3, [pc, #408]	@ (8001808 <menu+0x24c>)
 800166e:	220b      	movs	r2, #11
 8001670:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001672:	4b65      	ldr	r3, [pc, #404]	@ (8001808 <menu+0x24c>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b0c      	cmp	r3, #12
 8001678:	d10e      	bne.n	8001698 <menu+0xdc>
 800167a:	4b67      	ldr	r3, [pc, #412]	@ (8001818 <menu+0x25c>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d003      	beq.n	800168a <menu+0xce>
 8001682:	4b65      	ldr	r3, [pc, #404]	@ (8001818 <menu+0x25c>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d106      	bne.n	8001698 <menu+0xdc>
 800168a:	4b61      	ldr	r3, [pc, #388]	@ (8001810 <menu+0x254>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d102      	bne.n	8001698 <menu+0xdc>
			menuSayac = 16;
 8001692:	4b5d      	ldr	r3, [pc, #372]	@ (8001808 <menu+0x24c>)
 8001694:	2210      	movs	r2, #16
 8001696:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001698:	4b5b      	ldr	r3, [pc, #364]	@ (8001808 <menu+0x24c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b0c      	cmp	r3, #12
 800169e:	d10e      	bne.n	80016be <menu+0x102>
 80016a0:	4b5d      	ldr	r3, [pc, #372]	@ (8001818 <menu+0x25c>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d003      	beq.n	80016b0 <menu+0xf4>
 80016a8:	4b5b      	ldr	r3, [pc, #364]	@ (8001818 <menu+0x25c>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d106      	bne.n	80016be <menu+0x102>
 80016b0:	4b57      	ldr	r3, [pc, #348]	@ (8001810 <menu+0x254>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d102      	bne.n	80016be <menu+0x102>
			menuSayac = 13;
 80016b8:	4b53      	ldr	r3, [pc, #332]	@ (8001808 <menu+0x24c>)
 80016ba:	220d      	movs	r2, #13
 80016bc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80016be:	4b52      	ldr	r3, [pc, #328]	@ (8001808 <menu+0x24c>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b0f      	cmp	r3, #15
 80016c4:	d106      	bne.n	80016d4 <menu+0x118>
 80016c6:	4b55      	ldr	r3, [pc, #340]	@ (800181c <menu+0x260>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d102      	bne.n	80016d4 <menu+0x118>
			menuSayac = 16;
 80016ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001808 <menu+0x24c>)
 80016d0:	2210      	movs	r2, #16
 80016d2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80016d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001808 <menu+0x24c>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b18      	cmp	r3, #24
 80016da:	d106      	bne.n	80016ea <menu+0x12e>
 80016dc:	4b4b      	ldr	r3, [pc, #300]	@ (800180c <menu+0x250>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d102      	bne.n	80016ea <menu+0x12e>
			menuSayac = 26;
 80016e4:	4b48      	ldr	r3, [pc, #288]	@ (8001808 <menu+0x24c>)
 80016e6:	221a      	movs	r2, #26
 80016e8:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 80016ea:	4b47      	ldr	r3, [pc, #284]	@ (8001808 <menu+0x24c>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b21      	cmp	r3, #33	@ 0x21
 80016f0:	d106      	bne.n	8001700 <menu+0x144>
 80016f2:	4b4b      	ldr	r3, [pc, #300]	@ (8001820 <menu+0x264>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <menu+0x144>
			menuSayac = 35;
 80016fa:	4b43      	ldr	r3, [pc, #268]	@ (8001808 <menu+0x24c>)
 80016fc:	2223      	movs	r2, #35	@ 0x23
 80016fe:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001700:	f002 fca2 	bl	8004048 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001704:	2108      	movs	r1, #8
 8001706:	4847      	ldr	r0, [pc, #284]	@ (8001824 <menu+0x268>)
 8001708:	f008 ffa0 	bl	800a64c <HAL_GPIO_ReadPin>
 800170c:	4603      	mov	r3, r0
 800170e:	2b01      	cmp	r3, #1
 8001710:	f040 8097 	bne.w	8001842 <menu+0x286>
 8001714:	4b3b      	ldr	r3, [pc, #236]	@ (8001804 <menu+0x248>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	f083 0301 	eor.w	r3, r3, #1
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 808f 	beq.w	8001842 <menu+0x286>
		if (menuSayac <= 1) {
 8001724:	4b38      	ldr	r3, [pc, #224]	@ (8001808 <menu+0x24c>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d802      	bhi.n	8001732 <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 800172c:	4b36      	ldr	r3, [pc, #216]	@ (8001808 <menu+0x24c>)
 800172e:	2224      	movs	r2, #36	@ 0x24
 8001730:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001732:	4b35      	ldr	r3, [pc, #212]	@ (8001808 <menu+0x24c>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	3b01      	subs	r3, #1
 8001738:	b2da      	uxtb	r2, r3
 800173a:	4b33      	ldr	r3, [pc, #204]	@ (8001808 <menu+0x24c>)
 800173c:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800173e:	4b32      	ldr	r3, [pc, #200]	@ (8001808 <menu+0x24c>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b14      	cmp	r3, #20
 8001744:	d106      	bne.n	8001754 <menu+0x198>
 8001746:	4b31      	ldr	r3, [pc, #196]	@ (800180c <menu+0x250>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <menu+0x198>
			menuSayac = 17;
 800174e:	4b2e      	ldr	r3, [pc, #184]	@ (8001808 <menu+0x24c>)
 8001750:	2211      	movs	r2, #17
 8001752:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001754:	4b2c      	ldr	r3, [pc, #176]	@ (8001808 <menu+0x24c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d106      	bne.n	800176a <menu+0x1ae>
 800175c:	4b2c      	ldr	r3, [pc, #176]	@ (8001810 <menu+0x254>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d102      	bne.n	800176a <menu+0x1ae>
			menuSayac = 7;
 8001764:	4b28      	ldr	r3, [pc, #160]	@ (8001808 <menu+0x24c>)
 8001766:	2207      	movs	r2, #7
 8001768:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800176a:	4b27      	ldr	r3, [pc, #156]	@ (8001808 <menu+0x24c>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b0f      	cmp	r3, #15
 8001770:	d106      	bne.n	8001780 <menu+0x1c4>
 8001772:	4b27      	ldr	r3, [pc, #156]	@ (8001810 <menu+0x254>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d102      	bne.n	8001780 <menu+0x1c4>
			menuSayac = 12;
 800177a:	4b23      	ldr	r3, [pc, #140]	@ (8001808 <menu+0x24c>)
 800177c:	220c      	movs	r2, #12
 800177e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001780:	4b21      	ldr	r3, [pc, #132]	@ (8001808 <menu+0x24c>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b0c      	cmp	r3, #12
 8001786:	d106      	bne.n	8001796 <menu+0x1da>
 8001788:	4b21      	ldr	r3, [pc, #132]	@ (8001810 <menu+0x254>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b02      	cmp	r3, #2
 800178e:	d102      	bne.n	8001796 <menu+0x1da>
			menuSayac = 8;
 8001790:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <menu+0x24c>)
 8001792:	2208      	movs	r2, #8
 8001794:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001796:	4b1c      	ldr	r3, [pc, #112]	@ (8001808 <menu+0x24c>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b0a      	cmp	r3, #10
 800179c:	d10a      	bne.n	80017b4 <menu+0x1f8>
 800179e:	4b1d      	ldr	r3, [pc, #116]	@ (8001814 <menu+0x258>)
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d003      	beq.n	80017ae <menu+0x1f2>
 80017a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001814 <menu+0x258>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d102      	bne.n	80017b4 <menu+0x1f8>
			menuSayac = 9;
 80017ae:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <menu+0x24c>)
 80017b0:	2209      	movs	r2, #9
 80017b2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80017b4:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <menu+0x24c>)
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b0c      	cmp	r3, #12
 80017ba:	d10a      	bne.n	80017d2 <menu+0x216>
 80017bc:	4b16      	ldr	r3, [pc, #88]	@ (8001818 <menu+0x25c>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d003      	beq.n	80017cc <menu+0x210>
 80017c4:	4b14      	ldr	r3, [pc, #80]	@ (8001818 <menu+0x25c>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d102      	bne.n	80017d2 <menu+0x216>
			menuSayac = 11;
 80017cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <menu+0x24c>)
 80017ce:	220b      	movs	r2, #11
 80017d0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80017d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001808 <menu+0x24c>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b0f      	cmp	r3, #15
 80017d8:	d106      	bne.n	80017e8 <menu+0x22c>
 80017da:	4b10      	ldr	r3, [pc, #64]	@ (800181c <menu+0x260>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d102      	bne.n	80017e8 <menu+0x22c>
			menuSayac = 14;
 80017e2:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <menu+0x24c>)
 80017e4:	220e      	movs	r2, #14
 80017e6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80017e8:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <menu+0x24c>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	2b19      	cmp	r3, #25
 80017ee:	d11b      	bne.n	8001828 <menu+0x26c>
 80017f0:	4b06      	ldr	r3, [pc, #24]	@ (800180c <menu+0x250>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d117      	bne.n	8001828 <menu+0x26c>
			menuSayac = 23;
 80017f8:	4b03      	ldr	r3, [pc, #12]	@ (8001808 <menu+0x24c>)
 80017fa:	2217      	movs	r2, #23
 80017fc:	701a      	strb	r2, [r3, #0]
 80017fe:	e013      	b.n	8001828 <menu+0x26c>
 8001800:	40010800 	.word	0x40010800
 8001804:	200014eb 	.word	0x200014eb
 8001808:	200014bc 	.word	0x200014bc
 800180c:	200014cb 	.word	0x200014cb
 8001810:	200014c4 	.word	0x200014c4
 8001814:	200014c5 	.word	0x200014c5
 8001818:	200014c6 	.word	0x200014c6
 800181c:	200014c7 	.word	0x200014c7
 8001820:	200014e7 	.word	0x200014e7
 8001824:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 8001828:	4bb0      	ldr	r3, [pc, #704]	@ (8001aec <menu+0x530>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b22      	cmp	r3, #34	@ 0x22
 800182e:	d106      	bne.n	800183e <menu+0x282>
 8001830:	4baf      	ldr	r3, [pc, #700]	@ (8001af0 <menu+0x534>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d102      	bne.n	800183e <menu+0x282>
			menuSayac = 32;
 8001838:	4bac      	ldr	r3, [pc, #688]	@ (8001aec <menu+0x530>)
 800183a:	2220      	movs	r2, #32
 800183c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800183e:	f002 fc03 	bl	8004048 <bekle>
	}

	if (menuSayac == 0) {
 8001842:	4baa      	ldr	r3, [pc, #680]	@ (8001aec <menu+0x530>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d109      	bne.n	800185e <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 800184a:	4aaa      	ldr	r2, [pc, #680]	@ (8001af4 <menu+0x538>)
 800184c:	2101      	movs	r1, #1
 800184e:	2001      	movs	r0, #1
 8001850:	f007 fbb8 	bl	8008fc4 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 8001854:	4aa8      	ldr	r2, [pc, #672]	@ (8001af8 <menu+0x53c>)
 8001856:	2101      	movs	r1, #1
 8001858:	2002      	movs	r0, #2
 800185a:	f007 fbb3 	bl	8008fc4 <lcd_print>
	}

	if (menuSayac == 1) {
 800185e:	4ba3      	ldr	r3, [pc, #652]	@ (8001aec <menu+0x530>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b01      	cmp	r3, #1
 8001864:	f040 81f4 	bne.w	8001c50 <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 8001868:	4aa4      	ldr	r2, [pc, #656]	@ (8001afc <menu+0x540>)
 800186a:	2101      	movs	r1, #1
 800186c:	2001      	movs	r0, #1
 800186e:	f007 fba9 	bl	8008fc4 <lcd_print>

		if(hataGostermeSirasi == 0) {
 8001872:	4ba3      	ldr	r3, [pc, #652]	@ (8001b00 <menu+0x544>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d115      	bne.n	80018a6 <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 800187a:	4aa2      	ldr	r2, [pc, #648]	@ (8001b04 <menu+0x548>)
 800187c:	2101      	movs	r1, #1
 800187e:	2002      	movs	r0, #2
 8001880:	f007 fba0 	bl	8008fc4 <lcd_print>
			lcd_print(2, 15, "   ");
 8001884:	4aa0      	ldr	r2, [pc, #640]	@ (8001b08 <menu+0x54c>)
 8001886:	210f      	movs	r1, #15
 8001888:	2002      	movs	r0, #2
 800188a:	f007 fb9b 	bl	8008fc4 <lcd_print>
			itoa(hataKayit1, snum, 10);
 800188e:	4b9f      	ldr	r3, [pc, #636]	@ (8001b0c <menu+0x550>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	220a      	movs	r2, #10
 8001894:	499e      	ldr	r1, [pc, #632]	@ (8001b10 <menu+0x554>)
 8001896:	4618      	mov	r0, r3
 8001898:	f00c f84a 	bl	800d930 <itoa>
			lcd_print(2, 14, snum);
 800189c:	4a9c      	ldr	r2, [pc, #624]	@ (8001b10 <menu+0x554>)
 800189e:	210e      	movs	r1, #14
 80018a0:	2002      	movs	r0, #2
 80018a2:	f007 fb8f 	bl	8008fc4 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80018a6:	4b96      	ldr	r3, [pc, #600]	@ (8001b00 <menu+0x544>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d115      	bne.n	80018da <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 80018ae:	4a99      	ldr	r2, [pc, #612]	@ (8001b14 <menu+0x558>)
 80018b0:	2101      	movs	r1, #1
 80018b2:	2002      	movs	r0, #2
 80018b4:	f007 fb86 	bl	8008fc4 <lcd_print>
			lcd_print(2, 15, "  ");
 80018b8:	4a97      	ldr	r2, [pc, #604]	@ (8001b18 <menu+0x55c>)
 80018ba:	210f      	movs	r1, #15
 80018bc:	2002      	movs	r0, #2
 80018be:	f007 fb81 	bl	8008fc4 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80018c2:	4b96      	ldr	r3, [pc, #600]	@ (8001b1c <menu+0x560>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	220a      	movs	r2, #10
 80018c8:	4991      	ldr	r1, [pc, #580]	@ (8001b10 <menu+0x554>)
 80018ca:	4618      	mov	r0, r3
 80018cc:	f00c f830 	bl	800d930 <itoa>
			lcd_print(2, 14, snum);
 80018d0:	4a8f      	ldr	r2, [pc, #572]	@ (8001b10 <menu+0x554>)
 80018d2:	210e      	movs	r1, #14
 80018d4:	2002      	movs	r0, #2
 80018d6:	f007 fb75 	bl	8008fc4 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80018da:	4b89      	ldr	r3, [pc, #548]	@ (8001b00 <menu+0x544>)
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d115      	bne.n	800190e <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 80018e2:	4a8f      	ldr	r2, [pc, #572]	@ (8001b20 <menu+0x564>)
 80018e4:	2101      	movs	r1, #1
 80018e6:	2002      	movs	r0, #2
 80018e8:	f007 fb6c 	bl	8008fc4 <lcd_print>
			lcd_print(2, 15, "  ");
 80018ec:	4a8a      	ldr	r2, [pc, #552]	@ (8001b18 <menu+0x55c>)
 80018ee:	210f      	movs	r1, #15
 80018f0:	2002      	movs	r0, #2
 80018f2:	f007 fb67 	bl	8008fc4 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80018f6:	4b8b      	ldr	r3, [pc, #556]	@ (8001b24 <menu+0x568>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	220a      	movs	r2, #10
 80018fc:	4984      	ldr	r1, [pc, #528]	@ (8001b10 <menu+0x554>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f00c f816 	bl	800d930 <itoa>
			lcd_print(2, 14, snum);
 8001904:	4a82      	ldr	r2, [pc, #520]	@ (8001b10 <menu+0x554>)
 8001906:	210e      	movs	r1, #14
 8001908:	2002      	movs	r0, #2
 800190a:	f007 fb5b 	bl	8008fc4 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800190e:	4b7c      	ldr	r3, [pc, #496]	@ (8001b00 <menu+0x544>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b03      	cmp	r3, #3
 8001914:	d115      	bne.n	8001942 <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 8001916:	4a84      	ldr	r2, [pc, #528]	@ (8001b28 <menu+0x56c>)
 8001918:	2101      	movs	r1, #1
 800191a:	2002      	movs	r0, #2
 800191c:	f007 fb52 	bl	8008fc4 <lcd_print>
			lcd_print(2, 15, "  ");
 8001920:	4a7d      	ldr	r2, [pc, #500]	@ (8001b18 <menu+0x55c>)
 8001922:	210f      	movs	r1, #15
 8001924:	2002      	movs	r0, #2
 8001926:	f007 fb4d 	bl	8008fc4 <lcd_print>
			itoa(hataKayit4, snum, 10);
 800192a:	4b80      	ldr	r3, [pc, #512]	@ (8001b2c <menu+0x570>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	220a      	movs	r2, #10
 8001930:	4977      	ldr	r1, [pc, #476]	@ (8001b10 <menu+0x554>)
 8001932:	4618      	mov	r0, r3
 8001934:	f00b fffc 	bl	800d930 <itoa>
			lcd_print(2, 14, snum);
 8001938:	4a75      	ldr	r2, [pc, #468]	@ (8001b10 <menu+0x554>)
 800193a:	210e      	movs	r1, #14
 800193c:	2002      	movs	r0, #2
 800193e:	f007 fb41 	bl	8008fc4 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001942:	4b6f      	ldr	r3, [pc, #444]	@ (8001b00 <menu+0x544>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b04      	cmp	r3, #4
 8001948:	d115      	bne.n	8001976 <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 800194a:	4a79      	ldr	r2, [pc, #484]	@ (8001b30 <menu+0x574>)
 800194c:	2101      	movs	r1, #1
 800194e:	2002      	movs	r0, #2
 8001950:	f007 fb38 	bl	8008fc4 <lcd_print>
			lcd_print(2, 15, "  ");
 8001954:	4a70      	ldr	r2, [pc, #448]	@ (8001b18 <menu+0x55c>)
 8001956:	210f      	movs	r1, #15
 8001958:	2002      	movs	r0, #2
 800195a:	f007 fb33 	bl	8008fc4 <lcd_print>
			itoa(hataKayit5, snum, 10);
 800195e:	4b75      	ldr	r3, [pc, #468]	@ (8001b34 <menu+0x578>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	220a      	movs	r2, #10
 8001964:	496a      	ldr	r1, [pc, #424]	@ (8001b10 <menu+0x554>)
 8001966:	4618      	mov	r0, r3
 8001968:	f00b ffe2 	bl	800d930 <itoa>
			lcd_print(2, 14, snum);
 800196c:	4a68      	ldr	r2, [pc, #416]	@ (8001b10 <menu+0x554>)
 800196e:	210e      	movs	r1, #14
 8001970:	2002      	movs	r0, #2
 8001972:	f007 fb27 	bl	8008fc4 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001976:	4b62      	ldr	r3, [pc, #392]	@ (8001b00 <menu+0x544>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b05      	cmp	r3, #5
 800197c:	d115      	bne.n	80019aa <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 800197e:	4a6e      	ldr	r2, [pc, #440]	@ (8001b38 <menu+0x57c>)
 8001980:	2101      	movs	r1, #1
 8001982:	2002      	movs	r0, #2
 8001984:	f007 fb1e 	bl	8008fc4 <lcd_print>
			lcd_print(2, 15, "  ");
 8001988:	4a63      	ldr	r2, [pc, #396]	@ (8001b18 <menu+0x55c>)
 800198a:	210f      	movs	r1, #15
 800198c:	2002      	movs	r0, #2
 800198e:	f007 fb19 	bl	8008fc4 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001992:	4b6a      	ldr	r3, [pc, #424]	@ (8001b3c <menu+0x580>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	220a      	movs	r2, #10
 8001998:	495d      	ldr	r1, [pc, #372]	@ (8001b10 <menu+0x554>)
 800199a:	4618      	mov	r0, r3
 800199c:	f00b ffc8 	bl	800d930 <itoa>
			lcd_print(2, 14, snum);
 80019a0:	4a5b      	ldr	r2, [pc, #364]	@ (8001b10 <menu+0x554>)
 80019a2:	210e      	movs	r1, #14
 80019a4:	2002      	movs	r0, #2
 80019a6:	f007 fb0d 	bl	8008fc4 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 80019aa:	4b55      	ldr	r3, [pc, #340]	@ (8001b00 <menu+0x544>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b06      	cmp	r3, #6
 80019b0:	d115      	bne.n	80019de <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 80019b2:	4a63      	ldr	r2, [pc, #396]	@ (8001b40 <menu+0x584>)
 80019b4:	2101      	movs	r1, #1
 80019b6:	2002      	movs	r0, #2
 80019b8:	f007 fb04 	bl	8008fc4 <lcd_print>
			lcd_print(2, 15, "  ");
 80019bc:	4a56      	ldr	r2, [pc, #344]	@ (8001b18 <menu+0x55c>)
 80019be:	210f      	movs	r1, #15
 80019c0:	2002      	movs	r0, #2
 80019c2:	f007 faff 	bl	8008fc4 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80019c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001b44 <menu+0x588>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	220a      	movs	r2, #10
 80019cc:	4950      	ldr	r1, [pc, #320]	@ (8001b10 <menu+0x554>)
 80019ce:	4618      	mov	r0, r3
 80019d0:	f00b ffae 	bl	800d930 <itoa>
			lcd_print(2, 14, snum);
 80019d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001b10 <menu+0x554>)
 80019d6:	210e      	movs	r1, #14
 80019d8:	2002      	movs	r0, #2
 80019da:	f007 faf3 	bl	8008fc4 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80019de:	4b48      	ldr	r3, [pc, #288]	@ (8001b00 <menu+0x544>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b07      	cmp	r3, #7
 80019e4:	d115      	bne.n	8001a12 <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 80019e6:	4a58      	ldr	r2, [pc, #352]	@ (8001b48 <menu+0x58c>)
 80019e8:	2101      	movs	r1, #1
 80019ea:	2002      	movs	r0, #2
 80019ec:	f007 faea 	bl	8008fc4 <lcd_print>
			lcd_print(2, 15, "  ");
 80019f0:	4a49      	ldr	r2, [pc, #292]	@ (8001b18 <menu+0x55c>)
 80019f2:	210f      	movs	r1, #15
 80019f4:	2002      	movs	r0, #2
 80019f6:	f007 fae5 	bl	8008fc4 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80019fa:	4b54      	ldr	r3, [pc, #336]	@ (8001b4c <menu+0x590>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	220a      	movs	r2, #10
 8001a00:	4943      	ldr	r1, [pc, #268]	@ (8001b10 <menu+0x554>)
 8001a02:	4618      	mov	r0, r3
 8001a04:	f00b ff94 	bl	800d930 <itoa>
			lcd_print(2, 14, snum);
 8001a08:	4a41      	ldr	r2, [pc, #260]	@ (8001b10 <menu+0x554>)
 8001a0a:	210e      	movs	r1, #14
 8001a0c:	2002      	movs	r0, #2
 8001a0e:	f007 fad9 	bl	8008fc4 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001a12:	4b3b      	ldr	r3, [pc, #236]	@ (8001b00 <menu+0x544>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b08      	cmp	r3, #8
 8001a18:	d115      	bne.n	8001a46 <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 8001a1a:	4a4d      	ldr	r2, [pc, #308]	@ (8001b50 <menu+0x594>)
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	2002      	movs	r0, #2
 8001a20:	f007 fad0 	bl	8008fc4 <lcd_print>
			lcd_print(2, 15, "  ");
 8001a24:	4a3c      	ldr	r2, [pc, #240]	@ (8001b18 <menu+0x55c>)
 8001a26:	210f      	movs	r1, #15
 8001a28:	2002      	movs	r0, #2
 8001a2a:	f007 facb 	bl	8008fc4 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001a2e:	4b49      	ldr	r3, [pc, #292]	@ (8001b54 <menu+0x598>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	220a      	movs	r2, #10
 8001a34:	4936      	ldr	r1, [pc, #216]	@ (8001b10 <menu+0x554>)
 8001a36:	4618      	mov	r0, r3
 8001a38:	f00b ff7a 	bl	800d930 <itoa>
			lcd_print(2, 14, snum);
 8001a3c:	4a34      	ldr	r2, [pc, #208]	@ (8001b10 <menu+0x554>)
 8001a3e:	210e      	movs	r1, #14
 8001a40:	2002      	movs	r0, #2
 8001a42:	f007 fabf 	bl	8008fc4 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001a46:	4b2e      	ldr	r3, [pc, #184]	@ (8001b00 <menu+0x544>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b09      	cmp	r3, #9
 8001a4c:	d115      	bne.n	8001a7a <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 8001a4e:	4a42      	ldr	r2, [pc, #264]	@ (8001b58 <menu+0x59c>)
 8001a50:	2101      	movs	r1, #1
 8001a52:	2002      	movs	r0, #2
 8001a54:	f007 fab6 	bl	8008fc4 <lcd_print>
			lcd_print(2, 16, " ");
 8001a58:	4a40      	ldr	r2, [pc, #256]	@ (8001b5c <menu+0x5a0>)
 8001a5a:	2110      	movs	r1, #16
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	f007 fab1 	bl	8008fc4 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001a62:	4b3f      	ldr	r3, [pc, #252]	@ (8001b60 <menu+0x5a4>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	220a      	movs	r2, #10
 8001a68:	4929      	ldr	r1, [pc, #164]	@ (8001b10 <menu+0x554>)
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f00b ff60 	bl	800d930 <itoa>
			lcd_print(2, 15, snum);
 8001a70:	4a27      	ldr	r2, [pc, #156]	@ (8001b10 <menu+0x554>)
 8001a72:	210f      	movs	r1, #15
 8001a74:	2002      	movs	r0, #2
 8001a76:	f007 faa5 	bl	8008fc4 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001a7a:	4b21      	ldr	r3, [pc, #132]	@ (8001b00 <menu+0x544>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b0a      	cmp	r3, #10
 8001a80:	d104      	bne.n	8001a8c <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 8001a82:	4a38      	ldr	r2, [pc, #224]	@ (8001b64 <menu+0x5a8>)
 8001a84:	2101      	movs	r1, #1
 8001a86:	2002      	movs	r0, #2
 8001a88:	f007 fa9c 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a8c:	2102      	movs	r1, #2
 8001a8e:	4836      	ldr	r0, [pc, #216]	@ (8001b68 <menu+0x5ac>)
 8001a90:	f008 fddc 	bl	800a64c <HAL_GPIO_ReadPin>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d119      	bne.n	8001ace <menu+0x512>
 8001a9a:	4b34      	ldr	r3, [pc, #208]	@ (8001b6c <menu+0x5b0>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	f083 0301 	eor.w	r3, r3, #1
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d012      	beq.n	8001ace <menu+0x512>
 8001aa8:	4b31      	ldr	r3, [pc, #196]	@ (8001b70 <menu+0x5b4>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10e      	bne.n	8001ace <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001ab0:	4b13      	ldr	r3, [pc, #76]	@ (8001b00 <menu+0x544>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	4b11      	ldr	r3, [pc, #68]	@ (8001b00 <menu+0x544>)
 8001aba:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001abc:	4b10      	ldr	r3, [pc, #64]	@ (8001b00 <menu+0x544>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	2b0a      	cmp	r3, #10
 8001ac2:	d902      	bls.n	8001aca <menu+0x50e>
				hataGostermeSirasi = 0;
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <menu+0x544>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001aca:	f002 fabd 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ace:	2104      	movs	r1, #4
 8001ad0:	4825      	ldr	r0, [pc, #148]	@ (8001b68 <menu+0x5ac>)
 8001ad2:	f008 fdbb 	bl	800a64c <HAL_GPIO_ReadPin>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d15e      	bne.n	8001b9a <menu+0x5de>
 8001adc:	4b23      	ldr	r3, [pc, #140]	@ (8001b6c <menu+0x5b0>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	f083 0301 	eor.w	r3, r3, #1
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d057      	beq.n	8001b9a <menu+0x5de>
 8001aea:	e043      	b.n	8001b74 <menu+0x5b8>
 8001aec:	200014bc 	.word	0x200014bc
 8001af0:	200014e7 	.word	0x200014e7
 8001af4:	20001620 	.word	0x20001620
 8001af8:	20001634 	.word	0x20001634
 8001afc:	20001648 	.word	0x20001648
 8001b00:	200014be 	.word	0x200014be
 8001b04:	2000165c 	.word	0x2000165c
 8001b08:	0800f084 	.word	0x0800f084
 8001b0c:	200014dd 	.word	0x200014dd
 8001b10:	2000105c 	.word	0x2000105c
 8001b14:	20001670 	.word	0x20001670
 8001b18:	0800f088 	.word	0x0800f088
 8001b1c:	200014de 	.word	0x200014de
 8001b20:	20001684 	.word	0x20001684
 8001b24:	200014df 	.word	0x200014df
 8001b28:	20001698 	.word	0x20001698
 8001b2c:	200014e0 	.word	0x200014e0
 8001b30:	200016ac 	.word	0x200016ac
 8001b34:	200014e1 	.word	0x200014e1
 8001b38:	200016c0 	.word	0x200016c0
 8001b3c:	200014e2 	.word	0x200014e2
 8001b40:	200016d4 	.word	0x200016d4
 8001b44:	200014e3 	.word	0x200014e3
 8001b48:	200016e8 	.word	0x200016e8
 8001b4c:	200014e4 	.word	0x200014e4
 8001b50:	200016fc 	.word	0x200016fc
 8001b54:	200014e5 	.word	0x200014e5
 8001b58:	20001710 	.word	0x20001710
 8001b5c:	0800f08c 	.word	0x0800f08c
 8001b60:	200014e6 	.word	0x200014e6
 8001b64:	20001724 	.word	0x20001724
 8001b68:	40010800 	.word	0x40010800
 8001b6c:	200014eb 	.word	0x200014eb
 8001b70:	200014cb 	.word	0x200014cb
 8001b74:	4b8a      	ldr	r3, [pc, #552]	@ (8001da0 <menu+0x7e4>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10e      	bne.n	8001b9a <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001b7c:	4b89      	ldr	r3, [pc, #548]	@ (8001da4 <menu+0x7e8>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	3b01      	subs	r3, #1
 8001b82:	b2da      	uxtb	r2, r3
 8001b84:	4b87      	ldr	r3, [pc, #540]	@ (8001da4 <menu+0x7e8>)
 8001b86:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001b88:	4b86      	ldr	r3, [pc, #536]	@ (8001da4 <menu+0x7e8>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b0b      	cmp	r3, #11
 8001b8e:	d902      	bls.n	8001b96 <menu+0x5da>
	    		hataGostermeSirasi = 10;
 8001b90:	4b84      	ldr	r3, [pc, #528]	@ (8001da4 <menu+0x7e8>)
 8001b92:	220a      	movs	r2, #10
 8001b94:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001b96:	f002 fa57 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001b9a:	2108      	movs	r1, #8
 8001b9c:	4882      	ldr	r0, [pc, #520]	@ (8001da8 <menu+0x7ec>)
 8001b9e:	f008 fd55 	bl	800a64c <HAL_GPIO_ReadPin>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d153      	bne.n	8001c50 <menu+0x694>
 8001ba8:	4b80      	ldr	r3, [pc, #512]	@ (8001dac <menu+0x7f0>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	f083 0301 	eor.w	r3, r3, #1
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d04c      	beq.n	8001c50 <menu+0x694>
 8001bb6:	4b7b      	ldr	r3, [pc, #492]	@ (8001da4 <menu+0x7e8>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b0a      	cmp	r3, #10
 8001bbc:	d148      	bne.n	8001c50 <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 8001bbe:	4b7c      	ldr	r3, [pc, #496]	@ (8001db0 <menu+0x7f4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
 8001bc4:	4b7b      	ldr	r3, [pc, #492]	@ (8001db4 <menu+0x7f8>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001bcc:	4b7a      	ldr	r3, [pc, #488]	@ (8001db8 <menu+0x7fc>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
 8001bd2:	4b78      	ldr	r3, [pc, #480]	@ (8001db4 <menu+0x7f8>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001bda:	4b78      	ldr	r3, [pc, #480]	@ (8001dbc <menu+0x800>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	701a      	strb	r2, [r3, #0]
 8001be0:	4b74      	ldr	r3, [pc, #464]	@ (8001db4 <menu+0x7f8>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001be8:	4b75      	ldr	r3, [pc, #468]	@ (8001dc0 <menu+0x804>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	701a      	strb	r2, [r3, #0]
 8001bee:	4b71      	ldr	r3, [pc, #452]	@ (8001db4 <menu+0x7f8>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001bf6:	4b73      	ldr	r3, [pc, #460]	@ (8001dc4 <menu+0x808>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
 8001bfc:	4b6d      	ldr	r3, [pc, #436]	@ (8001db4 <menu+0x7f8>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001c04:	4b70      	ldr	r3, [pc, #448]	@ (8001dc8 <menu+0x80c>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	701a      	strb	r2, [r3, #0]
 8001c0a:	4b6a      	ldr	r3, [pc, #424]	@ (8001db4 <menu+0x7f8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001c12:	4b6e      	ldr	r3, [pc, #440]	@ (8001dcc <menu+0x810>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	701a      	strb	r2, [r3, #0]
 8001c18:	4b66      	ldr	r3, [pc, #408]	@ (8001db4 <menu+0x7f8>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001c20:	4b6b      	ldr	r3, [pc, #428]	@ (8001dd0 <menu+0x814>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
 8001c26:	4b63      	ldr	r3, [pc, #396]	@ (8001db4 <menu+0x7f8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001c2e:	4b69      	ldr	r3, [pc, #420]	@ (8001dd4 <menu+0x818>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
 8001c34:	4b5f      	ldr	r3, [pc, #380]	@ (8001db4 <menu+0x7f8>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001c3c:	4b66      	ldr	r3, [pc, #408]	@ (8001dd8 <menu+0x81c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
 8001c42:	4b5c      	ldr	r3, [pc, #368]	@ (8001db4 <menu+0x7f8>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 8001c4a:	4b64      	ldr	r3, [pc, #400]	@ (8001ddc <menu+0x820>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001c50:	4b63      	ldr	r3, [pc, #396]	@ (8001de0 <menu+0x824>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	f040 808e 	bne.w	8001d76 <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 8001c5a:	4a62      	ldr	r2, [pc, #392]	@ (8001de4 <menu+0x828>)
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f007 f9b0 	bl	8008fc4 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001c64:	4b4e      	ldr	r3, [pc, #312]	@ (8001da0 <menu+0x7e4>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d003      	beq.n	8001c74 <menu+0x6b8>
 8001c6c:	4b4c      	ldr	r3, [pc, #304]	@ (8001da0 <menu+0x7e4>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d104      	bne.n	8001c7e <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 8001c74:	4a5c      	ldr	r2, [pc, #368]	@ (8001de8 <menu+0x82c>)
 8001c76:	2101      	movs	r1, #1
 8001c78:	2002      	movs	r0, #2
 8001c7a:	f007 f9a3 	bl	8008fc4 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001c7e:	4b5b      	ldr	r3, [pc, #364]	@ (8001dec <menu+0x830>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d108      	bne.n	8001c98 <menu+0x6dc>
 8001c86:	4b46      	ldr	r3, [pc, #280]	@ (8001da0 <menu+0x7e4>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d104      	bne.n	8001c98 <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 8001c8e:	4a58      	ldr	r2, [pc, #352]	@ (8001df0 <menu+0x834>)
 8001c90:	2101      	movs	r1, #1
 8001c92:	2002      	movs	r0, #2
 8001c94:	f007 f996 	bl	8008fc4 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001c98:	4b54      	ldr	r3, [pc, #336]	@ (8001dec <menu+0x830>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d108      	bne.n	8001cb2 <menu+0x6f6>
 8001ca0:	4b3f      	ldr	r3, [pc, #252]	@ (8001da0 <menu+0x7e4>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d104      	bne.n	8001cb2 <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 8001ca8:	4a52      	ldr	r2, [pc, #328]	@ (8001df4 <menu+0x838>)
 8001caa:	2101      	movs	r1, #1
 8001cac:	2002      	movs	r0, #2
 8001cae:	f007 f989 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cb2:	2102      	movs	r1, #2
 8001cb4:	483c      	ldr	r0, [pc, #240]	@ (8001da8 <menu+0x7ec>)
 8001cb6:	f008 fcc9 	bl	800a64c <HAL_GPIO_ReadPin>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d119      	bne.n	8001cf4 <menu+0x738>
 8001cc0:	4b3a      	ldr	r3, [pc, #232]	@ (8001dac <menu+0x7f0>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	f083 0301 	eor.w	r3, r3, #1
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d012      	beq.n	8001cf4 <menu+0x738>
 8001cce:	4b34      	ldr	r3, [pc, #208]	@ (8001da0 <menu+0x7e4>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d10e      	bne.n	8001cf4 <menu+0x738>
			calismaSekli = calismaSekli + 1;
 8001cd6:	4b45      	ldr	r3, [pc, #276]	@ (8001dec <menu+0x830>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	3301      	adds	r3, #1
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4b43      	ldr	r3, [pc, #268]	@ (8001dec <menu+0x830>)
 8001ce0:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001ce2:	4b42      	ldr	r3, [pc, #264]	@ (8001dec <menu+0x830>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d902      	bls.n	8001cf0 <menu+0x734>
				calismaSekli = 0;
 8001cea:	4b40      	ldr	r3, [pc, #256]	@ (8001dec <menu+0x830>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cf0:	f002 f9aa 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001cf4:	2104      	movs	r1, #4
 8001cf6:	482c      	ldr	r0, [pc, #176]	@ (8001da8 <menu+0x7ec>)
 8001cf8:	f008 fca8 	bl	800a64c <HAL_GPIO_ReadPin>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d119      	bne.n	8001d36 <menu+0x77a>
 8001d02:	4b2a      	ldr	r3, [pc, #168]	@ (8001dac <menu+0x7f0>)
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	f083 0301 	eor.w	r3, r3, #1
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d012      	beq.n	8001d36 <menu+0x77a>
 8001d10:	4b23      	ldr	r3, [pc, #140]	@ (8001da0 <menu+0x7e4>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10e      	bne.n	8001d36 <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 8001d18:	4b34      	ldr	r3, [pc, #208]	@ (8001dec <menu+0x830>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b2da      	uxtb	r2, r3
 8001d20:	4b32      	ldr	r3, [pc, #200]	@ (8001dec <menu+0x830>)
 8001d22:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001d24:	4b31      	ldr	r3, [pc, #196]	@ (8001dec <menu+0x830>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <menu+0x776>
	    		calismaSekli = 1;
 8001d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001dec <menu+0x830>)
 8001d2e:	2201      	movs	r2, #1
 8001d30:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001d32:	f002 f989 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d36:	2108      	movs	r1, #8
 8001d38:	481b      	ldr	r0, [pc, #108]	@ (8001da8 <menu+0x7ec>)
 8001d3a:	f008 fc87 	bl	800a64c <HAL_GPIO_ReadPin>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d118      	bne.n	8001d76 <menu+0x7ba>
 8001d44:	4b19      	ldr	r3, [pc, #100]	@ (8001dac <menu+0x7f0>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	f083 0301 	eor.w	r3, r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d011      	beq.n	8001d76 <menu+0x7ba>
			eepromData[1] = calismaSekli;
 8001d52:	4b26      	ldr	r3, [pc, #152]	@ (8001dec <menu+0x830>)
 8001d54:	781a      	ldrb	r2, [r3, #0]
 8001d56:	4b17      	ldr	r3, [pc, #92]	@ (8001db4 <menu+0x7f8>)
 8001d58:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001d5a:	4b24      	ldr	r3, [pc, #144]	@ (8001dec <menu+0x830>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d106      	bne.n	8001d70 <menu+0x7b4>
				altLimit = 1;
 8001d62:	4b25      	ldr	r3, [pc, #148]	@ (8001df8 <menu+0x83c>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001d68:	4b23      	ldr	r3, [pc, #140]	@ (8001df8 <menu+0x83c>)
 8001d6a:	781a      	ldrb	r2, [r3, #0]
 8001d6c:	4b11      	ldr	r3, [pc, #68]	@ (8001db4 <menu+0x7f8>)
 8001d6e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001d70:	4b1a      	ldr	r3, [pc, #104]	@ (8001ddc <menu+0x820>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001d76:	4b1a      	ldr	r3, [pc, #104]	@ (8001de0 <menu+0x824>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	f040 809c 	bne.w	8001eb8 <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 8001d80:	4a1e      	ldr	r2, [pc, #120]	@ (8001dfc <menu+0x840>)
 8001d82:	2101      	movs	r1, #1
 8001d84:	2001      	movs	r0, #1
 8001d86:	f007 f91d 	bl	8008fc4 <lcd_print>

		if(emniyetCercevesi == 0) {
 8001d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e00 <menu+0x844>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d13a      	bne.n	8001e08 <menu+0x84c>
			lcd_print(2, 1, pasifText);
 8001d92:	4a1c      	ldr	r2, [pc, #112]	@ (8001e04 <menu+0x848>)
 8001d94:	2101      	movs	r1, #1
 8001d96:	2002      	movs	r0, #2
 8001d98:	f007 f914 	bl	8008fc4 <lcd_print>
 8001d9c:	e03d      	b.n	8001e1a <menu+0x85e>
 8001d9e:	bf00      	nop
 8001da0:	200014cb 	.word	0x200014cb
 8001da4:	200014be 	.word	0x200014be
 8001da8:	40010800 	.word	0x40010800
 8001dac:	200014eb 	.word	0x200014eb
 8001db0:	200014dd 	.word	0x200014dd
 8001db4:	20000fec 	.word	0x20000fec
 8001db8:	200014de 	.word	0x200014de
 8001dbc:	200014df 	.word	0x200014df
 8001dc0:	200014e0 	.word	0x200014e0
 8001dc4:	200014e1 	.word	0x200014e1
 8001dc8:	200014e2 	.word	0x200014e2
 8001dcc:	200014e3 	.word	0x200014e3
 8001dd0:	200014e4 	.word	0x200014e4
 8001dd4:	200014e5 	.word	0x200014e5
 8001dd8:	200014e6 	.word	0x200014e6
 8001ddc:	200014e8 	.word	0x200014e8
 8001de0:	200014bc 	.word	0x200014bc
 8001de4:	20001738 	.word	0x20001738
 8001de8:	2000174c 	.word	0x2000174c
 8001dec:	200014bd 	.word	0x200014bd
 8001df0:	20001760 	.word	0x20001760
 8001df4:	20001774 	.word	0x20001774
 8001df8:	200014c2 	.word	0x200014c2
 8001dfc:	20001788 	.word	0x20001788
 8001e00:	200014c0 	.word	0x200014c0
 8001e04:	2000179c 	.word	0x2000179c
		} else if(emniyetCercevesi == 1) {
 8001e08:	4b6b      	ldr	r3, [pc, #428]	@ (8001fb8 <menu+0x9fc>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d104      	bne.n	8001e1a <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 8001e10:	4a6a      	ldr	r2, [pc, #424]	@ (8001fbc <menu+0xa00>)
 8001e12:	2101      	movs	r1, #1
 8001e14:	2002      	movs	r0, #2
 8001e16:	f007 f8d5 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	4868      	ldr	r0, [pc, #416]	@ (8001fc0 <menu+0xa04>)
 8001e1e:	f008 fc15 	bl	800a64c <HAL_GPIO_ReadPin>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d115      	bne.n	8001e54 <menu+0x898>
 8001e28:	4b66      	ldr	r3, [pc, #408]	@ (8001fc4 <menu+0xa08>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	f083 0301 	eor.w	r3, r3, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00e      	beq.n	8001e54 <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001e36:	4b60      	ldr	r3, [pc, #384]	@ (8001fb8 <menu+0x9fc>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b5e      	ldr	r3, [pc, #376]	@ (8001fb8 <menu+0x9fc>)
 8001e40:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001e42:	4b5d      	ldr	r3, [pc, #372]	@ (8001fb8 <menu+0x9fc>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d902      	bls.n	8001e50 <menu+0x894>
				emniyetCercevesi = 0;
 8001e4a:	4b5b      	ldr	r3, [pc, #364]	@ (8001fb8 <menu+0x9fc>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e50:	f002 f8fa 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e54:	2104      	movs	r1, #4
 8001e56:	485a      	ldr	r0, [pc, #360]	@ (8001fc0 <menu+0xa04>)
 8001e58:	f008 fbf8 	bl	800a64c <HAL_GPIO_ReadPin>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d115      	bne.n	8001e8e <menu+0x8d2>
 8001e62:	4b58      	ldr	r3, [pc, #352]	@ (8001fc4 <menu+0xa08>)
 8001e64:	781b      	ldrb	r3, [r3, #0]
 8001e66:	f083 0301 	eor.w	r3, r3, #1
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00e      	beq.n	8001e8e <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001e70:	4b51      	ldr	r3, [pc, #324]	@ (8001fb8 <menu+0x9fc>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	3b01      	subs	r3, #1
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	4b4f      	ldr	r3, [pc, #316]	@ (8001fb8 <menu+0x9fc>)
 8001e7a:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001e7c:	4b4e      	ldr	r3, [pc, #312]	@ (8001fb8 <menu+0x9fc>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d002      	beq.n	8001e8a <menu+0x8ce>
		   		emniyetCercevesi = 1;
 8001e84:	4b4c      	ldr	r3, [pc, #304]	@ (8001fb8 <menu+0x9fc>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e8a:	f002 f8dd 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001e8e:	2108      	movs	r1, #8
 8001e90:	484b      	ldr	r0, [pc, #300]	@ (8001fc0 <menu+0xa04>)
 8001e92:	f008 fbdb 	bl	800a64c <HAL_GPIO_ReadPin>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d10d      	bne.n	8001eb8 <menu+0x8fc>
 8001e9c:	4b49      	ldr	r3, [pc, #292]	@ (8001fc4 <menu+0xa08>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	f083 0301 	eor.w	r3, r3, #1
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d006      	beq.n	8001eb8 <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 8001eaa:	4b43      	ldr	r3, [pc, #268]	@ (8001fb8 <menu+0x9fc>)
 8001eac:	781a      	ldrb	r2, [r3, #0]
 8001eae:	4b46      	ldr	r3, [pc, #280]	@ (8001fc8 <menu+0xa0c>)
 8001eb0:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001eb2:	4b46      	ldr	r3, [pc, #280]	@ (8001fcc <menu+0xa10>)
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001eb8:	4b45      	ldr	r3, [pc, #276]	@ (8001fd0 <menu+0xa14>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d166      	bne.n	8001f8e <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 8001ec0:	4a44      	ldr	r2, [pc, #272]	@ (8001fd4 <menu+0xa18>)
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f007 f87d 	bl	8008fc4 <lcd_print>

		if(yavaslamaLimit == 0) {
 8001eca:	4b43      	ldr	r3, [pc, #268]	@ (8001fd8 <menu+0xa1c>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d105      	bne.n	8001ede <menu+0x922>
			lcd_print(2, 1, pasifText);
 8001ed2:	4a42      	ldr	r2, [pc, #264]	@ (8001fdc <menu+0xa20>)
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	2002      	movs	r0, #2
 8001ed8:	f007 f874 	bl	8008fc4 <lcd_print>
 8001edc:	e008      	b.n	8001ef0 <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 8001ede:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd8 <menu+0xa1c>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d104      	bne.n	8001ef0 <menu+0x934>
			lcd_print(2, 1, aktifText);
 8001ee6:	4a3e      	ldr	r2, [pc, #248]	@ (8001fe0 <menu+0xa24>)
 8001ee8:	2101      	movs	r1, #1
 8001eea:	2002      	movs	r0, #2
 8001eec:	f007 f86a 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ef0:	2102      	movs	r1, #2
 8001ef2:	4833      	ldr	r0, [pc, #204]	@ (8001fc0 <menu+0xa04>)
 8001ef4:	f008 fbaa 	bl	800a64c <HAL_GPIO_ReadPin>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d115      	bne.n	8001f2a <menu+0x96e>
 8001efe:	4b31      	ldr	r3, [pc, #196]	@ (8001fc4 <menu+0xa08>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	f083 0301 	eor.w	r3, r3, #1
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00e      	beq.n	8001f2a <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001f0c:	4b32      	ldr	r3, [pc, #200]	@ (8001fd8 <menu+0xa1c>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	3301      	adds	r3, #1
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	4b30      	ldr	r3, [pc, #192]	@ (8001fd8 <menu+0xa1c>)
 8001f16:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001f18:	4b2f      	ldr	r3, [pc, #188]	@ (8001fd8 <menu+0xa1c>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d902      	bls.n	8001f26 <menu+0x96a>
				yavaslamaLimit = 0;
 8001f20:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd8 <menu+0xa1c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f26:	f002 f88f 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f2a:	2104      	movs	r1, #4
 8001f2c:	4824      	ldr	r0, [pc, #144]	@ (8001fc0 <menu+0xa04>)
 8001f2e:	f008 fb8d 	bl	800a64c <HAL_GPIO_ReadPin>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d115      	bne.n	8001f64 <menu+0x9a8>
 8001f38:	4b22      	ldr	r3, [pc, #136]	@ (8001fc4 <menu+0xa08>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	f083 0301 	eor.w	r3, r3, #1
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00e      	beq.n	8001f64 <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001f46:	4b24      	ldr	r3, [pc, #144]	@ (8001fd8 <menu+0xa1c>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	4b22      	ldr	r3, [pc, #136]	@ (8001fd8 <menu+0xa1c>)
 8001f50:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001f52:	4b21      	ldr	r3, [pc, #132]	@ (8001fd8 <menu+0xa1c>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <menu+0x9a4>
		   		yavaslamaLimit = 1;
 8001f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd8 <menu+0xa1c>)
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f60:	f002 f872 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f64:	2108      	movs	r1, #8
 8001f66:	4816      	ldr	r0, [pc, #88]	@ (8001fc0 <menu+0xa04>)
 8001f68:	f008 fb70 	bl	800a64c <HAL_GPIO_ReadPin>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d10d      	bne.n	8001f8e <menu+0x9d2>
 8001f72:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <menu+0xa08>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	f083 0301 	eor.w	r3, r3, #1
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d006      	beq.n	8001f8e <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 8001f80:	4b15      	ldr	r3, [pc, #84]	@ (8001fd8 <menu+0xa1c>)
 8001f82:	781a      	ldrb	r2, [r3, #0]
 8001f84:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <menu+0xa0c>)
 8001f86:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001f88:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <menu+0xa10>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001f8e:	4b10      	ldr	r3, [pc, #64]	@ (8001fd0 <menu+0xa14>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b05      	cmp	r3, #5
 8001f94:	f040 80aa 	bne.w	80020ec <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 8001f98:	4a12      	ldr	r2, [pc, #72]	@ (8001fe4 <menu+0xa28>)
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	f007 f811 	bl	8008fc4 <lcd_print>

		if(altLimit == 0) {
 8001fa2:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <menu+0xa2c>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d120      	bne.n	8001fec <menu+0xa30>
			lcd_print(2, 1, pasifText);
 8001faa:	4a0c      	ldr	r2, [pc, #48]	@ (8001fdc <menu+0xa20>)
 8001fac:	2101      	movs	r1, #1
 8001fae:	2002      	movs	r0, #2
 8001fb0:	f007 f808 	bl	8008fc4 <lcd_print>
 8001fb4:	e023      	b.n	8001ffe <menu+0xa42>
 8001fb6:	bf00      	nop
 8001fb8:	200014c0 	.word	0x200014c0
 8001fbc:	200000ec 	.word	0x200000ec
 8001fc0:	40010800 	.word	0x40010800
 8001fc4:	200014eb 	.word	0x200014eb
 8001fc8:	20000fec 	.word	0x20000fec
 8001fcc:	200014e8 	.word	0x200014e8
 8001fd0:	200014bc 	.word	0x200014bc
 8001fd4:	200017c4 	.word	0x200017c4
 8001fd8:	200014c1 	.word	0x200014c1
 8001fdc:	2000179c 	.word	0x2000179c
 8001fe0:	200017b0 	.word	0x200017b0
 8001fe4:	200017d8 	.word	0x200017d8
 8001fe8:	200014c2 	.word	0x200014c2
		} else if(altLimit == 1) {
 8001fec:	4b89      	ldr	r3, [pc, #548]	@ (8002214 <menu+0xc58>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d104      	bne.n	8001ffe <menu+0xa42>
			lcd_print(2, 1, aktifText);
 8001ff4:	4a88      	ldr	r2, [pc, #544]	@ (8002218 <menu+0xc5c>)
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	2002      	movs	r0, #2
 8001ffa:	f006 ffe3 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001ffe:	2102      	movs	r1, #2
 8002000:	4886      	ldr	r0, [pc, #536]	@ (800221c <menu+0xc60>)
 8002002:	f008 fb23 	bl	800a64c <HAL_GPIO_ReadPin>
 8002006:	4603      	mov	r3, r0
 8002008:	2b01      	cmp	r3, #1
 800200a:	d119      	bne.n	8002040 <menu+0xa84>
 800200c:	4b84      	ldr	r3, [pc, #528]	@ (8002220 <menu+0xc64>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	f083 0301 	eor.w	r3, r3, #1
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d012      	beq.n	8002040 <menu+0xa84>
 800201a:	4b82      	ldr	r3, [pc, #520]	@ (8002224 <menu+0xc68>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10e      	bne.n	8002040 <menu+0xa84>
			altLimit = altLimit + 1;
 8002022:	4b7c      	ldr	r3, [pc, #496]	@ (8002214 <menu+0xc58>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	3301      	adds	r3, #1
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4b7a      	ldr	r3, [pc, #488]	@ (8002214 <menu+0xc58>)
 800202c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800202e:	4b79      	ldr	r3, [pc, #484]	@ (8002214 <menu+0xc58>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d902      	bls.n	800203c <menu+0xa80>
				altLimit = 0;
 8002036:	4b77      	ldr	r3, [pc, #476]	@ (8002214 <menu+0xc58>)
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800203c:	f002 f804 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002040:	2104      	movs	r1, #4
 8002042:	4876      	ldr	r0, [pc, #472]	@ (800221c <menu+0xc60>)
 8002044:	f008 fb02 	bl	800a64c <HAL_GPIO_ReadPin>
 8002048:	4603      	mov	r3, r0
 800204a:	2b01      	cmp	r3, #1
 800204c:	d119      	bne.n	8002082 <menu+0xac6>
 800204e:	4b74      	ldr	r3, [pc, #464]	@ (8002220 <menu+0xc64>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	f083 0301 	eor.w	r3, r3, #1
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d012      	beq.n	8002082 <menu+0xac6>
 800205c:	4b71      	ldr	r3, [pc, #452]	@ (8002224 <menu+0xc68>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10e      	bne.n	8002082 <menu+0xac6>
			altLimit = altLimit - 1;
 8002064:	4b6b      	ldr	r3, [pc, #428]	@ (8002214 <menu+0xc58>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	3b01      	subs	r3, #1
 800206a:	b2da      	uxtb	r2, r3
 800206c:	4b69      	ldr	r3, [pc, #420]	@ (8002214 <menu+0xc58>)
 800206e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002070:	4b68      	ldr	r3, [pc, #416]	@ (8002214 <menu+0xc58>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d002      	beq.n	800207e <menu+0xac2>
		   		altLimit = 1;
 8002078:	4b66      	ldr	r3, [pc, #408]	@ (8002214 <menu+0xc58>)
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800207e:	f001 ffe3 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002082:	2108      	movs	r1, #8
 8002084:	4865      	ldr	r0, [pc, #404]	@ (800221c <menu+0xc60>)
 8002086:	f008 fae1 	bl	800a64c <HAL_GPIO_ReadPin>
 800208a:	4603      	mov	r3, r0
 800208c:	2b01      	cmp	r3, #1
 800208e:	d12d      	bne.n	80020ec <menu+0xb30>
 8002090:	4b63      	ldr	r3, [pc, #396]	@ (8002220 <menu+0xc64>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	f083 0301 	eor.w	r3, r3, #1
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d026      	beq.n	80020ec <menu+0xb30>
			eepromData[5] = altLimit;
 800209e:	4b5d      	ldr	r3, [pc, #372]	@ (8002214 <menu+0xc58>)
 80020a0:	781a      	ldrb	r2, [r3, #0]
 80020a2:	4b61      	ldr	r3, [pc, #388]	@ (8002228 <menu+0xc6c>)
 80020a4:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80020a6:	4b5b      	ldr	r3, [pc, #364]	@ (8002214 <menu+0xc58>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d110      	bne.n	80020d0 <menu+0xb14>
 80020ae:	4b5f      	ldr	r3, [pc, #380]	@ (800222c <menu+0xc70>)
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <menu+0xb02>
 80020b6:	4b5d      	ldr	r3, [pc, #372]	@ (800222c <menu+0xc70>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d108      	bne.n	80020d0 <menu+0xb14>
				kapiTablaAcKonum = 3;
 80020be:	4b5b      	ldr	r3, [pc, #364]	@ (800222c <menu+0xc70>)
 80020c0:	2203      	movs	r2, #3
 80020c2:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80020c4:	4b59      	ldr	r3, [pc, #356]	@ (800222c <menu+0xc70>)
 80020c6:	781a      	ldrb	r2, [r3, #0]
 80020c8:	4b57      	ldr	r3, [pc, #348]	@ (8002228 <menu+0xc6c>)
 80020ca:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80020ce:	e00a      	b.n	80020e6 <menu+0xb2a>
			} else if(altLimit == 0) {
 80020d0:	4b50      	ldr	r3, [pc, #320]	@ (8002214 <menu+0xc58>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d106      	bne.n	80020e6 <menu+0xb2a>
				platformSilindirTipi = 0;
 80020d8:	4b55      	ldr	r3, [pc, #340]	@ (8002230 <menu+0xc74>)
 80020da:	2200      	movs	r2, #0
 80020dc:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80020de:	4b54      	ldr	r3, [pc, #336]	@ (8002230 <menu+0xc74>)
 80020e0:	781a      	ldrb	r2, [r3, #0]
 80020e2:	4b51      	ldr	r3, [pc, #324]	@ (8002228 <menu+0xc6c>)
 80020e4:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80020e6:	4b53      	ldr	r3, [pc, #332]	@ (8002234 <menu+0xc78>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80020ec:	4b52      	ldr	r3, [pc, #328]	@ (8002238 <menu+0xc7c>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b06      	cmp	r3, #6
 80020f2:	d166      	bne.n	80021c2 <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 80020f4:	4a51      	ldr	r2, [pc, #324]	@ (800223c <menu+0xc80>)
 80020f6:	2101      	movs	r1, #1
 80020f8:	2001      	movs	r0, #1
 80020fa:	f006 ff63 	bl	8008fc4 <lcd_print>

		if(basincSalteri == 0) {
 80020fe:	4b50      	ldr	r3, [pc, #320]	@ (8002240 <menu+0xc84>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d105      	bne.n	8002112 <menu+0xb56>
			lcd_print(2, 1, pasifText);
 8002106:	4a4f      	ldr	r2, [pc, #316]	@ (8002244 <menu+0xc88>)
 8002108:	2101      	movs	r1, #1
 800210a:	2002      	movs	r0, #2
 800210c:	f006 ff5a 	bl	8008fc4 <lcd_print>
 8002110:	e008      	b.n	8002124 <menu+0xb68>
		} else if(basincSalteri == 1) {
 8002112:	4b4b      	ldr	r3, [pc, #300]	@ (8002240 <menu+0xc84>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d104      	bne.n	8002124 <menu+0xb68>
			lcd_print(2, 1, aktifText);
 800211a:	4a3f      	ldr	r2, [pc, #252]	@ (8002218 <menu+0xc5c>)
 800211c:	2101      	movs	r1, #1
 800211e:	2002      	movs	r0, #2
 8002120:	f006 ff50 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002124:	2102      	movs	r1, #2
 8002126:	483d      	ldr	r0, [pc, #244]	@ (800221c <menu+0xc60>)
 8002128:	f008 fa90 	bl	800a64c <HAL_GPIO_ReadPin>
 800212c:	4603      	mov	r3, r0
 800212e:	2b01      	cmp	r3, #1
 8002130:	d115      	bne.n	800215e <menu+0xba2>
 8002132:	4b3b      	ldr	r3, [pc, #236]	@ (8002220 <menu+0xc64>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	f083 0301 	eor.w	r3, r3, #1
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00e      	beq.n	800215e <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 8002140:	4b3f      	ldr	r3, [pc, #252]	@ (8002240 <menu+0xc84>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	3301      	adds	r3, #1
 8002146:	b2da      	uxtb	r2, r3
 8002148:	4b3d      	ldr	r3, [pc, #244]	@ (8002240 <menu+0xc84>)
 800214a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 800214c:	4b3c      	ldr	r3, [pc, #240]	@ (8002240 <menu+0xc84>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b01      	cmp	r3, #1
 8002152:	d902      	bls.n	800215a <menu+0xb9e>
				basincSalteri = 0;
 8002154:	4b3a      	ldr	r3, [pc, #232]	@ (8002240 <menu+0xc84>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800215a:	f001 ff75 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800215e:	2104      	movs	r1, #4
 8002160:	482e      	ldr	r0, [pc, #184]	@ (800221c <menu+0xc60>)
 8002162:	f008 fa73 	bl	800a64c <HAL_GPIO_ReadPin>
 8002166:	4603      	mov	r3, r0
 8002168:	2b01      	cmp	r3, #1
 800216a:	d115      	bne.n	8002198 <menu+0xbdc>
 800216c:	4b2c      	ldr	r3, [pc, #176]	@ (8002220 <menu+0xc64>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	f083 0301 	eor.w	r3, r3, #1
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00e      	beq.n	8002198 <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 800217a:	4b31      	ldr	r3, [pc, #196]	@ (8002240 <menu+0xc84>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	3b01      	subs	r3, #1
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4b2f      	ldr	r3, [pc, #188]	@ (8002240 <menu+0xc84>)
 8002184:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002186:	4b2e      	ldr	r3, [pc, #184]	@ (8002240 <menu+0xc84>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <menu+0xbd8>
		   		basincSalteri = 1;
 800218e:	4b2c      	ldr	r3, [pc, #176]	@ (8002240 <menu+0xc84>)
 8002190:	2201      	movs	r2, #1
 8002192:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002194:	f001 ff58 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002198:	2108      	movs	r1, #8
 800219a:	4820      	ldr	r0, [pc, #128]	@ (800221c <menu+0xc60>)
 800219c:	f008 fa56 	bl	800a64c <HAL_GPIO_ReadPin>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d10d      	bne.n	80021c2 <menu+0xc06>
 80021a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002220 <menu+0xc64>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	f083 0301 	eor.w	r3, r3, #1
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d006      	beq.n	80021c2 <menu+0xc06>
			eepromData[6] = basincSalteri;
 80021b4:	4b22      	ldr	r3, [pc, #136]	@ (8002240 <menu+0xc84>)
 80021b6:	781a      	ldrb	r2, [r3, #0]
 80021b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002228 <menu+0xc6c>)
 80021ba:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80021bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002234 <menu+0xc78>)
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80021c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002238 <menu+0xc7c>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b07      	cmp	r3, #7
 80021c8:	f040 80a9 	bne.w	800231e <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 80021cc:	4a1e      	ldr	r2, [pc, #120]	@ (8002248 <menu+0xc8c>)
 80021ce:	2101      	movs	r1, #1
 80021d0:	2001      	movs	r0, #1
 80021d2:	f006 fef7 	bl	8008fc4 <lcd_print>

		if(kapiSecimleri == 0) {
 80021d6:	4b1d      	ldr	r3, [pc, #116]	@ (800224c <menu+0xc90>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d105      	bne.n	80021ea <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 80021de:	4a19      	ldr	r2, [pc, #100]	@ (8002244 <menu+0xc88>)
 80021e0:	2101      	movs	r1, #1
 80021e2:	2002      	movs	r0, #2
 80021e4:	f006 feee 	bl	8008fc4 <lcd_print>
 80021e8:	e03f      	b.n	800226a <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 80021ea:	4b18      	ldr	r3, [pc, #96]	@ (800224c <menu+0xc90>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d105      	bne.n	80021fe <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 80021f2:	4a17      	ldr	r2, [pc, #92]	@ (8002250 <menu+0xc94>)
 80021f4:	2101      	movs	r1, #1
 80021f6:	2002      	movs	r0, #2
 80021f8:	f006 fee4 	bl	8008fc4 <lcd_print>
 80021fc:	e035      	b.n	800226a <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 80021fe:	4b13      	ldr	r3, [pc, #76]	@ (800224c <menu+0xc90>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b02      	cmp	r3, #2
 8002204:	d128      	bne.n	8002258 <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 8002206:	4a13      	ldr	r2, [pc, #76]	@ (8002254 <menu+0xc98>)
 8002208:	2101      	movs	r1, #1
 800220a:	2002      	movs	r0, #2
 800220c:	f006 feda 	bl	8008fc4 <lcd_print>
 8002210:	e02b      	b.n	800226a <menu+0xcae>
 8002212:	bf00      	nop
 8002214:	200014c2 	.word	0x200014c2
 8002218:	200017b0 	.word	0x200017b0
 800221c:	40010800 	.word	0x40010800
 8002220:	200014eb 	.word	0x200014eb
 8002224:	200014bd 	.word	0x200014bd
 8002228:	20000fec 	.word	0x20000fec
 800222c:	200014c9 	.word	0x200014c9
 8002230:	200014cf 	.word	0x200014cf
 8002234:	200014e8 	.word	0x200014e8
 8002238:	200014bc 	.word	0x200014bc
 800223c:	200017ec 	.word	0x200017ec
 8002240:	200014c3 	.word	0x200014c3
 8002244:	2000179c 	.word	0x2000179c
 8002248:	20001800 	.word	0x20001800
 800224c:	200014c4 	.word	0x200014c4
 8002250:	20001814 	.word	0x20001814
 8002254:	20001828 	.word	0x20001828
		} else if(kapiSecimleri == 3) {
 8002258:	4b76      	ldr	r3, [pc, #472]	@ (8002434 <menu+0xe78>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b03      	cmp	r3, #3
 800225e:	d104      	bne.n	800226a <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 8002260:	4a75      	ldr	r2, [pc, #468]	@ (8002438 <menu+0xe7c>)
 8002262:	2101      	movs	r1, #1
 8002264:	2002      	movs	r0, #2
 8002266:	f006 fead 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800226a:	2102      	movs	r1, #2
 800226c:	4873      	ldr	r0, [pc, #460]	@ (800243c <menu+0xe80>)
 800226e:	f008 f9ed 	bl	800a64c <HAL_GPIO_ReadPin>
 8002272:	4603      	mov	r3, r0
 8002274:	2b01      	cmp	r3, #1
 8002276:	d115      	bne.n	80022a4 <menu+0xce8>
 8002278:	4b71      	ldr	r3, [pc, #452]	@ (8002440 <menu+0xe84>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	f083 0301 	eor.w	r3, r3, #1
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00e      	beq.n	80022a4 <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 8002286:	4b6b      	ldr	r3, [pc, #428]	@ (8002434 <menu+0xe78>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	3301      	adds	r3, #1
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4b69      	ldr	r3, [pc, #420]	@ (8002434 <menu+0xe78>)
 8002290:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002292:	4b68      	ldr	r3, [pc, #416]	@ (8002434 <menu+0xe78>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b03      	cmp	r3, #3
 8002298:	d902      	bls.n	80022a0 <menu+0xce4>
				kapiSecimleri = 0;
 800229a:	4b66      	ldr	r3, [pc, #408]	@ (8002434 <menu+0xe78>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022a0:	f001 fed2 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80022a4:	2104      	movs	r1, #4
 80022a6:	4865      	ldr	r0, [pc, #404]	@ (800243c <menu+0xe80>)
 80022a8:	f008 f9d0 	bl	800a64c <HAL_GPIO_ReadPin>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d115      	bne.n	80022de <menu+0xd22>
 80022b2:	4b63      	ldr	r3, [pc, #396]	@ (8002440 <menu+0xe84>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	f083 0301 	eor.w	r3, r3, #1
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00e      	beq.n	80022de <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 80022c0:	4b5c      	ldr	r3, [pc, #368]	@ (8002434 <menu+0xe78>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	4b5a      	ldr	r3, [pc, #360]	@ (8002434 <menu+0xe78>)
 80022ca:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80022cc:	4b59      	ldr	r3, [pc, #356]	@ (8002434 <menu+0xe78>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d902      	bls.n	80022da <menu+0xd1e>
		   		kapiSecimleri = 3;
 80022d4:	4b57      	ldr	r3, [pc, #348]	@ (8002434 <menu+0xe78>)
 80022d6:	2203      	movs	r2, #3
 80022d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022da:	f001 feb5 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022de:	2108      	movs	r1, #8
 80022e0:	4856      	ldr	r0, [pc, #344]	@ (800243c <menu+0xe80>)
 80022e2:	f008 f9b3 	bl	800a64c <HAL_GPIO_ReadPin>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d118      	bne.n	800231e <menu+0xd62>
 80022ec:	4b54      	ldr	r3, [pc, #336]	@ (8002440 <menu+0xe84>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f083 0301 	eor.w	r3, r3, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d011      	beq.n	800231e <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 80022fa:	4b4e      	ldr	r3, [pc, #312]	@ (8002434 <menu+0xe78>)
 80022fc:	781a      	ldrb	r2, [r3, #0]
 80022fe:	4b51      	ldr	r3, [pc, #324]	@ (8002444 <menu+0xe88>)
 8002300:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002302:	4b4c      	ldr	r3, [pc, #304]	@ (8002434 <menu+0xe78>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d006      	beq.n	8002318 <menu+0xd5c>
				altLimit = 1;
 800230a:	4b4f      	ldr	r3, [pc, #316]	@ (8002448 <menu+0xe8c>)
 800230c:	2201      	movs	r2, #1
 800230e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002310:	4b4d      	ldr	r3, [pc, #308]	@ (8002448 <menu+0xe8c>)
 8002312:	781a      	ldrb	r2, [r3, #0]
 8002314:	4b4b      	ldr	r3, [pc, #300]	@ (8002444 <menu+0xe88>)
 8002316:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002318:	4b4c      	ldr	r3, [pc, #304]	@ (800244c <menu+0xe90>)
 800231a:	2201      	movs	r2, #1
 800231c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800231e:	4b4c      	ldr	r3, [pc, #304]	@ (8002450 <menu+0xe94>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b08      	cmp	r3, #8
 8002324:	d167      	bne.n	80023f6 <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 8002326:	4a4b      	ldr	r2, [pc, #300]	@ (8002454 <menu+0xe98>)
 8002328:	2101      	movs	r1, #1
 800232a:	2001      	movs	r0, #1
 800232c:	f006 fe4a 	bl	8008fc4 <lcd_print>

		if(kapiAcTipi == 0) {
 8002330:	4b49      	ldr	r3, [pc, #292]	@ (8002458 <menu+0xe9c>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d105      	bne.n	8002344 <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 8002338:	4a48      	ldr	r2, [pc, #288]	@ (800245c <menu+0xea0>)
 800233a:	2101      	movs	r1, #1
 800233c:	2002      	movs	r0, #2
 800233e:	f006 fe41 	bl	8008fc4 <lcd_print>
 8002342:	e008      	b.n	8002356 <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 8002344:	4b44      	ldr	r3, [pc, #272]	@ (8002458 <menu+0xe9c>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d104      	bne.n	8002356 <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 800234c:	4a44      	ldr	r2, [pc, #272]	@ (8002460 <menu+0xea4>)
 800234e:	2101      	movs	r1, #1
 8002350:	2002      	movs	r0, #2
 8002352:	f006 fe37 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002356:	2102      	movs	r1, #2
 8002358:	4838      	ldr	r0, [pc, #224]	@ (800243c <menu+0xe80>)
 800235a:	f008 f977 	bl	800a64c <HAL_GPIO_ReadPin>
 800235e:	4603      	mov	r3, r0
 8002360:	2b01      	cmp	r3, #1
 8002362:	d115      	bne.n	8002390 <menu+0xdd4>
 8002364:	4b36      	ldr	r3, [pc, #216]	@ (8002440 <menu+0xe84>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	f083 0301 	eor.w	r3, r3, #1
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00e      	beq.n	8002390 <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 8002372:	4b39      	ldr	r3, [pc, #228]	@ (8002458 <menu+0xe9c>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	3301      	adds	r3, #1
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4b37      	ldr	r3, [pc, #220]	@ (8002458 <menu+0xe9c>)
 800237c:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800237e:	4b36      	ldr	r3, [pc, #216]	@ (8002458 <menu+0xe9c>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d902      	bls.n	800238c <menu+0xdd0>
				kapiAcTipi = 0;
 8002386:	4b34      	ldr	r3, [pc, #208]	@ (8002458 <menu+0xe9c>)
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800238c:	f001 fe5c 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002390:	2104      	movs	r1, #4
 8002392:	482a      	ldr	r0, [pc, #168]	@ (800243c <menu+0xe80>)
 8002394:	f008 f95a 	bl	800a64c <HAL_GPIO_ReadPin>
 8002398:	4603      	mov	r3, r0
 800239a:	2b01      	cmp	r3, #1
 800239c:	d115      	bne.n	80023ca <menu+0xe0e>
 800239e:	4b28      	ldr	r3, [pc, #160]	@ (8002440 <menu+0xe84>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	f083 0301 	eor.w	r3, r3, #1
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00e      	beq.n	80023ca <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 80023ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002458 <menu+0xe9c>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	3b01      	subs	r3, #1
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	4b28      	ldr	r3, [pc, #160]	@ (8002458 <menu+0xe9c>)
 80023b6:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80023b8:	4b27      	ldr	r3, [pc, #156]	@ (8002458 <menu+0xe9c>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <menu+0xe0a>
		   		kapiAcTipi = 1;
 80023c0:	4b25      	ldr	r3, [pc, #148]	@ (8002458 <menu+0xe9c>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023c6:	f001 fe3f 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023ca:	2108      	movs	r1, #8
 80023cc:	481b      	ldr	r0, [pc, #108]	@ (800243c <menu+0xe80>)
 80023ce:	f008 f93d 	bl	800a64c <HAL_GPIO_ReadPin>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d10e      	bne.n	80023f6 <menu+0xe3a>
 80023d8:	4b19      	ldr	r3, [pc, #100]	@ (8002440 <menu+0xe84>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	f083 0301 	eor.w	r3, r3, #1
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d007      	beq.n	80023f6 <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 80023e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002458 <menu+0xe9c>)
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	4b16      	ldr	r3, [pc, #88]	@ (8002444 <menu+0xe88>)
 80023ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 80023f0:	4b16      	ldr	r3, [pc, #88]	@ (800244c <menu+0xe90>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80023f6:	4b16      	ldr	r3, [pc, #88]	@ (8002450 <menu+0xe94>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b09      	cmp	r3, #9
 80023fc:	f040 8092 	bne.w	8002524 <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 8002400:	4a18      	ldr	r2, [pc, #96]	@ (8002464 <menu+0xea8>)
 8002402:	2101      	movs	r1, #1
 8002404:	2001      	movs	r0, #1
 8002406:	f006 fddd 	bl	8008fc4 <lcd_print>

		if(kapi1Tip == 0) {
 800240a:	4b17      	ldr	r3, [pc, #92]	@ (8002468 <menu+0xeac>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d105      	bne.n	800241e <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 8002412:	4a16      	ldr	r2, [pc, #88]	@ (800246c <menu+0xeb0>)
 8002414:	2101      	movs	r1, #1
 8002416:	2002      	movs	r0, #2
 8002418:	f006 fdd4 	bl	8008fc4 <lcd_print>
 800241c:	e033      	b.n	8002486 <menu+0xeca>
		} else if(kapi1Tip == 1) {
 800241e:	4b12      	ldr	r3, [pc, #72]	@ (8002468 <menu+0xeac>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d126      	bne.n	8002474 <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 8002426:	4a12      	ldr	r2, [pc, #72]	@ (8002470 <menu+0xeb4>)
 8002428:	2101      	movs	r1, #1
 800242a:	2002      	movs	r0, #2
 800242c:	f006 fdca 	bl	8008fc4 <lcd_print>
 8002430:	e029      	b.n	8002486 <menu+0xeca>
 8002432:	bf00      	nop
 8002434:	200014c4 	.word	0x200014c4
 8002438:	2000183c 	.word	0x2000183c
 800243c:	40010800 	.word	0x40010800
 8002440:	200014eb 	.word	0x200014eb
 8002444:	20000fec 	.word	0x20000fec
 8002448:	200014c2 	.word	0x200014c2
 800244c:	200014e8 	.word	0x200014e8
 8002450:	200014bc 	.word	0x200014bc
 8002454:	20001850 	.word	0x20001850
 8002458:	200014c8 	.word	0x200014c8
 800245c:	20001864 	.word	0x20001864
 8002460:	20001878 	.word	0x20001878
 8002464:	2000188c 	.word	0x2000188c
 8002468:	200014c5 	.word	0x200014c5
 800246c:	20000100 	.word	0x20000100
 8002470:	200018a0 	.word	0x200018a0
		} else if(kapi1Tip == 2) {
 8002474:	4b73      	ldr	r3, [pc, #460]	@ (8002644 <menu+0x1088>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d104      	bne.n	8002486 <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 800247c:	4a72      	ldr	r2, [pc, #456]	@ (8002648 <menu+0x108c>)
 800247e:	2101      	movs	r1, #1
 8002480:	2002      	movs	r0, #2
 8002482:	f006 fd9f 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002486:	2102      	movs	r1, #2
 8002488:	4870      	ldr	r0, [pc, #448]	@ (800264c <menu+0x1090>)
 800248a:	f008 f8df 	bl	800a64c <HAL_GPIO_ReadPin>
 800248e:	4603      	mov	r3, r0
 8002490:	2b01      	cmp	r3, #1
 8002492:	d115      	bne.n	80024c0 <menu+0xf04>
 8002494:	4b6e      	ldr	r3, [pc, #440]	@ (8002650 <menu+0x1094>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	f083 0301 	eor.w	r3, r3, #1
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00e      	beq.n	80024c0 <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 80024a2:	4b68      	ldr	r3, [pc, #416]	@ (8002644 <menu+0x1088>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	3301      	adds	r3, #1
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4b66      	ldr	r3, [pc, #408]	@ (8002644 <menu+0x1088>)
 80024ac:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 80024ae:	4b65      	ldr	r3, [pc, #404]	@ (8002644 <menu+0x1088>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d902      	bls.n	80024bc <menu+0xf00>
				kapi1Tip = 0;
 80024b6:	4b63      	ldr	r3, [pc, #396]	@ (8002644 <menu+0x1088>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024bc:	f001 fdc4 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024c0:	2104      	movs	r1, #4
 80024c2:	4862      	ldr	r0, [pc, #392]	@ (800264c <menu+0x1090>)
 80024c4:	f008 f8c2 	bl	800a64c <HAL_GPIO_ReadPin>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d115      	bne.n	80024fa <menu+0xf3e>
 80024ce:	4b60      	ldr	r3, [pc, #384]	@ (8002650 <menu+0x1094>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	f083 0301 	eor.w	r3, r3, #1
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00e      	beq.n	80024fa <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 80024dc:	4b59      	ldr	r3, [pc, #356]	@ (8002644 <menu+0x1088>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	4b57      	ldr	r3, [pc, #348]	@ (8002644 <menu+0x1088>)
 80024e6:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80024e8:	4b56      	ldr	r3, [pc, #344]	@ (8002644 <menu+0x1088>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b03      	cmp	r3, #3
 80024ee:	d902      	bls.n	80024f6 <menu+0xf3a>
		   		kapi1Tip = 2;
 80024f0:	4b54      	ldr	r3, [pc, #336]	@ (8002644 <menu+0x1088>)
 80024f2:	2202      	movs	r2, #2
 80024f4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024f6:	f001 fda7 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024fa:	2108      	movs	r1, #8
 80024fc:	4853      	ldr	r0, [pc, #332]	@ (800264c <menu+0x1090>)
 80024fe:	f008 f8a5 	bl	800a64c <HAL_GPIO_ReadPin>
 8002502:	4603      	mov	r3, r0
 8002504:	2b01      	cmp	r3, #1
 8002506:	d10d      	bne.n	8002524 <menu+0xf68>
 8002508:	4b51      	ldr	r3, [pc, #324]	@ (8002650 <menu+0x1094>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	f083 0301 	eor.w	r3, r3, #1
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d006      	beq.n	8002524 <menu+0xf68>
			eepromData[8] = kapi1Tip;
 8002516:	4b4b      	ldr	r3, [pc, #300]	@ (8002644 <menu+0x1088>)
 8002518:	781a      	ldrb	r2, [r3, #0]
 800251a:	4b4e      	ldr	r3, [pc, #312]	@ (8002654 <menu+0x1098>)
 800251c:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800251e:	4b4e      	ldr	r3, [pc, #312]	@ (8002658 <menu+0x109c>)
 8002520:	2201      	movs	r2, #1
 8002522:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002524:	4b4d      	ldr	r3, [pc, #308]	@ (800265c <menu+0x10a0>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b0a      	cmp	r3, #10
 800252a:	d16c      	bne.n	8002606 <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 800252c:	4a4c      	ldr	r2, [pc, #304]	@ (8002660 <menu+0x10a4>)
 800252e:	2101      	movs	r1, #1
 8002530:	2001      	movs	r0, #1
 8002532:	f006 fd47 	bl	8008fc4 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002536:	4a4b      	ldr	r2, [pc, #300]	@ (8002664 <menu+0x10a8>)
 8002538:	2101      	movs	r1, #1
 800253a:	2002      	movs	r0, #2
 800253c:	f006 fd42 	bl	8008fc4 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 8002540:	4b49      	ldr	r3, [pc, #292]	@ (8002668 <menu+0x10ac>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	220a      	movs	r2, #10
 8002546:	4949      	ldr	r1, [pc, #292]	@ (800266c <menu+0x10b0>)
 8002548:	4618      	mov	r0, r3
 800254a:	f00b f9f1 	bl	800d930 <itoa>
		lcd_print(2,16,snum);
 800254e:	4a47      	ldr	r2, [pc, #284]	@ (800266c <menu+0x10b0>)
 8002550:	2110      	movs	r1, #16
 8002552:	2002      	movs	r0, #2
 8002554:	f006 fd36 	bl	8008fc4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002558:	2102      	movs	r1, #2
 800255a:	483c      	ldr	r0, [pc, #240]	@ (800264c <menu+0x1090>)
 800255c:	f008 f876 	bl	800a64c <HAL_GPIO_ReadPin>
 8002560:	4603      	mov	r3, r0
 8002562:	2b01      	cmp	r3, #1
 8002564:	d119      	bne.n	800259a <menu+0xfde>
 8002566:	4b3a      	ldr	r3, [pc, #232]	@ (8002650 <menu+0x1094>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	f083 0301 	eor.w	r3, r3, #1
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d012      	beq.n	800259a <menu+0xfde>
 8002574:	4b33      	ldr	r3, [pc, #204]	@ (8002644 <menu+0x1088>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10e      	bne.n	800259a <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 800257c:	4b3a      	ldr	r3, [pc, #232]	@ (8002668 <menu+0x10ac>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	3301      	adds	r3, #1
 8002582:	b2da      	uxtb	r2, r3
 8002584:	4b38      	ldr	r3, [pc, #224]	@ (8002668 <menu+0x10ac>)
 8002586:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002588:	4b37      	ldr	r3, [pc, #220]	@ (8002668 <menu+0x10ac>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b05      	cmp	r3, #5
 800258e:	d902      	bls.n	8002596 <menu+0xfda>
				kapi1AcSure = 0;
 8002590:	4b35      	ldr	r3, [pc, #212]	@ (8002668 <menu+0x10ac>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002596:	f001 fd57 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800259a:	2104      	movs	r1, #4
 800259c:	482b      	ldr	r0, [pc, #172]	@ (800264c <menu+0x1090>)
 800259e:	f008 f855 	bl	800a64c <HAL_GPIO_ReadPin>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d119      	bne.n	80025dc <menu+0x1020>
 80025a8:	4b29      	ldr	r3, [pc, #164]	@ (8002650 <menu+0x1094>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	f083 0301 	eor.w	r3, r3, #1
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d012      	beq.n	80025dc <menu+0x1020>
 80025b6:	4b23      	ldr	r3, [pc, #140]	@ (8002644 <menu+0x1088>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10e      	bne.n	80025dc <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 80025be:	4b2a      	ldr	r3, [pc, #168]	@ (8002668 <menu+0x10ac>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4b28      	ldr	r3, [pc, #160]	@ (8002668 <menu+0x10ac>)
 80025c8:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80025ca:	4b27      	ldr	r3, [pc, #156]	@ (8002668 <menu+0x10ac>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d902      	bls.n	80025d8 <menu+0x101c>
		   		kapi1AcSure = 5;
 80025d2:	4b25      	ldr	r3, [pc, #148]	@ (8002668 <menu+0x10ac>)
 80025d4:	2205      	movs	r2, #5
 80025d6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025d8:	f001 fd36 	bl	8004048 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025dc:	2108      	movs	r1, #8
 80025de:	481b      	ldr	r0, [pc, #108]	@ (800264c <menu+0x1090>)
 80025e0:	f008 f834 	bl	800a64c <HAL_GPIO_ReadPin>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d10d      	bne.n	8002606 <menu+0x104a>
 80025ea:	4b19      	ldr	r3, [pc, #100]	@ (8002650 <menu+0x1094>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	f083 0301 	eor.w	r3, r3, #1
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d006      	beq.n	8002606 <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 80025f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002668 <menu+0x10ac>)
 80025fa:	781a      	ldrb	r2, [r3, #0]
 80025fc:	4b15      	ldr	r3, [pc, #84]	@ (8002654 <menu+0x1098>)
 80025fe:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002600:	4b15      	ldr	r3, [pc, #84]	@ (8002658 <menu+0x109c>)
 8002602:	2201      	movs	r2, #1
 8002604:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002606:	4b15      	ldr	r3, [pc, #84]	@ (800265c <menu+0x10a0>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b0b      	cmp	r3, #11
 800260c:	f040 8090 	bne.w	8002730 <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 8002610:	4a17      	ldr	r2, [pc, #92]	@ (8002670 <menu+0x10b4>)
 8002612:	2101      	movs	r1, #1
 8002614:	2001      	movs	r0, #1
 8002616:	f006 fcd5 	bl	8008fc4 <lcd_print>

		if(kapi2Tip == 0) {
 800261a:	4b16      	ldr	r3, [pc, #88]	@ (8002674 <menu+0x10b8>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d105      	bne.n	800262e <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 8002622:	4a15      	ldr	r2, [pc, #84]	@ (8002678 <menu+0x10bc>)
 8002624:	2101      	movs	r1, #1
 8002626:	2002      	movs	r0, #2
 8002628:	f006 fccc 	bl	8008fc4 <lcd_print>
 800262c:	e031      	b.n	8002692 <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 800262e:	4b11      	ldr	r3, [pc, #68]	@ (8002674 <menu+0x10b8>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d124      	bne.n	8002680 <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 8002636:	4a11      	ldr	r2, [pc, #68]	@ (800267c <menu+0x10c0>)
 8002638:	2101      	movs	r1, #1
 800263a:	2002      	movs	r0, #2
 800263c:	f006 fcc2 	bl	8008fc4 <lcd_print>
 8002640:	e027      	b.n	8002692 <menu+0x10d6>
 8002642:	bf00      	nop
 8002644:	200014c5 	.word	0x200014c5
 8002648:	20000114 	.word	0x20000114
 800264c:	40010800 	.word	0x40010800
 8002650:	200014eb 	.word	0x200014eb
 8002654:	20000fec 	.word	0x20000fec
 8002658:	200014e8 	.word	0x200014e8
 800265c:	200014bc 	.word	0x200014bc
 8002660:	200018b4 	.word	0x200018b4
 8002664:	200018c8 	.word	0x200018c8
 8002668:	200014d5 	.word	0x200014d5
 800266c:	2000105c 	.word	0x2000105c
 8002670:	200018dc 	.word	0x200018dc
 8002674:	200014c6 	.word	0x200014c6
 8002678:	20000100 	.word	0x20000100
 800267c:	200018a0 	.word	0x200018a0
		} else if(kapi2Tip == 2) {
 8002680:	4b73      	ldr	r3, [pc, #460]	@ (8002850 <menu+0x1294>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d104      	bne.n	8002692 <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 8002688:	4a72      	ldr	r2, [pc, #456]	@ (8002854 <menu+0x1298>)
 800268a:	2101      	movs	r1, #1
 800268c:	2002      	movs	r0, #2
 800268e:	f006 fc99 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002692:	2102      	movs	r1, #2
 8002694:	4870      	ldr	r0, [pc, #448]	@ (8002858 <menu+0x129c>)
 8002696:	f007 ffd9 	bl	800a64c <HAL_GPIO_ReadPin>
 800269a:	4603      	mov	r3, r0
 800269c:	2b01      	cmp	r3, #1
 800269e:	d115      	bne.n	80026cc <menu+0x1110>
 80026a0:	4b6e      	ldr	r3, [pc, #440]	@ (800285c <menu+0x12a0>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	f083 0301 	eor.w	r3, r3, #1
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00e      	beq.n	80026cc <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 80026ae:	4b68      	ldr	r3, [pc, #416]	@ (8002850 <menu+0x1294>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	3301      	adds	r3, #1
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4b66      	ldr	r3, [pc, #408]	@ (8002850 <menu+0x1294>)
 80026b8:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80026ba:	4b65      	ldr	r3, [pc, #404]	@ (8002850 <menu+0x1294>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d902      	bls.n	80026c8 <menu+0x110c>
				kapi2Tip = 0;
 80026c2:	4b63      	ldr	r3, [pc, #396]	@ (8002850 <menu+0x1294>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026c8:	f001 fcbe 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026cc:	2104      	movs	r1, #4
 80026ce:	4862      	ldr	r0, [pc, #392]	@ (8002858 <menu+0x129c>)
 80026d0:	f007 ffbc 	bl	800a64c <HAL_GPIO_ReadPin>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d115      	bne.n	8002706 <menu+0x114a>
 80026da:	4b60      	ldr	r3, [pc, #384]	@ (800285c <menu+0x12a0>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	f083 0301 	eor.w	r3, r3, #1
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00e      	beq.n	8002706 <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 80026e8:	4b59      	ldr	r3, [pc, #356]	@ (8002850 <menu+0x1294>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	4b57      	ldr	r3, [pc, #348]	@ (8002850 <menu+0x1294>)
 80026f2:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 80026f4:	4b56      	ldr	r3, [pc, #344]	@ (8002850 <menu+0x1294>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d902      	bls.n	8002702 <menu+0x1146>
		   		kapi2Tip = 2;
 80026fc:	4b54      	ldr	r3, [pc, #336]	@ (8002850 <menu+0x1294>)
 80026fe:	2202      	movs	r2, #2
 8002700:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002702:	f001 fca1 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002706:	2108      	movs	r1, #8
 8002708:	4853      	ldr	r0, [pc, #332]	@ (8002858 <menu+0x129c>)
 800270a:	f007 ff9f 	bl	800a64c <HAL_GPIO_ReadPin>
 800270e:	4603      	mov	r3, r0
 8002710:	2b01      	cmp	r3, #1
 8002712:	d10d      	bne.n	8002730 <menu+0x1174>
 8002714:	4b51      	ldr	r3, [pc, #324]	@ (800285c <menu+0x12a0>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	f083 0301 	eor.w	r3, r3, #1
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	d006      	beq.n	8002730 <menu+0x1174>
			eepromData[10] = kapi2Tip;
 8002722:	4b4b      	ldr	r3, [pc, #300]	@ (8002850 <menu+0x1294>)
 8002724:	781a      	ldrb	r2, [r3, #0]
 8002726:	4b4e      	ldr	r3, [pc, #312]	@ (8002860 <menu+0x12a4>)
 8002728:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 800272a:	4b4e      	ldr	r3, [pc, #312]	@ (8002864 <menu+0x12a8>)
 800272c:	2201      	movs	r2, #1
 800272e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002730:	4b4d      	ldr	r3, [pc, #308]	@ (8002868 <menu+0x12ac>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b0c      	cmp	r3, #12
 8002736:	d16c      	bne.n	8002812 <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 8002738:	4a4c      	ldr	r2, [pc, #304]	@ (800286c <menu+0x12b0>)
 800273a:	2101      	movs	r1, #1
 800273c:	2001      	movs	r0, #1
 800273e:	f006 fc41 	bl	8008fc4 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002742:	4a4b      	ldr	r2, [pc, #300]	@ (8002870 <menu+0x12b4>)
 8002744:	2101      	movs	r1, #1
 8002746:	2002      	movs	r0, #2
 8002748:	f006 fc3c 	bl	8008fc4 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 800274c:	4b49      	ldr	r3, [pc, #292]	@ (8002874 <menu+0x12b8>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	220a      	movs	r2, #10
 8002752:	4949      	ldr	r1, [pc, #292]	@ (8002878 <menu+0x12bc>)
 8002754:	4618      	mov	r0, r3
 8002756:	f00b f8eb 	bl	800d930 <itoa>
		lcd_print(2,16,snum);
 800275a:	4a47      	ldr	r2, [pc, #284]	@ (8002878 <menu+0x12bc>)
 800275c:	2110      	movs	r1, #16
 800275e:	2002      	movs	r0, #2
 8002760:	f006 fc30 	bl	8008fc4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002764:	2102      	movs	r1, #2
 8002766:	483c      	ldr	r0, [pc, #240]	@ (8002858 <menu+0x129c>)
 8002768:	f007 ff70 	bl	800a64c <HAL_GPIO_ReadPin>
 800276c:	4603      	mov	r3, r0
 800276e:	2b01      	cmp	r3, #1
 8002770:	d119      	bne.n	80027a6 <menu+0x11ea>
 8002772:	4b3a      	ldr	r3, [pc, #232]	@ (800285c <menu+0x12a0>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	f083 0301 	eor.w	r3, r3, #1
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d012      	beq.n	80027a6 <menu+0x11ea>
 8002780:	4b33      	ldr	r3, [pc, #204]	@ (8002850 <menu+0x1294>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d10e      	bne.n	80027a6 <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 8002788:	4b3a      	ldr	r3, [pc, #232]	@ (8002874 <menu+0x12b8>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	b2da      	uxtb	r2, r3
 8002790:	4b38      	ldr	r3, [pc, #224]	@ (8002874 <menu+0x12b8>)
 8002792:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002794:	4b37      	ldr	r3, [pc, #220]	@ (8002874 <menu+0x12b8>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b05      	cmp	r3, #5
 800279a:	d902      	bls.n	80027a2 <menu+0x11e6>
				kapi2AcSure = 0;
 800279c:	4b35      	ldr	r3, [pc, #212]	@ (8002874 <menu+0x12b8>)
 800279e:	2200      	movs	r2, #0
 80027a0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027a2:	f001 fc51 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 80027a6:	2104      	movs	r1, #4
 80027a8:	482b      	ldr	r0, [pc, #172]	@ (8002858 <menu+0x129c>)
 80027aa:	f007 ff4f 	bl	800a64c <HAL_GPIO_ReadPin>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d119      	bne.n	80027e8 <menu+0x122c>
 80027b4:	4b29      	ldr	r3, [pc, #164]	@ (800285c <menu+0x12a0>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	f083 0301 	eor.w	r3, r3, #1
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d012      	beq.n	80027e8 <menu+0x122c>
 80027c2:	4b23      	ldr	r3, [pc, #140]	@ (8002850 <menu+0x1294>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10e      	bne.n	80027e8 <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 80027ca:	4b2a      	ldr	r3, [pc, #168]	@ (8002874 <menu+0x12b8>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	4b28      	ldr	r3, [pc, #160]	@ (8002874 <menu+0x12b8>)
 80027d4:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 80027d6:	4b27      	ldr	r3, [pc, #156]	@ (8002874 <menu+0x12b8>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b06      	cmp	r3, #6
 80027dc:	d902      	bls.n	80027e4 <menu+0x1228>
		   		kapi2AcSure = 5;
 80027de:	4b25      	ldr	r3, [pc, #148]	@ (8002874 <menu+0x12b8>)
 80027e0:	2205      	movs	r2, #5
 80027e2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027e4:	f001 fc30 	bl	8004048 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027e8:	2108      	movs	r1, #8
 80027ea:	481b      	ldr	r0, [pc, #108]	@ (8002858 <menu+0x129c>)
 80027ec:	f007 ff2e 	bl	800a64c <HAL_GPIO_ReadPin>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d10d      	bne.n	8002812 <menu+0x1256>
 80027f6:	4b19      	ldr	r3, [pc, #100]	@ (800285c <menu+0x12a0>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	f083 0301 	eor.w	r3, r3, #1
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b00      	cmp	r3, #0
 8002802:	d006      	beq.n	8002812 <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 8002804:	4b1b      	ldr	r3, [pc, #108]	@ (8002874 <menu+0x12b8>)
 8002806:	781a      	ldrb	r2, [r3, #0]
 8002808:	4b15      	ldr	r3, [pc, #84]	@ (8002860 <menu+0x12a4>)
 800280a:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 800280c:	4b15      	ldr	r3, [pc, #84]	@ (8002864 <menu+0x12a8>)
 800280e:	2201      	movs	r2, #1
 8002810:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002812:	4b15      	ldr	r3, [pc, #84]	@ (8002868 <menu+0x12ac>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b0d      	cmp	r3, #13
 8002818:	f040 8090 	bne.w	800293c <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 800281c:	4a17      	ldr	r2, [pc, #92]	@ (800287c <menu+0x12c0>)
 800281e:	2101      	movs	r1, #1
 8002820:	2001      	movs	r0, #1
 8002822:	f006 fbcf 	bl	8008fc4 <lcd_print>

		if(kapitablaTip == 0) {
 8002826:	4b16      	ldr	r3, [pc, #88]	@ (8002880 <menu+0x12c4>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d105      	bne.n	800283a <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 800282e:	4a15      	ldr	r2, [pc, #84]	@ (8002884 <menu+0x12c8>)
 8002830:	2101      	movs	r1, #1
 8002832:	2002      	movs	r0, #2
 8002834:	f006 fbc6 	bl	8008fc4 <lcd_print>
 8002838:	e031      	b.n	800289e <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 800283a:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <menu+0x12c4>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d124      	bne.n	800288c <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 8002842:	4a11      	ldr	r2, [pc, #68]	@ (8002888 <menu+0x12cc>)
 8002844:	2101      	movs	r1, #1
 8002846:	2002      	movs	r0, #2
 8002848:	f006 fbbc 	bl	8008fc4 <lcd_print>
 800284c:	e027      	b.n	800289e <menu+0x12e2>
 800284e:	bf00      	nop
 8002850:	200014c6 	.word	0x200014c6
 8002854:	20000114 	.word	0x20000114
 8002858:	40010800 	.word	0x40010800
 800285c:	200014eb 	.word	0x200014eb
 8002860:	20000fec 	.word	0x20000fec
 8002864:	200014e8 	.word	0x200014e8
 8002868:	200014bc 	.word	0x200014bc
 800286c:	200018f0 	.word	0x200018f0
 8002870:	200018c8 	.word	0x200018c8
 8002874:	200014d6 	.word	0x200014d6
 8002878:	2000105c 	.word	0x2000105c
 800287c:	20001904 	.word	0x20001904
 8002880:	200014c7 	.word	0x200014c7
 8002884:	20000100 	.word	0x20000100
 8002888:	200018a0 	.word	0x200018a0
		} else if(kapitablaTip == 2) {
 800288c:	4b3f      	ldr	r3, [pc, #252]	@ (800298c <menu+0x13d0>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d104      	bne.n	800289e <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 8002894:	4a3e      	ldr	r2, [pc, #248]	@ (8002990 <menu+0x13d4>)
 8002896:	2101      	movs	r1, #1
 8002898:	2002      	movs	r0, #2
 800289a:	f006 fb93 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800289e:	2102      	movs	r1, #2
 80028a0:	483c      	ldr	r0, [pc, #240]	@ (8002994 <menu+0x13d8>)
 80028a2:	f007 fed3 	bl	800a64c <HAL_GPIO_ReadPin>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d115      	bne.n	80028d8 <menu+0x131c>
 80028ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002998 <menu+0x13dc>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	f083 0301 	eor.w	r3, r3, #1
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00e      	beq.n	80028d8 <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 80028ba:	4b34      	ldr	r3, [pc, #208]	@ (800298c <menu+0x13d0>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	3301      	adds	r3, #1
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4b32      	ldr	r3, [pc, #200]	@ (800298c <menu+0x13d0>)
 80028c4:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 80028c6:	4b31      	ldr	r3, [pc, #196]	@ (800298c <menu+0x13d0>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d902      	bls.n	80028d4 <menu+0x1318>
				kapitablaTip = 0;
 80028ce:	4b2f      	ldr	r3, [pc, #188]	@ (800298c <menu+0x13d0>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028d4:	f001 fbb8 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028d8:	2104      	movs	r1, #4
 80028da:	482e      	ldr	r0, [pc, #184]	@ (8002994 <menu+0x13d8>)
 80028dc:	f007 feb6 	bl	800a64c <HAL_GPIO_ReadPin>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d115      	bne.n	8002912 <menu+0x1356>
 80028e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002998 <menu+0x13dc>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	f083 0301 	eor.w	r3, r3, #1
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00e      	beq.n	8002912 <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 80028f4:	4b25      	ldr	r3, [pc, #148]	@ (800298c <menu+0x13d0>)
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	4b23      	ldr	r3, [pc, #140]	@ (800298c <menu+0x13d0>)
 80028fe:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002900:	4b22      	ldr	r3, [pc, #136]	@ (800298c <menu+0x13d0>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b03      	cmp	r3, #3
 8002906:	d902      	bls.n	800290e <menu+0x1352>
		   		kapitablaTip = 2;
 8002908:	4b20      	ldr	r3, [pc, #128]	@ (800298c <menu+0x13d0>)
 800290a:	2202      	movs	r2, #2
 800290c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800290e:	f001 fb9b 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002912:	2108      	movs	r1, #8
 8002914:	481f      	ldr	r0, [pc, #124]	@ (8002994 <menu+0x13d8>)
 8002916:	f007 fe99 	bl	800a64c <HAL_GPIO_ReadPin>
 800291a:	4603      	mov	r3, r0
 800291c:	2b01      	cmp	r3, #1
 800291e:	d10d      	bne.n	800293c <menu+0x1380>
 8002920:	4b1d      	ldr	r3, [pc, #116]	@ (8002998 <menu+0x13dc>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	f083 0301 	eor.w	r3, r3, #1
 8002928:	b2db      	uxtb	r3, r3
 800292a:	2b00      	cmp	r3, #0
 800292c:	d006      	beq.n	800293c <menu+0x1380>
			eepromData[12] = kapitablaTip;
 800292e:	4b17      	ldr	r3, [pc, #92]	@ (800298c <menu+0x13d0>)
 8002930:	781a      	ldrb	r2, [r3, #0]
 8002932:	4b1a      	ldr	r3, [pc, #104]	@ (800299c <menu+0x13e0>)
 8002934:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002936:	4b1a      	ldr	r3, [pc, #104]	@ (80029a0 <menu+0x13e4>)
 8002938:	2201      	movs	r2, #1
 800293a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 800293c:	4b19      	ldr	r3, [pc, #100]	@ (80029a4 <menu+0x13e8>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b0e      	cmp	r3, #14
 8002942:	f040 80a3 	bne.w	8002a8c <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 8002946:	4a18      	ldr	r2, [pc, #96]	@ (80029a8 <menu+0x13ec>)
 8002948:	2101      	movs	r1, #1
 800294a:	2001      	movs	r0, #1
 800294c:	f006 fb3a 	bl	8008fc4 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 8002950:	4b16      	ldr	r3, [pc, #88]	@ (80029ac <menu+0x13f0>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d105      	bne.n	8002964 <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 8002958:	4a15      	ldr	r2, [pc, #84]	@ (80029b0 <menu+0x13f4>)
 800295a:	2101      	movs	r1, #1
 800295c:	2002      	movs	r0, #2
 800295e:	f006 fb31 	bl	8008fc4 <lcd_print>
 8002962:	e034      	b.n	80029ce <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 8002964:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <menu+0x13f0>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d105      	bne.n	8002978 <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 800296c:	4a11      	ldr	r2, [pc, #68]	@ (80029b4 <menu+0x13f8>)
 800296e:	2101      	movs	r1, #1
 8002970:	2002      	movs	r0, #2
 8002972:	f006 fb27 	bl	8008fc4 <lcd_print>
 8002976:	e02a      	b.n	80029ce <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 8002978:	4b0c      	ldr	r3, [pc, #48]	@ (80029ac <menu+0x13f0>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b02      	cmp	r3, #2
 800297e:	d11d      	bne.n	80029bc <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 8002980:	4a0d      	ldr	r2, [pc, #52]	@ (80029b8 <menu+0x13fc>)
 8002982:	2101      	movs	r1, #1
 8002984:	2002      	movs	r0, #2
 8002986:	f006 fb1d 	bl	8008fc4 <lcd_print>
 800298a:	e020      	b.n	80029ce <menu+0x1412>
 800298c:	200014c7 	.word	0x200014c7
 8002990:	20000114 	.word	0x20000114
 8002994:	40010800 	.word	0x40010800
 8002998:	200014eb 	.word	0x200014eb
 800299c:	20000fec 	.word	0x20000fec
 80029a0:	200014e8 	.word	0x200014e8
 80029a4:	200014bc 	.word	0x200014bc
 80029a8:	20001918 	.word	0x20001918
 80029ac:	200014c9 	.word	0x200014c9
 80029b0:	2000192c 	.word	0x2000192c
 80029b4:	20001940 	.word	0x20001940
 80029b8:	20001954 	.word	0x20001954
		} else if(kapiTablaAcKonum == 3) {
 80029bc:	4b76      	ldr	r3, [pc, #472]	@ (8002b98 <menu+0x15dc>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d104      	bne.n	80029ce <menu+0x1412>
			lcd_print(2, 1, pasifText);
 80029c4:	4a75      	ldr	r2, [pc, #468]	@ (8002b9c <menu+0x15e0>)
 80029c6:	2101      	movs	r1, #1
 80029c8:	2002      	movs	r0, #2
 80029ca:	f006 fafb 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029ce:	2102      	movs	r1, #2
 80029d0:	4873      	ldr	r0, [pc, #460]	@ (8002ba0 <menu+0x15e4>)
 80029d2:	f007 fe3b 	bl	800a64c <HAL_GPIO_ReadPin>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d115      	bne.n	8002a08 <menu+0x144c>
 80029dc:	4b71      	ldr	r3, [pc, #452]	@ (8002ba4 <menu+0x15e8>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	f083 0301 	eor.w	r3, r3, #1
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00e      	beq.n	8002a08 <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 80029ea:	4b6b      	ldr	r3, [pc, #428]	@ (8002b98 <menu+0x15dc>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	3301      	adds	r3, #1
 80029f0:	b2da      	uxtb	r2, r3
 80029f2:	4b69      	ldr	r3, [pc, #420]	@ (8002b98 <menu+0x15dc>)
 80029f4:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 80029f6:	4b68      	ldr	r3, [pc, #416]	@ (8002b98 <menu+0x15dc>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d902      	bls.n	8002a04 <menu+0x1448>
				kapiTablaAcKonum = 0;
 80029fe:	4b66      	ldr	r3, [pc, #408]	@ (8002b98 <menu+0x15dc>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a04:	f001 fb20 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a08:	2104      	movs	r1, #4
 8002a0a:	4865      	ldr	r0, [pc, #404]	@ (8002ba0 <menu+0x15e4>)
 8002a0c:	f007 fe1e 	bl	800a64c <HAL_GPIO_ReadPin>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d115      	bne.n	8002a42 <menu+0x1486>
 8002a16:	4b63      	ldr	r3, [pc, #396]	@ (8002ba4 <menu+0x15e8>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	f083 0301 	eor.w	r3, r3, #1
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00e      	beq.n	8002a42 <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002a24:	4b5c      	ldr	r3, [pc, #368]	@ (8002b98 <menu+0x15dc>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	4b5a      	ldr	r3, [pc, #360]	@ (8002b98 <menu+0x15dc>)
 8002a2e:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002a30:	4b59      	ldr	r3, [pc, #356]	@ (8002b98 <menu+0x15dc>)
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b03      	cmp	r3, #3
 8002a36:	d902      	bls.n	8002a3e <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 8002a38:	4b57      	ldr	r3, [pc, #348]	@ (8002b98 <menu+0x15dc>)
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a3e:	f001 fb03 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a42:	2108      	movs	r1, #8
 8002a44:	4856      	ldr	r0, [pc, #344]	@ (8002ba0 <menu+0x15e4>)
 8002a46:	f007 fe01 	bl	800a64c <HAL_GPIO_ReadPin>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d11d      	bne.n	8002a8c <menu+0x14d0>
 8002a50:	4b54      	ldr	r3, [pc, #336]	@ (8002ba4 <menu+0x15e8>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	f083 0301 	eor.w	r3, r3, #1
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d016      	beq.n	8002a8c <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 8002a5e:	4b4e      	ldr	r3, [pc, #312]	@ (8002b98 <menu+0x15dc>)
 8002a60:	781a      	ldrb	r2, [r3, #0]
 8002a62:	4b51      	ldr	r3, [pc, #324]	@ (8002ba8 <menu+0x15ec>)
 8002a64:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002a68:	4b4b      	ldr	r3, [pc, #300]	@ (8002b98 <menu+0x15dc>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d003      	beq.n	8002a78 <menu+0x14bc>
 8002a70:	4b49      	ldr	r3, [pc, #292]	@ (8002b98 <menu+0x15dc>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d106      	bne.n	8002a86 <menu+0x14ca>
				altLimit = 1;
 8002a78:	4b4c      	ldr	r3, [pc, #304]	@ (8002bac <menu+0x15f0>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002a7e:	4b4b      	ldr	r3, [pc, #300]	@ (8002bac <menu+0x15f0>)
 8002a80:	781a      	ldrb	r2, [r3, #0]
 8002a82:	4b49      	ldr	r3, [pc, #292]	@ (8002ba8 <menu+0x15ec>)
 8002a84:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002a86:	4b4a      	ldr	r3, [pc, #296]	@ (8002bb0 <menu+0x15f4>)
 8002a88:	2201      	movs	r2, #1
 8002a8a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002a8c:	4b49      	ldr	r3, [pc, #292]	@ (8002bb4 <menu+0x15f8>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b0f      	cmp	r3, #15
 8002a92:	d16c      	bne.n	8002b6e <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 8002a94:	4a48      	ldr	r2, [pc, #288]	@ (8002bb8 <menu+0x15fc>)
 8002a96:	2101      	movs	r1, #1
 8002a98:	2001      	movs	r0, #1
 8002a9a:	f006 fa93 	bl	8008fc4 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002a9e:	4a47      	ldr	r2, [pc, #284]	@ (8002bbc <menu+0x1600>)
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	2002      	movs	r0, #2
 8002aa4:	f006 fa8e 	bl	8008fc4 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002aa8:	4b45      	ldr	r3, [pc, #276]	@ (8002bc0 <menu+0x1604>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	220a      	movs	r2, #10
 8002aae:	4945      	ldr	r1, [pc, #276]	@ (8002bc4 <menu+0x1608>)
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f00a ff3d 	bl	800d930 <itoa>
		lcd_print(2,16,snum);
 8002ab6:	4a43      	ldr	r2, [pc, #268]	@ (8002bc4 <menu+0x1608>)
 8002ab8:	2110      	movs	r1, #16
 8002aba:	2002      	movs	r0, #2
 8002abc:	f006 fa82 	bl	8008fc4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002ac0:	2102      	movs	r1, #2
 8002ac2:	4837      	ldr	r0, [pc, #220]	@ (8002ba0 <menu+0x15e4>)
 8002ac4:	f007 fdc2 	bl	800a64c <HAL_GPIO_ReadPin>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d119      	bne.n	8002b02 <menu+0x1546>
 8002ace:	4b35      	ldr	r3, [pc, #212]	@ (8002ba4 <menu+0x15e8>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	f083 0301 	eor.w	r3, r3, #1
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d012      	beq.n	8002b02 <menu+0x1546>
 8002adc:	4b3a      	ldr	r3, [pc, #232]	@ (8002bc8 <menu+0x160c>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10e      	bne.n	8002b02 <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002ae4:	4b36      	ldr	r3, [pc, #216]	@ (8002bc0 <menu+0x1604>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	3301      	adds	r3, #1
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	4b34      	ldr	r3, [pc, #208]	@ (8002bc0 <menu+0x1604>)
 8002aee:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002af0:	4b33      	ldr	r3, [pc, #204]	@ (8002bc0 <menu+0x1604>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	d902      	bls.n	8002afe <menu+0x1542>
				kapiTablaAcSure = 0;
 8002af8:	4b31      	ldr	r3, [pc, #196]	@ (8002bc0 <menu+0x1604>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002afe:	f001 faa3 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002b02:	2104      	movs	r1, #4
 8002b04:	4826      	ldr	r0, [pc, #152]	@ (8002ba0 <menu+0x15e4>)
 8002b06:	f007 fda1 	bl	800a64c <HAL_GPIO_ReadPin>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d119      	bne.n	8002b44 <menu+0x1588>
 8002b10:	4b24      	ldr	r3, [pc, #144]	@ (8002ba4 <menu+0x15e8>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	f083 0301 	eor.w	r3, r3, #1
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d012      	beq.n	8002b44 <menu+0x1588>
 8002b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bc8 <menu+0x160c>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d10e      	bne.n	8002b44 <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002b26:	4b26      	ldr	r3, [pc, #152]	@ (8002bc0 <menu+0x1604>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	4b24      	ldr	r3, [pc, #144]	@ (8002bc0 <menu+0x1604>)
 8002b30:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002b32:	4b23      	ldr	r3, [pc, #140]	@ (8002bc0 <menu+0x1604>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b06      	cmp	r3, #6
 8002b38:	d902      	bls.n	8002b40 <menu+0x1584>
		   		kapiTablaAcSure = 5;
 8002b3a:	4b21      	ldr	r3, [pc, #132]	@ (8002bc0 <menu+0x1604>)
 8002b3c:	2205      	movs	r2, #5
 8002b3e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002b40:	f001 fa82 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b44:	2108      	movs	r1, #8
 8002b46:	4816      	ldr	r0, [pc, #88]	@ (8002ba0 <menu+0x15e4>)
 8002b48:	f007 fd80 	bl	800a64c <HAL_GPIO_ReadPin>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d10d      	bne.n	8002b6e <menu+0x15b2>
 8002b52:	4b14      	ldr	r3, [pc, #80]	@ (8002ba4 <menu+0x15e8>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	f083 0301 	eor.w	r3, r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d006      	beq.n	8002b6e <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 8002b60:	4b17      	ldr	r3, [pc, #92]	@ (8002bc0 <menu+0x1604>)
 8002b62:	781a      	ldrb	r2, [r3, #0]
 8002b64:	4b10      	ldr	r3, [pc, #64]	@ (8002ba8 <menu+0x15ec>)
 8002b66:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002b68:	4b11      	ldr	r3, [pc, #68]	@ (8002bb0 <menu+0x15f4>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002b6e:	4b11      	ldr	r3, [pc, #68]	@ (8002bb4 <menu+0x15f8>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	f040 8086 	bne.w	8002c84 <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002b78:	4a14      	ldr	r2, [pc, #80]	@ (8002bcc <menu+0x1610>)
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	2001      	movs	r0, #1
 8002b7e:	f006 fa21 	bl	8008fc4 <lcd_print>

		if(yukariYavasLimit == 0) {
 8002b82:	4b13      	ldr	r3, [pc, #76]	@ (8002bd0 <menu+0x1614>)
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d124      	bne.n	8002bd4 <menu+0x1618>
			lcd_print(2, 1, pasifText);
 8002b8a:	4a04      	ldr	r2, [pc, #16]	@ (8002b9c <menu+0x15e0>)
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	2002      	movs	r0, #2
 8002b90:	f006 fa18 	bl	8008fc4 <lcd_print>
 8002b94:	e027      	b.n	8002be6 <menu+0x162a>
 8002b96:	bf00      	nop
 8002b98:	200014c9 	.word	0x200014c9
 8002b9c:	2000179c 	.word	0x2000179c
 8002ba0:	40010800 	.word	0x40010800
 8002ba4:	200014eb 	.word	0x200014eb
 8002ba8:	20000fec 	.word	0x20000fec
 8002bac:	200014c2 	.word	0x200014c2
 8002bb0:	200014e8 	.word	0x200014e8
 8002bb4:	200014bc 	.word	0x200014bc
 8002bb8:	20001968 	.word	0x20001968
 8002bbc:	200018c8 	.word	0x200018c8
 8002bc0:	200014d7 	.word	0x200014d7
 8002bc4:	2000105c 	.word	0x2000105c
 8002bc8:	200014c7 	.word	0x200014c7
 8002bcc:	2000197c 	.word	0x2000197c
 8002bd0:	200014ca 	.word	0x200014ca
		} else if(yukariYavasLimit == 1) {
 8002bd4:	4b84      	ldr	r3, [pc, #528]	@ (8002de8 <menu+0x182c>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d104      	bne.n	8002be6 <menu+0x162a>
			lcd_print(2, 1, aktifText);
 8002bdc:	4a83      	ldr	r2, [pc, #524]	@ (8002dec <menu+0x1830>)
 8002bde:	2101      	movs	r1, #1
 8002be0:	2002      	movs	r0, #2
 8002be2:	f006 f9ef 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002be6:	2102      	movs	r1, #2
 8002be8:	4881      	ldr	r0, [pc, #516]	@ (8002df0 <menu+0x1834>)
 8002bea:	f007 fd2f 	bl	800a64c <HAL_GPIO_ReadPin>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d115      	bne.n	8002c20 <menu+0x1664>
 8002bf4:	4b7f      	ldr	r3, [pc, #508]	@ (8002df4 <menu+0x1838>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	f083 0301 	eor.w	r3, r3, #1
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00e      	beq.n	8002c20 <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002c02:	4b79      	ldr	r3, [pc, #484]	@ (8002de8 <menu+0x182c>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	3301      	adds	r3, #1
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	4b77      	ldr	r3, [pc, #476]	@ (8002de8 <menu+0x182c>)
 8002c0c:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002c0e:	4b76      	ldr	r3, [pc, #472]	@ (8002de8 <menu+0x182c>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d902      	bls.n	8002c1c <menu+0x1660>
				yukariYavasLimit = 0;
 8002c16:	4b74      	ldr	r3, [pc, #464]	@ (8002de8 <menu+0x182c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c1c:	f001 fa14 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c20:	2104      	movs	r1, #4
 8002c22:	4873      	ldr	r0, [pc, #460]	@ (8002df0 <menu+0x1834>)
 8002c24:	f007 fd12 	bl	800a64c <HAL_GPIO_ReadPin>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d115      	bne.n	8002c5a <menu+0x169e>
 8002c2e:	4b71      	ldr	r3, [pc, #452]	@ (8002df4 <menu+0x1838>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	f083 0301 	eor.w	r3, r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00e      	beq.n	8002c5a <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002c3c:	4b6a      	ldr	r3, [pc, #424]	@ (8002de8 <menu+0x182c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	4b68      	ldr	r3, [pc, #416]	@ (8002de8 <menu+0x182c>)
 8002c46:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002c48:	4b67      	ldr	r3, [pc, #412]	@ (8002de8 <menu+0x182c>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d002      	beq.n	8002c56 <menu+0x169a>
		   		yukariYavasLimit = 1;
 8002c50:	4b65      	ldr	r3, [pc, #404]	@ (8002de8 <menu+0x182c>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c56:	f001 f9f7 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c5a:	2108      	movs	r1, #8
 8002c5c:	4864      	ldr	r0, [pc, #400]	@ (8002df0 <menu+0x1834>)
 8002c5e:	f007 fcf5 	bl	800a64c <HAL_GPIO_ReadPin>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d10d      	bne.n	8002c84 <menu+0x16c8>
 8002c68:	4b62      	ldr	r3, [pc, #392]	@ (8002df4 <menu+0x1838>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	f083 0301 	eor.w	r3, r3, #1
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d006      	beq.n	8002c84 <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 8002c76:	4b5c      	ldr	r3, [pc, #368]	@ (8002de8 <menu+0x182c>)
 8002c78:	781a      	ldrb	r2, [r3, #0]
 8002c7a:	4b5f      	ldr	r3, [pc, #380]	@ (8002df8 <menu+0x183c>)
 8002c7c:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002c7e:	4b5f      	ldr	r3, [pc, #380]	@ (8002dfc <menu+0x1840>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002c84:	4b5e      	ldr	r3, [pc, #376]	@ (8002e00 <menu+0x1844>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b11      	cmp	r3, #17
 8002c8a:	f040 808b 	bne.w	8002da4 <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 8002c8e:	4a5d      	ldr	r2, [pc, #372]	@ (8002e04 <menu+0x1848>)
 8002c90:	2101      	movs	r1, #1
 8002c92:	2001      	movs	r0, #1
 8002c94:	f006 f996 	bl	8008fc4 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002c98:	4b5b      	ldr	r3, [pc, #364]	@ (8002e08 <menu+0x184c>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d105      	bne.n	8002cac <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 8002ca0:	4a5a      	ldr	r2, [pc, #360]	@ (8002e0c <menu+0x1850>)
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	2002      	movs	r0, #2
 8002ca6:	f006 f98d 	bl	8008fc4 <lcd_print>
 8002caa:	e012      	b.n	8002cd2 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 8002cac:	4b56      	ldr	r3, [pc, #344]	@ (8002e08 <menu+0x184c>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d105      	bne.n	8002cc0 <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 8002cb4:	4a56      	ldr	r2, [pc, #344]	@ (8002e10 <menu+0x1854>)
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	2002      	movs	r0, #2
 8002cba:	f006 f983 	bl	8008fc4 <lcd_print>
 8002cbe:	e008      	b.n	8002cd2 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 8002cc0:	4b51      	ldr	r3, [pc, #324]	@ (8002e08 <menu+0x184c>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d104      	bne.n	8002cd2 <menu+0x1716>
			lcd_print(2, 1, pasifText);
 8002cc8:	4a52      	ldr	r2, [pc, #328]	@ (8002e14 <menu+0x1858>)
 8002cca:	2101      	movs	r1, #1
 8002ccc:	2002      	movs	r0, #2
 8002cce:	f006 f979 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cd2:	2102      	movs	r1, #2
 8002cd4:	4846      	ldr	r0, [pc, #280]	@ (8002df0 <menu+0x1834>)
 8002cd6:	f007 fcb9 	bl	800a64c <HAL_GPIO_ReadPin>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d115      	bne.n	8002d0c <menu+0x1750>
 8002ce0:	4b44      	ldr	r3, [pc, #272]	@ (8002df4 <menu+0x1838>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	f083 0301 	eor.w	r3, r3, #1
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00e      	beq.n	8002d0c <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002cee:	4b46      	ldr	r3, [pc, #280]	@ (8002e08 <menu+0x184c>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	4b44      	ldr	r3, [pc, #272]	@ (8002e08 <menu+0x184c>)
 8002cf8:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002cfa:	4b43      	ldr	r3, [pc, #268]	@ (8002e08 <menu+0x184c>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d902      	bls.n	8002d08 <menu+0x174c>
				devirmeYuruyusSecim = 0;
 8002d02:	4b41      	ldr	r3, [pc, #260]	@ (8002e08 <menu+0x184c>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d08:	f001 f99e 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d0c:	2104      	movs	r1, #4
 8002d0e:	4838      	ldr	r0, [pc, #224]	@ (8002df0 <menu+0x1834>)
 8002d10:	f007 fc9c 	bl	800a64c <HAL_GPIO_ReadPin>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d115      	bne.n	8002d46 <menu+0x178a>
 8002d1a:	4b36      	ldr	r3, [pc, #216]	@ (8002df4 <menu+0x1838>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	f083 0301 	eor.w	r3, r3, #1
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00e      	beq.n	8002d46 <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002d28:	4b37      	ldr	r3, [pc, #220]	@ (8002e08 <menu+0x184c>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	4b35      	ldr	r3, [pc, #212]	@ (8002e08 <menu+0x184c>)
 8002d32:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002d34:	4b34      	ldr	r3, [pc, #208]	@ (8002e08 <menu+0x184c>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d902      	bls.n	8002d42 <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 8002d3c:	4b32      	ldr	r3, [pc, #200]	@ (8002e08 <menu+0x184c>)
 8002d3e:	2202      	movs	r2, #2
 8002d40:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d42:	f001 f981 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d46:	2108      	movs	r1, #8
 8002d48:	4829      	ldr	r0, [pc, #164]	@ (8002df0 <menu+0x1834>)
 8002d4a:	f007 fc7f 	bl	800a64c <HAL_GPIO_ReadPin>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d127      	bne.n	8002da4 <menu+0x17e8>
 8002d54:	4b27      	ldr	r3, [pc, #156]	@ (8002df4 <menu+0x1838>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	f083 0301 	eor.w	r3, r3, #1
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d020      	beq.n	8002da4 <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 8002d62:	4b29      	ldr	r3, [pc, #164]	@ (8002e08 <menu+0x184c>)
 8002d64:	781a      	ldrb	r2, [r3, #0]
 8002d66:	4b24      	ldr	r3, [pc, #144]	@ (8002df8 <menu+0x183c>)
 8002d68:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002d6a:	4b27      	ldr	r3, [pc, #156]	@ (8002e08 <menu+0x184c>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d003      	beq.n	8002d7a <menu+0x17be>
 8002d72:	4b25      	ldr	r3, [pc, #148]	@ (8002e08 <menu+0x184c>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d106      	bne.n	8002d88 <menu+0x17cc>
				calismaSekli = 0;
 8002d7a:	4b27      	ldr	r3, [pc, #156]	@ (8002e18 <menu+0x185c>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002d80:	4b25      	ldr	r3, [pc, #148]	@ (8002e18 <menu+0x185c>)
 8002d82:	781a      	ldrb	r2, [r3, #0]
 8002d84:	4b1c      	ldr	r3, [pc, #112]	@ (8002df8 <menu+0x183c>)
 8002d86:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002d88:	4b1f      	ldr	r3, [pc, #124]	@ (8002e08 <menu+0x184c>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d106      	bne.n	8002d9e <menu+0x17e2>
				devirmeSilindirTipi = 1;
 8002d90:	4b22      	ldr	r3, [pc, #136]	@ (8002e1c <menu+0x1860>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002d96:	4b21      	ldr	r3, [pc, #132]	@ (8002e1c <menu+0x1860>)
 8002d98:	781a      	ldrb	r2, [r3, #0]
 8002d9a:	4b17      	ldr	r3, [pc, #92]	@ (8002df8 <menu+0x183c>)
 8002d9c:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002d9e:	4b17      	ldr	r3, [pc, #92]	@ (8002dfc <menu+0x1840>)
 8002da0:	2201      	movs	r2, #1
 8002da2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002da4:	4b16      	ldr	r3, [pc, #88]	@ (8002e00 <menu+0x1844>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b12      	cmp	r3, #18
 8002daa:	f040 8097 	bne.w	8002edc <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 8002dae:	4b16      	ldr	r3, [pc, #88]	@ (8002e08 <menu+0x184c>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d105      	bne.n	8002dc2 <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 8002db6:	4a1a      	ldr	r2, [pc, #104]	@ (8002e20 <menu+0x1864>)
 8002db8:	2101      	movs	r1, #1
 8002dba:	2001      	movs	r0, #1
 8002dbc:	f006 f902 	bl	8008fc4 <lcd_print>
 8002dc0:	e008      	b.n	8002dd4 <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 8002dc2:	4b11      	ldr	r3, [pc, #68]	@ (8002e08 <menu+0x184c>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d104      	bne.n	8002dd4 <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 8002dca:	4a16      	ldr	r2, [pc, #88]	@ (8002e24 <menu+0x1868>)
 8002dcc:	2101      	movs	r1, #1
 8002dce:	2001      	movs	r0, #1
 8002dd0:	f006 f8f8 	bl	8008fc4 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002dd4:	4b14      	ldr	r3, [pc, #80]	@ (8002e28 <menu+0x186c>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d127      	bne.n	8002e2c <menu+0x1870>
			lcd_print(2, 1, pasifText);
 8002ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8002e14 <menu+0x1858>)
 8002dde:	2101      	movs	r1, #1
 8002de0:	2002      	movs	r0, #2
 8002de2:	f006 f8ef 	bl	8008fc4 <lcd_print>
 8002de6:	e02a      	b.n	8002e3e <menu+0x1882>
 8002de8:	200014ca 	.word	0x200014ca
 8002dec:	200017b0 	.word	0x200017b0
 8002df0:	40010800 	.word	0x40010800
 8002df4:	200014eb 	.word	0x200014eb
 8002df8:	20000fec 	.word	0x20000fec
 8002dfc:	200014e8 	.word	0x200014e8
 8002e00:	200014bc 	.word	0x200014bc
 8002e04:	20001990 	.word	0x20001990
 8002e08:	200014cb 	.word	0x200014cb
 8002e0c:	200019a4 	.word	0x200019a4
 8002e10:	200019b8 	.word	0x200019b8
 8002e14:	2000179c 	.word	0x2000179c
 8002e18:	200014bd 	.word	0x200014bd
 8002e1c:	200014ce 	.word	0x200014ce
 8002e20:	200019cc 	.word	0x200019cc
 8002e24:	200019e0 	.word	0x200019e0
 8002e28:	200014cc 	.word	0x200014cc
		} else if(devirmeYukariIleriLimit == 1){
 8002e2c:	4b79      	ldr	r3, [pc, #484]	@ (8003014 <menu+0x1a58>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d104      	bne.n	8002e3e <menu+0x1882>
			lcd_print(2, 1, aktifText);
 8002e34:	4a78      	ldr	r2, [pc, #480]	@ (8003018 <menu+0x1a5c>)
 8002e36:	2101      	movs	r1, #1
 8002e38:	2002      	movs	r0, #2
 8002e3a:	f006 f8c3 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e3e:	2102      	movs	r1, #2
 8002e40:	4876      	ldr	r0, [pc, #472]	@ (800301c <menu+0x1a60>)
 8002e42:	f007 fc03 	bl	800a64c <HAL_GPIO_ReadPin>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d115      	bne.n	8002e78 <menu+0x18bc>
 8002e4c:	4b74      	ldr	r3, [pc, #464]	@ (8003020 <menu+0x1a64>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	f083 0301 	eor.w	r3, r3, #1
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00e      	beq.n	8002e78 <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002e5a:	4b6e      	ldr	r3, [pc, #440]	@ (8003014 <menu+0x1a58>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	3301      	adds	r3, #1
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	4b6c      	ldr	r3, [pc, #432]	@ (8003014 <menu+0x1a58>)
 8002e64:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002e66:	4b6b      	ldr	r3, [pc, #428]	@ (8003014 <menu+0x1a58>)
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d902      	bls.n	8002e74 <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 8002e6e:	4b69      	ldr	r3, [pc, #420]	@ (8003014 <menu+0x1a58>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e74:	f001 f8e8 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e78:	2104      	movs	r1, #4
 8002e7a:	4868      	ldr	r0, [pc, #416]	@ (800301c <menu+0x1a60>)
 8002e7c:	f007 fbe6 	bl	800a64c <HAL_GPIO_ReadPin>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d115      	bne.n	8002eb2 <menu+0x18f6>
 8002e86:	4b66      	ldr	r3, [pc, #408]	@ (8003020 <menu+0x1a64>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	f083 0301 	eor.w	r3, r3, #1
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00e      	beq.n	8002eb2 <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002e94:	4b5f      	ldr	r3, [pc, #380]	@ (8003014 <menu+0x1a58>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b2da      	uxtb	r2, r3
 8002e9c:	4b5d      	ldr	r3, [pc, #372]	@ (8003014 <menu+0x1a58>)
 8002e9e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002ea0:	4b5c      	ldr	r3, [pc, #368]	@ (8003014 <menu+0x1a58>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d002      	beq.n	8002eae <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 8002ea8:	4b5a      	ldr	r3, [pc, #360]	@ (8003014 <menu+0x1a58>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002eae:	f001 f8cb 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002eb2:	2108      	movs	r1, #8
 8002eb4:	4859      	ldr	r0, [pc, #356]	@ (800301c <menu+0x1a60>)
 8002eb6:	f007 fbc9 	bl	800a64c <HAL_GPIO_ReadPin>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d10d      	bne.n	8002edc <menu+0x1920>
 8002ec0:	4b57      	ldr	r3, [pc, #348]	@ (8003020 <menu+0x1a64>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	f083 0301 	eor.w	r3, r3, #1
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d006      	beq.n	8002edc <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 8002ece:	4b51      	ldr	r3, [pc, #324]	@ (8003014 <menu+0x1a58>)
 8002ed0:	781a      	ldrb	r2, [r3, #0]
 8002ed2:	4b54      	ldr	r3, [pc, #336]	@ (8003024 <menu+0x1a68>)
 8002ed4:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002ed6:	4b54      	ldr	r3, [pc, #336]	@ (8003028 <menu+0x1a6c>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002edc:	4b53      	ldr	r3, [pc, #332]	@ (800302c <menu+0x1a70>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b13      	cmp	r3, #19
 8002ee2:	d174      	bne.n	8002fce <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 8002ee4:	4b52      	ldr	r3, [pc, #328]	@ (8003030 <menu+0x1a74>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d105      	bne.n	8002ef8 <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002eec:	4a51      	ldr	r2, [pc, #324]	@ (8003034 <menu+0x1a78>)
 8002eee:	2101      	movs	r1, #1
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	f006 f867 	bl	8008fc4 <lcd_print>
 8002ef6:	e008      	b.n	8002f0a <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 8002ef8:	4b4d      	ldr	r3, [pc, #308]	@ (8003030 <menu+0x1a74>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d104      	bne.n	8002f0a <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002f00:	4a4d      	ldr	r2, [pc, #308]	@ (8003038 <menu+0x1a7c>)
 8002f02:	2101      	movs	r1, #1
 8002f04:	2001      	movs	r0, #1
 8002f06:	f006 f85d 	bl	8008fc4 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002f0a:	4b4c      	ldr	r3, [pc, #304]	@ (800303c <menu+0x1a80>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d105      	bne.n	8002f1e <menu+0x1962>
			lcd_print(2, 1, pasifText);
 8002f12:	4a4b      	ldr	r2, [pc, #300]	@ (8003040 <menu+0x1a84>)
 8002f14:	2101      	movs	r1, #1
 8002f16:	2002      	movs	r0, #2
 8002f18:	f006 f854 	bl	8008fc4 <lcd_print>
 8002f1c:	e008      	b.n	8002f30 <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002f1e:	4b47      	ldr	r3, [pc, #284]	@ (800303c <menu+0x1a80>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d104      	bne.n	8002f30 <menu+0x1974>
			lcd_print(2, 1, aktifText);
 8002f26:	4a3c      	ldr	r2, [pc, #240]	@ (8003018 <menu+0x1a5c>)
 8002f28:	2101      	movs	r1, #1
 8002f2a:	2002      	movs	r0, #2
 8002f2c:	f006 f84a 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f30:	2102      	movs	r1, #2
 8002f32:	483a      	ldr	r0, [pc, #232]	@ (800301c <menu+0x1a60>)
 8002f34:	f007 fb8a 	bl	800a64c <HAL_GPIO_ReadPin>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d115      	bne.n	8002f6a <menu+0x19ae>
 8002f3e:	4b38      	ldr	r3, [pc, #224]	@ (8003020 <menu+0x1a64>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	f083 0301 	eor.w	r3, r3, #1
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00e      	beq.n	8002f6a <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800303c <menu+0x1a80>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	3301      	adds	r3, #1
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	4b39      	ldr	r3, [pc, #228]	@ (800303c <menu+0x1a80>)
 8002f56:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002f58:	4b38      	ldr	r3, [pc, #224]	@ (800303c <menu+0x1a80>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d902      	bls.n	8002f66 <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 8002f60:	4b36      	ldr	r3, [pc, #216]	@ (800303c <menu+0x1a80>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f66:	f001 f86f 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f6a:	2104      	movs	r1, #4
 8002f6c:	482b      	ldr	r0, [pc, #172]	@ (800301c <menu+0x1a60>)
 8002f6e:	f007 fb6d 	bl	800a64c <HAL_GPIO_ReadPin>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d115      	bne.n	8002fa4 <menu+0x19e8>
 8002f78:	4b29      	ldr	r3, [pc, #164]	@ (8003020 <menu+0x1a64>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	f083 0301 	eor.w	r3, r3, #1
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00e      	beq.n	8002fa4 <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002f86:	4b2d      	ldr	r3, [pc, #180]	@ (800303c <menu+0x1a80>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800303c <menu+0x1a80>)
 8002f90:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002f92:	4b2a      	ldr	r3, [pc, #168]	@ (800303c <menu+0x1a80>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 8002f9a:	4b28      	ldr	r3, [pc, #160]	@ (800303c <menu+0x1a80>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002fa0:	f001 f852 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fa4:	2108      	movs	r1, #8
 8002fa6:	481d      	ldr	r0, [pc, #116]	@ (800301c <menu+0x1a60>)
 8002fa8:	f007 fb50 	bl	800a64c <HAL_GPIO_ReadPin>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d10d      	bne.n	8002fce <menu+0x1a12>
 8002fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8003020 <menu+0x1a64>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	f083 0301 	eor.w	r3, r3, #1
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d006      	beq.n	8002fce <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002fc0:	4b1e      	ldr	r3, [pc, #120]	@ (800303c <menu+0x1a80>)
 8002fc2:	781a      	ldrb	r2, [r3, #0]
 8002fc4:	4b17      	ldr	r3, [pc, #92]	@ (8003024 <menu+0x1a68>)
 8002fc6:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002fc8:	4b17      	ldr	r3, [pc, #92]	@ (8003028 <menu+0x1a6c>)
 8002fca:	2201      	movs	r2, #1
 8002fcc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002fce:	4b17      	ldr	r3, [pc, #92]	@ (800302c <menu+0x1a70>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b14      	cmp	r3, #20
 8002fd4:	f040 809e 	bne.w	8003114 <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 8002fd8:	4b15      	ldr	r3, [pc, #84]	@ (8003030 <menu+0x1a74>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d105      	bne.n	8002fec <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 8002fe0:	4a18      	ldr	r2, [pc, #96]	@ (8003044 <menu+0x1a88>)
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f005 ffed 	bl	8008fc4 <lcd_print>
 8002fea:	e008      	b.n	8002ffe <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 8002fec:	4b10      	ldr	r3, [pc, #64]	@ (8003030 <menu+0x1a74>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d104      	bne.n	8002ffe <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8002ff4:	4a14      	ldr	r2, [pc, #80]	@ (8003048 <menu+0x1a8c>)
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	2001      	movs	r0, #1
 8002ffa:	f005 ffe3 	bl	8008fc4 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002ffe:	4b13      	ldr	r3, [pc, #76]	@ (800304c <menu+0x1a90>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d126      	bne.n	8003054 <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 8003006:	4a12      	ldr	r2, [pc, #72]	@ (8003050 <menu+0x1a94>)
 8003008:	2101      	movs	r1, #1
 800300a:	2002      	movs	r0, #2
 800300c:	f005 ffda 	bl	8008fc4 <lcd_print>
 8003010:	e029      	b.n	8003066 <menu+0x1aaa>
 8003012:	bf00      	nop
 8003014:	200014cc 	.word	0x200014cc
 8003018:	200017b0 	.word	0x200017b0
 800301c:	40010800 	.word	0x40010800
 8003020:	200014eb 	.word	0x200014eb
 8003024:	20000fec 	.word	0x20000fec
 8003028:	200014e8 	.word	0x200014e8
 800302c:	200014bc 	.word	0x200014bc
 8003030:	200014cb 	.word	0x200014cb
 8003034:	200019f4 	.word	0x200019f4
 8003038:	20001a08 	.word	0x20001a08
 800303c:	200014cd 	.word	0x200014cd
 8003040:	2000179c 	.word	0x2000179c
 8003044:	20001a1c 	.word	0x20001a1c
 8003048:	20001a30 	.word	0x20001a30
 800304c:	200014ce 	.word	0x200014ce
 8003050:	20001a44 	.word	0x20001a44
		} else if(devirmeSilindirTipi == 1) {
 8003054:	4b39      	ldr	r3, [pc, #228]	@ (800313c <menu+0x1b80>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d104      	bne.n	8003066 <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 800305c:	4a38      	ldr	r2, [pc, #224]	@ (8003140 <menu+0x1b84>)
 800305e:	2101      	movs	r1, #1
 8003060:	2002      	movs	r0, #2
 8003062:	f005 ffaf 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003066:	2102      	movs	r1, #2
 8003068:	4836      	ldr	r0, [pc, #216]	@ (8003144 <menu+0x1b88>)
 800306a:	f007 faef 	bl	800a64c <HAL_GPIO_ReadPin>
 800306e:	4603      	mov	r3, r0
 8003070:	2b01      	cmp	r3, #1
 8003072:	d119      	bne.n	80030a8 <menu+0x1aec>
 8003074:	4b34      	ldr	r3, [pc, #208]	@ (8003148 <menu+0x1b8c>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	f083 0301 	eor.w	r3, r3, #1
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d012      	beq.n	80030a8 <menu+0x1aec>
 8003082:	4b32      	ldr	r3, [pc, #200]	@ (800314c <menu+0x1b90>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d10e      	bne.n	80030a8 <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800308a:	4b2c      	ldr	r3, [pc, #176]	@ (800313c <menu+0x1b80>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	3301      	adds	r3, #1
 8003090:	b2da      	uxtb	r2, r3
 8003092:	4b2a      	ldr	r3, [pc, #168]	@ (800313c <menu+0x1b80>)
 8003094:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003096:	4b29      	ldr	r3, [pc, #164]	@ (800313c <menu+0x1b80>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d902      	bls.n	80030a4 <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 800309e:	4b27      	ldr	r3, [pc, #156]	@ (800313c <menu+0x1b80>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030a4:	f000 ffd0 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80030a8:	2104      	movs	r1, #4
 80030aa:	4826      	ldr	r0, [pc, #152]	@ (8003144 <menu+0x1b88>)
 80030ac:	f007 face 	bl	800a64c <HAL_GPIO_ReadPin>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d119      	bne.n	80030ea <menu+0x1b2e>
 80030b6:	4b24      	ldr	r3, [pc, #144]	@ (8003148 <menu+0x1b8c>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	f083 0301 	eor.w	r3, r3, #1
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d012      	beq.n	80030ea <menu+0x1b2e>
 80030c4:	4b21      	ldr	r3, [pc, #132]	@ (800314c <menu+0x1b90>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d10e      	bne.n	80030ea <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80030cc:	4b1b      	ldr	r3, [pc, #108]	@ (800313c <menu+0x1b80>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	4b19      	ldr	r3, [pc, #100]	@ (800313c <menu+0x1b80>)
 80030d6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80030d8:	4b18      	ldr	r3, [pc, #96]	@ (800313c <menu+0x1b80>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 80030e0:	4b16      	ldr	r3, [pc, #88]	@ (800313c <menu+0x1b80>)
 80030e2:	2201      	movs	r2, #1
 80030e4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030e6:	f000 ffaf 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030ea:	2108      	movs	r1, #8
 80030ec:	4815      	ldr	r0, [pc, #84]	@ (8003144 <menu+0x1b88>)
 80030ee:	f007 faad 	bl	800a64c <HAL_GPIO_ReadPin>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d10d      	bne.n	8003114 <menu+0x1b58>
 80030f8:	4b13      	ldr	r3, [pc, #76]	@ (8003148 <menu+0x1b8c>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	f083 0301 	eor.w	r3, r3, #1
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d006      	beq.n	8003114 <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 8003106:	4b0d      	ldr	r3, [pc, #52]	@ (800313c <menu+0x1b80>)
 8003108:	781a      	ldrb	r2, [r3, #0]
 800310a:	4b11      	ldr	r3, [pc, #68]	@ (8003150 <menu+0x1b94>)
 800310c:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 800310e:	4b11      	ldr	r3, [pc, #68]	@ (8003154 <menu+0x1b98>)
 8003110:	2201      	movs	r2, #1
 8003112:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003114:	4b10      	ldr	r3, [pc, #64]	@ (8003158 <menu+0x1b9c>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b15      	cmp	r3, #21
 800311a:	f040 8088 	bne.w	800322e <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 800311e:	4a0f      	ldr	r2, [pc, #60]	@ (800315c <menu+0x1ba0>)
 8003120:	2101      	movs	r1, #1
 8003122:	2001      	movs	r0, #1
 8003124:	f005 ff4e 	bl	8008fc4 <lcd_print>

		if(platformSilindirTipi == 0) {
 8003128:	4b0d      	ldr	r3, [pc, #52]	@ (8003160 <menu+0x1ba4>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d11b      	bne.n	8003168 <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 8003130:	4a0c      	ldr	r2, [pc, #48]	@ (8003164 <menu+0x1ba8>)
 8003132:	2101      	movs	r1, #1
 8003134:	2002      	movs	r0, #2
 8003136:	f005 ff45 	bl	8008fc4 <lcd_print>
 800313a:	e01e      	b.n	800317a <menu+0x1bbe>
 800313c:	200014ce 	.word	0x200014ce
 8003140:	20001a58 	.word	0x20001a58
 8003144:	40010800 	.word	0x40010800
 8003148:	200014eb 	.word	0x200014eb
 800314c:	200014cb 	.word	0x200014cb
 8003150:	20000fec 	.word	0x20000fec
 8003154:	200014e8 	.word	0x200014e8
 8003158:	200014bc 	.word	0x200014bc
 800315c:	20001a6c 	.word	0x20001a6c
 8003160:	200014cf 	.word	0x200014cf
 8003164:	20001a44 	.word	0x20001a44
		} else if(platformSilindirTipi == 1) {
 8003168:	4ba1      	ldr	r3, [pc, #644]	@ (80033f0 <menu+0x1e34>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d104      	bne.n	800317a <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 8003170:	4aa0      	ldr	r2, [pc, #640]	@ (80033f4 <menu+0x1e38>)
 8003172:	2101      	movs	r1, #1
 8003174:	2002      	movs	r0, #2
 8003176:	f005 ff25 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800317a:	2102      	movs	r1, #2
 800317c:	489e      	ldr	r0, [pc, #632]	@ (80033f8 <menu+0x1e3c>)
 800317e:	f007 fa65 	bl	800a64c <HAL_GPIO_ReadPin>
 8003182:	4603      	mov	r3, r0
 8003184:	2b01      	cmp	r3, #1
 8003186:	d115      	bne.n	80031b4 <menu+0x1bf8>
 8003188:	4b9c      	ldr	r3, [pc, #624]	@ (80033fc <menu+0x1e40>)
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	f083 0301 	eor.w	r3, r3, #1
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00e      	beq.n	80031b4 <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003196:	4b96      	ldr	r3, [pc, #600]	@ (80033f0 <menu+0x1e34>)
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	3301      	adds	r3, #1
 800319c:	b2da      	uxtb	r2, r3
 800319e:	4b94      	ldr	r3, [pc, #592]	@ (80033f0 <menu+0x1e34>)
 80031a0:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80031a2:	4b93      	ldr	r3, [pc, #588]	@ (80033f0 <menu+0x1e34>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d902      	bls.n	80031b0 <menu+0x1bf4>
				platformSilindirTipi = 0;
 80031aa:	4b91      	ldr	r3, [pc, #580]	@ (80033f0 <menu+0x1e34>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031b0:	f000 ff4a 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031b4:	2104      	movs	r1, #4
 80031b6:	4890      	ldr	r0, [pc, #576]	@ (80033f8 <menu+0x1e3c>)
 80031b8:	f007 fa48 	bl	800a64c <HAL_GPIO_ReadPin>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d115      	bne.n	80031ee <menu+0x1c32>
 80031c2:	4b8e      	ldr	r3, [pc, #568]	@ (80033fc <menu+0x1e40>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	f083 0301 	eor.w	r3, r3, #1
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00e      	beq.n	80031ee <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 80031d0:	4b87      	ldr	r3, [pc, #540]	@ (80033f0 <menu+0x1e34>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	4b85      	ldr	r3, [pc, #532]	@ (80033f0 <menu+0x1e34>)
 80031da:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80031dc:	4b84      	ldr	r3, [pc, #528]	@ (80033f0 <menu+0x1e34>)
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d002      	beq.n	80031ea <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 80031e4:	4b82      	ldr	r3, [pc, #520]	@ (80033f0 <menu+0x1e34>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031ea:	f000 ff2d 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031ee:	2108      	movs	r1, #8
 80031f0:	4881      	ldr	r0, [pc, #516]	@ (80033f8 <menu+0x1e3c>)
 80031f2:	f007 fa2b 	bl	800a64c <HAL_GPIO_ReadPin>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d118      	bne.n	800322e <menu+0x1c72>
 80031fc:	4b7f      	ldr	r3, [pc, #508]	@ (80033fc <menu+0x1e40>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	f083 0301 	eor.w	r3, r3, #1
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d011      	beq.n	800322e <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 800320a:	4b79      	ldr	r3, [pc, #484]	@ (80033f0 <menu+0x1e34>)
 800320c:	781a      	ldrb	r2, [r3, #0]
 800320e:	4b7c      	ldr	r3, [pc, #496]	@ (8003400 <menu+0x1e44>)
 8003210:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003212:	4b77      	ldr	r3, [pc, #476]	@ (80033f0 <menu+0x1e34>)
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d106      	bne.n	8003228 <menu+0x1c6c>
				altLimit = 1;
 800321a:	4b7a      	ldr	r3, [pc, #488]	@ (8003404 <menu+0x1e48>)
 800321c:	2201      	movs	r2, #1
 800321e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003220:	4b78      	ldr	r3, [pc, #480]	@ (8003404 <menu+0x1e48>)
 8003222:	781a      	ldrb	r2, [r3, #0]
 8003224:	4b76      	ldr	r3, [pc, #472]	@ (8003400 <menu+0x1e44>)
 8003226:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003228:	4b77      	ldr	r3, [pc, #476]	@ (8003408 <menu+0x1e4c>)
 800322a:	2201      	movs	r2, #1
 800322c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 800322e:	4b77      	ldr	r3, [pc, #476]	@ (800340c <menu+0x1e50>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b16      	cmp	r3, #22
 8003234:	d164      	bne.n	8003300 <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 8003236:	4a76      	ldr	r2, [pc, #472]	@ (8003410 <menu+0x1e54>)
 8003238:	2101      	movs	r1, #1
 800323a:	2001      	movs	r0, #1
 800323c:	f005 fec2 	bl	8008fc4 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003240:	4a74      	ldr	r2, [pc, #464]	@ (8003414 <menu+0x1e58>)
 8003242:	2101      	movs	r1, #1
 8003244:	2002      	movs	r0, #2
 8003246:	f005 febd 	bl	8008fc4 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 800324a:	4b73      	ldr	r3, [pc, #460]	@ (8003418 <menu+0x1e5c>)
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	220a      	movs	r2, #10
 8003250:	4972      	ldr	r1, [pc, #456]	@ (800341c <menu+0x1e60>)
 8003252:	4618      	mov	r0, r3
 8003254:	f00a fb6c 	bl	800d930 <itoa>
		lcd_print(2,16,snum);
 8003258:	4a70      	ldr	r2, [pc, #448]	@ (800341c <menu+0x1e60>)
 800325a:	2110      	movs	r1, #16
 800325c:	2002      	movs	r0, #2
 800325e:	f005 feb1 	bl	8008fc4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003262:	2102      	movs	r1, #2
 8003264:	4864      	ldr	r0, [pc, #400]	@ (80033f8 <menu+0x1e3c>)
 8003266:	f007 f9f1 	bl	800a64c <HAL_GPIO_ReadPin>
 800326a:	4603      	mov	r3, r0
 800326c:	2b01      	cmp	r3, #1
 800326e:	d115      	bne.n	800329c <menu+0x1ce0>
 8003270:	4b62      	ldr	r3, [pc, #392]	@ (80033fc <menu+0x1e40>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	f083 0301 	eor.w	r3, r3, #1
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00e      	beq.n	800329c <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 800327e:	4b66      	ldr	r3, [pc, #408]	@ (8003418 <menu+0x1e5c>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	3301      	adds	r3, #1
 8003284:	b2da      	uxtb	r2, r3
 8003286:	4b64      	ldr	r3, [pc, #400]	@ (8003418 <menu+0x1e5c>)
 8003288:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 800328a:	4b63      	ldr	r3, [pc, #396]	@ (8003418 <menu+0x1e5c>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b05      	cmp	r3, #5
 8003290:	d902      	bls.n	8003298 <menu+0x1cdc>
				yukariValfTmr = 0;
 8003292:	4b61      	ldr	r3, [pc, #388]	@ (8003418 <menu+0x1e5c>)
 8003294:	2200      	movs	r2, #0
 8003296:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003298:	f000 fed6 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800329c:	2104      	movs	r1, #4
 800329e:	4856      	ldr	r0, [pc, #344]	@ (80033f8 <menu+0x1e3c>)
 80032a0:	f007 f9d4 	bl	800a64c <HAL_GPIO_ReadPin>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d115      	bne.n	80032d6 <menu+0x1d1a>
 80032aa:	4b54      	ldr	r3, [pc, #336]	@ (80033fc <menu+0x1e40>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	f083 0301 	eor.w	r3, r3, #1
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00e      	beq.n	80032d6 <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 80032b8:	4b57      	ldr	r3, [pc, #348]	@ (8003418 <menu+0x1e5c>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	3b01      	subs	r3, #1
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	4b55      	ldr	r3, [pc, #340]	@ (8003418 <menu+0x1e5c>)
 80032c2:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 80032c4:	4b54      	ldr	r3, [pc, #336]	@ (8003418 <menu+0x1e5c>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b06      	cmp	r3, #6
 80032ca:	d902      	bls.n	80032d2 <menu+0x1d16>
		   		yukariValfTmr = 5;
 80032cc:	4b52      	ldr	r3, [pc, #328]	@ (8003418 <menu+0x1e5c>)
 80032ce:	2205      	movs	r2, #5
 80032d0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032d2:	f000 feb9 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032d6:	2108      	movs	r1, #8
 80032d8:	4847      	ldr	r0, [pc, #284]	@ (80033f8 <menu+0x1e3c>)
 80032da:	f007 f9b7 	bl	800a64c <HAL_GPIO_ReadPin>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d10d      	bne.n	8003300 <menu+0x1d44>
 80032e4:	4b45      	ldr	r3, [pc, #276]	@ (80033fc <menu+0x1e40>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	f083 0301 	eor.w	r3, r3, #1
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d006      	beq.n	8003300 <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 80032f2:	4b49      	ldr	r3, [pc, #292]	@ (8003418 <menu+0x1e5c>)
 80032f4:	781a      	ldrb	r2, [r3, #0]
 80032f6:	4b42      	ldr	r3, [pc, #264]	@ (8003400 <menu+0x1e44>)
 80032f8:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 80032fa:	4b43      	ldr	r3, [pc, #268]	@ (8003408 <menu+0x1e4c>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003300:	4b42      	ldr	r3, [pc, #264]	@ (800340c <menu+0x1e50>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b17      	cmp	r3, #23
 8003306:	d164      	bne.n	80033d2 <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 8003308:	4a45      	ldr	r2, [pc, #276]	@ (8003420 <menu+0x1e64>)
 800330a:	2101      	movs	r1, #1
 800330c:	2001      	movs	r0, #1
 800330e:	f005 fe59 	bl	8008fc4 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003312:	4a40      	ldr	r2, [pc, #256]	@ (8003414 <menu+0x1e58>)
 8003314:	2101      	movs	r1, #1
 8003316:	2002      	movs	r0, #2
 8003318:	f005 fe54 	bl	8008fc4 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 800331c:	4b41      	ldr	r3, [pc, #260]	@ (8003424 <menu+0x1e68>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	220a      	movs	r2, #10
 8003322:	493e      	ldr	r1, [pc, #248]	@ (800341c <menu+0x1e60>)
 8003324:	4618      	mov	r0, r3
 8003326:	f00a fb03 	bl	800d930 <itoa>
		lcd_print(2,16,snum);
 800332a:	4a3c      	ldr	r2, [pc, #240]	@ (800341c <menu+0x1e60>)
 800332c:	2110      	movs	r1, #16
 800332e:	2002      	movs	r0, #2
 8003330:	f005 fe48 	bl	8008fc4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003334:	2102      	movs	r1, #2
 8003336:	4830      	ldr	r0, [pc, #192]	@ (80033f8 <menu+0x1e3c>)
 8003338:	f007 f988 	bl	800a64c <HAL_GPIO_ReadPin>
 800333c:	4603      	mov	r3, r0
 800333e:	2b01      	cmp	r3, #1
 8003340:	d115      	bne.n	800336e <menu+0x1db2>
 8003342:	4b2e      	ldr	r3, [pc, #184]	@ (80033fc <menu+0x1e40>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	f083 0301 	eor.w	r3, r3, #1
 800334a:	b2db      	uxtb	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00e      	beq.n	800336e <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 8003350:	4b34      	ldr	r3, [pc, #208]	@ (8003424 <menu+0x1e68>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	3301      	adds	r3, #1
 8003356:	b2da      	uxtb	r2, r3
 8003358:	4b32      	ldr	r3, [pc, #200]	@ (8003424 <menu+0x1e68>)
 800335a:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 800335c:	4b31      	ldr	r3, [pc, #196]	@ (8003424 <menu+0x1e68>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b05      	cmp	r3, #5
 8003362:	d902      	bls.n	800336a <menu+0x1dae>
				asagiValfTmr = 0;
 8003364:	4b2f      	ldr	r3, [pc, #188]	@ (8003424 <menu+0x1e68>)
 8003366:	2200      	movs	r2, #0
 8003368:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800336a:	f000 fe6d 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800336e:	2104      	movs	r1, #4
 8003370:	4821      	ldr	r0, [pc, #132]	@ (80033f8 <menu+0x1e3c>)
 8003372:	f007 f96b 	bl	800a64c <HAL_GPIO_ReadPin>
 8003376:	4603      	mov	r3, r0
 8003378:	2b01      	cmp	r3, #1
 800337a:	d115      	bne.n	80033a8 <menu+0x1dec>
 800337c:	4b1f      	ldr	r3, [pc, #124]	@ (80033fc <menu+0x1e40>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	f083 0301 	eor.w	r3, r3, #1
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00e      	beq.n	80033a8 <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 800338a:	4b26      	ldr	r3, [pc, #152]	@ (8003424 <menu+0x1e68>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	3b01      	subs	r3, #1
 8003390:	b2da      	uxtb	r2, r3
 8003392:	4b24      	ldr	r3, [pc, #144]	@ (8003424 <menu+0x1e68>)
 8003394:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003396:	4b23      	ldr	r3, [pc, #140]	@ (8003424 <menu+0x1e68>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b06      	cmp	r3, #6
 800339c:	d902      	bls.n	80033a4 <menu+0x1de8>
		   		asagiValfTmr = 5;
 800339e:	4b21      	ldr	r3, [pc, #132]	@ (8003424 <menu+0x1e68>)
 80033a0:	2205      	movs	r2, #5
 80033a2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033a4:	f000 fe50 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033a8:	2108      	movs	r1, #8
 80033aa:	4813      	ldr	r0, [pc, #76]	@ (80033f8 <menu+0x1e3c>)
 80033ac:	f007 f94e 	bl	800a64c <HAL_GPIO_ReadPin>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d10d      	bne.n	80033d2 <menu+0x1e16>
 80033b6:	4b11      	ldr	r3, [pc, #68]	@ (80033fc <menu+0x1e40>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	f083 0301 	eor.w	r3, r3, #1
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d006      	beq.n	80033d2 <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 80033c4:	4b17      	ldr	r3, [pc, #92]	@ (8003424 <menu+0x1e68>)
 80033c6:	781a      	ldrb	r2, [r3, #0]
 80033c8:	4b0d      	ldr	r3, [pc, #52]	@ (8003400 <menu+0x1e44>)
 80033ca:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 80033cc:	4b0e      	ldr	r3, [pc, #56]	@ (8003408 <menu+0x1e4c>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 80033d2:	4b0e      	ldr	r3, [pc, #56]	@ (800340c <menu+0x1e50>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	2b18      	cmp	r3, #24
 80033d8:	f040 8093 	bne.w	8003502 <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 80033dc:	4b12      	ldr	r3, [pc, #72]	@ (8003428 <menu+0x1e6c>)
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d125      	bne.n	8003430 <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 80033e4:	4a11      	ldr	r2, [pc, #68]	@ (800342c <menu+0x1e70>)
 80033e6:	2101      	movs	r1, #1
 80033e8:	2001      	movs	r0, #1
 80033ea:	f005 fdeb 	bl	8008fc4 <lcd_print>
 80033ee:	e028      	b.n	8003442 <menu+0x1e86>
 80033f0:	200014cf 	.word	0x200014cf
 80033f4:	20001a58 	.word	0x20001a58
 80033f8:	40010800 	.word	0x40010800
 80033fc:	200014eb 	.word	0x200014eb
 8003400:	20000fec 	.word	0x20000fec
 8003404:	200014c2 	.word	0x200014c2
 8003408:	200014e8 	.word	0x200014e8
 800340c:	200014bc 	.word	0x200014bc
 8003410:	20001a80 	.word	0x20001a80
 8003414:	200018c8 	.word	0x200018c8
 8003418:	200014d0 	.word	0x200014d0
 800341c:	2000105c 	.word	0x2000105c
 8003420:	20001a94 	.word	0x20001a94
 8003424:	200014d1 	.word	0x200014d1
 8003428:	200014cb 	.word	0x200014cb
 800342c:	20001aa8 	.word	0x20001aa8
		} else if(devirmeYuruyusSecim == 1) {
 8003430:	4b8c      	ldr	r3, [pc, #560]	@ (8003664 <menu+0x20a8>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d104      	bne.n	8003442 <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 8003438:	4a8b      	ldr	r2, [pc, #556]	@ (8003668 <menu+0x20ac>)
 800343a:	2101      	movs	r1, #1
 800343c:	2001      	movs	r0, #1
 800343e:	f005 fdc1 	bl	8008fc4 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003442:	4a8a      	ldr	r2, [pc, #552]	@ (800366c <menu+0x20b0>)
 8003444:	2101      	movs	r1, #1
 8003446:	2002      	movs	r0, #2
 8003448:	f005 fdbc 	bl	8008fc4 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 800344c:	4b88      	ldr	r3, [pc, #544]	@ (8003670 <menu+0x20b4>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	220a      	movs	r2, #10
 8003452:	4988      	ldr	r1, [pc, #544]	@ (8003674 <menu+0x20b8>)
 8003454:	4618      	mov	r0, r3
 8003456:	f00a fa6b 	bl	800d930 <itoa>
		lcd_print(2, 16, snum);
 800345a:	4a86      	ldr	r2, [pc, #536]	@ (8003674 <menu+0x20b8>)
 800345c:	2110      	movs	r1, #16
 800345e:	2002      	movs	r0, #2
 8003460:	f005 fdb0 	bl	8008fc4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003464:	2102      	movs	r1, #2
 8003466:	4884      	ldr	r0, [pc, #528]	@ (8003678 <menu+0x20bc>)
 8003468:	f007 f8f0 	bl	800a64c <HAL_GPIO_ReadPin>
 800346c:	4603      	mov	r3, r0
 800346e:	2b01      	cmp	r3, #1
 8003470:	d115      	bne.n	800349e <menu+0x1ee2>
 8003472:	4b82      	ldr	r3, [pc, #520]	@ (800367c <menu+0x20c0>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	f083 0301 	eor.w	r3, r3, #1
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00e      	beq.n	800349e <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003480:	4b7b      	ldr	r3, [pc, #492]	@ (8003670 <menu+0x20b4>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	3301      	adds	r3, #1
 8003486:	b2da      	uxtb	r2, r3
 8003488:	4b79      	ldr	r3, [pc, #484]	@ (8003670 <menu+0x20b4>)
 800348a:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 800348c:	4b78      	ldr	r3, [pc, #480]	@ (8003670 <menu+0x20b4>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b05      	cmp	r3, #5
 8003492:	d902      	bls.n	800349a <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 8003494:	4b76      	ldr	r3, [pc, #472]	@ (8003670 <menu+0x20b4>)
 8003496:	2200      	movs	r2, #0
 8003498:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800349a:	f000 fdd5 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800349e:	2104      	movs	r1, #4
 80034a0:	4875      	ldr	r0, [pc, #468]	@ (8003678 <menu+0x20bc>)
 80034a2:	f007 f8d3 	bl	800a64c <HAL_GPIO_ReadPin>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d115      	bne.n	80034d8 <menu+0x1f1c>
 80034ac:	4b73      	ldr	r3, [pc, #460]	@ (800367c <menu+0x20c0>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	f083 0301 	eor.w	r3, r3, #1
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00e      	beq.n	80034d8 <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 80034ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003670 <menu+0x20b4>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	3b01      	subs	r3, #1
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	4b6b      	ldr	r3, [pc, #428]	@ (8003670 <menu+0x20b4>)
 80034c4:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 80034c6:	4b6a      	ldr	r3, [pc, #424]	@ (8003670 <menu+0x20b4>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b06      	cmp	r3, #6
 80034cc:	d902      	bls.n	80034d4 <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 80034ce:	4b68      	ldr	r3, [pc, #416]	@ (8003670 <menu+0x20b4>)
 80034d0:	2205      	movs	r2, #5
 80034d2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80034d4:	f000 fdb8 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80034d8:	2108      	movs	r1, #8
 80034da:	4867      	ldr	r0, [pc, #412]	@ (8003678 <menu+0x20bc>)
 80034dc:	f007 f8b6 	bl	800a64c <HAL_GPIO_ReadPin>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d10d      	bne.n	8003502 <menu+0x1f46>
 80034e6:	4b65      	ldr	r3, [pc, #404]	@ (800367c <menu+0x20c0>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	f083 0301 	eor.w	r3, r3, #1
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d006      	beq.n	8003502 <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 80034f4:	4b5e      	ldr	r3, [pc, #376]	@ (8003670 <menu+0x20b4>)
 80034f6:	781a      	ldrb	r2, [r3, #0]
 80034f8:	4b61      	ldr	r3, [pc, #388]	@ (8003680 <menu+0x20c4>)
 80034fa:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 80034fc:	4b61      	ldr	r3, [pc, #388]	@ (8003684 <menu+0x20c8>)
 80034fe:	2201      	movs	r2, #1
 8003500:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003502:	4b61      	ldr	r3, [pc, #388]	@ (8003688 <menu+0x20cc>)
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b19      	cmp	r3, #25
 8003508:	d172      	bne.n	80035f0 <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 800350a:	4b56      	ldr	r3, [pc, #344]	@ (8003664 <menu+0x20a8>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b02      	cmp	r3, #2
 8003510:	d105      	bne.n	800351e <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 8003512:	4a5e      	ldr	r2, [pc, #376]	@ (800368c <menu+0x20d0>)
 8003514:	2101      	movs	r1, #1
 8003516:	2001      	movs	r0, #1
 8003518:	f005 fd54 	bl	8008fc4 <lcd_print>
 800351c:	e008      	b.n	8003530 <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 800351e:	4b51      	ldr	r3, [pc, #324]	@ (8003664 <menu+0x20a8>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b01      	cmp	r3, #1
 8003524:	d104      	bne.n	8003530 <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 8003526:	4a5a      	ldr	r2, [pc, #360]	@ (8003690 <menu+0x20d4>)
 8003528:	2101      	movs	r1, #1
 800352a:	2001      	movs	r0, #1
 800352c:	f005 fd4a 	bl	8008fc4 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003530:	4a4e      	ldr	r2, [pc, #312]	@ (800366c <menu+0x20b0>)
 8003532:	2101      	movs	r1, #1
 8003534:	2002      	movs	r0, #2
 8003536:	f005 fd45 	bl	8008fc4 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 800353a:	4b56      	ldr	r3, [pc, #344]	@ (8003694 <menu+0x20d8>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	220a      	movs	r2, #10
 8003540:	494c      	ldr	r1, [pc, #304]	@ (8003674 <menu+0x20b8>)
 8003542:	4618      	mov	r0, r3
 8003544:	f00a f9f4 	bl	800d930 <itoa>
		lcd_print(2,16,snum);
 8003548:	4a4a      	ldr	r2, [pc, #296]	@ (8003674 <menu+0x20b8>)
 800354a:	2110      	movs	r1, #16
 800354c:	2002      	movs	r0, #2
 800354e:	f005 fd39 	bl	8008fc4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003552:	2102      	movs	r1, #2
 8003554:	4848      	ldr	r0, [pc, #288]	@ (8003678 <menu+0x20bc>)
 8003556:	f007 f879 	bl	800a64c <HAL_GPIO_ReadPin>
 800355a:	4603      	mov	r3, r0
 800355c:	2b01      	cmp	r3, #1
 800355e:	d115      	bne.n	800358c <menu+0x1fd0>
 8003560:	4b46      	ldr	r3, [pc, #280]	@ (800367c <menu+0x20c0>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	f083 0301 	eor.w	r3, r3, #1
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00e      	beq.n	800358c <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 800356e:	4b49      	ldr	r3, [pc, #292]	@ (8003694 <menu+0x20d8>)
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	3301      	adds	r3, #1
 8003574:	b2da      	uxtb	r2, r3
 8003576:	4b47      	ldr	r3, [pc, #284]	@ (8003694 <menu+0x20d8>)
 8003578:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 800357a:	4b46      	ldr	r3, [pc, #280]	@ (8003694 <menu+0x20d8>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b05      	cmp	r3, #5
 8003580:	d902      	bls.n	8003588 <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 8003582:	4b44      	ldr	r3, [pc, #272]	@ (8003694 <menu+0x20d8>)
 8003584:	2200      	movs	r2, #0
 8003586:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003588:	f000 fd5e 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800358c:	2104      	movs	r1, #4
 800358e:	483a      	ldr	r0, [pc, #232]	@ (8003678 <menu+0x20bc>)
 8003590:	f007 f85c 	bl	800a64c <HAL_GPIO_ReadPin>
 8003594:	4603      	mov	r3, r0
 8003596:	2b01      	cmp	r3, #1
 8003598:	d115      	bne.n	80035c6 <menu+0x200a>
 800359a:	4b38      	ldr	r3, [pc, #224]	@ (800367c <menu+0x20c0>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	f083 0301 	eor.w	r3, r3, #1
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00e      	beq.n	80035c6 <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 80035a8:	4b3a      	ldr	r3, [pc, #232]	@ (8003694 <menu+0x20d8>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	3b01      	subs	r3, #1
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	4b38      	ldr	r3, [pc, #224]	@ (8003694 <menu+0x20d8>)
 80035b2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 80035b4:	4b37      	ldr	r3, [pc, #220]	@ (8003694 <menu+0x20d8>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b06      	cmp	r3, #6
 80035ba:	d902      	bls.n	80035c2 <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 80035bc:	4b35      	ldr	r3, [pc, #212]	@ (8003694 <menu+0x20d8>)
 80035be:	2205      	movs	r2, #5
 80035c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035c2:	f000 fd41 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035c6:	2108      	movs	r1, #8
 80035c8:	482b      	ldr	r0, [pc, #172]	@ (8003678 <menu+0x20bc>)
 80035ca:	f007 f83f 	bl	800a64c <HAL_GPIO_ReadPin>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d10d      	bne.n	80035f0 <menu+0x2034>
 80035d4:	4b29      	ldr	r3, [pc, #164]	@ (800367c <menu+0x20c0>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	f083 0301 	eor.w	r3, r3, #1
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d006      	beq.n	80035f0 <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 80035e2:	4b2c      	ldr	r3, [pc, #176]	@ (8003694 <menu+0x20d8>)
 80035e4:	781a      	ldrb	r2, [r3, #0]
 80035e6:	4b26      	ldr	r3, [pc, #152]	@ (8003680 <menu+0x20c4>)
 80035e8:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 80035ea:	4b26      	ldr	r3, [pc, #152]	@ (8003684 <menu+0x20c8>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 80035f0:	4b25      	ldr	r3, [pc, #148]	@ (8003688 <menu+0x20cc>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b1a      	cmp	r3, #26
 80035f6:	f040 80b7 	bne.w	8003768 <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 80035fa:	4a27      	ldr	r2, [pc, #156]	@ (8003698 <menu+0x20dc>)
 80035fc:	2101      	movs	r1, #1
 80035fe:	2001      	movs	r0, #1
 8003600:	f005 fce0 	bl	8008fc4 <lcd_print>

		if(makineCalismaTmr > 99) {
 8003604:	4b25      	ldr	r3, [pc, #148]	@ (800369c <menu+0x20e0>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b63      	cmp	r3, #99	@ 0x63
 800360a:	d911      	bls.n	8003630 <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 800360c:	4a17      	ldr	r2, [pc, #92]	@ (800366c <menu+0x20b0>)
 800360e:	2101      	movs	r1, #1
 8003610:	2002      	movs	r0, #2
 8003612:	f005 fcd7 	bl	8008fc4 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003616:	4b21      	ldr	r3, [pc, #132]	@ (800369c <menu+0x20e0>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	220a      	movs	r2, #10
 800361c:	4915      	ldr	r1, [pc, #84]	@ (8003674 <menu+0x20b8>)
 800361e:	4618      	mov	r0, r3
 8003620:	f00a f986 	bl	800d930 <itoa>
			lcd_print(2,14,snum);
 8003624:	4a13      	ldr	r2, [pc, #76]	@ (8003674 <menu+0x20b8>)
 8003626:	210e      	movs	r1, #14
 8003628:	2002      	movs	r0, #2
 800362a:	f005 fccb 	bl	8008fc4 <lcd_print>
 800362e:	e04c      	b.n	80036ca <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003630:	4b1a      	ldr	r3, [pc, #104]	@ (800369c <menu+0x20e0>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b09      	cmp	r3, #9
 8003636:	d933      	bls.n	80036a0 <menu+0x20e4>
 8003638:	4b18      	ldr	r3, [pc, #96]	@ (800369c <menu+0x20e0>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	2b63      	cmp	r3, #99	@ 0x63
 800363e:	d82f      	bhi.n	80036a0 <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 8003640:	4a0a      	ldr	r2, [pc, #40]	@ (800366c <menu+0x20b0>)
 8003642:	2101      	movs	r1, #1
 8003644:	2002      	movs	r0, #2
 8003646:	f005 fcbd 	bl	8008fc4 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800364a:	4b14      	ldr	r3, [pc, #80]	@ (800369c <menu+0x20e0>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	220a      	movs	r2, #10
 8003650:	4908      	ldr	r1, [pc, #32]	@ (8003674 <menu+0x20b8>)
 8003652:	4618      	mov	r0, r3
 8003654:	f00a f96c 	bl	800d930 <itoa>
			lcd_print(2, 15, snum);
 8003658:	4a06      	ldr	r2, [pc, #24]	@ (8003674 <menu+0x20b8>)
 800365a:	210f      	movs	r1, #15
 800365c:	2002      	movs	r0, #2
 800365e:	f005 fcb1 	bl	8008fc4 <lcd_print>
 8003662:	e032      	b.n	80036ca <menu+0x210e>
 8003664:	200014cb 	.word	0x200014cb
 8003668:	20001abc 	.word	0x20001abc
 800366c:	200018c8 	.word	0x200018c8
 8003670:	200014d2 	.word	0x200014d2
 8003674:	2000105c 	.word	0x2000105c
 8003678:	40010800 	.word	0x40010800
 800367c:	200014eb 	.word	0x200014eb
 8003680:	20000fec 	.word	0x20000fec
 8003684:	200014e8 	.word	0x200014e8
 8003688:	200014bc 	.word	0x200014bc
 800368c:	20001ad0 	.word	0x20001ad0
 8003690:	20001ae4 	.word	0x20001ae4
 8003694:	200014d3 	.word	0x200014d3
 8003698:	20001af8 	.word	0x20001af8
 800369c:	200014d4 	.word	0x200014d4
		} else if(makineCalismaTmr <=  9) {
 80036a0:	4b72      	ldr	r3, [pc, #456]	@ (800386c <menu+0x22b0>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b09      	cmp	r3, #9
 80036a6:	d810      	bhi.n	80036ca <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 80036a8:	4a71      	ldr	r2, [pc, #452]	@ (8003870 <menu+0x22b4>)
 80036aa:	2101      	movs	r1, #1
 80036ac:	2002      	movs	r0, #2
 80036ae:	f005 fc89 	bl	8008fc4 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80036b2:	4b6e      	ldr	r3, [pc, #440]	@ (800386c <menu+0x22b0>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	220a      	movs	r2, #10
 80036b8:	496e      	ldr	r1, [pc, #440]	@ (8003874 <menu+0x22b8>)
 80036ba:	4618      	mov	r0, r3
 80036bc:	f00a f938 	bl	800d930 <itoa>
			lcd_print(2, 16, snum);
 80036c0:	4a6c      	ldr	r2, [pc, #432]	@ (8003874 <menu+0x22b8>)
 80036c2:	2110      	movs	r1, #16
 80036c4:	2002      	movs	r0, #2
 80036c6:	f005 fc7d 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ca:	2102      	movs	r1, #2
 80036cc:	486a      	ldr	r0, [pc, #424]	@ (8003878 <menu+0x22bc>)
 80036ce:	f006 ffbd 	bl	800a64c <HAL_GPIO_ReadPin>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d115      	bne.n	8003704 <menu+0x2148>
 80036d8:	4b68      	ldr	r3, [pc, #416]	@ (800387c <menu+0x22c0>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	f083 0301 	eor.w	r3, r3, #1
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00e      	beq.n	8003704 <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 80036e6:	4b61      	ldr	r3, [pc, #388]	@ (800386c <menu+0x22b0>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	3301      	adds	r3, #1
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	4b5f      	ldr	r3, [pc, #380]	@ (800386c <menu+0x22b0>)
 80036f0:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80036f2:	4b5e      	ldr	r3, [pc, #376]	@ (800386c <menu+0x22b0>)
 80036f4:	781b      	ldrb	r3, [r3, #0]
 80036f6:	2bb4      	cmp	r3, #180	@ 0xb4
 80036f8:	d902      	bls.n	8003700 <menu+0x2144>
				makineCalismaTmr = 0;
 80036fa:	4b5c      	ldr	r3, [pc, #368]	@ (800386c <menu+0x22b0>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003700:	f000 fca2 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003704:	2104      	movs	r1, #4
 8003706:	485c      	ldr	r0, [pc, #368]	@ (8003878 <menu+0x22bc>)
 8003708:	f006 ffa0 	bl	800a64c <HAL_GPIO_ReadPin>
 800370c:	4603      	mov	r3, r0
 800370e:	2b01      	cmp	r3, #1
 8003710:	d115      	bne.n	800373e <menu+0x2182>
 8003712:	4b5a      	ldr	r3, [pc, #360]	@ (800387c <menu+0x22c0>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	f083 0301 	eor.w	r3, r3, #1
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00e      	beq.n	800373e <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003720:	4b52      	ldr	r3, [pc, #328]	@ (800386c <menu+0x22b0>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	3b01      	subs	r3, #1
 8003726:	b2da      	uxtb	r2, r3
 8003728:	4b50      	ldr	r3, [pc, #320]	@ (800386c <menu+0x22b0>)
 800372a:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 800372c:	4b4f      	ldr	r3, [pc, #316]	@ (800386c <menu+0x22b0>)
 800372e:	781b      	ldrb	r3, [r3, #0]
 8003730:	2bb5      	cmp	r3, #181	@ 0xb5
 8003732:	d902      	bls.n	800373a <menu+0x217e>
		   		makineCalismaTmr = 180;
 8003734:	4b4d      	ldr	r3, [pc, #308]	@ (800386c <menu+0x22b0>)
 8003736:	22b4      	movs	r2, #180	@ 0xb4
 8003738:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800373a:	f000 fc85 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800373e:	2108      	movs	r1, #8
 8003740:	484d      	ldr	r0, [pc, #308]	@ (8003878 <menu+0x22bc>)
 8003742:	f006 ff83 	bl	800a64c <HAL_GPIO_ReadPin>
 8003746:	4603      	mov	r3, r0
 8003748:	2b01      	cmp	r3, #1
 800374a:	d10d      	bne.n	8003768 <menu+0x21ac>
 800374c:	4b4b      	ldr	r3, [pc, #300]	@ (800387c <menu+0x22c0>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	f083 0301 	eor.w	r3, r3, #1
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d006      	beq.n	8003768 <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 800375a:	4b44      	ldr	r3, [pc, #272]	@ (800386c <menu+0x22b0>)
 800375c:	781a      	ldrb	r2, [r3, #0]
 800375e:	4b48      	ldr	r3, [pc, #288]	@ (8003880 <menu+0x22c4>)
 8003760:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003762:	4b48      	ldr	r3, [pc, #288]	@ (8003884 <menu+0x22c8>)
 8003764:	2201      	movs	r2, #1
 8003766:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003768:	4b47      	ldr	r3, [pc, #284]	@ (8003888 <menu+0x22cc>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b1b      	cmp	r3, #27
 800376e:	d166      	bne.n	800383e <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 8003770:	4a46      	ldr	r2, [pc, #280]	@ (800388c <menu+0x22d0>)
 8003772:	2101      	movs	r1, #1
 8003774:	2001      	movs	r0, #1
 8003776:	f005 fc25 	bl	8008fc4 <lcd_print>

		if(buzzer == 0) {
 800377a:	4b45      	ldr	r3, [pc, #276]	@ (8003890 <menu+0x22d4>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d105      	bne.n	800378e <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 8003782:	4a44      	ldr	r2, [pc, #272]	@ (8003894 <menu+0x22d8>)
 8003784:	2101      	movs	r1, #1
 8003786:	2002      	movs	r0, #2
 8003788:	f005 fc1c 	bl	8008fc4 <lcd_print>
 800378c:	e008      	b.n	80037a0 <menu+0x21e4>
		} else if(buzzer == 1) {
 800378e:	4b40      	ldr	r3, [pc, #256]	@ (8003890 <menu+0x22d4>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b01      	cmp	r3, #1
 8003794:	d104      	bne.n	80037a0 <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 8003796:	4a40      	ldr	r2, [pc, #256]	@ (8003898 <menu+0x22dc>)
 8003798:	2101      	movs	r1, #1
 800379a:	2002      	movs	r0, #2
 800379c:	f005 fc12 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80037a0:	2102      	movs	r1, #2
 80037a2:	4835      	ldr	r0, [pc, #212]	@ (8003878 <menu+0x22bc>)
 80037a4:	f006 ff52 	bl	800a64c <HAL_GPIO_ReadPin>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d115      	bne.n	80037da <menu+0x221e>
 80037ae:	4b33      	ldr	r3, [pc, #204]	@ (800387c <menu+0x22c0>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	f083 0301 	eor.w	r3, r3, #1
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00e      	beq.n	80037da <menu+0x221e>
			buzzer = buzzer + 1;
 80037bc:	4b34      	ldr	r3, [pc, #208]	@ (8003890 <menu+0x22d4>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	3301      	adds	r3, #1
 80037c2:	b2da      	uxtb	r2, r3
 80037c4:	4b32      	ldr	r3, [pc, #200]	@ (8003890 <menu+0x22d4>)
 80037c6:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80037c8:	4b31      	ldr	r3, [pc, #196]	@ (8003890 <menu+0x22d4>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d902      	bls.n	80037d6 <menu+0x221a>
				buzzer = 0;
 80037d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003890 <menu+0x22d4>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037d6:	f000 fc37 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037da:	2104      	movs	r1, #4
 80037dc:	4826      	ldr	r0, [pc, #152]	@ (8003878 <menu+0x22bc>)
 80037de:	f006 ff35 	bl	800a64c <HAL_GPIO_ReadPin>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d115      	bne.n	8003814 <menu+0x2258>
 80037e8:	4b24      	ldr	r3, [pc, #144]	@ (800387c <menu+0x22c0>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	f083 0301 	eor.w	r3, r3, #1
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00e      	beq.n	8003814 <menu+0x2258>
			buzzer = buzzer - 1;
 80037f6:	4b26      	ldr	r3, [pc, #152]	@ (8003890 <menu+0x22d4>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	4b24      	ldr	r3, [pc, #144]	@ (8003890 <menu+0x22d4>)
 8003800:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8003802:	4b23      	ldr	r3, [pc, #140]	@ (8003890 <menu+0x22d4>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <menu+0x2254>
		   		buzzer = 1;
 800380a:	4b21      	ldr	r3, [pc, #132]	@ (8003890 <menu+0x22d4>)
 800380c:	2201      	movs	r2, #1
 800380e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003810:	f000 fc1a 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003814:	2108      	movs	r1, #8
 8003816:	4818      	ldr	r0, [pc, #96]	@ (8003878 <menu+0x22bc>)
 8003818:	f006 ff18 	bl	800a64c <HAL_GPIO_ReadPin>
 800381c:	4603      	mov	r3, r0
 800381e:	2b01      	cmp	r3, #1
 8003820:	d10d      	bne.n	800383e <menu+0x2282>
 8003822:	4b16      	ldr	r3, [pc, #88]	@ (800387c <menu+0x22c0>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	f083 0301 	eor.w	r3, r3, #1
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d006      	beq.n	800383e <menu+0x2282>
			eepromData[25] = buzzer;
 8003830:	4b17      	ldr	r3, [pc, #92]	@ (8003890 <menu+0x22d4>)
 8003832:	781a      	ldrb	r2, [r3, #0]
 8003834:	4b12      	ldr	r3, [pc, #72]	@ (8003880 <menu+0x22c4>)
 8003836:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003838:	4b12      	ldr	r3, [pc, #72]	@ (8003884 <menu+0x22c8>)
 800383a:	2201      	movs	r2, #1
 800383c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 800383e:	4b12      	ldr	r3, [pc, #72]	@ (8003888 <menu+0x22cc>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b1c      	cmp	r3, #28
 8003844:	f040 8088 	bne.w	8003958 <menu+0x239c>
		calismaSayModu = 0;
 8003848:	4b14      	ldr	r3, [pc, #80]	@ (800389c <menu+0x22e0>)
 800384a:	2200      	movs	r2, #0
 800384c:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 800384e:	4a14      	ldr	r2, [pc, #80]	@ (80038a0 <menu+0x22e4>)
 8003850:	2101      	movs	r1, #1
 8003852:	2001      	movs	r0, #1
 8003854:	f005 fbb6 	bl	8008fc4 <lcd_print>

		if(demoMode == 0) {
 8003858:	4b12      	ldr	r3, [pc, #72]	@ (80038a4 <menu+0x22e8>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d123      	bne.n	80038a8 <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 8003860:	4a0c      	ldr	r2, [pc, #48]	@ (8003894 <menu+0x22d8>)
 8003862:	2101      	movs	r1, #1
 8003864:	2002      	movs	r0, #2
 8003866:	f005 fbad 	bl	8008fc4 <lcd_print>
 800386a:	e026      	b.n	80038ba <menu+0x22fe>
 800386c:	200014d4 	.word	0x200014d4
 8003870:	200018c8 	.word	0x200018c8
 8003874:	2000105c 	.word	0x2000105c
 8003878:	40010800 	.word	0x40010800
 800387c:	200014eb 	.word	0x200014eb
 8003880:	20000fec 	.word	0x20000fec
 8003884:	200014e8 	.word	0x200014e8
 8003888:	200014bc 	.word	0x200014bc
 800388c:	20000128 	.word	0x20000128
 8003890:	200014d8 	.word	0x200014d8
 8003894:	2000179c 	.word	0x2000179c
 8003898:	200017b0 	.word	0x200017b0
 800389c:	200014db 	.word	0x200014db
 80038a0:	2000013c 	.word	0x2000013c
 80038a4:	200014da 	.word	0x200014da
		} else if(demoMode == 1) {
 80038a8:	4b80      	ldr	r3, [pc, #512]	@ (8003aac <menu+0x24f0>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d104      	bne.n	80038ba <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 80038b0:	4a7f      	ldr	r2, [pc, #508]	@ (8003ab0 <menu+0x24f4>)
 80038b2:	2101      	movs	r1, #1
 80038b4:	2002      	movs	r0, #2
 80038b6:	f005 fb85 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80038ba:	2102      	movs	r1, #2
 80038bc:	487d      	ldr	r0, [pc, #500]	@ (8003ab4 <menu+0x24f8>)
 80038be:	f006 fec5 	bl	800a64c <HAL_GPIO_ReadPin>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d115      	bne.n	80038f4 <menu+0x2338>
 80038c8:	4b7b      	ldr	r3, [pc, #492]	@ (8003ab8 <menu+0x24fc>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	f083 0301 	eor.w	r3, r3, #1
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d00e      	beq.n	80038f4 <menu+0x2338>
			demoMode = demoMode + 1;
 80038d6:	4b75      	ldr	r3, [pc, #468]	@ (8003aac <menu+0x24f0>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	3301      	adds	r3, #1
 80038dc:	b2da      	uxtb	r2, r3
 80038de:	4b73      	ldr	r3, [pc, #460]	@ (8003aac <menu+0x24f0>)
 80038e0:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80038e2:	4b72      	ldr	r3, [pc, #456]	@ (8003aac <menu+0x24f0>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d902      	bls.n	80038f0 <menu+0x2334>
				demoMode = 0;
 80038ea:	4b70      	ldr	r3, [pc, #448]	@ (8003aac <menu+0x24f0>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038f0:	f000 fbaa 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038f4:	2104      	movs	r1, #4
 80038f6:	486f      	ldr	r0, [pc, #444]	@ (8003ab4 <menu+0x24f8>)
 80038f8:	f006 fea8 	bl	800a64c <HAL_GPIO_ReadPin>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d115      	bne.n	800392e <menu+0x2372>
 8003902:	4b6d      	ldr	r3, [pc, #436]	@ (8003ab8 <menu+0x24fc>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	f083 0301 	eor.w	r3, r3, #1
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00e      	beq.n	800392e <menu+0x2372>
			demoMode = demoMode - 1;
 8003910:	4b66      	ldr	r3, [pc, #408]	@ (8003aac <menu+0x24f0>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	3b01      	subs	r3, #1
 8003916:	b2da      	uxtb	r2, r3
 8003918:	4b64      	ldr	r3, [pc, #400]	@ (8003aac <menu+0x24f0>)
 800391a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 800391c:	4b63      	ldr	r3, [pc, #396]	@ (8003aac <menu+0x24f0>)
 800391e:	781b      	ldrb	r3, [r3, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d002      	beq.n	800392a <menu+0x236e>
		   		demoMode = 1;
 8003924:	4b61      	ldr	r3, [pc, #388]	@ (8003aac <menu+0x24f0>)
 8003926:	2201      	movs	r2, #1
 8003928:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800392a:	f000 fb8d 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800392e:	2108      	movs	r1, #8
 8003930:	4860      	ldr	r0, [pc, #384]	@ (8003ab4 <menu+0x24f8>)
 8003932:	f006 fe8b 	bl	800a64c <HAL_GPIO_ReadPin>
 8003936:	4603      	mov	r3, r0
 8003938:	2b01      	cmp	r3, #1
 800393a:	d10d      	bne.n	8003958 <menu+0x239c>
 800393c:	4b5e      	ldr	r3, [pc, #376]	@ (8003ab8 <menu+0x24fc>)
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	f083 0301 	eor.w	r3, r3, #1
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d006      	beq.n	8003958 <menu+0x239c>
			eepromData[26] = demoMode;
 800394a:	4b58      	ldr	r3, [pc, #352]	@ (8003aac <menu+0x24f0>)
 800394c:	781a      	ldrb	r2, [r3, #0]
 800394e:	4b5b      	ldr	r3, [pc, #364]	@ (8003abc <menu+0x2500>)
 8003950:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8003952:	4b5b      	ldr	r3, [pc, #364]	@ (8003ac0 <menu+0x2504>)
 8003954:	2201      	movs	r2, #1
 8003956:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003958:	4b5a      	ldr	r3, [pc, #360]	@ (8003ac4 <menu+0x2508>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b1d      	cmp	r3, #29
 800395e:	f040 80d5 	bne.w	8003b0c <menu+0x2550>
		finalCount=0;
 8003962:	4b59      	ldr	r3, [pc, #356]	@ (8003ac8 <menu+0x250c>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
		if(calismaSayModu == 0) {
 8003968:	4b58      	ldr	r3, [pc, #352]	@ (8003acc <menu+0x2510>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d135      	bne.n	80039dc <menu+0x2420>
			lcd_print(1, 1, calismaSayisiText);
 8003970:	4a57      	ldr	r2, [pc, #348]	@ (8003ad0 <menu+0x2514>)
 8003972:	2101      	movs	r1, #1
 8003974:	2001      	movs	r0, #1
 8003976:	f005 fb25 	bl	8008fc4 <lcd_print>

			if(demoMode == 1) {
 800397a:	4b4c      	ldr	r3, [pc, #304]	@ (8003aac <menu+0x24f0>)
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d113      	bne.n	80039aa <menu+0x23ee>
				finalCount += calismaCountDemo * 255; //sıfır durumu da dahil ediliyor
 8003982:	4b54      	ldr	r3, [pc, #336]	@ (8003ad4 <menu+0x2518>)
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	4613      	mov	r3, r2
 800398a:	021b      	lsls	r3, r3, #8
 800398c:	1a9a      	subs	r2, r3, r2
 800398e:	4b4e      	ldr	r3, [pc, #312]	@ (8003ac8 <menu+0x250c>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4413      	add	r3, r2
 8003994:	4a4c      	ldr	r2, [pc, #304]	@ (8003ac8 <menu+0x250c>)
 8003996:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisiDemo;
 8003998:	4b4f      	ldr	r3, [pc, #316]	@ (8003ad8 <menu+0x251c>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	4b4a      	ldr	r3, [pc, #296]	@ (8003ac8 <menu+0x250c>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4413      	add	r3, r2
 80039a4:	4a48      	ldr	r2, [pc, #288]	@ (8003ac8 <menu+0x250c>)
 80039a6:	6013      	str	r3, [r2, #0]
 80039a8:	e012      	b.n	80039d0 <menu+0x2414>
			} else {
				finalCount += calismaCount * 255; //sıfır durumu da dahil ediliyor
 80039aa:	4b4c      	ldr	r3, [pc, #304]	@ (8003adc <menu+0x2520>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	4613      	mov	r3, r2
 80039b2:	021b      	lsls	r3, r3, #8
 80039b4:	1a9a      	subs	r2, r3, r2
 80039b6:	4b44      	ldr	r3, [pc, #272]	@ (8003ac8 <menu+0x250c>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4413      	add	r3, r2
 80039bc:	4a42      	ldr	r2, [pc, #264]	@ (8003ac8 <menu+0x250c>)
 80039be:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisi;
 80039c0:	4b47      	ldr	r3, [pc, #284]	@ (8003ae0 <menu+0x2524>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	461a      	mov	r2, r3
 80039c6:	4b40      	ldr	r3, [pc, #256]	@ (8003ac8 <menu+0x250c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4413      	add	r3, r2
 80039cc:	4a3e      	ldr	r2, [pc, #248]	@ (8003ac8 <menu+0x250c>)
 80039ce:	6013      	str	r3, [r2, #0]
			}

			displayCycleOnLCD(finalCount);
 80039d0:	4b3d      	ldr	r3, [pc, #244]	@ (8003ac8 <menu+0x250c>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 fa89 	bl	8003eec <displayCycleOnLCD>
 80039da:	e00d      	b.n	80039f8 <menu+0x243c>
		} else if(calismaSayModu == 1) {
 80039dc:	4b3b      	ldr	r3, [pc, #236]	@ (8003acc <menu+0x2510>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d109      	bne.n	80039f8 <menu+0x243c>
			lcd_print(1, 1, calismaSayisiText);
 80039e4:	4a3a      	ldr	r2, [pc, #232]	@ (8003ad0 <menu+0x2514>)
 80039e6:	2101      	movs	r1, #1
 80039e8:	2001      	movs	r0, #1
 80039ea:	f005 faeb 	bl	8008fc4 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 80039ee:	4a3d      	ldr	r2, [pc, #244]	@ (8003ae4 <menu+0x2528>)
 80039f0:	2101      	movs	r1, #1
 80039f2:	2002      	movs	r0, #2
 80039f4:	f005 fae6 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039f8:	2102      	movs	r1, #2
 80039fa:	482e      	ldr	r0, [pc, #184]	@ (8003ab4 <menu+0x24f8>)
 80039fc:	f006 fe26 	bl	800a64c <HAL_GPIO_ReadPin>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d115      	bne.n	8003a32 <menu+0x2476>
 8003a06:	4b2c      	ldr	r3, [pc, #176]	@ (8003ab8 <menu+0x24fc>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	f083 0301 	eor.w	r3, r3, #1
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00e      	beq.n	8003a32 <menu+0x2476>
			calismaSayModu = calismaSayModu + 1;
 8003a14:	4b2d      	ldr	r3, [pc, #180]	@ (8003acc <menu+0x2510>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8003acc <menu+0x2510>)
 8003a1e:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8003a20:	4b2a      	ldr	r3, [pc, #168]	@ (8003acc <menu+0x2510>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d902      	bls.n	8003a2e <menu+0x2472>
				calismaSayModu = 0;
 8003a28:	4b28      	ldr	r3, [pc, #160]	@ (8003acc <menu+0x2510>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a2e:	f000 fb0b 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a32:	2104      	movs	r1, #4
 8003a34:	481f      	ldr	r0, [pc, #124]	@ (8003ab4 <menu+0x24f8>)
 8003a36:	f006 fe09 	bl	800a64c <HAL_GPIO_ReadPin>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d115      	bne.n	8003a6c <menu+0x24b0>
 8003a40:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab8 <menu+0x24fc>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	f083 0301 	eor.w	r3, r3, #1
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00e      	beq.n	8003a6c <menu+0x24b0>
			calismaSayModu = calismaSayModu - 1;
 8003a4e:	4b1f      	ldr	r3, [pc, #124]	@ (8003acc <menu+0x2510>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	4b1d      	ldr	r3, [pc, #116]	@ (8003acc <menu+0x2510>)
 8003a58:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8003a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8003acc <menu+0x2510>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <menu+0x24ac>
		   		calismaSayModu = 1;
 8003a62:	4b1a      	ldr	r3, [pc, #104]	@ (8003acc <menu+0x2510>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a68:	f000 faee 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a6c:	2108      	movs	r1, #8
 8003a6e:	4811      	ldr	r0, [pc, #68]	@ (8003ab4 <menu+0x24f8>)
 8003a70:	f006 fdec 	bl	800a64c <HAL_GPIO_ReadPin>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d148      	bne.n	8003b0c <menu+0x2550>
 8003a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab8 <menu+0x24fc>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	f083 0301 	eor.w	r3, r3, #1
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d041      	beq.n	8003b0c <menu+0x2550>
			if(demoMode == 1) {
 8003a88:	4b08      	ldr	r3, [pc, #32]	@ (8003aac <menu+0x24f0>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d12b      	bne.n	8003ae8 <menu+0x252c>
				eepromData[28] = 0;
 8003a90:	4b0a      	ldr	r3, [pc, #40]	@ (8003abc <menu+0x2500>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	771a      	strb	r2, [r3, #28]
				eepromData[30] = 0;
 8003a96:	4b09      	ldr	r3, [pc, #36]	@ (8003abc <menu+0x2500>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	779a      	strb	r2, [r3, #30]
				calismaSayisiDemo = 0;
 8003a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ad8 <menu+0x251c>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	701a      	strb	r2, [r3, #0]
				calismaCountDemo = 0;
 8003aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <menu+0x2518>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	701a      	strb	r2, [r3, #0]
 8003aa8:	e02a      	b.n	8003b00 <menu+0x2544>
 8003aaa:	bf00      	nop
 8003aac:	200014da 	.word	0x200014da
 8003ab0:	200017b0 	.word	0x200017b0
 8003ab4:	40010800 	.word	0x40010800
 8003ab8:	200014eb 	.word	0x200014eb
 8003abc:	20000fec 	.word	0x20000fec
 8003ac0:	200014e8 	.word	0x200014e8
 8003ac4:	200014bc 	.word	0x200014bc
 8003ac8:	200014b8 	.word	0x200014b8
 8003acc:	200014db 	.word	0x200014db
 8003ad0:	20001b0c 	.word	0x20001b0c
 8003ad4:	200014b7 	.word	0x200014b7
 8003ad8:	200014b5 	.word	0x200014b5
 8003adc:	200014b6 	.word	0x200014b6
 8003ae0:	200014b4 	.word	0x200014b4
 8003ae4:	20001b20 	.word	0x20001b20
			} else {
				eepromData[27] = 0;
 8003ae8:	4b4b      	ldr	r3, [pc, #300]	@ (8003c18 <menu+0x265c>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	76da      	strb	r2, [r3, #27]
				eepromData[29] = 0;
 8003aee:	4b4a      	ldr	r3, [pc, #296]	@ (8003c18 <menu+0x265c>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	775a      	strb	r2, [r3, #29]
				calismaSayisi = 0;
 8003af4:	4b49      	ldr	r3, [pc, #292]	@ (8003c1c <menu+0x2660>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	701a      	strb	r2, [r3, #0]
				calismaCount = 0;
 8003afa:	4b49      	ldr	r3, [pc, #292]	@ (8003c20 <menu+0x2664>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	701a      	strb	r2, [r3, #0]
			}
			calismaSayModu = 0;
 8003b00:	4b48      	ldr	r3, [pc, #288]	@ (8003c24 <menu+0x2668>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003b06:	4b48      	ldr	r3, [pc, #288]	@ (8003c28 <menu+0x266c>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8003b0c:	4b47      	ldr	r3, [pc, #284]	@ (8003c2c <menu+0x2670>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b1e      	cmp	r3, #30
 8003b12:	d16a      	bne.n	8003bea <menu+0x262e>
		calismaSayModu = 0;
 8003b14:	4b43      	ldr	r3, [pc, #268]	@ (8003c24 <menu+0x2668>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 8003b1a:	4a45      	ldr	r2, [pc, #276]	@ (8003c30 <menu+0x2674>)
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	2001      	movs	r0, #1
 8003b20:	f005 fa50 	bl	8008fc4 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 8003b24:	4a43      	ldr	r2, [pc, #268]	@ (8003c34 <menu+0x2678>)
 8003b26:	2101      	movs	r1, #1
 8003b28:	2002      	movs	r0, #2
 8003b2a:	f005 fa4b 	bl	8008fc4 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b2e:	2102      	movs	r1, #2
 8003b30:	4841      	ldr	r0, [pc, #260]	@ (8003c38 <menu+0x267c>)
 8003b32:	f006 fd8b 	bl	800a64c <HAL_GPIO_ReadPin>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d11c      	bne.n	8003b76 <menu+0x25ba>
 8003b3c:	4b3f      	ldr	r3, [pc, #252]	@ (8003c3c <menu+0x2680>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	f083 0301 	eor.w	r3, r3, #1
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d015      	beq.n	8003b76 <menu+0x25ba>
			dilSecim = dilSecim + 1;
 8003b4a:	4b3d      	ldr	r3, [pc, #244]	@ (8003c40 <menu+0x2684>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	4b3b      	ldr	r3, [pc, #236]	@ (8003c40 <menu+0x2684>)
 8003b54:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003b56:	4b3a      	ldr	r3, [pc, #232]	@ (8003c40 <menu+0x2684>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d902      	bls.n	8003b64 <menu+0x25a8>
				dilSecim = 0;
 8003b5e:	4b38      	ldr	r3, [pc, #224]	@ (8003c40 <menu+0x2684>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
			}
			resetMenuTexts();
 8003b64:	f003 ff70 	bl	8007a48 <resetMenuTexts>
			loadMenuTexts(dilSecim);
 8003b68:	4b35      	ldr	r3, [pc, #212]	@ (8003c40 <menu+0x2684>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f002 fae5 	bl	800613c <loadMenuTexts>

			bekle();
 8003b72:	f000 fa69 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b76:	2104      	movs	r1, #4
 8003b78:	482f      	ldr	r0, [pc, #188]	@ (8003c38 <menu+0x267c>)
 8003b7a:	f006 fd67 	bl	800a64c <HAL_GPIO_ReadPin>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d11c      	bne.n	8003bbe <menu+0x2602>
 8003b84:	4b2d      	ldr	r3, [pc, #180]	@ (8003c3c <menu+0x2680>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	f083 0301 	eor.w	r3, r3, #1
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d015      	beq.n	8003bbe <menu+0x2602>
			dilSecim = dilSecim - 1;
 8003b92:	4b2b      	ldr	r3, [pc, #172]	@ (8003c40 <menu+0x2684>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	4b29      	ldr	r3, [pc, #164]	@ (8003c40 <menu+0x2684>)
 8003b9c:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003b9e:	4b28      	ldr	r3, [pc, #160]	@ (8003c40 <menu+0x2684>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d002      	beq.n	8003bac <menu+0x25f0>
		   		dilSecim = 1;
 8003ba6:	4b26      	ldr	r3, [pc, #152]	@ (8003c40 <menu+0x2684>)
 8003ba8:	2201      	movs	r2, #1
 8003baa:	701a      	strb	r2, [r3, #0]
		   	}
		   	resetMenuTexts();
 8003bac:	f003 ff4c 	bl	8007a48 <resetMenuTexts>
		   	loadMenuTexts(dilSecim);
 8003bb0:	4b23      	ldr	r3, [pc, #140]	@ (8003c40 <menu+0x2684>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f002 fac1 	bl	800613c <loadMenuTexts>

			bekle();
 8003bba:	f000 fa45 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bbe:	2108      	movs	r1, #8
 8003bc0:	481d      	ldr	r0, [pc, #116]	@ (8003c38 <menu+0x267c>)
 8003bc2:	f006 fd43 	bl	800a64c <HAL_GPIO_ReadPin>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d10e      	bne.n	8003bea <menu+0x262e>
 8003bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8003c3c <menu+0x2680>)
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	f083 0301 	eor.w	r3, r3, #1
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d007      	beq.n	8003bea <menu+0x262e>
			eepromData[33] = dilSecim;
 8003bda:	4b19      	ldr	r3, [pc, #100]	@ (8003c40 <menu+0x2684>)
 8003bdc:	781a      	ldrb	r2, [r3, #0]
 8003bde:	4b0e      	ldr	r3, [pc, #56]	@ (8003c18 <menu+0x265c>)
 8003be0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 8003be4:	4b10      	ldr	r3, [pc, #64]	@ (8003c28 <menu+0x266c>)
 8003be6:	2201      	movs	r2, #1
 8003be8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003bea:	4b10      	ldr	r3, [pc, #64]	@ (8003c2c <menu+0x2670>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b1f      	cmp	r3, #31
 8003bf0:	f040 8087 	bne.w	8003d02 <menu+0x2746>
		calismaSayModu = 0;
 8003bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c24 <menu+0x2668>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 8003bfa:	4a12      	ldr	r2, [pc, #72]	@ (8003c44 <menu+0x2688>)
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	2001      	movs	r0, #1
 8003c00:	f005 f9e0 	bl	8008fc4 <lcd_print>

		if(iotMode == 0) {
 8003c04:	4b10      	ldr	r3, [pc, #64]	@ (8003c48 <menu+0x268c>)
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d121      	bne.n	8003c50 <menu+0x2694>
			lcd_print(2, 1, pasifText);
 8003c0c:	4a0f      	ldr	r2, [pc, #60]	@ (8003c4c <menu+0x2690>)
 8003c0e:	2101      	movs	r1, #1
 8003c10:	2002      	movs	r0, #2
 8003c12:	f005 f9d7 	bl	8008fc4 <lcd_print>
 8003c16:	e024      	b.n	8003c62 <menu+0x26a6>
 8003c18:	20000fec 	.word	0x20000fec
 8003c1c:	200014b4 	.word	0x200014b4
 8003c20:	200014b6 	.word	0x200014b6
 8003c24:	200014db 	.word	0x200014db
 8003c28:	200014e8 	.word	0x200014e8
 8003c2c:	200014bc 	.word	0x200014bc
 8003c30:	20001b34 	.word	0x20001b34
 8003c34:	20001b48 	.word	0x20001b48
 8003c38:	40010800 	.word	0x40010800
 8003c3c:	200014eb 	.word	0x200014eb
 8003c40:	200014dc 	.word	0x200014dc
 8003c44:	20000150 	.word	0x20000150
 8003c48:	200014e7 	.word	0x200014e7
 8003c4c:	2000179c 	.word	0x2000179c
		} else if(iotMode == 1) {
 8003c50:	4b99      	ldr	r3, [pc, #612]	@ (8003eb8 <menu+0x28fc>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d104      	bne.n	8003c62 <menu+0x26a6>
			lcd_print(2, 1, aktifText);
 8003c58:	4a98      	ldr	r2, [pc, #608]	@ (8003ebc <menu+0x2900>)
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	2002      	movs	r0, #2
 8003c5e:	f005 f9b1 	bl	8008fc4 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c62:	2102      	movs	r1, #2
 8003c64:	4896      	ldr	r0, [pc, #600]	@ (8003ec0 <menu+0x2904>)
 8003c66:	f006 fcf1 	bl	800a64c <HAL_GPIO_ReadPin>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d115      	bne.n	8003c9c <menu+0x26e0>
 8003c70:	4b94      	ldr	r3, [pc, #592]	@ (8003ec4 <menu+0x2908>)
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	f083 0301 	eor.w	r3, r3, #1
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00e      	beq.n	8003c9c <menu+0x26e0>
			iotMode = iotMode + 1;
 8003c7e:	4b8e      	ldr	r3, [pc, #568]	@ (8003eb8 <menu+0x28fc>)
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	3301      	adds	r3, #1
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	4b8c      	ldr	r3, [pc, #560]	@ (8003eb8 <menu+0x28fc>)
 8003c88:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003c8a:	4b8b      	ldr	r3, [pc, #556]	@ (8003eb8 <menu+0x28fc>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d902      	bls.n	8003c98 <menu+0x26dc>
				iotMode = 0;
 8003c92:	4b89      	ldr	r3, [pc, #548]	@ (8003eb8 <menu+0x28fc>)
 8003c94:	2200      	movs	r2, #0
 8003c96:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003c98:	f000 f9d6 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c9c:	2104      	movs	r1, #4
 8003c9e:	4888      	ldr	r0, [pc, #544]	@ (8003ec0 <menu+0x2904>)
 8003ca0:	f006 fcd4 	bl	800a64c <HAL_GPIO_ReadPin>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d115      	bne.n	8003cd6 <menu+0x271a>
 8003caa:	4b86      	ldr	r3, [pc, #536]	@ (8003ec4 <menu+0x2908>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	f083 0301 	eor.w	r3, r3, #1
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00e      	beq.n	8003cd6 <menu+0x271a>
			iotMode = iotMode - 1;
 8003cb8:	4b7f      	ldr	r3, [pc, #508]	@ (8003eb8 <menu+0x28fc>)
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	b2da      	uxtb	r2, r3
 8003cc0:	4b7d      	ldr	r3, [pc, #500]	@ (8003eb8 <menu+0x28fc>)
 8003cc2:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003cc4:	4b7c      	ldr	r3, [pc, #496]	@ (8003eb8 <menu+0x28fc>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <menu+0x2716>
		   		iotMode = 1;
 8003ccc:	4b7a      	ldr	r3, [pc, #488]	@ (8003eb8 <menu+0x28fc>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003cd2:	f000 f9b9 	bl	8004048 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cd6:	2108      	movs	r1, #8
 8003cd8:	4879      	ldr	r0, [pc, #484]	@ (8003ec0 <menu+0x2904>)
 8003cda:	f006 fcb7 	bl	800a64c <HAL_GPIO_ReadPin>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d10e      	bne.n	8003d02 <menu+0x2746>
 8003ce4:	4b77      	ldr	r3, [pc, #476]	@ (8003ec4 <menu+0x2908>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	f083 0301 	eor.w	r3, r3, #1
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d007      	beq.n	8003d02 <menu+0x2746>
			eepromData[48] = iotMode;
 8003cf2:	4b71      	ldr	r3, [pc, #452]	@ (8003eb8 <menu+0x28fc>)
 8003cf4:	781a      	ldrb	r2, [r3, #0]
 8003cf6:	4b74      	ldr	r3, [pc, #464]	@ (8003ec8 <menu+0x290c>)
 8003cf8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003cfc:	4b73      	ldr	r3, [pc, #460]	@ (8003ecc <menu+0x2910>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003d02:	4b73      	ldr	r3, [pc, #460]	@ (8003ed0 <menu+0x2914>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	d127      	bne.n	8003d5a <menu+0x279e>
		calismaSayModu = 0;
 8003d0a:	4b72      	ldr	r3, [pc, #456]	@ (8003ed4 <menu+0x2918>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, machineIDText);
 8003d10:	4a71      	ldr	r2, [pc, #452]	@ (8003ed8 <menu+0x291c>)
 8003d12:	2101      	movs	r1, #1
 8003d14:	2001      	movs	r0, #1
 8003d16:	f005 f955 	bl	8008fc4 <lcd_print>

		convertArrays(1);
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	f7fc fdc4 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003d20:	2032      	movs	r0, #50	@ 0x32
 8003d22:	f005 fec3 	bl	8009aac <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8003d26:	2001      	movs	r0, #1
 8003d28:	f7fd fbec 	bl	8001504 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d2c:	2102      	movs	r1, #2
 8003d2e:	4864      	ldr	r0, [pc, #400]	@ (8003ec0 <menu+0x2904>)
 8003d30:	f006 fc8c 	bl	800a64c <HAL_GPIO_ReadPin>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d10f      	bne.n	8003d5a <menu+0x279e>
 8003d3a:	2104      	movs	r1, #4
 8003d3c:	4860      	ldr	r0, [pc, #384]	@ (8003ec0 <menu+0x2904>)
 8003d3e:	f006 fc85 	bl	800a64c <HAL_GPIO_ReadPin>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d108      	bne.n	8003d5a <menu+0x279e>
 8003d48:	4b5e      	ldr	r3, [pc, #376]	@ (8003ec4 <menu+0x2908>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	f083 0301 	eor.w	r3, r3, #1
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d001      	beq.n	8003d5a <menu+0x279e>
			takeMachineIDWithConfirmation();
 8003d56:	f004 f8eb 	bl	8007f30 <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 8003d5a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ed0 <menu+0x2914>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b21      	cmp	r3, #33	@ 0x21
 8003d60:	d12b      	bne.n	8003dba <menu+0x27fe>
		calismaSayModu = 0;
 8003d62:	4b5c      	ldr	r3, [pc, #368]	@ (8003ed4 <menu+0x2918>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 8003d68:	2002      	movs	r0, #2
 8003d6a:	f7fc fd9d 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003d6e:	2032      	movs	r0, #50	@ 0x32
 8003d70:	f005 fe9c 	bl	8009aac <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003d74:	2002      	movs	r0, #2
 8003d76:	f7fd fbc5 	bl	8001504 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d7a:	2102      	movs	r1, #2
 8003d7c:	4850      	ldr	r0, [pc, #320]	@ (8003ec0 <menu+0x2904>)
 8003d7e:	f006 fc65 	bl	800a64c <HAL_GPIO_ReadPin>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d118      	bne.n	8003dba <menu+0x27fe>
 8003d88:	2104      	movs	r1, #4
 8003d8a:	484d      	ldr	r0, [pc, #308]	@ (8003ec0 <menu+0x2904>)
 8003d8c:	f006 fc5e 	bl	800a64c <HAL_GPIO_ReadPin>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d111      	bne.n	8003dba <menu+0x27fe>
 8003d96:	4b4b      	ldr	r3, [pc, #300]	@ (8003ec4 <menu+0x2908>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	f083 0301 	eor.w	r3, r3, #1
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00a      	beq.n	8003dba <menu+0x27fe>
			takeWifiSSID();
 8003da4:	f004 fad0 	bl	8008348 <takeWifiSSID>

			convertArrays(2);
 8003da8:	2002      	movs	r0, #2
 8003daa:	f7fc fd7d 	bl	80008a8 <convertArrays>
			HAL_Delay(50);
 8003dae:	2032      	movs	r0, #50	@ 0x32
 8003db0:	f005 fe7c 	bl	8009aac <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003db4:	2002      	movs	r0, #2
 8003db6:	f7fd fba5 	bl	8001504 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003dba:	4b45      	ldr	r3, [pc, #276]	@ (8003ed0 <menu+0x2914>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b22      	cmp	r3, #34	@ 0x22
 8003dc0:	d12b      	bne.n	8003e1a <menu+0x285e>
		calismaSayModu = 0;
 8003dc2:	4b44      	ldr	r3, [pc, #272]	@ (8003ed4 <menu+0x2918>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8003dc8:	2003      	movs	r0, #3
 8003dca:	f7fc fd6d 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003dce:	2032      	movs	r0, #50	@ 0x32
 8003dd0:	f005 fe6c 	bl	8009aac <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003dd4:	2003      	movs	r0, #3
 8003dd6:	f7fd fb95 	bl	8001504 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dda:	2102      	movs	r1, #2
 8003ddc:	4838      	ldr	r0, [pc, #224]	@ (8003ec0 <menu+0x2904>)
 8003dde:	f006 fc35 	bl	800a64c <HAL_GPIO_ReadPin>
 8003de2:	4603      	mov	r3, r0
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d118      	bne.n	8003e1a <menu+0x285e>
 8003de8:	2104      	movs	r1, #4
 8003dea:	4835      	ldr	r0, [pc, #212]	@ (8003ec0 <menu+0x2904>)
 8003dec:	f006 fc2e 	bl	800a64c <HAL_GPIO_ReadPin>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d111      	bne.n	8003e1a <menu+0x285e>
 8003df6:	4b33      	ldr	r3, [pc, #204]	@ (8003ec4 <menu+0x2908>)
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	f083 0301 	eor.w	r3, r3, #1
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00a      	beq.n	8003e1a <menu+0x285e>
			takeWifiPass();
 8003e04:	f004 fc4c 	bl	80086a0 <takeWifiPass>

			convertArrays(3);
 8003e08:	2003      	movs	r0, #3
 8003e0a:	f7fc fd4d 	bl	80008a8 <convertArrays>
			HAL_Delay(50);
 8003e0e:	2032      	movs	r0, #50	@ 0x32
 8003e10:	f005 fe4c 	bl	8009aac <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8003e14:	2003      	movs	r0, #3
 8003e16:	f7fd fb75 	bl	8001504 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8003e1a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ed0 <menu+0x2914>)
 8003e1c:	781b      	ldrb	r3, [r3, #0]
 8003e1e:	2b23      	cmp	r3, #35	@ 0x23
 8003e20:	d146      	bne.n	8003eb0 <menu+0x28f4>
		lcd_print(1, 1, menudenCikisText);
 8003e22:	4a2e      	ldr	r2, [pc, #184]	@ (8003edc <menu+0x2920>)
 8003e24:	2101      	movs	r1, #1
 8003e26:	2001      	movs	r0, #1
 8003e28:	f005 f8cc 	bl	8008fc4 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003e2c:	4a2c      	ldr	r2, [pc, #176]	@ (8003ee0 <menu+0x2924>)
 8003e2e:	2101      	movs	r1, #1
 8003e30:	2002      	movs	r0, #2
 8003e32:	f005 f8c7 	bl	8008fc4 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003e36:	2108      	movs	r1, #8
 8003e38:	4821      	ldr	r0, [pc, #132]	@ (8003ec0 <menu+0x2904>)
 8003e3a:	f006 fc07 	bl	800a64c <HAL_GPIO_ReadPin>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d135      	bne.n	8003eb0 <menu+0x28f4>
			menuGiris = 0;
 8003e44:	4b27      	ldr	r3, [pc, #156]	@ (8003ee4 <menu+0x2928>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	701a      	strb	r2, [r3, #0]

			uint32_t startTick = HAL_GetTick();
 8003e4a:	f005 fe25 	bl	8009a98 <HAL_GetTick>
 8003e4e:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003e50:	e007      	b.n	8003e62 <menu+0x28a6>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003e52:	f005 fe21 	bl	8009a98 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e60:	d806      	bhi.n	8003e70 <menu+0x28b4>
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003e62:	4821      	ldr	r0, [pc, #132]	@ (8003ee8 <menu+0x292c>)
 8003e64:	f007 fa1b 	bl	800b29e <HAL_I2C_GetError>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d0f1      	beq.n	8003e52 <menu+0x2896>
 8003e6e:	e000      	b.n	8003e72 <menu+0x28b6>
			        break;
 8003e70:	bf00      	nop
			    }
			}

			startTick = HAL_GetTick();
 8003e72:	f005 fe11 	bl	8009a98 <HAL_GetTick>
 8003e76:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003e78:	e007      	b.n	8003e8a <menu+0x28ce>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003e7a:	f005 fe0d 	bl	8009a98 <HAL_GetTick>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	1ad3      	subs	r3, r2, r3
 8003e84:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e88:	d806      	bhi.n	8003e98 <menu+0x28dc>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003e8a:	4817      	ldr	r0, [pc, #92]	@ (8003ee8 <menu+0x292c>)
 8003e8c:	f007 f9fa 	bl	800b284 <HAL_I2C_GetState>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	d1f1      	bne.n	8003e7a <menu+0x28be>
 8003e96:	e000      	b.n	8003e9a <menu+0x28de>
			        break;
 8003e98:	bf00      	nop
			    }
			}

			saveEEPROM(0);
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	f7fc fc02 	bl	80006a4 <saveEEPROM>

			lcd_clear();
 8003ea0:	f005 f8bc 	bl	800901c <lcd_clear>
			HAL_Delay(500);
 8003ea4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003ea8:	f005 fe00 	bl	8009aac <HAL_Delay>
			NVIC_SystemReset();
 8003eac:	f7fd fb70 	bl	8001590 <__NVIC_SystemReset>
		}
	}
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	200014e7 	.word	0x200014e7
 8003ebc:	200017b0 	.word	0x200017b0
 8003ec0:	40010800 	.word	0x40010800
 8003ec4:	200014eb 	.word	0x200014eb
 8003ec8:	20000fec 	.word	0x20000fec
 8003ecc:	200014e8 	.word	0x200014e8
 8003ed0:	200014bc 	.word	0x200014bc
 8003ed4:	200014db 	.word	0x200014db
 8003ed8:	20001cc4 	.word	0x20001cc4
 8003edc:	20001b5c 	.word	0x20001b5c
 8003ee0:	20001b70 	.word	0x20001b70
 8003ee4:	200014d9 	.word	0x200014d9
 8003ee8:	20001d3c 	.word	0x20001d3c

08003eec <displayCycleOnLCD>:

void displayCycleOnLCD(int finalCount) {
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08a      	sub	sp, #40	@ 0x28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
    int padding, i;

    itoa(finalCount, snum, 10);
 8003ef4:	220a      	movs	r2, #10
 8003ef6:	491c      	ldr	r1, [pc, #112]	@ (8003f68 <displayCycleOnLCD+0x7c>)
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f009 fd19 	bl	800d930 <itoa>

    int length = strlen(snum);
 8003efe:	481a      	ldr	r0, [pc, #104]	@ (8003f68 <displayCycleOnLCD+0x7c>)
 8003f00:	f7fc f990 	bl	8000224 <strlen>
 8003f04:	4603      	mov	r3, r0
 8003f06:	623b      	str	r3, [r7, #32]

    padding = (16 - length) / 2;
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	f1c3 0310 	rsb	r3, r3, #16
 8003f0e:	0fda      	lsrs	r2, r3, #31
 8003f10:	4413      	add	r3, r2
 8003f12:	105b      	asrs	r3, r3, #1
 8003f14:	61fb      	str	r3, [r7, #28]

    char displayLine[17];
    memset(displayLine, ' ', 16);
 8003f16:	f107 0308 	add.w	r3, r7, #8
 8003f1a:	2210      	movs	r2, #16
 8003f1c:	2120      	movs	r1, #32
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f009 fe20 	bl	800db64 <memset>
    displayLine[16] = '\0'; // Null terminator
 8003f24:	2300      	movs	r3, #0
 8003f26:	763b      	strb	r3, [r7, #24]

    for (i = 0; i < length; i++) {
 8003f28:	2300      	movs	r3, #0
 8003f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f2c:	e00d      	b.n	8003f4a <displayCycleOnLCD+0x5e>
        displayLine[padding + i] = snum[i];
 8003f2e:	69fa      	ldr	r2, [r7, #28]
 8003f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f32:	4413      	add	r3, r2
 8003f34:	490c      	ldr	r1, [pc, #48]	@ (8003f68 <displayCycleOnLCD+0x7c>)
 8003f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f38:	440a      	add	r2, r1
 8003f3a:	7812      	ldrb	r2, [r2, #0]
 8003f3c:	3328      	adds	r3, #40	@ 0x28
 8003f3e:	443b      	add	r3, r7
 8003f40:	f803 2c20 	strb.w	r2, [r3, #-32]
    for (i = 0; i < length; i++) {
 8003f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f46:	3301      	adds	r3, #1
 8003f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f4c:	6a3b      	ldr	r3, [r7, #32]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	dbed      	blt.n	8003f2e <displayCycleOnLCD+0x42>
    }

    lcd_print(2, 1, displayLine);
 8003f52:	f107 0308 	add.w	r3, r7, #8
 8003f56:	461a      	mov	r2, r3
 8003f58:	2101      	movs	r1, #1
 8003f5a:	2002      	movs	r0, #2
 8003f5c:	f005 f832 	bl	8008fc4 <lcd_print>
}
 8003f60:	bf00      	nop
 8003f62:	3728      	adds	r7, #40	@ 0x28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	2000105c 	.word	0x2000105c

08003f6c <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	4603      	mov	r3, r0
 8003f74:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003f76:	79fb      	ldrb	r3, [r7, #7]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d105      	bne.n	8003f88 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003f7c:	4a24      	ldr	r2, [pc, #144]	@ (8004010 <lcdUpdate+0xa4>)
 8003f7e:	2101      	movs	r1, #1
 8003f80:	2002      	movs	r0, #2
 8003f82:	f005 f81f 	bl	8008fc4 <lcd_print>
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
		HAL_Delay(10);
	}
}
 8003f86:	e03e      	b.n	8004006 <lcdUpdate+0x9a>
	} else if(y==2) {
 8003f88:	79fb      	ldrb	r3, [r7, #7]
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d105      	bne.n	8003f9a <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003f8e:	4a20      	ldr	r2, [pc, #128]	@ (8004010 <lcdUpdate+0xa4>)
 8003f90:	2102      	movs	r1, #2
 8003f92:	2002      	movs	r0, #2
 8003f94:	f005 f816 	bl	8008fc4 <lcd_print>
}
 8003f98:	e035      	b.n	8004006 <lcdUpdate+0x9a>
	} else if(y==3) {
 8003f9a:	79fb      	ldrb	r3, [r7, #7]
 8003f9c:	2b03      	cmp	r3, #3
 8003f9e:	d105      	bne.n	8003fac <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8004010 <lcdUpdate+0xa4>)
 8003fa2:	2103      	movs	r1, #3
 8003fa4:	2002      	movs	r0, #2
 8003fa6:	f005 f80d 	bl	8008fc4 <lcd_print>
}
 8003faa:	e02c      	b.n	8004006 <lcdUpdate+0x9a>
	} else if(y==4) {
 8003fac:	79fb      	ldrb	r3, [r7, #7]
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d105      	bne.n	8003fbe <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003fb2:	4a17      	ldr	r2, [pc, #92]	@ (8004010 <lcdUpdate+0xa4>)
 8003fb4:	2104      	movs	r1, #4
 8003fb6:	2002      	movs	r0, #2
 8003fb8:	f005 f804 	bl	8008fc4 <lcd_print>
}
 8003fbc:	e023      	b.n	8004006 <lcdUpdate+0x9a>
	} else if(y==5) {
 8003fbe:	79fb      	ldrb	r3, [r7, #7]
 8003fc0:	2b05      	cmp	r3, #5
 8003fc2:	d105      	bne.n	8003fd0 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003fc4:	4a12      	ldr	r2, [pc, #72]	@ (8004010 <lcdUpdate+0xa4>)
 8003fc6:	2105      	movs	r1, #5
 8003fc8:	2002      	movs	r0, #2
 8003fca:	f004 fffb 	bl	8008fc4 <lcd_print>
}
 8003fce:	e01a      	b.n	8004006 <lcdUpdate+0x9a>
	} else if(y==6) {
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
 8003fd2:	2b06      	cmp	r3, #6
 8003fd4:	d105      	bne.n	8003fe2 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8003fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8004010 <lcdUpdate+0xa4>)
 8003fd8:	2106      	movs	r1, #6
 8003fda:	2002      	movs	r0, #2
 8003fdc:	f004 fff2 	bl	8008fc4 <lcd_print>
}
 8003fe0:	e011      	b.n	8004006 <lcdUpdate+0x9a>
	} else if (y==7) {
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	2b07      	cmp	r3, #7
 8003fe6:	d10e      	bne.n	8004006 <lcdUpdate+0x9a>
		lcd_clear();
 8003fe8:	f005 f818 	bl	800901c <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8003fec:	4a09      	ldr	r2, [pc, #36]	@ (8004014 <lcdUpdate+0xa8>)
 8003fee:	2101      	movs	r1, #1
 8003ff0:	2001      	movs	r0, #1
 8003ff2:	f004 ffe7 	bl	8008fc4 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8003ff6:	4a08      	ldr	r2, [pc, #32]	@ (8004018 <lcdUpdate+0xac>)
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	2002      	movs	r0, #2
 8003ffc:	f004 ffe2 	bl	8008fc4 <lcd_print>
		HAL_Delay(10);
 8004000:	200a      	movs	r0, #10
 8004002:	f005 fd53 	bl	8009aac <HAL_Delay>
}
 8004006:	bf00      	nop
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	0800f090 	.word	0x0800f090
 8004014:	200000c4 	.word	0x200000c4
 8004018:	200000d8 	.word	0x200000d8

0800401c <checkLCDBacklight>:

void checkLCDBacklight() {
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure) {
 8004020:	4b07      	ldr	r3, [pc, #28]	@ (8004040 <checkLCDBacklight+0x24>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	4b07      	ldr	r3, [pc, #28]	@ (8004044 <checkLCDBacklight+0x28>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b3b      	cmp	r3, #59	@ 0x3b
 800402c:	d903      	bls.n	8004036 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 800402e:	2000      	movs	r0, #0
 8004030:	f005 f814 	bl	800905c <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004034:	e002      	b.n	800403c <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004036:	2001      	movs	r0, #1
 8004038:	f005 f810 	bl	800905c <lcd_backlight>
}
 800403c:	bf00      	nop
 800403e:	bd80      	pop	{r7, pc}
 8004040:	20001494 	.word	0x20001494
 8004044:	200014b0 	.word	0x200014b0

08004048 <bekle>:

void bekle() {
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0
	timer1=millis;
 800404c:	4b47      	ldr	r3, [pc, #284]	@ (800416c <bekle+0x124>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a47      	ldr	r2, [pc, #284]	@ (8004170 <bekle+0x128>)
 8004052:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004054:	e002      	b.n	800405c <bekle+0x14>
    	butonKontrol = 1;
 8004056:	4b47      	ldr	r3, [pc, #284]	@ (8004174 <bekle+0x12c>)
 8004058:	2201      	movs	r2, #1
 800405a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800405c:	2101      	movs	r1, #1
 800405e:	4846      	ldr	r0, [pc, #280]	@ (8004178 <bekle+0x130>)
 8004060:	f006 faf4 	bl	800a64c <HAL_GPIO_ReadPin>
 8004064:	4603      	mov	r3, r0
 8004066:	2b01      	cmp	r3, #1
 8004068:	d109      	bne.n	800407e <bekle+0x36>
 800406a:	4b40      	ldr	r3, [pc, #256]	@ (800416c <bekle+0x124>)
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	4b40      	ldr	r3, [pc, #256]	@ (8004170 <bekle+0x128>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d0ef      	beq.n	8004056 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004076:	e002      	b.n	800407e <bekle+0x36>
    	butonKontrol = 1;
 8004078:	4b3e      	ldr	r3, [pc, #248]	@ (8004174 <bekle+0x12c>)
 800407a:	2201      	movs	r2, #1
 800407c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800407e:	2108      	movs	r1, #8
 8004080:	483e      	ldr	r0, [pc, #248]	@ (800417c <bekle+0x134>)
 8004082:	f006 fae3 	bl	800a64c <HAL_GPIO_ReadPin>
 8004086:	4603      	mov	r3, r0
 8004088:	2b01      	cmp	r3, #1
 800408a:	d109      	bne.n	80040a0 <bekle+0x58>
 800408c:	4b37      	ldr	r3, [pc, #220]	@ (800416c <bekle+0x124>)
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	4b37      	ldr	r3, [pc, #220]	@ (8004170 <bekle+0x128>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d0ef      	beq.n	8004078 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004098:	e002      	b.n	80040a0 <bekle+0x58>
    	butonKontrol = 1;
 800409a:	4b36      	ldr	r3, [pc, #216]	@ (8004174 <bekle+0x12c>)
 800409c:	2201      	movs	r2, #1
 800409e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80040a0:	2102      	movs	r1, #2
 80040a2:	4835      	ldr	r0, [pc, #212]	@ (8004178 <bekle+0x130>)
 80040a4:	f006 fad2 	bl	800a64c <HAL_GPIO_ReadPin>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d109      	bne.n	80040c2 <bekle+0x7a>
 80040ae:	4b2f      	ldr	r3, [pc, #188]	@ (800416c <bekle+0x124>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4b2f      	ldr	r3, [pc, #188]	@ (8004170 <bekle+0x128>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d0ef      	beq.n	800409a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80040ba:	e002      	b.n	80040c2 <bekle+0x7a>
    	butonKontrol = 1;
 80040bc:	4b2d      	ldr	r3, [pc, #180]	@ (8004174 <bekle+0x12c>)
 80040be:	2201      	movs	r2, #1
 80040c0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80040c2:	2104      	movs	r1, #4
 80040c4:	482c      	ldr	r0, [pc, #176]	@ (8004178 <bekle+0x130>)
 80040c6:	f006 fac1 	bl	800a64c <HAL_GPIO_ReadPin>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d109      	bne.n	80040e4 <bekle+0x9c>
 80040d0:	4b26      	ldr	r3, [pc, #152]	@ (800416c <bekle+0x124>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	4b26      	ldr	r3, [pc, #152]	@ (8004170 <bekle+0x128>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d0ef      	beq.n	80040bc <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80040dc:	e002      	b.n	80040e4 <bekle+0x9c>
    	butonKontrol = 1;
 80040de:	4b25      	ldr	r3, [pc, #148]	@ (8004174 <bekle+0x12c>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80040e4:	2108      	movs	r1, #8
 80040e6:	4824      	ldr	r0, [pc, #144]	@ (8004178 <bekle+0x130>)
 80040e8:	f006 fab0 	bl	800a64c <HAL_GPIO_ReadPin>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d109      	bne.n	8004106 <bekle+0xbe>
 80040f2:	4b1e      	ldr	r3, [pc, #120]	@ (800416c <bekle+0x124>)
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	4b1e      	ldr	r3, [pc, #120]	@ (8004170 <bekle+0x128>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d0ef      	beq.n	80040de <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80040fe:	e002      	b.n	8004106 <bekle+0xbe>
    	butonKontrol = 1;
 8004100:	4b1c      	ldr	r3, [pc, #112]	@ (8004174 <bekle+0x12c>)
 8004102:	2201      	movs	r2, #1
 8004104:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004106:	2180      	movs	r1, #128	@ 0x80
 8004108:	481c      	ldr	r0, [pc, #112]	@ (800417c <bekle+0x134>)
 800410a:	f006 fa9f 	bl	800a64c <HAL_GPIO_ReadPin>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d109      	bne.n	8004128 <bekle+0xe0>
 8004114:	4b15      	ldr	r3, [pc, #84]	@ (800416c <bekle+0x124>)
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	4b15      	ldr	r3, [pc, #84]	@ (8004170 <bekle+0x128>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d0ef      	beq.n	8004100 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004120:	e002      	b.n	8004128 <bekle+0xe0>
    	butonKontrol = 1;
 8004122:	4b14      	ldr	r3, [pc, #80]	@ (8004174 <bekle+0x12c>)
 8004124:	2201      	movs	r2, #1
 8004126:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004128:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800412c:	4813      	ldr	r0, [pc, #76]	@ (800417c <bekle+0x134>)
 800412e:	f006 fa8d 	bl	800a64c <HAL_GPIO_ReadPin>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d109      	bne.n	800414c <bekle+0x104>
 8004138:	4b0c      	ldr	r3, [pc, #48]	@ (800416c <bekle+0x124>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	4b0c      	ldr	r3, [pc, #48]	@ (8004170 <bekle+0x128>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d0ee      	beq.n	8004122 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004144:	e002      	b.n	800414c <bekle+0x104>
    	butonKontrol = 1;
 8004146:	4b0b      	ldr	r3, [pc, #44]	@ (8004174 <bekle+0x12c>)
 8004148:	2201      	movs	r2, #1
 800414a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800414c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004150:	480a      	ldr	r0, [pc, #40]	@ (800417c <bekle+0x134>)
 8004152:	f006 fa7b 	bl	800a64c <HAL_GPIO_ReadPin>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d105      	bne.n	8004168 <bekle+0x120>
 800415c:	4b03      	ldr	r3, [pc, #12]	@ (800416c <bekle+0x124>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	4b03      	ldr	r3, [pc, #12]	@ (8004170 <bekle+0x128>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d0ee      	beq.n	8004146 <bekle+0xfe>
    }

}
 8004168:	bf00      	nop
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20001494 	.word	0x20001494
 8004170:	2000149c 	.word	0x2000149c
 8004174:	200014eb 	.word	0x200014eb
 8004178:	40010800 	.word	0x40010800
 800417c:	40011000 	.word	0x40011000

08004180 <buttonCheck>:

uint8_t buttonCheck(void) {
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8004184:	2101      	movs	r1, #1
 8004186:	4815      	ldr	r0, [pc, #84]	@ (80041dc <buttonCheck+0x5c>)
 8004188:	f006 fa60 	bl	800a64c <HAL_GPIO_ReadPin>
 800418c:	4603      	mov	r3, r0
 800418e:	2b01      	cmp	r3, #1
 8004190:	d01b      	beq.n	80041ca <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8004192:	2108      	movs	r1, #8
 8004194:	4812      	ldr	r0, [pc, #72]	@ (80041e0 <buttonCheck+0x60>)
 8004196:	f006 fa59 	bl	800a64c <HAL_GPIO_ReadPin>
 800419a:	4603      	mov	r3, r0
 800419c:	2b01      	cmp	r3, #1
 800419e:	d014      	beq.n	80041ca <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 80041a0:	2102      	movs	r1, #2
 80041a2:	480e      	ldr	r0, [pc, #56]	@ (80041dc <buttonCheck+0x5c>)
 80041a4:	f006 fa52 	bl	800a64c <HAL_GPIO_ReadPin>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d00d      	beq.n	80041ca <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 80041ae:	2104      	movs	r1, #4
 80041b0:	480a      	ldr	r0, [pc, #40]	@ (80041dc <buttonCheck+0x5c>)
 80041b2:	f006 fa4b 	bl	800a64c <HAL_GPIO_ReadPin>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d006      	beq.n	80041ca <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 80041bc:	2108      	movs	r1, #8
 80041be:	4807      	ldr	r0, [pc, #28]	@ (80041dc <buttonCheck+0x5c>)
 80041c0:	f006 fa44 	bl	800a64c <HAL_GPIO_ReadPin>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d104      	bne.n	80041d4 <buttonCheck+0x54>
		backLightTimer = 0;
 80041ca:	4b06      	ldr	r3, [pc, #24]	@ (80041e4 <buttonCheck+0x64>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
		return 1;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e000      	b.n	80041d6 <buttonCheck+0x56>
	}
	return 0;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	40010800 	.word	0x40010800
 80041e0:	40011000 	.word	0x40011000
 80041e4:	200014b0 	.word	0x200014b0

080041e8 <checkBasincSalteri>:

void checkBasincSalteri() {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80041ec:	4b13      	ldr	r3, [pc, #76]	@ (800423c <checkBasincSalteri+0x54>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d102      	bne.n	80041fa <checkBasincSalteri+0x12>
		basincVar=1;
 80041f4:	4b12      	ldr	r3, [pc, #72]	@ (8004240 <checkBasincSalteri+0x58>)
 80041f6:	2201      	movs	r2, #1
 80041f8:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 80041fa:	4b10      	ldr	r3, [pc, #64]	@ (800423c <checkBasincSalteri+0x54>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d119      	bne.n	8004236 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8004202:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004206:	480f      	ldr	r0, [pc, #60]	@ (8004244 <checkBasincSalteri+0x5c>)
 8004208:	f006 fa20 	bl	800a64c <HAL_GPIO_ReadPin>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10a      	bne.n	8004228 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004212:	4b0d      	ldr	r3, [pc, #52]	@ (8004248 <checkBasincSalteri+0x60>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	4b0d      	ldr	r3, [pc, #52]	@ (800424c <checkBasincSalteri+0x64>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d90a      	bls.n	8004236 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004220:	4b07      	ldr	r3, [pc, #28]	@ (8004240 <checkBasincSalteri+0x58>)
 8004222:	2201      	movs	r2, #1
 8004224:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004226:	e006      	b.n	8004236 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004228:	4b07      	ldr	r3, [pc, #28]	@ (8004248 <checkBasincSalteri+0x60>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a07      	ldr	r2, [pc, #28]	@ (800424c <checkBasincSalteri+0x64>)
 800422e:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004230:	4b03      	ldr	r3, [pc, #12]	@ (8004240 <checkBasincSalteri+0x58>)
 8004232:	2200      	movs	r2, #0
 8004234:	701a      	strb	r2, [r3, #0]
}
 8004236:	bf00      	nop
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	200014c3 	.word	0x200014c3
 8004240:	200014bf 	.word	0x200014bf
 8004244:	40011000 	.word	0x40011000
 8004248:	20001494 	.word	0x20001494
 800424c:	200014ac 	.word	0x200014ac

08004250 <checkBasGonder>:

void checkBasGonder() {
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004254:	4b1b      	ldr	r3, [pc, #108]	@ (80042c4 <checkBasGonder+0x74>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d10b      	bne.n	8004274 <checkBasGonder+0x24>
 800425c:	4b1a      	ldr	r3, [pc, #104]	@ (80042c8 <checkBasGonder+0x78>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d007      	beq.n	8004274 <checkBasGonder+0x24>
 8004264:	4b19      	ldr	r3, [pc, #100]	@ (80042cc <checkBasGonder+0x7c>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d103      	bne.n	8004274 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 800426c:	4b18      	ldr	r3, [pc, #96]	@ (80042d0 <checkBasGonder+0x80>)
 800426e:	2201      	movs	r2, #1
 8004270:	701a      	strb	r2, [r3, #0]
 8004272:	e009      	b.n	8004288 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004274:	4b14      	ldr	r3, [pc, #80]	@ (80042c8 <checkBasGonder+0x78>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	f083 0301 	eor.w	r3, r3, #1
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004282:	4b13      	ldr	r3, [pc, #76]	@ (80042d0 <checkBasGonder+0x80>)
 8004284:	2200      	movs	r2, #0
 8004286:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004288:	4b0e      	ldr	r3, [pc, #56]	@ (80042c4 <checkBasGonder+0x74>)
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d10b      	bne.n	80042a8 <checkBasGonder+0x58>
 8004290:	4b10      	ldr	r3, [pc, #64]	@ (80042d4 <checkBasGonder+0x84>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d007      	beq.n	80042a8 <checkBasGonder+0x58>
 8004298:	4b0c      	ldr	r3, [pc, #48]	@ (80042cc <checkBasGonder+0x7c>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d103      	bne.n	80042a8 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 80042a0:	4b0d      	ldr	r3, [pc, #52]	@ (80042d8 <checkBasGonder+0x88>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 80042a6:	e009      	b.n	80042bc <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 80042a8:	4b0a      	ldr	r3, [pc, #40]	@ (80042d4 <checkBasGonder+0x84>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	f083 0301 	eor.w	r3, r3, #1
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 80042b6:	4b08      	ldr	r3, [pc, #32]	@ (80042d8 <checkBasGonder+0x88>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	701a      	strb	r2, [r3, #0]
}
 80042bc:	bf00      	nop
 80042be:	46bd      	mov	sp, r7
 80042c0:	bc80      	pop	{r7}
 80042c2:	4770      	bx	lr
 80042c4:	200014bd 	.word	0x200014bd
 80042c8:	200014f1 	.word	0x200014f1
 80042cc:	200014cb 	.word	0x200014cb
 80042d0:	200014f8 	.word	0x200014f8
 80042d4:	200014f4 	.word	0x200014f4
 80042d8:	200014f9 	.word	0x200014f9

080042dc <checkKapiSecimleri>:

void checkKapiSecimleri() {
 80042dc:	b580      	push	{r7, lr}
 80042de:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 80042e0:	4b24      	ldr	r3, [pc, #144]	@ (8004374 <checkKapiSecimleri+0x98>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d102      	bne.n	80042ee <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 80042e8:	4b23      	ldr	r3, [pc, #140]	@ (8004378 <checkKapiSecimleri+0x9c>)
 80042ea:	2201      	movs	r2, #1
 80042ec:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 80042ee:	4b21      	ldr	r3, [pc, #132]	@ (8004374 <checkKapiSecimleri+0x98>)
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d10e      	bne.n	8004314 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80042f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042fa:	4820      	ldr	r0, [pc, #128]	@ (800437c <checkKapiSecimleri+0xa0>)
 80042fc:	f006 f9a6 	bl	800a64c <HAL_GPIO_ReadPin>
 8004300:	4603      	mov	r3, r0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d103      	bne.n	800430e <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8004306:	4b1c      	ldr	r3, [pc, #112]	@ (8004378 <checkKapiSecimleri+0x9c>)
 8004308:	2201      	movs	r2, #1
 800430a:	701a      	strb	r2, [r3, #0]
 800430c:	e002      	b.n	8004314 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 800430e:	4b1a      	ldr	r3, [pc, #104]	@ (8004378 <checkKapiSecimleri+0x9c>)
 8004310:	2200      	movs	r2, #0
 8004312:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004314:	4b17      	ldr	r3, [pc, #92]	@ (8004374 <checkKapiSecimleri+0x98>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d10e      	bne.n	800433a <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 800431c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004320:	4816      	ldr	r0, [pc, #88]	@ (800437c <checkKapiSecimleri+0xa0>)
 8004322:	f006 f993 	bl	800a64c <HAL_GPIO_ReadPin>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d103      	bne.n	8004334 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 800432c:	4b12      	ldr	r3, [pc, #72]	@ (8004378 <checkKapiSecimleri+0x9c>)
 800432e:	2201      	movs	r2, #1
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	e002      	b.n	800433a <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004334:	4b10      	ldr	r3, [pc, #64]	@ (8004378 <checkKapiSecimleri+0x9c>)
 8004336:	2200      	movs	r2, #0
 8004338:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800433a:	4b0e      	ldr	r3, [pc, #56]	@ (8004374 <checkKapiSecimleri+0x98>)
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b03      	cmp	r3, #3
 8004340:	d116      	bne.n	8004370 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004342:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004346:	480d      	ldr	r0, [pc, #52]	@ (800437c <checkKapiSecimleri+0xa0>)
 8004348:	f006 f980 	bl	800a64c <HAL_GPIO_ReadPin>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10b      	bne.n	800436a <checkKapiSecimleri+0x8e>
 8004352:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004356:	4809      	ldr	r0, [pc, #36]	@ (800437c <checkKapiSecimleri+0xa0>)
 8004358:	f006 f978 	bl	800a64c <HAL_GPIO_ReadPin>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d103      	bne.n	800436a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004362:	4b05      	ldr	r3, [pc, #20]	@ (8004378 <checkKapiSecimleri+0x9c>)
 8004364:	2201      	movs	r2, #1
 8004366:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004368:	e002      	b.n	8004370 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 800436a:	4b03      	ldr	r3, [pc, #12]	@ (8004378 <checkKapiSecimleri+0x9c>)
 800436c:	2200      	movs	r2, #0
 800436e:	701a      	strb	r2, [r3, #0]
}
 8004370:	bf00      	nop
 8004372:	bd80      	pop	{r7, pc}
 8004374:	200014c4 	.word	0x200014c4
 8004378:	2000150e 	.word	0x2000150e
 800437c:	40010800 	.word	0x40010800

08004380 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004384:	4b66      	ldr	r3, [pc, #408]	@ (8004520 <checkAktifCalisma+0x1a0>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	f041 8343 	bne.w	8005a14 <checkAktifCalisma+0x1694>
 800438e:	4b65      	ldr	r3, [pc, #404]	@ (8004524 <checkAktifCalisma+0x1a4>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	f041 833e 	bne.w	8005a14 <checkAktifCalisma+0x1694>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8004398:	4b63      	ldr	r3, [pc, #396]	@ (8004528 <checkAktifCalisma+0x1a8>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d11a      	bne.n	80043d6 <checkAktifCalisma+0x56>
 80043a0:	4b62      	ldr	r3, [pc, #392]	@ (800452c <checkAktifCalisma+0x1ac>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d116      	bne.n	80043d6 <checkAktifCalisma+0x56>
 80043a8:	4b61      	ldr	r3, [pc, #388]	@ (8004530 <checkAktifCalisma+0x1b0>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <checkAktifCalisma+0x46>
 80043b0:	4b60      	ldr	r3, [pc, #384]	@ (8004534 <checkAktifCalisma+0x1b4>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	f083 0301 	eor.w	r3, r3, #1
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <checkAktifCalisma+0x46>
 80043be:	4b5e      	ldr	r3, [pc, #376]	@ (8004538 <checkAktifCalisma+0x1b8>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d007      	beq.n	80043d6 <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 80043c6:	4b5d      	ldr	r3, [pc, #372]	@ (800453c <checkAktifCalisma+0x1bc>)
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d01c      	beq.n	8004408 <checkAktifCalisma+0x88>
 80043ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004540 <checkAktifCalisma+0x1c0>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d118      	bne.n	8004408 <checkAktifCalisma+0x88>
 80043d6:	4b5b      	ldr	r3, [pc, #364]	@ (8004544 <checkAktifCalisma+0x1c4>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d103      	bne.n	80043e6 <checkAktifCalisma+0x66>
 80043de:	4b5a      	ldr	r3, [pc, #360]	@ (8004548 <checkAktifCalisma+0x1c8>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d010      	beq.n	8004408 <checkAktifCalisma+0x88>
 80043e6:	4b59      	ldr	r3, [pc, #356]	@ (800454c <checkAktifCalisma+0x1cc>)
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00c      	beq.n	8004408 <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80043ee:	2201      	movs	r2, #1
 80043f0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80043f4:	4856      	ldr	r0, [pc, #344]	@ (8004550 <checkAktifCalisma+0x1d0>)
 80043f6:	f006 f940 	bl	800a67a <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 80043fa:	4b56      	ldr	r3, [pc, #344]	@ (8004554 <checkAktifCalisma+0x1d4>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8004400:	4b55      	ldr	r3, [pc, #340]	@ (8004558 <checkAktifCalisma+0x1d8>)
 8004402:	2201      	movs	r2, #1
 8004404:	701a      	strb	r2, [r3, #0]
 8004406:	e008      	b.n	800441a <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8004408:	2200      	movs	r2, #0
 800440a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800440e:	4850      	ldr	r0, [pc, #320]	@ (8004550 <checkAktifCalisma+0x1d0>)
 8004410:	f006 f933 	bl	800a67a <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8004414:	4b4f      	ldr	r3, [pc, #316]	@ (8004554 <checkAktifCalisma+0x1d4>)
 8004416:	2200      	movs	r2, #0
 8004418:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 800441a:	4b42      	ldr	r3, [pc, #264]	@ (8004524 <checkAktifCalisma+0x1a4>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d164      	bne.n	80044ec <checkAktifCalisma+0x16c>
 8004422:	4b49      	ldr	r3, [pc, #292]	@ (8004548 <checkAktifCalisma+0x1c8>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d103      	bne.n	8004432 <checkAktifCalisma+0xb2>
 800442a:	4b46      	ldr	r3, [pc, #280]	@ (8004544 <checkAktifCalisma+0x1c4>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d05c      	beq.n	80044ec <checkAktifCalisma+0x16c>
 8004432:	4b46      	ldr	r3, [pc, #280]	@ (800454c <checkAktifCalisma+0x1cc>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d058      	beq.n	80044ec <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800443a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800443e:	4844      	ldr	r0, [pc, #272]	@ (8004550 <checkAktifCalisma+0x1d0>)
 8004440:	f006 f904 	bl	800a64c <HAL_GPIO_ReadPin>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <checkAktifCalisma+0xd2>
 800444a:	4b44      	ldr	r3, [pc, #272]	@ (800455c <checkAktifCalisma+0x1dc>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d04c      	beq.n	80044ec <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004452:	2102      	movs	r1, #2
 8004454:	4842      	ldr	r0, [pc, #264]	@ (8004560 <checkAktifCalisma+0x1e0>)
 8004456:	f006 f8f9 	bl	800a64c <HAL_GPIO_ReadPin>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d145      	bne.n	80044ec <checkAktifCalisma+0x16c>
							&& (basincVar)
 8004460:	4b40      	ldr	r3, [pc, #256]	@ (8004564 <checkAktifCalisma+0x1e4>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d041      	beq.n	80044ec <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004468:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800446c:	4838      	ldr	r0, [pc, #224]	@ (8004550 <checkAktifCalisma+0x1d0>)
 800446e:	f006 f8ed 	bl	800a64c <HAL_GPIO_ReadPin>
 8004472:	4603      	mov	r3, r0
 8004474:	2b01      	cmp	r3, #1
 8004476:	d10e      	bne.n	8004496 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004478:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800447c:	4834      	ldr	r0, [pc, #208]	@ (8004550 <checkAktifCalisma+0x1d0>)
 800447e:	f006 f8e5 	bl	800a64c <HAL_GPIO_ReadPin>
 8004482:	4603      	mov	r3, r0
 8004484:	2b01      	cmp	r3, #1
 8004486:	d106      	bne.n	8004496 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004488:	2140      	movs	r1, #64	@ 0x40
 800448a:	4835      	ldr	r0, [pc, #212]	@ (8004560 <checkAktifCalisma+0x1e0>)
 800448c:	f006 f8de 	bl	800a64c <HAL_GPIO_ReadPin>
 8004490:	4603      	mov	r3, r0
 8004492:	2b01      	cmp	r3, #1
 8004494:	d003      	beq.n	800449e <checkAktifCalisma+0x11e>
 8004496:	4b24      	ldr	r3, [pc, #144]	@ (8004528 <checkAktifCalisma+0x1a8>)
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d026      	beq.n	80044ec <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 800449e:	4b24      	ldr	r3, [pc, #144]	@ (8004530 <checkAktifCalisma+0x1b0>)
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	f083 0301 	eor.w	r3, r3, #1
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01f      	beq.n	80044ec <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 80044ac:	4b1f      	ldr	r3, [pc, #124]	@ (800452c <checkAktifCalisma+0x1ac>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	f083 0301 	eor.w	r3, r3, #1
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d018      	beq.n	80044ec <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 80044ba:	4b20      	ldr	r3, [pc, #128]	@ (800453c <checkAktifCalisma+0x1bc>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	f083 0301 	eor.w	r3, r3, #1
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d011      	beq.n	80044ec <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 80044c8:	4b27      	ldr	r3, [pc, #156]	@ (8004568 <checkAktifCalisma+0x1e8>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	f083 0301 	eor.w	r3, r3, #1
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 80044d6:	4b25      	ldr	r3, [pc, #148]	@ (800456c <checkAktifCalisma+0x1ec>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	f083 0301 	eor.w	r3, r3, #1
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 80044e4:	4b10      	ldr	r3, [pc, #64]	@ (8004528 <checkAktifCalisma+0x1a8>)
 80044e6:	2201      	movs	r2, #1
 80044e8:	701a      	strb	r2, [r3, #0]
 80044ea:	e002      	b.n	80044f2 <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 80044ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004528 <checkAktifCalisma+0x1a8>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80044f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004528 <checkAktifCalisma+0x1a8>)
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d03c      	beq.n	8004574 <checkAktifCalisma+0x1f4>
 80044fa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80044fe:	4818      	ldr	r0, [pc, #96]	@ (8004560 <checkAktifCalisma+0x1e0>)
 8004500:	f006 f8a4 	bl	800a64c <HAL_GPIO_ReadPin>
 8004504:	4603      	mov	r3, r0
 8004506:	2b01      	cmp	r3, #1
 8004508:	d134      	bne.n	8004574 <checkAktifCalisma+0x1f4>
 800450a:	4b19      	ldr	r3, [pc, #100]	@ (8004570 <checkAktifCalisma+0x1f0>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d030      	beq.n	8004574 <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004512:	2201      	movs	r2, #1
 8004514:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004518:	480d      	ldr	r0, [pc, #52]	@ (8004550 <checkAktifCalisma+0x1d0>)
 800451a:	f006 f8ae 	bl	800a67a <HAL_GPIO_WritePin>
 800451e:	e02f      	b.n	8004580 <checkAktifCalisma+0x200>
 8004520:	200014da 	.word	0x200014da
 8004524:	200014d9 	.word	0x200014d9
 8004528:	200014f1 	.word	0x200014f1
 800452c:	200014f2 	.word	0x200014f2
 8004530:	200014f4 	.word	0x200014f4
 8004534:	200014ec 	.word	0x200014ec
 8004538:	200014cf 	.word	0x200014cf
 800453c:	200014f3 	.word	0x200014f3
 8004540:	200014ce 	.word	0x200014ce
 8004544:	2000150d 	.word	0x2000150d
 8004548:	20001520 	.word	0x20001520
 800454c:	2000150e 	.word	0x2000150e
 8004550:	40010c00 	.word	0x40010c00
 8004554:	2000150f 	.word	0x2000150f
 8004558:	200014fb 	.word	0x200014fb
 800455c:	200014f8 	.word	0x200014f8
 8004560:	40011000 	.word	0x40011000
 8004564:	200014bf 	.word	0x200014bf
 8004568:	200014f6 	.word	0x200014f6
 800456c:	200014f7 	.word	0x200014f7
 8004570:	200014ca 	.word	0x200014ca
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004574:	2200      	movs	r2, #0
 8004576:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800457a:	4865      	ldr	r0, [pc, #404]	@ (8004710 <checkAktifCalisma+0x390>)
 800457c:	f006 f87d 	bl	800a67a <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004580:	4b64      	ldr	r3, [pc, #400]	@ (8004714 <checkAktifCalisma+0x394>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d013      	beq.n	80045b0 <checkAktifCalisma+0x230>
 8004588:	4b63      	ldr	r3, [pc, #396]	@ (8004718 <checkAktifCalisma+0x398>)
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d007      	beq.n	80045a0 <checkAktifCalisma+0x220>
 8004590:	4b61      	ldr	r3, [pc, #388]	@ (8004718 <checkAktifCalisma+0x398>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b02      	cmp	r3, #2
 8004596:	d003      	beq.n	80045a0 <checkAktifCalisma+0x220>
 8004598:	4b60      	ldr	r3, [pc, #384]	@ (800471c <checkAktifCalisma+0x39c>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d107      	bne.n	80045b0 <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80045a0:	2201      	movs	r2, #1
 80045a2:	2104      	movs	r1, #4
 80045a4:	485a      	ldr	r0, [pc, #360]	@ (8004710 <checkAktifCalisma+0x390>)
 80045a6:	f006 f868 	bl	800a67a <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 80045aa:	4b5d      	ldr	r3, [pc, #372]	@ (8004720 <checkAktifCalisma+0x3a0>)
 80045ac:	2201      	movs	r2, #1
 80045ae:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80045b0:	4b5b      	ldr	r3, [pc, #364]	@ (8004720 <checkAktifCalisma+0x3a0>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d033      	beq.n	8004620 <checkAktifCalisma+0x2a0>
 80045b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80045bc:	4854      	ldr	r0, [pc, #336]	@ (8004710 <checkAktifCalisma+0x390>)
 80045be:	f006 f845 	bl	800a64c <HAL_GPIO_ReadPin>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d106      	bne.n	80045d6 <checkAktifCalisma+0x256>
 80045c8:	4b56      	ldr	r3, [pc, #344]	@ (8004724 <checkAktifCalisma+0x3a4>)
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	f083 0301 	eor.w	r3, r3, #1
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <checkAktifCalisma+0x264>
 80045d6:	2102      	movs	r1, #2
 80045d8:	4853      	ldr	r0, [pc, #332]	@ (8004728 <checkAktifCalisma+0x3a8>)
 80045da:	f006 f837 	bl	800a64c <HAL_GPIO_ReadPin>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d11d      	bne.n	8004620 <checkAktifCalisma+0x2a0>
 80045e4:	4b51      	ldr	r3, [pc, #324]	@ (800472c <checkAktifCalisma+0x3ac>)
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d103      	bne.n	80045f4 <checkAktifCalisma+0x274>
 80045ec:	4b50      	ldr	r3, [pc, #320]	@ (8004730 <checkAktifCalisma+0x3b0>)
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d015      	beq.n	8004620 <checkAktifCalisma+0x2a0>
 80045f4:	4b4f      	ldr	r3, [pc, #316]	@ (8004734 <checkAktifCalisma+0x3b4>)
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d011      	beq.n	8004620 <checkAktifCalisma+0x2a0>
 80045fc:	4b4e      	ldr	r3, [pc, #312]	@ (8004738 <checkAktifCalisma+0x3b8>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00d      	beq.n	8004620 <checkAktifCalisma+0x2a0>
 8004604:	4b4d      	ldr	r3, [pc, #308]	@ (800473c <checkAktifCalisma+0x3bc>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	f083 0301 	eor.w	r3, r3, #1
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d006      	beq.n	8004620 <checkAktifCalisma+0x2a0>
					timer2=millis;
 8004612:	4b4b      	ldr	r3, [pc, #300]	@ (8004740 <checkAktifCalisma+0x3c0>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a4b      	ldr	r2, [pc, #300]	@ (8004744 <checkAktifCalisma+0x3c4>)
 8004618:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 800461a:	4b48      	ldr	r3, [pc, #288]	@ (800473c <checkAktifCalisma+0x3bc>)
 800461c:	2201      	movs	r2, #1
 800461e:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 8004620:	4b47      	ldr	r3, [pc, #284]	@ (8004740 <checkAktifCalisma+0x3c0>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	4b47      	ldr	r3, [pc, #284]	@ (8004744 <checkAktifCalisma+0x3c4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	4a47      	ldr	r2, [pc, #284]	@ (8004748 <checkAktifCalisma+0x3c8>)
 800462c:	7812      	ldrb	r2, [r2, #0]
 800462e:	4293      	cmp	r3, r2
 8004630:	d303      	bcc.n	800463a <checkAktifCalisma+0x2ba>
 8004632:	4b42      	ldr	r3, [pc, #264]	@ (800473c <checkAktifCalisma+0x3bc>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d118      	bne.n	800466c <checkAktifCalisma+0x2ec>
 800463a:	4b3c      	ldr	r3, [pc, #240]	@ (800472c <checkAktifCalisma+0x3ac>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	f083 0301 	eor.w	r3, r3, #1
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	d006      	beq.n	8004656 <checkAktifCalisma+0x2d6>
 8004648:	4b39      	ldr	r3, [pc, #228]	@ (8004730 <checkAktifCalisma+0x3b0>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	f083 0301 	eor.w	r3, r3, #1
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10a      	bne.n	800466c <checkAktifCalisma+0x2ec>
 8004656:	4b37      	ldr	r3, [pc, #220]	@ (8004734 <checkAktifCalisma+0x3b4>)
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	f083 0301 	eor.w	r3, r3, #1
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b00      	cmp	r3, #0
 8004662:	d103      	bne.n	800466c <checkAktifCalisma+0x2ec>
 8004664:	4b34      	ldr	r3, [pc, #208]	@ (8004738 <checkAktifCalisma+0x3b8>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10a      	bne.n	8004682 <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800466c:	2200      	movs	r2, #0
 800466e:	2104      	movs	r1, #4
 8004670:	4827      	ldr	r0, [pc, #156]	@ (8004710 <checkAktifCalisma+0x390>)
 8004672:	f006 f802 	bl	800a67a <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 8004676:	4b2a      	ldr	r3, [pc, #168]	@ (8004720 <checkAktifCalisma+0x3a0>)
 8004678:	2200      	movs	r2, #0
 800467a:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 800467c:	4b2f      	ldr	r3, [pc, #188]	@ (800473c <checkAktifCalisma+0x3bc>)
 800467e:	2200      	movs	r2, #0
 8004680:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 8004682:	4b32      	ldr	r3, [pc, #200]	@ (800474c <checkAktifCalisma+0x3cc>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d102      	bne.n	8004690 <checkAktifCalisma+0x310>
					cerceveVar=1;
 800468a:	4b31      	ldr	r3, [pc, #196]	@ (8004750 <checkAktifCalisma+0x3d0>)
 800468c:	2201      	movs	r2, #1
 800468e:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004690:	4b2e      	ldr	r3, [pc, #184]	@ (800474c <checkAktifCalisma+0x3cc>)
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d116      	bne.n	80046c6 <checkAktifCalisma+0x346>
 8004698:	4b2e      	ldr	r3, [pc, #184]	@ (8004754 <checkAktifCalisma+0x3d4>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d112      	bne.n	80046c6 <checkAktifCalisma+0x346>
 80046a0:	2101      	movs	r1, #1
 80046a2:	4821      	ldr	r0, [pc, #132]	@ (8004728 <checkAktifCalisma+0x3a8>)
 80046a4:	f005 ffd2 	bl	800a64c <HAL_GPIO_ReadPin>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10b      	bne.n	80046c6 <checkAktifCalisma+0x346>
 80046ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80046b2:	4817      	ldr	r0, [pc, #92]	@ (8004710 <checkAktifCalisma+0x390>)
 80046b4:	f005 ffca 	bl	800a64c <HAL_GPIO_ReadPin>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d103      	bne.n	80046c6 <checkAktifCalisma+0x346>
					cerceveVar=1;
 80046be:	4b24      	ldr	r3, [pc, #144]	@ (8004750 <checkAktifCalisma+0x3d0>)
 80046c0:	2201      	movs	r2, #1
 80046c2:	701a      	strb	r2, [r3, #0]
 80046c4:	e011      	b.n	80046ea <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80046c6:	4b21      	ldr	r3, [pc, #132]	@ (800474c <checkAktifCalisma+0x3cc>)
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d10d      	bne.n	80046ea <checkAktifCalisma+0x36a>
 80046ce:	2101      	movs	r1, #1
 80046d0:	4815      	ldr	r0, [pc, #84]	@ (8004728 <checkAktifCalisma+0x3a8>)
 80046d2:	f005 ffbb 	bl	800a64c <HAL_GPIO_ReadPin>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d106      	bne.n	80046ea <checkAktifCalisma+0x36a>
 80046dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004754 <checkAktifCalisma+0x3d4>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d102      	bne.n	80046ea <checkAktifCalisma+0x36a>
					cerceveVar=0;
 80046e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004750 <checkAktifCalisma+0x3d0>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 80046ea:	4b18      	ldr	r3, [pc, #96]	@ (800474c <checkAktifCalisma+0x3cc>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d135      	bne.n	800475e <checkAktifCalisma+0x3de>
 80046f2:	4b18      	ldr	r3, [pc, #96]	@ (8004754 <checkAktifCalisma+0x3d4>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d131      	bne.n	800475e <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80046fa:	2101      	movs	r1, #1
 80046fc:	480a      	ldr	r0, [pc, #40]	@ (8004728 <checkAktifCalisma+0x3a8>)
 80046fe:	f005 ffa5 	bl	800a64c <HAL_GPIO_ReadPin>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	d127      	bne.n	8004758 <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 8004708:	4b11      	ldr	r3, [pc, #68]	@ (8004750 <checkAktifCalisma+0x3d0>)
 800470a:	2201      	movs	r2, #1
 800470c:	701a      	strb	r2, [r3, #0]
 800470e:	e026      	b.n	800475e <checkAktifCalisma+0x3de>
 8004710:	40010c00 	.word	0x40010c00
 8004714:	200014f1 	.word	0x200014f1
 8004718:	200014cb 	.word	0x200014cb
 800471c:	200014cf 	.word	0x200014cf
 8004720:	200014f5 	.word	0x200014f5
 8004724:	200014f8 	.word	0x200014f8
 8004728:	40011000 	.word	0x40011000
 800472c:	2000150d 	.word	0x2000150d
 8004730:	20001520 	.word	0x20001520
 8004734:	2000150e 	.word	0x2000150e
 8004738:	200014bf 	.word	0x200014bf
 800473c:	200014ed 	.word	0x200014ed
 8004740:	20001494 	.word	0x20001494
 8004744:	200014a0 	.word	0x200014a0
 8004748:	200014d0 	.word	0x200014d0
 800474c:	200014c0 	.word	0x200014c0
 8004750:	20001512 	.word	0x20001512
 8004754:	200014bd 	.word	0x200014bd
					} else {
						cerceveVar=0;
 8004758:	4b7f      	ldr	r3, [pc, #508]	@ (8004958 <checkAktifCalisma+0x5d8>)
 800475a:	2200      	movs	r2, #0
 800475c:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 800475e:	4b7f      	ldr	r3, [pc, #508]	@ (800495c <checkAktifCalisma+0x5dc>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d17c      	bne.n	8004860 <checkAktifCalisma+0x4e0>
 8004766:	4b7e      	ldr	r3, [pc, #504]	@ (8004960 <checkAktifCalisma+0x5e0>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d078      	beq.n	8004860 <checkAktifCalisma+0x4e0>
 800476e:	4b7d      	ldr	r3, [pc, #500]	@ (8004964 <checkAktifCalisma+0x5e4>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d074      	beq.n	8004860 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8004776:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800477a:	487b      	ldr	r0, [pc, #492]	@ (8004968 <checkAktifCalisma+0x5e8>)
 800477c:	f005 ff66 	bl	800a64c <HAL_GPIO_ReadPin>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <checkAktifCalisma+0x40e>
 8004786:	4b79      	ldr	r3, [pc, #484]	@ (800496c <checkAktifCalisma+0x5ec>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d068      	beq.n	8004860 <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800478e:	4b72      	ldr	r3, [pc, #456]	@ (8004958 <checkAktifCalisma+0x5d8>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d064      	beq.n	8004860 <checkAktifCalisma+0x4e0>
 8004796:	4b76      	ldr	r3, [pc, #472]	@ (8004970 <checkAktifCalisma+0x5f0>)
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	f083 0301 	eor.w	r3, r3, #1
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d05d      	beq.n	8004860 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80047a4:	2104      	movs	r1, #4
 80047a6:	4873      	ldr	r0, [pc, #460]	@ (8004974 <checkAktifCalisma+0x5f4>)
 80047a8:	f005 ff50 	bl	800a64c <HAL_GPIO_ReadPin>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <checkAktifCalisma+0x43a>
 80047b2:	4b71      	ldr	r3, [pc, #452]	@ (8004978 <checkAktifCalisma+0x5f8>)
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d152      	bne.n	8004860 <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80047ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80047be:	486a      	ldr	r0, [pc, #424]	@ (8004968 <checkAktifCalisma+0x5e8>)
 80047c0:	f005 ff44 	bl	800a64c <HAL_GPIO_ReadPin>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d10e      	bne.n	80047e8 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80047ca:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80047ce:	4866      	ldr	r0, [pc, #408]	@ (8004968 <checkAktifCalisma+0x5e8>)
 80047d0:	f005 ff3c 	bl	800a64c <HAL_GPIO_ReadPin>
 80047d4:	4603      	mov	r3, r0
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d106      	bne.n	80047e8 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80047da:	2140      	movs	r1, #64	@ 0x40
 80047dc:	4865      	ldr	r0, [pc, #404]	@ (8004974 <checkAktifCalisma+0x5f4>)
 80047de:	f005 ff35 	bl	800a64c <HAL_GPIO_ReadPin>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d003      	beq.n	80047f0 <checkAktifCalisma+0x470>
 80047e8:	4b64      	ldr	r3, [pc, #400]	@ (800497c <checkAktifCalisma+0x5fc>)
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d037      	beq.n	8004860 <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 80047f0:	4b63      	ldr	r3, [pc, #396]	@ (8004980 <checkAktifCalisma+0x600>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	f083 0301 	eor.w	r3, r3, #1
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d030      	beq.n	8004860 <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 80047fe:	4b61      	ldr	r3, [pc, #388]	@ (8004984 <checkAktifCalisma+0x604>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	f083 0301 	eor.w	r3, r3, #1
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d029      	beq.n	8004860 <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 800480c:	4b5e      	ldr	r3, [pc, #376]	@ (8004988 <checkAktifCalisma+0x608>)
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	f083 0301 	eor.w	r3, r3, #1
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d022      	beq.n	8004860 <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 800481a:	4b5c      	ldr	r3, [pc, #368]	@ (800498c <checkAktifCalisma+0x60c>)
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	f083 0301 	eor.w	r3, r3, #1
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	d01b      	beq.n	8004860 <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 8004828:	4b59      	ldr	r3, [pc, #356]	@ (8004990 <checkAktifCalisma+0x610>)
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	f083 0301 	eor.w	r3, r3, #1
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d014      	beq.n	8004860 <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 8004836:	4b57      	ldr	r3, [pc, #348]	@ (8004994 <checkAktifCalisma+0x614>)
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	f083 0301 	eor.w	r3, r3, #1
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00d      	beq.n	8004860 <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8004844:	2201      	movs	r2, #1
 8004846:	2102      	movs	r1, #2
 8004848:	4847      	ldr	r0, [pc, #284]	@ (8004968 <checkAktifCalisma+0x5e8>)
 800484a:	f005 ff16 	bl	800a67a <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 800484e:	4b4b      	ldr	r3, [pc, #300]	@ (800497c <checkAktifCalisma+0x5fc>)
 8004850:	2201      	movs	r2, #1
 8004852:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 8004854:	4b50      	ldr	r3, [pc, #320]	@ (8004998 <checkAktifCalisma+0x618>)
 8004856:	2201      	movs	r2, #1
 8004858:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 800485a:	4b50      	ldr	r3, [pc, #320]	@ (800499c <checkAktifCalisma+0x61c>)
 800485c:	2201      	movs	r2, #1
 800485e:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8004860:	4b46      	ldr	r3, [pc, #280]	@ (800497c <checkAktifCalisma+0x5fc>)
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d033      	beq.n	80048d0 <checkAktifCalisma+0x550>
 8004868:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800486c:	483e      	ldr	r0, [pc, #248]	@ (8004968 <checkAktifCalisma+0x5e8>)
 800486e:	f005 feed 	bl	800a64c <HAL_GPIO_ReadPin>
 8004872:	4603      	mov	r3, r0
 8004874:	2b01      	cmp	r3, #1
 8004876:	d106      	bne.n	8004886 <checkAktifCalisma+0x506>
 8004878:	4b3c      	ldr	r3, [pc, #240]	@ (800496c <checkAktifCalisma+0x5ec>)
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	f083 0301 	eor.w	r3, r3, #1
 8004880:	b2db      	uxtb	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10a      	bne.n	800489c <checkAktifCalisma+0x51c>
 8004886:	2104      	movs	r1, #4
 8004888:	483a      	ldr	r0, [pc, #232]	@ (8004974 <checkAktifCalisma+0x5f4>)
 800488a:	f005 fedf 	bl	800a64c <HAL_GPIO_ReadPin>
 800488e:	4603      	mov	r3, r0
 8004890:	2b01      	cmp	r3, #1
 8004892:	d11d      	bne.n	80048d0 <checkAktifCalisma+0x550>
 8004894:	4b38      	ldr	r3, [pc, #224]	@ (8004978 <checkAktifCalisma+0x5f8>)
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d019      	beq.n	80048d0 <checkAktifCalisma+0x550>
 800489c:	4b30      	ldr	r3, [pc, #192]	@ (8004960 <checkAktifCalisma+0x5e0>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d015      	beq.n	80048d0 <checkAktifCalisma+0x550>
 80048a4:	4b2f      	ldr	r3, [pc, #188]	@ (8004964 <checkAktifCalisma+0x5e4>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d011      	beq.n	80048d0 <checkAktifCalisma+0x550>
 80048ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004958 <checkAktifCalisma+0x5d8>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00d      	beq.n	80048d0 <checkAktifCalisma+0x550>
 80048b4:	4b3a      	ldr	r3, [pc, #232]	@ (80049a0 <checkAktifCalisma+0x620>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	f083 0301 	eor.w	r3, r3, #1
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d006      	beq.n	80048d0 <checkAktifCalisma+0x550>
					timer2=millis;
 80048c2:	4b38      	ldr	r3, [pc, #224]	@ (80049a4 <checkAktifCalisma+0x624>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a38      	ldr	r2, [pc, #224]	@ (80049a8 <checkAktifCalisma+0x628>)
 80048c8:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 80048ca:	4b35      	ldr	r3, [pc, #212]	@ (80049a0 <checkAktifCalisma+0x620>)
 80048cc:	2201      	movs	r2, #1
 80048ce:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80048d0:	4b34      	ldr	r3, [pc, #208]	@ (80049a4 <checkAktifCalisma+0x624>)
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	4b34      	ldr	r3, [pc, #208]	@ (80049a8 <checkAktifCalisma+0x628>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	4a34      	ldr	r2, [pc, #208]	@ (80049ac <checkAktifCalisma+0x62c>)
 80048dc:	7812      	ldrb	r2, [r2, #0]
 80048de:	4293      	cmp	r3, r2
 80048e0:	d303      	bcc.n	80048ea <checkAktifCalisma+0x56a>
 80048e2:	4b2f      	ldr	r3, [pc, #188]	@ (80049a0 <checkAktifCalisma+0x620>)
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d114      	bne.n	8004914 <checkAktifCalisma+0x594>
 80048ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004960 <checkAktifCalisma+0x5e0>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	f083 0301 	eor.w	r3, r3, #1
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10d      	bne.n	8004914 <checkAktifCalisma+0x594>
 80048f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004964 <checkAktifCalisma+0x5e4>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	f083 0301 	eor.w	r3, r3, #1
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <checkAktifCalisma+0x594>
 8004906:	4b14      	ldr	r3, [pc, #80]	@ (8004958 <checkAktifCalisma+0x5d8>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	f083 0301 	eor.w	r3, r3, #1
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b00      	cmp	r3, #0
 8004912:	d00a      	beq.n	800492a <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004914:	2200      	movs	r2, #0
 8004916:	2102      	movs	r1, #2
 8004918:	4813      	ldr	r0, [pc, #76]	@ (8004968 <checkAktifCalisma+0x5e8>)
 800491a:	f005 feae 	bl	800a67a <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 800491e:	4b17      	ldr	r3, [pc, #92]	@ (800497c <checkAktifCalisma+0x5fc>)
 8004920:	2200      	movs	r2, #0
 8004922:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8004924:	4b1e      	ldr	r3, [pc, #120]	@ (80049a0 <checkAktifCalisma+0x620>)
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800492a:	4b14      	ldr	r3, [pc, #80]	@ (800497c <checkAktifCalisma+0x5fc>)
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d040      	beq.n	80049b4 <checkAktifCalisma+0x634>
 8004932:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004936:	480f      	ldr	r0, [pc, #60]	@ (8004974 <checkAktifCalisma+0x5f4>)
 8004938:	f005 fe88 	bl	800a64c <HAL_GPIO_ReadPin>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d138      	bne.n	80049b4 <checkAktifCalisma+0x634>
 8004942:	4b1b      	ldr	r3, [pc, #108]	@ (80049b0 <checkAktifCalisma+0x630>)
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d034      	beq.n	80049b4 <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800494a:	2201      	movs	r2, #1
 800494c:	2101      	movs	r1, #1
 800494e:	4806      	ldr	r0, [pc, #24]	@ (8004968 <checkAktifCalisma+0x5e8>)
 8004950:	f005 fe93 	bl	800a67a <HAL_GPIO_WritePin>
 8004954:	e033      	b.n	80049be <checkAktifCalisma+0x63e>
 8004956:	bf00      	nop
 8004958:	20001512 	.word	0x20001512
 800495c:	200014d9 	.word	0x200014d9
 8004960:	2000150d 	.word	0x2000150d
 8004964:	2000150e 	.word	0x2000150e
 8004968:	40010c00 	.word	0x40010c00
 800496c:	200014f9 	.word	0x200014f9
 8004970:	2000150c 	.word	0x2000150c
 8004974:	40011000 	.word	0x40011000
 8004978:	200014c2 	.word	0x200014c2
 800497c:	200014f4 	.word	0x200014f4
 8004980:	200014f1 	.word	0x200014f1
 8004984:	200014f5 	.word	0x200014f5
 8004988:	200014f2 	.word	0x200014f2
 800498c:	200014f3 	.word	0x200014f3
 8004990:	200014f6 	.word	0x200014f6
 8004994:	200014f7 	.word	0x200014f7
 8004998:	200014fc 	.word	0x200014fc
 800499c:	2000151c 	.word	0x2000151c
 80049a0:	200014ec 	.word	0x200014ec
 80049a4:	20001494 	.word	0x20001494
 80049a8:	200014a0 	.word	0x200014a0
 80049ac:	200014d1 	.word	0x200014d1
 80049b0:	200014c1 	.word	0x200014c1
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80049b4:	2200      	movs	r2, #0
 80049b6:	2101      	movs	r1, #1
 80049b8:	4836      	ldr	r0, [pc, #216]	@ (8004a94 <checkAktifCalisma+0x714>)
 80049ba:	f005 fe5e 	bl	800a67a <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 80049be:	4b36      	ldr	r3, [pc, #216]	@ (8004a98 <checkAktifCalisma+0x718>)
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f040 8080 	bne.w	8004ac8 <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80049c8:	4b34      	ldr	r3, [pc, #208]	@ (8004a9c <checkAktifCalisma+0x71c>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d003      	beq.n	80049d8 <checkAktifCalisma+0x658>
 80049d0:	4b32      	ldr	r3, [pc, #200]	@ (8004a9c <checkAktifCalisma+0x71c>)
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d177      	bne.n	8004ac8 <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 80049d8:	4b31      	ldr	r3, [pc, #196]	@ (8004aa0 <checkAktifCalisma+0x720>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d073      	beq.n	8004ac8 <checkAktifCalisma+0x748>
 80049e0:	4b30      	ldr	r3, [pc, #192]	@ (8004aa4 <checkAktifCalisma+0x724>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d06f      	beq.n	8004ac8 <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80049e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049ec:	4829      	ldr	r0, [pc, #164]	@ (8004a94 <checkAktifCalisma+0x714>)
 80049ee:	f005 fe2d 	bl	800a64c <HAL_GPIO_ReadPin>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d167      	bne.n	8004ac8 <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80049f8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80049fc:	482a      	ldr	r0, [pc, #168]	@ (8004aa8 <checkAktifCalisma+0x728>)
 80049fe:	f005 fe25 	bl	800a64c <HAL_GPIO_ReadPin>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d003      	beq.n	8004a10 <checkAktifCalisma+0x690>
 8004a08:	4b28      	ldr	r3, [pc, #160]	@ (8004aac <checkAktifCalisma+0x72c>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d15b      	bne.n	8004ac8 <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8004a10:	2140      	movs	r1, #64	@ 0x40
 8004a12:	4825      	ldr	r0, [pc, #148]	@ (8004aa8 <checkAktifCalisma+0x728>)
 8004a14:	f005 fe1a 	bl	800a64c <HAL_GPIO_ReadPin>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d10f      	bne.n	8004a3e <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004a1e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004a22:	481c      	ldr	r0, [pc, #112]	@ (8004a94 <checkAktifCalisma+0x714>)
 8004a24:	f005 fe12 	bl	800a64c <HAL_GPIO_ReadPin>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d107      	bne.n	8004a3e <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8004a2e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a32:	4818      	ldr	r0, [pc, #96]	@ (8004a94 <checkAktifCalisma+0x714>)
 8004a34:	f005 fe0a 	bl	800a64c <HAL_GPIO_ReadPin>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d003      	beq.n	8004a46 <checkAktifCalisma+0x6c6>
 8004a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ab0 <checkAktifCalisma+0x730>)
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d040      	beq.n	8004ac8 <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 8004a46:	4b1b      	ldr	r3, [pc, #108]	@ (8004ab4 <checkAktifCalisma+0x734>)
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	f083 0301 	eor.w	r3, r3, #1
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d039      	beq.n	8004ac8 <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 8004a54:	4b18      	ldr	r3, [pc, #96]	@ (8004ab8 <checkAktifCalisma+0x738>)
 8004a56:	781b      	ldrb	r3, [r3, #0]
 8004a58:	f083 0301 	eor.w	r3, r3, #1
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d032      	beq.n	8004ac8 <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 8004a62:	4b16      	ldr	r3, [pc, #88]	@ (8004abc <checkAktifCalisma+0x73c>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	f083 0301 	eor.w	r3, r3, #1
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d02b      	beq.n	8004ac8 <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8004a70:	4b13      	ldr	r3, [pc, #76]	@ (8004ac0 <checkAktifCalisma+0x740>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	f083 0301 	eor.w	r3, r3, #1
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d024      	beq.n	8004ac8 <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 8004a7e:	4b11      	ldr	r3, [pc, #68]	@ (8004ac4 <checkAktifCalisma+0x744>)
 8004a80:	781b      	ldrb	r3, [r3, #0]
 8004a82:	f083 0301 	eor.w	r3, r3, #1
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01d      	beq.n	8004ac8 <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8004a8c:	4b08      	ldr	r3, [pc, #32]	@ (8004ab0 <checkAktifCalisma+0x730>)
 8004a8e:	2201      	movs	r2, #1
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	e01c      	b.n	8004ace <checkAktifCalisma+0x74e>
 8004a94:	40010c00 	.word	0x40010c00
 8004a98:	200014d9 	.word	0x200014d9
 8004a9c:	200014cb 	.word	0x200014cb
 8004aa0:	2000150d 	.word	0x2000150d
 8004aa4:	2000150e 	.word	0x2000150e
 8004aa8:	40011000 	.word	0x40011000
 8004aac:	200014cc 	.word	0x200014cc
 8004ab0:	200014f2 	.word	0x200014f2
 8004ab4:	200014f1 	.word	0x200014f1
 8004ab8:	200014f5 	.word	0x200014f5
 8004abc:	200014f4 	.word	0x200014f4
 8004ac0:	200014f3 	.word	0x200014f3
 8004ac4:	200014f7 	.word	0x200014f7
				} else {
					devmotoryukaricalisiyor=0;
 8004ac8:	4b64      	ldr	r3, [pc, #400]	@ (8004c5c <checkAktifCalisma+0x8dc>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8004ace:	4b63      	ldr	r3, [pc, #396]	@ (8004c5c <checkAktifCalisma+0x8dc>)
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	2120      	movs	r1, #32
 8004ada:	4861      	ldr	r0, [pc, #388]	@ (8004c60 <checkAktifCalisma+0x8e0>)
 8004adc:	f005 fdcd 	bl	800a67a <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8004ae0:	4b60      	ldr	r3, [pc, #384]	@ (8004c64 <checkAktifCalisma+0x8e4>)
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8004ae6:	4b5f      	ldr	r3, [pc, #380]	@ (8004c64 <checkAktifCalisma+0x8e4>)
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d025      	beq.n	8004b3a <checkAktifCalisma+0x7ba>
 8004aee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004af2:	485d      	ldr	r0, [pc, #372]	@ (8004c68 <checkAktifCalisma+0x8e8>)
 8004af4:	f005 fdaa 	bl	800a64c <HAL_GPIO_ReadPin>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d007      	beq.n	8004b0e <checkAktifCalisma+0x78e>
 8004afe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004b02:	4857      	ldr	r0, [pc, #348]	@ (8004c60 <checkAktifCalisma+0x8e0>)
 8004b04:	f005 fda2 	bl	800a64c <HAL_GPIO_ReadPin>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d115      	bne.n	8004b3a <checkAktifCalisma+0x7ba>
 8004b0e:	4b57      	ldr	r3, [pc, #348]	@ (8004c6c <checkAktifCalisma+0x8ec>)
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d011      	beq.n	8004b3a <checkAktifCalisma+0x7ba>
 8004b16:	4b56      	ldr	r3, [pc, #344]	@ (8004c70 <checkAktifCalisma+0x8f0>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00d      	beq.n	8004b3a <checkAktifCalisma+0x7ba>
 8004b1e:	4b55      	ldr	r3, [pc, #340]	@ (8004c74 <checkAktifCalisma+0x8f4>)
 8004b20:	781b      	ldrb	r3, [r3, #0]
 8004b22:	f083 0301 	eor.w	r3, r3, #1
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d006      	beq.n	8004b3a <checkAktifCalisma+0x7ba>
					timer2=millis;
 8004b2c:	4b52      	ldr	r3, [pc, #328]	@ (8004c78 <checkAktifCalisma+0x8f8>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a52      	ldr	r2, [pc, #328]	@ (8004c7c <checkAktifCalisma+0x8fc>)
 8004b32:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8004b34:	4b4f      	ldr	r3, [pc, #316]	@ (8004c74 <checkAktifCalisma+0x8f4>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004b3a:	4b4f      	ldr	r3, [pc, #316]	@ (8004c78 <checkAktifCalisma+0x8f8>)
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4b4f      	ldr	r3, [pc, #316]	@ (8004c7c <checkAktifCalisma+0x8fc>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	4a4e      	ldr	r2, [pc, #312]	@ (8004c80 <checkAktifCalisma+0x900>)
 8004b46:	7812      	ldrb	r2, [r2, #0]
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d303      	bcc.n	8004b54 <checkAktifCalisma+0x7d4>
 8004b4c:	4b49      	ldr	r3, [pc, #292]	@ (8004c74 <checkAktifCalisma+0x8f4>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10d      	bne.n	8004b70 <checkAktifCalisma+0x7f0>
 8004b54:	4b45      	ldr	r3, [pc, #276]	@ (8004c6c <checkAktifCalisma+0x8ec>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	f083 0301 	eor.w	r3, r3, #1
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d106      	bne.n	8004b70 <checkAktifCalisma+0x7f0>
 8004b62:	4b43      	ldr	r3, [pc, #268]	@ (8004c70 <checkAktifCalisma+0x8f0>)
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	f083 0301 	eor.w	r3, r3, #1
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004b70:	2200      	movs	r2, #0
 8004b72:	2120      	movs	r1, #32
 8004b74:	483a      	ldr	r0, [pc, #232]	@ (8004c60 <checkAktifCalisma+0x8e0>)
 8004b76:	f005 fd80 	bl	800a67a <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8004b7a:	4b3a      	ldr	r3, [pc, #232]	@ (8004c64 <checkAktifCalisma+0x8e4>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8004b80:	4b3c      	ldr	r3, [pc, #240]	@ (8004c74 <checkAktifCalisma+0x8f4>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8004b86:	4b3f      	ldr	r3, [pc, #252]	@ (8004c84 <checkAktifCalisma+0x904>)
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f040 8088 	bne.w	8004ca0 <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004b90:	4b3d      	ldr	r3, [pc, #244]	@ (8004c88 <checkAktifCalisma+0x908>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d003      	beq.n	8004ba0 <checkAktifCalisma+0x820>
 8004b98:	4b3b      	ldr	r3, [pc, #236]	@ (8004c88 <checkAktifCalisma+0x908>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d17f      	bne.n	8004ca0 <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8004ba0:	4b32      	ldr	r3, [pc, #200]	@ (8004c6c <checkAktifCalisma+0x8ec>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d07b      	beq.n	8004ca0 <checkAktifCalisma+0x920>
 8004ba8:	4b31      	ldr	r3, [pc, #196]	@ (8004c70 <checkAktifCalisma+0x8f0>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d077      	beq.n	8004ca0 <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004bb0:	2140      	movs	r1, #64	@ 0x40
 8004bb2:	482b      	ldr	r0, [pc, #172]	@ (8004c60 <checkAktifCalisma+0x8e0>)
 8004bb4:	f005 fd4a 	bl	800a64c <HAL_GPIO_ReadPin>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d170      	bne.n	8004ca0 <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8004bbe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004bc2:	4827      	ldr	r0, [pc, #156]	@ (8004c60 <checkAktifCalisma+0x8e0>)
 8004bc4:	f005 fd42 	bl	800a64c <HAL_GPIO_ReadPin>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <checkAktifCalisma+0x856>
 8004bce:	4b2f      	ldr	r3, [pc, #188]	@ (8004c8c <checkAktifCalisma+0x90c>)
 8004bd0:	781b      	ldrb	r3, [r3, #0]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d164      	bne.n	8004ca0 <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004bd6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004bda:	4823      	ldr	r0, [pc, #140]	@ (8004c68 <checkAktifCalisma+0x8e8>)
 8004bdc:	f005 fd36 	bl	800a64c <HAL_GPIO_ReadPin>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d10f      	bne.n	8004c06 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004be6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004bea:	481f      	ldr	r0, [pc, #124]	@ (8004c68 <checkAktifCalisma+0x8e8>)
 8004bec:	f005 fd2e 	bl	800a64c <HAL_GPIO_ReadPin>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d107      	bne.n	8004c06 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8004bf6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004bfa:	481b      	ldr	r0, [pc, #108]	@ (8004c68 <checkAktifCalisma+0x8e8>)
 8004bfc:	f005 fd26 	bl	800a64c <HAL_GPIO_ReadPin>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d003      	beq.n	8004c0e <checkAktifCalisma+0x88e>
 8004c06:	4b22      	ldr	r3, [pc, #136]	@ (8004c90 <checkAktifCalisma+0x910>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d048      	beq.n	8004ca0 <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 8004c0e:	4b21      	ldr	r3, [pc, #132]	@ (8004c94 <checkAktifCalisma+0x914>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	f083 0301 	eor.w	r3, r3, #1
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d041      	beq.n	8004ca0 <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8004c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8004c98 <checkAktifCalisma+0x918>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	f083 0301 	eor.w	r3, r3, #1
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d03a      	beq.n	8004ca0 <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8004c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8004c9c <checkAktifCalisma+0x91c>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	f083 0301 	eor.w	r3, r3, #1
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d033      	beq.n	8004ca0 <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8004c38:	4b0a      	ldr	r3, [pc, #40]	@ (8004c64 <checkAktifCalisma+0x8e4>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	f083 0301 	eor.w	r3, r3, #1
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d02c      	beq.n	8004ca0 <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 8004c46:	4b05      	ldr	r3, [pc, #20]	@ (8004c5c <checkAktifCalisma+0x8dc>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	f083 0301 	eor.w	r3, r3, #1
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d025      	beq.n	8004ca0 <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 8004c54:	4b0e      	ldr	r3, [pc, #56]	@ (8004c90 <checkAktifCalisma+0x910>)
 8004c56:	2201      	movs	r2, #1
 8004c58:	701a      	strb	r2, [r3, #0]
 8004c5a:	e024      	b.n	8004ca6 <checkAktifCalisma+0x926>
 8004c5c:	200014f2 	.word	0x200014f2
 8004c60:	40011000 	.word	0x40011000
 8004c64:	200014f6 	.word	0x200014f6
 8004c68:	40010c00 	.word	0x40010c00
 8004c6c:	2000150d 	.word	0x2000150d
 8004c70:	2000150e 	.word	0x2000150e
 8004c74:	200014ee 	.word	0x200014ee
 8004c78:	20001494 	.word	0x20001494
 8004c7c:	200014a0 	.word	0x200014a0
 8004c80:	200014d2 	.word	0x200014d2
 8004c84:	200014d9 	.word	0x200014d9
 8004c88:	200014cb 	.word	0x200014cb
 8004c8c:	200014cd 	.word	0x200014cd
 8004c90:	200014f3 	.word	0x200014f3
 8004c94:	200014f1 	.word	0x200014f1
 8004c98:	200014f5 	.word	0x200014f5
 8004c9c:	200014f4 	.word	0x200014f4
				} else {
					devmotorasagicalisiyor=0;
 8004ca0:	4b96      	ldr	r3, [pc, #600]	@ (8004efc <checkAktifCalisma+0xb7c>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8004ca6:	4b95      	ldr	r3, [pc, #596]	@ (8004efc <checkAktifCalisma+0xb7c>)
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d007      	beq.n	8004cbe <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004cae:	2201      	movs	r2, #1
 8004cb0:	2110      	movs	r1, #16
 8004cb2:	4893      	ldr	r0, [pc, #588]	@ (8004f00 <checkAktifCalisma+0xb80>)
 8004cb4:	f005 fce1 	bl	800a67a <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8004cb8:	4b92      	ldr	r3, [pc, #584]	@ (8004f04 <checkAktifCalisma+0xb84>)
 8004cba:	2201      	movs	r2, #1
 8004cbc:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004cbe:	4b91      	ldr	r3, [pc, #580]	@ (8004f04 <checkAktifCalisma+0xb84>)
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d024      	beq.n	8004d10 <checkAktifCalisma+0x990>
 8004cc6:	2140      	movs	r1, #64	@ 0x40
 8004cc8:	488d      	ldr	r0, [pc, #564]	@ (8004f00 <checkAktifCalisma+0xb80>)
 8004cca:	f005 fcbf 	bl	800a64c <HAL_GPIO_ReadPin>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d007      	beq.n	8004ce4 <checkAktifCalisma+0x964>
 8004cd4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004cd8:	4889      	ldr	r0, [pc, #548]	@ (8004f00 <checkAktifCalisma+0xb80>)
 8004cda:	f005 fcb7 	bl	800a64c <HAL_GPIO_ReadPin>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d115      	bne.n	8004d10 <checkAktifCalisma+0x990>
 8004ce4:	4b88      	ldr	r3, [pc, #544]	@ (8004f08 <checkAktifCalisma+0xb88>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d011      	beq.n	8004d10 <checkAktifCalisma+0x990>
 8004cec:	4b87      	ldr	r3, [pc, #540]	@ (8004f0c <checkAktifCalisma+0xb8c>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00d      	beq.n	8004d10 <checkAktifCalisma+0x990>
 8004cf4:	4b86      	ldr	r3, [pc, #536]	@ (8004f10 <checkAktifCalisma+0xb90>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	f083 0301 	eor.w	r3, r3, #1
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d006      	beq.n	8004d10 <checkAktifCalisma+0x990>
					timer2=millis;
 8004d02:	4b84      	ldr	r3, [pc, #528]	@ (8004f14 <checkAktifCalisma+0xb94>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a84      	ldr	r2, [pc, #528]	@ (8004f18 <checkAktifCalisma+0xb98>)
 8004d08:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8004d0a:	4b81      	ldr	r3, [pc, #516]	@ (8004f10 <checkAktifCalisma+0xb90>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004d10:	4b80      	ldr	r3, [pc, #512]	@ (8004f14 <checkAktifCalisma+0xb94>)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	4b80      	ldr	r3, [pc, #512]	@ (8004f18 <checkAktifCalisma+0xb98>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	4a80      	ldr	r2, [pc, #512]	@ (8004f1c <checkAktifCalisma+0xb9c>)
 8004d1c:	7812      	ldrb	r2, [r2, #0]
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d303      	bcc.n	8004d2a <checkAktifCalisma+0x9aa>
 8004d22:	4b7b      	ldr	r3, [pc, #492]	@ (8004f10 <checkAktifCalisma+0xb90>)
 8004d24:	781b      	ldrb	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10d      	bne.n	8004d46 <checkAktifCalisma+0x9c6>
 8004d2a:	4b77      	ldr	r3, [pc, #476]	@ (8004f08 <checkAktifCalisma+0xb88>)
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	f083 0301 	eor.w	r3, r3, #1
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d106      	bne.n	8004d46 <checkAktifCalisma+0x9c6>
 8004d38:	4b74      	ldr	r3, [pc, #464]	@ (8004f0c <checkAktifCalisma+0xb8c>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	f083 0301 	eor.w	r3, r3, #1
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004d46:	2200      	movs	r2, #0
 8004d48:	2110      	movs	r1, #16
 8004d4a:	486d      	ldr	r0, [pc, #436]	@ (8004f00 <checkAktifCalisma+0xb80>)
 8004d4c:	f005 fc95 	bl	800a67a <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8004d50:	4b6c      	ldr	r3, [pc, #432]	@ (8004f04 <checkAktifCalisma+0xb84>)
 8004d52:	2200      	movs	r2, #0
 8004d54:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8004d56:	4b6e      	ldr	r3, [pc, #440]	@ (8004f10 <checkAktifCalisma+0xb90>)
 8004d58:	2200      	movs	r2, #0
 8004d5a:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004d5c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d60:	486f      	ldr	r0, [pc, #444]	@ (8004f20 <checkAktifCalisma+0xba0>)
 8004d62:	f005 fc73 	bl	800a64c <HAL_GPIO_ReadPin>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d120      	bne.n	8004dae <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004d6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004d70:	486b      	ldr	r0, [pc, #428]	@ (8004f20 <checkAktifCalisma+0xba0>)
 8004d72:	f005 fc6b 	bl	800a64c <HAL_GPIO_ReadPin>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d118      	bne.n	8004dae <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004d7c:	2104      	movs	r1, #4
 8004d7e:	4868      	ldr	r0, [pc, #416]	@ (8004f20 <checkAktifCalisma+0xba0>)
 8004d80:	f005 fc64 	bl	800a64c <HAL_GPIO_ReadPin>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d111      	bne.n	8004dae <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004d8a:	2102      	movs	r1, #2
 8004d8c:	4864      	ldr	r0, [pc, #400]	@ (8004f20 <checkAktifCalisma+0xba0>)
 8004d8e:	f005 fc5d 	bl	800a64c <HAL_GPIO_ReadPin>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d10a      	bne.n	8004dae <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004d98:	2101      	movs	r1, #1
 8004d9a:	4861      	ldr	r0, [pc, #388]	@ (8004f20 <checkAktifCalisma+0xba0>)
 8004d9c:	f005 fc56 	bl	800a64c <HAL_GPIO_ReadPin>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d103      	bne.n	8004dae <checkAktifCalisma+0xa2e>
					makineStop=1;
 8004da6:	4b5f      	ldr	r3, [pc, #380]	@ (8004f24 <checkAktifCalisma+0xba4>)
 8004da8:	2201      	movs	r2, #1
 8004daa:	701a      	strb	r2, [r3, #0]
 8004dac:	e002      	b.n	8004db4 <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 8004dae:	4b5d      	ldr	r3, [pc, #372]	@ (8004f24 <checkAktifCalisma+0xba4>)
 8004db0:	2200      	movs	r2, #0
 8004db2:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004db4:	4b5c      	ldr	r3, [pc, #368]	@ (8004f28 <checkAktifCalisma+0xba8>)
 8004db6:	781b      	ldrb	r3, [r3, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d144      	bne.n	8004e46 <checkAktifCalisma+0xac6>
 8004dbc:	4b5b      	ldr	r3, [pc, #364]	@ (8004f2c <checkAktifCalisma+0xbac>)
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d003      	beq.n	8004dcc <checkAktifCalisma+0xa4c>
 8004dc4:	4b59      	ldr	r3, [pc, #356]	@ (8004f2c <checkAktifCalisma+0xbac>)
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	2b03      	cmp	r3, #3
 8004dca:	d13c      	bne.n	8004e46 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004dcc:	2180      	movs	r1, #128	@ 0x80
 8004dce:	484c      	ldr	r0, [pc, #304]	@ (8004f00 <checkAktifCalisma+0xb80>)
 8004dd0:	f005 fc3c 	bl	800a64c <HAL_GPIO_ReadPin>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d103      	bne.n	8004de2 <checkAktifCalisma+0xa62>
 8004dda:	4b55      	ldr	r3, [pc, #340]	@ (8004f30 <checkAktifCalisma+0xbb0>)
 8004ddc:	781b      	ldrb	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00b      	beq.n	8004dfa <checkAktifCalisma+0xa7a>
 8004de2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004de6:	484e      	ldr	r0, [pc, #312]	@ (8004f20 <checkAktifCalisma+0xba0>)
 8004de8:	f005 fc30 	bl	800a64c <HAL_GPIO_ReadPin>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d129      	bne.n	8004e46 <checkAktifCalisma+0xac6>
 8004df2:	4b4f      	ldr	r3, [pc, #316]	@ (8004f30 <checkAktifCalisma+0xbb0>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d125      	bne.n	8004e46 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004dfa:	2104      	movs	r1, #4
 8004dfc:	4840      	ldr	r0, [pc, #256]	@ (8004f00 <checkAktifCalisma+0xb80>)
 8004dfe:	f005 fc25 	bl	800a64c <HAL_GPIO_ReadPin>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d003      	beq.n	8004e10 <checkAktifCalisma+0xa90>
 8004e08:	4b4a      	ldr	r3, [pc, #296]	@ (8004f34 <checkAktifCalisma+0xbb4>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d11a      	bne.n	8004e46 <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004e10:	2102      	movs	r1, #2
 8004e12:	483b      	ldr	r0, [pc, #236]	@ (8004f00 <checkAktifCalisma+0xb80>)
 8004e14:	f005 fc1a 	bl	800a64c <HAL_GPIO_ReadPin>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d113      	bne.n	8004e46 <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 8004e1e:	4b46      	ldr	r3, [pc, #280]	@ (8004f38 <checkAktifCalisma+0xbb8>)
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	f083 0301 	eor.w	r3, r3, #1
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00c      	beq.n	8004e46 <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 8004e2c:	4b3d      	ldr	r3, [pc, #244]	@ (8004f24 <checkAktifCalisma+0xba4>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d008      	beq.n	8004e46 <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 8004e34:	4b41      	ldr	r3, [pc, #260]	@ (8004f3c <checkAktifCalisma+0xbbc>)
 8004e36:	2201      	movs	r2, #1
 8004e38:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004e3a:	4b36      	ldr	r3, [pc, #216]	@ (8004f14 <checkAktifCalisma+0xb94>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a40      	ldr	r2, [pc, #256]	@ (8004f40 <checkAktifCalisma+0xbc0>)
 8004e40:	6013      	str	r3, [r2, #0]
					bekle();
 8004e42:	f7ff f901 	bl	8004048 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8004e46:	4b33      	ldr	r3, [pc, #204]	@ (8004f14 <checkAktifCalisma+0xb94>)
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	4b3d      	ldr	r3, [pc, #244]	@ (8004f40 <checkAktifCalisma+0xbc0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	4a3c      	ldr	r2, [pc, #240]	@ (8004f44 <checkAktifCalisma+0xbc4>)
 8004e52:	7812      	ldrb	r2, [r2, #0]
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d211      	bcs.n	8004e7c <checkAktifCalisma+0xafc>
 8004e58:	2104      	movs	r1, #4
 8004e5a:	4829      	ldr	r0, [pc, #164]	@ (8004f00 <checkAktifCalisma+0xb80>)
 8004e5c:	f005 fbf6 	bl	800a64c <HAL_GPIO_ReadPin>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <checkAktifCalisma+0xafc>
 8004e66:	4b33      	ldr	r3, [pc, #204]	@ (8004f34 <checkAktifCalisma+0xbb4>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d006      	beq.n	8004e7c <checkAktifCalisma+0xafc>
 8004e6e:	4b2d      	ldr	r3, [pc, #180]	@ (8004f24 <checkAktifCalisma+0xba4>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	f083 0301 	eor.w	r3, r3, #1
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 8004e7c:	4b2f      	ldr	r3, [pc, #188]	@ (8004f3c <checkAktifCalisma+0xbbc>)
 8004e7e:	2200      	movs	r2, #0
 8004e80:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004e82:	4b29      	ldr	r3, [pc, #164]	@ (8004f28 <checkAktifCalisma+0xba8>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d160      	bne.n	8004f4c <checkAktifCalisma+0xbcc>
 8004e8a:	4b28      	ldr	r3, [pc, #160]	@ (8004f2c <checkAktifCalisma+0xbac>)
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d003      	beq.n	8004e9a <checkAktifCalisma+0xb1a>
 8004e92:	4b26      	ldr	r3, [pc, #152]	@ (8004f2c <checkAktifCalisma+0xbac>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b03      	cmp	r3, #3
 8004e98:	d158      	bne.n	8004f4c <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004e9a:	2104      	movs	r1, #4
 8004e9c:	4818      	ldr	r0, [pc, #96]	@ (8004f00 <checkAktifCalisma+0xb80>)
 8004e9e:	f005 fbd5 	bl	800a64c <HAL_GPIO_ReadPin>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	d003      	beq.n	8004eb0 <checkAktifCalisma+0xb30>
 8004ea8:	4b22      	ldr	r3, [pc, #136]	@ (8004f34 <checkAktifCalisma+0xbb4>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d14d      	bne.n	8004f4c <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004eb0:	2102      	movs	r1, #2
 8004eb2:	4813      	ldr	r0, [pc, #76]	@ (8004f00 <checkAktifCalisma+0xb80>)
 8004eb4:	f005 fbca 	bl	800a64c <HAL_GPIO_ReadPin>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d146      	bne.n	8004f4c <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004ebe:	2180      	movs	r1, #128	@ 0x80
 8004ec0:	480f      	ldr	r0, [pc, #60]	@ (8004f00 <checkAktifCalisma+0xb80>)
 8004ec2:	f005 fbc3 	bl	800a64c <HAL_GPIO_ReadPin>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d103      	bne.n	8004ed4 <checkAktifCalisma+0xb54>
 8004ecc:	4b18      	ldr	r3, [pc, #96]	@ (8004f30 <checkAktifCalisma+0xbb0>)
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d00b      	beq.n	8004eec <checkAktifCalisma+0xb6c>
 8004ed4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004ed8:	4811      	ldr	r0, [pc, #68]	@ (8004f20 <checkAktifCalisma+0xba0>)
 8004eda:	f005 fbb7 	bl	800a64c <HAL_GPIO_ReadPin>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d133      	bne.n	8004f4c <checkAktifCalisma+0xbcc>
 8004ee4:	4b12      	ldr	r3, [pc, #72]	@ (8004f30 <checkAktifCalisma+0xbb0>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d12f      	bne.n	8004f4c <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 8004eec:	4b0d      	ldr	r3, [pc, #52]	@ (8004f24 <checkAktifCalisma+0xba4>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d02b      	beq.n	8004f4c <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 8004ef4:	4b14      	ldr	r3, [pc, #80]	@ (8004f48 <checkAktifCalisma+0xbc8>)
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	701a      	strb	r2, [r3, #0]
 8004efa:	e02a      	b.n	8004f52 <checkAktifCalisma+0xbd2>
 8004efc:	200014f3 	.word	0x200014f3
 8004f00:	40011000 	.word	0x40011000
 8004f04:	200014f7 	.word	0x200014f7
 8004f08:	2000150d 	.word	0x2000150d
 8004f0c:	2000150e 	.word	0x2000150e
 8004f10:	200014ef 	.word	0x200014ef
 8004f14:	20001494 	.word	0x20001494
 8004f18:	200014a0 	.word	0x200014a0
 8004f1c:	200014d2 	.word	0x200014d2
 8004f20:	40010c00 	.word	0x40010c00
 8004f24:	200014fd 	.word	0x200014fd
 8004f28:	200014c5 	.word	0x200014c5
 8004f2c:	200014c4 	.word	0x200014c4
 8004f30:	200014c8 	.word	0x200014c8
 8004f34:	200014c2 	.word	0x200014c2
 8004f38:	200014eb 	.word	0x200014eb
 8004f3c:	200014fe 	.word	0x200014fe
 8004f40:	20001498 	.word	0x20001498
 8004f44:	200014d5 	.word	0x200014d5
 8004f48:	200014ff 	.word	0x200014ff
				} else {
					kapi1butonkontrol=0;
 8004f4c:	4b8b      	ldr	r3, [pc, #556]	@ (800517c <checkAktifCalisma+0xdfc>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004f52:	4b8b      	ldr	r3, [pc, #556]	@ (8005180 <checkAktifCalisma+0xe00>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d121      	bne.n	8004f9e <checkAktifCalisma+0xc1e>
 8004f5a:	4b8a      	ldr	r3, [pc, #552]	@ (8005184 <checkAktifCalisma+0xe04>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d003      	beq.n	8004f6a <checkAktifCalisma+0xbea>
 8004f62:	4b88      	ldr	r3, [pc, #544]	@ (8005184 <checkAktifCalisma+0xe04>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d119      	bne.n	8004f9e <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004f6a:	2104      	movs	r1, #4
 8004f6c:	4886      	ldr	r0, [pc, #536]	@ (8005188 <checkAktifCalisma+0xe08>)
 8004f6e:	f005 fb6d 	bl	800a64c <HAL_GPIO_ReadPin>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d003      	beq.n	8004f80 <checkAktifCalisma+0xc00>
 8004f78:	4b84      	ldr	r3, [pc, #528]	@ (800518c <checkAktifCalisma+0xe0c>)
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10e      	bne.n	8004f9e <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004f80:	2102      	movs	r1, #2
 8004f82:	4881      	ldr	r0, [pc, #516]	@ (8005188 <checkAktifCalisma+0xe08>)
 8004f84:	f005 fb62 	bl	800a64c <HAL_GPIO_ReadPin>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d107      	bne.n	8004f9e <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 8004f8e:	4b80      	ldr	r3, [pc, #512]	@ (8005190 <checkAktifCalisma+0xe10>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 8004f96:	4b7f      	ldr	r3, [pc, #508]	@ (8005194 <checkAktifCalisma+0xe14>)
 8004f98:	2201      	movs	r2, #1
 8004f9a:	701a      	strb	r2, [r3, #0]
 8004f9c:	e002      	b.n	8004fa4 <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 8004f9e:	4b7d      	ldr	r3, [pc, #500]	@ (8005194 <checkAktifCalisma+0xe14>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8004fa4:	4b75      	ldr	r3, [pc, #468]	@ (800517c <checkAktifCalisma+0xdfc>)
 8004fa6:	781b      	ldrb	r3, [r3, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d107      	bne.n	8004fbc <checkAktifCalisma+0xc3c>
 8004fac:	4b79      	ldr	r3, [pc, #484]	@ (8005194 <checkAktifCalisma+0xe14>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d103      	bne.n	8004fbc <checkAktifCalisma+0xc3c>
 8004fb4:	4b78      	ldr	r3, [pc, #480]	@ (8005198 <checkAktifCalisma+0xe18>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	2180      	movs	r1, #128	@ 0x80
 8004fc0:	4876      	ldr	r0, [pc, #472]	@ (800519c <checkAktifCalisma+0xe1c>)
 8004fc2:	f005 fb5a 	bl	800a67a <HAL_GPIO_WritePin>
 8004fc6:	e004      	b.n	8004fd2 <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004fc8:	2200      	movs	r2, #0
 8004fca:	2180      	movs	r1, #128	@ 0x80
 8004fcc:	4873      	ldr	r0, [pc, #460]	@ (800519c <checkAktifCalisma+0xe1c>)
 8004fce:	f005 fb54 	bl	800a67a <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004fd2:	4b73      	ldr	r3, [pc, #460]	@ (80051a0 <checkAktifCalisma+0xe20>)
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d141      	bne.n	800505e <checkAktifCalisma+0xcde>
 8004fda:	4b6a      	ldr	r3, [pc, #424]	@ (8005184 <checkAktifCalisma+0xe04>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d003      	beq.n	8004fea <checkAktifCalisma+0xc6a>
 8004fe2:	4b68      	ldr	r3, [pc, #416]	@ (8005184 <checkAktifCalisma+0xe04>)
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	d139      	bne.n	800505e <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004fea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004fee:	4866      	ldr	r0, [pc, #408]	@ (8005188 <checkAktifCalisma+0xe08>)
 8004ff0:	f005 fb2c 	bl	800a64c <HAL_GPIO_ReadPin>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d103      	bne.n	8005002 <checkAktifCalisma+0xc82>
 8004ffa:	4b6a      	ldr	r3, [pc, #424]	@ (80051a4 <checkAktifCalisma+0xe24>)
 8004ffc:	781b      	ldrb	r3, [r3, #0]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00b      	beq.n	800501a <checkAktifCalisma+0xc9a>
 8005002:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005006:	4868      	ldr	r0, [pc, #416]	@ (80051a8 <checkAktifCalisma+0xe28>)
 8005008:	f005 fb20 	bl	800a64c <HAL_GPIO_ReadPin>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d125      	bne.n	800505e <checkAktifCalisma+0xcde>
 8005012:	4b64      	ldr	r3, [pc, #400]	@ (80051a4 <checkAktifCalisma+0xe24>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d121      	bne.n	800505e <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800501a:	2102      	movs	r1, #2
 800501c:	485a      	ldr	r0, [pc, #360]	@ (8005188 <checkAktifCalisma+0xe08>)
 800501e:	f005 fb15 	bl	800a64c <HAL_GPIO_ReadPin>
 8005022:	4603      	mov	r3, r0
 8005024:	2b01      	cmp	r3, #1
 8005026:	d11a      	bne.n	800505e <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005028:	2104      	movs	r1, #4
 800502a:	4857      	ldr	r0, [pc, #348]	@ (8005188 <checkAktifCalisma+0xe08>)
 800502c:	f005 fb0e 	bl	800a64c <HAL_GPIO_ReadPin>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d113      	bne.n	800505e <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 8005036:	4b56      	ldr	r3, [pc, #344]	@ (8005190 <checkAktifCalisma+0xe10>)
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00f      	beq.n	800505e <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 800503e:	4b5b      	ldr	r3, [pc, #364]	@ (80051ac <checkAktifCalisma+0xe2c>)
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	f083 0301 	eor.w	r3, r3, #1
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 800504c:	4b58      	ldr	r3, [pc, #352]	@ (80051b0 <checkAktifCalisma+0xe30>)
 800504e:	2201      	movs	r2, #1
 8005050:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005052:	4b58      	ldr	r3, [pc, #352]	@ (80051b4 <checkAktifCalisma+0xe34>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a58      	ldr	r2, [pc, #352]	@ (80051b8 <checkAktifCalisma+0xe38>)
 8005058:	6013      	str	r3, [r2, #0]
					bekle();
 800505a:	f7fe fff5 	bl	8004048 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 800505e:	4b55      	ldr	r3, [pc, #340]	@ (80051b4 <checkAktifCalisma+0xe34>)
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	4b55      	ldr	r3, [pc, #340]	@ (80051b8 <checkAktifCalisma+0xe38>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	4a54      	ldr	r2, [pc, #336]	@ (80051bc <checkAktifCalisma+0xe3c>)
 800506a:	7812      	ldrb	r2, [r2, #0]
 800506c:	4293      	cmp	r3, r2
 800506e:	d20d      	bcs.n	800508c <checkAktifCalisma+0xd0c>
 8005070:	2102      	movs	r1, #2
 8005072:	4845      	ldr	r0, [pc, #276]	@ (8005188 <checkAktifCalisma+0xe08>)
 8005074:	f005 faea 	bl	800a64c <HAL_GPIO_ReadPin>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d006      	beq.n	800508c <checkAktifCalisma+0xd0c>
 800507e:	4b44      	ldr	r3, [pc, #272]	@ (8005190 <checkAktifCalisma+0xe10>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	f083 0301 	eor.w	r3, r3, #1
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d002      	beq.n	8005092 <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 800508c:	4b48      	ldr	r3, [pc, #288]	@ (80051b0 <checkAktifCalisma+0xe30>)
 800508e:	2200      	movs	r2, #0
 8005090:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005092:	4b43      	ldr	r3, [pc, #268]	@ (80051a0 <checkAktifCalisma+0xe20>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d135      	bne.n	8005106 <checkAktifCalisma+0xd86>
 800509a:	4b3a      	ldr	r3, [pc, #232]	@ (8005184 <checkAktifCalisma+0xe04>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d003      	beq.n	80050aa <checkAktifCalisma+0xd2a>
 80050a2:	4b38      	ldr	r3, [pc, #224]	@ (8005184 <checkAktifCalisma+0xe04>)
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b03      	cmp	r3, #3
 80050a8:	d12d      	bne.n	8005106 <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80050aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80050ae:	4836      	ldr	r0, [pc, #216]	@ (8005188 <checkAktifCalisma+0xe08>)
 80050b0:	f005 facc 	bl	800a64c <HAL_GPIO_ReadPin>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d103      	bne.n	80050c2 <checkAktifCalisma+0xd42>
 80050ba:	4b3a      	ldr	r3, [pc, #232]	@ (80051a4 <checkAktifCalisma+0xe24>)
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d00b      	beq.n	80050da <checkAktifCalisma+0xd5a>
 80050c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80050c6:	4838      	ldr	r0, [pc, #224]	@ (80051a8 <checkAktifCalisma+0xe28>)
 80050c8:	f005 fac0 	bl	800a64c <HAL_GPIO_ReadPin>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d119      	bne.n	8005106 <checkAktifCalisma+0xd86>
 80050d2:	4b34      	ldr	r3, [pc, #208]	@ (80051a4 <checkAktifCalisma+0xe24>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d115      	bne.n	8005106 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80050da:	2102      	movs	r1, #2
 80050dc:	482a      	ldr	r0, [pc, #168]	@ (8005188 <checkAktifCalisma+0xe08>)
 80050de:	f005 fab5 	bl	800a64c <HAL_GPIO_ReadPin>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d10e      	bne.n	8005106 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80050e8:	2104      	movs	r1, #4
 80050ea:	4827      	ldr	r0, [pc, #156]	@ (8005188 <checkAktifCalisma+0xe08>)
 80050ec:	f005 faae 	bl	800a64c <HAL_GPIO_ReadPin>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d107      	bne.n	8005106 <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 80050f6:	4b26      	ldr	r3, [pc, #152]	@ (8005190 <checkAktifCalisma+0xe10>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 80050fe:	4b30      	ldr	r3, [pc, #192]	@ (80051c0 <checkAktifCalisma+0xe40>)
 8005100:	2201      	movs	r2, #1
 8005102:	701a      	strb	r2, [r3, #0]
 8005104:	e002      	b.n	800510c <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 8005106:	4b2e      	ldr	r3, [pc, #184]	@ (80051c0 <checkAktifCalisma+0xe40>)
 8005108:	2200      	movs	r2, #0
 800510a:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800510c:	4b24      	ldr	r3, [pc, #144]	@ (80051a0 <checkAktifCalisma+0xe20>)
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	2b02      	cmp	r3, #2
 8005112:	d11d      	bne.n	8005150 <checkAktifCalisma+0xdd0>
 8005114:	4b1b      	ldr	r3, [pc, #108]	@ (8005184 <checkAktifCalisma+0xe04>)
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d003      	beq.n	8005124 <checkAktifCalisma+0xda4>
 800511c:	4b19      	ldr	r3, [pc, #100]	@ (8005184 <checkAktifCalisma+0xe04>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b03      	cmp	r3, #3
 8005122:	d115      	bne.n	8005150 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005124:	2102      	movs	r1, #2
 8005126:	4818      	ldr	r0, [pc, #96]	@ (8005188 <checkAktifCalisma+0xe08>)
 8005128:	f005 fa90 	bl	800a64c <HAL_GPIO_ReadPin>
 800512c:	4603      	mov	r3, r0
 800512e:	2b01      	cmp	r3, #1
 8005130:	d10e      	bne.n	8005150 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005132:	2104      	movs	r1, #4
 8005134:	4814      	ldr	r0, [pc, #80]	@ (8005188 <checkAktifCalisma+0xe08>)
 8005136:	f005 fa89 	bl	800a64c <HAL_GPIO_ReadPin>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d107      	bne.n	8005150 <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 8005140:	4b13      	ldr	r3, [pc, #76]	@ (8005190 <checkAktifCalisma+0xe10>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 8005148:	4b1e      	ldr	r3, [pc, #120]	@ (80051c4 <checkAktifCalisma+0xe44>)
 800514a:	2201      	movs	r2, #1
 800514c:	701a      	strb	r2, [r3, #0]
 800514e:	e002      	b.n	8005156 <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8005150:	4b1c      	ldr	r3, [pc, #112]	@ (80051c4 <checkAktifCalisma+0xe44>)
 8005152:	2200      	movs	r2, #0
 8005154:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005156:	4b1a      	ldr	r3, [pc, #104]	@ (80051c0 <checkAktifCalisma+0xe40>)
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d107      	bne.n	800516e <checkAktifCalisma+0xdee>
 800515e:	4b19      	ldr	r3, [pc, #100]	@ (80051c4 <checkAktifCalisma+0xe44>)
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d103      	bne.n	800516e <checkAktifCalisma+0xdee>
 8005166:	4b12      	ldr	r3, [pc, #72]	@ (80051b0 <checkAktifCalisma+0xe30>)
 8005168:	781b      	ldrb	r3, [r3, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d02c      	beq.n	80051c8 <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800516e:	2201      	movs	r2, #1
 8005170:	2140      	movs	r1, #64	@ 0x40
 8005172:	480a      	ldr	r0, [pc, #40]	@ (800519c <checkAktifCalisma+0xe1c>)
 8005174:	f005 fa81 	bl	800a67a <HAL_GPIO_WritePin>
 8005178:	e02b      	b.n	80051d2 <checkAktifCalisma+0xe52>
 800517a:	bf00      	nop
 800517c:	200014ff 	.word	0x200014ff
 8005180:	200014c5 	.word	0x200014c5
 8005184:	200014c4 	.word	0x200014c4
 8005188:	40011000 	.word	0x40011000
 800518c:	200014c2 	.word	0x200014c2
 8005190:	200014fd 	.word	0x200014fd
 8005194:	20001500 	.word	0x20001500
 8005198:	200014fe 	.word	0x200014fe
 800519c:	40010800 	.word	0x40010800
 80051a0:	200014c6 	.word	0x200014c6
 80051a4:	200014c8 	.word	0x200014c8
 80051a8:	40010c00 	.word	0x40010c00
 80051ac:	200014eb 	.word	0x200014eb
 80051b0:	20001501 	.word	0x20001501
 80051b4:	20001494 	.word	0x20001494
 80051b8:	20001498 	.word	0x20001498
 80051bc:	200014d6 	.word	0x200014d6
 80051c0:	20001502 	.word	0x20001502
 80051c4:	20001503 	.word	0x20001503
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80051c8:	2200      	movs	r2, #0
 80051ca:	2140      	movs	r1, #64	@ 0x40
 80051cc:	4889      	ldr	r0, [pc, #548]	@ (80053f4 <checkAktifCalisma+0x1074>)
 80051ce:	f005 fa54 	bl	800a67a <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 80051d2:	4b89      	ldr	r3, [pc, #548]	@ (80053f8 <checkAktifCalisma+0x1078>)
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <checkAktifCalisma+0xe62>
 80051da:	4b87      	ldr	r3, [pc, #540]	@ (80053f8 <checkAktifCalisma+0x1078>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d115      	bne.n	800520e <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80051e2:	2104      	movs	r1, #4
 80051e4:	4885      	ldr	r0, [pc, #532]	@ (80053fc <checkAktifCalisma+0x107c>)
 80051e6:	f005 fa31 	bl	800a64c <HAL_GPIO_ReadPin>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d003      	beq.n	80051f8 <checkAktifCalisma+0xe78>
 80051f0:	4b83      	ldr	r3, [pc, #524]	@ (8005400 <checkAktifCalisma+0x1080>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10a      	bne.n	800520e <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 80051f8:	2102      	movs	r1, #2
 80051fa:	4880      	ldr	r0, [pc, #512]	@ (80053fc <checkAktifCalisma+0x107c>)
 80051fc:	f005 fa26 	bl	800a64c <HAL_GPIO_ReadPin>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d103      	bne.n	800520e <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 8005206:	4b7f      	ldr	r3, [pc, #508]	@ (8005404 <checkAktifCalisma+0x1084>)
 8005208:	2201      	movs	r2, #1
 800520a:	701a      	strb	r2, [r3, #0]
 800520c:	e002      	b.n	8005214 <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 800520e:	4b7d      	ldr	r3, [pc, #500]	@ (8005404 <checkAktifCalisma+0x1084>)
 8005210:	2200      	movs	r2, #0
 8005212:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005214:	4b78      	ldr	r3, [pc, #480]	@ (80053f8 <checkAktifCalisma+0x1078>)
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d003      	beq.n	8005224 <checkAktifCalisma+0xea4>
 800521c:	4b76      	ldr	r3, [pc, #472]	@ (80053f8 <checkAktifCalisma+0x1078>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b02      	cmp	r3, #2
 8005222:	d111      	bne.n	8005248 <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005224:	2102      	movs	r1, #2
 8005226:	4875      	ldr	r0, [pc, #468]	@ (80053fc <checkAktifCalisma+0x107c>)
 8005228:	f005 fa10 	bl	800a64c <HAL_GPIO_ReadPin>
 800522c:	4603      	mov	r3, r0
 800522e:	2b01      	cmp	r3, #1
 8005230:	d10a      	bne.n	8005248 <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005232:	2104      	movs	r1, #4
 8005234:	4871      	ldr	r0, [pc, #452]	@ (80053fc <checkAktifCalisma+0x107c>)
 8005236:	f005 fa09 	bl	800a64c <HAL_GPIO_ReadPin>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d103      	bne.n	8005248 <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 8005240:	4b71      	ldr	r3, [pc, #452]	@ (8005408 <checkAktifCalisma+0x1088>)
 8005242:	2201      	movs	r2, #1
 8005244:	701a      	strb	r2, [r3, #0]
 8005246:	e002      	b.n	800524e <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 8005248:	4b6f      	ldr	r3, [pc, #444]	@ (8005408 <checkAktifCalisma+0x1088>)
 800524a:	2200      	movs	r2, #0
 800524c:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 800524e:	4b6d      	ldr	r3, [pc, #436]	@ (8005404 <checkAktifCalisma+0x1084>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00f      	beq.n	8005276 <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 8005256:	4b6d      	ldr	r3, [pc, #436]	@ (800540c <checkAktifCalisma+0x108c>)
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d10b      	bne.n	8005276 <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 800525e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005262:	486b      	ldr	r0, [pc, #428]	@ (8005410 <checkAktifCalisma+0x1090>)
 8005264:	f005 f9f2 	bl	800a64c <HAL_GPIO_ReadPin>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d103      	bne.n	8005276 <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 800526e:	4b69      	ldr	r3, [pc, #420]	@ (8005414 <checkAktifCalisma+0x1094>)
 8005270:	2201      	movs	r2, #1
 8005272:	701a      	strb	r2, [r3, #0]
 8005274:	e002      	b.n	800527c <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 8005276:	4b67      	ldr	r3, [pc, #412]	@ (8005414 <checkAktifCalisma+0x1094>)
 8005278:	2200      	movs	r2, #0
 800527a:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 800527c:	4b62      	ldr	r3, [pc, #392]	@ (8005408 <checkAktifCalisma+0x1088>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00f      	beq.n	80052a4 <checkAktifCalisma+0xf24>
						&& kapiAcTipi==1
 8005284:	4b61      	ldr	r3, [pc, #388]	@ (800540c <checkAktifCalisma+0x108c>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d10b      	bne.n	80052a4 <checkAktifCalisma+0xf24>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 800528c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005290:	485f      	ldr	r0, [pc, #380]	@ (8005410 <checkAktifCalisma+0x1090>)
 8005292:	f005 f9db 	bl	800a64c <HAL_GPIO_ReadPin>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d103      	bne.n	80052a4 <checkAktifCalisma+0xf24>

					kapiactablaesp2=1;
 800529c:	4b5e      	ldr	r3, [pc, #376]	@ (8005418 <checkAktifCalisma+0x1098>)
 800529e:	2201      	movs	r2, #1
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	e002      	b.n	80052aa <checkAktifCalisma+0xf2a>
				} else {
					kapiactablaesp2=0;
 80052a4:	4b5c      	ldr	r3, [pc, #368]	@ (8005418 <checkAktifCalisma+0x1098>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80052aa:	4b5c      	ldr	r3, [pc, #368]	@ (800541c <checkAktifCalisma+0x109c>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d11b      	bne.n	80052ea <checkAktifCalisma+0xf6a>
 80052b2:	4b5b      	ldr	r3, [pc, #364]	@ (8005420 <checkAktifCalisma+0x10a0>)
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d003      	beq.n	80052c2 <checkAktifCalisma+0xf42>
 80052ba:	4b59      	ldr	r3, [pc, #356]	@ (8005420 <checkAktifCalisma+0x10a0>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	2b03      	cmp	r3, #3
 80052c0:	d113      	bne.n	80052ea <checkAktifCalisma+0xf6a>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))&& ((kapi1prudhome==1)||(kapi2prudhome==1)))
 80052c2:	4b50      	ldr	r3, [pc, #320]	@ (8005404 <checkAktifCalisma+0x1084>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d103      	bne.n	80052d2 <checkAktifCalisma+0xf52>
 80052ca:	4b4f      	ldr	r3, [pc, #316]	@ (8005408 <checkAktifCalisma+0x1088>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00b      	beq.n	80052ea <checkAktifCalisma+0xf6a>
 80052d2:	4b54      	ldr	r3, [pc, #336]	@ (8005424 <checkAktifCalisma+0x10a4>)
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d103      	bne.n	80052e2 <checkAktifCalisma+0xf62>
 80052da:	4b53      	ldr	r3, [pc, #332]	@ (8005428 <checkAktifCalisma+0x10a8>)
 80052dc:	781b      	ldrb	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <checkAktifCalisma+0xf6a>
						 {

						kapiTablaprudhome=1;
 80052e2:	4b52      	ldr	r3, [pc, #328]	@ (800542c <checkAktifCalisma+0x10ac>)
 80052e4:	2201      	movs	r2, #1
 80052e6:	701a      	strb	r2, [r3, #0]
 80052e8:	e002      	b.n	80052f0 <checkAktifCalisma+0xf70>

						 }
				else {
					kapiTablaprudhome=0;
 80052ea:	4b50      	ldr	r3, [pc, #320]	@ (800542c <checkAktifCalisma+0x10ac>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]
				}


				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80052f0:	4b4a      	ldr	r3, [pc, #296]	@ (800541c <checkAktifCalisma+0x109c>)
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d148      	bne.n	800538a <checkAktifCalisma+0x100a>
 80052f8:	4b49      	ldr	r3, [pc, #292]	@ (8005420 <checkAktifCalisma+0x10a0>)
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d003      	beq.n	8005308 <checkAktifCalisma+0xf88>
 8005300:	4b47      	ldr	r3, [pc, #284]	@ (8005420 <checkAktifCalisma+0x10a0>)
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b03      	cmp	r3, #3
 8005306:	d140      	bne.n	800538a <checkAktifCalisma+0x100a>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005308:	4b3e      	ldr	r3, [pc, #248]	@ (8005404 <checkAktifCalisma+0x1084>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d103      	bne.n	8005318 <checkAktifCalisma+0xf98>
 8005310:	4b3d      	ldr	r3, [pc, #244]	@ (8005408 <checkAktifCalisma+0x1088>)
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d038      	beq.n	800538a <checkAktifCalisma+0x100a>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8005318:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800531c:	4837      	ldr	r0, [pc, #220]	@ (80053fc <checkAktifCalisma+0x107c>)
 800531e:	f005 f995 	bl	800a64c <HAL_GPIO_ReadPin>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01c      	beq.n	8005362 <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8005328:	2180      	movs	r1, #128	@ 0x80
 800532a:	4834      	ldr	r0, [pc, #208]	@ (80053fc <checkAktifCalisma+0x107c>)
 800532c:	f005 f98e 	bl	800a64c <HAL_GPIO_ReadPin>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d106      	bne.n	8005344 <checkAktifCalisma+0xfc4>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8005336:	2104      	movs	r1, #4
 8005338:	4830      	ldr	r0, [pc, #192]	@ (80053fc <checkAktifCalisma+0x107c>)
 800533a:	f005 f987 	bl	800a64c <HAL_GPIO_ReadPin>
 800533e:	4603      	mov	r3, r0
 8005340:	2b01      	cmp	r3, #1
 8005342:	d00e      	beq.n	8005362 <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8005344:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005348:	482c      	ldr	r0, [pc, #176]	@ (80053fc <checkAktifCalisma+0x107c>)
 800534a:	f005 f97f 	bl	800a64c <HAL_GPIO_ReadPin>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <checkAktifCalisma+0xfea>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8005354:	2102      	movs	r1, #2
 8005356:	4829      	ldr	r0, [pc, #164]	@ (80053fc <checkAktifCalisma+0x107c>)
 8005358:	f005 f978 	bl	800a64c <HAL_GPIO_ReadPin>
 800535c:	4603      	mov	r3, r0
 800535e:	2b01      	cmp	r3, #1
 8005360:	d103      	bne.n	800536a <checkAktifCalisma+0xfea>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005362:	4b2a      	ldr	r3, [pc, #168]	@ (800540c <checkAktifCalisma+0x108c>)
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d007      	beq.n	800537a <checkAktifCalisma+0xffa>
 800536a:	4b2a      	ldr	r3, [pc, #168]	@ (8005414 <checkAktifCalisma+0x1094>)
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d103      	bne.n	800537a <checkAktifCalisma+0xffa>
 8005372:	4b29      	ldr	r3, [pc, #164]	@ (8005418 <checkAktifCalisma+0x1098>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d007      	beq.n	800538a <checkAktifCalisma+0x100a>
						&&(makineStop==1)) {
 800537a:	4b2d      	ldr	r3, [pc, #180]	@ (8005430 <checkAktifCalisma+0x10b0>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <checkAktifCalisma+0x100a>

					kapiTablabutonkontrol=1;
 8005382:	4b2c      	ldr	r3, [pc, #176]	@ (8005434 <checkAktifCalisma+0x10b4>)
 8005384:	2201      	movs	r2, #1
 8005386:	701a      	strb	r2, [r3, #0]
 8005388:	e002      	b.n	8005390 <checkAktifCalisma+0x1010>
				} else {
					kapiTablabutonkontrol=0;
 800538a:	4b2a      	ldr	r3, [pc, #168]	@ (8005434 <checkAktifCalisma+0x10b4>)
 800538c:	2200      	movs	r2, #0
 800538e:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005390:	4b22      	ldr	r3, [pc, #136]	@ (800541c <checkAktifCalisma+0x109c>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	2b02      	cmp	r3, #2
 8005396:	d117      	bne.n	80053c8 <checkAktifCalisma+0x1048>
 8005398:	4b21      	ldr	r3, [pc, #132]	@ (8005420 <checkAktifCalisma+0x10a0>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b02      	cmp	r3, #2
 800539e:	d003      	beq.n	80053a8 <checkAktifCalisma+0x1028>
 80053a0:	4b1f      	ldr	r3, [pc, #124]	@ (8005420 <checkAktifCalisma+0x10a0>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b03      	cmp	r3, #3
 80053a6:	d10f      	bne.n	80053c8 <checkAktifCalisma+0x1048>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80053a8:	4b16      	ldr	r3, [pc, #88]	@ (8005404 <checkAktifCalisma+0x1084>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d103      	bne.n	80053b8 <checkAktifCalisma+0x1038>
 80053b0:	4b15      	ldr	r3, [pc, #84]	@ (8005408 <checkAktifCalisma+0x1088>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d007      	beq.n	80053c8 <checkAktifCalisma+0x1048>
						&&(makineStop==1)) {
 80053b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005430 <checkAktifCalisma+0x10b0>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <checkAktifCalisma+0x1048>

					kapiTablapizzato=1;
 80053c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005438 <checkAktifCalisma+0x10b8>)
 80053c2:	2201      	movs	r2, #1
 80053c4:	701a      	strb	r2, [r3, #0]
 80053c6:	e002      	b.n	80053ce <checkAktifCalisma+0x104e>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 80053c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005438 <checkAktifCalisma+0x10b8>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80053ce:	4b19      	ldr	r3, [pc, #100]	@ (8005434 <checkAktifCalisma+0x10b4>)
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d107      	bne.n	80053e6 <checkAktifCalisma+0x1066>
 80053d6:	4b15      	ldr	r3, [pc, #84]	@ (800542c <checkAktifCalisma+0x10ac>)
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d103      	bne.n	80053e6 <checkAktifCalisma+0x1066>
 80053de:	4b16      	ldr	r3, [pc, #88]	@ (8005438 <checkAktifCalisma+0x10b8>)
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d02a      	beq.n	800543c <checkAktifCalisma+0x10bc>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80053e6:	2201      	movs	r2, #1
 80053e8:	2120      	movs	r1, #32
 80053ea:	4802      	ldr	r0, [pc, #8]	@ (80053f4 <checkAktifCalisma+0x1074>)
 80053ec:	f005 f945 	bl	800a67a <HAL_GPIO_WritePin>
 80053f0:	e029      	b.n	8005446 <checkAktifCalisma+0x10c6>
 80053f2:	bf00      	nop
 80053f4:	40010800 	.word	0x40010800
 80053f8:	200014c9 	.word	0x200014c9
 80053fc:	40011000 	.word	0x40011000
 8005400:	200014c2 	.word	0x200014c2
 8005404:	20001507 	.word	0x20001507
 8005408:	20001508 	.word	0x20001508
 800540c:	200014c8 	.word	0x200014c8
 8005410:	40010c00 	.word	0x40010c00
 8005414:	20001517 	.word	0x20001517
 8005418:	20001518 	.word	0x20001518
 800541c:	200014c7 	.word	0x200014c7
 8005420:	200014c4 	.word	0x200014c4
 8005424:	200014fe 	.word	0x200014fe
 8005428:	20001501 	.word	0x20001501
 800542c:	20001504 	.word	0x20001504
 8005430:	200014fd 	.word	0x200014fd
 8005434:	20001505 	.word	0x20001505
 8005438:	20001506 	.word	0x20001506
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800543c:	2200      	movs	r2, #0
 800543e:	2120      	movs	r1, #32
 8005440:	4887      	ldr	r0, [pc, #540]	@ (8005660 <checkAktifCalisma+0x12e0>)
 8005442:	f005 f91a 	bl	800a67a <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005446:	4b87      	ldr	r3, [pc, #540]	@ (8005664 <checkAktifCalisma+0x12e4>)
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d00e      	beq.n	800546c <checkAktifCalisma+0x10ec>
 800544e:	2102      	movs	r1, #2
 8005450:	4885      	ldr	r0, [pc, #532]	@ (8005668 <checkAktifCalisma+0x12e8>)
 8005452:	f005 f8fb 	bl	800a64c <HAL_GPIO_ReadPin>
 8005456:	4603      	mov	r3, r0
 8005458:	2b01      	cmp	r3, #1
 800545a:	d107      	bne.n	800546c <checkAktifCalisma+0x10ec>
 800545c:	4b83      	ldr	r3, [pc, #524]	@ (800566c <checkAktifCalisma+0x12ec>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d103      	bne.n	800546c <checkAktifCalisma+0x10ec>
 8005464:	4b82      	ldr	r3, [pc, #520]	@ (8005670 <checkAktifCalisma+0x12f0>)
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d112      	bne.n	8005492 <checkAktifCalisma+0x1112>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 800546c:	4b81      	ldr	r3, [pc, #516]	@ (8005674 <checkAktifCalisma+0x12f4>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d032      	beq.n	80054da <checkAktifCalisma+0x115a>
 8005474:	2104      	movs	r1, #4
 8005476:	487c      	ldr	r0, [pc, #496]	@ (8005668 <checkAktifCalisma+0x12e8>)
 8005478:	f005 f8e8 	bl	800a64c <HAL_GPIO_ReadPin>
 800547c:	4603      	mov	r3, r0
 800547e:	2b01      	cmp	r3, #1
 8005480:	d12b      	bne.n	80054da <checkAktifCalisma+0x115a>
 8005482:	4b7a      	ldr	r3, [pc, #488]	@ (800566c <checkAktifCalisma+0x12ec>)
 8005484:	781b      	ldrb	r3, [r3, #0]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d027      	beq.n	80054da <checkAktifCalisma+0x115a>
 800548a:	4b79      	ldr	r3, [pc, #484]	@ (8005670 <checkAktifCalisma+0x12f0>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d023      	beq.n	80054da <checkAktifCalisma+0x115a>



					calismaSayisi++;
 8005492:	4b79      	ldr	r3, [pc, #484]	@ (8005678 <checkAktifCalisma+0x12f8>)
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	3301      	adds	r3, #1
 8005498:	b2da      	uxtb	r2, r3
 800549a:	4b77      	ldr	r3, [pc, #476]	@ (8005678 <checkAktifCalisma+0x12f8>)
 800549c:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 800549e:	4b76      	ldr	r3, [pc, #472]	@ (8005678 <checkAktifCalisma+0x12f8>)
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2bff      	cmp	r3, #255	@ 0xff
 80054a4:	d108      	bne.n	80054b8 <checkAktifCalisma+0x1138>
						calismaSayisi = 0;
 80054a6:	4b74      	ldr	r3, [pc, #464]	@ (8005678 <checkAktifCalisma+0x12f8>)
 80054a8:	2200      	movs	r2, #0
 80054aa:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 80054ac:	4b73      	ldr	r3, [pc, #460]	@ (800567c <checkAktifCalisma+0x12fc>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	3301      	adds	r3, #1
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	4b71      	ldr	r3, [pc, #452]	@ (800567c <checkAktifCalisma+0x12fc>)
 80054b6:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 80054b8:	4b6f      	ldr	r3, [pc, #444]	@ (8005678 <checkAktifCalisma+0x12f8>)
 80054ba:	781a      	ldrb	r2, [r3, #0]
 80054bc:	4b70      	ldr	r3, [pc, #448]	@ (8005680 <checkAktifCalisma+0x1300>)
 80054be:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 80054c0:	4b6e      	ldr	r3, [pc, #440]	@ (800567c <checkAktifCalisma+0x12fc>)
 80054c2:	781a      	ldrb	r2, [r3, #0]
 80054c4:	4b6e      	ldr	r3, [pc, #440]	@ (8005680 <checkAktifCalisma+0x1300>)
 80054c6:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 80054c8:	4b6e      	ldr	r3, [pc, #440]	@ (8005684 <checkAktifCalisma+0x1304>)
 80054ca:	2201      	movs	r2, #1
 80054cc:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 80054ce:	4b65      	ldr	r3, [pc, #404]	@ (8005664 <checkAktifCalisma+0x12e4>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 80054d4:	4b67      	ldr	r3, [pc, #412]	@ (8005674 <checkAktifCalisma+0x12f4>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80054da:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80054de:	486a      	ldr	r0, [pc, #424]	@ (8005688 <checkAktifCalisma+0x1308>)
 80054e0:	f005 f8b4 	bl	800a64c <HAL_GPIO_ReadPin>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d016      	beq.n	8005518 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80054ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80054ee:	4866      	ldr	r0, [pc, #408]	@ (8005688 <checkAktifCalisma+0x1308>)
 80054f0:	f005 f8ac 	bl	800a64c <HAL_GPIO_ReadPin>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00e      	beq.n	8005518 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80054fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054fe:	4862      	ldr	r0, [pc, #392]	@ (8005688 <checkAktifCalisma+0x1308>)
 8005500:	f005 f8a4 	bl	800a64c <HAL_GPIO_ReadPin>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d006      	beq.n	8005518 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 800550a:	2140      	movs	r1, #64	@ 0x40
 800550c:	4856      	ldr	r0, [pc, #344]	@ (8005668 <checkAktifCalisma+0x12e8>)
 800550e:	f005 f89d 	bl	800a64c <HAL_GPIO_ReadPin>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d103      	bne.n	8005520 <checkAktifCalisma+0x11a0>

					startBasili=1;
 8005518:	4b5c      	ldr	r3, [pc, #368]	@ (800568c <checkAktifCalisma+0x130c>)
 800551a:	2201      	movs	r2, #1
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	e002      	b.n	8005526 <checkAktifCalisma+0x11a6>
				} else {
					startBasili=0;
 8005520:	4b5a      	ldr	r3, [pc, #360]	@ (800568c <checkAktifCalisma+0x130c>)
 8005522:	2200      	movs	r2, #0
 8005524:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005526:	4b59      	ldr	r3, [pc, #356]	@ (800568c <checkAktifCalisma+0x130c>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d014      	beq.n	8005558 <checkAktifCalisma+0x11d8>
 800552e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005532:	4855      	ldr	r0, [pc, #340]	@ (8005688 <checkAktifCalisma+0x1308>)
 8005534:	f005 f88a 	bl	800a64c <HAL_GPIO_ReadPin>
 8005538:	4603      	mov	r3, r0
 800553a:	2b01      	cmp	r3, #1
 800553c:	d10c      	bne.n	8005558 <checkAktifCalisma+0x11d8>

					hataVar=1;
 800553e:	4b54      	ldr	r3, [pc, #336]	@ (8005690 <checkAktifCalisma+0x1310>)
 8005540:	2201      	movs	r2, #1
 8005542:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 8005544:	2001      	movs	r0, #1
 8005546:	f7fb fd13 	bl	8000f70 <hataKoduLcdGoster>
					hata2EEPROM(1);
 800554a:	2001      	movs	r0, #1
 800554c:	f7fb fcb8 	bl	8000ec0 <hata2EEPROM>
					acilstophatasi=1;
 8005550:	4b50      	ldr	r3, [pc, #320]	@ (8005694 <checkAktifCalisma+0x1314>)
 8005552:	2201      	movs	r2, #1
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	e018      	b.n	800558a <checkAktifCalisma+0x120a>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005558:	4b4e      	ldr	r3, [pc, #312]	@ (8005694 <checkAktifCalisma+0x1314>)
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d014      	beq.n	800558a <checkAktifCalisma+0x120a>
 8005560:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005564:	4848      	ldr	r0, [pc, #288]	@ (8005688 <checkAktifCalisma+0x1308>)
 8005566:	f005 f871 	bl	800a64c <HAL_GPIO_ReadPin>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10c      	bne.n	800558a <checkAktifCalisma+0x120a>
 8005570:	4b46      	ldr	r3, [pc, #280]	@ (800568c <checkAktifCalisma+0x130c>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	f083 0301 	eor.w	r3, r3, #1
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d005      	beq.n	800558a <checkAktifCalisma+0x120a>
					acilstophatasi=0;
 800557e:	4b45      	ldr	r3, [pc, #276]	@ (8005694 <checkAktifCalisma+0x1314>)
 8005580:	2200      	movs	r2, #0
 8005582:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 8005584:	2001      	movs	r0, #1
 8005586:	f7fe fcf1 	bl	8003f6c <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 800558a:	4b43      	ldr	r3, [pc, #268]	@ (8005698 <checkAktifCalisma+0x1318>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	f083 0301 	eor.w	r3, r3, #1
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b00      	cmp	r3, #0
 8005596:	d023      	beq.n	80055e0 <checkAktifCalisma+0x1260>
 8005598:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800559c:	483a      	ldr	r0, [pc, #232]	@ (8005688 <checkAktifCalisma+0x1308>)
 800559e:	f005 f855 	bl	800a64c <HAL_GPIO_ReadPin>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d003      	beq.n	80055b0 <checkAktifCalisma+0x1230>
 80055a8:	4b3c      	ldr	r3, [pc, #240]	@ (800569c <checkAktifCalisma+0x131c>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d017      	beq.n	80055e0 <checkAktifCalisma+0x1260>
 80055b0:	4b3b      	ldr	r3, [pc, #236]	@ (80056a0 <checkAktifCalisma+0x1320>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d113      	bne.n	80055e0 <checkAktifCalisma+0x1260>
 80055b8:	4b3a      	ldr	r3, [pc, #232]	@ (80056a4 <checkAktifCalisma+0x1324>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	f083 0301 	eor.w	r3, r3, #1
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00c      	beq.n	80055e0 <checkAktifCalisma+0x1260>
					hataVar=1;
 80055c6:	4b32      	ldr	r3, [pc, #200]	@ (8005690 <checkAktifCalisma+0x1310>)
 80055c8:	2201      	movs	r2, #1
 80055ca:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 80055cc:	2002      	movs	r0, #2
 80055ce:	f7fb fccf 	bl	8000f70 <hataKoduLcdGoster>
					hata2EEPROM(2);
 80055d2:	2002      	movs	r0, #2
 80055d4:	f7fb fc74 	bl	8000ec0 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 80055d8:	4b32      	ldr	r3, [pc, #200]	@ (80056a4 <checkAktifCalisma+0x1324>)
 80055da:	2201      	movs	r2, #1
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	e017      	b.n	8005610 <checkAktifCalisma+0x1290>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80055e0:	4b30      	ldr	r3, [pc, #192]	@ (80056a4 <checkAktifCalisma+0x1324>)
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d013      	beq.n	8005610 <checkAktifCalisma+0x1290>
 80055e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005698 <checkAktifCalisma+0x1318>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00f      	beq.n	8005610 <checkAktifCalisma+0x1290>
 80055f0:	4b2d      	ldr	r3, [pc, #180]	@ (80056a8 <checkAktifCalisma+0x1328>)
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	f083 0301 	eor.w	r3, r3, #1
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d008      	beq.n	8005610 <checkAktifCalisma+0x1290>
					emniyetCercevesihatasi=0;
 80055fe:	4b29      	ldr	r3, [pc, #164]	@ (80056a4 <checkAktifCalisma+0x1324>)
 8005600:	2200      	movs	r2, #0
 8005602:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 8005604:	4b25      	ldr	r3, [pc, #148]	@ (800569c <checkAktifCalisma+0x131c>)
 8005606:	2200      	movs	r2, #0
 8005608:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 800560a:	2002      	movs	r0, #2
 800560c:	f7fe fcae 	bl	8003f6c <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 8005610:	4b26      	ldr	r3, [pc, #152]	@ (80056ac <checkAktifCalisma+0x132c>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d151      	bne.n	80056bc <checkAktifCalisma+0x133c>
 8005618:	4b25      	ldr	r3, [pc, #148]	@ (80056b0 <checkAktifCalisma+0x1330>)
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d14d      	bne.n	80056bc <checkAktifCalisma+0x133c>
 8005620:	4b24      	ldr	r3, [pc, #144]	@ (80056b4 <checkAktifCalisma+0x1334>)
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d049      	beq.n	80056bc <checkAktifCalisma+0x133c>
 8005628:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800562c:	480e      	ldr	r0, [pc, #56]	@ (8005668 <checkAktifCalisma+0x12e8>)
 800562e:	f005 f80d 	bl	800a64c <HAL_GPIO_ReadPin>
 8005632:	4603      	mov	r3, r0
 8005634:	2b01      	cmp	r3, #1
 8005636:	d141      	bne.n	80056bc <checkAktifCalisma+0x133c>
 8005638:	4b1f      	ldr	r3, [pc, #124]	@ (80056b8 <checkAktifCalisma+0x1338>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	f083 0301 	eor.w	r3, r3, #1
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	d03a      	beq.n	80056bc <checkAktifCalisma+0x133c>
					hataVar=1;
 8005646:	4b12      	ldr	r3, [pc, #72]	@ (8005690 <checkAktifCalisma+0x1310>)
 8005648:	2201      	movs	r2, #1
 800564a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 800564c:	2003      	movs	r0, #3
 800564e:	f7fb fc8f 	bl	8000f70 <hataKoduLcdGoster>
					hata2EEPROM(3);
 8005652:	2003      	movs	r0, #3
 8005654:	f7fb fc34 	bl	8000ec0 <hata2EEPROM>
					basinchatasi=1;
 8005658:	4b17      	ldr	r3, [pc, #92]	@ (80056b8 <checkAktifCalisma+0x1338>)
 800565a:	2201      	movs	r2, #1
 800565c:	701a      	strb	r2, [r3, #0]
 800565e:	e043      	b.n	80056e8 <checkAktifCalisma+0x1368>
 8005660:	40010800 	.word	0x40010800
 8005664:	200014fb 	.word	0x200014fb
 8005668:	40011000 	.word	0x40011000
 800566c:	200014c2 	.word	0x200014c2
 8005670:	200014fd 	.word	0x200014fd
 8005674:	200014fc 	.word	0x200014fc
 8005678:	200014b4 	.word	0x200014b4
 800567c:	200014b6 	.word	0x200014b6
 8005680:	20000fec 	.word	0x20000fec
 8005684:	200014e8 	.word	0x200014e8
 8005688:	40010c00 	.word	0x40010c00
 800568c:	20001509 	.word	0x20001509
 8005690:	20001510 	.word	0x20001510
 8005694:	2000150b 	.word	0x2000150b
 8005698:	20001512 	.word	0x20001512
 800569c:	2000151c 	.word	0x2000151c
 80056a0:	200014c0 	.word	0x200014c0
 80056a4:	2000150c 	.word	0x2000150c
 80056a8:	200014f4 	.word	0x200014f4
 80056ac:	200014bf 	.word	0x200014bf
 80056b0:	200014c3 	.word	0x200014c3
 80056b4:	2000150f 	.word	0x2000150f
 80056b8:	20001519 	.word	0x20001519
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80056bc:	4b85      	ldr	r3, [pc, #532]	@ (80058d4 <checkAktifCalisma+0x1554>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d011      	beq.n	80056e8 <checkAktifCalisma+0x1368>
 80056c4:	4b84      	ldr	r3, [pc, #528]	@ (80058d8 <checkAktifCalisma+0x1558>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d10d      	bne.n	80056e8 <checkAktifCalisma+0x1368>
 80056cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80056d0:	4882      	ldr	r0, [pc, #520]	@ (80058dc <checkAktifCalisma+0x155c>)
 80056d2:	f004 ffbb 	bl	800a64c <HAL_GPIO_ReadPin>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d105      	bne.n	80056e8 <checkAktifCalisma+0x1368>
					basinchatasi=0;
 80056dc:	4b7d      	ldr	r3, [pc, #500]	@ (80058d4 <checkAktifCalisma+0x1554>)
 80056de:	2200      	movs	r2, #0
 80056e0:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 80056e2:	2003      	movs	r0, #3
 80056e4:	f7fe fc42 	bl	8003f6c <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 80056e8:	4b7d      	ldr	r3, [pc, #500]	@ (80058e0 <checkAktifCalisma+0x1560>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d103      	bne.n	80056f8 <checkAktifCalisma+0x1378>
 80056f0:	4b7c      	ldr	r3, [pc, #496]	@ (80058e4 <checkAktifCalisma+0x1564>)
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d023      	beq.n	8005740 <checkAktifCalisma+0x13c0>
 80056f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056fc:	487a      	ldr	r0, [pc, #488]	@ (80058e8 <checkAktifCalisma+0x1568>)
 80056fe:	f004 ffa5 	bl	800a64c <HAL_GPIO_ReadPin>
 8005702:	4603      	mov	r3, r0
 8005704:	2b01      	cmp	r3, #1
 8005706:	d11b      	bne.n	8005740 <checkAktifCalisma+0x13c0>
 8005708:	4b78      	ldr	r3, [pc, #480]	@ (80058ec <checkAktifCalisma+0x156c>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d003      	beq.n	8005718 <checkAktifCalisma+0x1398>
 8005710:	4b76      	ldr	r3, [pc, #472]	@ (80058ec <checkAktifCalisma+0x156c>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b03      	cmp	r3, #3
 8005716:	d113      	bne.n	8005740 <checkAktifCalisma+0x13c0>
 8005718:	4b75      	ldr	r3, [pc, #468]	@ (80058f0 <checkAktifCalisma+0x1570>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	f083 0301 	eor.w	r3, r3, #1
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00c      	beq.n	8005740 <checkAktifCalisma+0x13c0>
					hataVar=1;
 8005726:	4b73      	ldr	r3, [pc, #460]	@ (80058f4 <checkAktifCalisma+0x1574>)
 8005728:	2201      	movs	r2, #1
 800572a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 800572c:	2004      	movs	r0, #4
 800572e:	f7fb fc1f 	bl	8000f70 <hataKoduLcdGoster>
					hata2EEPROM(4);
 8005732:	2004      	movs	r0, #4
 8005734:	f7fb fbc4 	bl	8000ec0 <hata2EEPROM>
					katkapisivicihatasi=1;
 8005738:	4b6d      	ldr	r3, [pc, #436]	@ (80058f0 <checkAktifCalisma+0x1570>)
 800573a:	2201      	movs	r2, #1
 800573c:	701a      	strb	r2, [r3, #0]
 800573e:	e01f      	b.n	8005780 <checkAktifCalisma+0x1400>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005740:	4b6b      	ldr	r3, [pc, #428]	@ (80058f0 <checkAktifCalisma+0x1570>)
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01b      	beq.n	8005780 <checkAktifCalisma+0x1400>
 8005748:	4b6b      	ldr	r3, [pc, #428]	@ (80058f8 <checkAktifCalisma+0x1578>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d017      	beq.n	8005780 <checkAktifCalisma+0x1400>
 8005750:	4b63      	ldr	r3, [pc, #396]	@ (80058e0 <checkAktifCalisma+0x1560>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	f083 0301 	eor.w	r3, r3, #1
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d010      	beq.n	8005780 <checkAktifCalisma+0x1400>
 800575e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005762:	4861      	ldr	r0, [pc, #388]	@ (80058e8 <checkAktifCalisma+0x1568>)
 8005764:	f004 ff72 	bl	800a64c <HAL_GPIO_ReadPin>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d108      	bne.n	8005780 <checkAktifCalisma+0x1400>

					katkapisivicihatasi=0;
 800576e:	4b60      	ldr	r3, [pc, #384]	@ (80058f0 <checkAktifCalisma+0x1570>)
 8005770:	2200      	movs	r2, #0
 8005772:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8005774:	4b5b      	ldr	r3, [pc, #364]	@ (80058e4 <checkAktifCalisma+0x1564>)
 8005776:	2200      	movs	r2, #0
 8005778:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 800577a:	2004      	movs	r0, #4
 800577c:	f7fe fbf6 	bl	8003f6c <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8005780:	4b57      	ldr	r3, [pc, #348]	@ (80058e0 <checkAktifCalisma+0x1560>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d103      	bne.n	8005790 <checkAktifCalisma+0x1410>
 8005788:	4b5c      	ldr	r3, [pc, #368]	@ (80058fc <checkAktifCalisma+0x157c>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d023      	beq.n	80057d8 <checkAktifCalisma+0x1458>
 8005790:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005794:	4854      	ldr	r0, [pc, #336]	@ (80058e8 <checkAktifCalisma+0x1568>)
 8005796:	f004 ff59 	bl	800a64c <HAL_GPIO_ReadPin>
 800579a:	4603      	mov	r3, r0
 800579c:	2b01      	cmp	r3, #1
 800579e:	d11b      	bne.n	80057d8 <checkAktifCalisma+0x1458>
 80057a0:	4b52      	ldr	r3, [pc, #328]	@ (80058ec <checkAktifCalisma+0x156c>)
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d003      	beq.n	80057b0 <checkAktifCalisma+0x1430>
 80057a8:	4b50      	ldr	r3, [pc, #320]	@ (80058ec <checkAktifCalisma+0x156c>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b03      	cmp	r3, #3
 80057ae:	d113      	bne.n	80057d8 <checkAktifCalisma+0x1458>
 80057b0:	4b53      	ldr	r3, [pc, #332]	@ (8005900 <checkAktifCalisma+0x1580>)
 80057b2:	781b      	ldrb	r3, [r3, #0]
 80057b4:	f083 0301 	eor.w	r3, r3, #1
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00c      	beq.n	80057d8 <checkAktifCalisma+0x1458>

					hataVar=1;
 80057be:	4b4d      	ldr	r3, [pc, #308]	@ (80058f4 <checkAktifCalisma+0x1574>)
 80057c0:	2201      	movs	r2, #1
 80057c2:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 80057c4:	2005      	movs	r0, #5
 80057c6:	f7fb fbd3 	bl	8000f70 <hataKoduLcdGoster>
					hata2EEPROM(5);
 80057ca:	2005      	movs	r0, #5
 80057cc:	f7fb fb78 	bl	8000ec0 <hata2EEPROM>
					tablakapisivicihatasi=1;
 80057d0:	4b4b      	ldr	r3, [pc, #300]	@ (8005900 <checkAktifCalisma+0x1580>)
 80057d2:	2201      	movs	r2, #1
 80057d4:	701a      	strb	r2, [r3, #0]
 80057d6:	e023      	b.n	8005820 <checkAktifCalisma+0x14a0>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80057d8:	4b49      	ldr	r3, [pc, #292]	@ (8005900 <checkAktifCalisma+0x1580>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d01f      	beq.n	8005820 <checkAktifCalisma+0x14a0>
 80057e0:	4b45      	ldr	r3, [pc, #276]	@ (80058f8 <checkAktifCalisma+0x1578>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d01b      	beq.n	8005820 <checkAktifCalisma+0x14a0>
 80057e8:	4b3d      	ldr	r3, [pc, #244]	@ (80058e0 <checkAktifCalisma+0x1560>)
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	f083 0301 	eor.w	r3, r3, #1
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d014      	beq.n	8005820 <checkAktifCalisma+0x14a0>
 80057f6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80057fa:	483b      	ldr	r0, [pc, #236]	@ (80058e8 <checkAktifCalisma+0x1568>)
 80057fc:	f004 ff26 	bl	800a64c <HAL_GPIO_ReadPin>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10c      	bne.n	8005820 <checkAktifCalisma+0x14a0>
 8005806:	4b3c      	ldr	r3, [pc, #240]	@ (80058f8 <checkAktifCalisma+0x1578>)
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d008      	beq.n	8005820 <checkAktifCalisma+0x14a0>
					tablakapisivicihatasi=0;
 800580e:	4b3c      	ldr	r3, [pc, #240]	@ (8005900 <checkAktifCalisma+0x1580>)
 8005810:	2200      	movs	r2, #0
 8005812:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8005814:	4b39      	ldr	r3, [pc, #228]	@ (80058fc <checkAktifCalisma+0x157c>)
 8005816:	2200      	movs	r2, #0
 8005818:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 800581a:	2005      	movs	r0, #5
 800581c:	f7fe fba6 	bl	8003f6c <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8005820:	4b38      	ldr	r3, [pc, #224]	@ (8005904 <checkAktifCalisma+0x1584>)
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d107      	bne.n	8005838 <checkAktifCalisma+0x14b8>
 8005828:	4b37      	ldr	r3, [pc, #220]	@ (8005908 <checkAktifCalisma+0x1588>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d103      	bne.n	8005838 <checkAktifCalisma+0x14b8>
 8005830:	4b36      	ldr	r3, [pc, #216]	@ (800590c <checkAktifCalisma+0x158c>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d01b      	beq.n	8005870 <checkAktifCalisma+0x14f0>
 8005838:	4b35      	ldr	r3, [pc, #212]	@ (8005910 <checkAktifCalisma+0x1590>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	f083 0301 	eor.w	r3, r3, #1
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d014      	beq.n	8005870 <checkAktifCalisma+0x14f0>
				    if(millis-timer4>=makineCalismaTmr) {
 8005846:	4b33      	ldr	r3, [pc, #204]	@ (8005914 <checkAktifCalisma+0x1594>)
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	4b33      	ldr	r3, [pc, #204]	@ (8005918 <checkAktifCalisma+0x1598>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	4a32      	ldr	r2, [pc, #200]	@ (800591c <checkAktifCalisma+0x159c>)
 8005852:	7812      	ldrb	r2, [r2, #0]
 8005854:	4293      	cmp	r3, r2
 8005856:	d30b      	bcc.n	8005870 <checkAktifCalisma+0x14f0>
					  	hataVar=1;
 8005858:	4b26      	ldr	r3, [pc, #152]	@ (80058f4 <checkAktifCalisma+0x1574>)
 800585a:	2201      	movs	r2, #1
 800585c:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 800585e:	2006      	movs	r0, #6
 8005860:	f7fb fb86 	bl	8000f70 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8005864:	2006      	movs	r0, #6
 8005866:	f7fb fb2b 	bl	8000ec0 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 800586a:	4b29      	ldr	r3, [pc, #164]	@ (8005910 <checkAktifCalisma+0x1590>)
 800586c:	2201      	movs	r2, #1
 800586e:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8005870:	4b27      	ldr	r3, [pc, #156]	@ (8005910 <checkAktifCalisma+0x1590>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d013      	beq.n	80058a0 <checkAktifCalisma+0x1520>
 8005878:	2108      	movs	r1, #8
 800587a:	481b      	ldr	r0, [pc, #108]	@ (80058e8 <checkAktifCalisma+0x1568>)
 800587c:	f004 fee6 	bl	800a64c <HAL_GPIO_ReadPin>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00c      	beq.n	80058a0 <checkAktifCalisma+0x1520>
 8005886:	4b16      	ldr	r3, [pc, #88]	@ (80058e0 <checkAktifCalisma+0x1560>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	f083 0301 	eor.w	r3, r3, #1
 800588e:	b2db      	uxtb	r3, r3
 8005890:	2b00      	cmp	r3, #0
 8005892:	d005      	beq.n	80058a0 <checkAktifCalisma+0x1520>
					maksimumcalismahatasi=0;
 8005894:	4b1e      	ldr	r3, [pc, #120]	@ (8005910 <checkAktifCalisma+0x1590>)
 8005896:	2200      	movs	r2, #0
 8005898:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 800589a:	2006      	movs	r0, #6
 800589c:	f7fe fb66 	bl	8003f6c <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80058a0:	4b1f      	ldr	r3, [pc, #124]	@ (8005920 <checkAktifCalisma+0x15a0>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10b      	bne.n	80058c0 <checkAktifCalisma+0x1540>
 80058a8:	4b17      	ldr	r3, [pc, #92]	@ (8005908 <checkAktifCalisma+0x1588>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d107      	bne.n	80058c0 <checkAktifCalisma+0x1540>
 80058b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005924 <checkAktifCalisma+0x15a4>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d103      	bne.n	80058c0 <checkAktifCalisma+0x1540>
 80058b8:	4b14      	ldr	r3, [pc, #80]	@ (800590c <checkAktifCalisma+0x158c>)
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d035      	beq.n	800592c <checkAktifCalisma+0x15ac>
					makineCalisiyor=0;
 80058c0:	4b19      	ldr	r3, [pc, #100]	@ (8005928 <checkAktifCalisma+0x15a8>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 80058c6:	4b07      	ldr	r3, [pc, #28]	@ (80058e4 <checkAktifCalisma+0x1564>)
 80058c8:	2201      	movs	r2, #1
 80058ca:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 80058cc:	4b0b      	ldr	r3, [pc, #44]	@ (80058fc <checkAktifCalisma+0x157c>)
 80058ce:	2201      	movs	r2, #1
 80058d0:	701a      	strb	r2, [r3, #0]
 80058d2:	e032      	b.n	800593a <checkAktifCalisma+0x15ba>
 80058d4:	20001519 	.word	0x20001519
 80058d8:	200014bf 	.word	0x200014bf
 80058dc:	40010c00 	.word	0x40010c00
 80058e0:	20001509 	.word	0x20001509
 80058e4:	2000151d 	.word	0x2000151d
 80058e8:	40010800 	.word	0x40010800
 80058ec:	200014c4 	.word	0x200014c4
 80058f0:	2000151a 	.word	0x2000151a
 80058f4:	20001510 	.word	0x20001510
 80058f8:	200014fd 	.word	0x200014fd
 80058fc:	2000151e 	.word	0x2000151e
 8005900:	2000151b 	.word	0x2000151b
 8005904:	2000150f 	.word	0x2000150f
 8005908:	200014f4 	.word	0x200014f4
 800590c:	200014f3 	.word	0x200014f3
 8005910:	2000150a 	.word	0x2000150a
 8005914:	20001494 	.word	0x20001494
 8005918:	200014a8 	.word	0x200014a8
 800591c:	200014d4 	.word	0x200014d4
 8005920:	200014f1 	.word	0x200014f1
 8005924:	200014f2 	.word	0x200014f2
 8005928:	20001511 	.word	0x20001511
				} else {
					makineCalisiyor=1;
 800592c:	4b3a      	ldr	r3, [pc, #232]	@ (8005a18 <checkAktifCalisma+0x1698>)
 800592e:	2201      	movs	r2, #1
 8005930:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8005932:	4b3a      	ldr	r3, [pc, #232]	@ (8005a1c <checkAktifCalisma+0x169c>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a3a      	ldr	r2, [pc, #232]	@ (8005a20 <checkAktifCalisma+0x16a0>)
 8005938:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 800593a:	4b3a      	ldr	r3, [pc, #232]	@ (8005a24 <checkAktifCalisma+0x16a4>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d02f      	beq.n	80059a2 <checkAktifCalisma+0x1622>
 8005942:	4b39      	ldr	r3, [pc, #228]	@ (8005a28 <checkAktifCalisma+0x16a8>)
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	f083 0301 	eor.w	r3, r3, #1
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d028      	beq.n	80059a2 <checkAktifCalisma+0x1622>
 8005950:	4b36      	ldr	r3, [pc, #216]	@ (8005a2c <checkAktifCalisma+0x16ac>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	f083 0301 	eor.w	r3, r3, #1
 8005958:	b2db      	uxtb	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d021      	beq.n	80059a2 <checkAktifCalisma+0x1622>
 800595e:	4b34      	ldr	r3, [pc, #208]	@ (8005a30 <checkAktifCalisma+0x16b0>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	f083 0301 	eor.w	r3, r3, #1
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01a      	beq.n	80059a2 <checkAktifCalisma+0x1622>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 800596c:	4b31      	ldr	r3, [pc, #196]	@ (8005a34 <checkAktifCalisma+0x16b4>)
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	f083 0301 	eor.w	r3, r3, #1
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d013      	beq.n	80059a2 <checkAktifCalisma+0x1622>
 800597a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a38 <checkAktifCalisma+0x16b8>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	f083 0301 	eor.w	r3, r3, #1
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d00c      	beq.n	80059a2 <checkAktifCalisma+0x1622>
 8005988:	4b2c      	ldr	r3, [pc, #176]	@ (8005a3c <checkAktifCalisma+0x16bc>)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	f083 0301 	eor.w	r3, r3, #1
 8005990:	b2db      	uxtb	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d005      	beq.n	80059a2 <checkAktifCalisma+0x1622>

					hataVar=0;
 8005996:	4b23      	ldr	r3, [pc, #140]	@ (8005a24 <checkAktifCalisma+0x16a4>)
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 800599c:	2007      	movs	r0, #7
 800599e:	f7fe fae5 	bl	8003f6c <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 80059a2:	4b20      	ldr	r3, [pc, #128]	@ (8005a24 <checkAktifCalisma+0x16a4>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d02a      	beq.n	8005a00 <checkAktifCalisma+0x1680>
 80059aa:	4b1f      	ldr	r3, [pc, #124]	@ (8005a28 <checkAktifCalisma+0x16a8>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	f083 0301 	eor.w	r3, r3, #1
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d023      	beq.n	8005a00 <checkAktifCalisma+0x1680>
 80059b8:	4b1c      	ldr	r3, [pc, #112]	@ (8005a2c <checkAktifCalisma+0x16ac>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01f      	beq.n	8005a00 <checkAktifCalisma+0x1680>
 80059c0:	4b1b      	ldr	r3, [pc, #108]	@ (8005a30 <checkAktifCalisma+0x16b0>)
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	f083 0301 	eor.w	r3, r3, #1
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d018      	beq.n	8005a00 <checkAktifCalisma+0x1680>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 80059ce:	4b19      	ldr	r3, [pc, #100]	@ (8005a34 <checkAktifCalisma+0x16b4>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	f083 0301 	eor.w	r3, r3, #1
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d011      	beq.n	8005a00 <checkAktifCalisma+0x1680>
 80059dc:	4b16      	ldr	r3, [pc, #88]	@ (8005a38 <checkAktifCalisma+0x16b8>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	f083 0301 	eor.w	r3, r3, #1
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <checkAktifCalisma+0x1680>
 80059ea:	4b14      	ldr	r3, [pc, #80]	@ (8005a3c <checkAktifCalisma+0x16bc>)
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	f083 0301 	eor.w	r3, r3, #1
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <checkAktifCalisma+0x1680>
				{
					EmnCerHataMakYukariCalis=1;
 80059f8:	4b11      	ldr	r3, [pc, #68]	@ (8005a40 <checkAktifCalisma+0x16c0>)
 80059fa:	2201      	movs	r2, #1
 80059fc:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 80059fe:	e009      	b.n	8005a14 <checkAktifCalisma+0x1694>
				else if(emniyetCercevesihatasi==0)
 8005a00:	4b0a      	ldr	r3, [pc, #40]	@ (8005a2c <checkAktifCalisma+0x16ac>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	f083 0301 	eor.w	r3, r3, #1
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <checkAktifCalisma+0x1694>
					EmnCerHataMakYukariCalis=0;
 8005a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a40 <checkAktifCalisma+0x16c0>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	701a      	strb	r2, [r3, #0]
}
 8005a14:	bf00      	nop
 8005a16:	bd80      	pop	{r7, pc}
 8005a18:	20001511 	.word	0x20001511
 8005a1c:	20001494 	.word	0x20001494
 8005a20:	200014a8 	.word	0x200014a8
 8005a24:	20001510 	.word	0x20001510
 8005a28:	2000150b 	.word	0x2000150b
 8005a2c:	2000150c 	.word	0x2000150c
 8005a30:	20001519 	.word	0x20001519
 8005a34:	2000151a 	.word	0x2000151a
 8005a38:	2000151b 	.word	0x2000151b
 8005a3c:	2000150a 	.word	0x2000150a
 8005a40:	2000151f 	.word	0x2000151f

08005a44 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8005a44:	b580      	push	{r7, lr}
 8005a46:	af00      	add	r7, sp, #0
			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8005a48:	4b8b      	ldr	r3, [pc, #556]	@ (8005c78 <checkDemoModCalisma+0x234>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	f040 81c4 	bne.w	8005dda <checkDemoModCalisma+0x396>
 8005a52:	4b8a      	ldr	r3, [pc, #552]	@ (8005c7c <checkDemoModCalisma+0x238>)
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f000 81bf 	beq.w	8005dda <checkDemoModCalisma+0x396>
 8005a5c:	4b88      	ldr	r3, [pc, #544]	@ (8005c80 <checkDemoModCalisma+0x23c>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f040 81ba 	bne.w	8005dda <checkDemoModCalisma+0x396>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005a66:	2102      	movs	r1, #2
 8005a68:	4886      	ldr	r0, [pc, #536]	@ (8005c84 <checkDemoModCalisma+0x240>)
 8005a6a:	f004 fdef 	bl	800a64c <HAL_GPIO_ReadPin>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d11d      	bne.n	8005ab0 <checkDemoModCalisma+0x6c>
						&& (demoAsagiCalis==0)
 8005a74:	4b84      	ldr	r3, [pc, #528]	@ (8005c88 <checkDemoModCalisma+0x244>)
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	f083 0301 	eor.w	r3, r3, #1
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d016      	beq.n	8005ab0 <checkDemoModCalisma+0x6c>
						&& (demoDevYukari==0)
 8005a82:	4b82      	ldr	r3, [pc, #520]	@ (8005c8c <checkDemoModCalisma+0x248>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	f083 0301 	eor.w	r3, r3, #1
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00f      	beq.n	8005ab0 <checkDemoModCalisma+0x6c>
						&& (demoDevAsagi==0)) {
 8005a90:	4b7f      	ldr	r3, [pc, #508]	@ (8005c90 <checkDemoModCalisma+0x24c>)
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	f083 0301 	eor.w	r3, r3, #1
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d008      	beq.n	8005ab0 <checkDemoModCalisma+0x6c>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	2104      	movs	r1, #4
 8005aa2:	487c      	ldr	r0, [pc, #496]	@ (8005c94 <checkDemoModCalisma+0x250>)
 8005aa4:	f004 fde9 	bl	800a67a <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8005aa8:	4b7b      	ldr	r3, [pc, #492]	@ (8005c98 <checkDemoModCalisma+0x254>)
 8005aaa:	2201      	movs	r2, #1
 8005aac:	701a      	strb	r2, [r3, #0]
 8005aae:	e00e      	b.n	8005ace <checkDemoModCalisma+0x8a>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005ab0:	2102      	movs	r1, #2
 8005ab2:	4874      	ldr	r0, [pc, #464]	@ (8005c84 <checkDemoModCalisma+0x240>)
 8005ab4:	f004 fdca 	bl	800a64c <HAL_GPIO_ReadPin>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d107      	bne.n	8005ace <checkDemoModCalisma+0x8a>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005abe:	2200      	movs	r2, #0
 8005ac0:	2104      	movs	r1, #4
 8005ac2:	4874      	ldr	r0, [pc, #464]	@ (8005c94 <checkDemoModCalisma+0x250>)
 8005ac4:	f004 fdd9 	bl	800a67a <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8005ac8:	4b73      	ldr	r3, [pc, #460]	@ (8005c98 <checkDemoModCalisma+0x254>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8005ace:	4b72      	ldr	r3, [pc, #456]	@ (8005c98 <checkDemoModCalisma+0x254>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d10b      	bne.n	8005aee <checkDemoModCalisma+0xaa>
 8005ad6:	4b6d      	ldr	r3, [pc, #436]	@ (8005c8c <checkDemoModCalisma+0x248>)
 8005ad8:	781b      	ldrb	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d107      	bne.n	8005aee <checkDemoModCalisma+0xaa>
 8005ade:	4b6c      	ldr	r3, [pc, #432]	@ (8005c90 <checkDemoModCalisma+0x24c>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d103      	bne.n	8005aee <checkDemoModCalisma+0xaa>
 8005ae6:	4b68      	ldr	r3, [pc, #416]	@ (8005c88 <checkDemoModCalisma+0x244>)
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00c      	beq.n	8005b08 <checkDemoModCalisma+0xc4>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005aee:	2201      	movs	r2, #1
 8005af0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005af4:	4867      	ldr	r0, [pc, #412]	@ (8005c94 <checkDemoModCalisma+0x250>)
 8005af6:	f004 fdc0 	bl	800a67a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005afa:	2201      	movs	r2, #1
 8005afc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b00:	4864      	ldr	r0, [pc, #400]	@ (8005c94 <checkDemoModCalisma+0x250>)
 8005b02:	f004 fdba 	bl	800a67a <HAL_GPIO_WritePin>
 8005b06:	e00b      	b.n	8005b20 <checkDemoModCalisma+0xdc>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b0e:	4861      	ldr	r0, [pc, #388]	@ (8005c94 <checkDemoModCalisma+0x250>)
 8005b10:	f004 fdb3 	bl	800a67a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005b14:	2200      	movs	r2, #0
 8005b16:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b1a:	485e      	ldr	r0, [pc, #376]	@ (8005c94 <checkDemoModCalisma+0x250>)
 8005b1c:	f004 fdad 	bl	800a67a <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b20:	2102      	movs	r1, #2
 8005b22:	4858      	ldr	r0, [pc, #352]	@ (8005c84 <checkDemoModCalisma+0x240>)
 8005b24:	f004 fd92 	bl	800a64c <HAL_GPIO_ReadPin>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d10d      	bne.n	8005b4a <checkDemoModCalisma+0x106>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005b2e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b32:	4854      	ldr	r0, [pc, #336]	@ (8005c84 <checkDemoModCalisma+0x240>)
 8005b34:	f004 fd8a 	bl	800a64c <HAL_GPIO_ReadPin>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d105      	bne.n	8005b4a <checkDemoModCalisma+0x106>
						&& (demoYukariCalis==0)
 8005b3e:	4b56      	ldr	r3, [pc, #344]	@ (8005c98 <checkDemoModCalisma+0x254>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	f083 0301 	eor.w	r3, r3, #1
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b4a:	2102      	movs	r1, #2
 8005b4c:	484d      	ldr	r0, [pc, #308]	@ (8005c84 <checkDemoModCalisma+0x240>)
 8005b4e:	f004 fd7d 	bl	800a64c <HAL_GPIO_ReadPin>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d125      	bne.n	8005ba4 <checkDemoModCalisma+0x160>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005b58:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b5c:	4849      	ldr	r0, [pc, #292]	@ (8005c84 <checkDemoModCalisma+0x240>)
 8005b5e:	f004 fd75 	bl	800a64c <HAL_GPIO_ReadPin>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d11d      	bne.n	8005ba4 <checkDemoModCalisma+0x160>
						&&(demoYukariCalis==0)
 8005b68:	4b4b      	ldr	r3, [pc, #300]	@ (8005c98 <checkDemoModCalisma+0x254>)
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	f083 0301 	eor.w	r3, r3, #1
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d016      	beq.n	8005ba4 <checkDemoModCalisma+0x160>
						&&(demoAsagiCalis==0)
 8005b76:	4b44      	ldr	r3, [pc, #272]	@ (8005c88 <checkDemoModCalisma+0x244>)
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	f083 0301 	eor.w	r3, r3, #1
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00f      	beq.n	8005ba4 <checkDemoModCalisma+0x160>
						&& (demoDevAsagi==0)) {
 8005b84:	4b42      	ldr	r3, [pc, #264]	@ (8005c90 <checkDemoModCalisma+0x24c>)
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	f083 0301 	eor.w	r3, r3, #1
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d008      	beq.n	8005ba4 <checkDemoModCalisma+0x160>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005b92:	2201      	movs	r2, #1
 8005b94:	2120      	movs	r1, #32
 8005b96:	483b      	ldr	r0, [pc, #236]	@ (8005c84 <checkDemoModCalisma+0x240>)
 8005b98:	f004 fd6f 	bl	800a67a <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8005b9c:	4b3b      	ldr	r3, [pc, #236]	@ (8005c8c <checkDemoModCalisma+0x248>)
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	701a      	strb	r2, [r3, #0]
 8005ba2:	e007      	b.n	8005bb4 <checkDemoModCalisma+0x170>
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	2120      	movs	r1, #32
 8005ba8:	4836      	ldr	r0, [pc, #216]	@ (8005c84 <checkDemoModCalisma+0x240>)
 8005baa:	f004 fd66 	bl	800a67a <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8005bae:	4b37      	ldr	r3, [pc, #220]	@ (8005c8c <checkDemoModCalisma+0x248>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005bb4:	2102      	movs	r1, #2
 8005bb6:	4833      	ldr	r0, [pc, #204]	@ (8005c84 <checkDemoModCalisma+0x240>)
 8005bb8:	f004 fd48 	bl	800a64c <HAL_GPIO_ReadPin>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d125      	bne.n	8005c0e <checkDemoModCalisma+0x1ca>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8005bc2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005bc6:	482f      	ldr	r0, [pc, #188]	@ (8005c84 <checkDemoModCalisma+0x240>)
 8005bc8:	f004 fd40 	bl	800a64c <HAL_GPIO_ReadPin>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d11d      	bne.n	8005c0e <checkDemoModCalisma+0x1ca>
						&&(demoYukariCalis==0)
 8005bd2:	4b31      	ldr	r3, [pc, #196]	@ (8005c98 <checkDemoModCalisma+0x254>)
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	f083 0301 	eor.w	r3, r3, #1
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d016      	beq.n	8005c0e <checkDemoModCalisma+0x1ca>
						&&(demoDevYukari==0)
 8005be0:	4b2a      	ldr	r3, [pc, #168]	@ (8005c8c <checkDemoModCalisma+0x248>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	f083 0301 	eor.w	r3, r3, #1
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00f      	beq.n	8005c0e <checkDemoModCalisma+0x1ca>
						&& (demoAsagiCalis==0)) {
 8005bee:	4b26      	ldr	r3, [pc, #152]	@ (8005c88 <checkDemoModCalisma+0x244>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	f083 0301 	eor.w	r3, r3, #1
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d008      	beq.n	8005c0e <checkDemoModCalisma+0x1ca>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	2110      	movs	r1, #16
 8005c00:	4820      	ldr	r0, [pc, #128]	@ (8005c84 <checkDemoModCalisma+0x240>)
 8005c02:	f004 fd3a 	bl	800a67a <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8005c06:	4b22      	ldr	r3, [pc, #136]	@ (8005c90 <checkDemoModCalisma+0x24c>)
 8005c08:	2201      	movs	r2, #1
 8005c0a:	701a      	strb	r2, [r3, #0]
 8005c0c:	e007      	b.n	8005c1e <checkDemoModCalisma+0x1da>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005c0e:	2200      	movs	r2, #0
 8005c10:	2110      	movs	r1, #16
 8005c12:	481c      	ldr	r0, [pc, #112]	@ (8005c84 <checkDemoModCalisma+0x240>)
 8005c14:	f004 fd31 	bl	800a67a <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8005c18:	4b1d      	ldr	r3, [pc, #116]	@ (8005c90 <checkDemoModCalisma+0x24c>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005c1e:	2104      	movs	r1, #4
 8005c20:	4818      	ldr	r0, [pc, #96]	@ (8005c84 <checkDemoModCalisma+0x240>)
 8005c22:	f004 fd13 	bl	800a64c <HAL_GPIO_ReadPin>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d139      	bne.n	8005ca0 <checkDemoModCalisma+0x25c>
						&& (demoYukariCalis==0)
 8005c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8005c98 <checkDemoModCalisma+0x254>)
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	f083 0301 	eor.w	r3, r3, #1
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d032      	beq.n	8005ca0 <checkDemoModCalisma+0x25c>
						&& (demoDevAsagi==0)
 8005c3a:	4b15      	ldr	r3, [pc, #84]	@ (8005c90 <checkDemoModCalisma+0x24c>)
 8005c3c:	781b      	ldrb	r3, [r3, #0]
 8005c3e:	f083 0301 	eor.w	r3, r3, #1
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d02b      	beq.n	8005ca0 <checkDemoModCalisma+0x25c>
						&& (demoDevYukari==0)) {
 8005c48:	4b10      	ldr	r3, [pc, #64]	@ (8005c8c <checkDemoModCalisma+0x248>)
 8005c4a:	781b      	ldrb	r3, [r3, #0]
 8005c4c:	f083 0301 	eor.w	r3, r3, #1
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d024      	beq.n	8005ca0 <checkDemoModCalisma+0x25c>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005c56:	2201      	movs	r2, #1
 8005c58:	2102      	movs	r1, #2
 8005c5a:	480e      	ldr	r0, [pc, #56]	@ (8005c94 <checkDemoModCalisma+0x250>)
 8005c5c:	f004 fd0d 	bl	800a67a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005c60:	2201      	movs	r2, #1
 8005c62:	2101      	movs	r1, #1
 8005c64:	480b      	ldr	r0, [pc, #44]	@ (8005c94 <checkDemoModCalisma+0x250>)
 8005c66:	f004 fd08 	bl	800a67a <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8005c6a:	4b07      	ldr	r3, [pc, #28]	@ (8005c88 <checkDemoModCalisma+0x244>)
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 8005c70:	4b0a      	ldr	r3, [pc, #40]	@ (8005c9c <checkDemoModCalisma+0x258>)
 8005c72:	2201      	movs	r2, #1
 8005c74:	701a      	strb	r2, [r3, #0]
 8005c76:	e027      	b.n	8005cc8 <checkDemoModCalisma+0x284>
 8005c78:	200014da 	.word	0x200014da
 8005c7c:	2000150d 	.word	0x2000150d
 8005c80:	200014d9 	.word	0x200014d9
 8005c84:	40011000 	.word	0x40011000
 8005c88:	20001514 	.word	0x20001514
 8005c8c:	20001515 	.word	0x20001515
 8005c90:	20001516 	.word	0x20001516
 8005c94:	40010c00 	.word	0x40010c00
 8005c98:	20001513 	.word	0x20001513
 8005c9c:	200014fa 	.word	0x200014fa
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8005ca0:	2104      	movs	r1, #4
 8005ca2:	486d      	ldr	r0, [pc, #436]	@ (8005e58 <checkDemoModCalisma+0x414>)
 8005ca4:	f004 fcd2 	bl	800a64c <HAL_GPIO_ReadPin>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d10c      	bne.n	8005cc8 <checkDemoModCalisma+0x284>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2102      	movs	r1, #2
 8005cb2:	486a      	ldr	r0, [pc, #424]	@ (8005e5c <checkDemoModCalisma+0x418>)
 8005cb4:	f004 fce1 	bl	800a67a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005cb8:	2200      	movs	r2, #0
 8005cba:	2101      	movs	r1, #1
 8005cbc:	4867      	ldr	r0, [pc, #412]	@ (8005e5c <checkDemoModCalisma+0x418>)
 8005cbe:	f004 fcdc 	bl	800a67a <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8005cc2:	4b67      	ldr	r3, [pc, #412]	@ (8005e60 <checkDemoModCalisma+0x41c>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8005cc8:	2104      	movs	r1, #4
 8005cca:	4863      	ldr	r0, [pc, #396]	@ (8005e58 <checkDemoModCalisma+0x414>)
 8005ccc:	f004 fcbe 	bl	800a64c <HAL_GPIO_ReadPin>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d10d      	bne.n	8005cf2 <checkDemoModCalisma+0x2ae>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	2180      	movs	r1, #128	@ 0x80
 8005cda:	4862      	ldr	r0, [pc, #392]	@ (8005e64 <checkDemoModCalisma+0x420>)
 8005cdc:	f004 fccd 	bl	800a67a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	2120      	movs	r1, #32
 8005ce4:	485f      	ldr	r0, [pc, #380]	@ (8005e64 <checkDemoModCalisma+0x420>)
 8005ce6:	f004 fcc8 	bl	800a67a <HAL_GPIO_WritePin>
					timer3 = millis;
 8005cea:	4b5f      	ldr	r3, [pc, #380]	@ (8005e68 <checkDemoModCalisma+0x424>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a5f      	ldr	r2, [pc, #380]	@ (8005e6c <checkDemoModCalisma+0x428>)
 8005cf0:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005cf2:	4b5d      	ldr	r3, [pc, #372]	@ (8005e68 <checkDemoModCalisma+0x424>)
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	4b5d      	ldr	r3, [pc, #372]	@ (8005e6c <checkDemoModCalisma+0x428>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	2b04      	cmp	r3, #4
 8005cfe:	d909      	bls.n	8005d14 <checkDemoModCalisma+0x2d0>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005d00:	2200      	movs	r2, #0
 8005d02:	2180      	movs	r1, #128	@ 0x80
 8005d04:	4857      	ldr	r0, [pc, #348]	@ (8005e64 <checkDemoModCalisma+0x420>)
 8005d06:	f004 fcb8 	bl	800a67a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	2120      	movs	r1, #32
 8005d0e:	4855      	ldr	r0, [pc, #340]	@ (8005e64 <checkDemoModCalisma+0x420>)
 8005d10:	f004 fcb3 	bl	800a67a <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005d14:	2102      	movs	r1, #2
 8005d16:	4850      	ldr	r0, [pc, #320]	@ (8005e58 <checkDemoModCalisma+0x414>)
 8005d18:	f004 fc98 	bl	800a64c <HAL_GPIO_ReadPin>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d108      	bne.n	8005d34 <checkDemoModCalisma+0x2f0>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005d22:	2201      	movs	r2, #1
 8005d24:	2140      	movs	r1, #64	@ 0x40
 8005d26:	484f      	ldr	r0, [pc, #316]	@ (8005e64 <checkDemoModCalisma+0x420>)
 8005d28:	f004 fca7 	bl	800a67a <HAL_GPIO_WritePin>
					timer3 = millis;
 8005d2c:	4b4e      	ldr	r3, [pc, #312]	@ (8005e68 <checkDemoModCalisma+0x424>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a4e      	ldr	r2, [pc, #312]	@ (8005e6c <checkDemoModCalisma+0x428>)
 8005d32:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005d34:	4b4c      	ldr	r3, [pc, #304]	@ (8005e68 <checkDemoModCalisma+0x424>)
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	4b4c      	ldr	r3, [pc, #304]	@ (8005e6c <checkDemoModCalisma+0x428>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b04      	cmp	r3, #4
 8005d40:	d904      	bls.n	8005d4c <checkDemoModCalisma+0x308>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005d42:	2200      	movs	r2, #0
 8005d44:	2140      	movs	r1, #64	@ 0x40
 8005d46:	4847      	ldr	r0, [pc, #284]	@ (8005e64 <checkDemoModCalisma+0x420>)
 8005d48:	f004 fc97 	bl	800a67a <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8005d4c:	4b48      	ldr	r3, [pc, #288]	@ (8005e70 <checkDemoModCalisma+0x42c>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d024      	beq.n	8005d9e <checkDemoModCalisma+0x35a>
 8005d54:	4b47      	ldr	r3, [pc, #284]	@ (8005e74 <checkDemoModCalisma+0x430>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d020      	beq.n	8005d9e <checkDemoModCalisma+0x35a>

					calismaSayisiDemo++;
 8005d5c:	4b46      	ldr	r3, [pc, #280]	@ (8005e78 <checkDemoModCalisma+0x434>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	3301      	adds	r3, #1
 8005d62:	b2da      	uxtb	r2, r3
 8005d64:	4b44      	ldr	r3, [pc, #272]	@ (8005e78 <checkDemoModCalisma+0x434>)
 8005d66:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8005d68:	4b44      	ldr	r3, [pc, #272]	@ (8005e7c <checkDemoModCalisma+0x438>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	2bff      	cmp	r3, #255	@ 0xff
 8005d6e:	d108      	bne.n	8005d82 <checkDemoModCalisma+0x33e>
							calismaSayisi = 0;
 8005d70:	4b42      	ldr	r3, [pc, #264]	@ (8005e7c <checkDemoModCalisma+0x438>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	701a      	strb	r2, [r3, #0]
							calismaCount++;
 8005d76:	4b42      	ldr	r3, [pc, #264]	@ (8005e80 <checkDemoModCalisma+0x43c>)
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	4b40      	ldr	r3, [pc, #256]	@ (8005e80 <checkDemoModCalisma+0x43c>)
 8005d80:	701a      	strb	r2, [r3, #0]
				}
					eepromData[28] = calismaSayisiDemo;
 8005d82:	4b3d      	ldr	r3, [pc, #244]	@ (8005e78 <checkDemoModCalisma+0x434>)
 8005d84:	781a      	ldrb	r2, [r3, #0]
 8005d86:	4b3f      	ldr	r3, [pc, #252]	@ (8005e84 <checkDemoModCalisma+0x440>)
 8005d88:	771a      	strb	r2, [r3, #28]
					eepromData[30] = calismaCountDemo;
 8005d8a:	4b3f      	ldr	r3, [pc, #252]	@ (8005e88 <checkDemoModCalisma+0x444>)
 8005d8c:	781a      	ldrb	r2, [r3, #0]
 8005d8e:	4b3d      	ldr	r3, [pc, #244]	@ (8005e84 <checkDemoModCalisma+0x440>)
 8005d90:	779a      	strb	r2, [r3, #30]

					hafizaYaz=1;
 8005d92:	4b3e      	ldr	r3, [pc, #248]	@ (8005e8c <checkDemoModCalisma+0x448>)
 8005d94:	2201      	movs	r2, #1
 8005d96:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 8005d98:	4b36      	ldr	r3, [pc, #216]	@ (8005e74 <checkDemoModCalisma+0x430>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8005d9e:	4b3c      	ldr	r3, [pc, #240]	@ (8005e90 <checkDemoModCalisma+0x44c>)
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d156      	bne.n	8005e54 <checkDemoModCalisma+0x410>
					lcd_print(2,1,"Cycle     ");
 8005da6:	4a3b      	ldr	r2, [pc, #236]	@ (8005e94 <checkDemoModCalisma+0x450>)
 8005da8:	2101      	movs	r1, #1
 8005daa:	2002      	movs	r0, #2
 8005dac:	f003 f90a 	bl	8008fc4 <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8005db0:	4a39      	ldr	r2, [pc, #228]	@ (8005e98 <checkDemoModCalisma+0x454>)
 8005db2:	2101      	movs	r1, #1
 8005db4:	2001      	movs	r0, #1
 8005db6:	f003 f905 	bl	8008fc4 <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 8005dba:	4b2f      	ldr	r3, [pc, #188]	@ (8005e78 <checkDemoModCalisma+0x434>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	220a      	movs	r2, #10
 8005dc0:	4936      	ldr	r1, [pc, #216]	@ (8005e9c <checkDemoModCalisma+0x458>)
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f007 fdb4 	bl	800d930 <itoa>
					lcd_print(2,11,snum);
 8005dc8:	4a34      	ldr	r2, [pc, #208]	@ (8005e9c <checkDemoModCalisma+0x458>)
 8005dca:	210b      	movs	r1, #11
 8005dcc:	2002      	movs	r0, #2
 8005dce:	f003 f8f9 	bl	8008fc4 <lcd_print>
					mesajYazildi=1;
 8005dd2:	4b33      	ldr	r3, [pc, #204]	@ (8005ea0 <checkDemoModCalisma+0x45c>)
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8005dd8:	e03c      	b.n	8005e54 <checkDemoModCalisma+0x410>
				}
			} else if(demoMode==1 || menuGiris==1) {
 8005dda:	4b32      	ldr	r3, [pc, #200]	@ (8005ea4 <checkDemoModCalisma+0x460>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d003      	beq.n	8005dea <checkDemoModCalisma+0x3a6>
 8005de2:	4b2b      	ldr	r3, [pc, #172]	@ (8005e90 <checkDemoModCalisma+0x44c>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d134      	bne.n	8005e54 <checkDemoModCalisma+0x410>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005dea:	2200      	movs	r2, #0
 8005dec:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005df0:	481a      	ldr	r0, [pc, #104]	@ (8005e5c <checkDemoModCalisma+0x418>)
 8005df2:	f004 fc42 	bl	800a67a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005df6:	2200      	movs	r2, #0
 8005df8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005dfc:	4817      	ldr	r0, [pc, #92]	@ (8005e5c <checkDemoModCalisma+0x418>)
 8005dfe:	f004 fc3c 	bl	800a67a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005e02:	2200      	movs	r2, #0
 8005e04:	2104      	movs	r1, #4
 8005e06:	4815      	ldr	r0, [pc, #84]	@ (8005e5c <checkDemoModCalisma+0x418>)
 8005e08:	f004 fc37 	bl	800a67a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	2102      	movs	r1, #2
 8005e10:	4812      	ldr	r0, [pc, #72]	@ (8005e5c <checkDemoModCalisma+0x418>)
 8005e12:	f004 fc32 	bl	800a67a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005e16:	2200      	movs	r2, #0
 8005e18:	2101      	movs	r1, #1
 8005e1a:	4810      	ldr	r0, [pc, #64]	@ (8005e5c <checkDemoModCalisma+0x418>)
 8005e1c:	f004 fc2d 	bl	800a67a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005e20:	2200      	movs	r2, #0
 8005e22:	2120      	movs	r1, #32
 8005e24:	480c      	ldr	r0, [pc, #48]	@ (8005e58 <checkDemoModCalisma+0x414>)
 8005e26:	f004 fc28 	bl	800a67a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2110      	movs	r1, #16
 8005e2e:	480a      	ldr	r0, [pc, #40]	@ (8005e58 <checkDemoModCalisma+0x414>)
 8005e30:	f004 fc23 	bl	800a67a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005e34:	2200      	movs	r2, #0
 8005e36:	2180      	movs	r1, #128	@ 0x80
 8005e38:	480a      	ldr	r0, [pc, #40]	@ (8005e64 <checkDemoModCalisma+0x420>)
 8005e3a:	f004 fc1e 	bl	800a67a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005e3e:	2200      	movs	r2, #0
 8005e40:	2140      	movs	r1, #64	@ 0x40
 8005e42:	4808      	ldr	r0, [pc, #32]	@ (8005e64 <checkDemoModCalisma+0x420>)
 8005e44:	f004 fc19 	bl	800a67a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005e48:	2200      	movs	r2, #0
 8005e4a:	2120      	movs	r1, #32
 8005e4c:	4805      	ldr	r0, [pc, #20]	@ (8005e64 <checkDemoModCalisma+0x420>)
 8005e4e:	f004 fc14 	bl	800a67a <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8005e52:	e7ff      	b.n	8005e54 <checkDemoModCalisma+0x410>
 8005e54:	bf00      	nop
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	40011000 	.word	0x40011000
 8005e5c:	40010c00 	.word	0x40010c00
 8005e60:	20001514 	.word	0x20001514
 8005e64:	40010800 	.word	0x40010800
 8005e68:	20001494 	.word	0x20001494
 8005e6c:	200014a4 	.word	0x200014a4
 8005e70:	20001513 	.word	0x20001513
 8005e74:	200014fa 	.word	0x200014fa
 8005e78:	200014b5 	.word	0x200014b5
 8005e7c:	200014b4 	.word	0x200014b4
 8005e80:	200014b6 	.word	0x200014b6
 8005e84:	20000fec 	.word	0x20000fec
 8005e88:	200014b7 	.word	0x200014b7
 8005e8c:	200014e8 	.word	0x200014e8
 8005e90:	200014d9 	.word	0x200014d9
 8005e94:	0800f094 	.word	0x0800f094
 8005e98:	0800f0a0 	.word	0x0800f0a0
 8005e9c:	2000105c 	.word	0x2000105c
 8005ea0:	200014f0 	.word	0x200014f0
 8005ea4:	200014da 	.word	0x200014da

08005ea8 <mainLoop>:

void mainLoop() {
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	af00      	add	r7, sp, #0
	while(1) {
		checkLCDBacklight();
 8005eac:	f7fe f8b6 	bl	800401c <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	488b      	ldr	r0, [pc, #556]	@ (80060e0 <mainLoop+0x238>)
 8005eb4:	f004 fbca 	bl	800a64c <HAL_GPIO_ReadPin>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d136      	bne.n	8005f2c <mainLoop+0x84>
 8005ebe:	2108      	movs	r1, #8
 8005ec0:	4888      	ldr	r0, [pc, #544]	@ (80060e4 <mainLoop+0x23c>)
 8005ec2:	f004 fbc3 	bl	800a64c <HAL_GPIO_ReadPin>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d12f      	bne.n	8005f2c <mainLoop+0x84>
 8005ecc:	2102      	movs	r1, #2
 8005ece:	4884      	ldr	r0, [pc, #528]	@ (80060e0 <mainLoop+0x238>)
 8005ed0:	f004 fbbc 	bl	800a64c <HAL_GPIO_ReadPin>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d128      	bne.n	8005f2c <mainLoop+0x84>
 8005eda:	2104      	movs	r1, #4
 8005edc:	4880      	ldr	r0, [pc, #512]	@ (80060e0 <mainLoop+0x238>)
 8005ede:	f004 fbb5 	bl	800a64c <HAL_GPIO_ReadPin>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d121      	bne.n	8005f2c <mainLoop+0x84>
 8005ee8:	2108      	movs	r1, #8
 8005eea:	487d      	ldr	r0, [pc, #500]	@ (80060e0 <mainLoop+0x238>)
 8005eec:	f004 fbae 	bl	800a64c <HAL_GPIO_ReadPin>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d11a      	bne.n	8005f2c <mainLoop+0x84>
 8005ef6:	2180      	movs	r1, #128	@ 0x80
 8005ef8:	487a      	ldr	r0, [pc, #488]	@ (80060e4 <mainLoop+0x23c>)
 8005efa:	f004 fba7 	bl	800a64c <HAL_GPIO_ReadPin>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d113      	bne.n	8005f2c <mainLoop+0x84>
 8005f04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005f08:	4876      	ldr	r0, [pc, #472]	@ (80060e4 <mainLoop+0x23c>)
 8005f0a:	f004 fb9f 	bl	800a64c <HAL_GPIO_ReadPin>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d10b      	bne.n	8005f2c <mainLoop+0x84>
 8005f14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005f18:	4872      	ldr	r0, [pc, #456]	@ (80060e4 <mainLoop+0x23c>)
 8005f1a:	f004 fb97 	bl	800a64c <HAL_GPIO_ReadPin>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d103      	bne.n	8005f2c <mainLoop+0x84>
			butonKontrol=0;
 8005f24:	4b70      	ldr	r3, [pc, #448]	@ (80060e8 <mainLoop+0x240>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	701a      	strb	r2, [r3, #0]
 8005f2a:	e003      	b.n	8005f34 <mainLoop+0x8c>
		} else {
			backLightTimer = millis;
 8005f2c:	4b6f      	ldr	r3, [pc, #444]	@ (80060ec <mainLoop+0x244>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a6f      	ldr	r2, [pc, #444]	@ (80060f0 <mainLoop+0x248>)
 8005f32:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8005f34:	f7fe f924 	bl	8004180 <buttonCheck>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d103      	bne.n	8005f46 <mainLoop+0x9e>
			backLightTimer = millis;
 8005f3e:	4b6b      	ldr	r3, [pc, #428]	@ (80060ec <mainLoop+0x244>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a6b      	ldr	r2, [pc, #428]	@ (80060f0 <mainLoop+0x248>)
 8005f44:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz == 1) {
 8005f46:	4b6b      	ldr	r3, [pc, #428]	@ (80060f4 <mainLoop+0x24c>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d005      	beq.n	8005f5a <mainLoop+0xb2>
			hafizaYaz = 0;
 8005f4e:	4b69      	ldr	r3, [pc, #420]	@ (80060f4 <mainLoop+0x24c>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	701a      	strb	r2, [r3, #0]
			saveEEPROM(1);
 8005f54:	2001      	movs	r0, #1
 8005f56:	f7fa fba5 	bl	80006a4 <saveEEPROM>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8005f5a:	4b67      	ldr	r3, [pc, #412]	@ (80060f8 <mainLoop+0x250>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	f083 0301 	eor.w	r3, r3, #1
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d043      	beq.n	8005ff0 <mainLoop+0x148>
 8005f68:	4864      	ldr	r0, [pc, #400]	@ (80060fc <mainLoop+0x254>)
 8005f6a:	f005 f98b 	bl	800b284 <HAL_I2C_GetState>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	2b20      	cmp	r3, #32
 8005f72:	d13d      	bne.n	8005ff0 <mainLoop+0x148>
		  if(ilkOkuma==0) {
 8005f74:	4b62      	ldr	r3, [pc, #392]	@ (8006100 <mainLoop+0x258>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	f083 0301 	eor.w	r3, r3, #1
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d028      	beq.n	8005fd4 <mainLoop+0x12c>
			  lcd_print(1, 1, eepromTextGN);
 8005f82:	4a60      	ldr	r2, [pc, #384]	@ (8006104 <mainLoop+0x25c>)
 8005f84:	2101      	movs	r1, #1
 8005f86:	2001      	movs	r0, #1
 8005f88:	f003 f81c 	bl	8008fc4 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8005f8c:	4a5e      	ldr	r2, [pc, #376]	@ (8006108 <mainLoop+0x260>)
 8005f8e:	2101      	movs	r1, #1
 8005f90:	2002      	movs	r0, #2
 8005f92:	f003 f817 	bl	8008fc4 <lcd_print>
			  HAL_Delay(1000);
 8005f96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005f9a:	f003 fd87 	bl	8009aac <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005f9e:	bf00      	nop
 8005fa0:	4856      	ldr	r0, [pc, #344]	@ (80060fc <mainLoop+0x254>)
 8005fa2:	f005 f97c 	bl	800b29e <HAL_I2C_GetError>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b04      	cmp	r3, #4
 8005faa:	d0f9      	beq.n	8005fa0 <mainLoop+0xf8>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005fac:	e003      	b.n	8005fb6 <mainLoop+0x10e>
				  HAL_Delay(1000);
 8005fae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005fb2:	f003 fd7b 	bl	8009aac <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005fb6:	4851      	ldr	r0, [pc, #324]	@ (80060fc <mainLoop+0x254>)
 8005fb8:	f005 f964 	bl	800b284 <HAL_I2C_GetState>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	d1f5      	bne.n	8005fae <mainLoop+0x106>
			  }

			  lcd_print(2, 1, dataOkunduText);
 8005fc2:	4a52      	ldr	r2, [pc, #328]	@ (800610c <mainLoop+0x264>)
 8005fc4:	2101      	movs	r1, #1
 8005fc6:	2002      	movs	r0, #2
 8005fc8:	f002 fffc 	bl	8008fc4 <lcd_print>

			  ilkOkuma=1;
 8005fcc:	4b4c      	ldr	r3, [pc, #304]	@ (8006100 <mainLoop+0x258>)
 8005fce:	2201      	movs	r2, #1
 8005fd0:	701a      	strb	r2, [r3, #0]
 8005fd2:	e006      	b.n	8005fe2 <mainLoop+0x13a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8005fd4:	4a4e      	ldr	r2, [pc, #312]	@ (8006110 <mainLoop+0x268>)
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	2002      	movs	r0, #2
 8005fda:	f002 fff3 	bl	8008fc4 <lcd_print>
			  lcd_clear();
 8005fde:	f003 f81d 	bl	800901c <lcd_clear>
		  }

		  lcd_clear();
 8005fe2:	f003 f81b 	bl	800901c <lcd_clear>

		  eepromKontrol();
 8005fe6:	f7fa f925 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8005fea:	4b43      	ldr	r3, [pc, #268]	@ (80060f8 <mainLoop+0x250>)
 8005fec:	2201      	movs	r2, #1
 8005fee:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8005ff0:	4b48      	ldr	r3, [pc, #288]	@ (8006114 <mainLoop+0x26c>)
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d11c      	bne.n	8006032 <mainLoop+0x18a>
 8005ff8:	4b47      	ldr	r3, [pc, #284]	@ (8006118 <mainLoop+0x270>)
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	f083 0301 	eor.w	r3, r3, #1
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d015      	beq.n	8006032 <mainLoop+0x18a>
 8006006:	4b45      	ldr	r3, [pc, #276]	@ (800611c <mainLoop+0x274>)
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d111      	bne.n	8006032 <mainLoop+0x18a>
			lcd_clear();
 800600e:	f003 f805 	bl	800901c <lcd_clear>
			HAL_Delay(10);
 8006012:	200a      	movs	r0, #10
 8006014:	f003 fd4a 	bl	8009aac <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8006018:	4a41      	ldr	r2, [pc, #260]	@ (8006120 <mainLoop+0x278>)
 800601a:	2101      	movs	r1, #1
 800601c:	2001      	movs	r0, #1
 800601e:	f002 ffd1 	bl	8008fc4 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8006022:	4a40      	ldr	r2, [pc, #256]	@ (8006124 <mainLoop+0x27c>)
 8006024:	2101      	movs	r1, #1
 8006026:	2002      	movs	r0, #2
 8006028:	f002 ffcc 	bl	8008fc4 <lcd_print>
			mesajYazildi=1;
 800602c:	4b3a      	ldr	r3, [pc, #232]	@ (8006118 <mainLoop+0x270>)
 800602e:	2201      	movs	r2, #1
 8006030:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006032:	4b38      	ldr	r3, [pc, #224]	@ (8006114 <mainLoop+0x26c>)
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d112      	bne.n	8006060 <mainLoop+0x1b8>
 800603a:	2102      	movs	r1, #2
 800603c:	4828      	ldr	r0, [pc, #160]	@ (80060e0 <mainLoop+0x238>)
 800603e:	f004 fb05 	bl	800a64c <HAL_GPIO_ReadPin>
 8006042:	4603      	mov	r3, r0
 8006044:	2b01      	cmp	r3, #1
 8006046:	d10b      	bne.n	8006060 <mainLoop+0x1b8>
 8006048:	2104      	movs	r1, #4
 800604a:	4825      	ldr	r0, [pc, #148]	@ (80060e0 <mainLoop+0x238>)
 800604c:	f004 fafe 	bl	800a64c <HAL_GPIO_ReadPin>
 8006050:	4603      	mov	r3, r0
 8006052:	2b01      	cmp	r3, #1
 8006054:	d104      	bne.n	8006060 <mainLoop+0x1b8>
			menuGiris=1;
 8006056:	4b2f      	ldr	r3, [pc, #188]	@ (8006114 <mainLoop+0x26c>)
 8006058:	2201      	movs	r2, #1
 800605a:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800605c:	f002 ffde 	bl	800901c <lcd_clear>
		}

		if(menuGiris==1) {
 8006060:	4b2c      	ldr	r3, [pc, #176]	@ (8006114 <mainLoop+0x26c>)
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d101      	bne.n	800606c <mainLoop+0x1c4>
			menu();
 8006068:	f7fb faa8 	bl	80015bc <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 800606c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006070:	481c      	ldr	r0, [pc, #112]	@ (80060e4 <mainLoop+0x23c>)
 8006072:	f004 fb1a 	bl	800a6aa <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006076:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800607a:	482b      	ldr	r0, [pc, #172]	@ (8006128 <mainLoop+0x280>)
 800607c:	f004 fae6 	bl	800a64c <HAL_GPIO_ReadPin>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10a      	bne.n	800609c <mainLoop+0x1f4>
 8006086:	4b29      	ldr	r3, [pc, #164]	@ (800612c <mainLoop+0x284>)
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	f083 0301 	eor.w	r3, r3, #1
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	d003      	beq.n	800609c <mainLoop+0x1f4>
			stopVar=1;
 8006094:	4b26      	ldr	r3, [pc, #152]	@ (8006130 <mainLoop+0x288>)
 8006096:	2201      	movs	r2, #1
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	e002      	b.n	80060a2 <mainLoop+0x1fa>
		} else {
			stopVar=0;
 800609c:	4b24      	ldr	r3, [pc, #144]	@ (8006130 <mainLoop+0x288>)
 800609e:	2200      	movs	r2, #0
 80060a0:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 80060a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80060a6:	4820      	ldr	r0, [pc, #128]	@ (8006128 <mainLoop+0x280>)
 80060a8:	f004 fad0 	bl	800a64c <HAL_GPIO_ReadPin>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d107      	bne.n	80060c2 <mainLoop+0x21a>
 80060b2:	4b20      	ldr	r3, [pc, #128]	@ (8006134 <mainLoop+0x28c>)
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <mainLoop+0x21a>
			EmnStopVar=1;
 80060ba:	4b1f      	ldr	r3, [pc, #124]	@ (8006138 <mainLoop+0x290>)
 80060bc:	2201      	movs	r2, #1
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	e002      	b.n	80060c8 <mainLoop+0x220>
		} else {
			EmnStopVar=0;
 80060c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006138 <mainLoop+0x290>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80060c8:	f7fe f88e 	bl	80041e8 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80060cc:	f7fe f8c0 	bl	8004250 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80060d0:	f7fe f904 	bl	80042dc <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80060d4:	f7fe f954 	bl	8004380 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80060d8:	f7ff fcb4 	bl	8005a44 <checkDemoModCalisma>
		checkLCDBacklight();
 80060dc:	e6e6      	b.n	8005eac <mainLoop+0x4>
 80060de:	bf00      	nop
 80060e0:	40010800 	.word	0x40010800
 80060e4:	40011000 	.word	0x40011000
 80060e8:	200014eb 	.word	0x200014eb
 80060ec:	20001494 	.word	0x20001494
 80060f0:	200014b0 	.word	0x200014b0
 80060f4:	200014e8 	.word	0x200014e8
 80060f8:	200014e9 	.word	0x200014e9
 80060fc:	20001d3c 	.word	0x20001d3c
 8006100:	200014ea 	.word	0x200014ea
 8006104:	20000178 	.word	0x20000178
 8006108:	20001c74 	.word	0x20001c74
 800610c:	20001c88 	.word	0x20001c88
 8006110:	20001c9c 	.word	0x20001c9c
 8006114:	200014d9 	.word	0x200014d9
 8006118:	200014f0 	.word	0x200014f0
 800611c:	200014da 	.word	0x200014da
 8006120:	200000c4 	.word	0x200000c4
 8006124:	200000d8 	.word	0x200000d8
 8006128:	40010c00 	.word	0x40010c00
 800612c:	20001510 	.word	0x20001510
 8006130:	2000150d 	.word	0x2000150d
 8006134:	2000151f 	.word	0x2000151f
 8006138:	20001520 	.word	0x20001520

0800613c <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 800613c:	b5b0      	push	{r4, r5, r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	4603      	mov	r3, r0
 8006144:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8006146:	79fb      	ldrb	r3, [r7, #7]
 8006148:	2b00      	cmp	r3, #0
 800614a:	f040 853d 	bne.w	8006bc8 <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 800614e:	4ac7      	ldr	r2, [pc, #796]	@ (800646c <loadMenuTexts+0x330>)
 8006150:	4bc7      	ldr	r3, [pc, #796]	@ (8006470 <loadMenuTexts+0x334>)
 8006152:	4614      	mov	r4, r2
 8006154:	461d      	mov	r5, r3
 8006156:	6828      	ldr	r0, [r5, #0]
 8006158:	6869      	ldr	r1, [r5, #4]
 800615a:	68aa      	ldr	r2, [r5, #8]
 800615c:	68eb      	ldr	r3, [r5, #12]
 800615e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006160:	7c2b      	ldrb	r3, [r5, #16]
 8006162:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8006164:	4ac3      	ldr	r2, [pc, #780]	@ (8006474 <loadMenuTexts+0x338>)
 8006166:	4bc4      	ldr	r3, [pc, #784]	@ (8006478 <loadMenuTexts+0x33c>)
 8006168:	4614      	mov	r4, r2
 800616a:	461d      	mov	r5, r3
 800616c:	6828      	ldr	r0, [r5, #0]
 800616e:	6869      	ldr	r1, [r5, #4]
 8006170:	68aa      	ldr	r2, [r5, #8]
 8006172:	68eb      	ldr	r3, [r5, #12]
 8006174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006176:	7c2b      	ldrb	r3, [r5, #16]
 8006178:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 800617a:	4ac0      	ldr	r2, [pc, #768]	@ (800647c <loadMenuTexts+0x340>)
 800617c:	4bc0      	ldr	r3, [pc, #768]	@ (8006480 <loadMenuTexts+0x344>)
 800617e:	4614      	mov	r4, r2
 8006180:	461d      	mov	r5, r3
 8006182:	6828      	ldr	r0, [r5, #0]
 8006184:	6869      	ldr	r1, [r5, #4]
 8006186:	68aa      	ldr	r2, [r5, #8]
 8006188:	68eb      	ldr	r3, [r5, #12]
 800618a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800618c:	7c2b      	ldrb	r3, [r5, #16]
 800618e:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8006190:	4abc      	ldr	r2, [pc, #752]	@ (8006484 <loadMenuTexts+0x348>)
 8006192:	4bbd      	ldr	r3, [pc, #756]	@ (8006488 <loadMenuTexts+0x34c>)
 8006194:	4614      	mov	r4, r2
 8006196:	461d      	mov	r5, r3
 8006198:	6828      	ldr	r0, [r5, #0]
 800619a:	6869      	ldr	r1, [r5, #4]
 800619c:	68aa      	ldr	r2, [r5, #8]
 800619e:	68eb      	ldr	r3, [r5, #12]
 80061a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061a2:	7c2b      	ldrb	r3, [r5, #16]
 80061a4:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 80061a6:	4ab9      	ldr	r2, [pc, #740]	@ (800648c <loadMenuTexts+0x350>)
 80061a8:	4bb9      	ldr	r3, [pc, #740]	@ (8006490 <loadMenuTexts+0x354>)
 80061aa:	4614      	mov	r4, r2
 80061ac:	461d      	mov	r5, r3
 80061ae:	6828      	ldr	r0, [r5, #0]
 80061b0:	6869      	ldr	r1, [r5, #4]
 80061b2:	68aa      	ldr	r2, [r5, #8]
 80061b4:	68eb      	ldr	r3, [r5, #12]
 80061b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061b8:	7c2b      	ldrb	r3, [r5, #16]
 80061ba:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 80061bc:	4ab5      	ldr	r2, [pc, #724]	@ (8006494 <loadMenuTexts+0x358>)
 80061be:	4bb6      	ldr	r3, [pc, #728]	@ (8006498 <loadMenuTexts+0x35c>)
 80061c0:	4614      	mov	r4, r2
 80061c2:	461d      	mov	r5, r3
 80061c4:	6828      	ldr	r0, [r5, #0]
 80061c6:	6869      	ldr	r1, [r5, #4]
 80061c8:	68aa      	ldr	r2, [r5, #8]
 80061ca:	68eb      	ldr	r3, [r5, #12]
 80061cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ce:	7c2b      	ldrb	r3, [r5, #16]
 80061d0:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 80061d2:	4ab2      	ldr	r2, [pc, #712]	@ (800649c <loadMenuTexts+0x360>)
 80061d4:	4bb2      	ldr	r3, [pc, #712]	@ (80064a0 <loadMenuTexts+0x364>)
 80061d6:	4614      	mov	r4, r2
 80061d8:	461d      	mov	r5, r3
 80061da:	6828      	ldr	r0, [r5, #0]
 80061dc:	6869      	ldr	r1, [r5, #4]
 80061de:	68aa      	ldr	r2, [r5, #8]
 80061e0:	68eb      	ldr	r3, [r5, #12]
 80061e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061e4:	7c2b      	ldrb	r3, [r5, #16]
 80061e6:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 80061e8:	4aae      	ldr	r2, [pc, #696]	@ (80064a4 <loadMenuTexts+0x368>)
 80061ea:	4baf      	ldr	r3, [pc, #700]	@ (80064a8 <loadMenuTexts+0x36c>)
 80061ec:	4614      	mov	r4, r2
 80061ee:	461d      	mov	r5, r3
 80061f0:	6828      	ldr	r0, [r5, #0]
 80061f2:	6869      	ldr	r1, [r5, #4]
 80061f4:	68aa      	ldr	r2, [r5, #8]
 80061f6:	68eb      	ldr	r3, [r5, #12]
 80061f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061fa:	7c2b      	ldrb	r3, [r5, #16]
 80061fc:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 80061fe:	4aab      	ldr	r2, [pc, #684]	@ (80064ac <loadMenuTexts+0x370>)
 8006200:	4bab      	ldr	r3, [pc, #684]	@ (80064b0 <loadMenuTexts+0x374>)
 8006202:	4614      	mov	r4, r2
 8006204:	461d      	mov	r5, r3
 8006206:	6828      	ldr	r0, [r5, #0]
 8006208:	6869      	ldr	r1, [r5, #4]
 800620a:	68aa      	ldr	r2, [r5, #8]
 800620c:	68eb      	ldr	r3, [r5, #12]
 800620e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006210:	7c2b      	ldrb	r3, [r5, #16]
 8006212:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8006214:	4aa7      	ldr	r2, [pc, #668]	@ (80064b4 <loadMenuTexts+0x378>)
 8006216:	4ba8      	ldr	r3, [pc, #672]	@ (80064b8 <loadMenuTexts+0x37c>)
 8006218:	4614      	mov	r4, r2
 800621a:	461d      	mov	r5, r3
 800621c:	6828      	ldr	r0, [r5, #0]
 800621e:	6869      	ldr	r1, [r5, #4]
 8006220:	68aa      	ldr	r2, [r5, #8]
 8006222:	68eb      	ldr	r3, [r5, #12]
 8006224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006226:	7c2b      	ldrb	r3, [r5, #16]
 8006228:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 800622a:	4aa4      	ldr	r2, [pc, #656]	@ (80064bc <loadMenuTexts+0x380>)
 800622c:	4ba4      	ldr	r3, [pc, #656]	@ (80064c0 <loadMenuTexts+0x384>)
 800622e:	4614      	mov	r4, r2
 8006230:	461d      	mov	r5, r3
 8006232:	6828      	ldr	r0, [r5, #0]
 8006234:	6869      	ldr	r1, [r5, #4]
 8006236:	68aa      	ldr	r2, [r5, #8]
 8006238:	68eb      	ldr	r3, [r5, #12]
 800623a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800623c:	7c2b      	ldrb	r3, [r5, #16]
 800623e:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8006240:	4aa0      	ldr	r2, [pc, #640]	@ (80064c4 <loadMenuTexts+0x388>)
 8006242:	4ba1      	ldr	r3, [pc, #644]	@ (80064c8 <loadMenuTexts+0x38c>)
 8006244:	4614      	mov	r4, r2
 8006246:	461d      	mov	r5, r3
 8006248:	6828      	ldr	r0, [r5, #0]
 800624a:	6869      	ldr	r1, [r5, #4]
 800624c:	68aa      	ldr	r2, [r5, #8]
 800624e:	68eb      	ldr	r3, [r5, #12]
 8006250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006252:	7c2b      	ldrb	r3, [r5, #16]
 8006254:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8006256:	4a9d      	ldr	r2, [pc, #628]	@ (80064cc <loadMenuTexts+0x390>)
 8006258:	4b9d      	ldr	r3, [pc, #628]	@ (80064d0 <loadMenuTexts+0x394>)
 800625a:	4614      	mov	r4, r2
 800625c:	461d      	mov	r5, r3
 800625e:	6828      	ldr	r0, [r5, #0]
 8006260:	6869      	ldr	r1, [r5, #4]
 8006262:	68aa      	ldr	r2, [r5, #8]
 8006264:	68eb      	ldr	r3, [r5, #12]
 8006266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006268:	7c2b      	ldrb	r3, [r5, #16]
 800626a:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 800626c:	4a99      	ldr	r2, [pc, #612]	@ (80064d4 <loadMenuTexts+0x398>)
 800626e:	4b9a      	ldr	r3, [pc, #616]	@ (80064d8 <loadMenuTexts+0x39c>)
 8006270:	4614      	mov	r4, r2
 8006272:	461d      	mov	r5, r3
 8006274:	6828      	ldr	r0, [r5, #0]
 8006276:	6869      	ldr	r1, [r5, #4]
 8006278:	68aa      	ldr	r2, [r5, #8]
 800627a:	68eb      	ldr	r3, [r5, #12]
 800627c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800627e:	7c2b      	ldrb	r3, [r5, #16]
 8006280:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 8006282:	4a96      	ldr	r2, [pc, #600]	@ (80064dc <loadMenuTexts+0x3a0>)
 8006284:	4b96      	ldr	r3, [pc, #600]	@ (80064e0 <loadMenuTexts+0x3a4>)
 8006286:	4614      	mov	r4, r2
 8006288:	461d      	mov	r5, r3
 800628a:	6828      	ldr	r0, [r5, #0]
 800628c:	6869      	ldr	r1, [r5, #4]
 800628e:	68aa      	ldr	r2, [r5, #8]
 8006290:	68eb      	ldr	r3, [r5, #12]
 8006292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006294:	7c2b      	ldrb	r3, [r5, #16]
 8006296:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8006298:	4a92      	ldr	r2, [pc, #584]	@ (80064e4 <loadMenuTexts+0x3a8>)
 800629a:	4b93      	ldr	r3, [pc, #588]	@ (80064e8 <loadMenuTexts+0x3ac>)
 800629c:	4614      	mov	r4, r2
 800629e:	461d      	mov	r5, r3
 80062a0:	6828      	ldr	r0, [r5, #0]
 80062a2:	6869      	ldr	r1, [r5, #4]
 80062a4:	68aa      	ldr	r2, [r5, #8]
 80062a6:	68eb      	ldr	r3, [r5, #12]
 80062a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062aa:	7c2b      	ldrb	r3, [r5, #16]
 80062ac:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 80062ae:	4a8f      	ldr	r2, [pc, #572]	@ (80064ec <loadMenuTexts+0x3b0>)
 80062b0:	4b8f      	ldr	r3, [pc, #572]	@ (80064f0 <loadMenuTexts+0x3b4>)
 80062b2:	4614      	mov	r4, r2
 80062b4:	461d      	mov	r5, r3
 80062b6:	6828      	ldr	r0, [r5, #0]
 80062b8:	6869      	ldr	r1, [r5, #4]
 80062ba:	68aa      	ldr	r2, [r5, #8]
 80062bc:	68eb      	ldr	r3, [r5, #12]
 80062be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062c0:	7c2b      	ldrb	r3, [r5, #16]
 80062c2:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 80062c4:	4a8b      	ldr	r2, [pc, #556]	@ (80064f4 <loadMenuTexts+0x3b8>)
 80062c6:	4b8c      	ldr	r3, [pc, #560]	@ (80064f8 <loadMenuTexts+0x3bc>)
 80062c8:	4614      	mov	r4, r2
 80062ca:	461d      	mov	r5, r3
 80062cc:	6828      	ldr	r0, [r5, #0]
 80062ce:	6869      	ldr	r1, [r5, #4]
 80062d0:	68aa      	ldr	r2, [r5, #8]
 80062d2:	68eb      	ldr	r3, [r5, #12]
 80062d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062d6:	7c2b      	ldrb	r3, [r5, #16]
 80062d8:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 80062da:	4a88      	ldr	r2, [pc, #544]	@ (80064fc <loadMenuTexts+0x3c0>)
 80062dc:	4b88      	ldr	r3, [pc, #544]	@ (8006500 <loadMenuTexts+0x3c4>)
 80062de:	4614      	mov	r4, r2
 80062e0:	461d      	mov	r5, r3
 80062e2:	6828      	ldr	r0, [r5, #0]
 80062e4:	6869      	ldr	r1, [r5, #4]
 80062e6:	68aa      	ldr	r2, [r5, #8]
 80062e8:	68eb      	ldr	r3, [r5, #12]
 80062ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062ec:	7c2b      	ldrb	r3, [r5, #16]
 80062ee:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 80062f0:	4a84      	ldr	r2, [pc, #528]	@ (8006504 <loadMenuTexts+0x3c8>)
 80062f2:	4b85      	ldr	r3, [pc, #532]	@ (8006508 <loadMenuTexts+0x3cc>)
 80062f4:	4614      	mov	r4, r2
 80062f6:	461d      	mov	r5, r3
 80062f8:	6828      	ldr	r0, [r5, #0]
 80062fa:	6869      	ldr	r1, [r5, #4]
 80062fc:	68aa      	ldr	r2, [r5, #8]
 80062fe:	68eb      	ldr	r3, [r5, #12]
 8006300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006302:	7c2b      	ldrb	r3, [r5, #16]
 8006304:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 8006306:	4a81      	ldr	r2, [pc, #516]	@ (800650c <loadMenuTexts+0x3d0>)
 8006308:	4b81      	ldr	r3, [pc, #516]	@ (8006510 <loadMenuTexts+0x3d4>)
 800630a:	4614      	mov	r4, r2
 800630c:	461d      	mov	r5, r3
 800630e:	6828      	ldr	r0, [r5, #0]
 8006310:	6869      	ldr	r1, [r5, #4]
 8006312:	68aa      	ldr	r2, [r5, #8]
 8006314:	68eb      	ldr	r3, [r5, #12]
 8006316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006318:	7c2b      	ldrb	r3, [r5, #16]
 800631a:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 800631c:	4a7d      	ldr	r2, [pc, #500]	@ (8006514 <loadMenuTexts+0x3d8>)
 800631e:	4b7e      	ldr	r3, [pc, #504]	@ (8006518 <loadMenuTexts+0x3dc>)
 8006320:	4614      	mov	r4, r2
 8006322:	461d      	mov	r5, r3
 8006324:	6828      	ldr	r0, [r5, #0]
 8006326:	6869      	ldr	r1, [r5, #4]
 8006328:	68aa      	ldr	r2, [r5, #8]
 800632a:	68eb      	ldr	r3, [r5, #12]
 800632c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800632e:	7c2b      	ldrb	r3, [r5, #16]
 8006330:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 8006332:	4a7a      	ldr	r2, [pc, #488]	@ (800651c <loadMenuTexts+0x3e0>)
 8006334:	4b7a      	ldr	r3, [pc, #488]	@ (8006520 <loadMenuTexts+0x3e4>)
 8006336:	4614      	mov	r4, r2
 8006338:	461d      	mov	r5, r3
 800633a:	6828      	ldr	r0, [r5, #0]
 800633c:	6869      	ldr	r1, [r5, #4]
 800633e:	68aa      	ldr	r2, [r5, #8]
 8006340:	68eb      	ldr	r3, [r5, #12]
 8006342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006344:	7c2b      	ldrb	r3, [r5, #16]
 8006346:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 8006348:	4a76      	ldr	r2, [pc, #472]	@ (8006524 <loadMenuTexts+0x3e8>)
 800634a:	4b77      	ldr	r3, [pc, #476]	@ (8006528 <loadMenuTexts+0x3ec>)
 800634c:	4614      	mov	r4, r2
 800634e:	461d      	mov	r5, r3
 8006350:	6828      	ldr	r0, [r5, #0]
 8006352:	6869      	ldr	r1, [r5, #4]
 8006354:	68aa      	ldr	r2, [r5, #8]
 8006356:	68eb      	ldr	r3, [r5, #12]
 8006358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800635a:	7c2b      	ldrb	r3, [r5, #16]
 800635c:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 800635e:	4a73      	ldr	r2, [pc, #460]	@ (800652c <loadMenuTexts+0x3f0>)
 8006360:	4b73      	ldr	r3, [pc, #460]	@ (8006530 <loadMenuTexts+0x3f4>)
 8006362:	4614      	mov	r4, r2
 8006364:	461d      	mov	r5, r3
 8006366:	6828      	ldr	r0, [r5, #0]
 8006368:	6869      	ldr	r1, [r5, #4]
 800636a:	68aa      	ldr	r2, [r5, #8]
 800636c:	68eb      	ldr	r3, [r5, #12]
 800636e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006370:	7c2b      	ldrb	r3, [r5, #16]
 8006372:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 8006374:	4a6f      	ldr	r2, [pc, #444]	@ (8006534 <loadMenuTexts+0x3f8>)
 8006376:	4b70      	ldr	r3, [pc, #448]	@ (8006538 <loadMenuTexts+0x3fc>)
 8006378:	4614      	mov	r4, r2
 800637a:	461d      	mov	r5, r3
 800637c:	6828      	ldr	r0, [r5, #0]
 800637e:	6869      	ldr	r1, [r5, #4]
 8006380:	68aa      	ldr	r2, [r5, #8]
 8006382:	68eb      	ldr	r3, [r5, #12]
 8006384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006386:	7c2b      	ldrb	r3, [r5, #16]
 8006388:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 800638a:	4a6c      	ldr	r2, [pc, #432]	@ (800653c <loadMenuTexts+0x400>)
 800638c:	4b6c      	ldr	r3, [pc, #432]	@ (8006540 <loadMenuTexts+0x404>)
 800638e:	4614      	mov	r4, r2
 8006390:	461d      	mov	r5, r3
 8006392:	6828      	ldr	r0, [r5, #0]
 8006394:	6869      	ldr	r1, [r5, #4]
 8006396:	68aa      	ldr	r2, [r5, #8]
 8006398:	68eb      	ldr	r3, [r5, #12]
 800639a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800639c:	7c2b      	ldrb	r3, [r5, #16]
 800639e:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 80063a0:	4a68      	ldr	r2, [pc, #416]	@ (8006544 <loadMenuTexts+0x408>)
 80063a2:	4b69      	ldr	r3, [pc, #420]	@ (8006548 <loadMenuTexts+0x40c>)
 80063a4:	4614      	mov	r4, r2
 80063a6:	461d      	mov	r5, r3
 80063a8:	6828      	ldr	r0, [r5, #0]
 80063aa:	6869      	ldr	r1, [r5, #4]
 80063ac:	68aa      	ldr	r2, [r5, #8]
 80063ae:	68eb      	ldr	r3, [r5, #12]
 80063b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063b2:	7c2b      	ldrb	r3, [r5, #16]
 80063b4:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 80063b6:	4a65      	ldr	r2, [pc, #404]	@ (800654c <loadMenuTexts+0x410>)
 80063b8:	4b65      	ldr	r3, [pc, #404]	@ (8006550 <loadMenuTexts+0x414>)
 80063ba:	4614      	mov	r4, r2
 80063bc:	461d      	mov	r5, r3
 80063be:	6828      	ldr	r0, [r5, #0]
 80063c0:	6869      	ldr	r1, [r5, #4]
 80063c2:	68aa      	ldr	r2, [r5, #8]
 80063c4:	68eb      	ldr	r3, [r5, #12]
 80063c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063c8:	7c2b      	ldrb	r3, [r5, #16]
 80063ca:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 80063cc:	4a61      	ldr	r2, [pc, #388]	@ (8006554 <loadMenuTexts+0x418>)
 80063ce:	4b62      	ldr	r3, [pc, #392]	@ (8006558 <loadMenuTexts+0x41c>)
 80063d0:	4614      	mov	r4, r2
 80063d2:	461d      	mov	r5, r3
 80063d4:	6828      	ldr	r0, [r5, #0]
 80063d6:	6869      	ldr	r1, [r5, #4]
 80063d8:	68aa      	ldr	r2, [r5, #8]
 80063da:	68eb      	ldr	r3, [r5, #12]
 80063dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063de:	7c2b      	ldrb	r3, [r5, #16]
 80063e0:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 80063e2:	4a5e      	ldr	r2, [pc, #376]	@ (800655c <loadMenuTexts+0x420>)
 80063e4:	4b5e      	ldr	r3, [pc, #376]	@ (8006560 <loadMenuTexts+0x424>)
 80063e6:	4614      	mov	r4, r2
 80063e8:	461d      	mov	r5, r3
 80063ea:	6828      	ldr	r0, [r5, #0]
 80063ec:	6869      	ldr	r1, [r5, #4]
 80063ee:	68aa      	ldr	r2, [r5, #8]
 80063f0:	68eb      	ldr	r3, [r5, #12]
 80063f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063f4:	7c2b      	ldrb	r3, [r5, #16]
 80063f6:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 80063f8:	4a5a      	ldr	r2, [pc, #360]	@ (8006564 <loadMenuTexts+0x428>)
 80063fa:	4b5b      	ldr	r3, [pc, #364]	@ (8006568 <loadMenuTexts+0x42c>)
 80063fc:	4614      	mov	r4, r2
 80063fe:	461d      	mov	r5, r3
 8006400:	6828      	ldr	r0, [r5, #0]
 8006402:	6869      	ldr	r1, [r5, #4]
 8006404:	68aa      	ldr	r2, [r5, #8]
 8006406:	68eb      	ldr	r3, [r5, #12]
 8006408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800640a:	7c2b      	ldrb	r3, [r5, #16]
 800640c:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 800640e:	4a57      	ldr	r2, [pc, #348]	@ (800656c <loadMenuTexts+0x430>)
 8006410:	4b57      	ldr	r3, [pc, #348]	@ (8006570 <loadMenuTexts+0x434>)
 8006412:	4614      	mov	r4, r2
 8006414:	461d      	mov	r5, r3
 8006416:	6828      	ldr	r0, [r5, #0]
 8006418:	6869      	ldr	r1, [r5, #4]
 800641a:	68aa      	ldr	r2, [r5, #8]
 800641c:	68eb      	ldr	r3, [r5, #12]
 800641e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006420:	7c2b      	ldrb	r3, [r5, #16]
 8006422:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 8006424:	4a53      	ldr	r2, [pc, #332]	@ (8006574 <loadMenuTexts+0x438>)
 8006426:	4b54      	ldr	r3, [pc, #336]	@ (8006578 <loadMenuTexts+0x43c>)
 8006428:	4614      	mov	r4, r2
 800642a:	461d      	mov	r5, r3
 800642c:	6828      	ldr	r0, [r5, #0]
 800642e:	6869      	ldr	r1, [r5, #4]
 8006430:	68aa      	ldr	r2, [r5, #8]
 8006432:	68eb      	ldr	r3, [r5, #12]
 8006434:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006436:	7c2b      	ldrb	r3, [r5, #16]
 8006438:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 800643a:	4a50      	ldr	r2, [pc, #320]	@ (800657c <loadMenuTexts+0x440>)
 800643c:	4b50      	ldr	r3, [pc, #320]	@ (8006580 <loadMenuTexts+0x444>)
 800643e:	4614      	mov	r4, r2
 8006440:	461d      	mov	r5, r3
 8006442:	6828      	ldr	r0, [r5, #0]
 8006444:	6869      	ldr	r1, [r5, #4]
 8006446:	68aa      	ldr	r2, [r5, #8]
 8006448:	68eb      	ldr	r3, [r5, #12]
 800644a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800644c:	7c2b      	ldrb	r3, [r5, #16]
 800644e:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 8006450:	4a4c      	ldr	r2, [pc, #304]	@ (8006584 <loadMenuTexts+0x448>)
 8006452:	4b4d      	ldr	r3, [pc, #308]	@ (8006588 <loadMenuTexts+0x44c>)
 8006454:	4614      	mov	r4, r2
 8006456:	461d      	mov	r5, r3
 8006458:	6828      	ldr	r0, [r5, #0]
 800645a:	6869      	ldr	r1, [r5, #4]
 800645c:	68aa      	ldr	r2, [r5, #8]
 800645e:	68eb      	ldr	r3, [r5, #12]
 8006460:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006462:	7c2b      	ldrb	r3, [r5, #16]
 8006464:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 8006466:	4a49      	ldr	r2, [pc, #292]	@ (800658c <loadMenuTexts+0x450>)
 8006468:	e092      	b.n	8006590 <loadMenuTexts+0x454>
 800646a:	bf00      	nop
 800646c:	20001620 	.word	0x20001620
 8006470:	2000018c 	.word	0x2000018c
 8006474:	20001634 	.word	0x20001634
 8006478:	200001a0 	.word	0x200001a0
 800647c:	20001648 	.word	0x20001648
 8006480:	200001b4 	.word	0x200001b4
 8006484:	2000165c 	.word	0x2000165c
 8006488:	200001c8 	.word	0x200001c8
 800648c:	20001670 	.word	0x20001670
 8006490:	200001dc 	.word	0x200001dc
 8006494:	20001684 	.word	0x20001684
 8006498:	200001f0 	.word	0x200001f0
 800649c:	20001698 	.word	0x20001698
 80064a0:	20000204 	.word	0x20000204
 80064a4:	200016ac 	.word	0x200016ac
 80064a8:	20000218 	.word	0x20000218
 80064ac:	200016c0 	.word	0x200016c0
 80064b0:	2000022c 	.word	0x2000022c
 80064b4:	200016d4 	.word	0x200016d4
 80064b8:	20000240 	.word	0x20000240
 80064bc:	200016e8 	.word	0x200016e8
 80064c0:	20000254 	.word	0x20000254
 80064c4:	200016fc 	.word	0x200016fc
 80064c8:	20000268 	.word	0x20000268
 80064cc:	20001710 	.word	0x20001710
 80064d0:	2000027c 	.word	0x2000027c
 80064d4:	20001724 	.word	0x20001724
 80064d8:	20000290 	.word	0x20000290
 80064dc:	20001738 	.word	0x20001738
 80064e0:	200002a4 	.word	0x200002a4
 80064e4:	2000174c 	.word	0x2000174c
 80064e8:	200002b8 	.word	0x200002b8
 80064ec:	20001760 	.word	0x20001760
 80064f0:	200002cc 	.word	0x200002cc
 80064f4:	20001774 	.word	0x20001774
 80064f8:	200002e0 	.word	0x200002e0
 80064fc:	20001788 	.word	0x20001788
 8006500:	200002f4 	.word	0x200002f4
 8006504:	2000179c 	.word	0x2000179c
 8006508:	20000308 	.word	0x20000308
 800650c:	200017b0 	.word	0x200017b0
 8006510:	2000031c 	.word	0x2000031c
 8006514:	200017c4 	.word	0x200017c4
 8006518:	20000330 	.word	0x20000330
 800651c:	200017d8 	.word	0x200017d8
 8006520:	20000344 	.word	0x20000344
 8006524:	200017ec 	.word	0x200017ec
 8006528:	20000358 	.word	0x20000358
 800652c:	20001800 	.word	0x20001800
 8006530:	2000036c 	.word	0x2000036c
 8006534:	20001814 	.word	0x20001814
 8006538:	20000380 	.word	0x20000380
 800653c:	20001828 	.word	0x20001828
 8006540:	20000394 	.word	0x20000394
 8006544:	2000183c 	.word	0x2000183c
 8006548:	200003a8 	.word	0x200003a8
 800654c:	20001850 	.word	0x20001850
 8006550:	200003bc 	.word	0x200003bc
 8006554:	20001864 	.word	0x20001864
 8006558:	200003d0 	.word	0x200003d0
 800655c:	20001878 	.word	0x20001878
 8006560:	200003e4 	.word	0x200003e4
 8006564:	2000188c 	.word	0x2000188c
 8006568:	200003f8 	.word	0x200003f8
 800656c:	200018a0 	.word	0x200018a0
 8006570:	2000040c 	.word	0x2000040c
 8006574:	200018b4 	.word	0x200018b4
 8006578:	20000420 	.word	0x20000420
 800657c:	200018c8 	.word	0x200018c8
 8006580:	20000434 	.word	0x20000434
 8006584:	200018dc 	.word	0x200018dc
 8006588:	20000448 	.word	0x20000448
 800658c:	200018f0 	.word	0x200018f0
 8006590:	4bc7      	ldr	r3, [pc, #796]	@ (80068b0 <loadMenuTexts+0x774>)
 8006592:	4614      	mov	r4, r2
 8006594:	461d      	mov	r5, r3
 8006596:	6828      	ldr	r0, [r5, #0]
 8006598:	6869      	ldr	r1, [r5, #4]
 800659a:	68aa      	ldr	r2, [r5, #8]
 800659c:	68eb      	ldr	r3, [r5, #12]
 800659e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065a0:	7c2b      	ldrb	r3, [r5, #16]
 80065a2:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 80065a4:	4ac3      	ldr	r2, [pc, #780]	@ (80068b4 <loadMenuTexts+0x778>)
 80065a6:	4bc4      	ldr	r3, [pc, #784]	@ (80068b8 <loadMenuTexts+0x77c>)
 80065a8:	4614      	mov	r4, r2
 80065aa:	461d      	mov	r5, r3
 80065ac:	6828      	ldr	r0, [r5, #0]
 80065ae:	6869      	ldr	r1, [r5, #4]
 80065b0:	68aa      	ldr	r2, [r5, #8]
 80065b2:	68eb      	ldr	r3, [r5, #12]
 80065b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065b6:	7c2b      	ldrb	r3, [r5, #16]
 80065b8:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 80065ba:	4ac0      	ldr	r2, [pc, #768]	@ (80068bc <loadMenuTexts+0x780>)
 80065bc:	4bc0      	ldr	r3, [pc, #768]	@ (80068c0 <loadMenuTexts+0x784>)
 80065be:	4614      	mov	r4, r2
 80065c0:	461d      	mov	r5, r3
 80065c2:	6828      	ldr	r0, [r5, #0]
 80065c4:	6869      	ldr	r1, [r5, #4]
 80065c6:	68aa      	ldr	r2, [r5, #8]
 80065c8:	68eb      	ldr	r3, [r5, #12]
 80065ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065cc:	7c2b      	ldrb	r3, [r5, #16]
 80065ce:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 80065d0:	4abc      	ldr	r2, [pc, #752]	@ (80068c4 <loadMenuTexts+0x788>)
 80065d2:	4bbd      	ldr	r3, [pc, #756]	@ (80068c8 <loadMenuTexts+0x78c>)
 80065d4:	4614      	mov	r4, r2
 80065d6:	461d      	mov	r5, r3
 80065d8:	6828      	ldr	r0, [r5, #0]
 80065da:	6869      	ldr	r1, [r5, #4]
 80065dc:	68aa      	ldr	r2, [r5, #8]
 80065de:	68eb      	ldr	r3, [r5, #12]
 80065e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065e2:	7c2b      	ldrb	r3, [r5, #16]
 80065e4:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 80065e6:	4ab9      	ldr	r2, [pc, #740]	@ (80068cc <loadMenuTexts+0x790>)
 80065e8:	4bb9      	ldr	r3, [pc, #740]	@ (80068d0 <loadMenuTexts+0x794>)
 80065ea:	4614      	mov	r4, r2
 80065ec:	461d      	mov	r5, r3
 80065ee:	6828      	ldr	r0, [r5, #0]
 80065f0:	6869      	ldr	r1, [r5, #4]
 80065f2:	68aa      	ldr	r2, [r5, #8]
 80065f4:	68eb      	ldr	r3, [r5, #12]
 80065f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065f8:	7c2b      	ldrb	r3, [r5, #16]
 80065fa:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 80065fc:	4ab5      	ldr	r2, [pc, #724]	@ (80068d4 <loadMenuTexts+0x798>)
 80065fe:	4bb6      	ldr	r3, [pc, #728]	@ (80068d8 <loadMenuTexts+0x79c>)
 8006600:	4614      	mov	r4, r2
 8006602:	461d      	mov	r5, r3
 8006604:	6828      	ldr	r0, [r5, #0]
 8006606:	6869      	ldr	r1, [r5, #4]
 8006608:	68aa      	ldr	r2, [r5, #8]
 800660a:	68eb      	ldr	r3, [r5, #12]
 800660c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800660e:	7c2b      	ldrb	r3, [r5, #16]
 8006610:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 8006612:	4ab2      	ldr	r2, [pc, #712]	@ (80068dc <loadMenuTexts+0x7a0>)
 8006614:	4bb2      	ldr	r3, [pc, #712]	@ (80068e0 <loadMenuTexts+0x7a4>)
 8006616:	4614      	mov	r4, r2
 8006618:	461d      	mov	r5, r3
 800661a:	6828      	ldr	r0, [r5, #0]
 800661c:	6869      	ldr	r1, [r5, #4]
 800661e:	68aa      	ldr	r2, [r5, #8]
 8006620:	68eb      	ldr	r3, [r5, #12]
 8006622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006624:	7c2b      	ldrb	r3, [r5, #16]
 8006626:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 8006628:	4aae      	ldr	r2, [pc, #696]	@ (80068e4 <loadMenuTexts+0x7a8>)
 800662a:	4baf      	ldr	r3, [pc, #700]	@ (80068e8 <loadMenuTexts+0x7ac>)
 800662c:	4614      	mov	r4, r2
 800662e:	461d      	mov	r5, r3
 8006630:	6828      	ldr	r0, [r5, #0]
 8006632:	6869      	ldr	r1, [r5, #4]
 8006634:	68aa      	ldr	r2, [r5, #8]
 8006636:	68eb      	ldr	r3, [r5, #12]
 8006638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800663a:	7c2b      	ldrb	r3, [r5, #16]
 800663c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 800663e:	4aab      	ldr	r2, [pc, #684]	@ (80068ec <loadMenuTexts+0x7b0>)
 8006640:	4bab      	ldr	r3, [pc, #684]	@ (80068f0 <loadMenuTexts+0x7b4>)
 8006642:	4614      	mov	r4, r2
 8006644:	461d      	mov	r5, r3
 8006646:	6828      	ldr	r0, [r5, #0]
 8006648:	6869      	ldr	r1, [r5, #4]
 800664a:	68aa      	ldr	r2, [r5, #8]
 800664c:	68eb      	ldr	r3, [r5, #12]
 800664e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006650:	7c2b      	ldrb	r3, [r5, #16]
 8006652:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 8006654:	4aa7      	ldr	r2, [pc, #668]	@ (80068f4 <loadMenuTexts+0x7b8>)
 8006656:	4ba8      	ldr	r3, [pc, #672]	@ (80068f8 <loadMenuTexts+0x7bc>)
 8006658:	4614      	mov	r4, r2
 800665a:	461d      	mov	r5, r3
 800665c:	6828      	ldr	r0, [r5, #0]
 800665e:	6869      	ldr	r1, [r5, #4]
 8006660:	68aa      	ldr	r2, [r5, #8]
 8006662:	68eb      	ldr	r3, [r5, #12]
 8006664:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006666:	7c2b      	ldrb	r3, [r5, #16]
 8006668:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 800666a:	4aa4      	ldr	r2, [pc, #656]	@ (80068fc <loadMenuTexts+0x7c0>)
 800666c:	4ba4      	ldr	r3, [pc, #656]	@ (8006900 <loadMenuTexts+0x7c4>)
 800666e:	4614      	mov	r4, r2
 8006670:	461d      	mov	r5, r3
 8006672:	6828      	ldr	r0, [r5, #0]
 8006674:	6869      	ldr	r1, [r5, #4]
 8006676:	68aa      	ldr	r2, [r5, #8]
 8006678:	68eb      	ldr	r3, [r5, #12]
 800667a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800667c:	7c2b      	ldrb	r3, [r5, #16]
 800667e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 8006680:	4aa0      	ldr	r2, [pc, #640]	@ (8006904 <loadMenuTexts+0x7c8>)
 8006682:	4ba1      	ldr	r3, [pc, #644]	@ (8006908 <loadMenuTexts+0x7cc>)
 8006684:	4614      	mov	r4, r2
 8006686:	461d      	mov	r5, r3
 8006688:	6828      	ldr	r0, [r5, #0]
 800668a:	6869      	ldr	r1, [r5, #4]
 800668c:	68aa      	ldr	r2, [r5, #8]
 800668e:	68eb      	ldr	r3, [r5, #12]
 8006690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006692:	7c2b      	ldrb	r3, [r5, #16]
 8006694:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 8006696:	4a9d      	ldr	r2, [pc, #628]	@ (800690c <loadMenuTexts+0x7d0>)
 8006698:	4b9d      	ldr	r3, [pc, #628]	@ (8006910 <loadMenuTexts+0x7d4>)
 800669a:	4614      	mov	r4, r2
 800669c:	461d      	mov	r5, r3
 800669e:	6828      	ldr	r0, [r5, #0]
 80066a0:	6869      	ldr	r1, [r5, #4]
 80066a2:	68aa      	ldr	r2, [r5, #8]
 80066a4:	68eb      	ldr	r3, [r5, #12]
 80066a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066a8:	7c2b      	ldrb	r3, [r5, #16]
 80066aa:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 80066ac:	4a99      	ldr	r2, [pc, #612]	@ (8006914 <loadMenuTexts+0x7d8>)
 80066ae:	4b9a      	ldr	r3, [pc, #616]	@ (8006918 <loadMenuTexts+0x7dc>)
 80066b0:	4614      	mov	r4, r2
 80066b2:	461d      	mov	r5, r3
 80066b4:	6828      	ldr	r0, [r5, #0]
 80066b6:	6869      	ldr	r1, [r5, #4]
 80066b8:	68aa      	ldr	r2, [r5, #8]
 80066ba:	68eb      	ldr	r3, [r5, #12]
 80066bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066be:	7c2b      	ldrb	r3, [r5, #16]
 80066c0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 80066c2:	4a96      	ldr	r2, [pc, #600]	@ (800691c <loadMenuTexts+0x7e0>)
 80066c4:	4b96      	ldr	r3, [pc, #600]	@ (8006920 <loadMenuTexts+0x7e4>)
 80066c6:	4614      	mov	r4, r2
 80066c8:	461d      	mov	r5, r3
 80066ca:	6828      	ldr	r0, [r5, #0]
 80066cc:	6869      	ldr	r1, [r5, #4]
 80066ce:	68aa      	ldr	r2, [r5, #8]
 80066d0:	68eb      	ldr	r3, [r5, #12]
 80066d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066d4:	7c2b      	ldrb	r3, [r5, #16]
 80066d6:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 80066d8:	4a92      	ldr	r2, [pc, #584]	@ (8006924 <loadMenuTexts+0x7e8>)
 80066da:	4b93      	ldr	r3, [pc, #588]	@ (8006928 <loadMenuTexts+0x7ec>)
 80066dc:	4614      	mov	r4, r2
 80066de:	461d      	mov	r5, r3
 80066e0:	6828      	ldr	r0, [r5, #0]
 80066e2:	6869      	ldr	r1, [r5, #4]
 80066e4:	68aa      	ldr	r2, [r5, #8]
 80066e6:	68eb      	ldr	r3, [r5, #12]
 80066e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066ea:	7c2b      	ldrb	r3, [r5, #16]
 80066ec:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 80066ee:	4a8f      	ldr	r2, [pc, #572]	@ (800692c <loadMenuTexts+0x7f0>)
 80066f0:	4b8f      	ldr	r3, [pc, #572]	@ (8006930 <loadMenuTexts+0x7f4>)
 80066f2:	4614      	mov	r4, r2
 80066f4:	461d      	mov	r5, r3
 80066f6:	6828      	ldr	r0, [r5, #0]
 80066f8:	6869      	ldr	r1, [r5, #4]
 80066fa:	68aa      	ldr	r2, [r5, #8]
 80066fc:	68eb      	ldr	r3, [r5, #12]
 80066fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006700:	7c2b      	ldrb	r3, [r5, #16]
 8006702:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 8006704:	4a8b      	ldr	r2, [pc, #556]	@ (8006934 <loadMenuTexts+0x7f8>)
 8006706:	4b8c      	ldr	r3, [pc, #560]	@ (8006938 <loadMenuTexts+0x7fc>)
 8006708:	4614      	mov	r4, r2
 800670a:	461d      	mov	r5, r3
 800670c:	6828      	ldr	r0, [r5, #0]
 800670e:	6869      	ldr	r1, [r5, #4]
 8006710:	68aa      	ldr	r2, [r5, #8]
 8006712:	68eb      	ldr	r3, [r5, #12]
 8006714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006716:	7c2b      	ldrb	r3, [r5, #16]
 8006718:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 800671a:	4a88      	ldr	r2, [pc, #544]	@ (800693c <loadMenuTexts+0x800>)
 800671c:	4b88      	ldr	r3, [pc, #544]	@ (8006940 <loadMenuTexts+0x804>)
 800671e:	4614      	mov	r4, r2
 8006720:	461d      	mov	r5, r3
 8006722:	6828      	ldr	r0, [r5, #0]
 8006724:	6869      	ldr	r1, [r5, #4]
 8006726:	68aa      	ldr	r2, [r5, #8]
 8006728:	68eb      	ldr	r3, [r5, #12]
 800672a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800672c:	7c2b      	ldrb	r3, [r5, #16]
 800672e:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 8006730:	4a84      	ldr	r2, [pc, #528]	@ (8006944 <loadMenuTexts+0x808>)
 8006732:	4b85      	ldr	r3, [pc, #532]	@ (8006948 <loadMenuTexts+0x80c>)
 8006734:	4614      	mov	r4, r2
 8006736:	461d      	mov	r5, r3
 8006738:	6828      	ldr	r0, [r5, #0]
 800673a:	6869      	ldr	r1, [r5, #4]
 800673c:	68aa      	ldr	r2, [r5, #8]
 800673e:	68eb      	ldr	r3, [r5, #12]
 8006740:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006742:	7c2b      	ldrb	r3, [r5, #16]
 8006744:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 8006746:	4a81      	ldr	r2, [pc, #516]	@ (800694c <loadMenuTexts+0x810>)
 8006748:	4b81      	ldr	r3, [pc, #516]	@ (8006950 <loadMenuTexts+0x814>)
 800674a:	4614      	mov	r4, r2
 800674c:	461d      	mov	r5, r3
 800674e:	6828      	ldr	r0, [r5, #0]
 8006750:	6869      	ldr	r1, [r5, #4]
 8006752:	68aa      	ldr	r2, [r5, #8]
 8006754:	68eb      	ldr	r3, [r5, #12]
 8006756:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006758:	7c2b      	ldrb	r3, [r5, #16]
 800675a:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 800675c:	4a7d      	ldr	r2, [pc, #500]	@ (8006954 <loadMenuTexts+0x818>)
 800675e:	4b7e      	ldr	r3, [pc, #504]	@ (8006958 <loadMenuTexts+0x81c>)
 8006760:	4614      	mov	r4, r2
 8006762:	461d      	mov	r5, r3
 8006764:	6828      	ldr	r0, [r5, #0]
 8006766:	6869      	ldr	r1, [r5, #4]
 8006768:	68aa      	ldr	r2, [r5, #8]
 800676a:	68eb      	ldr	r3, [r5, #12]
 800676c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800676e:	7c2b      	ldrb	r3, [r5, #16]
 8006770:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 8006772:	4a7a      	ldr	r2, [pc, #488]	@ (800695c <loadMenuTexts+0x820>)
 8006774:	4b7a      	ldr	r3, [pc, #488]	@ (8006960 <loadMenuTexts+0x824>)
 8006776:	4614      	mov	r4, r2
 8006778:	461d      	mov	r5, r3
 800677a:	6828      	ldr	r0, [r5, #0]
 800677c:	6869      	ldr	r1, [r5, #4]
 800677e:	68aa      	ldr	r2, [r5, #8]
 8006780:	68eb      	ldr	r3, [r5, #12]
 8006782:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006784:	7c2b      	ldrb	r3, [r5, #16]
 8006786:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 8006788:	4a76      	ldr	r2, [pc, #472]	@ (8006964 <loadMenuTexts+0x828>)
 800678a:	4b77      	ldr	r3, [pc, #476]	@ (8006968 <loadMenuTexts+0x82c>)
 800678c:	4614      	mov	r4, r2
 800678e:	461d      	mov	r5, r3
 8006790:	6828      	ldr	r0, [r5, #0]
 8006792:	6869      	ldr	r1, [r5, #4]
 8006794:	68aa      	ldr	r2, [r5, #8]
 8006796:	68eb      	ldr	r3, [r5, #12]
 8006798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800679a:	7c2b      	ldrb	r3, [r5, #16]
 800679c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 800679e:	4a73      	ldr	r2, [pc, #460]	@ (800696c <loadMenuTexts+0x830>)
 80067a0:	4b73      	ldr	r3, [pc, #460]	@ (8006970 <loadMenuTexts+0x834>)
 80067a2:	4614      	mov	r4, r2
 80067a4:	461d      	mov	r5, r3
 80067a6:	6828      	ldr	r0, [r5, #0]
 80067a8:	6869      	ldr	r1, [r5, #4]
 80067aa:	68aa      	ldr	r2, [r5, #8]
 80067ac:	68eb      	ldr	r3, [r5, #12]
 80067ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067b0:	7c2b      	ldrb	r3, [r5, #16]
 80067b2:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 80067b4:	4a6f      	ldr	r2, [pc, #444]	@ (8006974 <loadMenuTexts+0x838>)
 80067b6:	4b70      	ldr	r3, [pc, #448]	@ (8006978 <loadMenuTexts+0x83c>)
 80067b8:	4614      	mov	r4, r2
 80067ba:	461d      	mov	r5, r3
 80067bc:	6828      	ldr	r0, [r5, #0]
 80067be:	6869      	ldr	r1, [r5, #4]
 80067c0:	68aa      	ldr	r2, [r5, #8]
 80067c2:	68eb      	ldr	r3, [r5, #12]
 80067c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067c6:	7c2b      	ldrb	r3, [r5, #16]
 80067c8:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 80067ca:	4a6c      	ldr	r2, [pc, #432]	@ (800697c <loadMenuTexts+0x840>)
 80067cc:	4b6c      	ldr	r3, [pc, #432]	@ (8006980 <loadMenuTexts+0x844>)
 80067ce:	4614      	mov	r4, r2
 80067d0:	461d      	mov	r5, r3
 80067d2:	6828      	ldr	r0, [r5, #0]
 80067d4:	6869      	ldr	r1, [r5, #4]
 80067d6:	68aa      	ldr	r2, [r5, #8]
 80067d8:	68eb      	ldr	r3, [r5, #12]
 80067da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067dc:	7c2b      	ldrb	r3, [r5, #16]
 80067de:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 80067e0:	4a68      	ldr	r2, [pc, #416]	@ (8006984 <loadMenuTexts+0x848>)
 80067e2:	4b69      	ldr	r3, [pc, #420]	@ (8006988 <loadMenuTexts+0x84c>)
 80067e4:	4614      	mov	r4, r2
 80067e6:	461d      	mov	r5, r3
 80067e8:	6828      	ldr	r0, [r5, #0]
 80067ea:	6869      	ldr	r1, [r5, #4]
 80067ec:	68aa      	ldr	r2, [r5, #8]
 80067ee:	68eb      	ldr	r3, [r5, #12]
 80067f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067f2:	7c2b      	ldrb	r3, [r5, #16]
 80067f4:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 80067f6:	4a65      	ldr	r2, [pc, #404]	@ (800698c <loadMenuTexts+0x850>)
 80067f8:	4b65      	ldr	r3, [pc, #404]	@ (8006990 <loadMenuTexts+0x854>)
 80067fa:	4614      	mov	r4, r2
 80067fc:	461d      	mov	r5, r3
 80067fe:	6828      	ldr	r0, [r5, #0]
 8006800:	6869      	ldr	r1, [r5, #4]
 8006802:	68aa      	ldr	r2, [r5, #8]
 8006804:	68eb      	ldr	r3, [r5, #12]
 8006806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006808:	7c2b      	ldrb	r3, [r5, #16]
 800680a:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 800680c:	4a61      	ldr	r2, [pc, #388]	@ (8006994 <loadMenuTexts+0x858>)
 800680e:	4b62      	ldr	r3, [pc, #392]	@ (8006998 <loadMenuTexts+0x85c>)
 8006810:	4614      	mov	r4, r2
 8006812:	461d      	mov	r5, r3
 8006814:	6828      	ldr	r0, [r5, #0]
 8006816:	6869      	ldr	r1, [r5, #4]
 8006818:	68aa      	ldr	r2, [r5, #8]
 800681a:	68eb      	ldr	r3, [r5, #12]
 800681c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800681e:	7c2b      	ldrb	r3, [r5, #16]
 8006820:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 8006822:	4a5e      	ldr	r2, [pc, #376]	@ (800699c <loadMenuTexts+0x860>)
 8006824:	4b5e      	ldr	r3, [pc, #376]	@ (80069a0 <loadMenuTexts+0x864>)
 8006826:	4614      	mov	r4, r2
 8006828:	461d      	mov	r5, r3
 800682a:	6828      	ldr	r0, [r5, #0]
 800682c:	6869      	ldr	r1, [r5, #4]
 800682e:	68aa      	ldr	r2, [r5, #8]
 8006830:	68eb      	ldr	r3, [r5, #12]
 8006832:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006834:	7c2b      	ldrb	r3, [r5, #16]
 8006836:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 8006838:	4a5a      	ldr	r2, [pc, #360]	@ (80069a4 <loadMenuTexts+0x868>)
 800683a:	4b5b      	ldr	r3, [pc, #364]	@ (80069a8 <loadMenuTexts+0x86c>)
 800683c:	4614      	mov	r4, r2
 800683e:	461d      	mov	r5, r3
 8006840:	6828      	ldr	r0, [r5, #0]
 8006842:	6869      	ldr	r1, [r5, #4]
 8006844:	68aa      	ldr	r2, [r5, #8]
 8006846:	68eb      	ldr	r3, [r5, #12]
 8006848:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800684a:	7c2b      	ldrb	r3, [r5, #16]
 800684c:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 800684e:	4a57      	ldr	r2, [pc, #348]	@ (80069ac <loadMenuTexts+0x870>)
 8006850:	4b57      	ldr	r3, [pc, #348]	@ (80069b0 <loadMenuTexts+0x874>)
 8006852:	4614      	mov	r4, r2
 8006854:	461d      	mov	r5, r3
 8006856:	6828      	ldr	r0, [r5, #0]
 8006858:	6869      	ldr	r1, [r5, #4]
 800685a:	68aa      	ldr	r2, [r5, #8]
 800685c:	68eb      	ldr	r3, [r5, #12]
 800685e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006860:	7c2b      	ldrb	r3, [r5, #16]
 8006862:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 8006864:	4a53      	ldr	r2, [pc, #332]	@ (80069b4 <loadMenuTexts+0x878>)
 8006866:	4b54      	ldr	r3, [pc, #336]	@ (80069b8 <loadMenuTexts+0x87c>)
 8006868:	4614      	mov	r4, r2
 800686a:	461d      	mov	r5, r3
 800686c:	6828      	ldr	r0, [r5, #0]
 800686e:	6869      	ldr	r1, [r5, #4]
 8006870:	68aa      	ldr	r2, [r5, #8]
 8006872:	68eb      	ldr	r3, [r5, #12]
 8006874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006876:	7c2b      	ldrb	r3, [r5, #16]
 8006878:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 800687a:	4a50      	ldr	r2, [pc, #320]	@ (80069bc <loadMenuTexts+0x880>)
 800687c:	4b50      	ldr	r3, [pc, #320]	@ (80069c0 <loadMenuTexts+0x884>)
 800687e:	4614      	mov	r4, r2
 8006880:	461d      	mov	r5, r3
 8006882:	6828      	ldr	r0, [r5, #0]
 8006884:	6869      	ldr	r1, [r5, #4]
 8006886:	68aa      	ldr	r2, [r5, #8]
 8006888:	68eb      	ldr	r3, [r5, #12]
 800688a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800688c:	7c2b      	ldrb	r3, [r5, #16]
 800688e:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 8006890:	4a4c      	ldr	r2, [pc, #304]	@ (80069c4 <loadMenuTexts+0x888>)
 8006892:	4b4d      	ldr	r3, [pc, #308]	@ (80069c8 <loadMenuTexts+0x88c>)
 8006894:	4614      	mov	r4, r2
 8006896:	461d      	mov	r5, r3
 8006898:	6828      	ldr	r0, [r5, #0]
 800689a:	6869      	ldr	r1, [r5, #4]
 800689c:	68aa      	ldr	r2, [r5, #8]
 800689e:	68eb      	ldr	r3, [r5, #12]
 80068a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068a2:	7c2b      	ldrb	r3, [r5, #16]
 80068a4:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 80068a6:	4a49      	ldr	r2, [pc, #292]	@ (80069cc <loadMenuTexts+0x890>)
 80068a8:	4b49      	ldr	r3, [pc, #292]	@ (80069d0 <loadMenuTexts+0x894>)
 80068aa:	4614      	mov	r4, r2
 80068ac:	461d      	mov	r5, r3
 80068ae:	e091      	b.n	80069d4 <loadMenuTexts+0x898>
 80068b0:	2000045c 	.word	0x2000045c
 80068b4:	20001904 	.word	0x20001904
 80068b8:	20000470 	.word	0x20000470
 80068bc:	20001918 	.word	0x20001918
 80068c0:	20000484 	.word	0x20000484
 80068c4:	2000192c 	.word	0x2000192c
 80068c8:	20000498 	.word	0x20000498
 80068cc:	20001940 	.word	0x20001940
 80068d0:	200004ac 	.word	0x200004ac
 80068d4:	20001954 	.word	0x20001954
 80068d8:	200004c0 	.word	0x200004c0
 80068dc:	20001968 	.word	0x20001968
 80068e0:	200004d4 	.word	0x200004d4
 80068e4:	2000197c 	.word	0x2000197c
 80068e8:	200004e8 	.word	0x200004e8
 80068ec:	20001990 	.word	0x20001990
 80068f0:	200004fc 	.word	0x200004fc
 80068f4:	200019a4 	.word	0x200019a4
 80068f8:	20000510 	.word	0x20000510
 80068fc:	200019b8 	.word	0x200019b8
 8006900:	20000524 	.word	0x20000524
 8006904:	200019cc 	.word	0x200019cc
 8006908:	20000538 	.word	0x20000538
 800690c:	200019e0 	.word	0x200019e0
 8006910:	2000054c 	.word	0x2000054c
 8006914:	200019f4 	.word	0x200019f4
 8006918:	20000560 	.word	0x20000560
 800691c:	20001a08 	.word	0x20001a08
 8006920:	20000574 	.word	0x20000574
 8006924:	20001a1c 	.word	0x20001a1c
 8006928:	20000588 	.word	0x20000588
 800692c:	20001a30 	.word	0x20001a30
 8006930:	2000059c 	.word	0x2000059c
 8006934:	20001a44 	.word	0x20001a44
 8006938:	200005b0 	.word	0x200005b0
 800693c:	20001a58 	.word	0x20001a58
 8006940:	200005c4 	.word	0x200005c4
 8006944:	20001a6c 	.word	0x20001a6c
 8006948:	200005d8 	.word	0x200005d8
 800694c:	20001a80 	.word	0x20001a80
 8006950:	200005ec 	.word	0x200005ec
 8006954:	20001a94 	.word	0x20001a94
 8006958:	20000600 	.word	0x20000600
 800695c:	20001aa8 	.word	0x20001aa8
 8006960:	20000614 	.word	0x20000614
 8006964:	20001abc 	.word	0x20001abc
 8006968:	20000628 	.word	0x20000628
 800696c:	20001ad0 	.word	0x20001ad0
 8006970:	2000063c 	.word	0x2000063c
 8006974:	20001ae4 	.word	0x20001ae4
 8006978:	20000650 	.word	0x20000650
 800697c:	20001af8 	.word	0x20001af8
 8006980:	20000664 	.word	0x20000664
 8006984:	20001b0c 	.word	0x20001b0c
 8006988:	20000678 	.word	0x20000678
 800698c:	20001b20 	.word	0x20001b20
 8006990:	2000068c 	.word	0x2000068c
 8006994:	20001b34 	.word	0x20001b34
 8006998:	200006a0 	.word	0x200006a0
 800699c:	20001b48 	.word	0x20001b48
 80069a0:	200006b4 	.word	0x200006b4
 80069a4:	20001b5c 	.word	0x20001b5c
 80069a8:	200006c8 	.word	0x200006c8
 80069ac:	20001b70 	.word	0x20001b70
 80069b0:	200006dc 	.word	0x200006dc
 80069b4:	20001b84 	.word	0x20001b84
 80069b8:	200006f0 	.word	0x200006f0
 80069bc:	20001b98 	.word	0x20001b98
 80069c0:	20000c7c 	.word	0x20000c7c
 80069c4:	20001bac 	.word	0x20001bac
 80069c8:	20000c90 	.word	0x20000c90
 80069cc:	20001bc0 	.word	0x20001bc0
 80069d0:	20000ca4 	.word	0x20000ca4
 80069d4:	6828      	ldr	r0, [r5, #0]
 80069d6:	6869      	ldr	r1, [r5, #4]
 80069d8:	68aa      	ldr	r2, [r5, #8]
 80069da:	68eb      	ldr	r3, [r5, #12]
 80069dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069de:	7c2b      	ldrb	r3, [r5, #16]
 80069e0:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 80069e2:	4a59      	ldr	r2, [pc, #356]	@ (8006b48 <loadMenuTexts+0xa0c>)
 80069e4:	4b59      	ldr	r3, [pc, #356]	@ (8006b4c <loadMenuTexts+0xa10>)
 80069e6:	4614      	mov	r4, r2
 80069e8:	461d      	mov	r5, r3
 80069ea:	6828      	ldr	r0, [r5, #0]
 80069ec:	6869      	ldr	r1, [r5, #4]
 80069ee:	68aa      	ldr	r2, [r5, #8]
 80069f0:	68eb      	ldr	r3, [r5, #12]
 80069f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069f4:	7c2b      	ldrb	r3, [r5, #16]
 80069f6:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 80069f8:	4a55      	ldr	r2, [pc, #340]	@ (8006b50 <loadMenuTexts+0xa14>)
 80069fa:	4b56      	ldr	r3, [pc, #344]	@ (8006b54 <loadMenuTexts+0xa18>)
 80069fc:	4614      	mov	r4, r2
 80069fe:	461d      	mov	r5, r3
 8006a00:	6828      	ldr	r0, [r5, #0]
 8006a02:	6869      	ldr	r1, [r5, #4]
 8006a04:	68aa      	ldr	r2, [r5, #8]
 8006a06:	68eb      	ldr	r3, [r5, #12]
 8006a08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a0a:	7c2b      	ldrb	r3, [r5, #16]
 8006a0c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 8006a0e:	4a52      	ldr	r2, [pc, #328]	@ (8006b58 <loadMenuTexts+0xa1c>)
 8006a10:	4b52      	ldr	r3, [pc, #328]	@ (8006b5c <loadMenuTexts+0xa20>)
 8006a12:	4614      	mov	r4, r2
 8006a14:	461d      	mov	r5, r3
 8006a16:	6828      	ldr	r0, [r5, #0]
 8006a18:	6869      	ldr	r1, [r5, #4]
 8006a1a:	68aa      	ldr	r2, [r5, #8]
 8006a1c:	68eb      	ldr	r3, [r5, #12]
 8006a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a20:	7c2b      	ldrb	r3, [r5, #16]
 8006a22:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 8006a24:	4a4e      	ldr	r2, [pc, #312]	@ (8006b60 <loadMenuTexts+0xa24>)
 8006a26:	4b4f      	ldr	r3, [pc, #316]	@ (8006b64 <loadMenuTexts+0xa28>)
 8006a28:	4614      	mov	r4, r2
 8006a2a:	461d      	mov	r5, r3
 8006a2c:	6828      	ldr	r0, [r5, #0]
 8006a2e:	6869      	ldr	r1, [r5, #4]
 8006a30:	68aa      	ldr	r2, [r5, #8]
 8006a32:	68eb      	ldr	r3, [r5, #12]
 8006a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a36:	7c2b      	ldrb	r3, [r5, #16]
 8006a38:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 8006a3a:	4a4b      	ldr	r2, [pc, #300]	@ (8006b68 <loadMenuTexts+0xa2c>)
 8006a3c:	4b4b      	ldr	r3, [pc, #300]	@ (8006b6c <loadMenuTexts+0xa30>)
 8006a3e:	4614      	mov	r4, r2
 8006a40:	461d      	mov	r5, r3
 8006a42:	6828      	ldr	r0, [r5, #0]
 8006a44:	6869      	ldr	r1, [r5, #4]
 8006a46:	68aa      	ldr	r2, [r5, #8]
 8006a48:	68eb      	ldr	r3, [r5, #12]
 8006a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a4c:	7c2b      	ldrb	r3, [r5, #16]
 8006a4e:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 8006a50:	4a47      	ldr	r2, [pc, #284]	@ (8006b70 <loadMenuTexts+0xa34>)
 8006a52:	4b48      	ldr	r3, [pc, #288]	@ (8006b74 <loadMenuTexts+0xa38>)
 8006a54:	4614      	mov	r4, r2
 8006a56:	461d      	mov	r5, r3
 8006a58:	6828      	ldr	r0, [r5, #0]
 8006a5a:	6869      	ldr	r1, [r5, #4]
 8006a5c:	68aa      	ldr	r2, [r5, #8]
 8006a5e:	68eb      	ldr	r3, [r5, #12]
 8006a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a62:	7c2b      	ldrb	r3, [r5, #16]
 8006a64:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 8006a66:	4a44      	ldr	r2, [pc, #272]	@ (8006b78 <loadMenuTexts+0xa3c>)
 8006a68:	4b44      	ldr	r3, [pc, #272]	@ (8006b7c <loadMenuTexts+0xa40>)
 8006a6a:	4614      	mov	r4, r2
 8006a6c:	461d      	mov	r5, r3
 8006a6e:	6828      	ldr	r0, [r5, #0]
 8006a70:	6869      	ldr	r1, [r5, #4]
 8006a72:	68aa      	ldr	r2, [r5, #8]
 8006a74:	68eb      	ldr	r3, [r5, #12]
 8006a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a78:	7c2b      	ldrb	r3, [r5, #16]
 8006a7a:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 8006a7c:	4a40      	ldr	r2, [pc, #256]	@ (8006b80 <loadMenuTexts+0xa44>)
 8006a7e:	4b41      	ldr	r3, [pc, #260]	@ (8006b84 <loadMenuTexts+0xa48>)
 8006a80:	4614      	mov	r4, r2
 8006a82:	461d      	mov	r5, r3
 8006a84:	6828      	ldr	r0, [r5, #0]
 8006a86:	6869      	ldr	r1, [r5, #4]
 8006a88:	68aa      	ldr	r2, [r5, #8]
 8006a8a:	68eb      	ldr	r3, [r5, #12]
 8006a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a8e:	7c2b      	ldrb	r3, [r5, #16]
 8006a90:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 8006a92:	4a3d      	ldr	r2, [pc, #244]	@ (8006b88 <loadMenuTexts+0xa4c>)
 8006a94:	4b3d      	ldr	r3, [pc, #244]	@ (8006b8c <loadMenuTexts+0xa50>)
 8006a96:	4614      	mov	r4, r2
 8006a98:	461d      	mov	r5, r3
 8006a9a:	6828      	ldr	r0, [r5, #0]
 8006a9c:	6869      	ldr	r1, [r5, #4]
 8006a9e:	68aa      	ldr	r2, [r5, #8]
 8006aa0:	68eb      	ldr	r3, [r5, #12]
 8006aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aa4:	7c2b      	ldrb	r3, [r5, #16]
 8006aa6:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8006aa8:	4a39      	ldr	r2, [pc, #228]	@ (8006b90 <loadMenuTexts+0xa54>)
 8006aaa:	4b3a      	ldr	r3, [pc, #232]	@ (8006b94 <loadMenuTexts+0xa58>)
 8006aac:	4614      	mov	r4, r2
 8006aae:	461d      	mov	r5, r3
 8006ab0:	6828      	ldr	r0, [r5, #0]
 8006ab2:	6869      	ldr	r1, [r5, #4]
 8006ab4:	68aa      	ldr	r2, [r5, #8]
 8006ab6:	68eb      	ldr	r3, [r5, #12]
 8006ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aba:	7c2b      	ldrb	r3, [r5, #16]
 8006abc:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 8006abe:	4a36      	ldr	r2, [pc, #216]	@ (8006b98 <loadMenuTexts+0xa5c>)
 8006ac0:	4b36      	ldr	r3, [pc, #216]	@ (8006b9c <loadMenuTexts+0xa60>)
 8006ac2:	4614      	mov	r4, r2
 8006ac4:	461d      	mov	r5, r3
 8006ac6:	6828      	ldr	r0, [r5, #0]
 8006ac8:	6869      	ldr	r1, [r5, #4]
 8006aca:	68aa      	ldr	r2, [r5, #8]
 8006acc:	68eb      	ldr	r3, [r5, #12]
 8006ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ad0:	7c2b      	ldrb	r3, [r5, #16]
 8006ad2:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 8006ad4:	4a32      	ldr	r2, [pc, #200]	@ (8006ba0 <loadMenuTexts+0xa64>)
 8006ad6:	4b33      	ldr	r3, [pc, #204]	@ (8006ba4 <loadMenuTexts+0xa68>)
 8006ad8:	4614      	mov	r4, r2
 8006ada:	461d      	mov	r5, r3
 8006adc:	6828      	ldr	r0, [r5, #0]
 8006ade:	6869      	ldr	r1, [r5, #4]
 8006ae0:	68aa      	ldr	r2, [r5, #8]
 8006ae2:	68eb      	ldr	r3, [r5, #12]
 8006ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ae6:	7c2b      	ldrb	r3, [r5, #16]
 8006ae8:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 8006aea:	4a2f      	ldr	r2, [pc, #188]	@ (8006ba8 <loadMenuTexts+0xa6c>)
 8006aec:	4b2f      	ldr	r3, [pc, #188]	@ (8006bac <loadMenuTexts+0xa70>)
 8006aee:	4614      	mov	r4, r2
 8006af0:	461d      	mov	r5, r3
 8006af2:	6828      	ldr	r0, [r5, #0]
 8006af4:	6869      	ldr	r1, [r5, #4]
 8006af6:	68aa      	ldr	r2, [r5, #8]
 8006af8:	68eb      	ldr	r3, [r5, #12]
 8006afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006afc:	7c2b      	ldrb	r3, [r5, #16]
 8006afe:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 8006b00:	4a2b      	ldr	r2, [pc, #172]	@ (8006bb0 <loadMenuTexts+0xa74>)
 8006b02:	4b2c      	ldr	r3, [pc, #176]	@ (8006bb4 <loadMenuTexts+0xa78>)
 8006b04:	4614      	mov	r4, r2
 8006b06:	461d      	mov	r5, r3
 8006b08:	6828      	ldr	r0, [r5, #0]
 8006b0a:	6869      	ldr	r1, [r5, #4]
 8006b0c:	68aa      	ldr	r2, [r5, #8]
 8006b0e:	68eb      	ldr	r3, [r5, #12]
 8006b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b12:	7c2b      	ldrb	r3, [r5, #16]
 8006b14:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 8006b16:	4a28      	ldr	r2, [pc, #160]	@ (8006bb8 <loadMenuTexts+0xa7c>)
 8006b18:	4b28      	ldr	r3, [pc, #160]	@ (8006bbc <loadMenuTexts+0xa80>)
 8006b1a:	4614      	mov	r4, r2
 8006b1c:	461d      	mov	r5, r3
 8006b1e:	6828      	ldr	r0, [r5, #0]
 8006b20:	6869      	ldr	r1, [r5, #4]
 8006b22:	68aa      	ldr	r2, [r5, #8]
 8006b24:	68eb      	ldr	r3, [r5, #12]
 8006b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b28:	7c2b      	ldrb	r3, [r5, #16]
 8006b2a:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 8006b2c:	4a24      	ldr	r2, [pc, #144]	@ (8006bc0 <loadMenuTexts+0xa84>)
 8006b2e:	4b25      	ldr	r3, [pc, #148]	@ (8006bc4 <loadMenuTexts+0xa88>)
 8006b30:	4614      	mov	r4, r2
 8006b32:	461d      	mov	r5, r3
 8006b34:	6828      	ldr	r0, [r5, #0]
 8006b36:	6869      	ldr	r1, [r5, #4]
 8006b38:	68aa      	ldr	r2, [r5, #8]
 8006b3a:	68eb      	ldr	r3, [r5, #12]
 8006b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b3e:	7c2b      	ldrb	r3, [r5, #16]
 8006b40:	7023      	strb	r3, [r4, #0]
 8006b42:	f000 bd3a 	b.w	80075ba <loadMenuTexts+0x147e>
 8006b46:	bf00      	nop
 8006b48:	20001bd4 	.word	0x20001bd4
 8006b4c:	20000cb8 	.word	0x20000cb8
 8006b50:	20001be8 	.word	0x20001be8
 8006b54:	20000d1c 	.word	0x20000d1c
 8006b58:	20001bfc 	.word	0x20001bfc
 8006b5c:	20000d30 	.word	0x20000d30
 8006b60:	20001c10 	.word	0x20001c10
 8006b64:	20000d6c 	.word	0x20000d6c
 8006b68:	20001c24 	.word	0x20001c24
 8006b6c:	20000d80 	.word	0x20000d80
 8006b70:	20001c38 	.word	0x20001c38
 8006b74:	20000dbc 	.word	0x20000dbc
 8006b78:	20001c4c 	.word	0x20001c4c
 8006b7c:	20000dd0 	.word	0x20000dd0
 8006b80:	20001c60 	.word	0x20001c60
 8006b84:	20000e0c 	.word	0x20000e0c
 8006b88:	20001c74 	.word	0x20001c74
 8006b8c:	20000e34 	.word	0x20000e34
 8006b90:	20001c88 	.word	0x20001c88
 8006b94:	20000e5c 	.word	0x20000e5c
 8006b98:	20001c9c 	.word	0x20001c9c
 8006b9c:	20000e84 	.word	0x20000e84
 8006ba0:	20001cb0 	.word	0x20001cb0
 8006ba4:	20000eac 	.word	0x20000eac
 8006ba8:	20001cc4 	.word	0x20001cc4
 8006bac:	20000ed4 	.word	0x20000ed4
 8006bb0:	20001cd8 	.word	0x20001cd8
 8006bb4:	20000efc 	.word	0x20000efc
 8006bb8:	20001cec 	.word	0x20001cec
 8006bbc:	20000f24 	.word	0x20000f24
 8006bc0:	20001d00 	.word	0x20001d00
 8006bc4:	20000f4c 	.word	0x20000f4c
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8006bc8:	4ac6      	ldr	r2, [pc, #792]	@ (8006ee4 <loadMenuTexts+0xda8>)
 8006bca:	4bc7      	ldr	r3, [pc, #796]	@ (8006ee8 <loadMenuTexts+0xdac>)
 8006bcc:	4614      	mov	r4, r2
 8006bce:	461d      	mov	r5, r3
 8006bd0:	6828      	ldr	r0, [r5, #0]
 8006bd2:	6869      	ldr	r1, [r5, #4]
 8006bd4:	68aa      	ldr	r2, [r5, #8]
 8006bd6:	68eb      	ldr	r3, [r5, #12]
 8006bd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bda:	7c2b      	ldrb	r3, [r5, #16]
 8006bdc:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8006bde:	4ac3      	ldr	r2, [pc, #780]	@ (8006eec <loadMenuTexts+0xdb0>)
 8006be0:	4bc3      	ldr	r3, [pc, #780]	@ (8006ef0 <loadMenuTexts+0xdb4>)
 8006be2:	4614      	mov	r4, r2
 8006be4:	461d      	mov	r5, r3
 8006be6:	6828      	ldr	r0, [r5, #0]
 8006be8:	6869      	ldr	r1, [r5, #4]
 8006bea:	68aa      	ldr	r2, [r5, #8]
 8006bec:	68eb      	ldr	r3, [r5, #12]
 8006bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bf0:	7c2b      	ldrb	r3, [r5, #16]
 8006bf2:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8006bf4:	4abf      	ldr	r2, [pc, #764]	@ (8006ef4 <loadMenuTexts+0xdb8>)
 8006bf6:	4bc0      	ldr	r3, [pc, #768]	@ (8006ef8 <loadMenuTexts+0xdbc>)
 8006bf8:	4614      	mov	r4, r2
 8006bfa:	461d      	mov	r5, r3
 8006bfc:	6828      	ldr	r0, [r5, #0]
 8006bfe:	6869      	ldr	r1, [r5, #4]
 8006c00:	68aa      	ldr	r2, [r5, #8]
 8006c02:	68eb      	ldr	r3, [r5, #12]
 8006c04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c06:	7c2b      	ldrb	r3, [r5, #16]
 8006c08:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 8006c0a:	4abc      	ldr	r2, [pc, #752]	@ (8006efc <loadMenuTexts+0xdc0>)
 8006c0c:	4bbc      	ldr	r3, [pc, #752]	@ (8006f00 <loadMenuTexts+0xdc4>)
 8006c0e:	4614      	mov	r4, r2
 8006c10:	461d      	mov	r5, r3
 8006c12:	6828      	ldr	r0, [r5, #0]
 8006c14:	6869      	ldr	r1, [r5, #4]
 8006c16:	68aa      	ldr	r2, [r5, #8]
 8006c18:	68eb      	ldr	r3, [r5, #12]
 8006c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c1c:	7c2b      	ldrb	r3, [r5, #16]
 8006c1e:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8006c20:	4ab8      	ldr	r2, [pc, #736]	@ (8006f04 <loadMenuTexts+0xdc8>)
 8006c22:	4bb9      	ldr	r3, [pc, #740]	@ (8006f08 <loadMenuTexts+0xdcc>)
 8006c24:	4614      	mov	r4, r2
 8006c26:	461d      	mov	r5, r3
 8006c28:	6828      	ldr	r0, [r5, #0]
 8006c2a:	6869      	ldr	r1, [r5, #4]
 8006c2c:	68aa      	ldr	r2, [r5, #8]
 8006c2e:	68eb      	ldr	r3, [r5, #12]
 8006c30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c32:	7c2b      	ldrb	r3, [r5, #16]
 8006c34:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 8006c36:	4ab5      	ldr	r2, [pc, #724]	@ (8006f0c <loadMenuTexts+0xdd0>)
 8006c38:	4bb5      	ldr	r3, [pc, #724]	@ (8006f10 <loadMenuTexts+0xdd4>)
 8006c3a:	4614      	mov	r4, r2
 8006c3c:	461d      	mov	r5, r3
 8006c3e:	6828      	ldr	r0, [r5, #0]
 8006c40:	6869      	ldr	r1, [r5, #4]
 8006c42:	68aa      	ldr	r2, [r5, #8]
 8006c44:	68eb      	ldr	r3, [r5, #12]
 8006c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c48:	7c2b      	ldrb	r3, [r5, #16]
 8006c4a:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 8006c4c:	4ab1      	ldr	r2, [pc, #708]	@ (8006f14 <loadMenuTexts+0xdd8>)
 8006c4e:	4bb2      	ldr	r3, [pc, #712]	@ (8006f18 <loadMenuTexts+0xddc>)
 8006c50:	4614      	mov	r4, r2
 8006c52:	461d      	mov	r5, r3
 8006c54:	6828      	ldr	r0, [r5, #0]
 8006c56:	6869      	ldr	r1, [r5, #4]
 8006c58:	68aa      	ldr	r2, [r5, #8]
 8006c5a:	68eb      	ldr	r3, [r5, #12]
 8006c5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c5e:	7c2b      	ldrb	r3, [r5, #16]
 8006c60:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8006c62:	4aae      	ldr	r2, [pc, #696]	@ (8006f1c <loadMenuTexts+0xde0>)
 8006c64:	4bae      	ldr	r3, [pc, #696]	@ (8006f20 <loadMenuTexts+0xde4>)
 8006c66:	4614      	mov	r4, r2
 8006c68:	461d      	mov	r5, r3
 8006c6a:	6828      	ldr	r0, [r5, #0]
 8006c6c:	6869      	ldr	r1, [r5, #4]
 8006c6e:	68aa      	ldr	r2, [r5, #8]
 8006c70:	68eb      	ldr	r3, [r5, #12]
 8006c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c74:	7c2b      	ldrb	r3, [r5, #16]
 8006c76:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8006c78:	4aaa      	ldr	r2, [pc, #680]	@ (8006f24 <loadMenuTexts+0xde8>)
 8006c7a:	4bab      	ldr	r3, [pc, #684]	@ (8006f28 <loadMenuTexts+0xdec>)
 8006c7c:	4614      	mov	r4, r2
 8006c7e:	461d      	mov	r5, r3
 8006c80:	6828      	ldr	r0, [r5, #0]
 8006c82:	6869      	ldr	r1, [r5, #4]
 8006c84:	68aa      	ldr	r2, [r5, #8]
 8006c86:	68eb      	ldr	r3, [r5, #12]
 8006c88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c8a:	7c2b      	ldrb	r3, [r5, #16]
 8006c8c:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8006c8e:	4aa7      	ldr	r2, [pc, #668]	@ (8006f2c <loadMenuTexts+0xdf0>)
 8006c90:	4ba7      	ldr	r3, [pc, #668]	@ (8006f30 <loadMenuTexts+0xdf4>)
 8006c92:	4614      	mov	r4, r2
 8006c94:	461d      	mov	r5, r3
 8006c96:	6828      	ldr	r0, [r5, #0]
 8006c98:	6869      	ldr	r1, [r5, #4]
 8006c9a:	68aa      	ldr	r2, [r5, #8]
 8006c9c:	68eb      	ldr	r3, [r5, #12]
 8006c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ca0:	7c2b      	ldrb	r3, [r5, #16]
 8006ca2:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8006ca4:	4aa3      	ldr	r2, [pc, #652]	@ (8006f34 <loadMenuTexts+0xdf8>)
 8006ca6:	4ba4      	ldr	r3, [pc, #656]	@ (8006f38 <loadMenuTexts+0xdfc>)
 8006ca8:	4614      	mov	r4, r2
 8006caa:	461d      	mov	r5, r3
 8006cac:	6828      	ldr	r0, [r5, #0]
 8006cae:	6869      	ldr	r1, [r5, #4]
 8006cb0:	68aa      	ldr	r2, [r5, #8]
 8006cb2:	68eb      	ldr	r3, [r5, #12]
 8006cb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cb6:	7c2b      	ldrb	r3, [r5, #16]
 8006cb8:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8006cba:	4aa0      	ldr	r2, [pc, #640]	@ (8006f3c <loadMenuTexts+0xe00>)
 8006cbc:	4ba0      	ldr	r3, [pc, #640]	@ (8006f40 <loadMenuTexts+0xe04>)
 8006cbe:	4614      	mov	r4, r2
 8006cc0:	461d      	mov	r5, r3
 8006cc2:	6828      	ldr	r0, [r5, #0]
 8006cc4:	6869      	ldr	r1, [r5, #4]
 8006cc6:	68aa      	ldr	r2, [r5, #8]
 8006cc8:	68eb      	ldr	r3, [r5, #12]
 8006cca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ccc:	7c2b      	ldrb	r3, [r5, #16]
 8006cce:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8006cd0:	4a9c      	ldr	r2, [pc, #624]	@ (8006f44 <loadMenuTexts+0xe08>)
 8006cd2:	4b9d      	ldr	r3, [pc, #628]	@ (8006f48 <loadMenuTexts+0xe0c>)
 8006cd4:	4614      	mov	r4, r2
 8006cd6:	461d      	mov	r5, r3
 8006cd8:	6828      	ldr	r0, [r5, #0]
 8006cda:	6869      	ldr	r1, [r5, #4]
 8006cdc:	68aa      	ldr	r2, [r5, #8]
 8006cde:	68eb      	ldr	r3, [r5, #12]
 8006ce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ce2:	7c2b      	ldrb	r3, [r5, #16]
 8006ce4:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8006ce6:	4a99      	ldr	r2, [pc, #612]	@ (8006f4c <loadMenuTexts+0xe10>)
 8006ce8:	4b99      	ldr	r3, [pc, #612]	@ (8006f50 <loadMenuTexts+0xe14>)
 8006cea:	4614      	mov	r4, r2
 8006cec:	461d      	mov	r5, r3
 8006cee:	6828      	ldr	r0, [r5, #0]
 8006cf0:	6869      	ldr	r1, [r5, #4]
 8006cf2:	68aa      	ldr	r2, [r5, #8]
 8006cf4:	68eb      	ldr	r3, [r5, #12]
 8006cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cf8:	7c2b      	ldrb	r3, [r5, #16]
 8006cfa:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8006cfc:	4a95      	ldr	r2, [pc, #596]	@ (8006f54 <loadMenuTexts+0xe18>)
 8006cfe:	4b96      	ldr	r3, [pc, #600]	@ (8006f58 <loadMenuTexts+0xe1c>)
 8006d00:	4614      	mov	r4, r2
 8006d02:	461d      	mov	r5, r3
 8006d04:	6828      	ldr	r0, [r5, #0]
 8006d06:	6869      	ldr	r1, [r5, #4]
 8006d08:	68aa      	ldr	r2, [r5, #8]
 8006d0a:	68eb      	ldr	r3, [r5, #12]
 8006d0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d0e:	7c2b      	ldrb	r3, [r5, #16]
 8006d10:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8006d12:	4a92      	ldr	r2, [pc, #584]	@ (8006f5c <loadMenuTexts+0xe20>)
 8006d14:	4b92      	ldr	r3, [pc, #584]	@ (8006f60 <loadMenuTexts+0xe24>)
 8006d16:	4614      	mov	r4, r2
 8006d18:	461d      	mov	r5, r3
 8006d1a:	6828      	ldr	r0, [r5, #0]
 8006d1c:	6869      	ldr	r1, [r5, #4]
 8006d1e:	68aa      	ldr	r2, [r5, #8]
 8006d20:	68eb      	ldr	r3, [r5, #12]
 8006d22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d24:	7c2b      	ldrb	r3, [r5, #16]
 8006d26:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8006d28:	4a8e      	ldr	r2, [pc, #568]	@ (8006f64 <loadMenuTexts+0xe28>)
 8006d2a:	4b8f      	ldr	r3, [pc, #572]	@ (8006f68 <loadMenuTexts+0xe2c>)
 8006d2c:	4614      	mov	r4, r2
 8006d2e:	461d      	mov	r5, r3
 8006d30:	6828      	ldr	r0, [r5, #0]
 8006d32:	6869      	ldr	r1, [r5, #4]
 8006d34:	68aa      	ldr	r2, [r5, #8]
 8006d36:	68eb      	ldr	r3, [r5, #12]
 8006d38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d3a:	7c2b      	ldrb	r3, [r5, #16]
 8006d3c:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8006d3e:	4a8b      	ldr	r2, [pc, #556]	@ (8006f6c <loadMenuTexts+0xe30>)
 8006d40:	4b8b      	ldr	r3, [pc, #556]	@ (8006f70 <loadMenuTexts+0xe34>)
 8006d42:	4614      	mov	r4, r2
 8006d44:	461d      	mov	r5, r3
 8006d46:	6828      	ldr	r0, [r5, #0]
 8006d48:	6869      	ldr	r1, [r5, #4]
 8006d4a:	68aa      	ldr	r2, [r5, #8]
 8006d4c:	68eb      	ldr	r3, [r5, #12]
 8006d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d50:	7c2b      	ldrb	r3, [r5, #16]
 8006d52:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8006d54:	4a87      	ldr	r2, [pc, #540]	@ (8006f74 <loadMenuTexts+0xe38>)
 8006d56:	4b88      	ldr	r3, [pc, #544]	@ (8006f78 <loadMenuTexts+0xe3c>)
 8006d58:	4614      	mov	r4, r2
 8006d5a:	461d      	mov	r5, r3
 8006d5c:	6828      	ldr	r0, [r5, #0]
 8006d5e:	6869      	ldr	r1, [r5, #4]
 8006d60:	68aa      	ldr	r2, [r5, #8]
 8006d62:	68eb      	ldr	r3, [r5, #12]
 8006d64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d66:	7c2b      	ldrb	r3, [r5, #16]
 8006d68:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8006d6a:	4a84      	ldr	r2, [pc, #528]	@ (8006f7c <loadMenuTexts+0xe40>)
 8006d6c:	4b84      	ldr	r3, [pc, #528]	@ (8006f80 <loadMenuTexts+0xe44>)
 8006d6e:	4614      	mov	r4, r2
 8006d70:	461d      	mov	r5, r3
 8006d72:	6828      	ldr	r0, [r5, #0]
 8006d74:	6869      	ldr	r1, [r5, #4]
 8006d76:	68aa      	ldr	r2, [r5, #8]
 8006d78:	68eb      	ldr	r3, [r5, #12]
 8006d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d7c:	7c2b      	ldrb	r3, [r5, #16]
 8006d7e:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8006d80:	4a80      	ldr	r2, [pc, #512]	@ (8006f84 <loadMenuTexts+0xe48>)
 8006d82:	4b81      	ldr	r3, [pc, #516]	@ (8006f88 <loadMenuTexts+0xe4c>)
 8006d84:	4614      	mov	r4, r2
 8006d86:	461d      	mov	r5, r3
 8006d88:	6828      	ldr	r0, [r5, #0]
 8006d8a:	6869      	ldr	r1, [r5, #4]
 8006d8c:	68aa      	ldr	r2, [r5, #8]
 8006d8e:	68eb      	ldr	r3, [r5, #12]
 8006d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d92:	7c2b      	ldrb	r3, [r5, #16]
 8006d94:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8006d96:	4a7d      	ldr	r2, [pc, #500]	@ (8006f8c <loadMenuTexts+0xe50>)
 8006d98:	4b7d      	ldr	r3, [pc, #500]	@ (8006f90 <loadMenuTexts+0xe54>)
 8006d9a:	4614      	mov	r4, r2
 8006d9c:	461d      	mov	r5, r3
 8006d9e:	6828      	ldr	r0, [r5, #0]
 8006da0:	6869      	ldr	r1, [r5, #4]
 8006da2:	68aa      	ldr	r2, [r5, #8]
 8006da4:	68eb      	ldr	r3, [r5, #12]
 8006da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006da8:	7c2b      	ldrb	r3, [r5, #16]
 8006daa:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8006dac:	4a79      	ldr	r2, [pc, #484]	@ (8006f94 <loadMenuTexts+0xe58>)
 8006dae:	4b7a      	ldr	r3, [pc, #488]	@ (8006f98 <loadMenuTexts+0xe5c>)
 8006db0:	4614      	mov	r4, r2
 8006db2:	461d      	mov	r5, r3
 8006db4:	6828      	ldr	r0, [r5, #0]
 8006db6:	6869      	ldr	r1, [r5, #4]
 8006db8:	68aa      	ldr	r2, [r5, #8]
 8006dba:	68eb      	ldr	r3, [r5, #12]
 8006dbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dbe:	7c2b      	ldrb	r3, [r5, #16]
 8006dc0:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8006dc2:	4a76      	ldr	r2, [pc, #472]	@ (8006f9c <loadMenuTexts+0xe60>)
 8006dc4:	4b76      	ldr	r3, [pc, #472]	@ (8006fa0 <loadMenuTexts+0xe64>)
 8006dc6:	4614      	mov	r4, r2
 8006dc8:	461d      	mov	r5, r3
 8006dca:	6828      	ldr	r0, [r5, #0]
 8006dcc:	6869      	ldr	r1, [r5, #4]
 8006dce:	68aa      	ldr	r2, [r5, #8]
 8006dd0:	68eb      	ldr	r3, [r5, #12]
 8006dd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dd4:	7c2b      	ldrb	r3, [r5, #16]
 8006dd6:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8006dd8:	4a72      	ldr	r2, [pc, #456]	@ (8006fa4 <loadMenuTexts+0xe68>)
 8006dda:	4b73      	ldr	r3, [pc, #460]	@ (8006fa8 <loadMenuTexts+0xe6c>)
 8006ddc:	4614      	mov	r4, r2
 8006dde:	461d      	mov	r5, r3
 8006de0:	6828      	ldr	r0, [r5, #0]
 8006de2:	6869      	ldr	r1, [r5, #4]
 8006de4:	68aa      	ldr	r2, [r5, #8]
 8006de6:	68eb      	ldr	r3, [r5, #12]
 8006de8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dea:	7c2b      	ldrb	r3, [r5, #16]
 8006dec:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8006dee:	4a6f      	ldr	r2, [pc, #444]	@ (8006fac <loadMenuTexts+0xe70>)
 8006df0:	4b6f      	ldr	r3, [pc, #444]	@ (8006fb0 <loadMenuTexts+0xe74>)
 8006df2:	4614      	mov	r4, r2
 8006df4:	461d      	mov	r5, r3
 8006df6:	6828      	ldr	r0, [r5, #0]
 8006df8:	6869      	ldr	r1, [r5, #4]
 8006dfa:	68aa      	ldr	r2, [r5, #8]
 8006dfc:	68eb      	ldr	r3, [r5, #12]
 8006dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e00:	7c2b      	ldrb	r3, [r5, #16]
 8006e02:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8006e04:	4a6b      	ldr	r2, [pc, #428]	@ (8006fb4 <loadMenuTexts+0xe78>)
 8006e06:	4b6c      	ldr	r3, [pc, #432]	@ (8006fb8 <loadMenuTexts+0xe7c>)
 8006e08:	4614      	mov	r4, r2
 8006e0a:	461d      	mov	r5, r3
 8006e0c:	6828      	ldr	r0, [r5, #0]
 8006e0e:	6869      	ldr	r1, [r5, #4]
 8006e10:	68aa      	ldr	r2, [r5, #8]
 8006e12:	68eb      	ldr	r3, [r5, #12]
 8006e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e16:	7c2b      	ldrb	r3, [r5, #16]
 8006e18:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8006e1a:	4a68      	ldr	r2, [pc, #416]	@ (8006fbc <loadMenuTexts+0xe80>)
 8006e1c:	4b68      	ldr	r3, [pc, #416]	@ (8006fc0 <loadMenuTexts+0xe84>)
 8006e1e:	4614      	mov	r4, r2
 8006e20:	461d      	mov	r5, r3
 8006e22:	6828      	ldr	r0, [r5, #0]
 8006e24:	6869      	ldr	r1, [r5, #4]
 8006e26:	68aa      	ldr	r2, [r5, #8]
 8006e28:	68eb      	ldr	r3, [r5, #12]
 8006e2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e2c:	7c2b      	ldrb	r3, [r5, #16]
 8006e2e:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8006e30:	4a64      	ldr	r2, [pc, #400]	@ (8006fc4 <loadMenuTexts+0xe88>)
 8006e32:	4b65      	ldr	r3, [pc, #404]	@ (8006fc8 <loadMenuTexts+0xe8c>)
 8006e34:	4614      	mov	r4, r2
 8006e36:	461d      	mov	r5, r3
 8006e38:	6828      	ldr	r0, [r5, #0]
 8006e3a:	6869      	ldr	r1, [r5, #4]
 8006e3c:	68aa      	ldr	r2, [r5, #8]
 8006e3e:	68eb      	ldr	r3, [r5, #12]
 8006e40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e42:	7c2b      	ldrb	r3, [r5, #16]
 8006e44:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 8006e46:	4a61      	ldr	r2, [pc, #388]	@ (8006fcc <loadMenuTexts+0xe90>)
 8006e48:	4b61      	ldr	r3, [pc, #388]	@ (8006fd0 <loadMenuTexts+0xe94>)
 8006e4a:	4614      	mov	r4, r2
 8006e4c:	461d      	mov	r5, r3
 8006e4e:	6828      	ldr	r0, [r5, #0]
 8006e50:	6869      	ldr	r1, [r5, #4]
 8006e52:	68aa      	ldr	r2, [r5, #8]
 8006e54:	68eb      	ldr	r3, [r5, #12]
 8006e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e58:	7c2b      	ldrb	r3, [r5, #16]
 8006e5a:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8006e5c:	4a5d      	ldr	r2, [pc, #372]	@ (8006fd4 <loadMenuTexts+0xe98>)
 8006e5e:	4b5e      	ldr	r3, [pc, #376]	@ (8006fd8 <loadMenuTexts+0xe9c>)
 8006e60:	4614      	mov	r4, r2
 8006e62:	461d      	mov	r5, r3
 8006e64:	6828      	ldr	r0, [r5, #0]
 8006e66:	6869      	ldr	r1, [r5, #4]
 8006e68:	68aa      	ldr	r2, [r5, #8]
 8006e6a:	68eb      	ldr	r3, [r5, #12]
 8006e6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e6e:	7c2b      	ldrb	r3, [r5, #16]
 8006e70:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8006e72:	4a5a      	ldr	r2, [pc, #360]	@ (8006fdc <loadMenuTexts+0xea0>)
 8006e74:	4b5a      	ldr	r3, [pc, #360]	@ (8006fe0 <loadMenuTexts+0xea4>)
 8006e76:	4614      	mov	r4, r2
 8006e78:	461d      	mov	r5, r3
 8006e7a:	6828      	ldr	r0, [r5, #0]
 8006e7c:	6869      	ldr	r1, [r5, #4]
 8006e7e:	68aa      	ldr	r2, [r5, #8]
 8006e80:	68eb      	ldr	r3, [r5, #12]
 8006e82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e84:	7c2b      	ldrb	r3, [r5, #16]
 8006e86:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 8006e88:	4a56      	ldr	r2, [pc, #344]	@ (8006fe4 <loadMenuTexts+0xea8>)
 8006e8a:	4b57      	ldr	r3, [pc, #348]	@ (8006fe8 <loadMenuTexts+0xeac>)
 8006e8c:	4614      	mov	r4, r2
 8006e8e:	461d      	mov	r5, r3
 8006e90:	6828      	ldr	r0, [r5, #0]
 8006e92:	6869      	ldr	r1, [r5, #4]
 8006e94:	68aa      	ldr	r2, [r5, #8]
 8006e96:	68eb      	ldr	r3, [r5, #12]
 8006e98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e9a:	7c2b      	ldrb	r3, [r5, #16]
 8006e9c:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8006e9e:	4a53      	ldr	r2, [pc, #332]	@ (8006fec <loadMenuTexts+0xeb0>)
 8006ea0:	4b53      	ldr	r3, [pc, #332]	@ (8006ff0 <loadMenuTexts+0xeb4>)
 8006ea2:	4614      	mov	r4, r2
 8006ea4:	461d      	mov	r5, r3
 8006ea6:	6828      	ldr	r0, [r5, #0]
 8006ea8:	6869      	ldr	r1, [r5, #4]
 8006eaa:	68aa      	ldr	r2, [r5, #8]
 8006eac:	68eb      	ldr	r3, [r5, #12]
 8006eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eb0:	7c2b      	ldrb	r3, [r5, #16]
 8006eb2:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8006eb4:	4a4f      	ldr	r2, [pc, #316]	@ (8006ff4 <loadMenuTexts+0xeb8>)
 8006eb6:	4b50      	ldr	r3, [pc, #320]	@ (8006ff8 <loadMenuTexts+0xebc>)
 8006eb8:	4614      	mov	r4, r2
 8006eba:	461d      	mov	r5, r3
 8006ebc:	6828      	ldr	r0, [r5, #0]
 8006ebe:	6869      	ldr	r1, [r5, #4]
 8006ec0:	68aa      	ldr	r2, [r5, #8]
 8006ec2:	68eb      	ldr	r3, [r5, #12]
 8006ec4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ec6:	7c2b      	ldrb	r3, [r5, #16]
 8006ec8:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8006eca:	4a4c      	ldr	r2, [pc, #304]	@ (8006ffc <loadMenuTexts+0xec0>)
 8006ecc:	4b4c      	ldr	r3, [pc, #304]	@ (8007000 <loadMenuTexts+0xec4>)
 8006ece:	4614      	mov	r4, r2
 8006ed0:	461d      	mov	r5, r3
 8006ed2:	6828      	ldr	r0, [r5, #0]
 8006ed4:	6869      	ldr	r1, [r5, #4]
 8006ed6:	68aa      	ldr	r2, [r5, #8]
 8006ed8:	68eb      	ldr	r3, [r5, #12]
 8006eda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006edc:	7c2b      	ldrb	r3, [r5, #16]
 8006ede:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8006ee0:	4a48      	ldr	r2, [pc, #288]	@ (8007004 <loadMenuTexts+0xec8>)
 8006ee2:	e091      	b.n	8007008 <loadMenuTexts+0xecc>
 8006ee4:	20001620 	.word	0x20001620
 8006ee8:	20000704 	.word	0x20000704
 8006eec:	20001634 	.word	0x20001634
 8006ef0:	20000718 	.word	0x20000718
 8006ef4:	20001648 	.word	0x20001648
 8006ef8:	2000072c 	.word	0x2000072c
 8006efc:	2000165c 	.word	0x2000165c
 8006f00:	20000740 	.word	0x20000740
 8006f04:	20001670 	.word	0x20001670
 8006f08:	20000754 	.word	0x20000754
 8006f0c:	20001684 	.word	0x20001684
 8006f10:	20000768 	.word	0x20000768
 8006f14:	20001698 	.word	0x20001698
 8006f18:	2000077c 	.word	0x2000077c
 8006f1c:	200016ac 	.word	0x200016ac
 8006f20:	20000790 	.word	0x20000790
 8006f24:	200016c0 	.word	0x200016c0
 8006f28:	200007a4 	.word	0x200007a4
 8006f2c:	200016d4 	.word	0x200016d4
 8006f30:	200007b8 	.word	0x200007b8
 8006f34:	200016e8 	.word	0x200016e8
 8006f38:	200007cc 	.word	0x200007cc
 8006f3c:	200016fc 	.word	0x200016fc
 8006f40:	200007e0 	.word	0x200007e0
 8006f44:	20001710 	.word	0x20001710
 8006f48:	200007f4 	.word	0x200007f4
 8006f4c:	20001724 	.word	0x20001724
 8006f50:	20000808 	.word	0x20000808
 8006f54:	20001738 	.word	0x20001738
 8006f58:	2000081c 	.word	0x2000081c
 8006f5c:	2000174c 	.word	0x2000174c
 8006f60:	20000830 	.word	0x20000830
 8006f64:	20001760 	.word	0x20001760
 8006f68:	20000844 	.word	0x20000844
 8006f6c:	20001774 	.word	0x20001774
 8006f70:	20000858 	.word	0x20000858
 8006f74:	20001788 	.word	0x20001788
 8006f78:	2000086c 	.word	0x2000086c
 8006f7c:	2000179c 	.word	0x2000179c
 8006f80:	20000880 	.word	0x20000880
 8006f84:	200017b0 	.word	0x200017b0
 8006f88:	20000894 	.word	0x20000894
 8006f8c:	200017c4 	.word	0x200017c4
 8006f90:	200008a8 	.word	0x200008a8
 8006f94:	200017d8 	.word	0x200017d8
 8006f98:	200008bc 	.word	0x200008bc
 8006f9c:	200017ec 	.word	0x200017ec
 8006fa0:	200008d0 	.word	0x200008d0
 8006fa4:	20001800 	.word	0x20001800
 8006fa8:	200008e4 	.word	0x200008e4
 8006fac:	20001814 	.word	0x20001814
 8006fb0:	200008f8 	.word	0x200008f8
 8006fb4:	20001828 	.word	0x20001828
 8006fb8:	2000090c 	.word	0x2000090c
 8006fbc:	2000183c 	.word	0x2000183c
 8006fc0:	20000920 	.word	0x20000920
 8006fc4:	20001850 	.word	0x20001850
 8006fc8:	20000934 	.word	0x20000934
 8006fcc:	20001864 	.word	0x20001864
 8006fd0:	20000948 	.word	0x20000948
 8006fd4:	20001878 	.word	0x20001878
 8006fd8:	2000095c 	.word	0x2000095c
 8006fdc:	2000188c 	.word	0x2000188c
 8006fe0:	20000970 	.word	0x20000970
 8006fe4:	200018a0 	.word	0x200018a0
 8006fe8:	20000984 	.word	0x20000984
 8006fec:	200018b4 	.word	0x200018b4
 8006ff0:	20000998 	.word	0x20000998
 8006ff4:	200018c8 	.word	0x200018c8
 8006ff8:	200009ac 	.word	0x200009ac
 8006ffc:	200018dc 	.word	0x200018dc
 8007000:	200009c0 	.word	0x200009c0
 8007004:	200018f0 	.word	0x200018f0
 8007008:	4bc7      	ldr	r3, [pc, #796]	@ (8007328 <loadMenuTexts+0x11ec>)
 800700a:	4614      	mov	r4, r2
 800700c:	461d      	mov	r5, r3
 800700e:	6828      	ldr	r0, [r5, #0]
 8007010:	6869      	ldr	r1, [r5, #4]
 8007012:	68aa      	ldr	r2, [r5, #8]
 8007014:	68eb      	ldr	r3, [r5, #12]
 8007016:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007018:	7c2b      	ldrb	r3, [r5, #16]
 800701a:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 800701c:	4ac3      	ldr	r2, [pc, #780]	@ (800732c <loadMenuTexts+0x11f0>)
 800701e:	4bc4      	ldr	r3, [pc, #784]	@ (8007330 <loadMenuTexts+0x11f4>)
 8007020:	4614      	mov	r4, r2
 8007022:	461d      	mov	r5, r3
 8007024:	6828      	ldr	r0, [r5, #0]
 8007026:	6869      	ldr	r1, [r5, #4]
 8007028:	68aa      	ldr	r2, [r5, #8]
 800702a:	68eb      	ldr	r3, [r5, #12]
 800702c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800702e:	7c2b      	ldrb	r3, [r5, #16]
 8007030:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8007032:	4ac0      	ldr	r2, [pc, #768]	@ (8007334 <loadMenuTexts+0x11f8>)
 8007034:	4bc0      	ldr	r3, [pc, #768]	@ (8007338 <loadMenuTexts+0x11fc>)
 8007036:	4614      	mov	r4, r2
 8007038:	461d      	mov	r5, r3
 800703a:	6828      	ldr	r0, [r5, #0]
 800703c:	6869      	ldr	r1, [r5, #4]
 800703e:	68aa      	ldr	r2, [r5, #8]
 8007040:	68eb      	ldr	r3, [r5, #12]
 8007042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007044:	7c2b      	ldrb	r3, [r5, #16]
 8007046:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8007048:	4abc      	ldr	r2, [pc, #752]	@ (800733c <loadMenuTexts+0x1200>)
 800704a:	4bbd      	ldr	r3, [pc, #756]	@ (8007340 <loadMenuTexts+0x1204>)
 800704c:	4614      	mov	r4, r2
 800704e:	461d      	mov	r5, r3
 8007050:	6828      	ldr	r0, [r5, #0]
 8007052:	6869      	ldr	r1, [r5, #4]
 8007054:	68aa      	ldr	r2, [r5, #8]
 8007056:	68eb      	ldr	r3, [r5, #12]
 8007058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800705a:	7c2b      	ldrb	r3, [r5, #16]
 800705c:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 800705e:	4ab9      	ldr	r2, [pc, #740]	@ (8007344 <loadMenuTexts+0x1208>)
 8007060:	4bb9      	ldr	r3, [pc, #740]	@ (8007348 <loadMenuTexts+0x120c>)
 8007062:	4614      	mov	r4, r2
 8007064:	461d      	mov	r5, r3
 8007066:	6828      	ldr	r0, [r5, #0]
 8007068:	6869      	ldr	r1, [r5, #4]
 800706a:	68aa      	ldr	r2, [r5, #8]
 800706c:	68eb      	ldr	r3, [r5, #12]
 800706e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007070:	7c2b      	ldrb	r3, [r5, #16]
 8007072:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8007074:	4ab5      	ldr	r2, [pc, #724]	@ (800734c <loadMenuTexts+0x1210>)
 8007076:	4bb6      	ldr	r3, [pc, #728]	@ (8007350 <loadMenuTexts+0x1214>)
 8007078:	4614      	mov	r4, r2
 800707a:	461d      	mov	r5, r3
 800707c:	6828      	ldr	r0, [r5, #0]
 800707e:	6869      	ldr	r1, [r5, #4]
 8007080:	68aa      	ldr	r2, [r5, #8]
 8007082:	68eb      	ldr	r3, [r5, #12]
 8007084:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007086:	7c2b      	ldrb	r3, [r5, #16]
 8007088:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 800708a:	4ab2      	ldr	r2, [pc, #712]	@ (8007354 <loadMenuTexts+0x1218>)
 800708c:	4bb2      	ldr	r3, [pc, #712]	@ (8007358 <loadMenuTexts+0x121c>)
 800708e:	4614      	mov	r4, r2
 8007090:	461d      	mov	r5, r3
 8007092:	6828      	ldr	r0, [r5, #0]
 8007094:	6869      	ldr	r1, [r5, #4]
 8007096:	68aa      	ldr	r2, [r5, #8]
 8007098:	68eb      	ldr	r3, [r5, #12]
 800709a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800709c:	7c2b      	ldrb	r3, [r5, #16]
 800709e:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 80070a0:	4aae      	ldr	r2, [pc, #696]	@ (800735c <loadMenuTexts+0x1220>)
 80070a2:	4baf      	ldr	r3, [pc, #700]	@ (8007360 <loadMenuTexts+0x1224>)
 80070a4:	4614      	mov	r4, r2
 80070a6:	461d      	mov	r5, r3
 80070a8:	6828      	ldr	r0, [r5, #0]
 80070aa:	6869      	ldr	r1, [r5, #4]
 80070ac:	68aa      	ldr	r2, [r5, #8]
 80070ae:	68eb      	ldr	r3, [r5, #12]
 80070b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070b2:	7c2b      	ldrb	r3, [r5, #16]
 80070b4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 80070b6:	4aab      	ldr	r2, [pc, #684]	@ (8007364 <loadMenuTexts+0x1228>)
 80070b8:	4bab      	ldr	r3, [pc, #684]	@ (8007368 <loadMenuTexts+0x122c>)
 80070ba:	4614      	mov	r4, r2
 80070bc:	461d      	mov	r5, r3
 80070be:	6828      	ldr	r0, [r5, #0]
 80070c0:	6869      	ldr	r1, [r5, #4]
 80070c2:	68aa      	ldr	r2, [r5, #8]
 80070c4:	68eb      	ldr	r3, [r5, #12]
 80070c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070c8:	7c2b      	ldrb	r3, [r5, #16]
 80070ca:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 80070cc:	4aa7      	ldr	r2, [pc, #668]	@ (800736c <loadMenuTexts+0x1230>)
 80070ce:	4ba8      	ldr	r3, [pc, #672]	@ (8007370 <loadMenuTexts+0x1234>)
 80070d0:	4614      	mov	r4, r2
 80070d2:	461d      	mov	r5, r3
 80070d4:	6828      	ldr	r0, [r5, #0]
 80070d6:	6869      	ldr	r1, [r5, #4]
 80070d8:	68aa      	ldr	r2, [r5, #8]
 80070da:	68eb      	ldr	r3, [r5, #12]
 80070dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070de:	7c2b      	ldrb	r3, [r5, #16]
 80070e0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 80070e2:	4aa4      	ldr	r2, [pc, #656]	@ (8007374 <loadMenuTexts+0x1238>)
 80070e4:	4ba4      	ldr	r3, [pc, #656]	@ (8007378 <loadMenuTexts+0x123c>)
 80070e6:	4614      	mov	r4, r2
 80070e8:	461d      	mov	r5, r3
 80070ea:	6828      	ldr	r0, [r5, #0]
 80070ec:	6869      	ldr	r1, [r5, #4]
 80070ee:	68aa      	ldr	r2, [r5, #8]
 80070f0:	68eb      	ldr	r3, [r5, #12]
 80070f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070f4:	7c2b      	ldrb	r3, [r5, #16]
 80070f6:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 80070f8:	4aa0      	ldr	r2, [pc, #640]	@ (800737c <loadMenuTexts+0x1240>)
 80070fa:	4ba1      	ldr	r3, [pc, #644]	@ (8007380 <loadMenuTexts+0x1244>)
 80070fc:	4614      	mov	r4, r2
 80070fe:	461d      	mov	r5, r3
 8007100:	6828      	ldr	r0, [r5, #0]
 8007102:	6869      	ldr	r1, [r5, #4]
 8007104:	68aa      	ldr	r2, [r5, #8]
 8007106:	68eb      	ldr	r3, [r5, #12]
 8007108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800710a:	7c2b      	ldrb	r3, [r5, #16]
 800710c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 800710e:	4a9d      	ldr	r2, [pc, #628]	@ (8007384 <loadMenuTexts+0x1248>)
 8007110:	4b9d      	ldr	r3, [pc, #628]	@ (8007388 <loadMenuTexts+0x124c>)
 8007112:	4614      	mov	r4, r2
 8007114:	461d      	mov	r5, r3
 8007116:	6828      	ldr	r0, [r5, #0]
 8007118:	6869      	ldr	r1, [r5, #4]
 800711a:	68aa      	ldr	r2, [r5, #8]
 800711c:	68eb      	ldr	r3, [r5, #12]
 800711e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007120:	7c2b      	ldrb	r3, [r5, #16]
 8007122:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8007124:	4a99      	ldr	r2, [pc, #612]	@ (800738c <loadMenuTexts+0x1250>)
 8007126:	4b9a      	ldr	r3, [pc, #616]	@ (8007390 <loadMenuTexts+0x1254>)
 8007128:	4614      	mov	r4, r2
 800712a:	461d      	mov	r5, r3
 800712c:	6828      	ldr	r0, [r5, #0]
 800712e:	6869      	ldr	r1, [r5, #4]
 8007130:	68aa      	ldr	r2, [r5, #8]
 8007132:	68eb      	ldr	r3, [r5, #12]
 8007134:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007136:	7c2b      	ldrb	r3, [r5, #16]
 8007138:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 800713a:	4a96      	ldr	r2, [pc, #600]	@ (8007394 <loadMenuTexts+0x1258>)
 800713c:	4b96      	ldr	r3, [pc, #600]	@ (8007398 <loadMenuTexts+0x125c>)
 800713e:	4614      	mov	r4, r2
 8007140:	461d      	mov	r5, r3
 8007142:	6828      	ldr	r0, [r5, #0]
 8007144:	6869      	ldr	r1, [r5, #4]
 8007146:	68aa      	ldr	r2, [r5, #8]
 8007148:	68eb      	ldr	r3, [r5, #12]
 800714a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800714c:	7c2b      	ldrb	r3, [r5, #16]
 800714e:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8007150:	4a92      	ldr	r2, [pc, #584]	@ (800739c <loadMenuTexts+0x1260>)
 8007152:	4b93      	ldr	r3, [pc, #588]	@ (80073a0 <loadMenuTexts+0x1264>)
 8007154:	4614      	mov	r4, r2
 8007156:	461d      	mov	r5, r3
 8007158:	6828      	ldr	r0, [r5, #0]
 800715a:	6869      	ldr	r1, [r5, #4]
 800715c:	68aa      	ldr	r2, [r5, #8]
 800715e:	68eb      	ldr	r3, [r5, #12]
 8007160:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007162:	7c2b      	ldrb	r3, [r5, #16]
 8007164:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8007166:	4a8f      	ldr	r2, [pc, #572]	@ (80073a4 <loadMenuTexts+0x1268>)
 8007168:	4b8f      	ldr	r3, [pc, #572]	@ (80073a8 <loadMenuTexts+0x126c>)
 800716a:	4614      	mov	r4, r2
 800716c:	461d      	mov	r5, r3
 800716e:	6828      	ldr	r0, [r5, #0]
 8007170:	6869      	ldr	r1, [r5, #4]
 8007172:	68aa      	ldr	r2, [r5, #8]
 8007174:	68eb      	ldr	r3, [r5, #12]
 8007176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007178:	7c2b      	ldrb	r3, [r5, #16]
 800717a:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 800717c:	4a8b      	ldr	r2, [pc, #556]	@ (80073ac <loadMenuTexts+0x1270>)
 800717e:	4b8c      	ldr	r3, [pc, #560]	@ (80073b0 <loadMenuTexts+0x1274>)
 8007180:	4614      	mov	r4, r2
 8007182:	461d      	mov	r5, r3
 8007184:	6828      	ldr	r0, [r5, #0]
 8007186:	6869      	ldr	r1, [r5, #4]
 8007188:	68aa      	ldr	r2, [r5, #8]
 800718a:	68eb      	ldr	r3, [r5, #12]
 800718c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800718e:	7c2b      	ldrb	r3, [r5, #16]
 8007190:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 8007192:	4a88      	ldr	r2, [pc, #544]	@ (80073b4 <loadMenuTexts+0x1278>)
 8007194:	4b88      	ldr	r3, [pc, #544]	@ (80073b8 <loadMenuTexts+0x127c>)
 8007196:	4614      	mov	r4, r2
 8007198:	461d      	mov	r5, r3
 800719a:	6828      	ldr	r0, [r5, #0]
 800719c:	6869      	ldr	r1, [r5, #4]
 800719e:	68aa      	ldr	r2, [r5, #8]
 80071a0:	68eb      	ldr	r3, [r5, #12]
 80071a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071a4:	7c2b      	ldrb	r3, [r5, #16]
 80071a6:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 80071a8:	4a84      	ldr	r2, [pc, #528]	@ (80073bc <loadMenuTexts+0x1280>)
 80071aa:	4b85      	ldr	r3, [pc, #532]	@ (80073c0 <loadMenuTexts+0x1284>)
 80071ac:	4614      	mov	r4, r2
 80071ae:	461d      	mov	r5, r3
 80071b0:	6828      	ldr	r0, [r5, #0]
 80071b2:	6869      	ldr	r1, [r5, #4]
 80071b4:	68aa      	ldr	r2, [r5, #8]
 80071b6:	68eb      	ldr	r3, [r5, #12]
 80071b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071ba:	7c2b      	ldrb	r3, [r5, #16]
 80071bc:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 80071be:	4a81      	ldr	r2, [pc, #516]	@ (80073c4 <loadMenuTexts+0x1288>)
 80071c0:	4b81      	ldr	r3, [pc, #516]	@ (80073c8 <loadMenuTexts+0x128c>)
 80071c2:	4614      	mov	r4, r2
 80071c4:	461d      	mov	r5, r3
 80071c6:	6828      	ldr	r0, [r5, #0]
 80071c8:	6869      	ldr	r1, [r5, #4]
 80071ca:	68aa      	ldr	r2, [r5, #8]
 80071cc:	68eb      	ldr	r3, [r5, #12]
 80071ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071d0:	7c2b      	ldrb	r3, [r5, #16]
 80071d2:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 80071d4:	4a7d      	ldr	r2, [pc, #500]	@ (80073cc <loadMenuTexts+0x1290>)
 80071d6:	4b7e      	ldr	r3, [pc, #504]	@ (80073d0 <loadMenuTexts+0x1294>)
 80071d8:	4614      	mov	r4, r2
 80071da:	461d      	mov	r5, r3
 80071dc:	6828      	ldr	r0, [r5, #0]
 80071de:	6869      	ldr	r1, [r5, #4]
 80071e0:	68aa      	ldr	r2, [r5, #8]
 80071e2:	68eb      	ldr	r3, [r5, #12]
 80071e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071e6:	7c2b      	ldrb	r3, [r5, #16]
 80071e8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 80071ea:	4a7a      	ldr	r2, [pc, #488]	@ (80073d4 <loadMenuTexts+0x1298>)
 80071ec:	4b7a      	ldr	r3, [pc, #488]	@ (80073d8 <loadMenuTexts+0x129c>)
 80071ee:	4614      	mov	r4, r2
 80071f0:	461d      	mov	r5, r3
 80071f2:	6828      	ldr	r0, [r5, #0]
 80071f4:	6869      	ldr	r1, [r5, #4]
 80071f6:	68aa      	ldr	r2, [r5, #8]
 80071f8:	68eb      	ldr	r3, [r5, #12]
 80071fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071fc:	7c2b      	ldrb	r3, [r5, #16]
 80071fe:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8007200:	4a76      	ldr	r2, [pc, #472]	@ (80073dc <loadMenuTexts+0x12a0>)
 8007202:	4b77      	ldr	r3, [pc, #476]	@ (80073e0 <loadMenuTexts+0x12a4>)
 8007204:	4614      	mov	r4, r2
 8007206:	461d      	mov	r5, r3
 8007208:	6828      	ldr	r0, [r5, #0]
 800720a:	6869      	ldr	r1, [r5, #4]
 800720c:	68aa      	ldr	r2, [r5, #8]
 800720e:	68eb      	ldr	r3, [r5, #12]
 8007210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007212:	7c2b      	ldrb	r3, [r5, #16]
 8007214:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8007216:	4a73      	ldr	r2, [pc, #460]	@ (80073e4 <loadMenuTexts+0x12a8>)
 8007218:	4b73      	ldr	r3, [pc, #460]	@ (80073e8 <loadMenuTexts+0x12ac>)
 800721a:	4614      	mov	r4, r2
 800721c:	461d      	mov	r5, r3
 800721e:	6828      	ldr	r0, [r5, #0]
 8007220:	6869      	ldr	r1, [r5, #4]
 8007222:	68aa      	ldr	r2, [r5, #8]
 8007224:	68eb      	ldr	r3, [r5, #12]
 8007226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007228:	7c2b      	ldrb	r3, [r5, #16]
 800722a:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 800722c:	4a6f      	ldr	r2, [pc, #444]	@ (80073ec <loadMenuTexts+0x12b0>)
 800722e:	4b70      	ldr	r3, [pc, #448]	@ (80073f0 <loadMenuTexts+0x12b4>)
 8007230:	4614      	mov	r4, r2
 8007232:	461d      	mov	r5, r3
 8007234:	6828      	ldr	r0, [r5, #0]
 8007236:	6869      	ldr	r1, [r5, #4]
 8007238:	68aa      	ldr	r2, [r5, #8]
 800723a:	68eb      	ldr	r3, [r5, #12]
 800723c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800723e:	7c2b      	ldrb	r3, [r5, #16]
 8007240:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 8007242:	4a6c      	ldr	r2, [pc, #432]	@ (80073f4 <loadMenuTexts+0x12b8>)
 8007244:	4b6c      	ldr	r3, [pc, #432]	@ (80073f8 <loadMenuTexts+0x12bc>)
 8007246:	4614      	mov	r4, r2
 8007248:	461d      	mov	r5, r3
 800724a:	6828      	ldr	r0, [r5, #0]
 800724c:	6869      	ldr	r1, [r5, #4]
 800724e:	68aa      	ldr	r2, [r5, #8]
 8007250:	68eb      	ldr	r3, [r5, #12]
 8007252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007254:	7c2b      	ldrb	r3, [r5, #16]
 8007256:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8007258:	4a68      	ldr	r2, [pc, #416]	@ (80073fc <loadMenuTexts+0x12c0>)
 800725a:	4b69      	ldr	r3, [pc, #420]	@ (8007400 <loadMenuTexts+0x12c4>)
 800725c:	4614      	mov	r4, r2
 800725e:	461d      	mov	r5, r3
 8007260:	6828      	ldr	r0, [r5, #0]
 8007262:	6869      	ldr	r1, [r5, #4]
 8007264:	68aa      	ldr	r2, [r5, #8]
 8007266:	68eb      	ldr	r3, [r5, #12]
 8007268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800726a:	7c2b      	ldrb	r3, [r5, #16]
 800726c:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 800726e:	4a65      	ldr	r2, [pc, #404]	@ (8007404 <loadMenuTexts+0x12c8>)
 8007270:	4b65      	ldr	r3, [pc, #404]	@ (8007408 <loadMenuTexts+0x12cc>)
 8007272:	4614      	mov	r4, r2
 8007274:	461d      	mov	r5, r3
 8007276:	6828      	ldr	r0, [r5, #0]
 8007278:	6869      	ldr	r1, [r5, #4]
 800727a:	68aa      	ldr	r2, [r5, #8]
 800727c:	68eb      	ldr	r3, [r5, #12]
 800727e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007280:	7c2b      	ldrb	r3, [r5, #16]
 8007282:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 8007284:	4a61      	ldr	r2, [pc, #388]	@ (800740c <loadMenuTexts+0x12d0>)
 8007286:	4b62      	ldr	r3, [pc, #392]	@ (8007410 <loadMenuTexts+0x12d4>)
 8007288:	4614      	mov	r4, r2
 800728a:	461d      	mov	r5, r3
 800728c:	6828      	ldr	r0, [r5, #0]
 800728e:	6869      	ldr	r1, [r5, #4]
 8007290:	68aa      	ldr	r2, [r5, #8]
 8007292:	68eb      	ldr	r3, [r5, #12]
 8007294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007296:	7c2b      	ldrb	r3, [r5, #16]
 8007298:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 800729a:	4a5e      	ldr	r2, [pc, #376]	@ (8007414 <loadMenuTexts+0x12d8>)
 800729c:	4b5e      	ldr	r3, [pc, #376]	@ (8007418 <loadMenuTexts+0x12dc>)
 800729e:	4614      	mov	r4, r2
 80072a0:	461d      	mov	r5, r3
 80072a2:	6828      	ldr	r0, [r5, #0]
 80072a4:	6869      	ldr	r1, [r5, #4]
 80072a6:	68aa      	ldr	r2, [r5, #8]
 80072a8:	68eb      	ldr	r3, [r5, #12]
 80072aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ac:	7c2b      	ldrb	r3, [r5, #16]
 80072ae:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 80072b0:	4a5a      	ldr	r2, [pc, #360]	@ (800741c <loadMenuTexts+0x12e0>)
 80072b2:	4b5b      	ldr	r3, [pc, #364]	@ (8007420 <loadMenuTexts+0x12e4>)
 80072b4:	4614      	mov	r4, r2
 80072b6:	461d      	mov	r5, r3
 80072b8:	6828      	ldr	r0, [r5, #0]
 80072ba:	6869      	ldr	r1, [r5, #4]
 80072bc:	68aa      	ldr	r2, [r5, #8]
 80072be:	68eb      	ldr	r3, [r5, #12]
 80072c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072c2:	7c2b      	ldrb	r3, [r5, #16]
 80072c4:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 80072c6:	4a57      	ldr	r2, [pc, #348]	@ (8007424 <loadMenuTexts+0x12e8>)
 80072c8:	4b57      	ldr	r3, [pc, #348]	@ (8007428 <loadMenuTexts+0x12ec>)
 80072ca:	4614      	mov	r4, r2
 80072cc:	461d      	mov	r5, r3
 80072ce:	6828      	ldr	r0, [r5, #0]
 80072d0:	6869      	ldr	r1, [r5, #4]
 80072d2:	68aa      	ldr	r2, [r5, #8]
 80072d4:	68eb      	ldr	r3, [r5, #12]
 80072d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072d8:	7c2b      	ldrb	r3, [r5, #16]
 80072da:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 80072dc:	4a53      	ldr	r2, [pc, #332]	@ (800742c <loadMenuTexts+0x12f0>)
 80072de:	4b54      	ldr	r3, [pc, #336]	@ (8007430 <loadMenuTexts+0x12f4>)
 80072e0:	4614      	mov	r4, r2
 80072e2:	461d      	mov	r5, r3
 80072e4:	6828      	ldr	r0, [r5, #0]
 80072e6:	6869      	ldr	r1, [r5, #4]
 80072e8:	68aa      	ldr	r2, [r5, #8]
 80072ea:	68eb      	ldr	r3, [r5, #12]
 80072ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ee:	7c2b      	ldrb	r3, [r5, #16]
 80072f0:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 80072f2:	4a50      	ldr	r2, [pc, #320]	@ (8007434 <loadMenuTexts+0x12f8>)
 80072f4:	4b50      	ldr	r3, [pc, #320]	@ (8007438 <loadMenuTexts+0x12fc>)
 80072f6:	4614      	mov	r4, r2
 80072f8:	461d      	mov	r5, r3
 80072fa:	6828      	ldr	r0, [r5, #0]
 80072fc:	6869      	ldr	r1, [r5, #4]
 80072fe:	68aa      	ldr	r2, [r5, #8]
 8007300:	68eb      	ldr	r3, [r5, #12]
 8007302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007304:	7c2b      	ldrb	r3, [r5, #16]
 8007306:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 8007308:	4a4c      	ldr	r2, [pc, #304]	@ (800743c <loadMenuTexts+0x1300>)
 800730a:	4b4d      	ldr	r3, [pc, #308]	@ (8007440 <loadMenuTexts+0x1304>)
 800730c:	4614      	mov	r4, r2
 800730e:	461d      	mov	r5, r3
 8007310:	6828      	ldr	r0, [r5, #0]
 8007312:	6869      	ldr	r1, [r5, #4]
 8007314:	68aa      	ldr	r2, [r5, #8]
 8007316:	68eb      	ldr	r3, [r5, #12]
 8007318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800731a:	7c2b      	ldrb	r3, [r5, #16]
 800731c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 800731e:	4a49      	ldr	r2, [pc, #292]	@ (8007444 <loadMenuTexts+0x1308>)
 8007320:	4b49      	ldr	r3, [pc, #292]	@ (8007448 <loadMenuTexts+0x130c>)
 8007322:	4614      	mov	r4, r2
 8007324:	461d      	mov	r5, r3
 8007326:	e091      	b.n	800744c <loadMenuTexts+0x1310>
 8007328:	200009d4 	.word	0x200009d4
 800732c:	20001904 	.word	0x20001904
 8007330:	200009e8 	.word	0x200009e8
 8007334:	20001918 	.word	0x20001918
 8007338:	200009fc 	.word	0x200009fc
 800733c:	2000192c 	.word	0x2000192c
 8007340:	20000a10 	.word	0x20000a10
 8007344:	20001940 	.word	0x20001940
 8007348:	20000a24 	.word	0x20000a24
 800734c:	20001954 	.word	0x20001954
 8007350:	20000a38 	.word	0x20000a38
 8007354:	20001968 	.word	0x20001968
 8007358:	20000a4c 	.word	0x20000a4c
 800735c:	2000197c 	.word	0x2000197c
 8007360:	20000a60 	.word	0x20000a60
 8007364:	20001990 	.word	0x20001990
 8007368:	20000a74 	.word	0x20000a74
 800736c:	200019a4 	.word	0x200019a4
 8007370:	20000a88 	.word	0x20000a88
 8007374:	200019b8 	.word	0x200019b8
 8007378:	20000a9c 	.word	0x20000a9c
 800737c:	200019cc 	.word	0x200019cc
 8007380:	20000ab0 	.word	0x20000ab0
 8007384:	200019e0 	.word	0x200019e0
 8007388:	20000ac4 	.word	0x20000ac4
 800738c:	200019f4 	.word	0x200019f4
 8007390:	20000ad8 	.word	0x20000ad8
 8007394:	20001a08 	.word	0x20001a08
 8007398:	20000aec 	.word	0x20000aec
 800739c:	20001a1c 	.word	0x20001a1c
 80073a0:	20000b00 	.word	0x20000b00
 80073a4:	20001a30 	.word	0x20001a30
 80073a8:	20000b14 	.word	0x20000b14
 80073ac:	20001a44 	.word	0x20001a44
 80073b0:	20000b28 	.word	0x20000b28
 80073b4:	20001a58 	.word	0x20001a58
 80073b8:	20000b3c 	.word	0x20000b3c
 80073bc:	20001a6c 	.word	0x20001a6c
 80073c0:	20000b50 	.word	0x20000b50
 80073c4:	20001a80 	.word	0x20001a80
 80073c8:	20000b64 	.word	0x20000b64
 80073cc:	20001a94 	.word	0x20001a94
 80073d0:	20000b78 	.word	0x20000b78
 80073d4:	20001aa8 	.word	0x20001aa8
 80073d8:	20000b8c 	.word	0x20000b8c
 80073dc:	20001abc 	.word	0x20001abc
 80073e0:	20000ba0 	.word	0x20000ba0
 80073e4:	20001ad0 	.word	0x20001ad0
 80073e8:	20000bb4 	.word	0x20000bb4
 80073ec:	20001ae4 	.word	0x20001ae4
 80073f0:	20000bc8 	.word	0x20000bc8
 80073f4:	20001af8 	.word	0x20001af8
 80073f8:	20000bdc 	.word	0x20000bdc
 80073fc:	20001b0c 	.word	0x20001b0c
 8007400:	20000bf0 	.word	0x20000bf0
 8007404:	20001b20 	.word	0x20001b20
 8007408:	20000c04 	.word	0x20000c04
 800740c:	20001b34 	.word	0x20001b34
 8007410:	20000c18 	.word	0x20000c18
 8007414:	20001b48 	.word	0x20001b48
 8007418:	20000c2c 	.word	0x20000c2c
 800741c:	20001b5c 	.word	0x20001b5c
 8007420:	20000c40 	.word	0x20000c40
 8007424:	20001b70 	.word	0x20001b70
 8007428:	20000c54 	.word	0x20000c54
 800742c:	20001b84 	.word	0x20001b84
 8007430:	20000c68 	.word	0x20000c68
 8007434:	20001b98 	.word	0x20001b98
 8007438:	20000cf4 	.word	0x20000cf4
 800743c:	20001bac 	.word	0x20001bac
 8007440:	20000d08 	.word	0x20000d08
 8007444:	20001bc0 	.word	0x20001bc0
 8007448:	20000ccc 	.word	0x20000ccc
 800744c:	6828      	ldr	r0, [r5, #0]
 800744e:	6869      	ldr	r1, [r5, #4]
 8007450:	68aa      	ldr	r2, [r5, #8]
 8007452:	68eb      	ldr	r3, [r5, #12]
 8007454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007456:	7c2b      	ldrb	r3, [r5, #16]
 8007458:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 800745a:	4a5b      	ldr	r2, [pc, #364]	@ (80075c8 <loadMenuTexts+0x148c>)
 800745c:	4b5b      	ldr	r3, [pc, #364]	@ (80075cc <loadMenuTexts+0x1490>)
 800745e:	4614      	mov	r4, r2
 8007460:	461d      	mov	r5, r3
 8007462:	6828      	ldr	r0, [r5, #0]
 8007464:	6869      	ldr	r1, [r5, #4]
 8007466:	68aa      	ldr	r2, [r5, #8]
 8007468:	68eb      	ldr	r3, [r5, #12]
 800746a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800746c:	7c2b      	ldrb	r3, [r5, #16]
 800746e:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 8007470:	4a57      	ldr	r2, [pc, #348]	@ (80075d0 <loadMenuTexts+0x1494>)
 8007472:	4b58      	ldr	r3, [pc, #352]	@ (80075d4 <loadMenuTexts+0x1498>)
 8007474:	4614      	mov	r4, r2
 8007476:	461d      	mov	r5, r3
 8007478:	6828      	ldr	r0, [r5, #0]
 800747a:	6869      	ldr	r1, [r5, #4]
 800747c:	68aa      	ldr	r2, [r5, #8]
 800747e:	68eb      	ldr	r3, [r5, #12]
 8007480:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007482:	7c2b      	ldrb	r3, [r5, #16]
 8007484:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 8007486:	4a54      	ldr	r2, [pc, #336]	@ (80075d8 <loadMenuTexts+0x149c>)
 8007488:	4b54      	ldr	r3, [pc, #336]	@ (80075dc <loadMenuTexts+0x14a0>)
 800748a:	4614      	mov	r4, r2
 800748c:	461d      	mov	r5, r3
 800748e:	6828      	ldr	r0, [r5, #0]
 8007490:	6869      	ldr	r1, [r5, #4]
 8007492:	68aa      	ldr	r2, [r5, #8]
 8007494:	68eb      	ldr	r3, [r5, #12]
 8007496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007498:	7c2b      	ldrb	r3, [r5, #16]
 800749a:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 800749c:	4a50      	ldr	r2, [pc, #320]	@ (80075e0 <loadMenuTexts+0x14a4>)
 800749e:	4b51      	ldr	r3, [pc, #324]	@ (80075e4 <loadMenuTexts+0x14a8>)
 80074a0:	4614      	mov	r4, r2
 80074a2:	461d      	mov	r5, r3
 80074a4:	6828      	ldr	r0, [r5, #0]
 80074a6:	6869      	ldr	r1, [r5, #4]
 80074a8:	68aa      	ldr	r2, [r5, #8]
 80074aa:	68eb      	ldr	r3, [r5, #12]
 80074ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074ae:	7c2b      	ldrb	r3, [r5, #16]
 80074b0:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 80074b2:	4a4d      	ldr	r2, [pc, #308]	@ (80075e8 <loadMenuTexts+0x14ac>)
 80074b4:	4b4d      	ldr	r3, [pc, #308]	@ (80075ec <loadMenuTexts+0x14b0>)
 80074b6:	4614      	mov	r4, r2
 80074b8:	461d      	mov	r5, r3
 80074ba:	6828      	ldr	r0, [r5, #0]
 80074bc:	6869      	ldr	r1, [r5, #4]
 80074be:	68aa      	ldr	r2, [r5, #8]
 80074c0:	68eb      	ldr	r3, [r5, #12]
 80074c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074c4:	7c2b      	ldrb	r3, [r5, #16]
 80074c6:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 80074c8:	4a49      	ldr	r2, [pc, #292]	@ (80075f0 <loadMenuTexts+0x14b4>)
 80074ca:	4b4a      	ldr	r3, [pc, #296]	@ (80075f4 <loadMenuTexts+0x14b8>)
 80074cc:	4614      	mov	r4, r2
 80074ce:	461d      	mov	r5, r3
 80074d0:	6828      	ldr	r0, [r5, #0]
 80074d2:	6869      	ldr	r1, [r5, #4]
 80074d4:	68aa      	ldr	r2, [r5, #8]
 80074d6:	68eb      	ldr	r3, [r5, #12]
 80074d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074da:	7c2b      	ldrb	r3, [r5, #16]
 80074dc:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 80074de:	4a46      	ldr	r2, [pc, #280]	@ (80075f8 <loadMenuTexts+0x14bc>)
 80074e0:	4b46      	ldr	r3, [pc, #280]	@ (80075fc <loadMenuTexts+0x14c0>)
 80074e2:	4614      	mov	r4, r2
 80074e4:	461d      	mov	r5, r3
 80074e6:	6828      	ldr	r0, [r5, #0]
 80074e8:	6869      	ldr	r1, [r5, #4]
 80074ea:	68aa      	ldr	r2, [r5, #8]
 80074ec:	68eb      	ldr	r3, [r5, #12]
 80074ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074f0:	7c2b      	ldrb	r3, [r5, #16]
 80074f2:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 80074f4:	4a42      	ldr	r2, [pc, #264]	@ (8007600 <loadMenuTexts+0x14c4>)
 80074f6:	4b43      	ldr	r3, [pc, #268]	@ (8007604 <loadMenuTexts+0x14c8>)
 80074f8:	4614      	mov	r4, r2
 80074fa:	461d      	mov	r5, r3
 80074fc:	6828      	ldr	r0, [r5, #0]
 80074fe:	6869      	ldr	r1, [r5, #4]
 8007500:	68aa      	ldr	r2, [r5, #8]
 8007502:	68eb      	ldr	r3, [r5, #12]
 8007504:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007506:	7c2b      	ldrb	r3, [r5, #16]
 8007508:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 800750a:	4a3f      	ldr	r2, [pc, #252]	@ (8007608 <loadMenuTexts+0x14cc>)
 800750c:	4b3f      	ldr	r3, [pc, #252]	@ (800760c <loadMenuTexts+0x14d0>)
 800750e:	4614      	mov	r4, r2
 8007510:	461d      	mov	r5, r3
 8007512:	6828      	ldr	r0, [r5, #0]
 8007514:	6869      	ldr	r1, [r5, #4]
 8007516:	68aa      	ldr	r2, [r5, #8]
 8007518:	68eb      	ldr	r3, [r5, #12]
 800751a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800751c:	7c2b      	ldrb	r3, [r5, #16]
 800751e:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 8007520:	4a3b      	ldr	r2, [pc, #236]	@ (8007610 <loadMenuTexts+0x14d4>)
 8007522:	4b3c      	ldr	r3, [pc, #240]	@ (8007614 <loadMenuTexts+0x14d8>)
 8007524:	4614      	mov	r4, r2
 8007526:	461d      	mov	r5, r3
 8007528:	6828      	ldr	r0, [r5, #0]
 800752a:	6869      	ldr	r1, [r5, #4]
 800752c:	68aa      	ldr	r2, [r5, #8]
 800752e:	68eb      	ldr	r3, [r5, #12]
 8007530:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007532:	7c2b      	ldrb	r3, [r5, #16]
 8007534:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 8007536:	4a38      	ldr	r2, [pc, #224]	@ (8007618 <loadMenuTexts+0x14dc>)
 8007538:	4b38      	ldr	r3, [pc, #224]	@ (800761c <loadMenuTexts+0x14e0>)
 800753a:	4614      	mov	r4, r2
 800753c:	461d      	mov	r5, r3
 800753e:	6828      	ldr	r0, [r5, #0]
 8007540:	6869      	ldr	r1, [r5, #4]
 8007542:	68aa      	ldr	r2, [r5, #8]
 8007544:	68eb      	ldr	r3, [r5, #12]
 8007546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007548:	7c2b      	ldrb	r3, [r5, #16]
 800754a:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 800754c:	4a34      	ldr	r2, [pc, #208]	@ (8007620 <loadMenuTexts+0x14e4>)
 800754e:	4b35      	ldr	r3, [pc, #212]	@ (8007624 <loadMenuTexts+0x14e8>)
 8007550:	4614      	mov	r4, r2
 8007552:	461d      	mov	r5, r3
 8007554:	6828      	ldr	r0, [r5, #0]
 8007556:	6869      	ldr	r1, [r5, #4]
 8007558:	68aa      	ldr	r2, [r5, #8]
 800755a:	68eb      	ldr	r3, [r5, #12]
 800755c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800755e:	7c2b      	ldrb	r3, [r5, #16]
 8007560:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 8007562:	4a31      	ldr	r2, [pc, #196]	@ (8007628 <loadMenuTexts+0x14ec>)
 8007564:	4b31      	ldr	r3, [pc, #196]	@ (800762c <loadMenuTexts+0x14f0>)
 8007566:	4614      	mov	r4, r2
 8007568:	461d      	mov	r5, r3
 800756a:	6828      	ldr	r0, [r5, #0]
 800756c:	6869      	ldr	r1, [r5, #4]
 800756e:	68aa      	ldr	r2, [r5, #8]
 8007570:	68eb      	ldr	r3, [r5, #12]
 8007572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007574:	7c2b      	ldrb	r3, [r5, #16]
 8007576:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 8007578:	4a2d      	ldr	r2, [pc, #180]	@ (8007630 <loadMenuTexts+0x14f4>)
 800757a:	4b2e      	ldr	r3, [pc, #184]	@ (8007634 <loadMenuTexts+0x14f8>)
 800757c:	4614      	mov	r4, r2
 800757e:	461d      	mov	r5, r3
 8007580:	6828      	ldr	r0, [r5, #0]
 8007582:	6869      	ldr	r1, [r5, #4]
 8007584:	68aa      	ldr	r2, [r5, #8]
 8007586:	68eb      	ldr	r3, [r5, #12]
 8007588:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800758a:	7c2b      	ldrb	r3, [r5, #16]
 800758c:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 800758e:	4a2a      	ldr	r2, [pc, #168]	@ (8007638 <loadMenuTexts+0x14fc>)
 8007590:	4b2a      	ldr	r3, [pc, #168]	@ (800763c <loadMenuTexts+0x1500>)
 8007592:	4614      	mov	r4, r2
 8007594:	461d      	mov	r5, r3
 8007596:	6828      	ldr	r0, [r5, #0]
 8007598:	6869      	ldr	r1, [r5, #4]
 800759a:	68aa      	ldr	r2, [r5, #8]
 800759c:	68eb      	ldr	r3, [r5, #12]
 800759e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075a0:	7c2b      	ldrb	r3, [r5, #16]
 80075a2:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 80075a4:	4a26      	ldr	r2, [pc, #152]	@ (8007640 <loadMenuTexts+0x1504>)
 80075a6:	4b27      	ldr	r3, [pc, #156]	@ (8007644 <loadMenuTexts+0x1508>)
 80075a8:	4614      	mov	r4, r2
 80075aa:	461d      	mov	r5, r3
 80075ac:	6828      	ldr	r0, [r5, #0]
 80075ae:	6869      	ldr	r1, [r5, #4]
 80075b0:	68aa      	ldr	r2, [r5, #8]
 80075b2:	68eb      	ldr	r3, [r5, #12]
 80075b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075b6:	7c2b      	ldrb	r3, [r5, #16]
 80075b8:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 80075ba:	f000 f845 	bl	8007648 <menuVariableFinisher>
}
 80075be:	bf00      	nop
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bdb0      	pop	{r4, r5, r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20001bd4 	.word	0x20001bd4
 80075cc:	20000ce0 	.word	0x20000ce0
 80075d0:	20001be8 	.word	0x20001be8
 80075d4:	20000d44 	.word	0x20000d44
 80075d8:	20001bfc 	.word	0x20001bfc
 80075dc:	20000d58 	.word	0x20000d58
 80075e0:	20001c10 	.word	0x20001c10
 80075e4:	20000d94 	.word	0x20000d94
 80075e8:	20001c24 	.word	0x20001c24
 80075ec:	20000da8 	.word	0x20000da8
 80075f0:	20001c38 	.word	0x20001c38
 80075f4:	20000de4 	.word	0x20000de4
 80075f8:	20001c4c 	.word	0x20001c4c
 80075fc:	20000df8 	.word	0x20000df8
 8007600:	20001c60 	.word	0x20001c60
 8007604:	20000e20 	.word	0x20000e20
 8007608:	20001c74 	.word	0x20001c74
 800760c:	20000e48 	.word	0x20000e48
 8007610:	20001c88 	.word	0x20001c88
 8007614:	20000e70 	.word	0x20000e70
 8007618:	20001c9c 	.word	0x20001c9c
 800761c:	20000e98 	.word	0x20000e98
 8007620:	20001cb0 	.word	0x20001cb0
 8007624:	20000ec0 	.word	0x20000ec0
 8007628:	20001cc4 	.word	0x20001cc4
 800762c:	20000ee8 	.word	0x20000ee8
 8007630:	20001cd8 	.word	0x20001cd8
 8007634:	20000f10 	.word	0x20000f10
 8007638:	20001cec 	.word	0x20001cec
 800763c:	20000f38 	.word	0x20000f38
 8007640:	20001d00 	.word	0x20001d00
 8007644:	20000f60 	.word	0x20000f60

08007648 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 800764c:	4b99      	ldr	r3, [pc, #612]	@ (80078b4 <menuVariableFinisher+0x26c>)
 800764e:	2200      	movs	r2, #0
 8007650:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 8007652:	4b99      	ldr	r3, [pc, #612]	@ (80078b8 <menuVariableFinisher+0x270>)
 8007654:	2200      	movs	r2, #0
 8007656:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 8007658:	4b98      	ldr	r3, [pc, #608]	@ (80078bc <menuVariableFinisher+0x274>)
 800765a:	2200      	movs	r2, #0
 800765c:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 800765e:	4b98      	ldr	r3, [pc, #608]	@ (80078c0 <menuVariableFinisher+0x278>)
 8007660:	2200      	movs	r2, #0
 8007662:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 8007664:	4b97      	ldr	r3, [pc, #604]	@ (80078c4 <menuVariableFinisher+0x27c>)
 8007666:	2200      	movs	r2, #0
 8007668:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 800766a:	4b97      	ldr	r3, [pc, #604]	@ (80078c8 <menuVariableFinisher+0x280>)
 800766c:	2200      	movs	r2, #0
 800766e:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 8007670:	4b96      	ldr	r3, [pc, #600]	@ (80078cc <menuVariableFinisher+0x284>)
 8007672:	2200      	movs	r2, #0
 8007674:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 8007676:	4b96      	ldr	r3, [pc, #600]	@ (80078d0 <menuVariableFinisher+0x288>)
 8007678:	2200      	movs	r2, #0
 800767a:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 800767c:	4b95      	ldr	r3, [pc, #596]	@ (80078d4 <menuVariableFinisher+0x28c>)
 800767e:	2200      	movs	r2, #0
 8007680:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 8007682:	4b95      	ldr	r3, [pc, #596]	@ (80078d8 <menuVariableFinisher+0x290>)
 8007684:	2200      	movs	r2, #0
 8007686:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 8007688:	4b94      	ldr	r3, [pc, #592]	@ (80078dc <menuVariableFinisher+0x294>)
 800768a:	2200      	movs	r2, #0
 800768c:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 800768e:	4b94      	ldr	r3, [pc, #592]	@ (80078e0 <menuVariableFinisher+0x298>)
 8007690:	2200      	movs	r2, #0
 8007692:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 8007694:	4b93      	ldr	r3, [pc, #588]	@ (80078e4 <menuVariableFinisher+0x29c>)
 8007696:	2200      	movs	r2, #0
 8007698:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 800769a:	4b93      	ldr	r3, [pc, #588]	@ (80078e8 <menuVariableFinisher+0x2a0>)
 800769c:	2200      	movs	r2, #0
 800769e:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 80076a0:	4b92      	ldr	r3, [pc, #584]	@ (80078ec <menuVariableFinisher+0x2a4>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 80076a6:	4b92      	ldr	r3, [pc, #584]	@ (80078f0 <menuVariableFinisher+0x2a8>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 80076ac:	4b91      	ldr	r3, [pc, #580]	@ (80078f4 <menuVariableFinisher+0x2ac>)
 80076ae:	2200      	movs	r2, #0
 80076b0:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 80076b2:	4b91      	ldr	r3, [pc, #580]	@ (80078f8 <menuVariableFinisher+0x2b0>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 80076b8:	4b90      	ldr	r3, [pc, #576]	@ (80078fc <menuVariableFinisher+0x2b4>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 80076be:	4b90      	ldr	r3, [pc, #576]	@ (8007900 <menuVariableFinisher+0x2b8>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 80076c4:	4b8f      	ldr	r3, [pc, #572]	@ (8007904 <menuVariableFinisher+0x2bc>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 80076ca:	4b8f      	ldr	r3, [pc, #572]	@ (8007908 <menuVariableFinisher+0x2c0>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 80076d0:	4b8e      	ldr	r3, [pc, #568]	@ (800790c <menuVariableFinisher+0x2c4>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 80076d6:	4b8e      	ldr	r3, [pc, #568]	@ (8007910 <menuVariableFinisher+0x2c8>)
 80076d8:	2200      	movs	r2, #0
 80076da:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 80076dc:	4b8d      	ldr	r3, [pc, #564]	@ (8007914 <menuVariableFinisher+0x2cc>)
 80076de:	2200      	movs	r2, #0
 80076e0:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 80076e2:	4b8d      	ldr	r3, [pc, #564]	@ (8007918 <menuVariableFinisher+0x2d0>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 80076e8:	4b8c      	ldr	r3, [pc, #560]	@ (800791c <menuVariableFinisher+0x2d4>)
 80076ea:	2200      	movs	r2, #0
 80076ec:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 80076ee:	4b8c      	ldr	r3, [pc, #560]	@ (8007920 <menuVariableFinisher+0x2d8>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 80076f4:	4b8b      	ldr	r3, [pc, #556]	@ (8007924 <menuVariableFinisher+0x2dc>)
 80076f6:	2200      	movs	r2, #0
 80076f8:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 80076fa:	4b8b      	ldr	r3, [pc, #556]	@ (8007928 <menuVariableFinisher+0x2e0>)
 80076fc:	2200      	movs	r2, #0
 80076fe:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 8007700:	4b8a      	ldr	r3, [pc, #552]	@ (800792c <menuVariableFinisher+0x2e4>)
 8007702:	2200      	movs	r2, #0
 8007704:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 8007706:	4b8a      	ldr	r3, [pc, #552]	@ (8007930 <menuVariableFinisher+0x2e8>)
 8007708:	2200      	movs	r2, #0
 800770a:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 800770c:	4b89      	ldr	r3, [pc, #548]	@ (8007934 <menuVariableFinisher+0x2ec>)
 800770e:	2200      	movs	r2, #0
 8007710:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 8007712:	4b89      	ldr	r3, [pc, #548]	@ (8007938 <menuVariableFinisher+0x2f0>)
 8007714:	2200      	movs	r2, #0
 8007716:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 8007718:	4b88      	ldr	r3, [pc, #544]	@ (800793c <menuVariableFinisher+0x2f4>)
 800771a:	2200      	movs	r2, #0
 800771c:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 800771e:	4b88      	ldr	r3, [pc, #544]	@ (8007940 <menuVariableFinisher+0x2f8>)
 8007720:	2200      	movs	r2, #0
 8007722:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 8007724:	4b87      	ldr	r3, [pc, #540]	@ (8007944 <menuVariableFinisher+0x2fc>)
 8007726:	2200      	movs	r2, #0
 8007728:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 800772a:	4b87      	ldr	r3, [pc, #540]	@ (8007948 <menuVariableFinisher+0x300>)
 800772c:	2200      	movs	r2, #0
 800772e:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 8007730:	4b86      	ldr	r3, [pc, #536]	@ (800794c <menuVariableFinisher+0x304>)
 8007732:	2200      	movs	r2, #0
 8007734:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 8007736:	4b86      	ldr	r3, [pc, #536]	@ (8007950 <menuVariableFinisher+0x308>)
 8007738:	2200      	movs	r2, #0
 800773a:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 800773c:	4b85      	ldr	r3, [pc, #532]	@ (8007954 <menuVariableFinisher+0x30c>)
 800773e:	2200      	movs	r2, #0
 8007740:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 8007742:	4b85      	ldr	r3, [pc, #532]	@ (8007958 <menuVariableFinisher+0x310>)
 8007744:	2200      	movs	r2, #0
 8007746:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 8007748:	4b84      	ldr	r3, [pc, #528]	@ (800795c <menuVariableFinisher+0x314>)
 800774a:	2200      	movs	r2, #0
 800774c:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 800774e:	4b84      	ldr	r3, [pc, #528]	@ (8007960 <menuVariableFinisher+0x318>)
 8007750:	2200      	movs	r2, #0
 8007752:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 8007754:	4b83      	ldr	r3, [pc, #524]	@ (8007964 <menuVariableFinisher+0x31c>)
 8007756:	2200      	movs	r2, #0
 8007758:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 800775a:	4b83      	ldr	r3, [pc, #524]	@ (8007968 <menuVariableFinisher+0x320>)
 800775c:	2200      	movs	r2, #0
 800775e:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 8007760:	4b82      	ldr	r3, [pc, #520]	@ (800796c <menuVariableFinisher+0x324>)
 8007762:	2200      	movs	r2, #0
 8007764:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 8007766:	4b82      	ldr	r3, [pc, #520]	@ (8007970 <menuVariableFinisher+0x328>)
 8007768:	2200      	movs	r2, #0
 800776a:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 800776c:	4b81      	ldr	r3, [pc, #516]	@ (8007974 <menuVariableFinisher+0x32c>)
 800776e:	2200      	movs	r2, #0
 8007770:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 8007772:	4b81      	ldr	r3, [pc, #516]	@ (8007978 <menuVariableFinisher+0x330>)
 8007774:	2200      	movs	r2, #0
 8007776:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8007778:	4b80      	ldr	r3, [pc, #512]	@ (800797c <menuVariableFinisher+0x334>)
 800777a:	2200      	movs	r2, #0
 800777c:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 800777e:	4b80      	ldr	r3, [pc, #512]	@ (8007980 <menuVariableFinisher+0x338>)
 8007780:	2200      	movs	r2, #0
 8007782:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 8007784:	4b7f      	ldr	r3, [pc, #508]	@ (8007984 <menuVariableFinisher+0x33c>)
 8007786:	2200      	movs	r2, #0
 8007788:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 800778a:	4b7f      	ldr	r3, [pc, #508]	@ (8007988 <menuVariableFinisher+0x340>)
 800778c:	2200      	movs	r2, #0
 800778e:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 8007790:	4b7e      	ldr	r3, [pc, #504]	@ (800798c <menuVariableFinisher+0x344>)
 8007792:	2200      	movs	r2, #0
 8007794:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 8007796:	4b7e      	ldr	r3, [pc, #504]	@ (8007990 <menuVariableFinisher+0x348>)
 8007798:	2200      	movs	r2, #0
 800779a:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 800779c:	4b7d      	ldr	r3, [pc, #500]	@ (8007994 <menuVariableFinisher+0x34c>)
 800779e:	2200      	movs	r2, #0
 80077a0:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 80077a2:	4b7d      	ldr	r3, [pc, #500]	@ (8007998 <menuVariableFinisher+0x350>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 80077a8:	4b7c      	ldr	r3, [pc, #496]	@ (800799c <menuVariableFinisher+0x354>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 80077ae:	4b7c      	ldr	r3, [pc, #496]	@ (80079a0 <menuVariableFinisher+0x358>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 80077b4:	4b7b      	ldr	r3, [pc, #492]	@ (80079a4 <menuVariableFinisher+0x35c>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 80077ba:	4b7b      	ldr	r3, [pc, #492]	@ (80079a8 <menuVariableFinisher+0x360>)
 80077bc:	2200      	movs	r2, #0
 80077be:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 80077c0:	4b7a      	ldr	r3, [pc, #488]	@ (80079ac <menuVariableFinisher+0x364>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 80077c6:	4b7a      	ldr	r3, [pc, #488]	@ (80079b0 <menuVariableFinisher+0x368>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 80077cc:	4b79      	ldr	r3, [pc, #484]	@ (80079b4 <menuVariableFinisher+0x36c>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 80077d2:	4b79      	ldr	r3, [pc, #484]	@ (80079b8 <menuVariableFinisher+0x370>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 80077d8:	4b78      	ldr	r3, [pc, #480]	@ (80079bc <menuVariableFinisher+0x374>)
 80077da:	2200      	movs	r2, #0
 80077dc:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 80077de:	4b78      	ldr	r3, [pc, #480]	@ (80079c0 <menuVariableFinisher+0x378>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 80077e4:	4b77      	ldr	r3, [pc, #476]	@ (80079c4 <menuVariableFinisher+0x37c>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 80077ea:	4b77      	ldr	r3, [pc, #476]	@ (80079c8 <menuVariableFinisher+0x380>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 80077f0:	4b76      	ldr	r3, [pc, #472]	@ (80079cc <menuVariableFinisher+0x384>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 80077f6:	4b76      	ldr	r3, [pc, #472]	@ (80079d0 <menuVariableFinisher+0x388>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 80077fc:	4b75      	ldr	r3, [pc, #468]	@ (80079d4 <menuVariableFinisher+0x38c>)
 80077fe:	2200      	movs	r2, #0
 8007800:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 8007802:	4b75      	ldr	r3, [pc, #468]	@ (80079d8 <menuVariableFinisher+0x390>)
 8007804:	2200      	movs	r2, #0
 8007806:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 8007808:	4b74      	ldr	r3, [pc, #464]	@ (80079dc <menuVariableFinisher+0x394>)
 800780a:	2200      	movs	r2, #0
 800780c:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 800780e:	4b74      	ldr	r3, [pc, #464]	@ (80079e0 <menuVariableFinisher+0x398>)
 8007810:	2200      	movs	r2, #0
 8007812:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 8007814:	4b73      	ldr	r3, [pc, #460]	@ (80079e4 <menuVariableFinisher+0x39c>)
 8007816:	2200      	movs	r2, #0
 8007818:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 800781a:	4b73      	ldr	r3, [pc, #460]	@ (80079e8 <menuVariableFinisher+0x3a0>)
 800781c:	2200      	movs	r2, #0
 800781e:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 8007820:	4b72      	ldr	r3, [pc, #456]	@ (80079ec <menuVariableFinisher+0x3a4>)
 8007822:	2200      	movs	r2, #0
 8007824:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 8007826:	4b72      	ldr	r3, [pc, #456]	@ (80079f0 <menuVariableFinisher+0x3a8>)
 8007828:	2200      	movs	r2, #0
 800782a:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 800782c:	4b71      	ldr	r3, [pc, #452]	@ (80079f4 <menuVariableFinisher+0x3ac>)
 800782e:	2200      	movs	r2, #0
 8007830:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 8007832:	4b71      	ldr	r3, [pc, #452]	@ (80079f8 <menuVariableFinisher+0x3b0>)
 8007834:	2200      	movs	r2, #0
 8007836:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 8007838:	4b70      	ldr	r3, [pc, #448]	@ (80079fc <menuVariableFinisher+0x3b4>)
 800783a:	2200      	movs	r2, #0
 800783c:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 800783e:	4b70      	ldr	r3, [pc, #448]	@ (8007a00 <menuVariableFinisher+0x3b8>)
 8007840:	2200      	movs	r2, #0
 8007842:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 8007844:	4b6f      	ldr	r3, [pc, #444]	@ (8007a04 <menuVariableFinisher+0x3bc>)
 8007846:	2200      	movs	r2, #0
 8007848:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 800784a:	4b6f      	ldr	r3, [pc, #444]	@ (8007a08 <menuVariableFinisher+0x3c0>)
 800784c:	2200      	movs	r2, #0
 800784e:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 8007850:	4b6e      	ldr	r3, [pc, #440]	@ (8007a0c <menuVariableFinisher+0x3c4>)
 8007852:	2200      	movs	r2, #0
 8007854:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 8007856:	4b6e      	ldr	r3, [pc, #440]	@ (8007a10 <menuVariableFinisher+0x3c8>)
 8007858:	2200      	movs	r2, #0
 800785a:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 800785c:	4b6d      	ldr	r3, [pc, #436]	@ (8007a14 <menuVariableFinisher+0x3cc>)
 800785e:	2200      	movs	r2, #0
 8007860:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 8007862:	4b6d      	ldr	r3, [pc, #436]	@ (8007a18 <menuVariableFinisher+0x3d0>)
 8007864:	2200      	movs	r2, #0
 8007866:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 8007868:	4b6c      	ldr	r3, [pc, #432]	@ (8007a1c <menuVariableFinisher+0x3d4>)
 800786a:	2200      	movs	r2, #0
 800786c:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 800786e:	4b6c      	ldr	r3, [pc, #432]	@ (8007a20 <menuVariableFinisher+0x3d8>)
 8007870:	2200      	movs	r2, #0
 8007872:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8007874:	4b6b      	ldr	r3, [pc, #428]	@ (8007a24 <menuVariableFinisher+0x3dc>)
 8007876:	2200      	movs	r2, #0
 8007878:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 800787a:	4b6b      	ldr	r3, [pc, #428]	@ (8007a28 <menuVariableFinisher+0x3e0>)
 800787c:	2200      	movs	r2, #0
 800787e:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 8007880:	4b6a      	ldr	r3, [pc, #424]	@ (8007a2c <menuVariableFinisher+0x3e4>)
 8007882:	2200      	movs	r2, #0
 8007884:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 8007886:	4b6a      	ldr	r3, [pc, #424]	@ (8007a30 <menuVariableFinisher+0x3e8>)
 8007888:	2200      	movs	r2, #0
 800788a:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 800788c:	4b69      	ldr	r3, [pc, #420]	@ (8007a34 <menuVariableFinisher+0x3ec>)
 800788e:	2200      	movs	r2, #0
 8007890:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 8007892:	4b69      	ldr	r3, [pc, #420]	@ (8007a38 <menuVariableFinisher+0x3f0>)
 8007894:	2200      	movs	r2, #0
 8007896:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 8007898:	4b68      	ldr	r3, [pc, #416]	@ (8007a3c <menuVariableFinisher+0x3f4>)
 800789a:	2200      	movs	r2, #0
 800789c:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 800789e:	4b68      	ldr	r3, [pc, #416]	@ (8007a40 <menuVariableFinisher+0x3f8>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 80078a4:	4b67      	ldr	r3, [pc, #412]	@ (8007a44 <menuVariableFinisher+0x3fc>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	741a      	strb	r2, [r3, #16]
}
 80078aa:	bf00      	nop
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bc80      	pop	{r7}
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	2000009c 	.word	0x2000009c
 80078b8:	200000b0 	.word	0x200000b0
 80078bc:	200000c4 	.word	0x200000c4
 80078c0:	200000d8 	.word	0x200000d8
 80078c4:	200000ec 	.word	0x200000ec
 80078c8:	20000100 	.word	0x20000100
 80078cc:	20000114 	.word	0x20000114
 80078d0:	20000128 	.word	0x20000128
 80078d4:	2000013c 	.word	0x2000013c
 80078d8:	20000150 	.word	0x20000150
 80078dc:	20000164 	.word	0x20000164
 80078e0:	20000178 	.word	0x20000178
 80078e4:	20001620 	.word	0x20001620
 80078e8:	20001634 	.word	0x20001634
 80078ec:	20001648 	.word	0x20001648
 80078f0:	2000165c 	.word	0x2000165c
 80078f4:	20001670 	.word	0x20001670
 80078f8:	20001684 	.word	0x20001684
 80078fc:	20001698 	.word	0x20001698
 8007900:	200016ac 	.word	0x200016ac
 8007904:	200016c0 	.word	0x200016c0
 8007908:	200016d4 	.word	0x200016d4
 800790c:	200016e8 	.word	0x200016e8
 8007910:	200016fc 	.word	0x200016fc
 8007914:	20001710 	.word	0x20001710
 8007918:	20001724 	.word	0x20001724
 800791c:	20001738 	.word	0x20001738
 8007920:	2000174c 	.word	0x2000174c
 8007924:	20001760 	.word	0x20001760
 8007928:	20001774 	.word	0x20001774
 800792c:	20001788 	.word	0x20001788
 8007930:	2000179c 	.word	0x2000179c
 8007934:	200017b0 	.word	0x200017b0
 8007938:	200017c4 	.word	0x200017c4
 800793c:	200017d8 	.word	0x200017d8
 8007940:	200017ec 	.word	0x200017ec
 8007944:	20001800 	.word	0x20001800
 8007948:	20001814 	.word	0x20001814
 800794c:	20001828 	.word	0x20001828
 8007950:	2000183c 	.word	0x2000183c
 8007954:	20001850 	.word	0x20001850
 8007958:	20001864 	.word	0x20001864
 800795c:	20001878 	.word	0x20001878
 8007960:	2000188c 	.word	0x2000188c
 8007964:	200018a0 	.word	0x200018a0
 8007968:	200018b4 	.word	0x200018b4
 800796c:	200018c8 	.word	0x200018c8
 8007970:	200018dc 	.word	0x200018dc
 8007974:	200018f0 	.word	0x200018f0
 8007978:	20001904 	.word	0x20001904
 800797c:	20001918 	.word	0x20001918
 8007980:	2000192c 	.word	0x2000192c
 8007984:	20001940 	.word	0x20001940
 8007988:	20001954 	.word	0x20001954
 800798c:	20001968 	.word	0x20001968
 8007990:	2000197c 	.word	0x2000197c
 8007994:	20001990 	.word	0x20001990
 8007998:	200019a4 	.word	0x200019a4
 800799c:	200019b8 	.word	0x200019b8
 80079a0:	200019cc 	.word	0x200019cc
 80079a4:	200019e0 	.word	0x200019e0
 80079a8:	200019f4 	.word	0x200019f4
 80079ac:	20001a08 	.word	0x20001a08
 80079b0:	20001a1c 	.word	0x20001a1c
 80079b4:	20001a30 	.word	0x20001a30
 80079b8:	20001a44 	.word	0x20001a44
 80079bc:	20001a58 	.word	0x20001a58
 80079c0:	20001a6c 	.word	0x20001a6c
 80079c4:	20001a80 	.word	0x20001a80
 80079c8:	20001a94 	.word	0x20001a94
 80079cc:	20001aa8 	.word	0x20001aa8
 80079d0:	20001abc 	.word	0x20001abc
 80079d4:	20001ad0 	.word	0x20001ad0
 80079d8:	20001ae4 	.word	0x20001ae4
 80079dc:	20001af8 	.word	0x20001af8
 80079e0:	20001b0c 	.word	0x20001b0c
 80079e4:	20001b20 	.word	0x20001b20
 80079e8:	20001b34 	.word	0x20001b34
 80079ec:	20001b48 	.word	0x20001b48
 80079f0:	20001b5c 	.word	0x20001b5c
 80079f4:	20001b70 	.word	0x20001b70
 80079f8:	20001b84 	.word	0x20001b84
 80079fc:	20001b98 	.word	0x20001b98
 8007a00:	20001bac 	.word	0x20001bac
 8007a04:	20001bc0 	.word	0x20001bc0
 8007a08:	20001bd4 	.word	0x20001bd4
 8007a0c:	20001be8 	.word	0x20001be8
 8007a10:	20001bfc 	.word	0x20001bfc
 8007a14:	20001c10 	.word	0x20001c10
 8007a18:	20001c24 	.word	0x20001c24
 8007a1c:	20001c38 	.word	0x20001c38
 8007a20:	20001c4c 	.word	0x20001c4c
 8007a24:	20001c60 	.word	0x20001c60
 8007a28:	20001c74 	.word	0x20001c74
 8007a2c:	20001c88 	.word	0x20001c88
 8007a30:	20001c9c 	.word	0x20001c9c
 8007a34:	20001cb0 	.word	0x20001cb0
 8007a38:	20001cc4 	.word	0x20001cc4
 8007a3c:	20001cd8 	.word	0x20001cd8
 8007a40:	20001cec 	.word	0x20001cec
 8007a44:	20001d00 	.word	0x20001d00

08007a48 <resetMenuTexts>:

void resetMenuTexts() {
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	af00      	add	r7, sp, #0
    memset(menuyeGirildiText, 0, 17);
 8007a4c:	2211      	movs	r2, #17
 8007a4e:	2100      	movs	r1, #0
 8007a50:	48d3      	ldr	r0, [pc, #844]	@ (8007da0 <resetMenuTexts+0x358>)
 8007a52:	f006 f887 	bl	800db64 <memset>
    memset(ayarlarText, 0, 17);
 8007a56:	2211      	movs	r2, #17
 8007a58:	2100      	movs	r1, #0
 8007a5a:	48d2      	ldr	r0, [pc, #840]	@ (8007da4 <resetMenuTexts+0x35c>)
 8007a5c:	f006 f882 	bl	800db64 <memset>
    memset(hataKayitListText, 0, 17);
 8007a60:	2211      	movs	r2, #17
 8007a62:	2100      	movs	r1, #0
 8007a64:	48d0      	ldr	r0, [pc, #832]	@ (8007da8 <resetMenuTexts+0x360>)
 8007a66:	f006 f87d 	bl	800db64 <memset>
    memset(birHataKoduText, 0, 17);
 8007a6a:	2211      	movs	r2, #17
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	48cf      	ldr	r0, [pc, #828]	@ (8007dac <resetMenuTexts+0x364>)
 8007a70:	f006 f878 	bl	800db64 <memset>
    memset(ikiHataKoduText, 0, 17);
 8007a74:	2211      	movs	r2, #17
 8007a76:	2100      	movs	r1, #0
 8007a78:	48cd      	ldr	r0, [pc, #820]	@ (8007db0 <resetMenuTexts+0x368>)
 8007a7a:	f006 f873 	bl	800db64 <memset>
    memset(ucHataKoduText, 0, 17);
 8007a7e:	2211      	movs	r2, #17
 8007a80:	2100      	movs	r1, #0
 8007a82:	48cc      	ldr	r0, [pc, #816]	@ (8007db4 <resetMenuTexts+0x36c>)
 8007a84:	f006 f86e 	bl	800db64 <memset>
    memset(dortHataKoduText, 0, 17);
 8007a88:	2211      	movs	r2, #17
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	48ca      	ldr	r0, [pc, #808]	@ (8007db8 <resetMenuTexts+0x370>)
 8007a8e:	f006 f869 	bl	800db64 <memset>
    memset(besHataKoduText, 0, 17);
 8007a92:	2211      	movs	r2, #17
 8007a94:	2100      	movs	r1, #0
 8007a96:	48c9      	ldr	r0, [pc, #804]	@ (8007dbc <resetMenuTexts+0x374>)
 8007a98:	f006 f864 	bl	800db64 <memset>
    memset(altiHataKoduText, 0, 17);
 8007a9c:	2211      	movs	r2, #17
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	48c7      	ldr	r0, [pc, #796]	@ (8007dc0 <resetMenuTexts+0x378>)
 8007aa2:	f006 f85f 	bl	800db64 <memset>
    memset(yediHataKoduText, 0, 17);
 8007aa6:	2211      	movs	r2, #17
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	48c6      	ldr	r0, [pc, #792]	@ (8007dc4 <resetMenuTexts+0x37c>)
 8007aac:	f006 f85a 	bl	800db64 <memset>
    memset(sekizHataKoduText, 0, 17);
 8007ab0:	2211      	movs	r2, #17
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	48c4      	ldr	r0, [pc, #784]	@ (8007dc8 <resetMenuTexts+0x380>)
 8007ab6:	f006 f855 	bl	800db64 <memset>
    memset(dokuzHataKoduText, 0, 17);
 8007aba:	2211      	movs	r2, #17
 8007abc:	2100      	movs	r1, #0
 8007abe:	48c3      	ldr	r0, [pc, #780]	@ (8007dcc <resetMenuTexts+0x384>)
 8007ac0:	f006 f850 	bl	800db64 <memset>
    memset(onHataKoduText, 0, 17);
 8007ac4:	2211      	movs	r2, #17
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	48c1      	ldr	r0, [pc, #772]	@ (8007dd0 <resetMenuTexts+0x388>)
 8007aca:	f006 f84b 	bl	800db64 <memset>
    memset(silmekIcinText, 0, 17);
 8007ace:	2211      	movs	r2, #17
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	48c0      	ldr	r0, [pc, #768]	@ (8007dd4 <resetMenuTexts+0x38c>)
 8007ad4:	f006 f846 	bl	800db64 <memset>
    memset(calismaSekliText, 0, 17);
 8007ad8:	2211      	movs	r2, #17
 8007ada:	2100      	movs	r1, #0
 8007adc:	48be      	ldr	r0, [pc, #760]	@ (8007dd8 <resetMenuTexts+0x390>)
 8007ade:	f006 f841 	bl	800db64 <memset>
    memset(devirmeYuruyusText, 0, 17);
 8007ae2:	2211      	movs	r2, #17
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	48bd      	ldr	r0, [pc, #756]	@ (8007ddc <resetMenuTexts+0x394>)
 8007ae8:	f006 f83c 	bl	800db64 <memset>
    memset(bastikcaCalisanText, 0, 17);
 8007aec:	2211      	movs	r2, #17
 8007aee:	2100      	movs	r1, #0
 8007af0:	48bb      	ldr	r0, [pc, #748]	@ (8007de0 <resetMenuTexts+0x398>)
 8007af2:	f006 f837 	bl	800db64 <memset>
    memset(basGonderText, 0, 17);
 8007af6:	2211      	movs	r2, #17
 8007af8:	2100      	movs	r1, #0
 8007afa:	48ba      	ldr	r0, [pc, #744]	@ (8007de4 <resetMenuTexts+0x39c>)
 8007afc:	f006 f832 	bl	800db64 <memset>
    memset(emniyetCercevesiText, 0, 17);
 8007b00:	2211      	movs	r2, #17
 8007b02:	2100      	movs	r1, #0
 8007b04:	48b8      	ldr	r0, [pc, #736]	@ (8007de8 <resetMenuTexts+0x3a0>)
 8007b06:	f006 f82d 	bl	800db64 <memset>
    memset(pasifText, 0, 17);
 8007b0a:	2211      	movs	r2, #17
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	48b7      	ldr	r0, [pc, #732]	@ (8007dec <resetMenuTexts+0x3a4>)
 8007b10:	f006 f828 	bl	800db64 <memset>
    memset(aktifText, 0, 17);
 8007b14:	2211      	movs	r2, #17
 8007b16:	2100      	movs	r1, #0
 8007b18:	48b5      	ldr	r0, [pc, #724]	@ (8007df0 <resetMenuTexts+0x3a8>)
 8007b1a:	f006 f823 	bl	800db64 <memset>
    memset(yavaslamaLimitText, 0, 17);
 8007b1e:	2211      	movs	r2, #17
 8007b20:	2100      	movs	r1, #0
 8007b22:	48b4      	ldr	r0, [pc, #720]	@ (8007df4 <resetMenuTexts+0x3ac>)
 8007b24:	f006 f81e 	bl	800db64 <memset>
    memset(altLimitText, 0, 17);
 8007b28:	2211      	movs	r2, #17
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	48b2      	ldr	r0, [pc, #712]	@ (8007df8 <resetMenuTexts+0x3b0>)
 8007b2e:	f006 f819 	bl	800db64 <memset>
    memset(basincSalteriText, 0, 17);
 8007b32:	2211      	movs	r2, #17
 8007b34:	2100      	movs	r1, #0
 8007b36:	48b1      	ldr	r0, [pc, #708]	@ (8007dfc <resetMenuTexts+0x3b4>)
 8007b38:	f006 f814 	bl	800db64 <memset>
    memset(kapiSecimleriText, 0, 17);
 8007b3c:	2211      	movs	r2, #17
 8007b3e:	2100      	movs	r1, #0
 8007b40:	48af      	ldr	r0, [pc, #700]	@ (8007e00 <resetMenuTexts+0x3b8>)
 8007b42:	f006 f80f 	bl	800db64 <memset>
    memset(katKapisiAktifText, 0, 17);
 8007b46:	2211      	movs	r2, #17
 8007b48:	2100      	movs	r1, #0
 8007b4a:	48ae      	ldr	r0, [pc, #696]	@ (8007e04 <resetMenuTexts+0x3bc>)
 8007b4c:	f006 f80a 	bl	800db64 <memset>
    memset(tablaKapiAktifText, 0, 17);
 8007b50:	2211      	movs	r2, #17
 8007b52:	2100      	movs	r1, #0
 8007b54:	48ac      	ldr	r0, [pc, #688]	@ (8007e08 <resetMenuTexts+0x3c0>)
 8007b56:	f006 f805 	bl	800db64 <memset>
    memset(katArtiTablaAktifText, 0, 17);
 8007b5a:	2211      	movs	r2, #17
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	48ab      	ldr	r0, [pc, #684]	@ (8007e0c <resetMenuTexts+0x3c4>)
 8007b60:	f006 f800 	bl	800db64 <memset>
    memset(kapiAcmaTipiText, 0, 17);
 8007b64:	2211      	movs	r2, #17
 8007b66:	2100      	movs	r1, #0
 8007b68:	48a9      	ldr	r0, [pc, #676]	@ (8007e10 <resetMenuTexts+0x3c8>)
 8007b6a:	f005 fffb 	bl	800db64 <memset>
    memset(kapiButonuESPText, 0, 17);
 8007b6e:	2211      	movs	r2, #17
 8007b70:	2100      	movs	r1, #0
 8007b72:	48a8      	ldr	r0, [pc, #672]	@ (8007e14 <resetMenuTexts+0x3cc>)
 8007b74:	f005 fff6 	bl	800db64 <memset>
    memset(katButonuEXTText, 0, 17);
 8007b78:	2211      	movs	r2, #17
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	48a6      	ldr	r0, [pc, #664]	@ (8007e18 <resetMenuTexts+0x3d0>)
 8007b7e:	f005 fff1 	bl	800db64 <memset>
    memset(birKatKapiTipiText, 0, 17);
 8007b82:	2211      	movs	r2, #17
 8007b84:	2100      	movs	r1, #0
 8007b86:	48a5      	ldr	r0, [pc, #660]	@ (8007e1c <resetMenuTexts+0x3d4>)
 8007b88:	f005 ffec 	bl	800db64 <memset>
    memset(butonKontrolluText, 0, 17);
 8007b8c:	2211      	movs	r2, #17
 8007b8e:	2100      	movs	r1, #0
 8007b90:	48a3      	ldr	r0, [pc, #652]	@ (8007e20 <resetMenuTexts+0x3d8>)
 8007b92:	f005 ffe7 	bl	800db64 <memset>
    memset(birinciKapiAcSuresiText, 0, 17);
 8007b96:	2211      	movs	r2, #17
 8007b98:	2100      	movs	r1, #0
 8007b9a:	48a2      	ldr	r0, [pc, #648]	@ (8007e24 <resetMenuTexts+0x3dc>)
 8007b9c:	f005 ffe2 	bl	800db64 <memset>
    memset(kacSaniyeText, 0, 17);
 8007ba0:	2211      	movs	r2, #17
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	48a0      	ldr	r0, [pc, #640]	@ (8007e28 <resetMenuTexts+0x3e0>)
 8007ba6:	f005 ffdd 	bl	800db64 <memset>
    memset(ikinciKatKapiTipiText, 0, 17);
 8007baa:	2211      	movs	r2, #17
 8007bac:	2100      	movs	r1, #0
 8007bae:	489f      	ldr	r0, [pc, #636]	@ (8007e2c <resetMenuTexts+0x3e4>)
 8007bb0:	f005 ffd8 	bl	800db64 <memset>
    memset(ikinciKapiAcSuresiText, 0, 17);
 8007bb4:	2211      	movs	r2, #17
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	489d      	ldr	r0, [pc, #628]	@ (8007e30 <resetMenuTexts+0x3e8>)
 8007bba:	f005 ffd3 	bl	800db64 <memset>
    memset(tablaKapiTipiText, 0, 17);
 8007bbe:	2211      	movs	r2, #17
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	489c      	ldr	r0, [pc, #624]	@ (8007e34 <resetMenuTexts+0x3ec>)
 8007bc4:	f005 ffce 	bl	800db64 <memset>
    memset(tablaKapiAcKonumText, 0, 17);
 8007bc8:	2211      	movs	r2, #17
 8007bca:	2100      	movs	r1, #0
 8007bcc:	489a      	ldr	r0, [pc, #616]	@ (8007e38 <resetMenuTexts+0x3f0>)
 8007bce:	f005 ffc9 	bl	800db64 <memset>
    memset(birinciKattaAcText, 0, 17);
 8007bd2:	2211      	movs	r2, #17
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	4899      	ldr	r0, [pc, #612]	@ (8007e3c <resetMenuTexts+0x3f4>)
 8007bd8:	f005 ffc4 	bl	800db64 <memset>
    memset(ikinciKattaAcText, 0, 17);
 8007bdc:	2211      	movs	r2, #17
 8007bde:	2100      	movs	r1, #0
 8007be0:	4897      	ldr	r0, [pc, #604]	@ (8007e40 <resetMenuTexts+0x3f8>)
 8007be2:	f005 ffbf 	bl	800db64 <memset>
    memset(birVeIkinciKattaAcText, 0, 17);
 8007be6:	2211      	movs	r2, #17
 8007be8:	2100      	movs	r1, #0
 8007bea:	4896      	ldr	r0, [pc, #600]	@ (8007e44 <resetMenuTexts+0x3fc>)
 8007bec:	f005 ffba 	bl	800db64 <memset>
    memset(tablaKapiAcSureText, 0, 17);
 8007bf0:	2211      	movs	r2, #17
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	4894      	ldr	r0, [pc, #592]	@ (8007e48 <resetMenuTexts+0x400>)
 8007bf6:	f005 ffb5 	bl	800db64 <memset>
    memset(yukariYavaslamaLimitiText, 0, 17);
 8007bfa:	2211      	movs	r2, #17
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	4893      	ldr	r0, [pc, #588]	@ (8007e4c <resetMenuTexts+0x404>)
 8007c00:	f005 ffb0 	bl	800db64 <memset>
    memset(devirmeYuruyusMenuText, 0, 17);
 8007c04:	2211      	movs	r2, #17
 8007c06:	2100      	movs	r1, #0
 8007c08:	4891      	ldr	r0, [pc, #580]	@ (8007e50 <resetMenuTexts+0x408>)
 8007c0a:	f005 ffab 	bl	800db64 <memset>
    memset(devirmeAktifText, 0, 17);
 8007c0e:	2211      	movs	r2, #17
 8007c10:	2100      	movs	r1, #0
 8007c12:	4890      	ldr	r0, [pc, #576]	@ (8007e54 <resetMenuTexts+0x40c>)
 8007c14:	f005 ffa6 	bl	800db64 <memset>
    memset(yuruyusAktifText, 0, 17);
 8007c18:	2211      	movs	r2, #17
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	488e      	ldr	r0, [pc, #568]	@ (8007e58 <resetMenuTexts+0x410>)
 8007c1e:	f005 ffa1 	bl	800db64 <memset>
    memset(devirmeYukariText, 0, 17);
 8007c22:	2211      	movs	r2, #17
 8007c24:	2100      	movs	r1, #0
 8007c26:	488d      	ldr	r0, [pc, #564]	@ (8007e5c <resetMenuTexts+0x414>)
 8007c28:	f005 ff9c 	bl	800db64 <memset>
    memset(yuruyusIleriText, 0, 17);
 8007c2c:	2211      	movs	r2, #17
 8007c2e:	2100      	movs	r1, #0
 8007c30:	488b      	ldr	r0, [pc, #556]	@ (8007e60 <resetMenuTexts+0x418>)
 8007c32:	f005 ff97 	bl	800db64 <memset>
    memset(devirmeAsagiSivicText, 0, 17);
 8007c36:	2211      	movs	r2, #17
 8007c38:	2100      	movs	r1, #0
 8007c3a:	488a      	ldr	r0, [pc, #552]	@ (8007e64 <resetMenuTexts+0x41c>)
 8007c3c:	f005 ff92 	bl	800db64 <memset>
    memset(yuruyusGeriSivicText, 0, 17);
 8007c40:	2211      	movs	r2, #17
 8007c42:	2100      	movs	r1, #0
 8007c44:	4888      	ldr	r0, [pc, #544]	@ (8007e68 <resetMenuTexts+0x420>)
 8007c46:	f005 ff8d 	bl	800db64 <memset>
    memset(yuruyusSecildiText, 0, 17);
 8007c4a:	2211      	movs	r2, #17
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	4887      	ldr	r0, [pc, #540]	@ (8007e6c <resetMenuTexts+0x424>)
 8007c50:	f005 ff88 	bl	800db64 <memset>
    memset(devirmeSilindirTipiText, 0, 17);
 8007c54:	2211      	movs	r2, #17
 8007c56:	2100      	movs	r1, #0
 8007c58:	4885      	ldr	r0, [pc, #532]	@ (8007e70 <resetMenuTexts+0x428>)
 8007c5a:	f005 ff83 	bl	800db64 <memset>
    memset(tekTesirText, 0, 17);
 8007c5e:	2211      	movs	r2, #17
 8007c60:	2100      	movs	r1, #0
 8007c62:	4884      	ldr	r0, [pc, #528]	@ (8007e74 <resetMenuTexts+0x42c>)
 8007c64:	f005 ff7e 	bl	800db64 <memset>
    memset(ciftTesirText, 0, 17);
 8007c68:	2211      	movs	r2, #17
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	4882      	ldr	r0, [pc, #520]	@ (8007e78 <resetMenuTexts+0x430>)
 8007c6e:	f005 ff79 	bl	800db64 <memset>
    memset(platformSilindirTipiText, 0, 17);
 8007c72:	2211      	movs	r2, #17
 8007c74:	2100      	movs	r1, #0
 8007c76:	4881      	ldr	r0, [pc, #516]	@ (8007e7c <resetMenuTexts+0x434>)
 8007c78:	f005 ff74 	bl	800db64 <memset>
    memset(yukariValfSureText, 0, 17);
 8007c7c:	2211      	movs	r2, #17
 8007c7e:	2100      	movs	r1, #0
 8007c80:	487f      	ldr	r0, [pc, #508]	@ (8007e80 <resetMenuTexts+0x438>)
 8007c82:	f005 ff6f 	bl	800db64 <memset>
    memset(asagiValfSureText, 0, 17);
 8007c86:	2211      	movs	r2, #17
 8007c88:	2100      	movs	r1, #0
 8007c8a:	487e      	ldr	r0, [pc, #504]	@ (8007e84 <resetMenuTexts+0x43c>)
 8007c8c:	f005 ff6a 	bl	800db64 <memset>
    memset(devirmeYukariValfSureText, 0, 17);
 8007c90:	2211      	movs	r2, #17
 8007c92:	2100      	movs	r1, #0
 8007c94:	487c      	ldr	r0, [pc, #496]	@ (8007e88 <resetMenuTexts+0x440>)
 8007c96:	f005 ff65 	bl	800db64 <memset>
    memset(ileriValfSureText, 0, 17);
 8007c9a:	2211      	movs	r2, #17
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	487b      	ldr	r0, [pc, #492]	@ (8007e8c <resetMenuTexts+0x444>)
 8007ca0:	f005 ff60 	bl	800db64 <memset>
    memset(devirmeAsagiValfSureText, 0, 17);
 8007ca4:	2211      	movs	r2, #17
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	4879      	ldr	r0, [pc, #484]	@ (8007e90 <resetMenuTexts+0x448>)
 8007caa:	f005 ff5b 	bl	800db64 <memset>
    memset(geriValfSureText, 0, 17);
 8007cae:	2211      	movs	r2, #17
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	4878      	ldr	r0, [pc, #480]	@ (8007e94 <resetMenuTexts+0x44c>)
 8007cb4:	f005 ff56 	bl	800db64 <memset>
    memset(calismaSuresiText, 0, 17);
 8007cb8:	2211      	movs	r2, #17
 8007cba:	2100      	movs	r1, #0
 8007cbc:	4876      	ldr	r0, [pc, #472]	@ (8007e98 <resetMenuTexts+0x450>)
 8007cbe:	f005 ff51 	bl	800db64 <memset>
    memset(calismaSayisiText, 0, 17);
 8007cc2:	2211      	movs	r2, #17
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	4875      	ldr	r0, [pc, #468]	@ (8007e9c <resetMenuTexts+0x454>)
 8007cc8:	f005 ff4c 	bl	800db64 <memset>
    memset(enterlaSifirlaText, 0, 17);
 8007ccc:	2211      	movs	r2, #17
 8007cce:	2100      	movs	r1, #0
 8007cd0:	4873      	ldr	r0, [pc, #460]	@ (8007ea0 <resetMenuTexts+0x458>)
 8007cd2:	f005 ff47 	bl	800db64 <memset>
    memset(dilSecimText, 0, 17);
 8007cd6:	2211      	movs	r2, #17
 8007cd8:	2100      	movs	r1, #0
 8007cda:	4872      	ldr	r0, [pc, #456]	@ (8007ea4 <resetMenuTexts+0x45c>)
 8007cdc:	f005 ff42 	bl	800db64 <memset>
    memset(secilenDilText, 0, 17);
 8007ce0:	2211      	movs	r2, #17
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	4870      	ldr	r0, [pc, #448]	@ (8007ea8 <resetMenuTexts+0x460>)
 8007ce6:	f005 ff3d 	bl	800db64 <memset>
    memset(menudenCikisText, 0, 17);
 8007cea:	2211      	movs	r2, #17
 8007cec:	2100      	movs	r1, #0
 8007cee:	486f      	ldr	r0, [pc, #444]	@ (8007eac <resetMenuTexts+0x464>)
 8007cf0:	f005 ff38 	bl	800db64 <memset>
    memset(enteraBasinizText, 0, 17);
 8007cf4:	2211      	movs	r2, #17
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	486d      	ldr	r0, [pc, #436]	@ (8007eb0 <resetMenuTexts+0x468>)
 8007cfa:	f005 ff33 	bl	800db64 <memset>
    memset(hataKoduText, 0, 17);
 8007cfe:	2211      	movs	r2, #17
 8007d00:	2100      	movs	r1, #0
 8007d02:	486c      	ldr	r0, [pc, #432]	@ (8007eb4 <resetMenuTexts+0x46c>)
 8007d04:	f005 ff2e 	bl	800db64 <memset>
    memset(dataSynchText, 0, 17);
 8007d08:	2211      	movs	r2, #17
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	486a      	ldr	r0, [pc, #424]	@ (8007eb8 <resetMenuTexts+0x470>)
 8007d0e:	f005 ff29 	bl	800db64 <memset>
    memset(dataSynch2Text, 0, 17);
 8007d12:	2211      	movs	r2, #17
 8007d14:	2100      	movs	r1, #0
 8007d16:	4869      	ldr	r0, [pc, #420]	@ (8007ebc <resetMenuTexts+0x474>)
 8007d18:	f005 ff24 	bl	800db64 <memset>
    memset(mustBeUniqueText, 0, 17);
 8007d1c:	2211      	movs	r2, #17
 8007d1e:	2100      	movs	r1, #0
 8007d20:	4867      	ldr	r0, [pc, #412]	@ (8007ec0 <resetMenuTexts+0x478>)
 8007d22:	f005 ff1f 	bl	800db64 <memset>
    memset(mustBeUnique2Text, 0, 17);
 8007d26:	2211      	movs	r2, #17
 8007d28:	2100      	movs	r1, #0
 8007d2a:	4866      	ldr	r0, [pc, #408]	@ (8007ec4 <resetMenuTexts+0x47c>)
 8007d2c:	f005 ff1a 	bl	800db64 <memset>
    memset(mustBe12Text, 0, 17);
 8007d30:	2211      	movs	r2, #17
 8007d32:	2100      	movs	r1, #0
 8007d34:	4864      	ldr	r0, [pc, #400]	@ (8007ec8 <resetMenuTexts+0x480>)
 8007d36:	f005 ff15 	bl	800db64 <memset>
    memset(mustBe122Text, 0, 17);
 8007d3a:	2211      	movs	r2, #17
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	4863      	ldr	r0, [pc, #396]	@ (8007ecc <resetMenuTexts+0x484>)
 8007d40:	f005 ff10 	bl	800db64 <memset>
    memset(ssidExceedErrorText, 0, 17);
 8007d44:	2211      	movs	r2, #17
 8007d46:	2100      	movs	r1, #0
 8007d48:	4861      	ldr	r0, [pc, #388]	@ (8007ed0 <resetMenuTexts+0x488>)
 8007d4a:	f005 ff0b 	bl	800db64 <memset>
    memset(ssidExceedError2Text, 0, 17);
 8007d4e:	2211      	movs	r2, #17
 8007d50:	2100      	movs	r1, #0
 8007d52:	4860      	ldr	r0, [pc, #384]	@ (8007ed4 <resetMenuTexts+0x48c>)
 8007d54:	f005 ff06 	bl	800db64 <memset>
    memset(passExceedErrorText, 0, 17);
 8007d58:	2211      	movs	r2, #17
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	485e      	ldr	r0, [pc, #376]	@ (8007ed8 <resetMenuTexts+0x490>)
 8007d5e:	f005 ff01 	bl	800db64 <memset>
    memset(passExceedError2Text, 0, 17);
 8007d62:	2211      	movs	r2, #17
 8007d64:	2100      	movs	r1, #0
 8007d66:	485d      	ldr	r0, [pc, #372]	@ (8007edc <resetMenuTexts+0x494>)
 8007d68:	f005 fefc 	bl	800db64 <memset>
    memset(dataYazildiText, 0, 17);
 8007d6c:	2211      	movs	r2, #17
 8007d6e:	2100      	movs	r1, #0
 8007d70:	485b      	ldr	r0, [pc, #364]	@ (8007ee0 <resetMenuTexts+0x498>)
 8007d72:	f005 fef7 	bl	800db64 <memset>
    memset(dataOkunuyorText, 0, 17);
 8007d76:	2211      	movs	r2, #17
 8007d78:	2100      	movs	r1, #0
 8007d7a:	485a      	ldr	r0, [pc, #360]	@ (8007ee4 <resetMenuTexts+0x49c>)
 8007d7c:	f005 fef2 	bl	800db64 <memset>
    memset(dataOkunduText, 0, 17);
 8007d80:	2211      	movs	r2, #17
 8007d82:	2100      	movs	r1, #0
 8007d84:	4858      	ldr	r0, [pc, #352]	@ (8007ee8 <resetMenuTexts+0x4a0>)
 8007d86:	f005 feed 	bl	800db64 <memset>
    memset(degerKaydedildiText, 0, 17);
 8007d8a:	2211      	movs	r2, #17
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	4857      	ldr	r0, [pc, #348]	@ (8007eec <resetMenuTexts+0x4a4>)
 8007d90:	f005 fee8 	bl	800db64 <memset>
    memset(errorCodeText, 0, 17);
 8007d94:	2211      	movs	r2, #17
 8007d96:	2100      	movs	r1, #0
 8007d98:	4855      	ldr	r0, [pc, #340]	@ (8007ef0 <resetMenuTexts+0x4a8>)
 8007d9a:	f005 fee3 	bl	800db64 <memset>
 8007d9e:	e0a9      	b.n	8007ef4 <resetMenuTexts+0x4ac>
 8007da0:	20001620 	.word	0x20001620
 8007da4:	20001634 	.word	0x20001634
 8007da8:	20001648 	.word	0x20001648
 8007dac:	2000165c 	.word	0x2000165c
 8007db0:	20001670 	.word	0x20001670
 8007db4:	20001684 	.word	0x20001684
 8007db8:	20001698 	.word	0x20001698
 8007dbc:	200016ac 	.word	0x200016ac
 8007dc0:	200016c0 	.word	0x200016c0
 8007dc4:	200016d4 	.word	0x200016d4
 8007dc8:	200016e8 	.word	0x200016e8
 8007dcc:	200016fc 	.word	0x200016fc
 8007dd0:	20001710 	.word	0x20001710
 8007dd4:	20001724 	.word	0x20001724
 8007dd8:	20001738 	.word	0x20001738
 8007ddc:	2000174c 	.word	0x2000174c
 8007de0:	20001760 	.word	0x20001760
 8007de4:	20001774 	.word	0x20001774
 8007de8:	20001788 	.word	0x20001788
 8007dec:	2000179c 	.word	0x2000179c
 8007df0:	200017b0 	.word	0x200017b0
 8007df4:	200017c4 	.word	0x200017c4
 8007df8:	200017d8 	.word	0x200017d8
 8007dfc:	200017ec 	.word	0x200017ec
 8007e00:	20001800 	.word	0x20001800
 8007e04:	20001814 	.word	0x20001814
 8007e08:	20001828 	.word	0x20001828
 8007e0c:	2000183c 	.word	0x2000183c
 8007e10:	20001850 	.word	0x20001850
 8007e14:	20001864 	.word	0x20001864
 8007e18:	20001878 	.word	0x20001878
 8007e1c:	2000188c 	.word	0x2000188c
 8007e20:	200018a0 	.word	0x200018a0
 8007e24:	200018b4 	.word	0x200018b4
 8007e28:	200018c8 	.word	0x200018c8
 8007e2c:	200018dc 	.word	0x200018dc
 8007e30:	200018f0 	.word	0x200018f0
 8007e34:	20001904 	.word	0x20001904
 8007e38:	20001918 	.word	0x20001918
 8007e3c:	2000192c 	.word	0x2000192c
 8007e40:	20001940 	.word	0x20001940
 8007e44:	20001954 	.word	0x20001954
 8007e48:	20001968 	.word	0x20001968
 8007e4c:	2000197c 	.word	0x2000197c
 8007e50:	20001990 	.word	0x20001990
 8007e54:	200019a4 	.word	0x200019a4
 8007e58:	200019b8 	.word	0x200019b8
 8007e5c:	200019cc 	.word	0x200019cc
 8007e60:	200019e0 	.word	0x200019e0
 8007e64:	200019f4 	.word	0x200019f4
 8007e68:	20001a08 	.word	0x20001a08
 8007e6c:	20001a1c 	.word	0x20001a1c
 8007e70:	20001a30 	.word	0x20001a30
 8007e74:	20001a44 	.word	0x20001a44
 8007e78:	20001a58 	.word	0x20001a58
 8007e7c:	20001a6c 	.word	0x20001a6c
 8007e80:	20001a80 	.word	0x20001a80
 8007e84:	20001a94 	.word	0x20001a94
 8007e88:	20001aa8 	.word	0x20001aa8
 8007e8c:	20001abc 	.word	0x20001abc
 8007e90:	20001ad0 	.word	0x20001ad0
 8007e94:	20001ae4 	.word	0x20001ae4
 8007e98:	20001af8 	.word	0x20001af8
 8007e9c:	20001b0c 	.word	0x20001b0c
 8007ea0:	20001b20 	.word	0x20001b20
 8007ea4:	20001b34 	.word	0x20001b34
 8007ea8:	20001b48 	.word	0x20001b48
 8007eac:	20001b5c 	.word	0x20001b5c
 8007eb0:	20001b70 	.word	0x20001b70
 8007eb4:	20001b84 	.word	0x20001b84
 8007eb8:	20001b98 	.word	0x20001b98
 8007ebc:	20001bac 	.word	0x20001bac
 8007ec0:	20001bc0 	.word	0x20001bc0
 8007ec4:	20001bd4 	.word	0x20001bd4
 8007ec8:	20001be8 	.word	0x20001be8
 8007ecc:	20001bfc 	.word	0x20001bfc
 8007ed0:	20001c10 	.word	0x20001c10
 8007ed4:	20001c24 	.word	0x20001c24
 8007ed8:	20001c38 	.word	0x20001c38
 8007edc:	20001c4c 	.word	0x20001c4c
 8007ee0:	20001c60 	.word	0x20001c60
 8007ee4:	20001c74 	.word	0x20001c74
 8007ee8:	20001c88 	.word	0x20001c88
 8007eec:	20001c9c 	.word	0x20001c9c
 8007ef0:	20001cb0 	.word	0x20001cb0
    memset(machineIDText, 0, 17);
 8007ef4:	2211      	movs	r2, #17
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	4809      	ldr	r0, [pc, #36]	@ (8007f20 <resetMenuTexts+0x4d8>)
 8007efa:	f005 fe33 	bl	800db64 <memset>
    memset(idConfirmationText, 0, 17);
 8007efe:	2211      	movs	r2, #17
 8007f00:	2100      	movs	r1, #0
 8007f02:	4808      	ldr	r0, [pc, #32]	@ (8007f24 <resetMenuTexts+0x4dc>)
 8007f04:	f005 fe2e 	bl	800db64 <memset>
    memset(idConfirmationSubText, 0, 17);
 8007f08:	2211      	movs	r2, #17
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	4806      	ldr	r0, [pc, #24]	@ (8007f28 <resetMenuTexts+0x4e0>)
 8007f0e:	f005 fe29 	bl	800db64 <memset>
    memset(wifiConfirmationText, 0, 17);
 8007f12:	2211      	movs	r2, #17
 8007f14:	2100      	movs	r1, #0
 8007f16:	4805      	ldr	r0, [pc, #20]	@ (8007f2c <resetMenuTexts+0x4e4>)
 8007f18:	f005 fe24 	bl	800db64 <memset>
}
 8007f1c:	bf00      	nop
 8007f1e:	bd80      	pop	{r7, pc}
 8007f20:	20001cc4 	.word	0x20001cc4
 8007f24:	20001cd8 	.word	0x20001cd8
 8007f28:	20001cec 	.word	0x20001cec
 8007f2c:	20001d00 	.word	0x20001d00

08007f30 <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8007f36:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007f3a:	f001 fdb7 	bl	8009aac <HAL_Delay>
	int confirmationVal = 0;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8007f42:	e012      	b.n	8007f6a <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 8007f44:	4a12      	ldr	r2, [pc, #72]	@ (8007f90 <takeMachineIDWithConfirmation+0x60>)
 8007f46:	2101      	movs	r1, #1
 8007f48:	2001      	movs	r0, #1
 8007f4a:	f001 f83b 	bl	8008fc4 <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 8007f4e:	4a11      	ldr	r2, [pc, #68]	@ (8007f94 <takeMachineIDWithConfirmation+0x64>)
 8007f50:	2101      	movs	r1, #1
 8007f52:	2002      	movs	r0, #2
 8007f54:	f001 f836 	bl	8008fc4 <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 8007f58:	2102      	movs	r1, #2
 8007f5a:	480f      	ldr	r0, [pc, #60]	@ (8007f98 <takeMachineIDWithConfirmation+0x68>)
 8007f5c:	f002 fb76 	bl	800a64c <HAL_GPIO_ReadPin>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d101      	bne.n	8007f6a <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 8007f66:	2301      	movs	r3, #1
 8007f68:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d0e9      	beq.n	8007f44 <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 8007f70:	f000 f814 	bl	8007f9c <takeMachineID>

	convertArrays(1);
 8007f74:	2001      	movs	r0, #1
 8007f76:	f7f8 fc97 	bl	80008a8 <convertArrays>
	HAL_Delay(50);
 8007f7a:	2032      	movs	r0, #50	@ 0x32
 8007f7c:	f001 fd96 	bl	8009aac <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 8007f80:	2001      	movs	r0, #1
 8007f82:	f7f9 fabf 	bl	8001504 <printCredentials>
}
 8007f86:	bf00      	nop
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	20001cd8 	.word	0x20001cd8
 8007f94:	20001cec 	.word	0x20001cec
 8007f98:	40010800 	.word	0x40010800

08007f9c <takeMachineID>:

void takeMachineID() {
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b086      	sub	sp, #24
 8007fa0:	af00      	add	r7, sp, #0
	mainSection:

	lcd_cursor(1);
 8007fa2:	2001      	movs	r0, #1
 8007fa4:	f001 f86c 	bl	8009080 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8007fa8:	220c      	movs	r2, #12
 8007faa:	2100      	movs	r1, #0
 8007fac:	48a6      	ldr	r0, [pc, #664]	@ (8008248 <takeMachineID+0x2ac>)
 8007fae:	f005 fdd9 	bl	800db64 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8007fb2:	2305      	movs	r3, #5
 8007fb4:	617b      	str	r3, [r7, #20]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	613b      	str	r3, [r7, #16]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8007fba:	2300      	movs	r3, #0
 8007fbc:	60fb      	str	r3, [r7, #12]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8007fbe:	4ba3      	ldr	r3, [pc, #652]	@ (800824c <takeMachineID+0x2b0>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	60bb      	str	r3, [r7, #8]

    printTemplate(1, 0);
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	2001      	movs	r0, #1
 8007fc8:	f7f9 f92c 	bl	8001224 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007fcc:	2108      	movs	r1, #8
 8007fce:	48a0      	ldr	r0, [pc, #640]	@ (8008250 <takeMachineID+0x2b4>)
 8007fd0:	f002 fb3c 	bl	800a64c <HAL_GPIO_ReadPin>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d12f      	bne.n	800803a <takeMachineID+0x9e>
        	lcd_cursor(0);
 8007fda:	2000      	movs	r0, #0
 8007fdc:	f001 f850 	bl	8009080 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8007fe0:	f000 fe2a 	bl	8008c38 <checkEEPROM4ID>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d00e      	beq.n	8008008 <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 8007fea:	4a9a      	ldr	r2, [pc, #616]	@ (8008254 <takeMachineID+0x2b8>)
 8007fec:	2101      	movs	r1, #1
 8007fee:	2001      	movs	r0, #1
 8007ff0:	f000 ffe8 	bl	8008fc4 <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 8007ff4:	4a98      	ldr	r2, [pc, #608]	@ (8008258 <takeMachineID+0x2bc>)
 8007ff6:	2101      	movs	r1, #1
 8007ff8:	2002      	movs	r0, #2
 8007ffa:	f000 ffe3 	bl	8008fc4 <lcd_print>
        		HAL_Delay(1250);
 8007ffe:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8008002:	f001 fd53 	bl	8009aac <HAL_Delay>

        		goto mainSection;
 8008006:	e7cc      	b.n	8007fa2 <takeMachineID+0x6>
        	//int machineIDControl = 0;
        	//for(int i=0; i<2; i++) {
        		//machineIDControl = checkMachineID(&huart1, machineID);
        	//}

        	int adminPassword = az5();
 8008008:	f000 fe3c 	bl	8008c84 <az5>
 800800c:	6078      	str	r0, [r7, #4]

        	if(adminPassword == 1) {
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2b01      	cmp	r3, #1
 8008012:	d103      	bne.n	800801c <takeMachineID+0x80>
        		saveEEPROM(1);
 8008014:	2001      	movs	r0, #1
 8008016:	f7f8 fb45 	bl	80006a4 <saveEEPROM>
 800801a:	e00e      	b.n	800803a <takeMachineID+0x9e>
        	} else {
        		//Özel mesaj ayarlanacak
        		lcd_print(1, 1, mustBeUniqueText);
 800801c:	4a8f      	ldr	r2, [pc, #572]	@ (800825c <takeMachineID+0x2c0>)
 800801e:	2101      	movs	r1, #1
 8008020:	2001      	movs	r0, #1
 8008022:	f000 ffcf 	bl	8008fc4 <lcd_print>
        		lcd_print(2, 1, mustBeUnique2Text);
 8008026:	4a8e      	ldr	r2, [pc, #568]	@ (8008260 <takeMachineID+0x2c4>)
 8008028:	2101      	movs	r1, #1
 800802a:	2002      	movs	r0, #2
 800802c:	f000 ffca 	bl	8008fc4 <lcd_print>

        		HAL_Delay(500);
 8008030:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008034:	f001 fd3a 	bl	8009aac <HAL_Delay>

        		goto mainSection;
 8008038:	e7b3      	b.n	8007fa2 <takeMachineID+0x6>
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800803a:	2101      	movs	r1, #1
 800803c:	4884      	ldr	r0, [pc, #528]	@ (8008250 <takeMachineID+0x2b4>)
 800803e:	f002 fb05 	bl	800a64c <HAL_GPIO_ReadPin>
 8008042:	4603      	mov	r3, r0
 8008044:	2b01      	cmp	r3, #1
 8008046:	d111      	bne.n	800806c <takeMachineID+0xd0>
        	if(cursorPosition == 7) {
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	2b07      	cmp	r3, #7
 800804c:	d102      	bne.n	8008054 <takeMachineID+0xb8>
        		cursorPosition = 10;
 800804e:	230a      	movs	r3, #10
 8008050:	613b      	str	r3, [r7, #16]
 8008052:	e008      	b.n	8008066 <takeMachineID+0xca>
        	} else if (cursorPosition == 14) {
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	2b0e      	cmp	r3, #14
 8008058:	d102      	bne.n	8008060 <takeMachineID+0xc4>
                cursorPosition = 3;
 800805a:	2303      	movs	r3, #3
 800805c:	613b      	str	r3, [r7, #16]
 800805e:	e002      	b.n	8008066 <takeMachineID+0xca>
            } else {
            	cursorPosition++;
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	3301      	adds	r3, #1
 8008064:	613b      	str	r3, [r7, #16]
            }

        	HAL_Delay(150);
 8008066:	2096      	movs	r0, #150	@ 0x96
 8008068:	f001 fd20 	bl	8009aac <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800806c:	2108      	movs	r1, #8
 800806e:	487d      	ldr	r0, [pc, #500]	@ (8008264 <takeMachineID+0x2c8>)
 8008070:	f002 faec 	bl	800a64c <HAL_GPIO_ReadPin>
 8008074:	4603      	mov	r3, r0
 8008076:	2b01      	cmp	r3, #1
 8008078:	d111      	bne.n	800809e <takeMachineID+0x102>
            if (cursorPosition == 3) {
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	2b03      	cmp	r3, #3
 800807e:	d102      	bne.n	8008086 <takeMachineID+0xea>
                cursorPosition = 14;
 8008080:	230e      	movs	r3, #14
 8008082:	613b      	str	r3, [r7, #16]
 8008084:	e008      	b.n	8008098 <takeMachineID+0xfc>
            } else if(cursorPosition == 10) {
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	2b0a      	cmp	r3, #10
 800808a:	d102      	bne.n	8008092 <takeMachineID+0xf6>
            	cursorPosition = 7;
 800808c:	2307      	movs	r3, #7
 800808e:	613b      	str	r3, [r7, #16]
 8008090:	e002      	b.n	8008098 <takeMachineID+0xfc>
            } else {
            	cursorPosition--;
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	3b01      	subs	r3, #1
 8008096:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(250);
 8008098:	20fa      	movs	r0, #250	@ 0xfa
 800809a:	f001 fd07 	bl	8009aac <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800809e:	2102      	movs	r1, #2
 80080a0:	486b      	ldr	r0, [pc, #428]	@ (8008250 <takeMachineID+0x2b4>)
 80080a2:	f002 fad3 	bl	800a64c <HAL_GPIO_ReadPin>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	f040 80a1 	bne.w	80081f0 <takeMachineID+0x254>
        	if(cursorPosition == 3) {
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	2b03      	cmp	r3, #3
 80080b2:	d10a      	bne.n	80080ca <takeMachineID+0x12e>
        		machineID[arrayPos] = '0';
 80080b4:	4a64      	ldr	r2, [pc, #400]	@ (8008248 <takeMachineID+0x2ac>)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4413      	add	r3, r2
 80080ba:	2230      	movs	r2, #48	@ 0x30
 80080bc:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 80080be:	4a6a      	ldr	r2, [pc, #424]	@ (8008268 <takeMachineID+0x2cc>)
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	4413      	add	r3, r2
 80080c4:	2200      	movs	r2, #0
 80080c6:	701a      	strb	r2, [r3, #0]
 80080c8:	e07c      	b.n	80081c4 <takeMachineID+0x228>
        	} else if(cursorPosition == 4) {
 80080ca:	693b      	ldr	r3, [r7, #16]
 80080cc:	2b04      	cmp	r3, #4
 80080ce:	d10a      	bne.n	80080e6 <takeMachineID+0x14a>
        		machineID[arrayPos] = '1';
 80080d0:	4a5d      	ldr	r2, [pc, #372]	@ (8008248 <takeMachineID+0x2ac>)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	4413      	add	r3, r2
 80080d6:	2231      	movs	r2, #49	@ 0x31
 80080d8:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 80080da:	4a63      	ldr	r2, [pc, #396]	@ (8008268 <takeMachineID+0x2cc>)
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	4413      	add	r3, r2
 80080e0:	2201      	movs	r2, #1
 80080e2:	701a      	strb	r2, [r3, #0]
 80080e4:	e06e      	b.n	80081c4 <takeMachineID+0x228>
        	} else if(cursorPosition == 5) {
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	2b05      	cmp	r3, #5
 80080ea:	d10a      	bne.n	8008102 <takeMachineID+0x166>
        		machineID[arrayPos] = '2';
 80080ec:	4a56      	ldr	r2, [pc, #344]	@ (8008248 <takeMachineID+0x2ac>)
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	4413      	add	r3, r2
 80080f2:	2232      	movs	r2, #50	@ 0x32
 80080f4:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 80080f6:	4a5c      	ldr	r2, [pc, #368]	@ (8008268 <takeMachineID+0x2cc>)
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	4413      	add	r3, r2
 80080fc:	2202      	movs	r2, #2
 80080fe:	701a      	strb	r2, [r3, #0]
 8008100:	e060      	b.n	80081c4 <takeMachineID+0x228>
        	} else if(cursorPosition == 6) {
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	2b06      	cmp	r3, #6
 8008106:	d10a      	bne.n	800811e <takeMachineID+0x182>
        		machineID[arrayPos] = '3';
 8008108:	4a4f      	ldr	r2, [pc, #316]	@ (8008248 <takeMachineID+0x2ac>)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	4413      	add	r3, r2
 800810e:	2233      	movs	r2, #51	@ 0x33
 8008110:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8008112:	4a55      	ldr	r2, [pc, #340]	@ (8008268 <takeMachineID+0x2cc>)
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	4413      	add	r3, r2
 8008118:	2203      	movs	r2, #3
 800811a:	701a      	strb	r2, [r3, #0]
 800811c:	e052      	b.n	80081c4 <takeMachineID+0x228>
        	} else if(cursorPosition == 7) {
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	2b07      	cmp	r3, #7
 8008122:	d10a      	bne.n	800813a <takeMachineID+0x19e>
        		machineID[arrayPos] = '4';
 8008124:	4a48      	ldr	r2, [pc, #288]	@ (8008248 <takeMachineID+0x2ac>)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	4413      	add	r3, r2
 800812a:	2234      	movs	r2, #52	@ 0x34
 800812c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 800812e:	4a4e      	ldr	r2, [pc, #312]	@ (8008268 <takeMachineID+0x2cc>)
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	4413      	add	r3, r2
 8008134:	2204      	movs	r2, #4
 8008136:	701a      	strb	r2, [r3, #0]
 8008138:	e044      	b.n	80081c4 <takeMachineID+0x228>
        	} else if(cursorPosition == 10) {
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	2b0a      	cmp	r3, #10
 800813e:	d10a      	bne.n	8008156 <takeMachineID+0x1ba>
        		machineID[arrayPos] = '5';
 8008140:	4a41      	ldr	r2, [pc, #260]	@ (8008248 <takeMachineID+0x2ac>)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	4413      	add	r3, r2
 8008146:	2235      	movs	r2, #53	@ 0x35
 8008148:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 800814a:	4a47      	ldr	r2, [pc, #284]	@ (8008268 <takeMachineID+0x2cc>)
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	4413      	add	r3, r2
 8008150:	2205      	movs	r2, #5
 8008152:	701a      	strb	r2, [r3, #0]
 8008154:	e036      	b.n	80081c4 <takeMachineID+0x228>
        	} else if(cursorPosition == 11) {
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	2b0b      	cmp	r3, #11
 800815a:	d10a      	bne.n	8008172 <takeMachineID+0x1d6>
        		machineID[arrayPos] = '6';
 800815c:	4a3a      	ldr	r2, [pc, #232]	@ (8008248 <takeMachineID+0x2ac>)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	4413      	add	r3, r2
 8008162:	2236      	movs	r2, #54	@ 0x36
 8008164:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8008166:	4a40      	ldr	r2, [pc, #256]	@ (8008268 <takeMachineID+0x2cc>)
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	4413      	add	r3, r2
 800816c:	2206      	movs	r2, #6
 800816e:	701a      	strb	r2, [r3, #0]
 8008170:	e028      	b.n	80081c4 <takeMachineID+0x228>
        	} else if(cursorPosition == 12) {
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	2b0c      	cmp	r3, #12
 8008176:	d10a      	bne.n	800818e <takeMachineID+0x1f2>
        		machineID[arrayPos] = '7';
 8008178:	4a33      	ldr	r2, [pc, #204]	@ (8008248 <takeMachineID+0x2ac>)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	4413      	add	r3, r2
 800817e:	2237      	movs	r2, #55	@ 0x37
 8008180:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8008182:	4a39      	ldr	r2, [pc, #228]	@ (8008268 <takeMachineID+0x2cc>)
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	4413      	add	r3, r2
 8008188:	2207      	movs	r2, #7
 800818a:	701a      	strb	r2, [r3, #0]
 800818c:	e01a      	b.n	80081c4 <takeMachineID+0x228>
        	} else if(cursorPosition == 13) {
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	2b0d      	cmp	r3, #13
 8008192:	d10a      	bne.n	80081aa <takeMachineID+0x20e>
        		machineID[arrayPos] = '8';
 8008194:	4a2c      	ldr	r2, [pc, #176]	@ (8008248 <takeMachineID+0x2ac>)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	4413      	add	r3, r2
 800819a:	2238      	movs	r2, #56	@ 0x38
 800819c:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 800819e:	4a32      	ldr	r2, [pc, #200]	@ (8008268 <takeMachineID+0x2cc>)
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	4413      	add	r3, r2
 80081a4:	2208      	movs	r2, #8
 80081a6:	701a      	strb	r2, [r3, #0]
 80081a8:	e00c      	b.n	80081c4 <takeMachineID+0x228>
        	} else if(cursorPosition == 14) {
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	2b0e      	cmp	r3, #14
 80081ae:	d109      	bne.n	80081c4 <takeMachineID+0x228>
        		machineID[arrayPos] = '9';
 80081b0:	4a25      	ldr	r2, [pc, #148]	@ (8008248 <takeMachineID+0x2ac>)
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	4413      	add	r3, r2
 80081b6:	2239      	movs	r2, #57	@ 0x39
 80081b8:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 80081ba:	4a2b      	ldr	r2, [pc, #172]	@ (8008268 <takeMachineID+0x2cc>)
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	4413      	add	r3, r2
 80081c0:	2209      	movs	r2, #9
 80081c2:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	b2d9      	uxtb	r1, r3
 80081c8:	4a1f      	ldr	r2, [pc, #124]	@ (8008248 <takeMachineID+0x2ac>)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	4413      	add	r3, r2
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	461a      	mov	r2, r3
 80081d2:	2001      	movs	r0, #1
 80081d4:	f000 ff0b 	bl	8008fee <lcd_print_char>

        	writeLoc++;
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	3301      	adds	r3, #1
 80081dc:	617b      	str	r3, [r7, #20]
        	arrayPos++;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	3301      	adds	r3, #1
 80081e2:	60fb      	str	r3, [r7, #12]
        	eepromVal++;
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	3301      	adds	r3, #1
 80081e8:	60bb      	str	r3, [r7, #8]

        	HAL_Delay(150);
 80081ea:	2096      	movs	r0, #150	@ 0x96
 80081ec:	f001 fc5e 	bl	8009aac <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80081f0:	2104      	movs	r1, #4
 80081f2:	4817      	ldr	r0, [pc, #92]	@ (8008250 <takeMachineID+0x2b4>)
 80081f4:	f002 fa2a 	bl	800a64c <HAL_GPIO_ReadPin>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d14c      	bne.n	8008298 <takeMachineID+0x2fc>
            if(strlen(machineID) >= 1) {
 80081fe:	4b12      	ldr	r3, [pc, #72]	@ (8008248 <takeMachineID+0x2ac>)
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d045      	beq.n	8008292 <takeMachineID+0x2f6>
                machineID[arrayPos] = '\0';
 8008206:	4a10      	ldr	r2, [pc, #64]	@ (8008248 <takeMachineID+0x2ac>)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	4413      	add	r3, r2
 800820c:	2200      	movs	r2, #0
 800820e:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8008210:	4a15      	ldr	r2, [pc, #84]	@ (8008268 <takeMachineID+0x2cc>)
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	4413      	add	r3, r2
 8008216:	2200      	movs	r2, #0
 8008218:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	2b05      	cmp	r3, #5
 800821e:	dd03      	ble.n	8008228 <takeMachineID+0x28c>
                	writeLoc--;
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	3b01      	subs	r3, #1
 8008224:	617b      	str	r3, [r7, #20]
 8008226:	e004      	b.n	8008232 <takeMachineID+0x296>
                } else if(writeLoc < 5) {
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	2b04      	cmp	r3, #4
 800822c:	dc01      	bgt.n	8008232 <takeMachineID+0x296>
                	writeLoc = 5;
 800822e:	2305      	movs	r3, #5
 8008230:	617b      	str	r3, [r7, #20]
                }

                if(arrayPos > 0) {
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2b00      	cmp	r3, #0
 8008236:	dd19      	ble.n	800826c <takeMachineID+0x2d0>
                	arrayPos--;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	3b01      	subs	r3, #1
 800823c:	60fb      	str	r3, [r7, #12]
                	eepromVal--;
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	3b01      	subs	r3, #1
 8008242:	60bb      	str	r3, [r7, #8]
 8008244:	e01a      	b.n	800827c <takeMachineID+0x2e0>
 8008246:	bf00      	nop
 8008248:	20001064 	.word	0x20001064
 800824c:	20000000 	.word	0x20000000
 8008250:	40010800 	.word	0x40010800
 8008254:	20001be8 	.word	0x20001be8
 8008258:	20001bfc 	.word	0x20001bfc
 800825c:	20001bc0 	.word	0x20001bc0
 8008260:	20001bd4 	.word	0x20001bd4
 8008264:	40011000 	.word	0x40011000
 8008268:	20000fec 	.word	0x20000fec
                } else if(arrayPos < 0) {
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2b00      	cmp	r3, #0
 8008270:	da04      	bge.n	800827c <takeMachineID+0x2e0>
                	arrayPos = 0;
 8008272:	2300      	movs	r3, #0
 8008274:	60fb      	str	r3, [r7, #12]
                	eepromVal = idStartPos;
 8008276:	4b0c      	ldr	r3, [pc, #48]	@ (80082a8 <takeMachineID+0x30c>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	60bb      	str	r3, [r7, #8]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	b2db      	uxtb	r3, r3
 8008280:	3305      	adds	r3, #5
 8008282:	b2db      	uxtb	r3, r3
 8008284:	4619      	mov	r1, r3
 8008286:	2001      	movs	r0, #1
 8008288:	f000 fed2 	bl	8009030 <lcd_delete_char>
                HAL_Delay(50);
 800828c:	2032      	movs	r0, #50	@ 0x32
 800828e:	f001 fc0d 	bl	8009aac <HAL_Delay>
            }

            HAL_Delay(150);
 8008292:	2096      	movs	r0, #150	@ 0x96
 8008294:	f001 fc0a 	bl	8009aac <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	b2db      	uxtb	r3, r3
 800829c:	4619      	mov	r1, r3
 800829e:	2002      	movs	r0, #2
 80082a0:	f000 fe71 	bl	8008f86 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80082a4:	e692      	b.n	8007fcc <takeMachineID+0x30>
 80082a6:	bf00      	nop
 80082a8:	20000000 	.word	0x20000000

080082ac <ssidConfirmation>:
    }
}

uint8_t ssidConfirmation() {
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b082      	sub	sp, #8
 80082b0:	af00      	add	r7, sp, #0
	int loopVal = 1;
 80082b2:	2301      	movs	r3, #1
 80082b4:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 80082b6:	4a1e      	ldr	r2, [pc, #120]	@ (8008330 <ssidConfirmation+0x84>)
 80082b8:	2101      	movs	r1, #1
 80082ba:	2001      	movs	r0, #1
 80082bc:	f000 fe82 	bl	8008fc4 <lcd_print>

	while(loopVal == 1) {
 80082c0:	e012      	b.n	80082e8 <ssidConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 80082c2:	4a1c      	ldr	r2, [pc, #112]	@ (8008334 <ssidConfirmation+0x88>)
 80082c4:	2101      	movs	r1, #1
 80082c6:	2002      	movs	r0, #2
 80082c8:	f000 fe7c 	bl	8008fc4 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80082cc:	2102      	movs	r1, #2
 80082ce:	481a      	ldr	r0, [pc, #104]	@ (8008338 <ssidConfirmation+0x8c>)
 80082d0:	f002 f9bc 	bl	800a64c <HAL_GPIO_ReadPin>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d101      	bne.n	80082de <ssidConfirmation+0x32>
			loopVal = 0;
 80082da:	2300      	movs	r3, #0
 80082dc:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiSSID);
 80082de:	4a17      	ldr	r2, [pc, #92]	@ (800833c <ssidConfirmation+0x90>)
 80082e0:	2101      	movs	r1, #1
 80082e2:	2001      	movs	r0, #1
 80082e4:	f000 fe6e 	bl	8008fc4 <lcd_print>
	while(loopVal == 1) {
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d0e9      	beq.n	80082c2 <ssidConfirmation+0x16>
	}

    lcd_cursor(0);
 80082ee:	2000      	movs	r0, #0
 80082f0:	f000 fec6 	bl	8009080 <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 80082f4:	4811      	ldr	r0, [pc, #68]	@ (800833c <ssidConfirmation+0x90>)
 80082f6:	f7f7 ff95 	bl	8000224 <strlen>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b14      	cmp	r3, #20
 80082fe:	d90f      	bls.n	8008320 <ssidConfirmation+0x74>
    	lcd_print(1, 1, ssidExceedErrorText);
 8008300:	4a0f      	ldr	r2, [pc, #60]	@ (8008340 <ssidConfirmation+0x94>)
 8008302:	2101      	movs	r1, #1
 8008304:	2001      	movs	r0, #1
 8008306:	f000 fe5d 	bl	8008fc4 <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 800830a:	4a0e      	ldr	r2, [pc, #56]	@ (8008344 <ssidConfirmation+0x98>)
 800830c:	2101      	movs	r1, #1
 800830e:	2002      	movs	r0, #2
 8008310:	f000 fe58 	bl	8008fc4 <lcd_print>
        HAL_Delay(1250);
 8008314:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8008318:	f001 fbc8 	bl	8009aac <HAL_Delay>

        return 0;
 800831c:	2300      	movs	r3, #0
 800831e:	e003      	b.n	8008328 <ssidConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 8008320:	2001      	movs	r0, #1
 8008322:	f7f8 f9bf 	bl	80006a4 <saveEEPROM>

    	return 1;
 8008326:	2301      	movs	r3, #1
    }
}
 8008328:	4618      	mov	r0, r3
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	0800f0b4 	.word	0x0800f0b4
 8008334:	20001d00 	.word	0x20001d00
 8008338:	40010800 	.word	0x40010800
 800833c:	20001070 	.word	0x20001070
 8008340:	20001c10 	.word	0x20001c10
 8008344:	20001c24 	.word	0x20001c24

08008348 <takeWifiSSID>:

void takeWifiSSID() {
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 800834e:	2001      	movs	r0, #1
 8008350:	f000 fe96 	bl	8009080 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 8008354:	2210      	movs	r2, #16
 8008356:	2100      	movs	r1, #0
 8008358:	48a4      	ldr	r0, [pc, #656]	@ (80085ec <takeWifiSSID+0x2a4>)
 800835a:	f005 fc03 	bl	800db64 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 800835e:	2301      	movs	r3, #1
 8008360:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8008362:	2307      	movs	r3, #7
 8008364:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8008366:	2301      	movs	r3, #1
 8008368:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 800836a:	2300      	movs	r3, #0
 800836c:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 800836e:	4ba0      	ldr	r3, [pc, #640]	@ (80085f0 <takeWifiSSID+0x2a8>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8008374:	2101      	movs	r1, #1
 8008376:	2002      	movs	r0, #2
 8008378:	f7f8 ff54 	bl	8001224 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800837c:	2108      	movs	r1, #8
 800837e:	489d      	ldr	r0, [pc, #628]	@ (80085f4 <takeWifiSSID+0x2ac>)
 8008380:	f002 f964 	bl	800a64c <HAL_GPIO_ReadPin>
 8008384:	4603      	mov	r3, r0
 8008386:	2b01      	cmp	r3, #1
 8008388:	d106      	bne.n	8008398 <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 800838a:	f7ff ff8f 	bl	80082ac <ssidConfirmation>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	f040 8126 	bne.w	80085e2 <takeWifiSSID+0x29a>
        		goto mainSSIDSection;
 8008396:	e7da      	b.n	800834e <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008398:	2101      	movs	r1, #1
 800839a:	4896      	ldr	r0, [pc, #600]	@ (80085f4 <takeWifiSSID+0x2ac>)
 800839c:	f002 f956 	bl	800a64c <HAL_GPIO_ReadPin>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d14d      	bne.n	8008442 <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2b50      	cmp	r3, #80	@ 0x50
 80083aa:	dd01      	ble.n	80083b0 <takeWifiSSID+0x68>
        		cursorPosition = 1;
 80083ac:	2301      	movs	r3, #1
 80083ae:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2b10      	cmp	r3, #16
 80083b4:	d13f      	bne.n	8008436 <takeWifiSSID+0xee>
            	if(page == 1) {
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d109      	bne.n	80083d0 <takeWifiSSID+0x88>
            		cursorPosition = 1;
 80083bc:	2301      	movs	r3, #1
 80083be:	60fb      	str	r3, [r7, #12]
            		page++;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	3301      	adds	r3, #1
 80083c4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80083c6:	2102      	movs	r1, #2
 80083c8:	2002      	movs	r0, #2
 80083ca:	f7f8 ff2b 	bl	8001224 <printTemplate>
 80083ce:	e035      	b.n	800843c <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d109      	bne.n	80083ea <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 80083d6:	2301      	movs	r3, #1
 80083d8:	60fb      	str	r3, [r7, #12]
            		page++;
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	3301      	adds	r3, #1
 80083de:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 80083e0:	2103      	movs	r1, #3
 80083e2:	2002      	movs	r0, #2
 80083e4:	f7f8 ff1e 	bl	8001224 <printTemplate>
 80083e8:	e028      	b.n	800843c <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	2b03      	cmp	r3, #3
 80083ee:	d109      	bne.n	8008404 <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 80083f0:	2301      	movs	r3, #1
 80083f2:	60fb      	str	r3, [r7, #12]
            		page++;
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	3301      	adds	r3, #1
 80083f8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 80083fa:	2104      	movs	r1, #4
 80083fc:	2002      	movs	r0, #2
 80083fe:	f7f8 ff11 	bl	8001224 <printTemplate>
 8008402:	e01b      	b.n	800843c <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	2b04      	cmp	r3, #4
 8008408:	d109      	bne.n	800841e <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 800840a:	2301      	movs	r3, #1
 800840c:	60fb      	str	r3, [r7, #12]
            		page++;
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	3301      	adds	r3, #1
 8008412:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8008414:	2105      	movs	r1, #5
 8008416:	2002      	movs	r0, #2
 8008418:	f7f8 ff04 	bl	8001224 <printTemplate>
 800841c:	e00e      	b.n	800843c <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2b05      	cmp	r3, #5
 8008422:	d10b      	bne.n	800843c <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 8008424:	2301      	movs	r3, #1
 8008426:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008428:	2301      	movs	r3, #1
 800842a:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 800842c:	2101      	movs	r1, #1
 800842e:	2002      	movs	r0, #2
 8008430:	f7f8 fef8 	bl	8001224 <printTemplate>
 8008434:	e002      	b.n	800843c <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3301      	adds	r3, #1
 800843a:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800843c:	2096      	movs	r0, #150	@ 0x96
 800843e:	f001 fb35 	bl	8009aac <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8008442:	2108      	movs	r1, #8
 8008444:	486c      	ldr	r0, [pc, #432]	@ (80085f8 <takeWifiSSID+0x2b0>)
 8008446:	f002 f901 	bl	800a64c <HAL_GPIO_ReadPin>
 800844a:	4603      	mov	r3, r0
 800844c:	2b01      	cmp	r3, #1
 800844e:	d149      	bne.n	80084e4 <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2b00      	cmp	r3, #0
 8008454:	dc01      	bgt.n	800845a <takeWifiSSID+0x112>
        		cursorPosition = 80;
 8008456:	2350      	movs	r3, #80	@ 0x50
 8008458:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2b01      	cmp	r3, #1
 800845e:	d13b      	bne.n	80084d8 <takeWifiSSID+0x190>
            	if(page == 1) {
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d108      	bne.n	8008478 <takeWifiSSID+0x130>
            		cursorPosition = 16;
 8008466:	2310      	movs	r3, #16
 8008468:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800846a:	2305      	movs	r3, #5
 800846c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 800846e:	2105      	movs	r1, #5
 8008470:	2002      	movs	r0, #2
 8008472:	f7f8 fed7 	bl	8001224 <printTemplate>
 8008476:	e032      	b.n	80084de <takeWifiSSID+0x196>
            	} else if(page == 2) {
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	2b02      	cmp	r3, #2
 800847c:	d108      	bne.n	8008490 <takeWifiSSID+0x148>
            		cursorPosition = 16;
 800847e:	2310      	movs	r3, #16
 8008480:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008482:	2301      	movs	r3, #1
 8008484:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8008486:	2101      	movs	r1, #1
 8008488:	2002      	movs	r0, #2
 800848a:	f7f8 fecb 	bl	8001224 <printTemplate>
 800848e:	e026      	b.n	80084de <takeWifiSSID+0x196>
            	} else if(page == 3) {
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	2b03      	cmp	r3, #3
 8008494:	d108      	bne.n	80084a8 <takeWifiSSID+0x160>
            		cursorPosition = 16;
 8008496:	2310      	movs	r3, #16
 8008498:	60fb      	str	r3, [r7, #12]
            		page = 2;
 800849a:	2302      	movs	r3, #2
 800849c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 800849e:	2102      	movs	r1, #2
 80084a0:	2002      	movs	r0, #2
 80084a2:	f7f8 febf 	bl	8001224 <printTemplate>
 80084a6:	e01a      	b.n	80084de <takeWifiSSID+0x196>
            	} else if(page == 4) {
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	2b04      	cmp	r3, #4
 80084ac:	d108      	bne.n	80084c0 <takeWifiSSID+0x178>
            		cursorPosition = 16;
 80084ae:	2310      	movs	r3, #16
 80084b0:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80084b2:	2303      	movs	r3, #3
 80084b4:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 80084b6:	2103      	movs	r1, #3
 80084b8:	2002      	movs	r0, #2
 80084ba:	f7f8 feb3 	bl	8001224 <printTemplate>
 80084be:	e00e      	b.n	80084de <takeWifiSSID+0x196>
            	} else if(page == 5) {
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	2b05      	cmp	r3, #5
 80084c4:	d10b      	bne.n	80084de <takeWifiSSID+0x196>
            		cursorPosition = 16;
 80084c6:	2310      	movs	r3, #16
 80084c8:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80084ca:	2304      	movs	r3, #4
 80084cc:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 80084ce:	2104      	movs	r1, #4
 80084d0:	2002      	movs	r0, #2
 80084d2:	f7f8 fea7 	bl	8001224 <printTemplate>
 80084d6:	e002      	b.n	80084de <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	3b01      	subs	r3, #1
 80084dc:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80084de:	2096      	movs	r0, #150	@ 0x96
 80084e0:	f001 fae4 	bl	8009aac <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80084e4:	2102      	movs	r1, #2
 80084e6:	4843      	ldr	r0, [pc, #268]	@ (80085f4 <takeWifiSSID+0x2ac>)
 80084e8:	f002 f8b0 	bl	800a64c <HAL_GPIO_ReadPin>
 80084ec:	4603      	mov	r3, r0
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d12f      	bne.n	8008552 <takeWifiSSID+0x20a>
            eepromData[eepromVal] = cursorPosition;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	b2d9      	uxtb	r1, r3
 80084f6:	4a41      	ldr	r2, [pc, #260]	@ (80085fc <takeWifiSSID+0x2b4>)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4413      	add	r3, r2
 80084fc:	460a      	mov	r2, r1
 80084fe:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 8008500:	4a3f      	ldr	r2, [pc, #252]	@ (8008600 <takeWifiSSID+0x2b8>)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	4413      	add	r3, r2
 8008506:	7819      	ldrb	r1, [r3, #0]
 8008508:	4a38      	ldr	r2, [pc, #224]	@ (80085ec <takeWifiSSID+0x2a4>)
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	4413      	add	r3, r2
 800850e:	460a      	mov	r2, r1
 8008510:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	b2d9      	uxtb	r1, r3
 8008516:	4a3a      	ldr	r2, [pc, #232]	@ (8008600 <takeWifiSSID+0x2b8>)
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	4413      	add	r3, r2
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	2001      	movs	r0, #1
 8008522:	f000 fd64 	bl	8008fee <lcd_print_char>

            writeLoc++;
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	3301      	adds	r3, #1
 800852a:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	3301      	adds	r3, #1
 8008530:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	3301      	adds	r3, #1
 8008536:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8008538:	4a30      	ldr	r2, [pc, #192]	@ (80085fc <takeWifiSSID+0x2b4>)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4413      	add	r3, r2
 800853e:	2200      	movs	r2, #0
 8008540:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 8008542:	4a2a      	ldr	r2, [pc, #168]	@ (80085ec <takeWifiSSID+0x2a4>)
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	4413      	add	r3, r2
 8008548:	2200      	movs	r2, #0
 800854a:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 800854c:	2096      	movs	r0, #150	@ 0x96
 800854e:	f001 faad 	bl	8009aac <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008552:	2104      	movs	r1, #4
 8008554:	4827      	ldr	r0, [pc, #156]	@ (80085f4 <takeWifiSSID+0x2ac>)
 8008556:	f002 f879 	bl	800a64c <HAL_GPIO_ReadPin>
 800855a:	4603      	mov	r3, r0
 800855c:	2b01      	cmp	r3, #1
 800855e:	d139      	bne.n	80085d4 <takeWifiSSID+0x28c>
        	if(strlen(wifiSSID) >= 1) {
 8008560:	4b22      	ldr	r3, [pc, #136]	@ (80085ec <takeWifiSSID+0x2a4>)
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d032      	beq.n	80085ce <takeWifiSSID+0x286>
        		eepromData[eepromVal] = '\0';
 8008568:	4a24      	ldr	r2, [pc, #144]	@ (80085fc <takeWifiSSID+0x2b4>)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4413      	add	r3, r2
 800856e:	2200      	movs	r2, #0
 8008570:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 8008572:	4a1e      	ldr	r2, [pc, #120]	@ (80085ec <takeWifiSSID+0x2a4>)
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	4413      	add	r3, r2
 8008578:	2200      	movs	r2, #0
 800857a:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 800857c:	693b      	ldr	r3, [r7, #16]
 800857e:	2b07      	cmp	r3, #7
 8008580:	dd03      	ble.n	800858a <takeWifiSSID+0x242>
        			writeLoc--;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	3b01      	subs	r3, #1
 8008586:	613b      	str	r3, [r7, #16]
 8008588:	e004      	b.n	8008594 <takeWifiSSID+0x24c>
        		} else if(writeLoc < 7) {
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	2b06      	cmp	r3, #6
 800858e:	dc01      	bgt.n	8008594 <takeWifiSSID+0x24c>
        			writeLoc = 7;
 8008590:	2307      	movs	r3, #7
 8008592:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	2b00      	cmp	r3, #0
 8008598:	dd06      	ble.n	80085a8 <takeWifiSSID+0x260>
        			arrayPosition--;
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	3b01      	subs	r3, #1
 800859e:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	3b01      	subs	r3, #1
 80085a4:	607b      	str	r3, [r7, #4]
 80085a6:	e007      	b.n	80085b8 <takeWifiSSID+0x270>
        		} else if(arrayPosition < 0) {
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	da04      	bge.n	80085b8 <takeWifiSSID+0x270>
        			arrayPosition = 0;
 80085ae:	2300      	movs	r3, #0
 80085b0:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 80085b2:	4b0f      	ldr	r3, [pc, #60]	@ (80085f0 <takeWifiSSID+0x2a8>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	3307      	adds	r3, #7
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	4619      	mov	r1, r3
 80085c2:	2001      	movs	r0, #1
 80085c4:	f000 fd34 	bl	8009030 <lcd_delete_char>
        		HAL_Delay(50);
 80085c8:	2032      	movs	r0, #50	@ 0x32
 80085ca:	f001 fa6f 	bl	8009aac <HAL_Delay>
        	}

        	HAL_Delay(150);
 80085ce:	2096      	movs	r0, #150	@ 0x96
 80085d0:	f001 fa6c 	bl	8009aac <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	4619      	mov	r1, r3
 80085da:	2002      	movs	r0, #2
 80085dc:	f000 fcd3 	bl	8008f86 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80085e0:	e6cc      	b.n	800837c <takeWifiSSID+0x34>
        		break;
 80085e2:	bf00      	nop
    }
}
 80085e4:	bf00      	nop
 80085e6:	3718      	adds	r7, #24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	20001070 	.word	0x20001070
 80085f0:	20000004 	.word	0x20000004
 80085f4:	40010800 	.word	0x40010800
 80085f8:	40011000 	.word	0x40011000
 80085fc:	20000fec 	.word	0x20000fec
 8008600:	20000018 	.word	0x20000018

08008604 <passConfirmation>:

uint8_t passConfirmation() {
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
	int loopVal = 1;
 800860a:	2301      	movs	r3, #1
 800860c:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 800860e:	4a1e      	ldr	r2, [pc, #120]	@ (8008688 <passConfirmation+0x84>)
 8008610:	2101      	movs	r1, #1
 8008612:	2001      	movs	r0, #1
 8008614:	f000 fcd6 	bl	8008fc4 <lcd_print>

	while(loopVal == 1) {
 8008618:	e012      	b.n	8008640 <passConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 800861a:	4a1c      	ldr	r2, [pc, #112]	@ (800868c <passConfirmation+0x88>)
 800861c:	2101      	movs	r1, #1
 800861e:	2002      	movs	r0, #2
 8008620:	f000 fcd0 	bl	8008fc4 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008624:	2102      	movs	r1, #2
 8008626:	481a      	ldr	r0, [pc, #104]	@ (8008690 <passConfirmation+0x8c>)
 8008628:	f002 f810 	bl	800a64c <HAL_GPIO_ReadPin>
 800862c:	4603      	mov	r3, r0
 800862e:	2b01      	cmp	r3, #1
 8008630:	d101      	bne.n	8008636 <passConfirmation+0x32>
			loopVal = 0;
 8008632:	2300      	movs	r3, #0
 8008634:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiPass);
 8008636:	4a17      	ldr	r2, [pc, #92]	@ (8008694 <passConfirmation+0x90>)
 8008638:	2101      	movs	r1, #1
 800863a:	2001      	movs	r0, #1
 800863c:	f000 fcc2 	bl	8008fc4 <lcd_print>
	while(loopVal == 1) {
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b01      	cmp	r3, #1
 8008644:	d0e9      	beq.n	800861a <passConfirmation+0x16>
	}

    lcd_cursor(0);
 8008646:	2000      	movs	r0, #0
 8008648:	f000 fd1a 	bl	8009080 <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 800864c:	4811      	ldr	r0, [pc, #68]	@ (8008694 <passConfirmation+0x90>)
 800864e:	f7f7 fde9 	bl	8000224 <strlen>
 8008652:	4603      	mov	r3, r0
 8008654:	2b14      	cmp	r3, #20
 8008656:	d90f      	bls.n	8008678 <passConfirmation+0x74>
    	lcd_print(1, 1, passExceedErrorText);
 8008658:	4a0f      	ldr	r2, [pc, #60]	@ (8008698 <passConfirmation+0x94>)
 800865a:	2101      	movs	r1, #1
 800865c:	2001      	movs	r0, #1
 800865e:	f000 fcb1 	bl	8008fc4 <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 8008662:	4a0e      	ldr	r2, [pc, #56]	@ (800869c <passConfirmation+0x98>)
 8008664:	2101      	movs	r1, #1
 8008666:	2002      	movs	r0, #2
 8008668:	f000 fcac 	bl	8008fc4 <lcd_print>
        HAL_Delay(1250);
 800866c:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8008670:	f001 fa1c 	bl	8009aac <HAL_Delay>

        return 0;
 8008674:	2300      	movs	r3, #0
 8008676:	e003      	b.n	8008680 <passConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 8008678:	2001      	movs	r0, #1
 800867a:	f7f8 f813 	bl	80006a4 <saveEEPROM>

    	return 1;
 800867e:	2301      	movs	r3, #1
    }
}
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	0800f0b4 	.word	0x0800f0b4
 800868c:	20001d00 	.word	0x20001d00
 8008690:	40010800 	.word	0x40010800
 8008694:	20001080 	.word	0x20001080
 8008698:	20001c38 	.word	0x20001c38
 800869c:	20001c4c 	.word	0x20001c4c

080086a0 <takeWifiPass>:

void takeWifiPass() {
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b086      	sub	sp, #24
 80086a4:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 80086a6:	2001      	movs	r0, #1
 80086a8:	f000 fcea 	bl	8009080 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 80086ac:	2210      	movs	r2, #16
 80086ae:	2100      	movs	r1, #0
 80086b0:	48a4      	ldr	r0, [pc, #656]	@ (8008944 <takeWifiPass+0x2a4>)
 80086b2:	f005 fa57 	bl	800db64 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80086b6:	2301      	movs	r3, #1
 80086b8:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80086ba:	2307      	movs	r3, #7
 80086bc:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80086be:	2301      	movs	r3, #1
 80086c0:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80086c2:	2300      	movs	r3, #0
 80086c4:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80086c6:	4ba0      	ldr	r3, [pc, #640]	@ (8008948 <takeWifiPass+0x2a8>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 80086cc:	2101      	movs	r1, #1
 80086ce:	2003      	movs	r0, #3
 80086d0:	f7f8 fda8 	bl	8001224 <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80086d4:	2108      	movs	r1, #8
 80086d6:	489d      	ldr	r0, [pc, #628]	@ (800894c <takeWifiPass+0x2ac>)
 80086d8:	f001 ffb8 	bl	800a64c <HAL_GPIO_ReadPin>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b01      	cmp	r3, #1
 80086e0:	d106      	bne.n	80086f0 <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 80086e2:	f7ff ff8f 	bl	8008604 <passConfirmation>
 80086e6:	4603      	mov	r3, r0
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f040 8126 	bne.w	800893a <takeWifiPass+0x29a>
    	        goto mainPassSection;
 80086ee:	e7da      	b.n	80086a6 <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80086f0:	2101      	movs	r1, #1
 80086f2:	4896      	ldr	r0, [pc, #600]	@ (800894c <takeWifiPass+0x2ac>)
 80086f4:	f001 ffaa 	bl	800a64c <HAL_GPIO_ReadPin>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d14d      	bne.n	800879a <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2b50      	cmp	r3, #80	@ 0x50
 8008702:	dd01      	ble.n	8008708 <takeWifiPass+0x68>
        		cursorPosition = 1;
 8008704:	2301      	movs	r3, #1
 8008706:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2b10      	cmp	r3, #16
 800870c:	d13f      	bne.n	800878e <takeWifiPass+0xee>
            	if(page == 1) {
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2b01      	cmp	r3, #1
 8008712:	d109      	bne.n	8008728 <takeWifiPass+0x88>
            		cursorPosition = 1;
 8008714:	2301      	movs	r3, #1
 8008716:	60fb      	str	r3, [r7, #12]
            		page++;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	3301      	adds	r3, #1
 800871c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 800871e:	2102      	movs	r1, #2
 8008720:	2003      	movs	r0, #3
 8008722:	f7f8 fd7f 	bl	8001224 <printTemplate>
 8008726:	e035      	b.n	8008794 <takeWifiPass+0xf4>
            	} else if(page == 2) {
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	2b02      	cmp	r3, #2
 800872c:	d109      	bne.n	8008742 <takeWifiPass+0xa2>
            		cursorPosition = 1;
 800872e:	2301      	movs	r3, #1
 8008730:	60fb      	str	r3, [r7, #12]
            		page++;
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	3301      	adds	r3, #1
 8008736:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8008738:	2103      	movs	r1, #3
 800873a:	2003      	movs	r0, #3
 800873c:	f7f8 fd72 	bl	8001224 <printTemplate>
 8008740:	e028      	b.n	8008794 <takeWifiPass+0xf4>
            	} else if(page == 3) {
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	2b03      	cmp	r3, #3
 8008746:	d109      	bne.n	800875c <takeWifiPass+0xbc>
            		cursorPosition = 1;
 8008748:	2301      	movs	r3, #1
 800874a:	60fb      	str	r3, [r7, #12]
            		page++;
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	3301      	adds	r3, #1
 8008750:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8008752:	2104      	movs	r1, #4
 8008754:	2003      	movs	r0, #3
 8008756:	f7f8 fd65 	bl	8001224 <printTemplate>
 800875a:	e01b      	b.n	8008794 <takeWifiPass+0xf4>
            	} else if(page == 4) {
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	2b04      	cmp	r3, #4
 8008760:	d109      	bne.n	8008776 <takeWifiPass+0xd6>
            		cursorPosition = 1;
 8008762:	2301      	movs	r3, #1
 8008764:	60fb      	str	r3, [r7, #12]
            		page++;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	3301      	adds	r3, #1
 800876a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 800876c:	2105      	movs	r1, #5
 800876e:	2003      	movs	r0, #3
 8008770:	f7f8 fd58 	bl	8001224 <printTemplate>
 8008774:	e00e      	b.n	8008794 <takeWifiPass+0xf4>
            	} else if(page == 5) {
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	2b05      	cmp	r3, #5
 800877a:	d10b      	bne.n	8008794 <takeWifiPass+0xf4>
            		cursorPosition = 1;
 800877c:	2301      	movs	r3, #1
 800877e:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008780:	2301      	movs	r3, #1
 8008782:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8008784:	2101      	movs	r1, #1
 8008786:	2003      	movs	r0, #3
 8008788:	f7f8 fd4c 	bl	8001224 <printTemplate>
 800878c:	e002      	b.n	8008794 <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	3301      	adds	r3, #1
 8008792:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008794:	2096      	movs	r0, #150	@ 0x96
 8008796:	f001 f989 	bl	8009aac <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800879a:	2108      	movs	r1, #8
 800879c:	486c      	ldr	r0, [pc, #432]	@ (8008950 <takeWifiPass+0x2b0>)
 800879e:	f001 ff55 	bl	800a64c <HAL_GPIO_ReadPin>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d149      	bne.n	800883c <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	dc01      	bgt.n	80087b2 <takeWifiPass+0x112>
        		cursorPosition = 80;
 80087ae:	2350      	movs	r3, #80	@ 0x50
 80087b0:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d13b      	bne.n	8008830 <takeWifiPass+0x190>
            	if(page == 1) {
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	2b01      	cmp	r3, #1
 80087bc:	d108      	bne.n	80087d0 <takeWifiPass+0x130>
            		cursorPosition = 16;
 80087be:	2310      	movs	r3, #16
 80087c0:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80087c2:	2305      	movs	r3, #5
 80087c4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80087c6:	2105      	movs	r1, #5
 80087c8:	2003      	movs	r0, #3
 80087ca:	f7f8 fd2b 	bl	8001224 <printTemplate>
 80087ce:	e032      	b.n	8008836 <takeWifiPass+0x196>
            	} else if(page == 2) {
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d108      	bne.n	80087e8 <takeWifiPass+0x148>
            		cursorPosition = 16;
 80087d6:	2310      	movs	r3, #16
 80087d8:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80087da:	2301      	movs	r3, #1
 80087dc:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80087de:	2101      	movs	r1, #1
 80087e0:	2003      	movs	r0, #3
 80087e2:	f7f8 fd1f 	bl	8001224 <printTemplate>
 80087e6:	e026      	b.n	8008836 <takeWifiPass+0x196>
            	} else if(page == 3) {
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	2b03      	cmp	r3, #3
 80087ec:	d108      	bne.n	8008800 <takeWifiPass+0x160>
            		cursorPosition = 16;
 80087ee:	2310      	movs	r3, #16
 80087f0:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80087f2:	2302      	movs	r3, #2
 80087f4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80087f6:	2102      	movs	r1, #2
 80087f8:	2003      	movs	r0, #3
 80087fa:	f7f8 fd13 	bl	8001224 <printTemplate>
 80087fe:	e01a      	b.n	8008836 <takeWifiPass+0x196>
            	} else if(page == 4) {
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	2b04      	cmp	r3, #4
 8008804:	d108      	bne.n	8008818 <takeWifiPass+0x178>
            		cursorPosition = 16;
 8008806:	2310      	movs	r3, #16
 8008808:	60fb      	str	r3, [r7, #12]
            		page = 3;
 800880a:	2303      	movs	r3, #3
 800880c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 800880e:	2103      	movs	r1, #3
 8008810:	2003      	movs	r0, #3
 8008812:	f7f8 fd07 	bl	8001224 <printTemplate>
 8008816:	e00e      	b.n	8008836 <takeWifiPass+0x196>
            	} else if(page == 5) {
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	2b05      	cmp	r3, #5
 800881c:	d10b      	bne.n	8008836 <takeWifiPass+0x196>
            		cursorPosition = 16;
 800881e:	2310      	movs	r3, #16
 8008820:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8008822:	2304      	movs	r3, #4
 8008824:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8008826:	2104      	movs	r1, #4
 8008828:	2003      	movs	r0, #3
 800882a:	f7f8 fcfb 	bl	8001224 <printTemplate>
 800882e:	e002      	b.n	8008836 <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	3b01      	subs	r3, #1
 8008834:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008836:	2096      	movs	r0, #150	@ 0x96
 8008838:	f001 f938 	bl	8009aac <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800883c:	2102      	movs	r1, #2
 800883e:	4843      	ldr	r0, [pc, #268]	@ (800894c <takeWifiPass+0x2ac>)
 8008840:	f001 ff04 	bl	800a64c <HAL_GPIO_ReadPin>
 8008844:	4603      	mov	r3, r0
 8008846:	2b01      	cmp	r3, #1
 8008848:	d12f      	bne.n	80088aa <takeWifiPass+0x20a>
            eepromData[eepromVal] = cursorPosition;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	b2d9      	uxtb	r1, r3
 800884e:	4a41      	ldr	r2, [pc, #260]	@ (8008954 <takeWifiPass+0x2b4>)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4413      	add	r3, r2
 8008854:	460a      	mov	r2, r1
 8008856:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 8008858:	4a3f      	ldr	r2, [pc, #252]	@ (8008958 <takeWifiPass+0x2b8>)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	4413      	add	r3, r2
 800885e:	7819      	ldrb	r1, [r3, #0]
 8008860:	4a38      	ldr	r2, [pc, #224]	@ (8008944 <takeWifiPass+0x2a4>)
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	4413      	add	r3, r2
 8008866:	460a      	mov	r2, r1
 8008868:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	b2d9      	uxtb	r1, r3
 800886e:	4a3a      	ldr	r2, [pc, #232]	@ (8008958 <takeWifiPass+0x2b8>)
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	4413      	add	r3, r2
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	461a      	mov	r2, r3
 8008878:	2001      	movs	r0, #1
 800887a:	f000 fbb8 	bl	8008fee <lcd_print_char>

            writeLoc++;
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	3301      	adds	r3, #1
 8008882:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	3301      	adds	r3, #1
 8008888:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	3301      	adds	r3, #1
 800888e:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8008890:	4a30      	ldr	r2, [pc, #192]	@ (8008954 <takeWifiPass+0x2b4>)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4413      	add	r3, r2
 8008896:	2200      	movs	r2, #0
 8008898:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 800889a:	4a2a      	ldr	r2, [pc, #168]	@ (8008944 <takeWifiPass+0x2a4>)
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	4413      	add	r3, r2
 80088a0:	2200      	movs	r2, #0
 80088a2:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80088a4:	2096      	movs	r0, #150	@ 0x96
 80088a6:	f001 f901 	bl	8009aac <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80088aa:	2104      	movs	r1, #4
 80088ac:	4827      	ldr	r0, [pc, #156]	@ (800894c <takeWifiPass+0x2ac>)
 80088ae:	f001 fecd 	bl	800a64c <HAL_GPIO_ReadPin>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d139      	bne.n	800892c <takeWifiPass+0x28c>
        	if(strlen(wifiPass) >= 1) {
 80088b8:	4b22      	ldr	r3, [pc, #136]	@ (8008944 <takeWifiPass+0x2a4>)
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d032      	beq.n	8008926 <takeWifiPass+0x286>
        		eepromData[eepromVal] = '\0';
 80088c0:	4a24      	ldr	r2, [pc, #144]	@ (8008954 <takeWifiPass+0x2b4>)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4413      	add	r3, r2
 80088c6:	2200      	movs	r2, #0
 80088c8:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 80088ca:	4a1e      	ldr	r2, [pc, #120]	@ (8008944 <takeWifiPass+0x2a4>)
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	4413      	add	r3, r2
 80088d0:	2200      	movs	r2, #0
 80088d2:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	2b07      	cmp	r3, #7
 80088d8:	dd03      	ble.n	80088e2 <takeWifiPass+0x242>
        			writeLoc--;
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	3b01      	subs	r3, #1
 80088de:	613b      	str	r3, [r7, #16]
 80088e0:	e004      	b.n	80088ec <takeWifiPass+0x24c>
        		} else if(writeLoc < 7) {
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	2b06      	cmp	r3, #6
 80088e6:	dc01      	bgt.n	80088ec <takeWifiPass+0x24c>
        			writeLoc = 7;
 80088e8:	2307      	movs	r3, #7
 80088ea:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	dd06      	ble.n	8008900 <takeWifiPass+0x260>
        			arrayPosition--;
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	3b01      	subs	r3, #1
 80088f6:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	3b01      	subs	r3, #1
 80088fc:	607b      	str	r3, [r7, #4]
 80088fe:	e007      	b.n	8008910 <takeWifiPass+0x270>
        		} else if(arrayPosition < 0) {
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	2b00      	cmp	r3, #0
 8008904:	da04      	bge.n	8008910 <takeWifiPass+0x270>
        			arrayPosition = 0;
 8008906:	2300      	movs	r3, #0
 8008908:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 800890a:	4b0f      	ldr	r3, [pc, #60]	@ (8008948 <takeWifiPass+0x2a8>)
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	b2db      	uxtb	r3, r3
 8008914:	3307      	adds	r3, #7
 8008916:	b2db      	uxtb	r3, r3
 8008918:	4619      	mov	r1, r3
 800891a:	2001      	movs	r0, #1
 800891c:	f000 fb88 	bl	8009030 <lcd_delete_char>
        		HAL_Delay(50);
 8008920:	2032      	movs	r0, #50	@ 0x32
 8008922:	f001 f8c3 	bl	8009aac <HAL_Delay>
        	}

        	HAL_Delay(150);
 8008926:	2096      	movs	r0, #150	@ 0x96
 8008928:	f001 f8c0 	bl	8009aac <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	b2db      	uxtb	r3, r3
 8008930:	4619      	mov	r1, r3
 8008932:	2002      	movs	r0, #2
 8008934:	f000 fb27 	bl	8008f86 <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008938:	e6cc      	b.n	80086d4 <takeWifiPass+0x34>
    	        break;
 800893a:	bf00      	nop
    }
}
 800893c:	bf00      	nop
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}
 8008944:	20001080 	.word	0x20001080
 8008948:	20000008 	.word	0x20000008
 800894c:	40010800 	.word	0x40010800
 8008950:	40011000 	.word	0x40011000
 8008954:	20000fec 	.word	0x20000fec
 8008958:	20000018 	.word	0x20000018

0800895c <mergeData>:

char* mergeData() {
 800895c:	b580      	push	{r7, lr}
 800895e:	b09c      	sub	sp, #112	@ 0x70
 8008960:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8008962:	2300      	movs	r3, #0
 8008964:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008966:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800896a:	2229      	movs	r2, #41	@ 0x29
 800896c:	2100      	movs	r1, #0
 800896e:	4618      	mov	r0, r3
 8008970:	f005 f8f8 	bl	800db64 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8008974:	4b5f      	ldr	r3, [pc, #380]	@ (8008af4 <mergeData+0x198>)
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	703b      	strb	r3, [r7, #0]
 800897a:	4b5f      	ldr	r3, [pc, #380]	@ (8008af8 <mergeData+0x19c>)
 800897c:	781b      	ldrb	r3, [r3, #0]
 800897e:	707b      	strb	r3, [r7, #1]
 8008980:	4b5e      	ldr	r3, [pc, #376]	@ (8008afc <mergeData+0x1a0>)
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	70bb      	strb	r3, [r7, #2]
 8008986:	4b5e      	ldr	r3, [pc, #376]	@ (8008b00 <mergeData+0x1a4>)
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	70fb      	strb	r3, [r7, #3]
 800898c:	4b5d      	ldr	r3, [pc, #372]	@ (8008b04 <mergeData+0x1a8>)
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	713b      	strb	r3, [r7, #4]
 8008992:	4b5d      	ldr	r3, [pc, #372]	@ (8008b08 <mergeData+0x1ac>)
 8008994:	781b      	ldrb	r3, [r3, #0]
 8008996:	717b      	strb	r3, [r7, #5]
 8008998:	4b5c      	ldr	r3, [pc, #368]	@ (8008b0c <mergeData+0x1b0>)
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	71bb      	strb	r3, [r7, #6]
 800899e:	4b5c      	ldr	r3, [pc, #368]	@ (8008b10 <mergeData+0x1b4>)
 80089a0:	781b      	ldrb	r3, [r3, #0]
 80089a2:	71fb      	strb	r3, [r7, #7]
 80089a4:	4b5b      	ldr	r3, [pc, #364]	@ (8008b14 <mergeData+0x1b8>)
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	723b      	strb	r3, [r7, #8]
 80089aa:	4b5b      	ldr	r3, [pc, #364]	@ (8008b18 <mergeData+0x1bc>)
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	727b      	strb	r3, [r7, #9]
 80089b0:	4b5a      	ldr	r3, [pc, #360]	@ (8008b1c <mergeData+0x1c0>)
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	72bb      	strb	r3, [r7, #10]
 80089b6:	4b5a      	ldr	r3, [pc, #360]	@ (8008b20 <mergeData+0x1c4>)
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	72fb      	strb	r3, [r7, #11]
 80089bc:	4b59      	ldr	r3, [pc, #356]	@ (8008b24 <mergeData+0x1c8>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	733b      	strb	r3, [r7, #12]
 80089c2:	4b59      	ldr	r3, [pc, #356]	@ (8008b28 <mergeData+0x1cc>)
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	737b      	strb	r3, [r7, #13]
 80089c8:	4b58      	ldr	r3, [pc, #352]	@ (8008b2c <mergeData+0x1d0>)
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	73bb      	strb	r3, [r7, #14]
 80089ce:	4b58      	ldr	r3, [pc, #352]	@ (8008b30 <mergeData+0x1d4>)
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	73fb      	strb	r3, [r7, #15]
 80089d4:	4b57      	ldr	r3, [pc, #348]	@ (8008b34 <mergeData+0x1d8>)
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	743b      	strb	r3, [r7, #16]
 80089da:	4b57      	ldr	r3, [pc, #348]	@ (8008b38 <mergeData+0x1dc>)
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	747b      	strb	r3, [r7, #17]
 80089e0:	4b56      	ldr	r3, [pc, #344]	@ (8008b3c <mergeData+0x1e0>)
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	74bb      	strb	r3, [r7, #18]
 80089e6:	4b56      	ldr	r3, [pc, #344]	@ (8008b40 <mergeData+0x1e4>)
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	74fb      	strb	r3, [r7, #19]
 80089ec:	4b55      	ldr	r3, [pc, #340]	@ (8008b44 <mergeData+0x1e8>)
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	753b      	strb	r3, [r7, #20]
 80089f2:	4b55      	ldr	r3, [pc, #340]	@ (8008b48 <mergeData+0x1ec>)
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	757b      	strb	r3, [r7, #21]
 80089f8:	4b54      	ldr	r3, [pc, #336]	@ (8008b4c <mergeData+0x1f0>)
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	75bb      	strb	r3, [r7, #22]
 80089fe:	4b54      	ldr	r3, [pc, #336]	@ (8008b50 <mergeData+0x1f4>)
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	75fb      	strb	r3, [r7, #23]
 8008a04:	4b53      	ldr	r3, [pc, #332]	@ (8008b54 <mergeData+0x1f8>)
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	763b      	strb	r3, [r7, #24]
 8008a0a:	4b53      	ldr	r3, [pc, #332]	@ (8008b58 <mergeData+0x1fc>)
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	767b      	strb	r3, [r7, #25]
 8008a10:	4b52      	ldr	r3, [pc, #328]	@ (8008b5c <mergeData+0x200>)
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	76bb      	strb	r3, [r7, #26]
 8008a16:	4b52      	ldr	r3, [pc, #328]	@ (8008b60 <mergeData+0x204>)
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	76fb      	strb	r3, [r7, #27]
 8008a1c:	4b51      	ldr	r3, [pc, #324]	@ (8008b64 <mergeData+0x208>)
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	773b      	strb	r3, [r7, #28]
 8008a22:	4b51      	ldr	r3, [pc, #324]	@ (8008b68 <mergeData+0x20c>)
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	777b      	strb	r3, [r7, #29]
			buzzer,
			demoMode,
			calismaSayisi,
			calismaSayisiDemo,
			dilSecim,
			eepromData[38],
 8008a28:	4b50      	ldr	r3, [pc, #320]	@ (8008b6c <mergeData+0x210>)
 8008a2a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	uint8_t uintVariables[] = {
 8008a2e:	77bb      	strb	r3, [r7, #30]
			eepromData[39],
 8008a30:	4b4e      	ldr	r3, [pc, #312]	@ (8008b6c <mergeData+0x210>)
 8008a32:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	uint8_t uintVariables[] = {
 8008a36:	77fb      	strb	r3, [r7, #31]
			eepromData[40],
 8008a38:	4b4c      	ldr	r3, [pc, #304]	@ (8008b6c <mergeData+0x210>)
 8008a3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	uint8_t uintVariables[] = {
 8008a3e:	f887 3020 	strb.w	r3, [r7, #32]
			eepromData[41],
 8008a42:	4b4a      	ldr	r3, [pc, #296]	@ (8008b6c <mergeData+0x210>)
 8008a44:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	uint8_t uintVariables[] = {
 8008a48:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[42],
 8008a4c:	4b47      	ldr	r3, [pc, #284]	@ (8008b6c <mergeData+0x210>)
 8008a4e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	uint8_t uintVariables[] = {
 8008a52:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[43],
 8008a56:	4b45      	ldr	r3, [pc, #276]	@ (8008b6c <mergeData+0x210>)
 8008a58:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	uint8_t uintVariables[] = {
 8008a5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[44],
 8008a60:	4b42      	ldr	r3, [pc, #264]	@ (8008b6c <mergeData+0x210>)
 8008a62:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	uint8_t uintVariables[] = {
 8008a66:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[45],
 8008a6a:	4b40      	ldr	r3, [pc, #256]	@ (8008b6c <mergeData+0x210>)
 8008a6c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	uint8_t uintVariables[] = {
 8008a70:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[46],
 8008a74:	4b3d      	ldr	r3, [pc, #244]	@ (8008b6c <mergeData+0x210>)
 8008a76:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	uint8_t uintVariables[] = {
 8008a7a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[47],
 8008a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8008b6c <mergeData+0x210>)
 8008a80:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	uint8_t uintVariables[] = {
 8008a84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008a88:	233c      	movs	r3, #60	@ 0x3c
 8008a8a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008a8e:	2300      	movs	r3, #0
 8008a90:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a92:	e015      	b.n	8008ac0 <mergeData+0x164>
	    sprintf(temp, "%u", uintVariables[i]);
 8008a94:	463a      	mov	r2, r7
 8008a96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a98:	4413      	add	r3, r2
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008aa2:	4933      	ldr	r1, [pc, #204]	@ (8008b70 <mergeData+0x214>)
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f005 f83d 	bl	800db24 <siprintf>
	    strcat(combinedString, temp);
 8008aaa:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008aae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008ab2:	4611      	mov	r1, r2
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f005 f85d 	bl	800db74 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008aba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008abc:	3301      	adds	r3, #1
 8008abe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ac0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ac2:	2b28      	cmp	r3, #40	@ 0x28
 8008ac4:	d9e6      	bls.n	8008a94 <mergeData+0x138>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8008ac6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7f7 fbaa 	bl	8000224 <strlen>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	3301      	adds	r3, #1
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f004 ff2d 	bl	800d934 <malloc>
 8008ada:	4603      	mov	r3, r0
 8008adc:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 8008ade:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8008ae6:	f005 f8a3 	bl	800dc30 <strcpy>
	return result;
 8008aea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3770      	adds	r7, #112	@ 0x70
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	200014cb 	.word	0x200014cb
 8008af8:	200014bd 	.word	0x200014bd
 8008afc:	200014c0 	.word	0x200014c0
 8008b00:	200014c1 	.word	0x200014c1
 8008b04:	200014c2 	.word	0x200014c2
 8008b08:	200014c9 	.word	0x200014c9
 8008b0c:	200014c3 	.word	0x200014c3
 8008b10:	200014c4 	.word	0x200014c4
 8008b14:	200014c8 	.word	0x200014c8
 8008b18:	200014c5 	.word	0x200014c5
 8008b1c:	200014d5 	.word	0x200014d5
 8008b20:	200014c6 	.word	0x200014c6
 8008b24:	200014d6 	.word	0x200014d6
 8008b28:	200014c7 	.word	0x200014c7
 8008b2c:	200014d7 	.word	0x200014d7
 8008b30:	200014ca 	.word	0x200014ca
 8008b34:	200014cc 	.word	0x200014cc
 8008b38:	200014cd 	.word	0x200014cd
 8008b3c:	200014ce 	.word	0x200014ce
 8008b40:	200014cf 	.word	0x200014cf
 8008b44:	200014d0 	.word	0x200014d0
 8008b48:	200014d1 	.word	0x200014d1
 8008b4c:	200014d2 	.word	0x200014d2
 8008b50:	200014d3 	.word	0x200014d3
 8008b54:	200014d4 	.word	0x200014d4
 8008b58:	200014d8 	.word	0x200014d8
 8008b5c:	200014da 	.word	0x200014da
 8008b60:	200014b4 	.word	0x200014b4
 8008b64:	200014b5 	.word	0x200014b5
 8008b68:	200014dc 	.word	0x200014dc
 8008b6c:	20000fec 	.word	0x20000fec
 8008b70:	0800f0c8 	.word	0x0800f0c8

08008b74 <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af02      	add	r7, sp, #8
	lcd_print(1, 1, dataSynchText);
 8008b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8008bb4 <convertAndSendData+0x40>)
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	2001      	movs	r0, #1
 8008b80:	f000 fa20 	bl	8008fc4 <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 8008b84:	4a0c      	ldr	r2, [pc, #48]	@ (8008bb8 <convertAndSendData+0x44>)
 8008b86:	2101      	movs	r1, #1
 8008b88:	2002      	movs	r0, #2
 8008b8a:	f000 fa1b 	bl	8008fc4 <lcd_print>

	sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8008b8e:	f7ff fee5 	bl	800895c <mergeData>
 8008b92:	4603      	mov	r3, r0
 8008b94:	9300      	str	r3, [sp, #0]
 8008b96:	4b09      	ldr	r3, [pc, #36]	@ (8008bbc <convertAndSendData+0x48>)
 8008b98:	4a09      	ldr	r2, [pc, #36]	@ (8008bc0 <convertAndSendData+0x4c>)
 8008b9a:	490a      	ldr	r1, [pc, #40]	@ (8008bc4 <convertAndSendData+0x50>)
 8008b9c:	480a      	ldr	r0, [pc, #40]	@ (8008bc8 <convertAndSendData+0x54>)
 8008b9e:	f7f7 ff37 	bl	8000a10 <sendMachineData>

	HAL_Delay(500);
 8008ba2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008ba6:	f000 ff81 	bl	8009aac <HAL_Delay>
	lcd_clear();
 8008baa:	f000 fa37 	bl	800901c <lcd_clear>
}
 8008bae:	bf00      	nop
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}
 8008bb4:	20001b98 	.word	0x20001b98
 8008bb8:	20001bac 	.word	0x20001bac
 8008bbc:	20001080 	.word	0x20001080
 8008bc0:	20001070 	.word	0x20001070
 8008bc4:	20001064 	.word	0x20001064
 8008bc8:	20001dd8 	.word	0x20001dd8

08008bcc <iotSetup>:

void iotSetup() {
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8008bd0:	4b13      	ldr	r3, [pc, #76]	@ (8008c20 <iotSetup+0x54>)
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d021      	beq.n	8008c1c <iotSetup+0x50>
		if(checkEEPROM4ID() != 1) {
 8008bd8:	f000 f82e 	bl	8008c38 <checkEEPROM4ID>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d001      	beq.n	8008be6 <iotSetup+0x1a>
			takeMachineID();
 8008be2:	f7ff f9db 	bl	8007f9c <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8008be6:	480f      	ldr	r0, [pc, #60]	@ (8008c24 <iotSetup+0x58>)
 8008be8:	f7f7 fb1c 	bl	8000224 <strlen>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b01      	cmp	r3, #1
 8008bf0:	d801      	bhi.n	8008bf6 <iotSetup+0x2a>
			takeWifiSSID();
 8008bf2:	f7ff fba9 	bl	8008348 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8008bf6:	480c      	ldr	r0, [pc, #48]	@ (8008c28 <iotSetup+0x5c>)
 8008bf8:	f7f7 fb14 	bl	8000224 <strlen>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	d801      	bhi.n	8008c06 <iotSetup+0x3a>
			takeWifiPass();
 8008c02:	f7ff fd4d 	bl	80086a0 <takeWifiPass>
		}

		ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 8008c06:	4a09      	ldr	r2, [pc, #36]	@ (8008c2c <iotSetup+0x60>)
 8008c08:	4909      	ldr	r1, [pc, #36]	@ (8008c30 <iotSetup+0x64>)
 8008c0a:	480a      	ldr	r0, [pc, #40]	@ (8008c34 <iotSetup+0x68>)
 8008c0c:	f7f7 fece 	bl	80009ac <ESP8266_Init>
		HAL_Delay(500);
 8008c10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008c14:	f000 ff4a 	bl	8009aac <HAL_Delay>
		convertAndSendData();
 8008c18:	f7ff ffac 	bl	8008b74 <convertAndSendData>
	}
}
 8008c1c:	bf00      	nop
 8008c1e:	bd80      	pop	{r7, pc}
 8008c20:	200014e7 	.word	0x200014e7
 8008c24:	20001070 	.word	0x20001070
 8008c28:	20001080 	.word	0x20001080
 8008c2c:	0800f0cc 	.word	0x0800f0cc
 8008c30:	0800f0e4 	.word	0x0800f0e4
 8008c34:	20001dd8 	.word	0x20001dd8

08008c38 <checkEEPROM4ID>:

int checkEEPROM4ID() {
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8008c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8008c7c <checkEEPROM4ID+0x44>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8008c44:	2301      	movs	r3, #1
 8008c46:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008c48:	2300      	movs	r3, #0
 8008c4a:	607b      	str	r3, [r7, #4]
 8008c4c:	e00d      	b.n	8008c6a <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8008c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8008c80 <checkEEPROM4ID+0x48>)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	4413      	add	r3, r2
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d101      	bne.n	8008c5e <checkEEPROM4ID+0x26>
			returnVal = 0;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	3301      	adds	r3, #1
 8008c62:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	3301      	adds	r3, #1
 8008c68:	607b      	str	r3, [r7, #4]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b0b      	cmp	r3, #11
 8008c6e:	ddee      	ble.n	8008c4e <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8008c70:	68bb      	ldr	r3, [r7, #8]
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3714      	adds	r7, #20
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bc80      	pop	{r7}
 8008c7a:	4770      	bx	lr
 8008c7c:	20000000 	.word	0x20000000
 8008c80:	20000fec 	.word	0x20000fec

08008c84 <az5>:

int az5() {
 8008c84:	b480      	push	{r7}
 8008c86:	af00      	add	r7, sp, #0
	//Özel şifre iste
	return 0;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bc80      	pop	{r7}
 8008c90:	4770      	bx	lr
	...

08008c94 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b086      	sub	sp, #24
 8008c98:	af02      	add	r7, sp, #8
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8008c9e:	79fb      	ldrb	r3, [r7, #7]
 8008ca0:	f023 030f 	bic.w	r3, r3, #15
 8008ca4:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8008ca6:	79fb      	ldrb	r3, [r7, #7]
 8008ca8:	011b      	lsls	r3, r3, #4
 8008caa:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8008cac:	7b7b      	ldrb	r3, [r7, #13]
 8008cae:	f043 030c 	orr.w	r3, r3, #12
 8008cb2:	b2db      	uxtb	r3, r3
 8008cb4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8008cb6:	7b7b      	ldrb	r3, [r7, #13]
 8008cb8:	f043 0308 	orr.w	r3, r3, #8
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8008cc0:	7b3b      	ldrb	r3, [r7, #12]
 8008cc2:	f043 030c 	orr.w	r3, r3, #12
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8008cca:	7b3b      	ldrb	r3, [r7, #12]
 8008ccc:	f043 0308 	orr.w	r3, r3, #8
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008cd4:	bf00      	nop
 8008cd6:	4825      	ldr	r0, [pc, #148]	@ (8008d6c <lcd_send_cmd+0xd8>)
 8008cd8:	f002 fae1 	bl	800b29e <HAL_I2C_GetError>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b04      	cmp	r3, #4
 8008ce0:	d0f9      	beq.n	8008cd6 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008ce2:	bf00      	nop
 8008ce4:	4821      	ldr	r0, [pc, #132]	@ (8008d6c <lcd_send_cmd+0xd8>)
 8008ce6:	f002 facd 	bl	800b284 <HAL_I2C_GetState>
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b20      	cmp	r3, #32
 8008cee:	d1f9      	bne.n	8008ce4 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8008d70 <lcd_send_cmd+0xdc>)
 8008cf2:	781b      	ldrb	r3, [r3, #0]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d116      	bne.n	8008d26 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	73fb      	strb	r3, [r7, #15]
 8008cfc:	e00f      	b.n	8008d1e <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
 8008d00:	3310      	adds	r3, #16
 8008d02:	443b      	add	r3, r7
 8008d04:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008d08:	7bfb      	ldrb	r3, [r7, #15]
 8008d0a:	f022 0208 	bic.w	r2, r2, #8
 8008d0e:	b2d2      	uxtb	r2, r2
 8008d10:	3310      	adds	r3, #16
 8008d12:	443b      	add	r3, r7
 8008d14:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008d18:	7bfb      	ldrb	r3, [r7, #15]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	73fb      	strb	r3, [r7, #15]
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
 8008d20:	2b03      	cmp	r3, #3
 8008d22:	d9ec      	bls.n	8008cfe <lcd_send_cmd+0x6a>
 8008d24:	e015      	b.n	8008d52 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008d26:	2300      	movs	r3, #0
 8008d28:	73bb      	strb	r3, [r7, #14]
 8008d2a:	e00f      	b.n	8008d4c <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8008d2c:	7bbb      	ldrb	r3, [r7, #14]
 8008d2e:	3310      	adds	r3, #16
 8008d30:	443b      	add	r3, r7
 8008d32:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008d36:	7bbb      	ldrb	r3, [r7, #14]
 8008d38:	f042 0208 	orr.w	r2, r2, #8
 8008d3c:	b2d2      	uxtb	r2, r2
 8008d3e:	3310      	adds	r3, #16
 8008d40:	443b      	add	r3, r7
 8008d42:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008d46:	7bbb      	ldrb	r3, [r7, #14]
 8008d48:	3301      	adds	r3, #1
 8008d4a:	73bb      	strb	r3, [r7, #14]
 8008d4c:	7bbb      	ldrb	r3, [r7, #14]
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d9ec      	bls.n	8008d2c <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008d52:	f107 0208 	add.w	r2, r7, #8
 8008d56:	2364      	movs	r3, #100	@ 0x64
 8008d58:	9300      	str	r3, [sp, #0]
 8008d5a:	2304      	movs	r3, #4
 8008d5c:	214e      	movs	r1, #78	@ 0x4e
 8008d5e:	4803      	ldr	r0, [pc, #12]	@ (8008d6c <lcd_send_cmd+0xd8>)
 8008d60:	f001 fe30 	bl	800a9c4 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008d64:	bf00      	nop
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	20001d3c 	.word	0x20001d3c
 8008d70:	20001d11 	.word	0x20001d11

08008d74 <lcd_send_data>:

void lcd_send_data (char data) {
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af02      	add	r7, sp, #8
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8008d7e:	79fb      	ldrb	r3, [r7, #7]
 8008d80:	f023 030f 	bic.w	r3, r3, #15
 8008d84:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8008d86:	79fb      	ldrb	r3, [r7, #7]
 8008d88:	011b      	lsls	r3, r3, #4
 8008d8a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8008d8c:	7b7b      	ldrb	r3, [r7, #13]
 8008d8e:	f043 030d 	orr.w	r3, r3, #13
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8008d96:	7b7b      	ldrb	r3, [r7, #13]
 8008d98:	f043 0309 	orr.w	r3, r3, #9
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8008da0:	7b3b      	ldrb	r3, [r7, #12]
 8008da2:	f043 030d 	orr.w	r3, r3, #13
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8008daa:	7b3b      	ldrb	r3, [r7, #12]
 8008dac:	f043 0309 	orr.w	r3, r3, #9
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008db4:	bf00      	nop
 8008db6:	4825      	ldr	r0, [pc, #148]	@ (8008e4c <lcd_send_data+0xd8>)
 8008db8:	f002 fa71 	bl	800b29e <HAL_I2C_GetError>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b04      	cmp	r3, #4
 8008dc0:	d0f9      	beq.n	8008db6 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008dc2:	bf00      	nop
 8008dc4:	4821      	ldr	r0, [pc, #132]	@ (8008e4c <lcd_send_data+0xd8>)
 8008dc6:	f002 fa5d 	bl	800b284 <HAL_I2C_GetState>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b20      	cmp	r3, #32
 8008dce:	d1f9      	bne.n	8008dc4 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008dd0:	4b1f      	ldr	r3, [pc, #124]	@ (8008e50 <lcd_send_data+0xdc>)
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d116      	bne.n	8008e06 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73fb      	strb	r3, [r7, #15]
 8008ddc:	e00f      	b.n	8008dfe <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
 8008de0:	3310      	adds	r3, #16
 8008de2:	443b      	add	r3, r7
 8008de4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008de8:	7bfb      	ldrb	r3, [r7, #15]
 8008dea:	f022 0208 	bic.w	r2, r2, #8
 8008dee:	b2d2      	uxtb	r2, r2
 8008df0:	3310      	adds	r3, #16
 8008df2:	443b      	add	r3, r7
 8008df4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008df8:	7bfb      	ldrb	r3, [r7, #15]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	73fb      	strb	r3, [r7, #15]
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	2b03      	cmp	r3, #3
 8008e02:	d9ec      	bls.n	8008dde <lcd_send_data+0x6a>
 8008e04:	e015      	b.n	8008e32 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008e06:	2300      	movs	r3, #0
 8008e08:	73bb      	strb	r3, [r7, #14]
 8008e0a:	e00f      	b.n	8008e2c <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8008e0c:	7bbb      	ldrb	r3, [r7, #14]
 8008e0e:	3310      	adds	r3, #16
 8008e10:	443b      	add	r3, r7
 8008e12:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	f042 0208 	orr.w	r2, r2, #8
 8008e1c:	b2d2      	uxtb	r2, r2
 8008e1e:	3310      	adds	r3, #16
 8008e20:	443b      	add	r3, r7
 8008e22:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008e26:	7bbb      	ldrb	r3, [r7, #14]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	73bb      	strb	r3, [r7, #14]
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
 8008e2e:	2b03      	cmp	r3, #3
 8008e30:	d9ec      	bls.n	8008e0c <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008e32:	f107 0208 	add.w	r2, r7, #8
 8008e36:	2364      	movs	r3, #100	@ 0x64
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	2304      	movs	r3, #4
 8008e3c:	214e      	movs	r1, #78	@ 0x4e
 8008e3e:	4803      	ldr	r0, [pc, #12]	@ (8008e4c <lcd_send_data+0xd8>)
 8008e40:	f001 fdc0 	bl	800a9c4 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008e44:	bf00      	nop
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	20001d3c 	.word	0x20001d3c
 8008e50:	20001d11 	.word	0x20001d11

08008e54 <lcd_send_string>:

void lcd_send_string (char *str) {
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b082      	sub	sp, #8
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
	while (*str) {
 8008e5c:	e006      	b.n	8008e6c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	1c5a      	adds	r2, r3, #1
 8008e62:	607a      	str	r2, [r7, #4]
 8008e64:	781b      	ldrb	r3, [r3, #0]
 8008e66:	4618      	mov	r0, r3
 8008e68:	f7ff ff84 	bl	8008d74 <lcd_send_data>
	while (*str) {
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1f4      	bne.n	8008e5e <lcd_send_string+0xa>
	}
}
 8008e74:	bf00      	nop
 8008e76:	bf00      	nop
 8008e78:	3708      	adds	r7, #8
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
	...

08008e80 <lcd_send_char>:

void lcd_send_char(char ch) {
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b086      	sub	sp, #24
 8008e84:	af02      	add	r7, sp, #8
 8008e86:	4603      	mov	r3, r0
 8008e88:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8008e8a:	79fb      	ldrb	r3, [r7, #7]
 8008e8c:	f023 030f 	bic.w	r3, r3, #15
 8008e90:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8008e92:	79fb      	ldrb	r3, [r7, #7]
 8008e94:	011b      	lsls	r3, r3, #4
 8008e96:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8008e98:	7b7b      	ldrb	r3, [r7, #13]
 8008e9a:	f043 030d 	orr.w	r3, r3, #13
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8008ea2:	7b7b      	ldrb	r3, [r7, #13]
 8008ea4:	f043 0309 	orr.w	r3, r3, #9
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8008eac:	7b3b      	ldrb	r3, [r7, #12]
 8008eae:	f043 030d 	orr.w	r3, r3, #13
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8008eb6:	7b3b      	ldrb	r3, [r7, #12]
 8008eb8:	f043 0309 	orr.w	r3, r3, #9
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008ec0:	bf00      	nop
 8008ec2:	4825      	ldr	r0, [pc, #148]	@ (8008f58 <lcd_send_char+0xd8>)
 8008ec4:	f002 f9eb 	bl	800b29e <HAL_I2C_GetError>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b04      	cmp	r3, #4
 8008ecc:	d0f9      	beq.n	8008ec2 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008ece:	bf00      	nop
 8008ed0:	4821      	ldr	r0, [pc, #132]	@ (8008f58 <lcd_send_char+0xd8>)
 8008ed2:	f002 f9d7 	bl	800b284 <HAL_I2C_GetState>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b20      	cmp	r3, #32
 8008eda:	d1f9      	bne.n	8008ed0 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8008edc:	4b1f      	ldr	r3, [pc, #124]	@ (8008f5c <lcd_send_char+0xdc>)
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d116      	bne.n	8008f12 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	73fb      	strb	r3, [r7, #15]
 8008ee8:	e00f      	b.n	8008f0a <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8008eea:	7bfb      	ldrb	r3, [r7, #15]
 8008eec:	3310      	adds	r3, #16
 8008eee:	443b      	add	r3, r7
 8008ef0:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008ef4:	7bfb      	ldrb	r3, [r7, #15]
 8008ef6:	f022 0208 	bic.w	r2, r2, #8
 8008efa:	b2d2      	uxtb	r2, r2
 8008efc:	3310      	adds	r3, #16
 8008efe:	443b      	add	r3, r7
 8008f00:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
 8008f06:	3301      	adds	r3, #1
 8008f08:	73fb      	strb	r3, [r7, #15]
 8008f0a:	7bfb      	ldrb	r3, [r7, #15]
 8008f0c:	2b03      	cmp	r3, #3
 8008f0e:	d9ec      	bls.n	8008eea <lcd_send_char+0x6a>
 8008f10:	e015      	b.n	8008f3e <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8008f12:	2300      	movs	r3, #0
 8008f14:	73bb      	strb	r3, [r7, #14]
 8008f16:	e00f      	b.n	8008f38 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8008f18:	7bbb      	ldrb	r3, [r7, #14]
 8008f1a:	3310      	adds	r3, #16
 8008f1c:	443b      	add	r3, r7
 8008f1e:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008f22:	7bbb      	ldrb	r3, [r7, #14]
 8008f24:	f042 0208 	orr.w	r2, r2, #8
 8008f28:	b2d2      	uxtb	r2, r2
 8008f2a:	3310      	adds	r3, #16
 8008f2c:	443b      	add	r3, r7
 8008f2e:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008f32:	7bbb      	ldrb	r3, [r7, #14]
 8008f34:	3301      	adds	r3, #1
 8008f36:	73bb      	strb	r3, [r7, #14]
 8008f38:	7bbb      	ldrb	r3, [r7, #14]
 8008f3a:	2b03      	cmp	r3, #3
 8008f3c:	d9ec      	bls.n	8008f18 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8008f3e:	f107 0208 	add.w	r2, r7, #8
 8008f42:	2364      	movs	r3, #100	@ 0x64
 8008f44:	9300      	str	r3, [sp, #0]
 8008f46:	2304      	movs	r3, #4
 8008f48:	214e      	movs	r1, #78	@ 0x4e
 8008f4a:	4803      	ldr	r0, [pc, #12]	@ (8008f58 <lcd_send_char+0xd8>)
 8008f4c:	f001 fd3a 	bl	800a9c4 <HAL_I2C_Master_Transmit>
}
 8008f50:	bf00      	nop
 8008f52:	3710      	adds	r7, #16
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	20001d3c 	.word	0x20001d3c
 8008f5c:	20001d11 	.word	0x20001d11

08008f60 <lcd_init>:

void lcd_init (void) {
 8008f60:	b580      	push	{r7, lr}
 8008f62:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8008f64:	2002      	movs	r0, #2
 8008f66:	f7ff fe95 	bl	8008c94 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8008f6a:	2028      	movs	r0, #40	@ 0x28
 8008f6c:	f7ff fe92 	bl	8008c94 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8008f70:	200c      	movs	r0, #12
 8008f72:	f7ff fe8f 	bl	8008c94 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8008f76:	2080      	movs	r0, #128	@ 0x80
 8008f78:	f7ff fe8c 	bl	8008c94 <lcd_send_cmd>
	lcd_backlight(1);
 8008f7c:	2001      	movs	r0, #1
 8008f7e:	f000 f86d 	bl	800905c <lcd_backlight>
}
 8008f82:	bf00      	nop
 8008f84:	bd80      	pop	{r7, pc}

08008f86 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8008f86:	b580      	push	{r7, lr}
 8008f88:	b082      	sub	sp, #8
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	460a      	mov	r2, r1
 8008f90:	71fb      	strb	r3, [r7, #7]
 8008f92:	4613      	mov	r3, r2
 8008f94:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8008f96:	79fb      	ldrb	r3, [r7, #7]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d106      	bne.n	8008faa <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8008f9c:	79bb      	ldrb	r3, [r7, #6]
 8008f9e:	337f      	adds	r3, #127	@ 0x7f
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f7ff fe76 	bl	8008c94 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8008fa8:	e008      	b.n	8008fbc <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8008faa:	79fb      	ldrb	r3, [r7, #7]
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d105      	bne.n	8008fbc <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8008fb0:	79bb      	ldrb	r3, [r7, #6]
 8008fb2:	3b41      	subs	r3, #65	@ 0x41
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f7ff fe6c 	bl	8008c94 <lcd_send_cmd>
}
 8008fbc:	bf00      	nop
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	4603      	mov	r3, r0
 8008fcc:	603a      	str	r2, [r7, #0]
 8008fce:	71fb      	strb	r3, [r7, #7]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8008fd4:	79ba      	ldrb	r2, [r7, #6]
 8008fd6:	79fb      	ldrb	r3, [r7, #7]
 8008fd8:	4611      	mov	r1, r2
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f7ff ffd3 	bl	8008f86 <lcd_gotoxy>
	lcd_send_string(str);
 8008fe0:	6838      	ldr	r0, [r7, #0]
 8008fe2:	f7ff ff37 	bl	8008e54 <lcd_send_string>
}
 8008fe6:	bf00      	nop
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8008fee:	b580      	push	{r7, lr}
 8008ff0:	b082      	sub	sp, #8
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	71fb      	strb	r3, [r7, #7]
 8008ff8:	460b      	mov	r3, r1
 8008ffa:	71bb      	strb	r3, [r7, #6]
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8009000:	79ba      	ldrb	r2, [r7, #6]
 8009002:	79fb      	ldrb	r3, [r7, #7]
 8009004:	4611      	mov	r1, r2
 8009006:	4618      	mov	r0, r3
 8009008:	f7ff ffbd 	bl	8008f86 <lcd_gotoxy>
    lcd_send_char(ch);
 800900c:	797b      	ldrb	r3, [r7, #5]
 800900e:	4618      	mov	r0, r3
 8009010:	f7ff ff36 	bl	8008e80 <lcd_send_char>
}
 8009014:	bf00      	nop
 8009016:	3708      	adds	r7, #8
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <lcd_clear>:

void lcd_clear(void) {
 800901c:	b580      	push	{r7, lr}
 800901e:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8009020:	2001      	movs	r0, #1
 8009022:	f7ff fe37 	bl	8008c94 <lcd_send_cmd>
    HAL_Delay(2);
 8009026:	2002      	movs	r0, #2
 8009028:	f000 fd40 	bl	8009aac <HAL_Delay>
}
 800902c:	bf00      	nop
 800902e:	bd80      	pop	{r7, pc}

08009030 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	4603      	mov	r3, r0
 8009038:	460a      	mov	r2, r1
 800903a:	71fb      	strb	r3, [r7, #7]
 800903c:	4613      	mov	r3, r2
 800903e:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8009040:	79ba      	ldrb	r2, [r7, #6]
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	4611      	mov	r1, r2
 8009046:	4618      	mov	r0, r3
 8009048:	f7ff ff9d 	bl	8008f86 <lcd_gotoxy>

    lcd_send_char(' ');
 800904c:	2020      	movs	r0, #32
 800904e:	f7ff ff17 	bl	8008e80 <lcd_send_char>
}
 8009052:	bf00      	nop
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
	...

0800905c <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
 8009062:	4603      	mov	r3, r0
 8009064:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8009066:	4a05      	ldr	r2, [pc, #20]	@ (800907c <lcd_backlight+0x20>)
 8009068:	79fb      	ldrb	r3, [r7, #7]
 800906a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 800906c:	2000      	movs	r0, #0
 800906e:	f7ff fe11 	bl	8008c94 <lcd_send_cmd>
}
 8009072:	bf00      	nop
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	20001d11 	.word	0x20001d11

08009080 <lcd_cursor>:

void lcd_cursor(int state) {
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b01      	cmp	r3, #1
 800908c:	d106      	bne.n	800909c <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 800908e:	200e      	movs	r0, #14
 8009090:	f7ff fe00 	bl	8008c94 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8009094:	200f      	movs	r0, #15
 8009096:	f7ff fdfd 	bl	8008c94 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800909a:	e002      	b.n	80090a2 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 800909c:	200c      	movs	r0, #12
 800909e:	f7ff fdf9 	bl	8008c94 <lcd_send_cmd>
}
 80090a2:	bf00      	nop
 80090a4:	3708      	adds	r7, #8
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 80090b4:	4b04      	ldr	r3, [pc, #16]	@ (80090c8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3301      	adds	r3, #1
 80090ba:	4a03      	ldr	r2, [pc, #12]	@ (80090c8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80090bc:	6013      	str	r3, [r2, #0]
}
 80090be:	bf00      	nop
 80090c0:	370c      	adds	r7, #12
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bc80      	pop	{r7}
 80090c6:	4770      	bx	lr
 80090c8:	20001494 	.word	0x20001494

080090cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a06      	ldr	r2, [pc, #24]	@ (80090f4 <HAL_UART_RxCpltCallback+0x28>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d106      	bne.n	80090ec <HAL_UART_RxCpltCallback+0x20>
        // UART1 RX Callback işlemleri
        Wifi_RxCallBack();
 80090de:	f7f7 fe67 	bl	8000db0 <Wifi_RxCallBack>
        HAL_UART_Receive_IT(&huart1, (uint8_t *)esp8266_rx_buffer, 1);  // Sürekli veri alımı için interruptı tekrar aktif hale getir
 80090e2:	2201      	movs	r2, #1
 80090e4:	4904      	ldr	r1, [pc, #16]	@ (80090f8 <HAL_UART_RxCpltCallback+0x2c>)
 80090e6:	4805      	ldr	r0, [pc, #20]	@ (80090fc <HAL_UART_RxCpltCallback+0x30>)
 80090e8:	f003 fe64 	bl	800cdb4 <HAL_UART_Receive_IT>
    }
}
 80090ec:	bf00      	nop
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	40013800 	.word	0x40013800
 80090f8:	20001094 	.word	0x20001094
 80090fc:	20001dd8 	.word	0x20001dd8

08009100 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009104:	f000 fc70 	bl	80099e8 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8009108:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800910c:	f000 fcce 	bl	8009aac <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009110:	f000 f89c 	bl	800924c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009114:	f000 f9be 	bl	8009494 <MX_GPIO_Init>
  MX_CAN_Init();
 8009118:	f000 f8de 	bl	80092d8 <MX_CAN_Init>
  MX_I2C1_Init();
 800911c:	f000 f910 	bl	8009340 <MX_I2C1_Init>
  MX_TIM1_Init();
 8009120:	f000 f93c 	bl	800939c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8009124:	f000 f98c 	bl	8009440 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8009128:	2201      	movs	r2, #1
 800912a:	2140      	movs	r1, #64	@ 0x40
 800912c:	483e      	ldr	r0, [pc, #248]	@ (8009228 <main+0x128>)
 800912e:	f001 faa4 	bl	800a67a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8009132:	2201      	movs	r2, #1
 8009134:	2180      	movs	r1, #128	@ 0x80
 8009136:	483c      	ldr	r0, [pc, #240]	@ (8009228 <main+0x128>)
 8009138:	f001 fa9f 	bl	800a67a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800913c:	200a      	movs	r0, #10
 800913e:	f000 fcb5 	bl	8009aac <HAL_Delay>
  lcd_init();
 8009142:	f7ff ff0d 	bl	8008f60 <lcd_init>
  HAL_Delay(10);
 8009146:	200a      	movs	r0, #10
 8009148:	f000 fcb0 	bl	8009aac <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 800914c:	4837      	ldr	r0, [pc, #220]	@ (800922c <main+0x12c>)
 800914e:	f003 f947 	bl	800c3e0 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009152:	bf00      	nop
 8009154:	4836      	ldr	r0, [pc, #216]	@ (8009230 <main+0x130>)
 8009156:	f002 f8a2 	bl	800b29e <HAL_I2C_GetError>
 800915a:	4603      	mov	r3, r0
 800915c:	2b04      	cmp	r3, #4
 800915e:	d0f9      	beq.n	8009154 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8009160:	bf00      	nop
 8009162:	4833      	ldr	r0, [pc, #204]	@ (8009230 <main+0x130>)
 8009164:	f002 f88e 	bl	800b284 <HAL_I2C_GetState>
 8009168:	4603      	mov	r3, r0
 800916a:	2b20      	cmp	r3, #32
 800916c:	d1f9      	bne.n	8009162 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800916e:	2200      	movs	r2, #0
 8009170:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009174:	482c      	ldr	r0, [pc, #176]	@ (8009228 <main+0x128>)
 8009176:	f001 fa80 	bl	800a67a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800917a:	2200      	movs	r2, #0
 800917c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009180:	4829      	ldr	r0, [pc, #164]	@ (8009228 <main+0x128>)
 8009182:	f001 fa7a 	bl	800a67a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8009186:	2200      	movs	r2, #0
 8009188:	2104      	movs	r1, #4
 800918a:	4827      	ldr	r0, [pc, #156]	@ (8009228 <main+0x128>)
 800918c:	f001 fa75 	bl	800a67a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8009190:	2200      	movs	r2, #0
 8009192:	2102      	movs	r1, #2
 8009194:	4824      	ldr	r0, [pc, #144]	@ (8009228 <main+0x128>)
 8009196:	f001 fa70 	bl	800a67a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800919a:	2200      	movs	r2, #0
 800919c:	2101      	movs	r1, #1
 800919e:	4822      	ldr	r0, [pc, #136]	@ (8009228 <main+0x128>)
 80091a0:	f001 fa6b 	bl	800a67a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80091a4:	2200      	movs	r2, #0
 80091a6:	2120      	movs	r1, #32
 80091a8:	4822      	ldr	r0, [pc, #136]	@ (8009234 <main+0x134>)
 80091aa:	f001 fa66 	bl	800a67a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80091ae:	2200      	movs	r2, #0
 80091b0:	2110      	movs	r1, #16
 80091b2:	4820      	ldr	r0, [pc, #128]	@ (8009234 <main+0x134>)
 80091b4:	f001 fa61 	bl	800a67a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80091b8:	2200      	movs	r2, #0
 80091ba:	2180      	movs	r1, #128	@ 0x80
 80091bc:	481e      	ldr	r0, [pc, #120]	@ (8009238 <main+0x138>)
 80091be:	f001 fa5c 	bl	800a67a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80091c2:	2200      	movs	r2, #0
 80091c4:	2140      	movs	r1, #64	@ 0x40
 80091c6:	481c      	ldr	r0, [pc, #112]	@ (8009238 <main+0x138>)
 80091c8:	f001 fa57 	bl	800a67a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80091cc:	2200      	movs	r2, #0
 80091ce:	2120      	movs	r1, #32
 80091d0:	4819      	ldr	r0, [pc, #100]	@ (8009238 <main+0x138>)
 80091d2:	f001 fa52 	bl	800a67a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 80091d6:	2200      	movs	r2, #0
 80091d8:	2110      	movs	r1, #16
 80091da:	4817      	ldr	r0, [pc, #92]	@ (8009238 <main+0x138>)
 80091dc:	f001 fa4d 	bl	800a67a <HAL_GPIO_WritePin>

  i2cTest();
 80091e0:	f7f7 ff72 	bl	80010c8 <i2cTest>
  HAL_Delay(100);
 80091e4:	2064      	movs	r0, #100	@ 0x64
 80091e6:	f000 fc61 	bl	8009aac <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 80091ea:	4a14      	ldr	r2, [pc, #80]	@ (800923c <main+0x13c>)
 80091ec:	2101      	movs	r1, #1
 80091ee:	2001      	movs	r0, #1
 80091f0:	f7ff fee8 	bl	8008fc4 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 80091f4:	4a12      	ldr	r2, [pc, #72]	@ (8009240 <main+0x140>)
 80091f6:	2101      	movs	r1, #1
 80091f8:	2002      	movs	r0, #2
 80091fa:	f7ff fee3 	bl	8008fc4 <lcd_print>
  HAL_Delay(1000);
 80091fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009202:	f000 fc53 	bl	8009aac <HAL_Delay>
  lcd_clear();
 8009206:	f7ff ff09 	bl	800901c <lcd_clear>

  eepromKontrol();
 800920a:	f7f7 f813 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 800920e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009212:	f000 fc4b 	bl	8009aac <HAL_Delay>

  backLightTimer = millis;
 8009216:	4b0b      	ldr	r3, [pc, #44]	@ (8009244 <main+0x144>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a0b      	ldr	r2, [pc, #44]	@ (8009248 <main+0x148>)
 800921c:	6013      	str	r3, [r2, #0]

  //IoT Section:
  iotSetup();
 800921e:	f7ff fcd5 	bl	8008bcc <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8009222:	f7fc fe41 	bl	8005ea8 <mainLoop>
 8009226:	e7fc      	b.n	8009222 <main+0x122>
 8009228:	40010c00 	.word	0x40010c00
 800922c:	20001d90 	.word	0x20001d90
 8009230:	20001d3c 	.word	0x20001d3c
 8009234:	40011000 	.word	0x40011000
 8009238:	40010800 	.word	0x40010800
 800923c:	2000009c 	.word	0x2000009c
 8009240:	200000b0 	.word	0x200000b0
 8009244:	20001494 	.word	0x20001494
 8009248:	200014b0 	.word	0x200014b0

0800924c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b090      	sub	sp, #64	@ 0x40
 8009250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009252:	f107 0318 	add.w	r3, r7, #24
 8009256:	2228      	movs	r2, #40	@ 0x28
 8009258:	2100      	movs	r1, #0
 800925a:	4618      	mov	r0, r3
 800925c:	f004 fc82 	bl	800db64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009260:	1d3b      	adds	r3, r7, #4
 8009262:	2200      	movs	r2, #0
 8009264:	601a      	str	r2, [r3, #0]
 8009266:	605a      	str	r2, [r3, #4]
 8009268:	609a      	str	r2, [r3, #8]
 800926a:	60da      	str	r2, [r3, #12]
 800926c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800926e:	2301      	movs	r3, #1
 8009270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009272:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009276:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8009278:	2300      	movs	r3, #0
 800927a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800927c:	2301      	movs	r3, #1
 800927e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009280:	2302      	movs	r3, #2
 8009282:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009284:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009288:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800928a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800928e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009290:	f107 0318 	add.w	r3, r7, #24
 8009294:	4618      	mov	r0, r3
 8009296:	f002 fc43 	bl	800bb20 <HAL_RCC_OscConfig>
 800929a:	4603      	mov	r3, r0
 800929c:	2b00      	cmp	r3, #0
 800929e:	d001      	beq.n	80092a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80092a0:	f000 f9a2 	bl	80095e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80092a4:	230f      	movs	r3, #15
 80092a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80092a8:	2302      	movs	r3, #2
 80092aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80092ac:	2300      	movs	r3, #0
 80092ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80092b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80092b6:	2300      	movs	r3, #0
 80092b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80092ba:	1d3b      	adds	r3, r7, #4
 80092bc:	2102      	movs	r1, #2
 80092be:	4618      	mov	r0, r3
 80092c0:	f002 feb0 	bl	800c024 <HAL_RCC_ClockConfig>
 80092c4:	4603      	mov	r3, r0
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d001      	beq.n	80092ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80092ca:	f000 f98d 	bl	80095e8 <Error_Handler>
  }
}
 80092ce:	bf00      	nop
 80092d0:	3740      	adds	r7, #64	@ 0x40
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
	...

080092d8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80092dc:	4b16      	ldr	r3, [pc, #88]	@ (8009338 <MX_CAN_Init+0x60>)
 80092de:	4a17      	ldr	r2, [pc, #92]	@ (800933c <MX_CAN_Init+0x64>)
 80092e0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80092e2:	4b15      	ldr	r3, [pc, #84]	@ (8009338 <MX_CAN_Init+0x60>)
 80092e4:	2210      	movs	r2, #16
 80092e6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80092e8:	4b13      	ldr	r3, [pc, #76]	@ (8009338 <MX_CAN_Init+0x60>)
 80092ea:	2200      	movs	r2, #0
 80092ec:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80092ee:	4b12      	ldr	r3, [pc, #72]	@ (8009338 <MX_CAN_Init+0x60>)
 80092f0:	2200      	movs	r2, #0
 80092f2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80092f4:	4b10      	ldr	r3, [pc, #64]	@ (8009338 <MX_CAN_Init+0x60>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80092fa:	4b0f      	ldr	r3, [pc, #60]	@ (8009338 <MX_CAN_Init+0x60>)
 80092fc:	2200      	movs	r2, #0
 80092fe:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8009300:	4b0d      	ldr	r3, [pc, #52]	@ (8009338 <MX_CAN_Init+0x60>)
 8009302:	2200      	movs	r2, #0
 8009304:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8009306:	4b0c      	ldr	r3, [pc, #48]	@ (8009338 <MX_CAN_Init+0x60>)
 8009308:	2200      	movs	r2, #0
 800930a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800930c:	4b0a      	ldr	r3, [pc, #40]	@ (8009338 <MX_CAN_Init+0x60>)
 800930e:	2200      	movs	r2, #0
 8009310:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8009312:	4b09      	ldr	r3, [pc, #36]	@ (8009338 <MX_CAN_Init+0x60>)
 8009314:	2200      	movs	r2, #0
 8009316:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8009318:	4b07      	ldr	r3, [pc, #28]	@ (8009338 <MX_CAN_Init+0x60>)
 800931a:	2200      	movs	r2, #0
 800931c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800931e:	4b06      	ldr	r3, [pc, #24]	@ (8009338 <MX_CAN_Init+0x60>)
 8009320:	2200      	movs	r2, #0
 8009322:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8009324:	4804      	ldr	r0, [pc, #16]	@ (8009338 <MX_CAN_Init+0x60>)
 8009326:	f000 fbe5 	bl	8009af4 <HAL_CAN_Init>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d001      	beq.n	8009334 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8009330:	f000 f95a 	bl	80095e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8009334:	bf00      	nop
 8009336:	bd80      	pop	{r7, pc}
 8009338:	20001d14 	.word	0x20001d14
 800933c:	40006400 	.word	0x40006400

08009340 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009344:	4b12      	ldr	r3, [pc, #72]	@ (8009390 <MX_I2C1_Init+0x50>)
 8009346:	4a13      	ldr	r2, [pc, #76]	@ (8009394 <MX_I2C1_Init+0x54>)
 8009348:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800934a:	4b11      	ldr	r3, [pc, #68]	@ (8009390 <MX_I2C1_Init+0x50>)
 800934c:	4a12      	ldr	r2, [pc, #72]	@ (8009398 <MX_I2C1_Init+0x58>)
 800934e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009350:	4b0f      	ldr	r3, [pc, #60]	@ (8009390 <MX_I2C1_Init+0x50>)
 8009352:	2200      	movs	r2, #0
 8009354:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009356:	4b0e      	ldr	r3, [pc, #56]	@ (8009390 <MX_I2C1_Init+0x50>)
 8009358:	2200      	movs	r2, #0
 800935a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800935c:	4b0c      	ldr	r3, [pc, #48]	@ (8009390 <MX_I2C1_Init+0x50>)
 800935e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009362:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009364:	4b0a      	ldr	r3, [pc, #40]	@ (8009390 <MX_I2C1_Init+0x50>)
 8009366:	2200      	movs	r2, #0
 8009368:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800936a:	4b09      	ldr	r3, [pc, #36]	@ (8009390 <MX_I2C1_Init+0x50>)
 800936c:	2200      	movs	r2, #0
 800936e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009370:	4b07      	ldr	r3, [pc, #28]	@ (8009390 <MX_I2C1_Init+0x50>)
 8009372:	2200      	movs	r2, #0
 8009374:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009376:	4b06      	ldr	r3, [pc, #24]	@ (8009390 <MX_I2C1_Init+0x50>)
 8009378:	2200      	movs	r2, #0
 800937a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800937c:	4804      	ldr	r0, [pc, #16]	@ (8009390 <MX_I2C1_Init+0x50>)
 800937e:	f001 f9ad 	bl	800a6dc <HAL_I2C_Init>
 8009382:	4603      	mov	r3, r0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d001      	beq.n	800938c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009388:	f000 f92e 	bl	80095e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800938c:	bf00      	nop
 800938e:	bd80      	pop	{r7, pc}
 8009390:	20001d3c 	.word	0x20001d3c
 8009394:	40005400 	.word	0x40005400
 8009398:	00061a80 	.word	0x00061a80

0800939c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b086      	sub	sp, #24
 80093a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80093a2:	f107 0308 	add.w	r3, r7, #8
 80093a6:	2200      	movs	r2, #0
 80093a8:	601a      	str	r2, [r3, #0]
 80093aa:	605a      	str	r2, [r3, #4]
 80093ac:	609a      	str	r2, [r3, #8]
 80093ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80093b0:	463b      	mov	r3, r7
 80093b2:	2200      	movs	r2, #0
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80093b8:	4b1f      	ldr	r3, [pc, #124]	@ (8009438 <MX_TIM1_Init+0x9c>)
 80093ba:	4a20      	ldr	r2, [pc, #128]	@ (800943c <MX_TIM1_Init+0xa0>)
 80093bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80093be:	4b1e      	ldr	r3, [pc, #120]	@ (8009438 <MX_TIM1_Init+0x9c>)
 80093c0:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80093c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80093c6:	4b1c      	ldr	r3, [pc, #112]	@ (8009438 <MX_TIM1_Init+0x9c>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80093cc:	4b1a      	ldr	r3, [pc, #104]	@ (8009438 <MX_TIM1_Init+0x9c>)
 80093ce:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80093d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80093d4:	4b18      	ldr	r3, [pc, #96]	@ (8009438 <MX_TIM1_Init+0x9c>)
 80093d6:	2200      	movs	r2, #0
 80093d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80093da:	4b17      	ldr	r3, [pc, #92]	@ (8009438 <MX_TIM1_Init+0x9c>)
 80093dc:	2200      	movs	r2, #0
 80093de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80093e0:	4b15      	ldr	r3, [pc, #84]	@ (8009438 <MX_TIM1_Init+0x9c>)
 80093e2:	2200      	movs	r2, #0
 80093e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80093e6:	4814      	ldr	r0, [pc, #80]	@ (8009438 <MX_TIM1_Init+0x9c>)
 80093e8:	f002 ffaa 	bl	800c340 <HAL_TIM_Base_Init>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80093f2:	f000 f8f9 	bl	80095e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80093f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80093fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80093fc:	f107 0308 	add.w	r3, r7, #8
 8009400:	4619      	mov	r1, r3
 8009402:	480d      	ldr	r0, [pc, #52]	@ (8009438 <MX_TIM1_Init+0x9c>)
 8009404:	f003 f954 	bl	800c6b0 <HAL_TIM_ConfigClockSource>
 8009408:	4603      	mov	r3, r0
 800940a:	2b00      	cmp	r3, #0
 800940c:	d001      	beq.n	8009412 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800940e:	f000 f8eb 	bl	80095e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009412:	2300      	movs	r3, #0
 8009414:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009416:	2300      	movs	r3, #0
 8009418:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800941a:	463b      	mov	r3, r7
 800941c:	4619      	mov	r1, r3
 800941e:	4806      	ldr	r0, [pc, #24]	@ (8009438 <MX_TIM1_Init+0x9c>)
 8009420:	f003 fb42 	bl	800caa8 <HAL_TIMEx_MasterConfigSynchronization>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	d001      	beq.n	800942e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800942a:	f000 f8dd 	bl	80095e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800942e:	bf00      	nop
 8009430:	3718      	adds	r7, #24
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	20001d90 	.word	0x20001d90
 800943c:	40012c00 	.word	0x40012c00

08009440 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009444:	4b11      	ldr	r3, [pc, #68]	@ (800948c <MX_USART1_UART_Init+0x4c>)
 8009446:	4a12      	ldr	r2, [pc, #72]	@ (8009490 <MX_USART1_UART_Init+0x50>)
 8009448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800944a:	4b10      	ldr	r3, [pc, #64]	@ (800948c <MX_USART1_UART_Init+0x4c>)
 800944c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009450:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009452:	4b0e      	ldr	r3, [pc, #56]	@ (800948c <MX_USART1_UART_Init+0x4c>)
 8009454:	2200      	movs	r2, #0
 8009456:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009458:	4b0c      	ldr	r3, [pc, #48]	@ (800948c <MX_USART1_UART_Init+0x4c>)
 800945a:	2200      	movs	r2, #0
 800945c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800945e:	4b0b      	ldr	r3, [pc, #44]	@ (800948c <MX_USART1_UART_Init+0x4c>)
 8009460:	2200      	movs	r2, #0
 8009462:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009464:	4b09      	ldr	r3, [pc, #36]	@ (800948c <MX_USART1_UART_Init+0x4c>)
 8009466:	220c      	movs	r2, #12
 8009468:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800946a:	4b08      	ldr	r3, [pc, #32]	@ (800948c <MX_USART1_UART_Init+0x4c>)
 800946c:	2200      	movs	r2, #0
 800946e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009470:	4b06      	ldr	r3, [pc, #24]	@ (800948c <MX_USART1_UART_Init+0x4c>)
 8009472:	2200      	movs	r2, #0
 8009474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009476:	4805      	ldr	r0, [pc, #20]	@ (800948c <MX_USART1_UART_Init+0x4c>)
 8009478:	f003 fb94 	bl	800cba4 <HAL_UART_Init>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009482:	f000 f8b1 	bl	80095e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009486:	bf00      	nop
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	20001dd8 	.word	0x20001dd8
 8009490:	40013800 	.word	0x40013800

08009494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b088      	sub	sp, #32
 8009498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800949a:	f107 0310 	add.w	r3, r7, #16
 800949e:	2200      	movs	r2, #0
 80094a0:	601a      	str	r2, [r3, #0]
 80094a2:	605a      	str	r2, [r3, #4]
 80094a4:	609a      	str	r2, [r3, #8]
 80094a6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80094a8:	4b4b      	ldr	r3, [pc, #300]	@ (80095d8 <MX_GPIO_Init+0x144>)
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	4a4a      	ldr	r2, [pc, #296]	@ (80095d8 <MX_GPIO_Init+0x144>)
 80094ae:	f043 0310 	orr.w	r3, r3, #16
 80094b2:	6193      	str	r3, [r2, #24]
 80094b4:	4b48      	ldr	r3, [pc, #288]	@ (80095d8 <MX_GPIO_Init+0x144>)
 80094b6:	699b      	ldr	r3, [r3, #24]
 80094b8:	f003 0310 	and.w	r3, r3, #16
 80094bc:	60fb      	str	r3, [r7, #12]
 80094be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80094c0:	4b45      	ldr	r3, [pc, #276]	@ (80095d8 <MX_GPIO_Init+0x144>)
 80094c2:	699b      	ldr	r3, [r3, #24]
 80094c4:	4a44      	ldr	r2, [pc, #272]	@ (80095d8 <MX_GPIO_Init+0x144>)
 80094c6:	f043 0320 	orr.w	r3, r3, #32
 80094ca:	6193      	str	r3, [r2, #24]
 80094cc:	4b42      	ldr	r3, [pc, #264]	@ (80095d8 <MX_GPIO_Init+0x144>)
 80094ce:	699b      	ldr	r3, [r3, #24]
 80094d0:	f003 0320 	and.w	r3, r3, #32
 80094d4:	60bb      	str	r3, [r7, #8]
 80094d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80094d8:	4b3f      	ldr	r3, [pc, #252]	@ (80095d8 <MX_GPIO_Init+0x144>)
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	4a3e      	ldr	r2, [pc, #248]	@ (80095d8 <MX_GPIO_Init+0x144>)
 80094de:	f043 0304 	orr.w	r3, r3, #4
 80094e2:	6193      	str	r3, [r2, #24]
 80094e4:	4b3c      	ldr	r3, [pc, #240]	@ (80095d8 <MX_GPIO_Init+0x144>)
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	f003 0304 	and.w	r3, r3, #4
 80094ec:	607b      	str	r3, [r7, #4]
 80094ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80094f0:	4b39      	ldr	r3, [pc, #228]	@ (80095d8 <MX_GPIO_Init+0x144>)
 80094f2:	699b      	ldr	r3, [r3, #24]
 80094f4:	4a38      	ldr	r2, [pc, #224]	@ (80095d8 <MX_GPIO_Init+0x144>)
 80094f6:	f043 0308 	orr.w	r3, r3, #8
 80094fa:	6193      	str	r3, [r2, #24]
 80094fc:	4b36      	ldr	r3, [pc, #216]	@ (80095d8 <MX_GPIO_Init+0x144>)
 80094fe:	699b      	ldr	r3, [r3, #24]
 8009500:	f003 0308 	and.w	r3, r3, #8
 8009504:	603b      	str	r3, [r7, #0]
 8009506:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8009508:	2200      	movs	r2, #0
 800950a:	21f0      	movs	r1, #240	@ 0xf0
 800950c:	4833      	ldr	r0, [pc, #204]	@ (80095dc <MX_GPIO_Init+0x148>)
 800950e:	f001 f8b4 	bl	800a67a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8009512:	2200      	movs	r2, #0
 8009514:	f241 0130 	movw	r1, #4144	@ 0x1030
 8009518:	4831      	ldr	r0, [pc, #196]	@ (80095e0 <MX_GPIO_Init+0x14c>)
 800951a:	f001 f8ae 	bl	800a67a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800951e:	2200      	movs	r2, #0
 8009520:	f640 4107 	movw	r1, #3079	@ 0xc07
 8009524:	482f      	ldr	r0, [pc, #188]	@ (80095e4 <MX_GPIO_Init+0x150>)
 8009526:	f001 f8a8 	bl	800a67a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800952a:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 800952e:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009530:	2300      	movs	r3, #0
 8009532:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009534:	2300      	movs	r3, #0
 8009536:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009538:	f107 0310 	add.w	r3, r7, #16
 800953c:	4619      	mov	r1, r3
 800953e:	4828      	ldr	r0, [pc, #160]	@ (80095e0 <MX_GPIO_Init+0x14c>)
 8009540:	f000 fe24 	bl	800a18c <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8009544:	f248 130f 	movw	r3, #33039	@ 0x810f
 8009548:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800954a:	2300      	movs	r3, #0
 800954c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800954e:	2300      	movs	r3, #0
 8009550:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009552:	f107 0310 	add.w	r3, r7, #16
 8009556:	4619      	mov	r1, r3
 8009558:	4820      	ldr	r0, [pc, #128]	@ (80095dc <MX_GPIO_Init+0x148>)
 800955a:	f000 fe17 	bl	800a18c <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 800955e:	23f0      	movs	r3, #240	@ 0xf0
 8009560:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009562:	2301      	movs	r3, #1
 8009564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009566:	2300      	movs	r3, #0
 8009568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800956a:	2302      	movs	r3, #2
 800956c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800956e:	f107 0310 	add.w	r3, r7, #16
 8009572:	4619      	mov	r1, r3
 8009574:	4819      	ldr	r0, [pc, #100]	@ (80095dc <MX_GPIO_Init+0x148>)
 8009576:	f000 fe09 	bl	800a18c <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800957a:	f241 0330 	movw	r3, #4144	@ 0x1030
 800957e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009580:	2301      	movs	r3, #1
 8009582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009584:	2300      	movs	r3, #0
 8009586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009588:	2302      	movs	r3, #2
 800958a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800958c:	f107 0310 	add.w	r3, r7, #16
 8009590:	4619      	mov	r1, r3
 8009592:	4813      	ldr	r0, [pc, #76]	@ (80095e0 <MX_GPIO_Init+0x14c>)
 8009594:	f000 fdfa 	bl	800a18c <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8009598:	f640 4307 	movw	r3, #3079	@ 0xc07
 800959c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800959e:	2301      	movs	r3, #1
 80095a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095a2:	2300      	movs	r3, #0
 80095a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80095a6:	2302      	movs	r3, #2
 80095a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80095aa:	f107 0310 	add.w	r3, r7, #16
 80095ae:	4619      	mov	r1, r3
 80095b0:	480c      	ldr	r0, [pc, #48]	@ (80095e4 <MX_GPIO_Init+0x150>)
 80095b2:	f000 fdeb 	bl	800a18c <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 80095b6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80095ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80095bc:	2300      	movs	r3, #0
 80095be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095c0:	2300      	movs	r3, #0
 80095c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80095c4:	f107 0310 	add.w	r3, r7, #16
 80095c8:	4619      	mov	r1, r3
 80095ca:	4806      	ldr	r0, [pc, #24]	@ (80095e4 <MX_GPIO_Init+0x150>)
 80095cc:	f000 fdde 	bl	800a18c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80095d0:	bf00      	nop
 80095d2:	3720      	adds	r7, #32
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}
 80095d8:	40021000 	.word	0x40021000
 80095dc:	40010800 	.word	0x40010800
 80095e0:	40011000 	.word	0x40011000
 80095e4:	40010c00 	.word	0x40010c00

080095e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80095e8:	b480      	push	{r7}
 80095ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80095ec:	bf00      	nop
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bc80      	pop	{r7}
 80095f2:	4770      	bx	lr

080095f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80095fa:	4b15      	ldr	r3, [pc, #84]	@ (8009650 <HAL_MspInit+0x5c>)
 80095fc:	699b      	ldr	r3, [r3, #24]
 80095fe:	4a14      	ldr	r2, [pc, #80]	@ (8009650 <HAL_MspInit+0x5c>)
 8009600:	f043 0301 	orr.w	r3, r3, #1
 8009604:	6193      	str	r3, [r2, #24]
 8009606:	4b12      	ldr	r3, [pc, #72]	@ (8009650 <HAL_MspInit+0x5c>)
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	60bb      	str	r3, [r7, #8]
 8009610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009612:	4b0f      	ldr	r3, [pc, #60]	@ (8009650 <HAL_MspInit+0x5c>)
 8009614:	69db      	ldr	r3, [r3, #28]
 8009616:	4a0e      	ldr	r2, [pc, #56]	@ (8009650 <HAL_MspInit+0x5c>)
 8009618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800961c:	61d3      	str	r3, [r2, #28]
 800961e:	4b0c      	ldr	r3, [pc, #48]	@ (8009650 <HAL_MspInit+0x5c>)
 8009620:	69db      	ldr	r3, [r3, #28]
 8009622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009626:	607b      	str	r3, [r7, #4]
 8009628:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800962a:	4b0a      	ldr	r3, [pc, #40]	@ (8009654 <HAL_MspInit+0x60>)
 800962c:	685b      	ldr	r3, [r3, #4]
 800962e:	60fb      	str	r3, [r7, #12]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8009636:	60fb      	str	r3, [r7, #12]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800963e:	60fb      	str	r3, [r7, #12]
 8009640:	4a04      	ldr	r2, [pc, #16]	@ (8009654 <HAL_MspInit+0x60>)
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009646:	bf00      	nop
 8009648:	3714      	adds	r7, #20
 800964a:	46bd      	mov	sp, r7
 800964c:	bc80      	pop	{r7}
 800964e:	4770      	bx	lr
 8009650:	40021000 	.word	0x40021000
 8009654:	40010000 	.word	0x40010000

08009658 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b088      	sub	sp, #32
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009660:	f107 0310 	add.w	r3, r7, #16
 8009664:	2200      	movs	r2, #0
 8009666:	601a      	str	r2, [r3, #0]
 8009668:	605a      	str	r2, [r3, #4]
 800966a:	609a      	str	r2, [r3, #8]
 800966c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a1c      	ldr	r2, [pc, #112]	@ (80096e4 <HAL_CAN_MspInit+0x8c>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d131      	bne.n	80096dc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8009678:	4b1b      	ldr	r3, [pc, #108]	@ (80096e8 <HAL_CAN_MspInit+0x90>)
 800967a:	69db      	ldr	r3, [r3, #28]
 800967c:	4a1a      	ldr	r2, [pc, #104]	@ (80096e8 <HAL_CAN_MspInit+0x90>)
 800967e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009682:	61d3      	str	r3, [r2, #28]
 8009684:	4b18      	ldr	r3, [pc, #96]	@ (80096e8 <HAL_CAN_MspInit+0x90>)
 8009686:	69db      	ldr	r3, [r3, #28]
 8009688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800968c:	60fb      	str	r3, [r7, #12]
 800968e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009690:	4b15      	ldr	r3, [pc, #84]	@ (80096e8 <HAL_CAN_MspInit+0x90>)
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	4a14      	ldr	r2, [pc, #80]	@ (80096e8 <HAL_CAN_MspInit+0x90>)
 8009696:	f043 0304 	orr.w	r3, r3, #4
 800969a:	6193      	str	r3, [r2, #24]
 800969c:	4b12      	ldr	r3, [pc, #72]	@ (80096e8 <HAL_CAN_MspInit+0x90>)
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	f003 0304 	and.w	r3, r3, #4
 80096a4:	60bb      	str	r3, [r7, #8]
 80096a6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80096a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80096ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80096ae:	2300      	movs	r3, #0
 80096b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096b2:	2300      	movs	r3, #0
 80096b4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096b6:	f107 0310 	add.w	r3, r7, #16
 80096ba:	4619      	mov	r1, r3
 80096bc:	480b      	ldr	r0, [pc, #44]	@ (80096ec <HAL_CAN_MspInit+0x94>)
 80096be:	f000 fd65 	bl	800a18c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80096c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80096c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096c8:	2302      	movs	r3, #2
 80096ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80096cc:	2303      	movs	r3, #3
 80096ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096d0:	f107 0310 	add.w	r3, r7, #16
 80096d4:	4619      	mov	r1, r3
 80096d6:	4805      	ldr	r0, [pc, #20]	@ (80096ec <HAL_CAN_MspInit+0x94>)
 80096d8:	f000 fd58 	bl	800a18c <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80096dc:	bf00      	nop
 80096de:	3720      	adds	r7, #32
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	40006400 	.word	0x40006400
 80096e8:	40021000 	.word	0x40021000
 80096ec:	40010800 	.word	0x40010800

080096f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b088      	sub	sp, #32
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096f8:	f107 0310 	add.w	r3, r7, #16
 80096fc:	2200      	movs	r2, #0
 80096fe:	601a      	str	r2, [r3, #0]
 8009700:	605a      	str	r2, [r3, #4]
 8009702:	609a      	str	r2, [r3, #8]
 8009704:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a15      	ldr	r2, [pc, #84]	@ (8009760 <HAL_I2C_MspInit+0x70>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d123      	bne.n	8009758 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009710:	4b14      	ldr	r3, [pc, #80]	@ (8009764 <HAL_I2C_MspInit+0x74>)
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	4a13      	ldr	r2, [pc, #76]	@ (8009764 <HAL_I2C_MspInit+0x74>)
 8009716:	f043 0308 	orr.w	r3, r3, #8
 800971a:	6193      	str	r3, [r2, #24]
 800971c:	4b11      	ldr	r3, [pc, #68]	@ (8009764 <HAL_I2C_MspInit+0x74>)
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	f003 0308 	and.w	r3, r3, #8
 8009724:	60fb      	str	r3, [r7, #12]
 8009726:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009728:	23c0      	movs	r3, #192	@ 0xc0
 800972a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800972c:	2312      	movs	r3, #18
 800972e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009730:	2303      	movs	r3, #3
 8009732:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009734:	f107 0310 	add.w	r3, r7, #16
 8009738:	4619      	mov	r1, r3
 800973a:	480b      	ldr	r0, [pc, #44]	@ (8009768 <HAL_I2C_MspInit+0x78>)
 800973c:	f000 fd26 	bl	800a18c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009740:	4b08      	ldr	r3, [pc, #32]	@ (8009764 <HAL_I2C_MspInit+0x74>)
 8009742:	69db      	ldr	r3, [r3, #28]
 8009744:	4a07      	ldr	r2, [pc, #28]	@ (8009764 <HAL_I2C_MspInit+0x74>)
 8009746:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800974a:	61d3      	str	r3, [r2, #28]
 800974c:	4b05      	ldr	r3, [pc, #20]	@ (8009764 <HAL_I2C_MspInit+0x74>)
 800974e:	69db      	ldr	r3, [r3, #28]
 8009750:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009754:	60bb      	str	r3, [r7, #8]
 8009756:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8009758:	bf00      	nop
 800975a:	3720      	adds	r7, #32
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	40005400 	.word	0x40005400
 8009764:	40021000 	.word	0x40021000
 8009768:	40010c00 	.word	0x40010c00

0800976c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b082      	sub	sp, #8
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4a0a      	ldr	r2, [pc, #40]	@ (80097a4 <HAL_I2C_MspDeInit+0x38>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d10d      	bne.n	800979a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800977e:	4b0a      	ldr	r3, [pc, #40]	@ (80097a8 <HAL_I2C_MspDeInit+0x3c>)
 8009780:	69db      	ldr	r3, [r3, #28]
 8009782:	4a09      	ldr	r2, [pc, #36]	@ (80097a8 <HAL_I2C_MspDeInit+0x3c>)
 8009784:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009788:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800978a:	2140      	movs	r1, #64	@ 0x40
 800978c:	4807      	ldr	r0, [pc, #28]	@ (80097ac <HAL_I2C_MspDeInit+0x40>)
 800978e:	f000 fe91 	bl	800a4b4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8009792:	2180      	movs	r1, #128	@ 0x80
 8009794:	4805      	ldr	r0, [pc, #20]	@ (80097ac <HAL_I2C_MspDeInit+0x40>)
 8009796:	f000 fe8d 	bl	800a4b4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800979a:	bf00      	nop
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	40005400 	.word	0x40005400
 80097a8:	40021000 	.word	0x40021000
 80097ac:	40010c00 	.word	0x40010c00

080097b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a0d      	ldr	r2, [pc, #52]	@ (80097f4 <HAL_TIM_Base_MspInit+0x44>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d113      	bne.n	80097ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80097c2:	4b0d      	ldr	r3, [pc, #52]	@ (80097f8 <HAL_TIM_Base_MspInit+0x48>)
 80097c4:	699b      	ldr	r3, [r3, #24]
 80097c6:	4a0c      	ldr	r2, [pc, #48]	@ (80097f8 <HAL_TIM_Base_MspInit+0x48>)
 80097c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80097cc:	6193      	str	r3, [r2, #24]
 80097ce:	4b0a      	ldr	r3, [pc, #40]	@ (80097f8 <HAL_TIM_Base_MspInit+0x48>)
 80097d0:	699b      	ldr	r3, [r3, #24]
 80097d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097d6:	60fb      	str	r3, [r7, #12]
 80097d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80097da:	2200      	movs	r2, #0
 80097dc:	2100      	movs	r1, #0
 80097de:	2019      	movs	r0, #25
 80097e0:	f000 fb5b 	bl	8009e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80097e4:	2019      	movs	r0, #25
 80097e6:	f000 fb74 	bl	8009ed2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80097ea:	bf00      	nop
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}
 80097f2:	bf00      	nop
 80097f4:	40012c00 	.word	0x40012c00
 80097f8:	40021000 	.word	0x40021000

080097fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b088      	sub	sp, #32
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009804:	f107 0310 	add.w	r3, r7, #16
 8009808:	2200      	movs	r2, #0
 800980a:	601a      	str	r2, [r3, #0]
 800980c:	605a      	str	r2, [r3, #4]
 800980e:	609a      	str	r2, [r3, #8]
 8009810:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a20      	ldr	r2, [pc, #128]	@ (8009898 <HAL_UART_MspInit+0x9c>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d139      	bne.n	8009890 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800981c:	4b1f      	ldr	r3, [pc, #124]	@ (800989c <HAL_UART_MspInit+0xa0>)
 800981e:	699b      	ldr	r3, [r3, #24]
 8009820:	4a1e      	ldr	r2, [pc, #120]	@ (800989c <HAL_UART_MspInit+0xa0>)
 8009822:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009826:	6193      	str	r3, [r2, #24]
 8009828:	4b1c      	ldr	r3, [pc, #112]	@ (800989c <HAL_UART_MspInit+0xa0>)
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009830:	60fb      	str	r3, [r7, #12]
 8009832:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009834:	4b19      	ldr	r3, [pc, #100]	@ (800989c <HAL_UART_MspInit+0xa0>)
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	4a18      	ldr	r2, [pc, #96]	@ (800989c <HAL_UART_MspInit+0xa0>)
 800983a:	f043 0304 	orr.w	r3, r3, #4
 800983e:	6193      	str	r3, [r2, #24]
 8009840:	4b16      	ldr	r3, [pc, #88]	@ (800989c <HAL_UART_MspInit+0xa0>)
 8009842:	699b      	ldr	r3, [r3, #24]
 8009844:	f003 0304 	and.w	r3, r3, #4
 8009848:	60bb      	str	r3, [r7, #8]
 800984a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800984c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009850:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009852:	2302      	movs	r3, #2
 8009854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009856:	2303      	movs	r3, #3
 8009858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800985a:	f107 0310 	add.w	r3, r7, #16
 800985e:	4619      	mov	r1, r3
 8009860:	480f      	ldr	r0, [pc, #60]	@ (80098a0 <HAL_UART_MspInit+0xa4>)
 8009862:	f000 fc93 	bl	800a18c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009866:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800986a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800986c:	2300      	movs	r3, #0
 800986e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009870:	2300      	movs	r3, #0
 8009872:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009874:	f107 0310 	add.w	r3, r7, #16
 8009878:	4619      	mov	r1, r3
 800987a:	4809      	ldr	r0, [pc, #36]	@ (80098a0 <HAL_UART_MspInit+0xa4>)
 800987c:	f000 fc86 	bl	800a18c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009880:	2200      	movs	r2, #0
 8009882:	2100      	movs	r1, #0
 8009884:	2025      	movs	r0, #37	@ 0x25
 8009886:	f000 fb08 	bl	8009e9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800988a:	2025      	movs	r0, #37	@ 0x25
 800988c:	f000 fb21 	bl	8009ed2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8009890:	bf00      	nop
 8009892:	3720      	adds	r7, #32
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}
 8009898:	40013800 	.word	0x40013800
 800989c:	40021000 	.word	0x40021000
 80098a0:	40010800 	.word	0x40010800

080098a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80098a4:	b480      	push	{r7}
 80098a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80098a8:	bf00      	nop
 80098aa:	e7fd      	b.n	80098a8 <NMI_Handler+0x4>

080098ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80098ac:	b480      	push	{r7}
 80098ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80098b0:	bf00      	nop
 80098b2:	e7fd      	b.n	80098b0 <HardFault_Handler+0x4>

080098b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80098b4:	b480      	push	{r7}
 80098b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80098b8:	bf00      	nop
 80098ba:	e7fd      	b.n	80098b8 <MemManage_Handler+0x4>

080098bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80098bc:	b480      	push	{r7}
 80098be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80098c0:	bf00      	nop
 80098c2:	e7fd      	b.n	80098c0 <BusFault_Handler+0x4>

080098c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80098c4:	b480      	push	{r7}
 80098c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80098c8:	bf00      	nop
 80098ca:	e7fd      	b.n	80098c8 <UsageFault_Handler+0x4>

080098cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80098cc:	b480      	push	{r7}
 80098ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80098d0:	bf00      	nop
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bc80      	pop	{r7}
 80098d6:	4770      	bx	lr

080098d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80098d8:	b480      	push	{r7}
 80098da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80098dc:	bf00      	nop
 80098de:	46bd      	mov	sp, r7
 80098e0:	bc80      	pop	{r7}
 80098e2:	4770      	bx	lr

080098e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80098e4:	b480      	push	{r7}
 80098e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80098e8:	bf00      	nop
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bc80      	pop	{r7}
 80098ee:	4770      	bx	lr

080098f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80098f4:	f000 f8be 	bl	8009a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80098f8:	bf00      	nop
 80098fa:	bd80      	pop	{r7, pc}

080098fc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009900:	4802      	ldr	r0, [pc, #8]	@ (800990c <TIM1_UP_IRQHandler+0x10>)
 8009902:	f002 fdcd 	bl	800c4a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8009906:	bf00      	nop
 8009908:	bd80      	pop	{r7, pc}
 800990a:	bf00      	nop
 800990c:	20001d90 	.word	0x20001d90

08009910 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009914:	4802      	ldr	r0, [pc, #8]	@ (8009920 <USART1_IRQHandler+0x10>)
 8009916:	f003 fa73 	bl	800ce00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800991a:	bf00      	nop
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	20001dd8 	.word	0x20001dd8

08009924 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b086      	sub	sp, #24
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800992c:	4a14      	ldr	r2, [pc, #80]	@ (8009980 <_sbrk+0x5c>)
 800992e:	4b15      	ldr	r3, [pc, #84]	@ (8009984 <_sbrk+0x60>)
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009938:	4b13      	ldr	r3, [pc, #76]	@ (8009988 <_sbrk+0x64>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d102      	bne.n	8009946 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009940:	4b11      	ldr	r3, [pc, #68]	@ (8009988 <_sbrk+0x64>)
 8009942:	4a12      	ldr	r2, [pc, #72]	@ (800998c <_sbrk+0x68>)
 8009944:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009946:	4b10      	ldr	r3, [pc, #64]	@ (8009988 <_sbrk+0x64>)
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4413      	add	r3, r2
 800994e:	693a      	ldr	r2, [r7, #16]
 8009950:	429a      	cmp	r2, r3
 8009952:	d207      	bcs.n	8009964 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009954:	f004 f940 	bl	800dbd8 <__errno>
 8009958:	4603      	mov	r3, r0
 800995a:	220c      	movs	r2, #12
 800995c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800995e:	f04f 33ff 	mov.w	r3, #4294967295
 8009962:	e009      	b.n	8009978 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009964:	4b08      	ldr	r3, [pc, #32]	@ (8009988 <_sbrk+0x64>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800996a:	4b07      	ldr	r3, [pc, #28]	@ (8009988 <_sbrk+0x64>)
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4413      	add	r3, r2
 8009972:	4a05      	ldr	r2, [pc, #20]	@ (8009988 <_sbrk+0x64>)
 8009974:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009976:	68fb      	ldr	r3, [r7, #12]
}
 8009978:	4618      	mov	r0, r3
 800997a:	3718      	adds	r7, #24
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	2000c000 	.word	0x2000c000
 8009984:	00000400 	.word	0x00000400
 8009988:	20001e20 	.word	0x20001e20
 800998c:	20001f70 	.word	0x20001f70

08009990 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009990:	b480      	push	{r7}
 8009992:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009994:	bf00      	nop
 8009996:	46bd      	mov	sp, r7
 8009998:	bc80      	pop	{r7}
 800999a:	4770      	bx	lr

0800999c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800999c:	480c      	ldr	r0, [pc, #48]	@ (80099d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800999e:	490d      	ldr	r1, [pc, #52]	@ (80099d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80099a0:	4a0d      	ldr	r2, [pc, #52]	@ (80099d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80099a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80099a4:	e002      	b.n	80099ac <LoopCopyDataInit>

080099a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80099a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80099a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80099aa:	3304      	adds	r3, #4

080099ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80099ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80099ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80099b0:	d3f9      	bcc.n	80099a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80099b2:	4a0a      	ldr	r2, [pc, #40]	@ (80099dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80099b4:	4c0a      	ldr	r4, [pc, #40]	@ (80099e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80099b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80099b8:	e001      	b.n	80099be <LoopFillZerobss>

080099ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80099ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80099bc:	3204      	adds	r2, #4

080099be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80099be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80099c0:	d3fb      	bcc.n	80099ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80099c2:	f7ff ffe5 	bl	8009990 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80099c6:	f004 f90d 	bl	800dbe4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80099ca:	f7ff fb99 	bl	8009100 <main>
  bx lr
 80099ce:	4770      	bx	lr
  ldr r0, =_sdata
 80099d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80099d4:	20000fd0 	.word	0x20000fd0
  ldr r2, =_sidata
 80099d8:	0800f180 	.word	0x0800f180
  ldr r2, =_sbss
 80099dc:	20000fd0 	.word	0x20000fd0
  ldr r4, =_ebss
 80099e0:	20001f70 	.word	0x20001f70

080099e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80099e4:	e7fe      	b.n	80099e4 <ADC1_2_IRQHandler>
	...

080099e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80099ec:	4b08      	ldr	r3, [pc, #32]	@ (8009a10 <HAL_Init+0x28>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a07      	ldr	r2, [pc, #28]	@ (8009a10 <HAL_Init+0x28>)
 80099f2:	f043 0310 	orr.w	r3, r3, #16
 80099f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80099f8:	2003      	movs	r0, #3
 80099fa:	f000 fa43 	bl	8009e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80099fe:	200f      	movs	r0, #15
 8009a00:	f000 f808 	bl	8009a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009a04:	f7ff fdf6 	bl	80095f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009a08:	2300      	movs	r3, #0
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	40022000 	.word	0x40022000

08009a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009a1c:	4b12      	ldr	r3, [pc, #72]	@ (8009a68 <HAL_InitTick+0x54>)
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	4b12      	ldr	r3, [pc, #72]	@ (8009a6c <HAL_InitTick+0x58>)
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	4619      	mov	r1, r3
 8009a26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8009a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a32:	4618      	mov	r0, r3
 8009a34:	f000 fa5b 	bl	8009eee <HAL_SYSTICK_Config>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d001      	beq.n	8009a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e00e      	b.n	8009a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2b0f      	cmp	r3, #15
 8009a46:	d80a      	bhi.n	8009a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009a48:	2200      	movs	r2, #0
 8009a4a:	6879      	ldr	r1, [r7, #4]
 8009a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a50:	f000 fa23 	bl	8009e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009a54:	4a06      	ldr	r2, [pc, #24]	@ (8009a70 <HAL_InitTick+0x5c>)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	e000      	b.n	8009a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	20000f74 	.word	0x20000f74
 8009a6c:	20000f7c 	.word	0x20000f7c
 8009a70:	20000f78 	.word	0x20000f78

08009a74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009a74:	b480      	push	{r7}
 8009a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009a78:	4b05      	ldr	r3, [pc, #20]	@ (8009a90 <HAL_IncTick+0x1c>)
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	4b05      	ldr	r3, [pc, #20]	@ (8009a94 <HAL_IncTick+0x20>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4413      	add	r3, r2
 8009a84:	4a03      	ldr	r2, [pc, #12]	@ (8009a94 <HAL_IncTick+0x20>)
 8009a86:	6013      	str	r3, [r2, #0]
}
 8009a88:	bf00      	nop
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bc80      	pop	{r7}
 8009a8e:	4770      	bx	lr
 8009a90:	20000f7c 	.word	0x20000f7c
 8009a94:	20001e24 	.word	0x20001e24

08009a98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8009a9c:	4b02      	ldr	r3, [pc, #8]	@ (8009aa8 <HAL_GetTick+0x10>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bc80      	pop	{r7}
 8009aa6:	4770      	bx	lr
 8009aa8:	20001e24 	.word	0x20001e24

08009aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009ab4:	f7ff fff0 	bl	8009a98 <HAL_GetTick>
 8009ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac4:	d005      	beq.n	8009ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8009af0 <HAL_Delay+0x44>)
 8009ac8:	781b      	ldrb	r3, [r3, #0]
 8009aca:	461a      	mov	r2, r3
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4413      	add	r3, r2
 8009ad0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009ad2:	bf00      	nop
 8009ad4:	f7ff ffe0 	bl	8009a98 <HAL_GetTick>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d8f7      	bhi.n	8009ad4 <HAL_Delay+0x28>
  {
  }
}
 8009ae4:	bf00      	nop
 8009ae6:	bf00      	nop
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	20000f7c 	.word	0x20000f7c

08009af4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d101      	bne.n	8009b06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e0ed      	b.n	8009ce2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d102      	bne.n	8009b18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7ff fda0 	bl	8009658 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f042 0201 	orr.w	r2, r2, #1
 8009b26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009b28:	f7ff ffb6 	bl	8009a98 <HAL_GetTick>
 8009b2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009b2e:	e012      	b.n	8009b56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009b30:	f7ff ffb2 	bl	8009a98 <HAL_GetTick>
 8009b34:	4602      	mov	r2, r0
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	2b0a      	cmp	r3, #10
 8009b3c:	d90b      	bls.n	8009b56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2205      	movs	r2, #5
 8009b4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	e0c5      	b.n	8009ce2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	f003 0301 	and.w	r3, r3, #1
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d0e5      	beq.n	8009b30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f022 0202 	bic.w	r2, r2, #2
 8009b72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009b74:	f7ff ff90 	bl	8009a98 <HAL_GetTick>
 8009b78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009b7a:	e012      	b.n	8009ba2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009b7c:	f7ff ff8c 	bl	8009a98 <HAL_GetTick>
 8009b80:	4602      	mov	r2, r0
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	2b0a      	cmp	r3, #10
 8009b88:	d90b      	bls.n	8009ba2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2205      	movs	r2, #5
 8009b9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e09f      	b.n	8009ce2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	f003 0302 	and.w	r3, r3, #2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d1e5      	bne.n	8009b7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	7e1b      	ldrb	r3, [r3, #24]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d108      	bne.n	8009bca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009bc6:	601a      	str	r2, [r3, #0]
 8009bc8:	e007      	b.n	8009bda <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009bd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	7e5b      	ldrb	r3, [r3, #25]
 8009bde:	2b01      	cmp	r3, #1
 8009be0:	d108      	bne.n	8009bf4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009bf0:	601a      	str	r2, [r3, #0]
 8009bf2:	e007      	b.n	8009c04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	7e9b      	ldrb	r3, [r3, #26]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d108      	bne.n	8009c1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f042 0220 	orr.w	r2, r2, #32
 8009c1a:	601a      	str	r2, [r3, #0]
 8009c1c:	e007      	b.n	8009c2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f022 0220 	bic.w	r2, r2, #32
 8009c2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	7edb      	ldrb	r3, [r3, #27]
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d108      	bne.n	8009c48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f022 0210 	bic.w	r2, r2, #16
 8009c44:	601a      	str	r2, [r3, #0]
 8009c46:	e007      	b.n	8009c58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f042 0210 	orr.w	r2, r2, #16
 8009c56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	7f1b      	ldrb	r3, [r3, #28]
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d108      	bne.n	8009c72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f042 0208 	orr.w	r2, r2, #8
 8009c6e:	601a      	str	r2, [r3, #0]
 8009c70:	e007      	b.n	8009c82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f022 0208 	bic.w	r2, r2, #8
 8009c80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	7f5b      	ldrb	r3, [r3, #29]
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d108      	bne.n	8009c9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f042 0204 	orr.w	r2, r2, #4
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	e007      	b.n	8009cac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	f022 0204 	bic.w	r2, r2, #4
 8009caa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	689a      	ldr	r2, [r3, #8]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	431a      	orrs	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	431a      	orrs	r2, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	695b      	ldr	r3, [r3, #20]
 8009cc0:	ea42 0103 	orr.w	r1, r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	1e5a      	subs	r2, r3, #1
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3710      	adds	r7, #16
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
	...

08009cec <__NVIC_SetPriorityGrouping>:
{
 8009cec:	b480      	push	{r7}
 8009cee:	b085      	sub	sp, #20
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f003 0307 	and.w	r3, r3, #7
 8009cfa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009cfc:	4b0c      	ldr	r3, [pc, #48]	@ (8009d30 <__NVIC_SetPriorityGrouping+0x44>)
 8009cfe:	68db      	ldr	r3, [r3, #12]
 8009d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009d08:	4013      	ands	r3, r2
 8009d0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009d14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009d1e:	4a04      	ldr	r2, [pc, #16]	@ (8009d30 <__NVIC_SetPriorityGrouping+0x44>)
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	60d3      	str	r3, [r2, #12]
}
 8009d24:	bf00      	nop
 8009d26:	3714      	adds	r7, #20
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bc80      	pop	{r7}
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	e000ed00 	.word	0xe000ed00

08009d34 <__NVIC_GetPriorityGrouping>:
{
 8009d34:	b480      	push	{r7}
 8009d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009d38:	4b04      	ldr	r3, [pc, #16]	@ (8009d4c <__NVIC_GetPriorityGrouping+0x18>)
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	0a1b      	lsrs	r3, r3, #8
 8009d3e:	f003 0307 	and.w	r3, r3, #7
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bc80      	pop	{r7}
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	e000ed00 	.word	0xe000ed00

08009d50 <__NVIC_EnableIRQ>:
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	4603      	mov	r3, r0
 8009d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	db0b      	blt.n	8009d7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009d62:	79fb      	ldrb	r3, [r7, #7]
 8009d64:	f003 021f 	and.w	r2, r3, #31
 8009d68:	4906      	ldr	r1, [pc, #24]	@ (8009d84 <__NVIC_EnableIRQ+0x34>)
 8009d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d6e:	095b      	lsrs	r3, r3, #5
 8009d70:	2001      	movs	r0, #1
 8009d72:	fa00 f202 	lsl.w	r2, r0, r2
 8009d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009d7a:	bf00      	nop
 8009d7c:	370c      	adds	r7, #12
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bc80      	pop	{r7}
 8009d82:	4770      	bx	lr
 8009d84:	e000e100 	.word	0xe000e100

08009d88 <__NVIC_SetPriority>:
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	4603      	mov	r3, r0
 8009d90:	6039      	str	r1, [r7, #0]
 8009d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	db0a      	blt.n	8009db2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	b2da      	uxtb	r2, r3
 8009da0:	490c      	ldr	r1, [pc, #48]	@ (8009dd4 <__NVIC_SetPriority+0x4c>)
 8009da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009da6:	0112      	lsls	r2, r2, #4
 8009da8:	b2d2      	uxtb	r2, r2
 8009daa:	440b      	add	r3, r1
 8009dac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009db0:	e00a      	b.n	8009dc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	b2da      	uxtb	r2, r3
 8009db6:	4908      	ldr	r1, [pc, #32]	@ (8009dd8 <__NVIC_SetPriority+0x50>)
 8009db8:	79fb      	ldrb	r3, [r7, #7]
 8009dba:	f003 030f 	and.w	r3, r3, #15
 8009dbe:	3b04      	subs	r3, #4
 8009dc0:	0112      	lsls	r2, r2, #4
 8009dc2:	b2d2      	uxtb	r2, r2
 8009dc4:	440b      	add	r3, r1
 8009dc6:	761a      	strb	r2, [r3, #24]
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bc80      	pop	{r7}
 8009dd0:	4770      	bx	lr
 8009dd2:	bf00      	nop
 8009dd4:	e000e100 	.word	0xe000e100
 8009dd8:	e000ed00 	.word	0xe000ed00

08009ddc <NVIC_EncodePriority>:
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b089      	sub	sp, #36	@ 0x24
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	60f8      	str	r0, [r7, #12]
 8009de4:	60b9      	str	r1, [r7, #8]
 8009de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f003 0307 	and.w	r3, r3, #7
 8009dee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009df0:	69fb      	ldr	r3, [r7, #28]
 8009df2:	f1c3 0307 	rsb	r3, r3, #7
 8009df6:	2b04      	cmp	r3, #4
 8009df8:	bf28      	it	cs
 8009dfa:	2304      	movcs	r3, #4
 8009dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	3304      	adds	r3, #4
 8009e02:	2b06      	cmp	r3, #6
 8009e04:	d902      	bls.n	8009e0c <NVIC_EncodePriority+0x30>
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	3b03      	subs	r3, #3
 8009e0a:	e000      	b.n	8009e0e <NVIC_EncodePriority+0x32>
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e10:	f04f 32ff 	mov.w	r2, #4294967295
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	fa02 f303 	lsl.w	r3, r2, r3
 8009e1a:	43da      	mvns	r2, r3
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	401a      	ands	r2, r3
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009e24:	f04f 31ff 	mov.w	r1, #4294967295
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e2e:	43d9      	mvns	r1, r3
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e34:	4313      	orrs	r3, r2
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3724      	adds	r7, #36	@ 0x24
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bc80      	pop	{r7}
 8009e3e:	4770      	bx	lr

08009e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e50:	d301      	bcc.n	8009e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009e52:	2301      	movs	r3, #1
 8009e54:	e00f      	b.n	8009e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009e56:	4a0a      	ldr	r2, [pc, #40]	@ (8009e80 <SysTick_Config+0x40>)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009e5e:	210f      	movs	r1, #15
 8009e60:	f04f 30ff 	mov.w	r0, #4294967295
 8009e64:	f7ff ff90 	bl	8009d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009e68:	4b05      	ldr	r3, [pc, #20]	@ (8009e80 <SysTick_Config+0x40>)
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009e6e:	4b04      	ldr	r3, [pc, #16]	@ (8009e80 <SysTick_Config+0x40>)
 8009e70:	2207      	movs	r2, #7
 8009e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	e000e010 	.word	0xe000e010

08009e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f7ff ff2d 	bl	8009cec <__NVIC_SetPriorityGrouping>
}
 8009e92:	bf00      	nop
 8009e94:	3708      	adds	r7, #8
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b086      	sub	sp, #24
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	60b9      	str	r1, [r7, #8]
 8009ea4:	607a      	str	r2, [r7, #4]
 8009ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009eac:	f7ff ff42 	bl	8009d34 <__NVIC_GetPriorityGrouping>
 8009eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	68b9      	ldr	r1, [r7, #8]
 8009eb6:	6978      	ldr	r0, [r7, #20]
 8009eb8:	f7ff ff90 	bl	8009ddc <NVIC_EncodePriority>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ec2:	4611      	mov	r1, r2
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7ff ff5f 	bl	8009d88 <__NVIC_SetPriority>
}
 8009eca:	bf00      	nop
 8009ecc:	3718      	adds	r7, #24
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b082      	sub	sp, #8
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	4603      	mov	r3, r0
 8009eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7ff ff35 	bl	8009d50 <__NVIC_EnableIRQ>
}
 8009ee6:	bf00      	nop
 8009ee8:	3708      	adds	r7, #8
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b082      	sub	sp, #8
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f7ff ffa2 	bl	8009e40 <SysTick_Config>
 8009efc:	4603      	mov	r3, r0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3708      	adds	r7, #8
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b085      	sub	sp, #20
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	d008      	beq.n	8009f30 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2204      	movs	r2, #4
 8009f22:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e020      	b.n	8009f72 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f022 020e 	bic.w	r2, r2, #14
 8009f3e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f022 0201 	bic.w	r2, r2, #1
 8009f4e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f58:	2101      	movs	r1, #1
 8009f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8009f5e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2201      	movs	r2, #1
 8009f64:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3714      	adds	r7, #20
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bc80      	pop	{r7}
 8009f7a:	4770      	bx	lr

08009f7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f84:	2300      	movs	r3, #0
 8009f86:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009f8e:	b2db      	uxtb	r3, r3
 8009f90:	2b02      	cmp	r3, #2
 8009f92:	d005      	beq.n	8009fa0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2204      	movs	r2, #4
 8009f98:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	73fb      	strb	r3, [r7, #15]
 8009f9e:	e0d6      	b.n	800a14e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f022 020e 	bic.w	r2, r2, #14
 8009fae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f022 0201 	bic.w	r2, r2, #1
 8009fbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	4b64      	ldr	r3, [pc, #400]	@ (800a158 <HAL_DMA_Abort_IT+0x1dc>)
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d958      	bls.n	800a07e <HAL_DMA_Abort_IT+0x102>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a62      	ldr	r2, [pc, #392]	@ (800a15c <HAL_DMA_Abort_IT+0x1e0>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d04f      	beq.n	800a076 <HAL_DMA_Abort_IT+0xfa>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a61      	ldr	r2, [pc, #388]	@ (800a160 <HAL_DMA_Abort_IT+0x1e4>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d048      	beq.n	800a072 <HAL_DMA_Abort_IT+0xf6>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a5f      	ldr	r2, [pc, #380]	@ (800a164 <HAL_DMA_Abort_IT+0x1e8>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d040      	beq.n	800a06c <HAL_DMA_Abort_IT+0xf0>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a5e      	ldr	r2, [pc, #376]	@ (800a168 <HAL_DMA_Abort_IT+0x1ec>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d038      	beq.n	800a066 <HAL_DMA_Abort_IT+0xea>
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4a5c      	ldr	r2, [pc, #368]	@ (800a16c <HAL_DMA_Abort_IT+0x1f0>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d030      	beq.n	800a060 <HAL_DMA_Abort_IT+0xe4>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a5b      	ldr	r2, [pc, #364]	@ (800a170 <HAL_DMA_Abort_IT+0x1f4>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d028      	beq.n	800a05a <HAL_DMA_Abort_IT+0xde>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a52      	ldr	r2, [pc, #328]	@ (800a158 <HAL_DMA_Abort_IT+0x1dc>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d020      	beq.n	800a054 <HAL_DMA_Abort_IT+0xd8>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a57      	ldr	r2, [pc, #348]	@ (800a174 <HAL_DMA_Abort_IT+0x1f8>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d019      	beq.n	800a050 <HAL_DMA_Abort_IT+0xd4>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a55      	ldr	r2, [pc, #340]	@ (800a178 <HAL_DMA_Abort_IT+0x1fc>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d012      	beq.n	800a04c <HAL_DMA_Abort_IT+0xd0>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a54      	ldr	r2, [pc, #336]	@ (800a17c <HAL_DMA_Abort_IT+0x200>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d00a      	beq.n	800a046 <HAL_DMA_Abort_IT+0xca>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a52      	ldr	r2, [pc, #328]	@ (800a180 <HAL_DMA_Abort_IT+0x204>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d102      	bne.n	800a040 <HAL_DMA_Abort_IT+0xc4>
 800a03a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a03e:	e01b      	b.n	800a078 <HAL_DMA_Abort_IT+0xfc>
 800a040:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a044:	e018      	b.n	800a078 <HAL_DMA_Abort_IT+0xfc>
 800a046:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a04a:	e015      	b.n	800a078 <HAL_DMA_Abort_IT+0xfc>
 800a04c:	2310      	movs	r3, #16
 800a04e:	e013      	b.n	800a078 <HAL_DMA_Abort_IT+0xfc>
 800a050:	2301      	movs	r3, #1
 800a052:	e011      	b.n	800a078 <HAL_DMA_Abort_IT+0xfc>
 800a054:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a058:	e00e      	b.n	800a078 <HAL_DMA_Abort_IT+0xfc>
 800a05a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a05e:	e00b      	b.n	800a078 <HAL_DMA_Abort_IT+0xfc>
 800a060:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a064:	e008      	b.n	800a078 <HAL_DMA_Abort_IT+0xfc>
 800a066:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a06a:	e005      	b.n	800a078 <HAL_DMA_Abort_IT+0xfc>
 800a06c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a070:	e002      	b.n	800a078 <HAL_DMA_Abort_IT+0xfc>
 800a072:	2310      	movs	r3, #16
 800a074:	e000      	b.n	800a078 <HAL_DMA_Abort_IT+0xfc>
 800a076:	2301      	movs	r3, #1
 800a078:	4a42      	ldr	r2, [pc, #264]	@ (800a184 <HAL_DMA_Abort_IT+0x208>)
 800a07a:	6053      	str	r3, [r2, #4]
 800a07c:	e057      	b.n	800a12e <HAL_DMA_Abort_IT+0x1b2>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a36      	ldr	r2, [pc, #216]	@ (800a15c <HAL_DMA_Abort_IT+0x1e0>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d04f      	beq.n	800a128 <HAL_DMA_Abort_IT+0x1ac>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a34      	ldr	r2, [pc, #208]	@ (800a160 <HAL_DMA_Abort_IT+0x1e4>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d048      	beq.n	800a124 <HAL_DMA_Abort_IT+0x1a8>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a33      	ldr	r2, [pc, #204]	@ (800a164 <HAL_DMA_Abort_IT+0x1e8>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d040      	beq.n	800a11e <HAL_DMA_Abort_IT+0x1a2>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a31      	ldr	r2, [pc, #196]	@ (800a168 <HAL_DMA_Abort_IT+0x1ec>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d038      	beq.n	800a118 <HAL_DMA_Abort_IT+0x19c>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a30      	ldr	r2, [pc, #192]	@ (800a16c <HAL_DMA_Abort_IT+0x1f0>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d030      	beq.n	800a112 <HAL_DMA_Abort_IT+0x196>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a2e      	ldr	r2, [pc, #184]	@ (800a170 <HAL_DMA_Abort_IT+0x1f4>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d028      	beq.n	800a10c <HAL_DMA_Abort_IT+0x190>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	4a26      	ldr	r2, [pc, #152]	@ (800a158 <HAL_DMA_Abort_IT+0x1dc>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d020      	beq.n	800a106 <HAL_DMA_Abort_IT+0x18a>
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	4a2a      	ldr	r2, [pc, #168]	@ (800a174 <HAL_DMA_Abort_IT+0x1f8>)
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	d019      	beq.n	800a102 <HAL_DMA_Abort_IT+0x186>
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	4a29      	ldr	r2, [pc, #164]	@ (800a178 <HAL_DMA_Abort_IT+0x1fc>)
 800a0d4:	4293      	cmp	r3, r2
 800a0d6:	d012      	beq.n	800a0fe <HAL_DMA_Abort_IT+0x182>
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4a27      	ldr	r2, [pc, #156]	@ (800a17c <HAL_DMA_Abort_IT+0x200>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d00a      	beq.n	800a0f8 <HAL_DMA_Abort_IT+0x17c>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a26      	ldr	r2, [pc, #152]	@ (800a180 <HAL_DMA_Abort_IT+0x204>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d102      	bne.n	800a0f2 <HAL_DMA_Abort_IT+0x176>
 800a0ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a0f0:	e01b      	b.n	800a12a <HAL_DMA_Abort_IT+0x1ae>
 800a0f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a0f6:	e018      	b.n	800a12a <HAL_DMA_Abort_IT+0x1ae>
 800a0f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a0fc:	e015      	b.n	800a12a <HAL_DMA_Abort_IT+0x1ae>
 800a0fe:	2310      	movs	r3, #16
 800a100:	e013      	b.n	800a12a <HAL_DMA_Abort_IT+0x1ae>
 800a102:	2301      	movs	r3, #1
 800a104:	e011      	b.n	800a12a <HAL_DMA_Abort_IT+0x1ae>
 800a106:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a10a:	e00e      	b.n	800a12a <HAL_DMA_Abort_IT+0x1ae>
 800a10c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a110:	e00b      	b.n	800a12a <HAL_DMA_Abort_IT+0x1ae>
 800a112:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a116:	e008      	b.n	800a12a <HAL_DMA_Abort_IT+0x1ae>
 800a118:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a11c:	e005      	b.n	800a12a <HAL_DMA_Abort_IT+0x1ae>
 800a11e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a122:	e002      	b.n	800a12a <HAL_DMA_Abort_IT+0x1ae>
 800a124:	2310      	movs	r3, #16
 800a126:	e000      	b.n	800a12a <HAL_DMA_Abort_IT+0x1ae>
 800a128:	2301      	movs	r3, #1
 800a12a:	4a17      	ldr	r2, [pc, #92]	@ (800a188 <HAL_DMA_Abort_IT+0x20c>)
 800a12c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a142:	2b00      	cmp	r3, #0
 800a144:	d003      	beq.n	800a14e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	4798      	blx	r3
    } 
  }
  return status;
 800a14e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a150:	4618      	mov	r0, r3
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	40020080 	.word	0x40020080
 800a15c:	40020008 	.word	0x40020008
 800a160:	4002001c 	.word	0x4002001c
 800a164:	40020030 	.word	0x40020030
 800a168:	40020044 	.word	0x40020044
 800a16c:	40020058 	.word	0x40020058
 800a170:	4002006c 	.word	0x4002006c
 800a174:	40020408 	.word	0x40020408
 800a178:	4002041c 	.word	0x4002041c
 800a17c:	40020430 	.word	0x40020430
 800a180:	40020444 	.word	0x40020444
 800a184:	40020400 	.word	0x40020400
 800a188:	40020000 	.word	0x40020000

0800a18c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b08b      	sub	sp, #44	@ 0x2c
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a196:	2300      	movs	r3, #0
 800a198:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800a19a:	2300      	movs	r3, #0
 800a19c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a19e:	e179      	b.n	800a494 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800a1a0:	2201      	movs	r2, #1
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a1a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	69fa      	ldr	r2, [r7, #28]
 800a1b0:	4013      	ands	r3, r2
 800a1b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800a1b4:	69ba      	ldr	r2, [r7, #24]
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	f040 8168 	bne.w	800a48e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	4a96      	ldr	r2, [pc, #600]	@ (800a41c <HAL_GPIO_Init+0x290>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d05e      	beq.n	800a286 <HAL_GPIO_Init+0xfa>
 800a1c8:	4a94      	ldr	r2, [pc, #592]	@ (800a41c <HAL_GPIO_Init+0x290>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d875      	bhi.n	800a2ba <HAL_GPIO_Init+0x12e>
 800a1ce:	4a94      	ldr	r2, [pc, #592]	@ (800a420 <HAL_GPIO_Init+0x294>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d058      	beq.n	800a286 <HAL_GPIO_Init+0xfa>
 800a1d4:	4a92      	ldr	r2, [pc, #584]	@ (800a420 <HAL_GPIO_Init+0x294>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d86f      	bhi.n	800a2ba <HAL_GPIO_Init+0x12e>
 800a1da:	4a92      	ldr	r2, [pc, #584]	@ (800a424 <HAL_GPIO_Init+0x298>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d052      	beq.n	800a286 <HAL_GPIO_Init+0xfa>
 800a1e0:	4a90      	ldr	r2, [pc, #576]	@ (800a424 <HAL_GPIO_Init+0x298>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d869      	bhi.n	800a2ba <HAL_GPIO_Init+0x12e>
 800a1e6:	4a90      	ldr	r2, [pc, #576]	@ (800a428 <HAL_GPIO_Init+0x29c>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d04c      	beq.n	800a286 <HAL_GPIO_Init+0xfa>
 800a1ec:	4a8e      	ldr	r2, [pc, #568]	@ (800a428 <HAL_GPIO_Init+0x29c>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d863      	bhi.n	800a2ba <HAL_GPIO_Init+0x12e>
 800a1f2:	4a8e      	ldr	r2, [pc, #568]	@ (800a42c <HAL_GPIO_Init+0x2a0>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d046      	beq.n	800a286 <HAL_GPIO_Init+0xfa>
 800a1f8:	4a8c      	ldr	r2, [pc, #560]	@ (800a42c <HAL_GPIO_Init+0x2a0>)
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	d85d      	bhi.n	800a2ba <HAL_GPIO_Init+0x12e>
 800a1fe:	2b12      	cmp	r3, #18
 800a200:	d82a      	bhi.n	800a258 <HAL_GPIO_Init+0xcc>
 800a202:	2b12      	cmp	r3, #18
 800a204:	d859      	bhi.n	800a2ba <HAL_GPIO_Init+0x12e>
 800a206:	a201      	add	r2, pc, #4	@ (adr r2, 800a20c <HAL_GPIO_Init+0x80>)
 800a208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20c:	0800a287 	.word	0x0800a287
 800a210:	0800a261 	.word	0x0800a261
 800a214:	0800a273 	.word	0x0800a273
 800a218:	0800a2b5 	.word	0x0800a2b5
 800a21c:	0800a2bb 	.word	0x0800a2bb
 800a220:	0800a2bb 	.word	0x0800a2bb
 800a224:	0800a2bb 	.word	0x0800a2bb
 800a228:	0800a2bb 	.word	0x0800a2bb
 800a22c:	0800a2bb 	.word	0x0800a2bb
 800a230:	0800a2bb 	.word	0x0800a2bb
 800a234:	0800a2bb 	.word	0x0800a2bb
 800a238:	0800a2bb 	.word	0x0800a2bb
 800a23c:	0800a2bb 	.word	0x0800a2bb
 800a240:	0800a2bb 	.word	0x0800a2bb
 800a244:	0800a2bb 	.word	0x0800a2bb
 800a248:	0800a2bb 	.word	0x0800a2bb
 800a24c:	0800a2bb 	.word	0x0800a2bb
 800a250:	0800a269 	.word	0x0800a269
 800a254:	0800a27d 	.word	0x0800a27d
 800a258:	4a75      	ldr	r2, [pc, #468]	@ (800a430 <HAL_GPIO_Init+0x2a4>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d013      	beq.n	800a286 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800a25e:	e02c      	b.n	800a2ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	623b      	str	r3, [r7, #32]
          break;
 800a266:	e029      	b.n	800a2bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	68db      	ldr	r3, [r3, #12]
 800a26c:	3304      	adds	r3, #4
 800a26e:	623b      	str	r3, [r7, #32]
          break;
 800a270:	e024      	b.n	800a2bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	3308      	adds	r3, #8
 800a278:	623b      	str	r3, [r7, #32]
          break;
 800a27a:	e01f      	b.n	800a2bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	330c      	adds	r3, #12
 800a282:	623b      	str	r3, [r7, #32]
          break;
 800a284:	e01a      	b.n	800a2bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a286:	683b      	ldr	r3, [r7, #0]
 800a288:	689b      	ldr	r3, [r3, #8]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d102      	bne.n	800a294 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a28e:	2304      	movs	r3, #4
 800a290:	623b      	str	r3, [r7, #32]
          break;
 800a292:	e013      	b.n	800a2bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	689b      	ldr	r3, [r3, #8]
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d105      	bne.n	800a2a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a29c:	2308      	movs	r3, #8
 800a29e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	69fa      	ldr	r2, [r7, #28]
 800a2a4:	611a      	str	r2, [r3, #16]
          break;
 800a2a6:	e009      	b.n	800a2bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a2a8:	2308      	movs	r3, #8
 800a2aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	69fa      	ldr	r2, [r7, #28]
 800a2b0:	615a      	str	r2, [r3, #20]
          break;
 800a2b2:	e003      	b.n	800a2bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	623b      	str	r3, [r7, #32]
          break;
 800a2b8:	e000      	b.n	800a2bc <HAL_GPIO_Init+0x130>
          break;
 800a2ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	2bff      	cmp	r3, #255	@ 0xff
 800a2c0:	d801      	bhi.n	800a2c6 <HAL_GPIO_Init+0x13a>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	e001      	b.n	800a2ca <HAL_GPIO_Init+0x13e>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	3304      	adds	r3, #4
 800a2ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	2bff      	cmp	r3, #255	@ 0xff
 800a2d0:	d802      	bhi.n	800a2d8 <HAL_GPIO_Init+0x14c>
 800a2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2d4:	009b      	lsls	r3, r3, #2
 800a2d6:	e002      	b.n	800a2de <HAL_GPIO_Init+0x152>
 800a2d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2da:	3b08      	subs	r3, #8
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	210f      	movs	r1, #15
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a2ec:	43db      	mvns	r3, r3
 800a2ee:	401a      	ands	r2, r3
 800a2f0:	6a39      	ldr	r1, [r7, #32]
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a2f8:	431a      	orrs	r2, r3
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	685b      	ldr	r3, [r3, #4]
 800a302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a306:	2b00      	cmp	r3, #0
 800a308:	f000 80c1 	beq.w	800a48e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a30c:	4b49      	ldr	r3, [pc, #292]	@ (800a434 <HAL_GPIO_Init+0x2a8>)
 800a30e:	699b      	ldr	r3, [r3, #24]
 800a310:	4a48      	ldr	r2, [pc, #288]	@ (800a434 <HAL_GPIO_Init+0x2a8>)
 800a312:	f043 0301 	orr.w	r3, r3, #1
 800a316:	6193      	str	r3, [r2, #24]
 800a318:	4b46      	ldr	r3, [pc, #280]	@ (800a434 <HAL_GPIO_Init+0x2a8>)
 800a31a:	699b      	ldr	r3, [r3, #24]
 800a31c:	f003 0301 	and.w	r3, r3, #1
 800a320:	60bb      	str	r3, [r7, #8]
 800a322:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800a324:	4a44      	ldr	r2, [pc, #272]	@ (800a438 <HAL_GPIO_Init+0x2ac>)
 800a326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a328:	089b      	lsrs	r3, r3, #2
 800a32a:	3302      	adds	r3, #2
 800a32c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a330:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a334:	f003 0303 	and.w	r3, r3, #3
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	220f      	movs	r2, #15
 800a33c:	fa02 f303 	lsl.w	r3, r2, r3
 800a340:	43db      	mvns	r3, r3
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	4013      	ands	r3, r2
 800a346:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	4a3c      	ldr	r2, [pc, #240]	@ (800a43c <HAL_GPIO_Init+0x2b0>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	d01f      	beq.n	800a390 <HAL_GPIO_Init+0x204>
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	4a3b      	ldr	r2, [pc, #236]	@ (800a440 <HAL_GPIO_Init+0x2b4>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d019      	beq.n	800a38c <HAL_GPIO_Init+0x200>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	4a3a      	ldr	r2, [pc, #232]	@ (800a444 <HAL_GPIO_Init+0x2b8>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d013      	beq.n	800a388 <HAL_GPIO_Init+0x1fc>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	4a39      	ldr	r2, [pc, #228]	@ (800a448 <HAL_GPIO_Init+0x2bc>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d00d      	beq.n	800a384 <HAL_GPIO_Init+0x1f8>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	4a38      	ldr	r2, [pc, #224]	@ (800a44c <HAL_GPIO_Init+0x2c0>)
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d007      	beq.n	800a380 <HAL_GPIO_Init+0x1f4>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a37      	ldr	r2, [pc, #220]	@ (800a450 <HAL_GPIO_Init+0x2c4>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d101      	bne.n	800a37c <HAL_GPIO_Init+0x1f0>
 800a378:	2305      	movs	r3, #5
 800a37a:	e00a      	b.n	800a392 <HAL_GPIO_Init+0x206>
 800a37c:	2306      	movs	r3, #6
 800a37e:	e008      	b.n	800a392 <HAL_GPIO_Init+0x206>
 800a380:	2304      	movs	r3, #4
 800a382:	e006      	b.n	800a392 <HAL_GPIO_Init+0x206>
 800a384:	2303      	movs	r3, #3
 800a386:	e004      	b.n	800a392 <HAL_GPIO_Init+0x206>
 800a388:	2302      	movs	r3, #2
 800a38a:	e002      	b.n	800a392 <HAL_GPIO_Init+0x206>
 800a38c:	2301      	movs	r3, #1
 800a38e:	e000      	b.n	800a392 <HAL_GPIO_Init+0x206>
 800a390:	2300      	movs	r3, #0
 800a392:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a394:	f002 0203 	and.w	r2, r2, #3
 800a398:	0092      	lsls	r2, r2, #2
 800a39a:	4093      	lsls	r3, r2
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a3a2:	4925      	ldr	r1, [pc, #148]	@ (800a438 <HAL_GPIO_Init+0x2ac>)
 800a3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3a6:	089b      	lsrs	r3, r3, #2
 800a3a8:	3302      	adds	r3, #2
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	685b      	ldr	r3, [r3, #4]
 800a3b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d006      	beq.n	800a3ca <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a3bc:	4b25      	ldr	r3, [pc, #148]	@ (800a454 <HAL_GPIO_Init+0x2c8>)
 800a3be:	689a      	ldr	r2, [r3, #8]
 800a3c0:	4924      	ldr	r1, [pc, #144]	@ (800a454 <HAL_GPIO_Init+0x2c8>)
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	608b      	str	r3, [r1, #8]
 800a3c8:	e006      	b.n	800a3d8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a3ca:	4b22      	ldr	r3, [pc, #136]	@ (800a454 <HAL_GPIO_Init+0x2c8>)
 800a3cc:	689a      	ldr	r2, [r3, #8]
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	43db      	mvns	r3, r3
 800a3d2:	4920      	ldr	r1, [pc, #128]	@ (800a454 <HAL_GPIO_Init+0x2c8>)
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	685b      	ldr	r3, [r3, #4]
 800a3dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d006      	beq.n	800a3f2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a3e4:	4b1b      	ldr	r3, [pc, #108]	@ (800a454 <HAL_GPIO_Init+0x2c8>)
 800a3e6:	68da      	ldr	r2, [r3, #12]
 800a3e8:	491a      	ldr	r1, [pc, #104]	@ (800a454 <HAL_GPIO_Init+0x2c8>)
 800a3ea:	69bb      	ldr	r3, [r7, #24]
 800a3ec:	4313      	orrs	r3, r2
 800a3ee:	60cb      	str	r3, [r1, #12]
 800a3f0:	e006      	b.n	800a400 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a3f2:	4b18      	ldr	r3, [pc, #96]	@ (800a454 <HAL_GPIO_Init+0x2c8>)
 800a3f4:	68da      	ldr	r2, [r3, #12]
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	43db      	mvns	r3, r3
 800a3fa:	4916      	ldr	r1, [pc, #88]	@ (800a454 <HAL_GPIO_Init+0x2c8>)
 800a3fc:	4013      	ands	r3, r2
 800a3fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d025      	beq.n	800a458 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a40c:	4b11      	ldr	r3, [pc, #68]	@ (800a454 <HAL_GPIO_Init+0x2c8>)
 800a40e:	685a      	ldr	r2, [r3, #4]
 800a410:	4910      	ldr	r1, [pc, #64]	@ (800a454 <HAL_GPIO_Init+0x2c8>)
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	4313      	orrs	r3, r2
 800a416:	604b      	str	r3, [r1, #4]
 800a418:	e025      	b.n	800a466 <HAL_GPIO_Init+0x2da>
 800a41a:	bf00      	nop
 800a41c:	10320000 	.word	0x10320000
 800a420:	10310000 	.word	0x10310000
 800a424:	10220000 	.word	0x10220000
 800a428:	10210000 	.word	0x10210000
 800a42c:	10120000 	.word	0x10120000
 800a430:	10110000 	.word	0x10110000
 800a434:	40021000 	.word	0x40021000
 800a438:	40010000 	.word	0x40010000
 800a43c:	40010800 	.word	0x40010800
 800a440:	40010c00 	.word	0x40010c00
 800a444:	40011000 	.word	0x40011000
 800a448:	40011400 	.word	0x40011400
 800a44c:	40011800 	.word	0x40011800
 800a450:	40011c00 	.word	0x40011c00
 800a454:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a458:	4b15      	ldr	r3, [pc, #84]	@ (800a4b0 <HAL_GPIO_Init+0x324>)
 800a45a:	685a      	ldr	r2, [r3, #4]
 800a45c:	69bb      	ldr	r3, [r7, #24]
 800a45e:	43db      	mvns	r3, r3
 800a460:	4913      	ldr	r1, [pc, #76]	@ (800a4b0 <HAL_GPIO_Init+0x324>)
 800a462:	4013      	ands	r3, r2
 800a464:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d006      	beq.n	800a480 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a472:	4b0f      	ldr	r3, [pc, #60]	@ (800a4b0 <HAL_GPIO_Init+0x324>)
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	490e      	ldr	r1, [pc, #56]	@ (800a4b0 <HAL_GPIO_Init+0x324>)
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	4313      	orrs	r3, r2
 800a47c:	600b      	str	r3, [r1, #0]
 800a47e:	e006      	b.n	800a48e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a480:	4b0b      	ldr	r3, [pc, #44]	@ (800a4b0 <HAL_GPIO_Init+0x324>)
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	69bb      	ldr	r3, [r7, #24]
 800a486:	43db      	mvns	r3, r3
 800a488:	4909      	ldr	r1, [pc, #36]	@ (800a4b0 <HAL_GPIO_Init+0x324>)
 800a48a:	4013      	ands	r3, r2
 800a48c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a48e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a490:	3301      	adds	r3, #1
 800a492:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a49a:	fa22 f303 	lsr.w	r3, r2, r3
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	f47f ae7e 	bne.w	800a1a0 <HAL_GPIO_Init+0x14>
  }
}
 800a4a4:	bf00      	nop
 800a4a6:	bf00      	nop
 800a4a8:	372c      	adds	r7, #44	@ 0x2c
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bc80      	pop	{r7}
 800a4ae:	4770      	bx	lr
 800a4b0:	40010400 	.word	0x40010400

0800a4b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b089      	sub	sp, #36	@ 0x24
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800a4c2:	e0a6      	b.n	800a612 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4cc:	683a      	ldr	r2, [r7, #0]
 800a4ce:	4013      	ands	r3, r2
 800a4d0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	f000 8099 	beq.w	800a60c <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800a4da:	4a54      	ldr	r2, [pc, #336]	@ (800a62c <HAL_GPIO_DeInit+0x178>)
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	089b      	lsrs	r3, r3, #2
 800a4e0:	3302      	adds	r3, #2
 800a4e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4e6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	f003 0303 	and.w	r3, r3, #3
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	220f      	movs	r2, #15
 800a4f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a4f6:	697a      	ldr	r2, [r7, #20]
 800a4f8:	4013      	ands	r3, r2
 800a4fa:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	4a4c      	ldr	r2, [pc, #304]	@ (800a630 <HAL_GPIO_DeInit+0x17c>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d01f      	beq.n	800a544 <HAL_GPIO_DeInit+0x90>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	4a4b      	ldr	r2, [pc, #300]	@ (800a634 <HAL_GPIO_DeInit+0x180>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d019      	beq.n	800a540 <HAL_GPIO_DeInit+0x8c>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	4a4a      	ldr	r2, [pc, #296]	@ (800a638 <HAL_GPIO_DeInit+0x184>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d013      	beq.n	800a53c <HAL_GPIO_DeInit+0x88>
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	4a49      	ldr	r2, [pc, #292]	@ (800a63c <HAL_GPIO_DeInit+0x188>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d00d      	beq.n	800a538 <HAL_GPIO_DeInit+0x84>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a48      	ldr	r2, [pc, #288]	@ (800a640 <HAL_GPIO_DeInit+0x18c>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d007      	beq.n	800a534 <HAL_GPIO_DeInit+0x80>
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4a47      	ldr	r2, [pc, #284]	@ (800a644 <HAL_GPIO_DeInit+0x190>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d101      	bne.n	800a530 <HAL_GPIO_DeInit+0x7c>
 800a52c:	2305      	movs	r3, #5
 800a52e:	e00a      	b.n	800a546 <HAL_GPIO_DeInit+0x92>
 800a530:	2306      	movs	r3, #6
 800a532:	e008      	b.n	800a546 <HAL_GPIO_DeInit+0x92>
 800a534:	2304      	movs	r3, #4
 800a536:	e006      	b.n	800a546 <HAL_GPIO_DeInit+0x92>
 800a538:	2303      	movs	r3, #3
 800a53a:	e004      	b.n	800a546 <HAL_GPIO_DeInit+0x92>
 800a53c:	2302      	movs	r3, #2
 800a53e:	e002      	b.n	800a546 <HAL_GPIO_DeInit+0x92>
 800a540:	2301      	movs	r3, #1
 800a542:	e000      	b.n	800a546 <HAL_GPIO_DeInit+0x92>
 800a544:	2300      	movs	r3, #0
 800a546:	69fa      	ldr	r2, [r7, #28]
 800a548:	f002 0203 	and.w	r2, r2, #3
 800a54c:	0092      	lsls	r2, r2, #2
 800a54e:	4093      	lsls	r3, r2
 800a550:	697a      	ldr	r2, [r7, #20]
 800a552:	429a      	cmp	r2, r3
 800a554:	d132      	bne.n	800a5bc <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800a556:	4b3c      	ldr	r3, [pc, #240]	@ (800a648 <HAL_GPIO_DeInit+0x194>)
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	43db      	mvns	r3, r3
 800a55e:	493a      	ldr	r1, [pc, #232]	@ (800a648 <HAL_GPIO_DeInit+0x194>)
 800a560:	4013      	ands	r3, r2
 800a562:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800a564:	4b38      	ldr	r3, [pc, #224]	@ (800a648 <HAL_GPIO_DeInit+0x194>)
 800a566:	685a      	ldr	r2, [r3, #4]
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	43db      	mvns	r3, r3
 800a56c:	4936      	ldr	r1, [pc, #216]	@ (800a648 <HAL_GPIO_DeInit+0x194>)
 800a56e:	4013      	ands	r3, r2
 800a570:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800a572:	4b35      	ldr	r3, [pc, #212]	@ (800a648 <HAL_GPIO_DeInit+0x194>)
 800a574:	68da      	ldr	r2, [r3, #12]
 800a576:	69bb      	ldr	r3, [r7, #24]
 800a578:	43db      	mvns	r3, r3
 800a57a:	4933      	ldr	r1, [pc, #204]	@ (800a648 <HAL_GPIO_DeInit+0x194>)
 800a57c:	4013      	ands	r3, r2
 800a57e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800a580:	4b31      	ldr	r3, [pc, #196]	@ (800a648 <HAL_GPIO_DeInit+0x194>)
 800a582:	689a      	ldr	r2, [r3, #8]
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	43db      	mvns	r3, r3
 800a588:	492f      	ldr	r1, [pc, #188]	@ (800a648 <HAL_GPIO_DeInit+0x194>)
 800a58a:	4013      	ands	r3, r2
 800a58c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a58e:	69fb      	ldr	r3, [r7, #28]
 800a590:	f003 0303 	and.w	r3, r3, #3
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	220f      	movs	r2, #15
 800a598:	fa02 f303 	lsl.w	r3, r2, r3
 800a59c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800a59e:	4a23      	ldr	r2, [pc, #140]	@ (800a62c <HAL_GPIO_DeInit+0x178>)
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	089b      	lsrs	r3, r3, #2
 800a5a4:	3302      	adds	r3, #2
 800a5a6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	43da      	mvns	r2, r3
 800a5ae:	481f      	ldr	r0, [pc, #124]	@ (800a62c <HAL_GPIO_DeInit+0x178>)
 800a5b0:	69fb      	ldr	r3, [r7, #28]
 800a5b2:	089b      	lsrs	r3, r3, #2
 800a5b4:	400a      	ands	r2, r1
 800a5b6:	3302      	adds	r3, #2
 800a5b8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a5bc:	69bb      	ldr	r3, [r7, #24]
 800a5be:	2bff      	cmp	r3, #255	@ 0xff
 800a5c0:	d801      	bhi.n	800a5c6 <HAL_GPIO_DeInit+0x112>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	e001      	b.n	800a5ca <HAL_GPIO_DeInit+0x116>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	3304      	adds	r3, #4
 800a5ca:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	2bff      	cmp	r3, #255	@ 0xff
 800a5d0:	d802      	bhi.n	800a5d8 <HAL_GPIO_DeInit+0x124>
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	e002      	b.n	800a5de <HAL_GPIO_DeInit+0x12a>
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	3b08      	subs	r3, #8
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	210f      	movs	r1, #15
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	fa01 f303 	lsl.w	r3, r1, r3
 800a5ec:	43db      	mvns	r3, r3
 800a5ee:	401a      	ands	r2, r3
 800a5f0:	2104      	movs	r1, #4
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a5f8:	431a      	orrs	r2, r3
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	68da      	ldr	r2, [r3, #12]
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	43db      	mvns	r3, r3
 800a606:	401a      	ands	r2, r3
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	3301      	adds	r3, #1
 800a610:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	69fb      	ldr	r3, [r7, #28]
 800a616:	fa22 f303 	lsr.w	r3, r2, r3
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f47f af52 	bne.w	800a4c4 <HAL_GPIO_DeInit+0x10>
  }
}
 800a620:	bf00      	nop
 800a622:	bf00      	nop
 800a624:	3724      	adds	r7, #36	@ 0x24
 800a626:	46bd      	mov	sp, r7
 800a628:	bc80      	pop	{r7}
 800a62a:	4770      	bx	lr
 800a62c:	40010000 	.word	0x40010000
 800a630:	40010800 	.word	0x40010800
 800a634:	40010c00 	.word	0x40010c00
 800a638:	40011000 	.word	0x40011000
 800a63c:	40011400 	.word	0x40011400
 800a640:	40011800 	.word	0x40011800
 800a644:	40011c00 	.word	0x40011c00
 800a648:	40010400 	.word	0x40010400

0800a64c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b085      	sub	sp, #20
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	460b      	mov	r3, r1
 800a656:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	689a      	ldr	r2, [r3, #8]
 800a65c:	887b      	ldrh	r3, [r7, #2]
 800a65e:	4013      	ands	r3, r2
 800a660:	2b00      	cmp	r3, #0
 800a662:	d002      	beq.n	800a66a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a664:	2301      	movs	r3, #1
 800a666:	73fb      	strb	r3, [r7, #15]
 800a668:	e001      	b.n	800a66e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a66a:	2300      	movs	r3, #0
 800a66c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a66e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a670:	4618      	mov	r0, r3
 800a672:	3714      	adds	r7, #20
 800a674:	46bd      	mov	sp, r7
 800a676:	bc80      	pop	{r7}
 800a678:	4770      	bx	lr

0800a67a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a67a:	b480      	push	{r7}
 800a67c:	b083      	sub	sp, #12
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]
 800a682:	460b      	mov	r3, r1
 800a684:	807b      	strh	r3, [r7, #2]
 800a686:	4613      	mov	r3, r2
 800a688:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a68a:	787b      	ldrb	r3, [r7, #1]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d003      	beq.n	800a698 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a690:	887a      	ldrh	r2, [r7, #2]
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a696:	e003      	b.n	800a6a0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a698:	887b      	ldrh	r3, [r7, #2]
 800a69a:	041a      	lsls	r2, r3, #16
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	611a      	str	r2, [r3, #16]
}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bc80      	pop	{r7}
 800a6a8:	4770      	bx	lr

0800a6aa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	b085      	sub	sp, #20
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
 800a6b2:	460b      	mov	r3, r1
 800a6b4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a6bc:	887a      	ldrh	r2, [r7, #2]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	4013      	ands	r3, r2
 800a6c2:	041a      	lsls	r2, r3, #16
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	43d9      	mvns	r1, r3
 800a6c8:	887b      	ldrh	r3, [r7, #2]
 800a6ca:	400b      	ands	r3, r1
 800a6cc:	431a      	orrs	r2, r3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	611a      	str	r2, [r3, #16]
}
 800a6d2:	bf00      	nop
 800a6d4:	3714      	adds	r7, #20
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bc80      	pop	{r7}
 800a6da:	4770      	bx	lr

0800a6dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d101      	bne.n	800a6ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	e12b      	b.n	800a946 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d106      	bne.n	800a708 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f7fe fff4 	bl	80096f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2224      	movs	r2, #36	@ 0x24
 800a70c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f022 0201 	bic.w	r2, r2, #1
 800a71e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	681a      	ldr	r2, [r3, #0]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a72e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a73e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a740:	f001 fdb8 	bl	800c2b4 <HAL_RCC_GetPCLK1Freq>
 800a744:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	4a81      	ldr	r2, [pc, #516]	@ (800a950 <HAL_I2C_Init+0x274>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d807      	bhi.n	800a760 <HAL_I2C_Init+0x84>
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	4a80      	ldr	r2, [pc, #512]	@ (800a954 <HAL_I2C_Init+0x278>)
 800a754:	4293      	cmp	r3, r2
 800a756:	bf94      	ite	ls
 800a758:	2301      	movls	r3, #1
 800a75a:	2300      	movhi	r3, #0
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	e006      	b.n	800a76e <HAL_I2C_Init+0x92>
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	4a7d      	ldr	r2, [pc, #500]	@ (800a958 <HAL_I2C_Init+0x27c>)
 800a764:	4293      	cmp	r3, r2
 800a766:	bf94      	ite	ls
 800a768:	2301      	movls	r3, #1
 800a76a:	2300      	movhi	r3, #0
 800a76c:	b2db      	uxtb	r3, r3
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d001      	beq.n	800a776 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a772:	2301      	movs	r3, #1
 800a774:	e0e7      	b.n	800a946 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	4a78      	ldr	r2, [pc, #480]	@ (800a95c <HAL_I2C_Init+0x280>)
 800a77a:	fba2 2303 	umull	r2, r3, r2, r3
 800a77e:	0c9b      	lsrs	r3, r3, #18
 800a780:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68ba      	ldr	r2, [r7, #8]
 800a792:	430a      	orrs	r2, r1
 800a794:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	6a1b      	ldr	r3, [r3, #32]
 800a79c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	4a6a      	ldr	r2, [pc, #424]	@ (800a950 <HAL_I2C_Init+0x274>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d802      	bhi.n	800a7b0 <HAL_I2C_Init+0xd4>
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	e009      	b.n	800a7c4 <HAL_I2C_Init+0xe8>
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a7b6:	fb02 f303 	mul.w	r3, r2, r3
 800a7ba:	4a69      	ldr	r2, [pc, #420]	@ (800a960 <HAL_I2C_Init+0x284>)
 800a7bc:	fba2 2303 	umull	r2, r3, r2, r3
 800a7c0:	099b      	lsrs	r3, r3, #6
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	687a      	ldr	r2, [r7, #4]
 800a7c6:	6812      	ldr	r2, [r2, #0]
 800a7c8:	430b      	orrs	r3, r1
 800a7ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	69db      	ldr	r3, [r3, #28]
 800a7d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a7d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	495c      	ldr	r1, [pc, #368]	@ (800a950 <HAL_I2C_Init+0x274>)
 800a7e0:	428b      	cmp	r3, r1
 800a7e2:	d819      	bhi.n	800a818 <HAL_I2C_Init+0x13c>
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	1e59      	subs	r1, r3, #1
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	685b      	ldr	r3, [r3, #4]
 800a7ec:	005b      	lsls	r3, r3, #1
 800a7ee:	fbb1 f3f3 	udiv	r3, r1, r3
 800a7f2:	1c59      	adds	r1, r3, #1
 800a7f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a7f8:	400b      	ands	r3, r1
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00a      	beq.n	800a814 <HAL_I2C_Init+0x138>
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	1e59      	subs	r1, r3, #1
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	005b      	lsls	r3, r3, #1
 800a808:	fbb1 f3f3 	udiv	r3, r1, r3
 800a80c:	3301      	adds	r3, #1
 800a80e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a812:	e051      	b.n	800a8b8 <HAL_I2C_Init+0x1dc>
 800a814:	2304      	movs	r3, #4
 800a816:	e04f      	b.n	800a8b8 <HAL_I2C_Init+0x1dc>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	689b      	ldr	r3, [r3, #8]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d111      	bne.n	800a844 <HAL_I2C_Init+0x168>
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	1e58      	subs	r0, r3, #1
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6859      	ldr	r1, [r3, #4]
 800a828:	460b      	mov	r3, r1
 800a82a:	005b      	lsls	r3, r3, #1
 800a82c:	440b      	add	r3, r1
 800a82e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a832:	3301      	adds	r3, #1
 800a834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a838:	2b00      	cmp	r3, #0
 800a83a:	bf0c      	ite	eq
 800a83c:	2301      	moveq	r3, #1
 800a83e:	2300      	movne	r3, #0
 800a840:	b2db      	uxtb	r3, r3
 800a842:	e012      	b.n	800a86a <HAL_I2C_Init+0x18e>
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	1e58      	subs	r0, r3, #1
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6859      	ldr	r1, [r3, #4]
 800a84c:	460b      	mov	r3, r1
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	440b      	add	r3, r1
 800a852:	0099      	lsls	r1, r3, #2
 800a854:	440b      	add	r3, r1
 800a856:	fbb0 f3f3 	udiv	r3, r0, r3
 800a85a:	3301      	adds	r3, #1
 800a85c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a860:	2b00      	cmp	r3, #0
 800a862:	bf0c      	ite	eq
 800a864:	2301      	moveq	r3, #1
 800a866:	2300      	movne	r3, #0
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d001      	beq.n	800a872 <HAL_I2C_Init+0x196>
 800a86e:	2301      	movs	r3, #1
 800a870:	e022      	b.n	800a8b8 <HAL_I2C_Init+0x1dc>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d10e      	bne.n	800a898 <HAL_I2C_Init+0x1bc>
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	1e58      	subs	r0, r3, #1
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6859      	ldr	r1, [r3, #4]
 800a882:	460b      	mov	r3, r1
 800a884:	005b      	lsls	r3, r3, #1
 800a886:	440b      	add	r3, r1
 800a888:	fbb0 f3f3 	udiv	r3, r0, r3
 800a88c:	3301      	adds	r3, #1
 800a88e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a896:	e00f      	b.n	800a8b8 <HAL_I2C_Init+0x1dc>
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	1e58      	subs	r0, r3, #1
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6859      	ldr	r1, [r3, #4]
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	440b      	add	r3, r1
 800a8a6:	0099      	lsls	r1, r3, #2
 800a8a8:	440b      	add	r3, r1
 800a8aa:	fbb0 f3f3 	udiv	r3, r0, r3
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a8b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a8b8:	6879      	ldr	r1, [r7, #4]
 800a8ba:	6809      	ldr	r1, [r1, #0]
 800a8bc:	4313      	orrs	r3, r2
 800a8be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	69da      	ldr	r2, [r3, #28]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6a1b      	ldr	r3, [r3, #32]
 800a8d2:	431a      	orrs	r2, r3
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	430a      	orrs	r2, r1
 800a8da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	689b      	ldr	r3, [r3, #8]
 800a8e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a8e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a8ea:	687a      	ldr	r2, [r7, #4]
 800a8ec:	6911      	ldr	r1, [r2, #16]
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	68d2      	ldr	r2, [r2, #12]
 800a8f2:	4311      	orrs	r1, r2
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	6812      	ldr	r2, [r2, #0]
 800a8f8:	430b      	orrs	r3, r1
 800a8fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	695a      	ldr	r2, [r3, #20]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	699b      	ldr	r3, [r3, #24]
 800a90e:	431a      	orrs	r2, r3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	430a      	orrs	r2, r1
 800a916:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f042 0201 	orr.w	r2, r2, #1
 800a926:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2220      	movs	r2, #32
 800a932:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	2200      	movs	r2, #0
 800a940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a944:	2300      	movs	r3, #0
}
 800a946:	4618      	mov	r0, r3
 800a948:	3710      	adds	r7, #16
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd80      	pop	{r7, pc}
 800a94e:	bf00      	nop
 800a950:	000186a0 	.word	0x000186a0
 800a954:	001e847f 	.word	0x001e847f
 800a958:	003d08ff 	.word	0x003d08ff
 800a95c:	431bde83 	.word	0x431bde83
 800a960:	10624dd3 	.word	0x10624dd3

0800a964 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b082      	sub	sp, #8
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d101      	bne.n	800a976 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a972:	2301      	movs	r3, #1
 800a974:	e021      	b.n	800a9ba <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2224      	movs	r2, #36	@ 0x24
 800a97a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f022 0201 	bic.w	r2, r2, #1
 800a98c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f7fe feec 	bl	800976c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2200      	movs	r2, #0
 800a998:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a9b8:	2300      	movs	r3, #0
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3708      	adds	r7, #8
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
	...

0800a9c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b088      	sub	sp, #32
 800a9c8:	af02      	add	r7, sp, #8
 800a9ca:	60f8      	str	r0, [r7, #12]
 800a9cc:	607a      	str	r2, [r7, #4]
 800a9ce:	461a      	mov	r2, r3
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	817b      	strh	r3, [r7, #10]
 800a9d4:	4613      	mov	r3, r2
 800a9d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a9d8:	f7ff f85e 	bl	8009a98 <HAL_GetTick>
 800a9dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	2b20      	cmp	r3, #32
 800a9e8:	f040 80e0 	bne.w	800abac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	9300      	str	r3, [sp, #0]
 800a9f0:	2319      	movs	r3, #25
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	4970      	ldr	r1, [pc, #448]	@ (800abb8 <HAL_I2C_Master_Transmit+0x1f4>)
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f000 fe5c 	bl	800b6b4 <I2C_WaitOnFlagUntilTimeout>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d001      	beq.n	800aa06 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800aa02:	2302      	movs	r3, #2
 800aa04:	e0d3      	b.n	800abae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d101      	bne.n	800aa14 <HAL_I2C_Master_Transmit+0x50>
 800aa10:	2302      	movs	r3, #2
 800aa12:	e0cc      	b.n	800abae <HAL_I2C_Master_Transmit+0x1ea>
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f003 0301 	and.w	r3, r3, #1
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d007      	beq.n	800aa3a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f042 0201 	orr.w	r2, r2, #1
 800aa38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	681a      	ldr	r2, [r3, #0]
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800aa48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2221      	movs	r2, #33	@ 0x21
 800aa4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	2210      	movs	r2, #16
 800aa56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	893a      	ldrh	r2, [r7, #8]
 800aa6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa70:	b29a      	uxth	r2, r3
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	4a50      	ldr	r2, [pc, #320]	@ (800abbc <HAL_I2C_Master_Transmit+0x1f8>)
 800aa7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800aa7c:	8979      	ldrh	r1, [r7, #10]
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	6a3a      	ldr	r2, [r7, #32]
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f000 fc16 	bl	800b2b4 <I2C_MasterRequestWrite>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d001      	beq.n	800aa92 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	e08d      	b.n	800abae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa92:	2300      	movs	r3, #0
 800aa94:	613b      	str	r3, [r7, #16]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	695b      	ldr	r3, [r3, #20]
 800aa9c:	613b      	str	r3, [r7, #16]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	699b      	ldr	r3, [r3, #24]
 800aaa4:	613b      	str	r3, [r7, #16]
 800aaa6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800aaa8:	e066      	b.n	800ab78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aaaa:	697a      	ldr	r2, [r7, #20]
 800aaac:	6a39      	ldr	r1, [r7, #32]
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f000 ff1a 	bl	800b8e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00d      	beq.n	800aad6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aabe:	2b04      	cmp	r3, #4
 800aac0:	d107      	bne.n	800aad2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	681a      	ldr	r2, [r3, #0]
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aad0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800aad2:	2301      	movs	r3, #1
 800aad4:	e06b      	b.n	800abae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aada:	781a      	ldrb	r2, [r3, #0]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aae6:	1c5a      	adds	r2, r3, #1
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	3b01      	subs	r3, #1
 800aaf4:	b29a      	uxth	r2, r3
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aafe:	3b01      	subs	r3, #1
 800ab00:	b29a      	uxth	r2, r3
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	695b      	ldr	r3, [r3, #20]
 800ab0c:	f003 0304 	and.w	r3, r3, #4
 800ab10:	2b04      	cmp	r3, #4
 800ab12:	d11b      	bne.n	800ab4c <HAL_I2C_Master_Transmit+0x188>
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d017      	beq.n	800ab4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab20:	781a      	ldrb	r2, [r3, #0]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab2c:	1c5a      	adds	r2, r3, #1
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	3b01      	subs	r3, #1
 800ab3a:	b29a      	uxth	r2, r3
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab44:	3b01      	subs	r3, #1
 800ab46:	b29a      	uxth	r2, r3
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab4c:	697a      	ldr	r2, [r7, #20]
 800ab4e:	6a39      	ldr	r1, [r7, #32]
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f000 ff11 	bl	800b978 <I2C_WaitOnBTFFlagUntilTimeout>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00d      	beq.n	800ab78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab60:	2b04      	cmp	r3, #4
 800ab62:	d107      	bne.n	800ab74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ab72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ab74:	2301      	movs	r3, #1
 800ab76:	e01a      	b.n	800abae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d194      	bne.n	800aaaa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ab8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2220      	movs	r2, #32
 800ab94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2200      	movs	r2, #0
 800aba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800aba8:	2300      	movs	r3, #0
 800abaa:	e000      	b.n	800abae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800abac:	2302      	movs	r3, #2
  }
}
 800abae:	4618      	mov	r0, r3
 800abb0:	3718      	adds	r7, #24
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	00100002 	.word	0x00100002
 800abbc:	ffff0000 	.word	0xffff0000

0800abc0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b088      	sub	sp, #32
 800abc4:	af02      	add	r7, sp, #8
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	4608      	mov	r0, r1
 800abca:	4611      	mov	r1, r2
 800abcc:	461a      	mov	r2, r3
 800abce:	4603      	mov	r3, r0
 800abd0:	817b      	strh	r3, [r7, #10]
 800abd2:	460b      	mov	r3, r1
 800abd4:	813b      	strh	r3, [r7, #8]
 800abd6:	4613      	mov	r3, r2
 800abd8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800abda:	f7fe ff5d 	bl	8009a98 <HAL_GetTick>
 800abde:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800abe6:	b2db      	uxtb	r3, r3
 800abe8:	2b20      	cmp	r3, #32
 800abea:	f040 80d9 	bne.w	800ada0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	9300      	str	r3, [sp, #0]
 800abf2:	2319      	movs	r3, #25
 800abf4:	2201      	movs	r2, #1
 800abf6:	496d      	ldr	r1, [pc, #436]	@ (800adac <HAL_I2C_Mem_Write+0x1ec>)
 800abf8:	68f8      	ldr	r0, [r7, #12]
 800abfa:	f000 fd5b 	bl	800b6b4 <I2C_WaitOnFlagUntilTimeout>
 800abfe:	4603      	mov	r3, r0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d001      	beq.n	800ac08 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800ac04:	2302      	movs	r3, #2
 800ac06:	e0cc      	b.n	800ada2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac0e:	2b01      	cmp	r3, #1
 800ac10:	d101      	bne.n	800ac16 <HAL_I2C_Mem_Write+0x56>
 800ac12:	2302      	movs	r3, #2
 800ac14:	e0c5      	b.n	800ada2 <HAL_I2C_Mem_Write+0x1e2>
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	2201      	movs	r2, #1
 800ac1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	f003 0301 	and.w	r3, r3, #1
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d007      	beq.n	800ac3c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f042 0201 	orr.w	r2, r2, #1
 800ac3a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	681a      	ldr	r2, [r3, #0]
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ac4a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2221      	movs	r2, #33	@ 0x21
 800ac50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2240      	movs	r2, #64	@ 0x40
 800ac58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	6a3a      	ldr	r2, [r7, #32]
 800ac66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ac6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac72:	b29a      	uxth	r2, r3
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	4a4d      	ldr	r2, [pc, #308]	@ (800adb0 <HAL_I2C_Mem_Write+0x1f0>)
 800ac7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ac7e:	88f8      	ldrh	r0, [r7, #6]
 800ac80:	893a      	ldrh	r2, [r7, #8]
 800ac82:	8979      	ldrh	r1, [r7, #10]
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	9301      	str	r3, [sp, #4]
 800ac88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac8a:	9300      	str	r3, [sp, #0]
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	68f8      	ldr	r0, [r7, #12]
 800ac90:	f000 fb92 	bl	800b3b8 <I2C_RequestMemoryWrite>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d052      	beq.n	800ad40 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	e081      	b.n	800ada2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac9e:	697a      	ldr	r2, [r7, #20]
 800aca0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aca2:	68f8      	ldr	r0, [r7, #12]
 800aca4:	f000 fe20 	bl	800b8e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800aca8:	4603      	mov	r3, r0
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d00d      	beq.n	800acca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acb2:	2b04      	cmp	r3, #4
 800acb4:	d107      	bne.n	800acc6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800acc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	e06b      	b.n	800ada2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acce:	781a      	ldrb	r2, [r3, #0]
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acda:	1c5a      	adds	r2, r3, #1
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ace4:	3b01      	subs	r3, #1
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	3b01      	subs	r3, #1
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	695b      	ldr	r3, [r3, #20]
 800ad00:	f003 0304 	and.w	r3, r3, #4
 800ad04:	2b04      	cmp	r3, #4
 800ad06:	d11b      	bne.n	800ad40 <HAL_I2C_Mem_Write+0x180>
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d017      	beq.n	800ad40 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad14:	781a      	ldrb	r2, [r3, #0]
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad20:	1c5a      	adds	r2, r3, #1
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	b29a      	uxth	r2, r3
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	b29a      	uxth	r2, r3
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d1aa      	bne.n	800ac9e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad48:	697a      	ldr	r2, [r7, #20]
 800ad4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	f000 fe13 	bl	800b978 <I2C_WaitOnBTFFlagUntilTimeout>
 800ad52:	4603      	mov	r3, r0
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00d      	beq.n	800ad74 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad5c:	2b04      	cmp	r3, #4
 800ad5e:	d107      	bne.n	800ad70 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad6e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ad70:	2301      	movs	r3, #1
 800ad72:	e016      	b.n	800ada2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2220      	movs	r2, #32
 800ad88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	2200      	movs	r2, #0
 800ad90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	2200      	movs	r2, #0
 800ad98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	e000      	b.n	800ada2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800ada0:	2302      	movs	r3, #2
  }
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3718      	adds	r7, #24
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	00100002 	.word	0x00100002
 800adb0:	ffff0000 	.word	0xffff0000

0800adb4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b08c      	sub	sp, #48	@ 0x30
 800adb8:	af02      	add	r7, sp, #8
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	4608      	mov	r0, r1
 800adbe:	4611      	mov	r1, r2
 800adc0:	461a      	mov	r2, r3
 800adc2:	4603      	mov	r3, r0
 800adc4:	817b      	strh	r3, [r7, #10]
 800adc6:	460b      	mov	r3, r1
 800adc8:	813b      	strh	r3, [r7, #8]
 800adca:	4613      	mov	r3, r2
 800adcc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800adce:	2300      	movs	r3, #0
 800add0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800add2:	f7fe fe61 	bl	8009a98 <HAL_GetTick>
 800add6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	2b20      	cmp	r3, #32
 800ade2:	f040 8244 	bne.w	800b26e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ade6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade8:	9300      	str	r3, [sp, #0]
 800adea:	2319      	movs	r3, #25
 800adec:	2201      	movs	r2, #1
 800adee:	4982      	ldr	r1, [pc, #520]	@ (800aff8 <HAL_I2C_Mem_Read+0x244>)
 800adf0:	68f8      	ldr	r0, [r7, #12]
 800adf2:	f000 fc5f 	bl	800b6b4 <I2C_WaitOnFlagUntilTimeout>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d001      	beq.n	800ae00 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800adfc:	2302      	movs	r3, #2
 800adfe:	e237      	b.n	800b270 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d101      	bne.n	800ae0e <HAL_I2C_Mem_Read+0x5a>
 800ae0a:	2302      	movs	r3, #2
 800ae0c:	e230      	b.n	800b270 <HAL_I2C_Mem_Read+0x4bc>
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2201      	movs	r2, #1
 800ae12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	f003 0301 	and.w	r3, r3, #1
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d007      	beq.n	800ae34 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	681a      	ldr	r2, [r3, #0]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	f042 0201 	orr.w	r2, r2, #1
 800ae32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	681a      	ldr	r2, [r3, #0]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ae42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2222      	movs	r2, #34	@ 0x22
 800ae48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2240      	movs	r2, #64	@ 0x40
 800ae50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae5e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800ae64:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae6a:	b29a      	uxth	r2, r3
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	4a62      	ldr	r2, [pc, #392]	@ (800affc <HAL_I2C_Mem_Read+0x248>)
 800ae74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ae76:	88f8      	ldrh	r0, [r7, #6]
 800ae78:	893a      	ldrh	r2, [r7, #8]
 800ae7a:	8979      	ldrh	r1, [r7, #10]
 800ae7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae7e:	9301      	str	r3, [sp, #4]
 800ae80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae82:	9300      	str	r3, [sp, #0]
 800ae84:	4603      	mov	r3, r0
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f000 fb2c 	bl	800b4e4 <I2C_RequestMemoryRead>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d001      	beq.n	800ae96 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800ae92:	2301      	movs	r3, #1
 800ae94:	e1ec      	b.n	800b270 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d113      	bne.n	800aec6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae9e:	2300      	movs	r3, #0
 800aea0:	61fb      	str	r3, [r7, #28]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	695b      	ldr	r3, [r3, #20]
 800aea8:	61fb      	str	r3, [r7, #28]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	699b      	ldr	r3, [r3, #24]
 800aeb0:	61fb      	str	r3, [r7, #28]
 800aeb2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aec2:	601a      	str	r2, [r3, #0]
 800aec4:	e1c0      	b.n	800b248 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d11e      	bne.n	800af0c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aedc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800aede:	b672      	cpsid	i
}
 800aee0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aee2:	2300      	movs	r3, #0
 800aee4:	61bb      	str	r3, [r7, #24]
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	695b      	ldr	r3, [r3, #20]
 800aeec:	61bb      	str	r3, [r7, #24]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	699b      	ldr	r3, [r3, #24]
 800aef4:	61bb      	str	r3, [r7, #24]
 800aef6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800af06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800af08:	b662      	cpsie	i
}
 800af0a:	e035      	b.n	800af78 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af10:	2b02      	cmp	r3, #2
 800af12:	d11e      	bne.n	800af52 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af22:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800af24:	b672      	cpsid	i
}
 800af26:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af28:	2300      	movs	r3, #0
 800af2a:	617b      	str	r3, [r7, #20]
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	695b      	ldr	r3, [r3, #20]
 800af32:	617b      	str	r3, [r7, #20]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	699b      	ldr	r3, [r3, #24]
 800af3a:	617b      	str	r3, [r7, #20]
 800af3c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800af4c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800af4e:	b662      	cpsie	i
}
 800af50:	e012      	b.n	800af78 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	681a      	ldr	r2, [r3, #0]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800af60:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af62:	2300      	movs	r3, #0
 800af64:	613b      	str	r3, [r7, #16]
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	695b      	ldr	r3, [r3, #20]
 800af6c:	613b      	str	r3, [r7, #16]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	699b      	ldr	r3, [r3, #24]
 800af74:	613b      	str	r3, [r7, #16]
 800af76:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800af78:	e166      	b.n	800b248 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af7e:	2b03      	cmp	r3, #3
 800af80:	f200 811f 	bhi.w	800b1c2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d123      	bne.n	800afd4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af8e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800af90:	68f8      	ldr	r0, [r7, #12]
 800af92:	f000 fd39 	bl	800ba08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d001      	beq.n	800afa0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800af9c:	2301      	movs	r3, #1
 800af9e:	e167      	b.n	800b270 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	691a      	ldr	r2, [r3, #16]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afaa:	b2d2      	uxtb	r2, r2
 800afac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afb2:	1c5a      	adds	r2, r3, #1
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afbc:	3b01      	subs	r3, #1
 800afbe:	b29a      	uxth	r2, r3
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afc8:	b29b      	uxth	r3, r3
 800afca:	3b01      	subs	r3, #1
 800afcc:	b29a      	uxth	r2, r3
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800afd2:	e139      	b.n	800b248 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afd8:	2b02      	cmp	r3, #2
 800afda:	d152      	bne.n	800b082 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800afdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afde:	9300      	str	r3, [sp, #0]
 800afe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afe2:	2200      	movs	r2, #0
 800afe4:	4906      	ldr	r1, [pc, #24]	@ (800b000 <HAL_I2C_Mem_Read+0x24c>)
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	f000 fb64 	bl	800b6b4 <I2C_WaitOnFlagUntilTimeout>
 800afec:	4603      	mov	r3, r0
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d008      	beq.n	800b004 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800aff2:	2301      	movs	r3, #1
 800aff4:	e13c      	b.n	800b270 <HAL_I2C_Mem_Read+0x4bc>
 800aff6:	bf00      	nop
 800aff8:	00100002 	.word	0x00100002
 800affc:	ffff0000 	.word	0xffff0000
 800b000:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800b004:	b672      	cpsid	i
}
 800b006:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b016:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	691a      	ldr	r2, [r3, #16]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b022:	b2d2      	uxtb	r2, r2
 800b024:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b02a:	1c5a      	adds	r2, r3, #1
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b034:	3b01      	subs	r3, #1
 800b036:	b29a      	uxth	r2, r3
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b040:	b29b      	uxth	r3, r3
 800b042:	3b01      	subs	r3, #1
 800b044:	b29a      	uxth	r2, r3
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b04a:	b662      	cpsie	i
}
 800b04c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	691a      	ldr	r2, [r3, #16]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b058:	b2d2      	uxtb	r2, r2
 800b05a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b060:	1c5a      	adds	r2, r3, #1
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b06a:	3b01      	subs	r3, #1
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b076:	b29b      	uxth	r3, r3
 800b078:	3b01      	subs	r3, #1
 800b07a:	b29a      	uxth	r2, r3
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b080:	e0e2      	b.n	800b248 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b088:	2200      	movs	r2, #0
 800b08a:	497b      	ldr	r1, [pc, #492]	@ (800b278 <HAL_I2C_Mem_Read+0x4c4>)
 800b08c:	68f8      	ldr	r0, [r7, #12]
 800b08e:	f000 fb11 	bl	800b6b4 <I2C_WaitOnFlagUntilTimeout>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d001      	beq.n	800b09c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800b098:	2301      	movs	r3, #1
 800b09a:	e0e9      	b.n	800b270 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b0aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b0ac:	b672      	cpsid	i
}
 800b0ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	691a      	ldr	r2, [r3, #16]
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ba:	b2d2      	uxtb	r2, r2
 800b0bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0c2:	1c5a      	adds	r2, r3, #1
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	b29a      	uxth	r2, r3
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	3b01      	subs	r3, #1
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b0e2:	4b66      	ldr	r3, [pc, #408]	@ (800b27c <HAL_I2C_Mem_Read+0x4c8>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	08db      	lsrs	r3, r3, #3
 800b0e8:	4a65      	ldr	r2, [pc, #404]	@ (800b280 <HAL_I2C_Mem_Read+0x4cc>)
 800b0ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b0ee:	0a1a      	lsrs	r2, r3, #8
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	4413      	add	r3, r2
 800b0f6:	00da      	lsls	r2, r3, #3
 800b0f8:	1ad3      	subs	r3, r2, r3
 800b0fa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800b0fc:	6a3b      	ldr	r3, [r7, #32]
 800b0fe:	3b01      	subs	r3, #1
 800b100:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800b102:	6a3b      	ldr	r3, [r7, #32]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d118      	bne.n	800b13a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2200      	movs	r2, #0
 800b10c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2220      	movs	r2, #32
 800b112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2200      	movs	r2, #0
 800b11a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b122:	f043 0220 	orr.w	r2, r3, #32
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800b12a:	b662      	cpsie	i
}
 800b12c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2200      	movs	r2, #0
 800b132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800b136:	2301      	movs	r3, #1
 800b138:	e09a      	b.n	800b270 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	695b      	ldr	r3, [r3, #20]
 800b140:	f003 0304 	and.w	r3, r3, #4
 800b144:	2b04      	cmp	r3, #4
 800b146:	d1d9      	bne.n	800b0fc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	681a      	ldr	r2, [r3, #0]
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b156:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	691a      	ldr	r2, [r3, #16]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b162:	b2d2      	uxtb	r2, r2
 800b164:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b16a:	1c5a      	adds	r2, r3, #1
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b174:	3b01      	subs	r3, #1
 800b176:	b29a      	uxth	r2, r3
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b180:	b29b      	uxth	r3, r3
 800b182:	3b01      	subs	r3, #1
 800b184:	b29a      	uxth	r2, r3
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b18a:	b662      	cpsie	i
}
 800b18c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	691a      	ldr	r2, [r3, #16]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b198:	b2d2      	uxtb	r2, r2
 800b19a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1a0:	1c5a      	adds	r2, r3, #1
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	b29a      	uxth	r2, r3
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	3b01      	subs	r3, #1
 800b1ba:	b29a      	uxth	r2, r3
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b1c0:	e042      	b.n	800b248 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b1c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1c4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	f000 fc1e 	bl	800ba08 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e04c      	b.n	800b270 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	691a      	ldr	r2, [r3, #16]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1e0:	b2d2      	uxtb	r2, r2
 800b1e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1e8:	1c5a      	adds	r2, r3, #1
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1f2:	3b01      	subs	r3, #1
 800b1f4:	b29a      	uxth	r2, r3
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	3b01      	subs	r3, #1
 800b202:	b29a      	uxth	r2, r3
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	695b      	ldr	r3, [r3, #20]
 800b20e:	f003 0304 	and.w	r3, r3, #4
 800b212:	2b04      	cmp	r3, #4
 800b214:	d118      	bne.n	800b248 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	691a      	ldr	r2, [r3, #16]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b220:	b2d2      	uxtb	r2, r2
 800b222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b228:	1c5a      	adds	r2, r3, #1
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b232:	3b01      	subs	r3, #1
 800b234:	b29a      	uxth	r2, r3
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b23e:	b29b      	uxth	r3, r3
 800b240:	3b01      	subs	r3, #1
 800b242:	b29a      	uxth	r2, r3
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	f47f ae94 	bne.w	800af7a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	2220      	movs	r2, #32
 800b256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2200      	movs	r2, #0
 800b25e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2200      	movs	r2, #0
 800b266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b26a:	2300      	movs	r3, #0
 800b26c:	e000      	b.n	800b270 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800b26e:	2302      	movs	r3, #2
  }
}
 800b270:	4618      	mov	r0, r3
 800b272:	3728      	adds	r7, #40	@ 0x28
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	00010004 	.word	0x00010004
 800b27c:	20000f74 	.word	0x20000f74
 800b280:	14f8b589 	.word	0x14f8b589

0800b284 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b284:	b480      	push	{r7}
 800b286:	b083      	sub	sp, #12
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b292:	b2db      	uxtb	r3, r3
}
 800b294:	4618      	mov	r0, r3
 800b296:	370c      	adds	r7, #12
 800b298:	46bd      	mov	sp, r7
 800b29a:	bc80      	pop	{r7}
 800b29c:	4770      	bx	lr

0800b29e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b29e:	b480      	push	{r7}
 800b2a0:	b083      	sub	sp, #12
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	370c      	adds	r7, #12
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bc80      	pop	{r7}
 800b2b2:	4770      	bx	lr

0800b2b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b088      	sub	sp, #32
 800b2b8:	af02      	add	r7, sp, #8
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	607a      	str	r2, [r7, #4]
 800b2be:	603b      	str	r3, [r7, #0]
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	2b08      	cmp	r3, #8
 800b2ce:	d006      	beq.n	800b2de <I2C_MasterRequestWrite+0x2a>
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	2b01      	cmp	r3, #1
 800b2d4:	d003      	beq.n	800b2de <I2C_MasterRequestWrite+0x2a>
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b2dc:	d108      	bne.n	800b2f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	681a      	ldr	r2, [r3, #0]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b2ec:	601a      	str	r2, [r3, #0]
 800b2ee:	e00b      	b.n	800b308 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2f4:	2b12      	cmp	r3, #18
 800b2f6:	d107      	bne.n	800b308 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b306:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	9300      	str	r3, [sp, #0]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b314:	68f8      	ldr	r0, [r7, #12]
 800b316:	f000 f9cd 	bl	800b6b4 <I2C_WaitOnFlagUntilTimeout>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d00d      	beq.n	800b33c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b32a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b32e:	d103      	bne.n	800b338 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b336:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b338:	2303      	movs	r3, #3
 800b33a:	e035      	b.n	800b3a8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	691b      	ldr	r3, [r3, #16]
 800b340:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b344:	d108      	bne.n	800b358 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b346:	897b      	ldrh	r3, [r7, #10]
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	461a      	mov	r2, r3
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b354:	611a      	str	r2, [r3, #16]
 800b356:	e01b      	b.n	800b390 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b358:	897b      	ldrh	r3, [r7, #10]
 800b35a:	11db      	asrs	r3, r3, #7
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	f003 0306 	and.w	r3, r3, #6
 800b362:	b2db      	uxtb	r3, r3
 800b364:	f063 030f 	orn	r3, r3, #15
 800b368:	b2da      	uxtb	r2, r3
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	687a      	ldr	r2, [r7, #4]
 800b374:	490e      	ldr	r1, [pc, #56]	@ (800b3b0 <I2C_MasterRequestWrite+0xfc>)
 800b376:	68f8      	ldr	r0, [r7, #12]
 800b378:	f000 fa16 	bl	800b7a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b37c:	4603      	mov	r3, r0
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d001      	beq.n	800b386 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b382:	2301      	movs	r3, #1
 800b384:	e010      	b.n	800b3a8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b386:	897b      	ldrh	r3, [r7, #10]
 800b388:	b2da      	uxtb	r2, r3
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b390:	683b      	ldr	r3, [r7, #0]
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	4907      	ldr	r1, [pc, #28]	@ (800b3b4 <I2C_MasterRequestWrite+0x100>)
 800b396:	68f8      	ldr	r0, [r7, #12]
 800b398:	f000 fa06 	bl	800b7a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b39c:	4603      	mov	r3, r0
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d001      	beq.n	800b3a6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	e000      	b.n	800b3a8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3718      	adds	r7, #24
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	00010008 	.word	0x00010008
 800b3b4:	00010002 	.word	0x00010002

0800b3b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b088      	sub	sp, #32
 800b3bc:	af02      	add	r7, sp, #8
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	4608      	mov	r0, r1
 800b3c2:	4611      	mov	r1, r2
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	817b      	strh	r3, [r7, #10]
 800b3ca:	460b      	mov	r3, r1
 800b3cc:	813b      	strh	r3, [r7, #8]
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b3e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e4:	9300      	str	r3, [sp, #0]
 800b3e6:	6a3b      	ldr	r3, [r7, #32]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b3ee:	68f8      	ldr	r0, [r7, #12]
 800b3f0:	f000 f960 	bl	800b6b4 <I2C_WaitOnFlagUntilTimeout>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d00d      	beq.n	800b416 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b404:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b408:	d103      	bne.n	800b412 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b410:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b412:	2303      	movs	r3, #3
 800b414:	e05f      	b.n	800b4d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b416:	897b      	ldrh	r3, [r7, #10]
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	461a      	mov	r2, r3
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b424:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b428:	6a3a      	ldr	r2, [r7, #32]
 800b42a:	492d      	ldr	r1, [pc, #180]	@ (800b4e0 <I2C_RequestMemoryWrite+0x128>)
 800b42c:	68f8      	ldr	r0, [r7, #12]
 800b42e:	f000 f9bb 	bl	800b7a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	d001      	beq.n	800b43c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b438:	2301      	movs	r3, #1
 800b43a:	e04c      	b.n	800b4d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b43c:	2300      	movs	r3, #0
 800b43e:	617b      	str	r3, [r7, #20]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	695b      	ldr	r3, [r3, #20]
 800b446:	617b      	str	r3, [r7, #20]
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	699b      	ldr	r3, [r3, #24]
 800b44e:	617b      	str	r3, [r7, #20]
 800b450:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b454:	6a39      	ldr	r1, [r7, #32]
 800b456:	68f8      	ldr	r0, [r7, #12]
 800b458:	f000 fa46 	bl	800b8e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b45c:	4603      	mov	r3, r0
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d00d      	beq.n	800b47e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b466:	2b04      	cmp	r3, #4
 800b468:	d107      	bne.n	800b47a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b478:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	e02b      	b.n	800b4d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b47e:	88fb      	ldrh	r3, [r7, #6]
 800b480:	2b01      	cmp	r3, #1
 800b482:	d105      	bne.n	800b490 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b484:	893b      	ldrh	r3, [r7, #8]
 800b486:	b2da      	uxtb	r2, r3
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	611a      	str	r2, [r3, #16]
 800b48e:	e021      	b.n	800b4d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b490:	893b      	ldrh	r3, [r7, #8]
 800b492:	0a1b      	lsrs	r3, r3, #8
 800b494:	b29b      	uxth	r3, r3
 800b496:	b2da      	uxtb	r2, r3
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b49e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4a0:	6a39      	ldr	r1, [r7, #32]
 800b4a2:	68f8      	ldr	r0, [r7, #12]
 800b4a4:	f000 fa20 	bl	800b8e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d00d      	beq.n	800b4ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4b2:	2b04      	cmp	r3, #4
 800b4b4:	d107      	bne.n	800b4c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b4c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e005      	b.n	800b4d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b4ca:	893b      	ldrh	r3, [r7, #8]
 800b4cc:	b2da      	uxtb	r2, r3
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3718      	adds	r7, #24
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	00010002 	.word	0x00010002

0800b4e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b088      	sub	sp, #32
 800b4e8:	af02      	add	r7, sp, #8
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	4608      	mov	r0, r1
 800b4ee:	4611      	mov	r1, r2
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	817b      	strh	r3, [r7, #10]
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	813b      	strh	r3, [r7, #8]
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b50c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b51c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b520:	9300      	str	r3, [sp, #0]
 800b522:	6a3b      	ldr	r3, [r7, #32]
 800b524:	2200      	movs	r2, #0
 800b526:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b52a:	68f8      	ldr	r0, [r7, #12]
 800b52c:	f000 f8c2 	bl	800b6b4 <I2C_WaitOnFlagUntilTimeout>
 800b530:	4603      	mov	r3, r0
 800b532:	2b00      	cmp	r3, #0
 800b534:	d00d      	beq.n	800b552 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b540:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b544:	d103      	bne.n	800b54e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b54c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b54e:	2303      	movs	r3, #3
 800b550:	e0aa      	b.n	800b6a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b552:	897b      	ldrh	r3, [r7, #10]
 800b554:	b2db      	uxtb	r3, r3
 800b556:	461a      	mov	r2, r3
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b560:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b564:	6a3a      	ldr	r2, [r7, #32]
 800b566:	4952      	ldr	r1, [pc, #328]	@ (800b6b0 <I2C_RequestMemoryRead+0x1cc>)
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f000 f91d 	bl	800b7a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d001      	beq.n	800b578 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b574:	2301      	movs	r3, #1
 800b576:	e097      	b.n	800b6a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b578:	2300      	movs	r3, #0
 800b57a:	617b      	str	r3, [r7, #20]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	695b      	ldr	r3, [r3, #20]
 800b582:	617b      	str	r3, [r7, #20]
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	699b      	ldr	r3, [r3, #24]
 800b58a:	617b      	str	r3, [r7, #20]
 800b58c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b58e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b590:	6a39      	ldr	r1, [r7, #32]
 800b592:	68f8      	ldr	r0, [r7, #12]
 800b594:	f000 f9a8 	bl	800b8e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b598:	4603      	mov	r3, r0
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d00d      	beq.n	800b5ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5a2:	2b04      	cmp	r3, #4
 800b5a4:	d107      	bne.n	800b5b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	681a      	ldr	r2, [r3, #0]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b5b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b5b6:	2301      	movs	r3, #1
 800b5b8:	e076      	b.n	800b6a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b5ba:	88fb      	ldrh	r3, [r7, #6]
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d105      	bne.n	800b5cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b5c0:	893b      	ldrh	r3, [r7, #8]
 800b5c2:	b2da      	uxtb	r2, r3
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	611a      	str	r2, [r3, #16]
 800b5ca:	e021      	b.n	800b610 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b5cc:	893b      	ldrh	r3, [r7, #8]
 800b5ce:	0a1b      	lsrs	r3, r3, #8
 800b5d0:	b29b      	uxth	r3, r3
 800b5d2:	b2da      	uxtb	r2, r3
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b5da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5dc:	6a39      	ldr	r1, [r7, #32]
 800b5de:	68f8      	ldr	r0, [r7, #12]
 800b5e0:	f000 f982 	bl	800b8e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d00d      	beq.n	800b606 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5ee:	2b04      	cmp	r3, #4
 800b5f0:	d107      	bne.n	800b602 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b600:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	e050      	b.n	800b6a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b606:	893b      	ldrh	r3, [r7, #8]
 800b608:	b2da      	uxtb	r2, r3
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b612:	6a39      	ldr	r1, [r7, #32]
 800b614:	68f8      	ldr	r0, [r7, #12]
 800b616:	f000 f967 	bl	800b8e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d00d      	beq.n	800b63c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b624:	2b04      	cmp	r3, #4
 800b626:	d107      	bne.n	800b638 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b636:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b638:	2301      	movs	r3, #1
 800b63a:	e035      	b.n	800b6a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b64a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b64c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64e:	9300      	str	r3, [sp, #0]
 800b650:	6a3b      	ldr	r3, [r7, #32]
 800b652:	2200      	movs	r2, #0
 800b654:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b658:	68f8      	ldr	r0, [r7, #12]
 800b65a:	f000 f82b 	bl	800b6b4 <I2C_WaitOnFlagUntilTimeout>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	d00d      	beq.n	800b680 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b66e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b672:	d103      	bne.n	800b67c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b67a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b67c:	2303      	movs	r3, #3
 800b67e:	e013      	b.n	800b6a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b680:	897b      	ldrh	r3, [r7, #10]
 800b682:	b2db      	uxtb	r3, r3
 800b684:	f043 0301 	orr.w	r3, r3, #1
 800b688:	b2da      	uxtb	r2, r3
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b692:	6a3a      	ldr	r2, [r7, #32]
 800b694:	4906      	ldr	r1, [pc, #24]	@ (800b6b0 <I2C_RequestMemoryRead+0x1cc>)
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f000 f886 	bl	800b7a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d001      	beq.n	800b6a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e000      	b.n	800b6a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b6a6:	2300      	movs	r3, #0
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3718      	adds	r7, #24
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	00010002 	.word	0x00010002

0800b6b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b084      	sub	sp, #16
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	603b      	str	r3, [r7, #0]
 800b6c0:	4613      	mov	r3, r2
 800b6c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b6c4:	e048      	b.n	800b758 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6cc:	d044      	beq.n	800b758 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6ce:	f7fe f9e3 	bl	8009a98 <HAL_GetTick>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	69bb      	ldr	r3, [r7, #24]
 800b6d6:	1ad3      	subs	r3, r2, r3
 800b6d8:	683a      	ldr	r2, [r7, #0]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d302      	bcc.n	800b6e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d139      	bne.n	800b758 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	0c1b      	lsrs	r3, r3, #16
 800b6e8:	b2db      	uxtb	r3, r3
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d10d      	bne.n	800b70a <I2C_WaitOnFlagUntilTimeout+0x56>
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	695b      	ldr	r3, [r3, #20]
 800b6f4:	43da      	mvns	r2, r3
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	4013      	ands	r3, r2
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	bf0c      	ite	eq
 800b700:	2301      	moveq	r3, #1
 800b702:	2300      	movne	r3, #0
 800b704:	b2db      	uxtb	r3, r3
 800b706:	461a      	mov	r2, r3
 800b708:	e00c      	b.n	800b724 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	699b      	ldr	r3, [r3, #24]
 800b710:	43da      	mvns	r2, r3
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	4013      	ands	r3, r2
 800b716:	b29b      	uxth	r3, r3
 800b718:	2b00      	cmp	r3, #0
 800b71a:	bf0c      	ite	eq
 800b71c:	2301      	moveq	r3, #1
 800b71e:	2300      	movne	r3, #0
 800b720:	b2db      	uxtb	r3, r3
 800b722:	461a      	mov	r2, r3
 800b724:	79fb      	ldrb	r3, [r7, #7]
 800b726:	429a      	cmp	r2, r3
 800b728:	d116      	bne.n	800b758 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2200      	movs	r2, #0
 800b72e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	2220      	movs	r2, #32
 800b734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2200      	movs	r2, #0
 800b73c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b744:	f043 0220 	orr.w	r2, r3, #32
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2200      	movs	r2, #0
 800b750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b754:	2301      	movs	r3, #1
 800b756:	e023      	b.n	800b7a0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	0c1b      	lsrs	r3, r3, #16
 800b75c:	b2db      	uxtb	r3, r3
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d10d      	bne.n	800b77e <I2C_WaitOnFlagUntilTimeout+0xca>
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	695b      	ldr	r3, [r3, #20]
 800b768:	43da      	mvns	r2, r3
 800b76a:	68bb      	ldr	r3, [r7, #8]
 800b76c:	4013      	ands	r3, r2
 800b76e:	b29b      	uxth	r3, r3
 800b770:	2b00      	cmp	r3, #0
 800b772:	bf0c      	ite	eq
 800b774:	2301      	moveq	r3, #1
 800b776:	2300      	movne	r3, #0
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	461a      	mov	r2, r3
 800b77c:	e00c      	b.n	800b798 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	699b      	ldr	r3, [r3, #24]
 800b784:	43da      	mvns	r2, r3
 800b786:	68bb      	ldr	r3, [r7, #8]
 800b788:	4013      	ands	r3, r2
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	bf0c      	ite	eq
 800b790:	2301      	moveq	r3, #1
 800b792:	2300      	movne	r3, #0
 800b794:	b2db      	uxtb	r3, r3
 800b796:	461a      	mov	r2, r3
 800b798:	79fb      	ldrb	r3, [r7, #7]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d093      	beq.n	800b6c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b79e:	2300      	movs	r3, #0
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	3710      	adds	r7, #16
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	607a      	str	r2, [r7, #4]
 800b7b4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b7b6:	e071      	b.n	800b89c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	695b      	ldr	r3, [r3, #20]
 800b7be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b7c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b7c6:	d123      	bne.n	800b810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b7d6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b7e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2220      	movs	r2, #32
 800b7ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7fc:	f043 0204 	orr.w	r2, r3, #4
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2200      	movs	r2, #0
 800b808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b80c:	2301      	movs	r3, #1
 800b80e:	e067      	b.n	800b8e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b816:	d041      	beq.n	800b89c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b818:	f7fe f93e 	bl	8009a98 <HAL_GetTick>
 800b81c:	4602      	mov	r2, r0
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	429a      	cmp	r2, r3
 800b826:	d302      	bcc.n	800b82e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d136      	bne.n	800b89c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	0c1b      	lsrs	r3, r3, #16
 800b832:	b2db      	uxtb	r3, r3
 800b834:	2b01      	cmp	r3, #1
 800b836:	d10c      	bne.n	800b852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	695b      	ldr	r3, [r3, #20]
 800b83e:	43da      	mvns	r2, r3
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	4013      	ands	r3, r2
 800b844:	b29b      	uxth	r3, r3
 800b846:	2b00      	cmp	r3, #0
 800b848:	bf14      	ite	ne
 800b84a:	2301      	movne	r3, #1
 800b84c:	2300      	moveq	r3, #0
 800b84e:	b2db      	uxtb	r3, r3
 800b850:	e00b      	b.n	800b86a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	699b      	ldr	r3, [r3, #24]
 800b858:	43da      	mvns	r2, r3
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	4013      	ands	r3, r2
 800b85e:	b29b      	uxth	r3, r3
 800b860:	2b00      	cmp	r3, #0
 800b862:	bf14      	ite	ne
 800b864:	2301      	movne	r3, #1
 800b866:	2300      	moveq	r3, #0
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d016      	beq.n	800b89c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2200      	movs	r2, #0
 800b872:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2220      	movs	r2, #32
 800b878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2200      	movs	r2, #0
 800b880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b888:	f043 0220 	orr.w	r2, r3, #32
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2200      	movs	r2, #0
 800b894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b898:	2301      	movs	r3, #1
 800b89a:	e021      	b.n	800b8e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	0c1b      	lsrs	r3, r3, #16
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	2b01      	cmp	r3, #1
 800b8a4:	d10c      	bne.n	800b8c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	695b      	ldr	r3, [r3, #20]
 800b8ac:	43da      	mvns	r2, r3
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	4013      	ands	r3, r2
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	bf14      	ite	ne
 800b8b8:	2301      	movne	r3, #1
 800b8ba:	2300      	moveq	r3, #0
 800b8bc:	b2db      	uxtb	r3, r3
 800b8be:	e00b      	b.n	800b8d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	699b      	ldr	r3, [r3, #24]
 800b8c6:	43da      	mvns	r2, r3
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	4013      	ands	r3, r2
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	bf14      	ite	ne
 800b8d2:	2301      	movne	r3, #1
 800b8d4:	2300      	moveq	r3, #0
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	f47f af6d 	bne.w	800b7b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b8de:	2300      	movs	r3, #0
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3710      	adds	r7, #16
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b8f4:	e034      	b.n	800b960 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f000 f8e3 	bl	800bac2 <I2C_IsAcknowledgeFailed>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d001      	beq.n	800b906 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b902:	2301      	movs	r3, #1
 800b904:	e034      	b.n	800b970 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b90c:	d028      	beq.n	800b960 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b90e:	f7fe f8c3 	bl	8009a98 <HAL_GetTick>
 800b912:	4602      	mov	r2, r0
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	1ad3      	subs	r3, r2, r3
 800b918:	68ba      	ldr	r2, [r7, #8]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d302      	bcc.n	800b924 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d11d      	bne.n	800b960 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	695b      	ldr	r3, [r3, #20]
 800b92a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b92e:	2b80      	cmp	r3, #128	@ 0x80
 800b930:	d016      	beq.n	800b960 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	2200      	movs	r2, #0
 800b936:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2220      	movs	r2, #32
 800b93c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2200      	movs	r2, #0
 800b944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b94c:	f043 0220 	orr.w	r2, r3, #32
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	2200      	movs	r2, #0
 800b958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b95c:	2301      	movs	r3, #1
 800b95e:	e007      	b.n	800b970 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	695b      	ldr	r3, [r3, #20]
 800b966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b96a:	2b80      	cmp	r3, #128	@ 0x80
 800b96c:	d1c3      	bne.n	800b8f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b96e:	2300      	movs	r3, #0
}
 800b970:	4618      	mov	r0, r3
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	60f8      	str	r0, [r7, #12]
 800b980:	60b9      	str	r1, [r7, #8]
 800b982:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b984:	e034      	b.n	800b9f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	f000 f89b 	bl	800bac2 <I2C_IsAcknowledgeFailed>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d001      	beq.n	800b996 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b992:	2301      	movs	r3, #1
 800b994:	e034      	b.n	800ba00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b99c:	d028      	beq.n	800b9f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b99e:	f7fe f87b 	bl	8009a98 <HAL_GetTick>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	1ad3      	subs	r3, r2, r3
 800b9a8:	68ba      	ldr	r2, [r7, #8]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d302      	bcc.n	800b9b4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d11d      	bne.n	800b9f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	695b      	ldr	r3, [r3, #20]
 800b9ba:	f003 0304 	and.w	r3, r3, #4
 800b9be:	2b04      	cmp	r3, #4
 800b9c0:	d016      	beq.n	800b9f0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	2200      	movs	r2, #0
 800b9c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2220      	movs	r2, #32
 800b9cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b9dc:	f043 0220 	orr.w	r2, r3, #32
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	e007      	b.n	800ba00 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	695b      	ldr	r3, [r3, #20]
 800b9f6:	f003 0304 	and.w	r3, r3, #4
 800b9fa:	2b04      	cmp	r3, #4
 800b9fc:	d1c3      	bne.n	800b986 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3710      	adds	r7, #16
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b084      	sub	sp, #16
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	60f8      	str	r0, [r7, #12]
 800ba10:	60b9      	str	r1, [r7, #8]
 800ba12:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ba14:	e049      	b.n	800baaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	695b      	ldr	r3, [r3, #20]
 800ba1c:	f003 0310 	and.w	r3, r3, #16
 800ba20:	2b10      	cmp	r3, #16
 800ba22:	d119      	bne.n	800ba58 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f06f 0210 	mvn.w	r2, #16
 800ba2c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2200      	movs	r2, #0
 800ba32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2220      	movs	r2, #32
 800ba38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800ba54:	2301      	movs	r3, #1
 800ba56:	e030      	b.n	800baba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba58:	f7fe f81e 	bl	8009a98 <HAL_GetTick>
 800ba5c:	4602      	mov	r2, r0
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	1ad3      	subs	r3, r2, r3
 800ba62:	68ba      	ldr	r2, [r7, #8]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d302      	bcc.n	800ba6e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d11d      	bne.n	800baaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	695b      	ldr	r3, [r3, #20]
 800ba74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba78:	2b40      	cmp	r3, #64	@ 0x40
 800ba7a:	d016      	beq.n	800baaa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2220      	movs	r2, #32
 800ba86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba96:	f043 0220 	orr.w	r2, r3, #32
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2200      	movs	r2, #0
 800baa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800baa6:	2301      	movs	r3, #1
 800baa8:	e007      	b.n	800baba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	695b      	ldr	r3, [r3, #20]
 800bab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bab4:	2b40      	cmp	r3, #64	@ 0x40
 800bab6:	d1ae      	bne.n	800ba16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	3710      	adds	r7, #16
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}

0800bac2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bac2:	b480      	push	{r7}
 800bac4:	b083      	sub	sp, #12
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	695b      	ldr	r3, [r3, #20]
 800bad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bad4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bad8:	d11b      	bne.n	800bb12 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800bae2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2220      	movs	r2, #32
 800baee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2200      	movs	r2, #0
 800baf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bafe:	f043 0204 	orr.w	r2, r3, #4
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800bb0e:	2301      	movs	r3, #1
 800bb10:	e000      	b.n	800bb14 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bb12:	2300      	movs	r3, #0
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	370c      	adds	r7, #12
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bc80      	pop	{r7}
 800bb1c:	4770      	bx	lr
	...

0800bb20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b086      	sub	sp, #24
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d101      	bne.n	800bb32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e272      	b.n	800c018 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f003 0301 	and.w	r3, r3, #1
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	f000 8087 	beq.w	800bc4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bb40:	4b92      	ldr	r3, [pc, #584]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	f003 030c 	and.w	r3, r3, #12
 800bb48:	2b04      	cmp	r3, #4
 800bb4a:	d00c      	beq.n	800bb66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800bb4c:	4b8f      	ldr	r3, [pc, #572]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bb4e:	685b      	ldr	r3, [r3, #4]
 800bb50:	f003 030c 	and.w	r3, r3, #12
 800bb54:	2b08      	cmp	r3, #8
 800bb56:	d112      	bne.n	800bb7e <HAL_RCC_OscConfig+0x5e>
 800bb58:	4b8c      	ldr	r3, [pc, #560]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bb5a:	685b      	ldr	r3, [r3, #4]
 800bb5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bb60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb64:	d10b      	bne.n	800bb7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bb66:	4b89      	ldr	r3, [pc, #548]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d06c      	beq.n	800bc4c <HAL_RCC_OscConfig+0x12c>
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d168      	bne.n	800bc4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	e24c      	b.n	800c018 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb86:	d106      	bne.n	800bb96 <HAL_RCC_OscConfig+0x76>
 800bb88:	4b80      	ldr	r3, [pc, #512]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a7f      	ldr	r2, [pc, #508]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bb8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bb92:	6013      	str	r3, [r2, #0]
 800bb94:	e02e      	b.n	800bbf4 <HAL_RCC_OscConfig+0xd4>
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	685b      	ldr	r3, [r3, #4]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10c      	bne.n	800bbb8 <HAL_RCC_OscConfig+0x98>
 800bb9e:	4b7b      	ldr	r3, [pc, #492]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a7a      	ldr	r2, [pc, #488]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bba4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bba8:	6013      	str	r3, [r2, #0]
 800bbaa:	4b78      	ldr	r3, [pc, #480]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4a77      	ldr	r2, [pc, #476]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bbb0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bbb4:	6013      	str	r3, [r2, #0]
 800bbb6:	e01d      	b.n	800bbf4 <HAL_RCC_OscConfig+0xd4>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bbc0:	d10c      	bne.n	800bbdc <HAL_RCC_OscConfig+0xbc>
 800bbc2:	4b72      	ldr	r3, [pc, #456]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4a71      	ldr	r2, [pc, #452]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bbc8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bbcc:	6013      	str	r3, [r2, #0]
 800bbce:	4b6f      	ldr	r3, [pc, #444]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	4a6e      	ldr	r2, [pc, #440]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bbd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bbd8:	6013      	str	r3, [r2, #0]
 800bbda:	e00b      	b.n	800bbf4 <HAL_RCC_OscConfig+0xd4>
 800bbdc:	4b6b      	ldr	r3, [pc, #428]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	4a6a      	ldr	r2, [pc, #424]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bbe2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bbe6:	6013      	str	r3, [r2, #0]
 800bbe8:	4b68      	ldr	r3, [pc, #416]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	4a67      	ldr	r2, [pc, #412]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bbee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bbf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d013      	beq.n	800bc24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bbfc:	f7fd ff4c 	bl	8009a98 <HAL_GetTick>
 800bc00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc02:	e008      	b.n	800bc16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bc04:	f7fd ff48 	bl	8009a98 <HAL_GetTick>
 800bc08:	4602      	mov	r2, r0
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	1ad3      	subs	r3, r2, r3
 800bc0e:	2b64      	cmp	r3, #100	@ 0x64
 800bc10:	d901      	bls.n	800bc16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800bc12:	2303      	movs	r3, #3
 800bc14:	e200      	b.n	800c018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc16:	4b5d      	ldr	r3, [pc, #372]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d0f0      	beq.n	800bc04 <HAL_RCC_OscConfig+0xe4>
 800bc22:	e014      	b.n	800bc4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc24:	f7fd ff38 	bl	8009a98 <HAL_GetTick>
 800bc28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bc2a:	e008      	b.n	800bc3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bc2c:	f7fd ff34 	bl	8009a98 <HAL_GetTick>
 800bc30:	4602      	mov	r2, r0
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	1ad3      	subs	r3, r2, r3
 800bc36:	2b64      	cmp	r3, #100	@ 0x64
 800bc38:	d901      	bls.n	800bc3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800bc3a:	2303      	movs	r3, #3
 800bc3c:	e1ec      	b.n	800c018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bc3e:	4b53      	ldr	r3, [pc, #332]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d1f0      	bne.n	800bc2c <HAL_RCC_OscConfig+0x10c>
 800bc4a:	e000      	b.n	800bc4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f003 0302 	and.w	r3, r3, #2
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d063      	beq.n	800bd22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bc5a:	4b4c      	ldr	r3, [pc, #304]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	f003 030c 	and.w	r3, r3, #12
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d00b      	beq.n	800bc7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800bc66:	4b49      	ldr	r3, [pc, #292]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bc68:	685b      	ldr	r3, [r3, #4]
 800bc6a:	f003 030c 	and.w	r3, r3, #12
 800bc6e:	2b08      	cmp	r3, #8
 800bc70:	d11c      	bne.n	800bcac <HAL_RCC_OscConfig+0x18c>
 800bc72:	4b46      	ldr	r3, [pc, #280]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d116      	bne.n	800bcac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bc7e:	4b43      	ldr	r3, [pc, #268]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f003 0302 	and.w	r3, r3, #2
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d005      	beq.n	800bc96 <HAL_RCC_OscConfig+0x176>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	691b      	ldr	r3, [r3, #16]
 800bc8e:	2b01      	cmp	r3, #1
 800bc90:	d001      	beq.n	800bc96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800bc92:	2301      	movs	r3, #1
 800bc94:	e1c0      	b.n	800c018 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc96:	4b3d      	ldr	r3, [pc, #244]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	695b      	ldr	r3, [r3, #20]
 800bca2:	00db      	lsls	r3, r3, #3
 800bca4:	4939      	ldr	r1, [pc, #228]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bca6:	4313      	orrs	r3, r2
 800bca8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bcaa:	e03a      	b.n	800bd22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	691b      	ldr	r3, [r3, #16]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d020      	beq.n	800bcf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bcb4:	4b36      	ldr	r3, [pc, #216]	@ (800bd90 <HAL_RCC_OscConfig+0x270>)
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bcba:	f7fd feed 	bl	8009a98 <HAL_GetTick>
 800bcbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bcc0:	e008      	b.n	800bcd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bcc2:	f7fd fee9 	bl	8009a98 <HAL_GetTick>
 800bcc6:	4602      	mov	r2, r0
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	1ad3      	subs	r3, r2, r3
 800bccc:	2b02      	cmp	r3, #2
 800bcce:	d901      	bls.n	800bcd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800bcd0:	2303      	movs	r3, #3
 800bcd2:	e1a1      	b.n	800c018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bcd4:	4b2d      	ldr	r3, [pc, #180]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f003 0302 	and.w	r3, r3, #2
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d0f0      	beq.n	800bcc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bce0:	4b2a      	ldr	r3, [pc, #168]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	695b      	ldr	r3, [r3, #20]
 800bcec:	00db      	lsls	r3, r3, #3
 800bcee:	4927      	ldr	r1, [pc, #156]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bcf0:	4313      	orrs	r3, r2
 800bcf2:	600b      	str	r3, [r1, #0]
 800bcf4:	e015      	b.n	800bd22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bcf6:	4b26      	ldr	r3, [pc, #152]	@ (800bd90 <HAL_RCC_OscConfig+0x270>)
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bcfc:	f7fd fecc 	bl	8009a98 <HAL_GetTick>
 800bd00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd02:	e008      	b.n	800bd16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bd04:	f7fd fec8 	bl	8009a98 <HAL_GetTick>
 800bd08:	4602      	mov	r2, r0
 800bd0a:	693b      	ldr	r3, [r7, #16]
 800bd0c:	1ad3      	subs	r3, r2, r3
 800bd0e:	2b02      	cmp	r3, #2
 800bd10:	d901      	bls.n	800bd16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800bd12:	2303      	movs	r3, #3
 800bd14:	e180      	b.n	800c018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd16:	4b1d      	ldr	r3, [pc, #116]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f003 0302 	and.w	r3, r3, #2
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d1f0      	bne.n	800bd04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f003 0308 	and.w	r3, r3, #8
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d03a      	beq.n	800bda4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	699b      	ldr	r3, [r3, #24]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d019      	beq.n	800bd6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bd36:	4b17      	ldr	r3, [pc, #92]	@ (800bd94 <HAL_RCC_OscConfig+0x274>)
 800bd38:	2201      	movs	r2, #1
 800bd3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bd3c:	f7fd feac 	bl	8009a98 <HAL_GetTick>
 800bd40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bd42:	e008      	b.n	800bd56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bd44:	f7fd fea8 	bl	8009a98 <HAL_GetTick>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	1ad3      	subs	r3, r2, r3
 800bd4e:	2b02      	cmp	r3, #2
 800bd50:	d901      	bls.n	800bd56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800bd52:	2303      	movs	r3, #3
 800bd54:	e160      	b.n	800c018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bd56:	4b0d      	ldr	r3, [pc, #52]	@ (800bd8c <HAL_RCC_OscConfig+0x26c>)
 800bd58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd5a:	f003 0302 	and.w	r3, r3, #2
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d0f0      	beq.n	800bd44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800bd62:	2001      	movs	r0, #1
 800bd64:	f000 face 	bl	800c304 <RCC_Delay>
 800bd68:	e01c      	b.n	800bda4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bd6a:	4b0a      	ldr	r3, [pc, #40]	@ (800bd94 <HAL_RCC_OscConfig+0x274>)
 800bd6c:	2200      	movs	r2, #0
 800bd6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bd70:	f7fd fe92 	bl	8009a98 <HAL_GetTick>
 800bd74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bd76:	e00f      	b.n	800bd98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bd78:	f7fd fe8e 	bl	8009a98 <HAL_GetTick>
 800bd7c:	4602      	mov	r2, r0
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	1ad3      	subs	r3, r2, r3
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	d908      	bls.n	800bd98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800bd86:	2303      	movs	r3, #3
 800bd88:	e146      	b.n	800c018 <HAL_RCC_OscConfig+0x4f8>
 800bd8a:	bf00      	nop
 800bd8c:	40021000 	.word	0x40021000
 800bd90:	42420000 	.word	0x42420000
 800bd94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bd98:	4b92      	ldr	r3, [pc, #584]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800bd9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd9c:	f003 0302 	and.w	r3, r3, #2
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d1e9      	bne.n	800bd78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f003 0304 	and.w	r3, r3, #4
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	f000 80a6 	beq.w	800befe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bdb6:	4b8b      	ldr	r3, [pc, #556]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800bdb8:	69db      	ldr	r3, [r3, #28]
 800bdba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d10d      	bne.n	800bdde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bdc2:	4b88      	ldr	r3, [pc, #544]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800bdc4:	69db      	ldr	r3, [r3, #28]
 800bdc6:	4a87      	ldr	r2, [pc, #540]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800bdc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bdcc:	61d3      	str	r3, [r2, #28]
 800bdce:	4b85      	ldr	r3, [pc, #532]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800bdd0:	69db      	ldr	r3, [r3, #28]
 800bdd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bdd6:	60bb      	str	r3, [r7, #8]
 800bdd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bdda:	2301      	movs	r3, #1
 800bddc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bdde:	4b82      	ldr	r3, [pc, #520]	@ (800bfe8 <HAL_RCC_OscConfig+0x4c8>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d118      	bne.n	800be1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bdea:	4b7f      	ldr	r3, [pc, #508]	@ (800bfe8 <HAL_RCC_OscConfig+0x4c8>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a7e      	ldr	r2, [pc, #504]	@ (800bfe8 <HAL_RCC_OscConfig+0x4c8>)
 800bdf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bdf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bdf6:	f7fd fe4f 	bl	8009a98 <HAL_GetTick>
 800bdfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bdfc:	e008      	b.n	800be10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bdfe:	f7fd fe4b 	bl	8009a98 <HAL_GetTick>
 800be02:	4602      	mov	r2, r0
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	1ad3      	subs	r3, r2, r3
 800be08:	2b64      	cmp	r3, #100	@ 0x64
 800be0a:	d901      	bls.n	800be10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800be0c:	2303      	movs	r3, #3
 800be0e:	e103      	b.n	800c018 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800be10:	4b75      	ldr	r3, [pc, #468]	@ (800bfe8 <HAL_RCC_OscConfig+0x4c8>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d0f0      	beq.n	800bdfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	68db      	ldr	r3, [r3, #12]
 800be20:	2b01      	cmp	r3, #1
 800be22:	d106      	bne.n	800be32 <HAL_RCC_OscConfig+0x312>
 800be24:	4b6f      	ldr	r3, [pc, #444]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800be26:	6a1b      	ldr	r3, [r3, #32]
 800be28:	4a6e      	ldr	r2, [pc, #440]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800be2a:	f043 0301 	orr.w	r3, r3, #1
 800be2e:	6213      	str	r3, [r2, #32]
 800be30:	e02d      	b.n	800be8e <HAL_RCC_OscConfig+0x36e>
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	68db      	ldr	r3, [r3, #12]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d10c      	bne.n	800be54 <HAL_RCC_OscConfig+0x334>
 800be3a:	4b6a      	ldr	r3, [pc, #424]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800be3c:	6a1b      	ldr	r3, [r3, #32]
 800be3e:	4a69      	ldr	r2, [pc, #420]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800be40:	f023 0301 	bic.w	r3, r3, #1
 800be44:	6213      	str	r3, [r2, #32]
 800be46:	4b67      	ldr	r3, [pc, #412]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800be48:	6a1b      	ldr	r3, [r3, #32]
 800be4a:	4a66      	ldr	r2, [pc, #408]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800be4c:	f023 0304 	bic.w	r3, r3, #4
 800be50:	6213      	str	r3, [r2, #32]
 800be52:	e01c      	b.n	800be8e <HAL_RCC_OscConfig+0x36e>
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	2b05      	cmp	r3, #5
 800be5a:	d10c      	bne.n	800be76 <HAL_RCC_OscConfig+0x356>
 800be5c:	4b61      	ldr	r3, [pc, #388]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800be5e:	6a1b      	ldr	r3, [r3, #32]
 800be60:	4a60      	ldr	r2, [pc, #384]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800be62:	f043 0304 	orr.w	r3, r3, #4
 800be66:	6213      	str	r3, [r2, #32]
 800be68:	4b5e      	ldr	r3, [pc, #376]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800be6a:	6a1b      	ldr	r3, [r3, #32]
 800be6c:	4a5d      	ldr	r2, [pc, #372]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800be6e:	f043 0301 	orr.w	r3, r3, #1
 800be72:	6213      	str	r3, [r2, #32]
 800be74:	e00b      	b.n	800be8e <HAL_RCC_OscConfig+0x36e>
 800be76:	4b5b      	ldr	r3, [pc, #364]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800be78:	6a1b      	ldr	r3, [r3, #32]
 800be7a:	4a5a      	ldr	r2, [pc, #360]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800be7c:	f023 0301 	bic.w	r3, r3, #1
 800be80:	6213      	str	r3, [r2, #32]
 800be82:	4b58      	ldr	r3, [pc, #352]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800be84:	6a1b      	ldr	r3, [r3, #32]
 800be86:	4a57      	ldr	r2, [pc, #348]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800be88:	f023 0304 	bic.w	r3, r3, #4
 800be8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d015      	beq.n	800bec2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800be96:	f7fd fdff 	bl	8009a98 <HAL_GetTick>
 800be9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be9c:	e00a      	b.n	800beb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be9e:	f7fd fdfb 	bl	8009a98 <HAL_GetTick>
 800bea2:	4602      	mov	r2, r0
 800bea4:	693b      	ldr	r3, [r7, #16]
 800bea6:	1ad3      	subs	r3, r2, r3
 800bea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800beac:	4293      	cmp	r3, r2
 800beae:	d901      	bls.n	800beb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800beb0:	2303      	movs	r3, #3
 800beb2:	e0b1      	b.n	800c018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800beb4:	4b4b      	ldr	r3, [pc, #300]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800beb6:	6a1b      	ldr	r3, [r3, #32]
 800beb8:	f003 0302 	and.w	r3, r3, #2
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d0ee      	beq.n	800be9e <HAL_RCC_OscConfig+0x37e>
 800bec0:	e014      	b.n	800beec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bec2:	f7fd fde9 	bl	8009a98 <HAL_GetTick>
 800bec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bec8:	e00a      	b.n	800bee0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800beca:	f7fd fde5 	bl	8009a98 <HAL_GetTick>
 800bece:	4602      	mov	r2, r0
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	1ad3      	subs	r3, r2, r3
 800bed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bed8:	4293      	cmp	r3, r2
 800beda:	d901      	bls.n	800bee0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800bedc:	2303      	movs	r3, #3
 800bede:	e09b      	b.n	800c018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bee0:	4b40      	ldr	r3, [pc, #256]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800bee2:	6a1b      	ldr	r3, [r3, #32]
 800bee4:	f003 0302 	and.w	r3, r3, #2
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d1ee      	bne.n	800beca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800beec:	7dfb      	ldrb	r3, [r7, #23]
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d105      	bne.n	800befe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bef2:	4b3c      	ldr	r3, [pc, #240]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800bef4:	69db      	ldr	r3, [r3, #28]
 800bef6:	4a3b      	ldr	r2, [pc, #236]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800bef8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800befc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	69db      	ldr	r3, [r3, #28]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	f000 8087 	beq.w	800c016 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bf08:	4b36      	ldr	r3, [pc, #216]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	f003 030c 	and.w	r3, r3, #12
 800bf10:	2b08      	cmp	r3, #8
 800bf12:	d061      	beq.n	800bfd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	69db      	ldr	r3, [r3, #28]
 800bf18:	2b02      	cmp	r3, #2
 800bf1a:	d146      	bne.n	800bfaa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf1c:	4b33      	ldr	r3, [pc, #204]	@ (800bfec <HAL_RCC_OscConfig+0x4cc>)
 800bf1e:	2200      	movs	r2, #0
 800bf20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf22:	f7fd fdb9 	bl	8009a98 <HAL_GetTick>
 800bf26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bf28:	e008      	b.n	800bf3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf2a:	f7fd fdb5 	bl	8009a98 <HAL_GetTick>
 800bf2e:	4602      	mov	r2, r0
 800bf30:	693b      	ldr	r3, [r7, #16]
 800bf32:	1ad3      	subs	r3, r2, r3
 800bf34:	2b02      	cmp	r3, #2
 800bf36:	d901      	bls.n	800bf3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800bf38:	2303      	movs	r3, #3
 800bf3a:	e06d      	b.n	800c018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bf3c:	4b29      	ldr	r3, [pc, #164]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d1f0      	bne.n	800bf2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6a1b      	ldr	r3, [r3, #32]
 800bf4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf50:	d108      	bne.n	800bf64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800bf52:	4b24      	ldr	r3, [pc, #144]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	689b      	ldr	r3, [r3, #8]
 800bf5e:	4921      	ldr	r1, [pc, #132]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800bf60:	4313      	orrs	r3, r2
 800bf62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bf64:	4b1f      	ldr	r3, [pc, #124]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6a19      	ldr	r1, [r3, #32]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf74:	430b      	orrs	r3, r1
 800bf76:	491b      	ldr	r1, [pc, #108]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800bf78:	4313      	orrs	r3, r2
 800bf7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bf7c:	4b1b      	ldr	r3, [pc, #108]	@ (800bfec <HAL_RCC_OscConfig+0x4cc>)
 800bf7e:	2201      	movs	r2, #1
 800bf80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf82:	f7fd fd89 	bl	8009a98 <HAL_GetTick>
 800bf86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bf88:	e008      	b.n	800bf9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf8a:	f7fd fd85 	bl	8009a98 <HAL_GetTick>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	693b      	ldr	r3, [r7, #16]
 800bf92:	1ad3      	subs	r3, r2, r3
 800bf94:	2b02      	cmp	r3, #2
 800bf96:	d901      	bls.n	800bf9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800bf98:	2303      	movs	r3, #3
 800bf9a:	e03d      	b.n	800c018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bf9c:	4b11      	ldr	r3, [pc, #68]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d0f0      	beq.n	800bf8a <HAL_RCC_OscConfig+0x46a>
 800bfa8:	e035      	b.n	800c016 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bfaa:	4b10      	ldr	r3, [pc, #64]	@ (800bfec <HAL_RCC_OscConfig+0x4cc>)
 800bfac:	2200      	movs	r2, #0
 800bfae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bfb0:	f7fd fd72 	bl	8009a98 <HAL_GetTick>
 800bfb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bfb6:	e008      	b.n	800bfca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bfb8:	f7fd fd6e 	bl	8009a98 <HAL_GetTick>
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	1ad3      	subs	r3, r2, r3
 800bfc2:	2b02      	cmp	r3, #2
 800bfc4:	d901      	bls.n	800bfca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800bfc6:	2303      	movs	r3, #3
 800bfc8:	e026      	b.n	800c018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bfca:	4b06      	ldr	r3, [pc, #24]	@ (800bfe4 <HAL_RCC_OscConfig+0x4c4>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d1f0      	bne.n	800bfb8 <HAL_RCC_OscConfig+0x498>
 800bfd6:	e01e      	b.n	800c016 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	69db      	ldr	r3, [r3, #28]
 800bfdc:	2b01      	cmp	r3, #1
 800bfde:	d107      	bne.n	800bff0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e019      	b.n	800c018 <HAL_RCC_OscConfig+0x4f8>
 800bfe4:	40021000 	.word	0x40021000
 800bfe8:	40007000 	.word	0x40007000
 800bfec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800bff0:	4b0b      	ldr	r3, [pc, #44]	@ (800c020 <HAL_RCC_OscConfig+0x500>)
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6a1b      	ldr	r3, [r3, #32]
 800c000:	429a      	cmp	r2, r3
 800c002:	d106      	bne.n	800c012 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c00e:	429a      	cmp	r2, r3
 800c010:	d001      	beq.n	800c016 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800c012:	2301      	movs	r3, #1
 800c014:	e000      	b.n	800c018 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800c016:	2300      	movs	r3, #0
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3718      	adds	r7, #24
 800c01c:	46bd      	mov	sp, r7
 800c01e:	bd80      	pop	{r7, pc}
 800c020:	40021000 	.word	0x40021000

0800c024 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b084      	sub	sp, #16
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
 800c02c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d101      	bne.n	800c038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c034:	2301      	movs	r3, #1
 800c036:	e0d0      	b.n	800c1da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c038:	4b6a      	ldr	r3, [pc, #424]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1c0>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	f003 0307 	and.w	r3, r3, #7
 800c040:	683a      	ldr	r2, [r7, #0]
 800c042:	429a      	cmp	r2, r3
 800c044:	d910      	bls.n	800c068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c046:	4b67      	ldr	r3, [pc, #412]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1c0>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f023 0207 	bic.w	r2, r3, #7
 800c04e:	4965      	ldr	r1, [pc, #404]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1c0>)
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	4313      	orrs	r3, r2
 800c054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c056:	4b63      	ldr	r3, [pc, #396]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1c0>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f003 0307 	and.w	r3, r3, #7
 800c05e:	683a      	ldr	r2, [r7, #0]
 800c060:	429a      	cmp	r2, r3
 800c062:	d001      	beq.n	800c068 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800c064:	2301      	movs	r3, #1
 800c066:	e0b8      	b.n	800c1da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f003 0302 	and.w	r3, r3, #2
 800c070:	2b00      	cmp	r3, #0
 800c072:	d020      	beq.n	800c0b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f003 0304 	and.w	r3, r3, #4
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d005      	beq.n	800c08c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c080:	4b59      	ldr	r3, [pc, #356]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	4a58      	ldr	r2, [pc, #352]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c086:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800c08a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f003 0308 	and.w	r3, r3, #8
 800c094:	2b00      	cmp	r3, #0
 800c096:	d005      	beq.n	800c0a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c098:	4b53      	ldr	r3, [pc, #332]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c09a:	685b      	ldr	r3, [r3, #4]
 800c09c:	4a52      	ldr	r2, [pc, #328]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c09e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800c0a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c0a4:	4b50      	ldr	r3, [pc, #320]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	689b      	ldr	r3, [r3, #8]
 800c0b0:	494d      	ldr	r1, [pc, #308]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f003 0301 	and.w	r3, r3, #1
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d040      	beq.n	800c144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d107      	bne.n	800c0da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c0ca:	4b47      	ldr	r3, [pc, #284]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d115      	bne.n	800c102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	e07f      	b.n	800c1da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	2b02      	cmp	r3, #2
 800c0e0:	d107      	bne.n	800c0f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c0e2:	4b41      	ldr	r3, [pc, #260]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d109      	bne.n	800c102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	e073      	b.n	800c1da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c0f2:	4b3d      	ldr	r3, [pc, #244]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f003 0302 	and.w	r3, r3, #2
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d101      	bne.n	800c102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c0fe:	2301      	movs	r3, #1
 800c100:	e06b      	b.n	800c1da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c102:	4b39      	ldr	r3, [pc, #228]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	f023 0203 	bic.w	r2, r3, #3
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	4936      	ldr	r1, [pc, #216]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c110:	4313      	orrs	r3, r2
 800c112:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c114:	f7fd fcc0 	bl	8009a98 <HAL_GetTick>
 800c118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c11a:	e00a      	b.n	800c132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c11c:	f7fd fcbc 	bl	8009a98 <HAL_GetTick>
 800c120:	4602      	mov	r2, r0
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	1ad3      	subs	r3, r2, r3
 800c126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d901      	bls.n	800c132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c12e:	2303      	movs	r3, #3
 800c130:	e053      	b.n	800c1da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c132:	4b2d      	ldr	r3, [pc, #180]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c134:	685b      	ldr	r3, [r3, #4]
 800c136:	f003 020c 	and.w	r2, r3, #12
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	009b      	lsls	r3, r3, #2
 800c140:	429a      	cmp	r2, r3
 800c142:	d1eb      	bne.n	800c11c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c144:	4b27      	ldr	r3, [pc, #156]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1c0>)
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	f003 0307 	and.w	r3, r3, #7
 800c14c:	683a      	ldr	r2, [r7, #0]
 800c14e:	429a      	cmp	r2, r3
 800c150:	d210      	bcs.n	800c174 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c152:	4b24      	ldr	r3, [pc, #144]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1c0>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f023 0207 	bic.w	r2, r3, #7
 800c15a:	4922      	ldr	r1, [pc, #136]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1c0>)
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	4313      	orrs	r3, r2
 800c160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c162:	4b20      	ldr	r3, [pc, #128]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1c0>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f003 0307 	and.w	r3, r3, #7
 800c16a:	683a      	ldr	r2, [r7, #0]
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d001      	beq.n	800c174 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800c170:	2301      	movs	r3, #1
 800c172:	e032      	b.n	800c1da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f003 0304 	and.w	r3, r3, #4
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d008      	beq.n	800c192 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c180:	4b19      	ldr	r3, [pc, #100]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	68db      	ldr	r3, [r3, #12]
 800c18c:	4916      	ldr	r1, [pc, #88]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c18e:	4313      	orrs	r3, r2
 800c190:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	f003 0308 	and.w	r3, r3, #8
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d009      	beq.n	800c1b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c19e:	4b12      	ldr	r3, [pc, #72]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	691b      	ldr	r3, [r3, #16]
 800c1aa:	00db      	lsls	r3, r3, #3
 800c1ac:	490e      	ldr	r1, [pc, #56]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c1ae:	4313      	orrs	r3, r2
 800c1b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c1b2:	f000 f821 	bl	800c1f8 <HAL_RCC_GetSysClockFreq>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	4b0b      	ldr	r3, [pc, #44]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1c4>)
 800c1ba:	685b      	ldr	r3, [r3, #4]
 800c1bc:	091b      	lsrs	r3, r3, #4
 800c1be:	f003 030f 	and.w	r3, r3, #15
 800c1c2:	490a      	ldr	r1, [pc, #40]	@ (800c1ec <HAL_RCC_ClockConfig+0x1c8>)
 800c1c4:	5ccb      	ldrb	r3, [r1, r3]
 800c1c6:	fa22 f303 	lsr.w	r3, r2, r3
 800c1ca:	4a09      	ldr	r2, [pc, #36]	@ (800c1f0 <HAL_RCC_ClockConfig+0x1cc>)
 800c1cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c1ce:	4b09      	ldr	r3, [pc, #36]	@ (800c1f4 <HAL_RCC_ClockConfig+0x1d0>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f7fd fc1e 	bl	8009a14 <HAL_InitTick>

  return HAL_OK;
 800c1d8:	2300      	movs	r3, #0
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3710      	adds	r7, #16
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	40022000 	.word	0x40022000
 800c1e8:	40021000 	.word	0x40021000
 800c1ec:	0800f0ec 	.word	0x0800f0ec
 800c1f0:	20000f74 	.word	0x20000f74
 800c1f4:	20000f78 	.word	0x20000f78

0800c1f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b087      	sub	sp, #28
 800c1fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800c1fe:	2300      	movs	r3, #0
 800c200:	60fb      	str	r3, [r7, #12]
 800c202:	2300      	movs	r3, #0
 800c204:	60bb      	str	r3, [r7, #8]
 800c206:	2300      	movs	r3, #0
 800c208:	617b      	str	r3, [r7, #20]
 800c20a:	2300      	movs	r3, #0
 800c20c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800c20e:	2300      	movs	r3, #0
 800c210:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800c212:	4b1e      	ldr	r3, [pc, #120]	@ (800c28c <HAL_RCC_GetSysClockFreq+0x94>)
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f003 030c 	and.w	r3, r3, #12
 800c21e:	2b04      	cmp	r3, #4
 800c220:	d002      	beq.n	800c228 <HAL_RCC_GetSysClockFreq+0x30>
 800c222:	2b08      	cmp	r3, #8
 800c224:	d003      	beq.n	800c22e <HAL_RCC_GetSysClockFreq+0x36>
 800c226:	e027      	b.n	800c278 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c228:	4b19      	ldr	r3, [pc, #100]	@ (800c290 <HAL_RCC_GetSysClockFreq+0x98>)
 800c22a:	613b      	str	r3, [r7, #16]
      break;
 800c22c:	e027      	b.n	800c27e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	0c9b      	lsrs	r3, r3, #18
 800c232:	f003 030f 	and.w	r3, r3, #15
 800c236:	4a17      	ldr	r2, [pc, #92]	@ (800c294 <HAL_RCC_GetSysClockFreq+0x9c>)
 800c238:	5cd3      	ldrb	r3, [r2, r3]
 800c23a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c242:	2b00      	cmp	r3, #0
 800c244:	d010      	beq.n	800c268 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800c246:	4b11      	ldr	r3, [pc, #68]	@ (800c28c <HAL_RCC_GetSysClockFreq+0x94>)
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	0c5b      	lsrs	r3, r3, #17
 800c24c:	f003 0301 	and.w	r3, r3, #1
 800c250:	4a11      	ldr	r2, [pc, #68]	@ (800c298 <HAL_RCC_GetSysClockFreq+0xa0>)
 800c252:	5cd3      	ldrb	r3, [r2, r3]
 800c254:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	4a0d      	ldr	r2, [pc, #52]	@ (800c290 <HAL_RCC_GetSysClockFreq+0x98>)
 800c25a:	fb03 f202 	mul.w	r2, r3, r2
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	fbb2 f3f3 	udiv	r3, r2, r3
 800c264:	617b      	str	r3, [r7, #20]
 800c266:	e004      	b.n	800c272 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4a0c      	ldr	r2, [pc, #48]	@ (800c29c <HAL_RCC_GetSysClockFreq+0xa4>)
 800c26c:	fb02 f303 	mul.w	r3, r2, r3
 800c270:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	613b      	str	r3, [r7, #16]
      break;
 800c276:	e002      	b.n	800c27e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800c278:	4b05      	ldr	r3, [pc, #20]	@ (800c290 <HAL_RCC_GetSysClockFreq+0x98>)
 800c27a:	613b      	str	r3, [r7, #16]
      break;
 800c27c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c27e:	693b      	ldr	r3, [r7, #16]
}
 800c280:	4618      	mov	r0, r3
 800c282:	371c      	adds	r7, #28
 800c284:	46bd      	mov	sp, r7
 800c286:	bc80      	pop	{r7}
 800c288:	4770      	bx	lr
 800c28a:	bf00      	nop
 800c28c:	40021000 	.word	0x40021000
 800c290:	007a1200 	.word	0x007a1200
 800c294:	0800f104 	.word	0x0800f104
 800c298:	0800f114 	.word	0x0800f114
 800c29c:	003d0900 	.word	0x003d0900

0800c2a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c2a4:	4b02      	ldr	r3, [pc, #8]	@ (800c2b0 <HAL_RCC_GetHCLKFreq+0x10>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bc80      	pop	{r7}
 800c2ae:	4770      	bx	lr
 800c2b0:	20000f74 	.word	0x20000f74

0800c2b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c2b8:	f7ff fff2 	bl	800c2a0 <HAL_RCC_GetHCLKFreq>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	4b05      	ldr	r3, [pc, #20]	@ (800c2d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c2c0:	685b      	ldr	r3, [r3, #4]
 800c2c2:	0a1b      	lsrs	r3, r3, #8
 800c2c4:	f003 0307 	and.w	r3, r3, #7
 800c2c8:	4903      	ldr	r1, [pc, #12]	@ (800c2d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c2ca:	5ccb      	ldrb	r3, [r1, r3]
 800c2cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	bd80      	pop	{r7, pc}
 800c2d4:	40021000 	.word	0x40021000
 800c2d8:	0800f0fc 	.word	0x0800f0fc

0800c2dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c2e0:	f7ff ffde 	bl	800c2a0 <HAL_RCC_GetHCLKFreq>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	4b05      	ldr	r3, [pc, #20]	@ (800c2fc <HAL_RCC_GetPCLK2Freq+0x20>)
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	0adb      	lsrs	r3, r3, #11
 800c2ec:	f003 0307 	and.w	r3, r3, #7
 800c2f0:	4903      	ldr	r1, [pc, #12]	@ (800c300 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c2f2:	5ccb      	ldrb	r3, [r1, r3]
 800c2f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	bd80      	pop	{r7, pc}
 800c2fc:	40021000 	.word	0x40021000
 800c300:	0800f0fc 	.word	0x0800f0fc

0800c304 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800c304:	b480      	push	{r7}
 800c306:	b085      	sub	sp, #20
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c30c:	4b0a      	ldr	r3, [pc, #40]	@ (800c338 <RCC_Delay+0x34>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4a0a      	ldr	r2, [pc, #40]	@ (800c33c <RCC_Delay+0x38>)
 800c312:	fba2 2303 	umull	r2, r3, r2, r3
 800c316:	0a5b      	lsrs	r3, r3, #9
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	fb02 f303 	mul.w	r3, r2, r3
 800c31e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800c320:	bf00      	nop
  }
  while (Delay --);
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	1e5a      	subs	r2, r3, #1
 800c326:	60fa      	str	r2, [r7, #12]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d1f9      	bne.n	800c320 <RCC_Delay+0x1c>
}
 800c32c:	bf00      	nop
 800c32e:	bf00      	nop
 800c330:	3714      	adds	r7, #20
 800c332:	46bd      	mov	sp, r7
 800c334:	bc80      	pop	{r7}
 800c336:	4770      	bx	lr
 800c338:	20000f74 	.word	0x20000f74
 800c33c:	10624dd3 	.word	0x10624dd3

0800c340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b082      	sub	sp, #8
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d101      	bne.n	800c352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c34e:	2301      	movs	r3, #1
 800c350:	e041      	b.n	800c3d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d106      	bne.n	800c36c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2200      	movs	r2, #0
 800c362:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f7fd fa22 	bl	80097b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2202      	movs	r2, #2
 800c370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	3304      	adds	r3, #4
 800c37c:	4619      	mov	r1, r3
 800c37e:	4610      	mov	r0, r2
 800c380:	f000 fa82 	bl	800c888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2201      	movs	r2, #1
 800c388:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2201      	movs	r2, #1
 800c390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2201      	movs	r2, #1
 800c398:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2201      	movs	r2, #1
 800c3c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3708      	adds	r7, #8
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
	...

0800c3e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d001      	beq.n	800c3f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	e044      	b.n	800c482 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2202      	movs	r2, #2
 800c3fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	68da      	ldr	r2, [r3, #12]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f042 0201 	orr.w	r2, r2, #1
 800c40e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a1d      	ldr	r2, [pc, #116]	@ (800c48c <HAL_TIM_Base_Start_IT+0xac>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d018      	beq.n	800c44c <HAL_TIM_Base_Start_IT+0x6c>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	4a1c      	ldr	r2, [pc, #112]	@ (800c490 <HAL_TIM_Base_Start_IT+0xb0>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d013      	beq.n	800c44c <HAL_TIM_Base_Start_IT+0x6c>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c42c:	d00e      	beq.n	800c44c <HAL_TIM_Base_Start_IT+0x6c>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	4a18      	ldr	r2, [pc, #96]	@ (800c494 <HAL_TIM_Base_Start_IT+0xb4>)
 800c434:	4293      	cmp	r3, r2
 800c436:	d009      	beq.n	800c44c <HAL_TIM_Base_Start_IT+0x6c>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4a16      	ldr	r2, [pc, #88]	@ (800c498 <HAL_TIM_Base_Start_IT+0xb8>)
 800c43e:	4293      	cmp	r3, r2
 800c440:	d004      	beq.n	800c44c <HAL_TIM_Base_Start_IT+0x6c>
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	4a15      	ldr	r2, [pc, #84]	@ (800c49c <HAL_TIM_Base_Start_IT+0xbc>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d111      	bne.n	800c470 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	689b      	ldr	r3, [r3, #8]
 800c452:	f003 0307 	and.w	r3, r3, #7
 800c456:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2b06      	cmp	r3, #6
 800c45c:	d010      	beq.n	800c480 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	681a      	ldr	r2, [r3, #0]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f042 0201 	orr.w	r2, r2, #1
 800c46c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c46e:	e007      	b.n	800c480 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	681a      	ldr	r2, [r3, #0]
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	f042 0201 	orr.w	r2, r2, #1
 800c47e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c480:	2300      	movs	r3, #0
}
 800c482:	4618      	mov	r0, r3
 800c484:	3714      	adds	r7, #20
 800c486:	46bd      	mov	sp, r7
 800c488:	bc80      	pop	{r7}
 800c48a:	4770      	bx	lr
 800c48c:	40012c00 	.word	0x40012c00
 800c490:	40013400 	.word	0x40013400
 800c494:	40000400 	.word	0x40000400
 800c498:	40000800 	.word	0x40000800
 800c49c:	40000c00 	.word	0x40000c00

0800c4a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	691b      	ldr	r3, [r3, #16]
 800c4ae:	f003 0302 	and.w	r3, r3, #2
 800c4b2:	2b02      	cmp	r3, #2
 800c4b4:	d122      	bne.n	800c4fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	68db      	ldr	r3, [r3, #12]
 800c4bc:	f003 0302 	and.w	r3, r3, #2
 800c4c0:	2b02      	cmp	r3, #2
 800c4c2:	d11b      	bne.n	800c4fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f06f 0202 	mvn.w	r2, #2
 800c4cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2201      	movs	r2, #1
 800c4d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	699b      	ldr	r3, [r3, #24]
 800c4da:	f003 0303 	and.w	r3, r3, #3
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d003      	beq.n	800c4ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c4e2:	6878      	ldr	r0, [r7, #4]
 800c4e4:	f000 f9b4 	bl	800c850 <HAL_TIM_IC_CaptureCallback>
 800c4e8:	e005      	b.n	800c4f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 f9a7 	bl	800c83e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f000 f9b6 	bl	800c862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	691b      	ldr	r3, [r3, #16]
 800c502:	f003 0304 	and.w	r3, r3, #4
 800c506:	2b04      	cmp	r3, #4
 800c508:	d122      	bne.n	800c550 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	f003 0304 	and.w	r3, r3, #4
 800c514:	2b04      	cmp	r3, #4
 800c516:	d11b      	bne.n	800c550 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f06f 0204 	mvn.w	r2, #4
 800c520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2202      	movs	r2, #2
 800c526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	699b      	ldr	r3, [r3, #24]
 800c52e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c532:	2b00      	cmp	r3, #0
 800c534:	d003      	beq.n	800c53e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 f98a 	bl	800c850 <HAL_TIM_IC_CaptureCallback>
 800c53c:	e005      	b.n	800c54a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f000 f97d 	bl	800c83e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f000 f98c 	bl	800c862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2200      	movs	r2, #0
 800c54e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	691b      	ldr	r3, [r3, #16]
 800c556:	f003 0308 	and.w	r3, r3, #8
 800c55a:	2b08      	cmp	r3, #8
 800c55c:	d122      	bne.n	800c5a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	f003 0308 	and.w	r3, r3, #8
 800c568:	2b08      	cmp	r3, #8
 800c56a:	d11b      	bne.n	800c5a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f06f 0208 	mvn.w	r2, #8
 800c574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	2204      	movs	r2, #4
 800c57a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	69db      	ldr	r3, [r3, #28]
 800c582:	f003 0303 	and.w	r3, r3, #3
 800c586:	2b00      	cmp	r3, #0
 800c588:	d003      	beq.n	800c592 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f000 f960 	bl	800c850 <HAL_TIM_IC_CaptureCallback>
 800c590:	e005      	b.n	800c59e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f000 f953 	bl	800c83e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 f962 	bl	800c862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	691b      	ldr	r3, [r3, #16]
 800c5aa:	f003 0310 	and.w	r3, r3, #16
 800c5ae:	2b10      	cmp	r3, #16
 800c5b0:	d122      	bne.n	800c5f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	f003 0310 	and.w	r3, r3, #16
 800c5bc:	2b10      	cmp	r3, #16
 800c5be:	d11b      	bne.n	800c5f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f06f 0210 	mvn.w	r2, #16
 800c5c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2208      	movs	r2, #8
 800c5ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	69db      	ldr	r3, [r3, #28]
 800c5d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d003      	beq.n	800c5e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 f936 	bl	800c850 <HAL_TIM_IC_CaptureCallback>
 800c5e4:	e005      	b.n	800c5f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 f929 	bl	800c83e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 f938 	bl	800c862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	691b      	ldr	r3, [r3, #16]
 800c5fe:	f003 0301 	and.w	r3, r3, #1
 800c602:	2b01      	cmp	r3, #1
 800c604:	d10e      	bne.n	800c624 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	68db      	ldr	r3, [r3, #12]
 800c60c:	f003 0301 	and.w	r3, r3, #1
 800c610:	2b01      	cmp	r3, #1
 800c612:	d107      	bne.n	800c624 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f06f 0201 	mvn.w	r2, #1
 800c61c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f7fc fd44 	bl	80090ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	691b      	ldr	r3, [r3, #16]
 800c62a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c62e:	2b80      	cmp	r3, #128	@ 0x80
 800c630:	d10e      	bne.n	800c650 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	68db      	ldr	r3, [r3, #12]
 800c638:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c63c:	2b80      	cmp	r3, #128	@ 0x80
 800c63e:	d107      	bne.n	800c650 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 faa1 	bl	800cb92 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	691b      	ldr	r3, [r3, #16]
 800c656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c65a:	2b40      	cmp	r3, #64	@ 0x40
 800c65c:	d10e      	bne.n	800c67c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	68db      	ldr	r3, [r3, #12]
 800c664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c668:	2b40      	cmp	r3, #64	@ 0x40
 800c66a:	d107      	bne.n	800c67c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 f8fc 	bl	800c874 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	691b      	ldr	r3, [r3, #16]
 800c682:	f003 0320 	and.w	r3, r3, #32
 800c686:	2b20      	cmp	r3, #32
 800c688:	d10e      	bne.n	800c6a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	68db      	ldr	r3, [r3, #12]
 800c690:	f003 0320 	and.w	r3, r3, #32
 800c694:	2b20      	cmp	r3, #32
 800c696:	d107      	bne.n	800c6a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f06f 0220 	mvn.w	r2, #32
 800c6a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 fa6c 	bl	800cb80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c6a8:	bf00      	nop
 800c6aa:	3708      	adds	r7, #8
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b084      	sub	sp, #16
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c6c4:	2b01      	cmp	r3, #1
 800c6c6:	d101      	bne.n	800c6cc <HAL_TIM_ConfigClockSource+0x1c>
 800c6c8:	2302      	movs	r3, #2
 800c6ca:	e0b4      	b.n	800c836 <HAL_TIM_ConfigClockSource+0x186>
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2202      	movs	r2, #2
 800c6d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	689b      	ldr	r3, [r3, #8]
 800c6e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c6ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c6f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	68ba      	ldr	r2, [r7, #8]
 800c6fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c704:	d03e      	beq.n	800c784 <HAL_TIM_ConfigClockSource+0xd4>
 800c706:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c70a:	f200 8087 	bhi.w	800c81c <HAL_TIM_ConfigClockSource+0x16c>
 800c70e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c712:	f000 8086 	beq.w	800c822 <HAL_TIM_ConfigClockSource+0x172>
 800c716:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c71a:	d87f      	bhi.n	800c81c <HAL_TIM_ConfigClockSource+0x16c>
 800c71c:	2b70      	cmp	r3, #112	@ 0x70
 800c71e:	d01a      	beq.n	800c756 <HAL_TIM_ConfigClockSource+0xa6>
 800c720:	2b70      	cmp	r3, #112	@ 0x70
 800c722:	d87b      	bhi.n	800c81c <HAL_TIM_ConfigClockSource+0x16c>
 800c724:	2b60      	cmp	r3, #96	@ 0x60
 800c726:	d050      	beq.n	800c7ca <HAL_TIM_ConfigClockSource+0x11a>
 800c728:	2b60      	cmp	r3, #96	@ 0x60
 800c72a:	d877      	bhi.n	800c81c <HAL_TIM_ConfigClockSource+0x16c>
 800c72c:	2b50      	cmp	r3, #80	@ 0x50
 800c72e:	d03c      	beq.n	800c7aa <HAL_TIM_ConfigClockSource+0xfa>
 800c730:	2b50      	cmp	r3, #80	@ 0x50
 800c732:	d873      	bhi.n	800c81c <HAL_TIM_ConfigClockSource+0x16c>
 800c734:	2b40      	cmp	r3, #64	@ 0x40
 800c736:	d058      	beq.n	800c7ea <HAL_TIM_ConfigClockSource+0x13a>
 800c738:	2b40      	cmp	r3, #64	@ 0x40
 800c73a:	d86f      	bhi.n	800c81c <HAL_TIM_ConfigClockSource+0x16c>
 800c73c:	2b30      	cmp	r3, #48	@ 0x30
 800c73e:	d064      	beq.n	800c80a <HAL_TIM_ConfigClockSource+0x15a>
 800c740:	2b30      	cmp	r3, #48	@ 0x30
 800c742:	d86b      	bhi.n	800c81c <HAL_TIM_ConfigClockSource+0x16c>
 800c744:	2b20      	cmp	r3, #32
 800c746:	d060      	beq.n	800c80a <HAL_TIM_ConfigClockSource+0x15a>
 800c748:	2b20      	cmp	r3, #32
 800c74a:	d867      	bhi.n	800c81c <HAL_TIM_ConfigClockSource+0x16c>
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d05c      	beq.n	800c80a <HAL_TIM_ConfigClockSource+0x15a>
 800c750:	2b10      	cmp	r3, #16
 800c752:	d05a      	beq.n	800c80a <HAL_TIM_ConfigClockSource+0x15a>
 800c754:	e062      	b.n	800c81c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c75a:	683b      	ldr	r3, [r7, #0]
 800c75c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c766:	f000 f980 	bl	800ca6a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	689b      	ldr	r3, [r3, #8]
 800c770:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c778:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	68ba      	ldr	r2, [r7, #8]
 800c780:	609a      	str	r2, [r3, #8]
      break;
 800c782:	e04f      	b.n	800c824 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c794:	f000 f969 	bl	800ca6a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	689a      	ldr	r2, [r3, #8]
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c7a6:	609a      	str	r2, [r3, #8]
      break;
 800c7a8:	e03c      	b.n	800c824 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	f000 f8e0 	bl	800c97c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	2150      	movs	r1, #80	@ 0x50
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f000 f937 	bl	800ca36 <TIM_ITRx_SetConfig>
      break;
 800c7c8:	e02c      	b.n	800c824 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	f000 f8fe 	bl	800c9d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2160      	movs	r1, #96	@ 0x60
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	f000 f927 	bl	800ca36 <TIM_ITRx_SetConfig>
      break;
 800c7e8:	e01c      	b.n	800c824 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c7ee:	683b      	ldr	r3, [r7, #0]
 800c7f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	f000 f8c0 	bl	800c97c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	2140      	movs	r1, #64	@ 0x40
 800c802:	4618      	mov	r0, r3
 800c804:	f000 f917 	bl	800ca36 <TIM_ITRx_SetConfig>
      break;
 800c808:	e00c      	b.n	800c824 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681a      	ldr	r2, [r3, #0]
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	4619      	mov	r1, r3
 800c814:	4610      	mov	r0, r2
 800c816:	f000 f90e 	bl	800ca36 <TIM_ITRx_SetConfig>
      break;
 800c81a:	e003      	b.n	800c824 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c81c:	2301      	movs	r3, #1
 800c81e:	73fb      	strb	r3, [r7, #15]
      break;
 800c820:	e000      	b.n	800c824 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c822:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	2201      	movs	r2, #1
 800c828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2200      	movs	r2, #0
 800c830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c834:	7bfb      	ldrb	r3, [r7, #15]
}
 800c836:	4618      	mov	r0, r3
 800c838:	3710      	adds	r7, #16
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}

0800c83e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c83e:	b480      	push	{r7}
 800c840:	b083      	sub	sp, #12
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c846:	bf00      	nop
 800c848:	370c      	adds	r7, #12
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bc80      	pop	{r7}
 800c84e:	4770      	bx	lr

0800c850 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c850:	b480      	push	{r7}
 800c852:	b083      	sub	sp, #12
 800c854:	af00      	add	r7, sp, #0
 800c856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c858:	bf00      	nop
 800c85a:	370c      	adds	r7, #12
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bc80      	pop	{r7}
 800c860:	4770      	bx	lr

0800c862 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c862:	b480      	push	{r7}
 800c864:	b083      	sub	sp, #12
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c86a:	bf00      	nop
 800c86c:	370c      	adds	r7, #12
 800c86e:	46bd      	mov	sp, r7
 800c870:	bc80      	pop	{r7}
 800c872:	4770      	bx	lr

0800c874 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c874:	b480      	push	{r7}
 800c876:	b083      	sub	sp, #12
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c87c:	bf00      	nop
 800c87e:	370c      	adds	r7, #12
 800c880:	46bd      	mov	sp, r7
 800c882:	bc80      	pop	{r7}
 800c884:	4770      	bx	lr
	...

0800c888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c888:	b480      	push	{r7}
 800c88a:	b085      	sub	sp, #20
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	4a33      	ldr	r2, [pc, #204]	@ (800c968 <TIM_Base_SetConfig+0xe0>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d013      	beq.n	800c8c8 <TIM_Base_SetConfig+0x40>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	4a32      	ldr	r2, [pc, #200]	@ (800c96c <TIM_Base_SetConfig+0xe4>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d00f      	beq.n	800c8c8 <TIM_Base_SetConfig+0x40>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8ae:	d00b      	beq.n	800c8c8 <TIM_Base_SetConfig+0x40>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	4a2f      	ldr	r2, [pc, #188]	@ (800c970 <TIM_Base_SetConfig+0xe8>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d007      	beq.n	800c8c8 <TIM_Base_SetConfig+0x40>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	4a2e      	ldr	r2, [pc, #184]	@ (800c974 <TIM_Base_SetConfig+0xec>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d003      	beq.n	800c8c8 <TIM_Base_SetConfig+0x40>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4a2d      	ldr	r2, [pc, #180]	@ (800c978 <TIM_Base_SetConfig+0xf0>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d108      	bne.n	800c8da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	68fa      	ldr	r2, [r7, #12]
 800c8d6:	4313      	orrs	r3, r2
 800c8d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	4a22      	ldr	r2, [pc, #136]	@ (800c968 <TIM_Base_SetConfig+0xe0>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d013      	beq.n	800c90a <TIM_Base_SetConfig+0x82>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	4a21      	ldr	r2, [pc, #132]	@ (800c96c <TIM_Base_SetConfig+0xe4>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d00f      	beq.n	800c90a <TIM_Base_SetConfig+0x82>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8f0:	d00b      	beq.n	800c90a <TIM_Base_SetConfig+0x82>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	4a1e      	ldr	r2, [pc, #120]	@ (800c970 <TIM_Base_SetConfig+0xe8>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d007      	beq.n	800c90a <TIM_Base_SetConfig+0x82>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4a1d      	ldr	r2, [pc, #116]	@ (800c974 <TIM_Base_SetConfig+0xec>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d003      	beq.n	800c90a <TIM_Base_SetConfig+0x82>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	4a1c      	ldr	r2, [pc, #112]	@ (800c978 <TIM_Base_SetConfig+0xf0>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d108      	bne.n	800c91c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	68db      	ldr	r3, [r3, #12]
 800c916:	68fa      	ldr	r2, [r7, #12]
 800c918:	4313      	orrs	r3, r2
 800c91a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	695b      	ldr	r3, [r3, #20]
 800c926:	4313      	orrs	r3, r2
 800c928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	68fa      	ldr	r2, [r7, #12]
 800c92e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	689a      	ldr	r2, [r3, #8]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4a09      	ldr	r2, [pc, #36]	@ (800c968 <TIM_Base_SetConfig+0xe0>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d003      	beq.n	800c950 <TIM_Base_SetConfig+0xc8>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	4a08      	ldr	r2, [pc, #32]	@ (800c96c <TIM_Base_SetConfig+0xe4>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d103      	bne.n	800c958 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	691a      	ldr	r2, [r3, #16]
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2201      	movs	r2, #1
 800c95c:	615a      	str	r2, [r3, #20]
}
 800c95e:	bf00      	nop
 800c960:	3714      	adds	r7, #20
 800c962:	46bd      	mov	sp, r7
 800c964:	bc80      	pop	{r7}
 800c966:	4770      	bx	lr
 800c968:	40012c00 	.word	0x40012c00
 800c96c:	40013400 	.word	0x40013400
 800c970:	40000400 	.word	0x40000400
 800c974:	40000800 	.word	0x40000800
 800c978:	40000c00 	.word	0x40000c00

0800c97c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c97c:	b480      	push	{r7}
 800c97e:	b087      	sub	sp, #28
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	6a1b      	ldr	r3, [r3, #32]
 800c98c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	6a1b      	ldr	r3, [r3, #32]
 800c992:	f023 0201 	bic.w	r2, r3, #1
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	699b      	ldr	r3, [r3, #24]
 800c99e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c9a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	011b      	lsls	r3, r3, #4
 800c9ac:	693a      	ldr	r2, [r7, #16]
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	f023 030a 	bic.w	r3, r3, #10
 800c9b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c9ba:	697a      	ldr	r2, [r7, #20]
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	4313      	orrs	r3, r2
 800c9c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	693a      	ldr	r2, [r7, #16]
 800c9c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	697a      	ldr	r2, [r7, #20]
 800c9cc:	621a      	str	r2, [r3, #32]
}
 800c9ce:	bf00      	nop
 800c9d0:	371c      	adds	r7, #28
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bc80      	pop	{r7}
 800c9d6:	4770      	bx	lr

0800c9d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b087      	sub	sp, #28
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	6a1b      	ldr	r3, [r3, #32]
 800c9e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	6a1b      	ldr	r3, [r3, #32]
 800c9ee:	f023 0210 	bic.w	r2, r3, #16
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	699b      	ldr	r3, [r3, #24]
 800c9fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ca02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	031b      	lsls	r3, r3, #12
 800ca08:	693a      	ldr	r2, [r7, #16]
 800ca0a:	4313      	orrs	r3, r2
 800ca0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ca14:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	011b      	lsls	r3, r3, #4
 800ca1a:	697a      	ldr	r2, [r7, #20]
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	693a      	ldr	r2, [r7, #16]
 800ca24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	697a      	ldr	r2, [r7, #20]
 800ca2a:	621a      	str	r2, [r3, #32]
}
 800ca2c:	bf00      	nop
 800ca2e:	371c      	adds	r7, #28
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bc80      	pop	{r7}
 800ca34:	4770      	bx	lr

0800ca36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ca36:	b480      	push	{r7}
 800ca38:	b085      	sub	sp, #20
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
 800ca3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ca4e:	683a      	ldr	r2, [r7, #0]
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	4313      	orrs	r3, r2
 800ca54:	f043 0307 	orr.w	r3, r3, #7
 800ca58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	68fa      	ldr	r2, [r7, #12]
 800ca5e:	609a      	str	r2, [r3, #8]
}
 800ca60:	bf00      	nop
 800ca62:	3714      	adds	r7, #20
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bc80      	pop	{r7}
 800ca68:	4770      	bx	lr

0800ca6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ca6a:	b480      	push	{r7}
 800ca6c:	b087      	sub	sp, #28
 800ca6e:	af00      	add	r7, sp, #0
 800ca70:	60f8      	str	r0, [r7, #12]
 800ca72:	60b9      	str	r1, [r7, #8]
 800ca74:	607a      	str	r2, [r7, #4]
 800ca76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	689b      	ldr	r3, [r3, #8]
 800ca7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ca84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	021a      	lsls	r2, r3, #8
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	431a      	orrs	r2, r3
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	4313      	orrs	r3, r2
 800ca92:	697a      	ldr	r2, [r7, #20]
 800ca94:	4313      	orrs	r3, r2
 800ca96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	697a      	ldr	r2, [r7, #20]
 800ca9c:	609a      	str	r2, [r3, #8]
}
 800ca9e:	bf00      	nop
 800caa0:	371c      	adds	r7, #28
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bc80      	pop	{r7}
 800caa6:	4770      	bx	lr

0800caa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b085      	sub	sp, #20
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cab8:	2b01      	cmp	r3, #1
 800caba:	d101      	bne.n	800cac0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cabc:	2302      	movs	r3, #2
 800cabe:	e050      	b.n	800cb62 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2201      	movs	r2, #1
 800cac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2202      	movs	r2, #2
 800cacc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	685b      	ldr	r3, [r3, #4]
 800cad6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	689b      	ldr	r3, [r3, #8]
 800cade:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cae6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	68fa      	ldr	r2, [r7, #12]
 800caee:	4313      	orrs	r3, r2
 800caf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	4a1b      	ldr	r2, [pc, #108]	@ (800cb6c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800cb00:	4293      	cmp	r3, r2
 800cb02:	d018      	beq.n	800cb36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a19      	ldr	r2, [pc, #100]	@ (800cb70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d013      	beq.n	800cb36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb16:	d00e      	beq.n	800cb36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4a15      	ldr	r2, [pc, #84]	@ (800cb74 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d009      	beq.n	800cb36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	4a14      	ldr	r2, [pc, #80]	@ (800cb78 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d004      	beq.n	800cb36 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4a12      	ldr	r2, [pc, #72]	@ (800cb7c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	d10c      	bne.n	800cb50 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb36:	68bb      	ldr	r3, [r7, #8]
 800cb38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb3e:	683b      	ldr	r3, [r7, #0]
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	68ba      	ldr	r2, [r7, #8]
 800cb44:	4313      	orrs	r3, r2
 800cb46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	68ba      	ldr	r2, [r7, #8]
 800cb4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2201      	movs	r2, #1
 800cb54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cb60:	2300      	movs	r3, #0
}
 800cb62:	4618      	mov	r0, r3
 800cb64:	3714      	adds	r7, #20
 800cb66:	46bd      	mov	sp, r7
 800cb68:	bc80      	pop	{r7}
 800cb6a:	4770      	bx	lr
 800cb6c:	40012c00 	.word	0x40012c00
 800cb70:	40013400 	.word	0x40013400
 800cb74:	40000400 	.word	0x40000400
 800cb78:	40000800 	.word	0x40000800
 800cb7c:	40000c00 	.word	0x40000c00

0800cb80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b083      	sub	sp, #12
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb88:	bf00      	nop
 800cb8a:	370c      	adds	r7, #12
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bc80      	pop	{r7}
 800cb90:	4770      	bx	lr

0800cb92 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb92:	b480      	push	{r7}
 800cb94:	b083      	sub	sp, #12
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb9a:	bf00      	nop
 800cb9c:	370c      	adds	r7, #12
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bc80      	pop	{r7}
 800cba2:	4770      	bx	lr

0800cba4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b082      	sub	sp, #8
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d101      	bne.n	800cbb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	e042      	b.n	800cc3c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cbbc:	b2db      	uxtb	r3, r3
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d106      	bne.n	800cbd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f7fc fe16 	bl	80097fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2224      	movs	r2, #36	@ 0x24
 800cbd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	68da      	ldr	r2, [r3, #12]
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cbe6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f000 fdfb 	bl	800d7e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	691a      	ldr	r2, [r3, #16]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cbfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	695a      	ldr	r2, [r3, #20]
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cc0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	68da      	ldr	r2, [r3, #12]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cc1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2200      	movs	r2, #0
 800cc22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	2220      	movs	r2, #32
 800cc28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2220      	movs	r2, #32
 800cc30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2200      	movs	r2, #0
 800cc38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cc3a:	2300      	movs	r3, #0
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3708      	adds	r7, #8
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}

0800cc44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b08a      	sub	sp, #40	@ 0x28
 800cc48:	af02      	add	r7, sp, #8
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	60b9      	str	r1, [r7, #8]
 800cc4e:	603b      	str	r3, [r7, #0]
 800cc50:	4613      	mov	r3, r2
 800cc52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cc54:	2300      	movs	r3, #0
 800cc56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cc5e:	b2db      	uxtb	r3, r3
 800cc60:	2b20      	cmp	r3, #32
 800cc62:	d16d      	bne.n	800cd40 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d002      	beq.n	800cc70 <HAL_UART_Transmit+0x2c>
 800cc6a:	88fb      	ldrh	r3, [r7, #6]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d101      	bne.n	800cc74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cc70:	2301      	movs	r3, #1
 800cc72:	e066      	b.n	800cd42 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2200      	movs	r2, #0
 800cc78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2221      	movs	r2, #33	@ 0x21
 800cc7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cc82:	f7fc ff09 	bl	8009a98 <HAL_GetTick>
 800cc86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	88fa      	ldrh	r2, [r7, #6]
 800cc8c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	88fa      	ldrh	r2, [r7, #6]
 800cc92:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	689b      	ldr	r3, [r3, #8]
 800cc98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc9c:	d108      	bne.n	800ccb0 <HAL_UART_Transmit+0x6c>
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	691b      	ldr	r3, [r3, #16]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d104      	bne.n	800ccb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cca6:	2300      	movs	r3, #0
 800cca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	61bb      	str	r3, [r7, #24]
 800ccae:	e003      	b.n	800ccb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ccb8:	e02a      	b.n	800cd10 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	9300      	str	r3, [sp, #0]
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	2180      	movs	r1, #128	@ 0x80
 800ccc4:	68f8      	ldr	r0, [r7, #12]
 800ccc6:	f000 fb4a 	bl	800d35e <UART_WaitOnFlagUntilTimeout>
 800ccca:	4603      	mov	r3, r0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d001      	beq.n	800ccd4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800ccd0:	2303      	movs	r3, #3
 800ccd2:	e036      	b.n	800cd42 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800ccd4:	69fb      	ldr	r3, [r7, #28]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d10b      	bne.n	800ccf2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ccda:	69bb      	ldr	r3, [r7, #24]
 800ccdc:	881b      	ldrh	r3, [r3, #0]
 800ccde:	461a      	mov	r2, r3
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cce8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ccea:	69bb      	ldr	r3, [r7, #24]
 800ccec:	3302      	adds	r3, #2
 800ccee:	61bb      	str	r3, [r7, #24]
 800ccf0:	e007      	b.n	800cd02 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	781a      	ldrb	r2, [r3, #0]
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ccfc:	69fb      	ldr	r3, [r7, #28]
 800ccfe:	3301      	adds	r3, #1
 800cd00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	3b01      	subs	r3, #1
 800cd0a:	b29a      	uxth	r2, r3
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cd14:	b29b      	uxth	r3, r3
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d1cf      	bne.n	800ccba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	9300      	str	r3, [sp, #0]
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	2200      	movs	r2, #0
 800cd22:	2140      	movs	r1, #64	@ 0x40
 800cd24:	68f8      	ldr	r0, [r7, #12]
 800cd26:	f000 fb1a 	bl	800d35e <UART_WaitOnFlagUntilTimeout>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d001      	beq.n	800cd34 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800cd30:	2303      	movs	r3, #3
 800cd32:	e006      	b.n	800cd42 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2220      	movs	r2, #32
 800cd38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	e000      	b.n	800cd42 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800cd40:	2302      	movs	r3, #2
  }
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3720      	adds	r7, #32
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}

0800cd4a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cd4a:	b480      	push	{r7}
 800cd4c:	b085      	sub	sp, #20
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	60f8      	str	r0, [r7, #12]
 800cd52:	60b9      	str	r1, [r7, #8]
 800cd54:	4613      	mov	r3, r2
 800cd56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cd5e:	b2db      	uxtb	r3, r3
 800cd60:	2b20      	cmp	r3, #32
 800cd62:	d121      	bne.n	800cda8 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d002      	beq.n	800cd70 <HAL_UART_Transmit_IT+0x26>
 800cd6a:	88fb      	ldrh	r3, [r7, #6]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d101      	bne.n	800cd74 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800cd70:	2301      	movs	r3, #1
 800cd72:	e01a      	b.n	800cdaa <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	68ba      	ldr	r2, [r7, #8]
 800cd78:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	88fa      	ldrh	r2, [r7, #6]
 800cd7e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	88fa      	ldrh	r2, [r7, #6]
 800cd84:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2221      	movs	r2, #33	@ 0x21
 800cd90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	68da      	ldr	r2, [r3, #12]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cda2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800cda4:	2300      	movs	r3, #0
 800cda6:	e000      	b.n	800cdaa <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800cda8:	2302      	movs	r3, #2
  }
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3714      	adds	r7, #20
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bc80      	pop	{r7}
 800cdb2:	4770      	bx	lr

0800cdb4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b084      	sub	sp, #16
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	60f8      	str	r0, [r7, #12]
 800cdbc:	60b9      	str	r1, [r7, #8]
 800cdbe:	4613      	mov	r3, r2
 800cdc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	2b20      	cmp	r3, #32
 800cdcc:	d112      	bne.n	800cdf4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800cdce:	68bb      	ldr	r3, [r7, #8]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d002      	beq.n	800cdda <HAL_UART_Receive_IT+0x26>
 800cdd4:	88fb      	ldrh	r3, [r7, #6]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d101      	bne.n	800cdde <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800cdda:	2301      	movs	r3, #1
 800cddc:	e00b      	b.n	800cdf6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2200      	movs	r2, #0
 800cde2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cde4:	88fb      	ldrh	r3, [r7, #6]
 800cde6:	461a      	mov	r2, r3
 800cde8:	68b9      	ldr	r1, [r7, #8]
 800cdea:	68f8      	ldr	r0, [r7, #12]
 800cdec:	f000 fb25 	bl	800d43a <UART_Start_Receive_IT>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	e000      	b.n	800cdf6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800cdf4:	2302      	movs	r3, #2
  }
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3710      	adds	r7, #16
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}
	...

0800ce00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b0ba      	sub	sp, #232	@ 0xe8
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	68db      	ldr	r3, [r3, #12]
 800ce18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	695b      	ldr	r3, [r3, #20]
 800ce22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800ce26:	2300      	movs	r3, #0
 800ce28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ce32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce36:	f003 030f 	and.w	r3, r3, #15
 800ce3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800ce3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d10f      	bne.n	800ce66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ce46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce4a:	f003 0320 	and.w	r3, r3, #32
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d009      	beq.n	800ce66 <HAL_UART_IRQHandler+0x66>
 800ce52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce56:	f003 0320 	and.w	r3, r3, #32
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d003      	beq.n	800ce66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 fc01 	bl	800d666 <UART_Receive_IT>
      return;
 800ce64:	e25b      	b.n	800d31e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ce66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	f000 80de 	beq.w	800d02c <HAL_UART_IRQHandler+0x22c>
 800ce70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce74:	f003 0301 	and.w	r3, r3, #1
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d106      	bne.n	800ce8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ce7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	f000 80d1 	beq.w	800d02c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ce8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce8e:	f003 0301 	and.w	r3, r3, #1
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d00b      	beq.n	800ceae <HAL_UART_IRQHandler+0xae>
 800ce96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d005      	beq.n	800ceae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cea6:	f043 0201 	orr.w	r2, r3, #1
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ceae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ceb2:	f003 0304 	and.w	r3, r3, #4
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d00b      	beq.n	800ced2 <HAL_UART_IRQHandler+0xd2>
 800ceba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cebe:	f003 0301 	and.w	r3, r3, #1
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d005      	beq.n	800ced2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceca:	f043 0202 	orr.w	r2, r3, #2
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ced2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ced6:	f003 0302 	and.w	r3, r3, #2
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d00b      	beq.n	800cef6 <HAL_UART_IRQHandler+0xf6>
 800cede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cee2:	f003 0301 	and.w	r3, r3, #1
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d005      	beq.n	800cef6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceee:	f043 0204 	orr.w	r2, r3, #4
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800cef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cefa:	f003 0308 	and.w	r3, r3, #8
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d011      	beq.n	800cf26 <HAL_UART_IRQHandler+0x126>
 800cf02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf06:	f003 0320 	and.w	r3, r3, #32
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d105      	bne.n	800cf1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800cf0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cf12:	f003 0301 	and.w	r3, r3, #1
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d005      	beq.n	800cf26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf1e:	f043 0208 	orr.w	r2, r3, #8
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	f000 81f2 	beq.w	800d314 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cf30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf34:	f003 0320 	and.w	r3, r3, #32
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d008      	beq.n	800cf4e <HAL_UART_IRQHandler+0x14e>
 800cf3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf40:	f003 0320 	and.w	r3, r3, #32
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d002      	beq.n	800cf4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 fb8c 	bl	800d666 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	695b      	ldr	r3, [r3, #20]
 800cf54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	bf14      	ite	ne
 800cf5c:	2301      	movne	r3, #1
 800cf5e:	2300      	moveq	r3, #0
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf6a:	f003 0308 	and.w	r3, r3, #8
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d103      	bne.n	800cf7a <HAL_UART_IRQHandler+0x17a>
 800cf72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d04f      	beq.n	800d01a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 fa96 	bl	800d4ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	695b      	ldr	r3, [r3, #20]
 800cf86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d041      	beq.n	800d012 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	3314      	adds	r3, #20
 800cf94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cf9c:	e853 3f00 	ldrex	r3, [r3]
 800cfa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cfa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cfa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cfac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	3314      	adds	r3, #20
 800cfb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cfba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cfbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cfc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cfca:	e841 2300 	strex	r3, r2, [r1]
 800cfce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cfd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d1d9      	bne.n	800cf8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d013      	beq.n	800d00a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfe6:	4a7e      	ldr	r2, [pc, #504]	@ (800d1e0 <HAL_UART_IRQHandler+0x3e0>)
 800cfe8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfee:	4618      	mov	r0, r3
 800cff0:	f7fc ffc4 	bl	8009f7c <HAL_DMA_Abort_IT>
 800cff4:	4603      	mov	r3, r0
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d016      	beq.n	800d028 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d000:	687a      	ldr	r2, [r7, #4]
 800d002:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d004:	4610      	mov	r0, r2
 800d006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d008:	e00e      	b.n	800d028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 f993 	bl	800d336 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d010:	e00a      	b.n	800d028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f000 f98f 	bl	800d336 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d018:	e006      	b.n	800d028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d01a:	6878      	ldr	r0, [r7, #4]
 800d01c:	f000 f98b 	bl	800d336 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800d026:	e175      	b.n	800d314 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d028:	bf00      	nop
    return;
 800d02a:	e173      	b.n	800d314 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d030:	2b01      	cmp	r3, #1
 800d032:	f040 814f 	bne.w	800d2d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d03a:	f003 0310 	and.w	r3, r3, #16
 800d03e:	2b00      	cmp	r3, #0
 800d040:	f000 8148 	beq.w	800d2d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d048:	f003 0310 	and.w	r3, r3, #16
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	f000 8141 	beq.w	800d2d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d052:	2300      	movs	r3, #0
 800d054:	60bb      	str	r3, [r7, #8]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	60bb      	str	r3, [r7, #8]
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	685b      	ldr	r3, [r3, #4]
 800d064:	60bb      	str	r3, [r7, #8]
 800d066:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	695b      	ldr	r3, [r3, #20]
 800d06e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d072:	2b00      	cmp	r3, #0
 800d074:	f000 80b6 	beq.w	800d1e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	685b      	ldr	r3, [r3, #4]
 800d080:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d084:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d088:	2b00      	cmp	r3, #0
 800d08a:	f000 8145 	beq.w	800d318 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d096:	429a      	cmp	r2, r3
 800d098:	f080 813e 	bcs.w	800d318 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d0a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0a8:	699b      	ldr	r3, [r3, #24]
 800d0aa:	2b20      	cmp	r3, #32
 800d0ac:	f000 8088 	beq.w	800d1c0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	330c      	adds	r3, #12
 800d0b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d0be:	e853 3f00 	ldrex	r3, [r3]
 800d0c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d0c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d0ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d0ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	330c      	adds	r3, #12
 800d0d8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d0dc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d0e0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0e4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d0e8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d0ec:	e841 2300 	strex	r3, r2, [r1]
 800d0f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d0f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d1d9      	bne.n	800d0b0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	3314      	adds	r3, #20
 800d102:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d104:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d106:	e853 3f00 	ldrex	r3, [r3]
 800d10a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d10c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d10e:	f023 0301 	bic.w	r3, r3, #1
 800d112:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	3314      	adds	r3, #20
 800d11c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d120:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d124:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d126:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d128:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d12c:	e841 2300 	strex	r3, r2, [r1]
 800d130:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d132:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d134:	2b00      	cmp	r3, #0
 800d136:	d1e1      	bne.n	800d0fc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	3314      	adds	r3, #20
 800d13e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d140:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d142:	e853 3f00 	ldrex	r3, [r3]
 800d146:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d148:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d14a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d14e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	3314      	adds	r3, #20
 800d158:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d15c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d15e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d160:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d162:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d164:	e841 2300 	strex	r3, r2, [r1]
 800d168:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d16a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d1e3      	bne.n	800d138 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2220      	movs	r2, #32
 800d174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2200      	movs	r2, #0
 800d17c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	330c      	adds	r3, #12
 800d184:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d188:	e853 3f00 	ldrex	r3, [r3]
 800d18c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d18e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d190:	f023 0310 	bic.w	r3, r3, #16
 800d194:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	330c      	adds	r3, #12
 800d19e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d1a2:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d1a4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d1a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d1aa:	e841 2300 	strex	r3, r2, [r1]
 800d1ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d1b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d1e3      	bne.n	800d17e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7fc fea3 	bl	8009f06 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2202      	movs	r2, #2
 800d1c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	1ad3      	subs	r3, r2, r3
 800d1d2:	b29b      	uxth	r3, r3
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f000 f8b6 	bl	800d348 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d1dc:	e09c      	b.n	800d318 <HAL_UART_IRQHandler+0x518>
 800d1de:	bf00      	nop
 800d1e0:	0800d571 	.word	0x0800d571
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	1ad3      	subs	r3, r2, r3
 800d1f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	f000 808e 	beq.w	800d31c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d204:	2b00      	cmp	r3, #0
 800d206:	f000 8089 	beq.w	800d31c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	330c      	adds	r3, #12
 800d210:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d214:	e853 3f00 	ldrex	r3, [r3]
 800d218:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d21a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d21c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d220:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	330c      	adds	r3, #12
 800d22a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d22e:	647a      	str	r2, [r7, #68]	@ 0x44
 800d230:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d232:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d234:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d236:	e841 2300 	strex	r3, r2, [r1]
 800d23a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d23c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d1e3      	bne.n	800d20a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	3314      	adds	r3, #20
 800d248:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d24c:	e853 3f00 	ldrex	r3, [r3]
 800d250:	623b      	str	r3, [r7, #32]
   return(result);
 800d252:	6a3b      	ldr	r3, [r7, #32]
 800d254:	f023 0301 	bic.w	r3, r3, #1
 800d258:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	3314      	adds	r3, #20
 800d262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d266:	633a      	str	r2, [r7, #48]	@ 0x30
 800d268:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d26a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d26c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d26e:	e841 2300 	strex	r3, r2, [r1]
 800d272:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d276:	2b00      	cmp	r3, #0
 800d278:	d1e3      	bne.n	800d242 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2220      	movs	r2, #32
 800d27e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2200      	movs	r2, #0
 800d286:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	330c      	adds	r3, #12
 800d28e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d290:	693b      	ldr	r3, [r7, #16]
 800d292:	e853 3f00 	ldrex	r3, [r3]
 800d296:	60fb      	str	r3, [r7, #12]
   return(result);
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f023 0310 	bic.w	r3, r3, #16
 800d29e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	330c      	adds	r3, #12
 800d2a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d2ac:	61fa      	str	r2, [r7, #28]
 800d2ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2b0:	69b9      	ldr	r1, [r7, #24]
 800d2b2:	69fa      	ldr	r2, [r7, #28]
 800d2b4:	e841 2300 	strex	r3, r2, [r1]
 800d2b8:	617b      	str	r3, [r7, #20]
   return(result);
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1e3      	bne.n	800d288 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2202      	movs	r2, #2
 800d2c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d2c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 f83b 	bl	800d348 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d2d2:	e023      	b.n	800d31c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d2d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d009      	beq.n	800d2f4 <HAL_UART_IRQHandler+0x4f4>
 800d2e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d2e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d003      	beq.n	800d2f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d2ec:	6878      	ldr	r0, [r7, #4]
 800d2ee:	f000 f953 	bl	800d598 <UART_Transmit_IT>
    return;
 800d2f2:	e014      	b.n	800d31e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d2f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d00e      	beq.n	800d31e <HAL_UART_IRQHandler+0x51e>
 800d300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d008      	beq.n	800d31e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 f992 	bl	800d636 <UART_EndTransmit_IT>
    return;
 800d312:	e004      	b.n	800d31e <HAL_UART_IRQHandler+0x51e>
    return;
 800d314:	bf00      	nop
 800d316:	e002      	b.n	800d31e <HAL_UART_IRQHandler+0x51e>
      return;
 800d318:	bf00      	nop
 800d31a:	e000      	b.n	800d31e <HAL_UART_IRQHandler+0x51e>
      return;
 800d31c:	bf00      	nop
  }
}
 800d31e:	37e8      	adds	r7, #232	@ 0xe8
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d324:	b480      	push	{r7}
 800d326:	b083      	sub	sp, #12
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d32c:	bf00      	nop
 800d32e:	370c      	adds	r7, #12
 800d330:	46bd      	mov	sp, r7
 800d332:	bc80      	pop	{r7}
 800d334:	4770      	bx	lr

0800d336 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d336:	b480      	push	{r7}
 800d338:	b083      	sub	sp, #12
 800d33a:	af00      	add	r7, sp, #0
 800d33c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d33e:	bf00      	nop
 800d340:	370c      	adds	r7, #12
 800d342:	46bd      	mov	sp, r7
 800d344:	bc80      	pop	{r7}
 800d346:	4770      	bx	lr

0800d348 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d348:	b480      	push	{r7}
 800d34a:	b083      	sub	sp, #12
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	460b      	mov	r3, r1
 800d352:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d354:	bf00      	nop
 800d356:	370c      	adds	r7, #12
 800d358:	46bd      	mov	sp, r7
 800d35a:	bc80      	pop	{r7}
 800d35c:	4770      	bx	lr

0800d35e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b090      	sub	sp, #64	@ 0x40
 800d362:	af00      	add	r7, sp, #0
 800d364:	60f8      	str	r0, [r7, #12]
 800d366:	60b9      	str	r1, [r7, #8]
 800d368:	603b      	str	r3, [r7, #0]
 800d36a:	4613      	mov	r3, r2
 800d36c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d36e:	e050      	b.n	800d412 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d370:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d372:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d376:	d04c      	beq.n	800d412 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800d378:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d007      	beq.n	800d38e <UART_WaitOnFlagUntilTimeout+0x30>
 800d37e:	f7fc fb8b 	bl	8009a98 <HAL_GetTick>
 800d382:	4602      	mov	r2, r0
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	1ad3      	subs	r3, r2, r3
 800d388:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d241      	bcs.n	800d412 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	330c      	adds	r3, #12
 800d394:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d398:	e853 3f00 	ldrex	r3, [r3]
 800d39c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d39e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800d3a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	330c      	adds	r3, #12
 800d3ac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d3ae:	637a      	str	r2, [r7, #52]	@ 0x34
 800d3b0:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3b2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800d3b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d3b6:	e841 2300 	strex	r3, r2, [r1]
 800d3ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800d3bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d1e5      	bne.n	800d38e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	3314      	adds	r3, #20
 800d3c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	e853 3f00 	ldrex	r3, [r3]
 800d3d0:	613b      	str	r3, [r7, #16]
   return(result);
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	f023 0301 	bic.w	r3, r3, #1
 800d3d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	3314      	adds	r3, #20
 800d3e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d3e2:	623a      	str	r2, [r7, #32]
 800d3e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3e6:	69f9      	ldr	r1, [r7, #28]
 800d3e8:	6a3a      	ldr	r2, [r7, #32]
 800d3ea:	e841 2300 	strex	r3, r2, [r1]
 800d3ee:	61bb      	str	r3, [r7, #24]
   return(result);
 800d3f0:	69bb      	ldr	r3, [r7, #24]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d1e5      	bne.n	800d3c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2220      	movs	r2, #32
 800d3fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2220      	movs	r2, #32
 800d402:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	2200      	movs	r2, #0
 800d40a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800d40e:	2303      	movs	r3, #3
 800d410:	e00f      	b.n	800d432 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	681a      	ldr	r2, [r3, #0]
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	4013      	ands	r3, r2
 800d41c:	68ba      	ldr	r2, [r7, #8]
 800d41e:	429a      	cmp	r2, r3
 800d420:	bf0c      	ite	eq
 800d422:	2301      	moveq	r3, #1
 800d424:	2300      	movne	r3, #0
 800d426:	b2db      	uxtb	r3, r3
 800d428:	461a      	mov	r2, r3
 800d42a:	79fb      	ldrb	r3, [r7, #7]
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d09f      	beq.n	800d370 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d430:	2300      	movs	r3, #0
}
 800d432:	4618      	mov	r0, r3
 800d434:	3740      	adds	r7, #64	@ 0x40
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}

0800d43a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d43a:	b480      	push	{r7}
 800d43c:	b085      	sub	sp, #20
 800d43e:	af00      	add	r7, sp, #0
 800d440:	60f8      	str	r0, [r7, #12]
 800d442:	60b9      	str	r1, [r7, #8]
 800d444:	4613      	mov	r3, r2
 800d446:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	68ba      	ldr	r2, [r7, #8]
 800d44c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	88fa      	ldrh	r2, [r7, #6]
 800d452:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	88fa      	ldrh	r2, [r7, #6]
 800d458:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2200      	movs	r2, #0
 800d45e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2222      	movs	r2, #34	@ 0x22
 800d464:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	691b      	ldr	r3, [r3, #16]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d007      	beq.n	800d480 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	68da      	ldr	r2, [r3, #12]
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d47e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	695a      	ldr	r2, [r3, #20]
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	f042 0201 	orr.w	r2, r2, #1
 800d48e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	68da      	ldr	r2, [r3, #12]
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f042 0220 	orr.w	r2, r2, #32
 800d49e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d4a0:	2300      	movs	r3, #0
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3714      	adds	r7, #20
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bc80      	pop	{r7}
 800d4aa:	4770      	bx	lr

0800d4ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b095      	sub	sp, #84	@ 0x54
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	330c      	adds	r3, #12
 800d4ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4be:	e853 3f00 	ldrex	r3, [r3]
 800d4c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d4ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	330c      	adds	r3, #12
 800d4d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d4d4:	643a      	str	r2, [r7, #64]	@ 0x40
 800d4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d4da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d4dc:	e841 2300 	strex	r3, r2, [r1]
 800d4e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d1e5      	bne.n	800d4b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	3314      	adds	r3, #20
 800d4ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4f0:	6a3b      	ldr	r3, [r7, #32]
 800d4f2:	e853 3f00 	ldrex	r3, [r3]
 800d4f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	f023 0301 	bic.w	r3, r3, #1
 800d4fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	3314      	adds	r3, #20
 800d506:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d508:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d50a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d50c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d50e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d510:	e841 2300 	strex	r3, r2, [r1]
 800d514:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d1e5      	bne.n	800d4e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d520:	2b01      	cmp	r3, #1
 800d522:	d119      	bne.n	800d558 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	330c      	adds	r3, #12
 800d52a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	e853 3f00 	ldrex	r3, [r3]
 800d532:	60bb      	str	r3, [r7, #8]
   return(result);
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	f023 0310 	bic.w	r3, r3, #16
 800d53a:	647b      	str	r3, [r7, #68]	@ 0x44
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	330c      	adds	r3, #12
 800d542:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d544:	61ba      	str	r2, [r7, #24]
 800d546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d548:	6979      	ldr	r1, [r7, #20]
 800d54a:	69ba      	ldr	r2, [r7, #24]
 800d54c:	e841 2300 	strex	r3, r2, [r1]
 800d550:	613b      	str	r3, [r7, #16]
   return(result);
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d1e5      	bne.n	800d524 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2220      	movs	r2, #32
 800d55c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2200      	movs	r2, #0
 800d564:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d566:	bf00      	nop
 800d568:	3754      	adds	r7, #84	@ 0x54
 800d56a:	46bd      	mov	sp, r7
 800d56c:	bc80      	pop	{r7}
 800d56e:	4770      	bx	lr

0800d570 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d57c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	2200      	movs	r2, #0
 800d582:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2200      	movs	r2, #0
 800d588:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d58a:	68f8      	ldr	r0, [r7, #12]
 800d58c:	f7ff fed3 	bl	800d336 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d590:	bf00      	nop
 800d592:	3710      	adds	r7, #16
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d598:	b480      	push	{r7}
 800d59a:	b085      	sub	sp, #20
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d5a6:	b2db      	uxtb	r3, r3
 800d5a8:	2b21      	cmp	r3, #33	@ 0x21
 800d5aa:	d13e      	bne.n	800d62a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	689b      	ldr	r3, [r3, #8]
 800d5b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5b4:	d114      	bne.n	800d5e0 <UART_Transmit_IT+0x48>
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	691b      	ldr	r3, [r3, #16]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d110      	bne.n	800d5e0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	6a1b      	ldr	r3, [r3, #32]
 800d5c2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	881b      	ldrh	r3, [r3, #0]
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d5d2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6a1b      	ldr	r3, [r3, #32]
 800d5d8:	1c9a      	adds	r2, r3, #2
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	621a      	str	r2, [r3, #32]
 800d5de:	e008      	b.n	800d5f2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6a1b      	ldr	r3, [r3, #32]
 800d5e4:	1c59      	adds	r1, r3, #1
 800d5e6:	687a      	ldr	r2, [r7, #4]
 800d5e8:	6211      	str	r1, [r2, #32]
 800d5ea:	781a      	ldrb	r2, [r3, #0]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d5f6:	b29b      	uxth	r3, r3
 800d5f8:	3b01      	subs	r3, #1
 800d5fa:	b29b      	uxth	r3, r3
 800d5fc:	687a      	ldr	r2, [r7, #4]
 800d5fe:	4619      	mov	r1, r3
 800d600:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d602:	2b00      	cmp	r3, #0
 800d604:	d10f      	bne.n	800d626 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	68da      	ldr	r2, [r3, #12]
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d614:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	68da      	ldr	r2, [r3, #12]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d624:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d626:	2300      	movs	r3, #0
 800d628:	e000      	b.n	800d62c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d62a:	2302      	movs	r3, #2
  }
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3714      	adds	r7, #20
 800d630:	46bd      	mov	sp, r7
 800d632:	bc80      	pop	{r7}
 800d634:	4770      	bx	lr

0800d636 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d636:	b580      	push	{r7, lr}
 800d638:	b082      	sub	sp, #8
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	68da      	ldr	r2, [r3, #12]
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d64c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	2220      	movs	r2, #32
 800d652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f7ff fe64 	bl	800d324 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d65c:	2300      	movs	r3, #0
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3708      	adds	r7, #8
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}

0800d666 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b08c      	sub	sp, #48	@ 0x30
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d674:	b2db      	uxtb	r3, r3
 800d676:	2b22      	cmp	r3, #34	@ 0x22
 800d678:	f040 80ae 	bne.w	800d7d8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	689b      	ldr	r3, [r3, #8]
 800d680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d684:	d117      	bne.n	800d6b6 <UART_Receive_IT+0x50>
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	691b      	ldr	r3, [r3, #16]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d113      	bne.n	800d6b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d68e:	2300      	movs	r3, #0
 800d690:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d696:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	685b      	ldr	r3, [r3, #4]
 800d69e:	b29b      	uxth	r3, r3
 800d6a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6a4:	b29a      	uxth	r2, r3
 800d6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6ae:	1c9a      	adds	r2, r3, #2
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	629a      	str	r2, [r3, #40]	@ 0x28
 800d6b4:	e026      	b.n	800d704 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800d6bc:	2300      	movs	r3, #0
 800d6be:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	689b      	ldr	r3, [r3, #8]
 800d6c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d6c8:	d007      	beq.n	800d6da <UART_Receive_IT+0x74>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	689b      	ldr	r3, [r3, #8]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d10a      	bne.n	800d6e8 <UART_Receive_IT+0x82>
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	691b      	ldr	r3, [r3, #16]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d106      	bne.n	800d6e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	685b      	ldr	r3, [r3, #4]
 800d6e0:	b2da      	uxtb	r2, r3
 800d6e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6e4:	701a      	strb	r2, [r3, #0]
 800d6e6:	e008      	b.n	800d6fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	685b      	ldr	r3, [r3, #4]
 800d6ee:	b2db      	uxtb	r3, r3
 800d6f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d6f4:	b2da      	uxtb	r2, r3
 800d6f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d6f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6fe:	1c5a      	adds	r2, r3, #1
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d708:	b29b      	uxth	r3, r3
 800d70a:	3b01      	subs	r3, #1
 800d70c:	b29b      	uxth	r3, r3
 800d70e:	687a      	ldr	r2, [r7, #4]
 800d710:	4619      	mov	r1, r3
 800d712:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d714:	2b00      	cmp	r3, #0
 800d716:	d15d      	bne.n	800d7d4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	68da      	ldr	r2, [r3, #12]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f022 0220 	bic.w	r2, r2, #32
 800d726:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	68da      	ldr	r2, [r3, #12]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d736:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	695a      	ldr	r2, [r3, #20]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	f022 0201 	bic.w	r2, r2, #1
 800d746:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	2220      	movs	r2, #32
 800d74c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2200      	movs	r2, #0
 800d754:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d75a:	2b01      	cmp	r3, #1
 800d75c:	d135      	bne.n	800d7ca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2200      	movs	r2, #0
 800d762:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	330c      	adds	r3, #12
 800d76a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	e853 3f00 	ldrex	r3, [r3]
 800d772:	613b      	str	r3, [r7, #16]
   return(result);
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	f023 0310 	bic.w	r3, r3, #16
 800d77a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	330c      	adds	r3, #12
 800d782:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d784:	623a      	str	r2, [r7, #32]
 800d786:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d788:	69f9      	ldr	r1, [r7, #28]
 800d78a:	6a3a      	ldr	r2, [r7, #32]
 800d78c:	e841 2300 	strex	r3, r2, [r1]
 800d790:	61bb      	str	r3, [r7, #24]
   return(result);
 800d792:	69bb      	ldr	r3, [r7, #24]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d1e5      	bne.n	800d764 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f003 0310 	and.w	r3, r3, #16
 800d7a2:	2b10      	cmp	r3, #16
 800d7a4:	d10a      	bne.n	800d7bc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	60fb      	str	r3, [r7, #12]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	60fb      	str	r3, [r7, #12]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	685b      	ldr	r3, [r3, #4]
 800d7b8:	60fb      	str	r3, [r7, #12]
 800d7ba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f7ff fdc0 	bl	800d348 <HAL_UARTEx_RxEventCallback>
 800d7c8:	e002      	b.n	800d7d0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d7ca:	6878      	ldr	r0, [r7, #4]
 800d7cc:	f7fb fc7e 	bl	80090cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	e002      	b.n	800d7da <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	e000      	b.n	800d7da <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d7d8:	2302      	movs	r3, #2
  }
}
 800d7da:	4618      	mov	r0, r3
 800d7dc:	3730      	adds	r7, #48	@ 0x30
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}
	...

0800d7e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	691b      	ldr	r3, [r3, #16]
 800d7f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	68da      	ldr	r2, [r3, #12]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	430a      	orrs	r2, r1
 800d800:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	689a      	ldr	r2, [r3, #8]
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	691b      	ldr	r3, [r3, #16]
 800d80a:	431a      	orrs	r2, r3
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	695b      	ldr	r3, [r3, #20]
 800d810:	4313      	orrs	r3, r2
 800d812:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	68db      	ldr	r3, [r3, #12]
 800d81a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800d81e:	f023 030c 	bic.w	r3, r3, #12
 800d822:	687a      	ldr	r2, [r7, #4]
 800d824:	6812      	ldr	r2, [r2, #0]
 800d826:	68b9      	ldr	r1, [r7, #8]
 800d828:	430b      	orrs	r3, r1
 800d82a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	695b      	ldr	r3, [r3, #20]
 800d832:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	699a      	ldr	r2, [r3, #24]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	430a      	orrs	r2, r1
 800d840:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4a2c      	ldr	r2, [pc, #176]	@ (800d8f8 <UART_SetConfig+0x114>)
 800d848:	4293      	cmp	r3, r2
 800d84a:	d103      	bne.n	800d854 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800d84c:	f7fe fd46 	bl	800c2dc <HAL_RCC_GetPCLK2Freq>
 800d850:	60f8      	str	r0, [r7, #12]
 800d852:	e002      	b.n	800d85a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800d854:	f7fe fd2e 	bl	800c2b4 <HAL_RCC_GetPCLK1Freq>
 800d858:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d85a:	68fa      	ldr	r2, [r7, #12]
 800d85c:	4613      	mov	r3, r2
 800d85e:	009b      	lsls	r3, r3, #2
 800d860:	4413      	add	r3, r2
 800d862:	009a      	lsls	r2, r3, #2
 800d864:	441a      	add	r2, r3
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	685b      	ldr	r3, [r3, #4]
 800d86a:	009b      	lsls	r3, r3, #2
 800d86c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d870:	4a22      	ldr	r2, [pc, #136]	@ (800d8fc <UART_SetConfig+0x118>)
 800d872:	fba2 2303 	umull	r2, r3, r2, r3
 800d876:	095b      	lsrs	r3, r3, #5
 800d878:	0119      	lsls	r1, r3, #4
 800d87a:	68fa      	ldr	r2, [r7, #12]
 800d87c:	4613      	mov	r3, r2
 800d87e:	009b      	lsls	r3, r3, #2
 800d880:	4413      	add	r3, r2
 800d882:	009a      	lsls	r2, r3, #2
 800d884:	441a      	add	r2, r3
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	685b      	ldr	r3, [r3, #4]
 800d88a:	009b      	lsls	r3, r3, #2
 800d88c:	fbb2 f2f3 	udiv	r2, r2, r3
 800d890:	4b1a      	ldr	r3, [pc, #104]	@ (800d8fc <UART_SetConfig+0x118>)
 800d892:	fba3 0302 	umull	r0, r3, r3, r2
 800d896:	095b      	lsrs	r3, r3, #5
 800d898:	2064      	movs	r0, #100	@ 0x64
 800d89a:	fb00 f303 	mul.w	r3, r0, r3
 800d89e:	1ad3      	subs	r3, r2, r3
 800d8a0:	011b      	lsls	r3, r3, #4
 800d8a2:	3332      	adds	r3, #50	@ 0x32
 800d8a4:	4a15      	ldr	r2, [pc, #84]	@ (800d8fc <UART_SetConfig+0x118>)
 800d8a6:	fba2 2303 	umull	r2, r3, r2, r3
 800d8aa:	095b      	lsrs	r3, r3, #5
 800d8ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d8b0:	4419      	add	r1, r3
 800d8b2:	68fa      	ldr	r2, [r7, #12]
 800d8b4:	4613      	mov	r3, r2
 800d8b6:	009b      	lsls	r3, r3, #2
 800d8b8:	4413      	add	r3, r2
 800d8ba:	009a      	lsls	r2, r3, #2
 800d8bc:	441a      	add	r2, r3
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	685b      	ldr	r3, [r3, #4]
 800d8c2:	009b      	lsls	r3, r3, #2
 800d8c4:	fbb2 f2f3 	udiv	r2, r2, r3
 800d8c8:	4b0c      	ldr	r3, [pc, #48]	@ (800d8fc <UART_SetConfig+0x118>)
 800d8ca:	fba3 0302 	umull	r0, r3, r3, r2
 800d8ce:	095b      	lsrs	r3, r3, #5
 800d8d0:	2064      	movs	r0, #100	@ 0x64
 800d8d2:	fb00 f303 	mul.w	r3, r0, r3
 800d8d6:	1ad3      	subs	r3, r2, r3
 800d8d8:	011b      	lsls	r3, r3, #4
 800d8da:	3332      	adds	r3, #50	@ 0x32
 800d8dc:	4a07      	ldr	r2, [pc, #28]	@ (800d8fc <UART_SetConfig+0x118>)
 800d8de:	fba2 2303 	umull	r2, r3, r2, r3
 800d8e2:	095b      	lsrs	r3, r3, #5
 800d8e4:	f003 020f 	and.w	r2, r3, #15
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	440a      	add	r2, r1
 800d8ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800d8f0:	bf00      	nop
 800d8f2:	3710      	adds	r7, #16
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	40013800 	.word	0x40013800
 800d8fc:	51eb851f 	.word	0x51eb851f

0800d900 <__itoa>:
 800d900:	1e93      	subs	r3, r2, #2
 800d902:	2b22      	cmp	r3, #34	@ 0x22
 800d904:	b510      	push	{r4, lr}
 800d906:	460c      	mov	r4, r1
 800d908:	d904      	bls.n	800d914 <__itoa+0x14>
 800d90a:	2300      	movs	r3, #0
 800d90c:	461c      	mov	r4, r3
 800d90e:	700b      	strb	r3, [r1, #0]
 800d910:	4620      	mov	r0, r4
 800d912:	bd10      	pop	{r4, pc}
 800d914:	2a0a      	cmp	r2, #10
 800d916:	d109      	bne.n	800d92c <__itoa+0x2c>
 800d918:	2800      	cmp	r0, #0
 800d91a:	da07      	bge.n	800d92c <__itoa+0x2c>
 800d91c:	232d      	movs	r3, #45	@ 0x2d
 800d91e:	700b      	strb	r3, [r1, #0]
 800d920:	2101      	movs	r1, #1
 800d922:	4240      	negs	r0, r0
 800d924:	4421      	add	r1, r4
 800d926:	f000 f8bb 	bl	800daa0 <__utoa>
 800d92a:	e7f1      	b.n	800d910 <__itoa+0x10>
 800d92c:	2100      	movs	r1, #0
 800d92e:	e7f9      	b.n	800d924 <__itoa+0x24>

0800d930 <itoa>:
 800d930:	f7ff bfe6 	b.w	800d900 <__itoa>

0800d934 <malloc>:
 800d934:	4b02      	ldr	r3, [pc, #8]	@ (800d940 <malloc+0xc>)
 800d936:	4601      	mov	r1, r0
 800d938:	6818      	ldr	r0, [r3, #0]
 800d93a:	f000 b825 	b.w	800d988 <_malloc_r>
 800d93e:	bf00      	nop
 800d940:	20000f80 	.word	0x20000f80

0800d944 <sbrk_aligned>:
 800d944:	b570      	push	{r4, r5, r6, lr}
 800d946:	4e0f      	ldr	r6, [pc, #60]	@ (800d984 <sbrk_aligned+0x40>)
 800d948:	460c      	mov	r4, r1
 800d94a:	6831      	ldr	r1, [r6, #0]
 800d94c:	4605      	mov	r5, r0
 800d94e:	b911      	cbnz	r1, 800d956 <sbrk_aligned+0x12>
 800d950:	f000 f932 	bl	800dbb8 <_sbrk_r>
 800d954:	6030      	str	r0, [r6, #0]
 800d956:	4621      	mov	r1, r4
 800d958:	4628      	mov	r0, r5
 800d95a:	f000 f92d 	bl	800dbb8 <_sbrk_r>
 800d95e:	1c43      	adds	r3, r0, #1
 800d960:	d103      	bne.n	800d96a <sbrk_aligned+0x26>
 800d962:	f04f 34ff 	mov.w	r4, #4294967295
 800d966:	4620      	mov	r0, r4
 800d968:	bd70      	pop	{r4, r5, r6, pc}
 800d96a:	1cc4      	adds	r4, r0, #3
 800d96c:	f024 0403 	bic.w	r4, r4, #3
 800d970:	42a0      	cmp	r0, r4
 800d972:	d0f8      	beq.n	800d966 <sbrk_aligned+0x22>
 800d974:	1a21      	subs	r1, r4, r0
 800d976:	4628      	mov	r0, r5
 800d978:	f000 f91e 	bl	800dbb8 <_sbrk_r>
 800d97c:	3001      	adds	r0, #1
 800d97e:	d1f2      	bne.n	800d966 <sbrk_aligned+0x22>
 800d980:	e7ef      	b.n	800d962 <sbrk_aligned+0x1e>
 800d982:	bf00      	nop
 800d984:	20001e28 	.word	0x20001e28

0800d988 <_malloc_r>:
 800d988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d98c:	1ccd      	adds	r5, r1, #3
 800d98e:	f025 0503 	bic.w	r5, r5, #3
 800d992:	3508      	adds	r5, #8
 800d994:	2d0c      	cmp	r5, #12
 800d996:	bf38      	it	cc
 800d998:	250c      	movcc	r5, #12
 800d99a:	2d00      	cmp	r5, #0
 800d99c:	4606      	mov	r6, r0
 800d99e:	db01      	blt.n	800d9a4 <_malloc_r+0x1c>
 800d9a0:	42a9      	cmp	r1, r5
 800d9a2:	d904      	bls.n	800d9ae <_malloc_r+0x26>
 800d9a4:	230c      	movs	r3, #12
 800d9a6:	6033      	str	r3, [r6, #0]
 800d9a8:	2000      	movs	r0, #0
 800d9aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800da84 <_malloc_r+0xfc>
 800d9b2:	f000 f869 	bl	800da88 <__malloc_lock>
 800d9b6:	f8d8 3000 	ldr.w	r3, [r8]
 800d9ba:	461c      	mov	r4, r3
 800d9bc:	bb44      	cbnz	r4, 800da10 <_malloc_r+0x88>
 800d9be:	4629      	mov	r1, r5
 800d9c0:	4630      	mov	r0, r6
 800d9c2:	f7ff ffbf 	bl	800d944 <sbrk_aligned>
 800d9c6:	1c43      	adds	r3, r0, #1
 800d9c8:	4604      	mov	r4, r0
 800d9ca:	d158      	bne.n	800da7e <_malloc_r+0xf6>
 800d9cc:	f8d8 4000 	ldr.w	r4, [r8]
 800d9d0:	4627      	mov	r7, r4
 800d9d2:	2f00      	cmp	r7, #0
 800d9d4:	d143      	bne.n	800da5e <_malloc_r+0xd6>
 800d9d6:	2c00      	cmp	r4, #0
 800d9d8:	d04b      	beq.n	800da72 <_malloc_r+0xea>
 800d9da:	6823      	ldr	r3, [r4, #0]
 800d9dc:	4639      	mov	r1, r7
 800d9de:	4630      	mov	r0, r6
 800d9e0:	eb04 0903 	add.w	r9, r4, r3
 800d9e4:	f000 f8e8 	bl	800dbb8 <_sbrk_r>
 800d9e8:	4581      	cmp	r9, r0
 800d9ea:	d142      	bne.n	800da72 <_malloc_r+0xea>
 800d9ec:	6821      	ldr	r1, [r4, #0]
 800d9ee:	4630      	mov	r0, r6
 800d9f0:	1a6d      	subs	r5, r5, r1
 800d9f2:	4629      	mov	r1, r5
 800d9f4:	f7ff ffa6 	bl	800d944 <sbrk_aligned>
 800d9f8:	3001      	adds	r0, #1
 800d9fa:	d03a      	beq.n	800da72 <_malloc_r+0xea>
 800d9fc:	6823      	ldr	r3, [r4, #0]
 800d9fe:	442b      	add	r3, r5
 800da00:	6023      	str	r3, [r4, #0]
 800da02:	f8d8 3000 	ldr.w	r3, [r8]
 800da06:	685a      	ldr	r2, [r3, #4]
 800da08:	bb62      	cbnz	r2, 800da64 <_malloc_r+0xdc>
 800da0a:	f8c8 7000 	str.w	r7, [r8]
 800da0e:	e00f      	b.n	800da30 <_malloc_r+0xa8>
 800da10:	6822      	ldr	r2, [r4, #0]
 800da12:	1b52      	subs	r2, r2, r5
 800da14:	d420      	bmi.n	800da58 <_malloc_r+0xd0>
 800da16:	2a0b      	cmp	r2, #11
 800da18:	d917      	bls.n	800da4a <_malloc_r+0xc2>
 800da1a:	1961      	adds	r1, r4, r5
 800da1c:	42a3      	cmp	r3, r4
 800da1e:	6025      	str	r5, [r4, #0]
 800da20:	bf18      	it	ne
 800da22:	6059      	strne	r1, [r3, #4]
 800da24:	6863      	ldr	r3, [r4, #4]
 800da26:	bf08      	it	eq
 800da28:	f8c8 1000 	streq.w	r1, [r8]
 800da2c:	5162      	str	r2, [r4, r5]
 800da2e:	604b      	str	r3, [r1, #4]
 800da30:	4630      	mov	r0, r6
 800da32:	f000 f82f 	bl	800da94 <__malloc_unlock>
 800da36:	f104 000b 	add.w	r0, r4, #11
 800da3a:	1d23      	adds	r3, r4, #4
 800da3c:	f020 0007 	bic.w	r0, r0, #7
 800da40:	1ac2      	subs	r2, r0, r3
 800da42:	bf1c      	itt	ne
 800da44:	1a1b      	subne	r3, r3, r0
 800da46:	50a3      	strne	r3, [r4, r2]
 800da48:	e7af      	b.n	800d9aa <_malloc_r+0x22>
 800da4a:	6862      	ldr	r2, [r4, #4]
 800da4c:	42a3      	cmp	r3, r4
 800da4e:	bf0c      	ite	eq
 800da50:	f8c8 2000 	streq.w	r2, [r8]
 800da54:	605a      	strne	r2, [r3, #4]
 800da56:	e7eb      	b.n	800da30 <_malloc_r+0xa8>
 800da58:	4623      	mov	r3, r4
 800da5a:	6864      	ldr	r4, [r4, #4]
 800da5c:	e7ae      	b.n	800d9bc <_malloc_r+0x34>
 800da5e:	463c      	mov	r4, r7
 800da60:	687f      	ldr	r7, [r7, #4]
 800da62:	e7b6      	b.n	800d9d2 <_malloc_r+0x4a>
 800da64:	461a      	mov	r2, r3
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	42a3      	cmp	r3, r4
 800da6a:	d1fb      	bne.n	800da64 <_malloc_r+0xdc>
 800da6c:	2300      	movs	r3, #0
 800da6e:	6053      	str	r3, [r2, #4]
 800da70:	e7de      	b.n	800da30 <_malloc_r+0xa8>
 800da72:	230c      	movs	r3, #12
 800da74:	4630      	mov	r0, r6
 800da76:	6033      	str	r3, [r6, #0]
 800da78:	f000 f80c 	bl	800da94 <__malloc_unlock>
 800da7c:	e794      	b.n	800d9a8 <_malloc_r+0x20>
 800da7e:	6005      	str	r5, [r0, #0]
 800da80:	e7d6      	b.n	800da30 <_malloc_r+0xa8>
 800da82:	bf00      	nop
 800da84:	20001e2c 	.word	0x20001e2c

0800da88 <__malloc_lock>:
 800da88:	4801      	ldr	r0, [pc, #4]	@ (800da90 <__malloc_lock+0x8>)
 800da8a:	f000 b8cf 	b.w	800dc2c <__retarget_lock_acquire_recursive>
 800da8e:	bf00      	nop
 800da90:	20001f6c 	.word	0x20001f6c

0800da94 <__malloc_unlock>:
 800da94:	4801      	ldr	r0, [pc, #4]	@ (800da9c <__malloc_unlock+0x8>)
 800da96:	f000 b8ca 	b.w	800dc2e <__retarget_lock_release_recursive>
 800da9a:	bf00      	nop
 800da9c:	20001f6c 	.word	0x20001f6c

0800daa0 <__utoa>:
 800daa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daa2:	b08b      	sub	sp, #44	@ 0x2c
 800daa4:	4605      	mov	r5, r0
 800daa6:	460b      	mov	r3, r1
 800daa8:	466e      	mov	r6, sp
 800daaa:	4c1d      	ldr	r4, [pc, #116]	@ (800db20 <__utoa+0x80>)
 800daac:	f104 0c20 	add.w	ip, r4, #32
 800dab0:	4637      	mov	r7, r6
 800dab2:	6820      	ldr	r0, [r4, #0]
 800dab4:	6861      	ldr	r1, [r4, #4]
 800dab6:	3408      	adds	r4, #8
 800dab8:	c703      	stmia	r7!, {r0, r1}
 800daba:	4564      	cmp	r4, ip
 800dabc:	463e      	mov	r6, r7
 800dabe:	d1f7      	bne.n	800dab0 <__utoa+0x10>
 800dac0:	7921      	ldrb	r1, [r4, #4]
 800dac2:	6820      	ldr	r0, [r4, #0]
 800dac4:	7139      	strb	r1, [r7, #4]
 800dac6:	1e91      	subs	r1, r2, #2
 800dac8:	2922      	cmp	r1, #34	@ 0x22
 800daca:	6038      	str	r0, [r7, #0]
 800dacc:	f04f 0100 	mov.w	r1, #0
 800dad0:	d904      	bls.n	800dadc <__utoa+0x3c>
 800dad2:	7019      	strb	r1, [r3, #0]
 800dad4:	460b      	mov	r3, r1
 800dad6:	4618      	mov	r0, r3
 800dad8:	b00b      	add	sp, #44	@ 0x2c
 800dada:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dadc:	1e58      	subs	r0, r3, #1
 800dade:	4684      	mov	ip, r0
 800dae0:	fbb5 f7f2 	udiv	r7, r5, r2
 800dae4:	fb02 5617 	mls	r6, r2, r7, r5
 800dae8:	3628      	adds	r6, #40	@ 0x28
 800daea:	446e      	add	r6, sp
 800daec:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800daf0:	460c      	mov	r4, r1
 800daf2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800daf6:	462e      	mov	r6, r5
 800daf8:	42b2      	cmp	r2, r6
 800dafa:	463d      	mov	r5, r7
 800dafc:	f101 0101 	add.w	r1, r1, #1
 800db00:	d9ee      	bls.n	800dae0 <__utoa+0x40>
 800db02:	2200      	movs	r2, #0
 800db04:	545a      	strb	r2, [r3, r1]
 800db06:	1919      	adds	r1, r3, r4
 800db08:	1aa5      	subs	r5, r4, r2
 800db0a:	42aa      	cmp	r2, r5
 800db0c:	dae3      	bge.n	800dad6 <__utoa+0x36>
 800db0e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800db12:	780e      	ldrb	r6, [r1, #0]
 800db14:	3201      	adds	r2, #1
 800db16:	7006      	strb	r6, [r0, #0]
 800db18:	f801 5901 	strb.w	r5, [r1], #-1
 800db1c:	e7f4      	b.n	800db08 <__utoa+0x68>
 800db1e:	bf00      	nop
 800db20:	0800f116 	.word	0x0800f116

0800db24 <siprintf>:
 800db24:	b40e      	push	{r1, r2, r3}
 800db26:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800db2a:	b500      	push	{lr}
 800db2c:	b09c      	sub	sp, #112	@ 0x70
 800db2e:	ab1d      	add	r3, sp, #116	@ 0x74
 800db30:	9002      	str	r0, [sp, #8]
 800db32:	9006      	str	r0, [sp, #24]
 800db34:	9107      	str	r1, [sp, #28]
 800db36:	9104      	str	r1, [sp, #16]
 800db38:	4808      	ldr	r0, [pc, #32]	@ (800db5c <siprintf+0x38>)
 800db3a:	4909      	ldr	r1, [pc, #36]	@ (800db60 <siprintf+0x3c>)
 800db3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800db40:	9105      	str	r1, [sp, #20]
 800db42:	6800      	ldr	r0, [r0, #0]
 800db44:	a902      	add	r1, sp, #8
 800db46:	9301      	str	r3, [sp, #4]
 800db48:	f000 f91e 	bl	800dd88 <_svfiprintf_r>
 800db4c:	2200      	movs	r2, #0
 800db4e:	9b02      	ldr	r3, [sp, #8]
 800db50:	701a      	strb	r2, [r3, #0]
 800db52:	b01c      	add	sp, #112	@ 0x70
 800db54:	f85d eb04 	ldr.w	lr, [sp], #4
 800db58:	b003      	add	sp, #12
 800db5a:	4770      	bx	lr
 800db5c:	20000f80 	.word	0x20000f80
 800db60:	ffff0208 	.word	0xffff0208

0800db64 <memset>:
 800db64:	4603      	mov	r3, r0
 800db66:	4402      	add	r2, r0
 800db68:	4293      	cmp	r3, r2
 800db6a:	d100      	bne.n	800db6e <memset+0xa>
 800db6c:	4770      	bx	lr
 800db6e:	f803 1b01 	strb.w	r1, [r3], #1
 800db72:	e7f9      	b.n	800db68 <memset+0x4>

0800db74 <strcat>:
 800db74:	4602      	mov	r2, r0
 800db76:	b510      	push	{r4, lr}
 800db78:	7814      	ldrb	r4, [r2, #0]
 800db7a:	4613      	mov	r3, r2
 800db7c:	3201      	adds	r2, #1
 800db7e:	2c00      	cmp	r4, #0
 800db80:	d1fa      	bne.n	800db78 <strcat+0x4>
 800db82:	3b01      	subs	r3, #1
 800db84:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db88:	f803 2f01 	strb.w	r2, [r3, #1]!
 800db8c:	2a00      	cmp	r2, #0
 800db8e:	d1f9      	bne.n	800db84 <strcat+0x10>
 800db90:	bd10      	pop	{r4, pc}

0800db92 <strncpy>:
 800db92:	4603      	mov	r3, r0
 800db94:	b510      	push	{r4, lr}
 800db96:	3901      	subs	r1, #1
 800db98:	b132      	cbz	r2, 800dba8 <strncpy+0x16>
 800db9a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800db9e:	3a01      	subs	r2, #1
 800dba0:	f803 4b01 	strb.w	r4, [r3], #1
 800dba4:	2c00      	cmp	r4, #0
 800dba6:	d1f7      	bne.n	800db98 <strncpy+0x6>
 800dba8:	2100      	movs	r1, #0
 800dbaa:	441a      	add	r2, r3
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d100      	bne.n	800dbb2 <strncpy+0x20>
 800dbb0:	bd10      	pop	{r4, pc}
 800dbb2:	f803 1b01 	strb.w	r1, [r3], #1
 800dbb6:	e7f9      	b.n	800dbac <strncpy+0x1a>

0800dbb8 <_sbrk_r>:
 800dbb8:	b538      	push	{r3, r4, r5, lr}
 800dbba:	2300      	movs	r3, #0
 800dbbc:	4d05      	ldr	r5, [pc, #20]	@ (800dbd4 <_sbrk_r+0x1c>)
 800dbbe:	4604      	mov	r4, r0
 800dbc0:	4608      	mov	r0, r1
 800dbc2:	602b      	str	r3, [r5, #0]
 800dbc4:	f7fb feae 	bl	8009924 <_sbrk>
 800dbc8:	1c43      	adds	r3, r0, #1
 800dbca:	d102      	bne.n	800dbd2 <_sbrk_r+0x1a>
 800dbcc:	682b      	ldr	r3, [r5, #0]
 800dbce:	b103      	cbz	r3, 800dbd2 <_sbrk_r+0x1a>
 800dbd0:	6023      	str	r3, [r4, #0]
 800dbd2:	bd38      	pop	{r3, r4, r5, pc}
 800dbd4:	20001f68 	.word	0x20001f68

0800dbd8 <__errno>:
 800dbd8:	4b01      	ldr	r3, [pc, #4]	@ (800dbe0 <__errno+0x8>)
 800dbda:	6818      	ldr	r0, [r3, #0]
 800dbdc:	4770      	bx	lr
 800dbde:	bf00      	nop
 800dbe0:	20000f80 	.word	0x20000f80

0800dbe4 <__libc_init_array>:
 800dbe4:	b570      	push	{r4, r5, r6, lr}
 800dbe6:	2600      	movs	r6, #0
 800dbe8:	4d0c      	ldr	r5, [pc, #48]	@ (800dc1c <__libc_init_array+0x38>)
 800dbea:	4c0d      	ldr	r4, [pc, #52]	@ (800dc20 <__libc_init_array+0x3c>)
 800dbec:	1b64      	subs	r4, r4, r5
 800dbee:	10a4      	asrs	r4, r4, #2
 800dbf0:	42a6      	cmp	r6, r4
 800dbf2:	d109      	bne.n	800dc08 <__libc_init_array+0x24>
 800dbf4:	f000 fbc2 	bl	800e37c <_init>
 800dbf8:	2600      	movs	r6, #0
 800dbfa:	4d0a      	ldr	r5, [pc, #40]	@ (800dc24 <__libc_init_array+0x40>)
 800dbfc:	4c0a      	ldr	r4, [pc, #40]	@ (800dc28 <__libc_init_array+0x44>)
 800dbfe:	1b64      	subs	r4, r4, r5
 800dc00:	10a4      	asrs	r4, r4, #2
 800dc02:	42a6      	cmp	r6, r4
 800dc04:	d105      	bne.n	800dc12 <__libc_init_array+0x2e>
 800dc06:	bd70      	pop	{r4, r5, r6, pc}
 800dc08:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc0c:	4798      	blx	r3
 800dc0e:	3601      	adds	r6, #1
 800dc10:	e7ee      	b.n	800dbf0 <__libc_init_array+0xc>
 800dc12:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc16:	4798      	blx	r3
 800dc18:	3601      	adds	r6, #1
 800dc1a:	e7f2      	b.n	800dc02 <__libc_init_array+0x1e>
 800dc1c:	0800f178 	.word	0x0800f178
 800dc20:	0800f178 	.word	0x0800f178
 800dc24:	0800f178 	.word	0x0800f178
 800dc28:	0800f17c 	.word	0x0800f17c

0800dc2c <__retarget_lock_acquire_recursive>:
 800dc2c:	4770      	bx	lr

0800dc2e <__retarget_lock_release_recursive>:
 800dc2e:	4770      	bx	lr

0800dc30 <strcpy>:
 800dc30:	4603      	mov	r3, r0
 800dc32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc36:	f803 2b01 	strb.w	r2, [r3], #1
 800dc3a:	2a00      	cmp	r2, #0
 800dc3c:	d1f9      	bne.n	800dc32 <strcpy+0x2>
 800dc3e:	4770      	bx	lr

0800dc40 <_free_r>:
 800dc40:	b538      	push	{r3, r4, r5, lr}
 800dc42:	4605      	mov	r5, r0
 800dc44:	2900      	cmp	r1, #0
 800dc46:	d040      	beq.n	800dcca <_free_r+0x8a>
 800dc48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc4c:	1f0c      	subs	r4, r1, #4
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	bfb8      	it	lt
 800dc52:	18e4      	addlt	r4, r4, r3
 800dc54:	f7ff ff18 	bl	800da88 <__malloc_lock>
 800dc58:	4a1c      	ldr	r2, [pc, #112]	@ (800dccc <_free_r+0x8c>)
 800dc5a:	6813      	ldr	r3, [r2, #0]
 800dc5c:	b933      	cbnz	r3, 800dc6c <_free_r+0x2c>
 800dc5e:	6063      	str	r3, [r4, #4]
 800dc60:	6014      	str	r4, [r2, #0]
 800dc62:	4628      	mov	r0, r5
 800dc64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dc68:	f7ff bf14 	b.w	800da94 <__malloc_unlock>
 800dc6c:	42a3      	cmp	r3, r4
 800dc6e:	d908      	bls.n	800dc82 <_free_r+0x42>
 800dc70:	6820      	ldr	r0, [r4, #0]
 800dc72:	1821      	adds	r1, r4, r0
 800dc74:	428b      	cmp	r3, r1
 800dc76:	bf01      	itttt	eq
 800dc78:	6819      	ldreq	r1, [r3, #0]
 800dc7a:	685b      	ldreq	r3, [r3, #4]
 800dc7c:	1809      	addeq	r1, r1, r0
 800dc7e:	6021      	streq	r1, [r4, #0]
 800dc80:	e7ed      	b.n	800dc5e <_free_r+0x1e>
 800dc82:	461a      	mov	r2, r3
 800dc84:	685b      	ldr	r3, [r3, #4]
 800dc86:	b10b      	cbz	r3, 800dc8c <_free_r+0x4c>
 800dc88:	42a3      	cmp	r3, r4
 800dc8a:	d9fa      	bls.n	800dc82 <_free_r+0x42>
 800dc8c:	6811      	ldr	r1, [r2, #0]
 800dc8e:	1850      	adds	r0, r2, r1
 800dc90:	42a0      	cmp	r0, r4
 800dc92:	d10b      	bne.n	800dcac <_free_r+0x6c>
 800dc94:	6820      	ldr	r0, [r4, #0]
 800dc96:	4401      	add	r1, r0
 800dc98:	1850      	adds	r0, r2, r1
 800dc9a:	4283      	cmp	r3, r0
 800dc9c:	6011      	str	r1, [r2, #0]
 800dc9e:	d1e0      	bne.n	800dc62 <_free_r+0x22>
 800dca0:	6818      	ldr	r0, [r3, #0]
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	4408      	add	r0, r1
 800dca6:	6010      	str	r0, [r2, #0]
 800dca8:	6053      	str	r3, [r2, #4]
 800dcaa:	e7da      	b.n	800dc62 <_free_r+0x22>
 800dcac:	d902      	bls.n	800dcb4 <_free_r+0x74>
 800dcae:	230c      	movs	r3, #12
 800dcb0:	602b      	str	r3, [r5, #0]
 800dcb2:	e7d6      	b.n	800dc62 <_free_r+0x22>
 800dcb4:	6820      	ldr	r0, [r4, #0]
 800dcb6:	1821      	adds	r1, r4, r0
 800dcb8:	428b      	cmp	r3, r1
 800dcba:	bf01      	itttt	eq
 800dcbc:	6819      	ldreq	r1, [r3, #0]
 800dcbe:	685b      	ldreq	r3, [r3, #4]
 800dcc0:	1809      	addeq	r1, r1, r0
 800dcc2:	6021      	streq	r1, [r4, #0]
 800dcc4:	6063      	str	r3, [r4, #4]
 800dcc6:	6054      	str	r4, [r2, #4]
 800dcc8:	e7cb      	b.n	800dc62 <_free_r+0x22>
 800dcca:	bd38      	pop	{r3, r4, r5, pc}
 800dccc:	20001e2c 	.word	0x20001e2c

0800dcd0 <__ssputs_r>:
 800dcd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcd4:	461f      	mov	r7, r3
 800dcd6:	688e      	ldr	r6, [r1, #8]
 800dcd8:	4682      	mov	sl, r0
 800dcda:	42be      	cmp	r6, r7
 800dcdc:	460c      	mov	r4, r1
 800dcde:	4690      	mov	r8, r2
 800dce0:	680b      	ldr	r3, [r1, #0]
 800dce2:	d82d      	bhi.n	800dd40 <__ssputs_r+0x70>
 800dce4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dce8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dcec:	d026      	beq.n	800dd3c <__ssputs_r+0x6c>
 800dcee:	6965      	ldr	r5, [r4, #20]
 800dcf0:	6909      	ldr	r1, [r1, #16]
 800dcf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dcf6:	eba3 0901 	sub.w	r9, r3, r1
 800dcfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dcfe:	1c7b      	adds	r3, r7, #1
 800dd00:	444b      	add	r3, r9
 800dd02:	106d      	asrs	r5, r5, #1
 800dd04:	429d      	cmp	r5, r3
 800dd06:	bf38      	it	cc
 800dd08:	461d      	movcc	r5, r3
 800dd0a:	0553      	lsls	r3, r2, #21
 800dd0c:	d527      	bpl.n	800dd5e <__ssputs_r+0x8e>
 800dd0e:	4629      	mov	r1, r5
 800dd10:	f7ff fe3a 	bl	800d988 <_malloc_r>
 800dd14:	4606      	mov	r6, r0
 800dd16:	b360      	cbz	r0, 800dd72 <__ssputs_r+0xa2>
 800dd18:	464a      	mov	r2, r9
 800dd1a:	6921      	ldr	r1, [r4, #16]
 800dd1c:	f000 faea 	bl	800e2f4 <memcpy>
 800dd20:	89a3      	ldrh	r3, [r4, #12]
 800dd22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dd26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd2a:	81a3      	strh	r3, [r4, #12]
 800dd2c:	6126      	str	r6, [r4, #16]
 800dd2e:	444e      	add	r6, r9
 800dd30:	6026      	str	r6, [r4, #0]
 800dd32:	463e      	mov	r6, r7
 800dd34:	6165      	str	r5, [r4, #20]
 800dd36:	eba5 0509 	sub.w	r5, r5, r9
 800dd3a:	60a5      	str	r5, [r4, #8]
 800dd3c:	42be      	cmp	r6, r7
 800dd3e:	d900      	bls.n	800dd42 <__ssputs_r+0x72>
 800dd40:	463e      	mov	r6, r7
 800dd42:	4632      	mov	r2, r6
 800dd44:	4641      	mov	r1, r8
 800dd46:	6820      	ldr	r0, [r4, #0]
 800dd48:	f000 faac 	bl	800e2a4 <memmove>
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	68a3      	ldr	r3, [r4, #8]
 800dd50:	1b9b      	subs	r3, r3, r6
 800dd52:	60a3      	str	r3, [r4, #8]
 800dd54:	6823      	ldr	r3, [r4, #0]
 800dd56:	4433      	add	r3, r6
 800dd58:	6023      	str	r3, [r4, #0]
 800dd5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd5e:	462a      	mov	r2, r5
 800dd60:	f000 fad6 	bl	800e310 <_realloc_r>
 800dd64:	4606      	mov	r6, r0
 800dd66:	2800      	cmp	r0, #0
 800dd68:	d1e0      	bne.n	800dd2c <__ssputs_r+0x5c>
 800dd6a:	4650      	mov	r0, sl
 800dd6c:	6921      	ldr	r1, [r4, #16]
 800dd6e:	f7ff ff67 	bl	800dc40 <_free_r>
 800dd72:	230c      	movs	r3, #12
 800dd74:	f8ca 3000 	str.w	r3, [sl]
 800dd78:	89a3      	ldrh	r3, [r4, #12]
 800dd7a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dd82:	81a3      	strh	r3, [r4, #12]
 800dd84:	e7e9      	b.n	800dd5a <__ssputs_r+0x8a>
	...

0800dd88 <_svfiprintf_r>:
 800dd88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd8c:	4698      	mov	r8, r3
 800dd8e:	898b      	ldrh	r3, [r1, #12]
 800dd90:	4607      	mov	r7, r0
 800dd92:	061b      	lsls	r3, r3, #24
 800dd94:	460d      	mov	r5, r1
 800dd96:	4614      	mov	r4, r2
 800dd98:	b09d      	sub	sp, #116	@ 0x74
 800dd9a:	d510      	bpl.n	800ddbe <_svfiprintf_r+0x36>
 800dd9c:	690b      	ldr	r3, [r1, #16]
 800dd9e:	b973      	cbnz	r3, 800ddbe <_svfiprintf_r+0x36>
 800dda0:	2140      	movs	r1, #64	@ 0x40
 800dda2:	f7ff fdf1 	bl	800d988 <_malloc_r>
 800dda6:	6028      	str	r0, [r5, #0]
 800dda8:	6128      	str	r0, [r5, #16]
 800ddaa:	b930      	cbnz	r0, 800ddba <_svfiprintf_r+0x32>
 800ddac:	230c      	movs	r3, #12
 800ddae:	603b      	str	r3, [r7, #0]
 800ddb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ddb4:	b01d      	add	sp, #116	@ 0x74
 800ddb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddba:	2340      	movs	r3, #64	@ 0x40
 800ddbc:	616b      	str	r3, [r5, #20]
 800ddbe:	2300      	movs	r3, #0
 800ddc0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddc2:	2320      	movs	r3, #32
 800ddc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ddc8:	2330      	movs	r3, #48	@ 0x30
 800ddca:	f04f 0901 	mov.w	r9, #1
 800ddce:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddd2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800df6c <_svfiprintf_r+0x1e4>
 800ddd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ddda:	4623      	mov	r3, r4
 800dddc:	469a      	mov	sl, r3
 800ddde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dde2:	b10a      	cbz	r2, 800dde8 <_svfiprintf_r+0x60>
 800dde4:	2a25      	cmp	r2, #37	@ 0x25
 800dde6:	d1f9      	bne.n	800dddc <_svfiprintf_r+0x54>
 800dde8:	ebba 0b04 	subs.w	fp, sl, r4
 800ddec:	d00b      	beq.n	800de06 <_svfiprintf_r+0x7e>
 800ddee:	465b      	mov	r3, fp
 800ddf0:	4622      	mov	r2, r4
 800ddf2:	4629      	mov	r1, r5
 800ddf4:	4638      	mov	r0, r7
 800ddf6:	f7ff ff6b 	bl	800dcd0 <__ssputs_r>
 800ddfa:	3001      	adds	r0, #1
 800ddfc:	f000 80a7 	beq.w	800df4e <_svfiprintf_r+0x1c6>
 800de00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de02:	445a      	add	r2, fp
 800de04:	9209      	str	r2, [sp, #36]	@ 0x24
 800de06:	f89a 3000 	ldrb.w	r3, [sl]
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	f000 809f 	beq.w	800df4e <_svfiprintf_r+0x1c6>
 800de10:	2300      	movs	r3, #0
 800de12:	f04f 32ff 	mov.w	r2, #4294967295
 800de16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de1a:	f10a 0a01 	add.w	sl, sl, #1
 800de1e:	9304      	str	r3, [sp, #16]
 800de20:	9307      	str	r3, [sp, #28]
 800de22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800de26:	931a      	str	r3, [sp, #104]	@ 0x68
 800de28:	4654      	mov	r4, sl
 800de2a:	2205      	movs	r2, #5
 800de2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de30:	484e      	ldr	r0, [pc, #312]	@ (800df6c <_svfiprintf_r+0x1e4>)
 800de32:	f000 fa51 	bl	800e2d8 <memchr>
 800de36:	9a04      	ldr	r2, [sp, #16]
 800de38:	b9d8      	cbnz	r0, 800de72 <_svfiprintf_r+0xea>
 800de3a:	06d0      	lsls	r0, r2, #27
 800de3c:	bf44      	itt	mi
 800de3e:	2320      	movmi	r3, #32
 800de40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de44:	0711      	lsls	r1, r2, #28
 800de46:	bf44      	itt	mi
 800de48:	232b      	movmi	r3, #43	@ 0x2b
 800de4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de4e:	f89a 3000 	ldrb.w	r3, [sl]
 800de52:	2b2a      	cmp	r3, #42	@ 0x2a
 800de54:	d015      	beq.n	800de82 <_svfiprintf_r+0xfa>
 800de56:	4654      	mov	r4, sl
 800de58:	2000      	movs	r0, #0
 800de5a:	f04f 0c0a 	mov.w	ip, #10
 800de5e:	9a07      	ldr	r2, [sp, #28]
 800de60:	4621      	mov	r1, r4
 800de62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de66:	3b30      	subs	r3, #48	@ 0x30
 800de68:	2b09      	cmp	r3, #9
 800de6a:	d94b      	bls.n	800df04 <_svfiprintf_r+0x17c>
 800de6c:	b1b0      	cbz	r0, 800de9c <_svfiprintf_r+0x114>
 800de6e:	9207      	str	r2, [sp, #28]
 800de70:	e014      	b.n	800de9c <_svfiprintf_r+0x114>
 800de72:	eba0 0308 	sub.w	r3, r0, r8
 800de76:	fa09 f303 	lsl.w	r3, r9, r3
 800de7a:	4313      	orrs	r3, r2
 800de7c:	46a2      	mov	sl, r4
 800de7e:	9304      	str	r3, [sp, #16]
 800de80:	e7d2      	b.n	800de28 <_svfiprintf_r+0xa0>
 800de82:	9b03      	ldr	r3, [sp, #12]
 800de84:	1d19      	adds	r1, r3, #4
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	9103      	str	r1, [sp, #12]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	bfbb      	ittet	lt
 800de8e:	425b      	neglt	r3, r3
 800de90:	f042 0202 	orrlt.w	r2, r2, #2
 800de94:	9307      	strge	r3, [sp, #28]
 800de96:	9307      	strlt	r3, [sp, #28]
 800de98:	bfb8      	it	lt
 800de9a:	9204      	strlt	r2, [sp, #16]
 800de9c:	7823      	ldrb	r3, [r4, #0]
 800de9e:	2b2e      	cmp	r3, #46	@ 0x2e
 800dea0:	d10a      	bne.n	800deb8 <_svfiprintf_r+0x130>
 800dea2:	7863      	ldrb	r3, [r4, #1]
 800dea4:	2b2a      	cmp	r3, #42	@ 0x2a
 800dea6:	d132      	bne.n	800df0e <_svfiprintf_r+0x186>
 800dea8:	9b03      	ldr	r3, [sp, #12]
 800deaa:	3402      	adds	r4, #2
 800deac:	1d1a      	adds	r2, r3, #4
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	9203      	str	r2, [sp, #12]
 800deb2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800deb6:	9305      	str	r3, [sp, #20]
 800deb8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800df70 <_svfiprintf_r+0x1e8>
 800debc:	2203      	movs	r2, #3
 800debe:	4650      	mov	r0, sl
 800dec0:	7821      	ldrb	r1, [r4, #0]
 800dec2:	f000 fa09 	bl	800e2d8 <memchr>
 800dec6:	b138      	cbz	r0, 800ded8 <_svfiprintf_r+0x150>
 800dec8:	2240      	movs	r2, #64	@ 0x40
 800deca:	9b04      	ldr	r3, [sp, #16]
 800decc:	eba0 000a 	sub.w	r0, r0, sl
 800ded0:	4082      	lsls	r2, r0
 800ded2:	4313      	orrs	r3, r2
 800ded4:	3401      	adds	r4, #1
 800ded6:	9304      	str	r3, [sp, #16]
 800ded8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dedc:	2206      	movs	r2, #6
 800dede:	4825      	ldr	r0, [pc, #148]	@ (800df74 <_svfiprintf_r+0x1ec>)
 800dee0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dee4:	f000 f9f8 	bl	800e2d8 <memchr>
 800dee8:	2800      	cmp	r0, #0
 800deea:	d036      	beq.n	800df5a <_svfiprintf_r+0x1d2>
 800deec:	4b22      	ldr	r3, [pc, #136]	@ (800df78 <_svfiprintf_r+0x1f0>)
 800deee:	bb1b      	cbnz	r3, 800df38 <_svfiprintf_r+0x1b0>
 800def0:	9b03      	ldr	r3, [sp, #12]
 800def2:	3307      	adds	r3, #7
 800def4:	f023 0307 	bic.w	r3, r3, #7
 800def8:	3308      	adds	r3, #8
 800defa:	9303      	str	r3, [sp, #12]
 800defc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800defe:	4433      	add	r3, r6
 800df00:	9309      	str	r3, [sp, #36]	@ 0x24
 800df02:	e76a      	b.n	800ddda <_svfiprintf_r+0x52>
 800df04:	460c      	mov	r4, r1
 800df06:	2001      	movs	r0, #1
 800df08:	fb0c 3202 	mla	r2, ip, r2, r3
 800df0c:	e7a8      	b.n	800de60 <_svfiprintf_r+0xd8>
 800df0e:	2300      	movs	r3, #0
 800df10:	f04f 0c0a 	mov.w	ip, #10
 800df14:	4619      	mov	r1, r3
 800df16:	3401      	adds	r4, #1
 800df18:	9305      	str	r3, [sp, #20]
 800df1a:	4620      	mov	r0, r4
 800df1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df20:	3a30      	subs	r2, #48	@ 0x30
 800df22:	2a09      	cmp	r2, #9
 800df24:	d903      	bls.n	800df2e <_svfiprintf_r+0x1a6>
 800df26:	2b00      	cmp	r3, #0
 800df28:	d0c6      	beq.n	800deb8 <_svfiprintf_r+0x130>
 800df2a:	9105      	str	r1, [sp, #20]
 800df2c:	e7c4      	b.n	800deb8 <_svfiprintf_r+0x130>
 800df2e:	4604      	mov	r4, r0
 800df30:	2301      	movs	r3, #1
 800df32:	fb0c 2101 	mla	r1, ip, r1, r2
 800df36:	e7f0      	b.n	800df1a <_svfiprintf_r+0x192>
 800df38:	ab03      	add	r3, sp, #12
 800df3a:	9300      	str	r3, [sp, #0]
 800df3c:	462a      	mov	r2, r5
 800df3e:	4638      	mov	r0, r7
 800df40:	4b0e      	ldr	r3, [pc, #56]	@ (800df7c <_svfiprintf_r+0x1f4>)
 800df42:	a904      	add	r1, sp, #16
 800df44:	f3af 8000 	nop.w
 800df48:	1c42      	adds	r2, r0, #1
 800df4a:	4606      	mov	r6, r0
 800df4c:	d1d6      	bne.n	800defc <_svfiprintf_r+0x174>
 800df4e:	89ab      	ldrh	r3, [r5, #12]
 800df50:	065b      	lsls	r3, r3, #25
 800df52:	f53f af2d 	bmi.w	800ddb0 <_svfiprintf_r+0x28>
 800df56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df58:	e72c      	b.n	800ddb4 <_svfiprintf_r+0x2c>
 800df5a:	ab03      	add	r3, sp, #12
 800df5c:	9300      	str	r3, [sp, #0]
 800df5e:	462a      	mov	r2, r5
 800df60:	4638      	mov	r0, r7
 800df62:	4b06      	ldr	r3, [pc, #24]	@ (800df7c <_svfiprintf_r+0x1f4>)
 800df64:	a904      	add	r1, sp, #16
 800df66:	f000 f87d 	bl	800e064 <_printf_i>
 800df6a:	e7ed      	b.n	800df48 <_svfiprintf_r+0x1c0>
 800df6c:	0800f13b 	.word	0x0800f13b
 800df70:	0800f141 	.word	0x0800f141
 800df74:	0800f145 	.word	0x0800f145
 800df78:	00000000 	.word	0x00000000
 800df7c:	0800dcd1 	.word	0x0800dcd1

0800df80 <_printf_common>:
 800df80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df84:	4616      	mov	r6, r2
 800df86:	4698      	mov	r8, r3
 800df88:	688a      	ldr	r2, [r1, #8]
 800df8a:	690b      	ldr	r3, [r1, #16]
 800df8c:	4607      	mov	r7, r0
 800df8e:	4293      	cmp	r3, r2
 800df90:	bfb8      	it	lt
 800df92:	4613      	movlt	r3, r2
 800df94:	6033      	str	r3, [r6, #0]
 800df96:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800df9a:	460c      	mov	r4, r1
 800df9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dfa0:	b10a      	cbz	r2, 800dfa6 <_printf_common+0x26>
 800dfa2:	3301      	adds	r3, #1
 800dfa4:	6033      	str	r3, [r6, #0]
 800dfa6:	6823      	ldr	r3, [r4, #0]
 800dfa8:	0699      	lsls	r1, r3, #26
 800dfaa:	bf42      	ittt	mi
 800dfac:	6833      	ldrmi	r3, [r6, #0]
 800dfae:	3302      	addmi	r3, #2
 800dfb0:	6033      	strmi	r3, [r6, #0]
 800dfb2:	6825      	ldr	r5, [r4, #0]
 800dfb4:	f015 0506 	ands.w	r5, r5, #6
 800dfb8:	d106      	bne.n	800dfc8 <_printf_common+0x48>
 800dfba:	f104 0a19 	add.w	sl, r4, #25
 800dfbe:	68e3      	ldr	r3, [r4, #12]
 800dfc0:	6832      	ldr	r2, [r6, #0]
 800dfc2:	1a9b      	subs	r3, r3, r2
 800dfc4:	42ab      	cmp	r3, r5
 800dfc6:	dc2b      	bgt.n	800e020 <_printf_common+0xa0>
 800dfc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dfcc:	6822      	ldr	r2, [r4, #0]
 800dfce:	3b00      	subs	r3, #0
 800dfd0:	bf18      	it	ne
 800dfd2:	2301      	movne	r3, #1
 800dfd4:	0692      	lsls	r2, r2, #26
 800dfd6:	d430      	bmi.n	800e03a <_printf_common+0xba>
 800dfd8:	4641      	mov	r1, r8
 800dfda:	4638      	mov	r0, r7
 800dfdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dfe0:	47c8      	blx	r9
 800dfe2:	3001      	adds	r0, #1
 800dfe4:	d023      	beq.n	800e02e <_printf_common+0xae>
 800dfe6:	6823      	ldr	r3, [r4, #0]
 800dfe8:	6922      	ldr	r2, [r4, #16]
 800dfea:	f003 0306 	and.w	r3, r3, #6
 800dfee:	2b04      	cmp	r3, #4
 800dff0:	bf14      	ite	ne
 800dff2:	2500      	movne	r5, #0
 800dff4:	6833      	ldreq	r3, [r6, #0]
 800dff6:	f04f 0600 	mov.w	r6, #0
 800dffa:	bf08      	it	eq
 800dffc:	68e5      	ldreq	r5, [r4, #12]
 800dffe:	f104 041a 	add.w	r4, r4, #26
 800e002:	bf08      	it	eq
 800e004:	1aed      	subeq	r5, r5, r3
 800e006:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e00a:	bf08      	it	eq
 800e00c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e010:	4293      	cmp	r3, r2
 800e012:	bfc4      	itt	gt
 800e014:	1a9b      	subgt	r3, r3, r2
 800e016:	18ed      	addgt	r5, r5, r3
 800e018:	42b5      	cmp	r5, r6
 800e01a:	d11a      	bne.n	800e052 <_printf_common+0xd2>
 800e01c:	2000      	movs	r0, #0
 800e01e:	e008      	b.n	800e032 <_printf_common+0xb2>
 800e020:	2301      	movs	r3, #1
 800e022:	4652      	mov	r2, sl
 800e024:	4641      	mov	r1, r8
 800e026:	4638      	mov	r0, r7
 800e028:	47c8      	blx	r9
 800e02a:	3001      	adds	r0, #1
 800e02c:	d103      	bne.n	800e036 <_printf_common+0xb6>
 800e02e:	f04f 30ff 	mov.w	r0, #4294967295
 800e032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e036:	3501      	adds	r5, #1
 800e038:	e7c1      	b.n	800dfbe <_printf_common+0x3e>
 800e03a:	2030      	movs	r0, #48	@ 0x30
 800e03c:	18e1      	adds	r1, r4, r3
 800e03e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e042:	1c5a      	adds	r2, r3, #1
 800e044:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e048:	4422      	add	r2, r4
 800e04a:	3302      	adds	r3, #2
 800e04c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e050:	e7c2      	b.n	800dfd8 <_printf_common+0x58>
 800e052:	2301      	movs	r3, #1
 800e054:	4622      	mov	r2, r4
 800e056:	4641      	mov	r1, r8
 800e058:	4638      	mov	r0, r7
 800e05a:	47c8      	blx	r9
 800e05c:	3001      	adds	r0, #1
 800e05e:	d0e6      	beq.n	800e02e <_printf_common+0xae>
 800e060:	3601      	adds	r6, #1
 800e062:	e7d9      	b.n	800e018 <_printf_common+0x98>

0800e064 <_printf_i>:
 800e064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e068:	7e0f      	ldrb	r7, [r1, #24]
 800e06a:	4691      	mov	r9, r2
 800e06c:	2f78      	cmp	r7, #120	@ 0x78
 800e06e:	4680      	mov	r8, r0
 800e070:	460c      	mov	r4, r1
 800e072:	469a      	mov	sl, r3
 800e074:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e076:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e07a:	d807      	bhi.n	800e08c <_printf_i+0x28>
 800e07c:	2f62      	cmp	r7, #98	@ 0x62
 800e07e:	d80a      	bhi.n	800e096 <_printf_i+0x32>
 800e080:	2f00      	cmp	r7, #0
 800e082:	f000 80d3 	beq.w	800e22c <_printf_i+0x1c8>
 800e086:	2f58      	cmp	r7, #88	@ 0x58
 800e088:	f000 80ba 	beq.w	800e200 <_printf_i+0x19c>
 800e08c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e090:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e094:	e03a      	b.n	800e10c <_printf_i+0xa8>
 800e096:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e09a:	2b15      	cmp	r3, #21
 800e09c:	d8f6      	bhi.n	800e08c <_printf_i+0x28>
 800e09e:	a101      	add	r1, pc, #4	@ (adr r1, 800e0a4 <_printf_i+0x40>)
 800e0a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e0a4:	0800e0fd 	.word	0x0800e0fd
 800e0a8:	0800e111 	.word	0x0800e111
 800e0ac:	0800e08d 	.word	0x0800e08d
 800e0b0:	0800e08d 	.word	0x0800e08d
 800e0b4:	0800e08d 	.word	0x0800e08d
 800e0b8:	0800e08d 	.word	0x0800e08d
 800e0bc:	0800e111 	.word	0x0800e111
 800e0c0:	0800e08d 	.word	0x0800e08d
 800e0c4:	0800e08d 	.word	0x0800e08d
 800e0c8:	0800e08d 	.word	0x0800e08d
 800e0cc:	0800e08d 	.word	0x0800e08d
 800e0d0:	0800e213 	.word	0x0800e213
 800e0d4:	0800e13b 	.word	0x0800e13b
 800e0d8:	0800e1cd 	.word	0x0800e1cd
 800e0dc:	0800e08d 	.word	0x0800e08d
 800e0e0:	0800e08d 	.word	0x0800e08d
 800e0e4:	0800e235 	.word	0x0800e235
 800e0e8:	0800e08d 	.word	0x0800e08d
 800e0ec:	0800e13b 	.word	0x0800e13b
 800e0f0:	0800e08d 	.word	0x0800e08d
 800e0f4:	0800e08d 	.word	0x0800e08d
 800e0f8:	0800e1d5 	.word	0x0800e1d5
 800e0fc:	6833      	ldr	r3, [r6, #0]
 800e0fe:	1d1a      	adds	r2, r3, #4
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	6032      	str	r2, [r6, #0]
 800e104:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e108:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e10c:	2301      	movs	r3, #1
 800e10e:	e09e      	b.n	800e24e <_printf_i+0x1ea>
 800e110:	6833      	ldr	r3, [r6, #0]
 800e112:	6820      	ldr	r0, [r4, #0]
 800e114:	1d19      	adds	r1, r3, #4
 800e116:	6031      	str	r1, [r6, #0]
 800e118:	0606      	lsls	r6, r0, #24
 800e11a:	d501      	bpl.n	800e120 <_printf_i+0xbc>
 800e11c:	681d      	ldr	r5, [r3, #0]
 800e11e:	e003      	b.n	800e128 <_printf_i+0xc4>
 800e120:	0645      	lsls	r5, r0, #25
 800e122:	d5fb      	bpl.n	800e11c <_printf_i+0xb8>
 800e124:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e128:	2d00      	cmp	r5, #0
 800e12a:	da03      	bge.n	800e134 <_printf_i+0xd0>
 800e12c:	232d      	movs	r3, #45	@ 0x2d
 800e12e:	426d      	negs	r5, r5
 800e130:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e134:	230a      	movs	r3, #10
 800e136:	4859      	ldr	r0, [pc, #356]	@ (800e29c <_printf_i+0x238>)
 800e138:	e011      	b.n	800e15e <_printf_i+0xfa>
 800e13a:	6821      	ldr	r1, [r4, #0]
 800e13c:	6833      	ldr	r3, [r6, #0]
 800e13e:	0608      	lsls	r0, r1, #24
 800e140:	f853 5b04 	ldr.w	r5, [r3], #4
 800e144:	d402      	bmi.n	800e14c <_printf_i+0xe8>
 800e146:	0649      	lsls	r1, r1, #25
 800e148:	bf48      	it	mi
 800e14a:	b2ad      	uxthmi	r5, r5
 800e14c:	2f6f      	cmp	r7, #111	@ 0x6f
 800e14e:	6033      	str	r3, [r6, #0]
 800e150:	bf14      	ite	ne
 800e152:	230a      	movne	r3, #10
 800e154:	2308      	moveq	r3, #8
 800e156:	4851      	ldr	r0, [pc, #324]	@ (800e29c <_printf_i+0x238>)
 800e158:	2100      	movs	r1, #0
 800e15a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e15e:	6866      	ldr	r6, [r4, #4]
 800e160:	2e00      	cmp	r6, #0
 800e162:	bfa8      	it	ge
 800e164:	6821      	ldrge	r1, [r4, #0]
 800e166:	60a6      	str	r6, [r4, #8]
 800e168:	bfa4      	itt	ge
 800e16a:	f021 0104 	bicge.w	r1, r1, #4
 800e16e:	6021      	strge	r1, [r4, #0]
 800e170:	b90d      	cbnz	r5, 800e176 <_printf_i+0x112>
 800e172:	2e00      	cmp	r6, #0
 800e174:	d04b      	beq.n	800e20e <_printf_i+0x1aa>
 800e176:	4616      	mov	r6, r2
 800e178:	fbb5 f1f3 	udiv	r1, r5, r3
 800e17c:	fb03 5711 	mls	r7, r3, r1, r5
 800e180:	5dc7      	ldrb	r7, [r0, r7]
 800e182:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e186:	462f      	mov	r7, r5
 800e188:	42bb      	cmp	r3, r7
 800e18a:	460d      	mov	r5, r1
 800e18c:	d9f4      	bls.n	800e178 <_printf_i+0x114>
 800e18e:	2b08      	cmp	r3, #8
 800e190:	d10b      	bne.n	800e1aa <_printf_i+0x146>
 800e192:	6823      	ldr	r3, [r4, #0]
 800e194:	07df      	lsls	r7, r3, #31
 800e196:	d508      	bpl.n	800e1aa <_printf_i+0x146>
 800e198:	6923      	ldr	r3, [r4, #16]
 800e19a:	6861      	ldr	r1, [r4, #4]
 800e19c:	4299      	cmp	r1, r3
 800e19e:	bfde      	ittt	le
 800e1a0:	2330      	movle	r3, #48	@ 0x30
 800e1a2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e1a6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e1aa:	1b92      	subs	r2, r2, r6
 800e1ac:	6122      	str	r2, [r4, #16]
 800e1ae:	464b      	mov	r3, r9
 800e1b0:	4621      	mov	r1, r4
 800e1b2:	4640      	mov	r0, r8
 800e1b4:	f8cd a000 	str.w	sl, [sp]
 800e1b8:	aa03      	add	r2, sp, #12
 800e1ba:	f7ff fee1 	bl	800df80 <_printf_common>
 800e1be:	3001      	adds	r0, #1
 800e1c0:	d14a      	bne.n	800e258 <_printf_i+0x1f4>
 800e1c2:	f04f 30ff 	mov.w	r0, #4294967295
 800e1c6:	b004      	add	sp, #16
 800e1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1cc:	6823      	ldr	r3, [r4, #0]
 800e1ce:	f043 0320 	orr.w	r3, r3, #32
 800e1d2:	6023      	str	r3, [r4, #0]
 800e1d4:	2778      	movs	r7, #120	@ 0x78
 800e1d6:	4832      	ldr	r0, [pc, #200]	@ (800e2a0 <_printf_i+0x23c>)
 800e1d8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e1dc:	6823      	ldr	r3, [r4, #0]
 800e1de:	6831      	ldr	r1, [r6, #0]
 800e1e0:	061f      	lsls	r7, r3, #24
 800e1e2:	f851 5b04 	ldr.w	r5, [r1], #4
 800e1e6:	d402      	bmi.n	800e1ee <_printf_i+0x18a>
 800e1e8:	065f      	lsls	r7, r3, #25
 800e1ea:	bf48      	it	mi
 800e1ec:	b2ad      	uxthmi	r5, r5
 800e1ee:	6031      	str	r1, [r6, #0]
 800e1f0:	07d9      	lsls	r1, r3, #31
 800e1f2:	bf44      	itt	mi
 800e1f4:	f043 0320 	orrmi.w	r3, r3, #32
 800e1f8:	6023      	strmi	r3, [r4, #0]
 800e1fa:	b11d      	cbz	r5, 800e204 <_printf_i+0x1a0>
 800e1fc:	2310      	movs	r3, #16
 800e1fe:	e7ab      	b.n	800e158 <_printf_i+0xf4>
 800e200:	4826      	ldr	r0, [pc, #152]	@ (800e29c <_printf_i+0x238>)
 800e202:	e7e9      	b.n	800e1d8 <_printf_i+0x174>
 800e204:	6823      	ldr	r3, [r4, #0]
 800e206:	f023 0320 	bic.w	r3, r3, #32
 800e20a:	6023      	str	r3, [r4, #0]
 800e20c:	e7f6      	b.n	800e1fc <_printf_i+0x198>
 800e20e:	4616      	mov	r6, r2
 800e210:	e7bd      	b.n	800e18e <_printf_i+0x12a>
 800e212:	6833      	ldr	r3, [r6, #0]
 800e214:	6825      	ldr	r5, [r4, #0]
 800e216:	1d18      	adds	r0, r3, #4
 800e218:	6961      	ldr	r1, [r4, #20]
 800e21a:	6030      	str	r0, [r6, #0]
 800e21c:	062e      	lsls	r6, r5, #24
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	d501      	bpl.n	800e226 <_printf_i+0x1c2>
 800e222:	6019      	str	r1, [r3, #0]
 800e224:	e002      	b.n	800e22c <_printf_i+0x1c8>
 800e226:	0668      	lsls	r0, r5, #25
 800e228:	d5fb      	bpl.n	800e222 <_printf_i+0x1be>
 800e22a:	8019      	strh	r1, [r3, #0]
 800e22c:	2300      	movs	r3, #0
 800e22e:	4616      	mov	r6, r2
 800e230:	6123      	str	r3, [r4, #16]
 800e232:	e7bc      	b.n	800e1ae <_printf_i+0x14a>
 800e234:	6833      	ldr	r3, [r6, #0]
 800e236:	2100      	movs	r1, #0
 800e238:	1d1a      	adds	r2, r3, #4
 800e23a:	6032      	str	r2, [r6, #0]
 800e23c:	681e      	ldr	r6, [r3, #0]
 800e23e:	6862      	ldr	r2, [r4, #4]
 800e240:	4630      	mov	r0, r6
 800e242:	f000 f849 	bl	800e2d8 <memchr>
 800e246:	b108      	cbz	r0, 800e24c <_printf_i+0x1e8>
 800e248:	1b80      	subs	r0, r0, r6
 800e24a:	6060      	str	r0, [r4, #4]
 800e24c:	6863      	ldr	r3, [r4, #4]
 800e24e:	6123      	str	r3, [r4, #16]
 800e250:	2300      	movs	r3, #0
 800e252:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e256:	e7aa      	b.n	800e1ae <_printf_i+0x14a>
 800e258:	4632      	mov	r2, r6
 800e25a:	4649      	mov	r1, r9
 800e25c:	4640      	mov	r0, r8
 800e25e:	6923      	ldr	r3, [r4, #16]
 800e260:	47d0      	blx	sl
 800e262:	3001      	adds	r0, #1
 800e264:	d0ad      	beq.n	800e1c2 <_printf_i+0x15e>
 800e266:	6823      	ldr	r3, [r4, #0]
 800e268:	079b      	lsls	r3, r3, #30
 800e26a:	d413      	bmi.n	800e294 <_printf_i+0x230>
 800e26c:	68e0      	ldr	r0, [r4, #12]
 800e26e:	9b03      	ldr	r3, [sp, #12]
 800e270:	4298      	cmp	r0, r3
 800e272:	bfb8      	it	lt
 800e274:	4618      	movlt	r0, r3
 800e276:	e7a6      	b.n	800e1c6 <_printf_i+0x162>
 800e278:	2301      	movs	r3, #1
 800e27a:	4632      	mov	r2, r6
 800e27c:	4649      	mov	r1, r9
 800e27e:	4640      	mov	r0, r8
 800e280:	47d0      	blx	sl
 800e282:	3001      	adds	r0, #1
 800e284:	d09d      	beq.n	800e1c2 <_printf_i+0x15e>
 800e286:	3501      	adds	r5, #1
 800e288:	68e3      	ldr	r3, [r4, #12]
 800e28a:	9903      	ldr	r1, [sp, #12]
 800e28c:	1a5b      	subs	r3, r3, r1
 800e28e:	42ab      	cmp	r3, r5
 800e290:	dcf2      	bgt.n	800e278 <_printf_i+0x214>
 800e292:	e7eb      	b.n	800e26c <_printf_i+0x208>
 800e294:	2500      	movs	r5, #0
 800e296:	f104 0619 	add.w	r6, r4, #25
 800e29a:	e7f5      	b.n	800e288 <_printf_i+0x224>
 800e29c:	0800f14c 	.word	0x0800f14c
 800e2a0:	0800f15d 	.word	0x0800f15d

0800e2a4 <memmove>:
 800e2a4:	4288      	cmp	r0, r1
 800e2a6:	b510      	push	{r4, lr}
 800e2a8:	eb01 0402 	add.w	r4, r1, r2
 800e2ac:	d902      	bls.n	800e2b4 <memmove+0x10>
 800e2ae:	4284      	cmp	r4, r0
 800e2b0:	4623      	mov	r3, r4
 800e2b2:	d807      	bhi.n	800e2c4 <memmove+0x20>
 800e2b4:	1e43      	subs	r3, r0, #1
 800e2b6:	42a1      	cmp	r1, r4
 800e2b8:	d008      	beq.n	800e2cc <memmove+0x28>
 800e2ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e2c2:	e7f8      	b.n	800e2b6 <memmove+0x12>
 800e2c4:	4601      	mov	r1, r0
 800e2c6:	4402      	add	r2, r0
 800e2c8:	428a      	cmp	r2, r1
 800e2ca:	d100      	bne.n	800e2ce <memmove+0x2a>
 800e2cc:	bd10      	pop	{r4, pc}
 800e2ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e2d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e2d6:	e7f7      	b.n	800e2c8 <memmove+0x24>

0800e2d8 <memchr>:
 800e2d8:	4603      	mov	r3, r0
 800e2da:	b510      	push	{r4, lr}
 800e2dc:	b2c9      	uxtb	r1, r1
 800e2de:	4402      	add	r2, r0
 800e2e0:	4293      	cmp	r3, r2
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	d101      	bne.n	800e2ea <memchr+0x12>
 800e2e6:	2000      	movs	r0, #0
 800e2e8:	e003      	b.n	800e2f2 <memchr+0x1a>
 800e2ea:	7804      	ldrb	r4, [r0, #0]
 800e2ec:	3301      	adds	r3, #1
 800e2ee:	428c      	cmp	r4, r1
 800e2f0:	d1f6      	bne.n	800e2e0 <memchr+0x8>
 800e2f2:	bd10      	pop	{r4, pc}

0800e2f4 <memcpy>:
 800e2f4:	440a      	add	r2, r1
 800e2f6:	4291      	cmp	r1, r2
 800e2f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e2fc:	d100      	bne.n	800e300 <memcpy+0xc>
 800e2fe:	4770      	bx	lr
 800e300:	b510      	push	{r4, lr}
 800e302:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e306:	4291      	cmp	r1, r2
 800e308:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e30c:	d1f9      	bne.n	800e302 <memcpy+0xe>
 800e30e:	bd10      	pop	{r4, pc}

0800e310 <_realloc_r>:
 800e310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e314:	4680      	mov	r8, r0
 800e316:	4615      	mov	r5, r2
 800e318:	460c      	mov	r4, r1
 800e31a:	b921      	cbnz	r1, 800e326 <_realloc_r+0x16>
 800e31c:	4611      	mov	r1, r2
 800e31e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e322:	f7ff bb31 	b.w	800d988 <_malloc_r>
 800e326:	b92a      	cbnz	r2, 800e334 <_realloc_r+0x24>
 800e328:	f7ff fc8a 	bl	800dc40 <_free_r>
 800e32c:	2400      	movs	r4, #0
 800e32e:	4620      	mov	r0, r4
 800e330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e334:	f000 f81a 	bl	800e36c <_malloc_usable_size_r>
 800e338:	4285      	cmp	r5, r0
 800e33a:	4606      	mov	r6, r0
 800e33c:	d802      	bhi.n	800e344 <_realloc_r+0x34>
 800e33e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e342:	d8f4      	bhi.n	800e32e <_realloc_r+0x1e>
 800e344:	4629      	mov	r1, r5
 800e346:	4640      	mov	r0, r8
 800e348:	f7ff fb1e 	bl	800d988 <_malloc_r>
 800e34c:	4607      	mov	r7, r0
 800e34e:	2800      	cmp	r0, #0
 800e350:	d0ec      	beq.n	800e32c <_realloc_r+0x1c>
 800e352:	42b5      	cmp	r5, r6
 800e354:	462a      	mov	r2, r5
 800e356:	4621      	mov	r1, r4
 800e358:	bf28      	it	cs
 800e35a:	4632      	movcs	r2, r6
 800e35c:	f7ff ffca 	bl	800e2f4 <memcpy>
 800e360:	4621      	mov	r1, r4
 800e362:	4640      	mov	r0, r8
 800e364:	f7ff fc6c 	bl	800dc40 <_free_r>
 800e368:	463c      	mov	r4, r7
 800e36a:	e7e0      	b.n	800e32e <_realloc_r+0x1e>

0800e36c <_malloc_usable_size_r>:
 800e36c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e370:	1f18      	subs	r0, r3, #4
 800e372:	2b00      	cmp	r3, #0
 800e374:	bfbc      	itt	lt
 800e376:	580b      	ldrlt	r3, [r1, r0]
 800e378:	18c0      	addlt	r0, r0, r3
 800e37a:	4770      	bx	lr

0800e37c <_init>:
 800e37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e37e:	bf00      	nop
 800e380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e382:	bc08      	pop	{r3}
 800e384:	469e      	mov	lr, r3
 800e386:	4770      	bx	lr

0800e388 <_fini>:
 800e388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e38a:	bf00      	nop
 800e38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e38e:	bc08      	pop	{r3}
 800e390:	469e      	mov	lr, r3
 800e392:	4770      	bx	lr
