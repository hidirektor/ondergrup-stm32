
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e10c  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bac  0800e2f0  0800e2f0  0000f2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ee9c  0800ee9c  00010fd0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ee9c  0800ee9c  0000fe9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eea4  0800eea4  00010fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eea4  0800eea4  0000fea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eea8  0800eea8  0000fea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fd0  20000000  0800eeac  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba0  20000fd0  0800fe7c  00010fd0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b70  0800fe7c  00011b70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010fd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019141  00000000  00000000  00010ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037a8  00000000  00000000  0002a13a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  0002d8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000edc  00000000  00000000  0002ec28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8ae  00000000  00000000  0002fb04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d69c  00000000  00000000  0004c3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a05f8  00000000  00000000  00069a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a046  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e8  00000000  00000000  0010a08c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010f574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fd0 	.word	0x20000fd0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800e2d8 	.word	0x0800e2d8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fd4 	.word	0x20000fd4
 8000220:	0800e2d8 	.word	0x0800e2d8

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "EEPROMProcess.h"
#include "main.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	EEPROM_Read(0, 0, eepromData, 110);
 8000238:	236e      	movs	r3, #110	@ 0x6e
 800023a:	4a9b      	ldr	r2, [pc, #620]	@ (80004a8 <eepromKontrol+0x274>)
 800023c:	2100      	movs	r1, #0
 800023e:	2000      	movs	r0, #0
 8000240:	f000 fac2 	bl	80007c8 <EEPROM_Read>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	setupCompleted = eepromData[0];
 8000244:	4b98      	ldr	r3, [pc, #608]	@ (80004a8 <eepromKontrol+0x274>)
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	4b98      	ldr	r3, [pc, #608]	@ (80004ac <eepromKontrol+0x278>)
 800024a:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 800024c:	4b96      	ldr	r3, [pc, #600]	@ (80004a8 <eepromKontrol+0x274>)
 800024e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8000252:	4b97      	ldr	r3, [pc, #604]	@ (80004b0 <eepromKontrol+0x27c>)
 8000254:	701a      	strb	r2, [r3, #0]

	kaydedilenDeger = eepromData[3];
 8000256:	4b94      	ldr	r3, [pc, #592]	@ (80004a8 <eepromKontrol+0x274>)
 8000258:	78da      	ldrb	r2, [r3, #3]
 800025a:	4b96      	ldr	r3, [pc, #600]	@ (80004b4 <eepromKontrol+0x280>)
 800025c:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 800025e:	4b92      	ldr	r3, [pc, #584]	@ (80004a8 <eepromKontrol+0x274>)
 8000260:	785a      	ldrb	r2, [r3, #1]
 8000262:	4b95      	ldr	r3, [pc, #596]	@ (80004b8 <eepromKontrol+0x284>)
 8000264:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8000266:	4b90      	ldr	r3, [pc, #576]	@ (80004a8 <eepromKontrol+0x274>)
 8000268:	789a      	ldrb	r2, [r3, #2]
 800026a:	4b94      	ldr	r3, [pc, #592]	@ (80004bc <eepromKontrol+0x288>)
 800026c:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 800026e:	4b8e      	ldr	r3, [pc, #568]	@ (80004a8 <eepromKontrol+0x274>)
 8000270:	791a      	ldrb	r2, [r3, #4]
 8000272:	4b93      	ldr	r3, [pc, #588]	@ (80004c0 <eepromKontrol+0x28c>)
 8000274:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8000276:	4b8c      	ldr	r3, [pc, #560]	@ (80004a8 <eepromKontrol+0x274>)
 8000278:	795a      	ldrb	r2, [r3, #5]
 800027a:	4b92      	ldr	r3, [pc, #584]	@ (80004c4 <eepromKontrol+0x290>)
 800027c:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 800027e:	4b8a      	ldr	r3, [pc, #552]	@ (80004a8 <eepromKontrol+0x274>)
 8000280:	799a      	ldrb	r2, [r3, #6]
 8000282:	4b91      	ldr	r3, [pc, #580]	@ (80004c8 <eepromKontrol+0x294>)
 8000284:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8000286:	4b88      	ldr	r3, [pc, #544]	@ (80004a8 <eepromKontrol+0x274>)
 8000288:	79da      	ldrb	r2, [r3, #7]
 800028a:	4b90      	ldr	r3, [pc, #576]	@ (80004cc <eepromKontrol+0x298>)
 800028c:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 800028e:	4b86      	ldr	r3, [pc, #536]	@ (80004a8 <eepromKontrol+0x274>)
 8000290:	7a1a      	ldrb	r2, [r3, #8]
 8000292:	4b8f      	ldr	r3, [pc, #572]	@ (80004d0 <eepromKontrol+0x29c>)
 8000294:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8000296:	4b84      	ldr	r3, [pc, #528]	@ (80004a8 <eepromKontrol+0x274>)
 8000298:	7a5a      	ldrb	r2, [r3, #9]
 800029a:	4b8e      	ldr	r3, [pc, #568]	@ (80004d4 <eepromKontrol+0x2a0>)
 800029c:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 800029e:	4b82      	ldr	r3, [pc, #520]	@ (80004a8 <eepromKontrol+0x274>)
 80002a0:	7a9a      	ldrb	r2, [r3, #10]
 80002a2:	4b8d      	ldr	r3, [pc, #564]	@ (80004d8 <eepromKontrol+0x2a4>)
 80002a4:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002a6:	4b80      	ldr	r3, [pc, #512]	@ (80004a8 <eepromKontrol+0x274>)
 80002a8:	7ada      	ldrb	r2, [r3, #11]
 80002aa:	4b8c      	ldr	r3, [pc, #560]	@ (80004dc <eepromKontrol+0x2a8>)
 80002ac:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002ae:	4b7e      	ldr	r3, [pc, #504]	@ (80004a8 <eepromKontrol+0x274>)
 80002b0:	7b1a      	ldrb	r2, [r3, #12]
 80002b2:	4b8b      	ldr	r3, [pc, #556]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002b4:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002b6:	4b7c      	ldr	r3, [pc, #496]	@ (80004a8 <eepromKontrol+0x274>)
 80002b8:	7b5a      	ldrb	r2, [r3, #13]
 80002ba:	4b8a      	ldr	r3, [pc, #552]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002bc:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002be:	4b7a      	ldr	r3, [pc, #488]	@ (80004a8 <eepromKontrol+0x274>)
 80002c0:	7b9a      	ldrb	r2, [r3, #14]
 80002c2:	4b89      	ldr	r3, [pc, #548]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002c4:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002c6:	4b78      	ldr	r3, [pc, #480]	@ (80004a8 <eepromKontrol+0x274>)
 80002c8:	7bda      	ldrb	r2, [r3, #15]
 80002ca:	4b88      	ldr	r3, [pc, #544]	@ (80004ec <eepromKontrol+0x2b8>)
 80002cc:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002ce:	4b76      	ldr	r3, [pc, #472]	@ (80004a8 <eepromKontrol+0x274>)
 80002d0:	7c1a      	ldrb	r2, [r3, #16]
 80002d2:	4b87      	ldr	r3, [pc, #540]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002d4:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002d6:	4b74      	ldr	r3, [pc, #464]	@ (80004a8 <eepromKontrol+0x274>)
 80002d8:	7c5a      	ldrb	r2, [r3, #17]
 80002da:	4b86      	ldr	r3, [pc, #536]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002dc:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002de:	4b72      	ldr	r3, [pc, #456]	@ (80004a8 <eepromKontrol+0x274>)
 80002e0:	7c9a      	ldrb	r2, [r3, #18]
 80002e2:	4b85      	ldr	r3, [pc, #532]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002e4:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002e6:	4b70      	ldr	r3, [pc, #448]	@ (80004a8 <eepromKontrol+0x274>)
 80002e8:	7cda      	ldrb	r2, [r3, #19]
 80002ea:	4b84      	ldr	r3, [pc, #528]	@ (80004fc <eepromKontrol+0x2c8>)
 80002ec:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002ee:	4b6e      	ldr	r3, [pc, #440]	@ (80004a8 <eepromKontrol+0x274>)
 80002f0:	7d1a      	ldrb	r2, [r3, #20]
 80002f2:	4b83      	ldr	r3, [pc, #524]	@ (8000500 <eepromKontrol+0x2cc>)
 80002f4:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002f6:	4b6c      	ldr	r3, [pc, #432]	@ (80004a8 <eepromKontrol+0x274>)
 80002f8:	7d5a      	ldrb	r2, [r3, #21]
 80002fa:	4b82      	ldr	r3, [pc, #520]	@ (8000504 <eepromKontrol+0x2d0>)
 80002fc:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 80002fe:	4b6a      	ldr	r3, [pc, #424]	@ (80004a8 <eepromKontrol+0x274>)
 8000300:	7d9a      	ldrb	r2, [r3, #22]
 8000302:	4b81      	ldr	r3, [pc, #516]	@ (8000508 <eepromKontrol+0x2d4>)
 8000304:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8000306:	4b68      	ldr	r3, [pc, #416]	@ (80004a8 <eepromKontrol+0x274>)
 8000308:	7dda      	ldrb	r2, [r3, #23]
 800030a:	4b80      	ldr	r3, [pc, #512]	@ (800050c <eepromKontrol+0x2d8>)
 800030c:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 800030e:	4b66      	ldr	r3, [pc, #408]	@ (80004a8 <eepromKontrol+0x274>)
 8000310:	7e1a      	ldrb	r2, [r3, #24]
 8000312:	4b7f      	ldr	r3, [pc, #508]	@ (8000510 <eepromKontrol+0x2dc>)
 8000314:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8000316:	4b64      	ldr	r3, [pc, #400]	@ (80004a8 <eepromKontrol+0x274>)
 8000318:	7e5a      	ldrb	r2, [r3, #25]
 800031a:	4b7e      	ldr	r3, [pc, #504]	@ (8000514 <eepromKontrol+0x2e0>)
 800031c:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 800031e:	4b62      	ldr	r3, [pc, #392]	@ (80004a8 <eepromKontrol+0x274>)
 8000320:	7e9a      	ldrb	r2, [r3, #26]
 8000322:	4b7d      	ldr	r3, [pc, #500]	@ (8000518 <eepromKontrol+0x2e4>)
 8000324:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8000326:	4b60      	ldr	r3, [pc, #384]	@ (80004a8 <eepromKontrol+0x274>)
 8000328:	7eda      	ldrb	r2, [r3, #27]
 800032a:	4b7c      	ldr	r3, [pc, #496]	@ (800051c <eepromKontrol+0x2e8>)
 800032c:	701a      	strb	r2, [r3, #0]
	calismaSayisiDemo = eepromData[28];
 800032e:	4b5e      	ldr	r3, [pc, #376]	@ (80004a8 <eepromKontrol+0x274>)
 8000330:	7f1a      	ldrb	r2, [r3, #28]
 8000332:	4b7b      	ldr	r3, [pc, #492]	@ (8000520 <eepromKontrol+0x2ec>)
 8000334:	701a      	strb	r2, [r3, #0]
	calismaCount = eepromData[29];
 8000336:	4b5c      	ldr	r3, [pc, #368]	@ (80004a8 <eepromKontrol+0x274>)
 8000338:	7f5a      	ldrb	r2, [r3, #29]
 800033a:	4b7a      	ldr	r3, [pc, #488]	@ (8000524 <eepromKontrol+0x2f0>)
 800033c:	701a      	strb	r2, [r3, #0]
	calismaCountDemo = eepromData[30];
 800033e:	4b5a      	ldr	r3, [pc, #360]	@ (80004a8 <eepromKontrol+0x274>)
 8000340:	7f9a      	ldrb	r2, [r3, #30]
 8000342:	4b79      	ldr	r3, [pc, #484]	@ (8000528 <eepromKontrol+0x2f4>)
 8000344:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8000346:	4b58      	ldr	r3, [pc, #352]	@ (80004a8 <eepromKontrol+0x274>)
 8000348:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800034c:	4b77      	ldr	r3, [pc, #476]	@ (800052c <eepromKontrol+0x2f8>)
 800034e:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000350:	4b55      	ldr	r3, [pc, #340]	@ (80004a8 <eepromKontrol+0x274>)
 8000352:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000356:	4b76      	ldr	r3, [pc, #472]	@ (8000530 <eepromKontrol+0x2fc>)
 8000358:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800035a:	4b53      	ldr	r3, [pc, #332]	@ (80004a8 <eepromKontrol+0x274>)
 800035c:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000360:	4b74      	ldr	r3, [pc, #464]	@ (8000534 <eepromKontrol+0x300>)
 8000362:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000364:	4b50      	ldr	r3, [pc, #320]	@ (80004a8 <eepromKontrol+0x274>)
 8000366:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800036a:	4b73      	ldr	r3, [pc, #460]	@ (8000538 <eepromKontrol+0x304>)
 800036c:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 800036e:	4b4e      	ldr	r3, [pc, #312]	@ (80004a8 <eepromKontrol+0x274>)
 8000370:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000374:	4b71      	ldr	r3, [pc, #452]	@ (800053c <eepromKontrol+0x308>)
 8000376:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8000378:	4b4b      	ldr	r3, [pc, #300]	@ (80004a8 <eepromKontrol+0x274>)
 800037a:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 800037e:	4b70      	ldr	r3, [pc, #448]	@ (8000540 <eepromKontrol+0x30c>)
 8000380:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8000382:	4b49      	ldr	r3, [pc, #292]	@ (80004a8 <eepromKontrol+0x274>)
 8000384:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8000388:	4b6e      	ldr	r3, [pc, #440]	@ (8000544 <eepromKontrol+0x310>)
 800038a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 800038c:	4b46      	ldr	r3, [pc, #280]	@ (80004a8 <eepromKontrol+0x274>)
 800038e:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 8000392:	4b6d      	ldr	r3, [pc, #436]	@ (8000548 <eepromKontrol+0x314>)
 8000394:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8000396:	4b44      	ldr	r3, [pc, #272]	@ (80004a8 <eepromKontrol+0x274>)
 8000398:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800039c:	4b6b      	ldr	r3, [pc, #428]	@ (800054c <eepromKontrol+0x318>)
 800039e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003a0:	4b41      	ldr	r3, [pc, #260]	@ (80004a8 <eepromKontrol+0x274>)
 80003a2:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003a6:	4b6a      	ldr	r3, [pc, #424]	@ (8000550 <eepromKontrol+0x31c>)
 80003a8:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003aa:	4b3f      	ldr	r3, [pc, #252]	@ (80004a8 <eepromKontrol+0x274>)
 80003ac:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003b0:	4b68      	ldr	r3, [pc, #416]	@ (8000554 <eepromKontrol+0x320>)
 80003b2:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003b4:	4b3c      	ldr	r3, [pc, #240]	@ (80004a8 <eepromKontrol+0x274>)
 80003b6:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003ba:	4b67      	ldr	r3, [pc, #412]	@ (8000558 <eepromKontrol+0x324>)
 80003bc:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003be:	4b3a      	ldr	r3, [pc, #232]	@ (80004a8 <eepromKontrol+0x274>)
 80003c0:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003c4:	4b65      	ldr	r3, [pc, #404]	@ (800055c <eepromKontrol+0x328>)
 80003c6:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003c8:	4b37      	ldr	r3, [pc, #220]	@ (80004a8 <eepromKontrol+0x274>)
 80003ca:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003ce:	4b64      	ldr	r3, [pc, #400]	@ (8000560 <eepromKontrol+0x32c>)
 80003d0:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80003d2:	4b39      	ldr	r3, [pc, #228]	@ (80004b8 <eepromKontrol+0x284>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	2b01      	cmp	r3, #1
 80003d8:	d902      	bls.n	80003e0 <eepromKontrol+0x1ac>
	    calismaSekli=0;
 80003da:	4b37      	ldr	r3, [pc, #220]	@ (80004b8 <eepromKontrol+0x284>)
 80003dc:	2200      	movs	r2, #0
 80003de:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80003e0:	4b36      	ldr	r3, [pc, #216]	@ (80004bc <eepromKontrol+0x288>)
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d902      	bls.n	80003ee <eepromKontrol+0x1ba>
	    emniyetCercevesi=1;
 80003e8:	4b34      	ldr	r3, [pc, #208]	@ (80004bc <eepromKontrol+0x288>)
 80003ea:	2201      	movs	r2, #1
 80003ec:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80003ee:	4b34      	ldr	r3, [pc, #208]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f0:	781b      	ldrb	r3, [r3, #0]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d902      	bls.n	80003fc <eepromKontrol+0x1c8>
	    yavaslamaLimit=0;
 80003f6:	4b32      	ldr	r3, [pc, #200]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 80003fc:	4b31      	ldr	r3, [pc, #196]	@ (80004c4 <eepromKontrol+0x290>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	2b01      	cmp	r3, #1
 8000402:	d902      	bls.n	800040a <eepromKontrol+0x1d6>
	    altLimit=1;
 8000404:	4b2f      	ldr	r3, [pc, #188]	@ (80004c4 <eepromKontrol+0x290>)
 8000406:	2201      	movs	r2, #1
 8000408:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800040a:	4b2f      	ldr	r3, [pc, #188]	@ (80004c8 <eepromKontrol+0x294>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b01      	cmp	r3, #1
 8000410:	d902      	bls.n	8000418 <eepromKontrol+0x1e4>
	    basincSalteri=1;
 8000412:	4b2d      	ldr	r3, [pc, #180]	@ (80004c8 <eepromKontrol+0x294>)
 8000414:	2201      	movs	r2, #1
 8000416:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8000418:	4b2c      	ldr	r3, [pc, #176]	@ (80004cc <eepromKontrol+0x298>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b03      	cmp	r3, #3
 800041e:	d902      	bls.n	8000426 <eepromKontrol+0x1f2>
	    kapiSecimleri=3;
 8000420:	4b2a      	ldr	r3, [pc, #168]	@ (80004cc <eepromKontrol+0x298>)
 8000422:	2203      	movs	r2, #3
 8000424:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000426:	4b44      	ldr	r3, [pc, #272]	@ (8000538 <eepromKontrol+0x304>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d902      	bls.n	8000434 <eepromKontrol+0x200>
	    kapiAcTipi=0;
 800042e:	4b42      	ldr	r3, [pc, #264]	@ (8000538 <eepromKontrol+0x304>)
 8000430:	2200      	movs	r2, #0
 8000432:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8000434:	4b26      	ldr	r3, [pc, #152]	@ (80004d0 <eepromKontrol+0x29c>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b02      	cmp	r3, #2
 800043a:	d902      	bls.n	8000442 <eepromKontrol+0x20e>
	    kapi1Tip=1;
 800043c:	4b24      	ldr	r3, [pc, #144]	@ (80004d0 <eepromKontrol+0x29c>)
 800043e:	2201      	movs	r2, #1
 8000440:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8000442:	4b24      	ldr	r3, [pc, #144]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	2b05      	cmp	r3, #5
 8000448:	d902      	bls.n	8000450 <eepromKontrol+0x21c>
	    kapi1AcSure=5;
 800044a:	4b22      	ldr	r3, [pc, #136]	@ (80004d4 <eepromKontrol+0x2a0>)
 800044c:	2205      	movs	r2, #5
 800044e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8000450:	4b21      	ldr	r3, [pc, #132]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000452:	781b      	ldrb	r3, [r3, #0]
 8000454:	2b02      	cmp	r3, #2
 8000456:	d902      	bls.n	800045e <eepromKontrol+0x22a>
	    kapi2Tip=1;
 8000458:	4b1f      	ldr	r3, [pc, #124]	@ (80004d8 <eepromKontrol+0x2a4>)
 800045a:	2201      	movs	r2, #1
 800045c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800045e:	4b1f      	ldr	r3, [pc, #124]	@ (80004dc <eepromKontrol+0x2a8>)
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b05      	cmp	r3, #5
 8000464:	d902      	bls.n	800046c <eepromKontrol+0x238>
	    kapi2AcSure=5;
 8000466:	4b1d      	ldr	r3, [pc, #116]	@ (80004dc <eepromKontrol+0x2a8>)
 8000468:	2205      	movs	r2, #5
 800046a:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 800046c:	4b1c      	ldr	r3, [pc, #112]	@ (80004e0 <eepromKontrol+0x2ac>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b02      	cmp	r3, #2
 8000472:	d902      	bls.n	800047a <eepromKontrol+0x246>
	    kapitablaTip=1;
 8000474:	4b1a      	ldr	r3, [pc, #104]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000476:	2201      	movs	r2, #1
 8000478:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 800047a:	4b2d      	ldr	r3, [pc, #180]	@ (8000530 <eepromKontrol+0x2fc>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b02      	cmp	r3, #2
 8000480:	d902      	bls.n	8000488 <eepromKontrol+0x254>
	    kapiTablaAcKonum=2;
 8000482:	4b2b      	ldr	r3, [pc, #172]	@ (8000530 <eepromKontrol+0x2fc>)
 8000484:	2202      	movs	r2, #2
 8000486:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8000488:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <eepromKontrol+0x2b0>)
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2b05      	cmp	r3, #5
 800048e:	d902      	bls.n	8000496 <eepromKontrol+0x262>
	    kapiTablaAcSure=5;
 8000490:	4b14      	ldr	r3, [pc, #80]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000492:	2205      	movs	r2, #5
 8000494:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8000496:	4b14      	ldr	r3, [pc, #80]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000498:	781b      	ldrb	r3, [r3, #0]
 800049a:	2b01      	cmp	r3, #1
 800049c:	d962      	bls.n	8000564 <eepromKontrol+0x330>
	    yukariYavasLimit=0;
 800049e:	4b12      	ldr	r3, [pc, #72]	@ (80004e8 <eepromKontrol+0x2b4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	e05e      	b.n	8000564 <eepromKontrol+0x330>
 80004a6:	bf00      	nop
 80004a8:	20000fec 	.word	0x20000fec
 80004ac:	20001090 	.word	0x20001090
 80004b0:	200010e7 	.word	0x200010e7
 80004b4:	20001091 	.word	0x20001091
 80004b8:	200010bd 	.word	0x200010bd
 80004bc:	200010c0 	.word	0x200010c0
 80004c0:	200010c1 	.word	0x200010c1
 80004c4:	200010c2 	.word	0x200010c2
 80004c8:	200010c3 	.word	0x200010c3
 80004cc:	200010c4 	.word	0x200010c4
 80004d0:	200010c5 	.word	0x200010c5
 80004d4:	200010d5 	.word	0x200010d5
 80004d8:	200010c6 	.word	0x200010c6
 80004dc:	200010d6 	.word	0x200010d6
 80004e0:	200010c7 	.word	0x200010c7
 80004e4:	200010d7 	.word	0x200010d7
 80004e8:	200010ca 	.word	0x200010ca
 80004ec:	200010cb 	.word	0x200010cb
 80004f0:	200010cc 	.word	0x200010cc
 80004f4:	200010cd 	.word	0x200010cd
 80004f8:	200010ce 	.word	0x200010ce
 80004fc:	200010cf 	.word	0x200010cf
 8000500:	200010d0 	.word	0x200010d0
 8000504:	200010d1 	.word	0x200010d1
 8000508:	200010d2 	.word	0x200010d2
 800050c:	200010d3 	.word	0x200010d3
 8000510:	200010d4 	.word	0x200010d4
 8000514:	200010d8 	.word	0x200010d8
 8000518:	200010da 	.word	0x200010da
 800051c:	200010b4 	.word	0x200010b4
 8000520:	200010b5 	.word	0x200010b5
 8000524:	200010b6 	.word	0x200010b6
 8000528:	200010b7 	.word	0x200010b7
 800052c:	200010dc 	.word	0x200010dc
 8000530:	200010c9 	.word	0x200010c9
 8000534:	200010db 	.word	0x200010db
 8000538:	200010c8 	.word	0x200010c8
 800053c:	200010dd 	.word	0x200010dd
 8000540:	200010de 	.word	0x200010de
 8000544:	200010df 	.word	0x200010df
 8000548:	200010e0 	.word	0x200010e0
 800054c:	200010e1 	.word	0x200010e1
 8000550:	200010e2 	.word	0x200010e2
 8000554:	200010e3 	.word	0x200010e3
 8000558:	200010e4 	.word	0x200010e4
 800055c:	200010e5 	.word	0x200010e5
 8000560:	200010e6 	.word	0x200010e6
	}

	if(devirmeYuruyusSecim>2) {
 8000564:	4b40      	ldr	r3, [pc, #256]	@ (8000668 <eepromKontrol+0x434>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d902      	bls.n	8000572 <eepromKontrol+0x33e>
	    devirmeYuruyusSecim=0;
 800056c:	4b3e      	ldr	r3, [pc, #248]	@ (8000668 <eepromKontrol+0x434>)
 800056e:	2200      	movs	r2, #0
 8000570:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8000572:	4b3e      	ldr	r3, [pc, #248]	@ (800066c <eepromKontrol+0x438>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d902      	bls.n	8000580 <eepromKontrol+0x34c>
	    devirmeYukariIleriLimit=1;
 800057a:	4b3c      	ldr	r3, [pc, #240]	@ (800066c <eepromKontrol+0x438>)
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8000580:	4b3b      	ldr	r3, [pc, #236]	@ (8000670 <eepromKontrol+0x43c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b01      	cmp	r3, #1
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    devirmeAsagiGeriLimit=1;
 8000588:	4b39      	ldr	r3, [pc, #228]	@ (8000670 <eepromKontrol+0x43c>)
 800058a:	2201      	movs	r2, #1
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800058e:	4b39      	ldr	r3, [pc, #228]	@ (8000674 <eepromKontrol+0x440>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b01      	cmp	r3, #1
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    devirmeSilindirTipi=0;
 8000596:	4b37      	ldr	r3, [pc, #220]	@ (8000674 <eepromKontrol+0x440>)
 8000598:	2200      	movs	r2, #0
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800059c:	4b36      	ldr	r3, [pc, #216]	@ (8000678 <eepromKontrol+0x444>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    platformSilindirTipi=0;
 80005a4:	4b34      	ldr	r3, [pc, #208]	@ (8000678 <eepromKontrol+0x444>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80005aa:	4b34      	ldr	r3, [pc, #208]	@ (800067c <eepromKontrol+0x448>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b05      	cmp	r3, #5
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    yukariValfTmr=0;
 80005b2:	4b32      	ldr	r3, [pc, #200]	@ (800067c <eepromKontrol+0x448>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80005b8:	4b31      	ldr	r3, [pc, #196]	@ (8000680 <eepromKontrol+0x44c>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b05      	cmp	r3, #5
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    asagiValfTmr=0;
 80005c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000680 <eepromKontrol+0x44c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80005c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000684 <eepromKontrol+0x450>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    devirmeYukariIleriTmr=0;
 80005ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000684 <eepromKontrol+0x450>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80005d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000688 <eepromKontrol+0x454>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b05      	cmp	r3, #5
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    devirmeAsagiGeriTmr=0;
 80005dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000688 <eepromKontrol+0x454>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80005e2:	4b2a      	ldr	r3, [pc, #168]	@ (800068c <eepromKontrol+0x458>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2bb4      	cmp	r3, #180	@ 0xb4
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    makineCalismaTmr=60;
 80005ea:	4b28      	ldr	r3, [pc, #160]	@ (800068c <eepromKontrol+0x458>)
 80005ec:	223c      	movs	r2, #60	@ 0x3c
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80005f0:	4b27      	ldr	r3, [pc, #156]	@ (8000690 <eepromKontrol+0x45c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    buzzer=0;
 80005f8:	4b25      	ldr	r3, [pc, #148]	@ (8000690 <eepromKontrol+0x45c>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 80005fe:	4b25      	ldr	r3, [pc, #148]	@ (8000694 <eepromKontrol+0x460>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    demoMode=0;
 8000606:	4b23      	ldr	r3, [pc, #140]	@ (8000694 <eepromKontrol+0x460>)
 8000608:	2200      	movs	r2, #0
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800060c:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <eepromKontrol+0x464>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    calismaSayModu=0;
 8000614:	4b20      	ldr	r3, [pc, #128]	@ (8000698 <eepromKontrol+0x464>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 800061a:	4b20      	ldr	r3, [pc, #128]	@ (800069c <eepromKontrol+0x468>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    dilSecim=0;
 8000622:	4b1e      	ldr	r3, [pc, #120]	@ (800069c <eepromKontrol+0x468>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8000628:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <eepromKontrol+0x46c>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
		iotMode=0;
 8000630:	4b1b      	ldr	r3, [pc, #108]	@ (80006a0 <eepromKontrol+0x46c>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f000 f936 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 800063c:	20fa      	movs	r0, #250	@ 0xfa
 800063e:	f009 fab7 	bl	8009bb0 <HAL_Delay>

	convertArrays(2);
 8000642:	2002      	movs	r0, #2
 8000644:	f000 f930 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 8000648:	20fa      	movs	r0, #250	@ 0xfa
 800064a:	f009 fab1 	bl	8009bb0 <HAL_Delay>

	convertArrays(3);
 800064e:	2003      	movs	r0, #3
 8000650:	f000 f92a 	bl	80008a8 <convertArrays>
	HAL_Delay(250);
 8000654:	20fa      	movs	r0, #250	@ 0xfa
 8000656:	f009 faab 	bl	8009bb0 <HAL_Delay>

	loadMenuTexts(dilSecim);
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <eepromKontrol+0x468>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f005 fde4 	bl	800622c <loadMenuTexts>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200010cb 	.word	0x200010cb
 800066c:	200010cc 	.word	0x200010cc
 8000670:	200010cd 	.word	0x200010cd
 8000674:	200010ce 	.word	0x200010ce
 8000678:	200010cf 	.word	0x200010cf
 800067c:	200010d0 	.word	0x200010d0
 8000680:	200010d1 	.word	0x200010d1
 8000684:	200010d2 	.word	0x200010d2
 8000688:	200010d3 	.word	0x200010d3
 800068c:	200010d4 	.word	0x200010d4
 8000690:	200010d8 	.word	0x200010d8
 8000694:	200010da 	.word	0x200010da
 8000698:	200010db 	.word	0x200010db
 800069c:	200010dc 	.word	0x200010dc
 80006a0:	200010e7 	.word	0x200010e7

080006a4 <saveEEPROM>:

    HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, sizeof(eepromData), eepromData, sizeof(eepromData), 3000);
    HAL_Delay(1000);
}

void saveEEPROM(int resultText) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
	EEPROM_Write(0, 0, eepromData, 110);
 80006ac:	236e      	movs	r3, #110	@ 0x6e
 80006ae:	4a0b      	ldr	r2, [pc, #44]	@ (80006dc <saveEEPROM+0x38>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	2000      	movs	r0, #0
 80006b4:	f000 f816 	bl	80006e4 <EEPROM_Write>

    if(resultText == 1) {
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d104      	bne.n	80006c8 <saveEEPROM+0x24>
    	lcd_print(2, 1, dataYazildiText);
 80006be:	4a08      	ldr	r2, [pc, #32]	@ (80006e0 <saveEEPROM+0x3c>)
 80006c0:	2101      	movs	r1, #1
 80006c2:	2002      	movs	r0, #2
 80006c4:	f008 fd1a 	bl	80090fc <lcd_print>
    }

    // Ekranı temizle
    HAL_Delay(500);
 80006c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006cc:	f009 fa70 	bl	8009bb0 <HAL_Delay>
    lcd_clear();
 80006d0:	f008 fd40 	bl	8009154 <lcd_clear>
}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000fec 	.word	0x20000fec
 80006e0:	20001860 	.word	0x20001860

080006e4 <EEPROM_Write>:

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08e      	sub	sp, #56	@ 0x38
 80006e8:	af04      	add	r7, sp, #16
 80006ea:	60ba      	str	r2, [r7, #8]
 80006ec:	461a      	mov	r2, r3
 80006ee:	4603      	mov	r3, r0
 80006f0:	81fb      	strh	r3, [r7, #14]
 80006f2:	460b      	mov	r3, r1
 80006f4:	81bb      	strh	r3, [r7, #12]
 80006f6:	4613      	mov	r3, r2
 80006f8:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80006fa:	2306      	movs	r3, #6
 80006fc:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80006fe:	89fb      	ldrh	r3, [r7, #14]
 8000700:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000702:	88fa      	ldrh	r2, [r7, #6]
 8000704:	89bb      	ldrh	r3, [r7, #12]
 8000706:	4413      	add	r3, r2
 8000708:	2b00      	cmp	r3, #0
 800070a:	da00      	bge.n	800070e <EEPROM_Write+0x2a>
 800070c:	333f      	adds	r3, #63	@ 0x3f
 800070e:	119b      	asrs	r3, r3, #6
 8000710:	b29a      	uxth	r2, r3
 8000712:	89fb      	ldrh	r3, [r7, #14]
 8000714:	4413      	add	r3, r2
 8000716:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 8000718:	8afa      	ldrh	r2, [r7, #22]
 800071a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800071c:	1ad3      	subs	r3, r2, r3
 800071e:	b29b      	uxth	r3, r3
 8000720:	3301      	adds	r3, #1
 8000722:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 8000728:	2300      	movs	r3, #0
 800072a:	623b      	str	r3, [r7, #32]
 800072c:	e041      	b.n	80007b2 <EEPROM_Write+0xce>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 800072e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000730:	69bb      	ldr	r3, [r7, #24]
 8000732:	fa02 f303 	lsl.w	r3, r2, r3
 8000736:	b21a      	sxth	r2, r3
 8000738:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800073c:	4313      	orrs	r3, r2
 800073e:	b21b      	sxth	r3, r3
 8000740:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000742:	89bb      	ldrh	r3, [r7, #12]
 8000744:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000748:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800074a:	8bfa      	ldrh	r2, [r7, #30]
 800074c:	88fb      	ldrh	r3, [r7, #6]
 800074e:	429a      	cmp	r2, r3
 8000750:	d901      	bls.n	8000756 <EEPROM_Write+0x72>
            bytesremaining = size;
 8000752:	88fb      	ldrh	r3, [r7, #6]
 8000754:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 8000756:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000758:	68ba      	ldr	r2, [r7, #8]
 800075a:	4413      	add	r3, r2
 800075c:	8a79      	ldrh	r1, [r7, #18]
 800075e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000762:	9202      	str	r2, [sp, #8]
 8000764:	8bfa      	ldrh	r2, [r7, #30]
 8000766:	9201      	str	r2, [sp, #4]
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2310      	movs	r3, #16
 800076c:	460a      	mov	r2, r1
 800076e:	21a0      	movs	r1, #160	@ 0xa0
 8000770:	4813      	ldr	r0, [pc, #76]	@ (80007c0 <EEPROM_Write+0xdc>)
 8000772:	f00a faa7 	bl	800acc4 <HAL_I2C_Mem_Write>
 8000776:	4603      	mov	r3, r0
 8000778:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800077a:	7c7b      	ldrb	r3, [r7, #17]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d005      	beq.n	800078c <EEPROM_Write+0xa8>
            lcd_print(2, 1, "Hata: EEPROM    ");
 8000780:	4a10      	ldr	r2, [pc, #64]	@ (80007c4 <EEPROM_Write+0xe0>)
 8000782:	2101      	movs	r1, #1
 8000784:	2002      	movs	r0, #2
 8000786:	f008 fcb9 	bl	80090fc <lcd_print>
            return;
 800078a:	e016      	b.n	80007ba <EEPROM_Write+0xd6>
        }

        startPage += 1;
 800078c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800078e:	3301      	adds	r3, #1
 8000790:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 8000796:	88fa      	ldrh	r2, [r7, #6]
 8000798:	8bfb      	ldrh	r3, [r7, #30]
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 800079e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80007a0:	8bfb      	ldrh	r3, [r7, #30]
 80007a2:	4413      	add	r3, r2
 80007a4:	84bb      	strh	r3, [r7, #36]	@ 0x24

        HAL_Delay(5);
 80007a6:	2005      	movs	r0, #5
 80007a8:	f009 fa02 	bl	8009bb0 <HAL_Delay>
    for (int i = 0; i < numofpages; i++) {
 80007ac:	6a3b      	ldr	r3, [r7, #32]
 80007ae:	3301      	adds	r3, #1
 80007b0:	623b      	str	r3, [r7, #32]
 80007b2:	8abb      	ldrh	r3, [r7, #20]
 80007b4:	6a3a      	ldr	r2, [r7, #32]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	dbb9      	blt.n	800072e <EEPROM_Write+0x4a>
    }
}
 80007ba:	3728      	adds	r7, #40	@ 0x28
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	2000193c 	.word	0x2000193c
 80007c4:	0800e2f0 	.word	0x0800e2f0

080007c8 <EEPROM_Read>:

void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08e      	sub	sp, #56	@ 0x38
 80007cc:	af04      	add	r7, sp, #16
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	461a      	mov	r2, r3
 80007d2:	4603      	mov	r3, r0
 80007d4:	81fb      	strh	r3, [r7, #14]
 80007d6:	460b      	mov	r3, r1
 80007d8:	81bb      	strh	r3, [r7, #12]
 80007da:	4613      	mov	r3, r2
 80007dc:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80007de:	2306      	movs	r3, #6
 80007e0:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80007e2:	89fb      	ldrh	r3, [r7, #14]
 80007e4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 80007e6:	88fa      	ldrh	r2, [r7, #6]
 80007e8:	89bb      	ldrh	r3, [r7, #12]
 80007ea:	4413      	add	r3, r2
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	da00      	bge.n	80007f2 <EEPROM_Read+0x2a>
 80007f0:	333f      	adds	r3, #63	@ 0x3f
 80007f2:	119b      	asrs	r3, r3, #6
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	89fb      	ldrh	r3, [r7, #14]
 80007f8:	4413      	add	r3, r2
 80007fa:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 80007fc:	8afa      	ldrh	r2, [r7, #22]
 80007fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000800:	1ad3      	subs	r3, r2, r3
 8000802:	b29b      	uxth	r3, r3
 8000804:	3301      	adds	r3, #1
 8000806:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 800080c:	2300      	movs	r3, #0
 800080e:	623b      	str	r3, [r7, #32]
 8000810:	e03e      	b.n	8000890 <EEPROM_Read+0xc8>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 8000812:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000814:	69bb      	ldr	r3, [r7, #24]
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	b21a      	sxth	r2, r3
 800081c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000820:	4313      	orrs	r3, r2
 8000822:	b21b      	sxth	r3, r3
 8000824:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000826:	89bb      	ldrh	r3, [r7, #12]
 8000828:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800082c:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800082e:	8bfa      	ldrh	r2, [r7, #30]
 8000830:	88fb      	ldrh	r3, [r7, #6]
 8000832:	429a      	cmp	r2, r3
 8000834:	d901      	bls.n	800083a <EEPROM_Read+0x72>
            bytesremaining = size;
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 800083a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800083c:	68ba      	ldr	r2, [r7, #8]
 800083e:	4413      	add	r3, r2
 8000840:	8a79      	ldrh	r1, [r7, #18]
 8000842:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000846:	9202      	str	r2, [sp, #8]
 8000848:	8bfa      	ldrh	r2, [r7, #30]
 800084a:	9201      	str	r2, [sp, #4]
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2310      	movs	r3, #16
 8000850:	460a      	mov	r2, r1
 8000852:	21a0      	movs	r1, #160	@ 0xa0
 8000854:	4812      	ldr	r0, [pc, #72]	@ (80008a0 <EEPROM_Read+0xd8>)
 8000856:	f00a fb2f 	bl	800aeb8 <HAL_I2C_Mem_Read>
 800085a:	4603      	mov	r3, r0
 800085c:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800085e:	7c7b      	ldrb	r3, [r7, #17]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d005      	beq.n	8000870 <EEPROM_Read+0xa8>
            lcd_print(2, 1, "Hata: EEPROM OKU");
 8000864:	4a0f      	ldr	r2, [pc, #60]	@ (80008a4 <EEPROM_Read+0xdc>)
 8000866:	2101      	movs	r1, #1
 8000868:	2002      	movs	r0, #2
 800086a:	f008 fc47 	bl	80090fc <lcd_print>
            return;
 800086e:	e013      	b.n	8000898 <EEPROM_Read+0xd0>
        }

        startPage += 1;
 8000870:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000872:	3301      	adds	r3, #1
 8000874:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 800087a:	88fa      	ldrh	r2, [r7, #6]
 800087c:	8bfb      	ldrh	r3, [r7, #30]
 800087e:	1ad3      	subs	r3, r2, r3
 8000880:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 8000882:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000884:	8bfb      	ldrh	r3, [r7, #30]
 8000886:	4413      	add	r3, r2
 8000888:	84bb      	strh	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < numofpages; i++) {
 800088a:	6a3b      	ldr	r3, [r7, #32]
 800088c:	3301      	adds	r3, #1
 800088e:	623b      	str	r3, [r7, #32]
 8000890:	8abb      	ldrh	r3, [r7, #20]
 8000892:	6a3a      	ldr	r2, [r7, #32]
 8000894:	429a      	cmp	r2, r3
 8000896:	dbbc      	blt.n	8000812 <EEPROM_Read+0x4a>
    }
}
 8000898:	3728      	adds	r7, #40	@ 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2000193c 	.word	0x2000193c
 80008a4:	0800e304 	.word	0x0800e304

080008a8 <convertArrays>:

void convertArrays(int state) {
 80008a8:	b480      	push	{r7}
 80008aa:	b08b      	sub	sp, #44	@ 0x2c
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d11d      	bne.n	80008f2 <convertArrays+0x4a>
		int eepromVal = idStartPos;
 80008b6:	4b34      	ldr	r3, [pc, #208]	@ (8000988 <convertArrays+0xe0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008bc:	2300      	movs	r3, #0
 80008be:	623b      	str	r3, [r7, #32]
 80008c0:	e013      	b.n	80008ea <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 80008c2:	4a32      	ldr	r2, [pc, #200]	@ (800098c <convertArrays+0xe4>)
 80008c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c6:	4413      	add	r3, r2
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 80008cc:	4a30      	ldr	r2, [pc, #192]	@ (8000990 <convertArrays+0xe8>)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4413      	add	r3, r2
 80008d2:	7819      	ldrb	r1, [r3, #0]
 80008d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000994 <convertArrays+0xec>)
 80008d6:	6a3b      	ldr	r3, [r7, #32]
 80008d8:	4413      	add	r3, r2
 80008da:	460a      	mov	r2, r1
 80008dc:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 80008de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e0:	3301      	adds	r3, #1
 80008e2:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008e4:	6a3b      	ldr	r3, [r7, #32]
 80008e6:	3301      	adds	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
 80008ea:	6a3b      	ldr	r3, [r7, #32]
 80008ec:	2b0b      	cmp	r3, #11
 80008ee:	dde8      	ble.n	80008c2 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 80008f0:	e045      	b.n	800097e <convertArrays+0xd6>
	} else if(state == 2) {
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d121      	bne.n	800093c <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 80008f8:	4b27      	ldr	r3, [pc, #156]	@ (8000998 <convertArrays+0xf0>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	e017      	b.n	8000934 <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 8000904:	4a21      	ldr	r2, [pc, #132]	@ (800098c <convertArrays+0xe4>)
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	4413      	add	r3, r2
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d00e      	beq.n	800092e <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 8000910:	4a1e      	ldr	r2, [pc, #120]	@ (800098c <convertArrays+0xe4>)
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	4413      	add	r3, r2
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	461a      	mov	r2, r3
 800091a:	4b20      	ldr	r3, [pc, #128]	@ (800099c <convertArrays+0xf4>)
 800091c:	5c99      	ldrb	r1, [r3, r2]
 800091e:	4a20      	ldr	r2, [pc, #128]	@ (80009a0 <convertArrays+0xf8>)
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	4413      	add	r3, r2
 8000924:	460a      	mov	r2, r1
 8000926:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	3301      	adds	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	3301      	adds	r3, #1
 8000932:	61bb      	str	r3, [r7, #24]
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	2b0f      	cmp	r3, #15
 8000938:	dde4      	ble.n	8000904 <convertArrays+0x5c>
}
 800093a:	e020      	b.n	800097e <convertArrays+0xd6>
		int eepromVal = passStartPos;
 800093c:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <convertArrays+0xfc>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	e017      	b.n	8000978 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 8000948:	4a10      	ldr	r2, [pc, #64]	@ (800098c <convertArrays+0xe4>)
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	4413      	add	r3, r2
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d00e      	beq.n	8000972 <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 8000954:	4a0d      	ldr	r2, [pc, #52]	@ (800098c <convertArrays+0xe4>)
 8000956:	697b      	ldr	r3, [r7, #20]
 8000958:	4413      	add	r3, r2
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b0f      	ldr	r3, [pc, #60]	@ (800099c <convertArrays+0xf4>)
 8000960:	5c99      	ldrb	r1, [r3, r2]
 8000962:	4a11      	ldr	r2, [pc, #68]	@ (80009a8 <convertArrays+0x100>)
 8000964:	693b      	ldr	r3, [r7, #16]
 8000966:	4413      	add	r3, r2
 8000968:	460a      	mov	r2, r1
 800096a:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	3301      	adds	r3, #1
 8000970:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000972:	693b      	ldr	r3, [r7, #16]
 8000974:	3301      	adds	r3, #1
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]
 800097a:	2b0f      	cmp	r3, #15
 800097c:	dde4      	ble.n	8000948 <convertArrays+0xa0>
}
 800097e:	bf00      	nop
 8000980:	372c      	adds	r7, #44	@ 0x2c
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	20000000 	.word	0x20000000
 800098c:	20000fec 	.word	0x20000fec
 8000990:	2000000c 	.word	0x2000000c
 8000994:	20001064 	.word	0x20001064
 8000998:	20000004 	.word	0x20000004
 800099c:	20000018 	.word	0x20000018
 80009a0:	20001070 	.word	0x20001070
 80009a4:	20000008 	.word	0x20000008
 80009a8:	20001080 	.word	0x20001080

080009ac <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"
#include "GlobalVariables.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b09f      	sub	sp, #124	@ 0x7c
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 80009b8:	4948      	ldr	r1, [pc, #288]	@ (8000adc <ESP8266_Init+0x130>)
 80009ba:	4849      	ldr	r0, [pc, #292]	@ (8000ae0 <ESP8266_Init+0x134>)
 80009bc:	f00d f84a 	bl	800da54 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009c0:	4847      	ldr	r0, [pc, #284]	@ (8000ae0 <ESP8266_Init+0x134>)
 80009c2:	f7ff fc2f 	bl	8000224 <strlen>
 80009c6:	4603      	mov	r3, r0
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	461a      	mov	r2, r3
 80009cc:	4944      	ldr	r1, [pc, #272]	@ (8000ae0 <ESP8266_Init+0x134>)
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f00c f9ba 	bl	800cd48 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 80009d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009d8:	f009 f8ea 	bl	8009bb0 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 80009dc:	4941      	ldr	r1, [pc, #260]	@ (8000ae4 <ESP8266_Init+0x138>)
 80009de:	4840      	ldr	r0, [pc, #256]	@ (8000ae0 <ESP8266_Init+0x134>)
 80009e0:	f00d f838 	bl	800da54 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009e4:	483e      	ldr	r0, [pc, #248]	@ (8000ae0 <ESP8266_Init+0x134>)
 80009e6:	f7ff fc1d 	bl	8000224 <strlen>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	461a      	mov	r2, r3
 80009f0:	493b      	ldr	r1, [pc, #236]	@ (8000ae0 <ESP8266_Init+0x134>)
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f00c f9a8 	bl	800cd48 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 80009f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009fc:	f009 f8d8 	bl	8009bb0 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000a00:	4939      	ldr	r1, [pc, #228]	@ (8000ae8 <ESP8266_Init+0x13c>)
 8000a02:	4837      	ldr	r0, [pc, #220]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000a04:	f00d f826 	bl	800da54 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000a08:	4835      	ldr	r0, [pc, #212]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000a0a:	f7ff fc0b 	bl	8000224 <strlen>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	461a      	mov	r2, r3
 8000a14:	4932      	ldr	r1, [pc, #200]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000a16:	68f8      	ldr	r0, [r7, #12]
 8000a18:	f00c f996 	bl	800cd48 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a1c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a20:	f009 f8c6 	bl	8009bb0 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 8000a24:	4931      	ldr	r1, [pc, #196]	@ (8000aec <ESP8266_Init+0x140>)
 8000a26:	482e      	ldr	r0, [pc, #184]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000a28:	f00d f814 	bl	800da54 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000a2c:	482c      	ldr	r0, [pc, #176]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000a2e:	f7ff fbf9 	bl	8000224 <strlen>
 8000a32:	4603      	mov	r3, r0
 8000a34:	b29b      	uxth	r3, r3
 8000a36:	461a      	mov	r2, r3
 8000a38:	4929      	ldr	r1, [pc, #164]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f00c f984 	bl	800cd48 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a40:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a44:	f009 f8b4 	bl	8009bb0 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4a28      	ldr	r2, [pc, #160]	@ (8000af0 <ESP8266_Init+0x144>)
 8000a4e:	461c      	mov	r4, r3
 8000a50:	4613      	mov	r3, r2
 8000a52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a54:	c407      	stmia	r4!, {r0, r1, r2}
 8000a56:	8023      	strh	r3, [r4, #0]
 8000a58:	3402      	adds	r4, #2
 8000a5a:	0c1b      	lsrs	r3, r3, #16
 8000a5c:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	68b9      	ldr	r1, [r7, #8]
 8000a64:	4618      	mov	r0, r3
 8000a66:	f00d f81d 	bl	800daa4 <strcat>
	strcat(str, "\",\"");
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f7ff fbd8 	bl	8000224 <strlen>
 8000a74:	4603      	mov	r3, r0
 8000a76:	461a      	mov	r2, r3
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4413      	add	r3, r2
 8000a7e:	4a1d      	ldr	r2, [pc, #116]	@ (8000af4 <ESP8266_Init+0x148>)
 8000a80:	6810      	ldr	r0, [r2, #0]
 8000a82:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	6879      	ldr	r1, [r7, #4]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f00d f80a 	bl	800daa4 <strcat>
	strcat(str, "\"\r\n");
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fbc5 	bl	8000224 <strlen>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a14      	ldr	r2, [pc, #80]	@ (8000af8 <ESP8266_Init+0x14c>)
 8000aa6:	6810      	ldr	r0, [r2, #0]
 8000aa8:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4912      	ldr	r1, [pc, #72]	@ (8000afc <ESP8266_Init+0x150>)
 8000ab2:	480b      	ldr	r0, [pc, #44]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000ab4:	f00c ffce 	bl	800da54 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000ab8:	4809      	ldr	r0, [pc, #36]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000aba:	f7ff fbb3 	bl	8000224 <strlen>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	4906      	ldr	r1, [pc, #24]	@ (8000ae0 <ESP8266_Init+0x134>)
 8000ac6:	68f8      	ldr	r0, [r7, #12]
 8000ac8:	f00c f93e 	bl	800cd48 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000acc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ad0:	f009 f86e 	bl	8009bb0 <HAL_Delay>
}
 8000ad4:	bf00      	nop
 8000ad6:	377c      	adds	r7, #124	@ 0x7c
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd90      	pop	{r4, r7, pc}
 8000adc:	0800e318 	.word	0x0800e318
 8000ae0:	20001124 	.word	0x20001124
 8000ae4:	0800e328 	.word	0x0800e328
 8000ae8:	0800e334 	.word	0x0800e334
 8000aec:	0800e33c 	.word	0x0800e33c
 8000af0:	0800e34c 	.word	0x0800e34c
 8000af4:	0800e35c 	.word	0x0800e35c
 8000af8:	0800e360 	.word	0x0800e360
 8000afc:	0800e364 	.word	0x0800e364

08000b00 <sendMachineData>:
    sprintf(bufferTX, "AT+CIPCLOSE=0");
    HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
    HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b02:	f2ad 7d7c 	subw	sp, sp, #1916	@ 0x77c
 8000b06:	af2c      	add	r7, sp, #176	@ 0xb0
 8000b08:	f507 64d9 	add.w	r4, r7, #1736	@ 0x6c8
 8000b0c:	f2a4 642c 	subw	r4, r4, #1580	@ 0x62c
 8000b10:	6020      	str	r0, [r4, #0]
 8000b12:	f507 60d9 	add.w	r0, r7, #1736	@ 0x6c8
 8000b16:	f5a0 60c6 	sub.w	r0, r0, #1584	@ 0x630
 8000b1a:	6001      	str	r1, [r0, #0]
 8000b1c:	f507 61d9 	add.w	r1, r7, #1736	@ 0x6c8
 8000b20:	f2a1 6134 	subw	r1, r1, #1588	@ 0x634
 8000b24:	600a      	str	r2, [r1, #0]
 8000b26:	f507 62d9 	add.w	r2, r7, #1736	@ 0x6c8
 8000b2a:	f5a2 62c7 	sub.w	r2, r2, #1592	@ 0x638
 8000b2e:	6013      	str	r3, [r2, #0]
	char local_txA[1500];
	char local_txB[50];
	int len;

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 8000b30:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000b34:	f5a3 63c6 	sub.w	r3, r3, #1584	@ 0x630
 8000b38:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8000b3c:	220c      	movs	r2, #12
 8000b3e:	6819      	ldr	r1, [r3, #0]
 8000b40:	f00c ffbf 	bl	800dac2 <strncpy>
	subMachineID[12] = '\0';
 8000b44:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000b48:	f2a3 6324 	subw	r3, r3, #1572	@ 0x624
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000b50:	4a9d      	ldr	r2, [pc, #628]	@ (8000dc8 <sendMachineData+0x2c8>)
 8000b52:	499e      	ldr	r1, [pc, #632]	@ (8000dcc <sendMachineData+0x2cc>)
 8000b54:	489e      	ldr	r0, [pc, #632]	@ (8000dd0 <sendMachineData+0x2d0>)
 8000b56:	f00c ff7d 	bl	800da54 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000b5a:	489d      	ldr	r0, [pc, #628]	@ (8000dd0 <sendMachineData+0x2d0>)
 8000b5c:	f7ff fb62 	bl	8000224 <strlen>
 8000b60:	4603      	mov	r3, r0
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000b68:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8000b6c:	4998      	ldr	r1, [pc, #608]	@ (8000dd0 <sendMachineData+0x2d0>)
 8000b6e:	6818      	ldr	r0, [r3, #0]
 8000b70:	f00c f8ea 	bl	800cd48 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000b74:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b78:	f009 f81a 	bl	8009bb0 <HAL_Delay>

	sprintf(local_txA,
 8000b7c:	4b95      	ldr	r3, [pc, #596]	@ (8000dd4 <sendMachineData+0x2d4>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000b84:	4b94      	ldr	r3, [pc, #592]	@ (8000dd8 <sendMachineData+0x2d8>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000b8c:	4b93      	ldr	r3, [pc, #588]	@ (8000ddc <sendMachineData+0x2dc>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000b94:	4b92      	ldr	r3, [pc, #584]	@ (8000de0 <sendMachineData+0x2e0>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000b9c:	4b91      	ldr	r3, [pc, #580]	@ (8000de4 <sendMachineData+0x2e4>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000ba2:	4b91      	ldr	r3, [pc, #580]	@ (8000de8 <sendMachineData+0x2e8>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000ba8:	4b90      	ldr	r3, [pc, #576]	@ (8000dec <sendMachineData+0x2ec>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	677b      	str	r3, [r7, #116]	@ 0x74
 8000bae:	4b90      	ldr	r3, [pc, #576]	@ (8000df0 <sendMachineData+0x2f0>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	673b      	str	r3, [r7, #112]	@ 0x70
 8000bb4:	4b8f      	ldr	r3, [pc, #572]	@ (8000df4 <sendMachineData+0x2f4>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000bba:	4b8f      	ldr	r3, [pc, #572]	@ (8000df8 <sendMachineData+0x2f8>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000bc0:	4b8e      	ldr	r3, [pc, #568]	@ (8000dfc <sendMachineData+0x2fc>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	667b      	str	r3, [r7, #100]	@ 0x64
 8000bc6:	4b8e      	ldr	r3, [pc, #568]	@ (8000e00 <sendMachineData+0x300>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	663b      	str	r3, [r7, #96]	@ 0x60
 8000bcc:	4b8d      	ldr	r3, [pc, #564]	@ (8000e04 <sendMachineData+0x304>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000bd2:	4b8d      	ldr	r3, [pc, #564]	@ (8000e08 <sendMachineData+0x308>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000bd8:	4b8c      	ldr	r3, [pc, #560]	@ (8000e0c <sendMachineData+0x30c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	657b      	str	r3, [r7, #84]	@ 0x54
 8000bde:	4b8c      	ldr	r3, [pc, #560]	@ (8000e10 <sendMachineData+0x310>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	653b      	str	r3, [r7, #80]	@ 0x50
 8000be4:	4b8b      	ldr	r3, [pc, #556]	@ (8000e14 <sendMachineData+0x314>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000bea:	4b8b      	ldr	r3, [pc, #556]	@ (8000e18 <sendMachineData+0x318>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000bf0:	4b8a      	ldr	r3, [pc, #552]	@ (8000e1c <sendMachineData+0x31c>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8000bf6:	4b8a      	ldr	r3, [pc, #552]	@ (8000e20 <sendMachineData+0x320>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	643b      	str	r3, [r7, #64]	@ 0x40
 8000bfc:	4b89      	ldr	r3, [pc, #548]	@ (8000e24 <sendMachineData+0x324>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000c02:	4b89      	ldr	r3, [pc, #548]	@ (8000e28 <sendMachineData+0x328>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c08:	4b88      	ldr	r3, [pc, #544]	@ (8000e2c <sendMachineData+0x32c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c0e:	4b88      	ldr	r3, [pc, #544]	@ (8000e30 <sendMachineData+0x330>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	633b      	str	r3, [r7, #48]	@ 0x30
 8000c14:	4b87      	ldr	r3, [pc, #540]	@ (8000e34 <sendMachineData+0x334>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c1a:	4b87      	ldr	r3, [pc, #540]	@ (8000e38 <sendMachineData+0x338>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c20:	4b86      	ldr	r3, [pc, #536]	@ (8000e3c <sendMachineData+0x33c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c26:	4b86      	ldr	r3, [pc, #536]	@ (8000e40 <sendMachineData+0x340>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	623b      	str	r3, [r7, #32]
 8000c2c:	4b85      	ldr	r3, [pc, #532]	@ (8000e44 <sendMachineData+0x344>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	61fb      	str	r3, [r7, #28]
 8000c32:	4b85      	ldr	r3, [pc, #532]	@ (8000e48 <sendMachineData+0x348>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	61bb      	str	r3, [r7, #24]
	    "GET /api/v2/machine/updateMachineRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&devirmeYuruyusSecim=%d&calismaSekli=%d&emniyetCercevesi=%d&yavaslamaLimit=%d&altLimit=%d&kapiTablaAcKonum=%d&basincSalteri=%d&kapiSecimleri=%d&kapiAcTipi=%d&kapi1Tip=%d&kapi1AcSure=%d&kapi2Tip=%d&kapi2AcSure=%d&kapitablaTip=%d&kapiTablaAcSure=%d&yukariYavasLimit=%d&devirmeYukariIleriLimit=%d&devirmeAsagiGeriLimit=%d&devirmeSilindirTipi=%d&platformSilindirTipi=%d&yukariValfTmr=%d&asagiValfTmr=%d&devirmeYukariIleriTmr=%d&devirmeAsagiGeriTmr=%d&makineCalismaTmr=%d&buzzer=%d&demoMode=%d&calismaSayisi=%d&calismaSayisiDemo=%d&dilSecim=%d&eepromData38=%d&eepromData39=%d&eepromData40=%d&eepromData41=%d&eepromData42=%d&eepromData43=%d&eepromData44=%d&eepromData45=%d&eepromData46=%d&eepromData47=%d&lcdBacklightSure=%d HTTP/1.0\r\nHost: %s\r\n\r\n",
	    subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi,
	    yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure,
	    kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit,
	    devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr,
	    makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39],
 8000c38:	4b84      	ldr	r3, [pc, #528]	@ (8000e4c <sendMachineData+0x34c>)
 8000c3a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	sprintf(local_txA,
 8000c3e:	617b      	str	r3, [r7, #20]
	    makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39],
 8000c40:	4b82      	ldr	r3, [pc, #520]	@ (8000e4c <sendMachineData+0x34c>)
 8000c42:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	sprintf(local_txA,
 8000c46:	613b      	str	r3, [r7, #16]
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c48:	4b80      	ldr	r3, [pc, #512]	@ (8000e4c <sendMachineData+0x34c>)
 8000c4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	sprintf(local_txA,
 8000c4e:	60fb      	str	r3, [r7, #12]
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c50:	4b7e      	ldr	r3, [pc, #504]	@ (8000e4c <sendMachineData+0x34c>)
 8000c52:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	sprintf(local_txA,
 8000c56:	60bb      	str	r3, [r7, #8]
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c58:	4b7c      	ldr	r3, [pc, #496]	@ (8000e4c <sendMachineData+0x34c>)
 8000c5a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	sprintf(local_txA,
 8000c5e:	607b      	str	r3, [r7, #4]
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c60:	4b7a      	ldr	r3, [pc, #488]	@ (8000e4c <sendMachineData+0x34c>)
 8000c62:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	sprintf(local_txA,
 8000c66:	603b      	str	r3, [r7, #0]
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c68:	4b78      	ldr	r3, [pc, #480]	@ (8000e4c <sendMachineData+0x34c>)
 8000c6a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	sprintf(local_txA,
 8000c6e:	461e      	mov	r6, r3
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c70:	4b76      	ldr	r3, [pc, #472]	@ (8000e4c <sendMachineData+0x34c>)
 8000c72:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	sprintf(local_txA,
 8000c76:	4618      	mov	r0, r3
	    eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000c78:	4b74      	ldr	r3, [pc, #464]	@ (8000e4c <sendMachineData+0x34c>)
 8000c7a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	sprintf(local_txA,
 8000c7e:	4619      	mov	r1, r3
	    eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000c80:	4b72      	ldr	r3, [pc, #456]	@ (8000e4c <sendMachineData+0x34c>)
 8000c82:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	sprintf(local_txA,
 8000c86:	461a      	mov	r2, r3
 8000c88:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000c8c:	f2a3 6434 	subw	r4, r3, #1588	@ 0x634
 8000c90:	f107 0ca4 	add.w	ip, r7, #164	@ 0xa4
 8000c94:	f107 05e8 	add.w	r5, r7, #232	@ 0xe8
 8000c98:	4b6d      	ldr	r3, [pc, #436]	@ (8000e50 <sendMachineData+0x350>)
 8000c9a:	932a      	str	r3, [sp, #168]	@ 0xa8
 8000c9c:	233c      	movs	r3, #60	@ 0x3c
 8000c9e:	9329      	str	r3, [sp, #164]	@ 0xa4
 8000ca0:	9228      	str	r2, [sp, #160]	@ 0xa0
 8000ca2:	9127      	str	r1, [sp, #156]	@ 0x9c
 8000ca4:	9026      	str	r0, [sp, #152]	@ 0x98
 8000ca6:	9625      	str	r6, [sp, #148]	@ 0x94
 8000ca8:	683a      	ldr	r2, [r7, #0]
 8000caa:	9224      	str	r2, [sp, #144]	@ 0x90
 8000cac:	687a      	ldr	r2, [r7, #4]
 8000cae:	9223      	str	r2, [sp, #140]	@ 0x8c
 8000cb0:	68ba      	ldr	r2, [r7, #8]
 8000cb2:	9222      	str	r2, [sp, #136]	@ 0x88
 8000cb4:	68fa      	ldr	r2, [r7, #12]
 8000cb6:	9221      	str	r2, [sp, #132]	@ 0x84
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	9220      	str	r2, [sp, #128]	@ 0x80
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	921f      	str	r2, [sp, #124]	@ 0x7c
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	921e      	str	r2, [sp, #120]	@ 0x78
 8000cc4:	69fa      	ldr	r2, [r7, #28]
 8000cc6:	921d      	str	r2, [sp, #116]	@ 0x74
 8000cc8:	6a3a      	ldr	r2, [r7, #32]
 8000cca:	921c      	str	r2, [sp, #112]	@ 0x70
 8000ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cce:	921b      	str	r2, [sp, #108]	@ 0x6c
 8000cd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cd2:	921a      	str	r2, [sp, #104]	@ 0x68
 8000cd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000cd6:	9219      	str	r2, [sp, #100]	@ 0x64
 8000cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000cda:	9218      	str	r2, [sp, #96]	@ 0x60
 8000cdc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000cde:	9217      	str	r2, [sp, #92]	@ 0x5c
 8000ce0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ce2:	9216      	str	r2, [sp, #88]	@ 0x58
 8000ce4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000ce6:	9215      	str	r2, [sp, #84]	@ 0x54
 8000ce8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000cea:	9214      	str	r2, [sp, #80]	@ 0x50
 8000cec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000cee:	9213      	str	r2, [sp, #76]	@ 0x4c
 8000cf0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000cf2:	9212      	str	r2, [sp, #72]	@ 0x48
 8000cf4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000cf6:	9211      	str	r2, [sp, #68]	@ 0x44
 8000cf8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000cfa:	9210      	str	r2, [sp, #64]	@ 0x40
 8000cfc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000cfe:	920f      	str	r2, [sp, #60]	@ 0x3c
 8000d00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000d02:	920e      	str	r2, [sp, #56]	@ 0x38
 8000d04:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000d06:	920d      	str	r2, [sp, #52]	@ 0x34
 8000d08:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d0a:	920c      	str	r2, [sp, #48]	@ 0x30
 8000d0c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000d0e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8000d10:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000d12:	920a      	str	r2, [sp, #40]	@ 0x28
 8000d14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000d16:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d18:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000d1a:	9208      	str	r2, [sp, #32]
 8000d1c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000d1e:	9207      	str	r2, [sp, #28]
 8000d20:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000d22:	9206      	str	r2, [sp, #24]
 8000d24:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d26:	9205      	str	r2, [sp, #20]
 8000d28:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000d2c:	9204      	str	r2, [sp, #16]
 8000d2e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000d32:	9203      	str	r2, [sp, #12]
 8000d34:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000d38:	9202      	str	r2, [sp, #8]
 8000d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000d44:	f5a3 63c7 	sub.w	r3, r3, #1592	@ 0x638
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	6823      	ldr	r3, [r4, #0]
 8000d4e:	4662      	mov	r2, ip
 8000d50:	4940      	ldr	r1, [pc, #256]	@ (8000e54 <sendMachineData+0x354>)
 8000d52:	4628      	mov	r0, r5
 8000d54:	f00c fe7e 	bl	800da54 <siprintf>

	len = strlen(local_txA);
 8000d58:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff fa61 	bl	8000224 <strlen>
 8000d62:	4603      	mov	r3, r0
 8000d64:	f8c7 36c4 	str.w	r3, [r7, #1732]	@ 0x6c4
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000d68:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000d6c:	f8d7 26c4 	ldr.w	r2, [r7, #1732]	@ 0x6c4
 8000d70:	4939      	ldr	r1, [pc, #228]	@ (8000e58 <sendMachineData+0x358>)
 8000d72:	4618      	mov	r0, r3
 8000d74:	f00c fe6e 	bl	800da54 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000d78:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fa51 	bl	8000224 <strlen>
 8000d82:	4603      	mov	r3, r0
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8000d8a:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000d8e:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8000d92:	6818      	ldr	r0, [r3, #0]
 8000d94:	f00b ffd8 	bl	800cd48 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000d98:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000d9c:	f008 ff08 	bl	8009bb0 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000da0:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fa3d 	bl	8000224 <strlen>
 8000daa:	4603      	mov	r3, r0
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8000db2:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000db6:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8000dba:	6818      	ldr	r0, [r3, #0]
 8000dbc:	f00b ffc4 	bl	800cd48 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000dc0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000dc4:	e04a      	b.n	8000e5c <sendMachineData+0x35c>
 8000dc6:	bf00      	nop
 8000dc8:	0800e454 	.word	0x0800e454
 8000dcc:	0800e464 	.word	0x0800e464
 8000dd0:	20001124 	.word	0x20001124
 8000dd4:	200010cb 	.word	0x200010cb
 8000dd8:	200010bd 	.word	0x200010bd
 8000ddc:	200010c0 	.word	0x200010c0
 8000de0:	200010c1 	.word	0x200010c1
 8000de4:	200010c2 	.word	0x200010c2
 8000de8:	200010c9 	.word	0x200010c9
 8000dec:	200010c3 	.word	0x200010c3
 8000df0:	200010c4 	.word	0x200010c4
 8000df4:	200010c8 	.word	0x200010c8
 8000df8:	200010c5 	.word	0x200010c5
 8000dfc:	200010d5 	.word	0x200010d5
 8000e00:	200010c6 	.word	0x200010c6
 8000e04:	200010d6 	.word	0x200010d6
 8000e08:	200010c7 	.word	0x200010c7
 8000e0c:	200010d7 	.word	0x200010d7
 8000e10:	200010ca 	.word	0x200010ca
 8000e14:	200010cc 	.word	0x200010cc
 8000e18:	200010cd 	.word	0x200010cd
 8000e1c:	200010ce 	.word	0x200010ce
 8000e20:	200010cf 	.word	0x200010cf
 8000e24:	200010d0 	.word	0x200010d0
 8000e28:	200010d1 	.word	0x200010d1
 8000e2c:	200010d2 	.word	0x200010d2
 8000e30:	200010d3 	.word	0x200010d3
 8000e34:	200010d4 	.word	0x200010d4
 8000e38:	200010d8 	.word	0x200010d8
 8000e3c:	200010da 	.word	0x200010da
 8000e40:	200010b4 	.word	0x200010b4
 8000e44:	200010b5 	.word	0x200010b5
 8000e48:	200010dc 	.word	0x200010dc
 8000e4c:	20000fec 	.word	0x20000fec
 8000e50:	0800e7b4 	.word	0x0800e7b4
 8000e54:	0800e484 	.word	0x0800e484
 8000e58:	0800e7c8 	.word	0x0800e7c8
 8000e5c:	f008 fea8 	bl	8009bb0 <HAL_Delay>
}
 8000e60:	bf00      	nop
 8000e62:	f207 67cc 	addw	r7, r7, #1740	@ 0x6cc
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e6a:	bf00      	nop

08000e6c <checkMachineID>:

    HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
    HAL_Delay(15000);
}

int checkMachineID(UART_HandleTypeDef *huart1, const char *machineID) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	f6ad 2d18 	subw	sp, sp, #2584	@ 0xa18
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8000e78:	f6a3 2314 	subw	r3, r3, #2580	@ 0xa14
 8000e7c:	6018      	str	r0, [r3, #0]
 8000e7e:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8000e82:	f6a3 2318 	subw	r3, r3, #2584	@ 0xa18
 8000e86:	6019      	str	r1, [r3, #0]
    int len;

    char bufferRX[1500];

    char subMachineID[13];
    strncpy(subMachineID, machineID, 12);
 8000e88:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8000e8c:	f6a3 2318 	subw	r3, r3, #2584	@ 0xa18
 8000e90:	f107 000c 	add.w	r0, r7, #12
 8000e94:	220c      	movs	r2, #12
 8000e96:	6819      	ldr	r1, [r3, #0]
 8000e98:	f00c fe13 	bl	800dac2 <strncpy>
    subMachineID[12] = '\0';
 8000e9c:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8000ea0:	f6a3 230c 	subw	r3, r3, #2572	@ 0xa0c
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	731a      	strb	r2, [r3, #12]

    sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000ea8:	4a3a      	ldr	r2, [pc, #232]	@ (8000f94 <checkMachineID+0x128>)
 8000eaa:	493b      	ldr	r1, [pc, #236]	@ (8000f98 <checkMachineID+0x12c>)
 8000eac:	483b      	ldr	r0, [pc, #236]	@ (8000f9c <checkMachineID+0x130>)
 8000eae:	f00c fdd1 	bl	800da54 <siprintf>
    HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000eb2:	483a      	ldr	r0, [pc, #232]	@ (8000f9c <checkMachineID+0x130>)
 8000eb4:	f7ff f9b6 	bl	8000224 <strlen>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8000ec0:	f6a3 2314 	subw	r3, r3, #2580	@ 0xa14
 8000ec4:	4935      	ldr	r1, [pc, #212]	@ (8000f9c <checkMachineID+0x130>)
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	f00b ff3e 	bl	800cd48 <HAL_UART_Transmit_IT>
    HAL_Delay(1000);
 8000ecc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ed0:	f008 fe6e 	bl	8009bb0 <HAL_Delay>

    sprintf(local_txA,
 8000ed4:	f107 020c 	add.w	r2, r7, #12
 8000ed8:	f207 602c 	addw	r0, r7, #1580	@ 0x62c
 8000edc:	4b30      	ldr	r3, [pc, #192]	@ (8000fa0 <checkMachineID+0x134>)
 8000ede:	4931      	ldr	r1, [pc, #196]	@ (8000fa4 <checkMachineID+0x138>)
 8000ee0:	f00c fdb8 	bl	800da54 <siprintf>
            "GET /api/v2/machine/checkMachineIDRaw?machineID=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, mainServerWithPort);

    len = strlen(local_txA);
 8000ee4:	f207 632c 	addw	r3, r7, #1580	@ 0x62c
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff f99b 	bl	8000224 <strlen>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f8c7 3a14 	str.w	r3, [r7, #2580]	@ 0xa14
    sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000ef4:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 8000ef8:	f8d7 2a14 	ldr.w	r2, [r7, #2580]	@ 0xa14
 8000efc:	492a      	ldr	r1, [pc, #168]	@ (8000fa8 <checkMachineID+0x13c>)
 8000efe:	4618      	mov	r0, r3
 8000f00:	f00c fda8 	bl	800da54 <siprintf>

    HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000f04:	f507 63bf 	add.w	r3, r7, #1528	@ 0x5f8
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff f98b 	bl	8000224 <strlen>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	f507 61bf 	add.w	r1, r7, #1528	@ 0x5f8
 8000f16:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8000f1a:	f6a3 2314 	subw	r3, r3, #2580	@ 0xa14
 8000f1e:	6818      	ldr	r0, [r3, #0]
 8000f20:	f00b ff12 	bl	800cd48 <HAL_UART_Transmit_IT>
    HAL_Delay(2000);
 8000f24:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f28:	f008 fe42 	bl	8009bb0 <HAL_Delay>

    HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000f2c:	f207 632c 	addw	r3, r7, #1580	@ 0x62c
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff f977 	bl	8000224 <strlen>
 8000f36:	4603      	mov	r3, r0
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	f207 612c 	addw	r1, r7, #1580	@ 0x62c
 8000f3e:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8000f42:	f6a3 2314 	subw	r3, r3, #2580	@ 0xa14
 8000f46:	6818      	ldr	r0, [r3, #0]
 8000f48:	f00b fefe 	bl	800cd48 <HAL_UART_Transmit_IT>
    HAL_Delay(2000);
 8000f4c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f50:	f008 fe2e 	bl	8009bb0 <HAL_Delay>

    HAL_UART_Receive_IT(huart1, bufferRX, sizeof(bufferRX));
 8000f54:	f107 011c 	add.w	r1, r7, #28
 8000f58:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 8000f5c:	f6a3 2314 	subw	r3, r3, #2580	@ 0xa14
 8000f60:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000f64:	6818      	ldr	r0, [r3, #0]
 8000f66:	f00b ff24 	bl	800cdb2 <HAL_UART_Receive_IT>
    HAL_Delay(5000);
 8000f6a:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f6e:	f008 fe1f 	bl	8009bb0 <HAL_Delay>

    // HTTP yanıt kodunu kontrol et
    if (strstr(bufferRX, "HTTP/1.1 200 OK")) {
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	490d      	ldr	r1, [pc, #52]	@ (8000fac <checkMachineID+0x140>)
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f00c fdb5 	bl	800dae8 <strstr>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <checkMachineID+0x11c>
        return 1;  // Başarılı
 8000f84:	2301      	movs	r3, #1
 8000f86:	e000      	b.n	8000f8a <checkMachineID+0x11e>
    } else {
        return 0;  // Başarısız
 8000f88:	2300      	movs	r3, #0
    }
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f607 2718 	addw	r7, r7, #2584	@ 0xa18
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	0800e454 	.word	0x0800e454
 8000f98:	0800e464 	.word	0x0800e464
 8000f9c:	20001124 	.word	0x20001124
 8000fa0:	0800e7b4 	.word	0x0800e7b4
 8000fa4:	0800ec00 	.word	0x0800ec00
 8000fa8:	0800e7c8 	.word	0x0800e7c8
 8000fac:	0800ec4c 	.word	0x0800ec4c

08000fb0 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b089      	sub	sp, #36	@ 0x24
 8000fb4:	af04      	add	r7, sp, #16
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000fba:	4b25      	ldr	r3, [pc, #148]	@ (8001050 <hata2EEPROM+0xa0>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	1e5a      	subs	r2, r3, #1
 8000fc0:	4b24      	ldr	r3, [pc, #144]	@ (8001054 <hata2EEPROM+0xa4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a24      	ldr	r2, [pc, #144]	@ (8001058 <hata2EEPROM+0xa8>)
 8000fc8:	5cd3      	ldrb	r3, [r2, r3]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d002      	beq.n	8000fd4 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000fce:	f000 f8d1 	bl	8001174 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000fd2:	e000      	b.n	8000fd6 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000fd4:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	e012      	b.n	8001002 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <hata2EEPROM+0xa4>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4413      	add	r3, r2
 8000fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8001058 <hata2EEPROM+0xa8>)
 8000fe6:	5cd3      	ldrb	r3, [r2, r3]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d107      	bne.n	8000ffc <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000fec:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <hata2EEPROM+0xa4>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4918      	ldr	r1, [pc, #96]	@ (8001058 <hata2EEPROM+0xa8>)
 8000ff6:	79fa      	ldrb	r2, [r7, #7]
 8000ff8:	54ca      	strb	r2, [r1, r3]
					break;
 8000ffa:	e007      	b.n	800100c <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	3301      	adds	r3, #1
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <hata2EEPROM+0xa0>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	dbe7      	blt.n	8000fdc <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <hata2EEPROM+0xa4>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	b299      	uxth	r1, r3
 8001012:	4b0f      	ldr	r3, [pc, #60]	@ (8001050 <hata2EEPROM+0xa0>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	b298      	uxth	r0, r3
 8001018:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <hata2EEPROM+0xa4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0e      	ldr	r2, [pc, #56]	@ (8001058 <hata2EEPROM+0xa8>)
 800101e:	4413      	add	r3, r2
 8001020:	4a0b      	ldr	r2, [pc, #44]	@ (8001050 <hata2EEPROM+0xa0>)
 8001022:	6812      	ldr	r2, [r2, #0]
 8001024:	b292      	uxth	r2, r2
 8001026:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 800102a:	9402      	str	r4, [sp, #8]
 800102c:	9201      	str	r2, [sp, #4]
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	4603      	mov	r3, r0
 8001032:	460a      	mov	r2, r1
 8001034:	21a0      	movs	r1, #160	@ 0xa0
 8001036:	4809      	ldr	r0, [pc, #36]	@ (800105c <hata2EEPROM+0xac>)
 8001038:	f009 fe44 	bl	800acc4 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 800103c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001040:	f008 fdb6 	bl	8009bb0 <HAL_Delay>
	eepromKontrol();
 8001044:	f7ff f8f6 	bl	8000234 <eepromKontrol>
}
 8001048:	bf00      	nop
 800104a:	3714      	adds	r7, #20
 800104c:	46bd      	mov	sp, r7
 800104e:	bd90      	pop	{r4, r7, pc}
 8001050:	20000094 	.word	0x20000094
 8001054:	20000098 	.word	0x20000098
 8001058:	20000fec 	.word	0x20000fec
 800105c:	2000193c 	.word	0x2000193c

08001060 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d10f      	bne.n	8001090 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8001070:	4a38      	ldr	r2, [pc, #224]	@ (8001154 <hataKoduLcdGoster+0xf4>)
 8001072:	2101      	movs	r1, #1
 8001074:	2001      	movs	r0, #1
 8001076:	f008 f841 	bl	80090fc <lcd_print>
		lcd_print(2, 1, "1");
 800107a:	4a37      	ldr	r2, [pc, #220]	@ (8001158 <hataKoduLcdGoster+0xf8>)
 800107c:	2101      	movs	r1, #1
 800107e:	2002      	movs	r0, #2
 8001080:	f008 f83c 	bl	80090fc <lcd_print>
		lcd_print(2, 7, "          ");
 8001084:	4a35      	ldr	r2, [pc, #212]	@ (800115c <hataKoduLcdGoster+0xfc>)
 8001086:	2107      	movs	r1, #7
 8001088:	2002      	movs	r0, #2
 800108a:	f008 f837 	bl	80090fc <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 800108e:	e05d      	b.n	800114c <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	2b02      	cmp	r3, #2
 8001094:	d10f      	bne.n	80010b6 <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 8001096:	4a2f      	ldr	r2, [pc, #188]	@ (8001154 <hataKoduLcdGoster+0xf4>)
 8001098:	2101      	movs	r1, #1
 800109a:	2001      	movs	r0, #1
 800109c:	f008 f82e 	bl	80090fc <lcd_print>
		lcd_print(2, 2, "2");
 80010a0:	4a2f      	ldr	r2, [pc, #188]	@ (8001160 <hataKoduLcdGoster+0x100>)
 80010a2:	2102      	movs	r1, #2
 80010a4:	2002      	movs	r0, #2
 80010a6:	f008 f829 	bl	80090fc <lcd_print>
		lcd_print(2, 7, "          ");
 80010aa:	4a2c      	ldr	r2, [pc, #176]	@ (800115c <hataKoduLcdGoster+0xfc>)
 80010ac:	2107      	movs	r1, #7
 80010ae:	2002      	movs	r0, #2
 80010b0:	f008 f824 	bl	80090fc <lcd_print>
}
 80010b4:	e04a      	b.n	800114c <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d10f      	bne.n	80010dc <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 80010bc:	4a25      	ldr	r2, [pc, #148]	@ (8001154 <hataKoduLcdGoster+0xf4>)
 80010be:	2101      	movs	r1, #1
 80010c0:	2001      	movs	r0, #1
 80010c2:	f008 f81b 	bl	80090fc <lcd_print>
		lcd_print(2, 3, "3");
 80010c6:	4a27      	ldr	r2, [pc, #156]	@ (8001164 <hataKoduLcdGoster+0x104>)
 80010c8:	2103      	movs	r1, #3
 80010ca:	2002      	movs	r0, #2
 80010cc:	f008 f816 	bl	80090fc <lcd_print>
		lcd_print(2, 7, "          ");
 80010d0:	4a22      	ldr	r2, [pc, #136]	@ (800115c <hataKoduLcdGoster+0xfc>)
 80010d2:	2107      	movs	r1, #7
 80010d4:	2002      	movs	r0, #2
 80010d6:	f008 f811 	bl	80090fc <lcd_print>
}
 80010da:	e037      	b.n	800114c <hataKoduLcdGoster+0xec>
	} else if(x==4){
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b04      	cmp	r3, #4
 80010e0:	d10f      	bne.n	8001102 <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 80010e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001154 <hataKoduLcdGoster+0xf4>)
 80010e4:	2101      	movs	r1, #1
 80010e6:	2001      	movs	r0, #1
 80010e8:	f008 f808 	bl	80090fc <lcd_print>
		lcd_print(2, 4, "4");
 80010ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001168 <hataKoduLcdGoster+0x108>)
 80010ee:	2104      	movs	r1, #4
 80010f0:	2002      	movs	r0, #2
 80010f2:	f008 f803 	bl	80090fc <lcd_print>
		lcd_print(2, 7, "          ");
 80010f6:	4a19      	ldr	r2, [pc, #100]	@ (800115c <hataKoduLcdGoster+0xfc>)
 80010f8:	2107      	movs	r1, #7
 80010fa:	2002      	movs	r0, #2
 80010fc:	f007 fffe 	bl	80090fc <lcd_print>
}
 8001100:	e024      	b.n	800114c <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b05      	cmp	r3, #5
 8001106:	d10f      	bne.n	8001128 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8001108:	4a12      	ldr	r2, [pc, #72]	@ (8001154 <hataKoduLcdGoster+0xf4>)
 800110a:	2101      	movs	r1, #1
 800110c:	2001      	movs	r0, #1
 800110e:	f007 fff5 	bl	80090fc <lcd_print>
		lcd_print(2, 5, "5");
 8001112:	4a16      	ldr	r2, [pc, #88]	@ (800116c <hataKoduLcdGoster+0x10c>)
 8001114:	2105      	movs	r1, #5
 8001116:	2002      	movs	r0, #2
 8001118:	f007 fff0 	bl	80090fc <lcd_print>
		lcd_print(2, 7, "          ");
 800111c:	4a0f      	ldr	r2, [pc, #60]	@ (800115c <hataKoduLcdGoster+0xfc>)
 800111e:	2107      	movs	r1, #7
 8001120:	2002      	movs	r0, #2
 8001122:	f007 ffeb 	bl	80090fc <lcd_print>
}
 8001126:	e011      	b.n	800114c <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b06      	cmp	r3, #6
 800112c:	d10e      	bne.n	800114c <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 800112e:	4a09      	ldr	r2, [pc, #36]	@ (8001154 <hataKoduLcdGoster+0xf4>)
 8001130:	2101      	movs	r1, #1
 8001132:	2001      	movs	r0, #1
 8001134:	f007 ffe2 	bl	80090fc <lcd_print>
		lcd_print(2, 6, "6");
 8001138:	4a0d      	ldr	r2, [pc, #52]	@ (8001170 <hataKoduLcdGoster+0x110>)
 800113a:	2106      	movs	r1, #6
 800113c:	2002      	movs	r0, #2
 800113e:	f007 ffdd 	bl	80090fc <lcd_print>
		lcd_print(2, 7, "          ");
 8001142:	4a06      	ldr	r2, [pc, #24]	@ (800115c <hataKoduLcdGoster+0xfc>)
 8001144:	2107      	movs	r1, #7
 8001146:	2002      	movs	r0, #2
 8001148:	f007 ffd8 	bl	80090fc <lcd_print>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200018b0 	.word	0x200018b0
 8001158:	0800ec5c 	.word	0x0800ec5c
 800115c:	0800ec60 	.word	0x0800ec60
 8001160:	0800ec6c 	.word	0x0800ec6c
 8001164:	0800ec70 	.word	0x0800ec70
 8001168:	0800ec74 	.word	0x0800ec74
 800116c:	0800ec78 	.word	0x0800ec78
 8001170:	0800ec7c 	.word	0x0800ec7c

08001174 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	e009      	b.n	8001194 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8001180:	4a0a      	ldr	r2, [pc, #40]	@ (80011ac <eepromDataFillWithEmpty+0x38>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001188:	4a09      	ldr	r2, [pc, #36]	@ (80011b0 <eepromDataFillWithEmpty+0x3c>)
 800118a:	2100      	movs	r1, #0
 800118c:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	3301      	adds	r3, #1
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	4b07      	ldr	r3, [pc, #28]	@ (80011b4 <eepromDataFillWithEmpty+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	429a      	cmp	r2, r3
 800119c:	dbf0      	blt.n	8001180 <eepromDataFillWithEmpty+0xc>
	}
}
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	2000006c 	.word	0x2000006c
 80011b0:	20000fec 	.word	0x20000fec
 80011b4:	20000094 	.word	0x20000094

080011b8 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 80011be:	463b      	mov	r3, r7
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 80011ca:	4b50      	ldr	r3, [pc, #320]	@ (800130c <i2cTest+0x154>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b4e      	ldr	r3, [pc, #312]	@ (800130c <i2cTest+0x154>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 0201 	bic.w	r2, r2, #1
 80011d8:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 80011da:	484c      	ldr	r0, [pc, #304]	@ (800130c <i2cTest+0x154>)
 80011dc:	f009 fc44 	bl	800aa68 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011e0:	23c0      	movs	r3, #192	@ 0xc0
 80011e2:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 80011e4:	2311      	movs	r3, #17
 80011e6:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80011f0:	463b      	mov	r3, r7
 80011f2:	4619      	mov	r1, r3
 80011f4:	4846      	ldr	r0, [pc, #280]	@ (8001310 <i2cTest+0x158>)
 80011f6:	f009 f84b 	bl	800a290 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80011fa:	2201      	movs	r2, #1
 80011fc:	2140      	movs	r1, #64	@ 0x40
 80011fe:	4844      	ldr	r0, [pc, #272]	@ (8001310 <i2cTest+0x158>)
 8001200:	f009 fabd 	bl	800a77e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	2180      	movs	r1, #128	@ 0x80
 8001208:	4841      	ldr	r0, [pc, #260]	@ (8001310 <i2cTest+0x158>)
 800120a:	f009 fab8 	bl	800a77e <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 800120e:	200a      	movs	r0, #10
 8001210:	f008 fcce 	bl	8009bb0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8001214:	bf00      	nop
 8001216:	2140      	movs	r1, #64	@ 0x40
 8001218:	483d      	ldr	r0, [pc, #244]	@ (8001310 <i2cTest+0x158>)
 800121a:	f009 fa99 	bl	800a750 <HAL_GPIO_ReadPin>
 800121e:	4603      	mov	r3, r0
 8001220:	2b01      	cmp	r3, #1
 8001222:	d006      	beq.n	8001232 <i2cTest+0x7a>
 8001224:	2180      	movs	r1, #128	@ 0x80
 8001226:	483a      	ldr	r0, [pc, #232]	@ (8001310 <i2cTest+0x158>)
 8001228:	f009 fa92 	bl	800a750 <HAL_GPIO_ReadPin>
 800122c:	4603      	mov	r3, r0
 800122e:	2b01      	cmp	r3, #1
 8001230:	d1f1      	bne.n	8001216 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2180      	movs	r1, #128	@ 0x80
 8001236:	4836      	ldr	r0, [pc, #216]	@ (8001310 <i2cTest+0x158>)
 8001238:	f009 faa1 	bl	800a77e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 800123c:	200a      	movs	r0, #10
 800123e:	f008 fcb7 	bl	8009bb0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8001242:	bf00      	nop
 8001244:	2180      	movs	r1, #128	@ 0x80
 8001246:	4832      	ldr	r0, [pc, #200]	@ (8001310 <i2cTest+0x158>)
 8001248:	f009 fa82 	bl	800a750 <HAL_GPIO_ReadPin>
 800124c:	4603      	mov	r3, r0
 800124e:	2b01      	cmp	r3, #1
 8001250:	d0f8      	beq.n	8001244 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	2140      	movs	r1, #64	@ 0x40
 8001256:	482e      	ldr	r0, [pc, #184]	@ (8001310 <i2cTest+0x158>)
 8001258:	f009 fa91 	bl	800a77e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800125c:	200a      	movs	r0, #10
 800125e:	f008 fca7 	bl	8009bb0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8001262:	bf00      	nop
 8001264:	2140      	movs	r1, #64	@ 0x40
 8001266:	482a      	ldr	r0, [pc, #168]	@ (8001310 <i2cTest+0x158>)
 8001268:	f009 fa72 	bl	800a750 <HAL_GPIO_ReadPin>
 800126c:	4603      	mov	r3, r0
 800126e:	2b01      	cmp	r3, #1
 8001270:	d0f8      	beq.n	8001264 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8001272:	2201      	movs	r2, #1
 8001274:	2140      	movs	r1, #64	@ 0x40
 8001276:	4826      	ldr	r0, [pc, #152]	@ (8001310 <i2cTest+0x158>)
 8001278:	f009 fa81 	bl	800a77e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800127c:	200a      	movs	r0, #10
 800127e:	f008 fc97 	bl	8009bb0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8001282:	bf00      	nop
 8001284:	2140      	movs	r1, #64	@ 0x40
 8001286:	4822      	ldr	r0, [pc, #136]	@ (8001310 <i2cTest+0x158>)
 8001288:	f009 fa62 	bl	800a750 <HAL_GPIO_ReadPin>
 800128c:	4603      	mov	r3, r0
 800128e:	2b01      	cmp	r3, #1
 8001290:	d1f8      	bne.n	8001284 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	2180      	movs	r1, #128	@ 0x80
 8001296:	481e      	ldr	r0, [pc, #120]	@ (8001310 <i2cTest+0x158>)
 8001298:	f009 fa71 	bl	800a77e <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800129c:	200a      	movs	r0, #10
 800129e:	f008 fc87 	bl	8009bb0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80012a2:	bf00      	nop
 80012a4:	2180      	movs	r1, #128	@ 0x80
 80012a6:	481a      	ldr	r0, [pc, #104]	@ (8001310 <i2cTest+0x158>)
 80012a8:	f009 fa52 	bl	800a750 <HAL_GPIO_ReadPin>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d1f8      	bne.n	80012a4 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012b2:	23c0      	movs	r3, #192	@ 0xc0
 80012b4:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80012b6:	2312      	movs	r3, #18
 80012b8:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80012ba:	2301      	movs	r3, #1
 80012bc:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80012c2:	463b      	mov	r3, r7
 80012c4:	4619      	mov	r1, r3
 80012c6:	4812      	ldr	r0, [pc, #72]	@ (8001310 <i2cTest+0x158>)
 80012c8:	f008 ffe2 	bl	800a290 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80012cc:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <i2cTest+0x154>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <i2cTest+0x154>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80012da:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80012dc:	4b0b      	ldr	r3, [pc, #44]	@ (800130c <i2cTest+0x154>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	4b0a      	ldr	r3, [pc, #40]	@ (800130c <i2cTest+0x154>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80012ea:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 80012ec:	4b07      	ldr	r3, [pc, #28]	@ (800130c <i2cTest+0x154>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4b06      	ldr	r3, [pc, #24]	@ (800130c <i2cTest+0x154>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f042 0201 	orr.w	r2, r2, #1
 80012fa:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80012fc:	4803      	ldr	r0, [pc, #12]	@ (800130c <i2cTest+0x154>)
 80012fe:	f009 fa6f 	bl	800a7e0 <HAL_I2C_Init>
}
 8001302:	bf00      	nop
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	2000193c 	.word	0x2000193c
 8001310:	40010c00 	.word	0x40010c00

08001314 <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 800131e:	20c8      	movs	r0, #200	@ 0xc8
 8001320:	f008 fc46 	bl	8009bb0 <HAL_Delay>
	lcd_clear();
 8001324:	f007 ff16 	bl	8009154 <lcd_clear>
	if(type == 1 && page == 0) {
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d13e      	bne.n	80013ac <printTemplate+0x98>
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d13b      	bne.n	80013ac <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8001334:	4a9a      	ldr	r2, [pc, #616]	@ (80015a0 <printTemplate+0x28c>)
 8001336:	2101      	movs	r1, #1
 8001338:	2001      	movs	r0, #1
 800133a:	f007 fedf 	bl	80090fc <lcd_print>
		lcd_print(2, 3, "0");
 800133e:	4a99      	ldr	r2, [pc, #612]	@ (80015a4 <printTemplate+0x290>)
 8001340:	2103      	movs	r1, #3
 8001342:	2002      	movs	r0, #2
 8001344:	f007 feda 	bl	80090fc <lcd_print>
		lcd_print(2, 4, "1");
 8001348:	4a97      	ldr	r2, [pc, #604]	@ (80015a8 <printTemplate+0x294>)
 800134a:	2104      	movs	r1, #4
 800134c:	2002      	movs	r0, #2
 800134e:	f007 fed5 	bl	80090fc <lcd_print>
		lcd_print(2, 5, "2");
 8001352:	4a96      	ldr	r2, [pc, #600]	@ (80015ac <printTemplate+0x298>)
 8001354:	2105      	movs	r1, #5
 8001356:	2002      	movs	r0, #2
 8001358:	f007 fed0 	bl	80090fc <lcd_print>
		lcd_print(2, 6, "3");
 800135c:	4a94      	ldr	r2, [pc, #592]	@ (80015b0 <printTemplate+0x29c>)
 800135e:	2106      	movs	r1, #6
 8001360:	2002      	movs	r0, #2
 8001362:	f007 fecb 	bl	80090fc <lcd_print>
		lcd_print(2, 7, "4");
 8001366:	4a93      	ldr	r2, [pc, #588]	@ (80015b4 <printTemplate+0x2a0>)
 8001368:	2107      	movs	r1, #7
 800136a:	2002      	movs	r0, #2
 800136c:	f007 fec6 	bl	80090fc <lcd_print>
		lcd_print(2, 10, "5");
 8001370:	4a91      	ldr	r2, [pc, #580]	@ (80015b8 <printTemplate+0x2a4>)
 8001372:	210a      	movs	r1, #10
 8001374:	2002      	movs	r0, #2
 8001376:	f007 fec1 	bl	80090fc <lcd_print>
		lcd_print(2, 11, "6");
 800137a:	4a90      	ldr	r2, [pc, #576]	@ (80015bc <printTemplate+0x2a8>)
 800137c:	210b      	movs	r1, #11
 800137e:	2002      	movs	r0, #2
 8001380:	f007 febc 	bl	80090fc <lcd_print>
		lcd_print(2, 12, "7");
 8001384:	4a8e      	ldr	r2, [pc, #568]	@ (80015c0 <printTemplate+0x2ac>)
 8001386:	210c      	movs	r1, #12
 8001388:	2002      	movs	r0, #2
 800138a:	f007 feb7 	bl	80090fc <lcd_print>
		lcd_print(2, 13, "8");
 800138e:	4a8d      	ldr	r2, [pc, #564]	@ (80015c4 <printTemplate+0x2b0>)
 8001390:	210d      	movs	r1, #13
 8001392:	2002      	movs	r0, #2
 8001394:	f007 feb2 	bl	80090fc <lcd_print>
		lcd_print(2, 14, "9");
 8001398:	4a8b      	ldr	r2, [pc, #556]	@ (80015c8 <printTemplate+0x2b4>)
 800139a:	210e      	movs	r1, #14
 800139c:	2002      	movs	r0, #2
 800139e:	f007 fead 	bl	80090fc <lcd_print>
		lcd_gotoxy(2, 3);
 80013a2:	2103      	movs	r1, #3
 80013a4:	2002      	movs	r0, #2
 80013a6:	f007 fe8a 	bl	80090be <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 80013aa:	e0f5      	b.n	8001598 <printTemplate+0x284>
	} else if(type == 2) {
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d178      	bne.n	80014a4 <printTemplate+0x190>
		if(page == 1) {
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d114      	bne.n	80013e2 <printTemplate+0xce>
			lcd_clear();
 80013b8:	f007 fecc 	bl	8009154 <lcd_clear>
			HAL_Delay(100);
 80013bc:	2064      	movs	r0, #100	@ 0x64
 80013be:	f008 fbf7 	bl	8009bb0 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 80013c2:	4a82      	ldr	r2, [pc, #520]	@ (80015cc <printTemplate+0x2b8>)
 80013c4:	2101      	movs	r1, #1
 80013c6:	2001      	movs	r0, #1
 80013c8:	f007 fe98 	bl	80090fc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80013cc:	4a80      	ldr	r2, [pc, #512]	@ (80015d0 <printTemplate+0x2bc>)
 80013ce:	2107      	movs	r1, #7
 80013d0:	2001      	movs	r0, #1
 80013d2:	f007 fe93 	bl	80090fc <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80013d6:	4a7f      	ldr	r2, [pc, #508]	@ (80015d4 <printTemplate+0x2c0>)
 80013d8:	2101      	movs	r1, #1
 80013da:	2002      	movs	r0, #2
 80013dc:	f007 fe8e 	bl	80090fc <lcd_print>
}
 80013e0:	e0da      	b.n	8001598 <printTemplate+0x284>
		} else if(page == 2) {
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d114      	bne.n	8001412 <printTemplate+0xfe>
			lcd_clear();
 80013e8:	f007 feb4 	bl	8009154 <lcd_clear>
			HAL_Delay(100);
 80013ec:	2064      	movs	r0, #100	@ 0x64
 80013ee:	f008 fbdf 	bl	8009bb0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80013f2:	4a79      	ldr	r2, [pc, #484]	@ (80015d8 <printTemplate+0x2c4>)
 80013f4:	2101      	movs	r1, #1
 80013f6:	2001      	movs	r0, #1
 80013f8:	f007 fe80 	bl	80090fc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80013fc:	4a74      	ldr	r2, [pc, #464]	@ (80015d0 <printTemplate+0x2bc>)
 80013fe:	2107      	movs	r1, #7
 8001400:	2001      	movs	r0, #1
 8001402:	f007 fe7b 	bl	80090fc <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001406:	4a75      	ldr	r2, [pc, #468]	@ (80015dc <printTemplate+0x2c8>)
 8001408:	2101      	movs	r1, #1
 800140a:	2002      	movs	r0, #2
 800140c:	f007 fe76 	bl	80090fc <lcd_print>
}
 8001410:	e0c2      	b.n	8001598 <printTemplate+0x284>
		} else if(page == 3) {
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	2b03      	cmp	r3, #3
 8001416:	d114      	bne.n	8001442 <printTemplate+0x12e>
			lcd_clear();
 8001418:	f007 fe9c 	bl	8009154 <lcd_clear>
			HAL_Delay(100);
 800141c:	2064      	movs	r0, #100	@ 0x64
 800141e:	f008 fbc7 	bl	8009bb0 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8001422:	4a6a      	ldr	r2, [pc, #424]	@ (80015cc <printTemplate+0x2b8>)
 8001424:	2101      	movs	r1, #1
 8001426:	2001      	movs	r0, #1
 8001428:	f007 fe68 	bl	80090fc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800142c:	4a68      	ldr	r2, [pc, #416]	@ (80015d0 <printTemplate+0x2bc>)
 800142e:	2107      	movs	r1, #7
 8001430:	2001      	movs	r0, #1
 8001432:	f007 fe63 	bl	80090fc <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8001436:	4a6a      	ldr	r2, [pc, #424]	@ (80015e0 <printTemplate+0x2cc>)
 8001438:	2101      	movs	r1, #1
 800143a:	2002      	movs	r0, #2
 800143c:	f007 fe5e 	bl	80090fc <lcd_print>
}
 8001440:	e0aa      	b.n	8001598 <printTemplate+0x284>
		} else if(page == 4) {
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2b04      	cmp	r3, #4
 8001446:	d114      	bne.n	8001472 <printTemplate+0x15e>
			lcd_clear();
 8001448:	f007 fe84 	bl	8009154 <lcd_clear>
			HAL_Delay(100);
 800144c:	2064      	movs	r0, #100	@ 0x64
 800144e:	f008 fbaf 	bl	8009bb0 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8001452:	4a5e      	ldr	r2, [pc, #376]	@ (80015cc <printTemplate+0x2b8>)
 8001454:	2101      	movs	r1, #1
 8001456:	2001      	movs	r0, #1
 8001458:	f007 fe50 	bl	80090fc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800145c:	4a5c      	ldr	r2, [pc, #368]	@ (80015d0 <printTemplate+0x2bc>)
 800145e:	2107      	movs	r1, #7
 8001460:	2001      	movs	r0, #1
 8001462:	f007 fe4b 	bl	80090fc <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8001466:	4a5f      	ldr	r2, [pc, #380]	@ (80015e4 <printTemplate+0x2d0>)
 8001468:	2101      	movs	r1, #1
 800146a:	2002      	movs	r0, #2
 800146c:	f007 fe46 	bl	80090fc <lcd_print>
}
 8001470:	e092      	b.n	8001598 <printTemplate+0x284>
		} else if(page == 5) {
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	2b05      	cmp	r3, #5
 8001476:	f040 808f 	bne.w	8001598 <printTemplate+0x284>
			lcd_clear();
 800147a:	f007 fe6b 	bl	8009154 <lcd_clear>
			HAL_Delay(100);
 800147e:	2064      	movs	r0, #100	@ 0x64
 8001480:	f008 fb96 	bl	8009bb0 <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8001484:	4a51      	ldr	r2, [pc, #324]	@ (80015cc <printTemplate+0x2b8>)
 8001486:	2101      	movs	r1, #1
 8001488:	2001      	movs	r0, #1
 800148a:	f007 fe37 	bl	80090fc <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800148e:	4a50      	ldr	r2, [pc, #320]	@ (80015d0 <printTemplate+0x2bc>)
 8001490:	2107      	movs	r1, #7
 8001492:	2001      	movs	r0, #1
 8001494:	f007 fe32 	bl	80090fc <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8001498:	4a53      	ldr	r2, [pc, #332]	@ (80015e8 <printTemplate+0x2d4>)
 800149a:	2101      	movs	r1, #1
 800149c:	2002      	movs	r0, #2
 800149e:	f007 fe2d 	bl	80090fc <lcd_print>
}
 80014a2:	e079      	b.n	8001598 <printTemplate+0x284>
	} else if(type == 3) {
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d176      	bne.n	8001598 <printTemplate+0x284>
		if(page == 1) {
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d114      	bne.n	80014da <printTemplate+0x1c6>
			lcd_clear();
 80014b0:	f007 fe50 	bl	8009154 <lcd_clear>
			HAL_Delay(100);
 80014b4:	2064      	movs	r0, #100	@ 0x64
 80014b6:	f008 fb7b 	bl	8009bb0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80014ba:	4a4c      	ldr	r2, [pc, #304]	@ (80015ec <printTemplate+0x2d8>)
 80014bc:	2101      	movs	r1, #1
 80014be:	2001      	movs	r0, #1
 80014c0:	f007 fe1c 	bl	80090fc <lcd_print>
			lcd_print(1, 7, wifiPass);
 80014c4:	4a4a      	ldr	r2, [pc, #296]	@ (80015f0 <printTemplate+0x2dc>)
 80014c6:	2107      	movs	r1, #7
 80014c8:	2001      	movs	r0, #1
 80014ca:	f007 fe17 	bl	80090fc <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80014ce:	4a41      	ldr	r2, [pc, #260]	@ (80015d4 <printTemplate+0x2c0>)
 80014d0:	2101      	movs	r1, #1
 80014d2:	2002      	movs	r0, #2
 80014d4:	f007 fe12 	bl	80090fc <lcd_print>
}
 80014d8:	e05e      	b.n	8001598 <printTemplate+0x284>
		} else if(page == 2) {
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d114      	bne.n	800150a <printTemplate+0x1f6>
			lcd_clear();
 80014e0:	f007 fe38 	bl	8009154 <lcd_clear>
			HAL_Delay(100);
 80014e4:	2064      	movs	r0, #100	@ 0x64
 80014e6:	f008 fb63 	bl	8009bb0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80014ea:	4a40      	ldr	r2, [pc, #256]	@ (80015ec <printTemplate+0x2d8>)
 80014ec:	2101      	movs	r1, #1
 80014ee:	2001      	movs	r0, #1
 80014f0:	f007 fe04 	bl	80090fc <lcd_print>
			lcd_print(1, 7, wifiPass);
 80014f4:	4a3e      	ldr	r2, [pc, #248]	@ (80015f0 <printTemplate+0x2dc>)
 80014f6:	2107      	movs	r1, #7
 80014f8:	2001      	movs	r0, #1
 80014fa:	f007 fdff 	bl	80090fc <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80014fe:	4a37      	ldr	r2, [pc, #220]	@ (80015dc <printTemplate+0x2c8>)
 8001500:	2101      	movs	r1, #1
 8001502:	2002      	movs	r0, #2
 8001504:	f007 fdfa 	bl	80090fc <lcd_print>
}
 8001508:	e046      	b.n	8001598 <printTemplate+0x284>
		} else if(page == 3) {
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	2b03      	cmp	r3, #3
 800150e:	d114      	bne.n	800153a <printTemplate+0x226>
			lcd_clear();
 8001510:	f007 fe20 	bl	8009154 <lcd_clear>
			HAL_Delay(100);
 8001514:	2064      	movs	r0, #100	@ 0x64
 8001516:	f008 fb4b 	bl	8009bb0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800151a:	4a34      	ldr	r2, [pc, #208]	@ (80015ec <printTemplate+0x2d8>)
 800151c:	2101      	movs	r1, #1
 800151e:	2001      	movs	r0, #1
 8001520:	f007 fdec 	bl	80090fc <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001524:	4a32      	ldr	r2, [pc, #200]	@ (80015f0 <printTemplate+0x2dc>)
 8001526:	2107      	movs	r1, #7
 8001528:	2001      	movs	r0, #1
 800152a:	f007 fde7 	bl	80090fc <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 800152e:	4a2c      	ldr	r2, [pc, #176]	@ (80015e0 <printTemplate+0x2cc>)
 8001530:	2101      	movs	r1, #1
 8001532:	2002      	movs	r0, #2
 8001534:	f007 fde2 	bl	80090fc <lcd_print>
}
 8001538:	e02e      	b.n	8001598 <printTemplate+0x284>
		} else if(page == 4) {
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	2b04      	cmp	r3, #4
 800153e:	d114      	bne.n	800156a <printTemplate+0x256>
			lcd_clear();
 8001540:	f007 fe08 	bl	8009154 <lcd_clear>
			HAL_Delay(100);
 8001544:	2064      	movs	r0, #100	@ 0x64
 8001546:	f008 fb33 	bl	8009bb0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800154a:	4a28      	ldr	r2, [pc, #160]	@ (80015ec <printTemplate+0x2d8>)
 800154c:	2101      	movs	r1, #1
 800154e:	2001      	movs	r0, #1
 8001550:	f007 fdd4 	bl	80090fc <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001554:	4a26      	ldr	r2, [pc, #152]	@ (80015f0 <printTemplate+0x2dc>)
 8001556:	2107      	movs	r1, #7
 8001558:	2001      	movs	r0, #1
 800155a:	f007 fdcf 	bl	80090fc <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 800155e:	4a21      	ldr	r2, [pc, #132]	@ (80015e4 <printTemplate+0x2d0>)
 8001560:	2101      	movs	r1, #1
 8001562:	2002      	movs	r0, #2
 8001564:	f007 fdca 	bl	80090fc <lcd_print>
}
 8001568:	e016      	b.n	8001598 <printTemplate+0x284>
		} else if(page == 5) {
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	2b05      	cmp	r3, #5
 800156e:	d113      	bne.n	8001598 <printTemplate+0x284>
			lcd_clear();
 8001570:	f007 fdf0 	bl	8009154 <lcd_clear>
			HAL_Delay(100);
 8001574:	2064      	movs	r0, #100	@ 0x64
 8001576:	f008 fb1b 	bl	8009bb0 <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 800157a:	4a1c      	ldr	r2, [pc, #112]	@ (80015ec <printTemplate+0x2d8>)
 800157c:	2101      	movs	r1, #1
 800157e:	2001      	movs	r0, #1
 8001580:	f007 fdbc 	bl	80090fc <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001584:	4a1a      	ldr	r2, [pc, #104]	@ (80015f0 <printTemplate+0x2dc>)
 8001586:	2107      	movs	r1, #7
 8001588:	2001      	movs	r0, #1
 800158a:	f007 fdb7 	bl	80090fc <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 800158e:	4a16      	ldr	r2, [pc, #88]	@ (80015e8 <printTemplate+0x2d4>)
 8001590:	2101      	movs	r1, #1
 8001592:	2002      	movs	r0, #2
 8001594:	f007 fdb2 	bl	80090fc <lcd_print>
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	0800ec80 	.word	0x0800ec80
 80015a4:	0800ec88 	.word	0x0800ec88
 80015a8:	0800ec8c 	.word	0x0800ec8c
 80015ac:	0800ec90 	.word	0x0800ec90
 80015b0:	0800ec94 	.word	0x0800ec94
 80015b4:	0800ec98 	.word	0x0800ec98
 80015b8:	0800ec9c 	.word	0x0800ec9c
 80015bc:	0800eca0 	.word	0x0800eca0
 80015c0:	0800eca4 	.word	0x0800eca4
 80015c4:	0800eca8 	.word	0x0800eca8
 80015c8:	0800ecac 	.word	0x0800ecac
 80015cc:	0800ecb0 	.word	0x0800ecb0
 80015d0:	20001070 	.word	0x20001070
 80015d4:	0800ecc4 	.word	0x0800ecc4
 80015d8:	0800ecd8 	.word	0x0800ecd8
 80015dc:	0800ece0 	.word	0x0800ece0
 80015e0:	0800ecf4 	.word	0x0800ecf4
 80015e4:	0800ed08 	.word	0x0800ed08
 80015e8:	0800ed1c 	.word	0x0800ed1c
 80015ec:	0800ed30 	.word	0x0800ed30
 80015f0:	20001080 	.word	0x20001080

080015f4 <printCredentials>:
			}
		}
	}
}

void printCredentials(int type) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d10a      	bne.n	8001618 <printCredentials+0x24>
		//machine id yazdır
		lcd_print(2, 1, machineID);
 8001602:	4a18      	ldr	r2, [pc, #96]	@ (8001664 <printCredentials+0x70>)
 8001604:	2101      	movs	r1, #1
 8001606:	2002      	movs	r0, #2
 8001608:	f007 fd78 	bl	80090fc <lcd_print>
		lcd_print(2, 13, "    ");
 800160c:	4a16      	ldr	r2, [pc, #88]	@ (8001668 <printCredentials+0x74>)
 800160e:	210d      	movs	r1, #13
 8001610:	2002      	movs	r0, #2
 8001612:	f007 fd73 	bl	80090fc <lcd_print>
		lcd_print(1, 1, "WIFI PASS       ");

		lcd_print(2, 1, "                ");
		lcd_print(2, 1, wifiPass);
	}
}
 8001616:	e021      	b.n	800165c <printCredentials+0x68>
	} else if(type == 2) {
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b02      	cmp	r3, #2
 800161c:	d10f      	bne.n	800163e <printCredentials+0x4a>
		lcd_print(1, 1, "WIFI SSID       ");
 800161e:	4a13      	ldr	r2, [pc, #76]	@ (800166c <printCredentials+0x78>)
 8001620:	2101      	movs	r1, #1
 8001622:	2001      	movs	r0, #1
 8001624:	f007 fd6a 	bl	80090fc <lcd_print>
		lcd_print(2, 1, "                ");
 8001628:	4a11      	ldr	r2, [pc, #68]	@ (8001670 <printCredentials+0x7c>)
 800162a:	2101      	movs	r1, #1
 800162c:	2002      	movs	r0, #2
 800162e:	f007 fd65 	bl	80090fc <lcd_print>
		lcd_print(2, 1, wifiSSID);
 8001632:	4a10      	ldr	r2, [pc, #64]	@ (8001674 <printCredentials+0x80>)
 8001634:	2101      	movs	r1, #1
 8001636:	2002      	movs	r0, #2
 8001638:	f007 fd60 	bl	80090fc <lcd_print>
}
 800163c:	e00e      	b.n	800165c <printCredentials+0x68>
		lcd_print(1, 1, "WIFI PASS       ");
 800163e:	4a0e      	ldr	r2, [pc, #56]	@ (8001678 <printCredentials+0x84>)
 8001640:	2101      	movs	r1, #1
 8001642:	2001      	movs	r0, #1
 8001644:	f007 fd5a 	bl	80090fc <lcd_print>
		lcd_print(2, 1, "                ");
 8001648:	4a09      	ldr	r2, [pc, #36]	@ (8001670 <printCredentials+0x7c>)
 800164a:	2101      	movs	r1, #1
 800164c:	2002      	movs	r0, #2
 800164e:	f007 fd55 	bl	80090fc <lcd_print>
		lcd_print(2, 1, wifiPass);
 8001652:	4a0a      	ldr	r2, [pc, #40]	@ (800167c <printCredentials+0x88>)
 8001654:	2101      	movs	r1, #1
 8001656:	2002      	movs	r0, #2
 8001658:	f007 fd50 	bl	80090fc <lcd_print>
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20001064 	.word	0x20001064
 8001668:	0800ed44 	.word	0x0800ed44
 800166c:	0800ed4c 	.word	0x0800ed4c
 8001670:	0800ed60 	.word	0x0800ed60
 8001674:	20001070 	.word	0x20001070
 8001678:	0800ed74 	.word	0x0800ed74
 800167c:	20001080 	.word	0x20001080

08001680 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001684:	f3bf 8f4f 	dsb	sy
}
 8001688:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800168a:	4b06      	ldr	r3, [pc, #24]	@ (80016a4 <__NVIC_SystemReset+0x24>)
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001692:	4904      	ldr	r1, [pc, #16]	@ (80016a4 <__NVIC_SystemReset+0x24>)
 8001694:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <__NVIC_SystemReset+0x28>)
 8001696:	4313      	orrs	r3, r2
 8001698:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800169a:	f3bf 8f4f 	dsb	sy
}
 800169e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <__NVIC_SystemReset+0x20>
 80016a4:	e000ed00 	.word	0xe000ed00
 80016a8:	05fa0004 	.word	0x05fa0004

080016ac <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80016b2:	2101      	movs	r1, #1
 80016b4:	488e      	ldr	r0, [pc, #568]	@ (80018f0 <menu+0x244>)
 80016b6:	f009 f84b 	bl	800a750 <HAL_GPIO_ReadPin>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b01      	cmp	r3, #1
 80016be:	f040 8099 	bne.w	80017f4 <menu+0x148>
 80016c2:	4b8c      	ldr	r3, [pc, #560]	@ (80018f4 <menu+0x248>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	f083 0301 	eor.w	r3, r3, #1
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f000 8091 	beq.w	80017f4 <menu+0x148>
		menuSayac = menuSayac+1;
 80016d2:	4b89      	ldr	r3, [pc, #548]	@ (80018f8 <menu+0x24c>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4b87      	ldr	r3, [pc, #540]	@ (80018f8 <menu+0x24c>)
 80016dc:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80016de:	4b86      	ldr	r3, [pc, #536]	@ (80018f8 <menu+0x24c>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b24      	cmp	r3, #36	@ 0x24
 80016e4:	d102      	bne.n	80016ec <menu+0x40>
			menuSayac = 1;
 80016e6:	4b84      	ldr	r3, [pc, #528]	@ (80018f8 <menu+0x24c>)
 80016e8:	2201      	movs	r2, #1
 80016ea:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80016ec:	4b82      	ldr	r3, [pc, #520]	@ (80018f8 <menu+0x24c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b12      	cmp	r3, #18
 80016f2:	d106      	bne.n	8001702 <menu+0x56>
 80016f4:	4b81      	ldr	r3, [pc, #516]	@ (80018fc <menu+0x250>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d102      	bne.n	8001702 <menu+0x56>
			menuSayac = 21;
 80016fc:	4b7e      	ldr	r3, [pc, #504]	@ (80018f8 <menu+0x24c>)
 80016fe:	2215      	movs	r2, #21
 8001700:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001702:	4b7d      	ldr	r3, [pc, #500]	@ (80018f8 <menu+0x24c>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b08      	cmp	r3, #8
 8001708:	d106      	bne.n	8001718 <menu+0x6c>
 800170a:	4b7d      	ldr	r3, [pc, #500]	@ (8001900 <menu+0x254>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d102      	bne.n	8001718 <menu+0x6c>
			menuSayac = 16;
 8001712:	4b79      	ldr	r3, [pc, #484]	@ (80018f8 <menu+0x24c>)
 8001714:	2210      	movs	r2, #16
 8001716:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001718:	4b77      	ldr	r3, [pc, #476]	@ (80018f8 <menu+0x24c>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b0d      	cmp	r3, #13
 800171e:	d106      	bne.n	800172e <menu+0x82>
 8001720:	4b77      	ldr	r3, [pc, #476]	@ (8001900 <menu+0x254>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d102      	bne.n	800172e <menu+0x82>
			menuSayac = 16;
 8001728:	4b73      	ldr	r3, [pc, #460]	@ (80018f8 <menu+0x24c>)
 800172a:	2210      	movs	r2, #16
 800172c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800172e:	4b72      	ldr	r3, [pc, #456]	@ (80018f8 <menu+0x24c>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b09      	cmp	r3, #9
 8001734:	d106      	bne.n	8001744 <menu+0x98>
 8001736:	4b72      	ldr	r3, [pc, #456]	@ (8001900 <menu+0x254>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d102      	bne.n	8001744 <menu+0x98>
			menuSayac = 13;
 800173e:	4b6e      	ldr	r3, [pc, #440]	@ (80018f8 <menu+0x24c>)
 8001740:	220d      	movs	r2, #13
 8001742:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001744:	4b6c      	ldr	r3, [pc, #432]	@ (80018f8 <menu+0x24c>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b0a      	cmp	r3, #10
 800174a:	d10a      	bne.n	8001762 <menu+0xb6>
 800174c:	4b6d      	ldr	r3, [pc, #436]	@ (8001904 <menu+0x258>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d003      	beq.n	800175c <menu+0xb0>
 8001754:	4b6b      	ldr	r3, [pc, #428]	@ (8001904 <menu+0x258>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b02      	cmp	r3, #2
 800175a:	d102      	bne.n	8001762 <menu+0xb6>
			menuSayac = 11;
 800175c:	4b66      	ldr	r3, [pc, #408]	@ (80018f8 <menu+0x24c>)
 800175e:	220b      	movs	r2, #11
 8001760:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001762:	4b65      	ldr	r3, [pc, #404]	@ (80018f8 <menu+0x24c>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b0c      	cmp	r3, #12
 8001768:	d10e      	bne.n	8001788 <menu+0xdc>
 800176a:	4b67      	ldr	r3, [pc, #412]	@ (8001908 <menu+0x25c>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d003      	beq.n	800177a <menu+0xce>
 8001772:	4b65      	ldr	r3, [pc, #404]	@ (8001908 <menu+0x25c>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d106      	bne.n	8001788 <menu+0xdc>
 800177a:	4b61      	ldr	r3, [pc, #388]	@ (8001900 <menu+0x254>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d102      	bne.n	8001788 <menu+0xdc>
			menuSayac = 16;
 8001782:	4b5d      	ldr	r3, [pc, #372]	@ (80018f8 <menu+0x24c>)
 8001784:	2210      	movs	r2, #16
 8001786:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001788:	4b5b      	ldr	r3, [pc, #364]	@ (80018f8 <menu+0x24c>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	2b0c      	cmp	r3, #12
 800178e:	d10e      	bne.n	80017ae <menu+0x102>
 8001790:	4b5d      	ldr	r3, [pc, #372]	@ (8001908 <menu+0x25c>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b01      	cmp	r3, #1
 8001796:	d003      	beq.n	80017a0 <menu+0xf4>
 8001798:	4b5b      	ldr	r3, [pc, #364]	@ (8001908 <menu+0x25c>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d106      	bne.n	80017ae <menu+0x102>
 80017a0:	4b57      	ldr	r3, [pc, #348]	@ (8001900 <menu+0x254>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d102      	bne.n	80017ae <menu+0x102>
			menuSayac = 13;
 80017a8:	4b53      	ldr	r3, [pc, #332]	@ (80018f8 <menu+0x24c>)
 80017aa:	220d      	movs	r2, #13
 80017ac:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80017ae:	4b52      	ldr	r3, [pc, #328]	@ (80018f8 <menu+0x24c>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	2b0f      	cmp	r3, #15
 80017b4:	d106      	bne.n	80017c4 <menu+0x118>
 80017b6:	4b55      	ldr	r3, [pc, #340]	@ (800190c <menu+0x260>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d102      	bne.n	80017c4 <menu+0x118>
			menuSayac = 16;
 80017be:	4b4e      	ldr	r3, [pc, #312]	@ (80018f8 <menu+0x24c>)
 80017c0:	2210      	movs	r2, #16
 80017c2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80017c4:	4b4c      	ldr	r3, [pc, #304]	@ (80018f8 <menu+0x24c>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b18      	cmp	r3, #24
 80017ca:	d106      	bne.n	80017da <menu+0x12e>
 80017cc:	4b4b      	ldr	r3, [pc, #300]	@ (80018fc <menu+0x250>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <menu+0x12e>
			menuSayac = 26;
 80017d4:	4b48      	ldr	r3, [pc, #288]	@ (80018f8 <menu+0x24c>)
 80017d6:	221a      	movs	r2, #26
 80017d8:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 80017da:	4b47      	ldr	r3, [pc, #284]	@ (80018f8 <menu+0x24c>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b21      	cmp	r3, #33	@ 0x21
 80017e0:	d106      	bne.n	80017f0 <menu+0x144>
 80017e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001910 <menu+0x264>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d102      	bne.n	80017f0 <menu+0x144>
			menuSayac = 35;
 80017ea:	4b43      	ldr	r3, [pc, #268]	@ (80018f8 <menu+0x24c>)
 80017ec:	2223      	movs	r2, #35	@ 0x23
 80017ee:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80017f0:	f002 fca2 	bl	8004138 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80017f4:	2108      	movs	r1, #8
 80017f6:	4847      	ldr	r0, [pc, #284]	@ (8001914 <menu+0x268>)
 80017f8:	f008 ffaa 	bl	800a750 <HAL_GPIO_ReadPin>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b01      	cmp	r3, #1
 8001800:	f040 8097 	bne.w	8001932 <menu+0x286>
 8001804:	4b3b      	ldr	r3, [pc, #236]	@ (80018f4 <menu+0x248>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	f083 0301 	eor.w	r3, r3, #1
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 808f 	beq.w	8001932 <menu+0x286>
		if (menuSayac <= 1) {
 8001814:	4b38      	ldr	r3, [pc, #224]	@ (80018f8 <menu+0x24c>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d802      	bhi.n	8001822 <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 800181c:	4b36      	ldr	r3, [pc, #216]	@ (80018f8 <menu+0x24c>)
 800181e:	2224      	movs	r2, #36	@ 0x24
 8001820:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001822:	4b35      	ldr	r3, [pc, #212]	@ (80018f8 <menu+0x24c>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	3b01      	subs	r3, #1
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4b33      	ldr	r3, [pc, #204]	@ (80018f8 <menu+0x24c>)
 800182c:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800182e:	4b32      	ldr	r3, [pc, #200]	@ (80018f8 <menu+0x24c>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b14      	cmp	r3, #20
 8001834:	d106      	bne.n	8001844 <menu+0x198>
 8001836:	4b31      	ldr	r3, [pc, #196]	@ (80018fc <menu+0x250>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d102      	bne.n	8001844 <menu+0x198>
			menuSayac = 17;
 800183e:	4b2e      	ldr	r3, [pc, #184]	@ (80018f8 <menu+0x24c>)
 8001840:	2211      	movs	r2, #17
 8001842:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001844:	4b2c      	ldr	r3, [pc, #176]	@ (80018f8 <menu+0x24c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d106      	bne.n	800185a <menu+0x1ae>
 800184c:	4b2c      	ldr	r3, [pc, #176]	@ (8001900 <menu+0x254>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <menu+0x1ae>
			menuSayac = 7;
 8001854:	4b28      	ldr	r3, [pc, #160]	@ (80018f8 <menu+0x24c>)
 8001856:	2207      	movs	r2, #7
 8001858:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800185a:	4b27      	ldr	r3, [pc, #156]	@ (80018f8 <menu+0x24c>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b0f      	cmp	r3, #15
 8001860:	d106      	bne.n	8001870 <menu+0x1c4>
 8001862:	4b27      	ldr	r3, [pc, #156]	@ (8001900 <menu+0x254>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d102      	bne.n	8001870 <menu+0x1c4>
			menuSayac = 12;
 800186a:	4b23      	ldr	r3, [pc, #140]	@ (80018f8 <menu+0x24c>)
 800186c:	220c      	movs	r2, #12
 800186e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001870:	4b21      	ldr	r3, [pc, #132]	@ (80018f8 <menu+0x24c>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b0c      	cmp	r3, #12
 8001876:	d106      	bne.n	8001886 <menu+0x1da>
 8001878:	4b21      	ldr	r3, [pc, #132]	@ (8001900 <menu+0x254>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d102      	bne.n	8001886 <menu+0x1da>
			menuSayac = 8;
 8001880:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <menu+0x24c>)
 8001882:	2208      	movs	r2, #8
 8001884:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001886:	4b1c      	ldr	r3, [pc, #112]	@ (80018f8 <menu+0x24c>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b0a      	cmp	r3, #10
 800188c:	d10a      	bne.n	80018a4 <menu+0x1f8>
 800188e:	4b1d      	ldr	r3, [pc, #116]	@ (8001904 <menu+0x258>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d003      	beq.n	800189e <menu+0x1f2>
 8001896:	4b1b      	ldr	r3, [pc, #108]	@ (8001904 <menu+0x258>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d102      	bne.n	80018a4 <menu+0x1f8>
			menuSayac = 9;
 800189e:	4b16      	ldr	r3, [pc, #88]	@ (80018f8 <menu+0x24c>)
 80018a0:	2209      	movs	r2, #9
 80018a2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80018a4:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <menu+0x24c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b0c      	cmp	r3, #12
 80018aa:	d10a      	bne.n	80018c2 <menu+0x216>
 80018ac:	4b16      	ldr	r3, [pc, #88]	@ (8001908 <menu+0x25c>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d003      	beq.n	80018bc <menu+0x210>
 80018b4:	4b14      	ldr	r3, [pc, #80]	@ (8001908 <menu+0x25c>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d102      	bne.n	80018c2 <menu+0x216>
			menuSayac = 11;
 80018bc:	4b0e      	ldr	r3, [pc, #56]	@ (80018f8 <menu+0x24c>)
 80018be:	220b      	movs	r2, #11
 80018c0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80018c2:	4b0d      	ldr	r3, [pc, #52]	@ (80018f8 <menu+0x24c>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b0f      	cmp	r3, #15
 80018c8:	d106      	bne.n	80018d8 <menu+0x22c>
 80018ca:	4b10      	ldr	r3, [pc, #64]	@ (800190c <menu+0x260>)
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d102      	bne.n	80018d8 <menu+0x22c>
			menuSayac = 14;
 80018d2:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <menu+0x24c>)
 80018d4:	220e      	movs	r2, #14
 80018d6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80018d8:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <menu+0x24c>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b19      	cmp	r3, #25
 80018de:	d11b      	bne.n	8001918 <menu+0x26c>
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <menu+0x250>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d117      	bne.n	8001918 <menu+0x26c>
			menuSayac = 23;
 80018e8:	4b03      	ldr	r3, [pc, #12]	@ (80018f8 <menu+0x24c>)
 80018ea:	2217      	movs	r2, #23
 80018ec:	701a      	strb	r2, [r3, #0]
 80018ee:	e013      	b.n	8001918 <menu+0x26c>
 80018f0:	40010800 	.word	0x40010800
 80018f4:	200010eb 	.word	0x200010eb
 80018f8:	200010bc 	.word	0x200010bc
 80018fc:	200010cb 	.word	0x200010cb
 8001900:	200010c4 	.word	0x200010c4
 8001904:	200010c5 	.word	0x200010c5
 8001908:	200010c6 	.word	0x200010c6
 800190c:	200010c7 	.word	0x200010c7
 8001910:	200010e7 	.word	0x200010e7
 8001914:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 8001918:	4bb0      	ldr	r3, [pc, #704]	@ (8001bdc <menu+0x530>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b22      	cmp	r3, #34	@ 0x22
 800191e:	d106      	bne.n	800192e <menu+0x282>
 8001920:	4baf      	ldr	r3, [pc, #700]	@ (8001be0 <menu+0x534>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d102      	bne.n	800192e <menu+0x282>
			menuSayac = 32;
 8001928:	4bac      	ldr	r3, [pc, #688]	@ (8001bdc <menu+0x530>)
 800192a:	2220      	movs	r2, #32
 800192c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800192e:	f002 fc03 	bl	8004138 <bekle>
	}

	if (menuSayac == 0) {
 8001932:	4baa      	ldr	r3, [pc, #680]	@ (8001bdc <menu+0x530>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 800193a:	4aaa      	ldr	r2, [pc, #680]	@ (8001be4 <menu+0x538>)
 800193c:	2101      	movs	r1, #1
 800193e:	2001      	movs	r0, #1
 8001940:	f007 fbdc 	bl	80090fc <lcd_print>
		lcd_print(2, 1, ayarlarText);
 8001944:	4aa8      	ldr	r2, [pc, #672]	@ (8001be8 <menu+0x53c>)
 8001946:	2101      	movs	r1, #1
 8001948:	2002      	movs	r0, #2
 800194a:	f007 fbd7 	bl	80090fc <lcd_print>
	}

	if (menuSayac == 1) {
 800194e:	4ba3      	ldr	r3, [pc, #652]	@ (8001bdc <menu+0x530>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b01      	cmp	r3, #1
 8001954:	f040 81f4 	bne.w	8001d40 <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 8001958:	4aa4      	ldr	r2, [pc, #656]	@ (8001bec <menu+0x540>)
 800195a:	2101      	movs	r1, #1
 800195c:	2001      	movs	r0, #1
 800195e:	f007 fbcd 	bl	80090fc <lcd_print>

		if(hataGostermeSirasi == 0) {
 8001962:	4ba3      	ldr	r3, [pc, #652]	@ (8001bf0 <menu+0x544>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d115      	bne.n	8001996 <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 800196a:	4aa2      	ldr	r2, [pc, #648]	@ (8001bf4 <menu+0x548>)
 800196c:	2101      	movs	r1, #1
 800196e:	2002      	movs	r0, #2
 8001970:	f007 fbc4 	bl	80090fc <lcd_print>
			lcd_print(2, 15, "   ");
 8001974:	4aa0      	ldr	r2, [pc, #640]	@ (8001bf8 <menu+0x54c>)
 8001976:	210f      	movs	r1, #15
 8001978:	2002      	movs	r0, #2
 800197a:	f007 fbbf 	bl	80090fc <lcd_print>
			itoa(hataKayit1, snum, 10);
 800197e:	4b9f      	ldr	r3, [pc, #636]	@ (8001bfc <menu+0x550>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	220a      	movs	r2, #10
 8001984:	499e      	ldr	r1, [pc, #632]	@ (8001c00 <menu+0x554>)
 8001986:	4618      	mov	r0, r3
 8001988:	f00b ff6a 	bl	800d860 <itoa>
			lcd_print(2, 14, snum);
 800198c:	4a9c      	ldr	r2, [pc, #624]	@ (8001c00 <menu+0x554>)
 800198e:	210e      	movs	r1, #14
 8001990:	2002      	movs	r0, #2
 8001992:	f007 fbb3 	bl	80090fc <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001996:	4b96      	ldr	r3, [pc, #600]	@ (8001bf0 <menu+0x544>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d115      	bne.n	80019ca <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 800199e:	4a99      	ldr	r2, [pc, #612]	@ (8001c04 <menu+0x558>)
 80019a0:	2101      	movs	r1, #1
 80019a2:	2002      	movs	r0, #2
 80019a4:	f007 fbaa 	bl	80090fc <lcd_print>
			lcd_print(2, 15, "  ");
 80019a8:	4a97      	ldr	r2, [pc, #604]	@ (8001c08 <menu+0x55c>)
 80019aa:	210f      	movs	r1, #15
 80019ac:	2002      	movs	r0, #2
 80019ae:	f007 fba5 	bl	80090fc <lcd_print>
			itoa(hataKayit2, snum, 10);
 80019b2:	4b96      	ldr	r3, [pc, #600]	@ (8001c0c <menu+0x560>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	220a      	movs	r2, #10
 80019b8:	4991      	ldr	r1, [pc, #580]	@ (8001c00 <menu+0x554>)
 80019ba:	4618      	mov	r0, r3
 80019bc:	f00b ff50 	bl	800d860 <itoa>
			lcd_print(2, 14, snum);
 80019c0:	4a8f      	ldr	r2, [pc, #572]	@ (8001c00 <menu+0x554>)
 80019c2:	210e      	movs	r1, #14
 80019c4:	2002      	movs	r0, #2
 80019c6:	f007 fb99 	bl	80090fc <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80019ca:	4b89      	ldr	r3, [pc, #548]	@ (8001bf0 <menu+0x544>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d115      	bne.n	80019fe <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 80019d2:	4a8f      	ldr	r2, [pc, #572]	@ (8001c10 <menu+0x564>)
 80019d4:	2101      	movs	r1, #1
 80019d6:	2002      	movs	r0, #2
 80019d8:	f007 fb90 	bl	80090fc <lcd_print>
			lcd_print(2, 15, "  ");
 80019dc:	4a8a      	ldr	r2, [pc, #552]	@ (8001c08 <menu+0x55c>)
 80019de:	210f      	movs	r1, #15
 80019e0:	2002      	movs	r0, #2
 80019e2:	f007 fb8b 	bl	80090fc <lcd_print>
			itoa(hataKayit3, snum, 10);
 80019e6:	4b8b      	ldr	r3, [pc, #556]	@ (8001c14 <menu+0x568>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	220a      	movs	r2, #10
 80019ec:	4984      	ldr	r1, [pc, #528]	@ (8001c00 <menu+0x554>)
 80019ee:	4618      	mov	r0, r3
 80019f0:	f00b ff36 	bl	800d860 <itoa>
			lcd_print(2, 14, snum);
 80019f4:	4a82      	ldr	r2, [pc, #520]	@ (8001c00 <menu+0x554>)
 80019f6:	210e      	movs	r1, #14
 80019f8:	2002      	movs	r0, #2
 80019fa:	f007 fb7f 	bl	80090fc <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80019fe:	4b7c      	ldr	r3, [pc, #496]	@ (8001bf0 <menu+0x544>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d115      	bne.n	8001a32 <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 8001a06:	4a84      	ldr	r2, [pc, #528]	@ (8001c18 <menu+0x56c>)
 8001a08:	2101      	movs	r1, #1
 8001a0a:	2002      	movs	r0, #2
 8001a0c:	f007 fb76 	bl	80090fc <lcd_print>
			lcd_print(2, 15, "  ");
 8001a10:	4a7d      	ldr	r2, [pc, #500]	@ (8001c08 <menu+0x55c>)
 8001a12:	210f      	movs	r1, #15
 8001a14:	2002      	movs	r0, #2
 8001a16:	f007 fb71 	bl	80090fc <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001a1a:	4b80      	ldr	r3, [pc, #512]	@ (8001c1c <menu+0x570>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	220a      	movs	r2, #10
 8001a20:	4977      	ldr	r1, [pc, #476]	@ (8001c00 <menu+0x554>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	f00b ff1c 	bl	800d860 <itoa>
			lcd_print(2, 14, snum);
 8001a28:	4a75      	ldr	r2, [pc, #468]	@ (8001c00 <menu+0x554>)
 8001a2a:	210e      	movs	r1, #14
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f007 fb65 	bl	80090fc <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001a32:	4b6f      	ldr	r3, [pc, #444]	@ (8001bf0 <menu+0x544>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	d115      	bne.n	8001a66 <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 8001a3a:	4a79      	ldr	r2, [pc, #484]	@ (8001c20 <menu+0x574>)
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	2002      	movs	r0, #2
 8001a40:	f007 fb5c 	bl	80090fc <lcd_print>
			lcd_print(2, 15, "  ");
 8001a44:	4a70      	ldr	r2, [pc, #448]	@ (8001c08 <menu+0x55c>)
 8001a46:	210f      	movs	r1, #15
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f007 fb57 	bl	80090fc <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001a4e:	4b75      	ldr	r3, [pc, #468]	@ (8001c24 <menu+0x578>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	220a      	movs	r2, #10
 8001a54:	496a      	ldr	r1, [pc, #424]	@ (8001c00 <menu+0x554>)
 8001a56:	4618      	mov	r0, r3
 8001a58:	f00b ff02 	bl	800d860 <itoa>
			lcd_print(2, 14, snum);
 8001a5c:	4a68      	ldr	r2, [pc, #416]	@ (8001c00 <menu+0x554>)
 8001a5e:	210e      	movs	r1, #14
 8001a60:	2002      	movs	r0, #2
 8001a62:	f007 fb4b 	bl	80090fc <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001a66:	4b62      	ldr	r3, [pc, #392]	@ (8001bf0 <menu+0x544>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b05      	cmp	r3, #5
 8001a6c:	d115      	bne.n	8001a9a <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 8001a6e:	4a6e      	ldr	r2, [pc, #440]	@ (8001c28 <menu+0x57c>)
 8001a70:	2101      	movs	r1, #1
 8001a72:	2002      	movs	r0, #2
 8001a74:	f007 fb42 	bl	80090fc <lcd_print>
			lcd_print(2, 15, "  ");
 8001a78:	4a63      	ldr	r2, [pc, #396]	@ (8001c08 <menu+0x55c>)
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	2002      	movs	r0, #2
 8001a7e:	f007 fb3d 	bl	80090fc <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001a82:	4b6a      	ldr	r3, [pc, #424]	@ (8001c2c <menu+0x580>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	220a      	movs	r2, #10
 8001a88:	495d      	ldr	r1, [pc, #372]	@ (8001c00 <menu+0x554>)
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f00b fee8 	bl	800d860 <itoa>
			lcd_print(2, 14, snum);
 8001a90:	4a5b      	ldr	r2, [pc, #364]	@ (8001c00 <menu+0x554>)
 8001a92:	210e      	movs	r1, #14
 8001a94:	2002      	movs	r0, #2
 8001a96:	f007 fb31 	bl	80090fc <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001a9a:	4b55      	ldr	r3, [pc, #340]	@ (8001bf0 <menu+0x544>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d115      	bne.n	8001ace <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 8001aa2:	4a63      	ldr	r2, [pc, #396]	@ (8001c30 <menu+0x584>)
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	f007 fb28 	bl	80090fc <lcd_print>
			lcd_print(2, 15, "  ");
 8001aac:	4a56      	ldr	r2, [pc, #344]	@ (8001c08 <menu+0x55c>)
 8001aae:	210f      	movs	r1, #15
 8001ab0:	2002      	movs	r0, #2
 8001ab2:	f007 fb23 	bl	80090fc <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001ab6:	4b5f      	ldr	r3, [pc, #380]	@ (8001c34 <menu+0x588>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	220a      	movs	r2, #10
 8001abc:	4950      	ldr	r1, [pc, #320]	@ (8001c00 <menu+0x554>)
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f00b fece 	bl	800d860 <itoa>
			lcd_print(2, 14, snum);
 8001ac4:	4a4e      	ldr	r2, [pc, #312]	@ (8001c00 <menu+0x554>)
 8001ac6:	210e      	movs	r1, #14
 8001ac8:	2002      	movs	r0, #2
 8001aca:	f007 fb17 	bl	80090fc <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001ace:	4b48      	ldr	r3, [pc, #288]	@ (8001bf0 <menu+0x544>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b07      	cmp	r3, #7
 8001ad4:	d115      	bne.n	8001b02 <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 8001ad6:	4a58      	ldr	r2, [pc, #352]	@ (8001c38 <menu+0x58c>)
 8001ad8:	2101      	movs	r1, #1
 8001ada:	2002      	movs	r0, #2
 8001adc:	f007 fb0e 	bl	80090fc <lcd_print>
			lcd_print(2, 15, "  ");
 8001ae0:	4a49      	ldr	r2, [pc, #292]	@ (8001c08 <menu+0x55c>)
 8001ae2:	210f      	movs	r1, #15
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	f007 fb09 	bl	80090fc <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001aea:	4b54      	ldr	r3, [pc, #336]	@ (8001c3c <menu+0x590>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	220a      	movs	r2, #10
 8001af0:	4943      	ldr	r1, [pc, #268]	@ (8001c00 <menu+0x554>)
 8001af2:	4618      	mov	r0, r3
 8001af4:	f00b feb4 	bl	800d860 <itoa>
			lcd_print(2, 14, snum);
 8001af8:	4a41      	ldr	r2, [pc, #260]	@ (8001c00 <menu+0x554>)
 8001afa:	210e      	movs	r1, #14
 8001afc:	2002      	movs	r0, #2
 8001afe:	f007 fafd 	bl	80090fc <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001b02:	4b3b      	ldr	r3, [pc, #236]	@ (8001bf0 <menu+0x544>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d115      	bne.n	8001b36 <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 8001b0a:	4a4d      	ldr	r2, [pc, #308]	@ (8001c40 <menu+0x594>)
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	2002      	movs	r0, #2
 8001b10:	f007 faf4 	bl	80090fc <lcd_print>
			lcd_print(2, 15, "  ");
 8001b14:	4a3c      	ldr	r2, [pc, #240]	@ (8001c08 <menu+0x55c>)
 8001b16:	210f      	movs	r1, #15
 8001b18:	2002      	movs	r0, #2
 8001b1a:	f007 faef 	bl	80090fc <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001b1e:	4b49      	ldr	r3, [pc, #292]	@ (8001c44 <menu+0x598>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	220a      	movs	r2, #10
 8001b24:	4936      	ldr	r1, [pc, #216]	@ (8001c00 <menu+0x554>)
 8001b26:	4618      	mov	r0, r3
 8001b28:	f00b fe9a 	bl	800d860 <itoa>
			lcd_print(2, 14, snum);
 8001b2c:	4a34      	ldr	r2, [pc, #208]	@ (8001c00 <menu+0x554>)
 8001b2e:	210e      	movs	r1, #14
 8001b30:	2002      	movs	r0, #2
 8001b32:	f007 fae3 	bl	80090fc <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001b36:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf0 <menu+0x544>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b09      	cmp	r3, #9
 8001b3c:	d115      	bne.n	8001b6a <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 8001b3e:	4a42      	ldr	r2, [pc, #264]	@ (8001c48 <menu+0x59c>)
 8001b40:	2101      	movs	r1, #1
 8001b42:	2002      	movs	r0, #2
 8001b44:	f007 fada 	bl	80090fc <lcd_print>
			lcd_print(2, 16, " ");
 8001b48:	4a40      	ldr	r2, [pc, #256]	@ (8001c4c <menu+0x5a0>)
 8001b4a:	2110      	movs	r1, #16
 8001b4c:	2002      	movs	r0, #2
 8001b4e:	f007 fad5 	bl	80090fc <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001b52:	4b3f      	ldr	r3, [pc, #252]	@ (8001c50 <menu+0x5a4>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	220a      	movs	r2, #10
 8001b58:	4929      	ldr	r1, [pc, #164]	@ (8001c00 <menu+0x554>)
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f00b fe80 	bl	800d860 <itoa>
			lcd_print(2, 15, snum);
 8001b60:	4a27      	ldr	r2, [pc, #156]	@ (8001c00 <menu+0x554>)
 8001b62:	210f      	movs	r1, #15
 8001b64:	2002      	movs	r0, #2
 8001b66:	f007 fac9 	bl	80090fc <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001b6a:	4b21      	ldr	r3, [pc, #132]	@ (8001bf0 <menu+0x544>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b0a      	cmp	r3, #10
 8001b70:	d104      	bne.n	8001b7c <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 8001b72:	4a38      	ldr	r2, [pc, #224]	@ (8001c54 <menu+0x5a8>)
 8001b74:	2101      	movs	r1, #1
 8001b76:	2002      	movs	r0, #2
 8001b78:	f007 fac0 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b7c:	2102      	movs	r1, #2
 8001b7e:	4836      	ldr	r0, [pc, #216]	@ (8001c58 <menu+0x5ac>)
 8001b80:	f008 fde6 	bl	800a750 <HAL_GPIO_ReadPin>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d119      	bne.n	8001bbe <menu+0x512>
 8001b8a:	4b34      	ldr	r3, [pc, #208]	@ (8001c5c <menu+0x5b0>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	f083 0301 	eor.w	r3, r3, #1
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d012      	beq.n	8001bbe <menu+0x512>
 8001b98:	4b31      	ldr	r3, [pc, #196]	@ (8001c60 <menu+0x5b4>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10e      	bne.n	8001bbe <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001ba0:	4b13      	ldr	r3, [pc, #76]	@ (8001bf0 <menu+0x544>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	b2da      	uxtb	r2, r3
 8001ba8:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <menu+0x544>)
 8001baa:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001bac:	4b10      	ldr	r3, [pc, #64]	@ (8001bf0 <menu+0x544>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b0a      	cmp	r3, #10
 8001bb2:	d902      	bls.n	8001bba <menu+0x50e>
				hataGostermeSirasi = 0;
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001bf0 <menu+0x544>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bba:	f002 fabd 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001bbe:	2104      	movs	r1, #4
 8001bc0:	4825      	ldr	r0, [pc, #148]	@ (8001c58 <menu+0x5ac>)
 8001bc2:	f008 fdc5 	bl	800a750 <HAL_GPIO_ReadPin>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d15e      	bne.n	8001c8a <menu+0x5de>
 8001bcc:	4b23      	ldr	r3, [pc, #140]	@ (8001c5c <menu+0x5b0>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	f083 0301 	eor.w	r3, r3, #1
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d057      	beq.n	8001c8a <menu+0x5de>
 8001bda:	e043      	b.n	8001c64 <menu+0x5b8>
 8001bdc:	200010bc 	.word	0x200010bc
 8001be0:	200010e7 	.word	0x200010e7
 8001be4:	20001220 	.word	0x20001220
 8001be8:	20001234 	.word	0x20001234
 8001bec:	20001248 	.word	0x20001248
 8001bf0:	200010be 	.word	0x200010be
 8001bf4:	2000125c 	.word	0x2000125c
 8001bf8:	0800ed88 	.word	0x0800ed88
 8001bfc:	200010dd 	.word	0x200010dd
 8001c00:	2000105c 	.word	0x2000105c
 8001c04:	20001270 	.word	0x20001270
 8001c08:	0800ed8c 	.word	0x0800ed8c
 8001c0c:	200010de 	.word	0x200010de
 8001c10:	20001284 	.word	0x20001284
 8001c14:	200010df 	.word	0x200010df
 8001c18:	20001298 	.word	0x20001298
 8001c1c:	200010e0 	.word	0x200010e0
 8001c20:	200012ac 	.word	0x200012ac
 8001c24:	200010e1 	.word	0x200010e1
 8001c28:	200012c0 	.word	0x200012c0
 8001c2c:	200010e2 	.word	0x200010e2
 8001c30:	200012d4 	.word	0x200012d4
 8001c34:	200010e3 	.word	0x200010e3
 8001c38:	200012e8 	.word	0x200012e8
 8001c3c:	200010e4 	.word	0x200010e4
 8001c40:	200012fc 	.word	0x200012fc
 8001c44:	200010e5 	.word	0x200010e5
 8001c48:	20001310 	.word	0x20001310
 8001c4c:	0800ed90 	.word	0x0800ed90
 8001c50:	200010e6 	.word	0x200010e6
 8001c54:	20001324 	.word	0x20001324
 8001c58:	40010800 	.word	0x40010800
 8001c5c:	200010eb 	.word	0x200010eb
 8001c60:	200010cb 	.word	0x200010cb
 8001c64:	4b8a      	ldr	r3, [pc, #552]	@ (8001e90 <menu+0x7e4>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d10e      	bne.n	8001c8a <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001c6c:	4b89      	ldr	r3, [pc, #548]	@ (8001e94 <menu+0x7e8>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	4b87      	ldr	r3, [pc, #540]	@ (8001e94 <menu+0x7e8>)
 8001c76:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001c78:	4b86      	ldr	r3, [pc, #536]	@ (8001e94 <menu+0x7e8>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b0b      	cmp	r3, #11
 8001c7e:	d902      	bls.n	8001c86 <menu+0x5da>
	    		hataGostermeSirasi = 10;
 8001c80:	4b84      	ldr	r3, [pc, #528]	@ (8001e94 <menu+0x7e8>)
 8001c82:	220a      	movs	r2, #10
 8001c84:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001c86:	f002 fa57 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001c8a:	2108      	movs	r1, #8
 8001c8c:	4882      	ldr	r0, [pc, #520]	@ (8001e98 <menu+0x7ec>)
 8001c8e:	f008 fd5f 	bl	800a750 <HAL_GPIO_ReadPin>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d153      	bne.n	8001d40 <menu+0x694>
 8001c98:	4b80      	ldr	r3, [pc, #512]	@ (8001e9c <menu+0x7f0>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	f083 0301 	eor.w	r3, r3, #1
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d04c      	beq.n	8001d40 <menu+0x694>
 8001ca6:	4b7b      	ldr	r3, [pc, #492]	@ (8001e94 <menu+0x7e8>)
 8001ca8:	781b      	ldrb	r3, [r3, #0]
 8001caa:	2b0a      	cmp	r3, #10
 8001cac:	d148      	bne.n	8001d40 <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 8001cae:	4b7c      	ldr	r3, [pc, #496]	@ (8001ea0 <menu+0x7f4>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
 8001cb4:	4b7b      	ldr	r3, [pc, #492]	@ (8001ea4 <menu+0x7f8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001cbc:	4b7a      	ldr	r3, [pc, #488]	@ (8001ea8 <menu+0x7fc>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
 8001cc2:	4b78      	ldr	r3, [pc, #480]	@ (8001ea4 <menu+0x7f8>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001cca:	4b78      	ldr	r3, [pc, #480]	@ (8001eac <menu+0x800>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
 8001cd0:	4b74      	ldr	r3, [pc, #464]	@ (8001ea4 <menu+0x7f8>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001cd8:	4b75      	ldr	r3, [pc, #468]	@ (8001eb0 <menu+0x804>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	701a      	strb	r2, [r3, #0]
 8001cde:	4b71      	ldr	r3, [pc, #452]	@ (8001ea4 <menu+0x7f8>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001ce6:	4b73      	ldr	r3, [pc, #460]	@ (8001eb4 <menu+0x808>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
 8001cec:	4b6d      	ldr	r3, [pc, #436]	@ (8001ea4 <menu+0x7f8>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001cf4:	4b70      	ldr	r3, [pc, #448]	@ (8001eb8 <menu+0x80c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
 8001cfa:	4b6a      	ldr	r3, [pc, #424]	@ (8001ea4 <menu+0x7f8>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001d02:	4b6e      	ldr	r3, [pc, #440]	@ (8001ebc <menu+0x810>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	701a      	strb	r2, [r3, #0]
 8001d08:	4b66      	ldr	r3, [pc, #408]	@ (8001ea4 <menu+0x7f8>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001d10:	4b6b      	ldr	r3, [pc, #428]	@ (8001ec0 <menu+0x814>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
 8001d16:	4b63      	ldr	r3, [pc, #396]	@ (8001ea4 <menu+0x7f8>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001d1e:	4b69      	ldr	r3, [pc, #420]	@ (8001ec4 <menu+0x818>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
 8001d24:	4b5f      	ldr	r3, [pc, #380]	@ (8001ea4 <menu+0x7f8>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001d2c:	4b66      	ldr	r3, [pc, #408]	@ (8001ec8 <menu+0x81c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
 8001d32:	4b5c      	ldr	r3, [pc, #368]	@ (8001ea4 <menu+0x7f8>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 8001d3a:	4b64      	ldr	r3, [pc, #400]	@ (8001ecc <menu+0x820>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001d40:	4b63      	ldr	r3, [pc, #396]	@ (8001ed0 <menu+0x824>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	f040 808e 	bne.w	8001e66 <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 8001d4a:	4a62      	ldr	r2, [pc, #392]	@ (8001ed4 <menu+0x828>)
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	2001      	movs	r0, #1
 8001d50:	f007 f9d4 	bl	80090fc <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001d54:	4b4e      	ldr	r3, [pc, #312]	@ (8001e90 <menu+0x7e4>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d003      	beq.n	8001d64 <menu+0x6b8>
 8001d5c:	4b4c      	ldr	r3, [pc, #304]	@ (8001e90 <menu+0x7e4>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d104      	bne.n	8001d6e <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 8001d64:	4a5c      	ldr	r2, [pc, #368]	@ (8001ed8 <menu+0x82c>)
 8001d66:	2101      	movs	r1, #1
 8001d68:	2002      	movs	r0, #2
 8001d6a:	f007 f9c7 	bl	80090fc <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8001edc <menu+0x830>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d108      	bne.n	8001d88 <menu+0x6dc>
 8001d76:	4b46      	ldr	r3, [pc, #280]	@ (8001e90 <menu+0x7e4>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d104      	bne.n	8001d88 <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 8001d7e:	4a58      	ldr	r2, [pc, #352]	@ (8001ee0 <menu+0x834>)
 8001d80:	2101      	movs	r1, #1
 8001d82:	2002      	movs	r0, #2
 8001d84:	f007 f9ba 	bl	80090fc <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001d88:	4b54      	ldr	r3, [pc, #336]	@ (8001edc <menu+0x830>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d108      	bne.n	8001da2 <menu+0x6f6>
 8001d90:	4b3f      	ldr	r3, [pc, #252]	@ (8001e90 <menu+0x7e4>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d104      	bne.n	8001da2 <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 8001d98:	4a52      	ldr	r2, [pc, #328]	@ (8001ee4 <menu+0x838>)
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	2002      	movs	r0, #2
 8001d9e:	f007 f9ad 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001da2:	2102      	movs	r1, #2
 8001da4:	483c      	ldr	r0, [pc, #240]	@ (8001e98 <menu+0x7ec>)
 8001da6:	f008 fcd3 	bl	800a750 <HAL_GPIO_ReadPin>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d119      	bne.n	8001de4 <menu+0x738>
 8001db0:	4b3a      	ldr	r3, [pc, #232]	@ (8001e9c <menu+0x7f0>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	f083 0301 	eor.w	r3, r3, #1
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d012      	beq.n	8001de4 <menu+0x738>
 8001dbe:	4b34      	ldr	r3, [pc, #208]	@ (8001e90 <menu+0x7e4>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10e      	bne.n	8001de4 <menu+0x738>
			calismaSekli = calismaSekli + 1;
 8001dc6:	4b45      	ldr	r3, [pc, #276]	@ (8001edc <menu+0x830>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	3301      	adds	r3, #1
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	4b43      	ldr	r3, [pc, #268]	@ (8001edc <menu+0x830>)
 8001dd0:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001dd2:	4b42      	ldr	r3, [pc, #264]	@ (8001edc <menu+0x830>)
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d902      	bls.n	8001de0 <menu+0x734>
				calismaSekli = 0;
 8001dda:	4b40      	ldr	r3, [pc, #256]	@ (8001edc <menu+0x830>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001de0:	f002 f9aa 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001de4:	2104      	movs	r1, #4
 8001de6:	482c      	ldr	r0, [pc, #176]	@ (8001e98 <menu+0x7ec>)
 8001de8:	f008 fcb2 	bl	800a750 <HAL_GPIO_ReadPin>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d119      	bne.n	8001e26 <menu+0x77a>
 8001df2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e9c <menu+0x7f0>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	f083 0301 	eor.w	r3, r3, #1
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d012      	beq.n	8001e26 <menu+0x77a>
 8001e00:	4b23      	ldr	r3, [pc, #140]	@ (8001e90 <menu+0x7e4>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d10e      	bne.n	8001e26 <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 8001e08:	4b34      	ldr	r3, [pc, #208]	@ (8001edc <menu+0x830>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	4b32      	ldr	r3, [pc, #200]	@ (8001edc <menu+0x830>)
 8001e12:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001e14:	4b31      	ldr	r3, [pc, #196]	@ (8001edc <menu+0x830>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d002      	beq.n	8001e22 <menu+0x776>
	    		calismaSekli = 1;
 8001e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001edc <menu+0x830>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001e22:	f002 f989 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e26:	2108      	movs	r1, #8
 8001e28:	481b      	ldr	r0, [pc, #108]	@ (8001e98 <menu+0x7ec>)
 8001e2a:	f008 fc91 	bl	800a750 <HAL_GPIO_ReadPin>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d118      	bne.n	8001e66 <menu+0x7ba>
 8001e34:	4b19      	ldr	r3, [pc, #100]	@ (8001e9c <menu+0x7f0>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	f083 0301 	eor.w	r3, r3, #1
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d011      	beq.n	8001e66 <menu+0x7ba>
			eepromData[1] = calismaSekli;
 8001e42:	4b26      	ldr	r3, [pc, #152]	@ (8001edc <menu+0x830>)
 8001e44:	781a      	ldrb	r2, [r3, #0]
 8001e46:	4b17      	ldr	r3, [pc, #92]	@ (8001ea4 <menu+0x7f8>)
 8001e48:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001e4a:	4b24      	ldr	r3, [pc, #144]	@ (8001edc <menu+0x830>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d106      	bne.n	8001e60 <menu+0x7b4>
				altLimit = 1;
 8001e52:	4b25      	ldr	r3, [pc, #148]	@ (8001ee8 <menu+0x83c>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001e58:	4b23      	ldr	r3, [pc, #140]	@ (8001ee8 <menu+0x83c>)
 8001e5a:	781a      	ldrb	r2, [r3, #0]
 8001e5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ea4 <menu+0x7f8>)
 8001e5e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001e60:	4b1a      	ldr	r3, [pc, #104]	@ (8001ecc <menu+0x820>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001e66:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed0 <menu+0x824>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b03      	cmp	r3, #3
 8001e6c:	f040 809c 	bne.w	8001fa8 <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 8001e70:	4a1e      	ldr	r2, [pc, #120]	@ (8001eec <menu+0x840>)
 8001e72:	2101      	movs	r1, #1
 8001e74:	2001      	movs	r0, #1
 8001e76:	f007 f941 	bl	80090fc <lcd_print>

		if(emniyetCercevesi == 0) {
 8001e7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef0 <menu+0x844>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d13a      	bne.n	8001ef8 <menu+0x84c>
			lcd_print(2, 1, pasifText);
 8001e82:	4a1c      	ldr	r2, [pc, #112]	@ (8001ef4 <menu+0x848>)
 8001e84:	2101      	movs	r1, #1
 8001e86:	2002      	movs	r0, #2
 8001e88:	f007 f938 	bl	80090fc <lcd_print>
 8001e8c:	e03d      	b.n	8001f0a <menu+0x85e>
 8001e8e:	bf00      	nop
 8001e90:	200010cb 	.word	0x200010cb
 8001e94:	200010be 	.word	0x200010be
 8001e98:	40010800 	.word	0x40010800
 8001e9c:	200010eb 	.word	0x200010eb
 8001ea0:	200010dd 	.word	0x200010dd
 8001ea4:	20000fec 	.word	0x20000fec
 8001ea8:	200010de 	.word	0x200010de
 8001eac:	200010df 	.word	0x200010df
 8001eb0:	200010e0 	.word	0x200010e0
 8001eb4:	200010e1 	.word	0x200010e1
 8001eb8:	200010e2 	.word	0x200010e2
 8001ebc:	200010e3 	.word	0x200010e3
 8001ec0:	200010e4 	.word	0x200010e4
 8001ec4:	200010e5 	.word	0x200010e5
 8001ec8:	200010e6 	.word	0x200010e6
 8001ecc:	200010e8 	.word	0x200010e8
 8001ed0:	200010bc 	.word	0x200010bc
 8001ed4:	20001338 	.word	0x20001338
 8001ed8:	2000134c 	.word	0x2000134c
 8001edc:	200010bd 	.word	0x200010bd
 8001ee0:	20001360 	.word	0x20001360
 8001ee4:	20001374 	.word	0x20001374
 8001ee8:	200010c2 	.word	0x200010c2
 8001eec:	20001388 	.word	0x20001388
 8001ef0:	200010c0 	.word	0x200010c0
 8001ef4:	2000139c 	.word	0x2000139c
		} else if(emniyetCercevesi == 1) {
 8001ef8:	4b6b      	ldr	r3, [pc, #428]	@ (80020a8 <menu+0x9fc>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d104      	bne.n	8001f0a <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 8001f00:	4a6a      	ldr	r2, [pc, #424]	@ (80020ac <menu+0xa00>)
 8001f02:	2101      	movs	r1, #1
 8001f04:	2002      	movs	r0, #2
 8001f06:	f007 f8f9 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f0a:	2102      	movs	r1, #2
 8001f0c:	4868      	ldr	r0, [pc, #416]	@ (80020b0 <menu+0xa04>)
 8001f0e:	f008 fc1f 	bl	800a750 <HAL_GPIO_ReadPin>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d115      	bne.n	8001f44 <menu+0x898>
 8001f18:	4b66      	ldr	r3, [pc, #408]	@ (80020b4 <menu+0xa08>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	f083 0301 	eor.w	r3, r3, #1
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00e      	beq.n	8001f44 <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001f26:	4b60      	ldr	r3, [pc, #384]	@ (80020a8 <menu+0x9fc>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4b5e      	ldr	r3, [pc, #376]	@ (80020a8 <menu+0x9fc>)
 8001f30:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001f32:	4b5d      	ldr	r3, [pc, #372]	@ (80020a8 <menu+0x9fc>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d902      	bls.n	8001f40 <menu+0x894>
				emniyetCercevesi = 0;
 8001f3a:	4b5b      	ldr	r3, [pc, #364]	@ (80020a8 <menu+0x9fc>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f40:	f002 f8fa 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f44:	2104      	movs	r1, #4
 8001f46:	485a      	ldr	r0, [pc, #360]	@ (80020b0 <menu+0xa04>)
 8001f48:	f008 fc02 	bl	800a750 <HAL_GPIO_ReadPin>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d115      	bne.n	8001f7e <menu+0x8d2>
 8001f52:	4b58      	ldr	r3, [pc, #352]	@ (80020b4 <menu+0xa08>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	f083 0301 	eor.w	r3, r3, #1
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00e      	beq.n	8001f7e <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001f60:	4b51      	ldr	r3, [pc, #324]	@ (80020a8 <menu+0x9fc>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	4b4f      	ldr	r3, [pc, #316]	@ (80020a8 <menu+0x9fc>)
 8001f6a:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001f6c:	4b4e      	ldr	r3, [pc, #312]	@ (80020a8 <menu+0x9fc>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <menu+0x8ce>
		   		emniyetCercevesi = 1;
 8001f74:	4b4c      	ldr	r3, [pc, #304]	@ (80020a8 <menu+0x9fc>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f7a:	f002 f8dd 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001f7e:	2108      	movs	r1, #8
 8001f80:	484b      	ldr	r0, [pc, #300]	@ (80020b0 <menu+0xa04>)
 8001f82:	f008 fbe5 	bl	800a750 <HAL_GPIO_ReadPin>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d10d      	bne.n	8001fa8 <menu+0x8fc>
 8001f8c:	4b49      	ldr	r3, [pc, #292]	@ (80020b4 <menu+0xa08>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	f083 0301 	eor.w	r3, r3, #1
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d006      	beq.n	8001fa8 <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 8001f9a:	4b43      	ldr	r3, [pc, #268]	@ (80020a8 <menu+0x9fc>)
 8001f9c:	781a      	ldrb	r2, [r3, #0]
 8001f9e:	4b46      	ldr	r3, [pc, #280]	@ (80020b8 <menu+0xa0c>)
 8001fa0:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001fa2:	4b46      	ldr	r3, [pc, #280]	@ (80020bc <menu+0xa10>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001fa8:	4b45      	ldr	r3, [pc, #276]	@ (80020c0 <menu+0xa14>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d166      	bne.n	800207e <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 8001fb0:	4a44      	ldr	r2, [pc, #272]	@ (80020c4 <menu+0xa18>)
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	f007 f8a1 	bl	80090fc <lcd_print>

		if(yavaslamaLimit == 0) {
 8001fba:	4b43      	ldr	r3, [pc, #268]	@ (80020c8 <menu+0xa1c>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d105      	bne.n	8001fce <menu+0x922>
			lcd_print(2, 1, pasifText);
 8001fc2:	4a42      	ldr	r2, [pc, #264]	@ (80020cc <menu+0xa20>)
 8001fc4:	2101      	movs	r1, #1
 8001fc6:	2002      	movs	r0, #2
 8001fc8:	f007 f898 	bl	80090fc <lcd_print>
 8001fcc:	e008      	b.n	8001fe0 <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 8001fce:	4b3e      	ldr	r3, [pc, #248]	@ (80020c8 <menu+0xa1c>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d104      	bne.n	8001fe0 <menu+0x934>
			lcd_print(2, 1, aktifText);
 8001fd6:	4a3e      	ldr	r2, [pc, #248]	@ (80020d0 <menu+0xa24>)
 8001fd8:	2101      	movs	r1, #1
 8001fda:	2002      	movs	r0, #2
 8001fdc:	f007 f88e 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fe0:	2102      	movs	r1, #2
 8001fe2:	4833      	ldr	r0, [pc, #204]	@ (80020b0 <menu+0xa04>)
 8001fe4:	f008 fbb4 	bl	800a750 <HAL_GPIO_ReadPin>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d115      	bne.n	800201a <menu+0x96e>
 8001fee:	4b31      	ldr	r3, [pc, #196]	@ (80020b4 <menu+0xa08>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	f083 0301 	eor.w	r3, r3, #1
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00e      	beq.n	800201a <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001ffc:	4b32      	ldr	r3, [pc, #200]	@ (80020c8 <menu+0xa1c>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	3301      	adds	r3, #1
 8002002:	b2da      	uxtb	r2, r3
 8002004:	4b30      	ldr	r3, [pc, #192]	@ (80020c8 <menu+0xa1c>)
 8002006:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8002008:	4b2f      	ldr	r3, [pc, #188]	@ (80020c8 <menu+0xa1c>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d902      	bls.n	8002016 <menu+0x96a>
				yavaslamaLimit = 0;
 8002010:	4b2d      	ldr	r3, [pc, #180]	@ (80020c8 <menu+0xa1c>)
 8002012:	2200      	movs	r2, #0
 8002014:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002016:	f002 f88f 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800201a:	2104      	movs	r1, #4
 800201c:	4824      	ldr	r0, [pc, #144]	@ (80020b0 <menu+0xa04>)
 800201e:	f008 fb97 	bl	800a750 <HAL_GPIO_ReadPin>
 8002022:	4603      	mov	r3, r0
 8002024:	2b01      	cmp	r3, #1
 8002026:	d115      	bne.n	8002054 <menu+0x9a8>
 8002028:	4b22      	ldr	r3, [pc, #136]	@ (80020b4 <menu+0xa08>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	f083 0301 	eor.w	r3, r3, #1
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00e      	beq.n	8002054 <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002036:	4b24      	ldr	r3, [pc, #144]	@ (80020c8 <menu+0xa1c>)
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	3b01      	subs	r3, #1
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4b22      	ldr	r3, [pc, #136]	@ (80020c8 <menu+0xa1c>)
 8002040:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002042:	4b21      	ldr	r3, [pc, #132]	@ (80020c8 <menu+0xa1c>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <menu+0x9a4>
		   		yavaslamaLimit = 1;
 800204a:	4b1f      	ldr	r3, [pc, #124]	@ (80020c8 <menu+0xa1c>)
 800204c:	2201      	movs	r2, #1
 800204e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002050:	f002 f872 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002054:	2108      	movs	r1, #8
 8002056:	4816      	ldr	r0, [pc, #88]	@ (80020b0 <menu+0xa04>)
 8002058:	f008 fb7a 	bl	800a750 <HAL_GPIO_ReadPin>
 800205c:	4603      	mov	r3, r0
 800205e:	2b01      	cmp	r3, #1
 8002060:	d10d      	bne.n	800207e <menu+0x9d2>
 8002062:	4b14      	ldr	r3, [pc, #80]	@ (80020b4 <menu+0xa08>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	f083 0301 	eor.w	r3, r3, #1
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d006      	beq.n	800207e <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 8002070:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <menu+0xa1c>)
 8002072:	781a      	ldrb	r2, [r3, #0]
 8002074:	4b10      	ldr	r3, [pc, #64]	@ (80020b8 <menu+0xa0c>)
 8002076:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8002078:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <menu+0xa10>)
 800207a:	2201      	movs	r2, #1
 800207c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 800207e:	4b10      	ldr	r3, [pc, #64]	@ (80020c0 <menu+0xa14>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b05      	cmp	r3, #5
 8002084:	f040 80aa 	bne.w	80021dc <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 8002088:	4a12      	ldr	r2, [pc, #72]	@ (80020d4 <menu+0xa28>)
 800208a:	2101      	movs	r1, #1
 800208c:	2001      	movs	r0, #1
 800208e:	f007 f835 	bl	80090fc <lcd_print>

		if(altLimit == 0) {
 8002092:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <menu+0xa2c>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d120      	bne.n	80020dc <menu+0xa30>
			lcd_print(2, 1, pasifText);
 800209a:	4a0c      	ldr	r2, [pc, #48]	@ (80020cc <menu+0xa20>)
 800209c:	2101      	movs	r1, #1
 800209e:	2002      	movs	r0, #2
 80020a0:	f007 f82c 	bl	80090fc <lcd_print>
 80020a4:	e023      	b.n	80020ee <menu+0xa42>
 80020a6:	bf00      	nop
 80020a8:	200010c0 	.word	0x200010c0
 80020ac:	200000ec 	.word	0x200000ec
 80020b0:	40010800 	.word	0x40010800
 80020b4:	200010eb 	.word	0x200010eb
 80020b8:	20000fec 	.word	0x20000fec
 80020bc:	200010e8 	.word	0x200010e8
 80020c0:	200010bc 	.word	0x200010bc
 80020c4:	200013c4 	.word	0x200013c4
 80020c8:	200010c1 	.word	0x200010c1
 80020cc:	2000139c 	.word	0x2000139c
 80020d0:	200013b0 	.word	0x200013b0
 80020d4:	200013d8 	.word	0x200013d8
 80020d8:	200010c2 	.word	0x200010c2
		} else if(altLimit == 1) {
 80020dc:	4b89      	ldr	r3, [pc, #548]	@ (8002304 <menu+0xc58>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d104      	bne.n	80020ee <menu+0xa42>
			lcd_print(2, 1, aktifText);
 80020e4:	4a88      	ldr	r2, [pc, #544]	@ (8002308 <menu+0xc5c>)
 80020e6:	2101      	movs	r1, #1
 80020e8:	2002      	movs	r0, #2
 80020ea:	f007 f807 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80020ee:	2102      	movs	r1, #2
 80020f0:	4886      	ldr	r0, [pc, #536]	@ (800230c <menu+0xc60>)
 80020f2:	f008 fb2d 	bl	800a750 <HAL_GPIO_ReadPin>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d119      	bne.n	8002130 <menu+0xa84>
 80020fc:	4b84      	ldr	r3, [pc, #528]	@ (8002310 <menu+0xc64>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	f083 0301 	eor.w	r3, r3, #1
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d012      	beq.n	8002130 <menu+0xa84>
 800210a:	4b82      	ldr	r3, [pc, #520]	@ (8002314 <menu+0xc68>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10e      	bne.n	8002130 <menu+0xa84>
			altLimit = altLimit + 1;
 8002112:	4b7c      	ldr	r3, [pc, #496]	@ (8002304 <menu+0xc58>)
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	3301      	adds	r3, #1
 8002118:	b2da      	uxtb	r2, r3
 800211a:	4b7a      	ldr	r3, [pc, #488]	@ (8002304 <menu+0xc58>)
 800211c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800211e:	4b79      	ldr	r3, [pc, #484]	@ (8002304 <menu+0xc58>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d902      	bls.n	800212c <menu+0xa80>
				altLimit = 0;
 8002126:	4b77      	ldr	r3, [pc, #476]	@ (8002304 <menu+0xc58>)
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800212c:	f002 f804 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002130:	2104      	movs	r1, #4
 8002132:	4876      	ldr	r0, [pc, #472]	@ (800230c <menu+0xc60>)
 8002134:	f008 fb0c 	bl	800a750 <HAL_GPIO_ReadPin>
 8002138:	4603      	mov	r3, r0
 800213a:	2b01      	cmp	r3, #1
 800213c:	d119      	bne.n	8002172 <menu+0xac6>
 800213e:	4b74      	ldr	r3, [pc, #464]	@ (8002310 <menu+0xc64>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	f083 0301 	eor.w	r3, r3, #1
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d012      	beq.n	8002172 <menu+0xac6>
 800214c:	4b71      	ldr	r3, [pc, #452]	@ (8002314 <menu+0xc68>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10e      	bne.n	8002172 <menu+0xac6>
			altLimit = altLimit - 1;
 8002154:	4b6b      	ldr	r3, [pc, #428]	@ (8002304 <menu+0xc58>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	3b01      	subs	r3, #1
 800215a:	b2da      	uxtb	r2, r3
 800215c:	4b69      	ldr	r3, [pc, #420]	@ (8002304 <menu+0xc58>)
 800215e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002160:	4b68      	ldr	r3, [pc, #416]	@ (8002304 <menu+0xc58>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <menu+0xac2>
		   		altLimit = 1;
 8002168:	4b66      	ldr	r3, [pc, #408]	@ (8002304 <menu+0xc58>)
 800216a:	2201      	movs	r2, #1
 800216c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800216e:	f001 ffe3 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002172:	2108      	movs	r1, #8
 8002174:	4865      	ldr	r0, [pc, #404]	@ (800230c <menu+0xc60>)
 8002176:	f008 faeb 	bl	800a750 <HAL_GPIO_ReadPin>
 800217a:	4603      	mov	r3, r0
 800217c:	2b01      	cmp	r3, #1
 800217e:	d12d      	bne.n	80021dc <menu+0xb30>
 8002180:	4b63      	ldr	r3, [pc, #396]	@ (8002310 <menu+0xc64>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	f083 0301 	eor.w	r3, r3, #1
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d026      	beq.n	80021dc <menu+0xb30>
			eepromData[5] = altLimit;
 800218e:	4b5d      	ldr	r3, [pc, #372]	@ (8002304 <menu+0xc58>)
 8002190:	781a      	ldrb	r2, [r3, #0]
 8002192:	4b61      	ldr	r3, [pc, #388]	@ (8002318 <menu+0xc6c>)
 8002194:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002196:	4b5b      	ldr	r3, [pc, #364]	@ (8002304 <menu+0xc58>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d110      	bne.n	80021c0 <menu+0xb14>
 800219e:	4b5f      	ldr	r3, [pc, #380]	@ (800231c <menu+0xc70>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <menu+0xb02>
 80021a6:	4b5d      	ldr	r3, [pc, #372]	@ (800231c <menu+0xc70>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d108      	bne.n	80021c0 <menu+0xb14>
				kapiTablaAcKonum = 3;
 80021ae:	4b5b      	ldr	r3, [pc, #364]	@ (800231c <menu+0xc70>)
 80021b0:	2203      	movs	r2, #3
 80021b2:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80021b4:	4b59      	ldr	r3, [pc, #356]	@ (800231c <menu+0xc70>)
 80021b6:	781a      	ldrb	r2, [r3, #0]
 80021b8:	4b57      	ldr	r3, [pc, #348]	@ (8002318 <menu+0xc6c>)
 80021ba:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80021be:	e00a      	b.n	80021d6 <menu+0xb2a>
			} else if(altLimit == 0) {
 80021c0:	4b50      	ldr	r3, [pc, #320]	@ (8002304 <menu+0xc58>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d106      	bne.n	80021d6 <menu+0xb2a>
				platformSilindirTipi = 0;
 80021c8:	4b55      	ldr	r3, [pc, #340]	@ (8002320 <menu+0xc74>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80021ce:	4b54      	ldr	r3, [pc, #336]	@ (8002320 <menu+0xc74>)
 80021d0:	781a      	ldrb	r2, [r3, #0]
 80021d2:	4b51      	ldr	r3, [pc, #324]	@ (8002318 <menu+0xc6c>)
 80021d4:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80021d6:	4b53      	ldr	r3, [pc, #332]	@ (8002324 <menu+0xc78>)
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80021dc:	4b52      	ldr	r3, [pc, #328]	@ (8002328 <menu+0xc7c>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b06      	cmp	r3, #6
 80021e2:	d166      	bne.n	80022b2 <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 80021e4:	4a51      	ldr	r2, [pc, #324]	@ (800232c <menu+0xc80>)
 80021e6:	2101      	movs	r1, #1
 80021e8:	2001      	movs	r0, #1
 80021ea:	f006 ff87 	bl	80090fc <lcd_print>

		if(basincSalteri == 0) {
 80021ee:	4b50      	ldr	r3, [pc, #320]	@ (8002330 <menu+0xc84>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d105      	bne.n	8002202 <menu+0xb56>
			lcd_print(2, 1, pasifText);
 80021f6:	4a4f      	ldr	r2, [pc, #316]	@ (8002334 <menu+0xc88>)
 80021f8:	2101      	movs	r1, #1
 80021fa:	2002      	movs	r0, #2
 80021fc:	f006 ff7e 	bl	80090fc <lcd_print>
 8002200:	e008      	b.n	8002214 <menu+0xb68>
		} else if(basincSalteri == 1) {
 8002202:	4b4b      	ldr	r3, [pc, #300]	@ (8002330 <menu+0xc84>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d104      	bne.n	8002214 <menu+0xb68>
			lcd_print(2, 1, aktifText);
 800220a:	4a3f      	ldr	r2, [pc, #252]	@ (8002308 <menu+0xc5c>)
 800220c:	2101      	movs	r1, #1
 800220e:	2002      	movs	r0, #2
 8002210:	f006 ff74 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002214:	2102      	movs	r1, #2
 8002216:	483d      	ldr	r0, [pc, #244]	@ (800230c <menu+0xc60>)
 8002218:	f008 fa9a 	bl	800a750 <HAL_GPIO_ReadPin>
 800221c:	4603      	mov	r3, r0
 800221e:	2b01      	cmp	r3, #1
 8002220:	d115      	bne.n	800224e <menu+0xba2>
 8002222:	4b3b      	ldr	r3, [pc, #236]	@ (8002310 <menu+0xc64>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	f083 0301 	eor.w	r3, r3, #1
 800222a:	b2db      	uxtb	r3, r3
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00e      	beq.n	800224e <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 8002230:	4b3f      	ldr	r3, [pc, #252]	@ (8002330 <menu+0xc84>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	3301      	adds	r3, #1
 8002236:	b2da      	uxtb	r2, r3
 8002238:	4b3d      	ldr	r3, [pc, #244]	@ (8002330 <menu+0xc84>)
 800223a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 800223c:	4b3c      	ldr	r3, [pc, #240]	@ (8002330 <menu+0xc84>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d902      	bls.n	800224a <menu+0xb9e>
				basincSalteri = 0;
 8002244:	4b3a      	ldr	r3, [pc, #232]	@ (8002330 <menu+0xc84>)
 8002246:	2200      	movs	r2, #0
 8002248:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800224a:	f001 ff75 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800224e:	2104      	movs	r1, #4
 8002250:	482e      	ldr	r0, [pc, #184]	@ (800230c <menu+0xc60>)
 8002252:	f008 fa7d 	bl	800a750 <HAL_GPIO_ReadPin>
 8002256:	4603      	mov	r3, r0
 8002258:	2b01      	cmp	r3, #1
 800225a:	d115      	bne.n	8002288 <menu+0xbdc>
 800225c:	4b2c      	ldr	r3, [pc, #176]	@ (8002310 <menu+0xc64>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	f083 0301 	eor.w	r3, r3, #1
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00e      	beq.n	8002288 <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 800226a:	4b31      	ldr	r3, [pc, #196]	@ (8002330 <menu+0xc84>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	3b01      	subs	r3, #1
 8002270:	b2da      	uxtb	r2, r3
 8002272:	4b2f      	ldr	r3, [pc, #188]	@ (8002330 <menu+0xc84>)
 8002274:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002276:	4b2e      	ldr	r3, [pc, #184]	@ (8002330 <menu+0xc84>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <menu+0xbd8>
		   		basincSalteri = 1;
 800227e:	4b2c      	ldr	r3, [pc, #176]	@ (8002330 <menu+0xc84>)
 8002280:	2201      	movs	r2, #1
 8002282:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002284:	f001 ff58 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002288:	2108      	movs	r1, #8
 800228a:	4820      	ldr	r0, [pc, #128]	@ (800230c <menu+0xc60>)
 800228c:	f008 fa60 	bl	800a750 <HAL_GPIO_ReadPin>
 8002290:	4603      	mov	r3, r0
 8002292:	2b01      	cmp	r3, #1
 8002294:	d10d      	bne.n	80022b2 <menu+0xc06>
 8002296:	4b1e      	ldr	r3, [pc, #120]	@ (8002310 <menu+0xc64>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	f083 0301 	eor.w	r3, r3, #1
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d006      	beq.n	80022b2 <menu+0xc06>
			eepromData[6] = basincSalteri;
 80022a4:	4b22      	ldr	r3, [pc, #136]	@ (8002330 <menu+0xc84>)
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002318 <menu+0xc6c>)
 80022aa:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80022ac:	4b1d      	ldr	r3, [pc, #116]	@ (8002324 <menu+0xc78>)
 80022ae:	2201      	movs	r2, #1
 80022b0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80022b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002328 <menu+0xc7c>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b07      	cmp	r3, #7
 80022b8:	f040 80a9 	bne.w	800240e <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 80022bc:	4a1e      	ldr	r2, [pc, #120]	@ (8002338 <menu+0xc8c>)
 80022be:	2101      	movs	r1, #1
 80022c0:	2001      	movs	r0, #1
 80022c2:	f006 ff1b 	bl	80090fc <lcd_print>

		if(kapiSecimleri == 0) {
 80022c6:	4b1d      	ldr	r3, [pc, #116]	@ (800233c <menu+0xc90>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 80022ce:	4a19      	ldr	r2, [pc, #100]	@ (8002334 <menu+0xc88>)
 80022d0:	2101      	movs	r1, #1
 80022d2:	2002      	movs	r0, #2
 80022d4:	f006 ff12 	bl	80090fc <lcd_print>
 80022d8:	e03f      	b.n	800235a <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 80022da:	4b18      	ldr	r3, [pc, #96]	@ (800233c <menu+0xc90>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d105      	bne.n	80022ee <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 80022e2:	4a17      	ldr	r2, [pc, #92]	@ (8002340 <menu+0xc94>)
 80022e4:	2101      	movs	r1, #1
 80022e6:	2002      	movs	r0, #2
 80022e8:	f006 ff08 	bl	80090fc <lcd_print>
 80022ec:	e035      	b.n	800235a <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 80022ee:	4b13      	ldr	r3, [pc, #76]	@ (800233c <menu+0xc90>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d128      	bne.n	8002348 <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 80022f6:	4a13      	ldr	r2, [pc, #76]	@ (8002344 <menu+0xc98>)
 80022f8:	2101      	movs	r1, #1
 80022fa:	2002      	movs	r0, #2
 80022fc:	f006 fefe 	bl	80090fc <lcd_print>
 8002300:	e02b      	b.n	800235a <menu+0xcae>
 8002302:	bf00      	nop
 8002304:	200010c2 	.word	0x200010c2
 8002308:	200013b0 	.word	0x200013b0
 800230c:	40010800 	.word	0x40010800
 8002310:	200010eb 	.word	0x200010eb
 8002314:	200010bd 	.word	0x200010bd
 8002318:	20000fec 	.word	0x20000fec
 800231c:	200010c9 	.word	0x200010c9
 8002320:	200010cf 	.word	0x200010cf
 8002324:	200010e8 	.word	0x200010e8
 8002328:	200010bc 	.word	0x200010bc
 800232c:	200013ec 	.word	0x200013ec
 8002330:	200010c3 	.word	0x200010c3
 8002334:	2000139c 	.word	0x2000139c
 8002338:	20001400 	.word	0x20001400
 800233c:	200010c4 	.word	0x200010c4
 8002340:	20001414 	.word	0x20001414
 8002344:	20001428 	.word	0x20001428
		} else if(kapiSecimleri == 3) {
 8002348:	4b76      	ldr	r3, [pc, #472]	@ (8002524 <menu+0xe78>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d104      	bne.n	800235a <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 8002350:	4a75      	ldr	r2, [pc, #468]	@ (8002528 <menu+0xe7c>)
 8002352:	2101      	movs	r1, #1
 8002354:	2002      	movs	r0, #2
 8002356:	f006 fed1 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800235a:	2102      	movs	r1, #2
 800235c:	4873      	ldr	r0, [pc, #460]	@ (800252c <menu+0xe80>)
 800235e:	f008 f9f7 	bl	800a750 <HAL_GPIO_ReadPin>
 8002362:	4603      	mov	r3, r0
 8002364:	2b01      	cmp	r3, #1
 8002366:	d115      	bne.n	8002394 <menu+0xce8>
 8002368:	4b71      	ldr	r3, [pc, #452]	@ (8002530 <menu+0xe84>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	f083 0301 	eor.w	r3, r3, #1
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00e      	beq.n	8002394 <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 8002376:	4b6b      	ldr	r3, [pc, #428]	@ (8002524 <menu+0xe78>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	3301      	adds	r3, #1
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4b69      	ldr	r3, [pc, #420]	@ (8002524 <menu+0xe78>)
 8002380:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002382:	4b68      	ldr	r3, [pc, #416]	@ (8002524 <menu+0xe78>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b03      	cmp	r3, #3
 8002388:	d902      	bls.n	8002390 <menu+0xce4>
				kapiSecimleri = 0;
 800238a:	4b66      	ldr	r3, [pc, #408]	@ (8002524 <menu+0xe78>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002390:	f001 fed2 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002394:	2104      	movs	r1, #4
 8002396:	4865      	ldr	r0, [pc, #404]	@ (800252c <menu+0xe80>)
 8002398:	f008 f9da 	bl	800a750 <HAL_GPIO_ReadPin>
 800239c:	4603      	mov	r3, r0
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d115      	bne.n	80023ce <menu+0xd22>
 80023a2:	4b63      	ldr	r3, [pc, #396]	@ (8002530 <menu+0xe84>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	f083 0301 	eor.w	r3, r3, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00e      	beq.n	80023ce <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 80023b0:	4b5c      	ldr	r3, [pc, #368]	@ (8002524 <menu+0xe78>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	3b01      	subs	r3, #1
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	4b5a      	ldr	r3, [pc, #360]	@ (8002524 <menu+0xe78>)
 80023ba:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80023bc:	4b59      	ldr	r3, [pc, #356]	@ (8002524 <menu+0xe78>)
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d902      	bls.n	80023ca <menu+0xd1e>
		   		kapiSecimleri = 3;
 80023c4:	4b57      	ldr	r3, [pc, #348]	@ (8002524 <menu+0xe78>)
 80023c6:	2203      	movs	r2, #3
 80023c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023ca:	f001 feb5 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023ce:	2108      	movs	r1, #8
 80023d0:	4856      	ldr	r0, [pc, #344]	@ (800252c <menu+0xe80>)
 80023d2:	f008 f9bd 	bl	800a750 <HAL_GPIO_ReadPin>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d118      	bne.n	800240e <menu+0xd62>
 80023dc:	4b54      	ldr	r3, [pc, #336]	@ (8002530 <menu+0xe84>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	f083 0301 	eor.w	r3, r3, #1
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d011      	beq.n	800240e <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 80023ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002524 <menu+0xe78>)
 80023ec:	781a      	ldrb	r2, [r3, #0]
 80023ee:	4b51      	ldr	r3, [pc, #324]	@ (8002534 <menu+0xe88>)
 80023f0:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80023f2:	4b4c      	ldr	r3, [pc, #304]	@ (8002524 <menu+0xe78>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d006      	beq.n	8002408 <menu+0xd5c>
				altLimit = 1;
 80023fa:	4b4f      	ldr	r3, [pc, #316]	@ (8002538 <menu+0xe8c>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002400:	4b4d      	ldr	r3, [pc, #308]	@ (8002538 <menu+0xe8c>)
 8002402:	781a      	ldrb	r2, [r3, #0]
 8002404:	4b4b      	ldr	r3, [pc, #300]	@ (8002534 <menu+0xe88>)
 8002406:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002408:	4b4c      	ldr	r3, [pc, #304]	@ (800253c <menu+0xe90>)
 800240a:	2201      	movs	r2, #1
 800240c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800240e:	4b4c      	ldr	r3, [pc, #304]	@ (8002540 <menu+0xe94>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b08      	cmp	r3, #8
 8002414:	d167      	bne.n	80024e6 <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 8002416:	4a4b      	ldr	r2, [pc, #300]	@ (8002544 <menu+0xe98>)
 8002418:	2101      	movs	r1, #1
 800241a:	2001      	movs	r0, #1
 800241c:	f006 fe6e 	bl	80090fc <lcd_print>

		if(kapiAcTipi == 0) {
 8002420:	4b49      	ldr	r3, [pc, #292]	@ (8002548 <menu+0xe9c>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d105      	bne.n	8002434 <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 8002428:	4a48      	ldr	r2, [pc, #288]	@ (800254c <menu+0xea0>)
 800242a:	2101      	movs	r1, #1
 800242c:	2002      	movs	r0, #2
 800242e:	f006 fe65 	bl	80090fc <lcd_print>
 8002432:	e008      	b.n	8002446 <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 8002434:	4b44      	ldr	r3, [pc, #272]	@ (8002548 <menu+0xe9c>)
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d104      	bne.n	8002446 <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 800243c:	4a44      	ldr	r2, [pc, #272]	@ (8002550 <menu+0xea4>)
 800243e:	2101      	movs	r1, #1
 8002440:	2002      	movs	r0, #2
 8002442:	f006 fe5b 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002446:	2102      	movs	r1, #2
 8002448:	4838      	ldr	r0, [pc, #224]	@ (800252c <menu+0xe80>)
 800244a:	f008 f981 	bl	800a750 <HAL_GPIO_ReadPin>
 800244e:	4603      	mov	r3, r0
 8002450:	2b01      	cmp	r3, #1
 8002452:	d115      	bne.n	8002480 <menu+0xdd4>
 8002454:	4b36      	ldr	r3, [pc, #216]	@ (8002530 <menu+0xe84>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	f083 0301 	eor.w	r3, r3, #1
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d00e      	beq.n	8002480 <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 8002462:	4b39      	ldr	r3, [pc, #228]	@ (8002548 <menu+0xe9c>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	3301      	adds	r3, #1
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4b37      	ldr	r3, [pc, #220]	@ (8002548 <menu+0xe9c>)
 800246c:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800246e:	4b36      	ldr	r3, [pc, #216]	@ (8002548 <menu+0xe9c>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b01      	cmp	r3, #1
 8002474:	d902      	bls.n	800247c <menu+0xdd0>
				kapiAcTipi = 0;
 8002476:	4b34      	ldr	r3, [pc, #208]	@ (8002548 <menu+0xe9c>)
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800247c:	f001 fe5c 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002480:	2104      	movs	r1, #4
 8002482:	482a      	ldr	r0, [pc, #168]	@ (800252c <menu+0xe80>)
 8002484:	f008 f964 	bl	800a750 <HAL_GPIO_ReadPin>
 8002488:	4603      	mov	r3, r0
 800248a:	2b01      	cmp	r3, #1
 800248c:	d115      	bne.n	80024ba <menu+0xe0e>
 800248e:	4b28      	ldr	r3, [pc, #160]	@ (8002530 <menu+0xe84>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	f083 0301 	eor.w	r3, r3, #1
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d00e      	beq.n	80024ba <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 800249c:	4b2a      	ldr	r3, [pc, #168]	@ (8002548 <menu+0xe9c>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	4b28      	ldr	r3, [pc, #160]	@ (8002548 <menu+0xe9c>)
 80024a6:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80024a8:	4b27      	ldr	r3, [pc, #156]	@ (8002548 <menu+0xe9c>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d002      	beq.n	80024b6 <menu+0xe0a>
		   		kapiAcTipi = 1;
 80024b0:	4b25      	ldr	r3, [pc, #148]	@ (8002548 <menu+0xe9c>)
 80024b2:	2201      	movs	r2, #1
 80024b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024b6:	f001 fe3f 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024ba:	2108      	movs	r1, #8
 80024bc:	481b      	ldr	r0, [pc, #108]	@ (800252c <menu+0xe80>)
 80024be:	f008 f947 	bl	800a750 <HAL_GPIO_ReadPin>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d10e      	bne.n	80024e6 <menu+0xe3a>
 80024c8:	4b19      	ldr	r3, [pc, #100]	@ (8002530 <menu+0xe84>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	f083 0301 	eor.w	r3, r3, #1
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d007      	beq.n	80024e6 <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 80024d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002548 <menu+0xe9c>)
 80024d8:	781a      	ldrb	r2, [r3, #0]
 80024da:	4b16      	ldr	r3, [pc, #88]	@ (8002534 <menu+0xe88>)
 80024dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 80024e0:	4b16      	ldr	r3, [pc, #88]	@ (800253c <menu+0xe90>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80024e6:	4b16      	ldr	r3, [pc, #88]	@ (8002540 <menu+0xe94>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b09      	cmp	r3, #9
 80024ec:	f040 8092 	bne.w	8002614 <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 80024f0:	4a18      	ldr	r2, [pc, #96]	@ (8002554 <menu+0xea8>)
 80024f2:	2101      	movs	r1, #1
 80024f4:	2001      	movs	r0, #1
 80024f6:	f006 fe01 	bl	80090fc <lcd_print>

		if(kapi1Tip == 0) {
 80024fa:	4b17      	ldr	r3, [pc, #92]	@ (8002558 <menu+0xeac>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d105      	bne.n	800250e <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 8002502:	4a16      	ldr	r2, [pc, #88]	@ (800255c <menu+0xeb0>)
 8002504:	2101      	movs	r1, #1
 8002506:	2002      	movs	r0, #2
 8002508:	f006 fdf8 	bl	80090fc <lcd_print>
 800250c:	e033      	b.n	8002576 <menu+0xeca>
		} else if(kapi1Tip == 1) {
 800250e:	4b12      	ldr	r3, [pc, #72]	@ (8002558 <menu+0xeac>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d126      	bne.n	8002564 <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 8002516:	4a12      	ldr	r2, [pc, #72]	@ (8002560 <menu+0xeb4>)
 8002518:	2101      	movs	r1, #1
 800251a:	2002      	movs	r0, #2
 800251c:	f006 fdee 	bl	80090fc <lcd_print>
 8002520:	e029      	b.n	8002576 <menu+0xeca>
 8002522:	bf00      	nop
 8002524:	200010c4 	.word	0x200010c4
 8002528:	2000143c 	.word	0x2000143c
 800252c:	40010800 	.word	0x40010800
 8002530:	200010eb 	.word	0x200010eb
 8002534:	20000fec 	.word	0x20000fec
 8002538:	200010c2 	.word	0x200010c2
 800253c:	200010e8 	.word	0x200010e8
 8002540:	200010bc 	.word	0x200010bc
 8002544:	20001450 	.word	0x20001450
 8002548:	200010c8 	.word	0x200010c8
 800254c:	20001464 	.word	0x20001464
 8002550:	20001478 	.word	0x20001478
 8002554:	2000148c 	.word	0x2000148c
 8002558:	200010c5 	.word	0x200010c5
 800255c:	20000100 	.word	0x20000100
 8002560:	200014a0 	.word	0x200014a0
		} else if(kapi1Tip == 2) {
 8002564:	4b73      	ldr	r3, [pc, #460]	@ (8002734 <menu+0x1088>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b02      	cmp	r3, #2
 800256a:	d104      	bne.n	8002576 <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 800256c:	4a72      	ldr	r2, [pc, #456]	@ (8002738 <menu+0x108c>)
 800256e:	2101      	movs	r1, #1
 8002570:	2002      	movs	r0, #2
 8002572:	f006 fdc3 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002576:	2102      	movs	r1, #2
 8002578:	4870      	ldr	r0, [pc, #448]	@ (800273c <menu+0x1090>)
 800257a:	f008 f8e9 	bl	800a750 <HAL_GPIO_ReadPin>
 800257e:	4603      	mov	r3, r0
 8002580:	2b01      	cmp	r3, #1
 8002582:	d115      	bne.n	80025b0 <menu+0xf04>
 8002584:	4b6e      	ldr	r3, [pc, #440]	@ (8002740 <menu+0x1094>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	f083 0301 	eor.w	r3, r3, #1
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00e      	beq.n	80025b0 <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 8002592:	4b68      	ldr	r3, [pc, #416]	@ (8002734 <menu+0x1088>)
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	3301      	adds	r3, #1
 8002598:	b2da      	uxtb	r2, r3
 800259a:	4b66      	ldr	r3, [pc, #408]	@ (8002734 <menu+0x1088>)
 800259c:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800259e:	4b65      	ldr	r3, [pc, #404]	@ (8002734 <menu+0x1088>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d902      	bls.n	80025ac <menu+0xf00>
				kapi1Tip = 0;
 80025a6:	4b63      	ldr	r3, [pc, #396]	@ (8002734 <menu+0x1088>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025ac:	f001 fdc4 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025b0:	2104      	movs	r1, #4
 80025b2:	4862      	ldr	r0, [pc, #392]	@ (800273c <menu+0x1090>)
 80025b4:	f008 f8cc 	bl	800a750 <HAL_GPIO_ReadPin>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d115      	bne.n	80025ea <menu+0xf3e>
 80025be:	4b60      	ldr	r3, [pc, #384]	@ (8002740 <menu+0x1094>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	f083 0301 	eor.w	r3, r3, #1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00e      	beq.n	80025ea <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 80025cc:	4b59      	ldr	r3, [pc, #356]	@ (8002734 <menu+0x1088>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	3b01      	subs	r3, #1
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	4b57      	ldr	r3, [pc, #348]	@ (8002734 <menu+0x1088>)
 80025d6:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80025d8:	4b56      	ldr	r3, [pc, #344]	@ (8002734 <menu+0x1088>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b03      	cmp	r3, #3
 80025de:	d902      	bls.n	80025e6 <menu+0xf3a>
		   		kapi1Tip = 2;
 80025e0:	4b54      	ldr	r3, [pc, #336]	@ (8002734 <menu+0x1088>)
 80025e2:	2202      	movs	r2, #2
 80025e4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025e6:	f001 fda7 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025ea:	2108      	movs	r1, #8
 80025ec:	4853      	ldr	r0, [pc, #332]	@ (800273c <menu+0x1090>)
 80025ee:	f008 f8af 	bl	800a750 <HAL_GPIO_ReadPin>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d10d      	bne.n	8002614 <menu+0xf68>
 80025f8:	4b51      	ldr	r3, [pc, #324]	@ (8002740 <menu+0x1094>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	f083 0301 	eor.w	r3, r3, #1
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b00      	cmp	r3, #0
 8002604:	d006      	beq.n	8002614 <menu+0xf68>
			eepromData[8] = kapi1Tip;
 8002606:	4b4b      	ldr	r3, [pc, #300]	@ (8002734 <menu+0x1088>)
 8002608:	781a      	ldrb	r2, [r3, #0]
 800260a:	4b4e      	ldr	r3, [pc, #312]	@ (8002744 <menu+0x1098>)
 800260c:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800260e:	4b4e      	ldr	r3, [pc, #312]	@ (8002748 <menu+0x109c>)
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002614:	4b4d      	ldr	r3, [pc, #308]	@ (800274c <menu+0x10a0>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b0a      	cmp	r3, #10
 800261a:	d16c      	bne.n	80026f6 <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 800261c:	4a4c      	ldr	r2, [pc, #304]	@ (8002750 <menu+0x10a4>)
 800261e:	2101      	movs	r1, #1
 8002620:	2001      	movs	r0, #1
 8002622:	f006 fd6b 	bl	80090fc <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002626:	4a4b      	ldr	r2, [pc, #300]	@ (8002754 <menu+0x10a8>)
 8002628:	2101      	movs	r1, #1
 800262a:	2002      	movs	r0, #2
 800262c:	f006 fd66 	bl	80090fc <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 8002630:	4b49      	ldr	r3, [pc, #292]	@ (8002758 <menu+0x10ac>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	220a      	movs	r2, #10
 8002636:	4949      	ldr	r1, [pc, #292]	@ (800275c <menu+0x10b0>)
 8002638:	4618      	mov	r0, r3
 800263a:	f00b f911 	bl	800d860 <itoa>
		lcd_print(2,16,snum);
 800263e:	4a47      	ldr	r2, [pc, #284]	@ (800275c <menu+0x10b0>)
 8002640:	2110      	movs	r1, #16
 8002642:	2002      	movs	r0, #2
 8002644:	f006 fd5a 	bl	80090fc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002648:	2102      	movs	r1, #2
 800264a:	483c      	ldr	r0, [pc, #240]	@ (800273c <menu+0x1090>)
 800264c:	f008 f880 	bl	800a750 <HAL_GPIO_ReadPin>
 8002650:	4603      	mov	r3, r0
 8002652:	2b01      	cmp	r3, #1
 8002654:	d119      	bne.n	800268a <menu+0xfde>
 8002656:	4b3a      	ldr	r3, [pc, #232]	@ (8002740 <menu+0x1094>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	f083 0301 	eor.w	r3, r3, #1
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d012      	beq.n	800268a <menu+0xfde>
 8002664:	4b33      	ldr	r3, [pc, #204]	@ (8002734 <menu+0x1088>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10e      	bne.n	800268a <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 800266c:	4b3a      	ldr	r3, [pc, #232]	@ (8002758 <menu+0x10ac>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	3301      	adds	r3, #1
 8002672:	b2da      	uxtb	r2, r3
 8002674:	4b38      	ldr	r3, [pc, #224]	@ (8002758 <menu+0x10ac>)
 8002676:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002678:	4b37      	ldr	r3, [pc, #220]	@ (8002758 <menu+0x10ac>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b05      	cmp	r3, #5
 800267e:	d902      	bls.n	8002686 <menu+0xfda>
				kapi1AcSure = 0;
 8002680:	4b35      	ldr	r3, [pc, #212]	@ (8002758 <menu+0x10ac>)
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002686:	f001 fd57 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800268a:	2104      	movs	r1, #4
 800268c:	482b      	ldr	r0, [pc, #172]	@ (800273c <menu+0x1090>)
 800268e:	f008 f85f 	bl	800a750 <HAL_GPIO_ReadPin>
 8002692:	4603      	mov	r3, r0
 8002694:	2b01      	cmp	r3, #1
 8002696:	d119      	bne.n	80026cc <menu+0x1020>
 8002698:	4b29      	ldr	r3, [pc, #164]	@ (8002740 <menu+0x1094>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	f083 0301 	eor.w	r3, r3, #1
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d012      	beq.n	80026cc <menu+0x1020>
 80026a6:	4b23      	ldr	r3, [pc, #140]	@ (8002734 <menu+0x1088>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10e      	bne.n	80026cc <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 80026ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002758 <menu+0x10ac>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	4b28      	ldr	r3, [pc, #160]	@ (8002758 <menu+0x10ac>)
 80026b8:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80026ba:	4b27      	ldr	r3, [pc, #156]	@ (8002758 <menu+0x10ac>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b06      	cmp	r3, #6
 80026c0:	d902      	bls.n	80026c8 <menu+0x101c>
		   		kapi1AcSure = 5;
 80026c2:	4b25      	ldr	r3, [pc, #148]	@ (8002758 <menu+0x10ac>)
 80026c4:	2205      	movs	r2, #5
 80026c6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026c8:	f001 fd36 	bl	8004138 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026cc:	2108      	movs	r1, #8
 80026ce:	481b      	ldr	r0, [pc, #108]	@ (800273c <menu+0x1090>)
 80026d0:	f008 f83e 	bl	800a750 <HAL_GPIO_ReadPin>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d10d      	bne.n	80026f6 <menu+0x104a>
 80026da:	4b19      	ldr	r3, [pc, #100]	@ (8002740 <menu+0x1094>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	f083 0301 	eor.w	r3, r3, #1
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d006      	beq.n	80026f6 <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 80026e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002758 <menu+0x10ac>)
 80026ea:	781a      	ldrb	r2, [r3, #0]
 80026ec:	4b15      	ldr	r3, [pc, #84]	@ (8002744 <menu+0x1098>)
 80026ee:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80026f0:	4b15      	ldr	r3, [pc, #84]	@ (8002748 <menu+0x109c>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80026f6:	4b15      	ldr	r3, [pc, #84]	@ (800274c <menu+0x10a0>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b0b      	cmp	r3, #11
 80026fc:	f040 8090 	bne.w	8002820 <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 8002700:	4a17      	ldr	r2, [pc, #92]	@ (8002760 <menu+0x10b4>)
 8002702:	2101      	movs	r1, #1
 8002704:	2001      	movs	r0, #1
 8002706:	f006 fcf9 	bl	80090fc <lcd_print>

		if(kapi2Tip == 0) {
 800270a:	4b16      	ldr	r3, [pc, #88]	@ (8002764 <menu+0x10b8>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d105      	bne.n	800271e <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 8002712:	4a15      	ldr	r2, [pc, #84]	@ (8002768 <menu+0x10bc>)
 8002714:	2101      	movs	r1, #1
 8002716:	2002      	movs	r0, #2
 8002718:	f006 fcf0 	bl	80090fc <lcd_print>
 800271c:	e031      	b.n	8002782 <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 800271e:	4b11      	ldr	r3, [pc, #68]	@ (8002764 <menu+0x10b8>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d124      	bne.n	8002770 <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 8002726:	4a11      	ldr	r2, [pc, #68]	@ (800276c <menu+0x10c0>)
 8002728:	2101      	movs	r1, #1
 800272a:	2002      	movs	r0, #2
 800272c:	f006 fce6 	bl	80090fc <lcd_print>
 8002730:	e027      	b.n	8002782 <menu+0x10d6>
 8002732:	bf00      	nop
 8002734:	200010c5 	.word	0x200010c5
 8002738:	20000114 	.word	0x20000114
 800273c:	40010800 	.word	0x40010800
 8002740:	200010eb 	.word	0x200010eb
 8002744:	20000fec 	.word	0x20000fec
 8002748:	200010e8 	.word	0x200010e8
 800274c:	200010bc 	.word	0x200010bc
 8002750:	200014b4 	.word	0x200014b4
 8002754:	200014c8 	.word	0x200014c8
 8002758:	200010d5 	.word	0x200010d5
 800275c:	2000105c 	.word	0x2000105c
 8002760:	200014dc 	.word	0x200014dc
 8002764:	200010c6 	.word	0x200010c6
 8002768:	20000100 	.word	0x20000100
 800276c:	200014a0 	.word	0x200014a0
		} else if(kapi2Tip == 2) {
 8002770:	4b73      	ldr	r3, [pc, #460]	@ (8002940 <menu+0x1294>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d104      	bne.n	8002782 <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 8002778:	4a72      	ldr	r2, [pc, #456]	@ (8002944 <menu+0x1298>)
 800277a:	2101      	movs	r1, #1
 800277c:	2002      	movs	r0, #2
 800277e:	f006 fcbd 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002782:	2102      	movs	r1, #2
 8002784:	4870      	ldr	r0, [pc, #448]	@ (8002948 <menu+0x129c>)
 8002786:	f007 ffe3 	bl	800a750 <HAL_GPIO_ReadPin>
 800278a:	4603      	mov	r3, r0
 800278c:	2b01      	cmp	r3, #1
 800278e:	d115      	bne.n	80027bc <menu+0x1110>
 8002790:	4b6e      	ldr	r3, [pc, #440]	@ (800294c <menu+0x12a0>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	f083 0301 	eor.w	r3, r3, #1
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00e      	beq.n	80027bc <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 800279e:	4b68      	ldr	r3, [pc, #416]	@ (8002940 <menu+0x1294>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	3301      	adds	r3, #1
 80027a4:	b2da      	uxtb	r2, r3
 80027a6:	4b66      	ldr	r3, [pc, #408]	@ (8002940 <menu+0x1294>)
 80027a8:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80027aa:	4b65      	ldr	r3, [pc, #404]	@ (8002940 <menu+0x1294>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d902      	bls.n	80027b8 <menu+0x110c>
				kapi2Tip = 0;
 80027b2:	4b63      	ldr	r3, [pc, #396]	@ (8002940 <menu+0x1294>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027b8:	f001 fcbe 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80027bc:	2104      	movs	r1, #4
 80027be:	4862      	ldr	r0, [pc, #392]	@ (8002948 <menu+0x129c>)
 80027c0:	f007 ffc6 	bl	800a750 <HAL_GPIO_ReadPin>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d115      	bne.n	80027f6 <menu+0x114a>
 80027ca:	4b60      	ldr	r3, [pc, #384]	@ (800294c <menu+0x12a0>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	f083 0301 	eor.w	r3, r3, #1
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00e      	beq.n	80027f6 <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 80027d8:	4b59      	ldr	r3, [pc, #356]	@ (8002940 <menu+0x1294>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	3b01      	subs	r3, #1
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	4b57      	ldr	r3, [pc, #348]	@ (8002940 <menu+0x1294>)
 80027e2:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 80027e4:	4b56      	ldr	r3, [pc, #344]	@ (8002940 <menu+0x1294>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b03      	cmp	r3, #3
 80027ea:	d902      	bls.n	80027f2 <menu+0x1146>
		   		kapi2Tip = 2;
 80027ec:	4b54      	ldr	r3, [pc, #336]	@ (8002940 <menu+0x1294>)
 80027ee:	2202      	movs	r2, #2
 80027f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027f2:	f001 fca1 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027f6:	2108      	movs	r1, #8
 80027f8:	4853      	ldr	r0, [pc, #332]	@ (8002948 <menu+0x129c>)
 80027fa:	f007 ffa9 	bl	800a750 <HAL_GPIO_ReadPin>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b01      	cmp	r3, #1
 8002802:	d10d      	bne.n	8002820 <menu+0x1174>
 8002804:	4b51      	ldr	r3, [pc, #324]	@ (800294c <menu+0x12a0>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	f083 0301 	eor.w	r3, r3, #1
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d006      	beq.n	8002820 <menu+0x1174>
			eepromData[10] = kapi2Tip;
 8002812:	4b4b      	ldr	r3, [pc, #300]	@ (8002940 <menu+0x1294>)
 8002814:	781a      	ldrb	r2, [r3, #0]
 8002816:	4b4e      	ldr	r3, [pc, #312]	@ (8002950 <menu+0x12a4>)
 8002818:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 800281a:	4b4e      	ldr	r3, [pc, #312]	@ (8002954 <menu+0x12a8>)
 800281c:	2201      	movs	r2, #1
 800281e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002820:	4b4d      	ldr	r3, [pc, #308]	@ (8002958 <menu+0x12ac>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b0c      	cmp	r3, #12
 8002826:	d16c      	bne.n	8002902 <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 8002828:	4a4c      	ldr	r2, [pc, #304]	@ (800295c <menu+0x12b0>)
 800282a:	2101      	movs	r1, #1
 800282c:	2001      	movs	r0, #1
 800282e:	f006 fc65 	bl	80090fc <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002832:	4a4b      	ldr	r2, [pc, #300]	@ (8002960 <menu+0x12b4>)
 8002834:	2101      	movs	r1, #1
 8002836:	2002      	movs	r0, #2
 8002838:	f006 fc60 	bl	80090fc <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 800283c:	4b49      	ldr	r3, [pc, #292]	@ (8002964 <menu+0x12b8>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	220a      	movs	r2, #10
 8002842:	4949      	ldr	r1, [pc, #292]	@ (8002968 <menu+0x12bc>)
 8002844:	4618      	mov	r0, r3
 8002846:	f00b f80b 	bl	800d860 <itoa>
		lcd_print(2,16,snum);
 800284a:	4a47      	ldr	r2, [pc, #284]	@ (8002968 <menu+0x12bc>)
 800284c:	2110      	movs	r1, #16
 800284e:	2002      	movs	r0, #2
 8002850:	f006 fc54 	bl	80090fc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002854:	2102      	movs	r1, #2
 8002856:	483c      	ldr	r0, [pc, #240]	@ (8002948 <menu+0x129c>)
 8002858:	f007 ff7a 	bl	800a750 <HAL_GPIO_ReadPin>
 800285c:	4603      	mov	r3, r0
 800285e:	2b01      	cmp	r3, #1
 8002860:	d119      	bne.n	8002896 <menu+0x11ea>
 8002862:	4b3a      	ldr	r3, [pc, #232]	@ (800294c <menu+0x12a0>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	f083 0301 	eor.w	r3, r3, #1
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	d012      	beq.n	8002896 <menu+0x11ea>
 8002870:	4b33      	ldr	r3, [pc, #204]	@ (8002940 <menu+0x1294>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10e      	bne.n	8002896 <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 8002878:	4b3a      	ldr	r3, [pc, #232]	@ (8002964 <menu+0x12b8>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	3301      	adds	r3, #1
 800287e:	b2da      	uxtb	r2, r3
 8002880:	4b38      	ldr	r3, [pc, #224]	@ (8002964 <menu+0x12b8>)
 8002882:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002884:	4b37      	ldr	r3, [pc, #220]	@ (8002964 <menu+0x12b8>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b05      	cmp	r3, #5
 800288a:	d902      	bls.n	8002892 <menu+0x11e6>
				kapi2AcSure = 0;
 800288c:	4b35      	ldr	r3, [pc, #212]	@ (8002964 <menu+0x12b8>)
 800288e:	2200      	movs	r2, #0
 8002890:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002892:	f001 fc51 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002896:	2104      	movs	r1, #4
 8002898:	482b      	ldr	r0, [pc, #172]	@ (8002948 <menu+0x129c>)
 800289a:	f007 ff59 	bl	800a750 <HAL_GPIO_ReadPin>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d119      	bne.n	80028d8 <menu+0x122c>
 80028a4:	4b29      	ldr	r3, [pc, #164]	@ (800294c <menu+0x12a0>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	f083 0301 	eor.w	r3, r3, #1
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d012      	beq.n	80028d8 <menu+0x122c>
 80028b2:	4b23      	ldr	r3, [pc, #140]	@ (8002940 <menu+0x1294>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10e      	bne.n	80028d8 <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 80028ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002964 <menu+0x12b8>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	3b01      	subs	r3, #1
 80028c0:	b2da      	uxtb	r2, r3
 80028c2:	4b28      	ldr	r3, [pc, #160]	@ (8002964 <menu+0x12b8>)
 80028c4:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 80028c6:	4b27      	ldr	r3, [pc, #156]	@ (8002964 <menu+0x12b8>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b06      	cmp	r3, #6
 80028cc:	d902      	bls.n	80028d4 <menu+0x1228>
		   		kapi2AcSure = 5;
 80028ce:	4b25      	ldr	r3, [pc, #148]	@ (8002964 <menu+0x12b8>)
 80028d0:	2205      	movs	r2, #5
 80028d2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028d4:	f001 fc30 	bl	8004138 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028d8:	2108      	movs	r1, #8
 80028da:	481b      	ldr	r0, [pc, #108]	@ (8002948 <menu+0x129c>)
 80028dc:	f007 ff38 	bl	800a750 <HAL_GPIO_ReadPin>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d10d      	bne.n	8002902 <menu+0x1256>
 80028e6:	4b19      	ldr	r3, [pc, #100]	@ (800294c <menu+0x12a0>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	f083 0301 	eor.w	r3, r3, #1
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d006      	beq.n	8002902 <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 80028f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002964 <menu+0x12b8>)
 80028f6:	781a      	ldrb	r2, [r3, #0]
 80028f8:	4b15      	ldr	r3, [pc, #84]	@ (8002950 <menu+0x12a4>)
 80028fa:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80028fc:	4b15      	ldr	r3, [pc, #84]	@ (8002954 <menu+0x12a8>)
 80028fe:	2201      	movs	r2, #1
 8002900:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002902:	4b15      	ldr	r3, [pc, #84]	@ (8002958 <menu+0x12ac>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b0d      	cmp	r3, #13
 8002908:	f040 8090 	bne.w	8002a2c <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 800290c:	4a17      	ldr	r2, [pc, #92]	@ (800296c <menu+0x12c0>)
 800290e:	2101      	movs	r1, #1
 8002910:	2001      	movs	r0, #1
 8002912:	f006 fbf3 	bl	80090fc <lcd_print>

		if(kapitablaTip == 0) {
 8002916:	4b16      	ldr	r3, [pc, #88]	@ (8002970 <menu+0x12c4>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d105      	bne.n	800292a <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 800291e:	4a15      	ldr	r2, [pc, #84]	@ (8002974 <menu+0x12c8>)
 8002920:	2101      	movs	r1, #1
 8002922:	2002      	movs	r0, #2
 8002924:	f006 fbea 	bl	80090fc <lcd_print>
 8002928:	e031      	b.n	800298e <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 800292a:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <menu+0x12c4>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d124      	bne.n	800297c <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 8002932:	4a11      	ldr	r2, [pc, #68]	@ (8002978 <menu+0x12cc>)
 8002934:	2101      	movs	r1, #1
 8002936:	2002      	movs	r0, #2
 8002938:	f006 fbe0 	bl	80090fc <lcd_print>
 800293c:	e027      	b.n	800298e <menu+0x12e2>
 800293e:	bf00      	nop
 8002940:	200010c6 	.word	0x200010c6
 8002944:	20000114 	.word	0x20000114
 8002948:	40010800 	.word	0x40010800
 800294c:	200010eb 	.word	0x200010eb
 8002950:	20000fec 	.word	0x20000fec
 8002954:	200010e8 	.word	0x200010e8
 8002958:	200010bc 	.word	0x200010bc
 800295c:	200014f0 	.word	0x200014f0
 8002960:	200014c8 	.word	0x200014c8
 8002964:	200010d6 	.word	0x200010d6
 8002968:	2000105c 	.word	0x2000105c
 800296c:	20001504 	.word	0x20001504
 8002970:	200010c7 	.word	0x200010c7
 8002974:	20000100 	.word	0x20000100
 8002978:	200014a0 	.word	0x200014a0
		} else if(kapitablaTip == 2) {
 800297c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a7c <menu+0x13d0>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	2b02      	cmp	r3, #2
 8002982:	d104      	bne.n	800298e <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 8002984:	4a3e      	ldr	r2, [pc, #248]	@ (8002a80 <menu+0x13d4>)
 8002986:	2101      	movs	r1, #1
 8002988:	2002      	movs	r0, #2
 800298a:	f006 fbb7 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800298e:	2102      	movs	r1, #2
 8002990:	483c      	ldr	r0, [pc, #240]	@ (8002a84 <menu+0x13d8>)
 8002992:	f007 fedd 	bl	800a750 <HAL_GPIO_ReadPin>
 8002996:	4603      	mov	r3, r0
 8002998:	2b01      	cmp	r3, #1
 800299a:	d115      	bne.n	80029c8 <menu+0x131c>
 800299c:	4b3a      	ldr	r3, [pc, #232]	@ (8002a88 <menu+0x13dc>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	f083 0301 	eor.w	r3, r3, #1
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00e      	beq.n	80029c8 <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 80029aa:	4b34      	ldr	r3, [pc, #208]	@ (8002a7c <menu+0x13d0>)
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	3301      	adds	r3, #1
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	4b32      	ldr	r3, [pc, #200]	@ (8002a7c <menu+0x13d0>)
 80029b4:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 80029b6:	4b31      	ldr	r3, [pc, #196]	@ (8002a7c <menu+0x13d0>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d902      	bls.n	80029c4 <menu+0x1318>
				kapitablaTip = 0;
 80029be:	4b2f      	ldr	r3, [pc, #188]	@ (8002a7c <menu+0x13d0>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029c4:	f001 fbb8 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029c8:	2104      	movs	r1, #4
 80029ca:	482e      	ldr	r0, [pc, #184]	@ (8002a84 <menu+0x13d8>)
 80029cc:	f007 fec0 	bl	800a750 <HAL_GPIO_ReadPin>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d115      	bne.n	8002a02 <menu+0x1356>
 80029d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002a88 <menu+0x13dc>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	f083 0301 	eor.w	r3, r3, #1
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00e      	beq.n	8002a02 <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 80029e4:	4b25      	ldr	r3, [pc, #148]	@ (8002a7c <menu+0x13d0>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	4b23      	ldr	r3, [pc, #140]	@ (8002a7c <menu+0x13d0>)
 80029ee:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 80029f0:	4b22      	ldr	r3, [pc, #136]	@ (8002a7c <menu+0x13d0>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d902      	bls.n	80029fe <menu+0x1352>
		   		kapitablaTip = 2;
 80029f8:	4b20      	ldr	r3, [pc, #128]	@ (8002a7c <menu+0x13d0>)
 80029fa:	2202      	movs	r2, #2
 80029fc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029fe:	f001 fb9b 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a02:	2108      	movs	r1, #8
 8002a04:	481f      	ldr	r0, [pc, #124]	@ (8002a84 <menu+0x13d8>)
 8002a06:	f007 fea3 	bl	800a750 <HAL_GPIO_ReadPin>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d10d      	bne.n	8002a2c <menu+0x1380>
 8002a10:	4b1d      	ldr	r3, [pc, #116]	@ (8002a88 <menu+0x13dc>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	f083 0301 	eor.w	r3, r3, #1
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d006      	beq.n	8002a2c <menu+0x1380>
			eepromData[12] = kapitablaTip;
 8002a1e:	4b17      	ldr	r3, [pc, #92]	@ (8002a7c <menu+0x13d0>)
 8002a20:	781a      	ldrb	r2, [r3, #0]
 8002a22:	4b1a      	ldr	r3, [pc, #104]	@ (8002a8c <menu+0x13e0>)
 8002a24:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002a26:	4b1a      	ldr	r3, [pc, #104]	@ (8002a90 <menu+0x13e4>)
 8002a28:	2201      	movs	r2, #1
 8002a2a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002a2c:	4b19      	ldr	r3, [pc, #100]	@ (8002a94 <menu+0x13e8>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b0e      	cmp	r3, #14
 8002a32:	f040 80a3 	bne.w	8002b7c <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 8002a36:	4a18      	ldr	r2, [pc, #96]	@ (8002a98 <menu+0x13ec>)
 8002a38:	2101      	movs	r1, #1
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f006 fb5e 	bl	80090fc <lcd_print>

		if(kapiTablaAcKonum == 0) {
 8002a40:	4b16      	ldr	r3, [pc, #88]	@ (8002a9c <menu+0x13f0>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 8002a48:	4a15      	ldr	r2, [pc, #84]	@ (8002aa0 <menu+0x13f4>)
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	2002      	movs	r0, #2
 8002a4e:	f006 fb55 	bl	80090fc <lcd_print>
 8002a52:	e034      	b.n	8002abe <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 8002a54:	4b11      	ldr	r3, [pc, #68]	@ (8002a9c <menu+0x13f0>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d105      	bne.n	8002a68 <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 8002a5c:	4a11      	ldr	r2, [pc, #68]	@ (8002aa4 <menu+0x13f8>)
 8002a5e:	2101      	movs	r1, #1
 8002a60:	2002      	movs	r0, #2
 8002a62:	f006 fb4b 	bl	80090fc <lcd_print>
 8002a66:	e02a      	b.n	8002abe <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 8002a68:	4b0c      	ldr	r3, [pc, #48]	@ (8002a9c <menu+0x13f0>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d11d      	bne.n	8002aac <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 8002a70:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa8 <menu+0x13fc>)
 8002a72:	2101      	movs	r1, #1
 8002a74:	2002      	movs	r0, #2
 8002a76:	f006 fb41 	bl	80090fc <lcd_print>
 8002a7a:	e020      	b.n	8002abe <menu+0x1412>
 8002a7c:	200010c7 	.word	0x200010c7
 8002a80:	20000114 	.word	0x20000114
 8002a84:	40010800 	.word	0x40010800
 8002a88:	200010eb 	.word	0x200010eb
 8002a8c:	20000fec 	.word	0x20000fec
 8002a90:	200010e8 	.word	0x200010e8
 8002a94:	200010bc 	.word	0x200010bc
 8002a98:	20001518 	.word	0x20001518
 8002a9c:	200010c9 	.word	0x200010c9
 8002aa0:	2000152c 	.word	0x2000152c
 8002aa4:	20001540 	.word	0x20001540
 8002aa8:	20001554 	.word	0x20001554
		} else if(kapiTablaAcKonum == 3) {
 8002aac:	4b76      	ldr	r3, [pc, #472]	@ (8002c88 <menu+0x15dc>)
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d104      	bne.n	8002abe <menu+0x1412>
			lcd_print(2, 1, pasifText);
 8002ab4:	4a75      	ldr	r2, [pc, #468]	@ (8002c8c <menu+0x15e0>)
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	2002      	movs	r0, #2
 8002aba:	f006 fb1f 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002abe:	2102      	movs	r1, #2
 8002ac0:	4873      	ldr	r0, [pc, #460]	@ (8002c90 <menu+0x15e4>)
 8002ac2:	f007 fe45 	bl	800a750 <HAL_GPIO_ReadPin>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d115      	bne.n	8002af8 <menu+0x144c>
 8002acc:	4b71      	ldr	r3, [pc, #452]	@ (8002c94 <menu+0x15e8>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	f083 0301 	eor.w	r3, r3, #1
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00e      	beq.n	8002af8 <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002ada:	4b6b      	ldr	r3, [pc, #428]	@ (8002c88 <menu+0x15dc>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4b69      	ldr	r3, [pc, #420]	@ (8002c88 <menu+0x15dc>)
 8002ae4:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002ae6:	4b68      	ldr	r3, [pc, #416]	@ (8002c88 <menu+0x15dc>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d902      	bls.n	8002af4 <menu+0x1448>
				kapiTablaAcKonum = 0;
 8002aee:	4b66      	ldr	r3, [pc, #408]	@ (8002c88 <menu+0x15dc>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002af4:	f001 fb20 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002af8:	2104      	movs	r1, #4
 8002afa:	4865      	ldr	r0, [pc, #404]	@ (8002c90 <menu+0x15e4>)
 8002afc:	f007 fe28 	bl	800a750 <HAL_GPIO_ReadPin>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d115      	bne.n	8002b32 <menu+0x1486>
 8002b06:	4b63      	ldr	r3, [pc, #396]	@ (8002c94 <menu+0x15e8>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	f083 0301 	eor.w	r3, r3, #1
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00e      	beq.n	8002b32 <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002b14:	4b5c      	ldr	r3, [pc, #368]	@ (8002c88 <menu+0x15dc>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	4b5a      	ldr	r3, [pc, #360]	@ (8002c88 <menu+0x15dc>)
 8002b1e:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002b20:	4b59      	ldr	r3, [pc, #356]	@ (8002c88 <menu+0x15dc>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b03      	cmp	r3, #3
 8002b26:	d902      	bls.n	8002b2e <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 8002b28:	4b57      	ldr	r3, [pc, #348]	@ (8002c88 <menu+0x15dc>)
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b2e:	f001 fb03 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b32:	2108      	movs	r1, #8
 8002b34:	4856      	ldr	r0, [pc, #344]	@ (8002c90 <menu+0x15e4>)
 8002b36:	f007 fe0b 	bl	800a750 <HAL_GPIO_ReadPin>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d11d      	bne.n	8002b7c <menu+0x14d0>
 8002b40:	4b54      	ldr	r3, [pc, #336]	@ (8002c94 <menu+0x15e8>)
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	f083 0301 	eor.w	r3, r3, #1
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d016      	beq.n	8002b7c <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 8002b4e:	4b4e      	ldr	r3, [pc, #312]	@ (8002c88 <menu+0x15dc>)
 8002b50:	781a      	ldrb	r2, [r3, #0]
 8002b52:	4b51      	ldr	r3, [pc, #324]	@ (8002c98 <menu+0x15ec>)
 8002b54:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002b58:	4b4b      	ldr	r3, [pc, #300]	@ (8002c88 <menu+0x15dc>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <menu+0x14bc>
 8002b60:	4b49      	ldr	r3, [pc, #292]	@ (8002c88 <menu+0x15dc>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d106      	bne.n	8002b76 <menu+0x14ca>
				altLimit = 1;
 8002b68:	4b4c      	ldr	r3, [pc, #304]	@ (8002c9c <menu+0x15f0>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002b6e:	4b4b      	ldr	r3, [pc, #300]	@ (8002c9c <menu+0x15f0>)
 8002b70:	781a      	ldrb	r2, [r3, #0]
 8002b72:	4b49      	ldr	r3, [pc, #292]	@ (8002c98 <menu+0x15ec>)
 8002b74:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002b76:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca0 <menu+0x15f4>)
 8002b78:	2201      	movs	r2, #1
 8002b7a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002b7c:	4b49      	ldr	r3, [pc, #292]	@ (8002ca4 <menu+0x15f8>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b0f      	cmp	r3, #15
 8002b82:	d16c      	bne.n	8002c5e <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 8002b84:	4a48      	ldr	r2, [pc, #288]	@ (8002ca8 <menu+0x15fc>)
 8002b86:	2101      	movs	r1, #1
 8002b88:	2001      	movs	r0, #1
 8002b8a:	f006 fab7 	bl	80090fc <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002b8e:	4a47      	ldr	r2, [pc, #284]	@ (8002cac <menu+0x1600>)
 8002b90:	2101      	movs	r1, #1
 8002b92:	2002      	movs	r0, #2
 8002b94:	f006 fab2 	bl	80090fc <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002b98:	4b45      	ldr	r3, [pc, #276]	@ (8002cb0 <menu+0x1604>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	220a      	movs	r2, #10
 8002b9e:	4945      	ldr	r1, [pc, #276]	@ (8002cb4 <menu+0x1608>)
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f00a fe5d 	bl	800d860 <itoa>
		lcd_print(2,16,snum);
 8002ba6:	4a43      	ldr	r2, [pc, #268]	@ (8002cb4 <menu+0x1608>)
 8002ba8:	2110      	movs	r1, #16
 8002baa:	2002      	movs	r0, #2
 8002bac:	f006 faa6 	bl	80090fc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002bb0:	2102      	movs	r1, #2
 8002bb2:	4837      	ldr	r0, [pc, #220]	@ (8002c90 <menu+0x15e4>)
 8002bb4:	f007 fdcc 	bl	800a750 <HAL_GPIO_ReadPin>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d119      	bne.n	8002bf2 <menu+0x1546>
 8002bbe:	4b35      	ldr	r3, [pc, #212]	@ (8002c94 <menu+0x15e8>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	f083 0301 	eor.w	r3, r3, #1
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d012      	beq.n	8002bf2 <menu+0x1546>
 8002bcc:	4b3a      	ldr	r3, [pc, #232]	@ (8002cb8 <menu+0x160c>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10e      	bne.n	8002bf2 <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002bd4:	4b36      	ldr	r3, [pc, #216]	@ (8002cb0 <menu+0x1604>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	4b34      	ldr	r3, [pc, #208]	@ (8002cb0 <menu+0x1604>)
 8002bde:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002be0:	4b33      	ldr	r3, [pc, #204]	@ (8002cb0 <menu+0x1604>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b05      	cmp	r3, #5
 8002be6:	d902      	bls.n	8002bee <menu+0x1542>
				kapiTablaAcSure = 0;
 8002be8:	4b31      	ldr	r3, [pc, #196]	@ (8002cb0 <menu+0x1604>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bee:	f001 faa3 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002bf2:	2104      	movs	r1, #4
 8002bf4:	4826      	ldr	r0, [pc, #152]	@ (8002c90 <menu+0x15e4>)
 8002bf6:	f007 fdab 	bl	800a750 <HAL_GPIO_ReadPin>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d119      	bne.n	8002c34 <menu+0x1588>
 8002c00:	4b24      	ldr	r3, [pc, #144]	@ (8002c94 <menu+0x15e8>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	f083 0301 	eor.w	r3, r3, #1
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d012      	beq.n	8002c34 <menu+0x1588>
 8002c0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002cb8 <menu+0x160c>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10e      	bne.n	8002c34 <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002c16:	4b26      	ldr	r3, [pc, #152]	@ (8002cb0 <menu+0x1604>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	4b24      	ldr	r3, [pc, #144]	@ (8002cb0 <menu+0x1604>)
 8002c20:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002c22:	4b23      	ldr	r3, [pc, #140]	@ (8002cb0 <menu+0x1604>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d902      	bls.n	8002c30 <menu+0x1584>
		   		kapiTablaAcSure = 5;
 8002c2a:	4b21      	ldr	r3, [pc, #132]	@ (8002cb0 <menu+0x1604>)
 8002c2c:	2205      	movs	r2, #5
 8002c2e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002c30:	f001 fa82 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c34:	2108      	movs	r1, #8
 8002c36:	4816      	ldr	r0, [pc, #88]	@ (8002c90 <menu+0x15e4>)
 8002c38:	f007 fd8a 	bl	800a750 <HAL_GPIO_ReadPin>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d10d      	bne.n	8002c5e <menu+0x15b2>
 8002c42:	4b14      	ldr	r3, [pc, #80]	@ (8002c94 <menu+0x15e8>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	f083 0301 	eor.w	r3, r3, #1
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d006      	beq.n	8002c5e <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 8002c50:	4b17      	ldr	r3, [pc, #92]	@ (8002cb0 <menu+0x1604>)
 8002c52:	781a      	ldrb	r2, [r3, #0]
 8002c54:	4b10      	ldr	r3, [pc, #64]	@ (8002c98 <menu+0x15ec>)
 8002c56:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002c58:	4b11      	ldr	r3, [pc, #68]	@ (8002ca0 <menu+0x15f4>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002c5e:	4b11      	ldr	r3, [pc, #68]	@ (8002ca4 <menu+0x15f8>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b10      	cmp	r3, #16
 8002c64:	f040 8086 	bne.w	8002d74 <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002c68:	4a14      	ldr	r2, [pc, #80]	@ (8002cbc <menu+0x1610>)
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	2001      	movs	r0, #1
 8002c6e:	f006 fa45 	bl	80090fc <lcd_print>

		if(yukariYavasLimit == 0) {
 8002c72:	4b13      	ldr	r3, [pc, #76]	@ (8002cc0 <menu+0x1614>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d124      	bne.n	8002cc4 <menu+0x1618>
			lcd_print(2, 1, pasifText);
 8002c7a:	4a04      	ldr	r2, [pc, #16]	@ (8002c8c <menu+0x15e0>)
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	2002      	movs	r0, #2
 8002c80:	f006 fa3c 	bl	80090fc <lcd_print>
 8002c84:	e027      	b.n	8002cd6 <menu+0x162a>
 8002c86:	bf00      	nop
 8002c88:	200010c9 	.word	0x200010c9
 8002c8c:	2000139c 	.word	0x2000139c
 8002c90:	40010800 	.word	0x40010800
 8002c94:	200010eb 	.word	0x200010eb
 8002c98:	20000fec 	.word	0x20000fec
 8002c9c:	200010c2 	.word	0x200010c2
 8002ca0:	200010e8 	.word	0x200010e8
 8002ca4:	200010bc 	.word	0x200010bc
 8002ca8:	20001568 	.word	0x20001568
 8002cac:	200014c8 	.word	0x200014c8
 8002cb0:	200010d7 	.word	0x200010d7
 8002cb4:	2000105c 	.word	0x2000105c
 8002cb8:	200010c7 	.word	0x200010c7
 8002cbc:	2000157c 	.word	0x2000157c
 8002cc0:	200010ca 	.word	0x200010ca
		} else if(yukariYavasLimit == 1) {
 8002cc4:	4b84      	ldr	r3, [pc, #528]	@ (8002ed8 <menu+0x182c>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d104      	bne.n	8002cd6 <menu+0x162a>
			lcd_print(2, 1, aktifText);
 8002ccc:	4a83      	ldr	r2, [pc, #524]	@ (8002edc <menu+0x1830>)
 8002cce:	2101      	movs	r1, #1
 8002cd0:	2002      	movs	r0, #2
 8002cd2:	f006 fa13 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cd6:	2102      	movs	r1, #2
 8002cd8:	4881      	ldr	r0, [pc, #516]	@ (8002ee0 <menu+0x1834>)
 8002cda:	f007 fd39 	bl	800a750 <HAL_GPIO_ReadPin>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d115      	bne.n	8002d10 <menu+0x1664>
 8002ce4:	4b7f      	ldr	r3, [pc, #508]	@ (8002ee4 <menu+0x1838>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	f083 0301 	eor.w	r3, r3, #1
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00e      	beq.n	8002d10 <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002cf2:	4b79      	ldr	r3, [pc, #484]	@ (8002ed8 <menu+0x182c>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	4b77      	ldr	r3, [pc, #476]	@ (8002ed8 <menu+0x182c>)
 8002cfc:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002cfe:	4b76      	ldr	r3, [pc, #472]	@ (8002ed8 <menu+0x182c>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d902      	bls.n	8002d0c <menu+0x1660>
				yukariYavasLimit = 0;
 8002d06:	4b74      	ldr	r3, [pc, #464]	@ (8002ed8 <menu+0x182c>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d0c:	f001 fa14 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d10:	2104      	movs	r1, #4
 8002d12:	4873      	ldr	r0, [pc, #460]	@ (8002ee0 <menu+0x1834>)
 8002d14:	f007 fd1c 	bl	800a750 <HAL_GPIO_ReadPin>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d115      	bne.n	8002d4a <menu+0x169e>
 8002d1e:	4b71      	ldr	r3, [pc, #452]	@ (8002ee4 <menu+0x1838>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	f083 0301 	eor.w	r3, r3, #1
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00e      	beq.n	8002d4a <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002d2c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ed8 <menu+0x182c>)
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	4b68      	ldr	r3, [pc, #416]	@ (8002ed8 <menu+0x182c>)
 8002d36:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002d38:	4b67      	ldr	r3, [pc, #412]	@ (8002ed8 <menu+0x182c>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d002      	beq.n	8002d46 <menu+0x169a>
		   		yukariYavasLimit = 1;
 8002d40:	4b65      	ldr	r3, [pc, #404]	@ (8002ed8 <menu+0x182c>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d46:	f001 f9f7 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d4a:	2108      	movs	r1, #8
 8002d4c:	4864      	ldr	r0, [pc, #400]	@ (8002ee0 <menu+0x1834>)
 8002d4e:	f007 fcff 	bl	800a750 <HAL_GPIO_ReadPin>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d10d      	bne.n	8002d74 <menu+0x16c8>
 8002d58:	4b62      	ldr	r3, [pc, #392]	@ (8002ee4 <menu+0x1838>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	f083 0301 	eor.w	r3, r3, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d006      	beq.n	8002d74 <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 8002d66:	4b5c      	ldr	r3, [pc, #368]	@ (8002ed8 <menu+0x182c>)
 8002d68:	781a      	ldrb	r2, [r3, #0]
 8002d6a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ee8 <menu+0x183c>)
 8002d6c:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8002eec <menu+0x1840>)
 8002d70:	2201      	movs	r2, #1
 8002d72:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002d74:	4b5e      	ldr	r3, [pc, #376]	@ (8002ef0 <menu+0x1844>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b11      	cmp	r3, #17
 8002d7a:	f040 808b 	bne.w	8002e94 <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 8002d7e:	4a5d      	ldr	r2, [pc, #372]	@ (8002ef4 <menu+0x1848>)
 8002d80:	2101      	movs	r1, #1
 8002d82:	2001      	movs	r0, #1
 8002d84:	f006 f9ba 	bl	80090fc <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002d88:	4b5b      	ldr	r3, [pc, #364]	@ (8002ef8 <menu+0x184c>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d105      	bne.n	8002d9c <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 8002d90:	4a5a      	ldr	r2, [pc, #360]	@ (8002efc <menu+0x1850>)
 8002d92:	2101      	movs	r1, #1
 8002d94:	2002      	movs	r0, #2
 8002d96:	f006 f9b1 	bl	80090fc <lcd_print>
 8002d9a:	e012      	b.n	8002dc2 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 8002d9c:	4b56      	ldr	r3, [pc, #344]	@ (8002ef8 <menu+0x184c>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d105      	bne.n	8002db0 <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 8002da4:	4a56      	ldr	r2, [pc, #344]	@ (8002f00 <menu+0x1854>)
 8002da6:	2101      	movs	r1, #1
 8002da8:	2002      	movs	r0, #2
 8002daa:	f006 f9a7 	bl	80090fc <lcd_print>
 8002dae:	e008      	b.n	8002dc2 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 8002db0:	4b51      	ldr	r3, [pc, #324]	@ (8002ef8 <menu+0x184c>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d104      	bne.n	8002dc2 <menu+0x1716>
			lcd_print(2, 1, pasifText);
 8002db8:	4a52      	ldr	r2, [pc, #328]	@ (8002f04 <menu+0x1858>)
 8002dba:	2101      	movs	r1, #1
 8002dbc:	2002      	movs	r0, #2
 8002dbe:	f006 f99d 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dc2:	2102      	movs	r1, #2
 8002dc4:	4846      	ldr	r0, [pc, #280]	@ (8002ee0 <menu+0x1834>)
 8002dc6:	f007 fcc3 	bl	800a750 <HAL_GPIO_ReadPin>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d115      	bne.n	8002dfc <menu+0x1750>
 8002dd0:	4b44      	ldr	r3, [pc, #272]	@ (8002ee4 <menu+0x1838>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	f083 0301 	eor.w	r3, r3, #1
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00e      	beq.n	8002dfc <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002dde:	4b46      	ldr	r3, [pc, #280]	@ (8002ef8 <menu+0x184c>)
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	3301      	adds	r3, #1
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	4b44      	ldr	r3, [pc, #272]	@ (8002ef8 <menu+0x184c>)
 8002de8:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002dea:	4b43      	ldr	r3, [pc, #268]	@ (8002ef8 <menu+0x184c>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d902      	bls.n	8002df8 <menu+0x174c>
				devirmeYuruyusSecim = 0;
 8002df2:	4b41      	ldr	r3, [pc, #260]	@ (8002ef8 <menu+0x184c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002df8:	f001 f99e 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dfc:	2104      	movs	r1, #4
 8002dfe:	4838      	ldr	r0, [pc, #224]	@ (8002ee0 <menu+0x1834>)
 8002e00:	f007 fca6 	bl	800a750 <HAL_GPIO_ReadPin>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d115      	bne.n	8002e36 <menu+0x178a>
 8002e0a:	4b36      	ldr	r3, [pc, #216]	@ (8002ee4 <menu+0x1838>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	f083 0301 	eor.w	r3, r3, #1
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00e      	beq.n	8002e36 <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002e18:	4b37      	ldr	r3, [pc, #220]	@ (8002ef8 <menu+0x184c>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	4b35      	ldr	r3, [pc, #212]	@ (8002ef8 <menu+0x184c>)
 8002e22:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002e24:	4b34      	ldr	r3, [pc, #208]	@ (8002ef8 <menu+0x184c>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	d902      	bls.n	8002e32 <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 8002e2c:	4b32      	ldr	r3, [pc, #200]	@ (8002ef8 <menu+0x184c>)
 8002e2e:	2202      	movs	r2, #2
 8002e30:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e32:	f001 f981 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e36:	2108      	movs	r1, #8
 8002e38:	4829      	ldr	r0, [pc, #164]	@ (8002ee0 <menu+0x1834>)
 8002e3a:	f007 fc89 	bl	800a750 <HAL_GPIO_ReadPin>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d127      	bne.n	8002e94 <menu+0x17e8>
 8002e44:	4b27      	ldr	r3, [pc, #156]	@ (8002ee4 <menu+0x1838>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	f083 0301 	eor.w	r3, r3, #1
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d020      	beq.n	8002e94 <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 8002e52:	4b29      	ldr	r3, [pc, #164]	@ (8002ef8 <menu+0x184c>)
 8002e54:	781a      	ldrb	r2, [r3, #0]
 8002e56:	4b24      	ldr	r3, [pc, #144]	@ (8002ee8 <menu+0x183c>)
 8002e58:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002e5a:	4b27      	ldr	r3, [pc, #156]	@ (8002ef8 <menu+0x184c>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d003      	beq.n	8002e6a <menu+0x17be>
 8002e62:	4b25      	ldr	r3, [pc, #148]	@ (8002ef8 <menu+0x184c>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d106      	bne.n	8002e78 <menu+0x17cc>
				calismaSekli = 0;
 8002e6a:	4b27      	ldr	r3, [pc, #156]	@ (8002f08 <menu+0x185c>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002e70:	4b25      	ldr	r3, [pc, #148]	@ (8002f08 <menu+0x185c>)
 8002e72:	781a      	ldrb	r2, [r3, #0]
 8002e74:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee8 <menu+0x183c>)
 8002e76:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002e78:	4b1f      	ldr	r3, [pc, #124]	@ (8002ef8 <menu+0x184c>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d106      	bne.n	8002e8e <menu+0x17e2>
				devirmeSilindirTipi = 1;
 8002e80:	4b22      	ldr	r3, [pc, #136]	@ (8002f0c <menu+0x1860>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002e86:	4b21      	ldr	r3, [pc, #132]	@ (8002f0c <menu+0x1860>)
 8002e88:	781a      	ldrb	r2, [r3, #0]
 8002e8a:	4b17      	ldr	r3, [pc, #92]	@ (8002ee8 <menu+0x183c>)
 8002e8c:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002e8e:	4b17      	ldr	r3, [pc, #92]	@ (8002eec <menu+0x1840>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002e94:	4b16      	ldr	r3, [pc, #88]	@ (8002ef0 <menu+0x1844>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b12      	cmp	r3, #18
 8002e9a:	f040 8097 	bne.w	8002fcc <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 8002e9e:	4b16      	ldr	r3, [pc, #88]	@ (8002ef8 <menu+0x184c>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d105      	bne.n	8002eb2 <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 8002ea6:	4a1a      	ldr	r2, [pc, #104]	@ (8002f10 <menu+0x1864>)
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	2001      	movs	r0, #1
 8002eac:	f006 f926 	bl	80090fc <lcd_print>
 8002eb0:	e008      	b.n	8002ec4 <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 8002eb2:	4b11      	ldr	r3, [pc, #68]	@ (8002ef8 <menu+0x184c>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d104      	bne.n	8002ec4 <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 8002eba:	4a16      	ldr	r2, [pc, #88]	@ (8002f14 <menu+0x1868>)
 8002ebc:	2101      	movs	r1, #1
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	f006 f91c 	bl	80090fc <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002ec4:	4b14      	ldr	r3, [pc, #80]	@ (8002f18 <menu+0x186c>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d127      	bne.n	8002f1c <menu+0x1870>
			lcd_print(2, 1, pasifText);
 8002ecc:	4a0d      	ldr	r2, [pc, #52]	@ (8002f04 <menu+0x1858>)
 8002ece:	2101      	movs	r1, #1
 8002ed0:	2002      	movs	r0, #2
 8002ed2:	f006 f913 	bl	80090fc <lcd_print>
 8002ed6:	e02a      	b.n	8002f2e <menu+0x1882>
 8002ed8:	200010ca 	.word	0x200010ca
 8002edc:	200013b0 	.word	0x200013b0
 8002ee0:	40010800 	.word	0x40010800
 8002ee4:	200010eb 	.word	0x200010eb
 8002ee8:	20000fec 	.word	0x20000fec
 8002eec:	200010e8 	.word	0x200010e8
 8002ef0:	200010bc 	.word	0x200010bc
 8002ef4:	20001590 	.word	0x20001590
 8002ef8:	200010cb 	.word	0x200010cb
 8002efc:	200015a4 	.word	0x200015a4
 8002f00:	200015b8 	.word	0x200015b8
 8002f04:	2000139c 	.word	0x2000139c
 8002f08:	200010bd 	.word	0x200010bd
 8002f0c:	200010ce 	.word	0x200010ce
 8002f10:	200015cc 	.word	0x200015cc
 8002f14:	200015e0 	.word	0x200015e0
 8002f18:	200010cc 	.word	0x200010cc
		} else if(devirmeYukariIleriLimit == 1){
 8002f1c:	4b79      	ldr	r3, [pc, #484]	@ (8003104 <menu+0x1a58>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d104      	bne.n	8002f2e <menu+0x1882>
			lcd_print(2, 1, aktifText);
 8002f24:	4a78      	ldr	r2, [pc, #480]	@ (8003108 <menu+0x1a5c>)
 8002f26:	2101      	movs	r1, #1
 8002f28:	2002      	movs	r0, #2
 8002f2a:	f006 f8e7 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f2e:	2102      	movs	r1, #2
 8002f30:	4876      	ldr	r0, [pc, #472]	@ (800310c <menu+0x1a60>)
 8002f32:	f007 fc0d 	bl	800a750 <HAL_GPIO_ReadPin>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d115      	bne.n	8002f68 <menu+0x18bc>
 8002f3c:	4b74      	ldr	r3, [pc, #464]	@ (8003110 <menu+0x1a64>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	f083 0301 	eor.w	r3, r3, #1
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00e      	beq.n	8002f68 <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002f4a:	4b6e      	ldr	r3, [pc, #440]	@ (8003104 <menu+0x1a58>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	b2da      	uxtb	r2, r3
 8002f52:	4b6c      	ldr	r3, [pc, #432]	@ (8003104 <menu+0x1a58>)
 8002f54:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002f56:	4b6b      	ldr	r3, [pc, #428]	@ (8003104 <menu+0x1a58>)
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d902      	bls.n	8002f64 <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 8002f5e:	4b69      	ldr	r3, [pc, #420]	@ (8003104 <menu+0x1a58>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f64:	f001 f8e8 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f68:	2104      	movs	r1, #4
 8002f6a:	4868      	ldr	r0, [pc, #416]	@ (800310c <menu+0x1a60>)
 8002f6c:	f007 fbf0 	bl	800a750 <HAL_GPIO_ReadPin>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d115      	bne.n	8002fa2 <menu+0x18f6>
 8002f76:	4b66      	ldr	r3, [pc, #408]	@ (8003110 <menu+0x1a64>)
 8002f78:	781b      	ldrb	r3, [r3, #0]
 8002f7a:	f083 0301 	eor.w	r3, r3, #1
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00e      	beq.n	8002fa2 <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002f84:	4b5f      	ldr	r3, [pc, #380]	@ (8003104 <menu+0x1a58>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	4b5d      	ldr	r3, [pc, #372]	@ (8003104 <menu+0x1a58>)
 8002f8e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002f90:	4b5c      	ldr	r3, [pc, #368]	@ (8003104 <menu+0x1a58>)
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 8002f98:	4b5a      	ldr	r3, [pc, #360]	@ (8003104 <menu+0x1a58>)
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f9e:	f001 f8cb 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fa2:	2108      	movs	r1, #8
 8002fa4:	4859      	ldr	r0, [pc, #356]	@ (800310c <menu+0x1a60>)
 8002fa6:	f007 fbd3 	bl	800a750 <HAL_GPIO_ReadPin>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d10d      	bne.n	8002fcc <menu+0x1920>
 8002fb0:	4b57      	ldr	r3, [pc, #348]	@ (8003110 <menu+0x1a64>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	f083 0301 	eor.w	r3, r3, #1
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d006      	beq.n	8002fcc <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 8002fbe:	4b51      	ldr	r3, [pc, #324]	@ (8003104 <menu+0x1a58>)
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	4b54      	ldr	r3, [pc, #336]	@ (8003114 <menu+0x1a68>)
 8002fc4:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002fc6:	4b54      	ldr	r3, [pc, #336]	@ (8003118 <menu+0x1a6c>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002fcc:	4b53      	ldr	r3, [pc, #332]	@ (800311c <menu+0x1a70>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b13      	cmp	r3, #19
 8002fd2:	d174      	bne.n	80030be <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 8002fd4:	4b52      	ldr	r3, [pc, #328]	@ (8003120 <menu+0x1a74>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d105      	bne.n	8002fe8 <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002fdc:	4a51      	ldr	r2, [pc, #324]	@ (8003124 <menu+0x1a78>)
 8002fde:	2101      	movs	r1, #1
 8002fe0:	2001      	movs	r0, #1
 8002fe2:	f006 f88b 	bl	80090fc <lcd_print>
 8002fe6:	e008      	b.n	8002ffa <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 8002fe8:	4b4d      	ldr	r3, [pc, #308]	@ (8003120 <menu+0x1a74>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d104      	bne.n	8002ffa <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002ff0:	4a4d      	ldr	r2, [pc, #308]	@ (8003128 <menu+0x1a7c>)
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	f006 f881 	bl	80090fc <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002ffa:	4b4c      	ldr	r3, [pc, #304]	@ (800312c <menu+0x1a80>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d105      	bne.n	800300e <menu+0x1962>
			lcd_print(2, 1, pasifText);
 8003002:	4a4b      	ldr	r2, [pc, #300]	@ (8003130 <menu+0x1a84>)
 8003004:	2101      	movs	r1, #1
 8003006:	2002      	movs	r0, #2
 8003008:	f006 f878 	bl	80090fc <lcd_print>
 800300c:	e008      	b.n	8003020 <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 800300e:	4b47      	ldr	r3, [pc, #284]	@ (800312c <menu+0x1a80>)
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d104      	bne.n	8003020 <menu+0x1974>
			lcd_print(2, 1, aktifText);
 8003016:	4a3c      	ldr	r2, [pc, #240]	@ (8003108 <menu+0x1a5c>)
 8003018:	2101      	movs	r1, #1
 800301a:	2002      	movs	r0, #2
 800301c:	f006 f86e 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003020:	2102      	movs	r1, #2
 8003022:	483a      	ldr	r0, [pc, #232]	@ (800310c <menu+0x1a60>)
 8003024:	f007 fb94 	bl	800a750 <HAL_GPIO_ReadPin>
 8003028:	4603      	mov	r3, r0
 800302a:	2b01      	cmp	r3, #1
 800302c:	d115      	bne.n	800305a <menu+0x19ae>
 800302e:	4b38      	ldr	r3, [pc, #224]	@ (8003110 <menu+0x1a64>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	f083 0301 	eor.w	r3, r3, #1
 8003036:	b2db      	uxtb	r3, r3
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00e      	beq.n	800305a <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 800303c:	4b3b      	ldr	r3, [pc, #236]	@ (800312c <menu+0x1a80>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	3301      	adds	r3, #1
 8003042:	b2da      	uxtb	r2, r3
 8003044:	4b39      	ldr	r3, [pc, #228]	@ (800312c <menu+0x1a80>)
 8003046:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003048:	4b38      	ldr	r3, [pc, #224]	@ (800312c <menu+0x1a80>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d902      	bls.n	8003056 <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 8003050:	4b36      	ldr	r3, [pc, #216]	@ (800312c <menu+0x1a80>)
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003056:	f001 f86f 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800305a:	2104      	movs	r1, #4
 800305c:	482b      	ldr	r0, [pc, #172]	@ (800310c <menu+0x1a60>)
 800305e:	f007 fb77 	bl	800a750 <HAL_GPIO_ReadPin>
 8003062:	4603      	mov	r3, r0
 8003064:	2b01      	cmp	r3, #1
 8003066:	d115      	bne.n	8003094 <menu+0x19e8>
 8003068:	4b29      	ldr	r3, [pc, #164]	@ (8003110 <menu+0x1a64>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	f083 0301 	eor.w	r3, r3, #1
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00e      	beq.n	8003094 <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003076:	4b2d      	ldr	r3, [pc, #180]	@ (800312c <menu+0x1a80>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	3b01      	subs	r3, #1
 800307c:	b2da      	uxtb	r2, r3
 800307e:	4b2b      	ldr	r3, [pc, #172]	@ (800312c <menu+0x1a80>)
 8003080:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003082:	4b2a      	ldr	r3, [pc, #168]	@ (800312c <menu+0x1a80>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 800308a:	4b28      	ldr	r3, [pc, #160]	@ (800312c <menu+0x1a80>)
 800308c:	2201      	movs	r2, #1
 800308e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003090:	f001 f852 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003094:	2108      	movs	r1, #8
 8003096:	481d      	ldr	r0, [pc, #116]	@ (800310c <menu+0x1a60>)
 8003098:	f007 fb5a 	bl	800a750 <HAL_GPIO_ReadPin>
 800309c:	4603      	mov	r3, r0
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d10d      	bne.n	80030be <menu+0x1a12>
 80030a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003110 <menu+0x1a64>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	f083 0301 	eor.w	r3, r3, #1
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d006      	beq.n	80030be <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 80030b0:	4b1e      	ldr	r3, [pc, #120]	@ (800312c <menu+0x1a80>)
 80030b2:	781a      	ldrb	r2, [r3, #0]
 80030b4:	4b17      	ldr	r3, [pc, #92]	@ (8003114 <menu+0x1a68>)
 80030b6:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80030b8:	4b17      	ldr	r3, [pc, #92]	@ (8003118 <menu+0x1a6c>)
 80030ba:	2201      	movs	r2, #1
 80030bc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80030be:	4b17      	ldr	r3, [pc, #92]	@ (800311c <menu+0x1a70>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b14      	cmp	r3, #20
 80030c4:	f040 809e 	bne.w	8003204 <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 80030c8:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <menu+0x1a74>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d105      	bne.n	80030dc <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 80030d0:	4a18      	ldr	r2, [pc, #96]	@ (8003134 <menu+0x1a88>)
 80030d2:	2101      	movs	r1, #1
 80030d4:	2001      	movs	r0, #1
 80030d6:	f006 f811 	bl	80090fc <lcd_print>
 80030da:	e008      	b.n	80030ee <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 80030dc:	4b10      	ldr	r3, [pc, #64]	@ (8003120 <menu+0x1a74>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d104      	bne.n	80030ee <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 80030e4:	4a14      	ldr	r2, [pc, #80]	@ (8003138 <menu+0x1a8c>)
 80030e6:	2101      	movs	r1, #1
 80030e8:	2001      	movs	r0, #1
 80030ea:	f006 f807 	bl	80090fc <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 80030ee:	4b13      	ldr	r3, [pc, #76]	@ (800313c <menu+0x1a90>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d126      	bne.n	8003144 <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 80030f6:	4a12      	ldr	r2, [pc, #72]	@ (8003140 <menu+0x1a94>)
 80030f8:	2101      	movs	r1, #1
 80030fa:	2002      	movs	r0, #2
 80030fc:	f005 fffe 	bl	80090fc <lcd_print>
 8003100:	e029      	b.n	8003156 <menu+0x1aaa>
 8003102:	bf00      	nop
 8003104:	200010cc 	.word	0x200010cc
 8003108:	200013b0 	.word	0x200013b0
 800310c:	40010800 	.word	0x40010800
 8003110:	200010eb 	.word	0x200010eb
 8003114:	20000fec 	.word	0x20000fec
 8003118:	200010e8 	.word	0x200010e8
 800311c:	200010bc 	.word	0x200010bc
 8003120:	200010cb 	.word	0x200010cb
 8003124:	200015f4 	.word	0x200015f4
 8003128:	20001608 	.word	0x20001608
 800312c:	200010cd 	.word	0x200010cd
 8003130:	2000139c 	.word	0x2000139c
 8003134:	2000161c 	.word	0x2000161c
 8003138:	20001630 	.word	0x20001630
 800313c:	200010ce 	.word	0x200010ce
 8003140:	20001644 	.word	0x20001644
		} else if(devirmeSilindirTipi == 1) {
 8003144:	4b39      	ldr	r3, [pc, #228]	@ (800322c <menu+0x1b80>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d104      	bne.n	8003156 <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 800314c:	4a38      	ldr	r2, [pc, #224]	@ (8003230 <menu+0x1b84>)
 800314e:	2101      	movs	r1, #1
 8003150:	2002      	movs	r0, #2
 8003152:	f005 ffd3 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003156:	2102      	movs	r1, #2
 8003158:	4836      	ldr	r0, [pc, #216]	@ (8003234 <menu+0x1b88>)
 800315a:	f007 faf9 	bl	800a750 <HAL_GPIO_ReadPin>
 800315e:	4603      	mov	r3, r0
 8003160:	2b01      	cmp	r3, #1
 8003162:	d119      	bne.n	8003198 <menu+0x1aec>
 8003164:	4b34      	ldr	r3, [pc, #208]	@ (8003238 <menu+0x1b8c>)
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	f083 0301 	eor.w	r3, r3, #1
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d012      	beq.n	8003198 <menu+0x1aec>
 8003172:	4b32      	ldr	r3, [pc, #200]	@ (800323c <menu+0x1b90>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d10e      	bne.n	8003198 <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800317a:	4b2c      	ldr	r3, [pc, #176]	@ (800322c <menu+0x1b80>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	3301      	adds	r3, #1
 8003180:	b2da      	uxtb	r2, r3
 8003182:	4b2a      	ldr	r3, [pc, #168]	@ (800322c <menu+0x1b80>)
 8003184:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003186:	4b29      	ldr	r3, [pc, #164]	@ (800322c <menu+0x1b80>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d902      	bls.n	8003194 <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 800318e:	4b27      	ldr	r3, [pc, #156]	@ (800322c <menu+0x1b80>)
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003194:	f000 ffd0 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003198:	2104      	movs	r1, #4
 800319a:	4826      	ldr	r0, [pc, #152]	@ (8003234 <menu+0x1b88>)
 800319c:	f007 fad8 	bl	800a750 <HAL_GPIO_ReadPin>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d119      	bne.n	80031da <menu+0x1b2e>
 80031a6:	4b24      	ldr	r3, [pc, #144]	@ (8003238 <menu+0x1b8c>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	f083 0301 	eor.w	r3, r3, #1
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d012      	beq.n	80031da <menu+0x1b2e>
 80031b4:	4b21      	ldr	r3, [pc, #132]	@ (800323c <menu+0x1b90>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	2b02      	cmp	r3, #2
 80031ba:	d10e      	bne.n	80031da <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80031bc:	4b1b      	ldr	r3, [pc, #108]	@ (800322c <menu+0x1b80>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	4b19      	ldr	r3, [pc, #100]	@ (800322c <menu+0x1b80>)
 80031c6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80031c8:	4b18      	ldr	r3, [pc, #96]	@ (800322c <menu+0x1b80>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 80031d0:	4b16      	ldr	r3, [pc, #88]	@ (800322c <menu+0x1b80>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031d6:	f000 ffaf 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031da:	2108      	movs	r1, #8
 80031dc:	4815      	ldr	r0, [pc, #84]	@ (8003234 <menu+0x1b88>)
 80031de:	f007 fab7 	bl	800a750 <HAL_GPIO_ReadPin>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d10d      	bne.n	8003204 <menu+0x1b58>
 80031e8:	4b13      	ldr	r3, [pc, #76]	@ (8003238 <menu+0x1b8c>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	f083 0301 	eor.w	r3, r3, #1
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d006      	beq.n	8003204 <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 80031f6:	4b0d      	ldr	r3, [pc, #52]	@ (800322c <menu+0x1b80>)
 80031f8:	781a      	ldrb	r2, [r3, #0]
 80031fa:	4b11      	ldr	r3, [pc, #68]	@ (8003240 <menu+0x1b94>)
 80031fc:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80031fe:	4b11      	ldr	r3, [pc, #68]	@ (8003244 <menu+0x1b98>)
 8003200:	2201      	movs	r2, #1
 8003202:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003204:	4b10      	ldr	r3, [pc, #64]	@ (8003248 <menu+0x1b9c>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b15      	cmp	r3, #21
 800320a:	f040 8088 	bne.w	800331e <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 800320e:	4a0f      	ldr	r2, [pc, #60]	@ (800324c <menu+0x1ba0>)
 8003210:	2101      	movs	r1, #1
 8003212:	2001      	movs	r0, #1
 8003214:	f005 ff72 	bl	80090fc <lcd_print>

		if(platformSilindirTipi == 0) {
 8003218:	4b0d      	ldr	r3, [pc, #52]	@ (8003250 <menu+0x1ba4>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d11b      	bne.n	8003258 <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 8003220:	4a0c      	ldr	r2, [pc, #48]	@ (8003254 <menu+0x1ba8>)
 8003222:	2101      	movs	r1, #1
 8003224:	2002      	movs	r0, #2
 8003226:	f005 ff69 	bl	80090fc <lcd_print>
 800322a:	e01e      	b.n	800326a <menu+0x1bbe>
 800322c:	200010ce 	.word	0x200010ce
 8003230:	20001658 	.word	0x20001658
 8003234:	40010800 	.word	0x40010800
 8003238:	200010eb 	.word	0x200010eb
 800323c:	200010cb 	.word	0x200010cb
 8003240:	20000fec 	.word	0x20000fec
 8003244:	200010e8 	.word	0x200010e8
 8003248:	200010bc 	.word	0x200010bc
 800324c:	2000166c 	.word	0x2000166c
 8003250:	200010cf 	.word	0x200010cf
 8003254:	20001644 	.word	0x20001644
		} else if(platformSilindirTipi == 1) {
 8003258:	4ba1      	ldr	r3, [pc, #644]	@ (80034e0 <menu+0x1e34>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d104      	bne.n	800326a <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 8003260:	4aa0      	ldr	r2, [pc, #640]	@ (80034e4 <menu+0x1e38>)
 8003262:	2101      	movs	r1, #1
 8003264:	2002      	movs	r0, #2
 8003266:	f005 ff49 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800326a:	2102      	movs	r1, #2
 800326c:	489e      	ldr	r0, [pc, #632]	@ (80034e8 <menu+0x1e3c>)
 800326e:	f007 fa6f 	bl	800a750 <HAL_GPIO_ReadPin>
 8003272:	4603      	mov	r3, r0
 8003274:	2b01      	cmp	r3, #1
 8003276:	d115      	bne.n	80032a4 <menu+0x1bf8>
 8003278:	4b9c      	ldr	r3, [pc, #624]	@ (80034ec <menu+0x1e40>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	f083 0301 	eor.w	r3, r3, #1
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00e      	beq.n	80032a4 <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003286:	4b96      	ldr	r3, [pc, #600]	@ (80034e0 <menu+0x1e34>)
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	3301      	adds	r3, #1
 800328c:	b2da      	uxtb	r2, r3
 800328e:	4b94      	ldr	r3, [pc, #592]	@ (80034e0 <menu+0x1e34>)
 8003290:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003292:	4b93      	ldr	r3, [pc, #588]	@ (80034e0 <menu+0x1e34>)
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	2b01      	cmp	r3, #1
 8003298:	d902      	bls.n	80032a0 <menu+0x1bf4>
				platformSilindirTipi = 0;
 800329a:	4b91      	ldr	r3, [pc, #580]	@ (80034e0 <menu+0x1e34>)
 800329c:	2200      	movs	r2, #0
 800329e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80032a0:	f000 ff4a 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80032a4:	2104      	movs	r1, #4
 80032a6:	4890      	ldr	r0, [pc, #576]	@ (80034e8 <menu+0x1e3c>)
 80032a8:	f007 fa52 	bl	800a750 <HAL_GPIO_ReadPin>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d115      	bne.n	80032de <menu+0x1c32>
 80032b2:	4b8e      	ldr	r3, [pc, #568]	@ (80034ec <menu+0x1e40>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	f083 0301 	eor.w	r3, r3, #1
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00e      	beq.n	80032de <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 80032c0:	4b87      	ldr	r3, [pc, #540]	@ (80034e0 <menu+0x1e34>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	4b85      	ldr	r3, [pc, #532]	@ (80034e0 <menu+0x1e34>)
 80032ca:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80032cc:	4b84      	ldr	r3, [pc, #528]	@ (80034e0 <menu+0x1e34>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d002      	beq.n	80032da <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 80032d4:	4b82      	ldr	r3, [pc, #520]	@ (80034e0 <menu+0x1e34>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032da:	f000 ff2d 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032de:	2108      	movs	r1, #8
 80032e0:	4881      	ldr	r0, [pc, #516]	@ (80034e8 <menu+0x1e3c>)
 80032e2:	f007 fa35 	bl	800a750 <HAL_GPIO_ReadPin>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d118      	bne.n	800331e <menu+0x1c72>
 80032ec:	4b7f      	ldr	r3, [pc, #508]	@ (80034ec <menu+0x1e40>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	f083 0301 	eor.w	r3, r3, #1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d011      	beq.n	800331e <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 80032fa:	4b79      	ldr	r3, [pc, #484]	@ (80034e0 <menu+0x1e34>)
 80032fc:	781a      	ldrb	r2, [r3, #0]
 80032fe:	4b7c      	ldr	r3, [pc, #496]	@ (80034f0 <menu+0x1e44>)
 8003300:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003302:	4b77      	ldr	r3, [pc, #476]	@ (80034e0 <menu+0x1e34>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d106      	bne.n	8003318 <menu+0x1c6c>
				altLimit = 1;
 800330a:	4b7a      	ldr	r3, [pc, #488]	@ (80034f4 <menu+0x1e48>)
 800330c:	2201      	movs	r2, #1
 800330e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003310:	4b78      	ldr	r3, [pc, #480]	@ (80034f4 <menu+0x1e48>)
 8003312:	781a      	ldrb	r2, [r3, #0]
 8003314:	4b76      	ldr	r3, [pc, #472]	@ (80034f0 <menu+0x1e44>)
 8003316:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003318:	4b77      	ldr	r3, [pc, #476]	@ (80034f8 <menu+0x1e4c>)
 800331a:	2201      	movs	r2, #1
 800331c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 800331e:	4b77      	ldr	r3, [pc, #476]	@ (80034fc <menu+0x1e50>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b16      	cmp	r3, #22
 8003324:	d164      	bne.n	80033f0 <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 8003326:	4a76      	ldr	r2, [pc, #472]	@ (8003500 <menu+0x1e54>)
 8003328:	2101      	movs	r1, #1
 800332a:	2001      	movs	r0, #1
 800332c:	f005 fee6 	bl	80090fc <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003330:	4a74      	ldr	r2, [pc, #464]	@ (8003504 <menu+0x1e58>)
 8003332:	2101      	movs	r1, #1
 8003334:	2002      	movs	r0, #2
 8003336:	f005 fee1 	bl	80090fc <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 800333a:	4b73      	ldr	r3, [pc, #460]	@ (8003508 <menu+0x1e5c>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	220a      	movs	r2, #10
 8003340:	4972      	ldr	r1, [pc, #456]	@ (800350c <menu+0x1e60>)
 8003342:	4618      	mov	r0, r3
 8003344:	f00a fa8c 	bl	800d860 <itoa>
		lcd_print(2,16,snum);
 8003348:	4a70      	ldr	r2, [pc, #448]	@ (800350c <menu+0x1e60>)
 800334a:	2110      	movs	r1, #16
 800334c:	2002      	movs	r0, #2
 800334e:	f005 fed5 	bl	80090fc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003352:	2102      	movs	r1, #2
 8003354:	4864      	ldr	r0, [pc, #400]	@ (80034e8 <menu+0x1e3c>)
 8003356:	f007 f9fb 	bl	800a750 <HAL_GPIO_ReadPin>
 800335a:	4603      	mov	r3, r0
 800335c:	2b01      	cmp	r3, #1
 800335e:	d115      	bne.n	800338c <menu+0x1ce0>
 8003360:	4b62      	ldr	r3, [pc, #392]	@ (80034ec <menu+0x1e40>)
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	f083 0301 	eor.w	r3, r3, #1
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00e      	beq.n	800338c <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 800336e:	4b66      	ldr	r3, [pc, #408]	@ (8003508 <menu+0x1e5c>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	3301      	adds	r3, #1
 8003374:	b2da      	uxtb	r2, r3
 8003376:	4b64      	ldr	r3, [pc, #400]	@ (8003508 <menu+0x1e5c>)
 8003378:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 800337a:	4b63      	ldr	r3, [pc, #396]	@ (8003508 <menu+0x1e5c>)
 800337c:	781b      	ldrb	r3, [r3, #0]
 800337e:	2b05      	cmp	r3, #5
 8003380:	d902      	bls.n	8003388 <menu+0x1cdc>
				yukariValfTmr = 0;
 8003382:	4b61      	ldr	r3, [pc, #388]	@ (8003508 <menu+0x1e5c>)
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003388:	f000 fed6 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800338c:	2104      	movs	r1, #4
 800338e:	4856      	ldr	r0, [pc, #344]	@ (80034e8 <menu+0x1e3c>)
 8003390:	f007 f9de 	bl	800a750 <HAL_GPIO_ReadPin>
 8003394:	4603      	mov	r3, r0
 8003396:	2b01      	cmp	r3, #1
 8003398:	d115      	bne.n	80033c6 <menu+0x1d1a>
 800339a:	4b54      	ldr	r3, [pc, #336]	@ (80034ec <menu+0x1e40>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	f083 0301 	eor.w	r3, r3, #1
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00e      	beq.n	80033c6 <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 80033a8:	4b57      	ldr	r3, [pc, #348]	@ (8003508 <menu+0x1e5c>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	4b55      	ldr	r3, [pc, #340]	@ (8003508 <menu+0x1e5c>)
 80033b2:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 80033b4:	4b54      	ldr	r3, [pc, #336]	@ (8003508 <menu+0x1e5c>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b06      	cmp	r3, #6
 80033ba:	d902      	bls.n	80033c2 <menu+0x1d16>
		   		yukariValfTmr = 5;
 80033bc:	4b52      	ldr	r3, [pc, #328]	@ (8003508 <menu+0x1e5c>)
 80033be:	2205      	movs	r2, #5
 80033c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033c2:	f000 feb9 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033c6:	2108      	movs	r1, #8
 80033c8:	4847      	ldr	r0, [pc, #284]	@ (80034e8 <menu+0x1e3c>)
 80033ca:	f007 f9c1 	bl	800a750 <HAL_GPIO_ReadPin>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d10d      	bne.n	80033f0 <menu+0x1d44>
 80033d4:	4b45      	ldr	r3, [pc, #276]	@ (80034ec <menu+0x1e40>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	f083 0301 	eor.w	r3, r3, #1
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d006      	beq.n	80033f0 <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 80033e2:	4b49      	ldr	r3, [pc, #292]	@ (8003508 <menu+0x1e5c>)
 80033e4:	781a      	ldrb	r2, [r3, #0]
 80033e6:	4b42      	ldr	r3, [pc, #264]	@ (80034f0 <menu+0x1e44>)
 80033e8:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 80033ea:	4b43      	ldr	r3, [pc, #268]	@ (80034f8 <menu+0x1e4c>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 80033f0:	4b42      	ldr	r3, [pc, #264]	@ (80034fc <menu+0x1e50>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b17      	cmp	r3, #23
 80033f6:	d164      	bne.n	80034c2 <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 80033f8:	4a45      	ldr	r2, [pc, #276]	@ (8003510 <menu+0x1e64>)
 80033fa:	2101      	movs	r1, #1
 80033fc:	2001      	movs	r0, #1
 80033fe:	f005 fe7d 	bl	80090fc <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003402:	4a40      	ldr	r2, [pc, #256]	@ (8003504 <menu+0x1e58>)
 8003404:	2101      	movs	r1, #1
 8003406:	2002      	movs	r0, #2
 8003408:	f005 fe78 	bl	80090fc <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 800340c:	4b41      	ldr	r3, [pc, #260]	@ (8003514 <menu+0x1e68>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	220a      	movs	r2, #10
 8003412:	493e      	ldr	r1, [pc, #248]	@ (800350c <menu+0x1e60>)
 8003414:	4618      	mov	r0, r3
 8003416:	f00a fa23 	bl	800d860 <itoa>
		lcd_print(2,16,snum);
 800341a:	4a3c      	ldr	r2, [pc, #240]	@ (800350c <menu+0x1e60>)
 800341c:	2110      	movs	r1, #16
 800341e:	2002      	movs	r0, #2
 8003420:	f005 fe6c 	bl	80090fc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003424:	2102      	movs	r1, #2
 8003426:	4830      	ldr	r0, [pc, #192]	@ (80034e8 <menu+0x1e3c>)
 8003428:	f007 f992 	bl	800a750 <HAL_GPIO_ReadPin>
 800342c:	4603      	mov	r3, r0
 800342e:	2b01      	cmp	r3, #1
 8003430:	d115      	bne.n	800345e <menu+0x1db2>
 8003432:	4b2e      	ldr	r3, [pc, #184]	@ (80034ec <menu+0x1e40>)
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	f083 0301 	eor.w	r3, r3, #1
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00e      	beq.n	800345e <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 8003440:	4b34      	ldr	r3, [pc, #208]	@ (8003514 <menu+0x1e68>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	3301      	adds	r3, #1
 8003446:	b2da      	uxtb	r2, r3
 8003448:	4b32      	ldr	r3, [pc, #200]	@ (8003514 <menu+0x1e68>)
 800344a:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 800344c:	4b31      	ldr	r3, [pc, #196]	@ (8003514 <menu+0x1e68>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b05      	cmp	r3, #5
 8003452:	d902      	bls.n	800345a <menu+0x1dae>
				asagiValfTmr = 0;
 8003454:	4b2f      	ldr	r3, [pc, #188]	@ (8003514 <menu+0x1e68>)
 8003456:	2200      	movs	r2, #0
 8003458:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800345a:	f000 fe6d 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800345e:	2104      	movs	r1, #4
 8003460:	4821      	ldr	r0, [pc, #132]	@ (80034e8 <menu+0x1e3c>)
 8003462:	f007 f975 	bl	800a750 <HAL_GPIO_ReadPin>
 8003466:	4603      	mov	r3, r0
 8003468:	2b01      	cmp	r3, #1
 800346a:	d115      	bne.n	8003498 <menu+0x1dec>
 800346c:	4b1f      	ldr	r3, [pc, #124]	@ (80034ec <menu+0x1e40>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	f083 0301 	eor.w	r3, r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00e      	beq.n	8003498 <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 800347a:	4b26      	ldr	r3, [pc, #152]	@ (8003514 <menu+0x1e68>)
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	3b01      	subs	r3, #1
 8003480:	b2da      	uxtb	r2, r3
 8003482:	4b24      	ldr	r3, [pc, #144]	@ (8003514 <menu+0x1e68>)
 8003484:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003486:	4b23      	ldr	r3, [pc, #140]	@ (8003514 <menu+0x1e68>)
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b06      	cmp	r3, #6
 800348c:	d902      	bls.n	8003494 <menu+0x1de8>
		   		asagiValfTmr = 5;
 800348e:	4b21      	ldr	r3, [pc, #132]	@ (8003514 <menu+0x1e68>)
 8003490:	2205      	movs	r2, #5
 8003492:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003494:	f000 fe50 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003498:	2108      	movs	r1, #8
 800349a:	4813      	ldr	r0, [pc, #76]	@ (80034e8 <menu+0x1e3c>)
 800349c:	f007 f958 	bl	800a750 <HAL_GPIO_ReadPin>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d10d      	bne.n	80034c2 <menu+0x1e16>
 80034a6:	4b11      	ldr	r3, [pc, #68]	@ (80034ec <menu+0x1e40>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	f083 0301 	eor.w	r3, r3, #1
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d006      	beq.n	80034c2 <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 80034b4:	4b17      	ldr	r3, [pc, #92]	@ (8003514 <menu+0x1e68>)
 80034b6:	781a      	ldrb	r2, [r3, #0]
 80034b8:	4b0d      	ldr	r3, [pc, #52]	@ (80034f0 <menu+0x1e44>)
 80034ba:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 80034bc:	4b0e      	ldr	r3, [pc, #56]	@ (80034f8 <menu+0x1e4c>)
 80034be:	2201      	movs	r2, #1
 80034c0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 80034c2:	4b0e      	ldr	r3, [pc, #56]	@ (80034fc <menu+0x1e50>)
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b18      	cmp	r3, #24
 80034c8:	f040 8093 	bne.w	80035f2 <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 80034cc:	4b12      	ldr	r3, [pc, #72]	@ (8003518 <menu+0x1e6c>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d125      	bne.n	8003520 <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 80034d4:	4a11      	ldr	r2, [pc, #68]	@ (800351c <menu+0x1e70>)
 80034d6:	2101      	movs	r1, #1
 80034d8:	2001      	movs	r0, #1
 80034da:	f005 fe0f 	bl	80090fc <lcd_print>
 80034de:	e028      	b.n	8003532 <menu+0x1e86>
 80034e0:	200010cf 	.word	0x200010cf
 80034e4:	20001658 	.word	0x20001658
 80034e8:	40010800 	.word	0x40010800
 80034ec:	200010eb 	.word	0x200010eb
 80034f0:	20000fec 	.word	0x20000fec
 80034f4:	200010c2 	.word	0x200010c2
 80034f8:	200010e8 	.word	0x200010e8
 80034fc:	200010bc 	.word	0x200010bc
 8003500:	20001680 	.word	0x20001680
 8003504:	200014c8 	.word	0x200014c8
 8003508:	200010d0 	.word	0x200010d0
 800350c:	2000105c 	.word	0x2000105c
 8003510:	20001694 	.word	0x20001694
 8003514:	200010d1 	.word	0x200010d1
 8003518:	200010cb 	.word	0x200010cb
 800351c:	200016a8 	.word	0x200016a8
		} else if(devirmeYuruyusSecim == 1) {
 8003520:	4b8c      	ldr	r3, [pc, #560]	@ (8003754 <menu+0x20a8>)
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b01      	cmp	r3, #1
 8003526:	d104      	bne.n	8003532 <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 8003528:	4a8b      	ldr	r2, [pc, #556]	@ (8003758 <menu+0x20ac>)
 800352a:	2101      	movs	r1, #1
 800352c:	2001      	movs	r0, #1
 800352e:	f005 fde5 	bl	80090fc <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003532:	4a8a      	ldr	r2, [pc, #552]	@ (800375c <menu+0x20b0>)
 8003534:	2101      	movs	r1, #1
 8003536:	2002      	movs	r0, #2
 8003538:	f005 fde0 	bl	80090fc <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 800353c:	4b88      	ldr	r3, [pc, #544]	@ (8003760 <menu+0x20b4>)
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	220a      	movs	r2, #10
 8003542:	4988      	ldr	r1, [pc, #544]	@ (8003764 <menu+0x20b8>)
 8003544:	4618      	mov	r0, r3
 8003546:	f00a f98b 	bl	800d860 <itoa>
		lcd_print(2, 16, snum);
 800354a:	4a86      	ldr	r2, [pc, #536]	@ (8003764 <menu+0x20b8>)
 800354c:	2110      	movs	r1, #16
 800354e:	2002      	movs	r0, #2
 8003550:	f005 fdd4 	bl	80090fc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003554:	2102      	movs	r1, #2
 8003556:	4884      	ldr	r0, [pc, #528]	@ (8003768 <menu+0x20bc>)
 8003558:	f007 f8fa 	bl	800a750 <HAL_GPIO_ReadPin>
 800355c:	4603      	mov	r3, r0
 800355e:	2b01      	cmp	r3, #1
 8003560:	d115      	bne.n	800358e <menu+0x1ee2>
 8003562:	4b82      	ldr	r3, [pc, #520]	@ (800376c <menu+0x20c0>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	f083 0301 	eor.w	r3, r3, #1
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00e      	beq.n	800358e <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003570:	4b7b      	ldr	r3, [pc, #492]	@ (8003760 <menu+0x20b4>)
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	3301      	adds	r3, #1
 8003576:	b2da      	uxtb	r2, r3
 8003578:	4b79      	ldr	r3, [pc, #484]	@ (8003760 <menu+0x20b4>)
 800357a:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 800357c:	4b78      	ldr	r3, [pc, #480]	@ (8003760 <menu+0x20b4>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	2b05      	cmp	r3, #5
 8003582:	d902      	bls.n	800358a <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 8003584:	4b76      	ldr	r3, [pc, #472]	@ (8003760 <menu+0x20b4>)
 8003586:	2200      	movs	r2, #0
 8003588:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800358a:	f000 fdd5 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800358e:	2104      	movs	r1, #4
 8003590:	4875      	ldr	r0, [pc, #468]	@ (8003768 <menu+0x20bc>)
 8003592:	f007 f8dd 	bl	800a750 <HAL_GPIO_ReadPin>
 8003596:	4603      	mov	r3, r0
 8003598:	2b01      	cmp	r3, #1
 800359a:	d115      	bne.n	80035c8 <menu+0x1f1c>
 800359c:	4b73      	ldr	r3, [pc, #460]	@ (800376c <menu+0x20c0>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	f083 0301 	eor.w	r3, r3, #1
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00e      	beq.n	80035c8 <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 80035aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003760 <menu+0x20b4>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	4b6b      	ldr	r3, [pc, #428]	@ (8003760 <menu+0x20b4>)
 80035b4:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 80035b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003760 <menu+0x20b4>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b06      	cmp	r3, #6
 80035bc:	d902      	bls.n	80035c4 <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 80035be:	4b68      	ldr	r3, [pc, #416]	@ (8003760 <menu+0x20b4>)
 80035c0:	2205      	movs	r2, #5
 80035c2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035c4:	f000 fdb8 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035c8:	2108      	movs	r1, #8
 80035ca:	4867      	ldr	r0, [pc, #412]	@ (8003768 <menu+0x20bc>)
 80035cc:	f007 f8c0 	bl	800a750 <HAL_GPIO_ReadPin>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d10d      	bne.n	80035f2 <menu+0x1f46>
 80035d6:	4b65      	ldr	r3, [pc, #404]	@ (800376c <menu+0x20c0>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	f083 0301 	eor.w	r3, r3, #1
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d006      	beq.n	80035f2 <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 80035e4:	4b5e      	ldr	r3, [pc, #376]	@ (8003760 <menu+0x20b4>)
 80035e6:	781a      	ldrb	r2, [r3, #0]
 80035e8:	4b61      	ldr	r3, [pc, #388]	@ (8003770 <menu+0x20c4>)
 80035ea:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 80035ec:	4b61      	ldr	r3, [pc, #388]	@ (8003774 <menu+0x20c8>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 80035f2:	4b61      	ldr	r3, [pc, #388]	@ (8003778 <menu+0x20cc>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b19      	cmp	r3, #25
 80035f8:	d172      	bne.n	80036e0 <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 80035fa:	4b56      	ldr	r3, [pc, #344]	@ (8003754 <menu+0x20a8>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d105      	bne.n	800360e <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 8003602:	4a5e      	ldr	r2, [pc, #376]	@ (800377c <menu+0x20d0>)
 8003604:	2101      	movs	r1, #1
 8003606:	2001      	movs	r0, #1
 8003608:	f005 fd78 	bl	80090fc <lcd_print>
 800360c:	e008      	b.n	8003620 <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 800360e:	4b51      	ldr	r3, [pc, #324]	@ (8003754 <menu+0x20a8>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d104      	bne.n	8003620 <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 8003616:	4a5a      	ldr	r2, [pc, #360]	@ (8003780 <menu+0x20d4>)
 8003618:	2101      	movs	r1, #1
 800361a:	2001      	movs	r0, #1
 800361c:	f005 fd6e 	bl	80090fc <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003620:	4a4e      	ldr	r2, [pc, #312]	@ (800375c <menu+0x20b0>)
 8003622:	2101      	movs	r1, #1
 8003624:	2002      	movs	r0, #2
 8003626:	f005 fd69 	bl	80090fc <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 800362a:	4b56      	ldr	r3, [pc, #344]	@ (8003784 <menu+0x20d8>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	220a      	movs	r2, #10
 8003630:	494c      	ldr	r1, [pc, #304]	@ (8003764 <menu+0x20b8>)
 8003632:	4618      	mov	r0, r3
 8003634:	f00a f914 	bl	800d860 <itoa>
		lcd_print(2,16,snum);
 8003638:	4a4a      	ldr	r2, [pc, #296]	@ (8003764 <menu+0x20b8>)
 800363a:	2110      	movs	r1, #16
 800363c:	2002      	movs	r0, #2
 800363e:	f005 fd5d 	bl	80090fc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003642:	2102      	movs	r1, #2
 8003644:	4848      	ldr	r0, [pc, #288]	@ (8003768 <menu+0x20bc>)
 8003646:	f007 f883 	bl	800a750 <HAL_GPIO_ReadPin>
 800364a:	4603      	mov	r3, r0
 800364c:	2b01      	cmp	r3, #1
 800364e:	d115      	bne.n	800367c <menu+0x1fd0>
 8003650:	4b46      	ldr	r3, [pc, #280]	@ (800376c <menu+0x20c0>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	f083 0301 	eor.w	r3, r3, #1
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00e      	beq.n	800367c <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 800365e:	4b49      	ldr	r3, [pc, #292]	@ (8003784 <menu+0x20d8>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	3301      	adds	r3, #1
 8003664:	b2da      	uxtb	r2, r3
 8003666:	4b47      	ldr	r3, [pc, #284]	@ (8003784 <menu+0x20d8>)
 8003668:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 800366a:	4b46      	ldr	r3, [pc, #280]	@ (8003784 <menu+0x20d8>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b05      	cmp	r3, #5
 8003670:	d902      	bls.n	8003678 <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 8003672:	4b44      	ldr	r3, [pc, #272]	@ (8003784 <menu+0x20d8>)
 8003674:	2200      	movs	r2, #0
 8003676:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003678:	f000 fd5e 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800367c:	2104      	movs	r1, #4
 800367e:	483a      	ldr	r0, [pc, #232]	@ (8003768 <menu+0x20bc>)
 8003680:	f007 f866 	bl	800a750 <HAL_GPIO_ReadPin>
 8003684:	4603      	mov	r3, r0
 8003686:	2b01      	cmp	r3, #1
 8003688:	d115      	bne.n	80036b6 <menu+0x200a>
 800368a:	4b38      	ldr	r3, [pc, #224]	@ (800376c <menu+0x20c0>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	f083 0301 	eor.w	r3, r3, #1
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00e      	beq.n	80036b6 <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003698:	4b3a      	ldr	r3, [pc, #232]	@ (8003784 <menu+0x20d8>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	3b01      	subs	r3, #1
 800369e:	b2da      	uxtb	r2, r3
 80036a0:	4b38      	ldr	r3, [pc, #224]	@ (8003784 <menu+0x20d8>)
 80036a2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 80036a4:	4b37      	ldr	r3, [pc, #220]	@ (8003784 <menu+0x20d8>)
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b06      	cmp	r3, #6
 80036aa:	d902      	bls.n	80036b2 <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 80036ac:	4b35      	ldr	r3, [pc, #212]	@ (8003784 <menu+0x20d8>)
 80036ae:	2205      	movs	r2, #5
 80036b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036b2:	f000 fd41 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036b6:	2108      	movs	r1, #8
 80036b8:	482b      	ldr	r0, [pc, #172]	@ (8003768 <menu+0x20bc>)
 80036ba:	f007 f849 	bl	800a750 <HAL_GPIO_ReadPin>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d10d      	bne.n	80036e0 <menu+0x2034>
 80036c4:	4b29      	ldr	r3, [pc, #164]	@ (800376c <menu+0x20c0>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	f083 0301 	eor.w	r3, r3, #1
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d006      	beq.n	80036e0 <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 80036d2:	4b2c      	ldr	r3, [pc, #176]	@ (8003784 <menu+0x20d8>)
 80036d4:	781a      	ldrb	r2, [r3, #0]
 80036d6:	4b26      	ldr	r3, [pc, #152]	@ (8003770 <menu+0x20c4>)
 80036d8:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 80036da:	4b26      	ldr	r3, [pc, #152]	@ (8003774 <menu+0x20c8>)
 80036dc:	2201      	movs	r2, #1
 80036de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 80036e0:	4b25      	ldr	r3, [pc, #148]	@ (8003778 <menu+0x20cc>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	2b1a      	cmp	r3, #26
 80036e6:	f040 80b7 	bne.w	8003858 <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 80036ea:	4a27      	ldr	r2, [pc, #156]	@ (8003788 <menu+0x20dc>)
 80036ec:	2101      	movs	r1, #1
 80036ee:	2001      	movs	r0, #1
 80036f0:	f005 fd04 	bl	80090fc <lcd_print>

		if(makineCalismaTmr > 99) {
 80036f4:	4b25      	ldr	r3, [pc, #148]	@ (800378c <menu+0x20e0>)
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b63      	cmp	r3, #99	@ 0x63
 80036fa:	d911      	bls.n	8003720 <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 80036fc:	4a17      	ldr	r2, [pc, #92]	@ (800375c <menu+0x20b0>)
 80036fe:	2101      	movs	r1, #1
 8003700:	2002      	movs	r0, #2
 8003702:	f005 fcfb 	bl	80090fc <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003706:	4b21      	ldr	r3, [pc, #132]	@ (800378c <menu+0x20e0>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	220a      	movs	r2, #10
 800370c:	4915      	ldr	r1, [pc, #84]	@ (8003764 <menu+0x20b8>)
 800370e:	4618      	mov	r0, r3
 8003710:	f00a f8a6 	bl	800d860 <itoa>
			lcd_print(2,14,snum);
 8003714:	4a13      	ldr	r2, [pc, #76]	@ (8003764 <menu+0x20b8>)
 8003716:	210e      	movs	r1, #14
 8003718:	2002      	movs	r0, #2
 800371a:	f005 fcef 	bl	80090fc <lcd_print>
 800371e:	e04c      	b.n	80037ba <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003720:	4b1a      	ldr	r3, [pc, #104]	@ (800378c <menu+0x20e0>)
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b09      	cmp	r3, #9
 8003726:	d933      	bls.n	8003790 <menu+0x20e4>
 8003728:	4b18      	ldr	r3, [pc, #96]	@ (800378c <menu+0x20e0>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b63      	cmp	r3, #99	@ 0x63
 800372e:	d82f      	bhi.n	8003790 <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 8003730:	4a0a      	ldr	r2, [pc, #40]	@ (800375c <menu+0x20b0>)
 8003732:	2101      	movs	r1, #1
 8003734:	2002      	movs	r0, #2
 8003736:	f005 fce1 	bl	80090fc <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800373a:	4b14      	ldr	r3, [pc, #80]	@ (800378c <menu+0x20e0>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	220a      	movs	r2, #10
 8003740:	4908      	ldr	r1, [pc, #32]	@ (8003764 <menu+0x20b8>)
 8003742:	4618      	mov	r0, r3
 8003744:	f00a f88c 	bl	800d860 <itoa>
			lcd_print(2, 15, snum);
 8003748:	4a06      	ldr	r2, [pc, #24]	@ (8003764 <menu+0x20b8>)
 800374a:	210f      	movs	r1, #15
 800374c:	2002      	movs	r0, #2
 800374e:	f005 fcd5 	bl	80090fc <lcd_print>
 8003752:	e032      	b.n	80037ba <menu+0x210e>
 8003754:	200010cb 	.word	0x200010cb
 8003758:	200016bc 	.word	0x200016bc
 800375c:	200014c8 	.word	0x200014c8
 8003760:	200010d2 	.word	0x200010d2
 8003764:	2000105c 	.word	0x2000105c
 8003768:	40010800 	.word	0x40010800
 800376c:	200010eb 	.word	0x200010eb
 8003770:	20000fec 	.word	0x20000fec
 8003774:	200010e8 	.word	0x200010e8
 8003778:	200010bc 	.word	0x200010bc
 800377c:	200016d0 	.word	0x200016d0
 8003780:	200016e4 	.word	0x200016e4
 8003784:	200010d3 	.word	0x200010d3
 8003788:	200016f8 	.word	0x200016f8
 800378c:	200010d4 	.word	0x200010d4
		} else if(makineCalismaTmr <=  9) {
 8003790:	4b72      	ldr	r3, [pc, #456]	@ (800395c <menu+0x22b0>)
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	2b09      	cmp	r3, #9
 8003796:	d810      	bhi.n	80037ba <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 8003798:	4a71      	ldr	r2, [pc, #452]	@ (8003960 <menu+0x22b4>)
 800379a:	2101      	movs	r1, #1
 800379c:	2002      	movs	r0, #2
 800379e:	f005 fcad 	bl	80090fc <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80037a2:	4b6e      	ldr	r3, [pc, #440]	@ (800395c <menu+0x22b0>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	220a      	movs	r2, #10
 80037a8:	496e      	ldr	r1, [pc, #440]	@ (8003964 <menu+0x22b8>)
 80037aa:	4618      	mov	r0, r3
 80037ac:	f00a f858 	bl	800d860 <itoa>
			lcd_print(2, 16, snum);
 80037b0:	4a6c      	ldr	r2, [pc, #432]	@ (8003964 <menu+0x22b8>)
 80037b2:	2110      	movs	r1, #16
 80037b4:	2002      	movs	r0, #2
 80037b6:	f005 fca1 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80037ba:	2102      	movs	r1, #2
 80037bc:	486a      	ldr	r0, [pc, #424]	@ (8003968 <menu+0x22bc>)
 80037be:	f006 ffc7 	bl	800a750 <HAL_GPIO_ReadPin>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d115      	bne.n	80037f4 <menu+0x2148>
 80037c8:	4b68      	ldr	r3, [pc, #416]	@ (800396c <menu+0x22c0>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	f083 0301 	eor.w	r3, r3, #1
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00e      	beq.n	80037f4 <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 80037d6:	4b61      	ldr	r3, [pc, #388]	@ (800395c <menu+0x22b0>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	3301      	adds	r3, #1
 80037dc:	b2da      	uxtb	r2, r3
 80037de:	4b5f      	ldr	r3, [pc, #380]	@ (800395c <menu+0x22b0>)
 80037e0:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80037e2:	4b5e      	ldr	r3, [pc, #376]	@ (800395c <menu+0x22b0>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2bb4      	cmp	r3, #180	@ 0xb4
 80037e8:	d902      	bls.n	80037f0 <menu+0x2144>
				makineCalismaTmr = 0;
 80037ea:	4b5c      	ldr	r3, [pc, #368]	@ (800395c <menu+0x22b0>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037f0:	f000 fca2 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037f4:	2104      	movs	r1, #4
 80037f6:	485c      	ldr	r0, [pc, #368]	@ (8003968 <menu+0x22bc>)
 80037f8:	f006 ffaa 	bl	800a750 <HAL_GPIO_ReadPin>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d115      	bne.n	800382e <menu+0x2182>
 8003802:	4b5a      	ldr	r3, [pc, #360]	@ (800396c <menu+0x22c0>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	f083 0301 	eor.w	r3, r3, #1
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00e      	beq.n	800382e <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003810:	4b52      	ldr	r3, [pc, #328]	@ (800395c <menu+0x22b0>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	3b01      	subs	r3, #1
 8003816:	b2da      	uxtb	r2, r3
 8003818:	4b50      	ldr	r3, [pc, #320]	@ (800395c <menu+0x22b0>)
 800381a:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 800381c:	4b4f      	ldr	r3, [pc, #316]	@ (800395c <menu+0x22b0>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2bb5      	cmp	r3, #181	@ 0xb5
 8003822:	d902      	bls.n	800382a <menu+0x217e>
		   		makineCalismaTmr = 180;
 8003824:	4b4d      	ldr	r3, [pc, #308]	@ (800395c <menu+0x22b0>)
 8003826:	22b4      	movs	r2, #180	@ 0xb4
 8003828:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800382a:	f000 fc85 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800382e:	2108      	movs	r1, #8
 8003830:	484d      	ldr	r0, [pc, #308]	@ (8003968 <menu+0x22bc>)
 8003832:	f006 ff8d 	bl	800a750 <HAL_GPIO_ReadPin>
 8003836:	4603      	mov	r3, r0
 8003838:	2b01      	cmp	r3, #1
 800383a:	d10d      	bne.n	8003858 <menu+0x21ac>
 800383c:	4b4b      	ldr	r3, [pc, #300]	@ (800396c <menu+0x22c0>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	f083 0301 	eor.w	r3, r3, #1
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d006      	beq.n	8003858 <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 800384a:	4b44      	ldr	r3, [pc, #272]	@ (800395c <menu+0x22b0>)
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	4b48      	ldr	r3, [pc, #288]	@ (8003970 <menu+0x22c4>)
 8003850:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003852:	4b48      	ldr	r3, [pc, #288]	@ (8003974 <menu+0x22c8>)
 8003854:	2201      	movs	r2, #1
 8003856:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003858:	4b47      	ldr	r3, [pc, #284]	@ (8003978 <menu+0x22cc>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b1b      	cmp	r3, #27
 800385e:	d166      	bne.n	800392e <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 8003860:	4a46      	ldr	r2, [pc, #280]	@ (800397c <menu+0x22d0>)
 8003862:	2101      	movs	r1, #1
 8003864:	2001      	movs	r0, #1
 8003866:	f005 fc49 	bl	80090fc <lcd_print>

		if(buzzer == 0) {
 800386a:	4b45      	ldr	r3, [pc, #276]	@ (8003980 <menu+0x22d4>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d105      	bne.n	800387e <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 8003872:	4a44      	ldr	r2, [pc, #272]	@ (8003984 <menu+0x22d8>)
 8003874:	2101      	movs	r1, #1
 8003876:	2002      	movs	r0, #2
 8003878:	f005 fc40 	bl	80090fc <lcd_print>
 800387c:	e008      	b.n	8003890 <menu+0x21e4>
		} else if(buzzer == 1) {
 800387e:	4b40      	ldr	r3, [pc, #256]	@ (8003980 <menu+0x22d4>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d104      	bne.n	8003890 <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 8003886:	4a40      	ldr	r2, [pc, #256]	@ (8003988 <menu+0x22dc>)
 8003888:	2101      	movs	r1, #1
 800388a:	2002      	movs	r0, #2
 800388c:	f005 fc36 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003890:	2102      	movs	r1, #2
 8003892:	4835      	ldr	r0, [pc, #212]	@ (8003968 <menu+0x22bc>)
 8003894:	f006 ff5c 	bl	800a750 <HAL_GPIO_ReadPin>
 8003898:	4603      	mov	r3, r0
 800389a:	2b01      	cmp	r3, #1
 800389c:	d115      	bne.n	80038ca <menu+0x221e>
 800389e:	4b33      	ldr	r3, [pc, #204]	@ (800396c <menu+0x22c0>)
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	f083 0301 	eor.w	r3, r3, #1
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00e      	beq.n	80038ca <menu+0x221e>
			buzzer = buzzer + 1;
 80038ac:	4b34      	ldr	r3, [pc, #208]	@ (8003980 <menu+0x22d4>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	3301      	adds	r3, #1
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	4b32      	ldr	r3, [pc, #200]	@ (8003980 <menu+0x22d4>)
 80038b6:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80038b8:	4b31      	ldr	r3, [pc, #196]	@ (8003980 <menu+0x22d4>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d902      	bls.n	80038c6 <menu+0x221a>
				buzzer = 0;
 80038c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003980 <menu+0x22d4>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038c6:	f000 fc37 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038ca:	2104      	movs	r1, #4
 80038cc:	4826      	ldr	r0, [pc, #152]	@ (8003968 <menu+0x22bc>)
 80038ce:	f006 ff3f 	bl	800a750 <HAL_GPIO_ReadPin>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d115      	bne.n	8003904 <menu+0x2258>
 80038d8:	4b24      	ldr	r3, [pc, #144]	@ (800396c <menu+0x22c0>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	f083 0301 	eor.w	r3, r3, #1
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d00e      	beq.n	8003904 <menu+0x2258>
			buzzer = buzzer - 1;
 80038e6:	4b26      	ldr	r3, [pc, #152]	@ (8003980 <menu+0x22d4>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	4b24      	ldr	r3, [pc, #144]	@ (8003980 <menu+0x22d4>)
 80038f0:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80038f2:	4b23      	ldr	r3, [pc, #140]	@ (8003980 <menu+0x22d4>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <menu+0x2254>
		   		buzzer = 1;
 80038fa:	4b21      	ldr	r3, [pc, #132]	@ (8003980 <menu+0x22d4>)
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003900:	f000 fc1a 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003904:	2108      	movs	r1, #8
 8003906:	4818      	ldr	r0, [pc, #96]	@ (8003968 <menu+0x22bc>)
 8003908:	f006 ff22 	bl	800a750 <HAL_GPIO_ReadPin>
 800390c:	4603      	mov	r3, r0
 800390e:	2b01      	cmp	r3, #1
 8003910:	d10d      	bne.n	800392e <menu+0x2282>
 8003912:	4b16      	ldr	r3, [pc, #88]	@ (800396c <menu+0x22c0>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	f083 0301 	eor.w	r3, r3, #1
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d006      	beq.n	800392e <menu+0x2282>
			eepromData[25] = buzzer;
 8003920:	4b17      	ldr	r3, [pc, #92]	@ (8003980 <menu+0x22d4>)
 8003922:	781a      	ldrb	r2, [r3, #0]
 8003924:	4b12      	ldr	r3, [pc, #72]	@ (8003970 <menu+0x22c4>)
 8003926:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003928:	4b12      	ldr	r3, [pc, #72]	@ (8003974 <menu+0x22c8>)
 800392a:	2201      	movs	r2, #1
 800392c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 800392e:	4b12      	ldr	r3, [pc, #72]	@ (8003978 <menu+0x22cc>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b1c      	cmp	r3, #28
 8003934:	f040 8088 	bne.w	8003a48 <menu+0x239c>
		calismaSayModu = 0;
 8003938:	4b14      	ldr	r3, [pc, #80]	@ (800398c <menu+0x22e0>)
 800393a:	2200      	movs	r2, #0
 800393c:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 800393e:	4a14      	ldr	r2, [pc, #80]	@ (8003990 <menu+0x22e4>)
 8003940:	2101      	movs	r1, #1
 8003942:	2001      	movs	r0, #1
 8003944:	f005 fbda 	bl	80090fc <lcd_print>

		if(demoMode == 0) {
 8003948:	4b12      	ldr	r3, [pc, #72]	@ (8003994 <menu+0x22e8>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d123      	bne.n	8003998 <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 8003950:	4a0c      	ldr	r2, [pc, #48]	@ (8003984 <menu+0x22d8>)
 8003952:	2101      	movs	r1, #1
 8003954:	2002      	movs	r0, #2
 8003956:	f005 fbd1 	bl	80090fc <lcd_print>
 800395a:	e026      	b.n	80039aa <menu+0x22fe>
 800395c:	200010d4 	.word	0x200010d4
 8003960:	200014c8 	.word	0x200014c8
 8003964:	2000105c 	.word	0x2000105c
 8003968:	40010800 	.word	0x40010800
 800396c:	200010eb 	.word	0x200010eb
 8003970:	20000fec 	.word	0x20000fec
 8003974:	200010e8 	.word	0x200010e8
 8003978:	200010bc 	.word	0x200010bc
 800397c:	20000128 	.word	0x20000128
 8003980:	200010d8 	.word	0x200010d8
 8003984:	2000139c 	.word	0x2000139c
 8003988:	200013b0 	.word	0x200013b0
 800398c:	200010db 	.word	0x200010db
 8003990:	2000013c 	.word	0x2000013c
 8003994:	200010da 	.word	0x200010da
		} else if(demoMode == 1) {
 8003998:	4b80      	ldr	r3, [pc, #512]	@ (8003b9c <menu+0x24f0>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d104      	bne.n	80039aa <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 80039a0:	4a7f      	ldr	r2, [pc, #508]	@ (8003ba0 <menu+0x24f4>)
 80039a2:	2101      	movs	r1, #1
 80039a4:	2002      	movs	r0, #2
 80039a6:	f005 fba9 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039aa:	2102      	movs	r1, #2
 80039ac:	487d      	ldr	r0, [pc, #500]	@ (8003ba4 <menu+0x24f8>)
 80039ae:	f006 fecf 	bl	800a750 <HAL_GPIO_ReadPin>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d115      	bne.n	80039e4 <menu+0x2338>
 80039b8:	4b7b      	ldr	r3, [pc, #492]	@ (8003ba8 <menu+0x24fc>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	f083 0301 	eor.w	r3, r3, #1
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00e      	beq.n	80039e4 <menu+0x2338>
			demoMode = demoMode + 1;
 80039c6:	4b75      	ldr	r3, [pc, #468]	@ (8003b9c <menu+0x24f0>)
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	3301      	adds	r3, #1
 80039cc:	b2da      	uxtb	r2, r3
 80039ce:	4b73      	ldr	r3, [pc, #460]	@ (8003b9c <menu+0x24f0>)
 80039d0:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80039d2:	4b72      	ldr	r3, [pc, #456]	@ (8003b9c <menu+0x24f0>)
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d902      	bls.n	80039e0 <menu+0x2334>
				demoMode = 0;
 80039da:	4b70      	ldr	r3, [pc, #448]	@ (8003b9c <menu+0x24f0>)
 80039dc:	2200      	movs	r2, #0
 80039de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039e0:	f000 fbaa 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039e4:	2104      	movs	r1, #4
 80039e6:	486f      	ldr	r0, [pc, #444]	@ (8003ba4 <menu+0x24f8>)
 80039e8:	f006 feb2 	bl	800a750 <HAL_GPIO_ReadPin>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d115      	bne.n	8003a1e <menu+0x2372>
 80039f2:	4b6d      	ldr	r3, [pc, #436]	@ (8003ba8 <menu+0x24fc>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	f083 0301 	eor.w	r3, r3, #1
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00e      	beq.n	8003a1e <menu+0x2372>
			demoMode = demoMode - 1;
 8003a00:	4b66      	ldr	r3, [pc, #408]	@ (8003b9c <menu+0x24f0>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	4b64      	ldr	r3, [pc, #400]	@ (8003b9c <menu+0x24f0>)
 8003a0a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003a0c:	4b63      	ldr	r3, [pc, #396]	@ (8003b9c <menu+0x24f0>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <menu+0x236e>
		   		demoMode = 1;
 8003a14:	4b61      	ldr	r3, [pc, #388]	@ (8003b9c <menu+0x24f0>)
 8003a16:	2201      	movs	r2, #1
 8003a18:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a1a:	f000 fb8d 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a1e:	2108      	movs	r1, #8
 8003a20:	4860      	ldr	r0, [pc, #384]	@ (8003ba4 <menu+0x24f8>)
 8003a22:	f006 fe95 	bl	800a750 <HAL_GPIO_ReadPin>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d10d      	bne.n	8003a48 <menu+0x239c>
 8003a2c:	4b5e      	ldr	r3, [pc, #376]	@ (8003ba8 <menu+0x24fc>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	f083 0301 	eor.w	r3, r3, #1
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d006      	beq.n	8003a48 <menu+0x239c>
			eepromData[26] = demoMode;
 8003a3a:	4b58      	ldr	r3, [pc, #352]	@ (8003b9c <menu+0x24f0>)
 8003a3c:	781a      	ldrb	r2, [r3, #0]
 8003a3e:	4b5b      	ldr	r3, [pc, #364]	@ (8003bac <menu+0x2500>)
 8003a40:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8003a42:	4b5b      	ldr	r3, [pc, #364]	@ (8003bb0 <menu+0x2504>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003a48:	4b5a      	ldr	r3, [pc, #360]	@ (8003bb4 <menu+0x2508>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	2b1d      	cmp	r3, #29
 8003a4e:	f040 80d5 	bne.w	8003bfc <menu+0x2550>
		finalCount=0;
 8003a52:	4b59      	ldr	r3, [pc, #356]	@ (8003bb8 <menu+0x250c>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
		if(calismaSayModu == 0) {
 8003a58:	4b58      	ldr	r3, [pc, #352]	@ (8003bbc <menu+0x2510>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d135      	bne.n	8003acc <menu+0x2420>
			lcd_print(1, 1, calismaSayisiText);
 8003a60:	4a57      	ldr	r2, [pc, #348]	@ (8003bc0 <menu+0x2514>)
 8003a62:	2101      	movs	r1, #1
 8003a64:	2001      	movs	r0, #1
 8003a66:	f005 fb49 	bl	80090fc <lcd_print>

			if(demoMode == 1) {
 8003a6a:	4b4c      	ldr	r3, [pc, #304]	@ (8003b9c <menu+0x24f0>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d113      	bne.n	8003a9a <menu+0x23ee>
				finalCount += calismaCountDemo * 255; //sıfır durumu da dahil ediliyor
 8003a72:	4b54      	ldr	r3, [pc, #336]	@ (8003bc4 <menu+0x2518>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	461a      	mov	r2, r3
 8003a78:	4613      	mov	r3, r2
 8003a7a:	021b      	lsls	r3, r3, #8
 8003a7c:	1a9a      	subs	r2, r3, r2
 8003a7e:	4b4e      	ldr	r3, [pc, #312]	@ (8003bb8 <menu+0x250c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4413      	add	r3, r2
 8003a84:	4a4c      	ldr	r2, [pc, #304]	@ (8003bb8 <menu+0x250c>)
 8003a86:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisiDemo;
 8003a88:	4b4f      	ldr	r3, [pc, #316]	@ (8003bc8 <menu+0x251c>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	4b4a      	ldr	r3, [pc, #296]	@ (8003bb8 <menu+0x250c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4413      	add	r3, r2
 8003a94:	4a48      	ldr	r2, [pc, #288]	@ (8003bb8 <menu+0x250c>)
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	e012      	b.n	8003ac0 <menu+0x2414>
			} else {
				finalCount += calismaCount * 255; //sıfır durumu da dahil ediliyor
 8003a9a:	4b4c      	ldr	r3, [pc, #304]	@ (8003bcc <menu+0x2520>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	021b      	lsls	r3, r3, #8
 8003aa4:	1a9a      	subs	r2, r3, r2
 8003aa6:	4b44      	ldr	r3, [pc, #272]	@ (8003bb8 <menu+0x250c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4413      	add	r3, r2
 8003aac:	4a42      	ldr	r2, [pc, #264]	@ (8003bb8 <menu+0x250c>)
 8003aae:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisi;
 8003ab0:	4b47      	ldr	r3, [pc, #284]	@ (8003bd0 <menu+0x2524>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4b40      	ldr	r3, [pc, #256]	@ (8003bb8 <menu+0x250c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4413      	add	r3, r2
 8003abc:	4a3e      	ldr	r2, [pc, #248]	@ (8003bb8 <menu+0x250c>)
 8003abe:	6013      	str	r3, [r2, #0]
			}

			displayCycleOnLCD(finalCount);
 8003ac0:	4b3d      	ldr	r3, [pc, #244]	@ (8003bb8 <menu+0x250c>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 fa89 	bl	8003fdc <displayCycleOnLCD>
 8003aca:	e00d      	b.n	8003ae8 <menu+0x243c>
		} else if(calismaSayModu == 1) {
 8003acc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bbc <menu+0x2510>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d109      	bne.n	8003ae8 <menu+0x243c>
			lcd_print(1, 1, calismaSayisiText);
 8003ad4:	4a3a      	ldr	r2, [pc, #232]	@ (8003bc0 <menu+0x2514>)
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	2001      	movs	r0, #1
 8003ada:	f005 fb0f 	bl	80090fc <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 8003ade:	4a3d      	ldr	r2, [pc, #244]	@ (8003bd4 <menu+0x2528>)
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	2002      	movs	r0, #2
 8003ae4:	f005 fb0a 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ae8:	2102      	movs	r1, #2
 8003aea:	482e      	ldr	r0, [pc, #184]	@ (8003ba4 <menu+0x24f8>)
 8003aec:	f006 fe30 	bl	800a750 <HAL_GPIO_ReadPin>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d115      	bne.n	8003b22 <menu+0x2476>
 8003af6:	4b2c      	ldr	r3, [pc, #176]	@ (8003ba8 <menu+0x24fc>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	f083 0301 	eor.w	r3, r3, #1
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00e      	beq.n	8003b22 <menu+0x2476>
			calismaSayModu = calismaSayModu + 1;
 8003b04:	4b2d      	ldr	r3, [pc, #180]	@ (8003bbc <menu+0x2510>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003bbc <menu+0x2510>)
 8003b0e:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8003b10:	4b2a      	ldr	r3, [pc, #168]	@ (8003bbc <menu+0x2510>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d902      	bls.n	8003b1e <menu+0x2472>
				calismaSayModu = 0;
 8003b18:	4b28      	ldr	r3, [pc, #160]	@ (8003bbc <menu+0x2510>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b1e:	f000 fb0b 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b22:	2104      	movs	r1, #4
 8003b24:	481f      	ldr	r0, [pc, #124]	@ (8003ba4 <menu+0x24f8>)
 8003b26:	f006 fe13 	bl	800a750 <HAL_GPIO_ReadPin>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d115      	bne.n	8003b5c <menu+0x24b0>
 8003b30:	4b1d      	ldr	r3, [pc, #116]	@ (8003ba8 <menu+0x24fc>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	f083 0301 	eor.w	r3, r3, #1
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00e      	beq.n	8003b5c <menu+0x24b0>
			calismaSayModu = calismaSayModu - 1;
 8003b3e:	4b1f      	ldr	r3, [pc, #124]	@ (8003bbc <menu+0x2510>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	4b1d      	ldr	r3, [pc, #116]	@ (8003bbc <menu+0x2510>)
 8003b48:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8003b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8003bbc <menu+0x2510>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <menu+0x24ac>
		   		calismaSayModu = 1;
 8003b52:	4b1a      	ldr	r3, [pc, #104]	@ (8003bbc <menu+0x2510>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b58:	f000 faee 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b5c:	2108      	movs	r1, #8
 8003b5e:	4811      	ldr	r0, [pc, #68]	@ (8003ba4 <menu+0x24f8>)
 8003b60:	f006 fdf6 	bl	800a750 <HAL_GPIO_ReadPin>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d148      	bne.n	8003bfc <menu+0x2550>
 8003b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba8 <menu+0x24fc>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	f083 0301 	eor.w	r3, r3, #1
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d041      	beq.n	8003bfc <menu+0x2550>
			if(demoMode == 1) {
 8003b78:	4b08      	ldr	r3, [pc, #32]	@ (8003b9c <menu+0x24f0>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d12b      	bne.n	8003bd8 <menu+0x252c>
				eepromData[28] = 0;
 8003b80:	4b0a      	ldr	r3, [pc, #40]	@ (8003bac <menu+0x2500>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	771a      	strb	r2, [r3, #28]
				eepromData[30] = 0;
 8003b86:	4b09      	ldr	r3, [pc, #36]	@ (8003bac <menu+0x2500>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	779a      	strb	r2, [r3, #30]
				calismaSayisiDemo = 0;
 8003b8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003bc8 <menu+0x251c>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	701a      	strb	r2, [r3, #0]
				calismaCountDemo = 0;
 8003b92:	4b0c      	ldr	r3, [pc, #48]	@ (8003bc4 <menu+0x2518>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	701a      	strb	r2, [r3, #0]
 8003b98:	e02a      	b.n	8003bf0 <menu+0x2544>
 8003b9a:	bf00      	nop
 8003b9c:	200010da 	.word	0x200010da
 8003ba0:	200013b0 	.word	0x200013b0
 8003ba4:	40010800 	.word	0x40010800
 8003ba8:	200010eb 	.word	0x200010eb
 8003bac:	20000fec 	.word	0x20000fec
 8003bb0:	200010e8 	.word	0x200010e8
 8003bb4:	200010bc 	.word	0x200010bc
 8003bb8:	200010b8 	.word	0x200010b8
 8003bbc:	200010db 	.word	0x200010db
 8003bc0:	2000170c 	.word	0x2000170c
 8003bc4:	200010b7 	.word	0x200010b7
 8003bc8:	200010b5 	.word	0x200010b5
 8003bcc:	200010b6 	.word	0x200010b6
 8003bd0:	200010b4 	.word	0x200010b4
 8003bd4:	20001720 	.word	0x20001720
			} else {
				eepromData[27] = 0;
 8003bd8:	4b4b      	ldr	r3, [pc, #300]	@ (8003d08 <menu+0x265c>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	76da      	strb	r2, [r3, #27]
				eepromData[29] = 0;
 8003bde:	4b4a      	ldr	r3, [pc, #296]	@ (8003d08 <menu+0x265c>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	775a      	strb	r2, [r3, #29]
				calismaSayisi = 0;
 8003be4:	4b49      	ldr	r3, [pc, #292]	@ (8003d0c <menu+0x2660>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	701a      	strb	r2, [r3, #0]
				calismaCount = 0;
 8003bea:	4b49      	ldr	r3, [pc, #292]	@ (8003d10 <menu+0x2664>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	701a      	strb	r2, [r3, #0]
			}
			calismaSayModu = 0;
 8003bf0:	4b48      	ldr	r3, [pc, #288]	@ (8003d14 <menu+0x2668>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003bf6:	4b48      	ldr	r3, [pc, #288]	@ (8003d18 <menu+0x266c>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8003bfc:	4b47      	ldr	r3, [pc, #284]	@ (8003d1c <menu+0x2670>)
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b1e      	cmp	r3, #30
 8003c02:	d16a      	bne.n	8003cda <menu+0x262e>
		calismaSayModu = 0;
 8003c04:	4b43      	ldr	r3, [pc, #268]	@ (8003d14 <menu+0x2668>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 8003c0a:	4a45      	ldr	r2, [pc, #276]	@ (8003d20 <menu+0x2674>)
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	2001      	movs	r0, #1
 8003c10:	f005 fa74 	bl	80090fc <lcd_print>
		lcd_print(2, 1, secilenDilText);
 8003c14:	4a43      	ldr	r2, [pc, #268]	@ (8003d24 <menu+0x2678>)
 8003c16:	2101      	movs	r1, #1
 8003c18:	2002      	movs	r0, #2
 8003c1a:	f005 fa6f 	bl	80090fc <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c1e:	2102      	movs	r1, #2
 8003c20:	4841      	ldr	r0, [pc, #260]	@ (8003d28 <menu+0x267c>)
 8003c22:	f006 fd95 	bl	800a750 <HAL_GPIO_ReadPin>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d11c      	bne.n	8003c66 <menu+0x25ba>
 8003c2c:	4b3f      	ldr	r3, [pc, #252]	@ (8003d2c <menu+0x2680>)
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	f083 0301 	eor.w	r3, r3, #1
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d015      	beq.n	8003c66 <menu+0x25ba>
			dilSecim = dilSecim + 1;
 8003c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8003d30 <menu+0x2684>)
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	4b3b      	ldr	r3, [pc, #236]	@ (8003d30 <menu+0x2684>)
 8003c44:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003c46:	4b3a      	ldr	r3, [pc, #232]	@ (8003d30 <menu+0x2684>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d902      	bls.n	8003c54 <menu+0x25a8>
				dilSecim = 0;
 8003c4e:	4b38      	ldr	r3, [pc, #224]	@ (8003d30 <menu+0x2684>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	701a      	strb	r2, [r3, #0]
			}
			resetMenuTexts();
 8003c54:	f003 ff70 	bl	8007b38 <resetMenuTexts>
			loadMenuTexts(dilSecim);
 8003c58:	4b35      	ldr	r3, [pc, #212]	@ (8003d30 <menu+0x2684>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	f002 fae5 	bl	800622c <loadMenuTexts>

			bekle();
 8003c62:	f000 fa69 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c66:	2104      	movs	r1, #4
 8003c68:	482f      	ldr	r0, [pc, #188]	@ (8003d28 <menu+0x267c>)
 8003c6a:	f006 fd71 	bl	800a750 <HAL_GPIO_ReadPin>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d11c      	bne.n	8003cae <menu+0x2602>
 8003c74:	4b2d      	ldr	r3, [pc, #180]	@ (8003d2c <menu+0x2680>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	f083 0301 	eor.w	r3, r3, #1
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d015      	beq.n	8003cae <menu+0x2602>
			dilSecim = dilSecim - 1;
 8003c82:	4b2b      	ldr	r3, [pc, #172]	@ (8003d30 <menu+0x2684>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	4b29      	ldr	r3, [pc, #164]	@ (8003d30 <menu+0x2684>)
 8003c8c:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003c8e:	4b28      	ldr	r3, [pc, #160]	@ (8003d30 <menu+0x2684>)
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d002      	beq.n	8003c9c <menu+0x25f0>
		   		dilSecim = 1;
 8003c96:	4b26      	ldr	r3, [pc, #152]	@ (8003d30 <menu+0x2684>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	701a      	strb	r2, [r3, #0]
		   	}
		   	resetMenuTexts();
 8003c9c:	f003 ff4c 	bl	8007b38 <resetMenuTexts>
		   	loadMenuTexts(dilSecim);
 8003ca0:	4b23      	ldr	r3, [pc, #140]	@ (8003d30 <menu+0x2684>)
 8003ca2:	781b      	ldrb	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f002 fac1 	bl	800622c <loadMenuTexts>

			bekle();
 8003caa:	f000 fa45 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cae:	2108      	movs	r1, #8
 8003cb0:	481d      	ldr	r0, [pc, #116]	@ (8003d28 <menu+0x267c>)
 8003cb2:	f006 fd4d 	bl	800a750 <HAL_GPIO_ReadPin>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d10e      	bne.n	8003cda <menu+0x262e>
 8003cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d2c <menu+0x2680>)
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	f083 0301 	eor.w	r3, r3, #1
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d007      	beq.n	8003cda <menu+0x262e>
			eepromData[33] = dilSecim;
 8003cca:	4b19      	ldr	r3, [pc, #100]	@ (8003d30 <menu+0x2684>)
 8003ccc:	781a      	ldrb	r2, [r3, #0]
 8003cce:	4b0e      	ldr	r3, [pc, #56]	@ (8003d08 <menu+0x265c>)
 8003cd0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 8003cd4:	4b10      	ldr	r3, [pc, #64]	@ (8003d18 <menu+0x266c>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003cda:	4b10      	ldr	r3, [pc, #64]	@ (8003d1c <menu+0x2670>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b1f      	cmp	r3, #31
 8003ce0:	f040 8087 	bne.w	8003df2 <menu+0x2746>
		calismaSayModu = 0;
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <menu+0x2668>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 8003cea:	4a12      	ldr	r2, [pc, #72]	@ (8003d34 <menu+0x2688>)
 8003cec:	2101      	movs	r1, #1
 8003cee:	2001      	movs	r0, #1
 8003cf0:	f005 fa04 	bl	80090fc <lcd_print>

		if(iotMode == 0) {
 8003cf4:	4b10      	ldr	r3, [pc, #64]	@ (8003d38 <menu+0x268c>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d121      	bne.n	8003d40 <menu+0x2694>
			lcd_print(2, 1, pasifText);
 8003cfc:	4a0f      	ldr	r2, [pc, #60]	@ (8003d3c <menu+0x2690>)
 8003cfe:	2101      	movs	r1, #1
 8003d00:	2002      	movs	r0, #2
 8003d02:	f005 f9fb 	bl	80090fc <lcd_print>
 8003d06:	e024      	b.n	8003d52 <menu+0x26a6>
 8003d08:	20000fec 	.word	0x20000fec
 8003d0c:	200010b4 	.word	0x200010b4
 8003d10:	200010b6 	.word	0x200010b6
 8003d14:	200010db 	.word	0x200010db
 8003d18:	200010e8 	.word	0x200010e8
 8003d1c:	200010bc 	.word	0x200010bc
 8003d20:	20001734 	.word	0x20001734
 8003d24:	20001748 	.word	0x20001748
 8003d28:	40010800 	.word	0x40010800
 8003d2c:	200010eb 	.word	0x200010eb
 8003d30:	200010dc 	.word	0x200010dc
 8003d34:	20000150 	.word	0x20000150
 8003d38:	200010e7 	.word	0x200010e7
 8003d3c:	2000139c 	.word	0x2000139c
		} else if(iotMode == 1) {
 8003d40:	4b99      	ldr	r3, [pc, #612]	@ (8003fa8 <menu+0x28fc>)
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d104      	bne.n	8003d52 <menu+0x26a6>
			lcd_print(2, 1, aktifText);
 8003d48:	4a98      	ldr	r2, [pc, #608]	@ (8003fac <menu+0x2900>)
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	2002      	movs	r0, #2
 8003d4e:	f005 f9d5 	bl	80090fc <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d52:	2102      	movs	r1, #2
 8003d54:	4896      	ldr	r0, [pc, #600]	@ (8003fb0 <menu+0x2904>)
 8003d56:	f006 fcfb 	bl	800a750 <HAL_GPIO_ReadPin>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d115      	bne.n	8003d8c <menu+0x26e0>
 8003d60:	4b94      	ldr	r3, [pc, #592]	@ (8003fb4 <menu+0x2908>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	f083 0301 	eor.w	r3, r3, #1
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00e      	beq.n	8003d8c <menu+0x26e0>
			iotMode = iotMode + 1;
 8003d6e:	4b8e      	ldr	r3, [pc, #568]	@ (8003fa8 <menu+0x28fc>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	3301      	adds	r3, #1
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	4b8c      	ldr	r3, [pc, #560]	@ (8003fa8 <menu+0x28fc>)
 8003d78:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003d7a:	4b8b      	ldr	r3, [pc, #556]	@ (8003fa8 <menu+0x28fc>)
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d902      	bls.n	8003d88 <menu+0x26dc>
				iotMode = 0;
 8003d82:	4b89      	ldr	r3, [pc, #548]	@ (8003fa8 <menu+0x28fc>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003d88:	f000 f9d6 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d8c:	2104      	movs	r1, #4
 8003d8e:	4888      	ldr	r0, [pc, #544]	@ (8003fb0 <menu+0x2904>)
 8003d90:	f006 fcde 	bl	800a750 <HAL_GPIO_ReadPin>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d115      	bne.n	8003dc6 <menu+0x271a>
 8003d9a:	4b86      	ldr	r3, [pc, #536]	@ (8003fb4 <menu+0x2908>)
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	f083 0301 	eor.w	r3, r3, #1
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00e      	beq.n	8003dc6 <menu+0x271a>
			iotMode = iotMode - 1;
 8003da8:	4b7f      	ldr	r3, [pc, #508]	@ (8003fa8 <menu+0x28fc>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	4b7d      	ldr	r3, [pc, #500]	@ (8003fa8 <menu+0x28fc>)
 8003db2:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003db4:	4b7c      	ldr	r3, [pc, #496]	@ (8003fa8 <menu+0x28fc>)
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <menu+0x2716>
		   		iotMode = 1;
 8003dbc:	4b7a      	ldr	r3, [pc, #488]	@ (8003fa8 <menu+0x28fc>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003dc2:	f000 f9b9 	bl	8004138 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dc6:	2108      	movs	r1, #8
 8003dc8:	4879      	ldr	r0, [pc, #484]	@ (8003fb0 <menu+0x2904>)
 8003dca:	f006 fcc1 	bl	800a750 <HAL_GPIO_ReadPin>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d10e      	bne.n	8003df2 <menu+0x2746>
 8003dd4:	4b77      	ldr	r3, [pc, #476]	@ (8003fb4 <menu+0x2908>)
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	f083 0301 	eor.w	r3, r3, #1
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d007      	beq.n	8003df2 <menu+0x2746>
			eepromData[48] = iotMode;
 8003de2:	4b71      	ldr	r3, [pc, #452]	@ (8003fa8 <menu+0x28fc>)
 8003de4:	781a      	ldrb	r2, [r3, #0]
 8003de6:	4b74      	ldr	r3, [pc, #464]	@ (8003fb8 <menu+0x290c>)
 8003de8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003dec:	4b73      	ldr	r3, [pc, #460]	@ (8003fbc <menu+0x2910>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003df2:	4b73      	ldr	r3, [pc, #460]	@ (8003fc0 <menu+0x2914>)
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	2b20      	cmp	r3, #32
 8003df8:	d127      	bne.n	8003e4a <menu+0x279e>
		calismaSayModu = 0;
 8003dfa:	4b72      	ldr	r3, [pc, #456]	@ (8003fc4 <menu+0x2918>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, machineIDText);
 8003e00:	4a71      	ldr	r2, [pc, #452]	@ (8003fc8 <menu+0x291c>)
 8003e02:	2101      	movs	r1, #1
 8003e04:	2001      	movs	r0, #1
 8003e06:	f005 f979 	bl	80090fc <lcd_print>

		convertArrays(1);
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	f7fc fd4c 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003e10:	2032      	movs	r0, #50	@ 0x32
 8003e12:	f005 fecd 	bl	8009bb0 <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8003e16:	2001      	movs	r0, #1
 8003e18:	f7fd fbec 	bl	80015f4 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e1c:	2102      	movs	r1, #2
 8003e1e:	4864      	ldr	r0, [pc, #400]	@ (8003fb0 <menu+0x2904>)
 8003e20:	f006 fc96 	bl	800a750 <HAL_GPIO_ReadPin>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d10f      	bne.n	8003e4a <menu+0x279e>
 8003e2a:	2104      	movs	r1, #4
 8003e2c:	4860      	ldr	r0, [pc, #384]	@ (8003fb0 <menu+0x2904>)
 8003e2e:	f006 fc8f 	bl	800a750 <HAL_GPIO_ReadPin>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d108      	bne.n	8003e4a <menu+0x279e>
 8003e38:	4b5e      	ldr	r3, [pc, #376]	@ (8003fb4 <menu+0x2908>)
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	f083 0301 	eor.w	r3, r3, #1
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <menu+0x279e>
			takeMachineIDWithConfirmation();
 8003e46:	f004 f8eb 	bl	8008020 <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 8003e4a:	4b5d      	ldr	r3, [pc, #372]	@ (8003fc0 <menu+0x2914>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b21      	cmp	r3, #33	@ 0x21
 8003e50:	d12b      	bne.n	8003eaa <menu+0x27fe>
		calismaSayModu = 0;
 8003e52:	4b5c      	ldr	r3, [pc, #368]	@ (8003fc4 <menu+0x2918>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 8003e58:	2002      	movs	r0, #2
 8003e5a:	f7fc fd25 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003e5e:	2032      	movs	r0, #50	@ 0x32
 8003e60:	f005 fea6 	bl	8009bb0 <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003e64:	2002      	movs	r0, #2
 8003e66:	f7fd fbc5 	bl	80015f4 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e6a:	2102      	movs	r1, #2
 8003e6c:	4850      	ldr	r0, [pc, #320]	@ (8003fb0 <menu+0x2904>)
 8003e6e:	f006 fc6f 	bl	800a750 <HAL_GPIO_ReadPin>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d118      	bne.n	8003eaa <menu+0x27fe>
 8003e78:	2104      	movs	r1, #4
 8003e7a:	484d      	ldr	r0, [pc, #308]	@ (8003fb0 <menu+0x2904>)
 8003e7c:	f006 fc68 	bl	800a750 <HAL_GPIO_ReadPin>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d111      	bne.n	8003eaa <menu+0x27fe>
 8003e86:	4b4b      	ldr	r3, [pc, #300]	@ (8003fb4 <menu+0x2908>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	f083 0301 	eor.w	r3, r3, #1
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <menu+0x27fe>
			takeWifiSSID();
 8003e94:	f004 faf2 	bl	800847c <takeWifiSSID>

			convertArrays(2);
 8003e98:	2002      	movs	r0, #2
 8003e9a:	f7fc fd05 	bl	80008a8 <convertArrays>
			HAL_Delay(50);
 8003e9e:	2032      	movs	r0, #50	@ 0x32
 8003ea0:	f005 fe86 	bl	8009bb0 <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003ea4:	2002      	movs	r0, #2
 8003ea6:	f7fd fba5 	bl	80015f4 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003eaa:	4b45      	ldr	r3, [pc, #276]	@ (8003fc0 <menu+0x2914>)
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	2b22      	cmp	r3, #34	@ 0x22
 8003eb0:	d12b      	bne.n	8003f0a <menu+0x285e>
		calismaSayModu = 0;
 8003eb2:	4b44      	ldr	r3, [pc, #272]	@ (8003fc4 <menu+0x2918>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8003eb8:	2003      	movs	r0, #3
 8003eba:	f7fc fcf5 	bl	80008a8 <convertArrays>
		HAL_Delay(50);
 8003ebe:	2032      	movs	r0, #50	@ 0x32
 8003ec0:	f005 fe76 	bl	8009bb0 <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003ec4:	2003      	movs	r0, #3
 8003ec6:	f7fd fb95 	bl	80015f4 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003eca:	2102      	movs	r1, #2
 8003ecc:	4838      	ldr	r0, [pc, #224]	@ (8003fb0 <menu+0x2904>)
 8003ece:	f006 fc3f 	bl	800a750 <HAL_GPIO_ReadPin>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d118      	bne.n	8003f0a <menu+0x285e>
 8003ed8:	2104      	movs	r1, #4
 8003eda:	4835      	ldr	r0, [pc, #212]	@ (8003fb0 <menu+0x2904>)
 8003edc:	f006 fc38 	bl	800a750 <HAL_GPIO_ReadPin>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d111      	bne.n	8003f0a <menu+0x285e>
 8003ee6:	4b33      	ldr	r3, [pc, #204]	@ (8003fb4 <menu+0x2908>)
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	f083 0301 	eor.w	r3, r3, #1
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00a      	beq.n	8003f0a <menu+0x285e>
			takeWifiPass();
 8003ef4:	f004 fc6e 	bl	80087d4 <takeWifiPass>

			convertArrays(3);
 8003ef8:	2003      	movs	r0, #3
 8003efa:	f7fc fcd5 	bl	80008a8 <convertArrays>
			HAL_Delay(50);
 8003efe:	2032      	movs	r0, #50	@ 0x32
 8003f00:	f005 fe56 	bl	8009bb0 <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8003f04:	2003      	movs	r0, #3
 8003f06:	f7fd fb75 	bl	80015f4 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8003f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8003fc0 <menu+0x2914>)
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b23      	cmp	r3, #35	@ 0x23
 8003f10:	d146      	bne.n	8003fa0 <menu+0x28f4>
		lcd_print(1, 1, menudenCikisText);
 8003f12:	4a2e      	ldr	r2, [pc, #184]	@ (8003fcc <menu+0x2920>)
 8003f14:	2101      	movs	r1, #1
 8003f16:	2001      	movs	r0, #1
 8003f18:	f005 f8f0 	bl	80090fc <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003f1c:	4a2c      	ldr	r2, [pc, #176]	@ (8003fd0 <menu+0x2924>)
 8003f1e:	2101      	movs	r1, #1
 8003f20:	2002      	movs	r0, #2
 8003f22:	f005 f8eb 	bl	80090fc <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003f26:	2108      	movs	r1, #8
 8003f28:	4821      	ldr	r0, [pc, #132]	@ (8003fb0 <menu+0x2904>)
 8003f2a:	f006 fc11 	bl	800a750 <HAL_GPIO_ReadPin>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d135      	bne.n	8003fa0 <menu+0x28f4>
			menuGiris = 0;
 8003f34:	4b27      	ldr	r3, [pc, #156]	@ (8003fd4 <menu+0x2928>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	701a      	strb	r2, [r3, #0]

			uint32_t startTick = HAL_GetTick();
 8003f3a:	f005 fe2f 	bl	8009b9c <HAL_GetTick>
 8003f3e:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003f40:	e007      	b.n	8003f52 <menu+0x28a6>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003f42:	f005 fe2b 	bl	8009b9c <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f50:	d806      	bhi.n	8003f60 <menu+0x28b4>
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003f52:	4821      	ldr	r0, [pc, #132]	@ (8003fd8 <menu+0x292c>)
 8003f54:	f007 fa25 	bl	800b3a2 <HAL_I2C_GetError>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d0f1      	beq.n	8003f42 <menu+0x2896>
 8003f5e:	e000      	b.n	8003f62 <menu+0x28b6>
			        break;
 8003f60:	bf00      	nop
			    }
			}

			startTick = HAL_GetTick();
 8003f62:	f005 fe1b 	bl	8009b9c <HAL_GetTick>
 8003f66:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003f68:	e007      	b.n	8003f7a <menu+0x28ce>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003f6a:	f005 fe17 	bl	8009b9c <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f78:	d806      	bhi.n	8003f88 <menu+0x28dc>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003f7a:	4817      	ldr	r0, [pc, #92]	@ (8003fd8 <menu+0x292c>)
 8003f7c:	f007 fa04 	bl	800b388 <HAL_I2C_GetState>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	d1f1      	bne.n	8003f6a <menu+0x28be>
 8003f86:	e000      	b.n	8003f8a <menu+0x28de>
			        break;
 8003f88:	bf00      	nop
			    }
			}

			saveEEPROM(0);
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	f7fc fb8a 	bl	80006a4 <saveEEPROM>

			lcd_clear();
 8003f90:	f005 f8e0 	bl	8009154 <lcd_clear>
			HAL_Delay(500);
 8003f94:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003f98:	f005 fe0a 	bl	8009bb0 <HAL_Delay>
			NVIC_SystemReset();
 8003f9c:	f7fd fb70 	bl	8001680 <__NVIC_SystemReset>
		}
	}
}
 8003fa0:	bf00      	nop
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	200010e7 	.word	0x200010e7
 8003fac:	200013b0 	.word	0x200013b0
 8003fb0:	40010800 	.word	0x40010800
 8003fb4:	200010eb 	.word	0x200010eb
 8003fb8:	20000fec 	.word	0x20000fec
 8003fbc:	200010e8 	.word	0x200010e8
 8003fc0:	200010bc 	.word	0x200010bc
 8003fc4:	200010db 	.word	0x200010db
 8003fc8:	200018c4 	.word	0x200018c4
 8003fcc:	2000175c 	.word	0x2000175c
 8003fd0:	20001770 	.word	0x20001770
 8003fd4:	200010d9 	.word	0x200010d9
 8003fd8:	2000193c 	.word	0x2000193c

08003fdc <displayCycleOnLCD>:

void displayCycleOnLCD(int finalCount) {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08a      	sub	sp, #40	@ 0x28
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
    int padding, i;

    itoa(finalCount, snum, 10);
 8003fe4:	220a      	movs	r2, #10
 8003fe6:	491c      	ldr	r1, [pc, #112]	@ (8004058 <displayCycleOnLCD+0x7c>)
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f009 fc39 	bl	800d860 <itoa>

    int length = strlen(snum);
 8003fee:	481a      	ldr	r0, [pc, #104]	@ (8004058 <displayCycleOnLCD+0x7c>)
 8003ff0:	f7fc f918 	bl	8000224 <strlen>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	623b      	str	r3, [r7, #32]

    padding = (16 - length) / 2;
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	f1c3 0310 	rsb	r3, r3, #16
 8003ffe:	0fda      	lsrs	r2, r3, #31
 8004000:	4413      	add	r3, r2
 8004002:	105b      	asrs	r3, r3, #1
 8004004:	61fb      	str	r3, [r7, #28]

    char displayLine[17];
    memset(displayLine, ' ', 16);
 8004006:	f107 0308 	add.w	r3, r7, #8
 800400a:	2210      	movs	r2, #16
 800400c:	2120      	movs	r1, #32
 800400e:	4618      	mov	r0, r3
 8004010:	f009 fd40 	bl	800da94 <memset>
    displayLine[16] = '\0'; // Null terminator
 8004014:	2300      	movs	r3, #0
 8004016:	763b      	strb	r3, [r7, #24]

    for (i = 0; i < length; i++) {
 8004018:	2300      	movs	r3, #0
 800401a:	627b      	str	r3, [r7, #36]	@ 0x24
 800401c:	e00d      	b.n	800403a <displayCycleOnLCD+0x5e>
        displayLine[padding + i] = snum[i];
 800401e:	69fa      	ldr	r2, [r7, #28]
 8004020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004022:	4413      	add	r3, r2
 8004024:	490c      	ldr	r1, [pc, #48]	@ (8004058 <displayCycleOnLCD+0x7c>)
 8004026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004028:	440a      	add	r2, r1
 800402a:	7812      	ldrb	r2, [r2, #0]
 800402c:	3328      	adds	r3, #40	@ 0x28
 800402e:	443b      	add	r3, r7
 8004030:	f803 2c20 	strb.w	r2, [r3, #-32]
    for (i = 0; i < length; i++) {
 8004034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004036:	3301      	adds	r3, #1
 8004038:	627b      	str	r3, [r7, #36]	@ 0x24
 800403a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403c:	6a3b      	ldr	r3, [r7, #32]
 800403e:	429a      	cmp	r2, r3
 8004040:	dbed      	blt.n	800401e <displayCycleOnLCD+0x42>
    }

    lcd_print(2, 1, displayLine);
 8004042:	f107 0308 	add.w	r3, r7, #8
 8004046:	461a      	mov	r2, r3
 8004048:	2101      	movs	r1, #1
 800404a:	2002      	movs	r0, #2
 800404c:	f005 f856 	bl	80090fc <lcd_print>
}
 8004050:	bf00      	nop
 8004052:	3728      	adds	r7, #40	@ 0x28
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	2000105c 	.word	0x2000105c

0800405c <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8004066:	79fb      	ldrb	r3, [r7, #7]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d105      	bne.n	8004078 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 800406c:	4a24      	ldr	r2, [pc, #144]	@ (8004100 <lcdUpdate+0xa4>)
 800406e:	2101      	movs	r1, #1
 8004070:	2002      	movs	r0, #2
 8004072:	f005 f843 	bl	80090fc <lcd_print>
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
		HAL_Delay(10);
	}
}
 8004076:	e03e      	b.n	80040f6 <lcdUpdate+0x9a>
	} else if(y==2) {
 8004078:	79fb      	ldrb	r3, [r7, #7]
 800407a:	2b02      	cmp	r3, #2
 800407c:	d105      	bne.n	800408a <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 800407e:	4a20      	ldr	r2, [pc, #128]	@ (8004100 <lcdUpdate+0xa4>)
 8004080:	2102      	movs	r1, #2
 8004082:	2002      	movs	r0, #2
 8004084:	f005 f83a 	bl	80090fc <lcd_print>
}
 8004088:	e035      	b.n	80040f6 <lcdUpdate+0x9a>
	} else if(y==3) {
 800408a:	79fb      	ldrb	r3, [r7, #7]
 800408c:	2b03      	cmp	r3, #3
 800408e:	d105      	bne.n	800409c <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8004090:	4a1b      	ldr	r2, [pc, #108]	@ (8004100 <lcdUpdate+0xa4>)
 8004092:	2103      	movs	r1, #3
 8004094:	2002      	movs	r0, #2
 8004096:	f005 f831 	bl	80090fc <lcd_print>
}
 800409a:	e02c      	b.n	80040f6 <lcdUpdate+0x9a>
	} else if(y==4) {
 800409c:	79fb      	ldrb	r3, [r7, #7]
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d105      	bne.n	80040ae <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80040a2:	4a17      	ldr	r2, [pc, #92]	@ (8004100 <lcdUpdate+0xa4>)
 80040a4:	2104      	movs	r1, #4
 80040a6:	2002      	movs	r0, #2
 80040a8:	f005 f828 	bl	80090fc <lcd_print>
}
 80040ac:	e023      	b.n	80040f6 <lcdUpdate+0x9a>
	} else if(y==5) {
 80040ae:	79fb      	ldrb	r3, [r7, #7]
 80040b0:	2b05      	cmp	r3, #5
 80040b2:	d105      	bne.n	80040c0 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80040b4:	4a12      	ldr	r2, [pc, #72]	@ (8004100 <lcdUpdate+0xa4>)
 80040b6:	2105      	movs	r1, #5
 80040b8:	2002      	movs	r0, #2
 80040ba:	f005 f81f 	bl	80090fc <lcd_print>
}
 80040be:	e01a      	b.n	80040f6 <lcdUpdate+0x9a>
	} else if(y==6) {
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	2b06      	cmp	r3, #6
 80040c4:	d105      	bne.n	80040d2 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80040c6:	4a0e      	ldr	r2, [pc, #56]	@ (8004100 <lcdUpdate+0xa4>)
 80040c8:	2106      	movs	r1, #6
 80040ca:	2002      	movs	r0, #2
 80040cc:	f005 f816 	bl	80090fc <lcd_print>
}
 80040d0:	e011      	b.n	80040f6 <lcdUpdate+0x9a>
	} else if (y==7) {
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	2b07      	cmp	r3, #7
 80040d6:	d10e      	bne.n	80040f6 <lcdUpdate+0x9a>
		lcd_clear();
 80040d8:	f005 f83c 	bl	8009154 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 80040dc:	4a09      	ldr	r2, [pc, #36]	@ (8004104 <lcdUpdate+0xa8>)
 80040de:	2101      	movs	r1, #1
 80040e0:	2001      	movs	r0, #1
 80040e2:	f005 f80b 	bl	80090fc <lcd_print>
		lcd_print(2, 1, mainText2GN);
 80040e6:	4a08      	ldr	r2, [pc, #32]	@ (8004108 <lcdUpdate+0xac>)
 80040e8:	2101      	movs	r1, #1
 80040ea:	2002      	movs	r0, #2
 80040ec:	f005 f806 	bl	80090fc <lcd_print>
		HAL_Delay(10);
 80040f0:	200a      	movs	r0, #10
 80040f2:	f005 fd5d 	bl	8009bb0 <HAL_Delay>
}
 80040f6:	bf00      	nop
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	0800ed94 	.word	0x0800ed94
 8004104:	200000c4 	.word	0x200000c4
 8004108:	200000d8 	.word	0x200000d8

0800410c <checkLCDBacklight>:

void checkLCDBacklight() {
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure) {
 8004110:	4b07      	ldr	r3, [pc, #28]	@ (8004130 <checkLCDBacklight+0x24>)
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4b07      	ldr	r3, [pc, #28]	@ (8004134 <checkLCDBacklight+0x28>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b3b      	cmp	r3, #59	@ 0x3b
 800411c:	d903      	bls.n	8004126 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 800411e:	2000      	movs	r0, #0
 8004120:	f005 f838 	bl	8009194 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004124:	e002      	b.n	800412c <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004126:	2001      	movs	r0, #1
 8004128:	f005 f834 	bl	8009194 <lcd_backlight>
}
 800412c:	bf00      	nop
 800412e:	bd80      	pop	{r7, pc}
 8004130:	20001094 	.word	0x20001094
 8004134:	200010b0 	.word	0x200010b0

08004138 <bekle>:

void bekle() {
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
	timer1=millis;
 800413c:	4b47      	ldr	r3, [pc, #284]	@ (800425c <bekle+0x124>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a47      	ldr	r2, [pc, #284]	@ (8004260 <bekle+0x128>)
 8004142:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004144:	e002      	b.n	800414c <bekle+0x14>
    	butonKontrol = 1;
 8004146:	4b47      	ldr	r3, [pc, #284]	@ (8004264 <bekle+0x12c>)
 8004148:	2201      	movs	r2, #1
 800414a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800414c:	2101      	movs	r1, #1
 800414e:	4846      	ldr	r0, [pc, #280]	@ (8004268 <bekle+0x130>)
 8004150:	f006 fafe 	bl	800a750 <HAL_GPIO_ReadPin>
 8004154:	4603      	mov	r3, r0
 8004156:	2b01      	cmp	r3, #1
 8004158:	d109      	bne.n	800416e <bekle+0x36>
 800415a:	4b40      	ldr	r3, [pc, #256]	@ (800425c <bekle+0x124>)
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	4b40      	ldr	r3, [pc, #256]	@ (8004260 <bekle+0x128>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d0ef      	beq.n	8004146 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004166:	e002      	b.n	800416e <bekle+0x36>
    	butonKontrol = 1;
 8004168:	4b3e      	ldr	r3, [pc, #248]	@ (8004264 <bekle+0x12c>)
 800416a:	2201      	movs	r2, #1
 800416c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800416e:	2108      	movs	r1, #8
 8004170:	483e      	ldr	r0, [pc, #248]	@ (800426c <bekle+0x134>)
 8004172:	f006 faed 	bl	800a750 <HAL_GPIO_ReadPin>
 8004176:	4603      	mov	r3, r0
 8004178:	2b01      	cmp	r3, #1
 800417a:	d109      	bne.n	8004190 <bekle+0x58>
 800417c:	4b37      	ldr	r3, [pc, #220]	@ (800425c <bekle+0x124>)
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	4b37      	ldr	r3, [pc, #220]	@ (8004260 <bekle+0x128>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d0ef      	beq.n	8004168 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004188:	e002      	b.n	8004190 <bekle+0x58>
    	butonKontrol = 1;
 800418a:	4b36      	ldr	r3, [pc, #216]	@ (8004264 <bekle+0x12c>)
 800418c:	2201      	movs	r2, #1
 800418e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004190:	2102      	movs	r1, #2
 8004192:	4835      	ldr	r0, [pc, #212]	@ (8004268 <bekle+0x130>)
 8004194:	f006 fadc 	bl	800a750 <HAL_GPIO_ReadPin>
 8004198:	4603      	mov	r3, r0
 800419a:	2b01      	cmp	r3, #1
 800419c:	d109      	bne.n	80041b2 <bekle+0x7a>
 800419e:	4b2f      	ldr	r3, [pc, #188]	@ (800425c <bekle+0x124>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004260 <bekle+0x128>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d0ef      	beq.n	800418a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80041aa:	e002      	b.n	80041b2 <bekle+0x7a>
    	butonKontrol = 1;
 80041ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004264 <bekle+0x12c>)
 80041ae:	2201      	movs	r2, #1
 80041b0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80041b2:	2104      	movs	r1, #4
 80041b4:	482c      	ldr	r0, [pc, #176]	@ (8004268 <bekle+0x130>)
 80041b6:	f006 facb 	bl	800a750 <HAL_GPIO_ReadPin>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d109      	bne.n	80041d4 <bekle+0x9c>
 80041c0:	4b26      	ldr	r3, [pc, #152]	@ (800425c <bekle+0x124>)
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	4b26      	ldr	r3, [pc, #152]	@ (8004260 <bekle+0x128>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d0ef      	beq.n	80041ac <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80041cc:	e002      	b.n	80041d4 <bekle+0x9c>
    	butonKontrol = 1;
 80041ce:	4b25      	ldr	r3, [pc, #148]	@ (8004264 <bekle+0x12c>)
 80041d0:	2201      	movs	r2, #1
 80041d2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80041d4:	2108      	movs	r1, #8
 80041d6:	4824      	ldr	r0, [pc, #144]	@ (8004268 <bekle+0x130>)
 80041d8:	f006 faba 	bl	800a750 <HAL_GPIO_ReadPin>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d109      	bne.n	80041f6 <bekle+0xbe>
 80041e2:	4b1e      	ldr	r3, [pc, #120]	@ (800425c <bekle+0x124>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004260 <bekle+0x128>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d0ef      	beq.n	80041ce <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80041ee:	e002      	b.n	80041f6 <bekle+0xbe>
    	butonKontrol = 1;
 80041f0:	4b1c      	ldr	r3, [pc, #112]	@ (8004264 <bekle+0x12c>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80041f6:	2180      	movs	r1, #128	@ 0x80
 80041f8:	481c      	ldr	r0, [pc, #112]	@ (800426c <bekle+0x134>)
 80041fa:	f006 faa9 	bl	800a750 <HAL_GPIO_ReadPin>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d109      	bne.n	8004218 <bekle+0xe0>
 8004204:	4b15      	ldr	r3, [pc, #84]	@ (800425c <bekle+0x124>)
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	4b15      	ldr	r3, [pc, #84]	@ (8004260 <bekle+0x128>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d0ef      	beq.n	80041f0 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004210:	e002      	b.n	8004218 <bekle+0xe0>
    	butonKontrol = 1;
 8004212:	4b14      	ldr	r3, [pc, #80]	@ (8004264 <bekle+0x12c>)
 8004214:	2201      	movs	r2, #1
 8004216:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004218:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800421c:	4813      	ldr	r0, [pc, #76]	@ (800426c <bekle+0x134>)
 800421e:	f006 fa97 	bl	800a750 <HAL_GPIO_ReadPin>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d109      	bne.n	800423c <bekle+0x104>
 8004228:	4b0c      	ldr	r3, [pc, #48]	@ (800425c <bekle+0x124>)
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	4b0c      	ldr	r3, [pc, #48]	@ (8004260 <bekle+0x128>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	429a      	cmp	r2, r3
 8004232:	d0ee      	beq.n	8004212 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004234:	e002      	b.n	800423c <bekle+0x104>
    	butonKontrol = 1;
 8004236:	4b0b      	ldr	r3, [pc, #44]	@ (8004264 <bekle+0x12c>)
 8004238:	2201      	movs	r2, #1
 800423a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800423c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004240:	480a      	ldr	r0, [pc, #40]	@ (800426c <bekle+0x134>)
 8004242:	f006 fa85 	bl	800a750 <HAL_GPIO_ReadPin>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d105      	bne.n	8004258 <bekle+0x120>
 800424c:	4b03      	ldr	r3, [pc, #12]	@ (800425c <bekle+0x124>)
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	4b03      	ldr	r3, [pc, #12]	@ (8004260 <bekle+0x128>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d0ee      	beq.n	8004236 <bekle+0xfe>
    }

}
 8004258:	bf00      	nop
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20001094 	.word	0x20001094
 8004260:	2000109c 	.word	0x2000109c
 8004264:	200010eb 	.word	0x200010eb
 8004268:	40010800 	.word	0x40010800
 800426c:	40011000 	.word	0x40011000

08004270 <buttonCheck>:

uint8_t buttonCheck(void) {
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8004274:	2101      	movs	r1, #1
 8004276:	4815      	ldr	r0, [pc, #84]	@ (80042cc <buttonCheck+0x5c>)
 8004278:	f006 fa6a 	bl	800a750 <HAL_GPIO_ReadPin>
 800427c:	4603      	mov	r3, r0
 800427e:	2b01      	cmp	r3, #1
 8004280:	d01b      	beq.n	80042ba <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8004282:	2108      	movs	r1, #8
 8004284:	4812      	ldr	r0, [pc, #72]	@ (80042d0 <buttonCheck+0x60>)
 8004286:	f006 fa63 	bl	800a750 <HAL_GPIO_ReadPin>
 800428a:	4603      	mov	r3, r0
 800428c:	2b01      	cmp	r3, #1
 800428e:	d014      	beq.n	80042ba <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8004290:	2102      	movs	r1, #2
 8004292:	480e      	ldr	r0, [pc, #56]	@ (80042cc <buttonCheck+0x5c>)
 8004294:	f006 fa5c 	bl	800a750 <HAL_GPIO_ReadPin>
 8004298:	4603      	mov	r3, r0
 800429a:	2b01      	cmp	r3, #1
 800429c:	d00d      	beq.n	80042ba <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 800429e:	2104      	movs	r1, #4
 80042a0:	480a      	ldr	r0, [pc, #40]	@ (80042cc <buttonCheck+0x5c>)
 80042a2:	f006 fa55 	bl	800a750 <HAL_GPIO_ReadPin>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d006      	beq.n	80042ba <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 80042ac:	2108      	movs	r1, #8
 80042ae:	4807      	ldr	r0, [pc, #28]	@ (80042cc <buttonCheck+0x5c>)
 80042b0:	f006 fa4e 	bl	800a750 <HAL_GPIO_ReadPin>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d104      	bne.n	80042c4 <buttonCheck+0x54>
		backLightTimer = 0;
 80042ba:	4b06      	ldr	r3, [pc, #24]	@ (80042d4 <buttonCheck+0x64>)
 80042bc:	2200      	movs	r2, #0
 80042be:	601a      	str	r2, [r3, #0]
		return 1;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e000      	b.n	80042c6 <buttonCheck+0x56>
	}
	return 0;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	40010800 	.word	0x40010800
 80042d0:	40011000 	.word	0x40011000
 80042d4:	200010b0 	.word	0x200010b0

080042d8 <checkBasincSalteri>:

void checkBasincSalteri() {
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80042dc:	4b13      	ldr	r3, [pc, #76]	@ (800432c <checkBasincSalteri+0x54>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d102      	bne.n	80042ea <checkBasincSalteri+0x12>
		basincVar=1;
 80042e4:	4b12      	ldr	r3, [pc, #72]	@ (8004330 <checkBasincSalteri+0x58>)
 80042e6:	2201      	movs	r2, #1
 80042e8:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 80042ea:	4b10      	ldr	r3, [pc, #64]	@ (800432c <checkBasincSalteri+0x54>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d119      	bne.n	8004326 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80042f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042f6:	480f      	ldr	r0, [pc, #60]	@ (8004334 <checkBasincSalteri+0x5c>)
 80042f8:	f006 fa2a 	bl	800a750 <HAL_GPIO_ReadPin>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10a      	bne.n	8004318 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8004302:	4b0d      	ldr	r3, [pc, #52]	@ (8004338 <checkBasincSalteri+0x60>)
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	4b0d      	ldr	r3, [pc, #52]	@ (800433c <checkBasincSalteri+0x64>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d90a      	bls.n	8004326 <checkBasincSalteri+0x4e>
				basincVar=1;
 8004310:	4b07      	ldr	r3, [pc, #28]	@ (8004330 <checkBasincSalteri+0x58>)
 8004312:	2201      	movs	r2, #1
 8004314:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004316:	e006      	b.n	8004326 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004318:	4b07      	ldr	r3, [pc, #28]	@ (8004338 <checkBasincSalteri+0x60>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a07      	ldr	r2, [pc, #28]	@ (800433c <checkBasincSalteri+0x64>)
 800431e:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8004320:	4b03      	ldr	r3, [pc, #12]	@ (8004330 <checkBasincSalteri+0x58>)
 8004322:	2200      	movs	r2, #0
 8004324:	701a      	strb	r2, [r3, #0]
}
 8004326:	bf00      	nop
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	200010c3 	.word	0x200010c3
 8004330:	200010bf 	.word	0x200010bf
 8004334:	40011000 	.word	0x40011000
 8004338:	20001094 	.word	0x20001094
 800433c:	200010ac 	.word	0x200010ac

08004340 <checkBasGonder>:

void checkBasGonder() {
 8004340:	b480      	push	{r7}
 8004342:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004344:	4b1b      	ldr	r3, [pc, #108]	@ (80043b4 <checkBasGonder+0x74>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d10b      	bne.n	8004364 <checkBasGonder+0x24>
 800434c:	4b1a      	ldr	r3, [pc, #104]	@ (80043b8 <checkBasGonder+0x78>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <checkBasGonder+0x24>
 8004354:	4b19      	ldr	r3, [pc, #100]	@ (80043bc <checkBasGonder+0x7c>)
 8004356:	781b      	ldrb	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d103      	bne.n	8004364 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 800435c:	4b18      	ldr	r3, [pc, #96]	@ (80043c0 <checkBasGonder+0x80>)
 800435e:	2201      	movs	r2, #1
 8004360:	701a      	strb	r2, [r3, #0]
 8004362:	e009      	b.n	8004378 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004364:	4b14      	ldr	r3, [pc, #80]	@ (80043b8 <checkBasGonder+0x78>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	f083 0301 	eor.w	r3, r3, #1
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d002      	beq.n	8004378 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8004372:	4b13      	ldr	r3, [pc, #76]	@ (80043c0 <checkBasGonder+0x80>)
 8004374:	2200      	movs	r2, #0
 8004376:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004378:	4b0e      	ldr	r3, [pc, #56]	@ (80043b4 <checkBasGonder+0x74>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d10b      	bne.n	8004398 <checkBasGonder+0x58>
 8004380:	4b10      	ldr	r3, [pc, #64]	@ (80043c4 <checkBasGonder+0x84>)
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d007      	beq.n	8004398 <checkBasGonder+0x58>
 8004388:	4b0c      	ldr	r3, [pc, #48]	@ (80043bc <checkBasGonder+0x7c>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d103      	bne.n	8004398 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8004390:	4b0d      	ldr	r3, [pc, #52]	@ (80043c8 <checkBasGonder+0x88>)
 8004392:	2201      	movs	r2, #1
 8004394:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004396:	e009      	b.n	80043ac <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004398:	4b0a      	ldr	r3, [pc, #40]	@ (80043c4 <checkBasGonder+0x84>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	f083 0301 	eor.w	r3, r3, #1
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 80043a6:	4b08      	ldr	r3, [pc, #32]	@ (80043c8 <checkBasGonder+0x88>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	701a      	strb	r2, [r3, #0]
}
 80043ac:	bf00      	nop
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr
 80043b4:	200010bd 	.word	0x200010bd
 80043b8:	200010f1 	.word	0x200010f1
 80043bc:	200010cb 	.word	0x200010cb
 80043c0:	200010f8 	.word	0x200010f8
 80043c4:	200010f4 	.word	0x200010f4
 80043c8:	200010f9 	.word	0x200010f9

080043cc <checkKapiSecimleri>:

void checkKapiSecimleri() {
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 80043d0:	4b24      	ldr	r3, [pc, #144]	@ (8004464 <checkKapiSecimleri+0x98>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d102      	bne.n	80043de <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 80043d8:	4b23      	ldr	r3, [pc, #140]	@ (8004468 <checkKapiSecimleri+0x9c>)
 80043da:	2201      	movs	r2, #1
 80043dc:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 80043de:	4b21      	ldr	r3, [pc, #132]	@ (8004464 <checkKapiSecimleri+0x98>)
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d10e      	bne.n	8004404 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80043e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80043ea:	4820      	ldr	r0, [pc, #128]	@ (800446c <checkKapiSecimleri+0xa0>)
 80043ec:	f006 f9b0 	bl	800a750 <HAL_GPIO_ReadPin>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d103      	bne.n	80043fe <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 80043f6:	4b1c      	ldr	r3, [pc, #112]	@ (8004468 <checkKapiSecimleri+0x9c>)
 80043f8:	2201      	movs	r2, #1
 80043fa:	701a      	strb	r2, [r3, #0]
 80043fc:	e002      	b.n	8004404 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80043fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004468 <checkKapiSecimleri+0x9c>)
 8004400:	2200      	movs	r2, #0
 8004402:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004404:	4b17      	ldr	r3, [pc, #92]	@ (8004464 <checkKapiSecimleri+0x98>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	2b02      	cmp	r3, #2
 800440a:	d10e      	bne.n	800442a <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 800440c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004410:	4816      	ldr	r0, [pc, #88]	@ (800446c <checkKapiSecimleri+0xa0>)
 8004412:	f006 f99d 	bl	800a750 <HAL_GPIO_ReadPin>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d103      	bne.n	8004424 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 800441c:	4b12      	ldr	r3, [pc, #72]	@ (8004468 <checkKapiSecimleri+0x9c>)
 800441e:	2201      	movs	r2, #1
 8004420:	701a      	strb	r2, [r3, #0]
 8004422:	e002      	b.n	800442a <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004424:	4b10      	ldr	r3, [pc, #64]	@ (8004468 <checkKapiSecimleri+0x9c>)
 8004426:	2200      	movs	r2, #0
 8004428:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800442a:	4b0e      	ldr	r3, [pc, #56]	@ (8004464 <checkKapiSecimleri+0x98>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b03      	cmp	r3, #3
 8004430:	d116      	bne.n	8004460 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004432:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004436:	480d      	ldr	r0, [pc, #52]	@ (800446c <checkKapiSecimleri+0xa0>)
 8004438:	f006 f98a 	bl	800a750 <HAL_GPIO_ReadPin>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10b      	bne.n	800445a <checkKapiSecimleri+0x8e>
 8004442:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004446:	4809      	ldr	r0, [pc, #36]	@ (800446c <checkKapiSecimleri+0xa0>)
 8004448:	f006 f982 	bl	800a750 <HAL_GPIO_ReadPin>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d103      	bne.n	800445a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004452:	4b05      	ldr	r3, [pc, #20]	@ (8004468 <checkKapiSecimleri+0x9c>)
 8004454:	2201      	movs	r2, #1
 8004456:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004458:	e002      	b.n	8004460 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 800445a:	4b03      	ldr	r3, [pc, #12]	@ (8004468 <checkKapiSecimleri+0x9c>)
 800445c:	2200      	movs	r2, #0
 800445e:	701a      	strb	r2, [r3, #0]
}
 8004460:	bf00      	nop
 8004462:	bd80      	pop	{r7, pc}
 8004464:	200010c4 	.word	0x200010c4
 8004468:	2000110e 	.word	0x2000110e
 800446c:	40010800 	.word	0x40010800

08004470 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004474:	4b66      	ldr	r3, [pc, #408]	@ (8004610 <checkAktifCalisma+0x1a0>)
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	f041 8343 	bne.w	8005b04 <checkAktifCalisma+0x1694>
 800447e:	4b65      	ldr	r3, [pc, #404]	@ (8004614 <checkAktifCalisma+0x1a4>)
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	f041 833e 	bne.w	8005b04 <checkAktifCalisma+0x1694>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8004488:	4b63      	ldr	r3, [pc, #396]	@ (8004618 <checkAktifCalisma+0x1a8>)
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d11a      	bne.n	80044c6 <checkAktifCalisma+0x56>
 8004490:	4b62      	ldr	r3, [pc, #392]	@ (800461c <checkAktifCalisma+0x1ac>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d116      	bne.n	80044c6 <checkAktifCalisma+0x56>
 8004498:	4b61      	ldr	r3, [pc, #388]	@ (8004620 <checkAktifCalisma+0x1b0>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00a      	beq.n	80044b6 <checkAktifCalisma+0x46>
 80044a0:	4b60      	ldr	r3, [pc, #384]	@ (8004624 <checkAktifCalisma+0x1b4>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	f083 0301 	eor.w	r3, r3, #1
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <checkAktifCalisma+0x46>
 80044ae:	4b5e      	ldr	r3, [pc, #376]	@ (8004628 <checkAktifCalisma+0x1b8>)
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d007      	beq.n	80044c6 <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 80044b6:	4b5d      	ldr	r3, [pc, #372]	@ (800462c <checkAktifCalisma+0x1bc>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d01c      	beq.n	80044f8 <checkAktifCalisma+0x88>
 80044be:	4b5c      	ldr	r3, [pc, #368]	@ (8004630 <checkAktifCalisma+0x1c0>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d118      	bne.n	80044f8 <checkAktifCalisma+0x88>
 80044c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004634 <checkAktifCalisma+0x1c4>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d103      	bne.n	80044d6 <checkAktifCalisma+0x66>
 80044ce:	4b5a      	ldr	r3, [pc, #360]	@ (8004638 <checkAktifCalisma+0x1c8>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d010      	beq.n	80044f8 <checkAktifCalisma+0x88>
 80044d6:	4b59      	ldr	r3, [pc, #356]	@ (800463c <checkAktifCalisma+0x1cc>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00c      	beq.n	80044f8 <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80044de:	2201      	movs	r2, #1
 80044e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80044e4:	4856      	ldr	r0, [pc, #344]	@ (8004640 <checkAktifCalisma+0x1d0>)
 80044e6:	f006 f94a 	bl	800a77e <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 80044ea:	4b56      	ldr	r3, [pc, #344]	@ (8004644 <checkAktifCalisma+0x1d4>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 80044f0:	4b55      	ldr	r3, [pc, #340]	@ (8004648 <checkAktifCalisma+0x1d8>)
 80044f2:	2201      	movs	r2, #1
 80044f4:	701a      	strb	r2, [r3, #0]
 80044f6:	e008      	b.n	800450a <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80044f8:	2200      	movs	r2, #0
 80044fa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80044fe:	4850      	ldr	r0, [pc, #320]	@ (8004640 <checkAktifCalisma+0x1d0>)
 8004500:	f006 f93d 	bl	800a77e <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8004504:	4b4f      	ldr	r3, [pc, #316]	@ (8004644 <checkAktifCalisma+0x1d4>)
 8004506:	2200      	movs	r2, #0
 8004508:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 800450a:	4b42      	ldr	r3, [pc, #264]	@ (8004614 <checkAktifCalisma+0x1a4>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d164      	bne.n	80045dc <checkAktifCalisma+0x16c>
 8004512:	4b49      	ldr	r3, [pc, #292]	@ (8004638 <checkAktifCalisma+0x1c8>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d103      	bne.n	8004522 <checkAktifCalisma+0xb2>
 800451a:	4b46      	ldr	r3, [pc, #280]	@ (8004634 <checkAktifCalisma+0x1c4>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d05c      	beq.n	80045dc <checkAktifCalisma+0x16c>
 8004522:	4b46      	ldr	r3, [pc, #280]	@ (800463c <checkAktifCalisma+0x1cc>)
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d058      	beq.n	80045dc <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800452a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800452e:	4844      	ldr	r0, [pc, #272]	@ (8004640 <checkAktifCalisma+0x1d0>)
 8004530:	f006 f90e 	bl	800a750 <HAL_GPIO_ReadPin>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <checkAktifCalisma+0xd2>
 800453a:	4b44      	ldr	r3, [pc, #272]	@ (800464c <checkAktifCalisma+0x1dc>)
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d04c      	beq.n	80045dc <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004542:	2102      	movs	r1, #2
 8004544:	4842      	ldr	r0, [pc, #264]	@ (8004650 <checkAktifCalisma+0x1e0>)
 8004546:	f006 f903 	bl	800a750 <HAL_GPIO_ReadPin>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d145      	bne.n	80045dc <checkAktifCalisma+0x16c>
							&& (basincVar)
 8004550:	4b40      	ldr	r3, [pc, #256]	@ (8004654 <checkAktifCalisma+0x1e4>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d041      	beq.n	80045dc <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004558:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800455c:	4838      	ldr	r0, [pc, #224]	@ (8004640 <checkAktifCalisma+0x1d0>)
 800455e:	f006 f8f7 	bl	800a750 <HAL_GPIO_ReadPin>
 8004562:	4603      	mov	r3, r0
 8004564:	2b01      	cmp	r3, #1
 8004566:	d10e      	bne.n	8004586 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004568:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800456c:	4834      	ldr	r0, [pc, #208]	@ (8004640 <checkAktifCalisma+0x1d0>)
 800456e:	f006 f8ef 	bl	800a750 <HAL_GPIO_ReadPin>
 8004572:	4603      	mov	r3, r0
 8004574:	2b01      	cmp	r3, #1
 8004576:	d106      	bne.n	8004586 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004578:	2140      	movs	r1, #64	@ 0x40
 800457a:	4835      	ldr	r0, [pc, #212]	@ (8004650 <checkAktifCalisma+0x1e0>)
 800457c:	f006 f8e8 	bl	800a750 <HAL_GPIO_ReadPin>
 8004580:	4603      	mov	r3, r0
 8004582:	2b01      	cmp	r3, #1
 8004584:	d003      	beq.n	800458e <checkAktifCalisma+0x11e>
 8004586:	4b24      	ldr	r3, [pc, #144]	@ (8004618 <checkAktifCalisma+0x1a8>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d026      	beq.n	80045dc <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 800458e:	4b24      	ldr	r3, [pc, #144]	@ (8004620 <checkAktifCalisma+0x1b0>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	f083 0301 	eor.w	r3, r3, #1
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d01f      	beq.n	80045dc <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 800459c:	4b1f      	ldr	r3, [pc, #124]	@ (800461c <checkAktifCalisma+0x1ac>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	f083 0301 	eor.w	r3, r3, #1
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d018      	beq.n	80045dc <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 80045aa:	4b20      	ldr	r3, [pc, #128]	@ (800462c <checkAktifCalisma+0x1bc>)
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	f083 0301 	eor.w	r3, r3, #1
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d011      	beq.n	80045dc <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 80045b8:	4b27      	ldr	r3, [pc, #156]	@ (8004658 <checkAktifCalisma+0x1e8>)
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	f083 0301 	eor.w	r3, r3, #1
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 80045c6:	4b25      	ldr	r3, [pc, #148]	@ (800465c <checkAktifCalisma+0x1ec>)
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	f083 0301 	eor.w	r3, r3, #1
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 80045d4:	4b10      	ldr	r3, [pc, #64]	@ (8004618 <checkAktifCalisma+0x1a8>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	701a      	strb	r2, [r3, #0]
 80045da:	e002      	b.n	80045e2 <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 80045dc:	4b0e      	ldr	r3, [pc, #56]	@ (8004618 <checkAktifCalisma+0x1a8>)
 80045de:	2200      	movs	r2, #0
 80045e0:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80045e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004618 <checkAktifCalisma+0x1a8>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d03c      	beq.n	8004664 <checkAktifCalisma+0x1f4>
 80045ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80045ee:	4818      	ldr	r0, [pc, #96]	@ (8004650 <checkAktifCalisma+0x1e0>)
 80045f0:	f006 f8ae 	bl	800a750 <HAL_GPIO_ReadPin>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d134      	bne.n	8004664 <checkAktifCalisma+0x1f4>
 80045fa:	4b19      	ldr	r3, [pc, #100]	@ (8004660 <checkAktifCalisma+0x1f0>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d030      	beq.n	8004664 <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8004602:	2201      	movs	r2, #1
 8004604:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004608:	480d      	ldr	r0, [pc, #52]	@ (8004640 <checkAktifCalisma+0x1d0>)
 800460a:	f006 f8b8 	bl	800a77e <HAL_GPIO_WritePin>
 800460e:	e02f      	b.n	8004670 <checkAktifCalisma+0x200>
 8004610:	200010da 	.word	0x200010da
 8004614:	200010d9 	.word	0x200010d9
 8004618:	200010f1 	.word	0x200010f1
 800461c:	200010f2 	.word	0x200010f2
 8004620:	200010f4 	.word	0x200010f4
 8004624:	200010ec 	.word	0x200010ec
 8004628:	200010cf 	.word	0x200010cf
 800462c:	200010f3 	.word	0x200010f3
 8004630:	200010ce 	.word	0x200010ce
 8004634:	2000110d 	.word	0x2000110d
 8004638:	20001120 	.word	0x20001120
 800463c:	2000110e 	.word	0x2000110e
 8004640:	40010c00 	.word	0x40010c00
 8004644:	2000110f 	.word	0x2000110f
 8004648:	200010fb 	.word	0x200010fb
 800464c:	200010f8 	.word	0x200010f8
 8004650:	40011000 	.word	0x40011000
 8004654:	200010bf 	.word	0x200010bf
 8004658:	200010f6 	.word	0x200010f6
 800465c:	200010f7 	.word	0x200010f7
 8004660:	200010ca 	.word	0x200010ca
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004664:	2200      	movs	r2, #0
 8004666:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800466a:	4865      	ldr	r0, [pc, #404]	@ (8004800 <checkAktifCalisma+0x390>)
 800466c:	f006 f887 	bl	800a77e <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8004670:	4b64      	ldr	r3, [pc, #400]	@ (8004804 <checkAktifCalisma+0x394>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d013      	beq.n	80046a0 <checkAktifCalisma+0x230>
 8004678:	4b63      	ldr	r3, [pc, #396]	@ (8004808 <checkAktifCalisma+0x398>)
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d007      	beq.n	8004690 <checkAktifCalisma+0x220>
 8004680:	4b61      	ldr	r3, [pc, #388]	@ (8004808 <checkAktifCalisma+0x398>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b02      	cmp	r3, #2
 8004686:	d003      	beq.n	8004690 <checkAktifCalisma+0x220>
 8004688:	4b60      	ldr	r3, [pc, #384]	@ (800480c <checkAktifCalisma+0x39c>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d107      	bne.n	80046a0 <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8004690:	2201      	movs	r2, #1
 8004692:	2104      	movs	r1, #4
 8004694:	485a      	ldr	r0, [pc, #360]	@ (8004800 <checkAktifCalisma+0x390>)
 8004696:	f006 f872 	bl	800a77e <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 800469a:	4b5d      	ldr	r3, [pc, #372]	@ (8004810 <checkAktifCalisma+0x3a0>)
 800469c:	2201      	movs	r2, #1
 800469e:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 80046a0:	4b5b      	ldr	r3, [pc, #364]	@ (8004810 <checkAktifCalisma+0x3a0>)
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d033      	beq.n	8004710 <checkAktifCalisma+0x2a0>
 80046a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80046ac:	4854      	ldr	r0, [pc, #336]	@ (8004800 <checkAktifCalisma+0x390>)
 80046ae:	f006 f84f 	bl	800a750 <HAL_GPIO_ReadPin>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d106      	bne.n	80046c6 <checkAktifCalisma+0x256>
 80046b8:	4b56      	ldr	r3, [pc, #344]	@ (8004814 <checkAktifCalisma+0x3a4>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	f083 0301 	eor.w	r3, r3, #1
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <checkAktifCalisma+0x264>
 80046c6:	2102      	movs	r1, #2
 80046c8:	4853      	ldr	r0, [pc, #332]	@ (8004818 <checkAktifCalisma+0x3a8>)
 80046ca:	f006 f841 	bl	800a750 <HAL_GPIO_ReadPin>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d11d      	bne.n	8004710 <checkAktifCalisma+0x2a0>
 80046d4:	4b51      	ldr	r3, [pc, #324]	@ (800481c <checkAktifCalisma+0x3ac>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d103      	bne.n	80046e4 <checkAktifCalisma+0x274>
 80046dc:	4b50      	ldr	r3, [pc, #320]	@ (8004820 <checkAktifCalisma+0x3b0>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d015      	beq.n	8004710 <checkAktifCalisma+0x2a0>
 80046e4:	4b4f      	ldr	r3, [pc, #316]	@ (8004824 <checkAktifCalisma+0x3b4>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d011      	beq.n	8004710 <checkAktifCalisma+0x2a0>
 80046ec:	4b4e      	ldr	r3, [pc, #312]	@ (8004828 <checkAktifCalisma+0x3b8>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d00d      	beq.n	8004710 <checkAktifCalisma+0x2a0>
 80046f4:	4b4d      	ldr	r3, [pc, #308]	@ (800482c <checkAktifCalisma+0x3bc>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	f083 0301 	eor.w	r3, r3, #1
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d006      	beq.n	8004710 <checkAktifCalisma+0x2a0>
					timer2=millis;
 8004702:	4b4b      	ldr	r3, [pc, #300]	@ (8004830 <checkAktifCalisma+0x3c0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a4b      	ldr	r2, [pc, #300]	@ (8004834 <checkAktifCalisma+0x3c4>)
 8004708:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 800470a:	4b48      	ldr	r3, [pc, #288]	@ (800482c <checkAktifCalisma+0x3bc>)
 800470c:	2201      	movs	r2, #1
 800470e:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 8004710:	4b47      	ldr	r3, [pc, #284]	@ (8004830 <checkAktifCalisma+0x3c0>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4b47      	ldr	r3, [pc, #284]	@ (8004834 <checkAktifCalisma+0x3c4>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	4a47      	ldr	r2, [pc, #284]	@ (8004838 <checkAktifCalisma+0x3c8>)
 800471c:	7812      	ldrb	r2, [r2, #0]
 800471e:	4293      	cmp	r3, r2
 8004720:	d303      	bcc.n	800472a <checkAktifCalisma+0x2ba>
 8004722:	4b42      	ldr	r3, [pc, #264]	@ (800482c <checkAktifCalisma+0x3bc>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d118      	bne.n	800475c <checkAktifCalisma+0x2ec>
 800472a:	4b3c      	ldr	r3, [pc, #240]	@ (800481c <checkAktifCalisma+0x3ac>)
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	f083 0301 	eor.w	r3, r3, #1
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d006      	beq.n	8004746 <checkAktifCalisma+0x2d6>
 8004738:	4b39      	ldr	r3, [pc, #228]	@ (8004820 <checkAktifCalisma+0x3b0>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	f083 0301 	eor.w	r3, r3, #1
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d10a      	bne.n	800475c <checkAktifCalisma+0x2ec>
 8004746:	4b37      	ldr	r3, [pc, #220]	@ (8004824 <checkAktifCalisma+0x3b4>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	f083 0301 	eor.w	r3, r3, #1
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d103      	bne.n	800475c <checkAktifCalisma+0x2ec>
 8004754:	4b34      	ldr	r3, [pc, #208]	@ (8004828 <checkAktifCalisma+0x3b8>)
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10a      	bne.n	8004772 <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800475c:	2200      	movs	r2, #0
 800475e:	2104      	movs	r1, #4
 8004760:	4827      	ldr	r0, [pc, #156]	@ (8004800 <checkAktifCalisma+0x390>)
 8004762:	f006 f80c 	bl	800a77e <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 8004766:	4b2a      	ldr	r3, [pc, #168]	@ (8004810 <checkAktifCalisma+0x3a0>)
 8004768:	2200      	movs	r2, #0
 800476a:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 800476c:	4b2f      	ldr	r3, [pc, #188]	@ (800482c <checkAktifCalisma+0x3bc>)
 800476e:	2200      	movs	r2, #0
 8004770:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 8004772:	4b32      	ldr	r3, [pc, #200]	@ (800483c <checkAktifCalisma+0x3cc>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d102      	bne.n	8004780 <checkAktifCalisma+0x310>
					cerceveVar=1;
 800477a:	4b31      	ldr	r3, [pc, #196]	@ (8004840 <checkAktifCalisma+0x3d0>)
 800477c:	2201      	movs	r2, #1
 800477e:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004780:	4b2e      	ldr	r3, [pc, #184]	@ (800483c <checkAktifCalisma+0x3cc>)
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d116      	bne.n	80047b6 <checkAktifCalisma+0x346>
 8004788:	4b2e      	ldr	r3, [pc, #184]	@ (8004844 <checkAktifCalisma+0x3d4>)
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d112      	bne.n	80047b6 <checkAktifCalisma+0x346>
 8004790:	2101      	movs	r1, #1
 8004792:	4821      	ldr	r0, [pc, #132]	@ (8004818 <checkAktifCalisma+0x3a8>)
 8004794:	f005 ffdc 	bl	800a750 <HAL_GPIO_ReadPin>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10b      	bne.n	80047b6 <checkAktifCalisma+0x346>
 800479e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80047a2:	4817      	ldr	r0, [pc, #92]	@ (8004800 <checkAktifCalisma+0x390>)
 80047a4:	f005 ffd4 	bl	800a750 <HAL_GPIO_ReadPin>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d103      	bne.n	80047b6 <checkAktifCalisma+0x346>
					cerceveVar=1;
 80047ae:	4b24      	ldr	r3, [pc, #144]	@ (8004840 <checkAktifCalisma+0x3d0>)
 80047b0:	2201      	movs	r2, #1
 80047b2:	701a      	strb	r2, [r3, #0]
 80047b4:	e011      	b.n	80047da <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80047b6:	4b21      	ldr	r3, [pc, #132]	@ (800483c <checkAktifCalisma+0x3cc>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d10d      	bne.n	80047da <checkAktifCalisma+0x36a>
 80047be:	2101      	movs	r1, #1
 80047c0:	4815      	ldr	r0, [pc, #84]	@ (8004818 <checkAktifCalisma+0x3a8>)
 80047c2:	f005 ffc5 	bl	800a750 <HAL_GPIO_ReadPin>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d106      	bne.n	80047da <checkAktifCalisma+0x36a>
 80047cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004844 <checkAktifCalisma+0x3d4>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d102      	bne.n	80047da <checkAktifCalisma+0x36a>
					cerceveVar=0;
 80047d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004840 <checkAktifCalisma+0x3d0>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 80047da:	4b18      	ldr	r3, [pc, #96]	@ (800483c <checkAktifCalisma+0x3cc>)
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d135      	bne.n	800484e <checkAktifCalisma+0x3de>
 80047e2:	4b18      	ldr	r3, [pc, #96]	@ (8004844 <checkAktifCalisma+0x3d4>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d131      	bne.n	800484e <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80047ea:	2101      	movs	r1, #1
 80047ec:	480a      	ldr	r0, [pc, #40]	@ (8004818 <checkAktifCalisma+0x3a8>)
 80047ee:	f005 ffaf 	bl	800a750 <HAL_GPIO_ReadPin>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d127      	bne.n	8004848 <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 80047f8:	4b11      	ldr	r3, [pc, #68]	@ (8004840 <checkAktifCalisma+0x3d0>)
 80047fa:	2201      	movs	r2, #1
 80047fc:	701a      	strb	r2, [r3, #0]
 80047fe:	e026      	b.n	800484e <checkAktifCalisma+0x3de>
 8004800:	40010c00 	.word	0x40010c00
 8004804:	200010f1 	.word	0x200010f1
 8004808:	200010cb 	.word	0x200010cb
 800480c:	200010cf 	.word	0x200010cf
 8004810:	200010f5 	.word	0x200010f5
 8004814:	200010f8 	.word	0x200010f8
 8004818:	40011000 	.word	0x40011000
 800481c:	2000110d 	.word	0x2000110d
 8004820:	20001120 	.word	0x20001120
 8004824:	2000110e 	.word	0x2000110e
 8004828:	200010bf 	.word	0x200010bf
 800482c:	200010ed 	.word	0x200010ed
 8004830:	20001094 	.word	0x20001094
 8004834:	200010a0 	.word	0x200010a0
 8004838:	200010d0 	.word	0x200010d0
 800483c:	200010c0 	.word	0x200010c0
 8004840:	20001112 	.word	0x20001112
 8004844:	200010bd 	.word	0x200010bd
					} else {
						cerceveVar=0;
 8004848:	4b7f      	ldr	r3, [pc, #508]	@ (8004a48 <checkAktifCalisma+0x5d8>)
 800484a:	2200      	movs	r2, #0
 800484c:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 800484e:	4b7f      	ldr	r3, [pc, #508]	@ (8004a4c <checkAktifCalisma+0x5dc>)
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d17c      	bne.n	8004950 <checkAktifCalisma+0x4e0>
 8004856:	4b7e      	ldr	r3, [pc, #504]	@ (8004a50 <checkAktifCalisma+0x5e0>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d078      	beq.n	8004950 <checkAktifCalisma+0x4e0>
 800485e:	4b7d      	ldr	r3, [pc, #500]	@ (8004a54 <checkAktifCalisma+0x5e4>)
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d074      	beq.n	8004950 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8004866:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800486a:	487b      	ldr	r0, [pc, #492]	@ (8004a58 <checkAktifCalisma+0x5e8>)
 800486c:	f005 ff70 	bl	800a750 <HAL_GPIO_ReadPin>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <checkAktifCalisma+0x40e>
 8004876:	4b79      	ldr	r3, [pc, #484]	@ (8004a5c <checkAktifCalisma+0x5ec>)
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d068      	beq.n	8004950 <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800487e:	4b72      	ldr	r3, [pc, #456]	@ (8004a48 <checkAktifCalisma+0x5d8>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d064      	beq.n	8004950 <checkAktifCalisma+0x4e0>
 8004886:	4b76      	ldr	r3, [pc, #472]	@ (8004a60 <checkAktifCalisma+0x5f0>)
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	f083 0301 	eor.w	r3, r3, #1
 800488e:	b2db      	uxtb	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d05d      	beq.n	8004950 <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004894:	2104      	movs	r1, #4
 8004896:	4873      	ldr	r0, [pc, #460]	@ (8004a64 <checkAktifCalisma+0x5f4>)
 8004898:	f005 ff5a 	bl	800a750 <HAL_GPIO_ReadPin>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <checkAktifCalisma+0x43a>
 80048a2:	4b71      	ldr	r3, [pc, #452]	@ (8004a68 <checkAktifCalisma+0x5f8>)
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d152      	bne.n	8004950 <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80048aa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80048ae:	486a      	ldr	r0, [pc, #424]	@ (8004a58 <checkAktifCalisma+0x5e8>)
 80048b0:	f005 ff4e 	bl	800a750 <HAL_GPIO_ReadPin>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d10e      	bne.n	80048d8 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80048ba:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80048be:	4866      	ldr	r0, [pc, #408]	@ (8004a58 <checkAktifCalisma+0x5e8>)
 80048c0:	f005 ff46 	bl	800a750 <HAL_GPIO_ReadPin>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d106      	bne.n	80048d8 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80048ca:	2140      	movs	r1, #64	@ 0x40
 80048cc:	4865      	ldr	r0, [pc, #404]	@ (8004a64 <checkAktifCalisma+0x5f4>)
 80048ce:	f005 ff3f 	bl	800a750 <HAL_GPIO_ReadPin>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d003      	beq.n	80048e0 <checkAktifCalisma+0x470>
 80048d8:	4b64      	ldr	r3, [pc, #400]	@ (8004a6c <checkAktifCalisma+0x5fc>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d037      	beq.n	8004950 <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 80048e0:	4b63      	ldr	r3, [pc, #396]	@ (8004a70 <checkAktifCalisma+0x600>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	f083 0301 	eor.w	r3, r3, #1
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d030      	beq.n	8004950 <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 80048ee:	4b61      	ldr	r3, [pc, #388]	@ (8004a74 <checkAktifCalisma+0x604>)
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	f083 0301 	eor.w	r3, r3, #1
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d029      	beq.n	8004950 <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 80048fc:	4b5e      	ldr	r3, [pc, #376]	@ (8004a78 <checkAktifCalisma+0x608>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	f083 0301 	eor.w	r3, r3, #1
 8004904:	b2db      	uxtb	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d022      	beq.n	8004950 <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 800490a:	4b5c      	ldr	r3, [pc, #368]	@ (8004a7c <checkAktifCalisma+0x60c>)
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	f083 0301 	eor.w	r3, r3, #1
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01b      	beq.n	8004950 <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 8004918:	4b59      	ldr	r3, [pc, #356]	@ (8004a80 <checkAktifCalisma+0x610>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	f083 0301 	eor.w	r3, r3, #1
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d014      	beq.n	8004950 <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 8004926:	4b57      	ldr	r3, [pc, #348]	@ (8004a84 <checkAktifCalisma+0x614>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	f083 0301 	eor.w	r3, r3, #1
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00d      	beq.n	8004950 <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8004934:	2201      	movs	r2, #1
 8004936:	2102      	movs	r1, #2
 8004938:	4847      	ldr	r0, [pc, #284]	@ (8004a58 <checkAktifCalisma+0x5e8>)
 800493a:	f005 ff20 	bl	800a77e <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 800493e:	4b4b      	ldr	r3, [pc, #300]	@ (8004a6c <checkAktifCalisma+0x5fc>)
 8004940:	2201      	movs	r2, #1
 8004942:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 8004944:	4b50      	ldr	r3, [pc, #320]	@ (8004a88 <checkAktifCalisma+0x618>)
 8004946:	2201      	movs	r2, #1
 8004948:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 800494a:	4b50      	ldr	r3, [pc, #320]	@ (8004a8c <checkAktifCalisma+0x61c>)
 800494c:	2201      	movs	r2, #1
 800494e:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8004950:	4b46      	ldr	r3, [pc, #280]	@ (8004a6c <checkAktifCalisma+0x5fc>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d033      	beq.n	80049c0 <checkAktifCalisma+0x550>
 8004958:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800495c:	483e      	ldr	r0, [pc, #248]	@ (8004a58 <checkAktifCalisma+0x5e8>)
 800495e:	f005 fef7 	bl	800a750 <HAL_GPIO_ReadPin>
 8004962:	4603      	mov	r3, r0
 8004964:	2b01      	cmp	r3, #1
 8004966:	d106      	bne.n	8004976 <checkAktifCalisma+0x506>
 8004968:	4b3c      	ldr	r3, [pc, #240]	@ (8004a5c <checkAktifCalisma+0x5ec>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	f083 0301 	eor.w	r3, r3, #1
 8004970:	b2db      	uxtb	r3, r3
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10a      	bne.n	800498c <checkAktifCalisma+0x51c>
 8004976:	2104      	movs	r1, #4
 8004978:	483a      	ldr	r0, [pc, #232]	@ (8004a64 <checkAktifCalisma+0x5f4>)
 800497a:	f005 fee9 	bl	800a750 <HAL_GPIO_ReadPin>
 800497e:	4603      	mov	r3, r0
 8004980:	2b01      	cmp	r3, #1
 8004982:	d11d      	bne.n	80049c0 <checkAktifCalisma+0x550>
 8004984:	4b38      	ldr	r3, [pc, #224]	@ (8004a68 <checkAktifCalisma+0x5f8>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d019      	beq.n	80049c0 <checkAktifCalisma+0x550>
 800498c:	4b30      	ldr	r3, [pc, #192]	@ (8004a50 <checkAktifCalisma+0x5e0>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d015      	beq.n	80049c0 <checkAktifCalisma+0x550>
 8004994:	4b2f      	ldr	r3, [pc, #188]	@ (8004a54 <checkAktifCalisma+0x5e4>)
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d011      	beq.n	80049c0 <checkAktifCalisma+0x550>
 800499c:	4b2a      	ldr	r3, [pc, #168]	@ (8004a48 <checkAktifCalisma+0x5d8>)
 800499e:	781b      	ldrb	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00d      	beq.n	80049c0 <checkAktifCalisma+0x550>
 80049a4:	4b3a      	ldr	r3, [pc, #232]	@ (8004a90 <checkAktifCalisma+0x620>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	f083 0301 	eor.w	r3, r3, #1
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d006      	beq.n	80049c0 <checkAktifCalisma+0x550>
					timer2=millis;
 80049b2:	4b38      	ldr	r3, [pc, #224]	@ (8004a94 <checkAktifCalisma+0x624>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a38      	ldr	r2, [pc, #224]	@ (8004a98 <checkAktifCalisma+0x628>)
 80049b8:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 80049ba:	4b35      	ldr	r3, [pc, #212]	@ (8004a90 <checkAktifCalisma+0x620>)
 80049bc:	2201      	movs	r2, #1
 80049be:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80049c0:	4b34      	ldr	r3, [pc, #208]	@ (8004a94 <checkAktifCalisma+0x624>)
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	4b34      	ldr	r3, [pc, #208]	@ (8004a98 <checkAktifCalisma+0x628>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	4a34      	ldr	r2, [pc, #208]	@ (8004a9c <checkAktifCalisma+0x62c>)
 80049cc:	7812      	ldrb	r2, [r2, #0]
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d303      	bcc.n	80049da <checkAktifCalisma+0x56a>
 80049d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004a90 <checkAktifCalisma+0x620>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d114      	bne.n	8004a04 <checkAktifCalisma+0x594>
 80049da:	4b1d      	ldr	r3, [pc, #116]	@ (8004a50 <checkAktifCalisma+0x5e0>)
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	f083 0301 	eor.w	r3, r3, #1
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10d      	bne.n	8004a04 <checkAktifCalisma+0x594>
 80049e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004a54 <checkAktifCalisma+0x5e4>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	f083 0301 	eor.w	r3, r3, #1
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <checkAktifCalisma+0x594>
 80049f6:	4b14      	ldr	r3, [pc, #80]	@ (8004a48 <checkAktifCalisma+0x5d8>)
 80049f8:	781b      	ldrb	r3, [r3, #0]
 80049fa:	f083 0301 	eor.w	r3, r3, #1
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004a04:	2200      	movs	r2, #0
 8004a06:	2102      	movs	r1, #2
 8004a08:	4813      	ldr	r0, [pc, #76]	@ (8004a58 <checkAktifCalisma+0x5e8>)
 8004a0a:	f005 feb8 	bl	800a77e <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 8004a0e:	4b17      	ldr	r3, [pc, #92]	@ (8004a6c <checkAktifCalisma+0x5fc>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8004a14:	4b1e      	ldr	r3, [pc, #120]	@ (8004a90 <checkAktifCalisma+0x620>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8004a1a:	4b14      	ldr	r3, [pc, #80]	@ (8004a6c <checkAktifCalisma+0x5fc>)
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d040      	beq.n	8004aa4 <checkAktifCalisma+0x634>
 8004a22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a26:	480f      	ldr	r0, [pc, #60]	@ (8004a64 <checkAktifCalisma+0x5f4>)
 8004a28:	f005 fe92 	bl	800a750 <HAL_GPIO_ReadPin>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d138      	bne.n	8004aa4 <checkAktifCalisma+0x634>
 8004a32:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa0 <checkAktifCalisma+0x630>)
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d034      	beq.n	8004aa4 <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	4806      	ldr	r0, [pc, #24]	@ (8004a58 <checkAktifCalisma+0x5e8>)
 8004a40:	f005 fe9d 	bl	800a77e <HAL_GPIO_WritePin>
 8004a44:	e033      	b.n	8004aae <checkAktifCalisma+0x63e>
 8004a46:	bf00      	nop
 8004a48:	20001112 	.word	0x20001112
 8004a4c:	200010d9 	.word	0x200010d9
 8004a50:	2000110d 	.word	0x2000110d
 8004a54:	2000110e 	.word	0x2000110e
 8004a58:	40010c00 	.word	0x40010c00
 8004a5c:	200010f9 	.word	0x200010f9
 8004a60:	2000110c 	.word	0x2000110c
 8004a64:	40011000 	.word	0x40011000
 8004a68:	200010c2 	.word	0x200010c2
 8004a6c:	200010f4 	.word	0x200010f4
 8004a70:	200010f1 	.word	0x200010f1
 8004a74:	200010f5 	.word	0x200010f5
 8004a78:	200010f2 	.word	0x200010f2
 8004a7c:	200010f3 	.word	0x200010f3
 8004a80:	200010f6 	.word	0x200010f6
 8004a84:	200010f7 	.word	0x200010f7
 8004a88:	200010fc 	.word	0x200010fc
 8004a8c:	2000111c 	.word	0x2000111c
 8004a90:	200010ec 	.word	0x200010ec
 8004a94:	20001094 	.word	0x20001094
 8004a98:	200010a0 	.word	0x200010a0
 8004a9c:	200010d1 	.word	0x200010d1
 8004aa0:	200010c1 	.word	0x200010c1
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	4836      	ldr	r0, [pc, #216]	@ (8004b84 <checkAktifCalisma+0x714>)
 8004aaa:	f005 fe68 	bl	800a77e <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8004aae:	4b36      	ldr	r3, [pc, #216]	@ (8004b88 <checkAktifCalisma+0x718>)
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f040 8080 	bne.w	8004bb8 <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004ab8:	4b34      	ldr	r3, [pc, #208]	@ (8004b8c <checkAktifCalisma+0x71c>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d003      	beq.n	8004ac8 <checkAktifCalisma+0x658>
 8004ac0:	4b32      	ldr	r3, [pc, #200]	@ (8004b8c <checkAktifCalisma+0x71c>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d177      	bne.n	8004bb8 <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 8004ac8:	4b31      	ldr	r3, [pc, #196]	@ (8004b90 <checkAktifCalisma+0x720>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d073      	beq.n	8004bb8 <checkAktifCalisma+0x748>
 8004ad0:	4b30      	ldr	r3, [pc, #192]	@ (8004b94 <checkAktifCalisma+0x724>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d06f      	beq.n	8004bb8 <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8004ad8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004adc:	4829      	ldr	r0, [pc, #164]	@ (8004b84 <checkAktifCalisma+0x714>)
 8004ade:	f005 fe37 	bl	800a750 <HAL_GPIO_ReadPin>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d167      	bne.n	8004bb8 <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8004ae8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004aec:	482a      	ldr	r0, [pc, #168]	@ (8004b98 <checkAktifCalisma+0x728>)
 8004aee:	f005 fe2f 	bl	800a750 <HAL_GPIO_ReadPin>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d003      	beq.n	8004b00 <checkAktifCalisma+0x690>
 8004af8:	4b28      	ldr	r3, [pc, #160]	@ (8004b9c <checkAktifCalisma+0x72c>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d15b      	bne.n	8004bb8 <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8004b00:	2140      	movs	r1, #64	@ 0x40
 8004b02:	4825      	ldr	r0, [pc, #148]	@ (8004b98 <checkAktifCalisma+0x728>)
 8004b04:	f005 fe24 	bl	800a750 <HAL_GPIO_ReadPin>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d10f      	bne.n	8004b2e <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004b0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004b12:	481c      	ldr	r0, [pc, #112]	@ (8004b84 <checkAktifCalisma+0x714>)
 8004b14:	f005 fe1c 	bl	800a750 <HAL_GPIO_ReadPin>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d107      	bne.n	8004b2e <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8004b1e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004b22:	4818      	ldr	r0, [pc, #96]	@ (8004b84 <checkAktifCalisma+0x714>)
 8004b24:	f005 fe14 	bl	800a750 <HAL_GPIO_ReadPin>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d003      	beq.n	8004b36 <checkAktifCalisma+0x6c6>
 8004b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ba0 <checkAktifCalisma+0x730>)
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d040      	beq.n	8004bb8 <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 8004b36:	4b1b      	ldr	r3, [pc, #108]	@ (8004ba4 <checkAktifCalisma+0x734>)
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	f083 0301 	eor.w	r3, r3, #1
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d039      	beq.n	8004bb8 <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 8004b44:	4b18      	ldr	r3, [pc, #96]	@ (8004ba8 <checkAktifCalisma+0x738>)
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	f083 0301 	eor.w	r3, r3, #1
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d032      	beq.n	8004bb8 <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 8004b52:	4b16      	ldr	r3, [pc, #88]	@ (8004bac <checkAktifCalisma+0x73c>)
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	f083 0301 	eor.w	r3, r3, #1
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d02b      	beq.n	8004bb8 <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8004b60:	4b13      	ldr	r3, [pc, #76]	@ (8004bb0 <checkAktifCalisma+0x740>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	f083 0301 	eor.w	r3, r3, #1
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d024      	beq.n	8004bb8 <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 8004b6e:	4b11      	ldr	r3, [pc, #68]	@ (8004bb4 <checkAktifCalisma+0x744>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	f083 0301 	eor.w	r3, r3, #1
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d01d      	beq.n	8004bb8 <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8004b7c:	4b08      	ldr	r3, [pc, #32]	@ (8004ba0 <checkAktifCalisma+0x730>)
 8004b7e:	2201      	movs	r2, #1
 8004b80:	701a      	strb	r2, [r3, #0]
 8004b82:	e01c      	b.n	8004bbe <checkAktifCalisma+0x74e>
 8004b84:	40010c00 	.word	0x40010c00
 8004b88:	200010d9 	.word	0x200010d9
 8004b8c:	200010cb 	.word	0x200010cb
 8004b90:	2000110d 	.word	0x2000110d
 8004b94:	2000110e 	.word	0x2000110e
 8004b98:	40011000 	.word	0x40011000
 8004b9c:	200010cc 	.word	0x200010cc
 8004ba0:	200010f2 	.word	0x200010f2
 8004ba4:	200010f1 	.word	0x200010f1
 8004ba8:	200010f5 	.word	0x200010f5
 8004bac:	200010f4 	.word	0x200010f4
 8004bb0:	200010f3 	.word	0x200010f3
 8004bb4:	200010f7 	.word	0x200010f7
				} else {
					devmotoryukaricalisiyor=0;
 8004bb8:	4b64      	ldr	r3, [pc, #400]	@ (8004d4c <checkAktifCalisma+0x8dc>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8004bbe:	4b63      	ldr	r3, [pc, #396]	@ (8004d4c <checkAktifCalisma+0x8dc>)
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d007      	beq.n	8004bd6 <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	2120      	movs	r1, #32
 8004bca:	4861      	ldr	r0, [pc, #388]	@ (8004d50 <checkAktifCalisma+0x8e0>)
 8004bcc:	f005 fdd7 	bl	800a77e <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8004bd0:	4b60      	ldr	r3, [pc, #384]	@ (8004d54 <checkAktifCalisma+0x8e4>)
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8004bd6:	4b5f      	ldr	r3, [pc, #380]	@ (8004d54 <checkAktifCalisma+0x8e4>)
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d025      	beq.n	8004c2a <checkAktifCalisma+0x7ba>
 8004bde:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004be2:	485d      	ldr	r0, [pc, #372]	@ (8004d58 <checkAktifCalisma+0x8e8>)
 8004be4:	f005 fdb4 	bl	800a750 <HAL_GPIO_ReadPin>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d007      	beq.n	8004bfe <checkAktifCalisma+0x78e>
 8004bee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004bf2:	4857      	ldr	r0, [pc, #348]	@ (8004d50 <checkAktifCalisma+0x8e0>)
 8004bf4:	f005 fdac 	bl	800a750 <HAL_GPIO_ReadPin>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d115      	bne.n	8004c2a <checkAktifCalisma+0x7ba>
 8004bfe:	4b57      	ldr	r3, [pc, #348]	@ (8004d5c <checkAktifCalisma+0x8ec>)
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d011      	beq.n	8004c2a <checkAktifCalisma+0x7ba>
 8004c06:	4b56      	ldr	r3, [pc, #344]	@ (8004d60 <checkAktifCalisma+0x8f0>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00d      	beq.n	8004c2a <checkAktifCalisma+0x7ba>
 8004c0e:	4b55      	ldr	r3, [pc, #340]	@ (8004d64 <checkAktifCalisma+0x8f4>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	f083 0301 	eor.w	r3, r3, #1
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d006      	beq.n	8004c2a <checkAktifCalisma+0x7ba>
					timer2=millis;
 8004c1c:	4b52      	ldr	r3, [pc, #328]	@ (8004d68 <checkAktifCalisma+0x8f8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a52      	ldr	r2, [pc, #328]	@ (8004d6c <checkAktifCalisma+0x8fc>)
 8004c22:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8004c24:	4b4f      	ldr	r3, [pc, #316]	@ (8004d64 <checkAktifCalisma+0x8f4>)
 8004c26:	2201      	movs	r2, #1
 8004c28:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004c2a:	4b4f      	ldr	r3, [pc, #316]	@ (8004d68 <checkAktifCalisma+0x8f8>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	4b4f      	ldr	r3, [pc, #316]	@ (8004d6c <checkAktifCalisma+0x8fc>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	4a4e      	ldr	r2, [pc, #312]	@ (8004d70 <checkAktifCalisma+0x900>)
 8004c36:	7812      	ldrb	r2, [r2, #0]
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d303      	bcc.n	8004c44 <checkAktifCalisma+0x7d4>
 8004c3c:	4b49      	ldr	r3, [pc, #292]	@ (8004d64 <checkAktifCalisma+0x8f4>)
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10d      	bne.n	8004c60 <checkAktifCalisma+0x7f0>
 8004c44:	4b45      	ldr	r3, [pc, #276]	@ (8004d5c <checkAktifCalisma+0x8ec>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	f083 0301 	eor.w	r3, r3, #1
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <checkAktifCalisma+0x7f0>
 8004c52:	4b43      	ldr	r3, [pc, #268]	@ (8004d60 <checkAktifCalisma+0x8f0>)
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	f083 0301 	eor.w	r3, r3, #1
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004c60:	2200      	movs	r2, #0
 8004c62:	2120      	movs	r1, #32
 8004c64:	483a      	ldr	r0, [pc, #232]	@ (8004d50 <checkAktifCalisma+0x8e0>)
 8004c66:	f005 fd8a 	bl	800a77e <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8004c6a:	4b3a      	ldr	r3, [pc, #232]	@ (8004d54 <checkAktifCalisma+0x8e4>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8004c70:	4b3c      	ldr	r3, [pc, #240]	@ (8004d64 <checkAktifCalisma+0x8f4>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8004c76:	4b3f      	ldr	r3, [pc, #252]	@ (8004d74 <checkAktifCalisma+0x904>)
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	f040 8088 	bne.w	8004d90 <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004c80:	4b3d      	ldr	r3, [pc, #244]	@ (8004d78 <checkAktifCalisma+0x908>)
 8004c82:	781b      	ldrb	r3, [r3, #0]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d003      	beq.n	8004c90 <checkAktifCalisma+0x820>
 8004c88:	4b3b      	ldr	r3, [pc, #236]	@ (8004d78 <checkAktifCalisma+0x908>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d17f      	bne.n	8004d90 <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8004c90:	4b32      	ldr	r3, [pc, #200]	@ (8004d5c <checkAktifCalisma+0x8ec>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d07b      	beq.n	8004d90 <checkAktifCalisma+0x920>
 8004c98:	4b31      	ldr	r3, [pc, #196]	@ (8004d60 <checkAktifCalisma+0x8f0>)
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d077      	beq.n	8004d90 <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004ca0:	2140      	movs	r1, #64	@ 0x40
 8004ca2:	482b      	ldr	r0, [pc, #172]	@ (8004d50 <checkAktifCalisma+0x8e0>)
 8004ca4:	f005 fd54 	bl	800a750 <HAL_GPIO_ReadPin>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d170      	bne.n	8004d90 <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8004cae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004cb2:	4827      	ldr	r0, [pc, #156]	@ (8004d50 <checkAktifCalisma+0x8e0>)
 8004cb4:	f005 fd4c 	bl	800a750 <HAL_GPIO_ReadPin>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <checkAktifCalisma+0x856>
 8004cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8004d7c <checkAktifCalisma+0x90c>)
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d164      	bne.n	8004d90 <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004cc6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004cca:	4823      	ldr	r0, [pc, #140]	@ (8004d58 <checkAktifCalisma+0x8e8>)
 8004ccc:	f005 fd40 	bl	800a750 <HAL_GPIO_ReadPin>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d10f      	bne.n	8004cf6 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004cd6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004cda:	481f      	ldr	r0, [pc, #124]	@ (8004d58 <checkAktifCalisma+0x8e8>)
 8004cdc:	f005 fd38 	bl	800a750 <HAL_GPIO_ReadPin>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d107      	bne.n	8004cf6 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8004ce6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004cea:	481b      	ldr	r0, [pc, #108]	@ (8004d58 <checkAktifCalisma+0x8e8>)
 8004cec:	f005 fd30 	bl	800a750 <HAL_GPIO_ReadPin>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d003      	beq.n	8004cfe <checkAktifCalisma+0x88e>
 8004cf6:	4b22      	ldr	r3, [pc, #136]	@ (8004d80 <checkAktifCalisma+0x910>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d048      	beq.n	8004d90 <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 8004cfe:	4b21      	ldr	r3, [pc, #132]	@ (8004d84 <checkAktifCalisma+0x914>)
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	f083 0301 	eor.w	r3, r3, #1
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d041      	beq.n	8004d90 <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8004d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8004d88 <checkAktifCalisma+0x918>)
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	f083 0301 	eor.w	r3, r3, #1
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d03a      	beq.n	8004d90 <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8004d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8004d8c <checkAktifCalisma+0x91c>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	f083 0301 	eor.w	r3, r3, #1
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d033      	beq.n	8004d90 <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8004d28:	4b0a      	ldr	r3, [pc, #40]	@ (8004d54 <checkAktifCalisma+0x8e4>)
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	f083 0301 	eor.w	r3, r3, #1
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d02c      	beq.n	8004d90 <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 8004d36:	4b05      	ldr	r3, [pc, #20]	@ (8004d4c <checkAktifCalisma+0x8dc>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	f083 0301 	eor.w	r3, r3, #1
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d025      	beq.n	8004d90 <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 8004d44:	4b0e      	ldr	r3, [pc, #56]	@ (8004d80 <checkAktifCalisma+0x910>)
 8004d46:	2201      	movs	r2, #1
 8004d48:	701a      	strb	r2, [r3, #0]
 8004d4a:	e024      	b.n	8004d96 <checkAktifCalisma+0x926>
 8004d4c:	200010f2 	.word	0x200010f2
 8004d50:	40011000 	.word	0x40011000
 8004d54:	200010f6 	.word	0x200010f6
 8004d58:	40010c00 	.word	0x40010c00
 8004d5c:	2000110d 	.word	0x2000110d
 8004d60:	2000110e 	.word	0x2000110e
 8004d64:	200010ee 	.word	0x200010ee
 8004d68:	20001094 	.word	0x20001094
 8004d6c:	200010a0 	.word	0x200010a0
 8004d70:	200010d2 	.word	0x200010d2
 8004d74:	200010d9 	.word	0x200010d9
 8004d78:	200010cb 	.word	0x200010cb
 8004d7c:	200010cd 	.word	0x200010cd
 8004d80:	200010f3 	.word	0x200010f3
 8004d84:	200010f1 	.word	0x200010f1
 8004d88:	200010f5 	.word	0x200010f5
 8004d8c:	200010f4 	.word	0x200010f4
				} else {
					devmotorasagicalisiyor=0;
 8004d90:	4b96      	ldr	r3, [pc, #600]	@ (8004fec <checkAktifCalisma+0xb7c>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8004d96:	4b95      	ldr	r3, [pc, #596]	@ (8004fec <checkAktifCalisma+0xb7c>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d007      	beq.n	8004dae <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004d9e:	2201      	movs	r2, #1
 8004da0:	2110      	movs	r1, #16
 8004da2:	4893      	ldr	r0, [pc, #588]	@ (8004ff0 <checkAktifCalisma+0xb80>)
 8004da4:	f005 fceb 	bl	800a77e <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8004da8:	4b92      	ldr	r3, [pc, #584]	@ (8004ff4 <checkAktifCalisma+0xb84>)
 8004daa:	2201      	movs	r2, #1
 8004dac:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004dae:	4b91      	ldr	r3, [pc, #580]	@ (8004ff4 <checkAktifCalisma+0xb84>)
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d024      	beq.n	8004e00 <checkAktifCalisma+0x990>
 8004db6:	2140      	movs	r1, #64	@ 0x40
 8004db8:	488d      	ldr	r0, [pc, #564]	@ (8004ff0 <checkAktifCalisma+0xb80>)
 8004dba:	f005 fcc9 	bl	800a750 <HAL_GPIO_ReadPin>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d007      	beq.n	8004dd4 <checkAktifCalisma+0x964>
 8004dc4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004dc8:	4889      	ldr	r0, [pc, #548]	@ (8004ff0 <checkAktifCalisma+0xb80>)
 8004dca:	f005 fcc1 	bl	800a750 <HAL_GPIO_ReadPin>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d115      	bne.n	8004e00 <checkAktifCalisma+0x990>
 8004dd4:	4b88      	ldr	r3, [pc, #544]	@ (8004ff8 <checkAktifCalisma+0xb88>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d011      	beq.n	8004e00 <checkAktifCalisma+0x990>
 8004ddc:	4b87      	ldr	r3, [pc, #540]	@ (8004ffc <checkAktifCalisma+0xb8c>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00d      	beq.n	8004e00 <checkAktifCalisma+0x990>
 8004de4:	4b86      	ldr	r3, [pc, #536]	@ (8005000 <checkAktifCalisma+0xb90>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	f083 0301 	eor.w	r3, r3, #1
 8004dec:	b2db      	uxtb	r3, r3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d006      	beq.n	8004e00 <checkAktifCalisma+0x990>
					timer2=millis;
 8004df2:	4b84      	ldr	r3, [pc, #528]	@ (8005004 <checkAktifCalisma+0xb94>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a84      	ldr	r2, [pc, #528]	@ (8005008 <checkAktifCalisma+0xb98>)
 8004df8:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8004dfa:	4b81      	ldr	r3, [pc, #516]	@ (8005000 <checkAktifCalisma+0xb90>)
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004e00:	4b80      	ldr	r3, [pc, #512]	@ (8005004 <checkAktifCalisma+0xb94>)
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	4b80      	ldr	r3, [pc, #512]	@ (8005008 <checkAktifCalisma+0xb98>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	4a80      	ldr	r2, [pc, #512]	@ (800500c <checkAktifCalisma+0xb9c>)
 8004e0c:	7812      	ldrb	r2, [r2, #0]
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d303      	bcc.n	8004e1a <checkAktifCalisma+0x9aa>
 8004e12:	4b7b      	ldr	r3, [pc, #492]	@ (8005000 <checkAktifCalisma+0xb90>)
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10d      	bne.n	8004e36 <checkAktifCalisma+0x9c6>
 8004e1a:	4b77      	ldr	r3, [pc, #476]	@ (8004ff8 <checkAktifCalisma+0xb88>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	f083 0301 	eor.w	r3, r3, #1
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d106      	bne.n	8004e36 <checkAktifCalisma+0x9c6>
 8004e28:	4b74      	ldr	r3, [pc, #464]	@ (8004ffc <checkAktifCalisma+0xb8c>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	f083 0301 	eor.w	r3, r3, #1
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004e36:	2200      	movs	r2, #0
 8004e38:	2110      	movs	r1, #16
 8004e3a:	486d      	ldr	r0, [pc, #436]	@ (8004ff0 <checkAktifCalisma+0xb80>)
 8004e3c:	f005 fc9f 	bl	800a77e <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8004e40:	4b6c      	ldr	r3, [pc, #432]	@ (8004ff4 <checkAktifCalisma+0xb84>)
 8004e42:	2200      	movs	r2, #0
 8004e44:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8004e46:	4b6e      	ldr	r3, [pc, #440]	@ (8005000 <checkAktifCalisma+0xb90>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004e4c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004e50:	486f      	ldr	r0, [pc, #444]	@ (8005010 <checkAktifCalisma+0xba0>)
 8004e52:	f005 fc7d 	bl	800a750 <HAL_GPIO_ReadPin>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d120      	bne.n	8004e9e <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004e5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004e60:	486b      	ldr	r0, [pc, #428]	@ (8005010 <checkAktifCalisma+0xba0>)
 8004e62:	f005 fc75 	bl	800a750 <HAL_GPIO_ReadPin>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d118      	bne.n	8004e9e <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004e6c:	2104      	movs	r1, #4
 8004e6e:	4868      	ldr	r0, [pc, #416]	@ (8005010 <checkAktifCalisma+0xba0>)
 8004e70:	f005 fc6e 	bl	800a750 <HAL_GPIO_ReadPin>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d111      	bne.n	8004e9e <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004e7a:	2102      	movs	r1, #2
 8004e7c:	4864      	ldr	r0, [pc, #400]	@ (8005010 <checkAktifCalisma+0xba0>)
 8004e7e:	f005 fc67 	bl	800a750 <HAL_GPIO_ReadPin>
 8004e82:	4603      	mov	r3, r0
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10a      	bne.n	8004e9e <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004e88:	2101      	movs	r1, #1
 8004e8a:	4861      	ldr	r0, [pc, #388]	@ (8005010 <checkAktifCalisma+0xba0>)
 8004e8c:	f005 fc60 	bl	800a750 <HAL_GPIO_ReadPin>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d103      	bne.n	8004e9e <checkAktifCalisma+0xa2e>
					makineStop=1;
 8004e96:	4b5f      	ldr	r3, [pc, #380]	@ (8005014 <checkAktifCalisma+0xba4>)
 8004e98:	2201      	movs	r2, #1
 8004e9a:	701a      	strb	r2, [r3, #0]
 8004e9c:	e002      	b.n	8004ea4 <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 8004e9e:	4b5d      	ldr	r3, [pc, #372]	@ (8005014 <checkAktifCalisma+0xba4>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004ea4:	4b5c      	ldr	r3, [pc, #368]	@ (8005018 <checkAktifCalisma+0xba8>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d144      	bne.n	8004f36 <checkAktifCalisma+0xac6>
 8004eac:	4b5b      	ldr	r3, [pc, #364]	@ (800501c <checkAktifCalisma+0xbac>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d003      	beq.n	8004ebc <checkAktifCalisma+0xa4c>
 8004eb4:	4b59      	ldr	r3, [pc, #356]	@ (800501c <checkAktifCalisma+0xbac>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d13c      	bne.n	8004f36 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004ebc:	2180      	movs	r1, #128	@ 0x80
 8004ebe:	484c      	ldr	r0, [pc, #304]	@ (8004ff0 <checkAktifCalisma+0xb80>)
 8004ec0:	f005 fc46 	bl	800a750 <HAL_GPIO_ReadPin>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d103      	bne.n	8004ed2 <checkAktifCalisma+0xa62>
 8004eca:	4b55      	ldr	r3, [pc, #340]	@ (8005020 <checkAktifCalisma+0xbb0>)
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00b      	beq.n	8004eea <checkAktifCalisma+0xa7a>
 8004ed2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004ed6:	484e      	ldr	r0, [pc, #312]	@ (8005010 <checkAktifCalisma+0xba0>)
 8004ed8:	f005 fc3a 	bl	800a750 <HAL_GPIO_ReadPin>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d129      	bne.n	8004f36 <checkAktifCalisma+0xac6>
 8004ee2:	4b4f      	ldr	r3, [pc, #316]	@ (8005020 <checkAktifCalisma+0xbb0>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d125      	bne.n	8004f36 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004eea:	2104      	movs	r1, #4
 8004eec:	4840      	ldr	r0, [pc, #256]	@ (8004ff0 <checkAktifCalisma+0xb80>)
 8004eee:	f005 fc2f 	bl	800a750 <HAL_GPIO_ReadPin>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d003      	beq.n	8004f00 <checkAktifCalisma+0xa90>
 8004ef8:	4b4a      	ldr	r3, [pc, #296]	@ (8005024 <checkAktifCalisma+0xbb4>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d11a      	bne.n	8004f36 <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004f00:	2102      	movs	r1, #2
 8004f02:	483b      	ldr	r0, [pc, #236]	@ (8004ff0 <checkAktifCalisma+0xb80>)
 8004f04:	f005 fc24 	bl	800a750 <HAL_GPIO_ReadPin>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d113      	bne.n	8004f36 <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 8004f0e:	4b46      	ldr	r3, [pc, #280]	@ (8005028 <checkAktifCalisma+0xbb8>)
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	f083 0301 	eor.w	r3, r3, #1
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00c      	beq.n	8004f36 <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 8004f1c:	4b3d      	ldr	r3, [pc, #244]	@ (8005014 <checkAktifCalisma+0xba4>)
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d008      	beq.n	8004f36 <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 8004f24:	4b41      	ldr	r3, [pc, #260]	@ (800502c <checkAktifCalisma+0xbbc>)
 8004f26:	2201      	movs	r2, #1
 8004f28:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004f2a:	4b36      	ldr	r3, [pc, #216]	@ (8005004 <checkAktifCalisma+0xb94>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a40      	ldr	r2, [pc, #256]	@ (8005030 <checkAktifCalisma+0xbc0>)
 8004f30:	6013      	str	r3, [r2, #0]
					bekle();
 8004f32:	f7ff f901 	bl	8004138 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8004f36:	4b33      	ldr	r3, [pc, #204]	@ (8005004 <checkAktifCalisma+0xb94>)
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	4b3d      	ldr	r3, [pc, #244]	@ (8005030 <checkAktifCalisma+0xbc0>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	4a3c      	ldr	r2, [pc, #240]	@ (8005034 <checkAktifCalisma+0xbc4>)
 8004f42:	7812      	ldrb	r2, [r2, #0]
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d211      	bcs.n	8004f6c <checkAktifCalisma+0xafc>
 8004f48:	2104      	movs	r1, #4
 8004f4a:	4829      	ldr	r0, [pc, #164]	@ (8004ff0 <checkAktifCalisma+0xb80>)
 8004f4c:	f005 fc00 	bl	800a750 <HAL_GPIO_ReadPin>
 8004f50:	4603      	mov	r3, r0
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <checkAktifCalisma+0xafc>
 8004f56:	4b33      	ldr	r3, [pc, #204]	@ (8005024 <checkAktifCalisma+0xbb4>)
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d006      	beq.n	8004f6c <checkAktifCalisma+0xafc>
 8004f5e:	4b2d      	ldr	r3, [pc, #180]	@ (8005014 <checkAktifCalisma+0xba4>)
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	f083 0301 	eor.w	r3, r3, #1
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 8004f6c:	4b2f      	ldr	r3, [pc, #188]	@ (800502c <checkAktifCalisma+0xbbc>)
 8004f6e:	2200      	movs	r2, #0
 8004f70:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004f72:	4b29      	ldr	r3, [pc, #164]	@ (8005018 <checkAktifCalisma+0xba8>)
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d160      	bne.n	800503c <checkAktifCalisma+0xbcc>
 8004f7a:	4b28      	ldr	r3, [pc, #160]	@ (800501c <checkAktifCalisma+0xbac>)
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d003      	beq.n	8004f8a <checkAktifCalisma+0xb1a>
 8004f82:	4b26      	ldr	r3, [pc, #152]	@ (800501c <checkAktifCalisma+0xbac>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d158      	bne.n	800503c <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004f8a:	2104      	movs	r1, #4
 8004f8c:	4818      	ldr	r0, [pc, #96]	@ (8004ff0 <checkAktifCalisma+0xb80>)
 8004f8e:	f005 fbdf 	bl	800a750 <HAL_GPIO_ReadPin>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d003      	beq.n	8004fa0 <checkAktifCalisma+0xb30>
 8004f98:	4b22      	ldr	r3, [pc, #136]	@ (8005024 <checkAktifCalisma+0xbb4>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d14d      	bne.n	800503c <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004fa0:	2102      	movs	r1, #2
 8004fa2:	4813      	ldr	r0, [pc, #76]	@ (8004ff0 <checkAktifCalisma+0xb80>)
 8004fa4:	f005 fbd4 	bl	800a750 <HAL_GPIO_ReadPin>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d146      	bne.n	800503c <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004fae:	2180      	movs	r1, #128	@ 0x80
 8004fb0:	480f      	ldr	r0, [pc, #60]	@ (8004ff0 <checkAktifCalisma+0xb80>)
 8004fb2:	f005 fbcd 	bl	800a750 <HAL_GPIO_ReadPin>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d103      	bne.n	8004fc4 <checkAktifCalisma+0xb54>
 8004fbc:	4b18      	ldr	r3, [pc, #96]	@ (8005020 <checkAktifCalisma+0xbb0>)
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00b      	beq.n	8004fdc <checkAktifCalisma+0xb6c>
 8004fc4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004fc8:	4811      	ldr	r0, [pc, #68]	@ (8005010 <checkAktifCalisma+0xba0>)
 8004fca:	f005 fbc1 	bl	800a750 <HAL_GPIO_ReadPin>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d133      	bne.n	800503c <checkAktifCalisma+0xbcc>
 8004fd4:	4b12      	ldr	r3, [pc, #72]	@ (8005020 <checkAktifCalisma+0xbb0>)
 8004fd6:	781b      	ldrb	r3, [r3, #0]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d12f      	bne.n	800503c <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 8004fdc:	4b0d      	ldr	r3, [pc, #52]	@ (8005014 <checkAktifCalisma+0xba4>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d02b      	beq.n	800503c <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 8004fe4:	4b14      	ldr	r3, [pc, #80]	@ (8005038 <checkAktifCalisma+0xbc8>)
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	701a      	strb	r2, [r3, #0]
 8004fea:	e02a      	b.n	8005042 <checkAktifCalisma+0xbd2>
 8004fec:	200010f3 	.word	0x200010f3
 8004ff0:	40011000 	.word	0x40011000
 8004ff4:	200010f7 	.word	0x200010f7
 8004ff8:	2000110d 	.word	0x2000110d
 8004ffc:	2000110e 	.word	0x2000110e
 8005000:	200010ef 	.word	0x200010ef
 8005004:	20001094 	.word	0x20001094
 8005008:	200010a0 	.word	0x200010a0
 800500c:	200010d2 	.word	0x200010d2
 8005010:	40010c00 	.word	0x40010c00
 8005014:	200010fd 	.word	0x200010fd
 8005018:	200010c5 	.word	0x200010c5
 800501c:	200010c4 	.word	0x200010c4
 8005020:	200010c8 	.word	0x200010c8
 8005024:	200010c2 	.word	0x200010c2
 8005028:	200010eb 	.word	0x200010eb
 800502c:	200010fe 	.word	0x200010fe
 8005030:	20001098 	.word	0x20001098
 8005034:	200010d5 	.word	0x200010d5
 8005038:	200010ff 	.word	0x200010ff
				} else {
					kapi1butonkontrol=0;
 800503c:	4b8b      	ldr	r3, [pc, #556]	@ (800526c <checkAktifCalisma+0xdfc>)
 800503e:	2200      	movs	r2, #0
 8005040:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005042:	4b8b      	ldr	r3, [pc, #556]	@ (8005270 <checkAktifCalisma+0xe00>)
 8005044:	781b      	ldrb	r3, [r3, #0]
 8005046:	2b02      	cmp	r3, #2
 8005048:	d121      	bne.n	800508e <checkAktifCalisma+0xc1e>
 800504a:	4b8a      	ldr	r3, [pc, #552]	@ (8005274 <checkAktifCalisma+0xe04>)
 800504c:	781b      	ldrb	r3, [r3, #0]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d003      	beq.n	800505a <checkAktifCalisma+0xbea>
 8005052:	4b88      	ldr	r3, [pc, #544]	@ (8005274 <checkAktifCalisma+0xe04>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	2b03      	cmp	r3, #3
 8005058:	d119      	bne.n	800508e <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800505a:	2104      	movs	r1, #4
 800505c:	4886      	ldr	r0, [pc, #536]	@ (8005278 <checkAktifCalisma+0xe08>)
 800505e:	f005 fb77 	bl	800a750 <HAL_GPIO_ReadPin>
 8005062:	4603      	mov	r3, r0
 8005064:	2b01      	cmp	r3, #1
 8005066:	d003      	beq.n	8005070 <checkAktifCalisma+0xc00>
 8005068:	4b84      	ldr	r3, [pc, #528]	@ (800527c <checkAktifCalisma+0xe0c>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d10e      	bne.n	800508e <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005070:	2102      	movs	r1, #2
 8005072:	4881      	ldr	r0, [pc, #516]	@ (8005278 <checkAktifCalisma+0xe08>)
 8005074:	f005 fb6c 	bl	800a750 <HAL_GPIO_ReadPin>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d107      	bne.n	800508e <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 800507e:	4b80      	ldr	r3, [pc, #512]	@ (8005280 <checkAktifCalisma+0xe10>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 8005086:	4b7f      	ldr	r3, [pc, #508]	@ (8005284 <checkAktifCalisma+0xe14>)
 8005088:	2201      	movs	r2, #1
 800508a:	701a      	strb	r2, [r3, #0]
 800508c:	e002      	b.n	8005094 <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 800508e:	4b7d      	ldr	r3, [pc, #500]	@ (8005284 <checkAktifCalisma+0xe14>)
 8005090:	2200      	movs	r2, #0
 8005092:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8005094:	4b75      	ldr	r3, [pc, #468]	@ (800526c <checkAktifCalisma+0xdfc>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d107      	bne.n	80050ac <checkAktifCalisma+0xc3c>
 800509c:	4b79      	ldr	r3, [pc, #484]	@ (8005284 <checkAktifCalisma+0xe14>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d103      	bne.n	80050ac <checkAktifCalisma+0xc3c>
 80050a4:	4b78      	ldr	r3, [pc, #480]	@ (8005288 <checkAktifCalisma+0xe18>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80050ac:	2201      	movs	r2, #1
 80050ae:	2180      	movs	r1, #128	@ 0x80
 80050b0:	4876      	ldr	r0, [pc, #472]	@ (800528c <checkAktifCalisma+0xe1c>)
 80050b2:	f005 fb64 	bl	800a77e <HAL_GPIO_WritePin>
 80050b6:	e004      	b.n	80050c2 <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80050b8:	2200      	movs	r2, #0
 80050ba:	2180      	movs	r1, #128	@ 0x80
 80050bc:	4873      	ldr	r0, [pc, #460]	@ (800528c <checkAktifCalisma+0xe1c>)
 80050be:	f005 fb5e 	bl	800a77e <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80050c2:	4b73      	ldr	r3, [pc, #460]	@ (8005290 <checkAktifCalisma+0xe20>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d141      	bne.n	800514e <checkAktifCalisma+0xcde>
 80050ca:	4b6a      	ldr	r3, [pc, #424]	@ (8005274 <checkAktifCalisma+0xe04>)
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d003      	beq.n	80050da <checkAktifCalisma+0xc6a>
 80050d2:	4b68      	ldr	r3, [pc, #416]	@ (8005274 <checkAktifCalisma+0xe04>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	2b03      	cmp	r3, #3
 80050d8:	d139      	bne.n	800514e <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80050da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80050de:	4866      	ldr	r0, [pc, #408]	@ (8005278 <checkAktifCalisma+0xe08>)
 80050e0:	f005 fb36 	bl	800a750 <HAL_GPIO_ReadPin>
 80050e4:	4603      	mov	r3, r0
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d103      	bne.n	80050f2 <checkAktifCalisma+0xc82>
 80050ea:	4b6a      	ldr	r3, [pc, #424]	@ (8005294 <checkAktifCalisma+0xe24>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00b      	beq.n	800510a <checkAktifCalisma+0xc9a>
 80050f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80050f6:	4868      	ldr	r0, [pc, #416]	@ (8005298 <checkAktifCalisma+0xe28>)
 80050f8:	f005 fb2a 	bl	800a750 <HAL_GPIO_ReadPin>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d125      	bne.n	800514e <checkAktifCalisma+0xcde>
 8005102:	4b64      	ldr	r3, [pc, #400]	@ (8005294 <checkAktifCalisma+0xe24>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d121      	bne.n	800514e <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800510a:	2102      	movs	r1, #2
 800510c:	485a      	ldr	r0, [pc, #360]	@ (8005278 <checkAktifCalisma+0xe08>)
 800510e:	f005 fb1f 	bl	800a750 <HAL_GPIO_ReadPin>
 8005112:	4603      	mov	r3, r0
 8005114:	2b01      	cmp	r3, #1
 8005116:	d11a      	bne.n	800514e <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005118:	2104      	movs	r1, #4
 800511a:	4857      	ldr	r0, [pc, #348]	@ (8005278 <checkAktifCalisma+0xe08>)
 800511c:	f005 fb18 	bl	800a750 <HAL_GPIO_ReadPin>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d113      	bne.n	800514e <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 8005126:	4b56      	ldr	r3, [pc, #344]	@ (8005280 <checkAktifCalisma+0xe10>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00f      	beq.n	800514e <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 800512e:	4b5b      	ldr	r3, [pc, #364]	@ (800529c <checkAktifCalisma+0xe2c>)
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	f083 0301 	eor.w	r3, r3, #1
 8005136:	b2db      	uxtb	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d008      	beq.n	800514e <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 800513c:	4b58      	ldr	r3, [pc, #352]	@ (80052a0 <checkAktifCalisma+0xe30>)
 800513e:	2201      	movs	r2, #1
 8005140:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005142:	4b58      	ldr	r3, [pc, #352]	@ (80052a4 <checkAktifCalisma+0xe34>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a58      	ldr	r2, [pc, #352]	@ (80052a8 <checkAktifCalisma+0xe38>)
 8005148:	6013      	str	r3, [r2, #0]
					bekle();
 800514a:	f7fe fff5 	bl	8004138 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 800514e:	4b55      	ldr	r3, [pc, #340]	@ (80052a4 <checkAktifCalisma+0xe34>)
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	4b55      	ldr	r3, [pc, #340]	@ (80052a8 <checkAktifCalisma+0xe38>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	4a54      	ldr	r2, [pc, #336]	@ (80052ac <checkAktifCalisma+0xe3c>)
 800515a:	7812      	ldrb	r2, [r2, #0]
 800515c:	4293      	cmp	r3, r2
 800515e:	d20d      	bcs.n	800517c <checkAktifCalisma+0xd0c>
 8005160:	2102      	movs	r1, #2
 8005162:	4845      	ldr	r0, [pc, #276]	@ (8005278 <checkAktifCalisma+0xe08>)
 8005164:	f005 faf4 	bl	800a750 <HAL_GPIO_ReadPin>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d006      	beq.n	800517c <checkAktifCalisma+0xd0c>
 800516e:	4b44      	ldr	r3, [pc, #272]	@ (8005280 <checkAktifCalisma+0xe10>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	f083 0301 	eor.w	r3, r3, #1
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d002      	beq.n	8005182 <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 800517c:	4b48      	ldr	r3, [pc, #288]	@ (80052a0 <checkAktifCalisma+0xe30>)
 800517e:	2200      	movs	r2, #0
 8005180:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005182:	4b43      	ldr	r3, [pc, #268]	@ (8005290 <checkAktifCalisma+0xe20>)
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	2b01      	cmp	r3, #1
 8005188:	d135      	bne.n	80051f6 <checkAktifCalisma+0xd86>
 800518a:	4b3a      	ldr	r3, [pc, #232]	@ (8005274 <checkAktifCalisma+0xe04>)
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d003      	beq.n	800519a <checkAktifCalisma+0xd2a>
 8005192:	4b38      	ldr	r3, [pc, #224]	@ (8005274 <checkAktifCalisma+0xe04>)
 8005194:	781b      	ldrb	r3, [r3, #0]
 8005196:	2b03      	cmp	r3, #3
 8005198:	d12d      	bne.n	80051f6 <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800519a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800519e:	4836      	ldr	r0, [pc, #216]	@ (8005278 <checkAktifCalisma+0xe08>)
 80051a0:	f005 fad6 	bl	800a750 <HAL_GPIO_ReadPin>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d103      	bne.n	80051b2 <checkAktifCalisma+0xd42>
 80051aa:	4b3a      	ldr	r3, [pc, #232]	@ (8005294 <checkAktifCalisma+0xe24>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00b      	beq.n	80051ca <checkAktifCalisma+0xd5a>
 80051b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80051b6:	4838      	ldr	r0, [pc, #224]	@ (8005298 <checkAktifCalisma+0xe28>)
 80051b8:	f005 faca 	bl	800a750 <HAL_GPIO_ReadPin>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d119      	bne.n	80051f6 <checkAktifCalisma+0xd86>
 80051c2:	4b34      	ldr	r3, [pc, #208]	@ (8005294 <checkAktifCalisma+0xe24>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d115      	bne.n	80051f6 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80051ca:	2102      	movs	r1, #2
 80051cc:	482a      	ldr	r0, [pc, #168]	@ (8005278 <checkAktifCalisma+0xe08>)
 80051ce:	f005 fabf 	bl	800a750 <HAL_GPIO_ReadPin>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d10e      	bne.n	80051f6 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80051d8:	2104      	movs	r1, #4
 80051da:	4827      	ldr	r0, [pc, #156]	@ (8005278 <checkAktifCalisma+0xe08>)
 80051dc:	f005 fab8 	bl	800a750 <HAL_GPIO_ReadPin>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d107      	bne.n	80051f6 <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 80051e6:	4b26      	ldr	r3, [pc, #152]	@ (8005280 <checkAktifCalisma+0xe10>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 80051ee:	4b30      	ldr	r3, [pc, #192]	@ (80052b0 <checkAktifCalisma+0xe40>)
 80051f0:	2201      	movs	r2, #1
 80051f2:	701a      	strb	r2, [r3, #0]
 80051f4:	e002      	b.n	80051fc <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 80051f6:	4b2e      	ldr	r3, [pc, #184]	@ (80052b0 <checkAktifCalisma+0xe40>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80051fc:	4b24      	ldr	r3, [pc, #144]	@ (8005290 <checkAktifCalisma+0xe20>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	2b02      	cmp	r3, #2
 8005202:	d11d      	bne.n	8005240 <checkAktifCalisma+0xdd0>
 8005204:	4b1b      	ldr	r3, [pc, #108]	@ (8005274 <checkAktifCalisma+0xe04>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d003      	beq.n	8005214 <checkAktifCalisma+0xda4>
 800520c:	4b19      	ldr	r3, [pc, #100]	@ (8005274 <checkAktifCalisma+0xe04>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b03      	cmp	r3, #3
 8005212:	d115      	bne.n	8005240 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005214:	2102      	movs	r1, #2
 8005216:	4818      	ldr	r0, [pc, #96]	@ (8005278 <checkAktifCalisma+0xe08>)
 8005218:	f005 fa9a 	bl	800a750 <HAL_GPIO_ReadPin>
 800521c:	4603      	mov	r3, r0
 800521e:	2b01      	cmp	r3, #1
 8005220:	d10e      	bne.n	8005240 <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005222:	2104      	movs	r1, #4
 8005224:	4814      	ldr	r0, [pc, #80]	@ (8005278 <checkAktifCalisma+0xe08>)
 8005226:	f005 fa93 	bl	800a750 <HAL_GPIO_ReadPin>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d107      	bne.n	8005240 <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 8005230:	4b13      	ldr	r3, [pc, #76]	@ (8005280 <checkAktifCalisma+0xe10>)
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 8005238:	4b1e      	ldr	r3, [pc, #120]	@ (80052b4 <checkAktifCalisma+0xe44>)
 800523a:	2201      	movs	r2, #1
 800523c:	701a      	strb	r2, [r3, #0]
 800523e:	e002      	b.n	8005246 <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 8005240:	4b1c      	ldr	r3, [pc, #112]	@ (80052b4 <checkAktifCalisma+0xe44>)
 8005242:	2200      	movs	r2, #0
 8005244:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005246:	4b1a      	ldr	r3, [pc, #104]	@ (80052b0 <checkAktifCalisma+0xe40>)
 8005248:	781b      	ldrb	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d107      	bne.n	800525e <checkAktifCalisma+0xdee>
 800524e:	4b19      	ldr	r3, [pc, #100]	@ (80052b4 <checkAktifCalisma+0xe44>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d103      	bne.n	800525e <checkAktifCalisma+0xdee>
 8005256:	4b12      	ldr	r3, [pc, #72]	@ (80052a0 <checkAktifCalisma+0xe30>)
 8005258:	781b      	ldrb	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d02c      	beq.n	80052b8 <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800525e:	2201      	movs	r2, #1
 8005260:	2140      	movs	r1, #64	@ 0x40
 8005262:	480a      	ldr	r0, [pc, #40]	@ (800528c <checkAktifCalisma+0xe1c>)
 8005264:	f005 fa8b 	bl	800a77e <HAL_GPIO_WritePin>
 8005268:	e02b      	b.n	80052c2 <checkAktifCalisma+0xe52>
 800526a:	bf00      	nop
 800526c:	200010ff 	.word	0x200010ff
 8005270:	200010c5 	.word	0x200010c5
 8005274:	200010c4 	.word	0x200010c4
 8005278:	40011000 	.word	0x40011000
 800527c:	200010c2 	.word	0x200010c2
 8005280:	200010fd 	.word	0x200010fd
 8005284:	20001100 	.word	0x20001100
 8005288:	200010fe 	.word	0x200010fe
 800528c:	40010800 	.word	0x40010800
 8005290:	200010c6 	.word	0x200010c6
 8005294:	200010c8 	.word	0x200010c8
 8005298:	40010c00 	.word	0x40010c00
 800529c:	200010eb 	.word	0x200010eb
 80052a0:	20001101 	.word	0x20001101
 80052a4:	20001094 	.word	0x20001094
 80052a8:	20001098 	.word	0x20001098
 80052ac:	200010d6 	.word	0x200010d6
 80052b0:	20001102 	.word	0x20001102
 80052b4:	20001103 	.word	0x20001103
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80052b8:	2200      	movs	r2, #0
 80052ba:	2140      	movs	r1, #64	@ 0x40
 80052bc:	4889      	ldr	r0, [pc, #548]	@ (80054e4 <checkAktifCalisma+0x1074>)
 80052be:	f005 fa5e 	bl	800a77e <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 80052c2:	4b89      	ldr	r3, [pc, #548]	@ (80054e8 <checkAktifCalisma+0x1078>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <checkAktifCalisma+0xe62>
 80052ca:	4b87      	ldr	r3, [pc, #540]	@ (80054e8 <checkAktifCalisma+0x1078>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	d115      	bne.n	80052fe <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80052d2:	2104      	movs	r1, #4
 80052d4:	4885      	ldr	r0, [pc, #532]	@ (80054ec <checkAktifCalisma+0x107c>)
 80052d6:	f005 fa3b 	bl	800a750 <HAL_GPIO_ReadPin>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d003      	beq.n	80052e8 <checkAktifCalisma+0xe78>
 80052e0:	4b83      	ldr	r3, [pc, #524]	@ (80054f0 <checkAktifCalisma+0x1080>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10a      	bne.n	80052fe <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 80052e8:	2102      	movs	r1, #2
 80052ea:	4880      	ldr	r0, [pc, #512]	@ (80054ec <checkAktifCalisma+0x107c>)
 80052ec:	f005 fa30 	bl	800a750 <HAL_GPIO_ReadPin>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d103      	bne.n	80052fe <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 80052f6:	4b7f      	ldr	r3, [pc, #508]	@ (80054f4 <checkAktifCalisma+0x1084>)
 80052f8:	2201      	movs	r2, #1
 80052fa:	701a      	strb	r2, [r3, #0]
 80052fc:	e002      	b.n	8005304 <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 80052fe:	4b7d      	ldr	r3, [pc, #500]	@ (80054f4 <checkAktifCalisma+0x1084>)
 8005300:	2200      	movs	r2, #0
 8005302:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005304:	4b78      	ldr	r3, [pc, #480]	@ (80054e8 <checkAktifCalisma+0x1078>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d003      	beq.n	8005314 <checkAktifCalisma+0xea4>
 800530c:	4b76      	ldr	r3, [pc, #472]	@ (80054e8 <checkAktifCalisma+0x1078>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	2b02      	cmp	r3, #2
 8005312:	d111      	bne.n	8005338 <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005314:	2102      	movs	r1, #2
 8005316:	4875      	ldr	r0, [pc, #468]	@ (80054ec <checkAktifCalisma+0x107c>)
 8005318:	f005 fa1a 	bl	800a750 <HAL_GPIO_ReadPin>
 800531c:	4603      	mov	r3, r0
 800531e:	2b01      	cmp	r3, #1
 8005320:	d10a      	bne.n	8005338 <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8005322:	2104      	movs	r1, #4
 8005324:	4871      	ldr	r0, [pc, #452]	@ (80054ec <checkAktifCalisma+0x107c>)
 8005326:	f005 fa13 	bl	800a750 <HAL_GPIO_ReadPin>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d103      	bne.n	8005338 <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 8005330:	4b71      	ldr	r3, [pc, #452]	@ (80054f8 <checkAktifCalisma+0x1088>)
 8005332:	2201      	movs	r2, #1
 8005334:	701a      	strb	r2, [r3, #0]
 8005336:	e002      	b.n	800533e <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 8005338:	4b6f      	ldr	r3, [pc, #444]	@ (80054f8 <checkAktifCalisma+0x1088>)
 800533a:	2200      	movs	r2, #0
 800533c:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 800533e:	4b6d      	ldr	r3, [pc, #436]	@ (80054f4 <checkAktifCalisma+0x1084>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00f      	beq.n	8005366 <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 8005346:	4b6d      	ldr	r3, [pc, #436]	@ (80054fc <checkAktifCalisma+0x108c>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d10b      	bne.n	8005366 <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 800534e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005352:	486b      	ldr	r0, [pc, #428]	@ (8005500 <checkAktifCalisma+0x1090>)
 8005354:	f005 f9fc 	bl	800a750 <HAL_GPIO_ReadPin>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d103      	bne.n	8005366 <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 800535e:	4b69      	ldr	r3, [pc, #420]	@ (8005504 <checkAktifCalisma+0x1094>)
 8005360:	2201      	movs	r2, #1
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	e002      	b.n	800536c <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 8005366:	4b67      	ldr	r3, [pc, #412]	@ (8005504 <checkAktifCalisma+0x1094>)
 8005368:	2200      	movs	r2, #0
 800536a:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 800536c:	4b62      	ldr	r3, [pc, #392]	@ (80054f8 <checkAktifCalisma+0x1088>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00f      	beq.n	8005394 <checkAktifCalisma+0xf24>
						&& kapiAcTipi==1
 8005374:	4b61      	ldr	r3, [pc, #388]	@ (80054fc <checkAktifCalisma+0x108c>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d10b      	bne.n	8005394 <checkAktifCalisma+0xf24>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 800537c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005380:	485f      	ldr	r0, [pc, #380]	@ (8005500 <checkAktifCalisma+0x1090>)
 8005382:	f005 f9e5 	bl	800a750 <HAL_GPIO_ReadPin>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d103      	bne.n	8005394 <checkAktifCalisma+0xf24>

					kapiactablaesp2=1;
 800538c:	4b5e      	ldr	r3, [pc, #376]	@ (8005508 <checkAktifCalisma+0x1098>)
 800538e:	2201      	movs	r2, #1
 8005390:	701a      	strb	r2, [r3, #0]
 8005392:	e002      	b.n	800539a <checkAktifCalisma+0xf2a>
				} else {
					kapiactablaesp2=0;
 8005394:	4b5c      	ldr	r3, [pc, #368]	@ (8005508 <checkAktifCalisma+0x1098>)
 8005396:	2200      	movs	r2, #0
 8005398:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800539a:	4b5c      	ldr	r3, [pc, #368]	@ (800550c <checkAktifCalisma+0x109c>)
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d11b      	bne.n	80053da <checkAktifCalisma+0xf6a>
 80053a2:	4b5b      	ldr	r3, [pc, #364]	@ (8005510 <checkAktifCalisma+0x10a0>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d003      	beq.n	80053b2 <checkAktifCalisma+0xf42>
 80053aa:	4b59      	ldr	r3, [pc, #356]	@ (8005510 <checkAktifCalisma+0x10a0>)
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d113      	bne.n	80053da <checkAktifCalisma+0xf6a>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))&& ((kapi1prudhome==1)||(kapi2prudhome==1)))
 80053b2:	4b50      	ldr	r3, [pc, #320]	@ (80054f4 <checkAktifCalisma+0x1084>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d103      	bne.n	80053c2 <checkAktifCalisma+0xf52>
 80053ba:	4b4f      	ldr	r3, [pc, #316]	@ (80054f8 <checkAktifCalisma+0x1088>)
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d00b      	beq.n	80053da <checkAktifCalisma+0xf6a>
 80053c2:	4b54      	ldr	r3, [pc, #336]	@ (8005514 <checkAktifCalisma+0x10a4>)
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d103      	bne.n	80053d2 <checkAktifCalisma+0xf62>
 80053ca:	4b53      	ldr	r3, [pc, #332]	@ (8005518 <checkAktifCalisma+0x10a8>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d003      	beq.n	80053da <checkAktifCalisma+0xf6a>
						 {

						kapiTablaprudhome=1;
 80053d2:	4b52      	ldr	r3, [pc, #328]	@ (800551c <checkAktifCalisma+0x10ac>)
 80053d4:	2201      	movs	r2, #1
 80053d6:	701a      	strb	r2, [r3, #0]
 80053d8:	e002      	b.n	80053e0 <checkAktifCalisma+0xf70>

						 }
				else {
					kapiTablaprudhome=0;
 80053da:	4b50      	ldr	r3, [pc, #320]	@ (800551c <checkAktifCalisma+0x10ac>)
 80053dc:	2200      	movs	r2, #0
 80053de:	701a      	strb	r2, [r3, #0]
				}


				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80053e0:	4b4a      	ldr	r3, [pc, #296]	@ (800550c <checkAktifCalisma+0x109c>)
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d148      	bne.n	800547a <checkAktifCalisma+0x100a>
 80053e8:	4b49      	ldr	r3, [pc, #292]	@ (8005510 <checkAktifCalisma+0x10a0>)
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d003      	beq.n	80053f8 <checkAktifCalisma+0xf88>
 80053f0:	4b47      	ldr	r3, [pc, #284]	@ (8005510 <checkAktifCalisma+0x10a0>)
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b03      	cmp	r3, #3
 80053f6:	d140      	bne.n	800547a <checkAktifCalisma+0x100a>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80053f8:	4b3e      	ldr	r3, [pc, #248]	@ (80054f4 <checkAktifCalisma+0x1084>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d103      	bne.n	8005408 <checkAktifCalisma+0xf98>
 8005400:	4b3d      	ldr	r3, [pc, #244]	@ (80054f8 <checkAktifCalisma+0x1088>)
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d038      	beq.n	800547a <checkAktifCalisma+0x100a>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8005408:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800540c:	4837      	ldr	r0, [pc, #220]	@ (80054ec <checkAktifCalisma+0x107c>)
 800540e:	f005 f99f 	bl	800a750 <HAL_GPIO_ReadPin>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d01c      	beq.n	8005452 <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8005418:	2180      	movs	r1, #128	@ 0x80
 800541a:	4834      	ldr	r0, [pc, #208]	@ (80054ec <checkAktifCalisma+0x107c>)
 800541c:	f005 f998 	bl	800a750 <HAL_GPIO_ReadPin>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d106      	bne.n	8005434 <checkAktifCalisma+0xfc4>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8005426:	2104      	movs	r1, #4
 8005428:	4830      	ldr	r0, [pc, #192]	@ (80054ec <checkAktifCalisma+0x107c>)
 800542a:	f005 f991 	bl	800a750 <HAL_GPIO_ReadPin>
 800542e:	4603      	mov	r3, r0
 8005430:	2b01      	cmp	r3, #1
 8005432:	d00e      	beq.n	8005452 <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8005434:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005438:	482c      	ldr	r0, [pc, #176]	@ (80054ec <checkAktifCalisma+0x107c>)
 800543a:	f005 f989 	bl	800a750 <HAL_GPIO_ReadPin>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10a      	bne.n	800545a <checkAktifCalisma+0xfea>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8005444:	2102      	movs	r1, #2
 8005446:	4829      	ldr	r0, [pc, #164]	@ (80054ec <checkAktifCalisma+0x107c>)
 8005448:	f005 f982 	bl	800a750 <HAL_GPIO_ReadPin>
 800544c:	4603      	mov	r3, r0
 800544e:	2b01      	cmp	r3, #1
 8005450:	d103      	bne.n	800545a <checkAktifCalisma+0xfea>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005452:	4b2a      	ldr	r3, [pc, #168]	@ (80054fc <checkAktifCalisma+0x108c>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d007      	beq.n	800546a <checkAktifCalisma+0xffa>
 800545a:	4b2a      	ldr	r3, [pc, #168]	@ (8005504 <checkAktifCalisma+0x1094>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d103      	bne.n	800546a <checkAktifCalisma+0xffa>
 8005462:	4b29      	ldr	r3, [pc, #164]	@ (8005508 <checkAktifCalisma+0x1098>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d007      	beq.n	800547a <checkAktifCalisma+0x100a>
						&&(makineStop==1)) {
 800546a:	4b2d      	ldr	r3, [pc, #180]	@ (8005520 <checkAktifCalisma+0x10b0>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d003      	beq.n	800547a <checkAktifCalisma+0x100a>

					kapiTablabutonkontrol=1;
 8005472:	4b2c      	ldr	r3, [pc, #176]	@ (8005524 <checkAktifCalisma+0x10b4>)
 8005474:	2201      	movs	r2, #1
 8005476:	701a      	strb	r2, [r3, #0]
 8005478:	e002      	b.n	8005480 <checkAktifCalisma+0x1010>
				} else {
					kapiTablabutonkontrol=0;
 800547a:	4b2a      	ldr	r3, [pc, #168]	@ (8005524 <checkAktifCalisma+0x10b4>)
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005480:	4b22      	ldr	r3, [pc, #136]	@ (800550c <checkAktifCalisma+0x109c>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b02      	cmp	r3, #2
 8005486:	d117      	bne.n	80054b8 <checkAktifCalisma+0x1048>
 8005488:	4b21      	ldr	r3, [pc, #132]	@ (8005510 <checkAktifCalisma+0x10a0>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	2b02      	cmp	r3, #2
 800548e:	d003      	beq.n	8005498 <checkAktifCalisma+0x1028>
 8005490:	4b1f      	ldr	r3, [pc, #124]	@ (8005510 <checkAktifCalisma+0x10a0>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b03      	cmp	r3, #3
 8005496:	d10f      	bne.n	80054b8 <checkAktifCalisma+0x1048>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005498:	4b16      	ldr	r3, [pc, #88]	@ (80054f4 <checkAktifCalisma+0x1084>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d103      	bne.n	80054a8 <checkAktifCalisma+0x1038>
 80054a0:	4b15      	ldr	r3, [pc, #84]	@ (80054f8 <checkAktifCalisma+0x1088>)
 80054a2:	781b      	ldrb	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d007      	beq.n	80054b8 <checkAktifCalisma+0x1048>
						&&(makineStop==1)) {
 80054a8:	4b1d      	ldr	r3, [pc, #116]	@ (8005520 <checkAktifCalisma+0x10b0>)
 80054aa:	781b      	ldrb	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <checkAktifCalisma+0x1048>

					kapiTablapizzato=1;
 80054b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005528 <checkAktifCalisma+0x10b8>)
 80054b2:	2201      	movs	r2, #1
 80054b4:	701a      	strb	r2, [r3, #0]
 80054b6:	e002      	b.n	80054be <checkAktifCalisma+0x104e>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 80054b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005528 <checkAktifCalisma+0x10b8>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80054be:	4b19      	ldr	r3, [pc, #100]	@ (8005524 <checkAktifCalisma+0x10b4>)
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d107      	bne.n	80054d6 <checkAktifCalisma+0x1066>
 80054c6:	4b15      	ldr	r3, [pc, #84]	@ (800551c <checkAktifCalisma+0x10ac>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d103      	bne.n	80054d6 <checkAktifCalisma+0x1066>
 80054ce:	4b16      	ldr	r3, [pc, #88]	@ (8005528 <checkAktifCalisma+0x10b8>)
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d02a      	beq.n	800552c <checkAktifCalisma+0x10bc>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80054d6:	2201      	movs	r2, #1
 80054d8:	2120      	movs	r1, #32
 80054da:	4802      	ldr	r0, [pc, #8]	@ (80054e4 <checkAktifCalisma+0x1074>)
 80054dc:	f005 f94f 	bl	800a77e <HAL_GPIO_WritePin>
 80054e0:	e029      	b.n	8005536 <checkAktifCalisma+0x10c6>
 80054e2:	bf00      	nop
 80054e4:	40010800 	.word	0x40010800
 80054e8:	200010c9 	.word	0x200010c9
 80054ec:	40011000 	.word	0x40011000
 80054f0:	200010c2 	.word	0x200010c2
 80054f4:	20001107 	.word	0x20001107
 80054f8:	20001108 	.word	0x20001108
 80054fc:	200010c8 	.word	0x200010c8
 8005500:	40010c00 	.word	0x40010c00
 8005504:	20001117 	.word	0x20001117
 8005508:	20001118 	.word	0x20001118
 800550c:	200010c7 	.word	0x200010c7
 8005510:	200010c4 	.word	0x200010c4
 8005514:	200010fe 	.word	0x200010fe
 8005518:	20001101 	.word	0x20001101
 800551c:	20001104 	.word	0x20001104
 8005520:	200010fd 	.word	0x200010fd
 8005524:	20001105 	.word	0x20001105
 8005528:	20001106 	.word	0x20001106
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800552c:	2200      	movs	r2, #0
 800552e:	2120      	movs	r1, #32
 8005530:	4887      	ldr	r0, [pc, #540]	@ (8005750 <checkAktifCalisma+0x12e0>)
 8005532:	f005 f924 	bl	800a77e <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005536:	4b87      	ldr	r3, [pc, #540]	@ (8005754 <checkAktifCalisma+0x12e4>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00e      	beq.n	800555c <checkAktifCalisma+0x10ec>
 800553e:	2102      	movs	r1, #2
 8005540:	4885      	ldr	r0, [pc, #532]	@ (8005758 <checkAktifCalisma+0x12e8>)
 8005542:	f005 f905 	bl	800a750 <HAL_GPIO_ReadPin>
 8005546:	4603      	mov	r3, r0
 8005548:	2b01      	cmp	r3, #1
 800554a:	d107      	bne.n	800555c <checkAktifCalisma+0x10ec>
 800554c:	4b83      	ldr	r3, [pc, #524]	@ (800575c <checkAktifCalisma+0x12ec>)
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d103      	bne.n	800555c <checkAktifCalisma+0x10ec>
 8005554:	4b82      	ldr	r3, [pc, #520]	@ (8005760 <checkAktifCalisma+0x12f0>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d112      	bne.n	8005582 <checkAktifCalisma+0x1112>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 800555c:	4b81      	ldr	r3, [pc, #516]	@ (8005764 <checkAktifCalisma+0x12f4>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d032      	beq.n	80055ca <checkAktifCalisma+0x115a>
 8005564:	2104      	movs	r1, #4
 8005566:	487c      	ldr	r0, [pc, #496]	@ (8005758 <checkAktifCalisma+0x12e8>)
 8005568:	f005 f8f2 	bl	800a750 <HAL_GPIO_ReadPin>
 800556c:	4603      	mov	r3, r0
 800556e:	2b01      	cmp	r3, #1
 8005570:	d12b      	bne.n	80055ca <checkAktifCalisma+0x115a>
 8005572:	4b7a      	ldr	r3, [pc, #488]	@ (800575c <checkAktifCalisma+0x12ec>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d027      	beq.n	80055ca <checkAktifCalisma+0x115a>
 800557a:	4b79      	ldr	r3, [pc, #484]	@ (8005760 <checkAktifCalisma+0x12f0>)
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d023      	beq.n	80055ca <checkAktifCalisma+0x115a>



					calismaSayisi++;
 8005582:	4b79      	ldr	r3, [pc, #484]	@ (8005768 <checkAktifCalisma+0x12f8>)
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	3301      	adds	r3, #1
 8005588:	b2da      	uxtb	r2, r3
 800558a:	4b77      	ldr	r3, [pc, #476]	@ (8005768 <checkAktifCalisma+0x12f8>)
 800558c:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 800558e:	4b76      	ldr	r3, [pc, #472]	@ (8005768 <checkAktifCalisma+0x12f8>)
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	2bff      	cmp	r3, #255	@ 0xff
 8005594:	d108      	bne.n	80055a8 <checkAktifCalisma+0x1138>
						calismaSayisi = 0;
 8005596:	4b74      	ldr	r3, [pc, #464]	@ (8005768 <checkAktifCalisma+0x12f8>)
 8005598:	2200      	movs	r2, #0
 800559a:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 800559c:	4b73      	ldr	r3, [pc, #460]	@ (800576c <checkAktifCalisma+0x12fc>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	3301      	adds	r3, #1
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	4b71      	ldr	r3, [pc, #452]	@ (800576c <checkAktifCalisma+0x12fc>)
 80055a6:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 80055a8:	4b6f      	ldr	r3, [pc, #444]	@ (8005768 <checkAktifCalisma+0x12f8>)
 80055aa:	781a      	ldrb	r2, [r3, #0]
 80055ac:	4b70      	ldr	r3, [pc, #448]	@ (8005770 <checkAktifCalisma+0x1300>)
 80055ae:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 80055b0:	4b6e      	ldr	r3, [pc, #440]	@ (800576c <checkAktifCalisma+0x12fc>)
 80055b2:	781a      	ldrb	r2, [r3, #0]
 80055b4:	4b6e      	ldr	r3, [pc, #440]	@ (8005770 <checkAktifCalisma+0x1300>)
 80055b6:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 80055b8:	4b6e      	ldr	r3, [pc, #440]	@ (8005774 <checkAktifCalisma+0x1304>)
 80055ba:	2201      	movs	r2, #1
 80055bc:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 80055be:	4b65      	ldr	r3, [pc, #404]	@ (8005754 <checkAktifCalisma+0x12e4>)
 80055c0:	2200      	movs	r2, #0
 80055c2:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 80055c4:	4b67      	ldr	r3, [pc, #412]	@ (8005764 <checkAktifCalisma+0x12f4>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80055ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80055ce:	486a      	ldr	r0, [pc, #424]	@ (8005778 <checkAktifCalisma+0x1308>)
 80055d0:	f005 f8be 	bl	800a750 <HAL_GPIO_ReadPin>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d016      	beq.n	8005608 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80055da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80055de:	4866      	ldr	r0, [pc, #408]	@ (8005778 <checkAktifCalisma+0x1308>)
 80055e0:	f005 f8b6 	bl	800a750 <HAL_GPIO_ReadPin>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00e      	beq.n	8005608 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80055ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80055ee:	4862      	ldr	r0, [pc, #392]	@ (8005778 <checkAktifCalisma+0x1308>)
 80055f0:	f005 f8ae 	bl	800a750 <HAL_GPIO_ReadPin>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d006      	beq.n	8005608 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80055fa:	2140      	movs	r1, #64	@ 0x40
 80055fc:	4856      	ldr	r0, [pc, #344]	@ (8005758 <checkAktifCalisma+0x12e8>)
 80055fe:	f005 f8a7 	bl	800a750 <HAL_GPIO_ReadPin>
 8005602:	4603      	mov	r3, r0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d103      	bne.n	8005610 <checkAktifCalisma+0x11a0>

					startBasili=1;
 8005608:	4b5c      	ldr	r3, [pc, #368]	@ (800577c <checkAktifCalisma+0x130c>)
 800560a:	2201      	movs	r2, #1
 800560c:	701a      	strb	r2, [r3, #0]
 800560e:	e002      	b.n	8005616 <checkAktifCalisma+0x11a6>
				} else {
					startBasili=0;
 8005610:	4b5a      	ldr	r3, [pc, #360]	@ (800577c <checkAktifCalisma+0x130c>)
 8005612:	2200      	movs	r2, #0
 8005614:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005616:	4b59      	ldr	r3, [pc, #356]	@ (800577c <checkAktifCalisma+0x130c>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d014      	beq.n	8005648 <checkAktifCalisma+0x11d8>
 800561e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005622:	4855      	ldr	r0, [pc, #340]	@ (8005778 <checkAktifCalisma+0x1308>)
 8005624:	f005 f894 	bl	800a750 <HAL_GPIO_ReadPin>
 8005628:	4603      	mov	r3, r0
 800562a:	2b01      	cmp	r3, #1
 800562c:	d10c      	bne.n	8005648 <checkAktifCalisma+0x11d8>

					hataVar=1;
 800562e:	4b54      	ldr	r3, [pc, #336]	@ (8005780 <checkAktifCalisma+0x1310>)
 8005630:	2201      	movs	r2, #1
 8005632:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 8005634:	2001      	movs	r0, #1
 8005636:	f7fb fd13 	bl	8001060 <hataKoduLcdGoster>
					hata2EEPROM(1);
 800563a:	2001      	movs	r0, #1
 800563c:	f7fb fcb8 	bl	8000fb0 <hata2EEPROM>
					acilstophatasi=1;
 8005640:	4b50      	ldr	r3, [pc, #320]	@ (8005784 <checkAktifCalisma+0x1314>)
 8005642:	2201      	movs	r2, #1
 8005644:	701a      	strb	r2, [r3, #0]
 8005646:	e018      	b.n	800567a <checkAktifCalisma+0x120a>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005648:	4b4e      	ldr	r3, [pc, #312]	@ (8005784 <checkAktifCalisma+0x1314>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d014      	beq.n	800567a <checkAktifCalisma+0x120a>
 8005650:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005654:	4848      	ldr	r0, [pc, #288]	@ (8005778 <checkAktifCalisma+0x1308>)
 8005656:	f005 f87b 	bl	800a750 <HAL_GPIO_ReadPin>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10c      	bne.n	800567a <checkAktifCalisma+0x120a>
 8005660:	4b46      	ldr	r3, [pc, #280]	@ (800577c <checkAktifCalisma+0x130c>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	f083 0301 	eor.w	r3, r3, #1
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d005      	beq.n	800567a <checkAktifCalisma+0x120a>
					acilstophatasi=0;
 800566e:	4b45      	ldr	r3, [pc, #276]	@ (8005784 <checkAktifCalisma+0x1314>)
 8005670:	2200      	movs	r2, #0
 8005672:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 8005674:	2001      	movs	r0, #1
 8005676:	f7fe fcf1 	bl	800405c <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 800567a:	4b43      	ldr	r3, [pc, #268]	@ (8005788 <checkAktifCalisma+0x1318>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	f083 0301 	eor.w	r3, r3, #1
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d023      	beq.n	80056d0 <checkAktifCalisma+0x1260>
 8005688:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800568c:	483a      	ldr	r0, [pc, #232]	@ (8005778 <checkAktifCalisma+0x1308>)
 800568e:	f005 f85f 	bl	800a750 <HAL_GPIO_ReadPin>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <checkAktifCalisma+0x1230>
 8005698:	4b3c      	ldr	r3, [pc, #240]	@ (800578c <checkAktifCalisma+0x131c>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d017      	beq.n	80056d0 <checkAktifCalisma+0x1260>
 80056a0:	4b3b      	ldr	r3, [pc, #236]	@ (8005790 <checkAktifCalisma+0x1320>)
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d113      	bne.n	80056d0 <checkAktifCalisma+0x1260>
 80056a8:	4b3a      	ldr	r3, [pc, #232]	@ (8005794 <checkAktifCalisma+0x1324>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	f083 0301 	eor.w	r3, r3, #1
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00c      	beq.n	80056d0 <checkAktifCalisma+0x1260>
					hataVar=1;
 80056b6:	4b32      	ldr	r3, [pc, #200]	@ (8005780 <checkAktifCalisma+0x1310>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 80056bc:	2002      	movs	r0, #2
 80056be:	f7fb fccf 	bl	8001060 <hataKoduLcdGoster>
					hata2EEPROM(2);
 80056c2:	2002      	movs	r0, #2
 80056c4:	f7fb fc74 	bl	8000fb0 <hata2EEPROM>
					emniyetCercevesihatasi=1;
 80056c8:	4b32      	ldr	r3, [pc, #200]	@ (8005794 <checkAktifCalisma+0x1324>)
 80056ca:	2201      	movs	r2, #1
 80056cc:	701a      	strb	r2, [r3, #0]
 80056ce:	e017      	b.n	8005700 <checkAktifCalisma+0x1290>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80056d0:	4b30      	ldr	r3, [pc, #192]	@ (8005794 <checkAktifCalisma+0x1324>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d013      	beq.n	8005700 <checkAktifCalisma+0x1290>
 80056d8:	4b2b      	ldr	r3, [pc, #172]	@ (8005788 <checkAktifCalisma+0x1318>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00f      	beq.n	8005700 <checkAktifCalisma+0x1290>
 80056e0:	4b2d      	ldr	r3, [pc, #180]	@ (8005798 <checkAktifCalisma+0x1328>)
 80056e2:	781b      	ldrb	r3, [r3, #0]
 80056e4:	f083 0301 	eor.w	r3, r3, #1
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d008      	beq.n	8005700 <checkAktifCalisma+0x1290>
					emniyetCercevesihatasi=0;
 80056ee:	4b29      	ldr	r3, [pc, #164]	@ (8005794 <checkAktifCalisma+0x1324>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 80056f4:	4b25      	ldr	r3, [pc, #148]	@ (800578c <checkAktifCalisma+0x131c>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 80056fa:	2002      	movs	r0, #2
 80056fc:	f7fe fcae 	bl	800405c <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 8005700:	4b26      	ldr	r3, [pc, #152]	@ (800579c <checkAktifCalisma+0x132c>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d151      	bne.n	80057ac <checkAktifCalisma+0x133c>
 8005708:	4b25      	ldr	r3, [pc, #148]	@ (80057a0 <checkAktifCalisma+0x1330>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d14d      	bne.n	80057ac <checkAktifCalisma+0x133c>
 8005710:	4b24      	ldr	r3, [pc, #144]	@ (80057a4 <checkAktifCalisma+0x1334>)
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d049      	beq.n	80057ac <checkAktifCalisma+0x133c>
 8005718:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800571c:	480e      	ldr	r0, [pc, #56]	@ (8005758 <checkAktifCalisma+0x12e8>)
 800571e:	f005 f817 	bl	800a750 <HAL_GPIO_ReadPin>
 8005722:	4603      	mov	r3, r0
 8005724:	2b01      	cmp	r3, #1
 8005726:	d141      	bne.n	80057ac <checkAktifCalisma+0x133c>
 8005728:	4b1f      	ldr	r3, [pc, #124]	@ (80057a8 <checkAktifCalisma+0x1338>)
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	f083 0301 	eor.w	r3, r3, #1
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d03a      	beq.n	80057ac <checkAktifCalisma+0x133c>
					hataVar=1;
 8005736:	4b12      	ldr	r3, [pc, #72]	@ (8005780 <checkAktifCalisma+0x1310>)
 8005738:	2201      	movs	r2, #1
 800573a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 800573c:	2003      	movs	r0, #3
 800573e:	f7fb fc8f 	bl	8001060 <hataKoduLcdGoster>
					hata2EEPROM(3);
 8005742:	2003      	movs	r0, #3
 8005744:	f7fb fc34 	bl	8000fb0 <hata2EEPROM>
					basinchatasi=1;
 8005748:	4b17      	ldr	r3, [pc, #92]	@ (80057a8 <checkAktifCalisma+0x1338>)
 800574a:	2201      	movs	r2, #1
 800574c:	701a      	strb	r2, [r3, #0]
 800574e:	e043      	b.n	80057d8 <checkAktifCalisma+0x1368>
 8005750:	40010800 	.word	0x40010800
 8005754:	200010fb 	.word	0x200010fb
 8005758:	40011000 	.word	0x40011000
 800575c:	200010c2 	.word	0x200010c2
 8005760:	200010fd 	.word	0x200010fd
 8005764:	200010fc 	.word	0x200010fc
 8005768:	200010b4 	.word	0x200010b4
 800576c:	200010b6 	.word	0x200010b6
 8005770:	20000fec 	.word	0x20000fec
 8005774:	200010e8 	.word	0x200010e8
 8005778:	40010c00 	.word	0x40010c00
 800577c:	20001109 	.word	0x20001109
 8005780:	20001110 	.word	0x20001110
 8005784:	2000110b 	.word	0x2000110b
 8005788:	20001112 	.word	0x20001112
 800578c:	2000111c 	.word	0x2000111c
 8005790:	200010c0 	.word	0x200010c0
 8005794:	2000110c 	.word	0x2000110c
 8005798:	200010f4 	.word	0x200010f4
 800579c:	200010bf 	.word	0x200010bf
 80057a0:	200010c3 	.word	0x200010c3
 80057a4:	2000110f 	.word	0x2000110f
 80057a8:	20001119 	.word	0x20001119
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80057ac:	4b85      	ldr	r3, [pc, #532]	@ (80059c4 <checkAktifCalisma+0x1554>)
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d011      	beq.n	80057d8 <checkAktifCalisma+0x1368>
 80057b4:	4b84      	ldr	r3, [pc, #528]	@ (80059c8 <checkAktifCalisma+0x1558>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d10d      	bne.n	80057d8 <checkAktifCalisma+0x1368>
 80057bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80057c0:	4882      	ldr	r0, [pc, #520]	@ (80059cc <checkAktifCalisma+0x155c>)
 80057c2:	f004 ffc5 	bl	800a750 <HAL_GPIO_ReadPin>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d105      	bne.n	80057d8 <checkAktifCalisma+0x1368>
					basinchatasi=0;
 80057cc:	4b7d      	ldr	r3, [pc, #500]	@ (80059c4 <checkAktifCalisma+0x1554>)
 80057ce:	2200      	movs	r2, #0
 80057d0:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 80057d2:	2003      	movs	r0, #3
 80057d4:	f7fe fc42 	bl	800405c <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 80057d8:	4b7d      	ldr	r3, [pc, #500]	@ (80059d0 <checkAktifCalisma+0x1560>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d103      	bne.n	80057e8 <checkAktifCalisma+0x1378>
 80057e0:	4b7c      	ldr	r3, [pc, #496]	@ (80059d4 <checkAktifCalisma+0x1564>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d023      	beq.n	8005830 <checkAktifCalisma+0x13c0>
 80057e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057ec:	487a      	ldr	r0, [pc, #488]	@ (80059d8 <checkAktifCalisma+0x1568>)
 80057ee:	f004 ffaf 	bl	800a750 <HAL_GPIO_ReadPin>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d11b      	bne.n	8005830 <checkAktifCalisma+0x13c0>
 80057f8:	4b78      	ldr	r3, [pc, #480]	@ (80059dc <checkAktifCalisma+0x156c>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d003      	beq.n	8005808 <checkAktifCalisma+0x1398>
 8005800:	4b76      	ldr	r3, [pc, #472]	@ (80059dc <checkAktifCalisma+0x156c>)
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	2b03      	cmp	r3, #3
 8005806:	d113      	bne.n	8005830 <checkAktifCalisma+0x13c0>
 8005808:	4b75      	ldr	r3, [pc, #468]	@ (80059e0 <checkAktifCalisma+0x1570>)
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	f083 0301 	eor.w	r3, r3, #1
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00c      	beq.n	8005830 <checkAktifCalisma+0x13c0>
					hataVar=1;
 8005816:	4b73      	ldr	r3, [pc, #460]	@ (80059e4 <checkAktifCalisma+0x1574>)
 8005818:	2201      	movs	r2, #1
 800581a:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 800581c:	2004      	movs	r0, #4
 800581e:	f7fb fc1f 	bl	8001060 <hataKoduLcdGoster>
					hata2EEPROM(4);
 8005822:	2004      	movs	r0, #4
 8005824:	f7fb fbc4 	bl	8000fb0 <hata2EEPROM>
					katkapisivicihatasi=1;
 8005828:	4b6d      	ldr	r3, [pc, #436]	@ (80059e0 <checkAktifCalisma+0x1570>)
 800582a:	2201      	movs	r2, #1
 800582c:	701a      	strb	r2, [r3, #0]
 800582e:	e01f      	b.n	8005870 <checkAktifCalisma+0x1400>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005830:	4b6b      	ldr	r3, [pc, #428]	@ (80059e0 <checkAktifCalisma+0x1570>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d01b      	beq.n	8005870 <checkAktifCalisma+0x1400>
 8005838:	4b6b      	ldr	r3, [pc, #428]	@ (80059e8 <checkAktifCalisma+0x1578>)
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d017      	beq.n	8005870 <checkAktifCalisma+0x1400>
 8005840:	4b63      	ldr	r3, [pc, #396]	@ (80059d0 <checkAktifCalisma+0x1560>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	f083 0301 	eor.w	r3, r3, #1
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d010      	beq.n	8005870 <checkAktifCalisma+0x1400>
 800584e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005852:	4861      	ldr	r0, [pc, #388]	@ (80059d8 <checkAktifCalisma+0x1568>)
 8005854:	f004 ff7c 	bl	800a750 <HAL_GPIO_ReadPin>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d108      	bne.n	8005870 <checkAktifCalisma+0x1400>

					katkapisivicihatasi=0;
 800585e:	4b60      	ldr	r3, [pc, #384]	@ (80059e0 <checkAktifCalisma+0x1570>)
 8005860:	2200      	movs	r2, #0
 8005862:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8005864:	4b5b      	ldr	r3, [pc, #364]	@ (80059d4 <checkAktifCalisma+0x1564>)
 8005866:	2200      	movs	r2, #0
 8005868:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 800586a:	2004      	movs	r0, #4
 800586c:	f7fe fbf6 	bl	800405c <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 8005870:	4b57      	ldr	r3, [pc, #348]	@ (80059d0 <checkAktifCalisma+0x1560>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d103      	bne.n	8005880 <checkAktifCalisma+0x1410>
 8005878:	4b5c      	ldr	r3, [pc, #368]	@ (80059ec <checkAktifCalisma+0x157c>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d023      	beq.n	80058c8 <checkAktifCalisma+0x1458>
 8005880:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005884:	4854      	ldr	r0, [pc, #336]	@ (80059d8 <checkAktifCalisma+0x1568>)
 8005886:	f004 ff63 	bl	800a750 <HAL_GPIO_ReadPin>
 800588a:	4603      	mov	r3, r0
 800588c:	2b01      	cmp	r3, #1
 800588e:	d11b      	bne.n	80058c8 <checkAktifCalisma+0x1458>
 8005890:	4b52      	ldr	r3, [pc, #328]	@ (80059dc <checkAktifCalisma+0x156c>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d003      	beq.n	80058a0 <checkAktifCalisma+0x1430>
 8005898:	4b50      	ldr	r3, [pc, #320]	@ (80059dc <checkAktifCalisma+0x156c>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b03      	cmp	r3, #3
 800589e:	d113      	bne.n	80058c8 <checkAktifCalisma+0x1458>
 80058a0:	4b53      	ldr	r3, [pc, #332]	@ (80059f0 <checkAktifCalisma+0x1580>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	f083 0301 	eor.w	r3, r3, #1
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00c      	beq.n	80058c8 <checkAktifCalisma+0x1458>

					hataVar=1;
 80058ae:	4b4d      	ldr	r3, [pc, #308]	@ (80059e4 <checkAktifCalisma+0x1574>)
 80058b0:	2201      	movs	r2, #1
 80058b2:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 80058b4:	2005      	movs	r0, #5
 80058b6:	f7fb fbd3 	bl	8001060 <hataKoduLcdGoster>
					hata2EEPROM(5);
 80058ba:	2005      	movs	r0, #5
 80058bc:	f7fb fb78 	bl	8000fb0 <hata2EEPROM>
					tablakapisivicihatasi=1;
 80058c0:	4b4b      	ldr	r3, [pc, #300]	@ (80059f0 <checkAktifCalisma+0x1580>)
 80058c2:	2201      	movs	r2, #1
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	e023      	b.n	8005910 <checkAktifCalisma+0x14a0>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80058c8:	4b49      	ldr	r3, [pc, #292]	@ (80059f0 <checkAktifCalisma+0x1580>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d01f      	beq.n	8005910 <checkAktifCalisma+0x14a0>
 80058d0:	4b45      	ldr	r3, [pc, #276]	@ (80059e8 <checkAktifCalisma+0x1578>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01b      	beq.n	8005910 <checkAktifCalisma+0x14a0>
 80058d8:	4b3d      	ldr	r3, [pc, #244]	@ (80059d0 <checkAktifCalisma+0x1560>)
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	f083 0301 	eor.w	r3, r3, #1
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d014      	beq.n	8005910 <checkAktifCalisma+0x14a0>
 80058e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80058ea:	483b      	ldr	r0, [pc, #236]	@ (80059d8 <checkAktifCalisma+0x1568>)
 80058ec:	f004 ff30 	bl	800a750 <HAL_GPIO_ReadPin>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10c      	bne.n	8005910 <checkAktifCalisma+0x14a0>
 80058f6:	4b3c      	ldr	r3, [pc, #240]	@ (80059e8 <checkAktifCalisma+0x1578>)
 80058f8:	781b      	ldrb	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d008      	beq.n	8005910 <checkAktifCalisma+0x14a0>
					tablakapisivicihatasi=0;
 80058fe:	4b3c      	ldr	r3, [pc, #240]	@ (80059f0 <checkAktifCalisma+0x1580>)
 8005900:	2200      	movs	r2, #0
 8005902:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8005904:	4b39      	ldr	r3, [pc, #228]	@ (80059ec <checkAktifCalisma+0x157c>)
 8005906:	2200      	movs	r2, #0
 8005908:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 800590a:	2005      	movs	r0, #5
 800590c:	f7fe fba6 	bl	800405c <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 8005910:	4b38      	ldr	r3, [pc, #224]	@ (80059f4 <checkAktifCalisma+0x1584>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d107      	bne.n	8005928 <checkAktifCalisma+0x14b8>
 8005918:	4b37      	ldr	r3, [pc, #220]	@ (80059f8 <checkAktifCalisma+0x1588>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d103      	bne.n	8005928 <checkAktifCalisma+0x14b8>
 8005920:	4b36      	ldr	r3, [pc, #216]	@ (80059fc <checkAktifCalisma+0x158c>)
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01b      	beq.n	8005960 <checkAktifCalisma+0x14f0>
 8005928:	4b35      	ldr	r3, [pc, #212]	@ (8005a00 <checkAktifCalisma+0x1590>)
 800592a:	781b      	ldrb	r3, [r3, #0]
 800592c:	f083 0301 	eor.w	r3, r3, #1
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d014      	beq.n	8005960 <checkAktifCalisma+0x14f0>
				    if(millis-timer4>=makineCalismaTmr) {
 8005936:	4b33      	ldr	r3, [pc, #204]	@ (8005a04 <checkAktifCalisma+0x1594>)
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	4b33      	ldr	r3, [pc, #204]	@ (8005a08 <checkAktifCalisma+0x1598>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	4a32      	ldr	r2, [pc, #200]	@ (8005a0c <checkAktifCalisma+0x159c>)
 8005942:	7812      	ldrb	r2, [r2, #0]
 8005944:	4293      	cmp	r3, r2
 8005946:	d30b      	bcc.n	8005960 <checkAktifCalisma+0x14f0>
					  	hataVar=1;
 8005948:	4b26      	ldr	r3, [pc, #152]	@ (80059e4 <checkAktifCalisma+0x1574>)
 800594a:	2201      	movs	r2, #1
 800594c:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 800594e:	2006      	movs	r0, #6
 8005950:	f7fb fb86 	bl	8001060 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8005954:	2006      	movs	r0, #6
 8005956:	f7fb fb2b 	bl	8000fb0 <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 800595a:	4b29      	ldr	r3, [pc, #164]	@ (8005a00 <checkAktifCalisma+0x1590>)
 800595c:	2201      	movs	r2, #1
 800595e:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8005960:	4b27      	ldr	r3, [pc, #156]	@ (8005a00 <checkAktifCalisma+0x1590>)
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d013      	beq.n	8005990 <checkAktifCalisma+0x1520>
 8005968:	2108      	movs	r1, #8
 800596a:	481b      	ldr	r0, [pc, #108]	@ (80059d8 <checkAktifCalisma+0x1568>)
 800596c:	f004 fef0 	bl	800a750 <HAL_GPIO_ReadPin>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00c      	beq.n	8005990 <checkAktifCalisma+0x1520>
 8005976:	4b16      	ldr	r3, [pc, #88]	@ (80059d0 <checkAktifCalisma+0x1560>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	f083 0301 	eor.w	r3, r3, #1
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d005      	beq.n	8005990 <checkAktifCalisma+0x1520>
					maksimumcalismahatasi=0;
 8005984:	4b1e      	ldr	r3, [pc, #120]	@ (8005a00 <checkAktifCalisma+0x1590>)
 8005986:	2200      	movs	r2, #0
 8005988:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 800598a:	2006      	movs	r0, #6
 800598c:	f7fe fb66 	bl	800405c <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8005990:	4b1f      	ldr	r3, [pc, #124]	@ (8005a10 <checkAktifCalisma+0x15a0>)
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10b      	bne.n	80059b0 <checkAktifCalisma+0x1540>
 8005998:	4b17      	ldr	r3, [pc, #92]	@ (80059f8 <checkAktifCalisma+0x1588>)
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d107      	bne.n	80059b0 <checkAktifCalisma+0x1540>
 80059a0:	4b1c      	ldr	r3, [pc, #112]	@ (8005a14 <checkAktifCalisma+0x15a4>)
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d103      	bne.n	80059b0 <checkAktifCalisma+0x1540>
 80059a8:	4b14      	ldr	r3, [pc, #80]	@ (80059fc <checkAktifCalisma+0x158c>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d035      	beq.n	8005a1c <checkAktifCalisma+0x15ac>
					makineCalisiyor=0;
 80059b0:	4b19      	ldr	r3, [pc, #100]	@ (8005a18 <checkAktifCalisma+0x15a8>)
 80059b2:	2200      	movs	r2, #0
 80059b4:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 80059b6:	4b07      	ldr	r3, [pc, #28]	@ (80059d4 <checkAktifCalisma+0x1564>)
 80059b8:	2201      	movs	r2, #1
 80059ba:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 80059bc:	4b0b      	ldr	r3, [pc, #44]	@ (80059ec <checkAktifCalisma+0x157c>)
 80059be:	2201      	movs	r2, #1
 80059c0:	701a      	strb	r2, [r3, #0]
 80059c2:	e032      	b.n	8005a2a <checkAktifCalisma+0x15ba>
 80059c4:	20001119 	.word	0x20001119
 80059c8:	200010bf 	.word	0x200010bf
 80059cc:	40010c00 	.word	0x40010c00
 80059d0:	20001109 	.word	0x20001109
 80059d4:	2000111d 	.word	0x2000111d
 80059d8:	40010800 	.word	0x40010800
 80059dc:	200010c4 	.word	0x200010c4
 80059e0:	2000111a 	.word	0x2000111a
 80059e4:	20001110 	.word	0x20001110
 80059e8:	200010fd 	.word	0x200010fd
 80059ec:	2000111e 	.word	0x2000111e
 80059f0:	2000111b 	.word	0x2000111b
 80059f4:	2000110f 	.word	0x2000110f
 80059f8:	200010f4 	.word	0x200010f4
 80059fc:	200010f3 	.word	0x200010f3
 8005a00:	2000110a 	.word	0x2000110a
 8005a04:	20001094 	.word	0x20001094
 8005a08:	200010a8 	.word	0x200010a8
 8005a0c:	200010d4 	.word	0x200010d4
 8005a10:	200010f1 	.word	0x200010f1
 8005a14:	200010f2 	.word	0x200010f2
 8005a18:	20001111 	.word	0x20001111
				} else {
					makineCalisiyor=1;
 8005a1c:	4b3a      	ldr	r3, [pc, #232]	@ (8005b08 <checkAktifCalisma+0x1698>)
 8005a1e:	2201      	movs	r2, #1
 8005a20:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8005a22:	4b3a      	ldr	r3, [pc, #232]	@ (8005b0c <checkAktifCalisma+0x169c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a3a      	ldr	r2, [pc, #232]	@ (8005b10 <checkAktifCalisma+0x16a0>)
 8005a28:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8005a2a:	4b3a      	ldr	r3, [pc, #232]	@ (8005b14 <checkAktifCalisma+0x16a4>)
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d02f      	beq.n	8005a92 <checkAktifCalisma+0x1622>
 8005a32:	4b39      	ldr	r3, [pc, #228]	@ (8005b18 <checkAktifCalisma+0x16a8>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	f083 0301 	eor.w	r3, r3, #1
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d028      	beq.n	8005a92 <checkAktifCalisma+0x1622>
 8005a40:	4b36      	ldr	r3, [pc, #216]	@ (8005b1c <checkAktifCalisma+0x16ac>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	f083 0301 	eor.w	r3, r3, #1
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d021      	beq.n	8005a92 <checkAktifCalisma+0x1622>
 8005a4e:	4b34      	ldr	r3, [pc, #208]	@ (8005b20 <checkAktifCalisma+0x16b0>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	f083 0301 	eor.w	r3, r3, #1
 8005a56:	b2db      	uxtb	r3, r3
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d01a      	beq.n	8005a92 <checkAktifCalisma+0x1622>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8005a5c:	4b31      	ldr	r3, [pc, #196]	@ (8005b24 <checkAktifCalisma+0x16b4>)
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	f083 0301 	eor.w	r3, r3, #1
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d013      	beq.n	8005a92 <checkAktifCalisma+0x1622>
 8005a6a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b28 <checkAktifCalisma+0x16b8>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	f083 0301 	eor.w	r3, r3, #1
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00c      	beq.n	8005a92 <checkAktifCalisma+0x1622>
 8005a78:	4b2c      	ldr	r3, [pc, #176]	@ (8005b2c <checkAktifCalisma+0x16bc>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	f083 0301 	eor.w	r3, r3, #1
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d005      	beq.n	8005a92 <checkAktifCalisma+0x1622>

					hataVar=0;
 8005a86:	4b23      	ldr	r3, [pc, #140]	@ (8005b14 <checkAktifCalisma+0x16a4>)
 8005a88:	2200      	movs	r2, #0
 8005a8a:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8005a8c:	2007      	movs	r0, #7
 8005a8e:	f7fe fae5 	bl	800405c <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 8005a92:	4b20      	ldr	r3, [pc, #128]	@ (8005b14 <checkAktifCalisma+0x16a4>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d02a      	beq.n	8005af0 <checkAktifCalisma+0x1680>
 8005a9a:	4b1f      	ldr	r3, [pc, #124]	@ (8005b18 <checkAktifCalisma+0x16a8>)
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	f083 0301 	eor.w	r3, r3, #1
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d023      	beq.n	8005af0 <checkAktifCalisma+0x1680>
 8005aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8005b1c <checkAktifCalisma+0x16ac>)
 8005aaa:	781b      	ldrb	r3, [r3, #0]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d01f      	beq.n	8005af0 <checkAktifCalisma+0x1680>
 8005ab0:	4b1b      	ldr	r3, [pc, #108]	@ (8005b20 <checkAktifCalisma+0x16b0>)
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	f083 0301 	eor.w	r3, r3, #1
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d018      	beq.n	8005af0 <checkAktifCalisma+0x1680>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 8005abe:	4b19      	ldr	r3, [pc, #100]	@ (8005b24 <checkAktifCalisma+0x16b4>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	f083 0301 	eor.w	r3, r3, #1
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d011      	beq.n	8005af0 <checkAktifCalisma+0x1680>
 8005acc:	4b16      	ldr	r3, [pc, #88]	@ (8005b28 <checkAktifCalisma+0x16b8>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	f083 0301 	eor.w	r3, r3, #1
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <checkAktifCalisma+0x1680>
 8005ada:	4b14      	ldr	r3, [pc, #80]	@ (8005b2c <checkAktifCalisma+0x16bc>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	f083 0301 	eor.w	r3, r3, #1
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <checkAktifCalisma+0x1680>
				{
					EmnCerHataMakYukariCalis=1;
 8005ae8:	4b11      	ldr	r3, [pc, #68]	@ (8005b30 <checkAktifCalisma+0x16c0>)
 8005aea:	2201      	movs	r2, #1
 8005aec:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 8005aee:	e009      	b.n	8005b04 <checkAktifCalisma+0x1694>
				else if(emniyetCercevesihatasi==0)
 8005af0:	4b0a      	ldr	r3, [pc, #40]	@ (8005b1c <checkAktifCalisma+0x16ac>)
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	f083 0301 	eor.w	r3, r3, #1
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <checkAktifCalisma+0x1694>
					EmnCerHataMakYukariCalis=0;
 8005afe:	4b0c      	ldr	r3, [pc, #48]	@ (8005b30 <checkAktifCalisma+0x16c0>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	701a      	strb	r2, [r3, #0]
}
 8005b04:	bf00      	nop
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	20001111 	.word	0x20001111
 8005b0c:	20001094 	.word	0x20001094
 8005b10:	200010a8 	.word	0x200010a8
 8005b14:	20001110 	.word	0x20001110
 8005b18:	2000110b 	.word	0x2000110b
 8005b1c:	2000110c 	.word	0x2000110c
 8005b20:	20001119 	.word	0x20001119
 8005b24:	2000111a 	.word	0x2000111a
 8005b28:	2000111b 	.word	0x2000111b
 8005b2c:	2000110a 	.word	0x2000110a
 8005b30:	2000111f 	.word	0x2000111f

08005b34 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8005b38:	4b8b      	ldr	r3, [pc, #556]	@ (8005d68 <checkDemoModCalisma+0x234>)
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	f040 81c4 	bne.w	8005eca <checkDemoModCalisma+0x396>
 8005b42:	4b8a      	ldr	r3, [pc, #552]	@ (8005d6c <checkDemoModCalisma+0x238>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 81bf 	beq.w	8005eca <checkDemoModCalisma+0x396>
 8005b4c:	4b88      	ldr	r3, [pc, #544]	@ (8005d70 <checkDemoModCalisma+0x23c>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f040 81ba 	bne.w	8005eca <checkDemoModCalisma+0x396>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005b56:	2102      	movs	r1, #2
 8005b58:	4886      	ldr	r0, [pc, #536]	@ (8005d74 <checkDemoModCalisma+0x240>)
 8005b5a:	f004 fdf9 	bl	800a750 <HAL_GPIO_ReadPin>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d11d      	bne.n	8005ba0 <checkDemoModCalisma+0x6c>
						&& (demoAsagiCalis==0)
 8005b64:	4b84      	ldr	r3, [pc, #528]	@ (8005d78 <checkDemoModCalisma+0x244>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	f083 0301 	eor.w	r3, r3, #1
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d016      	beq.n	8005ba0 <checkDemoModCalisma+0x6c>
						&& (demoDevYukari==0)
 8005b72:	4b82      	ldr	r3, [pc, #520]	@ (8005d7c <checkDemoModCalisma+0x248>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	f083 0301 	eor.w	r3, r3, #1
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d00f      	beq.n	8005ba0 <checkDemoModCalisma+0x6c>
						&& (demoDevAsagi==0)) {
 8005b80:	4b7f      	ldr	r3, [pc, #508]	@ (8005d80 <checkDemoModCalisma+0x24c>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	f083 0301 	eor.w	r3, r3, #1
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d008      	beq.n	8005ba0 <checkDemoModCalisma+0x6c>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005b8e:	2201      	movs	r2, #1
 8005b90:	2104      	movs	r1, #4
 8005b92:	487c      	ldr	r0, [pc, #496]	@ (8005d84 <checkDemoModCalisma+0x250>)
 8005b94:	f004 fdf3 	bl	800a77e <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8005b98:	4b7b      	ldr	r3, [pc, #492]	@ (8005d88 <checkDemoModCalisma+0x254>)
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	701a      	strb	r2, [r3, #0]
 8005b9e:	e00e      	b.n	8005bbe <checkDemoModCalisma+0x8a>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005ba0:	2102      	movs	r1, #2
 8005ba2:	4874      	ldr	r0, [pc, #464]	@ (8005d74 <checkDemoModCalisma+0x240>)
 8005ba4:	f004 fdd4 	bl	800a750 <HAL_GPIO_ReadPin>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d107      	bne.n	8005bbe <checkDemoModCalisma+0x8a>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2104      	movs	r1, #4
 8005bb2:	4874      	ldr	r0, [pc, #464]	@ (8005d84 <checkDemoModCalisma+0x250>)
 8005bb4:	f004 fde3 	bl	800a77e <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8005bb8:	4b73      	ldr	r3, [pc, #460]	@ (8005d88 <checkDemoModCalisma+0x254>)
 8005bba:	2200      	movs	r2, #0
 8005bbc:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8005bbe:	4b72      	ldr	r3, [pc, #456]	@ (8005d88 <checkDemoModCalisma+0x254>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10b      	bne.n	8005bde <checkDemoModCalisma+0xaa>
 8005bc6:	4b6d      	ldr	r3, [pc, #436]	@ (8005d7c <checkDemoModCalisma+0x248>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d107      	bne.n	8005bde <checkDemoModCalisma+0xaa>
 8005bce:	4b6c      	ldr	r3, [pc, #432]	@ (8005d80 <checkDemoModCalisma+0x24c>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d103      	bne.n	8005bde <checkDemoModCalisma+0xaa>
 8005bd6:	4b68      	ldr	r3, [pc, #416]	@ (8005d78 <checkDemoModCalisma+0x244>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00c      	beq.n	8005bf8 <checkDemoModCalisma+0xc4>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005bde:	2201      	movs	r2, #1
 8005be0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005be4:	4867      	ldr	r0, [pc, #412]	@ (8005d84 <checkDemoModCalisma+0x250>)
 8005be6:	f004 fdca 	bl	800a77e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005bea:	2201      	movs	r2, #1
 8005bec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005bf0:	4864      	ldr	r0, [pc, #400]	@ (8005d84 <checkDemoModCalisma+0x250>)
 8005bf2:	f004 fdc4 	bl	800a77e <HAL_GPIO_WritePin>
 8005bf6:	e00b      	b.n	8005c10 <checkDemoModCalisma+0xdc>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005bfe:	4861      	ldr	r0, [pc, #388]	@ (8005d84 <checkDemoModCalisma+0x250>)
 8005c00:	f004 fdbd 	bl	800a77e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005c04:	2200      	movs	r2, #0
 8005c06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c0a:	485e      	ldr	r0, [pc, #376]	@ (8005d84 <checkDemoModCalisma+0x250>)
 8005c0c:	f004 fdb7 	bl	800a77e <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c10:	2102      	movs	r1, #2
 8005c12:	4858      	ldr	r0, [pc, #352]	@ (8005d74 <checkDemoModCalisma+0x240>)
 8005c14:	f004 fd9c 	bl	800a750 <HAL_GPIO_ReadPin>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d10d      	bne.n	8005c3a <checkDemoModCalisma+0x106>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005c1e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c22:	4854      	ldr	r0, [pc, #336]	@ (8005d74 <checkDemoModCalisma+0x240>)
 8005c24:	f004 fd94 	bl	800a750 <HAL_GPIO_ReadPin>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d105      	bne.n	8005c3a <checkDemoModCalisma+0x106>
						&& (demoYukariCalis==0)
 8005c2e:	4b56      	ldr	r3, [pc, #344]	@ (8005d88 <checkDemoModCalisma+0x254>)
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	f083 0301 	eor.w	r3, r3, #1
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005c3a:	2102      	movs	r1, #2
 8005c3c:	484d      	ldr	r0, [pc, #308]	@ (8005d74 <checkDemoModCalisma+0x240>)
 8005c3e:	f004 fd87 	bl	800a750 <HAL_GPIO_ReadPin>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d125      	bne.n	8005c94 <checkDemoModCalisma+0x160>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005c48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005c4c:	4849      	ldr	r0, [pc, #292]	@ (8005d74 <checkDemoModCalisma+0x240>)
 8005c4e:	f004 fd7f 	bl	800a750 <HAL_GPIO_ReadPin>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d11d      	bne.n	8005c94 <checkDemoModCalisma+0x160>
						&&(demoYukariCalis==0)
 8005c58:	4b4b      	ldr	r3, [pc, #300]	@ (8005d88 <checkDemoModCalisma+0x254>)
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	f083 0301 	eor.w	r3, r3, #1
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d016      	beq.n	8005c94 <checkDemoModCalisma+0x160>
						&&(demoAsagiCalis==0)
 8005c66:	4b44      	ldr	r3, [pc, #272]	@ (8005d78 <checkDemoModCalisma+0x244>)
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	f083 0301 	eor.w	r3, r3, #1
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00f      	beq.n	8005c94 <checkDemoModCalisma+0x160>
						&& (demoDevAsagi==0)) {
 8005c74:	4b42      	ldr	r3, [pc, #264]	@ (8005d80 <checkDemoModCalisma+0x24c>)
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	f083 0301 	eor.w	r3, r3, #1
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d008      	beq.n	8005c94 <checkDemoModCalisma+0x160>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005c82:	2201      	movs	r2, #1
 8005c84:	2120      	movs	r1, #32
 8005c86:	483b      	ldr	r0, [pc, #236]	@ (8005d74 <checkDemoModCalisma+0x240>)
 8005c88:	f004 fd79 	bl	800a77e <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8005c8c:	4b3b      	ldr	r3, [pc, #236]	@ (8005d7c <checkDemoModCalisma+0x248>)
 8005c8e:	2201      	movs	r2, #1
 8005c90:	701a      	strb	r2, [r3, #0]
 8005c92:	e007      	b.n	8005ca4 <checkDemoModCalisma+0x170>
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005c94:	2200      	movs	r2, #0
 8005c96:	2120      	movs	r1, #32
 8005c98:	4836      	ldr	r0, [pc, #216]	@ (8005d74 <checkDemoModCalisma+0x240>)
 8005c9a:	f004 fd70 	bl	800a77e <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8005c9e:	4b37      	ldr	r3, [pc, #220]	@ (8005d7c <checkDemoModCalisma+0x248>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005ca4:	2102      	movs	r1, #2
 8005ca6:	4833      	ldr	r0, [pc, #204]	@ (8005d74 <checkDemoModCalisma+0x240>)
 8005ca8:	f004 fd52 	bl	800a750 <HAL_GPIO_ReadPin>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d125      	bne.n	8005cfe <checkDemoModCalisma+0x1ca>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8005cb2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005cb6:	482f      	ldr	r0, [pc, #188]	@ (8005d74 <checkDemoModCalisma+0x240>)
 8005cb8:	f004 fd4a 	bl	800a750 <HAL_GPIO_ReadPin>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d11d      	bne.n	8005cfe <checkDemoModCalisma+0x1ca>
						&&(demoYukariCalis==0)
 8005cc2:	4b31      	ldr	r3, [pc, #196]	@ (8005d88 <checkDemoModCalisma+0x254>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	f083 0301 	eor.w	r3, r3, #1
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d016      	beq.n	8005cfe <checkDemoModCalisma+0x1ca>
						&&(demoDevYukari==0)
 8005cd0:	4b2a      	ldr	r3, [pc, #168]	@ (8005d7c <checkDemoModCalisma+0x248>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	f083 0301 	eor.w	r3, r3, #1
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00f      	beq.n	8005cfe <checkDemoModCalisma+0x1ca>
						&& (demoAsagiCalis==0)) {
 8005cde:	4b26      	ldr	r3, [pc, #152]	@ (8005d78 <checkDemoModCalisma+0x244>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	f083 0301 	eor.w	r3, r3, #1
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d008      	beq.n	8005cfe <checkDemoModCalisma+0x1ca>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005cec:	2201      	movs	r2, #1
 8005cee:	2110      	movs	r1, #16
 8005cf0:	4820      	ldr	r0, [pc, #128]	@ (8005d74 <checkDemoModCalisma+0x240>)
 8005cf2:	f004 fd44 	bl	800a77e <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8005cf6:	4b22      	ldr	r3, [pc, #136]	@ (8005d80 <checkDemoModCalisma+0x24c>)
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	701a      	strb	r2, [r3, #0]
 8005cfc:	e007      	b.n	8005d0e <checkDemoModCalisma+0x1da>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005cfe:	2200      	movs	r2, #0
 8005d00:	2110      	movs	r1, #16
 8005d02:	481c      	ldr	r0, [pc, #112]	@ (8005d74 <checkDemoModCalisma+0x240>)
 8005d04:	f004 fd3b 	bl	800a77e <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8005d08:	4b1d      	ldr	r3, [pc, #116]	@ (8005d80 <checkDemoModCalisma+0x24c>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005d0e:	2104      	movs	r1, #4
 8005d10:	4818      	ldr	r0, [pc, #96]	@ (8005d74 <checkDemoModCalisma+0x240>)
 8005d12:	f004 fd1d 	bl	800a750 <HAL_GPIO_ReadPin>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d139      	bne.n	8005d90 <checkDemoModCalisma+0x25c>
						&& (demoYukariCalis==0)
 8005d1c:	4b1a      	ldr	r3, [pc, #104]	@ (8005d88 <checkDemoModCalisma+0x254>)
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	f083 0301 	eor.w	r3, r3, #1
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d032      	beq.n	8005d90 <checkDemoModCalisma+0x25c>
						&& (demoDevAsagi==0)
 8005d2a:	4b15      	ldr	r3, [pc, #84]	@ (8005d80 <checkDemoModCalisma+0x24c>)
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	f083 0301 	eor.w	r3, r3, #1
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d02b      	beq.n	8005d90 <checkDemoModCalisma+0x25c>
						&& (demoDevYukari==0)) {
 8005d38:	4b10      	ldr	r3, [pc, #64]	@ (8005d7c <checkDemoModCalisma+0x248>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	f083 0301 	eor.w	r3, r3, #1
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d024      	beq.n	8005d90 <checkDemoModCalisma+0x25c>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005d46:	2201      	movs	r2, #1
 8005d48:	2102      	movs	r1, #2
 8005d4a:	480e      	ldr	r0, [pc, #56]	@ (8005d84 <checkDemoModCalisma+0x250>)
 8005d4c:	f004 fd17 	bl	800a77e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005d50:	2201      	movs	r2, #1
 8005d52:	2101      	movs	r1, #1
 8005d54:	480b      	ldr	r0, [pc, #44]	@ (8005d84 <checkDemoModCalisma+0x250>)
 8005d56:	f004 fd12 	bl	800a77e <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8005d5a:	4b07      	ldr	r3, [pc, #28]	@ (8005d78 <checkDemoModCalisma+0x244>)
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 8005d60:	4b0a      	ldr	r3, [pc, #40]	@ (8005d8c <checkDemoModCalisma+0x258>)
 8005d62:	2201      	movs	r2, #1
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	e027      	b.n	8005db8 <checkDemoModCalisma+0x284>
 8005d68:	200010da 	.word	0x200010da
 8005d6c:	2000110d 	.word	0x2000110d
 8005d70:	200010d9 	.word	0x200010d9
 8005d74:	40011000 	.word	0x40011000
 8005d78:	20001114 	.word	0x20001114
 8005d7c:	20001115 	.word	0x20001115
 8005d80:	20001116 	.word	0x20001116
 8005d84:	40010c00 	.word	0x40010c00
 8005d88:	20001113 	.word	0x20001113
 8005d8c:	200010fa 	.word	0x200010fa
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8005d90:	2104      	movs	r1, #4
 8005d92:	486d      	ldr	r0, [pc, #436]	@ (8005f48 <checkDemoModCalisma+0x414>)
 8005d94:	f004 fcdc 	bl	800a750 <HAL_GPIO_ReadPin>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d10c      	bne.n	8005db8 <checkDemoModCalisma+0x284>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005d9e:	2200      	movs	r2, #0
 8005da0:	2102      	movs	r1, #2
 8005da2:	486a      	ldr	r0, [pc, #424]	@ (8005f4c <checkDemoModCalisma+0x418>)
 8005da4:	f004 fceb 	bl	800a77e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005da8:	2200      	movs	r2, #0
 8005daa:	2101      	movs	r1, #1
 8005dac:	4867      	ldr	r0, [pc, #412]	@ (8005f4c <checkDemoModCalisma+0x418>)
 8005dae:	f004 fce6 	bl	800a77e <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8005db2:	4b67      	ldr	r3, [pc, #412]	@ (8005f50 <checkDemoModCalisma+0x41c>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8005db8:	2104      	movs	r1, #4
 8005dba:	4863      	ldr	r0, [pc, #396]	@ (8005f48 <checkDemoModCalisma+0x414>)
 8005dbc:	f004 fcc8 	bl	800a750 <HAL_GPIO_ReadPin>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d10d      	bne.n	8005de2 <checkDemoModCalisma+0x2ae>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	2180      	movs	r1, #128	@ 0x80
 8005dca:	4862      	ldr	r0, [pc, #392]	@ (8005f54 <checkDemoModCalisma+0x420>)
 8005dcc:	f004 fcd7 	bl	800a77e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	2120      	movs	r1, #32
 8005dd4:	485f      	ldr	r0, [pc, #380]	@ (8005f54 <checkDemoModCalisma+0x420>)
 8005dd6:	f004 fcd2 	bl	800a77e <HAL_GPIO_WritePin>
					timer3 = millis;
 8005dda:	4b5f      	ldr	r3, [pc, #380]	@ (8005f58 <checkDemoModCalisma+0x424>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a5f      	ldr	r2, [pc, #380]	@ (8005f5c <checkDemoModCalisma+0x428>)
 8005de0:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005de2:	4b5d      	ldr	r3, [pc, #372]	@ (8005f58 <checkDemoModCalisma+0x424>)
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	4b5d      	ldr	r3, [pc, #372]	@ (8005f5c <checkDemoModCalisma+0x428>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	1ad3      	subs	r3, r2, r3
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d909      	bls.n	8005e04 <checkDemoModCalisma+0x2d0>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005df0:	2200      	movs	r2, #0
 8005df2:	2180      	movs	r1, #128	@ 0x80
 8005df4:	4857      	ldr	r0, [pc, #348]	@ (8005f54 <checkDemoModCalisma+0x420>)
 8005df6:	f004 fcc2 	bl	800a77e <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	2120      	movs	r1, #32
 8005dfe:	4855      	ldr	r0, [pc, #340]	@ (8005f54 <checkDemoModCalisma+0x420>)
 8005e00:	f004 fcbd 	bl	800a77e <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005e04:	2102      	movs	r1, #2
 8005e06:	4850      	ldr	r0, [pc, #320]	@ (8005f48 <checkDemoModCalisma+0x414>)
 8005e08:	f004 fca2 	bl	800a750 <HAL_GPIO_ReadPin>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d108      	bne.n	8005e24 <checkDemoModCalisma+0x2f0>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005e12:	2201      	movs	r2, #1
 8005e14:	2140      	movs	r1, #64	@ 0x40
 8005e16:	484f      	ldr	r0, [pc, #316]	@ (8005f54 <checkDemoModCalisma+0x420>)
 8005e18:	f004 fcb1 	bl	800a77e <HAL_GPIO_WritePin>
					timer3 = millis;
 8005e1c:	4b4e      	ldr	r3, [pc, #312]	@ (8005f58 <checkDemoModCalisma+0x424>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a4e      	ldr	r2, [pc, #312]	@ (8005f5c <checkDemoModCalisma+0x428>)
 8005e22:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005e24:	4b4c      	ldr	r3, [pc, #304]	@ (8005f58 <checkDemoModCalisma+0x424>)
 8005e26:	681a      	ldr	r2, [r3, #0]
 8005e28:	4b4c      	ldr	r3, [pc, #304]	@ (8005f5c <checkDemoModCalisma+0x428>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d904      	bls.n	8005e3c <checkDemoModCalisma+0x308>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005e32:	2200      	movs	r2, #0
 8005e34:	2140      	movs	r1, #64	@ 0x40
 8005e36:	4847      	ldr	r0, [pc, #284]	@ (8005f54 <checkDemoModCalisma+0x420>)
 8005e38:	f004 fca1 	bl	800a77e <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8005e3c:	4b48      	ldr	r3, [pc, #288]	@ (8005f60 <checkDemoModCalisma+0x42c>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d024      	beq.n	8005e8e <checkDemoModCalisma+0x35a>
 8005e44:	4b47      	ldr	r3, [pc, #284]	@ (8005f64 <checkDemoModCalisma+0x430>)
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d020      	beq.n	8005e8e <checkDemoModCalisma+0x35a>

					calismaSayisiDemo++;
 8005e4c:	4b46      	ldr	r3, [pc, #280]	@ (8005f68 <checkDemoModCalisma+0x434>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	3301      	adds	r3, #1
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	4b44      	ldr	r3, [pc, #272]	@ (8005f68 <checkDemoModCalisma+0x434>)
 8005e56:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8005e58:	4b44      	ldr	r3, [pc, #272]	@ (8005f6c <checkDemoModCalisma+0x438>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2bff      	cmp	r3, #255	@ 0xff
 8005e5e:	d108      	bne.n	8005e72 <checkDemoModCalisma+0x33e>
							calismaSayisi = 0;
 8005e60:	4b42      	ldr	r3, [pc, #264]	@ (8005f6c <checkDemoModCalisma+0x438>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	701a      	strb	r2, [r3, #0]
							calismaCount++;
 8005e66:	4b42      	ldr	r3, [pc, #264]	@ (8005f70 <checkDemoModCalisma+0x43c>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	4b40      	ldr	r3, [pc, #256]	@ (8005f70 <checkDemoModCalisma+0x43c>)
 8005e70:	701a      	strb	r2, [r3, #0]
				}
					eepromData[28] = calismaSayisiDemo;
 8005e72:	4b3d      	ldr	r3, [pc, #244]	@ (8005f68 <checkDemoModCalisma+0x434>)
 8005e74:	781a      	ldrb	r2, [r3, #0]
 8005e76:	4b3f      	ldr	r3, [pc, #252]	@ (8005f74 <checkDemoModCalisma+0x440>)
 8005e78:	771a      	strb	r2, [r3, #28]
					eepromData[30] = calismaCountDemo;
 8005e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8005f78 <checkDemoModCalisma+0x444>)
 8005e7c:	781a      	ldrb	r2, [r3, #0]
 8005e7e:	4b3d      	ldr	r3, [pc, #244]	@ (8005f74 <checkDemoModCalisma+0x440>)
 8005e80:	779a      	strb	r2, [r3, #30]

					hafizaYaz=1;
 8005e82:	4b3e      	ldr	r3, [pc, #248]	@ (8005f7c <checkDemoModCalisma+0x448>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 8005e88:	4b36      	ldr	r3, [pc, #216]	@ (8005f64 <checkDemoModCalisma+0x430>)
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8005e8e:	4b3c      	ldr	r3, [pc, #240]	@ (8005f80 <checkDemoModCalisma+0x44c>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d156      	bne.n	8005f44 <checkDemoModCalisma+0x410>
					lcd_print(2,1,"Cycle     ");
 8005e96:	4a3b      	ldr	r2, [pc, #236]	@ (8005f84 <checkDemoModCalisma+0x450>)
 8005e98:	2101      	movs	r1, #1
 8005e9a:	2002      	movs	r0, #2
 8005e9c:	f003 f92e 	bl	80090fc <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8005ea0:	4a39      	ldr	r2, [pc, #228]	@ (8005f88 <checkDemoModCalisma+0x454>)
 8005ea2:	2101      	movs	r1, #1
 8005ea4:	2001      	movs	r0, #1
 8005ea6:	f003 f929 	bl	80090fc <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 8005eaa:	4b2f      	ldr	r3, [pc, #188]	@ (8005f68 <checkDemoModCalisma+0x434>)
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	220a      	movs	r2, #10
 8005eb0:	4936      	ldr	r1, [pc, #216]	@ (8005f8c <checkDemoModCalisma+0x458>)
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f007 fcd4 	bl	800d860 <itoa>
					lcd_print(2,11,snum);
 8005eb8:	4a34      	ldr	r2, [pc, #208]	@ (8005f8c <checkDemoModCalisma+0x458>)
 8005eba:	210b      	movs	r1, #11
 8005ebc:	2002      	movs	r0, #2
 8005ebe:	f003 f91d 	bl	80090fc <lcd_print>
					mesajYazildi=1;
 8005ec2:	4b33      	ldr	r3, [pc, #204]	@ (8005f90 <checkDemoModCalisma+0x45c>)
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8005ec8:	e03c      	b.n	8005f44 <checkDemoModCalisma+0x410>
				}
			} else if(demoMode==1 || menuGiris==1) {
 8005eca:	4b32      	ldr	r3, [pc, #200]	@ (8005f94 <checkDemoModCalisma+0x460>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d003      	beq.n	8005eda <checkDemoModCalisma+0x3a6>
 8005ed2:	4b2b      	ldr	r3, [pc, #172]	@ (8005f80 <checkDemoModCalisma+0x44c>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d134      	bne.n	8005f44 <checkDemoModCalisma+0x410>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005eda:	2200      	movs	r2, #0
 8005edc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ee0:	481a      	ldr	r0, [pc, #104]	@ (8005f4c <checkDemoModCalisma+0x418>)
 8005ee2:	f004 fc4c 	bl	800a77e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005eec:	4817      	ldr	r0, [pc, #92]	@ (8005f4c <checkDemoModCalisma+0x418>)
 8005eee:	f004 fc46 	bl	800a77e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	2104      	movs	r1, #4
 8005ef6:	4815      	ldr	r0, [pc, #84]	@ (8005f4c <checkDemoModCalisma+0x418>)
 8005ef8:	f004 fc41 	bl	800a77e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005efc:	2200      	movs	r2, #0
 8005efe:	2102      	movs	r1, #2
 8005f00:	4812      	ldr	r0, [pc, #72]	@ (8005f4c <checkDemoModCalisma+0x418>)
 8005f02:	f004 fc3c 	bl	800a77e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005f06:	2200      	movs	r2, #0
 8005f08:	2101      	movs	r1, #1
 8005f0a:	4810      	ldr	r0, [pc, #64]	@ (8005f4c <checkDemoModCalisma+0x418>)
 8005f0c:	f004 fc37 	bl	800a77e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005f10:	2200      	movs	r2, #0
 8005f12:	2120      	movs	r1, #32
 8005f14:	480c      	ldr	r0, [pc, #48]	@ (8005f48 <checkDemoModCalisma+0x414>)
 8005f16:	f004 fc32 	bl	800a77e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	2110      	movs	r1, #16
 8005f1e:	480a      	ldr	r0, [pc, #40]	@ (8005f48 <checkDemoModCalisma+0x414>)
 8005f20:	f004 fc2d 	bl	800a77e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005f24:	2200      	movs	r2, #0
 8005f26:	2180      	movs	r1, #128	@ 0x80
 8005f28:	480a      	ldr	r0, [pc, #40]	@ (8005f54 <checkDemoModCalisma+0x420>)
 8005f2a:	f004 fc28 	bl	800a77e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005f2e:	2200      	movs	r2, #0
 8005f30:	2140      	movs	r1, #64	@ 0x40
 8005f32:	4808      	ldr	r0, [pc, #32]	@ (8005f54 <checkDemoModCalisma+0x420>)
 8005f34:	f004 fc23 	bl	800a77e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005f38:	2200      	movs	r2, #0
 8005f3a:	2120      	movs	r1, #32
 8005f3c:	4805      	ldr	r0, [pc, #20]	@ (8005f54 <checkDemoModCalisma+0x420>)
 8005f3e:	f004 fc1e 	bl	800a77e <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8005f42:	e7ff      	b.n	8005f44 <checkDemoModCalisma+0x410>
 8005f44:	bf00      	nop
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	40011000 	.word	0x40011000
 8005f4c:	40010c00 	.word	0x40010c00
 8005f50:	20001114 	.word	0x20001114
 8005f54:	40010800 	.word	0x40010800
 8005f58:	20001094 	.word	0x20001094
 8005f5c:	200010a4 	.word	0x200010a4
 8005f60:	20001113 	.word	0x20001113
 8005f64:	200010fa 	.word	0x200010fa
 8005f68:	200010b5 	.word	0x200010b5
 8005f6c:	200010b4 	.word	0x200010b4
 8005f70:	200010b6 	.word	0x200010b6
 8005f74:	20000fec 	.word	0x20000fec
 8005f78:	200010b7 	.word	0x200010b7
 8005f7c:	200010e8 	.word	0x200010e8
 8005f80:	200010d9 	.word	0x200010d9
 8005f84:	0800ed98 	.word	0x0800ed98
 8005f88:	0800eda4 	.word	0x0800eda4
 8005f8c:	2000105c 	.word	0x2000105c
 8005f90:	200010f0 	.word	0x200010f0
 8005f94:	200010da 	.word	0x200010da

08005f98 <mainLoop>:

void mainLoop() {
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
	while(1) {
		checkLCDBacklight();
 8005f9c:	f7fe f8b6 	bl	800410c <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8005fa0:	2101      	movs	r1, #1
 8005fa2:	488b      	ldr	r0, [pc, #556]	@ (80061d0 <mainLoop+0x238>)
 8005fa4:	f004 fbd4 	bl	800a750 <HAL_GPIO_ReadPin>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d136      	bne.n	800601c <mainLoop+0x84>
 8005fae:	2108      	movs	r1, #8
 8005fb0:	4888      	ldr	r0, [pc, #544]	@ (80061d4 <mainLoop+0x23c>)
 8005fb2:	f004 fbcd 	bl	800a750 <HAL_GPIO_ReadPin>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d12f      	bne.n	800601c <mainLoop+0x84>
 8005fbc:	2102      	movs	r1, #2
 8005fbe:	4884      	ldr	r0, [pc, #528]	@ (80061d0 <mainLoop+0x238>)
 8005fc0:	f004 fbc6 	bl	800a750 <HAL_GPIO_ReadPin>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d128      	bne.n	800601c <mainLoop+0x84>
 8005fca:	2104      	movs	r1, #4
 8005fcc:	4880      	ldr	r0, [pc, #512]	@ (80061d0 <mainLoop+0x238>)
 8005fce:	f004 fbbf 	bl	800a750 <HAL_GPIO_ReadPin>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d121      	bne.n	800601c <mainLoop+0x84>
 8005fd8:	2108      	movs	r1, #8
 8005fda:	487d      	ldr	r0, [pc, #500]	@ (80061d0 <mainLoop+0x238>)
 8005fdc:	f004 fbb8 	bl	800a750 <HAL_GPIO_ReadPin>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d11a      	bne.n	800601c <mainLoop+0x84>
 8005fe6:	2180      	movs	r1, #128	@ 0x80
 8005fe8:	487a      	ldr	r0, [pc, #488]	@ (80061d4 <mainLoop+0x23c>)
 8005fea:	f004 fbb1 	bl	800a750 <HAL_GPIO_ReadPin>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d113      	bne.n	800601c <mainLoop+0x84>
 8005ff4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005ff8:	4876      	ldr	r0, [pc, #472]	@ (80061d4 <mainLoop+0x23c>)
 8005ffa:	f004 fba9 	bl	800a750 <HAL_GPIO_ReadPin>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b01      	cmp	r3, #1
 8006002:	d10b      	bne.n	800601c <mainLoop+0x84>
 8006004:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006008:	4872      	ldr	r0, [pc, #456]	@ (80061d4 <mainLoop+0x23c>)
 800600a:	f004 fba1 	bl	800a750 <HAL_GPIO_ReadPin>
 800600e:	4603      	mov	r3, r0
 8006010:	2b01      	cmp	r3, #1
 8006012:	d103      	bne.n	800601c <mainLoop+0x84>
			butonKontrol=0;
 8006014:	4b70      	ldr	r3, [pc, #448]	@ (80061d8 <mainLoop+0x240>)
 8006016:	2200      	movs	r2, #0
 8006018:	701a      	strb	r2, [r3, #0]
 800601a:	e003      	b.n	8006024 <mainLoop+0x8c>
		} else {
			backLightTimer = millis;
 800601c:	4b6f      	ldr	r3, [pc, #444]	@ (80061dc <mainLoop+0x244>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a6f      	ldr	r2, [pc, #444]	@ (80061e0 <mainLoop+0x248>)
 8006022:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8006024:	f7fe f924 	bl	8004270 <buttonCheck>
 8006028:	4603      	mov	r3, r0
 800602a:	2b01      	cmp	r3, #1
 800602c:	d103      	bne.n	8006036 <mainLoop+0x9e>
			backLightTimer = millis;
 800602e:	4b6b      	ldr	r3, [pc, #428]	@ (80061dc <mainLoop+0x244>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a6b      	ldr	r2, [pc, #428]	@ (80061e0 <mainLoop+0x248>)
 8006034:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz == 1) {
 8006036:	4b6b      	ldr	r3, [pc, #428]	@ (80061e4 <mainLoop+0x24c>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d005      	beq.n	800604a <mainLoop+0xb2>
			hafizaYaz = 0;
 800603e:	4b69      	ldr	r3, [pc, #420]	@ (80061e4 <mainLoop+0x24c>)
 8006040:	2200      	movs	r2, #0
 8006042:	701a      	strb	r2, [r3, #0]
			saveEEPROM(1);
 8006044:	2001      	movs	r0, #1
 8006046:	f7fa fb2d 	bl	80006a4 <saveEEPROM>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 800604a:	4b67      	ldr	r3, [pc, #412]	@ (80061e8 <mainLoop+0x250>)
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	f083 0301 	eor.w	r3, r3, #1
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	d043      	beq.n	80060e0 <mainLoop+0x148>
 8006058:	4864      	ldr	r0, [pc, #400]	@ (80061ec <mainLoop+0x254>)
 800605a:	f005 f995 	bl	800b388 <HAL_I2C_GetState>
 800605e:	4603      	mov	r3, r0
 8006060:	2b20      	cmp	r3, #32
 8006062:	d13d      	bne.n	80060e0 <mainLoop+0x148>
		  if(ilkOkuma==0) {
 8006064:	4b62      	ldr	r3, [pc, #392]	@ (80061f0 <mainLoop+0x258>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	f083 0301 	eor.w	r3, r3, #1
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d028      	beq.n	80060c4 <mainLoop+0x12c>
			  lcd_print(1, 1, eepromTextGN);
 8006072:	4a60      	ldr	r2, [pc, #384]	@ (80061f4 <mainLoop+0x25c>)
 8006074:	2101      	movs	r1, #1
 8006076:	2001      	movs	r0, #1
 8006078:	f003 f840 	bl	80090fc <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 800607c:	4a5e      	ldr	r2, [pc, #376]	@ (80061f8 <mainLoop+0x260>)
 800607e:	2101      	movs	r1, #1
 8006080:	2002      	movs	r0, #2
 8006082:	f003 f83b 	bl	80090fc <lcd_print>
			  HAL_Delay(1000);
 8006086:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800608a:	f003 fd91 	bl	8009bb0 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800608e:	bf00      	nop
 8006090:	4856      	ldr	r0, [pc, #344]	@ (80061ec <mainLoop+0x254>)
 8006092:	f005 f986 	bl	800b3a2 <HAL_I2C_GetError>
 8006096:	4603      	mov	r3, r0
 8006098:	2b04      	cmp	r3, #4
 800609a:	d0f9      	beq.n	8006090 <mainLoop+0xf8>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800609c:	e003      	b.n	80060a6 <mainLoop+0x10e>
				  HAL_Delay(1000);
 800609e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80060a2:	f003 fd85 	bl	8009bb0 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80060a6:	4851      	ldr	r0, [pc, #324]	@ (80061ec <mainLoop+0x254>)
 80060a8:	f005 f96e 	bl	800b388 <HAL_I2C_GetState>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b20      	cmp	r3, #32
 80060b0:	d1f5      	bne.n	800609e <mainLoop+0x106>
			  }

			  lcd_print(2, 1, dataOkunduText);
 80060b2:	4a52      	ldr	r2, [pc, #328]	@ (80061fc <mainLoop+0x264>)
 80060b4:	2101      	movs	r1, #1
 80060b6:	2002      	movs	r0, #2
 80060b8:	f003 f820 	bl	80090fc <lcd_print>

			  ilkOkuma=1;
 80060bc:	4b4c      	ldr	r3, [pc, #304]	@ (80061f0 <mainLoop+0x258>)
 80060be:	2201      	movs	r2, #1
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	e006      	b.n	80060d2 <mainLoop+0x13a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 80060c4:	4a4e      	ldr	r2, [pc, #312]	@ (8006200 <mainLoop+0x268>)
 80060c6:	2101      	movs	r1, #1
 80060c8:	2002      	movs	r0, #2
 80060ca:	f003 f817 	bl	80090fc <lcd_print>
			  lcd_clear();
 80060ce:	f003 f841 	bl	8009154 <lcd_clear>
		  }

		  lcd_clear();
 80060d2:	f003 f83f 	bl	8009154 <lcd_clear>

		  eepromKontrol();
 80060d6:	f7fa f8ad 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 80060da:	4b43      	ldr	r3, [pc, #268]	@ (80061e8 <mainLoop+0x250>)
 80060dc:	2201      	movs	r2, #1
 80060de:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80060e0:	4b48      	ldr	r3, [pc, #288]	@ (8006204 <mainLoop+0x26c>)
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d11c      	bne.n	8006122 <mainLoop+0x18a>
 80060e8:	4b47      	ldr	r3, [pc, #284]	@ (8006208 <mainLoop+0x270>)
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	f083 0301 	eor.w	r3, r3, #1
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d015      	beq.n	8006122 <mainLoop+0x18a>
 80060f6:	4b45      	ldr	r3, [pc, #276]	@ (800620c <mainLoop+0x274>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d111      	bne.n	8006122 <mainLoop+0x18a>
			lcd_clear();
 80060fe:	f003 f829 	bl	8009154 <lcd_clear>
			HAL_Delay(10);
 8006102:	200a      	movs	r0, #10
 8006104:	f003 fd54 	bl	8009bb0 <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8006108:	4a41      	ldr	r2, [pc, #260]	@ (8006210 <mainLoop+0x278>)
 800610a:	2101      	movs	r1, #1
 800610c:	2001      	movs	r0, #1
 800610e:	f002 fff5 	bl	80090fc <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8006112:	4a40      	ldr	r2, [pc, #256]	@ (8006214 <mainLoop+0x27c>)
 8006114:	2101      	movs	r1, #1
 8006116:	2002      	movs	r0, #2
 8006118:	f002 fff0 	bl	80090fc <lcd_print>
			mesajYazildi=1;
 800611c:	4b3a      	ldr	r3, [pc, #232]	@ (8006208 <mainLoop+0x270>)
 800611e:	2201      	movs	r2, #1
 8006120:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8006122:	4b38      	ldr	r3, [pc, #224]	@ (8006204 <mainLoop+0x26c>)
 8006124:	781b      	ldrb	r3, [r3, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d112      	bne.n	8006150 <mainLoop+0x1b8>
 800612a:	2102      	movs	r1, #2
 800612c:	4828      	ldr	r0, [pc, #160]	@ (80061d0 <mainLoop+0x238>)
 800612e:	f004 fb0f 	bl	800a750 <HAL_GPIO_ReadPin>
 8006132:	4603      	mov	r3, r0
 8006134:	2b01      	cmp	r3, #1
 8006136:	d10b      	bne.n	8006150 <mainLoop+0x1b8>
 8006138:	2104      	movs	r1, #4
 800613a:	4825      	ldr	r0, [pc, #148]	@ (80061d0 <mainLoop+0x238>)
 800613c:	f004 fb08 	bl	800a750 <HAL_GPIO_ReadPin>
 8006140:	4603      	mov	r3, r0
 8006142:	2b01      	cmp	r3, #1
 8006144:	d104      	bne.n	8006150 <mainLoop+0x1b8>
			menuGiris=1;
 8006146:	4b2f      	ldr	r3, [pc, #188]	@ (8006204 <mainLoop+0x26c>)
 8006148:	2201      	movs	r2, #1
 800614a:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 800614c:	f003 f802 	bl	8009154 <lcd_clear>
		}

		if(menuGiris==1) {
 8006150:	4b2c      	ldr	r3, [pc, #176]	@ (8006204 <mainLoop+0x26c>)
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d101      	bne.n	800615c <mainLoop+0x1c4>
			menu();
 8006158:	f7fb faa8 	bl	80016ac <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 800615c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006160:	481c      	ldr	r0, [pc, #112]	@ (80061d4 <mainLoop+0x23c>)
 8006162:	f004 fb24 	bl	800a7ae <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006166:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800616a:	482b      	ldr	r0, [pc, #172]	@ (8006218 <mainLoop+0x280>)
 800616c:	f004 faf0 	bl	800a750 <HAL_GPIO_ReadPin>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10a      	bne.n	800618c <mainLoop+0x1f4>
 8006176:	4b29      	ldr	r3, [pc, #164]	@ (800621c <mainLoop+0x284>)
 8006178:	781b      	ldrb	r3, [r3, #0]
 800617a:	f083 0301 	eor.w	r3, r3, #1
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d003      	beq.n	800618c <mainLoop+0x1f4>
			stopVar=1;
 8006184:	4b26      	ldr	r3, [pc, #152]	@ (8006220 <mainLoop+0x288>)
 8006186:	2201      	movs	r2, #1
 8006188:	701a      	strb	r2, [r3, #0]
 800618a:	e002      	b.n	8006192 <mainLoop+0x1fa>
		} else {
			stopVar=0;
 800618c:	4b24      	ldr	r3, [pc, #144]	@ (8006220 <mainLoop+0x288>)
 800618e:	2200      	movs	r2, #0
 8006190:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 8006192:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006196:	4820      	ldr	r0, [pc, #128]	@ (8006218 <mainLoop+0x280>)
 8006198:	f004 fada 	bl	800a750 <HAL_GPIO_ReadPin>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d107      	bne.n	80061b2 <mainLoop+0x21a>
 80061a2:	4b20      	ldr	r3, [pc, #128]	@ (8006224 <mainLoop+0x28c>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <mainLoop+0x21a>
			EmnStopVar=1;
 80061aa:	4b1f      	ldr	r3, [pc, #124]	@ (8006228 <mainLoop+0x290>)
 80061ac:	2201      	movs	r2, #1
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	e002      	b.n	80061b8 <mainLoop+0x220>
		} else {
			EmnStopVar=0;
 80061b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006228 <mainLoop+0x290>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80061b8:	f7fe f88e 	bl	80042d8 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80061bc:	f7fe f8c0 	bl	8004340 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80061c0:	f7fe f904 	bl	80043cc <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80061c4:	f7fe f954 	bl	8004470 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80061c8:	f7ff fcb4 	bl	8005b34 <checkDemoModCalisma>
		checkLCDBacklight();
 80061cc:	e6e6      	b.n	8005f9c <mainLoop+0x4>
 80061ce:	bf00      	nop
 80061d0:	40010800 	.word	0x40010800
 80061d4:	40011000 	.word	0x40011000
 80061d8:	200010eb 	.word	0x200010eb
 80061dc:	20001094 	.word	0x20001094
 80061e0:	200010b0 	.word	0x200010b0
 80061e4:	200010e8 	.word	0x200010e8
 80061e8:	200010e9 	.word	0x200010e9
 80061ec:	2000193c 	.word	0x2000193c
 80061f0:	200010ea 	.word	0x200010ea
 80061f4:	20000178 	.word	0x20000178
 80061f8:	20001874 	.word	0x20001874
 80061fc:	20001888 	.word	0x20001888
 8006200:	2000189c 	.word	0x2000189c
 8006204:	200010d9 	.word	0x200010d9
 8006208:	200010f0 	.word	0x200010f0
 800620c:	200010da 	.word	0x200010da
 8006210:	200000c4 	.word	0x200000c4
 8006214:	200000d8 	.word	0x200000d8
 8006218:	40010c00 	.word	0x40010c00
 800621c:	20001110 	.word	0x20001110
 8006220:	2000110d 	.word	0x2000110d
 8006224:	2000111f 	.word	0x2000111f
 8006228:	20001120 	.word	0x20001120

0800622c <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 800622c:	b5b0      	push	{r4, r5, r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	4603      	mov	r3, r0
 8006234:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8006236:	79fb      	ldrb	r3, [r7, #7]
 8006238:	2b00      	cmp	r3, #0
 800623a:	f040 853d 	bne.w	8006cb8 <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 800623e:	4ac7      	ldr	r2, [pc, #796]	@ (800655c <loadMenuTexts+0x330>)
 8006240:	4bc7      	ldr	r3, [pc, #796]	@ (8006560 <loadMenuTexts+0x334>)
 8006242:	4614      	mov	r4, r2
 8006244:	461d      	mov	r5, r3
 8006246:	6828      	ldr	r0, [r5, #0]
 8006248:	6869      	ldr	r1, [r5, #4]
 800624a:	68aa      	ldr	r2, [r5, #8]
 800624c:	68eb      	ldr	r3, [r5, #12]
 800624e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006250:	7c2b      	ldrb	r3, [r5, #16]
 8006252:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8006254:	4ac3      	ldr	r2, [pc, #780]	@ (8006564 <loadMenuTexts+0x338>)
 8006256:	4bc4      	ldr	r3, [pc, #784]	@ (8006568 <loadMenuTexts+0x33c>)
 8006258:	4614      	mov	r4, r2
 800625a:	461d      	mov	r5, r3
 800625c:	6828      	ldr	r0, [r5, #0]
 800625e:	6869      	ldr	r1, [r5, #4]
 8006260:	68aa      	ldr	r2, [r5, #8]
 8006262:	68eb      	ldr	r3, [r5, #12]
 8006264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006266:	7c2b      	ldrb	r3, [r5, #16]
 8006268:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 800626a:	4ac0      	ldr	r2, [pc, #768]	@ (800656c <loadMenuTexts+0x340>)
 800626c:	4bc0      	ldr	r3, [pc, #768]	@ (8006570 <loadMenuTexts+0x344>)
 800626e:	4614      	mov	r4, r2
 8006270:	461d      	mov	r5, r3
 8006272:	6828      	ldr	r0, [r5, #0]
 8006274:	6869      	ldr	r1, [r5, #4]
 8006276:	68aa      	ldr	r2, [r5, #8]
 8006278:	68eb      	ldr	r3, [r5, #12]
 800627a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800627c:	7c2b      	ldrb	r3, [r5, #16]
 800627e:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8006280:	4abc      	ldr	r2, [pc, #752]	@ (8006574 <loadMenuTexts+0x348>)
 8006282:	4bbd      	ldr	r3, [pc, #756]	@ (8006578 <loadMenuTexts+0x34c>)
 8006284:	4614      	mov	r4, r2
 8006286:	461d      	mov	r5, r3
 8006288:	6828      	ldr	r0, [r5, #0]
 800628a:	6869      	ldr	r1, [r5, #4]
 800628c:	68aa      	ldr	r2, [r5, #8]
 800628e:	68eb      	ldr	r3, [r5, #12]
 8006290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006292:	7c2b      	ldrb	r3, [r5, #16]
 8006294:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 8006296:	4ab9      	ldr	r2, [pc, #740]	@ (800657c <loadMenuTexts+0x350>)
 8006298:	4bb9      	ldr	r3, [pc, #740]	@ (8006580 <loadMenuTexts+0x354>)
 800629a:	4614      	mov	r4, r2
 800629c:	461d      	mov	r5, r3
 800629e:	6828      	ldr	r0, [r5, #0]
 80062a0:	6869      	ldr	r1, [r5, #4]
 80062a2:	68aa      	ldr	r2, [r5, #8]
 80062a4:	68eb      	ldr	r3, [r5, #12]
 80062a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062a8:	7c2b      	ldrb	r3, [r5, #16]
 80062aa:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 80062ac:	4ab5      	ldr	r2, [pc, #724]	@ (8006584 <loadMenuTexts+0x358>)
 80062ae:	4bb6      	ldr	r3, [pc, #728]	@ (8006588 <loadMenuTexts+0x35c>)
 80062b0:	4614      	mov	r4, r2
 80062b2:	461d      	mov	r5, r3
 80062b4:	6828      	ldr	r0, [r5, #0]
 80062b6:	6869      	ldr	r1, [r5, #4]
 80062b8:	68aa      	ldr	r2, [r5, #8]
 80062ba:	68eb      	ldr	r3, [r5, #12]
 80062bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062be:	7c2b      	ldrb	r3, [r5, #16]
 80062c0:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 80062c2:	4ab2      	ldr	r2, [pc, #712]	@ (800658c <loadMenuTexts+0x360>)
 80062c4:	4bb2      	ldr	r3, [pc, #712]	@ (8006590 <loadMenuTexts+0x364>)
 80062c6:	4614      	mov	r4, r2
 80062c8:	461d      	mov	r5, r3
 80062ca:	6828      	ldr	r0, [r5, #0]
 80062cc:	6869      	ldr	r1, [r5, #4]
 80062ce:	68aa      	ldr	r2, [r5, #8]
 80062d0:	68eb      	ldr	r3, [r5, #12]
 80062d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062d4:	7c2b      	ldrb	r3, [r5, #16]
 80062d6:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 80062d8:	4aae      	ldr	r2, [pc, #696]	@ (8006594 <loadMenuTexts+0x368>)
 80062da:	4baf      	ldr	r3, [pc, #700]	@ (8006598 <loadMenuTexts+0x36c>)
 80062dc:	4614      	mov	r4, r2
 80062de:	461d      	mov	r5, r3
 80062e0:	6828      	ldr	r0, [r5, #0]
 80062e2:	6869      	ldr	r1, [r5, #4]
 80062e4:	68aa      	ldr	r2, [r5, #8]
 80062e6:	68eb      	ldr	r3, [r5, #12]
 80062e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062ea:	7c2b      	ldrb	r3, [r5, #16]
 80062ec:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 80062ee:	4aab      	ldr	r2, [pc, #684]	@ (800659c <loadMenuTexts+0x370>)
 80062f0:	4bab      	ldr	r3, [pc, #684]	@ (80065a0 <loadMenuTexts+0x374>)
 80062f2:	4614      	mov	r4, r2
 80062f4:	461d      	mov	r5, r3
 80062f6:	6828      	ldr	r0, [r5, #0]
 80062f8:	6869      	ldr	r1, [r5, #4]
 80062fa:	68aa      	ldr	r2, [r5, #8]
 80062fc:	68eb      	ldr	r3, [r5, #12]
 80062fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006300:	7c2b      	ldrb	r3, [r5, #16]
 8006302:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8006304:	4aa7      	ldr	r2, [pc, #668]	@ (80065a4 <loadMenuTexts+0x378>)
 8006306:	4ba8      	ldr	r3, [pc, #672]	@ (80065a8 <loadMenuTexts+0x37c>)
 8006308:	4614      	mov	r4, r2
 800630a:	461d      	mov	r5, r3
 800630c:	6828      	ldr	r0, [r5, #0]
 800630e:	6869      	ldr	r1, [r5, #4]
 8006310:	68aa      	ldr	r2, [r5, #8]
 8006312:	68eb      	ldr	r3, [r5, #12]
 8006314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006316:	7c2b      	ldrb	r3, [r5, #16]
 8006318:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 800631a:	4aa4      	ldr	r2, [pc, #656]	@ (80065ac <loadMenuTexts+0x380>)
 800631c:	4ba4      	ldr	r3, [pc, #656]	@ (80065b0 <loadMenuTexts+0x384>)
 800631e:	4614      	mov	r4, r2
 8006320:	461d      	mov	r5, r3
 8006322:	6828      	ldr	r0, [r5, #0]
 8006324:	6869      	ldr	r1, [r5, #4]
 8006326:	68aa      	ldr	r2, [r5, #8]
 8006328:	68eb      	ldr	r3, [r5, #12]
 800632a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800632c:	7c2b      	ldrb	r3, [r5, #16]
 800632e:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 8006330:	4aa0      	ldr	r2, [pc, #640]	@ (80065b4 <loadMenuTexts+0x388>)
 8006332:	4ba1      	ldr	r3, [pc, #644]	@ (80065b8 <loadMenuTexts+0x38c>)
 8006334:	4614      	mov	r4, r2
 8006336:	461d      	mov	r5, r3
 8006338:	6828      	ldr	r0, [r5, #0]
 800633a:	6869      	ldr	r1, [r5, #4]
 800633c:	68aa      	ldr	r2, [r5, #8]
 800633e:	68eb      	ldr	r3, [r5, #12]
 8006340:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006342:	7c2b      	ldrb	r3, [r5, #16]
 8006344:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8006346:	4a9d      	ldr	r2, [pc, #628]	@ (80065bc <loadMenuTexts+0x390>)
 8006348:	4b9d      	ldr	r3, [pc, #628]	@ (80065c0 <loadMenuTexts+0x394>)
 800634a:	4614      	mov	r4, r2
 800634c:	461d      	mov	r5, r3
 800634e:	6828      	ldr	r0, [r5, #0]
 8006350:	6869      	ldr	r1, [r5, #4]
 8006352:	68aa      	ldr	r2, [r5, #8]
 8006354:	68eb      	ldr	r3, [r5, #12]
 8006356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006358:	7c2b      	ldrb	r3, [r5, #16]
 800635a:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 800635c:	4a99      	ldr	r2, [pc, #612]	@ (80065c4 <loadMenuTexts+0x398>)
 800635e:	4b9a      	ldr	r3, [pc, #616]	@ (80065c8 <loadMenuTexts+0x39c>)
 8006360:	4614      	mov	r4, r2
 8006362:	461d      	mov	r5, r3
 8006364:	6828      	ldr	r0, [r5, #0]
 8006366:	6869      	ldr	r1, [r5, #4]
 8006368:	68aa      	ldr	r2, [r5, #8]
 800636a:	68eb      	ldr	r3, [r5, #12]
 800636c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800636e:	7c2b      	ldrb	r3, [r5, #16]
 8006370:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 8006372:	4a96      	ldr	r2, [pc, #600]	@ (80065cc <loadMenuTexts+0x3a0>)
 8006374:	4b96      	ldr	r3, [pc, #600]	@ (80065d0 <loadMenuTexts+0x3a4>)
 8006376:	4614      	mov	r4, r2
 8006378:	461d      	mov	r5, r3
 800637a:	6828      	ldr	r0, [r5, #0]
 800637c:	6869      	ldr	r1, [r5, #4]
 800637e:	68aa      	ldr	r2, [r5, #8]
 8006380:	68eb      	ldr	r3, [r5, #12]
 8006382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006384:	7c2b      	ldrb	r3, [r5, #16]
 8006386:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8006388:	4a92      	ldr	r2, [pc, #584]	@ (80065d4 <loadMenuTexts+0x3a8>)
 800638a:	4b93      	ldr	r3, [pc, #588]	@ (80065d8 <loadMenuTexts+0x3ac>)
 800638c:	4614      	mov	r4, r2
 800638e:	461d      	mov	r5, r3
 8006390:	6828      	ldr	r0, [r5, #0]
 8006392:	6869      	ldr	r1, [r5, #4]
 8006394:	68aa      	ldr	r2, [r5, #8]
 8006396:	68eb      	ldr	r3, [r5, #12]
 8006398:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800639a:	7c2b      	ldrb	r3, [r5, #16]
 800639c:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 800639e:	4a8f      	ldr	r2, [pc, #572]	@ (80065dc <loadMenuTexts+0x3b0>)
 80063a0:	4b8f      	ldr	r3, [pc, #572]	@ (80065e0 <loadMenuTexts+0x3b4>)
 80063a2:	4614      	mov	r4, r2
 80063a4:	461d      	mov	r5, r3
 80063a6:	6828      	ldr	r0, [r5, #0]
 80063a8:	6869      	ldr	r1, [r5, #4]
 80063aa:	68aa      	ldr	r2, [r5, #8]
 80063ac:	68eb      	ldr	r3, [r5, #12]
 80063ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063b0:	7c2b      	ldrb	r3, [r5, #16]
 80063b2:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 80063b4:	4a8b      	ldr	r2, [pc, #556]	@ (80065e4 <loadMenuTexts+0x3b8>)
 80063b6:	4b8c      	ldr	r3, [pc, #560]	@ (80065e8 <loadMenuTexts+0x3bc>)
 80063b8:	4614      	mov	r4, r2
 80063ba:	461d      	mov	r5, r3
 80063bc:	6828      	ldr	r0, [r5, #0]
 80063be:	6869      	ldr	r1, [r5, #4]
 80063c0:	68aa      	ldr	r2, [r5, #8]
 80063c2:	68eb      	ldr	r3, [r5, #12]
 80063c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063c6:	7c2b      	ldrb	r3, [r5, #16]
 80063c8:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 80063ca:	4a88      	ldr	r2, [pc, #544]	@ (80065ec <loadMenuTexts+0x3c0>)
 80063cc:	4b88      	ldr	r3, [pc, #544]	@ (80065f0 <loadMenuTexts+0x3c4>)
 80063ce:	4614      	mov	r4, r2
 80063d0:	461d      	mov	r5, r3
 80063d2:	6828      	ldr	r0, [r5, #0]
 80063d4:	6869      	ldr	r1, [r5, #4]
 80063d6:	68aa      	ldr	r2, [r5, #8]
 80063d8:	68eb      	ldr	r3, [r5, #12]
 80063da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063dc:	7c2b      	ldrb	r3, [r5, #16]
 80063de:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 80063e0:	4a84      	ldr	r2, [pc, #528]	@ (80065f4 <loadMenuTexts+0x3c8>)
 80063e2:	4b85      	ldr	r3, [pc, #532]	@ (80065f8 <loadMenuTexts+0x3cc>)
 80063e4:	4614      	mov	r4, r2
 80063e6:	461d      	mov	r5, r3
 80063e8:	6828      	ldr	r0, [r5, #0]
 80063ea:	6869      	ldr	r1, [r5, #4]
 80063ec:	68aa      	ldr	r2, [r5, #8]
 80063ee:	68eb      	ldr	r3, [r5, #12]
 80063f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063f2:	7c2b      	ldrb	r3, [r5, #16]
 80063f4:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 80063f6:	4a81      	ldr	r2, [pc, #516]	@ (80065fc <loadMenuTexts+0x3d0>)
 80063f8:	4b81      	ldr	r3, [pc, #516]	@ (8006600 <loadMenuTexts+0x3d4>)
 80063fa:	4614      	mov	r4, r2
 80063fc:	461d      	mov	r5, r3
 80063fe:	6828      	ldr	r0, [r5, #0]
 8006400:	6869      	ldr	r1, [r5, #4]
 8006402:	68aa      	ldr	r2, [r5, #8]
 8006404:	68eb      	ldr	r3, [r5, #12]
 8006406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006408:	7c2b      	ldrb	r3, [r5, #16]
 800640a:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 800640c:	4a7d      	ldr	r2, [pc, #500]	@ (8006604 <loadMenuTexts+0x3d8>)
 800640e:	4b7e      	ldr	r3, [pc, #504]	@ (8006608 <loadMenuTexts+0x3dc>)
 8006410:	4614      	mov	r4, r2
 8006412:	461d      	mov	r5, r3
 8006414:	6828      	ldr	r0, [r5, #0]
 8006416:	6869      	ldr	r1, [r5, #4]
 8006418:	68aa      	ldr	r2, [r5, #8]
 800641a:	68eb      	ldr	r3, [r5, #12]
 800641c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800641e:	7c2b      	ldrb	r3, [r5, #16]
 8006420:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 8006422:	4a7a      	ldr	r2, [pc, #488]	@ (800660c <loadMenuTexts+0x3e0>)
 8006424:	4b7a      	ldr	r3, [pc, #488]	@ (8006610 <loadMenuTexts+0x3e4>)
 8006426:	4614      	mov	r4, r2
 8006428:	461d      	mov	r5, r3
 800642a:	6828      	ldr	r0, [r5, #0]
 800642c:	6869      	ldr	r1, [r5, #4]
 800642e:	68aa      	ldr	r2, [r5, #8]
 8006430:	68eb      	ldr	r3, [r5, #12]
 8006432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006434:	7c2b      	ldrb	r3, [r5, #16]
 8006436:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 8006438:	4a76      	ldr	r2, [pc, #472]	@ (8006614 <loadMenuTexts+0x3e8>)
 800643a:	4b77      	ldr	r3, [pc, #476]	@ (8006618 <loadMenuTexts+0x3ec>)
 800643c:	4614      	mov	r4, r2
 800643e:	461d      	mov	r5, r3
 8006440:	6828      	ldr	r0, [r5, #0]
 8006442:	6869      	ldr	r1, [r5, #4]
 8006444:	68aa      	ldr	r2, [r5, #8]
 8006446:	68eb      	ldr	r3, [r5, #12]
 8006448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800644a:	7c2b      	ldrb	r3, [r5, #16]
 800644c:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 800644e:	4a73      	ldr	r2, [pc, #460]	@ (800661c <loadMenuTexts+0x3f0>)
 8006450:	4b73      	ldr	r3, [pc, #460]	@ (8006620 <loadMenuTexts+0x3f4>)
 8006452:	4614      	mov	r4, r2
 8006454:	461d      	mov	r5, r3
 8006456:	6828      	ldr	r0, [r5, #0]
 8006458:	6869      	ldr	r1, [r5, #4]
 800645a:	68aa      	ldr	r2, [r5, #8]
 800645c:	68eb      	ldr	r3, [r5, #12]
 800645e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006460:	7c2b      	ldrb	r3, [r5, #16]
 8006462:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 8006464:	4a6f      	ldr	r2, [pc, #444]	@ (8006624 <loadMenuTexts+0x3f8>)
 8006466:	4b70      	ldr	r3, [pc, #448]	@ (8006628 <loadMenuTexts+0x3fc>)
 8006468:	4614      	mov	r4, r2
 800646a:	461d      	mov	r5, r3
 800646c:	6828      	ldr	r0, [r5, #0]
 800646e:	6869      	ldr	r1, [r5, #4]
 8006470:	68aa      	ldr	r2, [r5, #8]
 8006472:	68eb      	ldr	r3, [r5, #12]
 8006474:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006476:	7c2b      	ldrb	r3, [r5, #16]
 8006478:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 800647a:	4a6c      	ldr	r2, [pc, #432]	@ (800662c <loadMenuTexts+0x400>)
 800647c:	4b6c      	ldr	r3, [pc, #432]	@ (8006630 <loadMenuTexts+0x404>)
 800647e:	4614      	mov	r4, r2
 8006480:	461d      	mov	r5, r3
 8006482:	6828      	ldr	r0, [r5, #0]
 8006484:	6869      	ldr	r1, [r5, #4]
 8006486:	68aa      	ldr	r2, [r5, #8]
 8006488:	68eb      	ldr	r3, [r5, #12]
 800648a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800648c:	7c2b      	ldrb	r3, [r5, #16]
 800648e:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 8006490:	4a68      	ldr	r2, [pc, #416]	@ (8006634 <loadMenuTexts+0x408>)
 8006492:	4b69      	ldr	r3, [pc, #420]	@ (8006638 <loadMenuTexts+0x40c>)
 8006494:	4614      	mov	r4, r2
 8006496:	461d      	mov	r5, r3
 8006498:	6828      	ldr	r0, [r5, #0]
 800649a:	6869      	ldr	r1, [r5, #4]
 800649c:	68aa      	ldr	r2, [r5, #8]
 800649e:	68eb      	ldr	r3, [r5, #12]
 80064a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064a2:	7c2b      	ldrb	r3, [r5, #16]
 80064a4:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 80064a6:	4a65      	ldr	r2, [pc, #404]	@ (800663c <loadMenuTexts+0x410>)
 80064a8:	4b65      	ldr	r3, [pc, #404]	@ (8006640 <loadMenuTexts+0x414>)
 80064aa:	4614      	mov	r4, r2
 80064ac:	461d      	mov	r5, r3
 80064ae:	6828      	ldr	r0, [r5, #0]
 80064b0:	6869      	ldr	r1, [r5, #4]
 80064b2:	68aa      	ldr	r2, [r5, #8]
 80064b4:	68eb      	ldr	r3, [r5, #12]
 80064b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064b8:	7c2b      	ldrb	r3, [r5, #16]
 80064ba:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 80064bc:	4a61      	ldr	r2, [pc, #388]	@ (8006644 <loadMenuTexts+0x418>)
 80064be:	4b62      	ldr	r3, [pc, #392]	@ (8006648 <loadMenuTexts+0x41c>)
 80064c0:	4614      	mov	r4, r2
 80064c2:	461d      	mov	r5, r3
 80064c4:	6828      	ldr	r0, [r5, #0]
 80064c6:	6869      	ldr	r1, [r5, #4]
 80064c8:	68aa      	ldr	r2, [r5, #8]
 80064ca:	68eb      	ldr	r3, [r5, #12]
 80064cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064ce:	7c2b      	ldrb	r3, [r5, #16]
 80064d0:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 80064d2:	4a5e      	ldr	r2, [pc, #376]	@ (800664c <loadMenuTexts+0x420>)
 80064d4:	4b5e      	ldr	r3, [pc, #376]	@ (8006650 <loadMenuTexts+0x424>)
 80064d6:	4614      	mov	r4, r2
 80064d8:	461d      	mov	r5, r3
 80064da:	6828      	ldr	r0, [r5, #0]
 80064dc:	6869      	ldr	r1, [r5, #4]
 80064de:	68aa      	ldr	r2, [r5, #8]
 80064e0:	68eb      	ldr	r3, [r5, #12]
 80064e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064e4:	7c2b      	ldrb	r3, [r5, #16]
 80064e6:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 80064e8:	4a5a      	ldr	r2, [pc, #360]	@ (8006654 <loadMenuTexts+0x428>)
 80064ea:	4b5b      	ldr	r3, [pc, #364]	@ (8006658 <loadMenuTexts+0x42c>)
 80064ec:	4614      	mov	r4, r2
 80064ee:	461d      	mov	r5, r3
 80064f0:	6828      	ldr	r0, [r5, #0]
 80064f2:	6869      	ldr	r1, [r5, #4]
 80064f4:	68aa      	ldr	r2, [r5, #8]
 80064f6:	68eb      	ldr	r3, [r5, #12]
 80064f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064fa:	7c2b      	ldrb	r3, [r5, #16]
 80064fc:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 80064fe:	4a57      	ldr	r2, [pc, #348]	@ (800665c <loadMenuTexts+0x430>)
 8006500:	4b57      	ldr	r3, [pc, #348]	@ (8006660 <loadMenuTexts+0x434>)
 8006502:	4614      	mov	r4, r2
 8006504:	461d      	mov	r5, r3
 8006506:	6828      	ldr	r0, [r5, #0]
 8006508:	6869      	ldr	r1, [r5, #4]
 800650a:	68aa      	ldr	r2, [r5, #8]
 800650c:	68eb      	ldr	r3, [r5, #12]
 800650e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006510:	7c2b      	ldrb	r3, [r5, #16]
 8006512:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 8006514:	4a53      	ldr	r2, [pc, #332]	@ (8006664 <loadMenuTexts+0x438>)
 8006516:	4b54      	ldr	r3, [pc, #336]	@ (8006668 <loadMenuTexts+0x43c>)
 8006518:	4614      	mov	r4, r2
 800651a:	461d      	mov	r5, r3
 800651c:	6828      	ldr	r0, [r5, #0]
 800651e:	6869      	ldr	r1, [r5, #4]
 8006520:	68aa      	ldr	r2, [r5, #8]
 8006522:	68eb      	ldr	r3, [r5, #12]
 8006524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006526:	7c2b      	ldrb	r3, [r5, #16]
 8006528:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 800652a:	4a50      	ldr	r2, [pc, #320]	@ (800666c <loadMenuTexts+0x440>)
 800652c:	4b50      	ldr	r3, [pc, #320]	@ (8006670 <loadMenuTexts+0x444>)
 800652e:	4614      	mov	r4, r2
 8006530:	461d      	mov	r5, r3
 8006532:	6828      	ldr	r0, [r5, #0]
 8006534:	6869      	ldr	r1, [r5, #4]
 8006536:	68aa      	ldr	r2, [r5, #8]
 8006538:	68eb      	ldr	r3, [r5, #12]
 800653a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800653c:	7c2b      	ldrb	r3, [r5, #16]
 800653e:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 8006540:	4a4c      	ldr	r2, [pc, #304]	@ (8006674 <loadMenuTexts+0x448>)
 8006542:	4b4d      	ldr	r3, [pc, #308]	@ (8006678 <loadMenuTexts+0x44c>)
 8006544:	4614      	mov	r4, r2
 8006546:	461d      	mov	r5, r3
 8006548:	6828      	ldr	r0, [r5, #0]
 800654a:	6869      	ldr	r1, [r5, #4]
 800654c:	68aa      	ldr	r2, [r5, #8]
 800654e:	68eb      	ldr	r3, [r5, #12]
 8006550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006552:	7c2b      	ldrb	r3, [r5, #16]
 8006554:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 8006556:	4a49      	ldr	r2, [pc, #292]	@ (800667c <loadMenuTexts+0x450>)
 8006558:	e092      	b.n	8006680 <loadMenuTexts+0x454>
 800655a:	bf00      	nop
 800655c:	20001220 	.word	0x20001220
 8006560:	2000018c 	.word	0x2000018c
 8006564:	20001234 	.word	0x20001234
 8006568:	200001a0 	.word	0x200001a0
 800656c:	20001248 	.word	0x20001248
 8006570:	200001b4 	.word	0x200001b4
 8006574:	2000125c 	.word	0x2000125c
 8006578:	200001c8 	.word	0x200001c8
 800657c:	20001270 	.word	0x20001270
 8006580:	200001dc 	.word	0x200001dc
 8006584:	20001284 	.word	0x20001284
 8006588:	200001f0 	.word	0x200001f0
 800658c:	20001298 	.word	0x20001298
 8006590:	20000204 	.word	0x20000204
 8006594:	200012ac 	.word	0x200012ac
 8006598:	20000218 	.word	0x20000218
 800659c:	200012c0 	.word	0x200012c0
 80065a0:	2000022c 	.word	0x2000022c
 80065a4:	200012d4 	.word	0x200012d4
 80065a8:	20000240 	.word	0x20000240
 80065ac:	200012e8 	.word	0x200012e8
 80065b0:	20000254 	.word	0x20000254
 80065b4:	200012fc 	.word	0x200012fc
 80065b8:	20000268 	.word	0x20000268
 80065bc:	20001310 	.word	0x20001310
 80065c0:	2000027c 	.word	0x2000027c
 80065c4:	20001324 	.word	0x20001324
 80065c8:	20000290 	.word	0x20000290
 80065cc:	20001338 	.word	0x20001338
 80065d0:	200002a4 	.word	0x200002a4
 80065d4:	2000134c 	.word	0x2000134c
 80065d8:	200002b8 	.word	0x200002b8
 80065dc:	20001360 	.word	0x20001360
 80065e0:	200002cc 	.word	0x200002cc
 80065e4:	20001374 	.word	0x20001374
 80065e8:	200002e0 	.word	0x200002e0
 80065ec:	20001388 	.word	0x20001388
 80065f0:	200002f4 	.word	0x200002f4
 80065f4:	2000139c 	.word	0x2000139c
 80065f8:	20000308 	.word	0x20000308
 80065fc:	200013b0 	.word	0x200013b0
 8006600:	2000031c 	.word	0x2000031c
 8006604:	200013c4 	.word	0x200013c4
 8006608:	20000330 	.word	0x20000330
 800660c:	200013d8 	.word	0x200013d8
 8006610:	20000344 	.word	0x20000344
 8006614:	200013ec 	.word	0x200013ec
 8006618:	20000358 	.word	0x20000358
 800661c:	20001400 	.word	0x20001400
 8006620:	2000036c 	.word	0x2000036c
 8006624:	20001414 	.word	0x20001414
 8006628:	20000380 	.word	0x20000380
 800662c:	20001428 	.word	0x20001428
 8006630:	20000394 	.word	0x20000394
 8006634:	2000143c 	.word	0x2000143c
 8006638:	200003a8 	.word	0x200003a8
 800663c:	20001450 	.word	0x20001450
 8006640:	200003bc 	.word	0x200003bc
 8006644:	20001464 	.word	0x20001464
 8006648:	200003d0 	.word	0x200003d0
 800664c:	20001478 	.word	0x20001478
 8006650:	200003e4 	.word	0x200003e4
 8006654:	2000148c 	.word	0x2000148c
 8006658:	200003f8 	.word	0x200003f8
 800665c:	200014a0 	.word	0x200014a0
 8006660:	2000040c 	.word	0x2000040c
 8006664:	200014b4 	.word	0x200014b4
 8006668:	20000420 	.word	0x20000420
 800666c:	200014c8 	.word	0x200014c8
 8006670:	20000434 	.word	0x20000434
 8006674:	200014dc 	.word	0x200014dc
 8006678:	20000448 	.word	0x20000448
 800667c:	200014f0 	.word	0x200014f0
 8006680:	4bc7      	ldr	r3, [pc, #796]	@ (80069a0 <loadMenuTexts+0x774>)
 8006682:	4614      	mov	r4, r2
 8006684:	461d      	mov	r5, r3
 8006686:	6828      	ldr	r0, [r5, #0]
 8006688:	6869      	ldr	r1, [r5, #4]
 800668a:	68aa      	ldr	r2, [r5, #8]
 800668c:	68eb      	ldr	r3, [r5, #12]
 800668e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006690:	7c2b      	ldrb	r3, [r5, #16]
 8006692:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 8006694:	4ac3      	ldr	r2, [pc, #780]	@ (80069a4 <loadMenuTexts+0x778>)
 8006696:	4bc4      	ldr	r3, [pc, #784]	@ (80069a8 <loadMenuTexts+0x77c>)
 8006698:	4614      	mov	r4, r2
 800669a:	461d      	mov	r5, r3
 800669c:	6828      	ldr	r0, [r5, #0]
 800669e:	6869      	ldr	r1, [r5, #4]
 80066a0:	68aa      	ldr	r2, [r5, #8]
 80066a2:	68eb      	ldr	r3, [r5, #12]
 80066a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066a6:	7c2b      	ldrb	r3, [r5, #16]
 80066a8:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 80066aa:	4ac0      	ldr	r2, [pc, #768]	@ (80069ac <loadMenuTexts+0x780>)
 80066ac:	4bc0      	ldr	r3, [pc, #768]	@ (80069b0 <loadMenuTexts+0x784>)
 80066ae:	4614      	mov	r4, r2
 80066b0:	461d      	mov	r5, r3
 80066b2:	6828      	ldr	r0, [r5, #0]
 80066b4:	6869      	ldr	r1, [r5, #4]
 80066b6:	68aa      	ldr	r2, [r5, #8]
 80066b8:	68eb      	ldr	r3, [r5, #12]
 80066ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066bc:	7c2b      	ldrb	r3, [r5, #16]
 80066be:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 80066c0:	4abc      	ldr	r2, [pc, #752]	@ (80069b4 <loadMenuTexts+0x788>)
 80066c2:	4bbd      	ldr	r3, [pc, #756]	@ (80069b8 <loadMenuTexts+0x78c>)
 80066c4:	4614      	mov	r4, r2
 80066c6:	461d      	mov	r5, r3
 80066c8:	6828      	ldr	r0, [r5, #0]
 80066ca:	6869      	ldr	r1, [r5, #4]
 80066cc:	68aa      	ldr	r2, [r5, #8]
 80066ce:	68eb      	ldr	r3, [r5, #12]
 80066d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066d2:	7c2b      	ldrb	r3, [r5, #16]
 80066d4:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 80066d6:	4ab9      	ldr	r2, [pc, #740]	@ (80069bc <loadMenuTexts+0x790>)
 80066d8:	4bb9      	ldr	r3, [pc, #740]	@ (80069c0 <loadMenuTexts+0x794>)
 80066da:	4614      	mov	r4, r2
 80066dc:	461d      	mov	r5, r3
 80066de:	6828      	ldr	r0, [r5, #0]
 80066e0:	6869      	ldr	r1, [r5, #4]
 80066e2:	68aa      	ldr	r2, [r5, #8]
 80066e4:	68eb      	ldr	r3, [r5, #12]
 80066e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066e8:	7c2b      	ldrb	r3, [r5, #16]
 80066ea:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 80066ec:	4ab5      	ldr	r2, [pc, #724]	@ (80069c4 <loadMenuTexts+0x798>)
 80066ee:	4bb6      	ldr	r3, [pc, #728]	@ (80069c8 <loadMenuTexts+0x79c>)
 80066f0:	4614      	mov	r4, r2
 80066f2:	461d      	mov	r5, r3
 80066f4:	6828      	ldr	r0, [r5, #0]
 80066f6:	6869      	ldr	r1, [r5, #4]
 80066f8:	68aa      	ldr	r2, [r5, #8]
 80066fa:	68eb      	ldr	r3, [r5, #12]
 80066fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066fe:	7c2b      	ldrb	r3, [r5, #16]
 8006700:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 8006702:	4ab2      	ldr	r2, [pc, #712]	@ (80069cc <loadMenuTexts+0x7a0>)
 8006704:	4bb2      	ldr	r3, [pc, #712]	@ (80069d0 <loadMenuTexts+0x7a4>)
 8006706:	4614      	mov	r4, r2
 8006708:	461d      	mov	r5, r3
 800670a:	6828      	ldr	r0, [r5, #0]
 800670c:	6869      	ldr	r1, [r5, #4]
 800670e:	68aa      	ldr	r2, [r5, #8]
 8006710:	68eb      	ldr	r3, [r5, #12]
 8006712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006714:	7c2b      	ldrb	r3, [r5, #16]
 8006716:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 8006718:	4aae      	ldr	r2, [pc, #696]	@ (80069d4 <loadMenuTexts+0x7a8>)
 800671a:	4baf      	ldr	r3, [pc, #700]	@ (80069d8 <loadMenuTexts+0x7ac>)
 800671c:	4614      	mov	r4, r2
 800671e:	461d      	mov	r5, r3
 8006720:	6828      	ldr	r0, [r5, #0]
 8006722:	6869      	ldr	r1, [r5, #4]
 8006724:	68aa      	ldr	r2, [r5, #8]
 8006726:	68eb      	ldr	r3, [r5, #12]
 8006728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800672a:	7c2b      	ldrb	r3, [r5, #16]
 800672c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 800672e:	4aab      	ldr	r2, [pc, #684]	@ (80069dc <loadMenuTexts+0x7b0>)
 8006730:	4bab      	ldr	r3, [pc, #684]	@ (80069e0 <loadMenuTexts+0x7b4>)
 8006732:	4614      	mov	r4, r2
 8006734:	461d      	mov	r5, r3
 8006736:	6828      	ldr	r0, [r5, #0]
 8006738:	6869      	ldr	r1, [r5, #4]
 800673a:	68aa      	ldr	r2, [r5, #8]
 800673c:	68eb      	ldr	r3, [r5, #12]
 800673e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006740:	7c2b      	ldrb	r3, [r5, #16]
 8006742:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 8006744:	4aa7      	ldr	r2, [pc, #668]	@ (80069e4 <loadMenuTexts+0x7b8>)
 8006746:	4ba8      	ldr	r3, [pc, #672]	@ (80069e8 <loadMenuTexts+0x7bc>)
 8006748:	4614      	mov	r4, r2
 800674a:	461d      	mov	r5, r3
 800674c:	6828      	ldr	r0, [r5, #0]
 800674e:	6869      	ldr	r1, [r5, #4]
 8006750:	68aa      	ldr	r2, [r5, #8]
 8006752:	68eb      	ldr	r3, [r5, #12]
 8006754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006756:	7c2b      	ldrb	r3, [r5, #16]
 8006758:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 800675a:	4aa4      	ldr	r2, [pc, #656]	@ (80069ec <loadMenuTexts+0x7c0>)
 800675c:	4ba4      	ldr	r3, [pc, #656]	@ (80069f0 <loadMenuTexts+0x7c4>)
 800675e:	4614      	mov	r4, r2
 8006760:	461d      	mov	r5, r3
 8006762:	6828      	ldr	r0, [r5, #0]
 8006764:	6869      	ldr	r1, [r5, #4]
 8006766:	68aa      	ldr	r2, [r5, #8]
 8006768:	68eb      	ldr	r3, [r5, #12]
 800676a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800676c:	7c2b      	ldrb	r3, [r5, #16]
 800676e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 8006770:	4aa0      	ldr	r2, [pc, #640]	@ (80069f4 <loadMenuTexts+0x7c8>)
 8006772:	4ba1      	ldr	r3, [pc, #644]	@ (80069f8 <loadMenuTexts+0x7cc>)
 8006774:	4614      	mov	r4, r2
 8006776:	461d      	mov	r5, r3
 8006778:	6828      	ldr	r0, [r5, #0]
 800677a:	6869      	ldr	r1, [r5, #4]
 800677c:	68aa      	ldr	r2, [r5, #8]
 800677e:	68eb      	ldr	r3, [r5, #12]
 8006780:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006782:	7c2b      	ldrb	r3, [r5, #16]
 8006784:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 8006786:	4a9d      	ldr	r2, [pc, #628]	@ (80069fc <loadMenuTexts+0x7d0>)
 8006788:	4b9d      	ldr	r3, [pc, #628]	@ (8006a00 <loadMenuTexts+0x7d4>)
 800678a:	4614      	mov	r4, r2
 800678c:	461d      	mov	r5, r3
 800678e:	6828      	ldr	r0, [r5, #0]
 8006790:	6869      	ldr	r1, [r5, #4]
 8006792:	68aa      	ldr	r2, [r5, #8]
 8006794:	68eb      	ldr	r3, [r5, #12]
 8006796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006798:	7c2b      	ldrb	r3, [r5, #16]
 800679a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 800679c:	4a99      	ldr	r2, [pc, #612]	@ (8006a04 <loadMenuTexts+0x7d8>)
 800679e:	4b9a      	ldr	r3, [pc, #616]	@ (8006a08 <loadMenuTexts+0x7dc>)
 80067a0:	4614      	mov	r4, r2
 80067a2:	461d      	mov	r5, r3
 80067a4:	6828      	ldr	r0, [r5, #0]
 80067a6:	6869      	ldr	r1, [r5, #4]
 80067a8:	68aa      	ldr	r2, [r5, #8]
 80067aa:	68eb      	ldr	r3, [r5, #12]
 80067ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067ae:	7c2b      	ldrb	r3, [r5, #16]
 80067b0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 80067b2:	4a96      	ldr	r2, [pc, #600]	@ (8006a0c <loadMenuTexts+0x7e0>)
 80067b4:	4b96      	ldr	r3, [pc, #600]	@ (8006a10 <loadMenuTexts+0x7e4>)
 80067b6:	4614      	mov	r4, r2
 80067b8:	461d      	mov	r5, r3
 80067ba:	6828      	ldr	r0, [r5, #0]
 80067bc:	6869      	ldr	r1, [r5, #4]
 80067be:	68aa      	ldr	r2, [r5, #8]
 80067c0:	68eb      	ldr	r3, [r5, #12]
 80067c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067c4:	7c2b      	ldrb	r3, [r5, #16]
 80067c6:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 80067c8:	4a92      	ldr	r2, [pc, #584]	@ (8006a14 <loadMenuTexts+0x7e8>)
 80067ca:	4b93      	ldr	r3, [pc, #588]	@ (8006a18 <loadMenuTexts+0x7ec>)
 80067cc:	4614      	mov	r4, r2
 80067ce:	461d      	mov	r5, r3
 80067d0:	6828      	ldr	r0, [r5, #0]
 80067d2:	6869      	ldr	r1, [r5, #4]
 80067d4:	68aa      	ldr	r2, [r5, #8]
 80067d6:	68eb      	ldr	r3, [r5, #12]
 80067d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067da:	7c2b      	ldrb	r3, [r5, #16]
 80067dc:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 80067de:	4a8f      	ldr	r2, [pc, #572]	@ (8006a1c <loadMenuTexts+0x7f0>)
 80067e0:	4b8f      	ldr	r3, [pc, #572]	@ (8006a20 <loadMenuTexts+0x7f4>)
 80067e2:	4614      	mov	r4, r2
 80067e4:	461d      	mov	r5, r3
 80067e6:	6828      	ldr	r0, [r5, #0]
 80067e8:	6869      	ldr	r1, [r5, #4]
 80067ea:	68aa      	ldr	r2, [r5, #8]
 80067ec:	68eb      	ldr	r3, [r5, #12]
 80067ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067f0:	7c2b      	ldrb	r3, [r5, #16]
 80067f2:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 80067f4:	4a8b      	ldr	r2, [pc, #556]	@ (8006a24 <loadMenuTexts+0x7f8>)
 80067f6:	4b8c      	ldr	r3, [pc, #560]	@ (8006a28 <loadMenuTexts+0x7fc>)
 80067f8:	4614      	mov	r4, r2
 80067fa:	461d      	mov	r5, r3
 80067fc:	6828      	ldr	r0, [r5, #0]
 80067fe:	6869      	ldr	r1, [r5, #4]
 8006800:	68aa      	ldr	r2, [r5, #8]
 8006802:	68eb      	ldr	r3, [r5, #12]
 8006804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006806:	7c2b      	ldrb	r3, [r5, #16]
 8006808:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 800680a:	4a88      	ldr	r2, [pc, #544]	@ (8006a2c <loadMenuTexts+0x800>)
 800680c:	4b88      	ldr	r3, [pc, #544]	@ (8006a30 <loadMenuTexts+0x804>)
 800680e:	4614      	mov	r4, r2
 8006810:	461d      	mov	r5, r3
 8006812:	6828      	ldr	r0, [r5, #0]
 8006814:	6869      	ldr	r1, [r5, #4]
 8006816:	68aa      	ldr	r2, [r5, #8]
 8006818:	68eb      	ldr	r3, [r5, #12]
 800681a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800681c:	7c2b      	ldrb	r3, [r5, #16]
 800681e:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 8006820:	4a84      	ldr	r2, [pc, #528]	@ (8006a34 <loadMenuTexts+0x808>)
 8006822:	4b85      	ldr	r3, [pc, #532]	@ (8006a38 <loadMenuTexts+0x80c>)
 8006824:	4614      	mov	r4, r2
 8006826:	461d      	mov	r5, r3
 8006828:	6828      	ldr	r0, [r5, #0]
 800682a:	6869      	ldr	r1, [r5, #4]
 800682c:	68aa      	ldr	r2, [r5, #8]
 800682e:	68eb      	ldr	r3, [r5, #12]
 8006830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006832:	7c2b      	ldrb	r3, [r5, #16]
 8006834:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 8006836:	4a81      	ldr	r2, [pc, #516]	@ (8006a3c <loadMenuTexts+0x810>)
 8006838:	4b81      	ldr	r3, [pc, #516]	@ (8006a40 <loadMenuTexts+0x814>)
 800683a:	4614      	mov	r4, r2
 800683c:	461d      	mov	r5, r3
 800683e:	6828      	ldr	r0, [r5, #0]
 8006840:	6869      	ldr	r1, [r5, #4]
 8006842:	68aa      	ldr	r2, [r5, #8]
 8006844:	68eb      	ldr	r3, [r5, #12]
 8006846:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006848:	7c2b      	ldrb	r3, [r5, #16]
 800684a:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 800684c:	4a7d      	ldr	r2, [pc, #500]	@ (8006a44 <loadMenuTexts+0x818>)
 800684e:	4b7e      	ldr	r3, [pc, #504]	@ (8006a48 <loadMenuTexts+0x81c>)
 8006850:	4614      	mov	r4, r2
 8006852:	461d      	mov	r5, r3
 8006854:	6828      	ldr	r0, [r5, #0]
 8006856:	6869      	ldr	r1, [r5, #4]
 8006858:	68aa      	ldr	r2, [r5, #8]
 800685a:	68eb      	ldr	r3, [r5, #12]
 800685c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800685e:	7c2b      	ldrb	r3, [r5, #16]
 8006860:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 8006862:	4a7a      	ldr	r2, [pc, #488]	@ (8006a4c <loadMenuTexts+0x820>)
 8006864:	4b7a      	ldr	r3, [pc, #488]	@ (8006a50 <loadMenuTexts+0x824>)
 8006866:	4614      	mov	r4, r2
 8006868:	461d      	mov	r5, r3
 800686a:	6828      	ldr	r0, [r5, #0]
 800686c:	6869      	ldr	r1, [r5, #4]
 800686e:	68aa      	ldr	r2, [r5, #8]
 8006870:	68eb      	ldr	r3, [r5, #12]
 8006872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006874:	7c2b      	ldrb	r3, [r5, #16]
 8006876:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 8006878:	4a76      	ldr	r2, [pc, #472]	@ (8006a54 <loadMenuTexts+0x828>)
 800687a:	4b77      	ldr	r3, [pc, #476]	@ (8006a58 <loadMenuTexts+0x82c>)
 800687c:	4614      	mov	r4, r2
 800687e:	461d      	mov	r5, r3
 8006880:	6828      	ldr	r0, [r5, #0]
 8006882:	6869      	ldr	r1, [r5, #4]
 8006884:	68aa      	ldr	r2, [r5, #8]
 8006886:	68eb      	ldr	r3, [r5, #12]
 8006888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800688a:	7c2b      	ldrb	r3, [r5, #16]
 800688c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 800688e:	4a73      	ldr	r2, [pc, #460]	@ (8006a5c <loadMenuTexts+0x830>)
 8006890:	4b73      	ldr	r3, [pc, #460]	@ (8006a60 <loadMenuTexts+0x834>)
 8006892:	4614      	mov	r4, r2
 8006894:	461d      	mov	r5, r3
 8006896:	6828      	ldr	r0, [r5, #0]
 8006898:	6869      	ldr	r1, [r5, #4]
 800689a:	68aa      	ldr	r2, [r5, #8]
 800689c:	68eb      	ldr	r3, [r5, #12]
 800689e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068a0:	7c2b      	ldrb	r3, [r5, #16]
 80068a2:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 80068a4:	4a6f      	ldr	r2, [pc, #444]	@ (8006a64 <loadMenuTexts+0x838>)
 80068a6:	4b70      	ldr	r3, [pc, #448]	@ (8006a68 <loadMenuTexts+0x83c>)
 80068a8:	4614      	mov	r4, r2
 80068aa:	461d      	mov	r5, r3
 80068ac:	6828      	ldr	r0, [r5, #0]
 80068ae:	6869      	ldr	r1, [r5, #4]
 80068b0:	68aa      	ldr	r2, [r5, #8]
 80068b2:	68eb      	ldr	r3, [r5, #12]
 80068b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068b6:	7c2b      	ldrb	r3, [r5, #16]
 80068b8:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 80068ba:	4a6c      	ldr	r2, [pc, #432]	@ (8006a6c <loadMenuTexts+0x840>)
 80068bc:	4b6c      	ldr	r3, [pc, #432]	@ (8006a70 <loadMenuTexts+0x844>)
 80068be:	4614      	mov	r4, r2
 80068c0:	461d      	mov	r5, r3
 80068c2:	6828      	ldr	r0, [r5, #0]
 80068c4:	6869      	ldr	r1, [r5, #4]
 80068c6:	68aa      	ldr	r2, [r5, #8]
 80068c8:	68eb      	ldr	r3, [r5, #12]
 80068ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068cc:	7c2b      	ldrb	r3, [r5, #16]
 80068ce:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 80068d0:	4a68      	ldr	r2, [pc, #416]	@ (8006a74 <loadMenuTexts+0x848>)
 80068d2:	4b69      	ldr	r3, [pc, #420]	@ (8006a78 <loadMenuTexts+0x84c>)
 80068d4:	4614      	mov	r4, r2
 80068d6:	461d      	mov	r5, r3
 80068d8:	6828      	ldr	r0, [r5, #0]
 80068da:	6869      	ldr	r1, [r5, #4]
 80068dc:	68aa      	ldr	r2, [r5, #8]
 80068de:	68eb      	ldr	r3, [r5, #12]
 80068e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068e2:	7c2b      	ldrb	r3, [r5, #16]
 80068e4:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 80068e6:	4a65      	ldr	r2, [pc, #404]	@ (8006a7c <loadMenuTexts+0x850>)
 80068e8:	4b65      	ldr	r3, [pc, #404]	@ (8006a80 <loadMenuTexts+0x854>)
 80068ea:	4614      	mov	r4, r2
 80068ec:	461d      	mov	r5, r3
 80068ee:	6828      	ldr	r0, [r5, #0]
 80068f0:	6869      	ldr	r1, [r5, #4]
 80068f2:	68aa      	ldr	r2, [r5, #8]
 80068f4:	68eb      	ldr	r3, [r5, #12]
 80068f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068f8:	7c2b      	ldrb	r3, [r5, #16]
 80068fa:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 80068fc:	4a61      	ldr	r2, [pc, #388]	@ (8006a84 <loadMenuTexts+0x858>)
 80068fe:	4b62      	ldr	r3, [pc, #392]	@ (8006a88 <loadMenuTexts+0x85c>)
 8006900:	4614      	mov	r4, r2
 8006902:	461d      	mov	r5, r3
 8006904:	6828      	ldr	r0, [r5, #0]
 8006906:	6869      	ldr	r1, [r5, #4]
 8006908:	68aa      	ldr	r2, [r5, #8]
 800690a:	68eb      	ldr	r3, [r5, #12]
 800690c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800690e:	7c2b      	ldrb	r3, [r5, #16]
 8006910:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 8006912:	4a5e      	ldr	r2, [pc, #376]	@ (8006a8c <loadMenuTexts+0x860>)
 8006914:	4b5e      	ldr	r3, [pc, #376]	@ (8006a90 <loadMenuTexts+0x864>)
 8006916:	4614      	mov	r4, r2
 8006918:	461d      	mov	r5, r3
 800691a:	6828      	ldr	r0, [r5, #0]
 800691c:	6869      	ldr	r1, [r5, #4]
 800691e:	68aa      	ldr	r2, [r5, #8]
 8006920:	68eb      	ldr	r3, [r5, #12]
 8006922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006924:	7c2b      	ldrb	r3, [r5, #16]
 8006926:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 8006928:	4a5a      	ldr	r2, [pc, #360]	@ (8006a94 <loadMenuTexts+0x868>)
 800692a:	4b5b      	ldr	r3, [pc, #364]	@ (8006a98 <loadMenuTexts+0x86c>)
 800692c:	4614      	mov	r4, r2
 800692e:	461d      	mov	r5, r3
 8006930:	6828      	ldr	r0, [r5, #0]
 8006932:	6869      	ldr	r1, [r5, #4]
 8006934:	68aa      	ldr	r2, [r5, #8]
 8006936:	68eb      	ldr	r3, [r5, #12]
 8006938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800693a:	7c2b      	ldrb	r3, [r5, #16]
 800693c:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 800693e:	4a57      	ldr	r2, [pc, #348]	@ (8006a9c <loadMenuTexts+0x870>)
 8006940:	4b57      	ldr	r3, [pc, #348]	@ (8006aa0 <loadMenuTexts+0x874>)
 8006942:	4614      	mov	r4, r2
 8006944:	461d      	mov	r5, r3
 8006946:	6828      	ldr	r0, [r5, #0]
 8006948:	6869      	ldr	r1, [r5, #4]
 800694a:	68aa      	ldr	r2, [r5, #8]
 800694c:	68eb      	ldr	r3, [r5, #12]
 800694e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006950:	7c2b      	ldrb	r3, [r5, #16]
 8006952:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 8006954:	4a53      	ldr	r2, [pc, #332]	@ (8006aa4 <loadMenuTexts+0x878>)
 8006956:	4b54      	ldr	r3, [pc, #336]	@ (8006aa8 <loadMenuTexts+0x87c>)
 8006958:	4614      	mov	r4, r2
 800695a:	461d      	mov	r5, r3
 800695c:	6828      	ldr	r0, [r5, #0]
 800695e:	6869      	ldr	r1, [r5, #4]
 8006960:	68aa      	ldr	r2, [r5, #8]
 8006962:	68eb      	ldr	r3, [r5, #12]
 8006964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006966:	7c2b      	ldrb	r3, [r5, #16]
 8006968:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 800696a:	4a50      	ldr	r2, [pc, #320]	@ (8006aac <loadMenuTexts+0x880>)
 800696c:	4b50      	ldr	r3, [pc, #320]	@ (8006ab0 <loadMenuTexts+0x884>)
 800696e:	4614      	mov	r4, r2
 8006970:	461d      	mov	r5, r3
 8006972:	6828      	ldr	r0, [r5, #0]
 8006974:	6869      	ldr	r1, [r5, #4]
 8006976:	68aa      	ldr	r2, [r5, #8]
 8006978:	68eb      	ldr	r3, [r5, #12]
 800697a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800697c:	7c2b      	ldrb	r3, [r5, #16]
 800697e:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 8006980:	4a4c      	ldr	r2, [pc, #304]	@ (8006ab4 <loadMenuTexts+0x888>)
 8006982:	4b4d      	ldr	r3, [pc, #308]	@ (8006ab8 <loadMenuTexts+0x88c>)
 8006984:	4614      	mov	r4, r2
 8006986:	461d      	mov	r5, r3
 8006988:	6828      	ldr	r0, [r5, #0]
 800698a:	6869      	ldr	r1, [r5, #4]
 800698c:	68aa      	ldr	r2, [r5, #8]
 800698e:	68eb      	ldr	r3, [r5, #12]
 8006990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006992:	7c2b      	ldrb	r3, [r5, #16]
 8006994:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 8006996:	4a49      	ldr	r2, [pc, #292]	@ (8006abc <loadMenuTexts+0x890>)
 8006998:	4b49      	ldr	r3, [pc, #292]	@ (8006ac0 <loadMenuTexts+0x894>)
 800699a:	4614      	mov	r4, r2
 800699c:	461d      	mov	r5, r3
 800699e:	e091      	b.n	8006ac4 <loadMenuTexts+0x898>
 80069a0:	2000045c 	.word	0x2000045c
 80069a4:	20001504 	.word	0x20001504
 80069a8:	20000470 	.word	0x20000470
 80069ac:	20001518 	.word	0x20001518
 80069b0:	20000484 	.word	0x20000484
 80069b4:	2000152c 	.word	0x2000152c
 80069b8:	20000498 	.word	0x20000498
 80069bc:	20001540 	.word	0x20001540
 80069c0:	200004ac 	.word	0x200004ac
 80069c4:	20001554 	.word	0x20001554
 80069c8:	200004c0 	.word	0x200004c0
 80069cc:	20001568 	.word	0x20001568
 80069d0:	200004d4 	.word	0x200004d4
 80069d4:	2000157c 	.word	0x2000157c
 80069d8:	200004e8 	.word	0x200004e8
 80069dc:	20001590 	.word	0x20001590
 80069e0:	200004fc 	.word	0x200004fc
 80069e4:	200015a4 	.word	0x200015a4
 80069e8:	20000510 	.word	0x20000510
 80069ec:	200015b8 	.word	0x200015b8
 80069f0:	20000524 	.word	0x20000524
 80069f4:	200015cc 	.word	0x200015cc
 80069f8:	20000538 	.word	0x20000538
 80069fc:	200015e0 	.word	0x200015e0
 8006a00:	2000054c 	.word	0x2000054c
 8006a04:	200015f4 	.word	0x200015f4
 8006a08:	20000560 	.word	0x20000560
 8006a0c:	20001608 	.word	0x20001608
 8006a10:	20000574 	.word	0x20000574
 8006a14:	2000161c 	.word	0x2000161c
 8006a18:	20000588 	.word	0x20000588
 8006a1c:	20001630 	.word	0x20001630
 8006a20:	2000059c 	.word	0x2000059c
 8006a24:	20001644 	.word	0x20001644
 8006a28:	200005b0 	.word	0x200005b0
 8006a2c:	20001658 	.word	0x20001658
 8006a30:	200005c4 	.word	0x200005c4
 8006a34:	2000166c 	.word	0x2000166c
 8006a38:	200005d8 	.word	0x200005d8
 8006a3c:	20001680 	.word	0x20001680
 8006a40:	200005ec 	.word	0x200005ec
 8006a44:	20001694 	.word	0x20001694
 8006a48:	20000600 	.word	0x20000600
 8006a4c:	200016a8 	.word	0x200016a8
 8006a50:	20000614 	.word	0x20000614
 8006a54:	200016bc 	.word	0x200016bc
 8006a58:	20000628 	.word	0x20000628
 8006a5c:	200016d0 	.word	0x200016d0
 8006a60:	2000063c 	.word	0x2000063c
 8006a64:	200016e4 	.word	0x200016e4
 8006a68:	20000650 	.word	0x20000650
 8006a6c:	200016f8 	.word	0x200016f8
 8006a70:	20000664 	.word	0x20000664
 8006a74:	2000170c 	.word	0x2000170c
 8006a78:	20000678 	.word	0x20000678
 8006a7c:	20001720 	.word	0x20001720
 8006a80:	2000068c 	.word	0x2000068c
 8006a84:	20001734 	.word	0x20001734
 8006a88:	200006a0 	.word	0x200006a0
 8006a8c:	20001748 	.word	0x20001748
 8006a90:	200006b4 	.word	0x200006b4
 8006a94:	2000175c 	.word	0x2000175c
 8006a98:	200006c8 	.word	0x200006c8
 8006a9c:	20001770 	.word	0x20001770
 8006aa0:	200006dc 	.word	0x200006dc
 8006aa4:	20001784 	.word	0x20001784
 8006aa8:	200006f0 	.word	0x200006f0
 8006aac:	20001798 	.word	0x20001798
 8006ab0:	20000c7c 	.word	0x20000c7c
 8006ab4:	200017ac 	.word	0x200017ac
 8006ab8:	20000c90 	.word	0x20000c90
 8006abc:	200017c0 	.word	0x200017c0
 8006ac0:	20000ca4 	.word	0x20000ca4
 8006ac4:	6828      	ldr	r0, [r5, #0]
 8006ac6:	6869      	ldr	r1, [r5, #4]
 8006ac8:	68aa      	ldr	r2, [r5, #8]
 8006aca:	68eb      	ldr	r3, [r5, #12]
 8006acc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ace:	7c2b      	ldrb	r3, [r5, #16]
 8006ad0:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 8006ad2:	4a59      	ldr	r2, [pc, #356]	@ (8006c38 <loadMenuTexts+0xa0c>)
 8006ad4:	4b59      	ldr	r3, [pc, #356]	@ (8006c3c <loadMenuTexts+0xa10>)
 8006ad6:	4614      	mov	r4, r2
 8006ad8:	461d      	mov	r5, r3
 8006ada:	6828      	ldr	r0, [r5, #0]
 8006adc:	6869      	ldr	r1, [r5, #4]
 8006ade:	68aa      	ldr	r2, [r5, #8]
 8006ae0:	68eb      	ldr	r3, [r5, #12]
 8006ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ae4:	7c2b      	ldrb	r3, [r5, #16]
 8006ae6:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 8006ae8:	4a55      	ldr	r2, [pc, #340]	@ (8006c40 <loadMenuTexts+0xa14>)
 8006aea:	4b56      	ldr	r3, [pc, #344]	@ (8006c44 <loadMenuTexts+0xa18>)
 8006aec:	4614      	mov	r4, r2
 8006aee:	461d      	mov	r5, r3
 8006af0:	6828      	ldr	r0, [r5, #0]
 8006af2:	6869      	ldr	r1, [r5, #4]
 8006af4:	68aa      	ldr	r2, [r5, #8]
 8006af6:	68eb      	ldr	r3, [r5, #12]
 8006af8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006afa:	7c2b      	ldrb	r3, [r5, #16]
 8006afc:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 8006afe:	4a52      	ldr	r2, [pc, #328]	@ (8006c48 <loadMenuTexts+0xa1c>)
 8006b00:	4b52      	ldr	r3, [pc, #328]	@ (8006c4c <loadMenuTexts+0xa20>)
 8006b02:	4614      	mov	r4, r2
 8006b04:	461d      	mov	r5, r3
 8006b06:	6828      	ldr	r0, [r5, #0]
 8006b08:	6869      	ldr	r1, [r5, #4]
 8006b0a:	68aa      	ldr	r2, [r5, #8]
 8006b0c:	68eb      	ldr	r3, [r5, #12]
 8006b0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b10:	7c2b      	ldrb	r3, [r5, #16]
 8006b12:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 8006b14:	4a4e      	ldr	r2, [pc, #312]	@ (8006c50 <loadMenuTexts+0xa24>)
 8006b16:	4b4f      	ldr	r3, [pc, #316]	@ (8006c54 <loadMenuTexts+0xa28>)
 8006b18:	4614      	mov	r4, r2
 8006b1a:	461d      	mov	r5, r3
 8006b1c:	6828      	ldr	r0, [r5, #0]
 8006b1e:	6869      	ldr	r1, [r5, #4]
 8006b20:	68aa      	ldr	r2, [r5, #8]
 8006b22:	68eb      	ldr	r3, [r5, #12]
 8006b24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b26:	7c2b      	ldrb	r3, [r5, #16]
 8006b28:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 8006b2a:	4a4b      	ldr	r2, [pc, #300]	@ (8006c58 <loadMenuTexts+0xa2c>)
 8006b2c:	4b4b      	ldr	r3, [pc, #300]	@ (8006c5c <loadMenuTexts+0xa30>)
 8006b2e:	4614      	mov	r4, r2
 8006b30:	461d      	mov	r5, r3
 8006b32:	6828      	ldr	r0, [r5, #0]
 8006b34:	6869      	ldr	r1, [r5, #4]
 8006b36:	68aa      	ldr	r2, [r5, #8]
 8006b38:	68eb      	ldr	r3, [r5, #12]
 8006b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b3c:	7c2b      	ldrb	r3, [r5, #16]
 8006b3e:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 8006b40:	4a47      	ldr	r2, [pc, #284]	@ (8006c60 <loadMenuTexts+0xa34>)
 8006b42:	4b48      	ldr	r3, [pc, #288]	@ (8006c64 <loadMenuTexts+0xa38>)
 8006b44:	4614      	mov	r4, r2
 8006b46:	461d      	mov	r5, r3
 8006b48:	6828      	ldr	r0, [r5, #0]
 8006b4a:	6869      	ldr	r1, [r5, #4]
 8006b4c:	68aa      	ldr	r2, [r5, #8]
 8006b4e:	68eb      	ldr	r3, [r5, #12]
 8006b50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b52:	7c2b      	ldrb	r3, [r5, #16]
 8006b54:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 8006b56:	4a44      	ldr	r2, [pc, #272]	@ (8006c68 <loadMenuTexts+0xa3c>)
 8006b58:	4b44      	ldr	r3, [pc, #272]	@ (8006c6c <loadMenuTexts+0xa40>)
 8006b5a:	4614      	mov	r4, r2
 8006b5c:	461d      	mov	r5, r3
 8006b5e:	6828      	ldr	r0, [r5, #0]
 8006b60:	6869      	ldr	r1, [r5, #4]
 8006b62:	68aa      	ldr	r2, [r5, #8]
 8006b64:	68eb      	ldr	r3, [r5, #12]
 8006b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b68:	7c2b      	ldrb	r3, [r5, #16]
 8006b6a:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 8006b6c:	4a40      	ldr	r2, [pc, #256]	@ (8006c70 <loadMenuTexts+0xa44>)
 8006b6e:	4b41      	ldr	r3, [pc, #260]	@ (8006c74 <loadMenuTexts+0xa48>)
 8006b70:	4614      	mov	r4, r2
 8006b72:	461d      	mov	r5, r3
 8006b74:	6828      	ldr	r0, [r5, #0]
 8006b76:	6869      	ldr	r1, [r5, #4]
 8006b78:	68aa      	ldr	r2, [r5, #8]
 8006b7a:	68eb      	ldr	r3, [r5, #12]
 8006b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b7e:	7c2b      	ldrb	r3, [r5, #16]
 8006b80:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 8006b82:	4a3d      	ldr	r2, [pc, #244]	@ (8006c78 <loadMenuTexts+0xa4c>)
 8006b84:	4b3d      	ldr	r3, [pc, #244]	@ (8006c7c <loadMenuTexts+0xa50>)
 8006b86:	4614      	mov	r4, r2
 8006b88:	461d      	mov	r5, r3
 8006b8a:	6828      	ldr	r0, [r5, #0]
 8006b8c:	6869      	ldr	r1, [r5, #4]
 8006b8e:	68aa      	ldr	r2, [r5, #8]
 8006b90:	68eb      	ldr	r3, [r5, #12]
 8006b92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b94:	7c2b      	ldrb	r3, [r5, #16]
 8006b96:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8006b98:	4a39      	ldr	r2, [pc, #228]	@ (8006c80 <loadMenuTexts+0xa54>)
 8006b9a:	4b3a      	ldr	r3, [pc, #232]	@ (8006c84 <loadMenuTexts+0xa58>)
 8006b9c:	4614      	mov	r4, r2
 8006b9e:	461d      	mov	r5, r3
 8006ba0:	6828      	ldr	r0, [r5, #0]
 8006ba2:	6869      	ldr	r1, [r5, #4]
 8006ba4:	68aa      	ldr	r2, [r5, #8]
 8006ba6:	68eb      	ldr	r3, [r5, #12]
 8006ba8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006baa:	7c2b      	ldrb	r3, [r5, #16]
 8006bac:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 8006bae:	4a36      	ldr	r2, [pc, #216]	@ (8006c88 <loadMenuTexts+0xa5c>)
 8006bb0:	4b36      	ldr	r3, [pc, #216]	@ (8006c8c <loadMenuTexts+0xa60>)
 8006bb2:	4614      	mov	r4, r2
 8006bb4:	461d      	mov	r5, r3
 8006bb6:	6828      	ldr	r0, [r5, #0]
 8006bb8:	6869      	ldr	r1, [r5, #4]
 8006bba:	68aa      	ldr	r2, [r5, #8]
 8006bbc:	68eb      	ldr	r3, [r5, #12]
 8006bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bc0:	7c2b      	ldrb	r3, [r5, #16]
 8006bc2:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 8006bc4:	4a32      	ldr	r2, [pc, #200]	@ (8006c90 <loadMenuTexts+0xa64>)
 8006bc6:	4b33      	ldr	r3, [pc, #204]	@ (8006c94 <loadMenuTexts+0xa68>)
 8006bc8:	4614      	mov	r4, r2
 8006bca:	461d      	mov	r5, r3
 8006bcc:	6828      	ldr	r0, [r5, #0]
 8006bce:	6869      	ldr	r1, [r5, #4]
 8006bd0:	68aa      	ldr	r2, [r5, #8]
 8006bd2:	68eb      	ldr	r3, [r5, #12]
 8006bd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bd6:	7c2b      	ldrb	r3, [r5, #16]
 8006bd8:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 8006bda:	4a2f      	ldr	r2, [pc, #188]	@ (8006c98 <loadMenuTexts+0xa6c>)
 8006bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8006c9c <loadMenuTexts+0xa70>)
 8006bde:	4614      	mov	r4, r2
 8006be0:	461d      	mov	r5, r3
 8006be2:	6828      	ldr	r0, [r5, #0]
 8006be4:	6869      	ldr	r1, [r5, #4]
 8006be6:	68aa      	ldr	r2, [r5, #8]
 8006be8:	68eb      	ldr	r3, [r5, #12]
 8006bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bec:	7c2b      	ldrb	r3, [r5, #16]
 8006bee:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 8006bf0:	4a2b      	ldr	r2, [pc, #172]	@ (8006ca0 <loadMenuTexts+0xa74>)
 8006bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8006ca4 <loadMenuTexts+0xa78>)
 8006bf4:	4614      	mov	r4, r2
 8006bf6:	461d      	mov	r5, r3
 8006bf8:	6828      	ldr	r0, [r5, #0]
 8006bfa:	6869      	ldr	r1, [r5, #4]
 8006bfc:	68aa      	ldr	r2, [r5, #8]
 8006bfe:	68eb      	ldr	r3, [r5, #12]
 8006c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c02:	7c2b      	ldrb	r3, [r5, #16]
 8006c04:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 8006c06:	4a28      	ldr	r2, [pc, #160]	@ (8006ca8 <loadMenuTexts+0xa7c>)
 8006c08:	4b28      	ldr	r3, [pc, #160]	@ (8006cac <loadMenuTexts+0xa80>)
 8006c0a:	4614      	mov	r4, r2
 8006c0c:	461d      	mov	r5, r3
 8006c0e:	6828      	ldr	r0, [r5, #0]
 8006c10:	6869      	ldr	r1, [r5, #4]
 8006c12:	68aa      	ldr	r2, [r5, #8]
 8006c14:	68eb      	ldr	r3, [r5, #12]
 8006c16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c18:	7c2b      	ldrb	r3, [r5, #16]
 8006c1a:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 8006c1c:	4a24      	ldr	r2, [pc, #144]	@ (8006cb0 <loadMenuTexts+0xa84>)
 8006c1e:	4b25      	ldr	r3, [pc, #148]	@ (8006cb4 <loadMenuTexts+0xa88>)
 8006c20:	4614      	mov	r4, r2
 8006c22:	461d      	mov	r5, r3
 8006c24:	6828      	ldr	r0, [r5, #0]
 8006c26:	6869      	ldr	r1, [r5, #4]
 8006c28:	68aa      	ldr	r2, [r5, #8]
 8006c2a:	68eb      	ldr	r3, [r5, #12]
 8006c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c2e:	7c2b      	ldrb	r3, [r5, #16]
 8006c30:	7023      	strb	r3, [r4, #0]
 8006c32:	f000 bd3a 	b.w	80076aa <loadMenuTexts+0x147e>
 8006c36:	bf00      	nop
 8006c38:	200017d4 	.word	0x200017d4
 8006c3c:	20000cb8 	.word	0x20000cb8
 8006c40:	200017e8 	.word	0x200017e8
 8006c44:	20000d1c 	.word	0x20000d1c
 8006c48:	200017fc 	.word	0x200017fc
 8006c4c:	20000d30 	.word	0x20000d30
 8006c50:	20001810 	.word	0x20001810
 8006c54:	20000d6c 	.word	0x20000d6c
 8006c58:	20001824 	.word	0x20001824
 8006c5c:	20000d80 	.word	0x20000d80
 8006c60:	20001838 	.word	0x20001838
 8006c64:	20000dbc 	.word	0x20000dbc
 8006c68:	2000184c 	.word	0x2000184c
 8006c6c:	20000dd0 	.word	0x20000dd0
 8006c70:	20001860 	.word	0x20001860
 8006c74:	20000e0c 	.word	0x20000e0c
 8006c78:	20001874 	.word	0x20001874
 8006c7c:	20000e34 	.word	0x20000e34
 8006c80:	20001888 	.word	0x20001888
 8006c84:	20000e5c 	.word	0x20000e5c
 8006c88:	2000189c 	.word	0x2000189c
 8006c8c:	20000e84 	.word	0x20000e84
 8006c90:	200018b0 	.word	0x200018b0
 8006c94:	20000eac 	.word	0x20000eac
 8006c98:	200018c4 	.word	0x200018c4
 8006c9c:	20000ed4 	.word	0x20000ed4
 8006ca0:	200018d8 	.word	0x200018d8
 8006ca4:	20000efc 	.word	0x20000efc
 8006ca8:	200018ec 	.word	0x200018ec
 8006cac:	20000f24 	.word	0x20000f24
 8006cb0:	20001900 	.word	0x20001900
 8006cb4:	20000f4c 	.word	0x20000f4c
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8006cb8:	4ac6      	ldr	r2, [pc, #792]	@ (8006fd4 <loadMenuTexts+0xda8>)
 8006cba:	4bc7      	ldr	r3, [pc, #796]	@ (8006fd8 <loadMenuTexts+0xdac>)
 8006cbc:	4614      	mov	r4, r2
 8006cbe:	461d      	mov	r5, r3
 8006cc0:	6828      	ldr	r0, [r5, #0]
 8006cc2:	6869      	ldr	r1, [r5, #4]
 8006cc4:	68aa      	ldr	r2, [r5, #8]
 8006cc6:	68eb      	ldr	r3, [r5, #12]
 8006cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cca:	7c2b      	ldrb	r3, [r5, #16]
 8006ccc:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8006cce:	4ac3      	ldr	r2, [pc, #780]	@ (8006fdc <loadMenuTexts+0xdb0>)
 8006cd0:	4bc3      	ldr	r3, [pc, #780]	@ (8006fe0 <loadMenuTexts+0xdb4>)
 8006cd2:	4614      	mov	r4, r2
 8006cd4:	461d      	mov	r5, r3
 8006cd6:	6828      	ldr	r0, [r5, #0]
 8006cd8:	6869      	ldr	r1, [r5, #4]
 8006cda:	68aa      	ldr	r2, [r5, #8]
 8006cdc:	68eb      	ldr	r3, [r5, #12]
 8006cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ce0:	7c2b      	ldrb	r3, [r5, #16]
 8006ce2:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8006ce4:	4abf      	ldr	r2, [pc, #764]	@ (8006fe4 <loadMenuTexts+0xdb8>)
 8006ce6:	4bc0      	ldr	r3, [pc, #768]	@ (8006fe8 <loadMenuTexts+0xdbc>)
 8006ce8:	4614      	mov	r4, r2
 8006cea:	461d      	mov	r5, r3
 8006cec:	6828      	ldr	r0, [r5, #0]
 8006cee:	6869      	ldr	r1, [r5, #4]
 8006cf0:	68aa      	ldr	r2, [r5, #8]
 8006cf2:	68eb      	ldr	r3, [r5, #12]
 8006cf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cf6:	7c2b      	ldrb	r3, [r5, #16]
 8006cf8:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 8006cfa:	4abc      	ldr	r2, [pc, #752]	@ (8006fec <loadMenuTexts+0xdc0>)
 8006cfc:	4bbc      	ldr	r3, [pc, #752]	@ (8006ff0 <loadMenuTexts+0xdc4>)
 8006cfe:	4614      	mov	r4, r2
 8006d00:	461d      	mov	r5, r3
 8006d02:	6828      	ldr	r0, [r5, #0]
 8006d04:	6869      	ldr	r1, [r5, #4]
 8006d06:	68aa      	ldr	r2, [r5, #8]
 8006d08:	68eb      	ldr	r3, [r5, #12]
 8006d0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d0c:	7c2b      	ldrb	r3, [r5, #16]
 8006d0e:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8006d10:	4ab8      	ldr	r2, [pc, #736]	@ (8006ff4 <loadMenuTexts+0xdc8>)
 8006d12:	4bb9      	ldr	r3, [pc, #740]	@ (8006ff8 <loadMenuTexts+0xdcc>)
 8006d14:	4614      	mov	r4, r2
 8006d16:	461d      	mov	r5, r3
 8006d18:	6828      	ldr	r0, [r5, #0]
 8006d1a:	6869      	ldr	r1, [r5, #4]
 8006d1c:	68aa      	ldr	r2, [r5, #8]
 8006d1e:	68eb      	ldr	r3, [r5, #12]
 8006d20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d22:	7c2b      	ldrb	r3, [r5, #16]
 8006d24:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 8006d26:	4ab5      	ldr	r2, [pc, #724]	@ (8006ffc <loadMenuTexts+0xdd0>)
 8006d28:	4bb5      	ldr	r3, [pc, #724]	@ (8007000 <loadMenuTexts+0xdd4>)
 8006d2a:	4614      	mov	r4, r2
 8006d2c:	461d      	mov	r5, r3
 8006d2e:	6828      	ldr	r0, [r5, #0]
 8006d30:	6869      	ldr	r1, [r5, #4]
 8006d32:	68aa      	ldr	r2, [r5, #8]
 8006d34:	68eb      	ldr	r3, [r5, #12]
 8006d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d38:	7c2b      	ldrb	r3, [r5, #16]
 8006d3a:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 8006d3c:	4ab1      	ldr	r2, [pc, #708]	@ (8007004 <loadMenuTexts+0xdd8>)
 8006d3e:	4bb2      	ldr	r3, [pc, #712]	@ (8007008 <loadMenuTexts+0xddc>)
 8006d40:	4614      	mov	r4, r2
 8006d42:	461d      	mov	r5, r3
 8006d44:	6828      	ldr	r0, [r5, #0]
 8006d46:	6869      	ldr	r1, [r5, #4]
 8006d48:	68aa      	ldr	r2, [r5, #8]
 8006d4a:	68eb      	ldr	r3, [r5, #12]
 8006d4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d4e:	7c2b      	ldrb	r3, [r5, #16]
 8006d50:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8006d52:	4aae      	ldr	r2, [pc, #696]	@ (800700c <loadMenuTexts+0xde0>)
 8006d54:	4bae      	ldr	r3, [pc, #696]	@ (8007010 <loadMenuTexts+0xde4>)
 8006d56:	4614      	mov	r4, r2
 8006d58:	461d      	mov	r5, r3
 8006d5a:	6828      	ldr	r0, [r5, #0]
 8006d5c:	6869      	ldr	r1, [r5, #4]
 8006d5e:	68aa      	ldr	r2, [r5, #8]
 8006d60:	68eb      	ldr	r3, [r5, #12]
 8006d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d64:	7c2b      	ldrb	r3, [r5, #16]
 8006d66:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8006d68:	4aaa      	ldr	r2, [pc, #680]	@ (8007014 <loadMenuTexts+0xde8>)
 8006d6a:	4bab      	ldr	r3, [pc, #684]	@ (8007018 <loadMenuTexts+0xdec>)
 8006d6c:	4614      	mov	r4, r2
 8006d6e:	461d      	mov	r5, r3
 8006d70:	6828      	ldr	r0, [r5, #0]
 8006d72:	6869      	ldr	r1, [r5, #4]
 8006d74:	68aa      	ldr	r2, [r5, #8]
 8006d76:	68eb      	ldr	r3, [r5, #12]
 8006d78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d7a:	7c2b      	ldrb	r3, [r5, #16]
 8006d7c:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8006d7e:	4aa7      	ldr	r2, [pc, #668]	@ (800701c <loadMenuTexts+0xdf0>)
 8006d80:	4ba7      	ldr	r3, [pc, #668]	@ (8007020 <loadMenuTexts+0xdf4>)
 8006d82:	4614      	mov	r4, r2
 8006d84:	461d      	mov	r5, r3
 8006d86:	6828      	ldr	r0, [r5, #0]
 8006d88:	6869      	ldr	r1, [r5, #4]
 8006d8a:	68aa      	ldr	r2, [r5, #8]
 8006d8c:	68eb      	ldr	r3, [r5, #12]
 8006d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d90:	7c2b      	ldrb	r3, [r5, #16]
 8006d92:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8006d94:	4aa3      	ldr	r2, [pc, #652]	@ (8007024 <loadMenuTexts+0xdf8>)
 8006d96:	4ba4      	ldr	r3, [pc, #656]	@ (8007028 <loadMenuTexts+0xdfc>)
 8006d98:	4614      	mov	r4, r2
 8006d9a:	461d      	mov	r5, r3
 8006d9c:	6828      	ldr	r0, [r5, #0]
 8006d9e:	6869      	ldr	r1, [r5, #4]
 8006da0:	68aa      	ldr	r2, [r5, #8]
 8006da2:	68eb      	ldr	r3, [r5, #12]
 8006da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006da6:	7c2b      	ldrb	r3, [r5, #16]
 8006da8:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8006daa:	4aa0      	ldr	r2, [pc, #640]	@ (800702c <loadMenuTexts+0xe00>)
 8006dac:	4ba0      	ldr	r3, [pc, #640]	@ (8007030 <loadMenuTexts+0xe04>)
 8006dae:	4614      	mov	r4, r2
 8006db0:	461d      	mov	r5, r3
 8006db2:	6828      	ldr	r0, [r5, #0]
 8006db4:	6869      	ldr	r1, [r5, #4]
 8006db6:	68aa      	ldr	r2, [r5, #8]
 8006db8:	68eb      	ldr	r3, [r5, #12]
 8006dba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dbc:	7c2b      	ldrb	r3, [r5, #16]
 8006dbe:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8006dc0:	4a9c      	ldr	r2, [pc, #624]	@ (8007034 <loadMenuTexts+0xe08>)
 8006dc2:	4b9d      	ldr	r3, [pc, #628]	@ (8007038 <loadMenuTexts+0xe0c>)
 8006dc4:	4614      	mov	r4, r2
 8006dc6:	461d      	mov	r5, r3
 8006dc8:	6828      	ldr	r0, [r5, #0]
 8006dca:	6869      	ldr	r1, [r5, #4]
 8006dcc:	68aa      	ldr	r2, [r5, #8]
 8006dce:	68eb      	ldr	r3, [r5, #12]
 8006dd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dd2:	7c2b      	ldrb	r3, [r5, #16]
 8006dd4:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8006dd6:	4a99      	ldr	r2, [pc, #612]	@ (800703c <loadMenuTexts+0xe10>)
 8006dd8:	4b99      	ldr	r3, [pc, #612]	@ (8007040 <loadMenuTexts+0xe14>)
 8006dda:	4614      	mov	r4, r2
 8006ddc:	461d      	mov	r5, r3
 8006dde:	6828      	ldr	r0, [r5, #0]
 8006de0:	6869      	ldr	r1, [r5, #4]
 8006de2:	68aa      	ldr	r2, [r5, #8]
 8006de4:	68eb      	ldr	r3, [r5, #12]
 8006de6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006de8:	7c2b      	ldrb	r3, [r5, #16]
 8006dea:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8006dec:	4a95      	ldr	r2, [pc, #596]	@ (8007044 <loadMenuTexts+0xe18>)
 8006dee:	4b96      	ldr	r3, [pc, #600]	@ (8007048 <loadMenuTexts+0xe1c>)
 8006df0:	4614      	mov	r4, r2
 8006df2:	461d      	mov	r5, r3
 8006df4:	6828      	ldr	r0, [r5, #0]
 8006df6:	6869      	ldr	r1, [r5, #4]
 8006df8:	68aa      	ldr	r2, [r5, #8]
 8006dfa:	68eb      	ldr	r3, [r5, #12]
 8006dfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dfe:	7c2b      	ldrb	r3, [r5, #16]
 8006e00:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8006e02:	4a92      	ldr	r2, [pc, #584]	@ (800704c <loadMenuTexts+0xe20>)
 8006e04:	4b92      	ldr	r3, [pc, #584]	@ (8007050 <loadMenuTexts+0xe24>)
 8006e06:	4614      	mov	r4, r2
 8006e08:	461d      	mov	r5, r3
 8006e0a:	6828      	ldr	r0, [r5, #0]
 8006e0c:	6869      	ldr	r1, [r5, #4]
 8006e0e:	68aa      	ldr	r2, [r5, #8]
 8006e10:	68eb      	ldr	r3, [r5, #12]
 8006e12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e14:	7c2b      	ldrb	r3, [r5, #16]
 8006e16:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8006e18:	4a8e      	ldr	r2, [pc, #568]	@ (8007054 <loadMenuTexts+0xe28>)
 8006e1a:	4b8f      	ldr	r3, [pc, #572]	@ (8007058 <loadMenuTexts+0xe2c>)
 8006e1c:	4614      	mov	r4, r2
 8006e1e:	461d      	mov	r5, r3
 8006e20:	6828      	ldr	r0, [r5, #0]
 8006e22:	6869      	ldr	r1, [r5, #4]
 8006e24:	68aa      	ldr	r2, [r5, #8]
 8006e26:	68eb      	ldr	r3, [r5, #12]
 8006e28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e2a:	7c2b      	ldrb	r3, [r5, #16]
 8006e2c:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8006e2e:	4a8b      	ldr	r2, [pc, #556]	@ (800705c <loadMenuTexts+0xe30>)
 8006e30:	4b8b      	ldr	r3, [pc, #556]	@ (8007060 <loadMenuTexts+0xe34>)
 8006e32:	4614      	mov	r4, r2
 8006e34:	461d      	mov	r5, r3
 8006e36:	6828      	ldr	r0, [r5, #0]
 8006e38:	6869      	ldr	r1, [r5, #4]
 8006e3a:	68aa      	ldr	r2, [r5, #8]
 8006e3c:	68eb      	ldr	r3, [r5, #12]
 8006e3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e40:	7c2b      	ldrb	r3, [r5, #16]
 8006e42:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8006e44:	4a87      	ldr	r2, [pc, #540]	@ (8007064 <loadMenuTexts+0xe38>)
 8006e46:	4b88      	ldr	r3, [pc, #544]	@ (8007068 <loadMenuTexts+0xe3c>)
 8006e48:	4614      	mov	r4, r2
 8006e4a:	461d      	mov	r5, r3
 8006e4c:	6828      	ldr	r0, [r5, #0]
 8006e4e:	6869      	ldr	r1, [r5, #4]
 8006e50:	68aa      	ldr	r2, [r5, #8]
 8006e52:	68eb      	ldr	r3, [r5, #12]
 8006e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e56:	7c2b      	ldrb	r3, [r5, #16]
 8006e58:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8006e5a:	4a84      	ldr	r2, [pc, #528]	@ (800706c <loadMenuTexts+0xe40>)
 8006e5c:	4b84      	ldr	r3, [pc, #528]	@ (8007070 <loadMenuTexts+0xe44>)
 8006e5e:	4614      	mov	r4, r2
 8006e60:	461d      	mov	r5, r3
 8006e62:	6828      	ldr	r0, [r5, #0]
 8006e64:	6869      	ldr	r1, [r5, #4]
 8006e66:	68aa      	ldr	r2, [r5, #8]
 8006e68:	68eb      	ldr	r3, [r5, #12]
 8006e6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e6c:	7c2b      	ldrb	r3, [r5, #16]
 8006e6e:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8006e70:	4a80      	ldr	r2, [pc, #512]	@ (8007074 <loadMenuTexts+0xe48>)
 8006e72:	4b81      	ldr	r3, [pc, #516]	@ (8007078 <loadMenuTexts+0xe4c>)
 8006e74:	4614      	mov	r4, r2
 8006e76:	461d      	mov	r5, r3
 8006e78:	6828      	ldr	r0, [r5, #0]
 8006e7a:	6869      	ldr	r1, [r5, #4]
 8006e7c:	68aa      	ldr	r2, [r5, #8]
 8006e7e:	68eb      	ldr	r3, [r5, #12]
 8006e80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e82:	7c2b      	ldrb	r3, [r5, #16]
 8006e84:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8006e86:	4a7d      	ldr	r2, [pc, #500]	@ (800707c <loadMenuTexts+0xe50>)
 8006e88:	4b7d      	ldr	r3, [pc, #500]	@ (8007080 <loadMenuTexts+0xe54>)
 8006e8a:	4614      	mov	r4, r2
 8006e8c:	461d      	mov	r5, r3
 8006e8e:	6828      	ldr	r0, [r5, #0]
 8006e90:	6869      	ldr	r1, [r5, #4]
 8006e92:	68aa      	ldr	r2, [r5, #8]
 8006e94:	68eb      	ldr	r3, [r5, #12]
 8006e96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e98:	7c2b      	ldrb	r3, [r5, #16]
 8006e9a:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8006e9c:	4a79      	ldr	r2, [pc, #484]	@ (8007084 <loadMenuTexts+0xe58>)
 8006e9e:	4b7a      	ldr	r3, [pc, #488]	@ (8007088 <loadMenuTexts+0xe5c>)
 8006ea0:	4614      	mov	r4, r2
 8006ea2:	461d      	mov	r5, r3
 8006ea4:	6828      	ldr	r0, [r5, #0]
 8006ea6:	6869      	ldr	r1, [r5, #4]
 8006ea8:	68aa      	ldr	r2, [r5, #8]
 8006eaa:	68eb      	ldr	r3, [r5, #12]
 8006eac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eae:	7c2b      	ldrb	r3, [r5, #16]
 8006eb0:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8006eb2:	4a76      	ldr	r2, [pc, #472]	@ (800708c <loadMenuTexts+0xe60>)
 8006eb4:	4b76      	ldr	r3, [pc, #472]	@ (8007090 <loadMenuTexts+0xe64>)
 8006eb6:	4614      	mov	r4, r2
 8006eb8:	461d      	mov	r5, r3
 8006eba:	6828      	ldr	r0, [r5, #0]
 8006ebc:	6869      	ldr	r1, [r5, #4]
 8006ebe:	68aa      	ldr	r2, [r5, #8]
 8006ec0:	68eb      	ldr	r3, [r5, #12]
 8006ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ec4:	7c2b      	ldrb	r3, [r5, #16]
 8006ec6:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8006ec8:	4a72      	ldr	r2, [pc, #456]	@ (8007094 <loadMenuTexts+0xe68>)
 8006eca:	4b73      	ldr	r3, [pc, #460]	@ (8007098 <loadMenuTexts+0xe6c>)
 8006ecc:	4614      	mov	r4, r2
 8006ece:	461d      	mov	r5, r3
 8006ed0:	6828      	ldr	r0, [r5, #0]
 8006ed2:	6869      	ldr	r1, [r5, #4]
 8006ed4:	68aa      	ldr	r2, [r5, #8]
 8006ed6:	68eb      	ldr	r3, [r5, #12]
 8006ed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eda:	7c2b      	ldrb	r3, [r5, #16]
 8006edc:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8006ede:	4a6f      	ldr	r2, [pc, #444]	@ (800709c <loadMenuTexts+0xe70>)
 8006ee0:	4b6f      	ldr	r3, [pc, #444]	@ (80070a0 <loadMenuTexts+0xe74>)
 8006ee2:	4614      	mov	r4, r2
 8006ee4:	461d      	mov	r5, r3
 8006ee6:	6828      	ldr	r0, [r5, #0]
 8006ee8:	6869      	ldr	r1, [r5, #4]
 8006eea:	68aa      	ldr	r2, [r5, #8]
 8006eec:	68eb      	ldr	r3, [r5, #12]
 8006eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ef0:	7c2b      	ldrb	r3, [r5, #16]
 8006ef2:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8006ef4:	4a6b      	ldr	r2, [pc, #428]	@ (80070a4 <loadMenuTexts+0xe78>)
 8006ef6:	4b6c      	ldr	r3, [pc, #432]	@ (80070a8 <loadMenuTexts+0xe7c>)
 8006ef8:	4614      	mov	r4, r2
 8006efa:	461d      	mov	r5, r3
 8006efc:	6828      	ldr	r0, [r5, #0]
 8006efe:	6869      	ldr	r1, [r5, #4]
 8006f00:	68aa      	ldr	r2, [r5, #8]
 8006f02:	68eb      	ldr	r3, [r5, #12]
 8006f04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f06:	7c2b      	ldrb	r3, [r5, #16]
 8006f08:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8006f0a:	4a68      	ldr	r2, [pc, #416]	@ (80070ac <loadMenuTexts+0xe80>)
 8006f0c:	4b68      	ldr	r3, [pc, #416]	@ (80070b0 <loadMenuTexts+0xe84>)
 8006f0e:	4614      	mov	r4, r2
 8006f10:	461d      	mov	r5, r3
 8006f12:	6828      	ldr	r0, [r5, #0]
 8006f14:	6869      	ldr	r1, [r5, #4]
 8006f16:	68aa      	ldr	r2, [r5, #8]
 8006f18:	68eb      	ldr	r3, [r5, #12]
 8006f1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f1c:	7c2b      	ldrb	r3, [r5, #16]
 8006f1e:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8006f20:	4a64      	ldr	r2, [pc, #400]	@ (80070b4 <loadMenuTexts+0xe88>)
 8006f22:	4b65      	ldr	r3, [pc, #404]	@ (80070b8 <loadMenuTexts+0xe8c>)
 8006f24:	4614      	mov	r4, r2
 8006f26:	461d      	mov	r5, r3
 8006f28:	6828      	ldr	r0, [r5, #0]
 8006f2a:	6869      	ldr	r1, [r5, #4]
 8006f2c:	68aa      	ldr	r2, [r5, #8]
 8006f2e:	68eb      	ldr	r3, [r5, #12]
 8006f30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f32:	7c2b      	ldrb	r3, [r5, #16]
 8006f34:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 8006f36:	4a61      	ldr	r2, [pc, #388]	@ (80070bc <loadMenuTexts+0xe90>)
 8006f38:	4b61      	ldr	r3, [pc, #388]	@ (80070c0 <loadMenuTexts+0xe94>)
 8006f3a:	4614      	mov	r4, r2
 8006f3c:	461d      	mov	r5, r3
 8006f3e:	6828      	ldr	r0, [r5, #0]
 8006f40:	6869      	ldr	r1, [r5, #4]
 8006f42:	68aa      	ldr	r2, [r5, #8]
 8006f44:	68eb      	ldr	r3, [r5, #12]
 8006f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f48:	7c2b      	ldrb	r3, [r5, #16]
 8006f4a:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8006f4c:	4a5d      	ldr	r2, [pc, #372]	@ (80070c4 <loadMenuTexts+0xe98>)
 8006f4e:	4b5e      	ldr	r3, [pc, #376]	@ (80070c8 <loadMenuTexts+0xe9c>)
 8006f50:	4614      	mov	r4, r2
 8006f52:	461d      	mov	r5, r3
 8006f54:	6828      	ldr	r0, [r5, #0]
 8006f56:	6869      	ldr	r1, [r5, #4]
 8006f58:	68aa      	ldr	r2, [r5, #8]
 8006f5a:	68eb      	ldr	r3, [r5, #12]
 8006f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f5e:	7c2b      	ldrb	r3, [r5, #16]
 8006f60:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8006f62:	4a5a      	ldr	r2, [pc, #360]	@ (80070cc <loadMenuTexts+0xea0>)
 8006f64:	4b5a      	ldr	r3, [pc, #360]	@ (80070d0 <loadMenuTexts+0xea4>)
 8006f66:	4614      	mov	r4, r2
 8006f68:	461d      	mov	r5, r3
 8006f6a:	6828      	ldr	r0, [r5, #0]
 8006f6c:	6869      	ldr	r1, [r5, #4]
 8006f6e:	68aa      	ldr	r2, [r5, #8]
 8006f70:	68eb      	ldr	r3, [r5, #12]
 8006f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f74:	7c2b      	ldrb	r3, [r5, #16]
 8006f76:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 8006f78:	4a56      	ldr	r2, [pc, #344]	@ (80070d4 <loadMenuTexts+0xea8>)
 8006f7a:	4b57      	ldr	r3, [pc, #348]	@ (80070d8 <loadMenuTexts+0xeac>)
 8006f7c:	4614      	mov	r4, r2
 8006f7e:	461d      	mov	r5, r3
 8006f80:	6828      	ldr	r0, [r5, #0]
 8006f82:	6869      	ldr	r1, [r5, #4]
 8006f84:	68aa      	ldr	r2, [r5, #8]
 8006f86:	68eb      	ldr	r3, [r5, #12]
 8006f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f8a:	7c2b      	ldrb	r3, [r5, #16]
 8006f8c:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8006f8e:	4a53      	ldr	r2, [pc, #332]	@ (80070dc <loadMenuTexts+0xeb0>)
 8006f90:	4b53      	ldr	r3, [pc, #332]	@ (80070e0 <loadMenuTexts+0xeb4>)
 8006f92:	4614      	mov	r4, r2
 8006f94:	461d      	mov	r5, r3
 8006f96:	6828      	ldr	r0, [r5, #0]
 8006f98:	6869      	ldr	r1, [r5, #4]
 8006f9a:	68aa      	ldr	r2, [r5, #8]
 8006f9c:	68eb      	ldr	r3, [r5, #12]
 8006f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fa0:	7c2b      	ldrb	r3, [r5, #16]
 8006fa2:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8006fa4:	4a4f      	ldr	r2, [pc, #316]	@ (80070e4 <loadMenuTexts+0xeb8>)
 8006fa6:	4b50      	ldr	r3, [pc, #320]	@ (80070e8 <loadMenuTexts+0xebc>)
 8006fa8:	4614      	mov	r4, r2
 8006faa:	461d      	mov	r5, r3
 8006fac:	6828      	ldr	r0, [r5, #0]
 8006fae:	6869      	ldr	r1, [r5, #4]
 8006fb0:	68aa      	ldr	r2, [r5, #8]
 8006fb2:	68eb      	ldr	r3, [r5, #12]
 8006fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fb6:	7c2b      	ldrb	r3, [r5, #16]
 8006fb8:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8006fba:	4a4c      	ldr	r2, [pc, #304]	@ (80070ec <loadMenuTexts+0xec0>)
 8006fbc:	4b4c      	ldr	r3, [pc, #304]	@ (80070f0 <loadMenuTexts+0xec4>)
 8006fbe:	4614      	mov	r4, r2
 8006fc0:	461d      	mov	r5, r3
 8006fc2:	6828      	ldr	r0, [r5, #0]
 8006fc4:	6869      	ldr	r1, [r5, #4]
 8006fc6:	68aa      	ldr	r2, [r5, #8]
 8006fc8:	68eb      	ldr	r3, [r5, #12]
 8006fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fcc:	7c2b      	ldrb	r3, [r5, #16]
 8006fce:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8006fd0:	4a48      	ldr	r2, [pc, #288]	@ (80070f4 <loadMenuTexts+0xec8>)
 8006fd2:	e091      	b.n	80070f8 <loadMenuTexts+0xecc>
 8006fd4:	20001220 	.word	0x20001220
 8006fd8:	20000704 	.word	0x20000704
 8006fdc:	20001234 	.word	0x20001234
 8006fe0:	20000718 	.word	0x20000718
 8006fe4:	20001248 	.word	0x20001248
 8006fe8:	2000072c 	.word	0x2000072c
 8006fec:	2000125c 	.word	0x2000125c
 8006ff0:	20000740 	.word	0x20000740
 8006ff4:	20001270 	.word	0x20001270
 8006ff8:	20000754 	.word	0x20000754
 8006ffc:	20001284 	.word	0x20001284
 8007000:	20000768 	.word	0x20000768
 8007004:	20001298 	.word	0x20001298
 8007008:	2000077c 	.word	0x2000077c
 800700c:	200012ac 	.word	0x200012ac
 8007010:	20000790 	.word	0x20000790
 8007014:	200012c0 	.word	0x200012c0
 8007018:	200007a4 	.word	0x200007a4
 800701c:	200012d4 	.word	0x200012d4
 8007020:	200007b8 	.word	0x200007b8
 8007024:	200012e8 	.word	0x200012e8
 8007028:	200007cc 	.word	0x200007cc
 800702c:	200012fc 	.word	0x200012fc
 8007030:	200007e0 	.word	0x200007e0
 8007034:	20001310 	.word	0x20001310
 8007038:	200007f4 	.word	0x200007f4
 800703c:	20001324 	.word	0x20001324
 8007040:	20000808 	.word	0x20000808
 8007044:	20001338 	.word	0x20001338
 8007048:	2000081c 	.word	0x2000081c
 800704c:	2000134c 	.word	0x2000134c
 8007050:	20000830 	.word	0x20000830
 8007054:	20001360 	.word	0x20001360
 8007058:	20000844 	.word	0x20000844
 800705c:	20001374 	.word	0x20001374
 8007060:	20000858 	.word	0x20000858
 8007064:	20001388 	.word	0x20001388
 8007068:	2000086c 	.word	0x2000086c
 800706c:	2000139c 	.word	0x2000139c
 8007070:	20000880 	.word	0x20000880
 8007074:	200013b0 	.word	0x200013b0
 8007078:	20000894 	.word	0x20000894
 800707c:	200013c4 	.word	0x200013c4
 8007080:	200008a8 	.word	0x200008a8
 8007084:	200013d8 	.word	0x200013d8
 8007088:	200008bc 	.word	0x200008bc
 800708c:	200013ec 	.word	0x200013ec
 8007090:	200008d0 	.word	0x200008d0
 8007094:	20001400 	.word	0x20001400
 8007098:	200008e4 	.word	0x200008e4
 800709c:	20001414 	.word	0x20001414
 80070a0:	200008f8 	.word	0x200008f8
 80070a4:	20001428 	.word	0x20001428
 80070a8:	2000090c 	.word	0x2000090c
 80070ac:	2000143c 	.word	0x2000143c
 80070b0:	20000920 	.word	0x20000920
 80070b4:	20001450 	.word	0x20001450
 80070b8:	20000934 	.word	0x20000934
 80070bc:	20001464 	.word	0x20001464
 80070c0:	20000948 	.word	0x20000948
 80070c4:	20001478 	.word	0x20001478
 80070c8:	2000095c 	.word	0x2000095c
 80070cc:	2000148c 	.word	0x2000148c
 80070d0:	20000970 	.word	0x20000970
 80070d4:	200014a0 	.word	0x200014a0
 80070d8:	20000984 	.word	0x20000984
 80070dc:	200014b4 	.word	0x200014b4
 80070e0:	20000998 	.word	0x20000998
 80070e4:	200014c8 	.word	0x200014c8
 80070e8:	200009ac 	.word	0x200009ac
 80070ec:	200014dc 	.word	0x200014dc
 80070f0:	200009c0 	.word	0x200009c0
 80070f4:	200014f0 	.word	0x200014f0
 80070f8:	4bc7      	ldr	r3, [pc, #796]	@ (8007418 <loadMenuTexts+0x11ec>)
 80070fa:	4614      	mov	r4, r2
 80070fc:	461d      	mov	r5, r3
 80070fe:	6828      	ldr	r0, [r5, #0]
 8007100:	6869      	ldr	r1, [r5, #4]
 8007102:	68aa      	ldr	r2, [r5, #8]
 8007104:	68eb      	ldr	r3, [r5, #12]
 8007106:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007108:	7c2b      	ldrb	r3, [r5, #16]
 800710a:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 800710c:	4ac3      	ldr	r2, [pc, #780]	@ (800741c <loadMenuTexts+0x11f0>)
 800710e:	4bc4      	ldr	r3, [pc, #784]	@ (8007420 <loadMenuTexts+0x11f4>)
 8007110:	4614      	mov	r4, r2
 8007112:	461d      	mov	r5, r3
 8007114:	6828      	ldr	r0, [r5, #0]
 8007116:	6869      	ldr	r1, [r5, #4]
 8007118:	68aa      	ldr	r2, [r5, #8]
 800711a:	68eb      	ldr	r3, [r5, #12]
 800711c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800711e:	7c2b      	ldrb	r3, [r5, #16]
 8007120:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8007122:	4ac0      	ldr	r2, [pc, #768]	@ (8007424 <loadMenuTexts+0x11f8>)
 8007124:	4bc0      	ldr	r3, [pc, #768]	@ (8007428 <loadMenuTexts+0x11fc>)
 8007126:	4614      	mov	r4, r2
 8007128:	461d      	mov	r5, r3
 800712a:	6828      	ldr	r0, [r5, #0]
 800712c:	6869      	ldr	r1, [r5, #4]
 800712e:	68aa      	ldr	r2, [r5, #8]
 8007130:	68eb      	ldr	r3, [r5, #12]
 8007132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007134:	7c2b      	ldrb	r3, [r5, #16]
 8007136:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8007138:	4abc      	ldr	r2, [pc, #752]	@ (800742c <loadMenuTexts+0x1200>)
 800713a:	4bbd      	ldr	r3, [pc, #756]	@ (8007430 <loadMenuTexts+0x1204>)
 800713c:	4614      	mov	r4, r2
 800713e:	461d      	mov	r5, r3
 8007140:	6828      	ldr	r0, [r5, #0]
 8007142:	6869      	ldr	r1, [r5, #4]
 8007144:	68aa      	ldr	r2, [r5, #8]
 8007146:	68eb      	ldr	r3, [r5, #12]
 8007148:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800714a:	7c2b      	ldrb	r3, [r5, #16]
 800714c:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 800714e:	4ab9      	ldr	r2, [pc, #740]	@ (8007434 <loadMenuTexts+0x1208>)
 8007150:	4bb9      	ldr	r3, [pc, #740]	@ (8007438 <loadMenuTexts+0x120c>)
 8007152:	4614      	mov	r4, r2
 8007154:	461d      	mov	r5, r3
 8007156:	6828      	ldr	r0, [r5, #0]
 8007158:	6869      	ldr	r1, [r5, #4]
 800715a:	68aa      	ldr	r2, [r5, #8]
 800715c:	68eb      	ldr	r3, [r5, #12]
 800715e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007160:	7c2b      	ldrb	r3, [r5, #16]
 8007162:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8007164:	4ab5      	ldr	r2, [pc, #724]	@ (800743c <loadMenuTexts+0x1210>)
 8007166:	4bb6      	ldr	r3, [pc, #728]	@ (8007440 <loadMenuTexts+0x1214>)
 8007168:	4614      	mov	r4, r2
 800716a:	461d      	mov	r5, r3
 800716c:	6828      	ldr	r0, [r5, #0]
 800716e:	6869      	ldr	r1, [r5, #4]
 8007170:	68aa      	ldr	r2, [r5, #8]
 8007172:	68eb      	ldr	r3, [r5, #12]
 8007174:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007176:	7c2b      	ldrb	r3, [r5, #16]
 8007178:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 800717a:	4ab2      	ldr	r2, [pc, #712]	@ (8007444 <loadMenuTexts+0x1218>)
 800717c:	4bb2      	ldr	r3, [pc, #712]	@ (8007448 <loadMenuTexts+0x121c>)
 800717e:	4614      	mov	r4, r2
 8007180:	461d      	mov	r5, r3
 8007182:	6828      	ldr	r0, [r5, #0]
 8007184:	6869      	ldr	r1, [r5, #4]
 8007186:	68aa      	ldr	r2, [r5, #8]
 8007188:	68eb      	ldr	r3, [r5, #12]
 800718a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800718c:	7c2b      	ldrb	r3, [r5, #16]
 800718e:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 8007190:	4aae      	ldr	r2, [pc, #696]	@ (800744c <loadMenuTexts+0x1220>)
 8007192:	4baf      	ldr	r3, [pc, #700]	@ (8007450 <loadMenuTexts+0x1224>)
 8007194:	4614      	mov	r4, r2
 8007196:	461d      	mov	r5, r3
 8007198:	6828      	ldr	r0, [r5, #0]
 800719a:	6869      	ldr	r1, [r5, #4]
 800719c:	68aa      	ldr	r2, [r5, #8]
 800719e:	68eb      	ldr	r3, [r5, #12]
 80071a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071a2:	7c2b      	ldrb	r3, [r5, #16]
 80071a4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 80071a6:	4aab      	ldr	r2, [pc, #684]	@ (8007454 <loadMenuTexts+0x1228>)
 80071a8:	4bab      	ldr	r3, [pc, #684]	@ (8007458 <loadMenuTexts+0x122c>)
 80071aa:	4614      	mov	r4, r2
 80071ac:	461d      	mov	r5, r3
 80071ae:	6828      	ldr	r0, [r5, #0]
 80071b0:	6869      	ldr	r1, [r5, #4]
 80071b2:	68aa      	ldr	r2, [r5, #8]
 80071b4:	68eb      	ldr	r3, [r5, #12]
 80071b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071b8:	7c2b      	ldrb	r3, [r5, #16]
 80071ba:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 80071bc:	4aa7      	ldr	r2, [pc, #668]	@ (800745c <loadMenuTexts+0x1230>)
 80071be:	4ba8      	ldr	r3, [pc, #672]	@ (8007460 <loadMenuTexts+0x1234>)
 80071c0:	4614      	mov	r4, r2
 80071c2:	461d      	mov	r5, r3
 80071c4:	6828      	ldr	r0, [r5, #0]
 80071c6:	6869      	ldr	r1, [r5, #4]
 80071c8:	68aa      	ldr	r2, [r5, #8]
 80071ca:	68eb      	ldr	r3, [r5, #12]
 80071cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071ce:	7c2b      	ldrb	r3, [r5, #16]
 80071d0:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 80071d2:	4aa4      	ldr	r2, [pc, #656]	@ (8007464 <loadMenuTexts+0x1238>)
 80071d4:	4ba4      	ldr	r3, [pc, #656]	@ (8007468 <loadMenuTexts+0x123c>)
 80071d6:	4614      	mov	r4, r2
 80071d8:	461d      	mov	r5, r3
 80071da:	6828      	ldr	r0, [r5, #0]
 80071dc:	6869      	ldr	r1, [r5, #4]
 80071de:	68aa      	ldr	r2, [r5, #8]
 80071e0:	68eb      	ldr	r3, [r5, #12]
 80071e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071e4:	7c2b      	ldrb	r3, [r5, #16]
 80071e6:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 80071e8:	4aa0      	ldr	r2, [pc, #640]	@ (800746c <loadMenuTexts+0x1240>)
 80071ea:	4ba1      	ldr	r3, [pc, #644]	@ (8007470 <loadMenuTexts+0x1244>)
 80071ec:	4614      	mov	r4, r2
 80071ee:	461d      	mov	r5, r3
 80071f0:	6828      	ldr	r0, [r5, #0]
 80071f2:	6869      	ldr	r1, [r5, #4]
 80071f4:	68aa      	ldr	r2, [r5, #8]
 80071f6:	68eb      	ldr	r3, [r5, #12]
 80071f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071fa:	7c2b      	ldrb	r3, [r5, #16]
 80071fc:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 80071fe:	4a9d      	ldr	r2, [pc, #628]	@ (8007474 <loadMenuTexts+0x1248>)
 8007200:	4b9d      	ldr	r3, [pc, #628]	@ (8007478 <loadMenuTexts+0x124c>)
 8007202:	4614      	mov	r4, r2
 8007204:	461d      	mov	r5, r3
 8007206:	6828      	ldr	r0, [r5, #0]
 8007208:	6869      	ldr	r1, [r5, #4]
 800720a:	68aa      	ldr	r2, [r5, #8]
 800720c:	68eb      	ldr	r3, [r5, #12]
 800720e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007210:	7c2b      	ldrb	r3, [r5, #16]
 8007212:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8007214:	4a99      	ldr	r2, [pc, #612]	@ (800747c <loadMenuTexts+0x1250>)
 8007216:	4b9a      	ldr	r3, [pc, #616]	@ (8007480 <loadMenuTexts+0x1254>)
 8007218:	4614      	mov	r4, r2
 800721a:	461d      	mov	r5, r3
 800721c:	6828      	ldr	r0, [r5, #0]
 800721e:	6869      	ldr	r1, [r5, #4]
 8007220:	68aa      	ldr	r2, [r5, #8]
 8007222:	68eb      	ldr	r3, [r5, #12]
 8007224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007226:	7c2b      	ldrb	r3, [r5, #16]
 8007228:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 800722a:	4a96      	ldr	r2, [pc, #600]	@ (8007484 <loadMenuTexts+0x1258>)
 800722c:	4b96      	ldr	r3, [pc, #600]	@ (8007488 <loadMenuTexts+0x125c>)
 800722e:	4614      	mov	r4, r2
 8007230:	461d      	mov	r5, r3
 8007232:	6828      	ldr	r0, [r5, #0]
 8007234:	6869      	ldr	r1, [r5, #4]
 8007236:	68aa      	ldr	r2, [r5, #8]
 8007238:	68eb      	ldr	r3, [r5, #12]
 800723a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800723c:	7c2b      	ldrb	r3, [r5, #16]
 800723e:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8007240:	4a92      	ldr	r2, [pc, #584]	@ (800748c <loadMenuTexts+0x1260>)
 8007242:	4b93      	ldr	r3, [pc, #588]	@ (8007490 <loadMenuTexts+0x1264>)
 8007244:	4614      	mov	r4, r2
 8007246:	461d      	mov	r5, r3
 8007248:	6828      	ldr	r0, [r5, #0]
 800724a:	6869      	ldr	r1, [r5, #4]
 800724c:	68aa      	ldr	r2, [r5, #8]
 800724e:	68eb      	ldr	r3, [r5, #12]
 8007250:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007252:	7c2b      	ldrb	r3, [r5, #16]
 8007254:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8007256:	4a8f      	ldr	r2, [pc, #572]	@ (8007494 <loadMenuTexts+0x1268>)
 8007258:	4b8f      	ldr	r3, [pc, #572]	@ (8007498 <loadMenuTexts+0x126c>)
 800725a:	4614      	mov	r4, r2
 800725c:	461d      	mov	r5, r3
 800725e:	6828      	ldr	r0, [r5, #0]
 8007260:	6869      	ldr	r1, [r5, #4]
 8007262:	68aa      	ldr	r2, [r5, #8]
 8007264:	68eb      	ldr	r3, [r5, #12]
 8007266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007268:	7c2b      	ldrb	r3, [r5, #16]
 800726a:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 800726c:	4a8b      	ldr	r2, [pc, #556]	@ (800749c <loadMenuTexts+0x1270>)
 800726e:	4b8c      	ldr	r3, [pc, #560]	@ (80074a0 <loadMenuTexts+0x1274>)
 8007270:	4614      	mov	r4, r2
 8007272:	461d      	mov	r5, r3
 8007274:	6828      	ldr	r0, [r5, #0]
 8007276:	6869      	ldr	r1, [r5, #4]
 8007278:	68aa      	ldr	r2, [r5, #8]
 800727a:	68eb      	ldr	r3, [r5, #12]
 800727c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800727e:	7c2b      	ldrb	r3, [r5, #16]
 8007280:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 8007282:	4a88      	ldr	r2, [pc, #544]	@ (80074a4 <loadMenuTexts+0x1278>)
 8007284:	4b88      	ldr	r3, [pc, #544]	@ (80074a8 <loadMenuTexts+0x127c>)
 8007286:	4614      	mov	r4, r2
 8007288:	461d      	mov	r5, r3
 800728a:	6828      	ldr	r0, [r5, #0]
 800728c:	6869      	ldr	r1, [r5, #4]
 800728e:	68aa      	ldr	r2, [r5, #8]
 8007290:	68eb      	ldr	r3, [r5, #12]
 8007292:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007294:	7c2b      	ldrb	r3, [r5, #16]
 8007296:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8007298:	4a84      	ldr	r2, [pc, #528]	@ (80074ac <loadMenuTexts+0x1280>)
 800729a:	4b85      	ldr	r3, [pc, #532]	@ (80074b0 <loadMenuTexts+0x1284>)
 800729c:	4614      	mov	r4, r2
 800729e:	461d      	mov	r5, r3
 80072a0:	6828      	ldr	r0, [r5, #0]
 80072a2:	6869      	ldr	r1, [r5, #4]
 80072a4:	68aa      	ldr	r2, [r5, #8]
 80072a6:	68eb      	ldr	r3, [r5, #12]
 80072a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072aa:	7c2b      	ldrb	r3, [r5, #16]
 80072ac:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 80072ae:	4a81      	ldr	r2, [pc, #516]	@ (80074b4 <loadMenuTexts+0x1288>)
 80072b0:	4b81      	ldr	r3, [pc, #516]	@ (80074b8 <loadMenuTexts+0x128c>)
 80072b2:	4614      	mov	r4, r2
 80072b4:	461d      	mov	r5, r3
 80072b6:	6828      	ldr	r0, [r5, #0]
 80072b8:	6869      	ldr	r1, [r5, #4]
 80072ba:	68aa      	ldr	r2, [r5, #8]
 80072bc:	68eb      	ldr	r3, [r5, #12]
 80072be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072c0:	7c2b      	ldrb	r3, [r5, #16]
 80072c2:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 80072c4:	4a7d      	ldr	r2, [pc, #500]	@ (80074bc <loadMenuTexts+0x1290>)
 80072c6:	4b7e      	ldr	r3, [pc, #504]	@ (80074c0 <loadMenuTexts+0x1294>)
 80072c8:	4614      	mov	r4, r2
 80072ca:	461d      	mov	r5, r3
 80072cc:	6828      	ldr	r0, [r5, #0]
 80072ce:	6869      	ldr	r1, [r5, #4]
 80072d0:	68aa      	ldr	r2, [r5, #8]
 80072d2:	68eb      	ldr	r3, [r5, #12]
 80072d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072d6:	7c2b      	ldrb	r3, [r5, #16]
 80072d8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 80072da:	4a7a      	ldr	r2, [pc, #488]	@ (80074c4 <loadMenuTexts+0x1298>)
 80072dc:	4b7a      	ldr	r3, [pc, #488]	@ (80074c8 <loadMenuTexts+0x129c>)
 80072de:	4614      	mov	r4, r2
 80072e0:	461d      	mov	r5, r3
 80072e2:	6828      	ldr	r0, [r5, #0]
 80072e4:	6869      	ldr	r1, [r5, #4]
 80072e6:	68aa      	ldr	r2, [r5, #8]
 80072e8:	68eb      	ldr	r3, [r5, #12]
 80072ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ec:	7c2b      	ldrb	r3, [r5, #16]
 80072ee:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 80072f0:	4a76      	ldr	r2, [pc, #472]	@ (80074cc <loadMenuTexts+0x12a0>)
 80072f2:	4b77      	ldr	r3, [pc, #476]	@ (80074d0 <loadMenuTexts+0x12a4>)
 80072f4:	4614      	mov	r4, r2
 80072f6:	461d      	mov	r5, r3
 80072f8:	6828      	ldr	r0, [r5, #0]
 80072fa:	6869      	ldr	r1, [r5, #4]
 80072fc:	68aa      	ldr	r2, [r5, #8]
 80072fe:	68eb      	ldr	r3, [r5, #12]
 8007300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007302:	7c2b      	ldrb	r3, [r5, #16]
 8007304:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8007306:	4a73      	ldr	r2, [pc, #460]	@ (80074d4 <loadMenuTexts+0x12a8>)
 8007308:	4b73      	ldr	r3, [pc, #460]	@ (80074d8 <loadMenuTexts+0x12ac>)
 800730a:	4614      	mov	r4, r2
 800730c:	461d      	mov	r5, r3
 800730e:	6828      	ldr	r0, [r5, #0]
 8007310:	6869      	ldr	r1, [r5, #4]
 8007312:	68aa      	ldr	r2, [r5, #8]
 8007314:	68eb      	ldr	r3, [r5, #12]
 8007316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007318:	7c2b      	ldrb	r3, [r5, #16]
 800731a:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 800731c:	4a6f      	ldr	r2, [pc, #444]	@ (80074dc <loadMenuTexts+0x12b0>)
 800731e:	4b70      	ldr	r3, [pc, #448]	@ (80074e0 <loadMenuTexts+0x12b4>)
 8007320:	4614      	mov	r4, r2
 8007322:	461d      	mov	r5, r3
 8007324:	6828      	ldr	r0, [r5, #0]
 8007326:	6869      	ldr	r1, [r5, #4]
 8007328:	68aa      	ldr	r2, [r5, #8]
 800732a:	68eb      	ldr	r3, [r5, #12]
 800732c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800732e:	7c2b      	ldrb	r3, [r5, #16]
 8007330:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 8007332:	4a6c      	ldr	r2, [pc, #432]	@ (80074e4 <loadMenuTexts+0x12b8>)
 8007334:	4b6c      	ldr	r3, [pc, #432]	@ (80074e8 <loadMenuTexts+0x12bc>)
 8007336:	4614      	mov	r4, r2
 8007338:	461d      	mov	r5, r3
 800733a:	6828      	ldr	r0, [r5, #0]
 800733c:	6869      	ldr	r1, [r5, #4]
 800733e:	68aa      	ldr	r2, [r5, #8]
 8007340:	68eb      	ldr	r3, [r5, #12]
 8007342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007344:	7c2b      	ldrb	r3, [r5, #16]
 8007346:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8007348:	4a68      	ldr	r2, [pc, #416]	@ (80074ec <loadMenuTexts+0x12c0>)
 800734a:	4b69      	ldr	r3, [pc, #420]	@ (80074f0 <loadMenuTexts+0x12c4>)
 800734c:	4614      	mov	r4, r2
 800734e:	461d      	mov	r5, r3
 8007350:	6828      	ldr	r0, [r5, #0]
 8007352:	6869      	ldr	r1, [r5, #4]
 8007354:	68aa      	ldr	r2, [r5, #8]
 8007356:	68eb      	ldr	r3, [r5, #12]
 8007358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800735a:	7c2b      	ldrb	r3, [r5, #16]
 800735c:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 800735e:	4a65      	ldr	r2, [pc, #404]	@ (80074f4 <loadMenuTexts+0x12c8>)
 8007360:	4b65      	ldr	r3, [pc, #404]	@ (80074f8 <loadMenuTexts+0x12cc>)
 8007362:	4614      	mov	r4, r2
 8007364:	461d      	mov	r5, r3
 8007366:	6828      	ldr	r0, [r5, #0]
 8007368:	6869      	ldr	r1, [r5, #4]
 800736a:	68aa      	ldr	r2, [r5, #8]
 800736c:	68eb      	ldr	r3, [r5, #12]
 800736e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007370:	7c2b      	ldrb	r3, [r5, #16]
 8007372:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 8007374:	4a61      	ldr	r2, [pc, #388]	@ (80074fc <loadMenuTexts+0x12d0>)
 8007376:	4b62      	ldr	r3, [pc, #392]	@ (8007500 <loadMenuTexts+0x12d4>)
 8007378:	4614      	mov	r4, r2
 800737a:	461d      	mov	r5, r3
 800737c:	6828      	ldr	r0, [r5, #0]
 800737e:	6869      	ldr	r1, [r5, #4]
 8007380:	68aa      	ldr	r2, [r5, #8]
 8007382:	68eb      	ldr	r3, [r5, #12]
 8007384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007386:	7c2b      	ldrb	r3, [r5, #16]
 8007388:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 800738a:	4a5e      	ldr	r2, [pc, #376]	@ (8007504 <loadMenuTexts+0x12d8>)
 800738c:	4b5e      	ldr	r3, [pc, #376]	@ (8007508 <loadMenuTexts+0x12dc>)
 800738e:	4614      	mov	r4, r2
 8007390:	461d      	mov	r5, r3
 8007392:	6828      	ldr	r0, [r5, #0]
 8007394:	6869      	ldr	r1, [r5, #4]
 8007396:	68aa      	ldr	r2, [r5, #8]
 8007398:	68eb      	ldr	r3, [r5, #12]
 800739a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800739c:	7c2b      	ldrb	r3, [r5, #16]
 800739e:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 80073a0:	4a5a      	ldr	r2, [pc, #360]	@ (800750c <loadMenuTexts+0x12e0>)
 80073a2:	4b5b      	ldr	r3, [pc, #364]	@ (8007510 <loadMenuTexts+0x12e4>)
 80073a4:	4614      	mov	r4, r2
 80073a6:	461d      	mov	r5, r3
 80073a8:	6828      	ldr	r0, [r5, #0]
 80073aa:	6869      	ldr	r1, [r5, #4]
 80073ac:	68aa      	ldr	r2, [r5, #8]
 80073ae:	68eb      	ldr	r3, [r5, #12]
 80073b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073b2:	7c2b      	ldrb	r3, [r5, #16]
 80073b4:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 80073b6:	4a57      	ldr	r2, [pc, #348]	@ (8007514 <loadMenuTexts+0x12e8>)
 80073b8:	4b57      	ldr	r3, [pc, #348]	@ (8007518 <loadMenuTexts+0x12ec>)
 80073ba:	4614      	mov	r4, r2
 80073bc:	461d      	mov	r5, r3
 80073be:	6828      	ldr	r0, [r5, #0]
 80073c0:	6869      	ldr	r1, [r5, #4]
 80073c2:	68aa      	ldr	r2, [r5, #8]
 80073c4:	68eb      	ldr	r3, [r5, #12]
 80073c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073c8:	7c2b      	ldrb	r3, [r5, #16]
 80073ca:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 80073cc:	4a53      	ldr	r2, [pc, #332]	@ (800751c <loadMenuTexts+0x12f0>)
 80073ce:	4b54      	ldr	r3, [pc, #336]	@ (8007520 <loadMenuTexts+0x12f4>)
 80073d0:	4614      	mov	r4, r2
 80073d2:	461d      	mov	r5, r3
 80073d4:	6828      	ldr	r0, [r5, #0]
 80073d6:	6869      	ldr	r1, [r5, #4]
 80073d8:	68aa      	ldr	r2, [r5, #8]
 80073da:	68eb      	ldr	r3, [r5, #12]
 80073dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073de:	7c2b      	ldrb	r3, [r5, #16]
 80073e0:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 80073e2:	4a50      	ldr	r2, [pc, #320]	@ (8007524 <loadMenuTexts+0x12f8>)
 80073e4:	4b50      	ldr	r3, [pc, #320]	@ (8007528 <loadMenuTexts+0x12fc>)
 80073e6:	4614      	mov	r4, r2
 80073e8:	461d      	mov	r5, r3
 80073ea:	6828      	ldr	r0, [r5, #0]
 80073ec:	6869      	ldr	r1, [r5, #4]
 80073ee:	68aa      	ldr	r2, [r5, #8]
 80073f0:	68eb      	ldr	r3, [r5, #12]
 80073f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073f4:	7c2b      	ldrb	r3, [r5, #16]
 80073f6:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 80073f8:	4a4c      	ldr	r2, [pc, #304]	@ (800752c <loadMenuTexts+0x1300>)
 80073fa:	4b4d      	ldr	r3, [pc, #308]	@ (8007530 <loadMenuTexts+0x1304>)
 80073fc:	4614      	mov	r4, r2
 80073fe:	461d      	mov	r5, r3
 8007400:	6828      	ldr	r0, [r5, #0]
 8007402:	6869      	ldr	r1, [r5, #4]
 8007404:	68aa      	ldr	r2, [r5, #8]
 8007406:	68eb      	ldr	r3, [r5, #12]
 8007408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800740a:	7c2b      	ldrb	r3, [r5, #16]
 800740c:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 800740e:	4a49      	ldr	r2, [pc, #292]	@ (8007534 <loadMenuTexts+0x1308>)
 8007410:	4b49      	ldr	r3, [pc, #292]	@ (8007538 <loadMenuTexts+0x130c>)
 8007412:	4614      	mov	r4, r2
 8007414:	461d      	mov	r5, r3
 8007416:	e091      	b.n	800753c <loadMenuTexts+0x1310>
 8007418:	200009d4 	.word	0x200009d4
 800741c:	20001504 	.word	0x20001504
 8007420:	200009e8 	.word	0x200009e8
 8007424:	20001518 	.word	0x20001518
 8007428:	200009fc 	.word	0x200009fc
 800742c:	2000152c 	.word	0x2000152c
 8007430:	20000a10 	.word	0x20000a10
 8007434:	20001540 	.word	0x20001540
 8007438:	20000a24 	.word	0x20000a24
 800743c:	20001554 	.word	0x20001554
 8007440:	20000a38 	.word	0x20000a38
 8007444:	20001568 	.word	0x20001568
 8007448:	20000a4c 	.word	0x20000a4c
 800744c:	2000157c 	.word	0x2000157c
 8007450:	20000a60 	.word	0x20000a60
 8007454:	20001590 	.word	0x20001590
 8007458:	20000a74 	.word	0x20000a74
 800745c:	200015a4 	.word	0x200015a4
 8007460:	20000a88 	.word	0x20000a88
 8007464:	200015b8 	.word	0x200015b8
 8007468:	20000a9c 	.word	0x20000a9c
 800746c:	200015cc 	.word	0x200015cc
 8007470:	20000ab0 	.word	0x20000ab0
 8007474:	200015e0 	.word	0x200015e0
 8007478:	20000ac4 	.word	0x20000ac4
 800747c:	200015f4 	.word	0x200015f4
 8007480:	20000ad8 	.word	0x20000ad8
 8007484:	20001608 	.word	0x20001608
 8007488:	20000aec 	.word	0x20000aec
 800748c:	2000161c 	.word	0x2000161c
 8007490:	20000b00 	.word	0x20000b00
 8007494:	20001630 	.word	0x20001630
 8007498:	20000b14 	.word	0x20000b14
 800749c:	20001644 	.word	0x20001644
 80074a0:	20000b28 	.word	0x20000b28
 80074a4:	20001658 	.word	0x20001658
 80074a8:	20000b3c 	.word	0x20000b3c
 80074ac:	2000166c 	.word	0x2000166c
 80074b0:	20000b50 	.word	0x20000b50
 80074b4:	20001680 	.word	0x20001680
 80074b8:	20000b64 	.word	0x20000b64
 80074bc:	20001694 	.word	0x20001694
 80074c0:	20000b78 	.word	0x20000b78
 80074c4:	200016a8 	.word	0x200016a8
 80074c8:	20000b8c 	.word	0x20000b8c
 80074cc:	200016bc 	.word	0x200016bc
 80074d0:	20000ba0 	.word	0x20000ba0
 80074d4:	200016d0 	.word	0x200016d0
 80074d8:	20000bb4 	.word	0x20000bb4
 80074dc:	200016e4 	.word	0x200016e4
 80074e0:	20000bc8 	.word	0x20000bc8
 80074e4:	200016f8 	.word	0x200016f8
 80074e8:	20000bdc 	.word	0x20000bdc
 80074ec:	2000170c 	.word	0x2000170c
 80074f0:	20000bf0 	.word	0x20000bf0
 80074f4:	20001720 	.word	0x20001720
 80074f8:	20000c04 	.word	0x20000c04
 80074fc:	20001734 	.word	0x20001734
 8007500:	20000c18 	.word	0x20000c18
 8007504:	20001748 	.word	0x20001748
 8007508:	20000c2c 	.word	0x20000c2c
 800750c:	2000175c 	.word	0x2000175c
 8007510:	20000c40 	.word	0x20000c40
 8007514:	20001770 	.word	0x20001770
 8007518:	20000c54 	.word	0x20000c54
 800751c:	20001784 	.word	0x20001784
 8007520:	20000c68 	.word	0x20000c68
 8007524:	20001798 	.word	0x20001798
 8007528:	20000cf4 	.word	0x20000cf4
 800752c:	200017ac 	.word	0x200017ac
 8007530:	20000d08 	.word	0x20000d08
 8007534:	200017c0 	.word	0x200017c0
 8007538:	20000ccc 	.word	0x20000ccc
 800753c:	6828      	ldr	r0, [r5, #0]
 800753e:	6869      	ldr	r1, [r5, #4]
 8007540:	68aa      	ldr	r2, [r5, #8]
 8007542:	68eb      	ldr	r3, [r5, #12]
 8007544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007546:	7c2b      	ldrb	r3, [r5, #16]
 8007548:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 800754a:	4a5b      	ldr	r2, [pc, #364]	@ (80076b8 <loadMenuTexts+0x148c>)
 800754c:	4b5b      	ldr	r3, [pc, #364]	@ (80076bc <loadMenuTexts+0x1490>)
 800754e:	4614      	mov	r4, r2
 8007550:	461d      	mov	r5, r3
 8007552:	6828      	ldr	r0, [r5, #0]
 8007554:	6869      	ldr	r1, [r5, #4]
 8007556:	68aa      	ldr	r2, [r5, #8]
 8007558:	68eb      	ldr	r3, [r5, #12]
 800755a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800755c:	7c2b      	ldrb	r3, [r5, #16]
 800755e:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 8007560:	4a57      	ldr	r2, [pc, #348]	@ (80076c0 <loadMenuTexts+0x1494>)
 8007562:	4b58      	ldr	r3, [pc, #352]	@ (80076c4 <loadMenuTexts+0x1498>)
 8007564:	4614      	mov	r4, r2
 8007566:	461d      	mov	r5, r3
 8007568:	6828      	ldr	r0, [r5, #0]
 800756a:	6869      	ldr	r1, [r5, #4]
 800756c:	68aa      	ldr	r2, [r5, #8]
 800756e:	68eb      	ldr	r3, [r5, #12]
 8007570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007572:	7c2b      	ldrb	r3, [r5, #16]
 8007574:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 8007576:	4a54      	ldr	r2, [pc, #336]	@ (80076c8 <loadMenuTexts+0x149c>)
 8007578:	4b54      	ldr	r3, [pc, #336]	@ (80076cc <loadMenuTexts+0x14a0>)
 800757a:	4614      	mov	r4, r2
 800757c:	461d      	mov	r5, r3
 800757e:	6828      	ldr	r0, [r5, #0]
 8007580:	6869      	ldr	r1, [r5, #4]
 8007582:	68aa      	ldr	r2, [r5, #8]
 8007584:	68eb      	ldr	r3, [r5, #12]
 8007586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007588:	7c2b      	ldrb	r3, [r5, #16]
 800758a:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 800758c:	4a50      	ldr	r2, [pc, #320]	@ (80076d0 <loadMenuTexts+0x14a4>)
 800758e:	4b51      	ldr	r3, [pc, #324]	@ (80076d4 <loadMenuTexts+0x14a8>)
 8007590:	4614      	mov	r4, r2
 8007592:	461d      	mov	r5, r3
 8007594:	6828      	ldr	r0, [r5, #0]
 8007596:	6869      	ldr	r1, [r5, #4]
 8007598:	68aa      	ldr	r2, [r5, #8]
 800759a:	68eb      	ldr	r3, [r5, #12]
 800759c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800759e:	7c2b      	ldrb	r3, [r5, #16]
 80075a0:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 80075a2:	4a4d      	ldr	r2, [pc, #308]	@ (80076d8 <loadMenuTexts+0x14ac>)
 80075a4:	4b4d      	ldr	r3, [pc, #308]	@ (80076dc <loadMenuTexts+0x14b0>)
 80075a6:	4614      	mov	r4, r2
 80075a8:	461d      	mov	r5, r3
 80075aa:	6828      	ldr	r0, [r5, #0]
 80075ac:	6869      	ldr	r1, [r5, #4]
 80075ae:	68aa      	ldr	r2, [r5, #8]
 80075b0:	68eb      	ldr	r3, [r5, #12]
 80075b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075b4:	7c2b      	ldrb	r3, [r5, #16]
 80075b6:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 80075b8:	4a49      	ldr	r2, [pc, #292]	@ (80076e0 <loadMenuTexts+0x14b4>)
 80075ba:	4b4a      	ldr	r3, [pc, #296]	@ (80076e4 <loadMenuTexts+0x14b8>)
 80075bc:	4614      	mov	r4, r2
 80075be:	461d      	mov	r5, r3
 80075c0:	6828      	ldr	r0, [r5, #0]
 80075c2:	6869      	ldr	r1, [r5, #4]
 80075c4:	68aa      	ldr	r2, [r5, #8]
 80075c6:	68eb      	ldr	r3, [r5, #12]
 80075c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075ca:	7c2b      	ldrb	r3, [r5, #16]
 80075cc:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 80075ce:	4a46      	ldr	r2, [pc, #280]	@ (80076e8 <loadMenuTexts+0x14bc>)
 80075d0:	4b46      	ldr	r3, [pc, #280]	@ (80076ec <loadMenuTexts+0x14c0>)
 80075d2:	4614      	mov	r4, r2
 80075d4:	461d      	mov	r5, r3
 80075d6:	6828      	ldr	r0, [r5, #0]
 80075d8:	6869      	ldr	r1, [r5, #4]
 80075da:	68aa      	ldr	r2, [r5, #8]
 80075dc:	68eb      	ldr	r3, [r5, #12]
 80075de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075e0:	7c2b      	ldrb	r3, [r5, #16]
 80075e2:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 80075e4:	4a42      	ldr	r2, [pc, #264]	@ (80076f0 <loadMenuTexts+0x14c4>)
 80075e6:	4b43      	ldr	r3, [pc, #268]	@ (80076f4 <loadMenuTexts+0x14c8>)
 80075e8:	4614      	mov	r4, r2
 80075ea:	461d      	mov	r5, r3
 80075ec:	6828      	ldr	r0, [r5, #0]
 80075ee:	6869      	ldr	r1, [r5, #4]
 80075f0:	68aa      	ldr	r2, [r5, #8]
 80075f2:	68eb      	ldr	r3, [r5, #12]
 80075f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075f6:	7c2b      	ldrb	r3, [r5, #16]
 80075f8:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 80075fa:	4a3f      	ldr	r2, [pc, #252]	@ (80076f8 <loadMenuTexts+0x14cc>)
 80075fc:	4b3f      	ldr	r3, [pc, #252]	@ (80076fc <loadMenuTexts+0x14d0>)
 80075fe:	4614      	mov	r4, r2
 8007600:	461d      	mov	r5, r3
 8007602:	6828      	ldr	r0, [r5, #0]
 8007604:	6869      	ldr	r1, [r5, #4]
 8007606:	68aa      	ldr	r2, [r5, #8]
 8007608:	68eb      	ldr	r3, [r5, #12]
 800760a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800760c:	7c2b      	ldrb	r3, [r5, #16]
 800760e:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 8007610:	4a3b      	ldr	r2, [pc, #236]	@ (8007700 <loadMenuTexts+0x14d4>)
 8007612:	4b3c      	ldr	r3, [pc, #240]	@ (8007704 <loadMenuTexts+0x14d8>)
 8007614:	4614      	mov	r4, r2
 8007616:	461d      	mov	r5, r3
 8007618:	6828      	ldr	r0, [r5, #0]
 800761a:	6869      	ldr	r1, [r5, #4]
 800761c:	68aa      	ldr	r2, [r5, #8]
 800761e:	68eb      	ldr	r3, [r5, #12]
 8007620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007622:	7c2b      	ldrb	r3, [r5, #16]
 8007624:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 8007626:	4a38      	ldr	r2, [pc, #224]	@ (8007708 <loadMenuTexts+0x14dc>)
 8007628:	4b38      	ldr	r3, [pc, #224]	@ (800770c <loadMenuTexts+0x14e0>)
 800762a:	4614      	mov	r4, r2
 800762c:	461d      	mov	r5, r3
 800762e:	6828      	ldr	r0, [r5, #0]
 8007630:	6869      	ldr	r1, [r5, #4]
 8007632:	68aa      	ldr	r2, [r5, #8]
 8007634:	68eb      	ldr	r3, [r5, #12]
 8007636:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007638:	7c2b      	ldrb	r3, [r5, #16]
 800763a:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 800763c:	4a34      	ldr	r2, [pc, #208]	@ (8007710 <loadMenuTexts+0x14e4>)
 800763e:	4b35      	ldr	r3, [pc, #212]	@ (8007714 <loadMenuTexts+0x14e8>)
 8007640:	4614      	mov	r4, r2
 8007642:	461d      	mov	r5, r3
 8007644:	6828      	ldr	r0, [r5, #0]
 8007646:	6869      	ldr	r1, [r5, #4]
 8007648:	68aa      	ldr	r2, [r5, #8]
 800764a:	68eb      	ldr	r3, [r5, #12]
 800764c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800764e:	7c2b      	ldrb	r3, [r5, #16]
 8007650:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 8007652:	4a31      	ldr	r2, [pc, #196]	@ (8007718 <loadMenuTexts+0x14ec>)
 8007654:	4b31      	ldr	r3, [pc, #196]	@ (800771c <loadMenuTexts+0x14f0>)
 8007656:	4614      	mov	r4, r2
 8007658:	461d      	mov	r5, r3
 800765a:	6828      	ldr	r0, [r5, #0]
 800765c:	6869      	ldr	r1, [r5, #4]
 800765e:	68aa      	ldr	r2, [r5, #8]
 8007660:	68eb      	ldr	r3, [r5, #12]
 8007662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007664:	7c2b      	ldrb	r3, [r5, #16]
 8007666:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 8007668:	4a2d      	ldr	r2, [pc, #180]	@ (8007720 <loadMenuTexts+0x14f4>)
 800766a:	4b2e      	ldr	r3, [pc, #184]	@ (8007724 <loadMenuTexts+0x14f8>)
 800766c:	4614      	mov	r4, r2
 800766e:	461d      	mov	r5, r3
 8007670:	6828      	ldr	r0, [r5, #0]
 8007672:	6869      	ldr	r1, [r5, #4]
 8007674:	68aa      	ldr	r2, [r5, #8]
 8007676:	68eb      	ldr	r3, [r5, #12]
 8007678:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800767a:	7c2b      	ldrb	r3, [r5, #16]
 800767c:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 800767e:	4a2a      	ldr	r2, [pc, #168]	@ (8007728 <loadMenuTexts+0x14fc>)
 8007680:	4b2a      	ldr	r3, [pc, #168]	@ (800772c <loadMenuTexts+0x1500>)
 8007682:	4614      	mov	r4, r2
 8007684:	461d      	mov	r5, r3
 8007686:	6828      	ldr	r0, [r5, #0]
 8007688:	6869      	ldr	r1, [r5, #4]
 800768a:	68aa      	ldr	r2, [r5, #8]
 800768c:	68eb      	ldr	r3, [r5, #12]
 800768e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007690:	7c2b      	ldrb	r3, [r5, #16]
 8007692:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 8007694:	4a26      	ldr	r2, [pc, #152]	@ (8007730 <loadMenuTexts+0x1504>)
 8007696:	4b27      	ldr	r3, [pc, #156]	@ (8007734 <loadMenuTexts+0x1508>)
 8007698:	4614      	mov	r4, r2
 800769a:	461d      	mov	r5, r3
 800769c:	6828      	ldr	r0, [r5, #0]
 800769e:	6869      	ldr	r1, [r5, #4]
 80076a0:	68aa      	ldr	r2, [r5, #8]
 80076a2:	68eb      	ldr	r3, [r5, #12]
 80076a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80076a6:	7c2b      	ldrb	r3, [r5, #16]
 80076a8:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 80076aa:	f000 f845 	bl	8007738 <menuVariableFinisher>
}
 80076ae:	bf00      	nop
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bdb0      	pop	{r4, r5, r7, pc}
 80076b6:	bf00      	nop
 80076b8:	200017d4 	.word	0x200017d4
 80076bc:	20000ce0 	.word	0x20000ce0
 80076c0:	200017e8 	.word	0x200017e8
 80076c4:	20000d44 	.word	0x20000d44
 80076c8:	200017fc 	.word	0x200017fc
 80076cc:	20000d58 	.word	0x20000d58
 80076d0:	20001810 	.word	0x20001810
 80076d4:	20000d94 	.word	0x20000d94
 80076d8:	20001824 	.word	0x20001824
 80076dc:	20000da8 	.word	0x20000da8
 80076e0:	20001838 	.word	0x20001838
 80076e4:	20000de4 	.word	0x20000de4
 80076e8:	2000184c 	.word	0x2000184c
 80076ec:	20000df8 	.word	0x20000df8
 80076f0:	20001860 	.word	0x20001860
 80076f4:	20000e20 	.word	0x20000e20
 80076f8:	20001874 	.word	0x20001874
 80076fc:	20000e48 	.word	0x20000e48
 8007700:	20001888 	.word	0x20001888
 8007704:	20000e70 	.word	0x20000e70
 8007708:	2000189c 	.word	0x2000189c
 800770c:	20000e98 	.word	0x20000e98
 8007710:	200018b0 	.word	0x200018b0
 8007714:	20000ec0 	.word	0x20000ec0
 8007718:	200018c4 	.word	0x200018c4
 800771c:	20000ee8 	.word	0x20000ee8
 8007720:	200018d8 	.word	0x200018d8
 8007724:	20000f10 	.word	0x20000f10
 8007728:	200018ec 	.word	0x200018ec
 800772c:	20000f38 	.word	0x20000f38
 8007730:	20001900 	.word	0x20001900
 8007734:	20000f60 	.word	0x20000f60

08007738 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 8007738:	b480      	push	{r7}
 800773a:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 800773c:	4b99      	ldr	r3, [pc, #612]	@ (80079a4 <menuVariableFinisher+0x26c>)
 800773e:	2200      	movs	r2, #0
 8007740:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 8007742:	4b99      	ldr	r3, [pc, #612]	@ (80079a8 <menuVariableFinisher+0x270>)
 8007744:	2200      	movs	r2, #0
 8007746:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 8007748:	4b98      	ldr	r3, [pc, #608]	@ (80079ac <menuVariableFinisher+0x274>)
 800774a:	2200      	movs	r2, #0
 800774c:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 800774e:	4b98      	ldr	r3, [pc, #608]	@ (80079b0 <menuVariableFinisher+0x278>)
 8007750:	2200      	movs	r2, #0
 8007752:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 8007754:	4b97      	ldr	r3, [pc, #604]	@ (80079b4 <menuVariableFinisher+0x27c>)
 8007756:	2200      	movs	r2, #0
 8007758:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 800775a:	4b97      	ldr	r3, [pc, #604]	@ (80079b8 <menuVariableFinisher+0x280>)
 800775c:	2200      	movs	r2, #0
 800775e:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 8007760:	4b96      	ldr	r3, [pc, #600]	@ (80079bc <menuVariableFinisher+0x284>)
 8007762:	2200      	movs	r2, #0
 8007764:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 8007766:	4b96      	ldr	r3, [pc, #600]	@ (80079c0 <menuVariableFinisher+0x288>)
 8007768:	2200      	movs	r2, #0
 800776a:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 800776c:	4b95      	ldr	r3, [pc, #596]	@ (80079c4 <menuVariableFinisher+0x28c>)
 800776e:	2200      	movs	r2, #0
 8007770:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 8007772:	4b95      	ldr	r3, [pc, #596]	@ (80079c8 <menuVariableFinisher+0x290>)
 8007774:	2200      	movs	r2, #0
 8007776:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 8007778:	4b94      	ldr	r3, [pc, #592]	@ (80079cc <menuVariableFinisher+0x294>)
 800777a:	2200      	movs	r2, #0
 800777c:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 800777e:	4b94      	ldr	r3, [pc, #592]	@ (80079d0 <menuVariableFinisher+0x298>)
 8007780:	2200      	movs	r2, #0
 8007782:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 8007784:	4b93      	ldr	r3, [pc, #588]	@ (80079d4 <menuVariableFinisher+0x29c>)
 8007786:	2200      	movs	r2, #0
 8007788:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 800778a:	4b93      	ldr	r3, [pc, #588]	@ (80079d8 <menuVariableFinisher+0x2a0>)
 800778c:	2200      	movs	r2, #0
 800778e:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 8007790:	4b92      	ldr	r3, [pc, #584]	@ (80079dc <menuVariableFinisher+0x2a4>)
 8007792:	2200      	movs	r2, #0
 8007794:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 8007796:	4b92      	ldr	r3, [pc, #584]	@ (80079e0 <menuVariableFinisher+0x2a8>)
 8007798:	2200      	movs	r2, #0
 800779a:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 800779c:	4b91      	ldr	r3, [pc, #580]	@ (80079e4 <menuVariableFinisher+0x2ac>)
 800779e:	2200      	movs	r2, #0
 80077a0:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 80077a2:	4b91      	ldr	r3, [pc, #580]	@ (80079e8 <menuVariableFinisher+0x2b0>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 80077a8:	4b90      	ldr	r3, [pc, #576]	@ (80079ec <menuVariableFinisher+0x2b4>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 80077ae:	4b90      	ldr	r3, [pc, #576]	@ (80079f0 <menuVariableFinisher+0x2b8>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 80077b4:	4b8f      	ldr	r3, [pc, #572]	@ (80079f4 <menuVariableFinisher+0x2bc>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 80077ba:	4b8f      	ldr	r3, [pc, #572]	@ (80079f8 <menuVariableFinisher+0x2c0>)
 80077bc:	2200      	movs	r2, #0
 80077be:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 80077c0:	4b8e      	ldr	r3, [pc, #568]	@ (80079fc <menuVariableFinisher+0x2c4>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 80077c6:	4b8e      	ldr	r3, [pc, #568]	@ (8007a00 <menuVariableFinisher+0x2c8>)
 80077c8:	2200      	movs	r2, #0
 80077ca:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 80077cc:	4b8d      	ldr	r3, [pc, #564]	@ (8007a04 <menuVariableFinisher+0x2cc>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 80077d2:	4b8d      	ldr	r3, [pc, #564]	@ (8007a08 <menuVariableFinisher+0x2d0>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 80077d8:	4b8c      	ldr	r3, [pc, #560]	@ (8007a0c <menuVariableFinisher+0x2d4>)
 80077da:	2200      	movs	r2, #0
 80077dc:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 80077de:	4b8c      	ldr	r3, [pc, #560]	@ (8007a10 <menuVariableFinisher+0x2d8>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 80077e4:	4b8b      	ldr	r3, [pc, #556]	@ (8007a14 <menuVariableFinisher+0x2dc>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 80077ea:	4b8b      	ldr	r3, [pc, #556]	@ (8007a18 <menuVariableFinisher+0x2e0>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 80077f0:	4b8a      	ldr	r3, [pc, #552]	@ (8007a1c <menuVariableFinisher+0x2e4>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 80077f6:	4b8a      	ldr	r3, [pc, #552]	@ (8007a20 <menuVariableFinisher+0x2e8>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 80077fc:	4b89      	ldr	r3, [pc, #548]	@ (8007a24 <menuVariableFinisher+0x2ec>)
 80077fe:	2200      	movs	r2, #0
 8007800:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 8007802:	4b89      	ldr	r3, [pc, #548]	@ (8007a28 <menuVariableFinisher+0x2f0>)
 8007804:	2200      	movs	r2, #0
 8007806:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 8007808:	4b88      	ldr	r3, [pc, #544]	@ (8007a2c <menuVariableFinisher+0x2f4>)
 800780a:	2200      	movs	r2, #0
 800780c:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 800780e:	4b88      	ldr	r3, [pc, #544]	@ (8007a30 <menuVariableFinisher+0x2f8>)
 8007810:	2200      	movs	r2, #0
 8007812:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 8007814:	4b87      	ldr	r3, [pc, #540]	@ (8007a34 <menuVariableFinisher+0x2fc>)
 8007816:	2200      	movs	r2, #0
 8007818:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 800781a:	4b87      	ldr	r3, [pc, #540]	@ (8007a38 <menuVariableFinisher+0x300>)
 800781c:	2200      	movs	r2, #0
 800781e:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 8007820:	4b86      	ldr	r3, [pc, #536]	@ (8007a3c <menuVariableFinisher+0x304>)
 8007822:	2200      	movs	r2, #0
 8007824:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 8007826:	4b86      	ldr	r3, [pc, #536]	@ (8007a40 <menuVariableFinisher+0x308>)
 8007828:	2200      	movs	r2, #0
 800782a:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 800782c:	4b85      	ldr	r3, [pc, #532]	@ (8007a44 <menuVariableFinisher+0x30c>)
 800782e:	2200      	movs	r2, #0
 8007830:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 8007832:	4b85      	ldr	r3, [pc, #532]	@ (8007a48 <menuVariableFinisher+0x310>)
 8007834:	2200      	movs	r2, #0
 8007836:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 8007838:	4b84      	ldr	r3, [pc, #528]	@ (8007a4c <menuVariableFinisher+0x314>)
 800783a:	2200      	movs	r2, #0
 800783c:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 800783e:	4b84      	ldr	r3, [pc, #528]	@ (8007a50 <menuVariableFinisher+0x318>)
 8007840:	2200      	movs	r2, #0
 8007842:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 8007844:	4b83      	ldr	r3, [pc, #524]	@ (8007a54 <menuVariableFinisher+0x31c>)
 8007846:	2200      	movs	r2, #0
 8007848:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 800784a:	4b83      	ldr	r3, [pc, #524]	@ (8007a58 <menuVariableFinisher+0x320>)
 800784c:	2200      	movs	r2, #0
 800784e:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 8007850:	4b82      	ldr	r3, [pc, #520]	@ (8007a5c <menuVariableFinisher+0x324>)
 8007852:	2200      	movs	r2, #0
 8007854:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 8007856:	4b82      	ldr	r3, [pc, #520]	@ (8007a60 <menuVariableFinisher+0x328>)
 8007858:	2200      	movs	r2, #0
 800785a:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 800785c:	4b81      	ldr	r3, [pc, #516]	@ (8007a64 <menuVariableFinisher+0x32c>)
 800785e:	2200      	movs	r2, #0
 8007860:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 8007862:	4b81      	ldr	r3, [pc, #516]	@ (8007a68 <menuVariableFinisher+0x330>)
 8007864:	2200      	movs	r2, #0
 8007866:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8007868:	4b80      	ldr	r3, [pc, #512]	@ (8007a6c <menuVariableFinisher+0x334>)
 800786a:	2200      	movs	r2, #0
 800786c:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 800786e:	4b80      	ldr	r3, [pc, #512]	@ (8007a70 <menuVariableFinisher+0x338>)
 8007870:	2200      	movs	r2, #0
 8007872:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 8007874:	4b7f      	ldr	r3, [pc, #508]	@ (8007a74 <menuVariableFinisher+0x33c>)
 8007876:	2200      	movs	r2, #0
 8007878:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 800787a:	4b7f      	ldr	r3, [pc, #508]	@ (8007a78 <menuVariableFinisher+0x340>)
 800787c:	2200      	movs	r2, #0
 800787e:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 8007880:	4b7e      	ldr	r3, [pc, #504]	@ (8007a7c <menuVariableFinisher+0x344>)
 8007882:	2200      	movs	r2, #0
 8007884:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 8007886:	4b7e      	ldr	r3, [pc, #504]	@ (8007a80 <menuVariableFinisher+0x348>)
 8007888:	2200      	movs	r2, #0
 800788a:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 800788c:	4b7d      	ldr	r3, [pc, #500]	@ (8007a84 <menuVariableFinisher+0x34c>)
 800788e:	2200      	movs	r2, #0
 8007890:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 8007892:	4b7d      	ldr	r3, [pc, #500]	@ (8007a88 <menuVariableFinisher+0x350>)
 8007894:	2200      	movs	r2, #0
 8007896:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8007898:	4b7c      	ldr	r3, [pc, #496]	@ (8007a8c <menuVariableFinisher+0x354>)
 800789a:	2200      	movs	r2, #0
 800789c:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 800789e:	4b7c      	ldr	r3, [pc, #496]	@ (8007a90 <menuVariableFinisher+0x358>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 80078a4:	4b7b      	ldr	r3, [pc, #492]	@ (8007a94 <menuVariableFinisher+0x35c>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 80078aa:	4b7b      	ldr	r3, [pc, #492]	@ (8007a98 <menuVariableFinisher+0x360>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 80078b0:	4b7a      	ldr	r3, [pc, #488]	@ (8007a9c <menuVariableFinisher+0x364>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 80078b6:	4b7a      	ldr	r3, [pc, #488]	@ (8007aa0 <menuVariableFinisher+0x368>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 80078bc:	4b79      	ldr	r3, [pc, #484]	@ (8007aa4 <menuVariableFinisher+0x36c>)
 80078be:	2200      	movs	r2, #0
 80078c0:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 80078c2:	4b79      	ldr	r3, [pc, #484]	@ (8007aa8 <menuVariableFinisher+0x370>)
 80078c4:	2200      	movs	r2, #0
 80078c6:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 80078c8:	4b78      	ldr	r3, [pc, #480]	@ (8007aac <menuVariableFinisher+0x374>)
 80078ca:	2200      	movs	r2, #0
 80078cc:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 80078ce:	4b78      	ldr	r3, [pc, #480]	@ (8007ab0 <menuVariableFinisher+0x378>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 80078d4:	4b77      	ldr	r3, [pc, #476]	@ (8007ab4 <menuVariableFinisher+0x37c>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 80078da:	4b77      	ldr	r3, [pc, #476]	@ (8007ab8 <menuVariableFinisher+0x380>)
 80078dc:	2200      	movs	r2, #0
 80078de:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 80078e0:	4b76      	ldr	r3, [pc, #472]	@ (8007abc <menuVariableFinisher+0x384>)
 80078e2:	2200      	movs	r2, #0
 80078e4:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 80078e6:	4b76      	ldr	r3, [pc, #472]	@ (8007ac0 <menuVariableFinisher+0x388>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 80078ec:	4b75      	ldr	r3, [pc, #468]	@ (8007ac4 <menuVariableFinisher+0x38c>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 80078f2:	4b75      	ldr	r3, [pc, #468]	@ (8007ac8 <menuVariableFinisher+0x390>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 80078f8:	4b74      	ldr	r3, [pc, #464]	@ (8007acc <menuVariableFinisher+0x394>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 80078fe:	4b74      	ldr	r3, [pc, #464]	@ (8007ad0 <menuVariableFinisher+0x398>)
 8007900:	2200      	movs	r2, #0
 8007902:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 8007904:	4b73      	ldr	r3, [pc, #460]	@ (8007ad4 <menuVariableFinisher+0x39c>)
 8007906:	2200      	movs	r2, #0
 8007908:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 800790a:	4b73      	ldr	r3, [pc, #460]	@ (8007ad8 <menuVariableFinisher+0x3a0>)
 800790c:	2200      	movs	r2, #0
 800790e:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 8007910:	4b72      	ldr	r3, [pc, #456]	@ (8007adc <menuVariableFinisher+0x3a4>)
 8007912:	2200      	movs	r2, #0
 8007914:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 8007916:	4b72      	ldr	r3, [pc, #456]	@ (8007ae0 <menuVariableFinisher+0x3a8>)
 8007918:	2200      	movs	r2, #0
 800791a:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 800791c:	4b71      	ldr	r3, [pc, #452]	@ (8007ae4 <menuVariableFinisher+0x3ac>)
 800791e:	2200      	movs	r2, #0
 8007920:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 8007922:	4b71      	ldr	r3, [pc, #452]	@ (8007ae8 <menuVariableFinisher+0x3b0>)
 8007924:	2200      	movs	r2, #0
 8007926:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 8007928:	4b70      	ldr	r3, [pc, #448]	@ (8007aec <menuVariableFinisher+0x3b4>)
 800792a:	2200      	movs	r2, #0
 800792c:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 800792e:	4b70      	ldr	r3, [pc, #448]	@ (8007af0 <menuVariableFinisher+0x3b8>)
 8007930:	2200      	movs	r2, #0
 8007932:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 8007934:	4b6f      	ldr	r3, [pc, #444]	@ (8007af4 <menuVariableFinisher+0x3bc>)
 8007936:	2200      	movs	r2, #0
 8007938:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 800793a:	4b6f      	ldr	r3, [pc, #444]	@ (8007af8 <menuVariableFinisher+0x3c0>)
 800793c:	2200      	movs	r2, #0
 800793e:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 8007940:	4b6e      	ldr	r3, [pc, #440]	@ (8007afc <menuVariableFinisher+0x3c4>)
 8007942:	2200      	movs	r2, #0
 8007944:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 8007946:	4b6e      	ldr	r3, [pc, #440]	@ (8007b00 <menuVariableFinisher+0x3c8>)
 8007948:	2200      	movs	r2, #0
 800794a:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 800794c:	4b6d      	ldr	r3, [pc, #436]	@ (8007b04 <menuVariableFinisher+0x3cc>)
 800794e:	2200      	movs	r2, #0
 8007950:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 8007952:	4b6d      	ldr	r3, [pc, #436]	@ (8007b08 <menuVariableFinisher+0x3d0>)
 8007954:	2200      	movs	r2, #0
 8007956:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 8007958:	4b6c      	ldr	r3, [pc, #432]	@ (8007b0c <menuVariableFinisher+0x3d4>)
 800795a:	2200      	movs	r2, #0
 800795c:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 800795e:	4b6c      	ldr	r3, [pc, #432]	@ (8007b10 <menuVariableFinisher+0x3d8>)
 8007960:	2200      	movs	r2, #0
 8007962:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8007964:	4b6b      	ldr	r3, [pc, #428]	@ (8007b14 <menuVariableFinisher+0x3dc>)
 8007966:	2200      	movs	r2, #0
 8007968:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 800796a:	4b6b      	ldr	r3, [pc, #428]	@ (8007b18 <menuVariableFinisher+0x3e0>)
 800796c:	2200      	movs	r2, #0
 800796e:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 8007970:	4b6a      	ldr	r3, [pc, #424]	@ (8007b1c <menuVariableFinisher+0x3e4>)
 8007972:	2200      	movs	r2, #0
 8007974:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 8007976:	4b6a      	ldr	r3, [pc, #424]	@ (8007b20 <menuVariableFinisher+0x3e8>)
 8007978:	2200      	movs	r2, #0
 800797a:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 800797c:	4b69      	ldr	r3, [pc, #420]	@ (8007b24 <menuVariableFinisher+0x3ec>)
 800797e:	2200      	movs	r2, #0
 8007980:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 8007982:	4b69      	ldr	r3, [pc, #420]	@ (8007b28 <menuVariableFinisher+0x3f0>)
 8007984:	2200      	movs	r2, #0
 8007986:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 8007988:	4b68      	ldr	r3, [pc, #416]	@ (8007b2c <menuVariableFinisher+0x3f4>)
 800798a:	2200      	movs	r2, #0
 800798c:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 800798e:	4b68      	ldr	r3, [pc, #416]	@ (8007b30 <menuVariableFinisher+0x3f8>)
 8007990:	2200      	movs	r2, #0
 8007992:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 8007994:	4b67      	ldr	r3, [pc, #412]	@ (8007b34 <menuVariableFinisher+0x3fc>)
 8007996:	2200      	movs	r2, #0
 8007998:	741a      	strb	r2, [r3, #16]
}
 800799a:	bf00      	nop
 800799c:	46bd      	mov	sp, r7
 800799e:	bc80      	pop	{r7}
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	2000009c 	.word	0x2000009c
 80079a8:	200000b0 	.word	0x200000b0
 80079ac:	200000c4 	.word	0x200000c4
 80079b0:	200000d8 	.word	0x200000d8
 80079b4:	200000ec 	.word	0x200000ec
 80079b8:	20000100 	.word	0x20000100
 80079bc:	20000114 	.word	0x20000114
 80079c0:	20000128 	.word	0x20000128
 80079c4:	2000013c 	.word	0x2000013c
 80079c8:	20000150 	.word	0x20000150
 80079cc:	20000164 	.word	0x20000164
 80079d0:	20000178 	.word	0x20000178
 80079d4:	20001220 	.word	0x20001220
 80079d8:	20001234 	.word	0x20001234
 80079dc:	20001248 	.word	0x20001248
 80079e0:	2000125c 	.word	0x2000125c
 80079e4:	20001270 	.word	0x20001270
 80079e8:	20001284 	.word	0x20001284
 80079ec:	20001298 	.word	0x20001298
 80079f0:	200012ac 	.word	0x200012ac
 80079f4:	200012c0 	.word	0x200012c0
 80079f8:	200012d4 	.word	0x200012d4
 80079fc:	200012e8 	.word	0x200012e8
 8007a00:	200012fc 	.word	0x200012fc
 8007a04:	20001310 	.word	0x20001310
 8007a08:	20001324 	.word	0x20001324
 8007a0c:	20001338 	.word	0x20001338
 8007a10:	2000134c 	.word	0x2000134c
 8007a14:	20001360 	.word	0x20001360
 8007a18:	20001374 	.word	0x20001374
 8007a1c:	20001388 	.word	0x20001388
 8007a20:	2000139c 	.word	0x2000139c
 8007a24:	200013b0 	.word	0x200013b0
 8007a28:	200013c4 	.word	0x200013c4
 8007a2c:	200013d8 	.word	0x200013d8
 8007a30:	200013ec 	.word	0x200013ec
 8007a34:	20001400 	.word	0x20001400
 8007a38:	20001414 	.word	0x20001414
 8007a3c:	20001428 	.word	0x20001428
 8007a40:	2000143c 	.word	0x2000143c
 8007a44:	20001450 	.word	0x20001450
 8007a48:	20001464 	.word	0x20001464
 8007a4c:	20001478 	.word	0x20001478
 8007a50:	2000148c 	.word	0x2000148c
 8007a54:	200014a0 	.word	0x200014a0
 8007a58:	200014b4 	.word	0x200014b4
 8007a5c:	200014c8 	.word	0x200014c8
 8007a60:	200014dc 	.word	0x200014dc
 8007a64:	200014f0 	.word	0x200014f0
 8007a68:	20001504 	.word	0x20001504
 8007a6c:	20001518 	.word	0x20001518
 8007a70:	2000152c 	.word	0x2000152c
 8007a74:	20001540 	.word	0x20001540
 8007a78:	20001554 	.word	0x20001554
 8007a7c:	20001568 	.word	0x20001568
 8007a80:	2000157c 	.word	0x2000157c
 8007a84:	20001590 	.word	0x20001590
 8007a88:	200015a4 	.word	0x200015a4
 8007a8c:	200015b8 	.word	0x200015b8
 8007a90:	200015cc 	.word	0x200015cc
 8007a94:	200015e0 	.word	0x200015e0
 8007a98:	200015f4 	.word	0x200015f4
 8007a9c:	20001608 	.word	0x20001608
 8007aa0:	2000161c 	.word	0x2000161c
 8007aa4:	20001630 	.word	0x20001630
 8007aa8:	20001644 	.word	0x20001644
 8007aac:	20001658 	.word	0x20001658
 8007ab0:	2000166c 	.word	0x2000166c
 8007ab4:	20001680 	.word	0x20001680
 8007ab8:	20001694 	.word	0x20001694
 8007abc:	200016a8 	.word	0x200016a8
 8007ac0:	200016bc 	.word	0x200016bc
 8007ac4:	200016d0 	.word	0x200016d0
 8007ac8:	200016e4 	.word	0x200016e4
 8007acc:	200016f8 	.word	0x200016f8
 8007ad0:	2000170c 	.word	0x2000170c
 8007ad4:	20001720 	.word	0x20001720
 8007ad8:	20001734 	.word	0x20001734
 8007adc:	20001748 	.word	0x20001748
 8007ae0:	2000175c 	.word	0x2000175c
 8007ae4:	20001770 	.word	0x20001770
 8007ae8:	20001784 	.word	0x20001784
 8007aec:	20001798 	.word	0x20001798
 8007af0:	200017ac 	.word	0x200017ac
 8007af4:	200017c0 	.word	0x200017c0
 8007af8:	200017d4 	.word	0x200017d4
 8007afc:	200017e8 	.word	0x200017e8
 8007b00:	200017fc 	.word	0x200017fc
 8007b04:	20001810 	.word	0x20001810
 8007b08:	20001824 	.word	0x20001824
 8007b0c:	20001838 	.word	0x20001838
 8007b10:	2000184c 	.word	0x2000184c
 8007b14:	20001860 	.word	0x20001860
 8007b18:	20001874 	.word	0x20001874
 8007b1c:	20001888 	.word	0x20001888
 8007b20:	2000189c 	.word	0x2000189c
 8007b24:	200018b0 	.word	0x200018b0
 8007b28:	200018c4 	.word	0x200018c4
 8007b2c:	200018d8 	.word	0x200018d8
 8007b30:	200018ec 	.word	0x200018ec
 8007b34:	20001900 	.word	0x20001900

08007b38 <resetMenuTexts>:

void resetMenuTexts() {
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	af00      	add	r7, sp, #0
    memset(menuyeGirildiText, 0, 17);
 8007b3c:	2211      	movs	r2, #17
 8007b3e:	2100      	movs	r1, #0
 8007b40:	48d3      	ldr	r0, [pc, #844]	@ (8007e90 <resetMenuTexts+0x358>)
 8007b42:	f005 ffa7 	bl	800da94 <memset>
    memset(ayarlarText, 0, 17);
 8007b46:	2211      	movs	r2, #17
 8007b48:	2100      	movs	r1, #0
 8007b4a:	48d2      	ldr	r0, [pc, #840]	@ (8007e94 <resetMenuTexts+0x35c>)
 8007b4c:	f005 ffa2 	bl	800da94 <memset>
    memset(hataKayitListText, 0, 17);
 8007b50:	2211      	movs	r2, #17
 8007b52:	2100      	movs	r1, #0
 8007b54:	48d0      	ldr	r0, [pc, #832]	@ (8007e98 <resetMenuTexts+0x360>)
 8007b56:	f005 ff9d 	bl	800da94 <memset>
    memset(birHataKoduText, 0, 17);
 8007b5a:	2211      	movs	r2, #17
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	48cf      	ldr	r0, [pc, #828]	@ (8007e9c <resetMenuTexts+0x364>)
 8007b60:	f005 ff98 	bl	800da94 <memset>
    memset(ikiHataKoduText, 0, 17);
 8007b64:	2211      	movs	r2, #17
 8007b66:	2100      	movs	r1, #0
 8007b68:	48cd      	ldr	r0, [pc, #820]	@ (8007ea0 <resetMenuTexts+0x368>)
 8007b6a:	f005 ff93 	bl	800da94 <memset>
    memset(ucHataKoduText, 0, 17);
 8007b6e:	2211      	movs	r2, #17
 8007b70:	2100      	movs	r1, #0
 8007b72:	48cc      	ldr	r0, [pc, #816]	@ (8007ea4 <resetMenuTexts+0x36c>)
 8007b74:	f005 ff8e 	bl	800da94 <memset>
    memset(dortHataKoduText, 0, 17);
 8007b78:	2211      	movs	r2, #17
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	48ca      	ldr	r0, [pc, #808]	@ (8007ea8 <resetMenuTexts+0x370>)
 8007b7e:	f005 ff89 	bl	800da94 <memset>
    memset(besHataKoduText, 0, 17);
 8007b82:	2211      	movs	r2, #17
 8007b84:	2100      	movs	r1, #0
 8007b86:	48c9      	ldr	r0, [pc, #804]	@ (8007eac <resetMenuTexts+0x374>)
 8007b88:	f005 ff84 	bl	800da94 <memset>
    memset(altiHataKoduText, 0, 17);
 8007b8c:	2211      	movs	r2, #17
 8007b8e:	2100      	movs	r1, #0
 8007b90:	48c7      	ldr	r0, [pc, #796]	@ (8007eb0 <resetMenuTexts+0x378>)
 8007b92:	f005 ff7f 	bl	800da94 <memset>
    memset(yediHataKoduText, 0, 17);
 8007b96:	2211      	movs	r2, #17
 8007b98:	2100      	movs	r1, #0
 8007b9a:	48c6      	ldr	r0, [pc, #792]	@ (8007eb4 <resetMenuTexts+0x37c>)
 8007b9c:	f005 ff7a 	bl	800da94 <memset>
    memset(sekizHataKoduText, 0, 17);
 8007ba0:	2211      	movs	r2, #17
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	48c4      	ldr	r0, [pc, #784]	@ (8007eb8 <resetMenuTexts+0x380>)
 8007ba6:	f005 ff75 	bl	800da94 <memset>
    memset(dokuzHataKoduText, 0, 17);
 8007baa:	2211      	movs	r2, #17
 8007bac:	2100      	movs	r1, #0
 8007bae:	48c3      	ldr	r0, [pc, #780]	@ (8007ebc <resetMenuTexts+0x384>)
 8007bb0:	f005 ff70 	bl	800da94 <memset>
    memset(onHataKoduText, 0, 17);
 8007bb4:	2211      	movs	r2, #17
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	48c1      	ldr	r0, [pc, #772]	@ (8007ec0 <resetMenuTexts+0x388>)
 8007bba:	f005 ff6b 	bl	800da94 <memset>
    memset(silmekIcinText, 0, 17);
 8007bbe:	2211      	movs	r2, #17
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	48c0      	ldr	r0, [pc, #768]	@ (8007ec4 <resetMenuTexts+0x38c>)
 8007bc4:	f005 ff66 	bl	800da94 <memset>
    memset(calismaSekliText, 0, 17);
 8007bc8:	2211      	movs	r2, #17
 8007bca:	2100      	movs	r1, #0
 8007bcc:	48be      	ldr	r0, [pc, #760]	@ (8007ec8 <resetMenuTexts+0x390>)
 8007bce:	f005 ff61 	bl	800da94 <memset>
    memset(devirmeYuruyusText, 0, 17);
 8007bd2:	2211      	movs	r2, #17
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	48bd      	ldr	r0, [pc, #756]	@ (8007ecc <resetMenuTexts+0x394>)
 8007bd8:	f005 ff5c 	bl	800da94 <memset>
    memset(bastikcaCalisanText, 0, 17);
 8007bdc:	2211      	movs	r2, #17
 8007bde:	2100      	movs	r1, #0
 8007be0:	48bb      	ldr	r0, [pc, #748]	@ (8007ed0 <resetMenuTexts+0x398>)
 8007be2:	f005 ff57 	bl	800da94 <memset>
    memset(basGonderText, 0, 17);
 8007be6:	2211      	movs	r2, #17
 8007be8:	2100      	movs	r1, #0
 8007bea:	48ba      	ldr	r0, [pc, #744]	@ (8007ed4 <resetMenuTexts+0x39c>)
 8007bec:	f005 ff52 	bl	800da94 <memset>
    memset(emniyetCercevesiText, 0, 17);
 8007bf0:	2211      	movs	r2, #17
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	48b8      	ldr	r0, [pc, #736]	@ (8007ed8 <resetMenuTexts+0x3a0>)
 8007bf6:	f005 ff4d 	bl	800da94 <memset>
    memset(pasifText, 0, 17);
 8007bfa:	2211      	movs	r2, #17
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	48b7      	ldr	r0, [pc, #732]	@ (8007edc <resetMenuTexts+0x3a4>)
 8007c00:	f005 ff48 	bl	800da94 <memset>
    memset(aktifText, 0, 17);
 8007c04:	2211      	movs	r2, #17
 8007c06:	2100      	movs	r1, #0
 8007c08:	48b5      	ldr	r0, [pc, #724]	@ (8007ee0 <resetMenuTexts+0x3a8>)
 8007c0a:	f005 ff43 	bl	800da94 <memset>
    memset(yavaslamaLimitText, 0, 17);
 8007c0e:	2211      	movs	r2, #17
 8007c10:	2100      	movs	r1, #0
 8007c12:	48b4      	ldr	r0, [pc, #720]	@ (8007ee4 <resetMenuTexts+0x3ac>)
 8007c14:	f005 ff3e 	bl	800da94 <memset>
    memset(altLimitText, 0, 17);
 8007c18:	2211      	movs	r2, #17
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	48b2      	ldr	r0, [pc, #712]	@ (8007ee8 <resetMenuTexts+0x3b0>)
 8007c1e:	f005 ff39 	bl	800da94 <memset>
    memset(basincSalteriText, 0, 17);
 8007c22:	2211      	movs	r2, #17
 8007c24:	2100      	movs	r1, #0
 8007c26:	48b1      	ldr	r0, [pc, #708]	@ (8007eec <resetMenuTexts+0x3b4>)
 8007c28:	f005 ff34 	bl	800da94 <memset>
    memset(kapiSecimleriText, 0, 17);
 8007c2c:	2211      	movs	r2, #17
 8007c2e:	2100      	movs	r1, #0
 8007c30:	48af      	ldr	r0, [pc, #700]	@ (8007ef0 <resetMenuTexts+0x3b8>)
 8007c32:	f005 ff2f 	bl	800da94 <memset>
    memset(katKapisiAktifText, 0, 17);
 8007c36:	2211      	movs	r2, #17
 8007c38:	2100      	movs	r1, #0
 8007c3a:	48ae      	ldr	r0, [pc, #696]	@ (8007ef4 <resetMenuTexts+0x3bc>)
 8007c3c:	f005 ff2a 	bl	800da94 <memset>
    memset(tablaKapiAktifText, 0, 17);
 8007c40:	2211      	movs	r2, #17
 8007c42:	2100      	movs	r1, #0
 8007c44:	48ac      	ldr	r0, [pc, #688]	@ (8007ef8 <resetMenuTexts+0x3c0>)
 8007c46:	f005 ff25 	bl	800da94 <memset>
    memset(katArtiTablaAktifText, 0, 17);
 8007c4a:	2211      	movs	r2, #17
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	48ab      	ldr	r0, [pc, #684]	@ (8007efc <resetMenuTexts+0x3c4>)
 8007c50:	f005 ff20 	bl	800da94 <memset>
    memset(kapiAcmaTipiText, 0, 17);
 8007c54:	2211      	movs	r2, #17
 8007c56:	2100      	movs	r1, #0
 8007c58:	48a9      	ldr	r0, [pc, #676]	@ (8007f00 <resetMenuTexts+0x3c8>)
 8007c5a:	f005 ff1b 	bl	800da94 <memset>
    memset(kapiButonuESPText, 0, 17);
 8007c5e:	2211      	movs	r2, #17
 8007c60:	2100      	movs	r1, #0
 8007c62:	48a8      	ldr	r0, [pc, #672]	@ (8007f04 <resetMenuTexts+0x3cc>)
 8007c64:	f005 ff16 	bl	800da94 <memset>
    memset(katButonuEXTText, 0, 17);
 8007c68:	2211      	movs	r2, #17
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	48a6      	ldr	r0, [pc, #664]	@ (8007f08 <resetMenuTexts+0x3d0>)
 8007c6e:	f005 ff11 	bl	800da94 <memset>
    memset(birKatKapiTipiText, 0, 17);
 8007c72:	2211      	movs	r2, #17
 8007c74:	2100      	movs	r1, #0
 8007c76:	48a5      	ldr	r0, [pc, #660]	@ (8007f0c <resetMenuTexts+0x3d4>)
 8007c78:	f005 ff0c 	bl	800da94 <memset>
    memset(butonKontrolluText, 0, 17);
 8007c7c:	2211      	movs	r2, #17
 8007c7e:	2100      	movs	r1, #0
 8007c80:	48a3      	ldr	r0, [pc, #652]	@ (8007f10 <resetMenuTexts+0x3d8>)
 8007c82:	f005 ff07 	bl	800da94 <memset>
    memset(birinciKapiAcSuresiText, 0, 17);
 8007c86:	2211      	movs	r2, #17
 8007c88:	2100      	movs	r1, #0
 8007c8a:	48a2      	ldr	r0, [pc, #648]	@ (8007f14 <resetMenuTexts+0x3dc>)
 8007c8c:	f005 ff02 	bl	800da94 <memset>
    memset(kacSaniyeText, 0, 17);
 8007c90:	2211      	movs	r2, #17
 8007c92:	2100      	movs	r1, #0
 8007c94:	48a0      	ldr	r0, [pc, #640]	@ (8007f18 <resetMenuTexts+0x3e0>)
 8007c96:	f005 fefd 	bl	800da94 <memset>
    memset(ikinciKatKapiTipiText, 0, 17);
 8007c9a:	2211      	movs	r2, #17
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	489f      	ldr	r0, [pc, #636]	@ (8007f1c <resetMenuTexts+0x3e4>)
 8007ca0:	f005 fef8 	bl	800da94 <memset>
    memset(ikinciKapiAcSuresiText, 0, 17);
 8007ca4:	2211      	movs	r2, #17
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	489d      	ldr	r0, [pc, #628]	@ (8007f20 <resetMenuTexts+0x3e8>)
 8007caa:	f005 fef3 	bl	800da94 <memset>
    memset(tablaKapiTipiText, 0, 17);
 8007cae:	2211      	movs	r2, #17
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	489c      	ldr	r0, [pc, #624]	@ (8007f24 <resetMenuTexts+0x3ec>)
 8007cb4:	f005 feee 	bl	800da94 <memset>
    memset(tablaKapiAcKonumText, 0, 17);
 8007cb8:	2211      	movs	r2, #17
 8007cba:	2100      	movs	r1, #0
 8007cbc:	489a      	ldr	r0, [pc, #616]	@ (8007f28 <resetMenuTexts+0x3f0>)
 8007cbe:	f005 fee9 	bl	800da94 <memset>
    memset(birinciKattaAcText, 0, 17);
 8007cc2:	2211      	movs	r2, #17
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	4899      	ldr	r0, [pc, #612]	@ (8007f2c <resetMenuTexts+0x3f4>)
 8007cc8:	f005 fee4 	bl	800da94 <memset>
    memset(ikinciKattaAcText, 0, 17);
 8007ccc:	2211      	movs	r2, #17
 8007cce:	2100      	movs	r1, #0
 8007cd0:	4897      	ldr	r0, [pc, #604]	@ (8007f30 <resetMenuTexts+0x3f8>)
 8007cd2:	f005 fedf 	bl	800da94 <memset>
    memset(birVeIkinciKattaAcText, 0, 17);
 8007cd6:	2211      	movs	r2, #17
 8007cd8:	2100      	movs	r1, #0
 8007cda:	4896      	ldr	r0, [pc, #600]	@ (8007f34 <resetMenuTexts+0x3fc>)
 8007cdc:	f005 feda 	bl	800da94 <memset>
    memset(tablaKapiAcSureText, 0, 17);
 8007ce0:	2211      	movs	r2, #17
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	4894      	ldr	r0, [pc, #592]	@ (8007f38 <resetMenuTexts+0x400>)
 8007ce6:	f005 fed5 	bl	800da94 <memset>
    memset(yukariYavaslamaLimitiText, 0, 17);
 8007cea:	2211      	movs	r2, #17
 8007cec:	2100      	movs	r1, #0
 8007cee:	4893      	ldr	r0, [pc, #588]	@ (8007f3c <resetMenuTexts+0x404>)
 8007cf0:	f005 fed0 	bl	800da94 <memset>
    memset(devirmeYuruyusMenuText, 0, 17);
 8007cf4:	2211      	movs	r2, #17
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	4891      	ldr	r0, [pc, #580]	@ (8007f40 <resetMenuTexts+0x408>)
 8007cfa:	f005 fecb 	bl	800da94 <memset>
    memset(devirmeAktifText, 0, 17);
 8007cfe:	2211      	movs	r2, #17
 8007d00:	2100      	movs	r1, #0
 8007d02:	4890      	ldr	r0, [pc, #576]	@ (8007f44 <resetMenuTexts+0x40c>)
 8007d04:	f005 fec6 	bl	800da94 <memset>
    memset(yuruyusAktifText, 0, 17);
 8007d08:	2211      	movs	r2, #17
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	488e      	ldr	r0, [pc, #568]	@ (8007f48 <resetMenuTexts+0x410>)
 8007d0e:	f005 fec1 	bl	800da94 <memset>
    memset(devirmeYukariText, 0, 17);
 8007d12:	2211      	movs	r2, #17
 8007d14:	2100      	movs	r1, #0
 8007d16:	488d      	ldr	r0, [pc, #564]	@ (8007f4c <resetMenuTexts+0x414>)
 8007d18:	f005 febc 	bl	800da94 <memset>
    memset(yuruyusIleriText, 0, 17);
 8007d1c:	2211      	movs	r2, #17
 8007d1e:	2100      	movs	r1, #0
 8007d20:	488b      	ldr	r0, [pc, #556]	@ (8007f50 <resetMenuTexts+0x418>)
 8007d22:	f005 feb7 	bl	800da94 <memset>
    memset(devirmeAsagiSivicText, 0, 17);
 8007d26:	2211      	movs	r2, #17
 8007d28:	2100      	movs	r1, #0
 8007d2a:	488a      	ldr	r0, [pc, #552]	@ (8007f54 <resetMenuTexts+0x41c>)
 8007d2c:	f005 feb2 	bl	800da94 <memset>
    memset(yuruyusGeriSivicText, 0, 17);
 8007d30:	2211      	movs	r2, #17
 8007d32:	2100      	movs	r1, #0
 8007d34:	4888      	ldr	r0, [pc, #544]	@ (8007f58 <resetMenuTexts+0x420>)
 8007d36:	f005 fead 	bl	800da94 <memset>
    memset(yuruyusSecildiText, 0, 17);
 8007d3a:	2211      	movs	r2, #17
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	4887      	ldr	r0, [pc, #540]	@ (8007f5c <resetMenuTexts+0x424>)
 8007d40:	f005 fea8 	bl	800da94 <memset>
    memset(devirmeSilindirTipiText, 0, 17);
 8007d44:	2211      	movs	r2, #17
 8007d46:	2100      	movs	r1, #0
 8007d48:	4885      	ldr	r0, [pc, #532]	@ (8007f60 <resetMenuTexts+0x428>)
 8007d4a:	f005 fea3 	bl	800da94 <memset>
    memset(tekTesirText, 0, 17);
 8007d4e:	2211      	movs	r2, #17
 8007d50:	2100      	movs	r1, #0
 8007d52:	4884      	ldr	r0, [pc, #528]	@ (8007f64 <resetMenuTexts+0x42c>)
 8007d54:	f005 fe9e 	bl	800da94 <memset>
    memset(ciftTesirText, 0, 17);
 8007d58:	2211      	movs	r2, #17
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	4882      	ldr	r0, [pc, #520]	@ (8007f68 <resetMenuTexts+0x430>)
 8007d5e:	f005 fe99 	bl	800da94 <memset>
    memset(platformSilindirTipiText, 0, 17);
 8007d62:	2211      	movs	r2, #17
 8007d64:	2100      	movs	r1, #0
 8007d66:	4881      	ldr	r0, [pc, #516]	@ (8007f6c <resetMenuTexts+0x434>)
 8007d68:	f005 fe94 	bl	800da94 <memset>
    memset(yukariValfSureText, 0, 17);
 8007d6c:	2211      	movs	r2, #17
 8007d6e:	2100      	movs	r1, #0
 8007d70:	487f      	ldr	r0, [pc, #508]	@ (8007f70 <resetMenuTexts+0x438>)
 8007d72:	f005 fe8f 	bl	800da94 <memset>
    memset(asagiValfSureText, 0, 17);
 8007d76:	2211      	movs	r2, #17
 8007d78:	2100      	movs	r1, #0
 8007d7a:	487e      	ldr	r0, [pc, #504]	@ (8007f74 <resetMenuTexts+0x43c>)
 8007d7c:	f005 fe8a 	bl	800da94 <memset>
    memset(devirmeYukariValfSureText, 0, 17);
 8007d80:	2211      	movs	r2, #17
 8007d82:	2100      	movs	r1, #0
 8007d84:	487c      	ldr	r0, [pc, #496]	@ (8007f78 <resetMenuTexts+0x440>)
 8007d86:	f005 fe85 	bl	800da94 <memset>
    memset(ileriValfSureText, 0, 17);
 8007d8a:	2211      	movs	r2, #17
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	487b      	ldr	r0, [pc, #492]	@ (8007f7c <resetMenuTexts+0x444>)
 8007d90:	f005 fe80 	bl	800da94 <memset>
    memset(devirmeAsagiValfSureText, 0, 17);
 8007d94:	2211      	movs	r2, #17
 8007d96:	2100      	movs	r1, #0
 8007d98:	4879      	ldr	r0, [pc, #484]	@ (8007f80 <resetMenuTexts+0x448>)
 8007d9a:	f005 fe7b 	bl	800da94 <memset>
    memset(geriValfSureText, 0, 17);
 8007d9e:	2211      	movs	r2, #17
 8007da0:	2100      	movs	r1, #0
 8007da2:	4878      	ldr	r0, [pc, #480]	@ (8007f84 <resetMenuTexts+0x44c>)
 8007da4:	f005 fe76 	bl	800da94 <memset>
    memset(calismaSuresiText, 0, 17);
 8007da8:	2211      	movs	r2, #17
 8007daa:	2100      	movs	r1, #0
 8007dac:	4876      	ldr	r0, [pc, #472]	@ (8007f88 <resetMenuTexts+0x450>)
 8007dae:	f005 fe71 	bl	800da94 <memset>
    memset(calismaSayisiText, 0, 17);
 8007db2:	2211      	movs	r2, #17
 8007db4:	2100      	movs	r1, #0
 8007db6:	4875      	ldr	r0, [pc, #468]	@ (8007f8c <resetMenuTexts+0x454>)
 8007db8:	f005 fe6c 	bl	800da94 <memset>
    memset(enterlaSifirlaText, 0, 17);
 8007dbc:	2211      	movs	r2, #17
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	4873      	ldr	r0, [pc, #460]	@ (8007f90 <resetMenuTexts+0x458>)
 8007dc2:	f005 fe67 	bl	800da94 <memset>
    memset(dilSecimText, 0, 17);
 8007dc6:	2211      	movs	r2, #17
 8007dc8:	2100      	movs	r1, #0
 8007dca:	4872      	ldr	r0, [pc, #456]	@ (8007f94 <resetMenuTexts+0x45c>)
 8007dcc:	f005 fe62 	bl	800da94 <memset>
    memset(secilenDilText, 0, 17);
 8007dd0:	2211      	movs	r2, #17
 8007dd2:	2100      	movs	r1, #0
 8007dd4:	4870      	ldr	r0, [pc, #448]	@ (8007f98 <resetMenuTexts+0x460>)
 8007dd6:	f005 fe5d 	bl	800da94 <memset>
    memset(menudenCikisText, 0, 17);
 8007dda:	2211      	movs	r2, #17
 8007ddc:	2100      	movs	r1, #0
 8007dde:	486f      	ldr	r0, [pc, #444]	@ (8007f9c <resetMenuTexts+0x464>)
 8007de0:	f005 fe58 	bl	800da94 <memset>
    memset(enteraBasinizText, 0, 17);
 8007de4:	2211      	movs	r2, #17
 8007de6:	2100      	movs	r1, #0
 8007de8:	486d      	ldr	r0, [pc, #436]	@ (8007fa0 <resetMenuTexts+0x468>)
 8007dea:	f005 fe53 	bl	800da94 <memset>
    memset(hataKoduText, 0, 17);
 8007dee:	2211      	movs	r2, #17
 8007df0:	2100      	movs	r1, #0
 8007df2:	486c      	ldr	r0, [pc, #432]	@ (8007fa4 <resetMenuTexts+0x46c>)
 8007df4:	f005 fe4e 	bl	800da94 <memset>
    memset(dataSynchText, 0, 17);
 8007df8:	2211      	movs	r2, #17
 8007dfa:	2100      	movs	r1, #0
 8007dfc:	486a      	ldr	r0, [pc, #424]	@ (8007fa8 <resetMenuTexts+0x470>)
 8007dfe:	f005 fe49 	bl	800da94 <memset>
    memset(dataSynch2Text, 0, 17);
 8007e02:	2211      	movs	r2, #17
 8007e04:	2100      	movs	r1, #0
 8007e06:	4869      	ldr	r0, [pc, #420]	@ (8007fac <resetMenuTexts+0x474>)
 8007e08:	f005 fe44 	bl	800da94 <memset>
    memset(mustBeUniqueText, 0, 17);
 8007e0c:	2211      	movs	r2, #17
 8007e0e:	2100      	movs	r1, #0
 8007e10:	4867      	ldr	r0, [pc, #412]	@ (8007fb0 <resetMenuTexts+0x478>)
 8007e12:	f005 fe3f 	bl	800da94 <memset>
    memset(mustBeUnique2Text, 0, 17);
 8007e16:	2211      	movs	r2, #17
 8007e18:	2100      	movs	r1, #0
 8007e1a:	4866      	ldr	r0, [pc, #408]	@ (8007fb4 <resetMenuTexts+0x47c>)
 8007e1c:	f005 fe3a 	bl	800da94 <memset>
    memset(mustBe12Text, 0, 17);
 8007e20:	2211      	movs	r2, #17
 8007e22:	2100      	movs	r1, #0
 8007e24:	4864      	ldr	r0, [pc, #400]	@ (8007fb8 <resetMenuTexts+0x480>)
 8007e26:	f005 fe35 	bl	800da94 <memset>
    memset(mustBe122Text, 0, 17);
 8007e2a:	2211      	movs	r2, #17
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	4863      	ldr	r0, [pc, #396]	@ (8007fbc <resetMenuTexts+0x484>)
 8007e30:	f005 fe30 	bl	800da94 <memset>
    memset(ssidExceedErrorText, 0, 17);
 8007e34:	2211      	movs	r2, #17
 8007e36:	2100      	movs	r1, #0
 8007e38:	4861      	ldr	r0, [pc, #388]	@ (8007fc0 <resetMenuTexts+0x488>)
 8007e3a:	f005 fe2b 	bl	800da94 <memset>
    memset(ssidExceedError2Text, 0, 17);
 8007e3e:	2211      	movs	r2, #17
 8007e40:	2100      	movs	r1, #0
 8007e42:	4860      	ldr	r0, [pc, #384]	@ (8007fc4 <resetMenuTexts+0x48c>)
 8007e44:	f005 fe26 	bl	800da94 <memset>
    memset(passExceedErrorText, 0, 17);
 8007e48:	2211      	movs	r2, #17
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	485e      	ldr	r0, [pc, #376]	@ (8007fc8 <resetMenuTexts+0x490>)
 8007e4e:	f005 fe21 	bl	800da94 <memset>
    memset(passExceedError2Text, 0, 17);
 8007e52:	2211      	movs	r2, #17
 8007e54:	2100      	movs	r1, #0
 8007e56:	485d      	ldr	r0, [pc, #372]	@ (8007fcc <resetMenuTexts+0x494>)
 8007e58:	f005 fe1c 	bl	800da94 <memset>
    memset(dataYazildiText, 0, 17);
 8007e5c:	2211      	movs	r2, #17
 8007e5e:	2100      	movs	r1, #0
 8007e60:	485b      	ldr	r0, [pc, #364]	@ (8007fd0 <resetMenuTexts+0x498>)
 8007e62:	f005 fe17 	bl	800da94 <memset>
    memset(dataOkunuyorText, 0, 17);
 8007e66:	2211      	movs	r2, #17
 8007e68:	2100      	movs	r1, #0
 8007e6a:	485a      	ldr	r0, [pc, #360]	@ (8007fd4 <resetMenuTexts+0x49c>)
 8007e6c:	f005 fe12 	bl	800da94 <memset>
    memset(dataOkunduText, 0, 17);
 8007e70:	2211      	movs	r2, #17
 8007e72:	2100      	movs	r1, #0
 8007e74:	4858      	ldr	r0, [pc, #352]	@ (8007fd8 <resetMenuTexts+0x4a0>)
 8007e76:	f005 fe0d 	bl	800da94 <memset>
    memset(degerKaydedildiText, 0, 17);
 8007e7a:	2211      	movs	r2, #17
 8007e7c:	2100      	movs	r1, #0
 8007e7e:	4857      	ldr	r0, [pc, #348]	@ (8007fdc <resetMenuTexts+0x4a4>)
 8007e80:	f005 fe08 	bl	800da94 <memset>
    memset(errorCodeText, 0, 17);
 8007e84:	2211      	movs	r2, #17
 8007e86:	2100      	movs	r1, #0
 8007e88:	4855      	ldr	r0, [pc, #340]	@ (8007fe0 <resetMenuTexts+0x4a8>)
 8007e8a:	f005 fe03 	bl	800da94 <memset>
 8007e8e:	e0a9      	b.n	8007fe4 <resetMenuTexts+0x4ac>
 8007e90:	20001220 	.word	0x20001220
 8007e94:	20001234 	.word	0x20001234
 8007e98:	20001248 	.word	0x20001248
 8007e9c:	2000125c 	.word	0x2000125c
 8007ea0:	20001270 	.word	0x20001270
 8007ea4:	20001284 	.word	0x20001284
 8007ea8:	20001298 	.word	0x20001298
 8007eac:	200012ac 	.word	0x200012ac
 8007eb0:	200012c0 	.word	0x200012c0
 8007eb4:	200012d4 	.word	0x200012d4
 8007eb8:	200012e8 	.word	0x200012e8
 8007ebc:	200012fc 	.word	0x200012fc
 8007ec0:	20001310 	.word	0x20001310
 8007ec4:	20001324 	.word	0x20001324
 8007ec8:	20001338 	.word	0x20001338
 8007ecc:	2000134c 	.word	0x2000134c
 8007ed0:	20001360 	.word	0x20001360
 8007ed4:	20001374 	.word	0x20001374
 8007ed8:	20001388 	.word	0x20001388
 8007edc:	2000139c 	.word	0x2000139c
 8007ee0:	200013b0 	.word	0x200013b0
 8007ee4:	200013c4 	.word	0x200013c4
 8007ee8:	200013d8 	.word	0x200013d8
 8007eec:	200013ec 	.word	0x200013ec
 8007ef0:	20001400 	.word	0x20001400
 8007ef4:	20001414 	.word	0x20001414
 8007ef8:	20001428 	.word	0x20001428
 8007efc:	2000143c 	.word	0x2000143c
 8007f00:	20001450 	.word	0x20001450
 8007f04:	20001464 	.word	0x20001464
 8007f08:	20001478 	.word	0x20001478
 8007f0c:	2000148c 	.word	0x2000148c
 8007f10:	200014a0 	.word	0x200014a0
 8007f14:	200014b4 	.word	0x200014b4
 8007f18:	200014c8 	.word	0x200014c8
 8007f1c:	200014dc 	.word	0x200014dc
 8007f20:	200014f0 	.word	0x200014f0
 8007f24:	20001504 	.word	0x20001504
 8007f28:	20001518 	.word	0x20001518
 8007f2c:	2000152c 	.word	0x2000152c
 8007f30:	20001540 	.word	0x20001540
 8007f34:	20001554 	.word	0x20001554
 8007f38:	20001568 	.word	0x20001568
 8007f3c:	2000157c 	.word	0x2000157c
 8007f40:	20001590 	.word	0x20001590
 8007f44:	200015a4 	.word	0x200015a4
 8007f48:	200015b8 	.word	0x200015b8
 8007f4c:	200015cc 	.word	0x200015cc
 8007f50:	200015e0 	.word	0x200015e0
 8007f54:	200015f4 	.word	0x200015f4
 8007f58:	20001608 	.word	0x20001608
 8007f5c:	2000161c 	.word	0x2000161c
 8007f60:	20001630 	.word	0x20001630
 8007f64:	20001644 	.word	0x20001644
 8007f68:	20001658 	.word	0x20001658
 8007f6c:	2000166c 	.word	0x2000166c
 8007f70:	20001680 	.word	0x20001680
 8007f74:	20001694 	.word	0x20001694
 8007f78:	200016a8 	.word	0x200016a8
 8007f7c:	200016bc 	.word	0x200016bc
 8007f80:	200016d0 	.word	0x200016d0
 8007f84:	200016e4 	.word	0x200016e4
 8007f88:	200016f8 	.word	0x200016f8
 8007f8c:	2000170c 	.word	0x2000170c
 8007f90:	20001720 	.word	0x20001720
 8007f94:	20001734 	.word	0x20001734
 8007f98:	20001748 	.word	0x20001748
 8007f9c:	2000175c 	.word	0x2000175c
 8007fa0:	20001770 	.word	0x20001770
 8007fa4:	20001784 	.word	0x20001784
 8007fa8:	20001798 	.word	0x20001798
 8007fac:	200017ac 	.word	0x200017ac
 8007fb0:	200017c0 	.word	0x200017c0
 8007fb4:	200017d4 	.word	0x200017d4
 8007fb8:	200017e8 	.word	0x200017e8
 8007fbc:	200017fc 	.word	0x200017fc
 8007fc0:	20001810 	.word	0x20001810
 8007fc4:	20001824 	.word	0x20001824
 8007fc8:	20001838 	.word	0x20001838
 8007fcc:	2000184c 	.word	0x2000184c
 8007fd0:	20001860 	.word	0x20001860
 8007fd4:	20001874 	.word	0x20001874
 8007fd8:	20001888 	.word	0x20001888
 8007fdc:	2000189c 	.word	0x2000189c
 8007fe0:	200018b0 	.word	0x200018b0
    memset(machineIDText, 0, 17);
 8007fe4:	2211      	movs	r2, #17
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	4809      	ldr	r0, [pc, #36]	@ (8008010 <resetMenuTexts+0x4d8>)
 8007fea:	f005 fd53 	bl	800da94 <memset>
    memset(idConfirmationText, 0, 17);
 8007fee:	2211      	movs	r2, #17
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	4808      	ldr	r0, [pc, #32]	@ (8008014 <resetMenuTexts+0x4dc>)
 8007ff4:	f005 fd4e 	bl	800da94 <memset>
    memset(idConfirmationSubText, 0, 17);
 8007ff8:	2211      	movs	r2, #17
 8007ffa:	2100      	movs	r1, #0
 8007ffc:	4806      	ldr	r0, [pc, #24]	@ (8008018 <resetMenuTexts+0x4e0>)
 8007ffe:	f005 fd49 	bl	800da94 <memset>
    memset(wifiConfirmationText, 0, 17);
 8008002:	2211      	movs	r2, #17
 8008004:	2100      	movs	r1, #0
 8008006:	4805      	ldr	r0, [pc, #20]	@ (800801c <resetMenuTexts+0x4e4>)
 8008008:	f005 fd44 	bl	800da94 <memset>
}
 800800c:	bf00      	nop
 800800e:	bd80      	pop	{r7, pc}
 8008010:	200018c4 	.word	0x200018c4
 8008014:	200018d8 	.word	0x200018d8
 8008018:	200018ec 	.word	0x200018ec
 800801c:	20001900 	.word	0x20001900

08008020 <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8008020:	b580      	push	{r7, lr}
 8008022:	b082      	sub	sp, #8
 8008024:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8008026:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800802a:	f001 fdc1 	bl	8009bb0 <HAL_Delay>
	int confirmationVal = 0;
 800802e:	2300      	movs	r3, #0
 8008030:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8008032:	e012      	b.n	800805a <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 8008034:	4a12      	ldr	r2, [pc, #72]	@ (8008080 <takeMachineIDWithConfirmation+0x60>)
 8008036:	2101      	movs	r1, #1
 8008038:	2001      	movs	r0, #1
 800803a:	f001 f85f 	bl	80090fc <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 800803e:	4a11      	ldr	r2, [pc, #68]	@ (8008084 <takeMachineIDWithConfirmation+0x64>)
 8008040:	2101      	movs	r1, #1
 8008042:	2002      	movs	r0, #2
 8008044:	f001 f85a 	bl	80090fc <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 8008048:	2102      	movs	r1, #2
 800804a:	480f      	ldr	r0, [pc, #60]	@ (8008088 <takeMachineIDWithConfirmation+0x68>)
 800804c:	f002 fb80 	bl	800a750 <HAL_GPIO_ReadPin>
 8008050:	4603      	mov	r3, r0
 8008052:	2b01      	cmp	r3, #1
 8008054:	d101      	bne.n	800805a <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 8008056:	2301      	movs	r3, #1
 8008058:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d0e9      	beq.n	8008034 <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 8008060:	f000 f814 	bl	800808c <takeMachineID>

	convertArrays(1);
 8008064:	2001      	movs	r0, #1
 8008066:	f7f8 fc1f 	bl	80008a8 <convertArrays>
	HAL_Delay(50);
 800806a:	2032      	movs	r0, #50	@ 0x32
 800806c:	f001 fda0 	bl	8009bb0 <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 8008070:	2001      	movs	r0, #1
 8008072:	f7f9 fabf 	bl	80015f4 <printCredentials>
}
 8008076:	bf00      	nop
 8008078:	3708      	adds	r7, #8
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	200018d8 	.word	0x200018d8
 8008084:	200018ec 	.word	0x200018ec
 8008088:	40010800 	.word	0x40010800

0800808c <takeMachineID>:

void takeMachineID() {
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
	mainSection:

	lcd_cursor(1);
 8008092:	2001      	movs	r0, #1
 8008094:	f001 f890 	bl	80091b8 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8008098:	220c      	movs	r2, #12
 800809a:	2100      	movs	r1, #0
 800809c:	488a      	ldr	r0, [pc, #552]	@ (80082c8 <takeMachineID+0x23c>)
 800809e:	f005 fcf9 	bl	800da94 <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 80080a2:	2305      	movs	r3, #5
 80080a4:	617b      	str	r3, [r7, #20]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 80080a6:	2303      	movs	r3, #3
 80080a8:	613b      	str	r3, [r7, #16]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 80080aa:	2300      	movs	r3, #0
 80080ac:	60fb      	str	r3, [r7, #12]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 80080ae:	4b87      	ldr	r3, [pc, #540]	@ (80082cc <takeMachineID+0x240>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	60bb      	str	r3, [r7, #8]

    printTemplate(1, 0);
 80080b4:	2100      	movs	r1, #0
 80080b6:	2001      	movs	r0, #1
 80080b8:	f7f9 f92c 	bl	8001314 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80080bc:	2108      	movs	r1, #8
 80080be:	4884      	ldr	r0, [pc, #528]	@ (80082d0 <takeMachineID+0x244>)
 80080c0:	f002 fb46 	bl	800a750 <HAL_GPIO_ReadPin>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d146      	bne.n	8008158 <takeMachineID+0xcc>
        	lcd_cursor(0);
 80080ca:	2000      	movs	r0, #0
 80080cc:	f001 f874 	bl	80091b8 <lcd_cursor>

        	lcd_print(1, 1, "   MACHINE ID   ");
 80080d0:	4a80      	ldr	r2, [pc, #512]	@ (80082d4 <takeMachineID+0x248>)
 80080d2:	2101      	movs	r1, #1
 80080d4:	2001      	movs	r0, #1
 80080d6:	f001 f811 	bl	80090fc <lcd_print>
        	lcd_print(2, 1, "KONTROL EDILIYOR");
 80080da:	4a7f      	ldr	r2, [pc, #508]	@ (80082d8 <takeMachineID+0x24c>)
 80080dc:	2101      	movs	r1, #1
 80080de:	2002      	movs	r0, #2
 80080e0:	f001 f80c 	bl	80090fc <lcd_print>

        	if(checkEEPROM4ID() != 1) {
 80080e4:	f000 fe4c 	bl	8008d80 <checkEEPROM4ID>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d00e      	beq.n	800810c <takeMachineID+0x80>
        		lcd_print(1, 1, mustBe12Text);
 80080ee:	4a7b      	ldr	r2, [pc, #492]	@ (80082dc <takeMachineID+0x250>)
 80080f0:	2101      	movs	r1, #1
 80080f2:	2001      	movs	r0, #1
 80080f4:	f001 f802 	bl	80090fc <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 80080f8:	4a79      	ldr	r2, [pc, #484]	@ (80082e0 <takeMachineID+0x254>)
 80080fa:	2101      	movs	r1, #1
 80080fc:	2002      	movs	r0, #2
 80080fe:	f000 fffd 	bl	80090fc <lcd_print>
        		HAL_Delay(1250);
 8008102:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8008106:	f001 fd53 	bl	8009bb0 <HAL_Delay>

        		goto mainSection;
 800810a:	e7c2      	b.n	8008092 <takeMachineID+0x6>
        	}

        	int machineIDControl = 0;
 800810c:	2300      	movs	r3, #0
 800810e:	607b      	str	r3, [r7, #4]
        	for(int i=0; i<2; i++) {
 8008110:	2300      	movs	r3, #0
 8008112:	603b      	str	r3, [r7, #0]
 8008114:	e007      	b.n	8008126 <takeMachineID+0x9a>
        		machineIDControl = checkMachineID(&huart1, machineID);
 8008116:	496c      	ldr	r1, [pc, #432]	@ (80082c8 <takeMachineID+0x23c>)
 8008118:	4872      	ldr	r0, [pc, #456]	@ (80082e4 <takeMachineID+0x258>)
 800811a:	f7f8 fea7 	bl	8000e6c <checkMachineID>
 800811e:	6078      	str	r0, [r7, #4]
        	for(int i=0; i<2; i++) {
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	3301      	adds	r3, #1
 8008124:	603b      	str	r3, [r7, #0]
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b01      	cmp	r3, #1
 800812a:	ddf4      	ble.n	8008116 <takeMachineID+0x8a>
        	}

        	if(machineIDControl == 1) {
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2b01      	cmp	r3, #1
 8008130:	d103      	bne.n	800813a <takeMachineID+0xae>
        		saveEEPROM(1);
 8008132:	2001      	movs	r0, #1
 8008134:	f7f8 fab6 	bl	80006a4 <saveEEPROM>
 8008138:	e00e      	b.n	8008158 <takeMachineID+0xcc>
        	} else {
        		lcd_print(1, 1, mustBeUniqueText);
 800813a:	4a6b      	ldr	r2, [pc, #428]	@ (80082e8 <takeMachineID+0x25c>)
 800813c:	2101      	movs	r1, #1
 800813e:	2001      	movs	r0, #1
 8008140:	f000 ffdc 	bl	80090fc <lcd_print>
        		lcd_print(2, 1, mustBeUnique2Text);
 8008144:	4a69      	ldr	r2, [pc, #420]	@ (80082ec <takeMachineID+0x260>)
 8008146:	2101      	movs	r1, #1
 8008148:	2002      	movs	r0, #2
 800814a:	f000 ffd7 	bl	80090fc <lcd_print>

        		HAL_Delay(500);
 800814e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008152:	f001 fd2d 	bl	8009bb0 <HAL_Delay>

        		goto mainSection;
 8008156:	e79c      	b.n	8008092 <takeMachineID+0x6>
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008158:	2101      	movs	r1, #1
 800815a:	485d      	ldr	r0, [pc, #372]	@ (80082d0 <takeMachineID+0x244>)
 800815c:	f002 faf8 	bl	800a750 <HAL_GPIO_ReadPin>
 8008160:	4603      	mov	r3, r0
 8008162:	2b01      	cmp	r3, #1
 8008164:	d111      	bne.n	800818a <takeMachineID+0xfe>
        	if(cursorPosition == 7) {
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	2b07      	cmp	r3, #7
 800816a:	d102      	bne.n	8008172 <takeMachineID+0xe6>
        		cursorPosition = 10;
 800816c:	230a      	movs	r3, #10
 800816e:	613b      	str	r3, [r7, #16]
 8008170:	e008      	b.n	8008184 <takeMachineID+0xf8>
        	} else if (cursorPosition == 14) {
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	2b0e      	cmp	r3, #14
 8008176:	d102      	bne.n	800817e <takeMachineID+0xf2>
                cursorPosition = 3;
 8008178:	2303      	movs	r3, #3
 800817a:	613b      	str	r3, [r7, #16]
 800817c:	e002      	b.n	8008184 <takeMachineID+0xf8>
            } else {
            	cursorPosition++;
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	3301      	adds	r3, #1
 8008182:	613b      	str	r3, [r7, #16]
            }

        	HAL_Delay(150);
 8008184:	2096      	movs	r0, #150	@ 0x96
 8008186:	f001 fd13 	bl	8009bb0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800818a:	2108      	movs	r1, #8
 800818c:	4858      	ldr	r0, [pc, #352]	@ (80082f0 <takeMachineID+0x264>)
 800818e:	f002 fadf 	bl	800a750 <HAL_GPIO_ReadPin>
 8008192:	4603      	mov	r3, r0
 8008194:	2b01      	cmp	r3, #1
 8008196:	d111      	bne.n	80081bc <takeMachineID+0x130>
            if (cursorPosition == 3) {
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	2b03      	cmp	r3, #3
 800819c:	d102      	bne.n	80081a4 <takeMachineID+0x118>
                cursorPosition = 14;
 800819e:	230e      	movs	r3, #14
 80081a0:	613b      	str	r3, [r7, #16]
 80081a2:	e008      	b.n	80081b6 <takeMachineID+0x12a>
            } else if(cursorPosition == 10) {
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	2b0a      	cmp	r3, #10
 80081a8:	d102      	bne.n	80081b0 <takeMachineID+0x124>
            	cursorPosition = 7;
 80081aa:	2307      	movs	r3, #7
 80081ac:	613b      	str	r3, [r7, #16]
 80081ae:	e002      	b.n	80081b6 <takeMachineID+0x12a>
            } else {
            	cursorPosition--;
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	3b01      	subs	r3, #1
 80081b4:	613b      	str	r3, [r7, #16]
            }

            HAL_Delay(250);
 80081b6:	20fa      	movs	r0, #250	@ 0xfa
 80081b8:	f001 fcfa 	bl	8009bb0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80081bc:	2102      	movs	r1, #2
 80081be:	4844      	ldr	r0, [pc, #272]	@ (80082d0 <takeMachineID+0x244>)
 80081c0:	f002 fac6 	bl	800a750 <HAL_GPIO_ReadPin>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	f040 80b9 	bne.w	800833e <takeMachineID+0x2b2>
        	if(cursorPosition == 3) {
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d10a      	bne.n	80081e8 <takeMachineID+0x15c>
        		machineID[arrayPos] = '0';
 80081d2:	4a3d      	ldr	r2, [pc, #244]	@ (80082c8 <takeMachineID+0x23c>)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	4413      	add	r3, r2
 80081d8:	2230      	movs	r2, #48	@ 0x30
 80081da:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 80081dc:	4a45      	ldr	r2, [pc, #276]	@ (80082f4 <takeMachineID+0x268>)
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	4413      	add	r3, r2
 80081e2:	2200      	movs	r2, #0
 80081e4:	701a      	strb	r2, [r3, #0]
 80081e6:	e094      	b.n	8008312 <takeMachineID+0x286>
        	} else if(cursorPosition == 4) {
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	2b04      	cmp	r3, #4
 80081ec:	d10a      	bne.n	8008204 <takeMachineID+0x178>
        		machineID[arrayPos] = '1';
 80081ee:	4a36      	ldr	r2, [pc, #216]	@ (80082c8 <takeMachineID+0x23c>)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	4413      	add	r3, r2
 80081f4:	2231      	movs	r2, #49	@ 0x31
 80081f6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 80081f8:	4a3e      	ldr	r2, [pc, #248]	@ (80082f4 <takeMachineID+0x268>)
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	4413      	add	r3, r2
 80081fe:	2201      	movs	r2, #1
 8008200:	701a      	strb	r2, [r3, #0]
 8008202:	e086      	b.n	8008312 <takeMachineID+0x286>
        	} else if(cursorPosition == 5) {
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	2b05      	cmp	r3, #5
 8008208:	d10a      	bne.n	8008220 <takeMachineID+0x194>
        		machineID[arrayPos] = '2';
 800820a:	4a2f      	ldr	r2, [pc, #188]	@ (80082c8 <takeMachineID+0x23c>)
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	4413      	add	r3, r2
 8008210:	2232      	movs	r2, #50	@ 0x32
 8008212:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8008214:	4a37      	ldr	r2, [pc, #220]	@ (80082f4 <takeMachineID+0x268>)
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	4413      	add	r3, r2
 800821a:	2202      	movs	r2, #2
 800821c:	701a      	strb	r2, [r3, #0]
 800821e:	e078      	b.n	8008312 <takeMachineID+0x286>
        	} else if(cursorPosition == 6) {
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	2b06      	cmp	r3, #6
 8008224:	d10a      	bne.n	800823c <takeMachineID+0x1b0>
        		machineID[arrayPos] = '3';
 8008226:	4a28      	ldr	r2, [pc, #160]	@ (80082c8 <takeMachineID+0x23c>)
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	4413      	add	r3, r2
 800822c:	2233      	movs	r2, #51	@ 0x33
 800822e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 8008230:	4a30      	ldr	r2, [pc, #192]	@ (80082f4 <takeMachineID+0x268>)
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	4413      	add	r3, r2
 8008236:	2203      	movs	r2, #3
 8008238:	701a      	strb	r2, [r3, #0]
 800823a:	e06a      	b.n	8008312 <takeMachineID+0x286>
        	} else if(cursorPosition == 7) {
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	2b07      	cmp	r3, #7
 8008240:	d10a      	bne.n	8008258 <takeMachineID+0x1cc>
        		machineID[arrayPos] = '4';
 8008242:	4a21      	ldr	r2, [pc, #132]	@ (80082c8 <takeMachineID+0x23c>)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	4413      	add	r3, r2
 8008248:	2234      	movs	r2, #52	@ 0x34
 800824a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 800824c:	4a29      	ldr	r2, [pc, #164]	@ (80082f4 <takeMachineID+0x268>)
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	4413      	add	r3, r2
 8008252:	2204      	movs	r2, #4
 8008254:	701a      	strb	r2, [r3, #0]
 8008256:	e05c      	b.n	8008312 <takeMachineID+0x286>
        	} else if(cursorPosition == 10) {
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	2b0a      	cmp	r3, #10
 800825c:	d10a      	bne.n	8008274 <takeMachineID+0x1e8>
        		machineID[arrayPos] = '5';
 800825e:	4a1a      	ldr	r2, [pc, #104]	@ (80082c8 <takeMachineID+0x23c>)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4413      	add	r3, r2
 8008264:	2235      	movs	r2, #53	@ 0x35
 8008266:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 8008268:	4a22      	ldr	r2, [pc, #136]	@ (80082f4 <takeMachineID+0x268>)
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	4413      	add	r3, r2
 800826e:	2205      	movs	r2, #5
 8008270:	701a      	strb	r2, [r3, #0]
 8008272:	e04e      	b.n	8008312 <takeMachineID+0x286>
        	} else if(cursorPosition == 11) {
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	2b0b      	cmp	r3, #11
 8008278:	d10a      	bne.n	8008290 <takeMachineID+0x204>
        		machineID[arrayPos] = '6';
 800827a:	4a13      	ldr	r2, [pc, #76]	@ (80082c8 <takeMachineID+0x23c>)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4413      	add	r3, r2
 8008280:	2236      	movs	r2, #54	@ 0x36
 8008282:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8008284:	4a1b      	ldr	r2, [pc, #108]	@ (80082f4 <takeMachineID+0x268>)
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	4413      	add	r3, r2
 800828a:	2206      	movs	r2, #6
 800828c:	701a      	strb	r2, [r3, #0]
 800828e:	e040      	b.n	8008312 <takeMachineID+0x286>
        	} else if(cursorPosition == 12) {
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	2b0c      	cmp	r3, #12
 8008294:	d10a      	bne.n	80082ac <takeMachineID+0x220>
        		machineID[arrayPos] = '7';
 8008296:	4a0c      	ldr	r2, [pc, #48]	@ (80082c8 <takeMachineID+0x23c>)
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	4413      	add	r3, r2
 800829c:	2237      	movs	r2, #55	@ 0x37
 800829e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 80082a0:	4a14      	ldr	r2, [pc, #80]	@ (80082f4 <takeMachineID+0x268>)
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	4413      	add	r3, r2
 80082a6:	2207      	movs	r2, #7
 80082a8:	701a      	strb	r2, [r3, #0]
 80082aa:	e032      	b.n	8008312 <takeMachineID+0x286>
        	} else if(cursorPosition == 13) {
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	2b0d      	cmp	r3, #13
 80082b0:	d122      	bne.n	80082f8 <takeMachineID+0x26c>
        		machineID[arrayPos] = '8';
 80082b2:	4a05      	ldr	r2, [pc, #20]	@ (80082c8 <takeMachineID+0x23c>)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	4413      	add	r3, r2
 80082b8:	2238      	movs	r2, #56	@ 0x38
 80082ba:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 80082bc:	4a0d      	ldr	r2, [pc, #52]	@ (80082f4 <takeMachineID+0x268>)
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	4413      	add	r3, r2
 80082c2:	2208      	movs	r2, #8
 80082c4:	701a      	strb	r2, [r3, #0]
 80082c6:	e024      	b.n	8008312 <takeMachineID+0x286>
 80082c8:	20001064 	.word	0x20001064
 80082cc:	20000000 	.word	0x20000000
 80082d0:	40010800 	.word	0x40010800
 80082d4:	0800edb8 	.word	0x0800edb8
 80082d8:	0800edcc 	.word	0x0800edcc
 80082dc:	200017e8 	.word	0x200017e8
 80082e0:	200017fc 	.word	0x200017fc
 80082e4:	200019d8 	.word	0x200019d8
 80082e8:	200017c0 	.word	0x200017c0
 80082ec:	200017d4 	.word	0x200017d4
 80082f0:	40011000 	.word	0x40011000
 80082f4:	20000fec 	.word	0x20000fec
        	} else if(cursorPosition == 14) {
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	2b0e      	cmp	r3, #14
 80082fc:	d109      	bne.n	8008312 <takeMachineID+0x286>
        		machineID[arrayPos] = '9';
 80082fe:	4a34      	ldr	r2, [pc, #208]	@ (80083d0 <takeMachineID+0x344>)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	4413      	add	r3, r2
 8008304:	2239      	movs	r2, #57	@ 0x39
 8008306:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8008308:	4a32      	ldr	r2, [pc, #200]	@ (80083d4 <takeMachineID+0x348>)
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	4413      	add	r3, r2
 800830e:	2209      	movs	r2, #9
 8008310:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	b2d9      	uxtb	r1, r3
 8008316:	4a2e      	ldr	r2, [pc, #184]	@ (80083d0 <takeMachineID+0x344>)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4413      	add	r3, r2
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	461a      	mov	r2, r3
 8008320:	2001      	movs	r0, #1
 8008322:	f000 ff00 	bl	8009126 <lcd_print_char>

        	writeLoc++;
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	3301      	adds	r3, #1
 800832a:	617b      	str	r3, [r7, #20]
        	arrayPos++;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	3301      	adds	r3, #1
 8008330:	60fb      	str	r3, [r7, #12]
        	eepromVal++;
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	3301      	adds	r3, #1
 8008336:	60bb      	str	r3, [r7, #8]

        	HAL_Delay(150);
 8008338:	2096      	movs	r0, #150	@ 0x96
 800833a:	f001 fc39 	bl	8009bb0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800833e:	2104      	movs	r1, #4
 8008340:	4825      	ldr	r0, [pc, #148]	@ (80083d8 <takeMachineID+0x34c>)
 8008342:	f002 fa05 	bl	800a750 <HAL_GPIO_ReadPin>
 8008346:	4603      	mov	r3, r0
 8008348:	2b01      	cmp	r3, #1
 800834a:	d139      	bne.n	80083c0 <takeMachineID+0x334>
            if(strlen(machineID) >= 1) {
 800834c:	4b20      	ldr	r3, [pc, #128]	@ (80083d0 <takeMachineID+0x344>)
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d032      	beq.n	80083ba <takeMachineID+0x32e>
                machineID[arrayPos] = '\0';
 8008354:	4a1e      	ldr	r2, [pc, #120]	@ (80083d0 <takeMachineID+0x344>)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	4413      	add	r3, r2
 800835a:	2200      	movs	r2, #0
 800835c:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 800835e:	4a1d      	ldr	r2, [pc, #116]	@ (80083d4 <takeMachineID+0x348>)
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	4413      	add	r3, r2
 8008364:	2200      	movs	r2, #0
 8008366:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	2b05      	cmp	r3, #5
 800836c:	dd03      	ble.n	8008376 <takeMachineID+0x2ea>
                	writeLoc--;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	3b01      	subs	r3, #1
 8008372:	617b      	str	r3, [r7, #20]
 8008374:	e004      	b.n	8008380 <takeMachineID+0x2f4>
                } else if(writeLoc < 5) {
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	2b04      	cmp	r3, #4
 800837a:	dc01      	bgt.n	8008380 <takeMachineID+0x2f4>
                	writeLoc = 5;
 800837c:	2305      	movs	r3, #5
 800837e:	617b      	str	r3, [r7, #20]
                }

                if(arrayPos > 0) {
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2b00      	cmp	r3, #0
 8008384:	dd06      	ble.n	8008394 <takeMachineID+0x308>
                	arrayPos--;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	3b01      	subs	r3, #1
 800838a:	60fb      	str	r3, [r7, #12]
                	eepromVal--;
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	3b01      	subs	r3, #1
 8008390:	60bb      	str	r3, [r7, #8]
 8008392:	e007      	b.n	80083a4 <takeMachineID+0x318>
                } else if(arrayPos < 0) {
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2b00      	cmp	r3, #0
 8008398:	da04      	bge.n	80083a4 <takeMachineID+0x318>
                	arrayPos = 0;
 800839a:	2300      	movs	r3, #0
 800839c:	60fb      	str	r3, [r7, #12]
                	eepromVal = idStartPos;
 800839e:	4b0f      	ldr	r3, [pc, #60]	@ (80083dc <takeMachineID+0x350>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	60bb      	str	r3, [r7, #8]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	3305      	adds	r3, #5
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	4619      	mov	r1, r3
 80083ae:	2001      	movs	r0, #1
 80083b0:	f000 feda 	bl	8009168 <lcd_delete_char>
                HAL_Delay(50);
 80083b4:	2032      	movs	r0, #50	@ 0x32
 80083b6:	f001 fbfb 	bl	8009bb0 <HAL_Delay>
            }

            HAL_Delay(150);
 80083ba:	2096      	movs	r0, #150	@ 0x96
 80083bc:	f001 fbf8 	bl	8009bb0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	4619      	mov	r1, r3
 80083c6:	2002      	movs	r0, #2
 80083c8:	f000 fe79 	bl	80090be <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80083cc:	e676      	b.n	80080bc <takeMachineID+0x30>
 80083ce:	bf00      	nop
 80083d0:	20001064 	.word	0x20001064
 80083d4:	20000fec 	.word	0x20000fec
 80083d8:	40010800 	.word	0x40010800
 80083dc:	20000000 	.word	0x20000000

080083e0 <ssidConfirmation>:
    }
}

uint8_t ssidConfirmation() {
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
	int loopVal = 1;
 80083e6:	2301      	movs	r3, #1
 80083e8:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 80083ea:	4a1e      	ldr	r2, [pc, #120]	@ (8008464 <ssidConfirmation+0x84>)
 80083ec:	2101      	movs	r1, #1
 80083ee:	2001      	movs	r0, #1
 80083f0:	f000 fe84 	bl	80090fc <lcd_print>

	while(loopVal == 1) {
 80083f4:	e012      	b.n	800841c <ssidConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 80083f6:	4a1c      	ldr	r2, [pc, #112]	@ (8008468 <ssidConfirmation+0x88>)
 80083f8:	2101      	movs	r1, #1
 80083fa:	2002      	movs	r0, #2
 80083fc:	f000 fe7e 	bl	80090fc <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008400:	2102      	movs	r1, #2
 8008402:	481a      	ldr	r0, [pc, #104]	@ (800846c <ssidConfirmation+0x8c>)
 8008404:	f002 f9a4 	bl	800a750 <HAL_GPIO_ReadPin>
 8008408:	4603      	mov	r3, r0
 800840a:	2b01      	cmp	r3, #1
 800840c:	d101      	bne.n	8008412 <ssidConfirmation+0x32>
			loopVal = 0;
 800840e:	2300      	movs	r3, #0
 8008410:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiSSID);
 8008412:	4a17      	ldr	r2, [pc, #92]	@ (8008470 <ssidConfirmation+0x90>)
 8008414:	2101      	movs	r1, #1
 8008416:	2001      	movs	r0, #1
 8008418:	f000 fe70 	bl	80090fc <lcd_print>
	while(loopVal == 1) {
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2b01      	cmp	r3, #1
 8008420:	d0e9      	beq.n	80083f6 <ssidConfirmation+0x16>
	}

    lcd_cursor(0);
 8008422:	2000      	movs	r0, #0
 8008424:	f000 fec8 	bl	80091b8 <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 8008428:	4811      	ldr	r0, [pc, #68]	@ (8008470 <ssidConfirmation+0x90>)
 800842a:	f7f7 fefb 	bl	8000224 <strlen>
 800842e:	4603      	mov	r3, r0
 8008430:	2b14      	cmp	r3, #20
 8008432:	d90f      	bls.n	8008454 <ssidConfirmation+0x74>
    	lcd_print(1, 1, ssidExceedErrorText);
 8008434:	4a0f      	ldr	r2, [pc, #60]	@ (8008474 <ssidConfirmation+0x94>)
 8008436:	2101      	movs	r1, #1
 8008438:	2001      	movs	r0, #1
 800843a:	f000 fe5f 	bl	80090fc <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 800843e:	4a0e      	ldr	r2, [pc, #56]	@ (8008478 <ssidConfirmation+0x98>)
 8008440:	2101      	movs	r1, #1
 8008442:	2002      	movs	r0, #2
 8008444:	f000 fe5a 	bl	80090fc <lcd_print>
        HAL_Delay(1250);
 8008448:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 800844c:	f001 fbb0 	bl	8009bb0 <HAL_Delay>

        return 0;
 8008450:	2300      	movs	r3, #0
 8008452:	e003      	b.n	800845c <ssidConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 8008454:	2001      	movs	r0, #1
 8008456:	f7f8 f925 	bl	80006a4 <saveEEPROM>

    	return 1;
 800845a:	2301      	movs	r3, #1
    }
}
 800845c:	4618      	mov	r0, r3
 800845e:	3708      	adds	r7, #8
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	0800ede0 	.word	0x0800ede0
 8008468:	20001900 	.word	0x20001900
 800846c:	40010800 	.word	0x40010800
 8008470:	20001070 	.word	0x20001070
 8008474:	20001810 	.word	0x20001810
 8008478:	20001824 	.word	0x20001824

0800847c <takeWifiSSID>:

void takeWifiSSID() {
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 8008482:	2001      	movs	r0, #1
 8008484:	f000 fe98 	bl	80091b8 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 8008488:	2210      	movs	r2, #16
 800848a:	2100      	movs	r1, #0
 800848c:	48a4      	ldr	r0, [pc, #656]	@ (8008720 <takeWifiSSID+0x2a4>)
 800848e:	f005 fb01 	bl	800da94 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8008492:	2301      	movs	r3, #1
 8008494:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8008496:	2307      	movs	r3, #7
 8008498:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 800849a:	2301      	movs	r3, #1
 800849c:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 800849e:	2300      	movs	r3, #0
 80084a0:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80084a2:	4ba0      	ldr	r3, [pc, #640]	@ (8008724 <takeWifiSSID+0x2a8>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 80084a8:	2101      	movs	r1, #1
 80084aa:	2002      	movs	r0, #2
 80084ac:	f7f8 ff32 	bl	8001314 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80084b0:	2108      	movs	r1, #8
 80084b2:	489d      	ldr	r0, [pc, #628]	@ (8008728 <takeWifiSSID+0x2ac>)
 80084b4:	f002 f94c 	bl	800a750 <HAL_GPIO_ReadPin>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d106      	bne.n	80084cc <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 80084be:	f7ff ff8f 	bl	80083e0 <ssidConfirmation>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f040 8126 	bne.w	8008716 <takeWifiSSID+0x29a>
        		goto mainSSIDSection;
 80084ca:	e7da      	b.n	8008482 <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80084cc:	2101      	movs	r1, #1
 80084ce:	4896      	ldr	r0, [pc, #600]	@ (8008728 <takeWifiSSID+0x2ac>)
 80084d0:	f002 f93e 	bl	800a750 <HAL_GPIO_ReadPin>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b01      	cmp	r3, #1
 80084d8:	d14d      	bne.n	8008576 <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2b50      	cmp	r3, #80	@ 0x50
 80084de:	dd01      	ble.n	80084e4 <takeWifiSSID+0x68>
        		cursorPosition = 1;
 80084e0:	2301      	movs	r3, #1
 80084e2:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2b10      	cmp	r3, #16
 80084e8:	d13f      	bne.n	800856a <takeWifiSSID+0xee>
            	if(page == 1) {
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d109      	bne.n	8008504 <takeWifiSSID+0x88>
            		cursorPosition = 1;
 80084f0:	2301      	movs	r3, #1
 80084f2:	60fb      	str	r3, [r7, #12]
            		page++;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	3301      	adds	r3, #1
 80084f8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80084fa:	2102      	movs	r1, #2
 80084fc:	2002      	movs	r0, #2
 80084fe:	f7f8 ff09 	bl	8001314 <printTemplate>
 8008502:	e035      	b.n	8008570 <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	2b02      	cmp	r3, #2
 8008508:	d109      	bne.n	800851e <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 800850a:	2301      	movs	r3, #1
 800850c:	60fb      	str	r3, [r7, #12]
            		page++;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	3301      	adds	r3, #1
 8008512:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8008514:	2103      	movs	r1, #3
 8008516:	2002      	movs	r0, #2
 8008518:	f7f8 fefc 	bl	8001314 <printTemplate>
 800851c:	e028      	b.n	8008570 <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2b03      	cmp	r3, #3
 8008522:	d109      	bne.n	8008538 <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 8008524:	2301      	movs	r3, #1
 8008526:	60fb      	str	r3, [r7, #12]
            		page++;
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	3301      	adds	r3, #1
 800852c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800852e:	2104      	movs	r1, #4
 8008530:	2002      	movs	r0, #2
 8008532:	f7f8 feef 	bl	8001314 <printTemplate>
 8008536:	e01b      	b.n	8008570 <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	2b04      	cmp	r3, #4
 800853c:	d109      	bne.n	8008552 <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 800853e:	2301      	movs	r3, #1
 8008540:	60fb      	str	r3, [r7, #12]
            		page++;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	3301      	adds	r3, #1
 8008546:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8008548:	2105      	movs	r1, #5
 800854a:	2002      	movs	r0, #2
 800854c:	f7f8 fee2 	bl	8001314 <printTemplate>
 8008550:	e00e      	b.n	8008570 <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	2b05      	cmp	r3, #5
 8008556:	d10b      	bne.n	8008570 <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 8008558:	2301      	movs	r3, #1
 800855a:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800855c:	2301      	movs	r3, #1
 800855e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8008560:	2101      	movs	r1, #1
 8008562:	2002      	movs	r0, #2
 8008564:	f7f8 fed6 	bl	8001314 <printTemplate>
 8008568:	e002      	b.n	8008570 <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	3301      	adds	r3, #1
 800856e:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008570:	2096      	movs	r0, #150	@ 0x96
 8008572:	f001 fb1d 	bl	8009bb0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8008576:	2108      	movs	r1, #8
 8008578:	486c      	ldr	r0, [pc, #432]	@ (800872c <takeWifiSSID+0x2b0>)
 800857a:	f002 f8e9 	bl	800a750 <HAL_GPIO_ReadPin>
 800857e:	4603      	mov	r3, r0
 8008580:	2b01      	cmp	r3, #1
 8008582:	d149      	bne.n	8008618 <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2b00      	cmp	r3, #0
 8008588:	dc01      	bgt.n	800858e <takeWifiSSID+0x112>
        		cursorPosition = 80;
 800858a:	2350      	movs	r3, #80	@ 0x50
 800858c:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d13b      	bne.n	800860c <takeWifiSSID+0x190>
            	if(page == 1) {
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d108      	bne.n	80085ac <takeWifiSSID+0x130>
            		cursorPosition = 16;
 800859a:	2310      	movs	r3, #16
 800859c:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800859e:	2305      	movs	r3, #5
 80085a0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80085a2:	2105      	movs	r1, #5
 80085a4:	2002      	movs	r0, #2
 80085a6:	f7f8 feb5 	bl	8001314 <printTemplate>
 80085aa:	e032      	b.n	8008612 <takeWifiSSID+0x196>
            	} else if(page == 2) {
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	d108      	bne.n	80085c4 <takeWifiSSID+0x148>
            		cursorPosition = 16;
 80085b2:	2310      	movs	r3, #16
 80085b4:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80085b6:	2301      	movs	r3, #1
 80085b8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80085ba:	2101      	movs	r1, #1
 80085bc:	2002      	movs	r0, #2
 80085be:	f7f8 fea9 	bl	8001314 <printTemplate>
 80085c2:	e026      	b.n	8008612 <takeWifiSSID+0x196>
            	} else if(page == 3) {
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d108      	bne.n	80085dc <takeWifiSSID+0x160>
            		cursorPosition = 16;
 80085ca:	2310      	movs	r3, #16
 80085cc:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80085ce:	2302      	movs	r3, #2
 80085d0:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 80085d2:	2102      	movs	r1, #2
 80085d4:	2002      	movs	r0, #2
 80085d6:	f7f8 fe9d 	bl	8001314 <printTemplate>
 80085da:	e01a      	b.n	8008612 <takeWifiSSID+0x196>
            	} else if(page == 4) {
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	2b04      	cmp	r3, #4
 80085e0:	d108      	bne.n	80085f4 <takeWifiSSID+0x178>
            		cursorPosition = 16;
 80085e2:	2310      	movs	r3, #16
 80085e4:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80085e6:	2303      	movs	r3, #3
 80085e8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 80085ea:	2103      	movs	r1, #3
 80085ec:	2002      	movs	r0, #2
 80085ee:	f7f8 fe91 	bl	8001314 <printTemplate>
 80085f2:	e00e      	b.n	8008612 <takeWifiSSID+0x196>
            	} else if(page == 5) {
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	2b05      	cmp	r3, #5
 80085f8:	d10b      	bne.n	8008612 <takeWifiSSID+0x196>
            		cursorPosition = 16;
 80085fa:	2310      	movs	r3, #16
 80085fc:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80085fe:	2304      	movs	r3, #4
 8008600:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8008602:	2104      	movs	r1, #4
 8008604:	2002      	movs	r0, #2
 8008606:	f7f8 fe85 	bl	8001314 <printTemplate>
 800860a:	e002      	b.n	8008612 <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	3b01      	subs	r3, #1
 8008610:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008612:	2096      	movs	r0, #150	@ 0x96
 8008614:	f001 facc 	bl	8009bb0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008618:	2102      	movs	r1, #2
 800861a:	4843      	ldr	r0, [pc, #268]	@ (8008728 <takeWifiSSID+0x2ac>)
 800861c:	f002 f898 	bl	800a750 <HAL_GPIO_ReadPin>
 8008620:	4603      	mov	r3, r0
 8008622:	2b01      	cmp	r3, #1
 8008624:	d12f      	bne.n	8008686 <takeWifiSSID+0x20a>
            eepromData[eepromVal] = cursorPosition;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	b2d9      	uxtb	r1, r3
 800862a:	4a41      	ldr	r2, [pc, #260]	@ (8008730 <takeWifiSSID+0x2b4>)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	4413      	add	r3, r2
 8008630:	460a      	mov	r2, r1
 8008632:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 8008634:	4a3f      	ldr	r2, [pc, #252]	@ (8008734 <takeWifiSSID+0x2b8>)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	4413      	add	r3, r2
 800863a:	7819      	ldrb	r1, [r3, #0]
 800863c:	4a38      	ldr	r2, [pc, #224]	@ (8008720 <takeWifiSSID+0x2a4>)
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	4413      	add	r3, r2
 8008642:	460a      	mov	r2, r1
 8008644:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	b2d9      	uxtb	r1, r3
 800864a:	4a3a      	ldr	r2, [pc, #232]	@ (8008734 <takeWifiSSID+0x2b8>)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	4413      	add	r3, r2
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	461a      	mov	r2, r3
 8008654:	2001      	movs	r0, #1
 8008656:	f000 fd66 	bl	8009126 <lcd_print_char>

            writeLoc++;
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	3301      	adds	r3, #1
 800865e:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	3301      	adds	r3, #1
 8008664:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	3301      	adds	r3, #1
 800866a:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 800866c:	4a30      	ldr	r2, [pc, #192]	@ (8008730 <takeWifiSSID+0x2b4>)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4413      	add	r3, r2
 8008672:	2200      	movs	r2, #0
 8008674:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 8008676:	4a2a      	ldr	r2, [pc, #168]	@ (8008720 <takeWifiSSID+0x2a4>)
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	4413      	add	r3, r2
 800867c:	2200      	movs	r2, #0
 800867e:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8008680:	2096      	movs	r0, #150	@ 0x96
 8008682:	f001 fa95 	bl	8009bb0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008686:	2104      	movs	r1, #4
 8008688:	4827      	ldr	r0, [pc, #156]	@ (8008728 <takeWifiSSID+0x2ac>)
 800868a:	f002 f861 	bl	800a750 <HAL_GPIO_ReadPin>
 800868e:	4603      	mov	r3, r0
 8008690:	2b01      	cmp	r3, #1
 8008692:	d139      	bne.n	8008708 <takeWifiSSID+0x28c>
        	if(strlen(wifiSSID) >= 1) {
 8008694:	4b22      	ldr	r3, [pc, #136]	@ (8008720 <takeWifiSSID+0x2a4>)
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d032      	beq.n	8008702 <takeWifiSSID+0x286>
        		eepromData[eepromVal] = '\0';
 800869c:	4a24      	ldr	r2, [pc, #144]	@ (8008730 <takeWifiSSID+0x2b4>)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4413      	add	r3, r2
 80086a2:	2200      	movs	r2, #0
 80086a4:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 80086a6:	4a1e      	ldr	r2, [pc, #120]	@ (8008720 <takeWifiSSID+0x2a4>)
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	4413      	add	r3, r2
 80086ac:	2200      	movs	r2, #0
 80086ae:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	2b07      	cmp	r3, #7
 80086b4:	dd03      	ble.n	80086be <takeWifiSSID+0x242>
        			writeLoc--;
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	3b01      	subs	r3, #1
 80086ba:	613b      	str	r3, [r7, #16]
 80086bc:	e004      	b.n	80086c8 <takeWifiSSID+0x24c>
        		} else if(writeLoc < 7) {
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	2b06      	cmp	r3, #6
 80086c2:	dc01      	bgt.n	80086c8 <takeWifiSSID+0x24c>
        			writeLoc = 7;
 80086c4:	2307      	movs	r3, #7
 80086c6:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	dd06      	ble.n	80086dc <takeWifiSSID+0x260>
        			arrayPosition--;
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	3b01      	subs	r3, #1
 80086d2:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	3b01      	subs	r3, #1
 80086d8:	607b      	str	r3, [r7, #4]
 80086da:	e007      	b.n	80086ec <takeWifiSSID+0x270>
        		} else if(arrayPosition < 0) {
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	da04      	bge.n	80086ec <takeWifiSSID+0x270>
        			arrayPosition = 0;
 80086e2:	2300      	movs	r3, #0
 80086e4:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 80086e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008724 <takeWifiSSID+0x2a8>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	3307      	adds	r3, #7
 80086f2:	b2db      	uxtb	r3, r3
 80086f4:	4619      	mov	r1, r3
 80086f6:	2001      	movs	r0, #1
 80086f8:	f000 fd36 	bl	8009168 <lcd_delete_char>
        		HAL_Delay(50);
 80086fc:	2032      	movs	r0, #50	@ 0x32
 80086fe:	f001 fa57 	bl	8009bb0 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8008702:	2096      	movs	r0, #150	@ 0x96
 8008704:	f001 fa54 	bl	8009bb0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	b2db      	uxtb	r3, r3
 800870c:	4619      	mov	r1, r3
 800870e:	2002      	movs	r0, #2
 8008710:	f000 fcd5 	bl	80090be <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008714:	e6cc      	b.n	80084b0 <takeWifiSSID+0x34>
        		break;
 8008716:	bf00      	nop
    }
}
 8008718:	bf00      	nop
 800871a:	3718      	adds	r7, #24
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	20001070 	.word	0x20001070
 8008724:	20000004 	.word	0x20000004
 8008728:	40010800 	.word	0x40010800
 800872c:	40011000 	.word	0x40011000
 8008730:	20000fec 	.word	0x20000fec
 8008734:	20000018 	.word	0x20000018

08008738 <passConfirmation>:

uint8_t passConfirmation() {
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
	int loopVal = 1;
 800873e:	2301      	movs	r3, #1
 8008740:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8008742:	4a1e      	ldr	r2, [pc, #120]	@ (80087bc <passConfirmation+0x84>)
 8008744:	2101      	movs	r1, #1
 8008746:	2001      	movs	r0, #1
 8008748:	f000 fcd8 	bl	80090fc <lcd_print>

	while(loopVal == 1) {
 800874c:	e012      	b.n	8008774 <passConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 800874e:	4a1c      	ldr	r2, [pc, #112]	@ (80087c0 <passConfirmation+0x88>)
 8008750:	2101      	movs	r1, #1
 8008752:	2002      	movs	r0, #2
 8008754:	f000 fcd2 	bl	80090fc <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008758:	2102      	movs	r1, #2
 800875a:	481a      	ldr	r0, [pc, #104]	@ (80087c4 <passConfirmation+0x8c>)
 800875c:	f001 fff8 	bl	800a750 <HAL_GPIO_ReadPin>
 8008760:	4603      	mov	r3, r0
 8008762:	2b01      	cmp	r3, #1
 8008764:	d101      	bne.n	800876a <passConfirmation+0x32>
			loopVal = 0;
 8008766:	2300      	movs	r3, #0
 8008768:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiPass);
 800876a:	4a17      	ldr	r2, [pc, #92]	@ (80087c8 <passConfirmation+0x90>)
 800876c:	2101      	movs	r1, #1
 800876e:	2001      	movs	r0, #1
 8008770:	f000 fcc4 	bl	80090fc <lcd_print>
	while(loopVal == 1) {
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2b01      	cmp	r3, #1
 8008778:	d0e9      	beq.n	800874e <passConfirmation+0x16>
	}

    lcd_cursor(0);
 800877a:	2000      	movs	r0, #0
 800877c:	f000 fd1c 	bl	80091b8 <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 8008780:	4811      	ldr	r0, [pc, #68]	@ (80087c8 <passConfirmation+0x90>)
 8008782:	f7f7 fd4f 	bl	8000224 <strlen>
 8008786:	4603      	mov	r3, r0
 8008788:	2b14      	cmp	r3, #20
 800878a:	d90f      	bls.n	80087ac <passConfirmation+0x74>
    	lcd_print(1, 1, passExceedErrorText);
 800878c:	4a0f      	ldr	r2, [pc, #60]	@ (80087cc <passConfirmation+0x94>)
 800878e:	2101      	movs	r1, #1
 8008790:	2001      	movs	r0, #1
 8008792:	f000 fcb3 	bl	80090fc <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 8008796:	4a0e      	ldr	r2, [pc, #56]	@ (80087d0 <passConfirmation+0x98>)
 8008798:	2101      	movs	r1, #1
 800879a:	2002      	movs	r0, #2
 800879c:	f000 fcae 	bl	80090fc <lcd_print>
        HAL_Delay(1250);
 80087a0:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80087a4:	f001 fa04 	bl	8009bb0 <HAL_Delay>

        return 0;
 80087a8:	2300      	movs	r3, #0
 80087aa:	e003      	b.n	80087b4 <passConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 80087ac:	2001      	movs	r0, #1
 80087ae:	f7f7 ff79 	bl	80006a4 <saveEEPROM>

    	return 1;
 80087b2:	2301      	movs	r3, #1
    }
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3708      	adds	r7, #8
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	0800ede0 	.word	0x0800ede0
 80087c0:	20001900 	.word	0x20001900
 80087c4:	40010800 	.word	0x40010800
 80087c8:	20001080 	.word	0x20001080
 80087cc:	20001838 	.word	0x20001838
 80087d0:	2000184c 	.word	0x2000184c

080087d4 <takeWifiPass>:

void takeWifiPass() {
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b086      	sub	sp, #24
 80087d8:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 80087da:	2001      	movs	r0, #1
 80087dc:	f000 fcec 	bl	80091b8 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 80087e0:	2210      	movs	r2, #16
 80087e2:	2100      	movs	r1, #0
 80087e4:	48a4      	ldr	r0, [pc, #656]	@ (8008a78 <takeWifiPass+0x2a4>)
 80087e6:	f005 f955 	bl	800da94 <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 80087ea:	2301      	movs	r3, #1
 80087ec:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 80087ee:	2307      	movs	r3, #7
 80087f0:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 80087f2:	2301      	movs	r3, #1
 80087f4:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 80087f6:	2300      	movs	r3, #0
 80087f8:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 80087fa:	4ba0      	ldr	r3, [pc, #640]	@ (8008a7c <takeWifiPass+0x2a8>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8008800:	2101      	movs	r1, #1
 8008802:	2003      	movs	r0, #3
 8008804:	f7f8 fd86 	bl	8001314 <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008808:	2108      	movs	r1, #8
 800880a:	489d      	ldr	r0, [pc, #628]	@ (8008a80 <takeWifiPass+0x2ac>)
 800880c:	f001 ffa0 	bl	800a750 <HAL_GPIO_ReadPin>
 8008810:	4603      	mov	r3, r0
 8008812:	2b01      	cmp	r3, #1
 8008814:	d106      	bne.n	8008824 <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 8008816:	f7ff ff8f 	bl	8008738 <passConfirmation>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	f040 8126 	bne.w	8008a6e <takeWifiPass+0x29a>
    	        goto mainPassSection;
 8008822:	e7da      	b.n	80087da <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008824:	2101      	movs	r1, #1
 8008826:	4896      	ldr	r0, [pc, #600]	@ (8008a80 <takeWifiPass+0x2ac>)
 8008828:	f001 ff92 	bl	800a750 <HAL_GPIO_ReadPin>
 800882c:	4603      	mov	r3, r0
 800882e:	2b01      	cmp	r3, #1
 8008830:	d14d      	bne.n	80088ce <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2b50      	cmp	r3, #80	@ 0x50
 8008836:	dd01      	ble.n	800883c <takeWifiPass+0x68>
        		cursorPosition = 1;
 8008838:	2301      	movs	r3, #1
 800883a:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2b10      	cmp	r3, #16
 8008840:	d13f      	bne.n	80088c2 <takeWifiPass+0xee>
            	if(page == 1) {
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d109      	bne.n	800885c <takeWifiPass+0x88>
            		cursorPosition = 1;
 8008848:	2301      	movs	r3, #1
 800884a:	60fb      	str	r3, [r7, #12]
            		page++;
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	3301      	adds	r3, #1
 8008850:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8008852:	2102      	movs	r1, #2
 8008854:	2003      	movs	r0, #3
 8008856:	f7f8 fd5d 	bl	8001314 <printTemplate>
 800885a:	e035      	b.n	80088c8 <takeWifiPass+0xf4>
            	} else if(page == 2) {
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	2b02      	cmp	r3, #2
 8008860:	d109      	bne.n	8008876 <takeWifiPass+0xa2>
            		cursorPosition = 1;
 8008862:	2301      	movs	r3, #1
 8008864:	60fb      	str	r3, [r7, #12]
            		page++;
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	3301      	adds	r3, #1
 800886a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 800886c:	2103      	movs	r1, #3
 800886e:	2003      	movs	r0, #3
 8008870:	f7f8 fd50 	bl	8001314 <printTemplate>
 8008874:	e028      	b.n	80088c8 <takeWifiPass+0xf4>
            	} else if(page == 3) {
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	2b03      	cmp	r3, #3
 800887a:	d109      	bne.n	8008890 <takeWifiPass+0xbc>
            		cursorPosition = 1;
 800887c:	2301      	movs	r3, #1
 800887e:	60fb      	str	r3, [r7, #12]
            		page++;
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	3301      	adds	r3, #1
 8008884:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8008886:	2104      	movs	r1, #4
 8008888:	2003      	movs	r0, #3
 800888a:	f7f8 fd43 	bl	8001314 <printTemplate>
 800888e:	e01b      	b.n	80088c8 <takeWifiPass+0xf4>
            	} else if(page == 4) {
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	2b04      	cmp	r3, #4
 8008894:	d109      	bne.n	80088aa <takeWifiPass+0xd6>
            		cursorPosition = 1;
 8008896:	2301      	movs	r3, #1
 8008898:	60fb      	str	r3, [r7, #12]
            		page++;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	3301      	adds	r3, #1
 800889e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80088a0:	2105      	movs	r1, #5
 80088a2:	2003      	movs	r0, #3
 80088a4:	f7f8 fd36 	bl	8001314 <printTemplate>
 80088a8:	e00e      	b.n	80088c8 <takeWifiPass+0xf4>
            	} else if(page == 5) {
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	2b05      	cmp	r3, #5
 80088ae:	d10b      	bne.n	80088c8 <takeWifiPass+0xf4>
            		cursorPosition = 1;
 80088b0:	2301      	movs	r3, #1
 80088b2:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80088b4:	2301      	movs	r3, #1
 80088b6:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 80088b8:	2101      	movs	r1, #1
 80088ba:	2003      	movs	r0, #3
 80088bc:	f7f8 fd2a 	bl	8001314 <printTemplate>
 80088c0:	e002      	b.n	80088c8 <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	3301      	adds	r3, #1
 80088c6:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80088c8:	2096      	movs	r0, #150	@ 0x96
 80088ca:	f001 f971 	bl	8009bb0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80088ce:	2108      	movs	r1, #8
 80088d0:	486c      	ldr	r0, [pc, #432]	@ (8008a84 <takeWifiPass+0x2b0>)
 80088d2:	f001 ff3d 	bl	800a750 <HAL_GPIO_ReadPin>
 80088d6:	4603      	mov	r3, r0
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d149      	bne.n	8008970 <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	dc01      	bgt.n	80088e6 <takeWifiPass+0x112>
        		cursorPosition = 80;
 80088e2:	2350      	movs	r3, #80	@ 0x50
 80088e4:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d13b      	bne.n	8008964 <takeWifiPass+0x190>
            	if(page == 1) {
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	d108      	bne.n	8008904 <takeWifiPass+0x130>
            		cursorPosition = 16;
 80088f2:	2310      	movs	r3, #16
 80088f4:	60fb      	str	r3, [r7, #12]
            		page = 5;
 80088f6:	2305      	movs	r3, #5
 80088f8:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 80088fa:	2105      	movs	r1, #5
 80088fc:	2003      	movs	r0, #3
 80088fe:	f7f8 fd09 	bl	8001314 <printTemplate>
 8008902:	e032      	b.n	800896a <takeWifiPass+0x196>
            	} else if(page == 2) {
 8008904:	697b      	ldr	r3, [r7, #20]
 8008906:	2b02      	cmp	r3, #2
 8008908:	d108      	bne.n	800891c <takeWifiPass+0x148>
            		cursorPosition = 16;
 800890a:	2310      	movs	r3, #16
 800890c:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800890e:	2301      	movs	r3, #1
 8008910:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8008912:	2101      	movs	r1, #1
 8008914:	2003      	movs	r0, #3
 8008916:	f7f8 fcfd 	bl	8001314 <printTemplate>
 800891a:	e026      	b.n	800896a <takeWifiPass+0x196>
            	} else if(page == 3) {
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	2b03      	cmp	r3, #3
 8008920:	d108      	bne.n	8008934 <takeWifiPass+0x160>
            		cursorPosition = 16;
 8008922:	2310      	movs	r3, #16
 8008924:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8008926:	2302      	movs	r3, #2
 8008928:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 800892a:	2102      	movs	r1, #2
 800892c:	2003      	movs	r0, #3
 800892e:	f7f8 fcf1 	bl	8001314 <printTemplate>
 8008932:	e01a      	b.n	800896a <takeWifiPass+0x196>
            	} else if(page == 4) {
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	2b04      	cmp	r3, #4
 8008938:	d108      	bne.n	800894c <takeWifiPass+0x178>
            		cursorPosition = 16;
 800893a:	2310      	movs	r3, #16
 800893c:	60fb      	str	r3, [r7, #12]
            		page = 3;
 800893e:	2303      	movs	r3, #3
 8008940:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8008942:	2103      	movs	r1, #3
 8008944:	2003      	movs	r0, #3
 8008946:	f7f8 fce5 	bl	8001314 <printTemplate>
 800894a:	e00e      	b.n	800896a <takeWifiPass+0x196>
            	} else if(page == 5) {
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	2b05      	cmp	r3, #5
 8008950:	d10b      	bne.n	800896a <takeWifiPass+0x196>
            		cursorPosition = 16;
 8008952:	2310      	movs	r3, #16
 8008954:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8008956:	2304      	movs	r3, #4
 8008958:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 800895a:	2104      	movs	r1, #4
 800895c:	2003      	movs	r0, #3
 800895e:	f7f8 fcd9 	bl	8001314 <printTemplate>
 8008962:	e002      	b.n	800896a <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	3b01      	subs	r3, #1
 8008968:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800896a:	2096      	movs	r0, #150	@ 0x96
 800896c:	f001 f920 	bl	8009bb0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008970:	2102      	movs	r1, #2
 8008972:	4843      	ldr	r0, [pc, #268]	@ (8008a80 <takeWifiPass+0x2ac>)
 8008974:	f001 feec 	bl	800a750 <HAL_GPIO_ReadPin>
 8008978:	4603      	mov	r3, r0
 800897a:	2b01      	cmp	r3, #1
 800897c:	d12f      	bne.n	80089de <takeWifiPass+0x20a>
            eepromData[eepromVal] = cursorPosition;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	b2d9      	uxtb	r1, r3
 8008982:	4a41      	ldr	r2, [pc, #260]	@ (8008a88 <takeWifiPass+0x2b4>)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4413      	add	r3, r2
 8008988:	460a      	mov	r2, r1
 800898a:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 800898c:	4a3f      	ldr	r2, [pc, #252]	@ (8008a8c <takeWifiPass+0x2b8>)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	4413      	add	r3, r2
 8008992:	7819      	ldrb	r1, [r3, #0]
 8008994:	4a38      	ldr	r2, [pc, #224]	@ (8008a78 <takeWifiPass+0x2a4>)
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	4413      	add	r3, r2
 800899a:	460a      	mov	r2, r1
 800899c:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 800899e:	693b      	ldr	r3, [r7, #16]
 80089a0:	b2d9      	uxtb	r1, r3
 80089a2:	4a3a      	ldr	r2, [pc, #232]	@ (8008a8c <takeWifiPass+0x2b8>)
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	4413      	add	r3, r2
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	461a      	mov	r2, r3
 80089ac:	2001      	movs	r0, #1
 80089ae:	f000 fbba 	bl	8009126 <lcd_print_char>

            writeLoc++;
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	3301      	adds	r3, #1
 80089b6:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	3301      	adds	r3, #1
 80089bc:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	3301      	adds	r3, #1
 80089c2:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 80089c4:	4a30      	ldr	r2, [pc, #192]	@ (8008a88 <takeWifiPass+0x2b4>)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	4413      	add	r3, r2
 80089ca:	2200      	movs	r2, #0
 80089cc:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 80089ce:	4a2a      	ldr	r2, [pc, #168]	@ (8008a78 <takeWifiPass+0x2a4>)
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	4413      	add	r3, r2
 80089d4:	2200      	movs	r2, #0
 80089d6:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 80089d8:	2096      	movs	r0, #150	@ 0x96
 80089da:	f001 f8e9 	bl	8009bb0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80089de:	2104      	movs	r1, #4
 80089e0:	4827      	ldr	r0, [pc, #156]	@ (8008a80 <takeWifiPass+0x2ac>)
 80089e2:	f001 feb5 	bl	800a750 <HAL_GPIO_ReadPin>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d139      	bne.n	8008a60 <takeWifiPass+0x28c>
        	if(strlen(wifiPass) >= 1) {
 80089ec:	4b22      	ldr	r3, [pc, #136]	@ (8008a78 <takeWifiPass+0x2a4>)
 80089ee:	781b      	ldrb	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d032      	beq.n	8008a5a <takeWifiPass+0x286>
        		eepromData[eepromVal] = '\0';
 80089f4:	4a24      	ldr	r2, [pc, #144]	@ (8008a88 <takeWifiPass+0x2b4>)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4413      	add	r3, r2
 80089fa:	2200      	movs	r2, #0
 80089fc:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 80089fe:	4a1e      	ldr	r2, [pc, #120]	@ (8008a78 <takeWifiPass+0x2a4>)
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	4413      	add	r3, r2
 8008a04:	2200      	movs	r2, #0
 8008a06:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	2b07      	cmp	r3, #7
 8008a0c:	dd03      	ble.n	8008a16 <takeWifiPass+0x242>
        			writeLoc--;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	3b01      	subs	r3, #1
 8008a12:	613b      	str	r3, [r7, #16]
 8008a14:	e004      	b.n	8008a20 <takeWifiPass+0x24c>
        		} else if(writeLoc < 7) {
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	2b06      	cmp	r3, #6
 8008a1a:	dc01      	bgt.n	8008a20 <takeWifiPass+0x24c>
        			writeLoc = 7;
 8008a1c:	2307      	movs	r3, #7
 8008a1e:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	dd06      	ble.n	8008a34 <takeWifiPass+0x260>
        			arrayPosition--;
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	607b      	str	r3, [r7, #4]
 8008a32:	e007      	b.n	8008a44 <takeWifiPass+0x270>
        		} else if(arrayPosition < 0) {
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	da04      	bge.n	8008a44 <takeWifiPass+0x270>
        			arrayPosition = 0;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 8008a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8008a7c <takeWifiPass+0x2a8>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	3307      	adds	r3, #7
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	2001      	movs	r0, #1
 8008a50:	f000 fb8a 	bl	8009168 <lcd_delete_char>
        		HAL_Delay(50);
 8008a54:	2032      	movs	r0, #50	@ 0x32
 8008a56:	f001 f8ab 	bl	8009bb0 <HAL_Delay>
        	}

        	HAL_Delay(150);
 8008a5a:	2096      	movs	r0, #150	@ 0x96
 8008a5c:	f001 f8a8 	bl	8009bb0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	4619      	mov	r1, r3
 8008a66:	2002      	movs	r0, #2
 8008a68:	f000 fb29 	bl	80090be <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008a6c:	e6cc      	b.n	8008808 <takeWifiPass+0x34>
    	        break;
 8008a6e:	bf00      	nop
    }
}
 8008a70:	bf00      	nop
 8008a72:	3718      	adds	r7, #24
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	20001080 	.word	0x20001080
 8008a7c:	20000008 	.word	0x20000008
 8008a80:	40010800 	.word	0x40010800
 8008a84:	40011000 	.word	0x40011000
 8008a88:	20000fec 	.word	0x20000fec
 8008a8c:	20000018 	.word	0x20000018

08008a90 <mergeData>:

char* mergeData() {
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b09c      	sub	sp, #112	@ 0x70
 8008a94:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8008a96:	2300      	movs	r3, #0
 8008a98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a9a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8008a9e:	2229      	movs	r2, #41	@ 0x29
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f004 fff6 	bl	800da94 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8008aa8:	4b5f      	ldr	r3, [pc, #380]	@ (8008c28 <mergeData+0x198>)
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	703b      	strb	r3, [r7, #0]
 8008aae:	4b5f      	ldr	r3, [pc, #380]	@ (8008c2c <mergeData+0x19c>)
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	707b      	strb	r3, [r7, #1]
 8008ab4:	4b5e      	ldr	r3, [pc, #376]	@ (8008c30 <mergeData+0x1a0>)
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	70bb      	strb	r3, [r7, #2]
 8008aba:	4b5e      	ldr	r3, [pc, #376]	@ (8008c34 <mergeData+0x1a4>)
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	70fb      	strb	r3, [r7, #3]
 8008ac0:	4b5d      	ldr	r3, [pc, #372]	@ (8008c38 <mergeData+0x1a8>)
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	713b      	strb	r3, [r7, #4]
 8008ac6:	4b5d      	ldr	r3, [pc, #372]	@ (8008c3c <mergeData+0x1ac>)
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	717b      	strb	r3, [r7, #5]
 8008acc:	4b5c      	ldr	r3, [pc, #368]	@ (8008c40 <mergeData+0x1b0>)
 8008ace:	781b      	ldrb	r3, [r3, #0]
 8008ad0:	71bb      	strb	r3, [r7, #6]
 8008ad2:	4b5c      	ldr	r3, [pc, #368]	@ (8008c44 <mergeData+0x1b4>)
 8008ad4:	781b      	ldrb	r3, [r3, #0]
 8008ad6:	71fb      	strb	r3, [r7, #7]
 8008ad8:	4b5b      	ldr	r3, [pc, #364]	@ (8008c48 <mergeData+0x1b8>)
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	723b      	strb	r3, [r7, #8]
 8008ade:	4b5b      	ldr	r3, [pc, #364]	@ (8008c4c <mergeData+0x1bc>)
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	727b      	strb	r3, [r7, #9]
 8008ae4:	4b5a      	ldr	r3, [pc, #360]	@ (8008c50 <mergeData+0x1c0>)
 8008ae6:	781b      	ldrb	r3, [r3, #0]
 8008ae8:	72bb      	strb	r3, [r7, #10]
 8008aea:	4b5a      	ldr	r3, [pc, #360]	@ (8008c54 <mergeData+0x1c4>)
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	72fb      	strb	r3, [r7, #11]
 8008af0:	4b59      	ldr	r3, [pc, #356]	@ (8008c58 <mergeData+0x1c8>)
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	733b      	strb	r3, [r7, #12]
 8008af6:	4b59      	ldr	r3, [pc, #356]	@ (8008c5c <mergeData+0x1cc>)
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	737b      	strb	r3, [r7, #13]
 8008afc:	4b58      	ldr	r3, [pc, #352]	@ (8008c60 <mergeData+0x1d0>)
 8008afe:	781b      	ldrb	r3, [r3, #0]
 8008b00:	73bb      	strb	r3, [r7, #14]
 8008b02:	4b58      	ldr	r3, [pc, #352]	@ (8008c64 <mergeData+0x1d4>)
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	73fb      	strb	r3, [r7, #15]
 8008b08:	4b57      	ldr	r3, [pc, #348]	@ (8008c68 <mergeData+0x1d8>)
 8008b0a:	781b      	ldrb	r3, [r3, #0]
 8008b0c:	743b      	strb	r3, [r7, #16]
 8008b0e:	4b57      	ldr	r3, [pc, #348]	@ (8008c6c <mergeData+0x1dc>)
 8008b10:	781b      	ldrb	r3, [r3, #0]
 8008b12:	747b      	strb	r3, [r7, #17]
 8008b14:	4b56      	ldr	r3, [pc, #344]	@ (8008c70 <mergeData+0x1e0>)
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	74bb      	strb	r3, [r7, #18]
 8008b1a:	4b56      	ldr	r3, [pc, #344]	@ (8008c74 <mergeData+0x1e4>)
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	74fb      	strb	r3, [r7, #19]
 8008b20:	4b55      	ldr	r3, [pc, #340]	@ (8008c78 <mergeData+0x1e8>)
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	753b      	strb	r3, [r7, #20]
 8008b26:	4b55      	ldr	r3, [pc, #340]	@ (8008c7c <mergeData+0x1ec>)
 8008b28:	781b      	ldrb	r3, [r3, #0]
 8008b2a:	757b      	strb	r3, [r7, #21]
 8008b2c:	4b54      	ldr	r3, [pc, #336]	@ (8008c80 <mergeData+0x1f0>)
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	75bb      	strb	r3, [r7, #22]
 8008b32:	4b54      	ldr	r3, [pc, #336]	@ (8008c84 <mergeData+0x1f4>)
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	75fb      	strb	r3, [r7, #23]
 8008b38:	4b53      	ldr	r3, [pc, #332]	@ (8008c88 <mergeData+0x1f8>)
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	763b      	strb	r3, [r7, #24]
 8008b3e:	4b53      	ldr	r3, [pc, #332]	@ (8008c8c <mergeData+0x1fc>)
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	767b      	strb	r3, [r7, #25]
 8008b44:	4b52      	ldr	r3, [pc, #328]	@ (8008c90 <mergeData+0x200>)
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	76bb      	strb	r3, [r7, #26]
 8008b4a:	4b52      	ldr	r3, [pc, #328]	@ (8008c94 <mergeData+0x204>)
 8008b4c:	781b      	ldrb	r3, [r3, #0]
 8008b4e:	76fb      	strb	r3, [r7, #27]
 8008b50:	4b51      	ldr	r3, [pc, #324]	@ (8008c98 <mergeData+0x208>)
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	773b      	strb	r3, [r7, #28]
 8008b56:	4b51      	ldr	r3, [pc, #324]	@ (8008c9c <mergeData+0x20c>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	777b      	strb	r3, [r7, #29]
			buzzer,
			demoMode,
			calismaSayisi,
			calismaSayisiDemo,
			dilSecim,
			eepromData[38],
 8008b5c:	4b50      	ldr	r3, [pc, #320]	@ (8008ca0 <mergeData+0x210>)
 8008b5e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	uint8_t uintVariables[] = {
 8008b62:	77bb      	strb	r3, [r7, #30]
			eepromData[39],
 8008b64:	4b4e      	ldr	r3, [pc, #312]	@ (8008ca0 <mergeData+0x210>)
 8008b66:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	uint8_t uintVariables[] = {
 8008b6a:	77fb      	strb	r3, [r7, #31]
			eepromData[40],
 8008b6c:	4b4c      	ldr	r3, [pc, #304]	@ (8008ca0 <mergeData+0x210>)
 8008b6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	uint8_t uintVariables[] = {
 8008b72:	f887 3020 	strb.w	r3, [r7, #32]
			eepromData[41],
 8008b76:	4b4a      	ldr	r3, [pc, #296]	@ (8008ca0 <mergeData+0x210>)
 8008b78:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	uint8_t uintVariables[] = {
 8008b7c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[42],
 8008b80:	4b47      	ldr	r3, [pc, #284]	@ (8008ca0 <mergeData+0x210>)
 8008b82:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	uint8_t uintVariables[] = {
 8008b86:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[43],
 8008b8a:	4b45      	ldr	r3, [pc, #276]	@ (8008ca0 <mergeData+0x210>)
 8008b8c:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	uint8_t uintVariables[] = {
 8008b90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[44],
 8008b94:	4b42      	ldr	r3, [pc, #264]	@ (8008ca0 <mergeData+0x210>)
 8008b96:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	uint8_t uintVariables[] = {
 8008b9a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[45],
 8008b9e:	4b40      	ldr	r3, [pc, #256]	@ (8008ca0 <mergeData+0x210>)
 8008ba0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	uint8_t uintVariables[] = {
 8008ba4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[46],
 8008ba8:	4b3d      	ldr	r3, [pc, #244]	@ (8008ca0 <mergeData+0x210>)
 8008baa:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	uint8_t uintVariables[] = {
 8008bae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[47],
 8008bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8008ca0 <mergeData+0x210>)
 8008bb4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	uint8_t uintVariables[] = {
 8008bb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008bbc:	233c      	movs	r3, #60	@ 0x3c
 8008bbe:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008bc6:	e015      	b.n	8008bf4 <mergeData+0x164>
	    sprintf(temp, "%u", uintVariables[i]);
 8008bc8:	463a      	mov	r2, r7
 8008bca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bcc:	4413      	add	r3, r2
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008bd6:	4933      	ldr	r1, [pc, #204]	@ (8008ca4 <mergeData+0x214>)
 8008bd8:	4618      	mov	r0, r3
 8008bda:	f004 ff3b 	bl	800da54 <siprintf>
	    strcat(combinedString, temp);
 8008bde:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008be2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008be6:	4611      	mov	r1, r2
 8008be8:	4618      	mov	r0, r3
 8008bea:	f004 ff5b 	bl	800daa4 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008bee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008bf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bf6:	2b28      	cmp	r3, #40	@ 0x28
 8008bf8:	d9e6      	bls.n	8008bc8 <mergeData+0x138>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8008bfa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7f7 fb10 	bl	8000224 <strlen>
 8008c04:	4603      	mov	r3, r0
 8008c06:	3301      	adds	r3, #1
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f004 fe2b 	bl	800d864 <malloc>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 8008c12:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008c16:	4619      	mov	r1, r3
 8008c18:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8008c1a:	f004 ffb7 	bl	800db8c <strcpy>
	return result;
 8008c1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3770      	adds	r7, #112	@ 0x70
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	200010cb 	.word	0x200010cb
 8008c2c:	200010bd 	.word	0x200010bd
 8008c30:	200010c0 	.word	0x200010c0
 8008c34:	200010c1 	.word	0x200010c1
 8008c38:	200010c2 	.word	0x200010c2
 8008c3c:	200010c9 	.word	0x200010c9
 8008c40:	200010c3 	.word	0x200010c3
 8008c44:	200010c4 	.word	0x200010c4
 8008c48:	200010c8 	.word	0x200010c8
 8008c4c:	200010c5 	.word	0x200010c5
 8008c50:	200010d5 	.word	0x200010d5
 8008c54:	200010c6 	.word	0x200010c6
 8008c58:	200010d6 	.word	0x200010d6
 8008c5c:	200010c7 	.word	0x200010c7
 8008c60:	200010d7 	.word	0x200010d7
 8008c64:	200010ca 	.word	0x200010ca
 8008c68:	200010cc 	.word	0x200010cc
 8008c6c:	200010cd 	.word	0x200010cd
 8008c70:	200010ce 	.word	0x200010ce
 8008c74:	200010cf 	.word	0x200010cf
 8008c78:	200010d0 	.word	0x200010d0
 8008c7c:	200010d1 	.word	0x200010d1
 8008c80:	200010d2 	.word	0x200010d2
 8008c84:	200010d3 	.word	0x200010d3
 8008c88:	200010d4 	.word	0x200010d4
 8008c8c:	200010d8 	.word	0x200010d8
 8008c90:	200010da 	.word	0x200010da
 8008c94:	200010b4 	.word	0x200010b4
 8008c98:	200010b5 	.word	0x200010b5
 8008c9c:	200010dc 	.word	0x200010dc
 8008ca0:	20000fec 	.word	0x20000fec
 8008ca4:	0800edf4 	.word	0x0800edf4

08008ca8 <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af02      	add	r7, sp, #8
	lcd_print(1, 1, dataSynchText);
 8008cae:	4a13      	ldr	r2, [pc, #76]	@ (8008cfc <convertAndSendData+0x54>)
 8008cb0:	2101      	movs	r1, #1
 8008cb2:	2001      	movs	r0, #1
 8008cb4:	f000 fa22 	bl	80090fc <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 8008cb8:	4a11      	ldr	r2, [pc, #68]	@ (8008d00 <convertAndSendData+0x58>)
 8008cba:	2101      	movs	r1, #1
 8008cbc:	2002      	movs	r0, #2
 8008cbe:	f000 fa1d 	bl	80090fc <lcd_print>

	for(int i=0; i<2; i++) {
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	607b      	str	r3, [r7, #4]
 8008cc6:	e00c      	b.n	8008ce2 <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8008cc8:	f7ff fee2 	bl	8008a90 <mergeData>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8008d04 <convertAndSendData+0x5c>)
 8008cd2:	4a0d      	ldr	r2, [pc, #52]	@ (8008d08 <convertAndSendData+0x60>)
 8008cd4:	490d      	ldr	r1, [pc, #52]	@ (8008d0c <convertAndSendData+0x64>)
 8008cd6:	480e      	ldr	r0, [pc, #56]	@ (8008d10 <convertAndSendData+0x68>)
 8008cd8:	f7f7 ff12 	bl	8000b00 <sendMachineData>
	for(int i=0; i<2; i++) {
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	607b      	str	r3, [r7, #4]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	ddef      	ble.n	8008cc8 <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 8008ce8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008cec:	f000 ff60 	bl	8009bb0 <HAL_Delay>
	lcd_clear();
 8008cf0:	f000 fa30 	bl	8009154 <lcd_clear>
}
 8008cf4:	bf00      	nop
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}
 8008cfc:	20001798 	.word	0x20001798
 8008d00:	200017ac 	.word	0x200017ac
 8008d04:	20001080 	.word	0x20001080
 8008d08:	20001070 	.word	0x20001070
 8008d0c:	20001064 	.word	0x20001064
 8008d10:	200019d8 	.word	0x200019d8

08008d14 <iotSetup>:

void iotSetup() {
 8008d14:	b580      	push	{r7, lr}
 8008d16:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8008d18:	4b13      	ldr	r3, [pc, #76]	@ (8008d68 <iotSetup+0x54>)
 8008d1a:	781b      	ldrb	r3, [r3, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d021      	beq.n	8008d64 <iotSetup+0x50>
		if(checkEEPROM4ID() != 1) {
 8008d20:	f000 f82e 	bl	8008d80 <checkEEPROM4ID>
 8008d24:	4603      	mov	r3, r0
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d001      	beq.n	8008d2e <iotSetup+0x1a>
			takeMachineID();
 8008d2a:	f7ff f9af 	bl	800808c <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8008d2e:	480f      	ldr	r0, [pc, #60]	@ (8008d6c <iotSetup+0x58>)
 8008d30:	f7f7 fa78 	bl	8000224 <strlen>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d801      	bhi.n	8008d3e <iotSetup+0x2a>
			takeWifiSSID();
 8008d3a:	f7ff fb9f 	bl	800847c <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8008d3e:	480c      	ldr	r0, [pc, #48]	@ (8008d70 <iotSetup+0x5c>)
 8008d40:	f7f7 fa70 	bl	8000224 <strlen>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d801      	bhi.n	8008d4e <iotSetup+0x3a>
			takeWifiPass();
 8008d4a:	f7ff fd43 	bl	80087d4 <takeWifiPass>
		}

		ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 8008d4e:	4a09      	ldr	r2, [pc, #36]	@ (8008d74 <iotSetup+0x60>)
 8008d50:	4909      	ldr	r1, [pc, #36]	@ (8008d78 <iotSetup+0x64>)
 8008d52:	480a      	ldr	r0, [pc, #40]	@ (8008d7c <iotSetup+0x68>)
 8008d54:	f7f7 fe2a 	bl	80009ac <ESP8266_Init>
		HAL_Delay(500);
 8008d58:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008d5c:	f000 ff28 	bl	8009bb0 <HAL_Delay>
		convertAndSendData();
 8008d60:	f7ff ffa2 	bl	8008ca8 <convertAndSendData>
	}
}
 8008d64:	bf00      	nop
 8008d66:	bd80      	pop	{r7, pc}
 8008d68:	200010e7 	.word	0x200010e7
 8008d6c:	20001070 	.word	0x20001070
 8008d70:	20001080 	.word	0x20001080
 8008d74:	0800edf8 	.word	0x0800edf8
 8008d78:	0800ee10 	.word	0x0800ee10
 8008d7c:	200019d8 	.word	0x200019d8

08008d80 <checkEEPROM4ID>:

int checkEEPROM4ID() {
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8008d86:	4b0f      	ldr	r3, [pc, #60]	@ (8008dc4 <checkEEPROM4ID+0x44>)
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008d90:	2300      	movs	r3, #0
 8008d92:	607b      	str	r3, [r7, #4]
 8008d94:	e00d      	b.n	8008db2 <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8008d96:	4a0c      	ldr	r2, [pc, #48]	@ (8008dc8 <checkEEPROM4ID+0x48>)
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d101      	bne.n	8008da6 <checkEEPROM4ID+0x26>
			returnVal = 0;
 8008da2:	2300      	movs	r3, #0
 8008da4:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	3301      	adds	r3, #1
 8008daa:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	3301      	adds	r3, #1
 8008db0:	607b      	str	r3, [r7, #4]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b0b      	cmp	r3, #11
 8008db6:	ddee      	ble.n	8008d96 <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8008db8:	68bb      	ldr	r3, [r7, #8]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bc80      	pop	{r7}
 8008dc2:	4770      	bx	lr
 8008dc4:	20000000 	.word	0x20000000
 8008dc8:	20000fec 	.word	0x20000fec

08008dcc <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b086      	sub	sp, #24
 8008dd0:	af02      	add	r7, sp, #8
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8008dd6:	79fb      	ldrb	r3, [r7, #7]
 8008dd8:	f023 030f 	bic.w	r3, r3, #15
 8008ddc:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8008dde:	79fb      	ldrb	r3, [r7, #7]
 8008de0:	011b      	lsls	r3, r3, #4
 8008de2:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8008de4:	7b7b      	ldrb	r3, [r7, #13]
 8008de6:	f043 030c 	orr.w	r3, r3, #12
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8008dee:	7b7b      	ldrb	r3, [r7, #13]
 8008df0:	f043 0308 	orr.w	r3, r3, #8
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8008df8:	7b3b      	ldrb	r3, [r7, #12]
 8008dfa:	f043 030c 	orr.w	r3, r3, #12
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8008e02:	7b3b      	ldrb	r3, [r7, #12]
 8008e04:	f043 0308 	orr.w	r3, r3, #8
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008e0c:	bf00      	nop
 8008e0e:	4825      	ldr	r0, [pc, #148]	@ (8008ea4 <lcd_send_cmd+0xd8>)
 8008e10:	f002 fac7 	bl	800b3a2 <HAL_I2C_GetError>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b04      	cmp	r3, #4
 8008e18:	d0f9      	beq.n	8008e0e <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008e1a:	bf00      	nop
 8008e1c:	4821      	ldr	r0, [pc, #132]	@ (8008ea4 <lcd_send_cmd+0xd8>)
 8008e1e:	f002 fab3 	bl	800b388 <HAL_I2C_GetState>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b20      	cmp	r3, #32
 8008e26:	d1f9      	bne.n	8008e1c <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008e28:	4b1f      	ldr	r3, [pc, #124]	@ (8008ea8 <lcd_send_cmd+0xdc>)
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d116      	bne.n	8008e5e <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008e30:	2300      	movs	r3, #0
 8008e32:	73fb      	strb	r3, [r7, #15]
 8008e34:	e00f      	b.n	8008e56 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008e36:	7bfb      	ldrb	r3, [r7, #15]
 8008e38:	3310      	adds	r3, #16
 8008e3a:	443b      	add	r3, r7
 8008e3c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008e40:	7bfb      	ldrb	r3, [r7, #15]
 8008e42:	f022 0208 	bic.w	r2, r2, #8
 8008e46:	b2d2      	uxtb	r2, r2
 8008e48:	3310      	adds	r3, #16
 8008e4a:	443b      	add	r3, r7
 8008e4c:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008e50:	7bfb      	ldrb	r3, [r7, #15]
 8008e52:	3301      	adds	r3, #1
 8008e54:	73fb      	strb	r3, [r7, #15]
 8008e56:	7bfb      	ldrb	r3, [r7, #15]
 8008e58:	2b03      	cmp	r3, #3
 8008e5a:	d9ec      	bls.n	8008e36 <lcd_send_cmd+0x6a>
 8008e5c:	e015      	b.n	8008e8a <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008e5e:	2300      	movs	r3, #0
 8008e60:	73bb      	strb	r3, [r7, #14]
 8008e62:	e00f      	b.n	8008e84 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8008e64:	7bbb      	ldrb	r3, [r7, #14]
 8008e66:	3310      	adds	r3, #16
 8008e68:	443b      	add	r3, r7
 8008e6a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008e6e:	7bbb      	ldrb	r3, [r7, #14]
 8008e70:	f042 0208 	orr.w	r2, r2, #8
 8008e74:	b2d2      	uxtb	r2, r2
 8008e76:	3310      	adds	r3, #16
 8008e78:	443b      	add	r3, r7
 8008e7a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008e7e:	7bbb      	ldrb	r3, [r7, #14]
 8008e80:	3301      	adds	r3, #1
 8008e82:	73bb      	strb	r3, [r7, #14]
 8008e84:	7bbb      	ldrb	r3, [r7, #14]
 8008e86:	2b03      	cmp	r3, #3
 8008e88:	d9ec      	bls.n	8008e64 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008e8a:	f107 0208 	add.w	r2, r7, #8
 8008e8e:	2364      	movs	r3, #100	@ 0x64
 8008e90:	9300      	str	r3, [sp, #0]
 8008e92:	2304      	movs	r3, #4
 8008e94:	214e      	movs	r1, #78	@ 0x4e
 8008e96:	4803      	ldr	r0, [pc, #12]	@ (8008ea4 <lcd_send_cmd+0xd8>)
 8008e98:	f001 fe16 	bl	800aac8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008e9c:	bf00      	nop
 8008e9e:	3710      	adds	r7, #16
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	2000193c 	.word	0x2000193c
 8008ea8:	20001911 	.word	0x20001911

08008eac <lcd_send_data>:

void lcd_send_data (char data) {
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b086      	sub	sp, #24
 8008eb0:	af02      	add	r7, sp, #8
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8008eb6:	79fb      	ldrb	r3, [r7, #7]
 8008eb8:	f023 030f 	bic.w	r3, r3, #15
 8008ebc:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8008ebe:	79fb      	ldrb	r3, [r7, #7]
 8008ec0:	011b      	lsls	r3, r3, #4
 8008ec2:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8008ec4:	7b7b      	ldrb	r3, [r7, #13]
 8008ec6:	f043 030d 	orr.w	r3, r3, #13
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8008ece:	7b7b      	ldrb	r3, [r7, #13]
 8008ed0:	f043 0309 	orr.w	r3, r3, #9
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8008ed8:	7b3b      	ldrb	r3, [r7, #12]
 8008eda:	f043 030d 	orr.w	r3, r3, #13
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8008ee2:	7b3b      	ldrb	r3, [r7, #12]
 8008ee4:	f043 0309 	orr.w	r3, r3, #9
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008eec:	bf00      	nop
 8008eee:	4825      	ldr	r0, [pc, #148]	@ (8008f84 <lcd_send_data+0xd8>)
 8008ef0:	f002 fa57 	bl	800b3a2 <HAL_I2C_GetError>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b04      	cmp	r3, #4
 8008ef8:	d0f9      	beq.n	8008eee <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008efa:	bf00      	nop
 8008efc:	4821      	ldr	r0, [pc, #132]	@ (8008f84 <lcd_send_data+0xd8>)
 8008efe:	f002 fa43 	bl	800b388 <HAL_I2C_GetState>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b20      	cmp	r3, #32
 8008f06:	d1f9      	bne.n	8008efc <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008f08:	4b1f      	ldr	r3, [pc, #124]	@ (8008f88 <lcd_send_data+0xdc>)
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d116      	bne.n	8008f3e <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008f10:	2300      	movs	r3, #0
 8008f12:	73fb      	strb	r3, [r7, #15]
 8008f14:	e00f      	b.n	8008f36 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008f16:	7bfb      	ldrb	r3, [r7, #15]
 8008f18:	3310      	adds	r3, #16
 8008f1a:	443b      	add	r3, r7
 8008f1c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
 8008f22:	f022 0208 	bic.w	r2, r2, #8
 8008f26:	b2d2      	uxtb	r2, r2
 8008f28:	3310      	adds	r3, #16
 8008f2a:	443b      	add	r3, r7
 8008f2c:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008f30:	7bfb      	ldrb	r3, [r7, #15]
 8008f32:	3301      	adds	r3, #1
 8008f34:	73fb      	strb	r3, [r7, #15]
 8008f36:	7bfb      	ldrb	r3, [r7, #15]
 8008f38:	2b03      	cmp	r3, #3
 8008f3a:	d9ec      	bls.n	8008f16 <lcd_send_data+0x6a>
 8008f3c:	e015      	b.n	8008f6a <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008f3e:	2300      	movs	r3, #0
 8008f40:	73bb      	strb	r3, [r7, #14]
 8008f42:	e00f      	b.n	8008f64 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8008f44:	7bbb      	ldrb	r3, [r7, #14]
 8008f46:	3310      	adds	r3, #16
 8008f48:	443b      	add	r3, r7
 8008f4a:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008f4e:	7bbb      	ldrb	r3, [r7, #14]
 8008f50:	f042 0208 	orr.w	r2, r2, #8
 8008f54:	b2d2      	uxtb	r2, r2
 8008f56:	3310      	adds	r3, #16
 8008f58:	443b      	add	r3, r7
 8008f5a:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008f5e:	7bbb      	ldrb	r3, [r7, #14]
 8008f60:	3301      	adds	r3, #1
 8008f62:	73bb      	strb	r3, [r7, #14]
 8008f64:	7bbb      	ldrb	r3, [r7, #14]
 8008f66:	2b03      	cmp	r3, #3
 8008f68:	d9ec      	bls.n	8008f44 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008f6a:	f107 0208 	add.w	r2, r7, #8
 8008f6e:	2364      	movs	r3, #100	@ 0x64
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	2304      	movs	r3, #4
 8008f74:	214e      	movs	r1, #78	@ 0x4e
 8008f76:	4803      	ldr	r0, [pc, #12]	@ (8008f84 <lcd_send_data+0xd8>)
 8008f78:	f001 fda6 	bl	800aac8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008f7c:	bf00      	nop
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}
 8008f84:	2000193c 	.word	0x2000193c
 8008f88:	20001911 	.word	0x20001911

08008f8c <lcd_send_string>:

void lcd_send_string (char *str) {
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
	while (*str) {
 8008f94:	e006      	b.n	8008fa4 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	1c5a      	adds	r2, r3, #1
 8008f9a:	607a      	str	r2, [r7, #4]
 8008f9c:	781b      	ldrb	r3, [r3, #0]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7ff ff84 	bl	8008eac <lcd_send_data>
	while (*str) {
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1f4      	bne.n	8008f96 <lcd_send_string+0xa>
	}
}
 8008fac:	bf00      	nop
 8008fae:	bf00      	nop
 8008fb0:	3708      	adds	r7, #8
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
	...

08008fb8 <lcd_send_char>:

void lcd_send_char(char ch) {
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b086      	sub	sp, #24
 8008fbc:	af02      	add	r7, sp, #8
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8008fc2:	79fb      	ldrb	r3, [r7, #7]
 8008fc4:	f023 030f 	bic.w	r3, r3, #15
 8008fc8:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8008fca:	79fb      	ldrb	r3, [r7, #7]
 8008fcc:	011b      	lsls	r3, r3, #4
 8008fce:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8008fd0:	7b7b      	ldrb	r3, [r7, #13]
 8008fd2:	f043 030d 	orr.w	r3, r3, #13
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8008fda:	7b7b      	ldrb	r3, [r7, #13]
 8008fdc:	f043 0309 	orr.w	r3, r3, #9
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8008fe4:	7b3b      	ldrb	r3, [r7, #12]
 8008fe6:	f043 030d 	orr.w	r3, r3, #13
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8008fee:	7b3b      	ldrb	r3, [r7, #12]
 8008ff0:	f043 0309 	orr.w	r3, r3, #9
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008ff8:	bf00      	nop
 8008ffa:	4825      	ldr	r0, [pc, #148]	@ (8009090 <lcd_send_char+0xd8>)
 8008ffc:	f002 f9d1 	bl	800b3a2 <HAL_I2C_GetError>
 8009000:	4603      	mov	r3, r0
 8009002:	2b04      	cmp	r3, #4
 8009004:	d0f9      	beq.n	8008ffa <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8009006:	bf00      	nop
 8009008:	4821      	ldr	r0, [pc, #132]	@ (8009090 <lcd_send_char+0xd8>)
 800900a:	f002 f9bd 	bl	800b388 <HAL_I2C_GetState>
 800900e:	4603      	mov	r3, r0
 8009010:	2b20      	cmp	r3, #32
 8009012:	d1f9      	bne.n	8009008 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8009014:	4b1f      	ldr	r3, [pc, #124]	@ (8009094 <lcd_send_char+0xdc>)
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d116      	bne.n	800904a <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 800901c:	2300      	movs	r3, #0
 800901e:	73fb      	strb	r3, [r7, #15]
 8009020:	e00f      	b.n	8009042 <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8009022:	7bfb      	ldrb	r3, [r7, #15]
 8009024:	3310      	adds	r3, #16
 8009026:	443b      	add	r3, r7
 8009028:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800902c:	7bfb      	ldrb	r3, [r7, #15]
 800902e:	f022 0208 	bic.w	r2, r2, #8
 8009032:	b2d2      	uxtb	r2, r2
 8009034:	3310      	adds	r3, #16
 8009036:	443b      	add	r3, r7
 8009038:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 800903c:	7bfb      	ldrb	r3, [r7, #15]
 800903e:	3301      	adds	r3, #1
 8009040:	73fb      	strb	r3, [r7, #15]
 8009042:	7bfb      	ldrb	r3, [r7, #15]
 8009044:	2b03      	cmp	r3, #3
 8009046:	d9ec      	bls.n	8009022 <lcd_send_char+0x6a>
 8009048:	e015      	b.n	8009076 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 800904a:	2300      	movs	r3, #0
 800904c:	73bb      	strb	r3, [r7, #14]
 800904e:	e00f      	b.n	8009070 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	3310      	adds	r3, #16
 8009054:	443b      	add	r3, r7
 8009056:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800905a:	7bbb      	ldrb	r3, [r7, #14]
 800905c:	f042 0208 	orr.w	r2, r2, #8
 8009060:	b2d2      	uxtb	r2, r2
 8009062:	3310      	adds	r3, #16
 8009064:	443b      	add	r3, r7
 8009066:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 800906a:	7bbb      	ldrb	r3, [r7, #14]
 800906c:	3301      	adds	r3, #1
 800906e:	73bb      	strb	r3, [r7, #14]
 8009070:	7bbb      	ldrb	r3, [r7, #14]
 8009072:	2b03      	cmp	r3, #3
 8009074:	d9ec      	bls.n	8009050 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8009076:	f107 0208 	add.w	r2, r7, #8
 800907a:	2364      	movs	r3, #100	@ 0x64
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	2304      	movs	r3, #4
 8009080:	214e      	movs	r1, #78	@ 0x4e
 8009082:	4803      	ldr	r0, [pc, #12]	@ (8009090 <lcd_send_char+0xd8>)
 8009084:	f001 fd20 	bl	800aac8 <HAL_I2C_Master_Transmit>
}
 8009088:	bf00      	nop
 800908a:	3710      	adds	r7, #16
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	2000193c 	.word	0x2000193c
 8009094:	20001911 	.word	0x20001911

08009098 <lcd_init>:

void lcd_init (void) {
 8009098:	b580      	push	{r7, lr}
 800909a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 800909c:	2002      	movs	r0, #2
 800909e:	f7ff fe95 	bl	8008dcc <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80090a2:	2028      	movs	r0, #40	@ 0x28
 80090a4:	f7ff fe92 	bl	8008dcc <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80090a8:	200c      	movs	r0, #12
 80090aa:	f7ff fe8f 	bl	8008dcc <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80090ae:	2080      	movs	r0, #128	@ 0x80
 80090b0:	f7ff fe8c 	bl	8008dcc <lcd_send_cmd>
	lcd_backlight(1);
 80090b4:	2001      	movs	r0, #1
 80090b6:	f000 f86d 	bl	8009194 <lcd_backlight>
}
 80090ba:	bf00      	nop
 80090bc:	bd80      	pop	{r7, pc}

080090be <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 80090be:	b580      	push	{r7, lr}
 80090c0:	b082      	sub	sp, #8
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	4603      	mov	r3, r0
 80090c6:	460a      	mov	r2, r1
 80090c8:	71fb      	strb	r3, [r7, #7]
 80090ca:	4613      	mov	r3, r2
 80090cc:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 80090ce:	79fb      	ldrb	r3, [r7, #7]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d106      	bne.n	80090e2 <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 80090d4:	79bb      	ldrb	r3, [r7, #6]
 80090d6:	337f      	adds	r3, #127	@ 0x7f
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	4618      	mov	r0, r3
 80090dc:	f7ff fe76 	bl	8008dcc <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80090e0:	e008      	b.n	80090f4 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80090e2:	79fb      	ldrb	r3, [r7, #7]
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d105      	bne.n	80090f4 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80090e8:	79bb      	ldrb	r3, [r7, #6]
 80090ea:	3b41      	subs	r3, #65	@ 0x41
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7ff fe6c 	bl	8008dcc <lcd_send_cmd>
}
 80090f4:	bf00      	nop
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}

080090fc <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	4603      	mov	r3, r0
 8009104:	603a      	str	r2, [r7, #0]
 8009106:	71fb      	strb	r3, [r7, #7]
 8009108:	460b      	mov	r3, r1
 800910a:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 800910c:	79ba      	ldrb	r2, [r7, #6]
 800910e:	79fb      	ldrb	r3, [r7, #7]
 8009110:	4611      	mov	r1, r2
 8009112:	4618      	mov	r0, r3
 8009114:	f7ff ffd3 	bl	80090be <lcd_gotoxy>
	lcd_send_string(str);
 8009118:	6838      	ldr	r0, [r7, #0]
 800911a:	f7ff ff37 	bl	8008f8c <lcd_send_string>
}
 800911e:	bf00      	nop
 8009120:	3708      	adds	r7, #8
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}

08009126 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8009126:	b580      	push	{r7, lr}
 8009128:	b082      	sub	sp, #8
 800912a:	af00      	add	r7, sp, #0
 800912c:	4603      	mov	r3, r0
 800912e:	71fb      	strb	r3, [r7, #7]
 8009130:	460b      	mov	r3, r1
 8009132:	71bb      	strb	r3, [r7, #6]
 8009134:	4613      	mov	r3, r2
 8009136:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8009138:	79ba      	ldrb	r2, [r7, #6]
 800913a:	79fb      	ldrb	r3, [r7, #7]
 800913c:	4611      	mov	r1, r2
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff ffbd 	bl	80090be <lcd_gotoxy>
    lcd_send_char(ch);
 8009144:	797b      	ldrb	r3, [r7, #5]
 8009146:	4618      	mov	r0, r3
 8009148:	f7ff ff36 	bl	8008fb8 <lcd_send_char>
}
 800914c:	bf00      	nop
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <lcd_clear>:

void lcd_clear(void) {
 8009154:	b580      	push	{r7, lr}
 8009156:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8009158:	2001      	movs	r0, #1
 800915a:	f7ff fe37 	bl	8008dcc <lcd_send_cmd>
    HAL_Delay(2);
 800915e:	2002      	movs	r0, #2
 8009160:	f000 fd26 	bl	8009bb0 <HAL_Delay>
}
 8009164:	bf00      	nop
 8009166:	bd80      	pop	{r7, pc}

08009168 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	4603      	mov	r3, r0
 8009170:	460a      	mov	r2, r1
 8009172:	71fb      	strb	r3, [r7, #7]
 8009174:	4613      	mov	r3, r2
 8009176:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8009178:	79ba      	ldrb	r2, [r7, #6]
 800917a:	79fb      	ldrb	r3, [r7, #7]
 800917c:	4611      	mov	r1, r2
 800917e:	4618      	mov	r0, r3
 8009180:	f7ff ff9d 	bl	80090be <lcd_gotoxy>

    lcd_send_char(' ');
 8009184:	2020      	movs	r0, #32
 8009186:	f7ff ff17 	bl	8008fb8 <lcd_send_char>
}
 800918a:	bf00      	nop
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
	...

08009194 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	4603      	mov	r3, r0
 800919c:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800919e:	4a05      	ldr	r2, [pc, #20]	@ (80091b4 <lcd_backlight+0x20>)
 80091a0:	79fb      	ldrb	r3, [r7, #7]
 80091a2:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 80091a4:	2000      	movs	r0, #0
 80091a6:	f7ff fe11 	bl	8008dcc <lcd_send_cmd>
}
 80091aa:	bf00      	nop
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	20001911 	.word	0x20001911

080091b8 <lcd_cursor>:

void lcd_cursor(int state) {
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d106      	bne.n	80091d4 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 80091c6:	200e      	movs	r0, #14
 80091c8:	f7ff fe00 	bl	8008dcc <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 80091cc:	200f      	movs	r0, #15
 80091ce:	f7ff fdfd 	bl	8008dcc <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 80091d2:	e002      	b.n	80091da <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 80091d4:	200c      	movs	r0, #12
 80091d6:	f7ff fdf9 	bl	8008dcc <lcd_send_cmd>
}
 80091da:	bf00      	nop
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
	...

080091e4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 80091ec:	4b04      	ldr	r3, [pc, #16]	@ (8009200 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	3301      	adds	r3, #1
 80091f2:	4a03      	ldr	r2, [pc, #12]	@ (8009200 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80091f4:	6013      	str	r3, [r2, #0]
}
 80091f6:	bf00      	nop
 80091f8:	370c      	adds	r7, #12
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bc80      	pop	{r7}
 80091fe:	4770      	bx	lr
 8009200:	20001094 	.word	0x20001094

08009204 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009208:	f000 fc70 	bl	8009aec <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 800920c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009210:	f000 fcce 	bl	8009bb0 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009214:	f000 f89c 	bl	8009350 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009218:	f000 f9be 	bl	8009598 <MX_GPIO_Init>
  MX_CAN_Init();
 800921c:	f000 f8de 	bl	80093dc <MX_CAN_Init>
  MX_I2C1_Init();
 8009220:	f000 f910 	bl	8009444 <MX_I2C1_Init>
  MX_TIM1_Init();
 8009224:	f000 f93c 	bl	80094a0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8009228:	f000 f98c 	bl	8009544 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800922c:	2201      	movs	r2, #1
 800922e:	2140      	movs	r1, #64	@ 0x40
 8009230:	483e      	ldr	r0, [pc, #248]	@ (800932c <main+0x128>)
 8009232:	f001 faa4 	bl	800a77e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8009236:	2201      	movs	r2, #1
 8009238:	2180      	movs	r1, #128	@ 0x80
 800923a:	483c      	ldr	r0, [pc, #240]	@ (800932c <main+0x128>)
 800923c:	f001 fa9f 	bl	800a77e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8009240:	200a      	movs	r0, #10
 8009242:	f000 fcb5 	bl	8009bb0 <HAL_Delay>
  lcd_init();
 8009246:	f7ff ff27 	bl	8009098 <lcd_init>
  HAL_Delay(10);
 800924a:	200a      	movs	r0, #10
 800924c:	f000 fcb0 	bl	8009bb0 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 8009250:	4837      	ldr	r0, [pc, #220]	@ (8009330 <main+0x12c>)
 8009252:	f003 f947 	bl	800c4e4 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8009256:	bf00      	nop
 8009258:	4836      	ldr	r0, [pc, #216]	@ (8009334 <main+0x130>)
 800925a:	f002 f8a2 	bl	800b3a2 <HAL_I2C_GetError>
 800925e:	4603      	mov	r3, r0
 8009260:	2b04      	cmp	r3, #4
 8009262:	d0f9      	beq.n	8009258 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8009264:	bf00      	nop
 8009266:	4833      	ldr	r0, [pc, #204]	@ (8009334 <main+0x130>)
 8009268:	f002 f88e 	bl	800b388 <HAL_I2C_GetState>
 800926c:	4603      	mov	r3, r0
 800926e:	2b20      	cmp	r3, #32
 8009270:	d1f9      	bne.n	8009266 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8009272:	2200      	movs	r2, #0
 8009274:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009278:	482c      	ldr	r0, [pc, #176]	@ (800932c <main+0x128>)
 800927a:	f001 fa80 	bl	800a77e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800927e:	2200      	movs	r2, #0
 8009280:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009284:	4829      	ldr	r0, [pc, #164]	@ (800932c <main+0x128>)
 8009286:	f001 fa7a 	bl	800a77e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800928a:	2200      	movs	r2, #0
 800928c:	2104      	movs	r1, #4
 800928e:	4827      	ldr	r0, [pc, #156]	@ (800932c <main+0x128>)
 8009290:	f001 fa75 	bl	800a77e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8009294:	2200      	movs	r2, #0
 8009296:	2102      	movs	r1, #2
 8009298:	4824      	ldr	r0, [pc, #144]	@ (800932c <main+0x128>)
 800929a:	f001 fa70 	bl	800a77e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800929e:	2200      	movs	r2, #0
 80092a0:	2101      	movs	r1, #1
 80092a2:	4822      	ldr	r0, [pc, #136]	@ (800932c <main+0x128>)
 80092a4:	f001 fa6b 	bl	800a77e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80092a8:	2200      	movs	r2, #0
 80092aa:	2120      	movs	r1, #32
 80092ac:	4822      	ldr	r0, [pc, #136]	@ (8009338 <main+0x134>)
 80092ae:	f001 fa66 	bl	800a77e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80092b2:	2200      	movs	r2, #0
 80092b4:	2110      	movs	r1, #16
 80092b6:	4820      	ldr	r0, [pc, #128]	@ (8009338 <main+0x134>)
 80092b8:	f001 fa61 	bl	800a77e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80092bc:	2200      	movs	r2, #0
 80092be:	2180      	movs	r1, #128	@ 0x80
 80092c0:	481e      	ldr	r0, [pc, #120]	@ (800933c <main+0x138>)
 80092c2:	f001 fa5c 	bl	800a77e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80092c6:	2200      	movs	r2, #0
 80092c8:	2140      	movs	r1, #64	@ 0x40
 80092ca:	481c      	ldr	r0, [pc, #112]	@ (800933c <main+0x138>)
 80092cc:	f001 fa57 	bl	800a77e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80092d0:	2200      	movs	r2, #0
 80092d2:	2120      	movs	r1, #32
 80092d4:	4819      	ldr	r0, [pc, #100]	@ (800933c <main+0x138>)
 80092d6:	f001 fa52 	bl	800a77e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 80092da:	2200      	movs	r2, #0
 80092dc:	2110      	movs	r1, #16
 80092de:	4817      	ldr	r0, [pc, #92]	@ (800933c <main+0x138>)
 80092e0:	f001 fa4d 	bl	800a77e <HAL_GPIO_WritePin>

  i2cTest();
 80092e4:	f7f7 ff68 	bl	80011b8 <i2cTest>
  HAL_Delay(100);
 80092e8:	2064      	movs	r0, #100	@ 0x64
 80092ea:	f000 fc61 	bl	8009bb0 <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 80092ee:	4a14      	ldr	r2, [pc, #80]	@ (8009340 <main+0x13c>)
 80092f0:	2101      	movs	r1, #1
 80092f2:	2001      	movs	r0, #1
 80092f4:	f7ff ff02 	bl	80090fc <lcd_print>
  lcd_print(2, 1, splashText2GN);
 80092f8:	4a12      	ldr	r2, [pc, #72]	@ (8009344 <main+0x140>)
 80092fa:	2101      	movs	r1, #1
 80092fc:	2002      	movs	r0, #2
 80092fe:	f7ff fefd 	bl	80090fc <lcd_print>
  HAL_Delay(1000);
 8009302:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009306:	f000 fc53 	bl	8009bb0 <HAL_Delay>
  lcd_clear();
 800930a:	f7ff ff23 	bl	8009154 <lcd_clear>

  eepromKontrol();
 800930e:	f7f6 ff91 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 8009312:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009316:	f000 fc4b 	bl	8009bb0 <HAL_Delay>

  backLightTimer = millis;
 800931a:	4b0b      	ldr	r3, [pc, #44]	@ (8009348 <main+0x144>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a0b      	ldr	r2, [pc, #44]	@ (800934c <main+0x148>)
 8009320:	6013      	str	r3, [r2, #0]

  //IoT Section:
  iotSetup();
 8009322:	f7ff fcf7 	bl	8008d14 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8009326:	f7fc fe37 	bl	8005f98 <mainLoop>
 800932a:	e7fc      	b.n	8009326 <main+0x122>
 800932c:	40010c00 	.word	0x40010c00
 8009330:	20001990 	.word	0x20001990
 8009334:	2000193c 	.word	0x2000193c
 8009338:	40011000 	.word	0x40011000
 800933c:	40010800 	.word	0x40010800
 8009340:	2000009c 	.word	0x2000009c
 8009344:	200000b0 	.word	0x200000b0
 8009348:	20001094 	.word	0x20001094
 800934c:	200010b0 	.word	0x200010b0

08009350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b090      	sub	sp, #64	@ 0x40
 8009354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009356:	f107 0318 	add.w	r3, r7, #24
 800935a:	2228      	movs	r2, #40	@ 0x28
 800935c:	2100      	movs	r1, #0
 800935e:	4618      	mov	r0, r3
 8009360:	f004 fb98 	bl	800da94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009364:	1d3b      	adds	r3, r7, #4
 8009366:	2200      	movs	r2, #0
 8009368:	601a      	str	r2, [r3, #0]
 800936a:	605a      	str	r2, [r3, #4]
 800936c:	609a      	str	r2, [r3, #8]
 800936e:	60da      	str	r2, [r3, #12]
 8009370:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009372:	2301      	movs	r3, #1
 8009374:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009376:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800937a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800937c:	2300      	movs	r3, #0
 800937e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8009380:	2301      	movs	r3, #1
 8009382:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009384:	2302      	movs	r3, #2
 8009386:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009388:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800938c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800938e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8009392:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009394:	f107 0318 	add.w	r3, r7, #24
 8009398:	4618      	mov	r0, r3
 800939a:	f002 fc43 	bl	800bc24 <HAL_RCC_OscConfig>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d001      	beq.n	80093a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80093a4:	f000 f9a2 	bl	80096ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80093a8:	230f      	movs	r3, #15
 80093aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80093ac:	2302      	movs	r3, #2
 80093ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80093b0:	2300      	movs	r3, #0
 80093b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80093b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80093ba:	2300      	movs	r3, #0
 80093bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80093be:	1d3b      	adds	r3, r7, #4
 80093c0:	2102      	movs	r1, #2
 80093c2:	4618      	mov	r0, r3
 80093c4:	f002 feb0 	bl	800c128 <HAL_RCC_ClockConfig>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80093ce:	f000 f98d 	bl	80096ec <Error_Handler>
  }
}
 80093d2:	bf00      	nop
 80093d4:	3740      	adds	r7, #64	@ 0x40
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
	...

080093dc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80093e0:	4b16      	ldr	r3, [pc, #88]	@ (800943c <MX_CAN_Init+0x60>)
 80093e2:	4a17      	ldr	r2, [pc, #92]	@ (8009440 <MX_CAN_Init+0x64>)
 80093e4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80093e6:	4b15      	ldr	r3, [pc, #84]	@ (800943c <MX_CAN_Init+0x60>)
 80093e8:	2210      	movs	r2, #16
 80093ea:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80093ec:	4b13      	ldr	r3, [pc, #76]	@ (800943c <MX_CAN_Init+0x60>)
 80093ee:	2200      	movs	r2, #0
 80093f0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80093f2:	4b12      	ldr	r3, [pc, #72]	@ (800943c <MX_CAN_Init+0x60>)
 80093f4:	2200      	movs	r2, #0
 80093f6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80093f8:	4b10      	ldr	r3, [pc, #64]	@ (800943c <MX_CAN_Init+0x60>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80093fe:	4b0f      	ldr	r3, [pc, #60]	@ (800943c <MX_CAN_Init+0x60>)
 8009400:	2200      	movs	r2, #0
 8009402:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8009404:	4b0d      	ldr	r3, [pc, #52]	@ (800943c <MX_CAN_Init+0x60>)
 8009406:	2200      	movs	r2, #0
 8009408:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800940a:	4b0c      	ldr	r3, [pc, #48]	@ (800943c <MX_CAN_Init+0x60>)
 800940c:	2200      	movs	r2, #0
 800940e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8009410:	4b0a      	ldr	r3, [pc, #40]	@ (800943c <MX_CAN_Init+0x60>)
 8009412:	2200      	movs	r2, #0
 8009414:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8009416:	4b09      	ldr	r3, [pc, #36]	@ (800943c <MX_CAN_Init+0x60>)
 8009418:	2200      	movs	r2, #0
 800941a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800941c:	4b07      	ldr	r3, [pc, #28]	@ (800943c <MX_CAN_Init+0x60>)
 800941e:	2200      	movs	r2, #0
 8009420:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8009422:	4b06      	ldr	r3, [pc, #24]	@ (800943c <MX_CAN_Init+0x60>)
 8009424:	2200      	movs	r2, #0
 8009426:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8009428:	4804      	ldr	r0, [pc, #16]	@ (800943c <MX_CAN_Init+0x60>)
 800942a:	f000 fbe5 	bl	8009bf8 <HAL_CAN_Init>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d001      	beq.n	8009438 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8009434:	f000 f95a 	bl	80096ec <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8009438:	bf00      	nop
 800943a:	bd80      	pop	{r7, pc}
 800943c:	20001914 	.word	0x20001914
 8009440:	40006400 	.word	0x40006400

08009444 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009444:	b580      	push	{r7, lr}
 8009446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009448:	4b12      	ldr	r3, [pc, #72]	@ (8009494 <MX_I2C1_Init+0x50>)
 800944a:	4a13      	ldr	r2, [pc, #76]	@ (8009498 <MX_I2C1_Init+0x54>)
 800944c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800944e:	4b11      	ldr	r3, [pc, #68]	@ (8009494 <MX_I2C1_Init+0x50>)
 8009450:	4a12      	ldr	r2, [pc, #72]	@ (800949c <MX_I2C1_Init+0x58>)
 8009452:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009454:	4b0f      	ldr	r3, [pc, #60]	@ (8009494 <MX_I2C1_Init+0x50>)
 8009456:	2200      	movs	r2, #0
 8009458:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800945a:	4b0e      	ldr	r3, [pc, #56]	@ (8009494 <MX_I2C1_Init+0x50>)
 800945c:	2200      	movs	r2, #0
 800945e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009460:	4b0c      	ldr	r3, [pc, #48]	@ (8009494 <MX_I2C1_Init+0x50>)
 8009462:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8009466:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009468:	4b0a      	ldr	r3, [pc, #40]	@ (8009494 <MX_I2C1_Init+0x50>)
 800946a:	2200      	movs	r2, #0
 800946c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800946e:	4b09      	ldr	r3, [pc, #36]	@ (8009494 <MX_I2C1_Init+0x50>)
 8009470:	2200      	movs	r2, #0
 8009472:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009474:	4b07      	ldr	r3, [pc, #28]	@ (8009494 <MX_I2C1_Init+0x50>)
 8009476:	2200      	movs	r2, #0
 8009478:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800947a:	4b06      	ldr	r3, [pc, #24]	@ (8009494 <MX_I2C1_Init+0x50>)
 800947c:	2200      	movs	r2, #0
 800947e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009480:	4804      	ldr	r0, [pc, #16]	@ (8009494 <MX_I2C1_Init+0x50>)
 8009482:	f001 f9ad 	bl	800a7e0 <HAL_I2C_Init>
 8009486:	4603      	mov	r3, r0
 8009488:	2b00      	cmp	r3, #0
 800948a:	d001      	beq.n	8009490 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800948c:	f000 f92e 	bl	80096ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8009490:	bf00      	nop
 8009492:	bd80      	pop	{r7, pc}
 8009494:	2000193c 	.word	0x2000193c
 8009498:	40005400 	.word	0x40005400
 800949c:	00061a80 	.word	0x00061a80

080094a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b086      	sub	sp, #24
 80094a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80094a6:	f107 0308 	add.w	r3, r7, #8
 80094aa:	2200      	movs	r2, #0
 80094ac:	601a      	str	r2, [r3, #0]
 80094ae:	605a      	str	r2, [r3, #4]
 80094b0:	609a      	str	r2, [r3, #8]
 80094b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80094b4:	463b      	mov	r3, r7
 80094b6:	2200      	movs	r2, #0
 80094b8:	601a      	str	r2, [r3, #0]
 80094ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80094bc:	4b1f      	ldr	r3, [pc, #124]	@ (800953c <MX_TIM1_Init+0x9c>)
 80094be:	4a20      	ldr	r2, [pc, #128]	@ (8009540 <MX_TIM1_Init+0xa0>)
 80094c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80094c2:	4b1e      	ldr	r3, [pc, #120]	@ (800953c <MX_TIM1_Init+0x9c>)
 80094c4:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 80094c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094ca:	4b1c      	ldr	r3, [pc, #112]	@ (800953c <MX_TIM1_Init+0x9c>)
 80094cc:	2200      	movs	r2, #0
 80094ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80094d0:	4b1a      	ldr	r3, [pc, #104]	@ (800953c <MX_TIM1_Init+0x9c>)
 80094d2:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80094d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80094d8:	4b18      	ldr	r3, [pc, #96]	@ (800953c <MX_TIM1_Init+0x9c>)
 80094da:	2200      	movs	r2, #0
 80094dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80094de:	4b17      	ldr	r3, [pc, #92]	@ (800953c <MX_TIM1_Init+0x9c>)
 80094e0:	2200      	movs	r2, #0
 80094e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80094e4:	4b15      	ldr	r3, [pc, #84]	@ (800953c <MX_TIM1_Init+0x9c>)
 80094e6:	2200      	movs	r2, #0
 80094e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80094ea:	4814      	ldr	r0, [pc, #80]	@ (800953c <MX_TIM1_Init+0x9c>)
 80094ec:	f002 ffaa 	bl	800c444 <HAL_TIM_Base_Init>
 80094f0:	4603      	mov	r3, r0
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d001      	beq.n	80094fa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80094f6:	f000 f8f9 	bl	80096ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80094fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80094fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009500:	f107 0308 	add.w	r3, r7, #8
 8009504:	4619      	mov	r1, r3
 8009506:	480d      	ldr	r0, [pc, #52]	@ (800953c <MX_TIM1_Init+0x9c>)
 8009508:	f003 f954 	bl	800c7b4 <HAL_TIM_ConfigClockSource>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d001      	beq.n	8009516 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8009512:	f000 f8eb 	bl	80096ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009516:	2300      	movs	r3, #0
 8009518:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800951a:	2300      	movs	r3, #0
 800951c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800951e:	463b      	mov	r3, r7
 8009520:	4619      	mov	r1, r3
 8009522:	4806      	ldr	r0, [pc, #24]	@ (800953c <MX_TIM1_Init+0x9c>)
 8009524:	f003 fb42 	bl	800cbac <HAL_TIMEx_MasterConfigSynchronization>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800952e:	f000 f8dd 	bl	80096ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8009532:	bf00      	nop
 8009534:	3718      	adds	r7, #24
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
 800953a:	bf00      	nop
 800953c:	20001990 	.word	0x20001990
 8009540:	40012c00 	.word	0x40012c00

08009544 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009548:	4b11      	ldr	r3, [pc, #68]	@ (8009590 <MX_USART1_UART_Init+0x4c>)
 800954a:	4a12      	ldr	r2, [pc, #72]	@ (8009594 <MX_USART1_UART_Init+0x50>)
 800954c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800954e:	4b10      	ldr	r3, [pc, #64]	@ (8009590 <MX_USART1_UART_Init+0x4c>)
 8009550:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009554:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009556:	4b0e      	ldr	r3, [pc, #56]	@ (8009590 <MX_USART1_UART_Init+0x4c>)
 8009558:	2200      	movs	r2, #0
 800955a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800955c:	4b0c      	ldr	r3, [pc, #48]	@ (8009590 <MX_USART1_UART_Init+0x4c>)
 800955e:	2200      	movs	r2, #0
 8009560:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009562:	4b0b      	ldr	r3, [pc, #44]	@ (8009590 <MX_USART1_UART_Init+0x4c>)
 8009564:	2200      	movs	r2, #0
 8009566:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009568:	4b09      	ldr	r3, [pc, #36]	@ (8009590 <MX_USART1_UART_Init+0x4c>)
 800956a:	220c      	movs	r2, #12
 800956c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800956e:	4b08      	ldr	r3, [pc, #32]	@ (8009590 <MX_USART1_UART_Init+0x4c>)
 8009570:	2200      	movs	r2, #0
 8009572:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009574:	4b06      	ldr	r3, [pc, #24]	@ (8009590 <MX_USART1_UART_Init+0x4c>)
 8009576:	2200      	movs	r2, #0
 8009578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800957a:	4805      	ldr	r0, [pc, #20]	@ (8009590 <MX_USART1_UART_Init+0x4c>)
 800957c:	f003 fb94 	bl	800cca8 <HAL_UART_Init>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d001      	beq.n	800958a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009586:	f000 f8b1 	bl	80096ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800958a:	bf00      	nop
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	200019d8 	.word	0x200019d8
 8009594:	40013800 	.word	0x40013800

08009598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b088      	sub	sp, #32
 800959c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800959e:	f107 0310 	add.w	r3, r7, #16
 80095a2:	2200      	movs	r2, #0
 80095a4:	601a      	str	r2, [r3, #0]
 80095a6:	605a      	str	r2, [r3, #4]
 80095a8:	609a      	str	r2, [r3, #8]
 80095aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80095ac:	4b4b      	ldr	r3, [pc, #300]	@ (80096dc <MX_GPIO_Init+0x144>)
 80095ae:	699b      	ldr	r3, [r3, #24]
 80095b0:	4a4a      	ldr	r2, [pc, #296]	@ (80096dc <MX_GPIO_Init+0x144>)
 80095b2:	f043 0310 	orr.w	r3, r3, #16
 80095b6:	6193      	str	r3, [r2, #24]
 80095b8:	4b48      	ldr	r3, [pc, #288]	@ (80096dc <MX_GPIO_Init+0x144>)
 80095ba:	699b      	ldr	r3, [r3, #24]
 80095bc:	f003 0310 	and.w	r3, r3, #16
 80095c0:	60fb      	str	r3, [r7, #12]
 80095c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80095c4:	4b45      	ldr	r3, [pc, #276]	@ (80096dc <MX_GPIO_Init+0x144>)
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	4a44      	ldr	r2, [pc, #272]	@ (80096dc <MX_GPIO_Init+0x144>)
 80095ca:	f043 0320 	orr.w	r3, r3, #32
 80095ce:	6193      	str	r3, [r2, #24]
 80095d0:	4b42      	ldr	r3, [pc, #264]	@ (80096dc <MX_GPIO_Init+0x144>)
 80095d2:	699b      	ldr	r3, [r3, #24]
 80095d4:	f003 0320 	and.w	r3, r3, #32
 80095d8:	60bb      	str	r3, [r7, #8]
 80095da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80095dc:	4b3f      	ldr	r3, [pc, #252]	@ (80096dc <MX_GPIO_Init+0x144>)
 80095de:	699b      	ldr	r3, [r3, #24]
 80095e0:	4a3e      	ldr	r2, [pc, #248]	@ (80096dc <MX_GPIO_Init+0x144>)
 80095e2:	f043 0304 	orr.w	r3, r3, #4
 80095e6:	6193      	str	r3, [r2, #24]
 80095e8:	4b3c      	ldr	r3, [pc, #240]	@ (80096dc <MX_GPIO_Init+0x144>)
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	f003 0304 	and.w	r3, r3, #4
 80095f0:	607b      	str	r3, [r7, #4]
 80095f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80095f4:	4b39      	ldr	r3, [pc, #228]	@ (80096dc <MX_GPIO_Init+0x144>)
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	4a38      	ldr	r2, [pc, #224]	@ (80096dc <MX_GPIO_Init+0x144>)
 80095fa:	f043 0308 	orr.w	r3, r3, #8
 80095fe:	6193      	str	r3, [r2, #24]
 8009600:	4b36      	ldr	r3, [pc, #216]	@ (80096dc <MX_GPIO_Init+0x144>)
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	f003 0308 	and.w	r3, r3, #8
 8009608:	603b      	str	r3, [r7, #0]
 800960a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 800960c:	2200      	movs	r2, #0
 800960e:	21f0      	movs	r1, #240	@ 0xf0
 8009610:	4833      	ldr	r0, [pc, #204]	@ (80096e0 <MX_GPIO_Init+0x148>)
 8009612:	f001 f8b4 	bl	800a77e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8009616:	2200      	movs	r2, #0
 8009618:	f241 0130 	movw	r1, #4144	@ 0x1030
 800961c:	4831      	ldr	r0, [pc, #196]	@ (80096e4 <MX_GPIO_Init+0x14c>)
 800961e:	f001 f8ae 	bl	800a77e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8009622:	2200      	movs	r2, #0
 8009624:	f640 4107 	movw	r1, #3079	@ 0xc07
 8009628:	482f      	ldr	r0, [pc, #188]	@ (80096e8 <MX_GPIO_Init+0x150>)
 800962a:	f001 f8a8 	bl	800a77e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 800962e:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 8009632:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009634:	2300      	movs	r3, #0
 8009636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009638:	2300      	movs	r3, #0
 800963a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800963c:	f107 0310 	add.w	r3, r7, #16
 8009640:	4619      	mov	r1, r3
 8009642:	4828      	ldr	r0, [pc, #160]	@ (80096e4 <MX_GPIO_Init+0x14c>)
 8009644:	f000 fe24 	bl	800a290 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8009648:	f248 130f 	movw	r3, #33039	@ 0x810f
 800964c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800964e:	2300      	movs	r3, #0
 8009650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009652:	2300      	movs	r3, #0
 8009654:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009656:	f107 0310 	add.w	r3, r7, #16
 800965a:	4619      	mov	r1, r3
 800965c:	4820      	ldr	r0, [pc, #128]	@ (80096e0 <MX_GPIO_Init+0x148>)
 800965e:	f000 fe17 	bl	800a290 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8009662:	23f0      	movs	r3, #240	@ 0xf0
 8009664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009666:	2301      	movs	r3, #1
 8009668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800966a:	2300      	movs	r3, #0
 800966c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800966e:	2302      	movs	r3, #2
 8009670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009672:	f107 0310 	add.w	r3, r7, #16
 8009676:	4619      	mov	r1, r3
 8009678:	4819      	ldr	r0, [pc, #100]	@ (80096e0 <MX_GPIO_Init+0x148>)
 800967a:	f000 fe09 	bl	800a290 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800967e:	f241 0330 	movw	r3, #4144	@ 0x1030
 8009682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009684:	2301      	movs	r3, #1
 8009686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009688:	2300      	movs	r3, #0
 800968a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800968c:	2302      	movs	r3, #2
 800968e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009690:	f107 0310 	add.w	r3, r7, #16
 8009694:	4619      	mov	r1, r3
 8009696:	4813      	ldr	r0, [pc, #76]	@ (80096e4 <MX_GPIO_Init+0x14c>)
 8009698:	f000 fdfa 	bl	800a290 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800969c:	f640 4307 	movw	r3, #3079	@ 0xc07
 80096a0:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80096a2:	2301      	movs	r3, #1
 80096a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096a6:	2300      	movs	r3, #0
 80096a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096aa:	2302      	movs	r3, #2
 80096ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80096ae:	f107 0310 	add.w	r3, r7, #16
 80096b2:	4619      	mov	r1, r3
 80096b4:	480c      	ldr	r0, [pc, #48]	@ (80096e8 <MX_GPIO_Init+0x150>)
 80096b6:	f000 fdeb 	bl	800a290 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 80096ba:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80096be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80096c0:	2300      	movs	r3, #0
 80096c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096c4:	2300      	movs	r3, #0
 80096c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80096c8:	f107 0310 	add.w	r3, r7, #16
 80096cc:	4619      	mov	r1, r3
 80096ce:	4806      	ldr	r0, [pc, #24]	@ (80096e8 <MX_GPIO_Init+0x150>)
 80096d0:	f000 fdde 	bl	800a290 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80096d4:	bf00      	nop
 80096d6:	3720      	adds	r7, #32
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	40021000 	.word	0x40021000
 80096e0:	40010800 	.word	0x40010800
 80096e4:	40011000 	.word	0x40011000
 80096e8:	40010c00 	.word	0x40010c00

080096ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80096ec:	b480      	push	{r7}
 80096ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80096f0:	bf00      	nop
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bc80      	pop	{r7}
 80096f6:	4770      	bx	lr

080096f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b085      	sub	sp, #20
 80096fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80096fe:	4b15      	ldr	r3, [pc, #84]	@ (8009754 <HAL_MspInit+0x5c>)
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	4a14      	ldr	r2, [pc, #80]	@ (8009754 <HAL_MspInit+0x5c>)
 8009704:	f043 0301 	orr.w	r3, r3, #1
 8009708:	6193      	str	r3, [r2, #24]
 800970a:	4b12      	ldr	r3, [pc, #72]	@ (8009754 <HAL_MspInit+0x5c>)
 800970c:	699b      	ldr	r3, [r3, #24]
 800970e:	f003 0301 	and.w	r3, r3, #1
 8009712:	60bb      	str	r3, [r7, #8]
 8009714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009716:	4b0f      	ldr	r3, [pc, #60]	@ (8009754 <HAL_MspInit+0x5c>)
 8009718:	69db      	ldr	r3, [r3, #28]
 800971a:	4a0e      	ldr	r2, [pc, #56]	@ (8009754 <HAL_MspInit+0x5c>)
 800971c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009720:	61d3      	str	r3, [r2, #28]
 8009722:	4b0c      	ldr	r3, [pc, #48]	@ (8009754 <HAL_MspInit+0x5c>)
 8009724:	69db      	ldr	r3, [r3, #28]
 8009726:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800972a:	607b      	str	r3, [r7, #4]
 800972c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800972e:	4b0a      	ldr	r3, [pc, #40]	@ (8009758 <HAL_MspInit+0x60>)
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	60fb      	str	r3, [r7, #12]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800973a:	60fb      	str	r3, [r7, #12]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009742:	60fb      	str	r3, [r7, #12]
 8009744:	4a04      	ldr	r2, [pc, #16]	@ (8009758 <HAL_MspInit+0x60>)
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800974a:	bf00      	nop
 800974c:	3714      	adds	r7, #20
 800974e:	46bd      	mov	sp, r7
 8009750:	bc80      	pop	{r7}
 8009752:	4770      	bx	lr
 8009754:	40021000 	.word	0x40021000
 8009758:	40010000 	.word	0x40010000

0800975c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b088      	sub	sp, #32
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009764:	f107 0310 	add.w	r3, r7, #16
 8009768:	2200      	movs	r2, #0
 800976a:	601a      	str	r2, [r3, #0]
 800976c:	605a      	str	r2, [r3, #4]
 800976e:	609a      	str	r2, [r3, #8]
 8009770:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a1c      	ldr	r2, [pc, #112]	@ (80097e8 <HAL_CAN_MspInit+0x8c>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d131      	bne.n	80097e0 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800977c:	4b1b      	ldr	r3, [pc, #108]	@ (80097ec <HAL_CAN_MspInit+0x90>)
 800977e:	69db      	ldr	r3, [r3, #28]
 8009780:	4a1a      	ldr	r2, [pc, #104]	@ (80097ec <HAL_CAN_MspInit+0x90>)
 8009782:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009786:	61d3      	str	r3, [r2, #28]
 8009788:	4b18      	ldr	r3, [pc, #96]	@ (80097ec <HAL_CAN_MspInit+0x90>)
 800978a:	69db      	ldr	r3, [r3, #28]
 800978c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009790:	60fb      	str	r3, [r7, #12]
 8009792:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009794:	4b15      	ldr	r3, [pc, #84]	@ (80097ec <HAL_CAN_MspInit+0x90>)
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	4a14      	ldr	r2, [pc, #80]	@ (80097ec <HAL_CAN_MspInit+0x90>)
 800979a:	f043 0304 	orr.w	r3, r3, #4
 800979e:	6193      	str	r3, [r2, #24]
 80097a0:	4b12      	ldr	r3, [pc, #72]	@ (80097ec <HAL_CAN_MspInit+0x90>)
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	f003 0304 	and.w	r3, r3, #4
 80097a8:	60bb      	str	r3, [r7, #8]
 80097aa:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80097ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80097b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80097b2:	2300      	movs	r3, #0
 80097b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097b6:	2300      	movs	r3, #0
 80097b8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097ba:	f107 0310 	add.w	r3, r7, #16
 80097be:	4619      	mov	r1, r3
 80097c0:	480b      	ldr	r0, [pc, #44]	@ (80097f0 <HAL_CAN_MspInit+0x94>)
 80097c2:	f000 fd65 	bl	800a290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80097c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80097ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097cc:	2302      	movs	r3, #2
 80097ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80097d0:	2303      	movs	r3, #3
 80097d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097d4:	f107 0310 	add.w	r3, r7, #16
 80097d8:	4619      	mov	r1, r3
 80097da:	4805      	ldr	r0, [pc, #20]	@ (80097f0 <HAL_CAN_MspInit+0x94>)
 80097dc:	f000 fd58 	bl	800a290 <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80097e0:	bf00      	nop
 80097e2:	3720      	adds	r7, #32
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	40006400 	.word	0x40006400
 80097ec:	40021000 	.word	0x40021000
 80097f0:	40010800 	.word	0x40010800

080097f4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b088      	sub	sp, #32
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097fc:	f107 0310 	add.w	r3, r7, #16
 8009800:	2200      	movs	r2, #0
 8009802:	601a      	str	r2, [r3, #0]
 8009804:	605a      	str	r2, [r3, #4]
 8009806:	609a      	str	r2, [r3, #8]
 8009808:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a15      	ldr	r2, [pc, #84]	@ (8009864 <HAL_I2C_MspInit+0x70>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d123      	bne.n	800985c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009814:	4b14      	ldr	r3, [pc, #80]	@ (8009868 <HAL_I2C_MspInit+0x74>)
 8009816:	699b      	ldr	r3, [r3, #24]
 8009818:	4a13      	ldr	r2, [pc, #76]	@ (8009868 <HAL_I2C_MspInit+0x74>)
 800981a:	f043 0308 	orr.w	r3, r3, #8
 800981e:	6193      	str	r3, [r2, #24]
 8009820:	4b11      	ldr	r3, [pc, #68]	@ (8009868 <HAL_I2C_MspInit+0x74>)
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	f003 0308 	and.w	r3, r3, #8
 8009828:	60fb      	str	r3, [r7, #12]
 800982a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800982c:	23c0      	movs	r3, #192	@ 0xc0
 800982e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009830:	2312      	movs	r3, #18
 8009832:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009834:	2303      	movs	r3, #3
 8009836:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009838:	f107 0310 	add.w	r3, r7, #16
 800983c:	4619      	mov	r1, r3
 800983e:	480b      	ldr	r0, [pc, #44]	@ (800986c <HAL_I2C_MspInit+0x78>)
 8009840:	f000 fd26 	bl	800a290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8009844:	4b08      	ldr	r3, [pc, #32]	@ (8009868 <HAL_I2C_MspInit+0x74>)
 8009846:	69db      	ldr	r3, [r3, #28]
 8009848:	4a07      	ldr	r2, [pc, #28]	@ (8009868 <HAL_I2C_MspInit+0x74>)
 800984a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800984e:	61d3      	str	r3, [r2, #28]
 8009850:	4b05      	ldr	r3, [pc, #20]	@ (8009868 <HAL_I2C_MspInit+0x74>)
 8009852:	69db      	ldr	r3, [r3, #28]
 8009854:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009858:	60bb      	str	r3, [r7, #8]
 800985a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800985c:	bf00      	nop
 800985e:	3720      	adds	r7, #32
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	40005400 	.word	0x40005400
 8009868:	40021000 	.word	0x40021000
 800986c:	40010c00 	.word	0x40010c00

08009870 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b082      	sub	sp, #8
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a0a      	ldr	r2, [pc, #40]	@ (80098a8 <HAL_I2C_MspDeInit+0x38>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d10d      	bne.n	800989e <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8009882:	4b0a      	ldr	r3, [pc, #40]	@ (80098ac <HAL_I2C_MspDeInit+0x3c>)
 8009884:	69db      	ldr	r3, [r3, #28]
 8009886:	4a09      	ldr	r2, [pc, #36]	@ (80098ac <HAL_I2C_MspDeInit+0x3c>)
 8009888:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800988c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800988e:	2140      	movs	r1, #64	@ 0x40
 8009890:	4807      	ldr	r0, [pc, #28]	@ (80098b0 <HAL_I2C_MspDeInit+0x40>)
 8009892:	f000 fe91 	bl	800a5b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8009896:	2180      	movs	r1, #128	@ 0x80
 8009898:	4805      	ldr	r0, [pc, #20]	@ (80098b0 <HAL_I2C_MspDeInit+0x40>)
 800989a:	f000 fe8d 	bl	800a5b8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800989e:	bf00      	nop
 80098a0:	3708      	adds	r7, #8
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	40005400 	.word	0x40005400
 80098ac:	40021000 	.word	0x40021000
 80098b0:	40010c00 	.word	0x40010c00

080098b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a0d      	ldr	r2, [pc, #52]	@ (80098f8 <HAL_TIM_Base_MspInit+0x44>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d113      	bne.n	80098ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80098c6:	4b0d      	ldr	r3, [pc, #52]	@ (80098fc <HAL_TIM_Base_MspInit+0x48>)
 80098c8:	699b      	ldr	r3, [r3, #24]
 80098ca:	4a0c      	ldr	r2, [pc, #48]	@ (80098fc <HAL_TIM_Base_MspInit+0x48>)
 80098cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80098d0:	6193      	str	r3, [r2, #24]
 80098d2:	4b0a      	ldr	r3, [pc, #40]	@ (80098fc <HAL_TIM_Base_MspInit+0x48>)
 80098d4:	699b      	ldr	r3, [r3, #24]
 80098d6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80098da:	60fb      	str	r3, [r7, #12]
 80098dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80098de:	2200      	movs	r2, #0
 80098e0:	2100      	movs	r1, #0
 80098e2:	2019      	movs	r0, #25
 80098e4:	f000 fb5b 	bl	8009f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80098e8:	2019      	movs	r0, #25
 80098ea:	f000 fb74 	bl	8009fd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80098ee:	bf00      	nop
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	40012c00 	.word	0x40012c00
 80098fc:	40021000 	.word	0x40021000

08009900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b088      	sub	sp, #32
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009908:	f107 0310 	add.w	r3, r7, #16
 800990c:	2200      	movs	r2, #0
 800990e:	601a      	str	r2, [r3, #0]
 8009910:	605a      	str	r2, [r3, #4]
 8009912:	609a      	str	r2, [r3, #8]
 8009914:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a20      	ldr	r2, [pc, #128]	@ (800999c <HAL_UART_MspInit+0x9c>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d139      	bne.n	8009994 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009920:	4b1f      	ldr	r3, [pc, #124]	@ (80099a0 <HAL_UART_MspInit+0xa0>)
 8009922:	699b      	ldr	r3, [r3, #24]
 8009924:	4a1e      	ldr	r2, [pc, #120]	@ (80099a0 <HAL_UART_MspInit+0xa0>)
 8009926:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800992a:	6193      	str	r3, [r2, #24]
 800992c:	4b1c      	ldr	r3, [pc, #112]	@ (80099a0 <HAL_UART_MspInit+0xa0>)
 800992e:	699b      	ldr	r3, [r3, #24]
 8009930:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009934:	60fb      	str	r3, [r7, #12]
 8009936:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009938:	4b19      	ldr	r3, [pc, #100]	@ (80099a0 <HAL_UART_MspInit+0xa0>)
 800993a:	699b      	ldr	r3, [r3, #24]
 800993c:	4a18      	ldr	r2, [pc, #96]	@ (80099a0 <HAL_UART_MspInit+0xa0>)
 800993e:	f043 0304 	orr.w	r3, r3, #4
 8009942:	6193      	str	r3, [r2, #24]
 8009944:	4b16      	ldr	r3, [pc, #88]	@ (80099a0 <HAL_UART_MspInit+0xa0>)
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	f003 0304 	and.w	r3, r3, #4
 800994c:	60bb      	str	r3, [r7, #8]
 800994e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009950:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009954:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009956:	2302      	movs	r3, #2
 8009958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800995a:	2303      	movs	r3, #3
 800995c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800995e:	f107 0310 	add.w	r3, r7, #16
 8009962:	4619      	mov	r1, r3
 8009964:	480f      	ldr	r0, [pc, #60]	@ (80099a4 <HAL_UART_MspInit+0xa4>)
 8009966:	f000 fc93 	bl	800a290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800996a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800996e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009970:	2300      	movs	r3, #0
 8009972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009974:	2300      	movs	r3, #0
 8009976:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009978:	f107 0310 	add.w	r3, r7, #16
 800997c:	4619      	mov	r1, r3
 800997e:	4809      	ldr	r0, [pc, #36]	@ (80099a4 <HAL_UART_MspInit+0xa4>)
 8009980:	f000 fc86 	bl	800a290 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009984:	2200      	movs	r2, #0
 8009986:	2100      	movs	r1, #0
 8009988:	2025      	movs	r0, #37	@ 0x25
 800998a:	f000 fb08 	bl	8009f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800998e:	2025      	movs	r0, #37	@ 0x25
 8009990:	f000 fb21 	bl	8009fd6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8009994:	bf00      	nop
 8009996:	3720      	adds	r7, #32
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	40013800 	.word	0x40013800
 80099a0:	40021000 	.word	0x40021000
 80099a4:	40010800 	.word	0x40010800

080099a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80099a8:	b480      	push	{r7}
 80099aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80099ac:	bf00      	nop
 80099ae:	e7fd      	b.n	80099ac <NMI_Handler+0x4>

080099b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80099b0:	b480      	push	{r7}
 80099b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80099b4:	bf00      	nop
 80099b6:	e7fd      	b.n	80099b4 <HardFault_Handler+0x4>

080099b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80099b8:	b480      	push	{r7}
 80099ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80099bc:	bf00      	nop
 80099be:	e7fd      	b.n	80099bc <MemManage_Handler+0x4>

080099c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80099c0:	b480      	push	{r7}
 80099c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80099c4:	bf00      	nop
 80099c6:	e7fd      	b.n	80099c4 <BusFault_Handler+0x4>

080099c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80099c8:	b480      	push	{r7}
 80099ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80099cc:	bf00      	nop
 80099ce:	e7fd      	b.n	80099cc <UsageFault_Handler+0x4>

080099d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80099d0:	b480      	push	{r7}
 80099d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80099d4:	bf00      	nop
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bc80      	pop	{r7}
 80099da:	4770      	bx	lr

080099dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80099dc:	b480      	push	{r7}
 80099de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80099e0:	bf00      	nop
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bc80      	pop	{r7}
 80099e6:	4770      	bx	lr

080099e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80099e8:	b480      	push	{r7}
 80099ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80099ec:	bf00      	nop
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bc80      	pop	{r7}
 80099f2:	4770      	bx	lr

080099f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80099f8:	f000 f8be 	bl	8009b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80099fc:	bf00      	nop
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009a04:	4802      	ldr	r0, [pc, #8]	@ (8009a10 <TIM1_UP_IRQHandler+0x10>)
 8009a06:	f002 fdcd 	bl	800c5a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8009a0a:	bf00      	nop
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	20001990 	.word	0x20001990

08009a14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009a18:	4802      	ldr	r0, [pc, #8]	@ (8009a24 <USART1_IRQHandler+0x10>)
 8009a1a:	f003 f9ef 	bl	800cdfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009a1e:	bf00      	nop
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	200019d8 	.word	0x200019d8

08009a28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009a30:	4a14      	ldr	r2, [pc, #80]	@ (8009a84 <_sbrk+0x5c>)
 8009a32:	4b15      	ldr	r3, [pc, #84]	@ (8009a88 <_sbrk+0x60>)
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009a3c:	4b13      	ldr	r3, [pc, #76]	@ (8009a8c <_sbrk+0x64>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d102      	bne.n	8009a4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009a44:	4b11      	ldr	r3, [pc, #68]	@ (8009a8c <_sbrk+0x64>)
 8009a46:	4a12      	ldr	r2, [pc, #72]	@ (8009a90 <_sbrk+0x68>)
 8009a48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009a4a:	4b10      	ldr	r3, [pc, #64]	@ (8009a8c <_sbrk+0x64>)
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	4413      	add	r3, r2
 8009a52:	693a      	ldr	r2, [r7, #16]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d207      	bcs.n	8009a68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009a58:	f004 f86c 	bl	800db34 <__errno>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	220c      	movs	r2, #12
 8009a60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009a62:	f04f 33ff 	mov.w	r3, #4294967295
 8009a66:	e009      	b.n	8009a7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009a68:	4b08      	ldr	r3, [pc, #32]	@ (8009a8c <_sbrk+0x64>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009a6e:	4b07      	ldr	r3, [pc, #28]	@ (8009a8c <_sbrk+0x64>)
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4413      	add	r3, r2
 8009a76:	4a05      	ldr	r2, [pc, #20]	@ (8009a8c <_sbrk+0x64>)
 8009a78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009a7a:	68fb      	ldr	r3, [r7, #12]
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3718      	adds	r7, #24
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	2000c000 	.word	0x2000c000
 8009a88:	00000400 	.word	0x00000400
 8009a8c:	20001a20 	.word	0x20001a20
 8009a90:	20001b70 	.word	0x20001b70

08009a94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009a94:	b480      	push	{r7}
 8009a96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009a98:	bf00      	nop
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bc80      	pop	{r7}
 8009a9e:	4770      	bx	lr

08009aa0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009aa0:	480c      	ldr	r0, [pc, #48]	@ (8009ad4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009aa2:	490d      	ldr	r1, [pc, #52]	@ (8009ad8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8009adc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009aa8:	e002      	b.n	8009ab0 <LoopCopyDataInit>

08009aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009aae:	3304      	adds	r3, #4

08009ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009ab4:	d3f9      	bcc.n	8009aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8009ae0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009ab8:	4c0a      	ldr	r4, [pc, #40]	@ (8009ae4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009abc:	e001      	b.n	8009ac2 <LoopFillZerobss>

08009abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009ac0:	3204      	adds	r2, #4

08009ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009ac4:	d3fb      	bcc.n	8009abe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009ac6:	f7ff ffe5 	bl	8009a94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009aca:	f004 f839 	bl	800db40 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8009ace:	f7ff fb99 	bl	8009204 <main>
  bx lr
 8009ad2:	4770      	bx	lr
  ldr r0, =_sdata
 8009ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009ad8:	20000fd0 	.word	0x20000fd0
  ldr r2, =_sidata
 8009adc:	0800eeac 	.word	0x0800eeac
  ldr r2, =_sbss
 8009ae0:	20000fd0 	.word	0x20000fd0
  ldr r4, =_ebss
 8009ae4:	20001b70 	.word	0x20001b70

08009ae8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009ae8:	e7fe      	b.n	8009ae8 <ADC1_2_IRQHandler>
	...

08009aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009af0:	4b08      	ldr	r3, [pc, #32]	@ (8009b14 <HAL_Init+0x28>)
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a07      	ldr	r2, [pc, #28]	@ (8009b14 <HAL_Init+0x28>)
 8009af6:	f043 0310 	orr.w	r3, r3, #16
 8009afa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009afc:	2003      	movs	r0, #3
 8009afe:	f000 fa43 	bl	8009f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009b02:	200f      	movs	r0, #15
 8009b04:	f000 f808 	bl	8009b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009b08:	f7ff fdf6 	bl	80096f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009b0c:	2300      	movs	r3, #0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	40022000 	.word	0x40022000

08009b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009b20:	4b12      	ldr	r3, [pc, #72]	@ (8009b6c <HAL_InitTick+0x54>)
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	4b12      	ldr	r3, [pc, #72]	@ (8009b70 <HAL_InitTick+0x58>)
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	4619      	mov	r1, r3
 8009b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8009b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b36:	4618      	mov	r0, r3
 8009b38:	f000 fa5b 	bl	8009ff2 <HAL_SYSTICK_Config>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d001      	beq.n	8009b46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009b42:	2301      	movs	r3, #1
 8009b44:	e00e      	b.n	8009b64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2b0f      	cmp	r3, #15
 8009b4a:	d80a      	bhi.n	8009b62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	6879      	ldr	r1, [r7, #4]
 8009b50:	f04f 30ff 	mov.w	r0, #4294967295
 8009b54:	f000 fa23 	bl	8009f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009b58:	4a06      	ldr	r2, [pc, #24]	@ (8009b74 <HAL_InitTick+0x5c>)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	e000      	b.n	8009b64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009b62:	2301      	movs	r3, #1
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	20000f74 	.word	0x20000f74
 8009b70:	20000f7c 	.word	0x20000f7c
 8009b74:	20000f78 	.word	0x20000f78

08009b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009b7c:	4b05      	ldr	r3, [pc, #20]	@ (8009b94 <HAL_IncTick+0x1c>)
 8009b7e:	781b      	ldrb	r3, [r3, #0]
 8009b80:	461a      	mov	r2, r3
 8009b82:	4b05      	ldr	r3, [pc, #20]	@ (8009b98 <HAL_IncTick+0x20>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	4413      	add	r3, r2
 8009b88:	4a03      	ldr	r2, [pc, #12]	@ (8009b98 <HAL_IncTick+0x20>)
 8009b8a:	6013      	str	r3, [r2, #0]
}
 8009b8c:	bf00      	nop
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bc80      	pop	{r7}
 8009b92:	4770      	bx	lr
 8009b94:	20000f7c 	.word	0x20000f7c
 8009b98:	20001a24 	.word	0x20001a24

08009b9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8009ba0:	4b02      	ldr	r3, [pc, #8]	@ (8009bac <HAL_GetTick+0x10>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
}
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bc80      	pop	{r7}
 8009baa:	4770      	bx	lr
 8009bac:	20001a24 	.word	0x20001a24

08009bb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009bb8:	f7ff fff0 	bl	8009b9c <HAL_GetTick>
 8009bbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bc8:	d005      	beq.n	8009bd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009bca:	4b0a      	ldr	r3, [pc, #40]	@ (8009bf4 <HAL_Delay+0x44>)
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	461a      	mov	r2, r3
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009bd6:	bf00      	nop
 8009bd8:	f7ff ffe0 	bl	8009b9c <HAL_GetTick>
 8009bdc:	4602      	mov	r2, r0
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	1ad3      	subs	r3, r2, r3
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	429a      	cmp	r2, r3
 8009be6:	d8f7      	bhi.n	8009bd8 <HAL_Delay+0x28>
  {
  }
}
 8009be8:	bf00      	nop
 8009bea:	bf00      	nop
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	20000f7c 	.word	0x20000f7c

08009bf8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d101      	bne.n	8009c0a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009c06:	2301      	movs	r3, #1
 8009c08:	e0ed      	b.n	8009de6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c10:	b2db      	uxtb	r3, r3
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d102      	bne.n	8009c1c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f7ff fda0 	bl	800975c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f042 0201 	orr.w	r2, r2, #1
 8009c2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009c2c:	f7ff ffb6 	bl	8009b9c <HAL_GetTick>
 8009c30:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009c32:	e012      	b.n	8009c5a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009c34:	f7ff ffb2 	bl	8009b9c <HAL_GetTick>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	2b0a      	cmp	r3, #10
 8009c40:	d90b      	bls.n	8009c5a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c46:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2205      	movs	r2, #5
 8009c52:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	e0c5      	b.n	8009de6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	f003 0301 	and.w	r3, r3, #1
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d0e5      	beq.n	8009c34 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f022 0202 	bic.w	r2, r2, #2
 8009c76:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009c78:	f7ff ff90 	bl	8009b9c <HAL_GetTick>
 8009c7c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009c7e:	e012      	b.n	8009ca6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009c80:	f7ff ff8c 	bl	8009b9c <HAL_GetTick>
 8009c84:	4602      	mov	r2, r0
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	1ad3      	subs	r3, r2, r3
 8009c8a:	2b0a      	cmp	r3, #10
 8009c8c:	d90b      	bls.n	8009ca6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c92:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2205      	movs	r2, #5
 8009c9e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e09f      	b.n	8009de6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	f003 0302 	and.w	r3, r3, #2
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1e5      	bne.n	8009c80 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	7e1b      	ldrb	r3, [r3, #24]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d108      	bne.n	8009cce <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009cca:	601a      	str	r2, [r3, #0]
 8009ccc:	e007      	b.n	8009cde <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009cdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	7e5b      	ldrb	r3, [r3, #25]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d108      	bne.n	8009cf8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009cf4:	601a      	str	r2, [r3, #0]
 8009cf6:	e007      	b.n	8009d08 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d06:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	7e9b      	ldrb	r3, [r3, #26]
 8009d0c:	2b01      	cmp	r3, #1
 8009d0e:	d108      	bne.n	8009d22 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f042 0220 	orr.w	r2, r2, #32
 8009d1e:	601a      	str	r2, [r3, #0]
 8009d20:	e007      	b.n	8009d32 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	681a      	ldr	r2, [r3, #0]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f022 0220 	bic.w	r2, r2, #32
 8009d30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	7edb      	ldrb	r3, [r3, #27]
 8009d36:	2b01      	cmp	r3, #1
 8009d38:	d108      	bne.n	8009d4c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f022 0210 	bic.w	r2, r2, #16
 8009d48:	601a      	str	r2, [r3, #0]
 8009d4a:	e007      	b.n	8009d5c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f042 0210 	orr.w	r2, r2, #16
 8009d5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	7f1b      	ldrb	r3, [r3, #28]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d108      	bne.n	8009d76 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f042 0208 	orr.w	r2, r2, #8
 8009d72:	601a      	str	r2, [r3, #0]
 8009d74:	e007      	b.n	8009d86 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	681a      	ldr	r2, [r3, #0]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f022 0208 	bic.w	r2, r2, #8
 8009d84:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	7f5b      	ldrb	r3, [r3, #29]
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d108      	bne.n	8009da0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f042 0204 	orr.w	r2, r2, #4
 8009d9c:	601a      	str	r2, [r3, #0]
 8009d9e:	e007      	b.n	8009db0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	681a      	ldr	r2, [r3, #0]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f022 0204 	bic.w	r2, r2, #4
 8009dae:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	689a      	ldr	r2, [r3, #8]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	431a      	orrs	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	691b      	ldr	r3, [r3, #16]
 8009dbe:	431a      	orrs	r2, r3
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	695b      	ldr	r3, [r3, #20]
 8009dc4:	ea42 0103 	orr.w	r1, r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	1e5a      	subs	r2, r3, #1
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
	...

08009df0 <__NVIC_SetPriorityGrouping>:
{
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f003 0307 	and.w	r3, r3, #7
 8009dfe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009e00:	4b0c      	ldr	r3, [pc, #48]	@ (8009e34 <__NVIC_SetPriorityGrouping+0x44>)
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009e06:	68ba      	ldr	r2, [r7, #8]
 8009e08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009e18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009e1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009e22:	4a04      	ldr	r2, [pc, #16]	@ (8009e34 <__NVIC_SetPriorityGrouping+0x44>)
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	60d3      	str	r3, [r2, #12]
}
 8009e28:	bf00      	nop
 8009e2a:	3714      	adds	r7, #20
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bc80      	pop	{r7}
 8009e30:	4770      	bx	lr
 8009e32:	bf00      	nop
 8009e34:	e000ed00 	.word	0xe000ed00

08009e38 <__NVIC_GetPriorityGrouping>:
{
 8009e38:	b480      	push	{r7}
 8009e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009e3c:	4b04      	ldr	r3, [pc, #16]	@ (8009e50 <__NVIC_GetPriorityGrouping+0x18>)
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	0a1b      	lsrs	r3, r3, #8
 8009e42:	f003 0307 	and.w	r3, r3, #7
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bc80      	pop	{r7}
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop
 8009e50:	e000ed00 	.word	0xe000ed00

08009e54 <__NVIC_EnableIRQ>:
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	db0b      	blt.n	8009e7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009e66:	79fb      	ldrb	r3, [r7, #7]
 8009e68:	f003 021f 	and.w	r2, r3, #31
 8009e6c:	4906      	ldr	r1, [pc, #24]	@ (8009e88 <__NVIC_EnableIRQ+0x34>)
 8009e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e72:	095b      	lsrs	r3, r3, #5
 8009e74:	2001      	movs	r0, #1
 8009e76:	fa00 f202 	lsl.w	r2, r0, r2
 8009e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009e7e:	bf00      	nop
 8009e80:	370c      	adds	r7, #12
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bc80      	pop	{r7}
 8009e86:	4770      	bx	lr
 8009e88:	e000e100 	.word	0xe000e100

08009e8c <__NVIC_SetPriority>:
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	4603      	mov	r3, r0
 8009e94:	6039      	str	r1, [r7, #0]
 8009e96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	db0a      	blt.n	8009eb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	b2da      	uxtb	r2, r3
 8009ea4:	490c      	ldr	r1, [pc, #48]	@ (8009ed8 <__NVIC_SetPriority+0x4c>)
 8009ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009eaa:	0112      	lsls	r2, r2, #4
 8009eac:	b2d2      	uxtb	r2, r2
 8009eae:	440b      	add	r3, r1
 8009eb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009eb4:	e00a      	b.n	8009ecc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	b2da      	uxtb	r2, r3
 8009eba:	4908      	ldr	r1, [pc, #32]	@ (8009edc <__NVIC_SetPriority+0x50>)
 8009ebc:	79fb      	ldrb	r3, [r7, #7]
 8009ebe:	f003 030f 	and.w	r3, r3, #15
 8009ec2:	3b04      	subs	r3, #4
 8009ec4:	0112      	lsls	r2, r2, #4
 8009ec6:	b2d2      	uxtb	r2, r2
 8009ec8:	440b      	add	r3, r1
 8009eca:	761a      	strb	r2, [r3, #24]
}
 8009ecc:	bf00      	nop
 8009ece:	370c      	adds	r7, #12
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bc80      	pop	{r7}
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	e000e100 	.word	0xe000e100
 8009edc:	e000ed00 	.word	0xe000ed00

08009ee0 <NVIC_EncodePriority>:
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b089      	sub	sp, #36	@ 0x24
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	60f8      	str	r0, [r7, #12]
 8009ee8:	60b9      	str	r1, [r7, #8]
 8009eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f003 0307 	and.w	r3, r3, #7
 8009ef2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	f1c3 0307 	rsb	r3, r3, #7
 8009efa:	2b04      	cmp	r3, #4
 8009efc:	bf28      	it	cs
 8009efe:	2304      	movcs	r3, #4
 8009f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009f02:	69fb      	ldr	r3, [r7, #28]
 8009f04:	3304      	adds	r3, #4
 8009f06:	2b06      	cmp	r3, #6
 8009f08:	d902      	bls.n	8009f10 <NVIC_EncodePriority+0x30>
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	3b03      	subs	r3, #3
 8009f0e:	e000      	b.n	8009f12 <NVIC_EncodePriority+0x32>
 8009f10:	2300      	movs	r3, #0
 8009f12:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f14:	f04f 32ff 	mov.w	r2, #4294967295
 8009f18:	69bb      	ldr	r3, [r7, #24]
 8009f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8009f1e:	43da      	mvns	r2, r3
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	401a      	ands	r2, r3
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009f28:	f04f 31ff 	mov.w	r1, #4294967295
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8009f32:	43d9      	mvns	r1, r3
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009f38:	4313      	orrs	r3, r2
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3724      	adds	r7, #36	@ 0x24
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bc80      	pop	{r7}
 8009f42:	4770      	bx	lr

08009f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f54:	d301      	bcc.n	8009f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009f56:	2301      	movs	r3, #1
 8009f58:	e00f      	b.n	8009f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8009f84 <SysTick_Config+0x40>)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	3b01      	subs	r3, #1
 8009f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009f62:	210f      	movs	r1, #15
 8009f64:	f04f 30ff 	mov.w	r0, #4294967295
 8009f68:	f7ff ff90 	bl	8009e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009f6c:	4b05      	ldr	r3, [pc, #20]	@ (8009f84 <SysTick_Config+0x40>)
 8009f6e:	2200      	movs	r2, #0
 8009f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009f72:	4b04      	ldr	r3, [pc, #16]	@ (8009f84 <SysTick_Config+0x40>)
 8009f74:	2207      	movs	r2, #7
 8009f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
 8009f82:	bf00      	nop
 8009f84:	e000e010 	.word	0xe000e010

08009f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7ff ff2d 	bl	8009df0 <__NVIC_SetPriorityGrouping>
}
 8009f96:	bf00      	nop
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b086      	sub	sp, #24
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	60b9      	str	r1, [r7, #8]
 8009fa8:	607a      	str	r2, [r7, #4]
 8009faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009fac:	2300      	movs	r3, #0
 8009fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009fb0:	f7ff ff42 	bl	8009e38 <__NVIC_GetPriorityGrouping>
 8009fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	68b9      	ldr	r1, [r7, #8]
 8009fba:	6978      	ldr	r0, [r7, #20]
 8009fbc:	f7ff ff90 	bl	8009ee0 <NVIC_EncodePriority>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009fc6:	4611      	mov	r1, r2
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7ff ff5f 	bl	8009e8c <__NVIC_SetPriority>
}
 8009fce:	bf00      	nop
 8009fd0:	3718      	adds	r7, #24
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}

08009fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b082      	sub	sp, #8
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	4603      	mov	r3, r0
 8009fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	f7ff ff35 	bl	8009e54 <__NVIC_EnableIRQ>
}
 8009fea:	bf00      	nop
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b082      	sub	sp, #8
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7ff ffa2 	bl	8009f44 <SysTick_Config>
 800a000:	4603      	mov	r3, r0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}

0800a00a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b085      	sub	sp, #20
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a012:	2300      	movs	r3, #0
 800a014:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a01c:	b2db      	uxtb	r3, r3
 800a01e:	2b02      	cmp	r3, #2
 800a020:	d008      	beq.n	800a034 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2204      	movs	r2, #4
 800a026:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800a030:	2301      	movs	r3, #1
 800a032:	e020      	b.n	800a076 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f022 020e 	bic.w	r2, r2, #14
 800a042:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f022 0201 	bic.w	r2, r2, #1
 800a052:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a05c:	2101      	movs	r1, #1
 800a05e:	fa01 f202 	lsl.w	r2, r1, r2
 800a062:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800a074:	7bfb      	ldrb	r3, [r7, #15]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bc80      	pop	{r7}
 800a07e:	4770      	bx	lr

0800a080 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800a080:	b580      	push	{r7, lr}
 800a082:	b084      	sub	sp, #16
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a088:	2300      	movs	r3, #0
 800a08a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a092:	b2db      	uxtb	r3, r3
 800a094:	2b02      	cmp	r3, #2
 800a096:	d005      	beq.n	800a0a4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2204      	movs	r2, #4
 800a09c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800a09e:	2301      	movs	r3, #1
 800a0a0:	73fb      	strb	r3, [r7, #15]
 800a0a2:	e0d6      	b.n	800a252 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f022 020e 	bic.w	r2, r2, #14
 800a0b2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	681a      	ldr	r2, [r3, #0]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f022 0201 	bic.w	r2, r2, #1
 800a0c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	4b64      	ldr	r3, [pc, #400]	@ (800a25c <HAL_DMA_Abort_IT+0x1dc>)
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d958      	bls.n	800a182 <HAL_DMA_Abort_IT+0x102>
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a62      	ldr	r2, [pc, #392]	@ (800a260 <HAL_DMA_Abort_IT+0x1e0>)
 800a0d6:	4293      	cmp	r3, r2
 800a0d8:	d04f      	beq.n	800a17a <HAL_DMA_Abort_IT+0xfa>
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	4a61      	ldr	r2, [pc, #388]	@ (800a264 <HAL_DMA_Abort_IT+0x1e4>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d048      	beq.n	800a176 <HAL_DMA_Abort_IT+0xf6>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	4a5f      	ldr	r2, [pc, #380]	@ (800a268 <HAL_DMA_Abort_IT+0x1e8>)
 800a0ea:	4293      	cmp	r3, r2
 800a0ec:	d040      	beq.n	800a170 <HAL_DMA_Abort_IT+0xf0>
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a5e      	ldr	r2, [pc, #376]	@ (800a26c <HAL_DMA_Abort_IT+0x1ec>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d038      	beq.n	800a16a <HAL_DMA_Abort_IT+0xea>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a5c      	ldr	r2, [pc, #368]	@ (800a270 <HAL_DMA_Abort_IT+0x1f0>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d030      	beq.n	800a164 <HAL_DMA_Abort_IT+0xe4>
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4a5b      	ldr	r2, [pc, #364]	@ (800a274 <HAL_DMA_Abort_IT+0x1f4>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d028      	beq.n	800a15e <HAL_DMA_Abort_IT+0xde>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	4a52      	ldr	r2, [pc, #328]	@ (800a25c <HAL_DMA_Abort_IT+0x1dc>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d020      	beq.n	800a158 <HAL_DMA_Abort_IT+0xd8>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	4a57      	ldr	r2, [pc, #348]	@ (800a278 <HAL_DMA_Abort_IT+0x1f8>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d019      	beq.n	800a154 <HAL_DMA_Abort_IT+0xd4>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a55      	ldr	r2, [pc, #340]	@ (800a27c <HAL_DMA_Abort_IT+0x1fc>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d012      	beq.n	800a150 <HAL_DMA_Abort_IT+0xd0>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a54      	ldr	r2, [pc, #336]	@ (800a280 <HAL_DMA_Abort_IT+0x200>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d00a      	beq.n	800a14a <HAL_DMA_Abort_IT+0xca>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	4a52      	ldr	r2, [pc, #328]	@ (800a284 <HAL_DMA_Abort_IT+0x204>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d102      	bne.n	800a144 <HAL_DMA_Abort_IT+0xc4>
 800a13e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a142:	e01b      	b.n	800a17c <HAL_DMA_Abort_IT+0xfc>
 800a144:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a148:	e018      	b.n	800a17c <HAL_DMA_Abort_IT+0xfc>
 800a14a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a14e:	e015      	b.n	800a17c <HAL_DMA_Abort_IT+0xfc>
 800a150:	2310      	movs	r3, #16
 800a152:	e013      	b.n	800a17c <HAL_DMA_Abort_IT+0xfc>
 800a154:	2301      	movs	r3, #1
 800a156:	e011      	b.n	800a17c <HAL_DMA_Abort_IT+0xfc>
 800a158:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a15c:	e00e      	b.n	800a17c <HAL_DMA_Abort_IT+0xfc>
 800a15e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a162:	e00b      	b.n	800a17c <HAL_DMA_Abort_IT+0xfc>
 800a164:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a168:	e008      	b.n	800a17c <HAL_DMA_Abort_IT+0xfc>
 800a16a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a16e:	e005      	b.n	800a17c <HAL_DMA_Abort_IT+0xfc>
 800a170:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a174:	e002      	b.n	800a17c <HAL_DMA_Abort_IT+0xfc>
 800a176:	2310      	movs	r3, #16
 800a178:	e000      	b.n	800a17c <HAL_DMA_Abort_IT+0xfc>
 800a17a:	2301      	movs	r3, #1
 800a17c:	4a42      	ldr	r2, [pc, #264]	@ (800a288 <HAL_DMA_Abort_IT+0x208>)
 800a17e:	6053      	str	r3, [r2, #4]
 800a180:	e057      	b.n	800a232 <HAL_DMA_Abort_IT+0x1b2>
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a36      	ldr	r2, [pc, #216]	@ (800a260 <HAL_DMA_Abort_IT+0x1e0>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d04f      	beq.n	800a22c <HAL_DMA_Abort_IT+0x1ac>
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a34      	ldr	r2, [pc, #208]	@ (800a264 <HAL_DMA_Abort_IT+0x1e4>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d048      	beq.n	800a228 <HAL_DMA_Abort_IT+0x1a8>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a33      	ldr	r2, [pc, #204]	@ (800a268 <HAL_DMA_Abort_IT+0x1e8>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d040      	beq.n	800a222 <HAL_DMA_Abort_IT+0x1a2>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a31      	ldr	r2, [pc, #196]	@ (800a26c <HAL_DMA_Abort_IT+0x1ec>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d038      	beq.n	800a21c <HAL_DMA_Abort_IT+0x19c>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a30      	ldr	r2, [pc, #192]	@ (800a270 <HAL_DMA_Abort_IT+0x1f0>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d030      	beq.n	800a216 <HAL_DMA_Abort_IT+0x196>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a2e      	ldr	r2, [pc, #184]	@ (800a274 <HAL_DMA_Abort_IT+0x1f4>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d028      	beq.n	800a210 <HAL_DMA_Abort_IT+0x190>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a26      	ldr	r2, [pc, #152]	@ (800a25c <HAL_DMA_Abort_IT+0x1dc>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d020      	beq.n	800a20a <HAL_DMA_Abort_IT+0x18a>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a2a      	ldr	r2, [pc, #168]	@ (800a278 <HAL_DMA_Abort_IT+0x1f8>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d019      	beq.n	800a206 <HAL_DMA_Abort_IT+0x186>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a29      	ldr	r2, [pc, #164]	@ (800a27c <HAL_DMA_Abort_IT+0x1fc>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d012      	beq.n	800a202 <HAL_DMA_Abort_IT+0x182>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a27      	ldr	r2, [pc, #156]	@ (800a280 <HAL_DMA_Abort_IT+0x200>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d00a      	beq.n	800a1fc <HAL_DMA_Abort_IT+0x17c>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a26      	ldr	r2, [pc, #152]	@ (800a284 <HAL_DMA_Abort_IT+0x204>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d102      	bne.n	800a1f6 <HAL_DMA_Abort_IT+0x176>
 800a1f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a1f4:	e01b      	b.n	800a22e <HAL_DMA_Abort_IT+0x1ae>
 800a1f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a1fa:	e018      	b.n	800a22e <HAL_DMA_Abort_IT+0x1ae>
 800a1fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a200:	e015      	b.n	800a22e <HAL_DMA_Abort_IT+0x1ae>
 800a202:	2310      	movs	r3, #16
 800a204:	e013      	b.n	800a22e <HAL_DMA_Abort_IT+0x1ae>
 800a206:	2301      	movs	r3, #1
 800a208:	e011      	b.n	800a22e <HAL_DMA_Abort_IT+0x1ae>
 800a20a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a20e:	e00e      	b.n	800a22e <HAL_DMA_Abort_IT+0x1ae>
 800a210:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a214:	e00b      	b.n	800a22e <HAL_DMA_Abort_IT+0x1ae>
 800a216:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a21a:	e008      	b.n	800a22e <HAL_DMA_Abort_IT+0x1ae>
 800a21c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a220:	e005      	b.n	800a22e <HAL_DMA_Abort_IT+0x1ae>
 800a222:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a226:	e002      	b.n	800a22e <HAL_DMA_Abort_IT+0x1ae>
 800a228:	2310      	movs	r3, #16
 800a22a:	e000      	b.n	800a22e <HAL_DMA_Abort_IT+0x1ae>
 800a22c:	2301      	movs	r3, #1
 800a22e:	4a17      	ldr	r2, [pc, #92]	@ (800a28c <HAL_DMA_Abort_IT+0x20c>)
 800a230:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2201      	movs	r2, #1
 800a236:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a246:	2b00      	cmp	r3, #0
 800a248:	d003      	beq.n	800a252 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	4798      	blx	r3
    } 
  }
  return status;
 800a252:	7bfb      	ldrb	r3, [r7, #15]
}
 800a254:	4618      	mov	r0, r3
 800a256:	3710      	adds	r7, #16
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	40020080 	.word	0x40020080
 800a260:	40020008 	.word	0x40020008
 800a264:	4002001c 	.word	0x4002001c
 800a268:	40020030 	.word	0x40020030
 800a26c:	40020044 	.word	0x40020044
 800a270:	40020058 	.word	0x40020058
 800a274:	4002006c 	.word	0x4002006c
 800a278:	40020408 	.word	0x40020408
 800a27c:	4002041c 	.word	0x4002041c
 800a280:	40020430 	.word	0x40020430
 800a284:	40020444 	.word	0x40020444
 800a288:	40020400 	.word	0x40020400
 800a28c:	40020000 	.word	0x40020000

0800a290 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a290:	b480      	push	{r7}
 800a292:	b08b      	sub	sp, #44	@ 0x2c
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a29a:	2300      	movs	r3, #0
 800a29c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a2a2:	e179      	b.n	800a598 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800a2a4:	2201      	movs	r2, #1
 800a2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2a8:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	69fa      	ldr	r2, [r7, #28]
 800a2b4:	4013      	ands	r3, r2
 800a2b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800a2b8:	69ba      	ldr	r2, [r7, #24]
 800a2ba:	69fb      	ldr	r3, [r7, #28]
 800a2bc:	429a      	cmp	r2, r3
 800a2be:	f040 8168 	bne.w	800a592 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	4a96      	ldr	r2, [pc, #600]	@ (800a520 <HAL_GPIO_Init+0x290>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d05e      	beq.n	800a38a <HAL_GPIO_Init+0xfa>
 800a2cc:	4a94      	ldr	r2, [pc, #592]	@ (800a520 <HAL_GPIO_Init+0x290>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d875      	bhi.n	800a3be <HAL_GPIO_Init+0x12e>
 800a2d2:	4a94      	ldr	r2, [pc, #592]	@ (800a524 <HAL_GPIO_Init+0x294>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d058      	beq.n	800a38a <HAL_GPIO_Init+0xfa>
 800a2d8:	4a92      	ldr	r2, [pc, #584]	@ (800a524 <HAL_GPIO_Init+0x294>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d86f      	bhi.n	800a3be <HAL_GPIO_Init+0x12e>
 800a2de:	4a92      	ldr	r2, [pc, #584]	@ (800a528 <HAL_GPIO_Init+0x298>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d052      	beq.n	800a38a <HAL_GPIO_Init+0xfa>
 800a2e4:	4a90      	ldr	r2, [pc, #576]	@ (800a528 <HAL_GPIO_Init+0x298>)
 800a2e6:	4293      	cmp	r3, r2
 800a2e8:	d869      	bhi.n	800a3be <HAL_GPIO_Init+0x12e>
 800a2ea:	4a90      	ldr	r2, [pc, #576]	@ (800a52c <HAL_GPIO_Init+0x29c>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d04c      	beq.n	800a38a <HAL_GPIO_Init+0xfa>
 800a2f0:	4a8e      	ldr	r2, [pc, #568]	@ (800a52c <HAL_GPIO_Init+0x29c>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d863      	bhi.n	800a3be <HAL_GPIO_Init+0x12e>
 800a2f6:	4a8e      	ldr	r2, [pc, #568]	@ (800a530 <HAL_GPIO_Init+0x2a0>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d046      	beq.n	800a38a <HAL_GPIO_Init+0xfa>
 800a2fc:	4a8c      	ldr	r2, [pc, #560]	@ (800a530 <HAL_GPIO_Init+0x2a0>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d85d      	bhi.n	800a3be <HAL_GPIO_Init+0x12e>
 800a302:	2b12      	cmp	r3, #18
 800a304:	d82a      	bhi.n	800a35c <HAL_GPIO_Init+0xcc>
 800a306:	2b12      	cmp	r3, #18
 800a308:	d859      	bhi.n	800a3be <HAL_GPIO_Init+0x12e>
 800a30a:	a201      	add	r2, pc, #4	@ (adr r2, 800a310 <HAL_GPIO_Init+0x80>)
 800a30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a310:	0800a38b 	.word	0x0800a38b
 800a314:	0800a365 	.word	0x0800a365
 800a318:	0800a377 	.word	0x0800a377
 800a31c:	0800a3b9 	.word	0x0800a3b9
 800a320:	0800a3bf 	.word	0x0800a3bf
 800a324:	0800a3bf 	.word	0x0800a3bf
 800a328:	0800a3bf 	.word	0x0800a3bf
 800a32c:	0800a3bf 	.word	0x0800a3bf
 800a330:	0800a3bf 	.word	0x0800a3bf
 800a334:	0800a3bf 	.word	0x0800a3bf
 800a338:	0800a3bf 	.word	0x0800a3bf
 800a33c:	0800a3bf 	.word	0x0800a3bf
 800a340:	0800a3bf 	.word	0x0800a3bf
 800a344:	0800a3bf 	.word	0x0800a3bf
 800a348:	0800a3bf 	.word	0x0800a3bf
 800a34c:	0800a3bf 	.word	0x0800a3bf
 800a350:	0800a3bf 	.word	0x0800a3bf
 800a354:	0800a36d 	.word	0x0800a36d
 800a358:	0800a381 	.word	0x0800a381
 800a35c:	4a75      	ldr	r2, [pc, #468]	@ (800a534 <HAL_GPIO_Init+0x2a4>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d013      	beq.n	800a38a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800a362:	e02c      	b.n	800a3be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	623b      	str	r3, [r7, #32]
          break;
 800a36a:	e029      	b.n	800a3c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	68db      	ldr	r3, [r3, #12]
 800a370:	3304      	adds	r3, #4
 800a372:	623b      	str	r3, [r7, #32]
          break;
 800a374:	e024      	b.n	800a3c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	68db      	ldr	r3, [r3, #12]
 800a37a:	3308      	adds	r3, #8
 800a37c:	623b      	str	r3, [r7, #32]
          break;
 800a37e:	e01f      	b.n	800a3c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	330c      	adds	r3, #12
 800a386:	623b      	str	r3, [r7, #32]
          break;
 800a388:	e01a      	b.n	800a3c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d102      	bne.n	800a398 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a392:	2304      	movs	r3, #4
 800a394:	623b      	str	r3, [r7, #32]
          break;
 800a396:	e013      	b.n	800a3c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	689b      	ldr	r3, [r3, #8]
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d105      	bne.n	800a3ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a3a0:	2308      	movs	r3, #8
 800a3a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	69fa      	ldr	r2, [r7, #28]
 800a3a8:	611a      	str	r2, [r3, #16]
          break;
 800a3aa:	e009      	b.n	800a3c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a3ac:	2308      	movs	r3, #8
 800a3ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	69fa      	ldr	r2, [r7, #28]
 800a3b4:	615a      	str	r2, [r3, #20]
          break;
 800a3b6:	e003      	b.n	800a3c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	623b      	str	r3, [r7, #32]
          break;
 800a3bc:	e000      	b.n	800a3c0 <HAL_GPIO_Init+0x130>
          break;
 800a3be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	2bff      	cmp	r3, #255	@ 0xff
 800a3c4:	d801      	bhi.n	800a3ca <HAL_GPIO_Init+0x13a>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	e001      	b.n	800a3ce <HAL_GPIO_Init+0x13e>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	3304      	adds	r3, #4
 800a3ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	2bff      	cmp	r3, #255	@ 0xff
 800a3d4:	d802      	bhi.n	800a3dc <HAL_GPIO_Init+0x14c>
 800a3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	e002      	b.n	800a3e2 <HAL_GPIO_Init+0x152>
 800a3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3de:	3b08      	subs	r3, #8
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	210f      	movs	r1, #15
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a3f0:	43db      	mvns	r3, r3
 800a3f2:	401a      	ands	r2, r3
 800a3f4:	6a39      	ldr	r1, [r7, #32]
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	fa01 f303 	lsl.w	r3, r1, r3
 800a3fc:	431a      	orrs	r2, r3
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	f000 80c1 	beq.w	800a592 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a410:	4b49      	ldr	r3, [pc, #292]	@ (800a538 <HAL_GPIO_Init+0x2a8>)
 800a412:	699b      	ldr	r3, [r3, #24]
 800a414:	4a48      	ldr	r2, [pc, #288]	@ (800a538 <HAL_GPIO_Init+0x2a8>)
 800a416:	f043 0301 	orr.w	r3, r3, #1
 800a41a:	6193      	str	r3, [r2, #24]
 800a41c:	4b46      	ldr	r3, [pc, #280]	@ (800a538 <HAL_GPIO_Init+0x2a8>)
 800a41e:	699b      	ldr	r3, [r3, #24]
 800a420:	f003 0301 	and.w	r3, r3, #1
 800a424:	60bb      	str	r3, [r7, #8]
 800a426:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800a428:	4a44      	ldr	r2, [pc, #272]	@ (800a53c <HAL_GPIO_Init+0x2ac>)
 800a42a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42c:	089b      	lsrs	r3, r3, #2
 800a42e:	3302      	adds	r3, #2
 800a430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a434:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a438:	f003 0303 	and.w	r3, r3, #3
 800a43c:	009b      	lsls	r3, r3, #2
 800a43e:	220f      	movs	r2, #15
 800a440:	fa02 f303 	lsl.w	r3, r2, r3
 800a444:	43db      	mvns	r3, r3
 800a446:	68fa      	ldr	r2, [r7, #12]
 800a448:	4013      	ands	r3, r2
 800a44a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a3c      	ldr	r2, [pc, #240]	@ (800a540 <HAL_GPIO_Init+0x2b0>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d01f      	beq.n	800a494 <HAL_GPIO_Init+0x204>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a3b      	ldr	r2, [pc, #236]	@ (800a544 <HAL_GPIO_Init+0x2b4>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d019      	beq.n	800a490 <HAL_GPIO_Init+0x200>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4a3a      	ldr	r2, [pc, #232]	@ (800a548 <HAL_GPIO_Init+0x2b8>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d013      	beq.n	800a48c <HAL_GPIO_Init+0x1fc>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a39      	ldr	r2, [pc, #228]	@ (800a54c <HAL_GPIO_Init+0x2bc>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d00d      	beq.n	800a488 <HAL_GPIO_Init+0x1f8>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4a38      	ldr	r2, [pc, #224]	@ (800a550 <HAL_GPIO_Init+0x2c0>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d007      	beq.n	800a484 <HAL_GPIO_Init+0x1f4>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	4a37      	ldr	r2, [pc, #220]	@ (800a554 <HAL_GPIO_Init+0x2c4>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d101      	bne.n	800a480 <HAL_GPIO_Init+0x1f0>
 800a47c:	2305      	movs	r3, #5
 800a47e:	e00a      	b.n	800a496 <HAL_GPIO_Init+0x206>
 800a480:	2306      	movs	r3, #6
 800a482:	e008      	b.n	800a496 <HAL_GPIO_Init+0x206>
 800a484:	2304      	movs	r3, #4
 800a486:	e006      	b.n	800a496 <HAL_GPIO_Init+0x206>
 800a488:	2303      	movs	r3, #3
 800a48a:	e004      	b.n	800a496 <HAL_GPIO_Init+0x206>
 800a48c:	2302      	movs	r3, #2
 800a48e:	e002      	b.n	800a496 <HAL_GPIO_Init+0x206>
 800a490:	2301      	movs	r3, #1
 800a492:	e000      	b.n	800a496 <HAL_GPIO_Init+0x206>
 800a494:	2300      	movs	r3, #0
 800a496:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a498:	f002 0203 	and.w	r2, r2, #3
 800a49c:	0092      	lsls	r2, r2, #2
 800a49e:	4093      	lsls	r3, r2
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a4a6:	4925      	ldr	r1, [pc, #148]	@ (800a53c <HAL_GPIO_Init+0x2ac>)
 800a4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4aa:	089b      	lsrs	r3, r3, #2
 800a4ac:	3302      	adds	r3, #2
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d006      	beq.n	800a4ce <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a4c0:	4b25      	ldr	r3, [pc, #148]	@ (800a558 <HAL_GPIO_Init+0x2c8>)
 800a4c2:	689a      	ldr	r2, [r3, #8]
 800a4c4:	4924      	ldr	r1, [pc, #144]	@ (800a558 <HAL_GPIO_Init+0x2c8>)
 800a4c6:	69bb      	ldr	r3, [r7, #24]
 800a4c8:	4313      	orrs	r3, r2
 800a4ca:	608b      	str	r3, [r1, #8]
 800a4cc:	e006      	b.n	800a4dc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a4ce:	4b22      	ldr	r3, [pc, #136]	@ (800a558 <HAL_GPIO_Init+0x2c8>)
 800a4d0:	689a      	ldr	r2, [r3, #8]
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	43db      	mvns	r3, r3
 800a4d6:	4920      	ldr	r1, [pc, #128]	@ (800a558 <HAL_GPIO_Init+0x2c8>)
 800a4d8:	4013      	ands	r3, r2
 800a4da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d006      	beq.n	800a4f6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a4e8:	4b1b      	ldr	r3, [pc, #108]	@ (800a558 <HAL_GPIO_Init+0x2c8>)
 800a4ea:	68da      	ldr	r2, [r3, #12]
 800a4ec:	491a      	ldr	r1, [pc, #104]	@ (800a558 <HAL_GPIO_Init+0x2c8>)
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	60cb      	str	r3, [r1, #12]
 800a4f4:	e006      	b.n	800a504 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a4f6:	4b18      	ldr	r3, [pc, #96]	@ (800a558 <HAL_GPIO_Init+0x2c8>)
 800a4f8:	68da      	ldr	r2, [r3, #12]
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	43db      	mvns	r3, r3
 800a4fe:	4916      	ldr	r1, [pc, #88]	@ (800a558 <HAL_GPIO_Init+0x2c8>)
 800a500:	4013      	ands	r3, r2
 800a502:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d025      	beq.n	800a55c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a510:	4b11      	ldr	r3, [pc, #68]	@ (800a558 <HAL_GPIO_Init+0x2c8>)
 800a512:	685a      	ldr	r2, [r3, #4]
 800a514:	4910      	ldr	r1, [pc, #64]	@ (800a558 <HAL_GPIO_Init+0x2c8>)
 800a516:	69bb      	ldr	r3, [r7, #24]
 800a518:	4313      	orrs	r3, r2
 800a51a:	604b      	str	r3, [r1, #4]
 800a51c:	e025      	b.n	800a56a <HAL_GPIO_Init+0x2da>
 800a51e:	bf00      	nop
 800a520:	10320000 	.word	0x10320000
 800a524:	10310000 	.word	0x10310000
 800a528:	10220000 	.word	0x10220000
 800a52c:	10210000 	.word	0x10210000
 800a530:	10120000 	.word	0x10120000
 800a534:	10110000 	.word	0x10110000
 800a538:	40021000 	.word	0x40021000
 800a53c:	40010000 	.word	0x40010000
 800a540:	40010800 	.word	0x40010800
 800a544:	40010c00 	.word	0x40010c00
 800a548:	40011000 	.word	0x40011000
 800a54c:	40011400 	.word	0x40011400
 800a550:	40011800 	.word	0x40011800
 800a554:	40011c00 	.word	0x40011c00
 800a558:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a55c:	4b15      	ldr	r3, [pc, #84]	@ (800a5b4 <HAL_GPIO_Init+0x324>)
 800a55e:	685a      	ldr	r2, [r3, #4]
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	43db      	mvns	r3, r3
 800a564:	4913      	ldr	r1, [pc, #76]	@ (800a5b4 <HAL_GPIO_Init+0x324>)
 800a566:	4013      	ands	r3, r2
 800a568:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a572:	2b00      	cmp	r3, #0
 800a574:	d006      	beq.n	800a584 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a576:	4b0f      	ldr	r3, [pc, #60]	@ (800a5b4 <HAL_GPIO_Init+0x324>)
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	490e      	ldr	r1, [pc, #56]	@ (800a5b4 <HAL_GPIO_Init+0x324>)
 800a57c:	69bb      	ldr	r3, [r7, #24]
 800a57e:	4313      	orrs	r3, r2
 800a580:	600b      	str	r3, [r1, #0]
 800a582:	e006      	b.n	800a592 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a584:	4b0b      	ldr	r3, [pc, #44]	@ (800a5b4 <HAL_GPIO_Init+0x324>)
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	43db      	mvns	r3, r3
 800a58c:	4909      	ldr	r1, [pc, #36]	@ (800a5b4 <HAL_GPIO_Init+0x324>)
 800a58e:	4013      	ands	r3, r2
 800a590:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a594:	3301      	adds	r3, #1
 800a596:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a59e:	fa22 f303 	lsr.w	r3, r2, r3
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f47f ae7e 	bne.w	800a2a4 <HAL_GPIO_Init+0x14>
  }
}
 800a5a8:	bf00      	nop
 800a5aa:	bf00      	nop
 800a5ac:	372c      	adds	r7, #44	@ 0x2c
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bc80      	pop	{r7}
 800a5b2:	4770      	bx	lr
 800a5b4:	40010400 	.word	0x40010400

0800a5b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b089      	sub	sp, #36	@ 0x24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
 800a5c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800a5c6:	e0a6      	b.n	800a716 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	69fb      	ldr	r3, [r7, #28]
 800a5cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a5d0:	683a      	ldr	r2, [r7, #0]
 800a5d2:	4013      	ands	r3, r2
 800a5d4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	f000 8099 	beq.w	800a710 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800a5de:	4a54      	ldr	r2, [pc, #336]	@ (800a730 <HAL_GPIO_DeInit+0x178>)
 800a5e0:	69fb      	ldr	r3, [r7, #28]
 800a5e2:	089b      	lsrs	r3, r3, #2
 800a5e4:	3302      	adds	r3, #2
 800a5e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5ea:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	f003 0303 	and.w	r3, r3, #3
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	220f      	movs	r2, #15
 800a5f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a5fa:	697a      	ldr	r2, [r7, #20]
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	4a4c      	ldr	r2, [pc, #304]	@ (800a734 <HAL_GPIO_DeInit+0x17c>)
 800a604:	4293      	cmp	r3, r2
 800a606:	d01f      	beq.n	800a648 <HAL_GPIO_DeInit+0x90>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a4b      	ldr	r2, [pc, #300]	@ (800a738 <HAL_GPIO_DeInit+0x180>)
 800a60c:	4293      	cmp	r3, r2
 800a60e:	d019      	beq.n	800a644 <HAL_GPIO_DeInit+0x8c>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a4a      	ldr	r2, [pc, #296]	@ (800a73c <HAL_GPIO_DeInit+0x184>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d013      	beq.n	800a640 <HAL_GPIO_DeInit+0x88>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a49      	ldr	r2, [pc, #292]	@ (800a740 <HAL_GPIO_DeInit+0x188>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d00d      	beq.n	800a63c <HAL_GPIO_DeInit+0x84>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	4a48      	ldr	r2, [pc, #288]	@ (800a744 <HAL_GPIO_DeInit+0x18c>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d007      	beq.n	800a638 <HAL_GPIO_DeInit+0x80>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4a47      	ldr	r2, [pc, #284]	@ (800a748 <HAL_GPIO_DeInit+0x190>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d101      	bne.n	800a634 <HAL_GPIO_DeInit+0x7c>
 800a630:	2305      	movs	r3, #5
 800a632:	e00a      	b.n	800a64a <HAL_GPIO_DeInit+0x92>
 800a634:	2306      	movs	r3, #6
 800a636:	e008      	b.n	800a64a <HAL_GPIO_DeInit+0x92>
 800a638:	2304      	movs	r3, #4
 800a63a:	e006      	b.n	800a64a <HAL_GPIO_DeInit+0x92>
 800a63c:	2303      	movs	r3, #3
 800a63e:	e004      	b.n	800a64a <HAL_GPIO_DeInit+0x92>
 800a640:	2302      	movs	r3, #2
 800a642:	e002      	b.n	800a64a <HAL_GPIO_DeInit+0x92>
 800a644:	2301      	movs	r3, #1
 800a646:	e000      	b.n	800a64a <HAL_GPIO_DeInit+0x92>
 800a648:	2300      	movs	r3, #0
 800a64a:	69fa      	ldr	r2, [r7, #28]
 800a64c:	f002 0203 	and.w	r2, r2, #3
 800a650:	0092      	lsls	r2, r2, #2
 800a652:	4093      	lsls	r3, r2
 800a654:	697a      	ldr	r2, [r7, #20]
 800a656:	429a      	cmp	r2, r3
 800a658:	d132      	bne.n	800a6c0 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800a65a:	4b3c      	ldr	r3, [pc, #240]	@ (800a74c <HAL_GPIO_DeInit+0x194>)
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	43db      	mvns	r3, r3
 800a662:	493a      	ldr	r1, [pc, #232]	@ (800a74c <HAL_GPIO_DeInit+0x194>)
 800a664:	4013      	ands	r3, r2
 800a666:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800a668:	4b38      	ldr	r3, [pc, #224]	@ (800a74c <HAL_GPIO_DeInit+0x194>)
 800a66a:	685a      	ldr	r2, [r3, #4]
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	43db      	mvns	r3, r3
 800a670:	4936      	ldr	r1, [pc, #216]	@ (800a74c <HAL_GPIO_DeInit+0x194>)
 800a672:	4013      	ands	r3, r2
 800a674:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800a676:	4b35      	ldr	r3, [pc, #212]	@ (800a74c <HAL_GPIO_DeInit+0x194>)
 800a678:	68da      	ldr	r2, [r3, #12]
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	43db      	mvns	r3, r3
 800a67e:	4933      	ldr	r1, [pc, #204]	@ (800a74c <HAL_GPIO_DeInit+0x194>)
 800a680:	4013      	ands	r3, r2
 800a682:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800a684:	4b31      	ldr	r3, [pc, #196]	@ (800a74c <HAL_GPIO_DeInit+0x194>)
 800a686:	689a      	ldr	r2, [r3, #8]
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	43db      	mvns	r3, r3
 800a68c:	492f      	ldr	r1, [pc, #188]	@ (800a74c <HAL_GPIO_DeInit+0x194>)
 800a68e:	4013      	ands	r3, r2
 800a690:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	f003 0303 	and.w	r3, r3, #3
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	220f      	movs	r2, #15
 800a69c:	fa02 f303 	lsl.w	r3, r2, r3
 800a6a0:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800a6a2:	4a23      	ldr	r2, [pc, #140]	@ (800a730 <HAL_GPIO_DeInit+0x178>)
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	089b      	lsrs	r3, r3, #2
 800a6a8:	3302      	adds	r3, #2
 800a6aa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	43da      	mvns	r2, r3
 800a6b2:	481f      	ldr	r0, [pc, #124]	@ (800a730 <HAL_GPIO_DeInit+0x178>)
 800a6b4:	69fb      	ldr	r3, [r7, #28]
 800a6b6:	089b      	lsrs	r3, r3, #2
 800a6b8:	400a      	ands	r2, r1
 800a6ba:	3302      	adds	r3, #2
 800a6bc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	2bff      	cmp	r3, #255	@ 0xff
 800a6c4:	d801      	bhi.n	800a6ca <HAL_GPIO_DeInit+0x112>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	e001      	b.n	800a6ce <HAL_GPIO_DeInit+0x116>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	3304      	adds	r3, #4
 800a6ce:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a6d0:	69bb      	ldr	r3, [r7, #24]
 800a6d2:	2bff      	cmp	r3, #255	@ 0xff
 800a6d4:	d802      	bhi.n	800a6dc <HAL_GPIO_DeInit+0x124>
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	e002      	b.n	800a6e2 <HAL_GPIO_DeInit+0x12a>
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	3b08      	subs	r3, #8
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	210f      	movs	r1, #15
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a6f0:	43db      	mvns	r3, r3
 800a6f2:	401a      	ands	r2, r3
 800a6f4:	2104      	movs	r1, #4
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	fa01 f303 	lsl.w	r3, r1, r3
 800a6fc:	431a      	orrs	r2, r3
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	68da      	ldr	r2, [r3, #12]
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	43db      	mvns	r3, r3
 800a70a:	401a      	ands	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a710:	69fb      	ldr	r3, [r7, #28]
 800a712:	3301      	adds	r3, #1
 800a714:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800a716:	683a      	ldr	r2, [r7, #0]
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	fa22 f303 	lsr.w	r3, r2, r3
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f47f af52 	bne.w	800a5c8 <HAL_GPIO_DeInit+0x10>
  }
}
 800a724:	bf00      	nop
 800a726:	bf00      	nop
 800a728:	3724      	adds	r7, #36	@ 0x24
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bc80      	pop	{r7}
 800a72e:	4770      	bx	lr
 800a730:	40010000 	.word	0x40010000
 800a734:	40010800 	.word	0x40010800
 800a738:	40010c00 	.word	0x40010c00
 800a73c:	40011000 	.word	0x40011000
 800a740:	40011400 	.word	0x40011400
 800a744:	40011800 	.word	0x40011800
 800a748:	40011c00 	.word	0x40011c00
 800a74c:	40010400 	.word	0x40010400

0800a750 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	460b      	mov	r3, r1
 800a75a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	689a      	ldr	r2, [r3, #8]
 800a760:	887b      	ldrh	r3, [r7, #2]
 800a762:	4013      	ands	r3, r2
 800a764:	2b00      	cmp	r3, #0
 800a766:	d002      	beq.n	800a76e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a768:	2301      	movs	r3, #1
 800a76a:	73fb      	strb	r3, [r7, #15]
 800a76c:	e001      	b.n	800a772 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a76e:	2300      	movs	r3, #0
 800a770:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a772:	7bfb      	ldrb	r3, [r7, #15]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3714      	adds	r7, #20
 800a778:	46bd      	mov	sp, r7
 800a77a:	bc80      	pop	{r7}
 800a77c:	4770      	bx	lr

0800a77e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a77e:	b480      	push	{r7}
 800a780:	b083      	sub	sp, #12
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
 800a786:	460b      	mov	r3, r1
 800a788:	807b      	strh	r3, [r7, #2]
 800a78a:	4613      	mov	r3, r2
 800a78c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a78e:	787b      	ldrb	r3, [r7, #1]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d003      	beq.n	800a79c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a794:	887a      	ldrh	r2, [r7, #2]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a79a:	e003      	b.n	800a7a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a79c:	887b      	ldrh	r3, [r7, #2]
 800a79e:	041a      	lsls	r2, r3, #16
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	611a      	str	r2, [r3, #16]
}
 800a7a4:	bf00      	nop
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bc80      	pop	{r7}
 800a7ac:	4770      	bx	lr

0800a7ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a7ae:	b480      	push	{r7}
 800a7b0:	b085      	sub	sp, #20
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	68db      	ldr	r3, [r3, #12]
 800a7be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a7c0:	887a      	ldrh	r2, [r7, #2]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	4013      	ands	r3, r2
 800a7c6:	041a      	lsls	r2, r3, #16
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	43d9      	mvns	r1, r3
 800a7cc:	887b      	ldrh	r3, [r7, #2]
 800a7ce:	400b      	ands	r3, r1
 800a7d0:	431a      	orrs	r2, r3
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	611a      	str	r2, [r3, #16]
}
 800a7d6:	bf00      	nop
 800a7d8:	3714      	adds	r7, #20
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bc80      	pop	{r7}
 800a7de:	4770      	bx	lr

0800a7e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d101      	bne.n	800a7f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e12b      	b.n	800aa4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d106      	bne.n	800a80c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f7fe fff4 	bl	80097f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2224      	movs	r2, #36	@ 0x24
 800a810:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f022 0201 	bic.w	r2, r2, #1
 800a822:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	681a      	ldr	r2, [r3, #0]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a832:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a842:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a844:	f001 fdb8 	bl	800c3b8 <HAL_RCC_GetPCLK1Freq>
 800a848:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	4a81      	ldr	r2, [pc, #516]	@ (800aa54 <HAL_I2C_Init+0x274>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d807      	bhi.n	800a864 <HAL_I2C_Init+0x84>
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	4a80      	ldr	r2, [pc, #512]	@ (800aa58 <HAL_I2C_Init+0x278>)
 800a858:	4293      	cmp	r3, r2
 800a85a:	bf94      	ite	ls
 800a85c:	2301      	movls	r3, #1
 800a85e:	2300      	movhi	r3, #0
 800a860:	b2db      	uxtb	r3, r3
 800a862:	e006      	b.n	800a872 <HAL_I2C_Init+0x92>
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	4a7d      	ldr	r2, [pc, #500]	@ (800aa5c <HAL_I2C_Init+0x27c>)
 800a868:	4293      	cmp	r3, r2
 800a86a:	bf94      	ite	ls
 800a86c:	2301      	movls	r3, #1
 800a86e:	2300      	movhi	r3, #0
 800a870:	b2db      	uxtb	r3, r3
 800a872:	2b00      	cmp	r3, #0
 800a874:	d001      	beq.n	800a87a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a876:	2301      	movs	r3, #1
 800a878:	e0e7      	b.n	800aa4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	4a78      	ldr	r2, [pc, #480]	@ (800aa60 <HAL_I2C_Init+0x280>)
 800a87e:	fba2 2303 	umull	r2, r3, r2, r3
 800a882:	0c9b      	lsrs	r3, r3, #18
 800a884:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	68ba      	ldr	r2, [r7, #8]
 800a896:	430a      	orrs	r2, r1
 800a898:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	6a1b      	ldr	r3, [r3, #32]
 800a8a0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	4a6a      	ldr	r2, [pc, #424]	@ (800aa54 <HAL_I2C_Init+0x274>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d802      	bhi.n	800a8b4 <HAL_I2C_Init+0xd4>
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	e009      	b.n	800a8c8 <HAL_I2C_Init+0xe8>
 800a8b4:	68bb      	ldr	r3, [r7, #8]
 800a8b6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a8ba:	fb02 f303 	mul.w	r3, r2, r3
 800a8be:	4a69      	ldr	r2, [pc, #420]	@ (800aa64 <HAL_I2C_Init+0x284>)
 800a8c0:	fba2 2303 	umull	r2, r3, r2, r3
 800a8c4:	099b      	lsrs	r3, r3, #6
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	6812      	ldr	r2, [r2, #0]
 800a8cc:	430b      	orrs	r3, r1
 800a8ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	69db      	ldr	r3, [r3, #28]
 800a8d6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a8da:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	495c      	ldr	r1, [pc, #368]	@ (800aa54 <HAL_I2C_Init+0x274>)
 800a8e4:	428b      	cmp	r3, r1
 800a8e6:	d819      	bhi.n	800a91c <HAL_I2C_Init+0x13c>
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	1e59      	subs	r1, r3, #1
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	005b      	lsls	r3, r3, #1
 800a8f2:	fbb1 f3f3 	udiv	r3, r1, r3
 800a8f6:	1c59      	adds	r1, r3, #1
 800a8f8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a8fc:	400b      	ands	r3, r1
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d00a      	beq.n	800a918 <HAL_I2C_Init+0x138>
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	1e59      	subs	r1, r3, #1
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	005b      	lsls	r3, r3, #1
 800a90c:	fbb1 f3f3 	udiv	r3, r1, r3
 800a910:	3301      	adds	r3, #1
 800a912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a916:	e051      	b.n	800a9bc <HAL_I2C_Init+0x1dc>
 800a918:	2304      	movs	r3, #4
 800a91a:	e04f      	b.n	800a9bc <HAL_I2C_Init+0x1dc>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d111      	bne.n	800a948 <HAL_I2C_Init+0x168>
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	1e58      	subs	r0, r3, #1
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6859      	ldr	r1, [r3, #4]
 800a92c:	460b      	mov	r3, r1
 800a92e:	005b      	lsls	r3, r3, #1
 800a930:	440b      	add	r3, r1
 800a932:	fbb0 f3f3 	udiv	r3, r0, r3
 800a936:	3301      	adds	r3, #1
 800a938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	bf0c      	ite	eq
 800a940:	2301      	moveq	r3, #1
 800a942:	2300      	movne	r3, #0
 800a944:	b2db      	uxtb	r3, r3
 800a946:	e012      	b.n	800a96e <HAL_I2C_Init+0x18e>
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	1e58      	subs	r0, r3, #1
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6859      	ldr	r1, [r3, #4]
 800a950:	460b      	mov	r3, r1
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	440b      	add	r3, r1
 800a956:	0099      	lsls	r1, r3, #2
 800a958:	440b      	add	r3, r1
 800a95a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a95e:	3301      	adds	r3, #1
 800a960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a964:	2b00      	cmp	r3, #0
 800a966:	bf0c      	ite	eq
 800a968:	2301      	moveq	r3, #1
 800a96a:	2300      	movne	r3, #0
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d001      	beq.n	800a976 <HAL_I2C_Init+0x196>
 800a972:	2301      	movs	r3, #1
 800a974:	e022      	b.n	800a9bc <HAL_I2C_Init+0x1dc>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d10e      	bne.n	800a99c <HAL_I2C_Init+0x1bc>
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	1e58      	subs	r0, r3, #1
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6859      	ldr	r1, [r3, #4]
 800a986:	460b      	mov	r3, r1
 800a988:	005b      	lsls	r3, r3, #1
 800a98a:	440b      	add	r3, r1
 800a98c:	fbb0 f3f3 	udiv	r3, r0, r3
 800a990:	3301      	adds	r3, #1
 800a992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a996:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a99a:	e00f      	b.n	800a9bc <HAL_I2C_Init+0x1dc>
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	1e58      	subs	r0, r3, #1
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6859      	ldr	r1, [r3, #4]
 800a9a4:	460b      	mov	r3, r1
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	440b      	add	r3, r1
 800a9aa:	0099      	lsls	r1, r3, #2
 800a9ac:	440b      	add	r3, r1
 800a9ae:	fbb0 f3f3 	udiv	r3, r0, r3
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a9b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a9bc:	6879      	ldr	r1, [r7, #4]
 800a9be:	6809      	ldr	r1, [r1, #0]
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	69da      	ldr	r2, [r3, #28]
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6a1b      	ldr	r3, [r3, #32]
 800a9d6:	431a      	orrs	r2, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	430a      	orrs	r2, r1
 800a9de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	689b      	ldr	r3, [r3, #8]
 800a9e6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a9ea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	6911      	ldr	r1, [r2, #16]
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	68d2      	ldr	r2, [r2, #12]
 800a9f6:	4311      	orrs	r1, r2
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	6812      	ldr	r2, [r2, #0]
 800a9fc:	430b      	orrs	r3, r1
 800a9fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	695a      	ldr	r2, [r3, #20]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	699b      	ldr	r3, [r3, #24]
 800aa12:	431a      	orrs	r2, r3
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	430a      	orrs	r2, r1
 800aa1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	681a      	ldr	r2, [r3, #0]
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f042 0201 	orr.w	r2, r2, #1
 800aa2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2220      	movs	r2, #32
 800aa36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800aa48:	2300      	movs	r3, #0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	000186a0 	.word	0x000186a0
 800aa58:	001e847f 	.word	0x001e847f
 800aa5c:	003d08ff 	.word	0x003d08ff
 800aa60:	431bde83 	.word	0x431bde83
 800aa64:	10624dd3 	.word	0x10624dd3

0800aa68 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d101      	bne.n	800aa7a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	e021      	b.n	800aabe <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2224      	movs	r2, #36	@ 0x24
 800aa7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	681a      	ldr	r2, [r3, #0]
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f022 0201 	bic.w	r2, r2, #1
 800aa90:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f7fe feec 	bl	8009870 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3708      	adds	r7, #8
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
	...

0800aac8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b088      	sub	sp, #32
 800aacc:	af02      	add	r7, sp, #8
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	607a      	str	r2, [r7, #4]
 800aad2:	461a      	mov	r2, r3
 800aad4:	460b      	mov	r3, r1
 800aad6:	817b      	strh	r3, [r7, #10]
 800aad8:	4613      	mov	r3, r2
 800aada:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800aadc:	f7ff f85e 	bl	8009b9c <HAL_GetTick>
 800aae0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aae8:	b2db      	uxtb	r3, r3
 800aaea:	2b20      	cmp	r3, #32
 800aaec:	f040 80e0 	bne.w	800acb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	9300      	str	r3, [sp, #0]
 800aaf4:	2319      	movs	r3, #25
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	4970      	ldr	r1, [pc, #448]	@ (800acbc <HAL_I2C_Master_Transmit+0x1f4>)
 800aafa:	68f8      	ldr	r0, [r7, #12]
 800aafc:	f000 fe5c 	bl	800b7b8 <I2C_WaitOnFlagUntilTimeout>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d001      	beq.n	800ab0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800ab06:	2302      	movs	r3, #2
 800ab08:	e0d3      	b.n	800acb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d101      	bne.n	800ab18 <HAL_I2C_Master_Transmit+0x50>
 800ab14:	2302      	movs	r3, #2
 800ab16:	e0cc      	b.n	800acb2 <HAL_I2C_Master_Transmit+0x1ea>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2201      	movs	r2, #1
 800ab1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f003 0301 	and.w	r3, r3, #1
 800ab2a:	2b01      	cmp	r3, #1
 800ab2c:	d007      	beq.n	800ab3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f042 0201 	orr.w	r2, r2, #1
 800ab3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ab4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2221      	movs	r2, #33	@ 0x21
 800ab52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2210      	movs	r2, #16
 800ab5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2200      	movs	r2, #0
 800ab62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	893a      	ldrh	r2, [r7, #8]
 800ab6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab74:	b29a      	uxth	r2, r3
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	4a50      	ldr	r2, [pc, #320]	@ (800acc0 <HAL_I2C_Master_Transmit+0x1f8>)
 800ab7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800ab80:	8979      	ldrh	r1, [r7, #10]
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	6a3a      	ldr	r2, [r7, #32]
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f000 fc16 	bl	800b3b8 <I2C_MasterRequestWrite>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d001      	beq.n	800ab96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800ab92:	2301      	movs	r3, #1
 800ab94:	e08d      	b.n	800acb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab96:	2300      	movs	r3, #0
 800ab98:	613b      	str	r3, [r7, #16]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	695b      	ldr	r3, [r3, #20]
 800aba0:	613b      	str	r3, [r7, #16]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	699b      	ldr	r3, [r3, #24]
 800aba8:	613b      	str	r3, [r7, #16]
 800abaa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800abac:	e066      	b.n	800ac7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800abae:	697a      	ldr	r2, [r7, #20]
 800abb0:	6a39      	ldr	r1, [r7, #32]
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	f000 ff1a 	bl	800b9ec <I2C_WaitOnTXEFlagUntilTimeout>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00d      	beq.n	800abda <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abc2:	2b04      	cmp	r3, #4
 800abc4:	d107      	bne.n	800abd6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800abd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800abd6:	2301      	movs	r3, #1
 800abd8:	e06b      	b.n	800acb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abde:	781a      	ldrb	r2, [r3, #0]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abea:	1c5a      	adds	r2, r3, #1
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	3b01      	subs	r3, #1
 800abf8:	b29a      	uxth	r2, r3
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac02:	3b01      	subs	r3, #1
 800ac04:	b29a      	uxth	r2, r3
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	695b      	ldr	r3, [r3, #20]
 800ac10:	f003 0304 	and.w	r3, r3, #4
 800ac14:	2b04      	cmp	r3, #4
 800ac16:	d11b      	bne.n	800ac50 <HAL_I2C_Master_Transmit+0x188>
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d017      	beq.n	800ac50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac24:	781a      	ldrb	r2, [r3, #0]
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac30:	1c5a      	adds	r2, r3, #1
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	3b01      	subs	r3, #1
 800ac3e:	b29a      	uxth	r2, r3
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	b29a      	uxth	r2, r3
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac50:	697a      	ldr	r2, [r7, #20]
 800ac52:	6a39      	ldr	r1, [r7, #32]
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	f000 ff11 	bl	800ba7c <I2C_WaitOnBTFFlagUntilTimeout>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00d      	beq.n	800ac7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac64:	2b04      	cmp	r3, #4
 800ac66:	d107      	bne.n	800ac78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	e01a      	b.n	800acb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d194      	bne.n	800abae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	2220      	movs	r2, #32
 800ac98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2200      	movs	r2, #0
 800aca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800acac:	2300      	movs	r3, #0
 800acae:	e000      	b.n	800acb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800acb0:	2302      	movs	r3, #2
  }
}
 800acb2:	4618      	mov	r0, r3
 800acb4:	3718      	adds	r7, #24
 800acb6:	46bd      	mov	sp, r7
 800acb8:	bd80      	pop	{r7, pc}
 800acba:	bf00      	nop
 800acbc:	00100002 	.word	0x00100002
 800acc0:	ffff0000 	.word	0xffff0000

0800acc4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b088      	sub	sp, #32
 800acc8:	af02      	add	r7, sp, #8
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	4608      	mov	r0, r1
 800acce:	4611      	mov	r1, r2
 800acd0:	461a      	mov	r2, r3
 800acd2:	4603      	mov	r3, r0
 800acd4:	817b      	strh	r3, [r7, #10]
 800acd6:	460b      	mov	r3, r1
 800acd8:	813b      	strh	r3, [r7, #8]
 800acda:	4613      	mov	r3, r2
 800acdc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800acde:	f7fe ff5d 	bl	8009b9c <HAL_GetTick>
 800ace2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800acea:	b2db      	uxtb	r3, r3
 800acec:	2b20      	cmp	r3, #32
 800acee:	f040 80d9 	bne.w	800aea4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	2319      	movs	r3, #25
 800acf8:	2201      	movs	r2, #1
 800acfa:	496d      	ldr	r1, [pc, #436]	@ (800aeb0 <HAL_I2C_Mem_Write+0x1ec>)
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f000 fd5b 	bl	800b7b8 <I2C_WaitOnFlagUntilTimeout>
 800ad02:	4603      	mov	r3, r0
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d001      	beq.n	800ad0c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800ad08:	2302      	movs	r3, #2
 800ad0a:	e0cc      	b.n	800aea6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	d101      	bne.n	800ad1a <HAL_I2C_Mem_Write+0x56>
 800ad16:	2302      	movs	r3, #2
 800ad18:	e0c5      	b.n	800aea6 <HAL_I2C_Mem_Write+0x1e2>
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f003 0301 	and.w	r3, r3, #1
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d007      	beq.n	800ad40 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f042 0201 	orr.w	r2, r2, #1
 800ad3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ad4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2221      	movs	r2, #33	@ 0x21
 800ad54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2240      	movs	r2, #64	@ 0x40
 800ad5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2200      	movs	r2, #0
 800ad64:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	6a3a      	ldr	r2, [r7, #32]
 800ad6a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ad70:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad76:	b29a      	uxth	r2, r3
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	4a4d      	ldr	r2, [pc, #308]	@ (800aeb4 <HAL_I2C_Mem_Write+0x1f0>)
 800ad80:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ad82:	88f8      	ldrh	r0, [r7, #6]
 800ad84:	893a      	ldrh	r2, [r7, #8]
 800ad86:	8979      	ldrh	r1, [r7, #10]
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	9301      	str	r3, [sp, #4]
 800ad8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	4603      	mov	r3, r0
 800ad92:	68f8      	ldr	r0, [r7, #12]
 800ad94:	f000 fb92 	bl	800b4bc <I2C_RequestMemoryWrite>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d052      	beq.n	800ae44 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e081      	b.n	800aea6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ada2:	697a      	ldr	r2, [r7, #20]
 800ada4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ada6:	68f8      	ldr	r0, [r7, #12]
 800ada8:	f000 fe20 	bl	800b9ec <I2C_WaitOnTXEFlagUntilTimeout>
 800adac:	4603      	mov	r3, r0
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00d      	beq.n	800adce <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adb6:	2b04      	cmp	r3, #4
 800adb8:	d107      	bne.n	800adca <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	681a      	ldr	r2, [r3, #0]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800adc8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800adca:	2301      	movs	r3, #1
 800adcc:	e06b      	b.n	800aea6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800add2:	781a      	ldrb	r2, [r3, #0]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adde:	1c5a      	adds	r2, r3, #1
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ade8:	3b01      	subs	r3, #1
 800adea:	b29a      	uxth	r2, r3
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	3b01      	subs	r3, #1
 800adf8:	b29a      	uxth	r2, r3
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	695b      	ldr	r3, [r3, #20]
 800ae04:	f003 0304 	and.w	r3, r3, #4
 800ae08:	2b04      	cmp	r3, #4
 800ae0a:	d11b      	bne.n	800ae44 <HAL_I2C_Mem_Write+0x180>
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d017      	beq.n	800ae44 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae18:	781a      	ldrb	r2, [r3, #0]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae24:	1c5a      	adds	r2, r3, #1
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae2e:	3b01      	subs	r3, #1
 800ae30:	b29a      	uxth	r2, r3
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	3b01      	subs	r3, #1
 800ae3e:	b29a      	uxth	r2, r3
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1aa      	bne.n	800ada2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae4c:	697a      	ldr	r2, [r7, #20]
 800ae4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae50:	68f8      	ldr	r0, [r7, #12]
 800ae52:	f000 fe13 	bl	800ba7c <I2C_WaitOnBTFFlagUntilTimeout>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d00d      	beq.n	800ae78 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae60:	2b04      	cmp	r3, #4
 800ae62:	d107      	bne.n	800ae74 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae72:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ae74:	2301      	movs	r3, #1
 800ae76:	e016      	b.n	800aea6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	2220      	movs	r2, #32
 800ae8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2200      	movs	r2, #0
 800ae94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800aea0:	2300      	movs	r3, #0
 800aea2:	e000      	b.n	800aea6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800aea4:	2302      	movs	r3, #2
  }
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3718      	adds	r7, #24
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	00100002 	.word	0x00100002
 800aeb4:	ffff0000 	.word	0xffff0000

0800aeb8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b08c      	sub	sp, #48	@ 0x30
 800aebc:	af02      	add	r7, sp, #8
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	4608      	mov	r0, r1
 800aec2:	4611      	mov	r1, r2
 800aec4:	461a      	mov	r2, r3
 800aec6:	4603      	mov	r3, r0
 800aec8:	817b      	strh	r3, [r7, #10]
 800aeca:	460b      	mov	r3, r1
 800aecc:	813b      	strh	r3, [r7, #8]
 800aece:	4613      	mov	r3, r2
 800aed0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800aed2:	2300      	movs	r3, #0
 800aed4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800aed6:	f7fe fe61 	bl	8009b9c <HAL_GetTick>
 800aeda:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	2b20      	cmp	r3, #32
 800aee6:	f040 8244 	bne.w	800b372 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aeea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeec:	9300      	str	r3, [sp, #0]
 800aeee:	2319      	movs	r3, #25
 800aef0:	2201      	movs	r2, #1
 800aef2:	4982      	ldr	r1, [pc, #520]	@ (800b0fc <HAL_I2C_Mem_Read+0x244>)
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	f000 fc5f 	bl	800b7b8 <I2C_WaitOnFlagUntilTimeout>
 800aefa:	4603      	mov	r3, r0
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d001      	beq.n	800af04 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800af00:	2302      	movs	r3, #2
 800af02:	e237      	b.n	800b374 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d101      	bne.n	800af12 <HAL_I2C_Mem_Read+0x5a>
 800af0e:	2302      	movs	r3, #2
 800af10:	e230      	b.n	800b374 <HAL_I2C_Mem_Read+0x4bc>
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2201      	movs	r2, #1
 800af16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	f003 0301 	and.w	r3, r3, #1
 800af24:	2b01      	cmp	r3, #1
 800af26:	d007      	beq.n	800af38 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	681a      	ldr	r2, [r3, #0]
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f042 0201 	orr.w	r2, r2, #1
 800af36:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800af46:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2222      	movs	r2, #34	@ 0x22
 800af4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2240      	movs	r2, #64	@ 0x40
 800af54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	2200      	movs	r2, #0
 800af5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af62:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800af68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af6e:	b29a      	uxth	r2, r3
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	4a62      	ldr	r2, [pc, #392]	@ (800b100 <HAL_I2C_Mem_Read+0x248>)
 800af78:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800af7a:	88f8      	ldrh	r0, [r7, #6]
 800af7c:	893a      	ldrh	r2, [r7, #8]
 800af7e:	8979      	ldrh	r1, [r7, #10]
 800af80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af82:	9301      	str	r3, [sp, #4]
 800af84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	4603      	mov	r3, r0
 800af8a:	68f8      	ldr	r0, [r7, #12]
 800af8c:	f000 fb2c 	bl	800b5e8 <I2C_RequestMemoryRead>
 800af90:	4603      	mov	r3, r0
 800af92:	2b00      	cmp	r3, #0
 800af94:	d001      	beq.n	800af9a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800af96:	2301      	movs	r3, #1
 800af98:	e1ec      	b.n	800b374 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d113      	bne.n	800afca <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800afa2:	2300      	movs	r3, #0
 800afa4:	61fb      	str	r3, [r7, #28]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	695b      	ldr	r3, [r3, #20]
 800afac:	61fb      	str	r3, [r7, #28]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	699b      	ldr	r3, [r3, #24]
 800afb4:	61fb      	str	r3, [r7, #28]
 800afb6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	681a      	ldr	r2, [r3, #0]
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800afc6:	601a      	str	r2, [r3, #0]
 800afc8:	e1c0      	b.n	800b34c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d11e      	bne.n	800b010 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	681a      	ldr	r2, [r3, #0]
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800afe0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800afe2:	b672      	cpsid	i
}
 800afe4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800afe6:	2300      	movs	r3, #0
 800afe8:	61bb      	str	r3, [r7, #24]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	695b      	ldr	r3, [r3, #20]
 800aff0:	61bb      	str	r3, [r7, #24]
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	699b      	ldr	r3, [r3, #24]
 800aff8:	61bb      	str	r3, [r7, #24]
 800affa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b00a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b00c:	b662      	cpsie	i
}
 800b00e:	e035      	b.n	800b07c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b014:	2b02      	cmp	r3, #2
 800b016:	d11e      	bne.n	800b056 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b026:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b028:	b672      	cpsid	i
}
 800b02a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b02c:	2300      	movs	r3, #0
 800b02e:	617b      	str	r3, [r7, #20]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	695b      	ldr	r3, [r3, #20]
 800b036:	617b      	str	r3, [r7, #20]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	699b      	ldr	r3, [r3, #24]
 800b03e:	617b      	str	r3, [r7, #20]
 800b040:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b050:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800b052:	b662      	cpsie	i
}
 800b054:	e012      	b.n	800b07c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b064:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b066:	2300      	movs	r3, #0
 800b068:	613b      	str	r3, [r7, #16]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	695b      	ldr	r3, [r3, #20]
 800b070:	613b      	str	r3, [r7, #16]
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	699b      	ldr	r3, [r3, #24]
 800b078:	613b      	str	r3, [r7, #16]
 800b07a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800b07c:	e166      	b.n	800b34c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b082:	2b03      	cmp	r3, #3
 800b084:	f200 811f 	bhi.w	800b2c6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d123      	bne.n	800b0d8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b090:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b092:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b094:	68f8      	ldr	r0, [r7, #12]
 800b096:	f000 fd39 	bl	800bb0c <I2C_WaitOnRXNEFlagUntilTimeout>
 800b09a:	4603      	mov	r3, r0
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d001      	beq.n	800b0a4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	e167      	b.n	800b374 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	691a      	ldr	r2, [r3, #16]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ae:	b2d2      	uxtb	r2, r2
 800b0b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0b6:	1c5a      	adds	r2, r3, #1
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0c0:	3b01      	subs	r3, #1
 800b0c2:	b29a      	uxth	r2, r3
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	b29a      	uxth	r2, r3
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b0d6:	e139      	b.n	800b34c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d152      	bne.n	800b186 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0e2:	9300      	str	r3, [sp, #0]
 800b0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	4906      	ldr	r1, [pc, #24]	@ (800b104 <HAL_I2C_Mem_Read+0x24c>)
 800b0ea:	68f8      	ldr	r0, [r7, #12]
 800b0ec:	f000 fb64 	bl	800b7b8 <I2C_WaitOnFlagUntilTimeout>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d008      	beq.n	800b108 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e13c      	b.n	800b374 <HAL_I2C_Mem_Read+0x4bc>
 800b0fa:	bf00      	nop
 800b0fc:	00100002 	.word	0x00100002
 800b100:	ffff0000 	.word	0xffff0000
 800b104:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800b108:	b672      	cpsid	i
}
 800b10a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b11a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	691a      	ldr	r2, [r3, #16]
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b126:	b2d2      	uxtb	r2, r2
 800b128:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b12e:	1c5a      	adds	r2, r3, #1
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b138:	3b01      	subs	r3, #1
 800b13a:	b29a      	uxth	r2, r3
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b144:	b29b      	uxth	r3, r3
 800b146:	3b01      	subs	r3, #1
 800b148:	b29a      	uxth	r2, r3
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b14e:	b662      	cpsie	i
}
 800b150:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	691a      	ldr	r2, [r3, #16]
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b15c:	b2d2      	uxtb	r2, r2
 800b15e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b164:	1c5a      	adds	r2, r3, #1
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b16e:	3b01      	subs	r3, #1
 800b170:	b29a      	uxth	r2, r3
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	3b01      	subs	r3, #1
 800b17e:	b29a      	uxth	r2, r3
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b184:	e0e2      	b.n	800b34c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b188:	9300      	str	r3, [sp, #0]
 800b18a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b18c:	2200      	movs	r2, #0
 800b18e:	497b      	ldr	r1, [pc, #492]	@ (800b37c <HAL_I2C_Mem_Read+0x4c4>)
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	f000 fb11 	bl	800b7b8 <I2C_WaitOnFlagUntilTimeout>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d001      	beq.n	800b1a0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	e0e9      	b.n	800b374 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b1ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b1b0:	b672      	cpsid	i
}
 800b1b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	691a      	ldr	r2, [r3, #16]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1be:	b2d2      	uxtb	r2, r2
 800b1c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1c6:	1c5a      	adds	r2, r3, #1
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	b29a      	uxth	r2, r3
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	3b01      	subs	r3, #1
 800b1e0:	b29a      	uxth	r2, r3
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b1e6:	4b66      	ldr	r3, [pc, #408]	@ (800b380 <HAL_I2C_Mem_Read+0x4c8>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	08db      	lsrs	r3, r3, #3
 800b1ec:	4a65      	ldr	r2, [pc, #404]	@ (800b384 <HAL_I2C_Mem_Read+0x4cc>)
 800b1ee:	fba2 2303 	umull	r2, r3, r2, r3
 800b1f2:	0a1a      	lsrs	r2, r3, #8
 800b1f4:	4613      	mov	r3, r2
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	4413      	add	r3, r2
 800b1fa:	00da      	lsls	r2, r3, #3
 800b1fc:	1ad3      	subs	r3, r2, r3
 800b1fe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800b200:	6a3b      	ldr	r3, [r7, #32]
 800b202:	3b01      	subs	r3, #1
 800b204:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800b206:	6a3b      	ldr	r3, [r7, #32]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d118      	bne.n	800b23e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	2200      	movs	r2, #0
 800b210:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	2220      	movs	r2, #32
 800b216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	2200      	movs	r2, #0
 800b21e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b226:	f043 0220 	orr.w	r2, r3, #32
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800b22e:	b662      	cpsie	i
}
 800b230:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2200      	movs	r2, #0
 800b236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800b23a:	2301      	movs	r3, #1
 800b23c:	e09a      	b.n	800b374 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	695b      	ldr	r3, [r3, #20]
 800b244:	f003 0304 	and.w	r3, r3, #4
 800b248:	2b04      	cmp	r3, #4
 800b24a:	d1d9      	bne.n	800b200 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b25a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	691a      	ldr	r2, [r3, #16]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b266:	b2d2      	uxtb	r2, r2
 800b268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b26e:	1c5a      	adds	r2, r3, #1
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b278:	3b01      	subs	r3, #1
 800b27a:	b29a      	uxth	r2, r3
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b284:	b29b      	uxth	r3, r3
 800b286:	3b01      	subs	r3, #1
 800b288:	b29a      	uxth	r2, r3
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b28e:	b662      	cpsie	i
}
 800b290:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	691a      	ldr	r2, [r3, #16]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b29c:	b2d2      	uxtb	r2, r2
 800b29e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2a4:	1c5a      	adds	r2, r3, #1
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2ae:	3b01      	subs	r3, #1
 800b2b0:	b29a      	uxth	r2, r3
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2ba:	b29b      	uxth	r3, r3
 800b2bc:	3b01      	subs	r3, #1
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b2c4:	e042      	b.n	800b34c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b2c8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	f000 fc1e 	bl	800bb0c <I2C_WaitOnRXNEFlagUntilTimeout>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d001      	beq.n	800b2da <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e04c      	b.n	800b374 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	691a      	ldr	r2, [r3, #16]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2e4:	b2d2      	uxtb	r2, r2
 800b2e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2ec:	1c5a      	adds	r2, r3, #1
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	b29a      	uxth	r2, r3
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b302:	b29b      	uxth	r3, r3
 800b304:	3b01      	subs	r3, #1
 800b306:	b29a      	uxth	r2, r3
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	695b      	ldr	r3, [r3, #20]
 800b312:	f003 0304 	and.w	r3, r3, #4
 800b316:	2b04      	cmp	r3, #4
 800b318:	d118      	bne.n	800b34c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	691a      	ldr	r2, [r3, #16]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b324:	b2d2      	uxtb	r2, r2
 800b326:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b32c:	1c5a      	adds	r2, r3, #1
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b336:	3b01      	subs	r3, #1
 800b338:	b29a      	uxth	r2, r3
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b342:	b29b      	uxth	r3, r3
 800b344:	3b01      	subs	r3, #1
 800b346:	b29a      	uxth	r2, r3
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b350:	2b00      	cmp	r3, #0
 800b352:	f47f ae94 	bne.w	800b07e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2220      	movs	r2, #32
 800b35a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2200      	movs	r2, #0
 800b362:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2200      	movs	r2, #0
 800b36a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b36e:	2300      	movs	r3, #0
 800b370:	e000      	b.n	800b374 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800b372:	2302      	movs	r3, #2
  }
}
 800b374:	4618      	mov	r0, r3
 800b376:	3728      	adds	r7, #40	@ 0x28
 800b378:	46bd      	mov	sp, r7
 800b37a:	bd80      	pop	{r7, pc}
 800b37c:	00010004 	.word	0x00010004
 800b380:	20000f74 	.word	0x20000f74
 800b384:	14f8b589 	.word	0x14f8b589

0800b388 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b396:	b2db      	uxtb	r3, r3
}
 800b398:	4618      	mov	r0, r3
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bc80      	pop	{r7}
 800b3a0:	4770      	bx	lr

0800b3a2 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b083      	sub	sp, #12
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	370c      	adds	r7, #12
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bc80      	pop	{r7}
 800b3b6:	4770      	bx	lr

0800b3b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b088      	sub	sp, #32
 800b3bc:	af02      	add	r7, sp, #8
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	607a      	str	r2, [r7, #4]
 800b3c2:	603b      	str	r3, [r7, #0]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	2b08      	cmp	r3, #8
 800b3d2:	d006      	beq.n	800b3e2 <I2C_MasterRequestWrite+0x2a>
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	2b01      	cmp	r3, #1
 800b3d8:	d003      	beq.n	800b3e2 <I2C_MasterRequestWrite+0x2a>
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b3e0:	d108      	bne.n	800b3f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	681a      	ldr	r2, [r3, #0]
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b3f0:	601a      	str	r2, [r3, #0]
 800b3f2:	e00b      	b.n	800b40c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b3f8:	2b12      	cmp	r3, #18
 800b3fa:	d107      	bne.n	800b40c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	681a      	ldr	r2, [r3, #0]
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b40a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	9300      	str	r3, [sp, #0]
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b418:	68f8      	ldr	r0, [r7, #12]
 800b41a:	f000 f9cd 	bl	800b7b8 <I2C_WaitOnFlagUntilTimeout>
 800b41e:	4603      	mov	r3, r0
 800b420:	2b00      	cmp	r3, #0
 800b422:	d00d      	beq.n	800b440 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b42e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b432:	d103      	bne.n	800b43c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b43a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b43c:	2303      	movs	r3, #3
 800b43e:	e035      	b.n	800b4ac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	691b      	ldr	r3, [r3, #16]
 800b444:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b448:	d108      	bne.n	800b45c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b44a:	897b      	ldrh	r3, [r7, #10]
 800b44c:	b2db      	uxtb	r3, r3
 800b44e:	461a      	mov	r2, r3
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b458:	611a      	str	r2, [r3, #16]
 800b45a:	e01b      	b.n	800b494 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b45c:	897b      	ldrh	r3, [r7, #10]
 800b45e:	11db      	asrs	r3, r3, #7
 800b460:	b2db      	uxtb	r3, r3
 800b462:	f003 0306 	and.w	r3, r3, #6
 800b466:	b2db      	uxtb	r3, r3
 800b468:	f063 030f 	orn	r3, r3, #15
 800b46c:	b2da      	uxtb	r2, r3
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	490e      	ldr	r1, [pc, #56]	@ (800b4b4 <I2C_MasterRequestWrite+0xfc>)
 800b47a:	68f8      	ldr	r0, [r7, #12]
 800b47c:	f000 fa16 	bl	800b8ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b480:	4603      	mov	r3, r0
 800b482:	2b00      	cmp	r3, #0
 800b484:	d001      	beq.n	800b48a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b486:	2301      	movs	r3, #1
 800b488:	e010      	b.n	800b4ac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b48a:	897b      	ldrh	r3, [r7, #10]
 800b48c:	b2da      	uxtb	r2, r3
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	687a      	ldr	r2, [r7, #4]
 800b498:	4907      	ldr	r1, [pc, #28]	@ (800b4b8 <I2C_MasterRequestWrite+0x100>)
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	f000 fa06 	bl	800b8ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d001      	beq.n	800b4aa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e000      	b.n	800b4ac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b4aa:	2300      	movs	r3, #0
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3718      	adds	r7, #24
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}
 800b4b4:	00010008 	.word	0x00010008
 800b4b8:	00010002 	.word	0x00010002

0800b4bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b088      	sub	sp, #32
 800b4c0:	af02      	add	r7, sp, #8
 800b4c2:	60f8      	str	r0, [r7, #12]
 800b4c4:	4608      	mov	r0, r1
 800b4c6:	4611      	mov	r1, r2
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	817b      	strh	r3, [r7, #10]
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	813b      	strh	r3, [r7, #8]
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	681a      	ldr	r2, [r3, #0]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b4e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e8:	9300      	str	r3, [sp, #0]
 800b4ea:	6a3b      	ldr	r3, [r7, #32]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b4f2:	68f8      	ldr	r0, [r7, #12]
 800b4f4:	f000 f960 	bl	800b7b8 <I2C_WaitOnFlagUntilTimeout>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00d      	beq.n	800b51a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b508:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b50c:	d103      	bne.n	800b516 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b514:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b516:	2303      	movs	r3, #3
 800b518:	e05f      	b.n	800b5da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b51a:	897b      	ldrh	r3, [r7, #10]
 800b51c:	b2db      	uxtb	r3, r3
 800b51e:	461a      	mov	r2, r3
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b528:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b52c:	6a3a      	ldr	r2, [r7, #32]
 800b52e:	492d      	ldr	r1, [pc, #180]	@ (800b5e4 <I2C_RequestMemoryWrite+0x128>)
 800b530:	68f8      	ldr	r0, [r7, #12]
 800b532:	f000 f9bb 	bl	800b8ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b536:	4603      	mov	r3, r0
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d001      	beq.n	800b540 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b53c:	2301      	movs	r3, #1
 800b53e:	e04c      	b.n	800b5da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b540:	2300      	movs	r3, #0
 800b542:	617b      	str	r3, [r7, #20]
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	695b      	ldr	r3, [r3, #20]
 800b54a:	617b      	str	r3, [r7, #20]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	699b      	ldr	r3, [r3, #24]
 800b552:	617b      	str	r3, [r7, #20]
 800b554:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b558:	6a39      	ldr	r1, [r7, #32]
 800b55a:	68f8      	ldr	r0, [r7, #12]
 800b55c:	f000 fa46 	bl	800b9ec <I2C_WaitOnTXEFlagUntilTimeout>
 800b560:	4603      	mov	r3, r0
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00d      	beq.n	800b582 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b56a:	2b04      	cmp	r3, #4
 800b56c:	d107      	bne.n	800b57e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	681a      	ldr	r2, [r3, #0]
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b57c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	e02b      	b.n	800b5da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b582:	88fb      	ldrh	r3, [r7, #6]
 800b584:	2b01      	cmp	r3, #1
 800b586:	d105      	bne.n	800b594 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b588:	893b      	ldrh	r3, [r7, #8]
 800b58a:	b2da      	uxtb	r2, r3
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	611a      	str	r2, [r3, #16]
 800b592:	e021      	b.n	800b5d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b594:	893b      	ldrh	r3, [r7, #8]
 800b596:	0a1b      	lsrs	r3, r3, #8
 800b598:	b29b      	uxth	r3, r3
 800b59a:	b2da      	uxtb	r2, r3
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b5a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5a4:	6a39      	ldr	r1, [r7, #32]
 800b5a6:	68f8      	ldr	r0, [r7, #12]
 800b5a8:	f000 fa20 	bl	800b9ec <I2C_WaitOnTXEFlagUntilTimeout>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d00d      	beq.n	800b5ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5b6:	2b04      	cmp	r3, #4
 800b5b8:	d107      	bne.n	800b5ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	681a      	ldr	r2, [r3, #0]
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b5c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e005      	b.n	800b5da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b5ce:	893b      	ldrh	r3, [r7, #8]
 800b5d0:	b2da      	uxtb	r2, r3
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3718      	adds	r7, #24
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	00010002 	.word	0x00010002

0800b5e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b088      	sub	sp, #32
 800b5ec:	af02      	add	r7, sp, #8
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	4608      	mov	r0, r1
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	817b      	strh	r3, [r7, #10]
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	813b      	strh	r3, [r7, #8]
 800b5fe:	4613      	mov	r3, r2
 800b600:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b610:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b620:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	6a3b      	ldr	r3, [r7, #32]
 800b628:	2200      	movs	r2, #0
 800b62a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b62e:	68f8      	ldr	r0, [r7, #12]
 800b630:	f000 f8c2 	bl	800b7b8 <I2C_WaitOnFlagUntilTimeout>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00d      	beq.n	800b656 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b644:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b648:	d103      	bne.n	800b652 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b650:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b652:	2303      	movs	r3, #3
 800b654:	e0aa      	b.n	800b7ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b656:	897b      	ldrh	r3, [r7, #10]
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	461a      	mov	r2, r3
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b664:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b668:	6a3a      	ldr	r2, [r7, #32]
 800b66a:	4952      	ldr	r1, [pc, #328]	@ (800b7b4 <I2C_RequestMemoryRead+0x1cc>)
 800b66c:	68f8      	ldr	r0, [r7, #12]
 800b66e:	f000 f91d 	bl	800b8ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d001      	beq.n	800b67c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b678:	2301      	movs	r3, #1
 800b67a:	e097      	b.n	800b7ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b67c:	2300      	movs	r3, #0
 800b67e:	617b      	str	r3, [r7, #20]
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	695b      	ldr	r3, [r3, #20]
 800b686:	617b      	str	r3, [r7, #20]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	699b      	ldr	r3, [r3, #24]
 800b68e:	617b      	str	r3, [r7, #20]
 800b690:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b694:	6a39      	ldr	r1, [r7, #32]
 800b696:	68f8      	ldr	r0, [r7, #12]
 800b698:	f000 f9a8 	bl	800b9ec <I2C_WaitOnTXEFlagUntilTimeout>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d00d      	beq.n	800b6be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6a6:	2b04      	cmp	r3, #4
 800b6a8:	d107      	bne.n	800b6ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	681a      	ldr	r2, [r3, #0]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b6b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	e076      	b.n	800b7ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b6be:	88fb      	ldrh	r3, [r7, #6]
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d105      	bne.n	800b6d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b6c4:	893b      	ldrh	r3, [r7, #8]
 800b6c6:	b2da      	uxtb	r2, r3
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	611a      	str	r2, [r3, #16]
 800b6ce:	e021      	b.n	800b714 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b6d0:	893b      	ldrh	r3, [r7, #8]
 800b6d2:	0a1b      	lsrs	r3, r3, #8
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	b2da      	uxtb	r2, r3
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b6e0:	6a39      	ldr	r1, [r7, #32]
 800b6e2:	68f8      	ldr	r0, [r7, #12]
 800b6e4:	f000 f982 	bl	800b9ec <I2C_WaitOnTXEFlagUntilTimeout>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00d      	beq.n	800b70a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6f2:	2b04      	cmp	r3, #4
 800b6f4:	d107      	bne.n	800b706 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	681a      	ldr	r2, [r3, #0]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b704:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	e050      	b.n	800b7ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b70a:	893b      	ldrh	r3, [r7, #8]
 800b70c:	b2da      	uxtb	r2, r3
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b716:	6a39      	ldr	r1, [r7, #32]
 800b718:	68f8      	ldr	r0, [r7, #12]
 800b71a:	f000 f967 	bl	800b9ec <I2C_WaitOnTXEFlagUntilTimeout>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d00d      	beq.n	800b740 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b728:	2b04      	cmp	r3, #4
 800b72a:	d107      	bne.n	800b73c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b73a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b73c:	2301      	movs	r3, #1
 800b73e:	e035      	b.n	800b7ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b74e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b752:	9300      	str	r3, [sp, #0]
 800b754:	6a3b      	ldr	r3, [r7, #32]
 800b756:	2200      	movs	r2, #0
 800b758:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b75c:	68f8      	ldr	r0, [r7, #12]
 800b75e:	f000 f82b 	bl	800b7b8 <I2C_WaitOnFlagUntilTimeout>
 800b762:	4603      	mov	r3, r0
 800b764:	2b00      	cmp	r3, #0
 800b766:	d00d      	beq.n	800b784 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b772:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b776:	d103      	bne.n	800b780 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b77e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b780:	2303      	movs	r3, #3
 800b782:	e013      	b.n	800b7ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b784:	897b      	ldrh	r3, [r7, #10]
 800b786:	b2db      	uxtb	r3, r3
 800b788:	f043 0301 	orr.w	r3, r3, #1
 800b78c:	b2da      	uxtb	r2, r3
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b796:	6a3a      	ldr	r2, [r7, #32]
 800b798:	4906      	ldr	r1, [pc, #24]	@ (800b7b4 <I2C_RequestMemoryRead+0x1cc>)
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f000 f886 	bl	800b8ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d001      	beq.n	800b7aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	e000      	b.n	800b7ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b7aa:	2300      	movs	r3, #0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3718      	adds	r7, #24
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	00010002 	.word	0x00010002

0800b7b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b084      	sub	sp, #16
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	60b9      	str	r1, [r7, #8]
 800b7c2:	603b      	str	r3, [r7, #0]
 800b7c4:	4613      	mov	r3, r2
 800b7c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b7c8:	e048      	b.n	800b85c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d0:	d044      	beq.n	800b85c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7d2:	f7fe f9e3 	bl	8009b9c <HAL_GetTick>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	683a      	ldr	r2, [r7, #0]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d302      	bcc.n	800b7e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d139      	bne.n	800b85c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	0c1b      	lsrs	r3, r3, #16
 800b7ec:	b2db      	uxtb	r3, r3
 800b7ee:	2b01      	cmp	r3, #1
 800b7f0:	d10d      	bne.n	800b80e <I2C_WaitOnFlagUntilTimeout+0x56>
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	695b      	ldr	r3, [r3, #20]
 800b7f8:	43da      	mvns	r2, r3
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	4013      	ands	r3, r2
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	2b00      	cmp	r3, #0
 800b802:	bf0c      	ite	eq
 800b804:	2301      	moveq	r3, #1
 800b806:	2300      	movne	r3, #0
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	461a      	mov	r2, r3
 800b80c:	e00c      	b.n	800b828 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	699b      	ldr	r3, [r3, #24]
 800b814:	43da      	mvns	r2, r3
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	4013      	ands	r3, r2
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	bf0c      	ite	eq
 800b820:	2301      	moveq	r3, #1
 800b822:	2300      	movne	r3, #0
 800b824:	b2db      	uxtb	r3, r3
 800b826:	461a      	mov	r2, r3
 800b828:	79fb      	ldrb	r3, [r7, #7]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d116      	bne.n	800b85c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2200      	movs	r2, #0
 800b832:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	2220      	movs	r2, #32
 800b838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2200      	movs	r2, #0
 800b840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b848:	f043 0220 	orr.w	r2, r3, #32
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	2200      	movs	r2, #0
 800b854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b858:	2301      	movs	r3, #1
 800b85a:	e023      	b.n	800b8a4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	0c1b      	lsrs	r3, r3, #16
 800b860:	b2db      	uxtb	r3, r3
 800b862:	2b01      	cmp	r3, #1
 800b864:	d10d      	bne.n	800b882 <I2C_WaitOnFlagUntilTimeout+0xca>
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	695b      	ldr	r3, [r3, #20]
 800b86c:	43da      	mvns	r2, r3
 800b86e:	68bb      	ldr	r3, [r7, #8]
 800b870:	4013      	ands	r3, r2
 800b872:	b29b      	uxth	r3, r3
 800b874:	2b00      	cmp	r3, #0
 800b876:	bf0c      	ite	eq
 800b878:	2301      	moveq	r3, #1
 800b87a:	2300      	movne	r3, #0
 800b87c:	b2db      	uxtb	r3, r3
 800b87e:	461a      	mov	r2, r3
 800b880:	e00c      	b.n	800b89c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	699b      	ldr	r3, [r3, #24]
 800b888:	43da      	mvns	r2, r3
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	4013      	ands	r3, r2
 800b88e:	b29b      	uxth	r3, r3
 800b890:	2b00      	cmp	r3, #0
 800b892:	bf0c      	ite	eq
 800b894:	2301      	moveq	r3, #1
 800b896:	2300      	movne	r3, #0
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	461a      	mov	r2, r3
 800b89c:	79fb      	ldrb	r3, [r7, #7]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d093      	beq.n	800b7ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3710      	adds	r7, #16
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
 800b8b8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b8ba:	e071      	b.n	800b9a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	695b      	ldr	r3, [r3, #20]
 800b8c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b8c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b8ca:	d123      	bne.n	800b914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	681a      	ldr	r2, [r3, #0]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b8da:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b8e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	2220      	movs	r2, #32
 800b8f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b900:	f043 0204 	orr.w	r2, r3, #4
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2200      	movs	r2, #0
 800b90c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b910:	2301      	movs	r3, #1
 800b912:	e067      	b.n	800b9e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b91a:	d041      	beq.n	800b9a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b91c:	f7fe f93e 	bl	8009b9c <HAL_GetTick>
 800b920:	4602      	mov	r2, r0
 800b922:	683b      	ldr	r3, [r7, #0]
 800b924:	1ad3      	subs	r3, r2, r3
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d302      	bcc.n	800b932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d136      	bne.n	800b9a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	0c1b      	lsrs	r3, r3, #16
 800b936:	b2db      	uxtb	r3, r3
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d10c      	bne.n	800b956 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	695b      	ldr	r3, [r3, #20]
 800b942:	43da      	mvns	r2, r3
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	4013      	ands	r3, r2
 800b948:	b29b      	uxth	r3, r3
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	bf14      	ite	ne
 800b94e:	2301      	movne	r3, #1
 800b950:	2300      	moveq	r3, #0
 800b952:	b2db      	uxtb	r3, r3
 800b954:	e00b      	b.n	800b96e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	699b      	ldr	r3, [r3, #24]
 800b95c:	43da      	mvns	r2, r3
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	4013      	ands	r3, r2
 800b962:	b29b      	uxth	r3, r3
 800b964:	2b00      	cmp	r3, #0
 800b966:	bf14      	ite	ne
 800b968:	2301      	movne	r3, #1
 800b96a:	2300      	moveq	r3, #0
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d016      	beq.n	800b9a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2200      	movs	r2, #0
 800b976:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2220      	movs	r2, #32
 800b97c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	2200      	movs	r2, #0
 800b984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b98c:	f043 0220 	orr.w	r2, r3, #32
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b99c:	2301      	movs	r3, #1
 800b99e:	e021      	b.n	800b9e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	0c1b      	lsrs	r3, r3, #16
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	2b01      	cmp	r3, #1
 800b9a8:	d10c      	bne.n	800b9c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	695b      	ldr	r3, [r3, #20]
 800b9b0:	43da      	mvns	r2, r3
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	4013      	ands	r3, r2
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	bf14      	ite	ne
 800b9bc:	2301      	movne	r3, #1
 800b9be:	2300      	moveq	r3, #0
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	e00b      	b.n	800b9dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	699b      	ldr	r3, [r3, #24]
 800b9ca:	43da      	mvns	r2, r3
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	4013      	ands	r3, r2
 800b9d0:	b29b      	uxth	r3, r3
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	bf14      	ite	ne
 800b9d6:	2301      	movne	r3, #1
 800b9d8:	2300      	moveq	r3, #0
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	f47f af6d 	bne.w	800b8bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b9e2:	2300      	movs	r3, #0
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3710      	adds	r7, #16
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b084      	sub	sp, #16
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b9f8:	e034      	b.n	800ba64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b9fa:	68f8      	ldr	r0, [r7, #12]
 800b9fc:	f000 f8e3 	bl	800bbc6 <I2C_IsAcknowledgeFailed>
 800ba00:	4603      	mov	r3, r0
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d001      	beq.n	800ba0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ba06:	2301      	movs	r3, #1
 800ba08:	e034      	b.n	800ba74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba10:	d028      	beq.n	800ba64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba12:	f7fe f8c3 	bl	8009b9c <HAL_GetTick>
 800ba16:	4602      	mov	r2, r0
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	1ad3      	subs	r3, r2, r3
 800ba1c:	68ba      	ldr	r2, [r7, #8]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d302      	bcc.n	800ba28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d11d      	bne.n	800ba64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	695b      	ldr	r3, [r3, #20]
 800ba2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba32:	2b80      	cmp	r3, #128	@ 0x80
 800ba34:	d016      	beq.n	800ba64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2220      	movs	r2, #32
 800ba40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2200      	movs	r2, #0
 800ba48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba50:	f043 0220 	orr.w	r2, r3, #32
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800ba60:	2301      	movs	r3, #1
 800ba62:	e007      	b.n	800ba74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	695b      	ldr	r3, [r3, #20]
 800ba6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba6e:	2b80      	cmp	r3, #128	@ 0x80
 800ba70:	d1c3      	bne.n	800b9fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3710      	adds	r7, #16
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	60f8      	str	r0, [r7, #12]
 800ba84:	60b9      	str	r1, [r7, #8]
 800ba86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ba88:	e034      	b.n	800baf4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ba8a:	68f8      	ldr	r0, [r7, #12]
 800ba8c:	f000 f89b 	bl	800bbc6 <I2C_IsAcknowledgeFailed>
 800ba90:	4603      	mov	r3, r0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d001      	beq.n	800ba9a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ba96:	2301      	movs	r3, #1
 800ba98:	e034      	b.n	800bb04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa0:	d028      	beq.n	800baf4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800baa2:	f7fe f87b 	bl	8009b9c <HAL_GetTick>
 800baa6:	4602      	mov	r2, r0
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	1ad3      	subs	r3, r2, r3
 800baac:	68ba      	ldr	r2, [r7, #8]
 800baae:	429a      	cmp	r2, r3
 800bab0:	d302      	bcc.n	800bab8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d11d      	bne.n	800baf4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	695b      	ldr	r3, [r3, #20]
 800babe:	f003 0304 	and.w	r3, r3, #4
 800bac2:	2b04      	cmp	r3, #4
 800bac4:	d016      	beq.n	800baf4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	2200      	movs	r2, #0
 800baca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2220      	movs	r2, #32
 800bad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2200      	movs	r2, #0
 800bad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bae0:	f043 0220 	orr.w	r2, r3, #32
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	2200      	movs	r2, #0
 800baec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800baf0:	2301      	movs	r3, #1
 800baf2:	e007      	b.n	800bb04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	695b      	ldr	r3, [r3, #20]
 800bafa:	f003 0304 	and.w	r3, r3, #4
 800bafe:	2b04      	cmp	r3, #4
 800bb00:	d1c3      	bne.n	800ba8a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	60b9      	str	r1, [r7, #8]
 800bb16:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bb18:	e049      	b.n	800bbae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	695b      	ldr	r3, [r3, #20]
 800bb20:	f003 0310 	and.w	r3, r3, #16
 800bb24:	2b10      	cmp	r3, #16
 800bb26:	d119      	bne.n	800bb5c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f06f 0210 	mvn.w	r2, #16
 800bb30:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2200      	movs	r2, #0
 800bb36:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	2220      	movs	r2, #32
 800bb3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	2200      	movs	r2, #0
 800bb44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	2200      	movs	r2, #0
 800bb54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	e030      	b.n	800bbbe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb5c:	f7fe f81e 	bl	8009b9c <HAL_GetTick>
 800bb60:	4602      	mov	r2, r0
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	1ad3      	subs	r3, r2, r3
 800bb66:	68ba      	ldr	r2, [r7, #8]
 800bb68:	429a      	cmp	r2, r3
 800bb6a:	d302      	bcc.n	800bb72 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d11d      	bne.n	800bbae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	695b      	ldr	r3, [r3, #20]
 800bb78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb7c:	2b40      	cmp	r3, #64	@ 0x40
 800bb7e:	d016      	beq.n	800bbae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2200      	movs	r2, #0
 800bb84:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	2220      	movs	r2, #32
 800bb8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2200      	movs	r2, #0
 800bb92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bb9a:	f043 0220 	orr.w	r2, r3, #32
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	2200      	movs	r2, #0
 800bba6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800bbaa:	2301      	movs	r3, #1
 800bbac:	e007      	b.n	800bbbe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	695b      	ldr	r3, [r3, #20]
 800bbb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bbb8:	2b40      	cmp	r3, #64	@ 0x40
 800bbba:	d1ae      	bne.n	800bb1a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bbbc:	2300      	movs	r3, #0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3710      	adds	r7, #16
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bbc6:	b480      	push	{r7}
 800bbc8:	b083      	sub	sp, #12
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	695b      	ldr	r3, [r3, #20]
 800bbd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bbd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bbdc:	d11b      	bne.n	800bc16 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800bbe6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2200      	movs	r2, #0
 800bbec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2220      	movs	r2, #32
 800bbf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bc02:	f043 0204 	orr.w	r2, r3, #4
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800bc12:	2301      	movs	r3, #1
 800bc14:	e000      	b.n	800bc18 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bc16:	2300      	movs	r3, #0
}
 800bc18:	4618      	mov	r0, r3
 800bc1a:	370c      	adds	r7, #12
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bc80      	pop	{r7}
 800bc20:	4770      	bx	lr
	...

0800bc24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b086      	sub	sp, #24
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d101      	bne.n	800bc36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bc32:	2301      	movs	r3, #1
 800bc34:	e272      	b.n	800c11c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f003 0301 	and.w	r3, r3, #1
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	f000 8087 	beq.w	800bd52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bc44:	4b92      	ldr	r3, [pc, #584]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bc46:	685b      	ldr	r3, [r3, #4]
 800bc48:	f003 030c 	and.w	r3, r3, #12
 800bc4c:	2b04      	cmp	r3, #4
 800bc4e:	d00c      	beq.n	800bc6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800bc50:	4b8f      	ldr	r3, [pc, #572]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	f003 030c 	and.w	r3, r3, #12
 800bc58:	2b08      	cmp	r3, #8
 800bc5a:	d112      	bne.n	800bc82 <HAL_RCC_OscConfig+0x5e>
 800bc5c:	4b8c      	ldr	r3, [pc, #560]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bc64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc68:	d10b      	bne.n	800bc82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc6a:	4b89      	ldr	r3, [pc, #548]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d06c      	beq.n	800bd50 <HAL_RCC_OscConfig+0x12c>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d168      	bne.n	800bd50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800bc7e:	2301      	movs	r3, #1
 800bc80:	e24c      	b.n	800c11c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bc8a:	d106      	bne.n	800bc9a <HAL_RCC_OscConfig+0x76>
 800bc8c:	4b80      	ldr	r3, [pc, #512]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	4a7f      	ldr	r2, [pc, #508]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bc92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bc96:	6013      	str	r3, [r2, #0]
 800bc98:	e02e      	b.n	800bcf8 <HAL_RCC_OscConfig+0xd4>
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d10c      	bne.n	800bcbc <HAL_RCC_OscConfig+0x98>
 800bca2:	4b7b      	ldr	r3, [pc, #492]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a7a      	ldr	r2, [pc, #488]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bca8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bcac:	6013      	str	r3, [r2, #0]
 800bcae:	4b78      	ldr	r3, [pc, #480]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4a77      	ldr	r2, [pc, #476]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bcb4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bcb8:	6013      	str	r3, [r2, #0]
 800bcba:	e01d      	b.n	800bcf8 <HAL_RCC_OscConfig+0xd4>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	685b      	ldr	r3, [r3, #4]
 800bcc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bcc4:	d10c      	bne.n	800bce0 <HAL_RCC_OscConfig+0xbc>
 800bcc6:	4b72      	ldr	r3, [pc, #456]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a71      	ldr	r2, [pc, #452]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bccc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bcd0:	6013      	str	r3, [r2, #0]
 800bcd2:	4b6f      	ldr	r3, [pc, #444]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4a6e      	ldr	r2, [pc, #440]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bcd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bcdc:	6013      	str	r3, [r2, #0]
 800bcde:	e00b      	b.n	800bcf8 <HAL_RCC_OscConfig+0xd4>
 800bce0:	4b6b      	ldr	r3, [pc, #428]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a6a      	ldr	r2, [pc, #424]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bce6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bcea:	6013      	str	r3, [r2, #0]
 800bcec:	4b68      	ldr	r3, [pc, #416]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	4a67      	ldr	r2, [pc, #412]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bcf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bcf6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d013      	beq.n	800bd28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bd00:	f7fd ff4c 	bl	8009b9c <HAL_GetTick>
 800bd04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd06:	e008      	b.n	800bd1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bd08:	f7fd ff48 	bl	8009b9c <HAL_GetTick>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	1ad3      	subs	r3, r2, r3
 800bd12:	2b64      	cmp	r3, #100	@ 0x64
 800bd14:	d901      	bls.n	800bd1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800bd16:	2303      	movs	r3, #3
 800bd18:	e200      	b.n	800c11c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd1a:	4b5d      	ldr	r3, [pc, #372]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d0f0      	beq.n	800bd08 <HAL_RCC_OscConfig+0xe4>
 800bd26:	e014      	b.n	800bd52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bd28:	f7fd ff38 	bl	8009b9c <HAL_GetTick>
 800bd2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bd2e:	e008      	b.n	800bd42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bd30:	f7fd ff34 	bl	8009b9c <HAL_GetTick>
 800bd34:	4602      	mov	r2, r0
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	1ad3      	subs	r3, r2, r3
 800bd3a:	2b64      	cmp	r3, #100	@ 0x64
 800bd3c:	d901      	bls.n	800bd42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800bd3e:	2303      	movs	r3, #3
 800bd40:	e1ec      	b.n	800c11c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bd42:	4b53      	ldr	r3, [pc, #332]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d1f0      	bne.n	800bd30 <HAL_RCC_OscConfig+0x10c>
 800bd4e:	e000      	b.n	800bd52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	f003 0302 	and.w	r3, r3, #2
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d063      	beq.n	800be26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bd5e:	4b4c      	ldr	r3, [pc, #304]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bd60:	685b      	ldr	r3, [r3, #4]
 800bd62:	f003 030c 	and.w	r3, r3, #12
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00b      	beq.n	800bd82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800bd6a:	4b49      	ldr	r3, [pc, #292]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	f003 030c 	and.w	r3, r3, #12
 800bd72:	2b08      	cmp	r3, #8
 800bd74:	d11c      	bne.n	800bdb0 <HAL_RCC_OscConfig+0x18c>
 800bd76:	4b46      	ldr	r3, [pc, #280]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d116      	bne.n	800bdb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bd82:	4b43      	ldr	r3, [pc, #268]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f003 0302 	and.w	r3, r3, #2
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d005      	beq.n	800bd9a <HAL_RCC_OscConfig+0x176>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	691b      	ldr	r3, [r3, #16]
 800bd92:	2b01      	cmp	r3, #1
 800bd94:	d001      	beq.n	800bd9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800bd96:	2301      	movs	r3, #1
 800bd98:	e1c0      	b.n	800c11c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd9a:	4b3d      	ldr	r3, [pc, #244]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	695b      	ldr	r3, [r3, #20]
 800bda6:	00db      	lsls	r3, r3, #3
 800bda8:	4939      	ldr	r1, [pc, #228]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bdae:	e03a      	b.n	800be26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	691b      	ldr	r3, [r3, #16]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d020      	beq.n	800bdfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bdb8:	4b36      	ldr	r3, [pc, #216]	@ (800be94 <HAL_RCC_OscConfig+0x270>)
 800bdba:	2201      	movs	r2, #1
 800bdbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bdbe:	f7fd feed 	bl	8009b9c <HAL_GetTick>
 800bdc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bdc4:	e008      	b.n	800bdd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bdc6:	f7fd fee9 	bl	8009b9c <HAL_GetTick>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	1ad3      	subs	r3, r2, r3
 800bdd0:	2b02      	cmp	r3, #2
 800bdd2:	d901      	bls.n	800bdd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800bdd4:	2303      	movs	r3, #3
 800bdd6:	e1a1      	b.n	800c11c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bdd8:	4b2d      	ldr	r3, [pc, #180]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f003 0302 	and.w	r3, r3, #2
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d0f0      	beq.n	800bdc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bde4:	4b2a      	ldr	r3, [pc, #168]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	695b      	ldr	r3, [r3, #20]
 800bdf0:	00db      	lsls	r3, r3, #3
 800bdf2:	4927      	ldr	r1, [pc, #156]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	600b      	str	r3, [r1, #0]
 800bdf8:	e015      	b.n	800be26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bdfa:	4b26      	ldr	r3, [pc, #152]	@ (800be94 <HAL_RCC_OscConfig+0x270>)
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be00:	f7fd fecc 	bl	8009b9c <HAL_GetTick>
 800be04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800be06:	e008      	b.n	800be1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800be08:	f7fd fec8 	bl	8009b9c <HAL_GetTick>
 800be0c:	4602      	mov	r2, r0
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	1ad3      	subs	r3, r2, r3
 800be12:	2b02      	cmp	r3, #2
 800be14:	d901      	bls.n	800be1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800be16:	2303      	movs	r3, #3
 800be18:	e180      	b.n	800c11c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800be1a:	4b1d      	ldr	r3, [pc, #116]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f003 0302 	and.w	r3, r3, #2
 800be22:	2b00      	cmp	r3, #0
 800be24:	d1f0      	bne.n	800be08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f003 0308 	and.w	r3, r3, #8
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d03a      	beq.n	800bea8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	699b      	ldr	r3, [r3, #24]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d019      	beq.n	800be6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800be3a:	4b17      	ldr	r3, [pc, #92]	@ (800be98 <HAL_RCC_OscConfig+0x274>)
 800be3c:	2201      	movs	r2, #1
 800be3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800be40:	f7fd feac 	bl	8009b9c <HAL_GetTick>
 800be44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800be46:	e008      	b.n	800be5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800be48:	f7fd fea8 	bl	8009b9c <HAL_GetTick>
 800be4c:	4602      	mov	r2, r0
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	1ad3      	subs	r3, r2, r3
 800be52:	2b02      	cmp	r3, #2
 800be54:	d901      	bls.n	800be5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800be56:	2303      	movs	r3, #3
 800be58:	e160      	b.n	800c11c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800be5a:	4b0d      	ldr	r3, [pc, #52]	@ (800be90 <HAL_RCC_OscConfig+0x26c>)
 800be5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be5e:	f003 0302 	and.w	r3, r3, #2
 800be62:	2b00      	cmp	r3, #0
 800be64:	d0f0      	beq.n	800be48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800be66:	2001      	movs	r0, #1
 800be68:	f000 face 	bl	800c408 <RCC_Delay>
 800be6c:	e01c      	b.n	800bea8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800be6e:	4b0a      	ldr	r3, [pc, #40]	@ (800be98 <HAL_RCC_OscConfig+0x274>)
 800be70:	2200      	movs	r2, #0
 800be72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800be74:	f7fd fe92 	bl	8009b9c <HAL_GetTick>
 800be78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800be7a:	e00f      	b.n	800be9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800be7c:	f7fd fe8e 	bl	8009b9c <HAL_GetTick>
 800be80:	4602      	mov	r2, r0
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	1ad3      	subs	r3, r2, r3
 800be86:	2b02      	cmp	r3, #2
 800be88:	d908      	bls.n	800be9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800be8a:	2303      	movs	r3, #3
 800be8c:	e146      	b.n	800c11c <HAL_RCC_OscConfig+0x4f8>
 800be8e:	bf00      	nop
 800be90:	40021000 	.word	0x40021000
 800be94:	42420000 	.word	0x42420000
 800be98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800be9c:	4b92      	ldr	r3, [pc, #584]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800be9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bea0:	f003 0302 	and.w	r3, r3, #2
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d1e9      	bne.n	800be7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	f003 0304 	and.w	r3, r3, #4
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	f000 80a6 	beq.w	800c002 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800beb6:	2300      	movs	r3, #0
 800beb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800beba:	4b8b      	ldr	r3, [pc, #556]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800bebc:	69db      	ldr	r3, [r3, #28]
 800bebe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d10d      	bne.n	800bee2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bec6:	4b88      	ldr	r3, [pc, #544]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800bec8:	69db      	ldr	r3, [r3, #28]
 800beca:	4a87      	ldr	r2, [pc, #540]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800becc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bed0:	61d3      	str	r3, [r2, #28]
 800bed2:	4b85      	ldr	r3, [pc, #532]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800bed4:	69db      	ldr	r3, [r3, #28]
 800bed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800beda:	60bb      	str	r3, [r7, #8]
 800bedc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bede:	2301      	movs	r3, #1
 800bee0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bee2:	4b82      	ldr	r3, [pc, #520]	@ (800c0ec <HAL_RCC_OscConfig+0x4c8>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800beea:	2b00      	cmp	r3, #0
 800beec:	d118      	bne.n	800bf20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800beee:	4b7f      	ldr	r3, [pc, #508]	@ (800c0ec <HAL_RCC_OscConfig+0x4c8>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	4a7e      	ldr	r2, [pc, #504]	@ (800c0ec <HAL_RCC_OscConfig+0x4c8>)
 800bef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800befa:	f7fd fe4f 	bl	8009b9c <HAL_GetTick>
 800befe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bf00:	e008      	b.n	800bf14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bf02:	f7fd fe4b 	bl	8009b9c <HAL_GetTick>
 800bf06:	4602      	mov	r2, r0
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	1ad3      	subs	r3, r2, r3
 800bf0c:	2b64      	cmp	r3, #100	@ 0x64
 800bf0e:	d901      	bls.n	800bf14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800bf10:	2303      	movs	r3, #3
 800bf12:	e103      	b.n	800c11c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bf14:	4b75      	ldr	r3, [pc, #468]	@ (800c0ec <HAL_RCC_OscConfig+0x4c8>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d0f0      	beq.n	800bf02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	68db      	ldr	r3, [r3, #12]
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	d106      	bne.n	800bf36 <HAL_RCC_OscConfig+0x312>
 800bf28:	4b6f      	ldr	r3, [pc, #444]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800bf2a:	6a1b      	ldr	r3, [r3, #32]
 800bf2c:	4a6e      	ldr	r2, [pc, #440]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800bf2e:	f043 0301 	orr.w	r3, r3, #1
 800bf32:	6213      	str	r3, [r2, #32]
 800bf34:	e02d      	b.n	800bf92 <HAL_RCC_OscConfig+0x36e>
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d10c      	bne.n	800bf58 <HAL_RCC_OscConfig+0x334>
 800bf3e:	4b6a      	ldr	r3, [pc, #424]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800bf40:	6a1b      	ldr	r3, [r3, #32]
 800bf42:	4a69      	ldr	r2, [pc, #420]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800bf44:	f023 0301 	bic.w	r3, r3, #1
 800bf48:	6213      	str	r3, [r2, #32]
 800bf4a:	4b67      	ldr	r3, [pc, #412]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800bf4c:	6a1b      	ldr	r3, [r3, #32]
 800bf4e:	4a66      	ldr	r2, [pc, #408]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800bf50:	f023 0304 	bic.w	r3, r3, #4
 800bf54:	6213      	str	r3, [r2, #32]
 800bf56:	e01c      	b.n	800bf92 <HAL_RCC_OscConfig+0x36e>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	68db      	ldr	r3, [r3, #12]
 800bf5c:	2b05      	cmp	r3, #5
 800bf5e:	d10c      	bne.n	800bf7a <HAL_RCC_OscConfig+0x356>
 800bf60:	4b61      	ldr	r3, [pc, #388]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800bf62:	6a1b      	ldr	r3, [r3, #32]
 800bf64:	4a60      	ldr	r2, [pc, #384]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800bf66:	f043 0304 	orr.w	r3, r3, #4
 800bf6a:	6213      	str	r3, [r2, #32]
 800bf6c:	4b5e      	ldr	r3, [pc, #376]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800bf6e:	6a1b      	ldr	r3, [r3, #32]
 800bf70:	4a5d      	ldr	r2, [pc, #372]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800bf72:	f043 0301 	orr.w	r3, r3, #1
 800bf76:	6213      	str	r3, [r2, #32]
 800bf78:	e00b      	b.n	800bf92 <HAL_RCC_OscConfig+0x36e>
 800bf7a:	4b5b      	ldr	r3, [pc, #364]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800bf7c:	6a1b      	ldr	r3, [r3, #32]
 800bf7e:	4a5a      	ldr	r2, [pc, #360]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800bf80:	f023 0301 	bic.w	r3, r3, #1
 800bf84:	6213      	str	r3, [r2, #32]
 800bf86:	4b58      	ldr	r3, [pc, #352]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800bf88:	6a1b      	ldr	r3, [r3, #32]
 800bf8a:	4a57      	ldr	r2, [pc, #348]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800bf8c:	f023 0304 	bic.w	r3, r3, #4
 800bf90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d015      	beq.n	800bfc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bf9a:	f7fd fdff 	bl	8009b9c <HAL_GetTick>
 800bf9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bfa0:	e00a      	b.n	800bfb8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bfa2:	f7fd fdfb 	bl	8009b9c <HAL_GetTick>
 800bfa6:	4602      	mov	r2, r0
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	1ad3      	subs	r3, r2, r3
 800bfac:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bfb0:	4293      	cmp	r3, r2
 800bfb2:	d901      	bls.n	800bfb8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	e0b1      	b.n	800c11c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bfb8:	4b4b      	ldr	r3, [pc, #300]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800bfba:	6a1b      	ldr	r3, [r3, #32]
 800bfbc:	f003 0302 	and.w	r3, r3, #2
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d0ee      	beq.n	800bfa2 <HAL_RCC_OscConfig+0x37e>
 800bfc4:	e014      	b.n	800bff0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bfc6:	f7fd fde9 	bl	8009b9c <HAL_GetTick>
 800bfca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bfcc:	e00a      	b.n	800bfe4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bfce:	f7fd fde5 	bl	8009b9c <HAL_GetTick>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	1ad3      	subs	r3, r2, r3
 800bfd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bfdc:	4293      	cmp	r3, r2
 800bfde:	d901      	bls.n	800bfe4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800bfe0:	2303      	movs	r3, #3
 800bfe2:	e09b      	b.n	800c11c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bfe4:	4b40      	ldr	r3, [pc, #256]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800bfe6:	6a1b      	ldr	r3, [r3, #32]
 800bfe8:	f003 0302 	and.w	r3, r3, #2
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d1ee      	bne.n	800bfce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800bff0:	7dfb      	ldrb	r3, [r7, #23]
 800bff2:	2b01      	cmp	r3, #1
 800bff4:	d105      	bne.n	800c002 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bff6:	4b3c      	ldr	r3, [pc, #240]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800bff8:	69db      	ldr	r3, [r3, #28]
 800bffa:	4a3b      	ldr	r2, [pc, #236]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800bffc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c000:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	69db      	ldr	r3, [r3, #28]
 800c006:	2b00      	cmp	r3, #0
 800c008:	f000 8087 	beq.w	800c11a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c00c:	4b36      	ldr	r3, [pc, #216]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800c00e:	685b      	ldr	r3, [r3, #4]
 800c010:	f003 030c 	and.w	r3, r3, #12
 800c014:	2b08      	cmp	r3, #8
 800c016:	d061      	beq.n	800c0dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	69db      	ldr	r3, [r3, #28]
 800c01c:	2b02      	cmp	r3, #2
 800c01e:	d146      	bne.n	800c0ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c020:	4b33      	ldr	r3, [pc, #204]	@ (800c0f0 <HAL_RCC_OscConfig+0x4cc>)
 800c022:	2200      	movs	r2, #0
 800c024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c026:	f7fd fdb9 	bl	8009b9c <HAL_GetTick>
 800c02a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c02c:	e008      	b.n	800c040 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c02e:	f7fd fdb5 	bl	8009b9c <HAL_GetTick>
 800c032:	4602      	mov	r2, r0
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	1ad3      	subs	r3, r2, r3
 800c038:	2b02      	cmp	r3, #2
 800c03a:	d901      	bls.n	800c040 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800c03c:	2303      	movs	r3, #3
 800c03e:	e06d      	b.n	800c11c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c040:	4b29      	ldr	r3, [pc, #164]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d1f0      	bne.n	800c02e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6a1b      	ldr	r3, [r3, #32]
 800c050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c054:	d108      	bne.n	800c068 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800c056:	4b24      	ldr	r3, [pc, #144]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800c058:	685b      	ldr	r3, [r3, #4]
 800c05a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	4921      	ldr	r1, [pc, #132]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800c064:	4313      	orrs	r3, r2
 800c066:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c068:	4b1f      	ldr	r3, [pc, #124]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6a19      	ldr	r1, [r3, #32]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c078:	430b      	orrs	r3, r1
 800c07a:	491b      	ldr	r1, [pc, #108]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800c07c:	4313      	orrs	r3, r2
 800c07e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c080:	4b1b      	ldr	r3, [pc, #108]	@ (800c0f0 <HAL_RCC_OscConfig+0x4cc>)
 800c082:	2201      	movs	r2, #1
 800c084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c086:	f7fd fd89 	bl	8009b9c <HAL_GetTick>
 800c08a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c08c:	e008      	b.n	800c0a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c08e:	f7fd fd85 	bl	8009b9c <HAL_GetTick>
 800c092:	4602      	mov	r2, r0
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	1ad3      	subs	r3, r2, r3
 800c098:	2b02      	cmp	r3, #2
 800c09a:	d901      	bls.n	800c0a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800c09c:	2303      	movs	r3, #3
 800c09e:	e03d      	b.n	800c11c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800c0a0:	4b11      	ldr	r3, [pc, #68]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d0f0      	beq.n	800c08e <HAL_RCC_OscConfig+0x46a>
 800c0ac:	e035      	b.n	800c11a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c0ae:	4b10      	ldr	r3, [pc, #64]	@ (800c0f0 <HAL_RCC_OscConfig+0x4cc>)
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c0b4:	f7fd fd72 	bl	8009b9c <HAL_GetTick>
 800c0b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c0ba:	e008      	b.n	800c0ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c0bc:	f7fd fd6e 	bl	8009b9c <HAL_GetTick>
 800c0c0:	4602      	mov	r2, r0
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	1ad3      	subs	r3, r2, r3
 800c0c6:	2b02      	cmp	r3, #2
 800c0c8:	d901      	bls.n	800c0ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800c0ca:	2303      	movs	r3, #3
 800c0cc:	e026      	b.n	800c11c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800c0ce:	4b06      	ldr	r3, [pc, #24]	@ (800c0e8 <HAL_RCC_OscConfig+0x4c4>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d1f0      	bne.n	800c0bc <HAL_RCC_OscConfig+0x498>
 800c0da:	e01e      	b.n	800c11a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	69db      	ldr	r3, [r3, #28]
 800c0e0:	2b01      	cmp	r3, #1
 800c0e2:	d107      	bne.n	800c0f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	e019      	b.n	800c11c <HAL_RCC_OscConfig+0x4f8>
 800c0e8:	40021000 	.word	0x40021000
 800c0ec:	40007000 	.word	0x40007000
 800c0f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800c0f4:	4b0b      	ldr	r3, [pc, #44]	@ (800c124 <HAL_RCC_OscConfig+0x500>)
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6a1b      	ldr	r3, [r3, #32]
 800c104:	429a      	cmp	r2, r3
 800c106:	d106      	bne.n	800c116 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c112:	429a      	cmp	r2, r3
 800c114:	d001      	beq.n	800c11a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800c116:	2301      	movs	r3, #1
 800c118:	e000      	b.n	800c11c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3718      	adds	r7, #24
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}
 800c124:	40021000 	.word	0x40021000

0800c128 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b084      	sub	sp, #16
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d101      	bne.n	800c13c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c138:	2301      	movs	r3, #1
 800c13a:	e0d0      	b.n	800c2de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c13c:	4b6a      	ldr	r3, [pc, #424]	@ (800c2e8 <HAL_RCC_ClockConfig+0x1c0>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f003 0307 	and.w	r3, r3, #7
 800c144:	683a      	ldr	r2, [r7, #0]
 800c146:	429a      	cmp	r2, r3
 800c148:	d910      	bls.n	800c16c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c14a:	4b67      	ldr	r3, [pc, #412]	@ (800c2e8 <HAL_RCC_ClockConfig+0x1c0>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f023 0207 	bic.w	r2, r3, #7
 800c152:	4965      	ldr	r1, [pc, #404]	@ (800c2e8 <HAL_RCC_ClockConfig+0x1c0>)
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	4313      	orrs	r3, r2
 800c158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c15a:	4b63      	ldr	r3, [pc, #396]	@ (800c2e8 <HAL_RCC_ClockConfig+0x1c0>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f003 0307 	and.w	r3, r3, #7
 800c162:	683a      	ldr	r2, [r7, #0]
 800c164:	429a      	cmp	r2, r3
 800c166:	d001      	beq.n	800c16c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800c168:	2301      	movs	r3, #1
 800c16a:	e0b8      	b.n	800c2de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f003 0302 	and.w	r3, r3, #2
 800c174:	2b00      	cmp	r3, #0
 800c176:	d020      	beq.n	800c1ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f003 0304 	and.w	r3, r3, #4
 800c180:	2b00      	cmp	r3, #0
 800c182:	d005      	beq.n	800c190 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c184:	4b59      	ldr	r3, [pc, #356]	@ (800c2ec <HAL_RCC_ClockConfig+0x1c4>)
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	4a58      	ldr	r2, [pc, #352]	@ (800c2ec <HAL_RCC_ClockConfig+0x1c4>)
 800c18a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800c18e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f003 0308 	and.w	r3, r3, #8
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d005      	beq.n	800c1a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c19c:	4b53      	ldr	r3, [pc, #332]	@ (800c2ec <HAL_RCC_ClockConfig+0x1c4>)
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	4a52      	ldr	r2, [pc, #328]	@ (800c2ec <HAL_RCC_ClockConfig+0x1c4>)
 800c1a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800c1a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c1a8:	4b50      	ldr	r3, [pc, #320]	@ (800c2ec <HAL_RCC_ClockConfig+0x1c4>)
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	689b      	ldr	r3, [r3, #8]
 800c1b4:	494d      	ldr	r1, [pc, #308]	@ (800c2ec <HAL_RCC_ClockConfig+0x1c4>)
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	f003 0301 	and.w	r3, r3, #1
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d040      	beq.n	800c248 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	685b      	ldr	r3, [r3, #4]
 800c1ca:	2b01      	cmp	r3, #1
 800c1cc:	d107      	bne.n	800c1de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c1ce:	4b47      	ldr	r3, [pc, #284]	@ (800c2ec <HAL_RCC_ClockConfig+0x1c4>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d115      	bne.n	800c206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e07f      	b.n	800c2de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	2b02      	cmp	r3, #2
 800c1e4:	d107      	bne.n	800c1f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c1e6:	4b41      	ldr	r3, [pc, #260]	@ (800c2ec <HAL_RCC_ClockConfig+0x1c4>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d109      	bne.n	800c206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e073      	b.n	800c2de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c1f6:	4b3d      	ldr	r3, [pc, #244]	@ (800c2ec <HAL_RCC_ClockConfig+0x1c4>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f003 0302 	and.w	r3, r3, #2
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d101      	bne.n	800c206 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c202:	2301      	movs	r3, #1
 800c204:	e06b      	b.n	800c2de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c206:	4b39      	ldr	r3, [pc, #228]	@ (800c2ec <HAL_RCC_ClockConfig+0x1c4>)
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	f023 0203 	bic.w	r2, r3, #3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	4936      	ldr	r1, [pc, #216]	@ (800c2ec <HAL_RCC_ClockConfig+0x1c4>)
 800c214:	4313      	orrs	r3, r2
 800c216:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c218:	f7fd fcc0 	bl	8009b9c <HAL_GetTick>
 800c21c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c21e:	e00a      	b.n	800c236 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c220:	f7fd fcbc 	bl	8009b9c <HAL_GetTick>
 800c224:	4602      	mov	r2, r0
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	1ad3      	subs	r3, r2, r3
 800c22a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c22e:	4293      	cmp	r3, r2
 800c230:	d901      	bls.n	800c236 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c232:	2303      	movs	r3, #3
 800c234:	e053      	b.n	800c2de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c236:	4b2d      	ldr	r3, [pc, #180]	@ (800c2ec <HAL_RCC_ClockConfig+0x1c4>)
 800c238:	685b      	ldr	r3, [r3, #4]
 800c23a:	f003 020c 	and.w	r2, r3, #12
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	685b      	ldr	r3, [r3, #4]
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	429a      	cmp	r2, r3
 800c246:	d1eb      	bne.n	800c220 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c248:	4b27      	ldr	r3, [pc, #156]	@ (800c2e8 <HAL_RCC_ClockConfig+0x1c0>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f003 0307 	and.w	r3, r3, #7
 800c250:	683a      	ldr	r2, [r7, #0]
 800c252:	429a      	cmp	r2, r3
 800c254:	d210      	bcs.n	800c278 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c256:	4b24      	ldr	r3, [pc, #144]	@ (800c2e8 <HAL_RCC_ClockConfig+0x1c0>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f023 0207 	bic.w	r2, r3, #7
 800c25e:	4922      	ldr	r1, [pc, #136]	@ (800c2e8 <HAL_RCC_ClockConfig+0x1c0>)
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	4313      	orrs	r3, r2
 800c264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c266:	4b20      	ldr	r3, [pc, #128]	@ (800c2e8 <HAL_RCC_ClockConfig+0x1c0>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f003 0307 	and.w	r3, r3, #7
 800c26e:	683a      	ldr	r2, [r7, #0]
 800c270:	429a      	cmp	r2, r3
 800c272:	d001      	beq.n	800c278 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800c274:	2301      	movs	r3, #1
 800c276:	e032      	b.n	800c2de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f003 0304 	and.w	r3, r3, #4
 800c280:	2b00      	cmp	r3, #0
 800c282:	d008      	beq.n	800c296 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c284:	4b19      	ldr	r3, [pc, #100]	@ (800c2ec <HAL_RCC_ClockConfig+0x1c4>)
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	68db      	ldr	r3, [r3, #12]
 800c290:	4916      	ldr	r1, [pc, #88]	@ (800c2ec <HAL_RCC_ClockConfig+0x1c4>)
 800c292:	4313      	orrs	r3, r2
 800c294:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f003 0308 	and.w	r3, r3, #8
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d009      	beq.n	800c2b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c2a2:	4b12      	ldr	r3, [pc, #72]	@ (800c2ec <HAL_RCC_ClockConfig+0x1c4>)
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	691b      	ldr	r3, [r3, #16]
 800c2ae:	00db      	lsls	r3, r3, #3
 800c2b0:	490e      	ldr	r1, [pc, #56]	@ (800c2ec <HAL_RCC_ClockConfig+0x1c4>)
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c2b6:	f000 f821 	bl	800c2fc <HAL_RCC_GetSysClockFreq>
 800c2ba:	4602      	mov	r2, r0
 800c2bc:	4b0b      	ldr	r3, [pc, #44]	@ (800c2ec <HAL_RCC_ClockConfig+0x1c4>)
 800c2be:	685b      	ldr	r3, [r3, #4]
 800c2c0:	091b      	lsrs	r3, r3, #4
 800c2c2:	f003 030f 	and.w	r3, r3, #15
 800c2c6:	490a      	ldr	r1, [pc, #40]	@ (800c2f0 <HAL_RCC_ClockConfig+0x1c8>)
 800c2c8:	5ccb      	ldrb	r3, [r1, r3]
 800c2ca:	fa22 f303 	lsr.w	r3, r2, r3
 800c2ce:	4a09      	ldr	r2, [pc, #36]	@ (800c2f4 <HAL_RCC_ClockConfig+0x1cc>)
 800c2d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c2d2:	4b09      	ldr	r3, [pc, #36]	@ (800c2f8 <HAL_RCC_ClockConfig+0x1d0>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7fd fc1e 	bl	8009b18 <HAL_InitTick>

  return HAL_OK;
 800c2dc:	2300      	movs	r3, #0
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3710      	adds	r7, #16
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop
 800c2e8:	40022000 	.word	0x40022000
 800c2ec:	40021000 	.word	0x40021000
 800c2f0:	0800ee18 	.word	0x0800ee18
 800c2f4:	20000f74 	.word	0x20000f74
 800c2f8:	20000f78 	.word	0x20000f78

0800c2fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b087      	sub	sp, #28
 800c300:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800c302:	2300      	movs	r3, #0
 800c304:	60fb      	str	r3, [r7, #12]
 800c306:	2300      	movs	r3, #0
 800c308:	60bb      	str	r3, [r7, #8]
 800c30a:	2300      	movs	r3, #0
 800c30c:	617b      	str	r3, [r7, #20]
 800c30e:	2300      	movs	r3, #0
 800c310:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800c312:	2300      	movs	r3, #0
 800c314:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800c316:	4b1e      	ldr	r3, [pc, #120]	@ (800c390 <HAL_RCC_GetSysClockFreq+0x94>)
 800c318:	685b      	ldr	r3, [r3, #4]
 800c31a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	f003 030c 	and.w	r3, r3, #12
 800c322:	2b04      	cmp	r3, #4
 800c324:	d002      	beq.n	800c32c <HAL_RCC_GetSysClockFreq+0x30>
 800c326:	2b08      	cmp	r3, #8
 800c328:	d003      	beq.n	800c332 <HAL_RCC_GetSysClockFreq+0x36>
 800c32a:	e027      	b.n	800c37c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c32c:	4b19      	ldr	r3, [pc, #100]	@ (800c394 <HAL_RCC_GetSysClockFreq+0x98>)
 800c32e:	613b      	str	r3, [r7, #16]
      break;
 800c330:	e027      	b.n	800c382 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	0c9b      	lsrs	r3, r3, #18
 800c336:	f003 030f 	and.w	r3, r3, #15
 800c33a:	4a17      	ldr	r2, [pc, #92]	@ (800c398 <HAL_RCC_GetSysClockFreq+0x9c>)
 800c33c:	5cd3      	ldrb	r3, [r2, r3]
 800c33e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c346:	2b00      	cmp	r3, #0
 800c348:	d010      	beq.n	800c36c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800c34a:	4b11      	ldr	r3, [pc, #68]	@ (800c390 <HAL_RCC_GetSysClockFreq+0x94>)
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	0c5b      	lsrs	r3, r3, #17
 800c350:	f003 0301 	and.w	r3, r3, #1
 800c354:	4a11      	ldr	r2, [pc, #68]	@ (800c39c <HAL_RCC_GetSysClockFreq+0xa0>)
 800c356:	5cd3      	ldrb	r3, [r2, r3]
 800c358:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	4a0d      	ldr	r2, [pc, #52]	@ (800c394 <HAL_RCC_GetSysClockFreq+0x98>)
 800c35e:	fb03 f202 	mul.w	r2, r3, r2
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	fbb2 f3f3 	udiv	r3, r2, r3
 800c368:	617b      	str	r3, [r7, #20]
 800c36a:	e004      	b.n	800c376 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	4a0c      	ldr	r2, [pc, #48]	@ (800c3a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800c370:	fb02 f303 	mul.w	r3, r2, r3
 800c374:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	613b      	str	r3, [r7, #16]
      break;
 800c37a:	e002      	b.n	800c382 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800c37c:	4b05      	ldr	r3, [pc, #20]	@ (800c394 <HAL_RCC_GetSysClockFreq+0x98>)
 800c37e:	613b      	str	r3, [r7, #16]
      break;
 800c380:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c382:	693b      	ldr	r3, [r7, #16]
}
 800c384:	4618      	mov	r0, r3
 800c386:	371c      	adds	r7, #28
 800c388:	46bd      	mov	sp, r7
 800c38a:	bc80      	pop	{r7}
 800c38c:	4770      	bx	lr
 800c38e:	bf00      	nop
 800c390:	40021000 	.word	0x40021000
 800c394:	007a1200 	.word	0x007a1200
 800c398:	0800ee30 	.word	0x0800ee30
 800c39c:	0800ee40 	.word	0x0800ee40
 800c3a0:	003d0900 	.word	0x003d0900

0800c3a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c3a8:	4b02      	ldr	r3, [pc, #8]	@ (800c3b4 <HAL_RCC_GetHCLKFreq+0x10>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bc80      	pop	{r7}
 800c3b2:	4770      	bx	lr
 800c3b4:	20000f74 	.word	0x20000f74

0800c3b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c3bc:	f7ff fff2 	bl	800c3a4 <HAL_RCC_GetHCLKFreq>
 800c3c0:	4602      	mov	r2, r0
 800c3c2:	4b05      	ldr	r3, [pc, #20]	@ (800c3d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c3c4:	685b      	ldr	r3, [r3, #4]
 800c3c6:	0a1b      	lsrs	r3, r3, #8
 800c3c8:	f003 0307 	and.w	r3, r3, #7
 800c3cc:	4903      	ldr	r1, [pc, #12]	@ (800c3dc <HAL_RCC_GetPCLK1Freq+0x24>)
 800c3ce:	5ccb      	ldrb	r3, [r1, r3]
 800c3d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	bd80      	pop	{r7, pc}
 800c3d8:	40021000 	.word	0x40021000
 800c3dc:	0800ee28 	.word	0x0800ee28

0800c3e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c3e4:	f7ff ffde 	bl	800c3a4 <HAL_RCC_GetHCLKFreq>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	4b05      	ldr	r3, [pc, #20]	@ (800c400 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c3ec:	685b      	ldr	r3, [r3, #4]
 800c3ee:	0adb      	lsrs	r3, r3, #11
 800c3f0:	f003 0307 	and.w	r3, r3, #7
 800c3f4:	4903      	ldr	r1, [pc, #12]	@ (800c404 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c3f6:	5ccb      	ldrb	r3, [r1, r3]
 800c3f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	40021000 	.word	0x40021000
 800c404:	0800ee28 	.word	0x0800ee28

0800c408 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800c408:	b480      	push	{r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c410:	4b0a      	ldr	r3, [pc, #40]	@ (800c43c <RCC_Delay+0x34>)
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a0a      	ldr	r2, [pc, #40]	@ (800c440 <RCC_Delay+0x38>)
 800c416:	fba2 2303 	umull	r2, r3, r2, r3
 800c41a:	0a5b      	lsrs	r3, r3, #9
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	fb02 f303 	mul.w	r3, r2, r3
 800c422:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800c424:	bf00      	nop
  }
  while (Delay --);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	1e5a      	subs	r2, r3, #1
 800c42a:	60fa      	str	r2, [r7, #12]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d1f9      	bne.n	800c424 <RCC_Delay+0x1c>
}
 800c430:	bf00      	nop
 800c432:	bf00      	nop
 800c434:	3714      	adds	r7, #20
 800c436:	46bd      	mov	sp, r7
 800c438:	bc80      	pop	{r7}
 800c43a:	4770      	bx	lr
 800c43c:	20000f74 	.word	0x20000f74
 800c440:	10624dd3 	.word	0x10624dd3

0800c444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b082      	sub	sp, #8
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d101      	bne.n	800c456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c452:	2301      	movs	r3, #1
 800c454:	e041      	b.n	800c4da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d106      	bne.n	800c470 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f7fd fa22 	bl	80098b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2202      	movs	r2, #2
 800c474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	3304      	adds	r3, #4
 800c480:	4619      	mov	r1, r3
 800c482:	4610      	mov	r0, r2
 800c484:	f000 fa82 	bl	800c98c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2201      	movs	r2, #1
 800c48c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2201      	movs	r2, #1
 800c494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	2201      	movs	r2, #1
 800c49c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2201      	movs	r2, #1
 800c4b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2201      	movs	r2, #1
 800c4c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2201      	movs	r2, #1
 800c4cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2201      	movs	r2, #1
 800c4d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c4d8:	2300      	movs	r3, #0
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3708      	adds	r7, #8
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}
	...

0800c4e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b085      	sub	sp, #20
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c4f2:	b2db      	uxtb	r3, r3
 800c4f4:	2b01      	cmp	r3, #1
 800c4f6:	d001      	beq.n	800c4fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	e044      	b.n	800c586 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2202      	movs	r2, #2
 800c500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	68da      	ldr	r2, [r3, #12]
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f042 0201 	orr.w	r2, r2, #1
 800c512:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a1d      	ldr	r2, [pc, #116]	@ (800c590 <HAL_TIM_Base_Start_IT+0xac>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d018      	beq.n	800c550 <HAL_TIM_Base_Start_IT+0x6c>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4a1c      	ldr	r2, [pc, #112]	@ (800c594 <HAL_TIM_Base_Start_IT+0xb0>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d013      	beq.n	800c550 <HAL_TIM_Base_Start_IT+0x6c>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c530:	d00e      	beq.n	800c550 <HAL_TIM_Base_Start_IT+0x6c>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a18      	ldr	r2, [pc, #96]	@ (800c598 <HAL_TIM_Base_Start_IT+0xb4>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d009      	beq.n	800c550 <HAL_TIM_Base_Start_IT+0x6c>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a16      	ldr	r2, [pc, #88]	@ (800c59c <HAL_TIM_Base_Start_IT+0xb8>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d004      	beq.n	800c550 <HAL_TIM_Base_Start_IT+0x6c>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4a15      	ldr	r2, [pc, #84]	@ (800c5a0 <HAL_TIM_Base_Start_IT+0xbc>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d111      	bne.n	800c574 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	689b      	ldr	r3, [r3, #8]
 800c556:	f003 0307 	and.w	r3, r3, #7
 800c55a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2b06      	cmp	r3, #6
 800c560:	d010      	beq.n	800c584 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	681a      	ldr	r2, [r3, #0]
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f042 0201 	orr.w	r2, r2, #1
 800c570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c572:	e007      	b.n	800c584 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f042 0201 	orr.w	r2, r2, #1
 800c582:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3714      	adds	r7, #20
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bc80      	pop	{r7}
 800c58e:	4770      	bx	lr
 800c590:	40012c00 	.word	0x40012c00
 800c594:	40013400 	.word	0x40013400
 800c598:	40000400 	.word	0x40000400
 800c59c:	40000800 	.word	0x40000800
 800c5a0:	40000c00 	.word	0x40000c00

0800c5a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b082      	sub	sp, #8
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	691b      	ldr	r3, [r3, #16]
 800c5b2:	f003 0302 	and.w	r3, r3, #2
 800c5b6:	2b02      	cmp	r3, #2
 800c5b8:	d122      	bne.n	800c600 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	f003 0302 	and.w	r3, r3, #2
 800c5c4:	2b02      	cmp	r3, #2
 800c5c6:	d11b      	bne.n	800c600 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f06f 0202 	mvn.w	r2, #2
 800c5d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2201      	movs	r2, #1
 800c5d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	699b      	ldr	r3, [r3, #24]
 800c5de:	f003 0303 	and.w	r3, r3, #3
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d003      	beq.n	800c5ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f000 f9b4 	bl	800c954 <HAL_TIM_IC_CaptureCallback>
 800c5ec:	e005      	b.n	800c5fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 f9a7 	bl	800c942 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	f000 f9b6 	bl	800c966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	691b      	ldr	r3, [r3, #16]
 800c606:	f003 0304 	and.w	r3, r3, #4
 800c60a:	2b04      	cmp	r3, #4
 800c60c:	d122      	bne.n	800c654 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	68db      	ldr	r3, [r3, #12]
 800c614:	f003 0304 	and.w	r3, r3, #4
 800c618:	2b04      	cmp	r3, #4
 800c61a:	d11b      	bne.n	800c654 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f06f 0204 	mvn.w	r2, #4
 800c624:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2202      	movs	r2, #2
 800c62a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	699b      	ldr	r3, [r3, #24]
 800c632:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c636:	2b00      	cmp	r3, #0
 800c638:	d003      	beq.n	800c642 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 f98a 	bl	800c954 <HAL_TIM_IC_CaptureCallback>
 800c640:	e005      	b.n	800c64e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 f97d 	bl	800c942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 f98c 	bl	800c966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2200      	movs	r2, #0
 800c652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	691b      	ldr	r3, [r3, #16]
 800c65a:	f003 0308 	and.w	r3, r3, #8
 800c65e:	2b08      	cmp	r3, #8
 800c660:	d122      	bne.n	800c6a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	68db      	ldr	r3, [r3, #12]
 800c668:	f003 0308 	and.w	r3, r3, #8
 800c66c:	2b08      	cmp	r3, #8
 800c66e:	d11b      	bne.n	800c6a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f06f 0208 	mvn.w	r2, #8
 800c678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2204      	movs	r2, #4
 800c67e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	69db      	ldr	r3, [r3, #28]
 800c686:	f003 0303 	and.w	r3, r3, #3
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d003      	beq.n	800c696 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 f960 	bl	800c954 <HAL_TIM_IC_CaptureCallback>
 800c694:	e005      	b.n	800c6a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 f953 	bl	800c942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 f962 	bl	800c966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2200      	movs	r2, #0
 800c6a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	691b      	ldr	r3, [r3, #16]
 800c6ae:	f003 0310 	and.w	r3, r3, #16
 800c6b2:	2b10      	cmp	r3, #16
 800c6b4:	d122      	bne.n	800c6fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	68db      	ldr	r3, [r3, #12]
 800c6bc:	f003 0310 	and.w	r3, r3, #16
 800c6c0:	2b10      	cmp	r3, #16
 800c6c2:	d11b      	bne.n	800c6fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f06f 0210 	mvn.w	r2, #16
 800c6cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2208      	movs	r2, #8
 800c6d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	69db      	ldr	r3, [r3, #28]
 800c6da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d003      	beq.n	800c6ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f936 	bl	800c954 <HAL_TIM_IC_CaptureCallback>
 800c6e8:	e005      	b.n	800c6f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f000 f929 	bl	800c942 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6f0:	6878      	ldr	r0, [r7, #4]
 800c6f2:	f000 f938 	bl	800c966 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	691b      	ldr	r3, [r3, #16]
 800c702:	f003 0301 	and.w	r3, r3, #1
 800c706:	2b01      	cmp	r3, #1
 800c708:	d10e      	bne.n	800c728 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	f003 0301 	and.w	r3, r3, #1
 800c714:	2b01      	cmp	r3, #1
 800c716:	d107      	bne.n	800c728 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f06f 0201 	mvn.w	r2, #1
 800c720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f7fc fd5e 	bl	80091e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	691b      	ldr	r3, [r3, #16]
 800c72e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c732:	2b80      	cmp	r3, #128	@ 0x80
 800c734:	d10e      	bne.n	800c754 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c740:	2b80      	cmp	r3, #128	@ 0x80
 800c742:	d107      	bne.n	800c754 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c74c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 faa1 	bl	800cc96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	691b      	ldr	r3, [r3, #16]
 800c75a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c75e:	2b40      	cmp	r3, #64	@ 0x40
 800c760:	d10e      	bne.n	800c780 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	68db      	ldr	r3, [r3, #12]
 800c768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c76c:	2b40      	cmp	r3, #64	@ 0x40
 800c76e:	d107      	bne.n	800c780 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 f8fc 	bl	800c978 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	691b      	ldr	r3, [r3, #16]
 800c786:	f003 0320 	and.w	r3, r3, #32
 800c78a:	2b20      	cmp	r3, #32
 800c78c:	d10e      	bne.n	800c7ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	f003 0320 	and.w	r3, r3, #32
 800c798:	2b20      	cmp	r3, #32
 800c79a:	d107      	bne.n	800c7ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	f06f 0220 	mvn.w	r2, #32
 800c7a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f000 fa6c 	bl	800cc84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c7ac:	bf00      	nop
 800c7ae:	3708      	adds	r7, #8
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}

0800c7b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b084      	sub	sp, #16
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d101      	bne.n	800c7d0 <HAL_TIM_ConfigClockSource+0x1c>
 800c7cc:	2302      	movs	r3, #2
 800c7ce:	e0b4      	b.n	800c93a <HAL_TIM_ConfigClockSource+0x186>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2202      	movs	r2, #2
 800c7dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	689b      	ldr	r3, [r3, #8]
 800c7e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c7ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c7f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	68ba      	ldr	r2, [r7, #8]
 800c7fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c808:	d03e      	beq.n	800c888 <HAL_TIM_ConfigClockSource+0xd4>
 800c80a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c80e:	f200 8087 	bhi.w	800c920 <HAL_TIM_ConfigClockSource+0x16c>
 800c812:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c816:	f000 8086 	beq.w	800c926 <HAL_TIM_ConfigClockSource+0x172>
 800c81a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c81e:	d87f      	bhi.n	800c920 <HAL_TIM_ConfigClockSource+0x16c>
 800c820:	2b70      	cmp	r3, #112	@ 0x70
 800c822:	d01a      	beq.n	800c85a <HAL_TIM_ConfigClockSource+0xa6>
 800c824:	2b70      	cmp	r3, #112	@ 0x70
 800c826:	d87b      	bhi.n	800c920 <HAL_TIM_ConfigClockSource+0x16c>
 800c828:	2b60      	cmp	r3, #96	@ 0x60
 800c82a:	d050      	beq.n	800c8ce <HAL_TIM_ConfigClockSource+0x11a>
 800c82c:	2b60      	cmp	r3, #96	@ 0x60
 800c82e:	d877      	bhi.n	800c920 <HAL_TIM_ConfigClockSource+0x16c>
 800c830:	2b50      	cmp	r3, #80	@ 0x50
 800c832:	d03c      	beq.n	800c8ae <HAL_TIM_ConfigClockSource+0xfa>
 800c834:	2b50      	cmp	r3, #80	@ 0x50
 800c836:	d873      	bhi.n	800c920 <HAL_TIM_ConfigClockSource+0x16c>
 800c838:	2b40      	cmp	r3, #64	@ 0x40
 800c83a:	d058      	beq.n	800c8ee <HAL_TIM_ConfigClockSource+0x13a>
 800c83c:	2b40      	cmp	r3, #64	@ 0x40
 800c83e:	d86f      	bhi.n	800c920 <HAL_TIM_ConfigClockSource+0x16c>
 800c840:	2b30      	cmp	r3, #48	@ 0x30
 800c842:	d064      	beq.n	800c90e <HAL_TIM_ConfigClockSource+0x15a>
 800c844:	2b30      	cmp	r3, #48	@ 0x30
 800c846:	d86b      	bhi.n	800c920 <HAL_TIM_ConfigClockSource+0x16c>
 800c848:	2b20      	cmp	r3, #32
 800c84a:	d060      	beq.n	800c90e <HAL_TIM_ConfigClockSource+0x15a>
 800c84c:	2b20      	cmp	r3, #32
 800c84e:	d867      	bhi.n	800c920 <HAL_TIM_ConfigClockSource+0x16c>
 800c850:	2b00      	cmp	r3, #0
 800c852:	d05c      	beq.n	800c90e <HAL_TIM_ConfigClockSource+0x15a>
 800c854:	2b10      	cmp	r3, #16
 800c856:	d05a      	beq.n	800c90e <HAL_TIM_ConfigClockSource+0x15a>
 800c858:	e062      	b.n	800c920 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c86a:	f000 f980 	bl	800cb6e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c876:	68bb      	ldr	r3, [r7, #8]
 800c878:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c87c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	68ba      	ldr	r2, [r7, #8]
 800c884:	609a      	str	r2, [r3, #8]
      break;
 800c886:	e04f      	b.n	800c928 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c898:	f000 f969 	bl	800cb6e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	689a      	ldr	r2, [r3, #8]
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c8aa:	609a      	str	r2, [r3, #8]
      break;
 800c8ac:	e03c      	b.n	800c928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	f000 f8e0 	bl	800ca80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	2150      	movs	r1, #80	@ 0x50
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	f000 f937 	bl	800cb3a <TIM_ITRx_SetConfig>
      break;
 800c8cc:	e02c      	b.n	800c928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c8da:	461a      	mov	r2, r3
 800c8dc:	f000 f8fe 	bl	800cadc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	2160      	movs	r1, #96	@ 0x60
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	f000 f927 	bl	800cb3a <TIM_ITRx_SetConfig>
      break;
 800c8ec:	e01c      	b.n	800c928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	f000 f8c0 	bl	800ca80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	2140      	movs	r1, #64	@ 0x40
 800c906:	4618      	mov	r0, r3
 800c908:	f000 f917 	bl	800cb3a <TIM_ITRx_SetConfig>
      break;
 800c90c:	e00c      	b.n	800c928 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681a      	ldr	r2, [r3, #0]
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	4619      	mov	r1, r3
 800c918:	4610      	mov	r0, r2
 800c91a:	f000 f90e 	bl	800cb3a <TIM_ITRx_SetConfig>
      break;
 800c91e:	e003      	b.n	800c928 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c920:	2301      	movs	r3, #1
 800c922:	73fb      	strb	r3, [r7, #15]
      break;
 800c924:	e000      	b.n	800c928 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c926:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2201      	movs	r2, #1
 800c92c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2200      	movs	r2, #0
 800c934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c938:	7bfb      	ldrb	r3, [r7, #15]
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3710      	adds	r7, #16
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}

0800c942 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c942:	b480      	push	{r7}
 800c944:	b083      	sub	sp, #12
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c94a:	bf00      	nop
 800c94c:	370c      	adds	r7, #12
 800c94e:	46bd      	mov	sp, r7
 800c950:	bc80      	pop	{r7}
 800c952:	4770      	bx	lr

0800c954 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c95c:	bf00      	nop
 800c95e:	370c      	adds	r7, #12
 800c960:	46bd      	mov	sp, r7
 800c962:	bc80      	pop	{r7}
 800c964:	4770      	bx	lr

0800c966 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c966:	b480      	push	{r7}
 800c968:	b083      	sub	sp, #12
 800c96a:	af00      	add	r7, sp, #0
 800c96c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c96e:	bf00      	nop
 800c970:	370c      	adds	r7, #12
 800c972:	46bd      	mov	sp, r7
 800c974:	bc80      	pop	{r7}
 800c976:	4770      	bx	lr

0800c978 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c980:	bf00      	nop
 800c982:	370c      	adds	r7, #12
 800c984:	46bd      	mov	sp, r7
 800c986:	bc80      	pop	{r7}
 800c988:	4770      	bx	lr
	...

0800c98c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c98c:	b480      	push	{r7}
 800c98e:	b085      	sub	sp, #20
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
 800c994:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	4a33      	ldr	r2, [pc, #204]	@ (800ca6c <TIM_Base_SetConfig+0xe0>)
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d013      	beq.n	800c9cc <TIM_Base_SetConfig+0x40>
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	4a32      	ldr	r2, [pc, #200]	@ (800ca70 <TIM_Base_SetConfig+0xe4>)
 800c9a8:	4293      	cmp	r3, r2
 800c9aa:	d00f      	beq.n	800c9cc <TIM_Base_SetConfig+0x40>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9b2:	d00b      	beq.n	800c9cc <TIM_Base_SetConfig+0x40>
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	4a2f      	ldr	r2, [pc, #188]	@ (800ca74 <TIM_Base_SetConfig+0xe8>)
 800c9b8:	4293      	cmp	r3, r2
 800c9ba:	d007      	beq.n	800c9cc <TIM_Base_SetConfig+0x40>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	4a2e      	ldr	r2, [pc, #184]	@ (800ca78 <TIM_Base_SetConfig+0xec>)
 800c9c0:	4293      	cmp	r3, r2
 800c9c2:	d003      	beq.n	800c9cc <TIM_Base_SetConfig+0x40>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	4a2d      	ldr	r2, [pc, #180]	@ (800ca7c <TIM_Base_SetConfig+0xf0>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d108      	bne.n	800c9de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	68fa      	ldr	r2, [r7, #12]
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	4a22      	ldr	r2, [pc, #136]	@ (800ca6c <TIM_Base_SetConfig+0xe0>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d013      	beq.n	800ca0e <TIM_Base_SetConfig+0x82>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	4a21      	ldr	r2, [pc, #132]	@ (800ca70 <TIM_Base_SetConfig+0xe4>)
 800c9ea:	4293      	cmp	r3, r2
 800c9ec:	d00f      	beq.n	800ca0e <TIM_Base_SetConfig+0x82>
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9f4:	d00b      	beq.n	800ca0e <TIM_Base_SetConfig+0x82>
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	4a1e      	ldr	r2, [pc, #120]	@ (800ca74 <TIM_Base_SetConfig+0xe8>)
 800c9fa:	4293      	cmp	r3, r2
 800c9fc:	d007      	beq.n	800ca0e <TIM_Base_SetConfig+0x82>
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	4a1d      	ldr	r2, [pc, #116]	@ (800ca78 <TIM_Base_SetConfig+0xec>)
 800ca02:	4293      	cmp	r3, r2
 800ca04:	d003      	beq.n	800ca0e <TIM_Base_SetConfig+0x82>
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4a1c      	ldr	r2, [pc, #112]	@ (800ca7c <TIM_Base_SetConfig+0xf0>)
 800ca0a:	4293      	cmp	r3, r2
 800ca0c:	d108      	bne.n	800ca20 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ca14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	68fa      	ldr	r2, [r7, #12]
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	695b      	ldr	r3, [r3, #20]
 800ca2a:	4313      	orrs	r3, r2
 800ca2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	68fa      	ldr	r2, [r7, #12]
 800ca32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	689a      	ldr	r2, [r3, #8]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	681a      	ldr	r2, [r3, #0]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	4a09      	ldr	r2, [pc, #36]	@ (800ca6c <TIM_Base_SetConfig+0xe0>)
 800ca48:	4293      	cmp	r3, r2
 800ca4a:	d003      	beq.n	800ca54 <TIM_Base_SetConfig+0xc8>
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	4a08      	ldr	r2, [pc, #32]	@ (800ca70 <TIM_Base_SetConfig+0xe4>)
 800ca50:	4293      	cmp	r3, r2
 800ca52:	d103      	bne.n	800ca5c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	691a      	ldr	r2, [r3, #16]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	615a      	str	r2, [r3, #20]
}
 800ca62:	bf00      	nop
 800ca64:	3714      	adds	r7, #20
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bc80      	pop	{r7}
 800ca6a:	4770      	bx	lr
 800ca6c:	40012c00 	.word	0x40012c00
 800ca70:	40013400 	.word	0x40013400
 800ca74:	40000400 	.word	0x40000400
 800ca78:	40000800 	.word	0x40000800
 800ca7c:	40000c00 	.word	0x40000c00

0800ca80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b087      	sub	sp, #28
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	60f8      	str	r0, [r7, #12]
 800ca88:	60b9      	str	r1, [r7, #8]
 800ca8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	6a1b      	ldr	r3, [r3, #32]
 800ca90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	6a1b      	ldr	r3, [r3, #32]
 800ca96:	f023 0201 	bic.w	r2, r3, #1
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	699b      	ldr	r3, [r3, #24]
 800caa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800caaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	011b      	lsls	r3, r3, #4
 800cab0:	693a      	ldr	r2, [r7, #16]
 800cab2:	4313      	orrs	r3, r2
 800cab4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	f023 030a 	bic.w	r3, r3, #10
 800cabc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cabe:	697a      	ldr	r2, [r7, #20]
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	4313      	orrs	r3, r2
 800cac4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	693a      	ldr	r2, [r7, #16]
 800caca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	697a      	ldr	r2, [r7, #20]
 800cad0:	621a      	str	r2, [r3, #32]
}
 800cad2:	bf00      	nop
 800cad4:	371c      	adds	r7, #28
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bc80      	pop	{r7}
 800cada:	4770      	bx	lr

0800cadc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cadc:	b480      	push	{r7}
 800cade:	b087      	sub	sp, #28
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6a1b      	ldr	r3, [r3, #32]
 800caec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	6a1b      	ldr	r3, [r3, #32]
 800caf2:	f023 0210 	bic.w	r2, r3, #16
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	699b      	ldr	r3, [r3, #24]
 800cafe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800cb06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	031b      	lsls	r3, r3, #12
 800cb0c:	693a      	ldr	r2, [r7, #16]
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800cb18:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	011b      	lsls	r3, r3, #4
 800cb1e:	697a      	ldr	r2, [r7, #20]
 800cb20:	4313      	orrs	r3, r2
 800cb22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	693a      	ldr	r2, [r7, #16]
 800cb28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	697a      	ldr	r2, [r7, #20]
 800cb2e:	621a      	str	r2, [r3, #32]
}
 800cb30:	bf00      	nop
 800cb32:	371c      	adds	r7, #28
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bc80      	pop	{r7}
 800cb38:	4770      	bx	lr

0800cb3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800cb3a:	b480      	push	{r7}
 800cb3c:	b085      	sub	sp, #20
 800cb3e:	af00      	add	r7, sp, #0
 800cb40:	6078      	str	r0, [r7, #4]
 800cb42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	689b      	ldr	r3, [r3, #8]
 800cb48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800cb52:	683a      	ldr	r2, [r7, #0]
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	4313      	orrs	r3, r2
 800cb58:	f043 0307 	orr.w	r3, r3, #7
 800cb5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	68fa      	ldr	r2, [r7, #12]
 800cb62:	609a      	str	r2, [r3, #8]
}
 800cb64:	bf00      	nop
 800cb66:	3714      	adds	r7, #20
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bc80      	pop	{r7}
 800cb6c:	4770      	bx	lr

0800cb6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800cb6e:	b480      	push	{r7}
 800cb70:	b087      	sub	sp, #28
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	60f8      	str	r0, [r7, #12]
 800cb76:	60b9      	str	r1, [r7, #8]
 800cb78:	607a      	str	r2, [r7, #4]
 800cb7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	689b      	ldr	r3, [r3, #8]
 800cb80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cb88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	021a      	lsls	r2, r3, #8
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	431a      	orrs	r2, r3
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	4313      	orrs	r3, r2
 800cb96:	697a      	ldr	r2, [r7, #20]
 800cb98:	4313      	orrs	r3, r2
 800cb9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	697a      	ldr	r2, [r7, #20]
 800cba0:	609a      	str	r2, [r3, #8]
}
 800cba2:	bf00      	nop
 800cba4:	371c      	adds	r7, #28
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bc80      	pop	{r7}
 800cbaa:	4770      	bx	lr

0800cbac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b085      	sub	sp, #20
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d101      	bne.n	800cbc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cbc0:	2302      	movs	r3, #2
 800cbc2:	e050      	b.n	800cc66 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2202      	movs	r2, #2
 800cbd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	685b      	ldr	r3, [r3, #4]
 800cbda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	689b      	ldr	r3, [r3, #8]
 800cbe2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cbea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	68fa      	ldr	r2, [r7, #12]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	68fa      	ldr	r2, [r7, #12]
 800cbfc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	4a1b      	ldr	r2, [pc, #108]	@ (800cc70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800cc04:	4293      	cmp	r3, r2
 800cc06:	d018      	beq.n	800cc3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	4a19      	ldr	r2, [pc, #100]	@ (800cc74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800cc0e:	4293      	cmp	r3, r2
 800cc10:	d013      	beq.n	800cc3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cc1a:	d00e      	beq.n	800cc3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	4a15      	ldr	r2, [pc, #84]	@ (800cc78 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800cc22:	4293      	cmp	r3, r2
 800cc24:	d009      	beq.n	800cc3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	4a14      	ldr	r2, [pc, #80]	@ (800cc7c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cc2c:	4293      	cmp	r3, r2
 800cc2e:	d004      	beq.n	800cc3a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4a12      	ldr	r2, [pc, #72]	@ (800cc80 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800cc36:	4293      	cmp	r3, r2
 800cc38:	d10c      	bne.n	800cc54 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	685b      	ldr	r3, [r3, #4]
 800cc46:	68ba      	ldr	r2, [r7, #8]
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	68ba      	ldr	r2, [r7, #8]
 800cc52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	2201      	movs	r2, #1
 800cc58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3714      	adds	r7, #20
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bc80      	pop	{r7}
 800cc6e:	4770      	bx	lr
 800cc70:	40012c00 	.word	0x40012c00
 800cc74:	40013400 	.word	0x40013400
 800cc78:	40000400 	.word	0x40000400
 800cc7c:	40000800 	.word	0x40000800
 800cc80:	40000c00 	.word	0x40000c00

0800cc84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b083      	sub	sp, #12
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cc8c:	bf00      	nop
 800cc8e:	370c      	adds	r7, #12
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bc80      	pop	{r7}
 800cc94:	4770      	bx	lr

0800cc96 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cc96:	b480      	push	{r7}
 800cc98:	b083      	sub	sp, #12
 800cc9a:	af00      	add	r7, sp, #0
 800cc9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cc9e:	bf00      	nop
 800cca0:	370c      	adds	r7, #12
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bc80      	pop	{r7}
 800cca6:	4770      	bx	lr

0800cca8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b082      	sub	sp, #8
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d101      	bne.n	800ccba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	e042      	b.n	800cd40 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ccc0:	b2db      	uxtb	r3, r3
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d106      	bne.n	800ccd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f7fc fe16 	bl	8009900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2224      	movs	r2, #36	@ 0x24
 800ccd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	68da      	ldr	r2, [r3, #12]
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800ccea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f000 fd11 	bl	800d714 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	691a      	ldr	r2, [r3, #16]
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cd00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	695a      	ldr	r2, [r3, #20]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cd10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	68da      	ldr	r2, [r3, #12]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cd20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2200      	movs	r2, #0
 800cd26:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2220      	movs	r2, #32
 800cd2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2220      	movs	r2, #32
 800cd34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cd3e:	2300      	movs	r3, #0
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3708      	adds	r7, #8
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b085      	sub	sp, #20
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	60f8      	str	r0, [r7, #12]
 800cd50:	60b9      	str	r1, [r7, #8]
 800cd52:	4613      	mov	r3, r2
 800cd54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cd5c:	b2db      	uxtb	r3, r3
 800cd5e:	2b20      	cmp	r3, #32
 800cd60:	d121      	bne.n	800cda6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d002      	beq.n	800cd6e <HAL_UART_Transmit_IT+0x26>
 800cd68:	88fb      	ldrh	r3, [r7, #6]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d101      	bne.n	800cd72 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	e01a      	b.n	800cda8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	68ba      	ldr	r2, [r7, #8]
 800cd76:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	88fa      	ldrh	r2, [r7, #6]
 800cd7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	88fa      	ldrh	r2, [r7, #6]
 800cd82:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2200      	movs	r2, #0
 800cd88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	2221      	movs	r2, #33	@ 0x21
 800cd8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	68da      	ldr	r2, [r3, #12]
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cda0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800cda2:	2300      	movs	r3, #0
 800cda4:	e000      	b.n	800cda8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800cda6:	2302      	movs	r3, #2
  }
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3714      	adds	r7, #20
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bc80      	pop	{r7}
 800cdb0:	4770      	bx	lr

0800cdb2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cdb2:	b580      	push	{r7, lr}
 800cdb4:	b084      	sub	sp, #16
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	60f8      	str	r0, [r7, #12]
 800cdba:	60b9      	str	r1, [r7, #8]
 800cdbc:	4613      	mov	r3, r2
 800cdbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cdc6:	b2db      	uxtb	r3, r3
 800cdc8:	2b20      	cmp	r3, #32
 800cdca:	d112      	bne.n	800cdf2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d002      	beq.n	800cdd8 <HAL_UART_Receive_IT+0x26>
 800cdd2:	88fb      	ldrh	r3, [r7, #6]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d101      	bne.n	800cddc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800cdd8:	2301      	movs	r3, #1
 800cdda:	e00b      	b.n	800cdf4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	2200      	movs	r2, #0
 800cde0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cde2:	88fb      	ldrh	r3, [r7, #6]
 800cde4:	461a      	mov	r2, r3
 800cde6:	68b9      	ldr	r1, [r7, #8]
 800cde8:	68f8      	ldr	r0, [r7, #12]
 800cdea:	f000 fabf 	bl	800d36c <UART_Start_Receive_IT>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	e000      	b.n	800cdf4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800cdf2:	2302      	movs	r3, #2
  }
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3710      	adds	r7, #16
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b0ba      	sub	sp, #232	@ 0xe8
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	68db      	ldr	r3, [r3, #12]
 800ce14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	695b      	ldr	r3, [r3, #20]
 800ce1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800ce22:	2300      	movs	r3, #0
 800ce24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ce2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce32:	f003 030f 	and.w	r3, r3, #15
 800ce36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800ce3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d10f      	bne.n	800ce62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ce42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce46:	f003 0320 	and.w	r3, r3, #32
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d009      	beq.n	800ce62 <HAL_UART_IRQHandler+0x66>
 800ce4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce52:	f003 0320 	and.w	r3, r3, #32
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d003      	beq.n	800ce62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 fb9c 	bl	800d598 <UART_Receive_IT>
      return;
 800ce60:	e25b      	b.n	800d31a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ce62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	f000 80de 	beq.w	800d028 <HAL_UART_IRQHandler+0x22c>
 800ce6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ce70:	f003 0301 	and.w	r3, r3, #1
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d106      	bne.n	800ce86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ce78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce7c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	f000 80d1 	beq.w	800d028 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ce86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce8a:	f003 0301 	and.w	r3, r3, #1
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d00b      	beq.n	800ceaa <HAL_UART_IRQHandler+0xae>
 800ce92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d005      	beq.n	800ceaa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cea2:	f043 0201 	orr.w	r2, r3, #1
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ceaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ceae:	f003 0304 	and.w	r3, r3, #4
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d00b      	beq.n	800cece <HAL_UART_IRQHandler+0xd2>
 800ceb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ceba:	f003 0301 	and.w	r3, r3, #1
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d005      	beq.n	800cece <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cec6:	f043 0202 	orr.w	r2, r3, #2
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ced2:	f003 0302 	and.w	r3, r3, #2
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d00b      	beq.n	800cef2 <HAL_UART_IRQHandler+0xf6>
 800ceda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cede:	f003 0301 	and.w	r3, r3, #1
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d005      	beq.n	800cef2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ceea:	f043 0204 	orr.w	r2, r3, #4
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800cef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cef6:	f003 0308 	and.w	r3, r3, #8
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d011      	beq.n	800cf22 <HAL_UART_IRQHandler+0x126>
 800cefe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf02:	f003 0320 	and.w	r3, r3, #32
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d105      	bne.n	800cf16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800cf0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cf0e:	f003 0301 	and.w	r3, r3, #1
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d005      	beq.n	800cf22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf1a:	f043 0208 	orr.w	r2, r3, #8
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	f000 81f2 	beq.w	800d310 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cf2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cf30:	f003 0320 	and.w	r3, r3, #32
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d008      	beq.n	800cf4a <HAL_UART_IRQHandler+0x14e>
 800cf38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cf3c:	f003 0320 	and.w	r3, r3, #32
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d002      	beq.n	800cf4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 fb27 	bl	800d598 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	695b      	ldr	r3, [r3, #20]
 800cf50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	bf14      	ite	ne
 800cf58:	2301      	movne	r3, #1
 800cf5a:	2300      	moveq	r3, #0
 800cf5c:	b2db      	uxtb	r3, r3
 800cf5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf66:	f003 0308 	and.w	r3, r3, #8
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d103      	bne.n	800cf76 <HAL_UART_IRQHandler+0x17a>
 800cf6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d04f      	beq.n	800d016 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 fa31 	bl	800d3de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	695b      	ldr	r3, [r3, #20]
 800cf82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d041      	beq.n	800d00e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	3314      	adds	r3, #20
 800cf90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cf98:	e853 3f00 	ldrex	r3, [r3]
 800cf9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cfa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cfa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cfa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	3314      	adds	r3, #20
 800cfb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cfb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cfba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800cfc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800cfc6:	e841 2300 	strex	r3, r2, [r1]
 800cfca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800cfce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d1d9      	bne.n	800cf8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d013      	beq.n	800d006 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfe2:	4a7e      	ldr	r2, [pc, #504]	@ (800d1dc <HAL_UART_IRQHandler+0x3e0>)
 800cfe4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7fd f848 	bl	800a080 <HAL_DMA_Abort_IT>
 800cff0:	4603      	mov	r3, r0
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d016      	beq.n	800d024 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cffc:	687a      	ldr	r2, [r7, #4]
 800cffe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800d000:	4610      	mov	r0, r2
 800d002:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d004:	e00e      	b.n	800d024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d006:	6878      	ldr	r0, [r7, #4]
 800d008:	f000 f99c 	bl	800d344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d00c:	e00a      	b.n	800d024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f000 f998 	bl	800d344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d014:	e006      	b.n	800d024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f000 f994 	bl	800d344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2200      	movs	r2, #0
 800d020:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800d022:	e175      	b.n	800d310 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d024:	bf00      	nop
    return;
 800d026:	e173      	b.n	800d310 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d02c:	2b01      	cmp	r3, #1
 800d02e:	f040 814f 	bne.w	800d2d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d036:	f003 0310 	and.w	r3, r3, #16
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	f000 8148 	beq.w	800d2d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d044:	f003 0310 	and.w	r3, r3, #16
 800d048:	2b00      	cmp	r3, #0
 800d04a:	f000 8141 	beq.w	800d2d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d04e:	2300      	movs	r3, #0
 800d050:	60bb      	str	r3, [r7, #8]
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	60bb      	str	r3, [r7, #8]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	685b      	ldr	r3, [r3, #4]
 800d060:	60bb      	str	r3, [r7, #8]
 800d062:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	695b      	ldr	r3, [r3, #20]
 800d06a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d06e:	2b00      	cmp	r3, #0
 800d070:	f000 80b6 	beq.w	800d1e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d080:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800d084:	2b00      	cmp	r3, #0
 800d086:	f000 8145 	beq.w	800d314 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d08e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d092:	429a      	cmp	r2, r3
 800d094:	f080 813e 	bcs.w	800d314 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800d09e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0a4:	699b      	ldr	r3, [r3, #24]
 800d0a6:	2b20      	cmp	r3, #32
 800d0a8:	f000 8088 	beq.w	800d1bc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	330c      	adds	r3, #12
 800d0b2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d0ba:	e853 3f00 	ldrex	r3, [r3]
 800d0be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800d0c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800d0c6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d0ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	330c      	adds	r3, #12
 800d0d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800d0d8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d0dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800d0e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800d0e8:	e841 2300 	strex	r3, r2, [r1]
 800d0ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800d0f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d1d9      	bne.n	800d0ac <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	3314      	adds	r3, #20
 800d0fe:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d100:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d102:	e853 3f00 	ldrex	r3, [r3]
 800d106:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800d108:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d10a:	f023 0301 	bic.w	r3, r3, #1
 800d10e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	3314      	adds	r3, #20
 800d118:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800d11c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800d120:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d122:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800d124:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800d128:	e841 2300 	strex	r3, r2, [r1]
 800d12c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800d12e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d130:	2b00      	cmp	r3, #0
 800d132:	d1e1      	bne.n	800d0f8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	3314      	adds	r3, #20
 800d13a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d13c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d13e:	e853 3f00 	ldrex	r3, [r3]
 800d142:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800d144:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d146:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d14a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	3314      	adds	r3, #20
 800d154:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800d158:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800d15a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d15c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d15e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800d160:	e841 2300 	strex	r3, r2, [r1]
 800d164:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800d166:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d1e3      	bne.n	800d134 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2220      	movs	r2, #32
 800d170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	330c      	adds	r3, #12
 800d180:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d184:	e853 3f00 	ldrex	r3, [r3]
 800d188:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800d18a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d18c:	f023 0310 	bic.w	r3, r3, #16
 800d190:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	330c      	adds	r3, #12
 800d19a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800d19e:	65ba      	str	r2, [r7, #88]	@ 0x58
 800d1a0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1a2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d1a4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800d1a6:	e841 2300 	strex	r3, r2, [r1]
 800d1aa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800d1ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d1e3      	bne.n	800d17a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f7fc ff27 	bl	800a00a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2202      	movs	r2, #2
 800d1c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	1ad3      	subs	r3, r2, r3
 800d1ce:	b29b      	uxth	r3, r3
 800d1d0:	4619      	mov	r1, r3
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f000 f8bf 	bl	800d356 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d1d8:	e09c      	b.n	800d314 <HAL_UART_IRQHandler+0x518>
 800d1da:	bf00      	nop
 800d1dc:	0800d4a3 	.word	0x0800d4a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d1e8:	b29b      	uxth	r3, r3
 800d1ea:	1ad3      	subs	r3, r2, r3
 800d1ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	f000 808e 	beq.w	800d318 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d1fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d200:	2b00      	cmp	r3, #0
 800d202:	f000 8089 	beq.w	800d318 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	330c      	adds	r3, #12
 800d20c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d20e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d210:	e853 3f00 	ldrex	r3, [r3]
 800d214:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d218:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d21c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	330c      	adds	r3, #12
 800d226:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d22a:	647a      	str	r2, [r7, #68]	@ 0x44
 800d22c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d22e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d230:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d232:	e841 2300 	strex	r3, r2, [r1]
 800d236:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d1e3      	bne.n	800d206 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	3314      	adds	r3, #20
 800d244:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d248:	e853 3f00 	ldrex	r3, [r3]
 800d24c:	623b      	str	r3, [r7, #32]
   return(result);
 800d24e:	6a3b      	ldr	r3, [r7, #32]
 800d250:	f023 0301 	bic.w	r3, r3, #1
 800d254:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	3314      	adds	r3, #20
 800d25e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d262:	633a      	str	r2, [r7, #48]	@ 0x30
 800d264:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d266:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d26a:	e841 2300 	strex	r3, r2, [r1]
 800d26e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d272:	2b00      	cmp	r3, #0
 800d274:	d1e3      	bne.n	800d23e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2220      	movs	r2, #32
 800d27a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2200      	movs	r2, #0
 800d282:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	330c      	adds	r3, #12
 800d28a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d28c:	693b      	ldr	r3, [r7, #16]
 800d28e:	e853 3f00 	ldrex	r3, [r3]
 800d292:	60fb      	str	r3, [r7, #12]
   return(result);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f023 0310 	bic.w	r3, r3, #16
 800d29a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	330c      	adds	r3, #12
 800d2a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d2a8:	61fa      	str	r2, [r7, #28]
 800d2aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2ac:	69b9      	ldr	r1, [r7, #24]
 800d2ae:	69fa      	ldr	r2, [r7, #28]
 800d2b0:	e841 2300 	strex	r3, r2, [r1]
 800d2b4:	617b      	str	r3, [r7, #20]
   return(result);
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d1e3      	bne.n	800d284 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2202      	movs	r2, #2
 800d2c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d2c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d2c6:	4619      	mov	r1, r3
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f000 f844 	bl	800d356 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d2ce:	e023      	b.n	800d318 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d2d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d009      	beq.n	800d2f0 <HAL_UART_IRQHandler+0x4f4>
 800d2dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d2e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d003      	beq.n	800d2f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d2e8:	6878      	ldr	r0, [r7, #4]
 800d2ea:	f000 f8ee 	bl	800d4ca <UART_Transmit_IT>
    return;
 800d2ee:	e014      	b.n	800d31a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d2f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d2f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d00e      	beq.n	800d31a <HAL_UART_IRQHandler+0x51e>
 800d2fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d304:	2b00      	cmp	r3, #0
 800d306:	d008      	beq.n	800d31a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 f92d 	bl	800d568 <UART_EndTransmit_IT>
    return;
 800d30e:	e004      	b.n	800d31a <HAL_UART_IRQHandler+0x51e>
    return;
 800d310:	bf00      	nop
 800d312:	e002      	b.n	800d31a <HAL_UART_IRQHandler+0x51e>
      return;
 800d314:	bf00      	nop
 800d316:	e000      	b.n	800d31a <HAL_UART_IRQHandler+0x51e>
      return;
 800d318:	bf00      	nop
  }
}
 800d31a:	37e8      	adds	r7, #232	@ 0xe8
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}

0800d320 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d320:	b480      	push	{r7}
 800d322:	b083      	sub	sp, #12
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d328:	bf00      	nop
 800d32a:	370c      	adds	r7, #12
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bc80      	pop	{r7}
 800d330:	4770      	bx	lr

0800d332 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d332:	b480      	push	{r7}
 800d334:	b083      	sub	sp, #12
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d33a:	bf00      	nop
 800d33c:	370c      	adds	r7, #12
 800d33e:	46bd      	mov	sp, r7
 800d340:	bc80      	pop	{r7}
 800d342:	4770      	bx	lr

0800d344 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d344:	b480      	push	{r7}
 800d346:	b083      	sub	sp, #12
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d34c:	bf00      	nop
 800d34e:	370c      	adds	r7, #12
 800d350:	46bd      	mov	sp, r7
 800d352:	bc80      	pop	{r7}
 800d354:	4770      	bx	lr

0800d356 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d356:	b480      	push	{r7}
 800d358:	b083      	sub	sp, #12
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
 800d35e:	460b      	mov	r3, r1
 800d360:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d362:	bf00      	nop
 800d364:	370c      	adds	r7, #12
 800d366:	46bd      	mov	sp, r7
 800d368:	bc80      	pop	{r7}
 800d36a:	4770      	bx	lr

0800d36c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b085      	sub	sp, #20
 800d370:	af00      	add	r7, sp, #0
 800d372:	60f8      	str	r0, [r7, #12]
 800d374:	60b9      	str	r1, [r7, #8]
 800d376:	4613      	mov	r3, r2
 800d378:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	68ba      	ldr	r2, [r7, #8]
 800d37e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	88fa      	ldrh	r2, [r7, #6]
 800d384:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	88fa      	ldrh	r2, [r7, #6]
 800d38a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2200      	movs	r2, #0
 800d390:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2222      	movs	r2, #34	@ 0x22
 800d396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	691b      	ldr	r3, [r3, #16]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d007      	beq.n	800d3b2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	68da      	ldr	r2, [r3, #12]
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d3b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	695a      	ldr	r2, [r3, #20]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f042 0201 	orr.w	r2, r2, #1
 800d3c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	68da      	ldr	r2, [r3, #12]
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f042 0220 	orr.w	r2, r2, #32
 800d3d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800d3d2:	2300      	movs	r3, #0
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3714      	adds	r7, #20
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bc80      	pop	{r7}
 800d3dc:	4770      	bx	lr

0800d3de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d3de:	b480      	push	{r7}
 800d3e0:	b095      	sub	sp, #84	@ 0x54
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	330c      	adds	r3, #12
 800d3ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d3ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d3f0:	e853 3f00 	ldrex	r3, [r3]
 800d3f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d3fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	330c      	adds	r3, #12
 800d404:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d406:	643a      	str	r2, [r7, #64]	@ 0x40
 800d408:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d40a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d40c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d40e:	e841 2300 	strex	r3, r2, [r1]
 800d412:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d416:	2b00      	cmp	r3, #0
 800d418:	d1e5      	bne.n	800d3e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	3314      	adds	r3, #20
 800d420:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d422:	6a3b      	ldr	r3, [r7, #32]
 800d424:	e853 3f00 	ldrex	r3, [r3]
 800d428:	61fb      	str	r3, [r7, #28]
   return(result);
 800d42a:	69fb      	ldr	r3, [r7, #28]
 800d42c:	f023 0301 	bic.w	r3, r3, #1
 800d430:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	3314      	adds	r3, #20
 800d438:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d43a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d43c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d43e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d440:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d442:	e841 2300 	strex	r3, r2, [r1]
 800d446:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d1e5      	bne.n	800d41a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d452:	2b01      	cmp	r3, #1
 800d454:	d119      	bne.n	800d48a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	330c      	adds	r3, #12
 800d45c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	e853 3f00 	ldrex	r3, [r3]
 800d464:	60bb      	str	r3, [r7, #8]
   return(result);
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	f023 0310 	bic.w	r3, r3, #16
 800d46c:	647b      	str	r3, [r7, #68]	@ 0x44
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	330c      	adds	r3, #12
 800d474:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d476:	61ba      	str	r2, [r7, #24]
 800d478:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d47a:	6979      	ldr	r1, [r7, #20]
 800d47c:	69ba      	ldr	r2, [r7, #24]
 800d47e:	e841 2300 	strex	r3, r2, [r1]
 800d482:	613b      	str	r3, [r7, #16]
   return(result);
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d1e5      	bne.n	800d456 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	2220      	movs	r2, #32
 800d48e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2200      	movs	r2, #0
 800d496:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d498:	bf00      	nop
 800d49a:	3754      	adds	r7, #84	@ 0x54
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bc80      	pop	{r7}
 800d4a0:	4770      	bx	lr

0800d4a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d4a2:	b580      	push	{r7, lr}
 800d4a4:	b084      	sub	sp, #16
 800d4a6:	af00      	add	r7, sp, #0
 800d4a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d4bc:	68f8      	ldr	r0, [r7, #12]
 800d4be:	f7ff ff41 	bl	800d344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d4c2:	bf00      	nop
 800d4c4:	3710      	adds	r7, #16
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}

0800d4ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d4ca:	b480      	push	{r7}
 800d4cc:	b085      	sub	sp, #20
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d4d8:	b2db      	uxtb	r3, r3
 800d4da:	2b21      	cmp	r3, #33	@ 0x21
 800d4dc:	d13e      	bne.n	800d55c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	689b      	ldr	r3, [r3, #8]
 800d4e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d4e6:	d114      	bne.n	800d512 <UART_Transmit_IT+0x48>
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	691b      	ldr	r3, [r3, #16]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d110      	bne.n	800d512 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	6a1b      	ldr	r3, [r3, #32]
 800d4f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	881b      	ldrh	r3, [r3, #0]
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d504:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6a1b      	ldr	r3, [r3, #32]
 800d50a:	1c9a      	adds	r2, r3, #2
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	621a      	str	r2, [r3, #32]
 800d510:	e008      	b.n	800d524 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6a1b      	ldr	r3, [r3, #32]
 800d516:	1c59      	adds	r1, r3, #1
 800d518:	687a      	ldr	r2, [r7, #4]
 800d51a:	6211      	str	r1, [r2, #32]
 800d51c:	781a      	ldrb	r2, [r3, #0]
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d528:	b29b      	uxth	r3, r3
 800d52a:	3b01      	subs	r3, #1
 800d52c:	b29b      	uxth	r3, r3
 800d52e:	687a      	ldr	r2, [r7, #4]
 800d530:	4619      	mov	r1, r3
 800d532:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d534:	2b00      	cmp	r3, #0
 800d536:	d10f      	bne.n	800d558 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	68da      	ldr	r2, [r3, #12]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d546:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	68da      	ldr	r2, [r3, #12]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d556:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d558:	2300      	movs	r3, #0
 800d55a:	e000      	b.n	800d55e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d55c:	2302      	movs	r3, #2
  }
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3714      	adds	r7, #20
 800d562:	46bd      	mov	sp, r7
 800d564:	bc80      	pop	{r7}
 800d566:	4770      	bx	lr

0800d568 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	68da      	ldr	r2, [r3, #12]
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d57e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2220      	movs	r2, #32
 800d584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f7ff fec9 	bl	800d320 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d58e:	2300      	movs	r3, #0
}
 800d590:	4618      	mov	r0, r3
 800d592:	3708      	adds	r7, #8
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}

0800d598 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b08c      	sub	sp, #48	@ 0x30
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d5a6:	b2db      	uxtb	r3, r3
 800d5a8:	2b22      	cmp	r3, #34	@ 0x22
 800d5aa:	f040 80ae 	bne.w	800d70a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	689b      	ldr	r3, [r3, #8]
 800d5b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5b6:	d117      	bne.n	800d5e8 <UART_Receive_IT+0x50>
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	691b      	ldr	r3, [r3, #16]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d113      	bne.n	800d5e8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	685b      	ldr	r3, [r3, #4]
 800d5d0:	b29b      	uxth	r3, r3
 800d5d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5d6:	b29a      	uxth	r2, r3
 800d5d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5e0:	1c9a      	adds	r2, r3, #2
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	629a      	str	r2, [r3, #40]	@ 0x28
 800d5e6:	e026      	b.n	800d636 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d5ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	689b      	ldr	r3, [r3, #8]
 800d5f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d5fa:	d007      	beq.n	800d60c <UART_Receive_IT+0x74>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	689b      	ldr	r3, [r3, #8]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d10a      	bne.n	800d61a <UART_Receive_IT+0x82>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	691b      	ldr	r3, [r3, #16]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d106      	bne.n	800d61a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	685b      	ldr	r3, [r3, #4]
 800d612:	b2da      	uxtb	r2, r3
 800d614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d616:	701a      	strb	r2, [r3, #0]
 800d618:	e008      	b.n	800d62c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	685b      	ldr	r3, [r3, #4]
 800d620:	b2db      	uxtb	r3, r3
 800d622:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d626:	b2da      	uxtb	r2, r3
 800d628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d62a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d630:	1c5a      	adds	r2, r3, #1
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	3b01      	subs	r3, #1
 800d63e:	b29b      	uxth	r3, r3
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	4619      	mov	r1, r3
 800d644:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d646:	2b00      	cmp	r3, #0
 800d648:	d15d      	bne.n	800d706 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	68da      	ldr	r2, [r3, #12]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f022 0220 	bic.w	r2, r2, #32
 800d658:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	68da      	ldr	r2, [r3, #12]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d668:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	695a      	ldr	r2, [r3, #20]
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	f022 0201 	bic.w	r2, r2, #1
 800d678:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2220      	movs	r2, #32
 800d67e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d68c:	2b01      	cmp	r3, #1
 800d68e:	d135      	bne.n	800d6fc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2200      	movs	r2, #0
 800d694:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	330c      	adds	r3, #12
 800d69c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d69e:	697b      	ldr	r3, [r7, #20]
 800d6a0:	e853 3f00 	ldrex	r3, [r3]
 800d6a4:	613b      	str	r3, [r7, #16]
   return(result);
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	f023 0310 	bic.w	r3, r3, #16
 800d6ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	330c      	adds	r3, #12
 800d6b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d6b6:	623a      	str	r2, [r7, #32]
 800d6b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6ba:	69f9      	ldr	r1, [r7, #28]
 800d6bc:	6a3a      	ldr	r2, [r7, #32]
 800d6be:	e841 2300 	strex	r3, r2, [r1]
 800d6c2:	61bb      	str	r3, [r7, #24]
   return(result);
 800d6c4:	69bb      	ldr	r3, [r7, #24]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d1e5      	bne.n	800d696 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	f003 0310 	and.w	r3, r3, #16
 800d6d4:	2b10      	cmp	r3, #16
 800d6d6:	d10a      	bne.n	800d6ee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d6d8:	2300      	movs	r3, #0
 800d6da:	60fb      	str	r3, [r7, #12]
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	60fb      	str	r3, [r7, #12]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	685b      	ldr	r3, [r3, #4]
 800d6ea:	60fb      	str	r3, [r7, #12]
 800d6ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d6f2:	4619      	mov	r1, r3
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f7ff fe2e 	bl	800d356 <HAL_UARTEx_RxEventCallback>
 800d6fa:	e002      	b.n	800d702 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f7ff fe18 	bl	800d332 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d702:	2300      	movs	r3, #0
 800d704:	e002      	b.n	800d70c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d706:	2300      	movs	r3, #0
 800d708:	e000      	b.n	800d70c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d70a:	2302      	movs	r3, #2
  }
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3730      	adds	r7, #48	@ 0x30
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}

0800d714 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	691b      	ldr	r3, [r3, #16]
 800d722:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	68da      	ldr	r2, [r3, #12]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	430a      	orrs	r2, r1
 800d730:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	689a      	ldr	r2, [r3, #8]
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	691b      	ldr	r3, [r3, #16]
 800d73a:	431a      	orrs	r2, r3
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	695b      	ldr	r3, [r3, #20]
 800d740:	4313      	orrs	r3, r2
 800d742:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	68db      	ldr	r3, [r3, #12]
 800d74a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800d74e:	f023 030c 	bic.w	r3, r3, #12
 800d752:	687a      	ldr	r2, [r7, #4]
 800d754:	6812      	ldr	r2, [r2, #0]
 800d756:	68b9      	ldr	r1, [r7, #8]
 800d758:	430b      	orrs	r3, r1
 800d75a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	695b      	ldr	r3, [r3, #20]
 800d762:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	699a      	ldr	r2, [r3, #24]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	430a      	orrs	r2, r1
 800d770:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	4a2c      	ldr	r2, [pc, #176]	@ (800d828 <UART_SetConfig+0x114>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d103      	bne.n	800d784 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800d77c:	f7fe fe30 	bl	800c3e0 <HAL_RCC_GetPCLK2Freq>
 800d780:	60f8      	str	r0, [r7, #12]
 800d782:	e002      	b.n	800d78a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800d784:	f7fe fe18 	bl	800c3b8 <HAL_RCC_GetPCLK1Freq>
 800d788:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d78a:	68fa      	ldr	r2, [r7, #12]
 800d78c:	4613      	mov	r3, r2
 800d78e:	009b      	lsls	r3, r3, #2
 800d790:	4413      	add	r3, r2
 800d792:	009a      	lsls	r2, r3, #2
 800d794:	441a      	add	r2, r3
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	685b      	ldr	r3, [r3, #4]
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7a0:	4a22      	ldr	r2, [pc, #136]	@ (800d82c <UART_SetConfig+0x118>)
 800d7a2:	fba2 2303 	umull	r2, r3, r2, r3
 800d7a6:	095b      	lsrs	r3, r3, #5
 800d7a8:	0119      	lsls	r1, r3, #4
 800d7aa:	68fa      	ldr	r2, [r7, #12]
 800d7ac:	4613      	mov	r3, r2
 800d7ae:	009b      	lsls	r3, r3, #2
 800d7b0:	4413      	add	r3, r2
 800d7b2:	009a      	lsls	r2, r3, #2
 800d7b4:	441a      	add	r2, r3
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	685b      	ldr	r3, [r3, #4]
 800d7ba:	009b      	lsls	r3, r3, #2
 800d7bc:	fbb2 f2f3 	udiv	r2, r2, r3
 800d7c0:	4b1a      	ldr	r3, [pc, #104]	@ (800d82c <UART_SetConfig+0x118>)
 800d7c2:	fba3 0302 	umull	r0, r3, r3, r2
 800d7c6:	095b      	lsrs	r3, r3, #5
 800d7c8:	2064      	movs	r0, #100	@ 0x64
 800d7ca:	fb00 f303 	mul.w	r3, r0, r3
 800d7ce:	1ad3      	subs	r3, r2, r3
 800d7d0:	011b      	lsls	r3, r3, #4
 800d7d2:	3332      	adds	r3, #50	@ 0x32
 800d7d4:	4a15      	ldr	r2, [pc, #84]	@ (800d82c <UART_SetConfig+0x118>)
 800d7d6:	fba2 2303 	umull	r2, r3, r2, r3
 800d7da:	095b      	lsrs	r3, r3, #5
 800d7dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d7e0:	4419      	add	r1, r3
 800d7e2:	68fa      	ldr	r2, [r7, #12]
 800d7e4:	4613      	mov	r3, r2
 800d7e6:	009b      	lsls	r3, r3, #2
 800d7e8:	4413      	add	r3, r2
 800d7ea:	009a      	lsls	r2, r3, #2
 800d7ec:	441a      	add	r2, r3
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	685b      	ldr	r3, [r3, #4]
 800d7f2:	009b      	lsls	r3, r3, #2
 800d7f4:	fbb2 f2f3 	udiv	r2, r2, r3
 800d7f8:	4b0c      	ldr	r3, [pc, #48]	@ (800d82c <UART_SetConfig+0x118>)
 800d7fa:	fba3 0302 	umull	r0, r3, r3, r2
 800d7fe:	095b      	lsrs	r3, r3, #5
 800d800:	2064      	movs	r0, #100	@ 0x64
 800d802:	fb00 f303 	mul.w	r3, r0, r3
 800d806:	1ad3      	subs	r3, r2, r3
 800d808:	011b      	lsls	r3, r3, #4
 800d80a:	3332      	adds	r3, #50	@ 0x32
 800d80c:	4a07      	ldr	r2, [pc, #28]	@ (800d82c <UART_SetConfig+0x118>)
 800d80e:	fba2 2303 	umull	r2, r3, r2, r3
 800d812:	095b      	lsrs	r3, r3, #5
 800d814:	f003 020f 	and.w	r2, r3, #15
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	440a      	add	r2, r1
 800d81e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800d820:	bf00      	nop
 800d822:	3710      	adds	r7, #16
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}
 800d828:	40013800 	.word	0x40013800
 800d82c:	51eb851f 	.word	0x51eb851f

0800d830 <__itoa>:
 800d830:	1e93      	subs	r3, r2, #2
 800d832:	2b22      	cmp	r3, #34	@ 0x22
 800d834:	b510      	push	{r4, lr}
 800d836:	460c      	mov	r4, r1
 800d838:	d904      	bls.n	800d844 <__itoa+0x14>
 800d83a:	2300      	movs	r3, #0
 800d83c:	461c      	mov	r4, r3
 800d83e:	700b      	strb	r3, [r1, #0]
 800d840:	4620      	mov	r0, r4
 800d842:	bd10      	pop	{r4, pc}
 800d844:	2a0a      	cmp	r2, #10
 800d846:	d109      	bne.n	800d85c <__itoa+0x2c>
 800d848:	2800      	cmp	r0, #0
 800d84a:	da07      	bge.n	800d85c <__itoa+0x2c>
 800d84c:	232d      	movs	r3, #45	@ 0x2d
 800d84e:	700b      	strb	r3, [r1, #0]
 800d850:	2101      	movs	r1, #1
 800d852:	4240      	negs	r0, r0
 800d854:	4421      	add	r1, r4
 800d856:	f000 f8bb 	bl	800d9d0 <__utoa>
 800d85a:	e7f1      	b.n	800d840 <__itoa+0x10>
 800d85c:	2100      	movs	r1, #0
 800d85e:	e7f9      	b.n	800d854 <__itoa+0x24>

0800d860 <itoa>:
 800d860:	f7ff bfe6 	b.w	800d830 <__itoa>

0800d864 <malloc>:
 800d864:	4b02      	ldr	r3, [pc, #8]	@ (800d870 <malloc+0xc>)
 800d866:	4601      	mov	r1, r0
 800d868:	6818      	ldr	r0, [r3, #0]
 800d86a:	f000 b825 	b.w	800d8b8 <_malloc_r>
 800d86e:	bf00      	nop
 800d870:	20000f80 	.word	0x20000f80

0800d874 <sbrk_aligned>:
 800d874:	b570      	push	{r4, r5, r6, lr}
 800d876:	4e0f      	ldr	r6, [pc, #60]	@ (800d8b4 <sbrk_aligned+0x40>)
 800d878:	460c      	mov	r4, r1
 800d87a:	6831      	ldr	r1, [r6, #0]
 800d87c:	4605      	mov	r5, r0
 800d87e:	b911      	cbnz	r1, 800d886 <sbrk_aligned+0x12>
 800d880:	f000 f948 	bl	800db14 <_sbrk_r>
 800d884:	6030      	str	r0, [r6, #0]
 800d886:	4621      	mov	r1, r4
 800d888:	4628      	mov	r0, r5
 800d88a:	f000 f943 	bl	800db14 <_sbrk_r>
 800d88e:	1c43      	adds	r3, r0, #1
 800d890:	d103      	bne.n	800d89a <sbrk_aligned+0x26>
 800d892:	f04f 34ff 	mov.w	r4, #4294967295
 800d896:	4620      	mov	r0, r4
 800d898:	bd70      	pop	{r4, r5, r6, pc}
 800d89a:	1cc4      	adds	r4, r0, #3
 800d89c:	f024 0403 	bic.w	r4, r4, #3
 800d8a0:	42a0      	cmp	r0, r4
 800d8a2:	d0f8      	beq.n	800d896 <sbrk_aligned+0x22>
 800d8a4:	1a21      	subs	r1, r4, r0
 800d8a6:	4628      	mov	r0, r5
 800d8a8:	f000 f934 	bl	800db14 <_sbrk_r>
 800d8ac:	3001      	adds	r0, #1
 800d8ae:	d1f2      	bne.n	800d896 <sbrk_aligned+0x22>
 800d8b0:	e7ef      	b.n	800d892 <sbrk_aligned+0x1e>
 800d8b2:	bf00      	nop
 800d8b4:	20001a28 	.word	0x20001a28

0800d8b8 <_malloc_r>:
 800d8b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8bc:	1ccd      	adds	r5, r1, #3
 800d8be:	f025 0503 	bic.w	r5, r5, #3
 800d8c2:	3508      	adds	r5, #8
 800d8c4:	2d0c      	cmp	r5, #12
 800d8c6:	bf38      	it	cc
 800d8c8:	250c      	movcc	r5, #12
 800d8ca:	2d00      	cmp	r5, #0
 800d8cc:	4606      	mov	r6, r0
 800d8ce:	db01      	blt.n	800d8d4 <_malloc_r+0x1c>
 800d8d0:	42a9      	cmp	r1, r5
 800d8d2:	d904      	bls.n	800d8de <_malloc_r+0x26>
 800d8d4:	230c      	movs	r3, #12
 800d8d6:	6033      	str	r3, [r6, #0]
 800d8d8:	2000      	movs	r0, #0
 800d8da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d8de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d9b4 <_malloc_r+0xfc>
 800d8e2:	f000 f869 	bl	800d9b8 <__malloc_lock>
 800d8e6:	f8d8 3000 	ldr.w	r3, [r8]
 800d8ea:	461c      	mov	r4, r3
 800d8ec:	bb44      	cbnz	r4, 800d940 <_malloc_r+0x88>
 800d8ee:	4629      	mov	r1, r5
 800d8f0:	4630      	mov	r0, r6
 800d8f2:	f7ff ffbf 	bl	800d874 <sbrk_aligned>
 800d8f6:	1c43      	adds	r3, r0, #1
 800d8f8:	4604      	mov	r4, r0
 800d8fa:	d158      	bne.n	800d9ae <_malloc_r+0xf6>
 800d8fc:	f8d8 4000 	ldr.w	r4, [r8]
 800d900:	4627      	mov	r7, r4
 800d902:	2f00      	cmp	r7, #0
 800d904:	d143      	bne.n	800d98e <_malloc_r+0xd6>
 800d906:	2c00      	cmp	r4, #0
 800d908:	d04b      	beq.n	800d9a2 <_malloc_r+0xea>
 800d90a:	6823      	ldr	r3, [r4, #0]
 800d90c:	4639      	mov	r1, r7
 800d90e:	4630      	mov	r0, r6
 800d910:	eb04 0903 	add.w	r9, r4, r3
 800d914:	f000 f8fe 	bl	800db14 <_sbrk_r>
 800d918:	4581      	cmp	r9, r0
 800d91a:	d142      	bne.n	800d9a2 <_malloc_r+0xea>
 800d91c:	6821      	ldr	r1, [r4, #0]
 800d91e:	4630      	mov	r0, r6
 800d920:	1a6d      	subs	r5, r5, r1
 800d922:	4629      	mov	r1, r5
 800d924:	f7ff ffa6 	bl	800d874 <sbrk_aligned>
 800d928:	3001      	adds	r0, #1
 800d92a:	d03a      	beq.n	800d9a2 <_malloc_r+0xea>
 800d92c:	6823      	ldr	r3, [r4, #0]
 800d92e:	442b      	add	r3, r5
 800d930:	6023      	str	r3, [r4, #0]
 800d932:	f8d8 3000 	ldr.w	r3, [r8]
 800d936:	685a      	ldr	r2, [r3, #4]
 800d938:	bb62      	cbnz	r2, 800d994 <_malloc_r+0xdc>
 800d93a:	f8c8 7000 	str.w	r7, [r8]
 800d93e:	e00f      	b.n	800d960 <_malloc_r+0xa8>
 800d940:	6822      	ldr	r2, [r4, #0]
 800d942:	1b52      	subs	r2, r2, r5
 800d944:	d420      	bmi.n	800d988 <_malloc_r+0xd0>
 800d946:	2a0b      	cmp	r2, #11
 800d948:	d917      	bls.n	800d97a <_malloc_r+0xc2>
 800d94a:	1961      	adds	r1, r4, r5
 800d94c:	42a3      	cmp	r3, r4
 800d94e:	6025      	str	r5, [r4, #0]
 800d950:	bf18      	it	ne
 800d952:	6059      	strne	r1, [r3, #4]
 800d954:	6863      	ldr	r3, [r4, #4]
 800d956:	bf08      	it	eq
 800d958:	f8c8 1000 	streq.w	r1, [r8]
 800d95c:	5162      	str	r2, [r4, r5]
 800d95e:	604b      	str	r3, [r1, #4]
 800d960:	4630      	mov	r0, r6
 800d962:	f000 f82f 	bl	800d9c4 <__malloc_unlock>
 800d966:	f104 000b 	add.w	r0, r4, #11
 800d96a:	1d23      	adds	r3, r4, #4
 800d96c:	f020 0007 	bic.w	r0, r0, #7
 800d970:	1ac2      	subs	r2, r0, r3
 800d972:	bf1c      	itt	ne
 800d974:	1a1b      	subne	r3, r3, r0
 800d976:	50a3      	strne	r3, [r4, r2]
 800d978:	e7af      	b.n	800d8da <_malloc_r+0x22>
 800d97a:	6862      	ldr	r2, [r4, #4]
 800d97c:	42a3      	cmp	r3, r4
 800d97e:	bf0c      	ite	eq
 800d980:	f8c8 2000 	streq.w	r2, [r8]
 800d984:	605a      	strne	r2, [r3, #4]
 800d986:	e7eb      	b.n	800d960 <_malloc_r+0xa8>
 800d988:	4623      	mov	r3, r4
 800d98a:	6864      	ldr	r4, [r4, #4]
 800d98c:	e7ae      	b.n	800d8ec <_malloc_r+0x34>
 800d98e:	463c      	mov	r4, r7
 800d990:	687f      	ldr	r7, [r7, #4]
 800d992:	e7b6      	b.n	800d902 <_malloc_r+0x4a>
 800d994:	461a      	mov	r2, r3
 800d996:	685b      	ldr	r3, [r3, #4]
 800d998:	42a3      	cmp	r3, r4
 800d99a:	d1fb      	bne.n	800d994 <_malloc_r+0xdc>
 800d99c:	2300      	movs	r3, #0
 800d99e:	6053      	str	r3, [r2, #4]
 800d9a0:	e7de      	b.n	800d960 <_malloc_r+0xa8>
 800d9a2:	230c      	movs	r3, #12
 800d9a4:	4630      	mov	r0, r6
 800d9a6:	6033      	str	r3, [r6, #0]
 800d9a8:	f000 f80c 	bl	800d9c4 <__malloc_unlock>
 800d9ac:	e794      	b.n	800d8d8 <_malloc_r+0x20>
 800d9ae:	6005      	str	r5, [r0, #0]
 800d9b0:	e7d6      	b.n	800d960 <_malloc_r+0xa8>
 800d9b2:	bf00      	nop
 800d9b4:	20001a2c 	.word	0x20001a2c

0800d9b8 <__malloc_lock>:
 800d9b8:	4801      	ldr	r0, [pc, #4]	@ (800d9c0 <__malloc_lock+0x8>)
 800d9ba:	f000 b8e5 	b.w	800db88 <__retarget_lock_acquire_recursive>
 800d9be:	bf00      	nop
 800d9c0:	20001b6c 	.word	0x20001b6c

0800d9c4 <__malloc_unlock>:
 800d9c4:	4801      	ldr	r0, [pc, #4]	@ (800d9cc <__malloc_unlock+0x8>)
 800d9c6:	f000 b8e0 	b.w	800db8a <__retarget_lock_release_recursive>
 800d9ca:	bf00      	nop
 800d9cc:	20001b6c 	.word	0x20001b6c

0800d9d0 <__utoa>:
 800d9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9d2:	b08b      	sub	sp, #44	@ 0x2c
 800d9d4:	4605      	mov	r5, r0
 800d9d6:	460b      	mov	r3, r1
 800d9d8:	466e      	mov	r6, sp
 800d9da:	4c1d      	ldr	r4, [pc, #116]	@ (800da50 <__utoa+0x80>)
 800d9dc:	f104 0c20 	add.w	ip, r4, #32
 800d9e0:	4637      	mov	r7, r6
 800d9e2:	6820      	ldr	r0, [r4, #0]
 800d9e4:	6861      	ldr	r1, [r4, #4]
 800d9e6:	3408      	adds	r4, #8
 800d9e8:	c703      	stmia	r7!, {r0, r1}
 800d9ea:	4564      	cmp	r4, ip
 800d9ec:	463e      	mov	r6, r7
 800d9ee:	d1f7      	bne.n	800d9e0 <__utoa+0x10>
 800d9f0:	7921      	ldrb	r1, [r4, #4]
 800d9f2:	6820      	ldr	r0, [r4, #0]
 800d9f4:	7139      	strb	r1, [r7, #4]
 800d9f6:	1e91      	subs	r1, r2, #2
 800d9f8:	2922      	cmp	r1, #34	@ 0x22
 800d9fa:	6038      	str	r0, [r7, #0]
 800d9fc:	f04f 0100 	mov.w	r1, #0
 800da00:	d904      	bls.n	800da0c <__utoa+0x3c>
 800da02:	7019      	strb	r1, [r3, #0]
 800da04:	460b      	mov	r3, r1
 800da06:	4618      	mov	r0, r3
 800da08:	b00b      	add	sp, #44	@ 0x2c
 800da0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da0c:	1e58      	subs	r0, r3, #1
 800da0e:	4684      	mov	ip, r0
 800da10:	fbb5 f7f2 	udiv	r7, r5, r2
 800da14:	fb02 5617 	mls	r6, r2, r7, r5
 800da18:	3628      	adds	r6, #40	@ 0x28
 800da1a:	446e      	add	r6, sp
 800da1c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800da20:	460c      	mov	r4, r1
 800da22:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800da26:	462e      	mov	r6, r5
 800da28:	42b2      	cmp	r2, r6
 800da2a:	463d      	mov	r5, r7
 800da2c:	f101 0101 	add.w	r1, r1, #1
 800da30:	d9ee      	bls.n	800da10 <__utoa+0x40>
 800da32:	2200      	movs	r2, #0
 800da34:	545a      	strb	r2, [r3, r1]
 800da36:	1919      	adds	r1, r3, r4
 800da38:	1aa5      	subs	r5, r4, r2
 800da3a:	42aa      	cmp	r2, r5
 800da3c:	dae3      	bge.n	800da06 <__utoa+0x36>
 800da3e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800da42:	780e      	ldrb	r6, [r1, #0]
 800da44:	3201      	adds	r2, #1
 800da46:	7006      	strb	r6, [r0, #0]
 800da48:	f801 5901 	strb.w	r5, [r1], #-1
 800da4c:	e7f4      	b.n	800da38 <__utoa+0x68>
 800da4e:	bf00      	nop
 800da50:	0800ee42 	.word	0x0800ee42

0800da54 <siprintf>:
 800da54:	b40e      	push	{r1, r2, r3}
 800da56:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800da5a:	b500      	push	{lr}
 800da5c:	b09c      	sub	sp, #112	@ 0x70
 800da5e:	ab1d      	add	r3, sp, #116	@ 0x74
 800da60:	9002      	str	r0, [sp, #8]
 800da62:	9006      	str	r0, [sp, #24]
 800da64:	9107      	str	r1, [sp, #28]
 800da66:	9104      	str	r1, [sp, #16]
 800da68:	4808      	ldr	r0, [pc, #32]	@ (800da8c <siprintf+0x38>)
 800da6a:	4909      	ldr	r1, [pc, #36]	@ (800da90 <siprintf+0x3c>)
 800da6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800da70:	9105      	str	r1, [sp, #20]
 800da72:	6800      	ldr	r0, [r0, #0]
 800da74:	a902      	add	r1, sp, #8
 800da76:	9301      	str	r3, [sp, #4]
 800da78:	f000 f934 	bl	800dce4 <_svfiprintf_r>
 800da7c:	2200      	movs	r2, #0
 800da7e:	9b02      	ldr	r3, [sp, #8]
 800da80:	701a      	strb	r2, [r3, #0]
 800da82:	b01c      	add	sp, #112	@ 0x70
 800da84:	f85d eb04 	ldr.w	lr, [sp], #4
 800da88:	b003      	add	sp, #12
 800da8a:	4770      	bx	lr
 800da8c:	20000f80 	.word	0x20000f80
 800da90:	ffff0208 	.word	0xffff0208

0800da94 <memset>:
 800da94:	4603      	mov	r3, r0
 800da96:	4402      	add	r2, r0
 800da98:	4293      	cmp	r3, r2
 800da9a:	d100      	bne.n	800da9e <memset+0xa>
 800da9c:	4770      	bx	lr
 800da9e:	f803 1b01 	strb.w	r1, [r3], #1
 800daa2:	e7f9      	b.n	800da98 <memset+0x4>

0800daa4 <strcat>:
 800daa4:	4602      	mov	r2, r0
 800daa6:	b510      	push	{r4, lr}
 800daa8:	7814      	ldrb	r4, [r2, #0]
 800daaa:	4613      	mov	r3, r2
 800daac:	3201      	adds	r2, #1
 800daae:	2c00      	cmp	r4, #0
 800dab0:	d1fa      	bne.n	800daa8 <strcat+0x4>
 800dab2:	3b01      	subs	r3, #1
 800dab4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dab8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dabc:	2a00      	cmp	r2, #0
 800dabe:	d1f9      	bne.n	800dab4 <strcat+0x10>
 800dac0:	bd10      	pop	{r4, pc}

0800dac2 <strncpy>:
 800dac2:	4603      	mov	r3, r0
 800dac4:	b510      	push	{r4, lr}
 800dac6:	3901      	subs	r1, #1
 800dac8:	b132      	cbz	r2, 800dad8 <strncpy+0x16>
 800daca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dace:	3a01      	subs	r2, #1
 800dad0:	f803 4b01 	strb.w	r4, [r3], #1
 800dad4:	2c00      	cmp	r4, #0
 800dad6:	d1f7      	bne.n	800dac8 <strncpy+0x6>
 800dad8:	2100      	movs	r1, #0
 800dada:	441a      	add	r2, r3
 800dadc:	4293      	cmp	r3, r2
 800dade:	d100      	bne.n	800dae2 <strncpy+0x20>
 800dae0:	bd10      	pop	{r4, pc}
 800dae2:	f803 1b01 	strb.w	r1, [r3], #1
 800dae6:	e7f9      	b.n	800dadc <strncpy+0x1a>

0800dae8 <strstr>:
 800dae8:	780a      	ldrb	r2, [r1, #0]
 800daea:	b570      	push	{r4, r5, r6, lr}
 800daec:	b96a      	cbnz	r2, 800db0a <strstr+0x22>
 800daee:	bd70      	pop	{r4, r5, r6, pc}
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d109      	bne.n	800db08 <strstr+0x20>
 800daf4:	460c      	mov	r4, r1
 800daf6:	4605      	mov	r5, r0
 800daf8:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d0f6      	beq.n	800daee <strstr+0x6>
 800db00:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800db04:	429e      	cmp	r6, r3
 800db06:	d0f7      	beq.n	800daf8 <strstr+0x10>
 800db08:	3001      	adds	r0, #1
 800db0a:	7803      	ldrb	r3, [r0, #0]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d1ef      	bne.n	800daf0 <strstr+0x8>
 800db10:	4618      	mov	r0, r3
 800db12:	e7ec      	b.n	800daee <strstr+0x6>

0800db14 <_sbrk_r>:
 800db14:	b538      	push	{r3, r4, r5, lr}
 800db16:	2300      	movs	r3, #0
 800db18:	4d05      	ldr	r5, [pc, #20]	@ (800db30 <_sbrk_r+0x1c>)
 800db1a:	4604      	mov	r4, r0
 800db1c:	4608      	mov	r0, r1
 800db1e:	602b      	str	r3, [r5, #0]
 800db20:	f7fb ff82 	bl	8009a28 <_sbrk>
 800db24:	1c43      	adds	r3, r0, #1
 800db26:	d102      	bne.n	800db2e <_sbrk_r+0x1a>
 800db28:	682b      	ldr	r3, [r5, #0]
 800db2a:	b103      	cbz	r3, 800db2e <_sbrk_r+0x1a>
 800db2c:	6023      	str	r3, [r4, #0]
 800db2e:	bd38      	pop	{r3, r4, r5, pc}
 800db30:	20001b68 	.word	0x20001b68

0800db34 <__errno>:
 800db34:	4b01      	ldr	r3, [pc, #4]	@ (800db3c <__errno+0x8>)
 800db36:	6818      	ldr	r0, [r3, #0]
 800db38:	4770      	bx	lr
 800db3a:	bf00      	nop
 800db3c:	20000f80 	.word	0x20000f80

0800db40 <__libc_init_array>:
 800db40:	b570      	push	{r4, r5, r6, lr}
 800db42:	2600      	movs	r6, #0
 800db44:	4d0c      	ldr	r5, [pc, #48]	@ (800db78 <__libc_init_array+0x38>)
 800db46:	4c0d      	ldr	r4, [pc, #52]	@ (800db7c <__libc_init_array+0x3c>)
 800db48:	1b64      	subs	r4, r4, r5
 800db4a:	10a4      	asrs	r4, r4, #2
 800db4c:	42a6      	cmp	r6, r4
 800db4e:	d109      	bne.n	800db64 <__libc_init_array+0x24>
 800db50:	f000 fbc2 	bl	800e2d8 <_init>
 800db54:	2600      	movs	r6, #0
 800db56:	4d0a      	ldr	r5, [pc, #40]	@ (800db80 <__libc_init_array+0x40>)
 800db58:	4c0a      	ldr	r4, [pc, #40]	@ (800db84 <__libc_init_array+0x44>)
 800db5a:	1b64      	subs	r4, r4, r5
 800db5c:	10a4      	asrs	r4, r4, #2
 800db5e:	42a6      	cmp	r6, r4
 800db60:	d105      	bne.n	800db6e <__libc_init_array+0x2e>
 800db62:	bd70      	pop	{r4, r5, r6, pc}
 800db64:	f855 3b04 	ldr.w	r3, [r5], #4
 800db68:	4798      	blx	r3
 800db6a:	3601      	adds	r6, #1
 800db6c:	e7ee      	b.n	800db4c <__libc_init_array+0xc>
 800db6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800db72:	4798      	blx	r3
 800db74:	3601      	adds	r6, #1
 800db76:	e7f2      	b.n	800db5e <__libc_init_array+0x1e>
 800db78:	0800eea4 	.word	0x0800eea4
 800db7c:	0800eea4 	.word	0x0800eea4
 800db80:	0800eea4 	.word	0x0800eea4
 800db84:	0800eea8 	.word	0x0800eea8

0800db88 <__retarget_lock_acquire_recursive>:
 800db88:	4770      	bx	lr

0800db8a <__retarget_lock_release_recursive>:
 800db8a:	4770      	bx	lr

0800db8c <strcpy>:
 800db8c:	4603      	mov	r3, r0
 800db8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db92:	f803 2b01 	strb.w	r2, [r3], #1
 800db96:	2a00      	cmp	r2, #0
 800db98:	d1f9      	bne.n	800db8e <strcpy+0x2>
 800db9a:	4770      	bx	lr

0800db9c <_free_r>:
 800db9c:	b538      	push	{r3, r4, r5, lr}
 800db9e:	4605      	mov	r5, r0
 800dba0:	2900      	cmp	r1, #0
 800dba2:	d040      	beq.n	800dc26 <_free_r+0x8a>
 800dba4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dba8:	1f0c      	subs	r4, r1, #4
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	bfb8      	it	lt
 800dbae:	18e4      	addlt	r4, r4, r3
 800dbb0:	f7ff ff02 	bl	800d9b8 <__malloc_lock>
 800dbb4:	4a1c      	ldr	r2, [pc, #112]	@ (800dc28 <_free_r+0x8c>)
 800dbb6:	6813      	ldr	r3, [r2, #0]
 800dbb8:	b933      	cbnz	r3, 800dbc8 <_free_r+0x2c>
 800dbba:	6063      	str	r3, [r4, #4]
 800dbbc:	6014      	str	r4, [r2, #0]
 800dbbe:	4628      	mov	r0, r5
 800dbc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbc4:	f7ff befe 	b.w	800d9c4 <__malloc_unlock>
 800dbc8:	42a3      	cmp	r3, r4
 800dbca:	d908      	bls.n	800dbde <_free_r+0x42>
 800dbcc:	6820      	ldr	r0, [r4, #0]
 800dbce:	1821      	adds	r1, r4, r0
 800dbd0:	428b      	cmp	r3, r1
 800dbd2:	bf01      	itttt	eq
 800dbd4:	6819      	ldreq	r1, [r3, #0]
 800dbd6:	685b      	ldreq	r3, [r3, #4]
 800dbd8:	1809      	addeq	r1, r1, r0
 800dbda:	6021      	streq	r1, [r4, #0]
 800dbdc:	e7ed      	b.n	800dbba <_free_r+0x1e>
 800dbde:	461a      	mov	r2, r3
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	b10b      	cbz	r3, 800dbe8 <_free_r+0x4c>
 800dbe4:	42a3      	cmp	r3, r4
 800dbe6:	d9fa      	bls.n	800dbde <_free_r+0x42>
 800dbe8:	6811      	ldr	r1, [r2, #0]
 800dbea:	1850      	adds	r0, r2, r1
 800dbec:	42a0      	cmp	r0, r4
 800dbee:	d10b      	bne.n	800dc08 <_free_r+0x6c>
 800dbf0:	6820      	ldr	r0, [r4, #0]
 800dbf2:	4401      	add	r1, r0
 800dbf4:	1850      	adds	r0, r2, r1
 800dbf6:	4283      	cmp	r3, r0
 800dbf8:	6011      	str	r1, [r2, #0]
 800dbfa:	d1e0      	bne.n	800dbbe <_free_r+0x22>
 800dbfc:	6818      	ldr	r0, [r3, #0]
 800dbfe:	685b      	ldr	r3, [r3, #4]
 800dc00:	4408      	add	r0, r1
 800dc02:	6010      	str	r0, [r2, #0]
 800dc04:	6053      	str	r3, [r2, #4]
 800dc06:	e7da      	b.n	800dbbe <_free_r+0x22>
 800dc08:	d902      	bls.n	800dc10 <_free_r+0x74>
 800dc0a:	230c      	movs	r3, #12
 800dc0c:	602b      	str	r3, [r5, #0]
 800dc0e:	e7d6      	b.n	800dbbe <_free_r+0x22>
 800dc10:	6820      	ldr	r0, [r4, #0]
 800dc12:	1821      	adds	r1, r4, r0
 800dc14:	428b      	cmp	r3, r1
 800dc16:	bf01      	itttt	eq
 800dc18:	6819      	ldreq	r1, [r3, #0]
 800dc1a:	685b      	ldreq	r3, [r3, #4]
 800dc1c:	1809      	addeq	r1, r1, r0
 800dc1e:	6021      	streq	r1, [r4, #0]
 800dc20:	6063      	str	r3, [r4, #4]
 800dc22:	6054      	str	r4, [r2, #4]
 800dc24:	e7cb      	b.n	800dbbe <_free_r+0x22>
 800dc26:	bd38      	pop	{r3, r4, r5, pc}
 800dc28:	20001a2c 	.word	0x20001a2c

0800dc2c <__ssputs_r>:
 800dc2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc30:	461f      	mov	r7, r3
 800dc32:	688e      	ldr	r6, [r1, #8]
 800dc34:	4682      	mov	sl, r0
 800dc36:	42be      	cmp	r6, r7
 800dc38:	460c      	mov	r4, r1
 800dc3a:	4690      	mov	r8, r2
 800dc3c:	680b      	ldr	r3, [r1, #0]
 800dc3e:	d82d      	bhi.n	800dc9c <__ssputs_r+0x70>
 800dc40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dc44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800dc48:	d026      	beq.n	800dc98 <__ssputs_r+0x6c>
 800dc4a:	6965      	ldr	r5, [r4, #20]
 800dc4c:	6909      	ldr	r1, [r1, #16]
 800dc4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc52:	eba3 0901 	sub.w	r9, r3, r1
 800dc56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc5a:	1c7b      	adds	r3, r7, #1
 800dc5c:	444b      	add	r3, r9
 800dc5e:	106d      	asrs	r5, r5, #1
 800dc60:	429d      	cmp	r5, r3
 800dc62:	bf38      	it	cc
 800dc64:	461d      	movcc	r5, r3
 800dc66:	0553      	lsls	r3, r2, #21
 800dc68:	d527      	bpl.n	800dcba <__ssputs_r+0x8e>
 800dc6a:	4629      	mov	r1, r5
 800dc6c:	f7ff fe24 	bl	800d8b8 <_malloc_r>
 800dc70:	4606      	mov	r6, r0
 800dc72:	b360      	cbz	r0, 800dcce <__ssputs_r+0xa2>
 800dc74:	464a      	mov	r2, r9
 800dc76:	6921      	ldr	r1, [r4, #16]
 800dc78:	f000 faea 	bl	800e250 <memcpy>
 800dc7c:	89a3      	ldrh	r3, [r4, #12]
 800dc7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800dc82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc86:	81a3      	strh	r3, [r4, #12]
 800dc88:	6126      	str	r6, [r4, #16]
 800dc8a:	444e      	add	r6, r9
 800dc8c:	6026      	str	r6, [r4, #0]
 800dc8e:	463e      	mov	r6, r7
 800dc90:	6165      	str	r5, [r4, #20]
 800dc92:	eba5 0509 	sub.w	r5, r5, r9
 800dc96:	60a5      	str	r5, [r4, #8]
 800dc98:	42be      	cmp	r6, r7
 800dc9a:	d900      	bls.n	800dc9e <__ssputs_r+0x72>
 800dc9c:	463e      	mov	r6, r7
 800dc9e:	4632      	mov	r2, r6
 800dca0:	4641      	mov	r1, r8
 800dca2:	6820      	ldr	r0, [r4, #0]
 800dca4:	f000 faac 	bl	800e200 <memmove>
 800dca8:	2000      	movs	r0, #0
 800dcaa:	68a3      	ldr	r3, [r4, #8]
 800dcac:	1b9b      	subs	r3, r3, r6
 800dcae:	60a3      	str	r3, [r4, #8]
 800dcb0:	6823      	ldr	r3, [r4, #0]
 800dcb2:	4433      	add	r3, r6
 800dcb4:	6023      	str	r3, [r4, #0]
 800dcb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcba:	462a      	mov	r2, r5
 800dcbc:	f000 fad6 	bl	800e26c <_realloc_r>
 800dcc0:	4606      	mov	r6, r0
 800dcc2:	2800      	cmp	r0, #0
 800dcc4:	d1e0      	bne.n	800dc88 <__ssputs_r+0x5c>
 800dcc6:	4650      	mov	r0, sl
 800dcc8:	6921      	ldr	r1, [r4, #16]
 800dcca:	f7ff ff67 	bl	800db9c <_free_r>
 800dcce:	230c      	movs	r3, #12
 800dcd0:	f8ca 3000 	str.w	r3, [sl]
 800dcd4:	89a3      	ldrh	r3, [r4, #12]
 800dcd6:	f04f 30ff 	mov.w	r0, #4294967295
 800dcda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800dcde:	81a3      	strh	r3, [r4, #12]
 800dce0:	e7e9      	b.n	800dcb6 <__ssputs_r+0x8a>
	...

0800dce4 <_svfiprintf_r>:
 800dce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dce8:	4698      	mov	r8, r3
 800dcea:	898b      	ldrh	r3, [r1, #12]
 800dcec:	4607      	mov	r7, r0
 800dcee:	061b      	lsls	r3, r3, #24
 800dcf0:	460d      	mov	r5, r1
 800dcf2:	4614      	mov	r4, r2
 800dcf4:	b09d      	sub	sp, #116	@ 0x74
 800dcf6:	d510      	bpl.n	800dd1a <_svfiprintf_r+0x36>
 800dcf8:	690b      	ldr	r3, [r1, #16]
 800dcfa:	b973      	cbnz	r3, 800dd1a <_svfiprintf_r+0x36>
 800dcfc:	2140      	movs	r1, #64	@ 0x40
 800dcfe:	f7ff fddb 	bl	800d8b8 <_malloc_r>
 800dd02:	6028      	str	r0, [r5, #0]
 800dd04:	6128      	str	r0, [r5, #16]
 800dd06:	b930      	cbnz	r0, 800dd16 <_svfiprintf_r+0x32>
 800dd08:	230c      	movs	r3, #12
 800dd0a:	603b      	str	r3, [r7, #0]
 800dd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd10:	b01d      	add	sp, #116	@ 0x74
 800dd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd16:	2340      	movs	r3, #64	@ 0x40
 800dd18:	616b      	str	r3, [r5, #20]
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800dd1e:	2320      	movs	r3, #32
 800dd20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dd24:	2330      	movs	r3, #48	@ 0x30
 800dd26:	f04f 0901 	mov.w	r9, #1
 800dd2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd2e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800dec8 <_svfiprintf_r+0x1e4>
 800dd32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dd36:	4623      	mov	r3, r4
 800dd38:	469a      	mov	sl, r3
 800dd3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd3e:	b10a      	cbz	r2, 800dd44 <_svfiprintf_r+0x60>
 800dd40:	2a25      	cmp	r2, #37	@ 0x25
 800dd42:	d1f9      	bne.n	800dd38 <_svfiprintf_r+0x54>
 800dd44:	ebba 0b04 	subs.w	fp, sl, r4
 800dd48:	d00b      	beq.n	800dd62 <_svfiprintf_r+0x7e>
 800dd4a:	465b      	mov	r3, fp
 800dd4c:	4622      	mov	r2, r4
 800dd4e:	4629      	mov	r1, r5
 800dd50:	4638      	mov	r0, r7
 800dd52:	f7ff ff6b 	bl	800dc2c <__ssputs_r>
 800dd56:	3001      	adds	r0, #1
 800dd58:	f000 80a7 	beq.w	800deaa <_svfiprintf_r+0x1c6>
 800dd5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dd5e:	445a      	add	r2, fp
 800dd60:	9209      	str	r2, [sp, #36]	@ 0x24
 800dd62:	f89a 3000 	ldrb.w	r3, [sl]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	f000 809f 	beq.w	800deaa <_svfiprintf_r+0x1c6>
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	f04f 32ff 	mov.w	r2, #4294967295
 800dd72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd76:	f10a 0a01 	add.w	sl, sl, #1
 800dd7a:	9304      	str	r3, [sp, #16]
 800dd7c:	9307      	str	r3, [sp, #28]
 800dd7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dd82:	931a      	str	r3, [sp, #104]	@ 0x68
 800dd84:	4654      	mov	r4, sl
 800dd86:	2205      	movs	r2, #5
 800dd88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd8c:	484e      	ldr	r0, [pc, #312]	@ (800dec8 <_svfiprintf_r+0x1e4>)
 800dd8e:	f000 fa51 	bl	800e234 <memchr>
 800dd92:	9a04      	ldr	r2, [sp, #16]
 800dd94:	b9d8      	cbnz	r0, 800ddce <_svfiprintf_r+0xea>
 800dd96:	06d0      	lsls	r0, r2, #27
 800dd98:	bf44      	itt	mi
 800dd9a:	2320      	movmi	r3, #32
 800dd9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dda0:	0711      	lsls	r1, r2, #28
 800dda2:	bf44      	itt	mi
 800dda4:	232b      	movmi	r3, #43	@ 0x2b
 800dda6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ddaa:	f89a 3000 	ldrb.w	r3, [sl]
 800ddae:	2b2a      	cmp	r3, #42	@ 0x2a
 800ddb0:	d015      	beq.n	800ddde <_svfiprintf_r+0xfa>
 800ddb2:	4654      	mov	r4, sl
 800ddb4:	2000      	movs	r0, #0
 800ddb6:	f04f 0c0a 	mov.w	ip, #10
 800ddba:	9a07      	ldr	r2, [sp, #28]
 800ddbc:	4621      	mov	r1, r4
 800ddbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ddc2:	3b30      	subs	r3, #48	@ 0x30
 800ddc4:	2b09      	cmp	r3, #9
 800ddc6:	d94b      	bls.n	800de60 <_svfiprintf_r+0x17c>
 800ddc8:	b1b0      	cbz	r0, 800ddf8 <_svfiprintf_r+0x114>
 800ddca:	9207      	str	r2, [sp, #28]
 800ddcc:	e014      	b.n	800ddf8 <_svfiprintf_r+0x114>
 800ddce:	eba0 0308 	sub.w	r3, r0, r8
 800ddd2:	fa09 f303 	lsl.w	r3, r9, r3
 800ddd6:	4313      	orrs	r3, r2
 800ddd8:	46a2      	mov	sl, r4
 800ddda:	9304      	str	r3, [sp, #16]
 800dddc:	e7d2      	b.n	800dd84 <_svfiprintf_r+0xa0>
 800ddde:	9b03      	ldr	r3, [sp, #12]
 800dde0:	1d19      	adds	r1, r3, #4
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	9103      	str	r1, [sp, #12]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	bfbb      	ittet	lt
 800ddea:	425b      	neglt	r3, r3
 800ddec:	f042 0202 	orrlt.w	r2, r2, #2
 800ddf0:	9307      	strge	r3, [sp, #28]
 800ddf2:	9307      	strlt	r3, [sp, #28]
 800ddf4:	bfb8      	it	lt
 800ddf6:	9204      	strlt	r2, [sp, #16]
 800ddf8:	7823      	ldrb	r3, [r4, #0]
 800ddfa:	2b2e      	cmp	r3, #46	@ 0x2e
 800ddfc:	d10a      	bne.n	800de14 <_svfiprintf_r+0x130>
 800ddfe:	7863      	ldrb	r3, [r4, #1]
 800de00:	2b2a      	cmp	r3, #42	@ 0x2a
 800de02:	d132      	bne.n	800de6a <_svfiprintf_r+0x186>
 800de04:	9b03      	ldr	r3, [sp, #12]
 800de06:	3402      	adds	r4, #2
 800de08:	1d1a      	adds	r2, r3, #4
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	9203      	str	r2, [sp, #12]
 800de0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800de12:	9305      	str	r3, [sp, #20]
 800de14:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800decc <_svfiprintf_r+0x1e8>
 800de18:	2203      	movs	r2, #3
 800de1a:	4650      	mov	r0, sl
 800de1c:	7821      	ldrb	r1, [r4, #0]
 800de1e:	f000 fa09 	bl	800e234 <memchr>
 800de22:	b138      	cbz	r0, 800de34 <_svfiprintf_r+0x150>
 800de24:	2240      	movs	r2, #64	@ 0x40
 800de26:	9b04      	ldr	r3, [sp, #16]
 800de28:	eba0 000a 	sub.w	r0, r0, sl
 800de2c:	4082      	lsls	r2, r0
 800de2e:	4313      	orrs	r3, r2
 800de30:	3401      	adds	r4, #1
 800de32:	9304      	str	r3, [sp, #16]
 800de34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de38:	2206      	movs	r2, #6
 800de3a:	4825      	ldr	r0, [pc, #148]	@ (800ded0 <_svfiprintf_r+0x1ec>)
 800de3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800de40:	f000 f9f8 	bl	800e234 <memchr>
 800de44:	2800      	cmp	r0, #0
 800de46:	d036      	beq.n	800deb6 <_svfiprintf_r+0x1d2>
 800de48:	4b22      	ldr	r3, [pc, #136]	@ (800ded4 <_svfiprintf_r+0x1f0>)
 800de4a:	bb1b      	cbnz	r3, 800de94 <_svfiprintf_r+0x1b0>
 800de4c:	9b03      	ldr	r3, [sp, #12]
 800de4e:	3307      	adds	r3, #7
 800de50:	f023 0307 	bic.w	r3, r3, #7
 800de54:	3308      	adds	r3, #8
 800de56:	9303      	str	r3, [sp, #12]
 800de58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de5a:	4433      	add	r3, r6
 800de5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800de5e:	e76a      	b.n	800dd36 <_svfiprintf_r+0x52>
 800de60:	460c      	mov	r4, r1
 800de62:	2001      	movs	r0, #1
 800de64:	fb0c 3202 	mla	r2, ip, r2, r3
 800de68:	e7a8      	b.n	800ddbc <_svfiprintf_r+0xd8>
 800de6a:	2300      	movs	r3, #0
 800de6c:	f04f 0c0a 	mov.w	ip, #10
 800de70:	4619      	mov	r1, r3
 800de72:	3401      	adds	r4, #1
 800de74:	9305      	str	r3, [sp, #20]
 800de76:	4620      	mov	r0, r4
 800de78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de7c:	3a30      	subs	r2, #48	@ 0x30
 800de7e:	2a09      	cmp	r2, #9
 800de80:	d903      	bls.n	800de8a <_svfiprintf_r+0x1a6>
 800de82:	2b00      	cmp	r3, #0
 800de84:	d0c6      	beq.n	800de14 <_svfiprintf_r+0x130>
 800de86:	9105      	str	r1, [sp, #20]
 800de88:	e7c4      	b.n	800de14 <_svfiprintf_r+0x130>
 800de8a:	4604      	mov	r4, r0
 800de8c:	2301      	movs	r3, #1
 800de8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800de92:	e7f0      	b.n	800de76 <_svfiprintf_r+0x192>
 800de94:	ab03      	add	r3, sp, #12
 800de96:	9300      	str	r3, [sp, #0]
 800de98:	462a      	mov	r2, r5
 800de9a:	4638      	mov	r0, r7
 800de9c:	4b0e      	ldr	r3, [pc, #56]	@ (800ded8 <_svfiprintf_r+0x1f4>)
 800de9e:	a904      	add	r1, sp, #16
 800dea0:	f3af 8000 	nop.w
 800dea4:	1c42      	adds	r2, r0, #1
 800dea6:	4606      	mov	r6, r0
 800dea8:	d1d6      	bne.n	800de58 <_svfiprintf_r+0x174>
 800deaa:	89ab      	ldrh	r3, [r5, #12]
 800deac:	065b      	lsls	r3, r3, #25
 800deae:	f53f af2d 	bmi.w	800dd0c <_svfiprintf_r+0x28>
 800deb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800deb4:	e72c      	b.n	800dd10 <_svfiprintf_r+0x2c>
 800deb6:	ab03      	add	r3, sp, #12
 800deb8:	9300      	str	r3, [sp, #0]
 800deba:	462a      	mov	r2, r5
 800debc:	4638      	mov	r0, r7
 800debe:	4b06      	ldr	r3, [pc, #24]	@ (800ded8 <_svfiprintf_r+0x1f4>)
 800dec0:	a904      	add	r1, sp, #16
 800dec2:	f000 f87d 	bl	800dfc0 <_printf_i>
 800dec6:	e7ed      	b.n	800dea4 <_svfiprintf_r+0x1c0>
 800dec8:	0800ee67 	.word	0x0800ee67
 800decc:	0800ee6d 	.word	0x0800ee6d
 800ded0:	0800ee71 	.word	0x0800ee71
 800ded4:	00000000 	.word	0x00000000
 800ded8:	0800dc2d 	.word	0x0800dc2d

0800dedc <_printf_common>:
 800dedc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dee0:	4616      	mov	r6, r2
 800dee2:	4698      	mov	r8, r3
 800dee4:	688a      	ldr	r2, [r1, #8]
 800dee6:	690b      	ldr	r3, [r1, #16]
 800dee8:	4607      	mov	r7, r0
 800deea:	4293      	cmp	r3, r2
 800deec:	bfb8      	it	lt
 800deee:	4613      	movlt	r3, r2
 800def0:	6033      	str	r3, [r6, #0]
 800def2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800def6:	460c      	mov	r4, r1
 800def8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800defc:	b10a      	cbz	r2, 800df02 <_printf_common+0x26>
 800defe:	3301      	adds	r3, #1
 800df00:	6033      	str	r3, [r6, #0]
 800df02:	6823      	ldr	r3, [r4, #0]
 800df04:	0699      	lsls	r1, r3, #26
 800df06:	bf42      	ittt	mi
 800df08:	6833      	ldrmi	r3, [r6, #0]
 800df0a:	3302      	addmi	r3, #2
 800df0c:	6033      	strmi	r3, [r6, #0]
 800df0e:	6825      	ldr	r5, [r4, #0]
 800df10:	f015 0506 	ands.w	r5, r5, #6
 800df14:	d106      	bne.n	800df24 <_printf_common+0x48>
 800df16:	f104 0a19 	add.w	sl, r4, #25
 800df1a:	68e3      	ldr	r3, [r4, #12]
 800df1c:	6832      	ldr	r2, [r6, #0]
 800df1e:	1a9b      	subs	r3, r3, r2
 800df20:	42ab      	cmp	r3, r5
 800df22:	dc2b      	bgt.n	800df7c <_printf_common+0xa0>
 800df24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800df28:	6822      	ldr	r2, [r4, #0]
 800df2a:	3b00      	subs	r3, #0
 800df2c:	bf18      	it	ne
 800df2e:	2301      	movne	r3, #1
 800df30:	0692      	lsls	r2, r2, #26
 800df32:	d430      	bmi.n	800df96 <_printf_common+0xba>
 800df34:	4641      	mov	r1, r8
 800df36:	4638      	mov	r0, r7
 800df38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800df3c:	47c8      	blx	r9
 800df3e:	3001      	adds	r0, #1
 800df40:	d023      	beq.n	800df8a <_printf_common+0xae>
 800df42:	6823      	ldr	r3, [r4, #0]
 800df44:	6922      	ldr	r2, [r4, #16]
 800df46:	f003 0306 	and.w	r3, r3, #6
 800df4a:	2b04      	cmp	r3, #4
 800df4c:	bf14      	ite	ne
 800df4e:	2500      	movne	r5, #0
 800df50:	6833      	ldreq	r3, [r6, #0]
 800df52:	f04f 0600 	mov.w	r6, #0
 800df56:	bf08      	it	eq
 800df58:	68e5      	ldreq	r5, [r4, #12]
 800df5a:	f104 041a 	add.w	r4, r4, #26
 800df5e:	bf08      	it	eq
 800df60:	1aed      	subeq	r5, r5, r3
 800df62:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800df66:	bf08      	it	eq
 800df68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df6c:	4293      	cmp	r3, r2
 800df6e:	bfc4      	itt	gt
 800df70:	1a9b      	subgt	r3, r3, r2
 800df72:	18ed      	addgt	r5, r5, r3
 800df74:	42b5      	cmp	r5, r6
 800df76:	d11a      	bne.n	800dfae <_printf_common+0xd2>
 800df78:	2000      	movs	r0, #0
 800df7a:	e008      	b.n	800df8e <_printf_common+0xb2>
 800df7c:	2301      	movs	r3, #1
 800df7e:	4652      	mov	r2, sl
 800df80:	4641      	mov	r1, r8
 800df82:	4638      	mov	r0, r7
 800df84:	47c8      	blx	r9
 800df86:	3001      	adds	r0, #1
 800df88:	d103      	bne.n	800df92 <_printf_common+0xb6>
 800df8a:	f04f 30ff 	mov.w	r0, #4294967295
 800df8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df92:	3501      	adds	r5, #1
 800df94:	e7c1      	b.n	800df1a <_printf_common+0x3e>
 800df96:	2030      	movs	r0, #48	@ 0x30
 800df98:	18e1      	adds	r1, r4, r3
 800df9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800df9e:	1c5a      	adds	r2, r3, #1
 800dfa0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dfa4:	4422      	add	r2, r4
 800dfa6:	3302      	adds	r3, #2
 800dfa8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dfac:	e7c2      	b.n	800df34 <_printf_common+0x58>
 800dfae:	2301      	movs	r3, #1
 800dfb0:	4622      	mov	r2, r4
 800dfb2:	4641      	mov	r1, r8
 800dfb4:	4638      	mov	r0, r7
 800dfb6:	47c8      	blx	r9
 800dfb8:	3001      	adds	r0, #1
 800dfba:	d0e6      	beq.n	800df8a <_printf_common+0xae>
 800dfbc:	3601      	adds	r6, #1
 800dfbe:	e7d9      	b.n	800df74 <_printf_common+0x98>

0800dfc0 <_printf_i>:
 800dfc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dfc4:	7e0f      	ldrb	r7, [r1, #24]
 800dfc6:	4691      	mov	r9, r2
 800dfc8:	2f78      	cmp	r7, #120	@ 0x78
 800dfca:	4680      	mov	r8, r0
 800dfcc:	460c      	mov	r4, r1
 800dfce:	469a      	mov	sl, r3
 800dfd0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dfd2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dfd6:	d807      	bhi.n	800dfe8 <_printf_i+0x28>
 800dfd8:	2f62      	cmp	r7, #98	@ 0x62
 800dfda:	d80a      	bhi.n	800dff2 <_printf_i+0x32>
 800dfdc:	2f00      	cmp	r7, #0
 800dfde:	f000 80d3 	beq.w	800e188 <_printf_i+0x1c8>
 800dfe2:	2f58      	cmp	r7, #88	@ 0x58
 800dfe4:	f000 80ba 	beq.w	800e15c <_printf_i+0x19c>
 800dfe8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dfec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dff0:	e03a      	b.n	800e068 <_printf_i+0xa8>
 800dff2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dff6:	2b15      	cmp	r3, #21
 800dff8:	d8f6      	bhi.n	800dfe8 <_printf_i+0x28>
 800dffa:	a101      	add	r1, pc, #4	@ (adr r1, 800e000 <_printf_i+0x40>)
 800dffc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e000:	0800e059 	.word	0x0800e059
 800e004:	0800e06d 	.word	0x0800e06d
 800e008:	0800dfe9 	.word	0x0800dfe9
 800e00c:	0800dfe9 	.word	0x0800dfe9
 800e010:	0800dfe9 	.word	0x0800dfe9
 800e014:	0800dfe9 	.word	0x0800dfe9
 800e018:	0800e06d 	.word	0x0800e06d
 800e01c:	0800dfe9 	.word	0x0800dfe9
 800e020:	0800dfe9 	.word	0x0800dfe9
 800e024:	0800dfe9 	.word	0x0800dfe9
 800e028:	0800dfe9 	.word	0x0800dfe9
 800e02c:	0800e16f 	.word	0x0800e16f
 800e030:	0800e097 	.word	0x0800e097
 800e034:	0800e129 	.word	0x0800e129
 800e038:	0800dfe9 	.word	0x0800dfe9
 800e03c:	0800dfe9 	.word	0x0800dfe9
 800e040:	0800e191 	.word	0x0800e191
 800e044:	0800dfe9 	.word	0x0800dfe9
 800e048:	0800e097 	.word	0x0800e097
 800e04c:	0800dfe9 	.word	0x0800dfe9
 800e050:	0800dfe9 	.word	0x0800dfe9
 800e054:	0800e131 	.word	0x0800e131
 800e058:	6833      	ldr	r3, [r6, #0]
 800e05a:	1d1a      	adds	r2, r3, #4
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	6032      	str	r2, [r6, #0]
 800e060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e064:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e068:	2301      	movs	r3, #1
 800e06a:	e09e      	b.n	800e1aa <_printf_i+0x1ea>
 800e06c:	6833      	ldr	r3, [r6, #0]
 800e06e:	6820      	ldr	r0, [r4, #0]
 800e070:	1d19      	adds	r1, r3, #4
 800e072:	6031      	str	r1, [r6, #0]
 800e074:	0606      	lsls	r6, r0, #24
 800e076:	d501      	bpl.n	800e07c <_printf_i+0xbc>
 800e078:	681d      	ldr	r5, [r3, #0]
 800e07a:	e003      	b.n	800e084 <_printf_i+0xc4>
 800e07c:	0645      	lsls	r5, r0, #25
 800e07e:	d5fb      	bpl.n	800e078 <_printf_i+0xb8>
 800e080:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e084:	2d00      	cmp	r5, #0
 800e086:	da03      	bge.n	800e090 <_printf_i+0xd0>
 800e088:	232d      	movs	r3, #45	@ 0x2d
 800e08a:	426d      	negs	r5, r5
 800e08c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e090:	230a      	movs	r3, #10
 800e092:	4859      	ldr	r0, [pc, #356]	@ (800e1f8 <_printf_i+0x238>)
 800e094:	e011      	b.n	800e0ba <_printf_i+0xfa>
 800e096:	6821      	ldr	r1, [r4, #0]
 800e098:	6833      	ldr	r3, [r6, #0]
 800e09a:	0608      	lsls	r0, r1, #24
 800e09c:	f853 5b04 	ldr.w	r5, [r3], #4
 800e0a0:	d402      	bmi.n	800e0a8 <_printf_i+0xe8>
 800e0a2:	0649      	lsls	r1, r1, #25
 800e0a4:	bf48      	it	mi
 800e0a6:	b2ad      	uxthmi	r5, r5
 800e0a8:	2f6f      	cmp	r7, #111	@ 0x6f
 800e0aa:	6033      	str	r3, [r6, #0]
 800e0ac:	bf14      	ite	ne
 800e0ae:	230a      	movne	r3, #10
 800e0b0:	2308      	moveq	r3, #8
 800e0b2:	4851      	ldr	r0, [pc, #324]	@ (800e1f8 <_printf_i+0x238>)
 800e0b4:	2100      	movs	r1, #0
 800e0b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e0ba:	6866      	ldr	r6, [r4, #4]
 800e0bc:	2e00      	cmp	r6, #0
 800e0be:	bfa8      	it	ge
 800e0c0:	6821      	ldrge	r1, [r4, #0]
 800e0c2:	60a6      	str	r6, [r4, #8]
 800e0c4:	bfa4      	itt	ge
 800e0c6:	f021 0104 	bicge.w	r1, r1, #4
 800e0ca:	6021      	strge	r1, [r4, #0]
 800e0cc:	b90d      	cbnz	r5, 800e0d2 <_printf_i+0x112>
 800e0ce:	2e00      	cmp	r6, #0
 800e0d0:	d04b      	beq.n	800e16a <_printf_i+0x1aa>
 800e0d2:	4616      	mov	r6, r2
 800e0d4:	fbb5 f1f3 	udiv	r1, r5, r3
 800e0d8:	fb03 5711 	mls	r7, r3, r1, r5
 800e0dc:	5dc7      	ldrb	r7, [r0, r7]
 800e0de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e0e2:	462f      	mov	r7, r5
 800e0e4:	42bb      	cmp	r3, r7
 800e0e6:	460d      	mov	r5, r1
 800e0e8:	d9f4      	bls.n	800e0d4 <_printf_i+0x114>
 800e0ea:	2b08      	cmp	r3, #8
 800e0ec:	d10b      	bne.n	800e106 <_printf_i+0x146>
 800e0ee:	6823      	ldr	r3, [r4, #0]
 800e0f0:	07df      	lsls	r7, r3, #31
 800e0f2:	d508      	bpl.n	800e106 <_printf_i+0x146>
 800e0f4:	6923      	ldr	r3, [r4, #16]
 800e0f6:	6861      	ldr	r1, [r4, #4]
 800e0f8:	4299      	cmp	r1, r3
 800e0fa:	bfde      	ittt	le
 800e0fc:	2330      	movle	r3, #48	@ 0x30
 800e0fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e102:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e106:	1b92      	subs	r2, r2, r6
 800e108:	6122      	str	r2, [r4, #16]
 800e10a:	464b      	mov	r3, r9
 800e10c:	4621      	mov	r1, r4
 800e10e:	4640      	mov	r0, r8
 800e110:	f8cd a000 	str.w	sl, [sp]
 800e114:	aa03      	add	r2, sp, #12
 800e116:	f7ff fee1 	bl	800dedc <_printf_common>
 800e11a:	3001      	adds	r0, #1
 800e11c:	d14a      	bne.n	800e1b4 <_printf_i+0x1f4>
 800e11e:	f04f 30ff 	mov.w	r0, #4294967295
 800e122:	b004      	add	sp, #16
 800e124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e128:	6823      	ldr	r3, [r4, #0]
 800e12a:	f043 0320 	orr.w	r3, r3, #32
 800e12e:	6023      	str	r3, [r4, #0]
 800e130:	2778      	movs	r7, #120	@ 0x78
 800e132:	4832      	ldr	r0, [pc, #200]	@ (800e1fc <_printf_i+0x23c>)
 800e134:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e138:	6823      	ldr	r3, [r4, #0]
 800e13a:	6831      	ldr	r1, [r6, #0]
 800e13c:	061f      	lsls	r7, r3, #24
 800e13e:	f851 5b04 	ldr.w	r5, [r1], #4
 800e142:	d402      	bmi.n	800e14a <_printf_i+0x18a>
 800e144:	065f      	lsls	r7, r3, #25
 800e146:	bf48      	it	mi
 800e148:	b2ad      	uxthmi	r5, r5
 800e14a:	6031      	str	r1, [r6, #0]
 800e14c:	07d9      	lsls	r1, r3, #31
 800e14e:	bf44      	itt	mi
 800e150:	f043 0320 	orrmi.w	r3, r3, #32
 800e154:	6023      	strmi	r3, [r4, #0]
 800e156:	b11d      	cbz	r5, 800e160 <_printf_i+0x1a0>
 800e158:	2310      	movs	r3, #16
 800e15a:	e7ab      	b.n	800e0b4 <_printf_i+0xf4>
 800e15c:	4826      	ldr	r0, [pc, #152]	@ (800e1f8 <_printf_i+0x238>)
 800e15e:	e7e9      	b.n	800e134 <_printf_i+0x174>
 800e160:	6823      	ldr	r3, [r4, #0]
 800e162:	f023 0320 	bic.w	r3, r3, #32
 800e166:	6023      	str	r3, [r4, #0]
 800e168:	e7f6      	b.n	800e158 <_printf_i+0x198>
 800e16a:	4616      	mov	r6, r2
 800e16c:	e7bd      	b.n	800e0ea <_printf_i+0x12a>
 800e16e:	6833      	ldr	r3, [r6, #0]
 800e170:	6825      	ldr	r5, [r4, #0]
 800e172:	1d18      	adds	r0, r3, #4
 800e174:	6961      	ldr	r1, [r4, #20]
 800e176:	6030      	str	r0, [r6, #0]
 800e178:	062e      	lsls	r6, r5, #24
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	d501      	bpl.n	800e182 <_printf_i+0x1c2>
 800e17e:	6019      	str	r1, [r3, #0]
 800e180:	e002      	b.n	800e188 <_printf_i+0x1c8>
 800e182:	0668      	lsls	r0, r5, #25
 800e184:	d5fb      	bpl.n	800e17e <_printf_i+0x1be>
 800e186:	8019      	strh	r1, [r3, #0]
 800e188:	2300      	movs	r3, #0
 800e18a:	4616      	mov	r6, r2
 800e18c:	6123      	str	r3, [r4, #16]
 800e18e:	e7bc      	b.n	800e10a <_printf_i+0x14a>
 800e190:	6833      	ldr	r3, [r6, #0]
 800e192:	2100      	movs	r1, #0
 800e194:	1d1a      	adds	r2, r3, #4
 800e196:	6032      	str	r2, [r6, #0]
 800e198:	681e      	ldr	r6, [r3, #0]
 800e19a:	6862      	ldr	r2, [r4, #4]
 800e19c:	4630      	mov	r0, r6
 800e19e:	f000 f849 	bl	800e234 <memchr>
 800e1a2:	b108      	cbz	r0, 800e1a8 <_printf_i+0x1e8>
 800e1a4:	1b80      	subs	r0, r0, r6
 800e1a6:	6060      	str	r0, [r4, #4]
 800e1a8:	6863      	ldr	r3, [r4, #4]
 800e1aa:	6123      	str	r3, [r4, #16]
 800e1ac:	2300      	movs	r3, #0
 800e1ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e1b2:	e7aa      	b.n	800e10a <_printf_i+0x14a>
 800e1b4:	4632      	mov	r2, r6
 800e1b6:	4649      	mov	r1, r9
 800e1b8:	4640      	mov	r0, r8
 800e1ba:	6923      	ldr	r3, [r4, #16]
 800e1bc:	47d0      	blx	sl
 800e1be:	3001      	adds	r0, #1
 800e1c0:	d0ad      	beq.n	800e11e <_printf_i+0x15e>
 800e1c2:	6823      	ldr	r3, [r4, #0]
 800e1c4:	079b      	lsls	r3, r3, #30
 800e1c6:	d413      	bmi.n	800e1f0 <_printf_i+0x230>
 800e1c8:	68e0      	ldr	r0, [r4, #12]
 800e1ca:	9b03      	ldr	r3, [sp, #12]
 800e1cc:	4298      	cmp	r0, r3
 800e1ce:	bfb8      	it	lt
 800e1d0:	4618      	movlt	r0, r3
 800e1d2:	e7a6      	b.n	800e122 <_printf_i+0x162>
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	4632      	mov	r2, r6
 800e1d8:	4649      	mov	r1, r9
 800e1da:	4640      	mov	r0, r8
 800e1dc:	47d0      	blx	sl
 800e1de:	3001      	adds	r0, #1
 800e1e0:	d09d      	beq.n	800e11e <_printf_i+0x15e>
 800e1e2:	3501      	adds	r5, #1
 800e1e4:	68e3      	ldr	r3, [r4, #12]
 800e1e6:	9903      	ldr	r1, [sp, #12]
 800e1e8:	1a5b      	subs	r3, r3, r1
 800e1ea:	42ab      	cmp	r3, r5
 800e1ec:	dcf2      	bgt.n	800e1d4 <_printf_i+0x214>
 800e1ee:	e7eb      	b.n	800e1c8 <_printf_i+0x208>
 800e1f0:	2500      	movs	r5, #0
 800e1f2:	f104 0619 	add.w	r6, r4, #25
 800e1f6:	e7f5      	b.n	800e1e4 <_printf_i+0x224>
 800e1f8:	0800ee78 	.word	0x0800ee78
 800e1fc:	0800ee89 	.word	0x0800ee89

0800e200 <memmove>:
 800e200:	4288      	cmp	r0, r1
 800e202:	b510      	push	{r4, lr}
 800e204:	eb01 0402 	add.w	r4, r1, r2
 800e208:	d902      	bls.n	800e210 <memmove+0x10>
 800e20a:	4284      	cmp	r4, r0
 800e20c:	4623      	mov	r3, r4
 800e20e:	d807      	bhi.n	800e220 <memmove+0x20>
 800e210:	1e43      	subs	r3, r0, #1
 800e212:	42a1      	cmp	r1, r4
 800e214:	d008      	beq.n	800e228 <memmove+0x28>
 800e216:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e21a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e21e:	e7f8      	b.n	800e212 <memmove+0x12>
 800e220:	4601      	mov	r1, r0
 800e222:	4402      	add	r2, r0
 800e224:	428a      	cmp	r2, r1
 800e226:	d100      	bne.n	800e22a <memmove+0x2a>
 800e228:	bd10      	pop	{r4, pc}
 800e22a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e22e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e232:	e7f7      	b.n	800e224 <memmove+0x24>

0800e234 <memchr>:
 800e234:	4603      	mov	r3, r0
 800e236:	b510      	push	{r4, lr}
 800e238:	b2c9      	uxtb	r1, r1
 800e23a:	4402      	add	r2, r0
 800e23c:	4293      	cmp	r3, r2
 800e23e:	4618      	mov	r0, r3
 800e240:	d101      	bne.n	800e246 <memchr+0x12>
 800e242:	2000      	movs	r0, #0
 800e244:	e003      	b.n	800e24e <memchr+0x1a>
 800e246:	7804      	ldrb	r4, [r0, #0]
 800e248:	3301      	adds	r3, #1
 800e24a:	428c      	cmp	r4, r1
 800e24c:	d1f6      	bne.n	800e23c <memchr+0x8>
 800e24e:	bd10      	pop	{r4, pc}

0800e250 <memcpy>:
 800e250:	440a      	add	r2, r1
 800e252:	4291      	cmp	r1, r2
 800e254:	f100 33ff 	add.w	r3, r0, #4294967295
 800e258:	d100      	bne.n	800e25c <memcpy+0xc>
 800e25a:	4770      	bx	lr
 800e25c:	b510      	push	{r4, lr}
 800e25e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e262:	4291      	cmp	r1, r2
 800e264:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e268:	d1f9      	bne.n	800e25e <memcpy+0xe>
 800e26a:	bd10      	pop	{r4, pc}

0800e26c <_realloc_r>:
 800e26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e270:	4680      	mov	r8, r0
 800e272:	4615      	mov	r5, r2
 800e274:	460c      	mov	r4, r1
 800e276:	b921      	cbnz	r1, 800e282 <_realloc_r+0x16>
 800e278:	4611      	mov	r1, r2
 800e27a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e27e:	f7ff bb1b 	b.w	800d8b8 <_malloc_r>
 800e282:	b92a      	cbnz	r2, 800e290 <_realloc_r+0x24>
 800e284:	f7ff fc8a 	bl	800db9c <_free_r>
 800e288:	2400      	movs	r4, #0
 800e28a:	4620      	mov	r0, r4
 800e28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e290:	f000 f81a 	bl	800e2c8 <_malloc_usable_size_r>
 800e294:	4285      	cmp	r5, r0
 800e296:	4606      	mov	r6, r0
 800e298:	d802      	bhi.n	800e2a0 <_realloc_r+0x34>
 800e29a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e29e:	d8f4      	bhi.n	800e28a <_realloc_r+0x1e>
 800e2a0:	4629      	mov	r1, r5
 800e2a2:	4640      	mov	r0, r8
 800e2a4:	f7ff fb08 	bl	800d8b8 <_malloc_r>
 800e2a8:	4607      	mov	r7, r0
 800e2aa:	2800      	cmp	r0, #0
 800e2ac:	d0ec      	beq.n	800e288 <_realloc_r+0x1c>
 800e2ae:	42b5      	cmp	r5, r6
 800e2b0:	462a      	mov	r2, r5
 800e2b2:	4621      	mov	r1, r4
 800e2b4:	bf28      	it	cs
 800e2b6:	4632      	movcs	r2, r6
 800e2b8:	f7ff ffca 	bl	800e250 <memcpy>
 800e2bc:	4621      	mov	r1, r4
 800e2be:	4640      	mov	r0, r8
 800e2c0:	f7ff fc6c 	bl	800db9c <_free_r>
 800e2c4:	463c      	mov	r4, r7
 800e2c6:	e7e0      	b.n	800e28a <_realloc_r+0x1e>

0800e2c8 <_malloc_usable_size_r>:
 800e2c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e2cc:	1f18      	subs	r0, r3, #4
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	bfbc      	itt	lt
 800e2d2:	580b      	ldrlt	r3, [r1, r0]
 800e2d4:	18c0      	addlt	r0, r0, r3
 800e2d6:	4770      	bx	lr

0800e2d8 <_init>:
 800e2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2da:	bf00      	nop
 800e2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2de:	bc08      	pop	{r3}
 800e2e0:	469e      	mov	lr, r3
 800e2e2:	4770      	bx	lr

0800e2e4 <_fini>:
 800e2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2e6:	bf00      	nop
 800e2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2ea:	bc08      	pop	{r3}
 800e2ec:	469e      	mov	lr, r3
 800e2ee:	4770      	bx	lr
