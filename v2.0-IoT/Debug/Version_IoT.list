
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000deb4  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c00  0800e098  0800e098  0000f098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ec98  0800ec98  00010fd0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ec98  0800ec98  0000fc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eca0  0800eca0  00010fd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eca0  0800eca0  0000fca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eca4  0800eca4  0000fca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fd0  20000000  0800eca8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba0  20000fd0  0800fc78  00010fd0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b70  0800fc78  00011b70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010fd0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019104  00000000  00000000  00010ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003797  00000000  00000000  0002a0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001340  00000000  00000000  0002d898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000edc  00000000  00000000  0002ebd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8ae  00000000  00000000  0002fab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cbec  00000000  00000000  0004c362  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a05f2  00000000  00000000  00068f4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00109540  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c0  00000000  00000000  00109584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010ea44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fd0 	.word	0x20000fd0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800e080 	.word	0x0800e080

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fd4 	.word	0x20000fd4
 8000220:	0800e080 	.word	0x0800e080

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "EEPROMProcess.h"
#include "main.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	EEPROM_Read(0, 0, eepromData, 110);
 8000238:	236e      	movs	r3, #110	@ 0x6e
 800023a:	4a9b      	ldr	r2, [pc, #620]	@ (80004a8 <eepromKontrol+0x274>)
 800023c:	2100      	movs	r1, #0
 800023e:	2000      	movs	r0, #0
 8000240:	f000 faca 	bl	80007d8 <EEPROM_Read>

	//Sürekli sıfırlama işlemi yapıyor
	//firstSetup();

	setupCompleted = eepromData[0];
 8000244:	4b98      	ldr	r3, [pc, #608]	@ (80004a8 <eepromKontrol+0x274>)
 8000246:	781a      	ldrb	r2, [r3, #0]
 8000248:	4b98      	ldr	r3, [pc, #608]	@ (80004ac <eepromKontrol+0x278>)
 800024a:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 800024c:	4b96      	ldr	r3, [pc, #600]	@ (80004a8 <eepromKontrol+0x274>)
 800024e:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8000252:	4b97      	ldr	r3, [pc, #604]	@ (80004b0 <eepromKontrol+0x27c>)
 8000254:	701a      	strb	r2, [r3, #0]
	idVerifyVal = eepromData[49];
 8000256:	4b94      	ldr	r3, [pc, #592]	@ (80004a8 <eepromKontrol+0x274>)
 8000258:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 800025c:	4b95      	ldr	r3, [pc, #596]	@ (80004b4 <eepromKontrol+0x280>)
 800025e:	701a      	strb	r2, [r3, #0]

	kaydedilenDeger = eepromData[3];
 8000260:	4b91      	ldr	r3, [pc, #580]	@ (80004a8 <eepromKontrol+0x274>)
 8000262:	78da      	ldrb	r2, [r3, #3]
 8000264:	4b94      	ldr	r3, [pc, #592]	@ (80004b8 <eepromKontrol+0x284>)
 8000266:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000268:	4b8f      	ldr	r3, [pc, #572]	@ (80004a8 <eepromKontrol+0x274>)
 800026a:	785a      	ldrb	r2, [r3, #1]
 800026c:	4b93      	ldr	r3, [pc, #588]	@ (80004bc <eepromKontrol+0x288>)
 800026e:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8000270:	4b8d      	ldr	r3, [pc, #564]	@ (80004a8 <eepromKontrol+0x274>)
 8000272:	789a      	ldrb	r2, [r3, #2]
 8000274:	4b92      	ldr	r3, [pc, #584]	@ (80004c0 <eepromKontrol+0x28c>)
 8000276:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000278:	4b8b      	ldr	r3, [pc, #556]	@ (80004a8 <eepromKontrol+0x274>)
 800027a:	791a      	ldrb	r2, [r3, #4]
 800027c:	4b91      	ldr	r3, [pc, #580]	@ (80004c4 <eepromKontrol+0x290>)
 800027e:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8000280:	4b89      	ldr	r3, [pc, #548]	@ (80004a8 <eepromKontrol+0x274>)
 8000282:	795a      	ldrb	r2, [r3, #5]
 8000284:	4b90      	ldr	r3, [pc, #576]	@ (80004c8 <eepromKontrol+0x294>)
 8000286:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000288:	4b87      	ldr	r3, [pc, #540]	@ (80004a8 <eepromKontrol+0x274>)
 800028a:	799a      	ldrb	r2, [r3, #6]
 800028c:	4b8f      	ldr	r3, [pc, #572]	@ (80004cc <eepromKontrol+0x298>)
 800028e:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8000290:	4b85      	ldr	r3, [pc, #532]	@ (80004a8 <eepromKontrol+0x274>)
 8000292:	79da      	ldrb	r2, [r3, #7]
 8000294:	4b8e      	ldr	r3, [pc, #568]	@ (80004d0 <eepromKontrol+0x29c>)
 8000296:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000298:	4b83      	ldr	r3, [pc, #524]	@ (80004a8 <eepromKontrol+0x274>)
 800029a:	7a1a      	ldrb	r2, [r3, #8]
 800029c:	4b8d      	ldr	r3, [pc, #564]	@ (80004d4 <eepromKontrol+0x2a0>)
 800029e:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 80002a0:	4b81      	ldr	r3, [pc, #516]	@ (80004a8 <eepromKontrol+0x274>)
 80002a2:	7a5a      	ldrb	r2, [r3, #9]
 80002a4:	4b8c      	ldr	r3, [pc, #560]	@ (80004d8 <eepromKontrol+0x2a4>)
 80002a6:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a8:	4b7f      	ldr	r3, [pc, #508]	@ (80004a8 <eepromKontrol+0x274>)
 80002aa:	7a9a      	ldrb	r2, [r3, #10]
 80002ac:	4b8b      	ldr	r3, [pc, #556]	@ (80004dc <eepromKontrol+0x2a8>)
 80002ae:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002b0:	4b7d      	ldr	r3, [pc, #500]	@ (80004a8 <eepromKontrol+0x274>)
 80002b2:	7ada      	ldrb	r2, [r3, #11]
 80002b4:	4b8a      	ldr	r3, [pc, #552]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002b6:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b8:	4b7b      	ldr	r3, [pc, #492]	@ (80004a8 <eepromKontrol+0x274>)
 80002ba:	7b1a      	ldrb	r2, [r3, #12]
 80002bc:	4b89      	ldr	r3, [pc, #548]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002be:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002c0:	4b79      	ldr	r3, [pc, #484]	@ (80004a8 <eepromKontrol+0x274>)
 80002c2:	7b5a      	ldrb	r2, [r3, #13]
 80002c4:	4b88      	ldr	r3, [pc, #544]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002c6:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c8:	4b77      	ldr	r3, [pc, #476]	@ (80004a8 <eepromKontrol+0x274>)
 80002ca:	7b9a      	ldrb	r2, [r3, #14]
 80002cc:	4b87      	ldr	r3, [pc, #540]	@ (80004ec <eepromKontrol+0x2b8>)
 80002ce:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002d0:	4b75      	ldr	r3, [pc, #468]	@ (80004a8 <eepromKontrol+0x274>)
 80002d2:	7bda      	ldrb	r2, [r3, #15]
 80002d4:	4b86      	ldr	r3, [pc, #536]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002d6:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d8:	4b73      	ldr	r3, [pc, #460]	@ (80004a8 <eepromKontrol+0x274>)
 80002da:	7c1a      	ldrb	r2, [r3, #16]
 80002dc:	4b85      	ldr	r3, [pc, #532]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002de:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002e0:	4b71      	ldr	r3, [pc, #452]	@ (80004a8 <eepromKontrol+0x274>)
 80002e2:	7c5a      	ldrb	r2, [r3, #17]
 80002e4:	4b84      	ldr	r3, [pc, #528]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002e6:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e8:	4b6f      	ldr	r3, [pc, #444]	@ (80004a8 <eepromKontrol+0x274>)
 80002ea:	7c9a      	ldrb	r2, [r3, #18]
 80002ec:	4b83      	ldr	r3, [pc, #524]	@ (80004fc <eepromKontrol+0x2c8>)
 80002ee:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002f0:	4b6d      	ldr	r3, [pc, #436]	@ (80004a8 <eepromKontrol+0x274>)
 80002f2:	7cda      	ldrb	r2, [r3, #19]
 80002f4:	4b82      	ldr	r3, [pc, #520]	@ (8000500 <eepromKontrol+0x2cc>)
 80002f6:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f8:	4b6b      	ldr	r3, [pc, #428]	@ (80004a8 <eepromKontrol+0x274>)
 80002fa:	7d1a      	ldrb	r2, [r3, #20]
 80002fc:	4b81      	ldr	r3, [pc, #516]	@ (8000504 <eepromKontrol+0x2d0>)
 80002fe:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8000300:	4b69      	ldr	r3, [pc, #420]	@ (80004a8 <eepromKontrol+0x274>)
 8000302:	7d5a      	ldrb	r2, [r3, #21]
 8000304:	4b80      	ldr	r3, [pc, #512]	@ (8000508 <eepromKontrol+0x2d4>)
 8000306:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000308:	4b67      	ldr	r3, [pc, #412]	@ (80004a8 <eepromKontrol+0x274>)
 800030a:	7d9a      	ldrb	r2, [r3, #22]
 800030c:	4b7f      	ldr	r3, [pc, #508]	@ (800050c <eepromKontrol+0x2d8>)
 800030e:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8000310:	4b65      	ldr	r3, [pc, #404]	@ (80004a8 <eepromKontrol+0x274>)
 8000312:	7dda      	ldrb	r2, [r3, #23]
 8000314:	4b7e      	ldr	r3, [pc, #504]	@ (8000510 <eepromKontrol+0x2dc>)
 8000316:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000318:	4b63      	ldr	r3, [pc, #396]	@ (80004a8 <eepromKontrol+0x274>)
 800031a:	7e1a      	ldrb	r2, [r3, #24]
 800031c:	4b7d      	ldr	r3, [pc, #500]	@ (8000514 <eepromKontrol+0x2e0>)
 800031e:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8000320:	4b61      	ldr	r3, [pc, #388]	@ (80004a8 <eepromKontrol+0x274>)
 8000322:	7e5a      	ldrb	r2, [r3, #25]
 8000324:	4b7c      	ldr	r3, [pc, #496]	@ (8000518 <eepromKontrol+0x2e4>)
 8000326:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000328:	4b5f      	ldr	r3, [pc, #380]	@ (80004a8 <eepromKontrol+0x274>)
 800032a:	7e9a      	ldrb	r2, [r3, #26]
 800032c:	4b7b      	ldr	r3, [pc, #492]	@ (800051c <eepromKontrol+0x2e8>)
 800032e:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8000330:	4b5d      	ldr	r3, [pc, #372]	@ (80004a8 <eepromKontrol+0x274>)
 8000332:	7eda      	ldrb	r2, [r3, #27]
 8000334:	4b7a      	ldr	r3, [pc, #488]	@ (8000520 <eepromKontrol+0x2ec>)
 8000336:	701a      	strb	r2, [r3, #0]
	calismaSayisiDemo = eepromData[28];
 8000338:	4b5b      	ldr	r3, [pc, #364]	@ (80004a8 <eepromKontrol+0x274>)
 800033a:	7f1a      	ldrb	r2, [r3, #28]
 800033c:	4b79      	ldr	r3, [pc, #484]	@ (8000524 <eepromKontrol+0x2f0>)
 800033e:	701a      	strb	r2, [r3, #0]
	calismaCount = eepromData[29];
 8000340:	4b59      	ldr	r3, [pc, #356]	@ (80004a8 <eepromKontrol+0x274>)
 8000342:	7f5a      	ldrb	r2, [r3, #29]
 8000344:	4b78      	ldr	r3, [pc, #480]	@ (8000528 <eepromKontrol+0x2f4>)
 8000346:	701a      	strb	r2, [r3, #0]
	calismaCountDemo = eepromData[30];
 8000348:	4b57      	ldr	r3, [pc, #348]	@ (80004a8 <eepromKontrol+0x274>)
 800034a:	7f9a      	ldrb	r2, [r3, #30]
 800034c:	4b77      	ldr	r3, [pc, #476]	@ (800052c <eepromKontrol+0x2f8>)
 800034e:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8000350:	4b55      	ldr	r3, [pc, #340]	@ (80004a8 <eepromKontrol+0x274>)
 8000352:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8000356:	4b76      	ldr	r3, [pc, #472]	@ (8000530 <eepromKontrol+0x2fc>)
 8000358:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 800035a:	4b53      	ldr	r3, [pc, #332]	@ (80004a8 <eepromKontrol+0x274>)
 800035c:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000360:	4b74      	ldr	r3, [pc, #464]	@ (8000534 <eepromKontrol+0x300>)
 8000362:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8000364:	4b50      	ldr	r3, [pc, #320]	@ (80004a8 <eepromKontrol+0x274>)
 8000366:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 800036a:	4b73      	ldr	r3, [pc, #460]	@ (8000538 <eepromKontrol+0x304>)
 800036c:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 800036e:	4b4e      	ldr	r3, [pc, #312]	@ (80004a8 <eepromKontrol+0x274>)
 8000370:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 8000374:	4b71      	ldr	r3, [pc, #452]	@ (800053c <eepromKontrol+0x308>)
 8000376:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000378:	4b4b      	ldr	r3, [pc, #300]	@ (80004a8 <eepromKontrol+0x274>)
 800037a:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 800037e:	4b70      	ldr	r3, [pc, #448]	@ (8000540 <eepromKontrol+0x30c>)
 8000380:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8000382:	4b49      	ldr	r3, [pc, #292]	@ (80004a8 <eepromKontrol+0x274>)
 8000384:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8000388:	4b6e      	ldr	r3, [pc, #440]	@ (8000544 <eepromKontrol+0x310>)
 800038a:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 800038c:	4b46      	ldr	r3, [pc, #280]	@ (80004a8 <eepromKontrol+0x274>)
 800038e:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 8000392:	4b6d      	ldr	r3, [pc, #436]	@ (8000548 <eepromKontrol+0x314>)
 8000394:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8000396:	4b44      	ldr	r3, [pc, #272]	@ (80004a8 <eepromKontrol+0x274>)
 8000398:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 800039c:	4b6b      	ldr	r3, [pc, #428]	@ (800054c <eepromKontrol+0x318>)
 800039e:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003a0:	4b41      	ldr	r3, [pc, #260]	@ (80004a8 <eepromKontrol+0x274>)
 80003a2:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80003a6:	4b6a      	ldr	r3, [pc, #424]	@ (8000550 <eepromKontrol+0x31c>)
 80003a8:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003aa:	4b3f      	ldr	r3, [pc, #252]	@ (80004a8 <eepromKontrol+0x274>)
 80003ac:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003b0:	4b68      	ldr	r3, [pc, #416]	@ (8000554 <eepromKontrol+0x320>)
 80003b2:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003b4:	4b3c      	ldr	r3, [pc, #240]	@ (80004a8 <eepromKontrol+0x274>)
 80003b6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003ba:	4b67      	ldr	r3, [pc, #412]	@ (8000558 <eepromKontrol+0x324>)
 80003bc:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003be:	4b3a      	ldr	r3, [pc, #232]	@ (80004a8 <eepromKontrol+0x274>)
 80003c0:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003c4:	4b65      	ldr	r3, [pc, #404]	@ (800055c <eepromKontrol+0x328>)
 80003c6:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003c8:	4b37      	ldr	r3, [pc, #220]	@ (80004a8 <eepromKontrol+0x274>)
 80003ca:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003ce:	4b64      	ldr	r3, [pc, #400]	@ (8000560 <eepromKontrol+0x32c>)
 80003d0:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003d2:	4b35      	ldr	r3, [pc, #212]	@ (80004a8 <eepromKontrol+0x274>)
 80003d4:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003d8:	4b62      	ldr	r3, [pc, #392]	@ (8000564 <eepromKontrol+0x330>)
 80003da:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 80003dc:	4b37      	ldr	r3, [pc, #220]	@ (80004bc <eepromKontrol+0x288>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	2b01      	cmp	r3, #1
 80003e2:	d902      	bls.n	80003ea <eepromKontrol+0x1b6>
	    calismaSekli=0;
 80003e4:	4b35      	ldr	r3, [pc, #212]	@ (80004bc <eepromKontrol+0x288>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 80003ea:	4b35      	ldr	r3, [pc, #212]	@ (80004c0 <eepromKontrol+0x28c>)
 80003ec:	781b      	ldrb	r3, [r3, #0]
 80003ee:	2b01      	cmp	r3, #1
 80003f0:	d902      	bls.n	80003f8 <eepromKontrol+0x1c4>
	    emniyetCercevesi=1;
 80003f2:	4b33      	ldr	r3, [pc, #204]	@ (80004c0 <eepromKontrol+0x28c>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 80003f8:	4b32      	ldr	r3, [pc, #200]	@ (80004c4 <eepromKontrol+0x290>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b01      	cmp	r3, #1
 80003fe:	d902      	bls.n	8000406 <eepromKontrol+0x1d2>
	    yavaslamaLimit=0;
 8000400:	4b30      	ldr	r3, [pc, #192]	@ (80004c4 <eepromKontrol+0x290>)
 8000402:	2200      	movs	r2, #0
 8000404:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8000406:	4b30      	ldr	r3, [pc, #192]	@ (80004c8 <eepromKontrol+0x294>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	2b01      	cmp	r3, #1
 800040c:	d902      	bls.n	8000414 <eepromKontrol+0x1e0>
	    altLimit=1;
 800040e:	4b2e      	ldr	r3, [pc, #184]	@ (80004c8 <eepromKontrol+0x294>)
 8000410:	2201      	movs	r2, #1
 8000412:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8000414:	4b2d      	ldr	r3, [pc, #180]	@ (80004cc <eepromKontrol+0x298>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d902      	bls.n	8000422 <eepromKontrol+0x1ee>
	    basincSalteri=1;
 800041c:	4b2b      	ldr	r3, [pc, #172]	@ (80004cc <eepromKontrol+0x298>)
 800041e:	2201      	movs	r2, #1
 8000420:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8000422:	4b2b      	ldr	r3, [pc, #172]	@ (80004d0 <eepromKontrol+0x29c>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	2b03      	cmp	r3, #3
 8000428:	d902      	bls.n	8000430 <eepromKontrol+0x1fc>
	    kapiSecimleri=3;
 800042a:	4b29      	ldr	r3, [pc, #164]	@ (80004d0 <eepromKontrol+0x29c>)
 800042c:	2203      	movs	r2, #3
 800042e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000430:	4b42      	ldr	r3, [pc, #264]	@ (800053c <eepromKontrol+0x308>)
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b01      	cmp	r3, #1
 8000436:	d902      	bls.n	800043e <eepromKontrol+0x20a>
	    kapiAcTipi=0;
 8000438:	4b40      	ldr	r3, [pc, #256]	@ (800053c <eepromKontrol+0x308>)
 800043a:	2200      	movs	r2, #0
 800043c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 800043e:	4b25      	ldr	r3, [pc, #148]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2b02      	cmp	r3, #2
 8000444:	d902      	bls.n	800044c <eepromKontrol+0x218>
	    kapi1Tip=1;
 8000446:	4b23      	ldr	r3, [pc, #140]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000448:	2201      	movs	r2, #1
 800044a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 800044c:	4b22      	ldr	r3, [pc, #136]	@ (80004d8 <eepromKontrol+0x2a4>)
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	2b05      	cmp	r3, #5
 8000452:	d902      	bls.n	800045a <eepromKontrol+0x226>
	    kapi1AcSure=5;
 8000454:	4b20      	ldr	r3, [pc, #128]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000456:	2205      	movs	r2, #5
 8000458:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800045a:	4b20      	ldr	r3, [pc, #128]	@ (80004dc <eepromKontrol+0x2a8>)
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	2b02      	cmp	r3, #2
 8000460:	d902      	bls.n	8000468 <eepromKontrol+0x234>
	    kapi2Tip=1;
 8000462:	4b1e      	ldr	r3, [pc, #120]	@ (80004dc <eepromKontrol+0x2a8>)
 8000464:	2201      	movs	r2, #1
 8000466:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8000468:	4b1d      	ldr	r3, [pc, #116]	@ (80004e0 <eepromKontrol+0x2ac>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b05      	cmp	r3, #5
 800046e:	d902      	bls.n	8000476 <eepromKontrol+0x242>
	    kapi2AcSure=5;
 8000470:	4b1b      	ldr	r3, [pc, #108]	@ (80004e0 <eepromKontrol+0x2ac>)
 8000472:	2205      	movs	r2, #5
 8000474:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8000476:	4b1b      	ldr	r3, [pc, #108]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	2b02      	cmp	r3, #2
 800047c:	d902      	bls.n	8000484 <eepromKontrol+0x250>
	    kapitablaTip=1;
 800047e:	4b19      	ldr	r3, [pc, #100]	@ (80004e4 <eepromKontrol+0x2b0>)
 8000480:	2201      	movs	r2, #1
 8000482:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8000484:	4b2b      	ldr	r3, [pc, #172]	@ (8000534 <eepromKontrol+0x300>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2b02      	cmp	r3, #2
 800048a:	d902      	bls.n	8000492 <eepromKontrol+0x25e>
	    kapiTablaAcKonum=2;
 800048c:	4b29      	ldr	r3, [pc, #164]	@ (8000534 <eepromKontrol+0x300>)
 800048e:	2202      	movs	r2, #2
 8000490:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8000492:	4b15      	ldr	r3, [pc, #84]	@ (80004e8 <eepromKontrol+0x2b4>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b05      	cmp	r3, #5
 8000498:	d902      	bls.n	80004a0 <eepromKontrol+0x26c>
	    kapiTablaAcSure=5;
 800049a:	4b13      	ldr	r3, [pc, #76]	@ (80004e8 <eepromKontrol+0x2b4>)
 800049c:	2205      	movs	r2, #5
 800049e:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80004a0:	4b12      	ldr	r3, [pc, #72]	@ (80004ec <eepromKontrol+0x2b8>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	e05f      	b.n	8000568 <eepromKontrol+0x334>
 80004a8:	20000fec 	.word	0x20000fec
 80004ac:	20001090 	.word	0x20001090
 80004b0:	200010e7 	.word	0x200010e7
 80004b4:	200010e8 	.word	0x200010e8
 80004b8:	20001091 	.word	0x20001091
 80004bc:	200010bd 	.word	0x200010bd
 80004c0:	200010c0 	.word	0x200010c0
 80004c4:	200010c1 	.word	0x200010c1
 80004c8:	200010c2 	.word	0x200010c2
 80004cc:	200010c3 	.word	0x200010c3
 80004d0:	200010c4 	.word	0x200010c4
 80004d4:	200010c5 	.word	0x200010c5
 80004d8:	200010d5 	.word	0x200010d5
 80004dc:	200010c6 	.word	0x200010c6
 80004e0:	200010d6 	.word	0x200010d6
 80004e4:	200010c7 	.word	0x200010c7
 80004e8:	200010d7 	.word	0x200010d7
 80004ec:	200010ca 	.word	0x200010ca
 80004f0:	200010cb 	.word	0x200010cb
 80004f4:	200010cc 	.word	0x200010cc
 80004f8:	200010cd 	.word	0x200010cd
 80004fc:	200010ce 	.word	0x200010ce
 8000500:	200010cf 	.word	0x200010cf
 8000504:	200010d0 	.word	0x200010d0
 8000508:	200010d1 	.word	0x200010d1
 800050c:	200010d2 	.word	0x200010d2
 8000510:	200010d3 	.word	0x200010d3
 8000514:	200010d4 	.word	0x200010d4
 8000518:	200010d8 	.word	0x200010d8
 800051c:	200010da 	.word	0x200010da
 8000520:	200010b4 	.word	0x200010b4
 8000524:	200010b5 	.word	0x200010b5
 8000528:	200010b6 	.word	0x200010b6
 800052c:	200010b7 	.word	0x200010b7
 8000530:	200010dc 	.word	0x200010dc
 8000534:	200010c9 	.word	0x200010c9
 8000538:	200010db 	.word	0x200010db
 800053c:	200010c8 	.word	0x200010c8
 8000540:	200010dd 	.word	0x200010dd
 8000544:	200010de 	.word	0x200010de
 8000548:	200010df 	.word	0x200010df
 800054c:	200010e0 	.word	0x200010e0
 8000550:	200010e1 	.word	0x200010e1
 8000554:	200010e2 	.word	0x200010e2
 8000558:	200010e3 	.word	0x200010e3
 800055c:	200010e4 	.word	0x200010e4
 8000560:	200010e5 	.word	0x200010e5
 8000564:	200010e6 	.word	0x200010e6
 8000568:	d902      	bls.n	8000570 <eepromKontrol+0x33c>
	    yukariYavasLimit=0;
 800056a:	4b42      	ldr	r3, [pc, #264]	@ (8000674 <eepromKontrol+0x440>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8000570:	4b41      	ldr	r3, [pc, #260]	@ (8000678 <eepromKontrol+0x444>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b02      	cmp	r3, #2
 8000576:	d902      	bls.n	800057e <eepromKontrol+0x34a>
	    devirmeYuruyusSecim=0;
 8000578:	4b3f      	ldr	r3, [pc, #252]	@ (8000678 <eepromKontrol+0x444>)
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 800057e:	4b3f      	ldr	r3, [pc, #252]	@ (800067c <eepromKontrol+0x448>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	2b01      	cmp	r3, #1
 8000584:	d902      	bls.n	800058c <eepromKontrol+0x358>
	    devirmeYukariIleriLimit=1;
 8000586:	4b3d      	ldr	r3, [pc, #244]	@ (800067c <eepromKontrol+0x448>)
 8000588:	2201      	movs	r2, #1
 800058a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 800058c:	4b3c      	ldr	r3, [pc, #240]	@ (8000680 <eepromKontrol+0x44c>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b01      	cmp	r3, #1
 8000592:	d902      	bls.n	800059a <eepromKontrol+0x366>
	    devirmeAsagiGeriLimit=1;
 8000594:	4b3a      	ldr	r3, [pc, #232]	@ (8000680 <eepromKontrol+0x44c>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800059a:	4b3a      	ldr	r3, [pc, #232]	@ (8000684 <eepromKontrol+0x450>)
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d902      	bls.n	80005a8 <eepromKontrol+0x374>
	    devirmeSilindirTipi=0;
 80005a2:	4b38      	ldr	r3, [pc, #224]	@ (8000684 <eepromKontrol+0x450>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 80005a8:	4b37      	ldr	r3, [pc, #220]	@ (8000688 <eepromKontrol+0x454>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d902      	bls.n	80005b6 <eepromKontrol+0x382>
	    platformSilindirTipi=0;
 80005b0:	4b35      	ldr	r3, [pc, #212]	@ (8000688 <eepromKontrol+0x454>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 80005b6:	4b35      	ldr	r3, [pc, #212]	@ (800068c <eepromKontrol+0x458>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b05      	cmp	r3, #5
 80005bc:	d902      	bls.n	80005c4 <eepromKontrol+0x390>
	    yukariValfTmr=0;
 80005be:	4b33      	ldr	r3, [pc, #204]	@ (800068c <eepromKontrol+0x458>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 80005c4:	4b32      	ldr	r3, [pc, #200]	@ (8000690 <eepromKontrol+0x45c>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b05      	cmp	r3, #5
 80005ca:	d902      	bls.n	80005d2 <eepromKontrol+0x39e>
	    asagiValfTmr=0;
 80005cc:	4b30      	ldr	r3, [pc, #192]	@ (8000690 <eepromKontrol+0x45c>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 80005d2:	4b30      	ldr	r3, [pc, #192]	@ (8000694 <eepromKontrol+0x460>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b05      	cmp	r3, #5
 80005d8:	d902      	bls.n	80005e0 <eepromKontrol+0x3ac>
	    devirmeYukariIleriTmr=0;
 80005da:	4b2e      	ldr	r3, [pc, #184]	@ (8000694 <eepromKontrol+0x460>)
 80005dc:	2200      	movs	r2, #0
 80005de:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 80005e0:	4b2d      	ldr	r3, [pc, #180]	@ (8000698 <eepromKontrol+0x464>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b05      	cmp	r3, #5
 80005e6:	d902      	bls.n	80005ee <eepromKontrol+0x3ba>
	    devirmeAsagiGeriTmr=0;
 80005e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000698 <eepromKontrol+0x464>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 80005ee:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <eepromKontrol+0x468>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2bb4      	cmp	r3, #180	@ 0xb4
 80005f4:	d902      	bls.n	80005fc <eepromKontrol+0x3c8>
	    makineCalismaTmr=60;
 80005f6:	4b29      	ldr	r3, [pc, #164]	@ (800069c <eepromKontrol+0x468>)
 80005f8:	223c      	movs	r2, #60	@ 0x3c
 80005fa:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 80005fc:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <eepromKontrol+0x46c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b01      	cmp	r3, #1
 8000602:	d902      	bls.n	800060a <eepromKontrol+0x3d6>
	    buzzer=0;
 8000604:	4b26      	ldr	r3, [pc, #152]	@ (80006a0 <eepromKontrol+0x46c>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800060a:	4b26      	ldr	r3, [pc, #152]	@ (80006a4 <eepromKontrol+0x470>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d902      	bls.n	8000618 <eepromKontrol+0x3e4>
	    demoMode=0;
 8000612:	4b24      	ldr	r3, [pc, #144]	@ (80006a4 <eepromKontrol+0x470>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8000618:	4b23      	ldr	r3, [pc, #140]	@ (80006a8 <eepromKontrol+0x474>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d902      	bls.n	8000626 <eepromKontrol+0x3f2>
	    calismaSayModu=0;
 8000620:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <eepromKontrol+0x474>)
 8000622:	2200      	movs	r2, #0
 8000624:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000626:	4b21      	ldr	r3, [pc, #132]	@ (80006ac <eepromKontrol+0x478>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d902      	bls.n	8000634 <eepromKontrol+0x400>
	    dilSecim=0;
 800062e:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <eepromKontrol+0x478>)
 8000630:	2200      	movs	r2, #0
 8000632:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8000634:	4b1e      	ldr	r3, [pc, #120]	@ (80006b0 <eepromKontrol+0x47c>)
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	2b01      	cmp	r3, #1
 800063a:	d902      	bls.n	8000642 <eepromKontrol+0x40e>
		iotMode=0;
 800063c:	4b1c      	ldr	r3, [pc, #112]	@ (80006b0 <eepromKontrol+0x47c>)
 800063e:	2200      	movs	r2, #0
 8000640:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 8000642:	2001      	movs	r0, #1
 8000644:	f000 f938 	bl	80008b8 <convertArrays>
	HAL_Delay(250);
 8000648:	20fa      	movs	r0, #250	@ 0xfa
 800064a:	f009 f9f7 	bl	8009a3c <HAL_Delay>

	convertArrays(2);
 800064e:	2002      	movs	r0, #2
 8000650:	f000 f932 	bl	80008b8 <convertArrays>
	HAL_Delay(250);
 8000654:	20fa      	movs	r0, #250	@ 0xfa
 8000656:	f009 f9f1 	bl	8009a3c <HAL_Delay>

	convertArrays(3);
 800065a:	2003      	movs	r0, #3
 800065c:	f000 f92c 	bl	80008b8 <convertArrays>
	HAL_Delay(250);
 8000660:	20fa      	movs	r0, #250	@ 0xfa
 8000662:	f009 f9eb 	bl	8009a3c <HAL_Delay>

	loadMenuTexts(dilSecim);
 8000666:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <eepromKontrol+0x478>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	4618      	mov	r0, r3
 800066c:	f005 fd5c 	bl	8006128 <loadMenuTexts>
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200010ca 	.word	0x200010ca
 8000678:	200010cb 	.word	0x200010cb
 800067c:	200010cc 	.word	0x200010cc
 8000680:	200010cd 	.word	0x200010cd
 8000684:	200010ce 	.word	0x200010ce
 8000688:	200010cf 	.word	0x200010cf
 800068c:	200010d0 	.word	0x200010d0
 8000690:	200010d1 	.word	0x200010d1
 8000694:	200010d2 	.word	0x200010d2
 8000698:	200010d3 	.word	0x200010d3
 800069c:	200010d4 	.word	0x200010d4
 80006a0:	200010d8 	.word	0x200010d8
 80006a4:	200010da 	.word	0x200010da
 80006a8:	200010db 	.word	0x200010db
 80006ac:	200010dc 	.word	0x200010dc
 80006b0:	200010e7 	.word	0x200010e7

080006b4 <saveEEPROM>:

    HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, sizeof(eepromData), eepromData, sizeof(eepromData), 3000);
    HAL_Delay(1000);
}

void saveEEPROM(int resultText) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	EEPROM_Write(0, 0, eepromData, 110);
 80006bc:	236e      	movs	r3, #110	@ 0x6e
 80006be:	4a0b      	ldr	r2, [pc, #44]	@ (80006ec <saveEEPROM+0x38>)
 80006c0:	2100      	movs	r1, #0
 80006c2:	2000      	movs	r0, #0
 80006c4:	f000 f816 	bl	80006f4 <EEPROM_Write>

    if(resultText == 1) {
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d104      	bne.n	80006d8 <saveEEPROM+0x24>
    	lcd_print(2, 1, dataYazildiText);
 80006ce:	4a08      	ldr	r2, [pc, #32]	@ (80006f0 <saveEEPROM+0x3c>)
 80006d0:	2101      	movs	r1, #1
 80006d2:	2002      	movs	r0, #2
 80006d4:	f008 fc58 	bl	8008f88 <lcd_print>
    }

    // Ekranı temizle
    HAL_Delay(500);
 80006d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006dc:	f009 f9ae 	bl	8009a3c <HAL_Delay>
    lcd_clear();
 80006e0:	f008 fc7e 	bl	8008fe0 <lcd_clear>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	20000fec 	.word	0x20000fec
 80006f0:	20001860 	.word	0x20001860

080006f4 <EEPROM_Write>:

void EEPROM_Write(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08e      	sub	sp, #56	@ 0x38
 80006f8:	af04      	add	r7, sp, #16
 80006fa:	60ba      	str	r2, [r7, #8]
 80006fc:	461a      	mov	r2, r3
 80006fe:	4603      	mov	r3, r0
 8000700:	81fb      	strh	r3, [r7, #14]
 8000702:	460b      	mov	r3, r1
 8000704:	81bb      	strh	r3, [r7, #12]
 8000706:	4613      	mov	r3, r2
 8000708:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 800070a:	2306      	movs	r3, #6
 800070c:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 8000712:	88fa      	ldrh	r2, [r7, #6]
 8000714:	89bb      	ldrh	r3, [r7, #12]
 8000716:	4413      	add	r3, r2
 8000718:	2b00      	cmp	r3, #0
 800071a:	da00      	bge.n	800071e <EEPROM_Write+0x2a>
 800071c:	333f      	adds	r3, #63	@ 0x3f
 800071e:	119b      	asrs	r3, r3, #6
 8000720:	b29a      	uxth	r2, r3
 8000722:	89fb      	ldrh	r3, [r7, #14]
 8000724:	4413      	add	r3, r2
 8000726:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 8000728:	8afa      	ldrh	r2, [r7, #22]
 800072a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800072c:	1ad3      	subs	r3, r2, r3
 800072e:	b29b      	uxth	r3, r3
 8000730:	3301      	adds	r3, #1
 8000732:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 8000738:	2300      	movs	r3, #0
 800073a:	623b      	str	r3, [r7, #32]
 800073c:	e041      	b.n	80007c2 <EEPROM_Write+0xce>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 800073e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	b21a      	sxth	r2, r3
 8000748:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800074c:	4313      	orrs	r3, r2
 800074e:	b21b      	sxth	r3, r3
 8000750:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000752:	89bb      	ldrh	r3, [r7, #12]
 8000754:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000758:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800075a:	8bfa      	ldrh	r2, [r7, #30]
 800075c:	88fb      	ldrh	r3, [r7, #6]
 800075e:	429a      	cmp	r2, r3
 8000760:	d901      	bls.n	8000766 <EEPROM_Write+0x72>
            bytesremaining = size;
 8000762:	88fb      	ldrh	r3, [r7, #6]
 8000764:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 8000766:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	4413      	add	r3, r2
 800076c:	8a79      	ldrh	r1, [r7, #18]
 800076e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000772:	9202      	str	r2, [sp, #8]
 8000774:	8bfa      	ldrh	r2, [r7, #30]
 8000776:	9201      	str	r2, [sp, #4]
 8000778:	9300      	str	r3, [sp, #0]
 800077a:	2310      	movs	r3, #16
 800077c:	460a      	mov	r2, r1
 800077e:	21a0      	movs	r1, #160	@ 0xa0
 8000780:	4813      	ldr	r0, [pc, #76]	@ (80007d0 <EEPROM_Write+0xdc>)
 8000782:	f00a f9e5 	bl	800ab50 <HAL_I2C_Mem_Write>
 8000786:	4603      	mov	r3, r0
 8000788:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800078a:	7c7b      	ldrb	r3, [r7, #17]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d005      	beq.n	800079c <EEPROM_Write+0xa8>
            lcd_print(2, 1, "Hata: EEPROM    ");
 8000790:	4a10      	ldr	r2, [pc, #64]	@ (80007d4 <EEPROM_Write+0xe0>)
 8000792:	2101      	movs	r1, #1
 8000794:	2002      	movs	r0, #2
 8000796:	f008 fbf7 	bl	8008f88 <lcd_print>
            return;
 800079a:	e016      	b.n	80007ca <EEPROM_Write+0xd6>
        }

        startPage += 1;
 800079c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800079e:	3301      	adds	r3, #1
 80007a0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 80007a6:	88fa      	ldrh	r2, [r7, #6]
 80007a8:	8bfb      	ldrh	r3, [r7, #30]
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 80007ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80007b0:	8bfb      	ldrh	r3, [r7, #30]
 80007b2:	4413      	add	r3, r2
 80007b4:	84bb      	strh	r3, [r7, #36]	@ 0x24

        HAL_Delay(5);
 80007b6:	2005      	movs	r0, #5
 80007b8:	f009 f940 	bl	8009a3c <HAL_Delay>
    for (int i = 0; i < numofpages; i++) {
 80007bc:	6a3b      	ldr	r3, [r7, #32]
 80007be:	3301      	adds	r3, #1
 80007c0:	623b      	str	r3, [r7, #32]
 80007c2:	8abb      	ldrh	r3, [r7, #20]
 80007c4:	6a3a      	ldr	r2, [r7, #32]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	dbb9      	blt.n	800073e <EEPROM_Write+0x4a>
    }
}
 80007ca:	3728      	adds	r7, #40	@ 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000193c 	.word	0x2000193c
 80007d4:	0800e098 	.word	0x0800e098

080007d8 <EEPROM_Read>:

void EEPROM_Read(uint16_t page, uint16_t offset, uint8_t *data, uint16_t size) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08e      	sub	sp, #56	@ 0x38
 80007dc:	af04      	add	r7, sp, #16
 80007de:	60ba      	str	r2, [r7, #8]
 80007e0:	461a      	mov	r2, r3
 80007e2:	4603      	mov	r3, r0
 80007e4:	81fb      	strh	r3, [r7, #14]
 80007e6:	460b      	mov	r3, r1
 80007e8:	81bb      	strh	r3, [r7, #12]
 80007ea:	4613      	mov	r3, r2
 80007ec:	80fb      	strh	r3, [r7, #6]
    HAL_StatusTypeDef status;

    int paddrposition = log(PAGE_SIZE) / log(2);
 80007ee:	2306      	movs	r3, #6
 80007f0:	61bb      	str	r3, [r7, #24]

    uint16_t startPage = page;
 80007f2:	89fb      	ldrh	r3, [r7, #14]
 80007f4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    uint16_t endPage = page + ((size + offset) / PAGE_SIZE);
 80007f6:	88fa      	ldrh	r2, [r7, #6]
 80007f8:	89bb      	ldrh	r3, [r7, #12]
 80007fa:	4413      	add	r3, r2
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	da00      	bge.n	8000802 <EEPROM_Read+0x2a>
 8000800:	333f      	adds	r3, #63	@ 0x3f
 8000802:	119b      	asrs	r3, r3, #6
 8000804:	b29a      	uxth	r2, r3
 8000806:	89fb      	ldrh	r3, [r7, #14]
 8000808:	4413      	add	r3, r2
 800080a:	82fb      	strh	r3, [r7, #22]

    uint16_t numofpages = (endPage - startPage) + 1;
 800080c:	8afa      	ldrh	r2, [r7, #22]
 800080e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000810:	1ad3      	subs	r3, r2, r3
 8000812:	b29b      	uxth	r3, r3
 8000814:	3301      	adds	r3, #1
 8000816:	82bb      	strh	r3, [r7, #20]
    uint16_t pos = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for (int i = 0; i < numofpages; i++) {
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
 8000820:	e03e      	b.n	80008a0 <EEPROM_Read+0xc8>
        uint16_t MemAddress = (startPage << paddrposition) | offset;
 8000822:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	b21a      	sxth	r2, r3
 800082c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000830:	4313      	orrs	r3, r2
 8000832:	b21b      	sxth	r3, r3
 8000834:	827b      	strh	r3, [r7, #18]
        uint16_t bytesremaining = PAGE_SIZE - offset;
 8000836:	89bb      	ldrh	r3, [r7, #12]
 8000838:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800083c:	83fb      	strh	r3, [r7, #30]
        if (bytesremaining > size) {
 800083e:	8bfa      	ldrh	r2, [r7, #30]
 8000840:	88fb      	ldrh	r3, [r7, #6]
 8000842:	429a      	cmp	r2, r3
 8000844:	d901      	bls.n	800084a <EEPROM_Read+0x72>
            bytesremaining = size;
 8000846:	88fb      	ldrh	r3, [r7, #6]
 8000848:	83fb      	strh	r3, [r7, #30]
        }

        status = HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, MemAddress, I2C_MEMADD_SIZE_16BIT, &data[pos], bytesremaining, 1000);
 800084a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800084c:	68ba      	ldr	r2, [r7, #8]
 800084e:	4413      	add	r3, r2
 8000850:	8a79      	ldrh	r1, [r7, #18]
 8000852:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000856:	9202      	str	r2, [sp, #8]
 8000858:	8bfa      	ldrh	r2, [r7, #30]
 800085a:	9201      	str	r2, [sp, #4]
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	2310      	movs	r3, #16
 8000860:	460a      	mov	r2, r1
 8000862:	21a0      	movs	r1, #160	@ 0xa0
 8000864:	4812      	ldr	r0, [pc, #72]	@ (80008b0 <EEPROM_Read+0xd8>)
 8000866:	f00a fa6d 	bl	800ad44 <HAL_I2C_Mem_Read>
 800086a:	4603      	mov	r3, r0
 800086c:	747b      	strb	r3, [r7, #17]
        if (status != HAL_OK) {
 800086e:	7c7b      	ldrb	r3, [r7, #17]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d005      	beq.n	8000880 <EEPROM_Read+0xa8>
            lcd_print(2, 1, "Hata: EEPROM OKU");
 8000874:	4a0f      	ldr	r2, [pc, #60]	@ (80008b4 <EEPROM_Read+0xdc>)
 8000876:	2101      	movs	r1, #1
 8000878:	2002      	movs	r0, #2
 800087a:	f008 fb85 	bl	8008f88 <lcd_print>
            return;
 800087e:	e013      	b.n	80008a8 <EEPROM_Read+0xd0>
        }

        startPage += 1;
 8000880:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000882:	3301      	adds	r3, #1
 8000884:	84fb      	strh	r3, [r7, #38]	@ 0x26
        offset = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	81bb      	strh	r3, [r7, #12]
        size -= bytesremaining;
 800088a:	88fa      	ldrh	r2, [r7, #6]
 800088c:	8bfb      	ldrh	r3, [r7, #30]
 800088e:	1ad3      	subs	r3, r2, r3
 8000890:	80fb      	strh	r3, [r7, #6]
        pos += bytesremaining;
 8000892:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000894:	8bfb      	ldrh	r3, [r7, #30]
 8000896:	4413      	add	r3, r2
 8000898:	84bb      	strh	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < numofpages; i++) {
 800089a:	6a3b      	ldr	r3, [r7, #32]
 800089c:	3301      	adds	r3, #1
 800089e:	623b      	str	r3, [r7, #32]
 80008a0:	8abb      	ldrh	r3, [r7, #20]
 80008a2:	6a3a      	ldr	r2, [r7, #32]
 80008a4:	429a      	cmp	r2, r3
 80008a6:	dbbc      	blt.n	8000822 <EEPROM_Read+0x4a>
    }
}
 80008a8:	3728      	adds	r7, #40	@ 0x28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000193c 	.word	0x2000193c
 80008b4:	0800e0ac 	.word	0x0800e0ac

080008b8 <convertArrays>:

void convertArrays(int state) {
 80008b8:	b480      	push	{r7}
 80008ba:	b08b      	sub	sp, #44	@ 0x2c
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d11d      	bne.n	8000902 <convertArrays+0x4a>
		int eepromVal = idStartPos;
 80008c6:	4b34      	ldr	r3, [pc, #208]	@ (8000998 <convertArrays+0xe0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
 80008d0:	e013      	b.n	80008fa <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 80008d2:	4a32      	ldr	r2, [pc, #200]	@ (800099c <convertArrays+0xe4>)
 80008d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008d6:	4413      	add	r3, r2
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 80008dc:	4a30      	ldr	r2, [pc, #192]	@ (80009a0 <convertArrays+0xe8>)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	4413      	add	r3, r2
 80008e2:	7819      	ldrb	r1, [r3, #0]
 80008e4:	4a2f      	ldr	r2, [pc, #188]	@ (80009a4 <convertArrays+0xec>)
 80008e6:	6a3b      	ldr	r3, [r7, #32]
 80008e8:	4413      	add	r3, r2
 80008ea:	460a      	mov	r2, r1
 80008ec:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 80008ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008f0:	3301      	adds	r3, #1
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 80008f4:	6a3b      	ldr	r3, [r7, #32]
 80008f6:	3301      	adds	r3, #1
 80008f8:	623b      	str	r3, [r7, #32]
 80008fa:	6a3b      	ldr	r3, [r7, #32]
 80008fc:	2b0b      	cmp	r3, #11
 80008fe:	dde8      	ble.n	80008d2 <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000900:	e045      	b.n	800098e <convertArrays+0xd6>
	} else if(state == 2) {
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d121      	bne.n	800094c <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 8000908:	4b27      	ldr	r3, [pc, #156]	@ (80009a8 <convertArrays+0xf0>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800090e:	2300      	movs	r3, #0
 8000910:	61bb      	str	r3, [r7, #24]
 8000912:	e017      	b.n	8000944 <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 8000914:	4a21      	ldr	r2, [pc, #132]	@ (800099c <convertArrays+0xe4>)
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	4413      	add	r3, r2
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d00e      	beq.n	800093e <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 8000920:	4a1e      	ldr	r2, [pc, #120]	@ (800099c <convertArrays+0xe4>)
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	4413      	add	r3, r2
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b20      	ldr	r3, [pc, #128]	@ (80009ac <convertArrays+0xf4>)
 800092c:	5c99      	ldrb	r1, [r3, r2]
 800092e:	4a20      	ldr	r2, [pc, #128]	@ (80009b0 <convertArrays+0xf8>)
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	4413      	add	r3, r2
 8000934:	460a      	mov	r2, r1
 8000936:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	3301      	adds	r3, #1
 800093c:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	3301      	adds	r3, #1
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	69bb      	ldr	r3, [r7, #24]
 8000946:	2b0f      	cmp	r3, #15
 8000948:	dde4      	ble.n	8000914 <convertArrays+0x5c>
}
 800094a:	e020      	b.n	800098e <convertArrays+0xd6>
		int eepromVal = passStartPos;
 800094c:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <convertArrays+0xfc>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	e017      	b.n	8000988 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 8000958:	4a10      	ldr	r2, [pc, #64]	@ (800099c <convertArrays+0xe4>)
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	4413      	add	r3, r2
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d00e      	beq.n	8000982 <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 8000964:	4a0d      	ldr	r2, [pc, #52]	@ (800099c <convertArrays+0xe4>)
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	4413      	add	r3, r2
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <convertArrays+0xf4>)
 8000970:	5c99      	ldrb	r1, [r3, r2]
 8000972:	4a11      	ldr	r2, [pc, #68]	@ (80009b8 <convertArrays+0x100>)
 8000974:	693b      	ldr	r3, [r7, #16]
 8000976:	4413      	add	r3, r2
 8000978:	460a      	mov	r2, r1
 800097a:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	3301      	adds	r3, #1
 8000980:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000982:	693b      	ldr	r3, [r7, #16]
 8000984:	3301      	adds	r3, #1
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	693b      	ldr	r3, [r7, #16]
 800098a:	2b0f      	cmp	r3, #15
 800098c:	dde4      	ble.n	8000958 <convertArrays+0xa0>
}
 800098e:	bf00      	nop
 8000990:	372c      	adds	r7, #44	@ 0x2c
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr
 8000998:	20000000 	.word	0x20000000
 800099c:	20000fec 	.word	0x20000fec
 80009a0:	2000000c 	.word	0x2000000c
 80009a4:	20001064 	.word	0x20001064
 80009a8:	20000004 	.word	0x20000004
 80009ac:	20000018 	.word	0x20000018
 80009b0:	20001070 	.word	0x20001070
 80009b4:	20000008 	.word	0x20000008
 80009b8:	20001080 	.word	0x20001080

080009bc <ESP8266_Init>:
#include "ESP8266.h"

#include "SystemDefaults.h"
#include "GlobalVariables.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b09f      	sub	sp, #124	@ 0x7c
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 80009c8:	4948      	ldr	r1, [pc, #288]	@ (8000aec <ESP8266_Init+0x130>)
 80009ca:	4849      	ldr	r0, [pc, #292]	@ (8000af0 <ESP8266_Init+0x134>)
 80009cc:	f00c feea 	bl	800d7a4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009d0:	4847      	ldr	r0, [pc, #284]	@ (8000af0 <ESP8266_Init+0x134>)
 80009d2:	f7ff fc27 	bl	8000224 <strlen>
 80009d6:	4603      	mov	r3, r0
 80009d8:	b29b      	uxth	r3, r3
 80009da:	461a      	mov	r2, r3
 80009dc:	4944      	ldr	r1, [pc, #272]	@ (8000af0 <ESP8266_Init+0x134>)
 80009de:	68f8      	ldr	r0, [r7, #12]
 80009e0:	f00c f8f8 	bl	800cbd4 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 80009e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009e8:	f009 f828 	bl	8009a3c <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 80009ec:	4941      	ldr	r1, [pc, #260]	@ (8000af4 <ESP8266_Init+0x138>)
 80009ee:	4840      	ldr	r0, [pc, #256]	@ (8000af0 <ESP8266_Init+0x134>)
 80009f0:	f00c fed8 	bl	800d7a4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80009f4:	483e      	ldr	r0, [pc, #248]	@ (8000af0 <ESP8266_Init+0x134>)
 80009f6:	f7ff fc15 	bl	8000224 <strlen>
 80009fa:	4603      	mov	r3, r0
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	461a      	mov	r2, r3
 8000a00:	493b      	ldr	r1, [pc, #236]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a02:	68f8      	ldr	r0, [r7, #12]
 8000a04:	f00c f8e6 	bl	800cbd4 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000a08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a0c:	f009 f816 	bl	8009a3c <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000a10:	4939      	ldr	r1, [pc, #228]	@ (8000af8 <ESP8266_Init+0x13c>)
 8000a12:	4837      	ldr	r0, [pc, #220]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a14:	f00c fec6 	bl	800d7a4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000a18:	4835      	ldr	r0, [pc, #212]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a1a:	f7ff fc03 	bl	8000224 <strlen>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	461a      	mov	r2, r3
 8000a24:	4932      	ldr	r1, [pc, #200]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a26:	68f8      	ldr	r0, [r7, #12]
 8000a28:	f00c f8d4 	bl	800cbd4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a2c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a30:	f009 f804 	bl	8009a3c <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 8000a34:	4931      	ldr	r1, [pc, #196]	@ (8000afc <ESP8266_Init+0x140>)
 8000a36:	482e      	ldr	r0, [pc, #184]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a38:	f00c feb4 	bl	800d7a4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000a3c:	482c      	ldr	r0, [pc, #176]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a3e:	f7ff fbf1 	bl	8000224 <strlen>
 8000a42:	4603      	mov	r3, r0
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	461a      	mov	r2, r3
 8000a48:	4929      	ldr	r1, [pc, #164]	@ (8000af0 <ESP8266_Init+0x134>)
 8000a4a:	68f8      	ldr	r0, [r7, #12]
 8000a4c:	f00c f8c2 	bl	800cbd4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000a50:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a54:	f008 fff2 	bl	8009a3c <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP_DEF=\"");
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	4a28      	ldr	r2, [pc, #160]	@ (8000b00 <ESP8266_Init+0x144>)
 8000a5e:	461c      	mov	r4, r3
 8000a60:	4613      	mov	r3, r2
 8000a62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a64:	c407      	stmia	r4!, {r0, r1, r2}
 8000a66:	8023      	strh	r3, [r4, #0]
 8000a68:	3402      	adds	r4, #2
 8000a6a:	0c1b      	lsrs	r3, r3, #16
 8000a6c:	7023      	strb	r3, [r4, #0]
	strcat(str, wifiSS);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	68b9      	ldr	r1, [r7, #8]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f00c fef7 	bl	800d868 <strcat>
	strcat(str, "\",\"");
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff fbd0 	bl	8000224 <strlen>
 8000a84:	4603      	mov	r3, r0
 8000a86:	461a      	mov	r2, r3
 8000a88:	f107 0314 	add.w	r3, r7, #20
 8000a8c:	4413      	add	r3, r2
 8000a8e:	4a1d      	ldr	r2, [pc, #116]	@ (8000b04 <ESP8266_Init+0x148>)
 8000a90:	6810      	ldr	r0, [r2, #0]
 8000a92:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000a94:	f107 0314 	add.w	r3, r7, #20
 8000a98:	6879      	ldr	r1, [r7, #4]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f00c fee4 	bl	800d868 <strcat>
	strcat(str, "\"\r\n");
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fbbd 	bl	8000224 <strlen>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a14      	ldr	r2, [pc, #80]	@ (8000b08 <ESP8266_Init+0x14c>)
 8000ab6:	6810      	ldr	r0, [r2, #0]
 8000ab8:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4912      	ldr	r1, [pc, #72]	@ (8000b0c <ESP8266_Init+0x150>)
 8000ac2:	480b      	ldr	r0, [pc, #44]	@ (8000af0 <ESP8266_Init+0x134>)
 8000ac4:	f00c fe6e 	bl	800d7a4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000ac8:	4809      	ldr	r0, [pc, #36]	@ (8000af0 <ESP8266_Init+0x134>)
 8000aca:	f7ff fbab 	bl	8000224 <strlen>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	4906      	ldr	r1, [pc, #24]	@ (8000af0 <ESP8266_Init+0x134>)
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f00c f87c 	bl	800cbd4 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000adc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ae0:	f008 ffac 	bl	8009a3c <HAL_Delay>
}
 8000ae4:	bf00      	nop
 8000ae6:	377c      	adds	r7, #124	@ 0x7c
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd90      	pop	{r4, r7, pc}
 8000aec:	0800e0c0 	.word	0x0800e0c0
 8000af0:	20001124 	.word	0x20001124
 8000af4:	0800e0d0 	.word	0x0800e0d0
 8000af8:	0800e0dc 	.word	0x0800e0dc
 8000afc:	0800e0e4 	.word	0x0800e0e4
 8000b00:	0800e0f4 	.word	0x0800e0f4
 8000b04:	0800e104 	.word	0x0800e104
 8000b08:	0800e108 	.word	0x0800e108
 8000b0c:	0800e10c 	.word	0x0800e10c

08000b10 <sendMachineData>:
    sprintf(bufferTX, "AT+CIPCLOSE=0");
    HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
    HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b12:	f2ad 7d7c 	subw	sp, sp, #1916	@ 0x77c
 8000b16:	af2c      	add	r7, sp, #176	@ 0xb0
 8000b18:	f507 64d9 	add.w	r4, r7, #1736	@ 0x6c8
 8000b1c:	f2a4 642c 	subw	r4, r4, #1580	@ 0x62c
 8000b20:	6020      	str	r0, [r4, #0]
 8000b22:	f507 60d9 	add.w	r0, r7, #1736	@ 0x6c8
 8000b26:	f5a0 60c6 	sub.w	r0, r0, #1584	@ 0x630
 8000b2a:	6001      	str	r1, [r0, #0]
 8000b2c:	f507 61d9 	add.w	r1, r7, #1736	@ 0x6c8
 8000b30:	f2a1 6134 	subw	r1, r1, #1588	@ 0x634
 8000b34:	600a      	str	r2, [r1, #0]
 8000b36:	f507 62d9 	add.w	r2, r7, #1736	@ 0x6c8
 8000b3a:	f5a2 62c7 	sub.w	r2, r2, #1592	@ 0x638
 8000b3e:	6013      	str	r3, [r2, #0]
	char local_txA[1500];
	char local_txB[50];
	int len;

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 8000b40:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000b44:	f5a3 63c6 	sub.w	r3, r3, #1584	@ 0x630
 8000b48:	f107 00a4 	add.w	r0, r7, #164	@ 0xa4
 8000b4c:	220c      	movs	r2, #12
 8000b4e:	6819      	ldr	r1, [r3, #0]
 8000b50:	f00c fe99 	bl	800d886 <strncpy>
	subMachineID[12] = '\0';
 8000b54:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000b58:	f2a3 6324 	subw	r3, r3, #1572	@ 0x624
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000b60:	4a9b      	ldr	r2, [pc, #620]	@ (8000dd0 <sendMachineData+0x2c0>)
 8000b62:	499c      	ldr	r1, [pc, #624]	@ (8000dd4 <sendMachineData+0x2c4>)
 8000b64:	489c      	ldr	r0, [pc, #624]	@ (8000dd8 <sendMachineData+0x2c8>)
 8000b66:	f00c fe1d 	bl	800d7a4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000b6a:	489b      	ldr	r0, [pc, #620]	@ (8000dd8 <sendMachineData+0x2c8>)
 8000b6c:	f7ff fb5a 	bl	8000224 <strlen>
 8000b70:	4603      	mov	r3, r0
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000b78:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8000b7c:	4996      	ldr	r1, [pc, #600]	@ (8000dd8 <sendMachineData+0x2c8>)
 8000b7e:	6818      	ldr	r0, [r3, #0]
 8000b80:	f00c f828 	bl	800cbd4 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000b84:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000b88:	f008 ff58 	bl	8009a3c <HAL_Delay>

	sprintf(local_txA,
 8000b8c:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000b90:	f2a3 6334 	subw	r3, r3, #1588	@ 0x634
 8000b94:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8000b98:	f107 00e8 	add.w	r0, r7, #232	@ 0xe8
 8000b9c:	4a8f      	ldr	r2, [pc, #572]	@ (8000ddc <sendMachineData+0x2cc>)
 8000b9e:	9202      	str	r2, [sp, #8]
 8000ba0:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	@ 0x6e0
 8000ba4:	9201      	str	r2, [sp, #4]
 8000ba6:	f507 62d9 	add.w	r2, r7, #1736	@ 0x6c8
 8000baa:	f5a2 62c7 	sub.w	r2, r2, #1592	@ 0x638
 8000bae:	6812      	ldr	r2, [r2, #0]
 8000bb0:	9200      	str	r2, [sp, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	460a      	mov	r2, r1
 8000bb6:	498a      	ldr	r1, [pc, #552]	@ (8000de0 <sendMachineData+0x2d0>)
 8000bb8:	f00c fdf4 	bl	800d7a4 <siprintf>
			"GET /api/v2/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	sprintf(local_txA,
 8000bbc:	4b89      	ldr	r3, [pc, #548]	@ (8000de4 <sendMachineData+0x2d4>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000bc4:	4b88      	ldr	r3, [pc, #544]	@ (8000de8 <sendMachineData+0x2d8>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8000bcc:	4b87      	ldr	r3, [pc, #540]	@ (8000dec <sendMachineData+0x2dc>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8000bd4:	4b86      	ldr	r3, [pc, #536]	@ (8000df0 <sendMachineData+0x2e0>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8000bdc:	4b85      	ldr	r3, [pc, #532]	@ (8000df4 <sendMachineData+0x2e4>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000be2:	4b85      	ldr	r3, [pc, #532]	@ (8000df8 <sendMachineData+0x2e8>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000be8:	4b84      	ldr	r3, [pc, #528]	@ (8000dfc <sendMachineData+0x2ec>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	677b      	str	r3, [r7, #116]	@ 0x74
 8000bee:	4b84      	ldr	r3, [pc, #528]	@ (8000e00 <sendMachineData+0x2f0>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	673b      	str	r3, [r7, #112]	@ 0x70
 8000bf4:	4b83      	ldr	r3, [pc, #524]	@ (8000e04 <sendMachineData+0x2f4>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000bfa:	4b83      	ldr	r3, [pc, #524]	@ (8000e08 <sendMachineData+0x2f8>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000c00:	4b82      	ldr	r3, [pc, #520]	@ (8000e0c <sendMachineData+0x2fc>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	667b      	str	r3, [r7, #100]	@ 0x64
 8000c06:	4b82      	ldr	r3, [pc, #520]	@ (8000e10 <sendMachineData+0x300>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	663b      	str	r3, [r7, #96]	@ 0x60
 8000c0c:	4b81      	ldr	r3, [pc, #516]	@ (8000e14 <sendMachineData+0x304>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000c12:	4b81      	ldr	r3, [pc, #516]	@ (8000e18 <sendMachineData+0x308>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000c18:	4b80      	ldr	r3, [pc, #512]	@ (8000e1c <sendMachineData+0x30c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8000c1e:	4b80      	ldr	r3, [pc, #512]	@ (8000e20 <sendMachineData+0x310>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	653b      	str	r3, [r7, #80]	@ 0x50
 8000c24:	4b7f      	ldr	r3, [pc, #508]	@ (8000e24 <sendMachineData+0x314>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000c2a:	4b7f      	ldr	r3, [pc, #508]	@ (8000e28 <sendMachineData+0x318>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000c30:	4b7e      	ldr	r3, [pc, #504]	@ (8000e2c <sendMachineData+0x31c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	647b      	str	r3, [r7, #68]	@ 0x44
 8000c36:	4b7e      	ldr	r3, [pc, #504]	@ (8000e30 <sendMachineData+0x320>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8000c3c:	4b7d      	ldr	r3, [pc, #500]	@ (8000e34 <sendMachineData+0x324>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000c42:	4b7d      	ldr	r3, [pc, #500]	@ (8000e38 <sendMachineData+0x328>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c48:	4b7c      	ldr	r3, [pc, #496]	@ (8000e3c <sendMachineData+0x32c>)
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c4e:	4b7c      	ldr	r3, [pc, #496]	@ (8000e40 <sendMachineData+0x330>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	633b      	str	r3, [r7, #48]	@ 0x30
 8000c54:	4b7b      	ldr	r3, [pc, #492]	@ (8000e44 <sendMachineData+0x334>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000c5a:	4b7b      	ldr	r3, [pc, #492]	@ (8000e48 <sendMachineData+0x338>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000c60:	4b7a      	ldr	r3, [pc, #488]	@ (8000e4c <sendMachineData+0x33c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c66:	4b7a      	ldr	r3, [pc, #488]	@ (8000e50 <sendMachineData+0x340>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	623b      	str	r3, [r7, #32]
 8000c6c:	4b79      	ldr	r3, [pc, #484]	@ (8000e54 <sendMachineData+0x344>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	61fb      	str	r3, [r7, #28]
 8000c72:	4b79      	ldr	r3, [pc, #484]	@ (8000e58 <sendMachineData+0x348>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	61bb      	str	r3, [r7, #24]
	    "GET /api/v2/machine/updateMachineRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&devirmeYuruyusSecim=%d&calismaSekli=%d&emniyetCercevesi=%d&yavaslamaLimit=%d&altLimit=%d&kapiTablaAcKonum=%d&basincSalteri=%d&kapiSecimleri=%d&kapiAcTipi=%d&kapi1Tip=%d&kapi1AcSure=%d&kapi2Tip=%d&kapi2AcSure=%d&kapitablaTip=%d&kapiTablaAcSure=%d&yukariYavasLimit=%d&devirmeYukariIleriLimit=%d&devirmeAsagiGeriLimit=%d&devirmeSilindirTipi=%d&platformSilindirTipi=%d&yukariValfTmr=%d&asagiValfTmr=%d&devirmeYukariIleriTmr=%d&devirmeAsagiGeriTmr=%d&makineCalismaTmr=%d&buzzer=%d&demoMode=%d&calismaSayisi=%d&calismaSayisiDemo=%d&dilSecim=%d&eepromData38=%d&eepromData39=%d&eepromData40=%d&eepromData41=%d&eepromData42=%d&eepromData43=%d&eepromData44=%d&eepromData45=%d&eepromData46=%d&eepromData47=%d&lcdBacklightSure=%d HTTP/1.0\r\nHost: %s\r\n\r\n",
	    subMachineID, wifiSSID, wifiPass, devirmeYuruyusSecim, calismaSekli, emniyetCercevesi,
	    yavaslamaLimit, altLimit, kapiTablaAcKonum, basincSalteri, kapiSecimleri, kapiAcTipi, kapi1Tip, kapi1AcSure,
	    kapi2Tip, kapi2AcSure, kapitablaTip, kapiTablaAcSure, yukariYavasLimit, devirmeYukariIleriLimit, devirmeAsagiGeriLimit,
	    devirmeSilindirTipi, platformSilindirTipi, yukariValfTmr, asagiValfTmr, devirmeYukariIleriTmr, devirmeAsagiGeriTmr,
	    makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39],
 8000c78:	4b78      	ldr	r3, [pc, #480]	@ (8000e5c <sendMachineData+0x34c>)
 8000c7a:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	sprintf(local_txA,
 8000c7e:	617b      	str	r3, [r7, #20]
	    makineCalismaTmr, buzzer, demoMode, calismaSayisi, calismaSayisiDemo, dilSecim, eepromData[38], eepromData[39],
 8000c80:	4b76      	ldr	r3, [pc, #472]	@ (8000e5c <sendMachineData+0x34c>)
 8000c82:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	sprintf(local_txA,
 8000c86:	613b      	str	r3, [r7, #16]
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c88:	4b74      	ldr	r3, [pc, #464]	@ (8000e5c <sendMachineData+0x34c>)
 8000c8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	sprintf(local_txA,
 8000c8e:	60fb      	str	r3, [r7, #12]
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c90:	4b72      	ldr	r3, [pc, #456]	@ (8000e5c <sendMachineData+0x34c>)
 8000c92:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	sprintf(local_txA,
 8000c96:	60bb      	str	r3, [r7, #8]
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000c98:	4b70      	ldr	r3, [pc, #448]	@ (8000e5c <sendMachineData+0x34c>)
 8000c9a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	sprintf(local_txA,
 8000c9e:	607b      	str	r3, [r7, #4]
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000ca0:	4b6e      	ldr	r3, [pc, #440]	@ (8000e5c <sendMachineData+0x34c>)
 8000ca2:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	sprintf(local_txA,
 8000ca6:	603b      	str	r3, [r7, #0]
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000ca8:	4b6c      	ldr	r3, [pc, #432]	@ (8000e5c <sendMachineData+0x34c>)
 8000caa:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	sprintf(local_txA,
 8000cae:	461e      	mov	r6, r3
	    eepromData[40], eepromData[41], eepromData[42], eepromData[43], eepromData[44], eepromData[45],
 8000cb0:	4b6a      	ldr	r3, [pc, #424]	@ (8000e5c <sendMachineData+0x34c>)
 8000cb2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	sprintf(local_txA,
 8000cb6:	4618      	mov	r0, r3
	    eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000cb8:	4b68      	ldr	r3, [pc, #416]	@ (8000e5c <sendMachineData+0x34c>)
 8000cba:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	sprintf(local_txA,
 8000cbe:	4619      	mov	r1, r3
	    eepromData[46], eepromData[47], lcdBacklightSure, mainServerWithPort);
 8000cc0:	4b66      	ldr	r3, [pc, #408]	@ (8000e5c <sendMachineData+0x34c>)
 8000cc2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	sprintf(local_txA,
 8000cc6:	461a      	mov	r2, r3
 8000cc8:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000ccc:	f2a3 6434 	subw	r4, r3, #1588	@ 0x634
 8000cd0:	f107 0ca4 	add.w	ip, r7, #164	@ 0xa4
 8000cd4:	f107 05e8 	add.w	r5, r7, #232	@ 0xe8
 8000cd8:	4b40      	ldr	r3, [pc, #256]	@ (8000ddc <sendMachineData+0x2cc>)
 8000cda:	932a      	str	r3, [sp, #168]	@ 0xa8
 8000cdc:	2306      	movs	r3, #6
 8000cde:	9329      	str	r3, [sp, #164]	@ 0xa4
 8000ce0:	9228      	str	r2, [sp, #160]	@ 0xa0
 8000ce2:	9127      	str	r1, [sp, #156]	@ 0x9c
 8000ce4:	9026      	str	r0, [sp, #152]	@ 0x98
 8000ce6:	9625      	str	r6, [sp, #148]	@ 0x94
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	9224      	str	r2, [sp, #144]	@ 0x90
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	9223      	str	r2, [sp, #140]	@ 0x8c
 8000cf0:	68ba      	ldr	r2, [r7, #8]
 8000cf2:	9222      	str	r2, [sp, #136]	@ 0x88
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	9221      	str	r2, [sp, #132]	@ 0x84
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	9220      	str	r2, [sp, #128]	@ 0x80
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	921f      	str	r2, [sp, #124]	@ 0x7c
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	921e      	str	r2, [sp, #120]	@ 0x78
 8000d04:	69fa      	ldr	r2, [r7, #28]
 8000d06:	921d      	str	r2, [sp, #116]	@ 0x74
 8000d08:	6a3a      	ldr	r2, [r7, #32]
 8000d0a:	921c      	str	r2, [sp, #112]	@ 0x70
 8000d0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d0e:	921b      	str	r2, [sp, #108]	@ 0x6c
 8000d10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d12:	921a      	str	r2, [sp, #104]	@ 0x68
 8000d14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d16:	9219      	str	r2, [sp, #100]	@ 0x64
 8000d18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d1a:	9218      	str	r2, [sp, #96]	@ 0x60
 8000d1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000d1e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8000d20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000d22:	9216      	str	r2, [sp, #88]	@ 0x58
 8000d24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000d26:	9215      	str	r2, [sp, #84]	@ 0x54
 8000d28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000d2a:	9214      	str	r2, [sp, #80]	@ 0x50
 8000d2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000d2e:	9213      	str	r2, [sp, #76]	@ 0x4c
 8000d30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000d32:	9212      	str	r2, [sp, #72]	@ 0x48
 8000d34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000d36:	9211      	str	r2, [sp, #68]	@ 0x44
 8000d38:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000d3a:	9210      	str	r2, [sp, #64]	@ 0x40
 8000d3c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000d3e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8000d40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8000d42:	920e      	str	r2, [sp, #56]	@ 0x38
 8000d44:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000d46:	920d      	str	r2, [sp, #52]	@ 0x34
 8000d48:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000d4a:	920c      	str	r2, [sp, #48]	@ 0x30
 8000d4c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000d4e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8000d50:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000d52:	920a      	str	r2, [sp, #40]	@ 0x28
 8000d54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000d56:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d58:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8000d5a:	9208      	str	r2, [sp, #32]
 8000d5c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000d5e:	9207      	str	r2, [sp, #28]
 8000d60:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8000d62:	9206      	str	r2, [sp, #24]
 8000d64:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8000d66:	9205      	str	r2, [sp, #20]
 8000d68:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000d6c:	9204      	str	r2, [sp, #16]
 8000d6e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8000d72:	9203      	str	r2, [sp, #12]
 8000d74:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8000d78:	9202      	str	r2, [sp, #8]
 8000d7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000d7e:	9301      	str	r3, [sp, #4]
 8000d80:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000d84:	f5a3 63c7 	sub.w	r3, r3, #1592	@ 0x638
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	9300      	str	r3, [sp, #0]
 8000d8c:	6823      	ldr	r3, [r4, #0]
 8000d8e:	4662      	mov	r2, ip
 8000d90:	4933      	ldr	r1, [pc, #204]	@ (8000e60 <sendMachineData+0x350>)
 8000d92:	4628      	mov	r0, r5
 8000d94:	f00c fd06 	bl	800d7a4 <siprintf>

	len = strlen(local_txA);
 8000d98:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff fa41 	bl	8000224 <strlen>
 8000da2:	4603      	mov	r3, r0
 8000da4:	f8c7 36c4 	str.w	r3, [r7, #1732]	@ 0x6c4
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000da8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000dac:	f8d7 26c4 	ldr.w	r2, [r7, #1732]	@ 0x6c4
 8000db0:	492c      	ldr	r1, [pc, #176]	@ (8000e64 <sendMachineData+0x354>)
 8000db2:	4618      	mov	r0, r3
 8000db4:	f00c fcf6 	bl	800d7a4 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000db8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fa31 	bl	8000224 <strlen>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	f107 01b4 	add.w	r1, r7, #180	@ 0xb4
 8000dca:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000dce:	e04b      	b.n	8000e68 <sendMachineData+0x358>
 8000dd0:	0800e1fc 	.word	0x0800e1fc
 8000dd4:	0800e20c 	.word	0x0800e20c
 8000dd8:	20001124 	.word	0x20001124
 8000ddc:	0800e2a0 	.word	0x0800e2a0
 8000de0:	0800e22c 	.word	0x0800e22c
 8000de4:	200010cb 	.word	0x200010cb
 8000de8:	200010bd 	.word	0x200010bd
 8000dec:	200010c0 	.word	0x200010c0
 8000df0:	200010c1 	.word	0x200010c1
 8000df4:	200010c2 	.word	0x200010c2
 8000df8:	200010c9 	.word	0x200010c9
 8000dfc:	200010c3 	.word	0x200010c3
 8000e00:	200010c4 	.word	0x200010c4
 8000e04:	200010c8 	.word	0x200010c8
 8000e08:	200010c5 	.word	0x200010c5
 8000e0c:	200010d5 	.word	0x200010d5
 8000e10:	200010c6 	.word	0x200010c6
 8000e14:	200010d6 	.word	0x200010d6
 8000e18:	200010c7 	.word	0x200010c7
 8000e1c:	200010d7 	.word	0x200010d7
 8000e20:	200010ca 	.word	0x200010ca
 8000e24:	200010cc 	.word	0x200010cc
 8000e28:	200010cd 	.word	0x200010cd
 8000e2c:	200010ce 	.word	0x200010ce
 8000e30:	200010cf 	.word	0x200010cf
 8000e34:	200010d0 	.word	0x200010d0
 8000e38:	200010d1 	.word	0x200010d1
 8000e3c:	200010d2 	.word	0x200010d2
 8000e40:	200010d3 	.word	0x200010d3
 8000e44:	200010d4 	.word	0x200010d4
 8000e48:	200010d8 	.word	0x200010d8
 8000e4c:	200010da 	.word	0x200010da
 8000e50:	200010b4 	.word	0x200010b4
 8000e54:	200010b5 	.word	0x200010b5
 8000e58:	200010dc 	.word	0x200010dc
 8000e5c:	20000fec 	.word	0x20000fec
 8000e60:	0800e2b4 	.word	0x0800e2b4
 8000e64:	0800e5e4 	.word	0x0800e5e4
 8000e68:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8000e6c:	6818      	ldr	r0, [r3, #0]
 8000e6e:	f00b feb1 	bl	800cbd4 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000e72:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000e76:	f008 fde1 	bl	8009a3c <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000e7a:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff f9d0 	bl	8000224 <strlen>
 8000e84:	4603      	mov	r3, r0
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 8000e8c:	f507 63d9 	add.w	r3, r7, #1736	@ 0x6c8
 8000e90:	f2a3 632c 	subw	r3, r3, #1580	@ 0x62c
 8000e94:	6818      	ldr	r0, [r3, #0]
 8000e96:	f00b fe9d 	bl	800cbd4 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000e9a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000e9e:	f008 fdcd 	bl	8009a3c <HAL_Delay>
}
 8000ea2:	bf00      	nop
 8000ea4:	f207 67cc 	addw	r7, r7, #1740	@ 0x6cc
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000eac <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b089      	sub	sp, #36	@ 0x24
 8000eb0:	af04      	add	r7, sp, #16
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8000eb6:	4b25      	ldr	r3, [pc, #148]	@ (8000f4c <hata2EEPROM+0xa0>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	1e5a      	subs	r2, r3, #1
 8000ebc:	4b24      	ldr	r3, [pc, #144]	@ (8000f50 <hata2EEPROM+0xa4>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	4a24      	ldr	r2, [pc, #144]	@ (8000f54 <hata2EEPROM+0xa8>)
 8000ec4:	5cd3      	ldrb	r3, [r2, r3]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d002      	beq.n	8000ed0 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8000eca:	f000 f8d1 	bl	8001070 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8000ece:	e000      	b.n	8000ed2 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8000ed0:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	e012      	b.n	8000efe <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f50 <hata2EEPROM+0xa4>)
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a1c      	ldr	r2, [pc, #112]	@ (8000f54 <hata2EEPROM+0xa8>)
 8000ee2:	5cd3      	ldrb	r3, [r2, r3]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d107      	bne.n	8000ef8 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8000ee8:	4b19      	ldr	r3, [pc, #100]	@ (8000f50 <hata2EEPROM+0xa4>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	4918      	ldr	r1, [pc, #96]	@ (8000f54 <hata2EEPROM+0xa8>)
 8000ef2:	79fa      	ldrb	r2, [r7, #7]
 8000ef4:	54ca      	strb	r2, [r1, r3]
					break;
 8000ef6:	e007      	b.n	8000f08 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	3301      	adds	r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	4b13      	ldr	r3, [pc, #76]	@ (8000f4c <hata2EEPROM+0xa0>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	68fa      	ldr	r2, [r7, #12]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	dbe7      	blt.n	8000ed8 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8000f08:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <hata2EEPROM+0xa4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	b299      	uxth	r1, r3
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f4c <hata2EEPROM+0xa0>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	b298      	uxth	r0, r3
 8000f14:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <hata2EEPROM+0xa4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0e      	ldr	r2, [pc, #56]	@ (8000f54 <hata2EEPROM+0xa8>)
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f4c <hata2EEPROM+0xa0>)
 8000f1e:	6812      	ldr	r2, [r2, #0]
 8000f20:	b292      	uxth	r2, r2
 8000f22:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 8000f26:	9402      	str	r4, [sp, #8]
 8000f28:	9201      	str	r2, [sp, #4]
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	460a      	mov	r2, r1
 8000f30:	21a0      	movs	r1, #160	@ 0xa0
 8000f32:	4809      	ldr	r0, [pc, #36]	@ (8000f58 <hata2EEPROM+0xac>)
 8000f34:	f009 fe0c 	bl	800ab50 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000f38:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f3c:	f008 fd7e 	bl	8009a3c <HAL_Delay>
	eepromKontrol();
 8000f40:	f7ff f978 	bl	8000234 <eepromKontrol>
}
 8000f44:	bf00      	nop
 8000f46:	3714      	adds	r7, #20
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd90      	pop	{r4, r7, pc}
 8000f4c:	20000094 	.word	0x20000094
 8000f50:	20000098 	.word	0x20000098
 8000f54:	20000fec 	.word	0x20000fec
 8000f58:	2000193c 	.word	0x2000193c

08000f5c <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d10f      	bne.n	8000f8c <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000f6c:	4a38      	ldr	r2, [pc, #224]	@ (8001050 <hataKoduLcdGoster+0xf4>)
 8000f6e:	2101      	movs	r1, #1
 8000f70:	2001      	movs	r0, #1
 8000f72:	f008 f809 	bl	8008f88 <lcd_print>
		lcd_print(2, 1, "1");
 8000f76:	4a37      	ldr	r2, [pc, #220]	@ (8001054 <hataKoduLcdGoster+0xf8>)
 8000f78:	2101      	movs	r1, #1
 8000f7a:	2002      	movs	r0, #2
 8000f7c:	f008 f804 	bl	8008f88 <lcd_print>
		lcd_print(2, 7, "          ");
 8000f80:	4a35      	ldr	r2, [pc, #212]	@ (8001058 <hataKoduLcdGoster+0xfc>)
 8000f82:	2107      	movs	r1, #7
 8000f84:	2002      	movs	r0, #2
 8000f86:	f007 ffff 	bl	8008f88 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000f8a:	e05d      	b.n	8001048 <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d10f      	bne.n	8000fb2 <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 8000f92:	4a2f      	ldr	r2, [pc, #188]	@ (8001050 <hataKoduLcdGoster+0xf4>)
 8000f94:	2101      	movs	r1, #1
 8000f96:	2001      	movs	r0, #1
 8000f98:	f007 fff6 	bl	8008f88 <lcd_print>
		lcd_print(2, 2, "2");
 8000f9c:	4a2f      	ldr	r2, [pc, #188]	@ (800105c <hataKoduLcdGoster+0x100>)
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	2002      	movs	r0, #2
 8000fa2:	f007 fff1 	bl	8008f88 <lcd_print>
		lcd_print(2, 7, "          ");
 8000fa6:	4a2c      	ldr	r2, [pc, #176]	@ (8001058 <hataKoduLcdGoster+0xfc>)
 8000fa8:	2107      	movs	r1, #7
 8000faa:	2002      	movs	r0, #2
 8000fac:	f007 ffec 	bl	8008f88 <lcd_print>
}
 8000fb0:	e04a      	b.n	8001048 <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2b03      	cmp	r3, #3
 8000fb6:	d10f      	bne.n	8000fd8 <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000fb8:	4a25      	ldr	r2, [pc, #148]	@ (8001050 <hataKoduLcdGoster+0xf4>)
 8000fba:	2101      	movs	r1, #1
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f007 ffe3 	bl	8008f88 <lcd_print>
		lcd_print(2, 3, "3");
 8000fc2:	4a27      	ldr	r2, [pc, #156]	@ (8001060 <hataKoduLcdGoster+0x104>)
 8000fc4:	2103      	movs	r1, #3
 8000fc6:	2002      	movs	r0, #2
 8000fc8:	f007 ffde 	bl	8008f88 <lcd_print>
		lcd_print(2, 7, "          ");
 8000fcc:	4a22      	ldr	r2, [pc, #136]	@ (8001058 <hataKoduLcdGoster+0xfc>)
 8000fce:	2107      	movs	r1, #7
 8000fd0:	2002      	movs	r0, #2
 8000fd2:	f007 ffd9 	bl	8008f88 <lcd_print>
}
 8000fd6:	e037      	b.n	8001048 <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	d10f      	bne.n	8000ffe <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8000fde:	4a1c      	ldr	r2, [pc, #112]	@ (8001050 <hataKoduLcdGoster+0xf4>)
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f007 ffd0 	bl	8008f88 <lcd_print>
		lcd_print(2, 4, "4");
 8000fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8001064 <hataKoduLcdGoster+0x108>)
 8000fea:	2104      	movs	r1, #4
 8000fec:	2002      	movs	r0, #2
 8000fee:	f007 ffcb 	bl	8008f88 <lcd_print>
		lcd_print(2, 7, "          ");
 8000ff2:	4a19      	ldr	r2, [pc, #100]	@ (8001058 <hataKoduLcdGoster+0xfc>)
 8000ff4:	2107      	movs	r1, #7
 8000ff6:	2002      	movs	r0, #2
 8000ff8:	f007 ffc6 	bl	8008f88 <lcd_print>
}
 8000ffc:	e024      	b.n	8001048 <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b05      	cmp	r3, #5
 8001002:	d10f      	bne.n	8001024 <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8001004:	4a12      	ldr	r2, [pc, #72]	@ (8001050 <hataKoduLcdGoster+0xf4>)
 8001006:	2101      	movs	r1, #1
 8001008:	2001      	movs	r0, #1
 800100a:	f007 ffbd 	bl	8008f88 <lcd_print>
		lcd_print(2, 5, "5");
 800100e:	4a16      	ldr	r2, [pc, #88]	@ (8001068 <hataKoduLcdGoster+0x10c>)
 8001010:	2105      	movs	r1, #5
 8001012:	2002      	movs	r0, #2
 8001014:	f007 ffb8 	bl	8008f88 <lcd_print>
		lcd_print(2, 7, "          ");
 8001018:	4a0f      	ldr	r2, [pc, #60]	@ (8001058 <hataKoduLcdGoster+0xfc>)
 800101a:	2107      	movs	r1, #7
 800101c:	2002      	movs	r0, #2
 800101e:	f007 ffb3 	bl	8008f88 <lcd_print>
}
 8001022:	e011      	b.n	8001048 <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	2b06      	cmp	r3, #6
 8001028:	d10e      	bne.n	8001048 <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 800102a:	4a09      	ldr	r2, [pc, #36]	@ (8001050 <hataKoduLcdGoster+0xf4>)
 800102c:	2101      	movs	r1, #1
 800102e:	2001      	movs	r0, #1
 8001030:	f007 ffaa 	bl	8008f88 <lcd_print>
		lcd_print(2, 6, "6");
 8001034:	4a0d      	ldr	r2, [pc, #52]	@ (800106c <hataKoduLcdGoster+0x110>)
 8001036:	2106      	movs	r1, #6
 8001038:	2002      	movs	r0, #2
 800103a:	f007 ffa5 	bl	8008f88 <lcd_print>
		lcd_print(2, 7, "          ");
 800103e:	4a06      	ldr	r2, [pc, #24]	@ (8001058 <hataKoduLcdGoster+0xfc>)
 8001040:	2107      	movs	r1, #7
 8001042:	2002      	movs	r0, #2
 8001044:	f007 ffa0 	bl	8008f88 <lcd_print>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	200018b0 	.word	0x200018b0
 8001054:	0800ea80 	.word	0x0800ea80
 8001058:	0800ea84 	.word	0x0800ea84
 800105c:	0800ea90 	.word	0x0800ea90
 8001060:	0800ea94 	.word	0x0800ea94
 8001064:	0800ea98 	.word	0x0800ea98
 8001068:	0800ea9c 	.word	0x0800ea9c
 800106c:	0800eaa0 	.word	0x0800eaa0

08001070 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	e009      	b.n	8001090 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 800107c:	4a0a      	ldr	r2, [pc, #40]	@ (80010a8 <eepromDataFillWithEmpty+0x38>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001084:	4a09      	ldr	r2, [pc, #36]	@ (80010ac <eepromDataFillWithEmpty+0x3c>)
 8001086:	2100      	movs	r1, #0
 8001088:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3301      	adds	r3, #1
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	4b07      	ldr	r3, [pc, #28]	@ (80010b0 <eepromDataFillWithEmpty+0x40>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	429a      	cmp	r2, r3
 8001098:	dbf0      	blt.n	800107c <eepromDataFillWithEmpty+0xc>
	}
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	2000006c 	.word	0x2000006c
 80010ac:	20000fec 	.word	0x20000fec
 80010b0:	20000094 	.word	0x20000094

080010b4 <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 80010ba:	463b      	mov	r3, r7
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 80010c6:	4b50      	ldr	r3, [pc, #320]	@ (8001208 <i2cTest+0x154>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001208 <i2cTest+0x154>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0201 	bic.w	r2, r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 80010d6:	484c      	ldr	r0, [pc, #304]	@ (8001208 <i2cTest+0x154>)
 80010d8:	f009 fc0c 	bl	800a8f4 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010dc:	23c0      	movs	r3, #192	@ 0xc0
 80010de:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 80010e0:	2311      	movs	r3, #17
 80010e2:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80010ec:	463b      	mov	r3, r7
 80010ee:	4619      	mov	r1, r3
 80010f0:	4846      	ldr	r0, [pc, #280]	@ (800120c <i2cTest+0x158>)
 80010f2:	f009 f813 	bl	800a11c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80010f6:	2201      	movs	r2, #1
 80010f8:	2140      	movs	r1, #64	@ 0x40
 80010fa:	4844      	ldr	r0, [pc, #272]	@ (800120c <i2cTest+0x158>)
 80010fc:	f009 fa85 	bl	800a60a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001100:	2201      	movs	r2, #1
 8001102:	2180      	movs	r1, #128	@ 0x80
 8001104:	4841      	ldr	r0, [pc, #260]	@ (800120c <i2cTest+0x158>)
 8001106:	f009 fa80 	bl	800a60a <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 800110a:	200a      	movs	r0, #10
 800110c:	f008 fc96 	bl	8009a3c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8001110:	bf00      	nop
 8001112:	2140      	movs	r1, #64	@ 0x40
 8001114:	483d      	ldr	r0, [pc, #244]	@ (800120c <i2cTest+0x158>)
 8001116:	f009 fa61 	bl	800a5dc <HAL_GPIO_ReadPin>
 800111a:	4603      	mov	r3, r0
 800111c:	2b01      	cmp	r3, #1
 800111e:	d006      	beq.n	800112e <i2cTest+0x7a>
 8001120:	2180      	movs	r1, #128	@ 0x80
 8001122:	483a      	ldr	r0, [pc, #232]	@ (800120c <i2cTest+0x158>)
 8001124:	f009 fa5a 	bl	800a5dc <HAL_GPIO_ReadPin>
 8001128:	4603      	mov	r3, r0
 800112a:	2b01      	cmp	r3, #1
 800112c:	d1f1      	bne.n	8001112 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800112e:	2200      	movs	r2, #0
 8001130:	2180      	movs	r1, #128	@ 0x80
 8001132:	4836      	ldr	r0, [pc, #216]	@ (800120c <i2cTest+0x158>)
 8001134:	f009 fa69 	bl	800a60a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8001138:	200a      	movs	r0, #10
 800113a:	f008 fc7f 	bl	8009a3c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 800113e:	bf00      	nop
 8001140:	2180      	movs	r1, #128	@ 0x80
 8001142:	4832      	ldr	r0, [pc, #200]	@ (800120c <i2cTest+0x158>)
 8001144:	f009 fa4a 	bl	800a5dc <HAL_GPIO_ReadPin>
 8001148:	4603      	mov	r3, r0
 800114a:	2b01      	cmp	r3, #1
 800114c:	d0f8      	beq.n	8001140 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	2140      	movs	r1, #64	@ 0x40
 8001152:	482e      	ldr	r0, [pc, #184]	@ (800120c <i2cTest+0x158>)
 8001154:	f009 fa59 	bl	800a60a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001158:	200a      	movs	r0, #10
 800115a:	f008 fc6f 	bl	8009a3c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 800115e:	bf00      	nop
 8001160:	2140      	movs	r1, #64	@ 0x40
 8001162:	482a      	ldr	r0, [pc, #168]	@ (800120c <i2cTest+0x158>)
 8001164:	f009 fa3a 	bl	800a5dc <HAL_GPIO_ReadPin>
 8001168:	4603      	mov	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d0f8      	beq.n	8001160 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800116e:	2201      	movs	r2, #1
 8001170:	2140      	movs	r1, #64	@ 0x40
 8001172:	4826      	ldr	r0, [pc, #152]	@ (800120c <i2cTest+0x158>)
 8001174:	f009 fa49 	bl	800a60a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001178:	200a      	movs	r0, #10
 800117a:	f008 fc5f 	bl	8009a3c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 800117e:	bf00      	nop
 8001180:	2140      	movs	r1, #64	@ 0x40
 8001182:	4822      	ldr	r0, [pc, #136]	@ (800120c <i2cTest+0x158>)
 8001184:	f009 fa2a 	bl	800a5dc <HAL_GPIO_ReadPin>
 8001188:	4603      	mov	r3, r0
 800118a:	2b01      	cmp	r3, #1
 800118c:	d1f8      	bne.n	8001180 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800118e:	2201      	movs	r2, #1
 8001190:	2180      	movs	r1, #128	@ 0x80
 8001192:	481e      	ldr	r0, [pc, #120]	@ (800120c <i2cTest+0x158>)
 8001194:	f009 fa39 	bl	800a60a <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8001198:	200a      	movs	r0, #10
 800119a:	f008 fc4f 	bl	8009a3c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800119e:	bf00      	nop
 80011a0:	2180      	movs	r1, #128	@ 0x80
 80011a2:	481a      	ldr	r0, [pc, #104]	@ (800120c <i2cTest+0x158>)
 80011a4:	f009 fa1a 	bl	800a5dc <HAL_GPIO_ReadPin>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d1f8      	bne.n	80011a0 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011ae:	23c0      	movs	r3, #192	@ 0xc0
 80011b0:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80011b2:	2312      	movs	r3, #18
 80011b4:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80011b6:	2301      	movs	r3, #1
 80011b8:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80011be:	463b      	mov	r3, r7
 80011c0:	4619      	mov	r1, r3
 80011c2:	4812      	ldr	r0, [pc, #72]	@ (800120c <i2cTest+0x158>)
 80011c4:	f008 ffaa 	bl	800a11c <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <i2cTest+0x154>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <i2cTest+0x154>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80011d6:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80011d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <i2cTest+0x154>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	4b0a      	ldr	r3, [pc, #40]	@ (8001208 <i2cTest+0x154>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80011e6:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 80011e8:	4b07      	ldr	r3, [pc, #28]	@ (8001208 <i2cTest+0x154>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <i2cTest+0x154>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f042 0201 	orr.w	r2, r2, #1
 80011f6:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80011f8:	4803      	ldr	r0, [pc, #12]	@ (8001208 <i2cTest+0x154>)
 80011fa:	f009 fa37 	bl	800a66c <HAL_I2C_Init>
}
 80011fe:	bf00      	nop
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000193c 	.word	0x2000193c
 800120c:	40010c00 	.word	0x40010c00

08001210 <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 800121a:	20c8      	movs	r0, #200	@ 0xc8
 800121c:	f008 fc0e 	bl	8009a3c <HAL_Delay>
	lcd_clear();
 8001220:	f007 fede 	bl	8008fe0 <lcd_clear>
	if(type == 1 && page == 0) {
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d13e      	bne.n	80012a8 <printTemplate+0x98>
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d13b      	bne.n	80012a8 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8001230:	4a9a      	ldr	r2, [pc, #616]	@ (800149c <printTemplate+0x28c>)
 8001232:	2101      	movs	r1, #1
 8001234:	2001      	movs	r0, #1
 8001236:	f007 fea7 	bl	8008f88 <lcd_print>
		lcd_print(2, 3, "0");
 800123a:	4a99      	ldr	r2, [pc, #612]	@ (80014a0 <printTemplate+0x290>)
 800123c:	2103      	movs	r1, #3
 800123e:	2002      	movs	r0, #2
 8001240:	f007 fea2 	bl	8008f88 <lcd_print>
		lcd_print(2, 4, "1");
 8001244:	4a97      	ldr	r2, [pc, #604]	@ (80014a4 <printTemplate+0x294>)
 8001246:	2104      	movs	r1, #4
 8001248:	2002      	movs	r0, #2
 800124a:	f007 fe9d 	bl	8008f88 <lcd_print>
		lcd_print(2, 5, "2");
 800124e:	4a96      	ldr	r2, [pc, #600]	@ (80014a8 <printTemplate+0x298>)
 8001250:	2105      	movs	r1, #5
 8001252:	2002      	movs	r0, #2
 8001254:	f007 fe98 	bl	8008f88 <lcd_print>
		lcd_print(2, 6, "3");
 8001258:	4a94      	ldr	r2, [pc, #592]	@ (80014ac <printTemplate+0x29c>)
 800125a:	2106      	movs	r1, #6
 800125c:	2002      	movs	r0, #2
 800125e:	f007 fe93 	bl	8008f88 <lcd_print>
		lcd_print(2, 7, "4");
 8001262:	4a93      	ldr	r2, [pc, #588]	@ (80014b0 <printTemplate+0x2a0>)
 8001264:	2107      	movs	r1, #7
 8001266:	2002      	movs	r0, #2
 8001268:	f007 fe8e 	bl	8008f88 <lcd_print>
		lcd_print(2, 10, "5");
 800126c:	4a91      	ldr	r2, [pc, #580]	@ (80014b4 <printTemplate+0x2a4>)
 800126e:	210a      	movs	r1, #10
 8001270:	2002      	movs	r0, #2
 8001272:	f007 fe89 	bl	8008f88 <lcd_print>
		lcd_print(2, 11, "6");
 8001276:	4a90      	ldr	r2, [pc, #576]	@ (80014b8 <printTemplate+0x2a8>)
 8001278:	210b      	movs	r1, #11
 800127a:	2002      	movs	r0, #2
 800127c:	f007 fe84 	bl	8008f88 <lcd_print>
		lcd_print(2, 12, "7");
 8001280:	4a8e      	ldr	r2, [pc, #568]	@ (80014bc <printTemplate+0x2ac>)
 8001282:	210c      	movs	r1, #12
 8001284:	2002      	movs	r0, #2
 8001286:	f007 fe7f 	bl	8008f88 <lcd_print>
		lcd_print(2, 13, "8");
 800128a:	4a8d      	ldr	r2, [pc, #564]	@ (80014c0 <printTemplate+0x2b0>)
 800128c:	210d      	movs	r1, #13
 800128e:	2002      	movs	r0, #2
 8001290:	f007 fe7a 	bl	8008f88 <lcd_print>
		lcd_print(2, 14, "9");
 8001294:	4a8b      	ldr	r2, [pc, #556]	@ (80014c4 <printTemplate+0x2b4>)
 8001296:	210e      	movs	r1, #14
 8001298:	2002      	movs	r0, #2
 800129a:	f007 fe75 	bl	8008f88 <lcd_print>
		lcd_gotoxy(2, 3);
 800129e:	2103      	movs	r1, #3
 80012a0:	2002      	movs	r0, #2
 80012a2:	f007 fe52 	bl	8008f4a <lcd_gotoxy>
			lcd_print(1, 1, "PASS:           ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 80012a6:	e0f5      	b.n	8001494 <printTemplate+0x284>
	} else if(type == 2) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d178      	bne.n	80013a0 <printTemplate+0x190>
		if(page == 1) {
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d114      	bne.n	80012de <printTemplate+0xce>
			lcd_clear();
 80012b4:	f007 fe94 	bl	8008fe0 <lcd_clear>
			HAL_Delay(100);
 80012b8:	2064      	movs	r0, #100	@ 0x64
 80012ba:	f008 fbbf 	bl	8009a3c <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 80012be:	4a82      	ldr	r2, [pc, #520]	@ (80014c8 <printTemplate+0x2b8>)
 80012c0:	2101      	movs	r1, #1
 80012c2:	2001      	movs	r0, #1
 80012c4:	f007 fe60 	bl	8008f88 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80012c8:	4a80      	ldr	r2, [pc, #512]	@ (80014cc <printTemplate+0x2bc>)
 80012ca:	2107      	movs	r1, #7
 80012cc:	2001      	movs	r0, #1
 80012ce:	f007 fe5b 	bl	8008f88 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80012d2:	4a7f      	ldr	r2, [pc, #508]	@ (80014d0 <printTemplate+0x2c0>)
 80012d4:	2101      	movs	r1, #1
 80012d6:	2002      	movs	r0, #2
 80012d8:	f007 fe56 	bl	8008f88 <lcd_print>
}
 80012dc:	e0da      	b.n	8001494 <printTemplate+0x284>
		} else if(page == 2) {
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d114      	bne.n	800130e <printTemplate+0xfe>
			lcd_clear();
 80012e4:	f007 fe7c 	bl	8008fe0 <lcd_clear>
			HAL_Delay(100);
 80012e8:	2064      	movs	r0, #100	@ 0x64
 80012ea:	f008 fba7 	bl	8009a3c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80012ee:	4a79      	ldr	r2, [pc, #484]	@ (80014d4 <printTemplate+0x2c4>)
 80012f0:	2101      	movs	r1, #1
 80012f2:	2001      	movs	r0, #1
 80012f4:	f007 fe48 	bl	8008f88 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80012f8:	4a74      	ldr	r2, [pc, #464]	@ (80014cc <printTemplate+0x2bc>)
 80012fa:	2107      	movs	r1, #7
 80012fc:	2001      	movs	r0, #1
 80012fe:	f007 fe43 	bl	8008f88 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8001302:	4a75      	ldr	r2, [pc, #468]	@ (80014d8 <printTemplate+0x2c8>)
 8001304:	2101      	movs	r1, #1
 8001306:	2002      	movs	r0, #2
 8001308:	f007 fe3e 	bl	8008f88 <lcd_print>
}
 800130c:	e0c2      	b.n	8001494 <printTemplate+0x284>
		} else if(page == 3) {
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	2b03      	cmp	r3, #3
 8001312:	d114      	bne.n	800133e <printTemplate+0x12e>
			lcd_clear();
 8001314:	f007 fe64 	bl	8008fe0 <lcd_clear>
			HAL_Delay(100);
 8001318:	2064      	movs	r0, #100	@ 0x64
 800131a:	f008 fb8f 	bl	8009a3c <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 800131e:	4a6a      	ldr	r2, [pc, #424]	@ (80014c8 <printTemplate+0x2b8>)
 8001320:	2101      	movs	r1, #1
 8001322:	2001      	movs	r0, #1
 8001324:	f007 fe30 	bl	8008f88 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001328:	4a68      	ldr	r2, [pc, #416]	@ (80014cc <printTemplate+0x2bc>)
 800132a:	2107      	movs	r1, #7
 800132c:	2001      	movs	r0, #1
 800132e:	f007 fe2b 	bl	8008f88 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8001332:	4a6a      	ldr	r2, [pc, #424]	@ (80014dc <printTemplate+0x2cc>)
 8001334:	2101      	movs	r1, #1
 8001336:	2002      	movs	r0, #2
 8001338:	f007 fe26 	bl	8008f88 <lcd_print>
}
 800133c:	e0aa      	b.n	8001494 <printTemplate+0x284>
		} else if(page == 4) {
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	2b04      	cmp	r3, #4
 8001342:	d114      	bne.n	800136e <printTemplate+0x15e>
			lcd_clear();
 8001344:	f007 fe4c 	bl	8008fe0 <lcd_clear>
			HAL_Delay(100);
 8001348:	2064      	movs	r0, #100	@ 0x64
 800134a:	f008 fb77 	bl	8009a3c <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 800134e:	4a5e      	ldr	r2, [pc, #376]	@ (80014c8 <printTemplate+0x2b8>)
 8001350:	2101      	movs	r1, #1
 8001352:	2001      	movs	r0, #1
 8001354:	f007 fe18 	bl	8008f88 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8001358:	4a5c      	ldr	r2, [pc, #368]	@ (80014cc <printTemplate+0x2bc>)
 800135a:	2107      	movs	r1, #7
 800135c:	2001      	movs	r0, #1
 800135e:	f007 fe13 	bl	8008f88 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8001362:	4a5f      	ldr	r2, [pc, #380]	@ (80014e0 <printTemplate+0x2d0>)
 8001364:	2101      	movs	r1, #1
 8001366:	2002      	movs	r0, #2
 8001368:	f007 fe0e 	bl	8008f88 <lcd_print>
}
 800136c:	e092      	b.n	8001494 <printTemplate+0x284>
		} else if(page == 5) {
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	2b05      	cmp	r3, #5
 8001372:	f040 808f 	bne.w	8001494 <printTemplate+0x284>
			lcd_clear();
 8001376:	f007 fe33 	bl	8008fe0 <lcd_clear>
			HAL_Delay(100);
 800137a:	2064      	movs	r0, #100	@ 0x64
 800137c:	f008 fb5e 	bl	8009a3c <HAL_Delay>
			lcd_print(1, 1, "SSID:           ");
 8001380:	4a51      	ldr	r2, [pc, #324]	@ (80014c8 <printTemplate+0x2b8>)
 8001382:	2101      	movs	r1, #1
 8001384:	2001      	movs	r0, #1
 8001386:	f007 fdff 	bl	8008f88 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800138a:	4a50      	ldr	r2, [pc, #320]	@ (80014cc <printTemplate+0x2bc>)
 800138c:	2107      	movs	r1, #7
 800138e:	2001      	movs	r0, #1
 8001390:	f007 fdfa 	bl	8008f88 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8001394:	4a53      	ldr	r2, [pc, #332]	@ (80014e4 <printTemplate+0x2d4>)
 8001396:	2101      	movs	r1, #1
 8001398:	2002      	movs	r0, #2
 800139a:	f007 fdf5 	bl	8008f88 <lcd_print>
}
 800139e:	e079      	b.n	8001494 <printTemplate+0x284>
	} else if(type == 3) {
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d176      	bne.n	8001494 <printTemplate+0x284>
		if(page == 1) {
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d114      	bne.n	80013d6 <printTemplate+0x1c6>
			lcd_clear();
 80013ac:	f007 fe18 	bl	8008fe0 <lcd_clear>
			HAL_Delay(100);
 80013b0:	2064      	movs	r0, #100	@ 0x64
 80013b2:	f008 fb43 	bl	8009a3c <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80013b6:	4a4c      	ldr	r2, [pc, #304]	@ (80014e8 <printTemplate+0x2d8>)
 80013b8:	2101      	movs	r1, #1
 80013ba:	2001      	movs	r0, #1
 80013bc:	f007 fde4 	bl	8008f88 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80013c0:	4a4a      	ldr	r2, [pc, #296]	@ (80014ec <printTemplate+0x2dc>)
 80013c2:	2107      	movs	r1, #7
 80013c4:	2001      	movs	r0, #1
 80013c6:	f007 fddf 	bl	8008f88 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 80013ca:	4a41      	ldr	r2, [pc, #260]	@ (80014d0 <printTemplate+0x2c0>)
 80013cc:	2101      	movs	r1, #1
 80013ce:	2002      	movs	r0, #2
 80013d0:	f007 fdda 	bl	8008f88 <lcd_print>
}
 80013d4:	e05e      	b.n	8001494 <printTemplate+0x284>
		} else if(page == 2) {
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d114      	bne.n	8001406 <printTemplate+0x1f6>
			lcd_clear();
 80013dc:	f007 fe00 	bl	8008fe0 <lcd_clear>
			HAL_Delay(100);
 80013e0:	2064      	movs	r0, #100	@ 0x64
 80013e2:	f008 fb2b 	bl	8009a3c <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 80013e6:	4a40      	ldr	r2, [pc, #256]	@ (80014e8 <printTemplate+0x2d8>)
 80013e8:	2101      	movs	r1, #1
 80013ea:	2001      	movs	r0, #1
 80013ec:	f007 fdcc 	bl	8008f88 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80013f0:	4a3e      	ldr	r2, [pc, #248]	@ (80014ec <printTemplate+0x2dc>)
 80013f2:	2107      	movs	r1, #7
 80013f4:	2001      	movs	r0, #1
 80013f6:	f007 fdc7 	bl	8008f88 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80013fa:	4a37      	ldr	r2, [pc, #220]	@ (80014d8 <printTemplate+0x2c8>)
 80013fc:	2101      	movs	r1, #1
 80013fe:	2002      	movs	r0, #2
 8001400:	f007 fdc2 	bl	8008f88 <lcd_print>
}
 8001404:	e046      	b.n	8001494 <printTemplate+0x284>
		} else if(page == 3) {
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	2b03      	cmp	r3, #3
 800140a:	d114      	bne.n	8001436 <printTemplate+0x226>
			lcd_clear();
 800140c:	f007 fde8 	bl	8008fe0 <lcd_clear>
			HAL_Delay(100);
 8001410:	2064      	movs	r0, #100	@ 0x64
 8001412:	f008 fb13 	bl	8009a3c <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001416:	4a34      	ldr	r2, [pc, #208]	@ (80014e8 <printTemplate+0x2d8>)
 8001418:	2101      	movs	r1, #1
 800141a:	2001      	movs	r0, #1
 800141c:	f007 fdb4 	bl	8008f88 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001420:	4a32      	ldr	r2, [pc, #200]	@ (80014ec <printTemplate+0x2dc>)
 8001422:	2107      	movs	r1, #7
 8001424:	2001      	movs	r0, #1
 8001426:	f007 fdaf 	bl	8008f88 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 800142a:	4a2c      	ldr	r2, [pc, #176]	@ (80014dc <printTemplate+0x2cc>)
 800142c:	2101      	movs	r1, #1
 800142e:	2002      	movs	r0, #2
 8001430:	f007 fdaa 	bl	8008f88 <lcd_print>
}
 8001434:	e02e      	b.n	8001494 <printTemplate+0x284>
		} else if(page == 4) {
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	2b04      	cmp	r3, #4
 800143a:	d114      	bne.n	8001466 <printTemplate+0x256>
			lcd_clear();
 800143c:	f007 fdd0 	bl	8008fe0 <lcd_clear>
			HAL_Delay(100);
 8001440:	2064      	movs	r0, #100	@ 0x64
 8001442:	f008 fafb 	bl	8009a3c <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001446:	4a28      	ldr	r2, [pc, #160]	@ (80014e8 <printTemplate+0x2d8>)
 8001448:	2101      	movs	r1, #1
 800144a:	2001      	movs	r0, #1
 800144c:	f007 fd9c 	bl	8008f88 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001450:	4a26      	ldr	r2, [pc, #152]	@ (80014ec <printTemplate+0x2dc>)
 8001452:	2107      	movs	r1, #7
 8001454:	2001      	movs	r0, #1
 8001456:	f007 fd97 	bl	8008f88 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 800145a:	4a21      	ldr	r2, [pc, #132]	@ (80014e0 <printTemplate+0x2d0>)
 800145c:	2101      	movs	r1, #1
 800145e:	2002      	movs	r0, #2
 8001460:	f007 fd92 	bl	8008f88 <lcd_print>
}
 8001464:	e016      	b.n	8001494 <printTemplate+0x284>
		} else if(page == 5) {
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	2b05      	cmp	r3, #5
 800146a:	d113      	bne.n	8001494 <printTemplate+0x284>
			lcd_clear();
 800146c:	f007 fdb8 	bl	8008fe0 <lcd_clear>
			HAL_Delay(100);
 8001470:	2064      	movs	r0, #100	@ 0x64
 8001472:	f008 fae3 	bl	8009a3c <HAL_Delay>
			lcd_print(1, 1, "PASS:           ");
 8001476:	4a1c      	ldr	r2, [pc, #112]	@ (80014e8 <printTemplate+0x2d8>)
 8001478:	2101      	movs	r1, #1
 800147a:	2001      	movs	r0, #1
 800147c:	f007 fd84 	bl	8008f88 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8001480:	4a1a      	ldr	r2, [pc, #104]	@ (80014ec <printTemplate+0x2dc>)
 8001482:	2107      	movs	r1, #7
 8001484:	2001      	movs	r0, #1
 8001486:	f007 fd7f 	bl	8008f88 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 800148a:	4a16      	ldr	r2, [pc, #88]	@ (80014e4 <printTemplate+0x2d4>)
 800148c:	2101      	movs	r1, #1
 800148e:	2002      	movs	r0, #2
 8001490:	f007 fd7a 	bl	8008f88 <lcd_print>
}
 8001494:	bf00      	nop
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	0800eaa4 	.word	0x0800eaa4
 80014a0:	0800eaac 	.word	0x0800eaac
 80014a4:	0800eab0 	.word	0x0800eab0
 80014a8:	0800eab4 	.word	0x0800eab4
 80014ac:	0800eab8 	.word	0x0800eab8
 80014b0:	0800eabc 	.word	0x0800eabc
 80014b4:	0800eac0 	.word	0x0800eac0
 80014b8:	0800eac4 	.word	0x0800eac4
 80014bc:	0800eac8 	.word	0x0800eac8
 80014c0:	0800eacc 	.word	0x0800eacc
 80014c4:	0800ead0 	.word	0x0800ead0
 80014c8:	0800ead4 	.word	0x0800ead4
 80014cc:	20001070 	.word	0x20001070
 80014d0:	0800eae8 	.word	0x0800eae8
 80014d4:	0800eafc 	.word	0x0800eafc
 80014d8:	0800eb04 	.word	0x0800eb04
 80014dc:	0800eb18 	.word	0x0800eb18
 80014e0:	0800eb2c 	.word	0x0800eb2c
 80014e4:	0800eb40 	.word	0x0800eb40
 80014e8:	0800eb54 	.word	0x0800eb54
 80014ec:	20001080 	.word	0x20001080

080014f0 <printCredentials>:
			}
		}
	}
}

void printCredentials(int type) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d10a      	bne.n	8001514 <printCredentials+0x24>
		//machine id yazdır
		lcd_print(2, 1, machineID);
 80014fe:	4a18      	ldr	r2, [pc, #96]	@ (8001560 <printCredentials+0x70>)
 8001500:	2101      	movs	r1, #1
 8001502:	2002      	movs	r0, #2
 8001504:	f007 fd40 	bl	8008f88 <lcd_print>
		lcd_print(2, 13, "    ");
 8001508:	4a16      	ldr	r2, [pc, #88]	@ (8001564 <printCredentials+0x74>)
 800150a:	210d      	movs	r1, #13
 800150c:	2002      	movs	r0, #2
 800150e:	f007 fd3b 	bl	8008f88 <lcd_print>
		lcd_print(1, 1, "WIFI PASS       ");

		lcd_print(2, 1, "                ");
		lcd_print(2, 1, wifiPass);
	}
}
 8001512:	e021      	b.n	8001558 <printCredentials+0x68>
	} else if(type == 2) {
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d10f      	bne.n	800153a <printCredentials+0x4a>
		lcd_print(1, 1, "WIFI SSID       ");
 800151a:	4a13      	ldr	r2, [pc, #76]	@ (8001568 <printCredentials+0x78>)
 800151c:	2101      	movs	r1, #1
 800151e:	2001      	movs	r0, #1
 8001520:	f007 fd32 	bl	8008f88 <lcd_print>
		lcd_print(2, 1, "                ");
 8001524:	4a11      	ldr	r2, [pc, #68]	@ (800156c <printCredentials+0x7c>)
 8001526:	2101      	movs	r1, #1
 8001528:	2002      	movs	r0, #2
 800152a:	f007 fd2d 	bl	8008f88 <lcd_print>
		lcd_print(2, 1, wifiSSID);
 800152e:	4a10      	ldr	r2, [pc, #64]	@ (8001570 <printCredentials+0x80>)
 8001530:	2101      	movs	r1, #1
 8001532:	2002      	movs	r0, #2
 8001534:	f007 fd28 	bl	8008f88 <lcd_print>
}
 8001538:	e00e      	b.n	8001558 <printCredentials+0x68>
		lcd_print(1, 1, "WIFI PASS       ");
 800153a:	4a0e      	ldr	r2, [pc, #56]	@ (8001574 <printCredentials+0x84>)
 800153c:	2101      	movs	r1, #1
 800153e:	2001      	movs	r0, #1
 8001540:	f007 fd22 	bl	8008f88 <lcd_print>
		lcd_print(2, 1, "                ");
 8001544:	4a09      	ldr	r2, [pc, #36]	@ (800156c <printCredentials+0x7c>)
 8001546:	2101      	movs	r1, #1
 8001548:	2002      	movs	r0, #2
 800154a:	f007 fd1d 	bl	8008f88 <lcd_print>
		lcd_print(2, 1, wifiPass);
 800154e:	4a0a      	ldr	r2, [pc, #40]	@ (8001578 <printCredentials+0x88>)
 8001550:	2101      	movs	r1, #1
 8001552:	2002      	movs	r0, #2
 8001554:	f007 fd18 	bl	8008f88 <lcd_print>
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	20001064 	.word	0x20001064
 8001564:	0800eb68 	.word	0x0800eb68
 8001568:	0800eb70 	.word	0x0800eb70
 800156c:	0800eb84 	.word	0x0800eb84
 8001570:	20001070 	.word	0x20001070
 8001574:	0800eb98 	.word	0x0800eb98
 8001578:	20001080 	.word	0x20001080

0800157c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001580:	f3bf 8f4f 	dsb	sy
}
 8001584:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <__NVIC_SystemReset+0x24>)
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800158e:	4904      	ldr	r1, [pc, #16]	@ (80015a0 <__NVIC_SystemReset+0x24>)
 8001590:	4b04      	ldr	r3, [pc, #16]	@ (80015a4 <__NVIC_SystemReset+0x28>)
 8001592:	4313      	orrs	r3, r2
 8001594:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001596:	f3bf 8f4f 	dsb	sy
}
 800159a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <__NVIC_SystemReset+0x20>
 80015a0:	e000ed00 	.word	0xe000ed00
 80015a4:	05fa0004 	.word	0x05fa0004

080015a8 <menu>:
#include "EEPROMProcess.h"
#include "i2c-lcd.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80015ae:	2101      	movs	r1, #1
 80015b0:	488e      	ldr	r0, [pc, #568]	@ (80017ec <menu+0x244>)
 80015b2:	f009 f813 	bl	800a5dc <HAL_GPIO_ReadPin>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	f040 8099 	bne.w	80016f0 <menu+0x148>
 80015be:	4b8c      	ldr	r3, [pc, #560]	@ (80017f0 <menu+0x248>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	f083 0301 	eor.w	r3, r3, #1
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 8091 	beq.w	80016f0 <menu+0x148>
		menuSayac = menuSayac+1;
 80015ce:	4b89      	ldr	r3, [pc, #548]	@ (80017f4 <menu+0x24c>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	3301      	adds	r3, #1
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b87      	ldr	r3, [pc, #540]	@ (80017f4 <menu+0x24c>)
 80015d8:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80015da:	4b86      	ldr	r3, [pc, #536]	@ (80017f4 <menu+0x24c>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b24      	cmp	r3, #36	@ 0x24
 80015e0:	d102      	bne.n	80015e8 <menu+0x40>
			menuSayac = 1;
 80015e2:	4b84      	ldr	r3, [pc, #528]	@ (80017f4 <menu+0x24c>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80015e8:	4b82      	ldr	r3, [pc, #520]	@ (80017f4 <menu+0x24c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b12      	cmp	r3, #18
 80015ee:	d106      	bne.n	80015fe <menu+0x56>
 80015f0:	4b81      	ldr	r3, [pc, #516]	@ (80017f8 <menu+0x250>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <menu+0x56>
			menuSayac = 21;
 80015f8:	4b7e      	ldr	r3, [pc, #504]	@ (80017f4 <menu+0x24c>)
 80015fa:	2215      	movs	r2, #21
 80015fc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80015fe:	4b7d      	ldr	r3, [pc, #500]	@ (80017f4 <menu+0x24c>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b08      	cmp	r3, #8
 8001604:	d106      	bne.n	8001614 <menu+0x6c>
 8001606:	4b7d      	ldr	r3, [pc, #500]	@ (80017fc <menu+0x254>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d102      	bne.n	8001614 <menu+0x6c>
			menuSayac = 16;
 800160e:	4b79      	ldr	r3, [pc, #484]	@ (80017f4 <menu+0x24c>)
 8001610:	2210      	movs	r2, #16
 8001612:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001614:	4b77      	ldr	r3, [pc, #476]	@ (80017f4 <menu+0x24c>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b0d      	cmp	r3, #13
 800161a:	d106      	bne.n	800162a <menu+0x82>
 800161c:	4b77      	ldr	r3, [pc, #476]	@ (80017fc <menu+0x254>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d102      	bne.n	800162a <menu+0x82>
			menuSayac = 16;
 8001624:	4b73      	ldr	r3, [pc, #460]	@ (80017f4 <menu+0x24c>)
 8001626:	2210      	movs	r2, #16
 8001628:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800162a:	4b72      	ldr	r3, [pc, #456]	@ (80017f4 <menu+0x24c>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b09      	cmp	r3, #9
 8001630:	d106      	bne.n	8001640 <menu+0x98>
 8001632:	4b72      	ldr	r3, [pc, #456]	@ (80017fc <menu+0x254>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d102      	bne.n	8001640 <menu+0x98>
			menuSayac = 13;
 800163a:	4b6e      	ldr	r3, [pc, #440]	@ (80017f4 <menu+0x24c>)
 800163c:	220d      	movs	r2, #13
 800163e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001640:	4b6c      	ldr	r3, [pc, #432]	@ (80017f4 <menu+0x24c>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b0a      	cmp	r3, #10
 8001646:	d10a      	bne.n	800165e <menu+0xb6>
 8001648:	4b6d      	ldr	r3, [pc, #436]	@ (8001800 <menu+0x258>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d003      	beq.n	8001658 <menu+0xb0>
 8001650:	4b6b      	ldr	r3, [pc, #428]	@ (8001800 <menu+0x258>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d102      	bne.n	800165e <menu+0xb6>
			menuSayac = 11;
 8001658:	4b66      	ldr	r3, [pc, #408]	@ (80017f4 <menu+0x24c>)
 800165a:	220b      	movs	r2, #11
 800165c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800165e:	4b65      	ldr	r3, [pc, #404]	@ (80017f4 <menu+0x24c>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b0c      	cmp	r3, #12
 8001664:	d10e      	bne.n	8001684 <menu+0xdc>
 8001666:	4b67      	ldr	r3, [pc, #412]	@ (8001804 <menu+0x25c>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d003      	beq.n	8001676 <menu+0xce>
 800166e:	4b65      	ldr	r3, [pc, #404]	@ (8001804 <menu+0x25c>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d106      	bne.n	8001684 <menu+0xdc>
 8001676:	4b61      	ldr	r3, [pc, #388]	@ (80017fc <menu+0x254>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d102      	bne.n	8001684 <menu+0xdc>
			menuSayac = 16;
 800167e:	4b5d      	ldr	r3, [pc, #372]	@ (80017f4 <menu+0x24c>)
 8001680:	2210      	movs	r2, #16
 8001682:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001684:	4b5b      	ldr	r3, [pc, #364]	@ (80017f4 <menu+0x24c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b0c      	cmp	r3, #12
 800168a:	d10e      	bne.n	80016aa <menu+0x102>
 800168c:	4b5d      	ldr	r3, [pc, #372]	@ (8001804 <menu+0x25c>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d003      	beq.n	800169c <menu+0xf4>
 8001694:	4b5b      	ldr	r3, [pc, #364]	@ (8001804 <menu+0x25c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d106      	bne.n	80016aa <menu+0x102>
 800169c:	4b57      	ldr	r3, [pc, #348]	@ (80017fc <menu+0x254>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b03      	cmp	r3, #3
 80016a2:	d102      	bne.n	80016aa <menu+0x102>
			menuSayac = 13;
 80016a4:	4b53      	ldr	r3, [pc, #332]	@ (80017f4 <menu+0x24c>)
 80016a6:	220d      	movs	r2, #13
 80016a8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80016aa:	4b52      	ldr	r3, [pc, #328]	@ (80017f4 <menu+0x24c>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b0f      	cmp	r3, #15
 80016b0:	d106      	bne.n	80016c0 <menu+0x118>
 80016b2:	4b55      	ldr	r3, [pc, #340]	@ (8001808 <menu+0x260>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d102      	bne.n	80016c0 <menu+0x118>
			menuSayac = 16;
 80016ba:	4b4e      	ldr	r3, [pc, #312]	@ (80017f4 <menu+0x24c>)
 80016bc:	2210      	movs	r2, #16
 80016be:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80016c0:	4b4c      	ldr	r3, [pc, #304]	@ (80017f4 <menu+0x24c>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	2b18      	cmp	r3, #24
 80016c6:	d106      	bne.n	80016d6 <menu+0x12e>
 80016c8:	4b4b      	ldr	r3, [pc, #300]	@ (80017f8 <menu+0x250>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <menu+0x12e>
			menuSayac = 26;
 80016d0:	4b48      	ldr	r3, [pc, #288]	@ (80017f4 <menu+0x24c>)
 80016d2:	221a      	movs	r2, #26
 80016d4:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 80016d6:	4b47      	ldr	r3, [pc, #284]	@ (80017f4 <menu+0x24c>)
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	2b21      	cmp	r3, #33	@ 0x21
 80016dc:	d106      	bne.n	80016ec <menu+0x144>
 80016de:	4b4b      	ldr	r3, [pc, #300]	@ (800180c <menu+0x264>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d102      	bne.n	80016ec <menu+0x144>
			menuSayac = 35;
 80016e6:	4b43      	ldr	r3, [pc, #268]	@ (80017f4 <menu+0x24c>)
 80016e8:	2223      	movs	r2, #35	@ 0x23
 80016ea:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80016ec:	f002 fca2 	bl	8004034 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80016f0:	2108      	movs	r1, #8
 80016f2:	4847      	ldr	r0, [pc, #284]	@ (8001810 <menu+0x268>)
 80016f4:	f008 ff72 	bl	800a5dc <HAL_GPIO_ReadPin>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	f040 8097 	bne.w	800182e <menu+0x286>
 8001700:	4b3b      	ldr	r3, [pc, #236]	@ (80017f0 <menu+0x248>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	f083 0301 	eor.w	r3, r3, #1
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 808f 	beq.w	800182e <menu+0x286>
		if (menuSayac <= 1) {
 8001710:	4b38      	ldr	r3, [pc, #224]	@ (80017f4 <menu+0x24c>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d802      	bhi.n	800171e <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001718:	4b36      	ldr	r3, [pc, #216]	@ (80017f4 <menu+0x24c>)
 800171a:	2224      	movs	r2, #36	@ 0x24
 800171c:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800171e:	4b35      	ldr	r3, [pc, #212]	@ (80017f4 <menu+0x24c>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	3b01      	subs	r3, #1
 8001724:	b2da      	uxtb	r2, r3
 8001726:	4b33      	ldr	r3, [pc, #204]	@ (80017f4 <menu+0x24c>)
 8001728:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800172a:	4b32      	ldr	r3, [pc, #200]	@ (80017f4 <menu+0x24c>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b14      	cmp	r3, #20
 8001730:	d106      	bne.n	8001740 <menu+0x198>
 8001732:	4b31      	ldr	r3, [pc, #196]	@ (80017f8 <menu+0x250>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d102      	bne.n	8001740 <menu+0x198>
			menuSayac = 17;
 800173a:	4b2e      	ldr	r3, [pc, #184]	@ (80017f4 <menu+0x24c>)
 800173c:	2211      	movs	r2, #17
 800173e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001740:	4b2c      	ldr	r3, [pc, #176]	@ (80017f4 <menu+0x24c>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b0f      	cmp	r3, #15
 8001746:	d106      	bne.n	8001756 <menu+0x1ae>
 8001748:	4b2c      	ldr	r3, [pc, #176]	@ (80017fc <menu+0x254>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <menu+0x1ae>
			menuSayac = 7;
 8001750:	4b28      	ldr	r3, [pc, #160]	@ (80017f4 <menu+0x24c>)
 8001752:	2207      	movs	r2, #7
 8001754:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001756:	4b27      	ldr	r3, [pc, #156]	@ (80017f4 <menu+0x24c>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	2b0f      	cmp	r3, #15
 800175c:	d106      	bne.n	800176c <menu+0x1c4>
 800175e:	4b27      	ldr	r3, [pc, #156]	@ (80017fc <menu+0x254>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d102      	bne.n	800176c <menu+0x1c4>
			menuSayac = 12;
 8001766:	4b23      	ldr	r3, [pc, #140]	@ (80017f4 <menu+0x24c>)
 8001768:	220c      	movs	r2, #12
 800176a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 800176c:	4b21      	ldr	r3, [pc, #132]	@ (80017f4 <menu+0x24c>)
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b0c      	cmp	r3, #12
 8001772:	d106      	bne.n	8001782 <menu+0x1da>
 8001774:	4b21      	ldr	r3, [pc, #132]	@ (80017fc <menu+0x254>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d102      	bne.n	8001782 <menu+0x1da>
			menuSayac = 8;
 800177c:	4b1d      	ldr	r3, [pc, #116]	@ (80017f4 <menu+0x24c>)
 800177e:	2208      	movs	r2, #8
 8001780:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001782:	4b1c      	ldr	r3, [pc, #112]	@ (80017f4 <menu+0x24c>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	2b0a      	cmp	r3, #10
 8001788:	d10a      	bne.n	80017a0 <menu+0x1f8>
 800178a:	4b1d      	ldr	r3, [pc, #116]	@ (8001800 <menu+0x258>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d003      	beq.n	800179a <menu+0x1f2>
 8001792:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <menu+0x258>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d102      	bne.n	80017a0 <menu+0x1f8>
			menuSayac = 9;
 800179a:	4b16      	ldr	r3, [pc, #88]	@ (80017f4 <menu+0x24c>)
 800179c:	2209      	movs	r2, #9
 800179e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80017a0:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <menu+0x24c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b0c      	cmp	r3, #12
 80017a6:	d10a      	bne.n	80017be <menu+0x216>
 80017a8:	4b16      	ldr	r3, [pc, #88]	@ (8001804 <menu+0x25c>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d003      	beq.n	80017b8 <menu+0x210>
 80017b0:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <menu+0x25c>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d102      	bne.n	80017be <menu+0x216>
			menuSayac = 11;
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <menu+0x24c>)
 80017ba:	220b      	movs	r2, #11
 80017bc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80017be:	4b0d      	ldr	r3, [pc, #52]	@ (80017f4 <menu+0x24c>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	2b0f      	cmp	r3, #15
 80017c4:	d106      	bne.n	80017d4 <menu+0x22c>
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <menu+0x260>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d102      	bne.n	80017d4 <menu+0x22c>
			menuSayac = 14;
 80017ce:	4b09      	ldr	r3, [pc, #36]	@ (80017f4 <menu+0x24c>)
 80017d0:	220e      	movs	r2, #14
 80017d2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80017d4:	4b07      	ldr	r3, [pc, #28]	@ (80017f4 <menu+0x24c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b19      	cmp	r3, #25
 80017da:	d11b      	bne.n	8001814 <menu+0x26c>
 80017dc:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <menu+0x250>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d117      	bne.n	8001814 <menu+0x26c>
			menuSayac = 23;
 80017e4:	4b03      	ldr	r3, [pc, #12]	@ (80017f4 <menu+0x24c>)
 80017e6:	2217      	movs	r2, #23
 80017e8:	701a      	strb	r2, [r3, #0]
 80017ea:	e013      	b.n	8001814 <menu+0x26c>
 80017ec:	40010800 	.word	0x40010800
 80017f0:	200010ec 	.word	0x200010ec
 80017f4:	200010bc 	.word	0x200010bc
 80017f8:	200010cb 	.word	0x200010cb
 80017fc:	200010c4 	.word	0x200010c4
 8001800:	200010c5 	.word	0x200010c5
 8001804:	200010c6 	.word	0x200010c6
 8001808:	200010c7 	.word	0x200010c7
 800180c:	200010e7 	.word	0x200010e7
 8001810:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 8001814:	4bb0      	ldr	r3, [pc, #704]	@ (8001ad8 <menu+0x530>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b22      	cmp	r3, #34	@ 0x22
 800181a:	d106      	bne.n	800182a <menu+0x282>
 800181c:	4baf      	ldr	r3, [pc, #700]	@ (8001adc <menu+0x534>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d102      	bne.n	800182a <menu+0x282>
			menuSayac = 32;
 8001824:	4bac      	ldr	r3, [pc, #688]	@ (8001ad8 <menu+0x530>)
 8001826:	2220      	movs	r2, #32
 8001828:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800182a:	f002 fc03 	bl	8004034 <bekle>
	}

	if (menuSayac == 0) {
 800182e:	4baa      	ldr	r3, [pc, #680]	@ (8001ad8 <menu+0x530>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d109      	bne.n	800184a <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 8001836:	4aaa      	ldr	r2, [pc, #680]	@ (8001ae0 <menu+0x538>)
 8001838:	2101      	movs	r1, #1
 800183a:	2001      	movs	r0, #1
 800183c:	f007 fba4 	bl	8008f88 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 8001840:	4aa8      	ldr	r2, [pc, #672]	@ (8001ae4 <menu+0x53c>)
 8001842:	2101      	movs	r1, #1
 8001844:	2002      	movs	r0, #2
 8001846:	f007 fb9f 	bl	8008f88 <lcd_print>
	}

	if (menuSayac == 1) {
 800184a:	4ba3      	ldr	r3, [pc, #652]	@ (8001ad8 <menu+0x530>)
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b01      	cmp	r3, #1
 8001850:	f040 81f4 	bne.w	8001c3c <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 8001854:	4aa4      	ldr	r2, [pc, #656]	@ (8001ae8 <menu+0x540>)
 8001856:	2101      	movs	r1, #1
 8001858:	2001      	movs	r0, #1
 800185a:	f007 fb95 	bl	8008f88 <lcd_print>

		if(hataGostermeSirasi == 0) {
 800185e:	4ba3      	ldr	r3, [pc, #652]	@ (8001aec <menu+0x544>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d115      	bne.n	8001892 <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 8001866:	4aa2      	ldr	r2, [pc, #648]	@ (8001af0 <menu+0x548>)
 8001868:	2101      	movs	r1, #1
 800186a:	2002      	movs	r0, #2
 800186c:	f007 fb8c 	bl	8008f88 <lcd_print>
			lcd_print(2, 15, "   ");
 8001870:	4aa0      	ldr	r2, [pc, #640]	@ (8001af4 <menu+0x54c>)
 8001872:	210f      	movs	r1, #15
 8001874:	2002      	movs	r0, #2
 8001876:	f007 fb87 	bl	8008f88 <lcd_print>
			itoa(hataKayit1, snum, 10);
 800187a:	4b9f      	ldr	r3, [pc, #636]	@ (8001af8 <menu+0x550>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	220a      	movs	r2, #10
 8001880:	499e      	ldr	r1, [pc, #632]	@ (8001afc <menu+0x554>)
 8001882:	4618      	mov	r0, r3
 8001884:	f00b fed6 	bl	800d634 <itoa>
			lcd_print(2, 14, snum);
 8001888:	4a9c      	ldr	r2, [pc, #624]	@ (8001afc <menu+0x554>)
 800188a:	210e      	movs	r1, #14
 800188c:	2002      	movs	r0, #2
 800188e:	f007 fb7b 	bl	8008f88 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001892:	4b96      	ldr	r3, [pc, #600]	@ (8001aec <menu+0x544>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d115      	bne.n	80018c6 <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 800189a:	4a99      	ldr	r2, [pc, #612]	@ (8001b00 <menu+0x558>)
 800189c:	2101      	movs	r1, #1
 800189e:	2002      	movs	r0, #2
 80018a0:	f007 fb72 	bl	8008f88 <lcd_print>
			lcd_print(2, 15, "  ");
 80018a4:	4a97      	ldr	r2, [pc, #604]	@ (8001b04 <menu+0x55c>)
 80018a6:	210f      	movs	r1, #15
 80018a8:	2002      	movs	r0, #2
 80018aa:	f007 fb6d 	bl	8008f88 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80018ae:	4b96      	ldr	r3, [pc, #600]	@ (8001b08 <menu+0x560>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	220a      	movs	r2, #10
 80018b4:	4991      	ldr	r1, [pc, #580]	@ (8001afc <menu+0x554>)
 80018b6:	4618      	mov	r0, r3
 80018b8:	f00b febc 	bl	800d634 <itoa>
			lcd_print(2, 14, snum);
 80018bc:	4a8f      	ldr	r2, [pc, #572]	@ (8001afc <menu+0x554>)
 80018be:	210e      	movs	r1, #14
 80018c0:	2002      	movs	r0, #2
 80018c2:	f007 fb61 	bl	8008f88 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80018c6:	4b89      	ldr	r3, [pc, #548]	@ (8001aec <menu+0x544>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d115      	bne.n	80018fa <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 80018ce:	4a8f      	ldr	r2, [pc, #572]	@ (8001b0c <menu+0x564>)
 80018d0:	2101      	movs	r1, #1
 80018d2:	2002      	movs	r0, #2
 80018d4:	f007 fb58 	bl	8008f88 <lcd_print>
			lcd_print(2, 15, "  ");
 80018d8:	4a8a      	ldr	r2, [pc, #552]	@ (8001b04 <menu+0x55c>)
 80018da:	210f      	movs	r1, #15
 80018dc:	2002      	movs	r0, #2
 80018de:	f007 fb53 	bl	8008f88 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80018e2:	4b8b      	ldr	r3, [pc, #556]	@ (8001b10 <menu+0x568>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	220a      	movs	r2, #10
 80018e8:	4984      	ldr	r1, [pc, #528]	@ (8001afc <menu+0x554>)
 80018ea:	4618      	mov	r0, r3
 80018ec:	f00b fea2 	bl	800d634 <itoa>
			lcd_print(2, 14, snum);
 80018f0:	4a82      	ldr	r2, [pc, #520]	@ (8001afc <menu+0x554>)
 80018f2:	210e      	movs	r1, #14
 80018f4:	2002      	movs	r0, #2
 80018f6:	f007 fb47 	bl	8008f88 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80018fa:	4b7c      	ldr	r3, [pc, #496]	@ (8001aec <menu+0x544>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d115      	bne.n	800192e <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 8001902:	4a84      	ldr	r2, [pc, #528]	@ (8001b14 <menu+0x56c>)
 8001904:	2101      	movs	r1, #1
 8001906:	2002      	movs	r0, #2
 8001908:	f007 fb3e 	bl	8008f88 <lcd_print>
			lcd_print(2, 15, "  ");
 800190c:	4a7d      	ldr	r2, [pc, #500]	@ (8001b04 <menu+0x55c>)
 800190e:	210f      	movs	r1, #15
 8001910:	2002      	movs	r0, #2
 8001912:	f007 fb39 	bl	8008f88 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001916:	4b80      	ldr	r3, [pc, #512]	@ (8001b18 <menu+0x570>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	220a      	movs	r2, #10
 800191c:	4977      	ldr	r1, [pc, #476]	@ (8001afc <menu+0x554>)
 800191e:	4618      	mov	r0, r3
 8001920:	f00b fe88 	bl	800d634 <itoa>
			lcd_print(2, 14, snum);
 8001924:	4a75      	ldr	r2, [pc, #468]	@ (8001afc <menu+0x554>)
 8001926:	210e      	movs	r1, #14
 8001928:	2002      	movs	r0, #2
 800192a:	f007 fb2d 	bl	8008f88 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800192e:	4b6f      	ldr	r3, [pc, #444]	@ (8001aec <menu+0x544>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b04      	cmp	r3, #4
 8001934:	d115      	bne.n	8001962 <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 8001936:	4a79      	ldr	r2, [pc, #484]	@ (8001b1c <menu+0x574>)
 8001938:	2101      	movs	r1, #1
 800193a:	2002      	movs	r0, #2
 800193c:	f007 fb24 	bl	8008f88 <lcd_print>
			lcd_print(2, 15, "  ");
 8001940:	4a70      	ldr	r2, [pc, #448]	@ (8001b04 <menu+0x55c>)
 8001942:	210f      	movs	r1, #15
 8001944:	2002      	movs	r0, #2
 8001946:	f007 fb1f 	bl	8008f88 <lcd_print>
			itoa(hataKayit5, snum, 10);
 800194a:	4b75      	ldr	r3, [pc, #468]	@ (8001b20 <menu+0x578>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	220a      	movs	r2, #10
 8001950:	496a      	ldr	r1, [pc, #424]	@ (8001afc <menu+0x554>)
 8001952:	4618      	mov	r0, r3
 8001954:	f00b fe6e 	bl	800d634 <itoa>
			lcd_print(2, 14, snum);
 8001958:	4a68      	ldr	r2, [pc, #416]	@ (8001afc <menu+0x554>)
 800195a:	210e      	movs	r1, #14
 800195c:	2002      	movs	r0, #2
 800195e:	f007 fb13 	bl	8008f88 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001962:	4b62      	ldr	r3, [pc, #392]	@ (8001aec <menu+0x544>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b05      	cmp	r3, #5
 8001968:	d115      	bne.n	8001996 <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 800196a:	4a6e      	ldr	r2, [pc, #440]	@ (8001b24 <menu+0x57c>)
 800196c:	2101      	movs	r1, #1
 800196e:	2002      	movs	r0, #2
 8001970:	f007 fb0a 	bl	8008f88 <lcd_print>
			lcd_print(2, 15, "  ");
 8001974:	4a63      	ldr	r2, [pc, #396]	@ (8001b04 <menu+0x55c>)
 8001976:	210f      	movs	r1, #15
 8001978:	2002      	movs	r0, #2
 800197a:	f007 fb05 	bl	8008f88 <lcd_print>
			itoa(hataKayit6, snum, 10);
 800197e:	4b6a      	ldr	r3, [pc, #424]	@ (8001b28 <menu+0x580>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	220a      	movs	r2, #10
 8001984:	495d      	ldr	r1, [pc, #372]	@ (8001afc <menu+0x554>)
 8001986:	4618      	mov	r0, r3
 8001988:	f00b fe54 	bl	800d634 <itoa>
			lcd_print(2, 14, snum);
 800198c:	4a5b      	ldr	r2, [pc, #364]	@ (8001afc <menu+0x554>)
 800198e:	210e      	movs	r1, #14
 8001990:	2002      	movs	r0, #2
 8001992:	f007 faf9 	bl	8008f88 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001996:	4b55      	ldr	r3, [pc, #340]	@ (8001aec <menu+0x544>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b06      	cmp	r3, #6
 800199c:	d115      	bne.n	80019ca <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 800199e:	4a63      	ldr	r2, [pc, #396]	@ (8001b2c <menu+0x584>)
 80019a0:	2101      	movs	r1, #1
 80019a2:	2002      	movs	r0, #2
 80019a4:	f007 faf0 	bl	8008f88 <lcd_print>
			lcd_print(2, 15, "  ");
 80019a8:	4a56      	ldr	r2, [pc, #344]	@ (8001b04 <menu+0x55c>)
 80019aa:	210f      	movs	r1, #15
 80019ac:	2002      	movs	r0, #2
 80019ae:	f007 faeb 	bl	8008f88 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80019b2:	4b5f      	ldr	r3, [pc, #380]	@ (8001b30 <menu+0x588>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	220a      	movs	r2, #10
 80019b8:	4950      	ldr	r1, [pc, #320]	@ (8001afc <menu+0x554>)
 80019ba:	4618      	mov	r0, r3
 80019bc:	f00b fe3a 	bl	800d634 <itoa>
			lcd_print(2, 14, snum);
 80019c0:	4a4e      	ldr	r2, [pc, #312]	@ (8001afc <menu+0x554>)
 80019c2:	210e      	movs	r1, #14
 80019c4:	2002      	movs	r0, #2
 80019c6:	f007 fadf 	bl	8008f88 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80019ca:	4b48      	ldr	r3, [pc, #288]	@ (8001aec <menu+0x544>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b07      	cmp	r3, #7
 80019d0:	d115      	bne.n	80019fe <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 80019d2:	4a58      	ldr	r2, [pc, #352]	@ (8001b34 <menu+0x58c>)
 80019d4:	2101      	movs	r1, #1
 80019d6:	2002      	movs	r0, #2
 80019d8:	f007 fad6 	bl	8008f88 <lcd_print>
			lcd_print(2, 15, "  ");
 80019dc:	4a49      	ldr	r2, [pc, #292]	@ (8001b04 <menu+0x55c>)
 80019de:	210f      	movs	r1, #15
 80019e0:	2002      	movs	r0, #2
 80019e2:	f007 fad1 	bl	8008f88 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80019e6:	4b54      	ldr	r3, [pc, #336]	@ (8001b38 <menu+0x590>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	220a      	movs	r2, #10
 80019ec:	4943      	ldr	r1, [pc, #268]	@ (8001afc <menu+0x554>)
 80019ee:	4618      	mov	r0, r3
 80019f0:	f00b fe20 	bl	800d634 <itoa>
			lcd_print(2, 14, snum);
 80019f4:	4a41      	ldr	r2, [pc, #260]	@ (8001afc <menu+0x554>)
 80019f6:	210e      	movs	r1, #14
 80019f8:	2002      	movs	r0, #2
 80019fa:	f007 fac5 	bl	8008f88 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 80019fe:	4b3b      	ldr	r3, [pc, #236]	@ (8001aec <menu+0x544>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b08      	cmp	r3, #8
 8001a04:	d115      	bne.n	8001a32 <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 8001a06:	4a4d      	ldr	r2, [pc, #308]	@ (8001b3c <menu+0x594>)
 8001a08:	2101      	movs	r1, #1
 8001a0a:	2002      	movs	r0, #2
 8001a0c:	f007 fabc 	bl	8008f88 <lcd_print>
			lcd_print(2, 15, "  ");
 8001a10:	4a3c      	ldr	r2, [pc, #240]	@ (8001b04 <menu+0x55c>)
 8001a12:	210f      	movs	r1, #15
 8001a14:	2002      	movs	r0, #2
 8001a16:	f007 fab7 	bl	8008f88 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001a1a:	4b49      	ldr	r3, [pc, #292]	@ (8001b40 <menu+0x598>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	220a      	movs	r2, #10
 8001a20:	4936      	ldr	r1, [pc, #216]	@ (8001afc <menu+0x554>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	f00b fe06 	bl	800d634 <itoa>
			lcd_print(2, 14, snum);
 8001a28:	4a34      	ldr	r2, [pc, #208]	@ (8001afc <menu+0x554>)
 8001a2a:	210e      	movs	r1, #14
 8001a2c:	2002      	movs	r0, #2
 8001a2e:	f007 faab 	bl	8008f88 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001a32:	4b2e      	ldr	r3, [pc, #184]	@ (8001aec <menu+0x544>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b09      	cmp	r3, #9
 8001a38:	d115      	bne.n	8001a66 <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 8001a3a:	4a42      	ldr	r2, [pc, #264]	@ (8001b44 <menu+0x59c>)
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	2002      	movs	r0, #2
 8001a40:	f007 faa2 	bl	8008f88 <lcd_print>
			lcd_print(2, 16, " ");
 8001a44:	4a40      	ldr	r2, [pc, #256]	@ (8001b48 <menu+0x5a0>)
 8001a46:	2110      	movs	r1, #16
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f007 fa9d 	bl	8008f88 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001b4c <menu+0x5a4>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	220a      	movs	r2, #10
 8001a54:	4929      	ldr	r1, [pc, #164]	@ (8001afc <menu+0x554>)
 8001a56:	4618      	mov	r0, r3
 8001a58:	f00b fdec 	bl	800d634 <itoa>
			lcd_print(2, 15, snum);
 8001a5c:	4a27      	ldr	r2, [pc, #156]	@ (8001afc <menu+0x554>)
 8001a5e:	210f      	movs	r1, #15
 8001a60:	2002      	movs	r0, #2
 8001a62:	f007 fa91 	bl	8008f88 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001a66:	4b21      	ldr	r3, [pc, #132]	@ (8001aec <menu+0x544>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b0a      	cmp	r3, #10
 8001a6c:	d104      	bne.n	8001a78 <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 8001a6e:	4a38      	ldr	r2, [pc, #224]	@ (8001b50 <menu+0x5a8>)
 8001a70:	2101      	movs	r1, #1
 8001a72:	2002      	movs	r0, #2
 8001a74:	f007 fa88 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001a78:	2102      	movs	r1, #2
 8001a7a:	4836      	ldr	r0, [pc, #216]	@ (8001b54 <menu+0x5ac>)
 8001a7c:	f008 fdae 	bl	800a5dc <HAL_GPIO_ReadPin>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d119      	bne.n	8001aba <menu+0x512>
 8001a86:	4b34      	ldr	r3, [pc, #208]	@ (8001b58 <menu+0x5b0>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	f083 0301 	eor.w	r3, r3, #1
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d012      	beq.n	8001aba <menu+0x512>
 8001a94:	4b31      	ldr	r3, [pc, #196]	@ (8001b5c <menu+0x5b4>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10e      	bne.n	8001aba <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001a9c:	4b13      	ldr	r3, [pc, #76]	@ (8001aec <menu+0x544>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4b11      	ldr	r3, [pc, #68]	@ (8001aec <menu+0x544>)
 8001aa6:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001aa8:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <menu+0x544>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b0a      	cmp	r3, #10
 8001aae:	d902      	bls.n	8001ab6 <menu+0x50e>
				hataGostermeSirasi = 0;
 8001ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8001aec <menu+0x544>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001ab6:	f002 fabd 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001aba:	2104      	movs	r1, #4
 8001abc:	4825      	ldr	r0, [pc, #148]	@ (8001b54 <menu+0x5ac>)
 8001abe:	f008 fd8d 	bl	800a5dc <HAL_GPIO_ReadPin>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d15e      	bne.n	8001b86 <menu+0x5de>
 8001ac8:	4b23      	ldr	r3, [pc, #140]	@ (8001b58 <menu+0x5b0>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	f083 0301 	eor.w	r3, r3, #1
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d057      	beq.n	8001b86 <menu+0x5de>
 8001ad6:	e043      	b.n	8001b60 <menu+0x5b8>
 8001ad8:	200010bc 	.word	0x200010bc
 8001adc:	200010e7 	.word	0x200010e7
 8001ae0:	20001220 	.word	0x20001220
 8001ae4:	20001234 	.word	0x20001234
 8001ae8:	20001248 	.word	0x20001248
 8001aec:	200010be 	.word	0x200010be
 8001af0:	2000125c 	.word	0x2000125c
 8001af4:	0800ebac 	.word	0x0800ebac
 8001af8:	200010dd 	.word	0x200010dd
 8001afc:	2000105c 	.word	0x2000105c
 8001b00:	20001270 	.word	0x20001270
 8001b04:	0800ebb0 	.word	0x0800ebb0
 8001b08:	200010de 	.word	0x200010de
 8001b0c:	20001284 	.word	0x20001284
 8001b10:	200010df 	.word	0x200010df
 8001b14:	20001298 	.word	0x20001298
 8001b18:	200010e0 	.word	0x200010e0
 8001b1c:	200012ac 	.word	0x200012ac
 8001b20:	200010e1 	.word	0x200010e1
 8001b24:	200012c0 	.word	0x200012c0
 8001b28:	200010e2 	.word	0x200010e2
 8001b2c:	200012d4 	.word	0x200012d4
 8001b30:	200010e3 	.word	0x200010e3
 8001b34:	200012e8 	.word	0x200012e8
 8001b38:	200010e4 	.word	0x200010e4
 8001b3c:	200012fc 	.word	0x200012fc
 8001b40:	200010e5 	.word	0x200010e5
 8001b44:	20001310 	.word	0x20001310
 8001b48:	0800ebb4 	.word	0x0800ebb4
 8001b4c:	200010e6 	.word	0x200010e6
 8001b50:	20001324 	.word	0x20001324
 8001b54:	40010800 	.word	0x40010800
 8001b58:	200010ec 	.word	0x200010ec
 8001b5c:	200010cb 	.word	0x200010cb
 8001b60:	4b8a      	ldr	r3, [pc, #552]	@ (8001d8c <menu+0x7e4>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10e      	bne.n	8001b86 <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001b68:	4b89      	ldr	r3, [pc, #548]	@ (8001d90 <menu+0x7e8>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	4b87      	ldr	r3, [pc, #540]	@ (8001d90 <menu+0x7e8>)
 8001b72:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001b74:	4b86      	ldr	r3, [pc, #536]	@ (8001d90 <menu+0x7e8>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2b0b      	cmp	r3, #11
 8001b7a:	d902      	bls.n	8001b82 <menu+0x5da>
	    		hataGostermeSirasi = 10;
 8001b7c:	4b84      	ldr	r3, [pc, #528]	@ (8001d90 <menu+0x7e8>)
 8001b7e:	220a      	movs	r2, #10
 8001b80:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001b82:	f002 fa57 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001b86:	2108      	movs	r1, #8
 8001b88:	4882      	ldr	r0, [pc, #520]	@ (8001d94 <menu+0x7ec>)
 8001b8a:	f008 fd27 	bl	800a5dc <HAL_GPIO_ReadPin>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d153      	bne.n	8001c3c <menu+0x694>
 8001b94:	4b80      	ldr	r3, [pc, #512]	@ (8001d98 <menu+0x7f0>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	f083 0301 	eor.w	r3, r3, #1
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d04c      	beq.n	8001c3c <menu+0x694>
 8001ba2:	4b7b      	ldr	r3, [pc, #492]	@ (8001d90 <menu+0x7e8>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b0a      	cmp	r3, #10
 8001ba8:	d148      	bne.n	8001c3c <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 8001baa:	4b7c      	ldr	r3, [pc, #496]	@ (8001d9c <menu+0x7f4>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	701a      	strb	r2, [r3, #0]
 8001bb0:	4b7b      	ldr	r3, [pc, #492]	@ (8001da0 <menu+0x7f8>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001bb8:	4b7a      	ldr	r3, [pc, #488]	@ (8001da4 <menu+0x7fc>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
 8001bbe:	4b78      	ldr	r3, [pc, #480]	@ (8001da0 <menu+0x7f8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001bc6:	4b78      	ldr	r3, [pc, #480]	@ (8001da8 <menu+0x800>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
 8001bcc:	4b74      	ldr	r3, [pc, #464]	@ (8001da0 <menu+0x7f8>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001bd4:	4b75      	ldr	r3, [pc, #468]	@ (8001dac <menu+0x804>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	4b71      	ldr	r3, [pc, #452]	@ (8001da0 <menu+0x7f8>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001be2:	4b73      	ldr	r3, [pc, #460]	@ (8001db0 <menu+0x808>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
 8001be8:	4b6d      	ldr	r3, [pc, #436]	@ (8001da0 <menu+0x7f8>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001bf0:	4b70      	ldr	r3, [pc, #448]	@ (8001db4 <menu+0x80c>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
 8001bf6:	4b6a      	ldr	r3, [pc, #424]	@ (8001da0 <menu+0x7f8>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001bfe:	4b6e      	ldr	r3, [pc, #440]	@ (8001db8 <menu+0x810>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]
 8001c04:	4b66      	ldr	r3, [pc, #408]	@ (8001da0 <menu+0x7f8>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001c0c:	4b6b      	ldr	r3, [pc, #428]	@ (8001dbc <menu+0x814>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	701a      	strb	r2, [r3, #0]
 8001c12:	4b63      	ldr	r3, [pc, #396]	@ (8001da0 <menu+0x7f8>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001c1a:	4b69      	ldr	r3, [pc, #420]	@ (8001dc0 <menu+0x818>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
 8001c20:	4b5f      	ldr	r3, [pc, #380]	@ (8001da0 <menu+0x7f8>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001c28:	4b66      	ldr	r3, [pc, #408]	@ (8001dc4 <menu+0x81c>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	701a      	strb	r2, [r3, #0]
 8001c2e:	4b5c      	ldr	r3, [pc, #368]	@ (8001da0 <menu+0x7f8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 8001c36:	4b64      	ldr	r3, [pc, #400]	@ (8001dc8 <menu+0x820>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001c3c:	4b63      	ldr	r3, [pc, #396]	@ (8001dcc <menu+0x824>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	f040 808e 	bne.w	8001d62 <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 8001c46:	4a62      	ldr	r2, [pc, #392]	@ (8001dd0 <menu+0x828>)
 8001c48:	2101      	movs	r1, #1
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f007 f99c 	bl	8008f88 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001c50:	4b4e      	ldr	r3, [pc, #312]	@ (8001d8c <menu+0x7e4>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d003      	beq.n	8001c60 <menu+0x6b8>
 8001c58:	4b4c      	ldr	r3, [pc, #304]	@ (8001d8c <menu+0x7e4>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d104      	bne.n	8001c6a <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 8001c60:	4a5c      	ldr	r2, [pc, #368]	@ (8001dd4 <menu+0x82c>)
 8001c62:	2101      	movs	r1, #1
 8001c64:	2002      	movs	r0, #2
 8001c66:	f007 f98f 	bl	8008f88 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001c6a:	4b5b      	ldr	r3, [pc, #364]	@ (8001dd8 <menu+0x830>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d108      	bne.n	8001c84 <menu+0x6dc>
 8001c72:	4b46      	ldr	r3, [pc, #280]	@ (8001d8c <menu+0x7e4>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d104      	bne.n	8001c84 <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 8001c7a:	4a58      	ldr	r2, [pc, #352]	@ (8001ddc <menu+0x834>)
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	2002      	movs	r0, #2
 8001c80:	f007 f982 	bl	8008f88 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001c84:	4b54      	ldr	r3, [pc, #336]	@ (8001dd8 <menu+0x830>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d108      	bne.n	8001c9e <menu+0x6f6>
 8001c8c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d8c <menu+0x7e4>)
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d104      	bne.n	8001c9e <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 8001c94:	4a52      	ldr	r2, [pc, #328]	@ (8001de0 <menu+0x838>)
 8001c96:	2101      	movs	r1, #1
 8001c98:	2002      	movs	r0, #2
 8001c9a:	f007 f975 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001c9e:	2102      	movs	r1, #2
 8001ca0:	483c      	ldr	r0, [pc, #240]	@ (8001d94 <menu+0x7ec>)
 8001ca2:	f008 fc9b 	bl	800a5dc <HAL_GPIO_ReadPin>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d119      	bne.n	8001ce0 <menu+0x738>
 8001cac:	4b3a      	ldr	r3, [pc, #232]	@ (8001d98 <menu+0x7f0>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	f083 0301 	eor.w	r3, r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d012      	beq.n	8001ce0 <menu+0x738>
 8001cba:	4b34      	ldr	r3, [pc, #208]	@ (8001d8c <menu+0x7e4>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10e      	bne.n	8001ce0 <menu+0x738>
			calismaSekli = calismaSekli + 1;
 8001cc2:	4b45      	ldr	r3, [pc, #276]	@ (8001dd8 <menu+0x830>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4b43      	ldr	r3, [pc, #268]	@ (8001dd8 <menu+0x830>)
 8001ccc:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001cce:	4b42      	ldr	r3, [pc, #264]	@ (8001dd8 <menu+0x830>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d902      	bls.n	8001cdc <menu+0x734>
				calismaSekli = 0;
 8001cd6:	4b40      	ldr	r3, [pc, #256]	@ (8001dd8 <menu+0x830>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001cdc:	f002 f9aa 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ce0:	2104      	movs	r1, #4
 8001ce2:	482c      	ldr	r0, [pc, #176]	@ (8001d94 <menu+0x7ec>)
 8001ce4:	f008 fc7a 	bl	800a5dc <HAL_GPIO_ReadPin>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d119      	bne.n	8001d22 <menu+0x77a>
 8001cee:	4b2a      	ldr	r3, [pc, #168]	@ (8001d98 <menu+0x7f0>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	f083 0301 	eor.w	r3, r3, #1
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d012      	beq.n	8001d22 <menu+0x77a>
 8001cfc:	4b23      	ldr	r3, [pc, #140]	@ (8001d8c <menu+0x7e4>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10e      	bne.n	8001d22 <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 8001d04:	4b34      	ldr	r3, [pc, #208]	@ (8001dd8 <menu+0x830>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	b2da      	uxtb	r2, r3
 8001d0c:	4b32      	ldr	r3, [pc, #200]	@ (8001dd8 <menu+0x830>)
 8001d0e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001d10:	4b31      	ldr	r3, [pc, #196]	@ (8001dd8 <menu+0x830>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <menu+0x776>
	    		calismaSekli = 1;
 8001d18:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd8 <menu+0x830>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001d1e:	f002 f989 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d22:	2108      	movs	r1, #8
 8001d24:	481b      	ldr	r0, [pc, #108]	@ (8001d94 <menu+0x7ec>)
 8001d26:	f008 fc59 	bl	800a5dc <HAL_GPIO_ReadPin>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d118      	bne.n	8001d62 <menu+0x7ba>
 8001d30:	4b19      	ldr	r3, [pc, #100]	@ (8001d98 <menu+0x7f0>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	f083 0301 	eor.w	r3, r3, #1
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d011      	beq.n	8001d62 <menu+0x7ba>
			eepromData[1] = calismaSekli;
 8001d3e:	4b26      	ldr	r3, [pc, #152]	@ (8001dd8 <menu+0x830>)
 8001d40:	781a      	ldrb	r2, [r3, #0]
 8001d42:	4b17      	ldr	r3, [pc, #92]	@ (8001da0 <menu+0x7f8>)
 8001d44:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001d46:	4b24      	ldr	r3, [pc, #144]	@ (8001dd8 <menu+0x830>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d106      	bne.n	8001d5c <menu+0x7b4>
				altLimit = 1;
 8001d4e:	4b25      	ldr	r3, [pc, #148]	@ (8001de4 <menu+0x83c>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001d54:	4b23      	ldr	r3, [pc, #140]	@ (8001de4 <menu+0x83c>)
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <menu+0x7f8>)
 8001d5a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001d5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc8 <menu+0x820>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001d62:	4b1a      	ldr	r3, [pc, #104]	@ (8001dcc <menu+0x824>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	f040 809c 	bne.w	8001ea4 <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 8001d6c:	4a1e      	ldr	r2, [pc, #120]	@ (8001de8 <menu+0x840>)
 8001d6e:	2101      	movs	r1, #1
 8001d70:	2001      	movs	r0, #1
 8001d72:	f007 f909 	bl	8008f88 <lcd_print>

		if(emniyetCercevesi == 0) {
 8001d76:	4b1d      	ldr	r3, [pc, #116]	@ (8001dec <menu+0x844>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d13a      	bne.n	8001df4 <menu+0x84c>
			lcd_print(2, 1, pasifText);
 8001d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001df0 <menu+0x848>)
 8001d80:	2101      	movs	r1, #1
 8001d82:	2002      	movs	r0, #2
 8001d84:	f007 f900 	bl	8008f88 <lcd_print>
 8001d88:	e03d      	b.n	8001e06 <menu+0x85e>
 8001d8a:	bf00      	nop
 8001d8c:	200010cb 	.word	0x200010cb
 8001d90:	200010be 	.word	0x200010be
 8001d94:	40010800 	.word	0x40010800
 8001d98:	200010ec 	.word	0x200010ec
 8001d9c:	200010dd 	.word	0x200010dd
 8001da0:	20000fec 	.word	0x20000fec
 8001da4:	200010de 	.word	0x200010de
 8001da8:	200010df 	.word	0x200010df
 8001dac:	200010e0 	.word	0x200010e0
 8001db0:	200010e1 	.word	0x200010e1
 8001db4:	200010e2 	.word	0x200010e2
 8001db8:	200010e3 	.word	0x200010e3
 8001dbc:	200010e4 	.word	0x200010e4
 8001dc0:	200010e5 	.word	0x200010e5
 8001dc4:	200010e6 	.word	0x200010e6
 8001dc8:	200010e9 	.word	0x200010e9
 8001dcc:	200010bc 	.word	0x200010bc
 8001dd0:	20001338 	.word	0x20001338
 8001dd4:	2000134c 	.word	0x2000134c
 8001dd8:	200010bd 	.word	0x200010bd
 8001ddc:	20001360 	.word	0x20001360
 8001de0:	20001374 	.word	0x20001374
 8001de4:	200010c2 	.word	0x200010c2
 8001de8:	20001388 	.word	0x20001388
 8001dec:	200010c0 	.word	0x200010c0
 8001df0:	2000139c 	.word	0x2000139c
		} else if(emniyetCercevesi == 1) {
 8001df4:	4b6b      	ldr	r3, [pc, #428]	@ (8001fa4 <menu+0x9fc>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d104      	bne.n	8001e06 <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 8001dfc:	4a6a      	ldr	r2, [pc, #424]	@ (8001fa8 <menu+0xa00>)
 8001dfe:	2101      	movs	r1, #1
 8001e00:	2002      	movs	r0, #2
 8001e02:	f007 f8c1 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e06:	2102      	movs	r1, #2
 8001e08:	4868      	ldr	r0, [pc, #416]	@ (8001fac <menu+0xa04>)
 8001e0a:	f008 fbe7 	bl	800a5dc <HAL_GPIO_ReadPin>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d115      	bne.n	8001e40 <menu+0x898>
 8001e14:	4b66      	ldr	r3, [pc, #408]	@ (8001fb0 <menu+0xa08>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	f083 0301 	eor.w	r3, r3, #1
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d00e      	beq.n	8001e40 <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001e22:	4b60      	ldr	r3, [pc, #384]	@ (8001fa4 <menu+0x9fc>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	3301      	adds	r3, #1
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4b5e      	ldr	r3, [pc, #376]	@ (8001fa4 <menu+0x9fc>)
 8001e2c:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001e2e:	4b5d      	ldr	r3, [pc, #372]	@ (8001fa4 <menu+0x9fc>)
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d902      	bls.n	8001e3c <menu+0x894>
				emniyetCercevesi = 0;
 8001e36:	4b5b      	ldr	r3, [pc, #364]	@ (8001fa4 <menu+0x9fc>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e3c:	f002 f8fa 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e40:	2104      	movs	r1, #4
 8001e42:	485a      	ldr	r0, [pc, #360]	@ (8001fac <menu+0xa04>)
 8001e44:	f008 fbca 	bl	800a5dc <HAL_GPIO_ReadPin>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d115      	bne.n	8001e7a <menu+0x8d2>
 8001e4e:	4b58      	ldr	r3, [pc, #352]	@ (8001fb0 <menu+0xa08>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	f083 0301 	eor.w	r3, r3, #1
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d00e      	beq.n	8001e7a <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001e5c:	4b51      	ldr	r3, [pc, #324]	@ (8001fa4 <menu+0x9fc>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	4b4f      	ldr	r3, [pc, #316]	@ (8001fa4 <menu+0x9fc>)
 8001e66:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001e68:	4b4e      	ldr	r3, [pc, #312]	@ (8001fa4 <menu+0x9fc>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <menu+0x8ce>
		   		emniyetCercevesi = 1;
 8001e70:	4b4c      	ldr	r3, [pc, #304]	@ (8001fa4 <menu+0x9fc>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e76:	f002 f8dd 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001e7a:	2108      	movs	r1, #8
 8001e7c:	484b      	ldr	r0, [pc, #300]	@ (8001fac <menu+0xa04>)
 8001e7e:	f008 fbad 	bl	800a5dc <HAL_GPIO_ReadPin>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d10d      	bne.n	8001ea4 <menu+0x8fc>
 8001e88:	4b49      	ldr	r3, [pc, #292]	@ (8001fb0 <menu+0xa08>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	f083 0301 	eor.w	r3, r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d006      	beq.n	8001ea4 <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 8001e96:	4b43      	ldr	r3, [pc, #268]	@ (8001fa4 <menu+0x9fc>)
 8001e98:	781a      	ldrb	r2, [r3, #0]
 8001e9a:	4b46      	ldr	r3, [pc, #280]	@ (8001fb4 <menu+0xa0c>)
 8001e9c:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001e9e:	4b46      	ldr	r3, [pc, #280]	@ (8001fb8 <menu+0xa10>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001ea4:	4b45      	ldr	r3, [pc, #276]	@ (8001fbc <menu+0xa14>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b04      	cmp	r3, #4
 8001eaa:	d166      	bne.n	8001f7a <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 8001eac:	4a44      	ldr	r2, [pc, #272]	@ (8001fc0 <menu+0xa18>)
 8001eae:	2101      	movs	r1, #1
 8001eb0:	2001      	movs	r0, #1
 8001eb2:	f007 f869 	bl	8008f88 <lcd_print>

		if(yavaslamaLimit == 0) {
 8001eb6:	4b43      	ldr	r3, [pc, #268]	@ (8001fc4 <menu+0xa1c>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d105      	bne.n	8001eca <menu+0x922>
			lcd_print(2, 1, pasifText);
 8001ebe:	4a42      	ldr	r2, [pc, #264]	@ (8001fc8 <menu+0xa20>)
 8001ec0:	2101      	movs	r1, #1
 8001ec2:	2002      	movs	r0, #2
 8001ec4:	f007 f860 	bl	8008f88 <lcd_print>
 8001ec8:	e008      	b.n	8001edc <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 8001eca:	4b3e      	ldr	r3, [pc, #248]	@ (8001fc4 <menu+0xa1c>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d104      	bne.n	8001edc <menu+0x934>
			lcd_print(2, 1, aktifText);
 8001ed2:	4a3e      	ldr	r2, [pc, #248]	@ (8001fcc <menu+0xa24>)
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	2002      	movs	r0, #2
 8001ed8:	f007 f856 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001edc:	2102      	movs	r1, #2
 8001ede:	4833      	ldr	r0, [pc, #204]	@ (8001fac <menu+0xa04>)
 8001ee0:	f008 fb7c 	bl	800a5dc <HAL_GPIO_ReadPin>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d115      	bne.n	8001f16 <menu+0x96e>
 8001eea:	4b31      	ldr	r3, [pc, #196]	@ (8001fb0 <menu+0xa08>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	f083 0301 	eor.w	r3, r3, #1
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00e      	beq.n	8001f16 <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001ef8:	4b32      	ldr	r3, [pc, #200]	@ (8001fc4 <menu+0xa1c>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	3301      	adds	r3, #1
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	4b30      	ldr	r3, [pc, #192]	@ (8001fc4 <menu+0xa1c>)
 8001f02:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001f04:	4b2f      	ldr	r3, [pc, #188]	@ (8001fc4 <menu+0xa1c>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d902      	bls.n	8001f12 <menu+0x96a>
				yavaslamaLimit = 0;
 8001f0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001fc4 <menu+0xa1c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f12:	f002 f88f 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f16:	2104      	movs	r1, #4
 8001f18:	4824      	ldr	r0, [pc, #144]	@ (8001fac <menu+0xa04>)
 8001f1a:	f008 fb5f 	bl	800a5dc <HAL_GPIO_ReadPin>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d115      	bne.n	8001f50 <menu+0x9a8>
 8001f24:	4b22      	ldr	r3, [pc, #136]	@ (8001fb0 <menu+0xa08>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	f083 0301 	eor.w	r3, r3, #1
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00e      	beq.n	8001f50 <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001f32:	4b24      	ldr	r3, [pc, #144]	@ (8001fc4 <menu+0xa1c>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4b22      	ldr	r3, [pc, #136]	@ (8001fc4 <menu+0xa1c>)
 8001f3c:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001f3e:	4b21      	ldr	r3, [pc, #132]	@ (8001fc4 <menu+0xa1c>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d002      	beq.n	8001f4c <menu+0x9a4>
		   		yavaslamaLimit = 1;
 8001f46:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc4 <menu+0xa1c>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f4c:	f002 f872 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f50:	2108      	movs	r1, #8
 8001f52:	4816      	ldr	r0, [pc, #88]	@ (8001fac <menu+0xa04>)
 8001f54:	f008 fb42 	bl	800a5dc <HAL_GPIO_ReadPin>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d10d      	bne.n	8001f7a <menu+0x9d2>
 8001f5e:	4b14      	ldr	r3, [pc, #80]	@ (8001fb0 <menu+0xa08>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	f083 0301 	eor.w	r3, r3, #1
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d006      	beq.n	8001f7a <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 8001f6c:	4b15      	ldr	r3, [pc, #84]	@ (8001fc4 <menu+0xa1c>)
 8001f6e:	781a      	ldrb	r2, [r3, #0]
 8001f70:	4b10      	ldr	r3, [pc, #64]	@ (8001fb4 <menu+0xa0c>)
 8001f72:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001f74:	4b10      	ldr	r3, [pc, #64]	@ (8001fb8 <menu+0xa10>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <menu+0xa14>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b05      	cmp	r3, #5
 8001f80:	f040 80aa 	bne.w	80020d8 <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 8001f84:	4a12      	ldr	r2, [pc, #72]	@ (8001fd0 <menu+0xa28>)
 8001f86:	2101      	movs	r1, #1
 8001f88:	2001      	movs	r0, #1
 8001f8a:	f006 fffd 	bl	8008f88 <lcd_print>

		if(altLimit == 0) {
 8001f8e:	4b11      	ldr	r3, [pc, #68]	@ (8001fd4 <menu+0xa2c>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d120      	bne.n	8001fd8 <menu+0xa30>
			lcd_print(2, 1, pasifText);
 8001f96:	4a0c      	ldr	r2, [pc, #48]	@ (8001fc8 <menu+0xa20>)
 8001f98:	2101      	movs	r1, #1
 8001f9a:	2002      	movs	r0, #2
 8001f9c:	f006 fff4 	bl	8008f88 <lcd_print>
 8001fa0:	e023      	b.n	8001fea <menu+0xa42>
 8001fa2:	bf00      	nop
 8001fa4:	200010c0 	.word	0x200010c0
 8001fa8:	200000ec 	.word	0x200000ec
 8001fac:	40010800 	.word	0x40010800
 8001fb0:	200010ec 	.word	0x200010ec
 8001fb4:	20000fec 	.word	0x20000fec
 8001fb8:	200010e9 	.word	0x200010e9
 8001fbc:	200010bc 	.word	0x200010bc
 8001fc0:	200013c4 	.word	0x200013c4
 8001fc4:	200010c1 	.word	0x200010c1
 8001fc8:	2000139c 	.word	0x2000139c
 8001fcc:	200013b0 	.word	0x200013b0
 8001fd0:	200013d8 	.word	0x200013d8
 8001fd4:	200010c2 	.word	0x200010c2
		} else if(altLimit == 1) {
 8001fd8:	4b89      	ldr	r3, [pc, #548]	@ (8002200 <menu+0xc58>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d104      	bne.n	8001fea <menu+0xa42>
			lcd_print(2, 1, aktifText);
 8001fe0:	4a88      	ldr	r2, [pc, #544]	@ (8002204 <menu+0xc5c>)
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	2002      	movs	r0, #2
 8001fe6:	f006 ffcf 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001fea:	2102      	movs	r1, #2
 8001fec:	4886      	ldr	r0, [pc, #536]	@ (8002208 <menu+0xc60>)
 8001fee:	f008 faf5 	bl	800a5dc <HAL_GPIO_ReadPin>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d119      	bne.n	800202c <menu+0xa84>
 8001ff8:	4b84      	ldr	r3, [pc, #528]	@ (800220c <menu+0xc64>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	f083 0301 	eor.w	r3, r3, #1
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d012      	beq.n	800202c <menu+0xa84>
 8002006:	4b82      	ldr	r3, [pc, #520]	@ (8002210 <menu+0xc68>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d10e      	bne.n	800202c <menu+0xa84>
			altLimit = altLimit + 1;
 800200e:	4b7c      	ldr	r3, [pc, #496]	@ (8002200 <menu+0xc58>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	3301      	adds	r3, #1
 8002014:	b2da      	uxtb	r2, r3
 8002016:	4b7a      	ldr	r3, [pc, #488]	@ (8002200 <menu+0xc58>)
 8002018:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800201a:	4b79      	ldr	r3, [pc, #484]	@ (8002200 <menu+0xc58>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d902      	bls.n	8002028 <menu+0xa80>
				altLimit = 0;
 8002022:	4b77      	ldr	r3, [pc, #476]	@ (8002200 <menu+0xc58>)
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002028:	f002 f804 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 800202c:	2104      	movs	r1, #4
 800202e:	4876      	ldr	r0, [pc, #472]	@ (8002208 <menu+0xc60>)
 8002030:	f008 fad4 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002034:	4603      	mov	r3, r0
 8002036:	2b01      	cmp	r3, #1
 8002038:	d119      	bne.n	800206e <menu+0xac6>
 800203a:	4b74      	ldr	r3, [pc, #464]	@ (800220c <menu+0xc64>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	f083 0301 	eor.w	r3, r3, #1
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d012      	beq.n	800206e <menu+0xac6>
 8002048:	4b71      	ldr	r3, [pc, #452]	@ (8002210 <menu+0xc68>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10e      	bne.n	800206e <menu+0xac6>
			altLimit = altLimit - 1;
 8002050:	4b6b      	ldr	r3, [pc, #428]	@ (8002200 <menu+0xc58>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	3b01      	subs	r3, #1
 8002056:	b2da      	uxtb	r2, r3
 8002058:	4b69      	ldr	r3, [pc, #420]	@ (8002200 <menu+0xc58>)
 800205a:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 800205c:	4b68      	ldr	r3, [pc, #416]	@ (8002200 <menu+0xc58>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d002      	beq.n	800206a <menu+0xac2>
		   		altLimit = 1;
 8002064:	4b66      	ldr	r3, [pc, #408]	@ (8002200 <menu+0xc58>)
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800206a:	f001 ffe3 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800206e:	2108      	movs	r1, #8
 8002070:	4865      	ldr	r0, [pc, #404]	@ (8002208 <menu+0xc60>)
 8002072:	f008 fab3 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002076:	4603      	mov	r3, r0
 8002078:	2b01      	cmp	r3, #1
 800207a:	d12d      	bne.n	80020d8 <menu+0xb30>
 800207c:	4b63      	ldr	r3, [pc, #396]	@ (800220c <menu+0xc64>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	f083 0301 	eor.w	r3, r3, #1
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d026      	beq.n	80020d8 <menu+0xb30>
			eepromData[5] = altLimit;
 800208a:	4b5d      	ldr	r3, [pc, #372]	@ (8002200 <menu+0xc58>)
 800208c:	781a      	ldrb	r2, [r3, #0]
 800208e:	4b61      	ldr	r3, [pc, #388]	@ (8002214 <menu+0xc6c>)
 8002090:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002092:	4b5b      	ldr	r3, [pc, #364]	@ (8002200 <menu+0xc58>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d110      	bne.n	80020bc <menu+0xb14>
 800209a:	4b5f      	ldr	r3, [pc, #380]	@ (8002218 <menu+0xc70>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <menu+0xb02>
 80020a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002218 <menu+0xc70>)
 80020a4:	781b      	ldrb	r3, [r3, #0]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d108      	bne.n	80020bc <menu+0xb14>
				kapiTablaAcKonum = 3;
 80020aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002218 <menu+0xc70>)
 80020ac:	2203      	movs	r2, #3
 80020ae:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80020b0:	4b59      	ldr	r3, [pc, #356]	@ (8002218 <menu+0xc70>)
 80020b2:	781a      	ldrb	r2, [r3, #0]
 80020b4:	4b57      	ldr	r3, [pc, #348]	@ (8002214 <menu+0xc6c>)
 80020b6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 80020ba:	e00a      	b.n	80020d2 <menu+0xb2a>
			} else if(altLimit == 0) {
 80020bc:	4b50      	ldr	r3, [pc, #320]	@ (8002200 <menu+0xc58>)
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d106      	bne.n	80020d2 <menu+0xb2a>
				platformSilindirTipi = 0;
 80020c4:	4b55      	ldr	r3, [pc, #340]	@ (800221c <menu+0xc74>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80020ca:	4b54      	ldr	r3, [pc, #336]	@ (800221c <menu+0xc74>)
 80020cc:	781a      	ldrb	r2, [r3, #0]
 80020ce:	4b51      	ldr	r3, [pc, #324]	@ (8002214 <menu+0xc6c>)
 80020d0:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80020d2:	4b53      	ldr	r3, [pc, #332]	@ (8002220 <menu+0xc78>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80020d8:	4b52      	ldr	r3, [pc, #328]	@ (8002224 <menu+0xc7c>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b06      	cmp	r3, #6
 80020de:	d166      	bne.n	80021ae <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 80020e0:	4a51      	ldr	r2, [pc, #324]	@ (8002228 <menu+0xc80>)
 80020e2:	2101      	movs	r1, #1
 80020e4:	2001      	movs	r0, #1
 80020e6:	f006 ff4f 	bl	8008f88 <lcd_print>

		if(basincSalteri == 0) {
 80020ea:	4b50      	ldr	r3, [pc, #320]	@ (800222c <menu+0xc84>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d105      	bne.n	80020fe <menu+0xb56>
			lcd_print(2, 1, pasifText);
 80020f2:	4a4f      	ldr	r2, [pc, #316]	@ (8002230 <menu+0xc88>)
 80020f4:	2101      	movs	r1, #1
 80020f6:	2002      	movs	r0, #2
 80020f8:	f006 ff46 	bl	8008f88 <lcd_print>
 80020fc:	e008      	b.n	8002110 <menu+0xb68>
		} else if(basincSalteri == 1) {
 80020fe:	4b4b      	ldr	r3, [pc, #300]	@ (800222c <menu+0xc84>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d104      	bne.n	8002110 <menu+0xb68>
			lcd_print(2, 1, aktifText);
 8002106:	4a3f      	ldr	r2, [pc, #252]	@ (8002204 <menu+0xc5c>)
 8002108:	2101      	movs	r1, #1
 800210a:	2002      	movs	r0, #2
 800210c:	f006 ff3c 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002110:	2102      	movs	r1, #2
 8002112:	483d      	ldr	r0, [pc, #244]	@ (8002208 <menu+0xc60>)
 8002114:	f008 fa62 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002118:	4603      	mov	r3, r0
 800211a:	2b01      	cmp	r3, #1
 800211c:	d115      	bne.n	800214a <menu+0xba2>
 800211e:	4b3b      	ldr	r3, [pc, #236]	@ (800220c <menu+0xc64>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	f083 0301 	eor.w	r3, r3, #1
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00e      	beq.n	800214a <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 800212c:	4b3f      	ldr	r3, [pc, #252]	@ (800222c <menu+0xc84>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	3301      	adds	r3, #1
 8002132:	b2da      	uxtb	r2, r3
 8002134:	4b3d      	ldr	r3, [pc, #244]	@ (800222c <menu+0xc84>)
 8002136:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002138:	4b3c      	ldr	r3, [pc, #240]	@ (800222c <menu+0xc84>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d902      	bls.n	8002146 <menu+0xb9e>
				basincSalteri = 0;
 8002140:	4b3a      	ldr	r3, [pc, #232]	@ (800222c <menu+0xc84>)
 8002142:	2200      	movs	r2, #0
 8002144:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002146:	f001 ff75 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800214a:	2104      	movs	r1, #4
 800214c:	482e      	ldr	r0, [pc, #184]	@ (8002208 <menu+0xc60>)
 800214e:	f008 fa45 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002152:	4603      	mov	r3, r0
 8002154:	2b01      	cmp	r3, #1
 8002156:	d115      	bne.n	8002184 <menu+0xbdc>
 8002158:	4b2c      	ldr	r3, [pc, #176]	@ (800220c <menu+0xc64>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	f083 0301 	eor.w	r3, r3, #1
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00e      	beq.n	8002184 <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 8002166:	4b31      	ldr	r3, [pc, #196]	@ (800222c <menu+0xc84>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	3b01      	subs	r3, #1
 800216c:	b2da      	uxtb	r2, r3
 800216e:	4b2f      	ldr	r3, [pc, #188]	@ (800222c <menu+0xc84>)
 8002170:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002172:	4b2e      	ldr	r3, [pc, #184]	@ (800222c <menu+0xc84>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <menu+0xbd8>
		   		basincSalteri = 1;
 800217a:	4b2c      	ldr	r3, [pc, #176]	@ (800222c <menu+0xc84>)
 800217c:	2201      	movs	r2, #1
 800217e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002180:	f001 ff58 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002184:	2108      	movs	r1, #8
 8002186:	4820      	ldr	r0, [pc, #128]	@ (8002208 <menu+0xc60>)
 8002188:	f008 fa28 	bl	800a5dc <HAL_GPIO_ReadPin>
 800218c:	4603      	mov	r3, r0
 800218e:	2b01      	cmp	r3, #1
 8002190:	d10d      	bne.n	80021ae <menu+0xc06>
 8002192:	4b1e      	ldr	r3, [pc, #120]	@ (800220c <menu+0xc64>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	f083 0301 	eor.w	r3, r3, #1
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	d006      	beq.n	80021ae <menu+0xc06>
			eepromData[6] = basincSalteri;
 80021a0:	4b22      	ldr	r3, [pc, #136]	@ (800222c <menu+0xc84>)
 80021a2:	781a      	ldrb	r2, [r3, #0]
 80021a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002214 <menu+0xc6c>)
 80021a6:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80021a8:	4b1d      	ldr	r3, [pc, #116]	@ (8002220 <menu+0xc78>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80021ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002224 <menu+0xc7c>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b07      	cmp	r3, #7
 80021b4:	f040 80a9 	bne.w	800230a <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 80021b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002234 <menu+0xc8c>)
 80021ba:	2101      	movs	r1, #1
 80021bc:	2001      	movs	r0, #1
 80021be:	f006 fee3 	bl	8008f88 <lcd_print>

		if(kapiSecimleri == 0) {
 80021c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002238 <menu+0xc90>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d105      	bne.n	80021d6 <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 80021ca:	4a19      	ldr	r2, [pc, #100]	@ (8002230 <menu+0xc88>)
 80021cc:	2101      	movs	r1, #1
 80021ce:	2002      	movs	r0, #2
 80021d0:	f006 feda 	bl	8008f88 <lcd_print>
 80021d4:	e03f      	b.n	8002256 <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 80021d6:	4b18      	ldr	r3, [pc, #96]	@ (8002238 <menu+0xc90>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d105      	bne.n	80021ea <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 80021de:	4a17      	ldr	r2, [pc, #92]	@ (800223c <menu+0xc94>)
 80021e0:	2101      	movs	r1, #1
 80021e2:	2002      	movs	r0, #2
 80021e4:	f006 fed0 	bl	8008f88 <lcd_print>
 80021e8:	e035      	b.n	8002256 <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 80021ea:	4b13      	ldr	r3, [pc, #76]	@ (8002238 <menu+0xc90>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d128      	bne.n	8002244 <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 80021f2:	4a13      	ldr	r2, [pc, #76]	@ (8002240 <menu+0xc98>)
 80021f4:	2101      	movs	r1, #1
 80021f6:	2002      	movs	r0, #2
 80021f8:	f006 fec6 	bl	8008f88 <lcd_print>
 80021fc:	e02b      	b.n	8002256 <menu+0xcae>
 80021fe:	bf00      	nop
 8002200:	200010c2 	.word	0x200010c2
 8002204:	200013b0 	.word	0x200013b0
 8002208:	40010800 	.word	0x40010800
 800220c:	200010ec 	.word	0x200010ec
 8002210:	200010bd 	.word	0x200010bd
 8002214:	20000fec 	.word	0x20000fec
 8002218:	200010c9 	.word	0x200010c9
 800221c:	200010cf 	.word	0x200010cf
 8002220:	200010e9 	.word	0x200010e9
 8002224:	200010bc 	.word	0x200010bc
 8002228:	200013ec 	.word	0x200013ec
 800222c:	200010c3 	.word	0x200010c3
 8002230:	2000139c 	.word	0x2000139c
 8002234:	20001400 	.word	0x20001400
 8002238:	200010c4 	.word	0x200010c4
 800223c:	20001414 	.word	0x20001414
 8002240:	20001428 	.word	0x20001428
		} else if(kapiSecimleri == 3) {
 8002244:	4b76      	ldr	r3, [pc, #472]	@ (8002420 <menu+0xe78>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b03      	cmp	r3, #3
 800224a:	d104      	bne.n	8002256 <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 800224c:	4a75      	ldr	r2, [pc, #468]	@ (8002424 <menu+0xe7c>)
 800224e:	2101      	movs	r1, #1
 8002250:	2002      	movs	r0, #2
 8002252:	f006 fe99 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002256:	2102      	movs	r1, #2
 8002258:	4873      	ldr	r0, [pc, #460]	@ (8002428 <menu+0xe80>)
 800225a:	f008 f9bf 	bl	800a5dc <HAL_GPIO_ReadPin>
 800225e:	4603      	mov	r3, r0
 8002260:	2b01      	cmp	r3, #1
 8002262:	d115      	bne.n	8002290 <menu+0xce8>
 8002264:	4b71      	ldr	r3, [pc, #452]	@ (800242c <menu+0xe84>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	f083 0301 	eor.w	r3, r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00e      	beq.n	8002290 <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 8002272:	4b6b      	ldr	r3, [pc, #428]	@ (8002420 <menu+0xe78>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	3301      	adds	r3, #1
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b69      	ldr	r3, [pc, #420]	@ (8002420 <menu+0xe78>)
 800227c:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800227e:	4b68      	ldr	r3, [pc, #416]	@ (8002420 <menu+0xe78>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b03      	cmp	r3, #3
 8002284:	d902      	bls.n	800228c <menu+0xce4>
				kapiSecimleri = 0;
 8002286:	4b66      	ldr	r3, [pc, #408]	@ (8002420 <menu+0xe78>)
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800228c:	f001 fed2 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002290:	2104      	movs	r1, #4
 8002292:	4865      	ldr	r0, [pc, #404]	@ (8002428 <menu+0xe80>)
 8002294:	f008 f9a2 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002298:	4603      	mov	r3, r0
 800229a:	2b01      	cmp	r3, #1
 800229c:	d115      	bne.n	80022ca <menu+0xd22>
 800229e:	4b63      	ldr	r3, [pc, #396]	@ (800242c <menu+0xe84>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	f083 0301 	eor.w	r3, r3, #1
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00e      	beq.n	80022ca <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 80022ac:	4b5c      	ldr	r3, [pc, #368]	@ (8002420 <menu+0xe78>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	4b5a      	ldr	r3, [pc, #360]	@ (8002420 <menu+0xe78>)
 80022b6:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80022b8:	4b59      	ldr	r3, [pc, #356]	@ (8002420 <menu+0xe78>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d902      	bls.n	80022c6 <menu+0xd1e>
		   		kapiSecimleri = 3;
 80022c0:	4b57      	ldr	r3, [pc, #348]	@ (8002420 <menu+0xe78>)
 80022c2:	2203      	movs	r2, #3
 80022c4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022c6:	f001 feb5 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022ca:	2108      	movs	r1, #8
 80022cc:	4856      	ldr	r0, [pc, #344]	@ (8002428 <menu+0xe80>)
 80022ce:	f008 f985 	bl	800a5dc <HAL_GPIO_ReadPin>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d118      	bne.n	800230a <menu+0xd62>
 80022d8:	4b54      	ldr	r3, [pc, #336]	@ (800242c <menu+0xe84>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	f083 0301 	eor.w	r3, r3, #1
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d011      	beq.n	800230a <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 80022e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002420 <menu+0xe78>)
 80022e8:	781a      	ldrb	r2, [r3, #0]
 80022ea:	4b51      	ldr	r3, [pc, #324]	@ (8002430 <menu+0xe88>)
 80022ec:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80022ee:	4b4c      	ldr	r3, [pc, #304]	@ (8002420 <menu+0xe78>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d006      	beq.n	8002304 <menu+0xd5c>
				altLimit = 1;
 80022f6:	4b4f      	ldr	r3, [pc, #316]	@ (8002434 <menu+0xe8c>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80022fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002434 <menu+0xe8c>)
 80022fe:	781a      	ldrb	r2, [r3, #0]
 8002300:	4b4b      	ldr	r3, [pc, #300]	@ (8002430 <menu+0xe88>)
 8002302:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002304:	4b4c      	ldr	r3, [pc, #304]	@ (8002438 <menu+0xe90>)
 8002306:	2201      	movs	r2, #1
 8002308:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800230a:	4b4c      	ldr	r3, [pc, #304]	@ (800243c <menu+0xe94>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b08      	cmp	r3, #8
 8002310:	d167      	bne.n	80023e2 <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 8002312:	4a4b      	ldr	r2, [pc, #300]	@ (8002440 <menu+0xe98>)
 8002314:	2101      	movs	r1, #1
 8002316:	2001      	movs	r0, #1
 8002318:	f006 fe36 	bl	8008f88 <lcd_print>

		if(kapiAcTipi == 0) {
 800231c:	4b49      	ldr	r3, [pc, #292]	@ (8002444 <menu+0xe9c>)
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d105      	bne.n	8002330 <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 8002324:	4a48      	ldr	r2, [pc, #288]	@ (8002448 <menu+0xea0>)
 8002326:	2101      	movs	r1, #1
 8002328:	2002      	movs	r0, #2
 800232a:	f006 fe2d 	bl	8008f88 <lcd_print>
 800232e:	e008      	b.n	8002342 <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 8002330:	4b44      	ldr	r3, [pc, #272]	@ (8002444 <menu+0xe9c>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d104      	bne.n	8002342 <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 8002338:	4a44      	ldr	r2, [pc, #272]	@ (800244c <menu+0xea4>)
 800233a:	2101      	movs	r1, #1
 800233c:	2002      	movs	r0, #2
 800233e:	f006 fe23 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002342:	2102      	movs	r1, #2
 8002344:	4838      	ldr	r0, [pc, #224]	@ (8002428 <menu+0xe80>)
 8002346:	f008 f949 	bl	800a5dc <HAL_GPIO_ReadPin>
 800234a:	4603      	mov	r3, r0
 800234c:	2b01      	cmp	r3, #1
 800234e:	d115      	bne.n	800237c <menu+0xdd4>
 8002350:	4b36      	ldr	r3, [pc, #216]	@ (800242c <menu+0xe84>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	f083 0301 	eor.w	r3, r3, #1
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00e      	beq.n	800237c <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 800235e:	4b39      	ldr	r3, [pc, #228]	@ (8002444 <menu+0xe9c>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	3301      	adds	r3, #1
 8002364:	b2da      	uxtb	r2, r3
 8002366:	4b37      	ldr	r3, [pc, #220]	@ (8002444 <menu+0xe9c>)
 8002368:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800236a:	4b36      	ldr	r3, [pc, #216]	@ (8002444 <menu+0xe9c>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d902      	bls.n	8002378 <menu+0xdd0>
				kapiAcTipi = 0;
 8002372:	4b34      	ldr	r3, [pc, #208]	@ (8002444 <menu+0xe9c>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002378:	f001 fe5c 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800237c:	2104      	movs	r1, #4
 800237e:	482a      	ldr	r0, [pc, #168]	@ (8002428 <menu+0xe80>)
 8002380:	f008 f92c 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002384:	4603      	mov	r3, r0
 8002386:	2b01      	cmp	r3, #1
 8002388:	d115      	bne.n	80023b6 <menu+0xe0e>
 800238a:	4b28      	ldr	r3, [pc, #160]	@ (800242c <menu+0xe84>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	f083 0301 	eor.w	r3, r3, #1
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00e      	beq.n	80023b6 <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 8002398:	4b2a      	ldr	r3, [pc, #168]	@ (8002444 <menu+0xe9c>)
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	3b01      	subs	r3, #1
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	4b28      	ldr	r3, [pc, #160]	@ (8002444 <menu+0xe9c>)
 80023a2:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80023a4:	4b27      	ldr	r3, [pc, #156]	@ (8002444 <menu+0xe9c>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <menu+0xe0a>
		   		kapiAcTipi = 1;
 80023ac:	4b25      	ldr	r3, [pc, #148]	@ (8002444 <menu+0xe9c>)
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023b2:	f001 fe3f 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023b6:	2108      	movs	r1, #8
 80023b8:	481b      	ldr	r0, [pc, #108]	@ (8002428 <menu+0xe80>)
 80023ba:	f008 f90f 	bl	800a5dc <HAL_GPIO_ReadPin>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d10e      	bne.n	80023e2 <menu+0xe3a>
 80023c4:	4b19      	ldr	r3, [pc, #100]	@ (800242c <menu+0xe84>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	f083 0301 	eor.w	r3, r3, #1
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d007      	beq.n	80023e2 <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 80023d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002444 <menu+0xe9c>)
 80023d4:	781a      	ldrb	r2, [r3, #0]
 80023d6:	4b16      	ldr	r3, [pc, #88]	@ (8002430 <menu+0xe88>)
 80023d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 80023dc:	4b16      	ldr	r3, [pc, #88]	@ (8002438 <menu+0xe90>)
 80023de:	2201      	movs	r2, #1
 80023e0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80023e2:	4b16      	ldr	r3, [pc, #88]	@ (800243c <menu+0xe94>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b09      	cmp	r3, #9
 80023e8:	f040 8092 	bne.w	8002510 <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 80023ec:	4a18      	ldr	r2, [pc, #96]	@ (8002450 <menu+0xea8>)
 80023ee:	2101      	movs	r1, #1
 80023f0:	2001      	movs	r0, #1
 80023f2:	f006 fdc9 	bl	8008f88 <lcd_print>

		if(kapi1Tip == 0) {
 80023f6:	4b17      	ldr	r3, [pc, #92]	@ (8002454 <menu+0xeac>)
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d105      	bne.n	800240a <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 80023fe:	4a16      	ldr	r2, [pc, #88]	@ (8002458 <menu+0xeb0>)
 8002400:	2101      	movs	r1, #1
 8002402:	2002      	movs	r0, #2
 8002404:	f006 fdc0 	bl	8008f88 <lcd_print>
 8002408:	e033      	b.n	8002472 <menu+0xeca>
		} else if(kapi1Tip == 1) {
 800240a:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <menu+0xeac>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d126      	bne.n	8002460 <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 8002412:	4a12      	ldr	r2, [pc, #72]	@ (800245c <menu+0xeb4>)
 8002414:	2101      	movs	r1, #1
 8002416:	2002      	movs	r0, #2
 8002418:	f006 fdb6 	bl	8008f88 <lcd_print>
 800241c:	e029      	b.n	8002472 <menu+0xeca>
 800241e:	bf00      	nop
 8002420:	200010c4 	.word	0x200010c4
 8002424:	2000143c 	.word	0x2000143c
 8002428:	40010800 	.word	0x40010800
 800242c:	200010ec 	.word	0x200010ec
 8002430:	20000fec 	.word	0x20000fec
 8002434:	200010c2 	.word	0x200010c2
 8002438:	200010e9 	.word	0x200010e9
 800243c:	200010bc 	.word	0x200010bc
 8002440:	20001450 	.word	0x20001450
 8002444:	200010c8 	.word	0x200010c8
 8002448:	20001464 	.word	0x20001464
 800244c:	20001478 	.word	0x20001478
 8002450:	2000148c 	.word	0x2000148c
 8002454:	200010c5 	.word	0x200010c5
 8002458:	20000100 	.word	0x20000100
 800245c:	200014a0 	.word	0x200014a0
		} else if(kapi1Tip == 2) {
 8002460:	4b73      	ldr	r3, [pc, #460]	@ (8002630 <menu+0x1088>)
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d104      	bne.n	8002472 <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 8002468:	4a72      	ldr	r2, [pc, #456]	@ (8002634 <menu+0x108c>)
 800246a:	2101      	movs	r1, #1
 800246c:	2002      	movs	r0, #2
 800246e:	f006 fd8b 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002472:	2102      	movs	r1, #2
 8002474:	4870      	ldr	r0, [pc, #448]	@ (8002638 <menu+0x1090>)
 8002476:	f008 f8b1 	bl	800a5dc <HAL_GPIO_ReadPin>
 800247a:	4603      	mov	r3, r0
 800247c:	2b01      	cmp	r3, #1
 800247e:	d115      	bne.n	80024ac <menu+0xf04>
 8002480:	4b6e      	ldr	r3, [pc, #440]	@ (800263c <menu+0x1094>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	f083 0301 	eor.w	r3, r3, #1
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00e      	beq.n	80024ac <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 800248e:	4b68      	ldr	r3, [pc, #416]	@ (8002630 <menu+0x1088>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	3301      	adds	r3, #1
 8002494:	b2da      	uxtb	r2, r3
 8002496:	4b66      	ldr	r3, [pc, #408]	@ (8002630 <menu+0x1088>)
 8002498:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800249a:	4b65      	ldr	r3, [pc, #404]	@ (8002630 <menu+0x1088>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d902      	bls.n	80024a8 <menu+0xf00>
				kapi1Tip = 0;
 80024a2:	4b63      	ldr	r3, [pc, #396]	@ (8002630 <menu+0x1088>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80024a8:	f001 fdc4 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80024ac:	2104      	movs	r1, #4
 80024ae:	4862      	ldr	r0, [pc, #392]	@ (8002638 <menu+0x1090>)
 80024b0:	f008 f894 	bl	800a5dc <HAL_GPIO_ReadPin>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d115      	bne.n	80024e6 <menu+0xf3e>
 80024ba:	4b60      	ldr	r3, [pc, #384]	@ (800263c <menu+0x1094>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	f083 0301 	eor.w	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00e      	beq.n	80024e6 <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 80024c8:	4b59      	ldr	r3, [pc, #356]	@ (8002630 <menu+0x1088>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	4b57      	ldr	r3, [pc, #348]	@ (8002630 <menu+0x1088>)
 80024d2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80024d4:	4b56      	ldr	r3, [pc, #344]	@ (8002630 <menu+0x1088>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d902      	bls.n	80024e2 <menu+0xf3a>
		   		kapi1Tip = 2;
 80024dc:	4b54      	ldr	r3, [pc, #336]	@ (8002630 <menu+0x1088>)
 80024de:	2202      	movs	r2, #2
 80024e0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024e2:	f001 fda7 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024e6:	2108      	movs	r1, #8
 80024e8:	4853      	ldr	r0, [pc, #332]	@ (8002638 <menu+0x1090>)
 80024ea:	f008 f877 	bl	800a5dc <HAL_GPIO_ReadPin>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d10d      	bne.n	8002510 <menu+0xf68>
 80024f4:	4b51      	ldr	r3, [pc, #324]	@ (800263c <menu+0x1094>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	f083 0301 	eor.w	r3, r3, #1
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d006      	beq.n	8002510 <menu+0xf68>
			eepromData[8] = kapi1Tip;
 8002502:	4b4b      	ldr	r3, [pc, #300]	@ (8002630 <menu+0x1088>)
 8002504:	781a      	ldrb	r2, [r3, #0]
 8002506:	4b4e      	ldr	r3, [pc, #312]	@ (8002640 <menu+0x1098>)
 8002508:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800250a:	4b4e      	ldr	r3, [pc, #312]	@ (8002644 <menu+0x109c>)
 800250c:	2201      	movs	r2, #1
 800250e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002510:	4b4d      	ldr	r3, [pc, #308]	@ (8002648 <menu+0x10a0>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2b0a      	cmp	r3, #10
 8002516:	d16c      	bne.n	80025f2 <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 8002518:	4a4c      	ldr	r2, [pc, #304]	@ (800264c <menu+0x10a4>)
 800251a:	2101      	movs	r1, #1
 800251c:	2001      	movs	r0, #1
 800251e:	f006 fd33 	bl	8008f88 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002522:	4a4b      	ldr	r2, [pc, #300]	@ (8002650 <menu+0x10a8>)
 8002524:	2101      	movs	r1, #1
 8002526:	2002      	movs	r0, #2
 8002528:	f006 fd2e 	bl	8008f88 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 800252c:	4b49      	ldr	r3, [pc, #292]	@ (8002654 <menu+0x10ac>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	220a      	movs	r2, #10
 8002532:	4949      	ldr	r1, [pc, #292]	@ (8002658 <menu+0x10b0>)
 8002534:	4618      	mov	r0, r3
 8002536:	f00b f87d 	bl	800d634 <itoa>
		lcd_print(2,16,snum);
 800253a:	4a47      	ldr	r2, [pc, #284]	@ (8002658 <menu+0x10b0>)
 800253c:	2110      	movs	r1, #16
 800253e:	2002      	movs	r0, #2
 8002540:	f006 fd22 	bl	8008f88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002544:	2102      	movs	r1, #2
 8002546:	483c      	ldr	r0, [pc, #240]	@ (8002638 <menu+0x1090>)
 8002548:	f008 f848 	bl	800a5dc <HAL_GPIO_ReadPin>
 800254c:	4603      	mov	r3, r0
 800254e:	2b01      	cmp	r3, #1
 8002550:	d119      	bne.n	8002586 <menu+0xfde>
 8002552:	4b3a      	ldr	r3, [pc, #232]	@ (800263c <menu+0x1094>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	f083 0301 	eor.w	r3, r3, #1
 800255a:	b2db      	uxtb	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	d012      	beq.n	8002586 <menu+0xfde>
 8002560:	4b33      	ldr	r3, [pc, #204]	@ (8002630 <menu+0x1088>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d10e      	bne.n	8002586 <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 8002568:	4b3a      	ldr	r3, [pc, #232]	@ (8002654 <menu+0x10ac>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	3301      	adds	r3, #1
 800256e:	b2da      	uxtb	r2, r3
 8002570:	4b38      	ldr	r3, [pc, #224]	@ (8002654 <menu+0x10ac>)
 8002572:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002574:	4b37      	ldr	r3, [pc, #220]	@ (8002654 <menu+0x10ac>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b05      	cmp	r3, #5
 800257a:	d902      	bls.n	8002582 <menu+0xfda>
				kapi1AcSure = 0;
 800257c:	4b35      	ldr	r3, [pc, #212]	@ (8002654 <menu+0x10ac>)
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002582:	f001 fd57 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002586:	2104      	movs	r1, #4
 8002588:	482b      	ldr	r0, [pc, #172]	@ (8002638 <menu+0x1090>)
 800258a:	f008 f827 	bl	800a5dc <HAL_GPIO_ReadPin>
 800258e:	4603      	mov	r3, r0
 8002590:	2b01      	cmp	r3, #1
 8002592:	d119      	bne.n	80025c8 <menu+0x1020>
 8002594:	4b29      	ldr	r3, [pc, #164]	@ (800263c <menu+0x1094>)
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	f083 0301 	eor.w	r3, r3, #1
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d012      	beq.n	80025c8 <menu+0x1020>
 80025a2:	4b23      	ldr	r3, [pc, #140]	@ (8002630 <menu+0x1088>)
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10e      	bne.n	80025c8 <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 80025aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002654 <menu+0x10ac>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	3b01      	subs	r3, #1
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4b28      	ldr	r3, [pc, #160]	@ (8002654 <menu+0x10ac>)
 80025b4:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80025b6:	4b27      	ldr	r3, [pc, #156]	@ (8002654 <menu+0x10ac>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b06      	cmp	r3, #6
 80025bc:	d902      	bls.n	80025c4 <menu+0x101c>
		   		kapi1AcSure = 5;
 80025be:	4b25      	ldr	r3, [pc, #148]	@ (8002654 <menu+0x10ac>)
 80025c0:	2205      	movs	r2, #5
 80025c2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025c4:	f001 fd36 	bl	8004034 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025c8:	2108      	movs	r1, #8
 80025ca:	481b      	ldr	r0, [pc, #108]	@ (8002638 <menu+0x1090>)
 80025cc:	f008 f806 	bl	800a5dc <HAL_GPIO_ReadPin>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d10d      	bne.n	80025f2 <menu+0x104a>
 80025d6:	4b19      	ldr	r3, [pc, #100]	@ (800263c <menu+0x1094>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	f083 0301 	eor.w	r3, r3, #1
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d006      	beq.n	80025f2 <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 80025e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002654 <menu+0x10ac>)
 80025e6:	781a      	ldrb	r2, [r3, #0]
 80025e8:	4b15      	ldr	r3, [pc, #84]	@ (8002640 <menu+0x1098>)
 80025ea:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80025ec:	4b15      	ldr	r3, [pc, #84]	@ (8002644 <menu+0x109c>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80025f2:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <menu+0x10a0>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b0b      	cmp	r3, #11
 80025f8:	f040 8090 	bne.w	800271c <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 80025fc:	4a17      	ldr	r2, [pc, #92]	@ (800265c <menu+0x10b4>)
 80025fe:	2101      	movs	r1, #1
 8002600:	2001      	movs	r0, #1
 8002602:	f006 fcc1 	bl	8008f88 <lcd_print>

		if(kapi2Tip == 0) {
 8002606:	4b16      	ldr	r3, [pc, #88]	@ (8002660 <menu+0x10b8>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d105      	bne.n	800261a <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 800260e:	4a15      	ldr	r2, [pc, #84]	@ (8002664 <menu+0x10bc>)
 8002610:	2101      	movs	r1, #1
 8002612:	2002      	movs	r0, #2
 8002614:	f006 fcb8 	bl	8008f88 <lcd_print>
 8002618:	e031      	b.n	800267e <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 800261a:	4b11      	ldr	r3, [pc, #68]	@ (8002660 <menu+0x10b8>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d124      	bne.n	800266c <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 8002622:	4a11      	ldr	r2, [pc, #68]	@ (8002668 <menu+0x10c0>)
 8002624:	2101      	movs	r1, #1
 8002626:	2002      	movs	r0, #2
 8002628:	f006 fcae 	bl	8008f88 <lcd_print>
 800262c:	e027      	b.n	800267e <menu+0x10d6>
 800262e:	bf00      	nop
 8002630:	200010c5 	.word	0x200010c5
 8002634:	20000114 	.word	0x20000114
 8002638:	40010800 	.word	0x40010800
 800263c:	200010ec 	.word	0x200010ec
 8002640:	20000fec 	.word	0x20000fec
 8002644:	200010e9 	.word	0x200010e9
 8002648:	200010bc 	.word	0x200010bc
 800264c:	200014b4 	.word	0x200014b4
 8002650:	200014c8 	.word	0x200014c8
 8002654:	200010d5 	.word	0x200010d5
 8002658:	2000105c 	.word	0x2000105c
 800265c:	200014dc 	.word	0x200014dc
 8002660:	200010c6 	.word	0x200010c6
 8002664:	20000100 	.word	0x20000100
 8002668:	200014a0 	.word	0x200014a0
		} else if(kapi2Tip == 2) {
 800266c:	4b73      	ldr	r3, [pc, #460]	@ (800283c <menu+0x1294>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b02      	cmp	r3, #2
 8002672:	d104      	bne.n	800267e <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 8002674:	4a72      	ldr	r2, [pc, #456]	@ (8002840 <menu+0x1298>)
 8002676:	2101      	movs	r1, #1
 8002678:	2002      	movs	r0, #2
 800267a:	f006 fc85 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800267e:	2102      	movs	r1, #2
 8002680:	4870      	ldr	r0, [pc, #448]	@ (8002844 <menu+0x129c>)
 8002682:	f007 ffab 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002686:	4603      	mov	r3, r0
 8002688:	2b01      	cmp	r3, #1
 800268a:	d115      	bne.n	80026b8 <menu+0x1110>
 800268c:	4b6e      	ldr	r3, [pc, #440]	@ (8002848 <menu+0x12a0>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	f083 0301 	eor.w	r3, r3, #1
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00e      	beq.n	80026b8 <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 800269a:	4b68      	ldr	r3, [pc, #416]	@ (800283c <menu+0x1294>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	3301      	adds	r3, #1
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4b66      	ldr	r3, [pc, #408]	@ (800283c <menu+0x1294>)
 80026a4:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80026a6:	4b65      	ldr	r3, [pc, #404]	@ (800283c <menu+0x1294>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d902      	bls.n	80026b4 <menu+0x110c>
				kapi2Tip = 0;
 80026ae:	4b63      	ldr	r3, [pc, #396]	@ (800283c <menu+0x1294>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026b4:	f001 fcbe 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026b8:	2104      	movs	r1, #4
 80026ba:	4862      	ldr	r0, [pc, #392]	@ (8002844 <menu+0x129c>)
 80026bc:	f007 ff8e 	bl	800a5dc <HAL_GPIO_ReadPin>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d115      	bne.n	80026f2 <menu+0x114a>
 80026c6:	4b60      	ldr	r3, [pc, #384]	@ (8002848 <menu+0x12a0>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	f083 0301 	eor.w	r3, r3, #1
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00e      	beq.n	80026f2 <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 80026d4:	4b59      	ldr	r3, [pc, #356]	@ (800283c <menu+0x1294>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	3b01      	subs	r3, #1
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	4b57      	ldr	r3, [pc, #348]	@ (800283c <menu+0x1294>)
 80026de:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 80026e0:	4b56      	ldr	r3, [pc, #344]	@ (800283c <menu+0x1294>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d902      	bls.n	80026ee <menu+0x1146>
		   		kapi2Tip = 2;
 80026e8:	4b54      	ldr	r3, [pc, #336]	@ (800283c <menu+0x1294>)
 80026ea:	2202      	movs	r2, #2
 80026ec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026ee:	f001 fca1 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026f2:	2108      	movs	r1, #8
 80026f4:	4853      	ldr	r0, [pc, #332]	@ (8002844 <menu+0x129c>)
 80026f6:	f007 ff71 	bl	800a5dc <HAL_GPIO_ReadPin>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d10d      	bne.n	800271c <menu+0x1174>
 8002700:	4b51      	ldr	r3, [pc, #324]	@ (8002848 <menu+0x12a0>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	f083 0301 	eor.w	r3, r3, #1
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d006      	beq.n	800271c <menu+0x1174>
			eepromData[10] = kapi2Tip;
 800270e:	4b4b      	ldr	r3, [pc, #300]	@ (800283c <menu+0x1294>)
 8002710:	781a      	ldrb	r2, [r3, #0]
 8002712:	4b4e      	ldr	r3, [pc, #312]	@ (800284c <menu+0x12a4>)
 8002714:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002716:	4b4e      	ldr	r3, [pc, #312]	@ (8002850 <menu+0x12a8>)
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 800271c:	4b4d      	ldr	r3, [pc, #308]	@ (8002854 <menu+0x12ac>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b0c      	cmp	r3, #12
 8002722:	d16c      	bne.n	80027fe <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 8002724:	4a4c      	ldr	r2, [pc, #304]	@ (8002858 <menu+0x12b0>)
 8002726:	2101      	movs	r1, #1
 8002728:	2001      	movs	r0, #1
 800272a:	f006 fc2d 	bl	8008f88 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 800272e:	4a4b      	ldr	r2, [pc, #300]	@ (800285c <menu+0x12b4>)
 8002730:	2101      	movs	r1, #1
 8002732:	2002      	movs	r0, #2
 8002734:	f006 fc28 	bl	8008f88 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 8002738:	4b49      	ldr	r3, [pc, #292]	@ (8002860 <menu+0x12b8>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	220a      	movs	r2, #10
 800273e:	4949      	ldr	r1, [pc, #292]	@ (8002864 <menu+0x12bc>)
 8002740:	4618      	mov	r0, r3
 8002742:	f00a ff77 	bl	800d634 <itoa>
		lcd_print(2,16,snum);
 8002746:	4a47      	ldr	r2, [pc, #284]	@ (8002864 <menu+0x12bc>)
 8002748:	2110      	movs	r1, #16
 800274a:	2002      	movs	r0, #2
 800274c:	f006 fc1c 	bl	8008f88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002750:	2102      	movs	r1, #2
 8002752:	483c      	ldr	r0, [pc, #240]	@ (8002844 <menu+0x129c>)
 8002754:	f007 ff42 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002758:	4603      	mov	r3, r0
 800275a:	2b01      	cmp	r3, #1
 800275c:	d119      	bne.n	8002792 <menu+0x11ea>
 800275e:	4b3a      	ldr	r3, [pc, #232]	@ (8002848 <menu+0x12a0>)
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	f083 0301 	eor.w	r3, r3, #1
 8002766:	b2db      	uxtb	r3, r3
 8002768:	2b00      	cmp	r3, #0
 800276a:	d012      	beq.n	8002792 <menu+0x11ea>
 800276c:	4b33      	ldr	r3, [pc, #204]	@ (800283c <menu+0x1294>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d10e      	bne.n	8002792 <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 8002774:	4b3a      	ldr	r3, [pc, #232]	@ (8002860 <menu+0x12b8>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	3301      	adds	r3, #1
 800277a:	b2da      	uxtb	r2, r3
 800277c:	4b38      	ldr	r3, [pc, #224]	@ (8002860 <menu+0x12b8>)
 800277e:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002780:	4b37      	ldr	r3, [pc, #220]	@ (8002860 <menu+0x12b8>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b05      	cmp	r3, #5
 8002786:	d902      	bls.n	800278e <menu+0x11e6>
				kapi2AcSure = 0;
 8002788:	4b35      	ldr	r3, [pc, #212]	@ (8002860 <menu+0x12b8>)
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800278e:	f001 fc51 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002792:	2104      	movs	r1, #4
 8002794:	482b      	ldr	r0, [pc, #172]	@ (8002844 <menu+0x129c>)
 8002796:	f007 ff21 	bl	800a5dc <HAL_GPIO_ReadPin>
 800279a:	4603      	mov	r3, r0
 800279c:	2b01      	cmp	r3, #1
 800279e:	d119      	bne.n	80027d4 <menu+0x122c>
 80027a0:	4b29      	ldr	r3, [pc, #164]	@ (8002848 <menu+0x12a0>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	f083 0301 	eor.w	r3, r3, #1
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d012      	beq.n	80027d4 <menu+0x122c>
 80027ae:	4b23      	ldr	r3, [pc, #140]	@ (800283c <menu+0x1294>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10e      	bne.n	80027d4 <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 80027b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002860 <menu+0x12b8>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	4b28      	ldr	r3, [pc, #160]	@ (8002860 <menu+0x12b8>)
 80027c0:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 80027c2:	4b27      	ldr	r3, [pc, #156]	@ (8002860 <menu+0x12b8>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b06      	cmp	r3, #6
 80027c8:	d902      	bls.n	80027d0 <menu+0x1228>
		   		kapi2AcSure = 5;
 80027ca:	4b25      	ldr	r3, [pc, #148]	@ (8002860 <menu+0x12b8>)
 80027cc:	2205      	movs	r2, #5
 80027ce:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80027d0:	f001 fc30 	bl	8004034 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80027d4:	2108      	movs	r1, #8
 80027d6:	481b      	ldr	r0, [pc, #108]	@ (8002844 <menu+0x129c>)
 80027d8:	f007 ff00 	bl	800a5dc <HAL_GPIO_ReadPin>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d10d      	bne.n	80027fe <menu+0x1256>
 80027e2:	4b19      	ldr	r3, [pc, #100]	@ (8002848 <menu+0x12a0>)
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	f083 0301 	eor.w	r3, r3, #1
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d006      	beq.n	80027fe <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 80027f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002860 <menu+0x12b8>)
 80027f2:	781a      	ldrb	r2, [r3, #0]
 80027f4:	4b15      	ldr	r3, [pc, #84]	@ (800284c <menu+0x12a4>)
 80027f6:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80027f8:	4b15      	ldr	r3, [pc, #84]	@ (8002850 <menu+0x12a8>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80027fe:	4b15      	ldr	r3, [pc, #84]	@ (8002854 <menu+0x12ac>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b0d      	cmp	r3, #13
 8002804:	f040 8090 	bne.w	8002928 <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 8002808:	4a17      	ldr	r2, [pc, #92]	@ (8002868 <menu+0x12c0>)
 800280a:	2101      	movs	r1, #1
 800280c:	2001      	movs	r0, #1
 800280e:	f006 fbbb 	bl	8008f88 <lcd_print>

		if(kapitablaTip == 0) {
 8002812:	4b16      	ldr	r3, [pc, #88]	@ (800286c <menu+0x12c4>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d105      	bne.n	8002826 <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 800281a:	4a15      	ldr	r2, [pc, #84]	@ (8002870 <menu+0x12c8>)
 800281c:	2101      	movs	r1, #1
 800281e:	2002      	movs	r0, #2
 8002820:	f006 fbb2 	bl	8008f88 <lcd_print>
 8002824:	e031      	b.n	800288a <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 8002826:	4b11      	ldr	r3, [pc, #68]	@ (800286c <menu+0x12c4>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d124      	bne.n	8002878 <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 800282e:	4a11      	ldr	r2, [pc, #68]	@ (8002874 <menu+0x12cc>)
 8002830:	2101      	movs	r1, #1
 8002832:	2002      	movs	r0, #2
 8002834:	f006 fba8 	bl	8008f88 <lcd_print>
 8002838:	e027      	b.n	800288a <menu+0x12e2>
 800283a:	bf00      	nop
 800283c:	200010c6 	.word	0x200010c6
 8002840:	20000114 	.word	0x20000114
 8002844:	40010800 	.word	0x40010800
 8002848:	200010ec 	.word	0x200010ec
 800284c:	20000fec 	.word	0x20000fec
 8002850:	200010e9 	.word	0x200010e9
 8002854:	200010bc 	.word	0x200010bc
 8002858:	200014f0 	.word	0x200014f0
 800285c:	200014c8 	.word	0x200014c8
 8002860:	200010d6 	.word	0x200010d6
 8002864:	2000105c 	.word	0x2000105c
 8002868:	20001504 	.word	0x20001504
 800286c:	200010c7 	.word	0x200010c7
 8002870:	20000100 	.word	0x20000100
 8002874:	200014a0 	.word	0x200014a0
		} else if(kapitablaTip == 2) {
 8002878:	4b3f      	ldr	r3, [pc, #252]	@ (8002978 <menu+0x13d0>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d104      	bne.n	800288a <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 8002880:	4a3e      	ldr	r2, [pc, #248]	@ (800297c <menu+0x13d4>)
 8002882:	2101      	movs	r1, #1
 8002884:	2002      	movs	r0, #2
 8002886:	f006 fb7f 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800288a:	2102      	movs	r1, #2
 800288c:	483c      	ldr	r0, [pc, #240]	@ (8002980 <menu+0x13d8>)
 800288e:	f007 fea5 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002892:	4603      	mov	r3, r0
 8002894:	2b01      	cmp	r3, #1
 8002896:	d115      	bne.n	80028c4 <menu+0x131c>
 8002898:	4b3a      	ldr	r3, [pc, #232]	@ (8002984 <menu+0x13dc>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	f083 0301 	eor.w	r3, r3, #1
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00e      	beq.n	80028c4 <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 80028a6:	4b34      	ldr	r3, [pc, #208]	@ (8002978 <menu+0x13d0>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	3301      	adds	r3, #1
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4b32      	ldr	r3, [pc, #200]	@ (8002978 <menu+0x13d0>)
 80028b0:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 80028b2:	4b31      	ldr	r3, [pc, #196]	@ (8002978 <menu+0x13d0>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d902      	bls.n	80028c0 <menu+0x1318>
				kapitablaTip = 0;
 80028ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002978 <menu+0x13d0>)
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028c0:	f001 fbb8 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028c4:	2104      	movs	r1, #4
 80028c6:	482e      	ldr	r0, [pc, #184]	@ (8002980 <menu+0x13d8>)
 80028c8:	f007 fe88 	bl	800a5dc <HAL_GPIO_ReadPin>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d115      	bne.n	80028fe <menu+0x1356>
 80028d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002984 <menu+0x13dc>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	f083 0301 	eor.w	r3, r3, #1
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d00e      	beq.n	80028fe <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 80028e0:	4b25      	ldr	r3, [pc, #148]	@ (8002978 <menu+0x13d0>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	3b01      	subs	r3, #1
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	4b23      	ldr	r3, [pc, #140]	@ (8002978 <menu+0x13d0>)
 80028ea:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 80028ec:	4b22      	ldr	r3, [pc, #136]	@ (8002978 <menu+0x13d0>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d902      	bls.n	80028fa <menu+0x1352>
		   		kapitablaTip = 2;
 80028f4:	4b20      	ldr	r3, [pc, #128]	@ (8002978 <menu+0x13d0>)
 80028f6:	2202      	movs	r2, #2
 80028f8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028fa:	f001 fb9b 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028fe:	2108      	movs	r1, #8
 8002900:	481f      	ldr	r0, [pc, #124]	@ (8002980 <menu+0x13d8>)
 8002902:	f007 fe6b 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002906:	4603      	mov	r3, r0
 8002908:	2b01      	cmp	r3, #1
 800290a:	d10d      	bne.n	8002928 <menu+0x1380>
 800290c:	4b1d      	ldr	r3, [pc, #116]	@ (8002984 <menu+0x13dc>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	f083 0301 	eor.w	r3, r3, #1
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d006      	beq.n	8002928 <menu+0x1380>
			eepromData[12] = kapitablaTip;
 800291a:	4b17      	ldr	r3, [pc, #92]	@ (8002978 <menu+0x13d0>)
 800291c:	781a      	ldrb	r2, [r3, #0]
 800291e:	4b1a      	ldr	r3, [pc, #104]	@ (8002988 <menu+0x13e0>)
 8002920:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002922:	4b1a      	ldr	r3, [pc, #104]	@ (800298c <menu+0x13e4>)
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002928:	4b19      	ldr	r3, [pc, #100]	@ (8002990 <menu+0x13e8>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b0e      	cmp	r3, #14
 800292e:	f040 80a3 	bne.w	8002a78 <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 8002932:	4a18      	ldr	r2, [pc, #96]	@ (8002994 <menu+0x13ec>)
 8002934:	2101      	movs	r1, #1
 8002936:	2001      	movs	r0, #1
 8002938:	f006 fb26 	bl	8008f88 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 800293c:	4b16      	ldr	r3, [pc, #88]	@ (8002998 <menu+0x13f0>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d105      	bne.n	8002950 <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 8002944:	4a15      	ldr	r2, [pc, #84]	@ (800299c <menu+0x13f4>)
 8002946:	2101      	movs	r1, #1
 8002948:	2002      	movs	r0, #2
 800294a:	f006 fb1d 	bl	8008f88 <lcd_print>
 800294e:	e034      	b.n	80029ba <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 8002950:	4b11      	ldr	r3, [pc, #68]	@ (8002998 <menu+0x13f0>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b01      	cmp	r3, #1
 8002956:	d105      	bne.n	8002964 <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 8002958:	4a11      	ldr	r2, [pc, #68]	@ (80029a0 <menu+0x13f8>)
 800295a:	2101      	movs	r1, #1
 800295c:	2002      	movs	r0, #2
 800295e:	f006 fb13 	bl	8008f88 <lcd_print>
 8002962:	e02a      	b.n	80029ba <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 8002964:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <menu+0x13f0>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b02      	cmp	r3, #2
 800296a:	d11d      	bne.n	80029a8 <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 800296c:	4a0d      	ldr	r2, [pc, #52]	@ (80029a4 <menu+0x13fc>)
 800296e:	2101      	movs	r1, #1
 8002970:	2002      	movs	r0, #2
 8002972:	f006 fb09 	bl	8008f88 <lcd_print>
 8002976:	e020      	b.n	80029ba <menu+0x1412>
 8002978:	200010c7 	.word	0x200010c7
 800297c:	20000114 	.word	0x20000114
 8002980:	40010800 	.word	0x40010800
 8002984:	200010ec 	.word	0x200010ec
 8002988:	20000fec 	.word	0x20000fec
 800298c:	200010e9 	.word	0x200010e9
 8002990:	200010bc 	.word	0x200010bc
 8002994:	20001518 	.word	0x20001518
 8002998:	200010c9 	.word	0x200010c9
 800299c:	2000152c 	.word	0x2000152c
 80029a0:	20001540 	.word	0x20001540
 80029a4:	20001554 	.word	0x20001554
		} else if(kapiTablaAcKonum == 3) {
 80029a8:	4b76      	ldr	r3, [pc, #472]	@ (8002b84 <menu+0x15dc>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d104      	bne.n	80029ba <menu+0x1412>
			lcd_print(2, 1, pasifText);
 80029b0:	4a75      	ldr	r2, [pc, #468]	@ (8002b88 <menu+0x15e0>)
 80029b2:	2101      	movs	r1, #1
 80029b4:	2002      	movs	r0, #2
 80029b6:	f006 fae7 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029ba:	2102      	movs	r1, #2
 80029bc:	4873      	ldr	r0, [pc, #460]	@ (8002b8c <menu+0x15e4>)
 80029be:	f007 fe0d 	bl	800a5dc <HAL_GPIO_ReadPin>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d115      	bne.n	80029f4 <menu+0x144c>
 80029c8:	4b71      	ldr	r3, [pc, #452]	@ (8002b90 <menu+0x15e8>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	f083 0301 	eor.w	r3, r3, #1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00e      	beq.n	80029f4 <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 80029d6:	4b6b      	ldr	r3, [pc, #428]	@ (8002b84 <menu+0x15dc>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	3301      	adds	r3, #1
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	4b69      	ldr	r3, [pc, #420]	@ (8002b84 <menu+0x15dc>)
 80029e0:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 80029e2:	4b68      	ldr	r3, [pc, #416]	@ (8002b84 <menu+0x15dc>)
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d902      	bls.n	80029f0 <menu+0x1448>
				kapiTablaAcKonum = 0;
 80029ea:	4b66      	ldr	r3, [pc, #408]	@ (8002b84 <menu+0x15dc>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029f0:	f001 fb20 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029f4:	2104      	movs	r1, #4
 80029f6:	4865      	ldr	r0, [pc, #404]	@ (8002b8c <menu+0x15e4>)
 80029f8:	f007 fdf0 	bl	800a5dc <HAL_GPIO_ReadPin>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d115      	bne.n	8002a2e <menu+0x1486>
 8002a02:	4b63      	ldr	r3, [pc, #396]	@ (8002b90 <menu+0x15e8>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	f083 0301 	eor.w	r3, r3, #1
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00e      	beq.n	8002a2e <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002a10:	4b5c      	ldr	r3, [pc, #368]	@ (8002b84 <menu+0x15dc>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b2da      	uxtb	r2, r3
 8002a18:	4b5a      	ldr	r3, [pc, #360]	@ (8002b84 <menu+0x15dc>)
 8002a1a:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002a1c:	4b59      	ldr	r3, [pc, #356]	@ (8002b84 <menu+0x15dc>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d902      	bls.n	8002a2a <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 8002a24:	4b57      	ldr	r3, [pc, #348]	@ (8002b84 <menu+0x15dc>)
 8002a26:	2202      	movs	r2, #2
 8002a28:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a2a:	f001 fb03 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a2e:	2108      	movs	r1, #8
 8002a30:	4856      	ldr	r0, [pc, #344]	@ (8002b8c <menu+0x15e4>)
 8002a32:	f007 fdd3 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d11d      	bne.n	8002a78 <menu+0x14d0>
 8002a3c:	4b54      	ldr	r3, [pc, #336]	@ (8002b90 <menu+0x15e8>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	f083 0301 	eor.w	r3, r3, #1
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d016      	beq.n	8002a78 <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 8002a4a:	4b4e      	ldr	r3, [pc, #312]	@ (8002b84 <menu+0x15dc>)
 8002a4c:	781a      	ldrb	r2, [r3, #0]
 8002a4e:	4b51      	ldr	r3, [pc, #324]	@ (8002b94 <menu+0x15ec>)
 8002a50:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002a54:	4b4b      	ldr	r3, [pc, #300]	@ (8002b84 <menu+0x15dc>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d003      	beq.n	8002a64 <menu+0x14bc>
 8002a5c:	4b49      	ldr	r3, [pc, #292]	@ (8002b84 <menu+0x15dc>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d106      	bne.n	8002a72 <menu+0x14ca>
				altLimit = 1;
 8002a64:	4b4c      	ldr	r3, [pc, #304]	@ (8002b98 <menu+0x15f0>)
 8002a66:	2201      	movs	r2, #1
 8002a68:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002a6a:	4b4b      	ldr	r3, [pc, #300]	@ (8002b98 <menu+0x15f0>)
 8002a6c:	781a      	ldrb	r2, [r3, #0]
 8002a6e:	4b49      	ldr	r3, [pc, #292]	@ (8002b94 <menu+0x15ec>)
 8002a70:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002a72:	4b4a      	ldr	r3, [pc, #296]	@ (8002b9c <menu+0x15f4>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002a78:	4b49      	ldr	r3, [pc, #292]	@ (8002ba0 <menu+0x15f8>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b0f      	cmp	r3, #15
 8002a7e:	d16c      	bne.n	8002b5a <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 8002a80:	4a48      	ldr	r2, [pc, #288]	@ (8002ba4 <menu+0x15fc>)
 8002a82:	2101      	movs	r1, #1
 8002a84:	2001      	movs	r0, #1
 8002a86:	f006 fa7f 	bl	8008f88 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002a8a:	4a47      	ldr	r2, [pc, #284]	@ (8002ba8 <menu+0x1600>)
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	2002      	movs	r0, #2
 8002a90:	f006 fa7a 	bl	8008f88 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002a94:	4b45      	ldr	r3, [pc, #276]	@ (8002bac <menu+0x1604>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	220a      	movs	r2, #10
 8002a9a:	4945      	ldr	r1, [pc, #276]	@ (8002bb0 <menu+0x1608>)
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f00a fdc9 	bl	800d634 <itoa>
		lcd_print(2,16,snum);
 8002aa2:	4a43      	ldr	r2, [pc, #268]	@ (8002bb0 <menu+0x1608>)
 8002aa4:	2110      	movs	r1, #16
 8002aa6:	2002      	movs	r0, #2
 8002aa8:	f006 fa6e 	bl	8008f88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002aac:	2102      	movs	r1, #2
 8002aae:	4837      	ldr	r0, [pc, #220]	@ (8002b8c <menu+0x15e4>)
 8002ab0:	f007 fd94 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d119      	bne.n	8002aee <menu+0x1546>
 8002aba:	4b35      	ldr	r3, [pc, #212]	@ (8002b90 <menu+0x15e8>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	f083 0301 	eor.w	r3, r3, #1
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d012      	beq.n	8002aee <menu+0x1546>
 8002ac8:	4b3a      	ldr	r3, [pc, #232]	@ (8002bb4 <menu+0x160c>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10e      	bne.n	8002aee <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8002ad0:	4b36      	ldr	r3, [pc, #216]	@ (8002bac <menu+0x1604>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	4b34      	ldr	r3, [pc, #208]	@ (8002bac <menu+0x1604>)
 8002ada:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002adc:	4b33      	ldr	r3, [pc, #204]	@ (8002bac <menu+0x1604>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	2b05      	cmp	r3, #5
 8002ae2:	d902      	bls.n	8002aea <menu+0x1542>
				kapiTablaAcSure = 0;
 8002ae4:	4b31      	ldr	r3, [pc, #196]	@ (8002bac <menu+0x1604>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002aea:	f001 faa3 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002aee:	2104      	movs	r1, #4
 8002af0:	4826      	ldr	r0, [pc, #152]	@ (8002b8c <menu+0x15e4>)
 8002af2:	f007 fd73 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d119      	bne.n	8002b30 <menu+0x1588>
 8002afc:	4b24      	ldr	r3, [pc, #144]	@ (8002b90 <menu+0x15e8>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	f083 0301 	eor.w	r3, r3, #1
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d012      	beq.n	8002b30 <menu+0x1588>
 8002b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb4 <menu+0x160c>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10e      	bne.n	8002b30 <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002b12:	4b26      	ldr	r3, [pc, #152]	@ (8002bac <menu+0x1604>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b2da      	uxtb	r2, r3
 8002b1a:	4b24      	ldr	r3, [pc, #144]	@ (8002bac <menu+0x1604>)
 8002b1c:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002b1e:	4b23      	ldr	r3, [pc, #140]	@ (8002bac <menu+0x1604>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b06      	cmp	r3, #6
 8002b24:	d902      	bls.n	8002b2c <menu+0x1584>
		   		kapiTablaAcSure = 5;
 8002b26:	4b21      	ldr	r3, [pc, #132]	@ (8002bac <menu+0x1604>)
 8002b28:	2205      	movs	r2, #5
 8002b2a:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002b2c:	f001 fa82 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b30:	2108      	movs	r1, #8
 8002b32:	4816      	ldr	r0, [pc, #88]	@ (8002b8c <menu+0x15e4>)
 8002b34:	f007 fd52 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d10d      	bne.n	8002b5a <menu+0x15b2>
 8002b3e:	4b14      	ldr	r3, [pc, #80]	@ (8002b90 <menu+0x15e8>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	f083 0301 	eor.w	r3, r3, #1
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d006      	beq.n	8002b5a <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 8002b4c:	4b17      	ldr	r3, [pc, #92]	@ (8002bac <menu+0x1604>)
 8002b4e:	781a      	ldrb	r2, [r3, #0]
 8002b50:	4b10      	ldr	r3, [pc, #64]	@ (8002b94 <menu+0x15ec>)
 8002b52:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002b54:	4b11      	ldr	r3, [pc, #68]	@ (8002b9c <menu+0x15f4>)
 8002b56:	2201      	movs	r2, #1
 8002b58:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8002b5a:	4b11      	ldr	r3, [pc, #68]	@ (8002ba0 <menu+0x15f8>)
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	2b10      	cmp	r3, #16
 8002b60:	f040 8086 	bne.w	8002c70 <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002b64:	4a14      	ldr	r2, [pc, #80]	@ (8002bb8 <menu+0x1610>)
 8002b66:	2101      	movs	r1, #1
 8002b68:	2001      	movs	r0, #1
 8002b6a:	f006 fa0d 	bl	8008f88 <lcd_print>

		if(yukariYavasLimit == 0) {
 8002b6e:	4b13      	ldr	r3, [pc, #76]	@ (8002bbc <menu+0x1614>)
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d124      	bne.n	8002bc0 <menu+0x1618>
			lcd_print(2, 1, pasifText);
 8002b76:	4a04      	ldr	r2, [pc, #16]	@ (8002b88 <menu+0x15e0>)
 8002b78:	2101      	movs	r1, #1
 8002b7a:	2002      	movs	r0, #2
 8002b7c:	f006 fa04 	bl	8008f88 <lcd_print>
 8002b80:	e027      	b.n	8002bd2 <menu+0x162a>
 8002b82:	bf00      	nop
 8002b84:	200010c9 	.word	0x200010c9
 8002b88:	2000139c 	.word	0x2000139c
 8002b8c:	40010800 	.word	0x40010800
 8002b90:	200010ec 	.word	0x200010ec
 8002b94:	20000fec 	.word	0x20000fec
 8002b98:	200010c2 	.word	0x200010c2
 8002b9c:	200010e9 	.word	0x200010e9
 8002ba0:	200010bc 	.word	0x200010bc
 8002ba4:	20001568 	.word	0x20001568
 8002ba8:	200014c8 	.word	0x200014c8
 8002bac:	200010d7 	.word	0x200010d7
 8002bb0:	2000105c 	.word	0x2000105c
 8002bb4:	200010c7 	.word	0x200010c7
 8002bb8:	2000157c 	.word	0x2000157c
 8002bbc:	200010ca 	.word	0x200010ca
		} else if(yukariYavasLimit == 1) {
 8002bc0:	4b84      	ldr	r3, [pc, #528]	@ (8002dd4 <menu+0x182c>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d104      	bne.n	8002bd2 <menu+0x162a>
			lcd_print(2, 1, aktifText);
 8002bc8:	4a83      	ldr	r2, [pc, #524]	@ (8002dd8 <menu+0x1830>)
 8002bca:	2101      	movs	r1, #1
 8002bcc:	2002      	movs	r0, #2
 8002bce:	f006 f9db 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bd2:	2102      	movs	r1, #2
 8002bd4:	4881      	ldr	r0, [pc, #516]	@ (8002ddc <menu+0x1834>)
 8002bd6:	f007 fd01 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d115      	bne.n	8002c0c <menu+0x1664>
 8002be0:	4b7f      	ldr	r3, [pc, #508]	@ (8002de0 <menu+0x1838>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	f083 0301 	eor.w	r3, r3, #1
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00e      	beq.n	8002c0c <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 8002bee:	4b79      	ldr	r3, [pc, #484]	@ (8002dd4 <menu+0x182c>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	4b77      	ldr	r3, [pc, #476]	@ (8002dd4 <menu+0x182c>)
 8002bf8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8002bfa:	4b76      	ldr	r3, [pc, #472]	@ (8002dd4 <menu+0x182c>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d902      	bls.n	8002c08 <menu+0x1660>
				yukariYavasLimit = 0;
 8002c02:	4b74      	ldr	r3, [pc, #464]	@ (8002dd4 <menu+0x182c>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c08:	f001 fa14 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c0c:	2104      	movs	r1, #4
 8002c0e:	4873      	ldr	r0, [pc, #460]	@ (8002ddc <menu+0x1834>)
 8002c10:	f007 fce4 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d115      	bne.n	8002c46 <menu+0x169e>
 8002c1a:	4b71      	ldr	r3, [pc, #452]	@ (8002de0 <menu+0x1838>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	f083 0301 	eor.w	r3, r3, #1
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00e      	beq.n	8002c46 <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002c28:	4b6a      	ldr	r3, [pc, #424]	@ (8002dd4 <menu+0x182c>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	4b68      	ldr	r3, [pc, #416]	@ (8002dd4 <menu+0x182c>)
 8002c32:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002c34:	4b67      	ldr	r3, [pc, #412]	@ (8002dd4 <menu+0x182c>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <menu+0x169a>
		   		yukariYavasLimit = 1;
 8002c3c:	4b65      	ldr	r3, [pc, #404]	@ (8002dd4 <menu+0x182c>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c42:	f001 f9f7 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c46:	2108      	movs	r1, #8
 8002c48:	4864      	ldr	r0, [pc, #400]	@ (8002ddc <menu+0x1834>)
 8002c4a:	f007 fcc7 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d10d      	bne.n	8002c70 <menu+0x16c8>
 8002c54:	4b62      	ldr	r3, [pc, #392]	@ (8002de0 <menu+0x1838>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	f083 0301 	eor.w	r3, r3, #1
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d006      	beq.n	8002c70 <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 8002c62:	4b5c      	ldr	r3, [pc, #368]	@ (8002dd4 <menu+0x182c>)
 8002c64:	781a      	ldrb	r2, [r3, #0]
 8002c66:	4b5f      	ldr	r3, [pc, #380]	@ (8002de4 <menu+0x183c>)
 8002c68:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002c6a:	4b5f      	ldr	r3, [pc, #380]	@ (8002de8 <menu+0x1840>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002c70:	4b5e      	ldr	r3, [pc, #376]	@ (8002dec <menu+0x1844>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b11      	cmp	r3, #17
 8002c76:	f040 808b 	bne.w	8002d90 <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 8002c7a:	4a5d      	ldr	r2, [pc, #372]	@ (8002df0 <menu+0x1848>)
 8002c7c:	2101      	movs	r1, #1
 8002c7e:	2001      	movs	r0, #1
 8002c80:	f006 f982 	bl	8008f88 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002c84:	4b5b      	ldr	r3, [pc, #364]	@ (8002df4 <menu+0x184c>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d105      	bne.n	8002c98 <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 8002c8c:	4a5a      	ldr	r2, [pc, #360]	@ (8002df8 <menu+0x1850>)
 8002c8e:	2101      	movs	r1, #1
 8002c90:	2002      	movs	r0, #2
 8002c92:	f006 f979 	bl	8008f88 <lcd_print>
 8002c96:	e012      	b.n	8002cbe <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 8002c98:	4b56      	ldr	r3, [pc, #344]	@ (8002df4 <menu+0x184c>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d105      	bne.n	8002cac <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 8002ca0:	4a56      	ldr	r2, [pc, #344]	@ (8002dfc <menu+0x1854>)
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	2002      	movs	r0, #2
 8002ca6:	f006 f96f 	bl	8008f88 <lcd_print>
 8002caa:	e008      	b.n	8002cbe <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 8002cac:	4b51      	ldr	r3, [pc, #324]	@ (8002df4 <menu+0x184c>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d104      	bne.n	8002cbe <menu+0x1716>
			lcd_print(2, 1, pasifText);
 8002cb4:	4a52      	ldr	r2, [pc, #328]	@ (8002e00 <menu+0x1858>)
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	2002      	movs	r0, #2
 8002cba:	f006 f965 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cbe:	2102      	movs	r1, #2
 8002cc0:	4846      	ldr	r0, [pc, #280]	@ (8002ddc <menu+0x1834>)
 8002cc2:	f007 fc8b 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d115      	bne.n	8002cf8 <menu+0x1750>
 8002ccc:	4b44      	ldr	r3, [pc, #272]	@ (8002de0 <menu+0x1838>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	f083 0301 	eor.w	r3, r3, #1
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d00e      	beq.n	8002cf8 <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002cda:	4b46      	ldr	r3, [pc, #280]	@ (8002df4 <menu+0x184c>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	4b44      	ldr	r3, [pc, #272]	@ (8002df4 <menu+0x184c>)
 8002ce4:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8002ce6:	4b43      	ldr	r3, [pc, #268]	@ (8002df4 <menu+0x184c>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d902      	bls.n	8002cf4 <menu+0x174c>
				devirmeYuruyusSecim = 0;
 8002cee:	4b41      	ldr	r3, [pc, #260]	@ (8002df4 <menu+0x184c>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cf4:	f001 f99e 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cf8:	2104      	movs	r1, #4
 8002cfa:	4838      	ldr	r0, [pc, #224]	@ (8002ddc <menu+0x1834>)
 8002cfc:	f007 fc6e 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d115      	bne.n	8002d32 <menu+0x178a>
 8002d06:	4b36      	ldr	r3, [pc, #216]	@ (8002de0 <menu+0x1838>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	f083 0301 	eor.w	r3, r3, #1
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00e      	beq.n	8002d32 <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002d14:	4b37      	ldr	r3, [pc, #220]	@ (8002df4 <menu+0x184c>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	4b35      	ldr	r3, [pc, #212]	@ (8002df4 <menu+0x184c>)
 8002d1e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002d20:	4b34      	ldr	r3, [pc, #208]	@ (8002df4 <menu+0x184c>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b03      	cmp	r3, #3
 8002d26:	d902      	bls.n	8002d2e <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 8002d28:	4b32      	ldr	r3, [pc, #200]	@ (8002df4 <menu+0x184c>)
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d2e:	f001 f981 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d32:	2108      	movs	r1, #8
 8002d34:	4829      	ldr	r0, [pc, #164]	@ (8002ddc <menu+0x1834>)
 8002d36:	f007 fc51 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d127      	bne.n	8002d90 <menu+0x17e8>
 8002d40:	4b27      	ldr	r3, [pc, #156]	@ (8002de0 <menu+0x1838>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	f083 0301 	eor.w	r3, r3, #1
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d020      	beq.n	8002d90 <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 8002d4e:	4b29      	ldr	r3, [pc, #164]	@ (8002df4 <menu+0x184c>)
 8002d50:	781a      	ldrb	r2, [r3, #0]
 8002d52:	4b24      	ldr	r3, [pc, #144]	@ (8002de4 <menu+0x183c>)
 8002d54:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002d56:	4b27      	ldr	r3, [pc, #156]	@ (8002df4 <menu+0x184c>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d003      	beq.n	8002d66 <menu+0x17be>
 8002d5e:	4b25      	ldr	r3, [pc, #148]	@ (8002df4 <menu+0x184c>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d106      	bne.n	8002d74 <menu+0x17cc>
				calismaSekli = 0;
 8002d66:	4b27      	ldr	r3, [pc, #156]	@ (8002e04 <menu+0x185c>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002d6c:	4b25      	ldr	r3, [pc, #148]	@ (8002e04 <menu+0x185c>)
 8002d6e:	781a      	ldrb	r2, [r3, #0]
 8002d70:	4b1c      	ldr	r3, [pc, #112]	@ (8002de4 <menu+0x183c>)
 8002d72:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002d74:	4b1f      	ldr	r3, [pc, #124]	@ (8002df4 <menu+0x184c>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d106      	bne.n	8002d8a <menu+0x17e2>
				devirmeSilindirTipi = 1;
 8002d7c:	4b22      	ldr	r3, [pc, #136]	@ (8002e08 <menu+0x1860>)
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002d82:	4b21      	ldr	r3, [pc, #132]	@ (8002e08 <menu+0x1860>)
 8002d84:	781a      	ldrb	r2, [r3, #0]
 8002d86:	4b17      	ldr	r3, [pc, #92]	@ (8002de4 <menu+0x183c>)
 8002d88:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002d8a:	4b17      	ldr	r3, [pc, #92]	@ (8002de8 <menu+0x1840>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002d90:	4b16      	ldr	r3, [pc, #88]	@ (8002dec <menu+0x1844>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b12      	cmp	r3, #18
 8002d96:	f040 8097 	bne.w	8002ec8 <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 8002d9a:	4b16      	ldr	r3, [pc, #88]	@ (8002df4 <menu+0x184c>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d105      	bne.n	8002dae <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 8002da2:	4a1a      	ldr	r2, [pc, #104]	@ (8002e0c <menu+0x1864>)
 8002da4:	2101      	movs	r1, #1
 8002da6:	2001      	movs	r0, #1
 8002da8:	f006 f8ee 	bl	8008f88 <lcd_print>
 8002dac:	e008      	b.n	8002dc0 <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 8002dae:	4b11      	ldr	r3, [pc, #68]	@ (8002df4 <menu+0x184c>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d104      	bne.n	8002dc0 <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 8002db6:	4a16      	ldr	r2, [pc, #88]	@ (8002e10 <menu+0x1868>)
 8002db8:	2101      	movs	r1, #1
 8002dba:	2001      	movs	r0, #1
 8002dbc:	f006 f8e4 	bl	8008f88 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002dc0:	4b14      	ldr	r3, [pc, #80]	@ (8002e14 <menu+0x186c>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d127      	bne.n	8002e18 <menu+0x1870>
			lcd_print(2, 1, pasifText);
 8002dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e00 <menu+0x1858>)
 8002dca:	2101      	movs	r1, #1
 8002dcc:	2002      	movs	r0, #2
 8002dce:	f006 f8db 	bl	8008f88 <lcd_print>
 8002dd2:	e02a      	b.n	8002e2a <menu+0x1882>
 8002dd4:	200010ca 	.word	0x200010ca
 8002dd8:	200013b0 	.word	0x200013b0
 8002ddc:	40010800 	.word	0x40010800
 8002de0:	200010ec 	.word	0x200010ec
 8002de4:	20000fec 	.word	0x20000fec
 8002de8:	200010e9 	.word	0x200010e9
 8002dec:	200010bc 	.word	0x200010bc
 8002df0:	20001590 	.word	0x20001590
 8002df4:	200010cb 	.word	0x200010cb
 8002df8:	200015a4 	.word	0x200015a4
 8002dfc:	200015b8 	.word	0x200015b8
 8002e00:	2000139c 	.word	0x2000139c
 8002e04:	200010bd 	.word	0x200010bd
 8002e08:	200010ce 	.word	0x200010ce
 8002e0c:	200015cc 	.word	0x200015cc
 8002e10:	200015e0 	.word	0x200015e0
 8002e14:	200010cc 	.word	0x200010cc
		} else if(devirmeYukariIleriLimit == 1){
 8002e18:	4b79      	ldr	r3, [pc, #484]	@ (8003000 <menu+0x1a58>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d104      	bne.n	8002e2a <menu+0x1882>
			lcd_print(2, 1, aktifText);
 8002e20:	4a78      	ldr	r2, [pc, #480]	@ (8003004 <menu+0x1a5c>)
 8002e22:	2101      	movs	r1, #1
 8002e24:	2002      	movs	r0, #2
 8002e26:	f006 f8af 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	4876      	ldr	r0, [pc, #472]	@ (8003008 <menu+0x1a60>)
 8002e2e:	f007 fbd5 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d115      	bne.n	8002e64 <menu+0x18bc>
 8002e38:	4b74      	ldr	r3, [pc, #464]	@ (800300c <menu+0x1a64>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	f083 0301 	eor.w	r3, r3, #1
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00e      	beq.n	8002e64 <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002e46:	4b6e      	ldr	r3, [pc, #440]	@ (8003000 <menu+0x1a58>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	4b6c      	ldr	r3, [pc, #432]	@ (8003000 <menu+0x1a58>)
 8002e50:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002e52:	4b6b      	ldr	r3, [pc, #428]	@ (8003000 <menu+0x1a58>)
 8002e54:	781b      	ldrb	r3, [r3, #0]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d902      	bls.n	8002e60 <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 8002e5a:	4b69      	ldr	r3, [pc, #420]	@ (8003000 <menu+0x1a58>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002e60:	f001 f8e8 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e64:	2104      	movs	r1, #4
 8002e66:	4868      	ldr	r0, [pc, #416]	@ (8003008 <menu+0x1a60>)
 8002e68:	f007 fbb8 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d115      	bne.n	8002e9e <menu+0x18f6>
 8002e72:	4b66      	ldr	r3, [pc, #408]	@ (800300c <menu+0x1a64>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	f083 0301 	eor.w	r3, r3, #1
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00e      	beq.n	8002e9e <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002e80:	4b5f      	ldr	r3, [pc, #380]	@ (8003000 <menu+0x1a58>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b2da      	uxtb	r2, r3
 8002e88:	4b5d      	ldr	r3, [pc, #372]	@ (8003000 <menu+0x1a58>)
 8002e8a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002e8c:	4b5c      	ldr	r3, [pc, #368]	@ (8003000 <menu+0x1a58>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 8002e94:	4b5a      	ldr	r3, [pc, #360]	@ (8003000 <menu+0x1a58>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e9a:	f001 f8cb 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e9e:	2108      	movs	r1, #8
 8002ea0:	4859      	ldr	r0, [pc, #356]	@ (8003008 <menu+0x1a60>)
 8002ea2:	f007 fb9b 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d10d      	bne.n	8002ec8 <menu+0x1920>
 8002eac:	4b57      	ldr	r3, [pc, #348]	@ (800300c <menu+0x1a64>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	f083 0301 	eor.w	r3, r3, #1
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d006      	beq.n	8002ec8 <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 8002eba:	4b51      	ldr	r3, [pc, #324]	@ (8003000 <menu+0x1a58>)
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	4b54      	ldr	r3, [pc, #336]	@ (8003010 <menu+0x1a68>)
 8002ec0:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002ec2:	4b54      	ldr	r3, [pc, #336]	@ (8003014 <menu+0x1a6c>)
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002ec8:	4b53      	ldr	r3, [pc, #332]	@ (8003018 <menu+0x1a70>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b13      	cmp	r3, #19
 8002ece:	d174      	bne.n	8002fba <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 8002ed0:	4b52      	ldr	r3, [pc, #328]	@ (800301c <menu+0x1a74>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d105      	bne.n	8002ee4 <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002ed8:	4a51      	ldr	r2, [pc, #324]	@ (8003020 <menu+0x1a78>)
 8002eda:	2101      	movs	r1, #1
 8002edc:	2001      	movs	r0, #1
 8002ede:	f006 f853 	bl	8008f88 <lcd_print>
 8002ee2:	e008      	b.n	8002ef6 <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 8002ee4:	4b4d      	ldr	r3, [pc, #308]	@ (800301c <menu+0x1a74>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d104      	bne.n	8002ef6 <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002eec:	4a4d      	ldr	r2, [pc, #308]	@ (8003024 <menu+0x1a7c>)
 8002eee:	2101      	movs	r1, #1
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	f006 f849 	bl	8008f88 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002ef6:	4b4c      	ldr	r3, [pc, #304]	@ (8003028 <menu+0x1a80>)
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d105      	bne.n	8002f0a <menu+0x1962>
			lcd_print(2, 1, pasifText);
 8002efe:	4a4b      	ldr	r2, [pc, #300]	@ (800302c <menu+0x1a84>)
 8002f00:	2101      	movs	r1, #1
 8002f02:	2002      	movs	r0, #2
 8002f04:	f006 f840 	bl	8008f88 <lcd_print>
 8002f08:	e008      	b.n	8002f1c <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002f0a:	4b47      	ldr	r3, [pc, #284]	@ (8003028 <menu+0x1a80>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d104      	bne.n	8002f1c <menu+0x1974>
			lcd_print(2, 1, aktifText);
 8002f12:	4a3c      	ldr	r2, [pc, #240]	@ (8003004 <menu+0x1a5c>)
 8002f14:	2101      	movs	r1, #1
 8002f16:	2002      	movs	r0, #2
 8002f18:	f006 f836 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f1c:	2102      	movs	r1, #2
 8002f1e:	483a      	ldr	r0, [pc, #232]	@ (8003008 <menu+0x1a60>)
 8002f20:	f007 fb5c 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d115      	bne.n	8002f56 <menu+0x19ae>
 8002f2a:	4b38      	ldr	r3, [pc, #224]	@ (800300c <menu+0x1a64>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	f083 0301 	eor.w	r3, r3, #1
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00e      	beq.n	8002f56 <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002f38:	4b3b      	ldr	r3, [pc, #236]	@ (8003028 <menu+0x1a80>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	4b39      	ldr	r3, [pc, #228]	@ (8003028 <menu+0x1a80>)
 8002f42:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002f44:	4b38      	ldr	r3, [pc, #224]	@ (8003028 <menu+0x1a80>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d902      	bls.n	8002f52 <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 8002f4c:	4b36      	ldr	r3, [pc, #216]	@ (8003028 <menu+0x1a80>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f52:	f001 f86f 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f56:	2104      	movs	r1, #4
 8002f58:	482b      	ldr	r0, [pc, #172]	@ (8003008 <menu+0x1a60>)
 8002f5a:	f007 fb3f 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d115      	bne.n	8002f90 <menu+0x19e8>
 8002f64:	4b29      	ldr	r3, [pc, #164]	@ (800300c <menu+0x1a64>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	f083 0301 	eor.w	r3, r3, #1
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00e      	beq.n	8002f90 <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002f72:	4b2d      	ldr	r3, [pc, #180]	@ (8003028 <menu+0x1a80>)
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	4b2b      	ldr	r3, [pc, #172]	@ (8003028 <menu+0x1a80>)
 8002f7c:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002f7e:	4b2a      	ldr	r3, [pc, #168]	@ (8003028 <menu+0x1a80>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 8002f86:	4b28      	ldr	r3, [pc, #160]	@ (8003028 <menu+0x1a80>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f8c:	f001 f852 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f90:	2108      	movs	r1, #8
 8002f92:	481d      	ldr	r0, [pc, #116]	@ (8003008 <menu+0x1a60>)
 8002f94:	f007 fb22 	bl	800a5dc <HAL_GPIO_ReadPin>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d10d      	bne.n	8002fba <menu+0x1a12>
 8002f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800300c <menu+0x1a64>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	f083 0301 	eor.w	r3, r3, #1
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d006      	beq.n	8002fba <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002fac:	4b1e      	ldr	r3, [pc, #120]	@ (8003028 <menu+0x1a80>)
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	4b17      	ldr	r3, [pc, #92]	@ (8003010 <menu+0x1a68>)
 8002fb2:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002fb4:	4b17      	ldr	r3, [pc, #92]	@ (8003014 <menu+0x1a6c>)
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002fba:	4b17      	ldr	r3, [pc, #92]	@ (8003018 <menu+0x1a70>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b14      	cmp	r3, #20
 8002fc0:	f040 809e 	bne.w	8003100 <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 8002fc4:	4b15      	ldr	r3, [pc, #84]	@ (800301c <menu+0x1a74>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d105      	bne.n	8002fd8 <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 8002fcc:	4a18      	ldr	r2, [pc, #96]	@ (8003030 <menu+0x1a88>)
 8002fce:	2101      	movs	r1, #1
 8002fd0:	2001      	movs	r0, #1
 8002fd2:	f005 ffd9 	bl	8008f88 <lcd_print>
 8002fd6:	e008      	b.n	8002fea <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 8002fd8:	4b10      	ldr	r3, [pc, #64]	@ (800301c <menu+0x1a74>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d104      	bne.n	8002fea <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8002fe0:	4a14      	ldr	r2, [pc, #80]	@ (8003034 <menu+0x1a8c>)
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	f005 ffcf 	bl	8008f88 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002fea:	4b13      	ldr	r3, [pc, #76]	@ (8003038 <menu+0x1a90>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d126      	bne.n	8003040 <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 8002ff2:	4a12      	ldr	r2, [pc, #72]	@ (800303c <menu+0x1a94>)
 8002ff4:	2101      	movs	r1, #1
 8002ff6:	2002      	movs	r0, #2
 8002ff8:	f005 ffc6 	bl	8008f88 <lcd_print>
 8002ffc:	e029      	b.n	8003052 <menu+0x1aaa>
 8002ffe:	bf00      	nop
 8003000:	200010cc 	.word	0x200010cc
 8003004:	200013b0 	.word	0x200013b0
 8003008:	40010800 	.word	0x40010800
 800300c:	200010ec 	.word	0x200010ec
 8003010:	20000fec 	.word	0x20000fec
 8003014:	200010e9 	.word	0x200010e9
 8003018:	200010bc 	.word	0x200010bc
 800301c:	200010cb 	.word	0x200010cb
 8003020:	200015f4 	.word	0x200015f4
 8003024:	20001608 	.word	0x20001608
 8003028:	200010cd 	.word	0x200010cd
 800302c:	2000139c 	.word	0x2000139c
 8003030:	2000161c 	.word	0x2000161c
 8003034:	20001630 	.word	0x20001630
 8003038:	200010ce 	.word	0x200010ce
 800303c:	20001644 	.word	0x20001644
		} else if(devirmeSilindirTipi == 1) {
 8003040:	4b39      	ldr	r3, [pc, #228]	@ (8003128 <menu+0x1b80>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d104      	bne.n	8003052 <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 8003048:	4a38      	ldr	r2, [pc, #224]	@ (800312c <menu+0x1b84>)
 800304a:	2101      	movs	r1, #1
 800304c:	2002      	movs	r0, #2
 800304e:	f005 ff9b 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003052:	2102      	movs	r1, #2
 8003054:	4836      	ldr	r0, [pc, #216]	@ (8003130 <menu+0x1b88>)
 8003056:	f007 fac1 	bl	800a5dc <HAL_GPIO_ReadPin>
 800305a:	4603      	mov	r3, r0
 800305c:	2b01      	cmp	r3, #1
 800305e:	d119      	bne.n	8003094 <menu+0x1aec>
 8003060:	4b34      	ldr	r3, [pc, #208]	@ (8003134 <menu+0x1b8c>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	f083 0301 	eor.w	r3, r3, #1
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d012      	beq.n	8003094 <menu+0x1aec>
 800306e:	4b32      	ldr	r3, [pc, #200]	@ (8003138 <menu+0x1b90>)
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	2b02      	cmp	r3, #2
 8003074:	d10e      	bne.n	8003094 <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003076:	4b2c      	ldr	r3, [pc, #176]	@ (8003128 <menu+0x1b80>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	3301      	adds	r3, #1
 800307c:	b2da      	uxtb	r2, r3
 800307e:	4b2a      	ldr	r3, [pc, #168]	@ (8003128 <menu+0x1b80>)
 8003080:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003082:	4b29      	ldr	r3, [pc, #164]	@ (8003128 <menu+0x1b80>)
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b01      	cmp	r3, #1
 8003088:	d902      	bls.n	8003090 <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 800308a:	4b27      	ldr	r3, [pc, #156]	@ (8003128 <menu+0x1b80>)
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003090:	f000 ffd0 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003094:	2104      	movs	r1, #4
 8003096:	4826      	ldr	r0, [pc, #152]	@ (8003130 <menu+0x1b88>)
 8003098:	f007 faa0 	bl	800a5dc <HAL_GPIO_ReadPin>
 800309c:	4603      	mov	r3, r0
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d119      	bne.n	80030d6 <menu+0x1b2e>
 80030a2:	4b24      	ldr	r3, [pc, #144]	@ (8003134 <menu+0x1b8c>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	f083 0301 	eor.w	r3, r3, #1
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d012      	beq.n	80030d6 <menu+0x1b2e>
 80030b0:	4b21      	ldr	r3, [pc, #132]	@ (8003138 <menu+0x1b90>)
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d10e      	bne.n	80030d6 <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 80030b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003128 <menu+0x1b80>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	3b01      	subs	r3, #1
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	4b19      	ldr	r3, [pc, #100]	@ (8003128 <menu+0x1b80>)
 80030c2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80030c4:	4b18      	ldr	r3, [pc, #96]	@ (8003128 <menu+0x1b80>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d002      	beq.n	80030d2 <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 80030cc:	4b16      	ldr	r3, [pc, #88]	@ (8003128 <menu+0x1b80>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030d2:	f000 ffaf 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030d6:	2108      	movs	r1, #8
 80030d8:	4815      	ldr	r0, [pc, #84]	@ (8003130 <menu+0x1b88>)
 80030da:	f007 fa7f 	bl	800a5dc <HAL_GPIO_ReadPin>
 80030de:	4603      	mov	r3, r0
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d10d      	bne.n	8003100 <menu+0x1b58>
 80030e4:	4b13      	ldr	r3, [pc, #76]	@ (8003134 <menu+0x1b8c>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	f083 0301 	eor.w	r3, r3, #1
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d006      	beq.n	8003100 <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 80030f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003128 <menu+0x1b80>)
 80030f4:	781a      	ldrb	r2, [r3, #0]
 80030f6:	4b11      	ldr	r3, [pc, #68]	@ (800313c <menu+0x1b94>)
 80030f8:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80030fa:	4b11      	ldr	r3, [pc, #68]	@ (8003140 <menu+0x1b98>)
 80030fc:	2201      	movs	r2, #1
 80030fe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003100:	4b10      	ldr	r3, [pc, #64]	@ (8003144 <menu+0x1b9c>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b15      	cmp	r3, #21
 8003106:	f040 8088 	bne.w	800321a <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 800310a:	4a0f      	ldr	r2, [pc, #60]	@ (8003148 <menu+0x1ba0>)
 800310c:	2101      	movs	r1, #1
 800310e:	2001      	movs	r0, #1
 8003110:	f005 ff3a 	bl	8008f88 <lcd_print>

		if(platformSilindirTipi == 0) {
 8003114:	4b0d      	ldr	r3, [pc, #52]	@ (800314c <menu+0x1ba4>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d11b      	bne.n	8003154 <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 800311c:	4a0c      	ldr	r2, [pc, #48]	@ (8003150 <menu+0x1ba8>)
 800311e:	2101      	movs	r1, #1
 8003120:	2002      	movs	r0, #2
 8003122:	f005 ff31 	bl	8008f88 <lcd_print>
 8003126:	e01e      	b.n	8003166 <menu+0x1bbe>
 8003128:	200010ce 	.word	0x200010ce
 800312c:	20001658 	.word	0x20001658
 8003130:	40010800 	.word	0x40010800
 8003134:	200010ec 	.word	0x200010ec
 8003138:	200010cb 	.word	0x200010cb
 800313c:	20000fec 	.word	0x20000fec
 8003140:	200010e9 	.word	0x200010e9
 8003144:	200010bc 	.word	0x200010bc
 8003148:	2000166c 	.word	0x2000166c
 800314c:	200010cf 	.word	0x200010cf
 8003150:	20001644 	.word	0x20001644
		} else if(platformSilindirTipi == 1) {
 8003154:	4ba1      	ldr	r3, [pc, #644]	@ (80033dc <menu+0x1e34>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d104      	bne.n	8003166 <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 800315c:	4aa0      	ldr	r2, [pc, #640]	@ (80033e0 <menu+0x1e38>)
 800315e:	2101      	movs	r1, #1
 8003160:	2002      	movs	r0, #2
 8003162:	f005 ff11 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003166:	2102      	movs	r1, #2
 8003168:	489e      	ldr	r0, [pc, #632]	@ (80033e4 <menu+0x1e3c>)
 800316a:	f007 fa37 	bl	800a5dc <HAL_GPIO_ReadPin>
 800316e:	4603      	mov	r3, r0
 8003170:	2b01      	cmp	r3, #1
 8003172:	d115      	bne.n	80031a0 <menu+0x1bf8>
 8003174:	4b9c      	ldr	r3, [pc, #624]	@ (80033e8 <menu+0x1e40>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	f083 0301 	eor.w	r3, r3, #1
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00e      	beq.n	80031a0 <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003182:	4b96      	ldr	r3, [pc, #600]	@ (80033dc <menu+0x1e34>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	3301      	adds	r3, #1
 8003188:	b2da      	uxtb	r2, r3
 800318a:	4b94      	ldr	r3, [pc, #592]	@ (80033dc <menu+0x1e34>)
 800318c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800318e:	4b93      	ldr	r3, [pc, #588]	@ (80033dc <menu+0x1e34>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d902      	bls.n	800319c <menu+0x1bf4>
				platformSilindirTipi = 0;
 8003196:	4b91      	ldr	r3, [pc, #580]	@ (80033dc <menu+0x1e34>)
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800319c:	f000 ff4a 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031a0:	2104      	movs	r1, #4
 80031a2:	4890      	ldr	r0, [pc, #576]	@ (80033e4 <menu+0x1e3c>)
 80031a4:	f007 fa1a 	bl	800a5dc <HAL_GPIO_ReadPin>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d115      	bne.n	80031da <menu+0x1c32>
 80031ae:	4b8e      	ldr	r3, [pc, #568]	@ (80033e8 <menu+0x1e40>)
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	f083 0301 	eor.w	r3, r3, #1
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00e      	beq.n	80031da <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 80031bc:	4b87      	ldr	r3, [pc, #540]	@ (80033dc <menu+0x1e34>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	4b85      	ldr	r3, [pc, #532]	@ (80033dc <menu+0x1e34>)
 80031c6:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80031c8:	4b84      	ldr	r3, [pc, #528]	@ (80033dc <menu+0x1e34>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 80031d0:	4b82      	ldr	r3, [pc, #520]	@ (80033dc <menu+0x1e34>)
 80031d2:	2201      	movs	r2, #1
 80031d4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031d6:	f000 ff2d 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031da:	2108      	movs	r1, #8
 80031dc:	4881      	ldr	r0, [pc, #516]	@ (80033e4 <menu+0x1e3c>)
 80031de:	f007 f9fd 	bl	800a5dc <HAL_GPIO_ReadPin>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d118      	bne.n	800321a <menu+0x1c72>
 80031e8:	4b7f      	ldr	r3, [pc, #508]	@ (80033e8 <menu+0x1e40>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	f083 0301 	eor.w	r3, r3, #1
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d011      	beq.n	800321a <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 80031f6:	4b79      	ldr	r3, [pc, #484]	@ (80033dc <menu+0x1e34>)
 80031f8:	781a      	ldrb	r2, [r3, #0]
 80031fa:	4b7c      	ldr	r3, [pc, #496]	@ (80033ec <menu+0x1e44>)
 80031fc:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 80031fe:	4b77      	ldr	r3, [pc, #476]	@ (80033dc <menu+0x1e34>)
 8003200:	781b      	ldrb	r3, [r3, #0]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d106      	bne.n	8003214 <menu+0x1c6c>
				altLimit = 1;
 8003206:	4b7a      	ldr	r3, [pc, #488]	@ (80033f0 <menu+0x1e48>)
 8003208:	2201      	movs	r2, #1
 800320a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800320c:	4b78      	ldr	r3, [pc, #480]	@ (80033f0 <menu+0x1e48>)
 800320e:	781a      	ldrb	r2, [r3, #0]
 8003210:	4b76      	ldr	r3, [pc, #472]	@ (80033ec <menu+0x1e44>)
 8003212:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003214:	4b77      	ldr	r3, [pc, #476]	@ (80033f4 <menu+0x1e4c>)
 8003216:	2201      	movs	r2, #1
 8003218:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 800321a:	4b77      	ldr	r3, [pc, #476]	@ (80033f8 <menu+0x1e50>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b16      	cmp	r3, #22
 8003220:	d164      	bne.n	80032ec <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 8003222:	4a76      	ldr	r2, [pc, #472]	@ (80033fc <menu+0x1e54>)
 8003224:	2101      	movs	r1, #1
 8003226:	2001      	movs	r0, #1
 8003228:	f005 feae 	bl	8008f88 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 800322c:	4a74      	ldr	r2, [pc, #464]	@ (8003400 <menu+0x1e58>)
 800322e:	2101      	movs	r1, #1
 8003230:	2002      	movs	r0, #2
 8003232:	f005 fea9 	bl	8008f88 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 8003236:	4b73      	ldr	r3, [pc, #460]	@ (8003404 <menu+0x1e5c>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	220a      	movs	r2, #10
 800323c:	4972      	ldr	r1, [pc, #456]	@ (8003408 <menu+0x1e60>)
 800323e:	4618      	mov	r0, r3
 8003240:	f00a f9f8 	bl	800d634 <itoa>
		lcd_print(2,16,snum);
 8003244:	4a70      	ldr	r2, [pc, #448]	@ (8003408 <menu+0x1e60>)
 8003246:	2110      	movs	r1, #16
 8003248:	2002      	movs	r0, #2
 800324a:	f005 fe9d 	bl	8008f88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800324e:	2102      	movs	r1, #2
 8003250:	4864      	ldr	r0, [pc, #400]	@ (80033e4 <menu+0x1e3c>)
 8003252:	f007 f9c3 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003256:	4603      	mov	r3, r0
 8003258:	2b01      	cmp	r3, #1
 800325a:	d115      	bne.n	8003288 <menu+0x1ce0>
 800325c:	4b62      	ldr	r3, [pc, #392]	@ (80033e8 <menu+0x1e40>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	f083 0301 	eor.w	r3, r3, #1
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00e      	beq.n	8003288 <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 800326a:	4b66      	ldr	r3, [pc, #408]	@ (8003404 <menu+0x1e5c>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	3301      	adds	r3, #1
 8003270:	b2da      	uxtb	r2, r3
 8003272:	4b64      	ldr	r3, [pc, #400]	@ (8003404 <menu+0x1e5c>)
 8003274:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003276:	4b63      	ldr	r3, [pc, #396]	@ (8003404 <menu+0x1e5c>)
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b05      	cmp	r3, #5
 800327c:	d902      	bls.n	8003284 <menu+0x1cdc>
				yukariValfTmr = 0;
 800327e:	4b61      	ldr	r3, [pc, #388]	@ (8003404 <menu+0x1e5c>)
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003284:	f000 fed6 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003288:	2104      	movs	r1, #4
 800328a:	4856      	ldr	r0, [pc, #344]	@ (80033e4 <menu+0x1e3c>)
 800328c:	f007 f9a6 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003290:	4603      	mov	r3, r0
 8003292:	2b01      	cmp	r3, #1
 8003294:	d115      	bne.n	80032c2 <menu+0x1d1a>
 8003296:	4b54      	ldr	r3, [pc, #336]	@ (80033e8 <menu+0x1e40>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	f083 0301 	eor.w	r3, r3, #1
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00e      	beq.n	80032c2 <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 80032a4:	4b57      	ldr	r3, [pc, #348]	@ (8003404 <menu+0x1e5c>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	4b55      	ldr	r3, [pc, #340]	@ (8003404 <menu+0x1e5c>)
 80032ae:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 80032b0:	4b54      	ldr	r3, [pc, #336]	@ (8003404 <menu+0x1e5c>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b06      	cmp	r3, #6
 80032b6:	d902      	bls.n	80032be <menu+0x1d16>
		   		yukariValfTmr = 5;
 80032b8:	4b52      	ldr	r3, [pc, #328]	@ (8003404 <menu+0x1e5c>)
 80032ba:	2205      	movs	r2, #5
 80032bc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032be:	f000 feb9 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032c2:	2108      	movs	r1, #8
 80032c4:	4847      	ldr	r0, [pc, #284]	@ (80033e4 <menu+0x1e3c>)
 80032c6:	f007 f989 	bl	800a5dc <HAL_GPIO_ReadPin>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d10d      	bne.n	80032ec <menu+0x1d44>
 80032d0:	4b45      	ldr	r3, [pc, #276]	@ (80033e8 <menu+0x1e40>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	f083 0301 	eor.w	r3, r3, #1
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d006      	beq.n	80032ec <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 80032de:	4b49      	ldr	r3, [pc, #292]	@ (8003404 <menu+0x1e5c>)
 80032e0:	781a      	ldrb	r2, [r3, #0]
 80032e2:	4b42      	ldr	r3, [pc, #264]	@ (80033ec <menu+0x1e44>)
 80032e4:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 80032e6:	4b43      	ldr	r3, [pc, #268]	@ (80033f4 <menu+0x1e4c>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 80032ec:	4b42      	ldr	r3, [pc, #264]	@ (80033f8 <menu+0x1e50>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b17      	cmp	r3, #23
 80032f2:	d164      	bne.n	80033be <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 80032f4:	4a45      	ldr	r2, [pc, #276]	@ (800340c <menu+0x1e64>)
 80032f6:	2101      	movs	r1, #1
 80032f8:	2001      	movs	r0, #1
 80032fa:	f005 fe45 	bl	8008f88 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 80032fe:	4a40      	ldr	r2, [pc, #256]	@ (8003400 <menu+0x1e58>)
 8003300:	2101      	movs	r1, #1
 8003302:	2002      	movs	r0, #2
 8003304:	f005 fe40 	bl	8008f88 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 8003308:	4b41      	ldr	r3, [pc, #260]	@ (8003410 <menu+0x1e68>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	220a      	movs	r2, #10
 800330e:	493e      	ldr	r1, [pc, #248]	@ (8003408 <menu+0x1e60>)
 8003310:	4618      	mov	r0, r3
 8003312:	f00a f98f 	bl	800d634 <itoa>
		lcd_print(2,16,snum);
 8003316:	4a3c      	ldr	r2, [pc, #240]	@ (8003408 <menu+0x1e60>)
 8003318:	2110      	movs	r1, #16
 800331a:	2002      	movs	r0, #2
 800331c:	f005 fe34 	bl	8008f88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003320:	2102      	movs	r1, #2
 8003322:	4830      	ldr	r0, [pc, #192]	@ (80033e4 <menu+0x1e3c>)
 8003324:	f007 f95a 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003328:	4603      	mov	r3, r0
 800332a:	2b01      	cmp	r3, #1
 800332c:	d115      	bne.n	800335a <menu+0x1db2>
 800332e:	4b2e      	ldr	r3, [pc, #184]	@ (80033e8 <menu+0x1e40>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	f083 0301 	eor.w	r3, r3, #1
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00e      	beq.n	800335a <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 800333c:	4b34      	ldr	r3, [pc, #208]	@ (8003410 <menu+0x1e68>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	3301      	adds	r3, #1
 8003342:	b2da      	uxtb	r2, r3
 8003344:	4b32      	ldr	r3, [pc, #200]	@ (8003410 <menu+0x1e68>)
 8003346:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003348:	4b31      	ldr	r3, [pc, #196]	@ (8003410 <menu+0x1e68>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b05      	cmp	r3, #5
 800334e:	d902      	bls.n	8003356 <menu+0x1dae>
				asagiValfTmr = 0;
 8003350:	4b2f      	ldr	r3, [pc, #188]	@ (8003410 <menu+0x1e68>)
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003356:	f000 fe6d 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800335a:	2104      	movs	r1, #4
 800335c:	4821      	ldr	r0, [pc, #132]	@ (80033e4 <menu+0x1e3c>)
 800335e:	f007 f93d 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003362:	4603      	mov	r3, r0
 8003364:	2b01      	cmp	r3, #1
 8003366:	d115      	bne.n	8003394 <menu+0x1dec>
 8003368:	4b1f      	ldr	r3, [pc, #124]	@ (80033e8 <menu+0x1e40>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	f083 0301 	eor.w	r3, r3, #1
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d00e      	beq.n	8003394 <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 8003376:	4b26      	ldr	r3, [pc, #152]	@ (8003410 <menu+0x1e68>)
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	3b01      	subs	r3, #1
 800337c:	b2da      	uxtb	r2, r3
 800337e:	4b24      	ldr	r3, [pc, #144]	@ (8003410 <menu+0x1e68>)
 8003380:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003382:	4b23      	ldr	r3, [pc, #140]	@ (8003410 <menu+0x1e68>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b06      	cmp	r3, #6
 8003388:	d902      	bls.n	8003390 <menu+0x1de8>
		   		asagiValfTmr = 5;
 800338a:	4b21      	ldr	r3, [pc, #132]	@ (8003410 <menu+0x1e68>)
 800338c:	2205      	movs	r2, #5
 800338e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003390:	f000 fe50 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003394:	2108      	movs	r1, #8
 8003396:	4813      	ldr	r0, [pc, #76]	@ (80033e4 <menu+0x1e3c>)
 8003398:	f007 f920 	bl	800a5dc <HAL_GPIO_ReadPin>
 800339c:	4603      	mov	r3, r0
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d10d      	bne.n	80033be <menu+0x1e16>
 80033a2:	4b11      	ldr	r3, [pc, #68]	@ (80033e8 <menu+0x1e40>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	f083 0301 	eor.w	r3, r3, #1
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d006      	beq.n	80033be <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 80033b0:	4b17      	ldr	r3, [pc, #92]	@ (8003410 <menu+0x1e68>)
 80033b2:	781a      	ldrb	r2, [r3, #0]
 80033b4:	4b0d      	ldr	r3, [pc, #52]	@ (80033ec <menu+0x1e44>)
 80033b6:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 80033b8:	4b0e      	ldr	r3, [pc, #56]	@ (80033f4 <menu+0x1e4c>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 80033be:	4b0e      	ldr	r3, [pc, #56]	@ (80033f8 <menu+0x1e50>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b18      	cmp	r3, #24
 80033c4:	f040 8093 	bne.w	80034ee <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 80033c8:	4b12      	ldr	r3, [pc, #72]	@ (8003414 <menu+0x1e6c>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d125      	bne.n	800341c <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 80033d0:	4a11      	ldr	r2, [pc, #68]	@ (8003418 <menu+0x1e70>)
 80033d2:	2101      	movs	r1, #1
 80033d4:	2001      	movs	r0, #1
 80033d6:	f005 fdd7 	bl	8008f88 <lcd_print>
 80033da:	e028      	b.n	800342e <menu+0x1e86>
 80033dc:	200010cf 	.word	0x200010cf
 80033e0:	20001658 	.word	0x20001658
 80033e4:	40010800 	.word	0x40010800
 80033e8:	200010ec 	.word	0x200010ec
 80033ec:	20000fec 	.word	0x20000fec
 80033f0:	200010c2 	.word	0x200010c2
 80033f4:	200010e9 	.word	0x200010e9
 80033f8:	200010bc 	.word	0x200010bc
 80033fc:	20001680 	.word	0x20001680
 8003400:	200014c8 	.word	0x200014c8
 8003404:	200010d0 	.word	0x200010d0
 8003408:	2000105c 	.word	0x2000105c
 800340c:	20001694 	.word	0x20001694
 8003410:	200010d1 	.word	0x200010d1
 8003414:	200010cb 	.word	0x200010cb
 8003418:	200016a8 	.word	0x200016a8
		} else if(devirmeYuruyusSecim == 1) {
 800341c:	4b8c      	ldr	r3, [pc, #560]	@ (8003650 <menu+0x20a8>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d104      	bne.n	800342e <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 8003424:	4a8b      	ldr	r2, [pc, #556]	@ (8003654 <menu+0x20ac>)
 8003426:	2101      	movs	r1, #1
 8003428:	2001      	movs	r0, #1
 800342a:	f005 fdad 	bl	8008f88 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 800342e:	4a8a      	ldr	r2, [pc, #552]	@ (8003658 <menu+0x20b0>)
 8003430:	2101      	movs	r1, #1
 8003432:	2002      	movs	r0, #2
 8003434:	f005 fda8 	bl	8008f88 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003438:	4b88      	ldr	r3, [pc, #544]	@ (800365c <menu+0x20b4>)
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	220a      	movs	r2, #10
 800343e:	4988      	ldr	r1, [pc, #544]	@ (8003660 <menu+0x20b8>)
 8003440:	4618      	mov	r0, r3
 8003442:	f00a f8f7 	bl	800d634 <itoa>
		lcd_print(2, 16, snum);
 8003446:	4a86      	ldr	r2, [pc, #536]	@ (8003660 <menu+0x20b8>)
 8003448:	2110      	movs	r1, #16
 800344a:	2002      	movs	r0, #2
 800344c:	f005 fd9c 	bl	8008f88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003450:	2102      	movs	r1, #2
 8003452:	4884      	ldr	r0, [pc, #528]	@ (8003664 <menu+0x20bc>)
 8003454:	f007 f8c2 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003458:	4603      	mov	r3, r0
 800345a:	2b01      	cmp	r3, #1
 800345c:	d115      	bne.n	800348a <menu+0x1ee2>
 800345e:	4b82      	ldr	r3, [pc, #520]	@ (8003668 <menu+0x20c0>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	f083 0301 	eor.w	r3, r3, #1
 8003466:	b2db      	uxtb	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00e      	beq.n	800348a <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 800346c:	4b7b      	ldr	r3, [pc, #492]	@ (800365c <menu+0x20b4>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	3301      	adds	r3, #1
 8003472:	b2da      	uxtb	r2, r3
 8003474:	4b79      	ldr	r3, [pc, #484]	@ (800365c <menu+0x20b4>)
 8003476:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003478:	4b78      	ldr	r3, [pc, #480]	@ (800365c <menu+0x20b4>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b05      	cmp	r3, #5
 800347e:	d902      	bls.n	8003486 <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 8003480:	4b76      	ldr	r3, [pc, #472]	@ (800365c <menu+0x20b4>)
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003486:	f000 fdd5 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800348a:	2104      	movs	r1, #4
 800348c:	4875      	ldr	r0, [pc, #468]	@ (8003664 <menu+0x20bc>)
 800348e:	f007 f8a5 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003492:	4603      	mov	r3, r0
 8003494:	2b01      	cmp	r3, #1
 8003496:	d115      	bne.n	80034c4 <menu+0x1f1c>
 8003498:	4b73      	ldr	r3, [pc, #460]	@ (8003668 <menu+0x20c0>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	f083 0301 	eor.w	r3, r3, #1
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00e      	beq.n	80034c4 <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 80034a6:	4b6d      	ldr	r3, [pc, #436]	@ (800365c <menu+0x20b4>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	4b6b      	ldr	r3, [pc, #428]	@ (800365c <menu+0x20b4>)
 80034b0:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 80034b2:	4b6a      	ldr	r3, [pc, #424]	@ (800365c <menu+0x20b4>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b06      	cmp	r3, #6
 80034b8:	d902      	bls.n	80034c0 <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 80034ba:	4b68      	ldr	r3, [pc, #416]	@ (800365c <menu+0x20b4>)
 80034bc:	2205      	movs	r2, #5
 80034be:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80034c0:	f000 fdb8 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80034c4:	2108      	movs	r1, #8
 80034c6:	4867      	ldr	r0, [pc, #412]	@ (8003664 <menu+0x20bc>)
 80034c8:	f007 f888 	bl	800a5dc <HAL_GPIO_ReadPin>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d10d      	bne.n	80034ee <menu+0x1f46>
 80034d2:	4b65      	ldr	r3, [pc, #404]	@ (8003668 <menu+0x20c0>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	f083 0301 	eor.w	r3, r3, #1
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d006      	beq.n	80034ee <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 80034e0:	4b5e      	ldr	r3, [pc, #376]	@ (800365c <menu+0x20b4>)
 80034e2:	781a      	ldrb	r2, [r3, #0]
 80034e4:	4b61      	ldr	r3, [pc, #388]	@ (800366c <menu+0x20c4>)
 80034e6:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 80034e8:	4b61      	ldr	r3, [pc, #388]	@ (8003670 <menu+0x20c8>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 80034ee:	4b61      	ldr	r3, [pc, #388]	@ (8003674 <menu+0x20cc>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b19      	cmp	r3, #25
 80034f4:	d172      	bne.n	80035dc <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 80034f6:	4b56      	ldr	r3, [pc, #344]	@ (8003650 <menu+0x20a8>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d105      	bne.n	800350a <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 80034fe:	4a5e      	ldr	r2, [pc, #376]	@ (8003678 <menu+0x20d0>)
 8003500:	2101      	movs	r1, #1
 8003502:	2001      	movs	r0, #1
 8003504:	f005 fd40 	bl	8008f88 <lcd_print>
 8003508:	e008      	b.n	800351c <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 800350a:	4b51      	ldr	r3, [pc, #324]	@ (8003650 <menu+0x20a8>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d104      	bne.n	800351c <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 8003512:	4a5a      	ldr	r2, [pc, #360]	@ (800367c <menu+0x20d4>)
 8003514:	2101      	movs	r1, #1
 8003516:	2001      	movs	r0, #1
 8003518:	f005 fd36 	bl	8008f88 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 800351c:	4a4e      	ldr	r2, [pc, #312]	@ (8003658 <menu+0x20b0>)
 800351e:	2101      	movs	r1, #1
 8003520:	2002      	movs	r0, #2
 8003522:	f005 fd31 	bl	8008f88 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003526:	4b56      	ldr	r3, [pc, #344]	@ (8003680 <menu+0x20d8>)
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	220a      	movs	r2, #10
 800352c:	494c      	ldr	r1, [pc, #304]	@ (8003660 <menu+0x20b8>)
 800352e:	4618      	mov	r0, r3
 8003530:	f00a f880 	bl	800d634 <itoa>
		lcd_print(2,16,snum);
 8003534:	4a4a      	ldr	r2, [pc, #296]	@ (8003660 <menu+0x20b8>)
 8003536:	2110      	movs	r1, #16
 8003538:	2002      	movs	r0, #2
 800353a:	f005 fd25 	bl	8008f88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800353e:	2102      	movs	r1, #2
 8003540:	4848      	ldr	r0, [pc, #288]	@ (8003664 <menu+0x20bc>)
 8003542:	f007 f84b 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003546:	4603      	mov	r3, r0
 8003548:	2b01      	cmp	r3, #1
 800354a:	d115      	bne.n	8003578 <menu+0x1fd0>
 800354c:	4b46      	ldr	r3, [pc, #280]	@ (8003668 <menu+0x20c0>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	f083 0301 	eor.w	r3, r3, #1
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00e      	beq.n	8003578 <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 800355a:	4b49      	ldr	r3, [pc, #292]	@ (8003680 <menu+0x20d8>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	3301      	adds	r3, #1
 8003560:	b2da      	uxtb	r2, r3
 8003562:	4b47      	ldr	r3, [pc, #284]	@ (8003680 <menu+0x20d8>)
 8003564:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003566:	4b46      	ldr	r3, [pc, #280]	@ (8003680 <menu+0x20d8>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b05      	cmp	r3, #5
 800356c:	d902      	bls.n	8003574 <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 800356e:	4b44      	ldr	r3, [pc, #272]	@ (8003680 <menu+0x20d8>)
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003574:	f000 fd5e 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003578:	2104      	movs	r1, #4
 800357a:	483a      	ldr	r0, [pc, #232]	@ (8003664 <menu+0x20bc>)
 800357c:	f007 f82e 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003580:	4603      	mov	r3, r0
 8003582:	2b01      	cmp	r3, #1
 8003584:	d115      	bne.n	80035b2 <menu+0x200a>
 8003586:	4b38      	ldr	r3, [pc, #224]	@ (8003668 <menu+0x20c0>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	f083 0301 	eor.w	r3, r3, #1
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00e      	beq.n	80035b2 <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003594:	4b3a      	ldr	r3, [pc, #232]	@ (8003680 <menu+0x20d8>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	3b01      	subs	r3, #1
 800359a:	b2da      	uxtb	r2, r3
 800359c:	4b38      	ldr	r3, [pc, #224]	@ (8003680 <menu+0x20d8>)
 800359e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 80035a0:	4b37      	ldr	r3, [pc, #220]	@ (8003680 <menu+0x20d8>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	2b06      	cmp	r3, #6
 80035a6:	d902      	bls.n	80035ae <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 80035a8:	4b35      	ldr	r3, [pc, #212]	@ (8003680 <menu+0x20d8>)
 80035aa:	2205      	movs	r2, #5
 80035ac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80035ae:	f000 fd41 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80035b2:	2108      	movs	r1, #8
 80035b4:	482b      	ldr	r0, [pc, #172]	@ (8003664 <menu+0x20bc>)
 80035b6:	f007 f811 	bl	800a5dc <HAL_GPIO_ReadPin>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d10d      	bne.n	80035dc <menu+0x2034>
 80035c0:	4b29      	ldr	r3, [pc, #164]	@ (8003668 <menu+0x20c0>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	f083 0301 	eor.w	r3, r3, #1
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d006      	beq.n	80035dc <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 80035ce:	4b2c      	ldr	r3, [pc, #176]	@ (8003680 <menu+0x20d8>)
 80035d0:	781a      	ldrb	r2, [r3, #0]
 80035d2:	4b26      	ldr	r3, [pc, #152]	@ (800366c <menu+0x20c4>)
 80035d4:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 80035d6:	4b26      	ldr	r3, [pc, #152]	@ (8003670 <menu+0x20c8>)
 80035d8:	2201      	movs	r2, #1
 80035da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 80035dc:	4b25      	ldr	r3, [pc, #148]	@ (8003674 <menu+0x20cc>)
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	2b1a      	cmp	r3, #26
 80035e2:	f040 80b7 	bne.w	8003754 <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 80035e6:	4a27      	ldr	r2, [pc, #156]	@ (8003684 <menu+0x20dc>)
 80035e8:	2101      	movs	r1, #1
 80035ea:	2001      	movs	r0, #1
 80035ec:	f005 fccc 	bl	8008f88 <lcd_print>

		if(makineCalismaTmr > 99) {
 80035f0:	4b25      	ldr	r3, [pc, #148]	@ (8003688 <menu+0x20e0>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	2b63      	cmp	r3, #99	@ 0x63
 80035f6:	d911      	bls.n	800361c <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 80035f8:	4a17      	ldr	r2, [pc, #92]	@ (8003658 <menu+0x20b0>)
 80035fa:	2101      	movs	r1, #1
 80035fc:	2002      	movs	r0, #2
 80035fe:	f005 fcc3 	bl	8008f88 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003602:	4b21      	ldr	r3, [pc, #132]	@ (8003688 <menu+0x20e0>)
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	220a      	movs	r2, #10
 8003608:	4915      	ldr	r1, [pc, #84]	@ (8003660 <menu+0x20b8>)
 800360a:	4618      	mov	r0, r3
 800360c:	f00a f812 	bl	800d634 <itoa>
			lcd_print(2,14,snum);
 8003610:	4a13      	ldr	r2, [pc, #76]	@ (8003660 <menu+0x20b8>)
 8003612:	210e      	movs	r1, #14
 8003614:	2002      	movs	r0, #2
 8003616:	f005 fcb7 	bl	8008f88 <lcd_print>
 800361a:	e04c      	b.n	80036b6 <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 800361c:	4b1a      	ldr	r3, [pc, #104]	@ (8003688 <menu+0x20e0>)
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b09      	cmp	r3, #9
 8003622:	d933      	bls.n	800368c <menu+0x20e4>
 8003624:	4b18      	ldr	r3, [pc, #96]	@ (8003688 <menu+0x20e0>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b63      	cmp	r3, #99	@ 0x63
 800362a:	d82f      	bhi.n	800368c <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 800362c:	4a0a      	ldr	r2, [pc, #40]	@ (8003658 <menu+0x20b0>)
 800362e:	2101      	movs	r1, #1
 8003630:	2002      	movs	r0, #2
 8003632:	f005 fca9 	bl	8008f88 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003636:	4b14      	ldr	r3, [pc, #80]	@ (8003688 <menu+0x20e0>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	220a      	movs	r2, #10
 800363c:	4908      	ldr	r1, [pc, #32]	@ (8003660 <menu+0x20b8>)
 800363e:	4618      	mov	r0, r3
 8003640:	f009 fff8 	bl	800d634 <itoa>
			lcd_print(2, 15, snum);
 8003644:	4a06      	ldr	r2, [pc, #24]	@ (8003660 <menu+0x20b8>)
 8003646:	210f      	movs	r1, #15
 8003648:	2002      	movs	r0, #2
 800364a:	f005 fc9d 	bl	8008f88 <lcd_print>
 800364e:	e032      	b.n	80036b6 <menu+0x210e>
 8003650:	200010cb 	.word	0x200010cb
 8003654:	200016bc 	.word	0x200016bc
 8003658:	200014c8 	.word	0x200014c8
 800365c:	200010d2 	.word	0x200010d2
 8003660:	2000105c 	.word	0x2000105c
 8003664:	40010800 	.word	0x40010800
 8003668:	200010ec 	.word	0x200010ec
 800366c:	20000fec 	.word	0x20000fec
 8003670:	200010e9 	.word	0x200010e9
 8003674:	200010bc 	.word	0x200010bc
 8003678:	200016d0 	.word	0x200016d0
 800367c:	200016e4 	.word	0x200016e4
 8003680:	200010d3 	.word	0x200010d3
 8003684:	200016f8 	.word	0x200016f8
 8003688:	200010d4 	.word	0x200010d4
		} else if(makineCalismaTmr <=  9) {
 800368c:	4b72      	ldr	r3, [pc, #456]	@ (8003858 <menu+0x22b0>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b09      	cmp	r3, #9
 8003692:	d810      	bhi.n	80036b6 <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 8003694:	4a71      	ldr	r2, [pc, #452]	@ (800385c <menu+0x22b4>)
 8003696:	2101      	movs	r1, #1
 8003698:	2002      	movs	r0, #2
 800369a:	f005 fc75 	bl	8008f88 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800369e:	4b6e      	ldr	r3, [pc, #440]	@ (8003858 <menu+0x22b0>)
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	220a      	movs	r2, #10
 80036a4:	496e      	ldr	r1, [pc, #440]	@ (8003860 <menu+0x22b8>)
 80036a6:	4618      	mov	r0, r3
 80036a8:	f009 ffc4 	bl	800d634 <itoa>
			lcd_print(2, 16, snum);
 80036ac:	4a6c      	ldr	r2, [pc, #432]	@ (8003860 <menu+0x22b8>)
 80036ae:	2110      	movs	r1, #16
 80036b0:	2002      	movs	r0, #2
 80036b2:	f005 fc69 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036b6:	2102      	movs	r1, #2
 80036b8:	486a      	ldr	r0, [pc, #424]	@ (8003864 <menu+0x22bc>)
 80036ba:	f006 ff8f 	bl	800a5dc <HAL_GPIO_ReadPin>
 80036be:	4603      	mov	r3, r0
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d115      	bne.n	80036f0 <menu+0x2148>
 80036c4:	4b68      	ldr	r3, [pc, #416]	@ (8003868 <menu+0x22c0>)
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	f083 0301 	eor.w	r3, r3, #1
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00e      	beq.n	80036f0 <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 80036d2:	4b61      	ldr	r3, [pc, #388]	@ (8003858 <menu+0x22b0>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	3301      	adds	r3, #1
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	4b5f      	ldr	r3, [pc, #380]	@ (8003858 <menu+0x22b0>)
 80036dc:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80036de:	4b5e      	ldr	r3, [pc, #376]	@ (8003858 <menu+0x22b0>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2bb4      	cmp	r3, #180	@ 0xb4
 80036e4:	d902      	bls.n	80036ec <menu+0x2144>
				makineCalismaTmr = 0;
 80036e6:	4b5c      	ldr	r3, [pc, #368]	@ (8003858 <menu+0x22b0>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036ec:	f000 fca2 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036f0:	2104      	movs	r1, #4
 80036f2:	485c      	ldr	r0, [pc, #368]	@ (8003864 <menu+0x22bc>)
 80036f4:	f006 ff72 	bl	800a5dc <HAL_GPIO_ReadPin>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d115      	bne.n	800372a <menu+0x2182>
 80036fe:	4b5a      	ldr	r3, [pc, #360]	@ (8003868 <menu+0x22c0>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	f083 0301 	eor.w	r3, r3, #1
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00e      	beq.n	800372a <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 800370c:	4b52      	ldr	r3, [pc, #328]	@ (8003858 <menu+0x22b0>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	3b01      	subs	r3, #1
 8003712:	b2da      	uxtb	r2, r3
 8003714:	4b50      	ldr	r3, [pc, #320]	@ (8003858 <menu+0x22b0>)
 8003716:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8003718:	4b4f      	ldr	r3, [pc, #316]	@ (8003858 <menu+0x22b0>)
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2bb5      	cmp	r3, #181	@ 0xb5
 800371e:	d902      	bls.n	8003726 <menu+0x217e>
		   		makineCalismaTmr = 180;
 8003720:	4b4d      	ldr	r3, [pc, #308]	@ (8003858 <menu+0x22b0>)
 8003722:	22b4      	movs	r2, #180	@ 0xb4
 8003724:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003726:	f000 fc85 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800372a:	2108      	movs	r1, #8
 800372c:	484d      	ldr	r0, [pc, #308]	@ (8003864 <menu+0x22bc>)
 800372e:	f006 ff55 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003732:	4603      	mov	r3, r0
 8003734:	2b01      	cmp	r3, #1
 8003736:	d10d      	bne.n	8003754 <menu+0x21ac>
 8003738:	4b4b      	ldr	r3, [pc, #300]	@ (8003868 <menu+0x22c0>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	f083 0301 	eor.w	r3, r3, #1
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d006      	beq.n	8003754 <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 8003746:	4b44      	ldr	r3, [pc, #272]	@ (8003858 <menu+0x22b0>)
 8003748:	781a      	ldrb	r2, [r3, #0]
 800374a:	4b48      	ldr	r3, [pc, #288]	@ (800386c <menu+0x22c4>)
 800374c:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800374e:	4b48      	ldr	r3, [pc, #288]	@ (8003870 <menu+0x22c8>)
 8003750:	2201      	movs	r2, #1
 8003752:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003754:	4b47      	ldr	r3, [pc, #284]	@ (8003874 <menu+0x22cc>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b1b      	cmp	r3, #27
 800375a:	d166      	bne.n	800382a <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 800375c:	4a46      	ldr	r2, [pc, #280]	@ (8003878 <menu+0x22d0>)
 800375e:	2101      	movs	r1, #1
 8003760:	2001      	movs	r0, #1
 8003762:	f005 fc11 	bl	8008f88 <lcd_print>

		if(buzzer == 0) {
 8003766:	4b45      	ldr	r3, [pc, #276]	@ (800387c <menu+0x22d4>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d105      	bne.n	800377a <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 800376e:	4a44      	ldr	r2, [pc, #272]	@ (8003880 <menu+0x22d8>)
 8003770:	2101      	movs	r1, #1
 8003772:	2002      	movs	r0, #2
 8003774:	f005 fc08 	bl	8008f88 <lcd_print>
 8003778:	e008      	b.n	800378c <menu+0x21e4>
		} else if(buzzer == 1) {
 800377a:	4b40      	ldr	r3, [pc, #256]	@ (800387c <menu+0x22d4>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d104      	bne.n	800378c <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 8003782:	4a40      	ldr	r2, [pc, #256]	@ (8003884 <menu+0x22dc>)
 8003784:	2101      	movs	r1, #1
 8003786:	2002      	movs	r0, #2
 8003788:	f005 fbfe 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800378c:	2102      	movs	r1, #2
 800378e:	4835      	ldr	r0, [pc, #212]	@ (8003864 <menu+0x22bc>)
 8003790:	f006 ff24 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003794:	4603      	mov	r3, r0
 8003796:	2b01      	cmp	r3, #1
 8003798:	d115      	bne.n	80037c6 <menu+0x221e>
 800379a:	4b33      	ldr	r3, [pc, #204]	@ (8003868 <menu+0x22c0>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	f083 0301 	eor.w	r3, r3, #1
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d00e      	beq.n	80037c6 <menu+0x221e>
			buzzer = buzzer + 1;
 80037a8:	4b34      	ldr	r3, [pc, #208]	@ (800387c <menu+0x22d4>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	3301      	adds	r3, #1
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	4b32      	ldr	r3, [pc, #200]	@ (800387c <menu+0x22d4>)
 80037b2:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80037b4:	4b31      	ldr	r3, [pc, #196]	@ (800387c <menu+0x22d4>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d902      	bls.n	80037c2 <menu+0x221a>
				buzzer = 0;
 80037bc:	4b2f      	ldr	r3, [pc, #188]	@ (800387c <menu+0x22d4>)
 80037be:	2200      	movs	r2, #0
 80037c0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037c2:	f000 fc37 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037c6:	2104      	movs	r1, #4
 80037c8:	4826      	ldr	r0, [pc, #152]	@ (8003864 <menu+0x22bc>)
 80037ca:	f006 ff07 	bl	800a5dc <HAL_GPIO_ReadPin>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d115      	bne.n	8003800 <menu+0x2258>
 80037d4:	4b24      	ldr	r3, [pc, #144]	@ (8003868 <menu+0x22c0>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	f083 0301 	eor.w	r3, r3, #1
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00e      	beq.n	8003800 <menu+0x2258>
			buzzer = buzzer - 1;
 80037e2:	4b26      	ldr	r3, [pc, #152]	@ (800387c <menu+0x22d4>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	4b24      	ldr	r3, [pc, #144]	@ (800387c <menu+0x22d4>)
 80037ec:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80037ee:	4b23      	ldr	r3, [pc, #140]	@ (800387c <menu+0x22d4>)
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <menu+0x2254>
		   		buzzer = 1;
 80037f6:	4b21      	ldr	r3, [pc, #132]	@ (800387c <menu+0x22d4>)
 80037f8:	2201      	movs	r2, #1
 80037fa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80037fc:	f000 fc1a 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003800:	2108      	movs	r1, #8
 8003802:	4818      	ldr	r0, [pc, #96]	@ (8003864 <menu+0x22bc>)
 8003804:	f006 feea 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003808:	4603      	mov	r3, r0
 800380a:	2b01      	cmp	r3, #1
 800380c:	d10d      	bne.n	800382a <menu+0x2282>
 800380e:	4b16      	ldr	r3, [pc, #88]	@ (8003868 <menu+0x22c0>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	f083 0301 	eor.w	r3, r3, #1
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	d006      	beq.n	800382a <menu+0x2282>
			eepromData[25] = buzzer;
 800381c:	4b17      	ldr	r3, [pc, #92]	@ (800387c <menu+0x22d4>)
 800381e:	781a      	ldrb	r2, [r3, #0]
 8003820:	4b12      	ldr	r3, [pc, #72]	@ (800386c <menu+0x22c4>)
 8003822:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003824:	4b12      	ldr	r3, [pc, #72]	@ (8003870 <menu+0x22c8>)
 8003826:	2201      	movs	r2, #1
 8003828:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 800382a:	4b12      	ldr	r3, [pc, #72]	@ (8003874 <menu+0x22cc>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b1c      	cmp	r3, #28
 8003830:	f040 8088 	bne.w	8003944 <menu+0x239c>
		calismaSayModu = 0;
 8003834:	4b14      	ldr	r3, [pc, #80]	@ (8003888 <menu+0x22e0>)
 8003836:	2200      	movs	r2, #0
 8003838:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 800383a:	4a14      	ldr	r2, [pc, #80]	@ (800388c <menu+0x22e4>)
 800383c:	2101      	movs	r1, #1
 800383e:	2001      	movs	r0, #1
 8003840:	f005 fba2 	bl	8008f88 <lcd_print>

		if(demoMode == 0) {
 8003844:	4b12      	ldr	r3, [pc, #72]	@ (8003890 <menu+0x22e8>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d123      	bne.n	8003894 <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 800384c:	4a0c      	ldr	r2, [pc, #48]	@ (8003880 <menu+0x22d8>)
 800384e:	2101      	movs	r1, #1
 8003850:	2002      	movs	r0, #2
 8003852:	f005 fb99 	bl	8008f88 <lcd_print>
 8003856:	e026      	b.n	80038a6 <menu+0x22fe>
 8003858:	200010d4 	.word	0x200010d4
 800385c:	200014c8 	.word	0x200014c8
 8003860:	2000105c 	.word	0x2000105c
 8003864:	40010800 	.word	0x40010800
 8003868:	200010ec 	.word	0x200010ec
 800386c:	20000fec 	.word	0x20000fec
 8003870:	200010e9 	.word	0x200010e9
 8003874:	200010bc 	.word	0x200010bc
 8003878:	20000128 	.word	0x20000128
 800387c:	200010d8 	.word	0x200010d8
 8003880:	2000139c 	.word	0x2000139c
 8003884:	200013b0 	.word	0x200013b0
 8003888:	200010db 	.word	0x200010db
 800388c:	2000013c 	.word	0x2000013c
 8003890:	200010da 	.word	0x200010da
		} else if(demoMode == 1) {
 8003894:	4b80      	ldr	r3, [pc, #512]	@ (8003a98 <menu+0x24f0>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d104      	bne.n	80038a6 <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 800389c:	4a7f      	ldr	r2, [pc, #508]	@ (8003a9c <menu+0x24f4>)
 800389e:	2101      	movs	r1, #1
 80038a0:	2002      	movs	r0, #2
 80038a2:	f005 fb71 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80038a6:	2102      	movs	r1, #2
 80038a8:	487d      	ldr	r0, [pc, #500]	@ (8003aa0 <menu+0x24f8>)
 80038aa:	f006 fe97 	bl	800a5dc <HAL_GPIO_ReadPin>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d115      	bne.n	80038e0 <menu+0x2338>
 80038b4:	4b7b      	ldr	r3, [pc, #492]	@ (8003aa4 <menu+0x24fc>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	f083 0301 	eor.w	r3, r3, #1
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00e      	beq.n	80038e0 <menu+0x2338>
			demoMode = demoMode + 1;
 80038c2:	4b75      	ldr	r3, [pc, #468]	@ (8003a98 <menu+0x24f0>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	3301      	adds	r3, #1
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	4b73      	ldr	r3, [pc, #460]	@ (8003a98 <menu+0x24f0>)
 80038cc:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80038ce:	4b72      	ldr	r3, [pc, #456]	@ (8003a98 <menu+0x24f0>)
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d902      	bls.n	80038dc <menu+0x2334>
				demoMode = 0;
 80038d6:	4b70      	ldr	r3, [pc, #448]	@ (8003a98 <menu+0x24f0>)
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80038dc:	f000 fbaa 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038e0:	2104      	movs	r1, #4
 80038e2:	486f      	ldr	r0, [pc, #444]	@ (8003aa0 <menu+0x24f8>)
 80038e4:	f006 fe7a 	bl	800a5dc <HAL_GPIO_ReadPin>
 80038e8:	4603      	mov	r3, r0
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d115      	bne.n	800391a <menu+0x2372>
 80038ee:	4b6d      	ldr	r3, [pc, #436]	@ (8003aa4 <menu+0x24fc>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	f083 0301 	eor.w	r3, r3, #1
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00e      	beq.n	800391a <menu+0x2372>
			demoMode = demoMode - 1;
 80038fc:	4b66      	ldr	r3, [pc, #408]	@ (8003a98 <menu+0x24f0>)
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	3b01      	subs	r3, #1
 8003902:	b2da      	uxtb	r2, r3
 8003904:	4b64      	ldr	r3, [pc, #400]	@ (8003a98 <menu+0x24f0>)
 8003906:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8003908:	4b63      	ldr	r3, [pc, #396]	@ (8003a98 <menu+0x24f0>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <menu+0x236e>
		   		demoMode = 1;
 8003910:	4b61      	ldr	r3, [pc, #388]	@ (8003a98 <menu+0x24f0>)
 8003912:	2201      	movs	r2, #1
 8003914:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003916:	f000 fb8d 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800391a:	2108      	movs	r1, #8
 800391c:	4860      	ldr	r0, [pc, #384]	@ (8003aa0 <menu+0x24f8>)
 800391e:	f006 fe5d 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003922:	4603      	mov	r3, r0
 8003924:	2b01      	cmp	r3, #1
 8003926:	d10d      	bne.n	8003944 <menu+0x239c>
 8003928:	4b5e      	ldr	r3, [pc, #376]	@ (8003aa4 <menu+0x24fc>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	f083 0301 	eor.w	r3, r3, #1
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d006      	beq.n	8003944 <menu+0x239c>
			eepromData[26] = demoMode;
 8003936:	4b58      	ldr	r3, [pc, #352]	@ (8003a98 <menu+0x24f0>)
 8003938:	781a      	ldrb	r2, [r3, #0]
 800393a:	4b5b      	ldr	r3, [pc, #364]	@ (8003aa8 <menu+0x2500>)
 800393c:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800393e:	4b5b      	ldr	r3, [pc, #364]	@ (8003aac <menu+0x2504>)
 8003940:	2201      	movs	r2, #1
 8003942:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003944:	4b5a      	ldr	r3, [pc, #360]	@ (8003ab0 <menu+0x2508>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b1d      	cmp	r3, #29
 800394a:	f040 80d5 	bne.w	8003af8 <menu+0x2550>
		finalCount=0;
 800394e:	4b59      	ldr	r3, [pc, #356]	@ (8003ab4 <menu+0x250c>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
		if(calismaSayModu == 0) {
 8003954:	4b58      	ldr	r3, [pc, #352]	@ (8003ab8 <menu+0x2510>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d135      	bne.n	80039c8 <menu+0x2420>
			lcd_print(1, 1, calismaSayisiText);
 800395c:	4a57      	ldr	r2, [pc, #348]	@ (8003abc <menu+0x2514>)
 800395e:	2101      	movs	r1, #1
 8003960:	2001      	movs	r0, #1
 8003962:	f005 fb11 	bl	8008f88 <lcd_print>

			if(demoMode == 1) {
 8003966:	4b4c      	ldr	r3, [pc, #304]	@ (8003a98 <menu+0x24f0>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d113      	bne.n	8003996 <menu+0x23ee>
				finalCount += calismaCountDemo * 255; //sıfır durumu da dahil ediliyor
 800396e:	4b54      	ldr	r3, [pc, #336]	@ (8003ac0 <menu+0x2518>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	4613      	mov	r3, r2
 8003976:	021b      	lsls	r3, r3, #8
 8003978:	1a9a      	subs	r2, r3, r2
 800397a:	4b4e      	ldr	r3, [pc, #312]	@ (8003ab4 <menu+0x250c>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4413      	add	r3, r2
 8003980:	4a4c      	ldr	r2, [pc, #304]	@ (8003ab4 <menu+0x250c>)
 8003982:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisiDemo;
 8003984:	4b4f      	ldr	r3, [pc, #316]	@ (8003ac4 <menu+0x251c>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	461a      	mov	r2, r3
 800398a:	4b4a      	ldr	r3, [pc, #296]	@ (8003ab4 <menu+0x250c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4413      	add	r3, r2
 8003990:	4a48      	ldr	r2, [pc, #288]	@ (8003ab4 <menu+0x250c>)
 8003992:	6013      	str	r3, [r2, #0]
 8003994:	e012      	b.n	80039bc <menu+0x2414>
			} else {
				finalCount += calismaCount * 255; //sıfır durumu da dahil ediliyor
 8003996:	4b4c      	ldr	r3, [pc, #304]	@ (8003ac8 <menu+0x2520>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	4613      	mov	r3, r2
 800399e:	021b      	lsls	r3, r3, #8
 80039a0:	1a9a      	subs	r2, r3, r2
 80039a2:	4b44      	ldr	r3, [pc, #272]	@ (8003ab4 <menu+0x250c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4413      	add	r3, r2
 80039a8:	4a42      	ldr	r2, [pc, #264]	@ (8003ab4 <menu+0x250c>)
 80039aa:	6013      	str	r3, [r2, #0]
				finalCount += calismaSayisi;
 80039ac:	4b47      	ldr	r3, [pc, #284]	@ (8003acc <menu+0x2524>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	4b40      	ldr	r3, [pc, #256]	@ (8003ab4 <menu+0x250c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4413      	add	r3, r2
 80039b8:	4a3e      	ldr	r2, [pc, #248]	@ (8003ab4 <menu+0x250c>)
 80039ba:	6013      	str	r3, [r2, #0]
			}

			displayCycleOnLCD(finalCount);
 80039bc:	4b3d      	ldr	r3, [pc, #244]	@ (8003ab4 <menu+0x250c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f000 fa89 	bl	8003ed8 <displayCycleOnLCD>
 80039c6:	e00d      	b.n	80039e4 <menu+0x243c>
		} else if(calismaSayModu == 1) {
 80039c8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab8 <menu+0x2510>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d109      	bne.n	80039e4 <menu+0x243c>
			lcd_print(1, 1, calismaSayisiText);
 80039d0:	4a3a      	ldr	r2, [pc, #232]	@ (8003abc <menu+0x2514>)
 80039d2:	2101      	movs	r1, #1
 80039d4:	2001      	movs	r0, #1
 80039d6:	f005 fad7 	bl	8008f88 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 80039da:	4a3d      	ldr	r2, [pc, #244]	@ (8003ad0 <menu+0x2528>)
 80039dc:	2101      	movs	r1, #1
 80039de:	2002      	movs	r0, #2
 80039e0:	f005 fad2 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039e4:	2102      	movs	r1, #2
 80039e6:	482e      	ldr	r0, [pc, #184]	@ (8003aa0 <menu+0x24f8>)
 80039e8:	f006 fdf8 	bl	800a5dc <HAL_GPIO_ReadPin>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d115      	bne.n	8003a1e <menu+0x2476>
 80039f2:	4b2c      	ldr	r3, [pc, #176]	@ (8003aa4 <menu+0x24fc>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	f083 0301 	eor.w	r3, r3, #1
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00e      	beq.n	8003a1e <menu+0x2476>
			calismaSayModu = calismaSayModu + 1;
 8003a00:	4b2d      	ldr	r3, [pc, #180]	@ (8003ab8 <menu+0x2510>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	3301      	adds	r3, #1
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab8 <menu+0x2510>)
 8003a0a:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8003a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8003ab8 <menu+0x2510>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d902      	bls.n	8003a1a <menu+0x2472>
				calismaSayModu = 0;
 8003a14:	4b28      	ldr	r3, [pc, #160]	@ (8003ab8 <menu+0x2510>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003a1a:	f000 fb0b 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a1e:	2104      	movs	r1, #4
 8003a20:	481f      	ldr	r0, [pc, #124]	@ (8003aa0 <menu+0x24f8>)
 8003a22:	f006 fddb 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d115      	bne.n	8003a58 <menu+0x24b0>
 8003a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa4 <menu+0x24fc>)
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	f083 0301 	eor.w	r3, r3, #1
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00e      	beq.n	8003a58 <menu+0x24b0>
			calismaSayModu = calismaSayModu - 1;
 8003a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ab8 <menu+0x2510>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	4b1d      	ldr	r3, [pc, #116]	@ (8003ab8 <menu+0x2510>)
 8003a44:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8003a46:	4b1c      	ldr	r3, [pc, #112]	@ (8003ab8 <menu+0x2510>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <menu+0x24ac>
		   		calismaSayModu = 1;
 8003a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ab8 <menu+0x2510>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a54:	f000 faee 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a58:	2108      	movs	r1, #8
 8003a5a:	4811      	ldr	r0, [pc, #68]	@ (8003aa0 <menu+0x24f8>)
 8003a5c:	f006 fdbe 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d148      	bne.n	8003af8 <menu+0x2550>
 8003a66:	4b0f      	ldr	r3, [pc, #60]	@ (8003aa4 <menu+0x24fc>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	f083 0301 	eor.w	r3, r3, #1
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d041      	beq.n	8003af8 <menu+0x2550>
			if(demoMode == 1) {
 8003a74:	4b08      	ldr	r3, [pc, #32]	@ (8003a98 <menu+0x24f0>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d12b      	bne.n	8003ad4 <menu+0x252c>
				eepromData[28] = 0;
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa8 <menu+0x2500>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	771a      	strb	r2, [r3, #28]
				eepromData[30] = 0;
 8003a82:	4b09      	ldr	r3, [pc, #36]	@ (8003aa8 <menu+0x2500>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	779a      	strb	r2, [r3, #30]
				calismaSayisiDemo = 0;
 8003a88:	4b0e      	ldr	r3, [pc, #56]	@ (8003ac4 <menu+0x251c>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	701a      	strb	r2, [r3, #0]
				calismaCountDemo = 0;
 8003a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac0 <menu+0x2518>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	701a      	strb	r2, [r3, #0]
 8003a94:	e02a      	b.n	8003aec <menu+0x2544>
 8003a96:	bf00      	nop
 8003a98:	200010da 	.word	0x200010da
 8003a9c:	200013b0 	.word	0x200013b0
 8003aa0:	40010800 	.word	0x40010800
 8003aa4:	200010ec 	.word	0x200010ec
 8003aa8:	20000fec 	.word	0x20000fec
 8003aac:	200010e9 	.word	0x200010e9
 8003ab0:	200010bc 	.word	0x200010bc
 8003ab4:	200010b8 	.word	0x200010b8
 8003ab8:	200010db 	.word	0x200010db
 8003abc:	2000170c 	.word	0x2000170c
 8003ac0:	200010b7 	.word	0x200010b7
 8003ac4:	200010b5 	.word	0x200010b5
 8003ac8:	200010b6 	.word	0x200010b6
 8003acc:	200010b4 	.word	0x200010b4
 8003ad0:	20001720 	.word	0x20001720
			} else {
				eepromData[27] = 0;
 8003ad4:	4b4b      	ldr	r3, [pc, #300]	@ (8003c04 <menu+0x265c>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	76da      	strb	r2, [r3, #27]
				eepromData[29] = 0;
 8003ada:	4b4a      	ldr	r3, [pc, #296]	@ (8003c04 <menu+0x265c>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	775a      	strb	r2, [r3, #29]
				calismaSayisi = 0;
 8003ae0:	4b49      	ldr	r3, [pc, #292]	@ (8003c08 <menu+0x2660>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
				calismaCount = 0;
 8003ae6:	4b49      	ldr	r3, [pc, #292]	@ (8003c0c <menu+0x2664>)
 8003ae8:	2200      	movs	r2, #0
 8003aea:	701a      	strb	r2, [r3, #0]
			}
			calismaSayModu = 0;
 8003aec:	4b48      	ldr	r3, [pc, #288]	@ (8003c10 <menu+0x2668>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003af2:	4b48      	ldr	r3, [pc, #288]	@ (8003c14 <menu+0x266c>)
 8003af4:	2201      	movs	r2, #1
 8003af6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8003af8:	4b47      	ldr	r3, [pc, #284]	@ (8003c18 <menu+0x2670>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b1e      	cmp	r3, #30
 8003afe:	d16a      	bne.n	8003bd6 <menu+0x262e>
		calismaSayModu = 0;
 8003b00:	4b43      	ldr	r3, [pc, #268]	@ (8003c10 <menu+0x2668>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 8003b06:	4a45      	ldr	r2, [pc, #276]	@ (8003c1c <menu+0x2674>)
 8003b08:	2101      	movs	r1, #1
 8003b0a:	2001      	movs	r0, #1
 8003b0c:	f005 fa3c 	bl	8008f88 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 8003b10:	4a43      	ldr	r2, [pc, #268]	@ (8003c20 <menu+0x2678>)
 8003b12:	2101      	movs	r1, #1
 8003b14:	2002      	movs	r0, #2
 8003b16:	f005 fa37 	bl	8008f88 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b1a:	2102      	movs	r1, #2
 8003b1c:	4841      	ldr	r0, [pc, #260]	@ (8003c24 <menu+0x267c>)
 8003b1e:	f006 fd5d 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d11c      	bne.n	8003b62 <menu+0x25ba>
 8003b28:	4b3f      	ldr	r3, [pc, #252]	@ (8003c28 <menu+0x2680>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	f083 0301 	eor.w	r3, r3, #1
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d015      	beq.n	8003b62 <menu+0x25ba>
			dilSecim = dilSecim + 1;
 8003b36:	4b3d      	ldr	r3, [pc, #244]	@ (8003c2c <menu+0x2684>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c2c <menu+0x2684>)
 8003b40:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003b42:	4b3a      	ldr	r3, [pc, #232]	@ (8003c2c <menu+0x2684>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d902      	bls.n	8003b50 <menu+0x25a8>
				dilSecim = 0;
 8003b4a:	4b38      	ldr	r3, [pc, #224]	@ (8003c2c <menu+0x2684>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	701a      	strb	r2, [r3, #0]
			}
			resetMenuTexts();
 8003b50:	f003 ff70 	bl	8007a34 <resetMenuTexts>
			loadMenuTexts(dilSecim);
 8003b54:	4b35      	ldr	r3, [pc, #212]	@ (8003c2c <menu+0x2684>)
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f002 fae5 	bl	8006128 <loadMenuTexts>

			bekle();
 8003b5e:	f000 fa69 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b62:	2104      	movs	r1, #4
 8003b64:	482f      	ldr	r0, [pc, #188]	@ (8003c24 <menu+0x267c>)
 8003b66:	f006 fd39 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d11c      	bne.n	8003baa <menu+0x2602>
 8003b70:	4b2d      	ldr	r3, [pc, #180]	@ (8003c28 <menu+0x2680>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	f083 0301 	eor.w	r3, r3, #1
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d015      	beq.n	8003baa <menu+0x2602>
			dilSecim = dilSecim - 1;
 8003b7e:	4b2b      	ldr	r3, [pc, #172]	@ (8003c2c <menu+0x2684>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	4b29      	ldr	r3, [pc, #164]	@ (8003c2c <menu+0x2684>)
 8003b88:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003b8a:	4b28      	ldr	r3, [pc, #160]	@ (8003c2c <menu+0x2684>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d002      	beq.n	8003b98 <menu+0x25f0>
		   		dilSecim = 1;
 8003b92:	4b26      	ldr	r3, [pc, #152]	@ (8003c2c <menu+0x2684>)
 8003b94:	2201      	movs	r2, #1
 8003b96:	701a      	strb	r2, [r3, #0]
		   	}
		   	resetMenuTexts();
 8003b98:	f003 ff4c 	bl	8007a34 <resetMenuTexts>
		   	loadMenuTexts(dilSecim);
 8003b9c:	4b23      	ldr	r3, [pc, #140]	@ (8003c2c <menu+0x2684>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f002 fac1 	bl	8006128 <loadMenuTexts>

			bekle();
 8003ba6:	f000 fa45 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003baa:	2108      	movs	r1, #8
 8003bac:	481d      	ldr	r0, [pc, #116]	@ (8003c24 <menu+0x267c>)
 8003bae:	f006 fd15 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d10e      	bne.n	8003bd6 <menu+0x262e>
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c28 <menu+0x2680>)
 8003bba:	781b      	ldrb	r3, [r3, #0]
 8003bbc:	f083 0301 	eor.w	r3, r3, #1
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d007      	beq.n	8003bd6 <menu+0x262e>
			eepromData[33] = dilSecim;
 8003bc6:	4b19      	ldr	r3, [pc, #100]	@ (8003c2c <menu+0x2684>)
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	4b0e      	ldr	r3, [pc, #56]	@ (8003c04 <menu+0x265c>)
 8003bcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 8003bd0:	4b10      	ldr	r3, [pc, #64]	@ (8003c14 <menu+0x266c>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003bd6:	4b10      	ldr	r3, [pc, #64]	@ (8003c18 <menu+0x2670>)
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b1f      	cmp	r3, #31
 8003bdc:	f040 8087 	bne.w	8003cee <menu+0x2746>
		calismaSayModu = 0;
 8003be0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c10 <menu+0x2668>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 8003be6:	4a12      	ldr	r2, [pc, #72]	@ (8003c30 <menu+0x2688>)
 8003be8:	2101      	movs	r1, #1
 8003bea:	2001      	movs	r0, #1
 8003bec:	f005 f9cc 	bl	8008f88 <lcd_print>

		if(iotMode == 0) {
 8003bf0:	4b10      	ldr	r3, [pc, #64]	@ (8003c34 <menu+0x268c>)
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d121      	bne.n	8003c3c <menu+0x2694>
			lcd_print(2, 1, pasifText);
 8003bf8:	4a0f      	ldr	r2, [pc, #60]	@ (8003c38 <menu+0x2690>)
 8003bfa:	2101      	movs	r1, #1
 8003bfc:	2002      	movs	r0, #2
 8003bfe:	f005 f9c3 	bl	8008f88 <lcd_print>
 8003c02:	e024      	b.n	8003c4e <menu+0x26a6>
 8003c04:	20000fec 	.word	0x20000fec
 8003c08:	200010b4 	.word	0x200010b4
 8003c0c:	200010b6 	.word	0x200010b6
 8003c10:	200010db 	.word	0x200010db
 8003c14:	200010e9 	.word	0x200010e9
 8003c18:	200010bc 	.word	0x200010bc
 8003c1c:	20001734 	.word	0x20001734
 8003c20:	20001748 	.word	0x20001748
 8003c24:	40010800 	.word	0x40010800
 8003c28:	200010ec 	.word	0x200010ec
 8003c2c:	200010dc 	.word	0x200010dc
 8003c30:	20000150 	.word	0x20000150
 8003c34:	200010e7 	.word	0x200010e7
 8003c38:	2000139c 	.word	0x2000139c
		} else if(iotMode == 1) {
 8003c3c:	4b99      	ldr	r3, [pc, #612]	@ (8003ea4 <menu+0x28fc>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d104      	bne.n	8003c4e <menu+0x26a6>
			lcd_print(2, 1, aktifText);
 8003c44:	4a98      	ldr	r2, [pc, #608]	@ (8003ea8 <menu+0x2900>)
 8003c46:	2101      	movs	r1, #1
 8003c48:	2002      	movs	r0, #2
 8003c4a:	f005 f99d 	bl	8008f88 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c4e:	2102      	movs	r1, #2
 8003c50:	4896      	ldr	r0, [pc, #600]	@ (8003eac <menu+0x2904>)
 8003c52:	f006 fcc3 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d115      	bne.n	8003c88 <menu+0x26e0>
 8003c5c:	4b94      	ldr	r3, [pc, #592]	@ (8003eb0 <menu+0x2908>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	f083 0301 	eor.w	r3, r3, #1
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00e      	beq.n	8003c88 <menu+0x26e0>
			iotMode = iotMode + 1;
 8003c6a:	4b8e      	ldr	r3, [pc, #568]	@ (8003ea4 <menu+0x28fc>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	4b8c      	ldr	r3, [pc, #560]	@ (8003ea4 <menu+0x28fc>)
 8003c74:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8003c76:	4b8b      	ldr	r3, [pc, #556]	@ (8003ea4 <menu+0x28fc>)
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d902      	bls.n	8003c84 <menu+0x26dc>
				iotMode = 0;
 8003c7e:	4b89      	ldr	r3, [pc, #548]	@ (8003ea4 <menu+0x28fc>)
 8003c80:	2200      	movs	r2, #0
 8003c82:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003c84:	f000 f9d6 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c88:	2104      	movs	r1, #4
 8003c8a:	4888      	ldr	r0, [pc, #544]	@ (8003eac <menu+0x2904>)
 8003c8c:	f006 fca6 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d115      	bne.n	8003cc2 <menu+0x271a>
 8003c96:	4b86      	ldr	r3, [pc, #536]	@ (8003eb0 <menu+0x2908>)
 8003c98:	781b      	ldrb	r3, [r3, #0]
 8003c9a:	f083 0301 	eor.w	r3, r3, #1
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00e      	beq.n	8003cc2 <menu+0x271a>
			iotMode = iotMode - 1;
 8003ca4:	4b7f      	ldr	r3, [pc, #508]	@ (8003ea4 <menu+0x28fc>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	4b7d      	ldr	r3, [pc, #500]	@ (8003ea4 <menu+0x28fc>)
 8003cae:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003cb0:	4b7c      	ldr	r3, [pc, #496]	@ (8003ea4 <menu+0x28fc>)
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <menu+0x2716>
		   		iotMode = 1;
 8003cb8:	4b7a      	ldr	r3, [pc, #488]	@ (8003ea4 <menu+0x28fc>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003cbe:	f000 f9b9 	bl	8004034 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cc2:	2108      	movs	r1, #8
 8003cc4:	4879      	ldr	r0, [pc, #484]	@ (8003eac <menu+0x2904>)
 8003cc6:	f006 fc89 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d10e      	bne.n	8003cee <menu+0x2746>
 8003cd0:	4b77      	ldr	r3, [pc, #476]	@ (8003eb0 <menu+0x2908>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	f083 0301 	eor.w	r3, r3, #1
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <menu+0x2746>
			eepromData[48] = iotMode;
 8003cde:	4b71      	ldr	r3, [pc, #452]	@ (8003ea4 <menu+0x28fc>)
 8003ce0:	781a      	ldrb	r2, [r3, #0]
 8003ce2:	4b74      	ldr	r3, [pc, #464]	@ (8003eb4 <menu+0x290c>)
 8003ce4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003ce8:	4b73      	ldr	r3, [pc, #460]	@ (8003eb8 <menu+0x2910>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003cee:	4b73      	ldr	r3, [pc, #460]	@ (8003ebc <menu+0x2914>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	d127      	bne.n	8003d46 <menu+0x279e>
		calismaSayModu = 0;
 8003cf6:	4b72      	ldr	r3, [pc, #456]	@ (8003ec0 <menu+0x2918>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, machineIDText);
 8003cfc:	4a71      	ldr	r2, [pc, #452]	@ (8003ec4 <menu+0x291c>)
 8003cfe:	2101      	movs	r1, #1
 8003d00:	2001      	movs	r0, #1
 8003d02:	f005 f941 	bl	8008f88 <lcd_print>

		convertArrays(1);
 8003d06:	2001      	movs	r0, #1
 8003d08:	f7fc fdd6 	bl	80008b8 <convertArrays>
		HAL_Delay(50);
 8003d0c:	2032      	movs	r0, #50	@ 0x32
 8003d0e:	f005 fe95 	bl	8009a3c <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8003d12:	2001      	movs	r0, #1
 8003d14:	f7fd fbec 	bl	80014f0 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d18:	2102      	movs	r1, #2
 8003d1a:	4864      	ldr	r0, [pc, #400]	@ (8003eac <menu+0x2904>)
 8003d1c:	f006 fc5e 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d10f      	bne.n	8003d46 <menu+0x279e>
 8003d26:	2104      	movs	r1, #4
 8003d28:	4860      	ldr	r0, [pc, #384]	@ (8003eac <menu+0x2904>)
 8003d2a:	f006 fc57 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d108      	bne.n	8003d46 <menu+0x279e>
 8003d34:	4b5e      	ldr	r3, [pc, #376]	@ (8003eb0 <menu+0x2908>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	f083 0301 	eor.w	r3, r3, #1
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <menu+0x279e>
			takeMachineIDWithConfirmation();
 8003d42:	f004 f8eb 	bl	8007f1c <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 8003d46:	4b5d      	ldr	r3, [pc, #372]	@ (8003ebc <menu+0x2914>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b21      	cmp	r3, #33	@ 0x21
 8003d4c:	d12b      	bne.n	8003da6 <menu+0x27fe>
		calismaSayModu = 0;
 8003d4e:	4b5c      	ldr	r3, [pc, #368]	@ (8003ec0 <menu+0x2918>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 8003d54:	2002      	movs	r0, #2
 8003d56:	f7fc fdaf 	bl	80008b8 <convertArrays>
		HAL_Delay(50);
 8003d5a:	2032      	movs	r0, #50	@ 0x32
 8003d5c:	f005 fe6e 	bl	8009a3c <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003d60:	2002      	movs	r0, #2
 8003d62:	f7fd fbc5 	bl	80014f0 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d66:	2102      	movs	r1, #2
 8003d68:	4850      	ldr	r0, [pc, #320]	@ (8003eac <menu+0x2904>)
 8003d6a:	f006 fc37 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d118      	bne.n	8003da6 <menu+0x27fe>
 8003d74:	2104      	movs	r1, #4
 8003d76:	484d      	ldr	r0, [pc, #308]	@ (8003eac <menu+0x2904>)
 8003d78:	f006 fc30 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d111      	bne.n	8003da6 <menu+0x27fe>
 8003d82:	4b4b      	ldr	r3, [pc, #300]	@ (8003eb0 <menu+0x2908>)
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	f083 0301 	eor.w	r3, r3, #1
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d00a      	beq.n	8003da6 <menu+0x27fe>
			takeWifiSSID();
 8003d90:	f004 faba 	bl	8008308 <takeWifiSSID>

			convertArrays(2);
 8003d94:	2002      	movs	r0, #2
 8003d96:	f7fc fd8f 	bl	80008b8 <convertArrays>
			HAL_Delay(50);
 8003d9a:	2032      	movs	r0, #50	@ 0x32
 8003d9c:	f005 fe4e 	bl	8009a3c <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003da0:	2002      	movs	r0, #2
 8003da2:	f7fd fba5 	bl	80014f0 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003da6:	4b45      	ldr	r3, [pc, #276]	@ (8003ebc <menu+0x2914>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b22      	cmp	r3, #34	@ 0x22
 8003dac:	d12b      	bne.n	8003e06 <menu+0x285e>
		calismaSayModu = 0;
 8003dae:	4b44      	ldr	r3, [pc, #272]	@ (8003ec0 <menu+0x2918>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8003db4:	2003      	movs	r0, #3
 8003db6:	f7fc fd7f 	bl	80008b8 <convertArrays>
		HAL_Delay(50);
 8003dba:	2032      	movs	r0, #50	@ 0x32
 8003dbc:	f005 fe3e 	bl	8009a3c <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003dc0:	2003      	movs	r0, #3
 8003dc2:	f7fd fb95 	bl	80014f0 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dc6:	2102      	movs	r1, #2
 8003dc8:	4838      	ldr	r0, [pc, #224]	@ (8003eac <menu+0x2904>)
 8003dca:	f006 fc07 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d118      	bne.n	8003e06 <menu+0x285e>
 8003dd4:	2104      	movs	r1, #4
 8003dd6:	4835      	ldr	r0, [pc, #212]	@ (8003eac <menu+0x2904>)
 8003dd8:	f006 fc00 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d111      	bne.n	8003e06 <menu+0x285e>
 8003de2:	4b33      	ldr	r3, [pc, #204]	@ (8003eb0 <menu+0x2908>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	f083 0301 	eor.w	r3, r3, #1
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d00a      	beq.n	8003e06 <menu+0x285e>
			takeWifiPass();
 8003df0:	f004 fc36 	bl	8008660 <takeWifiPass>

			convertArrays(3);
 8003df4:	2003      	movs	r0, #3
 8003df6:	f7fc fd5f 	bl	80008b8 <convertArrays>
			HAL_Delay(50);
 8003dfa:	2032      	movs	r0, #50	@ 0x32
 8003dfc:	f005 fe1e 	bl	8009a3c <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8003e00:	2003      	movs	r0, #3
 8003e02:	f7fd fb75 	bl	80014f0 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8003e06:	4b2d      	ldr	r3, [pc, #180]	@ (8003ebc <menu+0x2914>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b23      	cmp	r3, #35	@ 0x23
 8003e0c:	d146      	bne.n	8003e9c <menu+0x28f4>
		lcd_print(1, 1, menudenCikisText);
 8003e0e:	4a2e      	ldr	r2, [pc, #184]	@ (8003ec8 <menu+0x2920>)
 8003e10:	2101      	movs	r1, #1
 8003e12:	2001      	movs	r0, #1
 8003e14:	f005 f8b8 	bl	8008f88 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003e18:	4a2c      	ldr	r2, [pc, #176]	@ (8003ecc <menu+0x2924>)
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	2002      	movs	r0, #2
 8003e1e:	f005 f8b3 	bl	8008f88 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003e22:	2108      	movs	r1, #8
 8003e24:	4821      	ldr	r0, [pc, #132]	@ (8003eac <menu+0x2904>)
 8003e26:	f006 fbd9 	bl	800a5dc <HAL_GPIO_ReadPin>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d135      	bne.n	8003e9c <menu+0x28f4>
			menuGiris = 0;
 8003e30:	4b27      	ldr	r3, [pc, #156]	@ (8003ed0 <menu+0x2928>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]

			uint32_t startTick = HAL_GetTick();
 8003e36:	f005 fdf7 	bl	8009a28 <HAL_GetTick>
 8003e3a:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003e3c:	e007      	b.n	8003e4e <menu+0x28a6>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003e3e:	f005 fdf3 	bl	8009a28 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e4c:	d806      	bhi.n	8003e5c <menu+0x28b4>
			while (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF) {
 8003e4e:	4821      	ldr	r0, [pc, #132]	@ (8003ed4 <menu+0x292c>)
 8003e50:	f007 f9ed 	bl	800b22e <HAL_I2C_GetError>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d0f1      	beq.n	8003e3e <menu+0x2896>
 8003e5a:	e000      	b.n	8003e5e <menu+0x28b6>
			        break;
 8003e5c:	bf00      	nop
			    }
			}

			startTick = HAL_GetTick();
 8003e5e:	f005 fde3 	bl	8009a28 <HAL_GetTick>
 8003e62:	6078      	str	r0, [r7, #4]
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003e64:	e007      	b.n	8003e76 <menu+0x28ce>
			    if (HAL_GetTick() - startTick > 1000) {  // 1 saniye zaman aşımı
 8003e66:	f005 fddf 	bl	8009a28 <HAL_GetTick>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	1ad3      	subs	r3, r2, r3
 8003e70:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003e74:	d806      	bhi.n	8003e84 <menu+0x28dc>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8003e76:	4817      	ldr	r0, [pc, #92]	@ (8003ed4 <menu+0x292c>)
 8003e78:	f007 f9cc 	bl	800b214 <HAL_I2C_GetState>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b20      	cmp	r3, #32
 8003e80:	d1f1      	bne.n	8003e66 <menu+0x28be>
 8003e82:	e000      	b.n	8003e86 <menu+0x28de>
			        break;
 8003e84:	bf00      	nop
			    }
			}

			saveEEPROM(0);
 8003e86:	2000      	movs	r0, #0
 8003e88:	f7fc fc14 	bl	80006b4 <saveEEPROM>

			lcd_clear();
 8003e8c:	f005 f8a8 	bl	8008fe0 <lcd_clear>
			HAL_Delay(500);
 8003e90:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003e94:	f005 fdd2 	bl	8009a3c <HAL_Delay>
			NVIC_SystemReset();
 8003e98:	f7fd fb70 	bl	800157c <__NVIC_SystemReset>
		}
	}
}
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	200010e7 	.word	0x200010e7
 8003ea8:	200013b0 	.word	0x200013b0
 8003eac:	40010800 	.word	0x40010800
 8003eb0:	200010ec 	.word	0x200010ec
 8003eb4:	20000fec 	.word	0x20000fec
 8003eb8:	200010e9 	.word	0x200010e9
 8003ebc:	200010bc 	.word	0x200010bc
 8003ec0:	200010db 	.word	0x200010db
 8003ec4:	200018c4 	.word	0x200018c4
 8003ec8:	2000175c 	.word	0x2000175c
 8003ecc:	20001770 	.word	0x20001770
 8003ed0:	200010d9 	.word	0x200010d9
 8003ed4:	2000193c 	.word	0x2000193c

08003ed8 <displayCycleOnLCD>:

void displayCycleOnLCD(int finalCount) {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08a      	sub	sp, #40	@ 0x28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
    int padding, i;

    itoa(finalCount, snum, 10);
 8003ee0:	220a      	movs	r2, #10
 8003ee2:	491c      	ldr	r1, [pc, #112]	@ (8003f54 <displayCycleOnLCD+0x7c>)
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f009 fba5 	bl	800d634 <itoa>

    int length = strlen(snum);
 8003eea:	481a      	ldr	r0, [pc, #104]	@ (8003f54 <displayCycleOnLCD+0x7c>)
 8003eec:	f7fc f99a 	bl	8000224 <strlen>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	623b      	str	r3, [r7, #32]

    padding = (16 - length) / 2;
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	f1c3 0310 	rsb	r3, r3, #16
 8003efa:	0fda      	lsrs	r2, r3, #31
 8003efc:	4413      	add	r3, r2
 8003efe:	105b      	asrs	r3, r3, #1
 8003f00:	61fb      	str	r3, [r7, #28]

    char displayLine[17];
    memset(displayLine, ' ', 16);
 8003f02:	f107 0308 	add.w	r3, r7, #8
 8003f06:	2210      	movs	r2, #16
 8003f08:	2120      	movs	r1, #32
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f009 fcce 	bl	800d8ac <memset>
    displayLine[16] = '\0'; // Null terminator
 8003f10:	2300      	movs	r3, #0
 8003f12:	763b      	strb	r3, [r7, #24]

    for (i = 0; i < length; i++) {
 8003f14:	2300      	movs	r3, #0
 8003f16:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f18:	e00d      	b.n	8003f36 <displayCycleOnLCD+0x5e>
        displayLine[padding + i] = snum[i];
 8003f1a:	69fa      	ldr	r2, [r7, #28]
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1e:	4413      	add	r3, r2
 8003f20:	490c      	ldr	r1, [pc, #48]	@ (8003f54 <displayCycleOnLCD+0x7c>)
 8003f22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f24:	440a      	add	r2, r1
 8003f26:	7812      	ldrb	r2, [r2, #0]
 8003f28:	3328      	adds	r3, #40	@ 0x28
 8003f2a:	443b      	add	r3, r7
 8003f2c:	f803 2c20 	strb.w	r2, [r3, #-32]
    for (i = 0; i < length; i++) {
 8003f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f32:	3301      	adds	r3, #1
 8003f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	dbed      	blt.n	8003f1a <displayCycleOnLCD+0x42>
    }

    lcd_print(2, 1, displayLine);
 8003f3e:	f107 0308 	add.w	r3, r7, #8
 8003f42:	461a      	mov	r2, r3
 8003f44:	2101      	movs	r1, #1
 8003f46:	2002      	movs	r0, #2
 8003f48:	f005 f81e 	bl	8008f88 <lcd_print>
}
 8003f4c:	bf00      	nop
 8003f4e:	3728      	adds	r7, #40	@ 0x28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	2000105c 	.word	0x2000105c

08003f58 <lcdUpdate>:
#include "EEPROMProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b082      	sub	sp, #8
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d105      	bne.n	8003f74 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003f68:	4a24      	ldr	r2, [pc, #144]	@ (8003ffc <lcdUpdate+0xa4>)
 8003f6a:	2101      	movs	r1, #1
 8003f6c:	2002      	movs	r0, #2
 8003f6e:	f005 f80b 	bl	8008f88 <lcd_print>
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
		HAL_Delay(10);
	}
}
 8003f72:	e03e      	b.n	8003ff2 <lcdUpdate+0x9a>
	} else if(y==2) {
 8003f74:	79fb      	ldrb	r3, [r7, #7]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d105      	bne.n	8003f86 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003f7a:	4a20      	ldr	r2, [pc, #128]	@ (8003ffc <lcdUpdate+0xa4>)
 8003f7c:	2102      	movs	r1, #2
 8003f7e:	2002      	movs	r0, #2
 8003f80:	f005 f802 	bl	8008f88 <lcd_print>
}
 8003f84:	e035      	b.n	8003ff2 <lcdUpdate+0x9a>
	} else if(y==3) {
 8003f86:	79fb      	ldrb	r3, [r7, #7]
 8003f88:	2b03      	cmp	r3, #3
 8003f8a:	d105      	bne.n	8003f98 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003f8c:	4a1b      	ldr	r2, [pc, #108]	@ (8003ffc <lcdUpdate+0xa4>)
 8003f8e:	2103      	movs	r1, #3
 8003f90:	2002      	movs	r0, #2
 8003f92:	f004 fff9 	bl	8008f88 <lcd_print>
}
 8003f96:	e02c      	b.n	8003ff2 <lcdUpdate+0x9a>
	} else if(y==4) {
 8003f98:	79fb      	ldrb	r3, [r7, #7]
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d105      	bne.n	8003faa <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003f9e:	4a17      	ldr	r2, [pc, #92]	@ (8003ffc <lcdUpdate+0xa4>)
 8003fa0:	2104      	movs	r1, #4
 8003fa2:	2002      	movs	r0, #2
 8003fa4:	f004 fff0 	bl	8008f88 <lcd_print>
}
 8003fa8:	e023      	b.n	8003ff2 <lcdUpdate+0x9a>
	} else if(y==5) {
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	2b05      	cmp	r3, #5
 8003fae:	d105      	bne.n	8003fbc <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003fb0:	4a12      	ldr	r2, [pc, #72]	@ (8003ffc <lcdUpdate+0xa4>)
 8003fb2:	2105      	movs	r1, #5
 8003fb4:	2002      	movs	r0, #2
 8003fb6:	f004 ffe7 	bl	8008f88 <lcd_print>
}
 8003fba:	e01a      	b.n	8003ff2 <lcdUpdate+0x9a>
	} else if(y==6) {
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	2b06      	cmp	r3, #6
 8003fc0:	d105      	bne.n	8003fce <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8003fc2:	4a0e      	ldr	r2, [pc, #56]	@ (8003ffc <lcdUpdate+0xa4>)
 8003fc4:	2106      	movs	r1, #6
 8003fc6:	2002      	movs	r0, #2
 8003fc8:	f004 ffde 	bl	8008f88 <lcd_print>
}
 8003fcc:	e011      	b.n	8003ff2 <lcdUpdate+0x9a>
	} else if (y==7) {
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	2b07      	cmp	r3, #7
 8003fd2:	d10e      	bne.n	8003ff2 <lcdUpdate+0x9a>
		lcd_clear();
 8003fd4:	f005 f804 	bl	8008fe0 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8003fd8:	4a09      	ldr	r2, [pc, #36]	@ (8004000 <lcdUpdate+0xa8>)
 8003fda:	2101      	movs	r1, #1
 8003fdc:	2001      	movs	r0, #1
 8003fde:	f004 ffd3 	bl	8008f88 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8003fe2:	4a08      	ldr	r2, [pc, #32]	@ (8004004 <lcdUpdate+0xac>)
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	2002      	movs	r0, #2
 8003fe8:	f004 ffce 	bl	8008f88 <lcd_print>
		HAL_Delay(10);
 8003fec:	200a      	movs	r0, #10
 8003fee:	f005 fd25 	bl	8009a3c <HAL_Delay>
}
 8003ff2:	bf00      	nop
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	0800ebb8 	.word	0x0800ebb8
 8004000:	200000c4 	.word	0x200000c4
 8004004:	200000d8 	.word	0x200000d8

08004008 <checkLCDBacklight>:

void checkLCDBacklight() {
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 800400c:	4b07      	ldr	r3, [pc, #28]	@ (800402c <checkLCDBacklight+0x24>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	4b07      	ldr	r3, [pc, #28]	@ (8004030 <checkLCDBacklight+0x28>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b3b      	cmp	r3, #59	@ 0x3b
 8004018:	d903      	bls.n	8004022 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 800401a:	2000      	movs	r0, #0
 800401c:	f005 f800 	bl	8009020 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8004020:	e002      	b.n	8004028 <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8004022:	2001      	movs	r0, #1
 8004024:	f004 fffc 	bl	8009020 <lcd_backlight>
}
 8004028:	bf00      	nop
 800402a:	bd80      	pop	{r7, pc}
 800402c:	20001094 	.word	0x20001094
 8004030:	200010b0 	.word	0x200010b0

08004034 <bekle>:

void bekle() {
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
	timer1=millis;
 8004038:	4b47      	ldr	r3, [pc, #284]	@ (8004158 <bekle+0x124>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a47      	ldr	r2, [pc, #284]	@ (800415c <bekle+0x128>)
 800403e:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004040:	e002      	b.n	8004048 <bekle+0x14>
    	butonKontrol = 1;
 8004042:	4b47      	ldr	r3, [pc, #284]	@ (8004160 <bekle+0x12c>)
 8004044:	2201      	movs	r2, #1
 8004046:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004048:	2101      	movs	r1, #1
 800404a:	4846      	ldr	r0, [pc, #280]	@ (8004164 <bekle+0x130>)
 800404c:	f006 fac6 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004050:	4603      	mov	r3, r0
 8004052:	2b01      	cmp	r3, #1
 8004054:	d109      	bne.n	800406a <bekle+0x36>
 8004056:	4b40      	ldr	r3, [pc, #256]	@ (8004158 <bekle+0x124>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	4b40      	ldr	r3, [pc, #256]	@ (800415c <bekle+0x128>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	429a      	cmp	r2, r3
 8004060:	d0ef      	beq.n	8004042 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004062:	e002      	b.n	800406a <bekle+0x36>
    	butonKontrol = 1;
 8004064:	4b3e      	ldr	r3, [pc, #248]	@ (8004160 <bekle+0x12c>)
 8004066:	2201      	movs	r2, #1
 8004068:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800406a:	2108      	movs	r1, #8
 800406c:	483e      	ldr	r0, [pc, #248]	@ (8004168 <bekle+0x134>)
 800406e:	f006 fab5 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004072:	4603      	mov	r3, r0
 8004074:	2b01      	cmp	r3, #1
 8004076:	d109      	bne.n	800408c <bekle+0x58>
 8004078:	4b37      	ldr	r3, [pc, #220]	@ (8004158 <bekle+0x124>)
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	4b37      	ldr	r3, [pc, #220]	@ (800415c <bekle+0x128>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	429a      	cmp	r2, r3
 8004082:	d0ef      	beq.n	8004064 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004084:	e002      	b.n	800408c <bekle+0x58>
    	butonKontrol = 1;
 8004086:	4b36      	ldr	r3, [pc, #216]	@ (8004160 <bekle+0x12c>)
 8004088:	2201      	movs	r2, #1
 800408a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800408c:	2102      	movs	r1, #2
 800408e:	4835      	ldr	r0, [pc, #212]	@ (8004164 <bekle+0x130>)
 8004090:	f006 faa4 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004094:	4603      	mov	r3, r0
 8004096:	2b01      	cmp	r3, #1
 8004098:	d109      	bne.n	80040ae <bekle+0x7a>
 800409a:	4b2f      	ldr	r3, [pc, #188]	@ (8004158 <bekle+0x124>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	4b2f      	ldr	r3, [pc, #188]	@ (800415c <bekle+0x128>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d0ef      	beq.n	8004086 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80040a6:	e002      	b.n	80040ae <bekle+0x7a>
    	butonKontrol = 1;
 80040a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004160 <bekle+0x12c>)
 80040aa:	2201      	movs	r2, #1
 80040ac:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80040ae:	2104      	movs	r1, #4
 80040b0:	482c      	ldr	r0, [pc, #176]	@ (8004164 <bekle+0x130>)
 80040b2:	f006 fa93 	bl	800a5dc <HAL_GPIO_ReadPin>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d109      	bne.n	80040d0 <bekle+0x9c>
 80040bc:	4b26      	ldr	r3, [pc, #152]	@ (8004158 <bekle+0x124>)
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	4b26      	ldr	r3, [pc, #152]	@ (800415c <bekle+0x128>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d0ef      	beq.n	80040a8 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80040c8:	e002      	b.n	80040d0 <bekle+0x9c>
    	butonKontrol = 1;
 80040ca:	4b25      	ldr	r3, [pc, #148]	@ (8004160 <bekle+0x12c>)
 80040cc:	2201      	movs	r2, #1
 80040ce:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80040d0:	2108      	movs	r1, #8
 80040d2:	4824      	ldr	r0, [pc, #144]	@ (8004164 <bekle+0x130>)
 80040d4:	f006 fa82 	bl	800a5dc <HAL_GPIO_ReadPin>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d109      	bne.n	80040f2 <bekle+0xbe>
 80040de:	4b1e      	ldr	r3, [pc, #120]	@ (8004158 <bekle+0x124>)
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	4b1e      	ldr	r3, [pc, #120]	@ (800415c <bekle+0x128>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d0ef      	beq.n	80040ca <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80040ea:	e002      	b.n	80040f2 <bekle+0xbe>
    	butonKontrol = 1;
 80040ec:	4b1c      	ldr	r3, [pc, #112]	@ (8004160 <bekle+0x12c>)
 80040ee:	2201      	movs	r2, #1
 80040f0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80040f2:	2180      	movs	r1, #128	@ 0x80
 80040f4:	481c      	ldr	r0, [pc, #112]	@ (8004168 <bekle+0x134>)
 80040f6:	f006 fa71 	bl	800a5dc <HAL_GPIO_ReadPin>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d109      	bne.n	8004114 <bekle+0xe0>
 8004100:	4b15      	ldr	r3, [pc, #84]	@ (8004158 <bekle+0x124>)
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	4b15      	ldr	r3, [pc, #84]	@ (800415c <bekle+0x128>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	429a      	cmp	r2, r3
 800410a:	d0ef      	beq.n	80040ec <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800410c:	e002      	b.n	8004114 <bekle+0xe0>
    	butonKontrol = 1;
 800410e:	4b14      	ldr	r3, [pc, #80]	@ (8004160 <bekle+0x12c>)
 8004110:	2201      	movs	r2, #1
 8004112:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004114:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004118:	4813      	ldr	r0, [pc, #76]	@ (8004168 <bekle+0x134>)
 800411a:	f006 fa5f 	bl	800a5dc <HAL_GPIO_ReadPin>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d109      	bne.n	8004138 <bekle+0x104>
 8004124:	4b0c      	ldr	r3, [pc, #48]	@ (8004158 <bekle+0x124>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	4b0c      	ldr	r3, [pc, #48]	@ (800415c <bekle+0x128>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	429a      	cmp	r2, r3
 800412e:	d0ee      	beq.n	800410e <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004130:	e002      	b.n	8004138 <bekle+0x104>
    	butonKontrol = 1;
 8004132:	4b0b      	ldr	r3, [pc, #44]	@ (8004160 <bekle+0x12c>)
 8004134:	2201      	movs	r2, #1
 8004136:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8004138:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800413c:	480a      	ldr	r0, [pc, #40]	@ (8004168 <bekle+0x134>)
 800413e:	f006 fa4d 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d105      	bne.n	8004154 <bekle+0x120>
 8004148:	4b03      	ldr	r3, [pc, #12]	@ (8004158 <bekle+0x124>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	4b03      	ldr	r3, [pc, #12]	@ (800415c <bekle+0x128>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d0ee      	beq.n	8004132 <bekle+0xfe>
    }

}
 8004154:	bf00      	nop
 8004156:	bd80      	pop	{r7, pc}
 8004158:	20001094 	.word	0x20001094
 800415c:	2000109c 	.word	0x2000109c
 8004160:	200010ec 	.word	0x200010ec
 8004164:	40010800 	.word	0x40010800
 8004168:	40011000 	.word	0x40011000

0800416c <buttonCheck>:

uint8_t buttonCheck(void) {
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8004170:	2101      	movs	r1, #1
 8004172:	4815      	ldr	r0, [pc, #84]	@ (80041c8 <buttonCheck+0x5c>)
 8004174:	f006 fa32 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004178:	4603      	mov	r3, r0
 800417a:	2b01      	cmp	r3, #1
 800417c:	d01b      	beq.n	80041b6 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 800417e:	2108      	movs	r1, #8
 8004180:	4812      	ldr	r0, [pc, #72]	@ (80041cc <buttonCheck+0x60>)
 8004182:	f006 fa2b 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004186:	4603      	mov	r3, r0
 8004188:	2b01      	cmp	r3, #1
 800418a:	d014      	beq.n	80041b6 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 800418c:	2102      	movs	r1, #2
 800418e:	480e      	ldr	r0, [pc, #56]	@ (80041c8 <buttonCheck+0x5c>)
 8004190:	f006 fa24 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004194:	4603      	mov	r3, r0
 8004196:	2b01      	cmp	r3, #1
 8004198:	d00d      	beq.n	80041b6 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 800419a:	2104      	movs	r1, #4
 800419c:	480a      	ldr	r0, [pc, #40]	@ (80041c8 <buttonCheck+0x5c>)
 800419e:	f006 fa1d 	bl	800a5dc <HAL_GPIO_ReadPin>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d006      	beq.n	80041b6 <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 80041a8:	2108      	movs	r1, #8
 80041aa:	4807      	ldr	r0, [pc, #28]	@ (80041c8 <buttonCheck+0x5c>)
 80041ac:	f006 fa16 	bl	800a5dc <HAL_GPIO_ReadPin>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d104      	bne.n	80041c0 <buttonCheck+0x54>
		backLightTimer = 0;
 80041b6:	4b06      	ldr	r3, [pc, #24]	@ (80041d0 <buttonCheck+0x64>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	601a      	str	r2, [r3, #0]
		return 1;
 80041bc:	2301      	movs	r3, #1
 80041be:	e000      	b.n	80041c2 <buttonCheck+0x56>
	}
	return 0;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40010800 	.word	0x40010800
 80041cc:	40011000 	.word	0x40011000
 80041d0:	200010b0 	.word	0x200010b0

080041d4 <checkBasincSalteri>:

void checkBasincSalteri() {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80041d8:	4b13      	ldr	r3, [pc, #76]	@ (8004228 <checkBasincSalteri+0x54>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <checkBasincSalteri+0x12>
		basincVar=1;
 80041e0:	4b12      	ldr	r3, [pc, #72]	@ (800422c <checkBasincSalteri+0x58>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 80041e6:	4b10      	ldr	r3, [pc, #64]	@ (8004228 <checkBasincSalteri+0x54>)
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d119      	bne.n	8004222 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80041ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80041f2:	480f      	ldr	r0, [pc, #60]	@ (8004230 <checkBasincSalteri+0x5c>)
 80041f4:	f006 f9f2 	bl	800a5dc <HAL_GPIO_ReadPin>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10a      	bne.n	8004214 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 80041fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004234 <checkBasincSalteri+0x60>)
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4b0d      	ldr	r3, [pc, #52]	@ (8004238 <checkBasincSalteri+0x64>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d90a      	bls.n	8004222 <checkBasincSalteri+0x4e>
				basincVar=1;
 800420c:	4b07      	ldr	r3, [pc, #28]	@ (800422c <checkBasincSalteri+0x58>)
 800420e:	2201      	movs	r2, #1
 8004210:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8004212:	e006      	b.n	8004222 <checkBasincSalteri+0x4e>
			timer5=millis;
 8004214:	4b07      	ldr	r3, [pc, #28]	@ (8004234 <checkBasincSalteri+0x60>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a07      	ldr	r2, [pc, #28]	@ (8004238 <checkBasincSalteri+0x64>)
 800421a:	6013      	str	r3, [r2, #0]
			basincVar=0;
 800421c:	4b03      	ldr	r3, [pc, #12]	@ (800422c <checkBasincSalteri+0x58>)
 800421e:	2200      	movs	r2, #0
 8004220:	701a      	strb	r2, [r3, #0]
}
 8004222:	bf00      	nop
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	200010c3 	.word	0x200010c3
 800422c:	200010bf 	.word	0x200010bf
 8004230:	40011000 	.word	0x40011000
 8004234:	20001094 	.word	0x20001094
 8004238:	200010ac 	.word	0x200010ac

0800423c <checkBasGonder>:

void checkBasGonder() {
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004240:	4b1b      	ldr	r3, [pc, #108]	@ (80042b0 <checkBasGonder+0x74>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d10b      	bne.n	8004260 <checkBasGonder+0x24>
 8004248:	4b1a      	ldr	r3, [pc, #104]	@ (80042b4 <checkBasGonder+0x78>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d007      	beq.n	8004260 <checkBasGonder+0x24>
 8004250:	4b19      	ldr	r3, [pc, #100]	@ (80042b8 <checkBasGonder+0x7c>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d103      	bne.n	8004260 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8004258:	4b18      	ldr	r3, [pc, #96]	@ (80042bc <checkBasGonder+0x80>)
 800425a:	2201      	movs	r2, #1
 800425c:	701a      	strb	r2, [r3, #0]
 800425e:	e009      	b.n	8004274 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8004260:	4b14      	ldr	r3, [pc, #80]	@ (80042b4 <checkBasGonder+0x78>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	f083 0301 	eor.w	r3, r3, #1
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 800426e:	4b13      	ldr	r3, [pc, #76]	@ (80042bc <checkBasGonder+0x80>)
 8004270:	2200      	movs	r2, #0
 8004272:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8004274:	4b0e      	ldr	r3, [pc, #56]	@ (80042b0 <checkBasGonder+0x74>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d10b      	bne.n	8004294 <checkBasGonder+0x58>
 800427c:	4b10      	ldr	r3, [pc, #64]	@ (80042c0 <checkBasGonder+0x84>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d007      	beq.n	8004294 <checkBasGonder+0x58>
 8004284:	4b0c      	ldr	r3, [pc, #48]	@ (80042b8 <checkBasGonder+0x7c>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d103      	bne.n	8004294 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 800428c:	4b0d      	ldr	r3, [pc, #52]	@ (80042c4 <checkBasGonder+0x88>)
 800428e:	2201      	movs	r2, #1
 8004290:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8004292:	e009      	b.n	80042a8 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8004294:	4b0a      	ldr	r3, [pc, #40]	@ (80042c0 <checkBasGonder+0x84>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	f083 0301 	eor.w	r3, r3, #1
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d002      	beq.n	80042a8 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 80042a2:	4b08      	ldr	r3, [pc, #32]	@ (80042c4 <checkBasGonder+0x88>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]
}
 80042a8:	bf00      	nop
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bc80      	pop	{r7}
 80042ae:	4770      	bx	lr
 80042b0:	200010bd 	.word	0x200010bd
 80042b4:	200010f2 	.word	0x200010f2
 80042b8:	200010cb 	.word	0x200010cb
 80042bc:	200010f9 	.word	0x200010f9
 80042c0:	200010f5 	.word	0x200010f5
 80042c4:	200010fa 	.word	0x200010fa

080042c8 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 80042c8:	b580      	push	{r7, lr}
 80042ca:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 80042cc:	4b24      	ldr	r3, [pc, #144]	@ (8004360 <checkKapiSecimleri+0x98>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d102      	bne.n	80042da <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 80042d4:	4b23      	ldr	r3, [pc, #140]	@ (8004364 <checkKapiSecimleri+0x9c>)
 80042d6:	2201      	movs	r2, #1
 80042d8:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 80042da:	4b21      	ldr	r3, [pc, #132]	@ (8004360 <checkKapiSecimleri+0x98>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d10e      	bne.n	8004300 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80042e2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80042e6:	4820      	ldr	r0, [pc, #128]	@ (8004368 <checkKapiSecimleri+0xa0>)
 80042e8:	f006 f978 	bl	800a5dc <HAL_GPIO_ReadPin>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d103      	bne.n	80042fa <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 80042f2:	4b1c      	ldr	r3, [pc, #112]	@ (8004364 <checkKapiSecimleri+0x9c>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	701a      	strb	r2, [r3, #0]
 80042f8:	e002      	b.n	8004300 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80042fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004364 <checkKapiSecimleri+0x9c>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8004300:	4b17      	ldr	r3, [pc, #92]	@ (8004360 <checkKapiSecimleri+0x98>)
 8004302:	781b      	ldrb	r3, [r3, #0]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d10e      	bne.n	8004326 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8004308:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800430c:	4816      	ldr	r0, [pc, #88]	@ (8004368 <checkKapiSecimleri+0xa0>)
 800430e:	f006 f965 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d103      	bne.n	8004320 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8004318:	4b12      	ldr	r3, [pc, #72]	@ (8004364 <checkKapiSecimleri+0x9c>)
 800431a:	2201      	movs	r2, #1
 800431c:	701a      	strb	r2, [r3, #0]
 800431e:	e002      	b.n	8004326 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004320:	4b10      	ldr	r3, [pc, #64]	@ (8004364 <checkKapiSecimleri+0x9c>)
 8004322:	2200      	movs	r2, #0
 8004324:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8004326:	4b0e      	ldr	r3, [pc, #56]	@ (8004360 <checkKapiSecimleri+0x98>)
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b03      	cmp	r3, #3
 800432c:	d116      	bne.n	800435c <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 800432e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004332:	480d      	ldr	r0, [pc, #52]	@ (8004368 <checkKapiSecimleri+0xa0>)
 8004334:	f006 f952 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10b      	bne.n	8004356 <checkKapiSecimleri+0x8e>
 800433e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004342:	4809      	ldr	r0, [pc, #36]	@ (8004368 <checkKapiSecimleri+0xa0>)
 8004344:	f006 f94a 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d103      	bne.n	8004356 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 800434e:	4b05      	ldr	r3, [pc, #20]	@ (8004364 <checkKapiSecimleri+0x9c>)
 8004350:	2201      	movs	r2, #1
 8004352:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004354:	e002      	b.n	800435c <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8004356:	4b03      	ldr	r3, [pc, #12]	@ (8004364 <checkKapiSecimleri+0x9c>)
 8004358:	2200      	movs	r2, #0
 800435a:	701a      	strb	r2, [r3, #0]
}
 800435c:	bf00      	nop
 800435e:	bd80      	pop	{r7, pc}
 8004360:	200010c4 	.word	0x200010c4
 8004364:	2000110f 	.word	0x2000110f
 8004368:	40010800 	.word	0x40010800

0800436c <checkAktifCalisma>:

void checkAktifCalisma() {
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004370:	4b66      	ldr	r3, [pc, #408]	@ (800450c <checkAktifCalisma+0x1a0>)
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	f041 8343 	bne.w	8005a00 <checkAktifCalisma+0x1694>
 800437a:	4b65      	ldr	r3, [pc, #404]	@ (8004510 <checkAktifCalisma+0x1a4>)
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	f041 833e 	bne.w	8005a00 <checkAktifCalisma+0x1694>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))
 8004384:	4b63      	ldr	r3, [pc, #396]	@ (8004514 <checkAktifCalisma+0x1a8>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d11a      	bne.n	80043c2 <checkAktifCalisma+0x56>
 800438c:	4b62      	ldr	r3, [pc, #392]	@ (8004518 <checkAktifCalisma+0x1ac>)
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d116      	bne.n	80043c2 <checkAktifCalisma+0x56>
 8004394:	4b61      	ldr	r3, [pc, #388]	@ (800451c <checkAktifCalisma+0x1b0>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00a      	beq.n	80043b2 <checkAktifCalisma+0x46>
 800439c:	4b60      	ldr	r3, [pc, #384]	@ (8004520 <checkAktifCalisma+0x1b4>)
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	f083 0301 	eor.w	r3, r3, #1
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <checkAktifCalisma+0x46>
 80043aa:	4b5e      	ldr	r3, [pc, #376]	@ (8004524 <checkAktifCalisma+0x1b8>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d007      	beq.n	80043c2 <checkAktifCalisma+0x56>
						||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)) {
 80043b2:	4b5d      	ldr	r3, [pc, #372]	@ (8004528 <checkAktifCalisma+0x1bc>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d01c      	beq.n	80043f4 <checkAktifCalisma+0x88>
 80043ba:	4b5c      	ldr	r3, [pc, #368]	@ (800452c <checkAktifCalisma+0x1c0>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d118      	bne.n	80043f4 <checkAktifCalisma+0x88>
 80043c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004530 <checkAktifCalisma+0x1c4>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d103      	bne.n	80043d2 <checkAktifCalisma+0x66>
 80043ca:	4b5a      	ldr	r3, [pc, #360]	@ (8004534 <checkAktifCalisma+0x1c8>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d010      	beq.n	80043f4 <checkAktifCalisma+0x88>
 80043d2:	4b59      	ldr	r3, [pc, #356]	@ (8004538 <checkAktifCalisma+0x1cc>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00c      	beq.n	80043f4 <checkAktifCalisma+0x88>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80043da:	2201      	movs	r2, #1
 80043dc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80043e0:	4856      	ldr	r0, [pc, #344]	@ (800453c <checkAktifCalisma+0x1d0>)
 80043e2:	f006 f912 	bl	800a60a <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 80043e6:	4b56      	ldr	r3, [pc, #344]	@ (8004540 <checkAktifCalisma+0x1d4>)
 80043e8:	2201      	movs	r2, #1
 80043ea:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 80043ec:	4b55      	ldr	r3, [pc, #340]	@ (8004544 <checkAktifCalisma+0x1d8>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	701a      	strb	r2, [r3, #0]
 80043f2:	e008      	b.n	8004406 <checkAktifCalisma+0x9a>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80043f4:	2200      	movs	r2, #0
 80043f6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80043fa:	4850      	ldr	r0, [pc, #320]	@ (800453c <checkAktifCalisma+0x1d0>)
 80043fc:	f006 f905 	bl	800a60a <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 8004400:	4b4f      	ldr	r3, [pc, #316]	@ (8004540 <checkAktifCalisma+0x1d4>)
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && ((EmnStopVar)||(stopVar)) && (kapiSivicVar)																			/********* motor calısması ***********/
 8004406:	4b42      	ldr	r3, [pc, #264]	@ (8004510 <checkAktifCalisma+0x1a4>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d164      	bne.n	80044d8 <checkAktifCalisma+0x16c>
 800440e:	4b49      	ldr	r3, [pc, #292]	@ (8004534 <checkAktifCalisma+0x1c8>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d103      	bne.n	800441e <checkAktifCalisma+0xb2>
 8004416:	4b46      	ldr	r3, [pc, #280]	@ (8004530 <checkAktifCalisma+0x1c4>)
 8004418:	781b      	ldrb	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d05c      	beq.n	80044d8 <checkAktifCalisma+0x16c>
 800441e:	4b46      	ldr	r3, [pc, #280]	@ (8004538 <checkAktifCalisma+0x1cc>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d058      	beq.n	80044d8 <checkAktifCalisma+0x16c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8004426:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800442a:	4844      	ldr	r0, [pc, #272]	@ (800453c <checkAktifCalisma+0x1d0>)
 800442c:	f006 f8d6 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <checkAktifCalisma+0xd2>
 8004436:	4b44      	ldr	r3, [pc, #272]	@ (8004548 <checkAktifCalisma+0x1dc>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d04c      	beq.n	80044d8 <checkAktifCalisma+0x16c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800443e:	2102      	movs	r1, #2
 8004440:	4842      	ldr	r0, [pc, #264]	@ (800454c <checkAktifCalisma+0x1e0>)
 8004442:	f006 f8cb 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d145      	bne.n	80044d8 <checkAktifCalisma+0x16c>
							&& (basincVar)
 800444c:	4b40      	ldr	r3, [pc, #256]	@ (8004550 <checkAktifCalisma+0x1e4>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d041      	beq.n	80044d8 <checkAktifCalisma+0x16c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004454:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004458:	4838      	ldr	r0, [pc, #224]	@ (800453c <checkAktifCalisma+0x1d0>)
 800445a:	f006 f8bf 	bl	800a5dc <HAL_GPIO_ReadPin>
 800445e:	4603      	mov	r3, r0
 8004460:	2b01      	cmp	r3, #1
 8004462:	d10e      	bne.n	8004482 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004464:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004468:	4834      	ldr	r0, [pc, #208]	@ (800453c <checkAktifCalisma+0x1d0>)
 800446a:	f006 f8b7 	bl	800a5dc <HAL_GPIO_ReadPin>
 800446e:	4603      	mov	r3, r0
 8004470:	2b01      	cmp	r3, #1
 8004472:	d106      	bne.n	8004482 <checkAktifCalisma+0x116>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004474:	2140      	movs	r1, #64	@ 0x40
 8004476:	4835      	ldr	r0, [pc, #212]	@ (800454c <checkAktifCalisma+0x1e0>)
 8004478:	f006 f8b0 	bl	800a5dc <HAL_GPIO_ReadPin>
 800447c:	4603      	mov	r3, r0
 800447e:	2b01      	cmp	r3, #1
 8004480:	d003      	beq.n	800448a <checkAktifCalisma+0x11e>
 8004482:	4b24      	ldr	r3, [pc, #144]	@ (8004514 <checkAktifCalisma+0x1a8>)
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d026      	beq.n	80044d8 <checkAktifCalisma+0x16c>
							&& (asagivalfcalisiyor==0)
 800448a:	4b24      	ldr	r3, [pc, #144]	@ (800451c <checkAktifCalisma+0x1b0>)
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	f083 0301 	eor.w	r3, r3, #1
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d01f      	beq.n	80044d8 <checkAktifCalisma+0x16c>
							&& (devmotoryukaricalisiyor==0)
 8004498:	4b1f      	ldr	r3, [pc, #124]	@ (8004518 <checkAktifCalisma+0x1ac>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	f083 0301 	eor.w	r3, r3, #1
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d018      	beq.n	80044d8 <checkAktifCalisma+0x16c>
							&& (devmotorasagicalisiyor==0)
 80044a6:	4b20      	ldr	r3, [pc, #128]	@ (8004528 <checkAktifCalisma+0x1bc>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	f083 0301 	eor.w	r3, r3, #1
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d011      	beq.n	80044d8 <checkAktifCalisma+0x16c>
							&&(devyukarivalfcalisiyor==0)
 80044b4:	4b27      	ldr	r3, [pc, #156]	@ (8004554 <checkAktifCalisma+0x1e8>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	f083 0301 	eor.w	r3, r3, #1
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00a      	beq.n	80044d8 <checkAktifCalisma+0x16c>
							&&(devasagivalfcalisiyor==0)) {
 80044c2:	4b25      	ldr	r3, [pc, #148]	@ (8004558 <checkAktifCalisma+0x1ec>)
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	f083 0301 	eor.w	r3, r3, #1
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <checkAktifCalisma+0x16c>
					yukarimotorcalisiyor=1;
 80044d0:	4b10      	ldr	r3, [pc, #64]	@ (8004514 <checkAktifCalisma+0x1a8>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	701a      	strb	r2, [r3, #0]
 80044d6:	e002      	b.n	80044de <checkAktifCalisma+0x172>
				} else {
					yukarimotorcalisiyor=0;
 80044d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004514 <checkAktifCalisma+0x1a8>)
 80044da:	2200      	movs	r2, #0
 80044dc:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80044de:	4b0d      	ldr	r3, [pc, #52]	@ (8004514 <checkAktifCalisma+0x1a8>)
 80044e0:	781b      	ldrb	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d03c      	beq.n	8004560 <checkAktifCalisma+0x1f4>
 80044e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80044ea:	4818      	ldr	r0, [pc, #96]	@ (800454c <checkAktifCalisma+0x1e0>)
 80044ec:	f006 f876 	bl	800a5dc <HAL_GPIO_ReadPin>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d134      	bne.n	8004560 <checkAktifCalisma+0x1f4>
 80044f6:	4b19      	ldr	r3, [pc, #100]	@ (800455c <checkAktifCalisma+0x1f0>)
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d030      	beq.n	8004560 <checkAktifCalisma+0x1f4>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80044fe:	2201      	movs	r2, #1
 8004500:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004504:	480d      	ldr	r0, [pc, #52]	@ (800453c <checkAktifCalisma+0x1d0>)
 8004506:	f006 f880 	bl	800a60a <HAL_GPIO_WritePin>
 800450a:	e02f      	b.n	800456c <checkAktifCalisma+0x200>
 800450c:	200010da 	.word	0x200010da
 8004510:	200010d9 	.word	0x200010d9
 8004514:	200010f2 	.word	0x200010f2
 8004518:	200010f3 	.word	0x200010f3
 800451c:	200010f5 	.word	0x200010f5
 8004520:	200010ed 	.word	0x200010ed
 8004524:	200010cf 	.word	0x200010cf
 8004528:	200010f4 	.word	0x200010f4
 800452c:	200010ce 	.word	0x200010ce
 8004530:	2000110e 	.word	0x2000110e
 8004534:	20001121 	.word	0x20001121
 8004538:	2000110f 	.word	0x2000110f
 800453c:	40010c00 	.word	0x40010c00
 8004540:	20001110 	.word	0x20001110
 8004544:	200010fc 	.word	0x200010fc
 8004548:	200010f9 	.word	0x200010f9
 800454c:	40011000 	.word	0x40011000
 8004550:	200010bf 	.word	0x200010bf
 8004554:	200010f7 	.word	0x200010f7
 8004558:	200010f8 	.word	0x200010f8
 800455c:	200010ca 	.word	0x200010ca
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004560:	2200      	movs	r2, #0
 8004562:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004566:	4865      	ldr	r0, [pc, #404]	@ (80046fc <checkAktifCalisma+0x390>)
 8004568:	f006 f84f 	bl	800a60a <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 800456c:	4b64      	ldr	r3, [pc, #400]	@ (8004700 <checkAktifCalisma+0x394>)
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d013      	beq.n	800459c <checkAktifCalisma+0x230>
 8004574:	4b63      	ldr	r3, [pc, #396]	@ (8004704 <checkAktifCalisma+0x398>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d007      	beq.n	800458c <checkAktifCalisma+0x220>
 800457c:	4b61      	ldr	r3, [pc, #388]	@ (8004704 <checkAktifCalisma+0x398>)
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b02      	cmp	r3, #2
 8004582:	d003      	beq.n	800458c <checkAktifCalisma+0x220>
 8004584:	4b60      	ldr	r3, [pc, #384]	@ (8004708 <checkAktifCalisma+0x39c>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d107      	bne.n	800459c <checkAktifCalisma+0x230>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800458c:	2201      	movs	r2, #1
 800458e:	2104      	movs	r1, #4
 8004590:	485a      	ldr	r0, [pc, #360]	@ (80046fc <checkAktifCalisma+0x390>)
 8004592:	f006 f83a 	bl	800a60a <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 8004596:	4b5d      	ldr	r3, [pc, #372]	@ (800470c <checkAktifCalisma+0x3a0>)
 8004598:	2201      	movs	r2, #1
 800459a:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&((stopVar)||(EmnStopVar))&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 800459c:	4b5b      	ldr	r3, [pc, #364]	@ (800470c <checkAktifCalisma+0x3a0>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d033      	beq.n	800460c <checkAktifCalisma+0x2a0>
 80045a4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80045a8:	4854      	ldr	r0, [pc, #336]	@ (80046fc <checkAktifCalisma+0x390>)
 80045aa:	f006 f817 	bl	800a5dc <HAL_GPIO_ReadPin>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d106      	bne.n	80045c2 <checkAktifCalisma+0x256>
 80045b4:	4b56      	ldr	r3, [pc, #344]	@ (8004710 <checkAktifCalisma+0x3a4>)
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	f083 0301 	eor.w	r3, r3, #1
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <checkAktifCalisma+0x264>
 80045c2:	2102      	movs	r1, #2
 80045c4:	4853      	ldr	r0, [pc, #332]	@ (8004714 <checkAktifCalisma+0x3a8>)
 80045c6:	f006 f809 	bl	800a5dc <HAL_GPIO_ReadPin>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d11d      	bne.n	800460c <checkAktifCalisma+0x2a0>
 80045d0:	4b51      	ldr	r3, [pc, #324]	@ (8004718 <checkAktifCalisma+0x3ac>)
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d103      	bne.n	80045e0 <checkAktifCalisma+0x274>
 80045d8:	4b50      	ldr	r3, [pc, #320]	@ (800471c <checkAktifCalisma+0x3b0>)
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d015      	beq.n	800460c <checkAktifCalisma+0x2a0>
 80045e0:	4b4f      	ldr	r3, [pc, #316]	@ (8004720 <checkAktifCalisma+0x3b4>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d011      	beq.n	800460c <checkAktifCalisma+0x2a0>
 80045e8:	4b4e      	ldr	r3, [pc, #312]	@ (8004724 <checkAktifCalisma+0x3b8>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00d      	beq.n	800460c <checkAktifCalisma+0x2a0>
 80045f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004728 <checkAktifCalisma+0x3bc>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	f083 0301 	eor.w	r3, r3, #1
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d006      	beq.n	800460c <checkAktifCalisma+0x2a0>
					timer2=millis;
 80045fe:	4b4b      	ldr	r3, [pc, #300]	@ (800472c <checkAktifCalisma+0x3c0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a4b      	ldr	r2, [pc, #300]	@ (8004730 <checkAktifCalisma+0x3c4>)
 8004604:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 8004606:	4b48      	ldr	r3, [pc, #288]	@ (8004728 <checkAktifCalisma+0x3bc>)
 8004608:	2201      	movs	r2, #1
 800460a:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||(((stopVar==0)&&(EmnStopVar==0))||(kapiSivicVar==0)||(basincVar==0)))) {
 800460c:	4b47      	ldr	r3, [pc, #284]	@ (800472c <checkAktifCalisma+0x3c0>)
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4b47      	ldr	r3, [pc, #284]	@ (8004730 <checkAktifCalisma+0x3c4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	4a47      	ldr	r2, [pc, #284]	@ (8004734 <checkAktifCalisma+0x3c8>)
 8004618:	7812      	ldrb	r2, [r2, #0]
 800461a:	4293      	cmp	r3, r2
 800461c:	d303      	bcc.n	8004626 <checkAktifCalisma+0x2ba>
 800461e:	4b42      	ldr	r3, [pc, #264]	@ (8004728 <checkAktifCalisma+0x3bc>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d118      	bne.n	8004658 <checkAktifCalisma+0x2ec>
 8004626:	4b3c      	ldr	r3, [pc, #240]	@ (8004718 <checkAktifCalisma+0x3ac>)
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	f083 0301 	eor.w	r3, r3, #1
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b00      	cmp	r3, #0
 8004632:	d006      	beq.n	8004642 <checkAktifCalisma+0x2d6>
 8004634:	4b39      	ldr	r3, [pc, #228]	@ (800471c <checkAktifCalisma+0x3b0>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	f083 0301 	eor.w	r3, r3, #1
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10a      	bne.n	8004658 <checkAktifCalisma+0x2ec>
 8004642:	4b37      	ldr	r3, [pc, #220]	@ (8004720 <checkAktifCalisma+0x3b4>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	f083 0301 	eor.w	r3, r3, #1
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d103      	bne.n	8004658 <checkAktifCalisma+0x2ec>
 8004650:	4b34      	ldr	r3, [pc, #208]	@ (8004724 <checkAktifCalisma+0x3b8>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10a      	bne.n	800466e <checkAktifCalisma+0x302>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004658:	2200      	movs	r2, #0
 800465a:	2104      	movs	r1, #4
 800465c:	4827      	ldr	r0, [pc, #156]	@ (80046fc <checkAktifCalisma+0x390>)
 800465e:	f005 ffd4 	bl	800a60a <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 8004662:	4b2a      	ldr	r3, [pc, #168]	@ (800470c <checkAktifCalisma+0x3a0>)
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 8004668:	4b2f      	ldr	r3, [pc, #188]	@ (8004728 <checkAktifCalisma+0x3bc>)
 800466a:	2200      	movs	r2, #0
 800466c:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 800466e:	4b32      	ldr	r3, [pc, #200]	@ (8004738 <checkAktifCalisma+0x3cc>)
 8004670:	781b      	ldrb	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d102      	bne.n	800467c <checkAktifCalisma+0x310>
					cerceveVar=1;
 8004676:	4b31      	ldr	r3, [pc, #196]	@ (800473c <checkAktifCalisma+0x3d0>)
 8004678:	2201      	movs	r2, #1
 800467a:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 800467c:	4b2e      	ldr	r3, [pc, #184]	@ (8004738 <checkAktifCalisma+0x3cc>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d116      	bne.n	80046b2 <checkAktifCalisma+0x346>
 8004684:	4b2e      	ldr	r3, [pc, #184]	@ (8004740 <checkAktifCalisma+0x3d4>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d112      	bne.n	80046b2 <checkAktifCalisma+0x346>
 800468c:	2101      	movs	r1, #1
 800468e:	4821      	ldr	r0, [pc, #132]	@ (8004714 <checkAktifCalisma+0x3a8>)
 8004690:	f005 ffa4 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10b      	bne.n	80046b2 <checkAktifCalisma+0x346>
 800469a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800469e:	4817      	ldr	r0, [pc, #92]	@ (80046fc <checkAktifCalisma+0x390>)
 80046a0:	f005 ff9c 	bl	800a5dc <HAL_GPIO_ReadPin>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d103      	bne.n	80046b2 <checkAktifCalisma+0x346>
					cerceveVar=1;
 80046aa:	4b24      	ldr	r3, [pc, #144]	@ (800473c <checkAktifCalisma+0x3d0>)
 80046ac:	2201      	movs	r2, #1
 80046ae:	701a      	strb	r2, [r3, #0]
 80046b0:	e011      	b.n	80046d6 <checkAktifCalisma+0x36a>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 80046b2:	4b21      	ldr	r3, [pc, #132]	@ (8004738 <checkAktifCalisma+0x3cc>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b01      	cmp	r3, #1
 80046b8:	d10d      	bne.n	80046d6 <checkAktifCalisma+0x36a>
 80046ba:	2101      	movs	r1, #1
 80046bc:	4815      	ldr	r0, [pc, #84]	@ (8004714 <checkAktifCalisma+0x3a8>)
 80046be:	f005 ff8d 	bl	800a5dc <HAL_GPIO_ReadPin>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d106      	bne.n	80046d6 <checkAktifCalisma+0x36a>
 80046c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004740 <checkAktifCalisma+0x3d4>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d102      	bne.n	80046d6 <checkAktifCalisma+0x36a>
					cerceveVar=0;
 80046d0:	4b1a      	ldr	r3, [pc, #104]	@ (800473c <checkAktifCalisma+0x3d0>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 80046d6:	4b18      	ldr	r3, [pc, #96]	@ (8004738 <checkAktifCalisma+0x3cc>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d135      	bne.n	800474a <checkAktifCalisma+0x3de>
 80046de:	4b18      	ldr	r3, [pc, #96]	@ (8004740 <checkAktifCalisma+0x3d4>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d131      	bne.n	800474a <checkAktifCalisma+0x3de>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80046e6:	2101      	movs	r1, #1
 80046e8:	480a      	ldr	r0, [pc, #40]	@ (8004714 <checkAktifCalisma+0x3a8>)
 80046ea:	f005 ff77 	bl	800a5dc <HAL_GPIO_ReadPin>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d127      	bne.n	8004744 <checkAktifCalisma+0x3d8>
						cerceveVar=1;
 80046f4:	4b11      	ldr	r3, [pc, #68]	@ (800473c <checkAktifCalisma+0x3d0>)
 80046f6:	2201      	movs	r2, #1
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	e026      	b.n	800474a <checkAktifCalisma+0x3de>
 80046fc:	40010c00 	.word	0x40010c00
 8004700:	200010f2 	.word	0x200010f2
 8004704:	200010cb 	.word	0x200010cb
 8004708:	200010cf 	.word	0x200010cf
 800470c:	200010f6 	.word	0x200010f6
 8004710:	200010f9 	.word	0x200010f9
 8004714:	40011000 	.word	0x40011000
 8004718:	2000110e 	.word	0x2000110e
 800471c:	20001121 	.word	0x20001121
 8004720:	2000110f 	.word	0x2000110f
 8004724:	200010bf 	.word	0x200010bf
 8004728:	200010ee 	.word	0x200010ee
 800472c:	20001094 	.word	0x20001094
 8004730:	200010a0 	.word	0x200010a0
 8004734:	200010d0 	.word	0x200010d0
 8004738:	200010c0 	.word	0x200010c0
 800473c:	20001113 	.word	0x20001113
 8004740:	200010bd 	.word	0x200010bd
					} else {
						cerceveVar=0;
 8004744:	4b7f      	ldr	r3, [pc, #508]	@ (8004944 <checkAktifCalisma+0x5d8>)
 8004746:	2200      	movs	r2, #0
 8004748:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 800474a:	4b7f      	ldr	r3, [pc, #508]	@ (8004948 <checkAktifCalisma+0x5dc>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d17c      	bne.n	800484c <checkAktifCalisma+0x4e0>
 8004752:	4b7e      	ldr	r3, [pc, #504]	@ (800494c <checkAktifCalisma+0x5e0>)
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d078      	beq.n	800484c <checkAktifCalisma+0x4e0>
 800475a:	4b7d      	ldr	r3, [pc, #500]	@ (8004950 <checkAktifCalisma+0x5e4>)
 800475c:	781b      	ldrb	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d074      	beq.n	800484c <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8004762:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004766:	487b      	ldr	r0, [pc, #492]	@ (8004954 <checkAktifCalisma+0x5e8>)
 8004768:	f005 ff38 	bl	800a5dc <HAL_GPIO_ReadPin>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <checkAktifCalisma+0x40e>
 8004772:	4b79      	ldr	r3, [pc, #484]	@ (8004958 <checkAktifCalisma+0x5ec>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d068      	beq.n	800484c <checkAktifCalisma+0x4e0>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800477a:	4b72      	ldr	r3, [pc, #456]	@ (8004944 <checkAktifCalisma+0x5d8>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d064      	beq.n	800484c <checkAktifCalisma+0x4e0>
 8004782:	4b76      	ldr	r3, [pc, #472]	@ (800495c <checkAktifCalisma+0x5f0>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	f083 0301 	eor.w	r3, r3, #1
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d05d      	beq.n	800484c <checkAktifCalisma+0x4e0>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004790:	2104      	movs	r1, #4
 8004792:	4873      	ldr	r0, [pc, #460]	@ (8004960 <checkAktifCalisma+0x5f4>)
 8004794:	f005 ff22 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <checkAktifCalisma+0x43a>
 800479e:	4b71      	ldr	r3, [pc, #452]	@ (8004964 <checkAktifCalisma+0x5f8>)
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d152      	bne.n	800484c <checkAktifCalisma+0x4e0>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80047a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80047aa:	486a      	ldr	r0, [pc, #424]	@ (8004954 <checkAktifCalisma+0x5e8>)
 80047ac:	f005 ff16 	bl	800a5dc <HAL_GPIO_ReadPin>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d10e      	bne.n	80047d4 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80047b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80047ba:	4866      	ldr	r0, [pc, #408]	@ (8004954 <checkAktifCalisma+0x5e8>)
 80047bc:	f005 ff0e 	bl	800a5dc <HAL_GPIO_ReadPin>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d106      	bne.n	80047d4 <checkAktifCalisma+0x468>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 80047c6:	2140      	movs	r1, #64	@ 0x40
 80047c8:	4865      	ldr	r0, [pc, #404]	@ (8004960 <checkAktifCalisma+0x5f4>)
 80047ca:	f005 ff07 	bl	800a5dc <HAL_GPIO_ReadPin>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d003      	beq.n	80047dc <checkAktifCalisma+0x470>
 80047d4:	4b64      	ldr	r3, [pc, #400]	@ (8004968 <checkAktifCalisma+0x5fc>)
 80047d6:	781b      	ldrb	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d037      	beq.n	800484c <checkAktifCalisma+0x4e0>
						&& (yukarimotorcalisiyor==0)
 80047dc:	4b63      	ldr	r3, [pc, #396]	@ (800496c <checkAktifCalisma+0x600>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	f083 0301 	eor.w	r3, r3, #1
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d030      	beq.n	800484c <checkAktifCalisma+0x4e0>
						&& (yukarivalfcalisiyor==0)
 80047ea:	4b61      	ldr	r3, [pc, #388]	@ (8004970 <checkAktifCalisma+0x604>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	f083 0301 	eor.w	r3, r3, #1
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d029      	beq.n	800484c <checkAktifCalisma+0x4e0>
				  	  	&& (devmotoryukaricalisiyor==0)
 80047f8:	4b5e      	ldr	r3, [pc, #376]	@ (8004974 <checkAktifCalisma+0x608>)
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	f083 0301 	eor.w	r3, r3, #1
 8004800:	b2db      	uxtb	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d022      	beq.n	800484c <checkAktifCalisma+0x4e0>
						&& (devmotorasagicalisiyor==0)
 8004806:	4b5c      	ldr	r3, [pc, #368]	@ (8004978 <checkAktifCalisma+0x60c>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	f083 0301 	eor.w	r3, r3, #1
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	d01b      	beq.n	800484c <checkAktifCalisma+0x4e0>
						&& (devyukarivalfcalisiyor==0)
 8004814:	4b59      	ldr	r3, [pc, #356]	@ (800497c <checkAktifCalisma+0x610>)
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	f083 0301 	eor.w	r3, r3, #1
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b00      	cmp	r3, #0
 8004820:	d014      	beq.n	800484c <checkAktifCalisma+0x4e0>
						&& (devasagivalfcalisiyor==0)) {
 8004822:	4b57      	ldr	r3, [pc, #348]	@ (8004980 <checkAktifCalisma+0x614>)
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	f083 0301 	eor.w	r3, r3, #1
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00d      	beq.n	800484c <checkAktifCalisma+0x4e0>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8004830:	2201      	movs	r2, #1
 8004832:	2102      	movs	r1, #2
 8004834:	4847      	ldr	r0, [pc, #284]	@ (8004954 <checkAktifCalisma+0x5e8>)
 8004836:	f005 fee8 	bl	800a60a <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 800483a:	4b4b      	ldr	r3, [pc, #300]	@ (8004968 <checkAktifCalisma+0x5fc>)
 800483c:	2201      	movs	r2, #1
 800483e:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 8004840:	4b50      	ldr	r3, [pc, #320]	@ (8004984 <checkAktifCalisma+0x618>)
 8004842:	2201      	movs	r2, #1
 8004844:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 8004846:	4b50      	ldr	r3, [pc, #320]	@ (8004988 <checkAktifCalisma+0x61c>)
 8004848:	2201      	movs	r2, #1
 800484a:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 800484c:	4b46      	ldr	r3, [pc, #280]	@ (8004968 <checkAktifCalisma+0x5fc>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d033      	beq.n	80048bc <checkAktifCalisma+0x550>
 8004854:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004858:	483e      	ldr	r0, [pc, #248]	@ (8004954 <checkAktifCalisma+0x5e8>)
 800485a:	f005 febf 	bl	800a5dc <HAL_GPIO_ReadPin>
 800485e:	4603      	mov	r3, r0
 8004860:	2b01      	cmp	r3, #1
 8004862:	d106      	bne.n	8004872 <checkAktifCalisma+0x506>
 8004864:	4b3c      	ldr	r3, [pc, #240]	@ (8004958 <checkAktifCalisma+0x5ec>)
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	f083 0301 	eor.w	r3, r3, #1
 800486c:	b2db      	uxtb	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10a      	bne.n	8004888 <checkAktifCalisma+0x51c>
 8004872:	2104      	movs	r1, #4
 8004874:	483a      	ldr	r0, [pc, #232]	@ (8004960 <checkAktifCalisma+0x5f4>)
 8004876:	f005 feb1 	bl	800a5dc <HAL_GPIO_ReadPin>
 800487a:	4603      	mov	r3, r0
 800487c:	2b01      	cmp	r3, #1
 800487e:	d11d      	bne.n	80048bc <checkAktifCalisma+0x550>
 8004880:	4b38      	ldr	r3, [pc, #224]	@ (8004964 <checkAktifCalisma+0x5f8>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d019      	beq.n	80048bc <checkAktifCalisma+0x550>
 8004888:	4b30      	ldr	r3, [pc, #192]	@ (800494c <checkAktifCalisma+0x5e0>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d015      	beq.n	80048bc <checkAktifCalisma+0x550>
 8004890:	4b2f      	ldr	r3, [pc, #188]	@ (8004950 <checkAktifCalisma+0x5e4>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d011      	beq.n	80048bc <checkAktifCalisma+0x550>
 8004898:	4b2a      	ldr	r3, [pc, #168]	@ (8004944 <checkAktifCalisma+0x5d8>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00d      	beq.n	80048bc <checkAktifCalisma+0x550>
 80048a0:	4b3a      	ldr	r3, [pc, #232]	@ (800498c <checkAktifCalisma+0x620>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	f083 0301 	eor.w	r3, r3, #1
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d006      	beq.n	80048bc <checkAktifCalisma+0x550>
					timer2=millis;
 80048ae:	4b38      	ldr	r3, [pc, #224]	@ (8004990 <checkAktifCalisma+0x624>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a38      	ldr	r2, [pc, #224]	@ (8004994 <checkAktifCalisma+0x628>)
 80048b4:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 80048b6:	4b35      	ldr	r3, [pc, #212]	@ (800498c <checkAktifCalisma+0x620>)
 80048b8:	2201      	movs	r2, #1
 80048ba:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 80048bc:	4b34      	ldr	r3, [pc, #208]	@ (8004990 <checkAktifCalisma+0x624>)
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	4b34      	ldr	r3, [pc, #208]	@ (8004994 <checkAktifCalisma+0x628>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	4a34      	ldr	r2, [pc, #208]	@ (8004998 <checkAktifCalisma+0x62c>)
 80048c8:	7812      	ldrb	r2, [r2, #0]
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d303      	bcc.n	80048d6 <checkAktifCalisma+0x56a>
 80048ce:	4b2f      	ldr	r3, [pc, #188]	@ (800498c <checkAktifCalisma+0x620>)
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d114      	bne.n	8004900 <checkAktifCalisma+0x594>
 80048d6:	4b1d      	ldr	r3, [pc, #116]	@ (800494c <checkAktifCalisma+0x5e0>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	f083 0301 	eor.w	r3, r3, #1
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10d      	bne.n	8004900 <checkAktifCalisma+0x594>
 80048e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004950 <checkAktifCalisma+0x5e4>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	f083 0301 	eor.w	r3, r3, #1
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d106      	bne.n	8004900 <checkAktifCalisma+0x594>
 80048f2:	4b14      	ldr	r3, [pc, #80]	@ (8004944 <checkAktifCalisma+0x5d8>)
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	f083 0301 	eor.w	r3, r3, #1
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00a      	beq.n	8004916 <checkAktifCalisma+0x5aa>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8004900:	2200      	movs	r2, #0
 8004902:	2102      	movs	r1, #2
 8004904:	4813      	ldr	r0, [pc, #76]	@ (8004954 <checkAktifCalisma+0x5e8>)
 8004906:	f005 fe80 	bl	800a60a <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 800490a:	4b17      	ldr	r3, [pc, #92]	@ (8004968 <checkAktifCalisma+0x5fc>)
 800490c:	2200      	movs	r2, #0
 800490e:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8004910:	4b1e      	ldr	r3, [pc, #120]	@ (800498c <checkAktifCalisma+0x620>)
 8004912:	2200      	movs	r2, #0
 8004914:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8004916:	4b14      	ldr	r3, [pc, #80]	@ (8004968 <checkAktifCalisma+0x5fc>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d040      	beq.n	80049a0 <checkAktifCalisma+0x634>
 800491e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004922:	480f      	ldr	r0, [pc, #60]	@ (8004960 <checkAktifCalisma+0x5f4>)
 8004924:	f005 fe5a 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d138      	bne.n	80049a0 <checkAktifCalisma+0x634>
 800492e:	4b1b      	ldr	r3, [pc, #108]	@ (800499c <checkAktifCalisma+0x630>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d034      	beq.n	80049a0 <checkAktifCalisma+0x634>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8004936:	2201      	movs	r2, #1
 8004938:	2101      	movs	r1, #1
 800493a:	4806      	ldr	r0, [pc, #24]	@ (8004954 <checkAktifCalisma+0x5e8>)
 800493c:	f005 fe65 	bl	800a60a <HAL_GPIO_WritePin>
 8004940:	e033      	b.n	80049aa <checkAktifCalisma+0x63e>
 8004942:	bf00      	nop
 8004944:	20001113 	.word	0x20001113
 8004948:	200010d9 	.word	0x200010d9
 800494c:	2000110e 	.word	0x2000110e
 8004950:	2000110f 	.word	0x2000110f
 8004954:	40010c00 	.word	0x40010c00
 8004958:	200010fa 	.word	0x200010fa
 800495c:	2000110d 	.word	0x2000110d
 8004960:	40011000 	.word	0x40011000
 8004964:	200010c2 	.word	0x200010c2
 8004968:	200010f5 	.word	0x200010f5
 800496c:	200010f2 	.word	0x200010f2
 8004970:	200010f6 	.word	0x200010f6
 8004974:	200010f3 	.word	0x200010f3
 8004978:	200010f4 	.word	0x200010f4
 800497c:	200010f7 	.word	0x200010f7
 8004980:	200010f8 	.word	0x200010f8
 8004984:	200010fd 	.word	0x200010fd
 8004988:	2000111d 	.word	0x2000111d
 800498c:	200010ed 	.word	0x200010ed
 8004990:	20001094 	.word	0x20001094
 8004994:	200010a0 	.word	0x200010a0
 8004998:	200010d1 	.word	0x200010d1
 800499c:	200010c1 	.word	0x200010c1
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80049a0:	2200      	movs	r2, #0
 80049a2:	2101      	movs	r1, #1
 80049a4:	4836      	ldr	r0, [pc, #216]	@ (8004a80 <checkAktifCalisma+0x714>)
 80049a6:	f005 fe30 	bl	800a60a <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 80049aa:	4b36      	ldr	r3, [pc, #216]	@ (8004a84 <checkAktifCalisma+0x718>)
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f040 8080 	bne.w	8004ab4 <checkAktifCalisma+0x748>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80049b4:	4b34      	ldr	r3, [pc, #208]	@ (8004a88 <checkAktifCalisma+0x71c>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d003      	beq.n	80049c4 <checkAktifCalisma+0x658>
 80049bc:	4b32      	ldr	r3, [pc, #200]	@ (8004a88 <checkAktifCalisma+0x71c>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d177      	bne.n	8004ab4 <checkAktifCalisma+0x748>
						&& (stopVar) && (kapiSivicVar)
 80049c4:	4b31      	ldr	r3, [pc, #196]	@ (8004a8c <checkAktifCalisma+0x720>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d073      	beq.n	8004ab4 <checkAktifCalisma+0x748>
 80049cc:	4b30      	ldr	r3, [pc, #192]	@ (8004a90 <checkAktifCalisma+0x724>)
 80049ce:	781b      	ldrb	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d06f      	beq.n	8004ab4 <checkAktifCalisma+0x748>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 80049d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80049d8:	4829      	ldr	r0, [pc, #164]	@ (8004a80 <checkAktifCalisma+0x714>)
 80049da:	f005 fdff 	bl	800a5dc <HAL_GPIO_ReadPin>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d167      	bne.n	8004ab4 <checkAktifCalisma+0x748>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80049e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80049e8:	482a      	ldr	r0, [pc, #168]	@ (8004a94 <checkAktifCalisma+0x728>)
 80049ea:	f005 fdf7 	bl	800a5dc <HAL_GPIO_ReadPin>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <checkAktifCalisma+0x690>
 80049f4:	4b28      	ldr	r3, [pc, #160]	@ (8004a98 <checkAktifCalisma+0x72c>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d15b      	bne.n	8004ab4 <checkAktifCalisma+0x748>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80049fc:	2140      	movs	r1, #64	@ 0x40
 80049fe:	4825      	ldr	r0, [pc, #148]	@ (8004a94 <checkAktifCalisma+0x728>)
 8004a00:	f005 fdec 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d10f      	bne.n	8004a2a <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004a0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004a0e:	481c      	ldr	r0, [pc, #112]	@ (8004a80 <checkAktifCalisma+0x714>)
 8004a10:	f005 fde4 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d107      	bne.n	8004a2a <checkAktifCalisma+0x6be>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8004a1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a1e:	4818      	ldr	r0, [pc, #96]	@ (8004a80 <checkAktifCalisma+0x714>)
 8004a20:	f005 fddc 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d003      	beq.n	8004a32 <checkAktifCalisma+0x6c6>
 8004a2a:	4b1c      	ldr	r3, [pc, #112]	@ (8004a9c <checkAktifCalisma+0x730>)
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d040      	beq.n	8004ab4 <checkAktifCalisma+0x748>
						&& (yukarimotorcalisiyor==0)
 8004a32:	4b1b      	ldr	r3, [pc, #108]	@ (8004aa0 <checkAktifCalisma+0x734>)
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	f083 0301 	eor.w	r3, r3, #1
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d039      	beq.n	8004ab4 <checkAktifCalisma+0x748>
						&& (yukarivalfcalisiyor==0)
 8004a40:	4b18      	ldr	r3, [pc, #96]	@ (8004aa4 <checkAktifCalisma+0x738>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	f083 0301 	eor.w	r3, r3, #1
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d032      	beq.n	8004ab4 <checkAktifCalisma+0x748>
						&& (asagivalfcalisiyor==0)
 8004a4e:	4b16      	ldr	r3, [pc, #88]	@ (8004aa8 <checkAktifCalisma+0x73c>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	f083 0301 	eor.w	r3, r3, #1
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d02b      	beq.n	8004ab4 <checkAktifCalisma+0x748>
						&& (devmotorasagicalisiyor==0)
 8004a5c:	4b13      	ldr	r3, [pc, #76]	@ (8004aac <checkAktifCalisma+0x740>)
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	f083 0301 	eor.w	r3, r3, #1
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d024      	beq.n	8004ab4 <checkAktifCalisma+0x748>
						&&(devasagivalfcalisiyor==0)) {
 8004a6a:	4b11      	ldr	r3, [pc, #68]	@ (8004ab0 <checkAktifCalisma+0x744>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	f083 0301 	eor.w	r3, r3, #1
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01d      	beq.n	8004ab4 <checkAktifCalisma+0x748>

					devmotoryukaricalisiyor=1;
 8004a78:	4b08      	ldr	r3, [pc, #32]	@ (8004a9c <checkAktifCalisma+0x730>)
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	701a      	strb	r2, [r3, #0]
 8004a7e:	e01c      	b.n	8004aba <checkAktifCalisma+0x74e>
 8004a80:	40010c00 	.word	0x40010c00
 8004a84:	200010d9 	.word	0x200010d9
 8004a88:	200010cb 	.word	0x200010cb
 8004a8c:	2000110e 	.word	0x2000110e
 8004a90:	2000110f 	.word	0x2000110f
 8004a94:	40011000 	.word	0x40011000
 8004a98:	200010cc 	.word	0x200010cc
 8004a9c:	200010f3 	.word	0x200010f3
 8004aa0:	200010f2 	.word	0x200010f2
 8004aa4:	200010f6 	.word	0x200010f6
 8004aa8:	200010f5 	.word	0x200010f5
 8004aac:	200010f4 	.word	0x200010f4
 8004ab0:	200010f8 	.word	0x200010f8
				} else {
					devmotoryukaricalisiyor=0;
 8004ab4:	4b64      	ldr	r3, [pc, #400]	@ (8004c48 <checkAktifCalisma+0x8dc>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8004aba:	4b63      	ldr	r3, [pc, #396]	@ (8004c48 <checkAktifCalisma+0x8dc>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d007      	beq.n	8004ad2 <checkAktifCalisma+0x766>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	2120      	movs	r1, #32
 8004ac6:	4861      	ldr	r0, [pc, #388]	@ (8004c4c <checkAktifCalisma+0x8e0>)
 8004ac8:	f005 fd9f 	bl	800a60a <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8004acc:	4b60      	ldr	r3, [pc, #384]	@ (8004c50 <checkAktifCalisma+0x8e4>)
 8004ace:	2201      	movs	r2, #1
 8004ad0:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8004ad2:	4b5f      	ldr	r3, [pc, #380]	@ (8004c50 <checkAktifCalisma+0x8e4>)
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d025      	beq.n	8004b26 <checkAktifCalisma+0x7ba>
 8004ada:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004ade:	485d      	ldr	r0, [pc, #372]	@ (8004c54 <checkAktifCalisma+0x8e8>)
 8004ae0:	f005 fd7c 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d007      	beq.n	8004afa <checkAktifCalisma+0x78e>
 8004aea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004aee:	4857      	ldr	r0, [pc, #348]	@ (8004c4c <checkAktifCalisma+0x8e0>)
 8004af0:	f005 fd74 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d115      	bne.n	8004b26 <checkAktifCalisma+0x7ba>
 8004afa:	4b57      	ldr	r3, [pc, #348]	@ (8004c58 <checkAktifCalisma+0x8ec>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d011      	beq.n	8004b26 <checkAktifCalisma+0x7ba>
 8004b02:	4b56      	ldr	r3, [pc, #344]	@ (8004c5c <checkAktifCalisma+0x8f0>)
 8004b04:	781b      	ldrb	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00d      	beq.n	8004b26 <checkAktifCalisma+0x7ba>
 8004b0a:	4b55      	ldr	r3, [pc, #340]	@ (8004c60 <checkAktifCalisma+0x8f4>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	f083 0301 	eor.w	r3, r3, #1
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d006      	beq.n	8004b26 <checkAktifCalisma+0x7ba>
					timer2=millis;
 8004b18:	4b52      	ldr	r3, [pc, #328]	@ (8004c64 <checkAktifCalisma+0x8f8>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a52      	ldr	r2, [pc, #328]	@ (8004c68 <checkAktifCalisma+0x8fc>)
 8004b1e:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8004b20:	4b4f      	ldr	r3, [pc, #316]	@ (8004c60 <checkAktifCalisma+0x8f4>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004b26:	4b4f      	ldr	r3, [pc, #316]	@ (8004c64 <checkAktifCalisma+0x8f8>)
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	4b4f      	ldr	r3, [pc, #316]	@ (8004c68 <checkAktifCalisma+0x8fc>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	4a4e      	ldr	r2, [pc, #312]	@ (8004c6c <checkAktifCalisma+0x900>)
 8004b32:	7812      	ldrb	r2, [r2, #0]
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d303      	bcc.n	8004b40 <checkAktifCalisma+0x7d4>
 8004b38:	4b49      	ldr	r3, [pc, #292]	@ (8004c60 <checkAktifCalisma+0x8f4>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10d      	bne.n	8004b5c <checkAktifCalisma+0x7f0>
 8004b40:	4b45      	ldr	r3, [pc, #276]	@ (8004c58 <checkAktifCalisma+0x8ec>)
 8004b42:	781b      	ldrb	r3, [r3, #0]
 8004b44:	f083 0301 	eor.w	r3, r3, #1
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d106      	bne.n	8004b5c <checkAktifCalisma+0x7f0>
 8004b4e:	4b43      	ldr	r3, [pc, #268]	@ (8004c5c <checkAktifCalisma+0x8f0>)
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	f083 0301 	eor.w	r3, r3, #1
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <checkAktifCalisma+0x806>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2120      	movs	r1, #32
 8004b60:	483a      	ldr	r0, [pc, #232]	@ (8004c4c <checkAktifCalisma+0x8e0>)
 8004b62:	f005 fd52 	bl	800a60a <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8004b66:	4b3a      	ldr	r3, [pc, #232]	@ (8004c50 <checkAktifCalisma+0x8e4>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8004b6c:	4b3c      	ldr	r3, [pc, #240]	@ (8004c60 <checkAktifCalisma+0x8f4>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8004b72:	4b3f      	ldr	r3, [pc, #252]	@ (8004c70 <checkAktifCalisma+0x904>)
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f040 8088 	bne.w	8004c8c <checkAktifCalisma+0x920>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004b7c:	4b3d      	ldr	r3, [pc, #244]	@ (8004c74 <checkAktifCalisma+0x908>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d003      	beq.n	8004b8c <checkAktifCalisma+0x820>
 8004b84:	4b3b      	ldr	r3, [pc, #236]	@ (8004c74 <checkAktifCalisma+0x908>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d17f      	bne.n	8004c8c <checkAktifCalisma+0x920>
						&& (stopVar) && (kapiSivicVar)
 8004b8c:	4b32      	ldr	r3, [pc, #200]	@ (8004c58 <checkAktifCalisma+0x8ec>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d07b      	beq.n	8004c8c <checkAktifCalisma+0x920>
 8004b94:	4b31      	ldr	r3, [pc, #196]	@ (8004c5c <checkAktifCalisma+0x8f0>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d077      	beq.n	8004c8c <checkAktifCalisma+0x920>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004b9c:	2140      	movs	r1, #64	@ 0x40
 8004b9e:	482b      	ldr	r0, [pc, #172]	@ (8004c4c <checkAktifCalisma+0x8e0>)
 8004ba0:	f005 fd1c 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d170      	bne.n	8004c8c <checkAktifCalisma+0x920>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8004baa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004bae:	4827      	ldr	r0, [pc, #156]	@ (8004c4c <checkAktifCalisma+0x8e0>)
 8004bb0:	f005 fd14 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <checkAktifCalisma+0x856>
 8004bba:	4b2f      	ldr	r3, [pc, #188]	@ (8004c78 <checkAktifCalisma+0x90c>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d164      	bne.n	8004c8c <checkAktifCalisma+0x920>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004bc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004bc6:	4823      	ldr	r0, [pc, #140]	@ (8004c54 <checkAktifCalisma+0x8e8>)
 8004bc8:	f005 fd08 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d10f      	bne.n	8004bf2 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8004bd2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004bd6:	481f      	ldr	r0, [pc, #124]	@ (8004c54 <checkAktifCalisma+0x8e8>)
 8004bd8:	f005 fd00 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d107      	bne.n	8004bf2 <checkAktifCalisma+0x886>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8004be2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004be6:	481b      	ldr	r0, [pc, #108]	@ (8004c54 <checkAktifCalisma+0x8e8>)
 8004be8:	f005 fcf8 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d003      	beq.n	8004bfa <checkAktifCalisma+0x88e>
 8004bf2:	4b22      	ldr	r3, [pc, #136]	@ (8004c7c <checkAktifCalisma+0x910>)
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d048      	beq.n	8004c8c <checkAktifCalisma+0x920>
						&& (yukarimotorcalisiyor==0)
 8004bfa:	4b21      	ldr	r3, [pc, #132]	@ (8004c80 <checkAktifCalisma+0x914>)
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	f083 0301 	eor.w	r3, r3, #1
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d041      	beq.n	8004c8c <checkAktifCalisma+0x920>
						&& (yukarivalfcalisiyor==0)
 8004c08:	4b1e      	ldr	r3, [pc, #120]	@ (8004c84 <checkAktifCalisma+0x918>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	f083 0301 	eor.w	r3, r3, #1
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d03a      	beq.n	8004c8c <checkAktifCalisma+0x920>
						&& (asagivalfcalisiyor==0)
 8004c16:	4b1c      	ldr	r3, [pc, #112]	@ (8004c88 <checkAktifCalisma+0x91c>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	f083 0301 	eor.w	r3, r3, #1
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d033      	beq.n	8004c8c <checkAktifCalisma+0x920>
						&& (devyukarivalfcalisiyor==0)
 8004c24:	4b0a      	ldr	r3, [pc, #40]	@ (8004c50 <checkAktifCalisma+0x8e4>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	f083 0301 	eor.w	r3, r3, #1
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d02c      	beq.n	8004c8c <checkAktifCalisma+0x920>
						&& (devmotoryukaricalisiyor==0)) {
 8004c32:	4b05      	ldr	r3, [pc, #20]	@ (8004c48 <checkAktifCalisma+0x8dc>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	f083 0301 	eor.w	r3, r3, #1
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d025      	beq.n	8004c8c <checkAktifCalisma+0x920>

					devmotorasagicalisiyor=1;
 8004c40:	4b0e      	ldr	r3, [pc, #56]	@ (8004c7c <checkAktifCalisma+0x910>)
 8004c42:	2201      	movs	r2, #1
 8004c44:	701a      	strb	r2, [r3, #0]
 8004c46:	e024      	b.n	8004c92 <checkAktifCalisma+0x926>
 8004c48:	200010f3 	.word	0x200010f3
 8004c4c:	40011000 	.word	0x40011000
 8004c50:	200010f7 	.word	0x200010f7
 8004c54:	40010c00 	.word	0x40010c00
 8004c58:	2000110e 	.word	0x2000110e
 8004c5c:	2000110f 	.word	0x2000110f
 8004c60:	200010ef 	.word	0x200010ef
 8004c64:	20001094 	.word	0x20001094
 8004c68:	200010a0 	.word	0x200010a0
 8004c6c:	200010d2 	.word	0x200010d2
 8004c70:	200010d9 	.word	0x200010d9
 8004c74:	200010cb 	.word	0x200010cb
 8004c78:	200010cd 	.word	0x200010cd
 8004c7c:	200010f4 	.word	0x200010f4
 8004c80:	200010f2 	.word	0x200010f2
 8004c84:	200010f6 	.word	0x200010f6
 8004c88:	200010f5 	.word	0x200010f5
				} else {
					devmotorasagicalisiyor=0;
 8004c8c:	4b96      	ldr	r3, [pc, #600]	@ (8004ee8 <checkAktifCalisma+0xb7c>)
 8004c8e:	2200      	movs	r2, #0
 8004c90:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8004c92:	4b95      	ldr	r3, [pc, #596]	@ (8004ee8 <checkAktifCalisma+0xb7c>)
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d007      	beq.n	8004caa <checkAktifCalisma+0x93e>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	2110      	movs	r1, #16
 8004c9e:	4893      	ldr	r0, [pc, #588]	@ (8004eec <checkAktifCalisma+0xb80>)
 8004ca0:	f005 fcb3 	bl	800a60a <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8004ca4:	4b92      	ldr	r3, [pc, #584]	@ (8004ef0 <checkAktifCalisma+0xb84>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004caa:	4b91      	ldr	r3, [pc, #580]	@ (8004ef0 <checkAktifCalisma+0xb84>)
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d024      	beq.n	8004cfc <checkAktifCalisma+0x990>
 8004cb2:	2140      	movs	r1, #64	@ 0x40
 8004cb4:	488d      	ldr	r0, [pc, #564]	@ (8004eec <checkAktifCalisma+0xb80>)
 8004cb6:	f005 fc91 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d007      	beq.n	8004cd0 <checkAktifCalisma+0x964>
 8004cc0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004cc4:	4889      	ldr	r0, [pc, #548]	@ (8004eec <checkAktifCalisma+0xb80>)
 8004cc6:	f005 fc89 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d115      	bne.n	8004cfc <checkAktifCalisma+0x990>
 8004cd0:	4b88      	ldr	r3, [pc, #544]	@ (8004ef4 <checkAktifCalisma+0xb88>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d011      	beq.n	8004cfc <checkAktifCalisma+0x990>
 8004cd8:	4b87      	ldr	r3, [pc, #540]	@ (8004ef8 <checkAktifCalisma+0xb8c>)
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00d      	beq.n	8004cfc <checkAktifCalisma+0x990>
 8004ce0:	4b86      	ldr	r3, [pc, #536]	@ (8004efc <checkAktifCalisma+0xb90>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	f083 0301 	eor.w	r3, r3, #1
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d006      	beq.n	8004cfc <checkAktifCalisma+0x990>
					timer2=millis;
 8004cee:	4b84      	ldr	r3, [pc, #528]	@ (8004f00 <checkAktifCalisma+0xb94>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a84      	ldr	r2, [pc, #528]	@ (8004f04 <checkAktifCalisma+0xb98>)
 8004cf4:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8004cf6:	4b81      	ldr	r3, [pc, #516]	@ (8004efc <checkAktifCalisma+0xb90>)
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8004cfc:	4b80      	ldr	r3, [pc, #512]	@ (8004f00 <checkAktifCalisma+0xb94>)
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	4b80      	ldr	r3, [pc, #512]	@ (8004f04 <checkAktifCalisma+0xb98>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	4a80      	ldr	r2, [pc, #512]	@ (8004f08 <checkAktifCalisma+0xb9c>)
 8004d08:	7812      	ldrb	r2, [r2, #0]
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d303      	bcc.n	8004d16 <checkAktifCalisma+0x9aa>
 8004d0e:	4b7b      	ldr	r3, [pc, #492]	@ (8004efc <checkAktifCalisma+0xb90>)
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10d      	bne.n	8004d32 <checkAktifCalisma+0x9c6>
 8004d16:	4b77      	ldr	r3, [pc, #476]	@ (8004ef4 <checkAktifCalisma+0xb88>)
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	f083 0301 	eor.w	r3, r3, #1
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d106      	bne.n	8004d32 <checkAktifCalisma+0x9c6>
 8004d24:	4b74      	ldr	r3, [pc, #464]	@ (8004ef8 <checkAktifCalisma+0xb8c>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	f083 0301 	eor.w	r3, r3, #1
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <checkAktifCalisma+0x9dc>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8004d32:	2200      	movs	r2, #0
 8004d34:	2110      	movs	r1, #16
 8004d36:	486d      	ldr	r0, [pc, #436]	@ (8004eec <checkAktifCalisma+0xb80>)
 8004d38:	f005 fc67 	bl	800a60a <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8004d3c:	4b6c      	ldr	r3, [pc, #432]	@ (8004ef0 <checkAktifCalisma+0xb84>)
 8004d3e:	2200      	movs	r2, #0
 8004d40:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8004d42:	4b6e      	ldr	r3, [pc, #440]	@ (8004efc <checkAktifCalisma+0xb90>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004d48:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004d4c:	486f      	ldr	r0, [pc, #444]	@ (8004f0c <checkAktifCalisma+0xba0>)
 8004d4e:	f005 fc45 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d120      	bne.n	8004d9a <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004d58:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004d5c:	486b      	ldr	r0, [pc, #428]	@ (8004f0c <checkAktifCalisma+0xba0>)
 8004d5e:	f005 fc3d 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004d62:	4603      	mov	r3, r0
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d118      	bne.n	8004d9a <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004d68:	2104      	movs	r1, #4
 8004d6a:	4868      	ldr	r0, [pc, #416]	@ (8004f0c <checkAktifCalisma+0xba0>)
 8004d6c:	f005 fc36 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d111      	bne.n	8004d9a <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004d76:	2102      	movs	r1, #2
 8004d78:	4864      	ldr	r0, [pc, #400]	@ (8004f0c <checkAktifCalisma+0xba0>)
 8004d7a:	f005 fc2f 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10a      	bne.n	8004d9a <checkAktifCalisma+0xa2e>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004d84:	2101      	movs	r1, #1
 8004d86:	4861      	ldr	r0, [pc, #388]	@ (8004f0c <checkAktifCalisma+0xba0>)
 8004d88:	f005 fc28 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d103      	bne.n	8004d9a <checkAktifCalisma+0xa2e>
					makineStop=1;
 8004d92:	4b5f      	ldr	r3, [pc, #380]	@ (8004f10 <checkAktifCalisma+0xba4>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	701a      	strb	r2, [r3, #0]
 8004d98:	e002      	b.n	8004da0 <checkAktifCalisma+0xa34>
				} else {
					makineStop=0;
 8004d9a:	4b5d      	ldr	r3, [pc, #372]	@ (8004f10 <checkAktifCalisma+0xba4>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004da0:	4b5c      	ldr	r3, [pc, #368]	@ (8004f14 <checkAktifCalisma+0xba8>)
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d144      	bne.n	8004e32 <checkAktifCalisma+0xac6>
 8004da8:	4b5b      	ldr	r3, [pc, #364]	@ (8004f18 <checkAktifCalisma+0xbac>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d003      	beq.n	8004db8 <checkAktifCalisma+0xa4c>
 8004db0:	4b59      	ldr	r3, [pc, #356]	@ (8004f18 <checkAktifCalisma+0xbac>)
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2b03      	cmp	r3, #3
 8004db6:	d13c      	bne.n	8004e32 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004db8:	2180      	movs	r1, #128	@ 0x80
 8004dba:	484c      	ldr	r0, [pc, #304]	@ (8004eec <checkAktifCalisma+0xb80>)
 8004dbc:	f005 fc0e 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d103      	bne.n	8004dce <checkAktifCalisma+0xa62>
 8004dc6:	4b55      	ldr	r3, [pc, #340]	@ (8004f1c <checkAktifCalisma+0xbb0>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <checkAktifCalisma+0xa7a>
 8004dce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004dd2:	484e      	ldr	r0, [pc, #312]	@ (8004f0c <checkAktifCalisma+0xba0>)
 8004dd4:	f005 fc02 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d129      	bne.n	8004e32 <checkAktifCalisma+0xac6>
 8004dde:	4b4f      	ldr	r3, [pc, #316]	@ (8004f1c <checkAktifCalisma+0xbb0>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d125      	bne.n	8004e32 <checkAktifCalisma+0xac6>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004de6:	2104      	movs	r1, #4
 8004de8:	4840      	ldr	r0, [pc, #256]	@ (8004eec <checkAktifCalisma+0xb80>)
 8004dea:	f005 fbf7 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d003      	beq.n	8004dfc <checkAktifCalisma+0xa90>
 8004df4:	4b4a      	ldr	r3, [pc, #296]	@ (8004f20 <checkAktifCalisma+0xbb4>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d11a      	bne.n	8004e32 <checkAktifCalisma+0xac6>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004dfc:	2102      	movs	r1, #2
 8004dfe:	483b      	ldr	r0, [pc, #236]	@ (8004eec <checkAktifCalisma+0xb80>)
 8004e00:	f005 fbec 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d113      	bne.n	8004e32 <checkAktifCalisma+0xac6>
						&&(butonKontrol==0)
 8004e0a:	4b46      	ldr	r3, [pc, #280]	@ (8004f24 <checkAktifCalisma+0xbb8>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	f083 0301 	eor.w	r3, r3, #1
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00c      	beq.n	8004e32 <checkAktifCalisma+0xac6>
						&&(makineStop==1)) {
 8004e18:	4b3d      	ldr	r3, [pc, #244]	@ (8004f10 <checkAktifCalisma+0xba4>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d008      	beq.n	8004e32 <checkAktifCalisma+0xac6>

					kapi1prudhome=1;
 8004e20:	4b41      	ldr	r3, [pc, #260]	@ (8004f28 <checkAktifCalisma+0xbbc>)
 8004e22:	2201      	movs	r2, #1
 8004e24:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8004e26:	4b36      	ldr	r3, [pc, #216]	@ (8004f00 <checkAktifCalisma+0xb94>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a40      	ldr	r2, [pc, #256]	@ (8004f2c <checkAktifCalisma+0xbc0>)
 8004e2c:	6013      	str	r3, [r2, #0]
					bekle();
 8004e2e:	f7ff f901 	bl	8004034 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8004e32:	4b33      	ldr	r3, [pc, #204]	@ (8004f00 <checkAktifCalisma+0xb94>)
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	4b3d      	ldr	r3, [pc, #244]	@ (8004f2c <checkAktifCalisma+0xbc0>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	4a3c      	ldr	r2, [pc, #240]	@ (8004f30 <checkAktifCalisma+0xbc4>)
 8004e3e:	7812      	ldrb	r2, [r2, #0]
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d211      	bcs.n	8004e68 <checkAktifCalisma+0xafc>
 8004e44:	2104      	movs	r1, #4
 8004e46:	4829      	ldr	r0, [pc, #164]	@ (8004eec <checkAktifCalisma+0xb80>)
 8004e48:	f005 fbc8 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <checkAktifCalisma+0xafc>
 8004e52:	4b33      	ldr	r3, [pc, #204]	@ (8004f20 <checkAktifCalisma+0xbb4>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d006      	beq.n	8004e68 <checkAktifCalisma+0xafc>
 8004e5a:	4b2d      	ldr	r3, [pc, #180]	@ (8004f10 <checkAktifCalisma+0xba4>)
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	f083 0301 	eor.w	r3, r3, #1
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <checkAktifCalisma+0xb02>
					kapi1prudhome=0;
 8004e68:	4b2f      	ldr	r3, [pc, #188]	@ (8004f28 <checkAktifCalisma+0xbbc>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004e6e:	4b29      	ldr	r3, [pc, #164]	@ (8004f14 <checkAktifCalisma+0xba8>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d160      	bne.n	8004f38 <checkAktifCalisma+0xbcc>
 8004e76:	4b28      	ldr	r3, [pc, #160]	@ (8004f18 <checkAktifCalisma+0xbac>)
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d003      	beq.n	8004e86 <checkAktifCalisma+0xb1a>
 8004e7e:	4b26      	ldr	r3, [pc, #152]	@ (8004f18 <checkAktifCalisma+0xbac>)
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b03      	cmp	r3, #3
 8004e84:	d158      	bne.n	8004f38 <checkAktifCalisma+0xbcc>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004e86:	2104      	movs	r1, #4
 8004e88:	4818      	ldr	r0, [pc, #96]	@ (8004eec <checkAktifCalisma+0xb80>)
 8004e8a:	f005 fba7 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d003      	beq.n	8004e9c <checkAktifCalisma+0xb30>
 8004e94:	4b22      	ldr	r3, [pc, #136]	@ (8004f20 <checkAktifCalisma+0xbb4>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d14d      	bne.n	8004f38 <checkAktifCalisma+0xbcc>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004e9c:	2102      	movs	r1, #2
 8004e9e:	4813      	ldr	r0, [pc, #76]	@ (8004eec <checkAktifCalisma+0xb80>)
 8004ea0:	f005 fb9c 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d146      	bne.n	8004f38 <checkAktifCalisma+0xbcc>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004eaa:	2180      	movs	r1, #128	@ 0x80
 8004eac:	480f      	ldr	r0, [pc, #60]	@ (8004eec <checkAktifCalisma+0xb80>)
 8004eae:	f005 fb95 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d103      	bne.n	8004ec0 <checkAktifCalisma+0xb54>
 8004eb8:	4b18      	ldr	r3, [pc, #96]	@ (8004f1c <checkAktifCalisma+0xbb0>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00b      	beq.n	8004ed8 <checkAktifCalisma+0xb6c>
 8004ec0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004ec4:	4811      	ldr	r0, [pc, #68]	@ (8004f0c <checkAktifCalisma+0xba0>)
 8004ec6:	f005 fb89 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d133      	bne.n	8004f38 <checkAktifCalisma+0xbcc>
 8004ed0:	4b12      	ldr	r3, [pc, #72]	@ (8004f1c <checkAktifCalisma+0xbb0>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d12f      	bne.n	8004f38 <checkAktifCalisma+0xbcc>
						&&(makineStop==1)) {
 8004ed8:	4b0d      	ldr	r3, [pc, #52]	@ (8004f10 <checkAktifCalisma+0xba4>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d02b      	beq.n	8004f38 <checkAktifCalisma+0xbcc>

					kapi1butonkontrol=1;
 8004ee0:	4b14      	ldr	r3, [pc, #80]	@ (8004f34 <checkAktifCalisma+0xbc8>)
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	701a      	strb	r2, [r3, #0]
 8004ee6:	e02a      	b.n	8004f3e <checkAktifCalisma+0xbd2>
 8004ee8:	200010f4 	.word	0x200010f4
 8004eec:	40011000 	.word	0x40011000
 8004ef0:	200010f8 	.word	0x200010f8
 8004ef4:	2000110e 	.word	0x2000110e
 8004ef8:	2000110f 	.word	0x2000110f
 8004efc:	200010f0 	.word	0x200010f0
 8004f00:	20001094 	.word	0x20001094
 8004f04:	200010a0 	.word	0x200010a0
 8004f08:	200010d2 	.word	0x200010d2
 8004f0c:	40010c00 	.word	0x40010c00
 8004f10:	200010fe 	.word	0x200010fe
 8004f14:	200010c5 	.word	0x200010c5
 8004f18:	200010c4 	.word	0x200010c4
 8004f1c:	200010c8 	.word	0x200010c8
 8004f20:	200010c2 	.word	0x200010c2
 8004f24:	200010ec 	.word	0x200010ec
 8004f28:	200010ff 	.word	0x200010ff
 8004f2c:	20001098 	.word	0x20001098
 8004f30:	200010d5 	.word	0x200010d5
 8004f34:	20001100 	.word	0x20001100
				} else {
					kapi1butonkontrol=0;
 8004f38:	4b8b      	ldr	r3, [pc, #556]	@ (8005168 <checkAktifCalisma+0xdfc>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004f3e:	4b8b      	ldr	r3, [pc, #556]	@ (800516c <checkAktifCalisma+0xe00>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d121      	bne.n	8004f8a <checkAktifCalisma+0xc1e>
 8004f46:	4b8a      	ldr	r3, [pc, #552]	@ (8005170 <checkAktifCalisma+0xe04>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d003      	beq.n	8004f56 <checkAktifCalisma+0xbea>
 8004f4e:	4b88      	ldr	r3, [pc, #544]	@ (8005170 <checkAktifCalisma+0xe04>)
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	2b03      	cmp	r3, #3
 8004f54:	d119      	bne.n	8004f8a <checkAktifCalisma+0xc1e>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004f56:	2104      	movs	r1, #4
 8004f58:	4886      	ldr	r0, [pc, #536]	@ (8005174 <checkAktifCalisma+0xe08>)
 8004f5a:	f005 fb3f 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d003      	beq.n	8004f6c <checkAktifCalisma+0xc00>
 8004f64:	4b84      	ldr	r3, [pc, #528]	@ (8005178 <checkAktifCalisma+0xe0c>)
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10e      	bne.n	8004f8a <checkAktifCalisma+0xc1e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004f6c:	2102      	movs	r1, #2
 8004f6e:	4881      	ldr	r0, [pc, #516]	@ (8005174 <checkAktifCalisma+0xe08>)
 8004f70:	f005 fb34 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d107      	bne.n	8004f8a <checkAktifCalisma+0xc1e>
						&&(makineStop==1)) {
 8004f7a:	4b80      	ldr	r3, [pc, #512]	@ (800517c <checkAktifCalisma+0xe10>)
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <checkAktifCalisma+0xc1e>

					kapi1pizzato=1;
 8004f82:	4b7f      	ldr	r3, [pc, #508]	@ (8005180 <checkAktifCalisma+0xe14>)
 8004f84:	2201      	movs	r2, #1
 8004f86:	701a      	strb	r2, [r3, #0]
 8004f88:	e002      	b.n	8004f90 <checkAktifCalisma+0xc24>
				} else {
					kapi1pizzato=0;
 8004f8a:	4b7d      	ldr	r3, [pc, #500]	@ (8005180 <checkAktifCalisma+0xe14>)
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8004f90:	4b75      	ldr	r3, [pc, #468]	@ (8005168 <checkAktifCalisma+0xdfc>)
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d107      	bne.n	8004fa8 <checkAktifCalisma+0xc3c>
 8004f98:	4b79      	ldr	r3, [pc, #484]	@ (8005180 <checkAktifCalisma+0xe14>)
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d103      	bne.n	8004fa8 <checkAktifCalisma+0xc3c>
 8004fa0:	4b78      	ldr	r3, [pc, #480]	@ (8005184 <checkAktifCalisma+0xe18>)
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d005      	beq.n	8004fb4 <checkAktifCalisma+0xc48>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004fa8:	2201      	movs	r2, #1
 8004faa:	2180      	movs	r1, #128	@ 0x80
 8004fac:	4876      	ldr	r0, [pc, #472]	@ (8005188 <checkAktifCalisma+0xe1c>)
 8004fae:	f005 fb2c 	bl	800a60a <HAL_GPIO_WritePin>
 8004fb2:	e004      	b.n	8004fbe <checkAktifCalisma+0xc52>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	2180      	movs	r1, #128	@ 0x80
 8004fb8:	4873      	ldr	r0, [pc, #460]	@ (8005188 <checkAktifCalisma+0xe1c>)
 8004fba:	f005 fb26 	bl	800a60a <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004fbe:	4b73      	ldr	r3, [pc, #460]	@ (800518c <checkAktifCalisma+0xe20>)
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d141      	bne.n	800504a <checkAktifCalisma+0xcde>
 8004fc6:	4b6a      	ldr	r3, [pc, #424]	@ (8005170 <checkAktifCalisma+0xe04>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d003      	beq.n	8004fd6 <checkAktifCalisma+0xc6a>
 8004fce:	4b68      	ldr	r3, [pc, #416]	@ (8005170 <checkAktifCalisma+0xe04>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	2b03      	cmp	r3, #3
 8004fd4:	d139      	bne.n	800504a <checkAktifCalisma+0xcde>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004fd6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004fda:	4866      	ldr	r0, [pc, #408]	@ (8005174 <checkAktifCalisma+0xe08>)
 8004fdc:	f005 fafe 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d103      	bne.n	8004fee <checkAktifCalisma+0xc82>
 8004fe6:	4b6a      	ldr	r3, [pc, #424]	@ (8005190 <checkAktifCalisma+0xe24>)
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00b      	beq.n	8005006 <checkAktifCalisma+0xc9a>
 8004fee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004ff2:	4868      	ldr	r0, [pc, #416]	@ (8005194 <checkAktifCalisma+0xe28>)
 8004ff4:	f005 faf2 	bl	800a5dc <HAL_GPIO_ReadPin>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d125      	bne.n	800504a <checkAktifCalisma+0xcde>
 8004ffe:	4b64      	ldr	r3, [pc, #400]	@ (8005190 <checkAktifCalisma+0xe24>)
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d121      	bne.n	800504a <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005006:	2102      	movs	r1, #2
 8005008:	485a      	ldr	r0, [pc, #360]	@ (8005174 <checkAktifCalisma+0xe08>)
 800500a:	f005 fae7 	bl	800a5dc <HAL_GPIO_ReadPin>
 800500e:	4603      	mov	r3, r0
 8005010:	2b01      	cmp	r3, #1
 8005012:	d11a      	bne.n	800504a <checkAktifCalisma+0xcde>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005014:	2104      	movs	r1, #4
 8005016:	4857      	ldr	r0, [pc, #348]	@ (8005174 <checkAktifCalisma+0xe08>)
 8005018:	f005 fae0 	bl	800a5dc <HAL_GPIO_ReadPin>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d113      	bne.n	800504a <checkAktifCalisma+0xcde>
						&&(makineStop==1)
 8005022:	4b56      	ldr	r3, [pc, #344]	@ (800517c <checkAktifCalisma+0xe10>)
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d00f      	beq.n	800504a <checkAktifCalisma+0xcde>
						&&(butonKontrol==0)) {
 800502a:	4b5b      	ldr	r3, [pc, #364]	@ (8005198 <checkAktifCalisma+0xe2c>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	f083 0301 	eor.w	r3, r3, #1
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d008      	beq.n	800504a <checkAktifCalisma+0xcde>

					kapi2prudhome=1;
 8005038:	4b58      	ldr	r3, [pc, #352]	@ (800519c <checkAktifCalisma+0xe30>)
 800503a:	2201      	movs	r2, #1
 800503c:	701a      	strb	r2, [r3, #0]
					timer = millis;
 800503e:	4b58      	ldr	r3, [pc, #352]	@ (80051a0 <checkAktifCalisma+0xe34>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a58      	ldr	r2, [pc, #352]	@ (80051a4 <checkAktifCalisma+0xe38>)
 8005044:	6013      	str	r3, [r2, #0]
					bekle();
 8005046:	f7fe fff5 	bl	8004034 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 800504a:	4b55      	ldr	r3, [pc, #340]	@ (80051a0 <checkAktifCalisma+0xe34>)
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	4b55      	ldr	r3, [pc, #340]	@ (80051a4 <checkAktifCalisma+0xe38>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	4a54      	ldr	r2, [pc, #336]	@ (80051a8 <checkAktifCalisma+0xe3c>)
 8005056:	7812      	ldrb	r2, [r2, #0]
 8005058:	4293      	cmp	r3, r2
 800505a:	d20d      	bcs.n	8005078 <checkAktifCalisma+0xd0c>
 800505c:	2102      	movs	r1, #2
 800505e:	4845      	ldr	r0, [pc, #276]	@ (8005174 <checkAktifCalisma+0xe08>)
 8005060:	f005 fabc 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d006      	beq.n	8005078 <checkAktifCalisma+0xd0c>
 800506a:	4b44      	ldr	r3, [pc, #272]	@ (800517c <checkAktifCalisma+0xe10>)
 800506c:	781b      	ldrb	r3, [r3, #0]
 800506e:	f083 0301 	eor.w	r3, r3, #1
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <checkAktifCalisma+0xd12>
					kapi2prudhome=0;
 8005078:	4b48      	ldr	r3, [pc, #288]	@ (800519c <checkAktifCalisma+0xe30>)
 800507a:	2200      	movs	r2, #0
 800507c:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800507e:	4b43      	ldr	r3, [pc, #268]	@ (800518c <checkAktifCalisma+0xe20>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d135      	bne.n	80050f2 <checkAktifCalisma+0xd86>
 8005086:	4b3a      	ldr	r3, [pc, #232]	@ (8005170 <checkAktifCalisma+0xe04>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d003      	beq.n	8005096 <checkAktifCalisma+0xd2a>
 800508e:	4b38      	ldr	r3, [pc, #224]	@ (8005170 <checkAktifCalisma+0xe04>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b03      	cmp	r3, #3
 8005094:	d12d      	bne.n	80050f2 <checkAktifCalisma+0xd86>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005096:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800509a:	4836      	ldr	r0, [pc, #216]	@ (8005174 <checkAktifCalisma+0xe08>)
 800509c:	f005 fa9e 	bl	800a5dc <HAL_GPIO_ReadPin>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d103      	bne.n	80050ae <checkAktifCalisma+0xd42>
 80050a6:	4b3a      	ldr	r3, [pc, #232]	@ (8005190 <checkAktifCalisma+0xe24>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00b      	beq.n	80050c6 <checkAktifCalisma+0xd5a>
 80050ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80050b2:	4838      	ldr	r0, [pc, #224]	@ (8005194 <checkAktifCalisma+0xe28>)
 80050b4:	f005 fa92 	bl	800a5dc <HAL_GPIO_ReadPin>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d119      	bne.n	80050f2 <checkAktifCalisma+0xd86>
 80050be:	4b34      	ldr	r3, [pc, #208]	@ (8005190 <checkAktifCalisma+0xe24>)
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d115      	bne.n	80050f2 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80050c6:	2102      	movs	r1, #2
 80050c8:	482a      	ldr	r0, [pc, #168]	@ (8005174 <checkAktifCalisma+0xe08>)
 80050ca:	f005 fa87 	bl	800a5dc <HAL_GPIO_ReadPin>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d10e      	bne.n	80050f2 <checkAktifCalisma+0xd86>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80050d4:	2104      	movs	r1, #4
 80050d6:	4827      	ldr	r0, [pc, #156]	@ (8005174 <checkAktifCalisma+0xe08>)
 80050d8:	f005 fa80 	bl	800a5dc <HAL_GPIO_ReadPin>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d107      	bne.n	80050f2 <checkAktifCalisma+0xd86>
						&&(makineStop==1)) {
 80050e2:	4b26      	ldr	r3, [pc, #152]	@ (800517c <checkAktifCalisma+0xe10>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <checkAktifCalisma+0xd86>

					kapi2butonkontrol=1;
 80050ea:	4b30      	ldr	r3, [pc, #192]	@ (80051ac <checkAktifCalisma+0xe40>)
 80050ec:	2201      	movs	r2, #1
 80050ee:	701a      	strb	r2, [r3, #0]
 80050f0:	e002      	b.n	80050f8 <checkAktifCalisma+0xd8c>
				} else {
					kapi2butonkontrol=0;
 80050f2:	4b2e      	ldr	r3, [pc, #184]	@ (80051ac <checkAktifCalisma+0xe40>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80050f8:	4b24      	ldr	r3, [pc, #144]	@ (800518c <checkAktifCalisma+0xe20>)
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d11d      	bne.n	800513c <checkAktifCalisma+0xdd0>
 8005100:	4b1b      	ldr	r3, [pc, #108]	@ (8005170 <checkAktifCalisma+0xe04>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d003      	beq.n	8005110 <checkAktifCalisma+0xda4>
 8005108:	4b19      	ldr	r3, [pc, #100]	@ (8005170 <checkAktifCalisma+0xe04>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b03      	cmp	r3, #3
 800510e:	d115      	bne.n	800513c <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005110:	2102      	movs	r1, #2
 8005112:	4818      	ldr	r0, [pc, #96]	@ (8005174 <checkAktifCalisma+0xe08>)
 8005114:	f005 fa62 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005118:	4603      	mov	r3, r0
 800511a:	2b01      	cmp	r3, #1
 800511c:	d10e      	bne.n	800513c <checkAktifCalisma+0xdd0>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800511e:	2104      	movs	r1, #4
 8005120:	4814      	ldr	r0, [pc, #80]	@ (8005174 <checkAktifCalisma+0xe08>)
 8005122:	f005 fa5b 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d107      	bne.n	800513c <checkAktifCalisma+0xdd0>
						&&(makineStop==1)) {
 800512c:	4b13      	ldr	r3, [pc, #76]	@ (800517c <checkAktifCalisma+0xe10>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <checkAktifCalisma+0xdd0>

					kapi2pizzato=1;
 8005134:	4b1e      	ldr	r3, [pc, #120]	@ (80051b0 <checkAktifCalisma+0xe44>)
 8005136:	2201      	movs	r2, #1
 8005138:	701a      	strb	r2, [r3, #0]
 800513a:	e002      	b.n	8005142 <checkAktifCalisma+0xdd6>
				} else {
					kapi2pizzato=0;
 800513c:	4b1c      	ldr	r3, [pc, #112]	@ (80051b0 <checkAktifCalisma+0xe44>)
 800513e:	2200      	movs	r2, #0
 8005140:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8005142:	4b1a      	ldr	r3, [pc, #104]	@ (80051ac <checkAktifCalisma+0xe40>)
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d107      	bne.n	800515a <checkAktifCalisma+0xdee>
 800514a:	4b19      	ldr	r3, [pc, #100]	@ (80051b0 <checkAktifCalisma+0xe44>)
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d103      	bne.n	800515a <checkAktifCalisma+0xdee>
 8005152:	4b12      	ldr	r3, [pc, #72]	@ (800519c <checkAktifCalisma+0xe30>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d02c      	beq.n	80051b4 <checkAktifCalisma+0xe48>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800515a:	2201      	movs	r2, #1
 800515c:	2140      	movs	r1, #64	@ 0x40
 800515e:	480a      	ldr	r0, [pc, #40]	@ (8005188 <checkAktifCalisma+0xe1c>)
 8005160:	f005 fa53 	bl	800a60a <HAL_GPIO_WritePin>
 8005164:	e02b      	b.n	80051be <checkAktifCalisma+0xe52>
 8005166:	bf00      	nop
 8005168:	20001100 	.word	0x20001100
 800516c:	200010c5 	.word	0x200010c5
 8005170:	200010c4 	.word	0x200010c4
 8005174:	40011000 	.word	0x40011000
 8005178:	200010c2 	.word	0x200010c2
 800517c:	200010fe 	.word	0x200010fe
 8005180:	20001101 	.word	0x20001101
 8005184:	200010ff 	.word	0x200010ff
 8005188:	40010800 	.word	0x40010800
 800518c:	200010c6 	.word	0x200010c6
 8005190:	200010c8 	.word	0x200010c8
 8005194:	40010c00 	.word	0x40010c00
 8005198:	200010ec 	.word	0x200010ec
 800519c:	20001102 	.word	0x20001102
 80051a0:	20001094 	.word	0x20001094
 80051a4:	20001098 	.word	0x20001098
 80051a8:	200010d6 	.word	0x200010d6
 80051ac:	20001103 	.word	0x20001103
 80051b0:	20001104 	.word	0x20001104
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80051b4:	2200      	movs	r2, #0
 80051b6:	2140      	movs	r1, #64	@ 0x40
 80051b8:	4889      	ldr	r0, [pc, #548]	@ (80053e0 <checkAktifCalisma+0x1074>)
 80051ba:	f005 fa26 	bl	800a60a <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)	//tabla ac konum 0=kat1, 1=kat2, 2=kat1 + kat2
 80051be:	4b89      	ldr	r3, [pc, #548]	@ (80053e4 <checkAktifCalisma+0x1078>)
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <checkAktifCalisma+0xe62>
 80051c6:	4b87      	ldr	r3, [pc, #540]	@ (80053e4 <checkAktifCalisma+0x1078>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d115      	bne.n	80051fa <checkAktifCalisma+0xe8e>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80051ce:	2104      	movs	r1, #4
 80051d0:	4885      	ldr	r0, [pc, #532]	@ (80053e8 <checkAktifCalisma+0x107c>)
 80051d2:	f005 fa03 	bl	800a5dc <HAL_GPIO_ReadPin>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d003      	beq.n	80051e4 <checkAktifCalisma+0xe78>
 80051dc:	4b83      	ldr	r3, [pc, #524]	@ (80053ec <checkAktifCalisma+0x1080>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d10a      	bne.n	80051fa <checkAktifCalisma+0xe8e>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 80051e4:	2102      	movs	r1, #2
 80051e6:	4880      	ldr	r0, [pc, #512]	@ (80053e8 <checkAktifCalisma+0x107c>)
 80051e8:	f005 f9f8 	bl	800a5dc <HAL_GPIO_ReadPin>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d103      	bne.n	80051fa <checkAktifCalisma+0xe8e>

					kapiTablaAcKonumKat1=1;
 80051f2:	4b7f      	ldr	r3, [pc, #508]	@ (80053f0 <checkAktifCalisma+0x1084>)
 80051f4:	2201      	movs	r2, #1
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	e002      	b.n	8005200 <checkAktifCalisma+0xe94>
				} else {
					kapiTablaAcKonumKat1=0;
 80051fa:	4b7d      	ldr	r3, [pc, #500]	@ (80053f0 <checkAktifCalisma+0x1084>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8005200:	4b78      	ldr	r3, [pc, #480]	@ (80053e4 <checkAktifCalisma+0x1078>)
 8005202:	781b      	ldrb	r3, [r3, #0]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d003      	beq.n	8005210 <checkAktifCalisma+0xea4>
 8005208:	4b76      	ldr	r3, [pc, #472]	@ (80053e4 <checkAktifCalisma+0x1078>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	2b02      	cmp	r3, #2
 800520e:	d111      	bne.n	8005234 <checkAktifCalisma+0xec8>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005210:	2102      	movs	r1, #2
 8005212:	4875      	ldr	r0, [pc, #468]	@ (80053e8 <checkAktifCalisma+0x107c>)
 8005214:	f005 f9e2 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005218:	4603      	mov	r3, r0
 800521a:	2b01      	cmp	r3, #1
 800521c:	d10a      	bne.n	8005234 <checkAktifCalisma+0xec8>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 800521e:	2104      	movs	r1, #4
 8005220:	4871      	ldr	r0, [pc, #452]	@ (80053e8 <checkAktifCalisma+0x107c>)
 8005222:	f005 f9db 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d103      	bne.n	8005234 <checkAktifCalisma+0xec8>

					kapiTablaAcKonumKat2=1;
 800522c:	4b71      	ldr	r3, [pc, #452]	@ (80053f4 <checkAktifCalisma+0x1088>)
 800522e:	2201      	movs	r2, #1
 8005230:	701a      	strb	r2, [r3, #0]
 8005232:	e002      	b.n	800523a <checkAktifCalisma+0xece>
				} else {
					kapiTablaAcKonumKat2=0;
 8005234:	4b6f      	ldr	r3, [pc, #444]	@ (80053f4 <checkAktifCalisma+0x1088>)
 8005236:	2200      	movs	r2, #0
 8005238:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 800523a:	4b6d      	ldr	r3, [pc, #436]	@ (80053f0 <checkAktifCalisma+0x1084>)
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00f      	beq.n	8005262 <checkAktifCalisma+0xef6>
						&& kapiAcTipi==1
 8005242:	4b6d      	ldr	r3, [pc, #436]	@ (80053f8 <checkAktifCalisma+0x108c>)
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	2b01      	cmp	r3, #1
 8005248:	d10b      	bne.n	8005262 <checkAktifCalisma+0xef6>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 800524a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800524e:	486b      	ldr	r0, [pc, #428]	@ (80053fc <checkAktifCalisma+0x1090>)
 8005250:	f005 f9c4 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	d103      	bne.n	8005262 <checkAktifCalisma+0xef6>

					kapiactablaesp1=1;
 800525a:	4b69      	ldr	r3, [pc, #420]	@ (8005400 <checkAktifCalisma+0x1094>)
 800525c:	2201      	movs	r2, #1
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	e002      	b.n	8005268 <checkAktifCalisma+0xefc>
				} else {
					kapiactablaesp1=0;
 8005262:	4b67      	ldr	r3, [pc, #412]	@ (8005400 <checkAktifCalisma+0x1094>)
 8005264:	2200      	movs	r2, #0
 8005266:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 8005268:	4b62      	ldr	r3, [pc, #392]	@ (80053f4 <checkAktifCalisma+0x1088>)
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d00f      	beq.n	8005290 <checkAktifCalisma+0xf24>
						&& kapiAcTipi==1
 8005270:	4b61      	ldr	r3, [pc, #388]	@ (80053f8 <checkAktifCalisma+0x108c>)
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d10b      	bne.n	8005290 <checkAktifCalisma+0xf24>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8005278:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800527c:	485f      	ldr	r0, [pc, #380]	@ (80053fc <checkAktifCalisma+0x1090>)
 800527e:	f005 f9ad 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d103      	bne.n	8005290 <checkAktifCalisma+0xf24>

					kapiactablaesp2=1;
 8005288:	4b5e      	ldr	r3, [pc, #376]	@ (8005404 <checkAktifCalisma+0x1098>)
 800528a:	2201      	movs	r2, #1
 800528c:	701a      	strb	r2, [r3, #0]
 800528e:	e002      	b.n	8005296 <checkAktifCalisma+0xf2a>
				} else {
					kapiactablaesp2=0;
 8005290:	4b5c      	ldr	r3, [pc, #368]	@ (8005404 <checkAktifCalisma+0x1098>)
 8005292:	2200      	movs	r2, #0
 8005294:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005296:	4b5c      	ldr	r3, [pc, #368]	@ (8005408 <checkAktifCalisma+0x109c>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d11b      	bne.n	80052d6 <checkAktifCalisma+0xf6a>
 800529e:	4b5b      	ldr	r3, [pc, #364]	@ (800540c <checkAktifCalisma+0x10a0>)
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d003      	beq.n	80052ae <checkAktifCalisma+0xf42>
 80052a6:	4b59      	ldr	r3, [pc, #356]	@ (800540c <checkAktifCalisma+0x10a0>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d113      	bne.n	80052d6 <checkAktifCalisma+0xf6a>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))&& ((kapi1prudhome==1)||(kapi2prudhome==1)))
 80052ae:	4b50      	ldr	r3, [pc, #320]	@ (80053f0 <checkAktifCalisma+0x1084>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d103      	bne.n	80052be <checkAktifCalisma+0xf52>
 80052b6:	4b4f      	ldr	r3, [pc, #316]	@ (80053f4 <checkAktifCalisma+0x1088>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00b      	beq.n	80052d6 <checkAktifCalisma+0xf6a>
 80052be:	4b54      	ldr	r3, [pc, #336]	@ (8005410 <checkAktifCalisma+0x10a4>)
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d103      	bne.n	80052ce <checkAktifCalisma+0xf62>
 80052c6:	4b53      	ldr	r3, [pc, #332]	@ (8005414 <checkAktifCalisma+0x10a8>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <checkAktifCalisma+0xf6a>
						 {

						kapiTablaprudhome=1;
 80052ce:	4b52      	ldr	r3, [pc, #328]	@ (8005418 <checkAktifCalisma+0x10ac>)
 80052d0:	2201      	movs	r2, #1
 80052d2:	701a      	strb	r2, [r3, #0]
 80052d4:	e002      	b.n	80052dc <checkAktifCalisma+0xf70>

						 }
				else {
					kapiTablaprudhome=0;
 80052d6:	4b50      	ldr	r3, [pc, #320]	@ (8005418 <checkAktifCalisma+0x10ac>)
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
				}


				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80052dc:	4b4a      	ldr	r3, [pc, #296]	@ (8005408 <checkAktifCalisma+0x109c>)
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d148      	bne.n	8005376 <checkAktifCalisma+0x100a>
 80052e4:	4b49      	ldr	r3, [pc, #292]	@ (800540c <checkAktifCalisma+0x10a0>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d003      	beq.n	80052f4 <checkAktifCalisma+0xf88>
 80052ec:	4b47      	ldr	r3, [pc, #284]	@ (800540c <checkAktifCalisma+0x10a0>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b03      	cmp	r3, #3
 80052f2:	d140      	bne.n	8005376 <checkAktifCalisma+0x100a>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80052f4:	4b3e      	ldr	r3, [pc, #248]	@ (80053f0 <checkAktifCalisma+0x1084>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d103      	bne.n	8005304 <checkAktifCalisma+0xf98>
 80052fc:	4b3d      	ldr	r3, [pc, #244]	@ (80053f4 <checkAktifCalisma+0x1088>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d038      	beq.n	8005376 <checkAktifCalisma+0x100a>
						&&((((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)
 8005304:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005308:	4837      	ldr	r0, [pc, #220]	@ (80053e8 <checkAktifCalisma+0x107c>)
 800530a:	f005 f967 	bl	800a5dc <HAL_GPIO_ReadPin>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d01c      	beq.n	800534e <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0)
 8005314:	2180      	movs	r1, #128	@ 0x80
 8005316:	4834      	ldr	r0, [pc, #208]	@ (80053e8 <checkAktifCalisma+0x107c>)
 8005318:	f005 f960 	bl	800a5dc <HAL_GPIO_ReadPin>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <checkAktifCalisma+0xfc4>
								&& (HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1 ))
 8005322:	2104      	movs	r1, #4
 8005324:	4830      	ldr	r0, [pc, #192]	@ (80053e8 <checkAktifCalisma+0x107c>)
 8005326:	f005 f959 	bl	800a5dc <HAL_GPIO_ReadPin>
 800532a:	4603      	mov	r3, r0
 800532c:	2b01      	cmp	r3, #1
 800532e:	d00e      	beq.n	800534e <checkAktifCalisma+0xfe2>
								||((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0)
 8005330:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005334:	482c      	ldr	r0, [pc, #176]	@ (80053e8 <checkAktifCalisma+0x107c>)
 8005336:	f005 f951 	bl	800a5dc <HAL_GPIO_ReadPin>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10a      	bne.n	8005356 <checkAktifCalisma+0xfea>
								&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)))
 8005340:	2102      	movs	r1, #2
 8005342:	4829      	ldr	r0, [pc, #164]	@ (80053e8 <checkAktifCalisma+0x107c>)
 8005344:	f005 f94a 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005348:	4603      	mov	r3, r0
 800534a:	2b01      	cmp	r3, #1
 800534c:	d103      	bne.n	8005356 <checkAktifCalisma+0xfea>
								&&(kapiAcTipi==0))||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800534e:	4b2a      	ldr	r3, [pc, #168]	@ (80053f8 <checkAktifCalisma+0x108c>)
 8005350:	781b      	ldrb	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d007      	beq.n	8005366 <checkAktifCalisma+0xffa>
 8005356:	4b2a      	ldr	r3, [pc, #168]	@ (8005400 <checkAktifCalisma+0x1094>)
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d103      	bne.n	8005366 <checkAktifCalisma+0xffa>
 800535e:	4b29      	ldr	r3, [pc, #164]	@ (8005404 <checkAktifCalisma+0x1098>)
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d007      	beq.n	8005376 <checkAktifCalisma+0x100a>
						&&(makineStop==1)) {
 8005366:	4b2d      	ldr	r3, [pc, #180]	@ (800541c <checkAktifCalisma+0x10b0>)
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d003      	beq.n	8005376 <checkAktifCalisma+0x100a>

					kapiTablabutonkontrol=1;
 800536e:	4b2c      	ldr	r3, [pc, #176]	@ (8005420 <checkAktifCalisma+0x10b4>)
 8005370:	2201      	movs	r2, #1
 8005372:	701a      	strb	r2, [r3, #0]
 8005374:	e002      	b.n	800537c <checkAktifCalisma+0x1010>
				} else {
					kapiTablabutonkontrol=0;
 8005376:	4b2a      	ldr	r3, [pc, #168]	@ (8005420 <checkAktifCalisma+0x10b4>)
 8005378:	2200      	movs	r2, #0
 800537a:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800537c:	4b22      	ldr	r3, [pc, #136]	@ (8005408 <checkAktifCalisma+0x109c>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b02      	cmp	r3, #2
 8005382:	d117      	bne.n	80053b4 <checkAktifCalisma+0x1048>
 8005384:	4b21      	ldr	r3, [pc, #132]	@ (800540c <checkAktifCalisma+0x10a0>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b02      	cmp	r3, #2
 800538a:	d003      	beq.n	8005394 <checkAktifCalisma+0x1028>
 800538c:	4b1f      	ldr	r3, [pc, #124]	@ (800540c <checkAktifCalisma+0x10a0>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b03      	cmp	r3, #3
 8005392:	d10f      	bne.n	80053b4 <checkAktifCalisma+0x1048>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005394:	4b16      	ldr	r3, [pc, #88]	@ (80053f0 <checkAktifCalisma+0x1084>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d103      	bne.n	80053a4 <checkAktifCalisma+0x1038>
 800539c:	4b15      	ldr	r3, [pc, #84]	@ (80053f4 <checkAktifCalisma+0x1088>)
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <checkAktifCalisma+0x1048>
						&&(makineStop==1)) {
 80053a4:	4b1d      	ldr	r3, [pc, #116]	@ (800541c <checkAktifCalisma+0x10b0>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d003      	beq.n	80053b4 <checkAktifCalisma+0x1048>

					kapiTablapizzato=1;
 80053ac:	4b1d      	ldr	r3, [pc, #116]	@ (8005424 <checkAktifCalisma+0x10b8>)
 80053ae:	2201      	movs	r2, #1
 80053b0:	701a      	strb	r2, [r3, #0]
 80053b2:	e002      	b.n	80053ba <checkAktifCalisma+0x104e>
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 80053b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005424 <checkAktifCalisma+0x10b8>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80053ba:	4b19      	ldr	r3, [pc, #100]	@ (8005420 <checkAktifCalisma+0x10b4>)
 80053bc:	781b      	ldrb	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d107      	bne.n	80053d2 <checkAktifCalisma+0x1066>
 80053c2:	4b15      	ldr	r3, [pc, #84]	@ (8005418 <checkAktifCalisma+0x10ac>)
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d103      	bne.n	80053d2 <checkAktifCalisma+0x1066>
 80053ca:	4b16      	ldr	r3, [pc, #88]	@ (8005424 <checkAktifCalisma+0x10b8>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d02a      	beq.n	8005428 <checkAktifCalisma+0x10bc>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80053d2:	2201      	movs	r2, #1
 80053d4:	2120      	movs	r1, #32
 80053d6:	4802      	ldr	r0, [pc, #8]	@ (80053e0 <checkAktifCalisma+0x1074>)
 80053d8:	f005 f917 	bl	800a60a <HAL_GPIO_WritePin>
 80053dc:	e029      	b.n	8005432 <checkAktifCalisma+0x10c6>
 80053de:	bf00      	nop
 80053e0:	40010800 	.word	0x40010800
 80053e4:	200010c9 	.word	0x200010c9
 80053e8:	40011000 	.word	0x40011000
 80053ec:	200010c2 	.word	0x200010c2
 80053f0:	20001108 	.word	0x20001108
 80053f4:	20001109 	.word	0x20001109
 80053f8:	200010c8 	.word	0x200010c8
 80053fc:	40010c00 	.word	0x40010c00
 8005400:	20001118 	.word	0x20001118
 8005404:	20001119 	.word	0x20001119
 8005408:	200010c7 	.word	0x200010c7
 800540c:	200010c4 	.word	0x200010c4
 8005410:	200010ff 	.word	0x200010ff
 8005414:	20001102 	.word	0x20001102
 8005418:	20001105 	.word	0x20001105
 800541c:	200010fe 	.word	0x200010fe
 8005420:	20001106 	.word	0x20001106
 8005424:	20001107 	.word	0x20001107
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005428:	2200      	movs	r2, #0
 800542a:	2120      	movs	r1, #32
 800542c:	4887      	ldr	r0, [pc, #540]	@ (800564c <checkAktifCalisma+0x12e0>)
 800542e:	f005 f8ec 	bl	800a60a <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8005432:	4b87      	ldr	r3, [pc, #540]	@ (8005650 <checkAktifCalisma+0x12e4>)
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00e      	beq.n	8005458 <checkAktifCalisma+0x10ec>
 800543a:	2102      	movs	r1, #2
 800543c:	4885      	ldr	r0, [pc, #532]	@ (8005654 <checkAktifCalisma+0x12e8>)
 800543e:	f005 f8cd 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005442:	4603      	mov	r3, r0
 8005444:	2b01      	cmp	r3, #1
 8005446:	d107      	bne.n	8005458 <checkAktifCalisma+0x10ec>
 8005448:	4b83      	ldr	r3, [pc, #524]	@ (8005658 <checkAktifCalisma+0x12ec>)
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d103      	bne.n	8005458 <checkAktifCalisma+0x10ec>
 8005450:	4b82      	ldr	r3, [pc, #520]	@ (800565c <checkAktifCalisma+0x12f0>)
 8005452:	781b      	ldrb	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d112      	bne.n	800547e <checkAktifCalisma+0x1112>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005458:	4b81      	ldr	r3, [pc, #516]	@ (8005660 <checkAktifCalisma+0x12f4>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d032      	beq.n	80054c6 <checkAktifCalisma+0x115a>
 8005460:	2104      	movs	r1, #4
 8005462:	487c      	ldr	r0, [pc, #496]	@ (8005654 <checkAktifCalisma+0x12e8>)
 8005464:	f005 f8ba 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005468:	4603      	mov	r3, r0
 800546a:	2b01      	cmp	r3, #1
 800546c:	d12b      	bne.n	80054c6 <checkAktifCalisma+0x115a>
 800546e:	4b7a      	ldr	r3, [pc, #488]	@ (8005658 <checkAktifCalisma+0x12ec>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d027      	beq.n	80054c6 <checkAktifCalisma+0x115a>
 8005476:	4b79      	ldr	r3, [pc, #484]	@ (800565c <checkAktifCalisma+0x12f0>)
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d023      	beq.n	80054c6 <checkAktifCalisma+0x115a>



					calismaSayisi++;
 800547e:	4b79      	ldr	r3, [pc, #484]	@ (8005664 <checkAktifCalisma+0x12f8>)
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	3301      	adds	r3, #1
 8005484:	b2da      	uxtb	r2, r3
 8005486:	4b77      	ldr	r3, [pc, #476]	@ (8005664 <checkAktifCalisma+0x12f8>)
 8005488:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 800548a:	4b76      	ldr	r3, [pc, #472]	@ (8005664 <checkAktifCalisma+0x12f8>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2bff      	cmp	r3, #255	@ 0xff
 8005490:	d108      	bne.n	80054a4 <checkAktifCalisma+0x1138>
						calismaSayisi = 0;
 8005492:	4b74      	ldr	r3, [pc, #464]	@ (8005664 <checkAktifCalisma+0x12f8>)
 8005494:	2200      	movs	r2, #0
 8005496:	701a      	strb	r2, [r3, #0]
						calismaCount++;
 8005498:	4b73      	ldr	r3, [pc, #460]	@ (8005668 <checkAktifCalisma+0x12fc>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	3301      	adds	r3, #1
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	4b71      	ldr	r3, [pc, #452]	@ (8005668 <checkAktifCalisma+0x12fc>)
 80054a2:	701a      	strb	r2, [r3, #0]
					}
					eepromData[27] = calismaSayisi;
 80054a4:	4b6f      	ldr	r3, [pc, #444]	@ (8005664 <checkAktifCalisma+0x12f8>)
 80054a6:	781a      	ldrb	r2, [r3, #0]
 80054a8:	4b70      	ldr	r3, [pc, #448]	@ (800566c <checkAktifCalisma+0x1300>)
 80054aa:	76da      	strb	r2, [r3, #27]
					eepromData[29] = calismaCount;
 80054ac:	4b6e      	ldr	r3, [pc, #440]	@ (8005668 <checkAktifCalisma+0x12fc>)
 80054ae:	781a      	ldrb	r2, [r3, #0]
 80054b0:	4b6e      	ldr	r3, [pc, #440]	@ (800566c <checkAktifCalisma+0x1300>)
 80054b2:	775a      	strb	r2, [r3, #29]

					hafizaYaz=1;
 80054b4:	4b6e      	ldr	r3, [pc, #440]	@ (8005670 <checkAktifCalisma+0x1304>)
 80054b6:	2201      	movs	r2, #1
 80054b8:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 80054ba:	4b65      	ldr	r3, [pc, #404]	@ (8005650 <checkAktifCalisma+0x12e4>)
 80054bc:	2200      	movs	r2, #0
 80054be:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 80054c0:	4b67      	ldr	r3, [pc, #412]	@ (8005660 <checkAktifCalisma+0x12f4>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80054c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80054ca:	486a      	ldr	r0, [pc, #424]	@ (8005674 <checkAktifCalisma+0x1308>)
 80054cc:	f005 f886 	bl	800a5dc <HAL_GPIO_ReadPin>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d016      	beq.n	8005504 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80054d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80054da:	4866      	ldr	r0, [pc, #408]	@ (8005674 <checkAktifCalisma+0x1308>)
 80054dc:	f005 f87e 	bl	800a5dc <HAL_GPIO_ReadPin>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00e      	beq.n	8005504 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80054e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054ea:	4862      	ldr	r0, [pc, #392]	@ (8005674 <checkAktifCalisma+0x1308>)
 80054ec:	f005 f876 	bl	800a5dc <HAL_GPIO_ReadPin>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d006      	beq.n	8005504 <checkAktifCalisma+0x1198>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80054f6:	2140      	movs	r1, #64	@ 0x40
 80054f8:	4856      	ldr	r0, [pc, #344]	@ (8005654 <checkAktifCalisma+0x12e8>)
 80054fa:	f005 f86f 	bl	800a5dc <HAL_GPIO_ReadPin>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d103      	bne.n	800550c <checkAktifCalisma+0x11a0>

					startBasili=1;
 8005504:	4b5c      	ldr	r3, [pc, #368]	@ (8005678 <checkAktifCalisma+0x130c>)
 8005506:	2201      	movs	r2, #1
 8005508:	701a      	strb	r2, [r3, #0]
 800550a:	e002      	b.n	8005512 <checkAktifCalisma+0x11a6>
				} else {
					startBasili=0;
 800550c:	4b5a      	ldr	r3, [pc, #360]	@ (8005678 <checkAktifCalisma+0x130c>)
 800550e:	2200      	movs	r2, #0
 8005510:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005512:	4b59      	ldr	r3, [pc, #356]	@ (8005678 <checkAktifCalisma+0x130c>)
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d014      	beq.n	8005544 <checkAktifCalisma+0x11d8>
 800551a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800551e:	4855      	ldr	r0, [pc, #340]	@ (8005674 <checkAktifCalisma+0x1308>)
 8005520:	f005 f85c 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005524:	4603      	mov	r3, r0
 8005526:	2b01      	cmp	r3, #1
 8005528:	d10c      	bne.n	8005544 <checkAktifCalisma+0x11d8>

					hataVar=1;
 800552a:	4b54      	ldr	r3, [pc, #336]	@ (800567c <checkAktifCalisma+0x1310>)
 800552c:	2201      	movs	r2, #1
 800552e:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 8005530:	2001      	movs	r0, #1
 8005532:	f7fb fd13 	bl	8000f5c <hataKoduLcdGoster>
					hata2EEPROM(1);
 8005536:	2001      	movs	r0, #1
 8005538:	f7fb fcb8 	bl	8000eac <hata2EEPROM>
					acilstophatasi=1;
 800553c:	4b50      	ldr	r3, [pc, #320]	@ (8005680 <checkAktifCalisma+0x1314>)
 800553e:	2201      	movs	r2, #1
 8005540:	701a      	strb	r2, [r3, #0]
 8005542:	e018      	b.n	8005576 <checkAktifCalisma+0x120a>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8005544:	4b4e      	ldr	r3, [pc, #312]	@ (8005680 <checkAktifCalisma+0x1314>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d014      	beq.n	8005576 <checkAktifCalisma+0x120a>
 800554c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005550:	4848      	ldr	r0, [pc, #288]	@ (8005674 <checkAktifCalisma+0x1308>)
 8005552:	f005 f843 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10c      	bne.n	8005576 <checkAktifCalisma+0x120a>
 800555c:	4b46      	ldr	r3, [pc, #280]	@ (8005678 <checkAktifCalisma+0x130c>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	f083 0301 	eor.w	r3, r3, #1
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <checkAktifCalisma+0x120a>
					acilstophatasi=0;
 800556a:	4b45      	ldr	r3, [pc, #276]	@ (8005680 <checkAktifCalisma+0x1314>)
 800556c:	2200      	movs	r2, #0
 800556e:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 8005570:	2001      	movs	r0, #1
 8005572:	f7fe fcf1 	bl	8003f58 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)&&(emniyetCercevesihatasi==0)) {
 8005576:	4b43      	ldr	r3, [pc, #268]	@ (8005684 <checkAktifCalisma+0x1318>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	f083 0301 	eor.w	r3, r3, #1
 800557e:	b2db      	uxtb	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d023      	beq.n	80055cc <checkAktifCalisma+0x1260>
 8005584:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8005588:	483a      	ldr	r0, [pc, #232]	@ (8005674 <checkAktifCalisma+0x1308>)
 800558a:	f005 f827 	bl	800a5dc <HAL_GPIO_ReadPin>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d003      	beq.n	800559c <checkAktifCalisma+0x1230>
 8005594:	4b3c      	ldr	r3, [pc, #240]	@ (8005688 <checkAktifCalisma+0x131c>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d017      	beq.n	80055cc <checkAktifCalisma+0x1260>
 800559c:	4b3b      	ldr	r3, [pc, #236]	@ (800568c <checkAktifCalisma+0x1320>)
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d113      	bne.n	80055cc <checkAktifCalisma+0x1260>
 80055a4:	4b3a      	ldr	r3, [pc, #232]	@ (8005690 <checkAktifCalisma+0x1324>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	f083 0301 	eor.w	r3, r3, #1
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00c      	beq.n	80055cc <checkAktifCalisma+0x1260>
					hataVar=1;
 80055b2:	4b32      	ldr	r3, [pc, #200]	@ (800567c <checkAktifCalisma+0x1310>)
 80055b4:	2201      	movs	r2, #1
 80055b6:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 80055b8:	2002      	movs	r0, #2
 80055ba:	f7fb fccf 	bl	8000f5c <hataKoduLcdGoster>
					hata2EEPROM(2);
 80055be:	2002      	movs	r0, #2
 80055c0:	f7fb fc74 	bl	8000eac <hata2EEPROM>
					emniyetCercevesihatasi=1;
 80055c4:	4b32      	ldr	r3, [pc, #200]	@ (8005690 <checkAktifCalisma+0x1324>)
 80055c6:	2201      	movs	r2, #1
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	e017      	b.n	80055fc <checkAktifCalisma+0x1290>
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 80055cc:	4b30      	ldr	r3, [pc, #192]	@ (8005690 <checkAktifCalisma+0x1324>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d013      	beq.n	80055fc <checkAktifCalisma+0x1290>
 80055d4:	4b2b      	ldr	r3, [pc, #172]	@ (8005684 <checkAktifCalisma+0x1318>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00f      	beq.n	80055fc <checkAktifCalisma+0x1290>
 80055dc:	4b2d      	ldr	r3, [pc, #180]	@ (8005694 <checkAktifCalisma+0x1328>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	f083 0301 	eor.w	r3, r3, #1
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d008      	beq.n	80055fc <checkAktifCalisma+0x1290>
					emniyetCercevesihatasi=0;
 80055ea:	4b29      	ldr	r3, [pc, #164]	@ (8005690 <checkAktifCalisma+0x1324>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 80055f0:	4b25      	ldr	r3, [pc, #148]	@ (8005688 <checkAktifCalisma+0x131c>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 80055f6:	2002      	movs	r0, #2
 80055f8:	f7fe fcae 	bl	8003f58 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1 && basinchatasi==0) {
 80055fc:	4b26      	ldr	r3, [pc, #152]	@ (8005698 <checkAktifCalisma+0x132c>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d151      	bne.n	80056a8 <checkAktifCalisma+0x133c>
 8005604:	4b25      	ldr	r3, [pc, #148]	@ (800569c <checkAktifCalisma+0x1330>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d14d      	bne.n	80056a8 <checkAktifCalisma+0x133c>
 800560c:	4b24      	ldr	r3, [pc, #144]	@ (80056a0 <checkAktifCalisma+0x1334>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d049      	beq.n	80056a8 <checkAktifCalisma+0x133c>
 8005614:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005618:	480e      	ldr	r0, [pc, #56]	@ (8005654 <checkAktifCalisma+0x12e8>)
 800561a:	f004 ffdf 	bl	800a5dc <HAL_GPIO_ReadPin>
 800561e:	4603      	mov	r3, r0
 8005620:	2b01      	cmp	r3, #1
 8005622:	d141      	bne.n	80056a8 <checkAktifCalisma+0x133c>
 8005624:	4b1f      	ldr	r3, [pc, #124]	@ (80056a4 <checkAktifCalisma+0x1338>)
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	f083 0301 	eor.w	r3, r3, #1
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d03a      	beq.n	80056a8 <checkAktifCalisma+0x133c>
					hataVar=1;
 8005632:	4b12      	ldr	r3, [pc, #72]	@ (800567c <checkAktifCalisma+0x1310>)
 8005634:	2201      	movs	r2, #1
 8005636:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 8005638:	2003      	movs	r0, #3
 800563a:	f7fb fc8f 	bl	8000f5c <hataKoduLcdGoster>
					hata2EEPROM(3);
 800563e:	2003      	movs	r0, #3
 8005640:	f7fb fc34 	bl	8000eac <hata2EEPROM>
					basinchatasi=1;
 8005644:	4b17      	ldr	r3, [pc, #92]	@ (80056a4 <checkAktifCalisma+0x1338>)
 8005646:	2201      	movs	r2, #1
 8005648:	701a      	strb	r2, [r3, #0]
 800564a:	e043      	b.n	80056d4 <checkAktifCalisma+0x1368>
 800564c:	40010800 	.word	0x40010800
 8005650:	200010fc 	.word	0x200010fc
 8005654:	40011000 	.word	0x40011000
 8005658:	200010c2 	.word	0x200010c2
 800565c:	200010fe 	.word	0x200010fe
 8005660:	200010fd 	.word	0x200010fd
 8005664:	200010b4 	.word	0x200010b4
 8005668:	200010b6 	.word	0x200010b6
 800566c:	20000fec 	.word	0x20000fec
 8005670:	200010e9 	.word	0x200010e9
 8005674:	40010c00 	.word	0x40010c00
 8005678:	2000110a 	.word	0x2000110a
 800567c:	20001111 	.word	0x20001111
 8005680:	2000110c 	.word	0x2000110c
 8005684:	20001113 	.word	0x20001113
 8005688:	2000111d 	.word	0x2000111d
 800568c:	200010c0 	.word	0x200010c0
 8005690:	2000110d 	.word	0x2000110d
 8005694:	200010f5 	.word	0x200010f5
 8005698:	200010bf 	.word	0x200010bf
 800569c:	200010c3 	.word	0x200010c3
 80056a0:	20001110 	.word	0x20001110
 80056a4:	2000111a 	.word	0x2000111a
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80056a8:	4b85      	ldr	r3, [pc, #532]	@ (80058c0 <checkAktifCalisma+0x1554>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d011      	beq.n	80056d4 <checkAktifCalisma+0x1368>
 80056b0:	4b84      	ldr	r3, [pc, #528]	@ (80058c4 <checkAktifCalisma+0x1558>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d10d      	bne.n	80056d4 <checkAktifCalisma+0x1368>
 80056b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80056bc:	4882      	ldr	r0, [pc, #520]	@ (80058c8 <checkAktifCalisma+0x155c>)
 80056be:	f004 ff8d 	bl	800a5dc <HAL_GPIO_ReadPin>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d105      	bne.n	80056d4 <checkAktifCalisma+0x1368>
					basinchatasi=0;
 80056c8:	4b7d      	ldr	r3, [pc, #500]	@ (80058c0 <checkAktifCalisma+0x1554>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 80056ce:	2003      	movs	r0, #3
 80056d0:	f7fe fc42 	bl	8003f58 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && katkapisivicihatasi==0) {
 80056d4:	4b7d      	ldr	r3, [pc, #500]	@ (80058cc <checkAktifCalisma+0x1560>)
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d103      	bne.n	80056e4 <checkAktifCalisma+0x1378>
 80056dc:	4b7c      	ldr	r3, [pc, #496]	@ (80058d0 <checkAktifCalisma+0x1564>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d023      	beq.n	800572c <checkAktifCalisma+0x13c0>
 80056e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80056e8:	487a      	ldr	r0, [pc, #488]	@ (80058d4 <checkAktifCalisma+0x1568>)
 80056ea:	f004 ff77 	bl	800a5dc <HAL_GPIO_ReadPin>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d11b      	bne.n	800572c <checkAktifCalisma+0x13c0>
 80056f4:	4b78      	ldr	r3, [pc, #480]	@ (80058d8 <checkAktifCalisma+0x156c>)
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d003      	beq.n	8005704 <checkAktifCalisma+0x1398>
 80056fc:	4b76      	ldr	r3, [pc, #472]	@ (80058d8 <checkAktifCalisma+0x156c>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b03      	cmp	r3, #3
 8005702:	d113      	bne.n	800572c <checkAktifCalisma+0x13c0>
 8005704:	4b75      	ldr	r3, [pc, #468]	@ (80058dc <checkAktifCalisma+0x1570>)
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	f083 0301 	eor.w	r3, r3, #1
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00c      	beq.n	800572c <checkAktifCalisma+0x13c0>
					hataVar=1;
 8005712:	4b73      	ldr	r3, [pc, #460]	@ (80058e0 <checkAktifCalisma+0x1574>)
 8005714:	2201      	movs	r2, #1
 8005716:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8005718:	2004      	movs	r0, #4
 800571a:	f7fb fc1f 	bl	8000f5c <hataKoduLcdGoster>
					hata2EEPROM(4);
 800571e:	2004      	movs	r0, #4
 8005720:	f7fb fbc4 	bl	8000eac <hata2EEPROM>
					katkapisivicihatasi=1;
 8005724:	4b6d      	ldr	r3, [pc, #436]	@ (80058dc <checkAktifCalisma+0x1570>)
 8005726:	2201      	movs	r2, #1
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	e01f      	b.n	800576c <checkAktifCalisma+0x1400>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800572c:	4b6b      	ldr	r3, [pc, #428]	@ (80058dc <checkAktifCalisma+0x1570>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d01b      	beq.n	800576c <checkAktifCalisma+0x1400>
 8005734:	4b6b      	ldr	r3, [pc, #428]	@ (80058e4 <checkAktifCalisma+0x1578>)
 8005736:	781b      	ldrb	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d017      	beq.n	800576c <checkAktifCalisma+0x1400>
 800573c:	4b63      	ldr	r3, [pc, #396]	@ (80058cc <checkAktifCalisma+0x1560>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	f083 0301 	eor.w	r3, r3, #1
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d010      	beq.n	800576c <checkAktifCalisma+0x1400>
 800574a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800574e:	4861      	ldr	r0, [pc, #388]	@ (80058d4 <checkAktifCalisma+0x1568>)
 8005750:	f004 ff44 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d108      	bne.n	800576c <checkAktifCalisma+0x1400>

					katkapisivicihatasi=0;
 800575a:	4b60      	ldr	r3, [pc, #384]	@ (80058dc <checkAktifCalisma+0x1570>)
 800575c:	2200      	movs	r2, #0
 800575e:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 8005760:	4b5b      	ldr	r3, [pc, #364]	@ (80058d0 <checkAktifCalisma+0x1564>)
 8005762:	2200      	movs	r2, #0
 8005764:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8005766:	2004      	movs	r0, #4
 8005768:	f7fe fbf6 	bl	8003f58 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3) && tablakapisivicihatasi==0) {
 800576c:	4b57      	ldr	r3, [pc, #348]	@ (80058cc <checkAktifCalisma+0x1560>)
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d103      	bne.n	800577c <checkAktifCalisma+0x1410>
 8005774:	4b5c      	ldr	r3, [pc, #368]	@ (80058e8 <checkAktifCalisma+0x157c>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d023      	beq.n	80057c4 <checkAktifCalisma+0x1458>
 800577c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005780:	4854      	ldr	r0, [pc, #336]	@ (80058d4 <checkAktifCalisma+0x1568>)
 8005782:	f004 ff2b 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005786:	4603      	mov	r3, r0
 8005788:	2b01      	cmp	r3, #1
 800578a:	d11b      	bne.n	80057c4 <checkAktifCalisma+0x1458>
 800578c:	4b52      	ldr	r3, [pc, #328]	@ (80058d8 <checkAktifCalisma+0x156c>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d003      	beq.n	800579c <checkAktifCalisma+0x1430>
 8005794:	4b50      	ldr	r3, [pc, #320]	@ (80058d8 <checkAktifCalisma+0x156c>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b03      	cmp	r3, #3
 800579a:	d113      	bne.n	80057c4 <checkAktifCalisma+0x1458>
 800579c:	4b53      	ldr	r3, [pc, #332]	@ (80058ec <checkAktifCalisma+0x1580>)
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	f083 0301 	eor.w	r3, r3, #1
 80057a4:	b2db      	uxtb	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00c      	beq.n	80057c4 <checkAktifCalisma+0x1458>

					hataVar=1;
 80057aa:	4b4d      	ldr	r3, [pc, #308]	@ (80058e0 <checkAktifCalisma+0x1574>)
 80057ac:	2201      	movs	r2, #1
 80057ae:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 80057b0:	2005      	movs	r0, #5
 80057b2:	f7fb fbd3 	bl	8000f5c <hataKoduLcdGoster>
					hata2EEPROM(5);
 80057b6:	2005      	movs	r0, #5
 80057b8:	f7fb fb78 	bl	8000eac <hata2EEPROM>
					tablakapisivicihatasi=1;
 80057bc:	4b4b      	ldr	r3, [pc, #300]	@ (80058ec <checkAktifCalisma+0x1580>)
 80057be:	2201      	movs	r2, #1
 80057c0:	701a      	strb	r2, [r3, #0]
 80057c2:	e023      	b.n	800580c <checkAktifCalisma+0x14a0>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80057c4:	4b49      	ldr	r3, [pc, #292]	@ (80058ec <checkAktifCalisma+0x1580>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01f      	beq.n	800580c <checkAktifCalisma+0x14a0>
 80057cc:	4b45      	ldr	r3, [pc, #276]	@ (80058e4 <checkAktifCalisma+0x1578>)
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d01b      	beq.n	800580c <checkAktifCalisma+0x14a0>
 80057d4:	4b3d      	ldr	r3, [pc, #244]	@ (80058cc <checkAktifCalisma+0x1560>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	f083 0301 	eor.w	r3, r3, #1
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d014      	beq.n	800580c <checkAktifCalisma+0x14a0>
 80057e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80057e6:	483b      	ldr	r0, [pc, #236]	@ (80058d4 <checkAktifCalisma+0x1568>)
 80057e8:	f004 fef8 	bl	800a5dc <HAL_GPIO_ReadPin>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10c      	bne.n	800580c <checkAktifCalisma+0x14a0>
 80057f2:	4b3c      	ldr	r3, [pc, #240]	@ (80058e4 <checkAktifCalisma+0x1578>)
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d008      	beq.n	800580c <checkAktifCalisma+0x14a0>
					tablakapisivicihatasi=0;
 80057fa:	4b3c      	ldr	r3, [pc, #240]	@ (80058ec <checkAktifCalisma+0x1580>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 8005800:	4b39      	ldr	r3, [pc, #228]	@ (80058e8 <checkAktifCalisma+0x157c>)
 8005802:	2200      	movs	r2, #0
 8005804:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 8005806:	2005      	movs	r0, #5
 8005808:	f7fe fba6 	bl	8003f58 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if(((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) && (maksimumcalismahatasi==0)) {
 800580c:	4b38      	ldr	r3, [pc, #224]	@ (80058f0 <checkAktifCalisma+0x1584>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d107      	bne.n	8005824 <checkAktifCalisma+0x14b8>
 8005814:	4b37      	ldr	r3, [pc, #220]	@ (80058f4 <checkAktifCalisma+0x1588>)
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d103      	bne.n	8005824 <checkAktifCalisma+0x14b8>
 800581c:	4b36      	ldr	r3, [pc, #216]	@ (80058f8 <checkAktifCalisma+0x158c>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d01b      	beq.n	800585c <checkAktifCalisma+0x14f0>
 8005824:	4b35      	ldr	r3, [pc, #212]	@ (80058fc <checkAktifCalisma+0x1590>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	f083 0301 	eor.w	r3, r3, #1
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d014      	beq.n	800585c <checkAktifCalisma+0x14f0>
				    if(millis-timer4>=makineCalismaTmr) {
 8005832:	4b33      	ldr	r3, [pc, #204]	@ (8005900 <checkAktifCalisma+0x1594>)
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	4b33      	ldr	r3, [pc, #204]	@ (8005904 <checkAktifCalisma+0x1598>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	4a32      	ldr	r2, [pc, #200]	@ (8005908 <checkAktifCalisma+0x159c>)
 800583e:	7812      	ldrb	r2, [r2, #0]
 8005840:	4293      	cmp	r3, r2
 8005842:	d30b      	bcc.n	800585c <checkAktifCalisma+0x14f0>
					  	hataVar=1;
 8005844:	4b26      	ldr	r3, [pc, #152]	@ (80058e0 <checkAktifCalisma+0x1574>)
 8005846:	2201      	movs	r2, #1
 8005848:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 800584a:	2006      	movs	r0, #6
 800584c:	f7fb fb86 	bl	8000f5c <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8005850:	2006      	movs	r0, #6
 8005852:	f7fb fb2b 	bl	8000eac <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8005856:	4b29      	ldr	r3, [pc, #164]	@ (80058fc <checkAktifCalisma+0x1590>)
 8005858:	2201      	movs	r2, #1
 800585a:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 800585c:	4b27      	ldr	r3, [pc, #156]	@ (80058fc <checkAktifCalisma+0x1590>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d013      	beq.n	800588c <checkAktifCalisma+0x1520>
 8005864:	2108      	movs	r1, #8
 8005866:	481b      	ldr	r0, [pc, #108]	@ (80058d4 <checkAktifCalisma+0x1568>)
 8005868:	f004 feb8 	bl	800a5dc <HAL_GPIO_ReadPin>
 800586c:	4603      	mov	r3, r0
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00c      	beq.n	800588c <checkAktifCalisma+0x1520>
 8005872:	4b16      	ldr	r3, [pc, #88]	@ (80058cc <checkAktifCalisma+0x1560>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	f083 0301 	eor.w	r3, r3, #1
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b00      	cmp	r3, #0
 800587e:	d005      	beq.n	800588c <checkAktifCalisma+0x1520>
					maksimumcalismahatasi=0;
 8005880:	4b1e      	ldr	r3, [pc, #120]	@ (80058fc <checkAktifCalisma+0x1590>)
 8005882:	2200      	movs	r2, #0
 8005884:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8005886:	2006      	movs	r0, #6
 8005888:	f7fe fb66 	bl	8003f58 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 800588c:	4b1f      	ldr	r3, [pc, #124]	@ (800590c <checkAktifCalisma+0x15a0>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d10b      	bne.n	80058ac <checkAktifCalisma+0x1540>
 8005894:	4b17      	ldr	r3, [pc, #92]	@ (80058f4 <checkAktifCalisma+0x1588>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d107      	bne.n	80058ac <checkAktifCalisma+0x1540>
 800589c:	4b1c      	ldr	r3, [pc, #112]	@ (8005910 <checkAktifCalisma+0x15a4>)
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d103      	bne.n	80058ac <checkAktifCalisma+0x1540>
 80058a4:	4b14      	ldr	r3, [pc, #80]	@ (80058f8 <checkAktifCalisma+0x158c>)
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d035      	beq.n	8005918 <checkAktifCalisma+0x15ac>
					makineCalisiyor=0;
 80058ac:	4b19      	ldr	r3, [pc, #100]	@ (8005914 <checkAktifCalisma+0x15a8>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 80058b2:	4b07      	ldr	r3, [pc, #28]	@ (80058d0 <checkAktifCalisma+0x1564>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 80058b8:	4b0b      	ldr	r3, [pc, #44]	@ (80058e8 <checkAktifCalisma+0x157c>)
 80058ba:	2201      	movs	r2, #1
 80058bc:	701a      	strb	r2, [r3, #0]
 80058be:	e032      	b.n	8005926 <checkAktifCalisma+0x15ba>
 80058c0:	2000111a 	.word	0x2000111a
 80058c4:	200010bf 	.word	0x200010bf
 80058c8:	40010c00 	.word	0x40010c00
 80058cc:	2000110a 	.word	0x2000110a
 80058d0:	2000111e 	.word	0x2000111e
 80058d4:	40010800 	.word	0x40010800
 80058d8:	200010c4 	.word	0x200010c4
 80058dc:	2000111b 	.word	0x2000111b
 80058e0:	20001111 	.word	0x20001111
 80058e4:	200010fe 	.word	0x200010fe
 80058e8:	2000111f 	.word	0x2000111f
 80058ec:	2000111c 	.word	0x2000111c
 80058f0:	20001110 	.word	0x20001110
 80058f4:	200010f5 	.word	0x200010f5
 80058f8:	200010f4 	.word	0x200010f4
 80058fc:	2000110b 	.word	0x2000110b
 8005900:	20001094 	.word	0x20001094
 8005904:	200010a8 	.word	0x200010a8
 8005908:	200010d4 	.word	0x200010d4
 800590c:	200010f2 	.word	0x200010f2
 8005910:	200010f3 	.word	0x200010f3
 8005914:	20001112 	.word	0x20001112
				} else {
					makineCalisiyor=1;
 8005918:	4b3a      	ldr	r3, [pc, #232]	@ (8005a04 <checkAktifCalisma+0x1698>)
 800591a:	2201      	movs	r2, #1
 800591c:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 800591e:	4b3a      	ldr	r3, [pc, #232]	@ (8005a08 <checkAktifCalisma+0x169c>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a3a      	ldr	r2, [pc, #232]	@ (8005a0c <checkAktifCalisma+0x16a0>)
 8005924:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8005926:	4b3a      	ldr	r3, [pc, #232]	@ (8005a10 <checkAktifCalisma+0x16a4>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d02f      	beq.n	800598e <checkAktifCalisma+0x1622>
 800592e:	4b39      	ldr	r3, [pc, #228]	@ (8005a14 <checkAktifCalisma+0x16a8>)
 8005930:	781b      	ldrb	r3, [r3, #0]
 8005932:	f083 0301 	eor.w	r3, r3, #1
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	d028      	beq.n	800598e <checkAktifCalisma+0x1622>
 800593c:	4b36      	ldr	r3, [pc, #216]	@ (8005a18 <checkAktifCalisma+0x16ac>)
 800593e:	781b      	ldrb	r3, [r3, #0]
 8005940:	f083 0301 	eor.w	r3, r3, #1
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d021      	beq.n	800598e <checkAktifCalisma+0x1622>
 800594a:	4b34      	ldr	r3, [pc, #208]	@ (8005a1c <checkAktifCalisma+0x16b0>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	f083 0301 	eor.w	r3, r3, #1
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b00      	cmp	r3, #0
 8005956:	d01a      	beq.n	800598e <checkAktifCalisma+0x1622>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8005958:	4b31      	ldr	r3, [pc, #196]	@ (8005a20 <checkAktifCalisma+0x16b4>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	f083 0301 	eor.w	r3, r3, #1
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d013      	beq.n	800598e <checkAktifCalisma+0x1622>
 8005966:	4b2f      	ldr	r3, [pc, #188]	@ (8005a24 <checkAktifCalisma+0x16b8>)
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	f083 0301 	eor.w	r3, r3, #1
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00c      	beq.n	800598e <checkAktifCalisma+0x1622>
 8005974:	4b2c      	ldr	r3, [pc, #176]	@ (8005a28 <checkAktifCalisma+0x16bc>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	f083 0301 	eor.w	r3, r3, #1
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d005      	beq.n	800598e <checkAktifCalisma+0x1622>

					hataVar=0;
 8005982:	4b23      	ldr	r3, [pc, #140]	@ (8005a10 <checkAktifCalisma+0x16a4>)
 8005984:	2200      	movs	r2, #0
 8005986:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8005988:	2007      	movs	r0, #7
 800598a:	f7fe fae5 	bl	8003f58 <lcdUpdate>
				}

				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==1 && basinchatasi==0
 800598e:	4b20      	ldr	r3, [pc, #128]	@ (8005a10 <checkAktifCalisma+0x16a4>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d02a      	beq.n	80059ec <checkAktifCalisma+0x1680>
 8005996:	4b1f      	ldr	r3, [pc, #124]	@ (8005a14 <checkAktifCalisma+0x16a8>)
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	f083 0301 	eor.w	r3, r3, #1
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d023      	beq.n	80059ec <checkAktifCalisma+0x1680>
 80059a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005a18 <checkAktifCalisma+0x16ac>)
 80059a6:	781b      	ldrb	r3, [r3, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d01f      	beq.n	80059ec <checkAktifCalisma+0x1680>
 80059ac:	4b1b      	ldr	r3, [pc, #108]	@ (8005a1c <checkAktifCalisma+0x16b0>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	f083 0301 	eor.w	r3, r3, #1
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d018      	beq.n	80059ec <checkAktifCalisma+0x1680>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0)
 80059ba:	4b19      	ldr	r3, [pc, #100]	@ (8005a20 <checkAktifCalisma+0x16b4>)
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	f083 0301 	eor.w	r3, r3, #1
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d011      	beq.n	80059ec <checkAktifCalisma+0x1680>
 80059c8:	4b16      	ldr	r3, [pc, #88]	@ (8005a24 <checkAktifCalisma+0x16b8>)
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	f083 0301 	eor.w	r3, r3, #1
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <checkAktifCalisma+0x1680>
 80059d6:	4b14      	ldr	r3, [pc, #80]	@ (8005a28 <checkAktifCalisma+0x16bc>)
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	f083 0301 	eor.w	r3, r3, #1
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d003      	beq.n	80059ec <checkAktifCalisma+0x1680>
				{
					EmnCerHataMakYukariCalis=1;
 80059e4:	4b11      	ldr	r3, [pc, #68]	@ (8005a2c <checkAktifCalisma+0x16c0>)
 80059e6:	2201      	movs	r2, #1
 80059e8:	701a      	strb	r2, [r3, #0]
					EmnCerHataMakYukariCalis=0;
				}

				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 80059ea:	e009      	b.n	8005a00 <checkAktifCalisma+0x1694>
				else if(emniyetCercevesihatasi==0)
 80059ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005a18 <checkAktifCalisma+0x16ac>)
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	f083 0301 	eor.w	r3, r3, #1
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d002      	beq.n	8005a00 <checkAktifCalisma+0x1694>
					EmnCerHataMakYukariCalis=0;
 80059fa:	4b0c      	ldr	r3, [pc, #48]	@ (8005a2c <checkAktifCalisma+0x16c0>)
 80059fc:	2200      	movs	r2, #0
 80059fe:	701a      	strb	r2, [r3, #0]
}
 8005a00:	bf00      	nop
 8005a02:	bd80      	pop	{r7, pc}
 8005a04:	20001112 	.word	0x20001112
 8005a08:	20001094 	.word	0x20001094
 8005a0c:	200010a8 	.word	0x200010a8
 8005a10:	20001111 	.word	0x20001111
 8005a14:	2000110c 	.word	0x2000110c
 8005a18:	2000110d 	.word	0x2000110d
 8005a1c:	2000111a 	.word	0x2000111a
 8005a20:	2000111b 	.word	0x2000111b
 8005a24:	2000111c 	.word	0x2000111c
 8005a28:	2000110b 	.word	0x2000110b
 8005a2c:	20001120 	.word	0x20001120

08005a30 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
			// DEMO MOD BASLIYOR

			// DEMO YUKARI CALISMA

			if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8005a34:	4b8b      	ldr	r3, [pc, #556]	@ (8005c64 <checkDemoModCalisma+0x234>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	f040 81c4 	bne.w	8005dc6 <checkDemoModCalisma+0x396>
 8005a3e:	4b8a      	ldr	r3, [pc, #552]	@ (8005c68 <checkDemoModCalisma+0x238>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 81bf 	beq.w	8005dc6 <checkDemoModCalisma+0x396>
 8005a48:	4b88      	ldr	r3, [pc, #544]	@ (8005c6c <checkDemoModCalisma+0x23c>)
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f040 81ba 	bne.w	8005dc6 <checkDemoModCalisma+0x396>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005a52:	2102      	movs	r1, #2
 8005a54:	4886      	ldr	r0, [pc, #536]	@ (8005c70 <checkDemoModCalisma+0x240>)
 8005a56:	f004 fdc1 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d11d      	bne.n	8005a9c <checkDemoModCalisma+0x6c>
						&& (demoAsagiCalis==0)
 8005a60:	4b84      	ldr	r3, [pc, #528]	@ (8005c74 <checkDemoModCalisma+0x244>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	f083 0301 	eor.w	r3, r3, #1
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d016      	beq.n	8005a9c <checkDemoModCalisma+0x6c>
						&& (demoDevYukari==0)
 8005a6e:	4b82      	ldr	r3, [pc, #520]	@ (8005c78 <checkDemoModCalisma+0x248>)
 8005a70:	781b      	ldrb	r3, [r3, #0]
 8005a72:	f083 0301 	eor.w	r3, r3, #1
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00f      	beq.n	8005a9c <checkDemoModCalisma+0x6c>
						&& (demoDevAsagi==0)) {
 8005a7c:	4b7f      	ldr	r3, [pc, #508]	@ (8005c7c <checkDemoModCalisma+0x24c>)
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	f083 0301 	eor.w	r3, r3, #1
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d008      	beq.n	8005a9c <checkDemoModCalisma+0x6c>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	2104      	movs	r1, #4
 8005a8e:	487c      	ldr	r0, [pc, #496]	@ (8005c80 <checkDemoModCalisma+0x250>)
 8005a90:	f004 fdbb 	bl	800a60a <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8005a94:	4b7b      	ldr	r3, [pc, #492]	@ (8005c84 <checkDemoModCalisma+0x254>)
 8005a96:	2201      	movs	r2, #1
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	e00e      	b.n	8005aba <checkDemoModCalisma+0x8a>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005a9c:	2102      	movs	r1, #2
 8005a9e:	4874      	ldr	r0, [pc, #464]	@ (8005c70 <checkDemoModCalisma+0x240>)
 8005aa0:	f004 fd9c 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d107      	bne.n	8005aba <checkDemoModCalisma+0x8a>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005aaa:	2200      	movs	r2, #0
 8005aac:	2104      	movs	r1, #4
 8005aae:	4874      	ldr	r0, [pc, #464]	@ (8005c80 <checkDemoModCalisma+0x250>)
 8005ab0:	f004 fdab 	bl	800a60a <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8005ab4:	4b73      	ldr	r3, [pc, #460]	@ (8005c84 <checkDemoModCalisma+0x254>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8005aba:	4b72      	ldr	r3, [pc, #456]	@ (8005c84 <checkDemoModCalisma+0x254>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d10b      	bne.n	8005ada <checkDemoModCalisma+0xaa>
 8005ac2:	4b6d      	ldr	r3, [pc, #436]	@ (8005c78 <checkDemoModCalisma+0x248>)
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d107      	bne.n	8005ada <checkDemoModCalisma+0xaa>
 8005aca:	4b6c      	ldr	r3, [pc, #432]	@ (8005c7c <checkDemoModCalisma+0x24c>)
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d103      	bne.n	8005ada <checkDemoModCalisma+0xaa>
 8005ad2:	4b68      	ldr	r3, [pc, #416]	@ (8005c74 <checkDemoModCalisma+0x244>)
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00c      	beq.n	8005af4 <checkDemoModCalisma+0xc4>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005ada:	2201      	movs	r2, #1
 8005adc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ae0:	4867      	ldr	r0, [pc, #412]	@ (8005c80 <checkDemoModCalisma+0x250>)
 8005ae2:	f004 fd92 	bl	800a60a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005aec:	4864      	ldr	r0, [pc, #400]	@ (8005c80 <checkDemoModCalisma+0x250>)
 8005aee:	f004 fd8c 	bl	800a60a <HAL_GPIO_WritePin>
 8005af2:	e00b      	b.n	8005b0c <checkDemoModCalisma+0xdc>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005af4:	2200      	movs	r2, #0
 8005af6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005afa:	4861      	ldr	r0, [pc, #388]	@ (8005c80 <checkDemoModCalisma+0x250>)
 8005afc:	f004 fd85 	bl	800a60a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005b00:	2200      	movs	r2, #0
 8005b02:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b06:	485e      	ldr	r0, [pc, #376]	@ (8005c80 <checkDemoModCalisma+0x250>)
 8005b08:	f004 fd7f 	bl	800a60a <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b0c:	2102      	movs	r1, #2
 8005b0e:	4858      	ldr	r0, [pc, #352]	@ (8005c70 <checkDemoModCalisma+0x240>)
 8005b10:	f004 fd64 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d10d      	bne.n	8005b36 <checkDemoModCalisma+0x106>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005b1a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b1e:	4854      	ldr	r0, [pc, #336]	@ (8005c70 <checkDemoModCalisma+0x240>)
 8005b20:	f004 fd5c 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d105      	bne.n	8005b36 <checkDemoModCalisma+0x106>
						&& (demoYukariCalis==0)
 8005b2a:	4b56      	ldr	r3, [pc, #344]	@ (8005c84 <checkDemoModCalisma+0x254>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	f083 0301 	eor.w	r3, r3, #1
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005b36:	2102      	movs	r1, #2
 8005b38:	484d      	ldr	r0, [pc, #308]	@ (8005c70 <checkDemoModCalisma+0x240>)
 8005b3a:	f004 fd4f 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d125      	bne.n	8005b90 <checkDemoModCalisma+0x160>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005b44:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b48:	4849      	ldr	r0, [pc, #292]	@ (8005c70 <checkDemoModCalisma+0x240>)
 8005b4a:	f004 fd47 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d11d      	bne.n	8005b90 <checkDemoModCalisma+0x160>
						&&(demoYukariCalis==0)
 8005b54:	4b4b      	ldr	r3, [pc, #300]	@ (8005c84 <checkDemoModCalisma+0x254>)
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	f083 0301 	eor.w	r3, r3, #1
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d016      	beq.n	8005b90 <checkDemoModCalisma+0x160>
						&&(demoAsagiCalis==0)
 8005b62:	4b44      	ldr	r3, [pc, #272]	@ (8005c74 <checkDemoModCalisma+0x244>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	f083 0301 	eor.w	r3, r3, #1
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00f      	beq.n	8005b90 <checkDemoModCalisma+0x160>
						&& (demoDevAsagi==0)) {
 8005b70:	4b42      	ldr	r3, [pc, #264]	@ (8005c7c <checkDemoModCalisma+0x24c>)
 8005b72:	781b      	ldrb	r3, [r3, #0]
 8005b74:	f083 0301 	eor.w	r3, r3, #1
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d008      	beq.n	8005b90 <checkDemoModCalisma+0x160>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005b7e:	2201      	movs	r2, #1
 8005b80:	2120      	movs	r1, #32
 8005b82:	483b      	ldr	r0, [pc, #236]	@ (8005c70 <checkDemoModCalisma+0x240>)
 8005b84:	f004 fd41 	bl	800a60a <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8005b88:	4b3b      	ldr	r3, [pc, #236]	@ (8005c78 <checkDemoModCalisma+0x248>)
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	701a      	strb	r2, [r3, #0]
 8005b8e:	e007      	b.n	8005ba0 <checkDemoModCalisma+0x170>
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005b90:	2200      	movs	r2, #0
 8005b92:	2120      	movs	r1, #32
 8005b94:	4836      	ldr	r0, [pc, #216]	@ (8005c70 <checkDemoModCalisma+0x240>)
 8005b96:	f004 fd38 	bl	800a60a <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8005b9a:	4b37      	ldr	r3, [pc, #220]	@ (8005c78 <checkDemoModCalisma+0x248>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005ba0:	2102      	movs	r1, #2
 8005ba2:	4833      	ldr	r0, [pc, #204]	@ (8005c70 <checkDemoModCalisma+0x240>)
 8005ba4:	f004 fd1a 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d125      	bne.n	8005bfa <checkDemoModCalisma+0x1ca>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8005bae:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005bb2:	482f      	ldr	r0, [pc, #188]	@ (8005c70 <checkDemoModCalisma+0x240>)
 8005bb4:	f004 fd12 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d11d      	bne.n	8005bfa <checkDemoModCalisma+0x1ca>
						&&(demoYukariCalis==0)
 8005bbe:	4b31      	ldr	r3, [pc, #196]	@ (8005c84 <checkDemoModCalisma+0x254>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	f083 0301 	eor.w	r3, r3, #1
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d016      	beq.n	8005bfa <checkDemoModCalisma+0x1ca>
						&&(demoDevYukari==0)
 8005bcc:	4b2a      	ldr	r3, [pc, #168]	@ (8005c78 <checkDemoModCalisma+0x248>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	f083 0301 	eor.w	r3, r3, #1
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00f      	beq.n	8005bfa <checkDemoModCalisma+0x1ca>
						&& (demoAsagiCalis==0)) {
 8005bda:	4b26      	ldr	r3, [pc, #152]	@ (8005c74 <checkDemoModCalisma+0x244>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	f083 0301 	eor.w	r3, r3, #1
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d008      	beq.n	8005bfa <checkDemoModCalisma+0x1ca>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005be8:	2201      	movs	r2, #1
 8005bea:	2110      	movs	r1, #16
 8005bec:	4820      	ldr	r0, [pc, #128]	@ (8005c70 <checkDemoModCalisma+0x240>)
 8005bee:	f004 fd0c 	bl	800a60a <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8005bf2:	4b22      	ldr	r3, [pc, #136]	@ (8005c7c <checkDemoModCalisma+0x24c>)
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	701a      	strb	r2, [r3, #0]
 8005bf8:	e007      	b.n	8005c0a <checkDemoModCalisma+0x1da>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	2110      	movs	r1, #16
 8005bfe:	481c      	ldr	r0, [pc, #112]	@ (8005c70 <checkDemoModCalisma+0x240>)
 8005c00:	f004 fd03 	bl	800a60a <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8005c04:	4b1d      	ldr	r3, [pc, #116]	@ (8005c7c <checkDemoModCalisma+0x24c>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8005c0a:	2104      	movs	r1, #4
 8005c0c:	4818      	ldr	r0, [pc, #96]	@ (8005c70 <checkDemoModCalisma+0x240>)
 8005c0e:	f004 fce5 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d139      	bne.n	8005c8c <checkDemoModCalisma+0x25c>
						&& (demoYukariCalis==0)
 8005c18:	4b1a      	ldr	r3, [pc, #104]	@ (8005c84 <checkDemoModCalisma+0x254>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	f083 0301 	eor.w	r3, r3, #1
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d032      	beq.n	8005c8c <checkDemoModCalisma+0x25c>
						&& (demoDevAsagi==0)
 8005c26:	4b15      	ldr	r3, [pc, #84]	@ (8005c7c <checkDemoModCalisma+0x24c>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	f083 0301 	eor.w	r3, r3, #1
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d02b      	beq.n	8005c8c <checkDemoModCalisma+0x25c>
						&& (demoDevYukari==0)) {
 8005c34:	4b10      	ldr	r3, [pc, #64]	@ (8005c78 <checkDemoModCalisma+0x248>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	f083 0301 	eor.w	r3, r3, #1
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d024      	beq.n	8005c8c <checkDemoModCalisma+0x25c>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8005c42:	2201      	movs	r2, #1
 8005c44:	2102      	movs	r1, #2
 8005c46:	480e      	ldr	r0, [pc, #56]	@ (8005c80 <checkDemoModCalisma+0x250>)
 8005c48:	f004 fcdf 	bl	800a60a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	2101      	movs	r1, #1
 8005c50:	480b      	ldr	r0, [pc, #44]	@ (8005c80 <checkDemoModCalisma+0x250>)
 8005c52:	f004 fcda 	bl	800a60a <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8005c56:	4b07      	ldr	r3, [pc, #28]	@ (8005c74 <checkDemoModCalisma+0x244>)
 8005c58:	2201      	movs	r2, #1
 8005c5a:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005c88 <checkDemoModCalisma+0x258>)
 8005c5e:	2201      	movs	r2, #1
 8005c60:	701a      	strb	r2, [r3, #0]
 8005c62:	e027      	b.n	8005cb4 <checkDemoModCalisma+0x284>
 8005c64:	200010da 	.word	0x200010da
 8005c68:	2000110e 	.word	0x2000110e
 8005c6c:	200010d9 	.word	0x200010d9
 8005c70:	40011000 	.word	0x40011000
 8005c74:	20001115 	.word	0x20001115
 8005c78:	20001116 	.word	0x20001116
 8005c7c:	20001117 	.word	0x20001117
 8005c80:	40010c00 	.word	0x40010c00
 8005c84:	20001114 	.word	0x20001114
 8005c88:	200010fb 	.word	0x200010fb
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8005c8c:	2104      	movs	r1, #4
 8005c8e:	486d      	ldr	r0, [pc, #436]	@ (8005e44 <checkDemoModCalisma+0x414>)
 8005c90:	f004 fca4 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d10c      	bne.n	8005cb4 <checkDemoModCalisma+0x284>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2102      	movs	r1, #2
 8005c9e:	486a      	ldr	r0, [pc, #424]	@ (8005e48 <checkDemoModCalisma+0x418>)
 8005ca0:	f004 fcb3 	bl	800a60a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	4867      	ldr	r0, [pc, #412]	@ (8005e48 <checkDemoModCalisma+0x418>)
 8005caa:	f004 fcae 	bl	800a60a <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8005cae:	4b67      	ldr	r3, [pc, #412]	@ (8005e4c <checkDemoModCalisma+0x41c>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8005cb4:	2104      	movs	r1, #4
 8005cb6:	4863      	ldr	r0, [pc, #396]	@ (8005e44 <checkDemoModCalisma+0x414>)
 8005cb8:	f004 fc90 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d10d      	bne.n	8005cde <checkDemoModCalisma+0x2ae>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	2180      	movs	r1, #128	@ 0x80
 8005cc6:	4862      	ldr	r0, [pc, #392]	@ (8005e50 <checkDemoModCalisma+0x420>)
 8005cc8:	f004 fc9f 	bl	800a60a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005ccc:	2201      	movs	r2, #1
 8005cce:	2120      	movs	r1, #32
 8005cd0:	485f      	ldr	r0, [pc, #380]	@ (8005e50 <checkDemoModCalisma+0x420>)
 8005cd2:	f004 fc9a 	bl	800a60a <HAL_GPIO_WritePin>
					timer3 = millis;
 8005cd6:	4b5f      	ldr	r3, [pc, #380]	@ (8005e54 <checkDemoModCalisma+0x424>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a5f      	ldr	r2, [pc, #380]	@ (8005e58 <checkDemoModCalisma+0x428>)
 8005cdc:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005cde:	4b5d      	ldr	r3, [pc, #372]	@ (8005e54 <checkDemoModCalisma+0x424>)
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4b5d      	ldr	r3, [pc, #372]	@ (8005e58 <checkDemoModCalisma+0x428>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d909      	bls.n	8005d00 <checkDemoModCalisma+0x2d0>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005cec:	2200      	movs	r2, #0
 8005cee:	2180      	movs	r1, #128	@ 0x80
 8005cf0:	4857      	ldr	r0, [pc, #348]	@ (8005e50 <checkDemoModCalisma+0x420>)
 8005cf2:	f004 fc8a 	bl	800a60a <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	2120      	movs	r1, #32
 8005cfa:	4855      	ldr	r0, [pc, #340]	@ (8005e50 <checkDemoModCalisma+0x420>)
 8005cfc:	f004 fc85 	bl	800a60a <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005d00:	2102      	movs	r1, #2
 8005d02:	4850      	ldr	r0, [pc, #320]	@ (8005e44 <checkDemoModCalisma+0x414>)
 8005d04:	f004 fc6a 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d108      	bne.n	8005d20 <checkDemoModCalisma+0x2f0>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8005d0e:	2201      	movs	r2, #1
 8005d10:	2140      	movs	r1, #64	@ 0x40
 8005d12:	484f      	ldr	r0, [pc, #316]	@ (8005e50 <checkDemoModCalisma+0x420>)
 8005d14:	f004 fc79 	bl	800a60a <HAL_GPIO_WritePin>
					timer3 = millis;
 8005d18:	4b4e      	ldr	r3, [pc, #312]	@ (8005e54 <checkDemoModCalisma+0x424>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a4e      	ldr	r2, [pc, #312]	@ (8005e58 <checkDemoModCalisma+0x428>)
 8005d1e:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8005d20:	4b4c      	ldr	r3, [pc, #304]	@ (8005e54 <checkDemoModCalisma+0x424>)
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	4b4c      	ldr	r3, [pc, #304]	@ (8005e58 <checkDemoModCalisma+0x428>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b04      	cmp	r3, #4
 8005d2c:	d904      	bls.n	8005d38 <checkDemoModCalisma+0x308>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005d2e:	2200      	movs	r2, #0
 8005d30:	2140      	movs	r1, #64	@ 0x40
 8005d32:	4847      	ldr	r0, [pc, #284]	@ (8005e50 <checkDemoModCalisma+0x420>)
 8005d34:	f004 fc69 	bl	800a60a <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8005d38:	4b48      	ldr	r3, [pc, #288]	@ (8005e5c <checkDemoModCalisma+0x42c>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d024      	beq.n	8005d8a <checkDemoModCalisma+0x35a>
 8005d40:	4b47      	ldr	r3, [pc, #284]	@ (8005e60 <checkDemoModCalisma+0x430>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d020      	beq.n	8005d8a <checkDemoModCalisma+0x35a>

					calismaSayisiDemo++;
 8005d48:	4b46      	ldr	r3, [pc, #280]	@ (8005e64 <checkDemoModCalisma+0x434>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	3301      	adds	r3, #1
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	4b44      	ldr	r3, [pc, #272]	@ (8005e64 <checkDemoModCalisma+0x434>)
 8005d52:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi == 255) {
 8005d54:	4b44      	ldr	r3, [pc, #272]	@ (8005e68 <checkDemoModCalisma+0x438>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	2bff      	cmp	r3, #255	@ 0xff
 8005d5a:	d108      	bne.n	8005d6e <checkDemoModCalisma+0x33e>
							calismaSayisi = 0;
 8005d5c:	4b42      	ldr	r3, [pc, #264]	@ (8005e68 <checkDemoModCalisma+0x438>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	701a      	strb	r2, [r3, #0]
							calismaCount++;
 8005d62:	4b42      	ldr	r3, [pc, #264]	@ (8005e6c <checkDemoModCalisma+0x43c>)
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	3301      	adds	r3, #1
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	4b40      	ldr	r3, [pc, #256]	@ (8005e6c <checkDemoModCalisma+0x43c>)
 8005d6c:	701a      	strb	r2, [r3, #0]
				}
					eepromData[28] = calismaSayisiDemo;
 8005d6e:	4b3d      	ldr	r3, [pc, #244]	@ (8005e64 <checkDemoModCalisma+0x434>)
 8005d70:	781a      	ldrb	r2, [r3, #0]
 8005d72:	4b3f      	ldr	r3, [pc, #252]	@ (8005e70 <checkDemoModCalisma+0x440>)
 8005d74:	771a      	strb	r2, [r3, #28]
					eepromData[30] = calismaCountDemo;
 8005d76:	4b3f      	ldr	r3, [pc, #252]	@ (8005e74 <checkDemoModCalisma+0x444>)
 8005d78:	781a      	ldrb	r2, [r3, #0]
 8005d7a:	4b3d      	ldr	r3, [pc, #244]	@ (8005e70 <checkDemoModCalisma+0x440>)
 8005d7c:	779a      	strb	r2, [r3, #30]

					hafizaYaz=1;
 8005d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8005e78 <checkDemoModCalisma+0x448>)
 8005d80:	2201      	movs	r2, #1
 8005d82:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=0;
 8005d84:	4b36      	ldr	r3, [pc, #216]	@ (8005e60 <checkDemoModCalisma+0x430>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8005d8a:	4b3c      	ldr	r3, [pc, #240]	@ (8005e7c <checkDemoModCalisma+0x44c>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d156      	bne.n	8005e40 <checkDemoModCalisma+0x410>
					lcd_print(2,1,"Cycle     ");
 8005d92:	4a3b      	ldr	r2, [pc, #236]	@ (8005e80 <checkDemoModCalisma+0x450>)
 8005d94:	2101      	movs	r1, #1
 8005d96:	2002      	movs	r0, #2
 8005d98:	f003 f8f6 	bl	8008f88 <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8005d9c:	4a39      	ldr	r2, [pc, #228]	@ (8005e84 <checkDemoModCalisma+0x454>)
 8005d9e:	2101      	movs	r1, #1
 8005da0:	2001      	movs	r0, #1
 8005da2:	f003 f8f1 	bl	8008f88 <lcd_print>
					itoa(calismaSayisiDemo, snum, 10);
 8005da6:	4b2f      	ldr	r3, [pc, #188]	@ (8005e64 <checkDemoModCalisma+0x434>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	220a      	movs	r2, #10
 8005dac:	4936      	ldr	r1, [pc, #216]	@ (8005e88 <checkDemoModCalisma+0x458>)
 8005dae:	4618      	mov	r0, r3
 8005db0:	f007 fc40 	bl	800d634 <itoa>
					lcd_print(2,11,snum);
 8005db4:	4a34      	ldr	r2, [pc, #208]	@ (8005e88 <checkDemoModCalisma+0x458>)
 8005db6:	210b      	movs	r1, #11
 8005db8:	2002      	movs	r0, #2
 8005dba:	f003 f8e5 	bl	8008f88 <lcd_print>
					mesajYazildi=1;
 8005dbe:	4b33      	ldr	r3, [pc, #204]	@ (8005e8c <checkDemoModCalisma+0x45c>)
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8005dc4:	e03c      	b.n	8005e40 <checkDemoModCalisma+0x410>
				}
			} else if(demoMode==1 || menuGiris==1) {
 8005dc6:	4b32      	ldr	r3, [pc, #200]	@ (8005e90 <checkDemoModCalisma+0x460>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d003      	beq.n	8005dd6 <checkDemoModCalisma+0x3a6>
 8005dce:	4b2b      	ldr	r3, [pc, #172]	@ (8005e7c <checkDemoModCalisma+0x44c>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d134      	bne.n	8005e40 <checkDemoModCalisma+0x410>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005ddc:	481a      	ldr	r0, [pc, #104]	@ (8005e48 <checkDemoModCalisma+0x418>)
 8005dde:	f004 fc14 	bl	800a60a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005de2:	2200      	movs	r2, #0
 8005de4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005de8:	4817      	ldr	r0, [pc, #92]	@ (8005e48 <checkDemoModCalisma+0x418>)
 8005dea:	f004 fc0e 	bl	800a60a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005dee:	2200      	movs	r2, #0
 8005df0:	2104      	movs	r1, #4
 8005df2:	4815      	ldr	r0, [pc, #84]	@ (8005e48 <checkDemoModCalisma+0x418>)
 8005df4:	f004 fc09 	bl	800a60a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005df8:	2200      	movs	r2, #0
 8005dfa:	2102      	movs	r1, #2
 8005dfc:	4812      	ldr	r0, [pc, #72]	@ (8005e48 <checkDemoModCalisma+0x418>)
 8005dfe:	f004 fc04 	bl	800a60a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005e02:	2200      	movs	r2, #0
 8005e04:	2101      	movs	r1, #1
 8005e06:	4810      	ldr	r0, [pc, #64]	@ (8005e48 <checkDemoModCalisma+0x418>)
 8005e08:	f004 fbff 	bl	800a60a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	2120      	movs	r1, #32
 8005e10:	480c      	ldr	r0, [pc, #48]	@ (8005e44 <checkDemoModCalisma+0x414>)
 8005e12:	f004 fbfa 	bl	800a60a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005e16:	2200      	movs	r2, #0
 8005e18:	2110      	movs	r1, #16
 8005e1a:	480a      	ldr	r0, [pc, #40]	@ (8005e44 <checkDemoModCalisma+0x414>)
 8005e1c:	f004 fbf5 	bl	800a60a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005e20:	2200      	movs	r2, #0
 8005e22:	2180      	movs	r1, #128	@ 0x80
 8005e24:	480a      	ldr	r0, [pc, #40]	@ (8005e50 <checkDemoModCalisma+0x420>)
 8005e26:	f004 fbf0 	bl	800a60a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2140      	movs	r1, #64	@ 0x40
 8005e2e:	4808      	ldr	r0, [pc, #32]	@ (8005e50 <checkDemoModCalisma+0x420>)
 8005e30:	f004 fbeb 	bl	800a60a <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005e34:	2200      	movs	r2, #0
 8005e36:	2120      	movs	r1, #32
 8005e38:	4805      	ldr	r0, [pc, #20]	@ (8005e50 <checkDemoModCalisma+0x420>)
 8005e3a:	f004 fbe6 	bl	800a60a <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8005e3e:	e7ff      	b.n	8005e40 <checkDemoModCalisma+0x410>
 8005e40:	bf00      	nop
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	40011000 	.word	0x40011000
 8005e48:	40010c00 	.word	0x40010c00
 8005e4c:	20001115 	.word	0x20001115
 8005e50:	40010800 	.word	0x40010800
 8005e54:	20001094 	.word	0x20001094
 8005e58:	200010a4 	.word	0x200010a4
 8005e5c:	20001114 	.word	0x20001114
 8005e60:	200010fb 	.word	0x200010fb
 8005e64:	200010b5 	.word	0x200010b5
 8005e68:	200010b4 	.word	0x200010b4
 8005e6c:	200010b6 	.word	0x200010b6
 8005e70:	20000fec 	.word	0x20000fec
 8005e74:	200010b7 	.word	0x200010b7
 8005e78:	200010e9 	.word	0x200010e9
 8005e7c:	200010d9 	.word	0x200010d9
 8005e80:	0800ebbc 	.word	0x0800ebbc
 8005e84:	0800ebc8 	.word	0x0800ebc8
 8005e88:	2000105c 	.word	0x2000105c
 8005e8c:	200010f1 	.word	0x200010f1
 8005e90:	200010da 	.word	0x200010da

08005e94 <mainLoop>:

void mainLoop() {
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
	while(1) {
		checkLCDBacklight();
 8005e98:	f7fe f8b6 	bl	8004008 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	488b      	ldr	r0, [pc, #556]	@ (80060cc <mainLoop+0x238>)
 8005ea0:	f004 fb9c 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d136      	bne.n	8005f18 <mainLoop+0x84>
 8005eaa:	2108      	movs	r1, #8
 8005eac:	4888      	ldr	r0, [pc, #544]	@ (80060d0 <mainLoop+0x23c>)
 8005eae:	f004 fb95 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d12f      	bne.n	8005f18 <mainLoop+0x84>
 8005eb8:	2102      	movs	r1, #2
 8005eba:	4884      	ldr	r0, [pc, #528]	@ (80060cc <mainLoop+0x238>)
 8005ebc:	f004 fb8e 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d128      	bne.n	8005f18 <mainLoop+0x84>
 8005ec6:	2104      	movs	r1, #4
 8005ec8:	4880      	ldr	r0, [pc, #512]	@ (80060cc <mainLoop+0x238>)
 8005eca:	f004 fb87 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d121      	bne.n	8005f18 <mainLoop+0x84>
 8005ed4:	2108      	movs	r1, #8
 8005ed6:	487d      	ldr	r0, [pc, #500]	@ (80060cc <mainLoop+0x238>)
 8005ed8:	f004 fb80 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d11a      	bne.n	8005f18 <mainLoop+0x84>
 8005ee2:	2180      	movs	r1, #128	@ 0x80
 8005ee4:	487a      	ldr	r0, [pc, #488]	@ (80060d0 <mainLoop+0x23c>)
 8005ee6:	f004 fb79 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d113      	bne.n	8005f18 <mainLoop+0x84>
 8005ef0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005ef4:	4876      	ldr	r0, [pc, #472]	@ (80060d0 <mainLoop+0x23c>)
 8005ef6:	f004 fb71 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d10b      	bne.n	8005f18 <mainLoop+0x84>
 8005f00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005f04:	4872      	ldr	r0, [pc, #456]	@ (80060d0 <mainLoop+0x23c>)
 8005f06:	f004 fb69 	bl	800a5dc <HAL_GPIO_ReadPin>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d103      	bne.n	8005f18 <mainLoop+0x84>
			butonKontrol=0;
 8005f10:	4b70      	ldr	r3, [pc, #448]	@ (80060d4 <mainLoop+0x240>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	701a      	strb	r2, [r3, #0]
 8005f16:	e003      	b.n	8005f20 <mainLoop+0x8c>
		} else {
			backLightTimer = millis;
 8005f18:	4b6f      	ldr	r3, [pc, #444]	@ (80060d8 <mainLoop+0x244>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a6f      	ldr	r2, [pc, #444]	@ (80060dc <mainLoop+0x248>)
 8005f1e:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8005f20:	f7fe f924 	bl	800416c <buttonCheck>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d103      	bne.n	8005f32 <mainLoop+0x9e>
			backLightTimer = millis;
 8005f2a:	4b6b      	ldr	r3, [pc, #428]	@ (80060d8 <mainLoop+0x244>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a6b      	ldr	r2, [pc, #428]	@ (80060dc <mainLoop+0x248>)
 8005f30:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz == 1) {
 8005f32:	4b6b      	ldr	r3, [pc, #428]	@ (80060e0 <mainLoop+0x24c>)
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d005      	beq.n	8005f46 <mainLoop+0xb2>
			hafizaYaz = 0;
 8005f3a:	4b69      	ldr	r3, [pc, #420]	@ (80060e0 <mainLoop+0x24c>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	701a      	strb	r2, [r3, #0]
			saveEEPROM(1);
 8005f40:	2001      	movs	r0, #1
 8005f42:	f7fa fbb7 	bl	80006b4 <saveEEPROM>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8005f46:	4b67      	ldr	r3, [pc, #412]	@ (80060e4 <mainLoop+0x250>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	f083 0301 	eor.w	r3, r3, #1
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d043      	beq.n	8005fdc <mainLoop+0x148>
 8005f54:	4864      	ldr	r0, [pc, #400]	@ (80060e8 <mainLoop+0x254>)
 8005f56:	f005 f95d 	bl	800b214 <HAL_I2C_GetState>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b20      	cmp	r3, #32
 8005f5e:	d13d      	bne.n	8005fdc <mainLoop+0x148>
		  if(ilkOkuma==0) {
 8005f60:	4b62      	ldr	r3, [pc, #392]	@ (80060ec <mainLoop+0x258>)
 8005f62:	781b      	ldrb	r3, [r3, #0]
 8005f64:	f083 0301 	eor.w	r3, r3, #1
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d028      	beq.n	8005fc0 <mainLoop+0x12c>
			  lcd_print(1, 1, eepromTextGN);
 8005f6e:	4a60      	ldr	r2, [pc, #384]	@ (80060f0 <mainLoop+0x25c>)
 8005f70:	2101      	movs	r1, #1
 8005f72:	2001      	movs	r0, #1
 8005f74:	f003 f808 	bl	8008f88 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8005f78:	4a5e      	ldr	r2, [pc, #376]	@ (80060f4 <mainLoop+0x260>)
 8005f7a:	2101      	movs	r1, #1
 8005f7c:	2002      	movs	r0, #2
 8005f7e:	f003 f803 	bl	8008f88 <lcd_print>
			  HAL_Delay(1000);
 8005f82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005f86:	f003 fd59 	bl	8009a3c <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005f8a:	bf00      	nop
 8005f8c:	4856      	ldr	r0, [pc, #344]	@ (80060e8 <mainLoop+0x254>)
 8005f8e:	f005 f94e 	bl	800b22e <HAL_I2C_GetError>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b04      	cmp	r3, #4
 8005f96:	d0f9      	beq.n	8005f8c <mainLoop+0xf8>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005f98:	e003      	b.n	8005fa2 <mainLoop+0x10e>
				  HAL_Delay(1000);
 8005f9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005f9e:	f003 fd4d 	bl	8009a3c <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005fa2:	4851      	ldr	r0, [pc, #324]	@ (80060e8 <mainLoop+0x254>)
 8005fa4:	f005 f936 	bl	800b214 <HAL_I2C_GetState>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b20      	cmp	r3, #32
 8005fac:	d1f5      	bne.n	8005f9a <mainLoop+0x106>
			  }

			  lcd_print(2, 1, dataOkunduText);
 8005fae:	4a52      	ldr	r2, [pc, #328]	@ (80060f8 <mainLoop+0x264>)
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	2002      	movs	r0, #2
 8005fb4:	f002 ffe8 	bl	8008f88 <lcd_print>

			  ilkOkuma=1;
 8005fb8:	4b4c      	ldr	r3, [pc, #304]	@ (80060ec <mainLoop+0x258>)
 8005fba:	2201      	movs	r2, #1
 8005fbc:	701a      	strb	r2, [r3, #0]
 8005fbe:	e006      	b.n	8005fce <mainLoop+0x13a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8005fc0:	4a4e      	ldr	r2, [pc, #312]	@ (80060fc <mainLoop+0x268>)
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	2002      	movs	r0, #2
 8005fc6:	f002 ffdf 	bl	8008f88 <lcd_print>
			  lcd_clear();
 8005fca:	f003 f809 	bl	8008fe0 <lcd_clear>
		  }

		  lcd_clear();
 8005fce:	f003 f807 	bl	8008fe0 <lcd_clear>

		  eepromKontrol();
 8005fd2:	f7fa f92f 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8005fd6:	4b43      	ldr	r3, [pc, #268]	@ (80060e4 <mainLoop+0x250>)
 8005fd8:	2201      	movs	r2, #1
 8005fda:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8005fdc:	4b48      	ldr	r3, [pc, #288]	@ (8006100 <mainLoop+0x26c>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d11c      	bne.n	800601e <mainLoop+0x18a>
 8005fe4:	4b47      	ldr	r3, [pc, #284]	@ (8006104 <mainLoop+0x270>)
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	f083 0301 	eor.w	r3, r3, #1
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d015      	beq.n	800601e <mainLoop+0x18a>
 8005ff2:	4b45      	ldr	r3, [pc, #276]	@ (8006108 <mainLoop+0x274>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d111      	bne.n	800601e <mainLoop+0x18a>
			lcd_clear();
 8005ffa:	f002 fff1 	bl	8008fe0 <lcd_clear>
			HAL_Delay(10);
 8005ffe:	200a      	movs	r0, #10
 8006000:	f003 fd1c 	bl	8009a3c <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8006004:	4a41      	ldr	r2, [pc, #260]	@ (800610c <mainLoop+0x278>)
 8006006:	2101      	movs	r1, #1
 8006008:	2001      	movs	r0, #1
 800600a:	f002 ffbd 	bl	8008f88 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 800600e:	4a40      	ldr	r2, [pc, #256]	@ (8006110 <mainLoop+0x27c>)
 8006010:	2101      	movs	r1, #1
 8006012:	2002      	movs	r0, #2
 8006014:	f002 ffb8 	bl	8008f88 <lcd_print>
			mesajYazildi=1;
 8006018:	4b3a      	ldr	r3, [pc, #232]	@ (8006104 <mainLoop+0x270>)
 800601a:	2201      	movs	r2, #1
 800601c:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 800601e:	4b38      	ldr	r3, [pc, #224]	@ (8006100 <mainLoop+0x26c>)
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d112      	bne.n	800604c <mainLoop+0x1b8>
 8006026:	2102      	movs	r1, #2
 8006028:	4828      	ldr	r0, [pc, #160]	@ (80060cc <mainLoop+0x238>)
 800602a:	f004 fad7 	bl	800a5dc <HAL_GPIO_ReadPin>
 800602e:	4603      	mov	r3, r0
 8006030:	2b01      	cmp	r3, #1
 8006032:	d10b      	bne.n	800604c <mainLoop+0x1b8>
 8006034:	2104      	movs	r1, #4
 8006036:	4825      	ldr	r0, [pc, #148]	@ (80060cc <mainLoop+0x238>)
 8006038:	f004 fad0 	bl	800a5dc <HAL_GPIO_ReadPin>
 800603c:	4603      	mov	r3, r0
 800603e:	2b01      	cmp	r3, #1
 8006040:	d104      	bne.n	800604c <mainLoop+0x1b8>
			menuGiris=1;
 8006042:	4b2f      	ldr	r3, [pc, #188]	@ (8006100 <mainLoop+0x26c>)
 8006044:	2201      	movs	r2, #1
 8006046:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8006048:	f002 ffca 	bl	8008fe0 <lcd_clear>
		}

		if(menuGiris==1) {
 800604c:	4b2c      	ldr	r3, [pc, #176]	@ (8006100 <mainLoop+0x26c>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d101      	bne.n	8006058 <mainLoop+0x1c4>
			menu();
 8006054:	f7fb faa8 	bl	80015a8 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8006058:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800605c:	481c      	ldr	r0, [pc, #112]	@ (80060d0 <mainLoop+0x23c>)
 800605e:	f004 faec 	bl	800a63a <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8006062:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006066:	482b      	ldr	r0, [pc, #172]	@ (8006114 <mainLoop+0x280>)
 8006068:	f004 fab8 	bl	800a5dc <HAL_GPIO_ReadPin>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10a      	bne.n	8006088 <mainLoop+0x1f4>
 8006072:	4b29      	ldr	r3, [pc, #164]	@ (8006118 <mainLoop+0x284>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	f083 0301 	eor.w	r3, r3, #1
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <mainLoop+0x1f4>
			stopVar=1;
 8006080:	4b26      	ldr	r3, [pc, #152]	@ (800611c <mainLoop+0x288>)
 8006082:	2201      	movs	r2, #1
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	e002      	b.n	800608e <mainLoop+0x1fa>
		} else {
			stopVar=0;
 8006088:	4b24      	ldr	r3, [pc, #144]	@ (800611c <mainLoop+0x288>)
 800608a:	2200      	movs	r2, #0
 800608c:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && EmnCerHataMakYukariCalis==1) {
 800608e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006092:	4820      	ldr	r0, [pc, #128]	@ (8006114 <mainLoop+0x280>)
 8006094:	f004 faa2 	bl	800a5dc <HAL_GPIO_ReadPin>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d107      	bne.n	80060ae <mainLoop+0x21a>
 800609e:	4b20      	ldr	r3, [pc, #128]	@ (8006120 <mainLoop+0x28c>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <mainLoop+0x21a>
			EmnStopVar=1;
 80060a6:	4b1f      	ldr	r3, [pc, #124]	@ (8006124 <mainLoop+0x290>)
 80060a8:	2201      	movs	r2, #1
 80060aa:	701a      	strb	r2, [r3, #0]
 80060ac:	e002      	b.n	80060b4 <mainLoop+0x220>
		} else {
			EmnStopVar=0;
 80060ae:	4b1d      	ldr	r3, [pc, #116]	@ (8006124 <mainLoop+0x290>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80060b4:	f7fe f88e 	bl	80041d4 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80060b8:	f7fe f8c0 	bl	800423c <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80060bc:	f7fe f904 	bl	80042c8 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80060c0:	f7fe f954 	bl	800436c <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80060c4:	f7ff fcb4 	bl	8005a30 <checkDemoModCalisma>
		checkLCDBacklight();
 80060c8:	e6e6      	b.n	8005e98 <mainLoop+0x4>
 80060ca:	bf00      	nop
 80060cc:	40010800 	.word	0x40010800
 80060d0:	40011000 	.word	0x40011000
 80060d4:	200010ec 	.word	0x200010ec
 80060d8:	20001094 	.word	0x20001094
 80060dc:	200010b0 	.word	0x200010b0
 80060e0:	200010e9 	.word	0x200010e9
 80060e4:	200010ea 	.word	0x200010ea
 80060e8:	2000193c 	.word	0x2000193c
 80060ec:	200010eb 	.word	0x200010eb
 80060f0:	20000178 	.word	0x20000178
 80060f4:	20001874 	.word	0x20001874
 80060f8:	20001888 	.word	0x20001888
 80060fc:	2000189c 	.word	0x2000189c
 8006100:	200010d9 	.word	0x200010d9
 8006104:	200010f1 	.word	0x200010f1
 8006108:	200010da 	.word	0x200010da
 800610c:	200000c4 	.word	0x200000c4
 8006110:	200000d8 	.word	0x200000d8
 8006114:	40010c00 	.word	0x40010c00
 8006118:	20001111 	.word	0x20001111
 800611c:	2000110e 	.word	0x2000110e
 8006120:	20001120 	.word	0x20001120
 8006124:	20001121 	.word	0x20001121

08006128 <loadMenuTexts>:
char idConfirmationText[17];
char idConfirmationSubText[17];

char wifiConfirmationText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8006128:	b5b0      	push	{r4, r5, r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	4603      	mov	r3, r0
 8006130:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8006132:	79fb      	ldrb	r3, [r7, #7]
 8006134:	2b00      	cmp	r3, #0
 8006136:	f040 853d 	bne.w	8006bb4 <loadMenuTexts+0xa8c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 800613a:	4ac7      	ldr	r2, [pc, #796]	@ (8006458 <loadMenuTexts+0x330>)
 800613c:	4bc7      	ldr	r3, [pc, #796]	@ (800645c <loadMenuTexts+0x334>)
 800613e:	4614      	mov	r4, r2
 8006140:	461d      	mov	r5, r3
 8006142:	6828      	ldr	r0, [r5, #0]
 8006144:	6869      	ldr	r1, [r5, #4]
 8006146:	68aa      	ldr	r2, [r5, #8]
 8006148:	68eb      	ldr	r3, [r5, #12]
 800614a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800614c:	7c2b      	ldrb	r3, [r5, #16]
 800614e:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8006150:	4ac3      	ldr	r2, [pc, #780]	@ (8006460 <loadMenuTexts+0x338>)
 8006152:	4bc4      	ldr	r3, [pc, #784]	@ (8006464 <loadMenuTexts+0x33c>)
 8006154:	4614      	mov	r4, r2
 8006156:	461d      	mov	r5, r3
 8006158:	6828      	ldr	r0, [r5, #0]
 800615a:	6869      	ldr	r1, [r5, #4]
 800615c:	68aa      	ldr	r2, [r5, #8]
 800615e:	68eb      	ldr	r3, [r5, #12]
 8006160:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006162:	7c2b      	ldrb	r3, [r5, #16]
 8006164:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 8006166:	4ac0      	ldr	r2, [pc, #768]	@ (8006468 <loadMenuTexts+0x340>)
 8006168:	4bc0      	ldr	r3, [pc, #768]	@ (800646c <loadMenuTexts+0x344>)
 800616a:	4614      	mov	r4, r2
 800616c:	461d      	mov	r5, r3
 800616e:	6828      	ldr	r0, [r5, #0]
 8006170:	6869      	ldr	r1, [r5, #4]
 8006172:	68aa      	ldr	r2, [r5, #8]
 8006174:	68eb      	ldr	r3, [r5, #12]
 8006176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006178:	7c2b      	ldrb	r3, [r5, #16]
 800617a:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 800617c:	4abc      	ldr	r2, [pc, #752]	@ (8006470 <loadMenuTexts+0x348>)
 800617e:	4bbd      	ldr	r3, [pc, #756]	@ (8006474 <loadMenuTexts+0x34c>)
 8006180:	4614      	mov	r4, r2
 8006182:	461d      	mov	r5, r3
 8006184:	6828      	ldr	r0, [r5, #0]
 8006186:	6869      	ldr	r1, [r5, #4]
 8006188:	68aa      	ldr	r2, [r5, #8]
 800618a:	68eb      	ldr	r3, [r5, #12]
 800618c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800618e:	7c2b      	ldrb	r3, [r5, #16]
 8006190:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 8006192:	4ab9      	ldr	r2, [pc, #740]	@ (8006478 <loadMenuTexts+0x350>)
 8006194:	4bb9      	ldr	r3, [pc, #740]	@ (800647c <loadMenuTexts+0x354>)
 8006196:	4614      	mov	r4, r2
 8006198:	461d      	mov	r5, r3
 800619a:	6828      	ldr	r0, [r5, #0]
 800619c:	6869      	ldr	r1, [r5, #4]
 800619e:	68aa      	ldr	r2, [r5, #8]
 80061a0:	68eb      	ldr	r3, [r5, #12]
 80061a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061a4:	7c2b      	ldrb	r3, [r5, #16]
 80061a6:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 80061a8:	4ab5      	ldr	r2, [pc, #724]	@ (8006480 <loadMenuTexts+0x358>)
 80061aa:	4bb6      	ldr	r3, [pc, #728]	@ (8006484 <loadMenuTexts+0x35c>)
 80061ac:	4614      	mov	r4, r2
 80061ae:	461d      	mov	r5, r3
 80061b0:	6828      	ldr	r0, [r5, #0]
 80061b2:	6869      	ldr	r1, [r5, #4]
 80061b4:	68aa      	ldr	r2, [r5, #8]
 80061b6:	68eb      	ldr	r3, [r5, #12]
 80061b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ba:	7c2b      	ldrb	r3, [r5, #16]
 80061bc:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 80061be:	4ab2      	ldr	r2, [pc, #712]	@ (8006488 <loadMenuTexts+0x360>)
 80061c0:	4bb2      	ldr	r3, [pc, #712]	@ (800648c <loadMenuTexts+0x364>)
 80061c2:	4614      	mov	r4, r2
 80061c4:	461d      	mov	r5, r3
 80061c6:	6828      	ldr	r0, [r5, #0]
 80061c8:	6869      	ldr	r1, [r5, #4]
 80061ca:	68aa      	ldr	r2, [r5, #8]
 80061cc:	68eb      	ldr	r3, [r5, #12]
 80061ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061d0:	7c2b      	ldrb	r3, [r5, #16]
 80061d2:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 80061d4:	4aae      	ldr	r2, [pc, #696]	@ (8006490 <loadMenuTexts+0x368>)
 80061d6:	4baf      	ldr	r3, [pc, #700]	@ (8006494 <loadMenuTexts+0x36c>)
 80061d8:	4614      	mov	r4, r2
 80061da:	461d      	mov	r5, r3
 80061dc:	6828      	ldr	r0, [r5, #0]
 80061de:	6869      	ldr	r1, [r5, #4]
 80061e0:	68aa      	ldr	r2, [r5, #8]
 80061e2:	68eb      	ldr	r3, [r5, #12]
 80061e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061e6:	7c2b      	ldrb	r3, [r5, #16]
 80061e8:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 80061ea:	4aab      	ldr	r2, [pc, #684]	@ (8006498 <loadMenuTexts+0x370>)
 80061ec:	4bab      	ldr	r3, [pc, #684]	@ (800649c <loadMenuTexts+0x374>)
 80061ee:	4614      	mov	r4, r2
 80061f0:	461d      	mov	r5, r3
 80061f2:	6828      	ldr	r0, [r5, #0]
 80061f4:	6869      	ldr	r1, [r5, #4]
 80061f6:	68aa      	ldr	r2, [r5, #8]
 80061f8:	68eb      	ldr	r3, [r5, #12]
 80061fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061fc:	7c2b      	ldrb	r3, [r5, #16]
 80061fe:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8006200:	4aa7      	ldr	r2, [pc, #668]	@ (80064a0 <loadMenuTexts+0x378>)
 8006202:	4ba8      	ldr	r3, [pc, #672]	@ (80064a4 <loadMenuTexts+0x37c>)
 8006204:	4614      	mov	r4, r2
 8006206:	461d      	mov	r5, r3
 8006208:	6828      	ldr	r0, [r5, #0]
 800620a:	6869      	ldr	r1, [r5, #4]
 800620c:	68aa      	ldr	r2, [r5, #8]
 800620e:	68eb      	ldr	r3, [r5, #12]
 8006210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006212:	7c2b      	ldrb	r3, [r5, #16]
 8006214:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 8006216:	4aa4      	ldr	r2, [pc, #656]	@ (80064a8 <loadMenuTexts+0x380>)
 8006218:	4ba4      	ldr	r3, [pc, #656]	@ (80064ac <loadMenuTexts+0x384>)
 800621a:	4614      	mov	r4, r2
 800621c:	461d      	mov	r5, r3
 800621e:	6828      	ldr	r0, [r5, #0]
 8006220:	6869      	ldr	r1, [r5, #4]
 8006222:	68aa      	ldr	r2, [r5, #8]
 8006224:	68eb      	ldr	r3, [r5, #12]
 8006226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006228:	7c2b      	ldrb	r3, [r5, #16]
 800622a:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 800622c:	4aa0      	ldr	r2, [pc, #640]	@ (80064b0 <loadMenuTexts+0x388>)
 800622e:	4ba1      	ldr	r3, [pc, #644]	@ (80064b4 <loadMenuTexts+0x38c>)
 8006230:	4614      	mov	r4, r2
 8006232:	461d      	mov	r5, r3
 8006234:	6828      	ldr	r0, [r5, #0]
 8006236:	6869      	ldr	r1, [r5, #4]
 8006238:	68aa      	ldr	r2, [r5, #8]
 800623a:	68eb      	ldr	r3, [r5, #12]
 800623c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800623e:	7c2b      	ldrb	r3, [r5, #16]
 8006240:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8006242:	4a9d      	ldr	r2, [pc, #628]	@ (80064b8 <loadMenuTexts+0x390>)
 8006244:	4b9d      	ldr	r3, [pc, #628]	@ (80064bc <loadMenuTexts+0x394>)
 8006246:	4614      	mov	r4, r2
 8006248:	461d      	mov	r5, r3
 800624a:	6828      	ldr	r0, [r5, #0]
 800624c:	6869      	ldr	r1, [r5, #4]
 800624e:	68aa      	ldr	r2, [r5, #8]
 8006250:	68eb      	ldr	r3, [r5, #12]
 8006252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006254:	7c2b      	ldrb	r3, [r5, #16]
 8006256:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 8006258:	4a99      	ldr	r2, [pc, #612]	@ (80064c0 <loadMenuTexts+0x398>)
 800625a:	4b9a      	ldr	r3, [pc, #616]	@ (80064c4 <loadMenuTexts+0x39c>)
 800625c:	4614      	mov	r4, r2
 800625e:	461d      	mov	r5, r3
 8006260:	6828      	ldr	r0, [r5, #0]
 8006262:	6869      	ldr	r1, [r5, #4]
 8006264:	68aa      	ldr	r2, [r5, #8]
 8006266:	68eb      	ldr	r3, [r5, #12]
 8006268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800626a:	7c2b      	ldrb	r3, [r5, #16]
 800626c:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 800626e:	4a96      	ldr	r2, [pc, #600]	@ (80064c8 <loadMenuTexts+0x3a0>)
 8006270:	4b96      	ldr	r3, [pc, #600]	@ (80064cc <loadMenuTexts+0x3a4>)
 8006272:	4614      	mov	r4, r2
 8006274:	461d      	mov	r5, r3
 8006276:	6828      	ldr	r0, [r5, #0]
 8006278:	6869      	ldr	r1, [r5, #4]
 800627a:	68aa      	ldr	r2, [r5, #8]
 800627c:	68eb      	ldr	r3, [r5, #12]
 800627e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006280:	7c2b      	ldrb	r3, [r5, #16]
 8006282:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8006284:	4a92      	ldr	r2, [pc, #584]	@ (80064d0 <loadMenuTexts+0x3a8>)
 8006286:	4b93      	ldr	r3, [pc, #588]	@ (80064d4 <loadMenuTexts+0x3ac>)
 8006288:	4614      	mov	r4, r2
 800628a:	461d      	mov	r5, r3
 800628c:	6828      	ldr	r0, [r5, #0]
 800628e:	6869      	ldr	r1, [r5, #4]
 8006290:	68aa      	ldr	r2, [r5, #8]
 8006292:	68eb      	ldr	r3, [r5, #12]
 8006294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006296:	7c2b      	ldrb	r3, [r5, #16]
 8006298:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 800629a:	4a8f      	ldr	r2, [pc, #572]	@ (80064d8 <loadMenuTexts+0x3b0>)
 800629c:	4b8f      	ldr	r3, [pc, #572]	@ (80064dc <loadMenuTexts+0x3b4>)
 800629e:	4614      	mov	r4, r2
 80062a0:	461d      	mov	r5, r3
 80062a2:	6828      	ldr	r0, [r5, #0]
 80062a4:	6869      	ldr	r1, [r5, #4]
 80062a6:	68aa      	ldr	r2, [r5, #8]
 80062a8:	68eb      	ldr	r3, [r5, #12]
 80062aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062ac:	7c2b      	ldrb	r3, [r5, #16]
 80062ae:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 80062b0:	4a8b      	ldr	r2, [pc, #556]	@ (80064e0 <loadMenuTexts+0x3b8>)
 80062b2:	4b8c      	ldr	r3, [pc, #560]	@ (80064e4 <loadMenuTexts+0x3bc>)
 80062b4:	4614      	mov	r4, r2
 80062b6:	461d      	mov	r5, r3
 80062b8:	6828      	ldr	r0, [r5, #0]
 80062ba:	6869      	ldr	r1, [r5, #4]
 80062bc:	68aa      	ldr	r2, [r5, #8]
 80062be:	68eb      	ldr	r3, [r5, #12]
 80062c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062c2:	7c2b      	ldrb	r3, [r5, #16]
 80062c4:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 80062c6:	4a88      	ldr	r2, [pc, #544]	@ (80064e8 <loadMenuTexts+0x3c0>)
 80062c8:	4b88      	ldr	r3, [pc, #544]	@ (80064ec <loadMenuTexts+0x3c4>)
 80062ca:	4614      	mov	r4, r2
 80062cc:	461d      	mov	r5, r3
 80062ce:	6828      	ldr	r0, [r5, #0]
 80062d0:	6869      	ldr	r1, [r5, #4]
 80062d2:	68aa      	ldr	r2, [r5, #8]
 80062d4:	68eb      	ldr	r3, [r5, #12]
 80062d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062d8:	7c2b      	ldrb	r3, [r5, #16]
 80062da:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 80062dc:	4a84      	ldr	r2, [pc, #528]	@ (80064f0 <loadMenuTexts+0x3c8>)
 80062de:	4b85      	ldr	r3, [pc, #532]	@ (80064f4 <loadMenuTexts+0x3cc>)
 80062e0:	4614      	mov	r4, r2
 80062e2:	461d      	mov	r5, r3
 80062e4:	6828      	ldr	r0, [r5, #0]
 80062e6:	6869      	ldr	r1, [r5, #4]
 80062e8:	68aa      	ldr	r2, [r5, #8]
 80062ea:	68eb      	ldr	r3, [r5, #12]
 80062ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80062ee:	7c2b      	ldrb	r3, [r5, #16]
 80062f0:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 80062f2:	4a81      	ldr	r2, [pc, #516]	@ (80064f8 <loadMenuTexts+0x3d0>)
 80062f4:	4b81      	ldr	r3, [pc, #516]	@ (80064fc <loadMenuTexts+0x3d4>)
 80062f6:	4614      	mov	r4, r2
 80062f8:	461d      	mov	r5, r3
 80062fa:	6828      	ldr	r0, [r5, #0]
 80062fc:	6869      	ldr	r1, [r5, #4]
 80062fe:	68aa      	ldr	r2, [r5, #8]
 8006300:	68eb      	ldr	r3, [r5, #12]
 8006302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006304:	7c2b      	ldrb	r3, [r5, #16]
 8006306:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 8006308:	4a7d      	ldr	r2, [pc, #500]	@ (8006500 <loadMenuTexts+0x3d8>)
 800630a:	4b7e      	ldr	r3, [pc, #504]	@ (8006504 <loadMenuTexts+0x3dc>)
 800630c:	4614      	mov	r4, r2
 800630e:	461d      	mov	r5, r3
 8006310:	6828      	ldr	r0, [r5, #0]
 8006312:	6869      	ldr	r1, [r5, #4]
 8006314:	68aa      	ldr	r2, [r5, #8]
 8006316:	68eb      	ldr	r3, [r5, #12]
 8006318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800631a:	7c2b      	ldrb	r3, [r5, #16]
 800631c:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 800631e:	4a7a      	ldr	r2, [pc, #488]	@ (8006508 <loadMenuTexts+0x3e0>)
 8006320:	4b7a      	ldr	r3, [pc, #488]	@ (800650c <loadMenuTexts+0x3e4>)
 8006322:	4614      	mov	r4, r2
 8006324:	461d      	mov	r5, r3
 8006326:	6828      	ldr	r0, [r5, #0]
 8006328:	6869      	ldr	r1, [r5, #4]
 800632a:	68aa      	ldr	r2, [r5, #8]
 800632c:	68eb      	ldr	r3, [r5, #12]
 800632e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006330:	7c2b      	ldrb	r3, [r5, #16]
 8006332:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 8006334:	4a76      	ldr	r2, [pc, #472]	@ (8006510 <loadMenuTexts+0x3e8>)
 8006336:	4b77      	ldr	r3, [pc, #476]	@ (8006514 <loadMenuTexts+0x3ec>)
 8006338:	4614      	mov	r4, r2
 800633a:	461d      	mov	r5, r3
 800633c:	6828      	ldr	r0, [r5, #0]
 800633e:	6869      	ldr	r1, [r5, #4]
 8006340:	68aa      	ldr	r2, [r5, #8]
 8006342:	68eb      	ldr	r3, [r5, #12]
 8006344:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006346:	7c2b      	ldrb	r3, [r5, #16]
 8006348:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 800634a:	4a73      	ldr	r2, [pc, #460]	@ (8006518 <loadMenuTexts+0x3f0>)
 800634c:	4b73      	ldr	r3, [pc, #460]	@ (800651c <loadMenuTexts+0x3f4>)
 800634e:	4614      	mov	r4, r2
 8006350:	461d      	mov	r5, r3
 8006352:	6828      	ldr	r0, [r5, #0]
 8006354:	6869      	ldr	r1, [r5, #4]
 8006356:	68aa      	ldr	r2, [r5, #8]
 8006358:	68eb      	ldr	r3, [r5, #12]
 800635a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800635c:	7c2b      	ldrb	r3, [r5, #16]
 800635e:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 8006360:	4a6f      	ldr	r2, [pc, #444]	@ (8006520 <loadMenuTexts+0x3f8>)
 8006362:	4b70      	ldr	r3, [pc, #448]	@ (8006524 <loadMenuTexts+0x3fc>)
 8006364:	4614      	mov	r4, r2
 8006366:	461d      	mov	r5, r3
 8006368:	6828      	ldr	r0, [r5, #0]
 800636a:	6869      	ldr	r1, [r5, #4]
 800636c:	68aa      	ldr	r2, [r5, #8]
 800636e:	68eb      	ldr	r3, [r5, #12]
 8006370:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006372:	7c2b      	ldrb	r3, [r5, #16]
 8006374:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 8006376:	4a6c      	ldr	r2, [pc, #432]	@ (8006528 <loadMenuTexts+0x400>)
 8006378:	4b6c      	ldr	r3, [pc, #432]	@ (800652c <loadMenuTexts+0x404>)
 800637a:	4614      	mov	r4, r2
 800637c:	461d      	mov	r5, r3
 800637e:	6828      	ldr	r0, [r5, #0]
 8006380:	6869      	ldr	r1, [r5, #4]
 8006382:	68aa      	ldr	r2, [r5, #8]
 8006384:	68eb      	ldr	r3, [r5, #12]
 8006386:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006388:	7c2b      	ldrb	r3, [r5, #16]
 800638a:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 800638c:	4a68      	ldr	r2, [pc, #416]	@ (8006530 <loadMenuTexts+0x408>)
 800638e:	4b69      	ldr	r3, [pc, #420]	@ (8006534 <loadMenuTexts+0x40c>)
 8006390:	4614      	mov	r4, r2
 8006392:	461d      	mov	r5, r3
 8006394:	6828      	ldr	r0, [r5, #0]
 8006396:	6869      	ldr	r1, [r5, #4]
 8006398:	68aa      	ldr	r2, [r5, #8]
 800639a:	68eb      	ldr	r3, [r5, #12]
 800639c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800639e:	7c2b      	ldrb	r3, [r5, #16]
 80063a0:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 80063a2:	4a65      	ldr	r2, [pc, #404]	@ (8006538 <loadMenuTexts+0x410>)
 80063a4:	4b65      	ldr	r3, [pc, #404]	@ (800653c <loadMenuTexts+0x414>)
 80063a6:	4614      	mov	r4, r2
 80063a8:	461d      	mov	r5, r3
 80063aa:	6828      	ldr	r0, [r5, #0]
 80063ac:	6869      	ldr	r1, [r5, #4]
 80063ae:	68aa      	ldr	r2, [r5, #8]
 80063b0:	68eb      	ldr	r3, [r5, #12]
 80063b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063b4:	7c2b      	ldrb	r3, [r5, #16]
 80063b6:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 80063b8:	4a61      	ldr	r2, [pc, #388]	@ (8006540 <loadMenuTexts+0x418>)
 80063ba:	4b62      	ldr	r3, [pc, #392]	@ (8006544 <loadMenuTexts+0x41c>)
 80063bc:	4614      	mov	r4, r2
 80063be:	461d      	mov	r5, r3
 80063c0:	6828      	ldr	r0, [r5, #0]
 80063c2:	6869      	ldr	r1, [r5, #4]
 80063c4:	68aa      	ldr	r2, [r5, #8]
 80063c6:	68eb      	ldr	r3, [r5, #12]
 80063c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063ca:	7c2b      	ldrb	r3, [r5, #16]
 80063cc:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 80063ce:	4a5e      	ldr	r2, [pc, #376]	@ (8006548 <loadMenuTexts+0x420>)
 80063d0:	4b5e      	ldr	r3, [pc, #376]	@ (800654c <loadMenuTexts+0x424>)
 80063d2:	4614      	mov	r4, r2
 80063d4:	461d      	mov	r5, r3
 80063d6:	6828      	ldr	r0, [r5, #0]
 80063d8:	6869      	ldr	r1, [r5, #4]
 80063da:	68aa      	ldr	r2, [r5, #8]
 80063dc:	68eb      	ldr	r3, [r5, #12]
 80063de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063e0:	7c2b      	ldrb	r3, [r5, #16]
 80063e2:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 80063e4:	4a5a      	ldr	r2, [pc, #360]	@ (8006550 <loadMenuTexts+0x428>)
 80063e6:	4b5b      	ldr	r3, [pc, #364]	@ (8006554 <loadMenuTexts+0x42c>)
 80063e8:	4614      	mov	r4, r2
 80063ea:	461d      	mov	r5, r3
 80063ec:	6828      	ldr	r0, [r5, #0]
 80063ee:	6869      	ldr	r1, [r5, #4]
 80063f0:	68aa      	ldr	r2, [r5, #8]
 80063f2:	68eb      	ldr	r3, [r5, #12]
 80063f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063f6:	7c2b      	ldrb	r3, [r5, #16]
 80063f8:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 80063fa:	4a57      	ldr	r2, [pc, #348]	@ (8006558 <loadMenuTexts+0x430>)
 80063fc:	4b57      	ldr	r3, [pc, #348]	@ (800655c <loadMenuTexts+0x434>)
 80063fe:	4614      	mov	r4, r2
 8006400:	461d      	mov	r5, r3
 8006402:	6828      	ldr	r0, [r5, #0]
 8006404:	6869      	ldr	r1, [r5, #4]
 8006406:	68aa      	ldr	r2, [r5, #8]
 8006408:	68eb      	ldr	r3, [r5, #12]
 800640a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800640c:	7c2b      	ldrb	r3, [r5, #16]
 800640e:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 8006410:	4a53      	ldr	r2, [pc, #332]	@ (8006560 <loadMenuTexts+0x438>)
 8006412:	4b54      	ldr	r3, [pc, #336]	@ (8006564 <loadMenuTexts+0x43c>)
 8006414:	4614      	mov	r4, r2
 8006416:	461d      	mov	r5, r3
 8006418:	6828      	ldr	r0, [r5, #0]
 800641a:	6869      	ldr	r1, [r5, #4]
 800641c:	68aa      	ldr	r2, [r5, #8]
 800641e:	68eb      	ldr	r3, [r5, #12]
 8006420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006422:	7c2b      	ldrb	r3, [r5, #16]
 8006424:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 8006426:	4a50      	ldr	r2, [pc, #320]	@ (8006568 <loadMenuTexts+0x440>)
 8006428:	4b50      	ldr	r3, [pc, #320]	@ (800656c <loadMenuTexts+0x444>)
 800642a:	4614      	mov	r4, r2
 800642c:	461d      	mov	r5, r3
 800642e:	6828      	ldr	r0, [r5, #0]
 8006430:	6869      	ldr	r1, [r5, #4]
 8006432:	68aa      	ldr	r2, [r5, #8]
 8006434:	68eb      	ldr	r3, [r5, #12]
 8006436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006438:	7c2b      	ldrb	r3, [r5, #16]
 800643a:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 800643c:	4a4c      	ldr	r2, [pc, #304]	@ (8006570 <loadMenuTexts+0x448>)
 800643e:	4b4d      	ldr	r3, [pc, #308]	@ (8006574 <loadMenuTexts+0x44c>)
 8006440:	4614      	mov	r4, r2
 8006442:	461d      	mov	r5, r3
 8006444:	6828      	ldr	r0, [r5, #0]
 8006446:	6869      	ldr	r1, [r5, #4]
 8006448:	68aa      	ldr	r2, [r5, #8]
 800644a:	68eb      	ldr	r3, [r5, #12]
 800644c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800644e:	7c2b      	ldrb	r3, [r5, #16]
 8006450:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 8006452:	4a49      	ldr	r2, [pc, #292]	@ (8006578 <loadMenuTexts+0x450>)
 8006454:	e092      	b.n	800657c <loadMenuTexts+0x454>
 8006456:	bf00      	nop
 8006458:	20001220 	.word	0x20001220
 800645c:	2000018c 	.word	0x2000018c
 8006460:	20001234 	.word	0x20001234
 8006464:	200001a0 	.word	0x200001a0
 8006468:	20001248 	.word	0x20001248
 800646c:	200001b4 	.word	0x200001b4
 8006470:	2000125c 	.word	0x2000125c
 8006474:	200001c8 	.word	0x200001c8
 8006478:	20001270 	.word	0x20001270
 800647c:	200001dc 	.word	0x200001dc
 8006480:	20001284 	.word	0x20001284
 8006484:	200001f0 	.word	0x200001f0
 8006488:	20001298 	.word	0x20001298
 800648c:	20000204 	.word	0x20000204
 8006490:	200012ac 	.word	0x200012ac
 8006494:	20000218 	.word	0x20000218
 8006498:	200012c0 	.word	0x200012c0
 800649c:	2000022c 	.word	0x2000022c
 80064a0:	200012d4 	.word	0x200012d4
 80064a4:	20000240 	.word	0x20000240
 80064a8:	200012e8 	.word	0x200012e8
 80064ac:	20000254 	.word	0x20000254
 80064b0:	200012fc 	.word	0x200012fc
 80064b4:	20000268 	.word	0x20000268
 80064b8:	20001310 	.word	0x20001310
 80064bc:	2000027c 	.word	0x2000027c
 80064c0:	20001324 	.word	0x20001324
 80064c4:	20000290 	.word	0x20000290
 80064c8:	20001338 	.word	0x20001338
 80064cc:	200002a4 	.word	0x200002a4
 80064d0:	2000134c 	.word	0x2000134c
 80064d4:	200002b8 	.word	0x200002b8
 80064d8:	20001360 	.word	0x20001360
 80064dc:	200002cc 	.word	0x200002cc
 80064e0:	20001374 	.word	0x20001374
 80064e4:	200002e0 	.word	0x200002e0
 80064e8:	20001388 	.word	0x20001388
 80064ec:	200002f4 	.word	0x200002f4
 80064f0:	2000139c 	.word	0x2000139c
 80064f4:	20000308 	.word	0x20000308
 80064f8:	200013b0 	.word	0x200013b0
 80064fc:	2000031c 	.word	0x2000031c
 8006500:	200013c4 	.word	0x200013c4
 8006504:	20000330 	.word	0x20000330
 8006508:	200013d8 	.word	0x200013d8
 800650c:	20000344 	.word	0x20000344
 8006510:	200013ec 	.word	0x200013ec
 8006514:	20000358 	.word	0x20000358
 8006518:	20001400 	.word	0x20001400
 800651c:	2000036c 	.word	0x2000036c
 8006520:	20001414 	.word	0x20001414
 8006524:	20000380 	.word	0x20000380
 8006528:	20001428 	.word	0x20001428
 800652c:	20000394 	.word	0x20000394
 8006530:	2000143c 	.word	0x2000143c
 8006534:	200003a8 	.word	0x200003a8
 8006538:	20001450 	.word	0x20001450
 800653c:	200003bc 	.word	0x200003bc
 8006540:	20001464 	.word	0x20001464
 8006544:	200003d0 	.word	0x200003d0
 8006548:	20001478 	.word	0x20001478
 800654c:	200003e4 	.word	0x200003e4
 8006550:	2000148c 	.word	0x2000148c
 8006554:	200003f8 	.word	0x200003f8
 8006558:	200014a0 	.word	0x200014a0
 800655c:	2000040c 	.word	0x2000040c
 8006560:	200014b4 	.word	0x200014b4
 8006564:	20000420 	.word	0x20000420
 8006568:	200014c8 	.word	0x200014c8
 800656c:	20000434 	.word	0x20000434
 8006570:	200014dc 	.word	0x200014dc
 8006574:	20000448 	.word	0x20000448
 8006578:	200014f0 	.word	0x200014f0
 800657c:	4bc7      	ldr	r3, [pc, #796]	@ (800689c <loadMenuTexts+0x774>)
 800657e:	4614      	mov	r4, r2
 8006580:	461d      	mov	r5, r3
 8006582:	6828      	ldr	r0, [r5, #0]
 8006584:	6869      	ldr	r1, [r5, #4]
 8006586:	68aa      	ldr	r2, [r5, #8]
 8006588:	68eb      	ldr	r3, [r5, #12]
 800658a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800658c:	7c2b      	ldrb	r3, [r5, #16]
 800658e:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 8006590:	4ac3      	ldr	r2, [pc, #780]	@ (80068a0 <loadMenuTexts+0x778>)
 8006592:	4bc4      	ldr	r3, [pc, #784]	@ (80068a4 <loadMenuTexts+0x77c>)
 8006594:	4614      	mov	r4, r2
 8006596:	461d      	mov	r5, r3
 8006598:	6828      	ldr	r0, [r5, #0]
 800659a:	6869      	ldr	r1, [r5, #4]
 800659c:	68aa      	ldr	r2, [r5, #8]
 800659e:	68eb      	ldr	r3, [r5, #12]
 80065a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065a2:	7c2b      	ldrb	r3, [r5, #16]
 80065a4:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 80065a6:	4ac0      	ldr	r2, [pc, #768]	@ (80068a8 <loadMenuTexts+0x780>)
 80065a8:	4bc0      	ldr	r3, [pc, #768]	@ (80068ac <loadMenuTexts+0x784>)
 80065aa:	4614      	mov	r4, r2
 80065ac:	461d      	mov	r5, r3
 80065ae:	6828      	ldr	r0, [r5, #0]
 80065b0:	6869      	ldr	r1, [r5, #4]
 80065b2:	68aa      	ldr	r2, [r5, #8]
 80065b4:	68eb      	ldr	r3, [r5, #12]
 80065b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065b8:	7c2b      	ldrb	r3, [r5, #16]
 80065ba:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 80065bc:	4abc      	ldr	r2, [pc, #752]	@ (80068b0 <loadMenuTexts+0x788>)
 80065be:	4bbd      	ldr	r3, [pc, #756]	@ (80068b4 <loadMenuTexts+0x78c>)
 80065c0:	4614      	mov	r4, r2
 80065c2:	461d      	mov	r5, r3
 80065c4:	6828      	ldr	r0, [r5, #0]
 80065c6:	6869      	ldr	r1, [r5, #4]
 80065c8:	68aa      	ldr	r2, [r5, #8]
 80065ca:	68eb      	ldr	r3, [r5, #12]
 80065cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065ce:	7c2b      	ldrb	r3, [r5, #16]
 80065d0:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 80065d2:	4ab9      	ldr	r2, [pc, #740]	@ (80068b8 <loadMenuTexts+0x790>)
 80065d4:	4bb9      	ldr	r3, [pc, #740]	@ (80068bc <loadMenuTexts+0x794>)
 80065d6:	4614      	mov	r4, r2
 80065d8:	461d      	mov	r5, r3
 80065da:	6828      	ldr	r0, [r5, #0]
 80065dc:	6869      	ldr	r1, [r5, #4]
 80065de:	68aa      	ldr	r2, [r5, #8]
 80065e0:	68eb      	ldr	r3, [r5, #12]
 80065e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065e4:	7c2b      	ldrb	r3, [r5, #16]
 80065e6:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 80065e8:	4ab5      	ldr	r2, [pc, #724]	@ (80068c0 <loadMenuTexts+0x798>)
 80065ea:	4bb6      	ldr	r3, [pc, #728]	@ (80068c4 <loadMenuTexts+0x79c>)
 80065ec:	4614      	mov	r4, r2
 80065ee:	461d      	mov	r5, r3
 80065f0:	6828      	ldr	r0, [r5, #0]
 80065f2:	6869      	ldr	r1, [r5, #4]
 80065f4:	68aa      	ldr	r2, [r5, #8]
 80065f6:	68eb      	ldr	r3, [r5, #12]
 80065f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065fa:	7c2b      	ldrb	r3, [r5, #16]
 80065fc:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 80065fe:	4ab2      	ldr	r2, [pc, #712]	@ (80068c8 <loadMenuTexts+0x7a0>)
 8006600:	4bb2      	ldr	r3, [pc, #712]	@ (80068cc <loadMenuTexts+0x7a4>)
 8006602:	4614      	mov	r4, r2
 8006604:	461d      	mov	r5, r3
 8006606:	6828      	ldr	r0, [r5, #0]
 8006608:	6869      	ldr	r1, [r5, #4]
 800660a:	68aa      	ldr	r2, [r5, #8]
 800660c:	68eb      	ldr	r3, [r5, #12]
 800660e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006610:	7c2b      	ldrb	r3, [r5, #16]
 8006612:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 8006614:	4aae      	ldr	r2, [pc, #696]	@ (80068d0 <loadMenuTexts+0x7a8>)
 8006616:	4baf      	ldr	r3, [pc, #700]	@ (80068d4 <loadMenuTexts+0x7ac>)
 8006618:	4614      	mov	r4, r2
 800661a:	461d      	mov	r5, r3
 800661c:	6828      	ldr	r0, [r5, #0]
 800661e:	6869      	ldr	r1, [r5, #4]
 8006620:	68aa      	ldr	r2, [r5, #8]
 8006622:	68eb      	ldr	r3, [r5, #12]
 8006624:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006626:	7c2b      	ldrb	r3, [r5, #16]
 8006628:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 800662a:	4aab      	ldr	r2, [pc, #684]	@ (80068d8 <loadMenuTexts+0x7b0>)
 800662c:	4bab      	ldr	r3, [pc, #684]	@ (80068dc <loadMenuTexts+0x7b4>)
 800662e:	4614      	mov	r4, r2
 8006630:	461d      	mov	r5, r3
 8006632:	6828      	ldr	r0, [r5, #0]
 8006634:	6869      	ldr	r1, [r5, #4]
 8006636:	68aa      	ldr	r2, [r5, #8]
 8006638:	68eb      	ldr	r3, [r5, #12]
 800663a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800663c:	7c2b      	ldrb	r3, [r5, #16]
 800663e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 8006640:	4aa7      	ldr	r2, [pc, #668]	@ (80068e0 <loadMenuTexts+0x7b8>)
 8006642:	4ba8      	ldr	r3, [pc, #672]	@ (80068e4 <loadMenuTexts+0x7bc>)
 8006644:	4614      	mov	r4, r2
 8006646:	461d      	mov	r5, r3
 8006648:	6828      	ldr	r0, [r5, #0]
 800664a:	6869      	ldr	r1, [r5, #4]
 800664c:	68aa      	ldr	r2, [r5, #8]
 800664e:	68eb      	ldr	r3, [r5, #12]
 8006650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006652:	7c2b      	ldrb	r3, [r5, #16]
 8006654:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 8006656:	4aa4      	ldr	r2, [pc, #656]	@ (80068e8 <loadMenuTexts+0x7c0>)
 8006658:	4ba4      	ldr	r3, [pc, #656]	@ (80068ec <loadMenuTexts+0x7c4>)
 800665a:	4614      	mov	r4, r2
 800665c:	461d      	mov	r5, r3
 800665e:	6828      	ldr	r0, [r5, #0]
 8006660:	6869      	ldr	r1, [r5, #4]
 8006662:	68aa      	ldr	r2, [r5, #8]
 8006664:	68eb      	ldr	r3, [r5, #12]
 8006666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006668:	7c2b      	ldrb	r3, [r5, #16]
 800666a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 800666c:	4aa0      	ldr	r2, [pc, #640]	@ (80068f0 <loadMenuTexts+0x7c8>)
 800666e:	4ba1      	ldr	r3, [pc, #644]	@ (80068f4 <loadMenuTexts+0x7cc>)
 8006670:	4614      	mov	r4, r2
 8006672:	461d      	mov	r5, r3
 8006674:	6828      	ldr	r0, [r5, #0]
 8006676:	6869      	ldr	r1, [r5, #4]
 8006678:	68aa      	ldr	r2, [r5, #8]
 800667a:	68eb      	ldr	r3, [r5, #12]
 800667c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800667e:	7c2b      	ldrb	r3, [r5, #16]
 8006680:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 8006682:	4a9d      	ldr	r2, [pc, #628]	@ (80068f8 <loadMenuTexts+0x7d0>)
 8006684:	4b9d      	ldr	r3, [pc, #628]	@ (80068fc <loadMenuTexts+0x7d4>)
 8006686:	4614      	mov	r4, r2
 8006688:	461d      	mov	r5, r3
 800668a:	6828      	ldr	r0, [r5, #0]
 800668c:	6869      	ldr	r1, [r5, #4]
 800668e:	68aa      	ldr	r2, [r5, #8]
 8006690:	68eb      	ldr	r3, [r5, #12]
 8006692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006694:	7c2b      	ldrb	r3, [r5, #16]
 8006696:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 8006698:	4a99      	ldr	r2, [pc, #612]	@ (8006900 <loadMenuTexts+0x7d8>)
 800669a:	4b9a      	ldr	r3, [pc, #616]	@ (8006904 <loadMenuTexts+0x7dc>)
 800669c:	4614      	mov	r4, r2
 800669e:	461d      	mov	r5, r3
 80066a0:	6828      	ldr	r0, [r5, #0]
 80066a2:	6869      	ldr	r1, [r5, #4]
 80066a4:	68aa      	ldr	r2, [r5, #8]
 80066a6:	68eb      	ldr	r3, [r5, #12]
 80066a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066aa:	7c2b      	ldrb	r3, [r5, #16]
 80066ac:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 80066ae:	4a96      	ldr	r2, [pc, #600]	@ (8006908 <loadMenuTexts+0x7e0>)
 80066b0:	4b96      	ldr	r3, [pc, #600]	@ (800690c <loadMenuTexts+0x7e4>)
 80066b2:	4614      	mov	r4, r2
 80066b4:	461d      	mov	r5, r3
 80066b6:	6828      	ldr	r0, [r5, #0]
 80066b8:	6869      	ldr	r1, [r5, #4]
 80066ba:	68aa      	ldr	r2, [r5, #8]
 80066bc:	68eb      	ldr	r3, [r5, #12]
 80066be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066c0:	7c2b      	ldrb	r3, [r5, #16]
 80066c2:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 80066c4:	4a92      	ldr	r2, [pc, #584]	@ (8006910 <loadMenuTexts+0x7e8>)
 80066c6:	4b93      	ldr	r3, [pc, #588]	@ (8006914 <loadMenuTexts+0x7ec>)
 80066c8:	4614      	mov	r4, r2
 80066ca:	461d      	mov	r5, r3
 80066cc:	6828      	ldr	r0, [r5, #0]
 80066ce:	6869      	ldr	r1, [r5, #4]
 80066d0:	68aa      	ldr	r2, [r5, #8]
 80066d2:	68eb      	ldr	r3, [r5, #12]
 80066d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066d6:	7c2b      	ldrb	r3, [r5, #16]
 80066d8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 80066da:	4a8f      	ldr	r2, [pc, #572]	@ (8006918 <loadMenuTexts+0x7f0>)
 80066dc:	4b8f      	ldr	r3, [pc, #572]	@ (800691c <loadMenuTexts+0x7f4>)
 80066de:	4614      	mov	r4, r2
 80066e0:	461d      	mov	r5, r3
 80066e2:	6828      	ldr	r0, [r5, #0]
 80066e4:	6869      	ldr	r1, [r5, #4]
 80066e6:	68aa      	ldr	r2, [r5, #8]
 80066e8:	68eb      	ldr	r3, [r5, #12]
 80066ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80066ec:	7c2b      	ldrb	r3, [r5, #16]
 80066ee:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 80066f0:	4a8b      	ldr	r2, [pc, #556]	@ (8006920 <loadMenuTexts+0x7f8>)
 80066f2:	4b8c      	ldr	r3, [pc, #560]	@ (8006924 <loadMenuTexts+0x7fc>)
 80066f4:	4614      	mov	r4, r2
 80066f6:	461d      	mov	r5, r3
 80066f8:	6828      	ldr	r0, [r5, #0]
 80066fa:	6869      	ldr	r1, [r5, #4]
 80066fc:	68aa      	ldr	r2, [r5, #8]
 80066fe:	68eb      	ldr	r3, [r5, #12]
 8006700:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006702:	7c2b      	ldrb	r3, [r5, #16]
 8006704:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 8006706:	4a88      	ldr	r2, [pc, #544]	@ (8006928 <loadMenuTexts+0x800>)
 8006708:	4b88      	ldr	r3, [pc, #544]	@ (800692c <loadMenuTexts+0x804>)
 800670a:	4614      	mov	r4, r2
 800670c:	461d      	mov	r5, r3
 800670e:	6828      	ldr	r0, [r5, #0]
 8006710:	6869      	ldr	r1, [r5, #4]
 8006712:	68aa      	ldr	r2, [r5, #8]
 8006714:	68eb      	ldr	r3, [r5, #12]
 8006716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006718:	7c2b      	ldrb	r3, [r5, #16]
 800671a:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 800671c:	4a84      	ldr	r2, [pc, #528]	@ (8006930 <loadMenuTexts+0x808>)
 800671e:	4b85      	ldr	r3, [pc, #532]	@ (8006934 <loadMenuTexts+0x80c>)
 8006720:	4614      	mov	r4, r2
 8006722:	461d      	mov	r5, r3
 8006724:	6828      	ldr	r0, [r5, #0]
 8006726:	6869      	ldr	r1, [r5, #4]
 8006728:	68aa      	ldr	r2, [r5, #8]
 800672a:	68eb      	ldr	r3, [r5, #12]
 800672c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800672e:	7c2b      	ldrb	r3, [r5, #16]
 8006730:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 8006732:	4a81      	ldr	r2, [pc, #516]	@ (8006938 <loadMenuTexts+0x810>)
 8006734:	4b81      	ldr	r3, [pc, #516]	@ (800693c <loadMenuTexts+0x814>)
 8006736:	4614      	mov	r4, r2
 8006738:	461d      	mov	r5, r3
 800673a:	6828      	ldr	r0, [r5, #0]
 800673c:	6869      	ldr	r1, [r5, #4]
 800673e:	68aa      	ldr	r2, [r5, #8]
 8006740:	68eb      	ldr	r3, [r5, #12]
 8006742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006744:	7c2b      	ldrb	r3, [r5, #16]
 8006746:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 8006748:	4a7d      	ldr	r2, [pc, #500]	@ (8006940 <loadMenuTexts+0x818>)
 800674a:	4b7e      	ldr	r3, [pc, #504]	@ (8006944 <loadMenuTexts+0x81c>)
 800674c:	4614      	mov	r4, r2
 800674e:	461d      	mov	r5, r3
 8006750:	6828      	ldr	r0, [r5, #0]
 8006752:	6869      	ldr	r1, [r5, #4]
 8006754:	68aa      	ldr	r2, [r5, #8]
 8006756:	68eb      	ldr	r3, [r5, #12]
 8006758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800675a:	7c2b      	ldrb	r3, [r5, #16]
 800675c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 800675e:	4a7a      	ldr	r2, [pc, #488]	@ (8006948 <loadMenuTexts+0x820>)
 8006760:	4b7a      	ldr	r3, [pc, #488]	@ (800694c <loadMenuTexts+0x824>)
 8006762:	4614      	mov	r4, r2
 8006764:	461d      	mov	r5, r3
 8006766:	6828      	ldr	r0, [r5, #0]
 8006768:	6869      	ldr	r1, [r5, #4]
 800676a:	68aa      	ldr	r2, [r5, #8]
 800676c:	68eb      	ldr	r3, [r5, #12]
 800676e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006770:	7c2b      	ldrb	r3, [r5, #16]
 8006772:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 8006774:	4a76      	ldr	r2, [pc, #472]	@ (8006950 <loadMenuTexts+0x828>)
 8006776:	4b77      	ldr	r3, [pc, #476]	@ (8006954 <loadMenuTexts+0x82c>)
 8006778:	4614      	mov	r4, r2
 800677a:	461d      	mov	r5, r3
 800677c:	6828      	ldr	r0, [r5, #0]
 800677e:	6869      	ldr	r1, [r5, #4]
 8006780:	68aa      	ldr	r2, [r5, #8]
 8006782:	68eb      	ldr	r3, [r5, #12]
 8006784:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006786:	7c2b      	ldrb	r3, [r5, #16]
 8006788:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 800678a:	4a73      	ldr	r2, [pc, #460]	@ (8006958 <loadMenuTexts+0x830>)
 800678c:	4b73      	ldr	r3, [pc, #460]	@ (800695c <loadMenuTexts+0x834>)
 800678e:	4614      	mov	r4, r2
 8006790:	461d      	mov	r5, r3
 8006792:	6828      	ldr	r0, [r5, #0]
 8006794:	6869      	ldr	r1, [r5, #4]
 8006796:	68aa      	ldr	r2, [r5, #8]
 8006798:	68eb      	ldr	r3, [r5, #12]
 800679a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800679c:	7c2b      	ldrb	r3, [r5, #16]
 800679e:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 80067a0:	4a6f      	ldr	r2, [pc, #444]	@ (8006960 <loadMenuTexts+0x838>)
 80067a2:	4b70      	ldr	r3, [pc, #448]	@ (8006964 <loadMenuTexts+0x83c>)
 80067a4:	4614      	mov	r4, r2
 80067a6:	461d      	mov	r5, r3
 80067a8:	6828      	ldr	r0, [r5, #0]
 80067aa:	6869      	ldr	r1, [r5, #4]
 80067ac:	68aa      	ldr	r2, [r5, #8]
 80067ae:	68eb      	ldr	r3, [r5, #12]
 80067b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067b2:	7c2b      	ldrb	r3, [r5, #16]
 80067b4:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 80067b6:	4a6c      	ldr	r2, [pc, #432]	@ (8006968 <loadMenuTexts+0x840>)
 80067b8:	4b6c      	ldr	r3, [pc, #432]	@ (800696c <loadMenuTexts+0x844>)
 80067ba:	4614      	mov	r4, r2
 80067bc:	461d      	mov	r5, r3
 80067be:	6828      	ldr	r0, [r5, #0]
 80067c0:	6869      	ldr	r1, [r5, #4]
 80067c2:	68aa      	ldr	r2, [r5, #8]
 80067c4:	68eb      	ldr	r3, [r5, #12]
 80067c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067c8:	7c2b      	ldrb	r3, [r5, #16]
 80067ca:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 80067cc:	4a68      	ldr	r2, [pc, #416]	@ (8006970 <loadMenuTexts+0x848>)
 80067ce:	4b69      	ldr	r3, [pc, #420]	@ (8006974 <loadMenuTexts+0x84c>)
 80067d0:	4614      	mov	r4, r2
 80067d2:	461d      	mov	r5, r3
 80067d4:	6828      	ldr	r0, [r5, #0]
 80067d6:	6869      	ldr	r1, [r5, #4]
 80067d8:	68aa      	ldr	r2, [r5, #8]
 80067da:	68eb      	ldr	r3, [r5, #12]
 80067dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067de:	7c2b      	ldrb	r3, [r5, #16]
 80067e0:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 80067e2:	4a65      	ldr	r2, [pc, #404]	@ (8006978 <loadMenuTexts+0x850>)
 80067e4:	4b65      	ldr	r3, [pc, #404]	@ (800697c <loadMenuTexts+0x854>)
 80067e6:	4614      	mov	r4, r2
 80067e8:	461d      	mov	r5, r3
 80067ea:	6828      	ldr	r0, [r5, #0]
 80067ec:	6869      	ldr	r1, [r5, #4]
 80067ee:	68aa      	ldr	r2, [r5, #8]
 80067f0:	68eb      	ldr	r3, [r5, #12]
 80067f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067f4:	7c2b      	ldrb	r3, [r5, #16]
 80067f6:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 80067f8:	4a61      	ldr	r2, [pc, #388]	@ (8006980 <loadMenuTexts+0x858>)
 80067fa:	4b62      	ldr	r3, [pc, #392]	@ (8006984 <loadMenuTexts+0x85c>)
 80067fc:	4614      	mov	r4, r2
 80067fe:	461d      	mov	r5, r3
 8006800:	6828      	ldr	r0, [r5, #0]
 8006802:	6869      	ldr	r1, [r5, #4]
 8006804:	68aa      	ldr	r2, [r5, #8]
 8006806:	68eb      	ldr	r3, [r5, #12]
 8006808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800680a:	7c2b      	ldrb	r3, [r5, #16]
 800680c:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 800680e:	4a5e      	ldr	r2, [pc, #376]	@ (8006988 <loadMenuTexts+0x860>)
 8006810:	4b5e      	ldr	r3, [pc, #376]	@ (800698c <loadMenuTexts+0x864>)
 8006812:	4614      	mov	r4, r2
 8006814:	461d      	mov	r5, r3
 8006816:	6828      	ldr	r0, [r5, #0]
 8006818:	6869      	ldr	r1, [r5, #4]
 800681a:	68aa      	ldr	r2, [r5, #8]
 800681c:	68eb      	ldr	r3, [r5, #12]
 800681e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006820:	7c2b      	ldrb	r3, [r5, #16]
 8006822:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 8006824:	4a5a      	ldr	r2, [pc, #360]	@ (8006990 <loadMenuTexts+0x868>)
 8006826:	4b5b      	ldr	r3, [pc, #364]	@ (8006994 <loadMenuTexts+0x86c>)
 8006828:	4614      	mov	r4, r2
 800682a:	461d      	mov	r5, r3
 800682c:	6828      	ldr	r0, [r5, #0]
 800682e:	6869      	ldr	r1, [r5, #4]
 8006830:	68aa      	ldr	r2, [r5, #8]
 8006832:	68eb      	ldr	r3, [r5, #12]
 8006834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006836:	7c2b      	ldrb	r3, [r5, #16]
 8006838:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 800683a:	4a57      	ldr	r2, [pc, #348]	@ (8006998 <loadMenuTexts+0x870>)
 800683c:	4b57      	ldr	r3, [pc, #348]	@ (800699c <loadMenuTexts+0x874>)
 800683e:	4614      	mov	r4, r2
 8006840:	461d      	mov	r5, r3
 8006842:	6828      	ldr	r0, [r5, #0]
 8006844:	6869      	ldr	r1, [r5, #4]
 8006846:	68aa      	ldr	r2, [r5, #8]
 8006848:	68eb      	ldr	r3, [r5, #12]
 800684a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800684c:	7c2b      	ldrb	r3, [r5, #16]
 800684e:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 8006850:	4a53      	ldr	r2, [pc, #332]	@ (80069a0 <loadMenuTexts+0x878>)
 8006852:	4b54      	ldr	r3, [pc, #336]	@ (80069a4 <loadMenuTexts+0x87c>)
 8006854:	4614      	mov	r4, r2
 8006856:	461d      	mov	r5, r3
 8006858:	6828      	ldr	r0, [r5, #0]
 800685a:	6869      	ldr	r1, [r5, #4]
 800685c:	68aa      	ldr	r2, [r5, #8]
 800685e:	68eb      	ldr	r3, [r5, #12]
 8006860:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006862:	7c2b      	ldrb	r3, [r5, #16]
 8006864:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 8006866:	4a50      	ldr	r2, [pc, #320]	@ (80069a8 <loadMenuTexts+0x880>)
 8006868:	4b50      	ldr	r3, [pc, #320]	@ (80069ac <loadMenuTexts+0x884>)
 800686a:	4614      	mov	r4, r2
 800686c:	461d      	mov	r5, r3
 800686e:	6828      	ldr	r0, [r5, #0]
 8006870:	6869      	ldr	r1, [r5, #4]
 8006872:	68aa      	ldr	r2, [r5, #8]
 8006874:	68eb      	ldr	r3, [r5, #12]
 8006876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006878:	7c2b      	ldrb	r3, [r5, #16]
 800687a:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 800687c:	4a4c      	ldr	r2, [pc, #304]	@ (80069b0 <loadMenuTexts+0x888>)
 800687e:	4b4d      	ldr	r3, [pc, #308]	@ (80069b4 <loadMenuTexts+0x88c>)
 8006880:	4614      	mov	r4, r2
 8006882:	461d      	mov	r5, r3
 8006884:	6828      	ldr	r0, [r5, #0]
 8006886:	6869      	ldr	r1, [r5, #4]
 8006888:	68aa      	ldr	r2, [r5, #8]
 800688a:	68eb      	ldr	r3, [r5, #12]
 800688c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800688e:	7c2b      	ldrb	r3, [r5, #16]
 8006890:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 8006892:	4a49      	ldr	r2, [pc, #292]	@ (80069b8 <loadMenuTexts+0x890>)
 8006894:	4b49      	ldr	r3, [pc, #292]	@ (80069bc <loadMenuTexts+0x894>)
 8006896:	4614      	mov	r4, r2
 8006898:	461d      	mov	r5, r3
 800689a:	e091      	b.n	80069c0 <loadMenuTexts+0x898>
 800689c:	2000045c 	.word	0x2000045c
 80068a0:	20001504 	.word	0x20001504
 80068a4:	20000470 	.word	0x20000470
 80068a8:	20001518 	.word	0x20001518
 80068ac:	20000484 	.word	0x20000484
 80068b0:	2000152c 	.word	0x2000152c
 80068b4:	20000498 	.word	0x20000498
 80068b8:	20001540 	.word	0x20001540
 80068bc:	200004ac 	.word	0x200004ac
 80068c0:	20001554 	.word	0x20001554
 80068c4:	200004c0 	.word	0x200004c0
 80068c8:	20001568 	.word	0x20001568
 80068cc:	200004d4 	.word	0x200004d4
 80068d0:	2000157c 	.word	0x2000157c
 80068d4:	200004e8 	.word	0x200004e8
 80068d8:	20001590 	.word	0x20001590
 80068dc:	200004fc 	.word	0x200004fc
 80068e0:	200015a4 	.word	0x200015a4
 80068e4:	20000510 	.word	0x20000510
 80068e8:	200015b8 	.word	0x200015b8
 80068ec:	20000524 	.word	0x20000524
 80068f0:	200015cc 	.word	0x200015cc
 80068f4:	20000538 	.word	0x20000538
 80068f8:	200015e0 	.word	0x200015e0
 80068fc:	2000054c 	.word	0x2000054c
 8006900:	200015f4 	.word	0x200015f4
 8006904:	20000560 	.word	0x20000560
 8006908:	20001608 	.word	0x20001608
 800690c:	20000574 	.word	0x20000574
 8006910:	2000161c 	.word	0x2000161c
 8006914:	20000588 	.word	0x20000588
 8006918:	20001630 	.word	0x20001630
 800691c:	2000059c 	.word	0x2000059c
 8006920:	20001644 	.word	0x20001644
 8006924:	200005b0 	.word	0x200005b0
 8006928:	20001658 	.word	0x20001658
 800692c:	200005c4 	.word	0x200005c4
 8006930:	2000166c 	.word	0x2000166c
 8006934:	200005d8 	.word	0x200005d8
 8006938:	20001680 	.word	0x20001680
 800693c:	200005ec 	.word	0x200005ec
 8006940:	20001694 	.word	0x20001694
 8006944:	20000600 	.word	0x20000600
 8006948:	200016a8 	.word	0x200016a8
 800694c:	20000614 	.word	0x20000614
 8006950:	200016bc 	.word	0x200016bc
 8006954:	20000628 	.word	0x20000628
 8006958:	200016d0 	.word	0x200016d0
 800695c:	2000063c 	.word	0x2000063c
 8006960:	200016e4 	.word	0x200016e4
 8006964:	20000650 	.word	0x20000650
 8006968:	200016f8 	.word	0x200016f8
 800696c:	20000664 	.word	0x20000664
 8006970:	2000170c 	.word	0x2000170c
 8006974:	20000678 	.word	0x20000678
 8006978:	20001720 	.word	0x20001720
 800697c:	2000068c 	.word	0x2000068c
 8006980:	20001734 	.word	0x20001734
 8006984:	200006a0 	.word	0x200006a0
 8006988:	20001748 	.word	0x20001748
 800698c:	200006b4 	.word	0x200006b4
 8006990:	2000175c 	.word	0x2000175c
 8006994:	200006c8 	.word	0x200006c8
 8006998:	20001770 	.word	0x20001770
 800699c:	200006dc 	.word	0x200006dc
 80069a0:	20001784 	.word	0x20001784
 80069a4:	200006f0 	.word	0x200006f0
 80069a8:	20001798 	.word	0x20001798
 80069ac:	20000c7c 	.word	0x20000c7c
 80069b0:	200017ac 	.word	0x200017ac
 80069b4:	20000c90 	.word	0x20000c90
 80069b8:	200017c0 	.word	0x200017c0
 80069bc:	20000ca4 	.word	0x20000ca4
 80069c0:	6828      	ldr	r0, [r5, #0]
 80069c2:	6869      	ldr	r1, [r5, #4]
 80069c4:	68aa      	ldr	r2, [r5, #8]
 80069c6:	68eb      	ldr	r3, [r5, #12]
 80069c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069ca:	7c2b      	ldrb	r3, [r5, #16]
 80069cc:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 80069ce:	4a59      	ldr	r2, [pc, #356]	@ (8006b34 <loadMenuTexts+0xa0c>)
 80069d0:	4b59      	ldr	r3, [pc, #356]	@ (8006b38 <loadMenuTexts+0xa10>)
 80069d2:	4614      	mov	r4, r2
 80069d4:	461d      	mov	r5, r3
 80069d6:	6828      	ldr	r0, [r5, #0]
 80069d8:	6869      	ldr	r1, [r5, #4]
 80069da:	68aa      	ldr	r2, [r5, #8]
 80069dc:	68eb      	ldr	r3, [r5, #12]
 80069de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069e0:	7c2b      	ldrb	r3, [r5, #16]
 80069e2:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 80069e4:	4a55      	ldr	r2, [pc, #340]	@ (8006b3c <loadMenuTexts+0xa14>)
 80069e6:	4b56      	ldr	r3, [pc, #344]	@ (8006b40 <loadMenuTexts+0xa18>)
 80069e8:	4614      	mov	r4, r2
 80069ea:	461d      	mov	r5, r3
 80069ec:	6828      	ldr	r0, [r5, #0]
 80069ee:	6869      	ldr	r1, [r5, #4]
 80069f0:	68aa      	ldr	r2, [r5, #8]
 80069f2:	68eb      	ldr	r3, [r5, #12]
 80069f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069f6:	7c2b      	ldrb	r3, [r5, #16]
 80069f8:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 80069fa:	4a52      	ldr	r2, [pc, #328]	@ (8006b44 <loadMenuTexts+0xa1c>)
 80069fc:	4b52      	ldr	r3, [pc, #328]	@ (8006b48 <loadMenuTexts+0xa20>)
 80069fe:	4614      	mov	r4, r2
 8006a00:	461d      	mov	r5, r3
 8006a02:	6828      	ldr	r0, [r5, #0]
 8006a04:	6869      	ldr	r1, [r5, #4]
 8006a06:	68aa      	ldr	r2, [r5, #8]
 8006a08:	68eb      	ldr	r3, [r5, #12]
 8006a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a0c:	7c2b      	ldrb	r3, [r5, #16]
 8006a0e:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 8006a10:	4a4e      	ldr	r2, [pc, #312]	@ (8006b4c <loadMenuTexts+0xa24>)
 8006a12:	4b4f      	ldr	r3, [pc, #316]	@ (8006b50 <loadMenuTexts+0xa28>)
 8006a14:	4614      	mov	r4, r2
 8006a16:	461d      	mov	r5, r3
 8006a18:	6828      	ldr	r0, [r5, #0]
 8006a1a:	6869      	ldr	r1, [r5, #4]
 8006a1c:	68aa      	ldr	r2, [r5, #8]
 8006a1e:	68eb      	ldr	r3, [r5, #12]
 8006a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a22:	7c2b      	ldrb	r3, [r5, #16]
 8006a24:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 8006a26:	4a4b      	ldr	r2, [pc, #300]	@ (8006b54 <loadMenuTexts+0xa2c>)
 8006a28:	4b4b      	ldr	r3, [pc, #300]	@ (8006b58 <loadMenuTexts+0xa30>)
 8006a2a:	4614      	mov	r4, r2
 8006a2c:	461d      	mov	r5, r3
 8006a2e:	6828      	ldr	r0, [r5, #0]
 8006a30:	6869      	ldr	r1, [r5, #4]
 8006a32:	68aa      	ldr	r2, [r5, #8]
 8006a34:	68eb      	ldr	r3, [r5, #12]
 8006a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a38:	7c2b      	ldrb	r3, [r5, #16]
 8006a3a:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 8006a3c:	4a47      	ldr	r2, [pc, #284]	@ (8006b5c <loadMenuTexts+0xa34>)
 8006a3e:	4b48      	ldr	r3, [pc, #288]	@ (8006b60 <loadMenuTexts+0xa38>)
 8006a40:	4614      	mov	r4, r2
 8006a42:	461d      	mov	r5, r3
 8006a44:	6828      	ldr	r0, [r5, #0]
 8006a46:	6869      	ldr	r1, [r5, #4]
 8006a48:	68aa      	ldr	r2, [r5, #8]
 8006a4a:	68eb      	ldr	r3, [r5, #12]
 8006a4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a4e:	7c2b      	ldrb	r3, [r5, #16]
 8006a50:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 8006a52:	4a44      	ldr	r2, [pc, #272]	@ (8006b64 <loadMenuTexts+0xa3c>)
 8006a54:	4b44      	ldr	r3, [pc, #272]	@ (8006b68 <loadMenuTexts+0xa40>)
 8006a56:	4614      	mov	r4, r2
 8006a58:	461d      	mov	r5, r3
 8006a5a:	6828      	ldr	r0, [r5, #0]
 8006a5c:	6869      	ldr	r1, [r5, #4]
 8006a5e:	68aa      	ldr	r2, [r5, #8]
 8006a60:	68eb      	ldr	r3, [r5, #12]
 8006a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a64:	7c2b      	ldrb	r3, [r5, #16]
 8006a66:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 8006a68:	4a40      	ldr	r2, [pc, #256]	@ (8006b6c <loadMenuTexts+0xa44>)
 8006a6a:	4b41      	ldr	r3, [pc, #260]	@ (8006b70 <loadMenuTexts+0xa48>)
 8006a6c:	4614      	mov	r4, r2
 8006a6e:	461d      	mov	r5, r3
 8006a70:	6828      	ldr	r0, [r5, #0]
 8006a72:	6869      	ldr	r1, [r5, #4]
 8006a74:	68aa      	ldr	r2, [r5, #8]
 8006a76:	68eb      	ldr	r3, [r5, #12]
 8006a78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a7a:	7c2b      	ldrb	r3, [r5, #16]
 8006a7c:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 8006a7e:	4a3d      	ldr	r2, [pc, #244]	@ (8006b74 <loadMenuTexts+0xa4c>)
 8006a80:	4b3d      	ldr	r3, [pc, #244]	@ (8006b78 <loadMenuTexts+0xa50>)
 8006a82:	4614      	mov	r4, r2
 8006a84:	461d      	mov	r5, r3
 8006a86:	6828      	ldr	r0, [r5, #0]
 8006a88:	6869      	ldr	r1, [r5, #4]
 8006a8a:	68aa      	ldr	r2, [r5, #8]
 8006a8c:	68eb      	ldr	r3, [r5, #12]
 8006a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a90:	7c2b      	ldrb	r3, [r5, #16]
 8006a92:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8006a94:	4a39      	ldr	r2, [pc, #228]	@ (8006b7c <loadMenuTexts+0xa54>)
 8006a96:	4b3a      	ldr	r3, [pc, #232]	@ (8006b80 <loadMenuTexts+0xa58>)
 8006a98:	4614      	mov	r4, r2
 8006a9a:	461d      	mov	r5, r3
 8006a9c:	6828      	ldr	r0, [r5, #0]
 8006a9e:	6869      	ldr	r1, [r5, #4]
 8006aa0:	68aa      	ldr	r2, [r5, #8]
 8006aa2:	68eb      	ldr	r3, [r5, #12]
 8006aa4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aa6:	7c2b      	ldrb	r3, [r5, #16]
 8006aa8:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 8006aaa:	4a36      	ldr	r2, [pc, #216]	@ (8006b84 <loadMenuTexts+0xa5c>)
 8006aac:	4b36      	ldr	r3, [pc, #216]	@ (8006b88 <loadMenuTexts+0xa60>)
 8006aae:	4614      	mov	r4, r2
 8006ab0:	461d      	mov	r5, r3
 8006ab2:	6828      	ldr	r0, [r5, #0]
 8006ab4:	6869      	ldr	r1, [r5, #4]
 8006ab6:	68aa      	ldr	r2, [r5, #8]
 8006ab8:	68eb      	ldr	r3, [r5, #12]
 8006aba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006abc:	7c2b      	ldrb	r3, [r5, #16]
 8006abe:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 8006ac0:	4a32      	ldr	r2, [pc, #200]	@ (8006b8c <loadMenuTexts+0xa64>)
 8006ac2:	4b33      	ldr	r3, [pc, #204]	@ (8006b90 <loadMenuTexts+0xa68>)
 8006ac4:	4614      	mov	r4, r2
 8006ac6:	461d      	mov	r5, r3
 8006ac8:	6828      	ldr	r0, [r5, #0]
 8006aca:	6869      	ldr	r1, [r5, #4]
 8006acc:	68aa      	ldr	r2, [r5, #8]
 8006ace:	68eb      	ldr	r3, [r5, #12]
 8006ad0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ad2:	7c2b      	ldrb	r3, [r5, #16]
 8006ad4:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 8006ad6:	4a2f      	ldr	r2, [pc, #188]	@ (8006b94 <loadMenuTexts+0xa6c>)
 8006ad8:	4b2f      	ldr	r3, [pc, #188]	@ (8006b98 <loadMenuTexts+0xa70>)
 8006ada:	4614      	mov	r4, r2
 8006adc:	461d      	mov	r5, r3
 8006ade:	6828      	ldr	r0, [r5, #0]
 8006ae0:	6869      	ldr	r1, [r5, #4]
 8006ae2:	68aa      	ldr	r2, [r5, #8]
 8006ae4:	68eb      	ldr	r3, [r5, #12]
 8006ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ae8:	7c2b      	ldrb	r3, [r5, #16]
 8006aea:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 8006aec:	4a2b      	ldr	r2, [pc, #172]	@ (8006b9c <loadMenuTexts+0xa74>)
 8006aee:	4b2c      	ldr	r3, [pc, #176]	@ (8006ba0 <loadMenuTexts+0xa78>)
 8006af0:	4614      	mov	r4, r2
 8006af2:	461d      	mov	r5, r3
 8006af4:	6828      	ldr	r0, [r5, #0]
 8006af6:	6869      	ldr	r1, [r5, #4]
 8006af8:	68aa      	ldr	r2, [r5, #8]
 8006afa:	68eb      	ldr	r3, [r5, #12]
 8006afc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006afe:	7c2b      	ldrb	r3, [r5, #16]
 8006b00:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 8006b02:	4a28      	ldr	r2, [pc, #160]	@ (8006ba4 <loadMenuTexts+0xa7c>)
 8006b04:	4b28      	ldr	r3, [pc, #160]	@ (8006ba8 <loadMenuTexts+0xa80>)
 8006b06:	4614      	mov	r4, r2
 8006b08:	461d      	mov	r5, r3
 8006b0a:	6828      	ldr	r0, [r5, #0]
 8006b0c:	6869      	ldr	r1, [r5, #4]
 8006b0e:	68aa      	ldr	r2, [r5, #8]
 8006b10:	68eb      	ldr	r3, [r5, #12]
 8006b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b14:	7c2b      	ldrb	r3, [r5, #16]
 8006b16:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextTR, 17);
 8006b18:	4a24      	ldr	r2, [pc, #144]	@ (8006bac <loadMenuTexts+0xa84>)
 8006b1a:	4b25      	ldr	r3, [pc, #148]	@ (8006bb0 <loadMenuTexts+0xa88>)
 8006b1c:	4614      	mov	r4, r2
 8006b1e:	461d      	mov	r5, r3
 8006b20:	6828      	ldr	r0, [r5, #0]
 8006b22:	6869      	ldr	r1, [r5, #4]
 8006b24:	68aa      	ldr	r2, [r5, #8]
 8006b26:	68eb      	ldr	r3, [r5, #12]
 8006b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b2a:	7c2b      	ldrb	r3, [r5, #16]
 8006b2c:	7023      	strb	r3, [r4, #0]
 8006b2e:	f000 bd3a 	b.w	80075a6 <loadMenuTexts+0x147e>
 8006b32:	bf00      	nop
 8006b34:	200017d4 	.word	0x200017d4
 8006b38:	20000cb8 	.word	0x20000cb8
 8006b3c:	200017e8 	.word	0x200017e8
 8006b40:	20000d1c 	.word	0x20000d1c
 8006b44:	200017fc 	.word	0x200017fc
 8006b48:	20000d30 	.word	0x20000d30
 8006b4c:	20001810 	.word	0x20001810
 8006b50:	20000d6c 	.word	0x20000d6c
 8006b54:	20001824 	.word	0x20001824
 8006b58:	20000d80 	.word	0x20000d80
 8006b5c:	20001838 	.word	0x20001838
 8006b60:	20000dbc 	.word	0x20000dbc
 8006b64:	2000184c 	.word	0x2000184c
 8006b68:	20000dd0 	.word	0x20000dd0
 8006b6c:	20001860 	.word	0x20001860
 8006b70:	20000e0c 	.word	0x20000e0c
 8006b74:	20001874 	.word	0x20001874
 8006b78:	20000e34 	.word	0x20000e34
 8006b7c:	20001888 	.word	0x20001888
 8006b80:	20000e5c 	.word	0x20000e5c
 8006b84:	2000189c 	.word	0x2000189c
 8006b88:	20000e84 	.word	0x20000e84
 8006b8c:	200018b0 	.word	0x200018b0
 8006b90:	20000eac 	.word	0x20000eac
 8006b94:	200018c4 	.word	0x200018c4
 8006b98:	20000ed4 	.word	0x20000ed4
 8006b9c:	200018d8 	.word	0x200018d8
 8006ba0:	20000efc 	.word	0x20000efc
 8006ba4:	200018ec 	.word	0x200018ec
 8006ba8:	20000f24 	.word	0x20000f24
 8006bac:	20001900 	.word	0x20001900
 8006bb0:	20000f4c 	.word	0x20000f4c
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8006bb4:	4ac6      	ldr	r2, [pc, #792]	@ (8006ed0 <loadMenuTexts+0xda8>)
 8006bb6:	4bc7      	ldr	r3, [pc, #796]	@ (8006ed4 <loadMenuTexts+0xdac>)
 8006bb8:	4614      	mov	r4, r2
 8006bba:	461d      	mov	r5, r3
 8006bbc:	6828      	ldr	r0, [r5, #0]
 8006bbe:	6869      	ldr	r1, [r5, #4]
 8006bc0:	68aa      	ldr	r2, [r5, #8]
 8006bc2:	68eb      	ldr	r3, [r5, #12]
 8006bc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bc6:	7c2b      	ldrb	r3, [r5, #16]
 8006bc8:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 8006bca:	4ac3      	ldr	r2, [pc, #780]	@ (8006ed8 <loadMenuTexts+0xdb0>)
 8006bcc:	4bc3      	ldr	r3, [pc, #780]	@ (8006edc <loadMenuTexts+0xdb4>)
 8006bce:	4614      	mov	r4, r2
 8006bd0:	461d      	mov	r5, r3
 8006bd2:	6828      	ldr	r0, [r5, #0]
 8006bd4:	6869      	ldr	r1, [r5, #4]
 8006bd6:	68aa      	ldr	r2, [r5, #8]
 8006bd8:	68eb      	ldr	r3, [r5, #12]
 8006bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bdc:	7c2b      	ldrb	r3, [r5, #16]
 8006bde:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 8006be0:	4abf      	ldr	r2, [pc, #764]	@ (8006ee0 <loadMenuTexts+0xdb8>)
 8006be2:	4bc0      	ldr	r3, [pc, #768]	@ (8006ee4 <loadMenuTexts+0xdbc>)
 8006be4:	4614      	mov	r4, r2
 8006be6:	461d      	mov	r5, r3
 8006be8:	6828      	ldr	r0, [r5, #0]
 8006bea:	6869      	ldr	r1, [r5, #4]
 8006bec:	68aa      	ldr	r2, [r5, #8]
 8006bee:	68eb      	ldr	r3, [r5, #12]
 8006bf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bf2:	7c2b      	ldrb	r3, [r5, #16]
 8006bf4:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 8006bf6:	4abc      	ldr	r2, [pc, #752]	@ (8006ee8 <loadMenuTexts+0xdc0>)
 8006bf8:	4bbc      	ldr	r3, [pc, #752]	@ (8006eec <loadMenuTexts+0xdc4>)
 8006bfa:	4614      	mov	r4, r2
 8006bfc:	461d      	mov	r5, r3
 8006bfe:	6828      	ldr	r0, [r5, #0]
 8006c00:	6869      	ldr	r1, [r5, #4]
 8006c02:	68aa      	ldr	r2, [r5, #8]
 8006c04:	68eb      	ldr	r3, [r5, #12]
 8006c06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c08:	7c2b      	ldrb	r3, [r5, #16]
 8006c0a:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 8006c0c:	4ab8      	ldr	r2, [pc, #736]	@ (8006ef0 <loadMenuTexts+0xdc8>)
 8006c0e:	4bb9      	ldr	r3, [pc, #740]	@ (8006ef4 <loadMenuTexts+0xdcc>)
 8006c10:	4614      	mov	r4, r2
 8006c12:	461d      	mov	r5, r3
 8006c14:	6828      	ldr	r0, [r5, #0]
 8006c16:	6869      	ldr	r1, [r5, #4]
 8006c18:	68aa      	ldr	r2, [r5, #8]
 8006c1a:	68eb      	ldr	r3, [r5, #12]
 8006c1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c1e:	7c2b      	ldrb	r3, [r5, #16]
 8006c20:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 8006c22:	4ab5      	ldr	r2, [pc, #724]	@ (8006ef8 <loadMenuTexts+0xdd0>)
 8006c24:	4bb5      	ldr	r3, [pc, #724]	@ (8006efc <loadMenuTexts+0xdd4>)
 8006c26:	4614      	mov	r4, r2
 8006c28:	461d      	mov	r5, r3
 8006c2a:	6828      	ldr	r0, [r5, #0]
 8006c2c:	6869      	ldr	r1, [r5, #4]
 8006c2e:	68aa      	ldr	r2, [r5, #8]
 8006c30:	68eb      	ldr	r3, [r5, #12]
 8006c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c34:	7c2b      	ldrb	r3, [r5, #16]
 8006c36:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 8006c38:	4ab1      	ldr	r2, [pc, #708]	@ (8006f00 <loadMenuTexts+0xdd8>)
 8006c3a:	4bb2      	ldr	r3, [pc, #712]	@ (8006f04 <loadMenuTexts+0xddc>)
 8006c3c:	4614      	mov	r4, r2
 8006c3e:	461d      	mov	r5, r3
 8006c40:	6828      	ldr	r0, [r5, #0]
 8006c42:	6869      	ldr	r1, [r5, #4]
 8006c44:	68aa      	ldr	r2, [r5, #8]
 8006c46:	68eb      	ldr	r3, [r5, #12]
 8006c48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c4a:	7c2b      	ldrb	r3, [r5, #16]
 8006c4c:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8006c4e:	4aae      	ldr	r2, [pc, #696]	@ (8006f08 <loadMenuTexts+0xde0>)
 8006c50:	4bae      	ldr	r3, [pc, #696]	@ (8006f0c <loadMenuTexts+0xde4>)
 8006c52:	4614      	mov	r4, r2
 8006c54:	461d      	mov	r5, r3
 8006c56:	6828      	ldr	r0, [r5, #0]
 8006c58:	6869      	ldr	r1, [r5, #4]
 8006c5a:	68aa      	ldr	r2, [r5, #8]
 8006c5c:	68eb      	ldr	r3, [r5, #12]
 8006c5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c60:	7c2b      	ldrb	r3, [r5, #16]
 8006c62:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8006c64:	4aaa      	ldr	r2, [pc, #680]	@ (8006f10 <loadMenuTexts+0xde8>)
 8006c66:	4bab      	ldr	r3, [pc, #684]	@ (8006f14 <loadMenuTexts+0xdec>)
 8006c68:	4614      	mov	r4, r2
 8006c6a:	461d      	mov	r5, r3
 8006c6c:	6828      	ldr	r0, [r5, #0]
 8006c6e:	6869      	ldr	r1, [r5, #4]
 8006c70:	68aa      	ldr	r2, [r5, #8]
 8006c72:	68eb      	ldr	r3, [r5, #12]
 8006c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c76:	7c2b      	ldrb	r3, [r5, #16]
 8006c78:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8006c7a:	4aa7      	ldr	r2, [pc, #668]	@ (8006f18 <loadMenuTexts+0xdf0>)
 8006c7c:	4ba7      	ldr	r3, [pc, #668]	@ (8006f1c <loadMenuTexts+0xdf4>)
 8006c7e:	4614      	mov	r4, r2
 8006c80:	461d      	mov	r5, r3
 8006c82:	6828      	ldr	r0, [r5, #0]
 8006c84:	6869      	ldr	r1, [r5, #4]
 8006c86:	68aa      	ldr	r2, [r5, #8]
 8006c88:	68eb      	ldr	r3, [r5, #12]
 8006c8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c8c:	7c2b      	ldrb	r3, [r5, #16]
 8006c8e:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8006c90:	4aa3      	ldr	r2, [pc, #652]	@ (8006f20 <loadMenuTexts+0xdf8>)
 8006c92:	4ba4      	ldr	r3, [pc, #656]	@ (8006f24 <loadMenuTexts+0xdfc>)
 8006c94:	4614      	mov	r4, r2
 8006c96:	461d      	mov	r5, r3
 8006c98:	6828      	ldr	r0, [r5, #0]
 8006c9a:	6869      	ldr	r1, [r5, #4]
 8006c9c:	68aa      	ldr	r2, [r5, #8]
 8006c9e:	68eb      	ldr	r3, [r5, #12]
 8006ca0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ca2:	7c2b      	ldrb	r3, [r5, #16]
 8006ca4:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8006ca6:	4aa0      	ldr	r2, [pc, #640]	@ (8006f28 <loadMenuTexts+0xe00>)
 8006ca8:	4ba0      	ldr	r3, [pc, #640]	@ (8006f2c <loadMenuTexts+0xe04>)
 8006caa:	4614      	mov	r4, r2
 8006cac:	461d      	mov	r5, r3
 8006cae:	6828      	ldr	r0, [r5, #0]
 8006cb0:	6869      	ldr	r1, [r5, #4]
 8006cb2:	68aa      	ldr	r2, [r5, #8]
 8006cb4:	68eb      	ldr	r3, [r5, #12]
 8006cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cb8:	7c2b      	ldrb	r3, [r5, #16]
 8006cba:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8006cbc:	4a9c      	ldr	r2, [pc, #624]	@ (8006f30 <loadMenuTexts+0xe08>)
 8006cbe:	4b9d      	ldr	r3, [pc, #628]	@ (8006f34 <loadMenuTexts+0xe0c>)
 8006cc0:	4614      	mov	r4, r2
 8006cc2:	461d      	mov	r5, r3
 8006cc4:	6828      	ldr	r0, [r5, #0]
 8006cc6:	6869      	ldr	r1, [r5, #4]
 8006cc8:	68aa      	ldr	r2, [r5, #8]
 8006cca:	68eb      	ldr	r3, [r5, #12]
 8006ccc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cce:	7c2b      	ldrb	r3, [r5, #16]
 8006cd0:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8006cd2:	4a99      	ldr	r2, [pc, #612]	@ (8006f38 <loadMenuTexts+0xe10>)
 8006cd4:	4b99      	ldr	r3, [pc, #612]	@ (8006f3c <loadMenuTexts+0xe14>)
 8006cd6:	4614      	mov	r4, r2
 8006cd8:	461d      	mov	r5, r3
 8006cda:	6828      	ldr	r0, [r5, #0]
 8006cdc:	6869      	ldr	r1, [r5, #4]
 8006cde:	68aa      	ldr	r2, [r5, #8]
 8006ce0:	68eb      	ldr	r3, [r5, #12]
 8006ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ce4:	7c2b      	ldrb	r3, [r5, #16]
 8006ce6:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8006ce8:	4a95      	ldr	r2, [pc, #596]	@ (8006f40 <loadMenuTexts+0xe18>)
 8006cea:	4b96      	ldr	r3, [pc, #600]	@ (8006f44 <loadMenuTexts+0xe1c>)
 8006cec:	4614      	mov	r4, r2
 8006cee:	461d      	mov	r5, r3
 8006cf0:	6828      	ldr	r0, [r5, #0]
 8006cf2:	6869      	ldr	r1, [r5, #4]
 8006cf4:	68aa      	ldr	r2, [r5, #8]
 8006cf6:	68eb      	ldr	r3, [r5, #12]
 8006cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cfa:	7c2b      	ldrb	r3, [r5, #16]
 8006cfc:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8006cfe:	4a92      	ldr	r2, [pc, #584]	@ (8006f48 <loadMenuTexts+0xe20>)
 8006d00:	4b92      	ldr	r3, [pc, #584]	@ (8006f4c <loadMenuTexts+0xe24>)
 8006d02:	4614      	mov	r4, r2
 8006d04:	461d      	mov	r5, r3
 8006d06:	6828      	ldr	r0, [r5, #0]
 8006d08:	6869      	ldr	r1, [r5, #4]
 8006d0a:	68aa      	ldr	r2, [r5, #8]
 8006d0c:	68eb      	ldr	r3, [r5, #12]
 8006d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d10:	7c2b      	ldrb	r3, [r5, #16]
 8006d12:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8006d14:	4a8e      	ldr	r2, [pc, #568]	@ (8006f50 <loadMenuTexts+0xe28>)
 8006d16:	4b8f      	ldr	r3, [pc, #572]	@ (8006f54 <loadMenuTexts+0xe2c>)
 8006d18:	4614      	mov	r4, r2
 8006d1a:	461d      	mov	r5, r3
 8006d1c:	6828      	ldr	r0, [r5, #0]
 8006d1e:	6869      	ldr	r1, [r5, #4]
 8006d20:	68aa      	ldr	r2, [r5, #8]
 8006d22:	68eb      	ldr	r3, [r5, #12]
 8006d24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d26:	7c2b      	ldrb	r3, [r5, #16]
 8006d28:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8006d2a:	4a8b      	ldr	r2, [pc, #556]	@ (8006f58 <loadMenuTexts+0xe30>)
 8006d2c:	4b8b      	ldr	r3, [pc, #556]	@ (8006f5c <loadMenuTexts+0xe34>)
 8006d2e:	4614      	mov	r4, r2
 8006d30:	461d      	mov	r5, r3
 8006d32:	6828      	ldr	r0, [r5, #0]
 8006d34:	6869      	ldr	r1, [r5, #4]
 8006d36:	68aa      	ldr	r2, [r5, #8]
 8006d38:	68eb      	ldr	r3, [r5, #12]
 8006d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d3c:	7c2b      	ldrb	r3, [r5, #16]
 8006d3e:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8006d40:	4a87      	ldr	r2, [pc, #540]	@ (8006f60 <loadMenuTexts+0xe38>)
 8006d42:	4b88      	ldr	r3, [pc, #544]	@ (8006f64 <loadMenuTexts+0xe3c>)
 8006d44:	4614      	mov	r4, r2
 8006d46:	461d      	mov	r5, r3
 8006d48:	6828      	ldr	r0, [r5, #0]
 8006d4a:	6869      	ldr	r1, [r5, #4]
 8006d4c:	68aa      	ldr	r2, [r5, #8]
 8006d4e:	68eb      	ldr	r3, [r5, #12]
 8006d50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d52:	7c2b      	ldrb	r3, [r5, #16]
 8006d54:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8006d56:	4a84      	ldr	r2, [pc, #528]	@ (8006f68 <loadMenuTexts+0xe40>)
 8006d58:	4b84      	ldr	r3, [pc, #528]	@ (8006f6c <loadMenuTexts+0xe44>)
 8006d5a:	4614      	mov	r4, r2
 8006d5c:	461d      	mov	r5, r3
 8006d5e:	6828      	ldr	r0, [r5, #0]
 8006d60:	6869      	ldr	r1, [r5, #4]
 8006d62:	68aa      	ldr	r2, [r5, #8]
 8006d64:	68eb      	ldr	r3, [r5, #12]
 8006d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d68:	7c2b      	ldrb	r3, [r5, #16]
 8006d6a:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8006d6c:	4a80      	ldr	r2, [pc, #512]	@ (8006f70 <loadMenuTexts+0xe48>)
 8006d6e:	4b81      	ldr	r3, [pc, #516]	@ (8006f74 <loadMenuTexts+0xe4c>)
 8006d70:	4614      	mov	r4, r2
 8006d72:	461d      	mov	r5, r3
 8006d74:	6828      	ldr	r0, [r5, #0]
 8006d76:	6869      	ldr	r1, [r5, #4]
 8006d78:	68aa      	ldr	r2, [r5, #8]
 8006d7a:	68eb      	ldr	r3, [r5, #12]
 8006d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d7e:	7c2b      	ldrb	r3, [r5, #16]
 8006d80:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8006d82:	4a7d      	ldr	r2, [pc, #500]	@ (8006f78 <loadMenuTexts+0xe50>)
 8006d84:	4b7d      	ldr	r3, [pc, #500]	@ (8006f7c <loadMenuTexts+0xe54>)
 8006d86:	4614      	mov	r4, r2
 8006d88:	461d      	mov	r5, r3
 8006d8a:	6828      	ldr	r0, [r5, #0]
 8006d8c:	6869      	ldr	r1, [r5, #4]
 8006d8e:	68aa      	ldr	r2, [r5, #8]
 8006d90:	68eb      	ldr	r3, [r5, #12]
 8006d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006d94:	7c2b      	ldrb	r3, [r5, #16]
 8006d96:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8006d98:	4a79      	ldr	r2, [pc, #484]	@ (8006f80 <loadMenuTexts+0xe58>)
 8006d9a:	4b7a      	ldr	r3, [pc, #488]	@ (8006f84 <loadMenuTexts+0xe5c>)
 8006d9c:	4614      	mov	r4, r2
 8006d9e:	461d      	mov	r5, r3
 8006da0:	6828      	ldr	r0, [r5, #0]
 8006da2:	6869      	ldr	r1, [r5, #4]
 8006da4:	68aa      	ldr	r2, [r5, #8]
 8006da6:	68eb      	ldr	r3, [r5, #12]
 8006da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006daa:	7c2b      	ldrb	r3, [r5, #16]
 8006dac:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8006dae:	4a76      	ldr	r2, [pc, #472]	@ (8006f88 <loadMenuTexts+0xe60>)
 8006db0:	4b76      	ldr	r3, [pc, #472]	@ (8006f8c <loadMenuTexts+0xe64>)
 8006db2:	4614      	mov	r4, r2
 8006db4:	461d      	mov	r5, r3
 8006db6:	6828      	ldr	r0, [r5, #0]
 8006db8:	6869      	ldr	r1, [r5, #4]
 8006dba:	68aa      	ldr	r2, [r5, #8]
 8006dbc:	68eb      	ldr	r3, [r5, #12]
 8006dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dc0:	7c2b      	ldrb	r3, [r5, #16]
 8006dc2:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8006dc4:	4a72      	ldr	r2, [pc, #456]	@ (8006f90 <loadMenuTexts+0xe68>)
 8006dc6:	4b73      	ldr	r3, [pc, #460]	@ (8006f94 <loadMenuTexts+0xe6c>)
 8006dc8:	4614      	mov	r4, r2
 8006dca:	461d      	mov	r5, r3
 8006dcc:	6828      	ldr	r0, [r5, #0]
 8006dce:	6869      	ldr	r1, [r5, #4]
 8006dd0:	68aa      	ldr	r2, [r5, #8]
 8006dd2:	68eb      	ldr	r3, [r5, #12]
 8006dd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dd6:	7c2b      	ldrb	r3, [r5, #16]
 8006dd8:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8006dda:	4a6f      	ldr	r2, [pc, #444]	@ (8006f98 <loadMenuTexts+0xe70>)
 8006ddc:	4b6f      	ldr	r3, [pc, #444]	@ (8006f9c <loadMenuTexts+0xe74>)
 8006dde:	4614      	mov	r4, r2
 8006de0:	461d      	mov	r5, r3
 8006de2:	6828      	ldr	r0, [r5, #0]
 8006de4:	6869      	ldr	r1, [r5, #4]
 8006de6:	68aa      	ldr	r2, [r5, #8]
 8006de8:	68eb      	ldr	r3, [r5, #12]
 8006dea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dec:	7c2b      	ldrb	r3, [r5, #16]
 8006dee:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8006df0:	4a6b      	ldr	r2, [pc, #428]	@ (8006fa0 <loadMenuTexts+0xe78>)
 8006df2:	4b6c      	ldr	r3, [pc, #432]	@ (8006fa4 <loadMenuTexts+0xe7c>)
 8006df4:	4614      	mov	r4, r2
 8006df6:	461d      	mov	r5, r3
 8006df8:	6828      	ldr	r0, [r5, #0]
 8006dfa:	6869      	ldr	r1, [r5, #4]
 8006dfc:	68aa      	ldr	r2, [r5, #8]
 8006dfe:	68eb      	ldr	r3, [r5, #12]
 8006e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e02:	7c2b      	ldrb	r3, [r5, #16]
 8006e04:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8006e06:	4a68      	ldr	r2, [pc, #416]	@ (8006fa8 <loadMenuTexts+0xe80>)
 8006e08:	4b68      	ldr	r3, [pc, #416]	@ (8006fac <loadMenuTexts+0xe84>)
 8006e0a:	4614      	mov	r4, r2
 8006e0c:	461d      	mov	r5, r3
 8006e0e:	6828      	ldr	r0, [r5, #0]
 8006e10:	6869      	ldr	r1, [r5, #4]
 8006e12:	68aa      	ldr	r2, [r5, #8]
 8006e14:	68eb      	ldr	r3, [r5, #12]
 8006e16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e18:	7c2b      	ldrb	r3, [r5, #16]
 8006e1a:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8006e1c:	4a64      	ldr	r2, [pc, #400]	@ (8006fb0 <loadMenuTexts+0xe88>)
 8006e1e:	4b65      	ldr	r3, [pc, #404]	@ (8006fb4 <loadMenuTexts+0xe8c>)
 8006e20:	4614      	mov	r4, r2
 8006e22:	461d      	mov	r5, r3
 8006e24:	6828      	ldr	r0, [r5, #0]
 8006e26:	6869      	ldr	r1, [r5, #4]
 8006e28:	68aa      	ldr	r2, [r5, #8]
 8006e2a:	68eb      	ldr	r3, [r5, #12]
 8006e2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e2e:	7c2b      	ldrb	r3, [r5, #16]
 8006e30:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 8006e32:	4a61      	ldr	r2, [pc, #388]	@ (8006fb8 <loadMenuTexts+0xe90>)
 8006e34:	4b61      	ldr	r3, [pc, #388]	@ (8006fbc <loadMenuTexts+0xe94>)
 8006e36:	4614      	mov	r4, r2
 8006e38:	461d      	mov	r5, r3
 8006e3a:	6828      	ldr	r0, [r5, #0]
 8006e3c:	6869      	ldr	r1, [r5, #4]
 8006e3e:	68aa      	ldr	r2, [r5, #8]
 8006e40:	68eb      	ldr	r3, [r5, #12]
 8006e42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e44:	7c2b      	ldrb	r3, [r5, #16]
 8006e46:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8006e48:	4a5d      	ldr	r2, [pc, #372]	@ (8006fc0 <loadMenuTexts+0xe98>)
 8006e4a:	4b5e      	ldr	r3, [pc, #376]	@ (8006fc4 <loadMenuTexts+0xe9c>)
 8006e4c:	4614      	mov	r4, r2
 8006e4e:	461d      	mov	r5, r3
 8006e50:	6828      	ldr	r0, [r5, #0]
 8006e52:	6869      	ldr	r1, [r5, #4]
 8006e54:	68aa      	ldr	r2, [r5, #8]
 8006e56:	68eb      	ldr	r3, [r5, #12]
 8006e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e5a:	7c2b      	ldrb	r3, [r5, #16]
 8006e5c:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8006e5e:	4a5a      	ldr	r2, [pc, #360]	@ (8006fc8 <loadMenuTexts+0xea0>)
 8006e60:	4b5a      	ldr	r3, [pc, #360]	@ (8006fcc <loadMenuTexts+0xea4>)
 8006e62:	4614      	mov	r4, r2
 8006e64:	461d      	mov	r5, r3
 8006e66:	6828      	ldr	r0, [r5, #0]
 8006e68:	6869      	ldr	r1, [r5, #4]
 8006e6a:	68aa      	ldr	r2, [r5, #8]
 8006e6c:	68eb      	ldr	r3, [r5, #12]
 8006e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e70:	7c2b      	ldrb	r3, [r5, #16]
 8006e72:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 8006e74:	4a56      	ldr	r2, [pc, #344]	@ (8006fd0 <loadMenuTexts+0xea8>)
 8006e76:	4b57      	ldr	r3, [pc, #348]	@ (8006fd4 <loadMenuTexts+0xeac>)
 8006e78:	4614      	mov	r4, r2
 8006e7a:	461d      	mov	r5, r3
 8006e7c:	6828      	ldr	r0, [r5, #0]
 8006e7e:	6869      	ldr	r1, [r5, #4]
 8006e80:	68aa      	ldr	r2, [r5, #8]
 8006e82:	68eb      	ldr	r3, [r5, #12]
 8006e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e86:	7c2b      	ldrb	r3, [r5, #16]
 8006e88:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8006e8a:	4a53      	ldr	r2, [pc, #332]	@ (8006fd8 <loadMenuTexts+0xeb0>)
 8006e8c:	4b53      	ldr	r3, [pc, #332]	@ (8006fdc <loadMenuTexts+0xeb4>)
 8006e8e:	4614      	mov	r4, r2
 8006e90:	461d      	mov	r5, r3
 8006e92:	6828      	ldr	r0, [r5, #0]
 8006e94:	6869      	ldr	r1, [r5, #4]
 8006e96:	68aa      	ldr	r2, [r5, #8]
 8006e98:	68eb      	ldr	r3, [r5, #12]
 8006e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e9c:	7c2b      	ldrb	r3, [r5, #16]
 8006e9e:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8006ea0:	4a4f      	ldr	r2, [pc, #316]	@ (8006fe0 <loadMenuTexts+0xeb8>)
 8006ea2:	4b50      	ldr	r3, [pc, #320]	@ (8006fe4 <loadMenuTexts+0xebc>)
 8006ea4:	4614      	mov	r4, r2
 8006ea6:	461d      	mov	r5, r3
 8006ea8:	6828      	ldr	r0, [r5, #0]
 8006eaa:	6869      	ldr	r1, [r5, #4]
 8006eac:	68aa      	ldr	r2, [r5, #8]
 8006eae:	68eb      	ldr	r3, [r5, #12]
 8006eb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eb2:	7c2b      	ldrb	r3, [r5, #16]
 8006eb4:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8006eb6:	4a4c      	ldr	r2, [pc, #304]	@ (8006fe8 <loadMenuTexts+0xec0>)
 8006eb8:	4b4c      	ldr	r3, [pc, #304]	@ (8006fec <loadMenuTexts+0xec4>)
 8006eba:	4614      	mov	r4, r2
 8006ebc:	461d      	mov	r5, r3
 8006ebe:	6828      	ldr	r0, [r5, #0]
 8006ec0:	6869      	ldr	r1, [r5, #4]
 8006ec2:	68aa      	ldr	r2, [r5, #8]
 8006ec4:	68eb      	ldr	r3, [r5, #12]
 8006ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ec8:	7c2b      	ldrb	r3, [r5, #16]
 8006eca:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8006ecc:	4a48      	ldr	r2, [pc, #288]	@ (8006ff0 <loadMenuTexts+0xec8>)
 8006ece:	e091      	b.n	8006ff4 <loadMenuTexts+0xecc>
 8006ed0:	20001220 	.word	0x20001220
 8006ed4:	20000704 	.word	0x20000704
 8006ed8:	20001234 	.word	0x20001234
 8006edc:	20000718 	.word	0x20000718
 8006ee0:	20001248 	.word	0x20001248
 8006ee4:	2000072c 	.word	0x2000072c
 8006ee8:	2000125c 	.word	0x2000125c
 8006eec:	20000740 	.word	0x20000740
 8006ef0:	20001270 	.word	0x20001270
 8006ef4:	20000754 	.word	0x20000754
 8006ef8:	20001284 	.word	0x20001284
 8006efc:	20000768 	.word	0x20000768
 8006f00:	20001298 	.word	0x20001298
 8006f04:	2000077c 	.word	0x2000077c
 8006f08:	200012ac 	.word	0x200012ac
 8006f0c:	20000790 	.word	0x20000790
 8006f10:	200012c0 	.word	0x200012c0
 8006f14:	200007a4 	.word	0x200007a4
 8006f18:	200012d4 	.word	0x200012d4
 8006f1c:	200007b8 	.word	0x200007b8
 8006f20:	200012e8 	.word	0x200012e8
 8006f24:	200007cc 	.word	0x200007cc
 8006f28:	200012fc 	.word	0x200012fc
 8006f2c:	200007e0 	.word	0x200007e0
 8006f30:	20001310 	.word	0x20001310
 8006f34:	200007f4 	.word	0x200007f4
 8006f38:	20001324 	.word	0x20001324
 8006f3c:	20000808 	.word	0x20000808
 8006f40:	20001338 	.word	0x20001338
 8006f44:	2000081c 	.word	0x2000081c
 8006f48:	2000134c 	.word	0x2000134c
 8006f4c:	20000830 	.word	0x20000830
 8006f50:	20001360 	.word	0x20001360
 8006f54:	20000844 	.word	0x20000844
 8006f58:	20001374 	.word	0x20001374
 8006f5c:	20000858 	.word	0x20000858
 8006f60:	20001388 	.word	0x20001388
 8006f64:	2000086c 	.word	0x2000086c
 8006f68:	2000139c 	.word	0x2000139c
 8006f6c:	20000880 	.word	0x20000880
 8006f70:	200013b0 	.word	0x200013b0
 8006f74:	20000894 	.word	0x20000894
 8006f78:	200013c4 	.word	0x200013c4
 8006f7c:	200008a8 	.word	0x200008a8
 8006f80:	200013d8 	.word	0x200013d8
 8006f84:	200008bc 	.word	0x200008bc
 8006f88:	200013ec 	.word	0x200013ec
 8006f8c:	200008d0 	.word	0x200008d0
 8006f90:	20001400 	.word	0x20001400
 8006f94:	200008e4 	.word	0x200008e4
 8006f98:	20001414 	.word	0x20001414
 8006f9c:	200008f8 	.word	0x200008f8
 8006fa0:	20001428 	.word	0x20001428
 8006fa4:	2000090c 	.word	0x2000090c
 8006fa8:	2000143c 	.word	0x2000143c
 8006fac:	20000920 	.word	0x20000920
 8006fb0:	20001450 	.word	0x20001450
 8006fb4:	20000934 	.word	0x20000934
 8006fb8:	20001464 	.word	0x20001464
 8006fbc:	20000948 	.word	0x20000948
 8006fc0:	20001478 	.word	0x20001478
 8006fc4:	2000095c 	.word	0x2000095c
 8006fc8:	2000148c 	.word	0x2000148c
 8006fcc:	20000970 	.word	0x20000970
 8006fd0:	200014a0 	.word	0x200014a0
 8006fd4:	20000984 	.word	0x20000984
 8006fd8:	200014b4 	.word	0x200014b4
 8006fdc:	20000998 	.word	0x20000998
 8006fe0:	200014c8 	.word	0x200014c8
 8006fe4:	200009ac 	.word	0x200009ac
 8006fe8:	200014dc 	.word	0x200014dc
 8006fec:	200009c0 	.word	0x200009c0
 8006ff0:	200014f0 	.word	0x200014f0
 8006ff4:	4bc7      	ldr	r3, [pc, #796]	@ (8007314 <loadMenuTexts+0x11ec>)
 8006ff6:	4614      	mov	r4, r2
 8006ff8:	461d      	mov	r5, r3
 8006ffa:	6828      	ldr	r0, [r5, #0]
 8006ffc:	6869      	ldr	r1, [r5, #4]
 8006ffe:	68aa      	ldr	r2, [r5, #8]
 8007000:	68eb      	ldr	r3, [r5, #12]
 8007002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007004:	7c2b      	ldrb	r3, [r5, #16]
 8007006:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8007008:	4ac3      	ldr	r2, [pc, #780]	@ (8007318 <loadMenuTexts+0x11f0>)
 800700a:	4bc4      	ldr	r3, [pc, #784]	@ (800731c <loadMenuTexts+0x11f4>)
 800700c:	4614      	mov	r4, r2
 800700e:	461d      	mov	r5, r3
 8007010:	6828      	ldr	r0, [r5, #0]
 8007012:	6869      	ldr	r1, [r5, #4]
 8007014:	68aa      	ldr	r2, [r5, #8]
 8007016:	68eb      	ldr	r3, [r5, #12]
 8007018:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800701a:	7c2b      	ldrb	r3, [r5, #16]
 800701c:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 800701e:	4ac0      	ldr	r2, [pc, #768]	@ (8007320 <loadMenuTexts+0x11f8>)
 8007020:	4bc0      	ldr	r3, [pc, #768]	@ (8007324 <loadMenuTexts+0x11fc>)
 8007022:	4614      	mov	r4, r2
 8007024:	461d      	mov	r5, r3
 8007026:	6828      	ldr	r0, [r5, #0]
 8007028:	6869      	ldr	r1, [r5, #4]
 800702a:	68aa      	ldr	r2, [r5, #8]
 800702c:	68eb      	ldr	r3, [r5, #12]
 800702e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007030:	7c2b      	ldrb	r3, [r5, #16]
 8007032:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8007034:	4abc      	ldr	r2, [pc, #752]	@ (8007328 <loadMenuTexts+0x1200>)
 8007036:	4bbd      	ldr	r3, [pc, #756]	@ (800732c <loadMenuTexts+0x1204>)
 8007038:	4614      	mov	r4, r2
 800703a:	461d      	mov	r5, r3
 800703c:	6828      	ldr	r0, [r5, #0]
 800703e:	6869      	ldr	r1, [r5, #4]
 8007040:	68aa      	ldr	r2, [r5, #8]
 8007042:	68eb      	ldr	r3, [r5, #12]
 8007044:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007046:	7c2b      	ldrb	r3, [r5, #16]
 8007048:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 800704a:	4ab9      	ldr	r2, [pc, #740]	@ (8007330 <loadMenuTexts+0x1208>)
 800704c:	4bb9      	ldr	r3, [pc, #740]	@ (8007334 <loadMenuTexts+0x120c>)
 800704e:	4614      	mov	r4, r2
 8007050:	461d      	mov	r5, r3
 8007052:	6828      	ldr	r0, [r5, #0]
 8007054:	6869      	ldr	r1, [r5, #4]
 8007056:	68aa      	ldr	r2, [r5, #8]
 8007058:	68eb      	ldr	r3, [r5, #12]
 800705a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800705c:	7c2b      	ldrb	r3, [r5, #16]
 800705e:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8007060:	4ab5      	ldr	r2, [pc, #724]	@ (8007338 <loadMenuTexts+0x1210>)
 8007062:	4bb6      	ldr	r3, [pc, #728]	@ (800733c <loadMenuTexts+0x1214>)
 8007064:	4614      	mov	r4, r2
 8007066:	461d      	mov	r5, r3
 8007068:	6828      	ldr	r0, [r5, #0]
 800706a:	6869      	ldr	r1, [r5, #4]
 800706c:	68aa      	ldr	r2, [r5, #8]
 800706e:	68eb      	ldr	r3, [r5, #12]
 8007070:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007072:	7c2b      	ldrb	r3, [r5, #16]
 8007074:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 8007076:	4ab2      	ldr	r2, [pc, #712]	@ (8007340 <loadMenuTexts+0x1218>)
 8007078:	4bb2      	ldr	r3, [pc, #712]	@ (8007344 <loadMenuTexts+0x121c>)
 800707a:	4614      	mov	r4, r2
 800707c:	461d      	mov	r5, r3
 800707e:	6828      	ldr	r0, [r5, #0]
 8007080:	6869      	ldr	r1, [r5, #4]
 8007082:	68aa      	ldr	r2, [r5, #8]
 8007084:	68eb      	ldr	r3, [r5, #12]
 8007086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007088:	7c2b      	ldrb	r3, [r5, #16]
 800708a:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 800708c:	4aae      	ldr	r2, [pc, #696]	@ (8007348 <loadMenuTexts+0x1220>)
 800708e:	4baf      	ldr	r3, [pc, #700]	@ (800734c <loadMenuTexts+0x1224>)
 8007090:	4614      	mov	r4, r2
 8007092:	461d      	mov	r5, r3
 8007094:	6828      	ldr	r0, [r5, #0]
 8007096:	6869      	ldr	r1, [r5, #4]
 8007098:	68aa      	ldr	r2, [r5, #8]
 800709a:	68eb      	ldr	r3, [r5, #12]
 800709c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800709e:	7c2b      	ldrb	r3, [r5, #16]
 80070a0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 80070a2:	4aab      	ldr	r2, [pc, #684]	@ (8007350 <loadMenuTexts+0x1228>)
 80070a4:	4bab      	ldr	r3, [pc, #684]	@ (8007354 <loadMenuTexts+0x122c>)
 80070a6:	4614      	mov	r4, r2
 80070a8:	461d      	mov	r5, r3
 80070aa:	6828      	ldr	r0, [r5, #0]
 80070ac:	6869      	ldr	r1, [r5, #4]
 80070ae:	68aa      	ldr	r2, [r5, #8]
 80070b0:	68eb      	ldr	r3, [r5, #12]
 80070b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070b4:	7c2b      	ldrb	r3, [r5, #16]
 80070b6:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 80070b8:	4aa7      	ldr	r2, [pc, #668]	@ (8007358 <loadMenuTexts+0x1230>)
 80070ba:	4ba8      	ldr	r3, [pc, #672]	@ (800735c <loadMenuTexts+0x1234>)
 80070bc:	4614      	mov	r4, r2
 80070be:	461d      	mov	r5, r3
 80070c0:	6828      	ldr	r0, [r5, #0]
 80070c2:	6869      	ldr	r1, [r5, #4]
 80070c4:	68aa      	ldr	r2, [r5, #8]
 80070c6:	68eb      	ldr	r3, [r5, #12]
 80070c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070ca:	7c2b      	ldrb	r3, [r5, #16]
 80070cc:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 80070ce:	4aa4      	ldr	r2, [pc, #656]	@ (8007360 <loadMenuTexts+0x1238>)
 80070d0:	4ba4      	ldr	r3, [pc, #656]	@ (8007364 <loadMenuTexts+0x123c>)
 80070d2:	4614      	mov	r4, r2
 80070d4:	461d      	mov	r5, r3
 80070d6:	6828      	ldr	r0, [r5, #0]
 80070d8:	6869      	ldr	r1, [r5, #4]
 80070da:	68aa      	ldr	r2, [r5, #8]
 80070dc:	68eb      	ldr	r3, [r5, #12]
 80070de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070e0:	7c2b      	ldrb	r3, [r5, #16]
 80070e2:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 80070e4:	4aa0      	ldr	r2, [pc, #640]	@ (8007368 <loadMenuTexts+0x1240>)
 80070e6:	4ba1      	ldr	r3, [pc, #644]	@ (800736c <loadMenuTexts+0x1244>)
 80070e8:	4614      	mov	r4, r2
 80070ea:	461d      	mov	r5, r3
 80070ec:	6828      	ldr	r0, [r5, #0]
 80070ee:	6869      	ldr	r1, [r5, #4]
 80070f0:	68aa      	ldr	r2, [r5, #8]
 80070f2:	68eb      	ldr	r3, [r5, #12]
 80070f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070f6:	7c2b      	ldrb	r3, [r5, #16]
 80070f8:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 80070fa:	4a9d      	ldr	r2, [pc, #628]	@ (8007370 <loadMenuTexts+0x1248>)
 80070fc:	4b9d      	ldr	r3, [pc, #628]	@ (8007374 <loadMenuTexts+0x124c>)
 80070fe:	4614      	mov	r4, r2
 8007100:	461d      	mov	r5, r3
 8007102:	6828      	ldr	r0, [r5, #0]
 8007104:	6869      	ldr	r1, [r5, #4]
 8007106:	68aa      	ldr	r2, [r5, #8]
 8007108:	68eb      	ldr	r3, [r5, #12]
 800710a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800710c:	7c2b      	ldrb	r3, [r5, #16]
 800710e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8007110:	4a99      	ldr	r2, [pc, #612]	@ (8007378 <loadMenuTexts+0x1250>)
 8007112:	4b9a      	ldr	r3, [pc, #616]	@ (800737c <loadMenuTexts+0x1254>)
 8007114:	4614      	mov	r4, r2
 8007116:	461d      	mov	r5, r3
 8007118:	6828      	ldr	r0, [r5, #0]
 800711a:	6869      	ldr	r1, [r5, #4]
 800711c:	68aa      	ldr	r2, [r5, #8]
 800711e:	68eb      	ldr	r3, [r5, #12]
 8007120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007122:	7c2b      	ldrb	r3, [r5, #16]
 8007124:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8007126:	4a96      	ldr	r2, [pc, #600]	@ (8007380 <loadMenuTexts+0x1258>)
 8007128:	4b96      	ldr	r3, [pc, #600]	@ (8007384 <loadMenuTexts+0x125c>)
 800712a:	4614      	mov	r4, r2
 800712c:	461d      	mov	r5, r3
 800712e:	6828      	ldr	r0, [r5, #0]
 8007130:	6869      	ldr	r1, [r5, #4]
 8007132:	68aa      	ldr	r2, [r5, #8]
 8007134:	68eb      	ldr	r3, [r5, #12]
 8007136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007138:	7c2b      	ldrb	r3, [r5, #16]
 800713a:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 800713c:	4a92      	ldr	r2, [pc, #584]	@ (8007388 <loadMenuTexts+0x1260>)
 800713e:	4b93      	ldr	r3, [pc, #588]	@ (800738c <loadMenuTexts+0x1264>)
 8007140:	4614      	mov	r4, r2
 8007142:	461d      	mov	r5, r3
 8007144:	6828      	ldr	r0, [r5, #0]
 8007146:	6869      	ldr	r1, [r5, #4]
 8007148:	68aa      	ldr	r2, [r5, #8]
 800714a:	68eb      	ldr	r3, [r5, #12]
 800714c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800714e:	7c2b      	ldrb	r3, [r5, #16]
 8007150:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8007152:	4a8f      	ldr	r2, [pc, #572]	@ (8007390 <loadMenuTexts+0x1268>)
 8007154:	4b8f      	ldr	r3, [pc, #572]	@ (8007394 <loadMenuTexts+0x126c>)
 8007156:	4614      	mov	r4, r2
 8007158:	461d      	mov	r5, r3
 800715a:	6828      	ldr	r0, [r5, #0]
 800715c:	6869      	ldr	r1, [r5, #4]
 800715e:	68aa      	ldr	r2, [r5, #8]
 8007160:	68eb      	ldr	r3, [r5, #12]
 8007162:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007164:	7c2b      	ldrb	r3, [r5, #16]
 8007166:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8007168:	4a8b      	ldr	r2, [pc, #556]	@ (8007398 <loadMenuTexts+0x1270>)
 800716a:	4b8c      	ldr	r3, [pc, #560]	@ (800739c <loadMenuTexts+0x1274>)
 800716c:	4614      	mov	r4, r2
 800716e:	461d      	mov	r5, r3
 8007170:	6828      	ldr	r0, [r5, #0]
 8007172:	6869      	ldr	r1, [r5, #4]
 8007174:	68aa      	ldr	r2, [r5, #8]
 8007176:	68eb      	ldr	r3, [r5, #12]
 8007178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800717a:	7c2b      	ldrb	r3, [r5, #16]
 800717c:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 800717e:	4a88      	ldr	r2, [pc, #544]	@ (80073a0 <loadMenuTexts+0x1278>)
 8007180:	4b88      	ldr	r3, [pc, #544]	@ (80073a4 <loadMenuTexts+0x127c>)
 8007182:	4614      	mov	r4, r2
 8007184:	461d      	mov	r5, r3
 8007186:	6828      	ldr	r0, [r5, #0]
 8007188:	6869      	ldr	r1, [r5, #4]
 800718a:	68aa      	ldr	r2, [r5, #8]
 800718c:	68eb      	ldr	r3, [r5, #12]
 800718e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007190:	7c2b      	ldrb	r3, [r5, #16]
 8007192:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8007194:	4a84      	ldr	r2, [pc, #528]	@ (80073a8 <loadMenuTexts+0x1280>)
 8007196:	4b85      	ldr	r3, [pc, #532]	@ (80073ac <loadMenuTexts+0x1284>)
 8007198:	4614      	mov	r4, r2
 800719a:	461d      	mov	r5, r3
 800719c:	6828      	ldr	r0, [r5, #0]
 800719e:	6869      	ldr	r1, [r5, #4]
 80071a0:	68aa      	ldr	r2, [r5, #8]
 80071a2:	68eb      	ldr	r3, [r5, #12]
 80071a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071a6:	7c2b      	ldrb	r3, [r5, #16]
 80071a8:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 80071aa:	4a81      	ldr	r2, [pc, #516]	@ (80073b0 <loadMenuTexts+0x1288>)
 80071ac:	4b81      	ldr	r3, [pc, #516]	@ (80073b4 <loadMenuTexts+0x128c>)
 80071ae:	4614      	mov	r4, r2
 80071b0:	461d      	mov	r5, r3
 80071b2:	6828      	ldr	r0, [r5, #0]
 80071b4:	6869      	ldr	r1, [r5, #4]
 80071b6:	68aa      	ldr	r2, [r5, #8]
 80071b8:	68eb      	ldr	r3, [r5, #12]
 80071ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071bc:	7c2b      	ldrb	r3, [r5, #16]
 80071be:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 80071c0:	4a7d      	ldr	r2, [pc, #500]	@ (80073b8 <loadMenuTexts+0x1290>)
 80071c2:	4b7e      	ldr	r3, [pc, #504]	@ (80073bc <loadMenuTexts+0x1294>)
 80071c4:	4614      	mov	r4, r2
 80071c6:	461d      	mov	r5, r3
 80071c8:	6828      	ldr	r0, [r5, #0]
 80071ca:	6869      	ldr	r1, [r5, #4]
 80071cc:	68aa      	ldr	r2, [r5, #8]
 80071ce:	68eb      	ldr	r3, [r5, #12]
 80071d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071d2:	7c2b      	ldrb	r3, [r5, #16]
 80071d4:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 80071d6:	4a7a      	ldr	r2, [pc, #488]	@ (80073c0 <loadMenuTexts+0x1298>)
 80071d8:	4b7a      	ldr	r3, [pc, #488]	@ (80073c4 <loadMenuTexts+0x129c>)
 80071da:	4614      	mov	r4, r2
 80071dc:	461d      	mov	r5, r3
 80071de:	6828      	ldr	r0, [r5, #0]
 80071e0:	6869      	ldr	r1, [r5, #4]
 80071e2:	68aa      	ldr	r2, [r5, #8]
 80071e4:	68eb      	ldr	r3, [r5, #12]
 80071e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071e8:	7c2b      	ldrb	r3, [r5, #16]
 80071ea:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 80071ec:	4a76      	ldr	r2, [pc, #472]	@ (80073c8 <loadMenuTexts+0x12a0>)
 80071ee:	4b77      	ldr	r3, [pc, #476]	@ (80073cc <loadMenuTexts+0x12a4>)
 80071f0:	4614      	mov	r4, r2
 80071f2:	461d      	mov	r5, r3
 80071f4:	6828      	ldr	r0, [r5, #0]
 80071f6:	6869      	ldr	r1, [r5, #4]
 80071f8:	68aa      	ldr	r2, [r5, #8]
 80071fa:	68eb      	ldr	r3, [r5, #12]
 80071fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071fe:	7c2b      	ldrb	r3, [r5, #16]
 8007200:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8007202:	4a73      	ldr	r2, [pc, #460]	@ (80073d0 <loadMenuTexts+0x12a8>)
 8007204:	4b73      	ldr	r3, [pc, #460]	@ (80073d4 <loadMenuTexts+0x12ac>)
 8007206:	4614      	mov	r4, r2
 8007208:	461d      	mov	r5, r3
 800720a:	6828      	ldr	r0, [r5, #0]
 800720c:	6869      	ldr	r1, [r5, #4]
 800720e:	68aa      	ldr	r2, [r5, #8]
 8007210:	68eb      	ldr	r3, [r5, #12]
 8007212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007214:	7c2b      	ldrb	r3, [r5, #16]
 8007216:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8007218:	4a6f      	ldr	r2, [pc, #444]	@ (80073d8 <loadMenuTexts+0x12b0>)
 800721a:	4b70      	ldr	r3, [pc, #448]	@ (80073dc <loadMenuTexts+0x12b4>)
 800721c:	4614      	mov	r4, r2
 800721e:	461d      	mov	r5, r3
 8007220:	6828      	ldr	r0, [r5, #0]
 8007222:	6869      	ldr	r1, [r5, #4]
 8007224:	68aa      	ldr	r2, [r5, #8]
 8007226:	68eb      	ldr	r3, [r5, #12]
 8007228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800722a:	7c2b      	ldrb	r3, [r5, #16]
 800722c:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 800722e:	4a6c      	ldr	r2, [pc, #432]	@ (80073e0 <loadMenuTexts+0x12b8>)
 8007230:	4b6c      	ldr	r3, [pc, #432]	@ (80073e4 <loadMenuTexts+0x12bc>)
 8007232:	4614      	mov	r4, r2
 8007234:	461d      	mov	r5, r3
 8007236:	6828      	ldr	r0, [r5, #0]
 8007238:	6869      	ldr	r1, [r5, #4]
 800723a:	68aa      	ldr	r2, [r5, #8]
 800723c:	68eb      	ldr	r3, [r5, #12]
 800723e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007240:	7c2b      	ldrb	r3, [r5, #16]
 8007242:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8007244:	4a68      	ldr	r2, [pc, #416]	@ (80073e8 <loadMenuTexts+0x12c0>)
 8007246:	4b69      	ldr	r3, [pc, #420]	@ (80073ec <loadMenuTexts+0x12c4>)
 8007248:	4614      	mov	r4, r2
 800724a:	461d      	mov	r5, r3
 800724c:	6828      	ldr	r0, [r5, #0]
 800724e:	6869      	ldr	r1, [r5, #4]
 8007250:	68aa      	ldr	r2, [r5, #8]
 8007252:	68eb      	ldr	r3, [r5, #12]
 8007254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007256:	7c2b      	ldrb	r3, [r5, #16]
 8007258:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 800725a:	4a65      	ldr	r2, [pc, #404]	@ (80073f0 <loadMenuTexts+0x12c8>)
 800725c:	4b65      	ldr	r3, [pc, #404]	@ (80073f4 <loadMenuTexts+0x12cc>)
 800725e:	4614      	mov	r4, r2
 8007260:	461d      	mov	r5, r3
 8007262:	6828      	ldr	r0, [r5, #0]
 8007264:	6869      	ldr	r1, [r5, #4]
 8007266:	68aa      	ldr	r2, [r5, #8]
 8007268:	68eb      	ldr	r3, [r5, #12]
 800726a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800726c:	7c2b      	ldrb	r3, [r5, #16]
 800726e:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 8007270:	4a61      	ldr	r2, [pc, #388]	@ (80073f8 <loadMenuTexts+0x12d0>)
 8007272:	4b62      	ldr	r3, [pc, #392]	@ (80073fc <loadMenuTexts+0x12d4>)
 8007274:	4614      	mov	r4, r2
 8007276:	461d      	mov	r5, r3
 8007278:	6828      	ldr	r0, [r5, #0]
 800727a:	6869      	ldr	r1, [r5, #4]
 800727c:	68aa      	ldr	r2, [r5, #8]
 800727e:	68eb      	ldr	r3, [r5, #12]
 8007280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007282:	7c2b      	ldrb	r3, [r5, #16]
 8007284:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 8007286:	4a5e      	ldr	r2, [pc, #376]	@ (8007400 <loadMenuTexts+0x12d8>)
 8007288:	4b5e      	ldr	r3, [pc, #376]	@ (8007404 <loadMenuTexts+0x12dc>)
 800728a:	4614      	mov	r4, r2
 800728c:	461d      	mov	r5, r3
 800728e:	6828      	ldr	r0, [r5, #0]
 8007290:	6869      	ldr	r1, [r5, #4]
 8007292:	68aa      	ldr	r2, [r5, #8]
 8007294:	68eb      	ldr	r3, [r5, #12]
 8007296:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007298:	7c2b      	ldrb	r3, [r5, #16]
 800729a:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 800729c:	4a5a      	ldr	r2, [pc, #360]	@ (8007408 <loadMenuTexts+0x12e0>)
 800729e:	4b5b      	ldr	r3, [pc, #364]	@ (800740c <loadMenuTexts+0x12e4>)
 80072a0:	4614      	mov	r4, r2
 80072a2:	461d      	mov	r5, r3
 80072a4:	6828      	ldr	r0, [r5, #0]
 80072a6:	6869      	ldr	r1, [r5, #4]
 80072a8:	68aa      	ldr	r2, [r5, #8]
 80072aa:	68eb      	ldr	r3, [r5, #12]
 80072ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072ae:	7c2b      	ldrb	r3, [r5, #16]
 80072b0:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 80072b2:	4a57      	ldr	r2, [pc, #348]	@ (8007410 <loadMenuTexts+0x12e8>)
 80072b4:	4b57      	ldr	r3, [pc, #348]	@ (8007414 <loadMenuTexts+0x12ec>)
 80072b6:	4614      	mov	r4, r2
 80072b8:	461d      	mov	r5, r3
 80072ba:	6828      	ldr	r0, [r5, #0]
 80072bc:	6869      	ldr	r1, [r5, #4]
 80072be:	68aa      	ldr	r2, [r5, #8]
 80072c0:	68eb      	ldr	r3, [r5, #12]
 80072c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072c4:	7c2b      	ldrb	r3, [r5, #16]
 80072c6:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 80072c8:	4a53      	ldr	r2, [pc, #332]	@ (8007418 <loadMenuTexts+0x12f0>)
 80072ca:	4b54      	ldr	r3, [pc, #336]	@ (800741c <loadMenuTexts+0x12f4>)
 80072cc:	4614      	mov	r4, r2
 80072ce:	461d      	mov	r5, r3
 80072d0:	6828      	ldr	r0, [r5, #0]
 80072d2:	6869      	ldr	r1, [r5, #4]
 80072d4:	68aa      	ldr	r2, [r5, #8]
 80072d6:	68eb      	ldr	r3, [r5, #12]
 80072d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072da:	7c2b      	ldrb	r3, [r5, #16]
 80072dc:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 80072de:	4a50      	ldr	r2, [pc, #320]	@ (8007420 <loadMenuTexts+0x12f8>)
 80072e0:	4b50      	ldr	r3, [pc, #320]	@ (8007424 <loadMenuTexts+0x12fc>)
 80072e2:	4614      	mov	r4, r2
 80072e4:	461d      	mov	r5, r3
 80072e6:	6828      	ldr	r0, [r5, #0]
 80072e8:	6869      	ldr	r1, [r5, #4]
 80072ea:	68aa      	ldr	r2, [r5, #8]
 80072ec:	68eb      	ldr	r3, [r5, #12]
 80072ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072f0:	7c2b      	ldrb	r3, [r5, #16]
 80072f2:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 80072f4:	4a4c      	ldr	r2, [pc, #304]	@ (8007428 <loadMenuTexts+0x1300>)
 80072f6:	4b4d      	ldr	r3, [pc, #308]	@ (800742c <loadMenuTexts+0x1304>)
 80072f8:	4614      	mov	r4, r2
 80072fa:	461d      	mov	r5, r3
 80072fc:	6828      	ldr	r0, [r5, #0]
 80072fe:	6869      	ldr	r1, [r5, #4]
 8007300:	68aa      	ldr	r2, [r5, #8]
 8007302:	68eb      	ldr	r3, [r5, #12]
 8007304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007306:	7c2b      	ldrb	r3, [r5, #16]
 8007308:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 800730a:	4a49      	ldr	r2, [pc, #292]	@ (8007430 <loadMenuTexts+0x1308>)
 800730c:	4b49      	ldr	r3, [pc, #292]	@ (8007434 <loadMenuTexts+0x130c>)
 800730e:	4614      	mov	r4, r2
 8007310:	461d      	mov	r5, r3
 8007312:	e091      	b.n	8007438 <loadMenuTexts+0x1310>
 8007314:	200009d4 	.word	0x200009d4
 8007318:	20001504 	.word	0x20001504
 800731c:	200009e8 	.word	0x200009e8
 8007320:	20001518 	.word	0x20001518
 8007324:	200009fc 	.word	0x200009fc
 8007328:	2000152c 	.word	0x2000152c
 800732c:	20000a10 	.word	0x20000a10
 8007330:	20001540 	.word	0x20001540
 8007334:	20000a24 	.word	0x20000a24
 8007338:	20001554 	.word	0x20001554
 800733c:	20000a38 	.word	0x20000a38
 8007340:	20001568 	.word	0x20001568
 8007344:	20000a4c 	.word	0x20000a4c
 8007348:	2000157c 	.word	0x2000157c
 800734c:	20000a60 	.word	0x20000a60
 8007350:	20001590 	.word	0x20001590
 8007354:	20000a74 	.word	0x20000a74
 8007358:	200015a4 	.word	0x200015a4
 800735c:	20000a88 	.word	0x20000a88
 8007360:	200015b8 	.word	0x200015b8
 8007364:	20000a9c 	.word	0x20000a9c
 8007368:	200015cc 	.word	0x200015cc
 800736c:	20000ab0 	.word	0x20000ab0
 8007370:	200015e0 	.word	0x200015e0
 8007374:	20000ac4 	.word	0x20000ac4
 8007378:	200015f4 	.word	0x200015f4
 800737c:	20000ad8 	.word	0x20000ad8
 8007380:	20001608 	.word	0x20001608
 8007384:	20000aec 	.word	0x20000aec
 8007388:	2000161c 	.word	0x2000161c
 800738c:	20000b00 	.word	0x20000b00
 8007390:	20001630 	.word	0x20001630
 8007394:	20000b14 	.word	0x20000b14
 8007398:	20001644 	.word	0x20001644
 800739c:	20000b28 	.word	0x20000b28
 80073a0:	20001658 	.word	0x20001658
 80073a4:	20000b3c 	.word	0x20000b3c
 80073a8:	2000166c 	.word	0x2000166c
 80073ac:	20000b50 	.word	0x20000b50
 80073b0:	20001680 	.word	0x20001680
 80073b4:	20000b64 	.word	0x20000b64
 80073b8:	20001694 	.word	0x20001694
 80073bc:	20000b78 	.word	0x20000b78
 80073c0:	200016a8 	.word	0x200016a8
 80073c4:	20000b8c 	.word	0x20000b8c
 80073c8:	200016bc 	.word	0x200016bc
 80073cc:	20000ba0 	.word	0x20000ba0
 80073d0:	200016d0 	.word	0x200016d0
 80073d4:	20000bb4 	.word	0x20000bb4
 80073d8:	200016e4 	.word	0x200016e4
 80073dc:	20000bc8 	.word	0x20000bc8
 80073e0:	200016f8 	.word	0x200016f8
 80073e4:	20000bdc 	.word	0x20000bdc
 80073e8:	2000170c 	.word	0x2000170c
 80073ec:	20000bf0 	.word	0x20000bf0
 80073f0:	20001720 	.word	0x20001720
 80073f4:	20000c04 	.word	0x20000c04
 80073f8:	20001734 	.word	0x20001734
 80073fc:	20000c18 	.word	0x20000c18
 8007400:	20001748 	.word	0x20001748
 8007404:	20000c2c 	.word	0x20000c2c
 8007408:	2000175c 	.word	0x2000175c
 800740c:	20000c40 	.word	0x20000c40
 8007410:	20001770 	.word	0x20001770
 8007414:	20000c54 	.word	0x20000c54
 8007418:	20001784 	.word	0x20001784
 800741c:	20000c68 	.word	0x20000c68
 8007420:	20001798 	.word	0x20001798
 8007424:	20000cf4 	.word	0x20000cf4
 8007428:	200017ac 	.word	0x200017ac
 800742c:	20000d08 	.word	0x20000d08
 8007430:	200017c0 	.word	0x200017c0
 8007434:	20000ccc 	.word	0x20000ccc
 8007438:	6828      	ldr	r0, [r5, #0]
 800743a:	6869      	ldr	r1, [r5, #4]
 800743c:	68aa      	ldr	r2, [r5, #8]
 800743e:	68eb      	ldr	r3, [r5, #12]
 8007440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007442:	7c2b      	ldrb	r3, [r5, #16]
 8007444:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 8007446:	4a5b      	ldr	r2, [pc, #364]	@ (80075b4 <loadMenuTexts+0x148c>)
 8007448:	4b5b      	ldr	r3, [pc, #364]	@ (80075b8 <loadMenuTexts+0x1490>)
 800744a:	4614      	mov	r4, r2
 800744c:	461d      	mov	r5, r3
 800744e:	6828      	ldr	r0, [r5, #0]
 8007450:	6869      	ldr	r1, [r5, #4]
 8007452:	68aa      	ldr	r2, [r5, #8]
 8007454:	68eb      	ldr	r3, [r5, #12]
 8007456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007458:	7c2b      	ldrb	r3, [r5, #16]
 800745a:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 800745c:	4a57      	ldr	r2, [pc, #348]	@ (80075bc <loadMenuTexts+0x1494>)
 800745e:	4b58      	ldr	r3, [pc, #352]	@ (80075c0 <loadMenuTexts+0x1498>)
 8007460:	4614      	mov	r4, r2
 8007462:	461d      	mov	r5, r3
 8007464:	6828      	ldr	r0, [r5, #0]
 8007466:	6869      	ldr	r1, [r5, #4]
 8007468:	68aa      	ldr	r2, [r5, #8]
 800746a:	68eb      	ldr	r3, [r5, #12]
 800746c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800746e:	7c2b      	ldrb	r3, [r5, #16]
 8007470:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 8007472:	4a54      	ldr	r2, [pc, #336]	@ (80075c4 <loadMenuTexts+0x149c>)
 8007474:	4b54      	ldr	r3, [pc, #336]	@ (80075c8 <loadMenuTexts+0x14a0>)
 8007476:	4614      	mov	r4, r2
 8007478:	461d      	mov	r5, r3
 800747a:	6828      	ldr	r0, [r5, #0]
 800747c:	6869      	ldr	r1, [r5, #4]
 800747e:	68aa      	ldr	r2, [r5, #8]
 8007480:	68eb      	ldr	r3, [r5, #12]
 8007482:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007484:	7c2b      	ldrb	r3, [r5, #16]
 8007486:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 8007488:	4a50      	ldr	r2, [pc, #320]	@ (80075cc <loadMenuTexts+0x14a4>)
 800748a:	4b51      	ldr	r3, [pc, #324]	@ (80075d0 <loadMenuTexts+0x14a8>)
 800748c:	4614      	mov	r4, r2
 800748e:	461d      	mov	r5, r3
 8007490:	6828      	ldr	r0, [r5, #0]
 8007492:	6869      	ldr	r1, [r5, #4]
 8007494:	68aa      	ldr	r2, [r5, #8]
 8007496:	68eb      	ldr	r3, [r5, #12]
 8007498:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800749a:	7c2b      	ldrb	r3, [r5, #16]
 800749c:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 800749e:	4a4d      	ldr	r2, [pc, #308]	@ (80075d4 <loadMenuTexts+0x14ac>)
 80074a0:	4b4d      	ldr	r3, [pc, #308]	@ (80075d8 <loadMenuTexts+0x14b0>)
 80074a2:	4614      	mov	r4, r2
 80074a4:	461d      	mov	r5, r3
 80074a6:	6828      	ldr	r0, [r5, #0]
 80074a8:	6869      	ldr	r1, [r5, #4]
 80074aa:	68aa      	ldr	r2, [r5, #8]
 80074ac:	68eb      	ldr	r3, [r5, #12]
 80074ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074b0:	7c2b      	ldrb	r3, [r5, #16]
 80074b2:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 80074b4:	4a49      	ldr	r2, [pc, #292]	@ (80075dc <loadMenuTexts+0x14b4>)
 80074b6:	4b4a      	ldr	r3, [pc, #296]	@ (80075e0 <loadMenuTexts+0x14b8>)
 80074b8:	4614      	mov	r4, r2
 80074ba:	461d      	mov	r5, r3
 80074bc:	6828      	ldr	r0, [r5, #0]
 80074be:	6869      	ldr	r1, [r5, #4]
 80074c0:	68aa      	ldr	r2, [r5, #8]
 80074c2:	68eb      	ldr	r3, [r5, #12]
 80074c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074c6:	7c2b      	ldrb	r3, [r5, #16]
 80074c8:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 80074ca:	4a46      	ldr	r2, [pc, #280]	@ (80075e4 <loadMenuTexts+0x14bc>)
 80074cc:	4b46      	ldr	r3, [pc, #280]	@ (80075e8 <loadMenuTexts+0x14c0>)
 80074ce:	4614      	mov	r4, r2
 80074d0:	461d      	mov	r5, r3
 80074d2:	6828      	ldr	r0, [r5, #0]
 80074d4:	6869      	ldr	r1, [r5, #4]
 80074d6:	68aa      	ldr	r2, [r5, #8]
 80074d8:	68eb      	ldr	r3, [r5, #12]
 80074da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074dc:	7c2b      	ldrb	r3, [r5, #16]
 80074de:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 80074e0:	4a42      	ldr	r2, [pc, #264]	@ (80075ec <loadMenuTexts+0x14c4>)
 80074e2:	4b43      	ldr	r3, [pc, #268]	@ (80075f0 <loadMenuTexts+0x14c8>)
 80074e4:	4614      	mov	r4, r2
 80074e6:	461d      	mov	r5, r3
 80074e8:	6828      	ldr	r0, [r5, #0]
 80074ea:	6869      	ldr	r1, [r5, #4]
 80074ec:	68aa      	ldr	r2, [r5, #8]
 80074ee:	68eb      	ldr	r3, [r5, #12]
 80074f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80074f2:	7c2b      	ldrb	r3, [r5, #16]
 80074f4:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 80074f6:	4a3f      	ldr	r2, [pc, #252]	@ (80075f4 <loadMenuTexts+0x14cc>)
 80074f8:	4b3f      	ldr	r3, [pc, #252]	@ (80075f8 <loadMenuTexts+0x14d0>)
 80074fa:	4614      	mov	r4, r2
 80074fc:	461d      	mov	r5, r3
 80074fe:	6828      	ldr	r0, [r5, #0]
 8007500:	6869      	ldr	r1, [r5, #4]
 8007502:	68aa      	ldr	r2, [r5, #8]
 8007504:	68eb      	ldr	r3, [r5, #12]
 8007506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007508:	7c2b      	ldrb	r3, [r5, #16]
 800750a:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 800750c:	4a3b      	ldr	r2, [pc, #236]	@ (80075fc <loadMenuTexts+0x14d4>)
 800750e:	4b3c      	ldr	r3, [pc, #240]	@ (8007600 <loadMenuTexts+0x14d8>)
 8007510:	4614      	mov	r4, r2
 8007512:	461d      	mov	r5, r3
 8007514:	6828      	ldr	r0, [r5, #0]
 8007516:	6869      	ldr	r1, [r5, #4]
 8007518:	68aa      	ldr	r2, [r5, #8]
 800751a:	68eb      	ldr	r3, [r5, #12]
 800751c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800751e:	7c2b      	ldrb	r3, [r5, #16]
 8007520:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 8007522:	4a38      	ldr	r2, [pc, #224]	@ (8007604 <loadMenuTexts+0x14dc>)
 8007524:	4b38      	ldr	r3, [pc, #224]	@ (8007608 <loadMenuTexts+0x14e0>)
 8007526:	4614      	mov	r4, r2
 8007528:	461d      	mov	r5, r3
 800752a:	6828      	ldr	r0, [r5, #0]
 800752c:	6869      	ldr	r1, [r5, #4]
 800752e:	68aa      	ldr	r2, [r5, #8]
 8007530:	68eb      	ldr	r3, [r5, #12]
 8007532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007534:	7c2b      	ldrb	r3, [r5, #16]
 8007536:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 8007538:	4a34      	ldr	r2, [pc, #208]	@ (800760c <loadMenuTexts+0x14e4>)
 800753a:	4b35      	ldr	r3, [pc, #212]	@ (8007610 <loadMenuTexts+0x14e8>)
 800753c:	4614      	mov	r4, r2
 800753e:	461d      	mov	r5, r3
 8007540:	6828      	ldr	r0, [r5, #0]
 8007542:	6869      	ldr	r1, [r5, #4]
 8007544:	68aa      	ldr	r2, [r5, #8]
 8007546:	68eb      	ldr	r3, [r5, #12]
 8007548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800754a:	7c2b      	ldrb	r3, [r5, #16]
 800754c:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 800754e:	4a31      	ldr	r2, [pc, #196]	@ (8007614 <loadMenuTexts+0x14ec>)
 8007550:	4b31      	ldr	r3, [pc, #196]	@ (8007618 <loadMenuTexts+0x14f0>)
 8007552:	4614      	mov	r4, r2
 8007554:	461d      	mov	r5, r3
 8007556:	6828      	ldr	r0, [r5, #0]
 8007558:	6869      	ldr	r1, [r5, #4]
 800755a:	68aa      	ldr	r2, [r5, #8]
 800755c:	68eb      	ldr	r3, [r5, #12]
 800755e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007560:	7c2b      	ldrb	r3, [r5, #16]
 8007562:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 8007564:	4a2d      	ldr	r2, [pc, #180]	@ (800761c <loadMenuTexts+0x14f4>)
 8007566:	4b2e      	ldr	r3, [pc, #184]	@ (8007620 <loadMenuTexts+0x14f8>)
 8007568:	4614      	mov	r4, r2
 800756a:	461d      	mov	r5, r3
 800756c:	6828      	ldr	r0, [r5, #0]
 800756e:	6869      	ldr	r1, [r5, #4]
 8007570:	68aa      	ldr	r2, [r5, #8]
 8007572:	68eb      	ldr	r3, [r5, #12]
 8007574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007576:	7c2b      	ldrb	r3, [r5, #16]
 8007578:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 800757a:	4a2a      	ldr	r2, [pc, #168]	@ (8007624 <loadMenuTexts+0x14fc>)
 800757c:	4b2a      	ldr	r3, [pc, #168]	@ (8007628 <loadMenuTexts+0x1500>)
 800757e:	4614      	mov	r4, r2
 8007580:	461d      	mov	r5, r3
 8007582:	6828      	ldr	r0, [r5, #0]
 8007584:	6869      	ldr	r1, [r5, #4]
 8007586:	68aa      	ldr	r2, [r5, #8]
 8007588:	68eb      	ldr	r3, [r5, #12]
 800758a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800758c:	7c2b      	ldrb	r3, [r5, #16]
 800758e:	7023      	strb	r3, [r4, #0]
		memcpy(wifiConfirmationText, wifiConfirmationTextEN, 17);
 8007590:	4a26      	ldr	r2, [pc, #152]	@ (800762c <loadMenuTexts+0x1504>)
 8007592:	4b27      	ldr	r3, [pc, #156]	@ (8007630 <loadMenuTexts+0x1508>)
 8007594:	4614      	mov	r4, r2
 8007596:	461d      	mov	r5, r3
 8007598:	6828      	ldr	r0, [r5, #0]
 800759a:	6869      	ldr	r1, [r5, #4]
 800759c:	68aa      	ldr	r2, [r5, #8]
 800759e:	68eb      	ldr	r3, [r5, #12]
 80075a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075a2:	7c2b      	ldrb	r3, [r5, #16]
 80075a4:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 80075a6:	f000 f845 	bl	8007634 <menuVariableFinisher>
}
 80075aa:	bf00      	nop
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bdb0      	pop	{r4, r5, r7, pc}
 80075b2:	bf00      	nop
 80075b4:	200017d4 	.word	0x200017d4
 80075b8:	20000ce0 	.word	0x20000ce0
 80075bc:	200017e8 	.word	0x200017e8
 80075c0:	20000d44 	.word	0x20000d44
 80075c4:	200017fc 	.word	0x200017fc
 80075c8:	20000d58 	.word	0x20000d58
 80075cc:	20001810 	.word	0x20001810
 80075d0:	20000d94 	.word	0x20000d94
 80075d4:	20001824 	.word	0x20001824
 80075d8:	20000da8 	.word	0x20000da8
 80075dc:	20001838 	.word	0x20001838
 80075e0:	20000de4 	.word	0x20000de4
 80075e4:	2000184c 	.word	0x2000184c
 80075e8:	20000df8 	.word	0x20000df8
 80075ec:	20001860 	.word	0x20001860
 80075f0:	20000e20 	.word	0x20000e20
 80075f4:	20001874 	.word	0x20001874
 80075f8:	20000e48 	.word	0x20000e48
 80075fc:	20001888 	.word	0x20001888
 8007600:	20000e70 	.word	0x20000e70
 8007604:	2000189c 	.word	0x2000189c
 8007608:	20000e98 	.word	0x20000e98
 800760c:	200018b0 	.word	0x200018b0
 8007610:	20000ec0 	.word	0x20000ec0
 8007614:	200018c4 	.word	0x200018c4
 8007618:	20000ee8 	.word	0x20000ee8
 800761c:	200018d8 	.word	0x200018d8
 8007620:	20000f10 	.word	0x20000f10
 8007624:	200018ec 	.word	0x200018ec
 8007628:	20000f38 	.word	0x20000f38
 800762c:	20001900 	.word	0x20001900
 8007630:	20000f60 	.word	0x20000f60

08007634 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 8007634:	b480      	push	{r7}
 8007636:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 8007638:	4b99      	ldr	r3, [pc, #612]	@ (80078a0 <menuVariableFinisher+0x26c>)
 800763a:	2200      	movs	r2, #0
 800763c:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 800763e:	4b99      	ldr	r3, [pc, #612]	@ (80078a4 <menuVariableFinisher+0x270>)
 8007640:	2200      	movs	r2, #0
 8007642:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 8007644:	4b98      	ldr	r3, [pc, #608]	@ (80078a8 <menuVariableFinisher+0x274>)
 8007646:	2200      	movs	r2, #0
 8007648:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 800764a:	4b98      	ldr	r3, [pc, #608]	@ (80078ac <menuVariableFinisher+0x278>)
 800764c:	2200      	movs	r2, #0
 800764e:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 8007650:	4b97      	ldr	r3, [pc, #604]	@ (80078b0 <menuVariableFinisher+0x27c>)
 8007652:	2200      	movs	r2, #0
 8007654:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 8007656:	4b97      	ldr	r3, [pc, #604]	@ (80078b4 <menuVariableFinisher+0x280>)
 8007658:	2200      	movs	r2, #0
 800765a:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 800765c:	4b96      	ldr	r3, [pc, #600]	@ (80078b8 <menuVariableFinisher+0x284>)
 800765e:	2200      	movs	r2, #0
 8007660:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 8007662:	4b96      	ldr	r3, [pc, #600]	@ (80078bc <menuVariableFinisher+0x288>)
 8007664:	2200      	movs	r2, #0
 8007666:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 8007668:	4b95      	ldr	r3, [pc, #596]	@ (80078c0 <menuVariableFinisher+0x28c>)
 800766a:	2200      	movs	r2, #0
 800766c:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 800766e:	4b95      	ldr	r3, [pc, #596]	@ (80078c4 <menuVariableFinisher+0x290>)
 8007670:	2200      	movs	r2, #0
 8007672:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 8007674:	4b94      	ldr	r3, [pc, #592]	@ (80078c8 <menuVariableFinisher+0x294>)
 8007676:	2200      	movs	r2, #0
 8007678:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 800767a:	4b94      	ldr	r3, [pc, #592]	@ (80078cc <menuVariableFinisher+0x298>)
 800767c:	2200      	movs	r2, #0
 800767e:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 8007680:	4b93      	ldr	r3, [pc, #588]	@ (80078d0 <menuVariableFinisher+0x29c>)
 8007682:	2200      	movs	r2, #0
 8007684:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 8007686:	4b93      	ldr	r3, [pc, #588]	@ (80078d4 <menuVariableFinisher+0x2a0>)
 8007688:	2200      	movs	r2, #0
 800768a:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 800768c:	4b92      	ldr	r3, [pc, #584]	@ (80078d8 <menuVariableFinisher+0x2a4>)
 800768e:	2200      	movs	r2, #0
 8007690:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 8007692:	4b92      	ldr	r3, [pc, #584]	@ (80078dc <menuVariableFinisher+0x2a8>)
 8007694:	2200      	movs	r2, #0
 8007696:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 8007698:	4b91      	ldr	r3, [pc, #580]	@ (80078e0 <menuVariableFinisher+0x2ac>)
 800769a:	2200      	movs	r2, #0
 800769c:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 800769e:	4b91      	ldr	r3, [pc, #580]	@ (80078e4 <menuVariableFinisher+0x2b0>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 80076a4:	4b90      	ldr	r3, [pc, #576]	@ (80078e8 <menuVariableFinisher+0x2b4>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 80076aa:	4b90      	ldr	r3, [pc, #576]	@ (80078ec <menuVariableFinisher+0x2b8>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 80076b0:	4b8f      	ldr	r3, [pc, #572]	@ (80078f0 <menuVariableFinisher+0x2bc>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 80076b6:	4b8f      	ldr	r3, [pc, #572]	@ (80078f4 <menuVariableFinisher+0x2c0>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 80076bc:	4b8e      	ldr	r3, [pc, #568]	@ (80078f8 <menuVariableFinisher+0x2c4>)
 80076be:	2200      	movs	r2, #0
 80076c0:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 80076c2:	4b8e      	ldr	r3, [pc, #568]	@ (80078fc <menuVariableFinisher+0x2c8>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 80076c8:	4b8d      	ldr	r3, [pc, #564]	@ (8007900 <menuVariableFinisher+0x2cc>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 80076ce:	4b8d      	ldr	r3, [pc, #564]	@ (8007904 <menuVariableFinisher+0x2d0>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 80076d4:	4b8c      	ldr	r3, [pc, #560]	@ (8007908 <menuVariableFinisher+0x2d4>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 80076da:	4b8c      	ldr	r3, [pc, #560]	@ (800790c <menuVariableFinisher+0x2d8>)
 80076dc:	2200      	movs	r2, #0
 80076de:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 80076e0:	4b8b      	ldr	r3, [pc, #556]	@ (8007910 <menuVariableFinisher+0x2dc>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 80076e6:	4b8b      	ldr	r3, [pc, #556]	@ (8007914 <menuVariableFinisher+0x2e0>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 80076ec:	4b8a      	ldr	r3, [pc, #552]	@ (8007918 <menuVariableFinisher+0x2e4>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 80076f2:	4b8a      	ldr	r3, [pc, #552]	@ (800791c <menuVariableFinisher+0x2e8>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 80076f8:	4b89      	ldr	r3, [pc, #548]	@ (8007920 <menuVariableFinisher+0x2ec>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 80076fe:	4b89      	ldr	r3, [pc, #548]	@ (8007924 <menuVariableFinisher+0x2f0>)
 8007700:	2200      	movs	r2, #0
 8007702:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 8007704:	4b88      	ldr	r3, [pc, #544]	@ (8007928 <menuVariableFinisher+0x2f4>)
 8007706:	2200      	movs	r2, #0
 8007708:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 800770a:	4b88      	ldr	r3, [pc, #544]	@ (800792c <menuVariableFinisher+0x2f8>)
 800770c:	2200      	movs	r2, #0
 800770e:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 8007710:	4b87      	ldr	r3, [pc, #540]	@ (8007930 <menuVariableFinisher+0x2fc>)
 8007712:	2200      	movs	r2, #0
 8007714:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 8007716:	4b87      	ldr	r3, [pc, #540]	@ (8007934 <menuVariableFinisher+0x300>)
 8007718:	2200      	movs	r2, #0
 800771a:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 800771c:	4b86      	ldr	r3, [pc, #536]	@ (8007938 <menuVariableFinisher+0x304>)
 800771e:	2200      	movs	r2, #0
 8007720:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 8007722:	4b86      	ldr	r3, [pc, #536]	@ (800793c <menuVariableFinisher+0x308>)
 8007724:	2200      	movs	r2, #0
 8007726:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 8007728:	4b85      	ldr	r3, [pc, #532]	@ (8007940 <menuVariableFinisher+0x30c>)
 800772a:	2200      	movs	r2, #0
 800772c:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 800772e:	4b85      	ldr	r3, [pc, #532]	@ (8007944 <menuVariableFinisher+0x310>)
 8007730:	2200      	movs	r2, #0
 8007732:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 8007734:	4b84      	ldr	r3, [pc, #528]	@ (8007948 <menuVariableFinisher+0x314>)
 8007736:	2200      	movs	r2, #0
 8007738:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 800773a:	4b84      	ldr	r3, [pc, #528]	@ (800794c <menuVariableFinisher+0x318>)
 800773c:	2200      	movs	r2, #0
 800773e:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 8007740:	4b83      	ldr	r3, [pc, #524]	@ (8007950 <menuVariableFinisher+0x31c>)
 8007742:	2200      	movs	r2, #0
 8007744:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 8007746:	4b83      	ldr	r3, [pc, #524]	@ (8007954 <menuVariableFinisher+0x320>)
 8007748:	2200      	movs	r2, #0
 800774a:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 800774c:	4b82      	ldr	r3, [pc, #520]	@ (8007958 <menuVariableFinisher+0x324>)
 800774e:	2200      	movs	r2, #0
 8007750:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 8007752:	4b82      	ldr	r3, [pc, #520]	@ (800795c <menuVariableFinisher+0x328>)
 8007754:	2200      	movs	r2, #0
 8007756:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 8007758:	4b81      	ldr	r3, [pc, #516]	@ (8007960 <menuVariableFinisher+0x32c>)
 800775a:	2200      	movs	r2, #0
 800775c:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 800775e:	4b81      	ldr	r3, [pc, #516]	@ (8007964 <menuVariableFinisher+0x330>)
 8007760:	2200      	movs	r2, #0
 8007762:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8007764:	4b80      	ldr	r3, [pc, #512]	@ (8007968 <menuVariableFinisher+0x334>)
 8007766:	2200      	movs	r2, #0
 8007768:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 800776a:	4b80      	ldr	r3, [pc, #512]	@ (800796c <menuVariableFinisher+0x338>)
 800776c:	2200      	movs	r2, #0
 800776e:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 8007770:	4b7f      	ldr	r3, [pc, #508]	@ (8007970 <menuVariableFinisher+0x33c>)
 8007772:	2200      	movs	r2, #0
 8007774:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 8007776:	4b7f      	ldr	r3, [pc, #508]	@ (8007974 <menuVariableFinisher+0x340>)
 8007778:	2200      	movs	r2, #0
 800777a:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 800777c:	4b7e      	ldr	r3, [pc, #504]	@ (8007978 <menuVariableFinisher+0x344>)
 800777e:	2200      	movs	r2, #0
 8007780:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 8007782:	4b7e      	ldr	r3, [pc, #504]	@ (800797c <menuVariableFinisher+0x348>)
 8007784:	2200      	movs	r2, #0
 8007786:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 8007788:	4b7d      	ldr	r3, [pc, #500]	@ (8007980 <menuVariableFinisher+0x34c>)
 800778a:	2200      	movs	r2, #0
 800778c:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 800778e:	4b7d      	ldr	r3, [pc, #500]	@ (8007984 <menuVariableFinisher+0x350>)
 8007790:	2200      	movs	r2, #0
 8007792:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8007794:	4b7c      	ldr	r3, [pc, #496]	@ (8007988 <menuVariableFinisher+0x354>)
 8007796:	2200      	movs	r2, #0
 8007798:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 800779a:	4b7c      	ldr	r3, [pc, #496]	@ (800798c <menuVariableFinisher+0x358>)
 800779c:	2200      	movs	r2, #0
 800779e:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 80077a0:	4b7b      	ldr	r3, [pc, #492]	@ (8007990 <menuVariableFinisher+0x35c>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 80077a6:	4b7b      	ldr	r3, [pc, #492]	@ (8007994 <menuVariableFinisher+0x360>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 80077ac:	4b7a      	ldr	r3, [pc, #488]	@ (8007998 <menuVariableFinisher+0x364>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 80077b2:	4b7a      	ldr	r3, [pc, #488]	@ (800799c <menuVariableFinisher+0x368>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 80077b8:	4b79      	ldr	r3, [pc, #484]	@ (80079a0 <menuVariableFinisher+0x36c>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 80077be:	4b79      	ldr	r3, [pc, #484]	@ (80079a4 <menuVariableFinisher+0x370>)
 80077c0:	2200      	movs	r2, #0
 80077c2:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 80077c4:	4b78      	ldr	r3, [pc, #480]	@ (80079a8 <menuVariableFinisher+0x374>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 80077ca:	4b78      	ldr	r3, [pc, #480]	@ (80079ac <menuVariableFinisher+0x378>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 80077d0:	4b77      	ldr	r3, [pc, #476]	@ (80079b0 <menuVariableFinisher+0x37c>)
 80077d2:	2200      	movs	r2, #0
 80077d4:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 80077d6:	4b77      	ldr	r3, [pc, #476]	@ (80079b4 <menuVariableFinisher+0x380>)
 80077d8:	2200      	movs	r2, #0
 80077da:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 80077dc:	4b76      	ldr	r3, [pc, #472]	@ (80079b8 <menuVariableFinisher+0x384>)
 80077de:	2200      	movs	r2, #0
 80077e0:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 80077e2:	4b76      	ldr	r3, [pc, #472]	@ (80079bc <menuVariableFinisher+0x388>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 80077e8:	4b75      	ldr	r3, [pc, #468]	@ (80079c0 <menuVariableFinisher+0x38c>)
 80077ea:	2200      	movs	r2, #0
 80077ec:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 80077ee:	4b75      	ldr	r3, [pc, #468]	@ (80079c4 <menuVariableFinisher+0x390>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 80077f4:	4b74      	ldr	r3, [pc, #464]	@ (80079c8 <menuVariableFinisher+0x394>)
 80077f6:	2200      	movs	r2, #0
 80077f8:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 80077fa:	4b74      	ldr	r3, [pc, #464]	@ (80079cc <menuVariableFinisher+0x398>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 8007800:	4b73      	ldr	r3, [pc, #460]	@ (80079d0 <menuVariableFinisher+0x39c>)
 8007802:	2200      	movs	r2, #0
 8007804:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 8007806:	4b73      	ldr	r3, [pc, #460]	@ (80079d4 <menuVariableFinisher+0x3a0>)
 8007808:	2200      	movs	r2, #0
 800780a:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 800780c:	4b72      	ldr	r3, [pc, #456]	@ (80079d8 <menuVariableFinisher+0x3a4>)
 800780e:	2200      	movs	r2, #0
 8007810:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 8007812:	4b72      	ldr	r3, [pc, #456]	@ (80079dc <menuVariableFinisher+0x3a8>)
 8007814:	2200      	movs	r2, #0
 8007816:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 8007818:	4b71      	ldr	r3, [pc, #452]	@ (80079e0 <menuVariableFinisher+0x3ac>)
 800781a:	2200      	movs	r2, #0
 800781c:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 800781e:	4b71      	ldr	r3, [pc, #452]	@ (80079e4 <menuVariableFinisher+0x3b0>)
 8007820:	2200      	movs	r2, #0
 8007822:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 8007824:	4b70      	ldr	r3, [pc, #448]	@ (80079e8 <menuVariableFinisher+0x3b4>)
 8007826:	2200      	movs	r2, #0
 8007828:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 800782a:	4b70      	ldr	r3, [pc, #448]	@ (80079ec <menuVariableFinisher+0x3b8>)
 800782c:	2200      	movs	r2, #0
 800782e:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 8007830:	4b6f      	ldr	r3, [pc, #444]	@ (80079f0 <menuVariableFinisher+0x3bc>)
 8007832:	2200      	movs	r2, #0
 8007834:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 8007836:	4b6f      	ldr	r3, [pc, #444]	@ (80079f4 <menuVariableFinisher+0x3c0>)
 8007838:	2200      	movs	r2, #0
 800783a:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 800783c:	4b6e      	ldr	r3, [pc, #440]	@ (80079f8 <menuVariableFinisher+0x3c4>)
 800783e:	2200      	movs	r2, #0
 8007840:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 8007842:	4b6e      	ldr	r3, [pc, #440]	@ (80079fc <menuVariableFinisher+0x3c8>)
 8007844:	2200      	movs	r2, #0
 8007846:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 8007848:	4b6d      	ldr	r3, [pc, #436]	@ (8007a00 <menuVariableFinisher+0x3cc>)
 800784a:	2200      	movs	r2, #0
 800784c:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 800784e:	4b6d      	ldr	r3, [pc, #436]	@ (8007a04 <menuVariableFinisher+0x3d0>)
 8007850:	2200      	movs	r2, #0
 8007852:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 8007854:	4b6c      	ldr	r3, [pc, #432]	@ (8007a08 <menuVariableFinisher+0x3d4>)
 8007856:	2200      	movs	r2, #0
 8007858:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 800785a:	4b6c      	ldr	r3, [pc, #432]	@ (8007a0c <menuVariableFinisher+0x3d8>)
 800785c:	2200      	movs	r2, #0
 800785e:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8007860:	4b6b      	ldr	r3, [pc, #428]	@ (8007a10 <menuVariableFinisher+0x3dc>)
 8007862:	2200      	movs	r2, #0
 8007864:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 8007866:	4b6b      	ldr	r3, [pc, #428]	@ (8007a14 <menuVariableFinisher+0x3e0>)
 8007868:	2200      	movs	r2, #0
 800786a:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 800786c:	4b6a      	ldr	r3, [pc, #424]	@ (8007a18 <menuVariableFinisher+0x3e4>)
 800786e:	2200      	movs	r2, #0
 8007870:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 8007872:	4b6a      	ldr	r3, [pc, #424]	@ (8007a1c <menuVariableFinisher+0x3e8>)
 8007874:	2200      	movs	r2, #0
 8007876:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 8007878:	4b69      	ldr	r3, [pc, #420]	@ (8007a20 <menuVariableFinisher+0x3ec>)
 800787a:	2200      	movs	r2, #0
 800787c:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 800787e:	4b69      	ldr	r3, [pc, #420]	@ (8007a24 <menuVariableFinisher+0x3f0>)
 8007880:	2200      	movs	r2, #0
 8007882:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 8007884:	4b68      	ldr	r3, [pc, #416]	@ (8007a28 <menuVariableFinisher+0x3f4>)
 8007886:	2200      	movs	r2, #0
 8007888:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 800788a:	4b68      	ldr	r3, [pc, #416]	@ (8007a2c <menuVariableFinisher+0x3f8>)
 800788c:	2200      	movs	r2, #0
 800788e:	741a      	strb	r2, [r3, #16]

	wifiConfirmationText[16] = '\0';
 8007890:	4b67      	ldr	r3, [pc, #412]	@ (8007a30 <menuVariableFinisher+0x3fc>)
 8007892:	2200      	movs	r2, #0
 8007894:	741a      	strb	r2, [r3, #16]
}
 8007896:	bf00      	nop
 8007898:	46bd      	mov	sp, r7
 800789a:	bc80      	pop	{r7}
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	2000009c 	.word	0x2000009c
 80078a4:	200000b0 	.word	0x200000b0
 80078a8:	200000c4 	.word	0x200000c4
 80078ac:	200000d8 	.word	0x200000d8
 80078b0:	200000ec 	.word	0x200000ec
 80078b4:	20000100 	.word	0x20000100
 80078b8:	20000114 	.word	0x20000114
 80078bc:	20000128 	.word	0x20000128
 80078c0:	2000013c 	.word	0x2000013c
 80078c4:	20000150 	.word	0x20000150
 80078c8:	20000164 	.word	0x20000164
 80078cc:	20000178 	.word	0x20000178
 80078d0:	20001220 	.word	0x20001220
 80078d4:	20001234 	.word	0x20001234
 80078d8:	20001248 	.word	0x20001248
 80078dc:	2000125c 	.word	0x2000125c
 80078e0:	20001270 	.word	0x20001270
 80078e4:	20001284 	.word	0x20001284
 80078e8:	20001298 	.word	0x20001298
 80078ec:	200012ac 	.word	0x200012ac
 80078f0:	200012c0 	.word	0x200012c0
 80078f4:	200012d4 	.word	0x200012d4
 80078f8:	200012e8 	.word	0x200012e8
 80078fc:	200012fc 	.word	0x200012fc
 8007900:	20001310 	.word	0x20001310
 8007904:	20001324 	.word	0x20001324
 8007908:	20001338 	.word	0x20001338
 800790c:	2000134c 	.word	0x2000134c
 8007910:	20001360 	.word	0x20001360
 8007914:	20001374 	.word	0x20001374
 8007918:	20001388 	.word	0x20001388
 800791c:	2000139c 	.word	0x2000139c
 8007920:	200013b0 	.word	0x200013b0
 8007924:	200013c4 	.word	0x200013c4
 8007928:	200013d8 	.word	0x200013d8
 800792c:	200013ec 	.word	0x200013ec
 8007930:	20001400 	.word	0x20001400
 8007934:	20001414 	.word	0x20001414
 8007938:	20001428 	.word	0x20001428
 800793c:	2000143c 	.word	0x2000143c
 8007940:	20001450 	.word	0x20001450
 8007944:	20001464 	.word	0x20001464
 8007948:	20001478 	.word	0x20001478
 800794c:	2000148c 	.word	0x2000148c
 8007950:	200014a0 	.word	0x200014a0
 8007954:	200014b4 	.word	0x200014b4
 8007958:	200014c8 	.word	0x200014c8
 800795c:	200014dc 	.word	0x200014dc
 8007960:	200014f0 	.word	0x200014f0
 8007964:	20001504 	.word	0x20001504
 8007968:	20001518 	.word	0x20001518
 800796c:	2000152c 	.word	0x2000152c
 8007970:	20001540 	.word	0x20001540
 8007974:	20001554 	.word	0x20001554
 8007978:	20001568 	.word	0x20001568
 800797c:	2000157c 	.word	0x2000157c
 8007980:	20001590 	.word	0x20001590
 8007984:	200015a4 	.word	0x200015a4
 8007988:	200015b8 	.word	0x200015b8
 800798c:	200015cc 	.word	0x200015cc
 8007990:	200015e0 	.word	0x200015e0
 8007994:	200015f4 	.word	0x200015f4
 8007998:	20001608 	.word	0x20001608
 800799c:	2000161c 	.word	0x2000161c
 80079a0:	20001630 	.word	0x20001630
 80079a4:	20001644 	.word	0x20001644
 80079a8:	20001658 	.word	0x20001658
 80079ac:	2000166c 	.word	0x2000166c
 80079b0:	20001680 	.word	0x20001680
 80079b4:	20001694 	.word	0x20001694
 80079b8:	200016a8 	.word	0x200016a8
 80079bc:	200016bc 	.word	0x200016bc
 80079c0:	200016d0 	.word	0x200016d0
 80079c4:	200016e4 	.word	0x200016e4
 80079c8:	200016f8 	.word	0x200016f8
 80079cc:	2000170c 	.word	0x2000170c
 80079d0:	20001720 	.word	0x20001720
 80079d4:	20001734 	.word	0x20001734
 80079d8:	20001748 	.word	0x20001748
 80079dc:	2000175c 	.word	0x2000175c
 80079e0:	20001770 	.word	0x20001770
 80079e4:	20001784 	.word	0x20001784
 80079e8:	20001798 	.word	0x20001798
 80079ec:	200017ac 	.word	0x200017ac
 80079f0:	200017c0 	.word	0x200017c0
 80079f4:	200017d4 	.word	0x200017d4
 80079f8:	200017e8 	.word	0x200017e8
 80079fc:	200017fc 	.word	0x200017fc
 8007a00:	20001810 	.word	0x20001810
 8007a04:	20001824 	.word	0x20001824
 8007a08:	20001838 	.word	0x20001838
 8007a0c:	2000184c 	.word	0x2000184c
 8007a10:	20001860 	.word	0x20001860
 8007a14:	20001874 	.word	0x20001874
 8007a18:	20001888 	.word	0x20001888
 8007a1c:	2000189c 	.word	0x2000189c
 8007a20:	200018b0 	.word	0x200018b0
 8007a24:	200018c4 	.word	0x200018c4
 8007a28:	200018d8 	.word	0x200018d8
 8007a2c:	200018ec 	.word	0x200018ec
 8007a30:	20001900 	.word	0x20001900

08007a34 <resetMenuTexts>:

void resetMenuTexts() {
 8007a34:	b580      	push	{r7, lr}
 8007a36:	af00      	add	r7, sp, #0
    memset(menuyeGirildiText, 0, 17);
 8007a38:	2211      	movs	r2, #17
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	48d3      	ldr	r0, [pc, #844]	@ (8007d8c <resetMenuTexts+0x358>)
 8007a3e:	f005 ff35 	bl	800d8ac <memset>
    memset(ayarlarText, 0, 17);
 8007a42:	2211      	movs	r2, #17
 8007a44:	2100      	movs	r1, #0
 8007a46:	48d2      	ldr	r0, [pc, #840]	@ (8007d90 <resetMenuTexts+0x35c>)
 8007a48:	f005 ff30 	bl	800d8ac <memset>
    memset(hataKayitListText, 0, 17);
 8007a4c:	2211      	movs	r2, #17
 8007a4e:	2100      	movs	r1, #0
 8007a50:	48d0      	ldr	r0, [pc, #832]	@ (8007d94 <resetMenuTexts+0x360>)
 8007a52:	f005 ff2b 	bl	800d8ac <memset>
    memset(birHataKoduText, 0, 17);
 8007a56:	2211      	movs	r2, #17
 8007a58:	2100      	movs	r1, #0
 8007a5a:	48cf      	ldr	r0, [pc, #828]	@ (8007d98 <resetMenuTexts+0x364>)
 8007a5c:	f005 ff26 	bl	800d8ac <memset>
    memset(ikiHataKoduText, 0, 17);
 8007a60:	2211      	movs	r2, #17
 8007a62:	2100      	movs	r1, #0
 8007a64:	48cd      	ldr	r0, [pc, #820]	@ (8007d9c <resetMenuTexts+0x368>)
 8007a66:	f005 ff21 	bl	800d8ac <memset>
    memset(ucHataKoduText, 0, 17);
 8007a6a:	2211      	movs	r2, #17
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	48cc      	ldr	r0, [pc, #816]	@ (8007da0 <resetMenuTexts+0x36c>)
 8007a70:	f005 ff1c 	bl	800d8ac <memset>
    memset(dortHataKoduText, 0, 17);
 8007a74:	2211      	movs	r2, #17
 8007a76:	2100      	movs	r1, #0
 8007a78:	48ca      	ldr	r0, [pc, #808]	@ (8007da4 <resetMenuTexts+0x370>)
 8007a7a:	f005 ff17 	bl	800d8ac <memset>
    memset(besHataKoduText, 0, 17);
 8007a7e:	2211      	movs	r2, #17
 8007a80:	2100      	movs	r1, #0
 8007a82:	48c9      	ldr	r0, [pc, #804]	@ (8007da8 <resetMenuTexts+0x374>)
 8007a84:	f005 ff12 	bl	800d8ac <memset>
    memset(altiHataKoduText, 0, 17);
 8007a88:	2211      	movs	r2, #17
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	48c7      	ldr	r0, [pc, #796]	@ (8007dac <resetMenuTexts+0x378>)
 8007a8e:	f005 ff0d 	bl	800d8ac <memset>
    memset(yediHataKoduText, 0, 17);
 8007a92:	2211      	movs	r2, #17
 8007a94:	2100      	movs	r1, #0
 8007a96:	48c6      	ldr	r0, [pc, #792]	@ (8007db0 <resetMenuTexts+0x37c>)
 8007a98:	f005 ff08 	bl	800d8ac <memset>
    memset(sekizHataKoduText, 0, 17);
 8007a9c:	2211      	movs	r2, #17
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	48c4      	ldr	r0, [pc, #784]	@ (8007db4 <resetMenuTexts+0x380>)
 8007aa2:	f005 ff03 	bl	800d8ac <memset>
    memset(dokuzHataKoduText, 0, 17);
 8007aa6:	2211      	movs	r2, #17
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	48c3      	ldr	r0, [pc, #780]	@ (8007db8 <resetMenuTexts+0x384>)
 8007aac:	f005 fefe 	bl	800d8ac <memset>
    memset(onHataKoduText, 0, 17);
 8007ab0:	2211      	movs	r2, #17
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	48c1      	ldr	r0, [pc, #772]	@ (8007dbc <resetMenuTexts+0x388>)
 8007ab6:	f005 fef9 	bl	800d8ac <memset>
    memset(silmekIcinText, 0, 17);
 8007aba:	2211      	movs	r2, #17
 8007abc:	2100      	movs	r1, #0
 8007abe:	48c0      	ldr	r0, [pc, #768]	@ (8007dc0 <resetMenuTexts+0x38c>)
 8007ac0:	f005 fef4 	bl	800d8ac <memset>
    memset(calismaSekliText, 0, 17);
 8007ac4:	2211      	movs	r2, #17
 8007ac6:	2100      	movs	r1, #0
 8007ac8:	48be      	ldr	r0, [pc, #760]	@ (8007dc4 <resetMenuTexts+0x390>)
 8007aca:	f005 feef 	bl	800d8ac <memset>
    memset(devirmeYuruyusText, 0, 17);
 8007ace:	2211      	movs	r2, #17
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	48bd      	ldr	r0, [pc, #756]	@ (8007dc8 <resetMenuTexts+0x394>)
 8007ad4:	f005 feea 	bl	800d8ac <memset>
    memset(bastikcaCalisanText, 0, 17);
 8007ad8:	2211      	movs	r2, #17
 8007ada:	2100      	movs	r1, #0
 8007adc:	48bb      	ldr	r0, [pc, #748]	@ (8007dcc <resetMenuTexts+0x398>)
 8007ade:	f005 fee5 	bl	800d8ac <memset>
    memset(basGonderText, 0, 17);
 8007ae2:	2211      	movs	r2, #17
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	48ba      	ldr	r0, [pc, #744]	@ (8007dd0 <resetMenuTexts+0x39c>)
 8007ae8:	f005 fee0 	bl	800d8ac <memset>
    memset(emniyetCercevesiText, 0, 17);
 8007aec:	2211      	movs	r2, #17
 8007aee:	2100      	movs	r1, #0
 8007af0:	48b8      	ldr	r0, [pc, #736]	@ (8007dd4 <resetMenuTexts+0x3a0>)
 8007af2:	f005 fedb 	bl	800d8ac <memset>
    memset(pasifText, 0, 17);
 8007af6:	2211      	movs	r2, #17
 8007af8:	2100      	movs	r1, #0
 8007afa:	48b7      	ldr	r0, [pc, #732]	@ (8007dd8 <resetMenuTexts+0x3a4>)
 8007afc:	f005 fed6 	bl	800d8ac <memset>
    memset(aktifText, 0, 17);
 8007b00:	2211      	movs	r2, #17
 8007b02:	2100      	movs	r1, #0
 8007b04:	48b5      	ldr	r0, [pc, #724]	@ (8007ddc <resetMenuTexts+0x3a8>)
 8007b06:	f005 fed1 	bl	800d8ac <memset>
    memset(yavaslamaLimitText, 0, 17);
 8007b0a:	2211      	movs	r2, #17
 8007b0c:	2100      	movs	r1, #0
 8007b0e:	48b4      	ldr	r0, [pc, #720]	@ (8007de0 <resetMenuTexts+0x3ac>)
 8007b10:	f005 fecc 	bl	800d8ac <memset>
    memset(altLimitText, 0, 17);
 8007b14:	2211      	movs	r2, #17
 8007b16:	2100      	movs	r1, #0
 8007b18:	48b2      	ldr	r0, [pc, #712]	@ (8007de4 <resetMenuTexts+0x3b0>)
 8007b1a:	f005 fec7 	bl	800d8ac <memset>
    memset(basincSalteriText, 0, 17);
 8007b1e:	2211      	movs	r2, #17
 8007b20:	2100      	movs	r1, #0
 8007b22:	48b1      	ldr	r0, [pc, #708]	@ (8007de8 <resetMenuTexts+0x3b4>)
 8007b24:	f005 fec2 	bl	800d8ac <memset>
    memset(kapiSecimleriText, 0, 17);
 8007b28:	2211      	movs	r2, #17
 8007b2a:	2100      	movs	r1, #0
 8007b2c:	48af      	ldr	r0, [pc, #700]	@ (8007dec <resetMenuTexts+0x3b8>)
 8007b2e:	f005 febd 	bl	800d8ac <memset>
    memset(katKapisiAktifText, 0, 17);
 8007b32:	2211      	movs	r2, #17
 8007b34:	2100      	movs	r1, #0
 8007b36:	48ae      	ldr	r0, [pc, #696]	@ (8007df0 <resetMenuTexts+0x3bc>)
 8007b38:	f005 feb8 	bl	800d8ac <memset>
    memset(tablaKapiAktifText, 0, 17);
 8007b3c:	2211      	movs	r2, #17
 8007b3e:	2100      	movs	r1, #0
 8007b40:	48ac      	ldr	r0, [pc, #688]	@ (8007df4 <resetMenuTexts+0x3c0>)
 8007b42:	f005 feb3 	bl	800d8ac <memset>
    memset(katArtiTablaAktifText, 0, 17);
 8007b46:	2211      	movs	r2, #17
 8007b48:	2100      	movs	r1, #0
 8007b4a:	48ab      	ldr	r0, [pc, #684]	@ (8007df8 <resetMenuTexts+0x3c4>)
 8007b4c:	f005 feae 	bl	800d8ac <memset>
    memset(kapiAcmaTipiText, 0, 17);
 8007b50:	2211      	movs	r2, #17
 8007b52:	2100      	movs	r1, #0
 8007b54:	48a9      	ldr	r0, [pc, #676]	@ (8007dfc <resetMenuTexts+0x3c8>)
 8007b56:	f005 fea9 	bl	800d8ac <memset>
    memset(kapiButonuESPText, 0, 17);
 8007b5a:	2211      	movs	r2, #17
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	48a8      	ldr	r0, [pc, #672]	@ (8007e00 <resetMenuTexts+0x3cc>)
 8007b60:	f005 fea4 	bl	800d8ac <memset>
    memset(katButonuEXTText, 0, 17);
 8007b64:	2211      	movs	r2, #17
 8007b66:	2100      	movs	r1, #0
 8007b68:	48a6      	ldr	r0, [pc, #664]	@ (8007e04 <resetMenuTexts+0x3d0>)
 8007b6a:	f005 fe9f 	bl	800d8ac <memset>
    memset(birKatKapiTipiText, 0, 17);
 8007b6e:	2211      	movs	r2, #17
 8007b70:	2100      	movs	r1, #0
 8007b72:	48a5      	ldr	r0, [pc, #660]	@ (8007e08 <resetMenuTexts+0x3d4>)
 8007b74:	f005 fe9a 	bl	800d8ac <memset>
    memset(butonKontrolluText, 0, 17);
 8007b78:	2211      	movs	r2, #17
 8007b7a:	2100      	movs	r1, #0
 8007b7c:	48a3      	ldr	r0, [pc, #652]	@ (8007e0c <resetMenuTexts+0x3d8>)
 8007b7e:	f005 fe95 	bl	800d8ac <memset>
    memset(birinciKapiAcSuresiText, 0, 17);
 8007b82:	2211      	movs	r2, #17
 8007b84:	2100      	movs	r1, #0
 8007b86:	48a2      	ldr	r0, [pc, #648]	@ (8007e10 <resetMenuTexts+0x3dc>)
 8007b88:	f005 fe90 	bl	800d8ac <memset>
    memset(kacSaniyeText, 0, 17);
 8007b8c:	2211      	movs	r2, #17
 8007b8e:	2100      	movs	r1, #0
 8007b90:	48a0      	ldr	r0, [pc, #640]	@ (8007e14 <resetMenuTexts+0x3e0>)
 8007b92:	f005 fe8b 	bl	800d8ac <memset>
    memset(ikinciKatKapiTipiText, 0, 17);
 8007b96:	2211      	movs	r2, #17
 8007b98:	2100      	movs	r1, #0
 8007b9a:	489f      	ldr	r0, [pc, #636]	@ (8007e18 <resetMenuTexts+0x3e4>)
 8007b9c:	f005 fe86 	bl	800d8ac <memset>
    memset(ikinciKapiAcSuresiText, 0, 17);
 8007ba0:	2211      	movs	r2, #17
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	489d      	ldr	r0, [pc, #628]	@ (8007e1c <resetMenuTexts+0x3e8>)
 8007ba6:	f005 fe81 	bl	800d8ac <memset>
    memset(tablaKapiTipiText, 0, 17);
 8007baa:	2211      	movs	r2, #17
 8007bac:	2100      	movs	r1, #0
 8007bae:	489c      	ldr	r0, [pc, #624]	@ (8007e20 <resetMenuTexts+0x3ec>)
 8007bb0:	f005 fe7c 	bl	800d8ac <memset>
    memset(tablaKapiAcKonumText, 0, 17);
 8007bb4:	2211      	movs	r2, #17
 8007bb6:	2100      	movs	r1, #0
 8007bb8:	489a      	ldr	r0, [pc, #616]	@ (8007e24 <resetMenuTexts+0x3f0>)
 8007bba:	f005 fe77 	bl	800d8ac <memset>
    memset(birinciKattaAcText, 0, 17);
 8007bbe:	2211      	movs	r2, #17
 8007bc0:	2100      	movs	r1, #0
 8007bc2:	4899      	ldr	r0, [pc, #612]	@ (8007e28 <resetMenuTexts+0x3f4>)
 8007bc4:	f005 fe72 	bl	800d8ac <memset>
    memset(ikinciKattaAcText, 0, 17);
 8007bc8:	2211      	movs	r2, #17
 8007bca:	2100      	movs	r1, #0
 8007bcc:	4897      	ldr	r0, [pc, #604]	@ (8007e2c <resetMenuTexts+0x3f8>)
 8007bce:	f005 fe6d 	bl	800d8ac <memset>
    memset(birVeIkinciKattaAcText, 0, 17);
 8007bd2:	2211      	movs	r2, #17
 8007bd4:	2100      	movs	r1, #0
 8007bd6:	4896      	ldr	r0, [pc, #600]	@ (8007e30 <resetMenuTexts+0x3fc>)
 8007bd8:	f005 fe68 	bl	800d8ac <memset>
    memset(tablaKapiAcSureText, 0, 17);
 8007bdc:	2211      	movs	r2, #17
 8007bde:	2100      	movs	r1, #0
 8007be0:	4894      	ldr	r0, [pc, #592]	@ (8007e34 <resetMenuTexts+0x400>)
 8007be2:	f005 fe63 	bl	800d8ac <memset>
    memset(yukariYavaslamaLimitiText, 0, 17);
 8007be6:	2211      	movs	r2, #17
 8007be8:	2100      	movs	r1, #0
 8007bea:	4893      	ldr	r0, [pc, #588]	@ (8007e38 <resetMenuTexts+0x404>)
 8007bec:	f005 fe5e 	bl	800d8ac <memset>
    memset(devirmeYuruyusMenuText, 0, 17);
 8007bf0:	2211      	movs	r2, #17
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	4891      	ldr	r0, [pc, #580]	@ (8007e3c <resetMenuTexts+0x408>)
 8007bf6:	f005 fe59 	bl	800d8ac <memset>
    memset(devirmeAktifText, 0, 17);
 8007bfa:	2211      	movs	r2, #17
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	4890      	ldr	r0, [pc, #576]	@ (8007e40 <resetMenuTexts+0x40c>)
 8007c00:	f005 fe54 	bl	800d8ac <memset>
    memset(yuruyusAktifText, 0, 17);
 8007c04:	2211      	movs	r2, #17
 8007c06:	2100      	movs	r1, #0
 8007c08:	488e      	ldr	r0, [pc, #568]	@ (8007e44 <resetMenuTexts+0x410>)
 8007c0a:	f005 fe4f 	bl	800d8ac <memset>
    memset(devirmeYukariText, 0, 17);
 8007c0e:	2211      	movs	r2, #17
 8007c10:	2100      	movs	r1, #0
 8007c12:	488d      	ldr	r0, [pc, #564]	@ (8007e48 <resetMenuTexts+0x414>)
 8007c14:	f005 fe4a 	bl	800d8ac <memset>
    memset(yuruyusIleriText, 0, 17);
 8007c18:	2211      	movs	r2, #17
 8007c1a:	2100      	movs	r1, #0
 8007c1c:	488b      	ldr	r0, [pc, #556]	@ (8007e4c <resetMenuTexts+0x418>)
 8007c1e:	f005 fe45 	bl	800d8ac <memset>
    memset(devirmeAsagiSivicText, 0, 17);
 8007c22:	2211      	movs	r2, #17
 8007c24:	2100      	movs	r1, #0
 8007c26:	488a      	ldr	r0, [pc, #552]	@ (8007e50 <resetMenuTexts+0x41c>)
 8007c28:	f005 fe40 	bl	800d8ac <memset>
    memset(yuruyusGeriSivicText, 0, 17);
 8007c2c:	2211      	movs	r2, #17
 8007c2e:	2100      	movs	r1, #0
 8007c30:	4888      	ldr	r0, [pc, #544]	@ (8007e54 <resetMenuTexts+0x420>)
 8007c32:	f005 fe3b 	bl	800d8ac <memset>
    memset(yuruyusSecildiText, 0, 17);
 8007c36:	2211      	movs	r2, #17
 8007c38:	2100      	movs	r1, #0
 8007c3a:	4887      	ldr	r0, [pc, #540]	@ (8007e58 <resetMenuTexts+0x424>)
 8007c3c:	f005 fe36 	bl	800d8ac <memset>
    memset(devirmeSilindirTipiText, 0, 17);
 8007c40:	2211      	movs	r2, #17
 8007c42:	2100      	movs	r1, #0
 8007c44:	4885      	ldr	r0, [pc, #532]	@ (8007e5c <resetMenuTexts+0x428>)
 8007c46:	f005 fe31 	bl	800d8ac <memset>
    memset(tekTesirText, 0, 17);
 8007c4a:	2211      	movs	r2, #17
 8007c4c:	2100      	movs	r1, #0
 8007c4e:	4884      	ldr	r0, [pc, #528]	@ (8007e60 <resetMenuTexts+0x42c>)
 8007c50:	f005 fe2c 	bl	800d8ac <memset>
    memset(ciftTesirText, 0, 17);
 8007c54:	2211      	movs	r2, #17
 8007c56:	2100      	movs	r1, #0
 8007c58:	4882      	ldr	r0, [pc, #520]	@ (8007e64 <resetMenuTexts+0x430>)
 8007c5a:	f005 fe27 	bl	800d8ac <memset>
    memset(platformSilindirTipiText, 0, 17);
 8007c5e:	2211      	movs	r2, #17
 8007c60:	2100      	movs	r1, #0
 8007c62:	4881      	ldr	r0, [pc, #516]	@ (8007e68 <resetMenuTexts+0x434>)
 8007c64:	f005 fe22 	bl	800d8ac <memset>
    memset(yukariValfSureText, 0, 17);
 8007c68:	2211      	movs	r2, #17
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	487f      	ldr	r0, [pc, #508]	@ (8007e6c <resetMenuTexts+0x438>)
 8007c6e:	f005 fe1d 	bl	800d8ac <memset>
    memset(asagiValfSureText, 0, 17);
 8007c72:	2211      	movs	r2, #17
 8007c74:	2100      	movs	r1, #0
 8007c76:	487e      	ldr	r0, [pc, #504]	@ (8007e70 <resetMenuTexts+0x43c>)
 8007c78:	f005 fe18 	bl	800d8ac <memset>
    memset(devirmeYukariValfSureText, 0, 17);
 8007c7c:	2211      	movs	r2, #17
 8007c7e:	2100      	movs	r1, #0
 8007c80:	487c      	ldr	r0, [pc, #496]	@ (8007e74 <resetMenuTexts+0x440>)
 8007c82:	f005 fe13 	bl	800d8ac <memset>
    memset(ileriValfSureText, 0, 17);
 8007c86:	2211      	movs	r2, #17
 8007c88:	2100      	movs	r1, #0
 8007c8a:	487b      	ldr	r0, [pc, #492]	@ (8007e78 <resetMenuTexts+0x444>)
 8007c8c:	f005 fe0e 	bl	800d8ac <memset>
    memset(devirmeAsagiValfSureText, 0, 17);
 8007c90:	2211      	movs	r2, #17
 8007c92:	2100      	movs	r1, #0
 8007c94:	4879      	ldr	r0, [pc, #484]	@ (8007e7c <resetMenuTexts+0x448>)
 8007c96:	f005 fe09 	bl	800d8ac <memset>
    memset(geriValfSureText, 0, 17);
 8007c9a:	2211      	movs	r2, #17
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	4878      	ldr	r0, [pc, #480]	@ (8007e80 <resetMenuTexts+0x44c>)
 8007ca0:	f005 fe04 	bl	800d8ac <memset>
    memset(calismaSuresiText, 0, 17);
 8007ca4:	2211      	movs	r2, #17
 8007ca6:	2100      	movs	r1, #0
 8007ca8:	4876      	ldr	r0, [pc, #472]	@ (8007e84 <resetMenuTexts+0x450>)
 8007caa:	f005 fdff 	bl	800d8ac <memset>
    memset(calismaSayisiText, 0, 17);
 8007cae:	2211      	movs	r2, #17
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	4875      	ldr	r0, [pc, #468]	@ (8007e88 <resetMenuTexts+0x454>)
 8007cb4:	f005 fdfa 	bl	800d8ac <memset>
    memset(enterlaSifirlaText, 0, 17);
 8007cb8:	2211      	movs	r2, #17
 8007cba:	2100      	movs	r1, #0
 8007cbc:	4873      	ldr	r0, [pc, #460]	@ (8007e8c <resetMenuTexts+0x458>)
 8007cbe:	f005 fdf5 	bl	800d8ac <memset>
    memset(dilSecimText, 0, 17);
 8007cc2:	2211      	movs	r2, #17
 8007cc4:	2100      	movs	r1, #0
 8007cc6:	4872      	ldr	r0, [pc, #456]	@ (8007e90 <resetMenuTexts+0x45c>)
 8007cc8:	f005 fdf0 	bl	800d8ac <memset>
    memset(secilenDilText, 0, 17);
 8007ccc:	2211      	movs	r2, #17
 8007cce:	2100      	movs	r1, #0
 8007cd0:	4870      	ldr	r0, [pc, #448]	@ (8007e94 <resetMenuTexts+0x460>)
 8007cd2:	f005 fdeb 	bl	800d8ac <memset>
    memset(menudenCikisText, 0, 17);
 8007cd6:	2211      	movs	r2, #17
 8007cd8:	2100      	movs	r1, #0
 8007cda:	486f      	ldr	r0, [pc, #444]	@ (8007e98 <resetMenuTexts+0x464>)
 8007cdc:	f005 fde6 	bl	800d8ac <memset>
    memset(enteraBasinizText, 0, 17);
 8007ce0:	2211      	movs	r2, #17
 8007ce2:	2100      	movs	r1, #0
 8007ce4:	486d      	ldr	r0, [pc, #436]	@ (8007e9c <resetMenuTexts+0x468>)
 8007ce6:	f005 fde1 	bl	800d8ac <memset>
    memset(hataKoduText, 0, 17);
 8007cea:	2211      	movs	r2, #17
 8007cec:	2100      	movs	r1, #0
 8007cee:	486c      	ldr	r0, [pc, #432]	@ (8007ea0 <resetMenuTexts+0x46c>)
 8007cf0:	f005 fddc 	bl	800d8ac <memset>
    memset(dataSynchText, 0, 17);
 8007cf4:	2211      	movs	r2, #17
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	486a      	ldr	r0, [pc, #424]	@ (8007ea4 <resetMenuTexts+0x470>)
 8007cfa:	f005 fdd7 	bl	800d8ac <memset>
    memset(dataSynch2Text, 0, 17);
 8007cfe:	2211      	movs	r2, #17
 8007d00:	2100      	movs	r1, #0
 8007d02:	4869      	ldr	r0, [pc, #420]	@ (8007ea8 <resetMenuTexts+0x474>)
 8007d04:	f005 fdd2 	bl	800d8ac <memset>
    memset(mustBeUniqueText, 0, 17);
 8007d08:	2211      	movs	r2, #17
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	4867      	ldr	r0, [pc, #412]	@ (8007eac <resetMenuTexts+0x478>)
 8007d0e:	f005 fdcd 	bl	800d8ac <memset>
    memset(mustBeUnique2Text, 0, 17);
 8007d12:	2211      	movs	r2, #17
 8007d14:	2100      	movs	r1, #0
 8007d16:	4866      	ldr	r0, [pc, #408]	@ (8007eb0 <resetMenuTexts+0x47c>)
 8007d18:	f005 fdc8 	bl	800d8ac <memset>
    memset(mustBe12Text, 0, 17);
 8007d1c:	2211      	movs	r2, #17
 8007d1e:	2100      	movs	r1, #0
 8007d20:	4864      	ldr	r0, [pc, #400]	@ (8007eb4 <resetMenuTexts+0x480>)
 8007d22:	f005 fdc3 	bl	800d8ac <memset>
    memset(mustBe122Text, 0, 17);
 8007d26:	2211      	movs	r2, #17
 8007d28:	2100      	movs	r1, #0
 8007d2a:	4863      	ldr	r0, [pc, #396]	@ (8007eb8 <resetMenuTexts+0x484>)
 8007d2c:	f005 fdbe 	bl	800d8ac <memset>
    memset(ssidExceedErrorText, 0, 17);
 8007d30:	2211      	movs	r2, #17
 8007d32:	2100      	movs	r1, #0
 8007d34:	4861      	ldr	r0, [pc, #388]	@ (8007ebc <resetMenuTexts+0x488>)
 8007d36:	f005 fdb9 	bl	800d8ac <memset>
    memset(ssidExceedError2Text, 0, 17);
 8007d3a:	2211      	movs	r2, #17
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	4860      	ldr	r0, [pc, #384]	@ (8007ec0 <resetMenuTexts+0x48c>)
 8007d40:	f005 fdb4 	bl	800d8ac <memset>
    memset(passExceedErrorText, 0, 17);
 8007d44:	2211      	movs	r2, #17
 8007d46:	2100      	movs	r1, #0
 8007d48:	485e      	ldr	r0, [pc, #376]	@ (8007ec4 <resetMenuTexts+0x490>)
 8007d4a:	f005 fdaf 	bl	800d8ac <memset>
    memset(passExceedError2Text, 0, 17);
 8007d4e:	2211      	movs	r2, #17
 8007d50:	2100      	movs	r1, #0
 8007d52:	485d      	ldr	r0, [pc, #372]	@ (8007ec8 <resetMenuTexts+0x494>)
 8007d54:	f005 fdaa 	bl	800d8ac <memset>
    memset(dataYazildiText, 0, 17);
 8007d58:	2211      	movs	r2, #17
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	485b      	ldr	r0, [pc, #364]	@ (8007ecc <resetMenuTexts+0x498>)
 8007d5e:	f005 fda5 	bl	800d8ac <memset>
    memset(dataOkunuyorText, 0, 17);
 8007d62:	2211      	movs	r2, #17
 8007d64:	2100      	movs	r1, #0
 8007d66:	485a      	ldr	r0, [pc, #360]	@ (8007ed0 <resetMenuTexts+0x49c>)
 8007d68:	f005 fda0 	bl	800d8ac <memset>
    memset(dataOkunduText, 0, 17);
 8007d6c:	2211      	movs	r2, #17
 8007d6e:	2100      	movs	r1, #0
 8007d70:	4858      	ldr	r0, [pc, #352]	@ (8007ed4 <resetMenuTexts+0x4a0>)
 8007d72:	f005 fd9b 	bl	800d8ac <memset>
    memset(degerKaydedildiText, 0, 17);
 8007d76:	2211      	movs	r2, #17
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4857      	ldr	r0, [pc, #348]	@ (8007ed8 <resetMenuTexts+0x4a4>)
 8007d7c:	f005 fd96 	bl	800d8ac <memset>
    memset(errorCodeText, 0, 17);
 8007d80:	2211      	movs	r2, #17
 8007d82:	2100      	movs	r1, #0
 8007d84:	4855      	ldr	r0, [pc, #340]	@ (8007edc <resetMenuTexts+0x4a8>)
 8007d86:	f005 fd91 	bl	800d8ac <memset>
 8007d8a:	e0a9      	b.n	8007ee0 <resetMenuTexts+0x4ac>
 8007d8c:	20001220 	.word	0x20001220
 8007d90:	20001234 	.word	0x20001234
 8007d94:	20001248 	.word	0x20001248
 8007d98:	2000125c 	.word	0x2000125c
 8007d9c:	20001270 	.word	0x20001270
 8007da0:	20001284 	.word	0x20001284
 8007da4:	20001298 	.word	0x20001298
 8007da8:	200012ac 	.word	0x200012ac
 8007dac:	200012c0 	.word	0x200012c0
 8007db0:	200012d4 	.word	0x200012d4
 8007db4:	200012e8 	.word	0x200012e8
 8007db8:	200012fc 	.word	0x200012fc
 8007dbc:	20001310 	.word	0x20001310
 8007dc0:	20001324 	.word	0x20001324
 8007dc4:	20001338 	.word	0x20001338
 8007dc8:	2000134c 	.word	0x2000134c
 8007dcc:	20001360 	.word	0x20001360
 8007dd0:	20001374 	.word	0x20001374
 8007dd4:	20001388 	.word	0x20001388
 8007dd8:	2000139c 	.word	0x2000139c
 8007ddc:	200013b0 	.word	0x200013b0
 8007de0:	200013c4 	.word	0x200013c4
 8007de4:	200013d8 	.word	0x200013d8
 8007de8:	200013ec 	.word	0x200013ec
 8007dec:	20001400 	.word	0x20001400
 8007df0:	20001414 	.word	0x20001414
 8007df4:	20001428 	.word	0x20001428
 8007df8:	2000143c 	.word	0x2000143c
 8007dfc:	20001450 	.word	0x20001450
 8007e00:	20001464 	.word	0x20001464
 8007e04:	20001478 	.word	0x20001478
 8007e08:	2000148c 	.word	0x2000148c
 8007e0c:	200014a0 	.word	0x200014a0
 8007e10:	200014b4 	.word	0x200014b4
 8007e14:	200014c8 	.word	0x200014c8
 8007e18:	200014dc 	.word	0x200014dc
 8007e1c:	200014f0 	.word	0x200014f0
 8007e20:	20001504 	.word	0x20001504
 8007e24:	20001518 	.word	0x20001518
 8007e28:	2000152c 	.word	0x2000152c
 8007e2c:	20001540 	.word	0x20001540
 8007e30:	20001554 	.word	0x20001554
 8007e34:	20001568 	.word	0x20001568
 8007e38:	2000157c 	.word	0x2000157c
 8007e3c:	20001590 	.word	0x20001590
 8007e40:	200015a4 	.word	0x200015a4
 8007e44:	200015b8 	.word	0x200015b8
 8007e48:	200015cc 	.word	0x200015cc
 8007e4c:	200015e0 	.word	0x200015e0
 8007e50:	200015f4 	.word	0x200015f4
 8007e54:	20001608 	.word	0x20001608
 8007e58:	2000161c 	.word	0x2000161c
 8007e5c:	20001630 	.word	0x20001630
 8007e60:	20001644 	.word	0x20001644
 8007e64:	20001658 	.word	0x20001658
 8007e68:	2000166c 	.word	0x2000166c
 8007e6c:	20001680 	.word	0x20001680
 8007e70:	20001694 	.word	0x20001694
 8007e74:	200016a8 	.word	0x200016a8
 8007e78:	200016bc 	.word	0x200016bc
 8007e7c:	200016d0 	.word	0x200016d0
 8007e80:	200016e4 	.word	0x200016e4
 8007e84:	200016f8 	.word	0x200016f8
 8007e88:	2000170c 	.word	0x2000170c
 8007e8c:	20001720 	.word	0x20001720
 8007e90:	20001734 	.word	0x20001734
 8007e94:	20001748 	.word	0x20001748
 8007e98:	2000175c 	.word	0x2000175c
 8007e9c:	20001770 	.word	0x20001770
 8007ea0:	20001784 	.word	0x20001784
 8007ea4:	20001798 	.word	0x20001798
 8007ea8:	200017ac 	.word	0x200017ac
 8007eac:	200017c0 	.word	0x200017c0
 8007eb0:	200017d4 	.word	0x200017d4
 8007eb4:	200017e8 	.word	0x200017e8
 8007eb8:	200017fc 	.word	0x200017fc
 8007ebc:	20001810 	.word	0x20001810
 8007ec0:	20001824 	.word	0x20001824
 8007ec4:	20001838 	.word	0x20001838
 8007ec8:	2000184c 	.word	0x2000184c
 8007ecc:	20001860 	.word	0x20001860
 8007ed0:	20001874 	.word	0x20001874
 8007ed4:	20001888 	.word	0x20001888
 8007ed8:	2000189c 	.word	0x2000189c
 8007edc:	200018b0 	.word	0x200018b0
    memset(machineIDText, 0, 17);
 8007ee0:	2211      	movs	r2, #17
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	4809      	ldr	r0, [pc, #36]	@ (8007f0c <resetMenuTexts+0x4d8>)
 8007ee6:	f005 fce1 	bl	800d8ac <memset>
    memset(idConfirmationText, 0, 17);
 8007eea:	2211      	movs	r2, #17
 8007eec:	2100      	movs	r1, #0
 8007eee:	4808      	ldr	r0, [pc, #32]	@ (8007f10 <resetMenuTexts+0x4dc>)
 8007ef0:	f005 fcdc 	bl	800d8ac <memset>
    memset(idConfirmationSubText, 0, 17);
 8007ef4:	2211      	movs	r2, #17
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	4806      	ldr	r0, [pc, #24]	@ (8007f14 <resetMenuTexts+0x4e0>)
 8007efa:	f005 fcd7 	bl	800d8ac <memset>
    memset(wifiConfirmationText, 0, 17);
 8007efe:	2211      	movs	r2, #17
 8007f00:	2100      	movs	r1, #0
 8007f02:	4805      	ldr	r0, [pc, #20]	@ (8007f18 <resetMenuTexts+0x4e4>)
 8007f04:	f005 fcd2 	bl	800d8ac <memset>
}
 8007f08:	bf00      	nop
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	200018c4 	.word	0x200018c4
 8007f10:	200018d8 	.word	0x200018d8
 8007f14:	200018ec 	.word	0x200018ec
 8007f18:	20001900 	.word	0x20001900

08007f1c <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8007f22:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007f26:	f001 fd89 	bl	8009a3c <HAL_Delay>
	int confirmationVal = 0;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8007f2e:	e012      	b.n	8007f56 <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 8007f30:	4a12      	ldr	r2, [pc, #72]	@ (8007f7c <takeMachineIDWithConfirmation+0x60>)
 8007f32:	2101      	movs	r1, #1
 8007f34:	2001      	movs	r0, #1
 8007f36:	f001 f827 	bl	8008f88 <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 8007f3a:	4a11      	ldr	r2, [pc, #68]	@ (8007f80 <takeMachineIDWithConfirmation+0x64>)
 8007f3c:	2101      	movs	r1, #1
 8007f3e:	2002      	movs	r0, #2
 8007f40:	f001 f822 	bl	8008f88 <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 8007f44:	2102      	movs	r1, #2
 8007f46:	480f      	ldr	r0, [pc, #60]	@ (8007f84 <takeMachineIDWithConfirmation+0x68>)
 8007f48:	f002 fb48 	bl	800a5dc <HAL_GPIO_ReadPin>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d101      	bne.n	8007f56 <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 8007f52:	2301      	movs	r3, #1
 8007f54:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d0e9      	beq.n	8007f30 <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 8007f5c:	f000 f814 	bl	8007f88 <takeMachineID>

	convertArrays(1);
 8007f60:	2001      	movs	r0, #1
 8007f62:	f7f8 fca9 	bl	80008b8 <convertArrays>
	HAL_Delay(50);
 8007f66:	2032      	movs	r0, #50	@ 0x32
 8007f68:	f001 fd68 	bl	8009a3c <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 8007f6c:	2001      	movs	r0, #1
 8007f6e:	f7f9 fabf 	bl	80014f0 <printCredentials>
}
 8007f72:	bf00      	nop
 8007f74:	3708      	adds	r7, #8
 8007f76:	46bd      	mov	sp, r7
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	200018d8 	.word	0x200018d8
 8007f80:	200018ec 	.word	0x200018ec
 8007f84:	40010800 	.word	0x40010800

08007f88 <takeMachineID>:

void takeMachineID() {
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
	mainSection:

	lcd_cursor(1);
 8007f8e:	2001      	movs	r0, #1
 8007f90:	f001 f858 	bl	8009044 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8007f94:	220c      	movs	r2, #12
 8007f96:	2100      	movs	r1, #0
 8007f98:	489b      	ldr	r0, [pc, #620]	@ (8008208 <takeMachineID+0x280>)
 8007f9a:	f005 fc87 	bl	800d8ac <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 8007f9e:	2305      	movs	r3, #5
 8007fa0:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8007faa:	4b98      	ldr	r3, [pc, #608]	@ (800820c <takeMachineID+0x284>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 8007fb0:	2100      	movs	r1, #0
 8007fb2:	2001      	movs	r0, #1
 8007fb4:	f7f9 f92c 	bl	8001210 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007fb8:	2108      	movs	r1, #8
 8007fba:	4895      	ldr	r0, [pc, #596]	@ (8008210 <takeMachineID+0x288>)
 8007fbc:	f002 fb0e 	bl	800a5dc <HAL_GPIO_ReadPin>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b01      	cmp	r3, #1
 8007fc4:	d11a      	bne.n	8007ffc <takeMachineID+0x74>
        	lcd_cursor(0);
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	f001 f83c 	bl	8009044 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8007fcc:	f000 fe1e 	bl	8008c0c <checkEEPROM4ID>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d00e      	beq.n	8007ff4 <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 8007fd6:	4a8f      	ldr	r2, [pc, #572]	@ (8008214 <takeMachineID+0x28c>)
 8007fd8:	2101      	movs	r1, #1
 8007fda:	2001      	movs	r0, #1
 8007fdc:	f000 ffd4 	bl	8008f88 <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 8007fe0:	4a8d      	ldr	r2, [pc, #564]	@ (8008218 <takeMachineID+0x290>)
 8007fe2:	2101      	movs	r1, #1
 8007fe4:	2002      	movs	r0, #2
 8007fe6:	f000 ffcf 	bl	8008f88 <lcd_print>
        		HAL_Delay(1250);
 8007fea:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007fee:	f001 fd25 	bl	8009a3c <HAL_Delay>

        		goto mainSection;
 8007ff2:	e7cc      	b.n	8007f8e <takeMachineID+0x6>
        	} else {
        		saveEEPROM(1);
 8007ff4:	2001      	movs	r0, #1
 8007ff6:	f7f8 fb5d 	bl	80006b4 <saveEEPROM>

            	break;
 8007ffa:	e130      	b.n	800825e <takeMachineID+0x2d6>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007ffc:	2101      	movs	r1, #1
 8007ffe:	4884      	ldr	r0, [pc, #528]	@ (8008210 <takeMachineID+0x288>)
 8008000:	f002 faec 	bl	800a5dc <HAL_GPIO_ReadPin>
 8008004:	4603      	mov	r3, r0
 8008006:	2b01      	cmp	r3, #1
 8008008:	d111      	bne.n	800802e <takeMachineID+0xa6>
        	if(cursorPosition == 7) {
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	2b07      	cmp	r3, #7
 800800e:	d102      	bne.n	8008016 <takeMachineID+0x8e>
        		cursorPosition = 10;
 8008010:	230a      	movs	r3, #10
 8008012:	60bb      	str	r3, [r7, #8]
 8008014:	e008      	b.n	8008028 <takeMachineID+0xa0>
        	} else if (cursorPosition == 14) {
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	2b0e      	cmp	r3, #14
 800801a:	d102      	bne.n	8008022 <takeMachineID+0x9a>
                cursorPosition = 3;
 800801c:	2303      	movs	r3, #3
 800801e:	60bb      	str	r3, [r7, #8]
 8008020:	e002      	b.n	8008028 <takeMachineID+0xa0>
            } else {
            	cursorPosition++;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	3301      	adds	r3, #1
 8008026:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 8008028:	2096      	movs	r0, #150	@ 0x96
 800802a:	f001 fd07 	bl	8009a3c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800802e:	2108      	movs	r1, #8
 8008030:	487a      	ldr	r0, [pc, #488]	@ (800821c <takeMachineID+0x294>)
 8008032:	f002 fad3 	bl	800a5dc <HAL_GPIO_ReadPin>
 8008036:	4603      	mov	r3, r0
 8008038:	2b01      	cmp	r3, #1
 800803a:	d111      	bne.n	8008060 <takeMachineID+0xd8>
            if (cursorPosition == 3) {
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2b03      	cmp	r3, #3
 8008040:	d102      	bne.n	8008048 <takeMachineID+0xc0>
                cursorPosition = 14;
 8008042:	230e      	movs	r3, #14
 8008044:	60bb      	str	r3, [r7, #8]
 8008046:	e008      	b.n	800805a <takeMachineID+0xd2>
            } else if(cursorPosition == 10) {
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	2b0a      	cmp	r3, #10
 800804c:	d102      	bne.n	8008054 <takeMachineID+0xcc>
            	cursorPosition = 7;
 800804e:	2307      	movs	r3, #7
 8008050:	60bb      	str	r3, [r7, #8]
 8008052:	e002      	b.n	800805a <takeMachineID+0xd2>
            } else {
            	cursorPosition--;
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	3b01      	subs	r3, #1
 8008058:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 800805a:	20fa      	movs	r0, #250	@ 0xfa
 800805c:	f001 fcee 	bl	8009a3c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8008060:	2102      	movs	r1, #2
 8008062:	486b      	ldr	r0, [pc, #428]	@ (8008210 <takeMachineID+0x288>)
 8008064:	f002 faba 	bl	800a5dc <HAL_GPIO_ReadPin>
 8008068:	4603      	mov	r3, r0
 800806a:	2b01      	cmp	r3, #1
 800806c:	f040 80a1 	bne.w	80081b2 <takeMachineID+0x22a>
        	if(cursorPosition == 3) {
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	2b03      	cmp	r3, #3
 8008074:	d10a      	bne.n	800808c <takeMachineID+0x104>
        		machineID[arrayPos] = '0';
 8008076:	4a64      	ldr	r2, [pc, #400]	@ (8008208 <takeMachineID+0x280>)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4413      	add	r3, r2
 800807c:	2230      	movs	r2, #48	@ 0x30
 800807e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8008080:	4a67      	ldr	r2, [pc, #412]	@ (8008220 <takeMachineID+0x298>)
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	4413      	add	r3, r2
 8008086:	2200      	movs	r2, #0
 8008088:	701a      	strb	r2, [r3, #0]
 800808a:	e07c      	b.n	8008186 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 4) {
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	2b04      	cmp	r3, #4
 8008090:	d10a      	bne.n	80080a8 <takeMachineID+0x120>
        		machineID[arrayPos] = '1';
 8008092:	4a5d      	ldr	r2, [pc, #372]	@ (8008208 <takeMachineID+0x280>)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4413      	add	r3, r2
 8008098:	2231      	movs	r2, #49	@ 0x31
 800809a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 800809c:	4a60      	ldr	r2, [pc, #384]	@ (8008220 <takeMachineID+0x298>)
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	4413      	add	r3, r2
 80080a2:	2201      	movs	r2, #1
 80080a4:	701a      	strb	r2, [r3, #0]
 80080a6:	e06e      	b.n	8008186 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 5) {
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	2b05      	cmp	r3, #5
 80080ac:	d10a      	bne.n	80080c4 <takeMachineID+0x13c>
        		machineID[arrayPos] = '2';
 80080ae:	4a56      	ldr	r2, [pc, #344]	@ (8008208 <takeMachineID+0x280>)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4413      	add	r3, r2
 80080b4:	2232      	movs	r2, #50	@ 0x32
 80080b6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 80080b8:	4a59      	ldr	r2, [pc, #356]	@ (8008220 <takeMachineID+0x298>)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	4413      	add	r3, r2
 80080be:	2202      	movs	r2, #2
 80080c0:	701a      	strb	r2, [r3, #0]
 80080c2:	e060      	b.n	8008186 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 6) {
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	2b06      	cmp	r3, #6
 80080c8:	d10a      	bne.n	80080e0 <takeMachineID+0x158>
        		machineID[arrayPos] = '3';
 80080ca:	4a4f      	ldr	r2, [pc, #316]	@ (8008208 <takeMachineID+0x280>)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	4413      	add	r3, r2
 80080d0:	2233      	movs	r2, #51	@ 0x33
 80080d2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 80080d4:	4a52      	ldr	r2, [pc, #328]	@ (8008220 <takeMachineID+0x298>)
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	4413      	add	r3, r2
 80080da:	2203      	movs	r2, #3
 80080dc:	701a      	strb	r2, [r3, #0]
 80080de:	e052      	b.n	8008186 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 7) {
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	2b07      	cmp	r3, #7
 80080e4:	d10a      	bne.n	80080fc <takeMachineID+0x174>
        		machineID[arrayPos] = '4';
 80080e6:	4a48      	ldr	r2, [pc, #288]	@ (8008208 <takeMachineID+0x280>)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4413      	add	r3, r2
 80080ec:	2234      	movs	r2, #52	@ 0x34
 80080ee:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 80080f0:	4a4b      	ldr	r2, [pc, #300]	@ (8008220 <takeMachineID+0x298>)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	4413      	add	r3, r2
 80080f6:	2204      	movs	r2, #4
 80080f8:	701a      	strb	r2, [r3, #0]
 80080fa:	e044      	b.n	8008186 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 10) {
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	2b0a      	cmp	r3, #10
 8008100:	d10a      	bne.n	8008118 <takeMachineID+0x190>
        		machineID[arrayPos] = '5';
 8008102:	4a41      	ldr	r2, [pc, #260]	@ (8008208 <takeMachineID+0x280>)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	4413      	add	r3, r2
 8008108:	2235      	movs	r2, #53	@ 0x35
 800810a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 800810c:	4a44      	ldr	r2, [pc, #272]	@ (8008220 <takeMachineID+0x298>)
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	4413      	add	r3, r2
 8008112:	2205      	movs	r2, #5
 8008114:	701a      	strb	r2, [r3, #0]
 8008116:	e036      	b.n	8008186 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 11) {
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2b0b      	cmp	r3, #11
 800811c:	d10a      	bne.n	8008134 <takeMachineID+0x1ac>
        		machineID[arrayPos] = '6';
 800811e:	4a3a      	ldr	r2, [pc, #232]	@ (8008208 <takeMachineID+0x280>)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4413      	add	r3, r2
 8008124:	2236      	movs	r2, #54	@ 0x36
 8008126:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 8008128:	4a3d      	ldr	r2, [pc, #244]	@ (8008220 <takeMachineID+0x298>)
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	4413      	add	r3, r2
 800812e:	2206      	movs	r2, #6
 8008130:	701a      	strb	r2, [r3, #0]
 8008132:	e028      	b.n	8008186 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 12) {
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	2b0c      	cmp	r3, #12
 8008138:	d10a      	bne.n	8008150 <takeMachineID+0x1c8>
        		machineID[arrayPos] = '7';
 800813a:	4a33      	ldr	r2, [pc, #204]	@ (8008208 <takeMachineID+0x280>)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4413      	add	r3, r2
 8008140:	2237      	movs	r2, #55	@ 0x37
 8008142:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8008144:	4a36      	ldr	r2, [pc, #216]	@ (8008220 <takeMachineID+0x298>)
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	4413      	add	r3, r2
 800814a:	2207      	movs	r2, #7
 800814c:	701a      	strb	r2, [r3, #0]
 800814e:	e01a      	b.n	8008186 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 13) {
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	2b0d      	cmp	r3, #13
 8008154:	d10a      	bne.n	800816c <takeMachineID+0x1e4>
        		machineID[arrayPos] = '8';
 8008156:	4a2c      	ldr	r2, [pc, #176]	@ (8008208 <takeMachineID+0x280>)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4413      	add	r3, r2
 800815c:	2238      	movs	r2, #56	@ 0x38
 800815e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8008160:	4a2f      	ldr	r2, [pc, #188]	@ (8008220 <takeMachineID+0x298>)
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	4413      	add	r3, r2
 8008166:	2208      	movs	r2, #8
 8008168:	701a      	strb	r2, [r3, #0]
 800816a:	e00c      	b.n	8008186 <takeMachineID+0x1fe>
        	} else if(cursorPosition == 14) {
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	2b0e      	cmp	r3, #14
 8008170:	d109      	bne.n	8008186 <takeMachineID+0x1fe>
        		machineID[arrayPos] = '9';
 8008172:	4a25      	ldr	r2, [pc, #148]	@ (8008208 <takeMachineID+0x280>)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	4413      	add	r3, r2
 8008178:	2239      	movs	r2, #57	@ 0x39
 800817a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 800817c:	4a28      	ldr	r2, [pc, #160]	@ (8008220 <takeMachineID+0x298>)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	4413      	add	r3, r2
 8008182:	2209      	movs	r2, #9
 8008184:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	b2d9      	uxtb	r1, r3
 800818a:	4a1f      	ldr	r2, [pc, #124]	@ (8008208 <takeMachineID+0x280>)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4413      	add	r3, r2
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	2001      	movs	r0, #1
 8008196:	f000 ff0c 	bl	8008fb2 <lcd_print_char>

        	writeLoc++;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	3301      	adds	r3, #1
 800819e:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	3301      	adds	r3, #1
 80081a4:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	3301      	adds	r3, #1
 80081aa:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 80081ac:	2096      	movs	r0, #150	@ 0x96
 80081ae:	f001 fc45 	bl	8009a3c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80081b2:	2104      	movs	r1, #4
 80081b4:	4816      	ldr	r0, [pc, #88]	@ (8008210 <takeMachineID+0x288>)
 80081b6:	f002 fa11 	bl	800a5dc <HAL_GPIO_ReadPin>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d147      	bne.n	8008250 <takeMachineID+0x2c8>
            if(strlen(machineID) >= 1) {
 80081c0:	4b11      	ldr	r3, [pc, #68]	@ (8008208 <takeMachineID+0x280>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d040      	beq.n	800824a <takeMachineID+0x2c2>
                machineID[arrayPos] = '\0';
 80081c8:	4a0f      	ldr	r2, [pc, #60]	@ (8008208 <takeMachineID+0x280>)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4413      	add	r3, r2
 80081ce:	2200      	movs	r2, #0
 80081d0:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 80081d2:	4a13      	ldr	r2, [pc, #76]	@ (8008220 <takeMachineID+0x298>)
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	4413      	add	r3, r2
 80081d8:	2200      	movs	r2, #0
 80081da:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2b05      	cmp	r3, #5
 80081e0:	dd03      	ble.n	80081ea <takeMachineID+0x262>
                	writeLoc--;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3b01      	subs	r3, #1
 80081e6:	60fb      	str	r3, [r7, #12]
 80081e8:	e004      	b.n	80081f4 <takeMachineID+0x26c>
                } else if(writeLoc < 5) {
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2b04      	cmp	r3, #4
 80081ee:	dc01      	bgt.n	80081f4 <takeMachineID+0x26c>
                	writeLoc = 5;
 80081f0:	2305      	movs	r3, #5
 80081f2:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	dd14      	ble.n	8008224 <takeMachineID+0x29c>
                	arrayPos--;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	3b01      	subs	r3, #1
 80081fe:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	3b01      	subs	r3, #1
 8008204:	603b      	str	r3, [r7, #0]
 8008206:	e015      	b.n	8008234 <takeMachineID+0x2ac>
 8008208:	20001064 	.word	0x20001064
 800820c:	20000000 	.word	0x20000000
 8008210:	40010800 	.word	0x40010800
 8008214:	200017e8 	.word	0x200017e8
 8008218:	200017fc 	.word	0x200017fc
 800821c:	40011000 	.word	0x40011000
 8008220:	20000fec 	.word	0x20000fec
                } else if(arrayPos < 0) {
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	da04      	bge.n	8008234 <takeMachineID+0x2ac>
                	arrayPos = 0;
 800822a:	2300      	movs	r3, #0
 800822c:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 800822e:	4b0e      	ldr	r3, [pc, #56]	@ (8008268 <takeMachineID+0x2e0>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	b2db      	uxtb	r3, r3
 8008238:	3305      	adds	r3, #5
 800823a:	b2db      	uxtb	r3, r3
 800823c:	4619      	mov	r1, r3
 800823e:	2001      	movs	r0, #1
 8008240:	f000 fed8 	bl	8008ff4 <lcd_delete_char>
                HAL_Delay(50);
 8008244:	2032      	movs	r0, #50	@ 0x32
 8008246:	f001 fbf9 	bl	8009a3c <HAL_Delay>
            }

            HAL_Delay(150);
 800824a:	2096      	movs	r0, #150	@ 0x96
 800824c:	f001 fbf6 	bl	8009a3c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	b2db      	uxtb	r3, r3
 8008254:	4619      	mov	r1, r3
 8008256:	2002      	movs	r0, #2
 8008258:	f000 fe77 	bl	8008f4a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800825c:	e6ac      	b.n	8007fb8 <takeMachineID+0x30>
    }
}
 800825e:	bf00      	nop
 8008260:	3710      	adds	r7, #16
 8008262:	46bd      	mov	sp, r7
 8008264:	bd80      	pop	{r7, pc}
 8008266:	bf00      	nop
 8008268:	20000000 	.word	0x20000000

0800826c <ssidConfirmation>:

uint8_t ssidConfirmation() {
 800826c:	b580      	push	{r7, lr}
 800826e:	b082      	sub	sp, #8
 8008270:	af00      	add	r7, sp, #0
	int loopVal = 1;
 8008272:	2301      	movs	r3, #1
 8008274:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 8008276:	4a1e      	ldr	r2, [pc, #120]	@ (80082f0 <ssidConfirmation+0x84>)
 8008278:	2101      	movs	r1, #1
 800827a:	2001      	movs	r0, #1
 800827c:	f000 fe84 	bl	8008f88 <lcd_print>

	while(loopVal == 1) {
 8008280:	e012      	b.n	80082a8 <ssidConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 8008282:	4a1c      	ldr	r2, [pc, #112]	@ (80082f4 <ssidConfirmation+0x88>)
 8008284:	2101      	movs	r1, #1
 8008286:	2002      	movs	r0, #2
 8008288:	f000 fe7e 	bl	8008f88 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800828c:	2102      	movs	r1, #2
 800828e:	481a      	ldr	r0, [pc, #104]	@ (80082f8 <ssidConfirmation+0x8c>)
 8008290:	f002 f9a4 	bl	800a5dc <HAL_GPIO_ReadPin>
 8008294:	4603      	mov	r3, r0
 8008296:	2b01      	cmp	r3, #1
 8008298:	d101      	bne.n	800829e <ssidConfirmation+0x32>
			loopVal = 0;
 800829a:	2300      	movs	r3, #0
 800829c:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiSSID);
 800829e:	4a17      	ldr	r2, [pc, #92]	@ (80082fc <ssidConfirmation+0x90>)
 80082a0:	2101      	movs	r1, #1
 80082a2:	2001      	movs	r0, #1
 80082a4:	f000 fe70 	bl	8008f88 <lcd_print>
	while(loopVal == 1) {
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d0e9      	beq.n	8008282 <ssidConfirmation+0x16>
	}

    lcd_cursor(0);
 80082ae:	2000      	movs	r0, #0
 80082b0:	f000 fec8 	bl	8009044 <lcd_cursor>

    if(strlen(wifiSSID) > 20) {
 80082b4:	4811      	ldr	r0, [pc, #68]	@ (80082fc <ssidConfirmation+0x90>)
 80082b6:	f7f7 ffb5 	bl	8000224 <strlen>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b14      	cmp	r3, #20
 80082be:	d90f      	bls.n	80082e0 <ssidConfirmation+0x74>
    	lcd_print(1, 1, ssidExceedErrorText);
 80082c0:	4a0f      	ldr	r2, [pc, #60]	@ (8008300 <ssidConfirmation+0x94>)
 80082c2:	2101      	movs	r1, #1
 80082c4:	2001      	movs	r0, #1
 80082c6:	f000 fe5f 	bl	8008f88 <lcd_print>
    	lcd_print(2, 1, ssidExceedError2Text);
 80082ca:	4a0e      	ldr	r2, [pc, #56]	@ (8008304 <ssidConfirmation+0x98>)
 80082cc:	2101      	movs	r1, #1
 80082ce:	2002      	movs	r0, #2
 80082d0:	f000 fe5a 	bl	8008f88 <lcd_print>
        HAL_Delay(1250);
 80082d4:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 80082d8:	f001 fbb0 	bl	8009a3c <HAL_Delay>

        return 0;
 80082dc:	2300      	movs	r3, #0
 80082de:	e003      	b.n	80082e8 <ssidConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 80082e0:	2001      	movs	r0, #1
 80082e2:	f7f8 f9e7 	bl	80006b4 <saveEEPROM>

    	return 1;
 80082e6:	2301      	movs	r3, #1
    }
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	0800ebdc 	.word	0x0800ebdc
 80082f4:	20001900 	.word	0x20001900
 80082f8:	40010800 	.word	0x40010800
 80082fc:	20001070 	.word	0x20001070
 8008300:	20001810 	.word	0x20001810
 8008304:	20001824 	.word	0x20001824

08008308 <takeWifiSSID>:

void takeWifiSSID() {
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af00      	add	r7, sp, #0
	mainSSIDSection:

    lcd_cursor(1);
 800830e:	2001      	movs	r0, #1
 8008310:	f000 fe98 	bl	8009044 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 8008314:	2210      	movs	r2, #16
 8008316:	2100      	movs	r1, #0
 8008318:	48a4      	ldr	r0, [pc, #656]	@ (80085ac <takeWifiSSID+0x2a4>)
 800831a:	f005 fac7 	bl	800d8ac <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 800831e:	2301      	movs	r3, #1
 8008320:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8008322:	2307      	movs	r3, #7
 8008324:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8008326:	2301      	movs	r3, #1
 8008328:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 800832a:	2300      	movs	r3, #0
 800832c:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 800832e:	4ba0      	ldr	r3, [pc, #640]	@ (80085b0 <takeWifiSSID+0x2a8>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8008334:	2101      	movs	r1, #1
 8008336:	2002      	movs	r0, #2
 8008338:	f7f8 ff6a 	bl	8001210 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800833c:	2108      	movs	r1, #8
 800833e:	489d      	ldr	r0, [pc, #628]	@ (80085b4 <takeWifiSSID+0x2ac>)
 8008340:	f002 f94c 	bl	800a5dc <HAL_GPIO_ReadPin>
 8008344:	4603      	mov	r3, r0
 8008346:	2b01      	cmp	r3, #1
 8008348:	d106      	bne.n	8008358 <takeWifiSSID+0x50>
        	if(ssidConfirmation() == 0) {
 800834a:	f7ff ff8f 	bl	800826c <ssidConfirmation>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	f040 8126 	bne.w	80085a2 <takeWifiSSID+0x29a>
        		goto mainSSIDSection;
 8008356:	e7da      	b.n	800830e <takeWifiSSID+0x6>
        	} else {
        		break;
        	}
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8008358:	2101      	movs	r1, #1
 800835a:	4896      	ldr	r0, [pc, #600]	@ (80085b4 <takeWifiSSID+0x2ac>)
 800835c:	f002 f93e 	bl	800a5dc <HAL_GPIO_ReadPin>
 8008360:	4603      	mov	r3, r0
 8008362:	2b01      	cmp	r3, #1
 8008364:	d14d      	bne.n	8008402 <takeWifiSSID+0xfa>
        	if(cursorPosition > 80) {
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2b50      	cmp	r3, #80	@ 0x50
 800836a:	dd01      	ble.n	8008370 <takeWifiSSID+0x68>
        		cursorPosition = 1;
 800836c:	2301      	movs	r3, #1
 800836e:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2b10      	cmp	r3, #16
 8008374:	d13f      	bne.n	80083f6 <takeWifiSSID+0xee>
            	if(page == 1) {
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d109      	bne.n	8008390 <takeWifiSSID+0x88>
            		cursorPosition = 1;
 800837c:	2301      	movs	r3, #1
 800837e:	60fb      	str	r3, [r7, #12]
            		page++;
 8008380:	697b      	ldr	r3, [r7, #20]
 8008382:	3301      	adds	r3, #1
 8008384:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8008386:	2102      	movs	r1, #2
 8008388:	2002      	movs	r0, #2
 800838a:	f7f8 ff41 	bl	8001210 <printTemplate>
 800838e:	e035      	b.n	80083fc <takeWifiSSID+0xf4>
            	} else if(page == 2) {
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	2b02      	cmp	r3, #2
 8008394:	d109      	bne.n	80083aa <takeWifiSSID+0xa2>
            		cursorPosition = 1;
 8008396:	2301      	movs	r3, #1
 8008398:	60fb      	str	r3, [r7, #12]
            		page++;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	3301      	adds	r3, #1
 800839e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 80083a0:	2103      	movs	r1, #3
 80083a2:	2002      	movs	r0, #2
 80083a4:	f7f8 ff34 	bl	8001210 <printTemplate>
 80083a8:	e028      	b.n	80083fc <takeWifiSSID+0xf4>
            	} else if(page == 3) {
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	d109      	bne.n	80083c4 <takeWifiSSID+0xbc>
            		cursorPosition = 1;
 80083b0:	2301      	movs	r3, #1
 80083b2:	60fb      	str	r3, [r7, #12]
            		page++;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	3301      	adds	r3, #1
 80083b8:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 80083ba:	2104      	movs	r1, #4
 80083bc:	2002      	movs	r0, #2
 80083be:	f7f8 ff27 	bl	8001210 <printTemplate>
 80083c2:	e01b      	b.n	80083fc <takeWifiSSID+0xf4>
            	} else if(page == 4) {
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	2b04      	cmp	r3, #4
 80083c8:	d109      	bne.n	80083de <takeWifiSSID+0xd6>
            		cursorPosition = 1;
 80083ca:	2301      	movs	r3, #1
 80083cc:	60fb      	str	r3, [r7, #12]
            		page++;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	3301      	adds	r3, #1
 80083d2:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 80083d4:	2105      	movs	r1, #5
 80083d6:	2002      	movs	r0, #2
 80083d8:	f7f8 ff1a 	bl	8001210 <printTemplate>
 80083dc:	e00e      	b.n	80083fc <takeWifiSSID+0xf4>
            	} else if(page == 5) {
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	2b05      	cmp	r3, #5
 80083e2:	d10b      	bne.n	80083fc <takeWifiSSID+0xf4>
            		cursorPosition = 1;
 80083e4:	2301      	movs	r3, #1
 80083e6:	60fb      	str	r3, [r7, #12]
            		page = 1;
 80083e8:	2301      	movs	r3, #1
 80083ea:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 80083ec:	2101      	movs	r1, #1
 80083ee:	2002      	movs	r0, #2
 80083f0:	f7f8 ff0e 	bl	8001210 <printTemplate>
 80083f4:	e002      	b.n	80083fc <takeWifiSSID+0xf4>
            	}
            } else {
            	cursorPosition++;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	3301      	adds	r3, #1
 80083fa:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80083fc:	2096      	movs	r0, #150	@ 0x96
 80083fe:	f001 fb1d 	bl	8009a3c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8008402:	2108      	movs	r1, #8
 8008404:	486c      	ldr	r0, [pc, #432]	@ (80085b8 <takeWifiSSID+0x2b0>)
 8008406:	f002 f8e9 	bl	800a5dc <HAL_GPIO_ReadPin>
 800840a:	4603      	mov	r3, r0
 800840c:	2b01      	cmp	r3, #1
 800840e:	d149      	bne.n	80084a4 <takeWifiSSID+0x19c>
        	if(cursorPosition < 1) {
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2b00      	cmp	r3, #0
 8008414:	dc01      	bgt.n	800841a <takeWifiSSID+0x112>
        		cursorPosition = 80;
 8008416:	2350      	movs	r3, #80	@ 0x50
 8008418:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2b01      	cmp	r3, #1
 800841e:	d13b      	bne.n	8008498 <takeWifiSSID+0x190>
            	if(page == 1) {
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	2b01      	cmp	r3, #1
 8008424:	d108      	bne.n	8008438 <takeWifiSSID+0x130>
            		cursorPosition = 16;
 8008426:	2310      	movs	r3, #16
 8008428:	60fb      	str	r3, [r7, #12]
            		page = 5;
 800842a:	2305      	movs	r3, #5
 800842c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 800842e:	2105      	movs	r1, #5
 8008430:	2002      	movs	r0, #2
 8008432:	f7f8 feed 	bl	8001210 <printTemplate>
 8008436:	e032      	b.n	800849e <takeWifiSSID+0x196>
            	} else if(page == 2) {
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	2b02      	cmp	r3, #2
 800843c:	d108      	bne.n	8008450 <takeWifiSSID+0x148>
            		cursorPosition = 16;
 800843e:	2310      	movs	r3, #16
 8008440:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008442:	2301      	movs	r3, #1
 8008444:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8008446:	2101      	movs	r1, #1
 8008448:	2002      	movs	r0, #2
 800844a:	f7f8 fee1 	bl	8001210 <printTemplate>
 800844e:	e026      	b.n	800849e <takeWifiSSID+0x196>
            	} else if(page == 3) {
 8008450:	697b      	ldr	r3, [r7, #20]
 8008452:	2b03      	cmp	r3, #3
 8008454:	d108      	bne.n	8008468 <takeWifiSSID+0x160>
            		cursorPosition = 16;
 8008456:	2310      	movs	r3, #16
 8008458:	60fb      	str	r3, [r7, #12]
            		page = 2;
 800845a:	2302      	movs	r3, #2
 800845c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 800845e:	2102      	movs	r1, #2
 8008460:	2002      	movs	r0, #2
 8008462:	f7f8 fed5 	bl	8001210 <printTemplate>
 8008466:	e01a      	b.n	800849e <takeWifiSSID+0x196>
            	} else if(page == 4) {
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	2b04      	cmp	r3, #4
 800846c:	d108      	bne.n	8008480 <takeWifiSSID+0x178>
            		cursorPosition = 16;
 800846e:	2310      	movs	r3, #16
 8008470:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8008472:	2303      	movs	r3, #3
 8008474:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8008476:	2103      	movs	r1, #3
 8008478:	2002      	movs	r0, #2
 800847a:	f7f8 fec9 	bl	8001210 <printTemplate>
 800847e:	e00e      	b.n	800849e <takeWifiSSID+0x196>
            	} else if(page == 5) {
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	2b05      	cmp	r3, #5
 8008484:	d10b      	bne.n	800849e <takeWifiSSID+0x196>
            		cursorPosition = 16;
 8008486:	2310      	movs	r3, #16
 8008488:	60fb      	str	r3, [r7, #12]
            		page = 4;
 800848a:	2304      	movs	r3, #4
 800848c:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 800848e:	2104      	movs	r1, #4
 8008490:	2002      	movs	r0, #2
 8008492:	f7f8 febd 	bl	8001210 <printTemplate>
 8008496:	e002      	b.n	800849e <takeWifiSSID+0x196>
            	}
            } else {
            	cursorPosition--;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	3b01      	subs	r3, #1
 800849c:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 800849e:	2096      	movs	r0, #150	@ 0x96
 80084a0:	f001 facc 	bl	8009a3c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80084a4:	2102      	movs	r1, #2
 80084a6:	4843      	ldr	r0, [pc, #268]	@ (80085b4 <takeWifiSSID+0x2ac>)
 80084a8:	f002 f898 	bl	800a5dc <HAL_GPIO_ReadPin>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d12f      	bne.n	8008512 <takeWifiSSID+0x20a>
            eepromData[eepromVal] = cursorPosition;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	b2d9      	uxtb	r1, r3
 80084b6:	4a41      	ldr	r2, [pc, #260]	@ (80085bc <takeWifiSSID+0x2b4>)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4413      	add	r3, r2
 80084bc:	460a      	mov	r2, r1
 80084be:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 80084c0:	4a3f      	ldr	r2, [pc, #252]	@ (80085c0 <takeWifiSSID+0x2b8>)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	4413      	add	r3, r2
 80084c6:	7819      	ldrb	r1, [r3, #0]
 80084c8:	4a38      	ldr	r2, [pc, #224]	@ (80085ac <takeWifiSSID+0x2a4>)
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	4413      	add	r3, r2
 80084ce:	460a      	mov	r2, r1
 80084d0:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	b2d9      	uxtb	r1, r3
 80084d6:	4a3a      	ldr	r2, [pc, #232]	@ (80085c0 <takeWifiSSID+0x2b8>)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	4413      	add	r3, r2
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	461a      	mov	r2, r3
 80084e0:	2001      	movs	r0, #1
 80084e2:	f000 fd66 	bl	8008fb2 <lcd_print_char>

            writeLoc++;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	3301      	adds	r3, #1
 80084ea:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	3301      	adds	r3, #1
 80084f0:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	3301      	adds	r3, #1
 80084f6:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 80084f8:	4a30      	ldr	r2, [pc, #192]	@ (80085bc <takeWifiSSID+0x2b4>)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	4413      	add	r3, r2
 80084fe:	2200      	movs	r2, #0
 8008500:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 8008502:	4a2a      	ldr	r2, [pc, #168]	@ (80085ac <takeWifiSSID+0x2a4>)
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	4413      	add	r3, r2
 8008508:	2200      	movs	r2, #0
 800850a:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 800850c:	2096      	movs	r0, #150	@ 0x96
 800850e:	f001 fa95 	bl	8009a3c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8008512:	2104      	movs	r1, #4
 8008514:	4827      	ldr	r0, [pc, #156]	@ (80085b4 <takeWifiSSID+0x2ac>)
 8008516:	f002 f861 	bl	800a5dc <HAL_GPIO_ReadPin>
 800851a:	4603      	mov	r3, r0
 800851c:	2b01      	cmp	r3, #1
 800851e:	d139      	bne.n	8008594 <takeWifiSSID+0x28c>
        	if(strlen(wifiSSID) >= 1) {
 8008520:	4b22      	ldr	r3, [pc, #136]	@ (80085ac <takeWifiSSID+0x2a4>)
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d032      	beq.n	800858e <takeWifiSSID+0x286>
        		eepromData[eepromVal] = '\0';
 8008528:	4a24      	ldr	r2, [pc, #144]	@ (80085bc <takeWifiSSID+0x2b4>)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4413      	add	r3, r2
 800852e:	2200      	movs	r2, #0
 8008530:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 8008532:	4a1e      	ldr	r2, [pc, #120]	@ (80085ac <takeWifiSSID+0x2a4>)
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	4413      	add	r3, r2
 8008538:	2200      	movs	r2, #0
 800853a:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	2b07      	cmp	r3, #7
 8008540:	dd03      	ble.n	800854a <takeWifiSSID+0x242>
        			writeLoc--;
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	3b01      	subs	r3, #1
 8008546:	613b      	str	r3, [r7, #16]
 8008548:	e004      	b.n	8008554 <takeWifiSSID+0x24c>
        		} else if(writeLoc < 7) {
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	2b06      	cmp	r3, #6
 800854e:	dc01      	bgt.n	8008554 <takeWifiSSID+0x24c>
        			writeLoc = 7;
 8008550:	2307      	movs	r3, #7
 8008552:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	2b00      	cmp	r3, #0
 8008558:	dd06      	ble.n	8008568 <takeWifiSSID+0x260>
        			arrayPosition--;
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	3b01      	subs	r3, #1
 800855e:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	3b01      	subs	r3, #1
 8008564:	607b      	str	r3, [r7, #4]
 8008566:	e007      	b.n	8008578 <takeWifiSSID+0x270>
        		} else if(arrayPosition < 0) {
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	2b00      	cmp	r3, #0
 800856c:	da04      	bge.n	8008578 <takeWifiSSID+0x270>
        			arrayPosition = 0;
 800856e:	2300      	movs	r3, #0
 8008570:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8008572:	4b0f      	ldr	r3, [pc, #60]	@ (80085b0 <takeWifiSSID+0x2a8>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	b2db      	uxtb	r3, r3
 800857c:	3307      	adds	r3, #7
 800857e:	b2db      	uxtb	r3, r3
 8008580:	4619      	mov	r1, r3
 8008582:	2001      	movs	r0, #1
 8008584:	f000 fd36 	bl	8008ff4 <lcd_delete_char>
        		HAL_Delay(50);
 8008588:	2032      	movs	r0, #50	@ 0x32
 800858a:	f001 fa57 	bl	8009a3c <HAL_Delay>
        	}

        	HAL_Delay(150);
 800858e:	2096      	movs	r0, #150	@ 0x96
 8008590:	f001 fa54 	bl	8009a3c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	b2db      	uxtb	r3, r3
 8008598:	4619      	mov	r1, r3
 800859a:	2002      	movs	r0, #2
 800859c:	f000 fcd5 	bl	8008f4a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80085a0:	e6cc      	b.n	800833c <takeWifiSSID+0x34>
        		break;
 80085a2:	bf00      	nop
    }
}
 80085a4:	bf00      	nop
 80085a6:	3718      	adds	r7, #24
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	20001070 	.word	0x20001070
 80085b0:	20000004 	.word	0x20000004
 80085b4:	40010800 	.word	0x40010800
 80085b8:	40011000 	.word	0x40011000
 80085bc:	20000fec 	.word	0x20000fec
 80085c0:	20000018 	.word	0x20000018

080085c4 <passConfirmation>:

uint8_t passConfirmation() {
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b082      	sub	sp, #8
 80085c8:	af00      	add	r7, sp, #0
	int loopVal = 1;
 80085ca:	2301      	movs	r3, #1
 80085cc:	607b      	str	r3, [r7, #4]
	lcd_print(1, 1, "                ");
 80085ce:	4a1e      	ldr	r2, [pc, #120]	@ (8008648 <passConfirmation+0x84>)
 80085d0:	2101      	movs	r1, #1
 80085d2:	2001      	movs	r0, #1
 80085d4:	f000 fcd8 	bl	8008f88 <lcd_print>

	while(loopVal == 1) {
 80085d8:	e012      	b.n	8008600 <passConfirmation+0x3c>
		lcd_print(2, 1, wifiConfirmationText);
 80085da:	4a1c      	ldr	r2, [pc, #112]	@ (800864c <passConfirmation+0x88>)
 80085dc:	2101      	movs	r1, #1
 80085de:	2002      	movs	r0, #2
 80085e0:	f000 fcd2 	bl	8008f88 <lcd_print>
		if(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80085e4:	2102      	movs	r1, #2
 80085e6:	481a      	ldr	r0, [pc, #104]	@ (8008650 <passConfirmation+0x8c>)
 80085e8:	f001 fff8 	bl	800a5dc <HAL_GPIO_ReadPin>
 80085ec:	4603      	mov	r3, r0
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d101      	bne.n	80085f6 <passConfirmation+0x32>
			loopVal = 0;
 80085f2:	2300      	movs	r3, #0
 80085f4:	607b      	str	r3, [r7, #4]
		}

		lcd_print(1, 1, wifiPass);
 80085f6:	4a17      	ldr	r2, [pc, #92]	@ (8008654 <passConfirmation+0x90>)
 80085f8:	2101      	movs	r1, #1
 80085fa:	2001      	movs	r0, #1
 80085fc:	f000 fcc4 	bl	8008f88 <lcd_print>
	while(loopVal == 1) {
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d0e9      	beq.n	80085da <passConfirmation+0x16>
	}

    lcd_cursor(0);
 8008606:	2000      	movs	r0, #0
 8008608:	f000 fd1c 	bl	8009044 <lcd_cursor>

    if(strlen(wifiPass) > 20) {
 800860c:	4811      	ldr	r0, [pc, #68]	@ (8008654 <passConfirmation+0x90>)
 800860e:	f7f7 fe09 	bl	8000224 <strlen>
 8008612:	4603      	mov	r3, r0
 8008614:	2b14      	cmp	r3, #20
 8008616:	d90f      	bls.n	8008638 <passConfirmation+0x74>
    	lcd_print(1, 1, passExceedErrorText);
 8008618:	4a0f      	ldr	r2, [pc, #60]	@ (8008658 <passConfirmation+0x94>)
 800861a:	2101      	movs	r1, #1
 800861c:	2001      	movs	r0, #1
 800861e:	f000 fcb3 	bl	8008f88 <lcd_print>
    	lcd_print(2, 1, passExceedError2Text);
 8008622:	4a0e      	ldr	r2, [pc, #56]	@ (800865c <passConfirmation+0x98>)
 8008624:	2101      	movs	r1, #1
 8008626:	2002      	movs	r0, #2
 8008628:	f000 fcae 	bl	8008f88 <lcd_print>
        HAL_Delay(1250);
 800862c:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8008630:	f001 fa04 	bl	8009a3c <HAL_Delay>

        return 0;
 8008634:	2300      	movs	r3, #0
 8008636:	e003      	b.n	8008640 <passConfirmation+0x7c>
    } else {
    	saveEEPROM(1);
 8008638:	2001      	movs	r0, #1
 800863a:	f7f8 f83b 	bl	80006b4 <saveEEPROM>

    	return 1;
 800863e:	2301      	movs	r3, #1
    }
}
 8008640:	4618      	mov	r0, r3
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	0800ebdc 	.word	0x0800ebdc
 800864c:	20001900 	.word	0x20001900
 8008650:	40010800 	.word	0x40010800
 8008654:	20001080 	.word	0x20001080
 8008658:	20001838 	.word	0x20001838
 800865c:	2000184c 	.word	0x2000184c

08008660 <takeWifiPass>:

void takeWifiPass() {
 8008660:	b580      	push	{r7, lr}
 8008662:	b086      	sub	sp, #24
 8008664:	af00      	add	r7, sp, #0
	mainPassSection:

    lcd_cursor(1);
 8008666:	2001      	movs	r0, #1
 8008668:	f000 fcec 	bl	8009044 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 800866c:	2210      	movs	r2, #16
 800866e:	2100      	movs	r1, #0
 8008670:	48a4      	ldr	r0, [pc, #656]	@ (8008904 <takeWifiPass+0x2a4>)
 8008672:	f005 f91b 	bl	800d8ac <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8008676:	2301      	movs	r3, #1
 8008678:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 800867a:	2307      	movs	r3, #7
 800867c:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 800867e:	2301      	movs	r3, #1
 8008680:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8008682:	2300      	movs	r3, #0
 8008684:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8008686:	4ba0      	ldr	r3, [pc, #640]	@ (8008908 <takeWifiPass+0x2a8>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 800868c:	2101      	movs	r1, #1
 800868e:	2003      	movs	r0, #3
 8008690:	f7f8 fdbe 	bl	8001210 <printTemplate>

    while (1) {
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008694:	2108      	movs	r1, #8
 8008696:	489d      	ldr	r0, [pc, #628]	@ (800890c <takeWifiPass+0x2ac>)
 8008698:	f001 ffa0 	bl	800a5dc <HAL_GPIO_ReadPin>
 800869c:	4603      	mov	r3, r0
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d106      	bne.n	80086b0 <takeWifiPass+0x50>
    	    if(passConfirmation() == 0) {
 80086a2:	f7ff ff8f 	bl	80085c4 <passConfirmation>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f040 8126 	bne.w	80088fa <takeWifiPass+0x29a>
    	        goto mainPassSection;
 80086ae:	e7da      	b.n	8008666 <takeWifiPass+0x6>
    	    } else {
    	        break;
    	    }
    	}

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80086b0:	2101      	movs	r1, #1
 80086b2:	4896      	ldr	r0, [pc, #600]	@ (800890c <takeWifiPass+0x2ac>)
 80086b4:	f001 ff92 	bl	800a5dc <HAL_GPIO_ReadPin>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d14d      	bne.n	800875a <takeWifiPass+0xfa>
        	if(cursorPosition > 80) {
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	2b50      	cmp	r3, #80	@ 0x50
 80086c2:	dd01      	ble.n	80086c8 <takeWifiPass+0x68>
        		cursorPosition = 1;
 80086c4:	2301      	movs	r3, #1
 80086c6:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b10      	cmp	r3, #16
 80086cc:	d13f      	bne.n	800874e <takeWifiPass+0xee>
            	if(page == 1) {
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d109      	bne.n	80086e8 <takeWifiPass+0x88>
            		cursorPosition = 1;
 80086d4:	2301      	movs	r3, #1
 80086d6:	60fb      	str	r3, [r7, #12]
            		page++;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	3301      	adds	r3, #1
 80086dc:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80086de:	2102      	movs	r1, #2
 80086e0:	2003      	movs	r0, #3
 80086e2:	f7f8 fd95 	bl	8001210 <printTemplate>
 80086e6:	e035      	b.n	8008754 <takeWifiPass+0xf4>
            	} else if(page == 2) {
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	2b02      	cmp	r3, #2
 80086ec:	d109      	bne.n	8008702 <takeWifiPass+0xa2>
            		cursorPosition = 1;
 80086ee:	2301      	movs	r3, #1
 80086f0:	60fb      	str	r3, [r7, #12]
            		page++;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	3301      	adds	r3, #1
 80086f6:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80086f8:	2103      	movs	r1, #3
 80086fa:	2003      	movs	r0, #3
 80086fc:	f7f8 fd88 	bl	8001210 <printTemplate>
 8008700:	e028      	b.n	8008754 <takeWifiPass+0xf4>
            	} else if(page == 3) {
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	2b03      	cmp	r3, #3
 8008706:	d109      	bne.n	800871c <takeWifiPass+0xbc>
            		cursorPosition = 1;
 8008708:	2301      	movs	r3, #1
 800870a:	60fb      	str	r3, [r7, #12]
            		page++;
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	3301      	adds	r3, #1
 8008710:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8008712:	2104      	movs	r1, #4
 8008714:	2003      	movs	r0, #3
 8008716:	f7f8 fd7b 	bl	8001210 <printTemplate>
 800871a:	e01b      	b.n	8008754 <takeWifiPass+0xf4>
            	} else if(page == 4) {
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	2b04      	cmp	r3, #4
 8008720:	d109      	bne.n	8008736 <takeWifiPass+0xd6>
            		cursorPosition = 1;
 8008722:	2301      	movs	r3, #1
 8008724:	60fb      	str	r3, [r7, #12]
            		page++;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	3301      	adds	r3, #1
 800872a:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 800872c:	2105      	movs	r1, #5
 800872e:	2003      	movs	r0, #3
 8008730:	f7f8 fd6e 	bl	8001210 <printTemplate>
 8008734:	e00e      	b.n	8008754 <takeWifiPass+0xf4>
            	} else if(page == 5) {
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2b05      	cmp	r3, #5
 800873a:	d10b      	bne.n	8008754 <takeWifiPass+0xf4>
            		cursorPosition = 1;
 800873c:	2301      	movs	r3, #1
 800873e:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8008740:	2301      	movs	r3, #1
 8008742:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8008744:	2101      	movs	r1, #1
 8008746:	2003      	movs	r0, #3
 8008748:	f7f8 fd62 	bl	8001210 <printTemplate>
 800874c:	e002      	b.n	8008754 <takeWifiPass+0xf4>
            	}
            } else {
            	cursorPosition++;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3301      	adds	r3, #1
 8008752:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008754:	2096      	movs	r0, #150	@ 0x96
 8008756:	f001 f971 	bl	8009a3c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800875a:	2108      	movs	r1, #8
 800875c:	486c      	ldr	r0, [pc, #432]	@ (8008910 <takeWifiPass+0x2b0>)
 800875e:	f001 ff3d 	bl	800a5dc <HAL_GPIO_ReadPin>
 8008762:	4603      	mov	r3, r0
 8008764:	2b01      	cmp	r3, #1
 8008766:	d149      	bne.n	80087fc <takeWifiPass+0x19c>
        	if(cursorPosition < 1) {
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	dc01      	bgt.n	8008772 <takeWifiPass+0x112>
        		cursorPosition = 80;
 800876e:	2350      	movs	r3, #80	@ 0x50
 8008770:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d13b      	bne.n	80087f0 <takeWifiPass+0x190>
            	if(page == 1) {
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d108      	bne.n	8008790 <takeWifiPass+0x130>
            		cursorPosition = 16;
 800877e:	2310      	movs	r3, #16
 8008780:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8008782:	2305      	movs	r3, #5
 8008784:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8008786:	2105      	movs	r1, #5
 8008788:	2003      	movs	r0, #3
 800878a:	f7f8 fd41 	bl	8001210 <printTemplate>
 800878e:	e032      	b.n	80087f6 <takeWifiPass+0x196>
            	} else if(page == 2) {
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	2b02      	cmp	r3, #2
 8008794:	d108      	bne.n	80087a8 <takeWifiPass+0x148>
            		cursorPosition = 16;
 8008796:	2310      	movs	r3, #16
 8008798:	60fb      	str	r3, [r7, #12]
            		page = 1;
 800879a:	2301      	movs	r3, #1
 800879c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 800879e:	2101      	movs	r1, #1
 80087a0:	2003      	movs	r0, #3
 80087a2:	f7f8 fd35 	bl	8001210 <printTemplate>
 80087a6:	e026      	b.n	80087f6 <takeWifiPass+0x196>
            	} else if(page == 3) {
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	2b03      	cmp	r3, #3
 80087ac:	d108      	bne.n	80087c0 <takeWifiPass+0x160>
            		cursorPosition = 16;
 80087ae:	2310      	movs	r3, #16
 80087b0:	60fb      	str	r3, [r7, #12]
            		page = 2;
 80087b2:	2302      	movs	r3, #2
 80087b4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 80087b6:	2102      	movs	r1, #2
 80087b8:	2003      	movs	r0, #3
 80087ba:	f7f8 fd29 	bl	8001210 <printTemplate>
 80087be:	e01a      	b.n	80087f6 <takeWifiPass+0x196>
            	} else if(page == 4) {
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	2b04      	cmp	r3, #4
 80087c4:	d108      	bne.n	80087d8 <takeWifiPass+0x178>
            		cursorPosition = 16;
 80087c6:	2310      	movs	r3, #16
 80087c8:	60fb      	str	r3, [r7, #12]
            		page = 3;
 80087ca:	2303      	movs	r3, #3
 80087cc:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 80087ce:	2103      	movs	r1, #3
 80087d0:	2003      	movs	r0, #3
 80087d2:	f7f8 fd1d 	bl	8001210 <printTemplate>
 80087d6:	e00e      	b.n	80087f6 <takeWifiPass+0x196>
            	} else if(page == 5) {
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2b05      	cmp	r3, #5
 80087dc:	d10b      	bne.n	80087f6 <takeWifiPass+0x196>
            		cursorPosition = 16;
 80087de:	2310      	movs	r3, #16
 80087e0:	60fb      	str	r3, [r7, #12]
            		page = 4;
 80087e2:	2304      	movs	r3, #4
 80087e4:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 80087e6:	2104      	movs	r1, #4
 80087e8:	2003      	movs	r0, #3
 80087ea:	f7f8 fd11 	bl	8001210 <printTemplate>
 80087ee:	e002      	b.n	80087f6 <takeWifiPass+0x196>
            	}
            } else {
            	cursorPosition--;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	3b01      	subs	r3, #1
 80087f4:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 80087f6:	2096      	movs	r0, #150	@ 0x96
 80087f8:	f001 f920 	bl	8009a3c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80087fc:	2102      	movs	r1, #2
 80087fe:	4843      	ldr	r0, [pc, #268]	@ (800890c <takeWifiPass+0x2ac>)
 8008800:	f001 feec 	bl	800a5dc <HAL_GPIO_ReadPin>
 8008804:	4603      	mov	r3, r0
 8008806:	2b01      	cmp	r3, #1
 8008808:	d12f      	bne.n	800886a <takeWifiPass+0x20a>
            eepromData[eepromVal] = cursorPosition;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	b2d9      	uxtb	r1, r3
 800880e:	4a41      	ldr	r2, [pc, #260]	@ (8008914 <takeWifiPass+0x2b4>)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	4413      	add	r3, r2
 8008814:	460a      	mov	r2, r1
 8008816:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 8008818:	4a3f      	ldr	r2, [pc, #252]	@ (8008918 <takeWifiPass+0x2b8>)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	4413      	add	r3, r2
 800881e:	7819      	ldrb	r1, [r3, #0]
 8008820:	4a38      	ldr	r2, [pc, #224]	@ (8008904 <takeWifiPass+0x2a4>)
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	4413      	add	r3, r2
 8008826:	460a      	mov	r2, r1
 8008828:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	b2d9      	uxtb	r1, r3
 800882e:	4a3a      	ldr	r2, [pc, #232]	@ (8008918 <takeWifiPass+0x2b8>)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	4413      	add	r3, r2
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	461a      	mov	r2, r3
 8008838:	2001      	movs	r0, #1
 800883a:	f000 fbba 	bl	8008fb2 <lcd_print_char>

            writeLoc++;
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	3301      	adds	r3, #1
 8008842:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	3301      	adds	r3, #1
 8008848:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	3301      	adds	r3, #1
 800884e:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8008850:	4a30      	ldr	r2, [pc, #192]	@ (8008914 <takeWifiPass+0x2b4>)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4413      	add	r3, r2
 8008856:	2200      	movs	r2, #0
 8008858:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 800885a:	4a2a      	ldr	r2, [pc, #168]	@ (8008904 <takeWifiPass+0x2a4>)
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	4413      	add	r3, r2
 8008860:	2200      	movs	r2, #0
 8008862:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8008864:	2096      	movs	r0, #150	@ 0x96
 8008866:	f001 f8e9 	bl	8009a3c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800886a:	2104      	movs	r1, #4
 800886c:	4827      	ldr	r0, [pc, #156]	@ (800890c <takeWifiPass+0x2ac>)
 800886e:	f001 feb5 	bl	800a5dc <HAL_GPIO_ReadPin>
 8008872:	4603      	mov	r3, r0
 8008874:	2b01      	cmp	r3, #1
 8008876:	d139      	bne.n	80088ec <takeWifiPass+0x28c>
        	if(strlen(wifiPass) >= 1) {
 8008878:	4b22      	ldr	r3, [pc, #136]	@ (8008904 <takeWifiPass+0x2a4>)
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d032      	beq.n	80088e6 <takeWifiPass+0x286>
        		eepromData[eepromVal] = '\0';
 8008880:	4a24      	ldr	r2, [pc, #144]	@ (8008914 <takeWifiPass+0x2b4>)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4413      	add	r3, r2
 8008886:	2200      	movs	r2, #0
 8008888:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 800888a:	4a1e      	ldr	r2, [pc, #120]	@ (8008904 <takeWifiPass+0x2a4>)
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	4413      	add	r3, r2
 8008890:	2200      	movs	r2, #0
 8008892:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	2b07      	cmp	r3, #7
 8008898:	dd03      	ble.n	80088a2 <takeWifiPass+0x242>
        			writeLoc--;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	3b01      	subs	r3, #1
 800889e:	613b      	str	r3, [r7, #16]
 80088a0:	e004      	b.n	80088ac <takeWifiPass+0x24c>
        		} else if(writeLoc < 7) {
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	2b06      	cmp	r3, #6
 80088a6:	dc01      	bgt.n	80088ac <takeWifiPass+0x24c>
        			writeLoc = 7;
 80088a8:	2307      	movs	r3, #7
 80088aa:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	dd06      	ble.n	80088c0 <takeWifiPass+0x260>
        			arrayPosition--;
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	3b01      	subs	r3, #1
 80088b6:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	3b01      	subs	r3, #1
 80088bc:	607b      	str	r3, [r7, #4]
 80088be:	e007      	b.n	80088d0 <takeWifiPass+0x270>
        		} else if(arrayPosition < 0) {
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	da04      	bge.n	80088d0 <takeWifiPass+0x270>
        			arrayPosition = 0;
 80088c6:	2300      	movs	r3, #0
 80088c8:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 80088ca:	4b0f      	ldr	r3, [pc, #60]	@ (8008908 <takeWifiPass+0x2a8>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	3307      	adds	r3, #7
 80088d6:	b2db      	uxtb	r3, r3
 80088d8:	4619      	mov	r1, r3
 80088da:	2001      	movs	r0, #1
 80088dc:	f000 fb8a 	bl	8008ff4 <lcd_delete_char>
        		HAL_Delay(50);
 80088e0:	2032      	movs	r0, #50	@ 0x32
 80088e2:	f001 f8ab 	bl	8009a3c <HAL_Delay>
        	}

        	HAL_Delay(150);
 80088e6:	2096      	movs	r0, #150	@ 0x96
 80088e8:	f001 f8a8 	bl	8009a3c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	4619      	mov	r1, r3
 80088f2:	2002      	movs	r0, #2
 80088f4:	f000 fb29 	bl	8008f4a <lcd_gotoxy>
    	if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80088f8:	e6cc      	b.n	8008694 <takeWifiPass+0x34>
    	        break;
 80088fa:	bf00      	nop
    }
}
 80088fc:	bf00      	nop
 80088fe:	3718      	adds	r7, #24
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	20001080 	.word	0x20001080
 8008908:	20000008 	.word	0x20000008
 800890c:	40010800 	.word	0x40010800
 8008910:	40011000 	.word	0x40011000
 8008914:	20000fec 	.word	0x20000fec
 8008918:	20000018 	.word	0x20000018

0800891c <mergeData>:

char* mergeData() {
 800891c:	b580      	push	{r7, lr}
 800891e:	b09c      	sub	sp, #112	@ 0x70
 8008920:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8008922:	2300      	movs	r3, #0
 8008924:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008926:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800892a:	2229      	movs	r2, #41	@ 0x29
 800892c:	2100      	movs	r1, #0
 800892e:	4618      	mov	r0, r3
 8008930:	f004 ffbc 	bl	800d8ac <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8008934:	4b5f      	ldr	r3, [pc, #380]	@ (8008ab4 <mergeData+0x198>)
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	703b      	strb	r3, [r7, #0]
 800893a:	4b5f      	ldr	r3, [pc, #380]	@ (8008ab8 <mergeData+0x19c>)
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	707b      	strb	r3, [r7, #1]
 8008940:	4b5e      	ldr	r3, [pc, #376]	@ (8008abc <mergeData+0x1a0>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	70bb      	strb	r3, [r7, #2]
 8008946:	4b5e      	ldr	r3, [pc, #376]	@ (8008ac0 <mergeData+0x1a4>)
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	70fb      	strb	r3, [r7, #3]
 800894c:	4b5d      	ldr	r3, [pc, #372]	@ (8008ac4 <mergeData+0x1a8>)
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	713b      	strb	r3, [r7, #4]
 8008952:	4b5d      	ldr	r3, [pc, #372]	@ (8008ac8 <mergeData+0x1ac>)
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	717b      	strb	r3, [r7, #5]
 8008958:	4b5c      	ldr	r3, [pc, #368]	@ (8008acc <mergeData+0x1b0>)
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	71bb      	strb	r3, [r7, #6]
 800895e:	4b5c      	ldr	r3, [pc, #368]	@ (8008ad0 <mergeData+0x1b4>)
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	71fb      	strb	r3, [r7, #7]
 8008964:	4b5b      	ldr	r3, [pc, #364]	@ (8008ad4 <mergeData+0x1b8>)
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	723b      	strb	r3, [r7, #8]
 800896a:	4b5b      	ldr	r3, [pc, #364]	@ (8008ad8 <mergeData+0x1bc>)
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	727b      	strb	r3, [r7, #9]
 8008970:	4b5a      	ldr	r3, [pc, #360]	@ (8008adc <mergeData+0x1c0>)
 8008972:	781b      	ldrb	r3, [r3, #0]
 8008974:	72bb      	strb	r3, [r7, #10]
 8008976:	4b5a      	ldr	r3, [pc, #360]	@ (8008ae0 <mergeData+0x1c4>)
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	72fb      	strb	r3, [r7, #11]
 800897c:	4b59      	ldr	r3, [pc, #356]	@ (8008ae4 <mergeData+0x1c8>)
 800897e:	781b      	ldrb	r3, [r3, #0]
 8008980:	733b      	strb	r3, [r7, #12]
 8008982:	4b59      	ldr	r3, [pc, #356]	@ (8008ae8 <mergeData+0x1cc>)
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	737b      	strb	r3, [r7, #13]
 8008988:	4b58      	ldr	r3, [pc, #352]	@ (8008aec <mergeData+0x1d0>)
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	73bb      	strb	r3, [r7, #14]
 800898e:	4b58      	ldr	r3, [pc, #352]	@ (8008af0 <mergeData+0x1d4>)
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	73fb      	strb	r3, [r7, #15]
 8008994:	4b57      	ldr	r3, [pc, #348]	@ (8008af4 <mergeData+0x1d8>)
 8008996:	781b      	ldrb	r3, [r3, #0]
 8008998:	743b      	strb	r3, [r7, #16]
 800899a:	4b57      	ldr	r3, [pc, #348]	@ (8008af8 <mergeData+0x1dc>)
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	747b      	strb	r3, [r7, #17]
 80089a0:	4b56      	ldr	r3, [pc, #344]	@ (8008afc <mergeData+0x1e0>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	74bb      	strb	r3, [r7, #18]
 80089a6:	4b56      	ldr	r3, [pc, #344]	@ (8008b00 <mergeData+0x1e4>)
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	74fb      	strb	r3, [r7, #19]
 80089ac:	4b55      	ldr	r3, [pc, #340]	@ (8008b04 <mergeData+0x1e8>)
 80089ae:	781b      	ldrb	r3, [r3, #0]
 80089b0:	753b      	strb	r3, [r7, #20]
 80089b2:	4b55      	ldr	r3, [pc, #340]	@ (8008b08 <mergeData+0x1ec>)
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	757b      	strb	r3, [r7, #21]
 80089b8:	4b54      	ldr	r3, [pc, #336]	@ (8008b0c <mergeData+0x1f0>)
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	75bb      	strb	r3, [r7, #22]
 80089be:	4b54      	ldr	r3, [pc, #336]	@ (8008b10 <mergeData+0x1f4>)
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	75fb      	strb	r3, [r7, #23]
 80089c4:	4b53      	ldr	r3, [pc, #332]	@ (8008b14 <mergeData+0x1f8>)
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	763b      	strb	r3, [r7, #24]
 80089ca:	4b53      	ldr	r3, [pc, #332]	@ (8008b18 <mergeData+0x1fc>)
 80089cc:	781b      	ldrb	r3, [r3, #0]
 80089ce:	767b      	strb	r3, [r7, #25]
 80089d0:	4b52      	ldr	r3, [pc, #328]	@ (8008b1c <mergeData+0x200>)
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	76bb      	strb	r3, [r7, #26]
 80089d6:	4b52      	ldr	r3, [pc, #328]	@ (8008b20 <mergeData+0x204>)
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	76fb      	strb	r3, [r7, #27]
 80089dc:	4b51      	ldr	r3, [pc, #324]	@ (8008b24 <mergeData+0x208>)
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	773b      	strb	r3, [r7, #28]
 80089e2:	4b51      	ldr	r3, [pc, #324]	@ (8008b28 <mergeData+0x20c>)
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	777b      	strb	r3, [r7, #29]
			buzzer,
			demoMode,
			calismaSayisi,
			calismaSayisiDemo,
			dilSecim,
			eepromData[38],
 80089e8:	4b50      	ldr	r3, [pc, #320]	@ (8008b2c <mergeData+0x210>)
 80089ea:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	uint8_t uintVariables[] = {
 80089ee:	77bb      	strb	r3, [r7, #30]
			eepromData[39],
 80089f0:	4b4e      	ldr	r3, [pc, #312]	@ (8008b2c <mergeData+0x210>)
 80089f2:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	uint8_t uintVariables[] = {
 80089f6:	77fb      	strb	r3, [r7, #31]
			eepromData[40],
 80089f8:	4b4c      	ldr	r3, [pc, #304]	@ (8008b2c <mergeData+0x210>)
 80089fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	uint8_t uintVariables[] = {
 80089fe:	f887 3020 	strb.w	r3, [r7, #32]
			eepromData[41],
 8008a02:	4b4a      	ldr	r3, [pc, #296]	@ (8008b2c <mergeData+0x210>)
 8008a04:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	uint8_t uintVariables[] = {
 8008a08:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[42],
 8008a0c:	4b47      	ldr	r3, [pc, #284]	@ (8008b2c <mergeData+0x210>)
 8008a0e:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	uint8_t uintVariables[] = {
 8008a12:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[43],
 8008a16:	4b45      	ldr	r3, [pc, #276]	@ (8008b2c <mergeData+0x210>)
 8008a18:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	uint8_t uintVariables[] = {
 8008a1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[44],
 8008a20:	4b42      	ldr	r3, [pc, #264]	@ (8008b2c <mergeData+0x210>)
 8008a22:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	uint8_t uintVariables[] = {
 8008a26:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[45],
 8008a2a:	4b40      	ldr	r3, [pc, #256]	@ (8008b2c <mergeData+0x210>)
 8008a2c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	uint8_t uintVariables[] = {
 8008a30:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[46],
 8008a34:	4b3d      	ldr	r3, [pc, #244]	@ (8008b2c <mergeData+0x210>)
 8008a36:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	uint8_t uintVariables[] = {
 8008a3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[47],
 8008a3e:	4b3b      	ldr	r3, [pc, #236]	@ (8008b2c <mergeData+0x210>)
 8008a40:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	uint8_t uintVariables[] = {
 8008a44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008a48:	2306      	movs	r3, #6
 8008a4a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008a4e:	2300      	movs	r3, #0
 8008a50:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a52:	e015      	b.n	8008a80 <mergeData+0x164>
	    sprintf(temp, "%u", uintVariables[i]);
 8008a54:	463a      	mov	r2, r7
 8008a56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a58:	4413      	add	r3, r2
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008a62:	4933      	ldr	r1, [pc, #204]	@ (8008b30 <mergeData+0x214>)
 8008a64:	4618      	mov	r0, r3
 8008a66:	f004 fe9d 	bl	800d7a4 <siprintf>
	    strcat(combinedString, temp);
 8008a6a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008a6e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008a72:	4611      	mov	r1, r2
 8008a74:	4618      	mov	r0, r3
 8008a76:	f004 fef7 	bl	800d868 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008a7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a7c:	3301      	adds	r3, #1
 8008a7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008a80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008a82:	2b28      	cmp	r3, #40	@ 0x28
 8008a84:	d9e6      	bls.n	8008a54 <mergeData+0x138>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8008a86:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7f7 fbca 	bl	8000224 <strlen>
 8008a90:	4603      	mov	r3, r0
 8008a92:	3301      	adds	r3, #1
 8008a94:	4618      	mov	r0, r3
 8008a96:	f004 fdcf 	bl	800d638 <malloc>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 8008a9e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8008aa6:	f004 ff45 	bl	800d934 <strcpy>
	return result;
 8008aaa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3770      	adds	r7, #112	@ 0x70
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}
 8008ab4:	200010cb 	.word	0x200010cb
 8008ab8:	200010bd 	.word	0x200010bd
 8008abc:	200010c0 	.word	0x200010c0
 8008ac0:	200010c1 	.word	0x200010c1
 8008ac4:	200010c2 	.word	0x200010c2
 8008ac8:	200010c9 	.word	0x200010c9
 8008acc:	200010c3 	.word	0x200010c3
 8008ad0:	200010c4 	.word	0x200010c4
 8008ad4:	200010c8 	.word	0x200010c8
 8008ad8:	200010c5 	.word	0x200010c5
 8008adc:	200010d5 	.word	0x200010d5
 8008ae0:	200010c6 	.word	0x200010c6
 8008ae4:	200010d6 	.word	0x200010d6
 8008ae8:	200010c7 	.word	0x200010c7
 8008aec:	200010d7 	.word	0x200010d7
 8008af0:	200010ca 	.word	0x200010ca
 8008af4:	200010cc 	.word	0x200010cc
 8008af8:	200010cd 	.word	0x200010cd
 8008afc:	200010ce 	.word	0x200010ce
 8008b00:	200010cf 	.word	0x200010cf
 8008b04:	200010d0 	.word	0x200010d0
 8008b08:	200010d1 	.word	0x200010d1
 8008b0c:	200010d2 	.word	0x200010d2
 8008b10:	200010d3 	.word	0x200010d3
 8008b14:	200010d4 	.word	0x200010d4
 8008b18:	200010d8 	.word	0x200010d8
 8008b1c:	200010da 	.word	0x200010da
 8008b20:	200010b4 	.word	0x200010b4
 8008b24:	200010b5 	.word	0x200010b5
 8008b28:	200010dc 	.word	0x200010dc
 8008b2c:	20000fec 	.word	0x20000fec
 8008b30:	0800ebf0 	.word	0x0800ebf0

08008b34 <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af02      	add	r7, sp, #8
	lcd_print(1, 1, dataSynchText);
 8008b3a:	4a13      	ldr	r2, [pc, #76]	@ (8008b88 <convertAndSendData+0x54>)
 8008b3c:	2101      	movs	r1, #1
 8008b3e:	2001      	movs	r0, #1
 8008b40:	f000 fa22 	bl	8008f88 <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 8008b44:	4a11      	ldr	r2, [pc, #68]	@ (8008b8c <convertAndSendData+0x58>)
 8008b46:	2101      	movs	r1, #1
 8008b48:	2002      	movs	r0, #2
 8008b4a:	f000 fa1d 	bl	8008f88 <lcd_print>

	for(int i=0; i<2; i++) {
 8008b4e:	2300      	movs	r3, #0
 8008b50:	607b      	str	r3, [r7, #4]
 8008b52:	e00c      	b.n	8008b6e <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 8008b54:	f7ff fee2 	bl	800891c <mergeData>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8008b90 <convertAndSendData+0x5c>)
 8008b5e:	4a0d      	ldr	r2, [pc, #52]	@ (8008b94 <convertAndSendData+0x60>)
 8008b60:	490d      	ldr	r1, [pc, #52]	@ (8008b98 <convertAndSendData+0x64>)
 8008b62:	480e      	ldr	r0, [pc, #56]	@ (8008b9c <convertAndSendData+0x68>)
 8008b64:	f7f7 ffd4 	bl	8000b10 <sendMachineData>
	for(int i=0; i<2; i++) {
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	607b      	str	r3, [r7, #4]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	ddef      	ble.n	8008b54 <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 8008b74:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008b78:	f000 ff60 	bl	8009a3c <HAL_Delay>
	lcd_clear();
 8008b7c:	f000 fa30 	bl	8008fe0 <lcd_clear>
}
 8008b80:	bf00      	nop
 8008b82:	3708      	adds	r7, #8
 8008b84:	46bd      	mov	sp, r7
 8008b86:	bd80      	pop	{r7, pc}
 8008b88:	20001798 	.word	0x20001798
 8008b8c:	200017ac 	.word	0x200017ac
 8008b90:	20001080 	.word	0x20001080
 8008b94:	20001070 	.word	0x20001070
 8008b98:	20001064 	.word	0x20001064
 8008b9c:	200019d8 	.word	0x200019d8

08008ba0 <iotSetup>:

void iotSetup() {
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 8008ba4:	4b13      	ldr	r3, [pc, #76]	@ (8008bf4 <iotSetup+0x54>)
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d021      	beq.n	8008bf0 <iotSetup+0x50>
				HAL_Delay(200);
				goto takeIDSection;
			}
		}*/

		if(checkEEPROM4ID() != 1) {
 8008bac:	f000 f82e 	bl	8008c0c <checkEEPROM4ID>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b01      	cmp	r3, #1
 8008bb4:	d001      	beq.n	8008bba <iotSetup+0x1a>
			takeMachineID();
 8008bb6:	f7ff f9e7 	bl	8007f88 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8008bba:	480f      	ldr	r0, [pc, #60]	@ (8008bf8 <iotSetup+0x58>)
 8008bbc:	f7f7 fb32 	bl	8000224 <strlen>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d801      	bhi.n	8008bca <iotSetup+0x2a>
			takeWifiSSID();
 8008bc6:	f7ff fb9f 	bl	8008308 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8008bca:	480c      	ldr	r0, [pc, #48]	@ (8008bfc <iotSetup+0x5c>)
 8008bcc:	f7f7 fb2a 	bl	8000224 <strlen>
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d801      	bhi.n	8008bda <iotSetup+0x3a>
			takeWifiPass();
 8008bd6:	f7ff fd43 	bl	8008660 <takeWifiPass>
		}

		ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
 8008bda:	4a09      	ldr	r2, [pc, #36]	@ (8008c00 <iotSetup+0x60>)
 8008bdc:	4909      	ldr	r1, [pc, #36]	@ (8008c04 <iotSetup+0x64>)
 8008bde:	480a      	ldr	r0, [pc, #40]	@ (8008c08 <iotSetup+0x68>)
 8008be0:	f7f7 feec 	bl	80009bc <ESP8266_Init>
		HAL_Delay(500);
 8008be4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008be8:	f000 ff28 	bl	8009a3c <HAL_Delay>
		convertAndSendData();
 8008bec:	f7ff ffa2 	bl	8008b34 <convertAndSendData>
	}
}
 8008bf0:	bf00      	nop
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	200010e7 	.word	0x200010e7
 8008bf8:	20001070 	.word	0x20001070
 8008bfc:	20001080 	.word	0x20001080
 8008c00:	0800ebf4 	.word	0x0800ebf4
 8008c04:	0800ec0c 	.word	0x0800ec0c
 8008c08:	200019d8 	.word	0x200019d8

08008c0c <checkEEPROM4ID>:

int checkEEPROM4ID() {
 8008c0c:	b480      	push	{r7}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8008c12:	4b0f      	ldr	r3, [pc, #60]	@ (8008c50 <checkEEPROM4ID+0x44>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	607b      	str	r3, [r7, #4]
 8008c20:	e00d      	b.n	8008c3e <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8008c22:	4a0c      	ldr	r2, [pc, #48]	@ (8008c54 <checkEEPROM4ID+0x48>)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	4413      	add	r3, r2
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d101      	bne.n	8008c32 <checkEEPROM4ID+0x26>
			returnVal = 0;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	3301      	adds	r3, #1
 8008c36:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	607b      	str	r3, [r7, #4]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2b0b      	cmp	r3, #11
 8008c42:	ddee      	ble.n	8008c22 <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8008c44:	68bb      	ldr	r3, [r7, #8]
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3714      	adds	r7, #20
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bc80      	pop	{r7}
 8008c4e:	4770      	bx	lr
 8008c50:	20000000 	.word	0x20000000
 8008c54:	20000fec 	.word	0x20000fec

08008c58 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af02      	add	r7, sp, #8
 8008c5e:	4603      	mov	r3, r0
 8008c60:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8008c62:	79fb      	ldrb	r3, [r7, #7]
 8008c64:	f023 030f 	bic.w	r3, r3, #15
 8008c68:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8008c6a:	79fb      	ldrb	r3, [r7, #7]
 8008c6c:	011b      	lsls	r3, r3, #4
 8008c6e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8008c70:	7b7b      	ldrb	r3, [r7, #13]
 8008c72:	f043 030c 	orr.w	r3, r3, #12
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8008c7a:	7b7b      	ldrb	r3, [r7, #13]
 8008c7c:	f043 0308 	orr.w	r3, r3, #8
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8008c84:	7b3b      	ldrb	r3, [r7, #12]
 8008c86:	f043 030c 	orr.w	r3, r3, #12
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8008c8e:	7b3b      	ldrb	r3, [r7, #12]
 8008c90:	f043 0308 	orr.w	r3, r3, #8
 8008c94:	b2db      	uxtb	r3, r3
 8008c96:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008c98:	bf00      	nop
 8008c9a:	4825      	ldr	r0, [pc, #148]	@ (8008d30 <lcd_send_cmd+0xd8>)
 8008c9c:	f002 fac7 	bl	800b22e <HAL_I2C_GetError>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b04      	cmp	r3, #4
 8008ca4:	d0f9      	beq.n	8008c9a <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008ca6:	bf00      	nop
 8008ca8:	4821      	ldr	r0, [pc, #132]	@ (8008d30 <lcd_send_cmd+0xd8>)
 8008caa:	f002 fab3 	bl	800b214 <HAL_I2C_GetState>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b20      	cmp	r3, #32
 8008cb2:	d1f9      	bne.n	8008ca8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8008d34 <lcd_send_cmd+0xdc>)
 8008cb6:	781b      	ldrb	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d116      	bne.n	8008cea <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	73fb      	strb	r3, [r7, #15]
 8008cc0:	e00f      	b.n	8008ce2 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
 8008cc4:	3310      	adds	r3, #16
 8008cc6:	443b      	add	r3, r7
 8008cc8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
 8008cce:	f022 0208 	bic.w	r2, r2, #8
 8008cd2:	b2d2      	uxtb	r2, r2
 8008cd4:	3310      	adds	r3, #16
 8008cd6:	443b      	add	r3, r7
 8008cd8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	73fb      	strb	r3, [r7, #15]
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
 8008ce4:	2b03      	cmp	r3, #3
 8008ce6:	d9ec      	bls.n	8008cc2 <lcd_send_cmd+0x6a>
 8008ce8:	e015      	b.n	8008d16 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008cea:	2300      	movs	r3, #0
 8008cec:	73bb      	strb	r3, [r7, #14]
 8008cee:	e00f      	b.n	8008d10 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8008cf0:	7bbb      	ldrb	r3, [r7, #14]
 8008cf2:	3310      	adds	r3, #16
 8008cf4:	443b      	add	r3, r7
 8008cf6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	f042 0208 	orr.w	r2, r2, #8
 8008d00:	b2d2      	uxtb	r2, r2
 8008d02:	3310      	adds	r3, #16
 8008d04:	443b      	add	r3, r7
 8008d06:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008d0a:	7bbb      	ldrb	r3, [r7, #14]
 8008d0c:	3301      	adds	r3, #1
 8008d0e:	73bb      	strb	r3, [r7, #14]
 8008d10:	7bbb      	ldrb	r3, [r7, #14]
 8008d12:	2b03      	cmp	r3, #3
 8008d14:	d9ec      	bls.n	8008cf0 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008d16:	f107 0208 	add.w	r2, r7, #8
 8008d1a:	2364      	movs	r3, #100	@ 0x64
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	2304      	movs	r3, #4
 8008d20:	214e      	movs	r1, #78	@ 0x4e
 8008d22:	4803      	ldr	r0, [pc, #12]	@ (8008d30 <lcd_send_cmd+0xd8>)
 8008d24:	f001 fe16 	bl	800a954 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008d28:	bf00      	nop
 8008d2a:	3710      	adds	r7, #16
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	2000193c 	.word	0x2000193c
 8008d34:	20001911 	.word	0x20001911

08008d38 <lcd_send_data>:

void lcd_send_data (char data) {
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b086      	sub	sp, #24
 8008d3c:	af02      	add	r7, sp, #8
 8008d3e:	4603      	mov	r3, r0
 8008d40:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8008d42:	79fb      	ldrb	r3, [r7, #7]
 8008d44:	f023 030f 	bic.w	r3, r3, #15
 8008d48:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8008d4a:	79fb      	ldrb	r3, [r7, #7]
 8008d4c:	011b      	lsls	r3, r3, #4
 8008d4e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8008d50:	7b7b      	ldrb	r3, [r7, #13]
 8008d52:	f043 030d 	orr.w	r3, r3, #13
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8008d5a:	7b7b      	ldrb	r3, [r7, #13]
 8008d5c:	f043 0309 	orr.w	r3, r3, #9
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8008d64:	7b3b      	ldrb	r3, [r7, #12]
 8008d66:	f043 030d 	orr.w	r3, r3, #13
 8008d6a:	b2db      	uxtb	r3, r3
 8008d6c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8008d6e:	7b3b      	ldrb	r3, [r7, #12]
 8008d70:	f043 0309 	orr.w	r3, r3, #9
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008d78:	bf00      	nop
 8008d7a:	4825      	ldr	r0, [pc, #148]	@ (8008e10 <lcd_send_data+0xd8>)
 8008d7c:	f002 fa57 	bl	800b22e <HAL_I2C_GetError>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b04      	cmp	r3, #4
 8008d84:	d0f9      	beq.n	8008d7a <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008d86:	bf00      	nop
 8008d88:	4821      	ldr	r0, [pc, #132]	@ (8008e10 <lcd_send_data+0xd8>)
 8008d8a:	f002 fa43 	bl	800b214 <HAL_I2C_GetState>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b20      	cmp	r3, #32
 8008d92:	d1f9      	bne.n	8008d88 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008d94:	4b1f      	ldr	r3, [pc, #124]	@ (8008e14 <lcd_send_data+0xdc>)
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d116      	bne.n	8008dca <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	73fb      	strb	r3, [r7, #15]
 8008da0:	e00f      	b.n	8008dc2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008da2:	7bfb      	ldrb	r3, [r7, #15]
 8008da4:	3310      	adds	r3, #16
 8008da6:	443b      	add	r3, r7
 8008da8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
 8008dae:	f022 0208 	bic.w	r2, r2, #8
 8008db2:	b2d2      	uxtb	r2, r2
 8008db4:	3310      	adds	r3, #16
 8008db6:	443b      	add	r3, r7
 8008db8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008dbc:	7bfb      	ldrb	r3, [r7, #15]
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	73fb      	strb	r3, [r7, #15]
 8008dc2:	7bfb      	ldrb	r3, [r7, #15]
 8008dc4:	2b03      	cmp	r3, #3
 8008dc6:	d9ec      	bls.n	8008da2 <lcd_send_data+0x6a>
 8008dc8:	e015      	b.n	8008df6 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 8008dca:	2300      	movs	r3, #0
 8008dcc:	73bb      	strb	r3, [r7, #14]
 8008dce:	e00f      	b.n	8008df0 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8008dd0:	7bbb      	ldrb	r3, [r7, #14]
 8008dd2:	3310      	adds	r3, #16
 8008dd4:	443b      	add	r3, r7
 8008dd6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008dda:	7bbb      	ldrb	r3, [r7, #14]
 8008ddc:	f042 0208 	orr.w	r2, r2, #8
 8008de0:	b2d2      	uxtb	r2, r2
 8008de2:	3310      	adds	r3, #16
 8008de4:	443b      	add	r3, r7
 8008de6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8008dea:	7bbb      	ldrb	r3, [r7, #14]
 8008dec:	3301      	adds	r3, #1
 8008dee:	73bb      	strb	r3, [r7, #14]
 8008df0:	7bbb      	ldrb	r3, [r7, #14]
 8008df2:	2b03      	cmp	r3, #3
 8008df4:	d9ec      	bls.n	8008dd0 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008df6:	f107 0208 	add.w	r2, r7, #8
 8008dfa:	2364      	movs	r3, #100	@ 0x64
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	2304      	movs	r3, #4
 8008e00:	214e      	movs	r1, #78	@ 0x4e
 8008e02:	4803      	ldr	r0, [pc, #12]	@ (8008e10 <lcd_send_data+0xd8>)
 8008e04:	f001 fda6 	bl	800a954 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008e08:	bf00      	nop
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	2000193c 	.word	0x2000193c
 8008e14:	20001911 	.word	0x20001911

08008e18 <lcd_send_string>:

void lcd_send_string (char *str) {
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8008e20:	e006      	b.n	8008e30 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	1c5a      	adds	r2, r3, #1
 8008e26:	607a      	str	r2, [r7, #4]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7ff ff84 	bl	8008d38 <lcd_send_data>
	while (*str) {
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1f4      	bne.n	8008e22 <lcd_send_string+0xa>
	}
}
 8008e38:	bf00      	nop
 8008e3a:	bf00      	nop
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
	...

08008e44 <lcd_send_char>:

void lcd_send_char(char ch) {
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b086      	sub	sp, #24
 8008e48:	af02      	add	r7, sp, #8
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 8008e4e:	79fb      	ldrb	r3, [r7, #7]
 8008e50:	f023 030f 	bic.w	r3, r3, #15
 8008e54:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8008e56:	79fb      	ldrb	r3, [r7, #7]
 8008e58:	011b      	lsls	r3, r3, #4
 8008e5a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8008e5c:	7b7b      	ldrb	r3, [r7, #13]
 8008e5e:	f043 030d 	orr.w	r3, r3, #13
 8008e62:	b2db      	uxtb	r3, r3
 8008e64:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8008e66:	7b7b      	ldrb	r3, [r7, #13]
 8008e68:	f043 0309 	orr.w	r3, r3, #9
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8008e70:	7b3b      	ldrb	r3, [r7, #12]
 8008e72:	f043 030d 	orr.w	r3, r3, #13
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8008e7a:	7b3b      	ldrb	r3, [r7, #12]
 8008e7c:	f043 0309 	orr.w	r3, r3, #9
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008e84:	bf00      	nop
 8008e86:	4825      	ldr	r0, [pc, #148]	@ (8008f1c <lcd_send_char+0xd8>)
 8008e88:	f002 f9d1 	bl	800b22e <HAL_I2C_GetError>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b04      	cmp	r3, #4
 8008e90:	d0f9      	beq.n	8008e86 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008e92:	bf00      	nop
 8008e94:	4821      	ldr	r0, [pc, #132]	@ (8008f1c <lcd_send_char+0xd8>)
 8008e96:	f002 f9bd 	bl	800b214 <HAL_I2C_GetState>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	2b20      	cmp	r3, #32
 8008e9e:	d1f9      	bne.n	8008e94 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8008ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8008f20 <lcd_send_char+0xdc>)
 8008ea2:	781b      	ldrb	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d116      	bne.n	8008ed6 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	73fb      	strb	r3, [r7, #15]
 8008eac:	e00f      	b.n	8008ece <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 8008eae:	7bfb      	ldrb	r3, [r7, #15]
 8008eb0:	3310      	adds	r3, #16
 8008eb2:	443b      	add	r3, r7
 8008eb4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008eb8:	7bfb      	ldrb	r3, [r7, #15]
 8008eba:	f022 0208 	bic.w	r2, r2, #8
 8008ebe:	b2d2      	uxtb	r2, r2
 8008ec0:	3310      	adds	r3, #16
 8008ec2:	443b      	add	r3, r7
 8008ec4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008ec8:	7bfb      	ldrb	r3, [r7, #15]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	73fb      	strb	r3, [r7, #15]
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
 8008ed0:	2b03      	cmp	r3, #3
 8008ed2:	d9ec      	bls.n	8008eae <lcd_send_char+0x6a>
 8008ed4:	e015      	b.n	8008f02 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	73bb      	strb	r3, [r7, #14]
 8008eda:	e00f      	b.n	8008efc <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 8008edc:	7bbb      	ldrb	r3, [r7, #14]
 8008ede:	3310      	adds	r3, #16
 8008ee0:	443b      	add	r3, r7
 8008ee2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008ee6:	7bbb      	ldrb	r3, [r7, #14]
 8008ee8:	f042 0208 	orr.w	r2, r2, #8
 8008eec:	b2d2      	uxtb	r2, r2
 8008eee:	3310      	adds	r3, #16
 8008ef0:	443b      	add	r3, r7
 8008ef2:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008ef6:	7bbb      	ldrb	r3, [r7, #14]
 8008ef8:	3301      	adds	r3, #1
 8008efa:	73bb      	strb	r3, [r7, #14]
 8008efc:	7bbb      	ldrb	r3, [r7, #14]
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	d9ec      	bls.n	8008edc <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8008f02:	f107 0208 	add.w	r2, r7, #8
 8008f06:	2364      	movs	r3, #100	@ 0x64
 8008f08:	9300      	str	r3, [sp, #0]
 8008f0a:	2304      	movs	r3, #4
 8008f0c:	214e      	movs	r1, #78	@ 0x4e
 8008f0e:	4803      	ldr	r0, [pc, #12]	@ (8008f1c <lcd_send_char+0xd8>)
 8008f10:	f001 fd20 	bl	800a954 <HAL_I2C_Master_Transmit>
}
 8008f14:	bf00      	nop
 8008f16:	3710      	adds	r7, #16
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd80      	pop	{r7, pc}
 8008f1c:	2000193c 	.word	0x2000193c
 8008f20:	20001911 	.word	0x20001911

08008f24 <lcd_init>:

void lcd_init (void) {
 8008f24:	b580      	push	{r7, lr}
 8008f26:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8008f28:	2002      	movs	r0, #2
 8008f2a:	f7ff fe95 	bl	8008c58 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 8008f2e:	2028      	movs	r0, #40	@ 0x28
 8008f30:	f7ff fe92 	bl	8008c58 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8008f34:	200c      	movs	r0, #12
 8008f36:	f7ff fe8f 	bl	8008c58 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8008f3a:	2080      	movs	r0, #128	@ 0x80
 8008f3c:	f7ff fe8c 	bl	8008c58 <lcd_send_cmd>
	lcd_backlight(1);
 8008f40:	2001      	movs	r0, #1
 8008f42:	f000 f86d 	bl	8009020 <lcd_backlight>
}
 8008f46:	bf00      	nop
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b082      	sub	sp, #8
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	4603      	mov	r3, r0
 8008f52:	460a      	mov	r2, r1
 8008f54:	71fb      	strb	r3, [r7, #7]
 8008f56:	4613      	mov	r3, r2
 8008f58:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8008f5a:	79fb      	ldrb	r3, [r7, #7]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d106      	bne.n	8008f6e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8008f60:	79bb      	ldrb	r3, [r7, #6]
 8008f62:	337f      	adds	r3, #127	@ 0x7f
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	4618      	mov	r0, r3
 8008f68:	f7ff fe76 	bl	8008c58 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8008f6c:	e008      	b.n	8008f80 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 8008f6e:	79fb      	ldrb	r3, [r7, #7]
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	d105      	bne.n	8008f80 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8008f74:	79bb      	ldrb	r3, [r7, #6]
 8008f76:	3b41      	subs	r3, #65	@ 0x41
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7ff fe6c 	bl	8008c58 <lcd_send_cmd>
}
 8008f80:	bf00      	nop
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	4603      	mov	r3, r0
 8008f90:	603a      	str	r2, [r7, #0]
 8008f92:	71fb      	strb	r3, [r7, #7]
 8008f94:	460b      	mov	r3, r1
 8008f96:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8008f98:	79ba      	ldrb	r2, [r7, #6]
 8008f9a:	79fb      	ldrb	r3, [r7, #7]
 8008f9c:	4611      	mov	r1, r2
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f7ff ffd3 	bl	8008f4a <lcd_gotoxy>
	lcd_send_string(str);
 8008fa4:	6838      	ldr	r0, [r7, #0]
 8008fa6:	f7ff ff37 	bl	8008e18 <lcd_send_string>
}
 8008faa:	bf00      	nop
 8008fac:	3708      	adds	r7, #8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b082      	sub	sp, #8
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	4603      	mov	r3, r0
 8008fba:	71fb      	strb	r3, [r7, #7]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	71bb      	strb	r3, [r7, #6]
 8008fc0:	4613      	mov	r3, r2
 8008fc2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8008fc4:	79ba      	ldrb	r2, [r7, #6]
 8008fc6:	79fb      	ldrb	r3, [r7, #7]
 8008fc8:	4611      	mov	r1, r2
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f7ff ffbd 	bl	8008f4a <lcd_gotoxy>
    lcd_send_char(ch);
 8008fd0:	797b      	ldrb	r3, [r7, #5]
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7ff ff36 	bl	8008e44 <lcd_send_char>
}
 8008fd8:	bf00      	nop
 8008fda:	3708      	adds	r7, #8
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <lcd_clear>:

void lcd_clear(void) {
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8008fe4:	2001      	movs	r0, #1
 8008fe6:	f7ff fe37 	bl	8008c58 <lcd_send_cmd>
    HAL_Delay(2);
 8008fea:	2002      	movs	r0, #2
 8008fec:	f000 fd26 	bl	8009a3c <HAL_Delay>
}
 8008ff0:	bf00      	nop
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	460a      	mov	r2, r1
 8008ffe:	71fb      	strb	r3, [r7, #7]
 8009000:	4613      	mov	r3, r2
 8009002:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8009004:	79ba      	ldrb	r2, [r7, #6]
 8009006:	79fb      	ldrb	r3, [r7, #7]
 8009008:	4611      	mov	r1, r2
 800900a:	4618      	mov	r0, r3
 800900c:	f7ff ff9d 	bl	8008f4a <lcd_gotoxy>

    lcd_send_char(' ');
 8009010:	2020      	movs	r0, #32
 8009012:	f7ff ff17 	bl	8008e44 <lcd_send_char>
}
 8009016:	bf00      	nop
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
	...

08009020 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	4603      	mov	r3, r0
 8009028:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800902a:	4a05      	ldr	r2, [pc, #20]	@ (8009040 <lcd_backlight+0x20>)
 800902c:	79fb      	ldrb	r3, [r7, #7]
 800902e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8009030:	2000      	movs	r0, #0
 8009032:	f7ff fe11 	bl	8008c58 <lcd_send_cmd>
}
 8009036:	bf00      	nop
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
 800903e:	bf00      	nop
 8009040:	20001911 	.word	0x20001911

08009044 <lcd_cursor>:

void lcd_cursor(int state) {
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2b01      	cmp	r3, #1
 8009050:	d106      	bne.n	8009060 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8009052:	200e      	movs	r0, #14
 8009054:	f7ff fe00 	bl	8008c58 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8009058:	200f      	movs	r0, #15
 800905a:	f7ff fdfd 	bl	8008c58 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800905e:	e002      	b.n	8009066 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8009060:	200c      	movs	r0, #12
 8009062:	f7ff fdf9 	bl	8008c58 <lcd_send_cmd>
}
 8009066:	bf00      	nop
 8009068:	3708      	adds	r7, #8
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
	...

08009070 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8009070:	b480      	push	{r7}
 8009072:	b083      	sub	sp, #12
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8009078:	4b04      	ldr	r3, [pc, #16]	@ (800908c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3301      	adds	r3, #1
 800907e:	4a03      	ldr	r2, [pc, #12]	@ (800908c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8009080:	6013      	str	r3, [r2, #0]
}
 8009082:	bf00      	nop
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	bc80      	pop	{r7}
 800908a:	4770      	bx	lr
 800908c:	20001094 	.word	0x20001094

08009090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009094:	f000 fc70 	bl	8009978 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8009098:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800909c:	f000 fcce 	bl	8009a3c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80090a0:	f000 f89c 	bl	80091dc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80090a4:	f000 f9be 	bl	8009424 <MX_GPIO_Init>
  MX_CAN_Init();
 80090a8:	f000 f8de 	bl	8009268 <MX_CAN_Init>
  MX_I2C1_Init();
 80090ac:	f000 f910 	bl	80092d0 <MX_I2C1_Init>
  MX_TIM1_Init();
 80090b0:	f000 f93c 	bl	800932c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80090b4:	f000 f98c 	bl	80093d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80090b8:	2201      	movs	r2, #1
 80090ba:	2140      	movs	r1, #64	@ 0x40
 80090bc:	483e      	ldr	r0, [pc, #248]	@ (80091b8 <main+0x128>)
 80090be:	f001 faa4 	bl	800a60a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80090c2:	2201      	movs	r2, #1
 80090c4:	2180      	movs	r1, #128	@ 0x80
 80090c6:	483c      	ldr	r0, [pc, #240]	@ (80091b8 <main+0x128>)
 80090c8:	f001 fa9f 	bl	800a60a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80090cc:	200a      	movs	r0, #10
 80090ce:	f000 fcb5 	bl	8009a3c <HAL_Delay>
  lcd_init();
 80090d2:	f7ff ff27 	bl	8008f24 <lcd_init>
  HAL_Delay(10);
 80090d6:	200a      	movs	r0, #10
 80090d8:	f000 fcb0 	bl	8009a3c <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 80090dc:	4837      	ldr	r0, [pc, #220]	@ (80091bc <main+0x12c>)
 80090de:	f003 f947 	bl	800c370 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80090e2:	bf00      	nop
 80090e4:	4836      	ldr	r0, [pc, #216]	@ (80091c0 <main+0x130>)
 80090e6:	f002 f8a2 	bl	800b22e <HAL_I2C_GetError>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b04      	cmp	r3, #4
 80090ee:	d0f9      	beq.n	80090e4 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80090f0:	bf00      	nop
 80090f2:	4833      	ldr	r0, [pc, #204]	@ (80091c0 <main+0x130>)
 80090f4:	f002 f88e 	bl	800b214 <HAL_I2C_GetState>
 80090f8:	4603      	mov	r3, r0
 80090fa:	2b20      	cmp	r3, #32
 80090fc:	d1f9      	bne.n	80090f2 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80090fe:	2200      	movs	r2, #0
 8009100:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009104:	482c      	ldr	r0, [pc, #176]	@ (80091b8 <main+0x128>)
 8009106:	f001 fa80 	bl	800a60a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800910a:	2200      	movs	r2, #0
 800910c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8009110:	4829      	ldr	r0, [pc, #164]	@ (80091b8 <main+0x128>)
 8009112:	f001 fa7a 	bl	800a60a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8009116:	2200      	movs	r2, #0
 8009118:	2104      	movs	r1, #4
 800911a:	4827      	ldr	r0, [pc, #156]	@ (80091b8 <main+0x128>)
 800911c:	f001 fa75 	bl	800a60a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8009120:	2200      	movs	r2, #0
 8009122:	2102      	movs	r1, #2
 8009124:	4824      	ldr	r0, [pc, #144]	@ (80091b8 <main+0x128>)
 8009126:	f001 fa70 	bl	800a60a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800912a:	2200      	movs	r2, #0
 800912c:	2101      	movs	r1, #1
 800912e:	4822      	ldr	r0, [pc, #136]	@ (80091b8 <main+0x128>)
 8009130:	f001 fa6b 	bl	800a60a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8009134:	2200      	movs	r2, #0
 8009136:	2120      	movs	r1, #32
 8009138:	4822      	ldr	r0, [pc, #136]	@ (80091c4 <main+0x134>)
 800913a:	f001 fa66 	bl	800a60a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800913e:	2200      	movs	r2, #0
 8009140:	2110      	movs	r1, #16
 8009142:	4820      	ldr	r0, [pc, #128]	@ (80091c4 <main+0x134>)
 8009144:	f001 fa61 	bl	800a60a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8009148:	2200      	movs	r2, #0
 800914a:	2180      	movs	r1, #128	@ 0x80
 800914c:	481e      	ldr	r0, [pc, #120]	@ (80091c8 <main+0x138>)
 800914e:	f001 fa5c 	bl	800a60a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8009152:	2200      	movs	r2, #0
 8009154:	2140      	movs	r1, #64	@ 0x40
 8009156:	481c      	ldr	r0, [pc, #112]	@ (80091c8 <main+0x138>)
 8009158:	f001 fa57 	bl	800a60a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800915c:	2200      	movs	r2, #0
 800915e:	2120      	movs	r1, #32
 8009160:	4819      	ldr	r0, [pc, #100]	@ (80091c8 <main+0x138>)
 8009162:	f001 fa52 	bl	800a60a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8009166:	2200      	movs	r2, #0
 8009168:	2110      	movs	r1, #16
 800916a:	4817      	ldr	r0, [pc, #92]	@ (80091c8 <main+0x138>)
 800916c:	f001 fa4d 	bl	800a60a <HAL_GPIO_WritePin>

  i2cTest();
 8009170:	f7f7 ffa0 	bl	80010b4 <i2cTest>
  HAL_Delay(100);
 8009174:	2064      	movs	r0, #100	@ 0x64
 8009176:	f000 fc61 	bl	8009a3c <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 800917a:	4a14      	ldr	r2, [pc, #80]	@ (80091cc <main+0x13c>)
 800917c:	2101      	movs	r1, #1
 800917e:	2001      	movs	r0, #1
 8009180:	f7ff ff02 	bl	8008f88 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 8009184:	4a12      	ldr	r2, [pc, #72]	@ (80091d0 <main+0x140>)
 8009186:	2101      	movs	r1, #1
 8009188:	2002      	movs	r0, #2
 800918a:	f7ff fefd 	bl	8008f88 <lcd_print>
  HAL_Delay(1000);
 800918e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009192:	f000 fc53 	bl	8009a3c <HAL_Delay>
  lcd_clear();
 8009196:	f7ff ff23 	bl	8008fe0 <lcd_clear>

  eepromKontrol();
 800919a:	f7f7 f84b 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 800919e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80091a2:	f000 fc4b 	bl	8009a3c <HAL_Delay>

  backLightTimer = millis;
 80091a6:	4b0b      	ldr	r3, [pc, #44]	@ (80091d4 <main+0x144>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a0b      	ldr	r2, [pc, #44]	@ (80091d8 <main+0x148>)
 80091ac:	6013      	str	r3, [r2, #0]

  //IoT Section:
  iotSetup();
 80091ae:	f7ff fcf7 	bl	8008ba0 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 80091b2:	f7fc fe6f 	bl	8005e94 <mainLoop>
 80091b6:	e7fc      	b.n	80091b2 <main+0x122>
 80091b8:	40010c00 	.word	0x40010c00
 80091bc:	20001990 	.word	0x20001990
 80091c0:	2000193c 	.word	0x2000193c
 80091c4:	40011000 	.word	0x40011000
 80091c8:	40010800 	.word	0x40010800
 80091cc:	2000009c 	.word	0x2000009c
 80091d0:	200000b0 	.word	0x200000b0
 80091d4:	20001094 	.word	0x20001094
 80091d8:	200010b0 	.word	0x200010b0

080091dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b090      	sub	sp, #64	@ 0x40
 80091e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80091e2:	f107 0318 	add.w	r3, r7, #24
 80091e6:	2228      	movs	r2, #40	@ 0x28
 80091e8:	2100      	movs	r1, #0
 80091ea:	4618      	mov	r0, r3
 80091ec:	f004 fb5e 	bl	800d8ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80091f0:	1d3b      	adds	r3, r7, #4
 80091f2:	2200      	movs	r2, #0
 80091f4:	601a      	str	r2, [r3, #0]
 80091f6:	605a      	str	r2, [r3, #4]
 80091f8:	609a      	str	r2, [r3, #8]
 80091fa:	60da      	str	r2, [r3, #12]
 80091fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80091fe:	2301      	movs	r3, #1
 8009200:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009202:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009206:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8009208:	2300      	movs	r3, #0
 800920a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800920c:	2301      	movs	r3, #1
 800920e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009210:	2302      	movs	r3, #2
 8009212:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009214:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009218:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800921a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800921e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009220:	f107 0318 	add.w	r3, r7, #24
 8009224:	4618      	mov	r0, r3
 8009226:	f002 fc43 	bl	800bab0 <HAL_RCC_OscConfig>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d001      	beq.n	8009234 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8009230:	f000 f9a2 	bl	8009578 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009234:	230f      	movs	r3, #15
 8009236:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009238:	2302      	movs	r3, #2
 800923a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800923c:	2300      	movs	r3, #0
 800923e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8009240:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009244:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009246:	2300      	movs	r3, #0
 8009248:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800924a:	1d3b      	adds	r3, r7, #4
 800924c:	2102      	movs	r1, #2
 800924e:	4618      	mov	r0, r3
 8009250:	f002 feb0 	bl	800bfb4 <HAL_RCC_ClockConfig>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d001      	beq.n	800925e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800925a:	f000 f98d 	bl	8009578 <Error_Handler>
  }
}
 800925e:	bf00      	nop
 8009260:	3740      	adds	r7, #64	@ 0x40
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
	...

08009268 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800926c:	4b16      	ldr	r3, [pc, #88]	@ (80092c8 <MX_CAN_Init+0x60>)
 800926e:	4a17      	ldr	r2, [pc, #92]	@ (80092cc <MX_CAN_Init+0x64>)
 8009270:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8009272:	4b15      	ldr	r3, [pc, #84]	@ (80092c8 <MX_CAN_Init+0x60>)
 8009274:	2210      	movs	r2, #16
 8009276:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8009278:	4b13      	ldr	r3, [pc, #76]	@ (80092c8 <MX_CAN_Init+0x60>)
 800927a:	2200      	movs	r2, #0
 800927c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800927e:	4b12      	ldr	r3, [pc, #72]	@ (80092c8 <MX_CAN_Init+0x60>)
 8009280:	2200      	movs	r2, #0
 8009282:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8009284:	4b10      	ldr	r3, [pc, #64]	@ (80092c8 <MX_CAN_Init+0x60>)
 8009286:	2200      	movs	r2, #0
 8009288:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800928a:	4b0f      	ldr	r3, [pc, #60]	@ (80092c8 <MX_CAN_Init+0x60>)
 800928c:	2200      	movs	r2, #0
 800928e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8009290:	4b0d      	ldr	r3, [pc, #52]	@ (80092c8 <MX_CAN_Init+0x60>)
 8009292:	2200      	movs	r2, #0
 8009294:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8009296:	4b0c      	ldr	r3, [pc, #48]	@ (80092c8 <MX_CAN_Init+0x60>)
 8009298:	2200      	movs	r2, #0
 800929a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800929c:	4b0a      	ldr	r3, [pc, #40]	@ (80092c8 <MX_CAN_Init+0x60>)
 800929e:	2200      	movs	r2, #0
 80092a0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80092a2:	4b09      	ldr	r3, [pc, #36]	@ (80092c8 <MX_CAN_Init+0x60>)
 80092a4:	2200      	movs	r2, #0
 80092a6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80092a8:	4b07      	ldr	r3, [pc, #28]	@ (80092c8 <MX_CAN_Init+0x60>)
 80092aa:	2200      	movs	r2, #0
 80092ac:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80092ae:	4b06      	ldr	r3, [pc, #24]	@ (80092c8 <MX_CAN_Init+0x60>)
 80092b0:	2200      	movs	r2, #0
 80092b2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80092b4:	4804      	ldr	r0, [pc, #16]	@ (80092c8 <MX_CAN_Init+0x60>)
 80092b6:	f000 fbe5 	bl	8009a84 <HAL_CAN_Init>
 80092ba:	4603      	mov	r3, r0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d001      	beq.n	80092c4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80092c0:	f000 f95a 	bl	8009578 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80092c4:	bf00      	nop
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	20001914 	.word	0x20001914
 80092cc:	40006400 	.word	0x40006400

080092d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80092d4:	4b12      	ldr	r3, [pc, #72]	@ (8009320 <MX_I2C1_Init+0x50>)
 80092d6:	4a13      	ldr	r2, [pc, #76]	@ (8009324 <MX_I2C1_Init+0x54>)
 80092d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80092da:	4b11      	ldr	r3, [pc, #68]	@ (8009320 <MX_I2C1_Init+0x50>)
 80092dc:	4a12      	ldr	r2, [pc, #72]	@ (8009328 <MX_I2C1_Init+0x58>)
 80092de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80092e0:	4b0f      	ldr	r3, [pc, #60]	@ (8009320 <MX_I2C1_Init+0x50>)
 80092e2:	2200      	movs	r2, #0
 80092e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80092e6:	4b0e      	ldr	r3, [pc, #56]	@ (8009320 <MX_I2C1_Init+0x50>)
 80092e8:	2200      	movs	r2, #0
 80092ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80092ec:	4b0c      	ldr	r3, [pc, #48]	@ (8009320 <MX_I2C1_Init+0x50>)
 80092ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80092f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80092f4:	4b0a      	ldr	r3, [pc, #40]	@ (8009320 <MX_I2C1_Init+0x50>)
 80092f6:	2200      	movs	r2, #0
 80092f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80092fa:	4b09      	ldr	r3, [pc, #36]	@ (8009320 <MX_I2C1_Init+0x50>)
 80092fc:	2200      	movs	r2, #0
 80092fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009300:	4b07      	ldr	r3, [pc, #28]	@ (8009320 <MX_I2C1_Init+0x50>)
 8009302:	2200      	movs	r2, #0
 8009304:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009306:	4b06      	ldr	r3, [pc, #24]	@ (8009320 <MX_I2C1_Init+0x50>)
 8009308:	2200      	movs	r2, #0
 800930a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800930c:	4804      	ldr	r0, [pc, #16]	@ (8009320 <MX_I2C1_Init+0x50>)
 800930e:	f001 f9ad 	bl	800a66c <HAL_I2C_Init>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d001      	beq.n	800931c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009318:	f000 f92e 	bl	8009578 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800931c:	bf00      	nop
 800931e:	bd80      	pop	{r7, pc}
 8009320:	2000193c 	.word	0x2000193c
 8009324:	40005400 	.word	0x40005400
 8009328:	00061a80 	.word	0x00061a80

0800932c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b086      	sub	sp, #24
 8009330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009332:	f107 0308 	add.w	r3, r7, #8
 8009336:	2200      	movs	r2, #0
 8009338:	601a      	str	r2, [r3, #0]
 800933a:	605a      	str	r2, [r3, #4]
 800933c:	609a      	str	r2, [r3, #8]
 800933e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009340:	463b      	mov	r3, r7
 8009342:	2200      	movs	r2, #0
 8009344:	601a      	str	r2, [r3, #0]
 8009346:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009348:	4b1f      	ldr	r3, [pc, #124]	@ (80093c8 <MX_TIM1_Init+0x9c>)
 800934a:	4a20      	ldr	r2, [pc, #128]	@ (80093cc <MX_TIM1_Init+0xa0>)
 800934c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800934e:	4b1e      	ldr	r3, [pc, #120]	@ (80093c8 <MX_TIM1_Init+0x9c>)
 8009350:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8009354:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009356:	4b1c      	ldr	r3, [pc, #112]	@ (80093c8 <MX_TIM1_Init+0x9c>)
 8009358:	2200      	movs	r2, #0
 800935a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800935c:	4b1a      	ldr	r3, [pc, #104]	@ (80093c8 <MX_TIM1_Init+0x9c>)
 800935e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8009362:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009364:	4b18      	ldr	r3, [pc, #96]	@ (80093c8 <MX_TIM1_Init+0x9c>)
 8009366:	2200      	movs	r2, #0
 8009368:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800936a:	4b17      	ldr	r3, [pc, #92]	@ (80093c8 <MX_TIM1_Init+0x9c>)
 800936c:	2200      	movs	r2, #0
 800936e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009370:	4b15      	ldr	r3, [pc, #84]	@ (80093c8 <MX_TIM1_Init+0x9c>)
 8009372:	2200      	movs	r2, #0
 8009374:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009376:	4814      	ldr	r0, [pc, #80]	@ (80093c8 <MX_TIM1_Init+0x9c>)
 8009378:	f002 ffaa 	bl	800c2d0 <HAL_TIM_Base_Init>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	d001      	beq.n	8009386 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8009382:	f000 f8f9 	bl	8009578 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009386:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800938a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800938c:	f107 0308 	add.w	r3, r7, #8
 8009390:	4619      	mov	r1, r3
 8009392:	480d      	ldr	r0, [pc, #52]	@ (80093c8 <MX_TIM1_Init+0x9c>)
 8009394:	f003 f954 	bl	800c640 <HAL_TIM_ConfigClockSource>
 8009398:	4603      	mov	r3, r0
 800939a:	2b00      	cmp	r3, #0
 800939c:	d001      	beq.n	80093a2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800939e:	f000 f8eb 	bl	8009578 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80093a2:	2300      	movs	r3, #0
 80093a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80093a6:	2300      	movs	r3, #0
 80093a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80093aa:	463b      	mov	r3, r7
 80093ac:	4619      	mov	r1, r3
 80093ae:	4806      	ldr	r0, [pc, #24]	@ (80093c8 <MX_TIM1_Init+0x9c>)
 80093b0:	f003 fb42 	bl	800ca38 <HAL_TIMEx_MasterConfigSynchronization>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80093ba:	f000 f8dd 	bl	8009578 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80093be:	bf00      	nop
 80093c0:	3718      	adds	r7, #24
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	20001990 	.word	0x20001990
 80093cc:	40012c00 	.word	0x40012c00

080093d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80093d4:	4b11      	ldr	r3, [pc, #68]	@ (800941c <MX_USART1_UART_Init+0x4c>)
 80093d6:	4a12      	ldr	r2, [pc, #72]	@ (8009420 <MX_USART1_UART_Init+0x50>)
 80093d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80093da:	4b10      	ldr	r3, [pc, #64]	@ (800941c <MX_USART1_UART_Init+0x4c>)
 80093dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80093e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80093e2:	4b0e      	ldr	r3, [pc, #56]	@ (800941c <MX_USART1_UART_Init+0x4c>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80093e8:	4b0c      	ldr	r3, [pc, #48]	@ (800941c <MX_USART1_UART_Init+0x4c>)
 80093ea:	2200      	movs	r2, #0
 80093ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80093ee:	4b0b      	ldr	r3, [pc, #44]	@ (800941c <MX_USART1_UART_Init+0x4c>)
 80093f0:	2200      	movs	r2, #0
 80093f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80093f4:	4b09      	ldr	r3, [pc, #36]	@ (800941c <MX_USART1_UART_Init+0x4c>)
 80093f6:	220c      	movs	r2, #12
 80093f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80093fa:	4b08      	ldr	r3, [pc, #32]	@ (800941c <MX_USART1_UART_Init+0x4c>)
 80093fc:	2200      	movs	r2, #0
 80093fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009400:	4b06      	ldr	r3, [pc, #24]	@ (800941c <MX_USART1_UART_Init+0x4c>)
 8009402:	2200      	movs	r2, #0
 8009404:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009406:	4805      	ldr	r0, [pc, #20]	@ (800941c <MX_USART1_UART_Init+0x4c>)
 8009408:	f003 fb94 	bl	800cb34 <HAL_UART_Init>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d001      	beq.n	8009416 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8009412:	f000 f8b1 	bl	8009578 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009416:	bf00      	nop
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	200019d8 	.word	0x200019d8
 8009420:	40013800 	.word	0x40013800

08009424 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b088      	sub	sp, #32
 8009428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800942a:	f107 0310 	add.w	r3, r7, #16
 800942e:	2200      	movs	r2, #0
 8009430:	601a      	str	r2, [r3, #0]
 8009432:	605a      	str	r2, [r3, #4]
 8009434:	609a      	str	r2, [r3, #8]
 8009436:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009438:	4b4b      	ldr	r3, [pc, #300]	@ (8009568 <MX_GPIO_Init+0x144>)
 800943a:	699b      	ldr	r3, [r3, #24]
 800943c:	4a4a      	ldr	r2, [pc, #296]	@ (8009568 <MX_GPIO_Init+0x144>)
 800943e:	f043 0310 	orr.w	r3, r3, #16
 8009442:	6193      	str	r3, [r2, #24]
 8009444:	4b48      	ldr	r3, [pc, #288]	@ (8009568 <MX_GPIO_Init+0x144>)
 8009446:	699b      	ldr	r3, [r3, #24]
 8009448:	f003 0310 	and.w	r3, r3, #16
 800944c:	60fb      	str	r3, [r7, #12]
 800944e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009450:	4b45      	ldr	r3, [pc, #276]	@ (8009568 <MX_GPIO_Init+0x144>)
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	4a44      	ldr	r2, [pc, #272]	@ (8009568 <MX_GPIO_Init+0x144>)
 8009456:	f043 0320 	orr.w	r3, r3, #32
 800945a:	6193      	str	r3, [r2, #24]
 800945c:	4b42      	ldr	r3, [pc, #264]	@ (8009568 <MX_GPIO_Init+0x144>)
 800945e:	699b      	ldr	r3, [r3, #24]
 8009460:	f003 0320 	and.w	r3, r3, #32
 8009464:	60bb      	str	r3, [r7, #8]
 8009466:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009468:	4b3f      	ldr	r3, [pc, #252]	@ (8009568 <MX_GPIO_Init+0x144>)
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	4a3e      	ldr	r2, [pc, #248]	@ (8009568 <MX_GPIO_Init+0x144>)
 800946e:	f043 0304 	orr.w	r3, r3, #4
 8009472:	6193      	str	r3, [r2, #24]
 8009474:	4b3c      	ldr	r3, [pc, #240]	@ (8009568 <MX_GPIO_Init+0x144>)
 8009476:	699b      	ldr	r3, [r3, #24]
 8009478:	f003 0304 	and.w	r3, r3, #4
 800947c:	607b      	str	r3, [r7, #4]
 800947e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009480:	4b39      	ldr	r3, [pc, #228]	@ (8009568 <MX_GPIO_Init+0x144>)
 8009482:	699b      	ldr	r3, [r3, #24]
 8009484:	4a38      	ldr	r2, [pc, #224]	@ (8009568 <MX_GPIO_Init+0x144>)
 8009486:	f043 0308 	orr.w	r3, r3, #8
 800948a:	6193      	str	r3, [r2, #24]
 800948c:	4b36      	ldr	r3, [pc, #216]	@ (8009568 <MX_GPIO_Init+0x144>)
 800948e:	699b      	ldr	r3, [r3, #24]
 8009490:	f003 0308 	and.w	r3, r3, #8
 8009494:	603b      	str	r3, [r7, #0]
 8009496:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8009498:	2200      	movs	r2, #0
 800949a:	21f0      	movs	r1, #240	@ 0xf0
 800949c:	4833      	ldr	r0, [pc, #204]	@ (800956c <MX_GPIO_Init+0x148>)
 800949e:	f001 f8b4 	bl	800a60a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80094a2:	2200      	movs	r2, #0
 80094a4:	f241 0130 	movw	r1, #4144	@ 0x1030
 80094a8:	4831      	ldr	r0, [pc, #196]	@ (8009570 <MX_GPIO_Init+0x14c>)
 80094aa:	f001 f8ae 	bl	800a60a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80094ae:	2200      	movs	r2, #0
 80094b0:	f640 4107 	movw	r1, #3079	@ 0xc07
 80094b4:	482f      	ldr	r0, [pc, #188]	@ (8009574 <MX_GPIO_Init+0x150>)
 80094b6:	f001 f8a8 	bl	800a60a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80094ba:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 80094be:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80094c0:	2300      	movs	r3, #0
 80094c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094c4:	2300      	movs	r3, #0
 80094c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80094c8:	f107 0310 	add.w	r3, r7, #16
 80094cc:	4619      	mov	r1, r3
 80094ce:	4828      	ldr	r0, [pc, #160]	@ (8009570 <MX_GPIO_Init+0x14c>)
 80094d0:	f000 fe24 	bl	800a11c <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80094d4:	f248 130f 	movw	r3, #33039	@ 0x810f
 80094d8:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80094da:	2300      	movs	r3, #0
 80094dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094de:	2300      	movs	r3, #0
 80094e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094e2:	f107 0310 	add.w	r3, r7, #16
 80094e6:	4619      	mov	r1, r3
 80094e8:	4820      	ldr	r0, [pc, #128]	@ (800956c <MX_GPIO_Init+0x148>)
 80094ea:	f000 fe17 	bl	800a11c <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80094ee:	23f0      	movs	r3, #240	@ 0xf0
 80094f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80094f2:	2301      	movs	r3, #1
 80094f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094f6:	2300      	movs	r3, #0
 80094f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094fa:	2302      	movs	r3, #2
 80094fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094fe:	f107 0310 	add.w	r3, r7, #16
 8009502:	4619      	mov	r1, r3
 8009504:	4819      	ldr	r0, [pc, #100]	@ (800956c <MX_GPIO_Init+0x148>)
 8009506:	f000 fe09 	bl	800a11c <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800950a:	f241 0330 	movw	r3, #4144	@ 0x1030
 800950e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009510:	2301      	movs	r3, #1
 8009512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009514:	2300      	movs	r3, #0
 8009516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009518:	2302      	movs	r3, #2
 800951a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800951c:	f107 0310 	add.w	r3, r7, #16
 8009520:	4619      	mov	r1, r3
 8009522:	4813      	ldr	r0, [pc, #76]	@ (8009570 <MX_GPIO_Init+0x14c>)
 8009524:	f000 fdfa 	bl	800a11c <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8009528:	f640 4307 	movw	r3, #3079	@ 0xc07
 800952c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800952e:	2301      	movs	r3, #1
 8009530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009532:	2300      	movs	r3, #0
 8009534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009536:	2302      	movs	r3, #2
 8009538:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800953a:	f107 0310 	add.w	r3, r7, #16
 800953e:	4619      	mov	r1, r3
 8009540:	480c      	ldr	r0, [pc, #48]	@ (8009574 <MX_GPIO_Init+0x150>)
 8009542:	f000 fdeb 	bl	800a11c <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8009546:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800954a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800954c:	2300      	movs	r3, #0
 800954e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009550:	2300      	movs	r3, #0
 8009552:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009554:	f107 0310 	add.w	r3, r7, #16
 8009558:	4619      	mov	r1, r3
 800955a:	4806      	ldr	r0, [pc, #24]	@ (8009574 <MX_GPIO_Init+0x150>)
 800955c:	f000 fdde 	bl	800a11c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8009560:	bf00      	nop
 8009562:	3720      	adds	r7, #32
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	40021000 	.word	0x40021000
 800956c:	40010800 	.word	0x40010800
 8009570:	40011000 	.word	0x40011000
 8009574:	40010c00 	.word	0x40010c00

08009578 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009578:	b480      	push	{r7}
 800957a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800957c:	bf00      	nop
 800957e:	46bd      	mov	sp, r7
 8009580:	bc80      	pop	{r7}
 8009582:	4770      	bx	lr

08009584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800958a:	4b15      	ldr	r3, [pc, #84]	@ (80095e0 <HAL_MspInit+0x5c>)
 800958c:	699b      	ldr	r3, [r3, #24]
 800958e:	4a14      	ldr	r2, [pc, #80]	@ (80095e0 <HAL_MspInit+0x5c>)
 8009590:	f043 0301 	orr.w	r3, r3, #1
 8009594:	6193      	str	r3, [r2, #24]
 8009596:	4b12      	ldr	r3, [pc, #72]	@ (80095e0 <HAL_MspInit+0x5c>)
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	f003 0301 	and.w	r3, r3, #1
 800959e:	60bb      	str	r3, [r7, #8]
 80095a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80095a2:	4b0f      	ldr	r3, [pc, #60]	@ (80095e0 <HAL_MspInit+0x5c>)
 80095a4:	69db      	ldr	r3, [r3, #28]
 80095a6:	4a0e      	ldr	r2, [pc, #56]	@ (80095e0 <HAL_MspInit+0x5c>)
 80095a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095ac:	61d3      	str	r3, [r2, #28]
 80095ae:	4b0c      	ldr	r3, [pc, #48]	@ (80095e0 <HAL_MspInit+0x5c>)
 80095b0:	69db      	ldr	r3, [r3, #28]
 80095b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80095b6:	607b      	str	r3, [r7, #4]
 80095b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80095ba:	4b0a      	ldr	r3, [pc, #40]	@ (80095e4 <HAL_MspInit+0x60>)
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	60fb      	str	r3, [r7, #12]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80095c6:	60fb      	str	r3, [r7, #12]
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80095ce:	60fb      	str	r3, [r7, #12]
 80095d0:	4a04      	ldr	r2, [pc, #16]	@ (80095e4 <HAL_MspInit+0x60>)
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80095d6:	bf00      	nop
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	bc80      	pop	{r7}
 80095de:	4770      	bx	lr
 80095e0:	40021000 	.word	0x40021000
 80095e4:	40010000 	.word	0x40010000

080095e8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b088      	sub	sp, #32
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095f0:	f107 0310 	add.w	r3, r7, #16
 80095f4:	2200      	movs	r2, #0
 80095f6:	601a      	str	r2, [r3, #0]
 80095f8:	605a      	str	r2, [r3, #4]
 80095fa:	609a      	str	r2, [r3, #8]
 80095fc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a1c      	ldr	r2, [pc, #112]	@ (8009674 <HAL_CAN_MspInit+0x8c>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d131      	bne.n	800966c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8009608:	4b1b      	ldr	r3, [pc, #108]	@ (8009678 <HAL_CAN_MspInit+0x90>)
 800960a:	69db      	ldr	r3, [r3, #28]
 800960c:	4a1a      	ldr	r2, [pc, #104]	@ (8009678 <HAL_CAN_MspInit+0x90>)
 800960e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009612:	61d3      	str	r3, [r2, #28]
 8009614:	4b18      	ldr	r3, [pc, #96]	@ (8009678 <HAL_CAN_MspInit+0x90>)
 8009616:	69db      	ldr	r3, [r3, #28]
 8009618:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800961c:	60fb      	str	r3, [r7, #12]
 800961e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009620:	4b15      	ldr	r3, [pc, #84]	@ (8009678 <HAL_CAN_MspInit+0x90>)
 8009622:	699b      	ldr	r3, [r3, #24]
 8009624:	4a14      	ldr	r2, [pc, #80]	@ (8009678 <HAL_CAN_MspInit+0x90>)
 8009626:	f043 0304 	orr.w	r3, r3, #4
 800962a:	6193      	str	r3, [r2, #24]
 800962c:	4b12      	ldr	r3, [pc, #72]	@ (8009678 <HAL_CAN_MspInit+0x90>)
 800962e:	699b      	ldr	r3, [r3, #24]
 8009630:	f003 0304 	and.w	r3, r3, #4
 8009634:	60bb      	str	r3, [r7, #8]
 8009636:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8009638:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800963c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800963e:	2300      	movs	r3, #0
 8009640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009642:	2300      	movs	r3, #0
 8009644:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009646:	f107 0310 	add.w	r3, r7, #16
 800964a:	4619      	mov	r1, r3
 800964c:	480b      	ldr	r0, [pc, #44]	@ (800967c <HAL_CAN_MspInit+0x94>)
 800964e:	f000 fd65 	bl	800a11c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8009652:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009656:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009658:	2302      	movs	r3, #2
 800965a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800965c:	2303      	movs	r3, #3
 800965e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009660:	f107 0310 	add.w	r3, r7, #16
 8009664:	4619      	mov	r1, r3
 8009666:	4805      	ldr	r0, [pc, #20]	@ (800967c <HAL_CAN_MspInit+0x94>)
 8009668:	f000 fd58 	bl	800a11c <HAL_GPIO_Init>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 800966c:	bf00      	nop
 800966e:	3720      	adds	r7, #32
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}
 8009674:	40006400 	.word	0x40006400
 8009678:	40021000 	.word	0x40021000
 800967c:	40010800 	.word	0x40010800

08009680 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b088      	sub	sp, #32
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009688:	f107 0310 	add.w	r3, r7, #16
 800968c:	2200      	movs	r2, #0
 800968e:	601a      	str	r2, [r3, #0]
 8009690:	605a      	str	r2, [r3, #4]
 8009692:	609a      	str	r2, [r3, #8]
 8009694:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a15      	ldr	r2, [pc, #84]	@ (80096f0 <HAL_I2C_MspInit+0x70>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d123      	bne.n	80096e8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80096a0:	4b14      	ldr	r3, [pc, #80]	@ (80096f4 <HAL_I2C_MspInit+0x74>)
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	4a13      	ldr	r2, [pc, #76]	@ (80096f4 <HAL_I2C_MspInit+0x74>)
 80096a6:	f043 0308 	orr.w	r3, r3, #8
 80096aa:	6193      	str	r3, [r2, #24]
 80096ac:	4b11      	ldr	r3, [pc, #68]	@ (80096f4 <HAL_I2C_MspInit+0x74>)
 80096ae:	699b      	ldr	r3, [r3, #24]
 80096b0:	f003 0308 	and.w	r3, r3, #8
 80096b4:	60fb      	str	r3, [r7, #12]
 80096b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80096b8:	23c0      	movs	r3, #192	@ 0xc0
 80096ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80096bc:	2312      	movs	r3, #18
 80096be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80096c0:	2303      	movs	r3, #3
 80096c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80096c4:	f107 0310 	add.w	r3, r7, #16
 80096c8:	4619      	mov	r1, r3
 80096ca:	480b      	ldr	r0, [pc, #44]	@ (80096f8 <HAL_I2C_MspInit+0x78>)
 80096cc:	f000 fd26 	bl	800a11c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80096d0:	4b08      	ldr	r3, [pc, #32]	@ (80096f4 <HAL_I2C_MspInit+0x74>)
 80096d2:	69db      	ldr	r3, [r3, #28]
 80096d4:	4a07      	ldr	r2, [pc, #28]	@ (80096f4 <HAL_I2C_MspInit+0x74>)
 80096d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80096da:	61d3      	str	r3, [r2, #28]
 80096dc:	4b05      	ldr	r3, [pc, #20]	@ (80096f4 <HAL_I2C_MspInit+0x74>)
 80096de:	69db      	ldr	r3, [r3, #28]
 80096e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80096e4:	60bb      	str	r3, [r7, #8]
 80096e6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80096e8:	bf00      	nop
 80096ea:	3720      	adds	r7, #32
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	40005400 	.word	0x40005400
 80096f4:	40021000 	.word	0x40021000
 80096f8:	40010c00 	.word	0x40010c00

080096fc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a0a      	ldr	r2, [pc, #40]	@ (8009734 <HAL_I2C_MspDeInit+0x38>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d10d      	bne.n	800972a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800970e:	4b0a      	ldr	r3, [pc, #40]	@ (8009738 <HAL_I2C_MspDeInit+0x3c>)
 8009710:	69db      	ldr	r3, [r3, #28]
 8009712:	4a09      	ldr	r2, [pc, #36]	@ (8009738 <HAL_I2C_MspDeInit+0x3c>)
 8009714:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009718:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800971a:	2140      	movs	r1, #64	@ 0x40
 800971c:	4807      	ldr	r0, [pc, #28]	@ (800973c <HAL_I2C_MspDeInit+0x40>)
 800971e:	f000 fe91 	bl	800a444 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8009722:	2180      	movs	r1, #128	@ 0x80
 8009724:	4805      	ldr	r0, [pc, #20]	@ (800973c <HAL_I2C_MspDeInit+0x40>)
 8009726:	f000 fe8d 	bl	800a444 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800972a:	bf00      	nop
 800972c:	3708      	adds	r7, #8
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	40005400 	.word	0x40005400
 8009738:	40021000 	.word	0x40021000
 800973c:	40010c00 	.word	0x40010c00

08009740 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a0d      	ldr	r2, [pc, #52]	@ (8009784 <HAL_TIM_Base_MspInit+0x44>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d113      	bne.n	800977a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009752:	4b0d      	ldr	r3, [pc, #52]	@ (8009788 <HAL_TIM_Base_MspInit+0x48>)
 8009754:	699b      	ldr	r3, [r3, #24]
 8009756:	4a0c      	ldr	r2, [pc, #48]	@ (8009788 <HAL_TIM_Base_MspInit+0x48>)
 8009758:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800975c:	6193      	str	r3, [r2, #24]
 800975e:	4b0a      	ldr	r3, [pc, #40]	@ (8009788 <HAL_TIM_Base_MspInit+0x48>)
 8009760:	699b      	ldr	r3, [r3, #24]
 8009762:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009766:	60fb      	str	r3, [r7, #12]
 8009768:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800976a:	2200      	movs	r2, #0
 800976c:	2100      	movs	r1, #0
 800976e:	2019      	movs	r0, #25
 8009770:	f000 fb5b 	bl	8009e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8009774:	2019      	movs	r0, #25
 8009776:	f000 fb74 	bl	8009e62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800977a:	bf00      	nop
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	40012c00 	.word	0x40012c00
 8009788:	40021000 	.word	0x40021000

0800978c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b088      	sub	sp, #32
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009794:	f107 0310 	add.w	r3, r7, #16
 8009798:	2200      	movs	r2, #0
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	605a      	str	r2, [r3, #4]
 800979e:	609a      	str	r2, [r3, #8]
 80097a0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a20      	ldr	r2, [pc, #128]	@ (8009828 <HAL_UART_MspInit+0x9c>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d139      	bne.n	8009820 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80097ac:	4b1f      	ldr	r3, [pc, #124]	@ (800982c <HAL_UART_MspInit+0xa0>)
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	4a1e      	ldr	r2, [pc, #120]	@ (800982c <HAL_UART_MspInit+0xa0>)
 80097b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80097b6:	6193      	str	r3, [r2, #24]
 80097b8:	4b1c      	ldr	r3, [pc, #112]	@ (800982c <HAL_UART_MspInit+0xa0>)
 80097ba:	699b      	ldr	r3, [r3, #24]
 80097bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80097c0:	60fb      	str	r3, [r7, #12]
 80097c2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097c4:	4b19      	ldr	r3, [pc, #100]	@ (800982c <HAL_UART_MspInit+0xa0>)
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	4a18      	ldr	r2, [pc, #96]	@ (800982c <HAL_UART_MspInit+0xa0>)
 80097ca:	f043 0304 	orr.w	r3, r3, #4
 80097ce:	6193      	str	r3, [r2, #24]
 80097d0:	4b16      	ldr	r3, [pc, #88]	@ (800982c <HAL_UART_MspInit+0xa0>)
 80097d2:	699b      	ldr	r3, [r3, #24]
 80097d4:	f003 0304 	and.w	r3, r3, #4
 80097d8:	60bb      	str	r3, [r7, #8]
 80097da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80097dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80097e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097e2:	2302      	movs	r3, #2
 80097e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80097e6:	2303      	movs	r3, #3
 80097e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097ea:	f107 0310 	add.w	r3, r7, #16
 80097ee:	4619      	mov	r1, r3
 80097f0:	480f      	ldr	r0, [pc, #60]	@ (8009830 <HAL_UART_MspInit+0xa4>)
 80097f2:	f000 fc93 	bl	800a11c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80097f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80097fc:	2300      	movs	r3, #0
 80097fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009800:	2300      	movs	r3, #0
 8009802:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009804:	f107 0310 	add.w	r3, r7, #16
 8009808:	4619      	mov	r1, r3
 800980a:	4809      	ldr	r0, [pc, #36]	@ (8009830 <HAL_UART_MspInit+0xa4>)
 800980c:	f000 fc86 	bl	800a11c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009810:	2200      	movs	r2, #0
 8009812:	2100      	movs	r1, #0
 8009814:	2025      	movs	r0, #37	@ 0x25
 8009816:	f000 fb08 	bl	8009e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800981a:	2025      	movs	r0, #37	@ 0x25
 800981c:	f000 fb21 	bl	8009e62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8009820:	bf00      	nop
 8009822:	3720      	adds	r7, #32
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	40013800 	.word	0x40013800
 800982c:	40021000 	.word	0x40021000
 8009830:	40010800 	.word	0x40010800

08009834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009834:	b480      	push	{r7}
 8009836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009838:	bf00      	nop
 800983a:	e7fd      	b.n	8009838 <NMI_Handler+0x4>

0800983c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800983c:	b480      	push	{r7}
 800983e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009840:	bf00      	nop
 8009842:	e7fd      	b.n	8009840 <HardFault_Handler+0x4>

08009844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009844:	b480      	push	{r7}
 8009846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009848:	bf00      	nop
 800984a:	e7fd      	b.n	8009848 <MemManage_Handler+0x4>

0800984c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800984c:	b480      	push	{r7}
 800984e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009850:	bf00      	nop
 8009852:	e7fd      	b.n	8009850 <BusFault_Handler+0x4>

08009854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009854:	b480      	push	{r7}
 8009856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009858:	bf00      	nop
 800985a:	e7fd      	b.n	8009858 <UsageFault_Handler+0x4>

0800985c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800985c:	b480      	push	{r7}
 800985e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009860:	bf00      	nop
 8009862:	46bd      	mov	sp, r7
 8009864:	bc80      	pop	{r7}
 8009866:	4770      	bx	lr

08009868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009868:	b480      	push	{r7}
 800986a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800986c:	bf00      	nop
 800986e:	46bd      	mov	sp, r7
 8009870:	bc80      	pop	{r7}
 8009872:	4770      	bx	lr

08009874 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009874:	b480      	push	{r7}
 8009876:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009878:	bf00      	nop
 800987a:	46bd      	mov	sp, r7
 800987c:	bc80      	pop	{r7}
 800987e:	4770      	bx	lr

08009880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009884:	f000 f8be 	bl	8009a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009888:	bf00      	nop
 800988a:	bd80      	pop	{r7, pc}

0800988c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009890:	4802      	ldr	r0, [pc, #8]	@ (800989c <TIM1_UP_IRQHandler+0x10>)
 8009892:	f002 fdcd 	bl	800c430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8009896:	bf00      	nop
 8009898:	bd80      	pop	{r7, pc}
 800989a:	bf00      	nop
 800989c:	20001990 	.word	0x20001990

080098a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80098a4:	4802      	ldr	r0, [pc, #8]	@ (80098b0 <USART1_IRQHandler+0x10>)
 80098a6:	f003 f9cb 	bl	800cc40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80098aa:	bf00      	nop
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	200019d8 	.word	0x200019d8

080098b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b086      	sub	sp, #24
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80098bc:	4a14      	ldr	r2, [pc, #80]	@ (8009910 <_sbrk+0x5c>)
 80098be:	4b15      	ldr	r3, [pc, #84]	@ (8009914 <_sbrk+0x60>)
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80098c8:	4b13      	ldr	r3, [pc, #76]	@ (8009918 <_sbrk+0x64>)
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d102      	bne.n	80098d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80098d0:	4b11      	ldr	r3, [pc, #68]	@ (8009918 <_sbrk+0x64>)
 80098d2:	4a12      	ldr	r2, [pc, #72]	@ (800991c <_sbrk+0x68>)
 80098d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80098d6:	4b10      	ldr	r3, [pc, #64]	@ (8009918 <_sbrk+0x64>)
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4413      	add	r3, r2
 80098de:	693a      	ldr	r2, [r7, #16]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d207      	bcs.n	80098f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80098e4:	f003 fffa 	bl	800d8dc <__errno>
 80098e8:	4603      	mov	r3, r0
 80098ea:	220c      	movs	r2, #12
 80098ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80098ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80098f2:	e009      	b.n	8009908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80098f4:	4b08      	ldr	r3, [pc, #32]	@ (8009918 <_sbrk+0x64>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80098fa:	4b07      	ldr	r3, [pc, #28]	@ (8009918 <_sbrk+0x64>)
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4413      	add	r3, r2
 8009902:	4a05      	ldr	r2, [pc, #20]	@ (8009918 <_sbrk+0x64>)
 8009904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009906:	68fb      	ldr	r3, [r7, #12]
}
 8009908:	4618      	mov	r0, r3
 800990a:	3718      	adds	r7, #24
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	2000c000 	.word	0x2000c000
 8009914:	00000400 	.word	0x00000400
 8009918:	20001a20 	.word	0x20001a20
 800991c:	20001b70 	.word	0x20001b70

08009920 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009920:	b480      	push	{r7}
 8009922:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009924:	bf00      	nop
 8009926:	46bd      	mov	sp, r7
 8009928:	bc80      	pop	{r7}
 800992a:	4770      	bx	lr

0800992c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800992c:	480c      	ldr	r0, [pc, #48]	@ (8009960 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800992e:	490d      	ldr	r1, [pc, #52]	@ (8009964 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009930:	4a0d      	ldr	r2, [pc, #52]	@ (8009968 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009934:	e002      	b.n	800993c <LoopCopyDataInit>

08009936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800993a:	3304      	adds	r3, #4

0800993c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800993c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800993e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009940:	d3f9      	bcc.n	8009936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009942:	4a0a      	ldr	r2, [pc, #40]	@ (800996c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009944:	4c0a      	ldr	r4, [pc, #40]	@ (8009970 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009948:	e001      	b.n	800994e <LoopFillZerobss>

0800994a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800994a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800994c:	3204      	adds	r2, #4

0800994e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800994e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009950:	d3fb      	bcc.n	800994a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009952:	f7ff ffe5 	bl	8009920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009956:	f003 ffc7 	bl	800d8e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800995a:	f7ff fb99 	bl	8009090 <main>
  bx lr
 800995e:	4770      	bx	lr
  ldr r0, =_sdata
 8009960:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009964:	20000fd0 	.word	0x20000fd0
  ldr r2, =_sidata
 8009968:	0800eca8 	.word	0x0800eca8
  ldr r2, =_sbss
 800996c:	20000fd0 	.word	0x20000fd0
  ldr r4, =_ebss
 8009970:	20001b70 	.word	0x20001b70

08009974 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009974:	e7fe      	b.n	8009974 <ADC1_2_IRQHandler>
	...

08009978 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800997c:	4b08      	ldr	r3, [pc, #32]	@ (80099a0 <HAL_Init+0x28>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a07      	ldr	r2, [pc, #28]	@ (80099a0 <HAL_Init+0x28>)
 8009982:	f043 0310 	orr.w	r3, r3, #16
 8009986:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009988:	2003      	movs	r0, #3
 800998a:	f000 fa43 	bl	8009e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800998e:	200f      	movs	r0, #15
 8009990:	f000 f808 	bl	80099a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009994:	f7ff fdf6 	bl	8009584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	40022000 	.word	0x40022000

080099a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80099ac:	4b12      	ldr	r3, [pc, #72]	@ (80099f8 <HAL_InitTick+0x54>)
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	4b12      	ldr	r3, [pc, #72]	@ (80099fc <HAL_InitTick+0x58>)
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	4619      	mov	r1, r3
 80099b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80099ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80099be:	fbb2 f3f3 	udiv	r3, r2, r3
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 fa5b 	bl	8009e7e <HAL_SYSTICK_Config>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d001      	beq.n	80099d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	e00e      	b.n	80099f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2b0f      	cmp	r3, #15
 80099d6:	d80a      	bhi.n	80099ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80099d8:	2200      	movs	r2, #0
 80099da:	6879      	ldr	r1, [r7, #4]
 80099dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099e0:	f000 fa23 	bl	8009e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80099e4:	4a06      	ldr	r2, [pc, #24]	@ (8009a00 <HAL_InitTick+0x5c>)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80099ea:	2300      	movs	r3, #0
 80099ec:	e000      	b.n	80099f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3708      	adds	r7, #8
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	20000f74 	.word	0x20000f74
 80099fc:	20000f7c 	.word	0x20000f7c
 8009a00:	20000f78 	.word	0x20000f78

08009a04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009a04:	b480      	push	{r7}
 8009a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009a08:	4b05      	ldr	r3, [pc, #20]	@ (8009a20 <HAL_IncTick+0x1c>)
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	4b05      	ldr	r3, [pc, #20]	@ (8009a24 <HAL_IncTick+0x20>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4413      	add	r3, r2
 8009a14:	4a03      	ldr	r2, [pc, #12]	@ (8009a24 <HAL_IncTick+0x20>)
 8009a16:	6013      	str	r3, [r2, #0]
}
 8009a18:	bf00      	nop
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bc80      	pop	{r7}
 8009a1e:	4770      	bx	lr
 8009a20:	20000f7c 	.word	0x20000f7c
 8009a24:	20001a24 	.word	0x20001a24

08009a28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8009a2c:	4b02      	ldr	r3, [pc, #8]	@ (8009a38 <HAL_GetTick+0x10>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bc80      	pop	{r7}
 8009a36:	4770      	bx	lr
 8009a38:	20001a24 	.word	0x20001a24

08009a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b084      	sub	sp, #16
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009a44:	f7ff fff0 	bl	8009a28 <HAL_GetTick>
 8009a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a54:	d005      	beq.n	8009a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009a56:	4b0a      	ldr	r3, [pc, #40]	@ (8009a80 <HAL_Delay+0x44>)
 8009a58:	781b      	ldrb	r3, [r3, #0]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	4413      	add	r3, r2
 8009a60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009a62:	bf00      	nop
 8009a64:	f7ff ffe0 	bl	8009a28 <HAL_GetTick>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	68bb      	ldr	r3, [r7, #8]
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	68fa      	ldr	r2, [r7, #12]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d8f7      	bhi.n	8009a64 <HAL_Delay+0x28>
  {
  }
}
 8009a74:	bf00      	nop
 8009a76:	bf00      	nop
 8009a78:	3710      	adds	r7, #16
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	bd80      	pop	{r7, pc}
 8009a7e:	bf00      	nop
 8009a80:	20000f7c 	.word	0x20000f7c

08009a84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d101      	bne.n	8009a96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e0ed      	b.n	8009c72 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d102      	bne.n	8009aa8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f7ff fda0 	bl	80095e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f042 0201 	orr.w	r2, r2, #1
 8009ab6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ab8:	f7ff ffb6 	bl	8009a28 <HAL_GetTick>
 8009abc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009abe:	e012      	b.n	8009ae6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009ac0:	f7ff ffb2 	bl	8009a28 <HAL_GetTick>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	1ad3      	subs	r3, r2, r3
 8009aca:	2b0a      	cmp	r3, #10
 8009acc:	d90b      	bls.n	8009ae6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ad2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2205      	movs	r2, #5
 8009ade:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	e0c5      	b.n	8009c72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	f003 0301 	and.w	r3, r3, #1
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d0e5      	beq.n	8009ac0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f022 0202 	bic.w	r2, r2, #2
 8009b02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009b04:	f7ff ff90 	bl	8009a28 <HAL_GetTick>
 8009b08:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009b0a:	e012      	b.n	8009b32 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009b0c:	f7ff ff8c 	bl	8009a28 <HAL_GetTick>
 8009b10:	4602      	mov	r2, r0
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	1ad3      	subs	r3, r2, r3
 8009b16:	2b0a      	cmp	r3, #10
 8009b18:	d90b      	bls.n	8009b32 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b1e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2205      	movs	r2, #5
 8009b2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e09f      	b.n	8009c72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	f003 0302 	and.w	r3, r3, #2
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1e5      	bne.n	8009b0c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	7e1b      	ldrb	r3, [r3, #24]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d108      	bne.n	8009b5a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681a      	ldr	r2, [r3, #0]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009b56:	601a      	str	r2, [r3, #0]
 8009b58:	e007      	b.n	8009b6a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009b68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	7e5b      	ldrb	r3, [r3, #25]
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d108      	bne.n	8009b84 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	681a      	ldr	r2, [r3, #0]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b80:	601a      	str	r2, [r3, #0]
 8009b82:	e007      	b.n	8009b94 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	7e9b      	ldrb	r3, [r3, #26]
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d108      	bne.n	8009bae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	681a      	ldr	r2, [r3, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f042 0220 	orr.w	r2, r2, #32
 8009baa:	601a      	str	r2, [r3, #0]
 8009bac:	e007      	b.n	8009bbe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f022 0220 	bic.w	r2, r2, #32
 8009bbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	7edb      	ldrb	r3, [r3, #27]
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d108      	bne.n	8009bd8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f022 0210 	bic.w	r2, r2, #16
 8009bd4:	601a      	str	r2, [r3, #0]
 8009bd6:	e007      	b.n	8009be8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f042 0210 	orr.w	r2, r2, #16
 8009be6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	7f1b      	ldrb	r3, [r3, #28]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d108      	bne.n	8009c02 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f042 0208 	orr.w	r2, r2, #8
 8009bfe:	601a      	str	r2, [r3, #0]
 8009c00:	e007      	b.n	8009c12 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f022 0208 	bic.w	r2, r2, #8
 8009c10:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	7f5b      	ldrb	r3, [r3, #29]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d108      	bne.n	8009c2c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f042 0204 	orr.w	r2, r2, #4
 8009c28:	601a      	str	r2, [r3, #0]
 8009c2a:	e007      	b.n	8009c3c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f022 0204 	bic.w	r2, r2, #4
 8009c3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	689a      	ldr	r2, [r3, #8]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	431a      	orrs	r2, r3
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	691b      	ldr	r3, [r3, #16]
 8009c4a:	431a      	orrs	r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	695b      	ldr	r3, [r3, #20]
 8009c50:	ea42 0103 	orr.w	r1, r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	1e5a      	subs	r2, r3, #1
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	430a      	orrs	r2, r1
 8009c60:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2200      	movs	r2, #0
 8009c66:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3710      	adds	r7, #16
 8009c76:	46bd      	mov	sp, r7
 8009c78:	bd80      	pop	{r7, pc}
	...

08009c7c <__NVIC_SetPriorityGrouping>:
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f003 0307 	and.w	r3, r3, #7
 8009c8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8009cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009c98:	4013      	ands	r3, r2
 8009c9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009ca4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009cae:	4a04      	ldr	r2, [pc, #16]	@ (8009cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	60d3      	str	r3, [r2, #12]
}
 8009cb4:	bf00      	nop
 8009cb6:	3714      	adds	r7, #20
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bc80      	pop	{r7}
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	e000ed00 	.word	0xe000ed00

08009cc4 <__NVIC_GetPriorityGrouping>:
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009cc8:	4b04      	ldr	r3, [pc, #16]	@ (8009cdc <__NVIC_GetPriorityGrouping+0x18>)
 8009cca:	68db      	ldr	r3, [r3, #12]
 8009ccc:	0a1b      	lsrs	r3, r3, #8
 8009cce:	f003 0307 	and.w	r3, r3, #7
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bc80      	pop	{r7}
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	e000ed00 	.word	0xe000ed00

08009ce0 <__NVIC_EnableIRQ>:
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	db0b      	blt.n	8009d0a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009cf2:	79fb      	ldrb	r3, [r7, #7]
 8009cf4:	f003 021f 	and.w	r2, r3, #31
 8009cf8:	4906      	ldr	r1, [pc, #24]	@ (8009d14 <__NVIC_EnableIRQ+0x34>)
 8009cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cfe:	095b      	lsrs	r3, r3, #5
 8009d00:	2001      	movs	r0, #1
 8009d02:	fa00 f202 	lsl.w	r2, r0, r2
 8009d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009d0a:	bf00      	nop
 8009d0c:	370c      	adds	r7, #12
 8009d0e:	46bd      	mov	sp, r7
 8009d10:	bc80      	pop	{r7}
 8009d12:	4770      	bx	lr
 8009d14:	e000e100 	.word	0xe000e100

08009d18 <__NVIC_SetPriority>:
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b083      	sub	sp, #12
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	4603      	mov	r3, r0
 8009d20:	6039      	str	r1, [r7, #0]
 8009d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	db0a      	blt.n	8009d42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	b2da      	uxtb	r2, r3
 8009d30:	490c      	ldr	r1, [pc, #48]	@ (8009d64 <__NVIC_SetPriority+0x4c>)
 8009d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d36:	0112      	lsls	r2, r2, #4
 8009d38:	b2d2      	uxtb	r2, r2
 8009d3a:	440b      	add	r3, r1
 8009d3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009d40:	e00a      	b.n	8009d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	b2da      	uxtb	r2, r3
 8009d46:	4908      	ldr	r1, [pc, #32]	@ (8009d68 <__NVIC_SetPriority+0x50>)
 8009d48:	79fb      	ldrb	r3, [r7, #7]
 8009d4a:	f003 030f 	and.w	r3, r3, #15
 8009d4e:	3b04      	subs	r3, #4
 8009d50:	0112      	lsls	r2, r2, #4
 8009d52:	b2d2      	uxtb	r2, r2
 8009d54:	440b      	add	r3, r1
 8009d56:	761a      	strb	r2, [r3, #24]
}
 8009d58:	bf00      	nop
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bc80      	pop	{r7}
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	e000e100 	.word	0xe000e100
 8009d68:	e000ed00 	.word	0xe000ed00

08009d6c <NVIC_EncodePriority>:
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b089      	sub	sp, #36	@ 0x24
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f003 0307 	and.w	r3, r3, #7
 8009d7e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	f1c3 0307 	rsb	r3, r3, #7
 8009d86:	2b04      	cmp	r3, #4
 8009d88:	bf28      	it	cs
 8009d8a:	2304      	movcs	r3, #4
 8009d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009d8e:	69fb      	ldr	r3, [r7, #28]
 8009d90:	3304      	adds	r3, #4
 8009d92:	2b06      	cmp	r3, #6
 8009d94:	d902      	bls.n	8009d9c <NVIC_EncodePriority+0x30>
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	3b03      	subs	r3, #3
 8009d9a:	e000      	b.n	8009d9e <NVIC_EncodePriority+0x32>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009da0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009da4:	69bb      	ldr	r3, [r7, #24]
 8009da6:	fa02 f303 	lsl.w	r3, r2, r3
 8009daa:	43da      	mvns	r2, r3
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	401a      	ands	r2, r3
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009db4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	fa01 f303 	lsl.w	r3, r1, r3
 8009dbe:	43d9      	mvns	r1, r3
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009dc4:	4313      	orrs	r3, r2
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3724      	adds	r7, #36	@ 0x24
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bc80      	pop	{r7}
 8009dce:	4770      	bx	lr

08009dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	3b01      	subs	r3, #1
 8009ddc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009de0:	d301      	bcc.n	8009de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009de2:	2301      	movs	r3, #1
 8009de4:	e00f      	b.n	8009e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009de6:	4a0a      	ldr	r2, [pc, #40]	@ (8009e10 <SysTick_Config+0x40>)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	3b01      	subs	r3, #1
 8009dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009dee:	210f      	movs	r1, #15
 8009df0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009df4:	f7ff ff90 	bl	8009d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009df8:	4b05      	ldr	r3, [pc, #20]	@ (8009e10 <SysTick_Config+0x40>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009dfe:	4b04      	ldr	r3, [pc, #16]	@ (8009e10 <SysTick_Config+0x40>)
 8009e00:	2207      	movs	r2, #7
 8009e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}
 8009e0e:	bf00      	nop
 8009e10:	e000e010 	.word	0xe000e010

08009e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b082      	sub	sp, #8
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f7ff ff2d 	bl	8009c7c <__NVIC_SetPriorityGrouping>
}
 8009e22:	bf00      	nop
 8009e24:	3708      	adds	r7, #8
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009e2a:	b580      	push	{r7, lr}
 8009e2c:	b086      	sub	sp, #24
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	4603      	mov	r3, r0
 8009e32:	60b9      	str	r1, [r7, #8]
 8009e34:	607a      	str	r2, [r7, #4]
 8009e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009e3c:	f7ff ff42 	bl	8009cc4 <__NVIC_GetPriorityGrouping>
 8009e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	68b9      	ldr	r1, [r7, #8]
 8009e46:	6978      	ldr	r0, [r7, #20]
 8009e48:	f7ff ff90 	bl	8009d6c <NVIC_EncodePriority>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e52:	4611      	mov	r1, r2
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7ff ff5f 	bl	8009d18 <__NVIC_SetPriority>
}
 8009e5a:	bf00      	nop
 8009e5c:	3718      	adds	r7, #24
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b082      	sub	sp, #8
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	4603      	mov	r3, r0
 8009e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7ff ff35 	bl	8009ce0 <__NVIC_EnableIRQ>
}
 8009e76:	bf00      	nop
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}

08009e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009e7e:	b580      	push	{r7, lr}
 8009e80:	b082      	sub	sp, #8
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f7ff ffa2 	bl	8009dd0 <SysTick_Config>
 8009e8c:	4603      	mov	r3, r0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009e96:	b480      	push	{r7}
 8009e98:	b085      	sub	sp, #20
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	2b02      	cmp	r3, #2
 8009eac:	d008      	beq.n	8009ec0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2204      	movs	r2, #4
 8009eb2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e020      	b.n	8009f02 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f022 020e 	bic.w	r2, r2, #14
 8009ece:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681a      	ldr	r2, [r3, #0]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f022 0201 	bic.w	r2, r2, #1
 8009ede:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ee8:	2101      	movs	r1, #1
 8009eea:	fa01 f202 	lsl.w	r2, r1, r2
 8009eee:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3714      	adds	r7, #20
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bc80      	pop	{r7}
 8009f0a:	4770      	bx	lr

08009f0c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f14:	2300      	movs	r3, #0
 8009f16:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8009f1e:	b2db      	uxtb	r3, r3
 8009f20:	2b02      	cmp	r3, #2
 8009f22:	d005      	beq.n	8009f30 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2204      	movs	r2, #4
 8009f28:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	73fb      	strb	r3, [r7, #15]
 8009f2e:	e0d6      	b.n	800a0de <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681a      	ldr	r2, [r3, #0]
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f022 020e 	bic.w	r2, r2, #14
 8009f3e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f022 0201 	bic.w	r2, r2, #1
 8009f4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	461a      	mov	r2, r3
 8009f56:	4b64      	ldr	r3, [pc, #400]	@ (800a0e8 <HAL_DMA_Abort_IT+0x1dc>)
 8009f58:	429a      	cmp	r2, r3
 8009f5a:	d958      	bls.n	800a00e <HAL_DMA_Abort_IT+0x102>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a62      	ldr	r2, [pc, #392]	@ (800a0ec <HAL_DMA_Abort_IT+0x1e0>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d04f      	beq.n	800a006 <HAL_DMA_Abort_IT+0xfa>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a61      	ldr	r2, [pc, #388]	@ (800a0f0 <HAL_DMA_Abort_IT+0x1e4>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d048      	beq.n	800a002 <HAL_DMA_Abort_IT+0xf6>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a5f      	ldr	r2, [pc, #380]	@ (800a0f4 <HAL_DMA_Abort_IT+0x1e8>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d040      	beq.n	8009ffc <HAL_DMA_Abort_IT+0xf0>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a5e      	ldr	r2, [pc, #376]	@ (800a0f8 <HAL_DMA_Abort_IT+0x1ec>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d038      	beq.n	8009ff6 <HAL_DMA_Abort_IT+0xea>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a5c      	ldr	r2, [pc, #368]	@ (800a0fc <HAL_DMA_Abort_IT+0x1f0>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d030      	beq.n	8009ff0 <HAL_DMA_Abort_IT+0xe4>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a5b      	ldr	r2, [pc, #364]	@ (800a100 <HAL_DMA_Abort_IT+0x1f4>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d028      	beq.n	8009fea <HAL_DMA_Abort_IT+0xde>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a52      	ldr	r2, [pc, #328]	@ (800a0e8 <HAL_DMA_Abort_IT+0x1dc>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d020      	beq.n	8009fe4 <HAL_DMA_Abort_IT+0xd8>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a57      	ldr	r2, [pc, #348]	@ (800a104 <HAL_DMA_Abort_IT+0x1f8>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d019      	beq.n	8009fe0 <HAL_DMA_Abort_IT+0xd4>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	4a55      	ldr	r2, [pc, #340]	@ (800a108 <HAL_DMA_Abort_IT+0x1fc>)
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d012      	beq.n	8009fdc <HAL_DMA_Abort_IT+0xd0>
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a54      	ldr	r2, [pc, #336]	@ (800a10c <HAL_DMA_Abort_IT+0x200>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d00a      	beq.n	8009fd6 <HAL_DMA_Abort_IT+0xca>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4a52      	ldr	r2, [pc, #328]	@ (800a110 <HAL_DMA_Abort_IT+0x204>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d102      	bne.n	8009fd0 <HAL_DMA_Abort_IT+0xc4>
 8009fca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009fce:	e01b      	b.n	800a008 <HAL_DMA_Abort_IT+0xfc>
 8009fd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009fd4:	e018      	b.n	800a008 <HAL_DMA_Abort_IT+0xfc>
 8009fd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009fda:	e015      	b.n	800a008 <HAL_DMA_Abort_IT+0xfc>
 8009fdc:	2310      	movs	r3, #16
 8009fde:	e013      	b.n	800a008 <HAL_DMA_Abort_IT+0xfc>
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e011      	b.n	800a008 <HAL_DMA_Abort_IT+0xfc>
 8009fe4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009fe8:	e00e      	b.n	800a008 <HAL_DMA_Abort_IT+0xfc>
 8009fea:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009fee:	e00b      	b.n	800a008 <HAL_DMA_Abort_IT+0xfc>
 8009ff0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009ff4:	e008      	b.n	800a008 <HAL_DMA_Abort_IT+0xfc>
 8009ff6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009ffa:	e005      	b.n	800a008 <HAL_DMA_Abort_IT+0xfc>
 8009ffc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a000:	e002      	b.n	800a008 <HAL_DMA_Abort_IT+0xfc>
 800a002:	2310      	movs	r3, #16
 800a004:	e000      	b.n	800a008 <HAL_DMA_Abort_IT+0xfc>
 800a006:	2301      	movs	r3, #1
 800a008:	4a42      	ldr	r2, [pc, #264]	@ (800a114 <HAL_DMA_Abort_IT+0x208>)
 800a00a:	6053      	str	r3, [r2, #4]
 800a00c:	e057      	b.n	800a0be <HAL_DMA_Abort_IT+0x1b2>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a36      	ldr	r2, [pc, #216]	@ (800a0ec <HAL_DMA_Abort_IT+0x1e0>)
 800a014:	4293      	cmp	r3, r2
 800a016:	d04f      	beq.n	800a0b8 <HAL_DMA_Abort_IT+0x1ac>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a34      	ldr	r2, [pc, #208]	@ (800a0f0 <HAL_DMA_Abort_IT+0x1e4>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d048      	beq.n	800a0b4 <HAL_DMA_Abort_IT+0x1a8>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a33      	ldr	r2, [pc, #204]	@ (800a0f4 <HAL_DMA_Abort_IT+0x1e8>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d040      	beq.n	800a0ae <HAL_DMA_Abort_IT+0x1a2>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a31      	ldr	r2, [pc, #196]	@ (800a0f8 <HAL_DMA_Abort_IT+0x1ec>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d038      	beq.n	800a0a8 <HAL_DMA_Abort_IT+0x19c>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a30      	ldr	r2, [pc, #192]	@ (800a0fc <HAL_DMA_Abort_IT+0x1f0>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d030      	beq.n	800a0a2 <HAL_DMA_Abort_IT+0x196>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a2e      	ldr	r2, [pc, #184]	@ (800a100 <HAL_DMA_Abort_IT+0x1f4>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d028      	beq.n	800a09c <HAL_DMA_Abort_IT+0x190>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a26      	ldr	r2, [pc, #152]	@ (800a0e8 <HAL_DMA_Abort_IT+0x1dc>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d020      	beq.n	800a096 <HAL_DMA_Abort_IT+0x18a>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a2a      	ldr	r2, [pc, #168]	@ (800a104 <HAL_DMA_Abort_IT+0x1f8>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d019      	beq.n	800a092 <HAL_DMA_Abort_IT+0x186>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a29      	ldr	r2, [pc, #164]	@ (800a108 <HAL_DMA_Abort_IT+0x1fc>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d012      	beq.n	800a08e <HAL_DMA_Abort_IT+0x182>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	4a27      	ldr	r2, [pc, #156]	@ (800a10c <HAL_DMA_Abort_IT+0x200>)
 800a06e:	4293      	cmp	r3, r2
 800a070:	d00a      	beq.n	800a088 <HAL_DMA_Abort_IT+0x17c>
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	4a26      	ldr	r2, [pc, #152]	@ (800a110 <HAL_DMA_Abort_IT+0x204>)
 800a078:	4293      	cmp	r3, r2
 800a07a:	d102      	bne.n	800a082 <HAL_DMA_Abort_IT+0x176>
 800a07c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a080:	e01b      	b.n	800a0ba <HAL_DMA_Abort_IT+0x1ae>
 800a082:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a086:	e018      	b.n	800a0ba <HAL_DMA_Abort_IT+0x1ae>
 800a088:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a08c:	e015      	b.n	800a0ba <HAL_DMA_Abort_IT+0x1ae>
 800a08e:	2310      	movs	r3, #16
 800a090:	e013      	b.n	800a0ba <HAL_DMA_Abort_IT+0x1ae>
 800a092:	2301      	movs	r3, #1
 800a094:	e011      	b.n	800a0ba <HAL_DMA_Abort_IT+0x1ae>
 800a096:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a09a:	e00e      	b.n	800a0ba <HAL_DMA_Abort_IT+0x1ae>
 800a09c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a0a0:	e00b      	b.n	800a0ba <HAL_DMA_Abort_IT+0x1ae>
 800a0a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a0a6:	e008      	b.n	800a0ba <HAL_DMA_Abort_IT+0x1ae>
 800a0a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a0ac:	e005      	b.n	800a0ba <HAL_DMA_Abort_IT+0x1ae>
 800a0ae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a0b2:	e002      	b.n	800a0ba <HAL_DMA_Abort_IT+0x1ae>
 800a0b4:	2310      	movs	r3, #16
 800a0b6:	e000      	b.n	800a0ba <HAL_DMA_Abort_IT+0x1ae>
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	4a17      	ldr	r2, [pc, #92]	@ (800a118 <HAL_DMA_Abort_IT+0x20c>)
 800a0bc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d003      	beq.n	800a0de <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	4798      	blx	r3
    } 
  }
  return status;
 800a0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3710      	adds	r7, #16
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}
 800a0e8:	40020080 	.word	0x40020080
 800a0ec:	40020008 	.word	0x40020008
 800a0f0:	4002001c 	.word	0x4002001c
 800a0f4:	40020030 	.word	0x40020030
 800a0f8:	40020044 	.word	0x40020044
 800a0fc:	40020058 	.word	0x40020058
 800a100:	4002006c 	.word	0x4002006c
 800a104:	40020408 	.word	0x40020408
 800a108:	4002041c 	.word	0x4002041c
 800a10c:	40020430 	.word	0x40020430
 800a110:	40020444 	.word	0x40020444
 800a114:	40020400 	.word	0x40020400
 800a118:	40020000 	.word	0x40020000

0800a11c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b08b      	sub	sp, #44	@ 0x2c
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a126:	2300      	movs	r3, #0
 800a128:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800a12a:	2300      	movs	r3, #0
 800a12c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a12e:	e179      	b.n	800a424 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800a130:	2201      	movs	r2, #1
 800a132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a134:	fa02 f303 	lsl.w	r3, r2, r3
 800a138:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	69fa      	ldr	r2, [r7, #28]
 800a140:	4013      	ands	r3, r2
 800a142:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800a144:	69ba      	ldr	r2, [r7, #24]
 800a146:	69fb      	ldr	r3, [r7, #28]
 800a148:	429a      	cmp	r2, r3
 800a14a:	f040 8168 	bne.w	800a41e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	4a96      	ldr	r2, [pc, #600]	@ (800a3ac <HAL_GPIO_Init+0x290>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d05e      	beq.n	800a216 <HAL_GPIO_Init+0xfa>
 800a158:	4a94      	ldr	r2, [pc, #592]	@ (800a3ac <HAL_GPIO_Init+0x290>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d875      	bhi.n	800a24a <HAL_GPIO_Init+0x12e>
 800a15e:	4a94      	ldr	r2, [pc, #592]	@ (800a3b0 <HAL_GPIO_Init+0x294>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d058      	beq.n	800a216 <HAL_GPIO_Init+0xfa>
 800a164:	4a92      	ldr	r2, [pc, #584]	@ (800a3b0 <HAL_GPIO_Init+0x294>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d86f      	bhi.n	800a24a <HAL_GPIO_Init+0x12e>
 800a16a:	4a92      	ldr	r2, [pc, #584]	@ (800a3b4 <HAL_GPIO_Init+0x298>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d052      	beq.n	800a216 <HAL_GPIO_Init+0xfa>
 800a170:	4a90      	ldr	r2, [pc, #576]	@ (800a3b4 <HAL_GPIO_Init+0x298>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d869      	bhi.n	800a24a <HAL_GPIO_Init+0x12e>
 800a176:	4a90      	ldr	r2, [pc, #576]	@ (800a3b8 <HAL_GPIO_Init+0x29c>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d04c      	beq.n	800a216 <HAL_GPIO_Init+0xfa>
 800a17c:	4a8e      	ldr	r2, [pc, #568]	@ (800a3b8 <HAL_GPIO_Init+0x29c>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d863      	bhi.n	800a24a <HAL_GPIO_Init+0x12e>
 800a182:	4a8e      	ldr	r2, [pc, #568]	@ (800a3bc <HAL_GPIO_Init+0x2a0>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d046      	beq.n	800a216 <HAL_GPIO_Init+0xfa>
 800a188:	4a8c      	ldr	r2, [pc, #560]	@ (800a3bc <HAL_GPIO_Init+0x2a0>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d85d      	bhi.n	800a24a <HAL_GPIO_Init+0x12e>
 800a18e:	2b12      	cmp	r3, #18
 800a190:	d82a      	bhi.n	800a1e8 <HAL_GPIO_Init+0xcc>
 800a192:	2b12      	cmp	r3, #18
 800a194:	d859      	bhi.n	800a24a <HAL_GPIO_Init+0x12e>
 800a196:	a201      	add	r2, pc, #4	@ (adr r2, 800a19c <HAL_GPIO_Init+0x80>)
 800a198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19c:	0800a217 	.word	0x0800a217
 800a1a0:	0800a1f1 	.word	0x0800a1f1
 800a1a4:	0800a203 	.word	0x0800a203
 800a1a8:	0800a245 	.word	0x0800a245
 800a1ac:	0800a24b 	.word	0x0800a24b
 800a1b0:	0800a24b 	.word	0x0800a24b
 800a1b4:	0800a24b 	.word	0x0800a24b
 800a1b8:	0800a24b 	.word	0x0800a24b
 800a1bc:	0800a24b 	.word	0x0800a24b
 800a1c0:	0800a24b 	.word	0x0800a24b
 800a1c4:	0800a24b 	.word	0x0800a24b
 800a1c8:	0800a24b 	.word	0x0800a24b
 800a1cc:	0800a24b 	.word	0x0800a24b
 800a1d0:	0800a24b 	.word	0x0800a24b
 800a1d4:	0800a24b 	.word	0x0800a24b
 800a1d8:	0800a24b 	.word	0x0800a24b
 800a1dc:	0800a24b 	.word	0x0800a24b
 800a1e0:	0800a1f9 	.word	0x0800a1f9
 800a1e4:	0800a20d 	.word	0x0800a20d
 800a1e8:	4a75      	ldr	r2, [pc, #468]	@ (800a3c0 <HAL_GPIO_Init+0x2a4>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d013      	beq.n	800a216 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800a1ee:	e02c      	b.n	800a24a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	623b      	str	r3, [r7, #32]
          break;
 800a1f6:	e029      	b.n	800a24c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	68db      	ldr	r3, [r3, #12]
 800a1fc:	3304      	adds	r3, #4
 800a1fe:	623b      	str	r3, [r7, #32]
          break;
 800a200:	e024      	b.n	800a24c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	3308      	adds	r3, #8
 800a208:	623b      	str	r3, [r7, #32]
          break;
 800a20a:	e01f      	b.n	800a24c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	330c      	adds	r3, #12
 800a212:	623b      	str	r3, [r7, #32]
          break;
 800a214:	e01a      	b.n	800a24c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	689b      	ldr	r3, [r3, #8]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d102      	bne.n	800a224 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a21e:	2304      	movs	r3, #4
 800a220:	623b      	str	r3, [r7, #32]
          break;
 800a222:	e013      	b.n	800a24c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	689b      	ldr	r3, [r3, #8]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d105      	bne.n	800a238 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a22c:	2308      	movs	r3, #8
 800a22e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	69fa      	ldr	r2, [r7, #28]
 800a234:	611a      	str	r2, [r3, #16]
          break;
 800a236:	e009      	b.n	800a24c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a238:	2308      	movs	r3, #8
 800a23a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	69fa      	ldr	r2, [r7, #28]
 800a240:	615a      	str	r2, [r3, #20]
          break;
 800a242:	e003      	b.n	800a24c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800a244:	2300      	movs	r3, #0
 800a246:	623b      	str	r3, [r7, #32]
          break;
 800a248:	e000      	b.n	800a24c <HAL_GPIO_Init+0x130>
          break;
 800a24a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a24c:	69bb      	ldr	r3, [r7, #24]
 800a24e:	2bff      	cmp	r3, #255	@ 0xff
 800a250:	d801      	bhi.n	800a256 <HAL_GPIO_Init+0x13a>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	e001      	b.n	800a25a <HAL_GPIO_Init+0x13e>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	3304      	adds	r3, #4
 800a25a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	2bff      	cmp	r3, #255	@ 0xff
 800a260:	d802      	bhi.n	800a268 <HAL_GPIO_Init+0x14c>
 800a262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	e002      	b.n	800a26e <HAL_GPIO_Init+0x152>
 800a268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26a:	3b08      	subs	r3, #8
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	210f      	movs	r1, #15
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	fa01 f303 	lsl.w	r3, r1, r3
 800a27c:	43db      	mvns	r3, r3
 800a27e:	401a      	ands	r2, r3
 800a280:	6a39      	ldr	r1, [r7, #32]
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	fa01 f303 	lsl.w	r3, r1, r3
 800a288:	431a      	orrs	r2, r3
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a296:	2b00      	cmp	r3, #0
 800a298:	f000 80c1 	beq.w	800a41e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a29c:	4b49      	ldr	r3, [pc, #292]	@ (800a3c4 <HAL_GPIO_Init+0x2a8>)
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	4a48      	ldr	r2, [pc, #288]	@ (800a3c4 <HAL_GPIO_Init+0x2a8>)
 800a2a2:	f043 0301 	orr.w	r3, r3, #1
 800a2a6:	6193      	str	r3, [r2, #24]
 800a2a8:	4b46      	ldr	r3, [pc, #280]	@ (800a3c4 <HAL_GPIO_Init+0x2a8>)
 800a2aa:	699b      	ldr	r3, [r3, #24]
 800a2ac:	f003 0301 	and.w	r3, r3, #1
 800a2b0:	60bb      	str	r3, [r7, #8]
 800a2b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800a2b4:	4a44      	ldr	r2, [pc, #272]	@ (800a3c8 <HAL_GPIO_Init+0x2ac>)
 800a2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b8:	089b      	lsrs	r3, r3, #2
 800a2ba:	3302      	adds	r3, #2
 800a2bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2c4:	f003 0303 	and.w	r3, r3, #3
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	220f      	movs	r2, #15
 800a2cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d0:	43db      	mvns	r3, r3
 800a2d2:	68fa      	ldr	r2, [r7, #12]
 800a2d4:	4013      	ands	r3, r2
 800a2d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a3c      	ldr	r2, [pc, #240]	@ (800a3cc <HAL_GPIO_Init+0x2b0>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d01f      	beq.n	800a320 <HAL_GPIO_Init+0x204>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4a3b      	ldr	r2, [pc, #236]	@ (800a3d0 <HAL_GPIO_Init+0x2b4>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d019      	beq.n	800a31c <HAL_GPIO_Init+0x200>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4a3a      	ldr	r2, [pc, #232]	@ (800a3d4 <HAL_GPIO_Init+0x2b8>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d013      	beq.n	800a318 <HAL_GPIO_Init+0x1fc>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	4a39      	ldr	r2, [pc, #228]	@ (800a3d8 <HAL_GPIO_Init+0x2bc>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d00d      	beq.n	800a314 <HAL_GPIO_Init+0x1f8>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a38      	ldr	r2, [pc, #224]	@ (800a3dc <HAL_GPIO_Init+0x2c0>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d007      	beq.n	800a310 <HAL_GPIO_Init+0x1f4>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4a37      	ldr	r2, [pc, #220]	@ (800a3e0 <HAL_GPIO_Init+0x2c4>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d101      	bne.n	800a30c <HAL_GPIO_Init+0x1f0>
 800a308:	2305      	movs	r3, #5
 800a30a:	e00a      	b.n	800a322 <HAL_GPIO_Init+0x206>
 800a30c:	2306      	movs	r3, #6
 800a30e:	e008      	b.n	800a322 <HAL_GPIO_Init+0x206>
 800a310:	2304      	movs	r3, #4
 800a312:	e006      	b.n	800a322 <HAL_GPIO_Init+0x206>
 800a314:	2303      	movs	r3, #3
 800a316:	e004      	b.n	800a322 <HAL_GPIO_Init+0x206>
 800a318:	2302      	movs	r3, #2
 800a31a:	e002      	b.n	800a322 <HAL_GPIO_Init+0x206>
 800a31c:	2301      	movs	r3, #1
 800a31e:	e000      	b.n	800a322 <HAL_GPIO_Init+0x206>
 800a320:	2300      	movs	r3, #0
 800a322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a324:	f002 0203 	and.w	r2, r2, #3
 800a328:	0092      	lsls	r2, r2, #2
 800a32a:	4093      	lsls	r3, r2
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	4313      	orrs	r3, r2
 800a330:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800a332:	4925      	ldr	r1, [pc, #148]	@ (800a3c8 <HAL_GPIO_Init+0x2ac>)
 800a334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a336:	089b      	lsrs	r3, r3, #2
 800a338:	3302      	adds	r3, #2
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d006      	beq.n	800a35a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800a34c:	4b25      	ldr	r3, [pc, #148]	@ (800a3e4 <HAL_GPIO_Init+0x2c8>)
 800a34e:	689a      	ldr	r2, [r3, #8]
 800a350:	4924      	ldr	r1, [pc, #144]	@ (800a3e4 <HAL_GPIO_Init+0x2c8>)
 800a352:	69bb      	ldr	r3, [r7, #24]
 800a354:	4313      	orrs	r3, r2
 800a356:	608b      	str	r3, [r1, #8]
 800a358:	e006      	b.n	800a368 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a35a:	4b22      	ldr	r3, [pc, #136]	@ (800a3e4 <HAL_GPIO_Init+0x2c8>)
 800a35c:	689a      	ldr	r2, [r3, #8]
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	43db      	mvns	r3, r3
 800a362:	4920      	ldr	r1, [pc, #128]	@ (800a3e4 <HAL_GPIO_Init+0x2c8>)
 800a364:	4013      	ands	r3, r2
 800a366:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a370:	2b00      	cmp	r3, #0
 800a372:	d006      	beq.n	800a382 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800a374:	4b1b      	ldr	r3, [pc, #108]	@ (800a3e4 <HAL_GPIO_Init+0x2c8>)
 800a376:	68da      	ldr	r2, [r3, #12]
 800a378:	491a      	ldr	r1, [pc, #104]	@ (800a3e4 <HAL_GPIO_Init+0x2c8>)
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	4313      	orrs	r3, r2
 800a37e:	60cb      	str	r3, [r1, #12]
 800a380:	e006      	b.n	800a390 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a382:	4b18      	ldr	r3, [pc, #96]	@ (800a3e4 <HAL_GPIO_Init+0x2c8>)
 800a384:	68da      	ldr	r2, [r3, #12]
 800a386:	69bb      	ldr	r3, [r7, #24]
 800a388:	43db      	mvns	r3, r3
 800a38a:	4916      	ldr	r1, [pc, #88]	@ (800a3e4 <HAL_GPIO_Init+0x2c8>)
 800a38c:	4013      	ands	r3, r2
 800a38e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d025      	beq.n	800a3e8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800a39c:	4b11      	ldr	r3, [pc, #68]	@ (800a3e4 <HAL_GPIO_Init+0x2c8>)
 800a39e:	685a      	ldr	r2, [r3, #4]
 800a3a0:	4910      	ldr	r1, [pc, #64]	@ (800a3e4 <HAL_GPIO_Init+0x2c8>)
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	604b      	str	r3, [r1, #4]
 800a3a8:	e025      	b.n	800a3f6 <HAL_GPIO_Init+0x2da>
 800a3aa:	bf00      	nop
 800a3ac:	10320000 	.word	0x10320000
 800a3b0:	10310000 	.word	0x10310000
 800a3b4:	10220000 	.word	0x10220000
 800a3b8:	10210000 	.word	0x10210000
 800a3bc:	10120000 	.word	0x10120000
 800a3c0:	10110000 	.word	0x10110000
 800a3c4:	40021000 	.word	0x40021000
 800a3c8:	40010000 	.word	0x40010000
 800a3cc:	40010800 	.word	0x40010800
 800a3d0:	40010c00 	.word	0x40010c00
 800a3d4:	40011000 	.word	0x40011000
 800a3d8:	40011400 	.word	0x40011400
 800a3dc:	40011800 	.word	0x40011800
 800a3e0:	40011c00 	.word	0x40011c00
 800a3e4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a3e8:	4b15      	ldr	r3, [pc, #84]	@ (800a440 <HAL_GPIO_Init+0x324>)
 800a3ea:	685a      	ldr	r2, [r3, #4]
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	43db      	mvns	r3, r3
 800a3f0:	4913      	ldr	r1, [pc, #76]	@ (800a440 <HAL_GPIO_Init+0x324>)
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d006      	beq.n	800a410 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800a402:	4b0f      	ldr	r3, [pc, #60]	@ (800a440 <HAL_GPIO_Init+0x324>)
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	490e      	ldr	r1, [pc, #56]	@ (800a440 <HAL_GPIO_Init+0x324>)
 800a408:	69bb      	ldr	r3, [r7, #24]
 800a40a:	4313      	orrs	r3, r2
 800a40c:	600b      	str	r3, [r1, #0]
 800a40e:	e006      	b.n	800a41e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a410:	4b0b      	ldr	r3, [pc, #44]	@ (800a440 <HAL_GPIO_Init+0x324>)
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	69bb      	ldr	r3, [r7, #24]
 800a416:	43db      	mvns	r3, r3
 800a418:	4909      	ldr	r1, [pc, #36]	@ (800a440 <HAL_GPIO_Init+0x324>)
 800a41a:	4013      	ands	r3, r2
 800a41c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800a41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a420:	3301      	adds	r3, #1
 800a422:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42a:	fa22 f303 	lsr.w	r3, r2, r3
 800a42e:	2b00      	cmp	r3, #0
 800a430:	f47f ae7e 	bne.w	800a130 <HAL_GPIO_Init+0x14>
  }
}
 800a434:	bf00      	nop
 800a436:	bf00      	nop
 800a438:	372c      	adds	r7, #44	@ 0x2c
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bc80      	pop	{r7}
 800a43e:	4770      	bx	lr
 800a440:	40010400 	.word	0x40010400

0800a444 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a444:	b480      	push	{r7}
 800a446:	b089      	sub	sp, #36	@ 0x24
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
 800a44c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a44e:	2300      	movs	r3, #0
 800a450:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800a452:	e0a6      	b.n	800a5a2 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a454:	2201      	movs	r2, #1
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	fa02 f303 	lsl.w	r3, r2, r3
 800a45c:	683a      	ldr	r2, [r7, #0]
 800a45e:	4013      	ands	r3, r2
 800a460:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	2b00      	cmp	r3, #0
 800a466:	f000 8099 	beq.w	800a59c <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800a46a:	4a54      	ldr	r2, [pc, #336]	@ (800a5bc <HAL_GPIO_DeInit+0x178>)
 800a46c:	69fb      	ldr	r3, [r7, #28]
 800a46e:	089b      	lsrs	r3, r3, #2
 800a470:	3302      	adds	r3, #2
 800a472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a476:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800a478:	69fb      	ldr	r3, [r7, #28]
 800a47a:	f003 0303 	and.w	r3, r3, #3
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	220f      	movs	r2, #15
 800a482:	fa02 f303 	lsl.w	r3, r2, r3
 800a486:	697a      	ldr	r2, [r7, #20]
 800a488:	4013      	ands	r3, r2
 800a48a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	4a4c      	ldr	r2, [pc, #304]	@ (800a5c0 <HAL_GPIO_DeInit+0x17c>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d01f      	beq.n	800a4d4 <HAL_GPIO_DeInit+0x90>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	4a4b      	ldr	r2, [pc, #300]	@ (800a5c4 <HAL_GPIO_DeInit+0x180>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d019      	beq.n	800a4d0 <HAL_GPIO_DeInit+0x8c>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	4a4a      	ldr	r2, [pc, #296]	@ (800a5c8 <HAL_GPIO_DeInit+0x184>)
 800a4a0:	4293      	cmp	r3, r2
 800a4a2:	d013      	beq.n	800a4cc <HAL_GPIO_DeInit+0x88>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	4a49      	ldr	r2, [pc, #292]	@ (800a5cc <HAL_GPIO_DeInit+0x188>)
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	d00d      	beq.n	800a4c8 <HAL_GPIO_DeInit+0x84>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4a48      	ldr	r2, [pc, #288]	@ (800a5d0 <HAL_GPIO_DeInit+0x18c>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d007      	beq.n	800a4c4 <HAL_GPIO_DeInit+0x80>
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	4a47      	ldr	r2, [pc, #284]	@ (800a5d4 <HAL_GPIO_DeInit+0x190>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d101      	bne.n	800a4c0 <HAL_GPIO_DeInit+0x7c>
 800a4bc:	2305      	movs	r3, #5
 800a4be:	e00a      	b.n	800a4d6 <HAL_GPIO_DeInit+0x92>
 800a4c0:	2306      	movs	r3, #6
 800a4c2:	e008      	b.n	800a4d6 <HAL_GPIO_DeInit+0x92>
 800a4c4:	2304      	movs	r3, #4
 800a4c6:	e006      	b.n	800a4d6 <HAL_GPIO_DeInit+0x92>
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	e004      	b.n	800a4d6 <HAL_GPIO_DeInit+0x92>
 800a4cc:	2302      	movs	r3, #2
 800a4ce:	e002      	b.n	800a4d6 <HAL_GPIO_DeInit+0x92>
 800a4d0:	2301      	movs	r3, #1
 800a4d2:	e000      	b.n	800a4d6 <HAL_GPIO_DeInit+0x92>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	69fa      	ldr	r2, [r7, #28]
 800a4d8:	f002 0203 	and.w	r2, r2, #3
 800a4dc:	0092      	lsls	r2, r2, #2
 800a4de:	4093      	lsls	r3, r2
 800a4e0:	697a      	ldr	r2, [r7, #20]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d132      	bne.n	800a54c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 800a4e6:	4b3c      	ldr	r3, [pc, #240]	@ (800a5d8 <HAL_GPIO_DeInit+0x194>)
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	43db      	mvns	r3, r3
 800a4ee:	493a      	ldr	r1, [pc, #232]	@ (800a5d8 <HAL_GPIO_DeInit+0x194>)
 800a4f0:	4013      	ands	r3, r2
 800a4f2:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 800a4f4:	4b38      	ldr	r3, [pc, #224]	@ (800a5d8 <HAL_GPIO_DeInit+0x194>)
 800a4f6:	685a      	ldr	r2, [r3, #4]
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	43db      	mvns	r3, r3
 800a4fc:	4936      	ldr	r1, [pc, #216]	@ (800a5d8 <HAL_GPIO_DeInit+0x194>)
 800a4fe:	4013      	ands	r3, r2
 800a500:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800a502:	4b35      	ldr	r3, [pc, #212]	@ (800a5d8 <HAL_GPIO_DeInit+0x194>)
 800a504:	68da      	ldr	r2, [r3, #12]
 800a506:	69bb      	ldr	r3, [r7, #24]
 800a508:	43db      	mvns	r3, r3
 800a50a:	4933      	ldr	r1, [pc, #204]	@ (800a5d8 <HAL_GPIO_DeInit+0x194>)
 800a50c:	4013      	ands	r3, r2
 800a50e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800a510:	4b31      	ldr	r3, [pc, #196]	@ (800a5d8 <HAL_GPIO_DeInit+0x194>)
 800a512:	689a      	ldr	r2, [r3, #8]
 800a514:	69bb      	ldr	r3, [r7, #24]
 800a516:	43db      	mvns	r3, r3
 800a518:	492f      	ldr	r1, [pc, #188]	@ (800a5d8 <HAL_GPIO_DeInit+0x194>)
 800a51a:	4013      	ands	r3, r2
 800a51c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a51e:	69fb      	ldr	r3, [r7, #28]
 800a520:	f003 0303 	and.w	r3, r3, #3
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	220f      	movs	r2, #15
 800a528:	fa02 f303 	lsl.w	r3, r2, r3
 800a52c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800a52e:	4a23      	ldr	r2, [pc, #140]	@ (800a5bc <HAL_GPIO_DeInit+0x178>)
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	089b      	lsrs	r3, r3, #2
 800a534:	3302      	adds	r3, #2
 800a536:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	43da      	mvns	r2, r3
 800a53e:	481f      	ldr	r0, [pc, #124]	@ (800a5bc <HAL_GPIO_DeInit+0x178>)
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	089b      	lsrs	r3, r3, #2
 800a544:	400a      	ands	r2, r1
 800a546:	3302      	adds	r3, #2
 800a548:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	2bff      	cmp	r3, #255	@ 0xff
 800a550:	d801      	bhi.n	800a556 <HAL_GPIO_DeInit+0x112>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	e001      	b.n	800a55a <HAL_GPIO_DeInit+0x116>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	3304      	adds	r3, #4
 800a55a:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a55c:	69bb      	ldr	r3, [r7, #24]
 800a55e:	2bff      	cmp	r3, #255	@ 0xff
 800a560:	d802      	bhi.n	800a568 <HAL_GPIO_DeInit+0x124>
 800a562:	69fb      	ldr	r3, [r7, #28]
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	e002      	b.n	800a56e <HAL_GPIO_DeInit+0x12a>
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	3b08      	subs	r3, #8
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	210f      	movs	r1, #15
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	fa01 f303 	lsl.w	r3, r1, r3
 800a57c:	43db      	mvns	r3, r3
 800a57e:	401a      	ands	r2, r3
 800a580:	2104      	movs	r1, #4
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	fa01 f303 	lsl.w	r3, r1, r3
 800a588:	431a      	orrs	r2, r3
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	68da      	ldr	r2, [r3, #12]
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	43db      	mvns	r3, r3
 800a596:	401a      	ands	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	60da      	str	r2, [r3, #12]
    }

    position++;
 800a59c:	69fb      	ldr	r3, [r7, #28]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800a5a2:	683a      	ldr	r2, [r7, #0]
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	f47f af52 	bne.w	800a454 <HAL_GPIO_DeInit+0x10>
  }
}
 800a5b0:	bf00      	nop
 800a5b2:	bf00      	nop
 800a5b4:	3724      	adds	r7, #36	@ 0x24
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bc80      	pop	{r7}
 800a5ba:	4770      	bx	lr
 800a5bc:	40010000 	.word	0x40010000
 800a5c0:	40010800 	.word	0x40010800
 800a5c4:	40010c00 	.word	0x40010c00
 800a5c8:	40011000 	.word	0x40011000
 800a5cc:	40011400 	.word	0x40011400
 800a5d0:	40011800 	.word	0x40011800
 800a5d4:	40011c00 	.word	0x40011c00
 800a5d8:	40010400 	.word	0x40010400

0800a5dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b085      	sub	sp, #20
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	460b      	mov	r3, r1
 800a5e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	689a      	ldr	r2, [r3, #8]
 800a5ec:	887b      	ldrh	r3, [r7, #2]
 800a5ee:	4013      	ands	r3, r2
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d002      	beq.n	800a5fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	73fb      	strb	r3, [r7, #15]
 800a5f8:	e001      	b.n	800a5fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a5fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a600:	4618      	mov	r0, r3
 800a602:	3714      	adds	r7, #20
 800a604:	46bd      	mov	sp, r7
 800a606:	bc80      	pop	{r7}
 800a608:	4770      	bx	lr

0800a60a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a60a:	b480      	push	{r7}
 800a60c:	b083      	sub	sp, #12
 800a60e:	af00      	add	r7, sp, #0
 800a610:	6078      	str	r0, [r7, #4]
 800a612:	460b      	mov	r3, r1
 800a614:	807b      	strh	r3, [r7, #2]
 800a616:	4613      	mov	r3, r2
 800a618:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a61a:	787b      	ldrb	r3, [r7, #1]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d003      	beq.n	800a628 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a620:	887a      	ldrh	r2, [r7, #2]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a626:	e003      	b.n	800a630 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a628:	887b      	ldrh	r3, [r7, #2]
 800a62a:	041a      	lsls	r2, r3, #16
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	611a      	str	r2, [r3, #16]
}
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	bc80      	pop	{r7}
 800a638:	4770      	bx	lr

0800a63a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a63a:	b480      	push	{r7}
 800a63c:	b085      	sub	sp, #20
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
 800a642:	460b      	mov	r3, r1
 800a644:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a64c:	887a      	ldrh	r2, [r7, #2]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	4013      	ands	r3, r2
 800a652:	041a      	lsls	r2, r3, #16
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	43d9      	mvns	r1, r3
 800a658:	887b      	ldrh	r3, [r7, #2]
 800a65a:	400b      	ands	r3, r1
 800a65c:	431a      	orrs	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	611a      	str	r2, [r3, #16]
}
 800a662:	bf00      	nop
 800a664:	3714      	adds	r7, #20
 800a666:	46bd      	mov	sp, r7
 800a668:	bc80      	pop	{r7}
 800a66a:	4770      	bx	lr

0800a66c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d101      	bne.n	800a67e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a67a:	2301      	movs	r3, #1
 800a67c:	e12b      	b.n	800a8d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a684:	b2db      	uxtb	r3, r3
 800a686:	2b00      	cmp	r3, #0
 800a688:	d106      	bne.n	800a698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f7fe fff4 	bl	8009680 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2224      	movs	r2, #36	@ 0x24
 800a69c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f022 0201 	bic.w	r2, r2, #1
 800a6ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a6be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a6ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a6d0:	f001 fdb8 	bl	800c244 <HAL_RCC_GetPCLK1Freq>
 800a6d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	685b      	ldr	r3, [r3, #4]
 800a6da:	4a81      	ldr	r2, [pc, #516]	@ (800a8e0 <HAL_I2C_Init+0x274>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d807      	bhi.n	800a6f0 <HAL_I2C_Init+0x84>
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	4a80      	ldr	r2, [pc, #512]	@ (800a8e4 <HAL_I2C_Init+0x278>)
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	bf94      	ite	ls
 800a6e8:	2301      	movls	r3, #1
 800a6ea:	2300      	movhi	r3, #0
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	e006      	b.n	800a6fe <HAL_I2C_Init+0x92>
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	4a7d      	ldr	r2, [pc, #500]	@ (800a8e8 <HAL_I2C_Init+0x27c>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	bf94      	ite	ls
 800a6f8:	2301      	movls	r3, #1
 800a6fa:	2300      	movhi	r3, #0
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d001      	beq.n	800a706 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a702:	2301      	movs	r3, #1
 800a704:	e0e7      	b.n	800a8d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	4a78      	ldr	r2, [pc, #480]	@ (800a8ec <HAL_I2C_Init+0x280>)
 800a70a:	fba2 2303 	umull	r2, r3, r2, r3
 800a70e:	0c9b      	lsrs	r3, r3, #18
 800a710:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	68ba      	ldr	r2, [r7, #8]
 800a722:	430a      	orrs	r2, r1
 800a724:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	6a1b      	ldr	r3, [r3, #32]
 800a72c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	4a6a      	ldr	r2, [pc, #424]	@ (800a8e0 <HAL_I2C_Init+0x274>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d802      	bhi.n	800a740 <HAL_I2C_Init+0xd4>
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	3301      	adds	r3, #1
 800a73e:	e009      	b.n	800a754 <HAL_I2C_Init+0xe8>
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800a746:	fb02 f303 	mul.w	r3, r2, r3
 800a74a:	4a69      	ldr	r2, [pc, #420]	@ (800a8f0 <HAL_I2C_Init+0x284>)
 800a74c:	fba2 2303 	umull	r2, r3, r2, r3
 800a750:	099b      	lsrs	r3, r3, #6
 800a752:	3301      	adds	r3, #1
 800a754:	687a      	ldr	r2, [r7, #4]
 800a756:	6812      	ldr	r2, [r2, #0]
 800a758:	430b      	orrs	r3, r1
 800a75a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	69db      	ldr	r3, [r3, #28]
 800a762:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800a766:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	495c      	ldr	r1, [pc, #368]	@ (800a8e0 <HAL_I2C_Init+0x274>)
 800a770:	428b      	cmp	r3, r1
 800a772:	d819      	bhi.n	800a7a8 <HAL_I2C_Init+0x13c>
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	1e59      	subs	r1, r3, #1
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	005b      	lsls	r3, r3, #1
 800a77e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a782:	1c59      	adds	r1, r3, #1
 800a784:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a788:	400b      	ands	r3, r1
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00a      	beq.n	800a7a4 <HAL_I2C_Init+0x138>
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	1e59      	subs	r1, r3, #1
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	005b      	lsls	r3, r3, #1
 800a798:	fbb1 f3f3 	udiv	r3, r1, r3
 800a79c:	3301      	adds	r3, #1
 800a79e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7a2:	e051      	b.n	800a848 <HAL_I2C_Init+0x1dc>
 800a7a4:	2304      	movs	r3, #4
 800a7a6:	e04f      	b.n	800a848 <HAL_I2C_Init+0x1dc>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d111      	bne.n	800a7d4 <HAL_I2C_Init+0x168>
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	1e58      	subs	r0, r3, #1
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6859      	ldr	r1, [r3, #4]
 800a7b8:	460b      	mov	r3, r1
 800a7ba:	005b      	lsls	r3, r3, #1
 800a7bc:	440b      	add	r3, r1
 800a7be:	fbb0 f3f3 	udiv	r3, r0, r3
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	bf0c      	ite	eq
 800a7cc:	2301      	moveq	r3, #1
 800a7ce:	2300      	movne	r3, #0
 800a7d0:	b2db      	uxtb	r3, r3
 800a7d2:	e012      	b.n	800a7fa <HAL_I2C_Init+0x18e>
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	1e58      	subs	r0, r3, #1
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6859      	ldr	r1, [r3, #4]
 800a7dc:	460b      	mov	r3, r1
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	440b      	add	r3, r1
 800a7e2:	0099      	lsls	r1, r3, #2
 800a7e4:	440b      	add	r3, r1
 800a7e6:	fbb0 f3f3 	udiv	r3, r0, r3
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	bf0c      	ite	eq
 800a7f4:	2301      	moveq	r3, #1
 800a7f6:	2300      	movne	r3, #0
 800a7f8:	b2db      	uxtb	r3, r3
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d001      	beq.n	800a802 <HAL_I2C_Init+0x196>
 800a7fe:	2301      	movs	r3, #1
 800a800:	e022      	b.n	800a848 <HAL_I2C_Init+0x1dc>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10e      	bne.n	800a828 <HAL_I2C_Init+0x1bc>
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	1e58      	subs	r0, r3, #1
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6859      	ldr	r1, [r3, #4]
 800a812:	460b      	mov	r3, r1
 800a814:	005b      	lsls	r3, r3, #1
 800a816:	440b      	add	r3, r1
 800a818:	fbb0 f3f3 	udiv	r3, r0, r3
 800a81c:	3301      	adds	r3, #1
 800a81e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a826:	e00f      	b.n	800a848 <HAL_I2C_Init+0x1dc>
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	1e58      	subs	r0, r3, #1
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6859      	ldr	r1, [r3, #4]
 800a830:	460b      	mov	r3, r1
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	440b      	add	r3, r1
 800a836:	0099      	lsls	r1, r3, #2
 800a838:	440b      	add	r3, r1
 800a83a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a83e:	3301      	adds	r3, #1
 800a840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a844:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a848:	6879      	ldr	r1, [r7, #4]
 800a84a:	6809      	ldr	r1, [r1, #0]
 800a84c:	4313      	orrs	r3, r2
 800a84e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	69da      	ldr	r2, [r3, #28]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6a1b      	ldr	r3, [r3, #32]
 800a862:	431a      	orrs	r2, r3
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	430a      	orrs	r2, r1
 800a86a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	689b      	ldr	r3, [r3, #8]
 800a872:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a876:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a87a:	687a      	ldr	r2, [r7, #4]
 800a87c:	6911      	ldr	r1, [r2, #16]
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	68d2      	ldr	r2, [r2, #12]
 800a882:	4311      	orrs	r1, r2
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	6812      	ldr	r2, [r2, #0]
 800a888:	430b      	orrs	r3, r1
 800a88a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	695a      	ldr	r2, [r3, #20]
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	699b      	ldr	r3, [r3, #24]
 800a89e:	431a      	orrs	r2, r3
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	430a      	orrs	r2, r1
 800a8a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	681a      	ldr	r2, [r3, #0]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f042 0201 	orr.w	r2, r2, #1
 800a8b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2220      	movs	r2, #32
 800a8c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3710      	adds	r7, #16
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	000186a0 	.word	0x000186a0
 800a8e4:	001e847f 	.word	0x001e847f
 800a8e8:	003d08ff 	.word	0x003d08ff
 800a8ec:	431bde83 	.word	0x431bde83
 800a8f0:	10624dd3 	.word	0x10624dd3

0800a8f4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d101      	bne.n	800a906 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	e021      	b.n	800a94a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2224      	movs	r2, #36	@ 0x24
 800a90a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	681a      	ldr	r2, [r3, #0]
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f022 0201 	bic.w	r2, r2, #1
 800a91c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f7fe feec 	bl	80096fc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2200      	movs	r2, #0
 800a936:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2200      	movs	r2, #0
 800a93c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3708      	adds	r7, #8
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
	...

0800a954 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a954:	b580      	push	{r7, lr}
 800a956:	b088      	sub	sp, #32
 800a958:	af02      	add	r7, sp, #8
 800a95a:	60f8      	str	r0, [r7, #12]
 800a95c:	607a      	str	r2, [r7, #4]
 800a95e:	461a      	mov	r2, r3
 800a960:	460b      	mov	r3, r1
 800a962:	817b      	strh	r3, [r7, #10]
 800a964:	4613      	mov	r3, r2
 800a966:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a968:	f7ff f85e 	bl	8009a28 <HAL_GetTick>
 800a96c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a974:	b2db      	uxtb	r3, r3
 800a976:	2b20      	cmp	r3, #32
 800a978:	f040 80e0 	bne.w	800ab3c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	9300      	str	r3, [sp, #0]
 800a980:	2319      	movs	r3, #25
 800a982:	2201      	movs	r2, #1
 800a984:	4970      	ldr	r1, [pc, #448]	@ (800ab48 <HAL_I2C_Master_Transmit+0x1f4>)
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	f000 fe5c 	bl	800b644 <I2C_WaitOnFlagUntilTimeout>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d001      	beq.n	800a996 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a992:	2302      	movs	r3, #2
 800a994:	e0d3      	b.n	800ab3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a99c:	2b01      	cmp	r3, #1
 800a99e:	d101      	bne.n	800a9a4 <HAL_I2C_Master_Transmit+0x50>
 800a9a0:	2302      	movs	r3, #2
 800a9a2:	e0cc      	b.n	800ab3e <HAL_I2C_Master_Transmit+0x1ea>
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f003 0301 	and.w	r3, r3, #1
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d007      	beq.n	800a9ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	681a      	ldr	r2, [r3, #0]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f042 0201 	orr.w	r2, r2, #1
 800a9c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a9d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2221      	movs	r2, #33	@ 0x21
 800a9de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	2210      	movs	r2, #16
 800a9e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	893a      	ldrh	r2, [r7, #8]
 800a9fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa00:	b29a      	uxth	r2, r3
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	4a50      	ldr	r2, [pc, #320]	@ (800ab4c <HAL_I2C_Master_Transmit+0x1f8>)
 800aa0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800aa0c:	8979      	ldrh	r1, [r7, #10]
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	6a3a      	ldr	r2, [r7, #32]
 800aa12:	68f8      	ldr	r0, [r7, #12]
 800aa14:	f000 fc16 	bl	800b244 <I2C_MasterRequestWrite>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d001      	beq.n	800aa22 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	e08d      	b.n	800ab3e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa22:	2300      	movs	r3, #0
 800aa24:	613b      	str	r3, [r7, #16]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	695b      	ldr	r3, [r3, #20]
 800aa2c:	613b      	str	r3, [r7, #16]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	699b      	ldr	r3, [r3, #24]
 800aa34:	613b      	str	r3, [r7, #16]
 800aa36:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800aa38:	e066      	b.n	800ab08 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa3a:	697a      	ldr	r2, [r7, #20]
 800aa3c:	6a39      	ldr	r1, [r7, #32]
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f000 ff1a 	bl	800b878 <I2C_WaitOnTXEFlagUntilTimeout>
 800aa44:	4603      	mov	r3, r0
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d00d      	beq.n	800aa66 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa4e:	2b04      	cmp	r3, #4
 800aa50:	d107      	bne.n	800aa62 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	681a      	ldr	r2, [r3, #0]
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aa60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800aa62:	2301      	movs	r3, #1
 800aa64:	e06b      	b.n	800ab3e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa6a:	781a      	ldrb	r2, [r3, #0]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa76:	1c5a      	adds	r2, r3, #1
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	3b01      	subs	r3, #1
 800aa84:	b29a      	uxth	r2, r3
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	b29a      	uxth	r2, r3
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	695b      	ldr	r3, [r3, #20]
 800aa9c:	f003 0304 	and.w	r3, r3, #4
 800aaa0:	2b04      	cmp	r3, #4
 800aaa2:	d11b      	bne.n	800aadc <HAL_I2C_Master_Transmit+0x188>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d017      	beq.n	800aadc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab0:	781a      	ldrb	r2, [r3, #0]
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aabc:	1c5a      	adds	r2, r3, #1
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	3b01      	subs	r3, #1
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aad4:	3b01      	subs	r3, #1
 800aad6:	b29a      	uxth	r2, r3
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aadc:	697a      	ldr	r2, [r7, #20]
 800aade:	6a39      	ldr	r1, [r7, #32]
 800aae0:	68f8      	ldr	r0, [r7, #12]
 800aae2:	f000 ff11 	bl	800b908 <I2C_WaitOnBTFFlagUntilTimeout>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00d      	beq.n	800ab08 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaf0:	2b04      	cmp	r3, #4
 800aaf2:	d107      	bne.n	800ab04 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ab02:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ab04:	2301      	movs	r3, #1
 800ab06:	e01a      	b.n	800ab3e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d194      	bne.n	800aa3a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ab1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2220      	movs	r2, #32
 800ab24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	2200      	movs	r2, #0
 800ab34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	e000      	b.n	800ab3e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ab3c:	2302      	movs	r3, #2
  }
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3718      	adds	r7, #24
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
 800ab46:	bf00      	nop
 800ab48:	00100002 	.word	0x00100002
 800ab4c:	ffff0000 	.word	0xffff0000

0800ab50 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b088      	sub	sp, #32
 800ab54:	af02      	add	r7, sp, #8
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	4608      	mov	r0, r1
 800ab5a:	4611      	mov	r1, r2
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	4603      	mov	r3, r0
 800ab60:	817b      	strh	r3, [r7, #10]
 800ab62:	460b      	mov	r3, r1
 800ab64:	813b      	strh	r3, [r7, #8]
 800ab66:	4613      	mov	r3, r2
 800ab68:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ab6a:	f7fe ff5d 	bl	8009a28 <HAL_GetTick>
 800ab6e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	2b20      	cmp	r3, #32
 800ab7a:	f040 80d9 	bne.w	800ad30 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	2319      	movs	r3, #25
 800ab84:	2201      	movs	r2, #1
 800ab86:	496d      	ldr	r1, [pc, #436]	@ (800ad3c <HAL_I2C_Mem_Write+0x1ec>)
 800ab88:	68f8      	ldr	r0, [r7, #12]
 800ab8a:	f000 fd5b 	bl	800b644 <I2C_WaitOnFlagUntilTimeout>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d001      	beq.n	800ab98 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800ab94:	2302      	movs	r3, #2
 800ab96:	e0cc      	b.n	800ad32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d101      	bne.n	800aba6 <HAL_I2C_Mem_Write+0x56>
 800aba2:	2302      	movs	r3, #2
 800aba4:	e0c5      	b.n	800ad32 <HAL_I2C_Mem_Write+0x1e2>
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2201      	movs	r2, #1
 800abaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f003 0301 	and.w	r3, r3, #1
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d007      	beq.n	800abcc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	681a      	ldr	r2, [r3, #0]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	f042 0201 	orr.w	r2, r2, #1
 800abca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800abda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2221      	movs	r2, #33	@ 0x21
 800abe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2240      	movs	r2, #64	@ 0x40
 800abe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2200      	movs	r2, #0
 800abf0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	6a3a      	ldr	r2, [r7, #32]
 800abf6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800abfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac02:	b29a      	uxth	r2, r3
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	4a4d      	ldr	r2, [pc, #308]	@ (800ad40 <HAL_I2C_Mem_Write+0x1f0>)
 800ac0c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ac0e:	88f8      	ldrh	r0, [r7, #6]
 800ac10:	893a      	ldrh	r2, [r7, #8]
 800ac12:	8979      	ldrh	r1, [r7, #10]
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	9301      	str	r3, [sp, #4]
 800ac18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac1a:	9300      	str	r3, [sp, #0]
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	f000 fb92 	bl	800b348 <I2C_RequestMemoryWrite>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d052      	beq.n	800acd0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	e081      	b.n	800ad32 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac2e:	697a      	ldr	r2, [r7, #20]
 800ac30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	f000 fe20 	bl	800b878 <I2C_WaitOnTXEFlagUntilTimeout>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d00d      	beq.n	800ac5a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac42:	2b04      	cmp	r3, #4
 800ac44:	d107      	bne.n	800ac56 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ac56:	2301      	movs	r3, #1
 800ac58:	e06b      	b.n	800ad32 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac5e:	781a      	ldrb	r2, [r3, #0]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac6a:	1c5a      	adds	r2, r3, #1
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac74:	3b01      	subs	r3, #1
 800ac76:	b29a      	uxth	r2, r3
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	3b01      	subs	r3, #1
 800ac84:	b29a      	uxth	r2, r3
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	695b      	ldr	r3, [r3, #20]
 800ac90:	f003 0304 	and.w	r3, r3, #4
 800ac94:	2b04      	cmp	r3, #4
 800ac96:	d11b      	bne.n	800acd0 <HAL_I2C_Mem_Write+0x180>
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d017      	beq.n	800acd0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aca4:	781a      	ldrb	r2, [r3, #0]
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acb0:	1c5a      	adds	r2, r3, #1
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acba:	3b01      	subs	r3, #1
 800acbc:	b29a      	uxth	r2, r3
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	3b01      	subs	r3, #1
 800acca:	b29a      	uxth	r2, r3
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d1aa      	bne.n	800ac2e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800acd8:	697a      	ldr	r2, [r7, #20]
 800acda:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f000 fe13 	bl	800b908 <I2C_WaitOnBTFFlagUntilTimeout>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d00d      	beq.n	800ad04 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acec:	2b04      	cmp	r3, #4
 800acee:	d107      	bne.n	800ad00 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	681a      	ldr	r2, [r3, #0]
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800acfe:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	e016      	b.n	800ad32 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	681a      	ldr	r2, [r3, #0]
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2220      	movs	r2, #32
 800ad18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2200      	movs	r2, #0
 800ad28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	e000      	b.n	800ad32 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800ad30:	2302      	movs	r3, #2
  }
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3718      	adds	r7, #24
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	00100002 	.word	0x00100002
 800ad40:	ffff0000 	.word	0xffff0000

0800ad44 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b08c      	sub	sp, #48	@ 0x30
 800ad48:	af02      	add	r7, sp, #8
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	4608      	mov	r0, r1
 800ad4e:	4611      	mov	r1, r2
 800ad50:	461a      	mov	r2, r3
 800ad52:	4603      	mov	r3, r0
 800ad54:	817b      	strh	r3, [r7, #10]
 800ad56:	460b      	mov	r3, r1
 800ad58:	813b      	strh	r3, [r7, #8]
 800ad5a:	4613      	mov	r3, r2
 800ad5c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800ad62:	f7fe fe61 	bl	8009a28 <HAL_GetTick>
 800ad66:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	2b20      	cmp	r3, #32
 800ad72:	f040 8244 	bne.w	800b1fe <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800ad76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad78:	9300      	str	r3, [sp, #0]
 800ad7a:	2319      	movs	r3, #25
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	4982      	ldr	r1, [pc, #520]	@ (800af88 <HAL_I2C_Mem_Read+0x244>)
 800ad80:	68f8      	ldr	r0, [r7, #12]
 800ad82:	f000 fc5f 	bl	800b644 <I2C_WaitOnFlagUntilTimeout>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d001      	beq.n	800ad90 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800ad8c:	2302      	movs	r3, #2
 800ad8e:	e237      	b.n	800b200 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d101      	bne.n	800ad9e <HAL_I2C_Mem_Read+0x5a>
 800ad9a:	2302      	movs	r3, #2
 800ad9c:	e230      	b.n	800b200 <HAL_I2C_Mem_Read+0x4bc>
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	2201      	movs	r2, #1
 800ada2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 0301 	and.w	r3, r3, #1
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d007      	beq.n	800adc4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f042 0201 	orr.w	r2, r2, #1
 800adc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800add2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2222      	movs	r2, #34	@ 0x22
 800add8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2240      	movs	r2, #64	@ 0x40
 800ade0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2200      	movs	r2, #0
 800ade8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800adf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adfa:	b29a      	uxth	r2, r3
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	4a62      	ldr	r2, [pc, #392]	@ (800af8c <HAL_I2C_Mem_Read+0x248>)
 800ae04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ae06:	88f8      	ldrh	r0, [r7, #6]
 800ae08:	893a      	ldrh	r2, [r7, #8]
 800ae0a:	8979      	ldrh	r1, [r7, #10]
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae0e:	9301      	str	r3, [sp, #4]
 800ae10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae12:	9300      	str	r3, [sp, #0]
 800ae14:	4603      	mov	r3, r0
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f000 fb2c 	bl	800b474 <I2C_RequestMemoryRead>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d001      	beq.n	800ae26 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800ae22:	2301      	movs	r3, #1
 800ae24:	e1ec      	b.n	800b200 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d113      	bne.n	800ae56 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae2e:	2300      	movs	r3, #0
 800ae30:	61fb      	str	r3, [r7, #28]
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	695b      	ldr	r3, [r3, #20]
 800ae38:	61fb      	str	r3, [r7, #28]
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	699b      	ldr	r3, [r3, #24]
 800ae40:	61fb      	str	r3, [r7, #28]
 800ae42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	e1c0      	b.n	800b1d8 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae5a:	2b01      	cmp	r3, #1
 800ae5c:	d11e      	bne.n	800ae9c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ae6c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae6e:	b672      	cpsid	i
}
 800ae70:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae72:	2300      	movs	r3, #0
 800ae74:	61bb      	str	r3, [r7, #24]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	695b      	ldr	r3, [r3, #20]
 800ae7c:	61bb      	str	r3, [r7, #24]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	699b      	ldr	r3, [r3, #24]
 800ae84:	61bb      	str	r3, [r7, #24]
 800ae86:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	681a      	ldr	r2, [r3, #0]
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800ae98:	b662      	cpsie	i
}
 800ae9a:	e035      	b.n	800af08 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aea0:	2b02      	cmp	r3, #2
 800aea2:	d11e      	bne.n	800aee2 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aeb2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800aeb4:	b672      	cpsid	i
}
 800aeb6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aeb8:	2300      	movs	r3, #0
 800aeba:	617b      	str	r3, [r7, #20]
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	695b      	ldr	r3, [r3, #20]
 800aec2:	617b      	str	r3, [r7, #20]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	699b      	ldr	r3, [r3, #24]
 800aeca:	617b      	str	r3, [r7, #20]
 800aecc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	681a      	ldr	r2, [r3, #0]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aedc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800aede:	b662      	cpsie	i
}
 800aee0:	e012      	b.n	800af08 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800aef0:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aef2:	2300      	movs	r3, #0
 800aef4:	613b      	str	r3, [r7, #16]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	695b      	ldr	r3, [r3, #20]
 800aefc:	613b      	str	r3, [r7, #16]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	699b      	ldr	r3, [r3, #24]
 800af04:	613b      	str	r3, [r7, #16]
 800af06:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800af08:	e166      	b.n	800b1d8 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af0e:	2b03      	cmp	r3, #3
 800af10:	f200 811f 	bhi.w	800b152 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af18:	2b01      	cmp	r3, #1
 800af1a:	d123      	bne.n	800af64 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800af1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800af20:	68f8      	ldr	r0, [r7, #12]
 800af22:	f000 fd39 	bl	800b998 <I2C_WaitOnRXNEFlagUntilTimeout>
 800af26:	4603      	mov	r3, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d001      	beq.n	800af30 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	e167      	b.n	800b200 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	691a      	ldr	r2, [r3, #16]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af3a:	b2d2      	uxtb	r2, r2
 800af3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af42:	1c5a      	adds	r2, r3, #1
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af4c:	3b01      	subs	r3, #1
 800af4e:	b29a      	uxth	r2, r3
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af58:	b29b      	uxth	r3, r3
 800af5a:	3b01      	subs	r3, #1
 800af5c:	b29a      	uxth	r2, r3
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800af62:	e139      	b.n	800b1d8 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800af68:	2b02      	cmp	r3, #2
 800af6a:	d152      	bne.n	800b012 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800af6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af6e:	9300      	str	r3, [sp, #0]
 800af70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af72:	2200      	movs	r2, #0
 800af74:	4906      	ldr	r1, [pc, #24]	@ (800af90 <HAL_I2C_Mem_Read+0x24c>)
 800af76:	68f8      	ldr	r0, [r7, #12]
 800af78:	f000 fb64 	bl	800b644 <I2C_WaitOnFlagUntilTimeout>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d008      	beq.n	800af94 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	e13c      	b.n	800b200 <HAL_I2C_Mem_Read+0x4bc>
 800af86:	bf00      	nop
 800af88:	00100002 	.word	0x00100002
 800af8c:	ffff0000 	.word	0xffff0000
 800af90:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800af94:	b672      	cpsid	i
}
 800af96:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800afa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	691a      	ldr	r2, [r3, #16]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afb2:	b2d2      	uxtb	r2, r2
 800afb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afba:	1c5a      	adds	r2, r3, #1
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afc4:	3b01      	subs	r3, #1
 800afc6:	b29a      	uxth	r2, r3
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	3b01      	subs	r3, #1
 800afd4:	b29a      	uxth	r2, r3
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800afda:	b662      	cpsie	i
}
 800afdc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	691a      	ldr	r2, [r3, #16]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afe8:	b2d2      	uxtb	r2, r2
 800afea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aff0:	1c5a      	adds	r2, r3, #1
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800affa:	3b01      	subs	r3, #1
 800affc:	b29a      	uxth	r2, r3
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b006:	b29b      	uxth	r3, r3
 800b008:	3b01      	subs	r3, #1
 800b00a:	b29a      	uxth	r2, r3
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b010:	e0e2      	b.n	800b1d8 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b018:	2200      	movs	r2, #0
 800b01a:	497b      	ldr	r1, [pc, #492]	@ (800b208 <HAL_I2C_Mem_Read+0x4c4>)
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f000 fb11 	bl	800b644 <I2C_WaitOnFlagUntilTimeout>
 800b022:	4603      	mov	r3, r0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d001      	beq.n	800b02c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	e0e9      	b.n	800b200 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	681a      	ldr	r2, [r3, #0]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b03a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800b03c:	b672      	cpsid	i
}
 800b03e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	691a      	ldr	r2, [r3, #16]
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b04a:	b2d2      	uxtb	r2, r2
 800b04c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b052:	1c5a      	adds	r2, r3, #1
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b05c:	3b01      	subs	r3, #1
 800b05e:	b29a      	uxth	r2, r3
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b068:	b29b      	uxth	r3, r3
 800b06a:	3b01      	subs	r3, #1
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b072:	4b66      	ldr	r3, [pc, #408]	@ (800b20c <HAL_I2C_Mem_Read+0x4c8>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	08db      	lsrs	r3, r3, #3
 800b078:	4a65      	ldr	r2, [pc, #404]	@ (800b210 <HAL_I2C_Mem_Read+0x4cc>)
 800b07a:	fba2 2303 	umull	r2, r3, r2, r3
 800b07e:	0a1a      	lsrs	r2, r3, #8
 800b080:	4613      	mov	r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	4413      	add	r3, r2
 800b086:	00da      	lsls	r2, r3, #3
 800b088:	1ad3      	subs	r3, r2, r3
 800b08a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800b08c:	6a3b      	ldr	r3, [r7, #32]
 800b08e:	3b01      	subs	r3, #1
 800b090:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800b092:	6a3b      	ldr	r3, [r7, #32]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d118      	bne.n	800b0ca <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2200      	movs	r2, #0
 800b09c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2220      	movs	r2, #32
 800b0a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0b2:	f043 0220 	orr.w	r2, r3, #32
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800b0ba:	b662      	cpsie	i
}
 800b0bc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e09a      	b.n	800b200 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	695b      	ldr	r3, [r3, #20]
 800b0d0:	f003 0304 	and.w	r3, r3, #4
 800b0d4:	2b04      	cmp	r3, #4
 800b0d6:	d1d9      	bne.n	800b08c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b0e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	691a      	ldr	r2, [r3, #16]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0f2:	b2d2      	uxtb	r2, r2
 800b0f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0fa:	1c5a      	adds	r2, r3, #1
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b104:	3b01      	subs	r3, #1
 800b106:	b29a      	uxth	r2, r3
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b110:	b29b      	uxth	r3, r3
 800b112:	3b01      	subs	r3, #1
 800b114:	b29a      	uxth	r2, r3
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800b11a:	b662      	cpsie	i
}
 800b11c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	691a      	ldr	r2, [r3, #16]
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b128:	b2d2      	uxtb	r2, r2
 800b12a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b130:	1c5a      	adds	r2, r3, #1
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b13a:	3b01      	subs	r3, #1
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b146:	b29b      	uxth	r3, r3
 800b148:	3b01      	subs	r3, #1
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b150:	e042      	b.n	800b1d8 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b152:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b154:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b156:	68f8      	ldr	r0, [r7, #12]
 800b158:	f000 fc1e 	bl	800b998 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d001      	beq.n	800b166 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800b162:	2301      	movs	r3, #1
 800b164:	e04c      	b.n	800b200 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	691a      	ldr	r2, [r3, #16]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b170:	b2d2      	uxtb	r2, r2
 800b172:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b178:	1c5a      	adds	r2, r3, #1
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b182:	3b01      	subs	r3, #1
 800b184:	b29a      	uxth	r2, r3
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b18e:	b29b      	uxth	r3, r3
 800b190:	3b01      	subs	r3, #1
 800b192:	b29a      	uxth	r2, r3
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	695b      	ldr	r3, [r3, #20]
 800b19e:	f003 0304 	and.w	r3, r3, #4
 800b1a2:	2b04      	cmp	r3, #4
 800b1a4:	d118      	bne.n	800b1d8 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	691a      	ldr	r2, [r3, #16]
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1b0:	b2d2      	uxtb	r2, r2
 800b1b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1b8:	1c5a      	adds	r2, r3, #1
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1c2:	3b01      	subs	r3, #1
 800b1c4:	b29a      	uxth	r2, r3
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	3b01      	subs	r3, #1
 800b1d2:	b29a      	uxth	r2, r3
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	f47f ae94 	bne.w	800af0a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2220      	movs	r2, #32
 800b1e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	e000      	b.n	800b200 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800b1fe:	2302      	movs	r3, #2
  }
}
 800b200:	4618      	mov	r0, r3
 800b202:	3728      	adds	r7, #40	@ 0x28
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}
 800b208:	00010004 	.word	0x00010004
 800b20c:	20000f74 	.word	0x20000f74
 800b210:	14f8b589 	.word	0x14f8b589

0800b214 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b214:	b480      	push	{r7}
 800b216:	b083      	sub	sp, #12
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b222:	b2db      	uxtb	r3, r3
}
 800b224:	4618      	mov	r0, r3
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	bc80      	pop	{r7}
 800b22c:	4770      	bx	lr

0800b22e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b22e:	b480      	push	{r7}
 800b230:	b083      	sub	sp, #12
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	370c      	adds	r7, #12
 800b23e:	46bd      	mov	sp, r7
 800b240:	bc80      	pop	{r7}
 800b242:	4770      	bx	lr

0800b244 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b088      	sub	sp, #32
 800b248:	af02      	add	r7, sp, #8
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	607a      	str	r2, [r7, #4]
 800b24e:	603b      	str	r3, [r7, #0]
 800b250:	460b      	mov	r3, r1
 800b252:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b258:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	2b08      	cmp	r3, #8
 800b25e:	d006      	beq.n	800b26e <I2C_MasterRequestWrite+0x2a>
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	2b01      	cmp	r3, #1
 800b264:	d003      	beq.n	800b26e <I2C_MasterRequestWrite+0x2a>
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800b26c:	d108      	bne.n	800b280 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b27c:	601a      	str	r2, [r3, #0]
 800b27e:	e00b      	b.n	800b298 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b284:	2b12      	cmp	r3, #18
 800b286:	d107      	bne.n	800b298 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b296:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	9300      	str	r3, [sp, #0]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b2a4:	68f8      	ldr	r0, [r7, #12]
 800b2a6:	f000 f9cd 	bl	800b644 <I2C_WaitOnFlagUntilTimeout>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d00d      	beq.n	800b2cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2be:	d103      	bne.n	800b2c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b2c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b2c8:	2303      	movs	r3, #3
 800b2ca:	e035      	b.n	800b338 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	691b      	ldr	r3, [r3, #16]
 800b2d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b2d4:	d108      	bne.n	800b2e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b2d6:	897b      	ldrh	r3, [r7, #10]
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	461a      	mov	r2, r3
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b2e4:	611a      	str	r2, [r3, #16]
 800b2e6:	e01b      	b.n	800b320 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b2e8:	897b      	ldrh	r3, [r7, #10]
 800b2ea:	11db      	asrs	r3, r3, #7
 800b2ec:	b2db      	uxtb	r3, r3
 800b2ee:	f003 0306 	and.w	r3, r3, #6
 800b2f2:	b2db      	uxtb	r3, r3
 800b2f4:	f063 030f 	orn	r3, r3, #15
 800b2f8:	b2da      	uxtb	r2, r3
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	490e      	ldr	r1, [pc, #56]	@ (800b340 <I2C_MasterRequestWrite+0xfc>)
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f000 fa16 	bl	800b738 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b30c:	4603      	mov	r3, r0
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d001      	beq.n	800b316 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b312:	2301      	movs	r3, #1
 800b314:	e010      	b.n	800b338 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b316:	897b      	ldrh	r3, [r7, #10]
 800b318:	b2da      	uxtb	r2, r3
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	687a      	ldr	r2, [r7, #4]
 800b324:	4907      	ldr	r1, [pc, #28]	@ (800b344 <I2C_MasterRequestWrite+0x100>)
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f000 fa06 	bl	800b738 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b32c:	4603      	mov	r3, r0
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d001      	beq.n	800b336 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	e000      	b.n	800b338 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3718      	adds	r7, #24
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	00010008 	.word	0x00010008
 800b344:	00010002 	.word	0x00010002

0800b348 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b088      	sub	sp, #32
 800b34c:	af02      	add	r7, sp, #8
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	4608      	mov	r0, r1
 800b352:	4611      	mov	r1, r2
 800b354:	461a      	mov	r2, r3
 800b356:	4603      	mov	r3, r0
 800b358:	817b      	strh	r3, [r7, #10]
 800b35a:	460b      	mov	r3, r1
 800b35c:	813b      	strh	r3, [r7, #8]
 800b35e:	4613      	mov	r3, r2
 800b360:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b370:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b374:	9300      	str	r3, [sp, #0]
 800b376:	6a3b      	ldr	r3, [r7, #32]
 800b378:	2200      	movs	r2, #0
 800b37a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b37e:	68f8      	ldr	r0, [r7, #12]
 800b380:	f000 f960 	bl	800b644 <I2C_WaitOnFlagUntilTimeout>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	d00d      	beq.n	800b3a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b394:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b398:	d103      	bne.n	800b3a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b3a0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	e05f      	b.n	800b466 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b3a6:	897b      	ldrh	r3, [r7, #10]
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b3b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3b8:	6a3a      	ldr	r2, [r7, #32]
 800b3ba:	492d      	ldr	r1, [pc, #180]	@ (800b470 <I2C_RequestMemoryWrite+0x128>)
 800b3bc:	68f8      	ldr	r0, [r7, #12]
 800b3be:	f000 f9bb 	bl	800b738 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d001      	beq.n	800b3cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e04c      	b.n	800b466 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	617b      	str	r3, [r7, #20]
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	695b      	ldr	r3, [r3, #20]
 800b3d6:	617b      	str	r3, [r7, #20]
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	699b      	ldr	r3, [r3, #24]
 800b3de:	617b      	str	r3, [r7, #20]
 800b3e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b3e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3e4:	6a39      	ldr	r1, [r7, #32]
 800b3e6:	68f8      	ldr	r0, [r7, #12]
 800b3e8:	f000 fa46 	bl	800b878 <I2C_WaitOnTXEFlagUntilTimeout>
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00d      	beq.n	800b40e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b3f6:	2b04      	cmp	r3, #4
 800b3f8:	d107      	bne.n	800b40a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b408:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	e02b      	b.n	800b466 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b40e:	88fb      	ldrh	r3, [r7, #6]
 800b410:	2b01      	cmp	r3, #1
 800b412:	d105      	bne.n	800b420 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b414:	893b      	ldrh	r3, [r7, #8]
 800b416:	b2da      	uxtb	r2, r3
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	611a      	str	r2, [r3, #16]
 800b41e:	e021      	b.n	800b464 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b420:	893b      	ldrh	r3, [r7, #8]
 800b422:	0a1b      	lsrs	r3, r3, #8
 800b424:	b29b      	uxth	r3, r3
 800b426:	b2da      	uxtb	r2, r3
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b42e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b430:	6a39      	ldr	r1, [r7, #32]
 800b432:	68f8      	ldr	r0, [r7, #12]
 800b434:	f000 fa20 	bl	800b878 <I2C_WaitOnTXEFlagUntilTimeout>
 800b438:	4603      	mov	r3, r0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d00d      	beq.n	800b45a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b442:	2b04      	cmp	r3, #4
 800b444:	d107      	bne.n	800b456 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	681a      	ldr	r2, [r3, #0]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b454:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b456:	2301      	movs	r3, #1
 800b458:	e005      	b.n	800b466 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b45a:	893b      	ldrh	r3, [r7, #8]
 800b45c:	b2da      	uxtb	r2, r3
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3718      	adds	r7, #24
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	00010002 	.word	0x00010002

0800b474 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b088      	sub	sp, #32
 800b478:	af02      	add	r7, sp, #8
 800b47a:	60f8      	str	r0, [r7, #12]
 800b47c:	4608      	mov	r0, r1
 800b47e:	4611      	mov	r1, r2
 800b480:	461a      	mov	r2, r3
 800b482:	4603      	mov	r3, r0
 800b484:	817b      	strh	r3, [r7, #10]
 800b486:	460b      	mov	r3, r1
 800b488:	813b      	strh	r3, [r7, #8]
 800b48a:	4613      	mov	r3, r2
 800b48c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b49c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	681a      	ldr	r2, [r3, #0]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b4ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4b0:	9300      	str	r3, [sp, #0]
 800b4b2:	6a3b      	ldr	r3, [r7, #32]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b4ba:	68f8      	ldr	r0, [r7, #12]
 800b4bc:	f000 f8c2 	bl	800b644 <I2C_WaitOnFlagUntilTimeout>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00d      	beq.n	800b4e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b4d4:	d103      	bne.n	800b4de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b4dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b4de:	2303      	movs	r3, #3
 800b4e0:	e0aa      	b.n	800b638 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b4e2:	897b      	ldrh	r3, [r7, #10]
 800b4e4:	b2db      	uxtb	r3, r3
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800b4f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f4:	6a3a      	ldr	r2, [r7, #32]
 800b4f6:	4952      	ldr	r1, [pc, #328]	@ (800b640 <I2C_RequestMemoryRead+0x1cc>)
 800b4f8:	68f8      	ldr	r0, [r7, #12]
 800b4fa:	f000 f91d 	bl	800b738 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b4fe:	4603      	mov	r3, r0
 800b500:	2b00      	cmp	r3, #0
 800b502:	d001      	beq.n	800b508 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b504:	2301      	movs	r3, #1
 800b506:	e097      	b.n	800b638 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b508:	2300      	movs	r3, #0
 800b50a:	617b      	str	r3, [r7, #20]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	695b      	ldr	r3, [r3, #20]
 800b512:	617b      	str	r3, [r7, #20]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	699b      	ldr	r3, [r3, #24]
 800b51a:	617b      	str	r3, [r7, #20]
 800b51c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b51e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b520:	6a39      	ldr	r1, [r7, #32]
 800b522:	68f8      	ldr	r0, [r7, #12]
 800b524:	f000 f9a8 	bl	800b878 <I2C_WaitOnTXEFlagUntilTimeout>
 800b528:	4603      	mov	r3, r0
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d00d      	beq.n	800b54a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b532:	2b04      	cmp	r3, #4
 800b534:	d107      	bne.n	800b546 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b544:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b546:	2301      	movs	r3, #1
 800b548:	e076      	b.n	800b638 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b54a:	88fb      	ldrh	r3, [r7, #6]
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d105      	bne.n	800b55c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b550:	893b      	ldrh	r3, [r7, #8]
 800b552:	b2da      	uxtb	r2, r3
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	611a      	str	r2, [r3, #16]
 800b55a:	e021      	b.n	800b5a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b55c:	893b      	ldrh	r3, [r7, #8]
 800b55e:	0a1b      	lsrs	r3, r3, #8
 800b560:	b29b      	uxth	r3, r3
 800b562:	b2da      	uxtb	r2, r3
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b56a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b56c:	6a39      	ldr	r1, [r7, #32]
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	f000 f982 	bl	800b878 <I2C_WaitOnTXEFlagUntilTimeout>
 800b574:	4603      	mov	r3, r0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d00d      	beq.n	800b596 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b57e:	2b04      	cmp	r3, #4
 800b580:	d107      	bne.n	800b592 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	681a      	ldr	r2, [r3, #0]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b590:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b592:	2301      	movs	r3, #1
 800b594:	e050      	b.n	800b638 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b596:	893b      	ldrh	r3, [r7, #8]
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b5a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b5a2:	6a39      	ldr	r1, [r7, #32]
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f000 f967 	bl	800b878 <I2C_WaitOnTXEFlagUntilTimeout>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d00d      	beq.n	800b5cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5b4:	2b04      	cmp	r3, #4
 800b5b6:	d107      	bne.n	800b5c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b5c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	e035      	b.n	800b638 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b5da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b5dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5de:	9300      	str	r3, [sp, #0]
 800b5e0:	6a3b      	ldr	r3, [r7, #32]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f000 f82b 	bl	800b644 <I2C_WaitOnFlagUntilTimeout>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00d      	beq.n	800b610 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b602:	d103      	bne.n	800b60c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b60a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800b60c:	2303      	movs	r3, #3
 800b60e:	e013      	b.n	800b638 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b610:	897b      	ldrh	r3, [r7, #10]
 800b612:	b2db      	uxtb	r3, r3
 800b614:	f043 0301 	orr.w	r3, r3, #1
 800b618:	b2da      	uxtb	r2, r3
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b622:	6a3a      	ldr	r2, [r7, #32]
 800b624:	4906      	ldr	r1, [pc, #24]	@ (800b640 <I2C_RequestMemoryRead+0x1cc>)
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f000 f886 	bl	800b738 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d001      	beq.n	800b636 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b632:	2301      	movs	r3, #1
 800b634:	e000      	b.n	800b638 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b636:	2300      	movs	r3, #0
}
 800b638:	4618      	mov	r0, r3
 800b63a:	3718      	adds	r7, #24
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	00010002 	.word	0x00010002

0800b644 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	603b      	str	r3, [r7, #0]
 800b650:	4613      	mov	r3, r2
 800b652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b654:	e048      	b.n	800b6e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b65c:	d044      	beq.n	800b6e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b65e:	f7fe f9e3 	bl	8009a28 <HAL_GetTick>
 800b662:	4602      	mov	r2, r0
 800b664:	69bb      	ldr	r3, [r7, #24]
 800b666:	1ad3      	subs	r3, r2, r3
 800b668:	683a      	ldr	r2, [r7, #0]
 800b66a:	429a      	cmp	r2, r3
 800b66c:	d302      	bcc.n	800b674 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d139      	bne.n	800b6e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	0c1b      	lsrs	r3, r3, #16
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d10d      	bne.n	800b69a <I2C_WaitOnFlagUntilTimeout+0x56>
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	695b      	ldr	r3, [r3, #20]
 800b684:	43da      	mvns	r2, r3
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	4013      	ands	r3, r2
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	bf0c      	ite	eq
 800b690:	2301      	moveq	r3, #1
 800b692:	2300      	movne	r3, #0
 800b694:	b2db      	uxtb	r3, r3
 800b696:	461a      	mov	r2, r3
 800b698:	e00c      	b.n	800b6b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	699b      	ldr	r3, [r3, #24]
 800b6a0:	43da      	mvns	r2, r3
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	4013      	ands	r3, r2
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	bf0c      	ite	eq
 800b6ac:	2301      	moveq	r3, #1
 800b6ae:	2300      	movne	r3, #0
 800b6b0:	b2db      	uxtb	r3, r3
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	79fb      	ldrb	r3, [r7, #7]
 800b6b6:	429a      	cmp	r2, r3
 800b6b8:	d116      	bne.n	800b6e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2200      	movs	r2, #0
 800b6be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2220      	movs	r2, #32
 800b6c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6d4:	f043 0220 	orr.w	r2, r3, #32
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	e023      	b.n	800b730 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	0c1b      	lsrs	r3, r3, #16
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d10d      	bne.n	800b70e <I2C_WaitOnFlagUntilTimeout+0xca>
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	695b      	ldr	r3, [r3, #20]
 800b6f8:	43da      	mvns	r2, r3
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	4013      	ands	r3, r2
 800b6fe:	b29b      	uxth	r3, r3
 800b700:	2b00      	cmp	r3, #0
 800b702:	bf0c      	ite	eq
 800b704:	2301      	moveq	r3, #1
 800b706:	2300      	movne	r3, #0
 800b708:	b2db      	uxtb	r3, r3
 800b70a:	461a      	mov	r2, r3
 800b70c:	e00c      	b.n	800b728 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	699b      	ldr	r3, [r3, #24]
 800b714:	43da      	mvns	r2, r3
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	4013      	ands	r3, r2
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	bf0c      	ite	eq
 800b720:	2301      	moveq	r3, #1
 800b722:	2300      	movne	r3, #0
 800b724:	b2db      	uxtb	r3, r3
 800b726:	461a      	mov	r2, r3
 800b728:	79fb      	ldrb	r3, [r7, #7]
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d093      	beq.n	800b656 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b72e:	2300      	movs	r3, #0
}
 800b730:	4618      	mov	r0, r3
 800b732:	3710      	adds	r7, #16
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	607a      	str	r2, [r7, #4]
 800b744:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b746:	e071      	b.n	800b82c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	695b      	ldr	r3, [r3, #20]
 800b74e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b752:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b756:	d123      	bne.n	800b7a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	681a      	ldr	r2, [r3, #0]
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b766:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b770:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2200      	movs	r2, #0
 800b776:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2220      	movs	r2, #32
 800b77c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2200      	movs	r2, #0
 800b784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b78c:	f043 0204 	orr.w	r2, r3, #4
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2200      	movs	r2, #0
 800b798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b79c:	2301      	movs	r3, #1
 800b79e:	e067      	b.n	800b870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b7a6:	d041      	beq.n	800b82c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7a8:	f7fe f93e 	bl	8009a28 <HAL_GetTick>
 800b7ac:	4602      	mov	r2, r0
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	1ad3      	subs	r3, r2, r3
 800b7b2:	687a      	ldr	r2, [r7, #4]
 800b7b4:	429a      	cmp	r2, r3
 800b7b6:	d302      	bcc.n	800b7be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d136      	bne.n	800b82c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	0c1b      	lsrs	r3, r3, #16
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d10c      	bne.n	800b7e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	695b      	ldr	r3, [r3, #20]
 800b7ce:	43da      	mvns	r2, r3
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	4013      	ands	r3, r2
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	bf14      	ite	ne
 800b7da:	2301      	movne	r3, #1
 800b7dc:	2300      	moveq	r3, #0
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	e00b      	b.n	800b7fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	699b      	ldr	r3, [r3, #24]
 800b7e8:	43da      	mvns	r2, r3
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	4013      	ands	r3, r2
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	bf14      	ite	ne
 800b7f4:	2301      	movne	r3, #1
 800b7f6:	2300      	moveq	r3, #0
 800b7f8:	b2db      	uxtb	r3, r3
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d016      	beq.n	800b82c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2200      	movs	r2, #0
 800b802:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	2220      	movs	r2, #32
 800b808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2200      	movs	r2, #0
 800b810:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b818:	f043 0220 	orr.w	r2, r3, #32
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2200      	movs	r2, #0
 800b824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b828:	2301      	movs	r3, #1
 800b82a:	e021      	b.n	800b870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	0c1b      	lsrs	r3, r3, #16
 800b830:	b2db      	uxtb	r3, r3
 800b832:	2b01      	cmp	r3, #1
 800b834:	d10c      	bne.n	800b850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	695b      	ldr	r3, [r3, #20]
 800b83c:	43da      	mvns	r2, r3
 800b83e:	68bb      	ldr	r3, [r7, #8]
 800b840:	4013      	ands	r3, r2
 800b842:	b29b      	uxth	r3, r3
 800b844:	2b00      	cmp	r3, #0
 800b846:	bf14      	ite	ne
 800b848:	2301      	movne	r3, #1
 800b84a:	2300      	moveq	r3, #0
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	e00b      	b.n	800b868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	699b      	ldr	r3, [r3, #24]
 800b856:	43da      	mvns	r2, r3
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	4013      	ands	r3, r2
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	2b00      	cmp	r3, #0
 800b860:	bf14      	ite	ne
 800b862:	2301      	movne	r3, #1
 800b864:	2300      	moveq	r3, #0
 800b866:	b2db      	uxtb	r3, r3
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f47f af6d 	bne.w	800b748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	3710      	adds	r7, #16
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b884:	e034      	b.n	800b8f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b886:	68f8      	ldr	r0, [r7, #12]
 800b888:	f000 f8e3 	bl	800ba52 <I2C_IsAcknowledgeFailed>
 800b88c:	4603      	mov	r3, r0
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d001      	beq.n	800b896 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b892:	2301      	movs	r3, #1
 800b894:	e034      	b.n	800b900 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b89c:	d028      	beq.n	800b8f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b89e:	f7fe f8c3 	bl	8009a28 <HAL_GetTick>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	1ad3      	subs	r3, r2, r3
 800b8a8:	68ba      	ldr	r2, [r7, #8]
 800b8aa:	429a      	cmp	r2, r3
 800b8ac:	d302      	bcc.n	800b8b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d11d      	bne.n	800b8f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	695b      	ldr	r3, [r3, #20]
 800b8ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8be:	2b80      	cmp	r3, #128	@ 0x80
 800b8c0:	d016      	beq.n	800b8f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2220      	movs	r2, #32
 800b8cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b8dc:	f043 0220 	orr.w	r2, r3, #32
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	e007      	b.n	800b900 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	695b      	ldr	r3, [r3, #20]
 800b8f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8fa:	2b80      	cmp	r3, #128	@ 0x80
 800b8fc:	d1c3      	bne.n	800b886 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b8fe:	2300      	movs	r3, #0
}
 800b900:	4618      	mov	r0, r3
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	60f8      	str	r0, [r7, #12]
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b914:	e034      	b.n	800b980 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b916:	68f8      	ldr	r0, [r7, #12]
 800b918:	f000 f89b 	bl	800ba52 <I2C_IsAcknowledgeFailed>
 800b91c:	4603      	mov	r3, r0
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d001      	beq.n	800b926 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b922:	2301      	movs	r3, #1
 800b924:	e034      	b.n	800b990 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b92c:	d028      	beq.n	800b980 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b92e:	f7fe f87b 	bl	8009a28 <HAL_GetTick>
 800b932:	4602      	mov	r2, r0
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	1ad3      	subs	r3, r2, r3
 800b938:	68ba      	ldr	r2, [r7, #8]
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d302      	bcc.n	800b944 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d11d      	bne.n	800b980 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	f003 0304 	and.w	r3, r3, #4
 800b94e:	2b04      	cmp	r3, #4
 800b950:	d016      	beq.n	800b980 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2200      	movs	r2, #0
 800b956:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2220      	movs	r2, #32
 800b95c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2200      	movs	r2, #0
 800b964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b96c:	f043 0220 	orr.w	r2, r3, #32
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	2200      	movs	r2, #0
 800b978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b97c:	2301      	movs	r3, #1
 800b97e:	e007      	b.n	800b990 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	695b      	ldr	r3, [r3, #20]
 800b986:	f003 0304 	and.w	r3, r3, #4
 800b98a:	2b04      	cmp	r3, #4
 800b98c:	d1c3      	bne.n	800b916 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b98e:	2300      	movs	r3, #0
}
 800b990:	4618      	mov	r0, r3
 800b992:	3710      	adds	r7, #16
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}

0800b998 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b9a4:	e049      	b.n	800ba3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	695b      	ldr	r3, [r3, #20]
 800b9ac:	f003 0310 	and.w	r3, r3, #16
 800b9b0:	2b10      	cmp	r3, #16
 800b9b2:	d119      	bne.n	800b9e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f06f 0210 	mvn.w	r2, #16
 800b9bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2220      	movs	r2, #32
 800b9c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e030      	b.n	800ba4a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b9e8:	f7fe f81e 	bl	8009a28 <HAL_GetTick>
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	1ad3      	subs	r3, r2, r3
 800b9f2:	68ba      	ldr	r2, [r7, #8]
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d302      	bcc.n	800b9fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d11d      	bne.n	800ba3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	695b      	ldr	r3, [r3, #20]
 800ba04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba08:	2b40      	cmp	r3, #64	@ 0x40
 800ba0a:	d016      	beq.n	800ba3a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	2220      	movs	r2, #32
 800ba16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	2200      	movs	r2, #0
 800ba1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba26:	f043 0220 	orr.w	r2, r3, #32
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2200      	movs	r2, #0
 800ba32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800ba36:	2301      	movs	r3, #1
 800ba38:	e007      	b.n	800ba4a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	695b      	ldr	r3, [r3, #20]
 800ba40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba44:	2b40      	cmp	r3, #64	@ 0x40
 800ba46:	d1ae      	bne.n	800b9a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ba48:	2300      	movs	r3, #0
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}

0800ba52 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ba52:	b480      	push	{r7}
 800ba54:	b083      	sub	sp, #12
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	695b      	ldr	r3, [r3, #20]
 800ba60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ba68:	d11b      	bne.n	800baa2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800ba72:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2200      	movs	r2, #0
 800ba78:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2220      	movs	r2, #32
 800ba7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2200      	movs	r2, #0
 800ba86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba8e:	f043 0204 	orr.w	r2, r3, #4
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800ba9e:	2301      	movs	r3, #1
 800baa0:	e000      	b.n	800baa4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800baa2:	2300      	movs	r3, #0
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	370c      	adds	r7, #12
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bc80      	pop	{r7}
 800baac:	4770      	bx	lr
	...

0800bab0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b086      	sub	sp, #24
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d101      	bne.n	800bac2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800babe:	2301      	movs	r3, #1
 800bac0:	e272      	b.n	800bfa8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f003 0301 	and.w	r3, r3, #1
 800baca:	2b00      	cmp	r3, #0
 800bacc:	f000 8087 	beq.w	800bbde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bad0:	4b92      	ldr	r3, [pc, #584]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bad2:	685b      	ldr	r3, [r3, #4]
 800bad4:	f003 030c 	and.w	r3, r3, #12
 800bad8:	2b04      	cmp	r3, #4
 800bada:	d00c      	beq.n	800baf6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800badc:	4b8f      	ldr	r3, [pc, #572]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	f003 030c 	and.w	r3, r3, #12
 800bae4:	2b08      	cmp	r3, #8
 800bae6:	d112      	bne.n	800bb0e <HAL_RCC_OscConfig+0x5e>
 800bae8:	4b8c      	ldr	r3, [pc, #560]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800baea:	685b      	ldr	r3, [r3, #4]
 800baec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800baf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800baf4:	d10b      	bne.n	800bb0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800baf6:	4b89      	ldr	r3, [pc, #548]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d06c      	beq.n	800bbdc <HAL_RCC_OscConfig+0x12c>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	685b      	ldr	r3, [r3, #4]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d168      	bne.n	800bbdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e24c      	b.n	800bfa8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb16:	d106      	bne.n	800bb26 <HAL_RCC_OscConfig+0x76>
 800bb18:	4b80      	ldr	r3, [pc, #512]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	4a7f      	ldr	r2, [pc, #508]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bb1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bb22:	6013      	str	r3, [r2, #0]
 800bb24:	e02e      	b.n	800bb84 <HAL_RCC_OscConfig+0xd4>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d10c      	bne.n	800bb48 <HAL_RCC_OscConfig+0x98>
 800bb2e:	4b7b      	ldr	r3, [pc, #492]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a7a      	ldr	r2, [pc, #488]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bb34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb38:	6013      	str	r3, [r2, #0]
 800bb3a:	4b78      	ldr	r3, [pc, #480]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4a77      	ldr	r2, [pc, #476]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bb40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bb44:	6013      	str	r3, [r2, #0]
 800bb46:	e01d      	b.n	800bb84 <HAL_RCC_OscConfig+0xd4>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bb50:	d10c      	bne.n	800bb6c <HAL_RCC_OscConfig+0xbc>
 800bb52:	4b72      	ldr	r3, [pc, #456]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a71      	ldr	r2, [pc, #452]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bb58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bb5c:	6013      	str	r3, [r2, #0]
 800bb5e:	4b6f      	ldr	r3, [pc, #444]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4a6e      	ldr	r2, [pc, #440]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bb64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bb68:	6013      	str	r3, [r2, #0]
 800bb6a:	e00b      	b.n	800bb84 <HAL_RCC_OscConfig+0xd4>
 800bb6c:	4b6b      	ldr	r3, [pc, #428]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	4a6a      	ldr	r2, [pc, #424]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bb72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bb76:	6013      	str	r3, [r2, #0]
 800bb78:	4b68      	ldr	r3, [pc, #416]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	4a67      	ldr	r2, [pc, #412]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bb7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bb82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d013      	beq.n	800bbb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bb8c:	f7fd ff4c 	bl	8009a28 <HAL_GetTick>
 800bb90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bb92:	e008      	b.n	800bba6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bb94:	f7fd ff48 	bl	8009a28 <HAL_GetTick>
 800bb98:	4602      	mov	r2, r0
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	1ad3      	subs	r3, r2, r3
 800bb9e:	2b64      	cmp	r3, #100	@ 0x64
 800bba0:	d901      	bls.n	800bba6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800bba2:	2303      	movs	r3, #3
 800bba4:	e200      	b.n	800bfa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bba6:	4b5d      	ldr	r3, [pc, #372]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d0f0      	beq.n	800bb94 <HAL_RCC_OscConfig+0xe4>
 800bbb2:	e014      	b.n	800bbde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bbb4:	f7fd ff38 	bl	8009a28 <HAL_GetTick>
 800bbb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bbba:	e008      	b.n	800bbce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bbbc:	f7fd ff34 	bl	8009a28 <HAL_GetTick>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	1ad3      	subs	r3, r2, r3
 800bbc6:	2b64      	cmp	r3, #100	@ 0x64
 800bbc8:	d901      	bls.n	800bbce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800bbca:	2303      	movs	r3, #3
 800bbcc:	e1ec      	b.n	800bfa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bbce:	4b53      	ldr	r3, [pc, #332]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d1f0      	bne.n	800bbbc <HAL_RCC_OscConfig+0x10c>
 800bbda:	e000      	b.n	800bbde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bbdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f003 0302 	and.w	r3, r3, #2
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d063      	beq.n	800bcb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bbea:	4b4c      	ldr	r3, [pc, #304]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	f003 030c 	and.w	r3, r3, #12
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d00b      	beq.n	800bc0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800bbf6:	4b49      	ldr	r3, [pc, #292]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bbf8:	685b      	ldr	r3, [r3, #4]
 800bbfa:	f003 030c 	and.w	r3, r3, #12
 800bbfe:	2b08      	cmp	r3, #8
 800bc00:	d11c      	bne.n	800bc3c <HAL_RCC_OscConfig+0x18c>
 800bc02:	4b46      	ldr	r3, [pc, #280]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bc04:	685b      	ldr	r3, [r3, #4]
 800bc06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d116      	bne.n	800bc3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bc0e:	4b43      	ldr	r3, [pc, #268]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f003 0302 	and.w	r3, r3, #2
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d005      	beq.n	800bc26 <HAL_RCC_OscConfig+0x176>
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	691b      	ldr	r3, [r3, #16]
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d001      	beq.n	800bc26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800bc22:	2301      	movs	r3, #1
 800bc24:	e1c0      	b.n	800bfa8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc26:	4b3d      	ldr	r3, [pc, #244]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	695b      	ldr	r3, [r3, #20]
 800bc32:	00db      	lsls	r3, r3, #3
 800bc34:	4939      	ldr	r1, [pc, #228]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bc36:	4313      	orrs	r3, r2
 800bc38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bc3a:	e03a      	b.n	800bcb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	691b      	ldr	r3, [r3, #16]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d020      	beq.n	800bc86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bc44:	4b36      	ldr	r3, [pc, #216]	@ (800bd20 <HAL_RCC_OscConfig+0x270>)
 800bc46:	2201      	movs	r2, #1
 800bc48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc4a:	f7fd feed 	bl	8009a28 <HAL_GetTick>
 800bc4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc50:	e008      	b.n	800bc64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bc52:	f7fd fee9 	bl	8009a28 <HAL_GetTick>
 800bc56:	4602      	mov	r2, r0
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	1ad3      	subs	r3, r2, r3
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d901      	bls.n	800bc64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800bc60:	2303      	movs	r3, #3
 800bc62:	e1a1      	b.n	800bfa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bc64:	4b2d      	ldr	r3, [pc, #180]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f003 0302 	and.w	r3, r3, #2
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d0f0      	beq.n	800bc52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc70:	4b2a      	ldr	r3, [pc, #168]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	695b      	ldr	r3, [r3, #20]
 800bc7c:	00db      	lsls	r3, r3, #3
 800bc7e:	4927      	ldr	r1, [pc, #156]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bc80:	4313      	orrs	r3, r2
 800bc82:	600b      	str	r3, [r1, #0]
 800bc84:	e015      	b.n	800bcb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bc86:	4b26      	ldr	r3, [pc, #152]	@ (800bd20 <HAL_RCC_OscConfig+0x270>)
 800bc88:	2200      	movs	r2, #0
 800bc8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc8c:	f7fd fecc 	bl	8009a28 <HAL_GetTick>
 800bc90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bc92:	e008      	b.n	800bca6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bc94:	f7fd fec8 	bl	8009a28 <HAL_GetTick>
 800bc98:	4602      	mov	r2, r0
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	1ad3      	subs	r3, r2, r3
 800bc9e:	2b02      	cmp	r3, #2
 800bca0:	d901      	bls.n	800bca6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800bca2:	2303      	movs	r3, #3
 800bca4:	e180      	b.n	800bfa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bca6:	4b1d      	ldr	r3, [pc, #116]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f003 0302 	and.w	r3, r3, #2
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d1f0      	bne.n	800bc94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f003 0308 	and.w	r3, r3, #8
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d03a      	beq.n	800bd34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	699b      	ldr	r3, [r3, #24]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d019      	beq.n	800bcfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bcc6:	4b17      	ldr	r3, [pc, #92]	@ (800bd24 <HAL_RCC_OscConfig+0x274>)
 800bcc8:	2201      	movs	r2, #1
 800bcca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bccc:	f7fd feac 	bl	8009a28 <HAL_GetTick>
 800bcd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bcd2:	e008      	b.n	800bce6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bcd4:	f7fd fea8 	bl	8009a28 <HAL_GetTick>
 800bcd8:	4602      	mov	r2, r0
 800bcda:	693b      	ldr	r3, [r7, #16]
 800bcdc:	1ad3      	subs	r3, r2, r3
 800bcde:	2b02      	cmp	r3, #2
 800bce0:	d901      	bls.n	800bce6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800bce2:	2303      	movs	r3, #3
 800bce4:	e160      	b.n	800bfa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bce6:	4b0d      	ldr	r3, [pc, #52]	@ (800bd1c <HAL_RCC_OscConfig+0x26c>)
 800bce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bcea:	f003 0302 	and.w	r3, r3, #2
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d0f0      	beq.n	800bcd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800bcf2:	2001      	movs	r0, #1
 800bcf4:	f000 face 	bl	800c294 <RCC_Delay>
 800bcf8:	e01c      	b.n	800bd34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bcfa:	4b0a      	ldr	r3, [pc, #40]	@ (800bd24 <HAL_RCC_OscConfig+0x274>)
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bd00:	f7fd fe92 	bl	8009a28 <HAL_GetTick>
 800bd04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bd06:	e00f      	b.n	800bd28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bd08:	f7fd fe8e 	bl	8009a28 <HAL_GetTick>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	1ad3      	subs	r3, r2, r3
 800bd12:	2b02      	cmp	r3, #2
 800bd14:	d908      	bls.n	800bd28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800bd16:	2303      	movs	r3, #3
 800bd18:	e146      	b.n	800bfa8 <HAL_RCC_OscConfig+0x4f8>
 800bd1a:	bf00      	nop
 800bd1c:	40021000 	.word	0x40021000
 800bd20:	42420000 	.word	0x42420000
 800bd24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bd28:	4b92      	ldr	r3, [pc, #584]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800bd2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd2c:	f003 0302 	and.w	r3, r3, #2
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1e9      	bne.n	800bd08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f003 0304 	and.w	r3, r3, #4
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	f000 80a6 	beq.w	800be8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bd42:	2300      	movs	r3, #0
 800bd44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bd46:	4b8b      	ldr	r3, [pc, #556]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800bd48:	69db      	ldr	r3, [r3, #28]
 800bd4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d10d      	bne.n	800bd6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bd52:	4b88      	ldr	r3, [pc, #544]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800bd54:	69db      	ldr	r3, [r3, #28]
 800bd56:	4a87      	ldr	r2, [pc, #540]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800bd58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bd5c:	61d3      	str	r3, [r2, #28]
 800bd5e:	4b85      	ldr	r3, [pc, #532]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800bd60:	69db      	ldr	r3, [r3, #28]
 800bd62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bd66:	60bb      	str	r3, [r7, #8]
 800bd68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd6e:	4b82      	ldr	r3, [pc, #520]	@ (800bf78 <HAL_RCC_OscConfig+0x4c8>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d118      	bne.n	800bdac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bd7a:	4b7f      	ldr	r3, [pc, #508]	@ (800bf78 <HAL_RCC_OscConfig+0x4c8>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a7e      	ldr	r2, [pc, #504]	@ (800bf78 <HAL_RCC_OscConfig+0x4c8>)
 800bd80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bd86:	f7fd fe4f 	bl	8009a28 <HAL_GetTick>
 800bd8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd8c:	e008      	b.n	800bda0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd8e:	f7fd fe4b 	bl	8009a28 <HAL_GetTick>
 800bd92:	4602      	mov	r2, r0
 800bd94:	693b      	ldr	r3, [r7, #16]
 800bd96:	1ad3      	subs	r3, r2, r3
 800bd98:	2b64      	cmp	r3, #100	@ 0x64
 800bd9a:	d901      	bls.n	800bda0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800bd9c:	2303      	movs	r3, #3
 800bd9e:	e103      	b.n	800bfa8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bda0:	4b75      	ldr	r3, [pc, #468]	@ (800bf78 <HAL_RCC_OscConfig+0x4c8>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d0f0      	beq.n	800bd8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	68db      	ldr	r3, [r3, #12]
 800bdb0:	2b01      	cmp	r3, #1
 800bdb2:	d106      	bne.n	800bdc2 <HAL_RCC_OscConfig+0x312>
 800bdb4:	4b6f      	ldr	r3, [pc, #444]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800bdb6:	6a1b      	ldr	r3, [r3, #32]
 800bdb8:	4a6e      	ldr	r2, [pc, #440]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800bdba:	f043 0301 	orr.w	r3, r3, #1
 800bdbe:	6213      	str	r3, [r2, #32]
 800bdc0:	e02d      	b.n	800be1e <HAL_RCC_OscConfig+0x36e>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	68db      	ldr	r3, [r3, #12]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d10c      	bne.n	800bde4 <HAL_RCC_OscConfig+0x334>
 800bdca:	4b6a      	ldr	r3, [pc, #424]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800bdcc:	6a1b      	ldr	r3, [r3, #32]
 800bdce:	4a69      	ldr	r2, [pc, #420]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800bdd0:	f023 0301 	bic.w	r3, r3, #1
 800bdd4:	6213      	str	r3, [r2, #32]
 800bdd6:	4b67      	ldr	r3, [pc, #412]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800bdd8:	6a1b      	ldr	r3, [r3, #32]
 800bdda:	4a66      	ldr	r2, [pc, #408]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800bddc:	f023 0304 	bic.w	r3, r3, #4
 800bde0:	6213      	str	r3, [r2, #32]
 800bde2:	e01c      	b.n	800be1e <HAL_RCC_OscConfig+0x36e>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	68db      	ldr	r3, [r3, #12]
 800bde8:	2b05      	cmp	r3, #5
 800bdea:	d10c      	bne.n	800be06 <HAL_RCC_OscConfig+0x356>
 800bdec:	4b61      	ldr	r3, [pc, #388]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800bdee:	6a1b      	ldr	r3, [r3, #32]
 800bdf0:	4a60      	ldr	r2, [pc, #384]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800bdf2:	f043 0304 	orr.w	r3, r3, #4
 800bdf6:	6213      	str	r3, [r2, #32]
 800bdf8:	4b5e      	ldr	r3, [pc, #376]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800bdfa:	6a1b      	ldr	r3, [r3, #32]
 800bdfc:	4a5d      	ldr	r2, [pc, #372]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800bdfe:	f043 0301 	orr.w	r3, r3, #1
 800be02:	6213      	str	r3, [r2, #32]
 800be04:	e00b      	b.n	800be1e <HAL_RCC_OscConfig+0x36e>
 800be06:	4b5b      	ldr	r3, [pc, #364]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800be08:	6a1b      	ldr	r3, [r3, #32]
 800be0a:	4a5a      	ldr	r2, [pc, #360]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800be0c:	f023 0301 	bic.w	r3, r3, #1
 800be10:	6213      	str	r3, [r2, #32]
 800be12:	4b58      	ldr	r3, [pc, #352]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800be14:	6a1b      	ldr	r3, [r3, #32]
 800be16:	4a57      	ldr	r2, [pc, #348]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800be18:	f023 0304 	bic.w	r3, r3, #4
 800be1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d015      	beq.n	800be52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800be26:	f7fd fdff 	bl	8009a28 <HAL_GetTick>
 800be2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be2c:	e00a      	b.n	800be44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be2e:	f7fd fdfb 	bl	8009a28 <HAL_GetTick>
 800be32:	4602      	mov	r2, r0
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	1ad3      	subs	r3, r2, r3
 800be38:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be3c:	4293      	cmp	r3, r2
 800be3e:	d901      	bls.n	800be44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800be40:	2303      	movs	r3, #3
 800be42:	e0b1      	b.n	800bfa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800be44:	4b4b      	ldr	r3, [pc, #300]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800be46:	6a1b      	ldr	r3, [r3, #32]
 800be48:	f003 0302 	and.w	r3, r3, #2
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d0ee      	beq.n	800be2e <HAL_RCC_OscConfig+0x37e>
 800be50:	e014      	b.n	800be7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800be52:	f7fd fde9 	bl	8009a28 <HAL_GetTick>
 800be56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800be58:	e00a      	b.n	800be70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be5a:	f7fd fde5 	bl	8009a28 <HAL_GetTick>
 800be5e:	4602      	mov	r2, r0
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	1ad3      	subs	r3, r2, r3
 800be64:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be68:	4293      	cmp	r3, r2
 800be6a:	d901      	bls.n	800be70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800be6c:	2303      	movs	r3, #3
 800be6e:	e09b      	b.n	800bfa8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800be70:	4b40      	ldr	r3, [pc, #256]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800be72:	6a1b      	ldr	r3, [r3, #32]
 800be74:	f003 0302 	and.w	r3, r3, #2
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d1ee      	bne.n	800be5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800be7c:	7dfb      	ldrb	r3, [r7, #23]
 800be7e:	2b01      	cmp	r3, #1
 800be80:	d105      	bne.n	800be8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800be82:	4b3c      	ldr	r3, [pc, #240]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800be84:	69db      	ldr	r3, [r3, #28]
 800be86:	4a3b      	ldr	r2, [pc, #236]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800be88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800be8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	69db      	ldr	r3, [r3, #28]
 800be92:	2b00      	cmp	r3, #0
 800be94:	f000 8087 	beq.w	800bfa6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800be98:	4b36      	ldr	r3, [pc, #216]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	f003 030c 	and.w	r3, r3, #12
 800bea0:	2b08      	cmp	r3, #8
 800bea2:	d061      	beq.n	800bf68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	69db      	ldr	r3, [r3, #28]
 800bea8:	2b02      	cmp	r3, #2
 800beaa:	d146      	bne.n	800bf3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800beac:	4b33      	ldr	r3, [pc, #204]	@ (800bf7c <HAL_RCC_OscConfig+0x4cc>)
 800beae:	2200      	movs	r2, #0
 800beb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800beb2:	f7fd fdb9 	bl	8009a28 <HAL_GetTick>
 800beb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800beb8:	e008      	b.n	800becc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800beba:	f7fd fdb5 	bl	8009a28 <HAL_GetTick>
 800bebe:	4602      	mov	r2, r0
 800bec0:	693b      	ldr	r3, [r7, #16]
 800bec2:	1ad3      	subs	r3, r2, r3
 800bec4:	2b02      	cmp	r3, #2
 800bec6:	d901      	bls.n	800becc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800bec8:	2303      	movs	r3, #3
 800beca:	e06d      	b.n	800bfa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800becc:	4b29      	ldr	r3, [pc, #164]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d1f0      	bne.n	800beba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6a1b      	ldr	r3, [r3, #32]
 800bedc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bee0:	d108      	bne.n	800bef4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800bee2:	4b24      	ldr	r3, [pc, #144]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	689b      	ldr	r3, [r3, #8]
 800beee:	4921      	ldr	r1, [pc, #132]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800bef0:	4313      	orrs	r3, r2
 800bef2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bef4:	4b1f      	ldr	r3, [pc, #124]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6a19      	ldr	r1, [r3, #32]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf04:	430b      	orrs	r3, r1
 800bf06:	491b      	ldr	r1, [pc, #108]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bf0c:	4b1b      	ldr	r3, [pc, #108]	@ (800bf7c <HAL_RCC_OscConfig+0x4cc>)
 800bf0e:	2201      	movs	r2, #1
 800bf10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf12:	f7fd fd89 	bl	8009a28 <HAL_GetTick>
 800bf16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bf18:	e008      	b.n	800bf2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf1a:	f7fd fd85 	bl	8009a28 <HAL_GetTick>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	1ad3      	subs	r3, r2, r3
 800bf24:	2b02      	cmp	r3, #2
 800bf26:	d901      	bls.n	800bf2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800bf28:	2303      	movs	r3, #3
 800bf2a:	e03d      	b.n	800bfa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800bf2c:	4b11      	ldr	r3, [pc, #68]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d0f0      	beq.n	800bf1a <HAL_RCC_OscConfig+0x46a>
 800bf38:	e035      	b.n	800bfa6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf3a:	4b10      	ldr	r3, [pc, #64]	@ (800bf7c <HAL_RCC_OscConfig+0x4cc>)
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf40:	f7fd fd72 	bl	8009a28 <HAL_GetTick>
 800bf44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bf46:	e008      	b.n	800bf5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf48:	f7fd fd6e 	bl	8009a28 <HAL_GetTick>
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	693b      	ldr	r3, [r7, #16]
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	2b02      	cmp	r3, #2
 800bf54:	d901      	bls.n	800bf5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800bf56:	2303      	movs	r3, #3
 800bf58:	e026      	b.n	800bfa8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800bf5a:	4b06      	ldr	r3, [pc, #24]	@ (800bf74 <HAL_RCC_OscConfig+0x4c4>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d1f0      	bne.n	800bf48 <HAL_RCC_OscConfig+0x498>
 800bf66:	e01e      	b.n	800bfa6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	69db      	ldr	r3, [r3, #28]
 800bf6c:	2b01      	cmp	r3, #1
 800bf6e:	d107      	bne.n	800bf80 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800bf70:	2301      	movs	r3, #1
 800bf72:	e019      	b.n	800bfa8 <HAL_RCC_OscConfig+0x4f8>
 800bf74:	40021000 	.word	0x40021000
 800bf78:	40007000 	.word	0x40007000
 800bf7c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800bf80:	4b0b      	ldr	r3, [pc, #44]	@ (800bfb0 <HAL_RCC_OscConfig+0x500>)
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6a1b      	ldr	r3, [r3, #32]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d106      	bne.n	800bfa2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	d001      	beq.n	800bfa6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	e000      	b.n	800bfa8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800bfa6:	2300      	movs	r3, #0
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3718      	adds	r7, #24
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	40021000 	.word	0x40021000

0800bfb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d101      	bne.n	800bfc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bfc4:	2301      	movs	r3, #1
 800bfc6:	e0d0      	b.n	800c16a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bfc8:	4b6a      	ldr	r3, [pc, #424]	@ (800c174 <HAL_RCC_ClockConfig+0x1c0>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f003 0307 	and.w	r3, r3, #7
 800bfd0:	683a      	ldr	r2, [r7, #0]
 800bfd2:	429a      	cmp	r2, r3
 800bfd4:	d910      	bls.n	800bff8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bfd6:	4b67      	ldr	r3, [pc, #412]	@ (800c174 <HAL_RCC_ClockConfig+0x1c0>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f023 0207 	bic.w	r2, r3, #7
 800bfde:	4965      	ldr	r1, [pc, #404]	@ (800c174 <HAL_RCC_ClockConfig+0x1c0>)
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bfe6:	4b63      	ldr	r3, [pc, #396]	@ (800c174 <HAL_RCC_ClockConfig+0x1c0>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f003 0307 	and.w	r3, r3, #7
 800bfee:	683a      	ldr	r2, [r7, #0]
 800bff0:	429a      	cmp	r2, r3
 800bff2:	d001      	beq.n	800bff8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800bff4:	2301      	movs	r3, #1
 800bff6:	e0b8      	b.n	800c16a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f003 0302 	and.w	r3, r3, #2
 800c000:	2b00      	cmp	r3, #0
 800c002:	d020      	beq.n	800c046 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f003 0304 	and.w	r3, r3, #4
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d005      	beq.n	800c01c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c010:	4b59      	ldr	r3, [pc, #356]	@ (800c178 <HAL_RCC_ClockConfig+0x1c4>)
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	4a58      	ldr	r2, [pc, #352]	@ (800c178 <HAL_RCC_ClockConfig+0x1c4>)
 800c016:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800c01a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f003 0308 	and.w	r3, r3, #8
 800c024:	2b00      	cmp	r3, #0
 800c026:	d005      	beq.n	800c034 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c028:	4b53      	ldr	r3, [pc, #332]	@ (800c178 <HAL_RCC_ClockConfig+0x1c4>)
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	4a52      	ldr	r2, [pc, #328]	@ (800c178 <HAL_RCC_ClockConfig+0x1c4>)
 800c02e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800c032:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c034:	4b50      	ldr	r3, [pc, #320]	@ (800c178 <HAL_RCC_ClockConfig+0x1c4>)
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	689b      	ldr	r3, [r3, #8]
 800c040:	494d      	ldr	r1, [pc, #308]	@ (800c178 <HAL_RCC_ClockConfig+0x1c4>)
 800c042:	4313      	orrs	r3, r2
 800c044:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f003 0301 	and.w	r3, r3, #1
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d040      	beq.n	800c0d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	685b      	ldr	r3, [r3, #4]
 800c056:	2b01      	cmp	r3, #1
 800c058:	d107      	bne.n	800c06a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c05a:	4b47      	ldr	r3, [pc, #284]	@ (800c178 <HAL_RCC_ClockConfig+0x1c4>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c062:	2b00      	cmp	r3, #0
 800c064:	d115      	bne.n	800c092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c066:	2301      	movs	r3, #1
 800c068:	e07f      	b.n	800c16a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	685b      	ldr	r3, [r3, #4]
 800c06e:	2b02      	cmp	r3, #2
 800c070:	d107      	bne.n	800c082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c072:	4b41      	ldr	r3, [pc, #260]	@ (800c178 <HAL_RCC_ClockConfig+0x1c4>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d109      	bne.n	800c092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c07e:	2301      	movs	r3, #1
 800c080:	e073      	b.n	800c16a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c082:	4b3d      	ldr	r3, [pc, #244]	@ (800c178 <HAL_RCC_ClockConfig+0x1c4>)
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f003 0302 	and.w	r3, r3, #2
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d101      	bne.n	800c092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c08e:	2301      	movs	r3, #1
 800c090:	e06b      	b.n	800c16a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c092:	4b39      	ldr	r3, [pc, #228]	@ (800c178 <HAL_RCC_ClockConfig+0x1c4>)
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	f023 0203 	bic.w	r2, r3, #3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	685b      	ldr	r3, [r3, #4]
 800c09e:	4936      	ldr	r1, [pc, #216]	@ (800c178 <HAL_RCC_ClockConfig+0x1c4>)
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c0a4:	f7fd fcc0 	bl	8009a28 <HAL_GetTick>
 800c0a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c0aa:	e00a      	b.n	800c0c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c0ac:	f7fd fcbc 	bl	8009a28 <HAL_GetTick>
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	1ad3      	subs	r3, r2, r3
 800c0b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d901      	bls.n	800c0c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c0be:	2303      	movs	r3, #3
 800c0c0:	e053      	b.n	800c16a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c0c2:	4b2d      	ldr	r3, [pc, #180]	@ (800c178 <HAL_RCC_ClockConfig+0x1c4>)
 800c0c4:	685b      	ldr	r3, [r3, #4]
 800c0c6:	f003 020c 	and.w	r2, r3, #12
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	009b      	lsls	r3, r3, #2
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	d1eb      	bne.n	800c0ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c0d4:	4b27      	ldr	r3, [pc, #156]	@ (800c174 <HAL_RCC_ClockConfig+0x1c0>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	f003 0307 	and.w	r3, r3, #7
 800c0dc:	683a      	ldr	r2, [r7, #0]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d210      	bcs.n	800c104 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c0e2:	4b24      	ldr	r3, [pc, #144]	@ (800c174 <HAL_RCC_ClockConfig+0x1c0>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	f023 0207 	bic.w	r2, r3, #7
 800c0ea:	4922      	ldr	r1, [pc, #136]	@ (800c174 <HAL_RCC_ClockConfig+0x1c0>)
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	4313      	orrs	r3, r2
 800c0f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c0f2:	4b20      	ldr	r3, [pc, #128]	@ (800c174 <HAL_RCC_ClockConfig+0x1c0>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f003 0307 	and.w	r3, r3, #7
 800c0fa:	683a      	ldr	r2, [r7, #0]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d001      	beq.n	800c104 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800c100:	2301      	movs	r3, #1
 800c102:	e032      	b.n	800c16a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f003 0304 	and.w	r3, r3, #4
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d008      	beq.n	800c122 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c110:	4b19      	ldr	r3, [pc, #100]	@ (800c178 <HAL_RCC_ClockConfig+0x1c4>)
 800c112:	685b      	ldr	r3, [r3, #4]
 800c114:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	68db      	ldr	r3, [r3, #12]
 800c11c:	4916      	ldr	r1, [pc, #88]	@ (800c178 <HAL_RCC_ClockConfig+0x1c4>)
 800c11e:	4313      	orrs	r3, r2
 800c120:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f003 0308 	and.w	r3, r3, #8
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d009      	beq.n	800c142 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c12e:	4b12      	ldr	r3, [pc, #72]	@ (800c178 <HAL_RCC_ClockConfig+0x1c4>)
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	691b      	ldr	r3, [r3, #16]
 800c13a:	00db      	lsls	r3, r3, #3
 800c13c:	490e      	ldr	r1, [pc, #56]	@ (800c178 <HAL_RCC_ClockConfig+0x1c4>)
 800c13e:	4313      	orrs	r3, r2
 800c140:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c142:	f000 f821 	bl	800c188 <HAL_RCC_GetSysClockFreq>
 800c146:	4602      	mov	r2, r0
 800c148:	4b0b      	ldr	r3, [pc, #44]	@ (800c178 <HAL_RCC_ClockConfig+0x1c4>)
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	091b      	lsrs	r3, r3, #4
 800c14e:	f003 030f 	and.w	r3, r3, #15
 800c152:	490a      	ldr	r1, [pc, #40]	@ (800c17c <HAL_RCC_ClockConfig+0x1c8>)
 800c154:	5ccb      	ldrb	r3, [r1, r3]
 800c156:	fa22 f303 	lsr.w	r3, r2, r3
 800c15a:	4a09      	ldr	r2, [pc, #36]	@ (800c180 <HAL_RCC_ClockConfig+0x1cc>)
 800c15c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800c15e:	4b09      	ldr	r3, [pc, #36]	@ (800c184 <HAL_RCC_ClockConfig+0x1d0>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4618      	mov	r0, r3
 800c164:	f7fd fc1e 	bl	80099a4 <HAL_InitTick>

  return HAL_OK;
 800c168:	2300      	movs	r3, #0
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3710      	adds	r7, #16
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
 800c172:	bf00      	nop
 800c174:	40022000 	.word	0x40022000
 800c178:	40021000 	.word	0x40021000
 800c17c:	0800ec14 	.word	0x0800ec14
 800c180:	20000f74 	.word	0x20000f74
 800c184:	20000f78 	.word	0x20000f78

0800c188 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c188:	b480      	push	{r7}
 800c18a:	b087      	sub	sp, #28
 800c18c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800c18e:	2300      	movs	r3, #0
 800c190:	60fb      	str	r3, [r7, #12]
 800c192:	2300      	movs	r3, #0
 800c194:	60bb      	str	r3, [r7, #8]
 800c196:	2300      	movs	r3, #0
 800c198:	617b      	str	r3, [r7, #20]
 800c19a:	2300      	movs	r3, #0
 800c19c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800c1a2:	4b1e      	ldr	r3, [pc, #120]	@ (800c21c <HAL_RCC_GetSysClockFreq+0x94>)
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	f003 030c 	and.w	r3, r3, #12
 800c1ae:	2b04      	cmp	r3, #4
 800c1b0:	d002      	beq.n	800c1b8 <HAL_RCC_GetSysClockFreq+0x30>
 800c1b2:	2b08      	cmp	r3, #8
 800c1b4:	d003      	beq.n	800c1be <HAL_RCC_GetSysClockFreq+0x36>
 800c1b6:	e027      	b.n	800c208 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c1b8:	4b19      	ldr	r3, [pc, #100]	@ (800c220 <HAL_RCC_GetSysClockFreq+0x98>)
 800c1ba:	613b      	str	r3, [r7, #16]
      break;
 800c1bc:	e027      	b.n	800c20e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	0c9b      	lsrs	r3, r3, #18
 800c1c2:	f003 030f 	and.w	r3, r3, #15
 800c1c6:	4a17      	ldr	r2, [pc, #92]	@ (800c224 <HAL_RCC_GetSysClockFreq+0x9c>)
 800c1c8:	5cd3      	ldrb	r3, [r2, r3]
 800c1ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d010      	beq.n	800c1f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800c1d6:	4b11      	ldr	r3, [pc, #68]	@ (800c21c <HAL_RCC_GetSysClockFreq+0x94>)
 800c1d8:	685b      	ldr	r3, [r3, #4]
 800c1da:	0c5b      	lsrs	r3, r3, #17
 800c1dc:	f003 0301 	and.w	r3, r3, #1
 800c1e0:	4a11      	ldr	r2, [pc, #68]	@ (800c228 <HAL_RCC_GetSysClockFreq+0xa0>)
 800c1e2:	5cd3      	ldrb	r3, [r2, r3]
 800c1e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	4a0d      	ldr	r2, [pc, #52]	@ (800c220 <HAL_RCC_GetSysClockFreq+0x98>)
 800c1ea:	fb03 f202 	mul.w	r2, r3, r2
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1f4:	617b      	str	r3, [r7, #20]
 800c1f6:	e004      	b.n	800c202 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	4a0c      	ldr	r2, [pc, #48]	@ (800c22c <HAL_RCC_GetSysClockFreq+0xa4>)
 800c1fc:	fb02 f303 	mul.w	r3, r2, r3
 800c200:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	613b      	str	r3, [r7, #16]
      break;
 800c206:	e002      	b.n	800c20e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800c208:	4b05      	ldr	r3, [pc, #20]	@ (800c220 <HAL_RCC_GetSysClockFreq+0x98>)
 800c20a:	613b      	str	r3, [r7, #16]
      break;
 800c20c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c20e:	693b      	ldr	r3, [r7, #16]
}
 800c210:	4618      	mov	r0, r3
 800c212:	371c      	adds	r7, #28
 800c214:	46bd      	mov	sp, r7
 800c216:	bc80      	pop	{r7}
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	40021000 	.word	0x40021000
 800c220:	007a1200 	.word	0x007a1200
 800c224:	0800ec2c 	.word	0x0800ec2c
 800c228:	0800ec3c 	.word	0x0800ec3c
 800c22c:	003d0900 	.word	0x003d0900

0800c230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c230:	b480      	push	{r7}
 800c232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c234:	4b02      	ldr	r3, [pc, #8]	@ (800c240 <HAL_RCC_GetHCLKFreq+0x10>)
 800c236:	681b      	ldr	r3, [r3, #0]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bc80      	pop	{r7}
 800c23e:	4770      	bx	lr
 800c240:	20000f74 	.word	0x20000f74

0800c244 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c248:	f7ff fff2 	bl	800c230 <HAL_RCC_GetHCLKFreq>
 800c24c:	4602      	mov	r2, r0
 800c24e:	4b05      	ldr	r3, [pc, #20]	@ (800c264 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	0a1b      	lsrs	r3, r3, #8
 800c254:	f003 0307 	and.w	r3, r3, #7
 800c258:	4903      	ldr	r1, [pc, #12]	@ (800c268 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c25a:	5ccb      	ldrb	r3, [r1, r3]
 800c25c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c260:	4618      	mov	r0, r3
 800c262:	bd80      	pop	{r7, pc}
 800c264:	40021000 	.word	0x40021000
 800c268:	0800ec24 	.word	0x0800ec24

0800c26c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c270:	f7ff ffde 	bl	800c230 <HAL_RCC_GetHCLKFreq>
 800c274:	4602      	mov	r2, r0
 800c276:	4b05      	ldr	r3, [pc, #20]	@ (800c28c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	0adb      	lsrs	r3, r3, #11
 800c27c:	f003 0307 	and.w	r3, r3, #7
 800c280:	4903      	ldr	r1, [pc, #12]	@ (800c290 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c282:	5ccb      	ldrb	r3, [r1, r3]
 800c284:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c288:	4618      	mov	r0, r3
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	40021000 	.word	0x40021000
 800c290:	0800ec24 	.word	0x0800ec24

0800c294 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800c294:	b480      	push	{r7}
 800c296:	b085      	sub	sp, #20
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800c29c:	4b0a      	ldr	r3, [pc, #40]	@ (800c2c8 <RCC_Delay+0x34>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a0a      	ldr	r2, [pc, #40]	@ (800c2cc <RCC_Delay+0x38>)
 800c2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2a6:	0a5b      	lsrs	r3, r3, #9
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	fb02 f303 	mul.w	r3, r2, r3
 800c2ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800c2b0:	bf00      	nop
  }
  while (Delay --);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	1e5a      	subs	r2, r3, #1
 800c2b6:	60fa      	str	r2, [r7, #12]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d1f9      	bne.n	800c2b0 <RCC_Delay+0x1c>
}
 800c2bc:	bf00      	nop
 800c2be:	bf00      	nop
 800c2c0:	3714      	adds	r7, #20
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bc80      	pop	{r7}
 800c2c6:	4770      	bx	lr
 800c2c8:	20000f74 	.word	0x20000f74
 800c2cc:	10624dd3 	.word	0x10624dd3

0800c2d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d101      	bne.n	800c2e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	e041      	b.n	800c366 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c2e8:	b2db      	uxtb	r3, r3
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d106      	bne.n	800c2fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f7fd fa22 	bl	8009740 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2202      	movs	r2, #2
 800c300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681a      	ldr	r2, [r3, #0]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	3304      	adds	r3, #4
 800c30c:	4619      	mov	r1, r3
 800c30e:	4610      	mov	r0, r2
 800c310:	f000 fa82 	bl	800c818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2201      	movs	r2, #1
 800c318:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2201      	movs	r2, #1
 800c320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2201      	movs	r2, #1
 800c328:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2201      	movs	r2, #1
 800c330:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2201      	movs	r2, #1
 800c338:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2201      	movs	r2, #1
 800c340:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2201      	movs	r2, #1
 800c348:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2201      	movs	r2, #1
 800c350:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2201      	movs	r2, #1
 800c358:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2201      	movs	r2, #1
 800c360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c364:	2300      	movs	r3, #0
}
 800c366:	4618      	mov	r0, r3
 800c368:	3708      	adds	r7, #8
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}
	...

0800c370 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c370:	b480      	push	{r7}
 800c372:	b085      	sub	sp, #20
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c37e:	b2db      	uxtb	r3, r3
 800c380:	2b01      	cmp	r3, #1
 800c382:	d001      	beq.n	800c388 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c384:	2301      	movs	r3, #1
 800c386:	e044      	b.n	800c412 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2202      	movs	r2, #2
 800c38c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	68da      	ldr	r2, [r3, #12]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f042 0201 	orr.w	r2, r2, #1
 800c39e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	4a1d      	ldr	r2, [pc, #116]	@ (800c41c <HAL_TIM_Base_Start_IT+0xac>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d018      	beq.n	800c3dc <HAL_TIM_Base_Start_IT+0x6c>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4a1c      	ldr	r2, [pc, #112]	@ (800c420 <HAL_TIM_Base_Start_IT+0xb0>)
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	d013      	beq.n	800c3dc <HAL_TIM_Base_Start_IT+0x6c>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3bc:	d00e      	beq.n	800c3dc <HAL_TIM_Base_Start_IT+0x6c>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	4a18      	ldr	r2, [pc, #96]	@ (800c424 <HAL_TIM_Base_Start_IT+0xb4>)
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	d009      	beq.n	800c3dc <HAL_TIM_Base_Start_IT+0x6c>
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4a16      	ldr	r2, [pc, #88]	@ (800c428 <HAL_TIM_Base_Start_IT+0xb8>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d004      	beq.n	800c3dc <HAL_TIM_Base_Start_IT+0x6c>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	4a15      	ldr	r2, [pc, #84]	@ (800c42c <HAL_TIM_Base_Start_IT+0xbc>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d111      	bne.n	800c400 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	689b      	ldr	r3, [r3, #8]
 800c3e2:	f003 0307 	and.w	r3, r3, #7
 800c3e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2b06      	cmp	r3, #6
 800c3ec:	d010      	beq.n	800c410 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f042 0201 	orr.w	r2, r2, #1
 800c3fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c3fe:	e007      	b.n	800c410 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f042 0201 	orr.w	r2, r2, #1
 800c40e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	3714      	adds	r7, #20
 800c416:	46bd      	mov	sp, r7
 800c418:	bc80      	pop	{r7}
 800c41a:	4770      	bx	lr
 800c41c:	40012c00 	.word	0x40012c00
 800c420:	40013400 	.word	0x40013400
 800c424:	40000400 	.word	0x40000400
 800c428:	40000800 	.word	0x40000800
 800c42c:	40000c00 	.word	0x40000c00

0800c430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b082      	sub	sp, #8
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	691b      	ldr	r3, [r3, #16]
 800c43e:	f003 0302 	and.w	r3, r3, #2
 800c442:	2b02      	cmp	r3, #2
 800c444:	d122      	bne.n	800c48c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	68db      	ldr	r3, [r3, #12]
 800c44c:	f003 0302 	and.w	r3, r3, #2
 800c450:	2b02      	cmp	r3, #2
 800c452:	d11b      	bne.n	800c48c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f06f 0202 	mvn.w	r2, #2
 800c45c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2201      	movs	r2, #1
 800c462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	699b      	ldr	r3, [r3, #24]
 800c46a:	f003 0303 	and.w	r3, r3, #3
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d003      	beq.n	800c47a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 f9b4 	bl	800c7e0 <HAL_TIM_IC_CaptureCallback>
 800c478:	e005      	b.n	800c486 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 f9a7 	bl	800c7ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 f9b6 	bl	800c7f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2200      	movs	r2, #0
 800c48a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	691b      	ldr	r3, [r3, #16]
 800c492:	f003 0304 	and.w	r3, r3, #4
 800c496:	2b04      	cmp	r3, #4
 800c498:	d122      	bne.n	800c4e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	68db      	ldr	r3, [r3, #12]
 800c4a0:	f003 0304 	and.w	r3, r3, #4
 800c4a4:	2b04      	cmp	r3, #4
 800c4a6:	d11b      	bne.n	800c4e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f06f 0204 	mvn.w	r2, #4
 800c4b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2202      	movs	r2, #2
 800c4b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	699b      	ldr	r3, [r3, #24]
 800c4be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d003      	beq.n	800c4ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 f98a 	bl	800c7e0 <HAL_TIM_IC_CaptureCallback>
 800c4cc:	e005      	b.n	800c4da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f000 f97d 	bl	800c7ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f000 f98c 	bl	800c7f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	691b      	ldr	r3, [r3, #16]
 800c4e6:	f003 0308 	and.w	r3, r3, #8
 800c4ea:	2b08      	cmp	r3, #8
 800c4ec:	d122      	bne.n	800c534 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	f003 0308 	and.w	r3, r3, #8
 800c4f8:	2b08      	cmp	r3, #8
 800c4fa:	d11b      	bne.n	800c534 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f06f 0208 	mvn.w	r2, #8
 800c504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2204      	movs	r2, #4
 800c50a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	69db      	ldr	r3, [r3, #28]
 800c512:	f003 0303 	and.w	r3, r3, #3
 800c516:	2b00      	cmp	r3, #0
 800c518:	d003      	beq.n	800c522 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 f960 	bl	800c7e0 <HAL_TIM_IC_CaptureCallback>
 800c520:	e005      	b.n	800c52e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 f953 	bl	800c7ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f000 f962 	bl	800c7f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	2200      	movs	r2, #0
 800c532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	691b      	ldr	r3, [r3, #16]
 800c53a:	f003 0310 	and.w	r3, r3, #16
 800c53e:	2b10      	cmp	r3, #16
 800c540:	d122      	bne.n	800c588 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	f003 0310 	and.w	r3, r3, #16
 800c54c:	2b10      	cmp	r3, #16
 800c54e:	d11b      	bne.n	800c588 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f06f 0210 	mvn.w	r2, #16
 800c558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2208      	movs	r2, #8
 800c55e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	69db      	ldr	r3, [r3, #28]
 800c566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d003      	beq.n	800c576 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 f936 	bl	800c7e0 <HAL_TIM_IC_CaptureCallback>
 800c574:	e005      	b.n	800c582 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f000 f929 	bl	800c7ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 f938 	bl	800c7f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2200      	movs	r2, #0
 800c586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	691b      	ldr	r3, [r3, #16]
 800c58e:	f003 0301 	and.w	r3, r3, #1
 800c592:	2b01      	cmp	r3, #1
 800c594:	d10e      	bne.n	800c5b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	f003 0301 	and.w	r3, r3, #1
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d107      	bne.n	800c5b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f06f 0201 	mvn.w	r2, #1
 800c5ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f7fc fd5e 	bl	8009070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	691b      	ldr	r3, [r3, #16]
 800c5ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5be:	2b80      	cmp	r3, #128	@ 0x80
 800c5c0:	d10e      	bne.n	800c5e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	68db      	ldr	r3, [r3, #12]
 800c5c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5cc:	2b80      	cmp	r3, #128	@ 0x80
 800c5ce:	d107      	bne.n	800c5e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800c5d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 faa1 	bl	800cb22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5ea:	2b40      	cmp	r3, #64	@ 0x40
 800c5ec:	d10e      	bne.n	800c60c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	68db      	ldr	r3, [r3, #12]
 800c5f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5f8:	2b40      	cmp	r3, #64	@ 0x40
 800c5fa:	d107      	bne.n	800c60c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 f8fc 	bl	800c804 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	691b      	ldr	r3, [r3, #16]
 800c612:	f003 0320 	and.w	r3, r3, #32
 800c616:	2b20      	cmp	r3, #32
 800c618:	d10e      	bne.n	800c638 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	68db      	ldr	r3, [r3, #12]
 800c620:	f003 0320 	and.w	r3, r3, #32
 800c624:	2b20      	cmp	r3, #32
 800c626:	d107      	bne.n	800c638 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f06f 0220 	mvn.w	r2, #32
 800c630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 fa6c 	bl	800cb10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c638:	bf00      	nop
 800c63a:	3708      	adds	r7, #8
 800c63c:	46bd      	mov	sp, r7
 800c63e:	bd80      	pop	{r7, pc}

0800c640 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b084      	sub	sp, #16
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c64a:	2300      	movs	r3, #0
 800c64c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c654:	2b01      	cmp	r3, #1
 800c656:	d101      	bne.n	800c65c <HAL_TIM_ConfigClockSource+0x1c>
 800c658:	2302      	movs	r3, #2
 800c65a:	e0b4      	b.n	800c7c6 <HAL_TIM_ConfigClockSource+0x186>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	2201      	movs	r2, #1
 800c660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2202      	movs	r2, #2
 800c668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	689b      	ldr	r3, [r3, #8]
 800c672:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c67a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c682:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	68ba      	ldr	r2, [r7, #8]
 800c68a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c694:	d03e      	beq.n	800c714 <HAL_TIM_ConfigClockSource+0xd4>
 800c696:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c69a:	f200 8087 	bhi.w	800c7ac <HAL_TIM_ConfigClockSource+0x16c>
 800c69e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6a2:	f000 8086 	beq.w	800c7b2 <HAL_TIM_ConfigClockSource+0x172>
 800c6a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6aa:	d87f      	bhi.n	800c7ac <HAL_TIM_ConfigClockSource+0x16c>
 800c6ac:	2b70      	cmp	r3, #112	@ 0x70
 800c6ae:	d01a      	beq.n	800c6e6 <HAL_TIM_ConfigClockSource+0xa6>
 800c6b0:	2b70      	cmp	r3, #112	@ 0x70
 800c6b2:	d87b      	bhi.n	800c7ac <HAL_TIM_ConfigClockSource+0x16c>
 800c6b4:	2b60      	cmp	r3, #96	@ 0x60
 800c6b6:	d050      	beq.n	800c75a <HAL_TIM_ConfigClockSource+0x11a>
 800c6b8:	2b60      	cmp	r3, #96	@ 0x60
 800c6ba:	d877      	bhi.n	800c7ac <HAL_TIM_ConfigClockSource+0x16c>
 800c6bc:	2b50      	cmp	r3, #80	@ 0x50
 800c6be:	d03c      	beq.n	800c73a <HAL_TIM_ConfigClockSource+0xfa>
 800c6c0:	2b50      	cmp	r3, #80	@ 0x50
 800c6c2:	d873      	bhi.n	800c7ac <HAL_TIM_ConfigClockSource+0x16c>
 800c6c4:	2b40      	cmp	r3, #64	@ 0x40
 800c6c6:	d058      	beq.n	800c77a <HAL_TIM_ConfigClockSource+0x13a>
 800c6c8:	2b40      	cmp	r3, #64	@ 0x40
 800c6ca:	d86f      	bhi.n	800c7ac <HAL_TIM_ConfigClockSource+0x16c>
 800c6cc:	2b30      	cmp	r3, #48	@ 0x30
 800c6ce:	d064      	beq.n	800c79a <HAL_TIM_ConfigClockSource+0x15a>
 800c6d0:	2b30      	cmp	r3, #48	@ 0x30
 800c6d2:	d86b      	bhi.n	800c7ac <HAL_TIM_ConfigClockSource+0x16c>
 800c6d4:	2b20      	cmp	r3, #32
 800c6d6:	d060      	beq.n	800c79a <HAL_TIM_ConfigClockSource+0x15a>
 800c6d8:	2b20      	cmp	r3, #32
 800c6da:	d867      	bhi.n	800c7ac <HAL_TIM_ConfigClockSource+0x16c>
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d05c      	beq.n	800c79a <HAL_TIM_ConfigClockSource+0x15a>
 800c6e0:	2b10      	cmp	r3, #16
 800c6e2:	d05a      	beq.n	800c79a <HAL_TIM_ConfigClockSource+0x15a>
 800c6e4:	e062      	b.n	800c7ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c6f6:	f000 f980 	bl	800c9fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	689b      	ldr	r3, [r3, #8]
 800c700:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c702:	68bb      	ldr	r3, [r7, #8]
 800c704:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c708:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	68ba      	ldr	r2, [r7, #8]
 800c710:	609a      	str	r2, [r3, #8]
      break;
 800c712:	e04f      	b.n	800c7b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c724:	f000 f969 	bl	800c9fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	689a      	ldr	r2, [r3, #8]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c736:	609a      	str	r2, [r3, #8]
      break;
 800c738:	e03c      	b.n	800c7b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c746:	461a      	mov	r2, r3
 800c748:	f000 f8e0 	bl	800c90c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	2150      	movs	r1, #80	@ 0x50
 800c752:	4618      	mov	r0, r3
 800c754:	f000 f937 	bl	800c9c6 <TIM_ITRx_SetConfig>
      break;
 800c758:	e02c      	b.n	800c7b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c766:	461a      	mov	r2, r3
 800c768:	f000 f8fe 	bl	800c968 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2160      	movs	r1, #96	@ 0x60
 800c772:	4618      	mov	r0, r3
 800c774:	f000 f927 	bl	800c9c6 <TIM_ITRx_SetConfig>
      break;
 800c778:	e01c      	b.n	800c7b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c782:	683b      	ldr	r3, [r7, #0]
 800c784:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c786:	461a      	mov	r2, r3
 800c788:	f000 f8c0 	bl	800c90c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2140      	movs	r1, #64	@ 0x40
 800c792:	4618      	mov	r0, r3
 800c794:	f000 f917 	bl	800c9c6 <TIM_ITRx_SetConfig>
      break;
 800c798:	e00c      	b.n	800c7b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681a      	ldr	r2, [r3, #0]
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	4610      	mov	r0, r2
 800c7a6:	f000 f90e 	bl	800c9c6 <TIM_ITRx_SetConfig>
      break;
 800c7aa:	e003      	b.n	800c7b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	73fb      	strb	r3, [r7, #15]
      break;
 800c7b0:	e000      	b.n	800c7b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c7b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2200      	movs	r2, #0
 800c7c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3710      	adds	r7, #16
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}

0800c7ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c7ce:	b480      	push	{r7}
 800c7d0:	b083      	sub	sp, #12
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c7d6:	bf00      	nop
 800c7d8:	370c      	adds	r7, #12
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bc80      	pop	{r7}
 800c7de:	4770      	bx	lr

0800c7e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b083      	sub	sp, #12
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c7e8:	bf00      	nop
 800c7ea:	370c      	adds	r7, #12
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bc80      	pop	{r7}
 800c7f0:	4770      	bx	lr

0800c7f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c7f2:	b480      	push	{r7}
 800c7f4:	b083      	sub	sp, #12
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c7fa:	bf00      	nop
 800c7fc:	370c      	adds	r7, #12
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bc80      	pop	{r7}
 800c802:	4770      	bx	lr

0800c804 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c80c:	bf00      	nop
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	bc80      	pop	{r7}
 800c814:	4770      	bx	lr
	...

0800c818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c818:	b480      	push	{r7}
 800c81a:	b085      	sub	sp, #20
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
 800c820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	4a33      	ldr	r2, [pc, #204]	@ (800c8f8 <TIM_Base_SetConfig+0xe0>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d013      	beq.n	800c858 <TIM_Base_SetConfig+0x40>
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	4a32      	ldr	r2, [pc, #200]	@ (800c8fc <TIM_Base_SetConfig+0xe4>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d00f      	beq.n	800c858 <TIM_Base_SetConfig+0x40>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c83e:	d00b      	beq.n	800c858 <TIM_Base_SetConfig+0x40>
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	4a2f      	ldr	r2, [pc, #188]	@ (800c900 <TIM_Base_SetConfig+0xe8>)
 800c844:	4293      	cmp	r3, r2
 800c846:	d007      	beq.n	800c858 <TIM_Base_SetConfig+0x40>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	4a2e      	ldr	r2, [pc, #184]	@ (800c904 <TIM_Base_SetConfig+0xec>)
 800c84c:	4293      	cmp	r3, r2
 800c84e:	d003      	beq.n	800c858 <TIM_Base_SetConfig+0x40>
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	4a2d      	ldr	r2, [pc, #180]	@ (800c908 <TIM_Base_SetConfig+0xf0>)
 800c854:	4293      	cmp	r3, r2
 800c856:	d108      	bne.n	800c86a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c85e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c860:	683b      	ldr	r3, [r7, #0]
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	68fa      	ldr	r2, [r7, #12]
 800c866:	4313      	orrs	r3, r2
 800c868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	4a22      	ldr	r2, [pc, #136]	@ (800c8f8 <TIM_Base_SetConfig+0xe0>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d013      	beq.n	800c89a <TIM_Base_SetConfig+0x82>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	4a21      	ldr	r2, [pc, #132]	@ (800c8fc <TIM_Base_SetConfig+0xe4>)
 800c876:	4293      	cmp	r3, r2
 800c878:	d00f      	beq.n	800c89a <TIM_Base_SetConfig+0x82>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c880:	d00b      	beq.n	800c89a <TIM_Base_SetConfig+0x82>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	4a1e      	ldr	r2, [pc, #120]	@ (800c900 <TIM_Base_SetConfig+0xe8>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d007      	beq.n	800c89a <TIM_Base_SetConfig+0x82>
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	4a1d      	ldr	r2, [pc, #116]	@ (800c904 <TIM_Base_SetConfig+0xec>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d003      	beq.n	800c89a <TIM_Base_SetConfig+0x82>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	4a1c      	ldr	r2, [pc, #112]	@ (800c908 <TIM_Base_SetConfig+0xf0>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d108      	bne.n	800c8ac <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c8a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	68db      	ldr	r3, [r3, #12]
 800c8a6:	68fa      	ldr	r2, [r7, #12]
 800c8a8:	4313      	orrs	r3, r2
 800c8aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	695b      	ldr	r3, [r3, #20]
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	68fa      	ldr	r2, [r7, #12]
 800c8be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	689a      	ldr	r2, [r3, #8]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	681a      	ldr	r2, [r3, #0]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4a09      	ldr	r2, [pc, #36]	@ (800c8f8 <TIM_Base_SetConfig+0xe0>)
 800c8d4:	4293      	cmp	r3, r2
 800c8d6:	d003      	beq.n	800c8e0 <TIM_Base_SetConfig+0xc8>
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	4a08      	ldr	r2, [pc, #32]	@ (800c8fc <TIM_Base_SetConfig+0xe4>)
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d103      	bne.n	800c8e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	691a      	ldr	r2, [r3, #16]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	615a      	str	r2, [r3, #20]
}
 800c8ee:	bf00      	nop
 800c8f0:	3714      	adds	r7, #20
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bc80      	pop	{r7}
 800c8f6:	4770      	bx	lr
 800c8f8:	40012c00 	.word	0x40012c00
 800c8fc:	40013400 	.word	0x40013400
 800c900:	40000400 	.word	0x40000400
 800c904:	40000800 	.word	0x40000800
 800c908:	40000c00 	.word	0x40000c00

0800c90c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c90c:	b480      	push	{r7}
 800c90e:	b087      	sub	sp, #28
 800c910:	af00      	add	r7, sp, #0
 800c912:	60f8      	str	r0, [r7, #12]
 800c914:	60b9      	str	r1, [r7, #8]
 800c916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	6a1b      	ldr	r3, [r3, #32]
 800c91c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6a1b      	ldr	r3, [r3, #32]
 800c922:	f023 0201 	bic.w	r2, r3, #1
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	699b      	ldr	r3, [r3, #24]
 800c92e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	011b      	lsls	r3, r3, #4
 800c93c:	693a      	ldr	r2, [r7, #16]
 800c93e:	4313      	orrs	r3, r2
 800c940:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	f023 030a 	bic.w	r3, r3, #10
 800c948:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c94a:	697a      	ldr	r2, [r7, #20]
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	4313      	orrs	r3, r2
 800c950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	693a      	ldr	r2, [r7, #16]
 800c956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	697a      	ldr	r2, [r7, #20]
 800c95c:	621a      	str	r2, [r3, #32]
}
 800c95e:	bf00      	nop
 800c960:	371c      	adds	r7, #28
 800c962:	46bd      	mov	sp, r7
 800c964:	bc80      	pop	{r7}
 800c966:	4770      	bx	lr

0800c968 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c968:	b480      	push	{r7}
 800c96a:	b087      	sub	sp, #28
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	60f8      	str	r0, [r7, #12]
 800c970:	60b9      	str	r1, [r7, #8]
 800c972:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6a1b      	ldr	r3, [r3, #32]
 800c978:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	6a1b      	ldr	r3, [r3, #32]
 800c97e:	f023 0210 	bic.w	r2, r3, #16
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	699b      	ldr	r3, [r3, #24]
 800c98a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c992:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	031b      	lsls	r3, r3, #12
 800c998:	693a      	ldr	r2, [r7, #16]
 800c99a:	4313      	orrs	r3, r2
 800c99c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c9a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	011b      	lsls	r3, r3, #4
 800c9aa:	697a      	ldr	r2, [r7, #20]
 800c9ac:	4313      	orrs	r3, r2
 800c9ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	693a      	ldr	r2, [r7, #16]
 800c9b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	697a      	ldr	r2, [r7, #20]
 800c9ba:	621a      	str	r2, [r3, #32]
}
 800c9bc:	bf00      	nop
 800c9be:	371c      	adds	r7, #28
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bc80      	pop	{r7}
 800c9c4:	4770      	bx	lr

0800c9c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c9c6:	b480      	push	{r7}
 800c9c8:	b085      	sub	sp, #20
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
 800c9ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	689b      	ldr	r3, [r3, #8]
 800c9d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c9de:	683a      	ldr	r2, [r7, #0]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	f043 0307 	orr.w	r3, r3, #7
 800c9e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	68fa      	ldr	r2, [r7, #12]
 800c9ee:	609a      	str	r2, [r3, #8]
}
 800c9f0:	bf00      	nop
 800c9f2:	3714      	adds	r7, #20
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bc80      	pop	{r7}
 800c9f8:	4770      	bx	lr

0800c9fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c9fa:	b480      	push	{r7}
 800c9fc:	b087      	sub	sp, #28
 800c9fe:	af00      	add	r7, sp, #0
 800ca00:	60f8      	str	r0, [r7, #12]
 800ca02:	60b9      	str	r1, [r7, #8]
 800ca04:	607a      	str	r2, [r7, #4]
 800ca06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	689b      	ldr	r3, [r3, #8]
 800ca0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ca14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	021a      	lsls	r2, r3, #8
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	431a      	orrs	r2, r3
 800ca1e:	68bb      	ldr	r3, [r7, #8]
 800ca20:	4313      	orrs	r3, r2
 800ca22:	697a      	ldr	r2, [r7, #20]
 800ca24:	4313      	orrs	r3, r2
 800ca26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	697a      	ldr	r2, [r7, #20]
 800ca2c:	609a      	str	r2, [r3, #8]
}
 800ca2e:	bf00      	nop
 800ca30:	371c      	adds	r7, #28
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bc80      	pop	{r7}
 800ca36:	4770      	bx	lr

0800ca38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b085      	sub	sp, #20
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d101      	bne.n	800ca50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca4c:	2302      	movs	r3, #2
 800ca4e:	e050      	b.n	800caf2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2201      	movs	r2, #1
 800ca54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2202      	movs	r2, #2
 800ca5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	685b      	ldr	r3, [r3, #4]
 800ca66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	689b      	ldr	r3, [r3, #8]
 800ca6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	68fa      	ldr	r2, [r7, #12]
 800ca7e:	4313      	orrs	r3, r2
 800ca80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	68fa      	ldr	r2, [r7, #12]
 800ca88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	4a1b      	ldr	r2, [pc, #108]	@ (800cafc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800ca90:	4293      	cmp	r3, r2
 800ca92:	d018      	beq.n	800cac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a19      	ldr	r2, [pc, #100]	@ (800cb00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d013      	beq.n	800cac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800caa6:	d00e      	beq.n	800cac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4a15      	ldr	r2, [pc, #84]	@ (800cb04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d009      	beq.n	800cac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4a14      	ldr	r2, [pc, #80]	@ (800cb08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	d004      	beq.n	800cac6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a12      	ldr	r2, [pc, #72]	@ (800cb0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d10c      	bne.n	800cae0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cac6:	68bb      	ldr	r3, [r7, #8]
 800cac8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cacc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	68ba      	ldr	r2, [r7, #8]
 800cad4:	4313      	orrs	r3, r2
 800cad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	68ba      	ldr	r2, [r7, #8]
 800cade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2201      	movs	r2, #1
 800cae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2200      	movs	r2, #0
 800caec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800caf0:	2300      	movs	r3, #0
}
 800caf2:	4618      	mov	r0, r3
 800caf4:	3714      	adds	r7, #20
 800caf6:	46bd      	mov	sp, r7
 800caf8:	bc80      	pop	{r7}
 800cafa:	4770      	bx	lr
 800cafc:	40012c00 	.word	0x40012c00
 800cb00:	40013400 	.word	0x40013400
 800cb04:	40000400 	.word	0x40000400
 800cb08:	40000800 	.word	0x40000800
 800cb0c:	40000c00 	.word	0x40000c00

0800cb10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb18:	bf00      	nop
 800cb1a:	370c      	adds	r7, #12
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bc80      	pop	{r7}
 800cb20:	4770      	bx	lr

0800cb22 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb22:	b480      	push	{r7}
 800cb24:	b083      	sub	sp, #12
 800cb26:	af00      	add	r7, sp, #0
 800cb28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb2a:	bf00      	nop
 800cb2c:	370c      	adds	r7, #12
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bc80      	pop	{r7}
 800cb32:	4770      	bx	lr

0800cb34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b082      	sub	sp, #8
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d101      	bne.n	800cb46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb42:	2301      	movs	r3, #1
 800cb44:	e042      	b.n	800cbcc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d106      	bne.n	800cb60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	2200      	movs	r2, #0
 800cb56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f7fc fe16 	bl	800978c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2224      	movs	r2, #36	@ 0x24
 800cb64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	68da      	ldr	r2, [r3, #12]
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cb76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 fcb5 	bl	800d4e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	691a      	ldr	r2, [r3, #16]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cb8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	695a      	ldr	r2, [r3, #20]
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cb9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	68da      	ldr	r2, [r3, #12]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cbac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2220      	movs	r2, #32
 800cbb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2220      	movs	r2, #32
 800cbc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cbca:	2300      	movs	r3, #0
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3708      	adds	r7, #8
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b085      	sub	sp, #20
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	60f8      	str	r0, [r7, #12]
 800cbdc:	60b9      	str	r1, [r7, #8]
 800cbde:	4613      	mov	r3, r2
 800cbe0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	2b20      	cmp	r3, #32
 800cbec:	d121      	bne.n	800cc32 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d002      	beq.n	800cbfa <HAL_UART_Transmit_IT+0x26>
 800cbf4:	88fb      	ldrh	r3, [r7, #6]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d101      	bne.n	800cbfe <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	e01a      	b.n	800cc34 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	68ba      	ldr	r2, [r7, #8]
 800cc02:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	88fa      	ldrh	r2, [r7, #6]
 800cc08:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	88fa      	ldrh	r2, [r7, #6]
 800cc0e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2200      	movs	r2, #0
 800cc14:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	2221      	movs	r2, #33	@ 0x21
 800cc1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	68da      	ldr	r2, [r3, #12]
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800cc2c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	e000      	b.n	800cc34 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800cc32:	2302      	movs	r3, #2
  }
}
 800cc34:	4618      	mov	r0, r3
 800cc36:	3714      	adds	r7, #20
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	bc80      	pop	{r7}
 800cc3c:	4770      	bx	lr
	...

0800cc40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b0ba      	sub	sp, #232	@ 0xe8
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	68db      	ldr	r3, [r3, #12]
 800cc58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	695b      	ldr	r3, [r3, #20]
 800cc62:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800cc66:	2300      	movs	r3, #0
 800cc68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800cc72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc76:	f003 030f 	and.w	r3, r3, #15
 800cc7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800cc7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d10f      	bne.n	800cca6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cc86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cc8a:	f003 0320 	and.w	r3, r3, #32
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d009      	beq.n	800cca6 <HAL_UART_IRQHandler+0x66>
 800cc92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cc96:	f003 0320 	and.w	r3, r3, #32
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d003      	beq.n	800cca6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800cc9e:	6878      	ldr	r0, [r7, #4]
 800cca0:	f000 fb63 	bl	800d36a <UART_Receive_IT>
      return;
 800cca4:	e25b      	b.n	800d15e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800cca6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	f000 80de 	beq.w	800ce6c <HAL_UART_IRQHandler+0x22c>
 800ccb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ccb4:	f003 0301 	and.w	r3, r3, #1
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d106      	bne.n	800ccca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ccbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccc0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	f000 80d1 	beq.w	800ce6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ccca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccce:	f003 0301 	and.w	r3, r3, #1
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d00b      	beq.n	800ccee <HAL_UART_IRQHandler+0xae>
 800ccd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ccda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d005      	beq.n	800ccee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cce6:	f043 0201 	orr.w	r2, r3, #1
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ccee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ccf2:	f003 0304 	and.w	r3, r3, #4
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00b      	beq.n	800cd12 <HAL_UART_IRQHandler+0xd2>
 800ccfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ccfe:	f003 0301 	and.w	r3, r3, #1
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d005      	beq.n	800cd12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd0a:	f043 0202 	orr.w	r2, r3, #2
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800cd12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd16:	f003 0302 	and.w	r3, r3, #2
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d00b      	beq.n	800cd36 <HAL_UART_IRQHandler+0xf6>
 800cd1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd22:	f003 0301 	and.w	r3, r3, #1
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d005      	beq.n	800cd36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd2e:	f043 0204 	orr.w	r2, r3, #4
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800cd36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd3a:	f003 0308 	and.w	r3, r3, #8
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d011      	beq.n	800cd66 <HAL_UART_IRQHandler+0x126>
 800cd42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd46:	f003 0320 	and.w	r3, r3, #32
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d105      	bne.n	800cd5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800cd4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800cd52:	f003 0301 	and.w	r3, r3, #1
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d005      	beq.n	800cd66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd5e:	f043 0208 	orr.w	r2, r3, #8
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	f000 81f2 	beq.w	800d154 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800cd70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800cd74:	f003 0320 	and.w	r3, r3, #32
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d008      	beq.n	800cd8e <HAL_UART_IRQHandler+0x14e>
 800cd7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800cd80:	f003 0320 	and.w	r3, r3, #32
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d002      	beq.n	800cd8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f000 faee 	bl	800d36a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	695b      	ldr	r3, [r3, #20]
 800cd94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	bf14      	ite	ne
 800cd9c:	2301      	movne	r3, #1
 800cd9e:	2300      	moveq	r3, #0
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cdaa:	f003 0308 	and.w	r3, r3, #8
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d103      	bne.n	800cdba <HAL_UART_IRQHandler+0x17a>
 800cdb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d04f      	beq.n	800ce5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 f9f8 	bl	800d1b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	695b      	ldr	r3, [r3, #20]
 800cdc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d041      	beq.n	800ce52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	3314      	adds	r3, #20
 800cdd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cddc:	e853 3f00 	ldrex	r3, [r3]
 800cde0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800cde4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800cde8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cdec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	3314      	adds	r3, #20
 800cdf6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800cdfa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800cdfe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800ce06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800ce0a:	e841 2300 	strex	r3, r2, [r1]
 800ce0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ce12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d1d9      	bne.n	800cdce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d013      	beq.n	800ce4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce26:	4a7e      	ldr	r2, [pc, #504]	@ (800d020 <HAL_UART_IRQHandler+0x3e0>)
 800ce28:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7fd f86c 	bl	8009f0c <HAL_DMA_Abort_IT>
 800ce34:	4603      	mov	r3, r0
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d016      	beq.n	800ce68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ce3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce40:	687a      	ldr	r2, [r7, #4]
 800ce42:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ce44:	4610      	mov	r0, r2
 800ce46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce48:	e00e      	b.n	800ce68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 f99c 	bl	800d188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce50:	e00a      	b.n	800ce68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ce52:	6878      	ldr	r0, [r7, #4]
 800ce54:	f000 f998 	bl	800d188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce58:	e006      	b.n	800ce68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 f994 	bl	800d188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	2200      	movs	r2, #0
 800ce64:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800ce66:	e175      	b.n	800d154 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ce68:	bf00      	nop
    return;
 800ce6a:	e173      	b.n	800d154 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	f040 814f 	bne.w	800d114 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ce76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ce7a:	f003 0310 	and.w	r3, r3, #16
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	f000 8148 	beq.w	800d114 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800ce84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ce88:	f003 0310 	and.w	r3, r3, #16
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	f000 8141 	beq.w	800d114 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ce92:	2300      	movs	r3, #0
 800ce94:	60bb      	str	r3, [r7, #8]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	60bb      	str	r3, [r7, #8]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	60bb      	str	r3, [r7, #8]
 800cea6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	695b      	ldr	r3, [r3, #20]
 800ceae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	f000 80b6 	beq.w	800d024 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	685b      	ldr	r3, [r3, #4]
 800cec0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800cec4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f000 8145 	beq.w	800d158 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ced2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ced6:	429a      	cmp	r2, r3
 800ced8:	f080 813e 	bcs.w	800d158 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800cee2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cee8:	699b      	ldr	r3, [r3, #24]
 800ceea:	2b20      	cmp	r3, #32
 800ceec:	f000 8088 	beq.w	800d000 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	330c      	adds	r3, #12
 800cef6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cefa:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cefe:	e853 3f00 	ldrex	r3, [r3]
 800cf02:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800cf06:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800cf0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800cf0e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	330c      	adds	r3, #12
 800cf18:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800cf1c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800cf20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf24:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800cf28:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800cf2c:	e841 2300 	strex	r3, r2, [r1]
 800cf30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800cf34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d1d9      	bne.n	800cef0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	3314      	adds	r3, #20
 800cf42:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800cf46:	e853 3f00 	ldrex	r3, [r3]
 800cf4a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800cf4c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cf4e:	f023 0301 	bic.w	r3, r3, #1
 800cf52:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	3314      	adds	r3, #20
 800cf5c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800cf60:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800cf64:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf66:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800cf68:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800cf6c:	e841 2300 	strex	r3, r2, [r1]
 800cf70:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800cf72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d1e1      	bne.n	800cf3c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	3314      	adds	r3, #20
 800cf7e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf80:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf82:	e853 3f00 	ldrex	r3, [r3]
 800cf86:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800cf88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cf8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf8e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	3314      	adds	r3, #20
 800cf98:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800cf9c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800cf9e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfa0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cfa2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800cfa4:	e841 2300 	strex	r3, r2, [r1]
 800cfa8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800cfaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d1e3      	bne.n	800cf78 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2220      	movs	r2, #32
 800cfb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	330c      	adds	r3, #12
 800cfc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cfc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cfc8:	e853 3f00 	ldrex	r3, [r3]
 800cfcc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800cfce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cfd0:	f023 0310 	bic.w	r3, r3, #16
 800cfd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	330c      	adds	r3, #12
 800cfde:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800cfe2:	65ba      	str	r2, [r7, #88]	@ 0x58
 800cfe4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfe6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cfe8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cfea:	e841 2300 	strex	r3, r2, [r1]
 800cfee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cff0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cff2:	2b00      	cmp	r3, #0
 800cff4:	d1e3      	bne.n	800cfbe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7fc ff4b 	bl	8009e96 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2202      	movs	r2, #2
 800d004:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d00e:	b29b      	uxth	r3, r3
 800d010:	1ad3      	subs	r3, r2, r3
 800d012:	b29b      	uxth	r3, r3
 800d014:	4619      	mov	r1, r3
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f000 f8bf 	bl	800d19a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d01c:	e09c      	b.n	800d158 <HAL_UART_IRQHandler+0x518>
 800d01e:	bf00      	nop
 800d020:	0800d275 	.word	0x0800d275
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d02c:	b29b      	uxth	r3, r3
 800d02e:	1ad3      	subs	r3, r2, r3
 800d030:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d038:	b29b      	uxth	r3, r3
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	f000 808e 	beq.w	800d15c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d040:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d044:	2b00      	cmp	r3, #0
 800d046:	f000 8089 	beq.w	800d15c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	330c      	adds	r3, #12
 800d050:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d054:	e853 3f00 	ldrex	r3, [r3]
 800d058:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d05a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d05c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d060:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	330c      	adds	r3, #12
 800d06a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800d06e:	647a      	str	r2, [r7, #68]	@ 0x44
 800d070:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d072:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d074:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d076:	e841 2300 	strex	r3, r2, [r1]
 800d07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d07c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d1e3      	bne.n	800d04a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	3314      	adds	r3, #20
 800d088:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d08c:	e853 3f00 	ldrex	r3, [r3]
 800d090:	623b      	str	r3, [r7, #32]
   return(result);
 800d092:	6a3b      	ldr	r3, [r7, #32]
 800d094:	f023 0301 	bic.w	r3, r3, #1
 800d098:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	3314      	adds	r3, #20
 800d0a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800d0a6:	633a      	str	r2, [r7, #48]	@ 0x30
 800d0a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d0ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d0ae:	e841 2300 	strex	r3, r2, [r1]
 800d0b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d1e3      	bne.n	800d082 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2220      	movs	r2, #32
 800d0be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	330c      	adds	r3, #12
 800d0ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	e853 3f00 	ldrex	r3, [r3]
 800d0d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f023 0310 	bic.w	r3, r3, #16
 800d0de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	330c      	adds	r3, #12
 800d0e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800d0ec:	61fa      	str	r2, [r7, #28]
 800d0ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0f0:	69b9      	ldr	r1, [r7, #24]
 800d0f2:	69fa      	ldr	r2, [r7, #28]
 800d0f4:	e841 2300 	strex	r3, r2, [r1]
 800d0f8:	617b      	str	r3, [r7, #20]
   return(result);
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d1e3      	bne.n	800d0c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2202      	movs	r2, #2
 800d104:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d106:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800d10a:	4619      	mov	r1, r3
 800d10c:	6878      	ldr	r0, [r7, #4]
 800d10e:	f000 f844 	bl	800d19a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d112:	e023      	b.n	800d15c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d009      	beq.n	800d134 <HAL_UART_IRQHandler+0x4f4>
 800d120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d003      	beq.n	800d134 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f000 f8b5 	bl	800d29c <UART_Transmit_IT>
    return;
 800d132:	e014      	b.n	800d15e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800d138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d00e      	beq.n	800d15e <HAL_UART_IRQHandler+0x51e>
 800d140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800d144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d008      	beq.n	800d15e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 f8f4 	bl	800d33a <UART_EndTransmit_IT>
    return;
 800d152:	e004      	b.n	800d15e <HAL_UART_IRQHandler+0x51e>
    return;
 800d154:	bf00      	nop
 800d156:	e002      	b.n	800d15e <HAL_UART_IRQHandler+0x51e>
      return;
 800d158:	bf00      	nop
 800d15a:	e000      	b.n	800d15e <HAL_UART_IRQHandler+0x51e>
      return;
 800d15c:	bf00      	nop
  }
}
 800d15e:	37e8      	adds	r7, #232	@ 0xe8
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d164:	b480      	push	{r7}
 800d166:	b083      	sub	sp, #12
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d16c:	bf00      	nop
 800d16e:	370c      	adds	r7, #12
 800d170:	46bd      	mov	sp, r7
 800d172:	bc80      	pop	{r7}
 800d174:	4770      	bx	lr

0800d176 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d176:	b480      	push	{r7}
 800d178:	b083      	sub	sp, #12
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d17e:	bf00      	nop
 800d180:	370c      	adds	r7, #12
 800d182:	46bd      	mov	sp, r7
 800d184:	bc80      	pop	{r7}
 800d186:	4770      	bx	lr

0800d188 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d188:	b480      	push	{r7}
 800d18a:	b083      	sub	sp, #12
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d190:	bf00      	nop
 800d192:	370c      	adds	r7, #12
 800d194:	46bd      	mov	sp, r7
 800d196:	bc80      	pop	{r7}
 800d198:	4770      	bx	lr

0800d19a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d19a:	b480      	push	{r7}
 800d19c:	b083      	sub	sp, #12
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
 800d1a2:	460b      	mov	r3, r1
 800d1a4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d1a6:	bf00      	nop
 800d1a8:	370c      	adds	r7, #12
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bc80      	pop	{r7}
 800d1ae:	4770      	bx	lr

0800d1b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b095      	sub	sp, #84	@ 0x54
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	330c      	adds	r3, #12
 800d1be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1c2:	e853 3f00 	ldrex	r3, [r3]
 800d1c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d1c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d1ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	330c      	adds	r3, #12
 800d1d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d1d8:	643a      	str	r2, [r7, #64]	@ 0x40
 800d1da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d1de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d1e0:	e841 2300 	strex	r3, r2, [r1]
 800d1e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d1e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d1e5      	bne.n	800d1b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	3314      	adds	r3, #20
 800d1f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1f4:	6a3b      	ldr	r3, [r7, #32]
 800d1f6:	e853 3f00 	ldrex	r3, [r3]
 800d1fa:	61fb      	str	r3, [r7, #28]
   return(result);
 800d1fc:	69fb      	ldr	r3, [r7, #28]
 800d1fe:	f023 0301 	bic.w	r3, r3, #1
 800d202:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	3314      	adds	r3, #20
 800d20a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d20c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d20e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d210:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d212:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d214:	e841 2300 	strex	r3, r2, [r1]
 800d218:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d1e5      	bne.n	800d1ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d224:	2b01      	cmp	r3, #1
 800d226:	d119      	bne.n	800d25c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	330c      	adds	r3, #12
 800d22e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d230:	68fb      	ldr	r3, [r7, #12]
 800d232:	e853 3f00 	ldrex	r3, [r3]
 800d236:	60bb      	str	r3, [r7, #8]
   return(result);
 800d238:	68bb      	ldr	r3, [r7, #8]
 800d23a:	f023 0310 	bic.w	r3, r3, #16
 800d23e:	647b      	str	r3, [r7, #68]	@ 0x44
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	330c      	adds	r3, #12
 800d246:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d248:	61ba      	str	r2, [r7, #24]
 800d24a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d24c:	6979      	ldr	r1, [r7, #20]
 800d24e:	69ba      	ldr	r2, [r7, #24]
 800d250:	e841 2300 	strex	r3, r2, [r1]
 800d254:	613b      	str	r3, [r7, #16]
   return(result);
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d1e5      	bne.n	800d228 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2220      	movs	r2, #32
 800d260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2200      	movs	r2, #0
 800d268:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d26a:	bf00      	nop
 800d26c:	3754      	adds	r7, #84	@ 0x54
 800d26e:	46bd      	mov	sp, r7
 800d270:	bc80      	pop	{r7}
 800d272:	4770      	bx	lr

0800d274 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d280:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2200      	movs	r2, #0
 800d286:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	2200      	movs	r2, #0
 800d28c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d28e:	68f8      	ldr	r0, [r7, #12]
 800d290:	f7ff ff7a 	bl	800d188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d294:	bf00      	nop
 800d296:	3710      	adds	r7, #16
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d29c:	b480      	push	{r7}
 800d29e:	b085      	sub	sp, #20
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800d2aa:	b2db      	uxtb	r3, r3
 800d2ac:	2b21      	cmp	r3, #33	@ 0x21
 800d2ae:	d13e      	bne.n	800d32e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	689b      	ldr	r3, [r3, #8]
 800d2b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d2b8:	d114      	bne.n	800d2e4 <UART_Transmit_IT+0x48>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	691b      	ldr	r3, [r3, #16]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d110      	bne.n	800d2e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	6a1b      	ldr	r3, [r3, #32]
 800d2c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	881b      	ldrh	r3, [r3, #0]
 800d2cc:	461a      	mov	r2, r3
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d2d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	6a1b      	ldr	r3, [r3, #32]
 800d2dc:	1c9a      	adds	r2, r3, #2
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	621a      	str	r2, [r3, #32]
 800d2e2:	e008      	b.n	800d2f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	6a1b      	ldr	r3, [r3, #32]
 800d2e8:	1c59      	adds	r1, r3, #1
 800d2ea:	687a      	ldr	r2, [r7, #4]
 800d2ec:	6211      	str	r1, [r2, #32]
 800d2ee:	781a      	ldrb	r2, [r3, #0]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	3b01      	subs	r3, #1
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	687a      	ldr	r2, [r7, #4]
 800d302:	4619      	mov	r1, r3
 800d304:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800d306:	2b00      	cmp	r3, #0
 800d308:	d10f      	bne.n	800d32a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	68da      	ldr	r2, [r3, #12]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d318:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	68da      	ldr	r2, [r3, #12]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d328:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d32a:	2300      	movs	r3, #0
 800d32c:	e000      	b.n	800d330 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800d32e:	2302      	movs	r3, #2
  }
}
 800d330:	4618      	mov	r0, r3
 800d332:	3714      	adds	r7, #20
 800d334:	46bd      	mov	sp, r7
 800d336:	bc80      	pop	{r7}
 800d338:	4770      	bx	lr

0800d33a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d33a:	b580      	push	{r7, lr}
 800d33c:	b082      	sub	sp, #8
 800d33e:	af00      	add	r7, sp, #0
 800d340:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	68da      	ldr	r2, [r3, #12]
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d350:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2220      	movs	r2, #32
 800d356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f7ff ff02 	bl	800d164 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d360:	2300      	movs	r3, #0
}
 800d362:	4618      	mov	r0, r3
 800d364:	3708      	adds	r7, #8
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}

0800d36a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d36a:	b580      	push	{r7, lr}
 800d36c:	b08c      	sub	sp, #48	@ 0x30
 800d36e:	af00      	add	r7, sp, #0
 800d370:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800d378:	b2db      	uxtb	r3, r3
 800d37a:	2b22      	cmp	r3, #34	@ 0x22
 800d37c:	f040 80ae 	bne.w	800d4dc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	689b      	ldr	r3, [r3, #8]
 800d384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d388:	d117      	bne.n	800d3ba <UART_Receive_IT+0x50>
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	691b      	ldr	r3, [r3, #16]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d113      	bne.n	800d3ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800d392:	2300      	movs	r3, #0
 800d394:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d39a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	b29b      	uxth	r3, r3
 800d3a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3a8:	b29a      	uxth	r2, r3
 800d3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3b2:	1c9a      	adds	r2, r3, #2
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	629a      	str	r2, [r3, #40]	@ 0x28
 800d3b8:	e026      	b.n	800d408 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	689b      	ldr	r3, [r3, #8]
 800d3c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d3cc:	d007      	beq.n	800d3de <UART_Receive_IT+0x74>
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	689b      	ldr	r3, [r3, #8]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d10a      	bne.n	800d3ec <UART_Receive_IT+0x82>
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	691b      	ldr	r3, [r3, #16]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d106      	bne.n	800d3ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	685b      	ldr	r3, [r3, #4]
 800d3e4:	b2da      	uxtb	r2, r3
 800d3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3e8:	701a      	strb	r2, [r3, #0]
 800d3ea:	e008      	b.n	800d3fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3f8:	b2da      	uxtb	r2, r3
 800d3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d402:	1c5a      	adds	r2, r3, #1
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800d40c:	b29b      	uxth	r3, r3
 800d40e:	3b01      	subs	r3, #1
 800d410:	b29b      	uxth	r3, r3
 800d412:	687a      	ldr	r2, [r7, #4]
 800d414:	4619      	mov	r1, r3
 800d416:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d15d      	bne.n	800d4d8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	68da      	ldr	r2, [r3, #12]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f022 0220 	bic.w	r2, r2, #32
 800d42a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	68da      	ldr	r2, [r3, #12]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d43a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	695a      	ldr	r2, [r3, #20]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	f022 0201 	bic.w	r2, r2, #1
 800d44a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2220      	movs	r2, #32
 800d450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2200      	movs	r2, #0
 800d458:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d45e:	2b01      	cmp	r3, #1
 800d460:	d135      	bne.n	800d4ce <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	330c      	adds	r3, #12
 800d46e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d470:	697b      	ldr	r3, [r7, #20]
 800d472:	e853 3f00 	ldrex	r3, [r3]
 800d476:	613b      	str	r3, [r7, #16]
   return(result);
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	f023 0310 	bic.w	r3, r3, #16
 800d47e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	330c      	adds	r3, #12
 800d486:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d488:	623a      	str	r2, [r7, #32]
 800d48a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d48c:	69f9      	ldr	r1, [r7, #28]
 800d48e:	6a3a      	ldr	r2, [r7, #32]
 800d490:	e841 2300 	strex	r3, r2, [r1]
 800d494:	61bb      	str	r3, [r7, #24]
   return(result);
 800d496:	69bb      	ldr	r3, [r7, #24]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d1e5      	bne.n	800d468 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	f003 0310 	and.w	r3, r3, #16
 800d4a6:	2b10      	cmp	r3, #16
 800d4a8:	d10a      	bne.n	800d4c0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	60fb      	str	r3, [r7, #12]
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	60fb      	str	r3, [r7, #12]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	60fb      	str	r3, [r7, #12]
 800d4be:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800d4c4:	4619      	mov	r1, r3
 800d4c6:	6878      	ldr	r0, [r7, #4]
 800d4c8:	f7ff fe67 	bl	800d19a <HAL_UARTEx_RxEventCallback>
 800d4cc:	e002      	b.n	800d4d4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f7ff fe51 	bl	800d176 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	e002      	b.n	800d4de <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800d4d8:	2300      	movs	r3, #0
 800d4da:	e000      	b.n	800d4de <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800d4dc:	2302      	movs	r3, #2
  }
}
 800d4de:	4618      	mov	r0, r3
 800d4e0:	3730      	adds	r7, #48	@ 0x30
 800d4e2:	46bd      	mov	sp, r7
 800d4e4:	bd80      	pop	{r7, pc}
	...

0800d4e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b084      	sub	sp, #16
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	691b      	ldr	r3, [r3, #16]
 800d4f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	68da      	ldr	r2, [r3, #12]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	430a      	orrs	r2, r1
 800d504:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	689a      	ldr	r2, [r3, #8]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	691b      	ldr	r3, [r3, #16]
 800d50e:	431a      	orrs	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	695b      	ldr	r3, [r3, #20]
 800d514:	4313      	orrs	r3, r2
 800d516:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	68db      	ldr	r3, [r3, #12]
 800d51e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800d522:	f023 030c 	bic.w	r3, r3, #12
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	6812      	ldr	r2, [r2, #0]
 800d52a:	68b9      	ldr	r1, [r7, #8]
 800d52c:	430b      	orrs	r3, r1
 800d52e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	695b      	ldr	r3, [r3, #20]
 800d536:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	699a      	ldr	r2, [r3, #24]
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	430a      	orrs	r2, r1
 800d544:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	4a2c      	ldr	r2, [pc, #176]	@ (800d5fc <UART_SetConfig+0x114>)
 800d54c:	4293      	cmp	r3, r2
 800d54e:	d103      	bne.n	800d558 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800d550:	f7fe fe8c 	bl	800c26c <HAL_RCC_GetPCLK2Freq>
 800d554:	60f8      	str	r0, [r7, #12]
 800d556:	e002      	b.n	800d55e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800d558:	f7fe fe74 	bl	800c244 <HAL_RCC_GetPCLK1Freq>
 800d55c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d55e:	68fa      	ldr	r2, [r7, #12]
 800d560:	4613      	mov	r3, r2
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	4413      	add	r3, r2
 800d566:	009a      	lsls	r2, r3, #2
 800d568:	441a      	add	r2, r3
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	009b      	lsls	r3, r3, #2
 800d570:	fbb2 f3f3 	udiv	r3, r2, r3
 800d574:	4a22      	ldr	r2, [pc, #136]	@ (800d600 <UART_SetConfig+0x118>)
 800d576:	fba2 2303 	umull	r2, r3, r2, r3
 800d57a:	095b      	lsrs	r3, r3, #5
 800d57c:	0119      	lsls	r1, r3, #4
 800d57e:	68fa      	ldr	r2, [r7, #12]
 800d580:	4613      	mov	r3, r2
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	4413      	add	r3, r2
 800d586:	009a      	lsls	r2, r3, #2
 800d588:	441a      	add	r2, r3
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	fbb2 f2f3 	udiv	r2, r2, r3
 800d594:	4b1a      	ldr	r3, [pc, #104]	@ (800d600 <UART_SetConfig+0x118>)
 800d596:	fba3 0302 	umull	r0, r3, r3, r2
 800d59a:	095b      	lsrs	r3, r3, #5
 800d59c:	2064      	movs	r0, #100	@ 0x64
 800d59e:	fb00 f303 	mul.w	r3, r0, r3
 800d5a2:	1ad3      	subs	r3, r2, r3
 800d5a4:	011b      	lsls	r3, r3, #4
 800d5a6:	3332      	adds	r3, #50	@ 0x32
 800d5a8:	4a15      	ldr	r2, [pc, #84]	@ (800d600 <UART_SetConfig+0x118>)
 800d5aa:	fba2 2303 	umull	r2, r3, r2, r3
 800d5ae:	095b      	lsrs	r3, r3, #5
 800d5b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d5b4:	4419      	add	r1, r3
 800d5b6:	68fa      	ldr	r2, [r7, #12]
 800d5b8:	4613      	mov	r3, r2
 800d5ba:	009b      	lsls	r3, r3, #2
 800d5bc:	4413      	add	r3, r2
 800d5be:	009a      	lsls	r2, r3, #2
 800d5c0:	441a      	add	r2, r3
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	009b      	lsls	r3, r3, #2
 800d5c8:	fbb2 f2f3 	udiv	r2, r2, r3
 800d5cc:	4b0c      	ldr	r3, [pc, #48]	@ (800d600 <UART_SetConfig+0x118>)
 800d5ce:	fba3 0302 	umull	r0, r3, r3, r2
 800d5d2:	095b      	lsrs	r3, r3, #5
 800d5d4:	2064      	movs	r0, #100	@ 0x64
 800d5d6:	fb00 f303 	mul.w	r3, r0, r3
 800d5da:	1ad3      	subs	r3, r2, r3
 800d5dc:	011b      	lsls	r3, r3, #4
 800d5de:	3332      	adds	r3, #50	@ 0x32
 800d5e0:	4a07      	ldr	r2, [pc, #28]	@ (800d600 <UART_SetConfig+0x118>)
 800d5e2:	fba2 2303 	umull	r2, r3, r2, r3
 800d5e6:	095b      	lsrs	r3, r3, #5
 800d5e8:	f003 020f 	and.w	r2, r3, #15
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	440a      	add	r2, r1
 800d5f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800d5f4:	bf00      	nop
 800d5f6:	3710      	adds	r7, #16
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	bd80      	pop	{r7, pc}
 800d5fc:	40013800 	.word	0x40013800
 800d600:	51eb851f 	.word	0x51eb851f

0800d604 <__itoa>:
 800d604:	1e93      	subs	r3, r2, #2
 800d606:	2b22      	cmp	r3, #34	@ 0x22
 800d608:	b510      	push	{r4, lr}
 800d60a:	460c      	mov	r4, r1
 800d60c:	d904      	bls.n	800d618 <__itoa+0x14>
 800d60e:	2300      	movs	r3, #0
 800d610:	461c      	mov	r4, r3
 800d612:	700b      	strb	r3, [r1, #0]
 800d614:	4620      	mov	r0, r4
 800d616:	bd10      	pop	{r4, pc}
 800d618:	2a0a      	cmp	r2, #10
 800d61a:	d109      	bne.n	800d630 <__itoa+0x2c>
 800d61c:	2800      	cmp	r0, #0
 800d61e:	da07      	bge.n	800d630 <__itoa+0x2c>
 800d620:	232d      	movs	r3, #45	@ 0x2d
 800d622:	700b      	strb	r3, [r1, #0]
 800d624:	2101      	movs	r1, #1
 800d626:	4240      	negs	r0, r0
 800d628:	4421      	add	r1, r4
 800d62a:	f000 f8db 	bl	800d7e4 <__utoa>
 800d62e:	e7f1      	b.n	800d614 <__itoa+0x10>
 800d630:	2100      	movs	r1, #0
 800d632:	e7f9      	b.n	800d628 <__itoa+0x24>

0800d634 <itoa>:
 800d634:	f7ff bfe6 	b.w	800d604 <__itoa>

0800d638 <malloc>:
 800d638:	4b02      	ldr	r3, [pc, #8]	@ (800d644 <malloc+0xc>)
 800d63a:	4601      	mov	r1, r0
 800d63c:	6818      	ldr	r0, [r3, #0]
 800d63e:	f000 b825 	b.w	800d68c <_malloc_r>
 800d642:	bf00      	nop
 800d644:	20000f80 	.word	0x20000f80

0800d648 <sbrk_aligned>:
 800d648:	b570      	push	{r4, r5, r6, lr}
 800d64a:	4e0f      	ldr	r6, [pc, #60]	@ (800d688 <sbrk_aligned+0x40>)
 800d64c:	460c      	mov	r4, r1
 800d64e:	6831      	ldr	r1, [r6, #0]
 800d650:	4605      	mov	r5, r0
 800d652:	b911      	cbnz	r1, 800d65a <sbrk_aligned+0x12>
 800d654:	f000 f932 	bl	800d8bc <_sbrk_r>
 800d658:	6030      	str	r0, [r6, #0]
 800d65a:	4621      	mov	r1, r4
 800d65c:	4628      	mov	r0, r5
 800d65e:	f000 f92d 	bl	800d8bc <_sbrk_r>
 800d662:	1c43      	adds	r3, r0, #1
 800d664:	d103      	bne.n	800d66e <sbrk_aligned+0x26>
 800d666:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d66a:	4620      	mov	r0, r4
 800d66c:	bd70      	pop	{r4, r5, r6, pc}
 800d66e:	1cc4      	adds	r4, r0, #3
 800d670:	f024 0403 	bic.w	r4, r4, #3
 800d674:	42a0      	cmp	r0, r4
 800d676:	d0f8      	beq.n	800d66a <sbrk_aligned+0x22>
 800d678:	1a21      	subs	r1, r4, r0
 800d67a:	4628      	mov	r0, r5
 800d67c:	f000 f91e 	bl	800d8bc <_sbrk_r>
 800d680:	3001      	adds	r0, #1
 800d682:	d1f2      	bne.n	800d66a <sbrk_aligned+0x22>
 800d684:	e7ef      	b.n	800d666 <sbrk_aligned+0x1e>
 800d686:	bf00      	nop
 800d688:	20001a28 	.word	0x20001a28

0800d68c <_malloc_r>:
 800d68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d690:	1ccd      	adds	r5, r1, #3
 800d692:	f025 0503 	bic.w	r5, r5, #3
 800d696:	3508      	adds	r5, #8
 800d698:	2d0c      	cmp	r5, #12
 800d69a:	bf38      	it	cc
 800d69c:	250c      	movcc	r5, #12
 800d69e:	2d00      	cmp	r5, #0
 800d6a0:	4606      	mov	r6, r0
 800d6a2:	db01      	blt.n	800d6a8 <_malloc_r+0x1c>
 800d6a4:	42a9      	cmp	r1, r5
 800d6a6:	d904      	bls.n	800d6b2 <_malloc_r+0x26>
 800d6a8:	230c      	movs	r3, #12
 800d6aa:	6033      	str	r3, [r6, #0]
 800d6ac:	2000      	movs	r0, #0
 800d6ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d788 <_malloc_r+0xfc>
 800d6b6:	f000 f869 	bl	800d78c <__malloc_lock>
 800d6ba:	f8d8 3000 	ldr.w	r3, [r8]
 800d6be:	461c      	mov	r4, r3
 800d6c0:	bb44      	cbnz	r4, 800d714 <_malloc_r+0x88>
 800d6c2:	4629      	mov	r1, r5
 800d6c4:	4630      	mov	r0, r6
 800d6c6:	f7ff ffbf 	bl	800d648 <sbrk_aligned>
 800d6ca:	1c43      	adds	r3, r0, #1
 800d6cc:	4604      	mov	r4, r0
 800d6ce:	d158      	bne.n	800d782 <_malloc_r+0xf6>
 800d6d0:	f8d8 4000 	ldr.w	r4, [r8]
 800d6d4:	4627      	mov	r7, r4
 800d6d6:	2f00      	cmp	r7, #0
 800d6d8:	d143      	bne.n	800d762 <_malloc_r+0xd6>
 800d6da:	2c00      	cmp	r4, #0
 800d6dc:	d04b      	beq.n	800d776 <_malloc_r+0xea>
 800d6de:	6823      	ldr	r3, [r4, #0]
 800d6e0:	4639      	mov	r1, r7
 800d6e2:	4630      	mov	r0, r6
 800d6e4:	eb04 0903 	add.w	r9, r4, r3
 800d6e8:	f000 f8e8 	bl	800d8bc <_sbrk_r>
 800d6ec:	4581      	cmp	r9, r0
 800d6ee:	d142      	bne.n	800d776 <_malloc_r+0xea>
 800d6f0:	6821      	ldr	r1, [r4, #0]
 800d6f2:	4630      	mov	r0, r6
 800d6f4:	1a6d      	subs	r5, r5, r1
 800d6f6:	4629      	mov	r1, r5
 800d6f8:	f7ff ffa6 	bl	800d648 <sbrk_aligned>
 800d6fc:	3001      	adds	r0, #1
 800d6fe:	d03a      	beq.n	800d776 <_malloc_r+0xea>
 800d700:	6823      	ldr	r3, [r4, #0]
 800d702:	442b      	add	r3, r5
 800d704:	6023      	str	r3, [r4, #0]
 800d706:	f8d8 3000 	ldr.w	r3, [r8]
 800d70a:	685a      	ldr	r2, [r3, #4]
 800d70c:	bb62      	cbnz	r2, 800d768 <_malloc_r+0xdc>
 800d70e:	f8c8 7000 	str.w	r7, [r8]
 800d712:	e00f      	b.n	800d734 <_malloc_r+0xa8>
 800d714:	6822      	ldr	r2, [r4, #0]
 800d716:	1b52      	subs	r2, r2, r5
 800d718:	d420      	bmi.n	800d75c <_malloc_r+0xd0>
 800d71a:	2a0b      	cmp	r2, #11
 800d71c:	d917      	bls.n	800d74e <_malloc_r+0xc2>
 800d71e:	1961      	adds	r1, r4, r5
 800d720:	42a3      	cmp	r3, r4
 800d722:	6025      	str	r5, [r4, #0]
 800d724:	bf18      	it	ne
 800d726:	6059      	strne	r1, [r3, #4]
 800d728:	6863      	ldr	r3, [r4, #4]
 800d72a:	bf08      	it	eq
 800d72c:	f8c8 1000 	streq.w	r1, [r8]
 800d730:	5162      	str	r2, [r4, r5]
 800d732:	604b      	str	r3, [r1, #4]
 800d734:	4630      	mov	r0, r6
 800d736:	f000 f82f 	bl	800d798 <__malloc_unlock>
 800d73a:	f104 000b 	add.w	r0, r4, #11
 800d73e:	1d23      	adds	r3, r4, #4
 800d740:	f020 0007 	bic.w	r0, r0, #7
 800d744:	1ac2      	subs	r2, r0, r3
 800d746:	bf1c      	itt	ne
 800d748:	1a1b      	subne	r3, r3, r0
 800d74a:	50a3      	strne	r3, [r4, r2]
 800d74c:	e7af      	b.n	800d6ae <_malloc_r+0x22>
 800d74e:	6862      	ldr	r2, [r4, #4]
 800d750:	42a3      	cmp	r3, r4
 800d752:	bf0c      	ite	eq
 800d754:	f8c8 2000 	streq.w	r2, [r8]
 800d758:	605a      	strne	r2, [r3, #4]
 800d75a:	e7eb      	b.n	800d734 <_malloc_r+0xa8>
 800d75c:	4623      	mov	r3, r4
 800d75e:	6864      	ldr	r4, [r4, #4]
 800d760:	e7ae      	b.n	800d6c0 <_malloc_r+0x34>
 800d762:	463c      	mov	r4, r7
 800d764:	687f      	ldr	r7, [r7, #4]
 800d766:	e7b6      	b.n	800d6d6 <_malloc_r+0x4a>
 800d768:	461a      	mov	r2, r3
 800d76a:	685b      	ldr	r3, [r3, #4]
 800d76c:	42a3      	cmp	r3, r4
 800d76e:	d1fb      	bne.n	800d768 <_malloc_r+0xdc>
 800d770:	2300      	movs	r3, #0
 800d772:	6053      	str	r3, [r2, #4]
 800d774:	e7de      	b.n	800d734 <_malloc_r+0xa8>
 800d776:	230c      	movs	r3, #12
 800d778:	4630      	mov	r0, r6
 800d77a:	6033      	str	r3, [r6, #0]
 800d77c:	f000 f80c 	bl	800d798 <__malloc_unlock>
 800d780:	e794      	b.n	800d6ac <_malloc_r+0x20>
 800d782:	6005      	str	r5, [r0, #0]
 800d784:	e7d6      	b.n	800d734 <_malloc_r+0xa8>
 800d786:	bf00      	nop
 800d788:	20001a2c 	.word	0x20001a2c

0800d78c <__malloc_lock>:
 800d78c:	4801      	ldr	r0, [pc, #4]	@ (800d794 <__malloc_lock+0x8>)
 800d78e:	f000 b8cf 	b.w	800d930 <__retarget_lock_acquire_recursive>
 800d792:	bf00      	nop
 800d794:	20001b68 	.word	0x20001b68

0800d798 <__malloc_unlock>:
 800d798:	4801      	ldr	r0, [pc, #4]	@ (800d7a0 <__malloc_unlock+0x8>)
 800d79a:	f000 b8ca 	b.w	800d932 <__retarget_lock_release_recursive>
 800d79e:	bf00      	nop
 800d7a0:	20001b68 	.word	0x20001b68

0800d7a4 <siprintf>:
 800d7a4:	b40e      	push	{r1, r2, r3}
 800d7a6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d7aa:	b500      	push	{lr}
 800d7ac:	b09c      	sub	sp, #112	@ 0x70
 800d7ae:	ab1d      	add	r3, sp, #116	@ 0x74
 800d7b0:	9002      	str	r0, [sp, #8]
 800d7b2:	9006      	str	r0, [sp, #24]
 800d7b4:	9107      	str	r1, [sp, #28]
 800d7b6:	9104      	str	r1, [sp, #16]
 800d7b8:	4808      	ldr	r0, [pc, #32]	@ (800d7dc <siprintf+0x38>)
 800d7ba:	4909      	ldr	r1, [pc, #36]	@ (800d7e0 <siprintf+0x3c>)
 800d7bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7c0:	9105      	str	r1, [sp, #20]
 800d7c2:	6800      	ldr	r0, [r0, #0]
 800d7c4:	a902      	add	r1, sp, #8
 800d7c6:	9301      	str	r3, [sp, #4]
 800d7c8:	f000 f960 	bl	800da8c <_svfiprintf_r>
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	9b02      	ldr	r3, [sp, #8]
 800d7d0:	701a      	strb	r2, [r3, #0]
 800d7d2:	b01c      	add	sp, #112	@ 0x70
 800d7d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7d8:	b003      	add	sp, #12
 800d7da:	4770      	bx	lr
 800d7dc:	20000f80 	.word	0x20000f80
 800d7e0:	ffff0208 	.word	0xffff0208

0800d7e4 <__utoa>:
 800d7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7e6:	b08b      	sub	sp, #44	@ 0x2c
 800d7e8:	4605      	mov	r5, r0
 800d7ea:	460b      	mov	r3, r1
 800d7ec:	466e      	mov	r6, sp
 800d7ee:	4c1d      	ldr	r4, [pc, #116]	@ (800d864 <__utoa+0x80>)
 800d7f0:	f104 0c20 	add.w	ip, r4, #32
 800d7f4:	4637      	mov	r7, r6
 800d7f6:	6820      	ldr	r0, [r4, #0]
 800d7f8:	6861      	ldr	r1, [r4, #4]
 800d7fa:	3408      	adds	r4, #8
 800d7fc:	c703      	stmia	r7!, {r0, r1}
 800d7fe:	4564      	cmp	r4, ip
 800d800:	463e      	mov	r6, r7
 800d802:	d1f7      	bne.n	800d7f4 <__utoa+0x10>
 800d804:	7921      	ldrb	r1, [r4, #4]
 800d806:	6820      	ldr	r0, [r4, #0]
 800d808:	7139      	strb	r1, [r7, #4]
 800d80a:	1e91      	subs	r1, r2, #2
 800d80c:	2922      	cmp	r1, #34	@ 0x22
 800d80e:	6038      	str	r0, [r7, #0]
 800d810:	f04f 0100 	mov.w	r1, #0
 800d814:	d904      	bls.n	800d820 <__utoa+0x3c>
 800d816:	7019      	strb	r1, [r3, #0]
 800d818:	460b      	mov	r3, r1
 800d81a:	4618      	mov	r0, r3
 800d81c:	b00b      	add	sp, #44	@ 0x2c
 800d81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d820:	1e58      	subs	r0, r3, #1
 800d822:	4684      	mov	ip, r0
 800d824:	fbb5 f7f2 	udiv	r7, r5, r2
 800d828:	fb02 5617 	mls	r6, r2, r7, r5
 800d82c:	3628      	adds	r6, #40	@ 0x28
 800d82e:	446e      	add	r6, sp
 800d830:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d834:	460c      	mov	r4, r1
 800d836:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d83a:	462e      	mov	r6, r5
 800d83c:	42b2      	cmp	r2, r6
 800d83e:	463d      	mov	r5, r7
 800d840:	f101 0101 	add.w	r1, r1, #1
 800d844:	d9ee      	bls.n	800d824 <__utoa+0x40>
 800d846:	2200      	movs	r2, #0
 800d848:	545a      	strb	r2, [r3, r1]
 800d84a:	1919      	adds	r1, r3, r4
 800d84c:	1aa5      	subs	r5, r4, r2
 800d84e:	42aa      	cmp	r2, r5
 800d850:	dae3      	bge.n	800d81a <__utoa+0x36>
 800d852:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d856:	780e      	ldrb	r6, [r1, #0]
 800d858:	3201      	adds	r2, #1
 800d85a:	7006      	strb	r6, [r0, #0]
 800d85c:	f801 5901 	strb.w	r5, [r1], #-1
 800d860:	e7f4      	b.n	800d84c <__utoa+0x68>
 800d862:	bf00      	nop
 800d864:	0800ec3e 	.word	0x0800ec3e

0800d868 <strcat>:
 800d868:	4602      	mov	r2, r0
 800d86a:	b510      	push	{r4, lr}
 800d86c:	7814      	ldrb	r4, [r2, #0]
 800d86e:	4613      	mov	r3, r2
 800d870:	3201      	adds	r2, #1
 800d872:	2c00      	cmp	r4, #0
 800d874:	d1fa      	bne.n	800d86c <strcat+0x4>
 800d876:	3b01      	subs	r3, #1
 800d878:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d87c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d880:	2a00      	cmp	r2, #0
 800d882:	d1f9      	bne.n	800d878 <strcat+0x10>
 800d884:	bd10      	pop	{r4, pc}

0800d886 <strncpy>:
 800d886:	4603      	mov	r3, r0
 800d888:	b510      	push	{r4, lr}
 800d88a:	3901      	subs	r1, #1
 800d88c:	b132      	cbz	r2, 800d89c <strncpy+0x16>
 800d88e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d892:	3a01      	subs	r2, #1
 800d894:	f803 4b01 	strb.w	r4, [r3], #1
 800d898:	2c00      	cmp	r4, #0
 800d89a:	d1f7      	bne.n	800d88c <strncpy+0x6>
 800d89c:	2100      	movs	r1, #0
 800d89e:	441a      	add	r2, r3
 800d8a0:	4293      	cmp	r3, r2
 800d8a2:	d100      	bne.n	800d8a6 <strncpy+0x20>
 800d8a4:	bd10      	pop	{r4, pc}
 800d8a6:	f803 1b01 	strb.w	r1, [r3], #1
 800d8aa:	e7f9      	b.n	800d8a0 <strncpy+0x1a>

0800d8ac <memset>:
 800d8ac:	4603      	mov	r3, r0
 800d8ae:	4402      	add	r2, r0
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d100      	bne.n	800d8b6 <memset+0xa>
 800d8b4:	4770      	bx	lr
 800d8b6:	f803 1b01 	strb.w	r1, [r3], #1
 800d8ba:	e7f9      	b.n	800d8b0 <memset+0x4>

0800d8bc <_sbrk_r>:
 800d8bc:	b538      	push	{r3, r4, r5, lr}
 800d8be:	2300      	movs	r3, #0
 800d8c0:	4d05      	ldr	r5, [pc, #20]	@ (800d8d8 <_sbrk_r+0x1c>)
 800d8c2:	4604      	mov	r4, r0
 800d8c4:	4608      	mov	r0, r1
 800d8c6:	602b      	str	r3, [r5, #0]
 800d8c8:	f7fb fff4 	bl	80098b4 <_sbrk>
 800d8cc:	1c43      	adds	r3, r0, #1
 800d8ce:	d102      	bne.n	800d8d6 <_sbrk_r+0x1a>
 800d8d0:	682b      	ldr	r3, [r5, #0]
 800d8d2:	b103      	cbz	r3, 800d8d6 <_sbrk_r+0x1a>
 800d8d4:	6023      	str	r3, [r4, #0]
 800d8d6:	bd38      	pop	{r3, r4, r5, pc}
 800d8d8:	20001b6c 	.word	0x20001b6c

0800d8dc <__errno>:
 800d8dc:	4b01      	ldr	r3, [pc, #4]	@ (800d8e4 <__errno+0x8>)
 800d8de:	6818      	ldr	r0, [r3, #0]
 800d8e0:	4770      	bx	lr
 800d8e2:	bf00      	nop
 800d8e4:	20000f80 	.word	0x20000f80

0800d8e8 <__libc_init_array>:
 800d8e8:	b570      	push	{r4, r5, r6, lr}
 800d8ea:	2600      	movs	r6, #0
 800d8ec:	4d0c      	ldr	r5, [pc, #48]	@ (800d920 <__libc_init_array+0x38>)
 800d8ee:	4c0d      	ldr	r4, [pc, #52]	@ (800d924 <__libc_init_array+0x3c>)
 800d8f0:	1b64      	subs	r4, r4, r5
 800d8f2:	10a4      	asrs	r4, r4, #2
 800d8f4:	42a6      	cmp	r6, r4
 800d8f6:	d109      	bne.n	800d90c <__libc_init_array+0x24>
 800d8f8:	f000 fbc2 	bl	800e080 <_init>
 800d8fc:	2600      	movs	r6, #0
 800d8fe:	4d0a      	ldr	r5, [pc, #40]	@ (800d928 <__libc_init_array+0x40>)
 800d900:	4c0a      	ldr	r4, [pc, #40]	@ (800d92c <__libc_init_array+0x44>)
 800d902:	1b64      	subs	r4, r4, r5
 800d904:	10a4      	asrs	r4, r4, #2
 800d906:	42a6      	cmp	r6, r4
 800d908:	d105      	bne.n	800d916 <__libc_init_array+0x2e>
 800d90a:	bd70      	pop	{r4, r5, r6, pc}
 800d90c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d910:	4798      	blx	r3
 800d912:	3601      	adds	r6, #1
 800d914:	e7ee      	b.n	800d8f4 <__libc_init_array+0xc>
 800d916:	f855 3b04 	ldr.w	r3, [r5], #4
 800d91a:	4798      	blx	r3
 800d91c:	3601      	adds	r6, #1
 800d91e:	e7f2      	b.n	800d906 <__libc_init_array+0x1e>
 800d920:	0800eca0 	.word	0x0800eca0
 800d924:	0800eca0 	.word	0x0800eca0
 800d928:	0800eca0 	.word	0x0800eca0
 800d92c:	0800eca4 	.word	0x0800eca4

0800d930 <__retarget_lock_acquire_recursive>:
 800d930:	4770      	bx	lr

0800d932 <__retarget_lock_release_recursive>:
 800d932:	4770      	bx	lr

0800d934 <strcpy>:
 800d934:	4603      	mov	r3, r0
 800d936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d93a:	f803 2b01 	strb.w	r2, [r3], #1
 800d93e:	2a00      	cmp	r2, #0
 800d940:	d1f9      	bne.n	800d936 <strcpy+0x2>
 800d942:	4770      	bx	lr

0800d944 <_free_r>:
 800d944:	b538      	push	{r3, r4, r5, lr}
 800d946:	4605      	mov	r5, r0
 800d948:	2900      	cmp	r1, #0
 800d94a:	d040      	beq.n	800d9ce <_free_r+0x8a>
 800d94c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d950:	1f0c      	subs	r4, r1, #4
 800d952:	2b00      	cmp	r3, #0
 800d954:	bfb8      	it	lt
 800d956:	18e4      	addlt	r4, r4, r3
 800d958:	f7ff ff18 	bl	800d78c <__malloc_lock>
 800d95c:	4a1c      	ldr	r2, [pc, #112]	@ (800d9d0 <_free_r+0x8c>)
 800d95e:	6813      	ldr	r3, [r2, #0]
 800d960:	b933      	cbnz	r3, 800d970 <_free_r+0x2c>
 800d962:	6063      	str	r3, [r4, #4]
 800d964:	6014      	str	r4, [r2, #0]
 800d966:	4628      	mov	r0, r5
 800d968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d96c:	f7ff bf14 	b.w	800d798 <__malloc_unlock>
 800d970:	42a3      	cmp	r3, r4
 800d972:	d908      	bls.n	800d986 <_free_r+0x42>
 800d974:	6820      	ldr	r0, [r4, #0]
 800d976:	1821      	adds	r1, r4, r0
 800d978:	428b      	cmp	r3, r1
 800d97a:	bf01      	itttt	eq
 800d97c:	6819      	ldreq	r1, [r3, #0]
 800d97e:	685b      	ldreq	r3, [r3, #4]
 800d980:	1809      	addeq	r1, r1, r0
 800d982:	6021      	streq	r1, [r4, #0]
 800d984:	e7ed      	b.n	800d962 <_free_r+0x1e>
 800d986:	461a      	mov	r2, r3
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	b10b      	cbz	r3, 800d990 <_free_r+0x4c>
 800d98c:	42a3      	cmp	r3, r4
 800d98e:	d9fa      	bls.n	800d986 <_free_r+0x42>
 800d990:	6811      	ldr	r1, [r2, #0]
 800d992:	1850      	adds	r0, r2, r1
 800d994:	42a0      	cmp	r0, r4
 800d996:	d10b      	bne.n	800d9b0 <_free_r+0x6c>
 800d998:	6820      	ldr	r0, [r4, #0]
 800d99a:	4401      	add	r1, r0
 800d99c:	1850      	adds	r0, r2, r1
 800d99e:	4283      	cmp	r3, r0
 800d9a0:	6011      	str	r1, [r2, #0]
 800d9a2:	d1e0      	bne.n	800d966 <_free_r+0x22>
 800d9a4:	6818      	ldr	r0, [r3, #0]
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	4408      	add	r0, r1
 800d9aa:	6010      	str	r0, [r2, #0]
 800d9ac:	6053      	str	r3, [r2, #4]
 800d9ae:	e7da      	b.n	800d966 <_free_r+0x22>
 800d9b0:	d902      	bls.n	800d9b8 <_free_r+0x74>
 800d9b2:	230c      	movs	r3, #12
 800d9b4:	602b      	str	r3, [r5, #0]
 800d9b6:	e7d6      	b.n	800d966 <_free_r+0x22>
 800d9b8:	6820      	ldr	r0, [r4, #0]
 800d9ba:	1821      	adds	r1, r4, r0
 800d9bc:	428b      	cmp	r3, r1
 800d9be:	bf01      	itttt	eq
 800d9c0:	6819      	ldreq	r1, [r3, #0]
 800d9c2:	685b      	ldreq	r3, [r3, #4]
 800d9c4:	1809      	addeq	r1, r1, r0
 800d9c6:	6021      	streq	r1, [r4, #0]
 800d9c8:	6063      	str	r3, [r4, #4]
 800d9ca:	6054      	str	r4, [r2, #4]
 800d9cc:	e7cb      	b.n	800d966 <_free_r+0x22>
 800d9ce:	bd38      	pop	{r3, r4, r5, pc}
 800d9d0:	20001a2c 	.word	0x20001a2c

0800d9d4 <__ssputs_r>:
 800d9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9d8:	461f      	mov	r7, r3
 800d9da:	688e      	ldr	r6, [r1, #8]
 800d9dc:	4682      	mov	sl, r0
 800d9de:	42be      	cmp	r6, r7
 800d9e0:	460c      	mov	r4, r1
 800d9e2:	4690      	mov	r8, r2
 800d9e4:	680b      	ldr	r3, [r1, #0]
 800d9e6:	d82d      	bhi.n	800da44 <__ssputs_r+0x70>
 800d9e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d9ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d9f0:	d026      	beq.n	800da40 <__ssputs_r+0x6c>
 800d9f2:	6965      	ldr	r5, [r4, #20]
 800d9f4:	6909      	ldr	r1, [r1, #16]
 800d9f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d9fa:	eba3 0901 	sub.w	r9, r3, r1
 800d9fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da02:	1c7b      	adds	r3, r7, #1
 800da04:	444b      	add	r3, r9
 800da06:	106d      	asrs	r5, r5, #1
 800da08:	429d      	cmp	r5, r3
 800da0a:	bf38      	it	cc
 800da0c:	461d      	movcc	r5, r3
 800da0e:	0553      	lsls	r3, r2, #21
 800da10:	d527      	bpl.n	800da62 <__ssputs_r+0x8e>
 800da12:	4629      	mov	r1, r5
 800da14:	f7ff fe3a 	bl	800d68c <_malloc_r>
 800da18:	4606      	mov	r6, r0
 800da1a:	b360      	cbz	r0, 800da76 <__ssputs_r+0xa2>
 800da1c:	464a      	mov	r2, r9
 800da1e:	6921      	ldr	r1, [r4, #16]
 800da20:	f000 fb18 	bl	800e054 <memcpy>
 800da24:	89a3      	ldrh	r3, [r4, #12]
 800da26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800da2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da2e:	81a3      	strh	r3, [r4, #12]
 800da30:	6126      	str	r6, [r4, #16]
 800da32:	444e      	add	r6, r9
 800da34:	6026      	str	r6, [r4, #0]
 800da36:	463e      	mov	r6, r7
 800da38:	6165      	str	r5, [r4, #20]
 800da3a:	eba5 0509 	sub.w	r5, r5, r9
 800da3e:	60a5      	str	r5, [r4, #8]
 800da40:	42be      	cmp	r6, r7
 800da42:	d900      	bls.n	800da46 <__ssputs_r+0x72>
 800da44:	463e      	mov	r6, r7
 800da46:	4632      	mov	r2, r6
 800da48:	4641      	mov	r1, r8
 800da4a:	6820      	ldr	r0, [r4, #0]
 800da4c:	f000 fada 	bl	800e004 <memmove>
 800da50:	2000      	movs	r0, #0
 800da52:	68a3      	ldr	r3, [r4, #8]
 800da54:	1b9b      	subs	r3, r3, r6
 800da56:	60a3      	str	r3, [r4, #8]
 800da58:	6823      	ldr	r3, [r4, #0]
 800da5a:	4433      	add	r3, r6
 800da5c:	6023      	str	r3, [r4, #0]
 800da5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da62:	462a      	mov	r2, r5
 800da64:	f000 faa0 	bl	800dfa8 <_realloc_r>
 800da68:	4606      	mov	r6, r0
 800da6a:	2800      	cmp	r0, #0
 800da6c:	d1e0      	bne.n	800da30 <__ssputs_r+0x5c>
 800da6e:	4650      	mov	r0, sl
 800da70:	6921      	ldr	r1, [r4, #16]
 800da72:	f7ff ff67 	bl	800d944 <_free_r>
 800da76:	230c      	movs	r3, #12
 800da78:	f8ca 3000 	str.w	r3, [sl]
 800da7c:	89a3      	ldrh	r3, [r4, #12]
 800da7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da86:	81a3      	strh	r3, [r4, #12]
 800da88:	e7e9      	b.n	800da5e <__ssputs_r+0x8a>
	...

0800da8c <_svfiprintf_r>:
 800da8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da90:	4698      	mov	r8, r3
 800da92:	898b      	ldrh	r3, [r1, #12]
 800da94:	4607      	mov	r7, r0
 800da96:	061b      	lsls	r3, r3, #24
 800da98:	460d      	mov	r5, r1
 800da9a:	4614      	mov	r4, r2
 800da9c:	b09d      	sub	sp, #116	@ 0x74
 800da9e:	d510      	bpl.n	800dac2 <_svfiprintf_r+0x36>
 800daa0:	690b      	ldr	r3, [r1, #16]
 800daa2:	b973      	cbnz	r3, 800dac2 <_svfiprintf_r+0x36>
 800daa4:	2140      	movs	r1, #64	@ 0x40
 800daa6:	f7ff fdf1 	bl	800d68c <_malloc_r>
 800daaa:	6028      	str	r0, [r5, #0]
 800daac:	6128      	str	r0, [r5, #16]
 800daae:	b930      	cbnz	r0, 800dabe <_svfiprintf_r+0x32>
 800dab0:	230c      	movs	r3, #12
 800dab2:	603b      	str	r3, [r7, #0]
 800dab4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dab8:	b01d      	add	sp, #116	@ 0x74
 800daba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dabe:	2340      	movs	r3, #64	@ 0x40
 800dac0:	616b      	str	r3, [r5, #20]
 800dac2:	2300      	movs	r3, #0
 800dac4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dac6:	2320      	movs	r3, #32
 800dac8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800dacc:	2330      	movs	r3, #48	@ 0x30
 800dace:	f04f 0901 	mov.w	r9, #1
 800dad2:	f8cd 800c 	str.w	r8, [sp, #12]
 800dad6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800dc70 <_svfiprintf_r+0x1e4>
 800dada:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800dade:	4623      	mov	r3, r4
 800dae0:	469a      	mov	sl, r3
 800dae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dae6:	b10a      	cbz	r2, 800daec <_svfiprintf_r+0x60>
 800dae8:	2a25      	cmp	r2, #37	@ 0x25
 800daea:	d1f9      	bne.n	800dae0 <_svfiprintf_r+0x54>
 800daec:	ebba 0b04 	subs.w	fp, sl, r4
 800daf0:	d00b      	beq.n	800db0a <_svfiprintf_r+0x7e>
 800daf2:	465b      	mov	r3, fp
 800daf4:	4622      	mov	r2, r4
 800daf6:	4629      	mov	r1, r5
 800daf8:	4638      	mov	r0, r7
 800dafa:	f7ff ff6b 	bl	800d9d4 <__ssputs_r>
 800dafe:	3001      	adds	r0, #1
 800db00:	f000 80a7 	beq.w	800dc52 <_svfiprintf_r+0x1c6>
 800db04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800db06:	445a      	add	r2, fp
 800db08:	9209      	str	r2, [sp, #36]	@ 0x24
 800db0a:	f89a 3000 	ldrb.w	r3, [sl]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	f000 809f 	beq.w	800dc52 <_svfiprintf_r+0x1c6>
 800db14:	2300      	movs	r3, #0
 800db16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800db1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db1e:	f10a 0a01 	add.w	sl, sl, #1
 800db22:	9304      	str	r3, [sp, #16]
 800db24:	9307      	str	r3, [sp, #28]
 800db26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800db2a:	931a      	str	r3, [sp, #104]	@ 0x68
 800db2c:	4654      	mov	r4, sl
 800db2e:	2205      	movs	r2, #5
 800db30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db34:	484e      	ldr	r0, [pc, #312]	@ (800dc70 <_svfiprintf_r+0x1e4>)
 800db36:	f000 fa7f 	bl	800e038 <memchr>
 800db3a:	9a04      	ldr	r2, [sp, #16]
 800db3c:	b9d8      	cbnz	r0, 800db76 <_svfiprintf_r+0xea>
 800db3e:	06d0      	lsls	r0, r2, #27
 800db40:	bf44      	itt	mi
 800db42:	2320      	movmi	r3, #32
 800db44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db48:	0711      	lsls	r1, r2, #28
 800db4a:	bf44      	itt	mi
 800db4c:	232b      	movmi	r3, #43	@ 0x2b
 800db4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800db52:	f89a 3000 	ldrb.w	r3, [sl]
 800db56:	2b2a      	cmp	r3, #42	@ 0x2a
 800db58:	d015      	beq.n	800db86 <_svfiprintf_r+0xfa>
 800db5a:	4654      	mov	r4, sl
 800db5c:	2000      	movs	r0, #0
 800db5e:	f04f 0c0a 	mov.w	ip, #10
 800db62:	9a07      	ldr	r2, [sp, #28]
 800db64:	4621      	mov	r1, r4
 800db66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db6a:	3b30      	subs	r3, #48	@ 0x30
 800db6c:	2b09      	cmp	r3, #9
 800db6e:	d94b      	bls.n	800dc08 <_svfiprintf_r+0x17c>
 800db70:	b1b0      	cbz	r0, 800dba0 <_svfiprintf_r+0x114>
 800db72:	9207      	str	r2, [sp, #28]
 800db74:	e014      	b.n	800dba0 <_svfiprintf_r+0x114>
 800db76:	eba0 0308 	sub.w	r3, r0, r8
 800db7a:	fa09 f303 	lsl.w	r3, r9, r3
 800db7e:	4313      	orrs	r3, r2
 800db80:	46a2      	mov	sl, r4
 800db82:	9304      	str	r3, [sp, #16]
 800db84:	e7d2      	b.n	800db2c <_svfiprintf_r+0xa0>
 800db86:	9b03      	ldr	r3, [sp, #12]
 800db88:	1d19      	adds	r1, r3, #4
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	9103      	str	r1, [sp, #12]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	bfbb      	ittet	lt
 800db92:	425b      	neglt	r3, r3
 800db94:	f042 0202 	orrlt.w	r2, r2, #2
 800db98:	9307      	strge	r3, [sp, #28]
 800db9a:	9307      	strlt	r3, [sp, #28]
 800db9c:	bfb8      	it	lt
 800db9e:	9204      	strlt	r2, [sp, #16]
 800dba0:	7823      	ldrb	r3, [r4, #0]
 800dba2:	2b2e      	cmp	r3, #46	@ 0x2e
 800dba4:	d10a      	bne.n	800dbbc <_svfiprintf_r+0x130>
 800dba6:	7863      	ldrb	r3, [r4, #1]
 800dba8:	2b2a      	cmp	r3, #42	@ 0x2a
 800dbaa:	d132      	bne.n	800dc12 <_svfiprintf_r+0x186>
 800dbac:	9b03      	ldr	r3, [sp, #12]
 800dbae:	3402      	adds	r4, #2
 800dbb0:	1d1a      	adds	r2, r3, #4
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	9203      	str	r2, [sp, #12]
 800dbb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dbba:	9305      	str	r3, [sp, #20]
 800dbbc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800dc74 <_svfiprintf_r+0x1e8>
 800dbc0:	2203      	movs	r2, #3
 800dbc2:	4650      	mov	r0, sl
 800dbc4:	7821      	ldrb	r1, [r4, #0]
 800dbc6:	f000 fa37 	bl	800e038 <memchr>
 800dbca:	b138      	cbz	r0, 800dbdc <_svfiprintf_r+0x150>
 800dbcc:	2240      	movs	r2, #64	@ 0x40
 800dbce:	9b04      	ldr	r3, [sp, #16]
 800dbd0:	eba0 000a 	sub.w	r0, r0, sl
 800dbd4:	4082      	lsls	r2, r0
 800dbd6:	4313      	orrs	r3, r2
 800dbd8:	3401      	adds	r4, #1
 800dbda:	9304      	str	r3, [sp, #16]
 800dbdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbe0:	2206      	movs	r2, #6
 800dbe2:	4825      	ldr	r0, [pc, #148]	@ (800dc78 <_svfiprintf_r+0x1ec>)
 800dbe4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800dbe8:	f000 fa26 	bl	800e038 <memchr>
 800dbec:	2800      	cmp	r0, #0
 800dbee:	d036      	beq.n	800dc5e <_svfiprintf_r+0x1d2>
 800dbf0:	4b22      	ldr	r3, [pc, #136]	@ (800dc7c <_svfiprintf_r+0x1f0>)
 800dbf2:	bb1b      	cbnz	r3, 800dc3c <_svfiprintf_r+0x1b0>
 800dbf4:	9b03      	ldr	r3, [sp, #12]
 800dbf6:	3307      	adds	r3, #7
 800dbf8:	f023 0307 	bic.w	r3, r3, #7
 800dbfc:	3308      	adds	r3, #8
 800dbfe:	9303      	str	r3, [sp, #12]
 800dc00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc02:	4433      	add	r3, r6
 800dc04:	9309      	str	r3, [sp, #36]	@ 0x24
 800dc06:	e76a      	b.n	800dade <_svfiprintf_r+0x52>
 800dc08:	460c      	mov	r4, r1
 800dc0a:	2001      	movs	r0, #1
 800dc0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc10:	e7a8      	b.n	800db64 <_svfiprintf_r+0xd8>
 800dc12:	2300      	movs	r3, #0
 800dc14:	f04f 0c0a 	mov.w	ip, #10
 800dc18:	4619      	mov	r1, r3
 800dc1a:	3401      	adds	r4, #1
 800dc1c:	9305      	str	r3, [sp, #20]
 800dc1e:	4620      	mov	r0, r4
 800dc20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc24:	3a30      	subs	r2, #48	@ 0x30
 800dc26:	2a09      	cmp	r2, #9
 800dc28:	d903      	bls.n	800dc32 <_svfiprintf_r+0x1a6>
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d0c6      	beq.n	800dbbc <_svfiprintf_r+0x130>
 800dc2e:	9105      	str	r1, [sp, #20]
 800dc30:	e7c4      	b.n	800dbbc <_svfiprintf_r+0x130>
 800dc32:	4604      	mov	r4, r0
 800dc34:	2301      	movs	r3, #1
 800dc36:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc3a:	e7f0      	b.n	800dc1e <_svfiprintf_r+0x192>
 800dc3c:	ab03      	add	r3, sp, #12
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	462a      	mov	r2, r5
 800dc42:	4638      	mov	r0, r7
 800dc44:	4b0e      	ldr	r3, [pc, #56]	@ (800dc80 <_svfiprintf_r+0x1f4>)
 800dc46:	a904      	add	r1, sp, #16
 800dc48:	f3af 8000 	nop.w
 800dc4c:	1c42      	adds	r2, r0, #1
 800dc4e:	4606      	mov	r6, r0
 800dc50:	d1d6      	bne.n	800dc00 <_svfiprintf_r+0x174>
 800dc52:	89ab      	ldrh	r3, [r5, #12]
 800dc54:	065b      	lsls	r3, r3, #25
 800dc56:	f53f af2d 	bmi.w	800dab4 <_svfiprintf_r+0x28>
 800dc5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800dc5c:	e72c      	b.n	800dab8 <_svfiprintf_r+0x2c>
 800dc5e:	ab03      	add	r3, sp, #12
 800dc60:	9300      	str	r3, [sp, #0]
 800dc62:	462a      	mov	r2, r5
 800dc64:	4638      	mov	r0, r7
 800dc66:	4b06      	ldr	r3, [pc, #24]	@ (800dc80 <_svfiprintf_r+0x1f4>)
 800dc68:	a904      	add	r1, sp, #16
 800dc6a:	f000 f87d 	bl	800dd68 <_printf_i>
 800dc6e:	e7ed      	b.n	800dc4c <_svfiprintf_r+0x1c0>
 800dc70:	0800ec63 	.word	0x0800ec63
 800dc74:	0800ec69 	.word	0x0800ec69
 800dc78:	0800ec6d 	.word	0x0800ec6d
 800dc7c:	00000000 	.word	0x00000000
 800dc80:	0800d9d5 	.word	0x0800d9d5

0800dc84 <_printf_common>:
 800dc84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc88:	4616      	mov	r6, r2
 800dc8a:	4698      	mov	r8, r3
 800dc8c:	688a      	ldr	r2, [r1, #8]
 800dc8e:	690b      	ldr	r3, [r1, #16]
 800dc90:	4607      	mov	r7, r0
 800dc92:	4293      	cmp	r3, r2
 800dc94:	bfb8      	it	lt
 800dc96:	4613      	movlt	r3, r2
 800dc98:	6033      	str	r3, [r6, #0]
 800dc9a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dc9e:	460c      	mov	r4, r1
 800dca0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dca4:	b10a      	cbz	r2, 800dcaa <_printf_common+0x26>
 800dca6:	3301      	adds	r3, #1
 800dca8:	6033      	str	r3, [r6, #0]
 800dcaa:	6823      	ldr	r3, [r4, #0]
 800dcac:	0699      	lsls	r1, r3, #26
 800dcae:	bf42      	ittt	mi
 800dcb0:	6833      	ldrmi	r3, [r6, #0]
 800dcb2:	3302      	addmi	r3, #2
 800dcb4:	6033      	strmi	r3, [r6, #0]
 800dcb6:	6825      	ldr	r5, [r4, #0]
 800dcb8:	f015 0506 	ands.w	r5, r5, #6
 800dcbc:	d106      	bne.n	800dccc <_printf_common+0x48>
 800dcbe:	f104 0a19 	add.w	sl, r4, #25
 800dcc2:	68e3      	ldr	r3, [r4, #12]
 800dcc4:	6832      	ldr	r2, [r6, #0]
 800dcc6:	1a9b      	subs	r3, r3, r2
 800dcc8:	42ab      	cmp	r3, r5
 800dcca:	dc2b      	bgt.n	800dd24 <_printf_common+0xa0>
 800dccc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dcd0:	6822      	ldr	r2, [r4, #0]
 800dcd2:	3b00      	subs	r3, #0
 800dcd4:	bf18      	it	ne
 800dcd6:	2301      	movne	r3, #1
 800dcd8:	0692      	lsls	r2, r2, #26
 800dcda:	d430      	bmi.n	800dd3e <_printf_common+0xba>
 800dcdc:	4641      	mov	r1, r8
 800dcde:	4638      	mov	r0, r7
 800dce0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dce4:	47c8      	blx	r9
 800dce6:	3001      	adds	r0, #1
 800dce8:	d023      	beq.n	800dd32 <_printf_common+0xae>
 800dcea:	6823      	ldr	r3, [r4, #0]
 800dcec:	6922      	ldr	r2, [r4, #16]
 800dcee:	f003 0306 	and.w	r3, r3, #6
 800dcf2:	2b04      	cmp	r3, #4
 800dcf4:	bf14      	ite	ne
 800dcf6:	2500      	movne	r5, #0
 800dcf8:	6833      	ldreq	r3, [r6, #0]
 800dcfa:	f04f 0600 	mov.w	r6, #0
 800dcfe:	bf08      	it	eq
 800dd00:	68e5      	ldreq	r5, [r4, #12]
 800dd02:	f104 041a 	add.w	r4, r4, #26
 800dd06:	bf08      	it	eq
 800dd08:	1aed      	subeq	r5, r5, r3
 800dd0a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800dd0e:	bf08      	it	eq
 800dd10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd14:	4293      	cmp	r3, r2
 800dd16:	bfc4      	itt	gt
 800dd18:	1a9b      	subgt	r3, r3, r2
 800dd1a:	18ed      	addgt	r5, r5, r3
 800dd1c:	42b5      	cmp	r5, r6
 800dd1e:	d11a      	bne.n	800dd56 <_printf_common+0xd2>
 800dd20:	2000      	movs	r0, #0
 800dd22:	e008      	b.n	800dd36 <_printf_common+0xb2>
 800dd24:	2301      	movs	r3, #1
 800dd26:	4652      	mov	r2, sl
 800dd28:	4641      	mov	r1, r8
 800dd2a:	4638      	mov	r0, r7
 800dd2c:	47c8      	blx	r9
 800dd2e:	3001      	adds	r0, #1
 800dd30:	d103      	bne.n	800dd3a <_printf_common+0xb6>
 800dd32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dd36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd3a:	3501      	adds	r5, #1
 800dd3c:	e7c1      	b.n	800dcc2 <_printf_common+0x3e>
 800dd3e:	2030      	movs	r0, #48	@ 0x30
 800dd40:	18e1      	adds	r1, r4, r3
 800dd42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dd46:	1c5a      	adds	r2, r3, #1
 800dd48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dd4c:	4422      	add	r2, r4
 800dd4e:	3302      	adds	r3, #2
 800dd50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dd54:	e7c2      	b.n	800dcdc <_printf_common+0x58>
 800dd56:	2301      	movs	r3, #1
 800dd58:	4622      	mov	r2, r4
 800dd5a:	4641      	mov	r1, r8
 800dd5c:	4638      	mov	r0, r7
 800dd5e:	47c8      	blx	r9
 800dd60:	3001      	adds	r0, #1
 800dd62:	d0e6      	beq.n	800dd32 <_printf_common+0xae>
 800dd64:	3601      	adds	r6, #1
 800dd66:	e7d9      	b.n	800dd1c <_printf_common+0x98>

0800dd68 <_printf_i>:
 800dd68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd6c:	7e0f      	ldrb	r7, [r1, #24]
 800dd6e:	4691      	mov	r9, r2
 800dd70:	2f78      	cmp	r7, #120	@ 0x78
 800dd72:	4680      	mov	r8, r0
 800dd74:	460c      	mov	r4, r1
 800dd76:	469a      	mov	sl, r3
 800dd78:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dd7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dd7e:	d807      	bhi.n	800dd90 <_printf_i+0x28>
 800dd80:	2f62      	cmp	r7, #98	@ 0x62
 800dd82:	d80a      	bhi.n	800dd9a <_printf_i+0x32>
 800dd84:	2f00      	cmp	r7, #0
 800dd86:	f000 80d3 	beq.w	800df30 <_printf_i+0x1c8>
 800dd8a:	2f58      	cmp	r7, #88	@ 0x58
 800dd8c:	f000 80ba 	beq.w	800df04 <_printf_i+0x19c>
 800dd90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dd98:	e03a      	b.n	800de10 <_printf_i+0xa8>
 800dd9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dd9e:	2b15      	cmp	r3, #21
 800dda0:	d8f6      	bhi.n	800dd90 <_printf_i+0x28>
 800dda2:	a101      	add	r1, pc, #4	@ (adr r1, 800dda8 <_printf_i+0x40>)
 800dda4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dda8:	0800de01 	.word	0x0800de01
 800ddac:	0800de15 	.word	0x0800de15
 800ddb0:	0800dd91 	.word	0x0800dd91
 800ddb4:	0800dd91 	.word	0x0800dd91
 800ddb8:	0800dd91 	.word	0x0800dd91
 800ddbc:	0800dd91 	.word	0x0800dd91
 800ddc0:	0800de15 	.word	0x0800de15
 800ddc4:	0800dd91 	.word	0x0800dd91
 800ddc8:	0800dd91 	.word	0x0800dd91
 800ddcc:	0800dd91 	.word	0x0800dd91
 800ddd0:	0800dd91 	.word	0x0800dd91
 800ddd4:	0800df17 	.word	0x0800df17
 800ddd8:	0800de3f 	.word	0x0800de3f
 800dddc:	0800ded1 	.word	0x0800ded1
 800dde0:	0800dd91 	.word	0x0800dd91
 800dde4:	0800dd91 	.word	0x0800dd91
 800dde8:	0800df39 	.word	0x0800df39
 800ddec:	0800dd91 	.word	0x0800dd91
 800ddf0:	0800de3f 	.word	0x0800de3f
 800ddf4:	0800dd91 	.word	0x0800dd91
 800ddf8:	0800dd91 	.word	0x0800dd91
 800ddfc:	0800ded9 	.word	0x0800ded9
 800de00:	6833      	ldr	r3, [r6, #0]
 800de02:	1d1a      	adds	r2, r3, #4
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	6032      	str	r2, [r6, #0]
 800de08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800de0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800de10:	2301      	movs	r3, #1
 800de12:	e09e      	b.n	800df52 <_printf_i+0x1ea>
 800de14:	6833      	ldr	r3, [r6, #0]
 800de16:	6820      	ldr	r0, [r4, #0]
 800de18:	1d19      	adds	r1, r3, #4
 800de1a:	6031      	str	r1, [r6, #0]
 800de1c:	0606      	lsls	r6, r0, #24
 800de1e:	d501      	bpl.n	800de24 <_printf_i+0xbc>
 800de20:	681d      	ldr	r5, [r3, #0]
 800de22:	e003      	b.n	800de2c <_printf_i+0xc4>
 800de24:	0645      	lsls	r5, r0, #25
 800de26:	d5fb      	bpl.n	800de20 <_printf_i+0xb8>
 800de28:	f9b3 5000 	ldrsh.w	r5, [r3]
 800de2c:	2d00      	cmp	r5, #0
 800de2e:	da03      	bge.n	800de38 <_printf_i+0xd0>
 800de30:	232d      	movs	r3, #45	@ 0x2d
 800de32:	426d      	negs	r5, r5
 800de34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de38:	230a      	movs	r3, #10
 800de3a:	4859      	ldr	r0, [pc, #356]	@ (800dfa0 <_printf_i+0x238>)
 800de3c:	e011      	b.n	800de62 <_printf_i+0xfa>
 800de3e:	6821      	ldr	r1, [r4, #0]
 800de40:	6833      	ldr	r3, [r6, #0]
 800de42:	0608      	lsls	r0, r1, #24
 800de44:	f853 5b04 	ldr.w	r5, [r3], #4
 800de48:	d402      	bmi.n	800de50 <_printf_i+0xe8>
 800de4a:	0649      	lsls	r1, r1, #25
 800de4c:	bf48      	it	mi
 800de4e:	b2ad      	uxthmi	r5, r5
 800de50:	2f6f      	cmp	r7, #111	@ 0x6f
 800de52:	6033      	str	r3, [r6, #0]
 800de54:	bf14      	ite	ne
 800de56:	230a      	movne	r3, #10
 800de58:	2308      	moveq	r3, #8
 800de5a:	4851      	ldr	r0, [pc, #324]	@ (800dfa0 <_printf_i+0x238>)
 800de5c:	2100      	movs	r1, #0
 800de5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800de62:	6866      	ldr	r6, [r4, #4]
 800de64:	2e00      	cmp	r6, #0
 800de66:	bfa8      	it	ge
 800de68:	6821      	ldrge	r1, [r4, #0]
 800de6a:	60a6      	str	r6, [r4, #8]
 800de6c:	bfa4      	itt	ge
 800de6e:	f021 0104 	bicge.w	r1, r1, #4
 800de72:	6021      	strge	r1, [r4, #0]
 800de74:	b90d      	cbnz	r5, 800de7a <_printf_i+0x112>
 800de76:	2e00      	cmp	r6, #0
 800de78:	d04b      	beq.n	800df12 <_printf_i+0x1aa>
 800de7a:	4616      	mov	r6, r2
 800de7c:	fbb5 f1f3 	udiv	r1, r5, r3
 800de80:	fb03 5711 	mls	r7, r3, r1, r5
 800de84:	5dc7      	ldrb	r7, [r0, r7]
 800de86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800de8a:	462f      	mov	r7, r5
 800de8c:	42bb      	cmp	r3, r7
 800de8e:	460d      	mov	r5, r1
 800de90:	d9f4      	bls.n	800de7c <_printf_i+0x114>
 800de92:	2b08      	cmp	r3, #8
 800de94:	d10b      	bne.n	800deae <_printf_i+0x146>
 800de96:	6823      	ldr	r3, [r4, #0]
 800de98:	07df      	lsls	r7, r3, #31
 800de9a:	d508      	bpl.n	800deae <_printf_i+0x146>
 800de9c:	6923      	ldr	r3, [r4, #16]
 800de9e:	6861      	ldr	r1, [r4, #4]
 800dea0:	4299      	cmp	r1, r3
 800dea2:	bfde      	ittt	le
 800dea4:	2330      	movle	r3, #48	@ 0x30
 800dea6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800deaa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800deae:	1b92      	subs	r2, r2, r6
 800deb0:	6122      	str	r2, [r4, #16]
 800deb2:	464b      	mov	r3, r9
 800deb4:	4621      	mov	r1, r4
 800deb6:	4640      	mov	r0, r8
 800deb8:	f8cd a000 	str.w	sl, [sp]
 800debc:	aa03      	add	r2, sp, #12
 800debe:	f7ff fee1 	bl	800dc84 <_printf_common>
 800dec2:	3001      	adds	r0, #1
 800dec4:	d14a      	bne.n	800df5c <_printf_i+0x1f4>
 800dec6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800deca:	b004      	add	sp, #16
 800decc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ded0:	6823      	ldr	r3, [r4, #0]
 800ded2:	f043 0320 	orr.w	r3, r3, #32
 800ded6:	6023      	str	r3, [r4, #0]
 800ded8:	2778      	movs	r7, #120	@ 0x78
 800deda:	4832      	ldr	r0, [pc, #200]	@ (800dfa4 <_printf_i+0x23c>)
 800dedc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dee0:	6823      	ldr	r3, [r4, #0]
 800dee2:	6831      	ldr	r1, [r6, #0]
 800dee4:	061f      	lsls	r7, r3, #24
 800dee6:	f851 5b04 	ldr.w	r5, [r1], #4
 800deea:	d402      	bmi.n	800def2 <_printf_i+0x18a>
 800deec:	065f      	lsls	r7, r3, #25
 800deee:	bf48      	it	mi
 800def0:	b2ad      	uxthmi	r5, r5
 800def2:	6031      	str	r1, [r6, #0]
 800def4:	07d9      	lsls	r1, r3, #31
 800def6:	bf44      	itt	mi
 800def8:	f043 0320 	orrmi.w	r3, r3, #32
 800defc:	6023      	strmi	r3, [r4, #0]
 800defe:	b11d      	cbz	r5, 800df08 <_printf_i+0x1a0>
 800df00:	2310      	movs	r3, #16
 800df02:	e7ab      	b.n	800de5c <_printf_i+0xf4>
 800df04:	4826      	ldr	r0, [pc, #152]	@ (800dfa0 <_printf_i+0x238>)
 800df06:	e7e9      	b.n	800dedc <_printf_i+0x174>
 800df08:	6823      	ldr	r3, [r4, #0]
 800df0a:	f023 0320 	bic.w	r3, r3, #32
 800df0e:	6023      	str	r3, [r4, #0]
 800df10:	e7f6      	b.n	800df00 <_printf_i+0x198>
 800df12:	4616      	mov	r6, r2
 800df14:	e7bd      	b.n	800de92 <_printf_i+0x12a>
 800df16:	6833      	ldr	r3, [r6, #0]
 800df18:	6825      	ldr	r5, [r4, #0]
 800df1a:	1d18      	adds	r0, r3, #4
 800df1c:	6961      	ldr	r1, [r4, #20]
 800df1e:	6030      	str	r0, [r6, #0]
 800df20:	062e      	lsls	r6, r5, #24
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	d501      	bpl.n	800df2a <_printf_i+0x1c2>
 800df26:	6019      	str	r1, [r3, #0]
 800df28:	e002      	b.n	800df30 <_printf_i+0x1c8>
 800df2a:	0668      	lsls	r0, r5, #25
 800df2c:	d5fb      	bpl.n	800df26 <_printf_i+0x1be>
 800df2e:	8019      	strh	r1, [r3, #0]
 800df30:	2300      	movs	r3, #0
 800df32:	4616      	mov	r6, r2
 800df34:	6123      	str	r3, [r4, #16]
 800df36:	e7bc      	b.n	800deb2 <_printf_i+0x14a>
 800df38:	6833      	ldr	r3, [r6, #0]
 800df3a:	2100      	movs	r1, #0
 800df3c:	1d1a      	adds	r2, r3, #4
 800df3e:	6032      	str	r2, [r6, #0]
 800df40:	681e      	ldr	r6, [r3, #0]
 800df42:	6862      	ldr	r2, [r4, #4]
 800df44:	4630      	mov	r0, r6
 800df46:	f000 f877 	bl	800e038 <memchr>
 800df4a:	b108      	cbz	r0, 800df50 <_printf_i+0x1e8>
 800df4c:	1b80      	subs	r0, r0, r6
 800df4e:	6060      	str	r0, [r4, #4]
 800df50:	6863      	ldr	r3, [r4, #4]
 800df52:	6123      	str	r3, [r4, #16]
 800df54:	2300      	movs	r3, #0
 800df56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800df5a:	e7aa      	b.n	800deb2 <_printf_i+0x14a>
 800df5c:	4632      	mov	r2, r6
 800df5e:	4649      	mov	r1, r9
 800df60:	4640      	mov	r0, r8
 800df62:	6923      	ldr	r3, [r4, #16]
 800df64:	47d0      	blx	sl
 800df66:	3001      	adds	r0, #1
 800df68:	d0ad      	beq.n	800dec6 <_printf_i+0x15e>
 800df6a:	6823      	ldr	r3, [r4, #0]
 800df6c:	079b      	lsls	r3, r3, #30
 800df6e:	d413      	bmi.n	800df98 <_printf_i+0x230>
 800df70:	68e0      	ldr	r0, [r4, #12]
 800df72:	9b03      	ldr	r3, [sp, #12]
 800df74:	4298      	cmp	r0, r3
 800df76:	bfb8      	it	lt
 800df78:	4618      	movlt	r0, r3
 800df7a:	e7a6      	b.n	800deca <_printf_i+0x162>
 800df7c:	2301      	movs	r3, #1
 800df7e:	4632      	mov	r2, r6
 800df80:	4649      	mov	r1, r9
 800df82:	4640      	mov	r0, r8
 800df84:	47d0      	blx	sl
 800df86:	3001      	adds	r0, #1
 800df88:	d09d      	beq.n	800dec6 <_printf_i+0x15e>
 800df8a:	3501      	adds	r5, #1
 800df8c:	68e3      	ldr	r3, [r4, #12]
 800df8e:	9903      	ldr	r1, [sp, #12]
 800df90:	1a5b      	subs	r3, r3, r1
 800df92:	42ab      	cmp	r3, r5
 800df94:	dcf2      	bgt.n	800df7c <_printf_i+0x214>
 800df96:	e7eb      	b.n	800df70 <_printf_i+0x208>
 800df98:	2500      	movs	r5, #0
 800df9a:	f104 0619 	add.w	r6, r4, #25
 800df9e:	e7f5      	b.n	800df8c <_printf_i+0x224>
 800dfa0:	0800ec74 	.word	0x0800ec74
 800dfa4:	0800ec85 	.word	0x0800ec85

0800dfa8 <_realloc_r>:
 800dfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dfac:	4680      	mov	r8, r0
 800dfae:	4615      	mov	r5, r2
 800dfb0:	460c      	mov	r4, r1
 800dfb2:	b921      	cbnz	r1, 800dfbe <_realloc_r+0x16>
 800dfb4:	4611      	mov	r1, r2
 800dfb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dfba:	f7ff bb67 	b.w	800d68c <_malloc_r>
 800dfbe:	b92a      	cbnz	r2, 800dfcc <_realloc_r+0x24>
 800dfc0:	f7ff fcc0 	bl	800d944 <_free_r>
 800dfc4:	2400      	movs	r4, #0
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfcc:	f000 f850 	bl	800e070 <_malloc_usable_size_r>
 800dfd0:	4285      	cmp	r5, r0
 800dfd2:	4606      	mov	r6, r0
 800dfd4:	d802      	bhi.n	800dfdc <_realloc_r+0x34>
 800dfd6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dfda:	d8f4      	bhi.n	800dfc6 <_realloc_r+0x1e>
 800dfdc:	4629      	mov	r1, r5
 800dfde:	4640      	mov	r0, r8
 800dfe0:	f7ff fb54 	bl	800d68c <_malloc_r>
 800dfe4:	4607      	mov	r7, r0
 800dfe6:	2800      	cmp	r0, #0
 800dfe8:	d0ec      	beq.n	800dfc4 <_realloc_r+0x1c>
 800dfea:	42b5      	cmp	r5, r6
 800dfec:	462a      	mov	r2, r5
 800dfee:	4621      	mov	r1, r4
 800dff0:	bf28      	it	cs
 800dff2:	4632      	movcs	r2, r6
 800dff4:	f000 f82e 	bl	800e054 <memcpy>
 800dff8:	4621      	mov	r1, r4
 800dffa:	4640      	mov	r0, r8
 800dffc:	f7ff fca2 	bl	800d944 <_free_r>
 800e000:	463c      	mov	r4, r7
 800e002:	e7e0      	b.n	800dfc6 <_realloc_r+0x1e>

0800e004 <memmove>:
 800e004:	4288      	cmp	r0, r1
 800e006:	b510      	push	{r4, lr}
 800e008:	eb01 0402 	add.w	r4, r1, r2
 800e00c:	d902      	bls.n	800e014 <memmove+0x10>
 800e00e:	4284      	cmp	r4, r0
 800e010:	4623      	mov	r3, r4
 800e012:	d807      	bhi.n	800e024 <memmove+0x20>
 800e014:	1e43      	subs	r3, r0, #1
 800e016:	42a1      	cmp	r1, r4
 800e018:	d008      	beq.n	800e02c <memmove+0x28>
 800e01a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e01e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e022:	e7f8      	b.n	800e016 <memmove+0x12>
 800e024:	4601      	mov	r1, r0
 800e026:	4402      	add	r2, r0
 800e028:	428a      	cmp	r2, r1
 800e02a:	d100      	bne.n	800e02e <memmove+0x2a>
 800e02c:	bd10      	pop	{r4, pc}
 800e02e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e032:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e036:	e7f7      	b.n	800e028 <memmove+0x24>

0800e038 <memchr>:
 800e038:	4603      	mov	r3, r0
 800e03a:	b510      	push	{r4, lr}
 800e03c:	b2c9      	uxtb	r1, r1
 800e03e:	4402      	add	r2, r0
 800e040:	4293      	cmp	r3, r2
 800e042:	4618      	mov	r0, r3
 800e044:	d101      	bne.n	800e04a <memchr+0x12>
 800e046:	2000      	movs	r0, #0
 800e048:	e003      	b.n	800e052 <memchr+0x1a>
 800e04a:	7804      	ldrb	r4, [r0, #0]
 800e04c:	3301      	adds	r3, #1
 800e04e:	428c      	cmp	r4, r1
 800e050:	d1f6      	bne.n	800e040 <memchr+0x8>
 800e052:	bd10      	pop	{r4, pc}

0800e054 <memcpy>:
 800e054:	440a      	add	r2, r1
 800e056:	4291      	cmp	r1, r2
 800e058:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e05c:	d100      	bne.n	800e060 <memcpy+0xc>
 800e05e:	4770      	bx	lr
 800e060:	b510      	push	{r4, lr}
 800e062:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e066:	4291      	cmp	r1, r2
 800e068:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e06c:	d1f9      	bne.n	800e062 <memcpy+0xe>
 800e06e:	bd10      	pop	{r4, pc}

0800e070 <_malloc_usable_size_r>:
 800e070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e074:	1f18      	subs	r0, r3, #4
 800e076:	2b00      	cmp	r3, #0
 800e078:	bfbc      	itt	lt
 800e07a:	580b      	ldrlt	r3, [r1, r0]
 800e07c:	18c0      	addlt	r0, r0, r3
 800e07e:	4770      	bx	lr

0800e080 <_init>:
 800e080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e082:	bf00      	nop
 800e084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e086:	bc08      	pop	{r3}
 800e088:	469e      	mov	lr, r3
 800e08a:	4770      	bx	lr

0800e08c <_fini>:
 800e08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e08e:	bf00      	nop
 800e090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e092:	bc08      	pop	{r3}
 800e094:	469e      	mov	lr, r3
 800e096:	4770      	bx	lr
